{"id":474446,"title":"11｜字符串匹配：如何实现最快的grep工具","content":"<p>你好，我是微扰君。</p><p>grep命令，相信使用过Linux的同学都会非常熟悉，我们常常用它在Linux上进行文本搜索操作，具体来说就是从一段文本中查找某个字符串存在的行。下面一个典型的grep的使用例子，比如我可以用它来看看自己在LeetCode上用Java做了多少题：</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/aa/9b96f1b08a964ba051681c05dc3f8faa.png?wh=866x268\" alt=\"图片\"></p><p>GNU Grep 则是 grep 命令的一个工业级实现，在项目官方 Readme 中作者是这样介绍它的：</p><blockquote>\n<p>This is GNU grep, the “fastest grep in the west” (we hope).</p>\n</blockquote><p>其实就是在说这是世界上最快的grep程序。当然，这款从上世纪就诞生的软件，敢这么说自己也是因为它有着十足的底气。</p><p>GNU Grep 确实是将“文本搜索”这一简单的功能做到了极致。作者 Mike Haertel 自己写了<a href=\"https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html\">一封邮件</a>解释 GNU Grep 为什么这么快，主要有两点：</p><ol>\n<li>它避免了检查每一个byte</li>\n<li>对于被检查的byte，只需要执行非常少的指令</li>\n</ol><p><strong>第一点的主要优化就在于 GNU Grep 用到了非常知名的字符串匹配算法：Boyer Moore 算法</strong>，也就是我们常说的 BM 算法，它是目前已知的在大多数工业级应用场景中最快的字符串匹配算法，因而被广泛应用在各种需要搜索关键词的软件中，许多文档编辑器快捷键 <code>ctrl+f</code> 对应的搜索功能都是基于这个算法实现的。</p><!-- [[[read_end]]] --><p>那第二点呢，就是当你发现查询的速度已经优化到足够好时，也需要让IO的速度更快一些，查询所需的指令也更少一些，这里可以优化的地方就更多了。</p><p>比如由于 grep 是按行查找的，许多版本的 grep 实现都会去遍历查找<code>\\n</code> 换行符先进行分行，但 GNU Grep 则是将搜索文本直接读入一个缓冲区优先查找目标字符串，只有命中时才会在命中位置的前后进行换行符的查找；又比如，GNU Grep提供了基于mmap映射内存到文件的参数，可以减少一些内存拷贝的时间开销。具体的细节还有很多，比较繁琐，有兴趣的同学可以自行查阅 Mike Haertel 的<a href=\"https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html\">邮件</a>。</p><p>这个例子也再次说明了一件事情，<strong>要写出真正高性能的程序，不只要懂算法，也要懂计算机底层原理</strong>；只有这样，才能真正了解程序在运行时可能存在的各种性能瓶颈，找到不同场景下的最优解。</p><p>好我们回到今天的主题，字符串匹配。这也是一个经典问题了，相关算法非常多种，比如最暴力的 Brute-Force 算法、将前缀信息运用到极致理论性能极佳的KMP算法，还有利用哈希思想和滑动窗口思想的Rabin-Karp算法等等。</p><p>那为什么BM算法的性能在工程实战中最好呢？</p><p>别急，老规矩，我们还是先来严谨地定义一下字符串匹配问题，方便展开后面的讨论。</p><h2>字符串匹配问题</h2><p>假设给定长度为n的主串 s[0…n-1] 和长度为m的模式串 p[0…m-1]，一般n远大于m，请实现一个函数 match(string s, string p) 用于找出所有的p在s中出现的位置。</p><p>那如何解决这个问题呢？<br>\n<img src=\"https://static001.geekbang.org/resource/image/f2/5b/f244ae179a364325fc79645b57d53a5b.jpg?wh=2312x1379\" alt=\"\"></p><p>容易理解、复杂度也相对差的方法就是，遍历主串的每一个位置，看当前位置是否能和模式串匹配上；能否匹配的判断方式也很简单，从主串的当前位置开始，逐一对比主串对应字符是否和模式串相等。如果可以匹配，说明找到了一个匹配的位点，记录下来；如果不可以匹配，我们就继续尝试下一个位置，直到整个主串遍历完全。这也是<strong>最暴力的Brute-Force算法</strong>的思路。</p><p>写成代码如下：</p><pre><code class=\"language-c++\">/*\n&nbsp;* s: 主串\n&nbsp;* p：模式串\n&nbsp;*/\nstd::vector&lt;intstring&gt; match(string s, string p) {\n&nbsp; std::vector&lt;int&gt; ans;\n  int n = s.size();\n  int m = p.size();\n&nbsp; int i, j;\n&nbsp; for (i = 0; i &lt; n - m + 1; i++) {\n&nbsp; &nbsp; for (j = 0; j &lt; m; j++) {\n&nbsp; &nbsp; &nbsp; if (s[i + j] != p[j]) break;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; if (j == m) ans.push_back(i);\n&nbsp; }\n&nbsp; return ans;\n}\n</code></pre><p>代码非常清晰易懂，相信你看懂没什么压力。</p><p><strong>通常在字符串不长的时候，不同的匹配算法之间的效率差异不大</strong>。Brute-Force算法的实现和理解都非常简单，不容易出错，完美地符合了KISS（Keep it simple, stupid）原则，也就是让代码尽量简单从而避免出错。所以BF算法在真实开发的环境中出镜率很高，在日常工作中如果有手写字符串匹配的需求，你也可以考虑这种方式。</p><p>但这个算法在最坏的情况下时间复杂度确实不是很理想。</p><p>比如s = AAAAAAAA、p = AAAB时，在每个位置匹配p最终都会失败，但是都需要匹配到p的最后一个字母“B”才能发现匹配失败；这就导致我们总共需要匹配 m<em>n 次，其时间复杂度就是 O(m</em>n)。<br>\n<img src=\"https://static001.geekbang.org/resource/image/96/2f/962daeec277d3d043d6e1fe532a84d2f.jpg?wh=2312x1379\" alt=\"\"></p><p>那有没有办法优化它呢？我们再来认真观察一下BF算法，首先会从主串和模式串的头开始遍历匹配，看第一次匹配的情况，BF算法之所以慢，就在于匹配p[3]失败后，我们又从模式串的第一个字符p[0]和主串的下一个位置s[1]开始比较，而s[1]这个位置其实在之前的搜索过程中出现过了。</p><p>所以，<strong>我们有没有办法通过一些预处理的手段，利用p[0…2]和当前正在匹配的主串中s[0…2]相等的已知信息，跳过一些肯定不可能的匹配，从失配处s[3]继续匹配呢</strong>？ KMP和BM算法其实都是这样做的，只不过手段有些差别。</p><p>KMP算法将前缀的信息利用到了极致，用匹配串自身的信息建立了一张部分匹配表，在每次失配的时候可以用来加速模式串，而不是每次都只向后移动一位。其算法逻辑整体比较复杂，感兴趣的同学可以网上搜索一下相关资料自行学习。</p><p>而GNU Grep 中用到的BM（Boyer Moore）算法，不仅理解起来容易很多，实际应用时性能也更好，它同样是基于预处理来避免不必要的重复匹配。但BM算法引入了两条很好懂的规则，“坏字符”和“好后缀”规则，并采用从后往前的匹配顺序进行匹配，构思非常巧妙。</p><p>后面的内容我们就用 moore 教授本人提供的<a href=\"https://www.cs.utexas.edu/~moore/best-ideas/string-searching/fstrpos-example.html\">例子</a>来讲解。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/c8/b6c0716e8d293d29fd1931a7cc7cb0c8.png?wh=818x164\" alt=\"图片\"></p><p>其中模式串p是EXAMPLE，主串s是 HERE IS A SIMPLE EXAMPLE。</p><h2>坏字符规则</h2><p>先来看第一条规则：“坏字符”规则，描述的是主串上的失配字符，目的就是为了跳过一些肯定不可能成立的匹配位置。</p><p>在BM算法中，我们同样将s和p对齐，开始遍历匹配，但匹配的顺序和BF算法不同，<strong>采用从后往前匹配的方式</strong>。这其实是一种非常巧妙的设计，你马上可以看到它配合坏字符规则使用时有着绝佳的效果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/06/c7/06149aa63e9yya45e22f3dedea5301c7.jpg?wh=2312x1379\" alt=\"\"></p><p>所以在例子中，第一次尝试匹配，首先会把p[6]的“E”和s[6]的“S”匹配，发现它们不匹配，所以这里的“S”就是一个坏字符。</p><p>那此时我们有两种选择，一种就是直接将模式串往后移动一位尝试继续匹配，这就和之前BF算法的想法差不多，没有利用到模式串中任何先验的信息。</p><p>而另一种呢，就是BM的做法了。<br>\n<img src=\"https://static001.geekbang.org/resource/image/60/3b/60e54463301257abc4f75fb8db85723b.jpg?wh=2312x1379\" alt=\"\"></p><p>我们先看失配的坏字符“S”在模式串p中是否有出现，如果没有出现，那说明模式串其实不可能和这个位置有重叠，可以直接跳过这段位置，从主串的下一个位置开始匹配。在例子中，“S”显然不属于模式串EXAMPLE，我们就应该跳过“S”继续匹配，这样就大大加速了匹配的过程。</p><p>同样在下一步匹配时，因为主串的“P”和模式串的末尾“E”不匹配，但失配的“P”在模式串中就有出现，我们可以将模式串中最后一次出现的“P”和主串中的“P”对齐，同样从模式串尾开始匹配。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3c/b9/3c1ff31210fb788a18a8b9c1ff468db9.jpg?wh=2312x1379\" alt=\"\"></p><p>至此，坏字符的主要内涵就全部展示出来了，也就是，<strong>每次失配的时候，我们需要将匹配串往后移动 （失配位置下标 - 失配字符最右出现的位置下标） 位</strong>；如果失配字符不存在，则位置为-1。</p><p>这里你可能会有个疑问，为什么是最右的位置呢，不应该是记录上一次出现的位置吗？我的理解是，如果在每个位置都存储相比于当前位置的上一次失配字符出现的位置，存储开销会大得多；而如果只存每个字符最右出现的位置，我们所需要的只是一个字符集大小的哈希表，用一个长度为256的数组即可实现。</p><p>当然，这个公式会导致我们有时候求出的移动值可能是负的，让模式串反而向前移动了。比如在 BBBBBB 和 ABB 匹配时，第一次失配的坏字符B，会让匹配串往后移动（0-2=）-2位，导致前移。<br>\n<img src=\"https://static001.geekbang.org/resource/image/39/e7/399c7046392324fa8bae68248e06d5e7.jpg?wh=2312x1379\" alt=\"\"></p><p>那往前移显然是没有意义的，因为当前位置之前的匹配可能我们已经全部排除了；所以当移动位数出现负数时，我们也要让模式串至少往后移动一位，这点通过对基于坏字符的移动值和1取max操作即可实现。</p><p>而在这种时候，我们另一条规则“好后缀”也就可以发挥作用了。</p><h2>好后缀规则</h2><p>我们继续来看刚刚的例子。</p><p>在SIMPLE和EXAMPLE的匹配中，我们发现“MPLE”都匹配得上，但主串中的“I”和模式串中的“A”出现了失配。那这里的“MPLE”，我们就会称之为好后缀；同样“PLE”、“LE”、“E”其实也都是好后缀。</p><p>此时如果应用之前的坏字符规则，我们应该将模式串往后移动（2-(-1)=）3位，因为“I”在模式串中不存在。</p><p>但是，有没有办法利用已经匹配上的好后缀“MPLE”的信息，往后移动更多位呢？</p><p>当然是可以的，我们只要看匹配上的好后缀“MPLE”及它的子串“PLE”、“LE”、“E”是否之前也出现在模式串中即可。这里只有子串“E”之前也出现在了模式串中，所以我们<strong>可以直接把模式串移动至和这里主串的“E”对齐即可，这样我们向后移动了6位，显然比坏字符规则跳过了更多不可能的情况</strong>。<br>\n<img src=\"https://static001.geekbang.org/resource/image/7d/81/7d108b48c017acc6b83b62d6eeb50281.jpg?wh=2312x1379\" alt=\"\"></p><p>总结起来，好后缀规则移动的方式就是，<strong>找到好后缀在模式串中最右的匹配位置，总计向后移动（模式串字符长度 - 1 - 好后缀在模式串上次出现的最右位置）位。</strong>以EXAMPLE为例，好后缀“E”在模式串中上一次出现的下标是0，整个字符串长度为7，所以向后移动（7-1-0）6个位置。</p><p>这里还需要注意一点，好后缀匹配的时候，只有最长的好后缀被允许出现在模式串的中间位置；其余子串只能匹配在模式串的前缀中。比如下面的例子，主串中的“A”和模式串中的“C”失配，“MABC”是最长好后缀，但之前并没有出现在模式串中。</p><ul>\n<li>我们不能直接将模式串直接移到“MABC”之后，因为这样会错过好后缀子串“ABC”的匹配点。</li>\n<li>但同样我们也不用匹配红色虚线框中的“ABC”，因为“MABC”没有匹配上，后面所有的MABC的子后缀匹配肯定只能发生在模式串的前缀中。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/15/58/158a9ac35bfb30c0cd48e06fc22ff558.jpg?wh=2312x1379\" alt=\"\"></p><p>好后缀和坏字符规则其实都是可以单独使用的；BM算法，为了尽可能多地跳过不可能匹配的字符，会选择两条规则中的较大移动值来往后移动。<strong>而且这两个规则和主串都没有关系，只和模式串自身有关，我们显然可以通过预处理得到两个规则的偏移表，来加速整个模式匹配的过程</strong>。</p><p>好了，现在讲完了BM算法“好后缀”、“坏字符”的两个规则和从后往前匹配的策略，我们一起来把例子匹配完成吧。</p><p>在查表发现好后缀的规则能跳过更多的位置后，我们选择将模式串往后移动了6位。这时“P”和  “E”没有匹配成功，我们采用坏字符规则，拿着坏字符“P”，找到模式串中出现的“P”位于p[4]，向后移动(6-4=) 2位和主串的“P”对齐。从尾部往前遍历匹配，此时，我们发现所有的字符都匹配上了，因而找到了一个完全匹配的位置。<br>\n<img src=\"https://static001.geekbang.org/resource/image/fc/60/fc1yy27fd7c2d28346b56d6a88cc6260.jpg?wh=2312x1379\" alt=\"\"></p><h2>具体实现</h2><p>相信你现在已经大体理解整个BM算法的思路了，但正所谓，“细节是魔鬼”，BM算法从概念上理解其实并不是很难，但真要手写实现还是比较困难的，不熟练的时候debug很容易花费很多的时间。为了方便起见，我们就用Python来实现这个算法。</p><p>具体实现我们可以分为三个大块：“坏字符”最右位置计算、“好后缀”偏移表计算、在主串上的搜索实现。</p><h3>坏字符最右位置计算</h3><p>“坏字符”的部分是最简单的，只需要开一个dict，遍历一次模式串，找到每个字符出现在模式串中的最右侧的那个位置即可。事实上，我们可以用一个[0,256]的数组来替代HashMap以提高性能，大部分工业级实现也都是这样做的。</p><pre><code class=\"language-python\">def get_bc(pattern):\n    bc = dict() # 记录每个badchar最右出现的位置\n    for i in range(len(pattern) - 1):\n        char = pattern[i]\n        bc[char] = i + 1\n    return bc\n</code></pre><p>由于遍历的时候我们会不断地覆写dict，所以最后遍历完成，就能得到每个badchar在模式串中最右侧的位置。</p><h3>好后缀偏移表计算</h3><p>“好后缀”的部分相对来说比较复杂，尤其是工业级的实现对性能要求很高，代码有很多trick，非常不易于理解，这里我们做一些简化的处理；而且在大部分时候，由于模式串比主串要短的多，即使预处理时间复杂度稍微高一些，问题也不是很大。</p><pre><code class=\"language-python\">def get_gs(pattern):\n    gs = dict()\n    gs[''] = len(pattern)\n\n    # suf_len 用于标记后缀长度\n    for suf_len in range(len(pattern)):\n        suffix = pattern[len(pattern) - suf_len - 1:]\n        # j 用于标记可用于匹配的位置\n        for j in range(len(pattern) - suf_len - 1):\n            substr = pattern[j:j + suf_len + 1]\n            if suffix == substr:\n                gs[suffix] = len(pattern) - j - suf_len - 1\n\n    for suf_len in range(len(pattern)):\n        suffix = pattern[len(pattern) - suf_len - 1:]\n        if suffix in gs: continue\n        gs[suffix] = gs[suffix[1:]]\n\n    gs[''] = 0\n    return gs\n</code></pre><p>我们同样开一个dict，用于标记失配时每个字符串应该往后移动多少，也就是对应的好后缀应该和之前哪个子串或者前缀匹配。怎么做呢？</p><p>一种比较暴力的做法就是遍历所有可能的后缀，然后从前往后看这个后缀是否在模式串中的其他位置也出现了，后面遍历的会覆盖之前的记录，所以记录下来的就是最右的匹配位置。</p><p>记得前面说过如果一个后缀在模式串中不存在，<strong>我们不能直接跳过整个字符串，因为该后缀的子串还可能和模式串中的前缀重合</strong>。比如例子中的“MPLE”后缀虽然不再存在于“EXAMPLE”中，但是其子串“E”与“EXAMPLE”的前缀“E”是重叠的。</p><p>所以在后缀不存在的时候，还需要检查一下其子后缀是否在dict有对应的匹配，如果有的话，也应该采用；这个通过一次循环赋值即可实现，对应到代码里就是第14到17行。</p><p>我这里实现的时间复杂度为O(m^3)，你可以自己推导一下，也欢迎去留言区讨论。</p><h3>匹配过程</h3><p>有了好后缀的偏移表和坏字符的最右位置，我们就可以来实现整个匹配的过程了。</p><pre><code class=\"language-python\">def bm(string, pattern, bc, gs):\n    # i 用于标记当前模式串和主串哪个位置左对齐。\n    i = 0 \n    # j 用于标记当前模式串匹配到哪个位置；从右往左遍历匹配。\n    j = len(pattern)\n\n    while i &lt; len(string) - len(pattern) and (j &gt; 0):\n            # 从右往左匹配每个位置\n            a = string[i + j - 1]\n            b = pattern[j - 1]\n            if a == b: # 匹配的上，继续匹配前一位\n                j = j - 1\n            else: # 匹配不上，根据两个规则的预处理结果进行快速移动\n                i = i + max(gs.setdefault(pattern[j:], len(pattern)), j - bc.setdefault(a, 0))\n                j = len(pattern)\n            # 匹配成功返回匹配位置\n            if j == 0:\n                return i\n    # 匹配失败返回 None\n    return -1\n    \nif __name__ == '__main__':\n    string = 'here is a simple example ' \n    pattern = 'example'\n\n    bc = get_bc(pattern)  # 坏字符表\n    gs = get_gs(pattern)  # 好后缀表\n\n    print(gs)\n\n    x = bm(string, pattern, bc, gs)\n\n    print(x)\n\n</code></pre><p>参照详细的注释，整个过程和前面讲解的原理是一一对应的，你可以配合代码一起理解。 完整的代码我放到了<a href=\"https://github.com/wfnuser/Algorithms/blob/main/Boyer-Moore/bm.py\">GitHub</a>上。</p><h3>时间复杂度</h3><p>Boyer-Moore 算法，在最好情况下复杂度可以达到 O(n/m)，在字符集比较大的时候，坏字符和好后缀规则可以帮助我们快速跳过大部分不必要的查询，达到接近最好的时间复杂度的概率是比较大。</p><p>但BM算法的最坏时间复杂度估计就是一个很难的数学问题了，许多学者都尝试做过相关的证明，目前我知道相对精细的比较上限次数的估计是Guibas和Odlyzko给出的3n，你感兴趣的话可以阅读<a href=\"https://ieeexplore.ieee.org/document/4567942\">原始论文</a>了解。</p><p>因而和KMP一样，BM算法的理论时间复杂度也在O(m+n)之内，但由于字符集比较大的时候，BM常常能达到更好的时间复杂度，所以在实际应用中得到了更广泛的使用。</p><h2>总结</h2><p>我们来总结一下BM算法的特性。</p><p>BM算法，最大的特点就是利用了对目标串的预处理，用空间换时间，避免了许多不必要的比较，预处理的方式主要来自于对“坏字符”和“好后缀”两条规则的观察，因为这两个规则和主串都没有关系，只和模式串自身有关，显然可以通过预处理得到两个规则的偏移表，来加速整个模式匹配的过程。</p><p>总的来说，BM算法不难理解但实现起来有一定复杂度，感兴趣的同学可以自行练习。不过这一个特定的字符串匹配算法的学习其实还是次要的，空间换时间和预处理的思想你可以好好感受。</p><h3>课后作业</h3><p>相信通过今天的学习，你已经知道了如何基于Boyer-Moore算法实现一个高效的grep命令了吧。这里我也把<a href=\"https://github.com/zevweiss/grep/blob/7b894c48b2fba94c0f8f21f9d464fab864df038a/src/kwset.c\">grep源码</a>中BM算法出现的地方分享给你，代码中运用了许多不同的技巧，可读性其实并不是很好，作为今天的课后作业，留给你课后研究。</p><p>如果你在阅读代码的时候有什么问题欢迎留言和我一起讨论。如果你觉得有收获，也欢迎分享给身边的朋友一起学习，我们下节课见～</p>","comments":[{"had_liked":false,"id":329245,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1641255294,"is_pvip":false,"replies":[{"id":"120062","content":"哈哈哈 确实是看了就忘 不过也不太有手写的机会，了解原理我觉得也差不多啦","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1641445765,"ip_address":"","comment_id":329245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231189886","product_id":100100901,"comment_content":"BM算法和KMP算法是类似的，都是采用了预处理来加快查询，区别是KMP扫描和匹配方向是相同的，都是从左到右，BM扫描从左到右，匹配从右到左，在字符串差异比较大的情况，可以跳过更多，这也是坏字符算法的作用，但是仅仅凭着坏字符算法处理两个字符串比较接近的情况，复杂度就会退化为O(m*n),这个时候引入KMP类似的子串跳转算法，避免了最差的情况，可以取得O(m+n)。坏字符类似于粗调，只用到了当前不匹配的字符，好后缀类似于精调，用到了不包括当前字符所有已经匹配的字符串。BM和KMP算法和红黑树算法一样，属于我一看就忘的类型,:）。","like_count":3,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544237,"discussion_content":"哈哈哈 确实是看了就忘 不过也不太有手写的机会，了解原理我觉得也差不多啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641445765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340460,"user_name":"Jump","can_delete":false,"product_type":"c1","uid":1139482,"ip_address":"","ucode":"6C229DD3AE29A8","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/1a/367ebeac.jpg","comment_is_top":false,"comment_ctime":1648823167,"is_pvip":false,"replies":[{"id":"126016","content":"示例代码确实有问题 可以提个issue给我哈 我上次没来得及修复","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1652171435,"ip_address":"","comment_id":340460,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1648823167","product_id":100100901,"comment_content":"str = AMPLEMABCABCMABC，pattern = ABCABCMABC，示例代码有点问题。","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571300,"discussion_content":"示例代码确实有问题 可以提个issue给我哈 我上次没来得及修复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652171435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139482,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/1a/367ebeac.jpg","nickname":"Jump","note":"","ucode":"6C229DD3AE29A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559750,"discussion_content":"修改两个地方：\n1.  bm函数循环的位置：\n    while i &lt; len(string) and (j &gt; 0)：\n2. get_gs函数17行改成：\n    for j in range(1,len(suffix)):\n        sub_suffix = suffix[j:]\n        if pattern.startswith(sub_suffix):\n            gs[suffix] = len(pattern) - len(sub_suffix)\n            break","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648911319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332253,"user_name":"王建新","can_delete":false,"product_type":"c1","uid":1934802,"ip_address":"","ucode":"E3151DDC0EEF0D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/85/d2/045c63fb.jpg","comment_is_top":false,"comment_ctime":1643115276,"is_pvip":false,"replies":[{"id":"126032","content":"一般面试的时候不会要求KMP这样难度的代码 能写暴力对比的就行～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1652176203,"ip_address":"","comment_id":332253,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643115276","product_id":100100901,"comment_content":"leetcode好像有类似很多的字符串匹配题目 思路就是这样的","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571331,"discussion_content":"一般面试的时候不会要求KMP这样难度的代码 能写暴力对比的就行～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652176203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329682,"user_name":"Daneil","can_delete":false,"product_type":"c1","uid":1812658,"ip_address":"","ucode":"7DA18D5D2E732E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/b2/5acb4806.jpg","comment_is_top":false,"comment_ctime":1641467126,"is_pvip":false,"replies":[{"id":"120238","content":"哈哈哈 没事 多多交流噻～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1641787546,"ip_address":"","comment_id":329682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641467126","product_id":100100901,"comment_content":"不好意思，刚才看错了","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544943,"discussion_content":"哈哈哈 没事 多多交流噻～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641787546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329681,"user_name":"Daneil","can_delete":false,"product_type":"c1","uid":1812658,"ip_address":"","ucode":"7DA18D5D2E732E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/b2/5acb4806.jpg","comment_is_top":false,"comment_ctime":1641466986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641466986","product_id":100100901,"comment_content":"好后缀计算的代码中，14-17行后缀的遍历有误。应当让后缀从小到大去进行遍历，而不是让后缀从大到小，一旦有一个大的后缀在gs表中，那么他的所有子后缀都不需要遍历，一定在gs表中。","like_count":0}]}