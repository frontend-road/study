{"id":526946,"title":"43｜RESTful Web Services（7）：剩下两个Sad Path场景该如何处理？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/2e/ed95e0629105b3fe661590be6ab4af2e.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/aa/56/aacdc2230e337d593308c0184b799956.jpg?wh=2284x1285\" alt=\"\"></p><p>任务列表为：</p><ul>\n<li>\n<p>ResourceServlet</p>\n<ul>\n<li>\n<p>将请求派分给对应的资源（Resource），并根据返回的状态、超媒体类型、内容，响应Http请求</p>\n<ul>\n<li><s>使用OutboundResponse的status作为Http Response的状态</s></li>\n<li><s>使用OutboundResponse的headers作为Http Response的Http Headers</s></li>\n<li><s>通过MessageBodyWriter将OutboundResponse的GenericEntity写回为Body</s></li>\n<li>如果找不到对应的MessageBodyWriter，则返回500族错误</li>\n<li>如果entity为空，则忽略body</li>\n</ul>\n</li>\n<li>\n<p>当资源方法抛出异常时，根据异常影响Http请求</p>\n<ul>\n<li><s>如果抛出WebApplicationException，且response不为null，则使用response响应Http</s></li>\n<li><s>如果抛出的不是WebApplicationException，则通过异常的具体类型查找ExceptionMapper，生产response响应Http请求</s></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>RuntimeDelegate</p>\n<ul>\n<li>为MediaType提供HeaderDelegate</li>\n<li>为CacheControl提供HeaderDelegate</li>\n<li>为Cookie提供HeaderDelegates</li>\n<li>为EntityTag提供HeaderDelegate</li>\n<li>为Link提供HeaderDelegate</li>\n<li>为NewCookie提供HeaderDelegate</li>\n<li>为Date提供HeaderDelegate</li>\n<li>提供OutboundResponseBuilder</li>\n</ul>\n</li>\n<li>\n<p>OutboundResponseBuilder</p>\n</li>\n<li>\n<p>OutboundResponse</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>代码为：</p><pre><code>package geektime.tdd.rest;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.ws.rs.WebApplicationException;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.MultivaluedMap;\nimport jakarta.ws.rs.ext.ExceptionMapper;\nimport jakarta.ws.rs.ext.MessageBodyWriter;\nimport jakarta.ws.rs.ext.Providers;\nimport jakarta.ws.rs.ext.RuntimeDelegate;\nimport java.io.IOException;\n\npublic class ResourceServlet extends HttpServlet {\n\n    private Runtime runtime;\n    \n    public ResourceServlet(Runtime runtime) {\n        this.runtime = runtime;\n    }\n    \n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ResourceRouter router = runtime.getResourceRouter();\n        Providers providers = runtime.getProviders();\n        \n        OutboundResponse response;\n        try {\n            response = router.dispatch(req, runtime.createResourceContext(req, resp));\n        } catch (WebApplicationException exception) {\n            response = (OutboundResponse) exception.getResponse();\n        } catch (Throwable throwable) {\n            ExceptionMapper mapper = providers.getExceptionMapper(throwable.getClass());\n            response = (OutboundResponse) mapper.toResponse(throwable);\n        }\n        \n        resp.setStatus(response.getStatus());\n        MultivaluedMap&lt;String, Object&gt; headers = response.getHeaders();\n        for (String name : headers.keySet())\n            for (Object value : headers.get(name)) {\n                RuntimeDelegate.HeaderDelegate headerDelegate = RuntimeDelegate.getInstance().createHeaderDelegate(value.getClass());\n                resp.addHeader(name, headerDelegate.toString(value));\n            }\n        GenericEntity entity = response.getGenericEntity();\n        MessageBodyWriter writer = providers.getMessageBodyWriter(entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType());\n        writer.writeTo(entity.getEntity(), entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType(),\n                response.getHeaders(), resp.getOutputStream());\n    }\n}\n</code></pre><h2>视频演示</h2><p>下面让我们继续：</p><p><video poster=\"https://media001.geekbang.org/bedbd906faaf40e59e41a64cd0e7c93f/snapshots/6b5af0a4315f4a519bcce9e76e47be4c-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/32ef49d-1815c875fe6-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/113cd6862e224b91bdfff44427ad34e4/462d91cf1aaa4cf4a6d41c88b3e8f4e1-a37520be17546694d0527f9d969f93de-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题。</p><ol>\n<li>在现有代码的基础上，该如何构造测试呢？</li>\n<li>在这节课的实操中，你有遇到什么卡壳的地方吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","comments":[{"had_liked":false,"id":349915,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1656423449,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"代码 https:&#47;&#47;github.com&#47;wyyl1&#47;geektime-tdd-framework&#47;tree&#47;7","like_count":0},{"had_liked":false,"id":349413,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1655959573,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"https:&#47;&#47;github.com&#47;vfbiby&#47;tdd-restful\n小步提交","like_count":0}]}