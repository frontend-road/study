{"id":489409,"title":"31｜new和delete背后：分配函数和释放函数","content":"<p>你好，我是吴咏炜。</p><p>有一个我之前没讲、但挺有意思的话题是 <code>new</code> 和 <code>delete</code> 行为的定制。这件事情我很久很久以前就做过 <span class=\"orange\">[1]</span>，没往专栏里写的最主要原因是，这实际是 C++98 就有的高级技巧，不属于现代 C++。不过，在目前续写的内容里，我就不再拘泥必须新了，既然这是 C++ 里现在仍然需要的技巧，那就还是介绍一下。何况，这部分在现代 C++ 里还是有点新内容的。</p><h2>最常用的分配和释放函数</h2><p>在<a href=\"https://time.geekbang.org/column/article/169225\">第 1 讲</a>，我提到过，当我们使用 <code>new</code> 和 <code>delete</code> 来创建和销毁对象时，实际发生的事情还是比较多的（如果忘了的话，可以去复习一下）。其中，分配内存和释放内存的操作是通过 <code>operator new</code> 和 <code>operator delete</code> 函数完成的。在最简单的 <code>new</code> 和 <code>delete</code> 形式里，我们使用的是以下两个函数：</p><pre><code class=\"language-cpp\">void* operator new(size_t size);\nvoid operator delete(void* ptr) noexcept;\n</code></pre><p><code>operator new</code> 和 <code>operator delete</code> 函数通常就被称为分配函数（allocation function）和释放函数（deallocation function）。</p><p>需要注意 <code>operator new</code> 是可能抛出异常的，而 <code>operator delete</code> 则不会抛出异常，被标为 noexcept。这和我们通常不允许在析构函数中抛出异常是完全一致的。</p><!-- [[[read_end]]] --><p>但这远不是这两个函数的所有形式。最典型情况，我们对于数组形式的分配（如 <code>pArray = new Obj[42]</code>）和释放（如 <code>delete[] pArray</code>），有专门的分配和释放函数：</p><pre><code class=\"language-cpp\">void* operator new[](size_t size);\nvoid operator delete[](void* ptr) noexcept;\n</code></pre><p>这些函数的默认实现都很简单，大致相当于：</p><pre><code class=\"language-cpp\">void* operator new(size_t size)\n{\n  void* ptr = malloc(size);\n  if (ptr == nullptr) {\n    throw bad_alloc();\n  }\n  return ptr;\n}\n\nvoid operator delete(void* ptr) noexcept\n{\n  free(ptr);\n}\n\nvoid* operator new[](size_t size)\n{\n  return operator new(size);\n}\n\nvoid operator delete[](void* ptr) noexcept\n{\n  operator delete(ptr);\n}\n</code></pre><p>即，这些函数最后会转到 C 标准库里的 <code>malloc</code> 和 <code>free</code> 上，但是，分配函数在内存分配失败时的默认行为是抛异常，而非返回空指针。</p><p>你可能会想，为什么要这么中转一次呢，直接调用 <code>malloc</code> 和 <code>free</code> 不行吗？原因也很简单，这样一个中间层就是一个定制点，我们可以通过提供自己的 <code>operator new</code> 和 <code>operator delete</code> 函数来修改内存的分配和释放行为，而非直接调用 <code>malloc</code> 和 <code>free</code>。当用户不提供 <code>operator new</code> 和 <code>operator delete</code> 函数时，<code>new</code> 和 <code>delete</code> 就会调用标准库提供的版本；否则，用户提供的 <code>operator new</code> 和 <code>operator delete</code> 函数就会被使用。</p><p>具体的实现机制根据平台不同而不同。比如，在 Linux 上标准库的分配和释放函数由 libstdc++.so 共享库提供，只要链接过程中在 <code>-lstdc++</code> 之前的目标文件或库文件里有分配和释放函数出现，它们就会比标准库的分配和释放函数有更高的优先权，会被所有用到分配和释放函数的地方调用，包括 libstdc++ 自身。</p><p>不过，需要留意的是，用户提供的分配和释放函数仍需跟标准的分配和释放函数有同样的接口，包括形式和语义。特别是：</p><ul>\n<li>分配函数不应返回空指针，而应使用 <code>std::bad_alloc</code> 异常表示内存分配失败</li>\n<li>释放函数不允许抛出异常</li>\n</ul><p>举一个具体的例子，<code>make_shared</code> 函数会调用 <code>operator new</code>，并期待内存分配失败时会抛出异常。如果你自己提供的 <code>operator new</code> 替换版本抛出了异常，那 <code>make_shared</code> 也会有正常的失败行为；而如果你提供的 <code>operator new</code> 替换版本返回了空指针，那程序一般就会因为访问空指针而崩溃了——虽然我不能担保所有标准库的行为都是这样，但这样的行为至少是完全符合 C++ 标准的。</p><h2>布置分配和释放函数</h2><p>为了应对一些更加灵活的内存分配和释放场景，特别是考虑到有些环境完全不允许使用异常，C++ 里有所谓的布置（placement）<code>new</code> 和对应的分配和释放函数。我们可以在 <code>new</code> 时传递额外的特殊参数，编译器则会把这些额外参数传给 <code>operator new</code>，并利用重载机制找到正确的分配函数 <span class=\"orange\">[2]</span>。</p><p>它的最常见形式在标准库的头文件 <new> 中已经定义了：</new></p><pre><code class=\"language-cpp\">struct nothrow_t {\n  explicit nothrow_t() = default;\n};\n\nextern const nothrow_t nothrow;\n\nvoid* operator new(\n  size_t size,\n  const nothrow_t&amp;) noexcept;\nvoid* operator new[](\n  size_t size,\n  const nothrow_t&amp;) noexcept;\n</code></pre><p>这样，当我们使用 <code>new(std::nothrow) Obj</code> 这样的形式时，编译器会产生对 <code>operator new(size_t, const nothrow_t&amp;)</code> 的调用，而这个函数就不会抛出异常了——它会跟 <code>malloc</code> 一样，在内存分配失败时返回空指针。</p><p>讲到这里，你可能会疑惑了：我说到了布置分配函数和释放函数，但似乎我们并不需要布置释放函数啊——确实 C++ 里也没有 <code>delete(nothrow) ptr</code> 这样的语法。单单对于无异常编程的场景，布置释放函数确实意义不大。但作为一种通用机制，C++ 的设计者需要考虑其他的应用场景；特别是，当布置分配函数成功而构造函数失败的情况。回想我们讲过的 <code>new Circle(…)</code> 的过程：</p><pre><code class=\"language-cpp\">{\n  void* temp = operator new(sizeof(circle));\n  try {\n    circle* ptr =\n      static_cast&lt;circle*&gt;(temp);\n    ptr-&gt;circle(…);\n    return ptr;\n  }\n  catch (...) {\n    operator delete(ptr);\n    throw;\n  }\n}\n</code></pre><p>对于普通的 <code>new Obj</code>，在构造函数发生异常时编译器会自动调用 <code>operator delete(void*)</code>。那对于 <code>new(placementTag) Obj</code> 呢？</p><p>我想你应该已经猜到了，编译器会产生一个对 <code>operator delete(ptr, placementTag)</code> 的调用。如果对应的 <code>operator delete</code> 重载不存在，那编译器则不会产生对 <code>operator delete</code> 的调用。此时，如果相应的 <code>operator new</code> 确实分配了内存的话，我们就有了内存泄漏。所以，通常我们提供布置分配函数时，都需要提供对应的布置释放函数，来应对这种情况。</p><p>事实上，标准库对布置分配函数都提供了对应的布置释放函数，即使在布置释放函数什么事都不需要做的时候。而编译器通常也会对用户只提供布置分配函数而没有提供布置释放函数的情况进行告警。</p><h3>不分配内存的布置分配和释放函数</h3><p>除了 <code>nothrow</code> 之外，另外一种常见的布置分配和释放函数的定义如下（简洁起见，我略去了数组版本）：</p><pre><code class=\"language-cpp\">inline void*\noperator new(size_t,\n             void* ptr) noexcept\n{ return ptr; }\n\ninline void\noperator delete(void*,\n                void*) noexcept\n{}\n</code></pre><p>根据这种形式，我们可以写出下面这样的代码，把对象构造在一个已经存在的缓冲区上：</p><pre><code class=\"language-cpp\">shape* create_shape(void* buffer,\n                    size_t size,\n                    shape_type type)\n{\n  …\n  switch (type) {\n  case shape_type::circle:\n    assert(size &gt;= sizeof(circle));\n    return new(buffer) circle();\n  case shape_type::triangle:\n    assert(size &gt;= sizeof(triangle));\n    return new(buffer) triangle();\n  case shape_type::rectangle:\n    assert(size &gt;= sizeof(rectangle));\n    return new(buffer) rectangle();\n  …\n  }\n}\n\nshape_type type = …;\nchar buffer[200];\nauto ptr = create_shape(\n  buffer, sizeof buffer, type);\n// 使用 ptr\nptr-&gt;~shape();\n</code></pre><p>在这个 <code>create_shape</code> 的实现里，我们不在堆上创建对象，而是在一个现有的缓冲区上创建对象。这时候 <code>operator new(size_t, void*)</code> 这个重载就能用得上了，虽然它只是简单地返回缓冲区的地址。显然，释放函数确实不需要做任何事情；但是，我们仍需用 <code>ptr-&gt;~shape()</code> 这样的形式显式地在缓冲区失效前对对象进行析构。</p><p>另外注意，跟大部分其他分配函数和释放函数不同，这些函数是不能被用户提供的版本替换的。</p><h2>内存对齐的分配和释放函数</h2><p>在 C++11 之前，C++ 要产生特殊的对象对齐，只能使用编译器厂商提供的特殊说明符。比如，要把一个结构体按 32 字节对齐，在 GCC 下我们需要这样写：</p><pre><code class=\"language-cpp\">struct S {\n  float v[8];\n} __attribute__((aligned(32)));\n</code></pre><p>到了 MSVC，我们就得写成：</p><pre><code class=\"language-cpp\">__declspec(align(32)) struct S {\n  float v[8];\n};\n</code></pre><p>这当然不那么令人满意。所幸，这个问题到了 C++11 就有了很大的缓解，我们可以使用 <code>alignas</code> 关键字来跨平台地处理这个问题了：</p><pre><code class=\"language-cpp\">struct alignas(32) S {\n  float v[8];\n};\n</code></pre><p>但在 C++17 之前，这样的结构体碰到 <code>new</code> 和 <code>delete</code> 依然会有问题，因为 <code>new</code> 和 <code>delete</code> 没有任何机制来处理内存对齐问题。如果你用了 <code>new S</code> 这样的表达式，结果的对齐仍然不会考虑结构体的对齐要求，而只是实现里的默认对齐值，通常是 8 或 16——你没有一种通用的办法来进行控制。</p><p>C++17 对此的解决方式是引入了一堆新的使用 <code>std::align_val_t</code> 的分配和释放函数。<code>align_val_t</code> 是一个枚举类，目的是给对齐值一个强类型。标准库提供的相关分配和释放函数有以下这些（<span class=\"orange\">[3] 和 [4]</span>）：</p><pre><code class=\"language-cpp\">void* operator new(\n  size_t size, align_val_t al);\nvoid* operator new[](\n  size_t size, align_val_t al);\nvoid* operator new(\n  size_t size, align_val_t al,\n  const nothrow_t&amp;) noexcept;\nvoid* operator new[](\n  size_t size, align_val_t al,\n  const nothrow_t&amp;) noexcept;\nvoid operator delete(\n  void* ptr,\n  align_val_t al) noexcept;\nvoid operator delete[](\n  void* ptr,\n  align_val_t al) noexcept;\nvoid operator delete(\n  void* ptr, align_val_t al,\n  const nothrow_t&amp;) noexcept;\nvoid operator delete[](\n  void* ptr, align_val_t al,\n  const nothrow_t&amp;) noexcept;\n</code></pre><p>如果我们写出 <code>new S</code> 这样的表达式，在 C++17 里就会自动产生一个 <code>operator new(sizeof(S), std::align_val_t{32})</code> 这样的调用。系统的默认实现，或者用户提供的替换实现，都必须提供相应的对齐保证，对于 <code>new S</code> 可以保证返回的指针的二进制表示的最低 5 位为 0。</p><p>参考资料 <span class=\"orange\">[6]</span> 里展示了一个可以直接被分配函数和释放函数调用的函数实现（C++17 提供的 <code>aligned_alloc</code> 目前在 MSVC 下没有实现，因为 Windows 下无法提供内存对齐的高效 <code>free</code> 实现 <span class=\"orange\">[5]</span>）。</p><h2>替换分配和释放函数</h2><p>我前面已经提过，用户可以替换标准库提供的大部分分配和释放函数。作为一种可以适用多种场景、可灵活扩展的语言，我们可能出于以下的理由来替换分配和释放函数：</p><ul>\n<li>用来适配特定平台或环境的内存管理器</li>\n<li>用来对内存进行跟踪和排错</li>\n<li>用来实现内存池</li>\n<li>……</li>\n</ul><p>第一种情况要根据特定的环境来考虑，这里没法展开。其他两种情况，我们后续会进行讨论。参考资料 <span class=\"orange\">[7]</span> 里提供了一个我从 2004 年开始写的内存泄漏检测器，只要把这个文件链接到你的项目中，程序即可在退出时检查是否发生了 <code>new</code>/<code>delete</code> 不匹配导致的内存泄漏。它的原理在 <span class=\"orange\">[1]</span> 中进行了讨论。我们后面也会讨论一个更新的内存泄漏检测器的实现。</p><p>在替换分配和释放函数时，有一个小细节需要注意一下。对于最普通的 <code>operator new(size_t)</code>，我们一般应考虑同时提供 <code>operator delete(void*)</code> 和 <code>operator delete(void*, size_t)</code>。如果不提供的话，至少 GCC 会对此进行报警（当使用了 <code>-Wextra</code> 告警选项时）。</p><p>C++ 标准里规定，如果同时提供了这两个释放函数的话，编译器会优先选择带 <code>size_t</code> 参数的重载——从理论上讲，利用 <code>size_t</code> 大小参数可以获得更高的性能。Andrei Alexandrescu 更是争辩只用指针的释放函数是一个设计错误。不过，业界的惯性是巨大的。由于 Unix 和 C 的内存管理基本上是基于 <code>malloc</code>/<code>free</code> 的模式，目前对 <code>operator delete(void*, size_t)</code> 的实现（包括标准库里的实现）也基本上只是转发到 <code>operator delete(void*)</code> 而已。</p><h3>类特定的分配和释放函数</h3><p>分配和释放函数并不一定只能进行全局的替换。我们完全可以只对某一个类（如 <code>Obj</code>）替换它的分配和释放函数，这样，只有 <code>new Obj</code> 和 <code>delete pObj</code> 这样的表达式才会使用对应的分配和释放函数。代码如下所示：</p><pre><code class=\"language-cpp\">class Obj {\npublic:\n  …\n  static void* operator new(size_t);\n  static void operator delete(\n    void* ptr) noexcept;\n};\n</code></pre><p>你可能想，是不是可以用类特定的分配和释放函数来实现一个内存池呢？毕竟，一个类的分配大小是固定的，应该会提供很多便利性。回答是：也对，也不对。</p><p>对的原因是，以上推理本身没有问题。事实上，我在十几年前就尝试过这样的实现 <span class=\"orange\">[8]</span>。</p><p>不对的原因是，目前大部分代码里已经不再直接使用 <code>new</code> 和 <code>delete</code> 来创建和销毁对象了。<code>make_shared</code> 函数会一次性分配对象和引用计数的空间，减少内存分配和释放的次数，因而类特定的 <code>operator new</code> 和 <code>operator delete</code> 不会被使用。<code>list</code> 和 <code>map</code> 这样的容器会把对象所需的空间和结点相关的其他信息一起分配，因而类特定的 <code>operator new</code> 和 <code>operator delete</code> 也不会被使用。而 <code>vector</code> 这样的容器会一次性分配多个对象所需的空间，同样不会使用类特定的 <code>operator new</code> 和 <code>operator delete</code>。</p><p>因此，总体来说，类特定的分配和释放函数在现代 C++ 里已经成了一个比较鸡肋的功能。我们也就不多展开讨论了。</p><p>当然，我们需要定制内存分配和释放行为的需求仍然在。对于容器，我们是有办法的，因为容器的分配器参数（<code>Allocator</code>）就是用来解决这个问题的。这个我们放在下一讲进行讨论。</p><h2>内容小结</h2><p>今天我们讨论了 <code>new</code> 和 <code>delete</code> 背后的一个细节，分配函数和释放函数。标准库里实现了这些函数，同时也允许用户对其进行替换，来定制程序的行为。</p><h2>课后思考</h2><p>考虑一下，用户通过 <code>new Obj</code> 得到的指针和 <code>operator new</code> 返回的指针相同吗？通过 <code>new Obj[n]</code> 得到的指针和 <code>operator new[]</code> 返回的指针呢？</p><p>欢迎留言和我分享你的观点。</p><h2><span class=\"reference\">参考资料</span></h2><p><span class=\"reference\">[1] 吴咏炜, “A cross-platform memory leak detector”. <a href=\"http://wyw.dcweb.cn/leakage.htm\">http://wyw.dcweb.cn/leakage.htm</a></span></p><p><span class=\"reference\">[2] cppreference.com, “new expression”. <a href=\"https://en.cppreference.com/w/cpp/language/new\">https://en.cppreference.com/w/cpp/language/new</a></span></p><p><span class=\"reference\">[2a] cppreference.com, “new 表达式”. <a href=\"https://zh.cppreference.com/w/cpp/language/new\">https://zh.cppreference.com/w/cpp/language/new</a></span></p><p><span class=\"reference\">[3] cppreference.com, “operator new, operator new[]”. <a href=\"https://en.cppreference.com/w/cpp/memory/new/operator_new\">https://en.cppreference.com/w/cpp/memory/new/operator_new</a></span></p><p><span class=\"reference\">[3a] cppreference.com, “operator new, operator new[]”. <a href=\"https://zh.cppreference.com/w/cpp/memory/new/operator_new\">https://zh.cppreference.com/w/cpp/memory/new/operator_new</a></span></p><p><span class=\"reference\">[4] cppreference.com, “operator delete, operator delete[]”. <a href=\"https://en.cppreference.com/w/cpp/memory/new/operator_delete\">https://en.cppreference.com/w/cpp/memory/new/operator_delete</a></span></p><p><span class=\"reference\">[4a] cppreference.com, “operator delete, operator delete[]”. <a href=\"https://zh.cppreference.com/w/cpp/memory/new/operator_delete\">https://zh.cppreference.com/w/cpp/memory/new/operator_delete</a></span></p><p><span class=\"reference\">[5] Microsoft, “&lt;cstdlib&gt;”. <a href=\"https://docs.microsoft.com/en-us/cpp/standard-library/cstdlib\">https://docs.microsoft.com/en-us/cpp/standard-library/cstdlib</a></span></p><p><span class=\"reference\">[6] 吴咏炜, “aligned_memory.cpp”. <a href=\"https://github.com/adah1972/nvwa/blob/master/nvwa/aligned_memory.cpp\">https://github.com/adah1972/nvwa/blob/master/nvwa/aligned_memory.cpp</a></span></p><p><span class=\"reference\">[7] 吴咏炜, “debug_new.cpp”. <a href=\"https://github.com/adah1972/nvwa/blob/master/nvwa/debug_new.cpp\">https://github.com/adah1972/nvwa/blob/master/nvwa/debug_new.cpp</a></span></p><p><span class=\"reference\">[8] 吴咏炜, “Design and implementation of a static memory pool”. <a href=\"http://wyw.dcweb.cn/static_mem_pool.htm\">http://wyw.dcweb.cn/static_mem_pool.htm</a></span></p>","comments":[{"had_liked":false,"id":335833,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1645709418,"is_pvip":false,"replies":[{"id":122761,"content":"言简意赅👍。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645767804,"ip_address":"","comment_id":335833,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"前一个相同，后一个不同（除开POD）。数组会在头部存放对象的大小，这样才能依次找到数组中的每个对象地址，调用析构函数","like_count":11},{"had_liked":false,"id":335731,"user_name":"tang_ming_wu","can_delete":false,"product_type":"c1","uid":2566054,"ip_address":"","ucode":"98E5847CEF8B84","user_header":"https://static001.geekbang.org/account/avatar/00/27/27/a6/32e9479b.jpg","comment_is_top":false,"comment_ctime":1645667497,"is_pvip":false,"replies":[{"id":122699,"content":"是。\n\n但这不是我问的问题。我问的是这两个指针的值是不是相同。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645704782,"ip_address":"","comment_id":335731,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"new Obj返回的是调用构造函数初始化完成的对象指针；\noperator new 返回的只是一块足够容纳这个对象大小的空白的内存空间。\n不知道我的理解准不准确。","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553206,"discussion_content":"言简意赅👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645767804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":2975212,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/65/ec/9d218806.jpg","nickname":"今天力扣了嘛💻","note":"","ucode":"C88B5F8E3DA4F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":563224,"discussion_content":"对于内置类型，用delete而不是delete[]释放new出来的数组不会产生内存泄露是嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649951278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553206,"ip_address":"","group_id":0},"score":563224,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2975212,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/65/ec/9d218806.jpg","nickname":"今天力扣了嘛💻","note":"","ucode":"C88B5F8E3DA4F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564550,"discussion_content":"不会内存泄漏。但这仍然是未定义行为。\n\n我写的内存泄漏检测器（[1]、[7]）会在这种情况下报错崩溃。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650276921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563224,"ip_address":"","group_id":0},"score":564550,"extra":""},{"author":{"id":1439748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/04/03aaf2dd.jpg","nickname":"李聪磊","note":"","ucode":"5FB1E5BEE08270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":602535,"discussion_content":"既然不会发生内存泄露，那为什么会是未定义行为呢，不是很理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675820986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":564550,"ip_address":"北京","group_id":0},"score":602535,"extra":""}]}]},{"had_liked":false,"id":359955,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1362659,"ip_address":"上海","ucode":"76F2CAFA309437","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/e3/447aff89.jpg","comment_is_top":false,"comment_ctime":1666088780,"is_pvip":false,"replies":[{"id":130942,"content":"反复多看几遍，加看文末的参考资料和里面的代码。这一讲讲解原理，本身没有独立的示例代码。[7] 里有全局替换内存函数的例子。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1666156483,"ip_address":"上海","comment_id":359955,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"看不懂 怎么整？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553067,"discussion_content":"是。\n\n但这不是我问的问题。我问的是这两个指针的值是不是相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645704782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343111,"user_name":"禾桃","can_delete":false,"product_type":"c1","uid":1477855,"ip_address":"","ucode":"9FE85C34A9E9E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/df/77acb793.jpg","comment_is_top":false,"comment_ctime":1650632059,"is_pvip":false,"replies":[{"id":125508,"content":"部分就是我问的问题了🤭。new 是会去调用 operator new(size_t) 来分配内存的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1651069360,"ip_address":"","comment_id":343111,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"麻烦问下，\n\nnew Obj 对应的表达式是 auto ptr = new Obj;\noperator new对应的表达式是？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568132,"discussion_content":"部分就是我问的问题了🤭。new 是会去调用 operator new(size_t) 来分配内存的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651069360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340040,"user_name":"高伸","can_delete":false,"product_type":"c1","uid":2421921,"ip_address":"","ucode":"63F615237C2E17","user_header":"https://static001.geekbang.org/account/avatar/00/24/f4/a1/51e99a88.jpg","comment_is_top":false,"comment_ctime":1648550873,"is_pvip":false,"replies":[{"id":124390,"content":"看下一讲“容器里的内存管理：分配器”吧。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1648638895,"ip_address":"","comment_id":340040,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"吴老师有个问题想请教下，在查阅gcc4.9中stl源码时，发现allocator申请内存时直接调用::operator new，为什么没有如以前一样采用二级缓存pool_allocator的方式呢","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559181,"discussion_content":"看下一讲“容器里的内存管理：分配器”吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648638895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335772,"user_name":"怪兽","can_delete":false,"product_type":"c1","uid":1324007,"ip_address":"","ucode":"3342C55CB83B08","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","comment_is_top":false,"comment_ctime":1645684806,"is_pvip":false,"replies":[{"id":122763,"content":"嗯嗯，应该写“这些函数”。😂","user_name":"作者回复","user_name_real":"作者","uid":1645639,"ctime":1645767931,"ip_address":"","comment_id":335772,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在&quot;不分配内存的布置分配和释放函数&quot;小节里，老师有提到&quot;另外注意，跟大部分其他分配函数和释放函数不同，这个函数是不能被用户提供的版本替换的&quot;。这里说的&quot;这个函数&quot;是指这两个函数吗？\ninline void* operator new(size_t, void* ptr) noexcept\n{ return ptr; }\n\ninline void operator delete(void*, void*) noexcept\n{}","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553208,"discussion_content":"嗯嗯，应该写“这些函数”。😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645767931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335713,"user_name":"农民园丁","can_delete":false,"product_type":"c1","uid":1155913,"ip_address":"","ucode":"6A91EBBC9DCE6C","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/49/4a488f4c.jpg","comment_is_top":false,"comment_ctime":1645660822,"is_pvip":false,"replies":[{"id":122698,"content":"😝","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645704701,"ip_address":"","comment_id":335713,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"居然还有31，太值了！","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553066,"discussion_content":"😝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645704701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335833,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1645709418,"is_pvip":false,"replies":[{"id":122761,"content":"言简意赅👍。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645767804,"ip_address":"","comment_id":335833,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"前一个相同，后一个不同（除开POD）。数组会在头部存放对象的大小，这样才能依次找到数组中的每个对象地址，调用析构函数","like_count":11,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553206,"discussion_content":"言简意赅👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645767804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":2975212,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/65/ec/9d218806.jpg","nickname":"今天力扣了嘛💻","note":"","ucode":"C88B5F8E3DA4F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":563224,"discussion_content":"对于内置类型，用delete而不是delete[]释放new出来的数组不会产生内存泄露是嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649951278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553206,"ip_address":"","group_id":0},"score":563224,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2975212,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/65/ec/9d218806.jpg","nickname":"今天力扣了嘛💻","note":"","ucode":"C88B5F8E3DA4F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564550,"discussion_content":"不会内存泄漏。但这仍然是未定义行为。\n\n我写的内存泄漏检测器（[1]、[7]）会在这种情况下报错崩溃。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650276921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563224,"ip_address":"","group_id":0},"score":564550,"extra":""},{"author":{"id":1439748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/04/03aaf2dd.jpg","nickname":"李聪磊","note":"","ucode":"5FB1E5BEE08270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":602535,"discussion_content":"既然不会发生内存泄露，那为什么会是未定义行为呢，不是很理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675820986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":564550,"ip_address":"北京","group_id":0},"score":602535,"extra":""}]}]},{"had_liked":false,"id":335731,"user_name":"tang_ming_wu","can_delete":false,"product_type":"c1","uid":2566054,"ip_address":"","ucode":"98E5847CEF8B84","user_header":"https://static001.geekbang.org/account/avatar/00/27/27/a6/32e9479b.jpg","comment_is_top":false,"comment_ctime":1645667497,"is_pvip":false,"replies":[{"id":122699,"content":"是。\n\n但这不是我问的问题。我问的是这两个指针的值是不是相同。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645704782,"ip_address":"","comment_id":335731,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"new Obj返回的是调用构造函数初始化完成的对象指针；\noperator new 返回的只是一块足够容纳这个对象大小的空白的内存空间。\n不知道我的理解准不准确。","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553067,"discussion_content":"是。\n\n但这不是我问的问题。我问的是这两个指针的值是不是相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645704782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359955,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1362659,"ip_address":"上海","ucode":"76F2CAFA309437","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/e3/447aff89.jpg","comment_is_top":false,"comment_ctime":1666088780,"is_pvip":false,"replies":[{"id":130942,"content":"反复多看几遍，加看文末的参考资料和里面的代码。这一讲讲解原理，本身没有独立的示例代码。[7] 里有全局替换内存函数的例子。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1666156483,"ip_address":"上海","comment_id":359955,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"看不懂 怎么整？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590897,"discussion_content":"反复多看几遍，加看文末的参考资料和里面的代码。这一讲讲解原理，本身没有独立的示例代码。[7] 里有全局替换内存函数的例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666156483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343111,"user_name":"禾桃","can_delete":false,"product_type":"c1","uid":1477855,"ip_address":"","ucode":"9FE85C34A9E9E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/df/77acb793.jpg","comment_is_top":false,"comment_ctime":1650632059,"is_pvip":false,"replies":[{"id":125508,"content":"部分就是我问的问题了🤭。new 是会去调用 operator new(size_t) 来分配内存的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1651069360,"ip_address":"","comment_id":343111,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"麻烦问下，\n\nnew Obj 对应的表达式是 auto ptr = new Obj;\noperator new对应的表达式是？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590897,"discussion_content":"反复多看几遍，加看文末的参考资料和里面的代码。这一讲讲解原理，本身没有独立的示例代码。[7] 里有全局替换内存函数的例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666156483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340040,"user_name":"高伸","can_delete":false,"product_type":"c1","uid":2421921,"ip_address":"","ucode":"63F615237C2E17","user_header":"https://static001.geekbang.org/account/avatar/00/24/f4/a1/51e99a88.jpg","comment_is_top":false,"comment_ctime":1648550873,"is_pvip":false,"replies":[{"id":124390,"content":"看下一讲“容器里的内存管理：分配器”吧。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1648638895,"ip_address":"","comment_id":340040,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"吴老师有个问题想请教下，在查阅gcc4.9中stl源码时，发现allocator申请内存时直接调用::operator new，为什么没有如以前一样采用二级缓存pool_allocator的方式呢","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568132,"discussion_content":"部分就是我问的问题了🤭。new 是会去调用 operator new(size_t) 来分配内存的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651069360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335772,"user_name":"怪兽","can_delete":false,"product_type":"c1","uid":1324007,"ip_address":"","ucode":"3342C55CB83B08","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","comment_is_top":false,"comment_ctime":1645684806,"is_pvip":false,"replies":[{"id":122763,"content":"嗯嗯，应该写“这些函数”。😂","user_name":"作者回复","user_name_real":"作者","uid":1645639,"ctime":1645767931,"ip_address":"","comment_id":335772,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"在&quot;不分配内存的布置分配和释放函数&quot;小节里，老师有提到&quot;另外注意，跟大部分其他分配函数和释放函数不同，这个函数是不能被用户提供的版本替换的&quot;。这里说的&quot;这个函数&quot;是指这两个函数吗？\ninline void* operator new(size_t, void* ptr) noexcept\n{ return ptr; }\n\ninline void operator delete(void*, void*) noexcept\n{}","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559181,"discussion_content":"看下一讲“容器里的内存管理：分配器”吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648638895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335713,"user_name":"农民园丁","can_delete":false,"product_type":"c1","uid":1155913,"ip_address":"","ucode":"6A91EBBC9DCE6C","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/49/4a488f4c.jpg","comment_is_top":false,"comment_ctime":1645660822,"is_pvip":false,"replies":[{"id":122698,"content":"😝","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1645704701,"ip_address":"","comment_id":335713,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"居然还有31，太值了！","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553208,"discussion_content":"嗯嗯，应该写“这些函数”。😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645767931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}