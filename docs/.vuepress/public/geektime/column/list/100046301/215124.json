{"id":215124,"title":"14 | 高可用架构案例（二）：如何第一时间知道系统哪里有问题？","content":"<p>你好，我是王庆友。</p><p>在前面两讲中，我与你介绍了系统的高可用都有哪些设计原则和具体手段。其中我也特别提到，<strong>要想保证系统的高可用，我们还需要对系统进行全面有效的监控</strong>。</p><p>监控是系统的眼睛，无监控，不运维。今天我们就从监控的角度来聊聊如何保证系统的高可用。</p><p>在开发软件时，我们经常强调一个业务功能的可测性，甚至有一种说法是测试驱动开发。在开发之前，我们会先设计测试用例，再去考虑如何实现功能。同样，当我们对系统作了很多加固，也是希望能保证它的稳定可用。</p><p><strong>但我们怎么判断系统的各个节点当前是否正常呢？</strong>这个就对应了节点的可监控性，如果你事先想好了系统应该如何监控，如何判断每个节点是否正常，那你就会更清楚应该采取什么样的措施。很多时候，我们可以从监控的角度来倒推系统的可用性设计。</p><h2>监控的分类</h2><p>在<a href=\"https://time.geekbang.org/column/article/212066\">第11讲</a>中，我和你介绍了系统的组成，它包括接入层、应用系统、中间件、基础设施这几个部分，那我们的监控也是针对这些部分来实施的。一般来说，监控可以分为5个层次，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/07/cf/079ff9bc96e0bb11d438b965ddd751cf.jpg?wh=2284*1600\" alt=\"\"></p><p>从上到下，分别为用户体验监控、业务监控、应用监控、中间件监控、基础平台监控。</p><ol>\n<li><strong>用户体验监控：</strong>指的是从前端用户的访问速度出发，来监测系统的可用性，包括页面能否打开、关键接口的响应时间等等，用户体验监控一般结合前端的埋点来实现。</li>\n<li><strong>业务监控：</strong>它是从业务结果的角度来看，比如说订单数、交易金额等等，业务监控也是最直观的，我们知道，如果业务数据没问题，系统整体也就没有问题。对于业务监控，我们一般是从数据库里定时拉取业务数据，然后以曲线的方式展示业务指标随着时间的变化过程。除了当前的曲线，一般还有同比和环比曲线。同比是和前一天的数据进行比较，环比是和一周前的数据进行比较，两方面结合起来，我们就能知道当前的业务指标有没有问题。</li>\n<li><strong>应用监控：</strong>指的是对自己开发的代码进行监控，比如接口在一段时间内的调用次数、响应时间、出错次数等等。更深入一点的应用监控还包含了调用链监控，我们知道，一个外部请求的处理过程包含了很多环节，比如说网关、应用、服务、缓存和数据库，我们可以通过调用链监控把这些环节串起来，当系统有问题时，我们可以一步步地排查。有很多APM工具可以实现调用链监控，如CAT、SkyWalking等等。</li>\n<li><strong>中间件监控：</strong>指的是对标准中间件进行监控，它是第三方开发的代码，比如数据库、缓存、Tomcat等等，这些组件对应的是系统的PaaS层。这些中间件往往带有配套的监控系统，比如，RabbitMQ就有自带的监控后台。</li>\n<li><strong>基础平台监控：</strong>指的是对系统底层资源进行监控，如操作系统、硬件设备等等，这个层次的监控对应的是系统的IaaS层。Zabbix就是典型的基础设施监控工具，它可以监控CPU、内存和磁盘的使用情况。</li>\n</ol><!-- [[[read_end]]] --><h2>监控的痛点</h2><p>我们知道，一个大型的互联网平台，背后对应的是大规模的分布式系统，有大量的软硬件节点一起协作，这里的任何节点都有可能出问题，所以我们需要通过监控，及时发现和解决问题，提升系统的可用性。</p><p>但想要实现高效的监控，这不是一件容易的事情。下面，我给你举一个线上事故处理的例子，你就能理解监控面临的挑战。</p><p>首先，Monitor发现订单曲线突然跌停，当前的订单数量变为0，于是，Monitor快速拉起电话会议，或者在微信群里@所有人进行排查。这时候，一大堆相关的或不相关的人，都开始排查自己负责的那部分系统，比如说，运维在Zabbix里检查网络和机器，开发在ELK系统（Elasticsearch+Logstash+Kibana）里检查错误日志，DBA检查数据库。</p><p>过了一会儿，负责App服务端的开发人员，在ELK里发现有大量的调用下单服务超时，于是他去询问下单服务的开发人员这是怎么回事。下单服务的开发人员就去检索错误日志，结果发现调用会员服务有大量的超时情况，然后他就去问会员服务的开发人员这是怎么回事。会员服务的开发人员通过错误日志，发现会员数据库连接不上，于是他把问题反映给DBA。DBA先拉上负责网络的同事一起看，发现网络没啥问题，然后他再去检查会员数据库本身，这时，他发现有慢查询把DB给挂住了。</p><p>这样，通过一系列的接力式排查，问题终于找到了，最后DBA把慢查询杀掉，所有人都去检查自己的系统，发现没有新的错误情况，系统恢复了正常。而这个时候，距离问题的发生已经过去了很长时间，在这个期间，技术被老板催，老板被商户催，而商户也已经被用户投诉了N次。</p><p>以上的事故处理过程还算比较顺利的，毕竟我们通过顺藤摸瓜，最后找到并解决了问题。<strong>更多的时候，我们面对事故，就像是热锅上的蚂蚁，众说纷纭，谁也不能肯定问题出在哪里。结果呢，我们病急乱投医，胡乱干预系统，不但没能解决问题，而且往往引发了二次事故。</strong></p><p>你可以发现，在这个例子中，虽然我们有应用日志监控，有Zabbix系统监控，有网络和数据库监控，但对于一个大规模的分布式系统来说，这种分散的监控方式在实践中有一系列的弊端。</p><ul>\n<li>首先，不同的节点，它的监控的方式是不一样的，相应地，监控的结果也在不同的系统里输出。</li>\n<li>同时，系统不同部分的监控都是由不同的人负责的，比如说，运维负责的是基础平台监控，开发负责的是应用系统监控。而监控信息往往专门的人才能解读，比如应用监控，它需要对应的开发人员才能判断当前的接口访问是否有问题。</li>\n<li>最后，系统作为一个整体，需要上下游各个环节的人一起协作，进行大量的沟通，才能最终找到问题。</li>\n</ul><p>你可以看到，这种监控方式是碎片化的，对于处理线上紧急事故，它无疑是低效的，这里有很多问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/d0/872d239bc37b3b28dca238fc3f6665d0.jpg?wh=2284*1075\" alt=\"\"></p><ol>\n<li><strong>发现问题慢：</strong>业务监控的曲线一般1分钟更新一次，有时候因为正常的业务抖动，Monitor还需要把这种情况排除掉。因此，他会倾向于多观察几分钟，这样就导致问题的确认有很大的滞后性。</li>\n<li><strong>定位问题慢：</strong>系统节点多，大量的人需要介入排查，而且由于节点依赖复杂，需要反复沟通才能把信息串起来，因此很多时候，这种排查方式是串行或者说无序的。一方面，无关的人会卷入进来，造成人员的浪费；另一方面排查效率低，定位问题的时间长。</li>\n<li><strong>解决问题慢：</strong>当定位到问题，对系统进行调整后，验证问题是否已经得到解决，也不是一件很直观的事情，需要各个研发到相应的监控系统里去进行观察，通过滞后的业务曲线观察业务是否恢复。</li>\n</ol><p><strong>那么，我们怎么解决监控面临的这些困境，以高效的方式解决线上事故，保障系统的高可用呢？</strong></p><h2>解决思路</h2><p>你可以看到，前面这种监控方式，它是碎片化和人工化的，它由不同的工具负责监控系统的不同部分，并且需要大量专业的人介入，并通过反复的沟通，才能把相关的信息拼接起来，最后定位到问题。</p><p><strong>那我们能不能把系统所有的监控信息自动关联起来，并且以一种直观的方式展示，让所有人一看就明白是哪里出了问题，以及出问题的原因是什么呢？</strong></p><p>从这个思路出发，对系统的监控，我们需要做到两点：</p><ol>\n<li>系统能够自动地判断每个节点是否正常，并直观地给出结果，不需要经过专业人员的分析。</li>\n<li>系统能够自动把各个节点的监控信息有机地串起来，从整体的角度对系统进行监控，不需要很多人反复地进行沟通。</li>\n</ol><p>这里，我们可以借鉴一下道路交通监控的例子。</p><p>我们经常可以在市内的高架上看到交通拥堵示意图。在下面的这张交通信息图上，你可以看到，每条道路都通过上下左右不同的方位，有机地关联在一起，形成一个整体的交通网络；同时，在交通图上，通过红黄绿三种状态，实时地反映了每条道路的拥堵情况。这样，司机就可以非常直观地了解道路是否畅通，从而提前避开拥堵路段。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/13/fba62d78cffa6e8ba1d1951e133edc13.jpg?wh=880*640\" alt=\"\"></p><p>这里有几个关键词：实时、直观、整体。下面，我们就来对照下软件系统的监控，来看看要想实现类似的监控效果，我们应该怎么做。</p><p>首先要<strong><span class=\"orange\">实时</span></strong>，我们需要第一时间知道系统当前是否有问题。</p><p>然后要<strong><span class=\"orange\">直观</span></strong>，节点是否有问题，我们需要很直观地就能判断出来，就像交通图上的红黄绿颜色标识一样。我们知道，在发生紧急事故时，人脑很可能会处于错乱状态，这个时候，我们一定不能指望专业的头脑或者严密的分析来判断问题，这样不但慢，而且很容易出错。所以，系统哪些部分有问题，问题是否严重，以及出问题的大致原因是什么，这些信息，监控系统都必须能够直观地给出来。</p><p>最后是<strong><span class=\"orange\">整体</span></strong>，我们需要针对系统做整体监控，就像交通图一样，它是针对周边整体的道路情况进行展示，我们也需要把系统的各个节点放在一起，清晰地给出节点依赖关系。系统真正出问题的地方往往只有一个，其他地方都是连带的，如果监控系统能够给出节点的上下游依赖关系，对于定位真正的问题源是非常有用的。</p><p>所以，对照道路交通监控的思路，我们可以采取这样的监控方式：</p><ul>\n<li>首先，系统中的每个节点对应交通图的一条道路；</li>\n<li>然后，节点的健康状况对应道路的拥堵情况，节点同样也有红黄绿三种不同的颜色，来展示该节点是否正常；</li>\n<li>最后，节点之间的调用关系对应道路的方位关系。</li>\n</ul><p>这样我们就能构建一个实时的、直观的、一体化的监控系统，类似交通图一样，可以一眼就看出系统的问题所在。</p><p>好，回到刚才事故处理的例子，如果我们的监控系统按照这种方式来设计，它的监控效果会是什么样的呢？</p><p>首先所有的节点，包括服务端应用、下单服务、会员服务还有其他服务，以及它们各自用到的缓存、消息队列和数据库，这些节点的健康状态我们在一个页面里就可以看到，包括它们的依赖关系。</p><p>如果会员数据库出了问题，我们根据依赖关系倒推，会员数据库-&gt;会员服务-&gt;下单服务-&gt;服务端应用这4个节点都会爆红，而其他节点不受影响，保持绿色。服务端应用和下单服务节点会有错误消息提示接口调用超时，而会员服务和会员数据库节点的错误消息提示的是数据库连接超时。</p><p>这样其他绿色的节点，我们就不用排查了，然后我们观察爆红的节点，通过上下游依赖关系，就知道最终的问题很可能出在会员数据库上，DBA重点检查会员数据库就可以了。当数据库问题解决以后，我们可以看到所有爆红的节点马上变绿，立即就能确认系统恢复了正常。</p><h2>架构方案和效果</h2><p>根据前面的思路，我们设计了监控系统的整体架构，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/d2/a469d19331860e8d4084279c422753d2.jpg?wh=2284*1560\" alt=\"\"></p><p>每个被监控的节点，均有对应的Agent负责采集健康数据，不同的节点类型，数据采集的方式也不一样：Web节点通过HTTP接口调用，Redis通过Jredis，MQ也通过对应的API接口，DB则采用JDBC。</p><p>Agent每隔3s采集节点数据，然后上报数据给Monitor Service；Monitor Service负责确定节点当前的状态并保存到数据库，这样就完成了节点健康状态的检测；最后，前端Dashboard每隔3s，拉取所有节点的状态，以红黄绿三种颜色在同一页面展示，同时还会显示具体的出错信息。</p><p><strong>那我们是根据什么规则来判断节点的健康状态呢？</strong></p><p>这里，我以DB为例简单说明一下。Agent每隔3秒会去尝试连接数据库，并进行简单的表读写操作，如果连接和读写都能够成功，那就说明该DB当前的运行是正常的，相应的，在Dashboard里面，这个DB节点会显示为绿色。</p><p>Redis和MQ类似，我们主要也是检测组件的可用性；Web应用的健康规则会相对复杂一些，我们会结合Web应用接口的功能和性能来做综合判断。这个监控系统的设计，我还会在下一讲里具体介绍，你到时候可以深入理解其中的细节。</p><p>我们最后来看下监控的效果。</p><p>下图是某个业务系统的实际监控效果图，左边是系统的部署架构，最上面是两个Web应用，这两个应用分别有自己的Web服务器、MQ和Redis节点。</p><blockquote>\n<p>提示：这里，我对细节做了模糊化处理，不过没关系，我主要的目的是让你能了解监控的效果，尽管图片模糊，但它不会影响你理解内容。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/d6/41/d67b89c71a3888068ffc2559ef659141.jpg?wh=724*415\" alt=\"\"></p><p>以左上角的应用为例，它的Web应用部署在Docker里面，所以这里只显示一个节点（虚拟机部署可以看到每个实例的IP，但Docker容器无法看到，对外表现为一个地址）；对于Redis，我们是购买公有云的服务，所以也是一个实例；但MQ是集群的方式，它有三个实例。</p><p>然后，这两个Web应用同时依赖后端的3个基础服务，这3个服务是并列的关系，每个服务又分别有自己的应用、MQ和Redis。所以，你可以看到，在这个监控页面里，节点的部署情况和依赖关系都是一目了然的。</p><p>在这个例子中，有一个节点显示为黄色，黄色说明它有问题，但并不严重。你可以在右边的异常消息列表里看到具体的原因（在最近3s内，这个Web应用的接口响应时间超过了正常值的5倍），每条异常消息包括了出错的节点、具体出错的接口、该接口的正常响应时间，以及当前的响应时间。这样，你就可以很方便地把左边的出错节点和右边的异常消息对应起来，知道哪些节点有错误，还有出错的原因是什么。</p><p>另外，如果你在左边的图里点击某个节点，会弹出新页面，显示该节点的历史出错信息，并且新页面里有链接可以直接跳到Zabbix、CAT和ELK系统，这样你可以在这些专门的系统里做进一步的排查。</p><p>所以说，这里的监控系统提供的是整体的监控信息，可以帮助你快速定位问题的根源，在很多情况下，我们通过这里给出的错误信息，就可以知道出错的原因。当然，如果碰到特别复杂的情况，你还是可以在这里快速关联到各个专业的监控系统去收集更深入的信息。</p><h2>总结</h2><p>今天，我与你介绍了一下监控的分类，你现在应该对监控有了比较深入的了解，知道一个完整的监控体系都包含了哪些内容。</p><p>此外，我也结合线上事故处理的例子，和你说明了碎片化的监控带来的一些问题，并给出了整体化的解决思路以及具体的落地方案。在实践中，这套监控系统也确实发挥了巨大的价值，让我们可以高效地应对线上事故，提升系统的可用性，希望你能够深入地领悟和掌握。</p><p>在下一讲中，我还会和你介绍这个方案的实现细节，这样，你也可以尝试着去落地类似的监控系统。</p><p><strong>最后，给你留一道思考题：</strong>  你的公司都有哪些监控手段，当处理线上事故时，你遇到的最大的挑战是什么？</p><p>欢迎你在留言区与大家分享你的答案，如果你在学习和实践的过程中，有什么问题或者思考，也欢迎给我留言，我们一起讨论。感谢阅读，我们下期再见。</p>","neighbors":{"left":{"article_title":"13 | 高可用架构案例（一）：如何实现O2O平台日订单500万？","id":214067},"right":{"article_title":"15 | 高可用架构案例（三）：如何打造一体化的监控系统？","id":215856}},"comments":[{"had_liked":false,"id":193814,"user_name":"GEEKBANG_6638780","can_delete":false,"product_type":"c1","uid":1268264,"ip_address":"","ucode":"952194E56FD8C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","comment_is_top":true,"comment_ctime":1584969535,"is_pvip":false,"replies":[{"id":"74012","content":"很好的问题，你看的很细。<br>这里的监控不追求很精确，保证80-90%的问题能监控到就可以，这肯定比不上中间件专门的管理后台。以你说的为例，如果数据库有慢查询，通过连接数据库和读写简单表可能检测不出来，但使用数据的应用或服务节点会提示性能和功能问题，它们会被检测到。<br>下一讲有针对这一点的说明。","user_name":"作者回复","comment_id":193814,"uid":"1268522","ip_address":"","utype":1,"ctime":1585053955,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"9.2233720642095002e+18","product_id":100046301,"comment_content":"你好，老师，问个问题。jdbc监控那块，是不是通过简单的表查询作用不是很大。就拿文中的列子来说，是因为慢查询导致的问题。假如我的数据库连接还没被慢查询占满，这个时候jdbc监控就不会有问题。如果想实现，慢查询监控，是不是要对mysql本身做更细致化的监控了，而不是等连接被打满以后才去解决问题。","like_count":6,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488672,"discussion_content":"很好的问题，你看的很细。\n这里的监控不追求很精确，保证80-90%的问题能监控到就可以，这肯定比不上中间件专门的管理后台。以你说的为例，如果数据库有慢查询，通过连接数据库和读写简单表可能检测不出来，但使用数据的应用或服务节点会提示性能和功能问题，它们会被检测到。\n下一讲有针对这一点的说明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585053955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193490,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1584919513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35944657881","product_id":100046301,"comment_content":"服务器节点的监控由公司运维平台监控，当cpu，内存使用过高都会发报警短信，带上ip信息，收到后可以登录服务器去排查，但业务报警主要通过 Prometheus 埋点实现的，有的时候流量抖动也会触发报警，因为业务流程比较长，业务相对复杂些，加上节点多，日志少，在高度紧张的情况下，排查问题还是挺难的<br><br>我们也正在弄监控报警这一块，想把监控报警弄的智能一些，实现自己简单的分析系统，期待老师下一篇细节篇","like_count":9},{"had_liked":false,"id":197467,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1585380309,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14470282197","product_id":100046301,"comment_content":"https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5e51378ce4b0c037b5f9d1e3 整理总结更新 我所在的项目只有业务监控和基础平台监控，感觉效果一般，往往是前场发现问题，才去监控系统看数据是否异常。遇到线上事故一般都是看日志，然后根据报错看代码，最怕代码还不熟悉，短时间理一遍复杂逻辑还是压力挺大","like_count":3,"discussions":[{"author":{"id":1102005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/b5/d3ef3822.jpg","nickname":"Breaking Bad","note":"","ucode":"F315C79248415F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578033,"discussion_content":"太厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656481643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244140,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1598408234,"is_pvip":false,"replies":[{"id":"90018","content":"3s调用业务系统的http接口一次，接口处理时间1ms左右，对业务系统几乎没影响。","user_name":"作者回复","comment_id":244140,"uid":"1268522","ip_address":"","utype":1,"ctime":1598603746,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"5893375530","product_id":100046301,"comment_content":"“每隔3秒采集数据”，频率还挺高，<br>这个监控系统如何不会影响到正常业务服务的性能呢？","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504498,"discussion_content":"3s调用业务系统的http接口一次，接口处理时间1ms左右，对业务系统几乎没影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598603746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2652181,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/laZ13g1QHoYX3Q72a8t86zIaOAY1eAkicRu9wNcTO14Bc2ocnaMxJGzsuSN4tRbrbuAXKVfYB6w72XvXl8KhvAw/132","nickname":"兔子先生","note":"","ucode":"9303B568DFAF34","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394950,"discussion_content":"agent如果是采集日志文件，是不是就不侵入系统了，也就不会影响正常业务了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632143818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200990,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1585703369,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5880670665","product_id":100046301,"comment_content":"现在应用监控的工具比如skywalking 是可以直接监控中间件或者数据库的，有的还能监控到基础设施","like_count":1},{"had_liked":false,"id":194020,"user_name":"滕建兴","can_delete":false,"product_type":"c1","uid":1221204,"ip_address":"","ucode":"9249B92AC2EB7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/54/429c44ce.jpg","comment_is_top":false,"comment_ctime":1585015438,"is_pvip":false,"replies":[{"id":"73919","content":"前端一套代码就可以，下一讲会具体介绍","user_name":"作者回复","comment_id":194020,"uid":"1268522","ip_address":"","utype":1,"ctime":1585024662,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5879982734","product_id":100046301,"comment_content":"老师问一下，这个是针对某个业务场景的整体化监控，但是一个系统很多场景，那不是要绘制很多这样的监控图","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488732,"discussion_content":"前端一套代码就可以，下一讲会具体介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585024662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360221,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"广东","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1666315759,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666315759","product_id":100046301,"comment_content":"数据库推导到会员问题，我觉得有问题","like_count":0},{"had_liked":false,"id":359247,"user_name":"杜秀清","can_delete":false,"product_type":"c1","uid":2952514,"ip_address":"上海","ucode":"4D33DD69E8D238","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGiahPncXAMXlRibCVapHxib4V90Pxa56QQr6iatHmHn77YibSibWhdBe9YKxrD5ria9ZI4JfFjD1SecAmg/132","comment_is_top":false,"comment_ctime":1665372625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665372625","product_id":100046301,"comment_content":"基于 Zabbix + Prometheus + Grafana 开发的","like_count":0},{"had_liked":false,"id":318108,"user_name":"流云追风","can_delete":false,"product_type":"c1","uid":2611950,"ip_address":"","ucode":"16D738406CB191","user_header":"https://static001.geekbang.org/account/avatar/00/27/da/ee/63090718.jpg","comment_is_top":false,"comment_ctime":1635153452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635153452","product_id":100046301,"comment_content":"我们现在就是碎片化监控,没有整体的图, 调用链没有,排查起问题来跟老师的例子中一模一样","like_count":0},{"had_liked":false,"id":212501,"user_name":"Robin康F","can_delete":false,"product_type":"c1","uid":1962437,"ip_address":"","ucode":"618F8686D1231D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyLCPnVq4gKMN5jPcd9wVVEXtZMibCNAkLrJf4uZKdV40Nelb3uPtCETfuw5hbbC693sUHQpRUMiaA/132","comment_is_top":false,"comment_ctime":1588137709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588137709","product_id":100046301,"comment_content":"公司有监控平台minitor，会实时监控应用服务器线程状况，CPU、内存、磁盘剩余空间，还有redis和rocketmq的监控，是否阻塞，同时也有调用链的展示。之前接过听云，后来不知道为啥不用了。如果发现异常，会发送飞书（类似企业微信）进行工作群报警，研发第一时间介入。最大的坑是公司某些组件有bug，导致的堆积产生的爆发性故障","like_count":0},{"had_liked":false,"id":195688,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1585212132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585212132","product_id":100046301,"comment_content":"确实如您所说，我们的监控就各有个的dashboard，零零散散不在一起，找问题时候很麻烦。而且很多没有一个明确的健康与否定义。现在监控相关的插件中间件非常非常多，引入系统还是相对简单的，我们要做的就是最后集成到一起。<br>这次课非常有实际指导意义。","like_count":0},{"had_liked":false,"id":194635,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1585094434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585094434","product_id":100046301,"comment_content":"期待老师的监控实例内容","like_count":0},{"had_liked":false,"id":193633,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1584937534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584937534","product_id":100046301,"comment_content":"我们的监控难点在于，有很多服务是面向强势对公客户的，经常需要满足它们提出的所有要求，做好服务，不论是谁的问题，都是我们来解决。","like_count":0},{"had_liked":false,"id":193535,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1584924701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584924701","product_id":100046301,"comment_content":"之前公司做的比较简单，无非是针对重点业务做email或者短信告警，系统层面用zabbix但一般是事后观察。","like_count":0}]}