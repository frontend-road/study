{"id":543931,"title":"60｜RESTful Web Services（24）：RootResource的测试要如何改造？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，和UriTemplate整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/yy/6c626153c86cd68fec66b5ce9d9cb1yy.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/0b/36/0be0e96754f217b36d12e1edeb9ba936.jpg?wh=2284x1285\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethod\n<ul>\n<li><s>从Path标注中获取UriTemplate</s>\n<ul>\n<li>如不存在Path标注，则抛出异常</li>\n</ul>\n</li>\n<li><s>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法</s>\n<ul>\n<li><s>当请求与资源方法的Uri模版一致，且Http方法一致时，派分到该方法</s></li>\n<li><s>没有资源方法于请求的Uri和Http方法一致时，返回404</s></li>\n</ul>\n</li>\n<li>在处理请求派分时，可以支持多级子资源\n<ul>\n<li>当没有资源方法可以匹配请求时，选择最优匹配SubResourceLocater，通过它继续进行派分</li>\n<li>如果SubResourceLocator也无法找到满足的请求时，返回404</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>class ResourceMethods {\n    private Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; resourceMethods;\n    public ResourceMethods(Method[] methods) {\n        this.resourceMethods = getResourceMethods(methods);\n    }\n    private static Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; getResourceMethods(Method[] methods) {\n        return Arrays.stream(methods).filter(m -&gt; Arrays.stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(DefaultResourceMethod::new)\n                .collect(Collectors.groupingBy(ResourceRouter.ResourceMethod::getHttpMethod));\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findResourceMethods(String path, String method) {\n        return Optional.ofNullable(resourceMethods.get(method)).flatMap(methods -&gt; methods.stream().map(m -&gt; match(path, m)).filter(Result::isMatched).sorted()\n                .findFirst().map(Result::resourceMethod));\n    }\n    private static Result match(String path, ResourceRouter.ResourceMethod method) {\n        return new Result(method.getUriTemplate().match(path), method);\n    }\n    static record Result(Optional&lt;UriTemplate.MatchResult&gt; matched,\n                         ResourceRouter.ResourceMethod resourceMethod) implements Comparable&lt;Result&gt; {\n        public boolean isMatched() {\n            return matched.map(r -&gt; r.getRemaining() == null).orElse(false);\n        }\n        @Override\n        public int compareTo(Result o) {\n            return matched.flatMap(x -&gt; o.matched.map(x::compareTo)).orElse(0);\n        }\n    }\n}\nclass RootResourceClass implements ResourceRouter.RootResource {\n    private PathTemplate uriTemplate;\n    private Class&lt;?&gt; resourceClass;\n    private ResourceMethods resourceMethods;\n    public RootResourceClass(Class&lt;?&gt; resourceClass) {\n        this.resourceClass = resourceClass;\n        this.uriTemplate = new PathTemplate(resourceClass.getAnnotation(Path.class).value());\n        this.resourceMethods = new ResourceMethods(resourceClass.getMethods());\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, UriInfoBuilder builder) {\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, method);\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n}\nclass SubResource implements ResourceRouter.Resource {\n    private Object subResource;\n    private ResourceMethods resourceMethods;\n    public SubResource(Object subResource) {\n        this.subResource = subResource;\n        this.resourceMethods = new ResourceMethods(subResource.getClass().getMethods());\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, UriInfoBuilder builder) {\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, method);\n    }\n}\nclass DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n    private String httpMethod;\n    private UriTemplate uriTemplate;\n    private Method method;\n    public DefaultResourceMethod(Method method) {\n        this.method = method;\n        this.uriTemplate = new PathTemplate(Optional.ofNullable(method.getAnnotation(Path.class)).map(Path::value).orElse(&quot;&quot;));\n        this.httpMethod = Arrays.stream(method.getAnnotations()).filter(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class))\n                .findFirst().get().annotationType().getAnnotation(HttpMethod.class).value();\n    }\n    @Override\n    public String getHttpMethod() {\n        return httpMethod;\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    @Override\n    public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n        return null;\n    }\n    @Override\n    public String toString() {\n        return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/f157d657e2f448fea695375a58def323/snapshots/2efe88ba21fa4aba936b3790d8368612-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3696e46a-18234d0ba56-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/69a07b3626ce4f448303e4752a3a23e4/d990689a0f50456aac9d93cad114762f-bdb972a7257e82572fec058a0490a325-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>如何重构DefaultResourceRouter中的Result结构？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p><!-- [[[read_end]]] -->","comments":[]}