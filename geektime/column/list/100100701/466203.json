{"id":466203,"title":"03｜计算单元：运算符是如何工作的？","content":"<p>你好，我是于航。</p><p>运算符（operator）、表达式（expression）和语句（statement）是组成 C 程序的三个最基本的语法结构。在 C 语言中，这三种概念之间一般呈“包含”关系，即表达式中通常含有运算符，而语句中也可以包含有表达式。最终，众多的语句便组成了一个完整的 C 程序。</p><p>可见，一个完整的 C 程序是由不同粒度的语法单元自下而上一层层构建出来的。而在这层语法形式之下，运算符、表达式和语句究竟是怎样被编译，并通过机器指令表达的呢？</p><p>作为 C 语言中用于提供计算能力的核心语法结构，运算符在支持应用核心功能的构建过程中，起着不可或缺的作用。那么这一讲，我们就先来看看，C 语言中的运算符究竟是如何被编译器实现的。</p><h2>C 运算符的分类</h2><p>在目前最新的 C17 标准中，C 语言一共有 48 个运算符。按照这些运算符功能的不同，我们可以将它们分为七类（分类方式并不唯一），如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/38/efc411637eefb4cf8b05213d8a4d4238.jpg?wh=1920x945\" alt=\"图片\"></p><p>这七类运算符在功能上均有所不同，因此，使用机器指令进行表达的具体方式和复杂程度也不同。其中，算数、关系、位与赋值运算符由于功能较为基础，可以与某些机器指令一一对应，因此我们会放在一起进行介绍。而逻辑运算符、成员访问运算符及其他运算符，由于实现相对复杂，我会分开讲解。</p><!-- [[[read_end]]] --><h2>算数、关系、位、赋值运算符</h2><p>算数、关系、位、赋值这四类运算符在经过编译器处理后，一般都可以<strong>直接对应到由目标平台上相应机器指令组成的简单计算逻辑</strong>。</p><p>比如，在下面这段示例代码中，我们在 foo 函数的内部使用到了加法运算符 “+”、大于运算符 “&gt;”，以及按位或运算符 “|”。你可以通过右侧的输出内容，查看默认情况下（即不使用任何编译优化）左侧 C 源代码对应的汇编结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/a8/49ce8cab93065b2d8d9d27b8520e7ea8.png?wh=1920x1085\" alt=\"图片\"></p><p>这里为了便于观察，我将代码中关键的三行 C 语句，以及它们对应的汇编代码用相同颜色的框标注了出来。<strong>下面我们来分别看看它们的实现方式。</strong></p><p>先来看左侧代码中用红色框标注的内容，这是一个使用了加法运算符 “+” 的 C 语句。在它对应的汇编代码中，前两行代码分别从栈内存中将变量 x 与 y 的值放入到了寄存器 <em>edx</em> 与 <em>eax</em> 里。紧接着，程序通过 <code>add</code> 机器指令计算这两个寄存器中的数字之和。随后，通过 <code>mov</code> 指令，程序将计算得到的结果值从寄存器 <em>eax</em> 移动到了局部变量 arithmetic 对应的栈内存中。至此，这行 C 代码便执行结束了。</p><p>实际上，这行 C 语句同时包含了对算数运算符 “+” 和赋值运算符 “=” 的使用过程。其中，汇编指令 <code>add</code> 直接对应于 C 代码中加法运算符的操作。而 <code>mov</code> 指令则对应于等号赋值运算符的操作。</p><p>在这门课后面的内容中，你还会多次看到编译器对 <code>mov</code> 指令的使用。这里我们采用的是 Intel 的汇编代码格式，因此，当该指令的源或目的操作数中涉及到某个具体的内存位置时，汇编代码中会出现类似 “DWORD PTR [rbp-8]” 的参数形式。</p><p>对此，你可以这样解读：将寄存器 <em>rbp</em> 中的值减去 8 得到的结果作为一个地址，然后在这个地址上读取/写入大小为 DWORD 的值。在 Intel 体系中，一个 WORD 表示 16 位，一个 DWORD 为 32 位，而一个 QWORD 表示 64 位。</p><p>接下来，我们继续观察另外两条 C 语句对应的汇编代码，你可以得到类似的结论。其中，绿色框标注的关系运算符大于号 “&gt;” 对应汇编指令 <code>cmp</code>。这个指令在被执行时，会首先比较变量 x 与 y 值的大小，并根据比较结果，动态调整 CPU 上 FLAGS 寄存器中的相应位。</p><p>为了帮你深入理解接下来的内容，我们先来熟悉一些相关概念。这里提到的 <strong>FLAGS 寄存器是一组用于反映程序当前运行状态的标志寄存器</strong>。许多机器指令在执行完毕时，都会同时调整 FLAGS 寄存器中对应位的值，以响应程序状态的变化。</p><p>比如，在上面这段代码中，汇编指令 <code>cmp</code> 的下一条汇编指令 <code>setg</code> 便会通过查看 FLAGS 寄存器中的 ZF 位是否为 0，且 SF 与 OF 位的值是否相等，来决定将寄存器 <em>al</em> 中的值置 1，还是置 0。而该寄存器中存放的数字值，便为变量 relational 的最终结果。</p><p>那么，ZF 位、SF 位、OF 位又是什么呢？它们其实都是 FLAGS 寄存器中的常用标志位，用来反映当前指令执行后引起的 CPU 状态变化。我把 FLAGS 寄存器中的常用标志位整理在了下面的表格中，你可以参考。<br>\n<img src=\"https://static001.geekbang.org/resource/image/8f/2e/8f0f1558af722f4e5d078a26266c642e.jpg?wh=2248x903\" alt=\"\"></p><p>理解了 FLAGS 寄存器和标志位的概念后，再来看 <code>cmp</code> 指令的具体执行流程，你应该会更加清楚了。</p><p>举一个简单的例子：假设这里函数 add 在调用时传入的值 x 为 3，y 为 2。那么，当 <code>cmp</code> 指令执行时，它首先会在 CPU 内部对这两个操作数进行隐式的减法运算，运算后得到结果 1。而 ZF、SF、OF 在这里都将被复位，而复位则代表着标志位所表示的状态为假。因此，FLAGS 寄存器的状态满足指令 <code>setg</code> 的置位条件（ZF=0 且 SF=OF），<em>al</em> 寄存器的值将被置 1。</p><p>到这里，我相信基本原理你已经理解了，不过还是建议你自己动手实践下。我给你留下了两个小问题，你可以在评论区和我讨论：</p><ul>\n<li>当改变值 x 与 y 的大小以及正负性时，<code>cmp</code> 指令的执行会对 FLAGS 寄存器有何影响？</li>\n<li>此时， FLAGS 寄存器中标志位的值变化是否符合指令 <code>setg</code> 的置位条件？</li>\n</ul><p>针对这两个问题，你需要注意下我在<a href=\"https://time.geekbang.org/column/article/465228\"> 02讲 </a>中提过的这一点：<strong>负值在寄存器中是以补码的形式存放的，而计算机在进行加减运算时，不需要区分操作数的符号性</strong>。</p><p>最后，再来看下这段代码中蓝色框标注的或运算符 “|”。可以很直观地看到，它所对应的汇编指令是 <code>or</code>。</p><p>针对这几类运算符，值得一提的是，即便是在开启了最高编译优化等级的情况下，编译器实现上述这些运算符的基本逻辑仍然不变，只不过会相对减少通过栈内存访问函数传入参数的过程，而在某些情况下会选用寄存器传值。</p><h2>逻辑运算符</h2><p>说完这四种较为直观的运算符，让我们再来看看逻辑运算符。这里，我们直接以逻辑与运算符 “&&” 为例，来看看编译器是如何实现它的。该类别下的其他运算符，实现方式与其类似，区别仅在于使用的具体指令可能有所不同。</p><p>首先，我们还是来看一段示例代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/72/5c6110c1d93a433d8b9f455e2fa84672.png?wh=1920x1318\" alt=\"图片\"></p><p>在 C 标准中，逻辑与运算符 “&&” 的语义是：如果它左右两侧的操作数都具有非零值，则产生计算结果值 1。而如果任一操作数为 0，则计算结果为 0。</p><p>不仅如此，标准还规定了该运算符在执行模型中的求值规则：如果通过逻辑与运算符左侧第一个操作数的求值结果就能确定表达式的值，就不再需要对第二个操作数进行求值了，这也就是我们常说的“短路与”。那么在汇编中，这个运算符是如何实现的呢？</p><p>逻辑与运算符并没有可与之直接对应的汇编指令。并且，为了满足“短路”要求，编译器在非优化的实现中通常会使用条件跳转指令，比如 <code>je</code>。<code>je</code> 指令会判断当前 FLAGS 寄存器中的标志位 ZF 是否为 1。若为 1，则会将程序执行直接跳转到给定标签所在地址上的指令。</p><p>上图中右侧输出的汇编代码里，程序会按顺序将位于栈内存中的变量 x 和 y 的值与数值 0 进行比较。若其中的某个比较结果相等，程序执行将会直接跳转到标签 “.L2” 的所在位置。在这里，值 0 会被直接放入寄存器 <em>eax</em>。而若变量 x 与 y 的值判断均不成立，则值 1 会被放入该寄存器。紧接着，标签 “.L3” 中的指令将接着执行。</p><p>到这里，寄存器 <em>eax</em> 中的值将会被作为最终结果，赋值给变量 logical。这里我再给你留个小问题：标签 “.L3” 中前两条汇编语句的作用是什么？欢迎在评论区留下你的看法。</p><p>当然，就逻辑与运算符来说，在使用高编译优化等级时，编译器还可能会采用下面这种方式来实现该运算符。这里，我们看到了新的汇编指令： <code>test</code> 、<code>setne</code> 和 <code>movzx</code> 。</p><pre><code class=\"language-c++\">test&nbsp; &nbsp; edi, edi  ; edi &lt;- x.\nsetne&nbsp; &nbsp;al\ntest&nbsp; &nbsp; esi, esi  ; esi &lt;- y.\nsetne&nbsp; &nbsp;sil\nmovzx&nbsp; &nbsp;esi, sil\nand&nbsp; &nbsp; &nbsp;esi, eax\n</code></pre><p><code>test</code> 指令的执行方式与 <code>cmp</code> 类似，只不过它会对传入的两个操作数做隐式的“与”操作，而非减法操作。在操作完成后，根据计算结果，指令会相应地修改 FLAGS 寄存器上的 SF、ZF 以及 PF 标志位。另外的 <code>setne</code> 指令则与 <code>setg</code> 指令类似，该指令将在 ZF 为 0 时把传入的寄存器置位，否则将其复位。最后的指令 <code>movzx</code> 实际上是 <code>mov</code> 指令的一种变体。这个指令将数据从源位置移动到目标位置后，会同时对目标位置上的数据进行零扩展（Zero Extension）。</p><p>了解了这些，我们就可以来尝试理解<strong>编译器在高优化等级下对逻辑与运算符的实现方式</strong>：首先，通过 <code>test</code> 指令，程序可以判断参数 x 与 y 是否为非零值。若为非零值，则相应的寄存器会被指令 <code>setne</code> 置位。在这种情况下，寄存器 <em>al</em> 与 <em>sil</em> 中便存放有用于表示变量 x 与 y 是否为零的布尔数字值 0 或 1。接下来，通过数据移动指令，寄存器 <em>sil</em> 中的值被移动到寄存器 <em>esi</em> 中。最后的 <code>and</code> 指令又会对 x 与 y 的布尔数字值再次进行与操作，得到的最终结果将被存放在目的寄存器，即 <em>esi</em> 中。</p><p>这种实现方式大量减少了对栈内存以及条件跳转指令的使用，使得程序减少了访问内存时产生的延迟，以及由于分支预测失败而导致的 CPU 周期浪费，从而执行性能得到了提升。</p><p>可以看到的是，在使用高编译优化等级的情况下，C 标准中逻辑与操作符的“短路”特性并没有体现出来，程序实际上同时对参数 x 与 y 的值进行了判断<strong>。</strong>而这也正是因为 <strong>C 语言的 “as-if” 性质给予了编译器更多的优化空间</strong>。C 标准中规定，除去几种特殊的情况外，在不影响一个程序的外部可观测行为的情况下，编译器可以不遵循 C 标准中对执行模型的规定，而是采用其特定的实现方式，优化程序的性能。</p><p>在非优化版本的实现中，编译器使用了 <code>je</code> 条件跳转指令。其实，现代流水线 CPU 通常会采用一种名为“<strong>投机执行</strong>”的方式来优化条件跳转指令的执行。所谓投机执行，是指 CPU 会通过分析历史的分支执行情况，来推测条件跳转指令将会执行的分支，并提前处理所预测分支上的指令。而等到 CPU 发现之前所预测的分支是错误的时候，它将不得不丢弃这个分支上指令的所有中间处理结果，并将执行流程转移到正确的分支上。很明显，这样就会浪费较多的时钟周期。</p><p>更多优化 C 程序性能的技巧，我会在“ C 工程实战篇”那个模块中详细讲解。相信在对 C 核心语法的实现细节有了更深入的理解后，你在学习这些知识时也会更容易、理解得更透彻。</p><h2>成员访问运算符</h2><p>接下来，让我们继续来看看成员访问运算符。这里我以取地址运算符 “&amp;”、解引用运算符 “*” 为例，来介绍编译器对它们的实现细节。来看下面这段代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/10/e944e2a1b5f31776be315902d5f6a110.png?wh=1920x1003\" alt=\"图片\"></p><p>如上图中红色框对应的 C 代码和汇编代码所示，对于取地址运算符 “&amp;”，实际上它一般会直接对应到名为 <code>lea</code> 的汇编指令。这个指令的全称为 “Load Effective Address”，顾名思义，它主要用来将操作数作为地址，并将这个地址以值的形式传送到其他位置。比如，上面代码中的 <code>lea</code> 指令将寄存器 <em>rbp</em> 中的值减去 16 后，直接存放到寄存器 <em>rax</em> 中，而此时该寄存器中的值就是局部变量 n 在栈上的地址。</p><p>而解引用运算符 “*”的行为与取地址运算符完全相反。当需要对位于某个地址上的值进行传送时，我们可以直接使用 <code>mov</code> 指令。上图中，在蓝色框的汇编代码里，第一条 <code>mov</code> 指令将变量 n_ptr 的值传送到了寄存器 <em>rax</em> 中。随后，第二条 <code>mov</code> 指令将 <em>rax</em> 寄存器中的值作为地址，并将该地址上的值以 DWORD，即 32 位值（对应  <code>int</code> 类型）的形式传送到 <em>eax</em> 寄存器中。最后，第三条 <code>mov</code> 指令将此时 <em>eax</em> 寄存器中的结果值传送到了变量 m 在栈内存上的存储位置。</p><p>至于该类别下的其他运算符，因为它们的本质都是访问位于某个内存地址上的数据，因此实现方式大同小异。这里我就不展开介绍了，建议你试着自己探索下，毕竟“实践出真知”。如果有问题，可以在评论区提出来，我们一起交流。</p><h2>其他运算符</h2><p>最后，让我们来看看除了上面那六类运算符之外的其他运算符，这里我主要介绍 <code>sizeof</code> 运算符和强制类型转换运算符 “(type) a”。至于函数调用运算符，由于内容较多，我会在后续的课程再单独为你介绍。我们还是通过一段示例代码，观察它们在默认情况下的汇编实现：</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/5d/e23e323a086f364b2d5225e25d958e5d.png?wh=1920x817\" alt=\"图片\"></p><p>其中，<code>sizeof</code> 运算符是一个编译期运算符，这意味着编译器仅通过静态分析就能够将给定参数的大小计算出来。因此，在最终生成的汇编代码中，我们不会看到 <code>sizeof</code> 运算符对应于任何汇编指令。相反，运算符在编译过程中得到的计算结果值，将会以字面量值的形式直接“嵌入”到汇编代码中使用。你可以从上图中右侧红框内的汇编代码看到，C 代码 <code>sizeof(int)</code> 的计算结果 4 直接作为了 <code>mov</code> 指令的一个操作数。</p><p>至于强制类型转换运算符呢，其实也很好理解。这里，我们将变量 n 的值类型由原来的 <code>size_t</code> 转换为了 <code>short</code>。你可以从上图中蓝框内的汇编代码里看到，当 <code>mov</code> 指令将变量 n 的值移动到变量 f 所在的内存区域时，它仅移动了这个值从低位开始一个 WORD，即 16 位大小的部分。至于其他类型之间的转换过程，你可以简单理解成<strong>对同一块数据在不同机器指令下的不同“解读”方式</strong>。</p><p>在高编译优化等级下，上面介绍的成员访问运算符与强制类型转换运算符的实现方式并没有发生本质的变化。而与其他运算符类似的是，编译器会减少对栈内存的使用。同时，基于更强的静态分析能力，编译器甚至可以提前推算出某些变量的取值，并省去在程序运行过程中再进行类型转换的过程，从而进一步提升程序的运行时性能。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了，我来给你总结一下。</p><p>今天我主要围绕 C 语言中的基本“计算单元”，运算符，讲解了 C 语言中的几类不同运算符是如何被编译器实现的。具体总结如下：</p><ul>\n<li>通常来说，算数、关系、位、赋值运算符的实现在大多数情况下，都会直接一一对应到特定的汇编指令上；</li>\n<li>逻辑运算符的实现方式则有些不同，它会首先借助 <code>test</code> 、 <code>cmp</code> 等指令，来判断操作数的状态，并在此基础上再进行相应的数值转换过程；</li>\n<li>在成员访问运算符中，取地址运算符一般对应于汇编指令 <code>lea</code> ，解引用运算符则可直接使用 <code>mov</code> 指令来实现；</li>\n<li>对于其他运算符，<code>sizeof</code> 运算符会在编译时进行求值，强制类型转换运算符则直接对应于不同指令对同一块数据的不同处理方式。</li>\n</ul><h2>思考题</h2><p>除了我在上面提到的三个问题外，我再给你留个思考题：编译器是通过哪类指令来实现三元运算符 “?:” 的？你可以自己动手实践，并在评论区给出你的答案。</p><p>今天的课程就结束了，希望可以帮助到你，也期待你在下方的留言区和我一起讨论。同时，欢迎把这节课分享给你的朋友或同事，我们一起交流。</p>","comments":[{"had_liked":false,"id":325678,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1639097614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44588770574","product_id":100100701,"comment_content":"实践了一下，三目运算符实际就是一个简化的分支跳转指令tips，如下：<br>        cmp     DWORD PTR [rbp-4], 1<br>        jle     .L2<br>        mov     eax, 2<br>        jmp     .L3<br>.L2:<br>        mov     eax, 3<br>.L3:<br>        mov     DWORD PTR [rbp-8], eax<br>比较变量的值，然后根据结果跳转L2，还是L3，将分支结果赋给 eax，最后再赋给变量。","like_count":11},{"had_liked":false,"id":325993,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1639298465,"is_pvip":true,"replies":[{"id":"118255","content":"其实对于日常开发来说，不了解汇编并不会有太大的影响，因为这也是 C 语言被创造出来的目的之一。但计算机知识其实是成体系的，如果你想要“知其然，并知其所以然”，那了解汇编是一个必要的过程。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639326351,"ip_address":"","comment_id":325993,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31704069537","product_id":100100701,"comment_content":"问一个比较困惑的问题，学习c语言，真的要了解汇编吗","like_count":8,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538122,"discussion_content":"其实对于日常开发来说，不了解汇编并不会有太大的影响，因为这也是 C 语言被创造出来的目的之一。但计算机知识其实是成体系的，如果你想要“知其然，并知其所以然”，那了解汇编是一个必要的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639326351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325856,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1639200559,"is_pvip":false,"replies":[{"id":"118251","content":"没错！关于 cmove 指令的更多细节我们会在第 18 讲再深入讨论。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639323662,"ip_address":"","comment_id":325856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18819069743","product_id":100100701,"comment_content":"例如b = (a==3?3:2)。<br>三目运算符的汇编实现中，采用了cmp指令来比较a与3的大小，接着使用cmov指令根据cmp后的FLAGS寄存器的状态位的值，来决定b的值是3还是2。","like_count":5,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538106,"discussion_content":"没错！关于 cmove 指令的更多细节我们会在第 18 讲再深入讨论。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639323662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328033,"user_name":"Nuyoah","can_delete":false,"product_type":"c1","uid":2862858,"ip_address":"","ucode":"5633373B4C4513","user_header":"https://static001.geekbang.org/account/avatar/00/2b/af/0a/41ffb3ee.jpg","comment_is_top":false,"comment_ctime":1640492545,"is_pvip":false,"replies":[{"id":"119637","content":"没错哈！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640746979,"ip_address":"","comment_id":328033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14525394433","product_id":100100701,"comment_content":"        mov     edx, DWORD PTR [rbp-8]<br>        mov     eax, DWORD PTR [rbp-4]<br>        cmp     edx, eax<br>        cmovge  eax, edx<br>        mov     DWORD PTR [rbp-12], eax<br><br>自己理解是cmovage对应？<br>cmp用来比较两个操作数的大小<br>最后的mov汇编指令将满足条件的操作数以32位存入寄存器相应位置","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542424,"discussion_content":"没错哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640746979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332569,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":false,"comment_ctime":1643348379,"is_pvip":false,"replies":[{"id":"122212","content":"可以尝试用 `objdump -M intel -d .&#47;foo` 这个命令哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645018583,"ip_address":"","comment_id":332569,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5938315675","product_id":100100701,"comment_content":"使用 `gcc -S` 得到的汇编代码风格不一样，请问要如何得到文章中的汇编代码风格呢？","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551450,"discussion_content":"可以尝试用 `objdump -M intel -d ./foo` 这个命令哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645018583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549919,"discussion_content":"gcc -S -masm=intel","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644295554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330000,"user_name":"阿锭啊阿滨啊","can_delete":false,"product_type":"c1","uid":2865698,"ip_address":"","ucode":"D0A6E181D9E20C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ba/22/c1298e27.jpg","comment_is_top":false,"comment_ctime":1641720891,"is_pvip":false,"replies":[{"id":"120395","content":"想想 `bool` 这个关键字？","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641979844,"ip_address":"","comment_id":330000,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5936688187","product_id":100100701,"comment_content":"L3问题：为什么还要and 1呢？前面不是赋值要么0要么1了吗？还会是其他值吗？","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545511,"discussion_content":"想想 `bool` 这个关键字？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641979844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","nickname":"龍蝦","note":"","ucode":"BE1D500833F070","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553588,"discussion_content":"相同疑问，不 and 1，结果似乎没有差异。跟编译器的实现有关？确保 bool 类型只有最低位有效？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645972051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","nickname":"龍蝦","note":"","ucode":"BE1D500833F070","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":570099,"discussion_content":"应该是 bool 值底层对应的就是 0/ 1，这里 and 1 就是去掉高位，只保留最低位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651662636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553588,"ip_address":""},"score":570099,"extra":""}]}]},{"had_liked":false,"id":327464,"user_name":"白凤凰","can_delete":false,"product_type":"c1","uid":1477886,"ip_address":"","ucode":"1724189C8B8290","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/fe/ccb86437.jpg","comment_is_top":false,"comment_ctime":1640140606,"is_pvip":true,"replies":[{"id":"119225","content":"是用的同一段 C 代码吗？具体使用的编译器和环境是怎样的呢？如果方便的话，也可以完整地回复一下汇编代码哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640188475,"ip_address":"","comment_id":327464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935107902","product_id":100100701,"comment_content":"L3的思考题，为什么我的执行是这个样子的？没有and哪句指令。<br><br><br>.L3:<br>        mov     BYTE PTR [rbp-1], al<br>        movzx   eax, BYTE PTR [rbp-1]<br>        mov     esi, eax<br>        mov     edi, OFFSET FLAT:.LC0<br>        mov     eax, 0<br>        call    printf","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540896,"discussion_content":"是用的同一段 C 代码吗？具体使用的编译器和环境是怎样的呢？如果方便的话，也可以完整地回复一下汇编代码哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640188475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326774,"user_name":"Geek_98aed8","can_delete":false,"product_type":"c1","uid":2867564,"ip_address":"","ucode":"0A2E65754811E4","user_header":"","comment_is_top":false,"comment_ctime":1639669143,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5934636439","product_id":100100701,"comment_content":"L3思考题：<br>1. 取AL（AL为EAX寄存器低八位）到logical地址<br>2. =&amp;1取最低位值作为返回结果","like_count":1,"discussions":[{"author":{"id":1801213,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/fd/94bcd8ea.jpg","nickname":"ROCKS","note":"","ucode":"53174DFE85902C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539655,"discussion_content":"最后和1做与运算看起来可以省略 在这里是有什么特殊作用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639800677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1801213,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/fd/94bcd8ea.jpg","nickname":"ROCKS","note":"","ucode":"53174DFE85902C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539654,"discussion_content":"最后和1做与运算看起来可以省略 在这里是有什么特殊作用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639800676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345209,"user_name":"无名氏","can_delete":false,"product_type":"c1","uid":1256121,"ip_address":"","ucode":"584E697AE276AB","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/b9/2bf8cc89.jpg","comment_is_top":false,"comment_ctime":1652109721,"is_pvip":false,"replies":[{"id":"126179","content":"可以参考这里哈：https:&#47;&#47;godbolt.org&#47;","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1652587141,"ip_address":"","comment_id":345209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652109721","product_id":100100701,"comment_content":"请教下老师，这个汇编和c语言颜色对应的图是咋生成的😄","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572070,"discussion_content":"可以参考这里哈：https://godbolt.org/","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652587141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338185,"user_name":"没有軒的筝","can_delete":false,"product_type":"c1","uid":1332535,"ip_address":"","ucode":"8B6A8A1B5472EE","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/37/57aeb6af.jpg","comment_is_top":false,"comment_ctime":1647341897,"is_pvip":false,"replies":[{"id":"123704","content":"实际上就同汇编代码展示的那样，rbp-20 与 rbp-24 位置上分别存放着变量 x 与 y 的值。而对应的两行 cmp 指令执行时，会分别将这两个值与数值 0 进行比较，当其中任意一个变量的值与 0 相等时，则程序紧接着会执行标签 .L2 处的指令。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1647521532,"ip_address":"","comment_id":338185,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647341897","product_id":100100701,"comment_content":"“程序会按顺序将位于栈内存中的变量 x 和 y 的值与数值 0 进行比较。若其中的某个比较结果相等，程序执行将会直接跳转到标签 “.L2” 的所在位置“，这句话是什么意思的？是变量x和y的值分别与0进行比较吗？还有“某个比较结果相等”是变量x和变量y分别与0比较后的两个结果吗？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556809,"discussion_content":"实际上就同汇编代码展示的那样，rbp-20 与 rbp-24 位置上分别存放着变量 x 与 y 的值。而对应的两行 cmp 指令执行时，会分别将这两个值与数值 0 进行比较，当其中任意一个变量的值与 0 相等时，则程序紧接着会执行标签 .L2 处的指令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647521532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337396,"user_name":"丶","can_delete":false,"product_type":"c1","uid":2862869,"ip_address":"","ucode":"845E710DF4EADA","user_header":"https://static001.geekbang.org/account/avatar/00/2b/af/15/46cd57d3.jpg","comment_is_top":false,"comment_ctime":1646804770,"is_pvip":false,"replies":[{"id":"123309","content":"感谢指正！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1646832310,"ip_address":"","comment_id":337396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646804770","product_id":100100701,"comment_content":"je不是相等才跳转吗，结果相等，ZF会置1吧，上面说je判断ZF是否为0，若为0则跳转","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555280,"discussion_content":"感谢指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646832311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330963,"user_name":"zxk","can_delete":false,"product_type":"c1","uid":1221195,"ip_address":"","ucode":"4BB2BD9D2BCD04","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/4b/b72f724f.jpg","comment_is_top":false,"comment_ctime":1642327104,"is_pvip":false,"replies":[{"id":"122240","content":"因为我们不能直接假定 sil 的高位字节都是 0，所以需要用零扩展来“扩大”值的宽度。而之所以要用 esi 寄存器而不是 sil 的一个可能原因是：通常来说，机器指令在以“自然大小”为长度的寄存器（这里就是 esi）上进行相应的数据操作，效率是最高的。因此，即使少执行一条指令，也并不见得开销就一定最小。当然，这里也只是猜测，实际上只是编译器的一种实现上的选择。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645062220,"ip_address":"","comment_id":330963,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642327104","product_id":100100701,"comment_content":"逻辑运算符优化后的那段汇编：<br><br>test    edi, edi  ; edi &lt;- x.<br>setne   al<br>test    esi, esi  ; esi &lt;- y.<br>setne   sil<br>movzx   esi, sil<br>and     esi, eax<br>为什么要使用 movzx 进行零扩展呢，直接 and al sil 或者 and esi eax 不是可以节省一条指令么？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551550,"discussion_content":"因为我们不能直接假定 sil 的高位字节都是 0，所以需要用零扩展来“扩大”值的宽度。而之所以要用 esi 寄存器而不是 sil 的一个可能原因是：通常来说，机器指令在以“自然大小”为长度的寄存器（这里就是 esi）上进行相应的数据操作，效率是最高的。因此，即使少执行一条指令，也并不见得开销就一定最小。当然，这里也只是猜测，实际上只是编译器的一种实现上的选择。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645062220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329183,"user_name":"Nuyoah","can_delete":false,"product_type":"c1","uid":2862858,"ip_address":"","ucode":"5633373B4C4513","user_header":"https://static001.geekbang.org/account/avatar/00/2b/af/0a/41ffb3ee.jpg","comment_is_top":false,"comment_ctime":1641198686,"is_pvip":false,"replies":[{"id":"119994","content":"并不是哈。FLAGS 寄存器中还有很多其他的标志位，比如中断位、对齐检测位（AC）等等，这些位也会有其他作用。完整的 FLAGS 寄存器布局可以参考这里：https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;FLAGS_register","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641384214,"ip_address":"","comment_id":329183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641198686","product_id":100100701,"comment_content":"我想问，是只有关系运算符汇编时需要用到FLAGS寄存器来反应当前程序运行状态吗？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544040,"discussion_content":"并不是哈。FLAGS 寄存器中还有很多其他的标志位，比如中断位、对齐检测位（AC）等等，这些位也会有其他作用。完整的 FLAGS 寄存器布局可以参考这里：https://en.wikipedia.org/wiki/FLAGS_register","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641384214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326820,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639709974,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1639709974","product_id":100100701,"comment_content":"如果 x比y小 那么 sf应该是为1   按照补码减法来算  1  和 3 的结果是-2  -2的高位是为1的 SF最高位是1  那么setg结果为0<br>","like_count":0,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539426,"discussion_content":"还有就是换成＜符号 那么就是setl 可以看出这种后缀还是很多的 jmp也是同理 然后三元运算符应该就是分支跳转 可以gcc -S 看汇编","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639712188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325818,"user_name":"106365","can_delete":false,"product_type":"c1","uid":1254205,"ip_address":"","ucode":"9E98A50BD325F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/3d/97d15fc4.jpg","comment_is_top":false,"comment_ctime":1639150259,"is_pvip":true,"replies":[{"id":"118249","content":"恩是的，这样的翻译没有什么问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639323376,"ip_address":"","comment_id":325818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639150259","product_id":100100701,"comment_content":"老师，对于加减乘除等，文献常见翻译成：算术运算符。","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538101,"discussion_content":"恩是的，这样的翻译没有什么问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639323376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325816,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1639149461,"is_pvip":false,"replies":[{"id":"118252","content":"嗯是的，这种情况下只能建议从汇编层面单步跟踪调试了。没有比较好的办法 : (","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639323913,"ip_address":"","comment_id":325816,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639149461","product_id":100100701,"comment_content":"老师，如果一个应用程序崩溃了，编译的时候没带-g，而且还开了O2及以上的优化，这种情况有没有什么好的排查方法？还是只能对着汇编，把寄存器的内容打出来找到虚拟内存的地址，然后找到相关内容的……","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538110,"discussion_content":"嗯是的，这种情况下只能建议从汇编层面单步跟踪调试了。没有比较好的办法 : (","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639323913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537785,"discussion_content":"就是这种情况下怎么看core文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639194105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}