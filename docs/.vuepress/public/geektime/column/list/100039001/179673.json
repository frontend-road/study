{"id":179673,"title":"26 | 实战二（下）：如何实现一个支持各种统计规则的性能计数器？","content":"<p>在上一节课中，我们对计数器框架做了需求分析和粗略的模块划分。今天这节课，我们利用面向对象设计、实现方法，并结合之前学过的设计思想、设计原则来看一下，如何编写灵活、可扩展的、高质量的代码实现。</p><p>话不多说，现在就让我们正式开始今天的学习吧！</p><h2>小步快跑、逐步迭代</h2><p>在上一节课中，我们将整个框架分为数据采集、存储、聚合统计、显示这四个模块。除此之外，关于统计触发方式（主动推送、被动触发统计）、统计时间区间（统计哪一个时间段内的数据）、统计时间间隔（对于主动推送方法，多久统计推送一次）我们也做了简单的设计。这里我就不重新描述了，你可以打开上一节课回顾一下。</p><p>虽然上一节课的最小原型为我们奠定了迭代开发的基础，但离我们最终期望的框架的样子还有很大的距离。我自己在写这篇文章的时候，试图去实现上面罗列的所有功能需求，希望写出一个完美的框架，发现这是件挺烧脑的事情，在写代码的过程中，一直有种“脑子不够使”的感觉。我这个有十多年工作经验的人尚且如此，对于没有太多经验的开发者来说，想一下子把所有需求都实现出来，更是一件非常有挑战的事情。一旦无法顺利完成，你可能就会有很强的挫败感，就会陷入自我否定的情绪中。</p><p>不过，即便你有能力将所有需求都实现，可能也要花费很大的设计精力和开发时间，迟迟没有产出，你的leader会因此产生很强的不可控感。对于现在的互联网项目来说，小步快跑、逐步迭代是一种更好的开发模式。所以，我们应该分多个版本逐步完善这个框架。第一个版本可以先实现一些基本功能，对于更高级、更复杂的功能，以及非功能性需求不做过高的要求，在后续的v2.0、v3.0……版本中继续迭代优化。</p><!-- [[[read_end]]] --><p>针对这个框架的开发，我们在v1.0版本中，暂时只实现下面这些功能。剩下的功能留在v2.0、v3.0版本，也就是我们后面的第39节和第40节课中再来讲解。</p><ul>\n<li>数据采集：负责打点采集原始数据，包括记录每次接口请求的响应时间和请求时间。</li>\n<li>存储：负责将采集的原始数据保存下来，以便之后做聚合统计。数据的存储方式有很多种，我们暂时只支持Redis这一种存储方式，并且，采集与存储两个过程同步执行。</li>\n<li>聚合统计：负责将原始数据聚合为统计数据，包括响应时间的最大值、最小值、平均值、99.9百分位值、99百分位值，以及接口请求的次数和tps。</li>\n<li>显示：负责将统计数据以某种格式显示到终端，暂时只支持主动推送给命令行和邮件。命令行间隔n秒统计显示上m秒的数据（比如，间隔60s统计上60s的数据）。邮件每日统计上日的数据。</li>\n</ul><p>现在这个版本的需求比之前的要更加具体、简单了，实现起来也更加容易一些。实际上，学会结合具体的需求，做合理的预判、假设、取舍，规划版本的迭代设计开发，也是一个资深工程师必须要具备的能力。</p><h2>面向对象设计与实现</h2><p>在<a href=\"https://time.geekbang.org/column/article/171760\">第13节</a>和<a href=\"https://time.geekbang.org/column/article/171767\">第14节</a>课中，我们把面向对象设计与实现分开来讲解，界限划分比较明显。在实际的软件开发中，这两个过程往往是交叉进行的。一般是先有一个粗糙的设计，然后着手实现，实现的过程发现问题，再回过头来补充修改设计。所以，对于这个框架的开发来说，我们把设计和实现放到一块来讲解。</p><p>回顾上一节课中的最小原型的实现，所有的代码都耦合在一个类中，这显然是不合理的。接下来，我们就按照之前讲的面向对象设计的几个步骤，来重新划分、设计类。</p><h3>1.划分职责进而识别出有哪些类</h3><p>根据需求描述，我们先大致识别出下面几个接口或类。这一步不难，完全就是翻译需求。</p><ul>\n<li>MetricsCollector类负责提供API，来采集接口请求的原始数据。我们可以为MetricsCollector抽象出一个接口，但这并不是必须的，因为暂时我们只能想到一个MetricsCollector的实现方式。</li>\n<li>MetricsStorage接口负责原始数据存储，RedisMetricsStorage类实现MetricsStorage接口。这样做是为了今后灵活地扩展新的存储方法，比如用HBase来存储。</li>\n<li>Aggregator类负责根据原始数据计算统计数据。</li>\n<li>ConsoleReporter类、EmailReporter类分别负责以一定频率统计并发送统计数据到命令行和邮件。至于ConsoleReporter和EmailReporter是否可以抽象出可复用的抽象类，或者抽象出一个公共的接口，我们暂时还不能确定。</li>\n</ul><h3>2.定义类及类与类之间的关系</h3><p>接下来就是定义类及属性和方法，定义类与类之间的关系。这两步没法分得很开，所以，我们今天将它们合在一起来讲解。</p><p>大致地识别出几个核心的类之后，我的习惯性做法是，先在IDE中创建好这几个类，然后开始试着定义它们的属性和方法。在设计类、类与类之间交互的时候，我会不断地用之前学过的设计原则和思想来审视设计是否合理，比如，是否满足单一职责原则、开闭原则、依赖注入、KISS原则、DRY原则、迪米特法则，是否符合基于接口而非实现编程思想，代码是否高内聚、低耦合，是否可以抽象出可复用代码等等。</p><p>MetricsCollector类的定义非常简单，具体代码如下所示。对比上一节课中最小原型的代码，MetricsCollector通过引入RequestInfo类来封装原始数据信息，用一个采集函数代替了之前的两个函数。</p><pre><code>public class MetricsCollector {\n  private MetricsStorage metricsStorage;//基于接口而非实现编程\n\n  //依赖注入\n  public MetricsCollector(MetricsStorage metricsStorage) {\n    this.metricsStorage = metricsStorage;\n  }\n\n  //用一个函数代替了最小原型中的两个函数\n  public void recordRequest(RequestInfo requestInfo) {\n    if (requestInfo == null || StringUtils.isBlank(requestInfo.getApiName())) {\n      return;\n    }\n    metricsStorage.saveRequestInfo(requestInfo);\n  }\n}\n\npublic class RequestInfo {\n  private String apiName;\n  private double responseTime;\n  private long timestamp;\n  //...省略constructor/getter/setter方法...\n}\n</code></pre><p>MetricsStorage类和RedisMetricsStorage类的属性和方法也比较明确。具体的代码实现如下所示。注意，一次性取太长时间区间的数据，可能会导致拉取太多的数据到内存中，有可能会撑爆内存。对于Java来说，就有可能会触发OOM（Out Of Memory）。而且，即便不出现OOM，\b内存还够用，但也会因为内存吃紧，导致频繁的Full GC，进而导致系统接口请求处理变慢，甚至超时。这个问题解决起来并不难，先留给你自己思考一下。我会在第40节课中解答。</p><pre><code>public interface MetricsStorage {\n  void saveRequestInfo(RequestInfo requestInfo);\n\n  List&lt;RequestInfo&gt; getRequestInfos(String apiName, long startTimeInMillis, long endTimeInMillis);\n\n  Map&lt;String, List&lt;RequestInfo&gt;&gt; getRequestInfos(long startTimeInMillis, long endTimeInMillis);\n}\n\npublic class RedisMetricsStorage implements MetricsStorage {\n  //...省略属性和构造函数等...\n  @Override\n  public void saveRequestInfo(RequestInfo requestInfo) {\n    //...\n  }\n\n  @Override\n  public List&lt;RequestInfo&gt; getRequestInfos(String apiName, long startTimestamp, long endTimestamp) {\n    //...\n  }\n\n  @Override\n  public Map&lt;String, List&lt;RequestInfo&gt;&gt; getRequestInfos(long startTimestamp, long endTimestamp) {\n    //...\n  }\n}\n</code></pre><p>MetricsCollector类和MetricsStorage类的设计思路比较简单，不同的人给出的设计结果应该大差不差。但是，统计和显示这两个功能就不一样了，可以有多种设计思路。实际上，如果我们把统计显示所要完成的功能逻辑细分一下的话，主要包含下面4点：</p><ol>\n<li>根据给定的时间区间，从数据库中拉取数据；</li>\n<li>根据原始数据，计算得到统计数据；</li>\n<li>将统计数据显示到终端（命令行或邮件）；</li>\n<li>定时触发以上3个过程的执行。</li>\n</ol><p>实际上，如果用一句话总结一下的话，<strong>面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中</strong>。所以，我们现在要做的工作就是，把以上的4个功能逻辑划分到几个类中。划分的方法有很多种，比如，我们可以把前两个逻辑放到一个类中，第3个逻辑放到另外一个类中，第4个逻辑作为上帝类（God Class）组合前面两个类来触发前3个逻辑的执行。当然，我们也可以把第2个逻辑单独放到一个类中，第1、3、4都放到另外一个类中。</p><p>至于到底选择哪种排列组合方式，判定的标准是，让代码尽量地满足低耦合、高内聚、单一职责、对扩展开放对修改关闭等之前讲到的各种设计原则和思想，尽量地让设计满足代码易复用、易读、易扩展、易维护。</p><p>我们暂时选择把第1、3、4逻辑放到ConsoleReporter或EmailReporter类中，把第2个逻辑放到Aggregator类中。其中，Aggregator类负责的逻辑比较简单，我们把它设计成只包含静态方法的工具类。具体的代码实现如下所示：</p><pre><code>public class Aggregator {\n  public static RequestStat aggregate(List&lt;RequestInfo&gt; requestInfos, long durationInMillis) {\n    double maxRespTime = Double.MIN_VALUE;\n    double minRespTime = Double.MAX_VALUE;\n    double avgRespTime = -1;\n    double p999RespTime = -1;\n    double p99RespTime = -1;\n    double sumRespTime = 0;\n    long count = 0;\n    for (RequestInfo requestInfo : requestInfos) {\n      ++count;\n      double respTime = requestInfo.getResponseTime();\n      if (maxRespTime &lt; respTime) {\n        maxRespTime = respTime;\n      }\n      if (minRespTime &gt; respTime) {\n        minRespTime = respTime;\n      }\n      sumRespTime += respTime;\n    }\n    if (count != 0) {\n      avgRespTime = sumRespTime / count;\n    }\n    long tps = (long)(count / durationInMillis * 1000);\n    Collections.sort(requestInfos, new Comparator&lt;RequestInfo&gt;() {\n      @Override\n      public int compare(RequestInfo o1, RequestInfo o2) {\n        double diff = o1.getResponseTime() - o2.getResponseTime();\n        if (diff &lt; 0.0) {\n          return -1;\n        } else if (diff &gt; 0.0) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n    int idx999 = (int)(count * 0.999);\n    int idx99 = (int)(count * 0.99);\n    if (count != 0) {\n      p999RespTime = requestInfos.get(idx999).getResponseTime();\n      p99RespTime = requestInfos.get(idx99).getResponseTime();\n    }\n    RequestStat requestStat = new RequestStat();\n    requestStat.setMaxResponseTime(maxRespTime);\n    requestStat.setMinResponseTime(minRespTime);\n    requestStat.setAvgResponseTime(avgRespTime);\n    requestStat.setP999ResponseTime(p999RespTime);\n    requestStat.setP99ResponseTime(p99RespTime);\n    requestStat.setCount(count);\n    requestStat.setTps(tps);\n    return requestStat;\n  }\n}\n\npublic class RequestStat {\n  private double maxResponseTime;\n  private double minResponseTime;\n  private double avgResponseTime;\n  private double p999ResponseTime;\n  private double p99ResponseTime;\n  private long count;\n  private long tps;\n  //...省略getter/setter方法...\n}\n</code></pre><p>ConsoleReporter类相当于一个上帝类，定时根据给定的时间区间，从数据库中取出数据，借助Aggregator类完成统计工作，并将统计结果输出到命令行。具体的代码实现如下所示：</p><pre><code>public class ConsoleReporter {\n  private MetricsStorage metricsStorage;\n  private ScheduledExecutorService executor;\n\n  public ConsoleReporter(MetricsStorage metricsStorage) {\n    this.metricsStorage = metricsStorage;\n    this.executor = Executors.newSingleThreadScheduledExecutor();\n  }\n  \n  // 第4个代码逻辑：定时触发第1、2、3代码逻辑的执行；\n  public void startRepeatedReport(long periodInSeconds, long durationInSeconds) {\n    executor.scheduleAtFixedRate(new Runnable() {\n      @Override\n      public void run() {\n        // 第1个代码逻辑：根据给定的时间区间，从数据库中拉取数据；\n        long durationInMillis = durationInSeconds * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          // 第2个代码逻辑：根据原始数据，计算得到统计数据；\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        // 第3个代码逻辑：将统计数据显示到终端（命令行或邮件）；\n        System.out.println(&quot;Time Span: [&quot; + startTimeInMillis + &quot;, &quot; + endTimeInMillis + &quot;]&quot;);\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(stats));\n      }\n    }, 0, periodInSeconds, TimeUnit.SECONDS);\n  }\n}\n\npublic class EmailReporter {\n  private static final Long DAY_HOURS_IN_SECONDS = 86400L;\n\n  private MetricsStorage metricsStorage;\n  private EmailSender emailSender;\n  private List&lt;String&gt; toAddresses = new ArrayList&lt;&gt;();\n\n  public EmailReporter(MetricsStorage metricsStorage) {\n    this(metricsStorage, new EmailSender(/*省略参数*/));\n  }\n\n  public EmailReporter(MetricsStorage metricsStorage, EmailSender emailSender) {\n    this.metricsStorage = metricsStorage;\n    this.emailSender = emailSender;\n  }\n\n  public void addToAddress(String address) {\n    toAddresses.add(address);\n  }\n\n  public void startDailyReport() {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.DATE, 1);\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\n    calendar.set(Calendar.MINUTE, 0);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date firstTime = calendar.getTime();\n    Timer timer = new Timer();\n    timer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long durationInMillis = DAY_HOURS_IN_SECONDS * 1000;\n        long endTimeInMillis = System.currentTimeMillis();\n        long startTimeInMillis = endTimeInMillis - durationInMillis;\n        Map&lt;String, List&lt;RequestInfo&gt;&gt; requestInfos =\n                metricsStorage.getRequestInfos(startTimeInMillis, endTimeInMillis);\n        Map&lt;String, RequestStat&gt; stats = new HashMap&lt;&gt;();\n        for (Map.Entry&lt;String, List&lt;RequestInfo&gt;&gt; entry : requestInfos.entrySet()) {\n          String apiName = entry.getKey();\n          List&lt;RequestInfo&gt; requestInfosPerApi = entry.getValue();\n          RequestStat requestStat = Aggregator.aggregate(requestInfosPerApi, durationInMillis);\n          stats.put(apiName, requestStat);\n        }\n        // TODO: 格式化为html格式，并且发送邮件\n      }\n    }, firstTime, DAY_HOURS_IN_SECONDS * 1000);\n  }\n}\n</code></pre><h3>3.将类组装起来并提供执行入口</h3><p>因为这个框架稍微有些特殊，有两个执行入口：一个是MetricsCollector类，提供了一组API来采集原始数据；另一个是ConsoleReporter类和EmailReporter类，用来触发统计显示。框架具体的使用方式如下所示：</p><pre><code>public class Demo {\n  public static void main(String[] args) {\n    MetricsStorage storage = new RedisMetricsStorage();\n    ConsoleReporter consoleReporter = new ConsoleReporter(storage);\n    consoleReporter.startRepeatedReport(60, 60);\n\n    EmailReporter emailReporter = new EmailReporter(storage);\n    emailReporter.addToAddress(&quot;wangzheng@xzg.com&quot;);\n    emailReporter.startDailyReport();\n\n    MetricsCollector collector = new MetricsCollector(storage);\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 123, 10234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 223, 11234));\n    collector.recordRequest(new RequestInfo(&quot;register&quot;, 323, 12334));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 23, 12434));\n    collector.recordRequest(new RequestInfo(&quot;login&quot;, 1223, 14234));\n\n    try {\n      Thread.sleep(100000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre><h2>Review设计与实现</h2><p>我们前面讲到了SOLID、KISS、DRY、YAGNI、LOD等设计原则，基于接口而非实现编程、多用组合少用继承、高内聚低耦合等设计思想。我们现在就来看下，上面的代码实现是否符合这些设计原则和思想。</p><ul>\n<li>MetricsCollector</li>\n</ul><p>MetricsCollector负责采集和存储数据，职责相对来说还算比较单一。它基于接口而非实现编程，通过依赖注入的方式来传递MetricsStorage对象，可以在不需要修改代码的情况下，灵活地替换不同的存储方式，满足开闭原则。</p><ul>\n<li>MetricsStorage、RedisMetricsStorage</li>\n</ul><p>MetricsStorage和RedisMetricsStorage的设计比较简单。当我们需要实现新的存储方式的时候，只需要实现MetricsStorage接口即可。因为所有用到MetricsStorage和RedisMetricsStorage的地方，都是基于相同的接口函数来编程的，所以，除了在组装类的地方有所改动（从RedisMetricsStorage改为新的存储实现类），其他接口函数调用的地方都不需要改动，满足开闭原则。</p><ul>\n<li>Aggregator</li>\n</ul><p>Aggregator类是一个工具类，里面只有一个静态函数，有50行左右的代码量，负责各种统计数据的计算。当需要扩展新的统计功能的时候，需要修改aggregate()函数代码，并且一旦越来越多的统计功能添加进来之后，这个函数的代码量会持续增加，可读性、可维护性就变差了。所以，从刚刚的分析来看，这个类的设计可能存在职责不够单一、不易扩展等问题，需要在之后的版本中，对其结构做优化。</p><ul>\n<li>ConsoleReporter、EmailReporter</li>\n</ul><p>ConsoleReporter和EmailReporter中存在代码重复问题。在这两个类中，从数据库中取数据、做统计的逻辑都是相同的，可以抽取出来复用，否则就违反了DRY原则。而且整个类负责的事情比较多，职责不是太单一。特别是显示部分的代码，可能会比较复杂（比如Email的展示方式），最好是将显示部分的代码逻辑拆分成独立的类。除此之外，因为代码中涉及线程操作，并且调用了Aggregator的静态函数，所以代码的可测试性不好。</p><p>今天我们给出的代码实现还是有诸多问题的，在后面的章节（第39、40讲）中，我们会慢慢优化，给你展示整个设计演进的过程，这比直接给你最终的最优方案要有意义得多！实际上，优秀的代码都是重构出来的，复杂的代码都是慢慢堆砌出来的 。所以，当你看到那些优秀而复杂的开源代码或者项目代码的时候，也不必自惭形秽，觉得自己写不出来。毕竟罗马不是一天建成的，这些优秀的代码也是靠几年的时间慢慢迭代优化出来的。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块总结回顾一下，你需要掌握的重点内容。</p><p>写代码的过程本就是一个修修改改、不停调整的过程，肯定不是一气呵成的。你看到的那些大牛开源项目的设计和实现，也都是在不停优化、修改过程中产生的。比如，我们熟悉的Unix系统，第一版很简单、粗糙，代码不到1万行。所以，迭代思维很重要，不要刚开始就追求完美。</p><p>面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。至于到底选择哪种划分方法，判定的标准是让代码尽量地满足低耦合、高内聚、单一职责、对扩展开放对修改关闭等之前讲的各种设计原则和思想，尽量地做到代码可复用、易读、易扩展、易维护。</p><h2>课堂讨论</h2><p>今天课堂讨论题有下面两道。</p><ol>\n<li>对于今天的设计与代码实现，你有没有发现哪些不合理的地方？有哪些可以继续优化的地方呢？或者留言说说你的设计方案。</li>\n<li>说一个你觉得不错的开源框架或者项目，聊聊你为什么觉得它不错？</li>\n</ol><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":167460,"user_name":"李现教你学编程","can_delete":false,"product_type":"c1","uid":1218097,"ip_address":"","ucode":"DAF84386D0F30F","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/31/f13e6869.jpg","comment_is_top":false,"comment_ctime":1577809870,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"216326174670","product_id":100039001,"comment_content":"新年快乐 一起学习 一起提高 2020","like_count":50,"discussions":[{"author":{"id":2630424,"avatar":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","nickname":"易飞","note":"","ucode":"32AC28754237F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389610,"discussion_content":"2021-8-19","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629355816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343485,"discussion_content":"时光匆匆啊，已经2021-1-19了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611060946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344997,"avatar":"https://static001.geekbang.org/account/avatar/00/14/85/e5/eedb0528.jpg","nickname":"Zed","note":"","ucode":"0B1BF15DFB050C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549473,"discussion_content":"都 2202 年啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644023526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281585,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8e/31/28972804.jpg","nickname":"阿海","note":"","ucode":"2589431F840C42","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377192,"discussion_content":"今天是61儿童节了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622542383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167779,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1577933064,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"212031330568","product_id":100039001,"comment_content":"要写出优美的代码，首先要有一颗对丑陋代码厌恶的心","like_count":49,"discussions":[{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288514,"discussion_content":"乍一看，看成了 需要一颗丑陋的心 😂","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1593766788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054472,"avatar":"https://static001.geekbang.org/account/avatar/00/10/17/08/566fb246.jpg","nickname":"L!en6o","note":"","ucode":"E0931CB8998260","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543967,"discussion_content":"代码审美很重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641368169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377665,"discussion_content":"说的没错，深以为然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622769239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339195,"discussion_content":"代码洁癖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609560859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291590,"discussion_content":"要把自己当做整容医生，舍得下刀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594882427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1222834,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","nickname":"悠游","note":"","ucode":"4FDDDDF29AE3F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189214,"discussion_content":"code smell","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582858617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167757,"user_name":"何沛","can_delete":false,"product_type":"c1","uid":1477145,"ip_address":"","ucode":"5673C580982710","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/19/a54761af.jpg","comment_is_top":false,"comment_ctime":1577928823,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"117542045815","product_id":100039001,"comment_content":"Aggregator考虑到后期新增新的维度统计，可以考虑使用责任链模式。<br>ConsoleReporter、EmailReporter 出现了代码复用，可以用模板设计模式。","like_count":28,"discussions":[{"author":{"id":1234963,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","nickname":"昵称C","note":"","ucode":"1BB2D537942DC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385994,"discussion_content":"Aggregator应该是使用策略模式进行不同方案的统计","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627374919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1924882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aXnFBB3XD3lwB3jf1A0PQqT66aJy4yycbRupJI3ia2CUFMuLsvYthM41TDopIIjL8kz7k2xE5vrAtQggQ6Jt8Zw/132","nickname":"付磊","note":"","ucode":"719BD0B72FF2AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583192,"discussion_content":"新增新的维度统计和责任链没关系呀,策略比较适合这种场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659944522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2879424,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","nickname":"L先生","note":"","ucode":"D1E567ED3377CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551070,"discussion_content":"我也是这么想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644892592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339211,"discussion_content":"明白人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609563385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/38/118a890c.jpg","nickname":"anders","note":"","ucode":"610C80D742C331","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271080,"discussion_content":"简洁明了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590075881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167471,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1577831027,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"104657046131","product_id":100039001,"comment_content":"想了三点，希望和小伙伴们讨论一下：<br>1、RequestInfo save 一次写入一条。是否需要考虑通过设置参数，例如一次写入1000或10000条？好处不用频繁的与数据库建立连接。<br>2、聚合统计Aggregator是否可以考虑不写代码实现统计的逻辑，而是使用一条SQL查询实现同样的功能？<br>3、EmailReporter startDailyReport 没指定明确的统计起止时间。设置统计指定区间的request info，例如08:00~次日08:00，然后发邮件。","like_count":24,"discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112428,"discussion_content":"1:首先项目中应该使用数据库连接池，避免频繁的建立连接和销毁连接造成的开销; 等待批量保存也是一种好的思路，kafka就是这样的思路，但是这样做前提是数据量非常大，如果每秒中才几个请求，就没有必要这样实现增加复杂度\n2:如果直接写sql会造成扩展性不好，依赖于下面具体的数据库，可读性也很差","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1577862087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":114086,"discussion_content":"辣么大说SQL的意思应该是，把Aggregator实现为一个SQL语法解析执行器，可以通过SQL输入，解析指令，进行计算得到结果。而不是说的数据库。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577956569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112428,"ip_address":""},"score":114086,"extra":""},{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186573,"discussion_content":"嘿嘿我感觉你们俩都说的都很有道理，我觉得在体量不大的时候还是使用代码计算比较好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582693131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":114086,"ip_address":""},"score":186573,"extra":""}]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360666,"discussion_content":"Redis也有内置的聚合函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616501781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/d9/a90b2488.jpg","nickname":"learning","note":"","ucode":"14CE94C24F9C87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206670,"discussion_content":"目前存储用的redis，不涉及sql","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584426146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111131,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","nickname":"初八","note":"","ucode":"D40E15983BFAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132454,"discussion_content":"一定会用SQL存储？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578909474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1111131,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","nickname":"初八","note":"","ucode":"D40E15983BFAD6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132507,"discussion_content":"能列举几种不用sql的存储方式么？也让我们学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578913704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132454,"ip_address":""},"score":132507,"extra":""},{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":541867,"discussion_content":"Hbase，mongoDB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640587959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132507,"ip_address":""},"score":541867,"extra":""}]}]},{"had_liked":false,"id":167464,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1577810924,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"74592254956","product_id":100039001,"comment_content":"沙发！<br>1.栏主新年快乐。零点发帖，啧啧啧。<br>2.给出github地址吧，我们来提pr，一个学习用demo大家合力下就当练手，没必要自己死磕全实现哈。<br>3.关于邮件和控制台两个接入层。实现代码重了。可以把定时统计下沉到下一层来实现，然后两个接入层共用这个实现。然后收集的统计数据的类型应该可以提供差异化配置的api。在消费统计数据的消息时，做差异化分发，实现各接入层仅看到自己想看的数据。<br><br>4.spring1.x~3.x，兼容老版本做得挺好。springboot在自动装配的实现上下足了功夫（插件化，易插拔）。netty的实现也挺挺讲究，还能顺带学网络相关知识。以上其实都运用一系列设计原则。在没看栏主专栏前，我是啃这些学的场景。","like_count":17,"discussions":[{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112295,"discussion_content":"spring自动装配是做了三大区分，模式，模块，条件。说实话没认真去看spring，真不知道道行这么深","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577849615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112801,"discussion_content":"spring其实提供了各种编程泛式。用的话，代码风格可以更优雅，但也会和spring绑得比较紧，一旦跳票就容易殃及池鱼。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577883676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112295,"ip_address":""},"score":112801,"extra":""}]},{"author":{"id":1307611,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","nickname":"筱乐乐哦","note":"","ucode":"AE92539F0419C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116352,"discussion_content":"争哥给出github的地址了吗？没看有呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578060375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1307611,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","nickname":"筱乐乐哦","note":"","ucode":"AE92539F0419C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116381,"discussion_content":"没有啊，我也想知道。其实栏主代码都写了，整理下给个地址，方便阅读和参与，岂不美哉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578060838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":116352,"ip_address":""},"score":116381,"extra":""}]}]},{"had_liked":false,"id":253049,"user_name":"RedDevil","can_delete":false,"product_type":"c1","uid":1131128,"ip_address":"","ucode":"F8F5DC209BB3B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/78/7ba89c75.jpg","comment_is_top":false,"comment_ctime":1602578167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57437153015","product_id":100039001,"comment_content":"争哥一直在强调迭代思维，我也是最近才意识到这个，以前做事总认为第一遍就能搞定，不愿意去搞第二次甚至第N次，实际上反复迭代优化后的成果才更有深度","like_count":13},{"had_liked":false,"id":167786,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1577934492,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48822574748","product_id":100039001,"comment_content":"上面的代码设计与实现，我认为有两个重点是需要改进的：<br>1. 不同的统计规则，通过抽象统计规则抽象类，每一个具体的统计（最大时间，平均时间）单独实现，同时在 Aggregator 内中通过 List等容器保存所有的统计规则实现类，提供注册函数来动态添加新的统计规则，使得Aggregator否则开闭原则，各个统计规则也符合单一责任原则。<br>2. 显示方式很明显是一个变化点，需要抽象封装，抽象出 显示接口，在汇报类中通过依赖注入的方式来使用具体的显示类，这样一来，reporter类更加责任单一，我们也可以通过扩展新的显示类来扩展功能，符合开闭原则，每一个显示实现类更加否则单一责任。","like_count":11,"discussions":[{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113952,"discussion_content":"第一点，每个统计单独实现，势必要做多次便利，多次排序，而实际上只要分别做一次就行。这个怎么解决呢？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577943734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233193,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","nickname":"DFighting","note":"","ucode":"F3BA2426FF8582","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179850,"discussion_content":"我觉得统计规则应该是一个整体，单独抽象出来，那样势必会存在多种重复代码。而且，针对同一种数据源，统计的规则会有差异，但统计的结果，也就是显示结果应该都是那几个，所以可以将静态类抽象成一个借口，具体的统计方法实现可以根据业务逻辑做注入或者分批、并发来做统计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582256519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101226,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","nickname":"卫江","note":"","ucode":"DE2F7A6916F1A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114215,"discussion_content":"就像上面的实现，我们完全可以把 1 maxResponseTime，mixResponseTime，sum，tps放在一个响应时间统计规则类中 2 把99，999放在另一个类里面，也就是如果他们之间没有关联那就独立出来，如果有关联那就放在一起。这样一来一个类里面需要循环，另一个类里面需要排序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577964051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167899,"user_name":"Murrre","can_delete":false,"product_type":"c1","uid":1685995,"ip_address":"","ucode":"49644059B512BE","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","comment_is_top":false,"comment_ctime":1577960054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40232665718","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;murreIsCoding&#47;learning_geek&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;design_pattern&#47;demo2&#47;performance_monitoring<br>敲了一下，主要是实现了redis存储部分逻辑，redis命令不是很熟，可能有更好的方案","like_count":9},{"had_liked":false,"id":247676,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599791179,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35959529547","product_id":100039001,"comment_content":"哈哈，原来谷歌的工程师也是普通人，也不可能一上来就写出完美的代码。小步快跑、逐步迭代不仅是一种很好的产品模式，也是一种很好的开发模式，那些著名的开源库也是修修补补逐渐长大的。<br>最小原型也是一种给外界释放产出信号的有效手段，需求方的情绪得到安抚，写代码的时候自己也不会那么慌。","like_count":8,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588023,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663474295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167605,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1577875048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052711528","product_id":100039001,"comment_content":"争哥这套课程确实呕心沥血，哈哈","like_count":5},{"had_liked":false,"id":167540,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1577851538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052688018","product_id":100039001,"comment_content":"2020新年快乐 早上醒来第一件事就是听卖🍑者和看争哥的更新","like_count":5},{"had_liked":false,"id":201397,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1585762104,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18765631288","product_id":100039001,"comment_content":"数据聚合计算可不可以考虑和存储设计在一起呢？因为有第三方的存储本身就提供了一些聚合计算；当然我们把Aggreator注入到存储中，帮助存储类做聚合计算也是另外一种设计。不知这样设计是否合理，向各位请教，希望老师能够看到解惑。","like_count":4,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588024,"discussion_content":"好问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663474412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167805,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1577937483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462839371","product_id":100039001,"comment_content":"把老师的代码做了一个整理，试着运行了一下。<br>小伙伴们感兴趣的可以看一下：https:&#47;&#47;github.com&#47;Aaronyu29&#47;DesignPattern&#47;tree&#47;master&#47;src&#47;u026","like_count":3},{"had_liked":false,"id":167500,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1577845222,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14462747110","product_id":100039001,"comment_content":"因为我们项目统计数据较多，一般会写es，也会利用es的聚合功能。","like_count":3},{"had_liked":false,"id":180324,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1582256837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10172191429","product_id":100039001,"comment_content":"我觉得代码里的问题主要有两处：<br>1、统计类应该抽象成一个接口，相关统计函数的实现可以做依赖注入，也可以不做<br>2、数据的采集和存储不应该放在一起，因为这样势必会影响业务代码的响应时间，虽然存储类抽象成为了一个接口，并通过依赖注入的方式便于扩展，但从采集数据和存储应该是不同的层次的设计。前者很难做到不侵入业务代码（兼顾性能的前提下），而后者很难不做到和存储解耦，这两个放在一起，太不合适了","like_count":2},{"had_liked":false,"id":167755,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577928494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167863086","product_id":100039001,"comment_content":"要想实现非侵入的框架，需要AOP的思想","like_count":2},{"had_liked":false,"id":167734,"user_name":"哈喽沃德","can_delete":false,"product_type":"c1","uid":1749033,"ip_address":"","ucode":"7620366C16826B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/29/7ab573f4.jpg","comment_is_top":false,"comment_ctime":1577925808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167860400","product_id":100039001,"comment_content":"什么时候开始讲设计模式呢","like_count":2},{"had_liked":false,"id":167570,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1577863425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167798017","product_id":100039001,"comment_content":"赞，记录思考过程才是最真实的案例","like_count":2},{"had_liked":false,"id":167522,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1577847710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167782302","product_id":100039001,"comment_content":"新年快乐","like_count":2},{"had_liked":false,"id":252637,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1602414416,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5897381712","product_id":100039001,"comment_content":"不太明白为何 EmailReporter 与 ConsoleReporter，一个使用了 Timer，而另一个使用了 ScheduledExecutorService。实际上它们要实现的目的应该是一致的，为啥不统一用 ScheduledExecutorService？","like_count":1,"discussions":[{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377629,"discussion_content":"本来就是为了给大家展示不同的实现方式，结果问为啥不CV","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622733780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234693,"user_name":"Sic Pavis","can_delete":false,"product_type":"c1","uid":1106088,"ip_address":"","ucode":"48B5F0118347C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/a8/4e739cf6.jpg","comment_is_top":false,"comment_ctime":1594775203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889742499","product_id":100039001,"comment_content":"业务服务部署在一起的最好只有收集储存功能。<br>计算和展示独立部署一个微服务来完成。这样做有两个明显的好处：<br>1. 不太占用业务的cpu和内存资源，减少对业务的影响<br>2. 计算功能要修改或扩展时也无需在业务服务上进行迭代","like_count":1},{"had_liked":false,"id":182210,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582729299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877696595","product_id":100039001,"comment_content":"我想对那么大同学提出的三点观点进行一个简单的剖析<br>一.他说的是通过设置参数，然后一次写入1000条或者1万条数据层，我认为这个并不太合适,像Redis利用这样在内存中存储数据，交互的代价已经很低了，而且就算是设置参数，那还是要针对不同的实现方式,当然可以在实现类的构造函数中,加入这个写入参数<br>2. 利用一个sql来查询来实现相同功能，其实这个的话就是一种高耦合的思想了，而我的想法是多增加一个查询的接口，然后让不同的查询规则来实现这个接口类，然后在我们的查询工具类当中的构造函数，注入的这些实现类，从而进行相对应的查询，<br>对于第3点，制定统计时间啊，这个是可以有的，当然这也是我认为第2版或第3版就有必要去做到的功能","like_count":1},{"had_liked":false,"id":174967,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580483221,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875450517","product_id":100039001,"comment_content":"问题1，reporter可测性差的问题，可以mock storage，将request信息到map中。<br>&#47;&#47; mock<br>MetricsStorage storage = new MockRedisMetricsStorage();<br><br>问题2，reporter的创建过程可以使用简单工厂方法。Aggregator完全没有必要暴露出来，可以隐藏。<br>ConsoleReporter consoleReporter = ReporterFactory.createConsoleReporter(storage);<br><br>争哥的代码我复制下来，并且跟着重构了一下，想跑跑看的同学请参考：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u39<br>","like_count":1},{"had_liked":false,"id":169267,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1578302871,"is_pvip":true,"replies":[{"id":"65740","content":"😍","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578379507,"ip_address":"","comment_id":169267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873270167","product_id":100039001,"comment_content":"把落下的实战篇学习完了，还把老师的干货总结分享给了自己的小伙伴，都说赞","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480486,"discussion_content":"😍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168659,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1578133665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873100961","product_id":100039001,"comment_content":"涉及schedule的地方，可以使用java8的lambda来替换，更简洁点","like_count":1},{"had_liked":false,"id":168645,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1578130667,"is_pvip":false,"replies":[{"id":"65957","content":"能用基本类型就不要用包装类型~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578490077,"ip_address":"","comment_id":168645,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5873097963","product_id":100039001,"comment_content":"老师，请教个问题。类的定义里面，什么时候使用基本类型，什么时候用包装类型？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480279,"discussion_content":"能用基本类型就不要用包装类型~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578490077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444122,"avatar":"https://static001.geekbang.org/account/avatar/00/16/09/1a/e0f95684.jpg","nickname":"空空","note":"","ucode":"8F6EFE5A6F6F64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173106,"discussion_content":"不同意，还是要分情况看待，例如，Entity 类中的某个布尔型字段，建议用包装类，试想如果repository返回的该字段是null, 如果用boolean 接收会怎样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581830106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167674,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1577891753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872859049","product_id":100039001,"comment_content":"我觉得在使用方面需要优化，1,建议可以将使用哪个数据库存储方式，时间范围，使用邮箱还是命令行作为输出做成类似 spring 的可配置项，2,减少启动代码，最好使用一行或者注解就可以起到拦截请求并统计输出的作用。","like_count":1},{"had_liked":false,"id":167644,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1577885809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872853105","product_id":100039001,"comment_content":"打卡，今天又进步一点点，利用元旦的时间，将上一篇和这一篇的内容过了一遍，参照文章的思路使用代码简单实现了一遍，加深了理解。","like_count":1},{"had_liked":false,"id":167539,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1577851526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872818822","product_id":100039001,"comment_content":"RequestInfo.timestamp属性是接口响应的开始时间戳吗？如果是的话，说明我被Demo中的10234,11234这类数据给误导了","like_count":1},{"had_liked":false,"id":167538,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1577850884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872818180","product_id":100039001,"comment_content":"喜欢一小步一小步改进过程","like_count":1},{"had_liked":false,"id":167498,"user_name":"成葛格","can_delete":false,"product_type":"c1","uid":1030745,"ip_address":"","ucode":"A09A57D891FA50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/59/ffa298a2.jpg","comment_is_top":false,"comment_ctime":1577844943,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5872812239","product_id":100039001,"comment_content":"Jfinal 小而美，关注效率。","like_count":1,"discussions":[{"author":{"id":1031044,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/84/f11e9155.jpg","nickname":"豆奶","note":"","ucode":"BC0B20040B2F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113827,"discussion_content":"没感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357606,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1663474218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663474218","product_id":100039001,"comment_content":"将大段的产品需求说明拆分成小段的需求说明 -&gt; 将每个小段的需求说明中涉及到的实体通过类名进行替代说明（这一步骤其实是对上一个步骤的简单翻译） -&gt; 提取每个小段的需求中的共性部分提出出来，划分到一个类中（到这里每个类的功能大致已经划分出来了） -&gt; 开始写代码（这个过程中肯定还需要针对每个类的功能进行调整，原则是遵循各种设计原则）","like_count":0},{"had_liked":false,"id":332022,"user_name":"叶成勇","can_delete":false,"product_type":"c1","uid":2663781,"ip_address":"","ucode":"8D359ED202BE87","user_header":"","comment_is_top":false,"comment_ctime":1642987807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642987807","product_id":100039001,"comment_content":"两年后才来学这个专栏，会不会很落后啊？！","like_count":0},{"had_liked":false,"id":327987,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640434700,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640434700","product_id":100039001,"comment_content":"最不合理的地方是先从数据库中拉取数据，再计算得到统计数据，在数据量大的时候，这样做既占用大量内存，也不能利用数据库本身的索引做快速统计。有几个问题，看完了39、40节，也没有得到满意的答案：1. 用存储自带的统计能力（例如sql&#47;es查询）来做统计，是否更好？2. 这样做的话，sql&#47;es统计函数应该放Aggregator类，还是放在MetricsStorage子类里（和存储是绑定的）？3. 这种统计函数怎么单测？特别像es的统计语句，还是比较复杂的，容易出错。","like_count":0},{"had_liked":false,"id":325923,"user_name":"kougazhang","can_delete":false,"product_type":"c1","uid":1200650,"ip_address":"","ucode":"E9AD678FCEC75D","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","comment_is_top":false,"comment_ctime":1639234882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639234882","product_id":100039001,"comment_content":"对于 RequestInfo save 的问题，在 golang 中很好解决，专门搞一个 channel 来传递消息就好了。把 Info 信息发到一个专门的方法，这个方法来决定是流式写入或批量写入。","like_count":0},{"had_liked":false,"id":324006,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638254904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638254904","product_id":100039001,"comment_content":"我甚至在思考 redis用什么数据结构的组合 实现 这个接口的范围查询功能 ","like_count":0},{"had_liked":false,"id":323965,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638241724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638241724","product_id":100039001,"comment_content":"感觉存储的方式限定了 RequestInfo 虽然是接口编程但是还是依赖了具体的struct 个人感觉依赖接口然后调用特定的方法可不可以 个人的拙见","like_count":0},{"had_liked":false,"id":314154,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632880400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632880400","product_id":100039001,"comment_content":"原来自己做需求开发的难点，大佬们也会遇到，自己的习惯总是想好了再做，尽量做到完美的适配目前发现的业务，但是这就导致迟迟下不了手，不知道该如何开始，会想很久。今天的课程让我学会了释然，真罗马不是一天建成的，留有扩展，先简单实现，不断迭代优化。","like_count":0},{"had_liked":false,"id":309185,"user_name":"王堃","can_delete":false,"product_type":"c1","uid":1392963,"ip_address":"","ucode":"AA2C9A5B5FA9C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/43/0cd60af7.jpg","comment_is_top":false,"comment_ctime":1629972836,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1629972836","product_id":100039001,"comment_content":"为静态方法测试性差，老师能具体说明一下吗？","like_count":0},{"had_liked":false,"id":304315,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1627352839,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627352839","product_id":100039001,"comment_content":"List&lt;RequestInfo&gt; getRequestInfos(String apiName, long startTimeInMillis, long endTimeInMillis);  Map&lt;String, List&lt;RequestInfo&gt;&gt; getRequestInfos(long startTimeInMillis, long endTimeInMillis)<br>为何这里定义的这两个方法名称相同？不会发生冲突吗？功能有何不同？一个是查询某个apiname在某个时间段的信息， 另一个是查询所有apiname在某个时间段的信息？","like_count":0,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534597,"discussion_content":"java 重载 然后你说的没错 是这两个需求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638238736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302784,"user_name":"布拉姆","can_delete":false,"product_type":"c1","uid":1311125,"ip_address":"","ucode":"479FF27D73BCAD","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","comment_is_top":false,"comment_ctime":1626361974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626361974","product_id":100039001,"comment_content":"老师，<br>关于consoleReporter和emailReporter代码重复的问题， 我觉得是：<br>DRY包含实现逻辑重复（可接受）、功能语义重复、代码执行重复。这里我感觉这里是实现逻辑重复，严格来说可接受。因为consoleReporter和emailReporter是2件不同的事情？<br>","like_count":0},{"had_liked":false,"id":284862,"user_name":"CJJ","can_delete":false,"product_type":"c1","uid":1194060,"ip_address":"","ucode":"7E02A6A8547559","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","comment_is_top":false,"comment_ctime":1616501686,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1616501686","product_id":100039001,"comment_content":"2021年，继续努力加油！继续学习！","like_count":0},{"had_liked":false,"id":284796,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1616477098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616477098","product_id":100039001,"comment_content":"1.指标收集器是作为客户端SDK供其他服务使用的，而涉及聚合、展示、定时统计方面的能力则是分属在服务端的。<br>2.聚合相关也不应该在内存使用Java代码进行操作聚合，使用专业的引擎更合适。","like_count":0},{"had_liked":false,"id":271173,"user_name":"ben","can_delete":false,"product_type":"c1","uid":2097533,"ip_address":"","ucode":"3287431472A90C","user_header":"https://static001.geekbang.org/account/avatar/00/20/01/7d/36a82725.jpg","comment_is_top":false,"comment_ctime":1609432209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609432209","product_id":100039001,"comment_content":"新年快乐！希望和大家一起在2021年更进一步！","like_count":0},{"had_liked":false,"id":269651,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1608727094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608727094","product_id":100039001,"comment_content":"MetricsCollector：采集数据 ---&gt; MetricsStorage:存储元数据 -----&gt; XXXReporter:聚合统计<br>","like_count":0},{"had_liked":false,"id":263357,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606114149,"is_pvip":false,"replies":[{"id":"96100","content":"加油","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700782,"ip_address":"","comment_id":263357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606114149","product_id":100039001,"comment_content":"打卡：用Java实现了文中的完整案例。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510160,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260424,"user_name":"Geek_809561","can_delete":false,"product_type":"c1","uid":2037722,"ip_address":"","ucode":"94FA67AEFB6CA0","user_header":"","comment_is_top":false,"comment_ctime":1605002067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605002067","product_id":100039001,"comment_content":"我觉得Storage应该是一个单例吧。节省内存。并保证全局只有一个地方在存储数据和读取数据。并在这存储和读取的地方加上锁（为了多线程）。","like_count":0},{"had_liked":false,"id":254815,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1603191076,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603191076","product_id":100039001,"comment_content":"RequestStat 应该抽取出一个 formatter interface 满足<br>可以转换成 Json html 表格等格式 ，在 aggregator 中未来新增新的方法可以回传各种类有不同 attributes 的 statics 而不破坏 reporter 的代码","like_count":0},{"had_liked":false,"id":251903,"user_name":"李胖","can_delete":false,"product_type":"c1","uid":1173293,"ip_address":"","ucode":"1D0C0F10E240F3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e7/2d/c21fd3e3.jpg","comment_is_top":false,"comment_ctime":1601962619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601962619","product_id":100039001,"comment_content":"我的老天這篇太精華了","like_count":0},{"had_liked":false,"id":251346,"user_name":"Geek_558387","can_delete":false,"product_type":"c1","uid":1617369,"ip_address":"","ucode":"2EA857EBC365B5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","comment_is_top":false,"comment_ctime":1601473621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601473621","product_id":100039001,"comment_content":"看来最主要还是得临摹啊, 这些看多了也都没感觉到有啥实际用处啊","like_count":0},{"had_liked":false,"id":250103,"user_name":"平行线","can_delete":false,"product_type":"c1","uid":1714287,"ip_address":"","ucode":"033F8BA2D1470E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/28/6f/e430eaaa.jpg","comment_is_top":false,"comment_ctime":1600935943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600935943","product_id":100039001,"comment_content":"MetricsCollector 是怎么采集数据的呢？recordRequest方法只是存储数据啊","like_count":0},{"had_liked":false,"id":246726,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599465654,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599465654","product_id":100039001,"comment_content":"问题一：<br>1、Aggregator、Reporter的变化扩展<br>2、定时调度类剥离<br>问题二：<br>扩展性，在使用框架的时候可以很方便地在主流程外进行各种扩展","like_count":0},{"had_liked":false,"id":242963,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1597905742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597905742","product_id":100039001,"comment_content":"指标统计最好下沉的DB层面，而不是在业务层面做聚合，数据量的情况下有可能算不出来<br><br>这两节内容最大的体会是在做软件设计层面，这才是体现程序员技术能力与成色的地方，沉淀个人的方法论很重要","like_count":0},{"had_liked":false,"id":240545,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596968331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596968331","product_id":100039001,"comment_content":"和业务的耦合度过高，应该使用aop等机制，将非业务代码隔离开来","like_count":0},{"had_liked":false,"id":240098,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1596761970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596761970","product_id":100039001,"comment_content":"再回顾，感觉真是绝了","like_count":0},{"had_liked":false,"id":235209,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1594944801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594944801","product_id":100039001,"comment_content":"我猜下，这种用责任链模式会不会好些？？","like_count":0},{"had_liked":false,"id":227253,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1592326346,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1592326346","product_id":100039001,"comment_content":"1、显示部分不稳定变化频繁，可以把显示部分和数据整合拆分<br>2、统计规则也会多种多样，后续肯定会增加统计规则。应该把重新设计统计类，实现不同的统计规则。没次添加新统计规则，只需要交给上帝类就可以实现新的统计。<br>3、易用性方面，统计代码明显的侵入业务代码。可用aop实现相应注解提高易用性。","like_count":0},{"had_liked":false,"id":223088,"user_name":"thinkmore","can_delete":false,"product_type":"c1","uid":1137647,"ip_address":"","ucode":"8FC3414685165C","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/ef/ab462610.jpg","comment_is_top":false,"comment_ctime":1590999126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590999126","product_id":100039001,"comment_content":"putIfAbsent方法会跑出空指针，应该使用computeIfAbsent","like_count":0},{"had_liked":false,"id":219007,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589932413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589932413","product_id":100039001,"comment_content":"突然理解了Java有用数据与方法分离的贫血模型的原因，因为接口是一组方法，只能注入方法，无法注入实体，若用充血模型，把repository层的entity注入到service层，service层看不到entity的属性，只能看到entity的方法，所以entity要在service层初始化后传入自己的方法中。","like_count":0},{"had_liked":false,"id":214908,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1588846334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588846334","product_id":100039001,"comment_content":"【设计模式笔记26】20200507<br>最重要得两句话：<br>1、开发新产品遵循最小产品原则，逐步迭代<br>2、面向对象设计与实现本质上就是把合适的代码放到合适的类中<br>最近开发新产品，对这两点深有体会，之所以要遵循最小产品原则是因为快速验证快速失败快速迭代。前期的设计要多想想有哪些流程是可以优化的，不要陷入眼前的定势中，把自己当作一个旁观者，审视面前的设计。简单滴说即使第一遍看上去设计没问题，你也要想想：难道真的没有问题了么？带着这种思考往往能发现问题。","like_count":0},{"had_liked":false,"id":204684,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1586442054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586442054","product_id":100039001,"comment_content":"1.采集和存储应该分开，采集后的数据最好通过message queue发到存储模块进行存储<br>2.聚合器的聚合类型应该更灵活，允许用户自行添加聚合方式<br>3.定时器可以优化，做到动态配置<br>4.需要通知用户的也应该可配置","like_count":0},{"had_liked":false,"id":204539,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1586418543,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586418543","product_id":100039001,"comment_content":"不说了，我这就重构代码去","like_count":0},{"had_liked":false,"id":204513,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1586413520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586413520","product_id":100039001,"comment_content":"排序那一块代码可以借助已有工具简化为：<br>requestInfos.sort(Comparator.comparingDouble(RequestInfo::getResponseTime))","like_count":0},{"had_liked":false,"id":201188,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585730488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585730488","product_id":100039001,"comment_content":"我觉得aggregator可以设计为一个接口，里面只包含excute()操作，加，减，最大，最小把它看作一种策略，用策略模式或者工厂模式，上层需要作何操作，我就给创建该操作的对象去处理，有利于以后的扩展，而reported可以抽取公共的东西，面向抽象，您觉得呢","like_count":0},{"had_liked":false,"id":197359,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1585371153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585371153","product_id":100039001,"comment_content":"这里的 Timer 每日上报任务逻辑有点啰嗦且重复，可以考虑抽象类的方式抽象出来，利用控制反转，声明一个任务执行方法，然具体的类实现这个方法，仅需写邮件上报和console上报的逻辑即可","like_count":0},{"had_liked":false,"id":193240,"user_name":"秋风画扇","can_delete":false,"product_type":"c1","uid":1132356,"ip_address":"","ucode":"5BCBC1422C51EC","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/44/964aa665.jpg","comment_is_top":false,"comment_ctime":1584886651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584886651","product_id":100039001,"comment_content":"这里的方法还是可以再拆分的，这么长看起来费劲、不容易维护。难以应对变化~","like_count":0},{"had_liked":false,"id":182743,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582858712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582858712","product_id":100039001,"comment_content":"不知道老师后面有没有针对某个开源框架做剖析和讲解，比如比较简单的Junit单元测试框架，这样可能效果会更好","like_count":0},{"had_liked":false,"id":180285,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1582248867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582248867","product_id":100039001,"comment_content":"ConsoleReporter EmailReporter  这两个类的类名和职责不统一。从字面意思更像是负责显示的类。可以抽象出一个Reporter类。该类提供了基本的代码框架，通过builder模式将负责存储，统计，展示的类注入进来。也可以抽象出一个AbstractReporter类，提供一个负责展示是的抽象方法。ConsoleReporter EmailReporter  集成这个抽象类并实现各自的展示方法。我个人更倾向于第一种。<br>统计方面可以采用sql语句的形式来暴露给用户使用。因为我觉得产品最终的形式是要有一个web界面供用户配置各种规则的。采用sql的方式可以减少使用者的心智负担，也可以大大缩短开发人员的开发时间","like_count":0},{"had_liked":false,"id":178705,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1581781394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581781394","product_id":100039001,"comment_content":"Aggregator#aggregate()应该把各项统计指标分散到单一方法中，满足单一职责原则。<br>EmailReporter中的Timer类应该修改为ScheduledExecutorService#scheduleAtFixedRate()方法。后者有各种优势。<br>应该新增定时任务类，统一管理定时触发的任务，而不应该分散到Reporter类，Reporter应该只负责输出即可。<br><br>最近在看Spring框架，注释很清晰，面向接口开发，应用各种设计模式，扩展性非常好。AbstractApplicationContext#refresh()串联流程，具体职责分散到各个方法中处理，满足单一职责原则。","like_count":0},{"had_liked":false,"id":177593,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1581430551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581430551","product_id":100039001,"comment_content":"hutool这个开源项目是一个Java的工具类，大而全，把平常开发中会用到的工具几乎都集成了，用起来的感觉真的很方便","like_count":0},{"had_liked":false,"id":175858,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1580871632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580871632","product_id":100039001,"comment_content":"关于 MetricsStorage 有可能导致 JVM OOM 的问题，可以使用分治的算法思想（Divide and Conquer）对半统计再合并","like_count":0},{"had_liked":false,"id":174979,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1580485865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580485865","product_id":100039001,"comment_content":"优秀的代码，都是重构出来的，深有体会。","like_count":0},{"had_liked":false,"id":172181,"user_name":"Nan","can_delete":false,"product_type":"c1","uid":1236569,"ip_address":"","ucode":"A3DEC678BF814D","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/59/ceea56a9.jpg","comment_is_top":false,"comment_ctime":1579102281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579102281","product_id":100039001,"comment_content":"对于实战的一个整体回顾思考<br>功能性需求设计和实现上，可以采用快速迭代的方式。有了场景，也就有了着力点。在这里更多适合的有单一原则，依赖注入，封装抽象，基于接口而非实现等。<br>非功能性需求设计和实现，更多的是通过 review 整个代码结构，来参照对比是否符合设计原则和思想。在这里更多的可以是开闭原则，依赖反转等。<br><br>随着开发经验和知识的积累，我们可以在一开始需求设计时就自然的考虑到了适合的设计原则。在系统框架设计中，对于模块划分就能够更加清晰，减少后期重构量。","like_count":0},{"had_liked":false,"id":171996,"user_name":"intomymind","can_delete":false,"product_type":"c1","uid":1105126,"ip_address":"","ucode":"B954C9BFEC8667","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/e6/cfb409ab.jpg","comment_is_top":false,"comment_ctime":1579065479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579065479","product_id":100039001,"comment_content":"Reporter的实现类可能会有很多种，有些场景用的是邮件，有的场景可能只用控制台就行，所以这块应该用配置或者用SPI机制来进行扩展, 不会每次变动都更改代码","like_count":0},{"had_liked":false,"id":171367,"user_name":"初八","can_delete":false,"product_type":"c1","uid":1111131,"ip_address":"","ucode":"D40E15983BFAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","comment_is_top":false,"comment_ctime":1578909518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578909518","product_id":100039001,"comment_content":"我想说分布式情况下这些定时任务还要依赖外部吗","like_count":0},{"had_liked":false,"id":171186,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1578878668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578878668","product_id":100039001,"comment_content":"打卡<br>针对非业务的架构实现方式<br>一、小步快跑、逐步迭代<br>现在原型的分析基础上，划分功能模块，根据功能模块，先定义V1版本的功能<br>二、面向对象设计和分析<br>根据功能模块，定义类的属性和方法、以及类与类之间的关系。<br>1、划分职责，识别出有哪些类<br>2、定义类的属性、方法，以及类和类之间的关系<br>3、将类组装起来，提供入口<br>识别出核心的类之后，可以在IDE中创建好几个类（可能会有数据类型的辅助类等），然后尝试着定义属性和方法。<br>在设计时，使用单一职责原则、开闭原则、依赖注入、KISS原则、DRY原则、迪米特法则、里式替换原则，以及是否基于接口而非实现编程思想，代码是否高内聚、低耦合，是否可以抽象出可复用的代码等设计原则和思想来审视设计是否合理。<br><br>三、Review 设计与实现<br>使用SOLID、KISS、DRY、YAGNI、LOD 等设计原则，基于接口而非实现编程、多用组合少用继承、高内聚低耦合等设计思想，review类的设计和实现，有需要改进的地方，放到V2、V3版本中持续演进。","like_count":0},{"had_liked":false,"id":170827,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578732471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578732471","product_id":100039001,"comment_content":"Aggregator中可以将之前的一个方法拆分成几个独立的方法，比如count()、max()、min()等，调用者可以自由选择调用组装，如果有某几个方法经常要用到的话，可以将几个方法统一封装起来，一次返回结果。","like_count":0},{"had_liked":false,"id":170825,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578732120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578732120","product_id":100039001,"comment_content":"学到现在，感觉专栏具体的内容记不太住，倒是一写代码就想着怎么利用一些设计原则来达到可扩展，可复用的目的。","like_count":0},{"had_liked":false,"id":170636,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1578648089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578648089","product_id":100039001,"comment_content":"看之前的的内容，觉得自己都懂了。再次去翻阅，有些章节很陌生。不确定自己是否真的掌握。老师再阐述开发思想，设计过程。顺着这个过程确实能懂。读者若是没有自己的理解和概括加上读书笔记的输出，很容易囫囵吞枣。","like_count":0},{"had_liked":false,"id":169922,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1578473804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578473804","product_id":100039001,"comment_content":"如果获取数据或者统计计算很耗时,会直接拖累循环调度模块.同时展示输出模块可以进行异步处理,增强循环调度处理模块的低延时.感觉k8s的控制器和operator对资源的循环调度处理设计的很好,通过充分解耦,增强循环调度的低延时快速响应.","like_count":0},{"had_liked":false,"id":169357,"user_name":"牛顿的烈焰激光剑","can_delete":false,"product_type":"c1","uid":1042022,"ip_address":"","ucode":"C57018C65DAFB3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/66/fbbf0bb1.jpg","comment_is_top":false,"comment_ctime":1578321519,"is_pvip":false,"replies":[{"id":"65738","content":"不用的哦，你觉得为啥要while循环呢？只是一个demo而已的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578379431,"ip_address":"","comment_id":169357,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578321519","product_id":100039001,"comment_content":"Demo.java 里应该用`while(true);`包裹所有代码吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480523,"discussion_content":"不用的哦，你觉得为啥要while循环呢？只是一个demo而已的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676064,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/20/da7c92a1.jpg","nickname":"鱼鱼鱼","note":"","ucode":"3B55D9861FCE6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126770,"discussion_content":"兄弟是学硬件的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578536734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169192,"user_name":"Lyre","can_delete":false,"product_type":"c1","uid":1275759,"ip_address":"","ucode":"61AB16508AFFDA","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/6f/454951d2.jpg","comment_is_top":false,"comment_ctime":1578289565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578289565","product_id":100039001,"comment_content":"一次性拉取大量数据到内存中，还是要遍历去计算各个接口的单独的耗时等，所以是不是不应该关注拉取数据的区间，应该关注整个计算过程的性能。","like_count":0},{"had_liked":false,"id":169001,"user_name":"蓝天","can_delete":false,"product_type":"c1","uid":1023233,"ip_address":"","ucode":"3846830C97D97A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/01/23306c79.jpg","comment_is_top":false,"comment_ctime":1578235698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578235698","product_id":100039001,"comment_content":"dubbo的扩展性很好，基于对spi机制的扩展","like_count":0},{"had_liked":false,"id":168625,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1578125366,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1578125366","product_id":100039001,"comment_content":"后续的拓展统计数据为了实现可拓展性，是不是可以如下设计:在统计的接口中支持注入用户自定义的统计方式，返回结果增加一个Map&lt;&lt; String, Object &gt; 存储用户自定义统计结果！当然对于公共的统计项可以拆成一个个的IRule,基础的统计类中直接加载该接口实现类，进行统计处理。","like_count":0},{"had_liked":false,"id":167881,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1577957207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577957207","product_id":100039001,"comment_content":"课堂讨论Answer:<br><br><br><br>对于今天的设计与代码实现，你有没有发现哪些不合理的地方？有哪些可以继续优化的地方呢？或者留言说说你的设计方案。<br><br><br><br>Aggregator类的问题较大.它不符合开闭原则.<br><br><br><br>说一个你觉得不错的开源框架或者项目，聊聊你为什么觉得它不错？<br><br>https:&#47;&#47;github.com&#47;square&#47;retrofit<br><br>反射与动态代理的典范.","like_count":0},{"had_liked":false,"id":167863,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1577953335,"is_pvip":true,"replies":[{"id":"65166","content":"自己画画？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577955391,"ip_address":"","comment_id":167863,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1577953335","product_id":100039001,"comment_content":"可否提供下类图，整体上看着更方便。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480028,"discussion_content":"自己画画？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577955391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456955,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3b/3b/b8c00291.jpg","nickname":"Uncle.Wang","note":"","ucode":"9A4F646CFC237F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117540,"discussion_content":"评论区能上传图片就好了，学员画类图，老师点评","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578125953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167833,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1577946615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577946615","product_id":100039001,"comment_content":"1、今天的代码没有做容错处理；代码的效率问题也没有优化，比如争哥在文章里所提到得一次取太长数据导致内存占用过高，还有代码中收集和存储采用同步方式，也会影响到性能","like_count":0},{"had_liked":false,"id":167826,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1577945191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577945191","product_id":100039001,"comment_content":"打卡，加油，2020坚持！","like_count":0},{"had_liked":false,"id":167776,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1577932804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577932804","product_id":100039001,"comment_content":"1.简单用过prometheus 对比 prometheus提出一个小问题 <br>拉取数据的时候需要分项目 用户需要观看一个项目的中的多个数据项，所以拉取数据接口确实一个分组参数<br>2.目前没有看过源码，不好做出评价。如果非要说的话golang的标准库的设计是非常优秀的。哈哈哈这是一句废话","like_count":0},{"had_liked":false,"id":167752,"user_name":"SolaT.yolo","can_delete":false,"product_type":"c1","uid":1234508,"ip_address":"","ucode":"BF5B8E6883688C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/4c/9d3b72af.jpg","comment_is_top":false,"comment_ctime":1577927556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577927556","product_id":100039001,"comment_content":"新年快乐，持续学习","like_count":0},{"had_liked":false,"id":167673,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577891593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577891593","product_id":100039001,"comment_content":"新年快乐，课后讨论的问题争哥在文里也支出了一些，这个框架随着慢慢迭代，可以做的更通用一些。<br>比如:<br>1. 采集数据的标准可以开放给使用者，使用者自定义提取规则。<br>2. 统计逻辑(算法)可以分类，作为功能包供使用者选择。<br>3. 展示诉求，可以对外提供json数据开放给使用者个性化展示在自己系统，也可以产品化输出mail，web等友好的可视化产品。 ","like_count":0},{"had_liked":false,"id":167601,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1577874307,"is_pvip":false,"replies":[{"id":"65095","content":"后面有讲到 别急","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577932031,"ip_address":"","comment_id":167601,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1577874307","product_id":100039001,"comment_content":"对于获取大量数据在内存有可能把内存撑爆的问题，有什么好的解法吗？前段时间系统也遇到这个问题了，最后扩大了内存，有没有通过代码上来解决的方案呢？欢迎小伙伴和老师的指教。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479913,"discussion_content":"后面有讲到 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577932031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133654,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/56/32408a78.jpg","nickname":"肖恩😏桂桂","note":"","ucode":"F50CE07CD4F59F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355418,"discussion_content":"这里不是应该做分页吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615429014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq65BWyJb39rq0Qgx1fnELVSZGGuLY6oBmYcmFj2Oqy9iauAWfbqO5U63I22Uo1POrrTp7tFWXibxvg/132","nickname":"zyl","note":"","ucode":"2F872341AC8D7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115503,"discussion_content":"备忘录离线存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578016684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq65BWyJb39rq0Qgx1fnELVSZGGuLY6oBmYcmFj2Oqy9iauAWfbqO5U63I22Uo1POrrTp7tFWXibxvg/132","nickname":"zyl","note":"","ucode":"2F872341AC8D7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116091,"discussion_content":"一小部分一小部分持久化到磁盘吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578053273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":115503,"ip_address":""},"score":116091,"extra":""}]}]},{"had_liked":false,"id":167591,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1577869816,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577869816","product_id":100039001,"comment_content":"除了文中提到的那些，感觉MetricsCollector的recordRequest从性能角度来讲不是很好，需要多次和storage建立连接，如果storage是RDBMS，那性能会很差，可以批量记录。但是这个从设计角度来讲也没什么毛病，并不违背SOLID、KISS、DRY、YAGNI、LOD这些原则。","like_count":0},{"had_liked":false,"id":167579,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1577867215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577867215","product_id":100039001,"comment_content":"先做一版简单的接口记录器<br>一个负责记录信息的接口：保持接口信息的用接口实现类，防止以后再使用其他的数据库保存，之后将数据从库中取出、计算一个类、发送用接口实现 不同的类进行发布、一个类负责计算统计接口在某个时间段之间的信息，最后再整一个定时任务类，这样就清晰了吧","like_count":0},{"had_liked":false,"id":167573,"user_name":"李朝辉","can_delete":false,"product_type":"c1","uid":1152951,"ip_address":"","ucode":"8E4A4469A77A88","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/b7/d5a83264.jpg","comment_is_top":false,"comment_ctime":1577864317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577864317","product_id":100039001,"comment_content":"1. 建议改进之处 <br>1.1. 数据存取参照spring的repository；<br>1.2. 定时触发应更加灵活，通过配置的方式改变定时策略；<br>1.3. 输出的部分抽象接口，面向不同的前端时，实现接口即可<br>2. Spring<br>生态丰富，spring boot配置灵活","like_count":0},{"had_liked":false,"id":167460,"user_name":"李现教你学编程","can_delete":false,"product_type":"c1","uid":1218097,"ip_address":"","ucode":"DAF84386D0F30F","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/31/f13e6869.jpg","comment_is_top":false,"comment_ctime":1577809870,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"216326174670","product_id":100039001,"comment_content":"新年快乐 一起学习 一起提高 2020","like_count":50},{"had_liked":false,"id":167779,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1577933064,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"212031330568","product_id":100039001,"comment_content":"要写出优美的代码，首先要有一颗对丑陋代码厌恶的心","like_count":49,"discussions":[{"author":{"id":1024164,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","nickname":"阿斯蒂芬","note":"","ucode":"61D5E3BDA4EBC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575768,"discussion_content":"构建应用本地的内存缓存，是否会破坏无状态，我觉得还是得考虑业务对于在应用多实例的情况下，是否接受缓存不一致的影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655100441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167757,"user_name":"何沛","can_delete":false,"product_type":"c1","uid":1477145,"ip_address":"","ucode":"5673C580982710","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/19/a54761af.jpg","comment_is_top":false,"comment_ctime":1577928823,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"117542045815","product_id":100039001,"comment_content":"Aggregator考虑到后期新增新的维度统计，可以考虑使用责任链模式。<br>ConsoleReporter、EmailReporter 出现了代码复用，可以用模板设计模式。","like_count":28,"discussions":[{"author":{"id":1234963,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","nickname":"昵称C","note":"","ucode":"1BB2D537942DC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385994,"discussion_content":"Aggregator应该是使用策略模式进行不同方案的统计","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627374919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1924882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aXnFBB3XD3lwB3jf1A0PQqT66aJy4yycbRupJI3ia2CUFMuLsvYthM41TDopIIjL8kz7k2xE5vrAtQggQ6Jt8Zw/132","nickname":"付磊","note":"","ucode":"719BD0B72FF2AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583192,"discussion_content":"新增新的维度统计和责任链没关系呀,策略比较适合这种场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659944522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2879424,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","nickname":"L先生","note":"","ucode":"D1E567ED3377CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551070,"discussion_content":"我也是这么想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644892592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339211,"discussion_content":"明白人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609563385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/38/118a890c.jpg","nickname":"anders","note":"","ucode":"610C80D742C331","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271080,"discussion_content":"简洁明了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590075881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167471,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1577831027,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"104657046131","product_id":100039001,"comment_content":"想了三点，希望和小伙伴们讨论一下：<br>1、RequestInfo save 一次写入一条。是否需要考虑通过设置参数，例如一次写入1000或10000条？好处不用频繁的与数据库建立连接。<br>2、聚合统计Aggregator是否可以考虑不写代码实现统计的逻辑，而是使用一条SQL查询实现同样的功能？<br>3、EmailReporter startDailyReport 没指定明确的统计起止时间。设置统计指定区间的request info，例如08:00~次日08:00，然后发邮件。","like_count":24,"discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112428,"discussion_content":"1:首先项目中应该使用数据库连接池，避免频繁的建立连接和销毁连接造成的开销; 等待批量保存也是一种好的思路，kafka就是这样的思路，但是这样做前提是数据量非常大，如果每秒中才几个请求，就没有必要这样实现增加复杂度\n2:如果直接写sql会造成扩展性不好，依赖于下面具体的数据库，可读性也很差","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1577862087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":114086,"discussion_content":"辣么大说SQL的意思应该是，把Aggregator实现为一个SQL语法解析执行器，可以通过SQL输入，解析指令，进行计算得到结果。而不是说的数据库。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577956569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112428,"ip_address":""},"score":114086,"extra":""},{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186573,"discussion_content":"嘿嘿我感觉你们俩都说的都很有道理，我觉得在体量不大的时候还是使用代码计算比较好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582693131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":114086,"ip_address":""},"score":186573,"extra":""}]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360666,"discussion_content":"Redis也有内置的聚合函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616501781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/d9/a90b2488.jpg","nickname":"learning","note":"","ucode":"14CE94C24F9C87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206670,"discussion_content":"目前存储用的redis，不涉及sql","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584426146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111131,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","nickname":"初八","note":"","ucode":"D40E15983BFAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132454,"discussion_content":"一定会用SQL存储？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578909474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1111131,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","nickname":"初八","note":"","ucode":"D40E15983BFAD6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132507,"discussion_content":"能列举几种不用sql的存储方式么？也让我们学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578913704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132454,"ip_address":""},"score":132507,"extra":""},{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":541867,"discussion_content":"Hbase，mongoDB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640587959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132507,"ip_address":""},"score":541867,"extra":""}]}]},{"had_liked":false,"id":167464,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1577810924,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"74592254956","product_id":100039001,"comment_content":"沙发！<br>1.栏主新年快乐。零点发帖，啧啧啧。<br>2.给出github地址吧，我们来提pr，一个学习用demo大家合力下就当练手，没必要自己死磕全实现哈。<br>3.关于邮件和控制台两个接入层。实现代码重了。可以把定时统计下沉到下一层来实现，然后两个接入层共用这个实现。然后收集的统计数据的类型应该可以提供差异化配置的api。在消费统计数据的消息时，做差异化分发，实现各接入层仅看到自己想看的数据。<br><br>4.spring1.x~3.x，兼容老版本做得挺好。springboot在自动装配的实现上下足了功夫（插件化，易插拔）。netty的实现也挺挺讲究，还能顺带学网络相关知识。以上其实都运用一系列设计原则。在没看栏主专栏前，我是啃这些学的场景。","like_count":17,"discussions":[{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112295,"discussion_content":"spring自动装配是做了三大区分，模式，模块，条件。说实话没认真去看spring，真不知道道行这么深","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577849615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112801,"discussion_content":"spring其实提供了各种编程泛式。用的话，代码风格可以更优雅，但也会和spring绑得比较紧，一旦跳票就容易殃及池鱼。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577883676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112295,"ip_address":""},"score":112801,"extra":""}]},{"author":{"id":1307611,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","nickname":"筱乐乐哦","note":"","ucode":"AE92539F0419C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116352,"discussion_content":"争哥给出github的地址了吗？没看有呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578060375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1307611,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","nickname":"筱乐乐哦","note":"","ucode":"AE92539F0419C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116381,"discussion_content":"没有啊，我也想知道。其实栏主代码都写了，整理下给个地址，方便阅读和参与，岂不美哉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578060838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":116352,"ip_address":""},"score":116381,"extra":""}]}]},{"had_liked":false,"id":253049,"user_name":"RedDevil","can_delete":false,"product_type":"c1","uid":1131128,"ip_address":"","ucode":"F8F5DC209BB3B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/78/7ba89c75.jpg","comment_is_top":false,"comment_ctime":1602578167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57437153015","product_id":100039001,"comment_content":"争哥一直在强调迭代思维，我也是最近才意识到这个，以前做事总认为第一遍就能搞定，不愿意去搞第二次甚至第N次，实际上反复迭代优化后的成果才更有深度","like_count":13},{"had_liked":false,"id":167786,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1577934492,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48822574748","product_id":100039001,"comment_content":"上面的代码设计与实现，我认为有两个重点是需要改进的：<br>1. 不同的统计规则，通过抽象统计规则抽象类，每一个具体的统计（最大时间，平均时间）单独实现，同时在 Aggregator 内中通过 List等容器保存所有的统计规则实现类，提供注册函数来动态添加新的统计规则，使得Aggregator否则开闭原则，各个统计规则也符合单一责任原则。<br>2. 显示方式很明显是一个变化点，需要抽象封装，抽象出 显示接口，在汇报类中通过依赖注入的方式来使用具体的显示类，这样一来，reporter类更加责任单一，我们也可以通过扩展新的显示类来扩展功能，符合开闭原则，每一个显示实现类更加否则单一责任。","like_count":11,"discussions":[{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113952,"discussion_content":"第一点，每个统计单独实现，势必要做多次便利，多次排序，而实际上只要分别做一次就行。这个怎么解决呢？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577943734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233193,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","nickname":"DFighting","note":"","ucode":"F3BA2426FF8582","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179850,"discussion_content":"我觉得统计规则应该是一个整体，单独抽象出来，那样势必会存在多种重复代码。而且，针对同一种数据源，统计的规则会有差异，但统计的结果，也就是显示结果应该都是那几个，所以可以将静态类抽象成一个借口，具体的统计方法实现可以根据业务逻辑做注入或者分批、并发来做统计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582256519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101226,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","nickname":"卫江","note":"","ucode":"DE2F7A6916F1A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114215,"discussion_content":"就像上面的实现，我们完全可以把 1 maxResponseTime，mixResponseTime，sum，tps放在一个响应时间统计规则类中 2 把99，999放在另一个类里面，也就是如果他们之间没有关联那就独立出来，如果有关联那就放在一起。这样一来一个类里面需要循环，另一个类里面需要排序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577964051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167899,"user_name":"Murrre","can_delete":false,"product_type":"c1","uid":1685995,"ip_address":"","ucode":"49644059B512BE","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","comment_is_top":false,"comment_ctime":1577960054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40232665718","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;murreIsCoding&#47;learning_geek&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;design_pattern&#47;demo2&#47;performance_monitoring<br>敲了一下，主要是实现了redis存储部分逻辑，redis命令不是很熟，可能有更好的方案","like_count":9},{"had_liked":false,"id":247676,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599791179,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35959529547","product_id":100039001,"comment_content":"哈哈，原来谷歌的工程师也是普通人，也不可能一上来就写出完美的代码。小步快跑、逐步迭代不仅是一种很好的产品模式，也是一种很好的开发模式，那些著名的开源库也是修修补补逐渐长大的。<br>最小原型也是一种给外界释放产出信号的有效手段，需求方的情绪得到安抚，写代码的时候自己也不会那么慌。","like_count":8,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588023,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663474295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167605,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1577875048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052711528","product_id":100039001,"comment_content":"争哥这套课程确实呕心沥血，哈哈","like_count":5},{"had_liked":false,"id":167540,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1577851538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23052688018","product_id":100039001,"comment_content":"2020新年快乐 早上醒来第一件事就是听卖🍑者和看争哥的更新","like_count":5},{"had_liked":false,"id":201397,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1585762104,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18765631288","product_id":100039001,"comment_content":"数据聚合计算可不可以考虑和存储设计在一起呢？因为有第三方的存储本身就提供了一些聚合计算；当然我们把Aggreator注入到存储中，帮助存储类做聚合计算也是另外一种设计。不知这样设计是否合理，向各位请教，希望老师能够看到解惑。","like_count":4,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588024,"discussion_content":"好问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663474412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167805,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1577937483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462839371","product_id":100039001,"comment_content":"把老师的代码做了一个整理，试着运行了一下。<br>小伙伴们感兴趣的可以看一下：https:&#47;&#47;github.com&#47;Aaronyu29&#47;DesignPattern&#47;tree&#47;master&#47;src&#47;u026","like_count":3},{"had_liked":false,"id":167500,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1577845222,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14462747110","product_id":100039001,"comment_content":"因为我们项目统计数据较多，一般会写es，也会利用es的聚合功能。","like_count":3},{"had_liked":false,"id":180324,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1582256837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10172191429","product_id":100039001,"comment_content":"我觉得代码里的问题主要有两处：<br>1、统计类应该抽象成一个接口，相关统计函数的实现可以做依赖注入，也可以不做<br>2、数据的采集和存储不应该放在一起，因为这样势必会影响业务代码的响应时间，虽然存储类抽象成为了一个接口，并通过依赖注入的方式便于扩展，但从采集数据和存储应该是不同的层次的设计。前者很难做到不侵入业务代码（兼顾性能的前提下），而后者很难不做到和存储解耦，这两个放在一起，太不合适了","like_count":2},{"had_liked":false,"id":167755,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577928494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167863086","product_id":100039001,"comment_content":"要想实现非侵入的框架，需要AOP的思想","like_count":2},{"had_liked":false,"id":167734,"user_name":"哈喽沃德","can_delete":false,"product_type":"c1","uid":1749033,"ip_address":"","ucode":"7620366C16826B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/29/7ab573f4.jpg","comment_is_top":false,"comment_ctime":1577925808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167860400","product_id":100039001,"comment_content":"什么时候开始讲设计模式呢","like_count":2},{"had_liked":false,"id":167570,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1577863425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167798017","product_id":100039001,"comment_content":"赞，记录思考过程才是最真实的案例","like_count":2},{"had_liked":false,"id":167522,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1577847710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167782302","product_id":100039001,"comment_content":"新年快乐","like_count":2},{"had_liked":false,"id":252637,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1602414416,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5897381712","product_id":100039001,"comment_content":"不太明白为何 EmailReporter 与 ConsoleReporter，一个使用了 Timer，而另一个使用了 ScheduledExecutorService。实际上它们要实现的目的应该是一致的，为啥不统一用 ScheduledExecutorService？","like_count":1,"discussions":[{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377629,"discussion_content":"本来就是为了给大家展示不同的实现方式，结果问为啥不CV","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622733780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234693,"user_name":"Sic Pavis","can_delete":false,"product_type":"c1","uid":1106088,"ip_address":"","ucode":"48B5F0118347C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/a8/4e739cf6.jpg","comment_is_top":false,"comment_ctime":1594775203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889742499","product_id":100039001,"comment_content":"业务服务部署在一起的最好只有收集储存功能。<br>计算和展示独立部署一个微服务来完成。这样做有两个明显的好处：<br>1. 不太占用业务的cpu和内存资源，减少对业务的影响<br>2. 计算功能要修改或扩展时也无需在业务服务上进行迭代","like_count":1},{"had_liked":false,"id":182210,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582729299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877696595","product_id":100039001,"comment_content":"我想对那么大同学提出的三点观点进行一个简单的剖析<br>一.他说的是通过设置参数，然后一次写入1000条或者1万条数据层，我认为这个并不太合适,像Redis利用这样在内存中存储数据，交互的代价已经很低了，而且就算是设置参数，那还是要针对不同的实现方式,当然可以在实现类的构造函数中,加入这个写入参数<br>2. 利用一个sql来查询来实现相同功能，其实这个的话就是一种高耦合的思想了，而我的想法是多增加一个查询的接口，然后让不同的查询规则来实现这个接口类，然后在我们的查询工具类当中的构造函数，注入的这些实现类，从而进行相对应的查询，<br>对于第3点，制定统计时间啊，这个是可以有的，当然这也是我认为第2版或第3版就有必要去做到的功能","like_count":1},{"had_liked":false,"id":174967,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580483221,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875450517","product_id":100039001,"comment_content":"问题1，reporter可测性差的问题，可以mock storage，将request信息到map中。<br>&#47;&#47; mock<br>MetricsStorage storage = new MockRedisMetricsStorage();<br><br>问题2，reporter的创建过程可以使用简单工厂方法。Aggregator完全没有必要暴露出来，可以隐藏。<br>ConsoleReporter consoleReporter = ReporterFactory.createConsoleReporter(storage);<br><br>争哥的代码我复制下来，并且跟着重构了一下，想跑跑看的同学请参考：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u39<br>","like_count":1},{"had_liked":false,"id":169267,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1578302871,"is_pvip":true,"replies":[{"id":"65740","content":"😍","user_name":"作者回复","comment_id":169267,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379507,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5873270167","product_id":100039001,"comment_content":"把落下的实战篇学习完了，还把老师的干货总结分享给了自己的小伙伴，都说赞","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480486,"discussion_content":"😍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168659,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1578133665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873100961","product_id":100039001,"comment_content":"涉及schedule的地方，可以使用java8的lambda来替换，更简洁点","like_count":1},{"had_liked":false,"id":168645,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1578130667,"is_pvip":false,"replies":[{"id":"65957","content":"能用基本类型就不要用包装类型~","user_name":"作者回复","comment_id":168645,"uid":"1190123","ip_address":"","utype":1,"ctime":1578490077,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5873097963","product_id":100039001,"comment_content":"老师，请教个问题。类的定义里面，什么时候使用基本类型，什么时候用包装类型？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480279,"discussion_content":"能用基本类型就不要用包装类型~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578490077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444122,"avatar":"https://static001.geekbang.org/account/avatar/00/16/09/1a/e0f95684.jpg","nickname":"空空","note":"","ucode":"8F6EFE5A6F6F64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173106,"discussion_content":"不同意，还是要分情况看待，例如，Entity 类中的某个布尔型字段，建议用包装类，试想如果repository返回的该字段是null, 如果用boolean 接收会怎样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581830106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167674,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1577891753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872859049","product_id":100039001,"comment_content":"我觉得在使用方面需要优化，1,建议可以将使用哪个数据库存储方式，时间范围，使用邮箱还是命令行作为输出做成类似 spring 的可配置项，2,减少启动代码，最好使用一行或者注解就可以起到拦截请求并统计输出的作用。","like_count":1},{"had_liked":false,"id":167644,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1577885809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872853105","product_id":100039001,"comment_content":"打卡，今天又进步一点点，利用元旦的时间，将上一篇和这一篇的内容过了一遍，参照文章的思路使用代码简单实现了一遍，加深了理解。","like_count":1},{"had_liked":false,"id":167539,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1577851526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872818822","product_id":100039001,"comment_content":"RequestInfo.timestamp属性是接口响应的开始时间戳吗？如果是的话，说明我被Demo中的10234,11234这类数据给误导了","like_count":1},{"had_liked":false,"id":167538,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1577850884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872818180","product_id":100039001,"comment_content":"喜欢一小步一小步改进过程","like_count":1},{"had_liked":false,"id":167498,"user_name":"成葛格","can_delete":false,"product_type":"c1","uid":1030745,"ip_address":"","ucode":"A09A57D891FA50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/59/ffa298a2.jpg","comment_is_top":false,"comment_ctime":1577844943,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5872812239","product_id":100039001,"comment_content":"Jfinal 小而美，关注效率。","like_count":1,"discussions":[{"author":{"id":1031044,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/84/f11e9155.jpg","nickname":"豆奶","note":"","ucode":"BC0B20040B2F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113827,"discussion_content":"没感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357606,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1663474218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663474218","product_id":100039001,"comment_content":"将大段的产品需求说明拆分成小段的需求说明 -&gt; 将每个小段的需求说明中涉及到的实体通过类名进行替代说明（这一步骤其实是对上一个步骤的简单翻译） -&gt; 提取每个小段的需求中的共性部分提出出来，划分到一个类中（到这里每个类的功能大致已经划分出来了） -&gt; 开始写代码（这个过程中肯定还需要针对每个类的功能进行调整，原则是遵循各种设计原则）","like_count":0},{"had_liked":false,"id":332022,"user_name":"叶成勇","can_delete":false,"product_type":"c1","uid":2663781,"ip_address":"","ucode":"8D359ED202BE87","user_header":"","comment_is_top":false,"comment_ctime":1642987807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642987807","product_id":100039001,"comment_content":"两年后才来学这个专栏，会不会很落后啊？！","like_count":0},{"had_liked":false,"id":327987,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640434700,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640434700","product_id":100039001,"comment_content":"最不合理的地方是先从数据库中拉取数据，再计算得到统计数据，在数据量大的时候，这样做既占用大量内存，也不能利用数据库本身的索引做快速统计。有几个问题，看完了39、40节，也没有得到满意的答案：1. 用存储自带的统计能力（例如sql&#47;es查询）来做统计，是否更好？2. 这样做的话，sql&#47;es统计函数应该放Aggregator类，还是放在MetricsStorage子类里（和存储是绑定的）？3. 这种统计函数怎么单测？特别像es的统计语句，还是比较复杂的，容易出错。","like_count":0},{"had_liked":false,"id":325923,"user_name":"kougazhang","can_delete":false,"product_type":"c1","uid":1200650,"ip_address":"","ucode":"E9AD678FCEC75D","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","comment_is_top":false,"comment_ctime":1639234882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639234882","product_id":100039001,"comment_content":"对于 RequestInfo save 的问题，在 golang 中很好解决，专门搞一个 channel 来传递消息就好了。把 Info 信息发到一个专门的方法，这个方法来决定是流式写入或批量写入。","like_count":0},{"had_liked":false,"id":324006,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638254904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638254904","product_id":100039001,"comment_content":"我甚至在思考 redis用什么数据结构的组合 实现 这个接口的范围查询功能 ","like_count":0},{"had_liked":false,"id":323965,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638241724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638241724","product_id":100039001,"comment_content":"感觉存储的方式限定了 RequestInfo 虽然是接口编程但是还是依赖了具体的struct 个人感觉依赖接口然后调用特定的方法可不可以 个人的拙见","like_count":0},{"had_liked":false,"id":314154,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632880400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632880400","product_id":100039001,"comment_content":"原来自己做需求开发的难点，大佬们也会遇到，自己的习惯总是想好了再做，尽量做到完美的适配目前发现的业务，但是这就导致迟迟下不了手，不知道该如何开始，会想很久。今天的课程让我学会了释然，真罗马不是一天建成的，留有扩展，先简单实现，不断迭代优化。","like_count":0},{"had_liked":false,"id":309185,"user_name":"王堃","can_delete":false,"product_type":"c1","uid":1392963,"ip_address":"","ucode":"AA2C9A5B5FA9C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/43/0cd60af7.jpg","comment_is_top":false,"comment_ctime":1629972836,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1629972836","product_id":100039001,"comment_content":"为静态方法测试性差，老师能具体说明一下吗？","like_count":0},{"had_liked":false,"id":304315,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1627352839,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627352839","product_id":100039001,"comment_content":"List&lt;RequestInfo&gt; getRequestInfos(String apiName, long startTimeInMillis, long endTimeInMillis);  Map&lt;String, List&lt;RequestInfo&gt;&gt; getRequestInfos(long startTimeInMillis, long endTimeInMillis)<br>为何这里定义的这两个方法名称相同？不会发生冲突吗？功能有何不同？一个是查询某个apiname在某个时间段的信息， 另一个是查询所有apiname在某个时间段的信息？","like_count":0,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534597,"discussion_content":"java 重载 然后你说的没错 是这两个需求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638238736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302784,"user_name":"布拉姆","can_delete":false,"product_type":"c1","uid":1311125,"ip_address":"","ucode":"479FF27D73BCAD","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","comment_is_top":false,"comment_ctime":1626361974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626361974","product_id":100039001,"comment_content":"老师，<br>关于consoleReporter和emailReporter代码重复的问题， 我觉得是：<br>DRY包含实现逻辑重复（可接受）、功能语义重复、代码执行重复。这里我感觉这里是实现逻辑重复，严格来说可接受。因为consoleReporter和emailReporter是2件不同的事情？<br>","like_count":0},{"had_liked":false,"id":284862,"user_name":"CJJ","can_delete":false,"product_type":"c1","uid":1194060,"ip_address":"","ucode":"7E02A6A8547559","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","comment_is_top":false,"comment_ctime":1616501686,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1616501686","product_id":100039001,"comment_content":"2021年，继续努力加油！继续学习！","like_count":0},{"had_liked":false,"id":284796,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1616477098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616477098","product_id":100039001,"comment_content":"1.指标收集器是作为客户端SDK供其他服务使用的，而涉及聚合、展示、定时统计方面的能力则是分属在服务端的。<br>2.聚合相关也不应该在内存使用Java代码进行操作聚合，使用专业的引擎更合适。","like_count":0},{"had_liked":false,"id":271173,"user_name":"ben","can_delete":false,"product_type":"c1","uid":2097533,"ip_address":"","ucode":"3287431472A90C","user_header":"https://static001.geekbang.org/account/avatar/00/20/01/7d/36a82725.jpg","comment_is_top":false,"comment_ctime":1609432209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609432209","product_id":100039001,"comment_content":"新年快乐！希望和大家一起在2021年更进一步！","like_count":0},{"had_liked":false,"id":269651,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1608727094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608727094","product_id":100039001,"comment_content":"MetricsCollector：采集数据 ---&gt; MetricsStorage:存储元数据 -----&gt; XXXReporter:聚合统计<br>","like_count":0},{"had_liked":false,"id":263357,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606114149,"is_pvip":false,"replies":[{"id":"96100","content":"加油","user_name":"作者回复","comment_id":263357,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700782,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606114149","product_id":100039001,"comment_content":"打卡：用Java实现了文中的完整案例。","like_count":0},{"had_liked":false,"id":260424,"user_name":"Geek_809561","can_delete":false,"product_type":"c1","uid":2037722,"ip_address":"","ucode":"94FA67AEFB6CA0","user_header":"","comment_is_top":false,"comment_ctime":1605002067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605002067","product_id":100039001,"comment_content":"我觉得Storage应该是一个单例吧。节省内存。并保证全局只有一个地方在存储数据和读取数据。并在这存储和读取的地方加上锁（为了多线程）。","like_count":0},{"had_liked":false,"id":254815,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1603191076,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603191076","product_id":100039001,"comment_content":"RequestStat 应该抽取出一个 formatter interface 满足<br>可以转换成 Json html 表格等格式 ，在 aggregator 中未来新增新的方法可以回传各种类有不同 attributes 的 statics 而不破坏 reporter 的代码","like_count":0},{"had_liked":false,"id":251903,"user_name":"李胖","can_delete":false,"product_type":"c1","uid":1173293,"ip_address":"","ucode":"1D0C0F10E240F3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e7/2d/c21fd3e3.jpg","comment_is_top":false,"comment_ctime":1601962619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601962619","product_id":100039001,"comment_content":"我的老天這篇太精華了","like_count":0},{"had_liked":false,"id":251346,"user_name":"Geek_558387","can_delete":false,"product_type":"c1","uid":1617369,"ip_address":"","ucode":"2EA857EBC365B5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","comment_is_top":false,"comment_ctime":1601473621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601473621","product_id":100039001,"comment_content":"看来最主要还是得临摹啊, 这些看多了也都没感觉到有啥实际用处啊","like_count":0},{"had_liked":false,"id":250103,"user_name":"平行线","can_delete":false,"product_type":"c1","uid":1714287,"ip_address":"","ucode":"033F8BA2D1470E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/28/6f/e430eaaa.jpg","comment_is_top":false,"comment_ctime":1600935943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600935943","product_id":100039001,"comment_content":"MetricsCollector 是怎么采集数据的呢？recordRequest方法只是存储数据啊","like_count":0},{"had_liked":false,"id":246726,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599465654,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599465654","product_id":100039001,"comment_content":"问题一：<br>1、Aggregator、Reporter的变化扩展<br>2、定时调度类剥离<br>问题二：<br>扩展性，在使用框架的时候可以很方便地在主流程外进行各种扩展","like_count":0},{"had_liked":false,"id":242963,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1597905742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597905742","product_id":100039001,"comment_content":"指标统计最好下沉的DB层面，而不是在业务层面做聚合，数据量的情况下有可能算不出来<br><br>这两节内容最大的体会是在做软件设计层面，这才是体现程序员技术能力与成色的地方，沉淀个人的方法论很重要","like_count":0},{"had_liked":false,"id":240545,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596968331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596968331","product_id":100039001,"comment_content":"和业务的耦合度过高，应该使用aop等机制，将非业务代码隔离开来","like_count":0},{"had_liked":false,"id":240098,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1596761970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596761970","product_id":100039001,"comment_content":"再回顾，感觉真是绝了","like_count":0},{"had_liked":false,"id":235209,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1594944801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594944801","product_id":100039001,"comment_content":"我猜下，这种用责任链模式会不会好些？？","like_count":0},{"had_liked":false,"id":227253,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1592326346,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1592326346","product_id":100039001,"comment_content":"1、显示部分不稳定变化频繁，可以把显示部分和数据整合拆分<br>2、统计规则也会多种多样，后续肯定会增加统计规则。应该把重新设计统计类，实现不同的统计规则。没次添加新统计规则，只需要交给上帝类就可以实现新的统计。<br>3、易用性方面，统计代码明显的侵入业务代码。可用aop实现相应注解提高易用性。","like_count":0},{"had_liked":false,"id":223088,"user_name":"thinkmore","can_delete":false,"product_type":"c1","uid":1137647,"ip_address":"","ucode":"8FC3414685165C","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/ef/ab462610.jpg","comment_is_top":false,"comment_ctime":1590999126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590999126","product_id":100039001,"comment_content":"putIfAbsent方法会跑出空指针，应该使用computeIfAbsent","like_count":0},{"had_liked":false,"id":219007,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589932413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589932413","product_id":100039001,"comment_content":"突然理解了Java有用数据与方法分离的贫血模型的原因，因为接口是一组方法，只能注入方法，无法注入实体，若用充血模型，把repository层的entity注入到service层，service层看不到entity的属性，只能看到entity的方法，所以entity要在service层初始化后传入自己的方法中。","like_count":0},{"had_liked":false,"id":214908,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1588846334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588846334","product_id":100039001,"comment_content":"【设计模式笔记26】20200507<br>最重要得两句话：<br>1、开发新产品遵循最小产品原则，逐步迭代<br>2、面向对象设计与实现本质上就是把合适的代码放到合适的类中<br>最近开发新产品，对这两点深有体会，之所以要遵循最小产品原则是因为快速验证快速失败快速迭代。前期的设计要多想想有哪些流程是可以优化的，不要陷入眼前的定势中，把自己当作一个旁观者，审视面前的设计。简单滴说即使第一遍看上去设计没问题，你也要想想：难道真的没有问题了么？带着这种思考往往能发现问题。","like_count":0,"discussions":[{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289026,"discussion_content":"FP是面向函数编程，数据与操作分离，无状态。组织对象是函数\nOOP，面向对象，数据与操作一起(充血模型)。组织单位是类，对象。\n整个思想是不一样的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593958604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204684,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1586442054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586442054","product_id":100039001,"comment_content":"1.采集和存储应该分开，采集后的数据最好通过message queue发到存储模块进行存储<br>2.聚合器的聚合类型应该更灵活，允许用户自行添加聚合方式<br>3.定时器可以优化，做到动态配置<br>4.需要通知用户的也应该可配置","like_count":0},{"had_liked":false,"id":204539,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1586418543,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586418543","product_id":100039001,"comment_content":"不说了，我这就重构代码去","like_count":0},{"had_liked":false,"id":204513,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1586413520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586413520","product_id":100039001,"comment_content":"排序那一块代码可以借助已有工具简化为：<br>requestInfos.sort(Comparator.comparingDouble(RequestInfo::getResponseTime))","like_count":0},{"had_liked":false,"id":201188,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585730488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585730488","product_id":100039001,"comment_content":"我觉得aggregator可以设计为一个接口，里面只包含excute()操作，加，减，最大，最小把它看作一种策略，用策略模式或者工厂模式，上层需要作何操作，我就给创建该操作的对象去处理，有利于以后的扩展，而reported可以抽取公共的东西，面向抽象，您觉得呢","like_count":0},{"had_liked":false,"id":197359,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1585371153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585371153","product_id":100039001,"comment_content":"这里的 Timer 每日上报任务逻辑有点啰嗦且重复，可以考虑抽象类的方式抽象出来，利用控制反转，声明一个任务执行方法，然具体的类实现这个方法，仅需写邮件上报和console上报的逻辑即可","like_count":0},{"had_liked":false,"id":193240,"user_name":"秋风画扇","can_delete":false,"product_type":"c1","uid":1132356,"ip_address":"","ucode":"5BCBC1422C51EC","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/44/964aa665.jpg","comment_is_top":false,"comment_ctime":1584886651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584886651","product_id":100039001,"comment_content":"这里的方法还是可以再拆分的，这么长看起来费劲、不容易维护。难以应对变化~","like_count":0},{"had_liked":false,"id":182743,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582858712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582858712","product_id":100039001,"comment_content":"不知道老师后面有没有针对某个开源框架做剖析和讲解，比如比较简单的Junit单元测试框架，这样可能效果会更好","like_count":0},{"had_liked":false,"id":180285,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1582248867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582248867","product_id":100039001,"comment_content":"ConsoleReporter EmailReporter  这两个类的类名和职责不统一。从字面意思更像是负责显示的类。可以抽象出一个Reporter类。该类提供了基本的代码框架，通过builder模式将负责存储，统计，展示的类注入进来。也可以抽象出一个AbstractReporter类，提供一个负责展示是的抽象方法。ConsoleReporter EmailReporter  集成这个抽象类并实现各自的展示方法。我个人更倾向于第一种。<br>统计方面可以采用sql语句的形式来暴露给用户使用。因为我觉得产品最终的形式是要有一个web界面供用户配置各种规则的。采用sql的方式可以减少使用者的心智负担，也可以大大缩短开发人员的开发时间","like_count":0},{"had_liked":false,"id":178705,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1581781394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581781394","product_id":100039001,"comment_content":"Aggregator#aggregate()应该把各项统计指标分散到单一方法中，满足单一职责原则。<br>EmailReporter中的Timer类应该修改为ScheduledExecutorService#scheduleAtFixedRate()方法。后者有各种优势。<br>应该新增定时任务类，统一管理定时触发的任务，而不应该分散到Reporter类，Reporter应该只负责输出即可。<br><br>最近在看Spring框架，注释很清晰，面向接口开发，应用各种设计模式，扩展性非常好。AbstractApplicationContext#refresh()串联流程，具体职责分散到各个方法中处理，满足单一职责原则。","like_count":0},{"had_liked":false,"id":177593,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1581430551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581430551","product_id":100039001,"comment_content":"hutool这个开源项目是一个Java的工具类，大而全，把平常开发中会用到的工具几乎都集成了，用起来的感觉真的很方便","like_count":0},{"had_liked":false,"id":175858,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1580871632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580871632","product_id":100039001,"comment_content":"关于 MetricsStorage 有可能导致 JVM OOM 的问题，可以使用分治的算法思想（Divide and Conquer）对半统计再合并","like_count":0},{"had_liked":false,"id":174979,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1580485865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580485865","product_id":100039001,"comment_content":"优秀的代码，都是重构出来的，深有体会。","like_count":0},{"had_liked":false,"id":172181,"user_name":"Nan","can_delete":false,"product_type":"c1","uid":1236569,"ip_address":"","ucode":"A3DEC678BF814D","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/59/ceea56a9.jpg","comment_is_top":false,"comment_ctime":1579102281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579102281","product_id":100039001,"comment_content":"对于实战的一个整体回顾思考<br>功能性需求设计和实现上，可以采用快速迭代的方式。有了场景，也就有了着力点。在这里更多适合的有单一原则，依赖注入，封装抽象，基于接口而非实现等。<br>非功能性需求设计和实现，更多的是通过 review 整个代码结构，来参照对比是否符合设计原则和思想。在这里更多的可以是开闭原则，依赖反转等。<br><br>随着开发经验和知识的积累，我们可以在一开始需求设计时就自然的考虑到了适合的设计原则。在系统框架设计中，对于模块划分就能够更加清晰，减少后期重构量。","like_count":0},{"had_liked":false,"id":171996,"user_name":"intomymind","can_delete":false,"product_type":"c1","uid":1105126,"ip_address":"","ucode":"B954C9BFEC8667","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/e6/cfb409ab.jpg","comment_is_top":false,"comment_ctime":1579065479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579065479","product_id":100039001,"comment_content":"Reporter的实现类可能会有很多种，有些场景用的是邮件，有的场景可能只用控制台就行，所以这块应该用配置或者用SPI机制来进行扩展, 不会每次变动都更改代码","like_count":0},{"had_liked":false,"id":171367,"user_name":"初八","can_delete":false,"product_type":"c1","uid":1111131,"ip_address":"","ucode":"D40E15983BFAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/5b/8ee3bce0.jpg","comment_is_top":false,"comment_ctime":1578909518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578909518","product_id":100039001,"comment_content":"我想说分布式情况下这些定时任务还要依赖外部吗","like_count":0},{"had_liked":false,"id":171186,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1578878668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578878668","product_id":100039001,"comment_content":"打卡<br>针对非业务的架构实现方式<br>一、小步快跑、逐步迭代<br>现在原型的分析基础上，划分功能模块，根据功能模块，先定义V1版本的功能<br>二、面向对象设计和分析<br>根据功能模块，定义类的属性和方法、以及类与类之间的关系。<br>1、划分职责，识别出有哪些类<br>2、定义类的属性、方法，以及类和类之间的关系<br>3、将类组装起来，提供入口<br>识别出核心的类之后，可以在IDE中创建好几个类（可能会有数据类型的辅助类等），然后尝试着定义属性和方法。<br>在设计时，使用单一职责原则、开闭原则、依赖注入、KISS原则、DRY原则、迪米特法则、里式替换原则，以及是否基于接口而非实现编程思想，代码是否高内聚、低耦合，是否可以抽象出可复用的代码等设计原则和思想来审视设计是否合理。<br><br>三、Review 设计与实现<br>使用SOLID、KISS、DRY、YAGNI、LOD 等设计原则，基于接口而非实现编程、多用组合少用继承、高内聚低耦合等设计思想，review类的设计和实现，有需要改进的地方，放到V2、V3版本中持续演进。","like_count":0},{"had_liked":false,"id":170827,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578732471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578732471","product_id":100039001,"comment_content":"Aggregator中可以将之前的一个方法拆分成几个独立的方法，比如count()、max()、min()等，调用者可以自由选择调用组装，如果有某几个方法经常要用到的话，可以将几个方法统一封装起来，一次返回结果。","like_count":0},{"had_liked":false,"id":170825,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1578732120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578732120","product_id":100039001,"comment_content":"学到现在，感觉专栏具体的内容记不太住，倒是一写代码就想着怎么利用一些设计原则来达到可扩展，可复用的目的。","like_count":0},{"had_liked":false,"id":170636,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1578648089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578648089","product_id":100039001,"comment_content":"看之前的的内容，觉得自己都懂了。再次去翻阅，有些章节很陌生。不确定自己是否真的掌握。老师再阐述开发思想，设计过程。顺着这个过程确实能懂。读者若是没有自己的理解和概括加上读书笔记的输出，很容易囫囵吞枣。","like_count":0},{"had_liked":false,"id":169922,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1578473804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578473804","product_id":100039001,"comment_content":"如果获取数据或者统计计算很耗时,会直接拖累循环调度模块.同时展示输出模块可以进行异步处理,增强循环调度处理模块的低延时.感觉k8s的控制器和operator对资源的循环调度处理设计的很好,通过充分解耦,增强循环调度的低延时快速响应.","like_count":0},{"had_liked":false,"id":169357,"user_name":"牛顿的烈焰激光剑","can_delete":false,"product_type":"c1","uid":1042022,"ip_address":"","ucode":"C57018C65DAFB3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/66/fbbf0bb1.jpg","comment_is_top":false,"comment_ctime":1578321519,"is_pvip":false,"replies":[{"id":"65738","content":"不用的哦，你觉得为啥要while循环呢？只是一个demo而已的","user_name":"作者回复","comment_id":169357,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379431,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1578321519","product_id":100039001,"comment_content":"Demo.java 里应该用`while(true);`包裹所有代码吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501841,"discussion_content":"可以根据入参和返回值来区分，不过这样设计起来就比较麻烦了，万一有入参和返回值一样的两个函数咋办呢，你说是吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596113082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169192,"user_name":"Lyre","can_delete":false,"product_type":"c1","uid":1275759,"ip_address":"","ucode":"61AB16508AFFDA","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/6f/454951d2.jpg","comment_is_top":false,"comment_ctime":1578289565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578289565","product_id":100039001,"comment_content":"一次性拉取大量数据到内存中，还是要遍历去计算各个接口的单独的耗时等，所以是不是不应该关注拉取数据的区间，应该关注整个计算过程的性能。","like_count":0},{"had_liked":false,"id":169001,"user_name":"蓝天","can_delete":false,"product_type":"c1","uid":1023233,"ip_address":"","ucode":"3846830C97D97A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/01/23306c79.jpg","comment_is_top":false,"comment_ctime":1578235698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578235698","product_id":100039001,"comment_content":"dubbo的扩展性很好，基于对spi机制的扩展","like_count":0},{"had_liked":false,"id":168625,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1578125366,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1578125366","product_id":100039001,"comment_content":"后续的拓展统计数据为了实现可拓展性，是不是可以如下设计:在统计的接口中支持注入用户自定义的统计方式，返回结果增加一个Map&lt;&lt; String, Object &gt; 存储用户自定义统计结果！当然对于公共的统计项可以拆成一个个的IRule,基础的统计类中直接加载该接口实现类，进行统计处理。","like_count":0},{"had_liked":false,"id":167881,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1577957207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577957207","product_id":100039001,"comment_content":"课堂讨论Answer:<br><br><br><br>对于今天的设计与代码实现，你有没有发现哪些不合理的地方？有哪些可以继续优化的地方呢？或者留言说说你的设计方案。<br><br><br><br>Aggregator类的问题较大.它不符合开闭原则.<br><br><br><br>说一个你觉得不错的开源框架或者项目，聊聊你为什么觉得它不错？<br><br>https:&#47;&#47;github.com&#47;square&#47;retrofit<br><br>反射与动态代理的典范.","like_count":0},{"had_liked":false,"id":167863,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1577953335,"is_pvip":true,"replies":[{"id":"65166","content":"自己画画？","user_name":"作者回复","comment_id":167863,"uid":"1190123","ip_address":"","utype":1,"ctime":1577955391,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1577953335","product_id":100039001,"comment_content":"可否提供下类图，整体上看着更方便。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480028,"discussion_content":"自己画画？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577955391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456955,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3b/3b/b8c00291.jpg","nickname":"Uncle.Wang","note":"","ucode":"9A4F646CFC237F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117540,"discussion_content":"评论区能上传图片就好了，学员画类图，老师点评","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578125953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167833,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1577946615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577946615","product_id":100039001,"comment_content":"1、今天的代码没有做容错处理；代码的效率问题也没有优化，比如争哥在文章里所提到得一次取太长数据导致内存占用过高，还有代码中收集和存储采用同步方式，也会影响到性能","like_count":0},{"had_liked":false,"id":167826,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1577945191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577945191","product_id":100039001,"comment_content":"打卡，加油，2020坚持！","like_count":0},{"had_liked":false,"id":167776,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1577932804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577932804","product_id":100039001,"comment_content":"1.简单用过prometheus 对比 prometheus提出一个小问题 <br>拉取数据的时候需要分项目 用户需要观看一个项目的中的多个数据项，所以拉取数据接口确实一个分组参数<br>2.目前没有看过源码，不好做出评价。如果非要说的话golang的标准库的设计是非常优秀的。哈哈哈这是一句废话","like_count":0},{"had_liked":false,"id":167752,"user_name":"SolaT.yolo","can_delete":false,"product_type":"c1","uid":1234508,"ip_address":"","ucode":"BF5B8E6883688C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/4c/9d3b72af.jpg","comment_is_top":false,"comment_ctime":1577927556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577927556","product_id":100039001,"comment_content":"新年快乐，持续学习","like_count":0},{"had_liked":false,"id":167673,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577891593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577891593","product_id":100039001,"comment_content":"新年快乐，课后讨论的问题争哥在文里也支出了一些，这个框架随着慢慢迭代，可以做的更通用一些。<br>比如:<br>1. 采集数据的标准可以开放给使用者，使用者自定义提取规则。<br>2. 统计逻辑(算法)可以分类，作为功能包供使用者选择。<br>3. 展示诉求，可以对外提供json数据开放给使用者个性化展示在自己系统，也可以产品化输出mail，web等友好的可视化产品。 ","like_count":0},{"had_liked":false,"id":167601,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1577874307,"is_pvip":false,"replies":[{"id":"65095","content":"后面有讲到 别急","user_name":"作者回复","comment_id":167601,"uid":"1190123","ip_address":"","utype":1,"ctime":1577932031,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"1577874307","product_id":100039001,"comment_content":"对于获取大量数据在内存有可能把内存撑爆的问题，有什么好的解法吗？前段时间系统也遇到这个问题了，最后扩大了内存，有没有通过代码上来解决的方案呢？欢迎小伙伴和老师的指教。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479913,"discussion_content":"后面有讲到 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577932031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133654,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/56/32408a78.jpg","nickname":"肖恩😏桂桂","note":"","ucode":"F50CE07CD4F59F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355418,"discussion_content":"这里不是应该做分页吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615429014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq65BWyJb39rq0Qgx1fnELVSZGGuLY6oBmYcmFj2Oqy9iauAWfbqO5U63I22Uo1POrrTp7tFWXibxvg/132","nickname":"zyl","note":"","ucode":"2F872341AC8D7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115503,"discussion_content":"备忘录离线存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578016684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq65BWyJb39rq0Qgx1fnELVSZGGuLY6oBmYcmFj2Oqy9iauAWfbqO5U63I22Uo1POrrTp7tFWXibxvg/132","nickname":"zyl","note":"","ucode":"2F872341AC8D7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116091,"discussion_content":"一小部分一小部分持久化到磁盘吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578053273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":115503,"ip_address":""},"score":116091,"extra":""}]}]},{"had_liked":false,"id":167591,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1577869816,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577869816","product_id":100039001,"comment_content":"除了文中提到的那些，感觉MetricsCollector的recordRequest从性能角度来讲不是很好，需要多次和storage建立连接，如果storage是RDBMS，那性能会很差，可以批量记录。但是这个从设计角度来讲也没什么毛病，并不违背SOLID、KISS、DRY、YAGNI、LOD这些原则。","like_count":0},{"had_liked":false,"id":167579,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1577867215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577867215","product_id":100039001,"comment_content":"先做一版简单的接口记录器<br>一个负责记录信息的接口：保持接口信息的用接口实现类，防止以后再使用其他的数据库保存，之后将数据从库中取出、计算一个类、发送用接口实现 不同的类进行发布、一个类负责计算统计接口在某个时间段之间的信息，最后再整一个定时任务类，这样就清晰了吧","like_count":0},{"had_liked":false,"id":167573,"user_name":"李朝辉","can_delete":false,"product_type":"c1","uid":1152951,"ip_address":"","ucode":"8E4A4469A77A88","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/b7/d5a83264.jpg","comment_is_top":false,"comment_ctime":1577864317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577864317","product_id":100039001,"comment_content":"1. 建议改进之处 <br>1.1. 数据存取参照spring的repository；<br>1.2. 定时触发应更加灵活，通过配置的方式改变定时策略；<br>1.3. 输出的部分抽象接口，面向不同的前端时，实现接口即可<br>2. Spring<br>生态丰富，spring boot配置灵活","like_count":0}]}