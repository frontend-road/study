{"id":215281,"title":"01 | 线性结构检索：从数组和链表的原理初窥检索本质","content":"<p>你好，我是陈东。欢迎来到专栏的第一节，今天我们主要探讨的是，对于数组和链表这样的线性结构，我们是怎么检索的。希望通过这个探讨的过程，你能深入理解检索到底是什么。</p><p>你可以先思考一个问题：什么是检索？从字面上来理解，检索其实就是将我们所需要的信息，从存储数据的地方高效取出的一种技术。所以，检索效率和数据存储的方式是紧密联系的。具体来说，就是不同的存储方式，会导致不同的检索效率。那么，研究数据结构的存储特点对检索效率的影响就很有必要了。</p><p>那今天，我们就从数组和链表的存储特点入手，先来看一看它们是如何进行检索的。</p><h2>数组和链表有哪些存储特点？</h2><p>数组的特点相信你已经很熟悉了，就是用一块连续的内存空间来存储数据。那如果我申请不到连续的内存空间怎么办？这时候链表就可以派上用场了。链表可以申请不连续的空间，通过一个指针按顺序将这些空间串起来，形成一条链，<strong>链表</strong>也正是因此得名。不过，严格意义上来说，这个叫<strong>单链表</strong>。如果没有特别说明，下面我所提到的链表，指的都是只有一个后续指针的单链表。</p><p><img src=\"https://static001.geekbang.org/resource/image/ff/fc/fffe3e8a77e14f253078727b06e1cafc.jpeg?wh=1920*1080\" alt=\"\"></p><p>从图片中我们可以看出，<strong>数组和链表分别代表了连续空间和不连续空间的最基础的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+树等，都不外乎是这两者的结合和变化</strong>。以栈为例，它本质就是一个限制了读写位置的数组，特点是只允许后进先出。</p><!-- [[[read_end]]] --><p>因此，<strong>我们只需要从最基础的数组和链表入手，结合实际应用中遇到的问题去思考解决方案，就能逐步地学习和了解更多的数据结构和检索技术。</strong></p><p>那么，数组和链表这两种线性的数据结构的检索效率究竟如何呢？我们来具体看一下。</p><h2>如何使用二分查找提升数组的检索效率？</h2><p>首先，如果数据是无序存储的话，无论是数组还是链表，想要查找一个指定元素是否存在，在缺乏数据分布信息的情况下，我们只能从头到尾遍历一遍，才能知道其是否存在。这样的检索效率就是O(n)。当然，如果数据集不大的话，其实直接遍历就可以了。但如果数据集规模较大的话，我们就需要考虑更高效的检索方式。</p><p>对于规模较大的数据集，我们往往是先将它通过排序算法转为有序的数据集，然后通过一些检索算法，比如<strong>二分查找算法</strong>来完成高效的检索。</p><p>二分查找也叫折半查找，它的思路很直观，就是将有序数组二分为左右两个部分，通过只在半边进行查找来提升检索效率。那二分查找具体是怎么实现的呢？让我们一起来看看具体的实现步骤。</p><p>我们首先会从中间的元素查起，这就会有三种查询结果。</p><p>第一种，是中间元素的值等于我们要查询的值。也就是，查到了，那直接返回即可。</p><p>如果中间元素的值小于我们想查询的值，那接下来该怎么查呢？这就是第二种情况了。数组是有序的，所以我们以中间元素为分隔，左半边的数组元素一定都小于中间元素，也就是小于我们想查询的值。因此，我们想查询的值只可能存在于右半边的数组中。</p><p>对于右半边的数组，我们还是可以继续使用二分查找的思路，再从它的中间查起，重复上面的过程。这样不停地“二分”下去，每次的检索空间都能减少一半，整体的平均查询效率就是O(log n)，远远小于遍历整个数组的代价O(n)。<br>\n<img src=\"https://static001.geekbang.org/resource/image/6b/a5/6bc7fb93746164ab1deccdda35d5d1a5.jpeg?wh=1920*1080\" alt=\"\"></p><center><span class=\"reference\">二分查找图示</span></center><p>同理，对于第三种情况，如果中间元素的值大于我们想查询的值，那么我们就只在左边的数组元素查找即可。</p><p>由此可见，合理地组织数据的存储可以提高检索效率。<strong>检索的核心思路，其实就是通过合理组织数据，尽可能地快速减少查询范围。</strong>在专栏后面的章节中，我们会看到更多的检索算法和技术，其实它们的本质都是通过灵活应用各种数据结构的特点来组织数据，从而达到快速减少查询范围的目的。</p><h2>链表在检索和动态调整上的优缺点</h2><p>前面我们说了，数据无序存储的话，链表的检索效率很低。那你可能要问了，有序的链表好像也没法儿提高检索效率啊，这是为什么呢？你可以先停下来自己思考一下，然后再看我下面的讲解。</p><p>数组的“连续空间存储”带来了可随机访问的特点。在有序数组应用二分查找时，它以O(1)的时间代价就可以直接访问到位于中间的数值，然后以中间的数值为分界线，只选择左边或右边继续查找，从而能快速缩小查询范围。</p><p>而链表并不具备“随机访问”的特点。当链表想要访问中间的元素时，我们必须从链表头开始，沿着链一步一步遍历过去，才能访问到期望的数值。如果要访问到中间的节点，我们就需要遍历一半的节点，时间代价已经是O(n/2)了。从这个方面来看，由于少了“随机访问位置”的特性，链表的检索能力是偏弱的。</p><p>但是，任何事情都有两面性，<strong>链表的检索能力偏弱，作为弥补，它在动态调整上会更容易。</strong>我们可以以O(1)的时间代价完成节点的插入和删除，这是“连续空间”的数组所难以做到的。毕竟如果我们要在有序的数组中插入一个元素，为了保证“数组有序”，我们就需要将数组中排在这个元素后面的元素，全部顺序后移一位，这其实是一个O(n)的时间代价了。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/22/0491248d8fdbd4ed8c72e44d864b6222.jpeg?wh=1920*1080\" alt=\"\"></p><center><span class=\"reference\">有序数组和链表插入新元素的操作和时间代价对比</span></center><p>因此，在一些需要频繁插入删除数据的场合，有序数组不见得是最合适的选择。另一方面，在数据量非常大的场合，我们也很难保证能申请到连续空间来构建有序数组。因此，学会合理高效地使用链表，也是非常重要的。</p><h2>如何灵活改造链表提升检索效率？</h2><p><strong>本质上，我们学习链表，就是在学习“非连续存储空间”的组织方案。</strong>我们知道，对于“非连续空间”，可以用指针将它串联成一个整体。只要掌握了这个思想，我们就可以在不同的应用场景中，设计出适用的数据结构，而不需要拘泥于链表自身的结构限制。</p><p>我们可以来看一个简单的改造例子。</p><p>比如说，如果我们觉得链表一个节点一个节点遍历太慢，那么我们是不是可以对它做一个简单的改造呢？在掌握了链表的核心思想后，我们很容易就能想到一个改进方案，那就是让链表每个节点不再只是存储一个元素，而是存储一个小的数组。这样我们就能大幅减少节点的数量，从而减少依次遍历节点带来的“低寻址效率”。</p><p>比如说，我的链表就只有两个节点，每个节点都存储了一个小的有序数组。这样在检索的时候，我可以用二分查找的思想，先查询第一个节点存储的小数组的末尾元素，看看是否是我们要查询的数字。如果不是，我们要么在第一个节点存储的小数组里，继续二分查找；要么在第二个节点存储的小数组里，继续二分查找。这样的结构就能同时兼顾数组和链表的特点了，而且时间代价也是O(log n)。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/89/36bea4dfd90c5fa94fa7067b8b193789.jpg?wh=1920*513\" alt=\"\"></p><center><span class=\"reference\">改造的链表</span></center><p>可见，尽管常规的链表只能遍历检索，但是只要我们掌握了“非连续存储空间可以灵活调整”的特性，就可以设计更高效的数据结构和检索算法了。</p><h2>重点回顾</h2><p>好了，这一讲的内容差不多了，我们一起回顾一下这一讲的主要内容：以数组和链表为代表的线性结构的检索技术和效率分析。</p><p>首先，我们学习了具体的检索方法。对于无序数组，我们可以遍历检索。对于有序数组，我们可以用二分查找。链表具有灵活调整能力，适合用在数据频繁修改的场合。</p><p>其次，你应该也开始体会到了检索的一些核心思想：合理组织数据，尽可能快速减少查询范围，可以提升检索效率。</p><p>今天的内容其实不难，涉及的核心思想看起来也很简单，但是对于我们掌握检索这门技术非常重要，你一定要好好理解。</p><p>随着咱们的课程深入，后面我们会一一解锁更多高级的检索技术和复杂系统，但是核心思路都离不开我们今天所学的内容。</p><p>因此，从最基础的数组和链表入手，之后结合具体的问题去思考解决方案，这样可以帮助你一步一步建立起你的知识体系，从而更好地掌握检索原理，达到提高代码效率，提高系统设计能力的目的。</p><h2>课堂讨论</h2><p>结合今天学习的数组和链表的检索技术和效率分析，你可以思考一下这两个问题。</p><ol>\n<li>对于有序数组的高效检索，我们为什么使用二分查找算法，而不是3-7分查找算法，或4-6分查找算法？</li>\n<li>对于单个查询值k，我们已经熟悉了如何使用二分查找。那给出两个查询值x和y作为查询范围，如果要在有序数组中查找出大于x和小于y之间的所有元素，我们应该怎么做呢？</li>\n</ol><p>欢迎在留言区畅所欲言，说出你的思考过程和最终答案。如果有收获，也欢迎把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":197345,"user_name":"无形","can_delete":false,"product_type":"c1","uid":1016889,"ip_address":"","ucode":"B740E2A68A17A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","comment_is_top":false,"comment_ctime":1585370001,"is_pvip":true,"replies":[{"id":"74601","content":"对的。这样的时间代价就是log（n）+（y－x）。这是很常用的方案。许多系统就是这样实现的。<br>其实还有其他的可行方案，比如两次二分，那么就是log（n）+log（n）；<br>再比如说，在第一次二分找到x以后，然后在x和数组尾之间再二分找到y。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585384048,"ip_address":"","comment_id":197345,"utype":1}],"discussion_count":3,"race_medal":0,"score":"83189748625","product_id":100048401,"comment_content":"第二个 第一步二分确定边界，第二步遍历区间值","like_count":19,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489502,"discussion_content":"对的。这样的时间代价就是log（n）+（y－x）。这是很常用的方案。许多系统就是这样实现的。\n其实还有其他的可行方案，比如两次二分，那么就是log（n）+log（n）；\n再比如说，在第一次二分找到x以后，然后在x和数组尾之间再二分找到y。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585384048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016889,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","nickname":"无形","note":"","ucode":"B740E2A68A17A5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215806,"discussion_content":"感谢老师，老师说的第二种是我想到的，第一个log(n)+(y-x)不太理解，y-x是指先log(n)找到一个位置作为起点，再向上或者向下取一定范围内吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585385180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2053679,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/56/2f/4518f8e1.jpg","nickname":"放不下荣华富贵","note":"","ucode":"9FE29C22B9ABE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1016889,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","nickname":"无形","note":"","ucode":"B740E2A68A17A5","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578346,"discussion_content":"对，直接线性探测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656665072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215806,"ip_address":""},"score":578346,"extra":""}]}]},{"had_liked":false,"id":193793,"user_name":"TIGEREI","can_delete":false,"product_type":"c1","uid":1925971,"ip_address":"","ucode":"B389D44B32C17E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep0z6NdVNxFouNStz33ZFQAMhvEbhWzpicmibWmGiaazgC2WPSMls4hRSzSMXhAW7ttS8j2hWTbDsaSQ/132","comment_is_top":false,"comment_ctime":1584965009,"is_pvip":true,"replies":[{"id":"73804","content":"用信息论的知识来分析很棒！不过如果是46分的话，出现在6那边的概率是高的，信息量就变小了。可以类比抛硬币，如果硬币出现一面的概率很高，甚至总是出现正面，那么抛硬币的信息量就很小甚至为0。<br>不过，对于不熟悉信息论的小伙伴也不用担心，该专栏所有的内容都会以直观能理解的语言进行讲解。不会使用大量公式或理论，做到深入浅出，可以放心学习。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1584981993,"ip_address":"","comment_id":193793,"utype":1}],"discussion_count":3,"race_medal":0,"score":"66009474449","product_id":100048401,"comment_content":"按概率算，二分肯定所需信息量最小阿，log1&#47;2+log1&#47;2小于log0.4+log0.6","like_count":15,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488661,"discussion_content":"用信息论的知识来分析很棒！不过如果是46分的话，出现在6那边的概率是高的，信息量就变小了。可以类比抛硬币，如果硬币出现一面的概率很高，甚至总是出现正面，那么抛硬币的信息量就很小甚至为0。\n不过，对于不熟悉信息论的小伙伴也不用担心，该专栏所有的内容都会以直观能理解的语言进行讲解。不会使用大量公式或理论，做到深入浅出，可以放心学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584981993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055345,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/71/d4b52411.jpg","nickname":"baggio","note":"","ucode":"E5FFFB9AAFE1DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252476,"discussion_content":"二分查找相对于三七分四六分是最稳定的算法，不论要查找的位置在哪儿，查询时间都差不了太多。\n问题二：先二分查找中间的值，对比x，y，如果中间的值比x还小，那范围内数据都在右侧，如果中间的值比y还大，那范围内的数据都在左侧，不断的通过二分查找，找出范围内所有数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588167859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1185159,"avatar":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","nickname":"_你说了不算","note":"","ucode":"212F890565FE5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223551,"discussion_content":"log1/2 +log1/2 大于 log1/4 +log1/6 吧，这里不应该这样比较吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586235592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196167,"user_name":"嚴脂红.*","can_delete":false,"product_type":"c1","uid":1017900,"ip_address":"","ucode":"D27D807AA334E4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/2c/87861bb1.jpg","comment_is_top":false,"comment_ctime":1585241622,"is_pvip":true,"replies":[{"id":"74402","content":"很棒！<br>第一个问题本质就是概率问题。在不知道分布的情况下不能赌运气。<br>第二个问题，你的第二次二分，是从x到max之间去进行二分。这样和完全在整个数组上进行二分相比，查询空间又少了一些，性能会更好。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585270717,"ip_address":"","comment_id":196167,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57419816470","product_id":100048401,"comment_content":"1、<br>二分查找是你在不了解数据分布时的最佳策略，37和46都有靠运气假设的成分<br>2、<br>可以先二分从min和max之间找出x,然后再二分从x和max之间找出y，中间的元素就是区间内的","like_count":14,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489235,"discussion_content":"很棒！\n第一个问题本质就是概率问题。在不知道分布的情况下不能赌运气。\n第二个问题，你的第二次二分，是从x到max之间去进行二分。这样和完全在整个数组上进行二分相比，查询空间又少了一些，性能会更好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585270717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193961,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1585008344,"is_pvip":false,"replies":[{"id":"73850","content":"简明扼要👍","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585010851,"ip_address":"","comment_id":193961,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31649779416","product_id":100048401,"comment_content":"1.二分查找概率均匀<br>2.分别用二分查找 x 和 y 对应的下标，然后取中间的数据","like_count":7,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488715,"discussion_content":"简明扼要👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585010851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/3d/1189e48a.jpg","nickname":"微思","note":"","ucode":"853C48AA183A7B","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222572,"discussion_content":"x和y这两个值在有序数组中不一定存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586158253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193895,"user_name":"与你一起学算法","can_delete":false,"product_type":"c1","uid":1318001,"ip_address":"","ucode":"A7E03B3E41828E","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/71/f7a7f70f.jpg","comment_is_top":false,"comment_ctime":1584977876,"is_pvip":false,"replies":[{"id":"73844","content":"非常好！你很好地实践了导读中的学习方法:“多问为什么，多对比不同的方法寻找优缺点”。<br>1.对于数组怎么范围的问题:<br>对x和y分别做两次二分查找，时间代价为log（n）+log（n）。<br>而对x做二分查找，再遍历到y，时间代价为log（n）+（y－x）。<br>发现没有，我们完全可以根据log（n）和（y－x）的大小进行预判，哪个更快就选哪个！<br>当然，除非y－x非常小，否则一般情况下log（n）会更小。<br><br>2.对于Redis是怎么实现的问题:<br>在下一课中，你会学习到，Redis是使用跳表实现的。而跳表是“非连续存储空间”。因此，它不能像数组一样，直接将x到y之间的元素快速复制出来到结果集合中，因此，它只能通过遍历的方式将范围查找的结果写入结果集合中。","user_name":"编辑回复","user_name_real":"郭蕾","uid":"1000473","ctime":1585008048,"ip_address":"","comment_id":193895,"utype":2}],"discussion_count":4,"race_medal":0,"score":"31649748948","product_id":100048401,"comment_content":"对于第二题，有点疑惑想问下老师，对于正常的情况(x&lt;=y)，我想到的可以有两种方法去实现，第一种方法是先二分查找x,然后二分查找y,x和y之间的元素就是答案了。第二种方法就是只二分查找x或者y，然后去顺序遍历，和另一个去比较。但是我觉得这两种方法对于不同x和y效率应该是不一样的，有些情况第一种方法较快，有些情况第二种方法较快，想问下老师工业界中的产品(redis)是如何实现区间查询的呢？","like_count":7,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488694,"discussion_content":"非常好！你很好地实践了导读中的学习方法:“多问为什么，多对比不同的方法寻找优缺点”。\n1.对于数组怎么范围的问题:\n对x和y分别做两次二分查找，时间代价为log（n）+log（n）。\n而对x做二分查找，再遍历到y，时间代价为log（n）+（y－x）。\n发现没有，我们完全可以根据log（n）和（y－x）的大小进行预判，哪个更快就选哪个！\n当然，除非y－x非常小，否则一般情况下log（n）会更小。\n\n2.对于Redis是怎么实现的问题:\n在下一课中，你会学习到，Redis是使用跳表实现的。而跳表是“非连续存储空间”。因此，它不能像数组一样，直接将x到y之间的元素快速复制出来到结果集合中，因此，它只能通过遍历的方式将范围查找的结果写入结果集合中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585008048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360741,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c3/65/b5f8581d.jpg","nickname":"梵高","note":"","ucode":"E2E07B78382395","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214351,"discussion_content":"可以用二分法的方式，找到x或y；然后再在x或y的基础上再用二分法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585184737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212711,"discussion_content":"由于对后台回复操作不熟悉，之前的回复操作有误，所以让编辑帮忙回复了你的问题。这是一个很棒的问题！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585010655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318001,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/71/f7a7f70f.jpg","nickname":"与你一起学算法","note":"","ucode":"A7E03B3E41828E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":212793,"discussion_content":"看了编辑的回复，有种豁然开朗的感觉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585016954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212711,"ip_address":""},"score":212793,"extra":""}]}]},{"had_liked":false,"id":206155,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1586795741,"is_pvip":false,"replies":[{"id":"76987","content":"你提到了快表，这一点很赞。其实我这一篇里举的将数组和链表灵活结合的例子，就是借鉴了快表的思想。大家有兴趣的话，可以去看看Redis里快表的实现。<br>我文章中之所以没有明确提出来，是因为作为开篇，我希望能让大家从数组和链表的核心本质去思考问题，而不是去关注“这个新的数据结构好高级好cool”，希望这样对大家的学习和成长能起到一定的帮助。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1586827760,"ip_address":"","comment_id":206155,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27356599517","product_id":100048401,"comment_content":"讲链表不能快速访问元素，导致二分查找效率更加地下的时候，以为老师会引出快表这种数据结构...觉得说一下快表，文章会更完整一点。","like_count":6,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491696,"discussion_content":"你提到了快表，这一点很赞。其实我这一篇里举的将数组和链表灵活结合的例子，就是借鉴了快表的思想。大家有兴趣的话，可以去看看Redis里快表的实现。\n我文章中之所以没有明确提出来，是因为作为开篇，我希望能让大家从数组和链表的核心本质去思考问题，而不是去关注“这个新的数据结构好高级好cool”，希望这样对大家的学习和成长能起到一定的帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586827760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280708,"discussion_content":"你们说的快表是不是就是跳表?","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591603230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280753,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591608373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280708,"ip_address":""},"score":280753,"extra":""},{"author":{"id":2053679,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/56/2f/4518f8e1.jpg","nickname":"放不下荣华富贵","note":"","ucode":"9FE29C22B9ABE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578501,"discussion_content":"不是、两码事。quick list是节点为数组的链表，跳表是多层的链表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656837734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280753,"ip_address":""},"score":578501,"extra":""}]}]},{"had_liked":false,"id":194395,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1585057595,"is_pvip":true,"replies":[{"id":"74056","content":"你说得很正确！我在文中也强调了，“在缺乏分布信息的情况下”，那么二分是效率最优的。<br>补充一个小知识: 如果有了分布信息，比如说，数据是均匀分布的，最小的数是1，最大的数是1000，那么当我们想查询5的时候，我们第一次查询的位置就不是数组中间了，而是在数组前5&#47;1000的位置进行查找。这种基于均匀分布假设的查找方式，叫做“插值查找”。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585060281,"ip_address":"","comment_id":194395,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14469959483","product_id":100048401,"comment_content":"因为数组分布未知，所以均匀分布概率最大，也因此二分最优概率最大。如果能够针对有序数组进行分布估计，从而决定每次的最优划分。","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488819,"discussion_content":"你说得很正确！我在文中也强调了，“在缺乏分布信息的情况下”，那么二分是效率最优的。\n补充一个小知识: 如果有了分布信息，比如说，数据是均匀分布的，最小的数是1，最大的数是1000，那么当我们想查询5的时候，我们第一次查询的位置就不是数组中间了，而是在数组前5/1000的位置进行查找。这种基于均匀分布假设的查找方式，叫做“插值查找”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585060281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280710,"discussion_content":"插值查找是不是可以从0/1000 到 10/1000的位置之间二分查找?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591603341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198066,"user_name":"阿郑","can_delete":false,"product_type":"c1","uid":1495155,"ip_address":"","ucode":"BBAC6BFCAFC762","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/73/06ed7823.jpg","comment_is_top":false,"comment_ctime":1585408144,"is_pvip":false,"replies":[{"id":"74665","content":"有些评论还是很有趣的，还有的评论会出现新知识点。因此，大家多多交流，更容易碰撞出火花。<br>ps:其实我的部落状态也会分享一些相关的知识。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585414569,"ip_address":"","comment_id":198066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175342736","product_id":100048401,"comment_content":"看评论也能学到不少，精彩！","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489640,"discussion_content":"有些评论还是很有趣的，还有的评论会出现新知识点。因此，大家多多交流，更容易碰撞出火花。\nps:其实我的部落状态也会分享一些相关的知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585414569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195143,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1585140538,"is_pvip":false,"replies":[{"id":"74204","content":"这也是一个有意思的思路，二分均分的这些思想，在生活中无处不在。某种程度来说，它是“最不惹麻烦的分配方式”。在我们的例子中，它就是可以避免“一直在大的一半去查询”这个麻烦。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585144350,"ip_address":"","comment_id":195143,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10175075130","product_id":100048401,"comment_content":"二分精髓就在于等分了，性能稳定，对的我们思维的是均分。一种方法论要具有泛化能力才能成为方法论。而37或者46等，都没有做到泛得概念。","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488986,"discussion_content":"这也是一个有意思的思路，二分均分的这些思想，在生活中无处不在。某种程度来说，它是“最不惹麻烦的分配方式”。在我们的例子中，它就是可以避免“一直在大的一半去查询”这个麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585144350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285988,"discussion_content":"一看到方法论，就忍不住想问，是不是美团的老哥。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593006392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194608,"user_name":"ykkk88","can_delete":false,"product_type":"c1","uid":1068585,"ip_address":"","ucode":"A1BCFC2F0D1022","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/29/1be3dd40.jpg","comment_is_top":false,"comment_ctime":1585091854,"is_pvip":false,"replies":[{"id":"74063","content":"PPT就可以了","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585094560,"ip_address":"","comment_id":194608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175026446","product_id":100048401,"comment_content":"请教下老师用的是哪块画图工具呀~","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488857,"discussion_content":"PPT就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585094560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193916,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1584980893,"is_pvip":false,"replies":[{"id":"73849","content":"“太极生两仪，两仪生四象，四象生八卦”。你会发现，这就是一个不断二分的过程。可见，二分的思想在许多地方都有体现。<br>二分的好处是平衡。不会出现最差情况。如果是3－7分，那如果总是要在多数元素的这一半进行查找，那么查找次数就会变多。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585010425,"ip_address":"","comment_id":193916,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10174915485","product_id":100048401,"comment_content":"问题1：难道是和太极的“阴阳”有关？所以一分为二。<br>问题2：<br>  1. 二分法查找出x、y；<br>  2. x与y之间的所有元素就是的x到y索引的区间[x索引, y索引]包含的数据。","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488699,"discussion_content":"“太极生两仪，两仪生四象，四象生八卦”。你会发现，这就是一个不断二分的过程。可见，二分的思想在许多地方都有体现。\n二分的好处是平衡。不会出现最差情况。如果是3－7分，那如果总是要在多数元素的这一半进行查找，那么查找次数就会变多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585010425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212734,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585011684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193770,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1584959889,"is_pvip":false,"replies":[{"id":"73800","content":"没错！很清晰👍","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1584980541,"ip_address":"","comment_id":193770,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10174894481","product_id":100048401,"comment_content":"第一个问题，二分查找概率更加均匀，没有偏向任何一端，性能波动小，速度平稳。第二个问题一次性先用二分先找到x再二分找到y，中间的都是区间内的元素","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488651,"discussion_content":"没错！很清晰👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584980541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212543,"discussion_content":"没错！很清晰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584976517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204413,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1586397306,"is_pvip":false,"replies":[{"id":"76462","content":"1.是的。级别上来说是一样的；<br>2.对有序数组而言，两次二分查找是不错的选择，而且第二次二分查找还能在x和max直接查，可以再次缩小查询空间。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1586410216,"ip_address":"","comment_id":204413,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881364602","product_id":100048401,"comment_content":"1. 从信息论角度看的话,二分查找消除的不确定性是最高的, 不管37分还是19分,算法复杂度都logn级别的<br>2. 两次二分查找即可","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491172,"discussion_content":"1.是的。级别上来说是一样的；\n2.对有序数组而言，两次二分查找是不错的选择，而且第二次二分查找还能在x和max直接查，可以再次缩小查询空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586410216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197262,"user_name":"MrCubic","can_delete":false,"product_type":"c1","uid":1143176,"ip_address":"","ucode":"E0B78720596CAB","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/88/933904e6.jpg","comment_is_top":false,"comment_ctime":1585365975,"is_pvip":true,"replies":[{"id":"74597","content":"我当时设计这个课程的一个初衷，就是希望课程内容能自成体系，这样读者不用去买很多其他基础课，也能直接学习这门课程。如果有不清楚的，大家也能通过留言和讨论，补充一些知识盲点。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585383479,"ip_address":"","comment_id":197262,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880333271","product_id":100048401,"comment_content":"从基础数据结构入手，徐徐渐进，是我想要的，希望能跟着老师的脚步玩转检索","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489485,"discussion_content":"我当时设计这个课程的一个初衷，就是希望课程内容能自成体系，这样读者不用去买很多其他基础课，也能直接学习这门课程。如果有不清楚的，大家也能通过留言和讨论，补充一些知识盲点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585383479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194854,"user_name":"SkillIP","can_delete":false,"product_type":"c1","uid":1744250,"ip_address":"","ucode":"60EAEB93EC6858","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/7a/fb762fea.jpg","comment_is_top":false,"comment_ctime":1585111308,"is_pvip":false,"replies":[{"id":"74101","content":"从第二课开始，你就会看到用数组来存指针的数据结构了。而第三课，你会看到更有意思的组合。周五揭晓哦。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585114638,"ip_address":"","comment_id":194854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880078604","product_id":100048401,"comment_content":"链表与数组混合的应用场景有哪些？","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488912,"discussion_content":"从第二课开始，你就会看到用数组来存指针的数据结构了。而第三课，你会看到更有意思的组合。周五揭晓哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585114638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194723,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1585099769,"is_pvip":false,"replies":[{"id":"74083","content":"所以在后面，我会从解决问题的场景出发，和大家分享更多的高级实用的数据结构。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585103175,"ip_address":"","comment_id":194723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880067065","product_id":100048401,"comment_content":"数组存在扩容带来的性能问题的开销，链表在一些场景下又不太好用，在这个方面感觉还有可以优化的数据结构来提升大数据计算","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488880,"discussion_content":"所以在后面，我会从解决问题的场景出发，和大家分享更多的高级实用的数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585103175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194168,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1585032412,"is_pvip":true,"replies":[{"id":"73983","content":"3－7分其实也可以“减少查询范围”。只是不均衡，如果运气不好，每次都在多的那一半去查询，那查询次数就会变多，就不能“快速减少”了。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585043916,"ip_address":"","comment_id":194168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879999708","product_id":100048401,"comment_content":"使用二分查找就是 《尽可能的快速减少查询范围 》","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488773,"discussion_content":"3－7分其实也可以“减少查询范围”。只是不均衡，如果运气不好，每次都在多的那一半去查询，那查询次数就会变多，就不能“快速减少”了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585043916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193788,"user_name":"念念碎的碎碎念","can_delete":false,"product_type":"c1","uid":1401709,"ip_address":"","ucode":"F6DCE52AD8F1C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/63/6d/fba85466.jpg","comment_is_top":false,"comment_ctime":1584964137,"is_pvip":false,"replies":[{"id":"73803","content":"二分的确更方便，但不仅仅是代码方便，而是它更加平衡，整体性能稳定，能避免出现最坏情况，否则如果是一直在大的一边查找，那么查找次数就会变多","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1584980939,"ip_address":"","comment_id":193788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879931433","product_id":100048401,"comment_content":"个人觉得二分更方便，三七分和四六分都会让一边大一边小越来越难分<br><br>对有序数组，先查询最小值的索引，在查询最大值的索引，两者之间的所有值就是这个区间的所有元素","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488658,"discussion_content":"二分的确更方便，但不仅仅是代码方便，而是它更加平衡，整体性能稳定，能避免出现最坏情况，否则如果是一直在大的一边查找，那么查找次数就会变多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584980939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193761,"user_name":"徐洲更","can_delete":false,"product_type":"c1","uid":1314643,"ip_address":"","ucode":"F8A323CB732D05","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/53/92a50f01.jpg","comment_is_top":false,"comment_ctime":1584959016,"is_pvip":true,"replies":[{"id":"73802","content":"二分不不仅仅是容易写代码，更重要的是能均匀划分查询空间。避免出现最坏情况。否则如果一边大一边小，那么最坏情况下，会一直在大的一边进行查找，使得查找次数变多。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1584980800,"ip_address":"","comment_id":193761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879926312","product_id":100048401,"comment_content":"第一个思考题是不是二分更容易计算编写代码<br>第二个思考题  先找第一个大于x 然后在找最后一个小于y 这样子就确定了区间。<br>","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488647,"discussion_content":"二分不不仅仅是容易写代码，更重要的是能均匀划分查询空间。避免出现最坏情况。否则如果一边大一边小，那么最坏情况下，会一直在大的一边进行查找，使得查找次数变多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584980800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305598,"user_name":"anker","can_delete":false,"product_type":"c1","uid":1218937,"ip_address":"","ucode":"6EDF1FB9D45238","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/79/74d4f24f.jpg","comment_is_top":false,"comment_ctime":1628064972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628064972","product_id":100048401,"comment_content":"主要回答第二点，这里主要涉及到关系型数据库，索引 range query 的实现原理","like_count":0},{"had_liked":false,"id":258628,"user_name":"蚂蚁码代码","can_delete":false,"product_type":"c1","uid":1482973,"ip_address":"","ucode":"6B285A3DC334B3","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/dd/3fccd15e.jpg","comment_is_top":false,"comment_ctime":1604508752,"is_pvip":false,"replies":[{"id":"94158","content":"计算机知识的迭代非常快，如果不是从本质去理解，那么会陷入一种疲于奔命的学习怪圈中。<br>但如果我们可以将知识归纳总结，提炼本质，那么学习的效率就会得到大幅度提升，自身的竞争力也就会建立起来了。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1604552018,"ip_address":"","comment_id":258628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604508752","product_id":100048401,"comment_content":"看透本质有点意思，醍醐灌顶的感觉","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508716,"discussion_content":"计算机知识的迭代非常快，如果不是从本质去理解，那么会陷入一种疲于奔命的学习怪圈中。\n但如果我们可以将知识归纳总结，提炼本质，那么学习的效率就会得到大幅度提升，自身的竞争力也就会建立起来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604552018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253748,"user_name":"Mintisama","can_delete":false,"product_type":"c1","uid":1352496,"ip_address":"","ucode":"017335FB83323E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LL8H5v0z7nNwasWIw47JKiagC1JFtu6XgN4ZkBtkRD81mQVD74OSicGWg6AjCYia81RMjCDBVqqN1hd6gNXybPxpA/132","comment_is_top":false,"comment_ctime":1602851891,"is_pvip":false,"replies":[{"id":"93183","content":"解释得很好。对于凸函数求极值是很实用的优化方案。具有一定的数学功底，相信对于你学习搜索&#47;推荐算法会有很好的帮助。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1603440986,"ip_address":"","comment_id":253748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602851891","product_id":100048401,"comment_content":"对于第一题，正确的解决是参考决策树的理论，用信息来决策，每次加入一条信息后（二分后），剩余信息最小的解，就是最优分类点。具体的，我们定义函数H(p) = -(p*logp + (1-p)*log(1-p))，通过求导得到H(p)的极小值。<br><br>为什么求导就可以了呢？因为log是凹函数，对应的H(p)是一个凸函数，凸函数的有极小值点。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507165,"discussion_content":"解释得很好。对于凸函数求极值是很实用的优化方案。具有一定的数学功底，相信对于你学习搜索/推荐算法会有很好的帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603440986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253543,"user_name":"滩涂曳尾","can_delete":false,"product_type":"c1","uid":1187478,"ip_address":"","ucode":"40F650F2A419D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/96/c735ad6b.jpg","comment_is_top":false,"comment_ctime":1602772499,"is_pvip":false,"replies":[{"id":"93186","content":"很好，从数学的角度来定量分析问题，会让我们可以更清楚地解释原因","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1603442159,"ip_address":"","comment_id":253543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602772499","product_id":100048401,"comment_content":"信息论来解释二分查找：走到最后一步时，信息熵为0，二分的过程信息增益最大（为-1&#47;2log1&#47;2-1&#47;2log1&#47;2=1），即每次回答“二分查找的问题，都可以将信息熵降低1”。这是最快的。3&#47;7分，4&#47;6分或者其他方案都要慢一些。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507100,"discussion_content":"很好，从数学的角度来定量分析问题，会让我们可以更清楚地解释原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603442159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251081,"user_name":"今日青年","can_delete":false,"product_type":"c1","uid":2199051,"ip_address":"","ucode":"843BA2FB83EC2A","user_header":"https://static001.geekbang.org/account/avatar/00/21/8e/0b/d1e3a857.jpg","comment_is_top":false,"comment_ctime":1601359242,"is_pvip":false,"replies":[{"id":"93184","content":"你提到了更多的查找方式，这些都是很好的扩展阅读资料。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1603441039,"ip_address":"","comment_id":251081,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601359242","product_id":100048401,"comment_content":"二分查找的实现本身也会偏向某一侧，使得该部分的元素的查找长度更长，也就是判断&lt;=这里的等于这个位置，所以有时候为了能够更加平衡的查找，会利用斐波那契堆，左斜堆等等。(这里比较的是查找长度，也就是元素比较的次数，而不是二分查找树的高度)。笼统的来说，二分查找的性能是优于3分查找，或者别的几分查找的。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506384,"discussion_content":"你提到了更多的查找方式，这些都是很好的扩展阅读资料。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603441039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241545,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1597331279,"is_pvip":false,"replies":[{"id":"89206","content":"是的，quicklist就是这样的设计思想。可以看到，更多复杂和高级的数据结构都是从这些基础的数据结构演化出来的。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1597393782,"ip_address":"","comment_id":241545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597331279","product_id":100048401,"comment_content":"老师说的这种优化结构类似quickList吧，redis的list就用到了这种结构","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503769,"discussion_content":"是的，quicklist就是这样的设计思想。可以看到，更多复杂和高级的数据结构都是从这些基础的数据结构演化出来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597393782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226561,"user_name":"欧尼の","can_delete":false,"product_type":"c1","uid":2038969,"ip_address":"","ucode":"15A204919BCB1E","user_header":"","comment_is_top":false,"comment_ctime":1592141741,"is_pvip":false,"replies":[{"id":"83544","content":"是的。严格来说，使用二分查找需要先排好序，排序时间复杂度一般是o(n log n)，完整的时间代价要包括这一部分。但是排序只需要执行一次，然后就可以进行多次的查询了。因此，如果一个系统的查询次数很多的话，那么主要时间消耗就在多次查询上，前面的一次排序时间其实就显得微不足道了。因此我们只需要关注查询效率就好。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1592220962,"ip_address":"","comment_id":226561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592141741","product_id":100048401,"comment_content":"“首先，如果数据是无序存储的话，无论是数组还是链表，想要查找一个指定元素是否存在，在缺乏数据分布信息的情况下，我们只能从头到尾遍历一遍，才能知道其是否存在。这样的检索效率就是 O(n)。当然，如果数据集不大的话，其实直接遍历就可以了。但如果数据集规模较大的话，我们就需要考虑更高效的检索方式。对于规模较大的数据集，我们往往是先将它通过排序算法转为有序的数据集，然后通过一些检索算法，比如二分查找算法来完成高效的检索。“<br>老师你好，这段话数据是无序的时候，查找的时间复杂度是o(n)<br><br>二分查找虽然时间复杂度是o(logn),但是数据是无序的那么要先排序，那排序的算法也有时间复杂度<br>那用二分查找的话 时间复杂度不应该是 排序算法的时间复杂度 + log(n)吗?","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498286,"discussion_content":"是的。严格来说，使用二分查找需要先排好序，排序时间复杂度一般是o(n log n)，完整的时间代价要包括这一部分。但是排序只需要执行一次，然后就可以进行多次的查询了。因此，如果一个系统的查询次数很多的话，那么主要时间消耗就在多次查询上，前面的一次排序时间其实就显得微不足道了。因此我们只需要关注查询效率就好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592220962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212975,"user_name":"孟帆","can_delete":false,"product_type":"c1","uid":1986312,"ip_address":"","ucode":"4BCCC65DF9449A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BUAVk9ia4IPbxkyJriaNYcyGWRW05MJbmUgwd5yC1AnicqelYyyeiaS9h9xe3Pb0QaVdQQUwpoJ72PoYuyWTkgzYsA/132","comment_is_top":false,"comment_ctime":1588253475,"is_pvip":false,"replies":[{"id":"79072","content":"回答得没错。不过你可以再多考虑一下细节，比如“怎么找到x，y对应的序号?”，“找y的序号的过程和找x的序号有没有关系?”，你会发现简简单单的问题，其实有好几种找法。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1588256745,"ip_address":"","comment_id":212975,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588253475","product_id":100048401,"comment_content":"第二题，排序后，找到x,y对应的序号，然后找出这两个序号之间的数据","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493660,"discussion_content":"回答得没错。不过你可以再多考虑一下细节，比如“怎么找到x，y对应的序号?”，“找y的序号的过程和找x的序号有没有关系?”，你会发现简简单单的问题，其实有好几种找法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588256745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204164,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1586343878,"is_pvip":false,"replies":[{"id":"76301","content":"后面还有更多的灵活组合方式哦","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1586347596,"ip_address":"","comment_id":204164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586343878","product_id":100048401,"comment_content":"另外， 老师提到的 链表里存有序数组，链表的节点之间就是有序链表了哇。<br>一般都是受思维定势，数组+链表<br>老师提到了 链表 + 数组。<br>确实，光链表 和 数组 不同形式的组合，就会带来不同的存储效果，已经不同的检索方式。<br>谢谢老师的分享！","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491095,"discussion_content":"后面还有更多的灵活组合方式哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586347596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204162,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1586343592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586343592","product_id":100048401,"comment_content":"看到老师说：基于均匀分布假设的查找方式—插值查找。<br>学过的概率论，终于看到一点能用上的地方了。😂","like_count":0},{"had_liked":false,"id":204157,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1586343365,"is_pvip":false,"replies":[{"id":"76300","content":"是的。信息论解释比较容易。不过注意信息量的公式要带负号。信息量 = -log p（x）","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1586347544,"ip_address":"","comment_id":204157,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586343365","product_id":100048401,"comment_content":"1.  一楼说的很好哇，2log1&#47;2 &lt; log.4 + log0.6。<br>好像用信息描述比概率描述更准确。<br>2.  因为是有序数组，一次二分找到x，一次二分找到y，遍历x 与 y之间所有的元素即可。<br>不过看到老师说，一次二分找到x，另一次二分 从 x  开始 到尾 用二分找y，更高效哈！","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491093,"discussion_content":"是的。信息论解释比较容易。不过注意信息量的公式要带负号。信息量 = -log p（x）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586347544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203740,"user_name":"_你说了不算","can_delete":false,"product_type":"c1","uid":1185159,"ip_address":"","ucode":"212F890565FE5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","comment_is_top":false,"comment_ctime":1586261406,"is_pvip":false,"replies":[{"id":"76157","content":"其实他用的是信息论的知识，思路是对的。只是公式和结论有一些小瑕疵。<br>我也简单介绍一下信息论，就是如果一个事件发生的概率越大，那么信息量就越小。公式是信息量=－log p（x）。<br>其实直观理解，就像抛硬币，如果硬币两面是不均衡的，出现一面的概率更大，那么信息量就会比较小。两面概率都均衡，那么信息量最大。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1586269364,"ip_address":"","comment_id":203740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586261406","product_id":100048401,"comment_content":"老师 第一条评论表示有点质疑 <br>log1&#47;2 +log1&#47;2 大于 log1&#47;4 +log1&#47;6 吧，并且不同的分割查询比例，感觉不应该这样子进行比较，应该是求出不同分割比例a,b 这里a+b=1，然后算出关于ab的时间复杂度求最小值吧","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490945,"discussion_content":"其实他用的是信息论的知识，思路是对的。只是公式和结论有一些小瑕疵。\n我也简单介绍一下信息论，就是如果一个事件发生的概率越大，那么信息量就越小。公式是信息量=－log p（x）。\n其实直观理解，就像抛硬币，如果硬币两面是不均衡的，出现一面的概率更大，那么信息量就会比较小。两面概率都均衡，那么信息量最大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586269364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200866,"user_name":"黑色蚕宝宝","can_delete":false,"product_type":"c1","uid":1618548,"ip_address":"","ucode":"A27B586E139905","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJPAk1ofgZlANzIbnXRwzSk7iaKfKGW1EibqWfmsaaoCVJicKict6GWc4BgsEuEKJ6RQUt2Ay4wdcMCWg/132","comment_is_top":false,"comment_ctime":1585664159,"is_pvip":false,"replies":[{"id":"75201","content":"1.在没有更多信息的情况下，的确simple is beautiful.<br>2.非常好！你这个查询y的二分过程，把第一次查询x的结果作为额外信息用上了。效率会比在整个数组中进行二分更高。","user_name":"作者回复","user_name_real":"陈东","uid":"1165703","ctime":1585704333,"ip_address":"","comment_id":200866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585664159","product_id":100048401,"comment_content":"1，根据奥科姆剃刀原理，不是二分会引入其他问题所以二分；<br>2，二分查询x，再在x和max之间二分查询y，再获取x和y之间的数据<br>","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490158,"discussion_content":"1.在没有更多信息的情况下，的确simple is beautiful.\n2.非常好！你这个查询y的二分过程，把第一次查询x的结果作为额外信息用上了。效率会比在整个数组中进行二分更高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585704333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193972,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1585009214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585009214","product_id":100048401,"comment_content":"高手很多啊","like_count":0}]}