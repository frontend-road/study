{"id":397594,"title":"32 | 仓库结构：如何组织文件?","content":"<p>你好，我是LMOS。</p><p>你有没有想过，蜜蜂把劳动成果变成蜜糖存放在蜂巢中，人类把劳动成果量化成财富存放在银行，但一个进程的劳动成果放在哪里呢？</p><p>看到这里，你可能有疑问，进程有劳动成果吗？当然有，<strong>进程加工处理的数据就是进程的劳动成果</strong>，可是这个“劳动成果”，如何表示、如何组织，又放在哪里呢？这些问题都会在我们讲解文件系统的过程中一一得到解答。</p><p>那今天我们先来搞清楚什么是文件系统，然后解决文件系统如何组织文件，最后对我们文件系统进行设计并抽象成数据结构。好了，下面我们正式开始今天的学习吧。</p><p>这节课的配套代码，你可以从<a href=\"https://gitee.com/lmos/cosmos/tree/master/lesson31/misc\">这里</a>获取。</p><h2>什么是文件系统</h2><p>我们经常在计算机上听APE音乐、看4K视频、阅读各种文档、浏览各种精美的网页，这些东西都是一些特定格式的数据，我们习惯把它们叫做文件，这些文件可能储存在HD机械硬盘、SSD固态硬盘、TF卡，甚至远程计算机上。</p><p>所以你可以这样理解，文件系统解决的就是如何把许多文件储存在某一种储存设备上，方便进程对各种文件执行打开、关闭、读写、增加和删除等操作。因为这些操作实际上非常复杂，所以操作系统中分出一个子系统专门处理这些问题，这个系统就叫<strong>文件系统</strong>。</p><p>文件系统的核心现在我们还没法直观地感受到，但是它在上层为用户或者进程提供了一个逻辑视图，也就是目录结构。</p><!-- [[[read_end]]] --><p>下图中就是典型的文件系统逻辑视图，从/（根）目录开始，就能找到每个文件、每个目录和每个目录下的所有文件。我们可以看出目录也是文件的一部分，它也扮演了“组织仓库管理员”的角色，可以对文件进行分层分类，以便用户对众多文件进行管理。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/61/118c2bc88574013ec38fc8b3fe4c3c61.jpg?wh=3305x2105\" alt=\"\" title=\"文件组织结构\"></p><p>虽然这看上去好像有点复杂、是个技术活，但是别怕，毕竟我们不是干这事的第一批人，可以参考别人的设计与实现。好了，废话不多说，难不难，要做了才知道……</p><h2>文件系统设计</h2><p>既然要实现一个文件系统，还是要好好设计一下，我们首先从三个问题出发对文件系统设计方面的思考。</p><ol>\n<li>文件系统为什么可以是一个设备开始，以及它在整个Cosmos内核中的位置格局？</li>\n<li>文件数据的格式以及储存介质的最小单位是什么？</li>\n<li>如何组织越来越多的文件。</li>\n</ol><p>搞清楚这三大问题的过程，就是设计文件系统的过程，这里是重点中的重点，你可以停下来好好揣摩，然后再继续往下学习。</p><h3>文件系统只是一个设备</h3><p>HD机械硬盘、SSD固态硬盘、U盘、各种TF卡等都属于存储设备，这些设备上的文件储存格式都不相同，甚至同一个硬盘上不同的分区的储存格式也不同。这个储存格式就是相应文件系统在储存设备上组织储存文件的方式。</p><p>例如我们经常看到的：FAT32、NTFS、Ext4、Btrfs、ZFS、HPFS等，这些都是不同的文件系统建立的文件系统格式。</p><p>看到上面储存设备与文件系统多样性的情况之后，不难发现让文件系统成为Cosmos内核中一部分，是个非常愚蠢的想法。那怎么解决这个困难呢，你可以先自己想一想，然后再参考我后面的分析。</p><p>针对前面的困难，我们不难提出这样两点设想：第一，文件系统组件是独立的与内核分开的；第二，操作系统需要动态加载和删除不同的文件系统组件，这样就可以适应复杂的情况了。例如，硬盘上不同的分区有不同的文件系统格式，还可以拔插U盘、TF卡等。</p><p>你还记得前面Cosmos内核的设备驱动的设计吗？如果文件系统也是Cosmos内核下的一个设备，那就好办多了，因为不同的设备驱动程序可以动态加载，而且可以建立多个文件系统设备，而对各个文件系统设备驱动程序的实现，就是各个文件系统的实现。</p><p>刚好前面的驱动模型中（<a href=\"https://time.geekbang.org/column/article/395772\">第30节课</a>），定义了文件系统的设备类型。这个架构我给你画一幅图，你看一下就明白了。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/b7/cd767aa537a75809585bbe4f0335f4b7.jpg?wh=4180x3805\" alt=\"\" title=\"文件系统架构示意图\"></p><p>这里我不仅给出了文件系统设备的架构，还简单地梳理了内核中其它组件与文件系统的关系。</p><p>如图所示，文件系统下面有诸如U盘、硬盘、SSD、CD、TF卡等储存设备。文件系统一定要有储存设备，这个储存设备可以是硬盘，也可以是TF卡，总之能储存数据的设备就行。</p><p>为了减小程序的复杂程度，我们使用一块4MB大小的内存空间来模拟储存设备，何况又不是我们第一次建造内存文件系统（ramfs），只是我们做得更小。在文件系统设备驱动程序的入口函数中，分配4MB大小的内存空间。</p><p>相信即使如此，也能让我们清楚地看到文件系统的实现。等哪天有时间了，写好了硬盘驱动程序，也可以让文件系统设备驱动程序处理好了数据，然后发送给硬盘设备驱动程序，让其写入到硬盘中去。</p><p>这在我们设计的驱动模型中是完全允许的，这就形成了储存系统的“I/O栈”。</p><h3>文件格式与储存块</h3><p>通常说的文件，都是一堆数据，当我们把这堆数据组织成一个文件，储存在储存介质上时，就有了一个问题：我们按什么格式把这些数据存放在储存介质上。</p><p>当然，这个格式是指文件系统存放文件数据的格式。文件数据本身的格式，文件系统不该多管，例如MP3、Word文档的内部格式，各不相同。</p><p>关于文件系统存放文件数据的格式，类UNIX系统和Windows系统都采用了相同的方案，那就是逻辑上认为一个文件就是一个可以动态增加、减少的线性字节数组，即文件数据的每个字节都一一对应到这个线性数组中的每个元素。</p><p>那么我们也和它们一样，我来给你画个图梳理逻辑关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/6f/f4c90e532a8d2842fd8f5e885434b06f.jpg?wh=2777x2005\" alt=\"\" title=\"文件字节数组\"></p><p>图中的文件数据字节数组，终究是逻辑上的，所以问题又来了，我们如何把这个逻辑上的文件数据字节数组，映射到具体的储存设备上呢？只有解决了这个问题，才能真正储存数据。</p><p>现在的机械硬盘、SSD固态硬盘、TF卡，它们都是以储存块为单位储存数据的，一个储存块的大小可以是512、1024、2048、4096字节，访问这些储存设备的最小单位也是一个储存块，不像内存设备可以最少访问一个字节。</p><p>文件系统把文件数据定义成一个<strong>动态的线性字节数组</strong>，可是一开始我们不知道这个数组是多大，需要分配多少个物理储存块，最好是把这个动态的线性字节数组分成一个个数据块。</p><p>然而，不同的储存设备的物理储存块的大小不同，有的是512字节，而有的是4096字节，我们为了文件系统能工作在不同的储存设备上，所以我们把这里的数据块定义为文件系统逻辑块，其大小为4096字节，最后把这个逻辑块映射到一个或多个物理储存块。</p><p>为了让你更好地理解这个过程，我为你准备了一幅图，如下所示。</p><p>从这幅图里，我们可以看到从文件这个抽象概念，它是如何一步步从文件字节数组，整合形成文件数据逻辑块，最后映射到储存介质上的物理储存块。你需要先掌握整个演变过程的逻辑，具体怎么实现我们后面继续讲。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/e0/26ebdd53a840yy572ddc89108d377ce0.jpg?wh=3605x2070\" alt=\"\" title=\"文件逻辑块映射\"></p><h3>如何组织文件</h3><p>现在PC机上的文件数量都已经上十万的数量级了，网络服务器上更是不止这个数量。</p><p>我们不难想到，如果把十万个文件顺序地排列在一起，要找出其中一个文件，那是非常困难的，即使是计算机程序查找起来也是相当慢的，加上硬盘、TF卡之类的储存设备比内存慢得多，因此会变得更慢。</p><p>所以，需要一个叫文件目录或者叫文件夹的东西，我们习惯称其为目录。这样我们就可以用不同的目录来归纳不同的文件，例如在MP3目录下存放MP3音乐文件，或者在MP4目录下存放视频文件。同时，目录之下还可以创建目录，这样就建立了非常好的层次关系。</p><p>你可能经常在LINUX系统中看到如：“/dev/kvm，/user/bin/gcc”之类的东西，其中dev、user、bin它们就是目录，kvm、gcc它们就是文件，“/”符号就是文件路径分隔符，它们合起来就是文件路径名。</p><p>可以看出，整个文件层次结构就像是一棵倒挂的树。前面那幅图已经显示出了这种结构。后面我们的文件系统也会采用目录来组织文件。这里你只要明白，文件数量多了就出现了目录，而目录是用来帮助用户组织或归纳文件的就行了。</p><h2>文件系统数据结构</h2><p>一路走来，不难发现操作系统内核的任何组件的实现，都需要设计一套相应的数据结构，文件系统也不例外。</p><p>根据前面我们对文件系统的设计，我们至少需要表示文件和目录的数据结构，除此之外，还需要表示文件系统本身的一些数据结构，这些数据结构我们称为<strong>文件系统元数据</strong>。下面我们先从文件系统元数据开始吧！</p><h3>设计超级块</h3><p>一个文件系统有很多重要的信息，例如文件系统标识、版本、状态，储存介质大小，文件系统逻辑储存块大小，位图所在的储存块，还有根目录等。因为这些信息很重要，没有它们就等于没有文件系统，所以包含这些信息的数据结构，就叫做文件系统的超级块或者文件系统描述块。</p><p>下面我们就来设计超级块的数据结构，先在cosmos/include/drvinc/目录下建立一个drvrfs_t.h文件，写下rfssublk_t结构，代码如下所示。</p><pre><code>typedef struct s_RFSSUBLK\n{\n    spinlock_t rsb_lock;//超级块在内存中使用的自旋锁\n    uint_t rsb_mgic;//文件系统标识\n    uint_t rsb_vec;//文件系统版本\n    uint_t rsb_flg;//标志\n    uint_t rsb_stus;//状态\n    size_t rsb_sz;//该数据结构本身的大小\n    size_t rsb_sblksz;//超级块大小\n    size_t rsb_dblksz;//文件系统逻辑储存块大小，我们这里用的是4KB\n    uint_t rsb_bmpbks;//位图的开始逻辑储存块\n    uint_t rsb_bmpbknr;//位图占用多少个逻辑储存块\n    uint_t rsb_fsysallblk;//文件系统有多少个逻辑储存块\n    rfsdir_t rsb_rootdir;//根目录，后面会看到这个数据结构的\n}rfssublk_t;\n</code></pre><p>我们文件系统的超级块，保存在储存设备的第一个4KB大小的逻辑储存块中，但是它本身的大小没有4KB，多余的空间用于以后扩展。rfsdir_t数据结构是一个目录数据结构，你先有个印象，后面我们会有介绍的。</p><p>当然把根目录数据结构直接放在超级块中，目前也是可行的，反正现在超级块中有多余的空间。</p><h3>位图</h3><p>我们把一个储存设备分成一个个逻辑储存块（4KB），当储存一个文件数据时，就按逻辑储存块进行分配。那这就产生了一个新的问题：怎么来标识哪些逻辑储存块是空闲的，哪些逻辑储存块是已经分配占用的呢？</p><p>我们可以用位图来解决这个问题，这里的位图，就是利用一块储存空间中所有位的状态，达到映射逻辑储存块状态（是否已分配）的目的。</p><p>一个字节是8个位，那么4KB的储存空间中，就有（4096*8）个位，这每个位映射到一个逻辑储存块，其中一个位的值为0，就表示该位对应的逻辑储存块是空闲的，反之就表示对应的逻辑储存块是占用的。</p><p>上面的说明如果你还是难以明白，我再画一幅图你就清楚多了，如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/77/0a15871efd0705234d9f7031129da877.jpg?wh=3567x2640\" alt=\"\" title=\"位图块\"></p><p>其实位图并不需要定义实际的数据结构，在实际操作时，我们把位图这个储存块当成一个字节数组就行了。这里我们用了一块4MB的内存空间模拟储存设备，所以一共只有1024个4KB大小的逻辑储存块。因为远远小于4096，所以用不着把所有位都利用起来，操作一个个位很麻烦，完全可以用一个字节表示一个逻辑储存块是否空闲还是占用。</p><h3>文件目录</h3><p>根据我们的设计，为了方便用户查找和归纳越来越多的文件，才产生了目录。其实从本质上来说，目录也是一种数据，这种数据中包含了目录类型、状态、指向文件数据管理头的块号、名称等信息。</p><p>下面我们就动手把这些信息整理成rfsdir_t数据结构，写在drvrfs_t.h文件中，方便以后使用，代码如下所示。</p><pre><code>#define DR_NM_MAX (128-(sizeof(uint_t)*3))\n#define RDR_NUL_TYPE 0\n#define RDR_DIR_TYPE 1\n#define RDR_FIL_TYPE 2\n#define RDR_DEL_TYPE 5\ntypedef struct s_RFSDIR\n{\n    uint_t rdr_stus;//目录状态\n    uint_t rdr_type;//目录类型，可以是空类型、目录类型、文件类型、已删除的类型\n    uint_t rdr_blknr;//指向文件数据管理头的块号，不像内存可以用指针，只能按块访问\n    char_t rdr_name[DR_NM_MAX];//名称数组，大小为DR_NM_MAX\n}rfsdir_t;\n</code></pre><p>从上面代码中的DR_NM_MAX宏，我们可以看出rfsdir_t数据结构最多只有128字节大小。而名称数组的大小就是128减去3个8字节，由于储存设备不能用字节地址访问，它只能一块一块的访问，所以rfsdir_t结构中有个域，指向文件数据管理头的块号。</p><p>为什么rfsdir_t结构中会有很多类型呢？这里要注意，目录也是一种特殊的文件，它里面就是保存着一系列rfsdir_t结构的实例变量。这些rfsdir_t结构再次表明它代表的是一个文件，还是一个目录。</p><p>我画个图，你就明白了。如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/0b/d34ba4f8067159d8dc69ee2a1902fd0b.jpg?wh=2832x2080\" alt=\"\" title=\"目录结构\"></p><p>上图中可以看到，超级块中的rfsdir_t结构保存了根目录的名称和指向管理根目录数据的文件管理头的块号。而实际的目录数据保存在逻辑储存块中，这表明目录也是一种数据。即一系列的rfsdir_t结构的实例变量。通过这一系列的rfsdir_t结构就能找到根目录下的其它文件和目录了。</p><h3>文件管理头</h3><p>文件系统最重要是管理和存放文件。我们平常接触文件，只看到了文件名，但一个文件的信息难道真的只有一个文件名称吗？</p><p>显然不是，它还有状态、类型、创建时间、访问时间、大小，更为重要的是要知道该文件使用了哪些逻辑储存块。下面就来把上述所有的文件信息，归纳整理成一个数据结构，写在drvrfs_t.h文件中称为文件管理头，即fimgrhd_t结构，代码如下所示。</p><pre><code>#define FBLKS_MAX 32\n#define FMD_NUL_TYPE 0\n#define FMD_DIR_TYPE 1\n#define FMD_FIL_TYPE 2\n#define FMD_DEL_TYPE 5//文件管理头也需要表明它管理的是目录文件还是普通文件\ntypedef struct s_FILBLKS\n{    \n    uint_t fb_blkstart;//开始的逻辑储存块号\n    uint_t fb_blknr;//逻辑储存块的块数，从blkstart开始的连续块数\n}filblks_t;\ntypedef struct s_fimgrhd\n{\n    uint_t fmd_stus;//文件状态\n    uint_t fmd_type;//文件类型：可以是目录文件、普通文件、空文件、已删除的文件\n    uint_t fmd_flg;//文件标志\n    uint_t fmd_sfblk;//文件管理头自身所在的逻辑储存块\n    uint_t fmd_acss;//文件访问权限\n    uint_t fmd_newtime;//文件的创建时间，换算成秒\n    uint_t fmd_acstime;//文件的访问时间，换算成秒\n    uint_t fmd_fileallbk;//文件一共占用多少个逻辑储存块\n    uint_t fmd_filesz;//文件大小\n    uint_t fmd_fileifstbkoff;//文件数据在第一块逻辑储存块中的偏移\n    uint_t fmd_fileiendbkoff;//文件数据在最后一块逻辑储存块中的偏移\n    uint_t fmd_curfwritebk;//文件数据当前将要写入的逻辑储存块\n    uint_t fmd_curfinwbkoff;//文件数据当前将要写入的逻辑储存块中的偏移\n    filblks_t fmd_fleblk[FBLKS_MAX];//文件占用逻辑储存块的数组，一共32个filblks_t结构\n    uint_t fmd_linkpblk;//指向文件的上一个文件管理头的逻辑储存块\n    uint_t fmd_linknblk;//指向文件的下一个文件管理头的逻辑储存块\n}fimgrhd_t;\n</code></pre><p>fimgrhd_t结构中，其它的信息都比较易懂，关键是<strong>fmd_fleblk数组</strong>，它里面的每个元素都保存一片连续的逻辑储存块。</p><p>比如一个文件占用：4~8、10~15、30~40的逻辑储存块，那么就在fmd_fleblk[0]中保存4和4，在fmd_fleblk[1]中保存10和5，在fmd_fleblk[2]中保存30和10。</p><p>细心的你可以发现，当文件特别大时，fmd_fleblk数组元素可能就不够用了。</p><p>但是我们想了一个办法，在fmd_fleblk数组元素用完时，就再分配一个逻辑储存块，在里面再次存放同一个文件的fimgrhd_t结构，让上一个fimgrhd_t结构中的fmd_linknblk域指向这个逻辑储存块，再让这个逻辑储存块中fimgrhd_t结构中的fmd_linkpblk域，指向上一个fimgrhd_t结构所在的逻辑储存块。</p><p>为了帮助你梳理思路，我还画了示意图。</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/6e/4d35b5906fb0e4f422ea2a3216baaa6e.jpg?wh=4894x1951\" alt=\"\" title=\"文件管理头\"></p><p>从这张图中，我们可以看到fimgrhd_t结构如何管理一个文件占有的所有逻辑储存块，并且可以通过类似链表的形式动态增加fimgrhd_t结构，实际上就是在动态增加文件的逻辑储存块。同时我们不难发现，文件的第一个逻辑储存块的首个512字节空间中，存放的就是fimgrhd_t数据结构。</p><p>好了，一个简单的文件系统所需要的所有数据结构就设计完成了，你可能会想，不会这样就完了吧？我们还没写什么代码呢，文件系统就实现了么？别急，怎么写代码实现这个文件系统，下节课我们继续探索……</p><h2>重点回顾</h2><p>今天的课程就到这里了，对于文件系统，我们才刚刚开始探索，我把今天的课程重点梳理一下。</p><p>1.我们一起了解了什么是文件系统，就是解决如何把许多进程产生的数据——文件，储存在某一种储存设备之上，让进程十分方便就能对各个文件进行相应的操作。</p><p>2.我们设计了自己的文件系统，它在Cosmos中就是一个设备，规划了文件系统的文件格式和如何储存文件，还有如何组织多个文件。</p><p>3.我们把文件系统设计变成了对应数据结构，它们分别是描述文件系统信息的超级块、解决逻辑储存块分配状态的位图，还有用文件管理的目录和文件管理头。</p><h2>思考题</h2><p>请问，我们文件系统的储存单位为什么要自定义一个逻辑储存块？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课分享给身边的朋友，跟他一起学习进步。</p><p>好，我是LMOS，我们下节课见!</p>","comments":[{"had_liked":false,"id":306103,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1628351357,"is_pvip":false,"replies":[{"id":"110842","content":"铁汁 66666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628478241,"ip_address":"","comment_id":306103,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720642528993e+18","product_id":100078401,"comment_content":"一、数据结构<br>1、rfs文件系统大小为4M，直接存放于内存中，这样就可以忽略硬件读取的细节，专注于文件系统的实现。<br>2、文件系统的最前面4K，是 rfssublk_t超级块结构，用于描述整个文件系统的类型、版本、状态、超级块大小、位图块位置、根目录等。而且4K并没有全部被使用。<br>3、4M空间被划分为1024个4K的逻辑块，用位图表示逻辑块的占用情况，1表示可用，0表示不可用；<br>为了计算方便，奢侈了一把，用一个字节作为一位，实际占用了1K空间，连一个逻辑块4K都没能用完。<br>位图逻辑块地址记录在了超级块中，位图实际上被放到了第2个逻辑块中。<br>4、有文件系统，就要有目录，使用 rfsdir_t结构描述目录结构，长度位128字节。而根目录所在逻辑块直接记录在了超级块中。<br>rfsdir_t结构，可以指向目录也可以指向文件，通过rdr_type表示了所指向逻辑块中存放的数据类型。<br>如果所指向类型为目录，则指向的逻辑块，前512字节为文件管理头，后续都是rfsdir_t结构<br>如果所指向类型为文件，则指向的逻辑块，前512字节为文件管理头，后续都是文件内容<br>5、文件，使用 fimgrhd_t结构表示，包括了文件名，文件类型，文件大小，访问记录等。<br>fimgrhd_t存放于文件的第一个逻辑储存块的首个 512 字节。<br>文件较小时，通过 filblks_t数组，按文件顺序，记录多个连续的逻辑块。<br>如果连续存储块超出FBLKS_MAX个，会再申请一个 fmd_linknblk结构，并用当前 fmd_linknblk指向新的逻辑块，并将新逻辑块的fmd_linkpblk指向当前存储块，然后，在新的逻辑存储块中继续记录文件信息。","like_count":7,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524629,"discussion_content":"铁汁 66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628478241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303486,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1626828736,"is_pvip":false,"replies":[{"id":"109845","content":"对的 铁汁","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626833610,"ip_address":"","comment_id":303486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48871468992","product_id":100078401,"comment_content":"不同设备的物理块都不同，难以兼容，还不如自己搞一个逻辑块抽象一层，降低程序复杂度","like_count":11,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523701,"discussion_content":"对的 铁汁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626833610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326624,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1639609904,"is_pvip":false,"replies":[{"id":"118724","content":"是的 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1639702948,"ip_address":"","comment_id":326624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934577200","product_id":100078401,"comment_content":"文件系统属于存储设备，而不同的存储设备块的大小不同，单独去适配每一种存储设备会使得文件系统非常复杂，而且不易于扩展，所以抽象一个逻辑存储块出来进行统一管理","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539381,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639702948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345368,"user_name":"艾恩凝","can_delete":false,"product_type":"c1","uid":2950704,"ip_address":"","ucode":"F2B81BF4F0106A","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/30/c26ea06a.jpg","comment_is_top":false,"comment_ctime":1652236367,"is_pvip":false,"replies":[{"id":"126516","content":"好的 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1653618482,"ip_address":"","comment_id":345368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652236367","product_id":100078401,"comment_content":"打卡，要仔细琢磨琢磨了","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573727,"discussion_content":"好的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653618482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329654,"user_name":"吴建平","can_delete":false,"product_type":"c1","uid":2618440,"ip_address":"","ucode":"C6E578FB8627A3","user_header":"https://static001.geekbang.org/account/avatar/00/27/f4/48/2242bed9.jpg","comment_is_top":false,"comment_ctime":1641457711,"is_pvip":false,"replies":[{"id":"120232","content":"是的 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641779335,"ip_address":"","comment_id":329654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641457711","product_id":100078401,"comment_content":"文件管理管理头其实对应这linux的inode；这里比较特殊的是文件管理头和文件内容存储在一起，放在逻辑块的开始位置，而不是linux的inode集中存储。","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544911,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641779335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315288,"user_name":"搬铁少年ai","can_delete":false,"product_type":"c1","uid":1031045,"ip_address":"","ucode":"01D4A830A088D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/85/191eea69.jpg","comment_is_top":false,"comment_ctime":1633786852,"is_pvip":false,"replies":[{"id":"114251","content":"认真看课程","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1633937715,"ip_address":"","comment_id":315288,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1633786852","product_id":100078401,"comment_content":"比如一个文件占用：4~8、10~15、30~40 的逻辑储存块，那么就在 fmd_fleblk[0]中保存 4 和 4，在 fmd_fleblk[1]中保存 10 和 5，在 fmd_fleblk[2]中保存 30 和 10<br><br>这句是什么意思没看懂","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527924,"discussion_content":"认真看课程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633937715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","nickname":"残天噬魂","note":"","ucode":"A2AD8303A4518D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539103,"discussion_content":"应该是每一个元素中包含的是一个连续块空间的起始块地址和以块为单位的偏移量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639609641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314164,"user_name":"Ronny","can_delete":false,"product_type":"c1","uid":1098291,"ip_address":"","ucode":"D4A7F4CBF9BFE8","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/33/a2cfaeb3.jpg","comment_is_top":false,"comment_ctime":1632882961,"is_pvip":false,"replies":[{"id":"113794","content":"嘿嘿","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1632897829,"ip_address":"","comment_id":314164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632882961","product_id":100078401,"comment_content":"抽象<br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527593,"discussion_content":"嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632897829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305723,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1628134038,"is_pvip":false,"replies":[{"id":"110613","content":"正确的 铁汁","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628147285,"ip_address":"","comment_id":305723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628134038","product_id":100078401,"comment_content":"请问，我们文件系统的储存单位为什么要自定义一个逻辑储存块？<br><br>方便扩展，因为存储设备太多，有各种格式。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524494,"discussion_content":"正确的 铁汁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628147285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305070,"user_name":"青玉白露","can_delete":false,"product_type":"c1","uid":2619436,"ip_address":"","ucode":"96FE2D4D2B94A0","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","comment_is_top":false,"comment_ctime":1627803520,"is_pvip":false,"replies":[{"id":"110455","content":"对的 铁汁","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627954905,"ip_address":"","comment_id":305070,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627803520","product_id":100078401,"comment_content":"主要是为了兼容同的存储设备，将存储单位自定义为逻辑存储块，而实际存储单位则根据存储设备自行决定。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524265,"discussion_content":"对的 铁汁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303570,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1626860872,"is_pvip":false,"replies":[{"id":"109911","content":"fimgrhd_t是管理文件数据的 rfsdir_t是目录项 ，但是目录也是文件 在目录文件中就是保存的目录项，即一个个rfsdir_t","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626926644,"ip_address":"","comment_id":303570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626860872","product_id":100078401,"comment_content":"rfsdir_t结构和fimgrhd_t 的关系没有搞清楚，看里面的字段，这两个都能表示文件或是目录吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523741,"discussion_content":"fimgrhd_t是管理文件数据的 rfsdir_t是目录项 ，但是目录也是文件 在目录文件中就是保存的目录项，即一个个rfsdir_t","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626926644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303485,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1626828652,"is_pvip":false,"replies":[{"id":"109846","content":"也是对的 哈哈～～","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626833640,"ip_address":"","comment_id":303485,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626828652","product_id":100078401,"comment_content":"文中就有答案<br><br>不同的储存设备的物理储存块的大小不同，有的是 512 字节，而有的是 4096 字节，我们为了文件系统能工作在不同的储存设备上，所以我们把这里的数据块定义为文件系统逻辑块，其大小为 4096 字节，最后把这个逻辑块映射到一个或多个物理储存块。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523700,"discussion_content":"也是对的 哈哈～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626833640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}