{"id":548736,"title":"28｜应用保障：如何让Pod运行得更健康？","content":"<p>你好，我是Chrono。</p><p>在前面这么多节的课程中，我们都是在研究如何使用各种API对象来管理、操作Pod，而对Pod本身的关注却不是太多。</p><p>作为Kubernetes里的核心概念和原子调度单位，Pod的主要职责是管理容器，以逻辑主机、容器集合、进程组的形式来代表应用，它的重要性是不言而喻的。</p><p>那么今天我们回过头来，在之前那些上层API对象的基础上，一起来看看在Kubernetes里配置Pod的两种方法：资源配额Resources、检查探针Probe，它们能够给Pod添加各种运行保障，让应用运行得更健康。</p><h2>容器资源配额</h2><p>早在<a href=\"https://time.geekbang.org/column/article/528640\">第2讲</a>的时候我们就说过，创建容器有三大隔离技术：namespace、cgroup、chroot。其中的namespace实现了独立的进程空间，chroot实现了独立的文件系统，但唯独没有看到cgroup的具体应用。</p><p>cgroup的作用是管控CPU、内存，保证容器不会无节制地占用基础资源，进而影响到系统里的其他应用。</p><p>不过，容器总是要使用CPU和内存的，该怎么处理好需求与限制这两者之间的关系呢？</p><p>Kubernetes的做法与我们在<a href=\"https://time.geekbang.org/column/article/542376\">第24讲</a>里提到的PersistentVolumeClaim用法有些类似，就是容器需要先提出一个“书面申请”，Kubernetes再依据这个“申请”决定资源是否分配和如何分配。</p><!-- [[[read_end]]] --><p>但是CPU、内存与存储卷有明显的不同，因为它是直接“内置”在系统里的，不像硬盘那样需要“外挂”，所以申请和管理的过程也就会简单很多。</p><p>具体的申请方法很简单，<strong>只要在Pod容器的描述部分添加一个新字段 <code>resources</code> 就可以了</strong>，它就相当于申请资源的 <code>Claim</code>。</p><p>来看一个YAML示例：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; name: ngx-pod-resources\n\nspec:\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n\n&nbsp; &nbsp; resources:\n&nbsp; &nbsp; &nbsp; requests:\n&nbsp; &nbsp; &nbsp; &nbsp; cpu: 10m\n&nbsp; &nbsp; &nbsp; &nbsp; memory: 100Mi\n&nbsp; &nbsp; &nbsp; limits:\n&nbsp; &nbsp; &nbsp; &nbsp; cpu: 20m\n&nbsp; &nbsp; &nbsp; &nbsp; memory: 200Mi\n</code></pre><p>这个YAML文件定义了一个Nginx Pod，我们需要重点学习的是 <code>containers.resources</code>，它下面有两个字段：</p><ul>\n<li>“<strong>requests</strong>”，意思是容器要申请的资源，也就是说要求Kubernetes在创建Pod的时候必须分配这里列出的资源，否则容器就无法运行。</li>\n<li>“<strong>limits</strong>”，意思是容器使用资源的上限，不能超过设定值，否则就有可能被强制停止运行。</li>\n</ul><p>在请求 <code>cpu</code> 和 <code>memory</code> 这两种资源的时候，你需要特别注意它们的表示方式。</p><p>内存的写法和磁盘容量一样，使用 <code>Ki</code>、<code>Mi</code>、<code>Gi</code> 来表示 <code>KB</code>、<code>MB</code>、<code>GB</code>，比如 <code>512Ki</code>、<code>100Mi</code>、<code>0.5Gi</code> 等。</p><p>而CPU因为在计算机中数量有限，非常宝贵，所以Kubernetes允许容器精细分割CPU，即可以1个、2个地完整使用CPU，也可以用小数0.1、0.2的方式来部分使用CPU。这其实是效仿了UNIX“时间片”的用法，意思是进程最多可以占用多少CPU时间。</p><p>不过CPU时间也不能无限分割，<strong>Kubernetes里CPU的最小使用单位是0.001，为了方便表示用了一个特别的单位 <code>m</code></strong>，也就是“milli”“毫”的意思，比如说500m就相当于0.5。</p><p>现在我们再来看这个YAML，你就应该明白了，它向系统申请的是1%的CPU时间和100MB的内存，运行时的资源上限是2%CPU时间和200MB内存。有了这个申请，Kubernetes就会在集群中查找最符合这个资源要求的节点去运行Pod。</p><p>下面是我在<a href=\"https://www.freecodecamp.org/news/how-to-leverage-the-power-of-kubernetes-to-optimise-your-hosting-costs-c2e168a232a2/\">网上</a>找的一张动图，Kubernetes会根据每个Pod声明的需求，像搭积木或者玩俄罗斯方块一样，把节点尽量“塞满”，充分利用每个节点的资源，让集群的效益最大化。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/91/397bfabd8234f8d859ca877a58f0d191.gif?wh=800x765\" alt=\"图片\"></p><p>你可能会有疑问：如果Pod不写 <code>resources</code> 字段，Kubernetes会如何处理呢？</p><p>这就意味着Pod对运行的资源要求“既没有下限，也没有上限”，Kubernetes不用管CPU和内存是否足够，可以把Pod调度到任意的节点上，而且后续Pod运行时也可以无限制地使用CPU和内存。</p><p>我们课程里是实验环境，这样做是当然是没有问题的，但如果是生产环境就很危险了，Pod可能会因为资源不足而运行缓慢，或者是占用太多资源而影响其他应用，所以我们应当合理评估Pod的资源使用情况，尽量为Pod加上限制。</p><p>看到这里估计你会继续追问：如果预估错误，Pod申请的资源太多，系统无法满足会怎么样呢？</p><p>让我们来试一下吧，先删除Pod的资源限制 <code>resources.limits</code>，把 <code>resources.request.cpu</code> 改成比较极端的“10”，也就是要求10个CPU：</p><pre><code class=\"language-yaml\">  ...\n  \n&nbsp; &nbsp; resources:\n&nbsp; &nbsp; &nbsp; requests:\n&nbsp; &nbsp; &nbsp; &nbsp; cpu: 10\n</code></pre><p>然后使用 <code>kubectl apply</code> 创建这个Pod，你可能会惊奇地发现，虽然我们的Kubernetes集群里只有3个CPU，但Pod也能创建成功。</p><p>不过我们再用 <code>kubectl get pod</code> 去查看的话，就会发现它处于“Pending”状态，实际上并没有真正被调度运行：</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/d4/b1154e089533df5cfabc18c7e9c442d4.png?wh=1380x176\" alt=\"图片\"></p><p>使用命令 <code>kubectl describe</code> 来查看具体原因，会发现有这么一句提示：</p><p><img src=\"https://static001.geekbang.org/resource/image/95/02/9577c36e53c723b8e28ddb2d5e77e502.png?wh=1920x156\" alt=\"图片\"></p><p>这就很明确地告诉我们Kubernetes调度失败，当前集群里的所有节点都无法运行这个Pod，因为它要求的CPU实在是太多了。</p><h2>什么是容器状态探针</h2><p>现在，我们使用 <code>resources</code> 字段加上资源配额之后，Pod在Kubernetes里的运行就有了初步保障，Kubernetes会监控Pod的资源使用情况，让它既不会“饿死”也不会“撑死”。</p><p>但这只是最初级的运行保障，如果你开发或者运维过实际的后台服务就会知道，一个程序即使正常启动了，它也有可能因为某些原因无法对外提供服务。其中最常见的情况就是运行时发生“死锁”或者“死循环”的故障，这个时候从外部来看进程一切都是正常的，但内部已经是一团糟了。</p><p>所以，我们还希望Kubernetes这个“保姆”能够更细致地监控Pod的状态，除了保证崩溃重启，还必须要能够探查到Pod的内部运行状态，定时给应用做“体检”，让应用时刻保持“健康”，能够满负荷稳定工作。</p><p>那应该用什么手段来检查应用的健康状态呢？</p><p>因为应用程序各式各样，对于外界来说就是一个<strong>黑盒子</strong>，只能看到启动、运行、停止这三个基本状态，此外就没有什么好的办法来知道它内部是否正常了。</p><p>所以，我们必须把应用变成<strong>灰盒子</strong>，让部分内部信息对外可见，这样Kubernetes才能够探查到内部的状态。</p><p>这么说起来，检查的过程倒是有点像现在我们很熟悉的核酸检测，Kubernetes用一根小棉签在应用的“检查口”里提取点数据，就可以从这些信息来判断应用是否“健康”了，这项功能也就被形象地命名为“<strong>探针</strong>”（Probe），也可以叫“探测器”。</p><p>Kubernetes为检查应用状态定义了三种探针，它们分别对应容器不同的状态：</p><ul>\n<li><strong>Startup</strong>，启动探针，用来检查应用是否已经启动成功，适合那些有大量初始化工作要做，启动很慢的应用。</li>\n<li><strong>Liveness</strong>，存活探针，用来检查应用是否正常运行，是否存在死锁、死循环。</li>\n<li><strong>Readiness</strong>，就绪探针，用来检查应用是否可以接收流量，是否能够对外提供服务。</li>\n</ul><p>你需要注意这三种探针是递进的关系：应用程序先启动，加载完配置文件等基本的初始化数据就进入了Startup状态，之后如果没有什么异常就是Liveness存活状态，但可能有一些准备工作没有完成，还不一定能对外提供服务，只有到最后的Readiness状态才是一个容器最健康可用的状态。</p><p>初次接触这三种状态可能有点难理解，我画了一张图，你可以看一下状态与探针的对应关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/84/eaff5e640171984a4b1b2285982ee184.jpg?wh=1920x1000\" alt=\"图片\"></p><p>那Kubernetes具体是如何使用状态和探针来管理容器的呢？</p><p>如果一个Pod里的容器配置了探针，<strong>Kubernetes在启动容器后就会不断地调用探针来检查容器的状态</strong>：</p><ul>\n<li>如果Startup探针失败，Kubernetes会认为容器没有正常启动，就会尝试反复重启，当然其后面的Liveness探针和Readiness探针也不会启动。</li>\n<li>如果Liveness探针失败，Kubernetes就会认为容器发生了异常，也会重启容器。</li>\n<li>如果Readiness探针失败，Kubernetes会认为容器虽然在运行，但内部有错误，不能正常提供服务，就会把容器从Service对象的负载均衡集合中排除，不会给它分配流量。</li>\n</ul><p>知道了Kubernetes对这三种状态的处理方式，我们就可以在开发应用的时候编写适当的检查机制，让Kubernetes用“探针”定时为应用做“体检”了。</p><p>在刚才图的基础上，我又补充了Kubernetes的处理动作，看这张图你就能很好地理解容器探针的工作流程了：</p><p><img src=\"https://static001.geekbang.org/resource/image/64/d9/64fde55dd2eab68f9968ff34218646d9.jpg?wh=1920x1200\" alt=\"图片\"></p><h2>如何使用容器状态探针</h2><p>掌握了资源配额和检查探针的概念，我们进入今天的高潮部分，看看如何在Pod的YAML描述文件里定义探针。</p><p>startupProbe、livenessProbe、readinessProbe这三种探针的配置方式都是一样的，关键字段有这么几个：</p><ul>\n<li><strong>periodSeconds</strong>，执行探测动作的时间间隔，默认是10秒探测一次。</li>\n<li><strong>timeoutSeconds</strong>，探测动作的超时时间，如果超时就认为探测失败，默认是1秒。</li>\n<li><strong>successThreshold</strong>，连续几次探测成功才认为是正常，对于startupProbe和livenessProbe来说它只能是1。</li>\n<li><strong>failureThreshold</strong>，连续探测失败几次才认为是真正发生了异常，默认是3次。</li>\n</ul><p>至于探测方式，Kubernetes支持3种：Shell、TCP Socket、HTTP GET，它们也需要在探针里配置：</p><ul>\n<li><strong>exec</strong>，执行一个Linux命令，比如ps、cat等等，和container的command字段很类似。</li>\n<li><strong>tcpSocket</strong>，使用TCP协议尝试连接容器的指定端口。</li>\n<li><strong>httpGet</strong>，连接端口并发送HTTP GET请求。</li>\n</ul><p>要使用这些探针，我们必须要在开发应用时预留出“检查口”，这样Kubernetes才能调用探针获取信息。这里我还是以Nginx作为示例，用ConfigMap编写一个配置文件：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: ConfigMap\nmetadata:\n&nbsp; name: ngx-conf\n\ndata:\n&nbsp; default.conf: |\n&nbsp; &nbsp; server {\n&nbsp; &nbsp; &nbsp; listen 80;\n&nbsp; &nbsp; &nbsp; location = /ready {\n&nbsp; &nbsp; &nbsp; &nbsp; return 200 'I am ready';\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n</code></pre><p>你可能不是太熟悉Nginx的配置语法，我简单解释一下。</p><p>在这个配置文件里，我们启用了80端口，然后用 <code>location</code> 指令定义了HTTP路径 <code>/ready</code>，它作为对外暴露的“检查口”，用来检测就绪状态，返回简单的200状态码和一个字符串表示工作正常。</p><p>现在我们来看一下Pod里三种探针的具体定义：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; name: ngx-pod-probe\n\nspec:\n&nbsp; volumes:\n&nbsp; - name: ngx-conf-vol\n&nbsp; &nbsp; configMap:\n&nbsp; &nbsp; &nbsp; name: ngx-conf\n\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n&nbsp; &nbsp; ports:\n&nbsp; &nbsp; - containerPort: 80\n&nbsp; &nbsp; volumeMounts:\n&nbsp; &nbsp; - mountPath: /etc/nginx/conf.d\n&nbsp; &nbsp; &nbsp; name: ngx-conf-vol\n\n&nbsp; &nbsp; startupProbe:\n&nbsp; &nbsp; &nbsp; periodSeconds: 1\n&nbsp; &nbsp; &nbsp; exec:\n&nbsp; &nbsp; &nbsp; &nbsp; command: [\"cat\", \"/var/run/nginx.pid\"]\n\n&nbsp; &nbsp; livenessProbe:\n&nbsp; &nbsp; &nbsp; periodSeconds: 10\n&nbsp; &nbsp; &nbsp; tcpSocket:\n&nbsp; &nbsp; &nbsp; &nbsp; port: 80\n\n&nbsp; &nbsp; readinessProbe:\n&nbsp; &nbsp; &nbsp; periodSeconds: 5\n&nbsp; &nbsp; &nbsp; httpGet:\n&nbsp; &nbsp; &nbsp; &nbsp; path: /ready\n&nbsp; &nbsp; &nbsp; &nbsp; port: 80\n</code></pre><p>StartupProbe使用了Shell方式，使用 <code>cat</code> 命令检查Nginx存在磁盘上的进程号文件（/var/run/nginx.pid），如果存在就认为是启动成功，它的执行频率是每秒探测一次。</p><p>LivenessProbe使用了TCP Socket方式，尝试连接Nginx的80端口，每10秒探测一次。</p><p>ReadinessProbe使用的是HTTP GET方式，访问容器的 <code>/ready</code> 路径，每5秒发一次请求。</p><p>现在我们用 <code>kubectl apply</code> 创建这个Pod，然后查看它的状态：</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/6c/ac6b405074a5e93d33dd7154f299486c.png?wh=1272x174\" alt=\"图片\"></p><p>当然，因为这个Nginx应用非常简单，它启动后探针的检查都会是正常的，你可以用 <code>kubectl logs</code> 来查看Nginx的访问日志，里面会记录HTTP GET探针的执行情况：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/6b/edf9fb3337bf3dd5a9b2fba8dfbc326b.png?wh=1920x527\" alt=\"图片\"></p><p>从截图中你可以看到，Kubernetes正是以大约5秒一次的频率，向URI <code>/ready</code> 发送HTTP请求，不断地检查容器是否处于就绪状态。</p><p>为了验证另两个探针的工作情况，我们可以修改探针，比如把命令改成检查错误的文件、错误的端口号：</p><pre><code class=\"language-yaml\">    startupProbe:\n      exec:\n        command: [\"cat\", \"nginx.pid\"]  #错误的文件\n\n    livenessProbe:\n      tcpSocket:\n        port: 8080                     #错误的端口号\n</code></pre><p>然后我们重新创建Pod对象，观察它的状态。</p><p>当StartupProbe探测失败的时候，Kubernetes就会不停地重启容器，现象就是 <code>RESTARTS</code> 次数不停地增加，而livenessProbe和readinessProbePod没有执行，Pod虽然是Running状态，也永远不会READY：</p><p><img src=\"https://static001.geekbang.org/resource/image/90/7f/900468e4b86c241a53256584e514b47f.png?wh=1348x182\" alt=\"图片\"></p><p>因为failureThreshold的次数默认是三次，所以Kubernetes会连续执行三次livenessProbe TCP Socket探测，每次间隔10秒，30秒之后都失败才重启容器：</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/e1/c31bf2cf6672c62ebd42f305534dbae1.png?wh=1366x178\" alt=\"图片\"></p><p>你也可以自己试着改一下readinessProbe，看看它失败时Pod会是什么样的状态。</p><h2>小结</h2><p>好了，今天我们学习了两种为Pod配置运行保障的方式：Resources和Probe。Resources就是为容器加上资源限制，而Probe就是主动健康检查，让Kubernetes实时地监控应用的运行状态。</p><p>再简单小结一下今天的内容：</p><ol>\n<li>资源配额使用的是cgroup技术，可以限制容器使用的CPU和内存数量，让Pod合理利用系统资源，也能够让Kubernetes更容易调度Pod。</li>\n<li>Kubernetes定义了Startup、Liveness、Readiness三种健康探针，它们分别探测应用的启动、存活和就绪状态。</li>\n<li>探测状态可以使用Shell、TCP Socket、HTTP Get三种方式，还可以调整探测的频率和超时时间等参数。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你能够解释一下Liveness和Readiness这两种探针的区别吗？</li>\n<li>你认为Shell、TCP Socket、HTTP GET这三种探测方式各有什么优缺点？</li>\n</ol><p>欢迎在下方留言区留言参与讨论，课程快要完结了，感谢你坚持学习了这么久。我们下节课再见。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/68/5eef65a1abf0cc4ff70c0e3df7a93168.jpg?wh=1920x2580\" alt=\"图片\"></p>","neighbors":{"left":{"article_title":"27｜滚动更新：如何做到平滑的应用升级降级？","id":547301},"right":{"article_title":"29｜集群管理：如何用名字空间分隔系统资源？","id":548750}},"comments":[{"had_liked":false,"id":358221,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"北京","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/5066026c.jpg","comment_is_top":false,"comment_ctime":1664077683,"is_pvip":false,"replies":[{"id":130369,"content":"good","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1664146470,"ip_address":"北京","comment_id":358221,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"思考题：\n1. \nLiveness 和 Readiness 都是循环探测，Liveness 探测失败会重启，而 Readiness 探测失败不会重启，可以从 Pod 状态 看出重启次数。\n两者都可以单独使用，这时差异不大。\n如果同时使用两者，Liveness 主要是确认应用运行着或者说活着，而 Readiness 是确认应用提供着服务或者说服务就绪着（可以接收流量）。\n\n2. \nShell 是从容器内部探测，TCP Socket 和 HTTP GET 都是在容器外部探测。 TCP Socket 基于端口的探测，端口打开即成功；HTTP GET 更丰富些，可以是端口 + 路径。\n","like_count":27,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588816,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664146470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355549,"user_name":"新时代农民工","can_delete":false,"product_type":"c1","uid":1225689,"ip_address":"北京","ucode":"0AA60DEDF6C062","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/d9/cf061262.jpg","comment_is_top":false,"comment_ctime":1661487211,"is_pvip":false,"replies":[{"id":129380,"content":"Startup成功之后才能执行后两个探针，后面两个是并行的。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1661492700,"ip_address":"北京","comment_id":355549,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"老师请问，Startup、Liveness、Readiness三种探针是按顺序执行还是并行呢？","like_count":25,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585338,"discussion_content":"Startup成功之后才能执行后两个探针，后面两个是并行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661492700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360572,"user_name":"邵涵","can_delete":false,"product_type":"c1","uid":1069135,"ip_address":"上海","ucode":"43A16551A82F2F","user_header":"","comment_is_top":false,"comment_ctime":1666666947,"is_pvip":false,"replies":[{"id":131176,"content":"great","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1666668803,"ip_address":"上海","comment_id":360572,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"如老师原文所示，在startupProbe或livenessProbe探测失败之后，pod的status初始都是running。不过，在容器重启几次之后，pod的status会变为CrashLoopBackOff\n\n如果startupProbe和livenessProbe探测成功，readinessProbe探测失败，pod的ready一直是0&#47;1，status一直是running，当然，也不会重启\nNAME            READY   STATUS    RESTARTS   AGE\nngx-pod-probe   0&#47;1     Running   0          27m","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591575,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666668803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357105,"user_name":"拾掇拾掇","can_delete":false,"product_type":"c1","uid":1051873,"ip_address":"北京","ucode":"D775F374C2A1D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","comment_is_top":false,"comment_ctime":1662959493,"is_pvip":false,"replies":[{"id":129984,"content":"是的，可以参考一些知名镜像的YAML ，看看它们是怎么做健康检查的。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1663031213,"ip_address":"北京","comment_id":357105,"utype":1}],"discussion_count":2,"race_medal":1,"score":2,"product_id":100114501,"comment_content":"Shell：不用知道端口；TCP Socket、HTTP GET这2个都得知道端口，用的时候还得显示调用端口吧","like_count":6,"discussions":[{"author":{"id":3043158,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLrkFibRDXLAgZDg1zGly2AsjnXOCbC3YhgLV4icmzN9K93yWDkD70xib8K9TMBy4EiclJKgcDhYsmQzw/132","nickname":"Geek_2b3509","note":"","ucode":"C625601976EC4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594689,"discussion_content":"在哪里可以找到一些知名镜像yaml啊老师\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1669290544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587392,"discussion_content":"是的，可以参考一些知名镜像的YAML ，看看它们是怎么做健康检查的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663031213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376964,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"北京","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1687776779,"is_pvip":false,"replies":[{"id":137421,"content":"great","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1687916130,"ip_address":"北京","comment_id":376964,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"思考题\n1.  liveness 和 readiness 探针分别代表程序正常运行和可以提供服务。要探索两者的区别就要看应用在这两种状态下的差异，即在程序运行和提供服务之间，差了些什么。程序正常运行，可能代表代码没有 bug，没有硬性的致命的问题，但是要让它达到可以提供服务的程度，还需要一些条件，比如：启动时可能需要缓存预热，这个阶段可能就是 liveness 成功但 readiness 失败。可能 pod 的负载过大，需要进行降级，这就需要将 readness 从成功改成失败。\n所以可能两种探针失败也有不同的含义：liveness 失败代表应用运行出现比较致命问题，需要重启来续命。readiness 失败代表程序不太健康，这种不健康是可以恢复的。\n2. 三种探测方式应用的使用情境不同吧，shell 是在操作系统层面上的探测，毕竟跑起来的业务代码不方便（可能也不应该？）关心 OS。TCP Socket 关心的是网络，关心的是不同进程间的基础通信？http Get 是在应用层面上的探测，感觉它应该和业务的关联比较紧密。\n\n忽然感觉 kubernetes 真厉害，三种探针和三种探测方式，基本上可以检测出各个层面的问题。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622089,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687916130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367647,"user_name":"Lorry","can_delete":false,"product_type":"c1","uid":1066409,"ip_address":"四川","ucode":"BD4754D0F1D786","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","comment_is_top":false,"comment_ctime":1675400357,"is_pvip":false,"replies":[{"id":133879,"content":"great","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1675408447,"ip_address":"北京","comment_id":367647,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"Liveness指的是进程是否存在，Readiness则是指是否能够正常提供服务，所以可以使用tcp&#39;协议检测Liveness，进程存在端口即存在，使用http检测服务，只有服务启动了参能够相应请求。\n\nShell是系统内进程级别交互，所以只能够本地访问，Tcp可以跨机器访问，但是访问的级别比较低，不能够获得顶层数据，Http是协议层数据，可以拿到应用层的服务信息，但是关注顶层信息，底层故障，顶层无法提供有价值信息了","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601770,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675408448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1111899,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/5b/d2e7c2c4.jpg","nickname":"时隐时现","note":"","ucode":"DA4D622FF84920","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":603026,"discussion_content":"23年2月了老师还在回复问题，态度让人敬佩","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675910559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":601770,"ip_address":"广东","group_id":0},"score":603026,"extra":""}]}]},{"had_liked":false,"id":358667,"user_name":"Geek_2ce074","can_delete":false,"product_type":"c1","uid":2940560,"ip_address":"北京","ucode":"628B36B652CFD2","user_header":"","comment_is_top":false,"comment_ctime":1664527649,"is_pvip":false,"replies":[{"id":130463,"content":"当然是Kubernetes，不能内部具体如何运转的就没细研究了。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1664593465,"ip_address":"北京","comment_id":358667,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"老师 tcpSocket探测是由谁发起的","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589245,"discussion_content":"当然是Kubernetes，不能内部具体如何运转的就没细研究了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664593465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356061,"user_name":"YueShi","can_delete":false,"product_type":"c1","uid":1625530,"ip_address":"北京","ucode":"8F7AFAE4641A7D","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/ba/3a348f2d.jpg","comment_is_top":false,"comment_ctime":1661941244,"is_pvip":true,"replies":[{"id":129629,"content":"是的，这些都是Kubernetes为我们提供的回调接口。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1661997415,"ip_address":"北京","comment_id":356061,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"&quot;postStart&quot;&#39;&quot;preStop&quot;感觉可以做CICD，或者各种webhock钩子，或者简单的通知","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586129,"discussion_content":"是的，这些都是Kubernetes为我们提供的回调接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661997415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355563,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1661498766,"is_pvip":false,"replies":[{"id":129423,"content":"\n1.每个Nginx都是运行在pod里，被容器环境隔离，当然不会冲突，可以复习一下入门篇。\n\n2. 这个暂时没看出是什么原因。\n\n3.竖线是YAML 的长字符串语法，看前面的课程。\n\n4.是逻辑核。","user_name":"作者回复","user_name_real":"作者","uid":1181974,"ctime":1661600676,"ip_address":"北京","comment_id":355563,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"请教老师几个问题：\nQ1：第27讲中，创建4个nginx实例，没有端口冲突问题吗？\n四个nginx实例，两个在master，两个在worker。同一台机器上有两个pod，而pod的定义是一样的，即端口相同，那么，不存在端口冲突问题吗？\n\nQ2：第27讲中，创建四个nginx实例后，不能访问nginx的欢迎页。\nservice也创建了。 用虚拟机上浏览器来访问127.0.0.1，失败，\n执行“kubectl port-forward svc&#47;ngx-svc 8080:80 &amp;”以后，\n浏览器上访问127.0.0.1:8080，报错：\nE0826 14:32:28.734987   42769 portforward.go:391] error copying from local connection to remote stream: read tcp4 127.0.0.1:8080-&gt;127.0.0.1:59752: read: connection reset by peer\n\nQ3：nginx的配置文件中，竖线是什么意思？\ndata: default.conf: |， 这里的竖线是什么意思？ \n\nQ4：操作系统能够看到的CPU，是指逻辑核吗？还是时间片？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585497,"discussion_content":"\n1.每个Nginx都是运行在pod里，被容器环境隔离，当然不会冲突，可以复习一下入门篇。\n\n2. 这个暂时没看出是什么原因。\n\n3.竖线是YAML 的长字符串语法，看前面的课程。\n\n4.是逻辑核。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661600676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/5066026c.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588736,"discussion_content":"查看实验环境 CPU：lscpu","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664033533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386525,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"吉林","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1705025279,"is_pvip":true,"replies":[{"id":140900,"content":"great","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1705042522,"ip_address":"上海","comment_id":386525,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100114501,"comment_content":"Startup，启动探针，用来检查应用是否已经启动成功，适合那些有大量初始化工作要做，启动很慢的应用。Liveness，存活探针，用来检查应用是否正常运行，是否存在死锁、死循环。\nReadiness，就绪探针，用来检查应用是否可以接收流量，是否能够对外提供服务。\n--- \nstartupProbe        探测失败-会重启:  \n\t状态: ContainerCreating -&gt; \n\t\t\tRunning状态--&gt; CrashLoopBackOff状态(重启过程中看到有在2个状态横跳, ContainerCreating不确定没看到)\n\tNAME                       READY   STATUS             RESTARTS      AGE\n\tngx-pod-probe              0&#47;1     Running   \t\t  1 (10s ago)   104s\n\tngx-pod-probe              0&#47;1     CrashLoopBackOff   5 (10s ago)   104s\n\nlivenessProbe探测失败-会重启: \n\t那么会持续默认5次重启(我试的默认是重启5次:RESTARTS=5), 这个过程中pod的状态会是变化Running , 重启次数完毕仍然未成功,那么状态会变成CrashLoopBackOff\n\t状态:  ContainerCreating -&gt; Running --&gt; CrashLoopBackOff\n\tREADY:   1&#47;1 -&gt; 0&#47;1\n\tNAME                       READY   STATUS    RESTARTS     AGE\n\tngx-pod-probe              1&#47;1     Running   2 (5s ago)   65s\n\tngx-pod-probe              0&#47;1     CrashLoopBackOff   5 (8s ago)   3m48s\n\nreadinessProbe 探测失败 也会重启: \n\t状态: Running --&gt; CrashLoopBackOff \n\tREADY:   0&#47;1\n\n\tNAME                       READY   STATUS              RESTARTS   AGE\n\tngx-pod-probe              0&#47;1     ContainerCreating   0          2s\n\tngx-pod-probe              0&#47;1     Running   1 (4s ago)   10s\n\tngx-pod-probe              0&#47;1     CrashLoopBackOff   2 (6s ago)   20s\n\tngx-pod-probe              0&#47;1     Running   3 (19s ago)   33s\n\tngx-pod-probe              0&#47;1     CrashLoopBackOff   5 (38s ago)   2m12s","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635682,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705042522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382752,"user_name":"onepieceJT2018","can_delete":false,"product_type":"c1","uid":1112182,"ip_address":"陕西","ucode":"C8C214C3D5D285","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/76/3db69173.jpg","comment_is_top":false,"comment_ctime":1697976553,"is_pvip":true,"replies":[{"id":139397,"content":"这个没深入研究过，可以钻研一下kubernetes的文档。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1698063539,"ip_address":"澳大利亚","comment_id":382752,"utype":1}],"discussion_count":1,"race_medal":1,"score":3,"product_id":100114501,"comment_content":"探针失败了有什么发 alert 的集成方案吗 webhook 到 slack 微信 钉钉 之类","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630052,"discussion_content":"这个没深入研究过，可以钻研一下kubernetes的文档。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698063539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373164,"user_name":"WenjieXu","can_delete":false,"product_type":"c1","uid":1218138,"ip_address":"上海","ucode":"E76EF8A64EABF2","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/5a/45a56b3a.jpg","comment_is_top":false,"comment_ctime":1682174948,"is_pvip":false,"replies":[{"id":136318,"content":"探针不是必须的，如果没有探针kubernetes就不会检查，直接认为是ready。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1682221784,"ip_address":"北京","comment_id":373164,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"老师，如果一个pod需要加入到service中，是否意味着必须要配置readinessProbe？还是默认不配置的话，k8s会认为是up的，放到对应service的ep对象里？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":615357,"discussion_content":"探针不是必须的，如果没有探针kubernetes就不会检查，直接认为是ready。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1682221784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366932,"user_name":"Geek_60e02d","can_delete":false,"product_type":"c1","uid":3388109,"ip_address":"甘肃","ucode":"99C0849CD1981E","user_header":"","comment_is_top":false,"comment_ctime":1674629262,"is_pvip":false,"replies":[{"id":133702,"content":"我的理解是这样的，想要知道更准确的答案就要再去查资料了。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1674651859,"ip_address":"北京","comment_id":366932,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"请教下Pod启动后，什么时候会加入service的负载均衡列表？是startup probe成功后吗？然后readyness probe失败后，会从service中移除，那么，是不是说，startup probe成功到readyness失败期间，流量会进入这个没有ready的Pod呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600633,"discussion_content":"我的理解是这样的，想要知道更准确的答案就要再去查资料了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674651859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255198,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRCf8vWbWibajdSaMtCM1OzPQ6uPhblgL4zXJvKoaQYVmialqFqr0NIdD6Dlm1F5icOBxiaXvUcQs4BA/132","nickname":"sgcls","note":"","ucode":"F359E943BF6D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650502,"discussion_content":"应该是 readiness probe 成功后才会加入 service 吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725128135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365352,"user_name":"liubiqianmoney","can_delete":false,"product_type":"c1","uid":1110679,"ip_address":"北京","ucode":"E5EAD53FEA01E1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZicRP0FZ78kT68wEGeWzPnxrF4s3Ea36XdMA2pj2TAbU3eibVt7KqzS5B7LbWMhRfSc3XEUL3Hrjw/132","comment_is_top":false,"comment_ctime":1672379646,"is_pvip":false,"replies":[{"id":133073,"content":"可以的。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1672388493,"ip_address":"北京","comment_id":365352,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"Cgroup除了限制CPU和内存资源外，可以限制磁盘IOPS吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597981,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672388494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364252,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"北京","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/45ffdca3.jpg","comment_is_top":false,"comment_ctime":1670729426,"is_pvip":false,"replies":[{"id":132412,"content":"thanks.","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1670807191,"ip_address":"北京","comment_id":364252,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"终于有人把三种probe给讲清楚了，很赞","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596237,"discussion_content":"thanks.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670807191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361882,"user_name":"小江爱学术","can_delete":false,"product_type":"c1","uid":2628601,"ip_address":"北京","ucode":"554F40C6627AF4","user_header":"https://static001.geekbang.org/account/avatar/00/28/1b/f9/018197f1.jpg","comment_is_top":false,"comment_ctime":1667955778,"is_pvip":false,"replies":[{"id":131632,"content":"探针是外部发起请求，而检查检查的逻辑必须是容器内部的应用来处理。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1667959774,"ip_address":"北京","comment_id":361882,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"老师，有一个疑问，这些探针请求是由k8s发起的，是不是都是在容器外部对容器进行访问的呢，还是说实际上是由容器内自己负责对自己进行健康检查。\n，","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593109,"discussion_content":"探针是外部发起请求，而检查检查的逻辑必须是容器内部的应用来处理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1667959775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358576,"user_name":"朱雯","can_delete":false,"product_type":"c1","uid":1035744,"ip_address":"北京","ucode":"064C45FBF6B51F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","comment_is_top":false,"comment_ctime":1664438920,"is_pvip":false,"replies":[{"id":130457,"content":"探针只是一个shell命令，不会出现timeout吧，用logs看看日志具体显示的是什么。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1664459863,"ip_address":"北京","comment_id":358576,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"老师好，我这个yml文件使用探针，直接给我显示&#47;var&#47;run&#47;nginx.pid timeout，但是实际上又是running状态，所以不太理解，请教一下老师是什么情况\napiVersion: apps&#47;v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  annotations:\n    kubernetes.io&#47;change-cause: update to v18 ngx=latest\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2\n  minReadySeconds: 15\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: nginx-config\n          mountPath: &#47;etc&#47;nginx&#47;conf.d\n        resources:\n          requests:\n            cpu: 1m\n            memory: 100Mi\n          limits:\n            cpu: 1m\n            memory: 200Mi\n        startupProbe:\n          periodSeconds: 1\n          exec:\n            command: [&quot;cat&quot;, &quot;&#47;var&#47;run&#47;nginx.pid&quot;]\n\n        livenessProbe:\n          periodSeconds: 10\n          tcpSocket:\n            port: 80\n\n        readinessProbe:\n          periodSeconds: 5\n          httpGet:\n            path: &#47;ready\n            port: 80\n      volumes:\n      - name: nginx-config\n        configMap:\n          name: ngx-conf ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589164,"discussion_content":"探针只是一个shell命令，不会出现timeout吧，用logs看看日志具体显示的是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664459863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358242,"user_name":"一路小跑","can_delete":false,"product_type":"c1","uid":1109238,"ip_address":"北京","ucode":"C50FA3546899FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/f6/f615ed26.jpg","comment_is_top":false,"comment_ctime":1664110298,"is_pvip":false,"replies":[{"id":130370,"content":"这应该算是内部的实现机制了，没有细研究过，会go语言的话可以看源码。","user_name":"作者回复","user_name_real":"编辑","uid":1181974,"ctime":1664146528,"ip_address":"北京","comment_id":358242,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100114501,"comment_content":"请教老师2个问题啊：\n1.如果还想追加几个自定义的健康检查的类型，应该从哪个方面入手好呢?\n2. 另外，针对健康检查失败的处理预案，可以自定义么，需要学习哪个API对象？（比如用go做一些定制）","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588817,"discussion_content":"这应该算是内部的实现机制了，没有细研究过，会go语言的话可以看源码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664146528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}