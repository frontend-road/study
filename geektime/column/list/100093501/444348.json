{"id":444348,"title":"15｜同构复合类型：从定长数组到变长切片","content":"<p>你好，我是Tony Bai。</p><p>在前面的学习中，我们详细讲解了Go基本数据类型，主要包括数值类型与字符串类型。但是，仅仅学习这些基本数据类型建立的抽象概念，还远不足以让我们应对真实世界的各种问题。</p><p>比如，我们要表示一组数量固定且连续的整型数，建立一个能表示书籍的抽象数据类型，这个类型中包含书名、页数、出版信息等；又或者，我们要建立一个学号与学生姓名的映射表等。这些问题基本数据类型都无法解决，所以我们需要一类新类型来建立这些抽象，丰富Go语言的表现力。</p><p>这种新类型是怎么样的呢？我们可以通过这些例子总结出新类型的一个特点，那就是它们都是由多个同构类型（相同类型）或异构类型（不同类型）的元素的值组合而成的。这类数据类型在Go语言中被称为复合类型。</p><p>从这一节课开始，我们就来讲解Go语言的复合类型。Go语言原生内置了多种复合数据类型，包括数组、切片（slice）、map、结构体，以及像channel这类用于并发程序设计的高级复合数据类型。那么这一节课，我们先来学习一下最简单的复合类型：数组，以及与数组有着密切关系的切片。</p><p>下面我们就先从最基础的复合数据类型，数组开始。</p><h2>数组有哪些基本特性？</h2><p>我们先来看数组类型的概念。Go语言的数组是一个长度固定的、由同构类型元素组成的连续序列。通过这个定义，我们可以识别出Go的数组类型包含两个重要属性：<strong>元素的类型</strong>和<strong>数组长度</strong>（元素的个数）。这两个属性也直接构成了Go语言中数组类型变量的声明：</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">var arr [N]T\n</code></pre><p>这里我们声明了一个数组变量arr，它的类型为[N]T，其中元素的类型为T，数组的长度为N。这里，我们要注意，数组元素的类型可以为任意的Go原生类型或自定义类型，而且数组的长度必须在声明数组变量时提供，Go编译器需要在编译阶段就知道数组类型的长度，所以，我们只能用整型数字面值或常量表达式作为N值。</p><p>通过这句代码我们也可以看到，<strong>如果两个数组类型的元素类型T与数组长度N都是一样的，那么这两个数组类型是等价的，如果有一个属性不同，它们就是两个不同的数组类型。</strong>下面这个示例很好地诠释了这一点：</p><pre><code class=\"language-plain\">func foo(arr [5]int) {}\nfunc main() {\n    var arr1 [5]int\n    var arr2 [6]int\n    var arr3 [5]string\n\n    foo(arr1) // ok\n    foo(arr2) // 错误：[6]int与函数foo参数的类型[5]int不是同一数组类型\n    foo(arr3) // 错误：[5]string与函数foo参数的类型[5]int不是同一数组类型\n}  \n</code></pre><p>在这段代码里，arr2与arr3两个变量的类型分别为[6]int和 [5]string，前者的长度属性与[5]int不一致，后者的元素类型属性与[5]int不一致，因此这两个变量都不能作为调用函数foo时的实际参数。</p><p>了解了数组类型的逻辑定义后，我们再来看看数组类型在内存中的实际表示是怎样的，这是数组区别于其他类型，也是我们区分不同数组类型的根本依据。</p><p>数组类型不仅是逻辑上的连续序列，而且在实际内存分配时也占据着一整块内存。Go编译器在为数组类型的变量实际分配内存时，会为Go数组分配一整块、可以容纳它所有元素的连续内存，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/43/96/43d607968a2ce081587dd0ca1b03ac96.jpg?wh=1920x678\" alt=\"图片\"></p><p>我们从这个数组类型的内存表示中可以看出来，这块内存全部空间都被用来表示数组元素，所以说这块内存的大小，就等于各个数组元素的大小之和。如果两个数组所分配的内存大小不同，那么它们肯定是不同的数组类型。Go提供了预定义函数len可以用于获取一个数组类型变量的长度，通过unsafe包提供的Sizeof函数，我们可以获得一个数组变量的总大小，如下面代码：</p><pre><code class=\"language-plain\">var arr = [6]int{1, 2, 3, 4, 5, 6}\nfmt.Println(\"数组长度：\", len(arr))           // 6\nfmt.Println(\"数组大小：\", unsafe.Sizeof(arr)) // 48\n</code></pre><p>数组大小就是所有元素的大小之和，这里数组元素的类型为int。在64位平台上，int类型的大小为8，数组arr一共有6个元素，因此它的总大小为6x8=48个字节。</p><p>和基本数据类型一样，我们声明一个数组类型变量的同时，也可以显式地对它进行初始化。如果不进行显式初始化，那么数组中的元素值就是它类型的零值。比如下面的数组类型变量arr1的各个元素值都为0：</p><pre><code class=\"language-plain\">var arr1 [6]int // [0 0 0 0 0 0]\n</code></pre><p>如果要显式地对数组初始化，我们需要在右值中显式放置数组类型，并通过大括号的方式给各个元素赋值（如下面代码中的arr2）。当然，我们也可以忽略掉右值初始化表达式中数组类型的长度，用“…”替代，Go编译器会根据数组元素的个数，自动计算出数组长度（如下面代码中的arr3）：</p><pre><code class=\"language-plain\">var arr2 = [6]int {\n    11, 12, 13, 14, 15, 16,\n} // [11 12 13 14 15 16]\n\nvar arr3 = [...]int { \n    21, 22, 23,\n} // [21 22 23]\nfmt.Printf(\"%T\\n\", arr3) // [3]int\n</code></pre><p>但如果我们要对一个长度较大的稀疏数组进行显式初始化，这样逐一赋值就太麻烦了，还有什么更好的方法吗？我们可以通过使用下标赋值的方式对它进行初始化，比如下面代码中的arr4：</p><pre><code class=\"language-plain\">var arr4 = [...]int{\n    99: 39, // 将第100个元素(下标值为99)的值赋值为39，其余元素值均为0\n}\nfmt.Printf(\"%T\\n\", arr4) // [100]int\n</code></pre><p>通过数组类型变量以及下标值，我们可以很容易地访问到数组中的元素值，并且这种访问是十分高效的，不存在Go运行时带来的额外开销。但你要记住，数组的<strong>下标值是从0开始的</strong>。如果下标值超出数组长度范畴，或者是负数，那么Go编译器会给出错误提示，防止访问溢出：</p><pre><code class=\"language-plain\">var arr = [6]int{11, 12, 13, 14, 15, 16}\nfmt.Println(arr[0], arr[5]) // 11 16\nfmt.Println(arr[-1])        // 错误：下标值不能为负数\nfmt.Println(arr[8])         // 错误：小标值超出了arr的长度范围\n</code></pre><h2>多维数组怎么解？</h2><p>上面这些元素类型为非数组类型的数组的都是简单的一维数组，但Go语言中，其实还有更复杂的数组类型，多维数组。也就是说，数组类型自身也可以作为数组元素的类型，这样就会产生<strong>多维数组</strong>，比如下面的变量mArr的类型就是一个多维数组[2] [3][4]int：</p><pre><code class=\"language-plain\">var mArr [2][3][4]int\n</code></pre><p>多维数组也不难理解，我们以上面示例中的多维数组类型为例，我们从左向右逐维地去看，这样我们就可以将一个多维数组分层拆解成这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/27/d3/274f3fc9e753b416f5c0615d256a99d3.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们从上向下看，首先我们将mArr这个数组看成是一个拥有两个元素，且元素类型都为[3] [4]int的数组，就像图中最上层画的那样。这样，mArr的两个元素分别为mArr[0]和mArr [1]，它们的类型均为[3] [4]int，也就是说它们都是二维数组。</p><p>而以mArr[0]为例，我们可以将其看成一个拥有3个元素且元素类型为[4]int的数组，也就是图中中间层画的那样。这样mArr[0]的三个元素分别为mArr[0][0]、mArr[0][1]以及mArr[0][2]，它们的类型均为[4]int，也就是说它们都是一维数组。</p><p>图中的最后一层就是mArr[0]的三个元素，以及mArr[1]的三个元素的各自展开形式。以此类推，你会发现，无论多维数组究竟有多少维，我们都可以将它从左到右逐一展开，最终化为我们熟悉的一维数组。</p><p>不过，虽然数组类型是Go语言中最基础的复合数据类型，但是在使用中它也会有一些问题。数组类型变量是一个整体，这就意味着一个数组变量表示的是整个数组。这点与C语言完全不同，在C语言中，数组变量可视为指向数组第一个元素的指针。这样一来，无论是参与迭代，还是作为实际参数传给一个函数/方法，Go传递数组的方式都是纯粹的值拷贝，这会带来较大的内存拷贝开销。</p><p>这时，你可能会想到我们可以使用指针的方式，来向函数传递数组。没错，这样做的确可以避免性能损耗，但这更像是C语言的惯用法。<strong>其实，Go语言为我们提供了一种更为灵活、更为地道的方式 ，切片，来解决这个问题。</strong>它的优秀特性让它成为了Go&nbsp;语言中最常用的同构复合类型。</p><h2>切片是怎么一回事？</h2><p>我们前面提到过，数组作为最基本同构类型在Go语言中被保留了下来，但数组在使用上确有两点不足：固定的元素个数，以及传值机制下导致的开销较大。于是Go设计者们又引入了另外一种同构复合类型：切片（slice），来弥补数组的这两处不足。</p><p>切片和数组就像两个一母同胞的亲兄弟，长得像，但又各有各的行为特点。我们可以先声明并初始化一个切片变量看看：</p><pre><code class=\"language-plain\">var nums = []int{1, 2, 3, 4, 5, 6}\n</code></pre><p>我们看到与数组声明相比，切片声明仅仅是少了一个“长度”属性。去掉“长度”这一束缚后，切片展现出更为灵活的特性，这些特性我们后面再分析。</p><p>虽然不需要像数组那样在声明时指定长度，但切片也有自己的长度，只不过这个长度不是固定的，而是随着切片中元素个数的变化而变化的。我们可以通过len函数获得切片类型变量的长度，比如上面那个切片变量的长度就是6:</p><pre><code class=\"language-plain\">fmt.Println(len(nums)) // 6\n</code></pre><p>而且，通过Go内置函数append，我们可以动态地向切片中添加元素。当然，添加后切片的长度也就随之发生了变化，如下面代码所示：</p><pre><code class=\"language-plain\">nums = append(nums, 7) // 切片变为[1 2 3 4 5 6 7]\nfmt.Println(len(nums)) // 7\n</code></pre><p>到这里，我想你已经初步了解切片类型的一些基础信息了。我们前面也说，相比数组类型，切片展现了更为灵活的特性，这些特性是怎么样的呢？现在我们深入它的实现原理看看。</p><h2>Go是如何实现切片类型的？</h2><p>Go切片在运行时其实是一个三元组结构，它在Go运行时中的表示如下：</p><pre><code class=\"language-plain\">type slice struct {\n    array unsafe.Pointer\n    len   int\n    cap   int\n}\n</code></pre><p>我们可以看到，每个切片包含三个字段：</p><ul>\n<li>array: 是指向底层数组的指针；</li>\n<li>len: 是切片的长度，即切片中当前元素的个数；</li>\n<li>cap: 是底层数组的长度，也是切片的最大容量，cap值永远大于等于len值。</li>\n</ul><p>如果我们用这个三元组结构表示切片类型变量nums，会是这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/22/d1dcfdb6fd74c88ca300212d07b04422.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到，<strong>Go编译器会自动为每个新创建的切片</strong>，建立一个底层数组，默认底层数组的长度与切片初始元素个数相同。我们还可以用以下几种方法创建切片，并指定它底层数组的长度。</p><p><strong>方法一：通过make函数来创建切片，并指定底层数组的长度。</strong>我们直接看下面这行代码：</p><pre><code class=\"language-plain\">sl := make([]byte, 6, 10) // 其中10为cap值，即底层数组长度，6为切片的初始长度\n</code></pre><p>如果没有在make中指定cap参数，那么底层数组长度cap就等于len，比如：</p><pre><code class=\"language-plain\">sl := make([]byte, 6) // cap = len = 6\n</code></pre><p>到这里，你肯定会有一个问题，为什么上面图中nums切片的底层数组长度为12，而不是初始的len值6呢？你可以先自己思考一下，我们在后面再细讲。</p><p><strong>方法二：采用array[low : high : max]语法基于一个已存在的数组创建切片。<strong>这种方式被称为</strong>数组的切片化</strong>，比如下面代码：</p><pre><code class=\"language-plain\">arr := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nsl := arr[3:7:9]\n</code></pre><p>我们基于数组arr创建了一个切片sl，这个切片sl在运行时中的表示是这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/96/34/96407488137f185d860c6c3624072f34.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到，基于数组创建的切片，它的起始元素从low所标识的下标值开始，切片的长度（len）是high - low，它的容量是max - low。而且，由于切片sl的底层数组就是数组arr，对切片sl中元素的修改将直接影响数组arr变量。比如，如果我们将切片的第一个元素加10，那么数组arr的第四个元素将变为14：</p><pre><code class=\"language-plain\">sl[0] += 10\nfmt.Println(\"arr[3] =\", arr[3]) // 14\n</code></pre><p>这样看来，<strong>切片好比打开了一个访问与修改数组的“窗口”</strong>，通过这个窗口，我们可以直接操作底层数组中的部分元素。这有些类似于我们操作文件之前打开的“文件描述符”（Windows上称为句柄），通过文件描述符我们可以对底层的真实文件进行相关操作。<strong>可以说，切片之于数组就像是文件描述符之于文件。</strong></p><p>在Go语言中，数组更多是“退居幕后”，承担的是底层存储空间的角色。切片就是数组的“描述符”，也正是因为这一特性，切片才能在函数参数传递时避免较大性能开销。因为我们传递的并不是数组本身，而是数组的“描述符”，而这个描述符的大小是固定的（见上面的三元组结构），无论底层的数组有多大，切片打开的“窗口”长度有多长，它都是不变的。此外，我们在进行数组切片化的时候，通常省略max，而max的默认值为数组的长度。</p><p>另外，针对一个已存在的数组，我们还可以建立多个操作数组的切片，这些切片共享同一底层数组，切片对底层数组的操作也同样会反映到其他切片中。下面是为数组arr建立的两个切片的内存表示：</p><p><img src=\"https://static001.geekbang.org/resource/image/39/c1/39da7eb01eae8fd500d7e2f617ecf1c1.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到，上图中的两个切片sl1和sl2是数组arr的“描述符”，这样的情况下，无论我们通过哪个切片对数组进行的修改操作，都会反映到另一个切片中。比如，将sl2[2]置为14，那么sl1[0]也会变成14，因为sl2[2]直接操作的是底层数组arr的第四个元素arr[3]。</p><p><strong>方法三：基于切片创建切片。</strong></p><p>不过这种切片的运行时表示原理与上面的是一样的，我这里就不多分析了，你可以自己看一下。</p><p>最后，我们回答一下前面切片变量nums在进行一次append操作后切片容量变为12的问题。这里我们要清楚一个概念：切片与数组最大的不同，就在于其长度的不定长，这种不定长需要Go运行时提供支持，这种支持就是切片的“动态扩容”。</p><h2>切片的动态扩容</h2><p>“动态扩容”指的就是，当我们通过append操作向切片追加数据的时候，如果这时切片的len值和cap值是相等的，也就是说切片底层数组已经没有空闲空间再来存储追加的值了，Go运行时就会对这个切片做扩容操作，来保证切片始终能存储下追加的新值。</p><p>前面的切片变量nums之所以可以存储下新追加的值，就是因为Go对其进行了动态扩容，也就是重新分配了其底层数组，从一个长度为6的数组变成了一个长为12的数组。</p><p>接下来，我们再通过一个例子来体会一下切片动态扩容的过程：</p><pre><code class=\"language-plain\">var s []int\ns = append(s, 11) \nfmt.Println(len(s), cap(s)) //1 1\ns = append(s, 12) \nfmt.Println(len(s), cap(s)) //2 2\ns = append(s, 13) \nfmt.Println(len(s), cap(s)) //3 4\ns = append(s, 14) \nfmt.Println(len(s), cap(s)) //4 4\ns = append(s, 15) \nfmt.Println(len(s), cap(s)) //5 8\n</code></pre><p>在这个例子中，我们看到，append会根据切片对底层数组容量的需求，对底层数组进行动态调整。具体我们一步步分析。</p><p>最开始，s初值为零值（nil），这个时候s没有“绑定”底层数组。我们先通过append操作向切片s添加一个元素11，这个时候，append会先分配底层数组u1（数组长度1），然后将s内部表示中的array指向u1，并设置len = 1, cap = 1;</p><p>接着，我们通过append操作向切片s再添加第二个元素12，这个时候len(s) = 1，cap(s) = 1，append判断底层数组剩余空间已经不能够满足添加新元素的要求了，于是它就创建了一个新的底层数组u2，长度为2（u1数组长度的2倍），并把u1中的元素拷贝到u2中，最后将s内部表示中的array指向u2，并设置len = 2, cap = 2；</p><p>然后，第三步，我们通过append操作向切片s添加了第三个元素13，这时len(s) = 2，cap(s) = 2，append判断底层数组剩余空间不能满足添加新元素的要求了，于是又创建了一个新的底层数组u3，长度为4（u2数组长度的2倍），并把u2中的元素拷贝到u3中，最后把s内部表示中的array指向u3，并设置len = 3, cap为u3数组长度，也就是4 ；</p><p>第四步，我们依然通过append操作向切片s添加第四个元素14，此时len(s) = 3, cap(s) = 4，append判断底层数组剩余空间可以满足添加新元素的要求，所以就把14放在下一个元素的位置(数组u3末尾），并把s内部表示中的len加1，变为4；</p><p>但我们的第五步又通过append操作，向切片s添加最后一个元素15，这时len(s) = 4，cap(s) = 4，append判断底层数组剩余空间又不够了，于是创建了一个新的底层数组u4，长度为8（u3数组长度的2倍），并将u3中的元素拷贝到u4中，最后将s内部表示中的array指向u4，并设置len = 5, cap为u4数组长度，也就是8。</p><p>到这里，这个动态扩容的过程就结束了。我们看到，append会根据切片的需要，在当前底层数组容量无法满足的情况下，动态分配新的数组，新数组长度会按一定规律扩展。在上面这段代码中，针对元素是int型的数组，新数组的容量是当前数组的2倍。新数组建立后，append会把旧数组中的数据拷贝到新数组中，之后新数组便成为了切片的底层数组，旧数组会被垃圾回收掉。</p><p>不过append操作的这种自动扩容行为，有些时候会给我们开发者带来一些困惑，比如基于一个已有数组建立的切片，一旦追加的数据操作触碰到切片的容量上限（实质上也是数组容量的上界)，切片就会和原数组解除“绑定”，后续对切片的任何修改都不会反映到原数组中了。我们再来看这段代码：</p><pre><code class=\"language-plain\">u := [...]int{11, 12, 13, 14, 15}\nfmt.Println(\"array:\", u) // [11, 12, 13, 14, 15]\ns := u[1:3]\nfmt.Printf(\"slice(len=%d, cap=%d): %v\\n\", len(s), cap(s), s) // [12, 13]\ns = append(s, 24)\nfmt.Println(\"after append 24, array:\", u)\nfmt.Printf(\"after append 24, slice(len=%d, cap=%d): %v\\n\", len(s), cap(s), s)\ns = append(s, 25)\nfmt.Println(\"after append 25, array:\", u)\nfmt.Printf(\"after append 25, slice(len=%d, cap=%d): %v\\n\", len(s), cap(s), s)\ns = append(s, 26)\nfmt.Println(\"after append 26, array:\", u)\nfmt.Printf(\"after append 26, slice(len=%d, cap=%d): %v\\n\", len(s), cap(s), s)\n\ns[0] = 22\nfmt.Println(\"after reassign 1st elem of slice, array:\", u)\nfmt.Printf(\"after reassign 1st elem of slice, slice(len=%d, cap=%d): %v\\n\", len(s), cap(s), s)\n</code></pre><p>运行这段代码，我们得到这样的结果：</p><pre><code class=\"language-plain\">array: [11 12 13 14 15]\nslice(len=2, cap=4): [12 13]\nafter append 24, array: [11 12 13 24 15]\nafter append 24, slice(len=3, cap=4): [12 13 24]\nafter append 25, array: [11 12 13 24 25]\nafter append 25, slice(len=4, cap=4): [12 13 24 25]\nafter append 26, array: [11 12 13 24 25]\nafter append 26, slice(len=5, cap=8): [12 13 24 25 26]\nafter reassign 1st elem of slice, array: [11 12 13 24 25]\nafter reassign 1st elem of slice, slice(len=5, cap=8): [22 13 24 25 26]\n</code></pre><p>这里，在append 25之后，切片的元素已经触碰到了底层数组u的边界了。然后我们再append 26之后，append发现底层数组已经无法满足append的要求，于是新创建了一个底层数组（数组长度为cap(s)的2倍，即8），并将slice的元素拷贝到新数组中了。</p><p>在这之后，我们即便再修改切片的第一个元素值，原数组u的元素也不会发生改变了，因为这个时候切片s与数组u已经解除了“绑定关系”，s已经不再是数组u的“描述符”了。这种因切片的自动扩容而导致的“绑定关系”解除，有时候会成为你实践道路上的一个小陷阱，你一定要注意这一点。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了。这节课，我们讲解了Go语言的另一类常用数据类型，复合数据类型，并挑重点地讲解了其中最常使用的两种同构复合数据类型：数组和切片。</p><p><strong>数组</strong>是一个固定长度的、由同构类型元素组成的连续序列。这种连续不仅仅是逻辑上的，Go编译器为数组类型变量分配的也是一整块可以容纳其所有元素的连续内存。而且，Go编译器为数组变量的初始化也提供了很多便利。当数组元素的类型也是数组类型时，会出现多维数组。我们只需要按照变量声明从左到右、按维度分层拆解，直到出现一元数组就好了。</p><p>但是，Go值传递的机制让数组在各个函数间传递起来比较“笨重”，开销较大，且开销随数组长度的增加而增加。为了解决这个问题，Go引入了<strong>切片</strong>这一不定长同构数据类型。</p><p>切片可以看成是数组的“描述符”，为数组打开了一个访问与修改的“窗口”。切片在Go运行时中被实现为一个“三元组（array, len, cap）”，其中的array是指向底层数组的指针，真正的数据都存储在这个底层数组中；len表示切片的长度；而cap则是切片底层数组的容量。我们可以为一个数组建立多个切片，这些切片由于共享同一个底层数组，因此我们通过任一个切片对数组的修改都会反映到其他切片中。</p><p>切片是不定长同构复合类型，这个不定长体现在Go运行时对它提供的动态扩容的支撑。当切片的cap值与len值相等时，如果再向切片追加数据，Go运行时会自动对切片的底层数组进行扩容，追加数据的操作不会失败。</p><p>在大多数场合，我们都会使用切片以替代数组，原因之一是切片作为数组“描述符”的轻量性，无论它绑定的底层数组有多大，传递这个切片花费的开销都是恒定可控的；另外一个原因是切片相较于数组指针也是有优势的，切片可以提供比指针更为强大的功能，比如下标访问、边界溢出校验、动态扩容等。而且，指针本身在Go语言中的功能也受到的限制，比如不支持指针算术运算。</p><h2>思考题</h2><p>今天的思考题，我想你请描述一下下面这两个切片变量sl1与sl2的差异。期待在留言区看到你的回答。</p><pre><code class=\"language-plain\">var sl1 []int\nvar sl2 = []int{}\n</code></pre><p>欢迎你把这节课分享给更多对Go语言中的复合数据类型感兴趣的朋友。我是Tony Bai&nbsp;，我们下节课见。</p>","comments":[{"had_liked":false,"id":321565,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1636948067,"is_pvip":false,"replies":[{"id":117126,"content":"思考题完成的很细致，很全面。手动点赞！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551188,"ip_address":"","comment_id":321565,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"课后题测试代码如下：        \n        var sl1 []int\n\tvar sl2 = []int{}\n\tfmt.Print(&quot;========基本区别=========\\n&quot;)\n\tfmt.Printf(&quot;%v,len:%d,cap:%d,addr:%p\\n&quot;, sl1, len(sl1), cap(sl1), &amp;sl1)\n\tfmt.Printf(&quot;%v,len:%d,cap:%d,addr:%p\\n&quot;, sl2, len(sl2), cap(sl2), &amp;sl2)\n\tfmt.Printf(&quot;sl1==nil:%v\\n&quot;, sl1 == nil)\n\tfmt.Printf(&quot;sl2==nil:%v\\n&quot;, sl2 == nil)\n\n\ta1 := *(*[3]int)(unsafe.Pointer(&amp;sl1))\n\ta2 := *(*[3]int)(unsafe.Pointer(&amp;sl2))\n\tfmt.Print(&quot;========底层区别=========\\n&quot;)\n\tfmt.Println(a1)\n\tfmt.Println(a2)\n\n\ttype SliceDemo struct {\n\t\tValues []int\n\t}\n\n\tvar s1 = SliceDemo{}\n\tvar s2 = SliceDemo{[]int{}}\n\tbs1, _ := json.Marshal(s1)\n\tbs2, _ := json.Marshal(s2)\n\tfmt.Print(&quot;========序列化区别=========\\n&quot;)\n\tfmt.Println(a1)\n\tfmt.Println(string(bs1))\n\tfmt.Println(string(bs2))\n========基本区别=========\n[],len:0,cap:0,addr:0xc0000a6018\n[],len:0,cap:0,addr:0xc0000a6030\nsl1==nil:true\nsl2==nil:false\n========底层区别=========\n[0 0 0]\n[18601168 0 0]\n========序列化区别=========\n[0 0 0]\n{&quot;Values&quot;:null}\n{&quot;Values&quot;:[]}\n\n可以看到，日常的使用基本是没有区别的，只不过与nil的比较，以及底层数据结构和序列化还是有一定的区别的。\n\n同时go官方推荐使用 var sl1 []int\nThe former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent—their len and cap are both zero—but the nil slice is the preferred style.\n\n在goland开发时，第二种声明方式会出现黄色下划线，提示需要改动。","like_count":91},{"had_liked":false,"id":321539,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1636942289,"is_pvip":false,"replies":[{"id":116799,"content":"正确✅","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969898,"ip_address":"","comment_id":321539,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\nvar sl1 []int\nvar sl2 = []int{}\ns1是声明，还没初始化，是nil值，底层没有分配内存空间。\ns2初始化了，不是nil值，底层分配了内存空间，有地址。\n我是这么理解的。","like_count":51,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530313,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636969898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321549,"user_name":"trietree","can_delete":false,"product_type":"c1","uid":1080498,"ip_address":"","ucode":"5BC5D74F3BBD79","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKFy0zUXQSF2SgUicHHiaGgKTMEeEXfKLmgbQPxuqicpPJibxbry0cebkYVqjrytPTf2IViasERplsJzw/132","comment_is_top":false,"comment_ctime":1636944289,"is_pvip":false,"replies":[{"id":116801,"content":"正确✅","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969943,"ip_address":"","comment_id":321549,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"sl1未初始化，值为nil，和nil比较返回true\nsl2初始化为empty slice，和nil比较返回false","like_count":15,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530316,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636969943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335695,"user_name":"风铃","can_delete":false,"product_type":"c1","uid":2633228,"ip_address":"","ucode":"999A26CC937C78","user_header":"https://static001.geekbang.org/account/avatar/00/28/2e/0c/b6180a5f.jpg","comment_is_top":false,"comment_ctime":1645629970,"is_pvip":false,"replies":[{"id":122715,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645715869,"ip_address":"","comment_id":335695,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人感觉，在初始化切片的时候，最好的分配项目的需求，分配一定的容量(cap)，要不在切片里面的数据多了，每次进行扩容，会消耗大量的内存性能","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530316,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636969943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332609,"user_name":"松","can_delete":false,"product_type":"c1","uid":2003771,"ip_address":"","ucode":"B8C0D2DEFE28DF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epj6jUIlYtOeSy6oLH6sDIj5TQqp375oD2njhmsSZ5Imr1KNbc9eZFEIsF9DFzWC12QffUcq6R5AQ/132","comment_is_top":false,"comment_ctime":1643366083,"is_pvip":false,"replies":[{"id":121542,"content":"扩容是新分配一段连续的大点的内存，原先的内存块不要了。所以依旧是连续的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442765,"ip_address":"","comment_id":332609,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"有个疑问，切片的底层数组，在切片发生自动扩容后，在物理空间上还是连续的吗？","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553113,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645715869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3502094,"avatar":"","nickname":"Geek_d1947f","note":"","ucode":"CA29ECDAB5E93A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605582,"discussion_content":"事实上倍增扩容的均摊时间复杂度是O(1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676770972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3502094,"avatar":"","nickname":"Geek_d1947f","note":"","ucode":"CA29ECDAB5E93A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620131,"discussion_content":"老哥，请问这个说法是从哪里得知的，我去看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685851436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":605582,"ip_address":"广东","group_id":0},"score":620131,"extra":""}]}]},{"had_liked":false,"id":349616,"user_name":"笑忘日月星辰","can_delete":false,"product_type":"c1","uid":1093857,"ip_address":"","ucode":"79B6F429C78D8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/e1/3aeb2d2d.jpg","comment_is_top":false,"comment_ctime":1656146840,"is_pvip":false,"replies":[{"id":127283,"content":"你用的是什么版本的go编译器，go 1.18，如果是go 1.18，那么可以看https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;4wYrwBwnuylSvTaxBMXUgg ，go 1.18对slice的扩容算法了调整。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656309188,"ip_address":"","comment_id":349616,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100093501,"comment_content":"老师好，关于扩容，麻烦解惑下\n问题：扩容当小于1024时候，是扩容为当前的2倍；当大于1024小于1280时候扩容为1.25倍，当大于1280小于1696时候，扩容为1.325倍吗？这个扩容的规则是什么？\nfunc main() {\n\tvar s []int\n\tfor i := 0; i &lt; 2048; i++ {\n\t\ts = append(s, i)\n\t\tfmt.Println(len(s), cap(s))\n\t}\n}\n\n打印结果\n---------------------------------------------------\n512 512\n513 1024\n...\n1024 1024\n1025 1280\n...\n1280 1280\n1281 1696\n...\n1696 1696\n1697 2304\n...\n\n\n\n\n","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577716,"discussion_content":"你用的是什么版本的go编译器，go 1.18，如果是go 1.18，那么可以看https://mp.weixin.qq.com/s/4wYrwBwnuylSvTaxBMXUgg ，go 1.18对slice的扩容算法了调整。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656309188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353721,"user_name":"左卫康","can_delete":false,"product_type":"c1","uid":2070958,"ip_address":"北京","ucode":"51B5AA4E6A8DF5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/99/ae/ff77ea13.jpg","comment_is_top":false,"comment_ctime":1659693898,"is_pvip":false,"replies":[{"id":128702,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1659925047,"ip_address":"北京","comment_id":353721,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题：var sl1 []int 仅声未初始化，值为对应类型的零值，nil\nvar sl2 = []int{} 声明并初始化，是个空切片\n","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583129,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659925047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337180,"user_name":"和白白","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/a200e7a7.jpg","comment_is_top":false,"comment_ctime":1646662896,"is_pvip":false,"replies":[{"id":123243,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723693,"ip_address":"","comment_id":337180,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"var sl1 []int 不显示初始化，所以 sl1 对应 slice 的零值 nil，并且此时没有 ptr、len 和 cap\nvar sl2 = []int{} 显示初始化，sl2 对应 [] 空数组，ptr 指定空数组的地址，len 和 cap 都是 0","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530315,"discussion_content":"class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636969927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531026,"discussion_content":"mark: class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637207147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415046,"discussion_content":"多谢老师解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636970423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321542,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1636942834,"is_pvip":false,"replies":[{"id":116800,"content":"class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969927,"ip_address":"","comment_id":321542,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请问下为什么go没有class 这个类型呢？是因为想要开发者多用组合少用继承的设计理念吗?还是有其它原因呢？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530315,"discussion_content":"class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636969927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531026,"discussion_content":"mark: class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637207147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415046,"discussion_content":"多谢老师解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636970423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346918,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653536716,"is_pvip":false,"replies":[{"id":126528,"content":"首先是否为nil与自身是否能取地址无关。\n\nvar p *int = nil \nprintln(&amp;p) &#47;&#47; 这取地址也是可以的。\n\n切片是复合数据类型，如果其没有被初始化，那么go语言规定其默认的零值就为nil。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653629083,"ip_address":"","comment_id":346918,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"sl1 自身有分配内存（能取地址），底层数组没有分配内存。为什么值会是 nil 呢?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573753,"discussion_content":"首先是否为nil与自身是否能取地址无关。\n\nvar p *int = nil \nprintln(&amp;p) // 这取地址也是可以的。\n\n切片是复合数据类型，如果其没有被初始化，那么go语言规定其默认的零值就为nil。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653629083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321565,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1636948067,"is_pvip":false,"replies":[{"id":117126,"content":"思考题完成的很细致，很全面。手动点赞！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551188,"ip_address":"","comment_id":321565,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"课后题测试代码如下：        \n        var sl1 []int\n\tvar sl2 = []int{}\n\tfmt.Print(&quot;========基本区别=========\\n&quot;)\n\tfmt.Printf(&quot;%v,len:%d,cap:%d,addr:%p\\n&quot;, sl1, len(sl1), cap(sl1), &amp;sl1)\n\tfmt.Printf(&quot;%v,len:%d,cap:%d,addr:%p\\n&quot;, sl2, len(sl2), cap(sl2), &amp;sl2)\n\tfmt.Printf(&quot;sl1==nil:%v\\n&quot;, sl1 == nil)\n\tfmt.Printf(&quot;sl2==nil:%v\\n&quot;, sl2 == nil)\n\n\ta1 := *(*[3]int)(unsafe.Pointer(&amp;sl1))\n\ta2 := *(*[3]int)(unsafe.Pointer(&amp;sl2))\n\tfmt.Print(&quot;========底层区别=========\\n&quot;)\n\tfmt.Println(a1)\n\tfmt.Println(a2)\n\n\ttype SliceDemo struct {\n\t\tValues []int\n\t}\n\n\tvar s1 = SliceDemo{}\n\tvar s2 = SliceDemo{[]int{}}\n\tbs1, _ := json.Marshal(s1)\n\tbs2, _ := json.Marshal(s2)\n\tfmt.Print(&quot;========序列化区别=========\\n&quot;)\n\tfmt.Println(a1)\n\tfmt.Println(string(bs1))\n\tfmt.Println(string(bs2))\n========基本区别=========\n[],len:0,cap:0,addr:0xc0000a6018\n[],len:0,cap:0,addr:0xc0000a6030\nsl1==nil:true\nsl2==nil:false\n========底层区别=========\n[0 0 0]\n[18601168 0 0]\n========序列化区别=========\n[0 0 0]\n{&quot;Values&quot;:null}\n{&quot;Values&quot;:[]}\n\n可以看到，日常的使用基本是没有区别的，只不过与nil的比较，以及底层数据结构和序列化还是有一定的区别的。\n\n同时go官方推荐使用 var sl1 []int\nThe former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent—their len and cap are both zero—but the nil slice is the preferred style.\n\n在goland开发时，第二种声明方式会出现黄色下划线，提示需要改动。","like_count":91,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532183,"discussion_content":"思考题完成的很细致，很全面。手动点赞！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637551188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3555767,"avatar":"https://static001.geekbang.org/account/avatar/00/36/41/b7/0b8fb70a.jpg","nickname":"Respawn_Joker","note":"","ucode":"E8602D8DDF561E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630456,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698476967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3554552,"avatar":"","nickname":"Geek_gofzw","note":"","ucode":"F5DFB1622C80BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608826,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678689896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"Geek_xbye50","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595036,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669680946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591621,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666709617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574410,"discussion_content":"Mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654047942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531025,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637207096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321539,"user_name":"在下宝龙、","can_delete":false,"product_type":"c1","uid":1618030,"ip_address":"","ucode":"0735B64EB61CAC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/6e/921cb700.jpg","comment_is_top":false,"comment_ctime":1636942289,"is_pvip":false,"replies":[{"id":116799,"content":"正确✅","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969898,"ip_address":"","comment_id":321539,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"\nvar sl1 []int\nvar sl2 = []int{}\ns1是声明，还没初始化，是nil值，底层没有分配内存空间。\ns2初始化了，不是nil值，底层分配了内存空间，有地址。\n我是这么理解的。","like_count":51,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532183,"discussion_content":"思考题完成的很细致，很全面。手动点赞！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637551188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3555767,"avatar":"https://static001.geekbang.org/account/avatar/00/36/41/b7/0b8fb70a.jpg","nickname":"Respawn_Joker","note":"","ucode":"E8602D8DDF561E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630456,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698476967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3554552,"avatar":"","nickname":"Geek_gofzw","note":"","ucode":"F5DFB1622C80BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608826,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678689896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"Geek_xbye50","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595036,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669680946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591621,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666709617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574410,"discussion_content":"Mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654047942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531025,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637207096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321549,"user_name":"trietree","can_delete":false,"product_type":"c1","uid":1080498,"ip_address":"","ucode":"5BC5D74F3BBD79","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKFy0zUXQSF2SgUicHHiaGgKTMEeEXfKLmgbQPxuqicpPJibxbry0cebkYVqjrytPTf2IViasERplsJzw/132","comment_is_top":false,"comment_ctime":1636944289,"is_pvip":false,"replies":[{"id":116801,"content":"正确✅","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969943,"ip_address":"","comment_id":321549,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"sl1未初始化，值为nil，和nil比较返回true\nsl2初始化为empty slice，和nil比较返回false","like_count":15,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530313,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636969898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335695,"user_name":"风铃","can_delete":false,"product_type":"c1","uid":2633228,"ip_address":"","ucode":"999A26CC937C78","user_header":"https://static001.geekbang.org/account/avatar/00/28/2e/0c/b6180a5f.jpg","comment_is_top":false,"comment_ctime":1645629970,"is_pvip":false,"replies":[{"id":122715,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645715869,"ip_address":"","comment_id":335695,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人感觉，在初始化切片的时候，最好的分配项目的需求，分配一定的容量(cap)，要不在切片里面的数据多了，每次进行扩容，会消耗大量的内存性能","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553113,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645715869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3502094,"avatar":"","nickname":"Geek_d1947f","note":"","ucode":"CA29ECDAB5E93A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605582,"discussion_content":"事实上倍增扩容的均摊时间复杂度是O(1)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676770972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3502094,"avatar":"","nickname":"Geek_d1947f","note":"","ucode":"CA29ECDAB5E93A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620131,"discussion_content":"老哥，请问这个说法是从哪里得知的，我去看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685851436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":605582,"ip_address":"广东","group_id":0},"score":620131,"extra":""}]}]},{"had_liked":false,"id":332609,"user_name":"松","can_delete":false,"product_type":"c1","uid":2003771,"ip_address":"","ucode":"B8C0D2DEFE28DF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epj6jUIlYtOeSy6oLH6sDIj5TQqp375oD2njhmsSZ5Imr1KNbc9eZFEIsF9DFzWC12QffUcq6R5AQ/132","comment_is_top":false,"comment_ctime":1643366083,"is_pvip":false,"replies":[{"id":121542,"content":"扩容是新分配一段连续的大点的内存，原先的内存块不要了。所以依旧是连续的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643442765,"ip_address":"","comment_id":332609,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"有个疑问，切片的底层数组，在切片发生自动扩容后，在物理空间上还是连续的吗？","like_count":8,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548906,"discussion_content":"扩容是新分配一段连续的大点的内存，原先的内存块不要了。所以依旧是连续的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643442765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2365118,"avatar":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","nickname":"undefined.","note":"","ucode":"57BB435A96AA79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585674,"discussion_content":"假设切片重新分配后，新切片修改数据不会改变原来的数组，那不是很容易混淆或者引发bug ? 请问这个在实际生产上是怎么解决的呢 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661759169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111176,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","nickname":"c340","note":"","ucode":"D64CC3DDD09A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2365118,"avatar":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","nickname":"undefined.","note":"","ucode":"57BB435A96AA79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585766,"discussion_content":"传切片指针","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661817503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585674,"ip_address":"福建","group_id":0},"score":585766,"extra":""}]},{"author":{"id":1187130,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/3a/cdf9c55f.jpg","nickname":"未来已来","note":"","ucode":"3A21ACFD53CB9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592616,"discussion_content":"这个点有点坑人啊：切片切到新数组后，后序操作都不会反应到原数组上。后期有个任务读原数组，就会出现部分操作丢失问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667538412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1187130,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/3a/cdf9c55f.jpg","nickname":"未来已来","note":"","ucode":"3A21ACFD53CB9C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638770,"discussion_content":"你得读修改后的数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709891333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592616,"ip_address":"广东","group_id":0},"score":638770,"extra":""}]}]},{"had_liked":false,"id":349616,"user_name":"笑忘日月星辰","can_delete":false,"product_type":"c1","uid":1093857,"ip_address":"","ucode":"79B6F429C78D8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/e1/3aeb2d2d.jpg","comment_is_top":false,"comment_ctime":1656146840,"is_pvip":false,"replies":[{"id":127283,"content":"你用的是什么版本的go编译器，go 1.18，如果是go 1.18，那么可以看https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;4wYrwBwnuylSvTaxBMXUgg ，go 1.18对slice的扩容算法了调整。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656309188,"ip_address":"","comment_id":349616,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100093501,"comment_content":"老师好，关于扩容，麻烦解惑下\n问题：扩容当小于1024时候，是扩容为当前的2倍；当大于1024小于1280时候扩容为1.25倍，当大于1280小于1696时候，扩容为1.325倍吗？这个扩容的规则是什么？\nfunc main() {\n\tvar s []int\n\tfor i := 0; i &lt; 2048; i++ {\n\t\ts = append(s, i)\n\t\tfmt.Println(len(s), cap(s))\n\t}\n}\n\n打印结果\n---------------------------------------------------\n512 512\n513 1024\n...\n1024 1024\n1025 1280\n...\n1280 1280\n1281 1696\n...\n1696 1696\n1697 2304\n...\n\n\n\n\n","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548906,"discussion_content":"扩容是新分配一段连续的大点的内存，原先的内存块不要了。所以依旧是连续的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643442765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2365118,"avatar":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","nickname":"undefined.","note":"","ucode":"57BB435A96AA79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585674,"discussion_content":"假设切片重新分配后，新切片修改数据不会改变原来的数组，那不是很容易混淆或者引发bug ? 请问这个在实际生产上是怎么解决的呢 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661759169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111176,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","nickname":"c340","note":"","ucode":"D64CC3DDD09A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2365118,"avatar":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","nickname":"undefined.","note":"","ucode":"57BB435A96AA79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585766,"discussion_content":"传切片指针","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661817503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585674,"ip_address":"福建","group_id":0},"score":585766,"extra":""}]},{"author":{"id":1187130,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/3a/cdf9c55f.jpg","nickname":"未来已来","note":"","ucode":"3A21ACFD53CB9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592616,"discussion_content":"这个点有点坑人啊：切片切到新数组后，后序操作都不会反应到原数组上。后期有个任务读原数组，就会出现部分操作丢失问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667538412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1187130,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/3a/cdf9c55f.jpg","nickname":"未来已来","note":"","ucode":"3A21ACFD53CB9C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638770,"discussion_content":"你得读修改后的数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709891333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592616,"ip_address":"广东","group_id":0},"score":638770,"extra":""}]}]},{"had_liked":false,"id":353721,"user_name":"左卫康","can_delete":false,"product_type":"c1","uid":2070958,"ip_address":"北京","ucode":"51B5AA4E6A8DF5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/99/ae/ff77ea13.jpg","comment_is_top":false,"comment_ctime":1659693898,"is_pvip":false,"replies":[{"id":128702,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1659925047,"ip_address":"北京","comment_id":353721,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"思考题：var sl1 []int 仅声未初始化，值为对应类型的零值，nil\nvar sl2 = []int{} 声明并初始化，是个空切片\n","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583129,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659925047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337180,"user_name":"和白白","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/a200e7a7.jpg","comment_is_top":false,"comment_ctime":1646662896,"is_pvip":false,"replies":[{"id":123243,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723693,"ip_address":"","comment_id":337180,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"var sl1 []int 不显示初始化，所以 sl1 对应 slice 的零值 nil，并且此时没有 ptr、len 和 cap\nvar sl2 = []int{} 显示初始化，sl2 对应 [] 空数组，ptr 指定空数组的地址，len 和 cap 都是 0","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555025,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646723694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321542,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1636942834,"is_pvip":false,"replies":[{"id":116800,"content":"class是面向对象语言的专有名词。go定位就不是oo语言，所以没有class。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636969927,"ip_address":"","comment_id":321542,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，请问下为什么go没有class 这个类型呢？是因为想要开发者多用组合少用继承的设计理念吗?还是有其它原因呢？","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577716,"discussion_content":"你用的是什么版本的go编译器，go 1.18，如果是go 1.18，那么可以看https://mp.weixin.qq.com/s/4wYrwBwnuylSvTaxBMXUgg ，go 1.18对slice的扩容算法了调整。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656309188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346918,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653536716,"is_pvip":false,"replies":[{"id":126528,"content":"首先是否为nil与自身是否能取地址无关。\n\nvar p *int = nil \nprintln(&amp;p) &#47;&#47; 这取地址也是可以的。\n\n切片是复合数据类型，如果其没有被初始化，那么go语言规定其默认的零值就为nil。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653629083,"ip_address":"","comment_id":346918,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"sl1 自身有分配内存（能取地址），底层数组没有分配内存。为什么值会是 nil 呢?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555025,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646723694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334152,"user_name":"Geek_7254f2","can_delete":false,"product_type":"c1","uid":2275448,"ip_address":"","ucode":"D5770398168983","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4iaBTGZFCibGEWH3YavQO3e1FB9wnODiaYzexxGqTWRMiay6THfZNVSLDaIOz5RClHefVIYibZxm8G2Q/132","comment_is_top":false,"comment_ctime":1644767140,"is_pvip":false,"replies":[{"id":122088,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644828617,"ip_address":"","comment_id":334152,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"可以说，切片之于数组就像是文件描述符之于文件。一语点醒梦中人","like_count":2},{"had_liked":false,"id":326247,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1639449700,"is_pvip":false,"replies":[{"id":119064,"content":"切片底层真正存储数据的是一个数组，在创建切片的时候，这个数组一定要给一个初始size啊。当向切片追加一些元素后，数组装不下了，这时候怎么办呢？如果你是语言设计者，也会考虑给数组扩容，go选择了自动扩容。但go又无法指定重新申请的内存与原数组内存必须是相邻连在一起的。于是只能与原数组解除绑定。c++的vector底层应该也是数组，也有容量限制，它的扩容估计也是重新分配一大块新内存，这个你可以去了解一下vector的实现原理。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640038787,"ip_address":"","comment_id":326247,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"切片就像是C++的vector+string_view，的确是更强大了，但是会有文中说的解除绑定关系导致失效的问题，这个缺点让我感到困惑，因为它似乎给编程带来了不方便，请问Go语言的设计者们为什么要把这两个功能融合起来呢？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550966,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644828617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322163,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1637214738,"is_pvip":false,"replies":[{"id":117147,"content":"如果要实现层面，那只能看Go编译器代码了:)。 \n整体的含义：\n1. go数组在内存层面表现为一整块内存，数组中元素按顺序紧密排列在这块内存中。\n2. 在源码层面，与这块内存相对应的就是一个数组类型的变量。\n3. 传递该变量就是复制整块内存。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637559966,"ip_address":"","comment_id":322163,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师讲的太好了，尤其是讲结构时用的图，直观易理解。\n再请教一下老师， 数组是一个整体，怎么理解，go里他的结构是什么样的。\n在我理解  一个数组，肯定有一个指向他头部的指针，里面有一个一个的元素。\n时钟不理解 一个整体，是怎么做到的。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540350,"discussion_content":"切片底层真正存储数据的是一个数组，在创建切片的时候，这个数组一定要给一个初始size啊。当向切片追加一些元素后，数组装不下了，这时候怎么办呢？如果你是语言设计者，也会考虑给数组扩容，go选择了自动扩容。但go又无法指定重新申请的内存与原数组内存必须是相邻连在一起的。于是只能与原数组解除绑定。c++的vector底层应该也是数组，也有容量限制，它的扩容估计也是重新分配一大块新内存，这个你可以去了解一下vector的实现原理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640038788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321593,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636960838,"is_pvip":false,"replies":[{"id":117129,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551344,"ip_address":"","comment_id":321593,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\n-------------\n1）sl1 是 nil slice，len 和 cap 是 0，array 是 nil，sl1 == nil 为 true；\n2）sl2 是 empty slice，len 和 cap 是 0，array 是 zerobase uintptr (base address for all 0-byte allocations, 见 runtime&#47;malloc.go)，sl2 == nil 为 false。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532226,"discussion_content":"如果要实现层面，那只能看Go编译器代码了:)。 \n整体的含义：\n1. go数组在内存层面表现为一整块内存，数组中元素按顺序紧密排列在这块内存中。\n2. 在源码层面，与这块内存相对应的就是一个数组类型的变量。\n3. 传递该变量就是复制整块内存。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637559966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532332,"discussion_content":"感谢老师解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637578500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321580,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1636956137,"is_pvip":false,"replies":[{"id":117128,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551314,"ip_address":"","comment_id":321580,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\ns1是声明，还没初始化，是nil值，底层没有分配内存空间。这就意味这针对sl1做操作的时候同时初始化\n，例如sl1 = append(sl1, 1)，这个语句的操作就是先初始化一个长度为1的空间，然后把 “1”填入这个空间中。\ns2初始化了，不是nil值，底层分配了内存空间，有地址。例如，sl2 = append(sl2, 2)，这个语句就是直接将“2”这个值填入到已初始化的空间中。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532186,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530879,"discussion_content":"兄弟,malloc.go文件的哪个部分呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637161562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":2,"child_discussions":[{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530926,"discussion_content":"Ctrl + F 搜 zerobase 就看到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637167033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530879,"ip_address":"","group_id":0},"score":530926,"extra":"{\"user_type\":1}"},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530932,"discussion_content":"嗯嗯，那个源码文件晚上大致瞄了一眼。想偷懒才问你😅。 有时间再去看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637169862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530926,"ip_address":"","group_id":0},"score":530932,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":321564,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636947995,"is_pvip":false,"replies":[{"id":117125,"content":"”空切片的数据指针都是指向同一个地址“ -- 这个值得商榷哦。\n\n     var sl1 = []int{}\n      var sl2 = []int{}\n      println((&amp;amp;sl1) == (&amp;amp;sl2)) &amp;#47;&amp;#47; false","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551145,"ip_address":"","comment_id":321564,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文章末的思考题回答：\nvar sl1 []int ，这种方式是nil切片，长度和容量都是0，跟nil比较结果是为true\nvar sl2 = []int{}，这种方式是空切片，空切片的数据指针都是指向同一个地址，跟nil比较结果是false","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532185,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379542,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"广东","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1692085890,"is_pvip":false,"replies":[{"id":138272,"content":"Go 1.21版本中提供的slices包中有Contains函数，可以用于操作切片。要操作数组，转成切片后应用Contains即可。\n\n对于go1.21之前的版本，只能自己实现一个类似Contains的函数了。也不难。可以参考go 1.21的Contains的实现。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692161350,"ip_address":"北京","comment_id":379542,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"求问下，不管是数组还是切片，都只能for循环判断是否在数组&#47;切片中吗？有没有类似java那种 list.contains 的方式","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532182,"discussion_content":"”空切片的数据指针都是指向同一个地址“ -- 这个值得商榷哦。\n\n     var sl1 = []int{}\n      var sl2 = []int{}\n      println((&amp;amp;sl1) == (&amp;amp;sl2)) &amp;#47;&amp;#47; false","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637551145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2790875,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kHoDdV15McW26tMCNnU8GSsUib9UWboAjVSe4nop5nPVt7qZNcUicCic3W50uaDHj0ibupXQtpvOUG4YaomBqHicVmg/132","nickname":"KingOfDark","note":"","ucode":"F13D3A1287495B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573772,"discussion_content":"我理解老师这里是在比较两个 空切片变量的地址，那的确应该是不相同的，因为两个变量分配在不同的内存地址上。而楼主这里说的应该是，两个空切片 对应的底层数组指针指向同一个地址，根据其他一些评论，好像是指向zerobase uintptr","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653636155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532182,"ip_address":"","group_id":0},"score":573772,"extra":""}]}]},{"had_liked":false,"id":363717,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"辽宁","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1670054895,"is_pvip":false,"replies":[{"id":132179,"content":"问题1： 第二次append没有扩容啊。看第一次的输出结果，len:1, cap:2，所以sl有空间容纳第二次append的222。第三次才是扩容。\n\n问题2：这个没有什么标准，go一共就那么几个预定义标识符，记住了就行了。slice就是一个slice结构体，不是指针。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670077707,"ip_address":"辽宁","comment_id":363717,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师我想请教两个问题：\n1. 下面这段代码的输出我理解不了：\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tsl := arr[1:2]\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 222)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 333)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl[1] = 111\n\tfmt.Println(arr, sl)\n}\n输出：\n[2], addr: 0xc000004078, len: 1, cap: 2\n[2 222], addr: 0xc000004078, len: 2, cap: 2\n[2 222 333], addr: 0xc000004078, len: 3, cap: 4\n[1 2 222] [2 111 333]\n在 sl 第二次 append 时可以看到 cap 翻倍了，那么应该是扩容了，因此 sl 不再指向 arr 的第二个元素，最后 sl[1] = 111 可以佐证这一点，因为假设 sl 指向 arr[1] 那么 sl[1] 就是 arr[2]，会被这里的赋值操作修改为 111，但是输出的结果中 arr[2] 依然是 222；\n然而 sl 的地址在 append 过程中始终没变，看起来又好像没有扩容；\n上面两个现象感觉很矛盾，希望老师能解答一下，我本地的 go 版本是1.17.3\n\n2. 我想问下怎么看一个预定义标识符的运行时表示是一个结构体还是指针，比如第 16 节的文章中有明确说 map 的运行时表示是 *runtime.hmap，所以是指针；第 13 节的文章中说 string 的运行时表示是 stringHeader，所以是结构体；这一节的切片的运行时表示是 slice 这个结构体本身还是一个指向 slice 的指针呢？\n\n希望老师抽空解答一下 谢谢老师！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625759,"discussion_content":"Go 1.21版本中提供的slices包中有Contains函数，可以用于操作切片。要操作数组，转成切片后应用Contains即可。\n\n对于go1.21之前的版本，只能自己实现一个类似Contains的函数了。也不难。可以参考go 1.21的Contains的实现。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1692161351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362814,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"北京","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1668934198,"is_pvip":false,"replies":[{"id":131964,"content":"也没错。也可以再看看其他人的答案，从多角度理解一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1669017769,"ip_address":"北京","comment_id":362814,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"课后题测试\nvar sl1 []int\nvar sl2 = []int{}\n我是这么理解的\n第一个是声明，第二个是声明且实例化，(凡带=号的都有实例化的意思)，就好像c语言\nchar* p 跟\nchar* p =null ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594368,"discussion_content":"也没错。也可以再看看其他人的答案，从多角度理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669017769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362504,"user_name":"Sunrise","can_delete":false,"product_type":"c1","uid":2820643,"ip_address":"北京","ucode":"791BC042992385","user_header":"https://static001.geekbang.org/account/avatar/00/2b/0a/23/c26f4e50.jpg","comment_is_top":false,"comment_ctime":1668575882,"is_pvip":false,"replies":[{"id":131853,"content":"切片是有长度的啊。s1的长度是1，所以输出1一个元素：1。s2是在s1的基础上append了一个元素，它的长度是2，所以输出s2时输出[1 3]。这个3把原数组u中的第二个元素2给覆盖了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668665718,"ip_address":"北京","comment_id":362504,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"append 之后为什么要重新赋给原先的切片这块有点疑问，望老师抽空解答\nu := [5]int{1, 2}\ns1 := u[0:1]\ns2 := append(s1, 3)\nfmt.Printf(&quot;%p %p %v %v&quot;, s1, s2, s1, s2)\n&#47;&#47; 0xc000100000 0xc000100000 [1] [1 3]\n这里 s1 和 s2 的地址一样，为什么 s1 和 s2 的值不一样，它们的底层数组不都是同一块吗\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593944,"discussion_content":"切片是有长度的啊。s1的长度是1，所以输出1一个元素：1。s2是在s1的基础上append了一个元素，它的长度是2，所以输出s2时输出[1 3]。这个3把原数组u中的第二个元素2给覆盖了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668665718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334152,"user_name":"Geek_7254f2","can_delete":false,"product_type":"c1","uid":2275448,"ip_address":"","ucode":"D5770398168983","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4iaBTGZFCibGEWH3YavQO3e1FB9wnODiaYzexxGqTWRMiay6THfZNVSLDaIOz5RClHefVIYibZxm8G2Q/132","comment_is_top":false,"comment_ctime":1644767140,"is_pvip":false,"replies":[{"id":122088,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644828617,"ip_address":"","comment_id":334152,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"可以说，切片之于数组就像是文件描述符之于文件。一语点醒梦中人","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550966,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644828617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326247,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1639449700,"is_pvip":false,"replies":[{"id":119064,"content":"切片底层真正存储数据的是一个数组，在创建切片的时候，这个数组一定要给一个初始size啊。当向切片追加一些元素后，数组装不下了，这时候怎么办呢？如果你是语言设计者，也会考虑给数组扩容，go选择了自动扩容。但go又无法指定重新申请的内存与原数组内存必须是相邻连在一起的。于是只能与原数组解除绑定。c++的vector底层应该也是数组，也有容量限制，它的扩容估计也是重新分配一大块新内存，这个你可以去了解一下vector的实现原理。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640038787,"ip_address":"","comment_id":326247,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"切片就像是C++的vector+string_view，的确是更强大了，但是会有文中说的解除绑定关系导致失效的问题，这个缺点让我感到困惑，因为它似乎给编程带来了不方便，请问Go语言的设计者们为什么要把这两个功能融合起来呢？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540350,"discussion_content":"切片底层真正存储数据的是一个数组，在创建切片的时候，这个数组一定要给一个初始size啊。当向切片追加一些元素后，数组装不下了，这时候怎么办呢？如果你是语言设计者，也会考虑给数组扩容，go选择了自动扩容。但go又无法指定重新申请的内存与原数组内存必须是相邻连在一起的。于是只能与原数组解除绑定。c++的vector底层应该也是数组，也有容量限制，它的扩容估计也是重新分配一大块新内存，这个你可以去了解一下vector的实现原理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640038788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322163,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1637214738,"is_pvip":false,"replies":[{"id":117147,"content":"如果要实现层面，那只能看Go编译器代码了:)。 \n整体的含义：\n1. go数组在内存层面表现为一整块内存，数组中元素按顺序紧密排列在这块内存中。\n2. 在源码层面，与这块内存相对应的就是一个数组类型的变量。\n3. 传递该变量就是复制整块内存。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637559966,"ip_address":"","comment_id":322163,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师讲的太好了，尤其是讲结构时用的图，直观易理解。\n再请教一下老师， 数组是一个整体，怎么理解，go里他的结构是什么样的。\n在我理解  一个数组，肯定有一个指向他头部的指针，里面有一个一个的元素。\n时钟不理解 一个整体，是怎么做到的。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532226,"discussion_content":"如果要实现层面，那只能看Go编译器代码了:)。 \n整体的含义：\n1. go数组在内存层面表现为一整块内存，数组中元素按顺序紧密排列在这块内存中。\n2. 在源码层面，与这块内存相对应的就是一个数组类型的变量。\n3. 传递该变量就是复制整块内存。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637559966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532332,"discussion_content":"感谢老师解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637578500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321593,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1636960838,"is_pvip":false,"replies":[{"id":117129,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551344,"ip_address":"","comment_id":321593,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\n-------------\n1）sl1 是 nil slice，len 和 cap 是 0，array 是 nil，sl1 == nil 为 true；\n2）sl2 是 empty slice，len 和 cap 是 0，array 是 zerobase uintptr (base address for all 0-byte allocations, 见 runtime&#47;malloc.go)，sl2 == nil 为 false。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532186,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530879,"discussion_content":"兄弟,malloc.go文件的哪个部分呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637161562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":2,"child_discussions":[{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530926,"discussion_content":"Ctrl + F 搜 zerobase 就看到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637167033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530879,"ip_address":"","group_id":0},"score":530926,"extra":"{\"user_type\":1}"},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530932,"discussion_content":"嗯嗯，那个源码文件晚上大致瞄了一眼。想偷懒才问你😅。 有时间再去看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637169862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530926,"ip_address":"","group_id":0},"score":530932,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":321580,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1636956137,"is_pvip":false,"replies":[{"id":117128,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551314,"ip_address":"","comment_id":321580,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\ns1是声明，还没初始化，是nil值，底层没有分配内存空间。这就意味这针对sl1做操作的时候同时初始化\n，例如sl1 = append(sl1, 1)，这个语句的操作就是先初始化一个长度为1的空间，然后把 “1”填入这个空间中。\ns2初始化了，不是nil值，底层分配了内存空间，有地址。例如，sl2 = append(sl2, 2)，这个语句就是直接将“2”这个值填入到已初始化的空间中。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532185,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321564,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1636947995,"is_pvip":false,"replies":[{"id":117125,"content":"”空切片的数据指针都是指向同一个地址“ -- 这个值得商榷哦。\n\n     var sl1 = []int{}\n      var sl2 = []int{}\n      println((&amp;amp;sl1) == (&amp;amp;sl2)) &amp;#47;&amp;#47; false","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551145,"ip_address":"","comment_id":321564,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"文章末的思考题回答：\nvar sl1 []int ，这种方式是nil切片，长度和容量都是0，跟nil比较结果是为true\nvar sl2 = []int{}，这种方式是空切片，空切片的数据指针都是指向同一个地址，跟nil比较结果是false","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532182,"discussion_content":"”空切片的数据指针都是指向同一个地址“ -- 这个值得商榷哦。\n\n     var sl1 = []int{}\n      var sl2 = []int{}\n      println((&amp;amp;sl1) == (&amp;amp;sl2)) &amp;#47;&amp;#47; false","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637551145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2790875,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kHoDdV15McW26tMCNnU8GSsUib9UWboAjVSe4nop5nPVt7qZNcUicCic3W50uaDHj0ibupXQtpvOUG4YaomBqHicVmg/132","nickname":"KingOfDark","note":"","ucode":"F13D3A1287495B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573772,"discussion_content":"我理解老师这里是在比较两个 空切片变量的地址，那的确应该是不相同的，因为两个变量分配在不同的内存地址上。而楼主这里说的应该是，两个空切片 对应的底层数组指针指向同一个地址，根据其他一些评论，好像是指向zerobase uintptr","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653636155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532182,"ip_address":"","group_id":0},"score":573772,"extra":""}]}]},{"had_liked":false,"id":379542,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"广东","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1692085890,"is_pvip":false,"replies":[{"id":138272,"content":"Go 1.21版本中提供的slices包中有Contains函数，可以用于操作切片。要操作数组，转成切片后应用Contains即可。\n\n对于go1.21之前的版本，只能自己实现一个类似Contains的函数了。也不难。可以参考go 1.21的Contains的实现。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692161350,"ip_address":"北京","comment_id":379542,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"求问下，不管是数组还是切片，都只能for循环判断是否在数组&#47;切片中吗？有没有类似java那种 list.contains 的方式","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625759,"discussion_content":"Go 1.21版本中提供的slices包中有Contains函数，可以用于操作切片。要操作数组，转成切片后应用Contains即可。\n\n对于go1.21之前的版本，只能自己实现一个类似Contains的函数了。也不难。可以参考go 1.21的Contains的实现。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1692161351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363717,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"辽宁","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1670054895,"is_pvip":false,"replies":[{"id":132179,"content":"问题1： 第二次append没有扩容啊。看第一次的输出结果，len:1, cap:2，所以sl有空间容纳第二次append的222。第三次才是扩容。\n\n问题2：这个没有什么标准，go一共就那么几个预定义标识符，记住了就行了。slice就是一个slice结构体，不是指针。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670077707,"ip_address":"辽宁","comment_id":363717,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师我想请教两个问题：\n1. 下面这段代码的输出我理解不了：\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tsl := arr[1:2]\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 222)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 333)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl[1] = 111\n\tfmt.Println(arr, sl)\n}\n输出：\n[2], addr: 0xc000004078, len: 1, cap: 2\n[2 222], addr: 0xc000004078, len: 2, cap: 2\n[2 222 333], addr: 0xc000004078, len: 3, cap: 4\n[1 2 222] [2 111 333]\n在 sl 第二次 append 时可以看到 cap 翻倍了，那么应该是扩容了，因此 sl 不再指向 arr 的第二个元素，最后 sl[1] = 111 可以佐证这一点，因为假设 sl 指向 arr[1] 那么 sl[1] 就是 arr[2]，会被这里的赋值操作修改为 111，但是输出的结果中 arr[2] 依然是 222；\n然而 sl 的地址在 append 过程中始终没变，看起来又好像没有扩容；\n上面两个现象感觉很矛盾，希望老师能解答一下，我本地的 go 版本是1.17.3\n\n2. 我想问下怎么看一个预定义标识符的运行时表示是一个结构体还是指针，比如第 16 节的文章中有明确说 map 的运行时表示是 *runtime.hmap，所以是指针；第 13 节的文章中说 string 的运行时表示是 stringHeader，所以是结构体；这一节的切片的运行时表示是 slice 这个结构体本身还是一个指向 slice 的指针呢？\n\n希望老师抽空解答一下 谢谢老师！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595446,"discussion_content":"问题1： 第二次append没有扩容啊。看第一次的输出结果，len:1, cap:2，所以sl有空间容纳第二次append的222。第三次才是扩容。\n\n问题2：这个没有什么标准，go一共就那么几个预定义标识符，记住了就行了。slice就是一个slice结构体，不是指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670077707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":595486,"discussion_content":"我说的就是 append(sl, 333) 这里。。。既然扩容了为什么地址没有变呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670142964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595446,"ip_address":"江苏","group_id":0},"score":595486,"extra":""}]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595892,"discussion_content":"slice扩容是底层数组的扩容，slice本身地址不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670454258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362814,"user_name":"撕影","can_delete":false,"product_type":"c1","uid":3222094,"ip_address":"北京","ucode":"8DC169F8B8E653","user_header":"https://static001.geekbang.org/account/avatar/00/31/2a/4e/a3f53cae.jpg","comment_is_top":false,"comment_ctime":1668934198,"is_pvip":false,"replies":[{"id":131964,"content":"也没错。也可以再看看其他人的答案，从多角度理解一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1669017769,"ip_address":"北京","comment_id":362814,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"课后题测试\nvar sl1 []int\nvar sl2 = []int{}\n我是这么理解的\n第一个是声明，第二个是声明且实例化，(凡带=号的都有实例化的意思)，就好像c语言\nchar* p 跟\nchar* p =null ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595446,"discussion_content":"问题1： 第二次append没有扩容啊。看第一次的输出结果，len:1, cap:2，所以sl有空间容纳第二次append的222。第三次才是扩容。\n\n问题2：这个没有什么标准，go一共就那么几个预定义标识符，记住了就行了。slice就是一个slice结构体，不是指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670077707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":595486,"discussion_content":"我说的就是 append(sl, 333) 这里。。。既然扩容了为什么地址没有变呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670142964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595446,"ip_address":"江苏","group_id":0},"score":595486,"extra":""}]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595892,"discussion_content":"slice扩容是底层数组的扩容，slice本身地址不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670454258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362504,"user_name":"Sunrise","can_delete":false,"product_type":"c1","uid":2820643,"ip_address":"北京","ucode":"791BC042992385","user_header":"https://static001.geekbang.org/account/avatar/00/2b/0a/23/c26f4e50.jpg","comment_is_top":false,"comment_ctime":1668575882,"is_pvip":false,"replies":[{"id":131853,"content":"切片是有长度的啊。s1的长度是1，所以输出1一个元素：1。s2是在s1的基础上append了一个元素，它的长度是2，所以输出s2时输出[1 3]。这个3把原数组u中的第二个元素2给覆盖了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1668665718,"ip_address":"北京","comment_id":362504,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"append 之后为什么要重新赋给原先的切片这块有点疑问，望老师抽空解答\nu := [5]int{1, 2}\ns1 := u[0:1]\ns2 := append(s1, 3)\nfmt.Printf(&quot;%p %p %v %v&quot;, s1, s2, s1, s2)\n&#47;&#47; 0xc000100000 0xc000100000 [1] [1 3]\n这里 s1 和 s2 的地址一样，为什么 s1 和 s2 的值不一样，它们的底层数组不都是同一块吗\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594368,"discussion_content":"也没错。也可以再看看其他人的答案，从多角度理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669017769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358915,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"北京","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1665022560,"is_pvip":false,"replies":[{"id":130603,"content":"扩容后，切片的存储空间也是连续的，但这个存储空间与原数组已经不是一个存储空间了，彻底分离了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665296702,"ip_address":"北京","comment_id":358915,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"有一个疑问，切片是基于数组创建的，数组的存储空间是连续的，那么如果对切片进行扩容，扩容出来的 和已经存在的原始数据 存储空间也是连续的吗？","like_count":1},{"had_liked":false,"id":355801,"user_name":"undefined.","can_delete":false,"product_type":"c1","uid":2365118,"ip_address":"辽宁","ucode":"57BB435A96AA79","user_header":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","comment_is_top":false,"comment_ctime":1661759213,"is_pvip":false,"replies":[{"id":129516,"content":"文中仅仅是为了演示构造的一个例子。通常我们不会去基于数组构建切片，而是直接用make或[]T{}来构建切片变量。全程使用切片变量不需要开发者关心底层存储数据的数组的变化，即便扩容也是自动的，对开发者无感，开发者只需要操作切片变量即可。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1661810213,"ip_address":"辽宁","comment_id":355801,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"假设切片apped超过cap后，重新分配空间，新切片修改数据不会改变原来的数组，那不是很容易混淆或者引发bug ? 请问这个在实际生产上是怎么解决的呢 ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589742,"discussion_content":"扩容后，切片的存储空间也是连续的，但这个存储空间与原数组已经不是一个存储空间了，彻底分离了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665296702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2267730,"avatar":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","nickname":"不明真相的群众","note":"","ucode":"046A7D345171B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":589754,"discussion_content":"感谢解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665300147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":589742,"ip_address":"四川","group_id":0},"score":589754,"extra":""}]}]},{"had_liked":false,"id":353718,"user_name":"小明","can_delete":false,"product_type":"c1","uid":2812380,"ip_address":"北京","ucode":"F10955FF010368","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","comment_is_top":false,"comment_ctime":1659692461,"is_pvip":false,"replies":[{"id":128703,"content":"👍。只要理解了背后的原理，容量增大，解绑这些都不是问题了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1659925145,"ip_address":"北京","comment_id":353718,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"为了避免扩容导致解除“绑定关系”，如果一味的将容量变得超级大，又会违背切片的初衷。哈哈，患得患失了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585762,"discussion_content":"文中仅仅是为了演示构造的一个例子。通常我们不会去基于数组构建切片，而是直接用make或[]T{}来构建切片变量。全程使用切片变量不需要开发者关心底层存储数据的数组的变化，即便扩容也是自动的，对开发者无感，开发者只需要操作切片变量即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661810213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1111176,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","nickname":"c340","note":"","ucode":"D64CC3DDD09A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585767,"discussion_content":"切片作为参数的话，扩容是反应不到函数外的吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661818066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585762,"ip_address":"福建","group_id":0},"score":585767,"extra":""}]}]},{"had_liked":false,"id":348049,"user_name":"Tristana","can_delete":false,"product_type":"c1","uid":1006227,"ip_address":"","ucode":"FC47CF6A5868D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/93/e081b4de.jpg","comment_is_top":false,"comment_ctime":1654688640,"is_pvip":false,"replies":[{"id":126848,"content":"基本正确。\n\n不过sl2并没有真正分配底层数组。见https:&#47;&#47;tonybai.com&#47;2022&#47;02&#47;15&#47;whether-go-allocate-underlying-array-for-empty-slice","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654760603,"ip_address":"","comment_id":348049,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"总结：\nsl1 延迟初始化，没有分配底层数组，等于 nil；\nsl2 立即初始化，初始化后分配了一个长度为 0 的底层数组，不等于 nil。\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575338,"discussion_content":"基本正确。\n\n不过sl2并没有真正分配底层数组。见https://tonybai.com/2022/02/15/whether-go-allocate-underlying-array-for-empty-slice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654760603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345385,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1652243650,"is_pvip":false,"replies":[{"id":126099,"content":"有关的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1652353878,"ip_address":"","comment_id":345385,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"自动扩容时候，会导致底层数组的拷贝，这将会带来一定的性能损耗，且跟数组本身大小有关？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571700,"discussion_content":"有关的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652353878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343370,"user_name":"pythonbug","can_delete":false,"product_type":"c1","uid":1487274,"ip_address":"","ucode":"1A70CA92FFF8EB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/wgMMrp1hvSB3E30KqZvMsj3KQdAI3T1uQM77LT7hZ65nVSjPGRg3AbUOyiahnssA6AIT5PAkyHFmlTBzUH9gdyQ/132","comment_is_top":false,"comment_ctime":1650804038,"is_pvip":false,"replies":[{"id":125424,"content":"会的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650966794,"ip_address":"","comment_id":343370,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师好，切片与数组解除绑定关系后，老的数组因为没有引用，是不是会被GC清理。\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571700,"discussion_content":"有关的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652353878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342968,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650554005,"is_pvip":true,"replies":[{"id":125287,"content":"s2是空切片，但也没有分配底层数组。可以看我这篇文章的解析：https:&#47;&#47;tonybai.com&#47;2022&#47;02&#47;15&#47;whether-go-allocate-underlying-array-for-empty-slice","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650593925,"ip_address":"","comment_id":342968,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"s1是切片声明，值是nil，底层没有分配内存空间。\ns2是定义了切片并完成了初始化，值不是nil，底层分配了内存空间。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567652,"discussion_content":"会的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650966794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338841,"user_name":"李少","can_delete":false,"product_type":"c1","uid":1300656,"ip_address":"","ucode":"6CEC3C4B30F8C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/b0/796e3832.jpg","comment_is_top":false,"comment_ctime":1647760392,"is_pvip":false,"replies":[{"id":123857,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647810570,"ip_address":"","comment_id":338841,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"null和empty的区别，一个未初始化，只声明了，另外一个初始化了，大小为0，没有元素","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566062,"discussion_content":"s2是空切片，但也没有分配底层数组。可以看我这篇文章的解析：https://tonybai.com/2022/02/15/whether-go-allocate-underlying-array-for-empty-slice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650593926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337522,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1646879228,"is_pvip":false,"replies":[{"id":123327,"content":"没区别。不过有些切片通过字面值是无法直接创建出来的，比如make([]int, 0, 10)创建一个长度为0，cap为10的切片。通过字面值就很难创建，除非reslice。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646881246,"ip_address":"","comment_id":337522,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"make和字面值创建的切片有区别吗？\n\n比如下面的代码\n```\ni := make([]int, 2, 2)\ni[0]=1\ni[1]=2\n```\n\n```\ni := []int{1,2}\n```","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555358,"discussion_content":"没区别。不过有些切片通过字面值是无法直接创建出来的，比如make([]int, 0, 10)创建一个长度为0，cap为10的切片。通过字面值就很难创建，除非reslice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646881246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334403,"user_name":"ming","can_delete":false,"product_type":"c1","uid":2316097,"ip_address":"","ucode":"AD183B7E1010A8","user_header":"https://static001.geekbang.org/account/avatar/00/23/57/41/886a9d74.jpg","comment_is_top":false,"comment_ctime":1644919003,"is_pvip":true,"replies":[{"id":122581,"content":"关于对切片的遍历的“坑”与原理，在第19讲有详细说明。看完第19讲后，如果你还搞不定上面代码为啥输出：1 2 3 1 2 3，你再来留言😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645594691,"ip_address":"","comment_id":334403,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，请教个问题。下面这段代码为什么是1 2 3 1 2 3呢？\nfunc main() {\n\tarr := []int{1, 2, 3}\n\tfor _, v := range arr {\n\t\tarr = append(arr, v)\n\t}\n\tfmt.Println(arr)\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552778,"discussion_content":"关于对切片的遍历的“坑”与原理，在第19讲有详细说明。看完第19讲后，如果你还搞不定上面代码为啥输出：1 2 3 1 2 3，你再来留言😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645594691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358915,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"北京","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1665022560,"is_pvip":false,"replies":[{"id":130603,"content":"扩容后，切片的存储空间也是连续的，但这个存储空间与原数组已经不是一个存储空间了，彻底分离了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665296702,"ip_address":"北京","comment_id":358915,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"有一个疑问，切片是基于数组创建的，数组的存储空间是连续的，那么如果对切片进行扩容，扩容出来的 和已经存在的原始数据 存储空间也是连续的吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589742,"discussion_content":"扩容后，切片的存储空间也是连续的，但这个存储空间与原数组已经不是一个存储空间了，彻底分离了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665296702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2267730,"avatar":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","nickname":"不明真相的群众","note":"","ucode":"046A7D345171B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":589754,"discussion_content":"感谢解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665300147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":589742,"ip_address":"四川","group_id":0},"score":589754,"extra":""}]}]},{"had_liked":false,"id":355801,"user_name":"undefined.","can_delete":false,"product_type":"c1","uid":2365118,"ip_address":"辽宁","ucode":"57BB435A96AA79","user_header":"https://static001.geekbang.org/account/avatar/00/24/16/be/3c194378.jpg","comment_is_top":false,"comment_ctime":1661759213,"is_pvip":false,"replies":[{"id":129516,"content":"文中仅仅是为了演示构造的一个例子。通常我们不会去基于数组构建切片，而是直接用make或[]T{}来构建切片变量。全程使用切片变量不需要开发者关心底层存储数据的数组的变化，即便扩容也是自动的，对开发者无感，开发者只需要操作切片变量即可。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1661810213,"ip_address":"辽宁","comment_id":355801,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"假设切片apped超过cap后，重新分配空间，新切片修改数据不会改变原来的数组，那不是很容易混淆或者引发bug ? 请问这个在实际生产上是怎么解决的呢 ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585762,"discussion_content":"文中仅仅是为了演示构造的一个例子。通常我们不会去基于数组构建切片，而是直接用make或[]T{}来构建切片变量。全程使用切片变量不需要开发者关心底层存储数据的数组的变化，即便扩容也是自动的，对开发者无感，开发者只需要操作切片变量即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661810213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1111176,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/88/133bc14b.jpg","nickname":"c340","note":"","ucode":"D64CC3DDD09A0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585767,"discussion_content":"切片作为参数的话，扩容是反应不到函数外的吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661818066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585762,"ip_address":"福建","group_id":0},"score":585767,"extra":""}]}]},{"had_liked":false,"id":353718,"user_name":"小明","can_delete":false,"product_type":"c1","uid":2812380,"ip_address":"北京","ucode":"F10955FF010368","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e9/dc/cc05ebc7.jpg","comment_is_top":false,"comment_ctime":1659692461,"is_pvip":false,"replies":[{"id":128703,"content":"👍。只要理解了背后的原理，容量增大，解绑这些都不是问题了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1659925145,"ip_address":"北京","comment_id":353718,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"为了避免扩容导致解除“绑定关系”，如果一味的将容量变得超级大，又会违背切片的初衷。哈哈，患得患失了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583130,"discussion_content":"👍。只要理解了背后的原理，容量增大，解绑这些都不是问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659925145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348049,"user_name":"Tristana","can_delete":false,"product_type":"c1","uid":1006227,"ip_address":"","ucode":"FC47CF6A5868D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/93/e081b4de.jpg","comment_is_top":false,"comment_ctime":1654688640,"is_pvip":false,"replies":[{"id":126848,"content":"基本正确。\n\n不过sl2并没有真正分配底层数组。见https:&#47;&#47;tonybai.com&#47;2022&#47;02&#47;15&#47;whether-go-allocate-underlying-array-for-empty-slice","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654760603,"ip_address":"","comment_id":348049,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"总结：\nsl1 延迟初始化，没有分配底层数组，等于 nil；\nsl2 立即初始化，初始化后分配了一个长度为 0 的底层数组，不等于 nil。\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583130,"discussion_content":"👍。只要理解了背后的原理，容量增大，解绑这些都不是问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659925145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345385,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1652243650,"is_pvip":false,"replies":[{"id":126099,"content":"有关的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1652353878,"ip_address":"","comment_id":345385,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"自动扩容时候，会导致底层数组的拷贝，这将会带来一定的性能损耗，且跟数组本身大小有关？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575338,"discussion_content":"基本正确。\n\n不过sl2并没有真正分配底层数组。见https://tonybai.com/2022/02/15/whether-go-allocate-underlying-array-for-empty-slice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654760603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343370,"user_name":"pythonbug","can_delete":false,"product_type":"c1","uid":1487274,"ip_address":"","ucode":"1A70CA92FFF8EB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/wgMMrp1hvSB3E30KqZvMsj3KQdAI3T1uQM77LT7hZ65nVSjPGRg3AbUOyiahnssA6AIT5PAkyHFmlTBzUH9gdyQ/132","comment_is_top":false,"comment_ctime":1650804038,"is_pvip":false,"replies":[{"id":125424,"content":"会的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650966794,"ip_address":"","comment_id":343370,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师好，切片与数组解除绑定关系后，老的数组因为没有引用，是不是会被GC清理。\n","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567652,"discussion_content":"会的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650966794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342968,"user_name":"mikewoo","can_delete":false,"product_type":"c1","uid":1118888,"ip_address":"","ucode":"9AE90E05048DE1","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/a8/8aaf13e0.jpg","comment_is_top":false,"comment_ctime":1650554005,"is_pvip":true,"replies":[{"id":125287,"content":"s2是空切片，但也没有分配底层数组。可以看我这篇文章的解析：https:&#47;&#47;tonybai.com&#47;2022&#47;02&#47;15&#47;whether-go-allocate-underlying-array-for-empty-slice","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650593925,"ip_address":"","comment_id":342968,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"s1是切片声明，值是nil，底层没有分配内存空间。\ns2是定义了切片并完成了初始化，值不是nil，底层分配了内存空间。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566062,"discussion_content":"s2是空切片，但也没有分配底层数组。可以看我这篇文章的解析：https://tonybai.com/2022/02/15/whether-go-allocate-underlying-array-for-empty-slice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650593926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338841,"user_name":"李少","can_delete":false,"product_type":"c1","uid":1300656,"ip_address":"","ucode":"6CEC3C4B30F8C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/b0/796e3832.jpg","comment_is_top":false,"comment_ctime":1647760392,"is_pvip":false,"replies":[{"id":123857,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647810570,"ip_address":"","comment_id":338841,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"null和empty的区别，一个未初始化，只声明了，另外一个初始化了，大小为0，没有元素","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557434,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647810570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337522,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1646879228,"is_pvip":false,"replies":[{"id":123327,"content":"没区别。不过有些切片通过字面值是无法直接创建出来的，比如make([]int, 0, 10)创建一个长度为0，cap为10的切片。通过字面值就很难创建，除非reslice。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646881246,"ip_address":"","comment_id":337522,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"make和字面值创建的切片有区别吗？\n\n比如下面的代码\n```\ni := make([]int, 2, 2)\ni[0]=1\ni[1]=2\n```\n\n```\ni := []int{1,2}\n```","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557434,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647810570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334403,"user_name":"ming","can_delete":false,"product_type":"c1","uid":2316097,"ip_address":"","ucode":"AD183B7E1010A8","user_header":"https://static001.geekbang.org/account/avatar/00/23/57/41/886a9d74.jpg","comment_is_top":false,"comment_ctime":1644919003,"is_pvip":true,"replies":[{"id":122581,"content":"关于对切片的遍历的“坑”与原理，在第19讲有详细说明。看完第19讲后，如果你还搞不定上面代码为啥输出：1 2 3 1 2 3，你再来留言😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645594691,"ip_address":"","comment_id":334403,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，请教个问题。下面这段代码为什么是1 2 3 1 2 3呢？\nfunc main() {\n\tarr := []int{1, 2, 3}\n\tfor _, v := range arr {\n\t\tarr = append(arr, v)\n\t}\n\tfmt.Println(arr)\n}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555358,"discussion_content":"没区别。不过有些切片通过字面值是无法直接创建出来的，比如make([]int, 0, 10)创建一个长度为0，cap为10的切片。通过字面值就很难创建，除非reslice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646881246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333664,"user_name":"Joeforfun","can_delete":false,"product_type":"c1","uid":1797145,"ip_address":"","ucode":"3D2BA912E0D77D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaxgvyIjNFomptQ9qBk4iaakYOS1XojYHDp48TXt1kX9DxTkKuR2UXGTyhG1liahib6E4BLF12ia6mic2pF0t4ECeZIQ/132","comment_is_top":false,"comment_ctime":1644463830,"is_pvip":false,"replies":[{"id":121924,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644542027,"ip_address":"","comment_id":333664,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"思考题：\t\nfmt.Println(sl1==nil) &#47;&#47;true\nfmt.Println(sl2==nil) &#47;&#47;false  \n其他：\n1、Go 语言的切片类型属于引用类型，切片可以看成是数组的“描述符 \n2、数组是一个值类型 ","like_count":1},{"had_liked":false,"id":332846,"user_name":"Geek_2337af","can_delete":false,"product_type":"c1","uid":2847330,"ip_address":"","ucode":"54B135EB7E70F1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep7c7UKsjRiclaAqD9vMHSUXayzrvRhvic3Lm6ibX82L3DibJnCCtDmB3OfxbuVjetpT6Qa8IuwqZCWlw/132","comment_is_top":false,"comment_ctime":1643725421,"is_pvip":false,"replies":[{"id":121803,"content":"没有分配空间。后续用的时候(append时)才会真正分配空间。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1644290882,"ip_address":"","comment_id":332846,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl = []int{}空切片也有底层数组，那个数组是怎样的，抽象不出来啊，怎么理解好呢？老师。\n到底有没有分配空间呢，占用内存为0吗","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550424,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644542027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325897,"user_name":"撇撇","can_delete":false,"product_type":"c1","uid":1010786,"ip_address":"","ucode":"938305F9F3F19C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/62/cbb91635.jpg","comment_is_top":false,"comment_ctime":1639218302,"is_pvip":false,"replies":[{"id":119087,"content":"为什么要记录起始位置的信息呢？起始位置就是底层数组的第一个元素处啊。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640054492,"ip_address":"","comment_id":325897,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"请问，这个切片的描述符中为啥没有起始位置的信息？那是记录在哪的？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549905,"discussion_content":"没有分配空间。后续用的时候(append时)才会真正分配空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644290882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322097,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1637163635,"is_pvip":false,"replies":[{"id":117145,"content":"1. 其实我想表达的是切片与数组指针操作相比。以前在C语言中用数组指针，使用的是指针运算的方式获取元素地址。这里描述可能不够精确。\n2. 这里想表达的是数组是一块连续存储的内存，通过下标访问其元素非常高效。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637559078,"ip_address":"","comment_id":322097,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"Tony Bai  老师，你文中这么说：\n\n1. “另外一个原因是切片相较于数组指针也是有优势的，切片可以提供比指针更为强大的功能，比如下标访问、边界溢出校验、动态扩容等。”   传统的数组也可以提供下标访问的吧？这不算切片的优势吧？\n\n2. “通过数组类型变量以及下标值，我们可以很容易地访问到数组中的元素值，并且这种访问是十分高效的，不存在 Go 运行时带来的额外开销。”  这种访问为什么高效？ 没明白。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540412,"discussion_content":"为什么要记录起始位置的信息呢？起始位置就是底层数组的第一个元素处啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321579,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1636955772,"is_pvip":false,"replies":[{"id":117127,"content":"直击要害！✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551225,"ip_address":"","comment_id":321579,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl1 []int        ==&gt; sl1是nil\nvar sl2 = []int{}   ==&gt; sl2不是nil, 是个空的集合","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532184,"discussion_content":"直击要害！✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321559,"user_name":"程旭阳","can_delete":false,"product_type":"c1","uid":1027691,"ip_address":"","ucode":"54BEAD957CEF21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/6b/b72b0d90.jpg","comment_is_top":false,"comment_ctime":1636947376,"is_pvip":true,"replies":[{"id":117124,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551011,"ip_address":"","comment_id":321559,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"```\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tvar sl1 []int\n\tvar sl2 = []int{}\n\n\tfmt.Printf(&quot;%T, %v, %p\\n&quot;, sl1, sl1, sl1) &#47;&#47; []int, [], 0x0\n\tfmt.Printf(&quot;%T, %v, %p\\n&quot;, sl2, sl2, sl2) &#47;&#47; []int, [], 某个地址值\n\n\tfmt.Println(sl1 == nil) &#47;&#47; true\n\tfmt.Println(sl2 == nil) &#47;&#47; false\n\n\tfmt.Println(len(sl1), cap(sl1)) &#47;&#47; 0, 0\n\tfmt.Println(len(sl2), cap(sl2)) &#47;&#47; 0, 0\n\n\t&#47;&#47;    fmt.Println(sl1[0]) 下标越界 panic\n\t&#47;&#47;    fmt.Println(sl2[0]) 下标越界 panic\n\n\tsl1 = append(sl1, 1) &#47;&#47; 可以 append 操作\n\tsl2 = append(sl2, 1) &#47;&#47; 可以 append 操作\n}\n```","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532184,"discussion_content":"直击要害！✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375754,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685950149,"is_pvip":false,"replies":[{"id":137150,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686093408,"ip_address":"辽宁","comment_id":375754,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\nfmt.Println(sl1 == nil)\nfmt.Println(sl2 == nil)\n----------\ntrue                     \nfalse  \n---------\n用起来区别不大，只是一个是nil","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620344,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686093409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363812,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"广东","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1670215090,"is_pvip":false,"replies":[{"id":132328,"content":"追问的评论在后台的确看不到，这个应该是平台没实现的feature。\n\n扩容是slice底层数组扩容，slice的地址不变。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670454225,"ip_address":"广东","comment_id":363812,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"在评论区追问好像不会被回复。。那我只能再问一下了\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tsl := arr[1:2]\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 222)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 333)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl[1] = 111\n\tfmt.Println(arr, sl)\n}\n输出：\n[2], addr: 0xc000004078, len: 1, cap: 2\n[2 222], addr: 0xc000004078, len: 2, cap: 2\n[2 222 333], addr: 0xc000004078, len: 3, cap: 4\n[1 2 222] [2 111 333]\n从这段程序的输出可以看到最后一次append扩容了（cap翻倍了）但是为什么地址没有变呢\n我的go版本是1.17.3\n（老师您上次的回答没答到点上，所以允许我再问一次。。。）","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595891,"discussion_content":"追问的评论在后台的确看不到，这个应该是平台没实现的feature。\n\n扩容是slice底层数组扩容，slice的地址不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670454225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351221,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1657617516,"is_pvip":false,"replies":[{"id":127785,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657699946,"ip_address":"","comment_id":351221,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tfmt.Println(&quot;----------------nil slice case start -------------&quot;)\n\tvar nilSlice1 []int\n\n\tif nilSlice1 == nil {\n\t\tfmt.Println(&quot;直接声明的切片默认值为：nil&quot;)\n\t\tfmt.Println(len(nilSlice1))\n\t\tfmt.Println(cap(nilSlice1))\n\t\tfmt.Println(&amp;nilSlice1)\n\t}\n\n\tvar nilSlice2 = *new([]int)\n\n\tif nilSlice2 == nil {\n\t\tfmt.Println(&quot;直接声明的切片默认值为：nil&quot;)\n\t}\n\n\tfmt.Println(&quot;----------------nil slice case end -------------&quot;)\n\n\tfmt.Println(&quot;----------------empty slice case start -------------&quot;)\n\n\tvar s2 = []int{}\n\tvar s3 = make([]int, 0)\n\n\tif s2 != nil {\n\t\tfmt.Println(&quot;s2直接声明的切片默认值为：empty&quot;)\n\t\tfmt.Println(len(s2))\n\t\tfmt.Println(cap(s2))\n\t\tfmt.Println(&amp;s2)\n\t}\n\n\tif s3 != nil {\n\t\tfmt.Println(&quot;s3直接声明的切片默认值为：empty&quot;)\n\t\tfmt.Println(len(s3))\n\t\tfmt.Println(cap(s3))\n\t\tfmt.Println(&amp;s3)\n\t}\n\tfmt.Println(&quot;----------------empty slice case end -------------&quot;)\n}\n\n切片可以看成是“文件描述符”经典！\n\nvar sl1 []int   ==&gt;  nil 底层不会分配内存空间\nvar sl2 = []int{}   ==&gt; 不为nil  底层分配了内存空间","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579814,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657699946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340290,"user_name":"Derek","can_delete":false,"product_type":"c1","uid":1146983,"ip_address":"","ucode":"A4D5DED1E00F60","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/67/4e381da5.jpg","comment_is_top":false,"comment_ctime":1648720295,"is_pvip":false,"replies":[{"id":124466,"content":"无论是理论分析，还是实际运行这段代码，输出的都是[22 13 24 25 26]，这个没错吧。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648803524,"ip_address":"","comment_id":340290,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，切片动态扩容里的最后一段代码第10行，[22 13 24 25 26] ，第一个应该是12","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579814,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657699946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333664,"user_name":"Joeforfun","can_delete":false,"product_type":"c1","uid":1797145,"ip_address":"","ucode":"3D2BA912E0D77D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaxgvyIjNFomptQ9qBk4iaakYOS1XojYHDp48TXt1kX9DxTkKuR2UXGTyhG1liahib6E4BLF12ia6mic2pF0t4ECeZIQ/132","comment_is_top":false,"comment_ctime":1644463830,"is_pvip":false,"replies":[{"id":121924,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644542027,"ip_address":"","comment_id":333664,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"思考题：\t\nfmt.Println(sl1==nil) &#47;&#47;true\nfmt.Println(sl2==nil) &#47;&#47;false  \n其他：\n1、Go 语言的切片类型属于引用类型，切片可以看成是数组的“描述符 \n2、数组是一个值类型 ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550424,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644542027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332846,"user_name":"Geek_2337af","can_delete":false,"product_type":"c1","uid":2847330,"ip_address":"","ucode":"54B135EB7E70F1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep7c7UKsjRiclaAqD9vMHSUXayzrvRhvic3Lm6ibX82L3DibJnCCtDmB3OfxbuVjetpT6Qa8IuwqZCWlw/132","comment_is_top":false,"comment_ctime":1643725421,"is_pvip":false,"replies":[{"id":121803,"content":"没有分配空间。后续用的时候(append时)才会真正分配空间。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1644290882,"ip_address":"","comment_id":332846,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl = []int{}空切片也有底层数组，那个数组是怎样的，抽象不出来啊，怎么理解好呢？老师。\n到底有没有分配空间呢，占用内存为0吗","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549905,"discussion_content":"没有分配空间。后续用的时候(append时)才会真正分配空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644290882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325897,"user_name":"撇撇","can_delete":false,"product_type":"c1","uid":1010786,"ip_address":"","ucode":"938305F9F3F19C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/62/cbb91635.jpg","comment_is_top":false,"comment_ctime":1639218302,"is_pvip":false,"replies":[{"id":119087,"content":"为什么要记录起始位置的信息呢？起始位置就是底层数组的第一个元素处啊。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640054492,"ip_address":"","comment_id":325897,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"请问，这个切片的描述符中为啥没有起始位置的信息？那是记录在哪的？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540412,"discussion_content":"为什么要记录起始位置的信息呢？起始位置就是底层数组的第一个元素处啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640054492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322097,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1637163635,"is_pvip":false,"replies":[{"id":117145,"content":"1. 其实我想表达的是切片与数组指针操作相比。以前在C语言中用数组指针，使用的是指针运算的方式获取元素地址。这里描述可能不够精确。\n2. 这里想表达的是数组是一块连续存储的内存，通过下标访问其元素非常高效。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637559078,"ip_address":"","comment_id":322097,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"Tony Bai  老师，你文中这么说：\n\n1. “另外一个原因是切片相较于数组指针也是有优势的，切片可以提供比指针更为强大的功能，比如下标访问、边界溢出校验、动态扩容等。”   传统的数组也可以提供下标访问的吧？这不算切片的优势吧？\n\n2. “通过数组类型变量以及下标值，我们可以很容易地访问到数组中的元素值，并且这种访问是十分高效的，不存在 Go 运行时带来的额外开销。”  这种访问为什么高效？ 没明白。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532223,"discussion_content":"1. 其实我想表达的是切片与数组指针操作相比。以前在C语言中用数组指针，使用的是指针运算的方式获取元素地址。这里描述可能不够精确。\n2. 这里想表达的是数组是一块连续存储的内存，通过下标访问其元素非常高效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637559078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321579,"user_name":"TonyGao","can_delete":false,"product_type":"c1","uid":2827964,"ip_address":"","ucode":"75E9F13CB7C66D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","comment_is_top":false,"comment_ctime":1636955772,"is_pvip":false,"replies":[{"id":117127,"content":"直击要害！✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551225,"ip_address":"","comment_id":321579,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl1 []int        ==&gt; sl1是nil\nvar sl2 = []int{}   ==&gt; sl2不是nil, 是个空的集合","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532223,"discussion_content":"1. 其实我想表达的是切片与数组指针操作相比。以前在C语言中用数组指针，使用的是指针运算的方式获取元素地址。这里描述可能不够精确。\n2. 这里想表达的是数组是一块连续存储的内存，通过下标访问其元素非常高效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637559078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321559,"user_name":"程旭阳","can_delete":false,"product_type":"c1","uid":1027691,"ip_address":"","ucode":"54BEAD957CEF21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/6b/b72b0d90.jpg","comment_is_top":false,"comment_ctime":1636947376,"is_pvip":true,"replies":[{"id":117124,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637551011,"ip_address":"","comment_id":321559,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"```\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tvar sl1 []int\n\tvar sl2 = []int{}\n\n\tfmt.Printf(&quot;%T, %v, %p\\n&quot;, sl1, sl1, sl1) &#47;&#47; []int, [], 0x0\n\tfmt.Printf(&quot;%T, %v, %p\\n&quot;, sl2, sl2, sl2) &#47;&#47; []int, [], 某个地址值\n\n\tfmt.Println(sl1 == nil) &#47;&#47; true\n\tfmt.Println(sl2 == nil) &#47;&#47; false\n\n\tfmt.Println(len(sl1), cap(sl1)) &#47;&#47; 0, 0\n\tfmt.Println(len(sl2), cap(sl2)) &#47;&#47; 0, 0\n\n\t&#47;&#47;    fmt.Println(sl1[0]) 下标越界 panic\n\t&#47;&#47;    fmt.Println(sl2[0]) 下标越界 panic\n\n\tsl1 = append(sl1, 1) &#47;&#47; 可以 append 操作\n\tsl2 = append(sl2, 1) &#47;&#47; 可以 append 操作\n}\n```","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532179,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375754,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1685950149,"is_pvip":false,"replies":[{"id":137150,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686093408,"ip_address":"辽宁","comment_id":375754,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"var sl1 []int\nvar sl2 = []int{}\nfmt.Println(sl1 == nil)\nfmt.Println(sl2 == nil)\n----------\ntrue                     \nfalse  \n---------\n用起来区别不大，只是一个是nil","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532179,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637551011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363812,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"广东","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1670215090,"is_pvip":false,"replies":[{"id":132328,"content":"追问的评论在后台的确看不到，这个应该是平台没实现的feature。\n\n扩容是slice底层数组扩容，slice的地址不变。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670454225,"ip_address":"广东","comment_id":363812,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"在评论区追问好像不会被回复。。那我只能再问一下了\nfunc main() {\n\tarr := [3]int{1, 2, 3}\n\tsl := arr[1:2]\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 222)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl = append(sl, 333)\n\tfmt.Printf(&quot;%v, addr: %p, len: %d, cap: %d\\n&quot;, sl, &amp;sl, len(sl), cap(sl))\n\tsl[1] = 111\n\tfmt.Println(arr, sl)\n}\n输出：\n[2], addr: 0xc000004078, len: 1, cap: 2\n[2 222], addr: 0xc000004078, len: 2, cap: 2\n[2 222 333], addr: 0xc000004078, len: 3, cap: 4\n[1 2 222] [2 111 333]\n从这段程序的输出可以看到最后一次append扩容了（cap翻倍了）但是为什么地址没有变呢\n我的go版本是1.17.3\n（老师您上次的回答没答到点上，所以允许我再问一次。。。）","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620344,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686093409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351221,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1657617516,"is_pvip":false,"replies":[{"id":127785,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657699946,"ip_address":"","comment_id":351221,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tfmt.Println(&quot;----------------nil slice case start -------------&quot;)\n\tvar nilSlice1 []int\n\n\tif nilSlice1 == nil {\n\t\tfmt.Println(&quot;直接声明的切片默认值为：nil&quot;)\n\t\tfmt.Println(len(nilSlice1))\n\t\tfmt.Println(cap(nilSlice1))\n\t\tfmt.Println(&amp;nilSlice1)\n\t}\n\n\tvar nilSlice2 = *new([]int)\n\n\tif nilSlice2 == nil {\n\t\tfmt.Println(&quot;直接声明的切片默认值为：nil&quot;)\n\t}\n\n\tfmt.Println(&quot;----------------nil slice case end -------------&quot;)\n\n\tfmt.Println(&quot;----------------empty slice case start -------------&quot;)\n\n\tvar s2 = []int{}\n\tvar s3 = make([]int, 0)\n\n\tif s2 != nil {\n\t\tfmt.Println(&quot;s2直接声明的切片默认值为：empty&quot;)\n\t\tfmt.Println(len(s2))\n\t\tfmt.Println(cap(s2))\n\t\tfmt.Println(&amp;s2)\n\t}\n\n\tif s3 != nil {\n\t\tfmt.Println(&quot;s3直接声明的切片默认值为：empty&quot;)\n\t\tfmt.Println(len(s3))\n\t\tfmt.Println(cap(s3))\n\t\tfmt.Println(&amp;s3)\n\t}\n\tfmt.Println(&quot;----------------empty slice case end -------------&quot;)\n}\n\n切片可以看成是“文件描述符”经典！\n\nvar sl1 []int   ==&gt;  nil 底层不会分配内存空间\nvar sl2 = []int{}   ==&gt; 不为nil  底层分配了内存空间","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595891,"discussion_content":"追问的评论在后台的确看不到，这个应该是平台没实现的feature。\n\n扩容是slice底层数组扩容，slice的地址不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670454225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340290,"user_name":"Derek","can_delete":false,"product_type":"c1","uid":1146983,"ip_address":"","ucode":"A4D5DED1E00F60","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/67/4e381da5.jpg","comment_is_top":false,"comment_ctime":1648720295,"is_pvip":false,"replies":[{"id":124466,"content":"无论是理论分析，还是实际运行这段代码，输出的都是[22 13 24 25 26]，这个没错吧。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1648803524,"ip_address":"","comment_id":340290,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，切片动态扩容里的最后一段代码第10行，[22 13 24 25 26] ，第一个应该是12","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559520,"discussion_content":"无论是理论分析，还是实际运行这段代码，输出的都是[22 13 24 25 26]，这个没错吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648803525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322929,"user_name":"长卿","can_delete":false,"product_type":"c1","uid":2265408,"ip_address":"","ucode":"57DBEB00BA7FF3","user_header":"","comment_is_top":false,"comment_ctime":1637660719,"is_pvip":false,"replies":[{"id":117556,"content":"没错啊。cap = max-low，你的例子中，max为数组长度5， low=1，所以cap=4。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638256741,"ip_address":"","comment_id":322929,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师你好，文中在数组的切片化一节中讲道： “此外，我们在进行数组切片化的时候，通常省略 max，而 max 的默认值为数组的长度。”  max的默认值是不是应该为：原数组的长度 - low呢？因为在下面的例子中：\nu := [...]int{11, 12, 13, 14, 15}\nfmt.Println(&quot;array:&quot;, u) &#47;&#47; [11, 12, 13, 14, 15]\ns := u[1:3]\nfmt.Printf(&quot;slice(len=%d, cap=%d): %v\\n&quot;, len(s), cap(s), s) &#47;&#47; [12, 13]\n\n得到 cap 为4，而不是5","like_count":0},{"had_liked":false,"id":322565,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1637484247,"is_pvip":false,"replies":[{"id":117157,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637562850,"ip_address":"","comment_id":322565,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"针对思考题来说，可以从底层角度来看：这两者的区别是第一个其实相当于声明了一个结构体变量，但是这个变量都是零值；而第二个是有具体值的。站在使用的角度来看，第一个是 nil，第二个非 nil。推荐使用第一种。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532249,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637562850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321526,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636939751,"is_pvip":false,"replies":null,"discussion_count":6,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"数组在传参的时候是作为一个整体的，这个我倒是我没注意到。不过切片坑是真的多，需要先好好了解底层原理，不然很容易被坑。可以再看看饶大切片相关文章补充一下：https:&#47;&#47;qcrao.com&#47;2019&#47;04&#47;02&#47;dive-into-go-slice&#47;","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532249,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637562850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390547,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715614209,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"本节介绍了数据结构中最常用的线性表在go语言中的使用，go提供了数组和切片两种同构类型线性表\n1. go数组可以看作静态数组，通过多种方式初始化，也支持多维数组\n2.切片可以视作动态数组，也可以从数组来创建切片\n3.切片可以在达到容量时自动2倍扩容（int类型），个人不建议用数组来创建切片，容易触发达到上限后动态扩容解除绑定，即便不接触，进行append操作修改源数组也非常不直观。\n\n思考题：sl1是声明但未初始化，引用为nil；sl2是初始化，有地址，但是没有值","like_count":0},{"had_liked":false,"id":322929,"user_name":"长卿","can_delete":false,"product_type":"c1","uid":2265408,"ip_address":"","ucode":"57DBEB00BA7FF3","user_header":"","comment_is_top":false,"comment_ctime":1637660719,"is_pvip":false,"replies":[{"id":117556,"content":"没错啊。cap = max-low，你的例子中，max为数组长度5， low=1，所以cap=4。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638256741,"ip_address":"","comment_id":322929,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师你好，文中在数组的切片化一节中讲道： “此外，我们在进行数组切片化的时候，通常省略 max，而 max 的默认值为数组的长度。”  max的默认值是不是应该为：原数组的长度 - low呢？因为在下面的例子中：\nu := [...]int{11, 12, 13, 14, 15}\nfmt.Println(&quot;array:&quot;, u) &#47;&#47; [11, 12, 13, 14, 15]\ns := u[1:3]\nfmt.Printf(&quot;slice(len=%d, cap=%d): %v\\n&quot;, len(s), cap(s), s) &#47;&#47; [12, 13]\n\n得到 cap 为4，而不是5","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534679,"discussion_content":"没错啊。cap = max-low，你的例子中，max为数组长度5， low=1，所以cap=4。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638256741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632918,"discussion_content":"文章中，“而 max 的默认值为数组的长度” 的前提是切片的 low 为 0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701610695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322565,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1637484247,"is_pvip":false,"replies":[{"id":117157,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637562850,"ip_address":"","comment_id":322565,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"针对思考题来说，可以从底层角度来看：这两者的区别是第一个其实相当于声明了一个结构体变量，但是这个变量都是零值；而第二个是有具体值的。站在使用的角度来看，第一个是 nil，第二个非 nil。推荐使用第一种。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534679,"discussion_content":"没错啊。cap = max-low，你的例子中，max为数组长度5， low=1，所以cap=4。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638256741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2869118,"avatar":"","nickname":"Geek_73c432","note":"","ucode":"3E11EB02B14DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632918,"discussion_content":"文章中，“而 max 的默认值为数组的长度” 的前提是切片的 low 为 0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701610695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321526,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1636939751,"is_pvip":false,"replies":null,"discussion_count":6,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"数组在传参的时候是作为一个整体的，这个我倒是我没注意到。不过切片坑是真的多，需要先好好了解底层原理，不然很容易被坑。可以再看看饶大切片相关文章补充一下：https:&#47;&#47;qcrao.com&#47;2019&#47;04&#47;02&#47;dive-into-go-slice&#47;","like_count":5,"discussions":[{"author":{"id":1629565,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dd/7d/5d3ab033.jpg","nickname":"不求闻达","note":"","ucode":"B265859B9566D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612629,"discussion_content":"传值一般用切片[]a 还是用[]*a它们区别是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680825495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530851,"discussion_content":"请问一下这篇文章的作者什么来历？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637159390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415290,"discussion_content":"Go是带GC的，数组只能整体传，传指针太危险，这时slice作为数组的描述符来传递就安全的多，而且减少性能开销。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637048315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530850,"discussion_content":"请问传指针为什么就很危险了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637159363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":415290,"ip_address":"","group_id":0},"score":530850,"extra":"{\"user_type\":1}"},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531897,"discussion_content":"应该是修改指针，会影响到其他使用这个指针的地方。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637462601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530850,"ip_address":"","group_id":0},"score":531897,"extra":"{\"user_type\":1}"},{"author":{"id":2908689,"avatar":"","nickname":"Geek_28d69b","note":"","ucode":"356557BAEFCBD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605449,"discussion_content":"切片也会啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676629599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":531897,"ip_address":"江苏","group_id":0},"score":605449,"extra":""}]}]},{"had_liked":false,"id":390547,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715614209,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"本节介绍了数据结构中最常用的线性表在go语言中的使用，go提供了数组和切片两种同构类型线性表\n1. go数组可以看作静态数组，通过多种方式初始化，也支持多维数组\n2.切片可以视作动态数组，也可以从数组来创建切片\n3.切片可以在达到容量时自动2倍扩容（int类型），个人不建议用数组来创建切片，容易触发达到上限后动态扩容解除绑定，即便不接触，进行append操作修改源数组也非常不直观。\n\n思考题：sl1是声明但未初始化，引用为nil；sl2是初始化，有地址，但是没有值","like_count":0,"discussions":[{"author":{"id":1629565,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dd/7d/5d3ab033.jpg","nickname":"不求闻达","note":"","ucode":"B265859B9566D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612629,"discussion_content":"传值一般用切片[]a 还是用[]*a它们区别是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680825495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530851,"discussion_content":"请问一下这篇文章的作者什么来历？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637159390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415290,"discussion_content":"Go是带GC的，数组只能整体传，传指针太危险，这时slice作为数组的描述符来传递就安全的多，而且减少性能开销。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637048315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2827964,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/26/bc/a73e4275.jpg","nickname":"TonyGao","note":"","ucode":"75E9F13CB7C66D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530850,"discussion_content":"请问传指针为什么就很危险了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637159363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":415290,"ip_address":"","group_id":0},"score":530850,"extra":"{\"user_type\":1}"},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531897,"discussion_content":"应该是修改指针，会影响到其他使用这个指针的地方。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637462601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530850,"ip_address":"","group_id":0},"score":531897,"extra":"{\"user_type\":1}"},{"author":{"id":2908689,"avatar":"","nickname":"Geek_28d69b","note":"","ucode":"356557BAEFCBD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605449,"discussion_content":"切片也会啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676629599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":531897,"ip_address":"江苏","group_id":0},"score":605449,"extra":""}]}]}]}