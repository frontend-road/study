{"id":470882,"title":"16 | 改进的废弃，怎么避免使用废弃的特性？","content":"<p>你好，我是范学雷。今天，我们讨论Java公开接口的废弃。</p><p>像所有的事物一样，公开接口也有生命周期。要废弃那些被广泛使用的、或者还有人使用的公开接口，是一个非常痛苦的过程。该怎么废弃一个公开接口，该怎么减少废弃接口对我们的影响呢？这是这一次我们要讨论的话题。</p><p>我们先来看看阅读案例。</p><h2>阅读案例</h2><p>在 JDK 中，一个公开的接口，可能会因为多种多样的原因被废弃。比如说，这个接口的设计是危险的，或者有了更新的、更好的替代接口。不管是什么原因，废弃接口的使用者们都需要尽快迁移代码，转换到替代方案上来。</p><p>在JDK中，公开接口的废弃需要使用两种不同的机制，也就是“Deprecated” 注解（annotation）和“Deprecated”文档标记（JavaDoc tag）。</p><p>Deprecated的注解会编译到类文件里，并且可以在运行时查验。这就允许像javac这样的工具检测和标记已废弃接口的使用情况了。</p><p>Deprecated文档标记用于描述废弃接口的文档中。除了标记接口的废弃状态之外，一般情况下，我们还要描述废弃的原因和替代的方案。</p><p>下面的这段代码，就是使用Java注解和文档标记来废弃一个公开接口的例子。</p><pre><code class=\"language-java\">public sealed abstract class Digest {\n    /**\n     * -- snipped\n     *\n     * @deprecated This method is not performance friendly. Use\n     *             {@link #digest(byte[], byte[]) instead.\n     */\n    @Deprecated\n    public abstract byte[] digest(byte[] message);\n\n    // snipped\n    public void digest(byte[] message, byte[] digestValue) {\n        // snipped\n    }\n}\n</code></pre><!-- [[[read_end]]] --><p>如果一段程序使用了废弃接口，编译的时候，就会提出警告。但是，有很多编译环境的配置，把编译警告看作是编译错误。为了解决这样的问题，JDK还提供了“消除使用废弃接口的编译警告”的选项。也就是SuppressWarnings注解。</p><pre><code class=\"language-java\">@SuppressWarnings(\"deprecation\")\npublic static void main(String[] args) {\n    try {\n        Digest.of(\"SHA-256\")\n              .digest(\"Hello, world!\".getBytes());\n    } catch (NoSuchAlgorithmException ex) {\n        // ignore\n    }\n}\n</code></pre><p>公开接口的废弃机制，是在JDK 1.5的时候发布的。 这种机制像一座设计者和使用者之间的沟通桥梁，减轻了双方定义或者使用废弃接口的痛苦。</p><p>遗憾的是，直到现在，公开接口的废弃，依然是一个复杂、痛苦的过程。一个公开的接口，从声明废弃，到彻底删除是一个漫长的过程。在JDK中，还存在着大量废弃了20多年都无法删除的公开接口。</p><p>为什么删除废弃的公开接口这么困难呢？如果从废弃机制本身的角度来思考，下面几个问题延迟了废弃接口使用者的迁移意愿和努力。</p><p>第一个问题，也是最重要的问题，就是SuppressWarnings注解的使用。SuppressWarnings注解的本意是消除编译警告，保持向后的编译兼容性。可是一旦编译警告消除，SuppressWarnings注解也就抵消了Deprecated注解的功效。代码的维护者一旦使用了SuppressWarnings注解，就很难再有更合适的工具，让自己知道还在使用的废弃接口有哪些了。不知道，当然就不会有行动。</p><p>第二个问题，就是废弃接口的使用者并不担心使用废弃接口。虽然我们都知道不应该使用废弃的接口，但是因为一些人认为没有紧急迁移的必要性，也不急着制定代码迁移的时间表，所以倾向于先使用SuppressWarnings注解把编译警告消除了，以后再说迁移的事情。然后，就掉入了第一个问题的陷阱。</p><p>第三个问题，就是废弃接口的使用者并不知道接口废弃了多久。在接口使用者的眼里，废弃了十年，和废弃了一年的接口，没有什么区别。可是，在接口维护者的眼里，废弃了十年的接口，应该可以放心地删除了。然而，使用者并没有感知到这样的区别。没有感知，当然也就没有急迫感了。</p><p>一旦一个接口被声明为废弃，它的问题也就再难进入接口维护者的任务列表里了。所以，这个接口的实现可能充满了风险和错误。于是局面就变成了，接口维护者难以删除废弃的接口，接口的使用者又不能获得必要的提示，这种情况实在有点尴尬。</p><h2>改进的废弃</h2><p>上面这些问题，在JDK 9的接口废弃机制里有了重大的改进。</p><p>第一个改进是添加了一个新的工具，jdeprscan。有了这个工具，就可以扫描编译好的Java类或者包，看看有没有使用废弃的接口了。即使代码使用了SuppressWarnings注解，jdeprscan的结果也不受影响。这个工具解决了我们在阅读案例里提到的第一个问题。</p><p>另外，如果我们使用第三方的类库，或者已经编译好的类库，发现对废弃接口的依赖关系很重要。如果将来废弃接口被删除，使用废弃接口的类库将不能正常运行。而jdeprscan允许我们在使用一个类库之前进行废弃依赖关系检查，提前做好风险的评估。</p><p>第二个改进是给Deprecated注解增加了一个“forRemoval”的属性。如果这个属性设置为“true\"，那就表示这个废弃接口的删除已经提上日程了。两到三个版本之后，这个废弃的接口就会被删除。这样的改进，强调了代码迁移的紧急性，它给了使用者一个明确的提示。这个改进，解决了我们在阅读案例里提到的第二个问题。</p><p>第三个改进是给Deprecated注解增加了一个“since”的属性。这个属性会说明这个接口是在哪一个版本废弃的。如果我们发现一个接口已经废弃了三年以上，就要考虑尽最大努力进行代码迁移了。这样的改进，给了废弃接口的使用者一个时间上的概念，也方便开发者安排代码迁移的时间表。这个改进，解决了我们在阅读案例里提到的第三个问题。</p><p>下面的这段代码，就是一个使用了这两种属性的例子。</p><pre><code class=\"language-java\">public sealed abstract class Digest {\n    /**\n     * -- snipped\n     *\n     * @deprecated This method is not performance friendly. Use\n     *             {@link #digest(byte[], byte[]) instead.\n     */\n    @Deprecated(since = \"1.4\", forRemoval = true)\n    public abstract byte[] digest(byte[] message);\n\n    // snipped\n    public void digest(byte[] message, byte[] digestValue) {\n        // snipped\n    }\n}\n</code></pre><p>如果在Deprecated注解里新加入“forRemoval”属性，并且设置为“true\"，那么以前的SuppressWarnings就会失去效果。要想消除掉编译警告，我们需要使用新的选项。就像下面的例子这样。</p><pre><code class=\"language-java\">@SuppressWarnings(\"removal\")\npublic static void main(String[] args) {\n    try {\n        Digest.of(\"SHA-256\")\n              .digest(\"Hello, world!\".getBytes());\n    } catch (NoSuchAlgorithmException ex) {\n        // ignore\n    }\n}\n</code></pre><p>当一个废弃接口的删除提上日程的时候，添加“forRemoval”属性让我们又有一次机会在代码编译的时候，重新审视还在使用的废弃接口了。</p><h2>废弃三部曲</h2><p>有了JDK 9的废弃改进，我们就能够看到接口废弃的一般过程了。</p><p>第一步，废弃一个接口，标明废弃的版本号，并且描述替代方案；</p><p>第二步，添加“forRemoval”属性，把删除的计划提上日程；</p><p>第三步，删除废弃的接口。</p><p>对于接口的使用者，我们应该尽量在第一步就做好代码的迁移；如果我们不能在第一步完成迁移，当看到第二步的信号时，我们也要把代码迁移的工作提高优先级，以免影响后续的版本升级。</p><p>对于接口的维护者，我们需要尽量按照这个过程退役一个接口，给接口的使用者充分的时间和信息，让他们能够完成代码的迁移。</p><h2>总结</h2><p>好，到这里，我来做个小结。刚才，我们讲了接口废弃的现实问题，以及接口废弃的三部曲。总体来说，我们要管理好废弃的接口。接口的废弃要遵守程序，有序推进；代码的迁移要做好计划，尽快完成。</p><p>另外，我们要使用好jdeprscan这个新的工具。在使用一个类库之前，要有意识地进行废弃依赖关系检查，提前做好代码风险的评估。</p><p>如果面试中聊到了接口废弃的问题，你可以聊一聊接口废弃的三部曲，以及每一步应该使用的Java注解形式。</p><h2>思考题</h2><p>今天的思考题，我们来练习一下接口废弃的过程。前面，我们练习过表示形状的封闭类。假设要废弃表示正方形的许可类，我们该怎么做呢？代码该怎么改动呢？</p><p>为了方便你阅读，我把表示形状的封闭类的代码拷贝到了下面。请再一次阅读“废弃三部曲”这一小节，然后试着修改下面的代码。</p><pre><code class=\"language-plain\">package co.ivi.jus.retire.review.xuelei;\n\npublic abstract sealed class Shape {\n    public final String id;\n\n    public Shape(String id) {\n        this.id = id;\n    }\n\n    public abstract double area();\n\n    public static final class Circle extends Shape {\n        public final double radius;\n\n        public Circle(String id, double radius) {\n            super(id);\n            this.radius = radius;\n        }\n\n        @Override\n        public double area() {\n            return Math.PI * radius * radius;\n        }\n    }\n\n    public static final class Square extends Shape {\n        public final double side;\n\n        public Square(String id, double side) {\n            super(id);\n            this.side = side;\n        }\n\n        @Override\n        public double area() {\n            return side * side;\n        }\n    }\n\n    // Here is your code for Rectangle.\n\n    // Here is the test for circle.\n    public static boolean isCircle(Shape shape) {\n        // Here goes your update.\n        return (shape instanceof Circle);\n    }\n\n    // Here is the code to run your test.\n    public static void main(String[] args) {\n        // Here is your code.\n    }\n}\n</code></pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及你的设计和代码。我们下节课见！</p><p>注：本文使用的完整的代码可以从<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/retire\">GitHub</a>下载，你可以通过修改<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/retire\">GitHub</a>上<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/retire/review/xuelei/Shape.java\">review template</a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/retire/review\">接口废弃专用的代码评审目录</a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在retire/review/xuelei的目录下面。</p>","neighbors":{"left":{"article_title":"15 | 现代密码：你用的加密算法过时了吗？","id":469994},"right":{"article_title":"17 | 模块系统：为什么Java需要模块化？","id":472516}},"comments":[{"had_liked":false,"id":327466,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1640141124,"is_pvip":false,"replies":[{"id":"119238","content":"没太了解这个逻辑","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1640201842,"ip_address":"","comment_id":327466,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14525043012","product_id":100097301,"comment_content":"大部分项目自身的Bug数远远超过废弃接口可能带来的Bug，所以很难及时清理。","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540920,"discussion_content":"没太了解这个逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640201843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540983,"discussion_content":"例如：\n1、新项目急着赶进度，大家着急赶工，没有架构、没有设计，代码一把嗦；\n2、没有代码规范，实现功能就行，各显神通；\n3、面向搜索引擎编程，很可能搜到一些过时的接口拷贝过来\n4、公司负责人一般都有自己熟悉的框架，为了稳定轻易不换，也可能继续使用好几年前甚至更久远的技术\n5、很少有单元测试、会担心升级JDK版本带来不可预计的Bug，所以很多项目还停留在JDK8\n6、项目上线了，发现各种问题：短信接口被刷了、支付回调丢了、数据查询太慢、付钱后订单状态不对、消息中间件的重试机制导致数据出错、微服务各系统之间调用超时、重复调用\n7、加班改bug\n8、新需求又来了，继续赶工\n9、软件已经被自身的问题淹没了，很难注意到是否使用了过时的接口，只要不报错，什么都好说\n\n总结：因过时接口带来的问题不会立刻暴露（程序崩溃、逻辑错误），可以选择忽略，所以大家一般会把升级的事往后放放，结果就没然后了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640226052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540920,"ip_address":""},"score":540983,"extra":""}]}]},{"had_liked":false,"id":328941,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1640946522,"is_pvip":false,"replies":[{"id":"119849","content":"唉，老大难问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1640993042,"ip_address":"","comment_id":328941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935913818","product_id":100097301,"comment_content":"更不更换废弃接口，跟工具本身关系其实不大。强行废弃不见得能推动使用方变更，反而更容易让他们不敢再更新版本，毕竟够用。<br><br>为什么这么说？因为更换废弃接口这件事，对业务毫无价值，业务一定不买单；对开发者个人成长和业绩也毫无帮助，所以单这件事开发者本身也不买单；有变更就会有风险，所以变更必须测试验证，验证有成本，所以换废弃接口即有风险也有成本。综上所述，百害而无一利的局面，不动就是最优解。<br><br>那怎么破局？首先不是所有局都该破，我们是在有限的资源下开发，只要确定不会有损失，或则损失可控，选择不变就是合理的。但是这建立在一个脆弱的前提上，就是我们能够准确识别危机（黑天鹅）。所以我觉得，为了成本不是所有局都要去破，但对于可能发散发展的危机要保持敏感和警惕。接下来就是怎么做了，如果更换废弃接口本身无利可图，那就把它跟有利可图的事打包一起来看。比如，系统优化升级必须完成涉及服务的废弃接口更换。系统优化是有利于个人成长且对晋升有帮助的事项，打包一起后就也能依托这份利益对开发者的驱动力。","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543175,"discussion_content":"唉，老大难问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640993043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359634,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1665718809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665718809","product_id":100097301,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":328081,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1640520660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640520660","product_id":100097301,"comment_content":"在Object.java里面就有例子, finalize()方法就是在JDK9被废弃了,而且forRemoval=true,具体可以看看: <br><br>https:&#47;&#47;github.com&#47;openjdk&#47;jdk&#47;blob&#47;master&#47;src&#47;java.base&#47;share&#47;classes&#47;java&#47;lang&#47;Object.java#L576<br><br>","like_count":0},{"had_liked":false,"id":327571,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1640175336,"is_pvip":false,"replies":[{"id":"119236","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1640201429,"ip_address":"","comment_id":327571,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640175336","product_id":100097301,"comment_content":"非jdk库的接口也可以使用这种废弃机制吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540918,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640201429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010664,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/e8/14c368e7.jpg","nickname":"莣忧草","note":"","ucode":"2E086B859885A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540890,"discussion_content":"自己系统的代码也可以用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640187878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}