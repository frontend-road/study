{"id":499339,"title":"05｜Auto Gen Auto：所有测试工作即代码","content":"<p>你好，我是柳胜。</p><p>我们前面用了4讲篇幅，讨论ROI模型和由此衍生出来的一套实践原则，从分层测试、选型思路和具体代码多个角度探索提升ROI的方法。</p><p>这些方法还都是基于常规的自动化测试开发流程，先有测试需求，再设计测试案例，然后做自动化。以登录测试为例，我画了一张流程图做说明。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/82/e524642fdd13d88e63de2900325f5e82.jpg?wh=1920x462\" alt=\"图片\"></p><p>自动化测试的开发成本，就是把测试需求转变成自动化测试代码这个过程花费的时间。在我们的图里，它是从左向右，所以我管它叫做<strong>水平开发成本</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/98/5fcyy4827fff8970ef6dc39aeb0ca598.jpg?wh=1920x709\" alt=\"图片\"></p><p>当登录功能测试需求发生变化时，就会重新走一遍这个流程，出现了多个版本的测试需求，也会带来多个版本的自动化测试案例。从下图可见，这个版本是自上向下增加，所以我管它叫做<strong>垂直维护成本</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/e4/ab257d846526c1e731da9812c9cd08e4.jpg?wh=1920x781\" alt=\"图片\"></p><p>我们现在可以直观地看到开发成本和维护成本了。好，问题来了，有没有办法<strong>从流程上动手术，来降低这两个成本呢</strong>？</p><p>这就是我们今天要讲的Automation Generate Automation，也叫自动化产生自动化测试代码，为了方便起见，下面的篇幅用缩写Auto Gen Auto来指代。</p><h2>Auto Gen Auto 技术</h2><p>常规的自动化测试，是指用代码实现设计好的TestCase，而Auto Gen Auto的目的是让Test Case生成也自动化，如下图所示。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/b9/b0/b9650d372e55704a31431faa8f4cb6b0.jpg?wh=1920x770\" alt=\"图片\"></p><p>因为从测试需求到自动化测试案例是完全自动化的，每次需求改变的时候，只需运行一次Auto Gen Auto即可生成新的自动化案例，垂直维护成本为零。所以Auto Gen Auto技术如果能落地，ROI就会大大提高。</p><h3>从何处下手</h3><p>那Auto Gen Auto用在哪性价比更高呢？</p><p>业界熟知的测试方法是黑盒测试和白盒测试。白盒测试从测试案例设计开始，需要我们先了解代码逻辑结果，一个函数里有几个判断分支，处理那些数据。基于这些了解，再设计案例验证函数输出和达成代码覆盖率。</p><p>在白盒测试里，Auto Gen Auto不是啥稀奇事，XUnit框架都提供了不少开发IDE的plugin，可以扫描一个class的函数，直接产生test方法。开发人员只需补充少量代码，test方法就可以运转起来了。</p><p>与之对应的是黑盒测试，测试案例设计不基于产品代码，而是用户规格说明。比如，用户在订餐系统上完成一个订单，用户该怎么操作，下单成功后应该收到物流单号等等，设计这些测试案例的目的是验证业务能够完成，不需要去看代码。</p><p>今天，我们要关注的是<strong>在黑盒测试领域的Auto Gen Auto</strong>，这个更有挑战性，也更有探索价值。因为，作为测试人员花了大量时间来设计黑盒测试案例，而且还要手工维护这些测试案例的变化，这个过程要是都能自动化了，就会省去很大的重复又枯燥的工作量。</p><h3>如何实现</h3><p>怎么做到Auto Gen Auto呢？用代码生成代码，前提是测试需求得有一定的规则或模式，然后代码才能解析规则，根据规则生成最终的测试代码。</p><p>这个实现思路，在开发中是很常用的，比如Maven Archetype使用模版自动生成项目代码，Soap使用WSDL来生成调用桩等等，原理图如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/cd/0f556ba335e4fef6286140819d804acd.jpg?wh=1920x901\" alt=\"图片\"></p><p>所以，要做Auto Gen Auto，我们的目标是先要找出测试需求里的这些规则，并把它们表达出来，放在一个规则文件里。我们看看下面的例子。</p><h2>测试等价类的规则</h2><p>远在天边，近在眼前，我们在测试案例设计中经常用到的等价类和边价值方法，就可以作为Auto Gen Auto的规则。</p><p>等价类是指某个输入域的子集合，在同一个子集合里的所有元素对于测试的效果都是等价的。</p><p>我们要测试一个订餐系统的用户名，首先要了解用户名上的约束。从长度上来看，假设用户名最大长度是255个字节，根据这个约束，至少能产生2个测试等价类：有效等价类是小于255字节的用户名，无效等价类是大于255字节的用户名。测试用户注册功能时，就可以用到这2个等价类了。</p><p>用同样的思路看用户名的另外一个约束，那就是字符类型的限制，假设用户名只能由英文字母和数字组成，根据这个约束，又可以产生多个等价类，中文字符、ASCII字符、数字、High ASCII等等。</p><p>看到没有？其实我们用等价类方法设计测试案例时，遵循的是<strong>等价类划分规则，设计出来的测试案例也与等价类一一对应</strong>。但手工做这些，工作量会很大，因为整理约束时会有遗漏，改变约束的时候，也容易忘了维护测试案例。</p><p>如果能让测试案例和等价类自动对应，然后依据规则动态产生测试案例，这些问题就会迎刃而解。不过，我们得先把这些约束规则外化表达出来，在这里，我用一个user-rule.yaml文件来表达这些规则。</p><pre><code class=\"language-yaml\">name: user name rules\n  appliedTestCase: register, login\n  rules:\n    lengthRule:\n      express: &lt;=255 chars\n    characterRule:\n      express: value&gt;=97 and value&lt;=122\n      express: value&gt;=48 and value&lt;=57\n</code></pre><p>为了让这个YAML文件能对代码友好，我把express表达式部分做了技术处理，ASCII值从97到122之间是a～z的字符，48到57是数字0～9。</p><p>然后，我们写一段代码，从这个YAML文件中直接把规则加载进来，在内存中形成一个分类树。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/9a/dd045b1924fd30754b50c7c51f90d69a.jpg?wh=6675x2935\" alt=\"\"></p><p>1个用户名，有2个约束，每种约束都取1次不同的等价类，那测试案例的组合总共有2 * 5= 10个测试案例。</p><p>如果对每一个等价类再加上权值，我们还可以根据权值，过滤掉部分权值偏小的测试案例。基于YAML可以生成以下测试案例，从案例名字，你可以看出用户名的取值规则：</p><p>TestUserNameLengthLessThan255<br>\nTestUserNameLengthBigThan255<br>\nTestUserNameAsciiValueLessThan48<br>\nTestUserNameAsciiValueBetween48And57<br>\nTestUserNameAsciiValueBetween57And97<br>\nTestUserNameAsciiValueBetween97And122<br>\nTestUserNameAsciiValueBigThan122</p><p>好，这里看到成果是很明显的。因为测试案例的生成是自动化的，所以，以后需求变化时，比如允许用户名出现中文，那就在user-rule.yaml里增加一条rule，测试案例也会自动被修改，测试案例维护工作量等于0。</p><p>到这里，我再画个图总结一下这个方案的实现思路。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/3d/19146e8321dc45e65cedd9052661cf3d.jpg?wh=1920x889\" alt=\"图片\"></p><h2>业务的逻辑规则</h2><p>用等价类的规则表达小试牛刀后，我们尝到了甜头。看来，只要能把规则表达出来，生成测试案例这个工作就可以交给代码去做。我们再找一个更加实用的场景，来看看怎么落地。</p><p>在做API测试的时候，restAPI的接口一般是通过Open API规范来描述。在设计阶段，开发先定义要实现的API接口，Client要发送什么样的Request，Server要返回什么样的Response。</p><p>比如下面的user-restapi.yaml文件，就是遵循Open API规范，定义了一个根据name查询User的RestAPI。</p><pre><code class=\"language-yaml\">/api/users:\n    get:\n      description: 通过name查询用户.\n      parameters:\n        - username\n          type: string\n          description: 用户name\n      responses:\n        '200':\n          description: 成功返回符合查询条件的用户列表.\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n</code></pre><p>这个接口很简单，但它也声明了一个简单的契约，Client要想查询User，它需要向server发送一个http get请求，发送的url格式如下：</p><p>http://{host}:{port}/api/users?username=liusheng</p><p>而server如果查询到了User，它应该返回这样一个http status code为200的response，内容如下：</p><pre><code class=\"language-yaml\">{\n        \"items\": [\n          {\n            \"ID\": \"123456\",\n            \"name\": \"liusheng\",\n            \"age\": 18\n          }\n          ]\n}\n</code></pre><p>YAML文件里定义接口所用到的关键字，像get、description、parameters等等，它们都是Open API里定义好的，含义也是明确的，那么YAML表达出来的规则内容也是可以解析出来的。因此，我们同样可以根据规则内容，直接生成测试代码。</p><p>实际上，业界已经有了现成的工具，有Spring Clond Contract，也有<a href=\"https://github.com/OpenAPITools/openapi-generator\">OpenAPI generator</a>。</p><p>我们这就借用这个工具跑一下，把它下载到本地，运行如下命令行：</p><pre><code class=\"language-yaml\">java -jar openapi-generator-cli.jar generate\n&gt;&nbsp; &nbsp;-i user-restapi.yaml \\\n&gt;&nbsp; &nbsp;-g java \\\n&gt;&nbsp; &nbsp;--library rest-assured\n</code></pre><p>运行后就会生成一个基于RestAssure的测试项目。这个自动生成的项目里包含了API测试运行所需要的Client、Config、Model、API所有代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/d6/f0bd34e107d3bd7594fbea0bcda010d6.png?wh=582x522\" alt=\"图片\"></p><p>对照上图，UserApi.java里的testGetUserByName函数，就是根据YAML文件的API定义自动生成的测试代码，可以直接运行。</p><pre><code class=\"language-java\">@ApiOperation(value = \"Get user by user name\",\n        notes = \"通过name查询用户\")\n@ApiResponses(value = { \n        @ApiResponse(code = 200, message = \"成功返回符合查询条件的用户列表\") })\npublic GetUserByNameOper testGetUserByName() {\n    return new GetUserByNameOper(createReqSpec());\n}\n</code></pre><p>是不是很酷？一份契约就这样变成了可执行的测试代码，完全不需要任何开发工作量。</p><p>在解放生产力这件事上，优秀的工程师从不满足。上面只生成了一个测试案例，能不能生成多个测试案例，做更多的测试覆盖，让这个好点子物尽其用呢？</p><p>当然可以，按照等价类规则的思路，多个测试案例来自于多个约束，那我们可以在YAML文件中，加入username更多的约束描述。在user-restAPI.yaml文件里，username加两行属性，minLength是5，maxLength是255，代表用户名最小长度是5个字符，最大长度是255个字符。</p><pre><code class=\"language-yaml\">/api/users:\n    get:\n      description: 通过name查询用户\n      parameters:\n        - username\n          type: string\n          minLength: 5\n          maxLength: 255\n          description: 用户name\n         .............\n</code></pre><p>现在，我们就可以用等价类规则转变成测试案例的思路，解析YAML文件，把testGetUserByName分裂生成多个测试方法了：</p><p>testGetUserByNameLengthLessThan5<br>\ntestGetUserByNameLengthBetween5And255<br>\ntestGetUserByNameLengthBigThan255</p><p>OpenAPI generator这个开源工具就说到这，你可以根据具体需求灵活修改它，加入对YAML文件任何属性的解析，赋予它测试上的意义，使之成为强大的Auto Gen Auto工具，为你所用。</p><p>到这里，我们回顾一下，想要做好API测试0代码，自动生成的测试案例够多，有2个隐含的前提条件要满足：</p><p>1.API设计先行。在API<strong>设计阶段</strong>就要理清接口规则并把它表达出来。</p><p>2.在API接口的规则文件里，规则描述得越详细，可自动生成的测试案例就会越多。</p><p>在实践中，我看到很多公司忽视了API设计先行原则，开发团队写完代码，再生成YAML接口文件，然后交给测试人员开发API测试代码，这把流程恰好搞颠倒了。本来应该是根据接口设计文档来开发代码，开发和测试都能依据设计并行展开工作，这个做法也会促进团队在设计阶段考虑好设计。</p><p>但是，先写代码再产生接口文档，实际就会默许甚至鼓励开发人员先信马由缰写代码，写出来什么接口都算数。从API测试角度来看，测试需求就处在一个不稳定的状态，会带<strong>来高昂的自动化测试垂直维护成本</strong>。在第二模块里，你也会看到，设计先行对于开发人员内部协作也至关重要。</p><p>另外，有了一份定义完备详细的接口设计文档，Auto Gen Auto解决方案才可能实现。它不仅能够生成API test，还可以生成performance test等等。</p><p>有兴趣你可以自己研究一下这块的工具（相关工具有兴趣你可以点<a href=\"https://github.com/sheng-geek-zhuanlan/awesome-test-automation\">这里</a>了解），OpenAPI是其中的一个，我们在后面的课程还会提到Spring Cloud Contract，也是类似的解决方案。</p><h2>小结</h2><p>今天，我们一起学习了如何通过Auto Gen Auto技术，进一步降低我们的开发、维护成本。白盒测试中实现自动生成并不稀奇，所以我们把重心放在了更有挑战的黑盒测试领域。</p><p>想要自动生成测试案例，需要我们先洞察业务场景里的规则，并把它表达出来，形成文档，在团队里达成共识，作为<strong>开发和测试的契约</strong>。</p><p>我们先从黑盒测试里最熟悉的等价类案例设计方法开始，把用户名的命名规则整理清楚，并且把它表达在一个YAML文件里，将这个规则作为我们Auto Gen Auto的输入。然后经过加载，解析，最后输出测试案例。在这个过程中，我们关注的是实现思路，没有给出具体的实现方案，有兴趣你可以自己尝试一下。</p><p>在第二个例子里，我们着重看业界经验，以OpenAPI为例，它对RestAPI接口设计不仅有设计规范，还提供了一套工具集，我们使用了它的Generator生产了一个查询user的测试案例代码，你能直观感受到它的便利。而且，像OpenAPI generator代码都是开源的，你完全可以改造它，做适合自己项目的定制化扩展。</p><p>做Auto Gen Auto这样的项目，带来的ROI是非常高的，一次性开发工作量，不需要代码维护工作量。重要的话再说一遍：<strong>任何提高ROI的努力，都是值得去尝试的。</strong></p><h2>牛刀小试</h2><p>访问<a href=\"https://github.com/OpenAPITools/openapi-generator\">https://github.com/OpenAPITools/openapi-generator</a>，按照指令，运行generator命令，在Python，JavaScript，Java，Go四种语言里选一种生成代码。</p><p>欢迎你在留言区和我交流互动，也推荐你把这讲内容推荐给身边的测试同学，一起精进技术，提升效率。</p>","neighbors":{"left":{"article_title":"04｜脚本复用：什么样的代码才值得写？","id":499382},"right":{"article_title":"06｜左移&右移：测试如何在Dev和Ops领域大展身手？","id":501526}},"comments":[{"had_liked":false,"id":340217,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":true,"comment_ctime":1648682190,"is_pvip":false,"replies":[{"id":"124444","content":"很好的实践！一直往理想迈进，才会提升！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648726874,"ip_address":"","comment_id":340217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720470933996e+18","product_id":100109201,"comment_content":"我做了5年以上自动化，思路是非常好的，但是在实际实施过程中由于很多的业务线规范并不统一，有的是mardown,有的是openapi规范，所以推动开发设计API规范也是件不容易的事情，目前我的解决方案和老师的思想差不多，我是先定义模板，针对不规划的API设计需要大家把API信息手工录入，然后我再针对模板自动生成脚本用例，回头再套用老师用的公式计算下ROI，相信产出比会很明显，因为我们的设计用例要遍历所有字段异常边界等场景，一个接口下来上百条用例都正常。","like_count":2,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559381,"discussion_content":"很好的实践！一直往理想迈进，才会提升！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648726874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340098,"user_name":"清风明月","can_delete":false,"product_type":"c1","uid":1271199,"ip_address":"","ucode":"5EF23458E5869A","user_header":"https://static001.geekbang.org/account/avatar/00/13/65/9f/217346ce.jpg","comment_is_top":false,"comment_ctime":1648602475,"is_pvip":false,"replies":[{"id":"124376","content":"这是很好的问题！这也是为什么我设置了一个模块来谈度量。我会在度量模块的第二讲里谈到单元测试的度量，这个度量思路也可以用在其他测试里。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648612871,"ip_address":"","comment_id":340098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14533504363","product_id":100109201,"comment_content":"请教一个问题：一般做自动化测试的话，是需要自己写测试覆盖率的工具，还是用开源的？有什么好的思路吗？<br>最近一直在研究测试覆盖率，之前也用过一些统计测试覆盖率的工具，感觉不是很好用，希望老师能在后期的文章里面讲解 “测试覆盖率的工具”  非常感激！","like_count":3,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559115,"discussion_content":"这是很好的问题！这也是为什么我设置了一个模块来谈度量。我会在度量模块的第二讲里谈到单元测试的度量，这个度量思路也可以用在其他测试里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648612871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341247,"user_name":"夜歌","can_delete":false,"product_type":"c1","uid":1562121,"ip_address":"","ucode":"724CF22FC99AA7","user_header":"https://static001.geekbang.org/account/avatar/00/17/d6/09/e9bfe86f.jpg","comment_is_top":false,"comment_ctime":1649474204,"is_pvip":false,"replies":[{"id":"124756","content":"欢迎分享，共同讨论！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1649518555,"ip_address":"","comment_id":341247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5944441500","product_id":100109201,"comment_content":"学了这节课受益匪浅，没想到openapi还可以这么用，真是开拓眼界了。平时老想着自己写代码，以后要多探索探索开发技术，看看能用什么了","like_count":1,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561050,"discussion_content":"欢迎分享，共同讨论！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649518555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355281,"user_name":"福建福州体检代检厦门体检代检","can_delete":false,"product_type":"c1","uid":3045076,"ip_address":"日本","ucode":"345D3112F01391","user_header":"https://static001.geekbang.org/account/avatar/00/2e/76/d4/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1661245001,"is_pvip":false,"replies":[{"id":"129759","content":"加我微信sunshinelius，我们可以在微信群里和小伙伴一起讨论！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1662304802,"ip_address":"日本","comment_id":355281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661245001","product_id":100109201,"comment_content":"老师你好，能否展开讲解， 单元测试、接口测试、功能测试 中的 Auto Gen Auto  在实际项目中的落地","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586541,"discussion_content":"加我微信sunshinelius，我们可以在微信群里和小伙伴一起讨论！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662304802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"日本"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351196,"user_name":"北冥","can_delete":false,"product_type":"c1","uid":1695973,"ip_address":"日本","ucode":"F19A3206DDE98C","user_header":"https://static001.geekbang.org/account/avatar/00/19/e0/e5/91175e2f.jpg","comment_is_top":false,"comment_ctime":1657602739,"is_pvip":false,"replies":[{"id":"128643","content":"这个问题有点模糊哈，我试着回答一下<br>在实现上，一份代码，多数据运行。<br>在流程上，setup，test，teardown的case结构<br>在结果上，要能量化造数的质量，推动优化提升<br>从第三点来看，测试数据最好要留记录，不要清掉哈。<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1659876149,"ip_address":"日本","comment_id":351196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657602739","product_id":100109201,"comment_content":"老师，如果被测接口需要 前置造数，造数有可能是通过业务接口来造也可能是通过 sql 来造数，那这些前置造数的行为 和 后置清理数据的行为 在用例里怎么设计 才能更好的 达到接口 test case 生成自动化呢","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583019,"discussion_content":"这个问题有点模糊哈，我试着回答一下\n在实现上，一份代码，多数据运行。\n在流程上，setup，test，teardown的case结构\n在结果上，要能量化造数的质量，推动优化提升\n从第三点来看，测试数据最好要留记录，不要清掉哈。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659876149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"日本"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348159,"user_name":"dakangz","can_delete":false,"product_type":"c1","uid":1220265,"ip_address":"","ucode":"7AF90957FCCE16","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/a9/ee6c8c9d.jpg","comment_is_top":false,"comment_ctime":1654787845,"is_pvip":false,"replies":[{"id":"126859","content":"咱们换一个角度来思考，公司无论大小，都要盈利挣钱，都在追求用最小的投入获得最大的产出。如果公司想要把控软件质量，单元测试是ROI最高的领域。在国内单元测试做得不好，有几个问题<br>1.  开发认为测试是QA的工作 ----这是意识的问题<br>2.  单元测试还是以代码覆盖率作为指标，而QA测试业界共识是降低Bug泄漏率为指标。相比之下，单元测试悬浮在空气中，它的实际效果并没有发挥出来。----这是度量方法论的问题，在第二模块和第四模块都会讲到<br>我曾在大公司和创业公司都工作过，我觉得小创业公司做单元测试更有优势，一个有责任心的技术大牛就可以带动起来，而且效果非常好。😄<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1654828177,"ip_address":"","comment_id":348159,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1654787845","product_id":100109201,"comment_content":"大多数小公司都很难落地这么成熟的方案，假如开发都没有单元测试的习惯，这些斗工作太难展开了","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575428,"discussion_content":"咱们换一个角度来思考，公司无论大小，都要盈利挣钱，都在追求用最小的投入获得最大的产出。如果公司想要把控软件质量，单元测试是ROI最高的领域。在国内单元测试做得不好，有几个问题\n1.  开发认为测试是QA的工作 ----这是意识的问题\n2.  单元测试还是以代码覆盖率作为指标，而QA测试业界共识是降低Bug泄漏率为指标。相比之下，单元测试悬浮在空气中，它的实际效果并没有发挥出来。----这是度量方法论的问题，在第二模块和第四模块都会讲到\n我曾在大公司和创业公司都工作过，我觉得小创业公司做单元测试更有优势，一个有责任心的技术大牛就可以带动起来，而且效果非常好。😄\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654828177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340931,"user_name":"lisa","can_delete":false,"product_type":"c1","uid":1508049,"ip_address":"","ucode":"62CB6333CBF7B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLw3jpao45frZibQIAicWBfc7ofgrm5gJLiaFQSj5u2DDvkjy3ia5goicJLJlgVtZ0HryiaXb2VqpTSQT5Q/132","comment_is_top":false,"comment_ctime":1649233336,"is_pvip":false,"replies":[{"id":"124656","content":"很好的分享！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1649253167,"ip_address":"","comment_id":340931,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649233336","product_id":100109201,"comment_content":"这块我理解从业务落地的角度来说还不是很成熟，一方面API规范落地成本比较大，可能需要测试团队将测试契约补充完整。其次从投入产出比上，这里可以发一些一些边界的问题，但是后期的维护成本会比较大，不太确定投入产出比怎么样。从自动生成API自动化测试框架代码的角度我觉得可以从垂类业务（根据业务的API类型或者rpc框架）的角度会有收获。<br>整体来说，我非常赞同这个思路：所有的测试工作即代码。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560292,"discussion_content":"很好的分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649253168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340219,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1648683815,"is_pvip":false,"replies":[{"id":"124660","content":"可以考虑修改OpenAPI代码，创建自己的specification！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1649253722,"ip_address":"","comment_id":340219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648683815","product_id":100109201,"comment_content":"试了下生成go的代码中，没有看到有体现字段的长度定义及边界等信息","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560298,"discussion_content":"可以考虑修改OpenAPI代码，创建自己的specification！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649253723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340218,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1648682378,"is_pvip":false,"replies":[{"id":"124445","content":"自己解析API规范，无论idea还是practice都已经在成功的路上了！👍","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648727080,"ip_address":"","comment_id":340218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648682378","product_id":100109201,"comment_content":"目前我这边是自己手工写代码去解析的，需要引用需要递归解析，这个库回头也试下看行不，谢谢老师","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559382,"discussion_content":"自己解析API规范，无论idea还是practice都已经在成功的路上了！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648727080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340141,"user_name":"woJA1wCgAA3aj6p1ELWENTCq8KX2zC2w","can_delete":false,"product_type":"c1","uid":2911626,"ip_address":"","ucode":"558FF6A6A2714B","user_header":"","comment_is_top":false,"comment_ctime":1648625165,"is_pvip":false,"replies":[{"id":"124379","content":"收到催更，下一讲周五见～我们每周一三五更新哦！","user_name":"编辑回复","user_name_real":"编辑","uid":"1501385","ctime":1648625541,"ip_address":"","comment_id":340141,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1648625165","product_id":100109201,"comment_content":"意犹未尽，老师快更新","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559145,"discussion_content":"收到催更，下一讲周五见～我们每周一三五更新哦！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648625541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]}]}