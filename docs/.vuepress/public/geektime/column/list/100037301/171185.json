{"id":171185,"title":"19 | 总结（一）：微服务设计和拆分要坚持哪些原则？","content":"<p>你好，我是欧创新。</p><p>我们前面已经讲了很多DDD的设计方法和实践案例。虽然DDD的设计思想和方法很好，但由于企业发展历程以及企业技术和文化的不同，DDD和微服务的实施策略也会有差异。那么<span class=\"orange\">面对这种差异，我们应该如何落地DDD和微服务呢？</span>今天我们就来聊聊微服务的设计原则和演进策略。</p><h2>微服务的演进策略</h2><p>在从单体向微服务演进时，演进策略大体分为两种：绞杀者策略和修缮者策略。</p><h3>1. 绞杀者策略</h3><p>绞杀者策略是一种逐步剥离业务能力，用微服务逐步替代原有单体系统的策略。它对单体系统进行领域建模，根据领域边界，在单体系统之外，将新功能和部分业务能力独立出来，建设独立的微服务。新微服务与单体系统保持松耦合关系。</p><p>随着时间的推移，大部分单体系统的功能将被独立为微服务，这样就慢慢绞杀掉了原来的单体系统。<span class=\"orange\">绞杀者策略类似建筑拆迁，完成部分新建筑物后，然后拆除部分旧建筑物。</span></p><h3>2. 修缮者策略</h3><p>修缮者策略是一种维持原有系统整体能力不变，逐步优化系统整体能力的策略。它是在现有系统的基础上，剥离影响整体业务的部分功能，独立为微服务，比如高性能要求的功能，代码质量不高或者版本发布频率不一致的功能等。</p><p>通过这些功能的剥离，我们就可以兼顾整体和局部，解决系统整体不协调的问题。<span class=\"orange\">修缮者策略类似古建筑修复，将存在问题的部分功能重建或者修复后，重新加入到原有的建筑中，保持建筑原貌和功能不变。</span>一般人从外表感觉不到这个变化，但是建筑物质量却得到了很大的提升。</p><!-- [[[read_end]]] --><p>其实还有第三种策略，就是另起炉灶，顾名思义就是将原有的系统推倒重做。建设期间，原有单体系统照常运行，一般会停止开发新需求。而新系统则会组织新的项目团队，按照原有系统的功能域，重新做领域建模，开发新的微服务。在完成数据迁移后，进行新旧系统切换。</p><p>对于大型核心系统我一般不建议采用这种策略，这是因为系统重构后的不稳定性、大量未知的潜在技术风险和新的开发模式下项目团队磨合等不确定性因素，会导致项目实施难度大大增加。</p><h2>不同场景下的领域建模策略</h2><p>由于企业内情况千差万别，发展历程也不一样，有遗留单体系统的微服务改造，也有全新未知领域的业务建模和系统设计，还有遗留系统局部优化的情况。不同场景下，领域建模的策略也会有差异。下面我们就分几类场景来看看如何进行领域建模。</p><h3>1. 新建系统</h3><p>新建系统又分为简单和复杂领域建模两种场景。</p><p><strong>简单领域建模</strong></p><p>简单的业务领域，一个领域就是一个小的子域。在这个小的问题域内，领域建模过程相对简单，直接采用事件风暴的方法构建领域模型就可以了。</p><p><strong>复杂领域建模</strong></p><p>对于复杂的业务领域，领域可能需要多级拆分后才能开始领域建模。领域拆分为子域，甚至子域还需要进一步拆分。比如：保险它需要拆分为承保、理赔、收付费和再保等子域，承保子域再拆分为投保、保单管理等子子域。复杂领域如果不做进一步细分，由于问题域太大，领域建模的工程量会非常浩大。你不太容易通过事件风暴，完成一个很大的领域建模，即使勉强完成，效果也不一定好。</p><p><strong>对于复杂领域，我们可以分三步来完成领域建模和微服务设计。</strong></p><p>第一步，拆分子域建立领域模型</p><p>根据业务领域的特点，参考流程节点边界或功能聚合模块等边界因素。结合领域专家和项目团队的讨论，将领域逐级分解为大小合适的子域，针对子域采用事件风暴，划分聚合和限界上下文，初步确定子域内的领域模型。</p><p>第二步，领域模型微调</p><p>梳理领域内所有子域的领域模型，对各子域领域模型进行微调。微调的过程重点考虑不同领域模型中聚合的重组。同步考虑领域模型和聚合的边界，服务以及事件之间的依赖关系，确定最终的领域模型。</p><p>第三步，微服务的设计和拆分</p><p>根据领域模型和微服务拆分原则，完成微服务的拆分和设计。</p><h3>2. 单体遗留系统</h3><p>如果我们面对的是一个单体遗留系统，只需要将部分功能独立为微服务，而其余仍为单体，整体保持不变，比如将面临性能瓶颈的模块拆分为微服务。我们只需要将这一特定功能，理解为一个简单子领域，参考简单领域建模的方式就可以了。在微服务设计中，我们还要考虑新老系统之间服务和业务的兼容，必要时可引入防腐层。</p><h2>DDD使用的误区</h2><p>很多人在接触微服务后，但凡是系统，一概都想设计成微服务架构。其实有些业务场景，单体架构的开发成本会更低，开发效率更高，采用单体架构也不失为好的选择。同样，虽然DDD很好，但有些传统设计方法在微服务设计时依然有它的用武之地。下面我们就来聊聊DDD使用的几个误区。</p><h3>1. 所有的领域都用DDD</h3><p>很多人在学会DDD后，可能会将其用在所有业务域，即全部使用DDD来设计。DDD从战略设计到战术设计，是一个相对复杂的过程，首先企业内要培养DDD的文化，其次对团队成员的设计和技术能力要求相对比较高。在资源有限的情况下，应聚焦核心域，建议你先从富领域模型的核心域开始，而不必一下就在全业务域推开。</p><h3>2. 全部采用DDD战术设计方法</h3><p>不同的设计方法有它的适用环境，我们应选择它最擅长的场景。DDD有很多的概念和战术设计方法，比如聚合根和值对象等。聚合根利用仓储管理聚合内实体数据之间的一致性，这种方法对于管理新建和修改数据非常有效，比如在修改订单数据时，它可以保证订单总金额与所有商品明细金额的一致，但它并不擅长较大数据量的查询处理，甚至有延迟加载进而影响效率的问题。</p><p>而传统的设计方法，可能一条简单的SQL语句就可以很快地解决问题。而很多贫领域模型的业务，比如数据统计和分析，DDD很多方法可能都用不上，或用得并不顺手，而传统的方法很容易就解决了。</p><p>因此，在遵守领域边界和微服务分层等大原则下，在进行战术层面设计时，我们应该选择最适合的方法，不只是DDD设计方法，当然还应该包括传统的设计方法。这里要以快速、高效解决实际问题为最佳，不要为做DDD而做DDD。</p><h3>3. 重战术设计而轻战略设计</h3><p>很多DDD初学者，学习DDD的主要目的，可能是为了开发微服务，因此更看重DDD的战术设计实现。殊不知DDD是一种从领域建模到微服务落地的全方位的解决方案。</p><p>战略设计时构建的领域模型，是微服务设计和开发的输入，它确定了微服务的边界、聚合、代码对象以及服务等关键领域对象。领域模型边界划分得清不清晰，领域对象定义得明不明确，会决定微服务的设计和开发质量。没有领域模型的输入，基于DDD的微服务的设计和开发将无从谈起。因此我们不仅要重视战术设计，更要重视战略设计。</p><h3>4. DDD只适用于微服务</h3><p>DDD是在微服务出现后才真正火爆起来的，很多人会认为DDD只适用于微服务。在DDD沉默的二十多年里，其实它一直也被应用在单体应用的设计中。</p><p>具体项目实施时，要吸取DDD的核心设计思想和理念，结合具体的业务场景和团队技术特点，多种方法组合，灵活运用，用正确的方式解决实际问题。</p><h2>微服务设计原则</h2><p>微服务设计原则中，如高内聚低耦合、复用、单一职责等这些常见的设计原则在此就不赘述了，我主要强调下面这几条：</p><p><strong>第一条：要领域驱动设计，而不是数据驱动设计，也不是界面驱动设计。</strong></p><p>微服务设计首先应建立领域模型，确定逻辑和物理边界以及领域对象后，然后才开始微服务的拆分和设计。而不是先定义数据模型和库表结构，也不是前端界面需要什么，就去调整核心领域逻辑代码。在设计时应该将外部需求从外到内逐级消化，尽量降低对核心领域层逻辑的影响。</p><p><strong>第二条：要边界清晰的微服务，而不是泥球小单体。</strong></p><p>微服务上线后其功能和代码也不是一成不变的。随着需求或设计变化，领域模型会迭代，微服务的代码也会分分合合。边界清晰的微服务，可快速实现微服务代码的重组。微服务内聚合之间的领域服务和数据库实体原则上应杜绝相互依赖。你可通过应用服务编排或者事件驱动，实现聚合之间的解耦，以便微服务的架构演进。</p><p><strong>第三条：要职能清晰的分层，而不是什么都放的大箩筐。</strong></p><p>分层架构中各层职能定位清晰，且都只能与其下方的层发生依赖，也就是说只能从外层调用内层服务，内层通过封装、组合或编排对外逐层暴露，服务粒度也由细到粗。应用层负责服务的组合和编排，不应有太多的核心业务逻辑，领域层负责核心领域业务逻辑的实现。各层应各司其职，职责边界不要混乱。在服务演进时，应尽量将可复用的能力向下层沉淀。</p><p><strong>第四条：要做自己能hold住的微服务，而不是过度拆分的微服务。</strong></p><p>微服务过度拆分必然会带来软件维护成本的上升，比如：集成成本、运维成本、监控和定位问题的成本。企业在微服务转型过程中还需要有云计算、DevOps、自动化监控等能力，而一般企业很难在短时间内提升这些能力，如果项目团队没有这些能力，将很难hold住这些微服务。</p><p>如果在微服务设计之初按照DDD的战略设计方法，定义好了微服务内的逻辑边界，做好了架构的分层，其实我们不必拆分太多的微服务，即使是单体也未尝不可。随着技术积累和能力提升，当我们有了这些能力后，由于应用内有清晰的逻辑边界，我们可以随时轻松地重组出新的微服务，而这个过程不会花费太多的时间和精力。</p><h2>微服务拆分需要考虑哪些因素？</h2><p>理论上一个限界上下文内的领域模型可以被设计为微服务，但是由于领域建模主要从业务视角出发，没有考虑非业务因素，比如需求变更频率、高性能、安全、团队以及技术异构等因素，而这些非业务因素对于领域模型的系统落地也会起到决定性作用，因此在微服务拆分时我们需要重点考虑它们。我列出了以下主要因素供你参考。</p><p><strong>1. 基于领域模型</strong></p><p>基于领域模型进行拆分，围绕业务领域按职责单一性、功能完整性拆分。</p><p><strong>2. 基于业务需求变化频率</strong></p><p>识别领域模型中的业务需求变动频繁的功能，考虑业务变更频率与相关度，将业务需求变动较高和功能相对稳定的业务进行分离。这是因为需求的经常性变动必然会导致代码的频繁修改和版本发布，这种分离可以有效降低频繁变动的敏态业务对稳态业务的影响。</p><p><strong>3. 基于应用性能</strong></p><p>识别领域模型中性能压力较大的功能。因为性能要求高的功能可能会拖累其它功能，在资源要求上也会有区别，为了避免对整体性能和资源的影响，我们可以把在性能方面有较高要求的功能拆分出去。</p><p><strong>4. 基于组织架构和团队规模</strong></p><p>除非有意识地优化组织架构，否则微服务的拆分应尽量避免带来团队和组织架构的调整，避免由于功能的重新划分，而增加大量且不必要的团队之间的沟通成本。拆分后的微服务项目团队规模保持在10～12人左右为宜。</p><p><strong>5. 基于安全边界</strong></p><p>有特殊安全要求的功能，应从领域模型中拆分独立，避免相互影响。</p><p><strong>6. 基于技术异构等因素</strong></p><p>领域模型中有些功能虽然在同一个业务域内，但在技术实现时可能会存在较大的差异，也就是说领域模型内部不同的功能存在技术异构的问题。由于业务场景或者技术条件的限制，有的可能用.NET，有的则是Java，有的甚至大数据架构。对于这些存在技术异构的功能，可以考虑按照技术边界进行拆分。</p><h2>总结</h2><p>相信你在微服务落地的时候会有很多的收获和感悟。对于DDD和微服务，我想总结的就是：深刻理解DDD的设计思想和内涵，把握好边界和分层这个大原则，结合企业文化和技术特点，灵活运用战术设计方法，选择最适合的技术和方法解决实际问题，切勿为了DDD而做DDD！</p><h2>思考题</h2><p>谈谈你在用DDD实践过程中踩过什么样的坑？有什么好的建议可以分享给大家？期待你的留言！</p><p></p>","neighbors":{"left":{"article_title":"18 | 知识点串讲：基于DDD的微服务设计实例","id":169881},"right":{"article_title":"20 | 总结（二）：分布式架构关键设计10问","id":172300}},"comments":[{"had_liked":false,"id":156384,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1574864676,"is_pvip":true,"replies":[{"id":"60122","content":"把DDD当成工具和方法，不要让它束缚了思想。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1574925731,"ip_address":"","comment_id":156384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"108949047076","product_id":100037301,"comment_content":"老师这篇是看的最慢的一篇，一边看，一边思考现在团队负责的业务以及服务，有很多很多值得警惕和借鉴以及深思的地方！<br>前面在看微服务实例讲解的时候一度陷入战术模型中出不来，想着现在团队微服务的结构以及实现方式像，也不像ddd。一直也知道战略比战术更重要，直到看到今天的文章，才恍然，从ddd学到的更多是他的分析过程的方法论，设计思想，至于实际落地，要结合各种因素来权衡利弊做更合适现状的架构设计方案和具体实现方式。<br><br>注重道而不是术！","like_count":26,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476090,"discussion_content":"把DDD当成工具和方法，不要让它束缚了思想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574925731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175707,"user_name":"silentyears","can_delete":false,"product_type":"c1","uid":1061748,"ip_address":"","ucode":"6E137BFEB874CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","comment_is_top":false,"comment_ctime":1580803718,"is_pvip":true,"replies":[{"id":"69001","content":"DDD主要采用面向对象的设计方式，不同于三层架构的贫血模型，实体只有get和set方法，所有的业务逻辑都放在业务逻辑层，耦合度比较高。采用充血模型后，会让领域模型更接近实际场景，也会让四层架构中各个实体行为，领域服务等职责更加清晰，便于进行服务和方法的组合和解耦。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1581495491,"ip_address":"","comment_id":175707,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35940542086","product_id":100037301,"comment_content":"请问老师，DDD，必须采用充血模型吗？","like_count":9,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482863,"discussion_content":"DDD主要采用面向对象的设计方式，不同于三层架构的贫血模型，实体只有get和set方法，所有的业务逻辑都放在业务逻辑层，耦合度比较高。采用充血模型后，会让领域模型更接近实际场景，也会让四层架构中各个实体行为，领域服务等职责更加清晰，便于进行服务和方法的组合和解耦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581495491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2019610,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/d1/1a/f62cfa54.jpg","nickname":"天空之城","note":"","ucode":"3750768D195C1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366083,"discussion_content":"三层架构是失血模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617956412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271953,"user_name":"Peter Yu","can_delete":false,"product_type":"c1","uid":1077598,"ip_address":"","ucode":"D56786A6E85321","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/5e/5393a76d.jpg","comment_is_top":false,"comment_ctime":1609894342,"is_pvip":true,"replies":[{"id":"98682","content":"个人建议采用在B服务中建立一个新类的方法。<br>采用依赖包的方式会混淆限界上下文边界，A微服务中很多内容可能会不自觉的渗透到B微服务内，而且像你说的那样，两者之间会产生高耦合。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1609983706,"ip_address":"","comment_id":271953,"utype":1}],"discussion_count":5,"race_medal":4,"score":"31674665414","product_id":100037301,"comment_content":"老师，我有个疑惑：比如有个服务AB被拆分为服务A和服务B，在拆分之前有个service调用: Adto fetchAbyId(Long id),拆分后这个方法提供了远程调用，B服务调用这个远程方法时需要一个对象来接收结果，问题：是在B服务里面建一个类似Adto的类用于包装结果，还是引用A服务的一个common包依赖进来（里面有Adto的定义）。个人感觉如果用引入依赖的方式，会暴露较多信息，耦合度也高了；但是重新在B服务里面建一个新类，微服务拆分时工作量会比较高（A和B之间调用比较多的情况）。感觉都挺头疼的…望老师指教","like_count":8,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513100,"discussion_content":"个人建议采用在B服务中建立一个新类的方法。\n采用依赖包的方式会混淆限界上下文边界，A微服务中很多内容可能会不自觉的渗透到B微服务内，而且像你说的那样，两者之间会产生高耦合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609983706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1577345,"avatar":"https://static001.geekbang.org/account/avatar/00/18/11/81/9ac41bd7.jpg","nickname":"雅君","note":"","ucode":"C186708690CBBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573137,"discussion_content":"如果能仅把A中的模型单独提取出来构建依赖包，不提供任何调用方需要感知的细节的话，应该没问题，类似于sdk","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653215830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/3f/49e5079f.jpg","nickname":"楞伽山人","note":"","ucode":"5859C06DAC790D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543720,"discussion_content":"也确实这两种方式都比较难受，会产生比较严重的耦合是实事 混淆上下文也是实事 如果不通过jar的方式 也存在比较多的重复代码 这种情况有没有更好办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641281648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077598,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/5e/5393a76d.jpg","nickname":"Peter Yu","note":"","ucode":"D56786A6E85321","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340636,"discussion_content":"嗯嗯。谢谢老师指点！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610084278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111434,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/8a/e0fa8730.jpg","nickname":"学渣要每日进步","note":"","ucode":"0EB5CB54F2E890","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1077598,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/5e/5393a76d.jpg","nickname":"Peter Yu","note":"","ucode":"D56786A6E85321","race_medal":4,"user_type":1,"is_pvip":true},"discussion":{"id":580984,"discussion_content":"两种方式都用，接口全部独立jar包，避免依赖代码臃肿，也避免暴露服务内部代码。\n新建服务内DTO起到隔离防腐的作用，特别是在对方地方都依赖此接口的情况，也方便开发和单元测试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658449788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340636,"ip_address":""},"score":580984,"extra":""}]}]},{"had_liked":false,"id":270010,"user_name":"悠闲喵","can_delete":false,"product_type":"c1","uid":2378516,"ip_address":"","ucode":"47E475DF7E916B","user_header":"https://static001.geekbang.org/account/avatar/00/24/4b/14/469a4e63.jpg","comment_is_top":false,"comment_ctime":1608876366,"is_pvip":true,"replies":[{"id":"98211","content":"不清楚您这个消息发送平台数据和业务量大不大。我来分析一下，看看是否正确？<br>从业务边界来考虑，另外，再考虑尽量减少微服务之间的数据传输和交互，我感觉任务接收和任务拆分，属于任务管理的限界上下文，而且数据关联度相对较高，它们可以放在一个微服务内，这样可以减少微服务之间的数据交互。而消息发送以及消息跟踪，属于消息管理限界上下文，它们可以放在一个微服务内。<br>我们可以做好这四个不同聚合的边界，然后拆分为任务管理和消息管理两个微服务。如无必要，尽量不要过度拆分。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1609232046,"ip_address":"","comment_id":270010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18788745550","product_id":100037301,"comment_content":"欧老师你好，我们有个消息发送平台，主要是发短信、邮件、站内信功能；目前想拆分为 任务接收、任务拆分、消息发送、消息跟踪等几个微服务。请问是否存在过度拆分的问题？","like_count":5,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512488,"discussion_content":"不清楚您这个消息发送平台数据和业务量大不大。我来分析一下，看看是否正确？\n从业务边界来考虑，另外，再考虑尽量减少微服务之间的数据传输和交互，我感觉任务接收和任务拆分，属于任务管理的限界上下文，而且数据关联度相对较高，它们可以放在一个微服务内，这样可以减少微服务之间的数据交互。而消息发送以及消息跟踪，属于消息管理限界上下文，它们可以放在一个微服务内。\n我们可以做好这四个不同聚合的边界，然后拆分为任务管理和消息管理两个微服务。如无必要，尽量不要过度拆分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609232046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189478,"user_name":"狮锅艺","can_delete":false,"product_type":"c1","uid":1187577,"ip_address":"","ucode":"1B4AD130F9D0CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/f9/bfb54326.jpg","comment_is_top":false,"comment_ctime":1584520563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18764389747","product_id":100037301,"comment_content":"实践的过程中，要时常来回顾一下这些原则。","like_count":5},{"had_liked":false,"id":182850,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1582875992,"is_pvip":false,"replies":[{"id":"70721","content":"是的。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1582886093,"ip_address":"","comment_id":182850,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14467777880","product_id":100037301,"comment_content":"感觉ddd和devops这些系统化概念都应该结合企业自身实际情况进行逐步的落地，一是不能盲目跟风，二是不能贪图一时之快，还是要因地制宜","like_count":3,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485473,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582886093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156156,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574825899,"is_pvip":false,"replies":[{"id":"60005","content":"很多的感悟，^_^。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1574844822,"ip_address":"","comment_id":156156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14459727787","product_id":100037301,"comment_content":"感谢老师的分享。限于篇幅啊，意犹未尽的感觉。","like_count":3,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476011,"discussion_content":"很多的感悟，^_^。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574844822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158998,"user_name":"vivi","can_delete":false,"product_type":"c1","uid":1357983,"ip_address":"","ucode":"360A81D2003C99","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/9f/c64f0896.jpg","comment_is_top":false,"comment_ctime":1575512412,"is_pvip":false,"replies":[{"id":"60829","content":"以后多交流。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575523060,"ip_address":"","comment_id":158998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10165447004","product_id":100037301,"comment_content":"刚开课就跟着学习，课程结束了把新项目用DDD实践了下，收获满满。非常感谢作者～","like_count":2,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476906,"discussion_content":"以后多交流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575523060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156965,"user_name":"y3","can_delete":false,"product_type":"c1","uid":1128084,"ip_address":"","ucode":"C93F8EC2AAACF6","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/94/5aecb0ef.jpg","comment_is_top":false,"comment_ctime":1575003605,"is_pvip":false,"replies":[{"id":"60352","content":"防腐层是为了屏蔽系统之间的相互影响，保证领域模型的纯洁性，在微服务增加一些代码进行业务适配，比如新老系统的协议转换等。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575165666,"ip_address":"","comment_id":156965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10164938197","product_id":100037301,"comment_content":"考虑新老系统之间服务和业务的兼容，必要时可引入防腐层。请问老师，这里的防腐层指的是什么？","like_count":2,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476287,"discussion_content":"防腐层是为了屏蔽系统之间的相互影响，保证领域模型的纯洁性，在微服务增加一些代码进行业务适配，比如新老系统的协议转换等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575165666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277850,"user_name":"by","can_delete":false,"product_type":"c1","uid":1242524,"ip_address":"","ucode":"B35FB69EB23E3A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/9c/8c14d4bd.jpg","comment_is_top":false,"comment_ctime":1612620840,"is_pvip":false,"replies":[{"id":"101031","content":"1、DDD在实际战术落地的时候其实没有具体的规范，你可以根据团队的习惯来定义这些名称，只要大原则不出问题即可。<br>2、因为在DDD分层架构中有两种类型的服务：应用服务和领域服务，加domain是为了有所区分。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1612851509,"ip_address":"","comment_id":277850,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5907588136","product_id":100037301,"comment_content":"老师 我有一个疑问 最近项目也在做DDD的重构。看了老师的Demo,有一些不理解的地方。<br>1.LeaveRepositoryInterface 这样的命名方式是DDD的规范吗，确实很少看到这样的命名方式，是不是这样更好 lleaveService。<br>2.LeaveDomainService为什么要加一个Domain。","like_count":1,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515191,"discussion_content":"1、DDD在实际战术落地的时候其实没有具体的规范，你可以根据团队的习惯来定义这些名称，只要大原则不出问题即可。\n2、因为在DDD分层架构中有两种类型的服务：应用服务和领域服务，加domain是为了有所区分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612851509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156306,"user_name":"北天魔狼","can_delete":false,"product_type":"c1","uid":1188144,"ip_address":"","ucode":"C22623ECEB8DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","comment_is_top":false,"comment_ctime":1574853396,"is_pvip":true,"replies":[{"id":"60131","content":"谢谢你的陪伴。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1574932423,"ip_address":"","comment_id":156306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869820692","product_id":100037301,"comment_content":"感谢老师！依赖倒置，代码复用，这俩是最浅显的好处。按照严格模式分层，天然支持微服务，支持多开发语言。🙏🙏🙏","like_count":1,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476062,"discussion_content":"谢谢你的陪伴。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574932423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342548,"user_name":"Steven","can_delete":false,"product_type":"c1","uid":1253652,"ip_address":"","ucode":"3FE64459842015","user_header":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","comment_is_top":false,"comment_ctime":1650335807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650335807","product_id":100037301,"comment_content":"不知道老师是否还关注这里，有问题不太明白：<br><br>“拆分后的微服务项目团队规模保持在 10～12 人左右为宜。”，这个是不是有点多啊？<br>虽然说是“两个披萨”原则，但看国外一般是说不超过10个人，还有说不超过9个的。<br>microservices.io，说是5-9个人。<br>国内还有一种说法“三个火枪手”。<br><br>其它同学对此怎么看？","like_count":0},{"had_liked":false,"id":327559,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1640167879,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640167879","product_id":100037301,"comment_content":"充血模型，是在解除老师的专栏之后才了解到的。目前我们开发用的mvc三层架构，基本都是贫血模型，业务处理都在service层。对于DDD. 充血模型更适合，在实体中，值对象中完成一定的业务处理，就在这个实体里面闭环掉了，就更像是实际的生产情况。这里比以前的面向对象编程更面向对象。","like_count":0},{"had_liked":false,"id":318623,"user_name":"trier","can_delete":false,"product_type":"c1","uid":1285659,"ip_address":"","ucode":"498137BC5667AD","user_header":"https://static001.geekbang.org/account/avatar/00/13/9e/1b/9cb138f0.jpg","comment_is_top":false,"comment_ctime":1635354112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635354112","product_id":100037301,"comment_content":"过了很久又回来看这个专栏，这次是带着问题来的，不知道老师还有没有空回来解答。<br>我们在落地时，会发现在应用层会很多不同领域间实体的转换，而且导致代码看起来很繁琐，不知道这些问题该如何解决。是不是应该在应用层再定义一层防腐层去处理领域间实体的转换？ 如果是，目录结构如何比较好？","like_count":0},{"had_liked":false,"id":314731,"user_name":"paulmin","can_delete":false,"product_type":"c1","uid":1707838,"ip_address":"","ucode":"6AAB20AB369E90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AcJM5WNhE062TQAsIE8KTxTsZMTHJHCm4LCfsjBPibZ6iaGRamfZqIRFcLXLVfAQobeCIgA9o5wiaRCKa0dNbic1iag/132","comment_is_top":false,"comment_ctime":1633360469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633360469","product_id":100037301,"comment_content":"拆分后的微服务项目团队规模保持在 10～12 人左右为宜。 -- 这个是特指后端研发的人员规模吗？<br>但若是建设企业大中台，按商业能力中心来划分模型和落地微服务，这个人数是偏少了。","like_count":0},{"had_liked":false,"id":285810,"user_name":"百威","can_delete":false,"product_type":"c1","uid":1074843,"ip_address":"","ucode":"758199FDD0B44F","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/9b/59776420.jpg","comment_is_top":false,"comment_ctime":1617017987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617017987","product_id":100037301,"comment_content":"我理解ddd的战略设计应该更加也是更优先被推广出来吧，战术的实现可以多种，但战略上的领域设计应该是明确不变的","like_count":0},{"had_liked":false,"id":279601,"user_name":"厚德载物","can_delete":false,"product_type":"c1","uid":1704910,"ip_address":"","ucode":"C4F1D73E6E7DD8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/03/ce/90781e79.jpg","comment_is_top":false,"comment_ctime":1613846378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613846378","product_id":100037301,"comment_content":"太美了，我有信心了，我在没看视频前就是计划用绞杀模式，修缮无法根治，炉罩压力太大，赞赞赞","like_count":0},{"had_liked":false,"id":261344,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1605278093,"is_pvip":false,"replies":[{"id":"95270","content":"你们这些回复是不是要在很多问题上要复用？这些判断条件是不是一些规则，也需要复用？<br>如果是，问题可以是一个聚合，它会引用回复ID以及名称等信息，形成一对多的引用关系。判断规则可以作为配置信息独立为一个聚合，主要提供规则查询服务，根据规则找出回复记录。<br>由于不太清楚更具体的场景，不知道分析的对不对。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1605764457,"ip_address":"","comment_id":261344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605278093","product_id":100037301,"comment_content":"老师，我们在做语音助手。其中有个服务是做对话，也就是一句query的回答。 然后对于一句话，我们其实会配置多个回复，每个回复上我们会有些判断条件，然后这些判断条件会去读取对象存储上的文件，用来判断条件是否满足。满足就进行回复。我想问下这个服务应该怎么设计会比较好","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509454,"discussion_content":"你们这些回复是不是要在很多问题上要复用？这些判断条件是不是一些规则，也需要复用？\n如果是，问题可以是一个聚合，它会引用回复ID以及名称等信息，形成一对多的引用关系。判断规则可以作为配置信息独立为一个聚合，主要提供规则查询服务，根据规则找出回复记录。\n由于不太清楚更具体的场景，不知道分析的对不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605764457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260448,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1605009581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605009581","product_id":100037301,"comment_content":"深刻理解 DDD 的设计思想和内涵，把握好边界和分层这个大原则，结合企业文化和技术特点，灵活运用战术设计方法，选择最适合的技术和方法解决实际问题，切勿为了 DDD 而做 DDD！","like_count":0},{"had_liked":false,"id":260446,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1605009335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605009335","product_id":100037301,"comment_content":"具体项目实施时，要吸取 DDD 的核心设计思想和理念，结合具体的业务场景和团队技术特点，多种方法组合，灵活运用，用正确的方式解决实际问题。","like_count":0},{"had_liked":false,"id":221837,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1590611531,"is_pvip":true,"replies":[{"id":"81790","content":"整理的不错哈。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1590629282,"ip_address":"","comment_id":221837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590611531","product_id":100037301,"comment_content":"收获很大<br>1.模型重构或系统重构的几种思路：<br>a.在原先应用改<br>b.老应用不接新需求新起一个应用<br>c.新起一个应用新业务渐渐往新应用迁，老应用还在<br><br>2.DDD设计时的原则<br>a.边界清晰，哪个域做哪个事情<br>b.以模型驱动设计，而不是以数据库结构或界面设计去影响核心领域<br>c.分层要清晰，采用严格分层，减少后面某层改变对于上层的影响面<br>d.不要过渡拆分，过滤拆一个是维护成本，机器资源等。<br><br>3.整体DDD落地微服务，除了战略设计中产生的领域模型及限界上下文，还是要考虑当前的技术情况：如运维条件，将需求多变业务与稳态业务分离，核心业务与非核心分离，安全，性能等情况","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496587,"discussion_content":"整理的不错哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590629282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209982,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1399663,"ip_address":"","ucode":"CC7B15CE63264B","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/6f/113e24e6.jpg","comment_is_top":false,"comment_ctime":1587646103,"is_pvip":false,"replies":[{"id":"78285","content":"如有问题继续沟通哈","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1587648689,"ip_address":"","comment_id":209982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587646103","product_id":100037301,"comment_content":"感谢欧老师的经验分享。<br><br>现在在做已有单体系统拆分，借助DDD的思想在做领域建模。<br>要做自己能hold住的微服务，这条原则对我接下来的微服务切分有很大的指导价值，再次感谢<br>","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492904,"discussion_content":"如有问题继续沟通哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587648689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201761,"user_name":"秦伟","can_delete":false,"product_type":"c1","uid":1931692,"ip_address":"","ucode":"D47C1F57500FE1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/VjomKNzfFiaIttqYMxbjAWTG7NL7P2UqC5fbSvg0JW80SLnoR2oH1G4U2eibmxbR4wPpoqZdDnjC8GqgShDOBRzA/132","comment_is_top":false,"comment_ctime":1585833998,"is_pvip":false,"replies":[{"id":"75483","content":"谢谢","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1585878043,"ip_address":"","comment_id":201761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585833998","product_id":100037301,"comment_content":"感谢老师分享，学习了，非常有用","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490413,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585878043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157516,"user_name":"AlexHuang","can_delete":false,"product_type":"c1","uid":1481439,"ip_address":"","ucode":"C359C1B9D3671A","user_header":"https://static001.geekbang.org/account/avatar/00/16/9a/df/58f07489.jpg","comment_is_top":false,"comment_ctime":1575183520,"is_pvip":false,"replies":[{"id":"60465","content":"谢谢！","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575251796,"ip_address":"","comment_id":157516,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575183520","product_id":100037301,"comment_content":"感谢欧老师，学习这门课受益匪浅！","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476451,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575251796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156376,"user_name":"Geek_1c00cb","can_delete":false,"product_type":"c1","uid":1424080,"ip_address":"","ucode":"5B98BA2BBAD0DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKvnkXZiaop0haMiarN6TJTUyRtAK3NUetGBJP6MrZBmaadibWPUW1bKib4U51DyVEQkEicUNukWFTzzbQ/132","comment_is_top":false,"comment_ctime":1574863680,"is_pvip":false,"replies":[{"id":"60120","content":"订单是聚合根，它引用订单明细就可以了哈。<br>你说的其它业务需要ID做关联是什么样的场景呢？是货物运输单吗？运单引用订单后，再通过订单的查询就可以获取订单明细了。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1574924770,"ip_address":"","comment_id":156376,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574863680","product_id":100037301,"comment_content":"请教个问题，对于订单和订单明细，尤其是针对订单明细，还有其它业务需要其id做关联，这种情况如何设计聚合根，分别做聚合根，还是用订单做聚合根？","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476085,"discussion_content":"订单是聚合根，它引用订单明细就可以了哈。\n你说的其它业务需要ID做关联是什么样的场景呢？是货物运输单吗？运单引用订单后，再通过订单的查询就可以获取订单明细了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574924770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156037,"user_name":"云中漫步","can_delete":false,"product_type":"c1","uid":1172978,"ip_address":"","ucode":"7E3BE72888E307","user_header":"https://static001.geekbang.org/account/avatar/00/11/e5/f2/262a7364.jpg","comment_is_top":false,"comment_ctime":1574814971,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574814971","product_id":100037301,"comment_content":"简单易懂，具有很强的实践性，学习成本也低。","like_count":0,"discussions":[{"author":{"id":1855293,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/4f/3d/8f8f6a02.jpg","nickname":"魏初林","note":"","ucode":"32B09EE625C9F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206329,"discussion_content":"很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584377851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156010,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1574812344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574812344","product_id":100037301,"comment_content":"《诗经·蒹葭》“蒹葭苍苍，白露为霜，所谓伊人，在水一方。溯洄从之，道阻且长。溯游从之，宛在水中央。<br>这就是极客时间课程经过老师总结得出结论，并给出具体结论。想验证结论是否正确，就要灵活组合运用演绎归纳（编码解码，务虚务实），自顶向下看结论是否有遗漏？（不可知论会对学员产生负面心里影响。）自底向上验证结论是否合理？","like_count":0},{"had_liked":false,"id":156007,"user_name":"瓜瓜","can_delete":false,"product_type":"c1","uid":1108505,"ip_address":"","ucode":"F90A5135A9BB4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","comment_is_top":false,"comment_ctime":1574811947,"is_pvip":false,"replies":[{"id":"59954","content":"谢谢这段时间的陪伴。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1574823143,"ip_address":"","comment_id":156007,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1574811947","product_id":100037301,"comment_content":"感谢老师","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475954,"discussion_content":"谢谢这段时间的陪伴。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574823143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053853,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/9d/19dcdd42.jpg","nickname":"瓜瓜","note":"","ucode":"2E98377E48399E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71530,"discussion_content":"发现同名的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575430579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}