{"id":158277,"title":"18 | 消息投递：如何保证消息仅仅被消费一次？","content":"<p>你好，我是唐扬。</p><p>通过上一节课，我们在电商系统中增加了消息队列对峰值写流量做削峰填谷，对次要的业务逻辑做异步处理，对不同的系统模块做解耦合。因为业务逻辑从同步代码中移除了，所以我们也要有相应的队列处理程序来处理消息、执行业务逻辑，<strong>这时你的系统架构变成了下面的样子：</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/c9/a6/c9f44acbc4025b2ff1f0a4b9fd0941a6.jpg?wh=1142*634\" alt=\"\"></p><p>这是一个简化版的架构图，实际上，随着业务逻辑越来越复杂，会引入更多的外部系统和服务来解决业务上的问题。比如我们会引入Elasticsearch来解决商品和店铺搜索的问题，也会引入审核系统对售卖的商品、用户的评论做自动的和人工的审核，你会越来越多地使用消息队列与外部系统解耦合以及提升系统性能。</p><p>比如你的电商系统需要上一个新的红包功能：用户在购买一定数量的商品之后，由你的系统给用户发一个现金的红包鼓励用户消费。由于发放红包的过程不应该在购买商品的主流程之内，所以你考虑使用消息队列来异步处理。<strong>这时你发现了一个问题：</strong>如果消息在投递的过程中发生丢失，那么用户就会因为没有得到红包而投诉。相反，如果消息在投递的过程中出现了重复，你的系统就会因为发送两个红包而损失。</p><p>那么我们如何保证产生的消息一定会被消费到并且只被消费一次呢？这个问题虽然听起来很浅显、很好理解，但是实际上却藏着很多玄机，本节课我就带你深入探讨。</p><!-- [[[read_end]]] --><h2>消息为什么会丢失</h2><p>如果要保证消息只被消费一次，首先就要保证消息不会丢失。那么消息从被写入到消息队列到被消费者消费完成，这个链路上会有哪些地方存在丢失消息的可能呢？其实主要存在三个场景：</p><ul>\n<li>消息从生产者写入到消息队列的过程；</li>\n<li>消息在消息队列中的存储场景；</li>\n<li>消息被消费者消费的过程。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/87/ea/876fe51e24a49b9751588cc0f8e106ea.png?wh=2510x938\" alt=\"\"></p><p>接下来我就针对每一个场景详细地剖析一下，这样你可以针对不同的场景选择合适的减少消息丢失的解决方案。</p><h4>1.在消息生产的过程中丢失消息</h4><p>在这个环节中主要有两种情况。</p><p>首先，消息的生产者一般是我们的业务服务器，消息队列是独立部署在单独的服务器上的。两者之间的网络虽然是内网但是也会存在抖动的可能，而一旦发生抖动，消息就有可能因为网络的错误而丢失。</p><p><strong>针对这种情况，我建议你采用的方案是消息重传。</strong>也就是当你发现发送超时后就将消息重新发一次，但也不能无限制地重传消息。一般来说，如果不是消息队列发生故障或者是到消息队列的网络断开了，重试2～3次就可以了。</p><p>不过这种方案可能会造成消息的重复，从而在消费的时候重复消费同样的消息。比方说消息生产时由于消息队列处理慢或者网络的抖动，导致虽然最终写入消息队列成功但在生产端却超时了，生产者重传这条消息就会形成重复的消息，针对上面的例子，直观显示在你面前的就会是你收到了两个现金红包。</p><p>那么消息发送到了消息队列之后是否就万无一失了呢？当然不是，<strong>在消息队列中消息仍然有丢失的风险。</strong></p><h4>2.在消息队列中丢失消息</h4><p>拿Kafka举例，消息在Kafka中是存储在本地磁盘上的，而为了减少消息存储时对磁盘的随机I/O，我们一般会将消息先写入到操作系统的Page Cache中，然后再找合适的时机刷新到磁盘上。</p><p>比如Kafka可以配置当达到某一时间间隔或者累积一定的消息数量的时候再刷盘，<strong>也就是所说的异步刷盘。</strong></p><p>来看一个形象的比喻：假如你经营一个图书馆，读者每还一本书你都要去把图书归位，不仅工作量大而且效率低下，但是如果你可以选择每隔3小时或者图书达到一定数量的时候再把图书归位，这样可以把同一类型的书一起归位，节省了查找图书位置的时间，可以提高效率。</p><p>不过如果发生机器掉电或者机器异常重启，Page Cache中还没有来得及刷盘的消息就会丢失了。<strong>那么怎么解决呢？</strong></p><p>你可能会把刷盘的间隔设置很短或者设置累积一条消息就就刷盘，但这样频繁刷盘会对性能有比较大的影响，而且从经验来看，出现机器宕机或者掉电的几率也不高，<strong>所以我不建议你这样做。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/6c/43/6c667c8c21baf27468c314105e522243.jpg?wh=1142*625\" alt=\"\"></p><p>如果你的电商系统对消息丢失的容忍度很低，<strong>你可以考虑以集群方式部署Kafka服务，通过部署多个副本备份数据保证消息尽量不丢失。</strong></p><p>那么它是怎么实现的呢？</p><p>Kafka集群中有一个Leader负责消息的写入和消费，可以有多个Follower负责数据的备份。Follower中有一个特殊的集合叫做ISR（in-sync replicas），当Leader故障时，新选举出来的Leader会从ISR中选择，默认Leader的数据会异步地复制给Follower，这样在Leader发生掉电或者宕机时，Kafka会从Follower中消费消息，减少消息丢失的可能。</p><p>由于默认消息是异步地从Leader复制到Follower的，所以一旦Leader宕机，那些还没有来得及复制到Follower的消息还是会丢失。为了解决这个问题，Kafka为生产者提供一个选项叫做“acks”，当这个选项被设置为“all”时，生产者发送的每一条消息除了发给Leader外还会发给所有的ISR，并且必须得到Leader和所有ISR的确认后才被认为发送成功。这样，只有Leader和所有的ISR都挂了消息才会丢失。</p><p><img src=\"https://static001.geekbang.org/resource/image/64/3f/648951000b3c7e969f8d04e42da6ac3f.jpg?wh=1142*628\" alt=\"\"></p><p>从上面这张图来看，当设置“acks=all”时，需要同步执行1、3、4三个步骤，对于消息生产的性能来说也是有比较大的影响的，所以你在实际应用中需要仔细地权衡考量。<strong>我给你的建议是：</strong></p><p>1.如果你需要确保消息一条都不能丢失，那么建议不要开启消息队列的同步刷盘，而是用集群的方式来解决，可以配置当所有ISR Follower都接收到消息才返回成功。</p><p>2.如果对消息的丢失有一定的容忍度，那么建议不部署集群，即使以集群方式部署，也建议配置只发送给一个Follower就可以返回成功了。</p><p>3.我们的业务系统一般对于消息的丢失有一定的容忍度，比如说以上面的红包系统为例，如果红包消息丢失了，我们只要后续给没有发送红包的用户补发红包就好了。</p><h4>3.在消费的过程中存在消息丢失的可能</h4><p>我还是以Kafka为例来说明。一个消费者消费消息的进度是记录在消息队列集群中的，而消费的过程分为三步：接收消息、处理消息、更新消费进度。</p><p>这里面接收消息和处理消息的过程都可能会发生异常或者失败，比如消息接收时网络发生抖动，导致消息并没有被正确地接收到；处理消息时可能发生一些业务的异常导致处理流程未执行完成，这时如果更新消费进度，这条失败的消息就永远不会被处理了，也可以认为是丢失了。</p><p><strong>所以，在这里你需要注意的是，</strong>一定要等到消息接收和处理完成后才能更新消费进度，但是这也会造成消息重复的问题，比方说某一条消息在处理之后消费者恰好宕机了，那么因为没有更新消费进度，所以当这个消费者重启之后还会重复地消费这条消息。</p><h2>如何保证消息只被消费一次</h2><p>从上面的分析中你能发现，为了避免消息丢失我们需要付出两方面的代价：一方面是性能的损耗，一方面可能造成消息重复消费。</p><p>性能的损耗我们还可以接受，因为一般业务系统只有在写请求时才会有发送消息队列的操作，而一般系统的写请求的量级并不高，但是消息一旦被重复消费就会造成业务逻辑处理的错误。那么我们要如何避免消息的重复呢？</p><p>想要完全地避免消息重复的发生是很难做到的，因为网络的抖动、机器的宕机和处理的异常都是比较难以避免的，在工业上并没有成熟的方法，因此我们会把要求放宽，只要保证即使消费到了重复的消息，从消费的最终结果来看和只消费一次是等同的就好了，也就是保证在消息的生产和消费的过程是“幂等”的。</p><h4>1.什么是幂等</h4><p>幂等是一个数学上的概念，它的含义是多次执行同一个操作和执行一次操作，最终得到的结果是相同的，说起来可能有些抽象，我给你举个例子：</p><p>比如，男生和女生吵架，女生抓住一个点不放，传递“你不在乎我了吗？”（生产消息）的信息。那么当多次抱怨“你不在乎我了吗？”的时候（多次生产相同消息），她不知道的是，男生的耳朵（消息处理）会自动把N多次的信息屏蔽，就像只听到一次一样，这就是幂等性。</p><p>如果我们消费一条消息的时候，要给现有的库存数量减1，那么如果消费两条相同的消息就会给库存数量减2，这就不是幂等的。而如果消费一条消息后处理逻辑是将库存的数量设置为0，或者是如果当前库存数量是10时则减1，这样在消费多条消息时所得到的结果就是相同的，<strong>这就是幂等的。</strong></p><p><strong>说白了，你可以这么理解“幂等”：</strong>一件事儿无论做多少次都和做一次产生的结果是一样的，那么这件事儿就具有幂等性。</p><h4>2.在生产、消费过程中增加消息幂等性的保证</h4><p>消息在生产和消费的过程中都可能会产生重复，所以你要做的是在生产过程和消费过程中增加消息幂等性的保证，这样就可以认为从“最终结果上来看”消息实际上是只被消费了一次的。</p><p><strong>在消息生产过程中，</strong>在Kafka0.11版本和Pulsar中都支持“producer idempotency”的特性，翻译过来就是生产过程的幂等性，这种特性保证消息虽然可能在生产端产生重复，但是最终在消息队列存储时只会存储一份。</p><p>它的做法是给每一个生产者一个唯一的ID，并且为生产的每一条消息赋予一个唯一ID，消息队列的服务端会存储&lt;生产者ID，最后一条消息ID&gt;的映射。当某一个生产者产生新的消息时，消息队列服务端会比对消息ID是否与存储的最后一条ID一致，如果一致就认为是重复的消息，服务端会自动丢弃。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/bd/aab832cee23258972c41e03493b8e0bd.jpg?wh=1142*497\" alt=\"\"></p><p><strong>而在消费端，<strong>幂等性的保证会稍微复杂一些，你可以从</strong>通用层和业务层</strong>两个层面来考虑。</p><p>在通用层面，你可以在消息被生产的时候使用发号器给它生成一个全局唯一的消息ID，消息被处理之后把这个ID存储在数据库中，在处理下一条消息之前先从数据库里面查询这个全局ID是否被消费过，如果被消费过就放弃消费。</p><p>你可以看到，无论是生产端的幂等性保证方式还是消费端通用的幂等性保证方式，它们的共同特点都是为每一个消息生成一个唯一的ID，然后在使用这个消息的时候，先比对这个ID是否已经存在，如果存在则认为消息已经被使用过。所以这种方式是一种标准的实现幂等的方式，<strong>你在项目之中可以拿来直接使用，</strong>它在逻辑上的伪代码就像下面这样：</p><pre><code>boolean isIDExisted = selectByID(ID); // 判断ID是否存在\nif(isIDExisted) {\n  return; //存在则直接返回\n} else {\n  process(message); //不存在，则处理消息\n  saveID(ID);   //存储ID\n}\n</code></pre><p><strong>不过这样会有一个问题：</strong>如果消息在处理之后，还没有来得及写入数据库，消费者宕机了重启之后发现数据库中并没有这条消息，还是会重复执行两次消费逻辑，这时你就需要引入事务机制，保证消息处理和写入数据库必须同时成功或者同时失败，但是这样消息处理的成本就更高了，所以如果对于消息重复没有特别严格的要求，可以直接使用这种通用的方案，而不考虑引入事务。</p><p><strong>在业务层面怎么处理呢？</strong>这里有很多种处理方式，其中有一种是增加乐观锁的方式。比如你的消息处理程序需要给一个人的账号加钱，那么你可以通过乐观锁的方式来解决。</p><p><strong>具体的操作方式是这样的：</strong>你给每个人的账号数据中增加一个版本号的字段，在生产消息时先查询这个账户的版本号，并且将版本号连同消息一起发送给消息队列。消费端在拿到消息和版本号后，在执行更新账户金额SQL的时候带上版本号，类似于执行：</p><pre><code>update user set amount = amount + 20, version=version+1 where userId=1 and version=1;\n</code></pre><p>你看，我们在更新数据时给数据加了乐观锁，这样在消费第一条消息时，version值为1，SQL可以执行成功，并且同时把version值改为了2；在执行第二条相同的消息时，由于version值不再是1，所以这条SQL不能执行成功，也就保证了消息的幂等性。</p><h2>课程小结</h2><p>本节课，我主要带你了解了在消息队列中消息可能会发生丢失的场景和应对方法，以及在消息重复的场景下，你要如何保证尽量不影响消息最终的处理结果。我想强调的重点是：</p><ul>\n<li>\n<p>消息的丢失可以通过生产端的重试、消息队列配置集群模式以及消费端合理处理消费进度三种方式来解决；</p>\n</li>\n<li>\n<p>为了解决消息的丢失通常会造成性能上的问题以及消息的重复问题；</p>\n</li>\n<li>\n<p>通过保证消息处理的幂等性可以解决消息的重复问题。</p>\n</li>\n</ul><p>虽然我讲了很多应对消息丢失的方法，但并不是说消息丢失一定不能被接受，毕竟你可以看到在允许消息丢失的情况下，消息队列的性能更好，方案实现的复杂度也最低。比如像是日志处理的场景，日志存在的意义在于排查系统的问题，而系统出现问题的几率不高，偶发的丢失几条日志是可以接受的。</p><p><strong>所以方案设计看场景，这是一切设计的原则，</strong>你不能把所有的消息队列都配置成防止消息丢失的方式，也不能要求所有的业务处理逻辑都要支持幂等性，这样会给开发和运维带来额外的负担。</p><h2>一课一思</h2><p>我提到了消息队列在生产和消费端需要保证消息处理的幂等性，那么你还了解哪些保证消息处理幂等性的方法呢？欢迎在留言区与我分享你的经验。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"17 | 消息队列：秒杀时如何处理每秒上万次的下单请求？","id":156904},"right":{"article_title":"19 | 消息队列：如何降低消息队列系统中消息的延迟？","id":159487}},"comments":[{"had_liked":false,"id":146092,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1572431317,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"237795632597","product_id":100035801,"comment_content":"处理方式：<br>网络抖动处理：重发<br>消息队列服务器宕机：集群<br>消息重复：使用唯一 ID 保证消息唯一性。","like_count":56,"discussions":[{"author":{"id":2397964,"avatar":"","nickname":"小胡","note":"","ucode":"1E0DD4138E9D0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388338,"discussion_content":"总结得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628702109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164306,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1576932668,"is_pvip":false,"replies":[{"id":"63069","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577241893,"ip_address":"","comment_id":164306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"156195755324","product_id":100035801,"comment_content":"联想到MongoDB在写策略中有w和j两个参数，w对应同步多个从节点，j是刷journal到磁盘。看来存储系统的技术都差不多。一般设置w=majority就可以，j=false。跟kafka中老师的建议一样。Redis中也有AOF，不同存储系统解决问题不一样，但共性还是很多的。因为都要保证性能，可用性，数据一致性，只是每个存储系统侧重点不一样，Kafka是写性能，Redis是读性能，普通关系数据库是事务","like_count":36,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478715,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577241893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165135,"user_name":"Ricky Fung","can_delete":false,"product_type":"c1","uid":1051363,"ip_address":"","ucode":"7AEA1F8EC4A088","user_header":"https://static001.geekbang.org/account/avatar/00/10/0a/e3/9637bfdb.jpg","comment_is_top":false,"comment_ctime":1577169998,"is_pvip":false,"replies":[{"id":"63043","content":"赞~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577239436,"ip_address":"","comment_id":165135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"104656385102","product_id":100035801,"comment_content":"消费端 消息处理的幂等性：1.增加去重表（通用）；2.根据业务数据状态来判断（例如 订单支付后变更状态为已支付，如果订单当前状态已经为已支付则忽略此消息）。","like_count":24,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479043,"discussion_content":"赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577239436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145857,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1572396344,"is_pvip":false,"replies":[{"id":"56432","content":"嗯那 这个也是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479045,"ip_address":"","comment_id":145857,"utype":1}],"discussion_count":13,"race_medal":2,"score":"100356644152","product_id":100035801,"comment_content":"我们目前是在消费消息后，将消息id(业务上定义的唯一标识)放入redis。消费前，先去redis查找，也算是业务上的一种防重复吧","like_count":24,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472602,"discussion_content":"嗯那 这个也是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55598,"discussion_content":"我们之前使用rocketmq消费订单信息时也是通过redis校验msgID是否存在。保持在redis中的msgID不设置超时时间，每天我们有一个和商城（生产者）的对账任务，如果对账没有问题，再将msgID删除","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574385445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1008946,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","nickname":"黎","note":"","ucode":"B2AB6BB4D7FE9C","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55702,"discussion_content":"删除msgID是手动删吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574390484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55598,"ip_address":""},"score":55702,"extra":""},{"author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008946,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","nickname":"黎","note":"","ucode":"B2AB6BB4D7FE9C","race_medal":2,"user_type":1,"is_pvip":false},"discussion":{"id":55894,"discussion_content":"程序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574410214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55702,"ip_address":""},"score":55894,"extra":""}]},{"author":{"id":1125834,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","nickname":"fomy","note":"","ucode":"CD87EA03B1F327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57644,"discussion_content":"假如消费到一半出现了异常怎么办？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574639028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41392,"discussion_content":"分布式系统中，貌似都不用自增ID做全局唯一ID的。幂等性根本保证不了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572418997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1193111,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/97/7b181b68.jpg","nickname":"西风吹北川","note":"","ucode":"4DCFF5EF96224D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42002,"discussion_content":"我记得在哪个专栏看到可以加个发号器，保证ID的全局唯一","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572570323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41392,"ip_address":""},"score":42002,"extra":""},{"author":{"id":1025664,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a6/80/6ff7ea5f.jpg","nickname":"guoguo 👻","note":"","ucode":"874B0A1E0F7DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48894,"discussion_content":"雪花算法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573534877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41392,"ip_address":""},"score":48894,"extra":""}]},{"author":{"id":1366948,"avatar":"https://static001.geekbang.org/account/avatar/00/14/db/a4/191be6ad.jpg","nickname":"加载中……","note":"","ucode":"3E59A0A0784D0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41300,"discussion_content":"你好，请问，redis里面放入的id，没有过期时间么？如果没有，岂不是数据量会只增不减，如过有 如果id过期删除去了，是不是还会重复消费？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572397383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366948,"avatar":"https://static001.geekbang.org/account/avatar/00/14/db/a4/191be6ad.jpg","nickname":"加载中……","note":"","ucode":"3E59A0A0784D0A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41332,"discussion_content":"个人看法，一般通过redis来做自增id，id不会设置过期时间的，可以开启持久化机制来保证数据不丢失，但是redis的LRU策略有可能还是会清理掉没有设置过期时间的key，这个是在发生在极端的情况下（redis使用的内存大于服务器的物理内存），也跟Redis配置的lru策略配置参数有关系，比如redis的lru策略配置的是allkeys-lru，也就是说当内存不够用的时候，不管设置没设置过期时间，都有可能被清理掉，一旦自增的key被随机清理掉，就有可能会导致消息id丢失，自增id从0 开始，自增id是为了保证写入消息队列的消息id唯一\n\n如果自增id设置有过期时间，为了保证业务，应该还需要外部持久化的机制来保证，比如定时写数据到mysql保存当前已产生的消息id，否则自增id到期后，就没了，也是只能从0开始，这样对于业务做统计或者消息追踪都很麻烦\n\n如果你觉得自增id使用起来很难理解，也可以用当前时间戳+随机数来保证唯一的消息id，只是自增id的保证唯一使用起来更方便","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572401361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41300,"ip_address":""},"score":41332,"extra":""},{"author":{"id":1103533,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/ad/52df3832.jpg","nickname":"逍遥法外","note":"","ucode":"75458730192696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41382,"discussion_content":"自增ID怎么保证幂等？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572415031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41332,"ip_address":""},"score":41382,"extra":""},{"author":{"id":1037755,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d5/bb/98b93862.jpg","nickname":"古德","note":"","ucode":"E3F646BB73F60E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366948,"avatar":"https://static001.geekbang.org/account/avatar/00/14/db/a4/191be6ad.jpg","nickname":"加载中……","note":"","ucode":"3E59A0A0784D0A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54100,"discussion_content":"一般情况下重试的时间间隔都不会太长，所以只需要在redis里面，把这些key的过期时间设得比重试时间长就可以了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574258943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41300,"ip_address":""},"score":54100,"extra":""}]}]},{"had_liked":false,"id":210562,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1587787621,"is_pvip":false,"replies":[{"id":"78856","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1588069980,"ip_address":"","comment_id":210562,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57422362469","product_id":100035801,"comment_content":"消息发送的三种语义<br>1：至少发送一次，存在重复发送，但不会丢消息<br>2：之多发送一次，存在丢失消息，但不会重复发<br>3：仅且发送一次，最理想情况，但是很难做到<br>所以，大部分消息中间件都会采用1，这样就会出现重复发生消息的风险，需要做幂等处理，做幂等处理就必须有全局唯一值。<br>第一：利用消息的全局唯一值来做处理，比如：消息的key<br>第二：利用业务的全局唯一值来做处理，比如：数据库的主键或唯一键<br><br>怎么处理？<br>那么先查询，判断是否重复，然后再做处理<br>要么利用存储系统的特点，吞掉重复异常，比如：DB<br>或者加锁，加乐观锁，视具体业务来定<br>不过全局唯一值是少不了的，具体是什么？存储在哪里？是先查还是吞异常也看具体业务。<br>如果是数据库，先查再判断性能堪忧，最好采用唯一键，重复吞异常的方式。","like_count":13,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493055,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588069980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161842,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1576375990,"is_pvip":false,"replies":[{"id":"62175","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744827,"ip_address":"","comment_id":161842,"utype":1}],"discussion_count":7,"race_medal":0,"score":"40231081654","product_id":100035801,"comment_content":"我们在生产环境中为了避免重复消费使用了全局唯一ID的方式，每次业务逻辑前都会从库中查一下。但是会出现两条消息瞬时并发处理问题，这时事务都没提交所以都查不到。这时可以用老师说的版本乐观锁来解决 ， 我们目前的方式是增加了分布式锁","like_count":9,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477879,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184853,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydVBBkofXDqCyP7pdwkicHZ9xtyEEuZvzrrkeWcnQjZ1ibEgG60eLotQTsKJFpWibuf6e7G9r0I1xaribUAQibPMl7g/132","nickname":"Shine","note":"","ucode":"BF3DB5ADF2B153","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293921,"discussion_content":"修改可以用乐观锁，并发插入怎么用乐观锁?","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1595730073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WoMEH90o5iaJ6EicdogIx0MKHP2qfw9SricPFwCQnMq0RNGm5wicP4vY8la7lLfwgH8qibibaO0TfU59ibOTKx4fcic9ZA/132","nickname":"wt、Laker","note":"","ucode":"5057B96DA8915F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308649,"discussion_content":"公司项目集群。用的rabbitMq也是出现并发两条，使用redis作为分布式锁处理的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601019313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145759,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/9f/da374651.jpg","nickname":"zero","note":"","ucode":"D8A22815D8987C","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298419,"discussion_content":"消息不都是串行的吗？怎么会出现并发的情况?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597294775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288973,"discussion_content":"可以更详细说下吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593948956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619438,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b5/ee/f56aebe6.jpg","nickname":"猩猩","note":"","ucode":"748E447BA89B03","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552934,"discussion_content":"一个猜测是网络抖动消息重复了，两个消息同一个id，多个消费者可能会并发这两条消息(未考虑分区的情况下）。不知道是不是这样？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645663469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404300,"discussion_content":"为什么会同一条消息同一时刻两次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634283951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164229,"user_name":"阿杜","can_delete":false,"product_type":"c1","uid":1066705,"ip_address":"","ucode":"349D3572F5ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","comment_is_top":false,"comment_ctime":1576910802,"is_pvip":false,"replies":[{"id":"63071","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577242032,"ip_address":"","comment_id":164229,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31641681874","product_id":100035801,"comment_content":"生产者判重交给消息中间件自行处理，加判重表。消费端的重复消费通过分布式锁控制，过期时间可以放长些。","like_count":8,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478687,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577242032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2285209,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKeY4HjTSJWiauBcjpvXhLCNHDeicNfpcjicEoW8gE9gtCWrQ68MRlMcicHYGpP6yl4TX26KZ0aul9w6A/132","nickname":"Geek_16057d","note":"","ucode":"8C49DFFBF452DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540705,"discussion_content":"消费端处理重复消息的并发问题，通过分布式锁控制，过期时间放长。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640141741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1138821,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","nickname":"与路同飞","note":"","ucode":"2985F1440A1962","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2285209,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKeY4HjTSJWiauBcjpvXhLCNHDeicNfpcjicEoW8gE9gtCWrQ68MRlMcicHYGpP6yl4TX26KZ0aul9w6A/132","nickname":"Geek_16057d","note":"","ucode":"8C49DFFBF452DA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579447,"discussion_content":"其实这种也不行吧，你加锁成功后，业务逻辑还没执行，系统宕机了，后面重新消费发现锁被占用了，你就不执行业务逻辑了，这块消息就会丢失","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657460400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540705,"ip_address":""},"score":579447,"extra":""}]}]},{"had_liked":false,"id":167279,"user_name":"寒溪","can_delete":false,"product_type":"c1","uid":1001970,"ip_address":"","ucode":"67B9F1A1C15A20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/f2/25cfa472.jpg","comment_is_top":false,"comment_ctime":1577756172,"is_pvip":false,"replies":[{"id":"65115","content":"有一个办法是可以把相关的数据写入到同一个partition","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577935598,"ip_address":"","comment_id":167279,"utype":1}],"discussion_count":2,"race_medal":1,"score":"27347559948","product_id":100035801,"comment_content":"看了老师整个课程，知识体系非常全面且深入。但是mq这块儿有一个很重要的方面没有设计，mq消息乱序的问题，想知道老师工作中是怎么处理这个问题的。","like_count":6,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479806,"discussion_content":"有一个办法是可以把相关的数据写入到同一个partition","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577935598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282000,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8f/d0/b6036b18.jpg","nickname":"Nick","note":"","ucode":"867054C5508F8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590998,"discussion_content":"可以考虑分区顺序消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666230296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146947,"user_name":"肖大保健","can_delete":false,"product_type":"c1","uid":1306868,"ip_address":"","ucode":"E3209A00C1B954","user_header":"https://static001.geekbang.org/account/avatar/00/13/f0/f4/22dbe2d9.jpg","comment_is_top":false,"comment_ctime":1572712959,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27342516735","product_id":100035801,"comment_content":"关于幂等性方案，上面先查后写操作，也不是绝对的，会有并发问题，同时多个线程，一个正在进行插入操作，一个正在进行查询操作，正好查不到，会有两条重复数据，当然概率比较小，<br>解决方法<br>1、有没有业务数据加唯一索引，插入失败抛异常，异常可能会MQ重试，所以还需要catch异常处理<br>2、插入加入写锁，for update 影响会比较大<br>3、当有唯一索引实，insert ignore 忽略重复插入问题，replace into 和 insert ... on duplicate key update，都是替换原有的重复数据","like_count":6,"discussions":[{"author":{"id":2613923,"avatar":"","nickname":"Geek_a65446","note":"","ucode":"41200D6BF2FC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577399,"discussion_content":"我也觉得有这个问题，专栏的水平真不敢恭维","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656068083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095289,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b6/79/22e582a5.jpg","nickname":"刘岚乔月","note":"","ucode":"99A9AB4E4E1111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292852,"discussion_content":"并发量不是特别大，for update也是没问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595348036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175197,"user_name":"Lane","can_delete":false,"product_type":"c1","uid":1008257,"ip_address":"","ucode":"F70459D1BBD9F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","comment_is_top":false,"comment_ctime":1580613184,"is_pvip":true,"replies":[{"id":"68355","content":"从性能数据看，网络调用耗时要比磁盘写入耗时低","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1580872533,"ip_address":"","comment_id":175197,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23055449664","product_id":100035801,"comment_content":"推荐使用多副本而不是每次刷盘。我不太理解，难道每次都刷盘（flush），性能应该比每次都要多次网络调用要强得多啊（备份同步）","like_count":5,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482652,"discussion_content":"从性能数据看，网络调用耗时要比磁盘写入耗时低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580872533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","nickname":"Lane","note":"","ucode":"F70459D1BBD9F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163052,"discussion_content":"刷新了认知。谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581044474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","nickname":"Lane","note":"","ucode":"F70459D1BBD9F4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":364683,"discussion_content":"而且做了可以故障转移","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617550941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":163052,"ip_address":""},"score":364683,"extra":""}]}]},{"had_liked":false,"id":146478,"user_name":"罗力友","can_delete":false,"product_type":"c1","uid":1269780,"ip_address":"","ucode":"6B10A00221B25A","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/14/6cb28332.jpg","comment_is_top":false,"comment_ctime":1572533436,"is_pvip":false,"replies":[{"id":"56580","content":"如果每条消息生产时都使用发号器发一个唯一的号就好了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572565948,"ip_address":"","comment_id":146478,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18752402620","product_id":100035801,"comment_content":"消息队列的服务端会存储 &lt; 生产者 ID，最后一条消息 ID&gt; 的映射。当某一个生产者产生新的消息时，消息队列服务端会比对消息 ID 是否与存储的最后一条 ID 一致，如果一致，就认为是重复的消息，服务端会自动丢弃。<br>老师，只校验最后一条ID应该不能完全保证消息不重复吧？","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472876,"discussion_content":"如果每条消息生产时都使用发号器发一个唯一的号就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572565948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7c/45/416fe519.jpg","nickname":"Cha","note":"","ucode":"BE28533F67F0F5","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281856,"discussion_content":"如果producer是异步发消息以及重试的，貌似最后一条消息不能保证","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591834575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1080389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7c/45/416fe519.jpg","nickname":"Cha","note":"","ucode":"BE28533F67F0F5","race_medal":4,"user_type":1,"is_pvip":false},"discussion":{"id":364679,"discussion_content":"重试的消息，生产者ID，最后一条消息ID以及内容都没变\n\n而且这都由消息队列保证的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617550688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281856,"ip_address":""},"score":364679,"extra":""}]}]},{"had_liked":false,"id":155031,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1574639278,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14459541166","product_id":100035801,"comment_content":"通过数据库锁实现幂等性：insert ignore, insert ... on duplicate, insert replace, update set a where a等等","like_count":3,"discussions":[{"author":{"id":1145759,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/9f/da374651.jpg","nickname":"zero","note":"","ucode":"D8A22815D8987C","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298420,"discussion_content":"性能堪忧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597294853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","nickname":"Hesher","note":"","ucode":"99AB8B1704CB7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271404,"discussion_content":"没经过高并发和优化的可能是大多数人，这很正常。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590130078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1961553,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKndUALz6eOevGElBRewhmYZWhJiaplDdpBh5cy26ZIvLrxc8To6gooEzE8G5r3IxoyrINPz8qFZaQ/132","nickname":"Geek_27508f","note":"","ucode":"09E517267AEED9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","nickname":"Hesher","note":"","ucode":"99AB8B1704CB7E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298940,"discussion_content":"请教下这种情况是需要引入分布式锁还是有其他方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597484207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":271404,"ip_address":""},"score":298940,"extra":""}]},{"author":{"id":1232077,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epkttbAibb21Cf4Hvq7ASReEyk5klDhxQulmnrzQWEcqslZ6qhlFf8zw0ZpG8BA65icnz8ianlZVnkFA/132","nickname":"SuperYue","note":"","ucode":"97DEDA055C462A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200451,"discussion_content":"老兄你说的方式是最简单高性能的 数据库锁和唯一约束满足不了的场景，才会用分布式锁  那些加分布式锁再查询数据库是否存在的设计，都是没经历过大并发和优化的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583680674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971269,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","nickname":"杨","note":"","ucode":"7EFEFE285975C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374068,"discussion_content":"这种方式对数据库压力太大，优先redis分布式锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620985473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145952,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1572405941,"is_pvip":false,"replies":[{"id":"56433","content":"用哪种机器都可以，只是你在出性能报告的时候需要说明机器的配置：）<br><br>qps的话一般会收集访问日志来统计，后面我讲到监控时会提到的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479146,"ip_address":"","comment_id":145952,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14457307829","product_id":100035801,"comment_content":"老师请教一个问题，例如我开发个服务端程序，我想知道我开发的服务程序性能指标，怎么得的，例如机器配置 cpu有i3 i5的那个更适合怎么测试出来的，另外qps吞吐率等这些都是用工具测试的吗😊","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472645,"discussion_content":"用哪种机器都可以，只是你在出性能报告的时候需要说明机器的配置：）\n\nqps的话一般会收集访问日志来统计，后面我讲到监控时会提到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048887,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","nickname":"高源","note":"","ucode":"751B41FD38EF7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41713,"discussion_content":"还有急手问题就是双方sockettcp通信，运行一段时间后例如1小时，就发现客户端发送消息给服务器，客户端捕获服务器返回超时，用心跳方式，随着时间长出现几率多了，服务器端通过日志说给返回了，客户端打日志发现超时了，具体想问问这样问题如何排查啊，定位具体是谁的问题，如何解决。我怀疑服务端处理能力问题，但现在不确定没有办法确认请教老师，","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572490894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145939,"user_name":"蓝魔丶","can_delete":false,"product_type":"c1","uid":1219438,"ip_address":"","ucode":"2AE4359E263558","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","comment_is_top":false,"comment_ctime":1572404292,"is_pvip":false,"replies":[{"id":"56435","content":"是有这种情况。不过因为有ack的机制，所以发送端是可以知道哪条消息有丢失的，如果发送端对要发送的消息有记录就好<br><br>","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479869,"ip_address":"","comment_id":145939,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14457306180","product_id":100035801,"comment_content":"老师，这个问题希望解答下，有一种场景，消息发出后因为网络问题没有得到ack响应，此时服务挂掉，重启之后内存中的消息就丢失了，无法完成消息队列客户端提供的重试机制，这种情况是不是就丢失消息了。<br>如果要解决这个问题，思路是在发消息前需要记录消息发送记录，发送完成后标记完成，重启服务后查看发送消息，确无响应的消息，进行重发。但是我觉得这样是不是性能影响太大，不仅消费者需要日志检查，生产者也需要日志检查","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472637,"discussion_content":"是有这种情况。不过因为有ack的机制，所以发送端是可以知道哪条消息有丢失的，如果发送端对要发送的消息有记录就好\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364689,"discussion_content":"发送端请求没有发送成功，客户响应失败","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617551696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41393,"discussion_content":"CA跟CP 总得选一个，不能全要呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572419060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1179533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/8d/8601f035.jpg","nickname":"淞淞同学","note":"","ucode":"529A326B898008","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47717,"discussion_content":"CP和AP吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573397207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41393,"ip_address":""},"score":47717,"extra":""}]}]},{"had_liked":false,"id":145892,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1572399445,"is_pvip":false,"replies":[{"id":"56434","content":"是的，在并发下这种方式不能保证幂等。不过也可以在消费端保证幂等","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479689,"ip_address":"","comment_id":145892,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14457301333","product_id":100035801,"comment_content":"老师  按照上面说的生产者保证消息幂等的方法  如果一个生产者的一个线程1发送了一条消息 有了唯一id 结果没被确认 需要重传  但是在重传的时候  该生产者的另一个线程2 发送了消息2 这是线程1对消息进行了重传  那么不就不能保证幂等了么","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472617,"discussion_content":"是的，在并发下这种方式不能保证幂等。不过也可以在消费端保证幂等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"门窗小二","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573558,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653491299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/8d/8601f035.jpg","nickname":"淞淞同学","note":"","ucode":"529A326B898008","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47723,"discussion_content":"消息1和消息2是否拥有一样的全局id?如果是，老师说的kafka生产者幂等特性不是能解决这个问题吗？如果不是，感觉不是并发问题，就是2个不同的消息啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573398531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290935,"user_name":"xj","can_delete":false,"product_type":"c1","uid":2111794,"ip_address":"","ucode":"088D9E92FE0215","user_header":"https://static001.geekbang.org/account/avatar/00/20/39/32/71fbac45.jpg","comment_is_top":false,"comment_ctime":1619866145,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10209800737","product_id":100035801,"comment_content":"另外我想说一下关于消息丢失的问题。因为最近确实因为使用阿里云的mq，导致某个时间段出现几十笔订单下游consumer完全没有进行消费，consumer都是正常状态，消息也被生产者正常接受。因为是钱相关的消息，得益于当时系统设计，我在上游系统发送mq的时候会在redis存一份档，当下游消费成功的时候删除掉该key.这样即使我consumer根本无感知的发生消息丢失，我也能从上游系统回溯进行自动或手动消费","like_count":2,"discussions":[{"author":{"id":1553046,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b2/96/a524ebf6.jpg","nickname":"silas","note":"","ucode":"EEFF1E8ED00EE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557177,"discussion_content":"那原因是什么导致的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647682139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290933,"user_name":"xj","can_delete":false,"product_type":"c1","uid":2111794,"ip_address":"","ucode":"088D9E92FE0215","user_header":"https://static001.geekbang.org/account/avatar/00/20/39/32/71fbac45.jpg","comment_is_top":false,"comment_ctime":1619865575,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10209800167","product_id":100035801,"comment_content":"关于消费者幂等性的问题，我这边的业务场景是采用业务相关联的唯一的订单流水号作为message的key，然后使用布隆过滤器做检验，只要订单被处理过了，无论是退款或者撤销操作都会该比流水加入布隆过滤器，至于假设两笔重复的消息被同时消费也是通过使用redis的setnx流水号，并设置一个业务处理的合理的过期时间，因为订单流水每天就有上百万，如果是直接key value放入redis会比较耗内存，我能使用布隆过滤器也是基于我的业务场景，因为我这里可以在几个月之后完全删除布隆过滤器","like_count":2,"discussions":[{"author":{"id":2649276,"avatar":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","nickname":"Leo","note":"","ucode":"CEBAD9CDCFC2A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399046,"discussion_content":"bloom filter会有误差，你们怎么处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632894464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173568,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1249512,"ip_address":"","ucode":"E0AFA940BEAC1C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/e8/172b5915.jpg","comment_is_top":false,"comment_ctime":1579598674,"is_pvip":false,"replies":[{"id":"67353","content":"基本上还是分布式事务，比如两阶段提交的办法","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579694453,"ip_address":"","comment_id":173568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10169533266","product_id":100035801,"comment_content":"老师你好，今天下午的时间全部奉献给这个专栏了，一口气看到了18。<br>我很想继续深入学习文中这一段更深入的解决方案：<br><br>如果消息在处理之后，还没有来得及写入数据库，消费者宕机了重启之后发现数据库中并没有这条消息，还是会重复执行两次消费逻辑，这时你就需要引入事务机制，保证消息处理和写入数据库必须同时成功或者同时失败，但是这样消息处理的成本就更高了。<br><br>老师可以继续往下深入讲吗？金融系统跟钱有关的必须解决好这一点啊……","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482119,"discussion_content":"基本上还是分布式事务，比如两阶段提交的办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579694453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170023,"user_name":"五羊司机","can_delete":false,"product_type":"c1","uid":1668397,"ip_address":"","ucode":"9843F4E58032CE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/nf73HyxDKACe84GR6QLM7LJPibxUBOcrY2DIJTsKHbbegIIH9YZykQbHYOoWADAUibpcmFesgSA6XGU3tlwTA5KQ/132","comment_is_top":false,"comment_ctime":1578493954,"is_pvip":false,"replies":[{"id":"66147","content":"如果版本号重复是没有办法的，不过版本号可以用发号器生成，保证唯一","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578669768,"ip_address":"","comment_id":170023,"utype":1}],"discussion_count":5,"race_medal":0,"score":"10168428546","product_id":100035801,"comment_content":"老师，不太懂，使用乐观锁防止重复消费的话，如果生产时有两条并发的消息处理同一个数据(不是重复消息)，获取到的是相同的版本号，写入消息队列后，第一条消息被消费成功，修改了版本号，第二条消息就再也无法消费成功了，那怎么办呢？我看评论区写了可以重新查询，可以详细说说吗？因为我觉得这个消费者再怎么重新查询到的版本号都已经和生产者写入时的版本号不一致了，只能由生产者重新生产一次消息才能写入更新后的版本号吧，可是消费者又怎么通知生产者需要重新生产消息呢？而且消费者发现版本号不一致，它也没法判断是由于并发还是重复造成的吧","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480811,"discussion_content":"如果版本号重复是没有办法的，不过版本号可以用发号器生成，保证唯一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578669768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024994,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/e2/5cb4f43f.jpg","nickname":"laolinshi","note":"","ucode":"269B879389D7D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554654,"discussion_content":"并发处理同一个数据的情况下极易出现数据覆盖的问题，出现问题的过程是这样的: 一个请求在经过业务逻辑处理后保存结果到数据库中并向用户返回处理成功的通知，这时另一个并发的请求经过业务处理后得到了不同的处理结果，当把处理结果保存到数据库中就会导致原先请求保存的数据丢失了，这会影响到用户后续的查询带来业务上的问题。解决的办法是使用版本号，拥有相同版本号的请求只有一个能处理成功，其他的请求一律返回失败，通过这样的方式就可以避免数据覆盖的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646537338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181239,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/37/b772639e.jpg","nickname":"adammmxy","note":"","ucode":"22A0D6A6B4C322","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402443,"discussion_content":"同问，老师回答不知所云。这个version还需要唯一？version到底是谁的version？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633878121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2586307,"avatar":"https://static001.geekbang.org/account/avatar/00/27/76/c3/b3dad8ea.jpg","nickname":"阿达西","note":"","ucode":"555E4DC070A13C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370871,"discussion_content":"同问，但是老师答的有点看不懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619571988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364695,"discussion_content":"ABA问题，加时间戳，或者版本号全局唯一递增","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617551960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153691,"user_name":"何磊","can_delete":false,"product_type":"c1","uid":1047604,"ip_address":"","ucode":"78934C3ED4A342","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/34/c733b116.jpg","comment_is_top":false,"comment_ctime":1574297529,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164232121","product_id":100035801,"comment_content":"老师好，我对消息全局id存在疑问。该id是否应该是这个消息的签名呢？如果仅仅是全局id并不能判断两条消息是否一致","like_count":2,"discussions":[{"author":{"id":1026832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","nickname":"Hesher","note":"","ucode":"99AB8B1704CB7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271409,"discussion_content":"有时候生产端重复生产，但并不一定所有字段都相同，比如 request_no、时间戳等等，但业务 id 重复，这就导致消息签名不同。消费时从业务上判断是否重复可能更严谨一些。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590131455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170703,"user_name":"梁中华","can_delete":false,"product_type":"c1","uid":1006789,"ip_address":"","ucode":"52FE40242CBAD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","comment_is_top":false,"comment_ctime":1578669216,"is_pvip":true,"replies":[{"id":"66148","content":"在本地磁盘或者内存中暂存","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1578669814,"ip_address":"","comment_id":170703,"utype":1}],"discussion_count":2,"race_medal":1,"score":"5873636512","product_id":100035801,"comment_content":"如果生产端较长时间网络不可用，又不想影响主线业务流程，这种情况该怎么办呢？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481072,"discussion_content":"在本地磁盘或者内存中暂存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578669814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364690,"discussion_content":"生产端访问有问题，这部分系统对外不可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617551795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147423,"user_name":"敏敏","can_delete":false,"product_type":"c1","uid":1120596,"ip_address":"","ucode":"28C8E8899F74D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/54/4341f5b7.jpg","comment_is_top":false,"comment_ctime":1572863183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867830479","product_id":100035801,"comment_content":"用分布式锁 解决重试 用 数据库cas解决多人同时减库存的逻辑","like_count":1},{"had_liked":false,"id":340850,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1649196665,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649196665","product_id":100035801,"comment_content":"状态机","like_count":0},{"had_liked":false,"id":340849,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1649196638,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649196638","product_id":100035801,"comment_content":"强幂等性需要业务层保证，考虑用数据库唯一键，如果需要通用性的这部分就拆分出一个幂等组件，底层还是通过db唯一流水保证。<br>如果追求性能，唯一性要求不高，可以用redis存储，然后设置过期时间，需要估算下内存占比。","like_count":0},{"had_liked":false,"id":337898,"user_name":"delicate","can_delete":false,"product_type":"c1","uid":1187083,"ip_address":"","ucode":"AE262751C50CDD","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/0b/5f353b88.jpg","comment_is_top":false,"comment_ctime":1647143760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647143760","product_id":100035801,"comment_content":"最重要的是保证消息生产到消费都是幂等的","like_count":0},{"had_liked":false,"id":315395,"user_name":"adammmxy","can_delete":false,"product_type":"c1","uid":1181239,"ip_address":"","ucode":"22A0D6A6B4C322","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/37/b772639e.jpg","comment_is_top":false,"comment_ctime":1633877149,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1633877149","product_id":100035801,"comment_content":"这个乐观锁我没有理解啊~<br>我发了一个消息+10块，发现当时version是1，于是产生消息 （+10,1）<br>然后，我又发一个消息+15块，发现当时version还是1（由于第一条消息还没有消费）。于是产生(+15,1)<br>这样后面这两条消息不就冲突了么，只有一条能够被执行啊？？？","like_count":0,"discussions":[{"author":{"id":1521061,"avatar":"https://static001.geekbang.org/account/avatar/00/17/35/a5/3c8f8cd4.jpg","nickname":"默然","note":"","ucode":"A03C4C93FC5023","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559175,"discussion_content":"重新再查一遍version(+15,2）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648635474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2920655,"avatar":"","nickname":"Geek_69090b","note":"","ucode":"758C05A4865E4F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558859,"discussion_content":"数据库是会加锁的，也就是执行第一个的时候会加锁，第二个等待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648506749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314683,"user_name":"无名小辈","can_delete":false,"product_type":"c1","uid":1303534,"ip_address":"","ucode":"F3E000D3AB119C","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/ee/28a60b35.jpg","comment_is_top":false,"comment_ctime":1633324505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633324505","product_id":100035801,"comment_content":"老师好，这节最后学的用乐观锁实现等幂的例子是不是有种edge case，在第一条消息在生产端读了版本号，还没来得及处理和更新版本，然后发第二条消息，此时第二条消息版本号还是旧的，因此会被忽略。然而第二条消息可能不应该被忽略。不知这个理解是否有问题","like_count":0},{"had_liked":false,"id":314180,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":2649276,"ip_address":"","ucode":"CEBAD9CDCFC2A3","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","comment_is_top":false,"comment_ctime":1632887820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632887820","product_id":100035801,"comment_content":"保证幂等，使用版本号建议不错，我之前一致是按照唯一id来判重；","like_count":0},{"had_liked":false,"id":293913,"user_name":"摩西摩西~我是小新","can_delete":false,"product_type":"c1","uid":2459124,"ip_address":"","ucode":"CD5A2FF41E7868","user_header":"https://static001.geekbang.org/account/avatar/00/25/85/f4/7bd78f64.jpg","comment_is_top":false,"comment_ctime":1621603619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621603619","product_id":100035801,"comment_content":"有两个疑问：<br>1. 消息队列发生故障或者是到消息队列的网络断开，这种情况要怎么处理？重要数据不方便直接丢弃，缓存起来可能对存储压力比较大<br>2.使用乐观锁实现业务层的幂等时，会不会出现version=2在version=1之前执行，但version还未更新到2，请求需要丢失？还是重试？","like_count":0},{"had_liked":false,"id":290448,"user_name":"阿达西","can_delete":false,"product_type":"c1","uid":2586307,"ip_address":"","ucode":"555E4DC070A13C","user_header":"https://static001.geekbang.org/account/avatar/00/27/76/c3/b3dad8ea.jpg","comment_is_top":false,"comment_ctime":1619571398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619571398","product_id":100035801,"comment_content":"有一个问题请问下：<br>使用乐观锁在保证消费端的幂等时，还是以账户加钱为例<br>1：在生产消息的时候查询这个账户的版本号，并且将版本号一同发送给消息队列<br>2：步骤1的消息队列还未消费，又来了同一个账户的不同金额的加钱请求，此时获取相同的版本号，并一同发送给消息队列<br>3：从消息队列获取的时候，第一条sql加钱成功，之后版本号改变，第二个消息队列由于版本号对不上永远不能加钱。<br>这种情况怎么处理呢？","like_count":0},{"had_liked":false,"id":286193,"user_name":"deepz","can_delete":false,"product_type":"c1","uid":1570088,"ip_address":"","ucode":"4BD23A44CDB384","user_header":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","comment_is_top":false,"comment_ctime":1617182959,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617182959","product_id":100035801,"comment_content":"业务层面加乐观锁的方式，还需要保证消息的顺序性吧，如果乱序了就行不通了。？","like_count":0},{"had_liked":false,"id":242240,"user_name":"freedom","can_delete":false,"product_type":"c1","uid":1055577,"ip_address":"","ucode":"073F6EF58C0F26","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/59/6eb40da0.jpg","comment_is_top":false,"comment_ctime":1597645376,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597645376","product_id":100035801,"comment_content":"乐观锁机制，会不会有问题呢？<br>1.A查询的版本号为1<br>2.B查询的版本号也为1<br>3.A和B都给某一个用户打钱<br>是不是有一个就执行失败了呢？？","like_count":0,"discussions":[{"author":{"id":1024994,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/e2/5cb4f43f.jpg","nickname":"laolinshi","note":"","ucode":"269B879389D7D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554655,"discussion_content":"肯定要让一个请求失败的，不然会发生转出去的钱比用户的余额还多，银行就亏大了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646537563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233928,"user_name":"Cy","can_delete":false,"product_type":"c1","uid":2044654,"ip_address":"","ucode":"BE4D5D060B836D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/32/ee/836c9c1a.jpg","comment_is_top":false,"comment_ctime":1594521609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594521609","product_id":100035801,"comment_content":"讲的好好！谢谢老师！","like_count":0},{"had_liked":false,"id":219630,"user_name":"强","can_delete":false,"product_type":"c1","uid":1035643,"ip_address":"","ucode":"D0A761E25B0740","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/7b/31a6bf42.jpg","comment_is_top":false,"comment_ctime":1590053559,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1590053559","product_id":100035801,"comment_content":"老师，状态机算不算一种解决方案。只知道有状态机这么个东西，但是不明白他是怎么实现的，求解答","like_count":0,"discussions":[{"author":{"id":1755152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","nickname":"Info_E","note":"","ucode":"97207B2CC4C776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357514,"discussion_content":"把version 换成 status 就是状态机了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615815998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203681,"user_name":"小小程序猿","can_delete":false,"product_type":"c1","uid":1259854,"ip_address":"","ucode":"DCE81131B24285","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/4e/f937748b.jpg","comment_is_top":false,"comment_ctime":1586254247,"is_pvip":false,"replies":[{"id":"78098","content":"一般消息队列会支持堆积，如果堆积太多，可能会写入失败，也可能会挂，看你用的什么队列","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1587473453,"ip_address":"","comment_id":203681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586254247","product_id":100035801,"comment_content":"消息队列会满吗？满了怎么办","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490931,"discussion_content":"一般消息队列会支持堆积，如果堆积太多，可能会写入失败，也可能会挂，看你用的什么队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587473453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175627,"user_name":"于勃-Robert","can_delete":false,"product_type":"c1","uid":1006744,"ip_address":"","ucode":"30115513822CC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/98/4d486531.jpg","comment_is_top":false,"comment_ctime":1580785781,"is_pvip":false,"replies":[{"id":"68351","content":"正常情况version不应该相同","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1580872445,"ip_address":"","comment_id":175627,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1580785781","product_id":100035801,"comment_content":"版本号在消息生产者生成，两次amount，取出来的version是同样的；会导致消费者第二次失败","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482831,"discussion_content":"正常情况version不应该相同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580872445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1462012,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eofTpcAXJx8LQ2XMgvYr0YeapbS8PEQCCVJcOrIXyfuQVMEpicE8GtMV8FXU16IS8wgosIU6rrWtqQ/132","nickname":"Geek_266655","note":"","ucode":"FD924BCD434B36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165699,"discussion_content":"vesion相同的概率还是挺高的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581314870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165702,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1577285226,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577285226","product_id":100035801,"comment_content":"老师，为保证消息不丢失，你给的建议是使用集群，而不是同步刷盘，并提到这样对写性能影响小。我有个疑问：同步集群是网络IO，刷盘是磁盘IO，难道网络IO比磁盘IO快吗？","like_count":0,"discussions":[{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167316,"discussion_content":"别处老师的回答：网络IO比磁盘IO","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581477292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160156,"user_name":"面向加薪学习","can_delete":false,"product_type":"c1","uid":1108117,"ip_address":"","ucode":"5164A1DF058AC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/95/13b88119.jpg","comment_is_top":false,"comment_ctime":1575882017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575882017","product_id":100035801,"comment_content":"比方说，消息生产时由于消息队列处理慢或者网络的抖动，导致虽然最终写入消息队列成功，但在生产端却超时了<br><br>请教老师，这个地方，如果超时了，生产者还会把消息传递到消费队列，然后造成消息重复嘛？","like_count":0},{"had_liked":false,"id":154415,"user_name":"ajlidue","can_delete":false,"product_type":"c1","uid":1308376,"ip_address":"","ucode":"D6B29E941958E8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6NXib2NGaTAAEe2KCcibH2FiafOOD73kQdcuAMGrnRib5CDWXum0SWDOM9NnWicbUsDpghmxEmJtpk9w/132","comment_is_top":false,"comment_ctime":1574425040,"is_pvip":false,"replies":[{"id":"59483","content":"是从ISR中选出一个follower作为新的leader","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1574642558,"ip_address":"","comment_id":154415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574425040","product_id":100035801,"comment_content":"【当 Leader 故障时，新选举出来的 Leader 会从 ISR 中选择，默认 Leader 的数据会异步地复制给 Follower，这样在 Leader 发生掉电或者宕机时，Kafka 会从 Follower 中消费消息】这里不太明白。当leader宕掉之后，kafka从follower中消费消息，这个follower是包括ISR的吗？那么是从哪个follower中消费呢？还是从选举成新leader的follower中消费呢","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475462,"discussion_content":"是从ISR中选出一个follower作为新的leader","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574642558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152411,"user_name":"微凉","can_delete":false,"product_type":"c1","uid":1178156,"ip_address":"","ucode":"F6BD0AE11AE224","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","comment_is_top":false,"comment_ctime":1573993424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573993424","product_id":100035801,"comment_content":"其实防止重复信息生产和消费，只需要围绕幂等性做文章就可以了。","like_count":0},{"had_liked":false,"id":151425,"user_name":"夏风","can_delete":false,"product_type":"c1","uid":1496195,"ip_address":"","ucode":"EEF37E75FBBA8A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrgpv3Kia5Iw2kmg2rV4PSReiaic8d0Dj93XPlJaNpPRPC2xAIS22PQerSxb0cgjChSGAEOyX4tJBCQ/132","comment_is_top":false,"comment_ctime":1573717365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573717365","product_id":100035801,"comment_content":"目前我们遇到的消息重复的场景都是在时间很近的范围内，消费端在消费消息时会针对同一业务场景，比如“消费接受支付成功的消息”，会针对订单号增加分布式锁，来保证秒级别内不会有重复消息。针对一些比较敏感的数据，也会去数据库滤重。","like_count":0},{"had_liked":false,"id":150593,"user_name":"天机老人","can_delete":false,"product_type":"c1","uid":1307793,"ip_address":"","ucode":"B553FBBF9DD41B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5WaRd8ibAozKXvIGWXKDq1CdxLhkdnRyyTKcgMDYaFDAaKqg2IpETOC3RacYoggGOhFMeMGicRXxA/132","comment_is_top":false,"comment_ctime":1573565022,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1573565022","product_id":100035801,"comment_content":"增加版本号那个方案好像有点问题，当并发生产消息时，拿到的版本号是一样的，在真正消费时，由于有版本号的过滤，第一条能执行成功，后面都会失败！！！","like_count":0,"discussions":[{"author":{"id":1274495,"avatar":"https://static001.geekbang.org/account/avatar/00/13/72/7f/5da093c5.jpg","nickname":"水目沾","note":"","ucode":"FDD1D15C277D58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49486,"discussion_content":"那不正好达到幂等性的目的了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573605571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1307793,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5WaRd8ibAozKXvIGWXKDq1CdxLhkdnRyyTKcgMDYaFDAaKqg2IpETOC3RacYoggGOhFMeMGicRXxA/132","nickname":"天机老人","note":"","ucode":"B553FBBF9DD41B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274495,"avatar":"https://static001.geekbang.org/account/avatar/00/13/72/7f/5da093c5.jpg","nickname":"水目沾","note":"","ucode":"FDD1D15C277D58","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61862,"discussion_content":"版本号一样，消息内容不一样，怎么能是幂等呢？结果是丢消息了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574784299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49486,"ip_address":""},"score":61862,"extra":""},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1307793,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5WaRd8ibAozKXvIGWXKDq1CdxLhkdnRyyTKcgMDYaFDAaKqg2IpETOC3RacYoggGOhFMeMGicRXxA/132","nickname":"天机老人","note":"","ucode":"B553FBBF9DD41B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102476,"discussion_content":"由于乐观锁而导致的失败，是正常的。请重新查询，拿到新的版本号再试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577349129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":61862,"ip_address":""},"score":102476,"extra":""}]}]},{"had_liked":false,"id":150044,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1573452352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573452352","product_id":100035801,"comment_content":"李玥老師消息對列課程裡專門有一顆講冪等的","like_count":0},{"had_liked":false,"id":149632,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1573294589,"is_pvip":false,"replies":[{"id":"57663","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573432803,"ip_address":"","comment_id":149632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573294589","product_id":100035801,"comment_content":"它的做法是给每一个生产者一个唯一的 ID，并且为生产的每一条消息赋予一个唯一 ID，消息队列的服务端会存储 &lt; 生产者 ID，最后一条消息 ID&gt; 的映射。当某一个生产者产生新的消息时，消息队列服务端会比对消息 ID 是否与存储的最后一条 ID 一致，如果一致，就认为是重复的消息，服务端会自动丢弃。<br>……………………<br>每一条消息的id应该是生产者生成的吧？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473919,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573432803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149062,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1573133881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573133881","product_id":100035801,"comment_content":"这个幂等性解释太合适了、😄","like_count":0},{"had_liked":false,"id":148781,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1573086792,"is_pvip":false,"replies":[{"id":"57334","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573170196,"ip_address":"","comment_id":148781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573086792","product_id":100035801,"comment_content":"Kafka的顺序io，是不是针对pagecache将批量日志一起刷盘时候，只需要一次随机io寻找磁盘位置，后续多条日志可以批量顺序写入？所以顺序io的第一条也需要随机io？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473609,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573170196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148778,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1573086660,"is_pvip":false,"replies":[{"id":"57333","content":"是的 不过Kafka是顺序写入日志，也是顺序io","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573170180,"ip_address":"","comment_id":148778,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573086660","product_id":100035801,"comment_content":"Kafka的顺序io，是否是针对pagecache","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473606,"discussion_content":"是的 不过Kafka是顺序写入日志，也是顺序io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573170180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146514,"user_name":"jiangjing","can_delete":false,"product_type":"c1","uid":1295268,"ip_address":"","ucode":"D45001E5FB4D6F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibcRNslcyp7dwIR3TIwvloCibMd7Ew2TB3MU0wISFXEolyuHRtfIriagm6PMX5zQHicmc78BrBcxA6vQ5qnTPCev9A/132","comment_is_top":false,"comment_ctime":1572566393,"is_pvip":false,"replies":[{"id":"56856","content":"😎","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572835615,"ip_address":"","comment_id":146514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572566393","product_id":100035801,"comment_content":"生活老司机","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472895,"discussion_content":"😎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572835615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146481,"user_name":"罗力友","can_delete":false,"product_type":"c1","uid":1269780,"ip_address":"","ucode":"6B10A00221B25A","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/14/6cb28332.jpg","comment_is_top":false,"comment_ctime":1572534111,"is_pvip":false,"replies":[{"id":"56577","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572565769,"ip_address":"","comment_id":146481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572534111","product_id":100035801,"comment_content":"老师，我可不可以认为生产端产生的消息重复，都是因为生产端重复发送同一个消息？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472878,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572565769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146085,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1572429621,"is_pvip":false,"replies":[{"id":"56425","content":"丢失有另外的解决方式，这里是保证数据幂等，也就是不重复","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572478567,"ip_address":"","comment_id":146085,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572429621","product_id":100035801,"comment_content":"打卡。跟@饭团 同学一样的疑问：在产生消息的时候就带上版本号，消费入库的时候，只是能保证一同处理的时候不会更新错，但是总有数据会丢，不能达到最终累加的结果。","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472706,"discussion_content":"丢失有另外的解决方式，这里是保证数据幂等，也就是不重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572478567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1465986,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","nickname":"longslee","note":"","ucode":"C24E32E5B1B6F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41850,"discussion_content":"哦我说的丢失，是丢失更新的意思，不是丢失message哈。那么只能重试，这个重试也不是broker的重试，是业务要重新生成一条新message，并且version重新查询。可是消费者还要通过某种方式通知生产者？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572522674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146036,"user_name":"良记","can_delete":false,"product_type":"c1","uid":1033503,"ip_address":"","ucode":"F78CC56BB32D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/1f/485fcff9.jpg","comment_is_top":false,"comment_ctime":1572422424,"is_pvip":true,"replies":[{"id":"56427","content":"是的，在发送之前生成ID<br>错误我再和小编校对一下，感谢指正：）","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572478701,"ip_address":"","comment_id":146036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572422424","product_id":100035801,"comment_content":"有一个地方不太明白，在Kafka的例子中，有这么一句<br>“当某一个生产者产生新的消息时，消息队列服务端会比对消息 ID 是否与存储的最后一条 ID 一致，如果一致，就认为是重复的消息，服务端会自动丢弃。”<br>说的是代码调用队列之前就生成了ID是吧？然后重复发送都是使用相同的ID吗？<br>PS：有个地方的Kafka打错了😂<br>","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472682,"discussion_content":"是的，在发送之前生成ID\n错误我再和小编校对一下，感谢指正：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572478701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145924,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1572402908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572402908","product_id":100035801,"comment_content":"这个全局唯一ID还是有问题，高并发下有数据写入的有性能瓶颈，感觉不是很优的方案，看评论区使用 Redis 保存可行","like_count":0},{"had_liked":false,"id":145861,"user_name":"饭团","can_delete":false,"product_type":"c1","uid":1332557,"ip_address":"","ucode":"E24F240CC91BE8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","comment_is_top":false,"comment_ctime":1572396711,"is_pvip":false,"replies":[{"id":"56430","content":"这两条修改的消息是异常重复的消息吗？如果是的话，有一条不能消费是正常的<br><br>如果是并发引起的，那么就是同一时间只有一个请求可以更改数据，另一个并发请求重试就好了<br><br>乐观锁在实际中应用还是挺多的，比如memcached提供cas也算是一种乐观锁","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479014,"ip_address":"","comment_id":145861,"utype":1}],"discussion_count":9,"race_medal":0,"score":"1572396711","product_id":100035801,"comment_content":"老师，问您一个问题！在现实开发中，乐观锁在分布式开发中用的多吗？我感觉可能会有一些问题！<br>比如，数据库数据版本都是1. 这个时候产生了2条对该数据的修改的消息！这样的话就必然有一条消息不能正常消费！碰到这种问题很容易出现脏数据！","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472604,"discussion_content":"这两条修改的消息是异常重复的消息吗？如果是的话，有一条不能消费是正常的\n\n如果是并发引起的，那么就是同一时间只有一个请求可以更改数据，另一个并发请求重试就好了\n\n乐观锁在实际中应用还是挺多的，比如memcached提供cas也算是一种乐观锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41606,"discussion_content":"嗯，老师！如果是并发数据的话就必然需要重试！那么这个时候使用消息队列就不太好处理了，是吧！因为需要生产者重试！而消息队列一个重要的使用场景就是解偶！而如果需要重试的话生产者还需要对消息的消费情况进行监控！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41340,"discussion_content":"你怕是对乐观锁有点误解啊，乐观锁+版本号的方式就是为了能够拿到数据库中当前数据的一致性视图，很好的规避了aba的问题 不会产生脏数据的 如果数据更新成功产生了脏数据，说明你乐观锁机制逻辑就没生效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572401936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41341,"discussion_content":"对。是的，我也感觉我是不是理解的有问题！所以想问问！比如，开始版本号是1，数据是1！这个时候有以下操作！\n消息a把数据改成2，携带版本号1！修改成功！版本号变为2！\n消息b在消息a的同时把数据改成3，携带版本号1！这个时候数据肯定修改不了了！那数据就写不成3了！这种情况，是不是就不能用乐观锁了！是吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572402408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41340,"ip_address":""},"score":41341,"extra":""},{"author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41347,"discussion_content":"消息a把数据改成2，携带版本号1！修改成功！版本号变为2！\n消息b在消息a的同时把数据改成3，携带版本号1！这个时候数据肯定修改不了了！那数据就写不成3了 到这一部分你的理解没问题\n\n后面的这句 是不是就不能用乐观锁了 不是很懂你的意思\n\n按照你的描述来说，修改成3的这个操作写入是执行不了的，因为你的乐观锁的机制已经生效了，数据没有变成脏数据，业务逻辑没问题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572403705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41341,"ip_address":""},"score":41347,"extra":""},{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41351,"discussion_content":"嗯嗯，就是我的意思是我其实是想让他变成3！但是他变不了了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572404581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41347,"ip_address":""},"score":41351,"extra":""}]},{"author":{"id":1061320,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/c8/a64e4aef.jpg","nickname":"兔斯基","note":"","ucode":"146A5FE2D8B301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41320,"discussion_content":"乐观锁也是分情况，你说的这种肯定要进行失败重试，或者失败升级悲观锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572398867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1332557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","nickname":"饭团","note":"","ucode":"E24F240CC91BE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1061320,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/c8/a64e4aef.jpg","nickname":"兔斯基","note":"","ucode":"146A5FE2D8B301","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41323,"discussion_content":"重试就麻烦了！因为消息是生产者生产的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572399020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41320,"ip_address":""},"score":41323,"extra":""}]}]},{"had_liked":false,"id":145839,"user_name":"刘冲","can_delete":false,"product_type":"c1","uid":1000439,"ip_address":"","ucode":"0C4F66921AE76C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f7/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1572393832,"is_pvip":false,"replies":[{"id":"56431","content":"可以用发号器生成","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1572479027,"ip_address":"","comment_id":145839,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1572393832","product_id":100035801,"comment_content":"全局发号器的id 怎么生成呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472594,"discussion_content":"可以用发号器生成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572479027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152898,"avatar":"https://static001.geekbang.org/account/avatar/00/11/97/82/394c88ad.jpg","nickname":"西红柿牛腩","note":"","ucode":"DEC94B4A647A92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41516,"discussion_content":"10 | 发号器：如何保证分库分表后ID的全局唯一性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572444111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41421,"discussion_content":"snowflake算法了解下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572423022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643469,"avatar":"","nickname":"Loony","note":"","ucode":"7A964196C03D77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41395,"discussion_content":"推荐雪花","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572419141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","nickname":"jc9090kkk","note":"","ucode":"6C992D07A2E78F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41336,"discussion_content":"redis就能做啊 设置一个key 定一个初始值 不舍过期时间 自增就行了 如果为了保证发号器比较高的可用性 借助外部的持久化机制 避免单点就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572401558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}