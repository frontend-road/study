{"id":407250,"title":"19｜如何将模型实现为微服务？","content":"<p>你好，我是徐昊。今天我们来聊聊如何将8X Flow模型映射为微服务。</p><p>经过14-16节的学习，我们已经可以使用合同上下文、履约上下文和领域上下文对业务进行建模了。那么当我们希望在云平台上将业务模型实现为软件系统时，就需要将合同上下文、履约上下文和领域上下文作为系统天然的边界，并将它们放置到不同的弹性边界中，从而在满足业务扩展与需求变化的前提下，尽可能地降低成本。</p><p>有了弹性边界，我们自然很容易地想到可以将不同弹性边界内的内容，实现成微服务架构风格（Microservices）。那么今天我们就来讲一讲，如何将8X Flow的模型实现为微服务架构风格。</p><h2>微服务还是伪微服务？</h2><p>在开始讨论这个问题之前，我们首先要重申一下<strong>什么是微服务</strong>。关于微服务，现在有诸多迷思，以及很多看起来像是微服务，但实则南辕北辙的伪微服务风格。</p><p>在James Lewis和Martin Fowler的名作<a href=\"https://www.martinfowler.com/articles/microservices.html\">《微服务》</a>中，将微服务定义为一种架构风格，并总结了它的九种特质：</p><ol>\n<li>通过服务实现组件化；</li>\n<li><strong>服务按照业务能力划分组织；</strong></li>\n<li>服务以产品而不是项目研发；</li>\n<li>逻辑集中在服务中，编排简单；</li>\n<li>每个服务自主决策（技术栈、语言等等）；</li>\n<li>每个服务自主管理数据（不强制使用统一数据源）；</li>\n<li>基础设施自动化；</li>\n<li>将服务失败当作常态纳入设计考量；</li>\n<li>演进式设计（不求一步到位）。</li>\n</ol><!-- [[[read_end]]] --><p>具体的内容可以参考James和Martin的文章，其中有三个特别关键的点，我需要专门提出来说一说。正是对于这三点理解的偏差，从而形成了三种典型的伪微服务风格。</p><p>第一点是服务按照业务能力划分组织。这个架构特性说的是，微服务中的服务应该以业务能力（Business Capability）为粒度。其实这也间接回答了“微服务到底多微合适”这个问题：既不是单纯的技术能力（比如查询、获取系统时间），也不是完整的应用（Application），而是用以支撑构建应用的业务能力。</p><p>所以微服务的“微”是个相对概念，而不是绝对概念。也就是说，与单体应用（Monolithic Application）相比，微服务是微小的。这就好比说，对比银河系，太阳连尘埃都不如。但是太阳就很小吗？并不是吧。</p><p>说句题外话。在我看来，软件行业中存在一个神秘的“恰当粒度”（Appropriate Size）。比如很多年以前，当我们使用用例（Use Case）捕捉用户需求的时候，出现过这样的争论：到底用什么样的粒度去捕捉用例最合适？而转换到用户故事（User Story）之后，它直接把“粒度恰当”（Size Appropriated）当作特性之一了。技术上也是一样，但凡出现分布式架构，每一个分布式组件多大，永远是讨论的焦点。SOA（Service Oriented Architecture）基本上就是被这个争论给搅黄的。现在热门话题不又是“微服务到底应该多微”吗？</p><p>对于用例的恰当粒度，Alistair Cockburn在《编写有效用例》（Writing Effective Use Case）一书中给出了最佳实践。他将业务和技术比喻为天空与大海。天空中有云彩（宏观目标）、风筝（目标），大海里有鱼（功能点）和扇贝（实现细节）。而恰当的粒度恰好在天空与大海的交汇处：用户目标。它既有业务上的含义，也有技术上的支撑。</p><p>到了用户故事就更明显了，它必须包含用户价值与实现价值的行为，也就是说，用户故事必须在业务和实现上都具有指导意义才行。而对于SOA，最佳实践是能力建模（Capability Modeling），以业务能力为粒度进行SOA的服务构建。从某种意义上说，微服务这个词被发明出来，本意就是为了将使用能力建模的SOA（当然还有利用RESTful API而不是复杂的WS-*）与其他SOA风格分离。</p><p>你会发现，通常所说的“恰当粒度”是在业务与实现两个维度上平衡的结果。并不会存在“只从单一维度入手，越怎么样就越好”这么简单粗暴的结论。所以微服务并不是越小越好，当小到不能表示业务能力，就不再是微服务了。</p><p><strong>如果不顾及服务是否按照业务能力划分组织，就是一种典型的伪微服务模式，我称之为分布式服务（Distributed Services）。</strong>要注意，分布式服务并不是反模式，它有其特有的用处，只不过它并不是微服务而已。也可以这么理解，微服务算是分布式服务的一种特例。与其他分布式服务相比，微服务特有的优势，大半都源自按照业务能力划分组织服务。</p><p>对于微服务，我要说的第二点是，以产品而不是项目研发。产品和项目的差异体现在团队结构和生命周期上。</p><p>从团队结构上来讲，产品团队包含产品研发和产品运营。在产品生命周期内，产品团队负责产品的一切。而项目团队的职能通常会更简单一些，不包含运营和运维部分。快速说一句题外话，DevOps是需要产品团队才能实现真正的研发自运维。</p><p>从生命周期上讲，产品的生命周期分为初始、稳定、支持和结束生命这么几个阶段。那么产品的不同版本，可能处在不同的生命周期中。比如我们熟知的Windows操作系统，在Windows 8发布之后，Windows XP依旧有官方的延期支持。</p><p>所以产品团队也可能需要在同一时间内，支持多个处在不同生命周期的产品版本。比如1.0是支持阶段，1.5是稳定阶段，2.0是初始阶段，等等。而项目通常假设只有唯一的产物，随着项目生命周期的进展，项目化服务一直在改变。</p><p><strong>那么产品化服务的生命周期，实际上相当于承诺在产品生命周期内，服务是不变的</strong>。也就是说，只要1.0不结束生命，那么我们就可以一直使用它。哪怕你发布了1.5、2.0、3.0，只要1.0能满足我的需要，并且还在生命周期内，那么作为消费者，我可以无视你的后续版本。<strong>那么对于产品化服务的耦合，在产品的生命周期内可以看作是稳定的，</strong>并且可由消费方选择是否升级。</p><p>但项目化服务通常做不到这一点。项目化服务通常都只有唯一的产品，当服务出现新版本后，之前的版本就默认消失了，对应的消费者也都会受到波及。这就带来了服务间紧密的耦合和修改的传播。</p><p>因而微服务需要服务间不仅在接口上松耦合，还要在生命周期上松耦合。也就是微服务可以自主发布，其他服务不应受到影响。产品化是实现这一点的根本途径。<strong>如果服务缺乏产品化生命周期，那就是另一个典型的伪微服务模式，我称之为微工作组（Microstreams）。</strong>这个模式会产生一组在生命周期上紧密耦合的服务，从而完全丧失微服务的意义。而且随着服务数量变多，这种生命周期的耦合还会带来难以承受的沟通成本。</p><p>说句题外话，判断是不是微工作组，有两个特别简单的办法：</p><ol>\n<li>你可以去看看每个服务团队之间的会议有多少。真正的微服务团队，很少与其他团队沟通（都在契约里）；</li>\n<li>你可以去听听团队里会有多少次用到“集成”或者“整合（integration）”这个词。用得越多，就越是微工作组。</li>\n</ol><p>对于微服务，我要说的最后一点是，逻辑集中在服务中，编排简单。逻辑越在服务中集中，所需要的编排就越简单，通常通过RESTful API或者轻量的消息机制即可完成。而如果服务中的逻辑简单，那么就会有大量的逻辑泄露到编排逻辑中去，此时就需要使用复杂的编排工具辅助我们的工作，比如企业服务总线（Enterprise Service Bus，ESB）。</p><p>选择编排复杂的逻辑，听起来很有道理：既然我们希望在不同场景下复用服务，那么总有一些需要改变的订制代码，我们需要将它们与服务本身分离。分离之后，就能通过编排引擎，帮助我们在不同的场景下重用这些服务了。</p><p>然而你会发现，按照这个逻辑走下去，<strong>服务往往会变成对于数据的CRUD，然后大量的逻辑存在于编排引擎中，这也是典型的伪微服务模式，我称之为傻服务（Dumb Service）。</strong>当服务没有封装业务能力，而架构师又对复用充满雄心的时候，经常会出现傻服务。这不光服务傻，人也不太机灵。</p><p>除了上面三种典型的伪微服务之外，最近还流行起了一种伪微服务架构风格，被称作<strong>分布式单体</strong>（Distributed Monolith）。正如微服务本身一样，我们很难给出分布式单体的确切定义，但是可以描述它的特质。</p><p>分布式单体也是通过一组分布式服务构建的应用，但是却具有单体应用的特质：修改其中某个服务，会引发修改很多其他服务；无法有效地水平扩展。</p><p>微服务的核心思路就在于将业务能力封装成独立的松耦合的服务。通过这样一组服务，构建企业内的能力生态系统。除了能满足当前应用的需要之外，也为未来可能的新应用提供了坚实的基础。</p><p>而分布式单体虽然是分布的，但在逻辑上仍然是一个单体应用。这一组分布式服务的首要目的是高效地服务于所构建的应用。这种观念上的差别（虽然可能不是主观故意的），也造成了我们对技术的不同评价和偏好。比如“用RPC还是RESTful API来设计服务的API”，就能分辨出你是不是真的在做微服务。</p><h2>使用RESTful API描述微服务API</h2><p>通过前面的讲解，我们可以发现微服务架构风格与分布式服务、分布式单体架构的关键区别在于三点：</p><ol>\n<li>服务封装业务能力，以服务构成企业内生态；</li>\n<li>以产品的角度管理版本和集成策略；</li>\n<li>服务富含逻辑，编排简单。</li>\n</ol><p>其实理解了这三点关键差异，很多关于微服务的问题自然也就迎刃而解了。什么样的粒度是合适的？服务之间存在耦合怎么办？我需要多复杂的编排工具？前台的逻辑传递到服务要怎么处理？这些问题只要变成：微服务会怎么做？分布式服务会怎么做？分布式单体会怎么做？然后互加比较，自然就知道应该选择什么方案了。</p><p>接下来的问题更偏技术性一些，对于每个服务我们要如何设计它的API？虽然有一些新的思潮涌现，但我个人认为，<strong>以目前而言，分布式超媒体仍然是微服务API的最佳方式。也就是说，RESTful API仍然是微服务API的最佳选择。</strong>主要有这么三点原因。</p><p>首先，我们需要将微服务构成的企业内生态看做一个整体。套用我前同事Ian Robinson的名言_Be the web , not behind the web_（成为互联网，而不是躲在互联网之后）。也就是说，我们应该将企业能力构造成一个web，而不是仅仅将web作为对外暴露服务的接口。</p><p>那么怎么才能描述这构成企业内生态的一组服务呢？自然是<strong>分布式超媒体</strong>。也就是通过超链接表示服务与服务之间的关系，指导客户端完成它对其他服务的调用。比如我们可以通过这样的超媒体描述，来表示完成支付的不同方式：</p><pre><code>&lt;article&gt;\n    &lt;title&gt;订单详情&lt;/title&gt;\n    &lt;p&gt;....&lt;/p&gt;\n    &lt;link href=&quot;http://payment.com/12358921&quot; rel=&quot;online-payment&quot;/&gt;    \n    &lt;link href=&quot;http://enterprise.com/12358921&quot; rel=&quot;enterprise-payment&quot;/&gt;\nclient&quot;/&gt;\n&lt;/article&gt;\n</code></pre><p>在这段超媒体描述中，我们指明了可以用于完成订单支付的两种方式，一种是在线直接支付，一种是使用企业支付。</p><p>这里我们会发现一个有意思的情况，就是<strong>如果以分布式超媒体方式去描述服务间的关联，那么其实我们不太在意它到底是单体应用还是微服务结构</strong>。<strong>所以一旦把眼光放到，通过服务构成企业内生态，并使用分布式超媒体去描述这个类似于web的生态系统时，会发现微服务不过是实现上的细枝末节。</strong></p><p>当我们明确了自己真正要解决的问题，那么就需要让服务可以融入到分布式超媒体中。所以RESTful API仍是目前将服务融入分布式超媒体的最佳方式。</p><p>第二，URI在表示服务编排的时候，仍然可以保持模型之间的关系。除了通过超链接，将关联的服务与资源联系在一起之外，URI也可以用于表示服务之间的编排。这是因为符合RESTful风格的资源URI可以看做是函数调用。比如，如下的URI和代码是等价的：</p><pre><code>GET /users/1/subscriptions\n\n(subscriptions (users 1)) //LISP 函数风格\n\ngetSubscriptions(getUsers(1)) // Java\n</code></pre><p>我们可以将这个URI看做是对Users和Subscriptions这两个服务的编排。那么按照对照函数式编程，不同的求值策略（比如惰性求值）也就变成了对于服务不同的编排策略。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/7a/8f0f20aba4d191fac8e71c0aa5939c7a.jpg?wh=1920x1080\" alt=\"\"></p><p>对于同样的URI，在不同的场景下，最合适的编排策略可能并不相同。但是URI帮我们封装了这些细节。</p><p>也就是说，我们通过<code>/users/{uid}/subscriptions</code>引用了Users和Subscriptions服务的编排。无论编排方式怎么改变，只要URI仍是<code>/users/{uid}/subscriptions</code>，那么对于消费方来说，就没有影响。而妙就妙在<code>/users/{uid}/subscriptions</code>是从模型而来的，因而是稳定的。这一点是其他RPC风格微服务API所不具备的。</p><p>说句题外话，URI可以看作求值，是我在我司技术委员会上做的一个闪电演讲的主题。当时听众里有Martin Fowler、Neal Ford、Scott Shaw、Rebecca Parsons等人，他们都是函数式编程的狂热信徒，于是我就讲了函数化URI、Continuation与服务编排等话题。Rebecca和Martin说这个话题在我所有的闪电演讲里可以排进前三（截止到2017年）。有兴趣的同学可自行推导，反正讲之前我只想了20分钟。</p><p>第三，RESTful API也可以表示异步。这是一个对于RESTful API常见的误解，就是RESTful API都是同步的。那么如果需要异步调用服务，就无法使用RESTful API了。</p><p>然而在HTTP的状态码中，有一个专门为异步设计的202，表示请求已接受，然后我们只需要在header中指明对应的URI，或者设计成特定的返回结构，就能支撑异步结构了。</p><p>比如，你想创建一个新的用户，那么API可以返回202表示请求已接受，然后返回对应的创建任务，供你查询创建进度：</p><pre><code>POST /users\n\nHTTP Status 202 \n\n{\n  &quot;task&quot;: {\n    &quot;href&quot; : &quot;/user-tasks/12345&quot;\n  }\n}\n</code></pre><p>因为之前讲过的原因，我一般会使用分布式超媒体来描述整个服务生态，而将异步机制放置在分布式超媒体之后。也就是说，哪怕服务间完全以消息机制通讯，在API层面上，也仍然是以资源为主体的RESTful API。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/a3/2ae65261bb864c28c1348ebe8a3b6aa3.jpg?wh=1920x1080\" alt=\"\"></p><p>综合来看，如果RESTful API设计得合理，那么微服务只是在实现层面给予了更好的弹性调配空间；而如果API设计得不合理，那么就算把微服务玩出花也没什么用。我的建议一直都是：<strong>比起微服务，我们更应该关注如何通过分布式超媒体表示由服务构成的生态，更应该关注如何Be the web。</strong></p><h2>将8X Flow模型实现为微服务</h2><p>当我们捋顺了思路，那么将8X Flow得到的模型转化为微服务，就是水到渠成的事情了。让我们再看一下<a href=\"https://time.geekbang.org/column/article/404292\">第16讲</a>中得到的模型：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/0a/74d006c62b14631b847353df873b2b0a.jpg?wh=1920x1080\" alt=\"\"></p><p>首先，先不管微服务不微服务，以不同的合同上下文和领域上下文为URI的根，将其中模型映射为RESTful API（方法与<a href=\"https://time.geekbang.org/column/article/395650\">第10讲</a>、<a href=\"https://time.geekbang.org/column/article/396467\">第11讲</a>相同），并构造分布式超媒体表示这一组服务构成的生态系统。</p><p>接下来就要拆分不同的服务了。通过8X Flow建模，业务能力有三种表现模式，分别是：合同上下文表示的业务模式，履约上下文表示的业务能力，以及合同前上下文表示的合同签订流程。</p><p>理论上讲，每个不同履约项都可能具有不同的弹性边界，而以履约项为单位拆分成细小的服务，仍然可以表示业务能力。然而我会建议你，从合同上下文开始，先将不同的合同上下文作为服务边界，然后再看看是否需要将履约项拆分成独立的服务。</p><p>由于合同上下文与履约项通常会处在相同的URI根上，我们可以按照通过URI编排服务的方式，对它们进行编排。示意图如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/fc/1b/fc316b2e3a5e7995af57709e052a731b.jpg?wh=1920x1080\" alt=\"\"></p><p><strong>需要再次强调，你并不需要把每一个履约项拆分成独立的服务，这样不一定有什么好处</strong>。只有在履约项真的需要独立的弹性边界时，才需要这么做。至于其他两种业务上下文，比照合同上下文处理即可。</p><p>另外，对于每个领域上下文，我建议做成一个服务就行了。毕竟在面向对象设计中，弹性边界不是很容易切分。但是只要使用RESTful API，无论服务如何拆分，接口都是稳定的。</p><h2>小结</h2><p>今天我们先讨论了什么是微服务，什么是伪微服务。然后讨论了如何使用RESTful API通过分布式超媒体来描述由微服务构成的企业内生态。最后描述了怎么将8X Flow的模型转化为微服务。</p><p>你可能会发现，这篇有点文不对题，通篇5000多字，只有最后500字讲了怎么从8X Flow映射到微服务。</p><p>首先，在我看来，行业内做伪微服务的人多，而做真微服务的人少。很多问题不值得去解决，因为没有将问题定义清楚。而一旦明白什么是真微服务，大多问题都变得不言自明。</p><p>其次，如果对比微服务和如何使用RESTful API构建企业内生态，显然后者重要得多。微服务可能仅仅是我们通向后者的一种方式而已，我们需要更关注后者。</p><p>一旦明确了，我们要实现的是真的微服务，并且我们的目的是为了使用RESTful API，并通过分布式超媒体来描述企业内生态。那么“正确的微服务”的做法也就变得简单直接了。<strong>所以我在这门课快要结束的时候，给你一个例子，看看怎么样通过定义问题，来简化解决方案。</strong></p><h2>思考题</h2><p>请你思考一下，除了组织结构之外，产品化的服务会给我们带来哪些挑战？</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/fe/2df5ce9bfc5ca31bb6c85bde31a26dfe.jpg?wh=1500x1798\" alt=\"\"></p><p>很期待你能把自己的思考和想法分享在留言区，我会和你交流。我们下节课再见！</p>","comments":[{"had_liked":false,"id":307291,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1629013853,"is_pvip":false,"replies":[{"id":"111271","content":"nice","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1629037162,"ip_address":"","comment_id":307291,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40283719517","product_id":100082101,"comment_content":"回答课后题：<br>产品化意味着要有打磨产品的意识，从以下角度展开yy。<br>1.从需求角度。做产品化就得去思考和挖掘产品背后的目标用户是谁，以及他的真实诉求是什么。想明白解决谁的什么问题，对自己的产品做合理的定位。拒绝平均化，不做满足一切的产品。（讲人话就是主动去定义自己的产品，发现支点找准边界）<br>2.从服务的角度。服务是产品重要的组成部分，产品化意味着我们也需要具备与之匹配的服务能力。比如，成立答疑小组，制定和监管答疑考评制度与指标。将经验变成流程，流程变成工具，沉淀知识库，让服务质量从依赖个人英雄转向依赖团队沉淀。<br>3.从运营角度。现在的软件服务相对以往有个很大的转变，从交付式产品(卖软件)向运营式产品转型。而运营式产品，交付只是开始，随后需要一天不停的成长直至死亡。这就需要我们的软件产品具备快速支持迭代的扩展性（1～10），我们的开发团队具备抽血重构的能力与魄力（10～1）。<br>4.从定价角度。一个产品怎么可以没有定价（哪怕你是内部产品也要有）。而且我们不仅要给产品设定价格，还要赋予它价格歧视的特性。以内部产品为例，任何需求不管是使用已有能力的调用还是需要新特性支持的迭代，都需要需求方证明能带来达标的价值(价格)才允许接入&#47;排期。对于核心系统与旁支系统，提供不同限流阀值（价格歧视，同等价格买到的量不同）。对于战略目标提供优先排期的特权（价格歧视，同等价格支持的优先级不一样）。","like_count":10,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525107,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629037162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b9/81/1680ec3f.jpg","nickname":"冯","note":"","ucode":"7369C8B1A50D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388956,"discussion_content":"一句话，从业务价值角度出发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629078271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307544,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1205777,"ip_address":"","ucode":"EB19F80070FE23","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/11/f7408e3e.jpg","comment_is_top":false,"comment_ctime":1629154054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10219088646","product_id":100082101,"comment_content":"行业内做伪微服务的人多，而做真微服务的人少。很多问题不值得去解决，因为没有将问题定义清楚。而一旦明白什么是真微服务，大多问题都变得不言自明。👍","like_count":2},{"had_liked":false,"id":307133,"user_name":"keep_curiosity","can_delete":false,"product_type":"c1","uid":1246273,"ip_address":"","ucode":"794DC1D3FB9214","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/41/082e2706.jpg","comment_is_top":false,"comment_ctime":1628902134,"is_pvip":false,"replies":[{"id":"111231","content":"因为会对版本并行 所以不太需要","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1628907765,"ip_address":"","comment_id":307133,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10218836726","product_id":100082101,"comment_content":"产品化要更多考虑不同版本之间的兼容性","like_count":2,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525055,"discussion_content":"因为会对版本并行 所以不太需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628907765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246273,"avatar":"https://static001.geekbang.org/account/avatar/00/13/04/41/082e2706.jpg","nickname":"keep_curiosity","note":"","ucode":"794DC1D3FB9214","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388839,"discussion_content":"数据也并行吗？那数据可以更具人来做隔离吧？用户升级切换版本之后数据也得跟着切换。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629009551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388842,"discussion_content":"我认为你的了理解没有错，就服务系统来说的话。  毕竟我们做升级时。首先不会新老版本单独部署集群，其次也不会要求所有调用方更换新老接口。所以通常的做法都是同个接口兼容老版本的逻辑以实现并行。这个兼容可能是功能增强，也可能是新老两条链路灰度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629011387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357693,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1663564038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663564038","product_id":100082101,"comment_content":"原来我一直在傻微服务里","like_count":0},{"had_liked":false,"id":352003,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1658321925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658321925","product_id":100082101,"comment_content":"微服务产品化后。如果前端应用需要某些特性，可能就需要这个服务的团队去做修改、发布后才能继续。这样增加了交付周期，降低团队敏捷性。","like_count":0},{"had_liked":false,"id":352002,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1658321577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658321577","product_id":100082101,"comment_content":"产品化的服务带来的挑战。需要服务保留旧版本特性，这样如果设计不合理重构的时候，可能需要保留很久旧逻辑，需要有一个逐步淘汰旧版本的机制。","like_count":0},{"had_liked":false,"id":343475,"user_name":"Halo","can_delete":false,"product_type":"c1","uid":1158603,"ip_address":"","ucode":"12CFC7DFF250AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/cb/3391d24c.jpg","comment_is_top":false,"comment_ctime":1650867955,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1650867955","product_id":100082101,"comment_content":"傻服务，不太明白。<br>我们是物流服务，对接不同的第三方物流供应商。<br>而我们正在做的就是把所有对接流程都标准化、数据化，然后通过编排来自动对接。<br>这种是傻服务吗？","like_count":0,"discussions":[{"author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578409,"discussion_content":"我理解傻服务就是逻辑都外泄到编排服务中，自己只剩下了对数据的CRUD","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656721230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337561,"user_name":"周建勇","can_delete":false,"product_type":"c1","uid":2419014,"ip_address":"","ucode":"F95F275BB5FDF6","user_header":"https://static001.geekbang.org/account/avatar/00/24/e9/46/a591e965.jpg","comment_is_top":false,"comment_ctime":1646894359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646894359","product_id":100082101,"comment_content":"通过本篇文章，我有个一个疑问想问一下老师：<br>微服务是以服务为边界，可以自行选择自己的语言，独立维护自己的数据源。有个问题，就是产品的需求当涉及到多个微服务团队来支撑产品实现的时候，什么样的方式能高效的完成一次次的需求评审和产品迭代呢？","like_count":0},{"had_liked":false,"id":336046,"user_name":"Steven","can_delete":false,"product_type":"c1","uid":1253652,"ip_address":"","ucode":"3FE64459842015","user_header":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","comment_is_top":false,"comment_ctime":1645866890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645866890","product_id":100082101,"comment_content":"傻服务（Dumb Service），在单体时代也经常出现","like_count":0},{"had_liked":false,"id":314227,"user_name":"马若飞","can_delete":false,"product_type":"c1","uid":1046394,"ip_address":"","ucode":"3D0327329A10AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/7a/55618020.jpg","comment_is_top":false,"comment_ctime":1632907269,"is_pvip":false,"replies":[{"id":"113837","content":"效率vs开放 rpc渐进消费不是太容易","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1632964168,"ip_address":"","comment_id":314227,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632907269","product_id":100082101,"comment_content":"服务间通信是否可以认为grpc之流的IDL比REST是更好选择？毕竟也跨语言且有一定性能优势。如果说不如REST的就是离be the web 远点","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527617,"discussion_content":"效率vs开放 rpc渐进消费不是太容易","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632964168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308140,"user_name":"Oops!","can_delete":false,"product_type":"c1","uid":1479474,"ip_address":"","ucode":"E2678CC12121A7","user_header":"https://static001.geekbang.org/account/avatar/00/16/93/32/e11fcd33.jpg","comment_is_top":false,"comment_ctime":1629426879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629426879","product_id":100082101,"comment_content":"本文字字珠玑，本专题最高能一篇👍","like_count":0},{"had_liked":false,"id":307849,"user_name":"xingtianbj","can_delete":false,"product_type":"c1","uid":1009911,"ip_address":"","ucode":"F57D9F347AD0FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/f7/44bee670.jpg","comment_is_top":false,"comment_ctime":1629280005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629280005","product_id":100082101,"comment_content":"业务能力如何理解和定义","like_count":0}]}