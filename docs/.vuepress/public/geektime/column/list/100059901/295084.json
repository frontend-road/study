{"id":295084,"title":"17 | 如何实现一个 WebAssembly 在线多媒体处理应用（三）？","content":"<p>你好，我是于航。</p><p>在上一节课中，我们已经完成了本次实践项目的其中一个核心部分，也就是由 JavaScript 实现的滤镜函数。并且还同时完成了整个 Web 应用与用户的 UI 交互控制部分、视频图像的渲染和绘制逻辑，以及帧率计算逻辑及显示逻辑。</p><p>在这节课里，我们将一起来完成整个应用的另外一个核心部分，同时也是整个实践的主角。让我们来看看，相较于 JavaScript 滤镜函数，由 Wasm 实现的同版本滤镜函数会带来怎样的性能提升呢？</p><h2>编写 C/C++ 函数源码</h2><p>首先，为了能够得到对应 Wasm 字节码格式的函数实现，我们需要首先准备由 C/C++ 等高级语言编写的源代码，然后再通过 Emscripten 将其编译到 Wasm 格式。这部分代码的主要逻辑，与上一篇中的 JavaScript 版本滤镜函数其实现逻辑基本相同。代码如下所示：</p><pre><code>// dip.cc\n// 引入必要的头文件；\n#include &lt;emscripten.h&gt;\n#include &lt;cmath&gt;\n// 宏常量定义，表示卷积核矩阵的高和宽；\n#define KH 3\n#define KW 3\n// 声明两个数组，分别用于存放卷积核数据与每一帧对应的像素点数据；\nchar kernel[KH][KW];\nunsigned char data[921600];\n// 将被导出的函数，放置在 extern &quot;C&quot; 中防止 Name Mangling；\nextern &quot;C&quot; {\n  // 获取卷积核数组的首地址；\n  EMSCRIPTEN_KEEPALIVE auto* cppGetkernelPtr() { return kernel; }\n  // 获取帧像素数组的首地址；\n  EMSCRIPTEN_KEEPALIVE auto* cppGetDataPtr() { return data; }\n  // 滤镜函数；\n  EMSCRIPTEN_KEEPALIVE void cppConvFilter(\n    int width, \n    int height,\n    int divisor) {\n    const int half = std::floor(KH / 2);\n    for (int y = half; y &lt; height - half; ++y) {\n      for (int x = half; x &lt; width - half; ++x) {\n        int px = (y * width + x) * 4;\n        int r = 0, g = 0, b = 0;\n        for (int cy = 0; cy &lt; KH; ++cy) {\n          for (int cx = 0; cx &lt; KW; ++cx) {\n            const int cpx = ((y + (cy - half)) * width + (x + (cx - half))) * 4;\n            r += data[cpx + 0] * kernel[cy][cx];\n            g += data[cpx + 1] * kernel[cy][cx];\n            b += data[cpx + 2] * kernel[cy][cx];\n          }\n        }                 \n        data[px + 0] = ((r / divisor) &gt; 255) ? 255 : ((r / divisor) &lt; 0) ? 0 : r / divisor;\n        data[px + 1] = ((g / divisor) &gt; 255) ? 255 : ((g / divisor) &lt; 0) ? 0 : g / divisor;\n        data[px + 2] = ((b / divisor) &gt; 255) ? 255 : ((b / divisor) &lt; 0) ? 0 : b / divisor;\n      }\n    }\n  }\n}\n</code></pre><p>在这段代码中，我们将定义的所有函数均以 “cpp” 作为其前缀来命名，表明这个函数的实际定义来自于对应的 C/C++ 代码实现。其中，“cppConvFilter” 函数为主要的滤镜计算函数。在该函数中，我们保持着几乎与上一节课中，JavaScript 版滤镜函数同样的实现逻辑。</p><p>在代码的开始，我们首先以 “#include” 的方式，包含了很多需要使用到的 C/C++ 头文件。其中 “emscripten.h” 头文件便由 Emscripten 工具链提供，其中包含着众多与 Wasm 编译相关的宏和函数定义。</p><!-- [[[read_end]]] --><p>另外的 “cmath” 头文件，是原始 C 标准库中的 “math.h” 头文件在 C++ 中的对应。两者在所提供函数的功能上基本没有区别。我们将使用该头文件中提供的 “std::floor” 函数，去参与滤镜的计算过程。</p><p>接下来，我们使用 “#define” 定义了两个宏常量 “KH” 与 “KW”，分别表示卷积核的“高”与“宽”。并同时使用这两个常量，定义了用来存放实际卷积核矩阵数据的二维数组 “kernel”。类似的，我们还定义了用来存放每一帧对应像素数据的一维数组 “data”。</p><p>这里要注意的是，由于在 C/C++ 中，无法声明全局的动态大小数组，因此我们需要提前计算出，由 Web API “CanvasRenderingContext2D.getImageData” 所返回的，存放有每一帧对应像素数据的那个 Uint8ClampedArray 数组，在 C/C++ 中对应到 unsigned char 类型数组时的大小。</p><p>由于这两个数组所存储的单个元素其类型完全相同，因此我们直接使用这个得到的 Uint8ClampedArray 数组的大小，来作为对应 C/C++ 中 “data” 数组的大小。经过实践，我们得到的数组大小为 “921600”。</p><p>在 <code>extern \"C\" {}</code> 结构中，我们声明了所有需要导出到外部宿主环境（这里为浏览器的 JavaScript 环境）中使用的函数。其中除了 cppConvFilter 函数以外，还有另外的 cppGetkernelPtr 和 cppGetDataPtr 函数。这两个函数主要用来获取先前声明的数组 kernel 与 data 的首地址。通过这种方式，我们便可以在外部的 JavaScript 环境中，向定义在 C/C++ 中的这两个数组结构填充实际的运行时数据了。</p><h2>使用 Emscripten 进行编译</h2><p>当 C/C++ 源代码准备完毕后，我们便可以使用 Emscripten 来进行编译。与我们在实践项目的第一节课中介绍的 Emscripten 编译方式不同，这次我们不需要它帮助我们生成 JavaScript 胶水文件以及 HTML 文件，我们需要的仅是一个根据 C/C++ 代码生成的 Wasm 二进制模块文件，对于其他部分，我们将基于之前已经构建好的 JavaScript 和 HTML 代码来进行开发。</p><p>相较于 Emscripten 之前同时生成 JavaScript 胶水文件和 HTML 文件的方式，这种仅生成 Wasm 模块文件的方式，我们通常将其称为 “Standalone 模式”。对应的编译命令如下所示：</p><pre><code>emcc dip.cc -s WASM=1 -O3 --no-entry -o dip.wasm\n</code></pre><p>相比于之前的编译命令，这里我们做了两个更改。首先，我们将 “-o” 参数所指定的输出文件格式由原来 “.html” 变更为 “.wasm”。这样，我们可以告诉 Emscripten 我们希望以 “Standalone” 的方式来编译输入的 C/C++ 源码。“–no-entry” 参数告诉编译器，我们的 Wasm 模块没有声明 “main” 函数，因此不需要与 CRT（C Runtime Library）相关的功能进行交互。</p><p>在上述命令行执行完毕后，我们将会得到一个名为 “dip.wasm” 的 Wasm 二进制模块文件。</p><h2>整合上下文资源</h2><p>至此，我们便可以将这个通过 Emscripten 编译得到的名为 “dip.wasm”  的 Wasm 模块文件，整合到现阶段项目的 JavaScript 代码中。这里我们将使用 “WebAssembly.instantiate” 的方式来加载这个模块文件。对应的代码如下所示：</p><pre><code>let bytes = await (await fetch('./dip.wasm')).arrayBuffer();\nlet { instance, module } = await WebAssembly.instantiate(bytes);\nlet { \n  cppConvFilter, \n  cppGetkernelPtr, \n  cppGetDataPtr, \n  memory } = instance.exports;\n</code></pre><p>可以看到，通过 <code>fetch</code> 方法返回的 Respose 对象上的 arrayBuffer 函数，会将请求返回的内容解析为对应的 ArrayBuffer 形式。而这个 ArrayBuffer ，随后便会作为 WebAssembly.instantiate 方法的实际调用参数。</p><p>函数返回的 Promise 对象在被 resolve 之后，我们可以得到对应的 WebAssembly.Instance 实例对象和 WebAssembly.Module 模块对象（这里分别对应到名为 instance 和 module 的属性上）。然后在名为 instance 的变量中，我们便可以获得从 Wasm 模块导出的所有方法。</p><p>眼尖的你一定发现了，上面的代码除了从 instance.exports 对象中导出了定义在 Wasm 模块内的函数以外，还有另一个名为 memory 的对象。这个 memory 对象便代表着模块实例所使用到的线性内存段。线性内存段在 JavaScript 中的表示形式，也就是我们上文中提到的，是一个 ArrayBuffer 对象。</p><p>当然，这里 memory 实际上是一个名为 WebAssembly.Memory 的包装类对象，而该对象上的 “buffer” 属性中，便实际存放着对应模块线性内存的 ArrayBuffer 对象。</p><p>下面，我们便可以通过调用相应的方法来完成 Wasm 滤镜函数与 Web 应用的整合。</p><p>首先，我们需要将在 JavaScript 代码中获得到的卷积核矩阵数据，以及每一帧所对应的画面像素数据，填充到我们之前在 C/C++ 代码中定义的相应数组中。为了完成这一步，我们需要首先调用从模块实例中导出的 “cppGetDataPtr” 和 “cppGetkernelPtr” 两个方法，来分别获得这两个数组的首地址，也就是在模块实例线性内存段中的具体偏移位置。</p><p>然后，我们将使用 “Uint8Array” 与 “Int8Array” 这两个 TypedArray 类型来作为模块线性内存的操作视图，并向其中写入数据。</p><p>待数据填充完毕后，我们便可以调用从模块中导出的 “cppConvFilter” 方法来为原始的像素数据添加滤镜。</p><p>待方法调用完毕后，我们将通过 TypedArray 的 subarray 方法来返回一个，包含有已处理完毕像素数据的新的 TypedArray，这些数据随后将会通过名为 CanvasRenderingContext2D.putImageData() 的 API 被重新绘制在 <code>&lt;canvas&gt;</code> 对象上，以实现画面的更新。</p><p>这部分功能对应的代码如下所示：</p><pre><code>// 获取 C/C++ 中存有卷积核矩阵和帧像素数据的数组，在 Wasm 线性内存段中的偏移位置；\nconst dataOffset = cppGetDataPtr();\nconst kernOffset = cppGetkernelPtr();\n// 扁平化卷积核的二维数组到一位数组，以方便数据的填充；\nconst flatKernel = kernel.reduce((acc, cur) =&gt; acc.concat(cur), []);\n// 为 Wasm 模块的线性内存段设置两个用于进行数据操作的视图，分别对应卷积核矩阵和帧像素数据；\nlet Uint8View = new Uint8Array(memory.buffer);\nlet Int8View = new Int8Array(memory.buffer);\n// 填充卷积核矩阵数据；\nInt8View.set(flatKernel, kernOffset);\n// 封装的 Wasm 滤镜处理函数；\nfunction filterWASM (pixelData, width, height) {\n  const arLen = pixelData.length;\n  // 填充当前帧画面的像素数据；\n  Uint8View.set(pixelData, dataOffset);\n  // 调用滤镜处理函数；\n  cppConvFilter(width, height, 4);\n  // 返回经过处理的数据；\n  return Uint8View.subarray(dataOffset, dataOffset + arLen);\n}\n</code></pre><p>这里需要注意的是，我们之前在 JavaScript 中使用的卷积核矩阵数组，实际上是以二维数组的形式存在的。而为了能够方便地将这部分数据填充到 Wasm 线性内存中，这里我们将其扁平化成了一维数组，并存放到变量 flatKernel 中。</p><p>另外，我们仅将那些在视频播放过程中可能会发生变化的部分（这里主要是指每一帧需要填充到 Wasm 模块实例线性内存的像素数据），都单独整和到了名为 filterWasm 的函数中，这样在动画的播放过程中，可以减少不必要的数据传递过程。</p><h2>性能对比</h2><p>最后我们选择了如下两款市面上最为常见的浏览器，来分别测量我们构建的这个 DIP Web 应用在 JavaScript 滤镜和 Wasm 滤镜这两个选项下的视频播放帧率。</p><ul>\n<li>Chrome Version 84.0.4147.89 (Official Build) (64-bit)</li>\n<li>Firefox Version 79.0</li>\n</ul><p>实际测试结果的截图如下所示。其中左侧为 JavaScript 版本滤镜函数，右侧为对应的 Wasm 版本滤镜函数。</p><p>首先是 Chrome：</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/e9/a4eb93d61be5af9e716ed706654669e9.png?wh=1920*845\" alt=\"\"></p><p>然后是 Firefox：</p><p><img src=\"https://static001.geekbang.org/resource/image/78/c6/78ae36409a42d36cf3156c66ece069c6.png?wh=1920*850\" alt=\"\"></p><p>可以看到，同样逻辑的滤镜函数，在对应的 JavaScript 实现版本和 Wasm 实现版本下有着极大的性能差异。Wasm 版本函数的帧画面实时处理效率几乎是对应 JavaScript 版本函数的一倍之多。当然，上述的性能对比结果仅供参考，应用的实际表现是一个综合性的结果，与浏览器版本、代码实现细节、编译器版本甚至操作系统版本都有着密切的关系。</p><p>如果再通过 Chrome 的 Performance 工具来查看，jsConvFilter 与 cppConvFilter 这两个分别对应的 JavaScript 滤镜实现与 Wasm 滤镜实现函数的运行耗时，你可以发现如下所示的结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/a0/a1790yyc7172bf7a49a0b13a11bdcca0.png?wh=1442*298\" alt=\"\" title=\"Wasm 滤镜函数实现的耗时\"></p><p><img src=\"https://static001.geekbang.org/resource/image/29/cb/296bf7d7c3e2ec40bc1db0408f9bffcb.png?wh=1444*290\" alt=\"\" title=\"JavaScript 滤镜函数实现的耗时\"></p><p>可以看到，JavaScript 滤镜函数实现的运行耗时是 Wasm 版本的将近 3 倍。但由于 getImageData 函数在应用实际运行时也会占用一部分时间，因此使得在每一帧画面的刷新和滤镜渲染过程中，整个 Wasm 滤镜处理过程的耗时只能被优化到对应 JavaScript 版本的一半时间左右。同样的，Wasm 实现下通过 Uint8View.set 向 Wasm 实例线性内存段中填充像素数据的过程也同样会占用一定的额外耗时，但这部分的比例相对很小。</p><h2>总结</h2><p>好了，讲到这，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>通过完整的三节课，我们讲解了如何从第一行代码开始着手编写一个完整的 Wasm Web 应用。在构建应用的过程中，我们知道了如何使用 Emscripten 来直接编译输入的 C/C++ 代码到一个完整的、可以直接运行的 Web 应用；或者是基于 “Standalone 模式”来仅仅输出源代码对应的 Wasm 二进制模块文件。</p><p>不仅如此，我们还知道了 Emscripten 在被作为工具链使用时，它还为我们提供了诸如 EMSCRIPTEN_KEEPALIVE 等宏函数，以支持编译过程的正常进行。Emscripten 为我们提供了极其强大的宏函数支持以及对 Web API 的无缝整合。</p><p>甚至你可以直接将基于 OpenGL 编写的 C/C++ 应用编译成 Wasm Web 应用，而无需做任何源代码上的修改。Emscripten 会通过相应的 JavaScript 胶水代码来处理好 OpenGL 与 WebGL 的调用映射关系，让你真正地做到“无痛迁移”。</p><p>在编译完成后，我们还学习了如何通过 Web API 和 JavaScript API 来加载并实例化一个 Wasm 模块对象。WebAssembly.instantiate 与 WebAssembly.instantiateStreaming 这两个主要用来实例化 Wasm 对象的 Web API 在模块实例化效率上的不同。基于“流式编译”的特性，后者往往通常会有着更高的模块实例化性能。</p><p>最后，你应该知道了如何通过 TypedArray 向 Wasm 模块实例的线性内存段中填充数据，以及如何从中读取数据。在本文这个实例中，我们分别使用了 set 与 subarray 这两个 TypedArray 对象上的方法来分别达到这两个目的。</p><p>通过本次实践，我们在最后的性能对比中，也清楚地看到了 Wasm 所带来的 Web 应用的性能提升。希望你也能够通过这次实践，亲身体会到 Wasm 在不久的将来，所能够带给 Web 应用的一系列变革。</p><h2><strong>课后练习</strong></h2><p>最后，我们来做一个小练习吧。</p><p>你可以尝试在其他的，诸如 Edge 和 Safari 浏览器中运行这个 Wasm Web 应用， 并查看在这些浏览器中，当分别使用 JavaScript 版滤镜函数和 Wasm 滤镜函数时的画面实时处理帧率。</p><p>今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我参与讨论，同时欢迎你把这节课分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"16 | 如何实现一个 WebAssembly 在线多媒体处理应用（二）？","id":294319},"right":{"article_title":"18 | 如何进行 Wasm 应用的调试与分析？","id":295965}},"comments":[{"had_liked":false,"id":256720,"user_name":"huge","can_delete":false,"product_type":"c1","uid":2090230,"ip_address":"","ucode":"9F5491B89EE6BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKNfFksicibcQH0juiaia16NdasApA9RoqIxA1p8yVU2hjjuYmQakyHmh1gu9bIHDT57atX2GpJobosnw/132","comment_is_top":false,"comment_ctime":1603716900,"is_pvip":false,"replies":[{"id":"93651","content":"你可以自己写一个 CMakeLists.txt 来让编译器自动查找头文件的所在位置，比如用 include_directories 指令来指定头文件的查找位置。具体可以参考 CMake 的官方文档，或者找找相关的文章。或者如果使用 Clang 也可以看下 Clang 的 -I 参数。","user_name":"作者回复","user_name_real":"Jason Yu 于航","uid":"1005890","ctime":1603900692,"ip_address":"","comment_id":256720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10193651492","product_id":100059901,"comment_content":"我照着例子，试着编译一段求md5的代码，<br>使用#include &lt;openssl&#47;md5.h&gt;<br><br>报错：fatal error: &#39;openssl&#47;md5.h&#39; file not found<br><br>这种依赖第三方库的情况，怎么处理呢","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508094,"discussion_content":"你可以自己写一个 CMakeLists.txt 来让编译器自动查找头文件的所在位置，比如用 include_directories 指令来指定头文件的查找位置。具体可以参考 CMake 的官方文档，或者找找相关的文章。或者如果使用 Clang 也可以看下 Clang 的 -I 参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603900692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284011,"user_name":"军秋","can_delete":false,"product_type":"c1","uid":1108456,"ip_address":"","ucode":"D73025209CBFAE","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/e8/31df61df.jpg","comment_is_top":false,"comment_ctime":1616036925,"is_pvip":false,"replies":[{"id":"103187","content":"--no-entry 应该是传给 Linker 的参数，参考：https:&#47;&#47;lld.llvm.org&#47;WebAssembly.html，可以尝试升级一下 Emscripten 的版本。","user_name":"作者回复","user_name_real":"Jason Yu 于航","uid":"1005890","ctime":1616310482,"ip_address":"","comment_id":284011,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911004221","product_id":100059901,"comment_content":"编译提示：clang-6.0: error: unsupported option &#39;--no-entry&#39; 是我版本太低了吗？ clang的官方文档也没找到--no-entry 选项。<br>emcc -v<br>emcc (Emscripten gcc&#47;clang-like replacement + linker emulating GNU ld) 1.39.4<br>clang version 6.0.1 (https:&#47;&#47;github.com&#47;emscripten-core&#47;emscripten-fastcomp-clang 98df4be387dde3e3918fa5bbb5fc43e1a0e1daac) (https:&#47;&#47;github.com&#47;emscripten-core&#47;emscripten-fastcomp 6c7e775325067e33fa60611e619a8b987b6d0c35) (emscripten 1.38.44 : 1.38.31)<br>Target: x86_64-unknown-linux-gnu<br>Thread model: posix<br>InstalledDir: &#47;emsdk_portable&#47;clang&#47;tag-e1.39.4&#47;build_tag-e1.39.4_64&#47;bin<br>Found candidate GCC installation: &#47;usr&#47;lib&#47;gcc&#47;x86_64-linux-gnu&#47;6<br>Found candidate GCC installation: &#47;usr&#47;lib&#47;gcc&#47;x86_64-linux-gnu&#47;6.3.0<br>Selected GCC installation: &#47;usr&#47;lib&#47;gcc&#47;x86_64-linux-gnu&#47;6.3.0<br>Candidate multilib: .;@m64<br>Selected multilib: .;@m64<br>shared:INFO: (Emscripten: Running sanity checks)","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517204,"discussion_content":"--no-entry 应该是传给 Linker 的参数，参考：https://lld.llvm.org/WebAssembly.html，可以尝试升级一下 Emscripten 的版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616310482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276094,"user_name":"Zion","can_delete":false,"product_type":"c1","uid":1496496,"ip_address":"","ucode":"6E45FB447E32D1","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/b0/8c60ac4c.jpg","comment_is_top":false,"comment_ctime":1611793672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906760968","product_id":100059901,"comment_content":"2019年的时候，了解了几个月webassembly，由于自身原因当时的感觉就是：webassembly只能做些数据转换加密.希望作者再出一些实用webassembly的课程","like_count":1},{"had_liked":false,"id":258806,"user_name":"张凯","can_delete":false,"product_type":"c1","uid":2012347,"ip_address":"","ucode":"1A5EB41620578E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b4/bb/73586c43.jpg","comment_is_top":false,"comment_ctime":1604560324,"is_pvip":false,"replies":[{"id":"94387","content":"是的。","user_name":"作者回复","user_name_real":"Jason Yu 于航","uid":"1005890","ctime":1604838095,"ip_address":"","comment_id":258806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5899527620","product_id":100059901,"comment_content":"大致思路表述明白了，WebAssembly.instantiate这个函数是我们写在JS中?","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508759,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604838095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357355,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"湖北","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1663199419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663199419","product_id":100059901,"comment_content":"基于 OpenGL 编写的 C&#47;C++ 应用编译成 Wasm Web 应用，而无需做任何源代码上的修改。Emscripten 会通过相应的 JavaScript 胶水代码来处理好 OpenGL 与 WebGL 的调用映射关系，让你真正地做到“无痛迁移”。<br>请问目前有没有开源的例子啊？","like_count":0},{"had_liked":false,"id":299267,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1997119,"ip_address":"","ucode":"D4CA4E7C6B6B8B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/79/3f/a6f93afe.jpg","comment_is_top":false,"comment_ctime":1624540306,"is_pvip":false,"replies":[{"id":"108934","content":"多个文件也可以直接都列在 emcc 后面，或者通过 CMakeFile 来组织项目的构建依赖关系，然后再使用 Emscripten 的 emconfigure&#47;emmake 来构建项目也是可以的。具体可以参考：https:&#47;&#47;emscripten.org&#47;docs&#47;compiling&#47;Building-Projects.html","user_name":"作者回复","user_name_real":"Jason Yu 于航","uid":"1005890","ctime":1625303304,"ip_address":"","comment_id":299267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624540306","product_id":100059901,"comment_content":"老师：<br>如果有一个cc文件，要编出来wasm，如下这些写非常简单<br>emcc dip.cc -s WASM=1 -O3 --no-entry -o dip.wasm<br><br>但是如果有很多cc文件，并且在不同的路径中，上面这个命令应该怎么写？<br>如果这些cc依赖第三方库，比如opencv，应该怎么编译？<br>如果我们自己的cc文件之前都是用cmake编译的，现在要想编译出来wasm，应该怎么做？<br><br>谢谢啦","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522378,"discussion_content":"多个文件也可以直接都列在 emcc 后面，或者通过 CMakeFile 来组织项目的构建依赖关系，然后再使用 Emscripten 的 emconfigure/emmake 来构建项目也是可以的。具体可以参考：https://emscripten.org/docs/compiling/Building-Projects.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625303304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290599,"user_name":"Jason Yu 于航","can_delete":false,"product_type":"c1","uid":1005890,"ip_address":"","ucode":"0731492F4BC77D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","comment_is_top":false,"comment_ctime":1619656986,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1619656986","product_id":100059901,"comment_content":"源码可以参考这里：https:&#47;&#47;github.com&#47;Becavalier&#47;geektime-wasm-tutorial。","like_count":0,"discussions":[{"author":{"id":1397447,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/c7/5b4a67be.jpg","nickname":"燕云长风","note":"","ucode":"D77C450D8FD0FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558222,"discussion_content":"我今天试了一下用了webassembly反而变成了10fpbs 我很郁闷啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648137353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274383,"user_name":"champ","can_delete":false,"product_type":"c1","uid":2189607,"ip_address":"","ucode":"434CF015ADEE28","user_header":"https://static001.geekbang.org/account/avatar/00/21/69/27/b6358f79.jpg","comment_is_top":false,"comment_ctime":1610985523,"is_pvip":false,"replies":[{"id":"100250","content":"这里提到的显示效果是指？","user_name":"作者回复","user_name_real":"Jason Yu 于航","uid":"1005890","ctime":1611794829,"ip_address":"","comment_id":274383,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1610985523","product_id":100059901,"comment_content":"我是这样计算帧率的：<br><br>const records = []<br>let lastDrawTime = 0<br><br>function draw() {<br>    if (lastDrawTime !== 0) {<br>        const duration = Date.now() - lastDrawTime<br>        records.push(duration)<br>    }<br>    lastDrawTime = Date.now()<br><br>    &#47;&#47;...<br><br>    setTimeout(draw, 0)<br>}<br>这样算出来的帧率，在不开启渲染的情况下为170FPS左右，js渲染为80FPS左右，wasm渲染为95FPS左右，好像性能提升并不是很明显。<br><br>另外，我发现同样的算法，wasm算出来的图像显示效果要比js算出来的好很多，不知道是什么原因？<br>老师能解答下吗？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513998,"discussion_content":"这里提到的显示效果是指？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611794829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2189607,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/27/b6358f79.jpg","nickname":"champ","note":"","ucode":"434CF015ADEE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347086,"discussion_content":"我把项目上传到了github：https://github.com/champkeh/wasm\n然后录了一个视频展示效果：https://champkeh.github.io/wasm/demo.mp4\n\n可以看到，使用js渲染会有很多小白点，而使用wasm渲染就没有，很清晰。他们的算法都是一样的，不知道为什么会有这样的区别？还是和环境有关系？\n\n我的环境：\nMacOSX 10.15.5\nChrome Version 85.0.4183.83 (Official Build) (64-bit)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612149304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}