{"id":273892,"title":"01 基础篇 | 如何用数据观测Page Cache？","content":"<p>你好，我是邵亚方。今天我想和你聊一聊Page Cache的话题。</p><p>Page Cache你应该不陌生了，如果你是一名应用开发者或者Linux运维人员，那么在工作中，你可能遇见过与Page Cache有关的场景，比如：</p><ul>\n<li>服务器的load飙高；</li>\n<li>服务器的I/O吞吐飙高；</li>\n<li>业务响应时延出现大的毛刺；</li>\n<li>业务平均访问时延明显增加。</li>\n</ul><p>这些问题，很可能是由于Page Cache管理不到位引起的，因为Page Cache管理不当除了会增加系统I/O吞吐外，还会引起业务性能抖动，我在生产环境上处理过很多这类问题。</p><p>据我观察，这类问题出现后，业务开发人员以及运维人员往往会束手无策，究其原因在于他们对Page Cache的理解仅仅停留在概念上，并不清楚Page Cache如何和应用、系统关联起来，对它引发的问题自然会束手无策了。所以，要想不再踩Page Cache的坑，你必须对它有个清晰的认识。</p><p>那么在我看来，认识Page Cache最简单的方式，就是用数据说话，通过具体的数据你会更加深入地理解Page Cache的本质。为了帮你消化和理解，我会用两节课的时间，用数据剖析什么是Page Cache，为什么需要Page Cache，Page Cache的产生和回收是什么样的。这样一来，你会从本质到表象，透彻理解它，深切感受它和你的应用程序之间的关系，从而能更好地理解上面提到的四个问题。</p><!-- [[[read_end]]] --><p>不过，在这里我想给你提个醒，要学习今天的内容，你最好具备一些Linux编程的基础，比如，如何打开一个文件；如何读写一个文件；如何关闭一个文件等等。这样，你理解今天的内容会更加容易，当然了，不具备也没有关系，如果遇到你实在看不懂的地方，你可以查阅《UNIX环境高级编程》这本书，它是每一位Linux开发者以及运维人员必看的入门书籍。</p><p>好了，话不多说，我们进入今天的学习。</p><h2>什么是Page Cache？</h2><p>我记得很多应用开发者或者运维在向我寻求帮助，解决Page Cache引起的问题时，总是喜欢问我Page Cache到底是属于内核还是属于用户？针对这样的问题，我一般会让他们先看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/1b/f344917f3cacd5bc06ae7c743a217f1b.png?wh=2860*2440\" alt=\"\" title=\"应用程序产生Page Cache的逻辑示意图 \"></p><p>通过这张图片你可以清楚地看到，红色的地方就是Page Cache，<strong>很明显，Page Cache是内核管理的内存，也就是说，它属于内核不属于用户。</strong></p><p>那咱们怎么来观察Page Cache呢？其实，在Linux上直接查看Page Cache的方式有很多，包括/proc/meminfo、free 、/proc/vmstat命令等，它们的内容其实是一致的。</p><p>我们拿/proc/meminfo命令举例看一下（如果你想了解/proc/meminfo中每一项具体含义的话，可以去看<a href=\"https://www.kernel.org/doc/Documentation/filesystems/proc.rst\">Kernel Documentation</a>的meminfo这一节，它详细解释了每一项的具体含义，Kernel Documentation是应用开发者想要了解内核最简单、直接的方式）。</p><pre><code>$ cat /proc/meminfo\n...\nBuffers:            1224 kB\nCached:           111472 kB\nSwapCached:        36364 kB\nActive:          6224232 kB\nInactive:         979432 kB\nActive(anon):    6173036 kB\nInactive(anon):   927932 kB\nActive(file):      51196 kB\nInactive(file):    51500 kB\n...\nShmem:             10000 kB\n...\nSReclaimable:      43532 kB\n...\n</code></pre><p>根据上面的数据，你可以简单得出这样的公式（等式两边之和都是112696 KB）：</p><blockquote>\n<p>Buffers + Cached + SwapCached = Active(file) + Inactive(file) + Shmem + SwapCached</p>\n</blockquote><p><strong>那么等式两边的内容就是我们平时说的Page Cache。</strong>请注意你没有看错，两边都有SwapCached，之所以要把它放在等式里，就是说它也是Page Cache的一部分。</p><p>接下来，我带你分析一下这些项的具体含义。等式右边这些项把Buffers和Cached做了一下细分，分为了Active(file)，Inactive(file) 和Shmem，因为Buffers更加依赖于内核实现，在不同内核版本中它的含义可能有些不一致，而等式右边和应用程序的关系更加直接，所以我们从等式右边来分析。</p><p>在Page Cache中，Active(file)+Inactive(file)是File-backed page（与文件对应的内存页），是你最需要关注的部分。因为你平时用的mmap()内存映射方式和buffered I/O来消耗的内存就属于这部分，<strong>最重要的是，这部分在真实的生产环境上也最容易产生问题，</strong>我们在接下来的课程案例篇会重点分析它。</p><p>而SwapCached是在打开了Swap分区后，把Inactive(anon)+Active(anon)这两项里的匿名页给交换到磁盘（swap out），然后再读入到内存（swap in）后分配的内存。<strong>由于读入到内存后原来的Swap File还在，所以SwapCached也可以认为是File-backed page，即属于Page Cache。</strong>这样做的目的也是为了减少I/O。你是不是觉得这个过程有些复杂？我们用一张图直观地看一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/7b/a9010acc1d7b55d5c24562d2c32b437b.jpg?wh=4336*1491\" alt=\"\"></p><p>我希望你能通过这个简单的示意图明白SwapCached是怎么产生的。在这个过程中你要注意，SwapCached只在Swap分区打开的情况下才会有，而我建议你在生产环境中关闭Swap分区，因为Swap过程产生的I/O会很容易引起性能抖动。</p><p>除了SwapCached，Page Cache中的Shmem是指匿名共享映射这种方式分配的内存（free命令中shared这一项），比如tmpfs（临时文件系统），这部分在真实的生产环境中产生的问题比较少，不是我们今天的重点内容，我们这节课不对它做过多关注，你知道有这回事就可以了。</p><p>当然了，很多同学也喜欢用free命令来查看系统中有多少Page Cache，会根据buff/cache来判断存在多少Page Cache。如果你对free命令有所了解的话，肯定知道free命令也是通过解析/proc/meminfo得出这些统计数据的，这些都可以通过free工具的源码来找到。free命令的源码是开源，你可以去看下<a href=\"https://gitlab.com/procps-ng/procps\">procfs</a>里的free.c文件，源码是最直接的理解方式，它会加深你对free命令的理解。</p><p>不过你是否好奇过，free命令中的buff/cache究竟是指什么呢？我们在这里先简单地看一下：</p><pre><code>$ free -k\n              total        used        free      shared  buff/cache   available\nMem:        7926580     7277960      492392       10000      156228      430680\nSwap:       8224764      380748     7844016\n</code></pre><p>通过procfs源码里面的<a href=\"https://gitlab.com/procps-ng/procps/-/blob/master/proc/sysinfo.c\">proc/sysinfo.c</a>这个文件，你可以发现buff/cache包括下面这几项：</p><blockquote>\n<p>buff/cache = Buffers + Cached + SReclaimable</p>\n</blockquote><p>通过前面的数据我们也可以验证这个公式: 1224 + 111472 + 43532的和是156228。</p><p>另外，这里你要注意，你在做比较的过程中，一定要考虑到这些数据是动态变化的，而且执行命令本身也会带来内存开销，所以这个等式未必会严格相等，不过你不必怀疑它的正确性。</p><p>从这个公式中，你能看到free命令中的buff/cache是由Buffers、Cached和SReclaimable这三项组成的，它强调的是内存的可回收性，也就是说，可以被回收的内存会统计在这一项。</p><p>其中SReclaimable是指可以被回收的内核内存，包括dentry和inode等。而这部分内容是内核非常细节性的东西，对于应用开发者和运维人员理解起来相对有些难度，所以我们在这里不多说。</p><p>掌握了Page Cache具体由哪些部分构成之后，在它引发一些问题时，你就能够知道需要去观察什么。比如说，应用本身消耗内存（RSS）不多的情况下，整个系统的内存使用率还是很高，那不妨去排查下是不是Shmem(共享内存)消耗了太多内存导致的。</p><p>讲到这儿，我想你应该对Page Cache有了一些直观的认识了吧？当然了，有的人可能会说，内核的Page Cache这么复杂，我不要不可以么？</p><p>我相信有这样想法的人不在少数，如果不用内核管理的Page Cache，那有两种思路来进行处理：</p><ul>\n<li>第一种，应用程序维护自己的Cache做更加细粒度的控制，比如MySQL就是这样做的，你可以参考<a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html\">MySQL Buffer Pool</a> ，它的实现复杂度还是很高的。对于大多数应用而言，实现自己的Cache成本还是挺高的，不如内核的Page Cache来得简单高效。</li>\n<li>第二种，直接使用Direct I/O来绕过Page Cache，不使用Cache了，省的去管它了。这种方法可行么？那我们继续用数据说话，看看这种做法的问题在哪儿？</li>\n</ul><h2>为什么需要Page Cache？</h2><p>通过第一张图你其实已经可以直观地看到，标准I/O和内存映射会先把数据写入到Page Cache，这样做会通过减少I/O次数来提升读写效率。我们看一个具体的例子。首先，我们来生成一个1G大小的新文件，然后把Page Cache清空，确保文件内容不在内存中，以此来比较第一次读文件和第二次读文件耗时的差异。具体的流程如下。</p><p>先生成一个1G的文件：</p><blockquote>\n<p>$ dd if=/dev/zero of=/home/yafang/test/dd.out bs=4096 count=$((1024*256))</p>\n</blockquote><p>其次，清空Page Cache，需要先执行一下sync来将脏页（第二节课，我会解释一下什么是脏页）同步到磁盘再去drop cache。</p><blockquote>\n<p>$ sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches</p>\n</blockquote><p>第一次读取文件的耗时如下：</p><pre><code>$ time cat /home/yafang/test/dd.out &amp;&gt; /dev/null\nreal\t0m5.733s\nuser\t0m0.003s\nsys\t0m0.213s\n</code></pre><p>再次读取文件的耗时如下：</p><pre><code>$ time cat /home/yafang/test/dd.out &amp;&gt; /dev/null \nreal\t0m0.132s\nuser\t0m0.001s\nsys\t0m0.130s\n</code></pre><p>通过这样详细的过程你可以看到，第二次读取文件的耗时远小于第一次的耗时，这是因为第一次是从磁盘来读取的内容，磁盘I/O是比较耗时的，而第二次读取的时候由于文件内容已经在第一次读取时被读到内存了，所以是直接从内存读取的数据，内存相比磁盘速度是快很多的。<strong>这就是Page Cache存在的意义：减少I/O，提升应用的I/O速度。</strong></p><p>所以，如果你不想为了很细致地管理内存而增加应用程序的复杂度，那你还是乖乖使用内核管理的Page Cache吧，它是ROI(投入产出比)相对较高的一个方案。</p><p>你要知道，我们在做方案抉择时找到一个各方面都很完美的方案还是比较难的，大多数情况下都是经过权衡后来选择一个合适的方案。因为，我一直坚信，合适的就是最好的。</p><p>而我之所以说Page Cache是合适的，而不是说它是最好的，那是因为Page Cache的不足之处也是有的，这个不足之处主要体现在，它对应用程序太过于透明，以至于应用程序很难有好方法来控制它。</p><p>为什么这么说呢？要想知道这个答案，你就需要了解Page Cache的产生过程，这里卖个关子，我在下一讲会跟你讨论。</p><h2>课堂总结</h2><p>我们这节课主要是讲述了如何很好地理解Page Cache，在我看来，要想很好的理解它，直观的方式就是从数据入手，所以，我从如何观测Page Cache出发来带你认识什么是Page Cache；然后再从它为什么容易产生问题出发，带你回顾了它存在的意义，我希望通过这样的方式，帮你明确这样几个要点：</p><ol>\n<li>Page Cache是属于内核的，不属于用户。</li>\n<li>Page Cache对应用提升I/O效率而言是一个投入产出比较高的方案，所以它的存在还是有必要的。</li>\n</ol><p>在我看来，如何管理好Page Cache，最主要的是你要知道如何来观测它以及观测关于它的一些行为，有了这些数据做支撑，你才能够把它和你的业务更好地结合起来。而且，在我看来，当你对某一个概念很模糊、搞不清楚它到底是什么时，最好的认知方式就是先搞明白如何来观测它，然后动手去观测看看它究竟是如何变化的，正所谓纸上得来终觉浅，绝知此事要躬行！</p><p>这节课就讲到这里，下一节我们使用数据来观察Page Cache的产生和释放，这样一来，你就能了解Page Cache的整个生命周期，从而对于它引发的一些问题能有一个大概的判断。</p><h2>课后作业</h2><p>最后我给你留一道思考题，请你写一个程序来构造出来Page Cache，然后观察/proc/meminfo和/proc/vmstat里面的数据是如何变化的， 欢迎在留言区分享你的看法。</p><p>感谢你的阅读，如果你认为这节课的内容有收获，也欢迎把它分享给你的朋友，我们下一讲见。</p>","comments":[{"had_liked":false,"id":245302,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1598888331,"is_pvip":false,"replies":[{"id":"90245","content":"pagecache和硬件关系不大，如果说pagecache一定要跟硬件关联起来的话，会有这几方面：一个page有多大，tlb有多大，cache有多大，物理内存多大，磁盘是ssd，hdd还是nvme。page的大小和物理内存的大小决定了pagecache的量，但是你会发现pagecache的回收机制其实是独立于这个量的，也就是，不论它有多少，active和inactive的替换逻辑是不变的。tlb大小和cache大小则影响了pagecache命中与否的性能，但是你会发现相比pagecache miss而言，tlb&#47;cache miss几乎可以忽略不计，这是不同数量级的差异。磁盘介质又决定了pagecache的重要性，如果你的磁盘是hdd，那pagecache对应用的提升会非常明显；如果是nvme，那么pagecache miss后业务的性能下降也不会太明显；但是你会发现，不论磁盘介质是什么，pagecache如果命中的话，它的性能都是数量级的差异。<br>也就是说，pagecache自身的机制是独立与硬件的，不论你是什么样的硬件，都要尽量保障热数据在内存中，而冷数据则尽量不要占用内存，这就是pagecache机制的核心。<br>换一个角度而言，不论是x86还是arm，linux都要能工作，而能工作就是linux的本质，这个本质是我们想要讨论的。而不是讨论linux在arm上的工作和x86的工作会有什么差异。<br>","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598935396,"ip_address":"","comment_id":245302,"utype":1}],"discussion_count":2,"race_medal":0,"score":"100383136139","product_id":100058001,"comment_content":"Coding能力有限：不过学过倪鹏飞老师的课，侧重点应当不同吧；PageCache大小的合理设置不知道为何老师不曾提及？单独的去谈代码似乎忘了底层硬件吧。我们说性能是基于硬件去提问，老师单独的去问而不提及硬件基础是否、、、这就像我们去说怎么样去设置软件更合理，不去提及我们硬件的主频和大小以及、、、","like_count":24,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504840,"discussion_content":"pagecache和硬件关系不大，如果说pagecache一定要跟硬件关联起来的话，会有这几方面：一个page有多大，tlb有多大，cache有多大，物理内存多大，磁盘是ssd，hdd还是nvme。page的大小和物理内存的大小决定了pagecache的量，但是你会发现pagecache的回收机制其实是独立于这个量的，也就是，不论它有多少，active和inactive的替换逻辑是不变的。tlb大小和cache大小则影响了pagecache命中与否的性能，但是你会发现相比pagecache miss而言，tlb/cache miss几乎可以忽略不计，这是不同数量级的差异。磁盘介质又决定了pagecache的重要性，如果你的磁盘是hdd，那pagecache对应用的提升会非常明显；如果是nvme，那么pagecache miss后业务的性能下降也不会太明显；但是你会发现，不论磁盘介质是什么，pagecache如果命中的话，它的性能都是数量级的差异。\n也就是说，pagecache自身的机制是独立与硬件的，不论你是什么样的硬件，都要尽量保障热数据在内存中，而冷数据则尽量不要占用内存，这就是pagecache机制的核心。\n换一个角度而言，不论是x86还是arm，linux都要能工作，而能工作就是linux的本质，这个本质是我们想要讨论的。而不是讨论linux在arm上的工作和x86的工作会有什么差异。\n","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1598935396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226372,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f8/c4/106fb7c3.jpg","nickname":"QQ","note":"","ucode":"6925756AECB50D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385376,"discussion_content":"老师回答的赞。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627020613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243082,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1597941575,"is_pvip":false,"replies":[{"id":"89724","content":"buffer可以理解为是一类特殊文件的cache，这类特殊文件就是设备文件，比如&#47;dev&#47;sda1, 这类设备文件的内容被读到内存后就是buffer。而cached则是普通文件的内容被读到了内存。你可以做一个试验，运行下面这个程序，然后观察&#47;proc&#47;meminfo里Buffers和Cached这两项的变化，你会发现增加的是前者。<br>#include &lt;sys&#47;types.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;sys&#47;stat.h&gt;<br>#include &lt;fcntl.h&gt;<br>#include &lt;unistd.h&gt;<br><br>#define DEV &quot;&#47;dev&#47;sda1&quot;<br>#define SIZE (1024 * 1024 * 1024)<br><br>int main()<br>{<br>        int fd = open(DEV, O_RDONLY);<br>        char *buf;<br>        int size;<br><br>        buf = malloc(SIZE);<br>        if (!buf)<br>                return -1;<br><br>        size = read(fd, buf, SIZE);<br>        printf(&quot;%d\\n&quot;, size);<br><br>        while (1) {<br>        }<br><br>        return 0;<br>}","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598175239,"ip_address":"","comment_id":243082,"utype":1}],"discussion_count":6,"race_medal":0,"score":"78907352903","product_id":100058001,"comment_content":"老师好，能详细讲一下buffer cache和page cache的区别吗？这两个到底作用在哪的。","like_count":19,"discussions":[{"author":{"id":1449481,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIt0nAFvqib3fpf9AIKUrEJMdbiaPjnKqCryevwjRdqrbzAIxdOn3P5wCz28MNb5Bgb2PwEdCezLEWg/132","nickname":"KennyQ","note":"","ucode":"5F9AFFCBC086DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301232,"discussion_content":"最简单的理解方式，buffer是缓存裸设备的读写，cache是缓存文件系统的读写。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1598449123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318941,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","nickname":"罗辑思维","note":"","ucode":"D257A06EDE928E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540152,"discussion_content":"buffer是块数据，cache是文件系统。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639972458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504173,"discussion_content":"buffer可以理解为是一类特殊文件的cache，这类特殊文件就是设备文件，比如/dev/sda1, 这类设备文件的内容被读到内存后就是buffer。而cached则是普通文件的内容被读到了内存。你可以做一个试验，运行下面这个程序，然后观察/proc/meminfo里Buffers和Cached这两项的变化，你会发现增加的是前者。\n#include &amp;lt;sys/types.h&amp;gt;\n#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;sys/stat.h&amp;gt;\n#include &amp;lt;fcntl.h&amp;gt;\n#include &amp;lt;unistd.h&amp;gt;\n\n#define DEV &amp;quot;/dev/sda1&amp;quot;\n#define SIZE (1024 * 1024 * 1024)\n\nint main()\n{\n        int fd = open(DEV, O_RDONLY);\n        char *buf;\n        int size;\n\n        buf = malloc(SIZE);\n        if (!buf)\n                return -1;\n\n        size = read(fd, buf, SIZE);\n        printf(&amp;quot;%d\\n&amp;quot;, size);\n\n        while (1) {\n        }\n\n        return 0;\n}","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598175239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2147698,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c5/72/e1981015.jpg","nickname":"神经蛙","note":"","ucode":"498A55DF0004B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301171,"discussion_content":"读写磁盘的缓存具体指的是哪些内容呢？元数据吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598432562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111985,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","nickname":"Frank","note":"","ucode":"9DADD72C193296","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2147698,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c5/72/e1981015.jpg","nickname":"神经蛙","note":"","ucode":"498A55DF0004B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301443,"discussion_content":"具体是什么呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598528698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301171,"ip_address":""},"score":301443,"extra":""}]},{"author":{"id":1066928,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/b0/a9b77a1e.jpg","nickname":"冬风向左吹","note":"","ucode":"376C45C5134F93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300669,"discussion_content":"buffer是读写磁盘的缓存，cache是读写文件的缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598230630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244707,"user_name":"Geek_lucky_brian","can_delete":false,"product_type":"c1","uid":1350275,"ip_address":"","ucode":"4949713DBF99A0","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/83/0802f4e7.jpg","comment_is_top":false,"comment_ctime":1598626604,"is_pvip":false,"replies":[{"id":"90102","content":"dropcache不会清理脏页，只会清理干净的页，所以如果你想清理所有的页的话，是需要在drop前先sync的。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598717630,"ip_address":"","comment_id":244707,"utype":1}],"discussion_count":4,"race_medal":0,"score":"70318103340","product_id":100058001,"comment_content":"感觉学习到了很多。请教老师一个问题，如果不做sync而是直接去drop cache，drop期间是不是也会把脏页刷盘呢？如果是的话，那么为什么还要单独做一次sync呢？直接drop cache不就好了吗","like_count":17,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504673,"discussion_content":"dropcache不会清理脏页，只会清理干净的页，所以如果你想清理所有的页的话，是需要在drop前先sync的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598717630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378327,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623163728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042714,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/1NMAMj2T81BGLJhsnJ7IZL9BeP6LoX6ajukkTKficABoStaE6mAFHBibRQ3HiaG3VNJibVtqQy5m9RMibGfic62yibd7g/132","nickname":"kali","note":"","ucode":"7159F913A83016","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369645,"discussion_content":"干净的页还要清理吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619103079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318941,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","nickname":"罗辑思维","note":"","ucode":"D257A06EDE928E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1042714,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/1NMAMj2T81BGLJhsnJ7IZL9BeP6LoX6ajukkTKficABoStaE6mAFHBibRQ3HiaG3VNJibVtqQy5m9RMibGfic62yibd7g/132","nickname":"kali","note":"","ucode":"7159F913A83016","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541654,"discussion_content":"干净的页是指可以被直接回收，而不用写入到磁盘。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640502977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369645,"ip_address":""},"score":541654,"extra":""}]}]},{"had_liked":false,"id":243461,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/c8680841.jpg","comment_is_top":false,"comment_ctime":1598140818,"is_pvip":false,"replies":[{"id":"89727","content":"是的。如果只读一遍后续再也不会用到，那确实没有必要还用pagecache，使用direct IO就可以了。而且超大文件读入到内存也会影响其他进程对内存的使用。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598175709,"ip_address":"","comment_id":243461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57432715666","product_id":100058001,"comment_content":"我们的数据处理算法实际上对超大输入文件是从头到尾读一遍，而且整个程序仅读一遍，这样其实用direct io就行了吧？","like_count":14,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504292,"discussion_content":"是的。如果只读一遍后续再也不会用到，那确实没有必要还用pagecache，使用direct IO就可以了。而且超大文件读入到内存也会影响其他进程对内存的使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598175709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242725,"user_name":"Q","can_delete":false,"product_type":"c1","uid":1047423,"ip_address":"","ucode":"785546C617D3DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","comment_is_top":false,"comment_ctime":1597824608,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31662595680","product_id":100058001,"comment_content":"”从这个公式中，你能看到 free 命令中的 buff&#47;cache 是由 Buffers、Cached 和 SReclaimable 这三项组成的，它强调的是内存的可回收性，也就是说，可以被回收的内存会统计在这一项“ -- 读到这句话，感觉豁然开朗，我们知道Linux是尽可能把空闲内存作为IO的缓存来使用，提升文件读写的效率，但是这些内存是可以按实际需求会进行回收的。果然，跟大佬学习能减少自己理解的难度。","like_count":8,"discussions":[{"author":{"id":2131211,"avatar":"https://static001.geekbang.org/account/avatar/00/20/85/0b/bc946509.jpg","nickname":"笑看风云","note":"","ucode":"941983B7CD786B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299943,"discussion_content":"从留言区也能get到知识点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597885966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243541,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598176198,"is_pvip":true,"replies":[{"id":"89923","content":"可以理解为是磁盘的缓存，但是它属于内存，不属于磁盘。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452238,"ip_address":"","comment_id":243541,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27367979974","product_id":100058001,"comment_content":"所以 Page Cache 就是 磁盘的一个缓存区？","like_count":7,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504321,"discussion_content":"可以理解为是磁盘的缓存，但是它属于内存，不属于磁盘。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301956,"discussion_content":"又看到你了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598717251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1449481,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIt0nAFvqib3fpf9AIKUrEJMdbiaPjnKqCryevwjRdqrbzAIxdOn3P5wCz28MNb5Bgb2PwEdCezLEWg/132","nickname":"KennyQ","note":"","ucode":"5F9AFFCBC086DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301236,"discussion_content":"准确的说是通过内存给逻辑磁盘分配一块缓存区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598449477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242662,"user_name":"大飞哥","can_delete":false,"product_type":"c1","uid":1046810,"ip_address":"","ucode":"DEBAE3967CA0D3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/1a/d289c2ac.jpg","comment_is_top":false,"comment_ctime":1597806002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27367609778","product_id":100058001,"comment_content":"很棒，让我们比较系统的了解了Page Cache，要观测PageCache就直接读写文件就能感受得到了，特别是大文件，可以与O_DIRECT一起对比。如果调试过程发现IO这一块确实容易出问题的话，可以使用 mount -o commit 降低文件系统同步时间可以更快复现及查找问题。","like_count":7},{"had_liked":false,"id":247937,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1599921824,"is_pvip":true,"replies":[{"id":"91426","content":"缓存io是指应用在读磁盘文件的时候会先经过缓存（内存），而且直接io则不经过缓存而直接与磁盘交互。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1600510423,"ip_address":"","comment_id":247937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23074758304","product_id":100058001,"comment_content":"老师，你好，在有些地方看到经过PageCache的Io叫缓存IO，有些地方说是直接IO。不知道缓存IO，直接IO有什么区别吗","like_count":6,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505530,"discussion_content":"缓存io是指应用在读磁盘文件的时候会先经过缓存（内存），而且直接io则不经过缓存而直接与磁盘交互。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600510423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243246,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1598003007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23072839487","product_id":100058001,"comment_content":"老师讲的不错，深入浅出！<br>总结：<br>PageCache的计算：<br>Buffers + Cached + SwapCached = Active(file) + Inactive(file) + Shmem + SwapCached<br>①SwapCached 是在打开了 Swap 分区后，把 Inactive(anon)+Active(anon) 这两项里的匿名页给交换到磁盘（swap out），然后再读入到内存（swap in）后分配的内存。由于读入到内存后原来的 Swap File 还在，所以 SwapCached 也可以认为是 File-backed page，即属于 Page Cache。<br>②SwapCached 只在 Swap 分区打开的情况下才会有，而我建议你在生产环境中关闭 Swap 分区，因为 Swap 过程产生的 I&#47;O 会很容易引起性能抖动，所以一般在禁止swap的情况下忽略SwapCached。那free命令中的buffer&#47;cache就是pageCache。","like_count":5},{"had_liked":false,"id":253476,"user_name":"Geek_c2089d","can_delete":false,"product_type":"c1","uid":1489545,"ip_address":"","ucode":"C66D345042525F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4Lprf2mIWpJOPibgibbFCicMtp5bpIibyLFOnyOhnBGbusrLZC0frG0FGWqdcdCkcKunKxqiaOHvXbCFE7zKJ8TmvIA/132","comment_is_top":false,"comment_ctime":1602749334,"is_pvip":false,"replies":[{"id":"92733","content":"因为swap得数据量往往较大，而且发生swap时往往是内存很紧张时，各种因素叠加会导致swap过程非常容易出问题。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1602917634,"ip_address":"","comment_id":253476,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14487651222","product_id":100058001,"comment_content":"Swap 过程产生的 I&#47;O 会很容易引起性能抖动不太明白是什么意思？","like_count":4,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507082,"discussion_content":"因为swap得数据量往往较大，而且发生swap时往往是内存很紧张时，各种因素叠加会导致swap过程非常容易出问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602917634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735939,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bf/43/745ca900.jpg","nickname":"Day-Dream","note":"","ucode":"F0A869729F74D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391461,"discussion_content":"只要发生swap，那么以后发生swap的概率就很大，swap的io过程很频繁就会造成大量的中断发生，体验上看你的交互操作会很卡，mpstat看io会比较高","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630475338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113915,"avatar":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","nickname":"致良知","note":"","ucode":"73C722E31B726A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375597,"discussion_content":"太频繁的置换","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621762984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153933,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dd/cd/8a58ac89.jpg","nickname":"error","note":"","ucode":"AED1EF38DBAB76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559133,"discussion_content":"我有一个疑问是内存充足时，swap却发生了交换，大佬们遇到过吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648620996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244949,"user_name":"nestle","can_delete":false,"product_type":"c1","uid":1762252,"ip_address":"","ucode":"469800BED81B54","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","comment_is_top":false,"comment_ctime":1598760134,"is_pvip":false,"replies":[{"id":"90165","content":"pagecache不是vfs模块来管理的，vfs只是提供了pagecache的一个使用接口，也就是标准io这种接口。pagecache是mm这个模块来管理的，回写和预读主要是涉及到mm和io子系统。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598848564,"ip_address":"","comment_id":244949,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14483662022","product_id":100058001,"comment_content":"老是，第一张图有个地方没太明白，Page Cache是由VFS模块来管理的吗？回写、预读这些操作都是由VFS控制的吗？还是说VFS只负责普通文件I&#47;O呢？","like_count":4,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504747,"discussion_content":"pagecache不是vfs模块来管理的，vfs只是提供了pagecache的一个使用接口，也就是标准io这种接口。pagecache是mm这个模块来管理的，回写和预读主要是涉及到mm和io子系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598848564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591118,"discussion_content":"什么是回写，什么是预读，又忘记了。大佬们在帮忙解释一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666309841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265429,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1606895947,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10196830539","product_id":100058001,"comment_content":"老师好，想问下你知道rocketmq消息中间件，作者用了一个堆外内存，手动commit一页4k数据来优化写pagecache，为什么是优化呢，也就是少量的写pagecache和每次写一页pagecache有啥区别呢？","like_count":3,"discussions":[{"author":{"id":1570088,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","nickname":"deepz","note":"","ucode":"4BD23A44CDB384","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569312,"discussion_content":"同学，有啥结论吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651402469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1991953,"avatar":"http://thirdwx.qlogo.cn/mmopen/PiajxSqBRaEJpInuiale8QQNBdZ8uJtwezqxcdGGzsCMsIqlccEhkYnnTA2Zlco5BCLRrHib1VmoXhntCianuIB5DQ/132","nickname":"Geek_ebca97","note":"","ucode":"6BB17223D472F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381419,"discussion_content":"同学，有啥结论吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625045264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245500,"user_name":"nuo-promise","can_delete":false,"product_type":"c1","uid":1116668,"ip_address":"","ucode":"39C48245330A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","comment_is_top":false,"comment_ctime":1598960887,"is_pvip":false,"replies":[{"id":"90295","content":"我在Mac上都是使用Vim+cscope来阅读内核源码，也是很方便的，最主要是这种方式在什么平台上都能用，通用性较好。<br>至于内核源码，可以紧跟upstream的源码来看，在你遇到一些疑惑时，你可以git blame来查看修改记录，修改记录里一般都会详细说明这么实现的原因。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598976232,"ip_address":"","comment_id":245500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10188895479","product_id":100058001,"comment_content":"老师,  mac 上可以推荐 读linux  kernel 的 ide 和 推荐 kernel 源码的版本么？跟着你的教程,然后 课后 源码文件看起来 效果还是不错的<br>","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504902,"discussion_content":"我在Mac上都是使用Vim+cscope来阅读内核源码，也是很方便的，最主要是这种方式在什么平台上都能用，通用性较好。\n至于内核源码，可以紧跟upstream的源码来看，在你遇到一些疑惑时，你可以git blame来查看修改记录，修改记录里一般都会详细说明这么实现的原因。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598976232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242555,"user_name":"Rony","can_delete":false,"product_type":"c1","uid":1023108,"ip_address":"","ucode":"437B5A6ED2B595","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/84/4c72f91a.jpg","comment_is_top":false,"comment_ctime":1597759401,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10187693993","product_id":100058001,"comment_content":"请问下flush和fsync操作的区别，以及那个操作是针对page cache的呢？","like_count":3,"discussions":[{"author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342728,"discussion_content":"fflush是glibc的函数，是将数据从用户缓冲区手动刷新到内核缓冲区。fsync则是将内核缓冲区的数据刷到磁盘中。二者作用的对象不同。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610798318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299900,"discussion_content":"flush和fsycn都可以用来刷脏页，只是fsync可以更加具体一些：比如只刷data或者只刷metadata。而且都可以针对pagecache。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597850645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1111985,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","nickname":"Frank","note":"","ucode":"9DADD72C193296","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":301478,"discussion_content":"那与sync 呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598535343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299900,"ip_address":""},"score":301478,"extra":""},{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1111985,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","nickname":"Frank","note":"","ucode":"9DADD72C193296","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301961,"discussion_content":"sync也会刷脏页，它会刷整个系统的脏页，而不是针对具体某个文件。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598718104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301478,"ip_address":""},"score":301961,"extra":""}]}]},{"had_liked":false,"id":298737,"user_name":"金时","can_delete":false,"product_type":"c1","uid":1120428,"ip_address":"","ucode":"3491B2367A7238","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/ac/4d68ba46.jpg","comment_is_top":false,"comment_ctime":1624282701,"is_pvip":false,"replies":[{"id":"112946","content":"内核态和用户态是指进程的运行状态 并不能用来表示内存。<br>应用程序通过mmap系统调用返回的地址空间属于“用户空间”。<br>mmap的用户空间的地址对应的物理内存则是page cache，这是不同的概念。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631438699,"ip_address":"","comment_id":298737,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919249997","product_id":100058001,"comment_content":"mmap 产生的pageCache 也是内核态的吗","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522225,"discussion_content":"内核态和用户态是指进程的运行状态 并不能用来表示内存。\n应用程序通过mmap系统调用返回的地址空间属于“用户空间”。\nmmap的用户空间的地址对应的物理内存则是page cache，这是不同的概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631438699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242393,"user_name":"权","can_delete":false,"product_type":"c1","uid":1251996,"ip_address":"","ucode":"BB608E9341FCD4","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/9c/082cf625.jpg","comment_is_top":false,"comment_ctime":1597712025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892679321","product_id":100058001,"comment_content":"第一张图很赞，一图胜千言","like_count":1},{"had_liked":false,"id":315155,"user_name":"琥 珀","can_delete":false,"product_type":"c1","uid":2412628,"ip_address":"","ucode":"B06A9CFA0A0269","user_header":"https://static001.geekbang.org/account/avatar/00/24/d0/54/9230c283.jpg","comment_is_top":false,"comment_ctime":1633707323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633707323","product_id":100058001,"comment_content":"在虚拟机环境和真机环境下的Page Cache有什么区别吗？另外我注意到windows的WSL环境的ubuntu是没有&#47;proc&#47;sys&#47;vm&#47;drop_caches这是为什么呢？","like_count":0},{"had_liked":false,"id":301472,"user_name":"tianfeiyu","can_delete":false,"product_type":"c1","uid":1157786,"ip_address":"","ucode":"E65E6841AD5D7F","user_header":"https://static001.geekbang.org/account/avatar/00/11/aa/9a/92d2df36.jpg","comment_is_top":false,"comment_ctime":1625710109,"is_pvip":false,"replies":[{"id":"112942","content":"如果没有开启swap，匿名页就只能在内存中，知道它们被释放掉。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631437934,"ip_address":"","comment_id":301472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625710109","product_id":100058001,"comment_content":"老师，想问一下，如果没有开启 Swap 分区，Inactive(anon)+Active(anon) 既然不会在 page cache，那就只会存在内存中吗","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523006,"discussion_content":"如果没有开启swap，匿名页就只能在内存中，知道它们被释放掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631437934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294153,"user_name":"轩轩","can_delete":false,"product_type":"c1","uid":2135870,"ip_address":"","ucode":"80456F9A167A19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/K2DPibcnicQFUOxEGrnHysfvAqK8uyXCR3vqsas3xNwqvIMVuGoWRIV37Kiaia3vUlPkMRD5mDWh1OPaOBTEs86zbA/132","comment_is_top":false,"comment_ctime":1621787659,"is_pvip":false,"replies":[{"id":"113035","content":"sreclaimable是slab的一种 主要是内核的一些数据结构对应的数据；buffers则是直接读取的设备数据。二者的含义不一样。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631546611,"ip_address":"","comment_id":294153,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621787659","product_id":100058001,"comment_content":"你好，“你可以发现 buff&#47;cache 包括下面这几项：<br>buff&#47;cache = Buffers + Cached + SReclaimable”<br>请问buffers统计里面的确是不包括SReclaimable这个的？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520532,"discussion_content":"sreclaimable是slab的一种 主要是内核的一些数据结构对应的数据；buffers则是直接读取的设备数据。二者的含义不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631546611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282991,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1615513060,"is_pvip":false,"replies":[{"id":"104499","content":"对的， page cache就属于filesystem cache。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1618145741,"ip_address":"","comment_id":282991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615513060","product_id":100058001,"comment_content":"老师，我看文章说要为ES保留足够的filesystem cache，这个和Page Cache是一回事吗？","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516901,"discussion_content":"对的， page cache就属于filesystem cache。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618145741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252871,"user_name":"BlingBling","can_delete":false,"product_type":"c1","uid":2059896,"ip_address":"","ucode":"E6EFCFE55B3672","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6e/78/e7045b49.jpg","comment_is_top":false,"comment_ctime":1602504736,"is_pvip":true,"replies":[{"id":"92460","content":"Active(file)和inactive(file)会被包含buffers+cached中，你说的这个现象很诡异，你是什么内核版本？能否把meminfo里的信息都贴出来看下？<br><br>free命令这个问题，可能跟你的free版本有关，有些版本把buffers和cached给统一了。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1602596323,"ip_address":"","comment_id":252871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602504736","product_id":100058001,"comment_content":"老师你好，请教一下，我这边在项目的嵌入式设备上，发现<br>Buffers + Cached + SwapCached = Active(file) + Inactive(file) + Shmem + SwapCached<br>两者并不相等， Active(file) + Inactive(file) 的和远大于Buffers + Cached，请问下这是什么原因呢？或者什么原因可能导致这个现象？<br><br>另外，这个设备上执行free命令，看到的也只能看到buffers，看不到cached，这又是为什么呢？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506903,"discussion_content":"Active(file)和inactive(file)会被包含buffers+cached中，你说的这个现象很诡异，你是什么内核版本？能否把meminfo里的信息都贴出来看下？\n\nfree命令这个问题，可能跟你的free版本有关，有些版本把buffers和cached给统一了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602596323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252857,"user_name":"BlingBling","can_delete":false,"product_type":"c1","uid":2059896,"ip_address":"","ucode":"E6EFCFE55B3672","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6e/78/e7045b49.jpg","comment_is_top":false,"comment_ctime":1602503123,"is_pvip":true,"replies":[{"id":"92457","content":"是的，并不能保障pagecache被清除，原因可能有几个：<br>1. 有些pagecache被lock了，被lock的page是无法清掉的，你可以通过meminfo来看有多lock&#47;unevictable的。<br>2. 有些pagecache还在percpu的pagevector里，还没有被放到lru上所以无法清除。<br>另外，你的内核是什么版本？","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1602595919,"ip_address":"","comment_id":252857,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1602503123","product_id":100058001,"comment_content":"请教一下，sync &amp;&amp; echo 3 &gt; &#47;proc&#47;sys&#47;vm&#47;drop_caches命令是否并不能保证一定能将cache清除？<br>我在一台嵌入式设备上，<br>1. 多次执行cat命令读取dd创建的文件，耗时无差，并且&#47;proc&#47;memeinfo里面cached的大小也基本不变，<br>2. 执行sync &amp;&amp; echo 3 &gt; &#47;proc&#47;sys&#47;vm&#47;drop_caches命令后，立即查看&#47;proc&#47;memeinfo里面cached的大小，也和命令执行前基本一致？<br>请教下老是这是什么原因？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506900,"discussion_content":"是的，并不能保障pagecache被清除，原因可能有几个：\n1. 有些pagecache被lock了，被lock的page是无法清掉的，你可以通过meminfo来看有多lock/unevictable的。\n2. 有些pagecache还在percpu的pagevector里，还没有被放到lru上所以无法清除。\n另外，你的内核是什么版本？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602595919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059896,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6e/78/e7045b49.jpg","nickname":"BlingBling","note":"","ucode":"E6EFCFE55B3672","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312623,"discussion_content":"linux localhost 4.14.75","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602751255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249713,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1600767655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600767655","product_id":100058001,"comment_content":"笔记、备忘 ~~~~<br><br>buffer&#47;cache = kb_main_buffers + kb_main_cached = kb_main_buffers + (kb_page_cache + kb_slab_reclaimable) = Buffers + (Cached + SReclaimable)<br><br>SReclaimable: 是指可以被回收的内核内存<br><br>Buffers + Cached + SwapCached = Active(file) + Inactive(file) + Shmem + SwapCached<br><br>buffer可以理解为是一类特殊文件的cache，这类特殊文件就是设备文件<br>cache 则是普通文件的缓存<br><br>swapCached只有在打开swap的情况下才有、而实际建议关闭swap、此时的 pageCache = Buffer + cache<br><br>","like_count":0},{"had_liked":false,"id":245668,"user_name":"nuo-promise","can_delete":false,"product_type":"c1","uid":1116668,"ip_address":"","ucode":"39C48245330A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","comment_is_top":false,"comment_ctime":1599020201,"is_pvip":false,"replies":[{"id":"90372","content":"Mac是有shell的，可以像使用linux shell一样来使用它。我在我的MacBook上是使用Vim+cscope来阅读内核源码，然后ssh到linux主机上去开发内核。<br>另外，MacOS是基于bsd的内核，跟linux内核略有不同。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599059088,"ip_address":"","comment_id":245668,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1599020201","product_id":100058001,"comment_content":"老师 可以推荐一下 你开发kernel mac 要部署的环境 教程吗？","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504952,"discussion_content":"Mac是有shell的，可以像使用linux shell一样来使用它。我在我的MacBook上是使用Vim+cscope来阅读内核源码，然后ssh到linux主机上去开发内核。\n另外，MacOS是基于bsd的内核，跟linux内核略有不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599059088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116668,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","nickname":"nuo-promise","note":"","ucode":"39C48245330A35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302903,"discussion_content":"谢谢 知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599059531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244277,"user_name":"KennyQ","can_delete":false,"product_type":"c1","uid":1449481,"ip_address":"","ucode":"5F9AFFCBC086DB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIt0nAFvqib3fpf9AIKUrEJMdbiaPjnKqCryevwjRdqrbzAIxdOn3P5wCz28MNb5Bgb2PwEdCezLEWg/132","comment_is_top":false,"comment_ctime":1598449794,"is_pvip":true,"replies":[{"id":"89932","content":"是的 都没有算swapcache：） 你是个很细心的人 赞������","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452966,"ip_address":"","comment_id":244277,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598449794","product_id":100058001,"comment_content":"等式两边之和都是 112696 KB，这个值buffer+cache，没算上swapcache<br>Buffers:            1224 kB<br>Cached:           111472 kB<br>SwapCached:        36364 kB","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504537,"discussion_content":"是的 都没有算swapcache：） 你是个很细心的人 赞������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244098,"user_name":"心静如水","can_delete":false,"product_type":"c1","uid":1712523,"ip_address":"","ucode":"295631D721C3FD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/HFTNSboUOlebZEG3sFa4ewCWkyYyTFGhQhDYT4lQ1XgLBGG6JozjibygicofEG2fJBH5zru4ckA4ryOnrRKIKOvQ/132","comment_is_top":false,"comment_ctime":1598402396,"is_pvip":false,"replies":[{"id":"89929","content":"对的。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452711,"ip_address":"","comment_id":244098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598402396","product_id":100058001,"comment_content":"原来像cache一类的并不是缓存全部，只是缓存一部分使用到的而已，所以建立swapcache明白了","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504480,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244091,"user_name":"心静如水","can_delete":false,"product_type":"c1","uid":1712523,"ip_address":"","ucode":"295631D721C3FD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/HFTNSboUOlebZEG3sFa4ewCWkyYyTFGhQhDYT4lQ1XgLBGG6JozjibygicofEG2fJBH5zru4ckA4ryOnrRKIKOvQ/132","comment_is_top":false,"comment_ctime":1598401428,"is_pvip":false,"replies":[{"id":"89928","content":"swapcache可以理解为是较活跃的swap，你可以仔细看下那张图示。这样做的目的是，即考虑内存需求，又兼顾io效率。就像lru的inactive和active list一样。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452691,"ip_address":"","comment_id":244091,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598401428","product_id":100058001,"comment_content":"暂时闲置的进程所占用的内存会被移出内存以供其它内存需求量大的进程使用，在需要运行此进程时再加载进内存，此过程中文件相关的内存处理是由VFS管理的，而匿名内存是被交换进swap分区的（属于硬盘），本来就是为了清空内存供其它进程使用那为何还要浪费内存对这部分已经交换到swap分区的内容再次在内存中建立swapcache呢?! 说是为了减少io交互不是有点本末倒置了吗？不知道理解的对不对，求作者大师指点迷津，多谢！","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504477,"discussion_content":"swapcache可以理解为是较活跃的swap，你可以仔细看下那张图示。这样做的目的是，即考虑内存需求，又兼顾io效率。就像lru的inactive和active list一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1449481,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIt0nAFvqib3fpf9AIKUrEJMdbiaPjnKqCryevwjRdqrbzAIxdOn3P5wCz28MNb5Bgb2PwEdCezLEWg/132","nickname":"KennyQ","note":"","ucode":"5F9AFFCBC086DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301235,"discussion_content":"明确一点swap是在物理内存耗尽以后，才会被系统将部分硬盘空间模拟成内存使用的，正常情况下是用不到的。所以不存在你说的这个情况，另外如果没有开启 swap，那么系统在内存用尽后会触发oom，主动杀死进程来释放内存。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598449415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243252,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1598003433,"is_pvip":false,"replies":[{"id":"89726","content":"其实底层机制和具体的语言无关。只是如果掌握了c语言，能够更好的理解底层机制。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598175570,"ip_address":"","comment_id":243252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598003433","product_id":100058001,"comment_content":"老师，我们是java工程师，不懂Linux编程，您应该指的是C语言编程吧","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504239,"discussion_content":"其实底层机制和具体的语言无关。只是如果掌握了c语言，能够更好的理解底层机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598175570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242925,"user_name":"Q","can_delete":false,"product_type":"c1","uid":1047423,"ip_address":"","ucode":"785546C617D3DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","comment_is_top":false,"comment_ctime":1597894719,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597894719","product_id":100058001,"comment_content":"swap 关闭这个点，得分情况，如果是生产要保证可用性，忽略性能的影响，为了避免内存的不足引起的OOM，我觉得可以开启，同时设置下vm.swappiness ，并做好对swap的监控。","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300080,"discussion_content":"对的。因为oom的危害程度可能会更大，所以有的时候为了应对一些突发的内存申请，是需要开启swap的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597931236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118627,"avatar":"https://static001.geekbang.org/account/avatar/00/11/11/a3/7a2405ca.jpg","nickname":"rfyiamcool","note":"","ucode":"65FCBF05B13893","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302197,"discussion_content":"不建议开swap，因为开了交换分区后会有更多的问题，比如业务请求时延增高和io频繁交换。内存监控要做好，内存异常增长提前就要发现，哪怕出现oom没什么大不了的，毕竟现在都是集群化的业务系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598838723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242876,"user_name":"Abby","can_delete":false,"product_type":"c1","uid":2133011,"ip_address":"","ucode":"EF21516434D445","user_header":"https://static001.geekbang.org/account/avatar/00/20/8c/13/62e221c7.jpg","comment_is_top":false,"comment_ctime":1597882293,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1597882293","product_id":100058001,"comment_content":"我用sar 命令来观察page miss,感觉这个更加能体现出问题，比如major miss。另外，关于关闭swap,大家给的建议不一样，有的建议设置成1，为了保证系统最差情况下可以用swap保证应用活下去。另外，据说设置成0，系统也不会完全禁用swap,老师是不是这样的？","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300083,"discussion_content":"关于swappiness的具体设置，kernel doc里面其实解释的很好了：https://www.kernel.org/doc/Documentation/sysctl/vm.txt 。 \n\n“A value of 0 instructs the kernel not to\ninitiate swap until the amount of free and file-backed pages is less\nthan the high water mark in a zone.\n”\n也就是说，当设置为0的时候，如果free和file-backed pages之和小于high water mark时还是会有swap行为。\n当你不明白某个配置项的具体含义时，kernel doc是最好的了解方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597931631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":302029,"discussion_content":"根据正文中的几个公式，是不是可以认为file-backed都是可以被回收的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598764780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300083,"ip_address":""},"score":302029,"extra":""},{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302641,"discussion_content":"file-backed都是可回收的，也就是它具备可回收性，但是实际能否被回收掉还要看这个page的使用情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598976425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302029,"ip_address":""},"score":302641,"extra":""}]}]},{"had_liked":false,"id":242579,"user_name":"eagle","can_delete":false,"product_type":"c1","uid":1129632,"ip_address":"","ucode":"D7601A2AFC1D17","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/a0/8b9d5aca.jpg","comment_is_top":false,"comment_ctime":1597767054,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597767054","product_id":100058001,"comment_content":"各种概念扑面而来，有点跳跃，对初学者不够友好","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299897,"discussion_content":"其实这些概念主要是为了解释原理，你可以不用去刻意记这些概念，而且通过这些概念来了解背后的机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597850392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242561,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1717235,"ip_address":"","ucode":"10962C711CBC11","user_header":"","comment_is_top":false,"comment_ctime":1597760169,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597760169","product_id":100058001,"comment_content":"老师您好，<br>请问您什么样的page可以被称为file backed page，什么样的page不是file backed page?<br>这问题一直搞不是很清楚。<br><br>谢谢老师的解答了！","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299899,"discussion_content":"举个简单的例子，进程的堆栈就不是file-backed page；通过mmap(MAP_FILE | MAP_SHARED)映射的文件内容对应的内存就是file-backed page。 我们在后面的课程会详细的解释这些知识。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597850548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}