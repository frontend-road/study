{"id":148170,"title":"21 | 高效工作：Facebook的10x程序员效率心法","content":"<p>你好，我是葛俊。从今天这篇文章开始，我们就正式进入个人效能模块了。今天，我要和你分享的主题是，程序员如何高效地进行开发工作。</p><p>最近比较流行的一个说法是10x程序员，也就是10倍程序员，意思是一个好的程序员，工作效率可以达到普通程序员的10倍。要做到这一点并不容易，我们需要在编程技术、工作方式、工具使用等方面全面提高。</p><p>今天这篇文章，我将聚焦于如何提高自己的编程技术，给出在实践中被证明有效的3条原则，包括抽象和分而治之、快速迭代，以及DRY（Don’t Repeat Yourself），并针对每条原则给出几个高效实践。而关于工作方式、工具使用等方面的内容，我会在后面几篇文章中与你详细讨论。</p><h2>第一条原则：抽象和分而治之</h2><p>虽然我们面对的世界非常复杂，但大脑只能同时处理有限的信息，那怎么平衡这个有限和复杂之间的矛盾呢？</p><p><strong>最好的办法是</strong>，把一个系统拆分为几个有限的子系统，每个子系统涵盖某一方面的内容，并将其复杂性隐藏起来，只对外暴露关键信息。</p><p>这样，我们在研究这个系统的时候，就无需考虑其子系统的细节，从而对整个系统进行有效的思考。如果我们需要深入了解某一个子系统，再打开这个子系统来看即可。</p><p>以此类推，如果这个子系统还是很复杂，我们可以再对其进行拆分。这样一来，在任何时候，我们思考时面对的元素都是有限的，复杂度也下降到了大脑的能力范围之内，从而完成对一个复杂系统的理解和处理。</p><!-- [[[read_end]]] --><p><strong>这个拆分处理的过程，就是我们常说的分而治之；而用子系统来隐藏一个领域的内部细节，就是抽象。</strong>抽象和分而治之，是我们理解世界的基础。</p><p>比如，我们在了解一张简单的桌子时，首先想到的是它由1个桌面和4条桌腿组成。那么，桌面和桌腿就是子系统：桌面就是一个抽象，代表实现摆放物品功能的一个平面；桌腿也是一个抽象，代表支撑桌面的结构。</p><p>如果我们需要进一步了解桌面或者桌腿这两个子系统，可以再进一步去看它们的细节，比如两者都有形状、重量、材料、颜色等。但如果一上来就考虑这些细节的话，我们对桌子的理解就会陷入无尽的细节当中，无法快速形成对整个桌子的认知。</p><p>软件开发也是这个道理，我们必须做好抽象和分而治之，才能做出好的程序。</p><p>所以，拿到一个任务之后，我们要做的<strong>首先就是进行模块的定义，也就是抽象，然后对其分而治之</strong>。</p><p>为方便理解，我再和你分享一个在Facebook时，几个前后端开发者同时开发一个功能的案例吧。</p><p>这个功能由一个前端开发者和两个后端开发者完成，整个研发过程至少涉及3个抽象和分而治之的操作：</p><ul>\n<li>第一步，前后端模块进行自然的拆分。这时，前后端开发者一定会一块儿认真讨论，明确前后端代码运行时的流程，后端需要提供的API，以及交付这些API的时间。</li>\n<li>第二步，两个后端开发者对后端工作进行拆分，确定各自的工作任务和边界。</li>\n<li>第三步，每个开发者对自己负责的部分再进行抽象和拆分。</li>\n</ul><p>在这个过程中，一定要明确模块之间的依赖关系，尽快确定接口规格和可调用性。比如，在前后端的拆分中，常常会采用这几个步骤处理API：</p><ol>\n<li>前后端开发者一起讨论，明确需要的API。</li>\n<li>后端人员会先实现API的Mock，返回符合格式规范的数据。在这个过程中，后端开发者会尽快发出代码审查的要求给另一个后端和前端开发者，以确保格式正确。</li>\n<li>Mock实现之后尽快推到主仓的master上(也就是origin/master)，并尽快将其部署到内部测试环境，让前端开发者可以使用内部测试环境进行开发和调试。</li>\n<li>这些API还不能面对用户，通常会先使用功能开关让它只对公司开发人员可见。这样的话，即使API的代码在origin/master上部署到了生产环境，也不会对用户产生影响。</li>\n</ol><p>通过这样的操作，前后端的任务拆分就顺利完成了。</p><p>提高抽象和分而治之效率的一个技巧是，在设计代码架构时注意<strong>寻找合适的设计模式</strong>。</p><p>设计模式指的是，设计过程中可以反复使用的、可以解决特定问题的设计方法，最经典的莫过于<a href=\"https://book.douban.com/subject/1052241/\">《设计模式：可复用面向对象软件的基础》</a>中列举的23个设计模式，以及针对企业软件架构的<a href=\"https://book.douban.com/subject/1230559/\">《企业应用架构模式》</a>。同时，我们还要注意公司内部具体的常用模式。这些模式都是经实践检验有效的，且传播较广容易理解，都可以作为你进行模块拆分的参照。</p><p>具体实现功能的过程中，也会处处体现分而治之的思想。最主要的一个表现是，每个开发者都会把自己的<strong>代码尽量做到原子性</strong>。代码的原子性指的是，一个提交包含一个不可分割的特性、修复或者优化。</p><p>在实际工作中，功能往往比较大。如果只用一个提交完成一个功能，那这个提交往往会比较大，所以我们需要把这个功能再拆分为子功能。</p><p>比如，某个后端API的实现，我们很可能会把它拆分成数据模型和API业务两部分，但如果这样的提交还是太大的话，可以进一步将其拆小，把API业务再分为重构和添加新业务两部分。</p><p>总之，我们的目的是让每个提交都做成能够独立完成一些任务，但是又不太大。一般来说，一个提交通常不超过800行代码。</p><h2>第二条原则：快速迭代</h2><p>通过前面的文章，我们已经明确了快速迭代对提高研发效能的重要意义。接下来，我们就看看在具体的编程中，快速迭代的一些实践吧。</p><p><strong>第一，不要追求完美，不要过度计划，而是要尽快实现功能，通过不断迭代来完善。</strong>优秀的架构往往不是设计出来的，而是在实现过程中逐步发展、完善起来的。</p><p>Facebook有一条常见的海报标语，叫作“Done is better than perfect”，意思就是完成比完美要重要。要实现快速迭代，我们在设计和实现功能时都要注意简单化。</p><p>有些开发者过于追求技术，投入了大量时间去设计精美、复杂的系统。这样做没有问题，但一定要有一个度，切忌杀鸡用牛刀。因为复杂的系统虽然精美，但往往不容易理解，维护成本也比较高，修改起来更是不容易。</p><p>所以，我们在Facebook进行开发的时候，尽量使用简单实用的设计，然后快速进行版本迭代。</p><p><strong>第二，在设计的实现中，尽量让自己的代码能够尽快运行起来，从而尽快地验证结果。</strong>我们常常会先实现一个可以运行起来的脚手架，然后再持续地往里面添加内容。</p><p>在工作中，因为往往是在一个比较大的系统里工作，不能很容易地运行新代码。这时，我们可以编写脚本或者单元测试用例来触发新写的代码。通常情况下，我们更倾向于使用后者，因为这些测试用例，在功能开发完成上线之后，还可以继续用于保证代码质量。</p><p>在我看来，在开发过程中，能触发新写的代码帮助我开发，是单元测试的一个重要功能。</p><p><strong>第三，为了能够快速进行验证，一个重要实践是设置好本地的代码检验</strong>，包括静态扫描、相关单元测试的方便运行，以及IDE能够进行的实时检查等。</p><p><strong>第四，代码写好之后，尽快提交到主代码仓并保证不会阻塞其他开发人员</strong>。</p><p>实际上，这是代码提交原子性的另外一个重要特点，即代码提交的原子性，可以保证主代码仓在理论上能够随时基于master分支上的任何提交，构建出可以运行的、直接面对用户的产品。在这种方式下，每个开发者在任何时候都可以基于origin/master进行开发，从而确保Facebook几千人共主干开发时分而治之能够顺利进行。</p><p>关于实现代码提交的原子性，我还有一个小技巧，就是如果当前编写的代码提交实在不方便马上推送到origin/master分支上，我们也可以频繁地fetch origin/master的代码到本地，并在本地对orgin/master进行rebase来解决冲突。这样就可以确保，我们开发的代码是基于最新的主仓代码，从而降低代码完成之后push时冲突的可能性。</p><h2>第三条原则：DRY</h2><p>DRY，也就是不要重复你自己，是很多开发模式的基础，也是我们非常熟悉的一条开发原则了。比如，我们把一段经常使用的代码封装到一个函数里，在使用它的地方直接调用这个函数，就是一个最基本的DRY。</p><p><strong>代码逻辑的重复</strong>，不仅仅是工作量的浪费，还会大大降低代码的质量和可维护性。所以，我们在开发时，需要留意重复的代码逻辑，并进行适当的处理。</p><p>具体来说，首先是寻找重复的逻辑和代码。在动手实现功能之前，我们会花一些时间在内部代码仓和知识库中进行查找，寻找是否有类似的功能实现，以及一些底层可以复用的库，过程中也可以直接联系类似功能的实现者进行讨论和寻求帮助。另外，有一些IDE，比如Intellij IDEA，可以在编码的过程中自动探测项目中可能的代码重复。</p><p>找到重复的逻辑和代码之后，主要的处理方式是，把共同的部分抽象出来，封装到一个模块、类或者函数等结构中去。</p><p>如果在开发新功能时发现有需要重构的地方，一个常见的有效办法是，先用几个提交完成重构，然后再基于重构用几个提交实现新功能。</p><p>在编程工作中，除了代码的重复外，比较常见的还有<strong>流程的重复</strong>。比如测试中，我们常常需要重复地产生一些测试数据，运行完测试之后再把这些数据删除。</p><p>这些重复的流程也需要DRY，最主要的办法是自动化。以重复的测试数据产生、删除流程为例，一般的做法是，编写脚本进行自动化，当然有些时候也需要写一些复杂的可执行程序来生成数据。</p><p>流程重复还有一个特点是，它常常和团队相关，也就是说很多成员可能都会重复某些操作，这样的操作更值得自动化。比如，团队的很多成员常常都需要产生测试数据，这时我推荐你主动对其进行自动化、通用化，并提交到代码仓的工具文件夹中供团队使用。</p><h2>小结</h2><p>今天，我针对如何使自己成长为10x程序员，首先给出了在编程技术方面的3个原则，分别是抽象和分而治之、快速迭代，以及DRY。然后，针对每一条原则，我给出了Facebook高效开发者的一些常用实践。</p><p>其实，我们还可以从这3条原则中延伸出其他很多有效的实践。</p><p>比如，好的代码注释。对子系统设计进行合理的注解，可以方便其他开发者在不同的抽象层面对软件结构有更直观的了解。而且如果系统拆分得当的话，需要注释的地方就会比较少。又比如，代码的设计时审查，就是帮助我们及早进行架构讨论，从而实现快速迭代。</p><p>为方便你理解并运用到自己的开发工作中，我将这些实践总结到了一张表格中，如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/d1/ccb6ec868814aa9d86a3558739cd8dd1.jpg?wh=2900*2783\" alt=\"\"></p><p>另外，关于编程技术的高效实践也是不断演化和发展的。以设计模式为例，最近几年又出现了针对Kubernetes开发场景的模式，你可以参考<a href=\"https://www.amazon.com/Kubernetes-Patterns-Designing-Cloud-Native-Applications-ebook/dp/B07QH3JCC6/ref=sr_1_1?crid=1M8SGJX67RR5J&amp;keywords=kubernetes+patterns&amp;qid=1570073661&amp;sprefix=kubernetes%2Caps%2C335&amp;sr=8-1\">《Kubernetes Patterns》</a>这本书；针对云原生（Cloud Native）开发，也有了业界比较认可的<a href=\"https://12factor.net/zh_cn/\">12-factor原则</a>等。将来必定还会有其他新的设计模式产生。比如，伴随着AI的逐渐成熟，针对AI的设计模式必定会出现。</p><p>所以，作为一名软件开发者，我们必须要持续学习。我之前在一家创业公司时，有一个刚大学毕业两年的同事，他有一个非常好的习惯，就是每天早上比其他同事早半个小时到办公室，专门来学习和提高自己。正是因为他的持续学习，使得他虽然工作时间不长，但在整个团队里一直处于技术领先的位置。你也可以借鉴这个方法，或者采用其他适合自己的方法来持续地提升自己。</p><h2>思考题</h2><ol>\n<li>我今天提到的关于分而治之的实践，哪一条对你触动最大呢？同时，也和我分享一下你在工作实践中的感受吧。</li>\n<li>你还知道哪些编程技术方面的高效原则和实践吗？</li>\n</ol><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！</p><p></p>","neighbors":{"left":{"article_title":"20 | 答疑篇：如何平衡短期收益和长期收益？","id":144364},"right":{"article_title":"22 | 深度工作：聚焦最有价值的事儿","id":149479}},"comments":[{"had_liked":false,"id":139865,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1570757759,"is_pvip":false,"replies":[{"id":"55038","content":"不好意思这两天特别忙，回复晚了一些。<br><br>每次@Jxin的发言都很高质量。这次一样。我逐条讲一下我的看法。<br><br>1. 我原先就是想问问看大家对我在&quot;抽象和分而治之&quot;部分提到的方法，哪一个你觉得有用。不过现在看来看，的确是&quot;提高个人效能的实践，哪个更有体会&quot;这个问题更能激发大家的思考 ：）<br><br>2. &quot;过分的追求完美是在核心价值思考上的偷懒&quot;讲的真好！<br><br>3. 这个是实用主义的体现。完成目标才是最重要的。<br><br>4. 这是设计模式和简单化的权衡的问题。使用设计模式和简单化，都是方法而不是目的。目的是质量、性能、和可维护性这些东西。要根据目的选择方法。不过一般来说我会稍微偏向简单化一些。<br><br>5. 我等一下另外回复。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571410216,"ip_address":"","comment_id":139865,"utype":1}],"discussion_count":7,"race_medal":0,"score":"83175136383","product_id":100034501,"comment_content":"1.应该是提高个人效能的实践，哪个更有体会吧？<br><br>2.关于追求完美，我有点体验。原本我也是事事追求完美。但在跟完郑烨老师的&lt;10x程序员工作法&gt;后，我认可了一个观点。过分的追求完美是在核心价值思考上的偷懒。所以后面对完美的追求就变成了边际成本投入和边际收益的平衡上，依旧是追求更好，但力度更小更精准，每一行代码在写上去前都有过斟酌。<br><br>3.关于自动化，我也有点体验。我曾抱怨过项目完全没有自动化测试这一块，但测试同学都是业务测试，很无奈，然后我就自己干，结果根本撑不起来，自动化case的添加都赶不上功能需求的添加。而后，经过和测试同学的讨论，我们采用了定时任务维护测试环境数据，加半自动case覆盖（部分需要人工验证）的方式，将回归测试case集先弄起来了。从中我吸取了一个经验，一切的目的是对任务close的追求，自动化只是常用的方式，编码只是工具。不一定都要自动化，也可以说完全自动化的追求亦是一种完美追求，不利于落地。采用优先落地持续迭代才是比较科学的方案，毕竟，这样能更早的享受到回归case的好处，虽然它一开始并没有那么好用。<br><br>4.我不建议采用太多设计模式，除非非常有把握或者说这么用基本是编程泛式，不然简单才是硬道理。我在重构时，为了结构优雅去重啥会引入一些设计模式。在针对某块业务性能调优时会引入。但往往快速迭代时都只是适当做下领域抽象就上了。<br><br>5.除了高效，感觉价值导向也很重要。程序员需要持续学习，而我现在的持续学习不大一样。我现在的持续学习，往往都是工作中有什么难点，然后针对性去学习，我的目标是自己的成长要在工作中产生价值，也就是随着自己的成长团队可以持续受惠。为此，我学习管理学，okr，来科学管理团队，学习软件工程和项目管理来把控开发过程，学习市场运营和产品设计来追求价值最大化和产品合理性，学习增长思维和经济学来对齐企业战略，导向团队和项目发展。但这么做有个很大弊端，沉默成本太多，大多是专用资源，在基本只看通用资源的当下面试场景太吃亏。而且越有价值越吃亏，和企业绑太死，发现太依赖企业成长情况，对个人职业发展也道不清是利是弊。对于这种尴尬的情况，老师您有什么见解？","like_count":20,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470149,"discussion_content":"不好意思这两天特别忙，回复晚了一些。\n\n每次@Jxin的发言都很高质量。这次一样。我逐条讲一下我的看法。\n\n1. 我原先就是想问问看大家对我在&amp;quot;抽象和分而治之&amp;quot;部分提到的方法，哪一个你觉得有用。不过现在看来看，的确是&amp;quot;提高个人效能的实践，哪个更有体会&amp;quot;这个问题更能激发大家的思考 ：）\n\n2. &amp;quot;过分的追求完美是在核心价值思考上的偷懒&amp;quot;讲的真好！\n\n3. 这个是实用主义的体现。完成目标才是最重要的。\n\n4. 这是设计模式和简单化的权衡的问题。使用设计模式和简单化，都是方法而不是目的。目的是质量、性能、和可维护性这些东西。要根据目的选择方法。不过一般来说我会稍微偏向简单化一些。\n\n5. 我等一下另外回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571410216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30282,"discussion_content":"因为通用资源不够。专用资源跟所在企业直接挂钩。如果所在企业发展不好，就很难有企业会对你的专用资源买单。管理能力，软件工程能力，项目能力都挺重要，相信优秀的面试官也会加分，但你可能过不了面试，或则面不到适合谈这些的关卡。这些能力比较有价值，但没有技术栈和内功优先级高。而如果一个人在一家企业，一直增长的都是通用资源，那么说明他把大部分个人精力投在技术栈的造诣上，那么它有多少精力投在手上的老项目和业务？他掌握的先进、能谈价钱的技术栈有多少能落到现有的老项目上？他的技术越来越牛逼，但实际产生的价值有多少？你们公司有没有这样的大牛呢？你觉得这样发展怎么样？（）","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1570809408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1083868,"avatar":"https://static001.geekbang.org/account/avatar/00/10/89/dc/3c4bc06b.jpg","nickname":"囧囧冰淇淋","note":"","ucode":"ED1417FE9851B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31976,"discussion_content":"感谢回答，虽然我不是程序岗位，但这些问题很有启发。个人感觉你说的问题比较像运营里的跨行业，专用资源好比a公司的项目经验，但b公司不属于那个行业，很多都不适用了，面试官会更想要同行业一样有经验的。\n这些我目前也不明白如何处理，等等老师的思考看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570975093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30282,"ip_address":""},"score":31976,"extra":""},{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36736,"discussion_content":"这个问题我认为要回到自己的出发点来考虑。一般来说，这个出发点可能是职业发展，也可能是薪酬。一般来说，我个人会选择那些长期更符合我的职业规划的任务。具体一些的话，如果有些任务跟当前企业绑定太死，我会谨慎。因为一般不可能在一家公司待一辈子。\n\n简单来说，就是看什么是我想要的，然后分析哪些能帮助我实现目标，哪些是阻碍。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571411329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30282,"ip_address":""},"score":36736,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":36762,"discussion_content":"出发点还可能是实现价值。其实程序员，如果限定好范围，把时间专注于特殊几块技术栈上的技术积累，确实可以取巧快速坐上比较高的职位，并且屁股决定能力的行情下，还真可能hold得住。但能完全贴合这样定向发展的工作场景是不存在的，所以企业价值和个人价值就会出现分歧。而薪资和职业规划，都是偏个人价值的。倒不是说自己就有多高尚，只是自己一直想把企业价值和个人价值的发展掰在一条线（企业的掰不动，就只能自己去迎合了）。而这种态度我认为有三分是对公司的感谢，七分是对自己的追求。也许起始跨大步点，快一点，在后面的每一步产生的价值可以更大。但自己就是执拗的要小步慢走步步生莲。提问也不是说跨步的发展路线有什么不好。其实我觉得存在即合理，存在这样的取巧，意味着有它独到的诉求。程序员也是工程师，保留点做为匠人的讲究和追求，其实有时也挺棒的。而工匠薪资曲线的高点，一般都是比较靠后。所以，定心定性，不急不躁，挺难也挺重要。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571416315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":36736,"ip_address":""},"score":36762,"extra":""}]},{"author":{"id":1083868,"avatar":"https://static001.geekbang.org/account/avatar/00/10/89/dc/3c4bc06b.jpg","nickname":"囧囧冰淇淋","note":"","ucode":"ED1417FE9851B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30251,"discussion_content":"\n我不太理解最后的问题:沉默成本太多，大多是专用资源，越有价值还越吃亏。\n按我理解，jxin至少是中高层领导，他和他团队效能和业绩都提升，给企业也创造了更多价值，为什么出去还越吃亏？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570807516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140315,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1570876205,"is_pvip":true,"replies":[{"id":"55026","content":"👍👍👍","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571407612,"ip_address":"","comment_id":140315,"utype":1}],"discussion_count":1,"race_medal":1,"score":"31635647277","product_id":100034501,"comment_content":"很久以前看到的一句话，也是经常给团队说的一句话：没有什么问题是分层不能解决的，如果不能解决，那再加一个分层。<br><br>抽象和分而治之是从事这个行业的基本素质。","like_count":8,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470342,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571407612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160835,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1576043840,"is_pvip":true,"replies":[{"id":"61365","content":"谢谢分享！<br>","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1576072721,"ip_address":"","comment_id":160835,"utype":1}],"discussion_count":2,"race_medal":1,"score":"10165978432","product_id":100034501,"comment_content":"《Kubernetes Patterns》已开源可免费下载：https:&#47;&#47;k8spatterns.io&#47;","like_count":3,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477496,"discussion_content":"谢谢分享！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576072721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656804,"avatar":"https://static001.geekbang.org/account/avatar/00/19/47/e4/17cb3df1.jpg","nickname":"BBQ","note":"","ucode":"683BBF7F7AE370","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372382,"discussion_content":"感谢，已经下载","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620303650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140075,"user_name":"仙女的猪","can_delete":false,"product_type":"c1","uid":1298570,"ip_address":"","ucode":"82E5382A9082FE","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/8a/27354271.jpg","comment_is_top":false,"comment_ctime":1570802661,"is_pvip":false,"replies":[{"id":"55036","content":"我当时花了蛮多时间慢慢看的。没有什么具体的方法。<br><br>现在回过头看，可以参考一些别人写得Summary，看看哪些部分最感兴趣，也可帮助自己更快掌握全局：<br>- https:&#47;&#47;github.com&#47;mgp&#47;book-notes&#47;blob&#47;master&#47;code-complete.markdown<br>- https:&#47;&#47;medium.com&#47;@crossphd&#47;code-complete-review-chapter-1-welcome-to-software-construction-3284e15b0a4","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571408245,"ip_address":"","comment_id":140075,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10160737253","product_id":100034501,"comment_content":"老师你提到了「Code Complete」这本书，真好最近买了，当我收到快递，看到这本书的厚度时，我已经傻眼了，基本上是一张身份证的宽度<br><br>所以希望您能给我一些建议，怎么来读这本书","like_count":3,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470234,"discussion_content":"我当时花了蛮多时间慢慢看的。没有什么具体的方法。\n\n现在回过头看，可以参考一些别人写得Summary，看看哪些部分最感兴趣，也可帮助自己更快掌握全局：\n- https://github.com/mgp/book-notes/blob/master/code-complete.markdown\n- https://medium.com/@crossphd/code-complete-review-chapter-1-welcome-to-software-construction-3284e15b0a4","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571408245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1086090,"avatar":"https://static001.geekbang.org/account/avatar/00/10/92/8a/e86a8db7.jpg","nickname":"文中","note":"","ucode":"44C48F126034DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232641,"discussion_content":"我的倾向是找感兴趣的点读，CC2 里部分内容还是需要积累一定的工作经验，读起来才会有共鸣或者引起反思。过一段时间再翻翻目录，说不定又有一些新的兴趣点了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586874349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206522,"user_name":"文中","can_delete":false,"product_type":"c1","uid":1086090,"ip_address":"","ucode":"44C48F126034DC","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/8a/e86a8db7.jpg","comment_is_top":false,"comment_ctime":1586873895,"is_pvip":false,"replies":[{"id":"77964","content":"你的自动化做的很不错啊！谢谢分享！","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1587402630,"ip_address":"","comment_id":206522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881841191","product_id":100034501,"comment_content":"要重复超过三次，且机器做会更有效更迅速的事情，我就会将它自动化。<br>例如：<br>- 要搭新项目的时候，要创建新工程，做一系列的 DevOps 相关配置、IaaS 资源申请和绑定，就可以通过一些脚手架来自动化<br>- 指标的上报做到 Controller 的注解和 RPC Client 的基类中，再在 Prometheus 实现无差别的默认监控报警规则，确保每次有新功能上线，指标上报和报警规则都能自动上线，不会有报警漏掉。有不合理的阈值，再增加额外的报警规则进行处理。有报警来了，通过将报警输入一个报警分析服务，自动捞出可能相关的系统日志，即可大致判断异常来源，自己问题自己爬起来修，不是自己问题就可以安心交给上下游的系统继续处理。<br>- 通过 flyway 恢复 在 git 中管理的 mysql 建表语句和基础数据，自动化测试数据维护。<br>- 整理大家的周报，做数据统计，一个个人看比较低效。让大家按规定格式上报，自己再写一个脚本来分析，省时省力。","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491818,"discussion_content":"你的自动化做的很不错啊！谢谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587402630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140317,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1570876510,"is_pvip":true,"replies":[{"id":"55025","content":"是的。运维相关工作很多不需要界面，重复性也比较明显。DRY合适。我的经验，python和nodejs挺适合写一些自动化的小工具的。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571407602,"ip_address":"","comment_id":140317,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5865843806","product_id":100034501,"comment_content":"DRY对于日常工作来说也很重要，尤其是当你的工作和运维相关时，比如<br>1. 编译打包部署整个流程，不使用DevOps的话，会有大量的没有什么价值的重复工作。<br>2. 各种日常报表的生成和维护，可以自己开发程序或者用Excel宏来生成。","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470343,"discussion_content":"是的。运维相关工作很多不需要界面，重复性也比较明显。DRY合适。我的经验，python和nodejs挺适合写一些自动化的小工具的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571407602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139908,"user_name":"兴国","can_delete":false,"product_type":"c1","uid":1104420,"ip_address":"","ucode":"5AEA4FBF662BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/24/afa9214a.jpg","comment_is_top":false,"comment_ctime":1570764371,"is_pvip":true,"replies":[{"id":"55037","content":"👍👍👍","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571408281,"ip_address":"","comment_id":139908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865731667","product_id":100034501,"comment_content":"代码重复是在写代码时比较反感的地方，常量重复、逻辑重复等都会造成后期的难以维护。<br>代码提交前没有充分自测，提交后阻塞别人开发。这点也是平常需要加强的。<br>抽象和分而治之这点，有时在接到新需求时，也要考虑对现有的系统的影响范围以及是否能够在原来的系统上和代码上再次抽象，不只是新增代码。","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470168,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571408281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139816,"user_name":"李双","can_delete":false,"product_type":"c1","uid":1063119,"ip_address":"","ucode":"5148D07BDDBB46","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/cf/f2c7d021.jpg","comment_is_top":false,"comment_ctime":1570751898,"is_pvip":false,"replies":[{"id":"54010","content":"Code Complete 这本书当年给我印象最深刻的一点就是关于复杂度处理的讨论。这么些年工作下来，的确程序写得好就是复杂性处理得好。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1570757624,"ip_address":"","comment_id":139816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865719194","product_id":100034501,"comment_content":"抽象和分而治之！","like_count":2,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470124,"discussion_content":"Code Complete 这本书当年给我印象最深刻的一点就是关于复杂度处理的讨论。这么些年工作下来，的确程序写得好就是复杂性处理得好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570757624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291481,"user_name":"BBQ","can_delete":false,"product_type":"c1","uid":1656804,"ip_address":"","ucode":"683BBF7F7AE370","user_header":"https://static001.geekbang.org/account/avatar/00/19/47/e4/17cb3df1.jpg","comment_is_top":false,"comment_ctime":1620303010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620303010","product_id":100034501,"comment_content":"感谢 Jason 老师，特别是老师提到的黄金圈方法，以及老师根据黄金圈的 why-what-how  组织内容。这也和有的老师收的先掌握事务的本质，形成树干，再丰富树枝不谋而合。比如之前也看过设计模式等，但看完后不明所以，在工作中也不能灵活应用。<br>今天才发现这些问题的本质都是如何更好的抽象和分而治之。从本质再看各种设计模式，J2EE模式，乃至 K8S模式，AI 模式，安排得明明白白的。","like_count":0},{"had_liked":false,"id":149446,"user_name":"qeesung","can_delete":false,"product_type":"c1","uid":1026489,"ip_address":"","ucode":"E071B2ECF83C77","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/b9/ea13efe6.jpg","comment_is_top":false,"comment_ctime":1573221269,"is_pvip":false,"replies":[{"id":"57941","content":"Kent Beck 的这个Quora回答，推荐你看看。https:&#47;&#47;www.quora.com&#47;Does-Kent-Beck-use-TDD-at-Facebook-How&#47;answer&#47;Kent-Beck<br><br>我很赞同他说的第一性原则：你对你的代码质量负责。TDD是实现这个目标的一个工具。适当的地方使用非常好！","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1573574525,"ip_address":"","comment_id":149446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573221269","product_id":100034501,"comment_content":"我认为TDD是一个高效的原则。在以往的开发过程中，总是先实现代码，然后再进行测试，最后发现无法测试，代码的抽象不够，耦合太严重，浓浓的坏代码的味道。<br><br>通过TDD：<br>1. 至少代码是可以测试的，后面如果重构，修改需求也可以很快迭代<br>2. 测试来驱动代码设计。整个开发过程反了过来，先写测试，然后再去开发，那么就会强迫你去让你的代码可测试，耦合严重的代码可没那么容易测试，那么在一定程度上可以减少代码耦合度，提升抽象度","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473866,"discussion_content":"Kent Beck 的这个Quora回答，推荐你看看。https://www.quora.com/Does-Kent-Beck-use-TDD-at-Facebook-How/answer/Kent-Beck\n\n我很赞同他说的第一性原则：你对你的代码质量负责。TDD是实现这个目标的一个工具。适当的地方使用非常好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573574525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140626,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1571017888,"is_pvip":false,"replies":[{"id":"55019","content":"嗯，没人回答。你自己呢？","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1571406249,"ip_address":"","comment_id":140626,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1571017888","product_id":100034501,"comment_content":"每天来学习的同事主要学习技术，方法论还是工具呢？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470477,"discussion_content":"嗯，没人回答。你自己呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571406249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38716,"discussion_content":"个人效能有几篇适合在电脑上边看边练习 ：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571822710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2363368,"avatar":"","nickname":"walnut","note":"","ucode":"AF379E153E7499","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334783,"discussion_content":"都有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607990930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044175,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","nickname":"ヾ(◍°∇°◍)ﾉﾞ","note":"","ucode":"89545632BDA56E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36846,"discussion_content":"在地铁上喜欢听方法论，比较轻松些，回顾的时候把没认真听的部分重点看看，心里会有几个地方的技术或工具需要掌握的，等待有空闲准备在电脑上学习使用一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571450620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}