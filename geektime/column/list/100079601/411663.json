{"id":411663,"title":"40 | 软件部署实战（上）：部署方案及负载均衡、高可用组件介绍","content":"<p>你好，我是孔令飞。</p><p>接下来，我们就进入到这门课的最后一个模块，服务部署部分的学习。在这一模块中，我会带着你一步一步地部署一个生产级可用的IAM应用。</p><p>在 <a href=\"https://time.geekbang.org/column/article/378082\">03讲</a> 中，我们快速在单机上部署了IAM系统，但这样的系统缺少高可用、弹性扩容等能力，是很脆弱的，遇到流量波峰、发布变更很容易出问题。在系统真正上线前，我们需要重新调整部署架构，来保证我们的系统具有负载均衡、高可用、弹性伸缩等核心运维能力。</p><p>考虑到你手中的系统资源有限，这一模块会尽量简单地展示如何部署一个相对高可用的IAM系统。按照我讲的部署方法，基本上可以上线一个中小型的系统。</p><p>在这一模块中，我会介绍两种部署方式。</p><p>第一种是传统的部署方式，基于物理机/虚拟机来部署，容灾、弹性伸缩能力要部署人员自己实现。第二种是容器化部署方式，基于Docker、Kubernetes来部署，容灾、弹性伸缩等能力，可以借助Kubernetes自带的能力来实现。</p><p>接下来的三讲，我们先来看下传统的部署方式，也就是如何基于虚拟机来部署IAM应用。今天我主要讲跟IAM部署相关的两个组件，Nginx + Keepalived的相关功能。</p><h2>部署方案</h2><p>先来整体看下我们的部署方案。</p><p>这里，我采用Nginx + Keepalived来部署一个高可用的架构，同时将组件都部署在内网，来保证服务的安全和性能。</p><!-- [[[read_end]]] --><p>部署需要两台物理机/虚拟机，组件之间通过内网访问。所需的服务器如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/1d/e0a3323831768fbe7f45085ca4a53a1d.jpg?wh=1920x719\" alt=\"图片\"></p><p>两台服务器均为腾讯云CVM，VIP（Virtual IP，虚拟IP）为<code>10.0.4.99</code>。部署架构如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/9d/fc5331a780d45a7de6223d6ff3c86f9d.jpg?wh=1920x1197\" alt=\"图片\"></p><p>这里我来具体介绍下图中的部署架构。部署采用的这两台CVM服务器，一主一备，它们共享同一个VIP。同一时刻，VIP只在一台主设备上生效，当主服务器出现故障时，备用服务器会自动接管VIP，继续提供服务。</p><p>主服务器上部署了<code>iam-apiserver</code>、<code>iam-authz-server</code>、<code>iam-pump</code>和数据库<code>mongodb</code>、<code>redis</code>、<code>mysql</code>。备服务器部署了<code>iam-apiserver</code>、<code>iam-authz-server</code>和<code>iam-pump</code>。备服务器中的组件通过内网<code>10.0.4.20</code>访问主服务器中的数据库组件。</p><p>主备服务器同时安装了Keepalived和Nginx，通过Nginx的反向代理功能和负载均衡功能，实现后端服务<code>iam-apiserver</code>和<code>iam-authz-server</code>的高可用，通过Keepalived实现Nginx的高可用。</p><p>我们通过给虚拟IP绑定腾讯云弹性公网IP，从而使客户端可以通过外网IP访问内网的Nginx服务器（<code>443</code>端口），如果想通过域名访问内网，还可以申请域名指向该弹性公网IP。</p><p>通过以上部署方案，我们可以实现一个具有较高可用性的IAM系统，它主要具备下面这几个能力。</p><ul>\n<li>高性能：可以通过Nginx的负载均衡功能，水平扩容IAM服务，从而实现高性能。</li>\n<li>具备容灾能力：通过Nginx实现IAM服务的高可用，通过Keepalived实现Nginx的高可用，从而实现核心组件的高可用。</li>\n<li>具备水平扩容能力：通过Nginx的负载均衡功能，实现IAM服务的水平扩容。</li>\n<li>高安全性：将所有组件部署在内网，客户端只能通过<code>VIP:443</code>端口访问Nginx服务，并且通过开启TLS认证和JWT认证，保障服务有一个比较高的安全性。因为是腾讯云CVM，所以也可以借助腾讯云的能力再次提高服务器的安全性，比如安全组、DDoS防护、主机安全防护、云监控、云防火墙等。</li>\n</ul><p>这里说明下，为了简化IAM应用的安装配置过程，方便你上手实操，有些能力，例如数据库高可用、进程监控和告警、自动伸缩等能力的构建方式，这里没有涉及到。这些能力的构建方式，你可以在日后的工作中慢慢学习和掌握。</p><p>接下来，我们看下这个部署方案中用到的两个核心组件，Nginx和Keepalived。我会介绍下它们的安装和配置方法，为你下一讲的学习做准备。</p><h2>Nginx安装和配置</h2><h3>Nginx功能简介</h3><p>这里先简单介绍下Nginx。Nginx是一个轻量级、高性能、开源的HTTP服务器和反向代理服务器。IAM系统使用了Nginx反向代理和负载均衡的功能，下面我就来分别介绍下。</p><p>为什么需要反向代理呢？在实际的生产环境中，服务部署的网络（内网）跟外部网络（外网）通常是不通的，这就需要一台既能够访问内网又能够访问外网的服务器来做中转，这种服务器就是反向代理服务器。Nginx作为反向代理服务器，简单的配置如下：</p><pre><code class=\"language-plain\">server {\n&nbsp; &nbsp; listen&nbsp; &nbsp; &nbsp; 80;\n&nbsp; &nbsp; server_name&nbsp; iam.marmotedu.com;\n&nbsp; &nbsp; client_max_body_size 1024M;\n\n&nbsp; &nbsp; location / {\n&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header Host $http_host;\n&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Forwarded-Host $http_host;\n&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Real-IP $remote_addr;\n&nbsp; &nbsp; &nbsp; &nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n&nbsp; &nbsp; &nbsp; &nbsp; proxy_pass&nbsp; http://127.0.0.1:8080/;\n&nbsp; &nbsp; &nbsp; &nbsp; client_max_body_size 100m;\n&nbsp; &nbsp; }\n}\n</code></pre><p>Nginx的反向代理功能，能够根据不同的配置规则转发到不同的后端服务器上。假如我们在IP为<code>x.x.x.x</code>的服务器上，用上面说的Nginx配置启动Nginx，当我们访问<code>http://x.x.x.x:80/</code>时，会将请求转发到<code>http://127.0.0.1:8080/</code>。<code>listen      80</code>指定了Nginx服务器的监听端口，<code>proxy_pass  http://127.0.0.1:8080/</code>则指定了转发路径。</p><p>Nginx另一个常用的功能是七层负载均衡。所谓的负载均衡，就是指当Nginx收到一个HTTP请求后，会根据负载策略将请求转发到不同的后端服务器上。比如iam-apiserver部署在两台服务器A和B上，当请求到达Nginx后，Nginx会根据A和B服务器上的负载情况，将请求转发到负载较小的那台服务器上。</p><p>这里要求iam-apiserver是无状态的服务。Nginx有多种负载均衡策略，可以满足不同场景下的负载均衡需求。</p><h3><strong>Nginx安装步骤</strong></h3><p>接下来，我就来介绍下如何安装和配置Nginx。</p><p>我们分别在<code>10.0.4.20</code>和<code>10.0.4.21</code>服务器上执行如下步骤，安装Nginx。</p><p>在CentOS 8.x系统上，我们可以使用yum命令来安装，具体安装过程可以分为下面4个步骤。</p><p>第一步，安装Nginx：</p><pre><code class=\"language-bash\">$ sudo yum -y install nginx\n</code></pre><p>第二步，确认Nginx安装成功：</p><pre><code class=\"language-bash\">$ nginx -v\nnginx version: nginx/1.14.1\n</code></pre><p>第三步，启动Nginx，并设置开机启动：</p><pre><code class=\"language-bash\">$ sudo systemctl start nginx\n$ sudo systemctl enable nginx\n</code></pre><p>Nginx默认监听<code>80</code>端口，启动Nginx前要确保<code>80</code>端口没有被占用。当然，你也可以通过修改Nginx配置文件<code>/etc/nginx/nginx.conf</code>修改Nginx监听端口。</p><p>第四步，查看Nginx启动状态：</p><pre><code class=\"language-bash\">$ systemctl status nginx\n</code></pre><p>输出中有<code>active (running)</code>字符串，说明成功启动。如果Nginx启动失败，你可以查看<code>/var/log/nginx/error.log</code>日志文件，定位错误原因。</p><h2>Keepalived安装和配置</h2><p>Nginx自带负载均衡功能，并且当Nginx后端某个服务器故障后，Nginx会自动剔除该服务器，将请求转发到可用的服务器，通过这种方式实现后端API服务的高可用。但是 Nginx是单点的，如果Nginx挂了，后端的所有服务器就都不能访问，所以在实际生产环境中，也需要对Nginx做高可用。</p><p>业界最普遍采用的方法是通过Keepalived对前端Nginx实现高可用。Keepalived + Nginx的高可用方案具有服务功能强大、维护简单等特点。</p><p>接下来，我们来看下如何安装和配置Keepalived。</p><h3>Keepalived安装步骤</h3><p>我们分别在<code>10.0.4.20</code>和<code>10.0.4.21</code>服务器上执行下面5个步骤，安装Keepalived。</p><p>第一步，下载Keepalived的最新版本（这门课安装了当前的最新版本 <code>2.1.5</code>）：</p><pre><code class=\"language-bash\">$ wget https://www.keepalived.org/software/keepalived-2.1.5.tar.gz\n</code></pre><p>第二步，安装Keepalived：</p><pre><code class=\"language-bash\">$ sudo yum -y install openssl-devel # keepalived依赖OpenSSL，先安装依赖\n$ tar -xvzf keepalived-2.1.5.tar.gz\n$ cd keepalived-2.1.5\n$ ./configure --prefix=/usr/local/keepalived\n$ make\n$ sudo make install\n</code></pre><p>第三步，配置Keepalived：</p><pre><code class=\"language-bash\">$ sudo mkdir /etc/keepalived # 安装后，默认没有创建/etc/keepalived目录\n$ sudo cp /usr/local/keepalived/etc/keepalived/keepalived.conf  /etc/keepalived/keepalived.conf\n$ sudo cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived\n</code></pre><p>Keepalived的systemd uint配置，默认使用了<code>/usr/local/keepalived/etc/sysconfig/keepalived</code>作为其<code>EnvironmentFile</code>，我们还需要把它修改为<code>/etc/sysconfig/keepalived</code>文件。编辑<code>/lib/systemd/system/keepalived.service</code>文件，设置<code>EnvironmentFile</code>，值如下：</p><pre><code class=\"language-bash\">EnvironmentFile=-/etc/sysconfig/keepalived\n</code></pre><p>第四步，启动Keepalived，并设置开机启动：</p><pre><code class=\"language-bash\">$ sudo systemctl start keepalived\n$ sudo systemctl enable keepalived\n</code></pre><p>这里要注意，Keepalived启动时不会校验配置文件是否正确，所以我们要小心修改配置，防止出现意想不到的问题。</p><p>第五步，查看Keepalived的启动状态：</p><pre><code class=\"language-bash\">$ systemctl status keepalived\n</code></pre><p>输出中有<code>active (running)</code>字符串，说明成功启动。Keepalived的日志保存在<code>/var/log/messages</code>中，你有需要的话可以查看。</p><h3>Keepalived配置文件解析</h3><p>Keepalived的默认配置文件为<code>/etc/keepalived/keepalived.conf</code>，下面是一个Keepalived配置：</p><pre><code class=\"language-plain\"># 全局定义，定义全局的配置选项\nglobal_defs {\n# 指定keepalived在发生切换操作时发送email，发送给哪些email\n# 建议在keepalived_notify.sh中发送邮件\n&nbsp; notification_email {\n&nbsp; &nbsp; acassen@firewall.loc\n&nbsp; }\n&nbsp; notification_email_from Alexandre.Cassen@firewall.loc # 发送email时邮件源地址\n&nbsp; &nbsp; smtp_server 192.168.200.1 # 发送email时smtp服务器地址\n&nbsp; &nbsp; smtp_connect_timeout 30 # 连接smtp的超时时间\n&nbsp; &nbsp; router_id VM-4-21-centos # 机器标识，通常可以设置为hostname\n&nbsp; &nbsp; vrrp_skip_check_adv_addr # 如果接收到的报文和上一个报文来自同一个路由器，则不执行检查。默认是跳过检查\n&nbsp; &nbsp; vrrp_garp_interval 0 # 单位秒，在一个网卡上每组gratuitous arp消息之间的延迟时间，默认为0\n&nbsp; &nbsp; vrrp_gna_interval 0 # 单位秒，在一个网卡上每组na消息之间的延迟时间，默认为0\n}\n# 检测脚本配置\nvrrp_script checkhaproxy\n{\n&nbsp; script \"/etc/keepalived/check_nginx.sh\" # 检测脚本路径\n&nbsp; &nbsp; interval 5 # 检测时间间隔（秒）\n&nbsp; &nbsp; weight 0 # 根据该权重改变priority，当值为0时，不改变实例的优先级\n}\n# VRRP实例配置\nvrrp_instance VI_1 {\n&nbsp; state BACKUP&nbsp; # 设置初始状态为'备份'\n&nbsp; &nbsp; interface eth0 # 设置绑定VIP的网卡，例如eth0\n&nbsp; &nbsp; virtual_router_id 51&nbsp; # 配置集群VRID，互为主备的VRID需要是相同的值\n&nbsp; &nbsp; nopreempt&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 设置非抢占模式，只能设置在state为backup的节点上\n&nbsp; &nbsp; priority 50 # 设置优先级，值范围0～254，值越大优先级越高，最高的为master\n&nbsp; &nbsp; advert_int 1 # 组播信息发送时间间隔，两个节点必须设置一样，默认为1秒\n# 验证信息，两个节点必须一致\n&nbsp; &nbsp; authentication {\n&nbsp; &nbsp; &nbsp; auth_type PASS # 认证方式，可以是PASS或AH两种认证方式\n&nbsp; &nbsp; &nbsp; &nbsp; auth_pass 1111 # 认证密码\n&nbsp; &nbsp; }\n&nbsp; unicast_src_ip 10.0.4.21&nbsp; # 设置本机内网IP地址\n&nbsp; &nbsp; unicast_peer {\n&nbsp; &nbsp; &nbsp; 10.0.4.20&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 对端设备的IP地址\n&nbsp; &nbsp; }\n# VIP，当state为master时添加，当state为backup时删除\n&nbsp; virtual_ipaddress {\n&nbsp; &nbsp; 10.0.4.99 # 设置高可用虚拟VIP，如果是腾讯云的CVM，需要填写控制台申请到的HAVIP地址。\n&nbsp; }\n&nbsp; notify_master \"/etc/keepalived/keepalived_notify.sh MASTER\" # 当切换到master状态时执行脚本\n&nbsp; &nbsp; notify_backup \"/etc/keepalived/keepalived_notify.sh BACKUP\" # 当切换到backup状态时执行脚本\n&nbsp; &nbsp; notify_fault \"/etc/keepalived/keepalived_notify.sh FAULT\" # 当切换到fault状态时执行脚本\n&nbsp; &nbsp; notify_stop \"/etc/keepalived/keepalived_notify.sh STOP\" # 当切换到stop状态时执行脚本\n&nbsp; &nbsp; garp_master_delay 1&nbsp; &nbsp; # 设置当切为主状态后多久更新ARP缓存\n&nbsp; &nbsp; garp_master_refresh 5&nbsp; &nbsp;# 设置主节点发送ARP报文的时间间隔\n&nbsp; &nbsp; # 跟踪接口，里面任意一块网卡出现问题，都会进入故障(FAULT)状态\n&nbsp; &nbsp; track_interface {\n&nbsp; &nbsp; &nbsp; eth0\n&nbsp; &nbsp; }\n&nbsp; # 要执行的检查脚本\n&nbsp; track_script {\n&nbsp; &nbsp; checkhaproxy\n&nbsp; }\n}\n</code></pre><p>这里解析下配置文件，大致分为下面4个部分。</p><ul>\n<li>global_defs：全局定义，定义全局的配置选项。</li>\n<li>vrrp_script checkhaproxy：检测脚本配置。</li>\n<li>vrrp_instance VI_1：VRRP实例配置。</li>\n<li>virtual_server：LVS配置。如果没有配置LVS+Keepalived，就不用设置这个选项。这门课中，我们使用Nginx代替LVS，所以无需配置<code>virtual_server</code>（配置示例中不再展示）。</li>\n</ul><p>只有在网络故障或者自身出问题时，Keepalived才会进行VIP切换。但实际生产环境中，我们往往使用Keepalived来监控其他进程，当业务进程出故障时切换VIP，从而保障业务进程的高可用。</p><p>为了让Keepalived感知到Nginx的运行状况，我们需要指定<code>vrrp_script</code>脚本，<code>vrrp_script</code>脚本可以根据退出码，判断Nginx进程是否正常，<code>0</code>正常，非<code>0</code>不正常。当不正常时，Keepalived会进行VIP切换。为了实现业务进程的监控，我们需要设置<code>vrrp_script</code>和<code>track_script</code>：</p><pre><code class=\"language-plain\">vrrp_script checkhaproxy\n{\n&nbsp; &nbsp; script \"/etc/keepalived/check_nginx.sh\"\n&nbsp; &nbsp; interval 3\n&nbsp; &nbsp; weight -20\n}\n\nvrrp_instance test\n{\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; track_script\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; checkhaproxy\n&nbsp; &nbsp; }\n&nbsp; &nbsp; ...\n}\n</code></pre><p>这里，我介绍下上面配置中的一些配置项。</p><ul>\n<li>script：指定脚本路径。</li>\n<li>interval：表示Keepalived执行脚本的时间间隔（秒）。</li>\n<li>weight：检测权重，可以改变<code>priority</code>的值。例如，<code>-20</code>表示检测失败时，优先级<code>-20</code>，成功时不变。<code>20</code>表示检测成功时，优先级<code>+20</code>，失败时不变。</li>\n</ul><h2>总结</h2><p>今天我主要讲了跟IAM部署相关的两个组件，Nginx + Keepalived的相关功能。</p><p>我们可以基于物理机/虚拟机来部署IAM应用，在部署IAM应用时，需要确保整个应用具备高可用和弹性扩缩容能力。你可以通过Nginx的反向代理功能和负载均衡功能实现后端服务iam-apiserver和iam-authz-server的高可用，通过Keepalived实现Nginx的高可用，通过Nginx + Keepalived组合，来实现IAM应用的高可用和弹性伸缩能力。</p><h2>课后练习</h2><ol>\n<li>Keepalived的主备服务器要接在同一个交换机上。思考下，如果交换机故障，如何实现整个系统的高可用？</li>\n<li>iam-pump是有状态的服务，思考下，如何实现iam-pump的高可用？</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","comments":[{"had_liked":false,"id":309074,"user_name":"Realm","can_delete":false,"product_type":"c1","uid":1081299,"ip_address":"","ucode":"30CBEBE619D1A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","comment_is_top":false,"comment_ctime":1629934895,"is_pvip":true,"replies":[{"id":"112017","content":"高抬不通交换机的机器，一台出故障，另一台可以手动切换","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630112994,"ip_address":"","comment_id":309074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18809804079","product_id":100079601,"comment_content":"1 可以把交换机搞成堆叠模式，服务器分别接在两个不同的交换机上，可以减少单点故障。可以看看这篇文章https:&#47;&#47;blog.51cto.com&#47;netlt&#47;2589364<br><br>2 有状态一般是cookie或者session，负载均衡支持基于cookie的会话保持，开启后，相同cookie的http请求，始终打到某一个服务端.<br><br>请老师指点！","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525734,"discussion_content":"高抬不通交换机的机器，一台出故障，另一台可以手动切换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309248,"user_name":"daz2yy","can_delete":false,"product_type":"c1","uid":1008723,"ip_address":"","ucode":"639A67961EC893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/53/c93b8110.jpg","comment_is_top":false,"comment_ctime":1630021387,"is_pvip":false,"replies":[{"id":"112013","content":"Nginx不带VIP的能力。Keepalived的高可用通过VRRP技术来实现的","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630112768,"ip_address":"","comment_id":309248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10219955979","product_id":100079601,"comment_content":"Nginx 确保服务的高可用；<br>Keepalived 确保 Nginx 的高可用；<br>谁来保证 Keepalived 的高可用呢？感觉如果能确保 Keepalived 的高可用，那么去掉这一层，把保证 Keepalived 高可用的方式应用到保证 Nginx 的高可用上不是简单一些吗？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525798,"discussion_content":"Nginx不带VIP的能力。Keepalived的高可用通过VRRP技术来实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333853,"user_name":"张靖","can_delete":false,"product_type":"c1","uid":1243566,"ip_address":"","ucode":"18AF868CCAA9D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ae/ca227c21.jpg","comment_is_top":false,"comment_ctime":1644563744,"is_pvip":true,"replies":[{"id":"123449","content":"6666","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1647039633,"ip_address":"","comment_id":333853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644563744","product_id":100079601,"comment_content":"iam-pump 个人理解，还没有看服务相关源码，如果是有状态的比如session,可以通过session同步或异步复制。 或者通过一致性hash 在固定节点处理<br><br>鸡蛋篮子理论，高可用一般都是多副本的，采用Quorum 机制 控制多副本数据一致性，保证半数写入","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555709,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647039633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324798,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1638630287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638630287","product_id":100079601,"comment_content":"总结：<br>为了实现IAM应用的高可用，以传统的方式，部署并配置Nginx 和 Keepalived。<br>Keepalived保证了Nginx服务的高可用；Nginx保证了IAM应用的高可用。<br>Nginx的两大功能：1. 返现代理；2. 负载均衡。","like_count":0},{"had_liked":false,"id":323961,"user_name":"阿甘","can_delete":false,"product_type":"c1","uid":1057843,"ip_address":"","ucode":"BC93175B70E05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/33/bcf37f50.jpg","comment_is_top":false,"comment_ctime":1638241021,"is_pvip":true,"replies":[{"id":"117674","content":"这个是keepalived的限制，暂时应该没法避免吧。<br><br>可以这么来，同机架使用keepalived做热备。不同机架手动切（冷备）","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638361869,"ip_address":"","comment_id":323961,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638241021","product_id":100079601,"comment_content":"老师你好，使用Keepalived做VIP failover要求VIP和后端RIPs必须在同一个网段，但是有时候MASTER和BACKUP可能就不在一个网段，比如出于容灾的需要，MASTER和BACKUP位于不同的机架，这时候他们就不会处于同一个子网中。那么这种情况下，怎样使用Keepalived做VIP failover呢？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535152,"discussion_content":"这个是keepalived的限制，暂时应该没法避免吧。\n\n可以这么来，同机架使用keepalived做热备。不同机架手动切（冷备）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638361869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316929,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1634616140,"is_pvip":true,"replies":[{"id":"114910","content":"这里的VIP还不一定是公网，也有可能是内网。","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634736489,"ip_address":"","comment_id":316929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634616140","product_id":100079601,"comment_content":"「客户端只能通过VIP:443端口访问 Nginx 服务」是否可修改为：「客户端只能通过公网IP:443端口访问 Nginx 服务」?","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528574,"discussion_content":"这里的VIP还不一定是公网，也有可能是内网。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634736489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311316,"user_name":"随风而过","can_delete":false,"product_type":"c1","uid":2654999,"ip_address":"","ucode":"FFD17BAA3B2312","user_header":"https://static001.geekbang.org/account/avatar/00/28/83/17/df99b53d.jpg","comment_is_top":false,"comment_ctime":1631169822,"is_pvip":false,"replies":[{"id":"113692","content":"是个方案","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632760193,"ip_address":"","comment_id":311316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631169822","product_id":100079601,"comment_content":"多台交换机做备用，监测交换机状态","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526558,"discussion_content":"是个方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632760193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309282,"user_name":"kkgo","can_delete":false,"product_type":"c1","uid":1199356,"ip_address":"","ucode":"AFCCBFD96CFA21","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/fc/0e887697.jpg","comment_is_top":false,"comment_ctime":1630030650,"is_pvip":false,"replies":[{"id":"112012","content":"老哥，请看下一讲","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630112607,"ip_address":"","comment_id":309282,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1630030650","product_id":100079601,"comment_content":"怎么做nginx负载均衡？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525811,"discussion_content":"老哥，请看下一讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309209,"user_name":"XI","can_delete":false,"product_type":"c1","uid":2187234,"ip_address":"","ucode":"2CEBC094EA1E87","user_header":"https://static001.geekbang.org/account/avatar/00/21/5f/e2/e6d3d9bf.jpg","comment_is_top":false,"comment_ctime":1629986068,"is_pvip":false,"replies":[{"id":"112014","content":"具体要看机器配置了。你可以参考2C8G的并发","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630112801,"ip_address":"","comment_id":309209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629986068","product_id":100079601,"comment_content":"老师，单台gin框架应该起多少goroutine性能才是最优的啊，100 个1000个？，单台服务器起能抗住多少的并发啊？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525787,"discussion_content":"具体要看机器配置了。你可以参考2C8G的并发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309105,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1629945199,"is_pvip":false,"replies":[{"id":"112015","content":"对的，只能采用冷备了。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630112825,"ip_address":"","comment_id":309105,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1629945199","product_id":100079601,"comment_content":"对于如果交换机故障，如何实现整个系统的高可用？<br><br>其一采用备份交换机，当云解析到主交换机不同之后，把请求路由到备份交换机上，主交换机和备份交换机都指向同一后台服务器<br><br>其二可以采用备份服务器集群，与主服务器集群一致，备灾使用","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525742,"discussion_content":"对的，只能采用冷备了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}