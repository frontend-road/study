{"id":145875,"title":"14 | 别有洞天：从后端到前端","content":"<p>你好，我是四火。</p><p>前两章我们分别介绍了网络协议和 Web 接口的知识，以及网站等应用的 MVC 架构和其衍生发展而来的各种设计模式。以上希望你已经充分消化吸收了，今天我们将迈入第三大基于 Web 的全栈技能领域——前端。</p><h2>为什么要学习前端技术？</h2><p>“前端”简简单单两个字，背后却有着纷繁的故事和复杂的情感。这也促使我产生了想多聊一聊这个话题的想法，一般的技术在“为什么要学”的方面我往往简言述之，但对于前端技术我想为此破例。</p><p>前端一直以来是一个颇具争议的领域，有人极其喜爱，有人避而远之，和多数“天下太平”的技术相比，这确实有些令人费解，但我认为这其中的原因至少包括这样两点。</p><p>第一，某些技术人员或管理者单项技术进步，但思想却依然陈旧迂腐，停留在“前端就是改改页面”这样老旧的思维程度，认为前端没有技术含量且无法创造显著价值。</p><p>第二，相对于软件领域的通用技术，前端极低的入门门槛，导致号称“懂前端”的工程师技术水准严重参差不齐，这反向影响了整个技术群体的形象。</p><p>如果你志在学习全栈工程，前端就自然是你无法避开，且还需努力驾驭的领域。但即便你的长期目标不在此，也应该学习前端技术，因为它能给你带来的好处是多方面，且是别的技术所不可替代的。具体包括这样几个方面。</p><!-- [[[read_end]]] --><p><strong>首先，它可以帮助你开阔眼界，为你的思维模式带来新的选项，整个全栈技术都有这样的特点，但是前端技术在这方面尤其明显。</strong>前端技术的结构和软件其它领域有着显著的不同，技术发展极其迅速，技术之水深不见底，开源社区百花齐放。我们也将在本章中体会到前端领域所需要的不同的思维模式。</p><p><strong>其次，它可以帮助你形成快速原型、即时验证和独立展示演示的优势，在迅捷的反馈中设计和编程。</strong>在我参与过的 Hackthon（黑客马拉松）数天的短期竞赛中，产品经理、程序员和数据科学家被认为是最合理的一组搭配，懂前端技术的程序员总是对互联网的用户交互、数据采集等方面特别有经验，在展示环节还可以快速地做出非常优秀的效果来。</p><p><strong>再次，它可以帮助你建立产品思维。</strong>有人认为它能用来解决用户的核心问题，但实际上往往不是，解决核心问题主要还是靠后端的代码，但是前端的代码却是和用户最贴近和交互的部分，一个优秀的前端工程师总是具备非常强烈的产品属性。</p><p>我记得以前在一个团队中负责一个 portal，有别的团队的同事私下里抱怨，说我们做的东西被 portal 一展示，用户都说好用 ，结果都默认是做 portal 的团队做的了。其实这是一个很现实的问题，无论产品的功和过，即便它的组件分层再深，用户的眼光往往只到很浅的层次就断了。有句话叫，“没有声音，再好的戏也出不来”，如果说，产品的功能性能是它的硬实力，是这出戏的画面，那么前端带来的用户体验在很多情况下就是这出戏的声音。</p><p><strong>最后，前端技术是全栈工程的必备技能。</strong>它可以让你拍着胸脯对用户说，“这个可以做”，“这个不能做”，而不是说，“我去和前端确认一下这个交互能不能实现”。产品做出来，也不至于成为一个号称装着高性能引擎，却裹着破布毯子的“豪车”。</p><p>遗憾的是，现实中有不少迈入职场没有几年，却已经给自己打上“前端工程师”“后端工程师”等标签的程序员朋友。我觉得他们可能是受到了某些万恶的职业生涯规划鸡汤的影响，这些标签会让他们在面对新技术和新机遇的时候，觉得身处“不属于自己的领域”而选择封闭自己。</p><p>因此我的建议是：<strong>职业生涯不宜过早做过细的规划，除了技术深度，也需要在技术广度上积累，等到一定程度以后再来选择自己的发展分支路线。</strong>而且，某些特定技术领域，在程序员给自己打标签的时候，压根还没有发展成熟，等到发展起来，时机真正到来的时候，只有那些原本“不偏食”的优秀的程序员才能够脱颖而出。</p><h2>思维模式的转变</h2><p>如果你具备后端开发的经验，刚刚开始从后端转向前端，你可能会发现，有很多想当然的理解，不再适用，有很多想当然的解决方法，也不再有效。</p><h3>1. 应用事件驱动编程</h3><p>来看这样一段 JavaScript 代码：</p><pre><code>console.log(&quot;1&quot;);\n\nsetTimeout(function timeout() {\n    console.log(&quot;2&quot;);\n}, 0);\n\nsetTimeout(function timeout() {\n    console.log(&quot;3&quot;);\n}, 5000);\n\nconsole.log(&quot;4&quot;);\n</code></pre><p>代码中有四处打印，setTimeout 接受两个参数，第一个参数表示调用逻辑，第二个参数表示等待多少毫秒后再来执行该调用逻辑。</p><p>你觉得打印结果应该是什么？</p><p>是 1 -&gt; 2 -&gt; 4 -&gt; 3 吗？先别急着回答，我们好久没动手了，让我们来动动手看看结果吧。</p><p>在 Chrome 中，任意一个页面打开浏览器的开发者工具，在 Console 标签下，把上面的代码复制粘贴进去，于是我们看到这样的输出：</p><pre><code>1\n4\nundefined\n2\n3\n</code></pre><p>这是为什么，上面的 undefined 又是什么？</p><p>为了回答上面的问题，我们需要了解 JavaScript 执行机制中的 Event Loop（事件循环）来理解上面的代码。</p><p>在写后端代码的时候，你可能已经习惯了使用进程（process）或者线程（thread）来对付需要并行处理的逻辑，Java 如此，Python 也如此。进程或线程可以说是“真并行”，虽然微观地看，它们可能会顺序占用 CPU 时间片，但宏观地看，代码在二者中执行互不阻塞，是并行执行的。</p><p>而在 JavaScript 中，在浏览器中，你看到眼花缭乱的效果和变化，却是“假并行”，是一个彻头彻尾的“骗局”。为什么这么说？</p><p>因为浏览器中 JavaScript 代码的执行通常是单线程的（对于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Worker</a> 这样的“例外”我们暂不讨论）——一个线程，一个调用栈，一次只做一件事。</p><p>具体说来，在整个 JavaScript 的世界里，引起代码运行的行为是通过事件驱动的，并且<strong>全部是通过这唯一的一个勤奋的工作线程来执行的。那么当有事件产生的时候，这个工作线程不一定空闲，这就需要一个机制来让新产生的事件排队“等一等”</strong>，等当前的工作完成之后，再来处理它。这个机制就是 Event Loop，这个等一等的事件，就被放在一个被称为事件（回调）队列的数据结构中。</p><p>于是上面的代码，实际在运行的时候，从事件队列的角度看，是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/75/ff/757fe02c8910fe1d02be6d159ccf3cff.png?wh=1538*257\" alt=\"\"></p><p>工作线程不断地从整个事件队列的右侧取得新的事件来处理执行，而新的事件只会从左侧放入：</p><p>主代码最先被执行，从上往下顺序执行，因此顺序是：</p><ul>\n<li>先打印 1；</li>\n<li>在遇到第一个 setTimeout 的时候，告知浏览器，请在 0 秒之后往事件队列内放入执行打印 2 的事件；</li>\n<li>在遇到第二个 setTimeout 的时候，告知浏览器，请在 5 秒之后往事件队列内放入执行打印 3 的事件；</li>\n<li>再打印 4；</li>\n<li>主代码执行完毕，Chrome 的控制台打印这段代码的返回值，但因为它没有返回值，于是就打印 undefined。</li>\n</ul><p>浏览器老老实实地按照要求放入了打印 2 的事件，虽然是第 0 秒就放入，但是因为放入的时候主代码还在执行，因此只能等待，它等到主代码执行完毕后才得到执行，打印了 2。</p><p>5 秒钟后，浏览器按照要求往队列里放入了打印 3 的事件，于是 3 被打印出来。</p><p>你看，通过这种方式，JavaScript 可以让不同的任务在一个线程中完成，而整个任务编排的机制，<strong>从代码的角度看，所有的逻辑都是通过七七八八的“异步回调”来完成的；而从程序员思维方式的角度看，以往基于线程的编程，变成了事件驱动的编程</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/b9/8f475ade881eeaa7e49a442e80af2db9.jpg?wh=2110*670\" alt=\"\"></p><p>上图来自 <a href=\"http://berb.github.io/diploma-thesis/original/043_threadsevents.html\">The Case of Threads vs. Events</a>，很好地对比了两者的不同之处，其中：</p><p>对于逻辑的触发，基于线程编程需要不断地由监视线程去查询被监视线程的某一个状态，如果状态满足某个条件，则触发相应的逻辑；而事件驱动则通过事件处理器，在事件发生时执行挂载的回调逻辑。不知你是否联想起了 <a href=\"https://time.geekbang.org/column/article/136587\">[第 03 讲]</a> 中我介绍的 push 和 pull，在这里，前者正类似于 pull 的形式，而后者则类似于 push 的形式。</p><p>基于线程的方式可以阻塞线程，等待时间或某个条件满足后再继续执行；而事件驱动则相反，发送一条消息后无阻塞等待回调的发生。阻塞线程的方式对资源的消耗往往更加显著，因为无论是否执行线程都被占用，但从人直观理解的角度来说，代码更直白，更符合人对顺序执行的理解；而事件驱动的方式则相反，资源消耗上更优，但是代码的执行顺序，以及由此产生的系统状态判断变得难以预知。</p><p>请注意的是，在 JavaScript 中我们通常无法使用基于线程的编程，但是在很多情况下，例如 Java 和 Python 这些传统的后端编程语言中，我们可以混合使用基于线程和事件驱动的编程，它们是互不矛盾的。</p><p>最后，为什么 JavaScript 要被设计成单线程的，多线程难道就不行吗？最重要的原因，就是为了让整个模型简单。如果引入多线程，这里有很多问题需要解决，例如事件处理的依赖关系（多线程的事件处理就不再是简单队列的挨个处理了），例如资源的共享和修改（无锁编程不再有效，必须要考虑同步等加锁机制了），整个系统会变得极其复杂，不只是对于浏览器的开发者而言，对前端的开发者也一样。</p><p>另外，需要说明的是，浏览器的 JavaScript 执行是单线程的，但不代表浏览器是单线程的。浏览器通常还包含其它线程，比如说：</p><ul>\n<li>界面（GUI）渲染线程，这个线程的执行和上述的 JavaScript 工作线程是互斥的，即二者不可同时执行；</li>\n<li>事件触发线程，这个也很好理解，我们介绍过有一个神秘人物帮着往队列中放入事件（例子中的回调打印 2 和回调打印 3），这个神秘人物就是事件触发线程。</li>\n</ul><h3>2. 学写声明式代码</h3><p>习惯于设计和书写大量的声明式代码，也是一个很重要的思维转变。</p><p>我们在 <a href=\"https://time.geekbang.org/column/article/140196\">[第 07 讲]</a> 中讲过什么是声明式代码，为什么我们在写视图层的时候会大量使用声明式代码。HTML、CSS 和 JavaScript，前端的三驾马车，两架是用声明式代码写的，我们应当记得自己做的是前端开发，而不是一个单纯的 JavaScript 写手。</p><p><strong>声明式代码和命令式代码一样，都需要设计，且都需要测试。</strong>我见过不少工程师能够写出优秀的命令式代码，甚至已经习惯了，但是在写声明式代码的时候，却缺乏条理。</p><p>举例来说，设计页面的时候，要先设计布局，抓住整棵 DOM 树中核心的部分，自上而下地去划分区域，哪些是静态的区域，哪些是动态生成的，并合理设计可重用组件。再比如说，使用声明式代码处理模板中呈现数据的格式转换，使得呈现部分的代码更纯粹、自然，具体请参看 [第 16 讲] 中的过滤器。</p><h3>3. 培养交互思维</h3><p>前端工程师必须具备敏感的交互思维。通常来说，前端的代码，兼具着“甲方”和“乙方”的角色：</p><ul>\n<li>对用户和前端的交互来说，客户是甲方，享受服务；前端就是乙方，提供服务。</li>\n<li>对和服务端的交互来说，前端就是甲方，从服务端获得数据和服务；服务端就是乙方，提供数据和服务。</li>\n</ul><p>而无论是和用户，还是和服务端的交互，都是学习前端技术中需要领会的部分。<strong>和用户的交互要求开发前端的程序员具备产品思维，而和服务端的交互则要求开发前端的程序员具备工程思维。</strong></p><p>一头是用户，另一头是后端工程师，前端的开发人员，在整个庞大的研发体系中，既像粘合剂，又像润滑剂，要从产品和工程两个视角去思考问题，作出判断；不但要交付实实在在的功能，要引导好的工程架构，还要给用户带来优秀的产品体验。</p><h2>总结思考</h2><p>今天我们首先强调了对于基于 Web 的全栈学习来说，学习前端技术的重要性，接着我们介绍了前端思维的几个转变，特别是事件驱动编程。希望你已经了解了 JavaScript 的单线程运行机制，并能够慢慢习惯不断在代码中与异步和回调打交道。</p><p>下面留两个思考问题：</p><ul>\n<li>你在技术团队中主要扮演什么角色，你对前端技术的认识是怎样的？</li>\n<li>为什么 JavaScript 中，没有像 Java 或 Python 一样的 sleep 方法？毕竟，我就是想让当前执行过程稍等一下，再继续后面的逻辑，有 sleep 的话多方便啊。</li>\n</ul><p>最后，我想说的是，以前有句话叫做，“狗拿耗子，多管闲事”，但是我们在学习前端技术的时候，却要反过来，我们不但要多管闲事，还要“越管越多”，要多去想想类似的后端技术是怎样实现的。那在学习后端技术的时候，道理也是一样的，也要联想。</p><p>无论是早些年的 <a href=\"http://www.gwtproject.org/\">GWT</a>，后端 Java 程序员写出了优秀的基于 Ajax 的跨浏览器应用；还是这些年的 <a href=\"https://nodejs.org/en/\">Node.js</a>，利用强大的 V8 引擎把数不清的 JavaScript 异步回调也写到后端去……技术是没有边界的，前端和后端的技术当然也包括在内。</p><p>好，今天的内容就到这里，欢迎你和我讨论，也欢迎你邀请你的朋友一起阅读、学习。</p><h2>扩展阅读</h2><ul>\n<li>你可能听过这样一句话，“任何能用 JavaScript 写的应用，最终都会用 JavaScript 来实现。”这句话最初来自 <a href=\"https://blog.codinghorror.com/the-principle-of-least-power/\">The Principle of Least Power</a> 这篇文章，写于 2007 年。</li>\n<li>有位工程师做了一个<a href=\"http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIjEiKTsKCnNldFRpbWVvdXQoZnVuY3Rpb24gdGltZW91dCgpIHsKICAgIGNvbnNvbGUubG9nKCIyIik7Cn0sIDApOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIjMiKTsKfSwgNTAwMCk7Cgpjb25zb2xlLmxvZygiNCIpOw%3D%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\">名为 Loupe的网站</a>，用动画来形象地展示事件循环的过程，本文的例子也可以在它上面运行。</li>\n<li>为什么浏览器中 JavaScript 代码的执行设计成单线程的，还有一个文中没有提到的原因，就是多线程的 GUI 特别容易死锁。这篇文章 <a href=\"https://community.oracle.com/blogs/kgh/2004/10/19/multithreaded-toolkits-failed-dream\">Multithreaded toolkits: A failed dream?</a> 描述了其中的缘由，大致是说 GUI 的行为大多都是从更高层的抽象一层一层往下调用到更低层的抽象、具体工具类实现，再到操作系统；而事件则是反过来，从下往上冒泡。结果就是两个方向相反的行为在碰头，给资源加锁的时候一个正序，一个逆序，极其容易出现互相等待而饿死的情况，而这种情况下要彻底解决这一问题的难度无异于“逆转潮汐”。</li>\n<li><a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\">浏览器的工作原理：新式网络浏览器幕后揭秘</a>，这可能是在互联网上流传最广泛地介绍浏览器工作原理的中文文章，非常推荐。</li>\n</ul><p></p>","neighbors":{"left":{"article_title":"13 | 特别放送：选择比努力更重要","id":145851},"right":{"article_title":"15 | 重剑无锋，大巧不工：JavaScript面向对象","id":145878}},"comments":[{"had_liked":false,"id":139801,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1021014,"ip_address":"","ucode":"2B732860C4231B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/56/4b8395f6.jpg","comment_is_top":false,"comment_ctime":1570743071,"is_pvip":true,"replies":[{"id":"54202","content":"👍","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1570848794,"ip_address":"","comment_id":139801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44520416031","product_id":100035501,"comment_content":"Javascript 是单线程+事件驱动，单线程就是主线程。Javscript 必须让主线程一直处于运行当中，才能实现事件驱动。它无法通过简单的 sleep 主线程来达到 sleep 后继续执行某件事目的。<br><br>以上是我的理解，不确定是否有误。","like_count":10,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470121,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570848794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140917,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1571093300,"is_pvip":false,"replies":[{"id":"54764","content":"第二点说得非常好，👍","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1571239817,"ip_address":"","comment_id":140917,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23045929780","product_id":100035501,"comment_content":"1. 我现阶段做的东西比较杂，写后端，也写点前端，前后端都用 JavaScript 来写。感觉自己对前端技术的认知还只停留在表面，仅仅可以使用一些框架，照着 doc 来实现指定的页面而已，前端的基础并不牢固，很希望跟着老师学习前端中的思想层面的东西，特别是 DOM 树和页面的具体关联，HTML、CSS、JS 这三驾马车如何相互关联，进行信息传递和页面的展示的，以及前端上一些类似后端 MVC 一类的经典设计模式等等，很是期待这一章的内容。<br><br>2. 这是一个很好的问题，这个问题说到了 JavaScript 和传统语言的区别。JavaScript 设计的初衷仅仅是解决页面上的事件的驱动和响应，这里举个例子，假设在一个页面上有输入框、下拉框、勾选框、取消按钮，用户可以在页面上任意操控这 4 个东西，这 4 个东西之间并不存在任何的先后顺序和逻辑关系，任何一个事件都可以发生在其他事件之前，这取决于用户的实际操作，如果把这四个组件的实现放在一起，你可以看到对应的代码并不是顺序执行的，我们想要看到的是一个组件的执行不会影响到其他组件，这在传统的语言中可以用多线程来做到，但是文章中也提到了 JavaScript 是单线程的，如果使用 sleep，那么唯一的线程会被阻塞，一个组件的执行会影响到其他组件执行，因此不可取。而消息队列的方式，让我们把程序的最小运行单元看成是一个个的事件，程序的运行顺序是和事件的发生顺序相关联，而不是我们传统观念中认为的 “代码行顺序”。","like_count":6,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470624,"discussion_content":"第二点说得非常好，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571239817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583321,"avatar":"https://static001.geekbang.org/account/avatar/00/18/28/d9/78dfd983.jpg","nickname":"sky","note":"","ucode":"29692959077496","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37483,"discussion_content":"作为一个前端开发者，好菜刚刚上来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571623090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140186,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1570845648,"is_pvip":false,"replies":[{"id":"54262","content":"👍","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1570939380,"ip_address":"","comment_id":140186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14455747536","product_id":100035501,"comment_content":"思考题的第二个， 我觉得应该是因为js是单线程的，如果设置sleep的话，就是阻塞唯一的线程，而又没有一个监视线程去pull。而且按照事件驱动编程的逻辑，如果想sleep当前正常执行的事件的话，应该也使用事件回调的方式，这样就只阻塞事件而不是线程。","like_count":3,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470287,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570939380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284029,"user_name":"萧潇","can_delete":false,"product_type":"c1","uid":1021664,"ip_address":"","ucode":"EB6DA20555313A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/e0/9088669e.jpg","comment_is_top":false,"comment_ctime":1616044874,"is_pvip":false,"replies":[{"id":"104603","content":"我能了解为什么要把自己局限在“php”吗？如果是这样的话，那范围就比较窄了","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1618327447,"ip_address":"","comment_id":284029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911012170","product_id":100035501,"comment_content":"php必须要兼写前端，否则找不到工作哈","like_count":1,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517208,"discussion_content":"我能了解为什么要把自己局限在“php”吗？如果是这样的话，那范围就比较窄了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618327447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313232,"user_name":"浅浅悠","can_delete":false,"product_type":"c1","uid":1518250,"ip_address":"","ucode":"82F005FD97E73F","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/aa/e0ae9b76.jpg","comment_is_top":false,"comment_ctime":1632319425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632319425","product_id":100035501,"comment_content":"搬砖角色，😄","like_count":0},{"had_liked":false,"id":143256,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1571657524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571657524","product_id":100035501,"comment_content":"一个讨厌js 的后端路过。。。","like_count":0},{"had_liked":false,"id":140184,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1570845106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570845106","product_id":100035501,"comment_content":"我所理解的js 执行过程分为两部分，第一部分是做一些初始化的工作， 初始化工作包括初始化一些参数之类的，以及告知浏览器事件以及触发的逻辑。第二部分是事件循环，不断地往事件队列中抓取事件执行。在这整个过程中。","like_count":0},{"had_liked":false,"id":139967,"user_name":"joker","can_delete":false,"product_type":"c1","uid":1501088,"ip_address":"","ucode":"4305206A1FE5EC","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/a0/9a962a74.jpg","comment_is_top":false,"comment_ctime":1570776543,"is_pvip":true,"replies":[{"id":"54198","content":"console.log(&quot;4&quot;);","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1570848225,"ip_address":"","comment_id":139967,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570776543","product_id":100035501,"comment_content":"他是执行哪段代码出的underfined","like_count":0,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470191,"discussion_content":"console.log(&amp;quot;4&amp;quot;);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570848225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139985,"avatar":"https://static001.geekbang.org/account/avatar/00/11/65/11/04d6a42c.jpg","nickname":"infrared628","note":"","ucode":"33D1181918FACD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30391,"discussion_content":"浏览器的console环境会evaluate最后一行代码的返回值，这里最后一句就是console.log(&#34;4&#34;)，返回值是undefined，所以主代码执行完console.log(&#34;4&#34;)还会打印出其返回值undefined。\n\n如果在console.log(&#34;4&#34;)后面加上abc = 10这样的语句，那么最后一句的返回值就不是undefined了，而是abc的值10；但如果在最后申明一个变量，比如const bcd = 100，那这时undefined又出现了，而不是100，因为const bcd = 100没有返回值，这个情况就如同console.log(&#34;4&#34;)没有返回值一样。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570828832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139824,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1570752760,"is_pvip":false,"replies":[{"id":"54260","content":"第二问不太正确，你可以联系文中介绍的 event loop 再想想。","user_name":"作者回复","user_name_real":"四火","uid":"1580075","ctime":1570939275,"ip_address":"","comment_id":139824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570752760","product_id":100035501,"comment_content":"我一直从事后端开发，但是经过了几个Web项目后，对前端的认识发生了转变，真的就像老师文中所说的那样。这个感触在直接面向用户时尤其明显，感觉连原有的部门开发流程都不适应了。<br><br>至于为什么没有sleep，是不是因为sleep里指定的时间只对事件分发线程有效，而真正被JavaScript执行线程从事件对列中取出来执行时，时间已经非常不准确了。","like_count":0,"discussions":[{"author":{"id":1580075,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/2b/2069abe6.jpg","nickname":"四火","note":"","ucode":"E4BED7DCAADD99","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470126,"discussion_content":"第二问不太正确，你可以联系文中介绍的 event loop 再想想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570939275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139807,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1570749381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570749381","product_id":100035501,"comment_content":"Web developer ,工作中就是开发公司的组件库，客户报defect 去fix 。想说前端水好深， WebGL ,tensorflow.js ,webassembly 这些技术都好强悍","like_count":0}]}