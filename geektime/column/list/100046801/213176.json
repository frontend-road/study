{"id":213176,"title":"10 | 走进黑盒：SQL是如何在数据库中执行的？","content":"<p>你好，我是李玥。</p><p>上一节课我们讲了怎么来避免写出慢SQL，课后我给你留了一道思考题：在下面这两个SQL中，为什么第一个SQL在执行的时候无法命中索引呢？</p><pre><code>SELECT * FROM user WHERE left(department_code, 5) = '00028';\nSELECT * FROM user WHERE department_code LIKE '00028%';\n</code></pre><p>原因是，这个SQL的WHERE条件中对department_code这个列做了一个left截取的计算，对于表中的每一条数据，都得先做截取计算，然后判断截取后的值，所以不得不做全表扫描。你在写SQL的时候，尽量不要在WEHER条件中，对列做任何计算。</p><p>到这里这个问题就结束了么？那我再给你提一个问题，这两个SQL中的WHERE条件，虽然写法不一样，但它俩的语义不就是一样的么？是不是都可以解释成：department_code这一列前5个字符是00028？从语义上来说，没有任何不同是吧？所以，它们的查询结果也是完全一样的。那凭什么第一条SQL就得全表扫描，第二条SQL就可以命中索引？</p><p>对于我们日常编写SQL的一些优化方法，比如说我刚刚讲的：“尽量不要在WEHER条件中，对列做计算”，很多同学只是知道这些方法，但是却不知道，为什么按照这些方法写出来的SQL就快？</p><p>要回答这些问题，需要了解一些数据库的实现原理。对很多开发者来说，数据库就是个黑盒子，你会写SQL，会用数据库，但不知道盒子里面到底是怎么一回事儿，这样你只能机械地去记住别人告诉你的那些优化规则，却不知道为什么要遵循这些规则，也就谈不上灵活运用。</p><!-- [[[read_end]]] --><p>今天这节课，我带你一起打开盒子看一看，SQL是如何在数据库中执行的。</p><p>数据库是一个非常非常复杂的软件系统，我会尽量忽略复杂的细节，用简单的方式把最主要的原理讲给你。即使这样，这节课的内容仍然会非常的硬核，你要有所准备。</p><p>数据库的服务端，可以划分为<strong>执行器(Execution Engine)</strong> 和 <strong>存储引擎(Storage Engine)</strong> 两部分。执行器负责解析SQL执行查询，存储引擎负责保存数据。</p><h2>SQL是如何在执行器中执行的？</h2><p>我们通过一个例子来看一下，执行器是如何来解析执行一条SQL的。</p><pre><code>SELECT u.id AS user_id, u.name AS user_name, o.id AS order_id\nFROM users u INNER JOIN orders o ON u.id = o.user_id\nWHERE u.id &gt; 50\n</code></pre><p>这个SQL语义是，查询用户ID大于50的用户的所有订单，这是很简单的一个联查，需要查询users和orders两张表，WHERE条件就是，用户ID大于50。</p><p>数据库收到查询请求后，需要先解析SQL语句，把这一串文本解析成便于程序处理的结构化数据，这就是一个通用的语法解析过程。跟编程语言的编译器编译时，解析源代码的过程是完全一样的。如果是计算机专业的同学，你上过的《编译原理》这门课，其中很大的篇幅是在讲解这一块儿。没学过《编译原理》的同学也不用担心，你暂时先不用搞清楚，SQL文本是怎么转换成结构化数据的，不妨碍你学习和理解这节课下面的内容。</p><p>转换后的结构化数据，就是一棵树，这个树的名字叫抽象语法树（AST，Abstract Syntax Tree）。上面这个SQL，它的AST大概是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/5b/651cf39892c7ab057b0d7b3c6a93d85b.png?wh=1142*427\" alt=\"\"></p><p>这个树太复杂，我只画了主要的部分，你大致看一下，能理解这个SQL的语法树长什么样就行了。执行器解析这个AST之后，会生成一个逻辑执行计划。所谓的执行计划，可以简单理解为如何一步一步地执行查询和计算，最终得到执行结果的一个分步骤的计划。这个逻辑执行计划是这样的：</p><pre><code>LogicalProject(user_id=[$0], user_name=[$1], order_id=[$5])\n    LogicalFilter(condition=[$0 &gt; 50])\n        LogicalJoin(condition=[$0 == $6], joinType=[inner])\n            LogicalTableScan(table=[users])\n            LogicalTableScan(table=[orders])\n</code></pre><p>和SQL、AST不同的是，这个逻辑执行计划已经很像可以执行的程序代码了。你看上面这个执行计划，很像我们编程语言的函数调用栈，外层的方法调用内层的方法。所以，要理解这个执行计划，得从内往外看。</p><ol>\n<li>最内层的2个LogicalTableScan的含义是，把USERS和ORDERS这两个表的数据都读出来。</li>\n<li>然后拿这两个表所有数据做一个LogicalJoin，JOIN的条件就是第0列(u.id)等于第6列(o.user_id)。</li>\n<li>然后再执行一个LogicalFilter过滤器，过滤条件是第0列(u.id)大于50。</li>\n<li>最后，做一个LogicalProject投影，只保留第0(user_id)、1(user_name)、5(order_id)三列。这里“投影(Project)”的意思是，把不需要的列过滤掉。</li>\n</ol><p>把这个逻辑执行计划翻译成代码，然后按照顺序执行，就可以正确地查询出数据了。但是，按照上面那个执行计划，需要执行2个全表扫描，然后再把2个表的所有数据做一个JOIN操作，这个性能是非常非常差的。</p><p>我们可以简单算一下，如果，user表有1,000条数据，订单表里面有10,000条数据，这个JOIN操作需要遍历的行数就是1,000 x 10,000 = 10,000,000行。可见，这种从SQL的AST直译过来的逻辑执行计划，一般性能都非常差，所以，需要对执行计划进行优化。</p><p>如何对执行计划进行优化，不同的数据库有不同的优化方法，这一块儿也是不同数据库性能有差距的主要原因之一。优化的总体思路是，在执行计划中，尽早地减少必须处理的数据量。也就是说，尽量在执行计划的最内层减少需要处理的数据量。看一下简单优化后的逻辑执行计划：</p><pre><code>LogicalProject(user_id=[$0], user_name=[$1], order_id=[$5])\n    LogicalJoin(condition=[$0 == $6], joinType=[inner])\n        LogicalProject(id=[$0], name=[$1])              // 尽早执行投影\n            LogicalFilter(condition=[$0 &gt; 50])          // 尽早执行过滤\n                LogicalTableScan(table=[users])\n        LogicalProject(id=[$0], user_id=[$1])           // 尽早执行投影\n            LogicalTableScan(table=[orders])\n</code></pre><p>对比原始的逻辑执行计划，这里我们做了两点简单的优化：</p><ol>\n<li>尽早地执行投影，去除不需要的列；</li>\n<li>尽早地执行数据过滤，去除不需要的行。</li>\n</ol><p>这样，就可以在做JOIN之前，把需要JOIN的数据尽量减少。这个优化后的执行计划，显然会比原始的执行计划快很多。</p><p>到这里，执行器只是在逻辑层面分析SQL，优化查询的执行逻辑，我们执行计划中操作的数据，仍然是表、行和列。在数据库中，表、行、列都是逻辑概念，所以，这个执行计划叫“逻辑执行计划”。执行查询接下来的部分，就需要涉及到数据库的物理存储结构了。</p><h2>SQL是如何在存储引擎中执行的？</h2><p>数据真正存储的时候，无论在磁盘里，还是在内存中，都没法直接存储这种带有行列的二维表。数据库中的二维表，实际上是怎么存储的呢？这就是存储引擎负责解决的问题，存储引擎主要功能就是把逻辑的表行列，用合适的物理存储结构保存到文件中。不同的数据库，它们的物理存储结构是完全不一样的，这也是各种数据库之间巨大性能差距的根本原因。</p><p>我们还是以MySQL为例来说一下它的物理存储结构。MySQL非常牛的一点是，它在设计层面对存储引擎做了抽象，它的存储引擎是可以替换的。它默认的存储引擎是InnoDB，在InnoDB中，数据表的物理存储结构是以主键为关键字的B+树，每一行数据直接就保存在B+树的叶子节点上。比如，上面的订单表组织成B+树，是这个样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/e6/41bb301944e65e1585b238d26717e5e6.png?wh=1142*790\" alt=\"\"></p><p>这个树以订单表的主键orders.id为关键字组织，其中“62:[row data]”，表示的是订单号为62的一行订单数据。在InnoDB中，表的索引也是以B+树的方式来存储的，和存储数据的B+树的区别是，在索引树中，叶子节点保存的不是行数据，而是行的主键值。</p><p>如果通过索引来检索一条记录，需要先后查询索引树和数据树这两棵树：先在索引树中检索到行记录的主键值，然后再用主键值去数据树中去查找这一行数据。</p><p>简单了解了存储引擎的物理存储结构之后，我们回过头来继续看SQL是怎么在存储引擎中继续执行的。优化后的逻辑执行计划将会被转换成物理执行计划，物理执行计划是和数据的物理存储结构相关的。还是用InnoDB来举例，直接将逻辑执行计划转换为物理执行计划：</p><pre><code>InnodbProject(user_id=[$0], user_name=[$1], order_id=[$5])\n    InnodbJoin(condition=[$0 == $6], joinType=[inner])\n        InnodbTreeNodesProject(id=[key], name=[data[1]])\n            InnodbFilter(condition=[key &gt; 50])\n                InnodbTreeScanAll(tree=[users])\n        InnodbTreeNodesProject(id=[key], user_id=[data[1]])\n            InnodbTreeScanAll(tree=[orders])\n</code></pre><p>物理执行计划同样可以根据数据的物理存储结构、是否存在索引以及数据多少等各种因素进行优化。这一块儿的优化规则同样是非常复杂的，比如，我们可以把对用户树的全树扫描再按照主键过滤这两个步骤，优化为对树的范围查找。</p><pre><code>PhysicalProject(user_id=[$0], user_name=[$1], order_id=[$5])\n    PhysicalJoin(condition=[$0 == $6], joinType=[inner])\n        InnodbTreeNodesProject(id=[key], name=[data[1]])\n            InnodbTreeRangeScan(tree=[users], range=[key &gt; 50])  // 全树扫描再按照主键过滤，直接可以优化为对树的范围查找\n        InnodbTreeNodesProject(id=[key], user_id=[data[1]])\n            InnodbTreeScanAll(tree=[orders])\n</code></pre><p>最终，按照优化后的物理执行计划，一步一步地去执行查找和计算，就可以得到SQL的查询结果了。</p><p>理解数据库执行SQL的过程，以及不同存储引擎中的数据和索引的物理存储结构，对于正确使用和优化SQL非常有帮助。</p><p>比如，我们知道了InnoDB的索引实现后，就很容易明白为什么主键不能太长，因为表的每个索引保存的都是主键的值，过长的主键会导致每一个索引都很大。再比如，我们了解了执行计划的优化过程后，就很容易理解，有的时候明明有索引却不能命中的原因是，数据库在对物理执行计划优化的时候，评估发现不走索引，直接全表扫描是更优的选择。</p><p>回头再来看一下这节课开头的那两条SQL，为什么一个不能命中索引，一个能命中？原因是InnoDB对物理执行计划进行优化的时候，能识别LIKE这种过滤条件，转换为对索引树的范围查找。而对第一条SQL这种写法，优化规则就没那么“智能”了。</p><p>它并没有识别出来，这个条件同样可以转换为对索引树的范围查找，而走了全表扫描。并不是说第一个SQL写的不好，而是数据库还不够智能。那现实如此，我们能做的就是尽量了解数据库的脾气秉性，按照它现有能力，尽量写出它能优化好的SQL。</p><h2>小结</h2><p>一条SQL在数据库中执行，首先SQL经过语法解析成AST，然后AST转换为逻辑执行计划，逻辑执行计划经过优化后，转换为物理执行计划，再经过物理执行计划优化后，按照优化后的物理执行计划执行完成数据的查询。几乎所有的数据库，都是由<strong>执行器</strong>和<strong>存储引擎</strong>两部分组成，执行器负责执行计算，存储引擎负责保存数据。</p><p>掌握了查询的执行过程和数据库内部的组成，你才能理解那些优化SQL的规则，这些都有助于你更好理解数据库行为，更高效地去使用数据库。</p><p>最后需要说明的一点是，今天这节课所讲的内容，不只是适用于我们用来举例的MySQL，几乎所有支持SQL的数据库，无论是传统的关系型数据库、还是NoSQL、NewSQL这些新兴的数据库，无论是单机数据库还是分布式数据库，比如HBase、Elasticsearch和SparkSQL等等这些数据库，它们的实现原理也都符合我们今天这节课所讲的内容。</p><h2>思考题</h2><p>课后请你选一种你熟悉的<strong>非关系型数据库</strong>，最好是支持SQL的，当然，不支持SQL有自己的查询语言也可以。比如说HBase、Redis或者MongoDB等等都可以，尝试分析一下查询的执行过程，对比一下它的执行器和存储引擎与MySQL有什么不同。</p><p>欢迎你在留言区与我讨论，如果你觉得今天的内容对你有帮助，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":189956,"user_name":"李鑫","can_delete":false,"product_type":"c1","uid":1200631,"ip_address":"","ucode":"AE9B911E189A7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/f7/93020ae2.jpg","comment_is_top":false,"comment_ctime":1584585481,"is_pvip":false,"replies":[{"id":"74855","content":"咱们这个课程是个实战课，所以更偏重于解决实战问题。实战会用到的一些原理，也会尽量简单明了的去给大家讲明白。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1585538749,"ip_address":"","comment_id":189956,"utype":1}],"discussion_count":4,"race_medal":0,"score":"108958767881","product_id":100046801,"comment_content":"老师好,看了你的课程 感觉有点浅，比如这一篇只是简单介绍了下索引和数据的底层存储结构。像页分裂这些更加底层的没有讲到，建议老师后续的课程可以由浅入深。","like_count":26,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487840,"discussion_content":"咱们这个课程是个实战课，所以更偏重于解决实战问题。实战会用到的一些原理，也会尽量简单明了的去给大家讲明白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585538749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017681,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/51/4155b021.jpg","nickname":"于成龙","note":"","ucode":"807A110E8AAEB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231727,"discussion_content":"Mysql的话详细内容强力推荐mysql45讲，非常牛叉","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1586827134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017681,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/51/4155b021.jpg","nickname":"于成龙","note":"","ucode":"807A110E8AAEB2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545668,"discussion_content":"这玩意看人 某些人眼光高。。我记得去年去自如聊。。  。。一面的面试官对于mysql 45讲 很不屑一顾。。然后我就特别谦逊的请教人家。。不知道丁奇老师哪讲的不对。。然后对方又讲不出来。。就是反复强调 一般 很一般。。一脸懵逼。。这是啥意思。。就是纯粹说一个经历以供一笑。。毕竟人多样化，啥人都遇到。。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1642036810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":231727,"ip_address":""},"score":545668,"extra":""}]},{"author":{"id":1602593,"avatar":"https://static001.geekbang.org/account/avatar/00/18/74/21/6c64afa9.jpg","nickname":"奔跑的猪","note":"","ucode":"94375121A233F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578915,"discussion_content":"确实太浅了，点到为止都谈不上","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657091332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202241,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1585931146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104665146250","product_id":100046801,"comment_content":"主键除了不能太长之外最好能有序，有序的话能减少插入时B+树的排序操作，所以uuid这种不适合做主键","like_count":25},{"had_liked":false,"id":189998,"user_name":"Simon","can_delete":false,"product_type":"c1","uid":1068163,"ip_address":"","ucode":"107606167D23E8","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/83/7788fc66.jpg","comment_is_top":false,"comment_ctime":1584590327,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"61714132471","product_id":100046801,"comment_content":"文中说: 每一行数据直接就保存在 B+ 树的叶子节点上<br>这句话可能会有误会, <br>实际上B+树的节点存的是&quot;页&quot;, 而具体的数据在页里面","like_count":15,"discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283517,"discussion_content":"页就是由节点组成的，所以说每一行数据都存储在叶子节点，是没问题的，而一页数据通常都是包含好几行数据","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592288560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212235,"user_name":"暴力的小石头","can_delete":false,"product_type":"c1","uid":1178779,"ip_address":"","ucode":"4C69E24A54C2FB","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/9b/0e79a034.jpg","comment_is_top":false,"comment_ctime":1588077794,"is_pvip":true,"replies":[{"id":"79190","content":"我们这个例子中的逻辑执行计划和物理执行计划并不是用什么工具生成的，逻辑执行计划和物理执行计划都是以各种数据结构存放在数据库的内存中。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1588513376,"ip_address":"","comment_id":212235,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23062914274","product_id":100046801,"comment_content":"我想问一下，文中提到逻辑执行计划，就是那个像函数调用栈的东西是怎么得来的呀，感觉比explain分析的更深层次，想问一下如何分析出来的","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493458,"discussion_content":"我们这个例子中的逻辑执行计划和物理执行计划并不是用什么工具生成的，逻辑执行计划和物理执行计划都是以各种数据结构存放在数据库的内存中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588513376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178779,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/9b/0e79a034.jpg","nickname":"暴力的小石头","note":"","ucode":"4C69E24A54C2FB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258811,"discussion_content":"那请问在内存中的话，您是通过什么手段查看到的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588729478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196082,"user_name":"image","can_delete":false,"product_type":"c1","uid":1039069,"ip_address":"","ucode":"A45BFF284F8933","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/dd/1e5e7b0c.jpg","comment_is_top":false,"comment_ctime":1585234193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23060070673","product_id":100046801,"comment_content":"比较典型的是Hive，不少开源组件直接借用其SQL解析器，完成逻辑层优化，物理层用其他方式执行。","like_count":6},{"had_liked":false,"id":189964,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1584586381,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18764455565","product_id":100046801,"comment_content":"很赞同为什么要了解原理的原因，只有知道原理以及内部执行逻辑，遇到问题才能不会像无头苍蝇一样靠运气和蒙。","like_count":4},{"had_liked":false,"id":262934,"user_name":"Sinvi","can_delete":false,"product_type":"c1","uid":1064018,"ip_address":"","ucode":"2A90976980CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/52/5951ffb4.jpg","comment_is_top":false,"comment_ctime":1605887845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10195822437","product_id":100046801,"comment_content":"推荐隔壁《SQL必知必会》这里有讲比较详细","like_count":3},{"had_liked":false,"id":190000,"user_name":"大叶枫","can_delete":false,"product_type":"c1","uid":1153702,"ip_address":"","ucode":"224AC5533889AD","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/a6/3bddb98c.jpg","comment_is_top":false,"comment_ctime":1584590808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174525400","product_id":100046801,"comment_content":"建议配合实际工作场景得问题，逐步深入的来解执行计划的实战用途。","like_count":3},{"had_liked":false,"id":205262,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1586578812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881546108","product_id":100046801,"comment_content":"如何diss SQL写得不咋地：并不是说你 SQL 写的不好，而是数据库还不够智能","like_count":2},{"had_liked":false,"id":190069,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1584599838,"is_pvip":true,"replies":[{"id":"73503","content":"一般都是在存储引擎直接执行的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1584844533,"ip_address":"","comment_id":190069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879567134","product_id":100046801,"comment_content":"存储引擎再执行执行计划的的时候，是把整个执行计划执行完成后把数据返给执行器，还是每执行一条执行计划获取数据就返给执行器，然后执行器在做运算的？<br>个人认为是整个执行计划执行完成后获得最终的数据在返给执行器，但是这个有没有办法去验证的？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487877,"discussion_content":"一般都是在存储引擎直接执行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584844533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190052,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1584598627,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5879565923","product_id":100046801,"comment_content":"MySQL  的执行计划是如何进行查看的？","like_count":1,"discussions":[{"author":{"id":1647666,"avatar":"https://static001.geekbang.org/account/avatar/00/19/24/32/c712d415.jpg","nickname":"陶金","note":"","ucode":"14ECFE57ABC162","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209064,"discussion_content":"可以使用trace方法来查看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584605658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340498,"user_name":"Geek_fe19fb","can_delete":false,"product_type":"c1","uid":2941998,"ip_address":"","ucode":"23C751D4696C7D","user_header":"","comment_is_top":false,"comment_ctime":1648864650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648864650","product_id":100046801,"comment_content":"索引失效的原因：<br>1. 没有正确的使用like<br>2. 使用了or  ，索引是符合索引，单列索引是可以的  （跟版本有关系 在MySQL8.0）<br>3. 不符合前缀索引的用法，带头大哥不能死<br>4. 索引列使用了函数<br>5. 索引列类型不一致，导致索引失效<br>6. 索引列字符集不一致<br>7. 使用了不等于<br>8. 范围查询之后的索引都会失效","like_count":1},{"had_liked":false,"id":256478,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1603635258,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603635258","product_id":100046801,"comment_content":"老师 请问 尽早地执行投影，去除不需要的列；<br>a,b2表 Join 数据两个都很大, 我在表连接之前 例如 a 表 子查询 条件&gt;50 后 再和b join 这样子也可以尽早的执行投影,不知理解的对吗?  ","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366192,"discussion_content":"这是尽早的过滤行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617978101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250769,"user_name":"雨落～紫竹","can_delete":false,"product_type":"c1","uid":1666025,"ip_address":"","ucode":"33CED2F34E708F","user_header":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","comment_is_top":false,"comment_ctime":1601214359,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1601214359","product_id":100046801,"comment_content":"请问这个 在最里层进行的范围查找 就是5.6以后引入的索引下推吗  还有 like 的最左匹配 具体 string类型是怎么转换成索引树对下层的范围查询呢","like_count":0},{"had_liked":false,"id":247370,"user_name":"朱朱","can_delete":false,"product_type":"c1","uid":1548814,"ip_address":"","ucode":"CE56C6773736D4","user_header":"https://static001.geekbang.org/account/avatar/00/17/a2/0e/62f10b10.jpg","comment_is_top":false,"comment_ctime":1599677522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599677522","product_id":100046801,"comment_content":"<br>        InnodbTreeNodesProject(id=[key], name=[data[1]])<br>            InnodbFilter(condition=[key &gt; 50])<br>                InnodbTreeScanAll(tree=[users])<br>       和<br><br>        InnodbTreeNodesProject(id=[key], name=[data[1]])<br>            InnodbTreeRangeScan(tree=[users], range=[key &gt; 50])  &#47;&#47; 全树扫描再按照主键过滤，直接可以优化为对树的范围查找<br>        从Sql语句上来说第一个是加where过滤，但不知道第二种是怎么过滤，没有innodbFilter，谢謝了","like_count":0},{"had_liked":false,"id":194752,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1585103166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585103166","product_id":100046801,"comment_content":"其实结合的相对不错的是mongodb,尤其大量的Coding可以用类sql;redis的B+其实还是类似，不过拆分这块确实有些其算法特性-这正是它能普遍流行的所在。","like_count":0},{"had_liked":false,"id":190461,"user_name":"刘楠","can_delete":false,"product_type":"c1","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1584662542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584662542","product_id":100046801,"comment_content":"看了下mysql还是有点蒙，慢慢理解了","like_count":0},{"had_liked":false,"id":190360,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1584632248,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1584632248","product_id":100046801,"comment_content":"如何结合文章理解小表驱动还是大表驱动呢？我还是想不清楚。","like_count":0,"discussions":[{"author":{"id":1666025,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","nickname":"雨落～紫竹","note":"","ucode":"33CED2F34E708F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309199,"discussion_content":"这样说吧 n*log（m）和m*log（n）的区别","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601214428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","nickname":"陆老师","note":"","ucode":"0EA27C4755FF4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236623,"discussion_content":"SQL的查询时间成本公式：单次访问驱动表的成本 + 驱动表扇出数 x 单次访问被驱动表的成本。扇出表示查询出的数据量，小表的扇出数相比大表来的很少，因此小表作为驱动表成本来的低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587109803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158873,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ae/d9/7a732188.jpg","nickname":"ROCKETsFORWARD","note":"","ucode":"D171E33E546FD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210738,"discussion_content":"首先肯定是小表驱动大表。原理的话我是这么理解的。假设小表a有100条，大表b有10000条，大表由于数据量大一般会有索引。如果是大表驱动小表，大表需要走全表扫描，那么总扫描数就是=大表条数*小表条数=10000*100=1000000。如果采用小表驱动大表，因为大表上有索引，那么每次用小表上的条件去大表查找时都可以用到索引，所以总扫描条数=小表条数*每次索引条数=100*log(10000)=10000条。欢迎大家指教。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584767293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190248,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1584622093,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584622093","product_id":100046801,"comment_content":"基本上就是一个提供了命令式的语言，用户告诉告诉数据库做什么东西就行。没有sql 就一般在存储层简单封装了一层对外的接口，而这层接口就和存储模型有很大关系，比如hbase ，redis 都是健值存储，所以对外主要操作就是get put 等等。","like_count":0}]}