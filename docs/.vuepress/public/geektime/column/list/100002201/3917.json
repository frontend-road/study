{"id":3917,"title":"42 | 弹力设计篇之“隔离设计”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>隔离设计对应的单词是Bulkheads，中文翻译为隔板。但其实，这个术语是用在造船上的，也就是船舱里防漏水的隔板。一般的船无论大小都会有这个东西，大一点的船都会把船舱隔成若干个空间。这样，如果船舱漏水，只会进到一个小空间里，不会让整个船舱都进水而导致整艘船都沉了，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/c4/0d73168bd1af3e1266c24c2064d391c4.png?wh=533*326\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/53/97/53ae45b51f9e2678ec7e8661ef233297.png?wh=527*246\" alt=\"\"></p><p>我们的软件设计当然也“漏水”，所以为了不让“故障”蔓延开来，需要使用“隔板”技术，来将架构分隔成多个“船舱”来隔离故障。</p><p>多扯一句，著名的泰坦尼克号也有Bulkheads设计，然而其设计上有个缺陷。如下图所示，当其撞上冰山漏水时，因为船体倾斜，导致水漫过了隔板，从而下沉了。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/bf/5bfda0399c45e1ae6a53860698740dbf.png?wh=865*677\" alt=\"\"></p><p>在分布式软件架构中，我们同样需要使用类似的技术来让我们的故障得到隔离。这就需要我们对系统进行分离。一般来说，对于系统的分离有两种方式，一种是以服务的种类来做分离，一种是以用户来做分离。下面具体说明一下这两种方式。</p><h1>按服务的种类来做分离</h1><p>下面这个图中，说明了按服务种类来做分离的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/eb/34e3b94399f89a825a0046234607f9eb.png?wh=865*415\" alt=\"\"></p><p>上图中，我们将系统分成了用户、商品、社区三个板块。这三个块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。这样一来，在物理上来说，一个板块的故障就不会影响到另一板块。</p><!-- [[[read_end]]] --><p>在亚马逊，每个服务都有自己的一个数据库，每个数据库中都保存着和这个业务相关的数据和相应的处理状态。而每个服务从一开始就准备好了对外暴露。同时，这也是微服务所推荐的架构方式。</p><p>然而任何架构都有其好和不好的地方，上面这种架构虽然在系统隔离上做得比较好，但是也存在以下一些问题。</p><ul>\n<li>如果我们需要同时获得多个板块的数据，那么就需要调用多个服务，这会降低性能。注意，这里性能降低指的是响应时间，而不是吞吐量（相反，在这种架构下，吞吐量可以得到提高）。</li>\n</ul><p>对于这样的问题，一般来说，我们需要小心地设计用户交互，最好不要让用户在一个页面上获得所有的数据。对于目前的手机端来说，因为手机屏幕尺寸比较小，所以，也不可能在一个屏幕页上展示太多的内容。</p><ul>\n<li>\n<p>如果有大数据平台，就需要把这些数据都抽取到一个数据仓库中进行计算，这也增加了数据合并的复杂度。对于这个问题，我们需要一个框架或是一个中间件来对数据进行相应的抽取。</p>\n</li>\n<li>\n<p>另外，如果我们的业务逻辑或是业务流程需要跨板块的话，那么一个板块的故障也会导致整个流程走不下去，同样会导致整体业务故障。</p>\n<p>对于这个问题，一方面，我们需要保证这个业务流程中各个子系统的高可用性，并且在业务流程上做成Step-by-Step的方式，这样用户交互的每一步都可以保存，以便故障恢复后可以继续执行，而不是从头执行。</p>\n</li>\n<li>\n<p>还有，如果需要有跨板块的交互也会变得有点复杂。对此我们需要一个类似于Pub/Sub的高可用、且可以持久化的消息订阅通知中间件来打通各个板块的数据和信息交换。</p>\n</li>\n<li>\n<p>最后还会有在多个板块中分布式事务的问题。对此，我们需要“二阶段提交”这样的方案。在亚马逊中，使用的是Plan – Reserve – Commit/Cancel 模式。</p>\n</li>\n</ul><p>也就是说，先做一个plan的API调用，然后各个子系统reserve住相应的资源，如果成功，则Commit；如果有一个失败，则整体Cancel。这其实很像阿里的TCC – try confirm/cancel。</p><p>可见，隔离了的系统在具体的业务场景中还是有很多问题的，是需要我们小心和处理的。对此，我们不可掉以轻心。根据我的经验，这样的系统通常会引入大量的异步处理模型。</p><h1>按用户的请求来做分离</h1><p>下图是一个按用户请求来做分离的图示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/5e/a7293c5fe813a7e8e2498aac34c4825e.png?wh=865*482\" alt=\"\"></p><p>在这个图中，可以看到，我们将用户分成不同的组，并把后端的同一个服务根据这些不同的组分成不同的实例。让同一个服务对于不同的用户进行冗余和隔离，这样一来，当服务实例挂掉时，只会影响其中一部分用户，而不会导致所有的用户无法访问。</p><p>这种分离和上面按功能的分离可以融合。说白了，这就是所谓的“多租户”模式。对于一些比较大的客户，我们可以为他们设置专门独立的服务实例，或是服务集群与其他客户隔离开来，对于一些比较小的用户来说，可以让他们共享一个服务实例，这样可以节省相关的资源。</p><p>对于“多租户”的架构来说，会引入一些系统设计的复杂度。一方面，如果完全隔离，资源使用上会比较浪费，如果共享，又会导致程序设计的一些复杂度。</p><p>通常来说多租户的做法有三种。</p><ol>\n<li>\n<p>完全独立的设计。每个租户有自己完全独立的服务和数据。</p>\n</li>\n<li>\n<p>独立的数据分区，共享的服务。多租户的服务是共享的，但数据是分开隔离的。</p>\n</li>\n<li>\n<p>共享的服务，共享的数据分区。每个租户的数据和服务都是共享的。</p>\n</li>\n</ol><p>这三种方案各有优缺点，如图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/9c/0c7cb0d25fb2c65a8db011ba61b8729c.png?wh=865*612\" alt=\"\"></p><p>通过上图，可以看到：</p><ul>\n<li>\n<p>如果使用完全独立的方案，在开发实现上和资源隔离度方面会非常好，然而，成本会比较高，计算资源也会有一定的浪费。</p>\n</li>\n<li>\n<p>如果使用完全共享的方案，在资源利用和成本上会非常好，然而，开发难度非常大，而且数据和资源隔离非常不好。</p>\n</li>\n</ul><p>所以，一般来说，技术方案会使用折中方案，也就是中间方案，服务是共享的，数据通过分区来隔离，而对于一些比较重要的租户（需要好的隔离性），则使用完全独立的方式。</p><p>然而，在虚拟化技术非常成熟的今天，我们完全可以使用“完全独立”（完全隔离）的方案，通过底层的虚拟化技术（Hypervisor的技术，如KVM，或是Linux Container的技术，如Docker）来实现物理资源的共享和成本的节约。</p><h1>隔离设计的重点</h1><p>要能做好隔离设计，我们需要有如下的一些设计考量。</p><ol>\n<li>\n<p>我们需要定义好隔离业务的大小和粒度，过大和过小都不好。这需要认真地做业务上的需求和系统分析。</p>\n</li>\n<li>\n<p>无论是做系统板块还是多租户的隔离，你都需要考虑系统的复杂度、成本、性能、资源使用的问题，找到一个合适的均衡方案，或是分布实施的方案尤其重要，这其中需要你定义好要什么和不要什么。因为，我们不可能做出一个什么都能满足的系统。</p>\n</li>\n<li>\n<p>隔离模式需要配置一些高可用、重试、异步、消息中间件，流控、熔断等设计模式的方式配套使用。</p>\n</li>\n<li>\n<p>不要忘记了分布式系统中的运维的复杂度的提升，要能驾驭得好的话，还需要很多自动化运维的工具，尤其是使用像容器或是虚拟机这样的虚拟化技术可以帮助我们更方便地管理，和对比资源更好地利用。否则做出来了也管理不好。</p>\n</li>\n<li>\n<p>最后，你需要一个非常完整的能够看得到所有服务的监控系统，这点非常重要。</p>\n</li>\n</ol><h1>小结</h1><p>好了，我们来总结一下今天分享的主要内容。首先，我从船体水密舱的设计，引出了分布式系统设计中的隔离设计。然后我介绍了常见的隔离有两种，一种是按服务种类隔离，另一种是按用户隔离（即多租户）。下节课，我们讲述异步通讯设计。希望对你有帮助。</p><p>也欢迎你分享一下你是如何为分布式系统做隔离设计的。</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","neighbors":{"left":{"article_title":"41 | 弹力设计篇之“认识故障和弹力设计”","id":3912},"right":{"article_title":"43 | 弹力设计篇之“异步通讯设计”","id":3926}},"comments":[{"had_liked":false,"id":9315,"user_name":"来","can_delete":false,"product_type":"c1","uid":1048433,"ip_address":"","ucode":"2612C1D888ED03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","comment_is_top":false,"comment_ctime":1526783349,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"96016063861","product_id":100002201,"comment_content":"我们目前系统中采用隔离的点包括：<br>1、服务集群隔离，我们可以配置不同的请求访问不同的服务集群，我们通过服务别名来区分<br>2、数据存储隔离，包括数据库隔离、缓存集群隔离。数据库隔离一般通过分库分表，读写分离<br>3、线程池隔离，在同一个应用中，不同的任务处理通过线程池隔离<br>4、网络带宽隔离<br><br>暂时想到这么多，我理解隔离的本质是当系统出尽现故障时，尽可能的将故障影响范围降到最低。","like_count":23},{"had_liked":false,"id":222315,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1590745312,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"14475647200","product_id":100002201,"comment_content":"       不是很能理解多组户做法中的第三种”共享服务和数据分区“。文章前半部分讲到用户分离的时候，我理解这里指的是物理隔离，但是阅读到”共享的服务，共享的数据分区。每个租户的数据和服务都是共享的“时，我有些疑问这不是又回到隔断设计前的问题吗？一旦服务挂了之后，不是依旧会导致所有用户不可用吗？<br>        如果是我理解上的问题，那么”共享的服务和数据分区“隔离的又是什么呢？","like_count":3,"discussions":[{"author":{"id":2399172,"avatar":"https://static001.geekbang.org/account/avatar/00/24/9b/c4/040d8f68.jpg","nickname":"Jackie","note":"","ucode":"A34DA64CC971F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346982,"discussion_content":"这种可能指的是逻辑隔离，比如数据库弄一个租户id的字段，租户只能访问到自己的数据这样？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612114685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1520703,"avatar":"https://static001.geekbang.org/account/avatar/00/17/34/3f/53aca22e.jpg","nickname":"ken","note":"","ucode":"DCAFD1DD5C6A0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2399172,"avatar":"https://static001.geekbang.org/account/avatar/00/24/9b/c4/040d8f68.jpg","nickname":"Jackie","note":"","ucode":"A34DA64CC971F8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394618,"discussion_content":"我也是这样理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631956489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":346982,"ip_address":""},"score":394618,"extra":""}]},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371337,"discussion_content":"共用机器，数据库资源，代码逻辑控制隔离。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619743300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010305,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6a/81/a08e6484.jpg","nickname":"张华","note":"","ucode":"85F7527BED2383","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545724,"discussion_content":"文章中已经讲了，这种方式对于资源的共享度是最高的，也就是说资源利用率做高的。所以是有意义的。但是需要在代码设计上做“软性”的隔离，比如通过线程池或信号量隔离来控制租户的并发量。这种方式需要额外的开发工作量和各种异常兜底处理，所以复杂度也会高一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642045405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387129,"discussion_content":"服务可以有多个实例，只不过对全体租户一视同仁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627999031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1909732,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","nickname":"Geek_99ae14","note":"","ucode":"268852986A6B69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346852,"discussion_content":"共享的服务可能是共享的服务，比如用户服务等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612083227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187021,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","nickname":"Gojustforfun","note":"","ucode":"7513A40F27344F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337978,"discussion_content":"我的理解是，以前是全部用户“共享的服务和数据分区”现在是具有某种特征的用户组“共享的服务和数据分区“。前者影响系统全部用户，后者只影响系统部分用户，”隔离“的是受影响的用户范围","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609141716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439953,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/d1/45800380.jpg","nickname":"Glory_Jin","note":"","ucode":"8E2386906B5863","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288727,"discussion_content":"是啊，这里我也不是很理解什么意思？开发难度高，隔离度又低，那存在的意义是什么嘛，不知道是不是理解的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593854337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234094,"user_name":"罗杰.菲の樂","can_delete":false,"product_type":"c1","uid":2016408,"ip_address":"","ucode":"63590706846EEA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","comment_is_top":false,"comment_ctime":1594580946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10184515538","product_id":100002201,"comment_content":"现在云服务厂商提供的服务大多数都是multi-tenant的，一般会有resource governance（RG）的专门的模块去防止 noisy neighbor，这里也体现出了隔离的思想。<br><br>如果用database as a service，即使创建了3个数据库服务，它们还是有一定的可能会被映射到同一个物理主机上。所以这里RG就显得更为重要了。","like_count":2},{"had_liked":false,"id":199611,"user_name":"PCMD","can_delete":false,"product_type":"c1","uid":1842844,"ip_address":"","ucode":"76A1106F42AEAC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/1e/9c/39f5ff2a.jpg","comment_is_top":false,"comment_ctime":1585492339,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10175426931","product_id":100002201,"comment_content":"目前，所采用的隔离，只是服务级别的隔离，用户级别的隔离，更多的像是基于区域而进行的异地多活，通过不同的地域，隔离不同的用户，这样，从地区网络，以及资源调控上，更具备优势，但是这个的话，也只有到了一定体量之后，才是合理高效的架构","like_count":2},{"had_liked":false,"id":4194,"user_name":"北极点","can_delete":false,"product_type":"c1","uid":1042842,"ip_address":"","ucode":"476820AE0AAA6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e9/9a/1d9e1d9a.jpg","comment_is_top":false,"comment_ctime":1521685399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10111619991","product_id":100002201,"comment_content":"隔离设计感觉是一个随着系统逐步进化，业务逐渐成熟的前提情况下诞生出来的模式。特别是多租户的设计！我之前的工作当中要是早了解或者思考下这种设计可能就会在维护现有的系统时考虑设计了，或者也会给技术管理层领导提建议了！读这篇文章很有感触。","like_count":2},{"had_liked":false,"id":290971,"user_name":"InfoQ_6fb64a94dbb7","can_delete":false,"product_type":"c1","uid":1627513,"ip_address":"","ucode":"C217E7F25E396E","user_header":"http://thirdwx.qlogo.cn/mmopen/vngWGjhPQibBXUbHBZ00MHDddJvanjGJDvMy7RjnuPSYNOkXbujmYicz7FPKN9KBqbASh7Tx6Px2aNBGeJN7FyBHwgI4KxNwbu/132","comment_is_top":false,"comment_ctime":1619885232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5914852528","product_id":100002201,"comment_content":"船仓 隔板&#47;泰坦尼克号这些内容简直和《反应式设计模式》书中一毛一样","like_count":1},{"had_liked":false,"id":211720,"user_name":"Geek_7b1383","can_delete":false,"product_type":"c1","uid":1310716,"ip_address":"","ucode":"A2F03709F77122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLndPicaib35sSOgGib8iafFBq8B0hoBO3Bfp3QViblYQ669lRFjPD1RSX2rDibmElID00l5oWokhuZBJnw/132","comment_is_top":false,"comment_ctime":1587998746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882966042","product_id":100002201,"comment_content":"隔离设计的重点<br>1）定义好隔离业务的大小和粒度，过大和过小都不好。这需要认真地做业务上的需求和系统分析。<br>2）系统的复杂度、成本、性能、资源使用的问题的合适的均衡方案，或是分布实施的方案<br>3）隔离模式需要配置一些高可用、重试、异步、消息中间件，流控、熔断等设计模式的方式配套使用。<br>4）自动化运维的工具，尤其是使用像容器或是虚拟机这样的虚拟化技术可以帮助我们更方便地管理，和对比资源更好地利用<br>5）非常完整的能够看得到所有服务的监控系统","like_count":1},{"had_liked":false,"id":331924,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1642901491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642901491","product_id":100002201,"comment_content":"我一开始会偏向去解决系统的扩展性问题，并且希望一套控制面和数据面。后来越来越开始接受为每一个环境部署一套控制面和数据面，其实我把时间从解决高扩展性问题变成了解决多控制面的一致性问题。","like_count":0},{"had_liked":false,"id":320747,"user_name":"晓峰Ontheway","can_delete":false,"product_type":"c1","uid":1782484,"ip_address":"","ucode":"7A39F2237B8D54","user_header":"https://static001.geekbang.org/account/avatar/00/1b/32/d4/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1636501840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636501840","product_id":100002201,"comment_content":"用的是服务隔离，每个服务下面都会挂一个数据库，并且数据会通过sns sqs流出，如果处理失败会进dlq中保存起来，人为介入处理。","like_count":0},{"had_liked":false,"id":318008,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1635122184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635122184","product_id":100002201,"comment_content":"隔离设计，流量调度，资源隔离，监控系统。按事业部做租户隔离，对服务做数据隔离，引入消息中间件。","like_count":0},{"had_liked":false,"id":210383,"user_name":"simonren","can_delete":false,"product_type":"c1","uid":1974906,"ip_address":"","ucode":"DFB59C705310C2","user_header":"","comment_is_top":false,"comment_ctime":1587733367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587733367","product_id":100002201,"comment_content":"技术方案会使用折衷方案，也就是中间方案，服务是共享的，数据通过分区来隔离，而对于一些比较重要的租户（需要好的隔离性），则使用完全独立的方式。","like_count":0},{"had_liked":false,"id":195095,"user_name":"dondon","can_delete":false,"product_type":"c1","uid":1732521,"ip_address":"","ucode":"8DD96E32BC02BD","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6f/a9/ce325b9f.jpg","comment_is_top":false,"comment_ctime":1585136284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585136284","product_id":100002201,"comment_content":"这两周在学kafka, Rabbit MQ等消息组件的设计结构，原理，一下子钻进细节里发现很多细节，有点迷失，读了这两篇隔离，异步通讯的文章，找回消息中间件中为什么要做很多细节设计原因，例如消息中间件都要做监控模块，broker做持久化，无状态服务，服务状态由第三方，如broker或zk保存。","like_count":0},{"had_liked":false,"id":172620,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1579237250,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579237250","product_id":100002201,"comment_content":"隔离设计，涉及隔离什么，怎么隔离。<br>隔离数据，隔离服务，隔离用户，完全隔离。<br>当前虚拟化可以把云资源隔离开来，但落实到不同系统，存储和cvm隔离最终还是要花钱。<br>要隔离，考虑好成本","like_count":0,"discussions":[{"author":{"id":2349807,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfAZx4rxlV0Pr3xQNNXGltxBq49KKtYGJdIbt3ubwNkI7yCkRteIAFxUbIIuSekPHCFHLIxL99qrSQ/132","nickname":"琥珀川","note":"","ucode":"8DE377A32ABF1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337135,"discussion_content":"再加一个，为什么这么隔离","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608802651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172388,"user_name":"FeiFei","can_delete":false,"product_type":"c1","uid":1045586,"ip_address":"","ucode":"01CD655DD4E56C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/52/10c4d863.jpg","comment_is_top":false,"comment_ctime":1579166890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579166890","product_id":100002201,"comment_content":"是啊。<br>监控系统太重要了，怕的不是出故障。故障在分布式系统里面是不可避免的，需要解决的是围绕着故障发生所做的一系列事情。<br>事前的监控<br>发生时候的故障处理<br>解决完问题的故障反思，避免下次再出现同一个错误。","like_count":1},{"had_liked":false,"id":165685,"user_name":"海风","can_delete":false,"product_type":"c1","uid":1465863,"ip_address":"","ucode":"38BA513F7AEC8C","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/07/61a4cb92.jpg","comment_is_top":false,"comment_ctime":1577282204,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1577282204","product_id":100002201,"comment_content":"什么是分布实施的方案？是分布式方案吗？还是分步实施的方案？","like_count":0},{"had_liked":false,"id":164729,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1577083230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577083230","product_id":100002201,"comment_content":"学习笔记  https:&#47;&#47;mubu.com&#47;colla&#47;4hQwJWSUMRM","like_count":0},{"had_liked":false,"id":163988,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1576840705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576840705","product_id":100002201,"comment_content":"坚持打开，学习笔记 https:&#47;&#47;mubu.com&#47;colla&#47;4hQwJWSUMRM","like_count":0},{"had_liked":false,"id":109382,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1562028672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562028672","product_id":100002201,"comment_content":"分布式系统的隔离设计类似于船体设计中隔板，保证一个模块故障的时候其它模块不受影响。<br>隔离有两种方式，一是按照服务类型隔离，一个是按照用户维度隔离。隔离后还要注意分布式系统故障的不可避免，做好自动运维和监控","like_count":0},{"had_liked":false,"id":105804,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1561085894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561085894","product_id":100002201,"comment_content":"@来 隔离多了是不是服务之间的通信 和 治理 也是一个问题，都是学问啊。即要保证服务高可用，故障隔离，同时要保证服务间可用性可见性通讯，故障自动转移。 <br>请教下 回复中的 数据库隔离  分库 分表 同读写分离 是否冲突 矛盾 能一起做？","like_count":0},{"had_liked":false,"id":63152,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1548289916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548289916","product_id":100002201,"comment_content":"很巧啊<br>目前有一个项目正在做隔离设计，原因是业务运维人员又多了一波人，他们希望和原业务运营人员看到的数据是完全隔离看到，系统原本已经有了菜单权限控制也有了组织机构的控制，现在再加租户的数据隔离控制。","like_count":0},{"had_liked":false,"id":45671,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1543742873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543742873","product_id":100002201,"comment_content":"受启发了，特别是saas的开发中。","like_count":0},{"had_liked":false,"id":41577,"user_name":"Geek_fb3db2","can_delete":false,"product_type":"c1","uid":1218254,"ip_address":"","ucode":"8089B8311B6C80","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/ce/8c3bdbe5.jpg","comment_is_top":false,"comment_ctime":1542808459,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1542808459","product_id":100002201,"comment_content":"我们应用是通集群架构的，前置是F5，这种是不是没发做隔离呀，因为请求是通过负载均衡动态请求后短具体某台服务的","like_count":0,"discussions":[{"author":{"id":1005824,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","nickname":"Arthur.Li","note":"","ucode":"EC2436A5136C13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":101323,"discussion_content":"大了隔离就是多个f5，小了隔在集群内隔离，根据业务分库分表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577286510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":3577,"user_name":"shufang","can_delete":false,"product_type":"c1","uid":1055576,"ip_address":"","ucode":"1F16B2D15E0151","user_header":"","comment_is_top":false,"comment_ctime":1519931351,"is_pvip":false,"replies":[{"id":"694","content":"多租户的隔离有三种方案，我在文中说了，请仔细阅读。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1519958631,"ip_address":"","comment_id":3577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1519931351","product_id":100002201,"comment_content":"多租户的实例是指请求层服务层数据层的完全隔离吗？","like_count":0,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415949,"discussion_content":"多租户的隔离有三种方案，我在文中说了，请仔细阅读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1519958631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}