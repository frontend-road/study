{"id":120243,"title":"16 | WebRTC中的数据统计原来这么强大（下）","content":"<p>在<a href=\"https://time.geekbang.org/column/article/118885\">上一篇文章</a>中我向你介绍了 WebRTC 可以获得哪些统计信息，以及如何使用 RTCPeerConntction 对象的 getStats 方法获取想要的统计信息。</p><p>那本文我们在<a href=\"https://time.geekbang.org/column/article/118885\">上一篇文章</a>的基础之上，继续对 WebRTC 中的统计信息做进一步的讨论，了解它更为详细的内容。</p><h2>再论 getStats</h2><p>现在你已经非常清楚，通过 RTCPeerConnection 对象的 getStats 方法可以很轻松地获取到各种统计信息，比如发了多少包、收了多少包、丢了多少包，等等。但实际上对于收发包这块儿的统计还可以从其他方法获取到，即通过 <strong>RTCRtpSender 的 getStats 方法和 RTCRtpReceiver 的 getStats 方法也能获取收发包的统计信息</strong>。</p><p>也就是说，除了 RTCPeerConnection 对象有 getStats 方法外，RTCRtpSender 和 RTCRtpReceiver 对象也有 getStats 方法，只不过它们只能获取到与传输相关的统计信息，而RTCPeerConnection还可以获取到其他更多的统计信息。</p><p>下面我们就来看一下它们三者之间的区别：</p><ul>\n<li>RTCPeerConnection 对象的 getStats 方法获取的是<strong>所有的统计信息</strong>，除了收发包的统计信息外，还有候选者、证书、编解码器等其他类型的统计信息。</li>\n<li>RTCRtpSender对象的 getStats 方法只统计<strong>与发送相关</strong>的统计信息。</li>\n<li>RTCRtpReceiver对象的 getStats 方法则只统计<strong>与接收相关</strong>的统计信息。</li>\n</ul><!-- [[[read_end]]] --><p>通过上面的描述，我想你已经非常清楚 RTCPeerConnection 中的 getStats 方法是获取到所有的统计信息，而 RTCRtpSender 和 RTCRtpReceiver 对象中的 getStats 方法则分别统计的是发包、收包的统计信息。所以RTCPeerConnection 对象中的统计信息与 RTCRtpSender 和 RTCRtpReceiver 对象中的统计信息是<strong>整体与局部</strong>的关系。</p><p>下面咱们通过一段示例代码来详细看看它们之间的不同：</p><pre><code>...\nvar pc = new RTCPeerConnection(null);\n...\n\npc.getStats()\n  .then( reports =&gt; { //得到相关的报告\n    reports.forEach( report =&gt; { //遍历每个报告\n      console.log(report);\n    });\n  }).catch( err=&gt;{\n    console.error(err);\n  });\n\n//从 PC 上获得 sender 对象\nvar sender = pc.getSenders()[0];\n\n...\n\n//调用sender的 getStats 方法    \nsender.getStats()\n    .then(reports =&gt; { //得到相关的报告\n        reports.forEach(report =&gt;{ //遍历每个报告\n            if(report.type === 'outbound-rtp'){ //如果是rtp输出流\n            ....\n            }\n        }\n     );\n ...\n</code></pre><p>在上面的代码中生成了两段统计信息，一段是通过 RTCPeerConnection 对象的 getStats 方法获取到的，其结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/61/5c6cdea557a8a3ec0208a2915d6a5461.png?wh=1142*567\" alt=\"\"></p><p>另一段是通过 RTCRtpSender 对象的 getStats 方法获取到的，其结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/21/24/212a2a9124f8b643755ee63a5bafca24.png?wh=1142*569\" alt=\"\"></p><p>通过对上面两幅图的对比你可以发现，RTCPeerConnection 对象的 getStats 方法获取到的统计信息明显要比 RTCRtpSender 对象的 getStats 方法获取到的信息多得多。这也证明了我们上面的结论，即 RTCPeerConnection 对象的 getStas 方法获取到的信息与 RTCRtpSender 对象的 getStats 方法获取的信息之间是<strong>整体与局部</strong>的关系。</p><h2>RTCStatsReport</h2><p>我们通过 getStats API 可以获取到WebRTC各个层面的统计信息，它的返回值的类型是RTCStatsReport。</p><p>RTCStatsReport的结构如下：</p><pre><code>interface RTCStatsReport {\n  readonly maplike&lt;DOMString, object&gt;;\n};\n</code></pre><p>即 RTCStatsReport 中有一个Map，Map中的key是一个字符串，object是 RTCStats 的继承类。</p><p>RTCStats作为基类，它包括以下三个字段。</p><ul>\n<li>id：对象的唯一标识，是一个字符串。</li>\n<li>timestamp：时间戳，用来标识该条Report是什么时间产生的。</li>\n<li>type：类型，是 RTCStatsType 类型，它是各种类型Report的基类。</li>\n</ul><p>而继承自 RTCStats 的子类就特别多了，下面我挑选其中的一些子类向你做下介绍。</p><p><strong>第一种，编解码器相关</strong>的统计信息，即RTCCodecStats。其类型定义如下：</p><pre><code>dictionary RTCCodecStats : RTCStats {\n             unsigned long payloadType; //数据负载类型\n             RTCCodecType  codecType;   //编解码类型\n             DOMString     transportId; //传输ID\n             DOMString     mimeType;    \n             unsigned long clockRate;   //采样时钟频率\n             unsigned long channels;    //声道数，主要用于音频\n             DOMString     sdpFmtpLine; \n             DOMString     implementation;\n};\n</code></pre><p>通过 RTCCodecStats 类型的统计信息，你就可以知道现在直播过程中都支持哪些类型的编解码器，如 AAC、OPUS、H264、VP8/VP9等等。</p><p><strong>第二种，输入RTP流相关</strong>的统计信息，即 RTCInboundRtpStreamStats。其类型定义如下：</p><pre><code>dictionary RTCInboundRtpStreamStats : RTCReceivedRtpStreamStats {\n            ...\n             unsigned long        frameWidth;     //帧宽度\n             unsigned long        frameHeight;    //帧高度\n             double               framesPerSecond;//每秒帧数\n             ...\n             unsigned long long   bytesReceived;  //接收到的字节数\n             .... \n             unsigned long        packetsDuplicated; //重复的包数\n             ...\n             unsigned long        nackCount;         //丢包数\n             .... \n             double               jitterBufferDelay; //缓冲区延迟\n             .... \n             unsigned long        framesReceived;    //接收的帧数\n             unsigned long        framesDropped;     //丢掉的帧数\n             ...\n            };\n</code></pre><p>通过 RTCInboundRtpStreamStats 类型的统计信息，你就可以从中取出接收到字节数、包数、丢包数等信息了。</p><p><strong>第三种，输出RTP流相关</strong>的统计信息，即 RTCOutboundRtpStreamStats。其类型定义如下：</p><pre><code>dictionary RTCOutboundRtpStreamStats : RTCSentRtpStreamStats {\n             ...\n             unsigned long long   retransmittedPacketsSent; //重传包数\n             unsigned long long   retransmittedBytesSent; //重传字节数\n             double               targetBitrate;  //目标码率\n             ...\n.             \n             unsigned long        frameWidth;  //帧的宽度\n             unsigned long        frameHeight; //帧的高度\n             double               framesPerSecond; //每秒帧数\n             unsigned long        framesSent; //发送的总帧数\n             ...\n             unsigned long        nackCount; //丢包数\n             .... \n};\n</code></pre><p>通过 RTCOutboundRtpStreamStats 类型的统计信息，你就可以从中得到目标码率、每秒发送的帧数、发送的总帧数等内容了。</p><p>在 WebRTC 1.0 规范中，一共定义了 17 种 RTCStats 类型的子类，这里我们就不一一进行说明了。关于这 17 种子类型，你可以到文末的<span class=\"orange\">参考</span>中去查看。实际上，这个表格在<a href=\"https://time.geekbang.org/column/article/118885\">上一篇文章</a>中我已经向你做过介绍了，这里再重新温习一下。</p><p>若你对具体细节很感兴趣的话，可以通过《WebRTC1.0规范》去查看每个 RTCStats 的详细定义，<a href=\"https://w3c.github.io/webrtc-stats/#rtctatstype-*\">相关链接在这里</a>。</p><h2>RTCP 交换统计信息</h2><p>在<a href=\"https://time.geekbang.org/column/article/118885\">上一篇文章</a>中，我给你留了一道思考题，不知你是否已经找到答案了？实际上在WebRTC中，上面介绍的输入/输出RTP流报告中的统计数据都是通过 RTCP 协议中的 SR、RR 消息计算而来的。</p><p>关于 RTCP 以及 RTCP 中的 SR、 RR 等相关协议内容记不清的同学可以再重新回顾一下<a href=\"https://time.geekbang.org/column/article/109999\">《 06 | WebRTC中的RTP及RTCP详解》</a>一文的内容。</p><p>在RTCP协议中，SR 是发送方发的，记录的是RTP流从发送到现在一共发了多少包、发送了多少字节数据，以及丢包率是多少。RR是接收方发的，记录的是RTP流从接收到现在一共收了多少包、多少字节的数据等。</p><p>通过 SR、RR 的不断交换，在通讯的双方就很容易计算出每秒钟的传输速率、丢包率等统计信息了。</p><p><strong>在使用 RTCP 交换信息时有一个主要原则，就是 RTCP 信息包在整个数据流的传输中占带宽的百分比不应超过 5%</strong>。也就是说你的媒体包发送得越多，RTCP信息包发送得也就越多。你的媒体包发得少，RTCP包也会相应减少，它们是一个联动关系。</p><h2>绘制图形</h2><p>通过 getStats 方法我们现在可以获取到各种类型的统计数据了，而且在上面的 <strong>RTCP交换统计信息</strong>中，我们也知道了 WebRTC 底层是如何获取到传输相关的统计数据的了，那么接下来我们再来看一下如何利用 RTCStatsReport 中的信息来绘制出各种分析图形，从而使监控的数据更加直观地展示出来。</p><p>在本文的例子中，我们以绘制每秒钟发送的比特率和每秒钟发送的包数为例，向你展示如何将 RTCStats 信息转化为图形。</p><p>要将 Report 转化为图形大体上分为以下几个步骤：</p><ul>\n<li>引入第三方库 graph.js；</li>\n<li>启动一个定时器，每秒钟绘制一次图形；</li>\n<li>在定时器的回调函数中，读取 RTCStats 统计信息，转化为可量化参数，并将其传给 graph.js进行绘制。</li>\n</ul><p>了解了上面的步骤后，下来我们就来实操一下吧！</p><p>第三方库 graph.js 是由 WebRTC 项目组开发的，是专门用于绘制各种图形的，它底层是通过 Canvas 来实现的。这个库非常短小，只有 600 多行代码，使用起来也非常方便，在下面的代码中会对它的使用做详细的介绍。</p><p>另外，该库的代码链接我已经放到了文章的末尾，供你参考。</p><h3>1. 引入第三方库</h3><p>在 JavaScript 中引入第三方库也非常简单，只要使用 <code>&lt;script&gt;</code> 就可以将第三方库引入进来了。具体代码如下：</p><pre><code>&lt;html&gt;\n  ...\n  &lt;body&gt;\n  ...\n  &lt;script src=&quot;js/client.js&quot;&gt;&lt;/script&gt;\n  \n  //引入第三方库 graph.js\n  &lt;script src=&quot;js/third_party/graph.js&quot;&gt;&lt;/script&gt;\n  ...\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3>2. client.js 代码的实现</h3><p>client.js是绘制图形的核心代码，具体代码如下所示：</p><pre><code>...\n\nvar pc = null;\n\n//定义绘制比特率图形相关的变量\nvar bitrateGraph;\nvar bitrateSeries;\n\n//定义绘制发送包图形相关的变理\nvar packetGraph;\nvar packetSeries;\n...\n\npc = new RTCPeerConnection(null);\n\n...\n\n//bitrateSeries用于绘制点\nbitrateSeries = new TimelineDataSeries();\n//bitrateGraph用于将bitrateSeries绘制的点展示出来\nbitrateGraph = new TimelineGraphView('bitrateGraph', 'bitrateCanvas');\nbitrateGraph.updateEndDate(); //绘制时间轴\n\n//与上面一样，只不是用于绘制包相关的图\npacketSeries = new TimelineDataSeries();\npacketGraph = new TimelineGraphView('packetGraph', 'packetCanvas');\npacketGraph.updateEndDate();\n\n...\n\n//每秒钟获取一次 Report，并更新图形\nwindow.setInterval(() =&gt; {\n\n  if (!pc) { //如果 pc 没有创建直接返回\n    return;\n  }\n\n  //从 pc 中获取发送者对象\n  const sender = pc.getSenders()[0];\n  if (!sender) {\n    return;\n  }\n\n  sender.getStats().then(res =&gt; { //获取到所有的 Report\n    res.forEach(report =&gt; { //遍历每个 Report\n      let bytes;\n      let packets;\n\n      //我们只对 outbound-rtp 型的 Report 做处理\n      if (report.type === 'outbound-rtp') { \n        if (report.isRemote) { //只对本地的做处理\n          return;\n        }\n\n        const now = report.timestamp;\n        bytes = report.bytesSent; //获取到发送的字节\n        packets = report.packetsSent; //获取到发送的包数\n\n        //因为计算的是每秒与上一秒的数据的对比，所以这里要做个判断\n        //如果是第一次就不进行绘制\n        if (lastResult &amp;&amp; lastResult.has(report.id)) {\n          \n          //计算这一秒与上一秒之间发送数据的差值\n          var mybytes= (bytes - lastResult.get(report.id).bytesSent);\n          //计算走过的时间，因为定时器是秒级的，而时间戳是豪秒级的\n          var mytime = (now - lastResult.get(report.id).timestamp);\n          const bitrate = 8 * mybytes / mytime * 1000; //将数据转成比特位\n\n          //绘制点\n          bitrateSeries.addPoint(now, bitrate);\n          //将会制的数据显示出来\n          bitrateGraph.setDataSeries([bitrateSeries]);\n          bitrateGraph.updateEndDate();//更新时间\n\n          //下面是与包相关的绘制\n          packetSeries.addPoint(now, packets -\n                               lastResult.get(report.id).packetsSent);\n          packetGraph.setDataSeries([packetSeries]);\n          packetGraph.updateEndDate();\n        }\n      }\n    });\n\n    //记录上一次的报告\n    lastResult = res;\n\n  });\n\n}, 1000); //每秒钟触发一次\n\n...\n</code></pre><p>在该代码中，最重要的是32～89行的代码，因为这其中实现了一个定时器——每秒钟执行一次。每次定时器被触发时，都会调用sender 的 getStats 方法获取与传输相关的统计信息。</p><p>然后对获取到的 RTCStats 类型做判断，只取 RTCStats 类型为 outbound-rtp 的统计信息。最后将本次统计信息的数据与上一次信息的数据做差值，从而得到它们之间的增量，并将增量绘制出来。</p><h3>3. 最终的结果</h3><p>当运行上面的代码时，会绘制出下面的结果，这样看起来就一目了然了。通过这张图你可以看到，当时发送端的码率为 1.5Mbps的带宽，每秒差不多发送小200个数据包。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/ca/4766d46db9b8c3aaece83a403f0e07ca.png?wh=1142*336\" alt=\"\"></p><h2>小结</h2><p>在本文中，我首先向你介绍了除了可以通过 RTCPeerConnection 对象的 getStats 方法获取到各种统计信息之外，还可以通过 RTCRtpSender 或 RTCRtpReceiver 的  getStats 方法获得与传输相关的统计信息。WebRTC对这些统计信息做了非常细致的分类，按类型可细分为 17 种，关于这 17 种类型你可以查看文末<span class=\"orange\">参考</span>中的表格。</p><p>在文中我还向你重点介绍了<strong>编解码器、输入RTP流</strong>以及<strong>输出RTP流</strong>相关的统计信息。</p><p>除此之外，在文中我还向你介绍了<strong>网络传输</strong>相关的统计信息是如何获得的，即通过 RTCP 协议中的 SR 和 RR 消息进行交换而来的。实际上，对于 RTCP 的知识我在前面<a href=\"https://time.geekbang.org/column/article/109999\">《06 | WebRTC中的RTP及RTCP详解》</a>一文中已经向你讲解过了，而本文所讲的内容则是 RTCP 协议的具体应用。</p><p>最后，我们通过使用第三方库 graph.js 与 getStats 方法结合，就可以将统计信息以图形的方式绘制出来，使你可以清晰地看出这些报告真正表达的意思。</p><h2>思考时间</h2><p>今天你要思考的问题是：当使用 RTCP 交换 SR/RR 信息时，如果 SR/RR包丢失了，会不会影响数据的准确性呢？为什么呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><h2>参考</h2><p><img src=\"https://static001.geekbang.org/resource/image/72/93/72b638952a9e9d0440e9efdb4e2f4493.png?wh=1142*1158\" alt=\"\"></p><p><a href=\"https://github.com/avdance/webrtc_web/tree/master/16_getstat/getstats\">例子代码地址，戳这里</a><br>\n<a href=\"https://github.com/avdance/webrtc_web/tree/master/16_getstat/getstats/js/third_party\">第三方库地址，戳这里</a></p><p></p>","neighbors":{"left":{"article_title":"15 | WebRTC中的数据统计原来这么强大（上）","id":118885},"right":{"article_title":"17 | 如何使用Canvas绘制统计图表（上）？","id":120251}},"comments":[{"had_liked":false,"id":125981,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566288994,"is_pvip":false,"replies":[{"id":"46483","content":"赞！","user_name":"作者回复","comment_id":125981,"uid":"1507837","ip_address":"","utype":1,"ctime":1566317256,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"31631060066","product_id":100031801,"comment_content":"思考题：<br>不会影响准确性，因为每一次传输都是全量的，丢失只会丢失这一次的值，在下一次又会全量带过来。","like_count":8,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463773,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566317256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301570,"user_name":"npersonal","can_delete":false,"product_type":"c1","uid":1337630,"ip_address":"","ucode":"060839D2BF5E33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOCkbWo7KTAUYkTk5sqgOSAdjS51ZH8bTxiaBNLVnIFUOMsicBHRJBoXSOX6sZp5uORE2waGyz3ysw/132","comment_is_top":false,"comment_ctime":1625741802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625741802","product_id":100031801,"comment_content":"老师，实现语音激励功能webrtc有提供一些支持吗，还是说都是要自己实现（大致思路是不是这样：使用AudioContext去做分析，识别出人声部分，然后去计算人声部分的音量等级去做比较）","like_count":0},{"had_liked":false,"id":295110,"user_name":"npersonal","can_delete":false,"product_type":"c1","uid":1337630,"ip_address":"","ucode":"060839D2BF5E33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOCkbWo7KTAUYkTk5sqgOSAdjS51ZH8bTxiaBNLVnIFUOMsicBHRJBoXSOX6sZp5uORE2waGyz3ysw/132","comment_is_top":false,"comment_ctime":1622250452,"is_pvip":false,"replies":[{"id":"108005","content":"开销还好，精度不一样应该是使用的计算公式不一致造成的，音频level 有不同的理解，你可以到网上查查","user_name":"作者回复","comment_id":295110,"uid":"1507837","ip_address":"","utype":1,"ctime":1623579903,"user_name_real":"音视频专家-李超"}],"discussion_count":1,"race_medal":0,"score":"1622250452","product_id":100031801,"comment_content":"老师，我想获取声音等级，目前web端是从webrtc提供的标准中获取，其他端是根据流去算出来的，我觉得这块性能开销很大。但是从webrtc标准api中获取，发现不同端取到的音量等级精度不一致，pc那边给过来的正常声音大概是0.7这种精度，但是android端给过来的是0.00…这种，这种是什么原因导致","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520951,"discussion_content":"开销还好，精度不一样应该是使用的计算公式不一致造成的，音频level 有不同的理解，你可以到网上查查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623579903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240493,"user_name":"ripple","can_delete":false,"product_type":"c1","uid":1090051,"ip_address":"","ucode":"99008FD0533F68","user_header":"https://wx.qlogo.cn/mmopen/vi_32/ywSuwVNMKNjRLPMjZmpQOQHWW2usAu8RwRIOlBHaVVU6J3xHdtibgO6FVzYkRIkV50vCr62ia4OwJp07giabiazUGA/132","comment_is_top":false,"comment_ctime":1596945933,"is_pvip":false,"replies":[{"id":"89676","content":"从接收方收到反馈后，当然是限制发送发码流。如果是C收到了A和B的 RR，丢包严重的话，它要限制C的发送。","user_name":"作者回复","comment_id":240493,"uid":"1507837","ip_address":"","utype":1,"ctime":1598018495,"user_name_real":"音视频专家-李超"}],"discussion_count":1,"race_medal":0,"score":"1596945933","product_id":100031801,"comment_content":"一直对sr和rr不太理解，SR 是发送方发的，记录的是 RTP 流从发送到现在一共发了多少包、发送了多少字节数据，以及丢包率是多少。RR 是接收方发的，记录的是 RTP 流从接收到现在一共收了多少包、多少字节的数据等，实际中，发送方也是接收方的哇，譬如A，B，C三个user，A能收到BC的，B能收到AC的，C能收到AB的，然后拿C举例，收到A和B的RR后，然后和自己的SR对比，发现谁丢包严重，就限制谁？发现假如丢包严重，降低码率应该降低A还是B还是C呢？","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503466,"discussion_content":"从接收方收到反馈后，当然是限制发送发码流。如果是C收到了A和B的 RR，丢包严重的话，它要限制C的发送。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598018495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195076,"user_name":"Benjamin","can_delete":false,"product_type":"c1","uid":1168314,"ip_address":"","ucode":"9650EFA8481B41","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/ba/75f3b73b.jpg","comment_is_top":false,"comment_ctime":1585133777,"is_pvip":false,"replies":[{"id":"74301","content":"对的，会根据这些信息，调整发包的速度","user_name":"作者回复","comment_id":195076,"uid":"1507837","ip_address":"","utype":1,"ctime":1585204070,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1585133777","product_id":100031801,"comment_content":"李老师，SR 和 RR 这些统计信息，会反馈影响 WebRTC 的通信质量上嘛？","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488967,"discussion_content":"对的，会根据这些信息，调整发包的速度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585204070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126640,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1233546,"ip_address":"","ucode":"84925F8DEE79CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/8a/57dcd0c7.jpg","comment_is_top":false,"comment_ctime":1566439863,"is_pvip":false,"replies":[{"id":"46895","content":"你用video 标签播的吗？如果是 video标签各浏览器的实现不一样，在chrome下，浏览器对vp8&#47;vp9支技的更好。你可能通过第三方库来播MP4文件","user_name":"作者回复","comment_id":126640,"uid":"1507837","ip_address":"","utype":1,"ctime":1566487132,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1566439863","product_id":100031801,"comment_content":"老师还是昨天问题，在Frefix，IE浏览器上是可以播放的，只是Google Chrome上播放一点就报错，提示视频问题或浏览器某些特征不支持，如果真的是视频问题，这种性象，暂时无法理解！","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464098,"discussion_content":"你用video 标签播的吗？如果是 video标签各浏览器的实现不一样，在chrome下，浏览器对vp8/vp9支技的更好。你可能通过第三方库来播MP4文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566487132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126526,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1233546,"ip_address":"","ucode":"84925F8DEE79CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/8a/57dcd0c7.jpg","comment_is_top":false,"comment_ctime":1566401119,"is_pvip":false,"replies":[{"id":"46825","content":"提示上有这个信息“Invalid NAL unit 8” 说明你的视频数据有问题","user_name":"作者回复","comment_id":126526,"uid":"1507837","ip_address":"","utype":1,"ctime":1566436383,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1566401119","product_id":100031801,"comment_content":"老师，这个问题你遇到吗，能否帮帮我<br>Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;F:&#47;mp4&#47;convert&#47;041.mp4&#39;:  Metadata:    major_brand     : isom    minor_version   : 512    compatible_brands: isomiso2avc1mp41    encoder         : Lavf57.76.100  Duration: 00:00:21.04, start: 0.033008, bitrate: 3656 kb&#47;s    Stream #0:0(und): Video: h264 (Main) (avc1 &#47; 0x31637661), yuv420p(tv, bt709), 1920x1080, 3653 kb&#47;s, 29.99 fps, 50 tbr, 15360 tbn, 60 tbc (default)    Metadata:      handler_name    : VideoHandler[h264 @ 00000000028a4d80] Invalid NAL unit 8, skipping.    Last message repeated 3 times[h264 @ 00000000028a4d80] concealing 7569 DC, 7569 AC, 7569 MV errors in P frame[h264 @ 00000000028a4d80] illegal short term buffer state detected[h264 @ 00000000028a4d80] mmco: unref short failure","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464036,"discussion_content":"提示上有这个信息“Invalid NAL unit 8” 说明你的视频数据有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}