{"id":473382,"title":"06｜加密失败：使用了加密算法也会被破解吗？","content":"<p>你好，我是王昊天。</p><p>从这节课开始我们开启了新的模块——加密失败的学习。这是2021 OWASP TOP 10的排名第二的风险种类，与失效的访问控制相比，<strong>加密失败更多地体现为一种单点技术问题，通常是由于开发人员对加密过程使用不合理造成的</strong>。</p><p>先来分享一个我的小故事：</p><p>作为一个Dota 2玩家，我有一台自己的Windows台式机，配置是i7-4790k + 16GB内存 + 256GB SSD。相信你能看出来，虽然这台机器在当时也算小“高端”配置，但到现在已经稍微有点力不从心了。</p><p>于是我便产生了更新硬件的想法——经过多次测试，我觉得性能下降的主要问题在于CPU温度，这一想法在我百度了“4790k 散热”之后更加坚定，于是我决定用水冷取代原来CPU自带的小风扇。在某东购置了水冷设备后，经过简单的安装，顺利开机。令人惊讶的一幕出现了：原来开机之后CPU温度是70℃，现在是99℃，由于温度过高开机不到20分钟就会自动关机。</p><p>为什么水冷会比风冷效果还差呢？是不是水冷设备没有工作？但我是按照说明书安装的，看起来呼吸灯也是亮的。看着一体化的水冷设备，没有任何有效的判断方式，我的内心是崩溃的。经过接近半天时间的不断调试和开机测试，最终我找到了问题——螺丝没有拧紧导致接触不严密，散热效果没有发挥出来。</p><!-- [[[read_end]]] --><p>分享这个故事，我是想说的是，<strong>在面对一个我们完全不了解的黑盒产品时，使用过程中出问题的可能性是很大的，加密失败这种安全风险往往就因此产生</strong>。</p><p>加密是一个数学问题，应用到了开发场景。事实上，加密函数就像一个黑盒，开发人员能够考虑的只有输入和输出，其中输出还是非常复杂的。加密是否成功，极大地影响着系统的安全性，但是很多开发人员，对加密却没有深入研究。因此，<strong>只验证加密结果的正确性，却不验证加密结果的质量是不行的</strong>。接下来的几节课我们会重点讨论加密结果的质量问题。</p><h2>加密失败</h2><p>在国内的信息安全建设大背景下，系统的数据安全已经愈加重要，其中首先要考虑的就是数据的传输层和存储层的安全。这些环节中主要采用的保护方案就是加密，目前加密已经渗透到了开发的方方面面。也许这样描述你没有直观的感受，那么我们来看一些场景：</p><ul>\n<li>目前数据是否是通过明文进行传输的？</li>\n<li>目前业务系统中是否存在旧版本或者强度比较低的加密函数？</li>\n<li>服务器上的证书是否合法有效，证书信任链是否完整？</li>\n<li>加密函数的初始化序列是否被合理使用？是否使用了不安全的加密操作，比如ECB？</li>\n<li>随机数是否得到了合理的初始化，以及是否使用了硬编码种子？</li>\n<li>加密错误信息或者侧信道信息是否导致密码可破解？</li>\n</ul><p>以上这些只是部分场景，可以看到，加密正在成为系统开发不可分割的一部分，那么接下来，我们来就了解一些典型的攻击场景：</p><p><strong>1. 数据库加密</strong><br>\n以MySQL为例，数据库可以通过其内部加密函数实现数据加密存储，然而在数据读取过程中由于经过自动解密过程，SQL注入这样的攻击就有可能获取到数据库中的明文。</p><p><strong>2. 数据明文传输</strong><br>\n以在企业内网搭建的系统为例，由于许多系统并未强制要求TLS，因此，如果攻击者可以监控内网流量，则有可能窃取到网络传输的敏感数据，包括登录凭据等。事实上，目前攻击者入侵内网设备的情况是很多见的，无论是通过脆弱的边界路由设备，或是经过存在漏洞的无线网络设备，以及通过鱼叉式网络钓鱼，攻击者一旦穿越企业的网络防御边界，便可通过嗅探、ARP欺骗等方式窃取网络数据，进而在内网横向移动。</p><p><strong>3. 加密强度不够</strong><br>\n在一些数据存储或者传输过程中，开发者在实现数据加密过程中仅仅“走流程”地进行了加密操作，然而如此加密的强度并不足以抵御攻击者的破解。</p><p><strong>4. 弱HASH</strong><br>\n在使用特定算法生成HASH结果的时候，如果HASH算法因为设计的缺陷，不能满足安全性需求，导致攻击者能够判断出原始输入，这是原像攻击（preimage attack）；如果攻击者能够找到其他输入，并且生成同样的HASH输出，这是第二原像攻击（2nd preimage attack）；如果攻击者能够找到多个输入，并且生成同样的HASH输出，这是生日攻击（birthday attack）。</p><p><strong>5. 签名验证不当</strong><br>\n在数据传输过程中，通信协议中会涉及数据段的签名，以此来保证数据的完整性和不可篡改性。在实际数据交互中，有时可能由于签名未认证，有时可能仅验证了签名的有效性，但并没有重新从数据段计算签名进行比对，这些问题都可能导致攻击者执行绕过。</p><h2>RSA - 低加密指数攻击</h2><h4>RSA算法</h4><p>在了解这种攻击类型之前，我们要先了解RSA算法，这是目前应用最广泛的非对称加密算法之一。</p><p>我们首先看公式。</p><blockquote>\n<p>plain_text = 明文，cipher_text = 密文，(n,e) = 公钥，(n,d) = 私钥<br>\n加密过程：plain_text ^ e ≡ cipher_text (mod n)<br>\n解密过程：cipher_text ^d ≡ plain_text (mod n)</p>\n</blockquote><p>对于低加密指数攻击，我们已知条件是：</p><ul>\n<li>密文：cipher_text；</li>\n<li>公钥：(n,e)。</li>\n</ul><p>我们的任务是根据已知条件获取明文（plain_text）。</p><p>作为攻击者，无论是我们是要尝试挖掘Web系统、二进制应用还是区块链系统或者是其他程序漏洞，都需要具备两点前提。一方面，<strong>你需要判断漏洞是否存在</strong>，这需要你熟悉目标系统的开发与设计过程，深刻理解特定功能的最佳实践。另一方面，<strong>你需要降低攻击向量空间</strong>，这就要求你足够了解目标系统的执行逻辑，在此基础上有目的地缩小测试范围。</p><p>对于低加密指数攻击案例而言，如果不理解RSA算法加密过程，我们就无法判断漏洞是否存在，这是漏洞挖掘黄金法则第一条；而执行数学变换进行判断的过程，就是在有效地缩小测试范围，降低攻击向量空间，这是漏洞挖掘法则第二条。这两条适用于许多漏洞挖掘场景。</p><p>因此这里我们要先了解RSA原理，以及在应用RSA算法过程中的最佳实践，以此来判断特定场景是否存在漏洞。</p><h4>RSA算法工作过程</h4><p>想象一个这样的场景——数学家小明有一段关键的信息，希望加密后发给历史学家小密。</p><p>经过商议，小明选择RSA算法加密传递，但是由于小明科研经费紧张，买不起电脑，于是通过手动计算的方式来执行RSA算法。这里<strong>小明的主要目标是计算出RSA算法的关键参数——n、e、d</strong>，我们看看他需要经历哪些步骤。</p><p>第一步，小明首先随机选择了两个不相等质数（prime number），p1和p2；p1 = 23，p2 = 71（实际应用中p1和p2越大，破解难度就越高）。</p><p>第二步，小明通过计算p1和p2的乘积，这里得到了第一个关键参数n；   n = p1 x p2 = 1633，这里n转换为2进制的长度就是我们通常意义上描述的密钥长度。</p><p>第三步，小明需要获得第二个关键参数e：   φ(n) = (p1-1) x (p2-1) = 1540，在1~φ(n)之间随机选取一个整数使其与φ(n)互质，即得到第二个关键参数e，e = 19。</p><p>第四步，他可以通过模逆元计算得出三个关键参数d，需要满足的条件是 e x d ≡ 1 (mod φ(n))。</p><p><strong>现在，小明已经获得所有关键参数，他此时只需要将p1、p2销毁，自己留存(n,d)组成的私钥，并将(n,e)组成的公钥发给小密即可 。</strong></p><p>这里我们来分析一下RSA算法的安全性，由于公钥信息是公开的，因此我们可以认为n和e是已知的，那么是否存在一种可能性是在已知n与e的情况下推导出d呢？这里我们首先要分析d的计算过程：</p><ol>\n<li>根据RSA算法工作过程的第四步，我们可以知道e与φ(n)是计算出d的前提，e是已知的；</li>\n<li>根据RSA算法工作过程的第三步，我们可以知道p1与p2是计算出φ(n)的前提，而n = p1 x p2；</li>\n<li>那么私钥安全性就依赖于n因数分解的难度。目前，数学界对于大整数因数分解并没有很好的解决方案，因此RSA的安全性得以保证。</li>\n</ol><h2>案例实战</h2><p>接下来我们进入实战环节。登录谜团（<a href=\"http://mituan.zone\">mituan.zone</a>）并选择【RSA - 低加密指数攻击】环境，启动后可以在home目录找到flag.enc以及pubkey.pem两个文件。</p><pre><code class=\"language-bash\">total 16\n-rw-rw-r--@ 1 hunter  staff  512  6  2  2019 flag.enc\n-rw-rw-r--@ 1 hunter  staff  796  6  2  2019 pubkey.pem\n</code></pre><p>通过调用OpenSSL对pubkey.pem进行解析：</p><pre><code class=\"language-bash\">openssl rsa -pubin -text -modulus -in pubkey.pem\nPublic-Key: (4096 bit)\n...\nExponent: 3 (0x3)\nModulus=B0BEE5E3E9...\n...\n</code></pre><p>可以得到n和e，其中n = Modulus、e = Exponent，这里我们将数值带入后，再看一下加密公式：</p><pre><code class=\"language-plain\">plain_text ^ e ≡ cipher_text (mod n)\n其中e、n、cipher_text均是已知的，进行一下简单的格式变换可以得出\nplain_text = (kn + (cipher_text mod n)) ^ 1/3\n</code></pre><p>有趣的事情出现了，在e数值很小的情况下，我们是可以尝试暴力破解的。</p><p>接下来我们通过代码来实现暴力破解明文：</p><pre><code class=\"language-python\">import os, time\nimport gmpy2\n\ndef main():\n    start_time = 0\n    c_time = 0\n\n    n = 721059527572145959497866070657244746540818298735241721382435892767279354577831824618770455583435147844630635953460258329387406192598509097375098935299515255208445013180388186216473913754107215551156731413550416051385656895153798495423962750773689964815342291306243827028882267935999927349370340823239030087548468521168519725061290069094595524921012137038227208900579645041589141405674545883465785472925889948455146449614776287566375730215127615312001651111977914327170496695481547965108836595145998046638495232893568434202438172004892803105333017726958632541897741726563336871452837359564555756166187509015523771005760534037559648199915268764998183410394036820824721644946933656264441126738697663216138624571035323231711566263476403936148535644088575960271071967700560360448191493328793704136810376879662623765917690163480410089565377528947433177653458111431603202302962218312038109342064899388130688144810901340648989107010954279327738671710906115976561154622625847780945535284376248111949506936128229494332806622251145622565895781480383025403043645862516504771643210000415216199272423542871886181906457361118669629044165861299560814450960273479900717138570739601887771447529543568822851100841225147694940195217298482866496536787241\n\n    k = 0\n\n    c_path = os.getcwd()\n    fname = c_path + \"/flag.enc\"\n\n    print(fname)\n\n    f = open(fname, 'rb')\n    c = f.read()\n    c_num = int.from_bytes(c, byteorder='big')\n\n    mod_num = c_num % n\n\n    print('n = ' + str(n))\n    print('mod = ' + str(mod_num))\n\n    start_time = int(time.time())\n\n    while True:\n\n        c_time = int(time.time())\n        time_pass = c_time-start_time\n        if (c_time - start_time) == 10:\n            print(\"current k: \" + str(k))\n            start_time = c_time\n\n        y = k * n + mod_num\n        root_num, status = gmpy2.iroot(y,3)\n\n        if status == 1:\n            break\n        else:\n            k = k + 1\n    print('plain_text = ' + str(root_num))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre><p>通过约300s的程序运行时间，在输出中可以获得plain_text的值：</p><pre><code class=\"language-plain\">plain_text = 440721643740967258786371951429849843897639673893942371730874939742481383302887786063966117819631425015196093856646526738786745933078032806737504580146717737115929461581126895844008044713461807791172016433647699394456368658396746134702627548155069403689581548233891848149612485605022294307233116137509171389596747894529765156771462793389236431942344003532140158865426896855377113878133478689191912682550117563858186\n</code></pre><p>再通过代码将plain_text值转换为字符：</p><pre><code class=\"language-python\">def main():\n    plain_text = 440721643740967258786371951429849843897639673893942371730874939742481383302887786063966117819631425015196093856646526738786745933078032806737504580146717737115929461581126895844008044713461807791172016433647699394456368658396746134702627548155069403689581548233891848149612485605022294307233116137509171389596747894529765156771462793389236431942344003532140158865426896855377113878133478689191912682550117563858186\n\n    plain_text_in_char = []\n\n    while plain_text != 0:\n        plain_text, c = divmod(plain_text, 256)\n        plain_text_in_char.append(chr(c))\n\n    plain_text_in_char.reverse()\n\n    print(''.join(plain_text_in_char))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre><p>运行上述代码，可以得到如下输出：</p><pre><code class=\"language-plain\">Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: PCTF{Sm4ll_3xpon3nt_i5_W3ak}\n</code></pre><p><strong>可以看到我们已经成功破解了RSA加密，获取到了明文，即plain_text。</strong></p><p>这里补充一个有趣的知识点，RSA属于块加密算法，与之相对应的是流加密。块加密是有一个padding机制的，正如输出结果中所述，这里能够破解成功的另一个主要原因是明文并没有采用padding来补齐块长度，如果明文的长度足够长，就会使得暴力破解的所需时间快速攀升，进而更有效地抵御攻击。</p><h2>总结</h2><p>这节课我们首先探讨了在产品开发过程中涉及加密算法的一些常见问题，并列举了一些典型的攻击场景。</p><p>接下来的实战案例环节，我们通过RSA算法的低加密指数攻击案例，学习了RSA加密算法的原理，在此基础上我们成功对一段RSA加密结果进行了攻击。通过这个实例可以发现即使是全球闻名的RSA算法，如果使用方式不当，也存在被破解的可能性。</p><p>这个实例其实很有意义，除了本身涉及到的加密知识以外，我们更需要知道的是如何针对一个黑盒系统进行漏洞挖掘，这里要记住两条漏洞挖掘黄金法则：一方面，你需要熟悉目标系统的开发与设计过程，深刻理解特定功能的最佳实践，从而<strong>判断漏洞是否存在</strong>；另外，你要足够了解目标系统的执行逻辑，有目的性地缩小测试范围，以此来<strong>降低攻击向量空间</strong></p><p>加密失败风险的出现有很多原因，大部分与我们不合理地使用加密工具有关。那么我们该如何防御呢？</p><p>这里我们推荐一些相对抽象的安全建议，供你在工作中参考，具体一些需要详细讨论的部分，我们会在后面几节课程中陆续展开。</p><p>首先<strong>在数据层面</strong>，我们需要对数据进行分类分级，识别出需要重点保护的数据类型，并且不要存储不使用的敏感数据，不被存储的数据是不可能丢失的。</p><p><strong>在存储层面</strong>，要关闭可能包含敏感数据的缓存功能，还要确保所有的敏感数据在静态存储中都以加密形态存放。</p><p><strong>在传输层面</strong>，我们要确保所有数据传输协议都启用了安全功能，比如TLS，并且不要使用传统的不安全协议进行敏感数据传输，如FTP、SMTP等。</p><p><strong>在算法层面</strong>，我们需要使用标准的加密算法，并且保证算法的及时更新，合理地管理密钥，尤其不要使用已经被验证安全性不足的算法，如MD5、SHA1、PKCS 1 v1.5等。</p><p>更进一步地，<strong>在随机化层面</strong>，密钥需要使用密码学算法随机生成，如果要使用一个口令密码，也是要通过口令密码生成函数来产生最终的密钥。除了密钥相关的数据，还要确保密码算法中涉及参数的随机化生成，确保其无法被预测。</p><h2>思考题</h2><p>这节课程中我们所编写的低加密指数攻击代码，仍然有进一步优化的空间，你可以提高这段攻击代码的执行效率吗？</p><p>欢迎在评论区留下你的思考，我们下节课再见。</p>","comments":[{"had_liked":false,"id":328983,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1640977825,"is_pvip":false,"replies":[{"id":"120626","content":"思考很棒哦，其实就是做完了，和做的很优雅其实是有区别的嘛<br>优秀的人总是稀缺的，一看你就是优秀的人o(*￣︶￣*)o","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1642153574,"ip_address":"","comment_id":328983,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640977825","product_id":100101501,"comment_content":"站在运维的角度，可能更多的会去思考如何内测和验证。文中有一点比较有同感，研发很多时候在验证是否有效性上市欠考虑的，只是觉得完成了，没有去验证是否真正的有效，如同我们手动组装日常家具，装完了，是否足够牢靠，左右都没有真正摇晃和折腾，完成了坐一下觉得不会塌就完事了。<br>验证其真实有效性、安全性和可靠性方面有所欠缺，这是我听完最大的感受，同样也是做为运维回去反思和测试的事情。","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546082,"discussion_content":"思考很棒哦，其实就是做完了，和做的很优雅其实是有区别的嘛\n优秀的人总是稀缺的，一看你就是优秀的人o(*￣︶￣*)o","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642153574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328629,"user_name":"DoHer4S","can_delete":false,"product_type":"c1","uid":2391667,"ip_address":"","ucode":"A1D028355FAEB8","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","comment_is_top":false,"comment_ctime":1640798708,"is_pvip":true,"replies":[{"id":"120630","content":"感谢同学指引大家，还特意分享了使用命令，so nice of u~<br>（づ￣3￣）づ╭❤～","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1642153741,"ip_address":"","comment_id":328629,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1640798708","product_id":100101501,"comment_content":"在这部最难得居然是使用SSH连接MiTuan的靶机.....<br>这里有些小Tips:<br>- IP地址必须是公网地址，该信息可以在“靶机信息”部分可以获取到，不要使用host连接....<br>- 一定要等待状态检查完再连接，要么你会一直连接不上；<br><br>根目录下有一个extremelyHardRsa.zip 文件，需要用下方的命令执行：<br><br>&gt;&gt; unzip .&#47;ex*<br><br>MiTuan靶机已经有Python3的运行环境了，你不需要重新配置Python3的运行环境了；<br><br>如果你想要将靶机的文件下载到本地方便进行研究，那么请使用scp命令，以下为MacOS运行环境的命令<br><br>```<br>scp -P 2222 root@[YOUR PUBLIC IP ADDRESS]:&#47;root&#47;extremelyHardRsa.zip .&#47;<br>root@[YOUR PUBLIC IP ADDRESS]&#39;s password:<br>extremelyHardRsa.zip                          100% 3331   117.1KB&#47;s   00:00","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546086,"discussion_content":"感谢同学指引大家，还特意分享了使用命令，so nice of u~\n（づ￣3￣）づ╭❤～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642153741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391667,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","nickname":"DoHer4S","note":"","ucode":"A1D028355FAEB8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542731,"discussion_content":"具体的内容可以参照我的博客网站：\nhttps://www.cnblogs.com/doherasyang/p/15747694.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640830816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391667,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","nickname":"DoHer4S","note":"","ucode":"A1D028355FAEB8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542730,"discussion_content":"def run_attack(start_k, end_k, queue):\n    start_time = 0\n    c_time = 0\n                      n = 7210595275721459594978660706572447465408182987352417213824358927672\n...\n241\n    k = start_k\n    \n    c_path = os.getcwd()\n    fname = c_path + &#34;/flag.enc&#34;\n\n    f = open(fname, &#39;rb&#39;)\n    c = f.read()\n    c_num = int.from_bytes(c, byteorder=&#39;big&#39;)\n    \n    mod_num = c_num % n\n\n    start_time = int(time.time())\n\n    # 定义Queue，如果Queue有内容就结束所有进程\n    while (queue.empty()):\n        c_time = int(time.time())\n        time_pass = c_time-start_time\n        if (c_time - start_time) == 10:\n            print(&#34;current k: &#34; + str(k))\n            start_time = c_time\n\n        y = k * n + mod_num\n        root_num, status = gmpy2.iroot(y,3)\n\n        if status == 1:\n            print(&#39;correct k:%d&#39;%k)\n            print(&#39;plain_text = &#39; + str(root_num))\n            queue.put(&#34;End&#34;)\n            break\n        else:\n            k = k + 1\n            if k &gt; end_k:\n                print(&#39;start_k:%d   k:%d   end_k:%d&#39;%(start_k, k, end_k))\n                break\n\nif __name__ == &#39;__main__&#39;:\n    process_list = list()\n\n    # 引入一个queue来判断终止条件\n    queue = multiprocessing.Queue()\n    for i in range(0, 150000000, 10000000):\n        process_list.append(multiprocessing.Process(target=run_attack, args=(i, i+10000000, queue)))\n\n    for process in process_list:\n        process.start()\n\n    for process in process_list:\n        process.join()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640830440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391667,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","nickname":"DoHer4S","note":"","ucode":"A1D028355FAEB8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542726,"discussion_content":"Python 代码性能瓶颈分析：\n\n- 运算速度可不可以提升，我们这段代码所有运行的问题是，因为做大量模运算，我们需要猜测K的值来构建一个3阶常数，因此需要大量的计算；\n- 并行计算 - 如果不能提高运算速度，可以尝试多进程，即一个进程负责一段K值的计算，当出现第一个可分解3阶数时就结束；\n\n在这里有一个问题，就是代码21行：`mod_num = c_num % n`  - mod_num 与 c_num 的结果相同，因此这一行是是不是多余？我认为也不需要进行模运算；\n\n改进思路：\n\n- 好像不能提升运算速度，我们不能依赖Python高性能计算库 - Numpy / Numba 等；\n- 由于Python GIL的限制，我们可以尝试使用多进程来加速猜测K值；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640830309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391667,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","nickname":"DoHer4S","note":"","ucode":"A1D028355FAEB8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542722,"discussion_content":"那我们在这里破解RSA的目标是什么？-- 弄清楚这个很关键帮助我们理解代码的含义；\n\n我们现在有：密文(y)，公钥(n)，明文的运算阶数(e)，我们需要知道明文是什么，那怎么实现逆向破解呢，我们需要知道k的是什么；\n\n假设 密文(y)==26, 公钥(n)==33, 阶数(e)==3，需要破解的明文已知为5\n\n5^3 (mod 33) == 26\n\n那我们怎么知道 明文呢？两边的阶数同时乘以 1/3，之后下式：\n\n明文 == (K*33 + 26)^(1/3)\n\n其中：(K*33 + 26) 替代模运算;\n\n我们需要判断的是：(K*33 + 26)  能不能是一个3阶的常数，即由一个常数的3阶；\n\n而 gmpy2.iroot(A,B) 的作用就是判断常数A是不是一个B阶常数，如果是那么就会返回 True；\n\n我们给一个例子来这个函数更直观： 27 是3的3阶数；\n\n```python\ngmpy2.iroot(27,3)\n# 返回结果为(mpz(3), True) - 是 3的3阶阶数\n```\n\n```python\ngmpy2.iroot(27,2)\n# 返回结果为(mpz(5), False) - 不是一个2阶阶数\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640830254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328564,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1640773468,"is_pvip":true,"replies":[{"id":"120629","content":"对呀~ 所以新版本会提振安全性嘛<br>提倡同学你深入研究一下哦，一定会有收获，而且是质变的收获哦","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1642153701,"ip_address":"","comment_id":328564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640773468","product_id":100101501,"comment_content":"虽然我不知道怎么提高程序攻击效率。但是我感觉这个应该很说明，tls1.0和1.1 不安全。。所以赶紧disable tls 1.0和 1.1，尽量优先1.3。。","like_count":0,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546085,"discussion_content":"对呀~ 所以新版本会提振安全性嘛\n提倡同学你深入研究一下哦，一定会有收获，而且是质变的收获哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642153701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}