{"id":720991,"title":"05｜复合类型（上）：结构体与面向对象特性","content":"<p>你好，我是Mike。今天我们来学习Rust中的复合类型——结构体。</p><p>结构体是由其他的基础类型或复合类型组成的，当它所有字段同时实例化后，就生成了这个结构体的实例。在Rust中，结构体使用 <strong>struct</strong>关键字进行定义。</p><p>这节课我们会通过各种各样的示例来了解结构体，其中有部分示例来自于官方The Book。我们一起来看一下。</p><h2>结构体示例</h2><p>下面我们先来看一下结构体示例，定义一个User结构体。</p><pre><code class=\"language-plain\">struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n</code></pre><p>示例中的 User 结构体由4个字段组成。</p><ol>\n<li>active字段：bool类型，表示这个用户是否是激活状态。</li>\n<li>username字段：字符串类型，表示这个用户的名字。</li>\n<li>email字段：字符串类型，表示这个用户的邮箱名。</li>\n<li>sign_in_count字段：u64类型，用来记录这个用户登录了多少次。</li>\n</ol><p>User 完全由4个基础类型的字段组合而成。User的实例化需要这4个字段同时起作用，缺一不可。比如：</p><pre><code class=\"language-plain\">fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from(\"someusername123\"),\n        email: String::from(\"someone@example.com\"),\n        sign_in_count: 1,\n    };\n}\n</code></pre><!-- [[[read_end]]] --><p>结构体类型也可以参与更复杂结构体的构建。</p><pre><code class=\"language-plain\">struct Class {\n  serial_number: u32,\n  grade_number: u32,\n  entry_year: String,\n  members: Vec&lt;User&gt;,  \n}\n</code></pre><p>代码里的 Class 表示班级，serial_number表示几班，grade_number表示几年级，entry_year表示起始年份，members是一个User的动态数组。</p><p>从这里，我们已经可以想象出，结构体类型可以不断往上一层一层地套。而在实际应用中，<strong>结构体往往是一个程序的骨干，用来承载对目标问题进行建模和描述的重任。</strong></p><h2>结构体的形式</h2><p>结构体有三种形式，分别是命名结构体、元组结构体和单元结构体，下面我们一个一个看。</p><h3>命名结构体</h3><p>命名结构体是指每个字段都有名字的结构体，比如前面提到的User结构体，它的每个字段都有明确的名字和类型。</p><p>如果在实例化结构体之前，命名了结构体字段名的同名变量，那么用下面这种写法可以偷懒少写几个字符。</p><pre><code class=\"language-plain\">fn main() {\n    let active = true;\n    let username = String::from(\"someusername123\");\n    let email = String::from(\"someone@example.com\");\n    let user1 = User {\n        active,    // 这里本来应该是 active: active,\n        username,  // 这里本来应该是 username: username,\n        email,     // 这里本来应该是 email: email,\n        sign_in_count: 1,\n    };\n}\n</code></pre><p>这样会显得代码更简洁，同时也没有歧义。</p><p>结构体创建好之后，可以更新结构体的部分字段。下面的示例里就单独更新了email字段。</p><pre><code class=\"language-plain\">fn main() {\n    let mut user1 = User {\n        active: true,\n        username: String::from(\"someusername123\"),\n        email: String::from(\"someone@example.com\"),\n        sign_in_count: 1,\n    };\n\n    user1.email = String::from(\"anotheremail@example.com\");\n}\n</code></pre><p>注意 user1 前面的mut修饰符，不加的话就没办法修改这个结构体里的字段。</p><p>而如果我们已经有了一个User的实例 user1，想再创建一个新的user2，而两个实例之间只有部分字段不同。这时，Rust也提供了偷懒的办法，比如：</p><pre><code class=\"language-plain\">fn main() {\n    let active = true;\n    let username = String::from(\"someusername123\");\n    let email = String::from(\"someone@example.com\");\n    let user1 = User {\n        active,\n        username,\n        email,\n        sign_in_count: 1,\n    };\n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        ..user1    // 注意这里，直接用 ..user1\n    };\n}\n</code></pre><p>用这种写法可以帮助我们少写很多重复代码。特别是当这个结构体比较大的时候，比如有几十个字段，而我们只想更新其中的一两个字段的时候，就显得特别有用了，这能够让我们的代码保持干净清爽。</p><p>比如有一个场景就正好符合这个语法特性。用户的信息存在数据库里，当我们要更新一个用户的一个字段的信息时，首先需要从数据库里把这个用户的信息取出来，做一些基本的校验，然后把要更新的字段替换成新的内容，再把这个新的用户实例存回数据库。</p><p>这个过程可以这样写：</p><pre><code class=\"language-plain\">// 这个示例是伪代码\nlet user_id = get_id_from_request;\nlet new_user_name = get_name_from_request();\nlet old_user: User = get_from_db(user_id);\nlet new_user: User = User {\n    username: new_user_name,\n    ..old_user    // 注意这里的写法\n}\nnew_user.save()\n</code></pre><p>有了这些语法糖，用Rust写业务代码是非常清爽的。</p><h3>元组结构体</h3><p>除了前面那种最普通的命名结构体形式，Rust中也支持一种匿名结构体的形式，也叫做元组结构体。所谓元组结构体，也就是<strong>元组和结构体的结合体。</strong></p><p>元组结构体长什么样子呢？你可以看一下示例。</p><pre><code class=\"language-plain\">struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n</code></pre><p>可以看到，元组结构体有类型名，但是无字段名，也就是说字段是匿名的。在有些情况下这很有用，因为想名字是一件很头痛的事情。并且某些场景下用元组结构体表达会更有效。比如对于RGB颜色对、三维坐标这种各分量之间有对称性，又总是一起出现的情景，直接用元组结构体表达会显得更紧凑。</p><p>上述示例中，我们看到，Color类型和Point类型的元组部分其实是一样的，都是 <code>(i32, i32, i32)</code>，但是由于类型名不同，它们就是不同的类型，因此上面的 black 实例和 origin 实例就是两个完全不同的东西，前者表示黑色，后者表示原点。</p><h3>单元结构体</h3><p>Rust还支持单元结构体。单元结构体就是只有一个类型名字，没有任何字段的结构体。单元结构体在定义和创建实例的时候，连后面的花括号都可以省略。比如：</p><pre><code class=\"language-plain\">struct ArticleModule;\n\nfn main() {\n    let module = ArticleModule;    // 请注意这一句，也做了实例化操作\n}\n</code></pre><p>可以看到，这个示例中结构体ArticleModule类型实际创建了一个实例，ArticleModule的定义和实例化都没有使用花括号。这种写法非常紧凑，所以要注意分辨，不然会疑惑：类型为什么能直接赋给一个变量。</p><p>那没有字段的结构体有什么用呢？其实它就相当于定义了一种类型，它的名字就是一种信息，有类型名就可以进行实例化，承载很多东西。后面我们在代码中会经常看到单元结构体。</p><h2>结构体中的所有权问题</h2><h3>部分移动</h3><p>Rust的结构体有一种与所有权相关的特性，叫做部分移动（Partial Move）。就是说结构体中的部分字段是可以被移出去的，我们来看下示例。</p><pre><code class=\"language-plain\">#[derive(Debug)]\nstruct User {\n&nbsp; &nbsp; active: bool,\n&nbsp; &nbsp; username: String,\n&nbsp; &nbsp; email: String,\n&nbsp; &nbsp; sign_in_count: u32,\n}\n\nfn main() {\n&nbsp; &nbsp; let active = true;\n&nbsp; &nbsp; let username = String::from(\"someusername123\");\n&nbsp; &nbsp; let email = String::from(\"someone@example.com\");\n&nbsp; &nbsp; let user1 = User {\n&nbsp; &nbsp; &nbsp; &nbsp; active,\n&nbsp; &nbsp; &nbsp; &nbsp; username,\n&nbsp; &nbsp; &nbsp; &nbsp; email,\n&nbsp; &nbsp; &nbsp; &nbsp; sign_in_count: 1,\n&nbsp; &nbsp; };\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let email = user1.email;  // 在这里发生了partially moved\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; println!(\"{:?}\", user1)   // 这一句无法通过编译\n}\n</code></pre><p>提示：</p><pre><code class=\"language-plain\">error[E0382]: borrow of partially moved value: `user1`\n  --&gt; src/main.rs:22:22\n   |\n20 |     let email = user1.email;\n   |                 ----------- value partially moved here\n21 |     \n22 |     println!(\"{:?}\", user1)\n   |                      ^^^^^ value borrowed here after partial move\n</code></pre><p>下面这句对于我们习惯的编程的人来说，其实是非常普通的一行，就是将结构体的一个字段值赋值给一个新的变量。</p><pre><code class=\"language-plain\">let email = user1.email;\n</code></pre><p>但这里就发生了一件很奇妙的事情，因为email字段是String类型，是一种所有权类型，于是email字段的值被移动了。移动后，email变量拥有了那个值的所有权。而user1中的email字段就被标记无法访问了。</p><p>我们稍微改一下这段代码，不直接打印user1实例整体，而是分别打印email之外的另外三个字段。</p><pre><code class=\"language-plain\">let email = user1.email;\n\nprintln!(\"{}\", user1.username);      // 分别打印另外3个字段 \nprintln!(\"{}\", user1.active);\nprintln!(\"{}\", user1.sign_in_count);\n</code></pre><p>这时可以得到正确的输出。而如果单独打印 email 字段，也是不行的，你可以自己试试。这就是结构体中所有权字段被部分移动的情景。</p><h3>字段是引用类型</h3><p>还是用前面我们定义的User类型，它里面的所有字段都是带所有权的字段。而在赋值行为上，bool和u32会默认复制一份新的所有权，而String会移动之前那份所有权到新的变量。全部定义带所有权的字段，是我们定义结构体类型的主要方式。</p><p>但是既然都是类型，Rust的结构体没有理由不能支持借用类型。比如：</p><pre><code class=\"language-plain\">struct User {\n    active: &amp;bool,       // 这里换成了 &amp;bool\n    username: &amp;str,      // 这里换成了 &amp;str\n    email: &amp;str,         // 这里换成了 &amp;str\n    sign_in_count: &amp;u32, // 这里换成了 &amp;u32\n}\n</code></pre><p>我们把4个字段都换成了对应的引用形式。</p><p>这种写法当然是可以的，不过上面的代码暂时还没办法通过Rust的编译，我们需要加一些额外的标注才能让其通过，这个我们在这里不展开讲解，后面第20讲我会针对这个问题展开描述。我这里把这种写法提出来是为了让你意识到，几乎所有的地方，Rust都会把问题一分为二，一是所有权形式的表示，二是借用形式的表示。借用形式的表示又可进一步细分为不可变借用的表示和可变借用的表示。</p><p>一般来说，对于业务系统我们用的几乎都是所有权形式的结构体，而这就已经够用了。对于初学者来说，切忌贪图所有语言特性，应该以实用为主。</p><h2>给结构体添加标注</h2><p>在Rust中，我们可以给类型添加标注。</p><pre><code class=\"language-plain\">#[derive(Debug)]        // 这里，在结构体上面添加了一种标注\nstruct User {\n&nbsp; &nbsp; active: bool,\n&nbsp; &nbsp; username: String,\n&nbsp; &nbsp; email: String,\n&nbsp; &nbsp; sign_in_count: u32,\n}\n</code></pre><p>这样标注后，就可以在打印语句的时候把整个结构体打印出来了。</p><pre><code class=\"language-plain\">println!(\"{:?}\", user1);    // 注意这里的 :? 符号\n</code></pre><p>这种 <code>#[derive(Debug)]</code> 语法在Rust中叫<strong>属性标注</strong>，具体来说这里用的是<strong>派生宏属性，</strong>派生宏作用在下面紧接着的结构体类型上，可以为结构体自动添加一些功能。这些知识我们后面会讲解。目前为止你只需要知道它起什么作用就可以了。比如，派生 Debug 这个宏可以让我们在 <code>println!</code> 中用 <code>{:?}</code> 格式把结构体打印出来，这对于调试是非常方便的。</p><p>如果你学过Java，可能会非常眼熟，这跟Java中的标注语法非常像，功能也是类似的，都会对原代码的元素产生作用。不过，Rust这个特性作为一套完整的宏机制，要强大得多。它让Rust的语言表达能力又上了一个台阶。</p><p>后面我们会经常看到各种派生宏，到时候我们再做讲解。</p><h2>面向对象特性</h2><p>Rust不是一门面向对象的语言，但是它确实有部分面向对象的特性。<strong>而Rust承载面向对象特性的主要类型就是结构体。Rust有个关键字 impl可以用来给结构体或其他类型实现方法，也就是关联在某个类型上的函数。</strong></p><h3>方法（实例方法）</h3><p>使用 impl 关键字为结构体实现方法，可以像下面这样：</p><pre><code class=\"language-plain\">#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {                // 就像这样去实现\n    fn area(self) -&gt; u32 {      // area就是方法，被放在impl实现体中\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()      // 使用点号操作符调用area方法\n    );\n}\n// 输出\nThe area of the rectangle is 1500 square pixels.\n</code></pre><p>上面示例中，我们给Rectangle类型实现了area方法，并在Rectangle的实例rect1上使用点号（.）操作符调用了这个方法。</p><h3>Self</h3><p>请注意看area方法的签名。</p><pre><code class=\"language-plain\">fn area(self) -&gt; u32 \n</code></pre><p>你会发现，这个参数好像有点特殊，是一个单 self，不太像标准的参数定义语法。</p><p>实际上这里是Rust的一个语法糖，self 的完整写法是 self: Self，而Self是Rust里一个特殊的类型名，它表示正在被实现（impl）的那个类型。</p><p>前面我们说过，Rust中所有权形式和借用形式总是成对出现，在 impl 的时候也是如此。方法的签名中也会对应三种参数形式。我们扩展一下上面的例子。</p><pre><code class=\"language-plain\">impl Rectangle {\n    fn area1(self) -&gt; u32 {\n        self.width * self.height\n    }\n    fn area2(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n    fn area3(&amp;mut self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n</code></pre><p>3种形式都是可以的。</p><p>方法是实现在类型上的特殊函数，它的第一个参数是Self类型，包含3种形式。</p><ol>\n<li>self: Self：传入实例的所有权。</li>\n<li>self: &amp;Self：传入实例的不可变引用。</li>\n<li>self: &amp;mut Self：传入实例的可变引用。</li>\n</ol><p>因为是标准用法，所以Rust帮我们简写成了 self、&amp;self、&amp;mut self。这种简写并不会产生歧义。</p><p>上述代码展开后是这样的：</p><pre><code class=\"language-plain\">impl Rectangle {\n    fn area1(self: Self) -&gt; u32 {\n        self.width * self.height\n    }\n    fn area2(self: &amp;Self) -&gt; u32 {\n        self.width * self.height\n    }\n    fn area3(self: &amp;mut Self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n</code></pre><p>方法调用的时候，直接在实例上使用 . 操作符调用，然后第一个参数是实例自身，会默认传进去，因此不需要单独写出来。</p><pre><code class=\"language-plain\">rect1.area1();  // 传入rect1\nrect1.area2();  // 传入&amp;rect1\nrect1.area3();  // 传入&amp;mut rect1\n</code></pre><p>看到这里，你是不是感觉很熟悉，有没有C++、Java 等方法的this指针的既视感？不过，在Rust中，基本上一切都是显式化的，不存在隐藏提供一个参数给你的情况。这样就会少很多坑，如果你是JavaScript开发者，在这一点上应该深有体会。</p><p>实例的引用也是可以直接调用方法的。比如，对于不可变引用，可以像下面这样调用。Rust会自动做正确的多级解引用操作。</p><pre><code class=\"language-plain\">#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    // 在这里，取了实例的引用\n    let r1 = &amp;rect1;\n    let r2 = &amp;&amp;rect1;\n    let r3 = &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;rect1;  // 不管有多少层\n    let r4 = &amp;&amp;r1;\n    \n    // 以下4行都能正确执行\n    r1.area();\n    r2.area();\n    r3.area();\n    r4.area();\n}\n</code></pre><p>对同一个类型，impl可以分开写多次。这在组织代码的时候比较方便。</p><pre><code class=\"language-plain\">impl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {\n        self.width &gt; other.width &amp;&amp; self.height &gt; other.height\n    }\n}\n</code></pre><h3>关联函数（静态方法）</h3><p>前面我们讲过，方法的第一个参数为self，从函数参数定义上来说，第一个参数当然也可以不是self。如果实现在类型上的函数，它的第一个参数不是self参数，那么它就叫做此类型的关联函数。</p><pre><code class=\"language-plain\">impl Rectangle {\n    fn numbers(rows: u32, cols: u32) -&gt; u32 {\n        rows * cols\n    }\n}\n</code></pre><p>调用时，关联函数使用类型配合路径符 <code>::</code> 来调用。注意这里与实例用点运算符调用方法的区别。</p><pre><code class=\"language-plain\">Rectangle::numbers(10, 10);\n</code></pre><p>你有没有感觉，Rust中的关联函数跟 C++、Java里的静态方法起着类似的作用？确实差不多。但是Rust这里不需要额外引入一个 static 修饰符去定义，因为靠是否有Self参数就已经能明确地区分实例方法与关联函数了。</p><h3>构造函数</h3><p>不像C++、Java等语言，Rust中没有专门的构造函数，但是用于构造实例的需求是不会变的。那Rust中一般是怎么处理的呢？</p><p>首先，Rust中结构体可以直接实例化，比如前面定义的Rectangle。</p><pre><code class=\"language-plain\">#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n}\n</code></pre><p>基于这一点，Rust社区一般约定使用 new() 这个名字的关联函数，像下面这样把类型的实例化包起来。</p><pre><code class=\"language-plain\">impl Rectangle {\n  pub fn new(width: u32, height: u32) -&gt; Self {\n    Rectangle {\n        width,\n        height,\n    }\n  }  \n}\n</code></pre><p>然后，使用下面这行代码创建新实例。</p><pre><code class=\"language-plain\">let rect1 = Rectangle::new(30, 50);\n</code></pre><p>但是 new 这个名字并不是强制的。所以你在社区的很多库里还会看到 <code>from()</code>、<code>from_xxx()</code> 等其他名字起构造函数的功能。Rust在这块儿并没有强制要求，多熟悉社区中的惯用法，能写出更地道的Rust代码。</p><h3>Default</h3><p>在对结构体做实例化的时候，Rust又给我们提供了一个便利的设施，Default。</p><p>我们可以像下面这样使用：</p><pre><code class=\"language-plain\">#[derive(Debug, Default)]      // 这里加了一个Default派生宏\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1: Rectangle = Default::default();    // 使用方式1\n    let rect2 = Rectangle::default();             // 使用方式2\n    \n    println!(\"{:?}\", rect1);\n    println!(\"{:?}\", rect2);\n}\n\n// 打印出如下：\nRectangle { width: 0, height: 0 }\nRectangle { width: 0, height: 0 }\n</code></pre><p>Default有两种使用方式，一种是直接用 <code>Default::default()</code>，第二种是用类型名 <code>::default()</code>，它们的实例化效果是一样的。</p><p>可以看到，打出来的实例字段值都0，是因为u32类型默认值就是 0。对于通用类型，比如u32这种类型来说，取 0 是最适合的值了，想一想取其他值是不是没办法被大多数人接受？</p><p>但是，对于我们特定场景的Rectangle这种，我们可能希望给它赋一个初始的非 0 值。在Rust中，这可以做到，但是需要用到后面的知识。目前我们就可以先用约定的 new 关联函数+参数来达到我们的目的。</p><pre><code class=\"language-plain\">#[derive(Debug)]\nstruct Rectangle {\n&nbsp; &nbsp; width: u32,\n&nbsp; &nbsp; height: u32,\n}\n\nimpl Rectangle {\n&nbsp; pub fn new(width: u32, height: u32) -&gt; Self {\n&nbsp; &nbsp; Rectangle {\n&nbsp; &nbsp; &nbsp; &nbsp; width,\n&nbsp; &nbsp; &nbsp; &nbsp; height,\n&nbsp; &nbsp; }\n&nbsp; }&nbsp;&nbsp;\n}\n\nconst INITWIDTH: u32 = 50;\nconst INITHEIGHT: u32 = 30;\n\nfn main() {\n    // 创建默认初始化值的Rectangle实例\n&nbsp; &nbsp; let rect1 = Rectangle::new(INITWIDTH , INITHEIGHT);\n}\n</code></pre><h2>小结</h2><p>这节课我们详细讨论了Rust中结构体相关的知识，现在来复习一下。</p><p>结构体中有命名结构体、元组结构体、单元结构体几种表现形式，除此之外，结构体中的所有权问题也是需要重点关注的，尤其是部分移动的概念。然后我们介绍了如何通过在结构体上添加标注来增强结构体的能力。</p><p>我们还进一步了解了如何利用impl关键字为结构体实现面向对象特性。不过需要注意的是，<strong>Rust语言本身并不是一门完整的面向对象语言</strong>，比如它缺乏继承等机制。但是这并不重要，OOP不是编程语言的全部，Rust语言从设计之初就没有走向OOP的方向。后面我们会看到，Rust利用trait等机制，能够提供比OOP语言更解耦的抽象、更灵活的配置。</p><p>结构体是用户自定义类型的主要实现者，你要熟练掌握。除了具体的语法知识点之外，我建议你用所有权和借用的思路去贯穿Rust整个知识体系。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/86/0857807b04b8a31c0dede9827f9c9786.jpg?wh=1132x1047\" alt=\"\"></p><h2>思考题</h2><p>可以给 i8 类型做 impl 吗？</p><p>欢迎你把思考后的结果分享到评论区，也欢迎你把这节课分享给需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"04｜字符串：对号入座，字符串其实没那么可怕！","id":720426},"right":{"article_title":"06｜复合类型（下）：枚举与模式匹配","id":720999}},"comments":[{"had_liked":false,"id":383182,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"天津","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1698635511,"is_pvip":false,"replies":[{"id":139586,"content":"棒","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698676880,"ip_address":"重庆","comment_id":383182,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思考题有点像脑筋急转弯\n我们不能直接对原生类型做impl\n但我们可以用newtype模式对i8封装一下，再impl","like_count":15,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630581,"discussion_content":"棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698676880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383222,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"湖北","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1698719015,"is_pvip":false,"replies":[{"id":139614,"content":"最基本的就是你这种，另外就是用newtype方法包一下。👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806183,"ip_address":"重庆","comment_id":383222,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思路题：基本数据类型无法实现impl。\n\n目前知道可以给基本数据类型添加操作的方式，通过 trait. \ntrait Operate {\n  fn plus(self) -&gt; Self;\n}\n\nimpl Operate for i8 {\n    fn plus(self) -&gt; Self {\n        self + self\n    }\n}\n\nfn main() {\n    let  a = 1i8;\n    println!(&quot;{}&quot;,a.plus());\n}\n\nrust有多少种方式可以给基本数据扩展方法呢，欢迎各位大佬指路？","like_count":8,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630702,"discussion_content":"最基本的就是你这种，另外就是用newtype方法包一下。👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698806183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630717,"discussion_content":"谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698812048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630702,"ip_address":"湖北","group_id":0},"score":630717,"extra":""}]}]},{"had_liked":false,"id":383219,"user_name":"soddygo","can_delete":false,"product_type":"c1","uid":1071509,"ip_address":"四川","ucode":"E1D4D272C95804","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/95/a164fa5c.jpg","comment_is_top":false,"comment_ctime":1698714631,"is_pvip":false,"replies":[{"id":139615,"content":"👍👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806194,"ip_address":"重庆","comment_id":383219,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"用”impl Default for i8”实践了下,不能给 i8实现impl,错误提示大意就是违反孤儿规则(Rust&#39;s orphan rules )…直觉上,基础类型如果允许impl改变特性,一些逻辑会变的很奇怪…用struct包裹起来,impl就可以正常使用了","like_count":4,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630703,"discussion_content":"👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383510,"user_name":"水不要鱼","can_delete":false,"product_type":"c1","uid":2699481,"ip_address":"广东","ucode":"40F9B2BA2DD9C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","comment_is_top":false,"comment_ctime":1699187644,"is_pvip":false,"replies":[{"id":139743,"content":"有的哈，文中已说明。有可能你目前比较喜欢  struct {x y z} 这种形式吧。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699256846,"ip_address":"重庆","comment_id":383510,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，元组结构体是不是有点没啥必要，而且不太建议使用，因为对代码可读性来说会是一场灾难，比如 Color 的定义，用 struct {r g b} 这种描述就清晰很多，还有 Point 也是，定义 struct {x y z} 也比元组的方式清楚。。我感觉只要涉及 struct 建模的，肯定每个字段都会有含义和价值，给一个清楚的命名会比 s.0 s.1 s.2 这种元组的引用方式要更好。。所以感觉元组结构体似乎有些多余了哈哈，个人见解","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631026,"discussion_content":"有的哈，文中已说明。有可能你目前比较喜欢  struct {x y z} 这种形式吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1699256846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2667148,"avatar":"https://static001.geekbang.org/account/avatar/00/28/b2/8c/77d4d9bf.jpg","nickname":"落星野","note":"","ucode":"EDFD05088A2026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650320,"discussion_content":"元组实现了函数及方法的多返回值，这个特性非常重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724769055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477463,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8b/57/a3daeaae.jpg","nickname":"tan","note":"","ucode":"20E176CB1EFD51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633670,"discussion_content":"最开始我也以为元组没啥用，但是有时候元素确定的情况下，如 tuple( left,right  ) ，在某些场景下比实体和map好用（java）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702455308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2699481,"avatar":"https://static001.geekbang.org/account/avatar/00/29/30/d9/323ba366.jpg","nickname":"水不要鱼","note":"","ucode":"40F9B2BA2DD9C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1477463,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8b/57/a3daeaae.jpg","nickname":"tan","note":"","ucode":"20E176CB1EFD51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635808,"discussion_content":"那可能是我还没碰到这种场景哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705232765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633670,"ip_address":"广东","group_id":0},"score":635808,"extra":""}]}]},{"had_liked":false,"id":387624,"user_name":"脱尼","can_delete":false,"product_type":"c1","uid":1579987,"ip_address":"广东","ucode":"627947E7BED072","user_header":"https://static001.geekbang.org/account/avatar/00/18/1b/d3/5cf53a64.jpg","comment_is_top":false,"comment_ctime":1708270606,"is_pvip":false,"replies":[{"id":141261,"content":"👍👍👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708815291,"ip_address":"加拿大","comment_id":387624,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"这节课中的很多知识点，可以从 JS，TS， JAVA，Object-c 中找到语法的影子。例如：结构体字段的赋值简写是来自 JS或者 TS，  impl + self 的实现妥妥 OC 的既视感，还有 derive, trait 在 JAVA 中注解的表达和实现。总之，感觉很奇妙。感谢老师！RUST博采众长了！","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637682,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708815291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383950,"user_name":"Geek_c75753","can_delete":false,"product_type":"c1","uid":2639632,"ip_address":"北京","ucode":"7AE56E9677BDF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVo0hmVvrxIIjlPljziaFb1tyArKfV8StAPCclQFpNWptyHvuy7NCZ5GHQhlTBPEH9WA/132","comment_is_top":false,"comment_ctime":1700013064,"is_pvip":false,"replies":[{"id":140095,"content":"感谢🙏","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700015240,"ip_address":"重庆","comment_id":383950,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"文章内容组织的很好，读起来很顺畅，有时看着看着有了疑惑，带着疑惑继续读下去，发现很快就给了解释。非常感谢作者","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631829,"discussion_content":"感谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700015240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383184,"user_name":"一个人旅行","can_delete":false,"product_type":"c1","uid":2555864,"ip_address":"北京","ucode":"A708238B10B44B","user_header":"https://static001.geekbang.org/account/avatar/00/26/ff/d8/d48d6088.jpg","comment_is_top":false,"comment_ctime":1698636429,"is_pvip":false,"replies":[{"id":139587,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698676909,"ip_address":"重庆","comment_id":383184,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思考题：\n不可以，i8是rust的内置的类型。\n如果要在其他模块中实现方法，可以使用实现trait的方式来实现方法。\n但是需要注意，trait和类型至少有一个要在当前的模块中。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630582,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698676909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389040,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"广东","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1711430485,"is_pvip":false,"replies":[{"id":141745,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713028438,"ip_address":"加拿大","comment_id":389040,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思考题：不可以，报错：Inherent `impl` blocks can only be added for structs, enums, unions, and trait objects [E0118]","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641826,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713028438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388587,"user_name":"无法输入","can_delete":false,"product_type":"c1","uid":1338124,"ip_address":"四川","ucode":"881B0963F54EA8","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/0c/5aac464c.jpg","comment_is_top":false,"comment_ctime":1710425427,"is_pvip":false,"replies":[{"id":141751,"content":"Default在后面标准库中的trait那一篇有讲。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713028718,"ip_address":"加拿大","comment_id":388587,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"使用newtype重新包装i8可以impl实现方法，也可以在该crate内定义Trait为i8实现方法（只要符合孤儿原则就行）。现有一个疑问，Default::default这种如何实现类型的推导呢，涉及哪些知识点呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641833,"discussion_content":"Default在后面标准库中的trait那一篇有讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713028718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388513,"user_name":"周鹏","can_delete":false,"product_type":"c1","uid":1301143,"ip_address":"福建","ucode":"3BDD7C9785AEC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/da/97/e421b1ae.jpg","comment_is_top":false,"comment_ctime":1710316906,"is_pvip":false,"replies":[{"id":141475,"content":"确实， 注释有bug，谢谢指正","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1710434459,"ip_address":"加拿大","comment_id":388513,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    &#47;&#47; 在这里，取了实例的引用\n    let r1 = &amp;rect1;\n    let r2 = &amp;&amp;rect1;\n    let r3 = &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;rect1;  &#47;&#47; 不管有多少层\n    let r4 = &amp;&amp;r1;\n    \n    &#47;&#47; 以下4行都能打印出正确的结果\n    r1.area();\n    r2.area();\n    r3.area();\n    r4.area();\n}\n\n并没有打印出来的相关代码，要在area方法里面添加，或者修改注释。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":639286,"discussion_content":"确实， 注释有bug，谢谢指正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710434460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385614,"user_name":"Geek_e5eb33","can_delete":false,"product_type":"c1","uid":1934555,"ip_address":"安徽","ucode":"296CC5358A4788","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/axiaxUndY1I8iaOu5qZOwFiaKgicR1AlWsSUyyYIMdEnibuhhzuQnicvXibaOxSakMNAQIPmgicsTfPvUnWJ5WCFzmdHDw/132","comment_is_top":false,"comment_ctime":1702976367,"is_pvip":false,"replies":[{"id":140558,"content":"这种schema变化的数据，不太方便映射到Rust结构体上，但是也可以有一些变化。比如 Option 字段，serde 有这方面的标识，比如 https:&#47;&#47;serde.rs&#47;field-attrs.html#skip。另外，可以用 serde_json 直接处理这种 schemaless 的数据。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703122776,"ip_address":"重庆","comment_id":385614,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师请教个问题，rust 有没有类似于 golang 的 interface{} 或者 java 的 Object，我现在遇到的问题是，tcp 另一端给的数据，比如 {&quot;name&quot;: &quot;x&quot;, &quot;value&quot;: 1}，{&quot;name&quot;: &quot;x&quot;, &quot;value&quot;: &quot;xxx&quot;}, {&quot;name&quot;: &quot;x&quot;, &quot;value&quot;: [1,2,3,4]}，这样的数据，在 rust 结构体中怎么表示多类型，且能被 serde 库序列化&#47;反序列化呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634234,"discussion_content":"这种schema变化的数据，不太方便映射到Rust结构体上，但是也可以有一些变化。比如 Option 字段，serde 有这方面的标识，比如 https://serde.rs/field-attrs.html#skip。另外，可以用 serde_json 直接处理这种 schemaless 的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1703122776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385344,"user_name":"superggn","can_delete":false,"product_type":"c1","uid":3623568,"ip_address":"北京","ucode":"831CCD98B393FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","comment_is_top":false,"comment_ctime":1702461660,"is_pvip":false,"replies":[{"id":140452,"content":"不是孤儿原则。在Rust中，你不能直接对基本类型（如i8）进行实现（impl）。这是因为Rust的设计者们决定不允许对基本类型进行实现，以防止在全局范围内改变基本类型的行为。这样可以确保基本类型在所有情况下的行为都是一致的，避免了可能的混乱和错误。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702609600,"ip_address":"重庆","comment_id":385344,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"不行， 因为孤儿原则？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633769,"discussion_content":"不是孤儿原则。在Rust中，你不能直接对基本类型（如i8）进行实现（impl）。这是因为Rust的设计者们决定不允许对基本类型进行实现，以防止在全局范围内改变基本类型的行为。这样可以确保基本类型在所有情况下的行为都是一致的，避免了可能的混乱和错误。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1702609600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3623568,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","nickname":"superggn","note":"","ucode":"831CCD98B393FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633772,"discussion_content":"懂， 感谢猛男","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702609855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384771,"user_name":"Geek_6a292f","can_delete":false,"product_type":"c1","uid":3787109,"ip_address":"四川","ucode":"969D78496BB759","user_header":"","comment_is_top":false,"comment_ctime":1701503408,"is_pvip":false,"replies":[{"id":140307,"content":"谢谢反馈，这里打错字了，我给小编反馈一下","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701523526,"ip_address":"重庆","comment_id":384771,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"“email 字段：字段串类型，表示这个用户的邮箱名。“ 这里应该是字符串类型吧？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632885,"discussion_content":"谢谢反馈，这里打错字了，我给小编反馈一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701523526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383873,"user_name":"Apa琦","can_delete":false,"product_type":"c1","uid":3710982,"ip_address":"上海","ucode":"A4A76A4D7364EA","user_header":"https://static001.geekbang.org/account/avatar/00/38/a0/06/f0ca94ca.jpg","comment_is_top":false,"comment_ctime":1699854904,"is_pvip":false,"replies":[{"id":140045,"content":"手动✍️好🤣","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699876182,"ip_address":"重庆","comment_id":383873,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"这个极客时间的代码黏贴到编辑器全部变成一行，强迫你手动写，加深记忆","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631693,"discussion_content":"手动✍️好🤣","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1699876182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383678,"user_name":"二夕","can_delete":false,"product_type":"c1","uid":2907644,"ip_address":"浙江","ucode":"2587A8DE51F629","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5d/fc/2e5e2a90.jpg","comment_is_top":false,"comment_ctime":1699437707,"is_pvip":false,"replies":[{"id":139941,"content":"可以的，加油","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699505576,"ip_address":"重庆","comment_id":383678,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"前几周有点忙，断更了 呜呜呜\n\n现在回来 继续打卡学习！\n\n思考题：在 Rust 中不能直接对原生类型做 impl，可以使用 struct 包一下。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631408,"discussion_content":"可以的，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699505577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383562,"user_name":"-Hedon🍭","can_delete":false,"product_type":"c1","uid":3176234,"ip_address":"湖北","ucode":"FAE541E7A2B88F","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/2a/0cd4c373.jpg","comment_is_top":false,"comment_ctime":1699270648,"is_pvip":false,"replies":[{"id":139818,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699412222,"ip_address":"重庆","comment_id":383562,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"内建类型不能做 imp，常规思路就是将 i8 封装成一个 struct，再做 imp。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631230,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699412222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383537,"user_name":"鸠摩智","can_delete":false,"product_type":"c1","uid":1106201,"ip_address":"江苏","ucode":"853E584FC4CD64","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/19/c756aaed.jpg","comment_is_top":false,"comment_ctime":1699240418,"is_pvip":true,"replies":[{"id":139740,"content":"赞。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699256772,"ip_address":"重庆","comment_id":383537,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"&#47;&#47; newtype，包一下i8\nstruct MyI8(i8);\n\nimpl MyI8{\n    fn foo(&amp;self){\n        println!(&quot;foo :{}&quot;, self.0);\n    }\n}\n\nfn main() {\n    let a = MyI8(2i8);\n    a.foo();\n}","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631023,"discussion_content":"赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699256772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383435,"user_name":"uyplayer","can_delete":false,"product_type":"c1","uid":2975298,"ip_address":"上海","ucode":"03ACCB446FBD3B","user_header":"https://static001.geekbang.org/account/avatar/00/2d/66/42/8a645285.jpg","comment_is_top":false,"comment_ctime":1699021239,"is_pvip":false,"replies":[{"id":139729,"content":"对","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699183226,"ip_address":"重庆","comment_id":383435,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"不可以，要实现的话 那就得用trait ","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630984,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699183226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383383,"user_name":"Distance","can_delete":false,"product_type":"c1","uid":1109780,"ip_address":"北京","ucode":"B30FAFE1F64D3D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/14/83867b58.jpg","comment_is_top":false,"comment_ctime":1698943567,"is_pvip":false,"replies":[{"id":139667,"content":"只有这种语法顺序，没有别的顺序。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698980266,"ip_address":"重庆","comment_id":383383,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":" User {\n        email: String::from(&quot;another@example.com&quot;),\n        ..user1    &#47;&#47; 注意这里，直接用 ..user1\n    };\n这一段，如果再 js 中，解构放到最后如果 user1 中也包含 email，那么仍然会使用 user1 中的值，rust 中对这个先后顺序没有要求吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630861,"discussion_content":"只有这种语法顺序，没有别的顺序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698980266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383252,"user_name":"喵咪爱吃肉","can_delete":false,"product_type":"c1","uid":1901074,"ip_address":"广东","ucode":"6CEA983AFF58AF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/02/12/ce3dc4c8.jpg","comment_is_top":false,"comment_ctime":1698758637,"is_pvip":false,"replies":[{"id":139624,"content":"已更。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806561,"ip_address":"重庆","comment_id":383252,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"留着明天看，催更！","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630712,"discussion_content":"已更。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383192,"user_name":"仲玄","can_delete":false,"product_type":"c1","uid":1049139,"ip_address":"广东","ucode":"CA42FFC21DE0EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/33/b4bb0b9c.jpg","comment_is_top":false,"comment_ctime":1698646131,"is_pvip":false,"replies":[{"id":139582,"content":"不急哈，每个示例放playground去跑一下，很多基础细节需要🧹清。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698664029,"ip_address":"四川","comment_id":383192,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"入门失败了几次,这是我看到最好的课程了","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630571,"discussion_content":"不急哈，每个示例放playground去跑一下，很多基础细节需要🧹清。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698664029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383191,"user_name":"duwoodly","can_delete":false,"product_type":"c1","uid":2020398,"ip_address":"重庆","ucode":"12F7BFCB78DB0E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d4/2e/d478a412.jpg","comment_is_top":false,"comment_ctime":1698645671,"is_pvip":false,"replies":[{"id":139588,"content":"对的，👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698676918,"ip_address":"重庆","comment_id":383191,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"不能为基本类型实现方法，但是我不知道语言设计者要这样设计。 作为使用者，如果要给基本类型添加自定义方法，可以使用元组结构体包装成新类型，在新类型上impl方法即可。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630583,"discussion_content":"对的，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698676918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383170,"user_name":"伯阳","can_delete":false,"product_type":"c1","uid":1596631,"ip_address":"北京","ucode":"DBDC8735AA54AD","user_header":"https://static001.geekbang.org/account/avatar/00/18/5c/d7/3b92bb0d.jpg","comment_is_top":false,"comment_ctime":1698620779,"is_pvip":false,"replies":[{"id":139577,"content":"加油","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698642995,"ip_address":"四川","comment_id":383170,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"打卡完成，加油","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630549,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698642995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383201,"user_name":"Geek_6fjt20","can_delete":false,"product_type":"c1","uid":1672482,"ip_address":"北京","ucode":"B7EB9B061E2C06","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrbHib1v0wPRVHxrFK2CPQQX8Wg3rRMPiaZ5teMKu5klT48yns6yo4krZsIqHskwdEsibVvQ3QB7CUQ/132","comment_is_top":false,"comment_ctime":1698659721,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"不在同一作用域吧","like_count":1},{"had_liked":false,"id":383174,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1118976,"ip_address":"中国香港","ucode":"35F4FFAC4A4B15","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","comment_is_top":false,"comment_ctime":1698629851,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"go go go","like_count":0}]}