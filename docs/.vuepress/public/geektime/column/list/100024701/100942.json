{"id":100942,"title":"34 | 块设备（上）：如何建立代理商销售模式？","content":"<p>上一章，我们解析了文件系统，最后讲文件系统读写的流程到达底层的时候，没有更深入地分析下去，这是因为文件系统再往下就是硬盘设备了。上两节，我们解析了字符设备的mknod、打开和读写流程。那这一节我们就来讲块设备的mknod、打开流程，以及文件系统和下层的硬盘设备的读写流程。</p><p>块设备一般会被格式化为文件系统，但是，下面的讲述中，你可能会有一点困惑。你会看到各种各样的dentry和inode。块设备涉及三种文件系统，所以你看到的这些dentry和inode可能都不是一回事儿，请注意分辨。</p><p>块设备需要mknod吗？对于启动盘，你可能觉得，启动了就在那里了。可是如果我们要插进一块新的USB盘，还是要有这个操作的。</p><p>mknod还是会创建在/dev路径下面，这一点和字符设备一样。/dev路径下面是devtmpfs文件系统。<strong>这是块设备遇到的第一个文件系统</strong>。我们会为这个块设备文件，分配一个特殊的inode，这一点和字符设备也是一样的。只不过字符设备走S_ISCHR这个分支，对应inode的file_operations是def_chr_fops；而块设备走S_ISBLK这个分支，对应的inode的file_operations是def_blk_fops。这里要注意，inode里面的i_rdev被设置成了块设备的设备号dev_t，这个我们后面会用到，你先记住有这么一回事儿。</p><!-- [[[read_end]]] --><pre><code>void init_special_inode(struct inode *inode, umode_t mode, dev_t rdev)\n{\n\tinode-&gt;i_mode = mode;\n\tif (S_ISCHR(mode)) {\n\t\tinode-&gt;i_fop = &amp;def_chr_fops;\n\t\tinode-&gt;i_rdev = rdev;\n\t} else if (S_ISBLK(mode)) {\n\t\tinode-&gt;i_fop = &amp;def_blk_fops;\n\t\tinode-&gt;i_rdev = rdev;\n\t} else if (S_ISFIFO(mode))\n\t\tinode-&gt;i_fop = &amp;pipefifo_fops;\n\telse if (S_ISSOCK(mode))\n\t\t;\t/* leave it no_open_fops */\n}\n</code></pre><p>特殊inode的默认file_operations是def_blk_fops，就像字符设备一样，有打开、读写这个块设备文件，但是我们常规操作不会这样做。我们会将这个块设备文件mount到一个文件夹下面。</p><pre><code>const struct file_operations def_blk_fops = {\n        .open           = blkdev_open,\n        .release        = blkdev_close,\n        .llseek         = block_llseek,\n        .read_iter      = blkdev_read_iter,\n        .write_iter     = blkdev_write_iter,\n        .mmap           = generic_file_mmap,\n        .fsync          = blkdev_fsync,\n        .unlocked_ioctl = block_ioctl,\n        .splice_read    = generic_file_splice_read,\n        .splice_write   = iter_file_splice_write,\n        .fallocate      = blkdev_fallocate,\n};\n</code></pre><p>不过，这里我们还是简单看一下，打开这个块设备的操作blkdev_open。它里面调用的是blkdev_get打开这个块设备，了解到这一点就可以了。</p><p>接下来，我们要调用mount，将这个块设备文件挂载到一个文件夹下面。如果这个块设备原来被格式化为一种文件系统的格式，例如ext4，那我们调用的就是ext4相应的mount操作。<strong>这是块设备遇到的第二个文件系统</strong>，也是向这个块设备读写文件，需要基于的主流文件系统。咱们在文件系统那一节解析的对于文件的读写流程，都是基于这个文件系统的。</p><p>还记得，咱们注册ext4文件系统的时候，有下面这样的结构：</p><pre><code>static struct file_system_type ext4_fs_type = {\n\t.owner\t\t= THIS_MODULE,\n\t.name\t\t= &quot;ext4&quot;,\n\t.mount\t\t= ext4_mount,\n\t.kill_sb\t= kill_block_super,\n\t.fs_flags\t= FS_REQUIRES_DEV,\n};\n</code></pre><p>在将一个硬盘的块设备mount成为ext4的时候，我们会调用ext4_mount-&gt;mount_bdev。</p><pre><code>static struct dentry *ext4_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data)\n{\n\treturn mount_bdev(fs_type, flags, dev_name, data, ext4_fill_super);\n}\n\n\nstruct dentry *mount_bdev(struct file_system_type *fs_type,\n\tint flags, const char *dev_name, void *data,\n\tint (*fill_super)(struct super_block *, void *, int))\n{\n\tstruct block_device *bdev;\n\tstruct super_block *s;\n\tfmode_t mode = FMODE_READ | FMODE_EXCL;\n\tint error = 0;\n\n\n\tif (!(flags &amp; MS_RDONLY))\n\t\tmode |= FMODE_WRITE;\n\n\n\tbdev = blkdev_get_by_path(dev_name, mode, fs_type);\n......\n\ts = sget(fs_type, test_bdev_super, set_bdev_super, flags | MS_NOSEC, bdev);\n......\n\treturn dget(s-&gt;s_root);\n......\n}\n</code></pre><p>mount_bdev主要做了两件大事情。第一，blkdev_get_by_path根据/dev/xxx这个名字，找到相应的设备并打开它；第二，sget根据打开的设备文件，填充ext4文件系统的super_block，从而以此为基础，建立一整套咱们在文件系统那一章讲的体系。</p><p>一旦这套体系建立起来以后，对于文件的读写都是通过ext4文件系统这个体系进行的，创建的inode结构也是指向ext4文件系统的。文件系统那一章我们只解析了这部分，由于没有到达底层，也就没有关注块设备相关的操作。这一章我们重新回过头来，一方面看mount的时候，对于块设备都做了哪些操作，另一方面看读写的时候，到了底层，对于块设备做了哪些操作。</p><p>这里我们先来看mount_bdev做的第一件大事情，通过blkdev_get_by_path，根据设备名/dev/xxx，得到struct block_device *bdev。</p><pre><code>/**\n * blkdev_get_by_path - open a block device by name\n * @path: path to the block device to open\n * @mode: FMODE_* mask\n * @holder: exclusive holder identifier\n *\n * Open the blockdevice described by the device file at @path.  @mode\n * and @holder are identical to blkdev_get().\n *\n * On success, the returned block_device has reference count of one.\n */\nstruct block_device *blkdev_get_by_path(const char *path, fmode_t mode,\n\t\t\t\t\tvoid *holder)\n{\n\tstruct block_device *bdev;\n\tint err;\n\n\n\tbdev = lookup_bdev(path);\n......\n\terr = blkdev_get(bdev, mode, holder);\n......\n\treturn bdev;\n}\n</code></pre><p>blkdev_get_by_path干了两件事情。第一个，lookup_bdev根据设备路径/dev/xxx得到block_device。第二个，打开这个设备，调用blkdev_get。</p><p>咱们上面分析过def_blk_fops的默认打开设备函数blkdev_open，它也是调用blkdev_get的。块设备的打开往往不是直接调用设备文件的打开函数，而是调用mount来打开的。</p><pre><code>/**\n * lookup_bdev  - lookup a struct block_device by name\n * @pathname:\tspecial file representing the block device\n *\n * Get a reference to the blockdevice at @pathname in the current\n * namespace if possible and return it.  Return ERR_PTR(error)\n * otherwise.\n */\nstruct block_device *lookup_bdev(const char *pathname)\n{\n\tstruct block_device *bdev;\n\tstruct inode *inode;\n\tstruct path path;\n\tint error;\n\n\n\tif (!pathname || !*pathname)\n\t\treturn ERR_PTR(-EINVAL);\n\n\n\terror = kern_path(pathname, LOOKUP_FOLLOW, &amp;path);\n\tif (error)\n\t\treturn ERR_PTR(error);\n\n\n\tinode = d_backing_inode(path.dentry);\n......\n\tbdev = bd_acquire(inode);\n......\n\tgoto out;\n}\n</code></pre><p>lookup_bdev这里的pathname是设备的文件名，例如/dev/xxx。这个文件是在devtmpfs文件系统中的，kern_path可以在这个文件系统里面，一直找到它对应的dentry。接下来，d_backing_inode会获得inode。这个inode就是那个init_special_inode生成的特殊inode。</p><p>接下来，bd_acquire通过这个特殊的inode，找到struct block_device。</p><pre><code>static struct block_device *bd_acquire(struct inode *inode)\n{\n\tstruct block_device *bdev;\n......\n\tbdev = bdget(inode-&gt;i_rdev);\n\tif (bdev) {\n\t\tspin_lock(&amp;bdev_lock);\n\t\tif (!inode-&gt;i_bdev) {\n\t\t\t/*\n\t\t\t * We take an additional reference to bd_inode,\n\t\t\t * and it's released in clear_inode() of inode.\n\t\t\t * So, we can access it via -&gt;i_mapping always\n\t\t\t * without igrab().\n\t\t\t */\n\t\t\tbdgrab(bdev);\n\t\t\tinode-&gt;i_bdev = bdev;\n\t\t\tinode-&gt;i_mapping = bdev-&gt;bd_inode-&gt;i_mapping;\n\t\t}\n\t}\n\treturn bdev;\n}\n</code></pre><p>bd_acquire中最主要的就是调用bdget，它的参数是特殊inode的i_rdev。这里面在mknod的时候，放的是设备号dev_t。</p><pre><code>struct block_device *bdget(dev_t dev)\n{\n        struct block_device *bdev;\n        struct inode *inode;\n\n\n        inode = iget5_locked(blockdev_superblock, hash(dev),\n                        bdev_test, bdev_set, &amp;dev);\n \n        bdev = &amp;BDEV_I(inode)-&gt;bdev;\n\n\n        if (inode-&gt;i_state &amp; I_NEW) {\n                bdev-&gt;bd_contains = NULL;\n                bdev-&gt;bd_super = NULL;\n                bdev-&gt;bd_inode = inode;\n                bdev-&gt;bd_block_size = i_blocksize(inode);\n                bdev-&gt;bd_part_count = 0;\n                bdev-&gt;bd_invalidated = 0;\n                inode-&gt;i_mode = S_IFBLK;\n                inode-&gt;i_rdev = dev;\n                inode-&gt;i_bdev = bdev;\n                inode-&gt;i_data.a_ops = &amp;def_blk_aops;\n                mapping_set_gfp_mask(&amp;inode-&gt;i_data, GFP_USER);\n                spin_lock(&amp;bdev_lock);\n                list_add(&amp;bdev-&gt;bd_list, &amp;all_bdevs);\n                spin_unlock(&amp;bdev_lock);\n                unlock_new_inode(inode);\n        }\n        return bdev;\n}\n</code></pre><p><strong>在bdget中，我们遇到了第三个文件系统，bdev伪文件系统</strong>。bdget函数根据传进来的dev_t，在blockdev_superblock这个文件系统里面找到inode。这里注意，这个inode已经不是devtmpfs文件系统的inode了。blockdev_superblock的初始化在整个系统初始化的时候，会调用bdev_cache_init进行初始化。它的定义如下：</p><pre><code>struct super_block *blockdev_superblock __read_mostly;\n\n\nstatic struct file_system_type bd_type = {\n        .name           = &quot;bdev&quot;,\n        .mount          = bd_mount,\n        .kill_sb        = kill_anon_super,\n};\n\n\nvoid __init bdev_cache_init(void)\n{\n        int err;\n        static struct vfsmount *bd_mnt;\n\n\n        bdev_cachep = kmem_cache_create(&quot;bdev_cache&quot;, sizeof(struct bdev_inode), 0, (SLAB_HWCACHE_ALIGN|SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD|SLAB_ACCOUNT|SLAB_PANIC), init_once);\n        err = register_filesystem(&amp;bd_type);\n        if (err)\n                panic(&quot;Cannot register bdev pseudo-fs&quot;);\n        bd_mnt = kern_mount(&amp;bd_type);\n        if (IS_ERR(bd_mnt))\n                panic(&quot;Cannot create bdev pseudo-fs&quot;);\n        blockdev_superblock = bd_mnt-&gt;mnt_sb;   /* For writeback */\n}\n</code></pre><p>所有表示块设备的inode都保存在伪文件系统 bdev中，这些对用户层不可见，主要为了方便块设备的管理。Linux将块设备的block_device和bdev文件系统的块设备的inode，通过struct bdev_inode进行关联。所以，在bdget中，BDEV_I就是通过bdev文件系统的inode，获得整个struct bdev_inode结构的地址，然后取成员bdev，得到block_device。</p><pre><code>struct bdev_inode {\n\tstruct block_device bdev;\n\tstruct inode vfs_inode;\n};\n</code></pre><p>绕了一大圈，我们终于通过设备文件/dev/xxx，获得了设备的结构block_device。有点儿绕，我们再捋一下。设备文件/dev/xxx在devtmpfs文件系统中，找到devtmpfs文件系统中的inode，里面有dev_t。我们可以通过dev_t，在伪文件系统 bdev中找到对应的inode，然后根据struct bdev_inode找到关联的block_device。</p><p>接下来，blkdev_get_by_path开始做第二件事情，在找到block_device之后，要调用blkdev_get打开这个设备。blkdev_get会调用__blkdev_get。</p><p>在分析打开一个设备之前，我们先来看block_device这个结构是什么样的。</p><pre><code>struct block_device {\n\tdev_t\t\t\tbd_dev;  /* not a kdev_t - it's a search key */\n\tint\t\t\tbd_openers;\n\tstruct super_block *\tbd_super;\n......\n\tstruct block_device *\tbd_contains;\n\tunsigned\t\tbd_block_size;\n\tstruct hd_struct *\tbd_part;\n\tunsigned\t\tbd_part_count;\n\tint\t\t\tbd_invalidated;\n\tstruct gendisk *\tbd_disk;\n\tstruct request_queue *  bd_queue;\n\tstruct backing_dev_info *bd_bdi;\n\tstruct list_head\tbd_list;\n......\n} ;\n</code></pre><p>你应该能发现，这个结构和其他几个结构有着千丝万缕的联系，比较复杂。这是因为块设备本身就比较复杂。</p><p>比方说，我们有一个磁盘/dev/sda，我们既可以把它整个格式化成一个文件系统，也可以把它分成多个分区/dev/sda1、 /dev/sda2，然后把每个分区格式化成不同的文件系统。如果我们访问某个分区的设备文件/dev/sda2，我们应该能知道它是哪个磁盘设备的。按说它们的驱动应该是一样的。如果我们访问整个磁盘的设备文件/dev/sda，我们也应该能知道它分了几个区域，所以就有了下图这个复杂的关系结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/85/76/85f4d83e7ebf2aadf7ffcd5fd393b176.png\" alt=\"\"></p><p>struct gendisk是用来描述整个设备的，因而上面的例子中，gendisk只有一个实例，指向/dev/sda。它的定义如下：</p><pre><code>struct gendisk {\n\tint major;\t\t\t/* major number of driver */\n\tint first_minor;\n\tint minors;                     /* maximum number of minors, =1 for disks that can't be partitioned. */\n\tchar disk_name[DISK_NAME_LEN];\t/* name of major driver */\n\tchar *(*devnode)(struct gendisk *gd, umode_t *mode);\n......\n\tstruct disk_part_tbl __rcu *part_tbl;\n\tstruct hd_struct part0;\n\n\n\tconst struct block_device_operations *fops;\n\tstruct request_queue *queue;\n\tvoid *private_data;\n\n\n\tint flags;\n\tstruct kobject *slave_dir;\n......\n};\n</code></pre><p>这里major是主设备号，first_minor表示第一个分区的从设备号，minors表示分区的数目。</p><p>disk_name给出了磁盘块设备的名称。</p><p>struct disk_part_tbl结构里是一个struct hd_struct的数组，用于表示各个分区。struct block_device_operations fops指向对于这个块设备的各种操作。struct request_queue queue是表示在这个块设备上的请求队列。</p><p>struct hd_struct是用来表示某个分区的，在上面的例子中，有两个hd_struct的实例，分别指向/dev/sda1、 /dev/sda2。它的定义如下：</p><pre><code>struct hd_struct {\n\tsector_t start_sect;\n\tsector_t nr_sects;\n......\n\tstruct device __dev;\n\tstruct kobject *holder_dir;\n\tint policy, partno;\n\tstruct partition_meta_info *info;\n......\n\tstruct disk_stats dkstats;\n\tstruct percpu_ref ref;\n\tstruct rcu_head rcu_head;\n};\n</code></pre><p>在hd_struct中，比较重要的成员变量保存了如下的信息：从磁盘的哪个扇区开始，到哪个扇区结束。</p><p>而block_device既可以表示整个块设备，也可以表示某个分区，所以对于上面的例子，block_device有三个实例，分别指向/dev/sda1、/dev/sda2、/dev/sda。</p><p>block_device的成员变量bd_disk，指向的gendisk就是整个块设备。这三个实例都指向同一个gendisk。bd_part指向的某个分区的hd_struct，bd_contains指向的是整个块设备的block_device。</p><p>了解了这些复杂的关系，我们再来看打开设备文件的代码，就会清晰很多。</p><pre><code>static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)\n{\n\tstruct gendisk *disk;\n\tstruct module *owner;\n\tint ret;\n\tint partno;\n\tint perm = 0;\n\n\n\tif (mode &amp; FMODE_READ)\n\t\tperm |= MAY_READ;\n\tif (mode &amp; FMODE_WRITE)\n\t\tperm |= MAY_WRITE;\n......\n\tdisk = get_gendisk(bdev-&gt;bd_dev, &amp;partno);\n......\n\towner = disk-&gt;fops-&gt;owner;\n......\n\tif (!bdev-&gt;bd_openers) {\n\t\tbdev-&gt;bd_disk = disk;\n\t\tbdev-&gt;bd_queue = disk-&gt;queue;\n\t\tbdev-&gt;bd_contains = bdev;\n\n\n\t\tif (!partno) {\n\t\t\tret = -ENXIO;\n\t\t\tbdev-&gt;bd_part = disk_get_part(disk, partno);\n......\n\t\t\tif (disk-&gt;fops-&gt;open) {\n\t\t\t\tret = disk-&gt;fops-&gt;open(bdev, mode);\n......\n\t\t\t}\n\n\n\t\t\tif (!ret)\n\t\t\t\tbd_set_size(bdev,(loff_t)get_capacity(disk)&lt;&lt;9);\n\n\n\t\t\tif (bdev-&gt;bd_invalidated) {\n\t\t\t\tif (!ret)\n\t\t\t\t\trescan_partitions(disk, bdev);\n......\n\t\t\t}\n......\n\t\t} else {\n\t\t\tstruct block_device *whole;\n\t\t\twhole = bdget_disk(disk, 0);\n......\n\t\t\tret = __blkdev_get(whole, mode, 1);\n......\n\t\t\tbdev-&gt;bd_contains = whole;\n\t\t\tbdev-&gt;bd_part = disk_get_part(disk, partno);\n......\n\t\t\tbd_set_size(bdev, (loff_t)bdev-&gt;bd_part-&gt;nr_sects &lt;&lt; 9);\n\t\t}\n\t} \n......\n\tbdev-&gt;bd_openers++;\n\tif (for_part)\n\t\tbdev-&gt;bd_part_count++;\n.....\n}\n</code></pre><p>在__blkdev_get函数中，我们先调用get_gendisk，根据block_device获取gendisk。具体代码如下：</p><pre><code>/**\n * get_gendisk - get partitioning information for a given device\n * @devt: device to get partitioning information for\n * @partno: returned partition index\n *\n * This function gets the structure containing partitioning\n * information for the given device @devt.\n */\nstruct gendisk *get_gendisk(dev_t devt, int *partno)\n{\n\tstruct gendisk *disk = NULL;\n\n\n\tif (MAJOR(devt) != BLOCK_EXT_MAJOR) {\n\t\tstruct kobject *kobj;\n\n\n\t\tkobj = kobj_lookup(bdev_map, devt, partno);\n\t\tif (kobj)\n\t\t\tdisk = dev_to_disk(kobj_to_dev(kobj));\n\t} else {\n\t\tstruct hd_struct *part;\n\t\tpart = idr_find(&amp;ext_devt_idr, blk_mangle_minor(MINOR(devt)));\n\t\tif (part &amp;&amp; get_disk(part_to_disk(part))) {\n\t\t\t*partno = part-&gt;partno;\n\t\t\tdisk = part_to_disk(part);\n\t\t}\n\t}\n\treturn disk;\n}\n</code></pre><p>我们可以想象这里面有两种情况。第一种情况是，block_device是指向整个磁盘设备的。这个时候，我们只需要根据dev_t，在bdev_map中将对应的gendisk拿出来就好。</p><p>bdev_map是干什么的呢？前面咱们学习字符设备驱动的时候讲过，任何一个字符设备初始化的时候，都需要调用__register_chrdev_region，注册这个字符设备。对于块设备也是类似的，每一个块设备驱动初始化的时候，都会调用add_disk注册一个gendisk。</p><p>这里需要说明一下，gen的意思是general通用的意思，也就是说，所有的块设备，不仅仅是硬盘disk，都会用一个gendisk来表示，然后通过调用链add_disk-&gt;device_add_disk-&gt;blk_register_region，将dev_t和一个gendisk关联起来，保存在bdev_map中。</p><pre><code>static struct kobj_map *bdev_map;\n\n\nstatic inline void add_disk(struct gendisk *disk)\n{\n\tdevice_add_disk(NULL, disk);\n}\n\n\n/**\n * device_add_disk - add partitioning information to kernel list\n * @parent: parent device for the disk\n * @disk: per-device partitioning information\n *\n * This function registers the partitioning information in @disk\n * with the kernel.\n */\nvoid device_add_disk(struct device *parent, struct gendisk *disk)\n{\n......\nblk_register_region(disk_devt(disk), disk-&gt;minors, NULL,\n\t\t\t    exact_match, exact_lock, disk);\n.....\n}\n\n\n/*\n * Register device numbers dev..(dev+range-1)\n * range must be nonzero\n * The hash chain is sorted on range, so that subranges can override.\n */\nvoid blk_register_region(dev_t devt, unsigned long range, struct module *module,\n\t\t\t struct kobject *(*probe)(dev_t, int *, void *),\n\t\t\t int (*lock)(dev_t, void *), void *data)\n{\n\tkobj_map(bdev_map, devt, range, module, probe, lock, data);\n}\n</code></pre><p>get_gendisk要处理的第二种情况是，block_device是指向某个分区的。这个时候我们要先得到hd_struct，然后通过hd_struct，找到对应的整个设备的gendisk，并且把partno设置为分区号。</p><p>我们再回到__blkdev_get函数中，得到gendisk。接下来我们可以分两种情况。</p><p>如果partno为0，也就是说，打开的是整个设备而不是分区，那我们就调用disk_get_part，获取gendisk中的分区数组，然后调用block_device_operations里面的open函数打开设备。</p><p>如果partno不为0，也就是说打开的是分区，那我们就获取整个设备的block_device，赋值给变量struct block_device *whole，然后调用递归__blkdev_get，打开whole代表的整个设备，将bd_contains设置为变量whole。</p><p>block_device_operations就是在驱动层了。例如在drivers/scsi/sd.c里面，也就是MODULE_DESCRIPTION(“SCSI disk (sd) driver”)中，就有这样的定义。</p><pre><code>static const struct block_device_operations sd_fops = {\n\t.owner\t\t\t= THIS_MODULE,\n\t.open\t\t\t= sd_open,\n\t.release\t\t= sd_release,\n\t.ioctl\t\t\t= sd_ioctl,\n\t.getgeo\t\t\t= sd_getgeo,\n#ifdef CONFIG_COMPAT\n\t.compat_ioctl\t\t= sd_compat_ioctl,\n#endif\n\t.check_events\t\t= sd_check_events,\n\t.revalidate_disk\t= sd_revalidate_disk,\n\t.unlock_native_capacity\t= sd_unlock_native_capacity,\n\t.pr_ops\t\t\t= &amp;sd_pr_ops,\n};\n\n\n/**\n *\tsd_open - open a scsi disk device\n *\t@bdev: Block device of the scsi disk to open\n *\t@mode: FMODE_* mask\n *\n *\tReturns 0 if successful. Returns a negated errno value in case \n *\tof error.\n **/\nstatic int sd_open(struct block_device *bdev, fmode_t mode)\n{\n......\n}\n</code></pre><p>在驱动层打开了磁盘设备之后，我们可以看到，在这个过程中，block_device相应的成员变量该填的都填上了，这才完成了mount_bdev的第一件大事，通过blkdev_get_by_path得到block_device。</p><p>接下来就是第二件大事情，我们要通过sget，将block_device塞进superblock里面。注意，调用sget的时候，有一个参数是一个函数set_bdev_super。这里面将block_device设置进了super_block。而sget要做的，就是分配一个super_block，然后调用set_bdev_super这个callback函数。这里的super_block是ext4文件系统的super_block。</p><p>sget(fs_type, test_bdev_super, set_bdev_super, flags | MS_NOSEC, bdev);</p><pre><code>static int set_bdev_super(struct super_block *s, void *data)\n{\n\ts-&gt;s_bdev = data;\n\ts-&gt;s_dev = s-&gt;s_bdev-&gt;bd_dev;\n\ts-&gt;s_bdi = bdi_get(s-&gt;s_bdev-&gt;bd_bdi);\n\treturn 0;\n}\n\n\n/**\n *\tsget\t-\tfind or create a superblock\n *\t@type:\t  filesystem type superblock should belong to\n *\t@test:\t  comparison callback\n *\t@set:\t  setup callback\n *\t@flags:\t  mount flags\n *\t@data:\t  argument to each of them\n */\nstruct super_block *sget(struct file_system_type *type,\n\t\t\tint (*test)(struct super_block *,void *),\n\t\t\tint (*set)(struct super_block *,void *),\n\t\t\tint flags,\n\t\t\tvoid *data)\n{\n......\n\treturn sget_userns(type, test, set, flags, user_ns, data);\n}\n\n\n/**\n *\tsget_userns -\tfind or create a superblock\n *\t@type:\tfilesystem type superblock should belong to\n *\t@test:\tcomparison callback\n *\t@set:\tsetup callback\n *\t@flags:\tmount flags\n *\t@user_ns: User namespace for the super_block\n *\t@data:\targument to each of them\n */\nstruct super_block *sget_userns(struct file_system_type *type,\n\t\t\tint (*test)(struct super_block *,void *),\n\t\t\tint (*set)(struct super_block *,void *),\n\t\t\tint flags, struct user_namespace *user_ns,\n\t\t\tvoid *data)\n{\n\tstruct super_block *s = NULL;\n\tstruct super_block *old;\n\tint err;\n......\n\tif (!s) {\n\t\ts = alloc_super(type, (flags &amp; ~MS_SUBMOUNT), user_ns);\n......\n\t}\n\terr = set(s, data);\n......\n\ts-&gt;s_type = type;\n\tstrlcpy(s-&gt;s_id, type-&gt;name, sizeof(s-&gt;s_id));\n\tlist_add_tail(&amp;s-&gt;s_list, &amp;super_blocks);\n\thlist_add_head(&amp;s-&gt;s_instances, &amp;type-&gt;fs_supers);\n\tspin_unlock(&amp;sb_lock);\n\tget_filesystem(type);\n\tregister_shrinker(&amp;s-&gt;s_shrink);\n\treturn s;\n}\n</code></pre><p>好了，到此为止，mount中一个块设备的过程就结束了。设备打开了，形成了block_device结构，并且塞到了super_block中。</p><p>有了ext4文件系统的super_block之后，接下来对于文件的读写过程，就和文件系统那一章的过程一摸一样了。只要不涉及真正写入设备的代码，super_block中的这个block_device就没啥用处。这也是为什么文件系统那一章，我们丝毫感觉不到它的存在，但是一旦到了底层，就到了block_device起作用的时候了，这个我们下一节仔细分析。</p><h2>总结时刻</h2><p>从这一节我们可以看出，块设备比字符设备复杂多了，涉及三个文件系统，工作过程我用一张图总结了一下，下面带你总结一下。</p><ol>\n<li>所有的块设备被一个map结构管理从dev_t到gendisk的映射；</li>\n<li>所有的block_device表示的设备或者分区都在bdev文件系统的inode列表中；</li>\n<li>mknod创建出来的块设备文件在devtemfs文件系统里面，特殊inode里面有块设备号；</li>\n<li>mount一个块设备上的文件系统，调用这个文件系统的mount接口；</li>\n<li>通过按照/dev/xxx在文件系统devtmpfs文件系统上搜索到特殊inode，得到块设备号；</li>\n<li>根据特殊inode里面的dev_t在bdev文件系统里面找到inode；</li>\n<li>根据bdev文件系统上的inode找到对应的block_device，根据dev_t在map中找到gendisk，将两者关联起来；</li>\n<li>找到block_device后打开设备，调用和block_device关联的gendisk里面的block_device_operations打开设备；</li>\n<li>创建被mount的文件系统的super_block。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/62/20/6290b73283063f99d6eb728c26339620.png\" alt=\"\"></p><h2>课堂练习</h2><p>到这里，你是否真的体会到了Linux里面“一切皆文件”了呢？那个特殊的inode除了能够表示字符设备和块设备，还能表示什么呢？请你看代码分析一下。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p></p>","neighbors":{"left":{"article_title":"33 | 字符设备（下）：如何建立直销模式？","id":100576},"right":{"article_title":"35 | 块设备（下）：如何建立代理商销售模式？","id":101397}},"comments":[]}