{"id":73036,"title":"04 | 数学归纳法：如何用数学归纳提升代码的运行效率？","content":"<p>你好，我是黄申。</p><p>上次我们聊了迭代法及其应用，并用编程实现了几个小例子。不过你知道吗，对于某些迭代问题，我们其实可以避免一步步的计算，直接<strong>从理论上证明某个结论</strong>，节约大量的计算资源和时间，这就是我们今天要说的<strong>数学归纳法</strong>。</p><p>平时我们谈的“归纳”，是一种从经验事实中找出普遍特征的认知方法。比如，人们在观察了各种各样动物之后，通过它们的外观、行为特征、生活习性等得出某种结论，来区分哪些是鸟、哪些是猫等等。比如我这里列出的几个动物的例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/37/f606627d96040653c5eeca1541788a37.jpg?wh=1142*699\" alt=\"\"></p><p>通过上面的表格，我们可以进行归纳，并得出这样的结论：</p><ul>\n<li>\n<p>如果一个动物，身上长羽毛并且会飞，那么就是属于鸟；</p>\n</li>\n<li>\n<p>如果一个动物，身上长绒毛、不会飞、而且吃小鱼和老鼠，那么就属于猫。</p>\n</li>\n</ul><p>通过观察$5$个动物样本的$3$个特征，从而得到某种动物应该具有何种特征，这种方法就是我们平时所提到的归纳法。</p><p>我们日常生活中所说的这种归纳法和数学归纳法是不一样的，它们究竟有什么区别呢？具体数学归纳法可以做什么呢？我们接着上一节舍罕王赏麦的故事继续说。</p><h2>什么是数学归纳法？</h2><p>上节我们提到，在棋盘上放麦粒的规则是，第一格放一粒，第二格放两粒，以此类推，每一小格内都比前一小格多一倍的麦子，直至放满$64$个格子。</p><!-- [[[read_end]]] --><p>我们假想一下自己穿越到了古印度，正站在国王的身边，看着这个棋盘，你发现第$1$格到第$8$格的麦子数分别是：$1、2、4、8、16、32、64、128$。这个时候，国王想知道总共需要多少粒麦子。我们小时候都玩过“找规律”，于是，我发现了这么一个规律，你看看是不是这样？</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/8c/8eba65a8d57d5cc84cb6ea4dd20ba68c.jpg?wh=1142*830\" alt=\"\"></p><p>根据这个观察，我们是不是可以大胆假设，前$n$个格子的麦粒总数就是$2^{n}-1$ 呢？如果这个假设成立，那么填满64格需要的麦粒总数，就是$1+2+2^{2}+2^{3}+2^{4}+……＋ 2^{63}$<br>\n$＝2^{64}-1＝18446744073709551615$。</p><p>这个假设是否成立，我们还有待验证。但是对于类似这种无穷数列的问题，我们通常可以采用<strong>数学归纳法</strong>（Mathematical Induction）来证明。</p><p>在数论中，数学归纳法用来证明任意一个给定的情形都是正确的，也就是说，第一个、第二个、第三个，一直到所有情形，概不例外。</p><p>数学归纳法的一般步骤是这样的：</p><ul>\n<li>\n<p><strong>证明基本情况（通常是$n=1$的时候）是否成立</strong><strong>；</strong></p>\n</li>\n<li>\n<p><strong>假设$n=k-1$成立，再证明$n=k$也是成立的</strong><strong>（$k$为任意大于$1$的自然数）</strong>。</p>\n</li>\n</ul><p>只要学过数学，我想你对这个步骤都不陌生。但是，现在你需要牢记这个步骤，然后我们用这个步骤来证明下开头的例子。</p><p>为了让你更好地理解，我将原有的命题分为两个子命题来证明。第一个子命题是，第$n$个棋格放的麦粒数为$2^{n-1}$。第二个子命题是，前$n$个棋格放的麦粒数总和为$2^{n}-1$。</p><p>首先，我们来证明第一个子命题。</p><ul>\n<li>\n<p>基本情况：我们已经验证了$n=1$的时候，第一格内的麦粒数为$1$，和$2^{1-1}$相等。因此，命题在$k=1$的时候成立。</p>\n</li>\n<li>\n<p>假设第$k-1$格的麦粒数为$2^{k-2}$。那么第$k$格的麦粒数为第$k-1$格的$2$倍，也就是$2^{k - 2}*2=2^{k-1}$。因此，如果命题在$k=n-1$的时候成立，那么在$k=n$的时候也成立。</p>\n</li>\n</ul><p>所以，第一个子命题成立。在这个基础之上，我再来证明第二个子命题。</p><ul>\n<li>\n<p>基本情况：我们已经验证了$n=1$的时候，所有格子的麦粒总数为$1$。因此命题在$k=1$的时候成立。</p>\n</li>\n<li>\n<p>假设前$k-1$格的麦粒总数为$2^{k-1}-1$，基于前一个命题的结论，第k格的麦粒数为$2^{k-1}$。那么前$k$格的麦粒总数为$(2^{k-1}-1)+(2^{k-1})=2*2^{k-1}-1=2^{k}-1$。因此，如果命题在$k=n-1$的时候成立，那么在$k=n$的时候也成立。</p>\n</li>\n</ul><p>说到这里，我已经证明了这两个命题都是成立的。<strong>和使用迭代法的计算相比，数学归纳法最大的特点就在于“归纳”二字。它已经总结出了规律。只要我们能够证明这个规律是正确的，就没有必要进行逐步的推算，可以节省很多时间和资源。</strong></p><p>说到这里，我们也可以看出，数学归纳法中的“归纳”是指的从第一步正确，第二步正确，第三步正确，一直推导到最后一步是正确的。这就像多米诺骨牌，只要确保第一张牌倒下，而每张牌的倒下又能导致下一张牌的倒下，那么所有的骨牌都会倒下。从这里，你也能看出来，这和开篇提到的广义归纳法是不同的。数学归纳法并不是通过经验或样本的观察，总结出事物的普遍特征和规律。</p><p>好了，对数学归纳法的概念，我想你现在已经理解了。这里，我对上一节中有关麦粒的代码稍作修改，增加了一点代码来使用数学归纳法的结论，并和迭代法的实现进行了比较，你可以看看哪种方法耗时更长。</p><pre><code>public static void main(String[] args) {\n  \n  int grid = 63;\n  long start, end = 0;\n  start = System.currentTimeMillis();\n  System.out.println(String.format(&quot;舍罕王给了这么多粒：%d&quot;, Lesson3_1.getNumberOfWheat(grid)));\n  end = System.currentTimeMillis();\n  System.out.println(String.format(&quot;耗时%d毫秒&quot;, (end - start)));\n  \n  start = System.currentTimeMillis();\n  System.out.println(String.format(&quot;舍罕王给了这么多粒：%d&quot;, (long)(Math.pow(2, grid)) - 1));\n  end = System.currentTimeMillis();\n  System.out.println(String.format(&quot;耗时%d毫秒&quot;, (end - start)));\n  \n }\n</code></pre><p>在我的电脑上，这段代码运行的结果是：舍罕王给了$9223372036854775807$粒，耗时$4$毫秒。舍罕王给了这么多粒：$9223372036854775806$，耗时$0$毫秒。</p><p>你可能已经发现，当grid=$63$时，结果差了$1$个。这个是由于Math.pow()函数计算精度导致的误差。正确的结果应该是$9223372036854775807$。不过，基于数学归纳结论的计算明显在耗时上占有优势。虽然在我的笔记本电脑上只有4毫秒的差距，但是在生产项目的实践中，这种点点滴滴的性能差距都有可能累积成明显的问题。</p><h2>递归调用和数学归纳的逻辑是一样的？</h2><p>我们不仅可以使用数学归纳法从理论上指导编程，还可以使用编程来模拟数学归纳法的证明。如果你仔细观察一下数学归纳法的证明过程，会不会觉得和函数的<strong>递归调用</strong>很像呢？</p><p>这里我通过总麦粒数的命题来示范一下。首先，我们要把这个命题的数学归纳证明，转换成一段伪代码，这个过程需要经过这样两步：</p><p>第一步，如果$n$为$1$，那么我们就判断麦粒总数是否为$2^{1-1}=1$。同时，返回当前棋格的麦粒数，以及从第$1$格到当前棋格的麦粒总数。</p><p>第二步，如果$n$为$k-1$的时候成立，那么判断$n$为$k$的时候是否也成立。此时的判断依赖于前一格$k-1$的麦粒数、第$1$格到$k-1$格的麦粒总数。这也是上一步我们所返回的两个值。</p><p>你应该看出来了，这两步分别对应了数学归纳法的两种情况。在数学归纳法的第二种情况下，我们只能假设$n=k-1$的时候命题成立。但是，在代码的实现中，我们可以将伪代码的第二步转为函数的递归（嵌套）调用，直到被调用的函数回退到$n=1$的情况。然后，被调用的函数逐步返回$k-1$时命题是否成立。</p><p>如果要写成具体的函数，就类似下面这样：</p><pre><code>class Result {\n public long wheatNum = 0;  // 当前格的麦粒数\n public long wheatTotalNum = 0;  // 目前为止麦粒的总数\n}\n\npublic class Lesson4_2 {\n \n /**\n    * @Description: 使用函数的递归（嵌套）调用，进行数学归纳法证明\n    * @param k-放到第几格，result-保存当前格子的麦粒数和麦粒总数\n    * @return boolean-放到第k格时是否成立\n    */\n \n    public static boolean prove(int k, Result result) {\n     \n     // 证明n = 1时，命题是否成立\n     if (k == 1) {\n      if ((Math.pow(2, 1) - 1) == 1) {\n       result.wheatNum = 1;\n       result.wheatTotalNum = 1;\n       return true;\n      } else return false;\n     }\n     // 如果n = (k-1)时命题成立，证明n = k时命题是否成立\n     else {\n      \n      boolean proveOfPreviousOne = prove(k - 1, result);\n      result.wheatNum *= 2;\n      result.wheatTotalNum += result.wheatNum;\n      boolean proveOfCurrentOne = false;\n      if (result.wheatTotalNum == (Math.pow(2, k) - 1)) proveOfCurrentOne = true; \n      \n      if (proveOfPreviousOne &amp;&amp; proveOfCurrentOne) return true;\n      else return false;\n      \n     }\n     \n    }\n\n}\n\n</code></pre><p>其中，类Result用于保留每一格的麦粒数，以及目前为止的麦粒总数。这个代码递归调用了函数prove(int, Result)。</p><p>从这个例子中，我们可以看出来，<strong>递归调用的代码和数学归纳法的逻辑是一致的</strong>。一旦你理解了数学归纳法，就很容易理解递归调用了。只要数学归纳证明的逻辑是对的，递归调用的逻辑就是对的，我们没有必要纠结递归函数是如何嵌套调用和返回的。</p><p>不过，和数学归纳证明稍有不同的是，递归编程的代码需要返回若干的变量，来传递$k-1$的状态到$k$。这里，我使用类Result来实现这一点。</p><p>这里是一段测试的代码。</p><pre><code>public static void main(String[] args) {\n  \n  int grid = 63;\n  \n  Result result = new Result();\n  System.out.println(Lesson4_2.prove(grid, result));\n  \n }\n\n</code></pre><p>我们最多测试到$63$。因为如果测试到第$64$格，麦粒总数就会溢出Java的long型数据。</p><p>你可以自己分析一下函数的调用和返回。我这里列出了一开始嵌套调用和到递归结束并开始返回值得的几个状态：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/2d/02dfa54d6968676b90ac757a0711342d.png?wh=2040*1864\" alt=\"\"></p><p>从这个图可以看出，函数从$k=63$开始调用，然后调用$k-1$，也就是$62$，一直到$k=1$的时候，嵌套调用结束，$k=1$的函数体开始返回值给$k=2$的函数体，一直到$k=63$的函数体。从$k=63, 62, …, 2, 1$的嵌套调用过程，其实就是体现了数学归纳法的核心思想，我把它称为<strong>逆向递推</strong>。而从$k=1, 2, …, 62, 63$的值返回过程，和上一篇中基于循环的迭代是一致的，我把它称为<strong>正向递推</strong>。</p><h2>小结</h2><p>今天，我介绍了一个编程中非常重要的数学概念：数学归纳法。</p><p>上一节我讲了迭代法是如何通过重复的步骤进行计算或者查询的。与此不同的是，数学归纳法在理论上证明了命题是否成立，而无需迭代那样反复计算，因此可以帮助我们节约大量的资源，并大幅地提升系统的性能。</p><p>数学归纳法实现的运行时间几乎为$0$。不过，数学归纳法需要我们能做出合理的命题假设，然后才能进行证明。虽然很多时候要做这点比较难，确实也没什么捷径。你就是要多做题，多去看别人是怎么解题的，自己去积累经验。</p><p>最后，我通过函数的递归调用，模拟了数学归纳法的证明过程。如果你细心的话，会发现递归的函数值返回实现了从$k=1$开始到$k=n$的迭代。说到这里，你可能会好奇：既然递归最后返回值的过程和基于循环的迭代是一致，那为什么还需要使用递归的方法呢？下一节，我们继续聊这个问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/81/0dc6eaf8597eccad3ee4411e14acf081.jpg?wh=1242*1646\" alt=\"\"></p><h2>思考题</h2><p>在你日常工作的项目中，什么地方用到了数学归纳法来提升代码的运行效率？如果没有遇到过，你可以尝试做做实验，看看是否有提升？</p><p><span class=\"orange\">欢迎在留言区交作业，并写下你今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p><p></p>","neighbors":{"left":{"article_title":"03 | 迭代法：不用编程语言的自带函数，你会如何计算平方根？","id":72243},"right":{"article_title":"05 | 递归（上）：泛化数学归纳，如何将复杂问题简单化？","id":73511}},"comments":[{"had_liked":false,"id":50941,"user_name":"oddrock","can_delete":false,"product_type":"c1","uid":1037506,"ip_address":"","ucode":"55BADA192250B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/c2/910d231e.jpg","comment_is_top":false,"comment_ctime":1545092313,"is_pvip":true,"replies":[{"id":"18319","content":"精辟的总结👍","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545095702,"ip_address":"","comment_id":50941,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1234200706265","product_id":100021201,"comment_content":"递归把计算交给计算机，归纳把计算交给人，前者是拿计算机的计算成本换人的时间，后者是拿人的时间换计算机的计算成本","like_count":288,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433193,"discussion_content":"精辟的总结👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545095702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1588588,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/6c/4b915556.jpg","nickname":"Soulic Yang","note":"","ucode":"BA6E2F25E025B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570860,"discussion_content":"归纳适合递归深度比较大的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651971391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1574450,"avatar":"https://static001.geekbang.org/account/avatar/00/18/06/32/3de6a189.jpg","nickname":"范","note":"","ucode":"D115514B2AA5CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334256,"discussion_content":"点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607780160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280751,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591608161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1973441,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/1c/c1/3ddfda62.jpg","nickname":"Billions","note":"","ucode":"627F6C07F32052","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263139,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589179074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50689,"user_name":"cafu_chino","can_delete":false,"product_type":"c1","uid":1351474,"ip_address":"","ucode":"0A808089A1F62F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epQyvB3NqlCWF0TG3BUYC0IicqRiaiaandYWtQuCb7JMv5z32jUOkWtgg2EVXsibOkibt2ckqG9MHsqQbA/132","comment_is_top":false,"comment_ctime":1545030070,"is_pvip":false,"replies":[{"id":"18296","content":"可以，后期会整理出来","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545059372,"ip_address":"","comment_id":50689,"utype":1}],"discussion_count":3,"race_medal":0,"score":"186228623798","product_id":100021201,"comment_content":"老师下次可以提供Python的代码示例吗？对Java的使用不是很熟练<br>","like_count":43,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433060,"discussion_content":"可以，后期会整理出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545059372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2062252,"avatar":"","nickname":"常振华","note":"","ucode":"D61B40E1CCEFD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308857,"discussion_content":"能用C或者C++的代码演示吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601099568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1805360,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/8c/30/dee65cf5.jpg","nickname":"沙","note":"","ucode":"5BA34327F5B8D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130988,"discussion_content":"我也是，一直用python","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578817306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50509,"user_name":"陈诚","can_delete":false,"product_type":"c1","uid":1338751,"ip_address":"","ucode":"138DD00D245FEE","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/7f/e1c189c7.jpg","comment_is_top":false,"comment_ctime":1545004514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108919186914","product_id":100021201,"comment_content":"个人觉得有时候虽然用迭代和递归都能解决问题，但是使用递归时，由于有数学归纳法保证递归关系的正确性，所以只要专注于解决2个相邻层的关系就可以了，然后使用数学归纳法的基本情况作为递归出口。当然，在实际编程中，递归会增加函数调用栈的开销，也是要考虑的一方面","like_count":25},{"had_liked":false,"id":50795,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1545047292,"is_pvip":false,"replies":[{"id":"18286","content":"这是个好建议，我先问下是否版权问题","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545058284,"ip_address":"","comment_id":50795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100329295100","product_id":100021201,"comment_content":"项目中还没碰到，但在以前做编程题时经常碰到找规律的问题，这时候只需抽象出一个公式即可。<br>另外可否给老师提个建议，就是在github上建一个仓库，这样我们可以fork下来，用自己熟悉的编程语言把老师讲的思路写进代码里push上去，方便大家相互学习 ^_^","like_count":23,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433107,"discussion_content":"这是个好建议，我先问下是否版权问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545058284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51368,"user_name":"陈诚","can_delete":false,"product_type":"c1","uid":1338751,"ip_address":"","ucode":"138DD00D245FEE","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/7f/e1c189c7.jpg","comment_is_top":false,"comment_ctime":1545179199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61674721343","product_id":100021201,"comment_content":"我觉得加深学习数学效果的方式，就是自己实现一遍，我这里用C语言实现了一下递归求麦粒总数的问题以求抛砖引玉<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>struct result {<br>\tlong cur_grid_wheat;<br>\tlong sum_of_wheat;<br>};<br><br>struct result wheat(int grid)<br>{<br>\tstruct result rst;<br><br>\tif (grid == 1) {<br>\t\trst.cur_grid_wheat = 1;<br>\t\trst.sum_of_wheat = 1;<br>\t} else {<br>\t\tstruct result last_rst;<br>\t\tlast_rst = wheat(grid - 1);<br>\t\trst.cur_grid_wheat = last_rst.cur_grid_wheat * 2;<br>\t\trst.sum_of_wheat = last_rst.sum_of_wheat + rst.cur_grid_wheat;<br>\t}<br><br>\treturn rst;<br>}<br><br>int main(int argc, char *argv[])<br>{<br>\tstruct result rst;<br>\tint grid_index = 0;<br><br>\tif (argc != 2) {<br>\t\tprintf(&quot;Usage: %s grid_index\\n&quot;, argv[0]);<br>\t\treturn -1;<br>\t}<br>\tgrid_index = atoi(argv[1]);<br><br>\trst = wheat(grid_index);<br><br>\tprintf(&quot;grid_index: %d\\ncur_grid_wheat: %ld\\nsum_of_wheat: %ld\\n&quot;,<br>\t\tgrid_index, rst.cur_grid_wheat, rst.sum_of_wheat);<br><br>\treturn 0;<br>}<br><br>","like_count":15},{"had_liked":false,"id":50622,"user_name":"mikukuma","can_delete":false,"product_type":"c1","uid":1180744,"ip_address":"","ucode":"516F66E5CF9A53","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/48/ef6082a5.jpg","comment_is_top":false,"comment_ctime":1545017354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61674559498","product_id":100021201,"comment_content":"数据归纳法通俗易懂的说法就是一个个经典的数学公式的证明。我们要去证明这个公式是否正确，需要根据两个步骤，1：n=1时，公式是否正确；2: 假设n = k-1成立，那么去证明n=k公式是成立的。就跟数学做证明题一样的思路。然后我们去做这些算法题的时候，就可以直接根据已经证明的公式，很快就能得到我们需要的答案。","like_count":15},{"had_liked":false,"id":97714,"user_name":"lkj","can_delete":false,"product_type":"c1","uid":1515939,"ip_address":"","ucode":"E6FE96407AF620","user_header":"https://static001.geekbang.org/account/avatar/00/17/21/a3/06291d0c.jpg","comment_is_top":false,"comment_ctime":1558752793,"is_pvip":false,"replies":[{"id":"34990","content":"是的👌","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1558815975,"ip_address":"","comment_id":97714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44508425753","product_id":100021201,"comment_content":"递归还有一个就是搜索目录文件，编程递归第一个练习就是这个<br>递归过程判断事目录还是文件，目录就继续递归，文件就根据缩进打印，最终打印出目录结构","like_count":10,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451382,"discussion_content":"是的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558815975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61980,"user_name":"予悠悠","can_delete":false,"product_type":"c1","uid":1211755,"ip_address":"","ucode":"93D785F354E225","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/6b/648c30bc.jpg","comment_is_top":false,"comment_ctime":1547870848,"is_pvip":false,"replies":[{"id":"21969","content":"好，后面会加注，感谢建议","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547927618,"ip_address":"","comment_id":61980,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44497543808","product_id":100021201,"comment_content":"可以给老师提个建议吗？课程里提到的关键概念可不可以加上英文名呢？例如这篇里提到的迭代，递归，正向递推，逆向递推","like_count":10,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437061,"discussion_content":"好，后面会加注，感谢建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547927618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51764,"user_name":"鱼鱼鱼培填","can_delete":false,"product_type":"c1","uid":1195489,"ip_address":"","ucode":"5D99ED5A01AB3D","user_header":"https://static001.geekbang.org/account/avatar/00/12/3d/e1/5279ea2f.jpg","comment_is_top":false,"comment_ctime":1545233700,"is_pvip":false,"replies":[{"id":"18752","content":"研究了细节，很赞👍","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545240277,"ip_address":"","comment_id":51764,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35904972068","product_id":100021201,"comment_content":"用Python实现数学归纳法，一开始使用math.pow()函数发现不对，Python中该函数会使用科学技术法导致结果出错<br>#-*- coding:UTF-8 -*-<br>class result(object):<br>\twheatNum = 0<br>\twheatTotalNum = 0<br><br>class getWheatTotalNum(object):<br>\t&#39;&#39;&#39;<br>\t函数说明：使用递归嵌套， 进行数学归纳法证明<br>\tParam： k - 表示放到第几格   result - 表示当前格子的麦粒数<br>\tReturn: boolean - 放到第K格时是否成立<br>\t&#39;&#39;&#39;<br>\tdef prove(self, k, result):<br>\t\tif k == 1:<br>\t\t\tif (2 ** 1 - 1) == 1:<br>\t\t\t\tresult.wheatNum = 1<br>\t\t\t\tresult.wheatTotalNum = 1<br>\t\t\t\treturn True<br>\t\t\telse:<br>\t\t\t\treturn False <br><br>\t\telse:<br>\t\t\tproveOfPreviousOne = self.prove(k - 1, result)<br>\t\t\tresult.wheatNum *= 2<br>\t\t\tresult.wheatTotalNum += result.wheatNum<br>\t\t\tproveOfCurrentOne = False<br>\t\t\tif result.wheatTotalNum == (2 ** k - 1):<br>\t\t\t\tproveOfCurrentOne = True<br>\t\t\tif (proveOfPreviousOne &amp; proveOfCurrentOne):<br>\t\t\t\treturn True<br>\t\t\telse:<br>\t\t\t\treturn False<br><br><br>if __name__ == &#39;__main__&#39;:<br>\tgrid = 64<br>\tresult = result()<br>\tg = getWheatTotalNum()<br>\tprint(g.prove(grid, result))","like_count":8,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433611,"discussion_content":"研究了细节，很赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545240277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1529235,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/icniaGmw8xiboxib5xa1RSNvRDX1yVQTrcSqVOlJPibt0A6SM7EnFTHa6ib0YQKSUPqtx7wVksxZZXK4huUpCqrKjT1w/132","nickname":"puhan","note":"","ucode":"50746E9A4990A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5159,"discussion_content":"为什么科学计数法就会导致出错呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566014071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50700,"user_name":"田野","can_delete":false,"product_type":"c1","uid":1085816,"ip_address":"","ucode":"4F4E036656B184","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/78/ccd75c94.jpg","comment_is_top":false,"comment_ctime":1545031559,"is_pvip":false,"replies":[{"id":"18295","content":"是的，特别是递归的实现比较耗资源","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545059352,"ip_address":"","comment_id":50700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35904769927","product_id":100021201,"comment_content":"关于这节课讲的内容在编程中具体的应用能这样理解不？  迭代法在实际应用中，如果迭代层次过深 ，会导致各种问题(耗时\\内存占用等) ，遇到这种情况可以总结规律， 使用数学归纳法将其简化。(代码中不再使用迭代 使用数学归纳总结出来的结果)","like_count":8,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433066,"discussion_content":"是的，特别是递归的实现比较耗资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545059352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50501,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1545002862,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31609773934","product_id":100021201,"comment_content":"个人觉得动态规划就是归纳法思想的处理，一个问题分解为多个字问题的最优解","like_count":7,"discussions":[{"author":{"id":1252235,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/8b/ca59be30.jpg","nickname":"向阳生","note":"","ucode":"C2E9E463CA9B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378145,"discussion_content":"感觉哪里都有您，厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623069619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53448,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1181098,"ip_address":"","ucode":"73D2287552B17B","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/aa/cc1dd8de.jpg","comment_is_top":false,"comment_ctime":1545646419,"is_pvip":false,"replies":[{"id":"19434","content":"你是说高斯的故事吧😀","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545687490,"ip_address":"","comment_id":53448,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27315450195","product_id":100021201,"comment_content":"想起罗斯的故事，1-100 的所有数求和，罗斯的方法就是数学归纳法的简单应用。平时还没有需要用到归纳法，递归方法也很少用。","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434141,"discussion_content":"你是说高斯的故事吧😀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1545687490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50505,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1545003673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27314807449","product_id":100021201,"comment_content":"老师我感觉递归和归纳法还是有些区别的, 递归是自顶向下的拆解问题, 直到终止条件后再一层层返回结果, 但是归纳法好像没有自顶向下拆解问题的这个环节.","like_count":6},{"had_liked":false,"id":51957,"user_name":"大鱼","can_delete":false,"product_type":"c1","uid":1352665,"ip_address":"","ucode":"1418EE18C4BDD4","user_header":"","comment_is_top":false,"comment_ctime":1545281779,"is_pvip":false,"replies":[{"id":"18921","content":"代码非常简洁👍","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545318651,"ip_address":"","comment_id":51957,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18725150963","product_id":100021201,"comment_content":"def get_result(n):<br>    &quot;&quot;&quot;<br>    :param n: n 为实际的格子数  <br>    &quot;&quot;&quot;<br>    return 1 if n == 1 else get_result(n - 1) * 2 + 1<br><br>差不多一行代码可以解决这个问题","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433680,"discussion_content":"代码非常简洁👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545318651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195874,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1585220533,"is_pvip":true,"replies":[{"id":"74500","content":"总结的非常形象和生动，赞一个","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585339472,"ip_address":"","comment_id":195874,"utype":1}],"discussion_count":1,"race_medal":5,"score":"14470122421","product_id":100021201,"comment_content":"茶艺师学编程<br><br>大家都知道，好的普洱茶都特点是“苦能回甘，涩能生津。”，这由多少位茶人实践，再经过口口相传，归纳出来的一点经验。<br><br>而数学归纳法，基于数学的形状，它把基于人的经验的归纳的靠谱程度提升了好几个数量级。<br><br>再结合计算机的递归实现数学归纳法，实现了有效分工（人提供灵感，计算机负责验证），极大的提升了效率（优秀的程序员必备素养）。<br><br>纵观整个归纳法的“升级过程”，也呈现了人类善于使用工具解决问题的特点（眼睛——&gt;数学——&gt;计算）。","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489176,"discussion_content":"总结的非常形象和生动，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585339472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57154,"user_name":"艾格北峰","can_delete":false,"product_type":"c1","uid":1346021,"ip_address":"","ucode":"81B3C1426C431A","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/e5/2219d26f.jpg","comment_is_top":false,"comment_ctime":1546663759,"is_pvip":false,"replies":[{"id":"20647","content":"这门课主要是讲数学的思想，代码仅供参考，后面我会补上其他语言的实现","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546716506,"ip_address":"","comment_id":57154,"utype":1}],"discussion_count":1,"race_medal":1,"score":"14431565647","product_id":100021201,"comment_content":"有没有C的代码演示，没学过java,之前报名也没说是用java演示","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435433,"discussion_content":"这门课主要是讲数学的思想，代码仅供参考，后面我会补上其他语言的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546716506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55162,"user_name":"microsnow","can_delete":false,"product_type":"c1","uid":1121444,"ip_address":"","ucode":"3C24EE8D64E5E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/a4/3a7a0213.jpg","comment_is_top":false,"comment_ctime":1546053630,"is_pvip":false,"replies":[{"id":"20064","content":"我对php语言不熟悉，你能否贴一下运行的结果？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546210451,"ip_address":"","comment_id":55162,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14430955518","product_id":100021201,"comment_content":"&lt;?php<br><br>class Result <br>{<br>    public $wheatNum = 0;<br>    public $wheatTotalNum = 0;<br>}<br><br>class Lession4_2 <br>{<br><br>    public $result = NULL;<br><br>    public function __construct()<br>    {<br>        $this-&gt;result = new Result();<br>    }<br><br>    public function getResult()<br>    {<br>        return $this-&gt;result;<br>    }<br><br>    public function prove($n)<br>    {<br>        if ($n == 1) {<br>            if ((pow(2, 1) - 1) == 1) {<br>                $this-&gt;result-&gt;wheatNum  = 1;<br>                $this-&gt;result-&gt;wheatTotalNum = 1;<br>                return true;<br>            } else {<br>                return false;<br>            }<br>        } else {<br>            $proveOfPreviousOne = $this-&gt;prove($n - 1);<br>            $this-&gt;result-&gt;wheatNum *= 2;<br>            $this-&gt;result-&gt;wheatTotalNum += $this-&gt;result-&gt;wheatNum;<br>            $proveOfCurrentOne = false;<br>            if ($this-&gt;result-&gt;wheatTotalNum == (pow(2, $n) - 1)) $proveOfCurrentOne = true;<br>            if ($proveOfCurrentOne &amp;&amp; $proveOfPreviousOne) {<br>                return true;<br>            } else {<br>                return false;<br>            }<br>        }<br>    }<br>}<br><br>$a = new Lession4_2();<br>$result = $a-&gt;prove(13);<br>$result = $a-&gt;getResult();","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434686,"discussion_content":"我对php语言不熟悉，你能否贴一下运行的结果？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546210451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34410,"discussion_content":"D:\\wamp64\\www\\powProve.php:52:\nobject(Result)[2]\n  public &#39;wheatNum&#39; => int 4096\n  public &#39;wheatTotalNum&#39; => int 8191\n\n下面是执行$result = $a->prove(64);的结果\nD:\\wamp64\\www\\powProve.php:52:\nobject(Result)[2]\n  public &#39;wheatNum&#39; => float 9.2233720368548E+18\n  public &#39;wheatTotalNum&#39; => float 1.844674407371E+19\n\n可使用在线代码执行工具：\nhttp://www.dooccn.com/php7/\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571197396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50944,"user_name":"瘦马","can_delete":false,"product_type":"c1","uid":1344216,"ip_address":"","ucode":"D1D6E62DD23652","user_header":"https://static001.geekbang.org/account/avatar/00/14/82/d8/1df27da4.jpg","comment_is_top":false,"comment_ctime":1545092662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14429994550","product_id":100021201,"comment_content":"数学归纳法：一、证明n=1时，成立；二、假设n=k-1时成立，证明n=k时，成立。","like_count":3},{"had_liked":false,"id":50526,"user_name":"未明。","can_delete":false,"product_type":"c1","uid":1338131,"ip_address":"","ucode":"782AE29172F2AE","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/13/683b4c5e.jpg","comment_is_top":false,"comment_ctime":1545007050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14429908938","product_id":100021201,"comment_content":"数字全变成了math_progress_error了","like_count":3},{"had_liked":false,"id":245158,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1598849134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188783726","product_id":100021201,"comment_content":"看了留言，对于递归和归纳法是有区别的，递归是一层层调用去计算，归纳法是已知规律可以直接去用公式套用，已经证明了这个公式是成立的。","like_count":2},{"had_liked":false,"id":232447,"user_name":"HF","can_delete":false,"product_type":"c1","uid":1060150,"ip_address":"","ucode":"EA504931C0B932","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/36/d3c8d272.jpg","comment_is_top":false,"comment_ctime":1594005745,"is_pvip":false,"replies":[{"id":"86114","content":"没错","user_name":"作者回复","comment_id":232447,"uid":"1275061","ip_address":"","utype":1,"ctime":1594311967,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"10183940337","product_id":100021201,"comment_content":"迭代是一步步逻辑推理，归纳是得出一个计算规则，可以直接计算。计算效率优于推理","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500649,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594311967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165294,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1577194957,"is_pvip":true,"replies":[{"id":"65017","content":"有编译器优化的可能，确实不能只看运行时间来判断","user_name":"作者回复","comment_id":165294,"uid":"1275061","ip_address":"","utype":1,"ctime":1577840546,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":2,"score":"10167129549","product_id":100021201,"comment_content":"<br>在日常工作的项目中，应该也是无意识的用到数学归纳法，比如使用类似于高斯求和，或者其他的已知数学公式，然后避免了繁琐的计算或者递推。<br><br>归纳法的难点在于如何找到正确的那个公式，而且不像上一节课讲到的迭代法那样，逐渐逼近，找到近似解。<br><br>递归法在递归控制的部分有时候比较难以直观的想象，更多的像是智力游戏，偶尔还会出现因为递归结束条件设置不当，而导致死循环或溢出。<br><br>另一方面，计算机在进行递归的时候，可能会消耗掉大量的存储资源，去缓存中间结果。当然，也可以采用人工干预的办法，缓存中间结果，减少递归次数，记得在优化斐波那切数列计算的时候使用过。<br><br>在留言里面，@大秦岭 提到了一个奇怪的现象，就是课程中的第一段代码，如果把两个用来比较的程序段落，颠倒过来，那么就会得到相反的结果，就是会出现使用归纳法比迭代法更慢，而且似乎差距也是 16:1，我觉的可能是因为计算机缓存的缘故，原有代码中计算程序耗时的部分可能不是很精细。<br><br>我试着换用另一组开始时间和结束时间的变量，比如 st 和 en，这样可以减少在对象实例化时候造成的时间误差，结果是两个结果几乎一样 15:15。我估计这个时间应该是对象初始化时间，而不是计算的时间，话说计算 2 的 63 次方，对计算机来说还是太小了。<br><br>我用的是 15 年的 Mac Pro，性能应该不算太好。<br><br>另外一个有意思的事情，@行者 发现在 Python 中调用 pow( ) 函数，在 grid = 53 的时候遇到了可能是 递归深度超出限制的错误；而  @鱼鱼鱼培填 给出了使用计算方式实现的代码。<br><br>更进一步，使用 Java 实现的时候，计算到 grid = 64 就溢出了，而 Python 似乎没有这个限制。我使用 @鱼鱼鱼培填 相似的代码证明到了 999，如果是 1000 的话，同样会遇到 maximum recursion depth exceeded <br><br>没有再深入研究下去，有兴趣的同学可以尝试一下。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479110,"discussion_content":"有编译器优化的可能，确实不能只看运行时间来判断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577840546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53620,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1545701700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135636292","product_id":100021201,"comment_content":"每节课后可以多留一些编程题，每节课就2个例子感觉不过瘾！","like_count":2},{"had_liked":false,"id":53596,"user_name":"小敏的梦呓","can_delete":false,"product_type":"c1","uid":1340263,"ip_address":"","ucode":"9D68990268AFD2","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/67/9250035c.jpg","comment_is_top":false,"comment_ctime":1545699271,"is_pvip":false,"replies":[{"id":"19498","content":"这里你说的“有一些程序我们自己归纳出了规律”，具体是指什么？","user_name":"作者回复","comment_id":53596,"uid":"1275061","ip_address":"","utype":1,"ctime":1545716921,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"10135633863","product_id":100021201,"comment_content":"老师您好！如果有一些程序我们自己归纳出了规矩，那如何快速的应用到程序中呢，还是说程序中本身就有一些函数就是归纳法的体现？","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434196,"discussion_content":"这里你说的“有一些程序我们自己归纳出了规律”，具体是指什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545716921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51823,"user_name":"zack","can_delete":false,"product_type":"c1","uid":1061161,"ip_address":"","ucode":"DC5E2354E0EC78","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/29/44b9e36a.jpg","comment_is_top":false,"comment_ctime":1545267455,"is_pvip":false,"replies":[{"id":"18796","content":"请问具体是哪个数据格式？","user_name":"作者回复","comment_id":51823,"uid":"1275061","ip_address":"","utype":1,"ctime":1545275875,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"10135202047","product_id":100021201,"comment_content":"数据格式有问题 不知道是老师写错了还是给出了不兼容格式","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433634,"discussion_content":"请问具体是哪个数据格式？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545275875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51662,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1545219268,"is_pvip":false,"replies":[{"id":"18733","content":"后面会结合更多实际的项目。至于你说的库函数，具体是指哪方面？能否举个例子？","user_name":"作者回复","comment_id":51662,"uid":"1275061","ip_address":"","utype":1,"ctime":1545231097,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"10135153860","product_id":100021201,"comment_content":"老师，您讲这些数学知识的时候能不能更加深入一点，最好能够结合工程项目或者一些著名的库函数呢？","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433558,"discussion_content":"后面会结合更多实际的项目。至于你说的库函数，具体是指哪方面？能否举个例子？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545231097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51579,"user_name":"宋冉","can_delete":false,"product_type":"c1","uid":1349054,"ip_address":"","ucode":"2A9A5BCB5BB9AD","user_header":"https://static001.geekbang.org/account/avatar/00/14/95/be/044241c6.jpg","comment_is_top":false,"comment_ctime":1545203159,"is_pvip":false,"replies":[{"id":"18732","content":"嗯 如果对结论熟悉了就不用证明了","user_name":"作者回复","comment_id":51579,"uid":"1275061","ip_address":"","utype":1,"ctime":1545231006,"user_name_real":"Sean"}],"discussion_count":2,"race_medal":0,"score":"10135137751","product_id":100021201,"comment_content":"不用假设吧，等比数列前n项求和就是2^n-1啊","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433521,"discussion_content":"嗯 如果对结论熟悉了就不用证明了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545231006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597883,"avatar":"https://static001.geekbang.org/account/avatar/00/18/61/bb/afaf95fb.jpg","nickname":"光照先知","note":"","ucode":"2335EFC496E5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390979,"discussion_content":"其实是要问，假设等比数列前n项求和公式还没被发现的情况下，我怎么思考，解决这个问题。这个思考的过程才是精华。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630208411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51117,"user_name":"笔下文研","can_delete":false,"product_type":"c1","uid":1340242,"ip_address":"","ucode":"BE19C6816F293E","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/52/d66ce1c6.jpg","comment_is_top":false,"comment_ctime":1545116866,"is_pvip":true,"replies":[{"id":"18507","content":"是的，更重要的是可以将这些数学思维和编程相结合","user_name":"作者回复","comment_id":51117,"uid":"1275061","ip_address":"","utype":1,"ctime":1545146708,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"10135051458","product_id":100021201,"comment_content":"老师，学完这个栏目，在去加深学习数学书本是不是比较容易一些。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433294,"discussion_content":"是的，更重要的是可以将这些数学思维和编程相结合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545146708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50659,"user_name":"吾本糊涂","can_delete":false,"product_type":"c1","uid":1346999,"ip_address":"","ucode":"33839747313030","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/b7/326a90c4.jpg","comment_is_top":false,"comment_ctime":1545025975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10134960567","product_id":100021201,"comment_content":"python中计算n的阶乘<br>def func(n):<br>　　if n == 0:<br>　　　　return 1<br>　　else:<br>　　　　return n * func(n-1)<br><br>n! = func(n)<br>Python3默认递归的深度不能超过100层<br> ","like_count":2},{"had_liked":false,"id":227605,"user_name":"洁","can_delete":false,"product_type":"c1","uid":1992030,"ip_address":"","ucode":"425AC36480FC14","user_header":"https://static001.geekbang.org/account/avatar/00/1e/65/5e/08765e51.jpg","comment_is_top":false,"comment_ctime":1592441952,"is_pvip":false,"replies":[{"id":"84222","content":"是的，不过通常操作系统每次只读取下一级目录，不会遍历完，这样能节约时间","user_name":"作者回复","comment_id":227605,"uid":"1275061","ip_address":"","utype":1,"ctime":1592669779,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"5887409248","product_id":100021201,"comment_content":"树型控件获取当前节点和它所有下级节点时会用到","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498714,"discussion_content":"是的，不过通常操作系统每次只读取下一级目录，不会遍历完，这样能节约时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592669779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167126,"user_name":"隔离样","can_delete":false,"product_type":"c1","uid":1183002,"ip_address":"","ucode":"34BC6CED888FFB","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/1a/2c364284.jpg","comment_is_top":false,"comment_ctime":1577696394,"is_pvip":false,"replies":[{"id":"65000","content":"没错👍","user_name":"作者回复","comment_id":167126,"uid":"1275061","ip_address":"","utype":1,"ctime":1577813346,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"5872663690","product_id":100021201,"comment_content":"棋盘那个其实每个格子都是一位二进制，最后就是11111111…111，64个，加个1变1000000…00，一下就出来了","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479754,"discussion_content":"没错👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577813346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65258,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1549165986,"is_pvip":false,"replies":[{"id":"23166","content":"对的，这就是递归的思想","user_name":"作者回复","comment_id":65258,"uid":"1275061","ip_address":"","utype":1,"ctime":1549214518,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"5844133282","product_id":100021201,"comment_content":"清理服务器的文件夹（包括文件），清理文件夹里的文件夹（包括文件）...<br>～(￣▽￣～)~","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438377,"discussion_content":"对的，这就是递归的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549214518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64834,"user_name":"sloth-yp","can_delete":false,"product_type":"c1","uid":1237585,"ip_address":"","ucode":"41F02F0342BB82","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEK9ZoMKs1BEt7tOVAsk8Jqmg64kyYF9VIHN7oHjVRPj2YqKM4uoSuQ6uKgcsSziba6Xz4gM3aM96FA/132","comment_is_top":false,"comment_ctime":1548921840,"is_pvip":false,"replies":[{"id":"22997","content":"是的","user_name":"作者回复","comment_id":64834,"uid":"1275061","ip_address":"","utype":1,"ctime":1548955989,"user_name_real":"黄申"}],"discussion_count":1,"race_medal":0,"score":"5843889136","product_id":100021201,"comment_content":"个人理解： 计算机实现递归的过程，其实还是一层层迭代。本文是利用了计算机的递归调用的方式，来证明了舍罕王这个特定问题中，用“数学归纳法”得出的公式的正确性。但是编程实践中，应该尽可能用数学归纳法来总结出简化的算法，来节约计算机的资源。","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438198,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548955989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55808,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1364703,"ip_address":"","ucode":"EF25E67B261553","user_header":"https://static001.geekbang.org/account/avatar/00/14/d2/df/48378afe.jpg","comment_is_top":false,"comment_ctime":1546313714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5841281010","product_id":100021201,"comment_content":"老师您好，我是前面提交python版本实现的学生。程序运行没有保存，只是证明结果出错，也就是false","like_count":1},{"had_liked":false,"id":55524,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1364703,"ip_address":"","ucode":"EF25E67B261553","user_header":"https://static001.geekbang.org/account/avatar/00/14/d2/df/48378afe.jpg","comment_is_top":false,"comment_ctime":1546223351,"is_pvip":false,"replies":[{"id":"20102","content":"报的什么错？","user_name":"作者回复","comment_id":55524,"uid":"1275061","ip_address":"","utype":1,"ctime":1546313045,"user_name_real":"黄申"}],"discussion_count":2,"race_medal":0,"score":"5841190647","product_id":100021201,"comment_content":"按照同样的逻辑用python实现了一下，测试到54就不行了，不知道是啥原因？<br>代码：<br>class Result:<br>    current_wheat = 1<br>    total_wheat = 1<br><br>def prove(k, result):<br>    if k == 1:<br>        if (math.pow(2,1) - 1) == 1:<br>            return True<br>        else:<br>            return False<br>    else:<br>        prove1 = prove(k - 1, result)<br>        result.current_wheat *= 2<br>        result.total_wheat += result.current_wheat<br>        prove2 = False<br>        if (math.pow(2, k) - 1) == result.total_wheat:<br>            prove2 = True<br>        if prove1 &amp; prove2:<br>            return True   <br>        else:<br>            return False<br> <br>sult = Result()<br>prove(53, sult)","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434792,"discussion_content":"报的什么错？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546313045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2173941,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epL4R8NINtr4W59s8vPQHaWXfKsCjNVsicibOQ2y9FEgoPRFmWBweHTAshoO648EdfEbxia18jm2goyA/132","nickname":"Geek_43f644","note":"","ucode":"24AF5B9BFC0616","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306076,"discussion_content":"怕是版本问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600162122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50979,"user_name":"梓航(﹏)","can_delete":false,"product_type":"c1","uid":1027773,"ip_address":"","ucode":"8ECA3C994D697C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/bd/d12f8907.jpg","comment_is_top":false,"comment_ctime":1545095905,"is_pvip":true,"replies":[{"id":"18320","content":"每周三篇哈","user_name":"编辑回复","comment_id":50979,"uid":"1000473","ip_address":"","utype":2,"ctime":1545096917,"user_name_real":"郭蕾"}],"discussion_count":1,"race_medal":0,"score":"5840063201","product_id":100021201,"comment_content":"更新好慢呐，快点吧，我等的花儿都谢了","like_count":1,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433212,"discussion_content":"每周三篇哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545096917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50971,"user_name":"阿猫","can_delete":false,"product_type":"c1","uid":1314206,"ip_address":"","ucode":"4B8145CD28C839","user_header":"https://static001.geekbang.org/account/avatar/00/14/0d/9e/f22e1c28.jpg","comment_is_top":false,"comment_ctime":1545094803,"is_pvip":false,"replies":[{"id":"18318","content":"嗯，可以使用栈来实现递归","user_name":"作者回复","comment_id":50971,"uid":"1275061","ip_address":"","utype":1,"ctime":1545095623,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"5840062099","product_id":100021201,"comment_content":"递归时，如果担心爆栈，可以自己创建个栈来用，只是内存多一点","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433206,"discussion_content":"嗯，可以使用栈来实现递归","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545095623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50956,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1545093403,"is_pvip":false,"replies":[{"id":"18388","content":"某些场合下适合用动态规划找一个最优解","user_name":"作者回复","comment_id":50956,"uid":"1275061","ip_address":"","utype":1,"ctime":1545112571,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"5840060699","product_id":100021201,"comment_content":"1递归来证明数学归纳法的论断是正确的？任意n值都符合预期结果，并非要求每一个最终的结果。2 实际工作中没有用数学归纳法来处理过，不过一般发现有人用递归我会评估是否可改用动态规划并安排调整","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433199,"discussion_content":"某些场合下适合用动态规划找一个最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545112571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50844,"user_name":"Z冰红茶","can_delete":false,"product_type":"c1","uid":1237132,"ip_address":"","ucode":"8CAE9E0269882B","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/8c/edad0017.jpg","comment_is_top":false,"comment_ctime":1545054003,"is_pvip":false,"replies":[{"id":"18291","content":"是的，非常典型的数学归纳法","user_name":"作者回复","comment_id":50844,"uid":"1275061","ip_address":"","utype":1,"ctime":1545058810,"user_name_real":"Sean"}],"discussion_count":1,"race_medal":0,"score":"5840021299","product_id":100021201,"comment_content":"高斯算法算吗","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433139,"discussion_content":"是的，非常典型的数学归纳法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545058810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358117,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663918842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663918842","product_id":100021201,"comment_content":"数学归纳提升代码的运行效率","like_count":0},{"had_liked":false,"id":358116,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663918835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663918835","product_id":100021201,"comment_content":"数学归纳提升代码的运行效率","like_count":0},{"had_liked":false,"id":348746,"user_name":"Spring coming","can_delete":false,"product_type":"c1","uid":1116196,"ip_address":"","ucode":"9E01F2D987D08B","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/24/1d3bafaf.jpg","comment_is_top":false,"comment_ctime":1655365039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655365039","product_id":100021201,"comment_content":"看到@大鱼分享的代码, 思路确实很好, 引发了我的一些思考. 分享一下:<br>他实现方式换成java的形式如下  <br>public static long getNumberOfWheat(int grid) {<br>  if (grid == 1) {<br>    return 1;<br>  } else {<br>    return getNumberOfWheat(grid-1) * 2 + 1;<br>  }<br>}<br><br>提出递推公式: <br>  s(k)为前k个棋格麦的总数<br><br>s(k) = 1 (k=1时成立)<br>s(k) = 2*s(k-1) + 1; (k&gt;1时成立)<br><br>证明这个公式时正确的:<br><br>已经知道(老师已经证明): <br>s(k) = 2^k - 1<br><br>代入递推公式看等式左右两边是否成立:<br>2^k - 1  = 2*(2^(k-1)-1)  +1 = 2^k -2+1 = 2^k -1<br><br>递推公式成立!<br><br>至于想到递推公式的过程, 我想应该是首选判定求的是麦粒的总数, 因此递推公式应该是s(k)相关的, 要想递推公式能够进行下去, 一定是和s(k-1)直接存在某种关系, 根据已经归纳出 s(k) = 2^k -1 , 找到了s(k)和s(k-1)的关系. <br>","like_count":0},{"had_liked":false,"id":342803,"user_name":"早八很难不迟到","can_delete":false,"product_type":"c1","uid":2617586,"ip_address":"","ucode":"10116FDC6138EF","user_header":"https://static001.geekbang.org/account/avatar/00/27/f0/f2/d8624dce.jpg","comment_is_top":false,"comment_ctime":1650468310,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650468310","product_id":100021201,"comment_content":"迭代是一步步逻辑推理的过程，从初始解不断更新到最优解，计算机帮我们完成了重复计算的功能；而归纳是得出一个计算规则，可以直接用于计算，相当于是利用人类的智慧解放了重复计算的劳动力。","like_count":0},{"had_liked":false,"id":309516,"user_name":"光照先知","can_delete":false,"product_type":"c1","uid":1597883,"ip_address":"","ucode":"2335EFC496E5C8","user_header":"https://static001.geekbang.org/account/avatar/00/18/61/bb/afaf95fb.jpg","comment_is_top":false,"comment_ctime":1630207643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630207643","product_id":100021201,"comment_content":"递归和数学归纳虽然逻辑上一致，但递归终究证明的还是有限步骤成立，与数学证明还是不一样的吧。","like_count":0},{"had_liked":false,"id":306032,"user_name":"平凡","can_delete":false,"product_type":"c1","uid":2625714,"ip_address":"","ucode":"6CE373406F9B24","user_header":"https://static001.geekbang.org/account/avatar/00/28/10/b2/94dfe62e.jpg","comment_is_top":false,"comment_ctime":1628308057,"is_pvip":false,"replies":[{"id":"111217","content":"很好的建议，最近基于本专栏的新书《程序员的数学基础课-从理论到Python实践》已经由人邮出版社出版，您可以关注一下","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1628889260,"ip_address":"","comment_id":306032,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628308057","product_id":100021201,"comment_content":"作者 可以用Python 来实现代码， 这样就可以在线运行 了 ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524601,"discussion_content":"很好的建议，最近基于本专栏的新书《程序员的数学基础课-从理论到Python实践》已经由人邮出版社出版，您可以关注一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628889260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306029,"user_name":"平凡","can_delete":false,"product_type":"c1","uid":2625714,"ip_address":"","ucode":"6CE373406F9B24","user_header":"https://static001.geekbang.org/account/avatar/00/28/10/b2/94dfe62e.jpg","comment_is_top":false,"comment_ctime":1628307498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628307498","product_id":100021201,"comment_content":"作者可不可以详细的讲下数学归纳的思想，感觉步子有点大了 对于我这种数学渣渣来说","like_count":0},{"had_liked":false,"id":299697,"user_name":"立仔","can_delete":false,"product_type":"c1","uid":1006027,"ip_address":"","ucode":"38885BA7B203BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/cb/43124a2d.jpg","comment_is_top":false,"comment_ctime":1624803565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624803565","product_id":100021201,"comment_content":"数学归纳法后应该就会有个 计算公式了吧，直接用计算公式 一步到位算出结果。无需一步步再迭代计算，性能好太多","like_count":0},{"had_liked":false,"id":290461,"user_name":"起风了001","can_delete":false,"product_type":"c1","uid":1529929,"ip_address":"","ucode":"8DCDBA40B8CC9F","user_header":"","comment_is_top":false,"comment_ctime":1619575136,"is_pvip":false,"replies":[{"id":"105391","content":"对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1619809854,"ip_address":"","comment_id":290461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619575136","product_id":100021201,"comment_content":"数学归纳法也不一定非得是递归的形式表达. 也可以是迭代的方式, 证明n=1成立, n=m成立, n=m+1成立, 这样就可以证明公式成立.","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519210,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619809854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290456,"user_name":"起风了001","can_delete":false,"product_type":"c1","uid":1529929,"ip_address":"","ucode":"8DCDBA40B8CC9F","user_header":"","comment_is_top":false,"comment_ctime":1619573748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619573748","product_id":100021201,"comment_content":"感觉写的不好理解. 为什么假设n=k−1 成立时，再证明 n=k 也是成立的, 这样就整个公式都成立了呢?","like_count":0},{"had_liked":false,"id":279297,"user_name":"Geek_3e4f89","can_delete":false,"product_type":"c1","uid":1225737,"ip_address":"","ucode":"49197C3CAF8B7D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/09/768af959.jpg","comment_is_top":false,"comment_ctime":1613712086,"is_pvip":false,"replies":[{"id":"101510","content":"理论上都是可以的，可是很多时候是很低效的，也没有必要","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1613776418,"ip_address":"","comment_id":279297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613712086","product_id":100021201,"comment_content":"老师请问，“任何的递归调用都可以转换为迭代。”这个正确吗？  有没有什么算法是只能用递归写的，迭代写不出来的。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515698,"discussion_content":"理论上都是可以的，可是很多时候是很低效的，也没有必要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613776418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274478,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1611034621,"is_pvip":true,"replies":[{"id":"99841","content":"很好的总结","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1611349295,"ip_address":"","comment_id":274478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611034621","product_id":100021201,"comment_content":"要应用数学归纳法来实现新算法，关键是它得有数学证明，如果经过严格数学证明，那计算肯定没错。学好数学，多掌握些数学模型，可以大幅改进算法性能。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514028,"discussion_content":"很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611349295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272256,"user_name":"野心永恒","can_delete":false,"product_type":"c1","uid":1917410,"ip_address":"","ucode":"8388247629D8D9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqE3qmzyqCo7pAkcCwvlj2OJMAXa1HuM4KkqwWAwgXIjBgwLkRzNSc4iaUd31v410QibAPX4PBXpfWQ/132","comment_is_top":false,"comment_ctime":1610007941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610007941","product_id":100021201,"comment_content":"    public static long getNumberOfWheat2(int grid){<br>        return (1L &lt;&lt; (grid)) - 1;<br>    }<br>这样效率应该是最高的吧，用位移进行运算","like_count":0},{"had_liked":false,"id":264215,"user_name":"聪明的竹子","can_delete":false,"product_type":"c1","uid":1942565,"ip_address":"","ucode":"1CF4BA4CBCD8BB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/a4/25/41d2541c.jpg","comment_is_top":false,"comment_ctime":1606381611,"is_pvip":false,"replies":[{"id":"96731","content":"数学归纳法的假设需要一些经验和直觉，确实第一个发现这个规律的人很了不起，我们只是站在巨人的肩膀上","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1607280869,"ip_address":"","comment_id":264215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606381611","product_id":100021201,"comment_content":"根据这个观察，我们是不是可以大胆假设，前 n 个格子的麦粒总数就是 2n−1 呢？如果这个假设成立，那么填满 64 格需要的麦粒总数，就是 1+2+22+23+24+……＋263＝264−1＝18446744073709551615。<br><br>我想问，你这个假设的结果是怎么来的","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510467,"discussion_content":"数学归纳法的假设需要一些经验和直觉，确实第一个发现这个规律的人很了不起，我们只是站在巨人的肩膀上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607280869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260251,"user_name":"米德大王","can_delete":false,"product_type":"c1","uid":1438665,"ip_address":"","ucode":"7FBFE55D6B1D9F","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/c9/06ff80ec.jpg","comment_is_top":false,"comment_ctime":1604970210,"is_pvip":false,"replies":[{"id":"94848","content":"理论上是。不过这个也要看具体的编程语言，有些语言有更为智能的实现方式，某种程度上可以突破限制","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1605315622,"ip_address":"","comment_id":260251,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604970210","product_id":100021201,"comment_content":"2**64方就导致long溢出，是不是说明64位机器不够，需要128位的计算机？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509145,"discussion_content":"理论上是。不过这个也要看具体的编程语言，有些语言有更为智能的实现方式，某种程度上可以突破限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605315622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257127,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1603855540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603855540","product_id":100021201,"comment_content":"自己写递归算法计算和使用math.pow函数性能的差距根本原因是pow函数底层采用的是位移操作。<br>比如，4的4次方会转化为0.5*2^9，这个时候只会有两次运算，一次是1&lt;&lt;9得到512，另外一次是0.5*512。而递归是4次乘法运算。以此类推，指数越大math.pow的性能优势越明显。<br><br>这个其实并不能作为迭代与归纳法对比的例子。<br><br>个人认为归纳法对比迭代法主要是易于理解，性能上不一定更好，反而由于递归的函数调用会消耗更多的栈空间。","like_count":0},{"had_liked":false,"id":248647,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1600252430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600252430","product_id":100021201,"comment_content":"递归里的k也是完成了63次的迭代计算,为什么比普通的迭代时间要少呢?","like_count":0},{"had_liked":false,"id":225440,"user_name":"看风景人","can_delete":false,"product_type":"c1","uid":1621121,"ip_address":"","ucode":"2766B2F8377C37","user_header":"https://static001.geekbang.org/account/avatar/00/18/bc/81/c480323b.jpg","comment_is_top":false,"comment_ctime":1591756959,"is_pvip":true,"replies":[{"id":"83383","content":"这里有个时序概念，n可以认为是个变量，而k是个常量","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1592101509,"ip_address":"","comment_id":225440,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591756959","product_id":100021201,"comment_content":"证明基本情况（通常是 n=1 的时候）是否成立；<br>假设 n=k−1 成立，再证明 n=k 也是成立的（k 为任意大于 1 的自然数）。<br><br>不明白这段,都假设n=k−1, 这说明n &lt; K ,怎么还能证明n = k是成立的?","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497849,"discussion_content":"这里有个时序概念，n可以认为是个变量，而k是个常量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592101509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225432,"user_name":"看风景人","can_delete":false,"product_type":"c1","uid":1621121,"ip_address":"","ucode":"2766B2F8377C37","user_header":"https://static001.geekbang.org/account/avatar/00/18/bc/81/c480323b.jpg","comment_is_top":false,"comment_ctime":1591756009,"is_pvip":true,"replies":[{"id":"83384","content":"因为要留一个出来存储0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1592101528,"ip_address":"","comment_id":225432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591756009","product_id":100021201,"comment_content":"2n−1, 最后的-1有什么用, 为什么要-1呢?","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497846,"discussion_content":"因为要留一个出来存储0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592101528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203781,"user_name":"Tom貓.[2012]🇷🇼","can_delete":false,"product_type":"c1","uid":1954775,"ip_address":"","ucode":"392CAF1C77B2FA","user_header":"https://static001.geekbang.org/account/avatar/00/1d/d3/d7/d7c44120.jpg","comment_is_top":false,"comment_ctime":1586266058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586266058","product_id":100021201,"comment_content":"在实际代码中舍汗王的递归会造成堆栈溢出，因为每次运算会占用堆栈","like_count":0},{"had_liked":false,"id":195878,"user_name":"徐旭","can_delete":false,"product_type":"c1","uid":1814806,"ip_address":"","ucode":"1D3091D15373E5","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b1/16/dd11930c.jpg","comment_is_top":false,"comment_ctime":1585220723,"is_pvip":false,"replies":[{"id":"74499","content":"希望本专栏对你有价值","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585334706,"ip_address":"","comment_id":195878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585220723","product_id":100021201,"comment_content":"发现都还给数学老师了","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489178,"discussion_content":"希望本专栏对你有价值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585334706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195217,"user_name":"海晏","can_delete":false,"product_type":"c1","uid":1915554,"ip_address":"","ucode":"38E998D2036115","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/a2/d9f736c6.jpg","comment_is_top":false,"comment_ctime":1585147446,"is_pvip":false,"replies":[{"id":"74504","content":"递归初学的时候确实不太容易理解，你可以认为是剥洋葱，将复杂的问题不断简化，直到最简单的情况","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585350969,"ip_address":"","comment_id":195217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585147446","product_id":100021201,"comment_content":"作为小白，还没看懂递归是怎么回事，要看下一节了。附今天写的计算麦粒数目的Python程序。<br>import math<br><br>def Result(num):<br>    wheat_number = 0            #当前格子里的麦粒数<br>    wheat_total_number = 0      #格子里的麦粒总数<br><br>    &#39;&#39;&#39;for k in range(1,num+1):<br>        if k == 1:<br>            wheat_number = 1<br>            wheat_total_number = 1<br>        else:<br>            wheat_number *= 2<br>            wheat_total_number += wheat_number&#39;&#39;&#39;<br>    <br>    wheat_total_number = math.pow(2,num)-1<br>    <br>    return wheat_total_number<br><br>print(Result(63))","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489001,"discussion_content":"递归初学的时候确实不太容易理解，你可以认为是剥洋葱，将复杂的问题不断简化，直到最简单的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585350969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191684,"user_name":"乐达","can_delete":false,"product_type":"c1","uid":1223158,"ip_address":"","ucode":"4A1CCA0633DB45","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/f6/1cdb3d52.jpg","comment_is_top":false,"comment_ctime":1584790467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584790467","product_id":100021201,"comment_content":"递归方法容易理解，但是消耗资源，在生产环境中容易产生风险。实际应用中推荐使用归纳法。","like_count":0},{"had_liked":false,"id":187346,"user_name":"Zeal","can_delete":false,"product_type":"c1","uid":1898857,"ip_address":"","ucode":"327D516A1D0F0E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f9/69/384e33e6.jpg","comment_is_top":false,"comment_ctime":1584088390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584088390","product_id":100021201,"comment_content":"机器脑 vs 人脑","like_count":0},{"had_liked":false,"id":181986,"user_name":"戴鱼","can_delete":false,"product_type":"c1","uid":1700627,"ip_address":"","ucode":"19C777A9333665","user_header":"https://static001.geekbang.org/account/avatar/00/19/f3/13/940bc3d8.jpg","comment_is_top":false,"comment_ctime":1582687742,"is_pvip":false,"replies":[{"id":"71544","content":"这是很好的一个点👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1583555028,"ip_address":"","comment_id":181986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582687742","product_id":100021201,"comment_content":"对于为何计算机的迭代语句，能正确的表达数学里归纳法的概念，本节其实没有涉及。当然这属于计算机学相关的，但可以聊聊计算机编程里面的先验证明的发展思路，图灵奖得主Edsger Wybe Dijkstra的工作。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485187,"discussion_content":"这是很好的一个点👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583555028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181622,"user_name":"fishcat","can_delete":false,"product_type":"c1","uid":1055761,"ip_address":"","ucode":"44D3EB54C0D4BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/11/86d1f82d.jpg","comment_is_top":false,"comment_ctime":1582598854,"is_pvip":false,"replies":[{"id":"71550","content":"在编程中，递归的优势是便于思考，但是效率往往比较低下","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1583555330,"ip_address":"","comment_id":181622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582598854","product_id":100021201,"comment_content":"归纳法感觉就是经过科学的论证后应用到生产服务中，节约计算成本，提高效率。应该不会用递归来做论证并应用在实际项目中的","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485055,"discussion_content":"在编程中，递归的优势是便于思考，但是效率往往比较低下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583555330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181430,"user_name":"missed","can_delete":false,"product_type":"c1","uid":1670935,"ip_address":"","ucode":"89D0016FAEE0D0","user_header":"https://static001.geekbang.org/account/avatar/00/19/7f/17/181c8d6f.jpg","comment_is_top":false,"comment_ctime":1582539566,"is_pvip":false,"replies":[{"id":"71549","content":"这确实是两者的主要区别之一，迭代一般都是正向递推，而递归往往是给定结果，倒退中间的过程","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1583555290,"ip_address":"","comment_id":181430,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582539566","product_id":100021201,"comment_content":"个人感觉数学归纳法是基于1,2,3,4,5...n-1,n知道有规律的情况。递归的话，并没有规律可言，比如遍历文件夹所有文件，我们并不知道每层有多少目录，每层有多少文件，所以只能一直遍历下去，直到找到递归的出口。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484998,"discussion_content":"这确实是两者的主要区别之一，迭代一般都是正向递推，而递归往往是给定结果，倒退中间的过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583555290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180634,"user_name":"闪耀之作r","can_delete":false,"product_type":"c1","uid":1712458,"ip_address":"","ucode":"11929B7EF47D4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/21/4a/05c36143.jpg","comment_is_top":false,"comment_ctime":1582356372,"is_pvip":false,"replies":[{"id":"70228","content":"第一点是很好的总结。对于第二点，我很好奇具体是什么问题？怎样用归纳法解决的？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1582469694,"ip_address":"","comment_id":180634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582356372","product_id":100021201,"comment_content":"数学归纳法的学习笔记:一、数学归纳法和迭代法思路差不多，但是用归纳要比另外一个耗时更短，代码运行更高效，而且重视归纳，是有规律性的，二、思考题在python中的字典和列表用过数学归纳，比如把人分成中国人，德国人，日本人，还有就是大中小城市的分类","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484739,"discussion_content":"第一点是很好的总结。对于第二点，我很好奇具体是什么问题？怎样用归纳法解决的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582469694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173655,"user_name":"喵星人","can_delete":false,"product_type":"c1","uid":1813776,"ip_address":"","ucode":"F19C01F1928C27","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ad/10/396beb4e.jpg","comment_is_top":false,"comment_ctime":1579653785,"is_pvip":false,"replies":[{"id":"67881","content":"这个要看具体运用 一般来说浅层递归（也就是树的高度很矮）可以使用多重循环来替代，但是层级多了，就不可能了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1580313379,"ip_address":"","comment_id":173655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579653785","product_id":100021201,"comment_content":"数学归纳法和迭代法可以优化尾递归，但中间有循环的递归，也就是画出来像树的还能用这种方式优化吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482155,"discussion_content":"这个要看具体运用 一般来说浅层递归（也就是树的高度很矮）可以使用多重循环来替代，但是层级多了，就不可能了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580313379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167807,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1577938060,"is_pvip":false,"replies":[{"id":"65418","content":"确实是编译器有优化导致的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1578184621,"ip_address":"","comment_id":167807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577938060","product_id":100021201,"comment_content":"看到有同学提到，并不是使用数学归纳法后运行时间就变的很快了，而可能是由于顺序的原因编译器做了缓存优化。我觉得问题应该出在 Math.pow() 函数上，看代码是个 native 的实现，不知道 Math.pow() 内部是怎么实现的呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480003,"discussion_content":"确实是编译器有优化导致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578184621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164511,"user_name":"cwtxz","can_delete":false,"product_type":"c1","uid":1778151,"ip_address":"","ucode":"4F35AEDB8F5D5D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BAuQlia9Dc07m3icOkibIqu2lhbnLD6cjgCNE8FSzG5Aj4cd26eRgspicTsWvA7WK1ftlQBD34PYRucZRXML5FA27A/132","comment_is_top":false,"comment_ctime":1577014894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577014894","product_id":100021201,"comment_content":"每个人，都有着自己的命运轨迹。有些人天赋好，学习速度快一些，有的人天赋没那么强，学习速度慢一些。但是我们不能只看一时的得失，而是要制定适合自己的长远学习计划。学习，毕竟是一辈子的事情。咱们身为普通人，只要还走在正确的学习道路上，不断前行，就不算输。因为我们只要不倒下，早晚会修成正果，不过是速度稍微慢点罢了。加油，继续钻研。","like_count":0},{"had_liked":false,"id":164261,"user_name":"OUO","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1576918022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576918022","product_id":100021201,"comment_content":"#include &lt;iostream&gt;<br><br>using namespace std;<br><br>int n;<br>int ans = 1;<br><br>void get_wheat(int u, int cur)<br>{<br>    if(u == n + 1)<br>    {<br>        printf(&quot;%d\\n&quot;, ans);<br>        return;<br>    }<br>    cur *= 2;<br>    ans += cur;<br>    get_wheat(u + 1, cur);<br>}<br><br>int main(void)<br>{<br>    scanf(&quot;%d&quot;, &amp;n);<br>    get_wheat(2, 1);<br>    return 0;<br>}<br><br>老师 看一下 这样写对吗","like_count":0},{"had_liked":false,"id":160377,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1575942915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575942915","product_id":100021201,"comment_content":"递归调用的代码和数学归纳法的逻辑是一致的。一旦你理解了数学归纳法，就很容易理解递归调用了。只要数学归纳证明的逻辑是对的，递归调用的逻辑就是对的，我们没有必要纠结递归函数是如何嵌套调用和返回的。","like_count":0},{"had_liked":false,"id":157019,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1575013878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575013878","product_id":100021201,"comment_content":"等比数列求和","like_count":0},{"had_liked":false,"id":151263,"user_name":"褐言","can_delete":false,"product_type":"c1","uid":1024304,"ip_address":"","ucode":"43A891C33DBDB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/30/770c64b2.jpg","comment_is_top":false,"comment_ctime":1573692638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573692638","product_id":100021201,"comment_content":"数学归纳法 证明乘法 交换 结合 分配律 https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;AZxMEC4dx78PdlElsIXHTg","like_count":0},{"had_liked":false,"id":146528,"user_name":"Harvey","can_delete":false,"product_type":"c1","uid":1254112,"ip_address":"","ucode":"164D1178DA091A","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","comment_is_top":false,"comment_ctime":1572568892,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572568892","product_id":100021201,"comment_content":"用编程模拟数学归纳法的证明好像没什么意义吧，程序执行依赖给定入参k的值，无论给了多少种k值，而且结果符合预期，也无法证明数学命题是正确的，因为毕竟特例不能代表全部啊？","like_count":0},{"had_liked":false,"id":139025,"user_name":"鲁小鲁","can_delete":false,"product_type":"c1","uid":1258332,"ip_address":"","ucode":"02683A34EA151E","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/5c/8ea5d4aa.jpg","comment_is_top":false,"comment_ctime":1570528361,"is_pvip":true,"replies":[{"id":"53585","content":"没错，递归天生就是树结构的深度优先","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1570554629,"ip_address":"","comment_id":139025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570528361","product_id":100021201,"comment_content":"生成商品分类的树状菜单，一般会用递归。貌似处理树状的数据结构，用递归会方便些","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469753,"discussion_content":"没错，递归天生就是树结构的深度优先","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570554629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137475,"user_name":"一十六夜","can_delete":false,"product_type":"c1","uid":1606581,"ip_address":"","ucode":"41D4A6695B2A7B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","comment_is_top":false,"comment_ctime":1569749514,"is_pvip":false,"replies":[{"id":"52849","content":"这个要结合你的命题来，一般都是从比较小的数字开始，总结规律，假设后再验证。这里第1个格子是1粒，第2个格子是2粒，符合2^(k-2)","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1569771680,"ip_address":"","comment_id":137475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569749514","product_id":100021201,"comment_content":"老师，咨询一下，在验证完“我们已经验证了 n=1 的时候，第一格内的麦粒数为 1，和 2^(1−1)  相等。因此，命题在 k=1 的时候成立”以后，为什么假设了“假设第 k−1 格的麦粒数为 2^(k−2) ”而不是2^(k-3)等？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469115,"discussion_content":"这个要结合你的命题来，一般都是从比较小的数字开始，总结规律，假设后再验证。这里第1个格子是1粒，第2个格子是2粒，符合2^(k-2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569771680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128842,"user_name":"尘土","can_delete":false,"product_type":"c1","uid":1104088,"ip_address":"","ucode":"68CC8B401CA730","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/d8/13952330.jpg","comment_is_top":false,"comment_ctime":1566973528,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1566973528","product_id":100021201,"comment_content":"k=n-1这里应该是n=k-1把","like_count":0},{"had_liked":false,"id":124085,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565819996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565819996","product_id":100021201,"comment_content":"平常的归纳，看到集合中的一个物体或者几个物体的某些共有特征，然后推测整个集合的所有物体都符合这些特征，进而分类，这是一个从局部到整体的过程。数学归纳法则是从有限的基础样本（例如k=1）,猜测所有自然数集合的普遍规律（这和普通的归纳法类似），然后假设k=n-1的时候假设成立并以此为依据证明k=n的假设也成立（普通的归纳法没有这一步），这样就完整的证明了从1到n的完整逻辑。<br>有的时候需要前面若干项的假设，例如斐波那契数列就需要前面两项。<br>数学归纳法的证明过程和函数递归是同构的，里面的本质就是把一个问题转化成规模较小但结构相同的问题递归解决。<br>迭代法和递归法计算的顺序不同，但很多情况下结果是一样的。这也导致了很多问题往往有迭代和递归两种写法，例如动态规划法的很多问题。通常递归的写法更好理解，迭代的写法效率更高，递归还要注意的是很多语言对递归消耗的内存有限制（递归栈的大小），搞不好会递归过深而递归栈溢出。","like_count":0},{"had_liked":false,"id":113718,"user_name":"ventsea","can_delete":false,"product_type":"c1","uid":1338414,"ip_address":"","ucode":"629F64F0F4BA7A","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/2e/5365fbec.jpg","comment_is_top":false,"comment_ctime":1563147457,"is_pvip":false,"replies":[{"id":"41540","content":"一般是在n=k-1成立的基础之上，在证明n=k的时候也成立。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1563210874,"ip_address":"","comment_id":113718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563147457","product_id":100021201,"comment_content":"假设 n=k−1 成立，再证明 n=k 也是成立的。我理解能力出了点问题，n=k的话，那就是要证明k=k-1成立了么？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458358,"discussion_content":"一般是在n=k-1成立的基础之上，在证明n=k的时候也成立。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563210874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110775,"user_name":"奔腾","can_delete":false,"product_type":"c1","uid":1541178,"ip_address":"","ucode":"2D611AC4A7E2BE","user_header":"https://static001.geekbang.org/account/avatar/00/17/84/3a/830091d7.jpg","comment_is_top":false,"comment_ctime":1562330406,"is_pvip":false,"replies":[{"id":"40328","content":"是的👌","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1562404575,"ip_address":"","comment_id":110775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562330406","product_id":100021201,"comment_content":"递归符合计算机的运行原理，归纳符合人的思维方式。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457046,"discussion_content":"是的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562404575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108522,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1561791298,"is_pvip":false,"replies":[{"id":"39373","content":"很好的总结","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561892573,"ip_address":"","comment_id":108522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561791298","product_id":100021201,"comment_content":"迭代让计算机做大量体力活得出结果，归纳就是人思考观察证明规律通过公式得出结果","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456023,"discussion_content":"很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561892573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108246,"user_name":"是我","can_delete":false,"product_type":"c1","uid":1297235,"ip_address":"","ucode":"0AC816A2FBD4F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/53/262a8ce2.jpg","comment_is_top":false,"comment_ctime":1561704972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561704972","product_id":100021201,"comment_content":"有用过一行代码解决递归问题。","like_count":0},{"had_liked":false,"id":104636,"user_name":"鹅鹅鹅","can_delete":false,"product_type":"c1","uid":1348721,"ip_address":"","ucode":"C6372567C83738","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/71/e8ec9843.jpg","comment_is_top":false,"comment_ctime":1560802518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560802518","product_id":100021201,"comment_content":"数学归纳法感觉和循环不变式有些相似啊","like_count":0},{"had_liked":false,"id":104325,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1560733082,"is_pvip":false,"replies":[{"id":"37834","content":"很好的总结👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560788579,"ip_address":"","comment_id":104325,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560733082","product_id":100021201,"comment_content":"循环+手动操作栈，用这种方法，可以用迭代取代递归，好处是：<br>（1）所耗费的栈空间大小可以控制。如果栈需求过大，可以直接返回错误码，避免栈的溢出。<br>（2）递归的过程可以受到完整的跟踪。<br>（3）节省栈空间。因为递归时，函数调用和返回时，栈空间里除了局部变量，还有函数的返回地址LR。手动操作栈这种方法，不需要入栈LR。<br>（4）节省操作时间。对于查找类任务，手动操作栈的方法，可以在找到目标后直接返回，不需要走完完整的回归过程。<br><br>    递归，是把入栈出栈的操作交给计算机，节省开发成本，但效率较低，不好跟踪。<br>    循环+手动操作栈，花费人力开发成本，换来计算机操作的灵活性和高效性。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454227,"discussion_content":"很好的总结👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560788579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103683,"user_name":"syz","can_delete":false,"product_type":"c1","uid":1174704,"ip_address":"","ucode":"54AF17ACD72645","user_header":"https://static001.geekbang.org/account/avatar/00/11/ec/b0/4e22819f.jpg","comment_is_top":false,"comment_ctime":1560489467,"is_pvip":true,"replies":[{"id":"37558","content":"甚至都可以避免递归，直接计算出答案。这里只是使用递归演示一下归纳证明的过程。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560528783,"ip_address":"","comment_id":103683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560489467","product_id":100021201,"comment_content":"嗯 归纳出递推公式和终止条件 然后用递归实现？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453963,"discussion_content":"甚至都可以避免递归，直接计算出答案。这里只是使用递归演示一下归纳证明的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560528783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100688,"user_name":"大秦岭","can_delete":false,"product_type":"c1","uid":1515916,"ip_address":"","ucode":"3F7591A279AD93","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJman25D8Jlr6P6AIhumWr2CNqZPvXl8JJLc3yOvvTlWFDVuKbYpNXgKib6y1Sa0HApwvz1xM6MBjw/132","comment_is_top":false,"comment_ctime":1559617081,"is_pvip":false,"replies":[{"id":"36370","content":"这是因为计算机数据类型的精度有限，有误差","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559664900,"ip_address":"","comment_id":100688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559617081","product_id":100021201,"comment_content":"        int grid = 63;<br>        long start, end = 0;<br>&#47;&#47;        start = System.currentTimeMillis();<br>&#47;&#47;        System.out.println(String.format(&quot; 舍罕王给了这么多粒：%d&quot;, Lesson3_1.getNumberOfWheat(grid)));<br>&#47;&#47;        end = System.currentTimeMillis();<br>&#47;&#47;        System.out.println(String.format(&quot; 耗时 %d 毫秒 &quot;, (end - start)));<br><br>        start = System.currentTimeMillis();<br>        System.out.println(String.format(&quot; 舍罕王给了这么多粒：%d&quot;, (long)(Math.pow(2, grid)) - 1));<br>        end = System.currentTimeMillis();<br>        System.out.println(String.format(&quot; 耗时 %d 毫秒 &quot;, (end - start)));<br><br>老师你好，我没明白把上面的那段注销，结果：<br>------------------------------------------------------<br>舍罕王给了这么多粒：9223372036854775806<br> 耗时 13 毫秒 <br>-----------------------------------------------------<br>如果没注销运行结果如下：<br>--------------------------------------------------------<br>舍罕王给了这么多粒：9223372036854775807<br> 耗时 15 毫秒 <br> 舍罕王给了这么多粒：9223372036854775806<br> 耗时 0 毫秒 <br>-------------------------------------------------<br><br>这个是为什么？？？？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452639,"discussion_content":"这是因为计算机数据类型的精度有限，有误差","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559664900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99549,"user_name":"王先拙","can_delete":false,"product_type":"c1","uid":1161018,"ip_address":"","ucode":"8E9E9B13821483","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/3a/e50e48d1.jpg","comment_is_top":false,"comment_ctime":1559259863,"is_pvip":false,"replies":[{"id":"35851","content":"这是数学归纳法的基本思想","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559323353,"ip_address":"","comment_id":99549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559259863","product_id":100021201,"comment_content":"“如果n=1时成立，n=k-1时成立n=k也成立，那么n为任何值时都是成立的&quot;，老师证明这个问题是一个什么思路？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452166,"discussion_content":"这是数学归纳法的基本思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559323353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98730,"user_name":"王先拙","can_delete":false,"product_type":"c1","uid":1161018,"ip_address":"","ucode":"8E9E9B13821483","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/3a/e50e48d1.jpg","comment_is_top":false,"comment_ctime":1559087529,"is_pvip":false,"replies":[{"id":"35750","content":"你是说如何证明“如果n=1时成立，n=k-1时成立n=k也成立，那么n为任何值时都是成立的&quot;？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559232241,"ip_address":"","comment_id":98730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559087529","product_id":100021201,"comment_content":"老师，请问如何证明数学归纳法本身是成立的？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451812,"discussion_content":"你是说如何证明“如果n=1时成立，n=k-1时成立n=k也成立，那么n为任何值时都是成立的&amp;quot;？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559232241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97713,"user_name":"lkj","can_delete":false,"product_type":"c1","uid":1515939,"ip_address":"","ucode":"E6FE96407AF620","user_header":"https://static001.geekbang.org/account/avatar/00/17/21/a3/06291d0c.jpg","comment_is_top":false,"comment_ctime":1558752689,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1558752689","product_id":100021201,"comment_content":"class Result():<br>\twheat_num = 0<br>\twheat_totalnum = 0<br><br>def prove(k, result):<br><br>\tif k == 1:<br>\t\tif (math.pow(2, 1) - 1) == 1:<br>\t\t\tresult.wheat_num = 1<br>\t\t\tresult.wheat_totalnum = 1<br>\t\t\treturn True<br>\t\telse:<br>\t\t\treturn False<br><br>\tlast_prove = prove(k-1, result)<br>\tresult.wheat_num *= 2<br>\tresult.wheat_totalnum += result.wheat_num<br>\t# print(last_prove, result.wheat_num, result.wheat_totalnum, k)<br>\tcurrent_prove = False<br>\tcurrent_prove = (2**k - 1) == result.wheat_totalnum<br><br>\treturn current_prove and last_prove<br><br>只能作者回复，不支持其他人回复其他人","like_count":0,"discussions":[{"author":{"id":1384633,"avatar":"https://static001.geekbang.org/account/avatar/00/15/20/b9/8e444fed.jpg","nickname":"SoulEdge","note":"","ucode":"3D21D5CC1E6B3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3456,"discussion_content":"啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564494190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87286,"user_name":"皮浪的猪","can_delete":false,"product_type":"c1","uid":1182407,"ip_address":"","ucode":"50841B0BBB1076","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/c7/4e8ff46c.jpg","comment_is_top":false,"comment_ctime":1555559571,"is_pvip":false,"replies":[{"id":"31451","content":"是的，最经典的案例","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555606104,"ip_address":"","comment_id":87286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555559571","product_id":100021201,"comment_content":"让我想到了德国的天才数学王子高斯的故事：1+2+3+4+.......100，高斯找规律使用了等差数列的求和公式很快速解决问题，比普通的相加求解快太多了。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447381,"discussion_content":"是的，最经典的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555606104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82636,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1554266221,"is_pvip":false,"replies":[{"id":"29914","content":"总结的好","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554311957,"ip_address":"","comment_id":82636,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554266221","product_id":100021201,"comment_content":"递归是自顶向下，从抽象到具体(递归的出口是明确的，具体的)。归纳是从具体到抽象，从一个特例递推出所有情况。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445665,"discussion_content":"总结的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554311957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82549,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1554251065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554251065","product_id":100021201,"comment_content":"联想到了斐波那契数列，可以使用递推的方式求解；但是更进一步使用数学归纳出的公式无疑效率更高。","like_count":0},{"had_liked":false,"id":80985,"user_name":"是我","can_delete":false,"product_type":"c1","uid":1297235,"ip_address":"","ucode":"0AC816A2FBD4F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/53/262a8ce2.jpg","comment_is_top":false,"comment_ctime":1553769844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553769844","product_id":100021201,"comment_content":"可能使用过了但是自己没有发现- 接下来应该要做的事：思考正逆向递归什么时候使用。","like_count":0},{"had_liked":false,"id":80427,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1438575,"ip_address":"","ucode":"707605B440164C","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/6f/c97eabfb.jpg","comment_is_top":false,"comment_ctime":1553659739,"is_pvip":false,"replies":[{"id":"29593","content":"从第二个模块开始，我们都使用Python代码，第一模块的Python代码，如果有机会会在最终整理代码的时候补上。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554011213,"ip_address":"","comment_id":80427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553659739","product_id":100021201,"comment_content":"老师，我想看Python代码实现，因为Java 不是很熟悉（刚入门的）","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444862,"discussion_content":"从第二个模块开始，我们都使用Python代码，第一模块的Python代码，如果有机会会在最终整理代码的时候补上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554011213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72412,"user_name":"SagaCheng","can_delete":false,"product_type":"c1","uid":1002798,"ip_address":"","ucode":"61AE0E44F8EC13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/2e/2fdc8adb.jpg","comment_is_top":false,"comment_ctime":1551615945,"is_pvip":false,"replies":[{"id":"26244","content":"后面讲解dp的部分，我也会谈到类似的coin change案例 😆","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551640120,"ip_address":"","comment_id":72412,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551615945","product_id":100021201,"comment_content":"在做 leetcode 322 coin change 的时候 dp 的方法挺难理解的，用了课程的方法求解也不失为一种好方法，更具有广泛适用性","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441579,"discussion_content":"后面讲解dp的部分，我也会谈到类似的coin change案例 😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551640120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68507,"user_name":"张祈璟","can_delete":false,"product_type":"c1","uid":1400950,"ip_address":"","ucode":"DC7DDB3881633F","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/76/be584def.jpg","comment_is_top":false,"comment_ctime":1550536359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550536359","product_id":100021201,"comment_content":"感觉那段代码没有证明归纳法，只证明了1到63是符合这个规律的","like_count":0},{"had_liked":false,"id":63770,"user_name":"Lee.","can_delete":false,"product_type":"c1","uid":1338938,"ip_address":"","ucode":"4DB0DEA0AE8471","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/3a/0c11b9f0.jpg","comment_is_top":false,"comment_ctime":1548494048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548494048","product_id":100021201,"comment_content":"感觉这章和上一章讲的都是递归诶","like_count":0},{"had_liked":false,"id":57664,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1546864421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546864421","product_id":100021201,"comment_content":"&#47;&#47; C++ 实现<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>&#47;&#47; 数学归纳法<br>&#47;&#47; 思想：1.证明基本情况（通常n=1）成立;2.假设n=k-1成立，证明<br>&#47;&#47; n=k成立。<br>&#47;&#47; 作用：归纳规律，从而减少推导，节省时间与资源。<br>class MathInduction {<br>  private:<br>  long wheatNum = 0;       &#47;&#47; 当前格麦粒数<br>  long wheatTotalNum = 0;  &#47;&#47; 当前总共麦粒数<br><br>  public:<br>  &#47;**<br>   * @description: 用递归&amp;数学归纳法证明舍汗王赏麦总数=2^k - 1<br>   * @param {type} k- 棋格数<br>   * @return: <br>   *&#47;<br>  bool wheatProve(int k) {<br>    &#47;&#47; 证明n=1成立<br>    if (k == 1) {<br>      &#47;&#47; n = 1显然成立，不用证明。<br>      wheatNum = 1;<br>      wheatTotalNum = 1;<br>      return true;<br>    } else {<br>      &#47;&#47; 假设n=k-1成立<br>      bool flagProvePrev = wheatProve(k - 1);<br><br>      &#47;&#47; 证明n=k成立<br>      wheatNum *= 2;<br>      wheatTotalNum += wheatNum;<br>      bool flagProve;<br>      if (wheatTotalNum == (pow(2, k) - 1)) {<br>        flagProve = true;<br>      } else {<br>        flagProve = false;<br>      }<br><br>      &#47;&#47; 相等则成立<br>      if (flagProve &amp;&amp; flagProvePrev) {<br>        return true;<br>      } else {<br>        return false;<br>      }<br>    }<br>  }<br>  &#47;**<br>   * Desciption: 获取麦粒总数<br>   *&#47;<br>  long getWheatNum(void) {<br>    return wheatTotalNum;<br>  }<br>};<br><br>&#47;&#47; test<br>int main(void) {<br>  MathInduction test;<br>  bool res = test.wheatProve(63);<br>  cout &lt;&lt; res &lt;&lt; endl;<br>  &#47;&#47; 输出麦粒总数<br>  cout &lt;&lt; test.getWheatNum() &lt;&lt; endl;<br>}","like_count":0},{"had_liked":false,"id":55917,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1546347253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546347253","product_id":100021201,"comment_content":"讲的好好，对我们未入职场的学生非常受用，为黄老师点赞！","like_count":0},{"had_liked":false,"id":52308,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1545360794,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545360794","product_id":100021201,"comment_content":"- 递归就是归纳法的过程<br><br>- 归纳法就是递归的结果","like_count":0},{"had_liked":false,"id":50502,"user_name":"seleven","can_delete":false,"product_type":"c1","uid":1338701,"ip_address":"","ucode":"B4D84E6B930448","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SsJajvXghPMDicSuOcx54mV6L9zv4KSKM2bKY0gsUdAH3oGCWzfRv9Q9HRljic2IvHzYFpRECp8SXGWhiaqGWFTKg/132","comment_is_top":false,"comment_ctime":1545003208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545003208","product_id":100021201,"comment_content":"前人栽树，后人乘凉。","like_count":0}]}