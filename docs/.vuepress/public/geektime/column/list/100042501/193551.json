{"id":193551,"title":"19丨Java & C ++：代码级监控及常用计数器解析（上）","content":"<p>在性能测试分析中，有一部分人存在着一个思路上的误解，那就是一开始就一头扎进代码里，折腾代码性能。这是我非常反对的一种做法。</p><p>事实上，要想这么做，有一个前提，那就是架构中的其他组件都经过了千锤百炼，出现问题的可能性极低。</p><p>实际上，我凭着十几年的经验来看，大部分时候，代码出现严重性能瓶颈的情况还真是不多。再加上现在成熟的框架那么多，程序员们很多情况下只写业务实现。在这种情况下，代码出现性能瓶颈的可能性就更低了。</p><p>但我们今天终归要说代码级的监控及常用的计数器。如何去评估一个业务系统的代码性能呢？在我看来，分析的思路是下面这个样子的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/e3/eebce7bd7cab91685baf4a9a526be9e3.jpg?wh=1542*1112\" alt=\"\"></p><p>从上图可以看到，分析的时候有两个关键点：执行时间和执行空间。我相信很多人都清楚，我们要很快找到执行时间耗在哪一段和空间耗在哪里。</p><p>现在我们来实际操作一下，看如何判断。</p><h2>Java类应用查找方法执行时间</h2><p>首先你得选择一个合适的监控工具。Java方法类的监控工具有很多，这里我选择JDK里自带的jvisualvm。</p><p>顺便说一下，我的Java版本号是这个：</p><pre><code>(base) GaoLouMac:~ Zee$ java -version\njava version &quot;1.8.0_111&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n</code></pre><p>打开应用服务器上的JMX之后，连上jvisualvm，你会看到这样的视图。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/36/76e17407985e427e832c0de988cc8f36.png?wh=1254*727\" alt=\"\"></p><p>这里再啰嗦一下我们的目标，这时我们要找到消耗CPU的方法，所以要先点<code>Sampler - CPU</code>，你可以看到如下视图。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/d3/63/d3a21195b1b8bcb1838df3d7ec76ef63.png?wh=1420*751\" alt=\"\"></p><p>从上图可以看到方法执行的累积时间，分别为自用时间百分比、自用时间、自用时间中消耗CPU的时间、总时间、总时间中消耗CPU的时间、样本数。</p><p>从这些数据中就可以看到方法的执行效率了。</p><p>但是，这里面Method这么多，我怎么知道哪个跟我的方法执行时间有关呢？比如说上面这个应用中，最消耗CPU的是JDBC的一个方法fill。这合理吗？</p><p>先来看一下我的脚本。</p><p><img src=\"https://static001.geekbang.org/resource/image/ad/b8/ad1e7b5f712dcbb7e7b35af084f01db8.png?wh=223*275\" alt=\"\"></p><p>从结构上你就能看出来，我做了登录，然后就做了创建的动作，接着就退出了。</p><p>这几个操作和数据库都有交互。拿create这个步骤来说，它的脚本非常直接，就是一个POST接口。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/dd/7dadcb5071e391a7c97f9ae91e00c9dd.png?wh=991*337\" alt=\"\"></p><p>还记得前面我们怎么说查看后端的运行逻辑的吗？后端接收这个POST的代码如下：</p><pre><code>    @RequestMapping(&quot;/save&quot;)\n    @ResponseBody\n    public Object save(Blog blog, HttpSession session){\n        try{\n            Long id = blog.getId();\n            if(id==null){\n                User user = (User)session.getAttribute(&quot;user&quot;);\n                blog.setAuthor(user.getName());\n                blog.setUserId(user.getId());\n                blog.setCreateTime(new Date());\n                blog.setLastModifyTime(new Date());\n                blogWriteService.create(blog);\n            }else {\n                blog.setLastModifyTime(new Date());\n                blogWriteService.update(blog);\n            }\n        }catch (Exception e){\n            throw new JsonResponseException(e.getMessage());\n        }\n        return true;\n    }\n</code></pre><p>这段代码的功能就是讲前端内容接收过来放到实体中，然后通过create方法写到数据库中。那么create是怎么实现的呢？</p><pre><code>    public void  create(Blog blog) {\n        mapper.insert(blog);\n        BlogStatistics blogStatistics = new BlogStatistics(blog.getId());\n        blogStatisticsMapper.insert(blogStatistics);\n</code></pre><p>它就是一个mapper.insert，显然这个create是我们自己实现的代码，里面其实没有什么逻辑。而ReadAheadInputStream.fill是create中的MyBatis调用的JDBC中的方法。 从压力工具到数据库的调用逻辑就是：</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/a6/e23bec9dd1d7712ff541c86479433ba6.jpg?wh=1424*606\" alt=\"\"></p><p>而我们看到的最耗时的方法是最后一个，也就是fill。实际上，我们应该关心的是save接口到底怎么样。我们来过滤下看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/af/535a53ffb59aa005830e5f30159c2faf.png?wh=1431*131\" alt=\"\"></p><p>从save的结果上来看，它本身并没有耗什么时间，都是后面的调用在消耗时间。</p><p>我们再来看看cerate。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/b6/36e52d8b3f346aa6b66ece606aa6e6b6.png?wh=1286*385\" alt=\"\"></p><p>它本身也没消耗什么时间。</p><p>顺着逻辑图，我们再接着看MyBatis中的insert方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/8a/c780aa816eb132eea8acc0bb06cc0e8a.png?wh=1291*131\" alt=\"\"></p><p>就这样一层层找下去，最后肯定就找到了fill这个方法了。但是你怎么知道整个调用逻辑中有哪些层级呢？你说我可以看源码。当然不是不可以。但要是没有源码呢？做性能分析的人经常没有源码呀。</p><p>这个时候，我们就要来看栈了。这里我打印了一个调用栈，我们来看下这个逻辑。</p><pre><code>&quot;http-nio-8080-exec-1&quot; - Thread t@42\n   java.lang.Thread.State: RUNNABLE\n\t...............\n\tat com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:100)\n    ...............\n    ...............\n    at com.sun.proxy.$Proxy87.create(Unknown Source)\n\t...............\n\tat com.blog.controller.BackBlogController.save(BackBlogController.java:85)\n\t...............\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n   Locked ownable synchronizers:\n\t- locked &lt;4b6968c3&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)\n</code></pre><p>我把其他的都给清掉了，我们只看最简单的栈逻辑，其中UnknownSource的部分是因为反射实现的insert没有把源码反编译出来。</p><p>其实这个栈有117行，我怕你看晕。</p><p>从这一层一层的关系中，我们就可以知道调用逻辑了。知道调用逻辑的方法有很多，看源码也行，看编译后运行的代码也行，关键在于知道谁调了谁，这样就行了。</p><p>我这个还算是清晰的调用逻辑，要是代码调用关系再复杂一些，分分钟有想死有没有？</p><p>不过比较好的是，像jvisualvm这样的工具给我们提供了很多便利。这时可能有人会跳起来了，为什么不用Arthas、BTrace之类的工具呢？如果你喜欢的话，可以把Athas弄上，像下面这样。</p><pre><code>[arthas@1]$ trace com.blog.controller.BackBlogController save\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:2) cost in 320 ms.\n`---ts=2020-01-06 10:38:37;thread_name=http-nio-8080-exec-2;id=2b;is_daemon=true;priority=5;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@4f2895f8\n    `---[29.048684ms] com.blog.controller.BackBlogController$$EnhancerBySpringCGLIB$$586fe45c:save()\n        `---[28.914387ms] org.springframework.cglib.proxy.MethodInterceptor:intercept() #0\n            `---[27.897315ms] com.blog.controller.BackBlogController:save()\n                ...............\n                `---[24.192784ms] com.blog.service.BlogWriteService:create() #85\n</code></pre><p>这也能看出来creat是消耗了时间的。如果你接着跟踪create方法。如下所示：</p><pre><code>[arthas@1]$ trace com.blog.service.BlogWriteService create //这一行是arthas中跟踪class中的某个具体方法的语句。\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:2 , method-cnt:2) cost in 199 ms. //被跟踪方法的处理次数和时长\n`---ts=2020-01-06 10:41:51;thread_name=http-nio-8080-exec-4;id=2f;is_daemon=true;priority=5;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@4f2895f8\n    `---[6.939189ms] com.sun.proxy.$Proxy87:create()\n`---ts=2020-01-06 10:41:51;thread_name=http-nio-8080-exec-10;id=38;is_daemon=true;priority=5;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@4f2895f8\n        `---[4.144799ms] com.blog.service.BlogWriteServiceImpl:create()  //写接口中create方法耗时\n            +---[2.131934ms] tk.mybatis.mapper.common.Mapper:insert() #24   //mybatis中insert方法耗时\n                ...............\n            `---[1.95441ms] com.blog.mapper.BlogStatisticsMapper:insert() #26 //insert方法调用了上面的create方法耗时\n</code></pre><p>要是接着往下跟踪，就可以看到反射这一块了。</p><pre><code>[arthas@1]$ trace tk.mybatis.mapper.common.Mapper insert\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:5 , method-cnt:5) cost in 397 ms.\n`---ts=2020-01-06 10:44:01;thread_name=http-nio-8080-exec-5;id=33;is_daemon=true;priority=5;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@4f2895f8\n    `---[3.800107ms] com.sun.proxy.$Proxy80:insert()\n</code></pre><p>类似的，你还可以玩JDK自带的工具jdb，它也可以直接attach到一个进程上，调试能力也是不弱的。</p><p>在我看来，这些工具、手段都是为了实现从<code>响应时间长&lt;-&gt;代码行</code>的分析过程。思路是最重要的。</p><p>另外也要说一下，现在有的APM工具也可以实现这样的功能，但是呢，我并不建议一开始就上这么细致的工具，因为不管APM产品吹得有多牛逼，它都是要消耗10%左右的CPU的。并且，你觉得直接在生产上装一个APM工具的agent到业务系统中是合理的吗？如果是自己实现的metrics方法，输出性能数据尚可接受，如果是别人的这类工具，还是算了。</p><p>在大部分时候，我都不建议在生产上用APM工具。万一生产上真的有极端的情况，需要看细致的性能问题，再临时attach上去，也可以做到。何必为了可能出现的问题而长时间地消耗资源呢。</p><h2>总结</h2><p>大部分时间里，性能测试和分析都在和时间打交道，而在时间的拆分逻辑中，我们在前面也提到过思路，如何一步步把时间拆解到应用当中，那就是<strong>分段</strong>。</p><p>当拆解到应用当中之后，就是抓函数方法的执行时间了。这是保证我们从前到后分析逻辑的关键一环，请你注意，是关键一环，而不是最初的一环。</p><p>通过这篇文章我想告诉你，在大部分的开发语言中，都有手段直接将方法的执行时间消耗抓出来，你可能现在还不知道是什么方法，没关系，因为跟踪的手段有很多，你可以临时去学习如何操作。</p><p>我只要在你的脑子里种下这样的一种印象，那就是，有办法抓到函数方法的执行时间消耗在哪里！</p><h2>思考题</h2><p>最后给你留两道思考题吧。我为什么不建议在生产环境中一开始就上APM类工具来抓取方法的执行时间呢？你有什么方法可以抓取到Java语言中的方法执行时间？如果你擅长其他语言，也可以描述其他语言中的方法执行时间抓取工具。</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":176787,"user_name":"嘟嘟爱学习","can_delete":false,"product_type":"c1","uid":1785994,"ip_address":"","ucode":"EAD8D5FDCD6261","user_header":"","comment_is_top":false,"comment_ctime":1581167416,"is_pvip":false,"replies":[{"id":"68684","content":"很不幸的是，你说的非常对。<br>我觉得我们对大量服务的场景其实需要的只是一个链路监控系统，这个功能APM基本都有提供，我们要用的就是这个功能而已。<br>另外，我不知道你有没有遇到过APM的agent导致业务系统挂掉的情况，在我的工作中有遇到过，一级故障，损失也是惨重。<br><br>所以用不用APM，只有在具体的应用场景中，测试好了再决定上不上吧。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1581253145,"ip_address":"","comment_id":176787,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31645938488","product_id":100042501,"comment_content":"我觉得某些生产环境还是可以直接上APM的：<br>1. 能接受10%性能损耗的，比如原来耗时1秒，上了变成1.1秒其实感觉不明显；原来高峰期CPU使用率30%，上了变成40%也还在可接受范围内；<br>2. APM的成功失败不影响业务的运行，就是即使APM挂了，业务也还能正常运行；<br>3. 在docker+k8且又有大量虚机大量服务的情况下，上APM也是一个方案，不然当出现问题时要在那么多服务里面把问题定位到，用jmx这类监控很容易措手不及和慌手慌脚。<br>4. 现在好些公司没有专职性能测试，好些系统没有经过性能测试就上线的，此时APM是开发和运维人员的一个救命稻草了，这种公司我相信很多。","like_count":8,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483211,"discussion_content":"很不幸的是，你说的非常对。\n我觉得我们对大量服务的场景其实需要的只是一个链路监控系统，这个功能APM基本都有提供，我们要用的就是这个功能而已。\n另外，我不知道你有没有遇到过APM的agent导致业务系统挂掉的情况，在我的工作中有遇到过，一级故障，损失也是惨重。\n\n所以用不用APM，只有在具体的应用场景中，测试好了再决定上不上吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581253145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253250,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1602662698,"is_pvip":false,"replies":[{"id":"93946","content":"JMC是oracle 收购了BEA之后得到的，然后oracle又收购了sun，就把JMC也放到oracle jdk里面了。<br>从工具的角度来说，我觉得只要是能实现自己想要的东西，就是好工具。<br>对个人来说，那是喜欢用什么用什么。JFR这个功能不错，只是在大压力下，性能还是会受到它的影响，你可以尝试一下影响有多大。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1604281786,"ip_address":"","comment_id":253250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23077499178","product_id":100042501,"comment_content":"在我知识范围内Java最强的监控工具是Oracle 开发的 JMC，没有之一。前Oracle首席工程师在 极客时间的《Java核心技术面试精讲》专栏 | 第26讲 | 如何监控和诊断JVM堆内和堆外内存使用？ 文中提到：“我这里特别推荐Java Mission Control（JMC），这是一个非常强大的工具，不仅仅能够使用JMX进行普通的管理、监控任务，还可以配合Java Flight Recorder（JFR）技术，以非常低的开销，收集和分析 JVM 底层的 Profiling 和事件等信息。目前， Oracle 已经将其开源，如果你有兴趣请可以查看 OpenJDK 的Mission Control项目。”","like_count":6,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507022,"discussion_content":"JMC是oracle 收购了BEA之后得到的，然后oracle又收购了sun，就把JMC也放到oracle jdk里面了。\n从工具的角度来说，我觉得只要是能实现自己想要的东西，就是好工具。\n对个人来说，那是喜欢用什么用什么。JFR这个功能不错，只是在大压力下，性能还是会受到它的影响，你可以尝试一下影响有多大。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604281786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201913,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1585876749,"is_pvip":false,"replies":[{"id":"75578","content":"Strace看起来不方便，不如perf和systemtap。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1585970197,"ip_address":"","comment_id":201913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470778637","product_id":100042501,"comment_content":"使用strace 跟踪进程流程","like_count":4,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490455,"discussion_content":"Strace看起来不方便，不如perf和systemtap。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585970197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278902,"user_name":"alley","can_delete":false,"product_type":"c1","uid":1129217,"ip_address":"","ucode":"C46DB6F84DB74F","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/01/7a0bfa9a.jpg","comment_is_top":false,"comment_ctime":1613453040,"is_pvip":false,"replies":[{"id":"103267","content":"对的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1616423200,"ip_address":"","comment_id":278902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5908420336","product_id":100042501,"comment_content":"perftop 可以查看CPU热点函数","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515551,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616423200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182315,"user_name":"Hulk","can_delete":false,"product_type":"c1","uid":1052892,"ip_address":"","ucode":"8D6EDC6E370E21","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/dc/96476998.jpg","comment_is_top":false,"comment_ctime":1582767554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877734850","product_id":100042501,"comment_content":"Arthas","like_count":1},{"had_liked":false,"id":352887,"user_name":"纪老师4","can_delete":false,"product_type":"c1","uid":3071616,"ip_address":"北京","ucode":"847C68A13F117E","user_header":"","comment_is_top":false,"comment_ctime":1658994682,"is_pvip":false,"replies":[{"id":"129308","content":"看你想监控什么了。如果是cpu、内存、io等，直接看系统中的相应进程就行了。要想看线程栈的话直接gstack等命令就可以。 ","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1661331498,"ip_address":"北京","comment_id":352887,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658994682","product_id":100042501,"comment_content":"请问老师C++、C的怎么监控","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585098,"discussion_content":"看你想监控什么了。如果是cpu、内存、io等，直接看系统中的相应进程就行了。要想看线程栈的话直接gstack等命令就可以。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661331498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274004,"user_name":"蔚来懿","can_delete":false,"product_type":"c1","uid":2363304,"ip_address":"","ucode":"815144E42094C3","user_header":"https://static001.geekbang.org/account/avatar/00/24/0f/a8/956452cd.jpg","comment_is_top":false,"comment_ctime":1610785582,"is_pvip":false,"replies":[{"id":"99809","content":"文中不是有方法的执行时间吗？<br>主要的流程就是：<br>CPU高 - 代码栈 - 代码","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1611311771,"ip_address":"","comment_id":274004,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610785582","product_id":100042501,"comment_content":"老师，学到这一节了，为啥我还是不知道，响应时间长，怎么定位到代码这一层了，前面系统层的如何定位（操作系统、进程、线程耗时，这块在怎么得出时间呢？），么有看到在哪里可以分析出来的？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513891,"discussion_content":"文中不是有方法的执行时间吗？\n主要的流程就是：\nCPU高 - 代码栈 - 代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611311771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273024,"user_name":"Geek_6a9aeb","can_delete":false,"product_type":"c1","uid":2161228,"ip_address":"","ucode":"3CF1DDF2677FAC","user_header":"","comment_is_top":false,"comment_ctime":1610415384,"is_pvip":false,"replies":[{"id":"99029","content":"你说同步吗？如果业务需要，该同步还是要同步的。死锁在代码中并不多，BLOCKED才是。这也只是一个点。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1610533511,"ip_address":"","comment_id":273024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610415384","product_id":100042501,"comment_content":"老师，为啥说代码造成瓶颈不多呢，高并发带来java线程死锁的情况 是很常见的代码问题吧","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513463,"discussion_content":"你说同步吗？如果业务需要，该同步还是要同步的。死锁在代码中并不多，BLOCKED才是。这也只是一个点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610533511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254302,"user_name":"舒羽Tester","can_delete":false,"product_type":"c1","uid":1785804,"ip_address":"","ucode":"4DCC70CEEE9113","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3f/cc/d02e2c1e.jpg","comment_is_top":false,"comment_ctime":1603098503,"is_pvip":false,"replies":[{"id":"93938","content":"做threaddump就看到了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1604281418,"ip_address":"","comment_id":254302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603098503","product_id":100042501,"comment_content":"高老师，这个第一个调用栈是用什么命令打出来的，根据什么关键字？在 jvisualvm中没看到进程ID呀？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507345,"discussion_content":"做threaddump就看到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604281418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203940,"user_name":"月亮和六便士","can_delete":false,"product_type":"c1","uid":1080894,"ip_address":"","ucode":"EFFCB9171D4B4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/3e/82202cc8.jpg","comment_is_top":false,"comment_ctime":1586309453,"is_pvip":false,"replies":[{"id":"76416","content":"1. 这个只能多打几次，要连续。<br>2. 有设备名可以对应。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1586398728,"ip_address":"","comment_id":203940,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586309453","product_id":100042501,"comment_content":"高老师：1. 打调用栈的时候，怎么保证打印出来的正好是自己写的方法的调用栈，而不是一堆没用的调用栈，我连续打几次都不是自己写的方法的调用栈，这时候我觉得一定有什么技巧，而我不知道。2，interrunpts --&gt; softirqs 怎么对应，我知道interrunpts 逻辑终端号是 45，中断设备是网卡，在softirqs中没有找到45这个号，里面只有网卡设备模块。准备把老师的专栏，手抄一遍，然后练习一遍，然后再理解一遍","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491011,"discussion_content":"1. 这个只能多打几次，要连续。\n2. 有设备名可以对应。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586398728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193674,"user_name":"京都念慈菴","can_delete":false,"product_type":"c1","uid":1744834,"ip_address":"","ucode":"2A310A91069A5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9f/c2/3d1c2f88.jpg","comment_is_top":false,"comment_ctime":1584946775,"is_pvip":false,"replies":[{"id":"73773","content":"要监控就得用有agent。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584955273,"ip_address":"","comment_id":193674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584946775","product_id":100042501,"comment_content":"降到agent我记得在华为云控制台要监控服务器就是安装了这个东西的","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488616,"discussion_content":"要监控就得用有agent。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584955273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190641,"user_name":"目标就是这么明确","can_delete":false,"product_type":"c1","uid":1346511,"ip_address":"","ucode":"6CA13D91C57C26","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkXmlsKCY7hhNIjJFd0wxtd7CDySRrvdknyUoZd02vUWq4o1HS6r8y5nAAcCypvuxDdQK5BGV4Eg/132","comment_is_top":false,"comment_ctime":1584675247,"is_pvip":false,"replies":[{"id":"73284","content":"多谢支持。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584683133,"ip_address":"","comment_id":190641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584675247","product_id":100042501,"comment_content":"清晰","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488020,"discussion_content":"多谢支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584683133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189507,"user_name":"董飞","can_delete":false,"product_type":"c1","uid":1693828,"ip_address":"","ucode":"4A4A13C4A971E3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6Be8vjNk03LEXMl52vONOQvdKTL1MWPR6OsAGEDsHIZXw9FibW8c4YtNL6HAmB8wRkDNIEx15xawJ9PWLW4y1UA/132","comment_is_top":false,"comment_ctime":1584523728,"is_pvip":false,"replies":[{"id":"73050","content":"这个？你就得去买本语言类的优化书看看了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584545748,"ip_address":"","comment_id":189507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584523728","product_id":100042501,"comment_content":"越来越看不懂了，老师，推荐下这方面的资料。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487714,"discussion_content":"这个？你就得去买本语言类的优化书看看了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584545748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182494,"user_name":"顺利","can_delete":false,"product_type":"c1","uid":1618652,"ip_address":"","ucode":"C904941C8BA6DA","user_header":"https://static001.geekbang.org/account/avatar/00/18/b2/dc/67e0e985.jpg","comment_is_top":false,"comment_ctime":1582795904,"is_pvip":false,"replies":[{"id":"70651","content":"请看《06丨倾囊相授：我毕生所学的性能分析思路都在这里了》中响应时间的拆分部分，这是一个拆分时间的思路，用的工具不局限于某一个。<br>比如skywalking就可以看到服务拆分的时间。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1582807040,"ip_address":"","comment_id":182494,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582795904","product_id":100042501,"comment_content":"分段拆分时间如何做呢老师，没找到前面的相应内容。有什么工具吗？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485353,"discussion_content":"请看《06丨倾囊相授：我毕生所学的性能分析思路都在这里了》中响应时间的拆分部分，这是一个拆分时间的思路，用的工具不局限于某一个。\n比如skywalking就可以看到服务拆分的时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582807040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179576,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1582033998,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582033998","product_id":100042501,"comment_content":"打时间戳呀","like_count":0,"discussions":[{"author":{"id":1785980,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/40/7c/43bafeb8.jpg","nickname":"善行通","note":"","ucode":"AC9159314DEA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201822,"discussion_content":"SpringBoot通过AOP实现系统日志记录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583842360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}