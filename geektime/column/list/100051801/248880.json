{"id":248880,"title":"19 | 设计模式（上）：C++与设计模式有啥关系？","content":"<p>你好，我是Chrono。</p><p>今天，我们进入最后的“总结”单元，把前面学到的这些知识上升到“理论结合实践”的高度，做个归纳整理。我们先来了解一下设计模式和设计原则，然后再把理论“落地”，综合利用所有知识点，设计并开发出一个实际的服务器应用。</p><p>你可能会问了：我们这是个C++的课程，为什么还要专门来讲设计模式呢？</p><p>我觉得，设计模式是一门通用的技术，是指导软件开发的“金科玉律”，它不仅渗透进了C++语言和库的设计（当然也包括其他编程语言），而且也是成为高效C++程序员必不可缺的“心法”和“武器”。</p><p>掌握了它们，理解了语言特性、库和工具后面的设计思想，你就可以做到“知其然，更知其所以然”，然后以好的用法为榜样，以坏的用法为警示，扬长避短，从而更好地运用C++。</p><p>所以，我把我这些年的实践经验进行了提炼和总结，糅合成了两节课，帮你快速掌握，并且用好设计模式，写出高效、易维护的代码。这节课，我会先讲一讲学好设计模式的核心方法，下节课，我们再讲在C++里具体应用了哪些设计模式。</p><h2>为什么要有设计模式？</h2><p>虽然C++支持多范式编程，但面向对象毕竟还是它的根基，而且，面向对象编程也通用于当前各种主流的编程语言。所以，学好、用好面向对象，对于学好C++来说，非常有用。</p><!-- [[[read_end]]] --><p>但是，想要得到良好的面向对象设计，并不是一件容易的事情。</p><p>因为每个人自身的能力、所在的层次、看问题的角度都不同，仅凭直觉“对现实建模”，很有可能会生成一些大小不均、职责不清、关系混乱的对象，最后搭建出一个虽然可以运行，但却难以理解、难以维护的系统。</p><p>所以，设计模式就是为此而生的。</p><p>它系统地描述了一些软件开发中的常见问题、应用场景和对应的解决方案，给出了<strong>专家级别的设计思路和指导原则</strong>。</p><p>按照设计模式去创建面向对象的系统，就像是由专家来“手把手”教你，不能说绝对是“最优解”，但至少是“次优解”。</p><p>而且，在应用设计模式的过程中，你还可以从中亲身体会这些经过实际证明的成功经验，潜移默化地影响你自己思考问题的方式，从长远来看，学习和应用设计模式能够提高你的面向对象设计水平。</p><h2>学习、理解设计模式，才能用好面向对象的C++</h2><p>经典的《设计模式》一书里面介绍了23个模式，并依据设计目的把它们分成了三大类：创建型模式、结构型模式和行为模式。</p><p>这三类模式分别对应了开发面向对象系统的三个关键问题：<strong>如何创建对象、如何组合对象，以及如何处理对象之间的动态通信和职责分配</strong>。解决了这三大问题，软件系统的“架子”也就基本上搭出来了。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/94/7568cdf68c4922e41188cd274a01c294.jpg?wh=1668*3387\" alt=\"\"></p><p>23个模式看起来好像不是很多，但它们的内涵和外延都是非常丰富的，不然也不会有数不清的论文、书刊研究它们了，所以，我们要从多角度、多方面去评价、审视模式。</p><p>那该怎么做才好呢？</p><p>你可以看一下《设计模式》的原书，它用了一个很全面的体例来描述模式，包括名称、别名、动机、结构、示例、效果、相关模式，等等。</p><p>虽然显得有点琐碎、啰唆，但我们必须要承认，这种严谨、甚至是有些刻板的方式能够全方位、无死角地介绍模式，强迫你从横向、纵向、深层、浅层、抽象、具体等各个角度来研究、思考。只有在这个过程中，你才能真正掌握设计模式的内核。</p><p>模式里的结构和实现方式直接表现为代码，可能是最容易学习的部分，但我认为，其实这些反而是最不重要的。</p><p><strong>你更应该去关注它的参与者、设计意图、面对的问题、应用的场合、后续的效果等代码之外的部分，它们通常比实现代码更重要</strong>。</p><p>因为代码是“死”的，只能限定由某几种语言实现，而模式发现问题、分析问题、解决问题的思路是“活”的，适用性更广泛，这种思考“What、Where、When、Why、How”并逐步得出结论的过程，才是设计模式专家经验的真正价值。</p><p>理解了这些内容，我们就可以应用在C++面向对象编程里了。下节课，我会具体给你讲一讲在C++里，这些该怎么用。</p><h2>学习、理解设计原则，才能用好多范式的C++</h2><p>可能你在学习设计模式的时候还是有些困惑，设计模式是专家经验的总结不假，但专家们是如何察觉、发现、探索出这些模式的呢？</p><p>而且模式真的完全只是“模式”、固定的“套路”，有没有什么更一般的思想来指导我们呢？换句话说，有没有“设计‘设计模式’的模式”呢？</p><p>嗯，这个真的有（笑）。</p><p>其实，这些更高层次的指导思想你可能也听说过，它们被通称为“设计原则”。</p><p>最常用有5个原则，也就是常说的“SOLID”。</p><ol>\n<li>SRP，单一职责（Single ResponsibilityPrinciple）；</li>\n<li>OCP，开闭（Open Closed Principle）；</li>\n<li>LSP，里氏替换（Liskov Substitution Principle）；</li>\n<li>ISP，接口隔离（Interface-Segregation Principle）；</li>\n<li>DIP，依赖反转，有的时候也叫依赖倒置（Dependency Inversion Principle）。</li>\n</ol><p>不过可能是因为我最先接触、研究的是设计模式，所以后来再看到这些原则的时候，“认同感”就没有那么强烈了。</p><p>虽然它们都说得很对，但没有像设计模式那样给出完整、准确的论述。所以，我觉得它们有点“飘”，缺乏可操作性，在实践中不好把握使用的方式。</p><p>但另一方面，这些原则也确实提炼出了软件设计里最本质、最基本的东西，就好像是欧几里得五公设、牛顿三定律一样，初看上去似乎很浅显直白，但仔细品品，就会发现，可以应用到任何系统里，所以了解它们还是很有必要的。</p><p>下面我就来讲讲对设计原则的一些理解和看法，再结合C++和设计模式，帮你来加深认识，进而在C++里实际用好它们。</p><p>第一个，<strong>单一职责原则</strong>，简单来说就是“<strong>不要做多余的事</strong>”，更常见的说法就是“<strong>高内聚低耦合</strong>”。在设计类的时候，要尽量缩小“粒度”，功能明确单一，不要设计出“大而全”的类。</p><p>使用单一职责原则，经常会得到很多“短小精悍”的对象，这时候，就需要应用设计模式来组合、复用它们了，比如，使用工厂来分类创建对象、使用适配器、装饰、代理来组合对象、使用外观来封装批量的对象。</p><p>单一职责原则的一个反例是C++标准库里的字符串类string（参见<a href=\"https://time.geekbang.org/column/article/242603\">第11讲</a>），它集成了字符串和字符容器的双重身份，接口复杂，让人无所适从（所以，我们应该只把它当作字符串，而把字符容器的工作交给<code>vector&lt;char&gt;</code>）。</p><p>第二个是<strong>开闭原则</strong>，它也许是最“模糊”的设计原则了，通常的表述是“<strong>对扩展开放，对修改关闭</strong>”，但没有说具体该怎么做，跟没说一样。</p><p>我觉得，你可以反过来理解这个原则，在设计类的时候问一下自己，这个类封装得是否足够好，是否可以不改变源码就能够增加新功能。如果答案是否定的（要改源码），那就说明违反了开闭原则。</p><p><strong>应用开闭原则的关键是做好封装</strong>，隐藏内部的具体实现细节，然后开放足够的接口，这样外部的客户代码就可以只通过接口去扩展功能，而不必侵入类的内部。</p><p>你可以在一些结构型模式和行为模式里找到开闭原则的“影子”：比如桥接模式让接口保持稳定，而另一边的实现任意变化；又比如迭代器模式让集合保持稳定，改变访问集合的方式只需要变动迭代器。</p><p>C++语言里的final关键字（<a href=\"https://time.geekbang.org/column/article/235301\">第5讲</a>）也是实践开闭原则的“利器”，把它用在类和成员函数上，就可以有效地防止子类的修改。</p><p>第三个原则是<strong>里氏替换原则</strong>，意思是<strong>子类必须能够完全替代父类</strong>。</p><p>这个原则还是比较好理解的，就是说子类不能改变、违反父类定义的行为。像在第5讲里说的正方形、鸟类的例子，它们就是违反了里氏替换原则。</p><p>不过，因为C++支持泛型编程，而且我也不建议多用继承，所以在C++里你只要了解一下它就好。</p><p>第四个是<strong>接口隔离原则</strong>，它和单一职责原则有点像，但侧重点是对外的接口而不是内部的功能，目标是<strong>尽量简化、归并给外界调用的接口</strong>，避免写出大而不当的“面条类”。</p><p>大多数结构型模式都可以用来实现接口隔离，比如，使用适配器来转换接口，使用装饰模式来增加接口，使用外观来简化复杂系统的接口。</p><p>第五个原则是<strong>依赖反转原则</strong>，个人觉得是一个比较难懂的原则，我的理解是<strong>上层要避免依赖下层的实现细节，下层要反过来依赖上层的抽象定义</strong>，说白了，大概就是“解耦”吧。</p><p>模板方法模式可以算是比较明显的依赖反转的例子，父类定义主要的操作步骤，子类必须遵照这些步骤去实现具体的功能。</p><p>如果单从“解耦”的角度来理解的话，存在上下级调用关系的设计模式都可以算成是依赖反转，比如抽象工厂、桥接、适配器。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/ca/c257c85fc3c5aefbfcdfb8d3ecb4b9ca.jpg?wh=2326*2305\" alt=\"\"></p><p>除了SOLID这五个之外，我觉得还有两个比较有用：DRY（Don’t Repeate Yourself）和KISS（Keep It Simple Stupid）。</p><p>它们的含义都是要让代码尽量保持简单、简洁，避免重复的代码，这在C++里可以有很多方式去实现，比如用宏代替字面值，用lambda表达式就地定义函数，多使用容器、算法和第三方库。</p><h2>小结</h2><p>好了，今天就到这里吧，我从比较“宏观”的层面说了设计模式和设计原则。</p><p>其实这些就是对我们实际开发经验的高度浓缩和总结。理解掌握了这些经验，你就会始终保持着清醒的头脑，在写C++代码的过程中有意识地去发现、应用模式，设计出好的结构，对坏的代码进行重构。</p><p>小结一下这节课的要点：</p><ol>\n<li>面向对象是主流编程范式，使用设计模式可以比较容易地得到良好的面向对象设计；</li>\n<li>经典的设计模式有23个，分成三大类：创建型模式、结构型模式和行为模式；</li>\n<li>应该从多角度、多方面去研究设计模式，多关注代码之外的部分，学习解决问题的思路；</li>\n<li>设计原则是设计模式之上更高层面的指导思想，适用性强，但可操作性弱，需要多在实践中体会；</li>\n<li>最常用的五个设计原则是“SOLID”，此外，还有“DRY”和“KISS”。</li>\n</ol><p>不过，我还要特别提醒你，设计模式虽然很好，但它绝不是包治百病的“灵丹妙药”。如果不论什么项目都套上设计模式，就很容易导致过度设计，反而会增加复杂度，僵化系统。</p><p>对于我们C++程序员来说，更是要清楚地认识到这一点，因为在C++里，不仅有面向对象编程，还有泛型编程和函数式编程等其他范式，所以领会它的思想，在恰当的时候改用模板/泛型/lambda来替换“纯”面向对象，才是使用设计模式的最佳做法。</p><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你觉得使用设计模式有什么好处？</li>\n<li>你是怎么理解SOLID设计原则的？哪个对你最有指导意义？</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/c0/363f39702c4f6788b6b56d96881650c0.png?wh=2000*2440\" alt=\"\"></p>","comments":[{"had_liked":false,"id":227602,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1592441534,"is_pvip":false,"replies":[{"id":"83859","content":"说的非常好，里面的观点我都深有同感。<br><br>学编程，必须要学设计模式，领会它的内在思想，才能提升自己的编程功力，才能往上走。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592443932,"ip_address":"","comment_id":227602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"113261591230","product_id":100051801,"comment_content":"编程语言只是外家功夫，练得再好也像在使蛮力，设计模式才是内功心法，算是可以让编程能力从coding到programming的良方；但是用好设计模式真的不容易，很多人告诉我用的最熟的设计模式是单例模式，这让我哭笑不得，并不是看不上单例，实在是因为单例模式并不能很好的体验设计模式的精髓。个人理解的设计模式是能脱离了代码实际，向更高维度的项目工程化进阶的利器，让我们可以更好的组织和维护代码，迭代需求。但是在国内总觉得大环境比较缺失。<br>和设计对应的是过度设计，这个老师也有提到了kiss 和 dry原则。另外我想补充一下YAGNI（YOU AREN&#39;T GONNA NEED IT）原则，这虽然是极限开发里的原则，但是设计上也是适用的，不要设计或者编写现在还没有用上的代码或者功能，你可能永远用不上它，这对习惯了yp（复制 粘贴）的程序员来说是个噩梦，因为他们可能连注释都会贴上去交差，遑论“多余”的代码了。<br>最后很感叹老师的行文取舍，没有去大书特书具体的设计模式，而是重点强调那几个原则，具体的设计模式必然是遵循这些原则的。把具体的设计模式区分的太好，也容易陷入强行搭架子的误区，只有真正理解了设计的原则，能让你放下模式化的执念，回归设计的本质，就像是太极一样，形散而意不散。","like_count":26,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498711,"discussion_content":"说的非常好，里面的观点我都深有同感。\n\n学编程，必须要学设计模式，领会它的内在思想，才能提升自己的编程功力，才能往上走。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592443932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227642,"user_name":"Confidant.","can_delete":false,"product_type":"c1","uid":1660039,"ip_address":"","ucode":"6E137F863906B0","user_header":"https://static001.geekbang.org/account/avatar/00/19/54/87/3b1f9de4.jpg","comment_is_top":false,"comment_ctime":1592448216,"is_pvip":false,"replies":[{"id":"83908","content":"设计模式描述的是对象之间的关系，可能画出uml图来能够更好地帮助理解。<br><br>可以在写代码的时候多想想，如果需求、环境发生了变化，我们的代码能否不改或者少改就能适应变化，这就是设计模式发挥作用的地方。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592450271,"ip_address":"","comment_id":227642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18772317400","product_id":100051801,"comment_content":"设计模式感觉非常的玄，第一次觉得自己稍微理解了一些设计模式的皮毛的时候，是对编译链接的内容有了一些体会，发现使用设计模式，可以在编译代码的时候，只编译增量的部分，从而达到修改原来功能的效果，大概体会到设计模式中对于应对变化的一些实际效果，不过实际写代码的过程中，倒是还没有到能随时把设计模式或者这些设计思想应用到自己的代码中的功底。","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498731,"discussion_content":"设计模式描述的是对象之间的关系，可能画出uml图来能够更好地帮助理解。\n\n可以在写代码的时候多想想，如果需求、环境发生了变化，我们的代码能否不改或者少改就能适应变化，这就是设计模式发挥作用的地方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592450271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231024,"user_name":"董尚斌","can_delete":false,"product_type":"c1","uid":1195545,"ip_address":"","ucode":"9582217F65C1C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/3e/19/873abe8a.jpg","comment_is_top":false,"comment_ctime":1593567654,"is_pvip":false,"replies":[{"id":"85330","content":"可以参考一下第5讲，继承用多了会导致庞大复杂的类体系，不灵活，难以维护。<br><br>C++支持多范式，使用泛型可以减少继承的使用，复用代码更加简单，是松耦合。<br><br>这个还需要在实践中多体会，当然这个也不是绝对的，在C++里怎么用都可以，这只是我的个人推荐。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593569067,"ip_address":"","comment_id":231024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14478469542","product_id":100051801,"comment_content":"为啥c++少用继承多用泛型？这个不是很理解","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500123,"discussion_content":"可以参考一下第5讲，继承用多了会导致庞大复杂的类体系，不灵活，难以维护。\n\nC++支持多范式，使用泛型可以减少继承的使用，复用代码更加简单，是松耦合。\n\n这个还需要在实践中多体会，当然这个也不是绝对的，在C++里怎么用都可以，这只是我的个人推荐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593569067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227706,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1592459378,"is_pvip":false,"replies":[{"id":"83928","content":"设计模式就要多用、多思考，必须在实践中才能学到，看书看资料还是比较难领会其中的精髓的。<br><br>但有书能够让你少走弯路，快速找到好的设计，避免摸索的成本。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592465586,"ip_address":"","comment_id":227706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10182393970","product_id":100051801,"comment_content":"设计模式是程序员的内功，学会设计模式并在实战中用到，会让你的程序变的很灵活，有种未雨绸缪的感觉。<br>设计模式都是前人实战留下的经典，好比三十六计一样，智者才能巧用啊。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498756,"discussion_content":"设计模式就要多用、多思考，必须在实践中才能学到，看书看资料还是比较难领会其中的精髓的。\n\n但有书能够让你少走弯路，快速找到好的设计，避免摸索的成本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592465586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227658,"user_name":"Weining Cao","can_delete":false,"product_type":"c1","uid":1026955,"ip_address":"","ucode":"6E3DB699A41518","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/8b/fdb853c4.jpg","comment_is_top":false,"comment_ctime":1592450107,"is_pvip":false,"replies":[{"id":"83929","content":"用宏代替字面量只是C++里的一种用法，不是特别提倡，但用起来也不错，这个完全看个人或者团队是否能够达成一致。<br><br>比如说，用C和C++混合编程，有的接口会导出成C的形式，那么用宏就很合理了。<br><br>关于宏带来的问题和它的恶名也都是众所皆知的了，我也是推荐尽量少用宏，用来定义常量还可以，要是写复杂的宏替换、宏函数就不是特别好了，会很影响可读性。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592465750,"ip_address":"","comment_id":227658,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10182384699","product_id":100051801,"comment_content":"老师设计模式总结得很好。只是有一点我觉得有点疑惑：用宏代替字面量 真的是一个好的实践吗？ 另外我理解宏定义能够减少代码量，但它也带来很不好的问题是它基本没法调试。 不知道老师有没有推荐的方法或者工具能够帮助调试C++的宏或者自动展开C++的宏变成清晰易于理解的源码？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498737,"discussion_content":"用宏代替字面量只是C++里的一种用法，不是特别提倡，但用起来也不错，这个完全看个人或者团队是否能够达成一致。\n\n比如说，用C和C++混合编程，有的接口会导出成C的形式，那么用宏就很合理了。\n\n关于宏带来的问题和它的恶名也都是众所皆知的了，我也是推荐尽量少用宏，用来定义常量还可以，要是写复杂的宏替换、宏函数就不是特别好了，会很影响可读性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592465750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227625,"user_name":"九三","can_delete":false,"product_type":"c1","uid":1454691,"ip_address":"","ucode":"7D093ED7273CBE","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/63/fa24f92e.jpg","comment_is_top":false,"comment_ctime":1592444248,"is_pvip":false,"replies":[{"id":"83895","content":"严格来说，设计模式是用于面向对象的，但面向过程也可以利用抽象和封装模拟面向对象，所以设计模式也能够用在面向过程。<br><br>而函数式编程与面向对象的差异就比较大了，所以不能应用大多数模式。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592446761,"ip_address":"","comment_id":227625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10182378840","product_id":100051801,"comment_content":"设计模式是作用在 编程范式如 函数式 面向对象 面向过程等这些范式上吗","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498722,"discussion_content":"严格来说，设计模式是用于面向对象的，但面向过程也可以利用抽象和封装模拟面向对象，所以设计模式也能够用在面向过程。\n\n而函数式编程与面向对象的差异就比较大了，所以不能应用大多数模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592446761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316594,"user_name":"木鱼","can_delete":false,"product_type":"c1","uid":1227554,"ip_address":"","ucode":"B81CA3546BA344","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/22/a81a22d5.jpg","comment_is_top":false,"comment_ctime":1634438309,"is_pvip":true,"replies":[{"id":"114649","content":"great","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1634516671,"ip_address":"","comment_id":316594,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5929405605","product_id":100051801,"comment_content":"SRP: 保持功能单一，代码易写，易测<br>OCP：建议使用组合的方式来支持扩展，而不是继承（能组合就组合）<br>LSP：子类需要拥有父类所有特性<br>ISP: 依赖接口而非实现<br>DIP: don&#39;t call me, i will call you(IOC是dip的一种实现), 最终强调的其实是对象间的依赖关系调整, 从原有的直接关联, 变为中间依赖, 进而方便替换","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528427,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634516671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227842,"user_name":"黄骏","can_delete":false,"product_type":"c1","uid":1849733,"ip_address":"","ucode":"3C41D02F4F712C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/39/85/c6110f83.jpg","comment_is_top":false,"comment_ctime":1592492856,"is_pvip":true,"replies":[{"id":"84020","content":"设计模式就是开发软件的经典“套路”，按照这个“套路”来搭建系统，就能够得到良好的设计。<br><br>但“套路”用得多了，也会渐渐地发现不足，就会想突破“套路”。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592528399,"ip_address":"","comment_id":227842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887460152","product_id":100051801,"comment_content":"设计模式，在考高级架构师时有涉及，后面的工作中也遇到一些，比如，单例，访问者，观察者等，设计模式有点类似写作文，比如，议论文的三段法等。确实能避免很多问题","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498802,"discussion_content":"设计模式就是开发软件的经典“套路”，按照这个“套路”来搭建系统，就能够得到良好的设计。\n\n但“套路”用得多了，也会渐渐地发现不足，就会想突破“套路”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592528399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356043,"user_name":"甘康艺","can_delete":false,"product_type":"c1","uid":1953633,"ip_address":"北京","ucode":"D06219B5C592CF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/cf/61/f592700e.jpg","comment_is_top":false,"comment_ctime":1661931926,"is_pvip":false,"replies":[{"id":"129577","content":"thanks a lot。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661935210,"ip_address":"北京","comment_id":356043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661931926","product_id":100051801,"comment_content":"设计模式不仅仅适用于计算机编程，感觉这门课程的设计起码用到了“DRY”和“KISS”","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586010,"discussion_content":"thanks a lot。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661935210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316591,"user_name":"木鱼","can_delete":false,"product_type":"c1","uid":1227554,"ip_address":"","ucode":"B81CA3546BA344","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/22/a81a22d5.jpg","comment_is_top":false,"comment_ctime":1634438103,"is_pvip":true,"replies":[{"id":"114647","content":"great","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1634516591,"ip_address":"","comment_id":316591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634438103","product_id":100051801,"comment_content":"solid","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528425,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634516591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304396,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1627386083,"is_pvip":false,"replies":[{"id":"110313","content":"<br>1。对，设计模式对人之间交流更重要。<br>2。设计原则比较虚，要尽量和实践结合才能用好。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1627712861,"ip_address":"","comment_id":304396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627386083","product_id":100051801,"comment_content":"1.你觉得使用设计模式有什么好处？<br>(1)让代码设计更合理,因为有之前大师的经验,在适合场景去使用对应的模式就能够起到好的效果.(2)让代码的逻辑更清晰,一提到使用了这样的模式,别人大致就能猜出代码的逻辑是怎样的.<br>(3)更好的理解设计模式.只有把它们用起来,才能够更好的理解这些.<br><br>2.你是怎么理解 SOLID 设计原则的？哪个对你最有指导意义？<br>大概和常说的高内聚,低耦合类似,为了让代码能够更好的重用.用的比较多的是单一职责,设计类时要职责明确,不能大而全,否则就不清楚它的作用是什么了.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524031,"discussion_content":"\n1。对，设计模式对人之间交流更重要。\n2。设计原则比较虚，要尽量和实践结合才能用好。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627712861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245806,"user_name":"帝皓27","can_delete":false,"product_type":"c1","uid":2048316,"ip_address":"","ucode":"82586223E3C457","user_header":"https://static001.geekbang.org/account/avatar/00/1f/41/3c/eec7fc7c.jpg","comment_is_top":false,"comment_ctime":1599059237,"is_pvip":false,"replies":[{"id":"90393","content":"说的很对，就是尽量以不变应万变，减少代码变动带来的风险。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1599094955,"ip_address":"","comment_id":245806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599059237","product_id":100051801,"comment_content":"我的理解设计模式是从更长远，更高维的角度去考虑功能的实现方式，让代码更灵活、易于使用、易于扩展。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504988,"discussion_content":"说的很对，就是尽量以不变应万变，减少代码变动带来的风险。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599094955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245533,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1598969406,"is_pvip":true,"replies":[{"id":"90311","content":"good","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1599008752,"ip_address":"","comment_id":245533,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598969406","product_id":100051801,"comment_content":"你觉得使用设计模式有什么好处？<br>1、对问题思考和建模的方式，合适的建模会让项目的复杂度和可维护性变强<br><br>你是怎么理解 SOLID 设计原则的？哪个对你最有指导意义？<br>1、指导性原则<br>2、OCP，用组合来扩展","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504911,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599008752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231752,"user_name":"Geek_89bbab","can_delete":false,"product_type":"c1","uid":1156607,"ip_address":"","ucode":"B3110D5B3C9500","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/ff/6201122c.jpg","comment_is_top":false,"comment_ctime":1593764923,"is_pvip":false,"replies":[{"id":"85620","content":"dip应该包含ioc吧，用C++比较多，对Java系的不是很清楚，抱歉了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593831330,"ip_address":"","comment_id":231752,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593764923","product_id":100051801,"comment_content":"DIP（依赖反转）和sprinfDg的IOC （控制反转）有什么区别？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500427,"discussion_content":"dip应该包含ioc吧，用C++比较多，对Java系的不是很清楚，抱歉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593831330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228676,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1592787271,"is_pvip":false,"replies":[{"id":"84324","content":"设计模式比较抽象，不像C++语言那么好学，有疑问、不清楚的，可以随时留言，一起讨论。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592790441,"ip_address":"","comment_id":228676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592787271","product_id":100051801,"comment_content":"每次读老师的文字都很舒服， 就好像老师就坐在对面和你娓娓道来。 厉害👍，希望再多出些专栏","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499142,"discussion_content":"设计模式比较抽象，不像C++语言那么好学，有疑问、不清楚的，可以随时留言，一起讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592790441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228503,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1592716448,"is_pvip":false,"replies":[{"id":"84241","content":"说的很对，有的模式也会同时符合多个原则。<br><br>模式的应用范围也是可大可小，架构里可以用，代码里也可以用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592722248,"ip_address":"","comment_id":228503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592716448","product_id":100051801,"comment_content":"我觉得 模板模式也可以算作遵循OCP的设计原则，这个模式在满足基本业务逻辑的同时，通过关键环节的扩展点，方便后续的扩展优化；<br>设计模式的出现是应对复杂系统问题，让复杂的系统的维护不至于超出程序员的掌控，这个角度讲，软件系统规模大到一定程度，就需要借助设计模式，让系统复杂度控制某个范围，例如某个模块，某个类等等；<br>大的软件开发，一开始会有架构师对软件有个基本的设计，在过程中还会引入一些设计模式，解构代码，保证软件的可读性和可维护性。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499056,"discussion_content":"说的很对，有的模式也会同时符合多个原则。\n\n模式的应用范围也是可大可小，架构里可以用，代码里也可以用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592722248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}