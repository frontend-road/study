{"id":91292,"title":"23 | Future：如何用多线程实现最优的“烧水泡茶”程序？","content":"<p>在上一篇文章<a href=\"https://time.geekbang.org/column/article/90771\">《22 | Executor与线程池：如何创建正确的线程池？》</a>中，我们详细介绍了如何创建正确的线程池，那创建完线程池，我们该如何使用呢？在上一篇文章中，我们仅仅介绍了ThreadPoolExecutor的 <code>void execute(Runnable command)</code> 方法，利用这个方法虽然可以提交任务，但是却没有办法获取任务的执行结果（execute()方法没有返回值）。而很多场景下，我们又都是需要获取任务的执行结果的。那ThreadPoolExecutor是否提供了相关功能呢？必须的，这么重要的功能当然需要提供了。</p><p>下面我们就来介绍一下使用ThreadPoolExecutor的时候，如何获取任务执行结果。</p><h2>如何获取任务执行结果</h2><p>Java通过ThreadPoolExecutor提供的3个submit()方法和1个FutureTask工具类来支持获得任务执行结果的需求。下面我们先来介绍这3个submit()方法，这3个方法的方法签名如下。</p><pre><code>// 提交Runnable任务\nFuture&lt;?&gt; \n  submit(Runnable task);\n// 提交Callable任务\n&lt;T&gt; Future&lt;T&gt; \n  submit(Callable&lt;T&gt; task);\n// 提交Runnable任务及结果引用  \n&lt;T&gt; Future&lt;T&gt; \n  submit(Runnable task, T result);\n</code></pre><p>你会发现它们的返回值都是Future接口，Future接口有5个方法，我都列在下面了，它们分别是<strong>取消任务的方法cancel()、判断任务是否已取消的方法isCancelled()、判断任务是否已结束的方法isDone()<strong>以及</strong>2个获得任务执行结果的get()和get(timeout, unit)</strong>，其中最后一个get(timeout, unit)支持超时机制。通过Future接口的这5个方法你会发现，我们提交的任务不但能够获取任务执行结果，还可以取消任务。不过需要注意的是：这两个get()方法都是阻塞式的，如果被调用的时候，任务还没有执行完，那么调用get()方法的线程会阻塞，直到任务执行完才会被唤醒。</p><!-- [[[read_end]]] --><pre><code>// 取消任务\nboolean cancel(\n  boolean mayInterruptIfRunning);\n// 判断任务是否已取消  \nboolean isCancelled();\n// 判断任务是否已结束\nboolean isDone();\n// 获得任务执行结果\nget();\n// 获得任务执行结果，支持超时\nget(long timeout, TimeUnit unit);\n</code></pre><p>这3个submit()方法之间的区别在于方法参数不同，下面我们简要介绍一下。</p><ol>\n<li>提交Runnable任务 <code>submit(Runnable task)</code> ：这个方法的参数是一个Runnable接口，Runnable接口的run()方法是没有返回值的，所以 <code>submit(Runnable task)</code> 这个方法返回的Future仅可以用来断言任务已经结束了，类似于Thread.join()。</li>\n<li>提交Callable任务 <code>submit(Callable&lt;T&gt; task)</code>：这个方法的参数是一个Callable接口，它只有一个call()方法，并且这个方法是有返回值的，所以这个方法返回的Future对象可以通过调用其get()方法来获取任务的执行结果。</li>\n<li>提交Runnable任务及结果引用 <code>submit(Runnable task, T result)</code>：这个方法很有意思，假设这个方法返回的Future对象是f，f.get()的返回值就是传给submit()方法的参数result。这个方法该怎么用呢？下面这段示例代码展示了它的经典用法。需要你注意的是Runnable接口的实现类Task声明了一个有参构造函数 <code>Task(Result r)</code> ，创建Task对象的时候传入了result对象，这样就能在类Task的run()方法中对result进行各种操作了。result相当于主线程和子线程之间的桥梁，通过它主子线程可以共享数据。</li>\n</ol><pre><code>ExecutorService executor \n  = Executors.newFixedThreadPool(1);\n// 创建Result对象r\nResult r = new Result();\nr.setAAA(a);\n// 提交任务\nFuture&lt;Result&gt; future = \n  executor.submit(new Task(r), r);  \nResult fr = future.get();\n// 下面等式成立\nfr === r;\nfr.getAAA() === a;\nfr.getXXX() === x\n\nclass Task implements Runnable{\n  Result r;\n  //通过构造函数传入result\n  Task(Result r){\n    this.r = r;\n  }\n  void run() {\n    //可以操作result\n    a = r.getAAA();\n    r.setXXX(x);\n  }\n}\n</code></pre><p>下面我们再来介绍FutureTask工具类。前面我们提到的Future是一个接口，而FutureTask是一个实实在在的工具类，这个工具类有两个构造函数，它们的参数和前面介绍的submit()方法类似，所以这里我就不再赘述了。</p><pre><code>FutureTask(Callable&lt;V&gt; callable);\nFutureTask(Runnable runnable, V result);\n</code></pre><p>那如何使用FutureTask呢？其实很简单，FutureTask实现了Runnable和Future接口，由于实现了Runnable接口，所以可以将FutureTask对象作为任务提交给ThreadPoolExecutor去执行，也可以直接被Thread执行；又因为实现了Future接口，所以也能用来获得任务的执行结果。下面的示例代码是将FutureTask对象提交给ThreadPoolExecutor去执行。</p><pre><code>// 创建FutureTask\nFutureTask&lt;Integer&gt; futureTask\n  = new FutureTask&lt;&gt;(()-&gt; 1+2);\n// 创建线程池\nExecutorService es = \n  Executors.newCachedThreadPool();\n// 提交FutureTask \nes.submit(futureTask);\n// 获取计算结果\nInteger result = futureTask.get();\n</code></pre><p>FutureTask对象直接被Thread执行的示例代码如下所示。相信你已经发现了，利用FutureTask对象可以很容易获取子线程的执行结果。</p><pre><code>// 创建FutureTask\nFutureTask&lt;Integer&gt; futureTask\n  = new FutureTask&lt;&gt;(()-&gt; 1+2);\n// 创建并启动线程\nThread T1 = new Thread(futureTask);\nT1.start();\n// 获取计算结果\nInteger result = futureTask.get();\n</code></pre><h2>实现最优的“烧水泡茶”程序</h2><p>记得以前初中语文课文里有一篇著名数学家华罗庚先生的文章《统筹方法》，这篇文章里介绍了一个烧水泡茶的例子，文中提到最优的工序应该是下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/86/ce/86193a2dba88dd15562118cce6d786ce.png?wh=1142*567\" alt=\"\"></p><center><span class=\"reference\">烧水泡茶最优工序</span></center><p>下面我们用程序来模拟一下这个最优工序。我们专栏前面曾经提到，并发编程可以总结为三个核心问题：分工、同步和互斥。编写并发程序，首先要做的就是分工，所谓分工指的是如何高效地拆解任务并分配给线程。对于烧水泡茶这个程序，一种最优的分工方案可以是下图所示的这样：用两个线程T1和T2来完成烧水泡茶程序，T1负责洗水壶、烧开水、泡茶这三道工序，T2负责洗茶壶、洗茶杯、拿茶叶三道工序，其中T1在执行泡茶这道工序时需要等待T2完成拿茶叶的工序。对于T1的这个等待动作，你应该可以想出很多种办法，例如Thread.join()、CountDownLatch，甚至阻塞队列都可以解决，不过今天我们用Future特性来实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/8e/9cf7d188af9119a5e76788466b453d8e.png?wh=1142*617\" alt=\"\"></p><center><span class=\"reference\">烧水泡茶最优分工方案</span></center><p>下面的示例代码就是用这一章提到的Future特性来实现的。首先，我们创建了两个FutureTask——ft1和ft2，ft1完成洗水壶、烧开水、泡茶的任务，ft2完成洗茶壶、洗茶杯、拿茶叶的任务；这里需要注意的是ft1这个任务在执行泡茶任务前，需要等待ft2把茶叶拿来，所以ft1内部需要引用ft2，并在执行泡茶之前，调用ft2的get()方法实现等待。</p><pre><code>// 创建任务T2的FutureTask\nFutureTask&lt;String&gt; ft2\n  = new FutureTask&lt;&gt;(new T2Task());\n// 创建任务T1的FutureTask\nFutureTask&lt;String&gt; ft1\n  = new FutureTask&lt;&gt;(new T1Task(ft2));\n// 线程T1执行任务ft1\nThread T1 = new Thread(ft1);\nT1.start();\n// 线程T2执行任务ft2\nThread T2 = new Thread(ft2);\nT2.start();\n// 等待线程T1执行结果\nSystem.out.println(ft1.get());\n\n// T1Task需要执行的任务：\n// 洗水壶、烧开水、泡茶\nclass T1Task implements Callable&lt;String&gt;{\n  FutureTask&lt;String&gt; ft2;\n  // T1任务需要T2任务的FutureTask\n  T1Task(FutureTask&lt;String&gt; ft2){\n    this.ft2 = ft2;\n  }\n  @Override\n  String call() throws Exception {\n    System.out.println(&quot;T1:洗水壶...&quot;);\n    TimeUnit.SECONDS.sleep(1);\n    \n    System.out.println(&quot;T1:烧开水...&quot;);\n    TimeUnit.SECONDS.sleep(15);\n    // 获取T2线程的茶叶  \n    String tf = ft2.get();\n    System.out.println(&quot;T1:拿到茶叶:&quot;+tf);\n\n    System.out.println(&quot;T1:泡茶...&quot;);\n    return &quot;上茶:&quot; + tf;\n  }\n}\n// T2Task需要执行的任务:\n// 洗茶壶、洗茶杯、拿茶叶\nclass T2Task implements Callable&lt;String&gt; {\n  @Override\n  String call() throws Exception {\n    System.out.println(&quot;T2:洗茶壶...&quot;);\n    TimeUnit.SECONDS.sleep(1);\n\n    System.out.println(&quot;T2:洗茶杯...&quot;);\n    TimeUnit.SECONDS.sleep(2);\n\n    System.out.println(&quot;T2:拿茶叶...&quot;);\n    TimeUnit.SECONDS.sleep(1);\n    return &quot;龙井&quot;;\n  }\n}\n// 一次执行结果：\nT1:洗水壶...\nT2:洗茶壶...\nT1:烧开水...\nT2:洗茶杯...\nT2:拿茶叶...\nT1:拿到茶叶:龙井\nT1:泡茶...\n上茶:龙井\n</code></pre><h2>总结</h2><p>利用Java并发包提供的Future可以很容易获得异步任务的执行结果，无论异步任务是通过线程池ThreadPoolExecutor执行的，还是通过手工创建子线程来执行的。Future可以类比为现实世界里的提货单，比如去蛋糕店订生日蛋糕，蛋糕店都是先给你一张提货单，你拿到提货单之后，没有必要一直在店里等着，可以先去干点其他事，比如看场电影；等看完电影后，基本上蛋糕也做好了，然后你就可以凭提货单领蛋糕了。</p><p>利用多线程可以快速将一些串行的任务并行化，从而提高性能；如果任务之间有依赖关系，比如当前任务依赖前一个任务的执行结果，这种问题基本上都可以用Future来解决。在分析这种问题的过程中，建议你用有向图描述一下任务之间的依赖关系，同时将线程的分工也做好，类似于烧水泡茶最优分工方案那幅图。对照图来写代码，好处是更形象，且不易出错。</p><h2>课后思考</h2><p>不久前听说小明要做一个询价应用，这个应用需要从三个电商询价，然后保存在自己的数据库里。核心示例代码如下所示，由于是串行的，所以性能很慢，你来试着优化一下吧。</p><pre><code>// 向电商S1询价，并保存\nr1 = getPriceByS1();\nsave(r1);\n// 向电商S2询价，并保存\nr2 = getPriceByS2();\nsave(r2);\n// 向电商S3询价，并保存\nr3 = getPriceByS3();\nsave(r3);\n</code></pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","neighbors":{"left":{"article_title":"22 | Executor与线程池：如何创建正确的线程池？","id":90771},"right":{"article_title":"24 | CompletableFuture：异步编程没那么难","id":91569}},"comments":[{"had_liked":false,"id":87921,"user_name":"aroll","can_delete":false,"product_type":"c1","uid":1023524,"ip_address":"","ucode":"3A1A1267C88CC3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/24/0d6a7987.jpg","comment_is_top":false,"comment_ctime":1555754394,"is_pvip":false,"replies":[{"id":"31624","content":"好建议","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555769223,"ip_address":"","comment_id":87921,"utype":1}],"discussion_count":13,"race_medal":0,"score":"409577647514","product_id":100023901,"comment_content":"建议并发编程课程中的Demo代码，尽量少使用System.out.println, 因为其实现有使用隐式锁，一些情况还会有锁粗化产生","like_count":96,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447648,"discussion_content":"好建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555769223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349433,"discussion_content":"只说了问题，没说解决方式？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613203724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554740,"discussion_content":"我看了下，感觉其实println和print都一样，他们都调用了format里面一样有锁机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646575784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2593255,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/2msSWvJs8A6icPvUzyRs9DEqltYh0edy699wJz9BmCRoJj1bZHhBHhp4yY9Nic9oc2q8OdsVGwtmBRhKtw00Jj6Q/132","nickname":"Geek_c139e0","note":"","ucode":"87C7E07E98354B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548262,"discussion_content":"可以System.out.print(&#34;xxx&#34;) + System.out.println()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643103920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389524,"discussion_content":"这波操作，学习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629301123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046429,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","nickname":"落叶飞逝的恋","note":"","ucode":"F9A95DB28BCF1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373394,"discussion_content":"log日志输出即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620717444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","nickname":"斯盖丸","note":"","ucode":"B881D14B028F14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348282,"discussion_content":"更好的方式是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612497509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2139604,"avatar":"","nickname":"成电帅才","note":"","ucode":"DDE757138F41D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346072,"discussion_content":"厉害了，牛啤","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611849836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441895,"avatar":"https://static001.geekbang.org/account/avatar/00/16/00/67/e24dd940.jpg","nickname":"那月真美","note":"","ucode":"CEF1AF65C6064E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301869,"discussion_content":"啥意思啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598690918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1730576,"avatar":"","nickname":"27","note":"","ucode":"B5D7A54EA47206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1441895,"avatar":"https://static001.geekbang.org/account/avatar/00/16/00/67/e24dd940.jpg","nickname":"那月真美","note":"","ucode":"CEF1AF65C6064E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304093,"discussion_content":"你看下println（）方法实现，是不是带synchronized,   然后再看下out,是不是static","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599467689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301869,"ip_address":""},"score":304093,"extra":""}]},{"author":{"id":1533266,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/52/07c09c7f.jpg","nickname":"josancpp","note":"","ucode":"0CDC39B3E716A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276426,"discussion_content":"不用println中间结果怎么看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590865851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","nickname":"厉害了我的国","note":"","ucode":"CD0A54A1B998AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209874,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584684074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49306,"discussion_content":"高手！学习了，感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573570942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88160,"user_name":"vector","can_delete":false,"product_type":"c1","uid":1107266,"ip_address":"","ucode":"F42E76E8966BBE","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/42/fbe890c0.jpg","comment_is_top":false,"comment_ctime":1555861035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"242074029611","product_id":100023901,"comment_content":"最近使用CompletableFuture工具方法以及lamda表达式比较多，语言语法的变化带来编码效率的提升真的很大。","like_count":57},{"had_liked":false,"id":87806,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1555720930,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"169059445474","product_id":100023901,"comment_content":"课后题：<br>可以用 Future<br>        ExecutorService threadPoolExecutor = Executors.newFixedThreadPool(3);<br>        Future&lt;R&gt; future1 = threadPoolExecutor.submit(Test::getPriceByS1);<br>        Future&lt;R&gt; future2 = threadPoolExecutor.submit(Test::getPriceByS2);<br>        Future&lt;R&gt; future3 = threadPoolExecutor.submit(Test::getPriceByS3);<br>        R r1 = future1.get();<br>        R r2 = future2.get();<br>        R r3 = future3.get();<br><br>也可以用 CompletableFuture<br>        CompletableFuture&lt;R&gt; completableFuture1 = CompletableFuture.supplyAsync(Test::getPriceByS1);<br>        CompletableFuture&lt;R&gt; completableFuture2 = CompletableFuture.supplyAsync(Test::getPriceByS2);<br>        CompletableFuture&lt;R&gt; completableFuture3 = CompletableFuture.supplyAsync(Test::getPriceByS3);<br>        CompletableFuture.allOf(completableFuture1, completableFuture2, completableFuture3)<br>                         .thenAccept(System.out::println);<br> 老师这样理解对吗 谢谢老师","like_count":40,"discussions":[{"author":{"id":1533266,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/52/07c09c7f.jpg","nickname":"josancpp","note":"","ucode":"0CDC39B3E716A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276579,"discussion_content":"thenAccept改为join就行。三者不需要聚合，各自保存结果","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1590907509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230975,"discussion_content":"感觉是不是增加超时设置更好点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586783498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88083,"user_name":"Asanz","can_delete":false,"product_type":"c1","uid":1005200,"ip_address":"","ucode":"430AB7ED59EE3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/90/be01bb8d.jpg","comment_is_top":false,"comment_ctime":1555841707,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"96045122219","product_id":100023901,"comment_content":"不是不建议使用 Executors 创建线程池了吗？？？<br>","like_count":23,"discussions":[{"author":{"id":1691400,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/08/e9d68285.jpg","nickname":"wangzx","note":"","ucode":"3024F0A43B7A32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230392,"discussion_content":"不建议使用，是因为Executors中使用的是无界队列，高并发会导致OOM.已知线程个数还是可以使用的","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1586742513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638187,"avatar":"","nickname":"Geek_94adb8","note":"","ucode":"B142F473E1A0B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211558,"discussion_content":"ThreadPoolExecutor 的构造函数实在是有些复杂，所以 Java 并发包里提供了一个线程池的静态工厂类 Executors，不建议使用的是Executors，而不是ThreadPoolExecutor。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584864950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178380,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/0c/85d60820.jpg","nickname":"小华哥","note":"","ucode":"546EF8803E101F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579174,"discussion_content":"不建议用还是可以用的哈😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657237323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2568689,"avatar":"https://static001.geekbang.org/account/avatar/00/27/31/f1/1ff57b9d.jpg","nickname":"徐富献","note":"","ucode":"D1E901376F8D49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542042,"discussion_content":"老师没有接受自己的建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640651253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2282481,"avatar":"","nickname":"Geek_157395","note":"","ucode":"D00CBA7A104FE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351866,"discussion_content":"查看这个内部实现，还是使用了ThreadPoolExecutor","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614503230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366632,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/68/11ab05f3.jpg","nickname":"user","note":"","ucode":"D8C53679C24B61","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252447,"discussion_content":"Cached的最大线程数是Integer.MAXVALUE 有任务会无限创建线程 Fixed 和Single的工作队列是无界队列 并发大的情况可能会导致OOM ，代码是和业务走的 能预估到具体的业务量直接创建线程池也无可厚非","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588166381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/86/3be94807.jpg","nickname":"angel😇txy🤓","note":"","ucode":"C0AEE0D8BAF7ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6188,"discussion_content":"简单啊，老师想教给我们得是思路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566769068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1638187,"avatar":"","nickname":"Geek_94adb8","note":"","ucode":"B142F473E1A0B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1133702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/86/3be94807.jpg","nickname":"angel😇txy🤓","note":"","ucode":"C0AEE0D8BAF7ED","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":211560,"discussion_content":"........","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584865027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6188,"ip_address":""},"score":211560,"extra":""}]}]},{"had_liked":false,"id":148599,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1573036679,"is_pvip":false,"replies":[{"id":"57240","content":"我觉得没问题。也可以用一个线程池，把查询和保存放一个线程里。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1573047697,"ip_address":"","comment_id":148599,"utype":1}],"discussion_count":4,"race_medal":0,"score":"78882448007","product_id":100023901,"comment_content":"```\rjava<br>ExecutorService futuresPool = Executors.newFixedThreadPool(3);<br>        Future&lt;Price&gt; future1 = futuresPool.submit(this::getPriceByS1);<br>        Future&lt;Price&gt; future2 = futuresPool.submit(this::getPriceByS2);<br>        Future&lt;Price&gt; future3 = futuresPool.submit(this::getPriceByS3);<br><br>        ExecutorService saveThreadPool = Executors.newFixedThreadPool(3);<br>        saveThreadPool.execute(() -&gt; {<br>            try {<br>                Price r1= future1.get();<br>                save(r1);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            } catch (ExecutionException e) {<br>                e.printStackTrace();<br>            }<br><br>        });<br>        saveThreadPool.execute(() -&gt; {<br>            try {<br>                Price r2= future2.get();<br>                save(r2);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            } catch (ExecutionException e) {<br>                e.printStackTrace();<br>            }<br><br>        });<br>        saveThreadPool.execute(() -&gt; {<br>            try {<br>                Price r3= future3.get();<br>                save(r3);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            } catch (ExecutionException e) {<br>                e.printStackTrace();<br>            }<br>        });<br>```\r<br><br>用三个线程把这个并行执行，麻烦老师看看，谢谢","like_count":19,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473547,"discussion_content":"我觉得没问题。也可以用一个线程池，把查询和保存放一个线程里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573047697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1991586,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/63/a2/804f9572.jpg","nickname":"加雷锅","note":"","ucode":"507CC13DFBB821","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531991,"discussion_content":"既然是针对数据库保存，如果三个数值都保存在同一张表里，我觉得并发执行获得结果后，同时保存到数据库中，可以有效减少数据库的索引重建等问题，提高写入性能","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637490700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187478,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1e/96/c735ad6b.jpg","nickname":"滩涂曳尾","note":"","ucode":"40F650F2A419D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194818,"discussion_content":"老师说的是对的，因为对于同一个商家，询价和保存肯定是串行的，没有必要分割成两个线程。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583243589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3164346,"avatar":"https://static001.geekbang.org/account/avatar/00/30/48/ba/791d0f5e.jpg","nickname":"JavaLearn","note":"","ucode":"3AAFBFD34F04A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587799,"discussion_content":"有一说一看的我迷惑了一会儿，这个没必要用到Future，直接写在同一线程即可了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663297876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87799,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1555717851,"is_pvip":false,"replies":[{"id":"31610","content":"用线程池就用到了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555737777,"ip_address":"","comment_id":87799,"utype":1}],"discussion_count":3,"race_medal":0,"score":"35915456219","product_id":100023901,"comment_content":"我不知道是不是理解错老师意思了，先分析依赖有向图，可以看到三条线，没有入度&gt;1的节点<br>那么启动三个线程即可。<br>图：<br>s1询价 -&gt; s1保存  <br>s2询价 -&gt; s2保存<br>s3询价 -&gt; s3保存  <br>代码：<br>        new Thread(() -&gt; {<br>        \tr1 = getPriceByS1();<br>        \tsave(r1);<br>        }).start();<br>        new Thread(() -&gt; {<br>        \tr2 = getPriceByS2();<br>        \tsave(r2);<br>        }).start();<br>        new Thread(() -&gt; {<br>        \tr3 = getPriceByS3();<br>        \tsave(r3);<br>        }).start();<br>我觉得这里不需要future,除非询价和保存之间还有别的计算工作","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447605,"discussion_content":"用线程池就用到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555737777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45347,"discussion_content":"如果是数据库保存的话，这样得需要三次数据库连接分别保存数据，如果获取到结果后统一添加到数据的话，则一次批量操作就可以了，效率更高一些","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573026242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142239,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/df/dd536ff5.jpg","nickname":"魏斌斌","note":"","ucode":"E443EB0504CA37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1388,"discussion_content":"我觉得即使用线程池也可以不用future,在每个runnable里面保存询价结果不就行了吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562594852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104543,"user_name":"魏斌斌","can_delete":false,"product_type":"c1","uid":1142239,"ip_address":"","ucode":"E443EB0504CA37","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/df/dd536ff5.jpg","comment_is_top":false,"comment_ctime":1560774831,"is_pvip":false,"replies":[{"id":"38346","content":"可以看看操作系统原理有关线程，进程的那部分","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1561161094,"ip_address":"","comment_id":104543,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31625545903","product_id":100023901,"comment_content":"老师，我看了下futruerask的源码，当调用futrue.get()方法，其实最终会调用unsafe方法是当前线程阻塞。但是我不太理解线程阻塞到哪去了，也没看到锁。","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454317,"discussion_content":"可以看看操作系统原理有关线程，进程的那部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561161094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2602705,"avatar":"","nickname":"Geek_d1026b","note":"","ucode":"EC5A17A4CB24C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":561963,"discussion_content":"操作系统原理的看什么书 老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649753843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":454317,"ip_address":""},"score":561963,"extra":""}]},{"author":{"id":1343456,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7f/e0/b77e176e.jpg","nickname":"小宏","note":"","ucode":"08B34C89368649","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581823,"discussion_content":"LockSupport.park","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659008392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95782,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1558175137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23033011617","product_id":100023901,"comment_content":"这个可以用生产消费者模式啊","like_count":5},{"had_liked":false,"id":90566,"user_name":"Sunqc","can_delete":false,"product_type":"c1","uid":1473717,"ip_address":"","ucode":"2C54659635403F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/b5/4a7a2bd4.jpg","comment_is_top":false,"comment_ctime":1556580862,"is_pvip":false,"replies":[{"id":"32443","content":"理解的对<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1556590182,"ip_address":"","comment_id":90566,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23031417342","product_id":100023901,"comment_content":"老师，你所说的订蛋糕，我这样理解对吗，把任务提交给线程池就是让蛋糕店做蛋糕；去看电影就是主线程做其他事，提货单是对应调用future的get","like_count":5,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448571,"discussion_content":"理解的对\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556590182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90778,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1556637621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18736506805","product_id":100023901,"comment_content":"分别提交三个futuretask给线程池，然后最后分别get出结果，统一进行保存数据库","like_count":4},{"had_liked":false,"id":88589,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1555948523,"is_pvip":false,"replies":[{"id":"31773","content":"没问题，就是有点复杂，代码还可以精简一下<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555978597,"ip_address":"","comment_id":88589,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14440850411","product_id":100023901,"comment_content":"课后习题，老师帮忙看下哦<br>public class ExecutorExample {<br>private static final ExecutorService executor;<br>    static {executor = new ThreadPoolExecutor(4, 8, 1, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(1000), runnable -&gt; null, (r, executor) -&gt; {&#47;&#47;根据业务降级策略});<br>}<br>static class S1Task implements Callable&lt;String&gt; {<br>        @Override<br>        public String call() throws Exception {return getPriceByS1();}}<br>    static class S2Task implements Callable&lt;String&gt; {<br>        @Overridepublic String call() throws Exception {return getPriceByS2();}}<br>    static class S3Task implements Callable&lt;String&gt; {@Override public String call() throws Exception {return getPriceByS3();}}<br>    static class SaveTask implements Callable&lt;Boolean&gt; {private List&lt;FutureTask&lt;String&gt;&gt; futureTasks; public SaveTask(List&lt;FutureTask&lt;String&gt;&gt; futureTasks) {this.futureTasks = futureTasks;<br>}<br>        @Override<br>        public Boolean call() throws Exception {<br>            for (FutureTask&lt;String&gt; futureTask : futureTasks) {<br>                String data = futureTask.get(10, TimeUnit.SECONDS);<br>                saveData(data);<br>            }<br>            return Boolean.TRUE;<br>        }<br>    }<br>    private static String getPriceByS1() {<br>        return &quot;fromDb1&quot;;<br>    }<br>    private static String getPriceByS2() {<br>        return &quot;fromDb2&quot;;<br>    }<br>    private static String getPriceByS3() {<br>        return &quot;fromDb3&quot;;<br>    }<br>    private static void saveData(String data) {<br>        &#47;&#47;save data to db<br>    }<br>    public static void main(String[] args) {<br>        S1Task s1Task = new S1Task();FutureTask&lt;String&gt; st1 = new FutureTask&lt;&gt;(s1Task);S2Task s2Task = new S2Task();FutureTask&lt;String&gt; st2 = new FutureTask&lt;&gt;(s2Task);S3Task s3Task = new S3Task();FutureTask&lt;String&gt; st3 = new FutureTask&lt;&gt;(s3Task);List&lt;FutureTask&lt;String&gt;&gt; futureTasks = Lists.&lt;FutureTask&lt;String&gt;&gt;newArrayList(st1, st2, st3);FutureTask&lt;Boolean&gt; saveTask = new FutureTask&lt;&gt;(new SaveTask(futureTasks));executor.submit(st1);executor.submit(st2);executor.submit(st3);executor.submit(saveTask);}}","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447839,"discussion_content":"没问题，就是有点复杂，代码还可以精简一下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555978597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224708,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZpzZqvib4bzgfFb6Wt7fP2k4wefKYaoPwza1L19UGalddjREELPd6zAjyibdHJ7jxB2xtZmSuJjuA/132","nickname":"seele","note":"","ucode":"1824AA95FF1DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36865,"discussion_content":"感觉三个询价任务之间互不影响，应该可以拿到询价结果的时候进行入库操作，我的理解对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571453719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87804,"user_name":"henry","can_delete":false,"product_type":"c1","uid":1075941,"ip_address":"","ucode":"0ACD12F363F8DE","user_header":"http://thirdqq.qlogo.cn/qqapp/101418266/D6DD8CB1004D442B48914656340277F3/100","comment_is_top":false,"comment_ctime":1555720184,"is_pvip":false,"replies":[{"id":"31609","content":"👍<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555737716,"ip_address":"","comment_id":87804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440622072","product_id":100023901,"comment_content":"现在是在主线程串行完成3个询价的任务，执行第一个任务，其它2个任务只能等待执行，如果要提高效率，这个地方需要改进，可以用老师今天讲的futuretask，三个询价任务改成futuretask并行执行，效率会提高","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447609,"discussion_content":"👍\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555737716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236974,"user_name":"the only Mia’s","can_delete":false,"product_type":"c1","uid":1271075,"ip_address":"","ucode":"8E2E1E71BF5B4F","user_header":"https://static001.geekbang.org/account/avatar/00/13/65/23/b42f102c.jpg","comment_is_top":false,"comment_ctime":1595634218,"is_pvip":false,"replies":[{"id":"87651","content":"可以","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1595761005,"ip_address":"","comment_id":236974,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10185568810","product_id":100023901,"comment_content":"老师，jdk 8提供的CompletableFuture，以后异步处理是不是可以直接用此替代","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502272,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595761005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146593,"user_name":"稚者","can_delete":false,"product_type":"c1","uid":1128204,"ip_address":"","ucode":"D824C0B263B26A","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/0c/c623649c.jpg","comment_is_top":false,"comment_ctime":1572577667,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10162512259","product_id":100023901,"comment_content":"烧水泡茶的Demo有点小问题，Task2的启动时间应该在Task1的洗茶壶之后开始，现在的代码是一起开始。","like_count":2,"discussions":[{"author":{"id":2753834,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/05/2a/cfbcb0b2.jpg","nickname":"Donkey","note":"","ucode":"3DB4DFF6D99035","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531099,"discussion_content":"老师的例子相当于两个人完成泡茶，数学里应该是一个人吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637229710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230985,"discussion_content":"一个是茶壶，一个是水壶吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586783881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344371,"discussion_content":"按照流程分工应该是有问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611452502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":230985,"ip_address":""},"score":344371,"extra":""}]}]},{"had_liked":false,"id":88227,"user_name":"圆圜","can_delete":false,"product_type":"c1","uid":1107716,"ip_address":"","ucode":"51A3AE18442A3D","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/04/ba949d78.jpg","comment_is_top":false,"comment_ctime":1555896285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145830877","product_id":100023901,"comment_content":"你这个不对啊，应该是executeservice.submit t2furturetask，不能直接提交t2","like_count":2},{"had_liked":false,"id":87989,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1555782269,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10145716861","product_id":100023901,"comment_content":"Future的get()是拿到任务的执行结果不吧。为什么又说是拿到方法的入参了。","like_count":2,"discussions":[{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574338,"discussion_content":"第三个构造函数get的结果就是传入的第二个参数，这样的好处是让子线程主线程共享一个变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653982355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87860,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1555735299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145669891","product_id":100023901,"comment_content":"在实际项目中应用已经应用到了Feture,但没有使用线程池，没有那么优雅，所以算是get到了👍","like_count":2},{"had_liked":false,"id":87813,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1555723269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145657861","product_id":100023901,"comment_content":"打卡。感觉很神奇，之前完全不会用。学的知识太陈旧了，继续学习。","like_count":2},{"had_liked":false,"id":337323,"user_name":"Geek_96a4cb","can_delete":false,"product_type":"c1","uid":2369218,"ip_address":"","ucode":"29A0118BBBAEB7","user_header":"","comment_is_top":false,"comment_ctime":1646754353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5941721649","product_id":100023901,"comment_content":"课后思考题:<br>Executor executor = Executors.newFixedThreadPool(3);<br>executor.submit(()-&gt;save(getPriceByS1()));<br>executor.submit(()-&gt;save(getPriceByS2()));<br>executor.submit(()-&gt;save(getPriceByS3()));","like_count":1},{"had_liked":false,"id":270897,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1609314364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5904281660","product_id":100023901,"comment_content":"如只有一个人来操作的话，那么洗茶壶和洗水壶和洗水杯一定是会有先后顺序的，一次只能系一个壶，那么“洗茶壶、洗茶杯、拿茶叶”这个步骤只能在烧水之后执行，这样，才是一个人的执行步骤吧。代码类似这样：<br>```java<br>public static void main(String[] args) {<br>        CountDownLatch latch = new CountDownLatch(1);<br>        FutureTask&lt;String&gt; fetchTea = new FutureTask&lt;&gt;(() -&gt; {<br>            latch.await();<br>            System.out.println(&quot;洗茶壶&quot;);<br>            Thread.sleep(100L);<br>            System.out.println(&quot;洗茶杯&quot;);<br>            Thread.sleep(200L);<br>            System.out.println(&quot;拿茶叶&quot;);<br>            Thread.sleep(100L);<br>            return &quot;大红袍&quot;;<br>        });<br><br><br>        FutureTask&lt;String&gt; boilWater = new FutureTask&lt;&gt;(() -&gt; {<br>            System.out.println(&quot;wash kettle&quot;);<br>            Thread.sleep(100L);<br>            System.out.println(&quot;boil water&quot;);<br>            latch.countDown();<br>            Thread.sleep(1500L);<br>            return &quot;水开了, today take tea: &quot;;<br>        });<br><br><br>        ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(&quot;brilliant wang make tea&quot;).build();<br><br>        int numOfProcessors = Runtime.getRuntime().availableProcessors();<br><br>        ThreadPoolExecutor tpe = new ThreadPoolExecutor(numOfProcessors,<br>                numOfProcessors * 2 + 1,<br>                10,<br>                TimeUnit.SECONDS,<br>                new ArrayBlockingQueue&lt;&gt;(100),<br>                tf);<br>        tpe.submit(fetchTea);<br>        tpe.submit(boilWater);<br>        try {<br>            String water = boilWater.get(10, TimeUnit.SECONDS);<br>            String tea = fetchTea.get(10, TimeUnit.SECONDS);<br>            System.out.println(water + tea);<br>        } catch (InterruptedException ig) {<br>        } catch (ExecutionException ig) {<br>        } catch (TimeoutException ig) {<br>        }<br>    }<br>````","like_count":1},{"had_liked":false,"id":253043,"user_name":"near","can_delete":false,"product_type":"c1","uid":1870563,"ip_address":"","ucode":"09DE24BAEA38A6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/8a/e3/c967e11a.jpg","comment_is_top":false,"comment_ctime":1602576920,"is_pvip":false,"replies":[{"id":"92787","content":"T2会回收，T1状态是阻塞","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1603069487,"ip_address":"","comment_id":253043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5897544216","product_id":100023901,"comment_content":"老师，有问题问一下：1.在泡茶的例子中，如果使用线程池创建线程，假设有很多个泡茶任务都要反复调用线程池中的线程，那么在T2提前完成任务，T1获取T2的结果前，T2这个线程会不会被线程池回收？2.假设T1在T2前完成，当T1要获取T2结果时，T1中的代码是阻塞的状态吗？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506954,"discussion_content":"T2会回收，T1状态是阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603069487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203246,"user_name":"女巫在寒江","can_delete":false,"product_type":"c1","uid":1013180,"ip_address":"","ucode":"B3707072224C1C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/bc/664bbdf7.jpg","comment_is_top":false,"comment_ctime":1586160239,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5881127535","product_id":100023901,"comment_content":"\t\tExecutorService executor = Executors.newFixedThreadPool(3);<br><br>\t\texecutor.submit(new Task1());<br>\t\texecutor.submit(new Task2());<br>\t\texecutor.submit(new Task3());<br>\t\t<br>\t\tclass Task1  implement Runnable {<br>\t\t\tvoid run(){<br>\t\t\t\tr = getPriceByS1();<br>\t\t\t\tsave(r);<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\tclass Task2  implement Runnable {<br>\t\t\tvoid run(){<br>\t\t\t\tr = getPriceByS2();<br>\t\t\t\tsave(r);<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\tclass Task3  implement Runnable {<br>\t\t\tvoid run(){<br>\t\t\t\tr = getPriceByS3();<br>\t\t\t\tsave(r);<br>\t\t\t}<br>\t\t}","like_count":1},{"had_liked":false,"id":194471,"user_name":"Mr.wang","can_delete":false,"product_type":"c1","uid":1224805,"ip_address":"","ucode":"86F341A5316BBC","user_header":"https://static001.geekbang.org/account/avatar/00/12/b0/65/90387745.jpg","comment_is_top":false,"comment_ctime":1585061297,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5880028593","product_id":100023901,"comment_content":"把三个询问分别有三个线程运行，最后批量插入数据库。","like_count":1},{"had_liked":false,"id":89285,"user_name":"liu","can_delete":false,"product_type":"c1","uid":1109402,"ip_address":"","ucode":"041F179BB00A59","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/9a/bbeec5bb.jpg","comment_is_top":false,"comment_ctime":1556149074,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5851116370","product_id":100023901,"comment_content":"future是阻塞的等待。发起任务后，做其他的工作。做完后，从future获取处理结果，继续进行后面的任务","like_count":1},{"had_liked":false,"id":87926,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1555755284,"is_pvip":false,"replies":[{"id":"31622","content":"任意的东西，想成数字0也行","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555768974,"ip_address":"","comment_id":87926,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850722580","product_id":100023901,"comment_content":"老师，在提交 Runnable 任务及结果引用的例子里面的x变量是什么?","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447650,"discussion_content":"任意的东西，想成数字0也行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555768974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349727,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1656289113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656289113","product_id":100023901,"comment_content":"&#47;&#47;task中sleep1秒 <br>&#47;&#47;串行处理<br>    static void M1() throws InterruptedException {<br>        long start = System.currentTimeMillis();<br>        &#47;&#47; 向电商S1询价，并保存<br>        int r1 = getPriceByS1();<br>        save(r1);<br>        &#47;&#47; 向电商S2询价，并保存<br>        int r2 = getPriceByS2();<br>        save(r2);<br>        &#47;&#47; 向电商S3询价，并保存<br>        int r3 = getPriceByS3();<br>        save(r3);<br>        long end = System.currentTimeMillis();<br>        &#47;&#47;用时：3005<br>        System.out.println(&quot;time:&quot; + (end - start));<br>    }<br><br>    static void M2() throws ExecutionException, InterruptedException {<br>        long start = System.currentTimeMillis();<br>        &#47;&#47;优化<br>        ExecutorService executorService = Executors.newFixedThreadPool(3);<br>        Future&lt;Integer&gt; r11 = executorService.submit(new Task1());<br>        Future&lt;Integer&gt; r12 = executorService.submit(new Task2());<br>        Future&lt;Integer&gt; r13 = executorService.submit(new Task3());<br><br>        save(r11.get());<br>        save(r12.get());<br>        save(r13.get());<br>        long end = System.currentTimeMillis();<br>        &#47;&#47;用时：1015<br>        System.out.println(&quot;time:&quot; + (end - start));<br>    }<br>","like_count":0},{"had_liked":false,"id":348061,"user_name":"谦谦","can_delete":false,"product_type":"c1","uid":1029511,"ip_address":"","ucode":"6EBF5F3A158FCA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/87/c8cc2659.jpg","comment_is_top":false,"comment_ctime":1654697279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654697279","product_id":100023901,"comment_content":"&#47;&#47;采购员；负责询价<br>public class Buyer implements Runnable {<br><br>  private CopyOnWriteArrayList&lt;Integer&gt; prices;<br>  <br>  private CyclicBarrier cyclicBarrier;<br>  <br>  public Buyer(CopyOnWriteArrayList&lt;Integer&gt; prices,CyclicBarrier cyclicBarrier) {<br>    this.prices = prices;<br>    this.cyclicBarrier = cyclicBarrier;<br>  }<br><br>  @Override<br>  public void run() {<br>    Integer price = (int)(new Random().nextDouble()*100);<br>    <br>    System.out.println(&quot;采购员&quot;+Thread.currentThread().getId()+&quot;的询价结果是：&quot;+price);<br>    <br>    prices.add(price);<br>    <br>    cyclicBarrier.await();<br><br>  }<br><br>}<br><br>&#47;&#47;部门经理，负责保存询价并返回报价单<br>public class Manager implements Callable&lt;String&gt;{<br><br>  private CopyOnWriteArrayList&lt;Integer&gt; prices;<br>  <br><br>  public Manager(CopyOnWriteArrayList&lt;Integer&gt; prices) {<br>    this.prices = prices;<br>  }<br><br>  @Override<br>  public String call() throws Exception {<br>    <br>    &#47;&#47;savePrice(price);<br>    <br>    &#47;&#47;返回一个报价单。<br>    return report(prices);<br>  }<br>  <br>}<br><br>&#47;&#47;主类<br>public class PriceDemo {<br>  public static void main(String[] args) throws InterruptedException, ExecutionException {<br><br>    int buyerCounts = 3;<br><br>    ExecutorService executor= Executors.newFixedThreadPool(buyerCounts);<br>    <br>    CopyOnWriteArrayList&lt;Integer&gt; prices = new CopyOnWriteArrayList&lt;Integer&gt;();<br>    <br>    CyclicBarrier cyclicBarrier = new CyclicBarrier(buyerCounts, ()-&gt;{<br>      &#47;&#47;所有采购员询价结束之后，部门经理保存询价并返回一份报价单。<br>      FutureTask&lt;String&gt; managerFutureTask = new FutureTask&lt;String&gt;(new Manager(prices));<br>      new Thread(managerFutureTask).start();<br>      <br>      try {<br>        String report = managerFutureTask.get();<br>        System.out.println(report);      <br>      } catch (InterruptedException | ExecutionException e) {<br>        e.printStackTrace();<br>      }<br>    });<br>    <br>    for(int i=0;i&lt;buyerCounts;i++) {<br>      executor.submit(new Buyer(prices,cyclicBarrier), prices);<br>    }<br>    <br>  }<br>}","like_count":0},{"had_liked":false,"id":345949,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1652710809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652710809","product_id":100023901,"comment_content":"1 三个可以异步执行<br>2 利用countdownlact 计数 三个线程(or线程池)去处理<br>3 使用CompletableFuture去处理","like_count":1},{"had_liked":false,"id":340134,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1648621838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648621838","product_id":100023901,"comment_content":"在疫情期间做公司的项目，涉及到了并发的下单处理和扣回库存的处理，在本章节收获颇多！","like_count":0},{"had_liked":false,"id":327935,"user_name":"leo","can_delete":false,"product_type":"c1","uid":1073657,"ip_address":"","ucode":"614A2F77A6B553","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1mQHJjAyFjypbiaheQ9hDWRoictrVn2VggIZiaPLm50UiatHu9NqExMicScs9f7zYicbTQPliatTT18hr4csibRh4ARYbA/132","comment_is_top":false,"comment_ctime":1640400438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640400438","product_id":100023901,"comment_content":" ExecutorService executorService = null;<br>    try {<br>      executorService = Executors.newFixedThreadPool(3);<br>      CompletionService&lt;Integer&gt; completionService =<br>          new ExecutorCompletionService&lt;&gt;(executorService);<br>      completionService.submit(() -&gt; getPriceByS1());<br>      completionService.submit(() -&gt; getPriceByS2());<br>      completionService.submit(() -&gt; getPriceByS3());<br>      for (int i = 0; i &lt; 3; i++) {<br>        executorService.execute(<br>            () -&gt; {<br>              try {<br>                save(completionService.take().get());<br>              } catch (Exception e) {<br>                e.printStackTrace();<br>              }<br>            });<br>      }<br>    } catch (Exception e) {<br>      e.printStackTrace();<br>    } finally {<br>      if (executorService != null) {<br>        executorService.shutdown();<br>      }<br>    }","like_count":0},{"had_liked":false,"id":311074,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1631064412,"is_pvip":false,"replies":[{"id":"113113","content":"的确不能适用所有场景，例如不能用它实现类似netty这种框架","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1631663128,"ip_address":"","comment_id":311074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631064412","product_id":100023901,"comment_content":"老师，有个一直比较疑虑的地方，future.get获取返回值是去阻塞，如果get使用太多，那么阻塞的地方就会感觉有问题","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526462,"discussion_content":"的确不能适用所有场景，例如不能用它实现类似netty这种框架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631663128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292192,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1620717544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620717544","product_id":100023901,"comment_content":"我觉得最后一题完全可以做三个不同功能接口，不能为了多线程而多线程。因为三个又没交集。各自处理好了。","like_count":0},{"had_liked":false,"id":275281,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1649057,"ip_address":"","ucode":"4F42DAA5DB5C38","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","comment_is_top":false,"comment_ctime":1611423535,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1611423535","product_id":100023901,"comment_content":"泡茶的例子，上面的调用线程2的get() 方法不是在32行调用的吗，也就是在“洗水壶，烧开水”之后调用的，既然是一个阻塞方法，最后打印的结果为什么不是“洗水壶....烧开水...洗茶壶...”这样的顺序呢，而是如上的“洗水壶...洗茶壶...烧开水...”？","like_count":0},{"had_liked":false,"id":274758,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1106929,"ip_address":"","ucode":"B2F562F717BD3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/f1/346bd356.jpg","comment_is_top":false,"comment_ctime":1611149666,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611149666","product_id":100023901,"comment_content":"老师，线程池原则是core都在忙碌，然后队列也满了，才会新建线程，直到max再拒绝，为什么不是先建线程到max后塞队列，队列满再拒绝?","like_count":0,"discussions":[{"author":{"id":1439120,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f5/90/e08bbe1f.jpg","nickname":"Wheres the Love?","note":"","ucode":"8851FB40976AB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392917,"discussion_content":"线程是宝贵的系统资源，能不建就不建","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631179063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269663,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1608731095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608731095","product_id":100023901,"comment_content":"首先定义一个询价接口，如果这三家供应商的询价逻辑不一样，就分别实现这个接口；接着定义一个询价管理类，该类包含一个用来执行询价任务的线程池，一个询价结果队列，另外启动一个用来保存询价结果（可批量保存）的用户线程，管理类提供询价方法，参数就是询价接口的实现实例，询价返回结果入队列，询价保存线程一次从队列中取出不超过批量处理上限的结果做保存","like_count":0},{"had_liked":false,"id":254621,"user_name":"盛权_vinc","can_delete":false,"product_type":"c1","uid":1459845,"ip_address":"","ucode":"4688DD06587CE2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LPnuO9GleKEwso2rSbibmbEwn49hnGl9qTQDBv2xLOOWOflQsc9oVEEuZgNBt7TrqRKvk8CX7Tc8iakhEicBCCfFg/132","comment_is_top":false,"comment_ctime":1603159361,"is_pvip":false,"replies":[{"id":"92923","content":"&#47;&#47; 一次执行结果而已","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1603180206,"ip_address":"","comment_id":254621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603159361","product_id":100023901,"comment_content":"老师，你这个泡茶例子，看你最终的执行结果，洗水壶和洗茶壶并行了，然后才开始烧水洗茶杯，这好像有点违背了最优分工方案的图和现实？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507459,"discussion_content":"// 一次执行结果而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603180206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250945,"user_name":"PowerZZzzD","can_delete":false,"product_type":"c1","uid":1243035,"ip_address":"","ucode":"49109A6AB06EDD","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/9b/3b6e85a5.jpg","comment_is_top":false,"comment_ctime":1601287226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601287226","product_id":100023901,"comment_content":"我不是很理解 t1 t2 start 怎么保证执行的顺序的","like_count":0},{"had_liked":false,"id":248031,"user_name":"fightingD","can_delete":false,"product_type":"c1","uid":1443637,"ip_address":"","ucode":"AD2876CED5D5AC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwViav94kcF50CxA0Jw7icicxociaVzut97iacy3b2ciacFqXuFWdiakVq304YcI8pt4HT5A1Yvp8EkYCpw/132","comment_is_top":false,"comment_ctime":1599987010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599987010","product_id":100023901,"comment_content":"创建3个FutureTask 任务，在主线程中分别调用get()方法，获取任务的执行结果，然后保存到DB。","like_count":0},{"had_liked":false,"id":238610,"user_name":"FIRE","can_delete":false,"product_type":"c1","uid":1670763,"ip_address":"","ucode":"85861D990FB3AB","user_header":"https://static001.geekbang.org/account/avatar/00/19/7e/6b/36fc4516.jpg","comment_is_top":false,"comment_ctime":1596212672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596212672","product_id":100023901,"comment_content":"public Future&lt;?&gt; submit(Runnable task) {<br>        if (task == null) throw new NullPointerException();<br>        RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);<br>        execute(ftask);<br>        return ftask;<br>    }这个最终也是返回了Future,包装了Runnable类后再execute 的","like_count":0},{"had_liked":false,"id":229550,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1593055923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593055923","product_id":100023901,"comment_content":"课后思考题：<br>思路一：创建两条线程，T1线程完成 向电商S1询价、向电商S2询价、向电商S3询价；T2线程完成保存S1，保存S2,保存S3<br>思路二：创建三条线程，T1线程完成 向电商S1询价、保存S1；T2线程完成 向电商S2询价、保存S2；T3线程完成 向电商S3询价、保存S3。<br>思路三：使用队列解决，这个不知道能不能实现，有思路的同学，帮忙提个思路","like_count":0},{"had_liked":false,"id":221779,"user_name":"ξ！","can_delete":false,"product_type":"c1","uid":1636657,"ip_address":"","ucode":"F9797D21EBE10E","user_header":"https://static001.geekbang.org/account/avatar/00/18/f9/31/b75cc6d5.jpg","comment_is_top":false,"comment_ctime":1590590483,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1590590483","product_id":100023901,"comment_content":"老师有个问题想问您一下，如果在主线程开启了一个事务，然后下面有一些步骤分给了很多线程去做，在主线程如果执行出现了异常怎么回滚其他所有的线程啊","like_count":1,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381390,"discussion_content":"事务不能跨线程的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625038581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636657,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f9/31/b75cc6d5.jpg","nickname":"ξ！","note":"","ucode":"F9797D21EBE10E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275452,"discussion_content":"我想到的方法就只有用两个coutdown和一个共享变量解决，不知道老师有没有巧一点的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590716516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211648,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1587992401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587992401","product_id":100023901,"comment_content":"给最后问题再加一步，询价后，得到最小的一家。题就比较好了","like_count":0},{"had_liked":false,"id":199843,"user_name":"😜哈哈","can_delete":false,"product_type":"c1","uid":1069001,"ip_address":"","ucode":"1FF58FB3A91135","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/c9/88837387.jpg","comment_is_top":false,"comment_ctime":1585496849,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585496849","product_id":100023901,"comment_content":"瞅瞅dubbo源码是如何使用future模型的","like_count":0},{"had_liked":false,"id":157262,"user_name":"是我！","can_delete":false,"product_type":"c1","uid":1691331,"ip_address":"","ucode":"0B474014D620F4","user_header":"https://static001.geekbang.org/account/avatar/00/19/ce/c3/688b8bf9.jpg","comment_is_top":false,"comment_ctime":1575100245,"is_pvip":false,"replies":[{"id":"65380","content":"我觉得有问题，save慢会影响了submit","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1578134041,"ip_address":"","comment_id":157262,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575100245","product_id":100023901,"comment_content":"老师您好：请问这样是否有问题？  <br>public static void main(String[] args) throws Exception {<br>        FutureTask t1 = new FutureTask(new Callable() {<br>            @Override<br>            public String call() {<br>                return &quot;getPriceByS1()&quot;;<br>            }<br>        });<br>        FutureTask t2 = new FutureTask(() -&gt; &quot;getPriceByS2()&quot;);<br>        FutureTask t3 = new FutureTask(() -&gt; &quot;getPriceByS3()&quot;);<br>        BlockingQueue&lt;Runnable&gt; blockingQueue = new ArrayBlockingQueue&lt;&gt;(3);<br>        ThreadPoolExecutor poolExecutor =<br>                new ThreadPoolExecutor(10, 10, 10,<br>                        TimeUnit.SECONDS, blockingQueue);<br>        poolExecutor.submit(t1);<br>        save(t1.get().toString());<br>        poolExecutor.submit(t2);<br>        save(t2.get().toString());<br>        poolExecutor.submit(t3);<br>        save(t3.get().toString());<br>    }<br><br>    private static void save(String ss) {<br>        System.out.println(&quot;保存&quot; + ss);<br>    }","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476377,"discussion_content":"我觉得有问题，save慢会影响了submit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578134041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147123,"user_name":"245864982","can_delete":false,"product_type":"c1","uid":1238485,"ip_address":"","ucode":"AC47075A95B759","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/d5/680402fd.jpg","comment_is_top":false,"comment_ctime":1572800068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572800068","product_id":100023901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":131091,"user_name":"Demter","can_delete":false,"product_type":"c1","uid":1158439,"ip_address":"","ucode":"BE3B6F726916CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/27/5556ae50.jpg","comment_is_top":false,"comment_ctime":1567643332,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567643332","product_id":100023901,"comment_content":"既然futuretask只实现runable接口，那么用submit是不应该获取到返回值的呀？啊","like_count":0,"discussions":[{"author":{"id":1257422,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/ce/c72d4c67.jpg","nickname":"movesan","note":"","ucode":"29CDF0F2B604C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185381,"discussion_content":"FutureTask 只是一个工具类，具体任务是它构造函数里的参数，是实现了Callable 接口的；\n另外通过 FutureTask 可以不用变量接受 submit 方法结果，可直接从 FutureTask 对象中获取。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582623310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125457,"user_name":"给心来块冰块","can_delete":false,"product_type":"c1","uid":1063689,"ip_address":"","ucode":"7AFB56581782A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/09/2cf074a7.jpg","comment_is_top":false,"comment_ctime":1566186791,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1566186791","product_id":100023901,"comment_content":"老师，我自己写了一个demo执行一直是阻塞状态<br>package threadPoolTest;<br><br>import java.util.concurrent.*;<br><br>public class ExecutorTest {<br><br>    public static void main(String[] args) throws ExecutionException, InterruptedException, TimeoutException {<br>        &#47;&#47;获得一个线程池<br>        ExecutorService service = Executors.newFixedThreadPool(1);<br>        Result result = new Result();<br>        result.setName(&quot;王华&quot;);<br>        Future&lt;Result&gt; future = service.submit(new Task(result), result);<br><br>        if (future.isDone()) {<br>            Result result1 = future.get(10, TimeUnit.SECONDS);<br>            System.out.println(result == result1);<br>        }<br>    }<br>}<br>class Task implements Runnable {<br>    private Result result;<br>    public Task(Result result) {<br>        this.result = result;<br>    }<br>    &#47;&#47;TODO 很多业务逻辑处理方法<br>    public void op1(String name) {<br><br>        if (&quot;王华&quot;.equals(name)) {<br>            result.setAge(22);<br>        } else {<br>            result.setAge(20);<br>        }<br>    }<br>    @Override<br>    public void run() {<br>        op1(result.getName());<br>    }<br><br>    public Result getResult() {<br>        return result;<br>    }<br><br>    public void setResult(Result result) {<br>        this.result = result;<br>    }<br><br><br>}","like_count":0,"discussions":[{"author":{"id":1004342,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/36/2c449c71.jpg","nickname":"叶玉林","note":"","ucode":"C72E88613DB992","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58298,"discussion_content":"也可以 将 while (!future.isDone())  改为 if  (!future.isDone()) ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574666608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004342,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/36/2c449c71.jpg","nickname":"叶玉林","note":"","ucode":"C72E88613DB992","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58297,"discussion_content":"代码需要修改下，在判断任务是否结束，需要循环，代码我稍微修改了\nwhile (!future.isDone()) {\n            Result result1 = future.get(10, TimeUnit.SECONDS);\n            System.out.println(result == result1);\n        }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574666538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118991,"user_name":"小智","can_delete":false,"product_type":"c1","uid":1191408,"ip_address":"","ucode":"2303BF533B9354","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIM05VW3moIQNWF85N5ZKjA2eld17BeMrL9sgKTb6WJZkDbfZX97pibSkRBd8UG0M3IrSFiafBsqkPw/132","comment_is_top":false,"comment_ctime":1564480985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564480985","product_id":100023901,"comment_content":"老师，是不是两个线程就够了，一个询价，一个保存。","like_count":0},{"had_liked":false,"id":107325,"user_name":"爱上丘比特","can_delete":false,"product_type":"c1","uid":1235736,"ip_address":"","ucode":"399E3BF5F63515","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/18/245f8558.jpg","comment_is_top":false,"comment_ctime":1561514673,"is_pvip":false,"replies":[{"id":"53898","content":"这是个最优化问题，属于数学领域😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570709480,"ip_address":"","comment_id":107325,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561514673","product_id":100023901,"comment_content":"老师，既然get是阻塞方法，那应该何时调用呢？或者说在哪种场景调用避免阻塞主线程？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455468,"discussion_content":"这是个最优化问题，属于数学领域😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570709480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100773,"user_name":"潭州太守","can_delete":false,"product_type":"c1","uid":1178824,"ip_address":"","ucode":"1DA953B8DCA3C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/c8/15c85ee4.jpg","comment_is_top":false,"comment_ctime":1559636022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559636022","product_id":100023901,"comment_content":"老师CompletableFuture.orTimeout是不是不会阻塞主线程","like_count":0},{"had_liked":false,"id":98687,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1559057954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559057954","product_id":100023901,"comment_content":"public class ExecutorExample {<br><br>\tprivate static final ExecutorService executor = Executors.newFixedThreadPool(4);<br><br>\tpublic static void main(String[] args) {<br>\t\tFutureTask&lt;String&gt; st1 = new FutureTask&lt;&gt;(ExecutorExample::getPriceByS1);<br>\t\tFutureTask&lt;String&gt; st2 = new FutureTask&lt;&gt;(ExecutorExample::getPriceByS2);<br>\t\tFutureTask&lt;String&gt; st3 = new FutureTask&lt;&gt;(ExecutorExample::getPriceByS3);<br>\t\tRunnable saveTask = () -&gt; {<br>\t\t\tList&lt;FutureTask&lt;String&gt;&gt; list = new ArrayList&lt;FutureTask&lt;String&gt;&gt;() {{<br>\t\t\t\tadd(st1);<br>\t\t\t\tadd(st2);<br>\t\t\t\tadd(st3);<br>\t\t\t}};<br>\t\t\twhile (!list.isEmpty()) {<br>\t\t\t\tIterator&lt;FutureTask&lt;String&gt;&gt; it = list.iterator();<br>\t\t\t\twhile (it.hasNext()) {<br>\t\t\t\t\tFutureTask&lt;String&gt; ftask = it.next();<br>\t\t\t\t\tif (ftask.isDone()) {<br>\t\t\t\t\t\ttry {<br>\t\t\t\t\t\t\tsaveData(ftask.get());<br>\t\t\t\t\t\t\tit.remove();<br>\t\t\t\t\t\t} catch (InterruptedException e) {<br>\t\t\t\t\t\t\te.printStackTrace();<br>\t\t\t\t\t\t} catch (ExecutionException e) {<br>\t\t\t\t\t\t\te.printStackTrace();<br>\t\t\t\t\t\t}<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t}<br>\t\t};<br><br>\t\texecutor.submit(st1);<br>\t\texecutor.submit(st2);<br>\t\texecutor.submit(st3);<br>\t\texecutor.submit(saveTask);<br>\t\t<br>\t}<br><br>\tprivate static String getPriceByS1() {<br>\t\treturn &quot;fromDb1&quot;;<br>\t}<br><br>\tprivate static String getPriceByS2() {<br>\t\treturn &quot;fromDb2&quot;;<br>\t}<br><br>\tprivate static String getPriceByS3() {<br>\t\treturn &quot;fromDb3&quot;;<br>\t}<br><br>\tprivate static void saveData(String data) {<br>\t\t&#47;&#47;save data to db<br>\t\tSystem.out.println(&quot;save data &quot; + data);<br>\t}<br>}","like_count":0},{"had_liked":false,"id":89587,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1556228218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556228218","product_id":100023901,"comment_content":"回答思考，这三个任务如果没有结果依赖，直接用线程池提交三个任务应该就可以并行了吧","like_count":1},{"had_liked":false,"id":89127,"user_name":"Cancer","can_delete":false,"product_type":"c1","uid":1128051,"ip_address":"","ucode":"DF44879B27760C","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/73/3a652c41.jpg","comment_is_top":false,"comment_ctime":1556085272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556085272","product_id":100023901,"comment_content":"\tstatic class S1QueryTask implements Callable&lt;Double&gt;{<br>\t\tpublic Double call() throws Exception {<br>\t\t\tThread.sleep(1000);&#47;&#47;模拟查询时间<br>\t\t\treturn Double.valueOf(10f);<br>\t\t}<br>\t}<br>\tstatic class S2QueryTask implements Callable&lt;Double&gt;{<br>\t\tpublic Double call() throws Exception {<br>\t\t\tThread.sleep(2000);&#47;&#47;模拟查询时间<br>\t\t\treturn Double.valueOf(20f);<br>\t\t}<br>\t}<br>\tstatic class S3QueryTask implements Callable&lt;Double&gt;{<br>\t\tpublic Double call() throws Exception {<br>\t\t\tThread.sleep(3000);&#47;&#47;模拟查询时间<br>\t\t\treturn Double.valueOf(30f);<br>\t\t}<br>\t}<br>\tstatic class SaveTask implements Callable&lt;Double&gt;{<br>\t\tfinal FutureTask&lt;Double&gt;[] queryfts;<br>\t\tprivate SaveTask(FutureTask&lt;Double&gt;[] queryfts) {<br>\t\t\tthis.queryfts = queryfts;<br>\t\t}<br>\t\tprivate Double save(Double combRst) throws InterruptedException{<br>\t\t\tThread.sleep(500);&#47;&#47;模拟保存时间<br>\t\t\treturn combRst;<br>\t\t}<br>\t\tpublic Double call() throws Exception {<br>\t\t\tDouble combRst = new Double(0f);<br>\t\t\tfor(FutureTask&lt;Double&gt; queryft : queryfts) {<br>\t\t\t\tDouble rst = queryft.get();<br>\t\t\t\tif(rst != null) {<br>\t\t\t\t\tcombRst += rst;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t\treturn save(combRst);<br>\t\t}<br>\t}<br>\tpublic static void main(String[] args) {<br>\t\tFutureTask&lt;Double&gt;[] queryfts = new FutureTask[] {new FutureTask&lt;Double&gt;(new S1QueryTask()),new FutureTask&lt;Double&gt;(new S2QueryTask()),new FutureTask&lt;Double&gt;(new S3QueryTask())};<br>\t\tFutureTask&lt;Double&gt; saveft3 = new FutureTask&lt;Double&gt;(new SaveTask(queryfts));<br>\t\tExecutorService executor = Executors.newFixedThreadPool(4);<br>\t\tlong start = System.currentTimeMillis();<br>\t\tfor(FutureTask&lt;Double&gt; queryft : queryfts) {<br>\t\t\texecutor.submit(queryft);<br>\t\t}<br>\t\texecutor.submit(saveft3);<br>\t\ttry {<br>\t\t\tDouble combRst = saveft3.get();<br>\t\t\tlong end = System.currentTimeMillis();<br>\t\t\tif(combRst != null) {<br>\t\t\t\tSystem.out.println(&quot;保存成功,合并结果：&quot; + combRst);<br>\t\t\t}else {<br>\t\t\t\tSystem.out.println(&quot;保存失败&quot;);<br>\t\t\t}<br>\t\t\tSystem.out.println(&quot;耗时：&quot; + (end - start) + &quot;ms&quot;);<br>\t\t} catch (InterruptedException e) {<br>\t\t\t&#47;&#47;按需处理<br>\t\t} catch (ExecutionException e) {<br>\t\t\t&#47;&#47;按需处理<br>\t\t} catch (TimeoutException e) {<br>\t\t\t&#47;&#47;按需处理<br>\t\t}finally {<br>\t\t\texecutor.shutdown();<br>\t\t}<br>\t}","like_count":0},{"had_liked":false,"id":88599,"user_name":"jeeker","can_delete":false,"product_type":"c1","uid":1444583,"ip_address":"","ucode":"1E78795E7DF8E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erS45sT36oSCibh8YMF9aD0IKltrdCoEicqUeEzbC2Hlr4UiahibfLvpib3LauzQxv6X3vyfCvrgz0m3dg/132","comment_is_top":false,"comment_ctime":1555950517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555950517","product_id":100023901,"comment_content":"课后问题: S2和S3应该引用S1的结果吧,S2,3通过s1.get来做业务逻辑.","like_count":0},{"had_liked":false,"id":88158,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1555860433,"is_pvip":false,"replies":[{"id":"31706","content":"如果每分钟询价1万次，还能直接创建线程吗？联系指的是线程池和future，不是三个查询操作<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555892543,"ip_address":"","comment_id":88158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555860433","product_id":100023901,"comment_content":"我也同意张天屹同学的观点   这个询价操作如果之间没有联系的话  直接起三个线程就可以了 老师能不能讲一下 用线程池怎么就有关联了？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447751,"discussion_content":"如果每分钟询价1万次，还能直接创建线程吗？联系指的是线程池和future，不是三个查询操作\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555892543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87991,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1555786098,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1555786098","product_id":100023901,"comment_content":"老师为什么我下面写法t2Task.get(); 一直在等待<br>public class PaoCha {<br><br>    public static class T1Task implements Runnable{<br>        private Future&lt;T2Task&gt; t2Task;<br>        T1Task(Future&lt;T2Task&gt; t2Task) {<br>            this.t2Task = t2Task;<br>        }<br>        @Override<br>        public void run() {<br>            try {<br>                System.out.println( &quot;T1:洗水壶&quot;);<br>                TimeUnit.SECONDS.sleep(1);<br>                System.out.println( &quot;T1:烧开水&quot;);<br>                TimeUnit.SECONDS.sleep(15);<br>                t2Task.get();<br>                System.out.println( &quot;T1:拿到茶叶&quot;);<br><br>                System.out.println( &quot;T1:泡茶&quot;);<br>                System.out.println( &quot;上茶&quot;);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            } catch (ExecutionException e) {<br>                e.printStackTrace();<br>            }<br><br>        }<br>    }<br>    public static  class T2Task implements Runnable {<br><br>        @Override<br>        public void run() {<br>            try {<br>                System.out.println( &quot;T2:洗茶壶&quot;);<br>                TimeUnit.SECONDS.sleep(1);<br>                System.out.println( &quot;T2:洗茶杯&quot;);<br>                TimeUnit.SECONDS.sleep(2);<br>                System.out.println( &quot;T2:拿茶叶&quot;);<br>                TimeUnit.SECONDS.sleep(1);<br>                System.out.println( &quot;T2:龙井&quot;);<br>            } catch (InterruptedException e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        T2Task t2 = new T2Task();<br>        Future&lt;T2Task&gt; t2TaskFuture = new FutureTask&lt;&gt;(() -&gt;t2);<br>        ExecutorService executorService = Executors.newFixedThreadPool(1);<br>        executorService.submit(t2);<br><br>        T1Task t1 = new T1Task(t2TaskFuture);<br>        ExecutorService executorService1 = Executors.newFixedThreadPool(1);<br>        executorService1.submit(t1);<br><br>    }<br><br>}","like_count":0,"discussions":[{"author":{"id":1235692,"avatar":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","nickname":"往事随风，顺其自然","note":"","ucode":"F266EC6B143E38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41299,"discussion_content":"你这个方法没有返回值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572396821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1287860,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VKUdRdM9ib6bBJ4xfKuPENHEno87IoSpxiaK3v47d3DdObnC7TuMo4AaDFhm0nDYziaicdsBShU6RSCOlLicZoxpTXw/132","nickname":"Geek_441338","note":"","ucode":"5557484E575244","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32990,"discussion_content":"        T2Task t2 = new T2Task();\n        FutureTask<T2Task> t2TaskFuture = new FutureTask<>(t2, null);\n        ExecutorService executorService = Executors.newFixedThreadPool(1);\n        executorService.submit(t2TaskFuture);\n\n        T1Task t1 = new T1Task(t2TaskFuture);\n        FutureTask<T1Task> t1TaskFuture = new FutureTask<T1Task>(t1, null);\n        ExecutorService executorService1 = Executors.newFixedThreadPool(1);\n        executorService1.submit(t1TaskFuture);\n        \n        t1TaskFuture.get();","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571069638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87827,"user_name":"zhangtnty","can_delete":false,"product_type":"c1","uid":1180553,"ip_address":"","ucode":"3C9A14BD7CF432","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/89/e1621a01.jpg","comment_is_top":false,"comment_ctime":1555725689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555725689","product_id":100023901,"comment_content":"王老师好，文中一题可以通过future.get()子线程方式实现，自行创建线程或创建线程池都可以，每个线程future自己的结果，然后保存即可，如果几个结果没有关联可以使用多线程获得结果很容易实现。<br>如果存在关系，比如竞价取最低价格，这样可能要复杂的多(尤其是需要适时竞价这种)。我想到的是：线程不阻塞、结果入缓存、异步任务刷新缓存竞价、动态变更前段展示。也想问一下王老师，还有没有更优的方案，谢谢！","like_count":0}]}