{"id":377672,"title":"07 | 工具进化：如何实现一个分布式压测平台","content":"<p>你好，我是吴骏龙。工欲善其事必先利其器，今天我将与你分享如何自己实现一个分布式压测平台。</p><p>现在只要是规模大一些的互联网公司，都在不遗余力地开发自己的压测平台，比如<a href=\"https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ%3D%3D&amp;mid=2653548195&amp;idx=1&amp;sn=7668528e8521196f6ef122e85f6028e9&amp;chksm=813a7f3bb64df62dfabba5e9de1ac8373ece36c792a11e8255b57abdaeba8697236c6361f926&amp;scene=0&amp;key=a226a081696afed0b5c63e7489f9cdcbaeac6955294907c42\">京东</a>、<a href=\"https://tech.meituan.com/2018/09/27/quake-introduction.html\">美团</a>、<a href=\"https://www.aliyun.com/product/pts\">阿里</a>、<a href=\"http://test.360.cn/dabai/\">360</a>。可能你会问，市面上已经有无数的开源压测工具和平台，比如JMeter、Locust、nGrinder、Gatling等，为什么要自己做呢？我在和一些大厂的同行交流经验时，发现对于常见开源压测工具的诟病不外乎有以下几点。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/yy/ee79af8c76bf32a18642f67590e4edyy.png?wh=2106*1205\" alt=\"\"></p><p>从开源压测工具和平台的这些缺点中，我们可以看出，对于企业来说，自研压测平台就是要满足以下三点需求：</p><p><strong>1. 平台化：</strong> 企业需要一个平台化的压测工具，每个团队都可以在这个平台上协作，而开源工具大多是C/S类型（ 客户端/服务器体系结构），缺乏平台化支持。</p><p><strong>2. 标准化：</strong> 企业需要一个统一的标准化压测平台，最好能够和公司的审批流程、管理平台等集成，而开源工具在这方面的扩展性一般不强。</p><p><strong>3. 控制成本：</strong> 企业需要控制压测平台的维护成本，对于规模大的公司，自研优于使用开源。虽然开源压测工具由社区维护，但反馈较慢，自己维护的成本又比较高，不如重写一个或者二次开发。</p><p>在这一讲，我会介绍一套由我设计的基于JMeter的分布式压测平台实现方案，这套方案也兼顾了开源工具的一些成熟功能，目前已经在阿里本地生活团队使用了超过4年，能够支撑近百万压测并发量，累计输出了近4000亿次请求量，管理近600台压测机，依然没有出现明显瓶颈。这些成绩到底是怎么做到的，我们来一探究竟吧。</p><!-- [[[read_end]]] --><h2>架构设计思路</h2><p>首先，实现一个分布式压测平台，要能解决上面提到的绝大部分问题，需要实现的功能可以细化为以下几个方面：</p><ul>\n<li><strong>用例管理：</strong> 用户建立测试用例，包含脚本文件、数据文件和插件，平台进行分类管理并持久化。</li>\n<li><strong>压测执行：</strong> 一键触发测试用例，可指定各种运行参数，可以指定多台压测机分布式执行，可以批量执行多个测试用例，压测过程中能够动态调节压测量。</li>\n<li><strong>实时结果（热数据）：</strong> 压测过程中，实时展示响应时间、吞吐量、错误率等概要数据。由于这些数据都是在压测时需要高频关注的，我们将其称之为“热数据”。</li>\n<li><strong>压测结果（冷数据）：</strong> 在压测结束后，展示平均响应时间、平均吞吐量，90/95/99线等更详尽的数据。这部分数据主要是供压测后的分析工作使用，不需要实时获取，因此被称之为“冷数据”。</li>\n<li><strong>压测机管理：</strong> 平台能够与压测机进行交互，调度压测机完成压测执行工作。</li>\n<li><strong>安全保障：</strong> 平台应具备一定的监控机制，对压测过程中的一些异常情况进行干预。</li>\n</ul><p>我们建设分布式压测平台的理念是“取其精华去其糟粕”，<strong>尽可能复用已有开源工具的成熟功能，因为这部分功能相对稳定，不需要重复造轮子；对开源工具不成熟的功能应当规避，在压测平台中进行实现；对开源工具不具备的功能，则完全在压测平台中实现。</strong></p><p>下图是分布式压测平台的顶层设计图，它是典型的Java Web项目，平台本身不执行测试只做调度，避免成为施压的瓶颈，后台均使用JMeter执行测试。平台会对挂载的压测机进行心跳检测，确保压测机是可用的。用例和数据文件可以存储在服务器本地，或者采用<a href=\"https://min.io/\">MinIO</a>进行高可用的文件对象存储。压测期间产生的冷数据持久化至数据库，热数据持久化至时序数据库（InfluxDB）并定期清理。平台允许挂载外部监控模块，对压测过程进行干预。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/ca/d023a5e15yy03a0e18dbdc1d8e898bca.png?wh=1515*1372\" alt=\"\"></p><p>这里，你需要注意，在使用JMeter进行压测时，如果并发量比较大，单机的资源配置可能无法支撑，这时需要联合多机进行分布式压测，然而JMeter自身的分布式压测功能是有一定缺陷的：</p><ul>\n<li>JMeter的分布式执行和单机执行方式的差异较大，需要做很多额外配置，由此产生大量运维工作。</li>\n<li>JMeter分布式执行模式，master节点通常不参与压测，而是收集slave节点的压测信息，这会造成一定程度上的资源浪费。</li>\n<li>JMeter分布式执行模式，slave节点会将每个请求打点都实时回传给master节点，造成大量的带宽消耗。</li>\n</ul><p>这时候怎么办呢？上面我提到过，对开源工具不成熟的功能应当规避，因此，我们可以在每台压测机中植入一个Agent，它能够与压测平台服务器通过长连接的方式建立通信，这样平台就可以直接对压测机进行调度。这种方案相当于我们在平台层重新实现了JMeter的分布式调度功能，两者的实现对比见下表。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/ff/c213f874bb301a7d75472bb5f0f704ff.png?wh=1594*274\" alt=\"\"></p><p>这个方案也一并实现了<strong>压测过程中的冷热数据分离</strong>，冷数据在测试完成后才会传输，如果不需要压测端数据，甚至可以配置不存储冷数据，因此该方案的扩展性是非常友好的，理论上支持的TPS没有上限。</p><h2>主要功能实现方案和原理</h2><p>说完了需要实现的功能和架构设计思路，相信你对我们要实现的压测平台已经有了初步认识，下面我就从平台的6大功能实现方案和原理进行展开，沿着基础功能到高阶功能的顺序进行讲解，展开的粒度大约控制在让你稍加思考就能上手实现的程度，你可以选择擅长的编程语言及前后端框架去实现具体功能。</p><p>如果你希望能更直观地看到整个平台的功能全貌，我也制作了一个预览视频，在这一讲的最后我会提供给你。</p><h3>1.如何实现测试状态流转</h3><p>测试状态流转是压测平台管理测试工作的核心，所以我放在第一个讲。和人类的生老病死一样，每一轮成功的测试工作会经历一个完整的生命周期，可以描绘成下面这条主线。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/ed/58bc9067cb030e1e17751ac896090fed.png?wh=2062*570\" alt=\"\"></p><p>其中，我将<strong>配置、触发、运行、收集、清理定义为五大内部行为</strong>（平台内部逻辑管控），这五大内部行为都会改变测试的状态；同时，我们还会允许一些外部行为去干预测试工作，比如在运行过程中需要人为停止测试，外挂的监控组件判断异常后主动熔断测试等，这些外部行为也会改变测试的状态。你可以通过下面的表格，理解各个行为对测试状态的影响，以及对应的后续行为是什么。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/1b/5451373e0210ee0f9210951410263f1b.png?wh=1280*1058\" alt=\"\"></p><p>将这些状态变换的触发条件和转换过程绘制成状态流转图，就是下面这个样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/ay/7e/ayya5dd98b0c2a7b8c22c2aa6bbc8a7e.png?wh=3614*954\" alt=\"\"></p><p>说白了，压测平台对测试状态的管理，就是通过代码实现出这张图的所有逻辑。其中的关键是，<strong>无论测试流程出现何种分支（正常或异常），最后都要能形成闭环（即起点一定最终要达到终点）</strong>，这对系统的健壮性非常重要，因为如果测试状态卡在任何中间状态，本质都是平台对其失去了管理，测试的信息都丢失了。</p><h3>2.如何获取和展示实时数据（热数据）</h3><p>上面我讲到了实现测试状态流转的整体思路，其中在“运行中”状态下，我们需要获取压测时的实时数据，以便实时观察压测情况。</p><p>我们这套分布式压测平台实现方案，是基于JMeter的，但遗憾的是，JMeter本身并不提供图形化的实时数据展示功能，以往我们只能通过输出日志看到一些粗略的信息。在压测平台中，我们就对实时数据展示功能进行了实现，主要原理是通过JMeter的Backend Listener将测试结果实时发往InfluxDB，同时平台向InfluxDB轮询查询数据，得到实时曲线并展示给用户。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/00/5cc95439e957c0a654fa0313969a2500.png?wh=1265*581\" alt=\"\"></p><p>当然，你也可以直接基于流行的开源数据可视化系统<a href=\"https://grafana.com/\">Grafana</a>进行数据展示。</p><p>另外，补充一句，我在2017年为JMeter贡献了基于UDP协议与InfluxDB传输数据的Backend Listener，比起当时官方支持的HTTP协议，传输效率更高，被列为JMeter 3.3的核心改进项，如果你也想使用这个UDP协议的Backend Listener的话，请确保JMeter版本 ≥ 3.3，欢迎你尝试。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/4a/e23f94d143a2c6482d239ea817064b4a.png?wh=825*328\" alt=\"\"></p><h3>3.如何处理结果数据（冷数据）</h3><p>实时数据要讲究快，能实时观察压测结果，比如，我们只要看到响应时间和错误率就可以基本了解压测当时的状态了。但对结果数据要更讲究全，目的是在压测结束后对压测结果做详细分析时，能精细到看到每个报错信息是什么。</p><p>由于压测平台自己实现了分布式压测模式，因此在拿到每台压测机的结果文件后，也需要自行对这些结果文件的内容进行合并和解析，并持久化记录下来。这里所谓的结果文件其实就是压测生成的JTL文件，我们先来看下JTL文件的一个片段。</p><pre><code>timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect\n1617696530005,81,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,78,0,43\n1617696530088,32,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,32,0,0\n1617696530120,32,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,32,0,0\n1617696530152,32,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,32,0,0\n1617696530184,31,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530216,31,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530248,31,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530280,31,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530312,31,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530343,32,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,31,0,0\n1617696530375,32,HTTP请求,200,OK,线程组 1-1,text,true,,2497,118,1,1,http://www.baidu.com/,32,0,0\n</code></pre><p>JTL文件的特点很鲜明，可以看到，相对应每一行的单条结果数据的大小非常小（大约只有100多个字节），但总量很大（上面的例子只是片段，实际可能有几万到几百万条）。如果我们只是简单的将所有数据存储起来，将会占用大量的存储空间，因此结果数据需要做预聚合再存入。</p><p>预聚合是怎么做的呢？下面代码展示了聚合存储的数据结构，核心是以label（JTL中的label）作大分类，维度（errorMsg、errorCode等）作小分类，以时间作为聚合标准，interval固定，固定聚合为60个点，从而保证存储大小不会过大。</p><pre><code>{\n    &quot;label&quot;: &quot;upload&quot;, -- 大分类，比如这条记录只针对upload label\n    &quot;totalCount&quot;: 428,\n    &quot;totalErrorCount&quot;: 12,\n    &quot;errorMsg&quot;: [ -- 维度字段，作小分类\n        {\n            &quot;msg&quot;: &quot;io.exception&quot;,\n            &quot;count&quot;: 12\n        },... -- 固定聚合成60个点\n    ],\n    &quot;errorCode&quot;: [\n        {\n            &quot;code&quot;: &quot;404&quot;,\n            &quot;count&quot;: 12\n        },...\n    ],\n    &quot;count&quot;: [\n        12, …, 15\n    ],\n    &quot;error&quot;: [\n        12, …, 15\n    ],\n    &quot;rt&quot;: [\n        12, …, 15\n    ],\n    &quot;minRt&quot;: [\n        12, …, 15\n    ],\n    &quot;maxRt&quot;: [\n        12, …, 15\n    ]\n}\n</code></pre><p>结果数据的这种存储方式，既保证了不会占用太大的存储空间，又能够汇总出丰富全面的数据。</p><h3>4.如何进行吞吐量限制与动态调节</h3><p>测试状态流转、冷热数据的获取和处理是压测平台最基本的功能，下面我来介绍一些更高阶的功能，先从吞吐量控制与动态调节开始吧。在压测时，<strong>“控量”是非常重要的</strong>，JMeter是根据线程数大小来控制压力强弱的，但我们制定的压测目标中的指标往往是吞吐量（QPS/TPS），这就给测试人员带来了不便之处，必须一边调整线程数，一边观察QPS/TPS达到什么量级了。</p><p>为了解决这个问题，JMeter提供了吞吐量控制器的插件，我们可以通过设定吞吐量上限来限制QPS/TPS，达到控量的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/c2/0ac99b79e3753b70b37b36bb907f0ac2.png?wh=1736*358\" alt=\"\"></p><p>上面的做法能够确保将吞吐量控制在一个固定值上，但这样还远远不够，实际工作中我们希望在每次压测执行时能够随时调节吞吐量，比如，在某个压力下服务容量没有问题，我们希望在不停止压测的情况下，再加一些压力，这样的功能该如何实现呢？</p><p>我提供的方案也很简单，依然是基于吞吐量控制器，基本的实现原理是将吞吐量限制值设为占位符（如下图中的${__P(throughput, 99999999)}，throughput就是占位符），利用JMeter的BeanShell功能，通过执行外部命令的方式，在运行时注入具体值，达到动态调节吞吐量的目的。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/47/f26afba15da8ccf95488020982a81947.png?wh=1720*344\" alt=\"\"></p><p>上面提到的外部命令具体为：</p><pre><code>java -jar &lt;jmeter_path&gt;/lib/bshclient.jar localhost 9000 update.bsh &lt;qps&gt;\n</code></pre><p>其中，update.bsh文件的内容为：</p><pre><code>import org.apache.jmeter.util.JMeterUtils;\n\ngetprop(p){ // get a JMeter property\n    return JMeterUtils.getPropDefault(p,&quot;&quot;);\n}\n\nsetprop(p,v){ // set a JMeter property\n    print(&quot;Setting property '&quot;+p+&quot;' to '&quot;+v+&quot;'.&quot;);\n    JMeterUtils.getJMeterProperties().setProperty(p, v);\n}\n\nsetprop(&quot;throughput&quot;, args[0]);\n</code></pre><p>压测平台将上述这些工作统一封装后提供出接口，前端界面只要留出输入框供用户填写吞吐量的参数，就可以方便的使用了。</p><h3>5.如何实现配置集功能</h3><p>我们再来聊一个和压测运行相关的重要功能，称之为“配置集”。这个功能其实当初并不在平台设计的考虑范围内，但随着全链路压测规模的日益壮大，需要同时执行的用例数量越来越多，每次执行时都得一个一个去触发，手忙脚乱，有了这个痛点，引发了我们对配置集功能的探索。</p><p><strong>配置集功能的本质是“批量运行多个测试用例”</strong>，如下图所示，用户只需提前在配置集中添加需要执行的测试用例，以及每个执行轮次的配置信息，比如线程数、持续时间等。配置集设定完成后，选择某个轮次，就能基于相应的配置一键触发所有测试用例。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/94/48ac6d200a5c1c0e9792014ef38cef94.png?wh=1399*355\" alt=\"\"></p><p>从实现的角度来讲，配置集是映射多个用例的数据结构，而刚我们提到的“轮次”的概念，是指对同一个配置集设定多轮不同的配置项，每个配置项还是作用在测试用例上，目的是进一步提高可复用性。简而言之，<strong>记住这个公式：“配置集 1：N 测试用例；测试用例 1：N 轮次配置”</strong>，即一个配置集对应多个测试用例，一个测试用例对应多个轮次配置。再直观一些，你可以直接通过下面的代码理解这个逻辑。</p><pre><code>{\n    &quot;_id&quot; : ObjectId(&quot;603c7f8f587ca226d257b144&quot;),\n    &quot;testPlanName&quot; : &quot;addTestPlan&quot;,\n    &quot;testPlanUnitList&quot; : [ -- 一个配置集对应多个测试用例\n    {\n        &quot;testcaseId&quot; : &quot;5fc4dd4ee9d7d7b19d0f5152&quot;,\n        ……\n        &quot;testRoundList&quot; : [ -- 一个测试用例对应多个轮次配置\n        {\n           &quot;threadCount&quot; : 1,\n           &quot;duration&quot; : NumberLong(60),\n           &quot;rampUp&quot; : 0,\n           &quot;detailLog&quot; : true,\n           &quot;realTimeLog&quot; : true,\n           &quot;throughput&quot; : 100,\n           &quot;name&quot; : &quot;配置1&quot;,\n           &quot;qpsStep&quot; : 0\n       }， ……\n       ]\n    }\n    ],\n ……\n}\n</code></pre><p>由于在配置集中同时管理着多个用例的所有信息，因此还可以实现一些高级操作，比如：某个用例先执行一段时间后，其他用例再启动，其本质就是单独先触发一个用例，等待固定时间后再触发其余用例；或是，运行时临时改变其中几个用例的QPS上限，其他用例保持不变，其本质就是对单个用例进行吞吐量调节，等等。</p><h3>6. 监控模块</h3><p>我已经介绍了很多关于压测运行和压测数据的功能模块，最后我们来学习一下监控模块，它同样也是压测平台非常重要的组成部分，也是<strong>几乎所有开源压测工具都缺乏的功能模块</strong>。监控模块可以分为两类，分别是内部监控模块和外部监控模块。</p><p>内部监控模块主要针对压测平台自身运行过程进行监控和干预，观察压测是否处于正常进行中，如果遇到异常情况，如线程异常终止、没有持续的测试数据流出、磁盘打满等，则立刻终止测试，反馈异常结果并记录日志供排查。</p><p>内部监控模块实现起来也很简单，在触发压测后，我们也同时启动一个任务对使用的压测机进行监控，监控的内容可以是磁盘使用量、压测数据流的状态等等，如果识别到异常，则触发相应的异常逻辑即可。</p><p>第二类监控为外部监控模块，主要用来对接外部监控系统，这个模块很重要，除了方便观察系统指标以外，其最关键的作用是能够反向干预压测工作，协助用户规避风险，尤其是针对线上压测这类高风险工作。比如，当监控到服务端的错误率达到一定阈值时，立刻停止当次测试。</p><p>外部监控模块的实现，需要与外部监控系统提供的接口对接，如果有些监控系统自带报警功能，那么就更好了，压测平台在获取到报警信息后可以立刻停止测试。</p><p>以对接Grafana监控为例，最简单的方式莫过于采用Webhook的方式，我们只需要指定一个接口并配置到Grafana中，在监控告警事件发生时，Grafana就会回调这个接口，触发相应的停止测试的动作。当然，也可以触发其他动作，这取决于接口的逻辑。在<a href=\"https://grafana.com/docs/grafana/latest/alerting/notifications/#webhook\">Grafana使用手册</a>中提供了详细的对接案例，你可以进一步阅读，加深理解。</p><h2>总结</h2><p>工欲善其事必先利其器，压测平台作为容量保障的工具枢纽，其地位不言而喻。一个扩展性好、设计健壮、体验优秀的压测平台，能够对容量保障工作带来巨大帮助。</p><p>这一讲中，我介绍了一个基于JMeter的分布式压测平台的实现方案，它解决了企业对于压测工具的三个重要诉求：平台化、标准化和控制成本。如果你的团队已经习惯于使用流行的JMeter进行压测，那么上手这个平台几乎是没有什么成本的，因为它100%兼容JMeter。</p><p>平台的主要功能可以分为几大部分去看，首先是测试状态，我们明确了测试行为和测试状态之间的流转关系，确保无论测试过程是正常执行还是异常终止，整个流程都能闭环完结。</p><p>其次是测试数据，我们将数据分为热数据和冷数据，分别对应实时数据和结果数据，并采用了完全不同的思路去实现，确保各自的特点能够充分发挥。</p><p>接下来，我们聊到了测试运行过程中的两个重要功能，吞吐量动态调节和配置集。其中，吞吐量动态调节利用了JMeter BeanShell的动态传参功能，我们只需要暴露吞吐量作为参数即可；而配置集则是平台对多测试用例运行的一种实现，能够方便我们批量执行大量测试用例。</p><p>最后，监控模块是压测工作安全性的重要保证，内部监控模块对压测本身的状态进行检查，如有异常及时反馈；外部监控模块则是对接外部监控系统，在服务出现异常时主动终止测试。</p><p>通过今天的学习，希望能够让你了解分布式压测平台实现的重点和难点，也期待你能够创造更多方便友好的功能，为容量保障工作的降本提效贡献一份力。</p><h2>课后讨论</h2><p>这里，我给出一个分布式压测平台的预览视频，包含这一讲提到的所有功能，它可以作为你的实现蓝本。如果观看了视频后，你有了什么新的思路或启发，欢迎分享给我，我们共同探讨。<br>\n<video poster=\"https://static001.geekbang.org/resource/image/18/00/18e2f060e8ec207a51fa8eb855900500.png\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/4233a2b0-1799dd39159-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/d9c23a292da7401b99b64feac29036ee/cbe94edfbf0649d3b1d78633ff52d1d5-f414234c450e45dc655bdab2c7fd01c3-sd.m3u8\" type=\"application/x-mpegURL\"></video></p>","neighbors":{"left":{"article_title":"06 | 全链路压测：系统整体容量保障的“核武器”（下）","id":376491},"right":{"article_title":"08 | 容量预测（上）：第三只眼，通过AI预测服务容量瓶颈","id":378435}},"comments":[{"had_liked":false,"id":357945,"user_name":"天启","can_delete":false,"product_type":"c1","uid":3184797,"ip_address":"上海","ucode":"FE5C5D7D48C851","user_header":"https://static001.geekbang.org/account/avatar/00/30/98/9d/29ba3f46.jpg","comment_is_top":false,"comment_ctime":1663766251,"is_pvip":false,"replies":[{"id":"130301","content":"你好，启动方式是后者。我们完全放弃了JMeter的分布式执行策略，因此也就不再使用jmeter-server的启动方式，所有JMeter节点都视为是Master由平台统一调度。","user_name":"作者回复","user_name_real":"编辑","uid":"1017311","ctime":1663844608,"ip_address":"上海","comment_id":357945,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1663766251","product_id":100078501,"comment_content":"老师你好，我想问下通过部署agent的方式来规避master-salve的痛点的话，压测机的启动方式是以jmeter-server方式的吗，还是说是用agent,动态的进行命令行方式jmeter -n xxxx动态启动压测？","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588558,"discussion_content":"你好，启动方式是后者。我们完全放弃了JMeter的分布式执行策略，因此也就不再使用jmeter-server的启动方式，所有JMeter节点都视为是Master由平台统一调度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663844608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3184797,"avatar":"https://static001.geekbang.org/account/avatar/00/30/98/9d/29ba3f46.jpg","nickname":"天启","note":"","ucode":"FE5C5D7D48C851","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":588570,"discussion_content":"谢谢老师的耐心解答，我还有个问题就是，那这个agent我可以理解为一个java程序，分布式压测的时候会有多个agent,由压测平台去调度这些agent,然后由agent去动态的启动jmeter容器完成压测是哇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663855378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":588558,"ip_address":"上海"},"score":588570,"extra":""}]}]},{"had_liked":false,"id":346821,"user_name":"菜蜗牛","can_delete":false,"product_type":"c1","uid":1353181,"ip_address":"","ucode":"C8FD647CB1F77F","user_header":"https://static001.geekbang.org/account/avatar/00/14/a5/dd/c713f34e.jpg","comment_is_top":false,"comment_ctime":1653459630,"is_pvip":false,"replies":[{"id":"126641","content":"你好，我确实早有开源的计划，但因为一些限制暂时无法达成，一旦能够开源，我会及时更新，感谢你的关注","user_name":"作者回复","user_name_real":"编辑","uid":"1017311","ctime":1653910200,"ip_address":"","comment_id":346821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653459630","product_id":100078501,"comment_content":"老师，您好， 请问您的压测平台是否是开源的呢？是的话，是否可以贴一下源码地址","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574221,"discussion_content":"你好，我确实早有开源的计划，但因为一些限制暂时无法达成，一旦能够开源，我会及时更新，感谢你的关注","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653910201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345983,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1652751223,"is_pvip":false,"replies":[{"id":"126380","content":"你好，mc工具我不太熟悉，无法提供专业的指导，非常抱歉","user_name":"作者回复","user_name_real":"编辑","uid":"1017311","ctime":1653182536,"ip_address":"","comment_id":345983,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652751223","product_id":100078501,"comment_content":"老师 你知道客户端使用mc 工具， 服务端是3个节点的minio集群    怎样做对服务端的上传 下载  性能测试？ MC这个工具怎么指定并发数  ","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573050,"discussion_content":"你好，mc工具我不太熟悉，无法提供专业的指导，非常抱歉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653182536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322197,"user_name":"林林总总0107","can_delete":false,"product_type":"c1","uid":1178500,"ip_address":"","ucode":"C1CBCD7DD35849","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/84/5e95ef55.jpg","comment_is_top":false,"comment_ctime":1637229633,"is_pvip":false,"replies":[{"id":"117000","content":"你好，如果需要调节QPS，线程数一般适当设大点就行了（线程数是固定值），如果线程数设的太小，达不到目标QPS，那么调节也就没意义了。当然，也不要把线程数设的太夸张，一方面压测资源不一定够，另一方面JMeter是通过间隔抛弃请求达到控制QPS的效果的，线程数太大可能会造成抖动。","user_name":"作者回复","user_name_real":"作者","uid":"1017311","ctime":1637250074,"ip_address":"","comment_id":322197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637229633","product_id":100078501,"comment_content":"老师，想问下关于线程数与TPS&#47;QPS动态设置的时候，这里面的关系应该是怎样的？比如，执行java -jar &#47;lib&#47;bshclient.jar localhost 9000 update.bsh &lt;qps&gt;，这里面只有调整QPS&#47;TPS,但是没有线程数的调整，是不是说只需要调整&lt;qps&gt;，不管线程数的调整？我看到配置集功能里面的用例也有总线程数的参数项，具体执行测试的时候这个值应该怎么去调整呢","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531239,"discussion_content":"你好，如果需要调节QPS，线程数一般适当设大点就行了（线程数是固定值），如果线程数设的太小，达不到目标QPS，那么调节也就没意义了。当然，也不要把线程数设的太夸张，一方面压测资源不一定够，另一方面JMeter是通过间隔抛弃请求达到控制QPS的效果的，线程数太大可能会造成抖动。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637250074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303241,"user_name":"ask001","can_delete":false,"product_type":"c1","uid":1106769,"ip_address":"","ucode":"EAB769B4A04BC4","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK55LibVuNVjGmjpOtFQPucwXISjj5pLWn0FichPRZFyxYFcqnMNfW9xahKJwKtI1kLuvZ1DGUjFCQg/132","comment_is_top":false,"comment_ctime":1626682668,"is_pvip":false,"replies":[{"id":"109822","content":"为你的认真细致点赞！我说下我个人的理解。<br><br>对于实时数据，一般来说我们其实只需要观察一个宏观的指标概要，判断压测时的大致状况，有无风险等。而对于非实时数据，则需要计算出精确的指标（如99线等），因为我们要输出结论供详细分析和其他决策参考（限流等）。<br><br>这是压测平台将数据进行冷热分离最原始的初衷，越精确的结果，必然会带来越昂贵的计算量和资源消耗，我相信JMeter的InfluxdbBackendListener的这种处理方式，肯定也有这方面的考量。<br><br>原始的采样数据，在生成的JTL文件中都有，精确到了每个请求，我们在压测后统一回传服务器做异步处理，不存在资源瓶颈问题，用户最多只需等待几分钟。<br>","user_name":"作者回复","user_name_real":"mybreeze77","uid":"1017311","ctime":1626786929,"ip_address":"","comment_id":303241,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626682668","product_id":100078501,"comment_content":"谢谢老师之前问题的答复！老师我现在还有个疑问是看jmeter自带的InfluxdbBackendListenerClient逻辑是：BackendListener会把SampleResult丢到BlockingQueue中，BackendListener也会起一个线程从BlockingQueue中取SampleResult丢给BackendListenerClient处理。InfluxdbBackendListenerClient处理SampleResult的逻辑是最终把SampleResult加到DescriptiveStatistics中，InfluxdbBackendListenerClient会起一个定时线程池，定时利用DescriptiveStatistics先计算一下在定时时间间隔段（默认值5秒）采样到的SampleResult的统计值（比如平均响应时间、总的sample、5秒内95线等）发给influxdb。所以InfluxdbBackendListenerClient其实入influxdb的值是在定时间隔段内计算后的值。老师想问下如果是多节点每个节点都是上报给influxdb，如果用jmeter自带的InfluxdbBackendListenerClient是不是不合适？还是说自己写一个InfluxdbBackendListenerClient，把原始的采样结果入influxdb,这样方便influxdb 取数据加工(根据具体指标进行求和或求平均值等),如果是原始的采样结果入influxdb我觉得jmeter每次采样数据发influxdb会是瓶颈，影响压力机资源，同时因为用的社区版influxdb，TPS大的化influxdb也可能会是瓶颈？","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523603,"discussion_content":"为你的认真细致点赞！我说下我个人的理解。\n\n对于实时数据，一般来说我们其实只需要观察一个宏观的指标概要，判断压测时的大致状况，有无风险等。而对于非实时数据，则需要计算出精确的指标（如99线等），因为我们要输出结论供详细分析和其他决策参考（限流等）。\n\n这是压测平台将数据进行冷热分离最原始的初衷，越精确的结果，必然会带来越昂贵的计算量和资源消耗，我相信JMeter的InfluxdbBackendListener的这种处理方式，肯定也有这方面的考量。\n\n原始的采样数据，在生成的JTL文件中都有，精确到了每个请求，我们在压测后统一回传服务器做异步处理，不存在资源瓶颈问题，用户最多只需等待几分钟。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626786929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302769,"user_name":"ask001","can_delete":false,"product_type":"c1","uid":1106769,"ip_address":"","ucode":"EAB769B4A04BC4","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK55LibVuNVjGmjpOtFQPucwXISjj5pLWn0FichPRZFyxYFcqnMNfW9xahKJwKtI1kLuvZ1DGUjFCQg/132","comment_is_top":false,"comment_ctime":1626358618,"is_pvip":false,"replies":[{"id":"109609","content":"不是传统的master-slave模式。<br><br>实时数据的采样，是每个slave在压测时直接将数据上报至InfluxDB的。每一轮压测，平台都会生成一个唯一的triggerId，所有slave上报数据时均带上值为这个triggerId的TAG，以便InfluxDB聚合。<br><br>master则是直接从InfluxDB中取出数据，进行一定的加工（根据具体指标进行求和或求平均值等），再推送数据展示到前端。<br><br>显然，master的计算量不大（而且都是用了InfluxDB自带的聚合方法），所以瓶颈一般不会出现在master。反倒是slave在上报数据时，如果TPS很高可能会出现瓶颈，关于这一点可以看一下JMeter的InfluxdbBackendListener的实现，简单说，数据上报是通过消息队列异步进行的，且这个队列是有长度上限的（可以设置），通过这种方式避免过多的影响slave的压测资源消耗。","user_name":"作者回复","user_name_real":"mybreeze77","uid":"1017311","ctime":1626445410,"ip_address":"","comment_id":302769,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626358618","product_id":100078501,"comment_content":"问下基于获取和展示实时数据（热数据）这块，如果要用多台压测机的化也是用master-slave 这种模式吗？这种模式压测过程中slave会把采样结果传回master机器，master机器统一计算后再入influxdb（比如5秒内的所有采样结果计算下在发送到influxdb），这种模式如果tps大的化，master是不是还会有瓶颈，还是说没用master-slave这种模式的？","like_count":0,"discussions":[{"author":{"id":1017311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/df/50c17de2.jpg","nickname":"mybreeze77","note":"","ucode":"9D96B0AACD2540","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523415,"discussion_content":"不是传统的master-slave模式。\n\n实时数据的采样，是每个slave在压测时直接将数据上报至InfluxDB的。每一轮压测，平台都会生成一个唯一的triggerId，所有slave上报数据时均带上值为这个triggerId的TAG，以便InfluxDB聚合。\n\nmaster则是直接从InfluxDB中取出数据，进行一定的加工（根据具体指标进行求和或求平均值等），再推送数据展示到前端。\n\n显然，master的计算量不大（而且都是用了InfluxDB自带的聚合方法），所以瓶颈一般不会出现在master。反倒是slave在上报数据时，如果TPS很高可能会出现瓶颈，关于这一点可以看一下JMeter的InfluxdbBackendListener的实现，简单说，数据上报是通过消息队列异步进行的，且这个队列是有长度上限的（可以设置），通过这种方式避免过多的影响slave的压测资源消耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626445410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}