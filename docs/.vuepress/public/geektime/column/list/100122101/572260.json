{"id":572260,"title":"01 | 函数式vs.面向对象：响应未知和不确定","content":"<p>你好，我是石川。</p><p>编程模式（programming paradigm）可以说是编程语言的<strong>元认知</strong>。从编程模式的角度看JavaScript，它是结构化的、事件驱动的动态语言，且支持声明式和指令式两种模式。所以我们说，JavaScript是一个多模式（multi-paradigm）的语言，也是一门“丰富”的语言。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/6d/8b03bea0b1578372311923c81053e26d.jpg?wh=1920x595\" alt=\"图片\"></p><p>在JavaScript所支持的编程模式中，用得最多的是<strong>面向对象</strong>（OOP object oriented programming）和<strong>函数式</strong>（FP functional programming）两种，其中又以面向对象的普及率最高。现在介绍面向对象的书已经很多了，函数式因为受众相对小一些，支持的语言少一些，所以被提及的也相对比较少。</p><p>我猜你也许已经对这两种编程模式有所了解，甚至会比较熟悉，但我之所以还是要在第一节课去强调这个话题，是因为你在学习JavaScript时，可能会面对以下至少 <strong>1个核心痛点</strong>：</p><ul>\n<li>如果你已经学过传统的面向对象语言，那么在学JavaScript的时候，很可能对函数式的理解和运用不够深入；</li>\n<li>反之，如果你一开始就学习JavaScript，只是停留在开发一些简单应用上，可以说你对它的面向对象的理解和运用，也不会很深入。</li>\n</ul><!-- [[[read_end]]] --><p>这两种学习困扰，很多时候会导致我们刚知道了点概念，就碰上了千奇百怪的<strong>副作用</strong>，然后我们发现还需要去学习解决它的办法，最后往往很容易就放弃了。</p><p><span class=\"reference\">补充：在开篇词里，我提到函数式+响应式编程可以对抗<strong>不确定性</strong>。这个概念不只是在编程中，它也是一个跨学科的研究。比如在AI、机械和航空航天工程这些硬科技的领域，以及很多知名的大学（如伯克利、麻省理工）和政府机构（如NASA），都对System Dynamics and Controls开展了很深入的研究。其核心就是研究在动态情况下如何做到系统控制，其中很重要的一点就是<strong>处理波动和干扰</strong>。</span></p><p><span class=\"reference\">而在函数式编程中，我们通常会把各种干扰，就叫做<strong>副作用（Side effect）</strong>。</span></p><p>所以接下来，我会先带你从“思维大厦”的顶层开始，来了解JavaScript语言的核心思想，然后再带你看看如何<strong>因地制宜</strong>地使用这两种编程模式来解决问题。这样一来，你在日后面对已知和未知问题，做复杂系统开发的时候，也能找到一套行之有效的方法了。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/32/88b6eb343cfa28c2499f6395c6c3a032.jpg?wh=1920x815\" alt=\"图片\"></p><h2>函数式编程</h2><p>首先，我们一起来看看函数式编程，了解下函数是什么、它是做什么用的、在编程中可能会有哪些副作用，以及如何利用JavaScript的核心设计思想和工具，解决这些副作用。</p><h3>函数是什么、如何使用？</h3><p>一个函数由输入、函数和输出组成，这和我们在初中就学过的函数一样，<strong>函数是数据集到目标的一种关系</strong>，它所做的就是把行为封装起来，从而达到目标。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/60/8d6e82514b0acf5794d7a4b162806160.jpg?wh=1920x718\" alt=\"图片\"></p><p>举一个最简单的例子：我们要实现一个“计算消费税”的工具，目标是通过产品价格计算出消费税。</p><p>以下代码中的productPrice是输入的<strong>形参（parameter）</strong>，产品价格100元是传入的数据<strong>实参（argument）</strong>，而calculateGST这个功能就是封装算法的函数本身；代码中输出的5，就是<strong>返回值（returned value）</strong>，也就是消费税5元<strong>。</strong></p><pre><code class=\"language-javascript\">function calculateGST( productPrice ) {\n    return productPrice * 0.05;\n}\ncalculateGST(100); // return 5\n</code></pre><p>其实，很多开发者常用的jQuery就是一个工具集。我们打开jQuery在GitHub的<a href=\"https://github.com/jquery/jquery\">源代码</a>，可以看到里面有大大小小的工具助手。比如下面这个isArrayLike函数，就是一个帮助我们判断一个对象是不是类似数组的功能。这个功能也可以独立于jQuery库存在，这就是函数式编程最基本的使用。</p><pre><code class=\"language-javascript\">function isArrayLike( obj ) {\n  var length = !!obj &amp;&amp; obj.length,\n    type = toType( obj );\n\t\n  if ( typeof obj === \"function\" || isWindow( obj ) ) {\n    return false;\n  }\n\t\n  return type === \"array\" || length === 0 ||\n    typeof length === \"number\" &amp;&amp; length &gt; 0 &amp;&amp; ( length - 1 ) in obj;\n}\n</code></pre><p>所以，通过isArrayLike可接受的参数可见，函数的输入值不仅可以是一个基础类型数据（primitive type），比如前面例子中的数字或者字符串；也可以是一个相对复杂些的对象类型数据（object type），包括对象本身和数组。甚至，函数本身作为对象，也可以是输入或输出值，我们把这种函数就叫做<strong>高阶函数（higher order functions）</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/fd/8164fe53b89fc1c1406d3101149b1dfd.jpg?wh=1920x1008\" alt=\"图片\"></p><h3>函数中都有哪些副作用？</h3><p>前面我们说过，函数已经把算法封装了起来，那么函数里相对就是可控的，而比较不可控的是<strong>外部环境</strong>。这里，我们可以把不可控的外部环境分为三大类。</p><p>第一类，函数中最常见的副作用，就是<strong>全局变量（global variable）</strong>。比如下面的例子里，我们首先定义了一个全局变量x，之后每次在log它的值之前，都执行了不同的函数，但我们没法保证这些函数没有改变这个变量的值，也没法保证每次输出的结果是1。所以从输入开始，这种不确定性就存在了。</p><pre><code class=\"language-javascript\">var x = 1;\nfoo();\nconsole.log( x );\nbar();\nconsole.log( x );\nbaz();\nconsole.log( x );\n</code></pre><p>除了全局变量以外，另一个比较明显的问题就是 <strong>IO影响（IO effects）</strong>。这里的IO说的不是前面函数里的参数和返回值，而是类似前端浏览器中的用户行为，比如鼠标和键盘的输入，或者如果是服务器端的Node的话，就是文件系统、网络连接以及stream的stdin（标准输入）和stdout（标准输出）。</p><p>第三种比较常见的副作用是与<strong>网络请求（HTTP request）</strong>相关，比如我们要针对一个用户下单的动作发起一个网络请求，需要先获得用户ID，再连着用户的ID一起发送。如果我们还没获取到用户ID，就发起下单请求，可能就会收到报错。</p><h3>减少副作用：纯函数和不可变</h3><p>那么我们要如何减少以上这些副作用呢？在函数式编程中，有两个核心概念：纯函数（pure function）和不可变（immutability）。</p><p>这是一个“双循环”，纯函数更多解决的是“内循环”；而不可变更多考虑的是“外循环”。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/89/7106c8f8e8ee2c69976f7313f90db089.jpg?wh=1920x401\" alt=\"图片\"></p><p><strong>纯函数</strong>的意思是说，一个函数的返回结果的变化只依赖其参数，并且执行过程中没有副作用。也就是说打铁还需自身硬，面对外界的复杂多变，我们要先保证函数封装的部分本身是稳固的。比如前面消费税计算器的例子，当输入的产品价格参数为100时，输出的结果永远是5。无论有什么干扰，它都不会返回一个不是5的数字，除非你换一个参数。</p><p>我们再来看下面这个例子，当把税率从函数中抽离出来，放在函数外作为变量时，它就不是一个纯函数了，因为随着这个变量的变化，计算结果会有所不同。所以，纯函数就可以通过减少对外界不确定因素的依赖，来减少副作用。</p><pre><code class=\"language-javascript\">var rate = 0.05;\nfunction calculateGST( productPrice ) {\n  return productPrice * rate;\n}\ncalculateGST(100); // return 5\n</code></pre><p>除了纯函数，函数式编程解决副作用的另一个核心思想，就是<strong>不可变</strong>。这个如何理解呢？我们可以通过JavaScript中自带的splice和slice来举例。</p><pre><code class=\"language-javascript\">const beforeList = [1,2,3,4]\nconsole.log(beforeList.splice(0,2))\nconsole.log(beforeList.splice(0,2))\n//[ 1, 2 ]\n//[ 3, 4 ]\n\nconst beforeList = [1,2,3,4]\nconsole.log(beforeList.slice(0,2))\nconsole.log(beforeList.slice(0,2))\n//[ 1, 2 ]\n//[ 1, 2 ]\n</code></pre><p>可以看到，数组中的splice方法，在对数据进行了处理后，改变了全局中的beforeList的值，所以是可变的。而slice在执行之后的结果，没有影响全局中的beforeList的值，所以它是不可变的。也是因为这样，<strong>在开发中，如果要保证不可变，我们就不能用splice，而用slice。</strong></p><p>所以，不可变就是在减少程序被外界影响的同时，也减少对外界的影响。因为如果你把一个外部变量作为参数作为输入，在函数里做了改变，作为输出返回。那么这个过程中，你可能不知道这种变化会对整个系统造成什么样的结果。</p><p>而且在数组中，你还可以看到更多类似splice和slice这种纯函数、非纯函数，以及可变与不可变的例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/ed/668060b8cfdf2dd6569975d96e9ef2ed.jpg?wh=1920x1167\" alt=\"图片\"></p><p>另外，从纯函数和不可变的设计思想中，我们还可以抽象出一个概念。</p><p>因为“副作用”首先是一个作用（effect），而作用遵循的是一个因果（cause and effect）关系。那么，从值的角度来看，“<strong>纯函数”对值只影响一次，而“不可变”完全不影响</strong>。</p><p>如何理解“纯函数”对值只影响一次呢？这里有一个<strong>幂等（idempotence）</strong>的概念。如果你做过大型的交易类应用的话，应该对这个概念不陌生。比如说，有时用户对同一个订单多次重复发出更新请求，这时返回的结果不应该有差别。</p><p>在数学中，幂等的意思是不管我们把一个函数嵌套多少次来执行，它的结果都应该是一样的。比如在这个Math.round四舍五入的例子里，无论你嵌套执行几次，结果都是一样的。</p><pre><code class=\"language-javascript\">//数学幂等\nMath.round(((0.5)))\n</code></pre><p>在计算机中，幂等的意思是一个程序执行多次结果是一样的。比如，假设我们有一个adder函数，3和4相加永远返回7。所以，你其实可以把数学里的概念迁移过来。</p><pre><code class=\"language-javascript\">//计算机幂等\nadder (3, 4) // 返回 7\nadder (3, 4) // 返回 7\n</code></pre><p>好，然后我们再来看看如何理解“不可变”对值完全不影响。</p><p>通过前面array slice和splice的例子，你应该能感觉到，splice更像是一块<strong>橡皮泥</strong>，一开始它可能是个方块儿，你可以捏出腿和脑袋，它就成了一个小人儿，也就是说它本身发生了变化。而slice在处理完后是形成了一个新的数组，但原始的数组完好无损，它是把值当成<strong>乐高积木</strong>，而不是橡皮泥。把这种思想用到状态管理里，你就会记录状态的变化，而不会篡改状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/2c/410bd41ab2b3d3543bf310d9f129552c.jpg?wh=1920x1031\" alt=\"图片\"></p><p>总之，我们可以看到函数式编程最核心的地方，就是输入输出和中间的算法，我们要解决的核心问题就是副作用。而为了解决副作用，我们需要掌握两个重要的概念，一个是纯函数，一个是不可变。<strong>纯函数</strong>强调的是自身的稳定性，对结果只影响一次；而<strong>不可变</strong>强调的是和外界的交互中，尽量减少相互间负面的影响。</p><p><img src=\"https://static001.geekbang.org/resource/image/10/cb/10da7a3de6f518c1b3f4c68748e26fcb.jpg?wh=1920x918\" alt=\"图片\"></p><h2>面向对象编程</h2><p>我们再来看看面向对象。如前面所说，如果我们用函数来做一个税率计算工具，判断一个数是不是类数组的对象，是没问题的，而且我们可以放心，如果希望它“纯粹”，那么它运行的结果就可以基于我们定义的法则，没有惊喜，没有意外。那这样不就足够了？为什么我们还需要对象？下面我们就来看看。</p><h3>对象是什么、如何创建？</h3><p>开篇词里，我说过一个“摸着石头过河”的例子，首先得有站在岸边的“你”，这个“你”就是对象，如果没有对象，就算是有一个工具（function），比如有快艇在岸边，它也只能停靠在那儿；或者你有游泳这个方法（method），但它也只有在你身上才能发挥作用。</p><p>这其实就是对象的意义。我们在做业务系统开发的时候，会面对各种各样的业务对象，比如“表单”“购物车”“订单”，这些都可以看做是对象。所以我们说，<strong>工具和方法通常是服务于对象的</strong>。</p><p>举个例子，假设我们有一个微件对象，我们想定义一个属性是它的微件名称widgetName，并给它定义一个identify的功能来识别自己的名称，那么在JavaScript中，其实就可以通过以下代码来实现：</p><pre><code class=\"language-javascript\">var widget = {\n  widgetName : \"微件\",\n  identify : function(){\n    return \"这是\" + this.widgetName;\n  }\n};\n\nconsole.log(widget.widgetName); // 返回 \"微件\"\nconsole.log(widget.identify()); // 返回 \"这是微件\"\n</code></pre><h3>为什么需要封装、重用和继承？</h3><p>实际上，如果说函数加对象组成了<strong>生产力</strong>，那么封装、重用和继承则可以用来组成<strong>生产关系</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/0f/d243d2785c92e59e77c6dbae579b4a0f.jpg?wh=1920x679\" alt=\"图片\"></p><p><strong>封装</strong>最常见的使用就是在我们做组件化设计的时候，比如在一个旅行网站页面中，我们看到的筛选器、日历、结果区域都可以看做是不同的模块（module）或组件（ component），这些组件是通过封装导入加载到页面的。</p><p><strong>重用</strong>就是把可以重复使用的功能抽象到一个类里，每次只是创建一个它的实例对象来使用。比如我们的页面上有很多按钮，它们的功能大同小异，这时我们就可以把它抽象出来成为一个类（class），每一个按钮都是一个按钮类中的实例（instance）。</p><p>当然，上面我们说的按钮可能虽然功能上大同小异，但还是有具体差别。这时，我们可以把通用功能放到抽象类；而一些特定的行为或属性，我们可以通过<strong>继承</strong>放到实现类中，这样在继承了基础的父类（parent class）功能的基础上（extend），我们能够在子类（child class）中作一些改动。</p><p>但是如果一个程序中，父子的层级过于复杂，也会变得“<strong>官僚化</strong>”，如果父类有了问题，就会牵一发动全身，而且抽象的层级过多，也会让代码难以理解。</p><p>实际上，在面向对象中，也有组合的概念，就是一个子类不是继承的某个父类，而是通过组合多个类，来形成一个类。这也很像我们如今的职场，公司为了应付外界竞争压力，内部会有一个个的敏捷团队，通过每个成员自身价值和团队“<strong>组合</strong>”产生1+1&gt;2的价值，而不是强调依靠某种从属关系。</p><p>所以，在面向对象的编程中，也有<strong>“组合”优于“继承”</strong>的概念。不过在实际情况下，继承也不是完全不可取的，在开发中，我们使用哪种思想还是要根据情况具体分析。</p><h3><strong>什么是基于原型的继承？</strong></h3><p>好，既然说到了继承，那我们还需要明确一个问题，什么是基于原型的继承？</p><p>这里我们首先要搞清楚一点：JavaScript中的类和其它面向对象的语言，究竟有什么不同？</p><p>对于传统的面向对象的编程语言来说，比如Java，一个对象是基于一个类的“蓝图”来创建的。但是在JavaScript中，就没有这种类和对象的拷贝从属关系。实际上，JS里的对象和“类”，也就是构建函数之间是<strong>原型链接关系</strong>。</p><p>比如，在下图左边基于类的例子中，以一个类作为蓝图，可以创建两个实例。而右边基于原型的例子里，我们可以看到通过一个构建函数构建出的两个对象，是通过原型链和构建函数的原型相连接的，它们并不是基于一个蓝图的复制拷贝和从属关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/31/99/315b5ce3ecfbd349b7f1c0fc311dd199.jpg?wh=1920x861\" alt=\"图片\"></p><p>虽然后来JavaScript在ES6之后也加入了类，但实际上它只是运用了语法糖，在底层逻辑中，JavaScript使用的仍然是基于原型的面向对象。</p><p>在ES6+中，class的语法糖用法基本和之前的类似，只是把function变成了class：</p><pre><code class=\"language-javascript\">class Widget {\n  constructor (){\n  // specify here\n  }\n  notice(){\n    console.log (\"notice me\");\n  }\n \n  display(){\n     console.log (\"diaplay me\");\n  }\n}\n\nvar widget1 = new Widget();\n\nwidget1.notice();\nwidget1.display();\n</code></pre><p>好，我们再通过一个例子来实际观察下原型链。下面的代码中，我们是通过函数自带的call()方法和对象自带的Object.create()方法，让Notice作为子类继承了Widget父类的属性和方法，然后我们创建了两个实例notice1和notice2。</p><p>而这时，我们如果用getPrototypeOf来获取notice1和notice2的原型，会发现它们是等于Notice原型。当我们用display方法调用这个方法时，实际调用的是原型链里Notice的原型中的方法。</p><pre><code class=\"language-javascript\">function Widget(widgetName) {\n&nbsp;&nbsp;&nbsp; this.widgetName= widgetName;\n}\n \nWidget.prototype.identify = function() {\n&nbsp;&nbsp;&nbsp; return \"这是\" + this.widgetName;\n};\n \nfunction Notice(widgetName) {\n&nbsp;&nbsp;&nbsp; Widget.call(this, widgetName);\n}\n \nNotice.prototype = Object.create(Widget.prototype);\n \nNotice.prototype.display= function() {\n&nbsp;&nbsp;&nbsp; console.log(\"你好， \" + this.identify() + \".\");\n};\n \nvar notice1 = new Notice(\"应用A\");\nvar notice2 = new Notice(\"应用B\");\n\nObject.getPrototypeOf(notice1) === Notice.prototype //true\nObject.getPrototypeOf(notice2) === Notice.prototype //true\n\nnotice1.display(); // \"你好，这是应用A\"\nnotice2.display(); // \"你好，这是应用B\"\n</code></pre><p>而这就印证了前面所说的，在传统的面向对象语言，比如Java里，当我们用到继承时，一个类的属性和功能是可以被基于这个类创建的对象“拷贝”过去的。但是在JavaScript里，虽然我们用Notice创建了notice1和notice2，但是它俩并没有将其属性和功能拷贝过来，而是默认通过原型链来寻找原型中的功能，然后利用“链接”而不是“拷贝”来。</p><pre><code class=\"language-javascript\">for (var method in Notice.prototype) {\n    console.log(\"found: \" + method);\n}\n// found: display\n// found: identify\n</code></pre><p>所以，我们通过上面的for in，就可以找出所有原型链上的功能，而如果我们想要看Notice函数的原型对象都有哪些功能的话，可以看到返回的是display和identify。这就证明，除了Notice自己的原型对象和自己的display功能之外，它也链接了Widget里的identify功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/5d/a3f82ea686a9022fa2a5c4d22f22c45d.jpg?wh=1920x954\" alt=\"图片\"></p><p>好，现在我们知道了，<strong>面向对象编程最核心的点就是服务业务对象，最需要解决的问题就是封装、重用和继承</strong>。在JavaScript中，面向对象的特殊性是基于原型链的继承，这种继承更像是“授权”，而不是传统意义的“父子”继承。而且为了解决继承的层级过多的情况，在面向对象中，也有组合优于继承的思想。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/c0/f9173ef0176ecyy13f2d744bf978e8c0.jpg?wh=2000x1125\" alt=\"\"></p><h2>总结</h2><p>这节课，我们主要是了解了函数式编程和面向对象编程的核心概念，它们一个是管理和解决副作用，一个是服务于业务对象。</p><p>而理解这部分内容，对于我们接下来要深入了解的这两种编程模式，以及后面会学习的各种数据结构和算法、JavaScript的各种设计模式等等，都有很强的指导意义，它能为我们学好并更好地应用JavaScript这门语言，提供扎实的理论基础。</p><h2>思考题</h2><p>我们提到函数式编程的时候，说到为了解决副作用，因此有了不可变和纯函数的概念，那么你觉得JavaScript中的常量（const，constant）算不算不可变呢？</p><p>欢迎在留言区分享你的答案、交流学习心得或者提出问题，如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p><h2>延伸阅读</h2><ul>\n<li><a href=\"https://link.springer.com/book/10.1007/978-1-4842-4087-8\">Beginning Functional JavaScript</a></li>\n<li><a href=\"https://github.com/getify/Functional-Light-JS/\">Function Light JS</a></li>\n<li><a href=\"https://ideazhao.com/2021/09/05/wechat_function/\">JavaScript世界的一等公民——函数</a></li>\n<li><a href=\"https://www.packtpub.com/product/mastering-javascript-functional-programming-second-edition/9781839213069\">Mastering JavaScript Functional Programming</a></li>\n<li><a href=\"https://learning.oreilly.com/library/view/you-dont-know/9781491905142/\">You Don’t Know JS: this &amp; Object Prototypes</a></li>\n<li><a href=\"https://learning.oreilly.com/library/view/learning-javascript-design/9781449334840/\">JavaScript Patterns</a></li>\n<li><a href=\"https://learning.oreilly.com/library/view/learning-javascript-design/9781449334840/\">Learning JavaScript Design Patterns</a></li>\n</ul>","neighbors":{"left":{"article_title":"开篇词 | JavaScript的进阶之路","id":572257},"right":{"article_title":"02 | 如何通过闭包对象管理程序中状态的变化？","id":573307}},"comments":[{"had_liked":false,"id":357930,"user_name":"Hello,Tomrrow","can_delete":false,"product_type":"c1","uid":1351769,"ip_address":"北京","ucode":"F9407C1C91B157","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/59/86073794.jpg","comment_is_top":false,"comment_ctime":1663752169,"is_pvip":true,"replies":[{"id":"130272","content":"正解","user_name":"作者回复","comment_id":357930,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663806884,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"61793294313","product_id":100122101,"comment_content":"JS 中的const 是否是可变，要分情况。<br>如果 const 声明的变量赋值给了原始类型，如数字、bool、字符串，此时就是不可变的；<br>如果 const 声明的变量赋值了复合类型，如数组、对象，此时变量指向的地址不可比变，但是复合类型的内容还是可以调整的， 如更改对象的属性值","like_count":14,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588497,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663806884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357738,"user_name":"万千观众之一","can_delete":false,"product_type":"c1","uid":1707648,"ip_address":"北京","ucode":"349D599741AB88","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/80/45343e59.jpg","comment_is_top":false,"comment_ctime":1663588235,"is_pvip":false,"replies":[{"id":"130219","content":"很高兴你这么说，看来以后每篇都是赚的了😄","user_name":"作者回复","comment_id":357738,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663597712,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"23138424715","product_id":100122101,"comment_content":"单独这一篇就值回票价了，学到了很多东西😁","like_count":5,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588222,"discussion_content":"很高兴你这么说，看来以后每篇都是赚的了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663597712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357790,"user_name":"I keep my ideals💤","can_delete":false,"product_type":"c1","uid":1483413,"ip_address":"北京","ucode":"38E68A0BCABA01","user_header":"https://static001.geekbang.org/account/avatar/00/16/a2/95/8f34237c.jpg","comment_is_top":false,"comment_ctime":1663641716,"is_pvip":true,"replies":[{"id":"130243","content":"差不多是这个意思，或者也可以说对于“原始类型值”，如数字、字符串是不可变的。对于像数组这样的“对象类型值”，仍然是可变的。所以常量只是做到“赋值动作”的不可变，而不是做到“值”本身的不可变","user_name":"作者回复","comment_id":357790,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663678766,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14548543604","product_id":100122101,"comment_content":"我认为const对于值类型来说是不可变的，但是对应引用类型来说就不一定了(可以保证引用类型的存储地址不变，但是不能保证里面存储的内容不变)","like_count":3,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588343,"discussion_content":"差不多是这个意思，或者也可以说对于“原始类型值”，如数字、字符串是不可变的。对于像数组这样的“对象类型值”，仍然是可变的。所以常量只是做到“赋值动作”的不可变，而不是做到“值”本身的不可变","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663678766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357827,"user_name":"Geek_dc85eb","can_delete":false,"product_type":"c1","uid":2859009,"ip_address":"北京","ucode":"4D0F7E7C006F8E","user_header":"","comment_is_top":false,"comment_ctime":1663666977,"is_pvip":true,"replies":[{"id":"130271","content":"这里的不可变我们要搞清楚是值不可变，还是变量的不可变。<br><br>比如我们给num赋值数组，值还是可变。 <br>const num = [3]; <br>num[0] = 5; &#47;&#47; 返回：5<br><br>反之，我们没法拷贝原数组，slice后再赋值给原来的变量<br>const sliceNums = [1,2,3,4,5];<br>sliceNums = sliceNums.slice(0,2); &#47;&#47; 返回错误<br><br>所以const还是蛮多坑的，在Java中用的就是final，而不是const。<br><br>也是因为这些坑，在JS中，通常const更多用于原始类型的值，比如数理常量、字节顺序或版本号：<br>const H0 = 74;               &#47;&#47; 哈勃常数 (km&#47;s&#47;Mpc)<br>const PI = 3.141592;       &#47;&#47; 圆周率<br>const C = 299792.458;   &#47;&#47; 光速 (km&#47;s)","user_name":"作者回复","comment_id":357827,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663806855,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10253601569","product_id":100122101,"comment_content":"开发中const一般是不变的","like_count":2,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588496,"discussion_content":"这里的不可变我们要搞清楚是值不可变，还是变量的不可变。\n\n比如我们给num赋值数组，值还是可变。 \nconst num = [3]; \nnum[0] = 5; // 返回：5\n\n反之，我们没法拷贝原数组，slice后再赋值给原来的变量\nconst sliceNums = [1,2,3,4,5];\nsliceNums = sliceNums.slice(0,2); // 返回错误\n\n所以const还是蛮多坑的，在Java中用的就是final，而不是const。\n\n也是因为这些坑，在JS中，通常const更多用于原始类型的值，比如数理常量、字节顺序或版本号：\nconst H0 = 74;               // 哈勃常数 (km/s/Mpc)\nconst PI = 3.141592;       // 圆周率\nconst C = 299792.458;   // 光速 (km/s)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663806855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359205,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"北京","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1665323759,"is_pvip":true,"replies":[{"id":"130867","content":"函数会对外部环境产生影响，比如改变全局变量的值也是副作用。<br>如果函数只改变了全局变量的值，这里主要造成的问题是不可变。<br>关于一个函数是不是纯函数主要是看同样的输入，输出是否相同。","user_name":"作者回复","comment_id":359205,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1665841898,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":1,"score":"5960291055","product_id":100122101,"comment_content":"副作用的概念有点刷新认知。<br>老师说的副作用，指函数不可控的外部环境。<br>我之前认为的副作用，是函数会对外部环境产生影响，比如改变全局变量的值。<br><br>还有一个疑问，如果函数只改变了全局变量的值，并没有使用它进行计算(相同的输入，会有相同的输出)，这个函数还是纯函数吗？<br><br>按我之前的对副作用的理解，就会认为不是纯函数了。","like_count":1,"discussions":[{"author":{"id":1288733,"avatar":"https://static001.geekbang.org/account/avatar/00/13/aa/1d/b8fdd622.jpg","nickname":"laoergege","note":"","ucode":"559CCF36805A04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590939,"discussion_content":"维基百科：在程序设计中，若一个函数符合以下要求，则它可能被认为是纯函数：\n\n此函数在相同的输入值时，需产生相同的输出。函数的输出和输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。\n该函数不能有语义上可观察的函数副作用，诸如“触发事件”，使输出设备输出，或更改输出值以外物件的内容等。\n\n\n我还是得觉除了同样的输入相同输出，还要没有副作用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1666177086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590536,"discussion_content":"函数会对外部环境产生影响，比如改变全局变量的值也是副作用。\n如果函数只改变了全局变量的值，这里主要造成的问题是不可变。\n关于一个函数是不是纯函数主要是看同样的输入，输出是否相同。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1665841898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153762,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/e2/271e0caf.jpg","nickname":"依韵","note":"","ucode":"02F5BED8BE0F6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590302,"discussion_content":"这是一个好问题，开始我也是这么认为的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665648129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358003,"user_name":"Kobe的篮球","can_delete":false,"product_type":"c1","uid":1876238,"ip_address":"北京","ucode":"9A4943FDB3819E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a1/0e/108d6fb7.jpg","comment_is_top":false,"comment_ctime":1663828176,"is_pvip":false,"replies":[{"id":"130302","content":"是的，有些地方叫编程范式，都是programming paradigm。基于原型的继承，delegation，组合后面都会深入讲","user_name":"作者回复","comment_id":358003,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663848798,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5958795472","product_id":100122101,"comment_content":"编程模式很多地方也叫编程范式吧，JS是基于原型的，原型编程这种编程范式能讲下吗","like_count":1,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588559,"discussion_content":"是的，有些地方叫编程范式，都是programming paradigm。基于原型的继承，delegation，组合后面都会深入讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663848798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361338,"user_name":"雨中送陈萍萍","can_delete":false,"product_type":"c1","uid":1457879,"ip_address":"上海","ucode":"409FA76EEED669","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/d7/399d2ba5.jpg","comment_is_top":false,"comment_ctime":1667440552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667440552","product_id":100122101,"comment_content":"老师讲的确实不错！！<br>先回答问题，  对于const来说，我认为只在某种意义上说是不可变的，const创建一个值的引用（指向的内存地址），后续无法通过赋值的方式改变这个引用。如果const声明初始赋值是原始类型，后续无法改变初始值，但是如果初始赋值类型是引用类型（对象类型），后续可以改变初始对象，也就不符合不可变的原则。<br>其次，老师把FP比作工具，把OOP比作对象，然后工具是服务于对象，一下子就把两者链接上，两者从我脑海中孤立存在变成了统一有机的整体，加深了对两者的理解。另外，原型链的讲解和传统继承，基于原型链的继承的区别的讲解，都简单易懂，真真不错！","like_count":0},{"had_liked":false,"id":360173,"user_name":"joel","can_delete":false,"product_type":"c1","uid":1550366,"ip_address":"广东","ucode":"46E91C3F3F1414","user_header":"https://static001.geekbang.org/account/avatar/00/17/a8/1e/4ec85e24.jpg","comment_is_top":false,"comment_ctime":1666254014,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666254014","product_id":100122101,"comment_content":"1、副作用：不可控的外部环境<br>","like_count":0},{"had_liked":false,"id":359572,"user_name":"依韵","can_delete":false,"product_type":"c1","uid":1153762,"ip_address":"北京","ucode":"02F5BED8BE0F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/e2/271e0caf.jpg","comment_is_top":false,"comment_ctime":1665649433,"is_pvip":false,"replies":[{"id":"130891","content":"我们还是可以用slice和splice来举例子<br><br>这里每次输入0，3，slice只影响结果一次。而splice每次都影响。<br>var arr = [1, 2, 3, 4, 5];<br>&#47;***纯函数***&#47;<br>arr.slice(0, 3); &#47;&#47; 返回 [1, 2, 3]<br>arr.slice(0, 3); &#47;&#47; 返回 [1, 2, 3]<br>arr.slice(0, 3); &#47;&#47; 返回 [1, 2, 3]<br>&#47;***非纯函数***&#47;<br>arr.splice(0, 3); &#47;&#47; 返回 [1, 2, 3]<br>arr.splice(0, 3); &#47;&#47; 返回 [4, 5]<br>arr.splice(0, 3); &#47;&#47; 返回 []<br><br>slice不可变是说它对原数组没影响，而splice会影响，所以是可变。<br>var arrA = [1, 2, 3, 4, 5];<br>&#47;***不可变***&#47;<br>var arrB = arrA.slice(0, 3); <br>console.log(arrA); &#47;&#47; 返回 [1, 2, 3, 4, 5]<br>&#47;***可变***&#47;<br>var arrC = arrA.splice(0, 3); <br>console.log(arrA); &#47;&#47; 返回 [1, 2, 3]","user_name":"作者回复","comment_id":359572,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1665929515,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1665649433","product_id":100122101,"comment_content":"&gt; “纯函数”对值只影响一次，而“不可变”完全不影响。<br><br>针对这个还是有点疑问。 即然是从返回值的角度来看，那么能保持幂等的纯函数，返回一个新值，这个新值是基于输入创造的，可以当成是影响，就当是影响了一次。<br>那对不可变来说，如 `slice` 也返回了一个新值，这个新值是基于输入（原始数组）创造的，为什么要当成是完全不影响呢。<br><br>这点如何理解，还希望得到解答。<br><br>写完这个问题， 我意识到是不是说纯函数和不可变描述的是不同的角度，纯函数是从返回值的角度来看，不可变是从输入的角度来看，这样理解是否正确？<br><br>如果获取数组中某个子数组的函数，如果使用 `Array.prototype.slice` 来实现，那么是纯函数，也是不可变。换成 `Array.prototype.splice` 来实现就仅仅是纯函数，而不是不可变。<br>如 `conat add = (a,b) =&gt; a + b;` add 是纯函数，也是不可变。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590622,"discussion_content":"我们还是可以用slice和splice来举例子\n\n这里每次输入0，3，slice只影响结果一次。而splice每次都影响。\nvar arr = [1, 2, 3, 4, 5];\n/***纯函数***/\narr.slice(0, 3); // 返回 [1, 2, 3]\narr.slice(0, 3); // 返回 [1, 2, 3]\narr.slice(0, 3); // 返回 [1, 2, 3]\n/***非纯函数***/\narr.splice(0, 3); // 返回 [1, 2, 3]\narr.splice(0, 3); // 返回 [4, 5]\narr.splice(0, 3); // 返回 []\n\nslice不可变是说它对原数组没影响，而splice会影响，所以是可变。\nvar arrA = [1, 2, 3, 4, 5];\n/***不可变***/\nvar arrB = arrA.slice(0, 3); \nconsole.log(arrA); // 返回 [1, 2, 3, 4, 5]\n/***可变***/\nvar arrC = arrA.splice(0, 3); \nconsole.log(arrA); // 返回 [1, 2, 3]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665929515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359566,"user_name":"朱基","can_delete":false,"product_type":"c1","uid":3198418,"ip_address":"北京","ucode":"E4BDC177B6FCC8","user_header":"https://static001.geekbang.org/account/avatar/00/30/cd/d2/f9528a87.jpg","comment_is_top":false,"comment_ctime":1665647778,"is_pvip":false,"replies":[{"id":"130871","content":"幸会，也感谢一路有你。","user_name":"作者回复","comment_id":359566,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1665844818,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1665647778","product_id":100122101,"comment_content":"本讲属于Javascript编程语言的内功与心法，感谢石川老师以个人的修悟为我们道来，有幸。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590541,"discussion_content":"幸会，也感谢一路有你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665844818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359132,"user_name":"Mick","can_delete":false,"product_type":"c1","uid":2004861,"ip_address":"上海","ucode":"84AA50028FF3F8","user_header":"https://static001.geekbang.org/account/avatar/00/1e/97/7d/803956d5.jpg","comment_is_top":false,"comment_ctime":1665284700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665284700","product_id":100122101,"comment_content":"不止课程能学到很多东西，留言区也有很多干货啊","like_count":0},{"had_liked":false,"id":358301,"user_name":"ll","can_delete":false,"product_type":"c1","uid":1296458,"ip_address":"北京","ucode":"57C5DAC5B51036","user_header":"https://static001.geekbang.org/account/avatar/00/13/c8/4a/3a322856.jpg","comment_is_top":false,"comment_ctime":1664181429,"is_pvip":true,"replies":[{"id":"130433","content":"这里有3个不同的概念：<br><br>1. 对象的引用，这里a,b两个不同的变量，引用的对象值地址是相同的<br>var a = { name : &quot;a&quot; };<br>var b = a;<br>console.log(b.name); &#47;&#47; 返回&quot;a&quot;<br>a.name = &quot;b&quot;;<br>console.log(b.name); &#47;&#47; 返回&quot;b&quot;<br><br>2. 对象的拷贝，浅拷贝只拷贝第一层的内容，深拷贝会拷贝嵌套的对象内容<br><br>3. 对象的创建，这里用Notice.prototype = Object.create(Widget.prototype)这样的方式，对应的是class中extend的功能，所以基于Notice创建的对象notice1会既继承Widget的原型，也继承Notice的原型","user_name":"作者回复","comment_id":358301,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1664352328,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1664181429","product_id":100122101,"comment_content":"之前好像在哪里看到过，函数式编程两个核心，1.值不可变，2.函数可以作为值。然后才有后来的高阶函数之类的应用等等；java 这种oop在继承，和创建对象时是“硬”拷贝的，先找到，在复制，可能会比较占内存；而js是“软”拷贝， 复制的是函数方法的“地址”或者地址变量？， 地址变量储存地址，其中储存的地址值是不可变的，但变量储存的地址可变。感觉Object.create()像是创建个地址变量，初始存Widget.prototype 这个地址，不知道这样理解对不对","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589028,"discussion_content":"这里有3个不同的概念：\n\n1. 对象的引用，这里a,b两个不同的变量，引用的对象值地址是相同的\nvar a = { name : &#34;a&#34; };\nvar b = a;\nconsole.log(b.name); // 返回&#34;a&#34;\na.name = &#34;b&#34;;\nconsole.log(b.name); // 返回&#34;b&#34;\n\n2. 对象的拷贝，浅拷贝只拷贝第一层的内容，深拷贝会拷贝嵌套的对象内容\n\n3. 对象的创建，这里用Notice.prototype = Object.create(Widget.prototype)这样的方式，对应的是class中extend的功能，所以基于Notice创建的对象notice1会既继承Widget的原型，也继承Notice的原型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664352328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358099,"user_name":"Charlescliff","can_delete":false,"product_type":"c1","uid":1007612,"ip_address":"北京","ucode":"C5743F21C7C499","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/fc/840a833b.jpg","comment_is_top":false,"comment_ctime":1663909147,"is_pvip":false,"replies":[{"id":"130327","content":"是很不错的，除了OLOO vs OOP 可以辩证的看外，不过即使是这一点，也体现了Kyle鲜明的个性","user_name":"作者回复","comment_id":358099,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663941752,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1663909147","product_id":100122101,"comment_content":"强烈推荐You don&#39;t know JS系列","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588664,"discussion_content":"是很不错的，除了OLOO vs OOP 可以辩证的看外，不过即使是这一点，也体现了Kyle鲜明的个性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663941752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357989,"user_name":"奕晨","can_delete":false,"product_type":"c1","uid":3000956,"ip_address":"北京","ucode":"59E240369BC1DC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/ca/7c/98193e9e.jpg","comment_is_top":false,"comment_ctime":1663816703,"is_pvip":true,"replies":[{"id":"130308","content":"正解","user_name":"作者回复","comment_id":357989,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663854729,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1663816703","product_id":100122101,"comment_content":"JavaScript 中的常量（const，constant）算不算不可变，需要根据值的类型判断，<br>对于原始类型的话，那就是不可变的；<br>对于对象类型，变量的指向（地址）是不可变的，具体是值，是可以变的。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588569,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663854729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357851,"user_name":"樱花葬","can_delete":false,"product_type":"c1","uid":2829167,"ip_address":"北京","ucode":"1548EAB62F43FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4dMswweC4QCpNqOpJMMtp6icUSxeOrXOe7zEeJALECqOkEoHHJnPKEzr70dxOpUh5Nh7fvahdDIljonzqvIvLjg/132","comment_is_top":false,"comment_ctime":1663682006,"is_pvip":false,"replies":[{"id":"130257","content":"如果一个函数只要输入值一样，返回的结果就一样，那这个函数就是纯函数。同理，如果React组件通过相同的state和props得出相同的输出，则称它是纯组件。所以我认为基本原则是一致的。正好提到React，下一节，我们也会从不可变的角度来看看React中的state和props。","user_name":"作者回复","comment_id":357851,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663768481,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":3,"score":"1663682006","product_id":100122101,"comment_content":"第一次接触纯函数的概念是在react中接触到的，今天看到这篇文章比较清晰的明白了究竟什么是纯函数，同时引发了一个疑问---react的纯函数与js这里提到的纯函数是同一个概念吗？如果不是的话他们之间有什么区别吗？","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588453,"discussion_content":"如果一个函数只要输入值一样，返回的结果就一样，那这个函数就是纯函数。同理，如果React组件通过相同的state和props得出相同的输出，则称它是纯组件。所以我认为基本原则是一致的。正好提到React，下一节，我们也会从不可变的角度来看看React中的state和props。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663768481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3170712,"avatar":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","nickname":"船长","note":"","ucode":"EBC0CCDB341E35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588437,"discussion_content":"React 核心不是用副作用吗？（狗头），比如useEffect","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663760625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357792,"user_name":"RichardZhang","can_delete":false,"product_type":"c1","uid":2968022,"ip_address":"北京","ucode":"FCA2AE70262123","user_header":"https://static001.geekbang.org/account/avatar/00/2d/49/d6/2027d07a.jpg","comment_is_top":false,"comment_ctime":1663642956,"is_pvip":false,"replies":[{"id":"130240","content":"谢谢你的支持！也谢谢建议，确实它们之间没有父子关系，只是空间紧凑放在了一排","user_name":"作者回复","comment_id":357792,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663662734,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1663642956","product_id":100122101,"comment_content":"很优秀的课程！提出一点建议：“而且在数组中，你还可以看到更多类似 splice 和 slice 这种纯函数、非纯函数，以及可变与不可变的例子。”下面的思维导图的层级结构建议修改为 2 层，slice 和 concat 之间并没有什么父和子之间的关系。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588321,"discussion_content":"谢谢你的支持！也谢谢建议，确实它们之间没有父子关系，只是空间紧凑放在了一排","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663662735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357777,"user_name":"Geek_9e2607","can_delete":false,"product_type":"c1","uid":2703363,"ip_address":"北京","ucode":"03A6CFE0E5BE7F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaM1W5gSczWIiaJGicz7J67Zu1866pBgLKwRq827W70UiaYiaS1fIkwM01P7fJW3MP4H3K75eN8VgcHTIhHd3FGpUGg/132","comment_is_top":false,"comment_ctime":1663637092,"is_pvip":false,"replies":[{"id":"130239","content":"咱们目前的计划是音频和文字为主的，你会有什么感兴趣的话题认为更适合录做视频吗？","user_name":"作者回复","comment_id":357777,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663662096,"user_name_real":"作者"}],"discussion_count":1,"race_medal":0,"score":"1663637092","product_id":100122101,"comment_content":"后期有视频教程吗","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588318,"discussion_content":"咱们目前的计划是音频和文字为主的，你会有什么感兴趣的话题认为更适合录做视频吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663662096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357764,"user_name":"南城","can_delete":false,"product_type":"c1","uid":1377308,"ip_address":"北京","ucode":"EB6029016A46FE","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/1c/7899bab4.jpg","comment_is_top":false,"comment_ctime":1663629165,"is_pvip":false,"replies":[{"id":"130224","content":"对，先看看再说，觉得好再买","user_name":"作者回复","comment_id":357764,"uid":"2785919","ip_address":"北京","utype":1,"ctime":1663634905,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1663629165","product_id":100122101,"comment_content":"试读白嫖！能免费看四章（催更帖）","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588253,"discussion_content":"对，先看看再说，觉得好再买","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663634905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}