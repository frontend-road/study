{"id":7514,"title":"第7讲 | int和Integer有什么区别？","content":"<p>Java虽然号称是面向对象的语言，但是原始数据类型仍然是重要的组成元素，所以在面试中，经常考察原始数据类型和包装类等Java语言特性。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">int和Integer有什么区别？谈谈Integer的值缓存范围。</span></p>\n<h2>典型回答</h2>\n<p>int是我们常说的整形数字，是Java的8个原始数据类型（Primitive Types，boolean、byte 、short、char、int、float、double、long）之一。<strong>Java语言虽然号称一切都是对象，但原始数据类型是例外。</strong></p>\n<p>Integer是int对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在Java 5中，引入了自动装箱和自动拆箱功能（boxing/unboxing），Java可以根据上下文，自动进行转换，极大地简化了相关编程。</p>\n<p>关于Integer的值缓存，这涉及Java 5中另一个改进。构建Integer对象的传统方式是直接调用构造器，直接new一个对象。但是根据实践，我们发现大部分数据操作都是集中在有限的、较小的数值范围，因而，在Java 5中新增了静态工厂方法valueOf，在调用它的时候会利用一个缓存机制，带来了明显的性能改进。按照Javadoc，<strong>这个值默认缓存是-128到127之间。</strong></p>\n<h2>考点分析</h2>\n<p>今天这个问题涵盖了Java里的两个基础要素：原始数据类型、包装类。谈到这里，就可以非常自然地扩展到自动装箱、自动拆箱机制，进而考察封装类的一些设计和实践。坦白说，理解基本原理和用法已经足够日常工作需求了，但是要落实到具体场景，还是有很多问题需要仔细思考才能确定。</p>\n<p>面试官可以结合其他方面，来考察面试者的掌握程度和思考逻辑，比如：</p>\n<ul>\n<li>\n<p>我在专栏第1讲中介绍的Java使用的不同阶段：编译阶段、运行时，自动装箱/自动拆箱是发生在什么阶段？</p>\n</li>\n<li>\n<p>我在前面提到使用静态工厂方法valueOf会使用到缓存机制，那么自动装箱的时候，缓存机制起作用吗？</p>\n</li>\n<li>\n<p>为什么我们需要原始数据类型，Java的对象似乎也很高效，应用中具体会产生哪些差异？</p>\n</li>\n<li>\n<p>阅读过Integer源码吗？分析下类或某些方法的设计要点。</p>\n</li>\n</ul>\n<p>似乎有太多内容可以探讨，我们一起来分析一下。</p>\n<!-- [[[read_end]]] -->\n<h2>知识扩展</h2>\n<p>1.理解自动装箱、拆箱</p>\n<p>自动装箱实际上算是一种<strong>语法糖</strong>。什么是语法糖？可以简单理解为Java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，它们发生在编译阶段，也就是生成的字节码是一致的。</p>\n<p>像前面提到的整数，javac替我们自动把装箱转换为Integer.valueOf()，把拆箱替换为Integer.intValue()，这似乎这也顺道回答了另一个问题，既然调用的是Integer.valueOf，自然能够得到缓存的好处啊。</p>\n<p>如何程序化的验证上面的结论呢？</p>\n<p>你可以写一段简单的程序包含下面两句代码，然后反编译一下。当然，这是一种从表现倒推的方法，大多数情况下，我们还是直接参考规范文档会更加可靠，毕竟软件承诺的是遵循规范，而不是保持当前行为。</p>\n<pre><code>Integer integer = 1;\nint unboxing = integer ++;\n</code></pre>\n<p>反编译输出：</p>\n<pre><code>1: invokestatic  #2                  // Method\njava/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n8: invokevirtual #3                  // Method\njava/lang/Integer.intValue:()I\n</code></pre>\n<p>这种缓存机制并不是只有Integer才有，同样存在于其他的一些包装类，比如：</p>\n<ul>\n<li>\n<p>Boolean，缓存了true/false对应实例，确切说，只会返回两个常量实例Boolean.TRUE/FALSE。</p>\n</li>\n<li>\n<p>Short，同样是缓存了-128到127之间的数值。</p>\n</li>\n<li>\n<p>Byte，数值有限，所以全部都被缓存。</p>\n</li>\n<li>\n<p>Character，缓存范围’\\u0000’ 到 ‘\\u007F’。</p>\n</li>\n</ul>\n<p>自动装箱/自动拆箱似乎很酷，在编程实践中，有什么需要注意的吗？</p>\n<p>原则上，<strong>建议避免无意中的装箱、拆箱行为</strong>，尤其是在性能敏感的场合，创建10万个Java对象和10万个整数的开销可不是一个数量级的，不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距了。</p>\n<p>我们其实可以把这个观点扩展开，使用原始数据类型、数组甚至本地代码实现等，在性能极度敏感的场景往往具有比较大的优势，用其替换掉包装类、动态数组（如ArrayList）等可以作为性能优化的备选项。一些追求极致性能的产品或者类库，会极力避免创建过多对象。当然，在大多数产品代码里，并没有必要这么做，还是以开发效率优先。以我们经常会使用到的计数器实现为例，下面是一个常见的线程安全计数器实现。</p>\n<pre><code>class Counter {\n    private final AtomicLong counter = new AtomicLong();  \n    public void increase() {\n        counter.incrementAndGet();\n    }\n}\n\n</code></pre>\n<p>如果利用原始数据类型，可以将其修改为</p>\n<pre><code> class CompactCounter {\n    private volatile long counter;\n    private static final AtomicLongFieldUpdater&lt;CompactCounter&gt; updater = AtomicLongFieldUpdater.newUpdater(CompactCounter.class, &quot;counter&quot;);\n    public void increase() {\n        updater.incrementAndGet(this);\n    }\n}\n\n</code></pre>\n<p>2.源码分析</p>\n<p>考察是否阅读过、是否理解JDK源代码可能是部分面试官的关注点，这并不完全是一种苛刻要求，阅读并实践高质量代码也是程序员成长的必经之路，下面我来分析下Integer的源码。</p>\n<p>整体看一下Integer的职责，它主要包括各种基础的常量，比如最大值、最小值、位数等；前面提到的各种静态工厂方法valueOf()；获取环境变量数值的方法；各种转换方法，比如转换为不同进制的字符串，如8进制，或者反过来的解析方法等。我们进一步来看一些有意思的地方。</p>\n<p>首先，继续深挖缓存，Integer的缓存范围虽然默认是-128到127，但是在特别的应用场景，比如我们明确知道应用会频繁使用更大的数值，这时候应该怎么办呢？</p>\n<p>缓存上限值实际是可以根据需要调整的，JVM提供了参数设置：</p>\n<pre><code>-XX:AutoBoxCacheMax=N\n</code></pre>\n<p>这些实现，都体现在<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/26ac622a4cab/src/java.base/share/classes/java/lang/Integer.java\">java.lang.Integer</a>源码之中，并实现在IntegerCache的静态初始化块里。</p>\n<pre><code>private static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =                VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);\n            ...\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high &gt;= 127;\n        }\n        ...\n  }\n</code></pre>\n<p>第二，我们在分析字符串的设计实现时，提到过字符串是不可变的，保证了基本的信息安全和并发编程中的线程安全。如果你去看包装类里存储数值的成员变量“value”，你会发现，不管是Integer还Boolean等，都被声明为“private final”，所以，它们同样是不可变类型！</p>\n<p>这种设计是可以理解的，或者说是必须的选择。想象一下这个应用场景，比如Integer提供了getInteger()方法，用于方便地读取系统属性，我们可以用属性来设置服务器某个服务的端口，如果我可以轻易地把获取到的Integer对象改变为其他数值，这会带来产品可靠性方面的严重问题。</p>\n<p>第三，Integer等包装类，定义了类似SIZE或者BYTES这样的常量，这反映了什么样的设计考虑呢？如果你使用过其他语言，比如C、C++，类似整数的位数，其实是不确定的，可能在不同的平台，比如32位或者64位平台，存在非常大的不同。那么，在32位JDK或者64位JDK里，数据位数会有不同吗？或者说，这个问题可以扩展为，我使用32位JDK开发编译的程序，运行在64位JDK上，需要做什么特别的移植工作吗？</p>\n<p>其实，这种移植对于Java来说相对要简单些，因为原始数据类型是不存在差异的，这些明确定义在<a href=\"https://docs.oracle.com/javase/specs/jls/se10/html/jls-4.html#jls-4.2\">Java语言规范</a>里面，不管是32位还是64位环境，开发者无需担心数据的位数差异。</p>\n<p>对于应用移植，虽然存在一些底层实现的差异，比如64位HotSpot JVM里的对象要比32位HotSpot JVM大（具体区别取决于不同JVM实现的选择），但是总体来说，并没有行为差异，应用移植还是可以做到宣称的“一次书写，到处执行”，应用开发者更多需要考虑的是容量、能力等方面的差异。</p>\n<p>3.原始类型线程安全</p>\n<p>前面提到了线程安全设计，你有没有想过，原始数据类型操作是不是线程安全的呢？</p>\n<p>这里可能存在着不同层面的问题：</p>\n<ul>\n<li>\n<p>原始数据类型的变量，显然要使用并发相关手段，才能保证线程安全，这些我会在专栏后面的并发主题详细介绍。如果有线程安全的计算需要，建议考虑使用类似AtomicInteger、AtomicLong这样的线程安全类。</p>\n</li>\n<li>\n<p>特别的是，部分比较宽的数据类型，比如float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值！</p>\n</li>\n</ul>\n<p>4.Java原始数据类型和引用类型局限性</p>\n<p>前面我谈了非常多的技术细节，最后再从Java平台发展的角度来看看，原始数据类型、对象的局限性和演进。</p>\n<p>对于Java应用开发者，设计复杂而灵活的类型系统似乎已经习以为常了。但是坦白说，毕竟这种类型系统的设计是源于很多年前的技术决定，现在已经逐渐暴露出了一些副作用，例如：</p>\n<ul>\n<li>原始数据类型和Java泛型并不能配合使用</li>\n</ul>\n<p>这是因为Java的泛型某种程度上可以算作伪泛型，它完全是一种编译期的技巧，Java编译期会自动将类型转换为对应的特定类型，这就决定了使用泛型，必须保证相应类型可以转换为Object。</p>\n<ul>\n<li>无法高效地表达数据，也不便于表达复杂的数据结构，比如vector和tuple</li>\n</ul>\n<p>我们知道Java的对象都是引用类型，如果是一个原始数据类型数组，它在内存里是一段连续的内存，而对象数组则不然，数据存储的是引用，对象往往是分散地存储在堆的不同位置。这种设计虽然带来了极大灵活性，但是也导致了数据操作的低效，尤其是无法充分利用现代CPU缓存机制。</p>\n<p>Java为对象内建了各种多态、线程安全等方面的支持，但这不是所有场合的需求，尤其是数据处理重要性日益提高，更加高密度的值类型是非常现实的需求。</p>\n<p>针对这些方面的增强，目前正在OpenJDK领域紧锣密鼓地进行开发，有兴趣的话你可以关注相关工程：<a href=\"http://openjdk.java.net/projects/valhalla/\">http://openjdk.java.net/projects/valhalla/</a> 。</p>\n<p>今天，我梳理了原始数据类型及其包装类，从源码级别分析了缓存机制等设计和实现细节，并且针对构建极致性能的场景，分析了一些可以借鉴的实践。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？留一道思考题给你，前面提到了从空间角度，Java对象要比原始数据类型开销大的多。你知道对象的内存结构是什么样的吗？比如，对象头的结构。如何计算或者获取某个Java对象的大小?</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习鼓励金，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第6讲 | 动态代理是基于什么原理？","id":7489},"right":{"article_title":"第8讲 | 对比Vector、ArrayList、LinkedList有何区别？","id":7810}},"comments":[{"had_liked":false,"id":9280,"user_name":"cookie。","can_delete":false,"product_type":"c1","uid":1124325,"ip_address":"","ucode":"677D0E77745940","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/e5/2a820ec3.jpg","comment_is_top":true,"comment_ctime":1526727474,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"9.2233728630152008e+18","product_id":100006701,"comment_content":"对象由三部分组成，对象头，对象实例，对齐填充。<br>其中对象头一般是十六个字节，包括两部分，第一部分有哈希码，锁状态标志，线程持有的锁，偏向线程id，gc分代年龄等。第二部分是类型指针，也就是对象指向它的类元数据指针，可以理解，对象指向它的类。<br>对象实例就是对象存储的真正有效信息，也是程序中定义各种类型的字段包括父类继承的和子类定义的，这部分的存储顺序会被虚拟机和代码中定义的顺序影响（这里问一下，这个被虚拟机影响是不是就是重排序？？如果是的话，我知道的volatile定义的变量不会被重排序应该就是这里不会受虚拟机影响吧？？）。<br>第三部分对齐填充只是一个类似占位符的作用，因为内存的使用都会被填充为八字节的倍数。<br><br>还是个初学者。以上是我了解，不知道有没有错，希望老师能告知。","like_count":193,"discussions":[{"author":{"id":1119325,"avatar":"https://static001.geekbang.org/account/avatar/00/11/14/5d/d44e3cff.jpg","nickname":"TLC","note":"","ucode":"59A37945B6CA81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14379,"discussion_content":"不是重排序，是在给对象分配内存块时，如果指定了一个压缩参数为true，那么为了能使用指针碰撞来分配一个规整的内存空间给对象，会将对象中一些较窄的变量插入到父类变量空隙之中。主要是为了方便分配内存。对象的另外一种分配方式是空闲列表，但这是针对不规整的内存空间采用的方法。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1568736382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304316,"discussion_content":"指出两点，1哈希码和偏向线程id 只能二选一，2不算重排序，重排序之和汇编代码有关","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1599545103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107772,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/3c/366c15ca.jpg","nickname":"浪里个狼","note":"","ucode":"2085BB3632DCAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279433,"discussion_content":"当前对象倘若为数组的话，对象头还会存储数组长度","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1591344750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168607,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/df/10e2c4d3.jpg","nickname":"月半纟氏","note":"","ucode":"490F517ECADEDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374047,"discussion_content":"你们是来学习的吗?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620980524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2437971,"avatar":"https://static001.geekbang.org/account/avatar/00/25/33/53/b27347b2.jpg","nickname":"博古拉","note":"","ucode":"9ED1EE3BF31D40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1168607,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/df/10e2c4d3.jpg","nickname":"月半纟氏","note":"","ucode":"490F517ECADEDD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385473,"discussion_content":"这个内容在《深入理解Java虚拟机》里的内容模型那一章，如果有看过就会比较熟悉啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627062354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374047,"ip_address":""},"score":385473,"extra":""}]},{"author":{"id":1621660,"avatar":"https://static001.geekbang.org/account/avatar/00/18/be/9c/d21b7e17.jpg","nickname":"子非鱼","note":"","ucode":"020DA0784E728C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35700,"discussion_content":"对象头不是12Byte么","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571299217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1621660,"avatar":"https://static001.geekbang.org/account/avatar/00/18/be/9c/d21b7e17.jpg","nickname":"子非鱼","note":"","ucode":"020DA0784E728C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215763,"discussion_content":"之前看过这点：\n对象头是由两部分组成，标记信息和类型指针\n\n在64位平台上，两部分 分别占据 64位，即各8个字节，也就是一共 16字节，32位平台上对应减半。\n\n但是对象指针占用64位来寻址一般来说是比较浪费的，所以 64位虚拟机上 可以开启压缩指针，用32位空间来寻址（可以寻址 32G的内存上限）\n对应类型指针的占用就是 4字节了\n\n所以，整个的对象头 就由 16字节 压缩到了 12字节。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1585380340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":35700,"ip_address":""},"score":215763,"extra":""},{"author":{"id":1113780,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/b4/6645a702.jpg","nickname":"qqyycom","note":"","ucode":"1E7391C9C942BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227303,"discussion_content":"请问32位空间如何寻址32g内存呀，不是应该只有4g吗","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586483377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215763,"ip_address":""},"score":227303,"extra":""},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113780,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/b4/6645a702.jpg","nickname":"qqyycom","note":"","ucode":"1E7391C9C942BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227651,"discussion_content":"这个是在郑雨迪的 深入拆解java虚拟机 的 第十节看到的说法，我的理解如下：\n\njava虚拟机内部会有  object alignment bytes 内存中的对象起始位置对齐机制，是8字节，可以理解为一个最小的寻址单位是8字节。\n而32位的指针，可以寻址2的32次方个单位，所以可以寻址的内存大小上限就是 2的35次方个字节，即32G大小的内存\n\n你也可以去看下，看下理解是否一致","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1586510753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":227303,"ip_address":""},"score":227651,"extra":""}]},{"author":{"id":2285209,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKeY4HjTSJWiauBcjpvXhLCNHDeicNfpcjicEoW8gE9gtCWrQ68MRlMcicHYGpP6yl4TX26KZ0aul9w6A/132","nickname":"Geek_16057d","note":"","ucode":"8C49DFFBF452DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392200,"discussion_content":"重排序是针对方法中的代码的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630897783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305613,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ec/0d/596aa2b1.jpg","nickname":"Mr.NoBody","note":"","ucode":"E32A970865CF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358480,"discussion_content":"你们都在说些什么啊…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615988530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9293,"user_name":"Kyle","can_delete":false,"product_type":"c1","uid":1106079,"ip_address":"","ucode":"44198A0BEC5FB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/9f/9259a6b9.jpg","comment_is_top":true,"comment_ctime":1526736483,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"9.2233726053171999e+18","product_id":100006701,"comment_content":"节选自《深入理解JAVA虚拟机》：<br>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。<br><br>HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为&quot;Mark Word&quot;。<br><br>对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。<br><br>接下来的实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。<br><br>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。","like_count":133,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215764,"discussion_content":"对齐填充 是为了 更好的利用 cpu缓存，对象的起始地址和其内部的字段起始地址 都要对齐。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1585380527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117302,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/76/0c07376d.jpg","nickname":"蒙奇君杰","note":"","ucode":"2DBCECD149730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234718,"discussion_content":"有对齐部分……说明虚拟机也是有强迫症的。\n耳濡目染之下，敲代码的大多也“患”上了强迫症。😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586996848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12482,"user_name":"kursk.ye","can_delete":false,"product_type":"c1","uid":1015995,"ip_address":"","ucode":"9D6A3854E408F9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/bb/c0ed9d76.jpg","comment_is_top":false,"comment_ctime":1528856176,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"1814005055088","product_id":100006701,"comment_content":"这篇文章写得比较零散，整体思路没有串起来，其实我觉得可以从这么一条线索理解这个问题。原始数据类型和 Java 泛型并不能配合使用，也就是Primitive Types 和Generic 不能混用，于是JAVA就设计了这个auto-boxing&#47;unboxing机制，实际上就是primitive value 与 object之间的隐式转换机制，否则要是没有这个机制，开发者就必须每次手动显示转换，那多麻烦是不是？但是primitive value 与 object各自有各自的优势，primitive value在内存中存的是值，所以找到primitive value的内存位置，就可以获得值；不像object存的是reference，找到object的内存位置，还要根据reference找下一个内存空间，要产生更多的IO，所以计算性能比primitive value差，但是object具备generic的能力，更抽象，解决业务问题编程效率高。于是JAVA设计者的初衷估计是这样的：如果开发者要做计算，就应该使用primitive value如果开发者要处理业务问题，就应该使用object，采用Generic机制；反正JAVA有auto-boxing&#47;unboxing机制，对开发者来讲也不需要注意什么。然后为了弥补object计算能力的不足，还设计了static valueOf()方法提供缓存机制，算是一个弥补。","like_count":423,"discussions":[{"author":{"id":1070051,"avatar":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","nickname":"来碗绿豆汤","note":"","ucode":"B0AB63B8D9729F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24321,"discussion_content":"感觉每篇都很乱","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1570094583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1795825,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2RTJuIicbjE4fIWiay4jd1zNvBjsgd3QyHo5Od2nQ48LfXcUk1gnVtpvSeG130y3TpjYqZttUduvrRNRY1B47QJw/132","nickname":"Geek_6d5244","note":"","ucode":"BB7F89A7102800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171708,"discussion_content":"这老师讲技术确实不成体系，上面的评论一看就懂，你水平高还来这？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581739026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":36422,"ip_address":""},"score":171708,"extra":""},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795825,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2RTJuIicbjE4fIWiay4jd1zNvBjsgd3QyHo5Od2nQ48LfXcUk1gnVtpvSeG130y3TpjYqZttUduvrRNRY1B47QJw/132","nickname":"Geek_6d5244","note":"","ucode":"BB7F89A7102800","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286191,"discussion_content":"偷换概念嗷，我水平不够才来学习。学习就看到了你们这些胡乱评论，翻翻之前的专栏评论今年我又重新学习了一遍这个36专栏，才明白虽然说老师讲的不够细有些混乱是真的，但评论区到处都是曲解老师意图说错话不看你讲的自己再胡乱总结一套的大有人在。尤其是前14基础篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593082268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":171708,"ip_address":""},"score":286191,"extra":""},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795825,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2RTJuIicbjE4fIWiay4jd1zNvBjsgd3QyHo5Od2nQ48LfXcUk1gnVtpvSeG130y3TpjYqZttUduvrRNRY1B47QJw/132","nickname":"Geek_6d5244","note":"","ucode":"BB7F89A7102800","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286195,"discussion_content":"我说什么你水平层次太低了的确很冒失没有礼貌，这点我像这位当事人道歉，但是你可以翻一番前面几篇专栏热门评论我都有纠错的。老师最难能的就是没讲错，但是他讲的的确不好理解很多讲的太深太新了有炫技嫌疑。你说讲得不好可以但是说不成体系就过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593083888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":171708,"ip_address":""},"score":286195,"extra":""}]},{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284234,"discussion_content":"评论区都是真大神，通俗易懂","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1592480987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2117326,"avatar":"","nickname":"Geek_luc","note":"","ucode":"4EAF648C0458DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298275,"discussion_content":"真的厉害 感觉从需求讲更能让人明白","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597233253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1783932,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/38/7c/67debc58.jpg","nickname":"kerry","note":"","ucode":"E814FF3C16FC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367228,"discussion_content":"评论区里都是大神呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618300902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336467,"discussion_content":"厉害 , 这就是悟道吗?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608604997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168228,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d3/64/2c7324eb.jpg","nickname":"长艺佳人","note":"","ucode":"94981E9FDFFF75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304995,"discussion_content":"把常用的数值缓存起来，下次用到同样数值的时候就不用再根据对象引用去二次IO。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599734896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2981899,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/80/0b/149bf3b0.jpg","nickname":"果味软糖有理言","note":"","ucode":"6F77F7695D057E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569595,"discussion_content":"牛的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651493041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204234,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/0a/f971c088.jpg","nickname":"J","note":"","ucode":"4E568123CF5A3D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554136,"discussion_content":"primitive value在内存中存的是值，这个哪位老师能给解释一下。难道它在栈中没有创建引用吗？int a = 1   是不是也需要通过a找到1  有点乱套了我自己。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646226424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222749,"discussion_content":"然后为了弥补object计算能力的不足，还设计了static valueOf()方法提供缓存机制，算是一个弥补。 \n\n这句话没理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586170932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286297,"discussion_content":"我觉得就是强行解释缓存的作用实际上可以说Object型的数值没有计算能力所以拥有了valueOf()方法，但这跟缓存又没关系。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593109166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222749,"ip_address":""},"score":286297,"extra":""}]},{"author":{"id":1131083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/4b/fa2dc54c.jpg","nickname":"LWP","note":"","ucode":"F3748E9E16CBB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192087,"discussion_content":"大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583062442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206605,"avatar":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","nickname":"拉欧","note":"","ucode":"40996A8093A95F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187797,"discussion_content":"厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582769322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39333,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571913683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583844,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/e4/adac68a0.jpg","nickname":"孟崔广","note":"","ucode":"16ED1AA0C03C0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36479,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571381747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1329884,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4a/dc/535d1c3b.jpg","nickname":"翟玮","note":"","ucode":"639C6F13EBDDA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6264,"discussion_content":"透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566815516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078672,"avatar":"https://static001.geekbang.org/account/avatar/00/10/75/90/ae39bc39.jpg","nickname":"Ccook","note":"","ucode":"0CD06E0FCDF803","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":770,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562050248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1063783,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/67/78e0c4ba.jpg","nickname":"回眸望见三生","note":"","ucode":"C926D5A8754A83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1078672,"avatar":"https://static001.geekbang.org/account/avatar/00/10/75/90/ae39bc39.jpg","nickname":"Ccook","note":"","ucode":"0CD06E0FCDF803","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":782,"discussion_content":"这就是知道和理解的区别了，厉害了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562056287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":770,"ip_address":""},"score":782,"extra":""}]}]},{"had_liked":false,"id":9254,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1526705997,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"680131538765","product_id":100006701,"comment_content":"1 int和Integer<br><br>JDK1.5引入了自动装箱与自动拆箱功能，Java可根据上下文，实现int&#47;Integer,double&#47;Double,boolean&#47;Boolean等基本类型与相应对象之间的自动转换，为开发过程带来极大便利。<br><br>最常用的是通过new方法构建Integer对象。但是，基于大部分数据操作都是集中在有限的、较小的数值范围，在JDK1.5 中新增了静态工厂方法 valueOf，其背后实现是将int值为-128 到 127 之间的Integer对象进行缓存，在调用时候直接从缓存中获取，进而提升构建对象的性能，也就是说使用该方法后，如果两个对象的int值相同且落在缓存值范围内，那么这个两个对象就是同一个对象；当值较小且频繁使用时，推荐优先使用整型池方法（时间与空间性能俱佳）。<br><br>2 注意事项<br><br>[1] 基本类型均具有取值范围，在大数*大数的时候，有可能会出现越界的情况。<br>[2] 基本类型转换时，使用声明的方式。例：long result= 1234567890 * 24 * 365；结果值一定不会是你所期望的那个值，因为1234567890 * 24已经超过了int的范围，如果修改为：long result= 1234567890L * 24 * 365；就正常了。<br>[3] 慎用基本类型处理货币存储。如采用double常会带来差距，常采用BigDecimal、整型（如果要精确表示分，可将值扩大100倍转化为整型）解决该问题。<br>[4] 优先使用基本类型。原则上，建议避免无意中的装箱、拆箱行为，尤其是在性能敏感的场合，<br>[5] \t如果有线程安全的计算需要，建议考虑使用类型AtomicInteger、AtomicLong 这样的线程安全类。部分比较宽的基本数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值。","like_count":159,"discussions":[{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323681,"discussion_content":"说得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604981247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117302,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/76/0c07376d.jpg","nickname":"蒙奇君杰","note":"","ucode":"2DBCECD149730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234742,"discussion_content":"当值较小且频繁使用时，推荐优先使用整型池方法（时间与空间性能俱佳）。\n………………\n整形池方法就是指实用封装类来作处理吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586997637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1033425,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/d1/209abdd6.jpg","nickname":"小狼","note":"","ucode":"FEAC7864FC1D20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1117302,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/76/0c07376d.jpg","nickname":"蒙奇君杰","note":"","ucode":"2DBCECD149730F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342782,"discussion_content":"他这里的整形池应该说得是要用到缓存的方法，也就是静态的 valueOf 一类的方法\n\n不过，他这里的值较小且频繁使用时，仍然存在两种情况：\n- 主要用于计算\n- 作为对象参数，用于处理业务\n\n用于计算时，直接使用基本数据类型更合适，只有当需要用于处理业务，需要用到一个对象时，这里可以推荐使用 valueOf 的静态方法，但也需要注意，业务中是否有要求必须为不同的对象 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610808966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":234742,"ip_address":""},"score":342782,"extra":""}]}]},{"had_liked":false,"id":9356,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1526814254,"is_pvip":false,"replies":[{"id":"2870","content":"不错，如果是64位不用压缩指针，对象头会变大，还可能有对齐开销","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526945296,"ip_address":"","comment_id":9356,"utype":1}],"discussion_count":3,"race_medal":0,"score":"164735571502","product_id":100006701,"comment_content":"1. Mark Word:标记位 4字节，类似轻量级锁标记位，偏向锁标记位等。<br>2. Class对象指针:4字节，指向对象对应class对象的内存地址。<br>3. 对象实际数据:对象所有成员变量。<br>4. 对齐:对齐填充字节，按照8个字节填充。<br><br>Integer占用内存大小，4+4+4+4=16字节。","like_count":39,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418043,"discussion_content":"不错，如果是64位不用压缩指针，对象头会变大，还可能有对齐开销","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526945296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246561,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/61/fc303f93.jpg","nickname":"颜培攀","note":"","ucode":"AC8839AB6C69F8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283282,"discussion_content":"32位：Header(标记头4字节 + 对象指针4字节） + int(4字节）+ 对齐（4) = 16字节\n64位：Header(标记头8字节 + 对象指针8字节） + int(4字节）+ 对齐（4) = 24字节\n64位（启指针压缩）开：Header(标记头8字节 + 对象指针4字节） + int(4字节）+ 对齐（0) = 16字节","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1592227892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215765,"discussion_content":"那64位也是 8+4+4+0 = 16？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585380777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45713,"user_name":"巴西","can_delete":false,"product_type":"c1","uid":1119116,"ip_address":"","ucode":"6E68AA02011541","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/8c/c86340ca.jpg","comment_is_top":false,"comment_ctime":1543756746,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"96033037258","product_id":100006701,"comment_content":"其实除了存储空间的区别外，基本数据类型是有默认值的，而对象数据类型没有默认值。比如从数据库中查询用户年龄，如果用户并没有设置年龄信息，数据库中代表年龄的列age =null ，那么在使用基本数据类型接收年龄值的时候就无法区分用户是年龄为0还是未设置年龄的情况。<br><br>所以决定使用int还是integer的时候除了考虑性能因素，还要考虑业务场景。","like_count":22,"discussions":[{"author":{"id":1296081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c6/d1/58ada163.jpg","nickname":"Chris","note":"","ucode":"EF1829B3C4E6D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46930,"discussion_content":"说的蛮对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573226804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38444,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571790677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10019,"user_name":"George","can_delete":false,"product_type":"c1","uid":1103468,"ip_address":"","ucode":"6BD24945AC8253","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/6c/874ca8ad.jpg","comment_is_top":false,"comment_ctime":1527226474,"is_pvip":false,"replies":[{"id":"3137","content":"嗯，也可以利用：<br>jol，jmap，或者instrument api（Java agent）等等","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527232904,"ip_address":"","comment_id":10019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70246703210","product_id":100006701,"comment_content":"计算对象大小可通过dump内存之后用memory analyze分析","like_count":17,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418313,"discussion_content":"嗯，也可以利用：\njol，jmap，或者instrument api（Java agent）等等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527232904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10491,"user_name":"Gerald","can_delete":false,"product_type":"c1","uid":1115544,"ip_address":"","ucode":"6B44B838D1E483","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/98/d152b8c5.jpg","comment_is_top":false,"comment_ctime":1527562292,"is_pvip":false,"replies":[{"id":"3356","content":"感谢反馈，具体哪个方面，我可以调整一下，尽量照顾不同基础的朋友","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527607693,"ip_address":"","comment_id":10491,"utype":1}],"discussion_count":5,"race_medal":0,"score":"65952071732","product_id":100006701,"comment_content":"为什么我感觉都这么难啊😭","like_count":15,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418499,"discussion_content":"感谢反馈，具体哪个方面，我可以调整一下，尽量照顾不同基础的朋友","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527607693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1881894,"avatar":"","nickname":"Geek_23bafd","note":"","ucode":"F7B38DF2F267A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239940,"discussion_content":"本身不难,就是感觉老师没有总结到位","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1587311070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433660,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e0/3c/940f7d1f.jpg","nickname":"小白","note":"","ucode":"E6FDFAA2D2E04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289253,"discussion_content":"感觉这文章乱糟糟的，没有逻辑，思路不清晰","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594041308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135247,"discussion_content":"感觉讲的面很大，但是好像不够深入","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579079901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391943,"discussion_content":"看到你这种小白多就放心了，不然java不得卷出天际，人人失业","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630725422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10018,"user_name":"George","can_delete":false,"product_type":"c1","uid":1103468,"ip_address":"","ucode":"6BD24945AC8253","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/6c/874ca8ad.jpg","comment_is_top":false,"comment_ctime":1527226433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57361801281","product_id":100006701,"comment_content":"java内存结构<br>对象头：<br>markword：用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁等。这部分数据长度在32位机器和64位机器虚拟机中分别为4字节和8字节；<br>lass指针：即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象属于哪个类的实例；<br>length：如果是java数组，对象头必须有一块用于记录数组长度的数据，用4个字节来int来记录数组长度；<br>实例数据<br>实例数据是对象真正存储的有效信息，也是程序代码中定义的各种类型的字段内容。无论是从父类继承下来还是在子类中定义的数据，都需要记录下来<br>堆积填充<br>对于hotspot迅疾的自动内存管理系统要求对象的起始地址必须为8字节的整数倍，这就要求当部位8字节的整数倍时，就需要填充数据对其填充。原因是访问未对齐的内存，处理器需要做两次内存访问，而对齐的内存访问仅需一次访问","like_count":13},{"had_liked":false,"id":185328,"user_name":"Seven.Lin澤耿","can_delete":false,"product_type":"c1","uid":1181192,"ip_address":"","ucode":"4CAB732CD6F149","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/08/855abb02.jpg","comment_is_top":false,"comment_ctime":1583562344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48828202600","product_id":100006701,"comment_content":"你知道对象的内存结构是什么样的吗？比如，对象头的结构。如何计算或者获取某个 Java 对象的大小?<br>Java对象内存结构：<br>- 基本数据类型<br>- 对象类型<br>    - 对象头（Header）<br>        - MarkWord，4字节<br>        - Class对象指针，4字节<br>    - 实例数据（Instance Data）<br>    - 对齐数据（Padding）, 按8个字节对齐<br>- 数组类型<br>    -对象头（Header）<br>        - MarkWord，4字节<br>        - Class对象指针，4字节<br>    - 数组长度，4字节<br>    - 实例数据（Instance Data）<br>    - 对齐数据（Padding）, 按8个字节对齐<br>如何获取对象大小：<br>- Instrumentation + premain实现工具类：Instrumentation.getObjectSize()来获取<br>- Unsafe，Unsafe.objectFieldOffset()来获取<br>","like_count":12},{"had_liked":false,"id":9485,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1526905629,"is_pvip":false,"replies":[{"id":"2960","content":"不需要，不是对象","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527010183,"ip_address":"","comment_id":9485,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31591676701","product_id":100006701,"comment_content":"杨老师，问个问题，如果使用原始类型int定义一个变量在-128和127之间，如int c = 64;会放入Integer 常量缓存吗(IntegerCache)？编译器是怎么操作的？","like_count":7,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418082,"discussion_content":"不需要，不是对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527010183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63895,"user_name":"云泥","can_delete":false,"product_type":"c1","uid":1323484,"ip_address":"","ucode":"4C56119C9218A2","user_header":"https://static001.geekbang.org/account/avatar/00/14/31/dc/b7dbd926.jpg","comment_is_top":false,"comment_ctime":1548585881,"is_pvip":false,"replies":[{"id":"23359","content":"建议你跟踪下类似Integer.valueOf(xxx)，看看IntegerCache的实现，底层是个常量数组，在静态初始化块中创建并缓存对象","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549820930,"ip_address":"","comment_id":63895,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23023422361","product_id":100006701,"comment_content":"缓存的原理是怎样的？感觉这部分还没理解","like_count":5,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437754,"discussion_content":"建议你跟踪下类似Integer.valueOf(xxx)，看看IntegerCache的实现，底层是个常量数组，在静态初始化块中创建并缓存对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549820930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/68/af1682f1.jpg","nickname":"jackLee","note":"","ucode":"720304AB76D9FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157891,"discussion_content":"    public static Integer valueOf(int i) {\n        if (i >= IntegerCache.low &amp;&amp; i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580529314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14730,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1530622884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23005459364","product_id":100006701,"comment_content":"JAVA的内存结构分为3部分：<br>1，对象头 有两部分,markWord和Class对象指针，<br>markwork包括存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳，<br>2，实例数据 <br>3，对齐填充<br><br>获取一个JAVA对象的大小，可以将一个对象进行序列化为二进制的Byte，便可以查看大小，<br>Integer value = 10;<br><br>ByteArrayOutputStream bos = new ByteArrayOutputStream();<br>ObjectOutputStream oos = new ObjectOutputStream(bos);<br>oos.writeObject(value);<br>&#47;&#47; &#47;&#47; 读出当前对象的二进制流信息<br>System.out.println(bos.size());","like_count":5},{"had_liked":false,"id":9367,"user_name":"jutsu","can_delete":false,"product_type":"c1","uid":1124574,"ip_address":"","ucode":"95CEDEF5D085CF","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/de/54667f13.jpg","comment_is_top":false,"comment_ctime":1526823393,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23001659873","product_id":100006701,"comment_content":"老师的讲解让我想起了科比主导的 细节栏目","like_count":5,"discussions":[{"author":{"id":1321862,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2b/86/a4d3f78a.jpg","nickname":"脚后跟的生活","note":"","ucode":"AB83E3922482E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346272,"discussion_content":"Detail","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611898057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306904,"user_name":"柯伟","can_delete":false,"product_type":"c1","uid":1970536,"ip_address":"","ucode":"92BFAA8B85E5E8","user_header":"https://static001.geekbang.org/account/avatar/00/1e/11/68/ac0d2b05.jpg","comment_is_top":false,"comment_ctime":1628769602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18808638786","product_id":100006701,"comment_content":"int和Integer有什么区别？<br>\t1. int：是Java的8个原始数据类型之一（boolean，byte，char，short，int，long，float，double）<br>\t2. Integer：是int对应的包装类，是引用类型。在Java5中，引入了自动装箱和自动拆箱功能，Java可以根据上下文，自动进行转化，极大的简化了相关编程。自动装箱&#47;自动拆箱发生在编译期，自己调用valueOf和intValue方法来使用缓存机制（默认缓存是-128到127之间）。注意：new 不使用缓存<br>\t3. int访问是直接访问数据内存地址，Integer是通过引用找到数据内存地址<br>\t4. 内存空间占用：Integer大于int<br>\t5. 数据操作效率上：int大于Integer<br>\t6. 线程安全方面：int等原始数据类型需要使用并发相关手段。Integer等包装类可以使用类似AtomicInteger、AtomicLong等这样的线程安全类。<br>\t7. int等原始数据类型和Java泛型不能配合使用<br>\t8. Integer和String一样有final修饰，是不可变类型<br>\t9. Integer中定义了bytes常量，避免了因为环境 64位或32位不同造成的影响<br>\t实践中，建议避免无意中的装箱、拆箱行为<br><br>对象的内存结构是什么样的？<br>在HotSpot虚拟机中，对象在内存中存储的布局都可以分为3块区域。<br>\t1. 对象头（Header）<br>\t\t包含两部分信息：<br>\t\t1. Mark Word：用于存储对象自身的运行时数据，如：哈希码（HashCode），GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等，<br>\t\t2. 类型指针：即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。<br>\t\t另外，如果对象是Java数组，那在对象头中还必须有一块用国语记录数组长度的数据。<br>\t2. 实例数据（Instance Data）：对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。<br>\t3. 对齐填充（Padding）：对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。使对象的大小必须是8字节的整数倍。","like_count":4},{"had_liked":false,"id":127512,"user_name":"文","can_delete":false,"product_type":"c1","uid":1090847,"ip_address":"","ucode":"E2DBA62248052E","user_header":"https://static001.geekbang.org/account/avatar/00/10/a5/1f/d2f6a1f7.jpg","comment_is_top":false,"comment_ctime":1566730862,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18746600046","product_id":100006701,"comment_content":"老师能不能把jvm底层和基本使用拆开，一会儿说基本使用的时候太快东西讲得很少，突然间就转jvm里面，让对于jvm方面比较基础弱的同学看着会很痛苦，拆开便于理解和分情况浏览学习","like_count":4,"discussions":[{"author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391944,"discussion_content":"菜是原罪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630725573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263501,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1606143607,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"14491045495","product_id":100006701,"comment_content":"本来是打算刷完这个专栏去面试拿 Offer 的，看了前七讲之后，我在考虑要不要从头学一遍 Java，也许我需要的是《零基础学 Java》。<br><br>其实也没有太困难的地方，一遍看不懂，多看几次就好了。其中有不少面试题，我估计在日常编码中其实也用不到，当然这些偏底层的知识，知道了总还是有帮助的。<br><br>这一篇应该是把 int&#47;Integer、double&#47;Double、boolean&#47;Boolean ……这些基本类型和相应对象之间的关系都讲到了，其实我以前也困惑来着。<br><br>课后思考问到了 Java 的内存结构（对象头、对象实例和对齐填充），有点好奇，为什么要问这个，是为后续的文章预热么？<br><br>看到现在发现，其实这个专栏的价值不光是作者的输出，也包括精选留言中的内容，甚至是留言中对于专栏的批评。","like_count":3},{"had_liked":false,"id":90147,"user_name":"倚楼听风雨","can_delete":false,"product_type":"c1","uid":1334779,"ip_address":"","ucode":"F11613F3300AE3","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/fb/f6af3252.jpg","comment_is_top":false,"comment_ctime":1556432879,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14441334767","product_id":100006701,"comment_content":"valueOf和parseInt有什么区别？","like_count":3,"discussions":[{"author":{"id":1620186,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/da/1db53e48.jpg","nickname":"cyl","note":"","ucode":"6075FFED2111C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15044,"discussion_content":"valueOf会使用[-127,128]这个缓存，parseInt不使用缓存，可以去看看源码","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1568798903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1620186,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/da/1db53e48.jpg","nickname":"cyl","note":"","ucode":"6075FFED2111C9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38446,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571790751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":15044,"ip_address":""},"score":38446,"extra":""}]},{"author":{"id":2869937,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ca/b1/4f42edff.jpg","nickname":"vectory","note":"","ucode":"C7D636F1C90CBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549125,"discussion_content":"    public static Integer valueOf(String s) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s, 10));\n    }\n可以看到valueof是调用了parserInt的，还有就是valueof返回的对象，而parseInt返回的是基础类型的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643593716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1993703,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/6b/e7/69000f5d.jpg","nickname":"queena","note":"","ucode":"D7184D35C6B70F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264939,"discussion_content":"parseInt返回的是int，而valueOf返回的是Integer对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589360215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9221,"user_name":"麦田","can_delete":false,"product_type":"c1","uid":1117102,"ip_address":"","ucode":"FCAB5EC7A6942C","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/ae/430eb49b.jpg","comment_is_top":false,"comment_ctime":1526695366,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14411597254","product_id":100006701,"comment_content":"周末了是不是没人看文章了","like_count":3,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336469,"discussion_content":"在看啊 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608605248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155716,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574742386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164676978","product_id":100006701,"comment_content":"原来数组中如果保存的是引用地址，并不能发挥“局部性”优势，提升性能","like_count":2},{"had_liked":false,"id":32446,"user_name":"云飞","can_delete":false,"product_type":"c1","uid":1257826,"ip_address":"","ucode":"EDA647669DC9F6","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/62/6f1bb71e.jpg","comment_is_top":false,"comment_ctime":1539575102,"is_pvip":false,"replies":[{"id":"11961","content":"header 补齐，如果仅仅是表示数据，object是个高成本的东西，而且开销不仅是空间，引用结构也会影响内存布局","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1539736923,"ip_address":"","comment_id":32446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129509694","product_id":100006701,"comment_content":"想知道Integer 不就是4字节嘛？为什么要从对象角度考虑就变成了4+4+4+4＝16字节？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426773,"discussion_content":"header 补齐，如果仅仅是表示数据，object是个高成本的东西，而且开销不仅是空间，引用结构也会影响内存布局","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539736923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12924,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1125094,"ip_address":"","ucode":"1469D12EF42AD7","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/e6/a330d8b0.jpg","comment_is_top":false,"comment_ctime":1529139523,"is_pvip":false,"replies":[{"id":"4297","content":"类是类，实例化后才是对象","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1529160213,"ip_address":"","comment_id":12924,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10119074115","product_id":100006701,"comment_content":"老师，原始数据类型的包装类是对象吗？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419460,"discussion_content":"类是类，实例化后才是对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529160213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9261,"user_name":"步＊亮","can_delete":false,"product_type":"c1","uid":1005922,"ip_address":"","ucode":"CC3ACC68959BDF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/62/954065d4.jpg","comment_is_top":false,"comment_ctime":1526710807,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10116645399","product_id":100006701,"comment_content":"缓存用得很巧秒，值得借鉴","like_count":2,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336472,"discussion_content":"的确如此 , 用一个静态内部类来做 , 完美对外屏蔽了复杂性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608605355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9260,"user_name":"Slug","can_delete":false,"product_type":"c1","uid":1074522,"ip_address":"","ucode":"CD16E5B83E8D3A","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/5a/0d55435a.jpg","comment_is_top":false,"comment_ctime":1526710516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10116645108","product_id":100006701,"comment_content":"感谢老师放假还在写文章，学到很多，钱花的很值。","like_count":2},{"had_liked":false,"id":9253,"user_name":"Strom","can_delete":false,"product_type":"c1","uid":1122857,"ip_address":"","ucode":"BBB11E924F157E","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/29/b39e8f01.jpg","comment_is_top":false,"comment_ctime":1526705720,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10116640312","product_id":100006701,"comment_content":"原始数据类型貌似反射也不行。","like_count":2,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336474,"discussion_content":"反射反的是对象 , 基础数据类型连对象都不是怎么反呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608605390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252151,"user_name":"好孩子","can_delete":false,"product_type":"c1","uid":1120022,"ip_address":"","ucode":"B7DBE8820FC6CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/16/afff9a38.jpg","comment_is_top":false,"comment_ctime":1602148293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897115589","product_id":100006701,"comment_content":"之前看一遍，不太理解再说什么。看完源码之后再回过头来看，又觉得讲的太浅显了，不如直接看代码好理解。建议看了不理解的同学，配合源码一起看，效率最高。","like_count":1},{"had_liked":false,"id":246967,"user_name":"NOknow","can_delete":false,"product_type":"c1","uid":1611102,"ip_address":"","ucode":"73407B1BFBFBD5","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/5e/6fd37b8c.jpg","comment_is_top":false,"comment_ctime":1599545103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894512399","product_id":100006701,"comment_content":"看来以前学的深度还远远不够","like_count":1},{"had_liked":false,"id":203316,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1586170522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881137818","product_id":100006701,"comment_content":"第三，Integer 等包装类，定义了类似 SIZE 或者 BYTES 这样的常量，这反映了什么样的设计考虑呢？<br><br>感觉并没有正面回答这个问题，还是没明白为何设计这两个变量。","like_count":1},{"had_liked":false,"id":145484,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1572295278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867262574","product_id":100006701,"comment_content":"装箱和拆箱机制可以在编译阶段解决可以根据上下文确定是原始类型还是堆类型，没有必要等到运行时。<br>每个类型的值域一般很宽，但是常用的值却比较少，可以用缓存来复用，这可以看作是一个用空间换时间的策略。","like_count":1},{"had_liked":false,"id":92674,"user_name":"PoL","can_delete":false,"product_type":"c1","uid":1416147,"ip_address":"","ucode":"72BA3C2D50D463","user_header":"https://static001.geekbang.org/account/avatar/00/15/9b/d3/41d04923.jpg","comment_is_top":false,"comment_ctime":1557311101,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5852278397","product_id":100006701,"comment_content":"java 8中原始数据类型 boolean, int,short,long,float ,double, char, byte<br>对应包装类 Boolean   。。<br>原始数据类型直接存储在内存，编译时会自动装箱，运行时调用会拆箱调用T.valueof（）<br>包装类的缓存机制，提升性能<br>","like_count":1,"discussions":[{"author":{"id":2015175,"avatar":"","nickname":"Geek_a8534b","note":"","ucode":"C384C276A9E9D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375963,"discussion_content":"原始数据类型在编译时期会自动装箱？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621907210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72338,"user_name":"橙子大魔王","can_delete":false,"product_type":"c1","uid":1243637,"ip_address":"","ucode":"F3A7C47E6C2574","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/f5/f76d8249.jpg","comment_is_top":false,"comment_ctime":1551590840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846558136","product_id":100006701,"comment_content":"特别的是，部分比较宽的数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新一半的问题。<br><br>为什么是float。我觉得是long和double= =<br>","like_count":1},{"had_liked":false,"id":65943,"user_name":"小浪","can_delete":false,"product_type":"c1","uid":1077344,"ip_address":"","ucode":"4DECB1C4320C8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/60/309a4a6a.jpg","comment_is_top":false,"comment_ctime":1549789325,"is_pvip":false,"replies":[{"id":"23357","content":"看应用场景的需求吧，在程序可读性、开发效率和性能等方面进行取舍，包装类毕竟创建的是对象，有很多方便的方法，甚至有些场合，例如一些Collection，还只接受对象","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549820530,"ip_address":"","comment_id":65943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5844756621","product_id":100006701,"comment_content":"那么请问杨老师，什么时候用基本类型，什么时候用包装类？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438651,"discussion_content":"看应用场景的需求吧，在程序可读性、开发效率和性能等方面进行取舍，包装类毕竟创建的是对象，有很多方便的方法，甚至有些场合，例如一些Collection，还只接受对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549820530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17310,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1532564762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827532058","product_id":100006701,"comment_content":"自己mark一下<br>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。<br><br>HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为&quot;Mark Word&quot;。<br><br>对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。<br><br>接下来的实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。<br><br>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。","like_count":1},{"had_liked":false,"id":9631,"user_name":"ZC叶😝","can_delete":false,"product_type":"c1","uid":1122141,"ip_address":"","ucode":"ACA008EC45DB89","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/5d/3519ec93.jpg","comment_is_top":false,"comment_ctime":1526994165,"is_pvip":false,"replies":[{"id":"2986","content":"这个...似乎也算，如果你的“转换”是conversion，不是casting","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527050731,"ip_address":"","comment_id":9631,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5821961461","product_id":100006701,"comment_content":"想问下 自动装箱和自动拆箱是指类型转换吗？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418142,"discussion_content":"这个...似乎也算，如果你的“转换”是conversion，不是casting","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527050731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384358,"discussion_content":"装箱就是：自动将基本数据类型转换为包装器类型；拆箱就是：自动将包装器类型转换为基本数据类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626515576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9244,"user_name":"Hua","can_delete":false,"product_type":"c1","uid":1083851,"ip_address":"","ucode":"6076250DDE7E30","user_header":"https://static001.geekbang.org/account/avatar/00/10/89/cb/d7f80b87.jpg","comment_is_top":false,"comment_ctime":1526701347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5821668643","product_id":100006701,"comment_content":"希望老师多写一些文章这样我就不用看源码了。","like_count":1},{"had_liked":false,"id":347818,"user_name":"严丹","can_delete":false,"product_type":"c1","uid":1798204,"ip_address":"","ucode":"96FA634D06C3FD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/3c/a002615b.jpg","comment_is_top":false,"comment_ctime":1654484811,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654484811","product_id":100006701,"comment_content":"连着看了8篇，云里雾里；有些人适合布道，有些适合孤独的做技术大牛，作者可能偏向后一种。","like_count":0},{"had_liked":false,"id":346295,"user_name":"let_me_go","can_delete":false,"product_type":"c1","uid":1510177,"ip_address":"","ucode":"A5936F5C5E3D65","user_header":"https://static001.geekbang.org/account/avatar/00/17/0b/21/f1aea35b.jpg","comment_is_top":false,"comment_ctime":1653008612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653008612","product_id":100006701,"comment_content":"大部分情况下，都不用考虑使用Integer 的开销，毕竟大部分系统都不是要求如此苛刻的高性能。只是需要明白，在Java 中除了原生数据类型以外，一切皆对象。在做业务开发的时候，因为原生数据类型具有默认值，比如boolean 默认为false ，相当于非黑即白，但这可能不是我们想要的，我们可能需要第三种值来表示一种飘忽不定的状态，这个时候就可以用对象了，Boolean类型除了有true 和 false 这两个值以外，还可以为null ，可以用null 表示第三种状态。这就好像别人问你喜不喜欢某个东西一样，可以喜欢，也可以不喜欢，也可以说没感觉，不在乎，谈不上喜欢，也谈不上不喜欢。","like_count":0},{"had_liked":false,"id":332629,"user_name":"LT","can_delete":false,"product_type":"c1","uid":1033435,"ip_address":"","ucode":"A673D8DC820F6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/db/6ba349d6.jpg","comment_is_top":false,"comment_ctime":1643423570,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643423570","product_id":100006701,"comment_content":"“特别的是，部分比较宽的数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值！”，是在 32 位内存总线环境更新 64 位的 long 和 double 类型吧？","like_count":0},{"had_liked":false,"id":312572,"user_name":"不吃辣","can_delete":false,"product_type":"c1","uid":2753914,"ip_address":"","ucode":"1E1B7C86355AF8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/05/7a/29ee6300.jpg","comment_is_top":false,"comment_ctime":1631870277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631870277","product_id":100006701,"comment_content":"两种类型各自都有优势：\r<br>原始数据类型的内存中村的是值，可充分利用现在CPU的缓存机制；\r<br>包装类型存的是地址引用，但是包装类型具备抽象能力，符合业务问题编程高效。\r<br>于是设计者的初衷：\r<br>如果开发者要做计算，应该使用原始数据类型；--解决性能快的问题\r<br>如果开发者要处理业务问题应该使用包装类。--解决项目复杂庞大的问题\r<br>如果什么都不顾及那就由系统在编译期完成自动拆装箱。--解决早期实现的问题\r<br>\r<br>为什么在包装类中使用缓存呢？\r<br>包装类型更消耗内存。\r<br>正是因为创建一个对象比使用一个原始数据类型大多甚至好几倍，所以才引出了缓存。\r<br>节省内存，和处理速度。该缓存大小可以根据业务调整的。\r<br>\r<br>还会排斥让系统自动拆装箱吗？\r<br>自动拆装箱就是解决系统早期快速实现的问题。随着系统的复杂和对性能要求，自动拆装箱的避免才要考虑。","like_count":0},{"had_liked":false,"id":300571,"user_name":"乔宏民","can_delete":false,"product_type":"c1","uid":2181661,"ip_address":"","ucode":"B6A9F971E9CC96","user_header":"https://static001.geekbang.org/account/avatar/00/21/4a/1d/3567f117.jpg","comment_is_top":false,"comment_ctime":1625219472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625219472","product_id":100006701,"comment_content":"看这个感觉好折磨人啊，太底层了，坚持坚持","like_count":0},{"had_liked":false,"id":268821,"user_name":"acqierement","can_delete":false,"product_type":"c1","uid":1234980,"ip_address":"","ucode":"AC8DA74B9CB924","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/24/f48a38f4.jpg","comment_is_top":false,"comment_ctime":1608362681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608362681","product_id":100006701,"comment_content":"总结一些以前没有注意的点：<br>1：自动装箱（拆箱）发生在编译阶段，生成的字节码是一致的。语法糖：java平台为我们自动进行了一些转换，保证不同的写法在运行时等价。<br>2：Integer等包装类，定义了类似SIZE或者BYTES的常量，这样的设计考虑是为了保证32位和64位平台中Integer的数据位数一致，开发者无需担心数据的位数差异。<br>3：避免无意中的装箱（拆箱)，尤其在性能敏感的场合，创建10万个对象和10万个整数的开销不是一个数量级，不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距 了。（jvm对象内存布局）<br>4：java对象都是引用类型，如果是一个基本类型数组，在内存里是一段连续的内存，而对象数组则不然，数据存储的是引用，对象往往分散的存储在堆的不用为止，这样设计带来了极大灵活性，但是也导致了数据操作的低效，无法利用CPU的缓存机制。<br>5：包装类存储的值是 private final, 保证了安全性。","like_count":0},{"had_liked":false,"id":268736,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1608317969,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608317969","product_id":100006701,"comment_content":"INT和INTEGR<br>JAVA原始类型及对象的区别<br>涉及自动装箱，拆箱<br>有缓存，-128，127<br>INTEGER不可变，有并发问题，大量对象有性能问题","like_count":0},{"had_liked":false,"id":261254,"user_name":"Geek_d1fecd","can_delete":false,"product_type":"c1","uid":2279246,"ip_address":"","ucode":"891D0366E58419","user_header":"https://static001.geekbang.org/account/avatar/00/22/c7/4e/dc586309.jpg","comment_is_top":false,"comment_ctime":1605252578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605252578","product_id":100006701,"comment_content":"标题： int和Integer有什么区别？ 到最后结尾来了一句“今天，我梳理了原始数据类型及其包装类，从源码级别分析了缓存机制等设计和实现细节，并且针对构建极致性能的场景，分析了一些可以借鉴的实践。”<br>对于初级或者入门的程序员能听得懂？？？每讲到一个点，然后来了一句 “ 到后面有更加详细的解答 ”。到时候谁还想得起来啥时候的了。能不能先把标题的问题回答了，在进行深入解析。越看越懵逼<br>","like_count":0},{"had_liked":false,"id":244248,"user_name":"呵呵哒","can_delete":false,"product_type":"c1","uid":2124873,"ip_address":"","ucode":"1A9E7389014980","user_header":"https://static001.geekbang.org/account/avatar/00/20/6c/49/85f4d9d2.jpg","comment_is_top":false,"comment_ctime":1598441205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598441205","product_id":100006701,"comment_content":"老师，您好，请问一下实力对象在堆中的存储结构，会不会拷贝一份元数据的方法数据(方法数据会单独自己存一份么），还是仅仅引用class，从而获得元数据中的方法数据？","like_count":0},{"had_liked":false,"id":244246,"user_name":"呵呵哒","can_delete":false,"product_type":"c1","uid":2124873,"ip_address":"","ucode":"1A9E7389014980","user_header":"https://static001.geekbang.org/account/avatar/00/20/6c/49/85f4d9d2.jpg","comment_is_top":false,"comment_ctime":1598441007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598441007","product_id":100006701,"comment_content":"Win","like_count":0},{"had_liked":false,"id":243703,"user_name":"好好学习","can_delete":false,"product_type":"c1","uid":1762191,"ip_address":"","ucode":"9D44D9530D9A1D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e3/8f/77b5a753.jpg","comment_is_top":false,"comment_ctime":1598253073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598253073","product_id":100006701,"comment_content":"自己mark一下<br>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。<br><br>HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为&quot;Mark Word&quot;。<br><br>对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，这点将在2.3.3节讨论。另外，如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。<br><br>接下来的实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。<br><br>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。","like_count":0},{"had_liked":false,"id":234827,"user_name":"looper","can_delete":false,"product_type":"c1","uid":1238396,"ip_address":"","ucode":"DA4BCE83836C04","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/7c/2a5a418b.jpg","comment_is_top":false,"comment_ctime":1594805327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594805327","product_id":100006701,"comment_content":"对象的构成：对象头、实体数据和对齐填充（Java规范要求对象的大小必须是8的倍数）<br>对象头：包括mark word，使用动态定义的数据结构保存类的哈希码、GC年龄分代以及锁相关的等信息，还有一部分是classpoint，类型指针，指向它的类型原数据信息。除此之外，如果对象是数组，还需要一部分额外的空间保存数组的长度<br>对象大小计算：对象的大小和运行环境有关，非数组对象的对象头需要两个机器码来保存，在32位和64位虚拟上的大小分别是8字节和16字节。但是从JDK6 默认开启了指针压缩，所以在64位虚拟机上，一个Object对象内存大小=8字节（mark word）+4字节（classpoint）+4字节（padding）=16字节","like_count":0},{"had_liked":false,"id":234083,"user_name":"asD","can_delete":false,"product_type":"c1","uid":1266063,"ip_address":"","ucode":"10B917B41ABBE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/8f/39e107f3.jpg","comment_is_top":false,"comment_ctime":1594572958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594572958","product_id":100006701,"comment_content":"在实际开发中，什么时候用int基本数据类型，什么时候用包装类型呢？<br><br>","like_count":0},{"had_liked":false,"id":226068,"user_name":"你当像鸟飞向你的山","can_delete":false,"product_type":"c1","uid":1915046,"ip_address":"","ucode":"D20279F2D2867B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a1nDkic8T3LRWe4hAWqCd32C6x3SM7IsmxKticU0icDt0oO95FYlmWhBnWdjiboaRh6c5fxu8t7E6VSElVfUZGe6Ww/132","comment_is_top":false,"comment_ctime":1591944921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591944921","product_id":100006701,"comment_content":"对象头+对象实例+对齐填充=4+4+8=16字节","like_count":0},{"had_liked":false,"id":222952,"user_name":"亚林","can_delete":false,"product_type":"c1","uid":1018972,"ip_address":"","ucode":"4A5A6D24314B79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","comment_is_top":false,"comment_ctime":1590973075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590973075","product_id":100006701,"comment_content":"对象类型就是为了解决大数计算的问题吧","like_count":0},{"had_liked":false,"id":202085,"user_name":"liiiiiii","can_delete":false,"product_type":"c1","uid":1365523,"ip_address":"","ucode":"6D930B6771743C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaZlM5Jfa8nSkAYTXRfib3ytDLFsWNlHndBu9JbDyA8cERkmOFdqia4wfgjPzR5natDCwqicMenYBhQ/132","comment_is_top":false,"comment_ctime":1585900615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585900615","product_id":100006701,"comment_content":"一开是对作者写的Integer 的值缓存，装箱和拆箱子不理解。查阅资料后再回过头看文章，发现作者考虑问题的角度很全面，很赞的一篇文章。特别是后面弊端方面结合了计组，换个角度分析了问题，让人开拓思维！","like_count":0},{"had_liked":false,"id":192979,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1584881248,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584881248","product_id":100006701,"comment_content":"一定要注意自动装箱拆箱对性能的影响","like_count":0},{"had_liked":false,"id":187779,"user_name":"Siven","can_delete":false,"product_type":"c1","uid":1220338,"ip_address":"","ucode":"5FEBAE42470D19","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/f2/7347aac3.jpg","comment_is_top":false,"comment_ctime":1584240332,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584240332","product_id":100006701,"comment_content":"一直有个疑问，Integer按理来说是一个对象，但用integer当成方法参数传递时，在方法中修改了值确不会影响到原值的更改，表现的像形参，这是为何","like_count":0,"discussions":[{"author":{"id":1338436,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6c/44/8fb88de4.jpg","nickname":"Jay  Chou","note":"","ucode":"DDEA12302E118C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388201,"discussion_content":"Integer是final修饰的，也就是说跟String一样，是不可变更的，当修改值的时候，其实就是新建了对象，然后将新对象重新赋给引用，而不是修改Integer对象中的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628650579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174675,"user_name":"逍遥子","can_delete":false,"product_type":"c1","uid":1518695,"ip_address":"","ucode":"CEA25CA20DC99D","user_header":"https://static001.geekbang.org/account/avatar/00/17/2c/67/04888812.jpg","comment_is_top":false,"comment_ctime":1580336290,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580336290","product_id":100006701,"comment_content":"32位jvm和64位jvm对不同长度的基本变量的原子操作结果不一样吧？long，double在64jvm下也是原子操作吧","like_count":0,"discussions":[{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286928,"discussion_content":"记得看《Java并发编程实践》说，64位下不是原子操作，会分开操作高低32位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593326331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164522,"user_name":"小名叫大明","can_delete":false,"product_type":"c1","uid":1129317,"ip_address":"","ucode":"4804D68A396B40","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/65/203298ce.jpg","comment_is_top":false,"comment_ctime":1577020243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577020243","product_id":100006701,"comment_content":"打个标记: Java类组成部分。 <br>1. 对象头 <br>1.1 标记字段 4字节 。锁标记，gc年龄，哈希码。。。如果是数组，又特殊些。<br>1.2 class 对象指针 4字节 。指向对象对应的 类，元数据信息。<br><br>2. 实例数据 <br>3. 对齐填充。Java内存管理的缘故，规定Java对象起始地址必须是8字节的整数倍，也就是说Java对象最小为8的整数倍。","like_count":0},{"had_liked":false,"id":160135,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1575877287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575877287","product_id":100006701,"comment_content":"基本类型不能转换为泛型，包装类能不能转转为泛型。我看源码好像也不继承Object类求解？因为我看到很多框架都接受基本类型的包装类，我在想是不是也有考虑转换泛型的考虑，还是纯粹提高编程效率借用包装类。","like_count":0},{"had_liked":false,"id":153875,"user_name":"Pui","can_delete":false,"product_type":"c1","uid":1341355,"ip_address":"","ucode":"03A055EE5E2D57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yzDN2BI9icM32QVHuTzYibOiblQ4eX4dFgYXkd8pz3Xbxokn1OzZicysnk7zkwf8iams7ugjMK89aSHp8fzEy0JYq1w/132","comment_is_top":false,"comment_ctime":1574323629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574323629","product_id":100006701,"comment_content":"你好，文中提到的“特别的是，部分比较宽的数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值！”有些疑惑，long， double是8字节的类型，在32位机器上分两部分储存，可以理解多线程下程序读取到只更新了一半数据位的数值，float是4字节32位的类型，在32位机器不是就一个整体存储的？不是很懂为啥可能会出现跟double一样的情况？","like_count":0},{"had_liked":false,"id":150706,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1573604035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573604035","product_id":100006701,"comment_content":"7 int和Integer类型区别 1 int类型是基本数据类型，Integer是包装数据类型，是引用类型。Integer是int的包装类，有一个int类型的字段存储数据，并且提供了基本运算，java5引入了自动装箱和拆箱，int转成Integer是装箱，Integer转int是拆箱2 Integer有值缓存，利用valueOf方法，缓存-128到127之间的数据，提升了并发 3 自动装箱和自动拆箱 是一种语法糖，语法糖是java编译器帮我们做了一些转换，在编译阶段，能编译成等价的字节码，Integer.valueOf()是装箱，Integer.intValue()是拆箱，valueOf能得到缓存的好处，除了Integer有缓存，Byte缓存全部，Short缓存-128到127，Boolean缓存True和False，避免无意的拆箱和装箱。4 源码分析 Integer提供了一些转换方法，获取最大值，最小值，valueOf等方法，Integer的缓存值范围可以追改，Integer的value值，private final修饰，是不可变的，<br>Integer这种类型定义了SIZE，是为了兼容32和64位平台。","like_count":0},{"had_liked":false,"id":127756,"user_name":"禤qy","can_delete":false,"product_type":"c1","uid":1500473,"ip_address":"","ucode":"D71C00347173FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icniaGmw8xiboyC25ic8l7Vf6ib8IyJ60GuniaufeqRv6P9qzsRpJBo7XPTMXXE6TDqHI4ibOcia7dSv2mSTptQ2evicUkA/132","comment_is_top":false,"comment_ctime":1566788547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566788547","product_id":100006701,"comment_content":"最重点的两个初始化不一样没讲出来…","like_count":0},{"had_liked":false,"id":90451,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1516198,"ip_address":"","ucode":"50C8B56E8A798F","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/a6/fe17743b.jpg","comment_is_top":false,"comment_ctime":1556522423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556522423","product_id":100006701,"comment_content":"int是Java 8种基本数据类型中的一种;<br>Integer是int的包装类,Integer具有很多方法,例如转二进制,包装类是final修饰的","like_count":0},{"had_liked":false,"id":86771,"user_name":"请叫我华仔","can_delete":false,"product_type":"c1","uid":1465300,"ip_address":"","ucode":"307D39B12CEF61","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/d4/f4a2888a.jpg","comment_is_top":false,"comment_ctime":1555459779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555459779","product_id":100006701,"comment_content":"# int和Integer<br>自动装箱拆箱是在编译期实现的<br>AtomicLongFieldUpdater <br>AutoBoxCacheMax <br>原始数据类型不是线程安全的，甚至float的更新操作都是非原子的。<br>原始数据类型无法和泛型配合，引用类型无法高效得表达数据。<br><br>对象的内存结构，对象头的结构，怎样获取对象的大小？<br>1. 用jol可以获取对象的大小。<br>2. jdk8在64位开启指针压缩的情况下，对象头是12字节，前8字节跟对象的锁有关系，后4个字节是类的指针。<br>3. 对象的内存，对象头加实例字段，整个对象的内存块按8字节对齐，不足8字节会填充。为减少填充，对象字段会以非常紧凑的方式排列，字段排列顺序跟字段在代码中声明的顺序不一样。","like_count":0},{"had_liked":false,"id":86676,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1555423891,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1555423891","product_id":100006701,"comment_content":"的确，Java这种基于类型擦除的泛型实现方式，其实用起来还是有很多不方便的地方。<br>其中我最想吐槽的地方是，int[]采用Arrays.asList()后，有几个能告诉我，里面对象的类型是啥？同样是List，又有一些方法不能用，真心不方便。","like_count":0,"discussions":[{"author":{"id":2011492,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b1/64/5570b054.jpg","nickname":"逍遥","note":"","ucode":"EDC322BAB83D67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274681,"discussion_content":"这个我刚查过，是list，但不支持add和remove方法。具体为什么没了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590597898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76044,"user_name":"唐木儿","can_delete":false,"product_type":"c1","uid":1455571,"ip_address":"","ucode":"986381E2501686","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/d3/649c0b36.jpg","comment_is_top":false,"comment_ctime":1552525976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552525976","product_id":100006701,"comment_content":"杨老师，怎么理解这句话呢？如果我可以轻易地把获取到的 Integer 对象改变为其他数值，这会带来产品可靠性方面的严重问题。可以举一个简单的例子吗？不太明白","like_count":0},{"had_liked":false,"id":72253,"user_name":"Durian_","can_delete":false,"product_type":"c1","uid":1024735,"ip_address":"","ucode":"D07FD85A81C6D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/df/924756fe.jpg","comment_is_top":false,"comment_ctime":1551541235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551541235","product_id":100006701,"comment_content":"能再解释一下什么泛型只能使用应用类型么？如果是 int 类型的 List 那么通过自动装箱拆箱也是可以实现数据转换的不是么，比如 int c = 1；Object o = c；c = （int）o；也是可以编译的。难道只是为了你们自动的装箱拆箱么？","like_count":0},{"had_liked":false,"id":71513,"user_name":"孤城","can_delete":false,"product_type":"c1","uid":1276356,"ip_address":"","ucode":"CF9D918633359A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWoZTcppN58ekGjSvpalu3Hz7atr3G2qk3byrPRlCnpddoNmLPLGmvYEHutoEZibXeMe0A7KhibBbg/132","comment_is_top":false,"comment_ctime":1551359765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551359765","product_id":100006701,"comment_content":"作者说使用缓存能一定程度提升性能，但又说创建对象会对性能有影响，那到底在使用int和Integer上改如何取舍？","like_count":0},{"had_liked":false,"id":70828,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1551191051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551191051","product_id":100006701,"comment_content":"对象在堆中内存布局分为3部分:对象头，数据部分，填充部分。对象头主要有所谓的mark word.存储hash值，偏向锁等信息，还有指向类数据的指针。数据部分存储各个属性的值，包括父类继承的值。填充部分保证对象地址为8的倍数。","like_count":0},{"had_liked":false,"id":53771,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1346290,"ip_address":"","ucode":"5C3E7A72D72ED9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJd3pia1YMj32OQ2723SEnIYkGvlxkSHhSoC3Gv5icluwqsicvWUsh8ydDFRrwoOPzdm9XtrXIF8C2Rg/132","comment_is_top":false,"comment_ctime":1545721930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545721930","product_id":100006701,"comment_content":"intValue()方法是一个实例方法吧，直接返回的final的属性value","like_count":0},{"had_liked":false,"id":49544,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1544709690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544709690","product_id":100006701,"comment_content":"很棒，收获很多，任何东西在时空两个维度理解透了也就能掌握了。<br>原始数值<br>类<br>对象<br>是三样东西各有各的特点，又因为在Java的世界里产生了联系，保留关联关系需要代价-JVM空间，但空间有限，又需要优化。","like_count":0},{"had_liked":false,"id":48655,"user_name":"狗月晒太阳","can_delete":false,"product_type":"c1","uid":1109309,"ip_address":"","ucode":"3FB34AA401FE4C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/3d/60e6887f.jpg","comment_is_top":false,"comment_ctime":1544508430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544508430","product_id":100006701,"comment_content":"缓存上限值应该是在sun.misc.VM class里边定义的，而-XX:AutoBoxCacheMax=&lt;size&gt;定义的是缓存数组的长度。我看源码是这样写的","like_count":0},{"had_liked":false,"id":44924,"user_name":"__雁城雪","can_delete":false,"product_type":"c1","uid":1188983,"ip_address":"","ucode":"E9B3B37FBAE1F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/77/ebf99445.jpg","comment_is_top":false,"comment_ctime":1543508640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543508640","product_id":100006701,"comment_content":"装箱：调用Integer.valueOf()，int转Integer<br><br>拆箱：调用Integer.intValue()，Integer转int<br><br><br>几乎在任何一种情况下，当在一项操作中混合使用基本类型和装箱基本类型时，装箱基本类型就会自动拆箱，这种情况无一例外。<br><br>装箱会导致高开销和不必要的对象创建。<br><br>总结：基本类型优于装箱基本类型<br><br><br><br><br><br>","like_count":0},{"had_liked":false,"id":41566,"user_name":"antz","can_delete":false,"product_type":"c1","uid":1005589,"ip_address":"","ucode":"BDFDED6D7F0BD2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/15/56f4e62a.jpg","comment_is_top":false,"comment_ctime":1542807073,"is_pvip":false,"replies":[{"id":"15386","content":"Java对象多了些数据以外的额外信息，对象头、补齐之类","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1543156569,"ip_address":"","comment_id":41566,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542807073","product_id":100006701,"comment_content":"想知道Integer 不就是4字节嘛？为什么要从对象角度考虑就变成了4+4+4+4＝16字节？<br><br>其实这个解读没太懂","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429845,"discussion_content":"Java对象多了些数据以外的额外信息，对象头、补齐之类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543156569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20059,"user_name":"刘勇","can_delete":false,"product_type":"c1","uid":1056069,"ip_address":"","ucode":"F8FBB6D96F18D1","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/45/825d285c.jpg","comment_is_top":false,"comment_ctime":1534247092,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1534247092","product_id":100006701,"comment_content":"评论有些讲的比较清晰","like_count":0},{"had_liked":false,"id":17049,"user_name":"Mr. Lonely","can_delete":false,"product_type":"c1","uid":1168376,"ip_address":"","ucode":"A3FFF9B468D8FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/f8/f3e7e288.jpg","comment_is_top":false,"comment_ctime":1532397314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532397314","product_id":100006701,"comment_content":"老师好，请教个问题哈，我想问String的常量池和Integer的静态工厂方法ValueOf进行Integer对象缓存，他们有什么不同和联系，以及用的思想之类老师","like_count":0},{"had_liked":false,"id":13444,"user_name":"遗忘明天","can_delete":false,"product_type":"c1","uid":1121670,"ip_address":"","ucode":"E8B3A6F04F9943","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/86/bd4919a9.jpg","comment_is_top":false,"comment_ctime":1529630379,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1529630379","product_id":100006701,"comment_content":"long的赋值也不是原子操作吗？","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384359,"discussion_content":"long 型变量是 64 位，在 32 位 CPU 上执行写操作会被拆分成两次写操作（写高 32 位和写低 32 位）\n在单核 CPU 场景下，同一时刻只有一个线程执行，禁止 CPU 中断，意味着操作系统不会重新调度线程，也就是禁止了线程切换，获得 CPU 使用权的线程就可以不间断地执行，所以两次写操作一定是：要么都被执行，要么都没有被执行，具有原子性\n在多核场景下，同一时刻，有可能有两个线程同时在执行，一个线程执行在 CPU-1 上，一个线程执行在 CPU-2 上，此时禁止 CPU 中断，只能保证 CPU 上的线程连续执行，并不能保证同一时刻只有一个线程执行，如果这两个线程同时写 long 型变量高 32 位的话，非原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626516360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13443,"user_name":"遗忘明天","can_delete":false,"product_type":"c1","uid":1121670,"ip_address":"","ucode":"E8B3A6F04F9943","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/86/bd4919a9.jpg","comment_is_top":false,"comment_ctime":1529630378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529630378","product_id":100006701,"comment_content":"long的赋值也不是原子操作吗？","like_count":0},{"had_liked":false,"id":12910,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1125094,"ip_address":"","ucode":"1469D12EF42AD7","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/e6/a330d8b0.jpg","comment_is_top":false,"comment_ctime":1529127280,"is_pvip":false,"replies":[{"id":"4302","content":"具体哪一段，是文章中片段的invokestatic之类吗？如果是的话，最准确的可以参考java虚拟机规范，查询相应之类；大多数情况下可以搜索相关分析文章，理解难道会小些","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1529168717,"ip_address":"","comment_id":12910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1529127280","product_id":100006701,"comment_content":"老师，反编译输出怎么理解的，看不懂语法","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419455,"discussion_content":"具体哪一段，是文章中片段的invokestatic之类吗？如果是的话，最准确的可以参考java虚拟机规范，查询相应之类；大多数情况下可以搜索相关分析文章，理解难道会小些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529168717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12348,"user_name":"tracer","can_delete":false,"product_type":"c1","uid":1124766,"ip_address":"","ucode":"AE2BC047DB7D7D","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/9e/380a01ea.jpg","comment_is_top":false,"comment_ctime":1528771883,"is_pvip":false,"replies":[{"id":"4074","content":"getInteger，建议看看文档","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528816727,"ip_address":"","comment_id":12348,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1528771883","product_id":100006701,"comment_content":"integer获取环境变量数值的方法，这个具体是指哪个方法？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419226,"discussion_content":"getInteger，建议看看文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528816727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9872,"user_name":"Ab","can_delete":false,"product_type":"c1","uid":1039466,"ip_address":"","ucode":"8E9261782F025D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/6a/b5478b65.jpg","comment_is_top":false,"comment_ctime":1527135505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527135505","product_id":100006701,"comment_content":"为啥大家都在讨论对象的组成部分😅","like_count":0},{"had_liked":false,"id":9868,"user_name":"梁作斌","can_delete":false,"product_type":"c1","uid":1105038,"ip_address":"","ucode":"B1A72EFDBD8CBB","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/8e/2b7d374f.jpg","comment_is_top":false,"comment_ctime":1527132860,"is_pvip":false,"replies":[{"id":"3090","content":"那是举例，不是定义","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527197111,"ip_address":"","comment_id":9868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1527132860","product_id":100006701,"comment_content":"不是原子操作的基本类型是 float 、double？为啥不是 long、double？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418233,"discussion_content":"那是举例，不是定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527197111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}