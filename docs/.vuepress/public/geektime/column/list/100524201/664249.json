{"id":664249,"title":"48｜多路查找树：B+树的插入与删除操作详解","content":"<p>你好，我是王健伟。</p><p>上节课我们详细讲解了多路查找树中的B树，这节课我们来聊一聊B+树。B+树有人理解为B树的升级，有人理解为B树的变形（变体），都可以。性质上来看，B+树与B树基本相同，但还是有一些不同点的。</p><ul>\n<li>B+树的所有非叶子节点中的数据都会包含在叶子节点中。</li>\n<li>B+树的所有叶子节点相连，从而构成了一个数据从小到大排列的链表（虽然绘制时\t常绘制成一个单链表，但实际应用中，往往实现成一个双链表以方便对数据的查找）。</li>\n</ul><p>下面，我带你看一看B+树都有哪些操作。</p><h2>B+树的插入操作</h2><p>B+树的插入操作和B树非常类似。在这里看一个B+树节点插入的步骤。假如要按顺序给出如下数据创建一棵4阶B+树：</p><p>11，12，6，5，13，7，3，4，2，1，9，8，10</p><p>4阶B+树同样遵循每个节点最少有1个数据，最多有3个数据。创建的步骤如下：</p><ul>\n<li>因为当前并不存在B+树，所以以11为根创建一棵B+树。</li>\n<li>插入12，因为12大于11，所以12位于11的右侧，与11共用一个节点。</li>\n<li>插入6，因为6小于11，所以6位于11的左侧，与11、12共用一个节点。</li>\n<li>插入5，因为5小于6，所以5位于6的左侧，此时注意，5、6、11、12共用一个节点。但因为4阶B+树最多有3个数据，因此这个节点必须要进行拆分（分裂），拆分的原则与B树一样—取这几个数据中间（⌈m/2⌉）的那个数据并作为根节点，剩余的数据分别做这个节点的左孩子和右孩子节点。讲解B树时取了第2个数据作为根节点，在这里取第3个数据作为根节点（4个数据中，第2个或者第3个数据都可以看成是中间的数据）。对于5、6、11、12，取第3个数据11作为根节点，将数据5、6所代表的节点作为11的左孩子，将12所代表的节点作为11的右孩子。</li>\n</ul><!-- [[[read_end]]] --><p>这里必须强调的两点：</p><ol>\n<li>B+树需要叶子节点存放所有非叶子节点的数据，所以数据11也要保存在叶子节点中，把数据11放到右孩子（数据12所代表的节点）中。换句话说，11如果在叶子节点中，并且要作为分拆后的根节点，那么11就要在分拆后的叶子节点中留一份拷贝。在编写代码时，要遵循这句描述以免代码出现错误。</li>\n<li>B+树需要叶子节点相连。</li>\n</ol><p>目前的B+树如图1所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/54/5bf495f7a12f82a2a86dd1cbe6598454.jpg?wh=1176x488\" alt=\"图片\" title=\"图1 包含5个数据的4阶B+树\"></p><ul>\n<li>插入13，从根节点11开始，因为13大于11，因此沿着11的右指针向下找，找到11、12这个节点，因为13大于12，因此按照排列顺序，11、12、13三个数据被放到一起作为一个节点。</li>\n<li>插入7，从根节点11开始，通过比较大小，将7放到5、6所在的节点中，注意顺序，现在5、6、7在一个节点中。如图2所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/1d/38/1de7c59c88a9fbb1c6b8300ff413bc38.jpg?wh=1285x453\" alt=\"图片\" title=\"图2 包含7个数据的4阶B+树\"></p><ul>\n<li>插入3，从根节点11开始，通过比较大小，将3、5、6、7这4个数据放到一起作为一个节点，因为4阶B+树最多有3个数据，因此这个节点必须要进行拆分，将6作为根节点，将3、5这两个数据所代表的节点作为6的左孩子，将6、7这两个数据所代表的节点作为6的右孩子。再将6这个节点并到数字11所代表的根节点中（因为根节点还不超过3个数据），注意因为11大于6，因此11排在6后面，如图3所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/71/b1/714247e095547692a42152f0a8850bb1.jpg?wh=1456x440\" alt=\"图片\" title=\"图3 包含9个数据的4阶B+树\"></p><ul>\n<li>插入4，放到3、5所在的节点中，注意顺序，现在3、4、5在一个节点中。</li>\n<li>插入2，将2、3、4、5这4个数据放到一起作为一个节点，必须要对该节点进行拆分，将4作为根节点，将2、3作为4的左孩子，将4、5作为4的右孩子，将4并到6、11所在的节点，如图4所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/b3/03/b3932cfb8cc4e03072c0db2b69197303.jpg?wh=1533x457\" alt=\"图片\" title=\"图4 包含12个数据的4阶B+树\"></p><ul>\n<li>插入1，放到2、3所在的节点中，注意顺序，现在1、2、3在一个节点中。</li>\n<li>插入9，放到6、7所在的节点中，注意顺序，现在6、7、9在一个节点，如图5所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/a8/10/a8a950421553c24322dc71c89f5f4310.jpg?wh=1617x460\" alt=\"图片\" title=\"图5 包含14个数据的4阶B+树\"></p><ul>\n<li>插入8，放到6、7、9所在的节点中，注意顺序，现在6、7、8、9这4个数据放到一起作为一个节点，必须要对该节点进行拆分，将8作为根节点，将6、7作为8的左孩子，将8、9作为8的右孩子，将8并到4、6、11所在的节点，如图6所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/06/e1/06c7be2b02c8551121b9152552c3f6e1.jpg?wh=1713x491\" alt=\"图片\" title=\"图6 包含16个数据的4阶B+树（中间状态）\"></p><p>图6是这棵B+树的中间状态，因为4、6、8、11所在节点需要继续进行拆分。将8作为根节点，将4、6作为8的左孩子，将11作为8的右孩子。注意这里仅仅将11作为8的右孩子，因为8已经不是叶子节点，8在叶子节点中已经存在了，所以不能将8和11放在一起作为8的右孩子。如图7所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/08/81/08c9f818b7a280183f630be39b225581.jpg?wh=1713x725\" alt=\"图片\" title=\"图7 包含16个数据的4阶B+树（最终状态）\"></p><p>插入10，放到8、9所在的节点中，注意顺序，现在8、9、10在一个节点中，如图8所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/a5/c4bc719a761376ce27b39yydf7fcfea5.jpg?wh=1713x700\" alt=\"图片\" title=\"图8 包含17个数据的4阶B+树\"></p><p>特别提示，B+树在不同的资料中表述和实现存在差异。前面谈到的B+树，非叶子节点的子节点数目比该节点的数据数目多1。但有的资料中对B+树的表述是非叶子节点的子节点数目是和数据数目相等的。这两种表述得到的B+树外观和实现代码都会有些不同，但都是B+树的正确实现方式。这里我就采用“非叶子节点的子节点数目是比该节点的数据数目多1”的表述和实现方式来实现B+ 树，因为这种实现方式与前面所实现的B树最接近。</p><p>B+树的插入操作实现代码与B树的插入操作实现代码大同小异。考虑到已经完整的实现过B树的插入代码，这里我就不实现B+树的插入操作代码了。你如果有兴趣，可以自行实现相关的代码。如果在代码编写中遇到问题，可以参考前面的“<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">可视化数据结构算法演示网站</a>”页面并单击其中的“B+&nbsp; Trees”链接，或者直接访问<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\">页面</a>对B+树中插入、删除等操作进行演示，这对更深入的理解B+树和对正确的写出B+树的插入、删除等操作将起到至关重要的作用。</p><h2>B+树的删除操作</h2><p>B+树的删除操作其实和B树也非常类似。因为B+树的所有非叶子节点中的数据都会包含在叶子节点中，所以删除B+树中的任何数据在终端节点（叶子节点）中都可以找到。明确一下B+树每个节点有多少个数据。以一棵5阶B+树为例：</p><ul>\n<li>一棵5阶B+树，每个节点最多有4个数据。</li>\n<li>根节点可以只有1个数据，非根节点至少有2个数据。</li>\n</ul><p>删除终端节点中的数据，一棵5阶B+树为例，分为两种情况。如图9所示的一棵5阶B+树：</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/a5/8d83ddc4337e2d08eeccb307bcc69ea5.png?wh=560x89\" alt=\"图片\" title=\"图9 一棵5阶B+树\"></p><ul>\n<li><strong>情况一：删除数据后节点中的数据数量不低于下限</strong></li>\n</ul><p>只要删除数据后节点中的数据数量不低于下限，就可以直接在该节点中将数据删除。然后判断被删数据在原节点中是否位于最左侧（在原节点中值最小），若是意味着该数据很可能在其前辈节点中也存在，此时需要继续向树根方向回溯，查看该被删除的数据在中间节点或根节点是否存在，若存在则用叶子节点中该数据的后继数据（该数据右侧的数据）取代在中间节点或根节点中的该值。</p><p>在图9中，若要删除数据75，则直接在叶子节点中删除即可。而若要删除数据70，则除在叶子节点中删除数据70，还要用70的后继数据75来取代根节点中的数据70。所以，删除数据70后得到的结果如图10所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/78/cd/781e6512f1c727365b72ce131d5b83cd.png?wh=560x84\" alt=\"图片\" title=\"图10 一棵5阶B+树删除数据70后的情形\"></p><p><strong>情况二：</strong><strong>如果将数据删除后节点的数据数量低于2，就会导致节点的合并</strong></p><ul>\n<li>如果兄弟节点数据的个数是超过数量2的，就可以从兄弟中借一个数据过来。还是以图9为例。现在要删除数据50，删除50后所在的节点只剩余数据60，低于2个数据，此时左侧兄弟节点（30、35、40）数据个数超过2个，可以借一个数据。具体步骤是把左侧兄弟中最大值40拿来和数据60放到一起，现在这个节点中最小的值就是40。又因为删除数据50之前，50是所在节点最左侧的数据，所以继续向树根方向回溯，查看50在中间节点或根节点是否存在，若存在则用40（被删除数据所在节点中当前最小值）取代。最终得到的B+树如图11所示：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/1a/29/1a759c2fb909738a6417b7fdc0b37929.png?wh=560x104\" alt=\"图片\" title=\"图11 一棵5阶B+树删除数据50后的情形\"></p><ul>\n<li>如果兄弟节点数据的个数不超过数量2，就无法从兄弟中借数据。此时，被删除了数据的节点就会和兄弟节点、父节点进行合并。继续以图9为例。如果删除数据15，则该节点只剩余数据18，这就不满足5阶B+树非根节点至少有2个数据的要求，于是，父节点中的15也用18替代，我们将“18所在节点”与“父节点18、20、30、50”以及“18的左兄弟节点5、10”进行合并，如图12以及图13所示。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7d/9a/7d77716b3527aeyy0c466fe6f5ebe89a.png?wh=560x91\" alt=\"图片\" title=\"图12 一棵5阶B+树删除数据15后的情形（中间状态）\"></p><p><img src=\"https://static001.geekbang.org/resource/image/62/b7/62c8fe2365f655015bfe8a710ef49fb7.png?wh=526x91\" alt=\"图片\" title=\"图13 一棵5阶B+树删除数据15后的情形（最终状态）\"></p><p>合并时注意的是因为18在叶子节点中已经不是最左侧的数值，不应该出现在非叶子节点中，因此父节点中应该将18删除，新的父节点是20、30、50。</p><p>再看一看图14这棵3阶B+树，现在要删除数据29：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/fa/af604cf64ee8e26fa142c9e0e28495fa.png?wh=328x129\" alt=\"图片\" title=\"图14 一棵3阶B+树\"></p><p>叶子节点29删除后，所在的节点就没有数据了，此时该节点与24所在节点以及父（29）所在节点就要合并，合并前发现父节点也包含29，将这个29删除。如图15所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/05/82/05518b012f668e3b18d70c3906374982.png?wh=330x127\" alt=\"图片\" title=\"图15 一棵3阶B+树删除数据29后的情形_1（中间状态）\"></p><p>合并之后子节点仍旧只有数据24，父节点依旧为空，如图16所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/0c/7c7336861af74f10294f4e5b558cb00c.png?wh=364x139\" alt=\"图片\" title=\"图16 一棵3阶B+树删除数据29后的情形_2（中间状态）\"></p><p>如图16，因为此时父节点（节点24的父亲）为空，不满足3阶B+树节点数据最少为1的情形，所以该父节点和其左兄弟22以及该父节点的父节点24要继续合并。合并后如图17所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/98/79/98cf7a60763e3d4a0a37ce5f2d061079.png?wh=402x156\" alt=\"图片\" title=\"图17 一棵3阶B+树删除数据29后的情形_3（中间状态）\"></p><p>此时22、24合并为一个新节点，但该新节点的父亲又为空节点，所以这个空节点要继续与其右兄弟节点42和其父节点36合并，如图18所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/90/15ae5f97c505576f0e63a4b6213df690.png?wh=356x139\" alt=\"图片\" title=\"图18 一棵3阶B+树删除数据29后的情形_4（中间状态）\"></p><p>合并后如图19所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/43/5c/43d8bd4fcb7e9f6cb74bc57949deb75c.png?wh=367x138\" alt=\"图片\" title=\"图19 一棵3阶B+树删除数据29后的情形_5（中间状态）\"></p><p>此时36、42合并为一个新节点，但该新节点的父亲又为空节点，而该空节点恰恰是根节点，所以只需要把这个空的根节点删除，让36、42所在的节点作为整棵B+树的根节点即可，如图20所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/c2/c45e7b8ff7e60fa0e27f1bf5547e8dc2.png?wh=373x120\" alt=\"图片\" title=\"图20 一棵3阶B+树删除数据29后的情形_6（最终状态）\"></p><p>从代码实现的角度来讲，B+树的删除代码与B树大同小异但要稍微复杂一点，所以要注意非叶子节点中也存在要删除或者替换的数据，也要注意维持叶子节点之间的相连关系。考虑到已经完整的实现过B树的删除代码，这里我就不实现B+树的删除操作代码了。</p><h2>小结</h2><p>本节我带你详细学习了多路查找树中的B+树。B+树是B树的升级或变体。它的性质与B树基本相同，但也有如下的不同点：</p><ul>\n<li>B+树的所有非叶子节点中的数据都会包含在叶子节点中。</li>\n<li>B+树的所有叶子节点相连，从而构成了一个数据从小到大排列的链表。</li>\n</ul><p>这节课的重点在于B+树的插入和删除操作的具体步骤。考虑到相关的实现代码与B树非常类似，所以我没有为你提供B+树的具体实现代码，如果你有兴趣的话，可以参考B树的实现代码来自行实现。</p><p>你可能会有疑惑，B+树无论从代码实现复杂程度上还是从节点需要保存的数据数量上都高于B树，那B+树为什么要这样组织数据呢？这就涉及下节课所讲解的B+树的具体应用了。</p><h2>思考题</h2><ol>\n<li>B+树作为B树的变体，它在B树的基础之上进行了哪些改变，试着阐述B+树相对于B树的优势有哪些？</li>\n<li>尝试描述如何利用B+树实现数据记录的范围查询？</li>\n</ol><p>欢迎你在留言区和我交流。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p>","neighbors":{"left":{"article_title":"47｜多路查找树：B树在数据库中的应用","id":663583},"right":{"article_title":"49｜多路查找树：B树、B+树在数据库中的应用有何不同？","id":664722}},"comments":[{"had_liked":false,"id":375945,"user_name":"Rookie","can_delete":false,"product_type":"c1","uid":2187004,"ip_address":"广东","ucode":"EF24CCE1DB64FB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/RlicerWoHS9ehER1qNz2SHuI1IK52jxd7FwUEYfsXibCHpUVdJpzmUsibibbTBdL4eic15rBZkevgXeackZ2GcgE70w/132","comment_is_top":false,"comment_ctime":1686144183,"is_pvip":false,"replies":[{"id":137182,"content":"总要留给大家一些空间，老师也不好全大包大揽","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1686234235,"ip_address":"广东","comment_id":375945,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"怎么没有b+树的代码","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620518,"discussion_content":"总要留给大家一些空间，老师也不好全大包大揽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686234235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}