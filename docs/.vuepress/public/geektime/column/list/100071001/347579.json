{"id":347579,"title":"09｜扩展搜索：如何快速找到想要的文件？","content":"<p>你好，我是尹会生。</p><p>工作时间越久，你就会发现，自己电脑里存储的办公文件也越来越多。一旦需要紧急找到某个文件，你又恰巧忘记了文件被存放的具体位置，就只能通过Windows的搜索功能对文件名称进行搜索，不过你大概率需要长时间等Windows的搜索结果。</p><p>之所以查找文件的时间过长，主要有两个原因。</p><ol>\n<li>搜索范围太大。搜索过程中可能包含了大量的操作系统或应用软件的缓存文件等无效路径，导致搜索时间过长。</li>\n<li>受到硬盘文件数量过多的影响。硬盘的文件数量越多，完整搜索一遍所有文件的时间就越长。</li>\n</ol><p>那有没有办法提高搜索的效率，快速找到你想要的文件呢？基于以上两种原因，相应的，我们可以在Python中采用指定搜索路径范围和提前建立文件索引的两种方案实现文件的搜索功能。</p><p>这两种方案都是基于Python的基本搜索方法实现的，因此我先来带你学习一下如何用Python的pathlib库实现基础文件的搜索。</p><h2>基础搜索方法：用pathlib库搜索文件</h2><p>用Python搜索文件时需要使用pathlib库的glob()函数和rglob()函数，glob()函数可以实现基于文件名的搜索方法，rglob函数可以实现基于扩展名的搜索方法。</p><p>我先来给你看一下Python实现基础搜索功能的代码，通过代码来为你讲解一下Python是如何搜索到一个文件的：</p><!-- [[[read_end]]] --><pre><code>from pathlib import Path\n\nbase_dir = '/Users/edz/Desktop/'\nkeywords = '**/*BBC*'\n\n# 遍历base_dir指向的目录下所有的文件\np = Path(base_dir)\n\n# 当前目录下包含BBC的所有文件名称\nfiles = p.glob(keywords)  \n# files的类型是迭代器\n# 通过list()函数转换为列表输出\n# print(list(files))\n\n# xlsx结尾的文件\nfiles2 = p.rglob('*.xlsx')\nprint(list(files2))\n\n# 遍历子目录和所有文件\nfiles3 = p.glob('**/*')\nprint(list(files3))\n</code></pre><p>在这段代码中，我实现了Python的基础搜索功能。由于搜索的优化要基于glob()函数和rglob()函数进行，为了能更好的提升Python的搜索的效率，我来带你逐一分析一下glob()函数和rglob()函数的参数和返回值。</p><p><strong>首先我来带你看一下glob()函数和它的参数</strong>, 由于glob()进行匹配的是文件的路径和文件名称方式，如: \"c:\\somepath\\to\\filename_include_BBC_voice.exe\" , 而我们进行文件搜索的时候一般会使用关键字，如“BBC”，因此在搜索时我们需要为关键字加上通配符的形式，如“<em>BBC</em>” 。</p><p><strong>通配符是类似正则表达式的元字符的一种特殊符号</strong>，它不能用在正则表达式中，只能用在glob（全称global）匹配模式中。</p><p>我将glob()和rglob()函数常用的通配符，以及它们的功能整理成一个表格，供你学习和参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/d5/c23a69ea88eda1644df17b734df491d5.png?wh=2028*862\" alt=\"\"></p><p>通过表格我希望你能掌握<strong>如何将通配符和要搜索的关键字进行组合</strong>。比如说，通过使用“**/<em>BBC</em>”的方式，我就可以搜索到Path()函数指定目录下所有包含BBC关键字的文件名。</p><p><strong>接下来我再来带你学习一下rglob函数和它的参数</strong>。rglob函数是从文件路径末尾向前进行匹配的，这是它和glob()函数的主要区别, 基于rglob()函数的搜索顺序特点，经常被我们用于进行扩展名的搜索，比如说采用rglob('*.xlsx')就可以搜索所有的xlsx扩展名文件，要比使用glob()编写的模式匹配更简单，参数的含义也更清晰。</p><p><strong>最后我再来带你看一下glob()和rglob()函数的返回值</strong>，有一点我需要提醒你：它们的执行结果是我们之前课程中没有接触过的一种新的数据类型，这种类型叫做“迭代器”。</p><p>顾名思义，迭代器的特点是这个数据类型可以支持迭代操作，执行一次glob()或rglob()函数只返回一个结果。要想得到迭代器所以的值可以使用两种方法。</p><p>一种是使用list()函数将迭代器转换为我们所熟知的列表数据类型，例如我在列表中就是用了“list(files3)”方式将迭代器转换为了列表。</p><p>还有一种方式是使用for循环的方式对迭代器的值进行逐一处理。</p><p>这两种用法不但可以获取glob()返回值，今后我们遇到的迭代器都可以使用list()函数和 for循环取得它的全部值。</p><p>通过对glob()和rglob()函数的参数和返回值的学习，相信你已经掌握了使用功能Python搜索文件的基础方法，接下来我来带你通过指定搜索路径和建立索引文件提高搜索的效率。</p><h2>提升搜索效率的两种方法</h2><p>用Python的pathlib库实现文件搜索，只是在灵活性上比Windows默认的搜索更好，但是搜索效率上并不能带来任何提高。为了减少搜索的等待时间,接下来，我就教你使用指定搜索路径和建立索引文件两个方法,提高pathlib库的搜索效率。</p><h3>指定搜索路径</h3><p>我们先来看第一种，指定搜索路径。我们需要通过三个步骤实现：</p><ol>\n<li>先生成配置文件，把要搜索的路径写入到配置文件中；</li>\n<li>再编写读取配置文件和搜索的自定义函数，把配置文件中的路径读取出来，逐个目录搜索；</li>\n<li>最后，将多个目录的搜索结果合并输出，便于你通过结果快速找到自己想要的文件。</li>\n</ol><p>先说第一步，怎么使用Python读取配置文件。以往我们会把要搜索的路径写入到变量，并把定义路径的变量名称放在代码前几行的位置，便于下次修改搜索目录的时候找到这个变量。但是对于代码工程稍微复杂的程序来说，往往会有多个代码文件，仍然不利于每次搜索的时候进行搜索路径的修改。</p><p>现在我教你一个新的方法，就是把变量放入到一个单独的文件中，这个文件被称作该代码的配置文件。这种方法的好处是你修改搜索目录时不用打开代码文件。假设你的朋友也需要类似功能，那你就可以把代码和配置文件一起发给他，哪怕他完全不会Python，也能使用你编写的程序实现高效搜索。</p><p>那怎么给Python脚本增加配置文件呢？</p><p>配置文件一般为文本文件。配置文件的格式，一般由软件作者基于软件的功能和自己的习惯来指定，不过也有通用的配置文件格式。比如在Windows系统中，最常见的配置文件是扩展名为.ini的文件，在今天这节课，我们就把.ini文件格式作为配置文件的标准格式。</p><p>.ini文件格式包含三个部分，分别是节、参数和注释。格式如下：</p><pre><code>节\t\n[section]\n参数\n（键=值）\n  name=value\n注释 \n注释使用“;”分号表示。在分号后面的文字，直到该行结尾都全部为注解。\n;注释内容\n</code></pre><p>基于.ini文件的格式，我把配置搜索路径的配置文件修改为如下：</p><pre><code>[work]\n;工作文件保存路径\nsearchpath=/Users/edz,/tmp\n\n[game]\n;娱乐文件保存路径\nsearchpath=/games,/movies,/music\n</code></pre><p>在这段代码中，我设置了work和game两个“节”，分别代表工作和娱乐。这样设置的好处是，我可以根据不同的用途来搜索不同的目录。如果搜索时使用了更少的目录，也会相应减少搜索的等待时间。</p><p>另外，你会发现两个“节”中的参数我都指定成相同的名字--searchpath，这样设置的好处是我将搜索范围从“工作”改为“娱乐”时，只需要在代码里修改搜索的“节”，不用修改搜索的参数。</p><p>除了“节”和“参数”，在配置文件中，你还应该关注我对参数searchpath设置值的方式，它的值是我想要进行搜索的路径范围，为了在程序中能够更方便得读取多个路径，我使用逗号来分隔多个路径。</p><p><strong>在编写好配置文件之后，下一步就是取得.ini文件的完整路径</strong>，我把.ini文件和脚本放在了相同的目录，我在第七讲为你详细剖析过，怎样通过__file__变量和pathlib库相结合，实现读取和脚本在同一目录的文件操作，我就不多说了，如果你不太记得了，可以回去复习下。</p><p>找到search.ini文件完整路径之后，接下来需要读取并分析.ini文件格式，Python有实现这个功能的的库，它叫做configparser库，通过这个库你可以直接读取.ini文件中的searchpath参数，不用通过read()函数读取文件内容，手动编写分析.ini文件的脚本了。</p><p>接下来，我来带你看一下Python读取.ini文件的代码，帮你理解Python是怎样通过配置文件来实现在多个路径搜索文件功能的。</p><pre><code>import configparser\nimport pathlib \nfrom pathlib import Path\n\ndef read_dirs(ini_filename, section, arg):\n    &quot;&quot;&quot;\n    通过ini文件名,节和参数取得要操作的多个目录\n    &quot;&quot;&quot;\n    current_path = pathlib.PurePath(__file__).parent\n    inifile = current_path.joinpath(ini_filename)\n\n    # cf是类ConfigParser的实例\n    cf = configparser.ConfigParser()\n\n    # 读取.ini文件\n    cf.read(inifile)\n\n    # 读取work节 和 searchpath参数 \n    return cf.get(section, arg).split(&quot;,&quot;)\n\ndef locate_file(base_dir, keywords):\n    p = Path(base_dir)\n    files = p.glob(keywords) \n    return list(files)\n\n\ndirs = read_dirs('search.ini', 'work', 'searchpath')\n# ['/Users/edz', '/tmp']\nkeywords = '**/*BBC*'\n\n# 定义存放查找结果的列表\nresult = []\n\n# 从每个文件夹中搜索文件\nfor dir in dirs:\n    files = locate_file(dir, keywords)\n    result += files\n\n# 将PosixPath转为字符串\nprint( [str(r) for r in result] )\n</code></pre><p>在这段代码中，读取配置文件和搜索这两个最主要的功能由两个自定义函数实现，它们分别是read_dirs()函数和locate_file()函数。</p><p>read_dirs()函数实现了读取.ini文件，并将返回的多个路径处理为列表类型。列表类型适合多组并列的数据，多个目录刚好可以使用列表这种数据类型来存放要搜索的目录名称。</p><p>locate_file()函数通过代码的第35行循环功能，对每个目录进行了搜索，并将搜索的结果存入result变量。result变量是一个列表数据类型，由于搜索到的文件可能包含多个匹配的文件路径，我需要将搜索到的结果依次存入result列表中，再继续搜索下一个目录，继续通过append()函数将结果放入列表，直到所有的目录搜索完成，整个搜索的程序才真正执行结束。</p><p>最后还有一点需要你注意，在进行路径处理的过程中，pathlib库为了规避不同操作系统路径写法的差异，就把路径统一定义为PosixPath()对象。因此，你在使用这些路径的时候，需要先将PosixPath对象转换为字符串类型。我在代码最后一行通过Python内置函数str()函数把PosixPath对象逐个转换为字符串类型，并再次存入到列表当中。</p><p>通过限制在指定的目录搜索这个功能，我们就可以规避在搜索时错误匹配系统文件和软件缓存文件而导致的查找过慢问题。</p><p>不过如果我们指定的目录仍然有非常多文件的话，那用这个方法查找起来依然会很慢。别担心，接下来我就教你一种利用空间换时间的方法，提高对指定目录文件搜索效率的方法。</p><h3>建立索引文件</h3><p>什么是“空间换时间”呢？我来解释一下。</p><p>我们知道，文件越多，搜索的时间就越长，因为搜索的时间是随着文件数量呈线性增长的。就像一本书越厚，你从第一页读到最后一页的时间就越长一样。那怎样能快速搜索到书中的内容呢？你会想到图书都有目录功能，通过目录可以加快你找到你想看的图书内容的速度。</p><p>对于操作系统来说，一个文件也是由文件名称、大小、文件内容等多个部分组成的，搜索文件的功能只需要文件名称就行了，不需要其他的部分。因此，我们可以在硬盘中新开辟一块空间，将所有的文件名提前存储下来作为文件的索引，下次再查找的时候直接查找索引文件，就能得到搜索结果，而不必再通过硬盘查找真实的文件了。这就是“空间换时间”。</p><p>既然索引文件可以加快搜索速度，那我们去<strong>建立索引文件</strong>就可以了。</p><p>建立索引文件不需要你重新再写新的程序，我们可以基于指定搜索路径的程序进行改造：</p><ul>\n<li>先把配置文件目录下所有文件路径的保存方式<strong>由列表改为文件</strong>；</li>\n<li>再把搜索功能改为<strong>从文件搜索</strong>。</li>\n</ul><p>我把改造后的代码写出来供你参考。</p><pre><code>def locate_file(base_dir, keywords='**/*'):\n    &quot;&quot;&quot;\n    迭代目录下所有文件\n    &quot;&quot;&quot;\n    p = Path(base_dir)\n    return p.glob(keywords)\n\ndef write_to_db():\n    &quot;&quot;&quot;\n    写入索引文件\n    &quot;&quot;&quot;\n    current_path = pathlib.PurePath(__file__).parent\n    dbfile = current_path.joinpath(&quot;search.db&quot;)\n\n    with open(dbfile, 'w', encoding='utf-8') as f:\n        for r in result:\n            f.write(f&quot;{str(r)}\\n&quot;)\n\n# 读取配置文件\ndirs = read_dirs('search.ini', 'work', 'searchpath')\n\n# 遍历目录\nresult = []\nfor dir in dirs:\n    for files in locate_file(dir):\n        result.append(files)\n\n# 将目录写入索引文件\nwrite_to_db()\n\n</code></pre><p>在代码中我增加了write_to_db()函数，它在代码的第16-18行，我通过写入文件方式替代了写入列表的功能。同时，为了能遍历所有的目录，我还修改了locate_file()函数的第二个参数，将它改为“keywords='<strong>/*'”。通过这两处的修改，就把所有文件路径全部保存到search.db文件中了</strong>。**</p><p>search.db的文件内容如下，这里记录了配置文件指定的所有目录下的所有文件路径：</p><pre><code>/tmp/com.apple.launchd.kZENgZTtVz\n/tmp/com.google.Keystone\n/tmp/mysql.sock\n/tmp/com.adobe.AdobeIPCBroker.ctrl-edz\n/tmp/com.apple.launchd.kZENgZTtVz/Listeners\n/tmp/com.google.Keystone/.keystone_install_lock\n... ...\n</code></pre><p>接下来，我再把搜索功能从列表搜索改造为<strong>从文件搜索，</strong>为了避免每次搜索要重新生成一次search.db文件，我要编写一个新的脚本，专门用于从文本中搜索关键字，并将搜索的结果显示出来。</p><p>相信你一定想到了我在上一讲为你讲解的正则表达式功能，通过re.search()函数刚好可以实现文本的搜索。下面的locate.py脚本文件就是我使用正则表达式实现的文本搜索功能：</p><pre><code>import pathlib \nimport re\n\nkeyword = &quot;apple&quot;\n\n# 获取索引文件路径\ncurrent_path = pathlib.PurePath(__file__).parent\ndbfile = current_path.joinpath(&quot;search.db&quot;)\n\n# 在索引文件中搜索关键字\nwith open(dbfile, encoding='utf-8') as f:\n    for line in f.readlines():\n        if re.search(keyword, line):\n            print(line.rstrip())\n\n</code></pre><p>在代码中我利用正则表达式的re.search()搜索函数，以keyword变量作为搜索的关键字，对search.db索引文件的每一行进行了匹配，最后将符合关键字“apple”的文件路径和名称一起显示在屏幕上。</p><p>使用这种方式来搜索文件，要比使用操作系统自带的搜索工具快得多，因为我将原本Windows搜索硬盘上的文件所消耗的时间拆分成了两部分。</p><ul>\n<li>一部分是updatedb.py建立索引的时间；</li>\n<li>一部分是从search.db索引文件查找关键字的时间。</li>\n</ul><p>当搜索等待的时间被提前转换为建立索引的时间后，搜索的效率自然就提高了。</p><p>但是请你注意，这种方式建立的索引文件会有时效性的问题，一旦硬盘中的文件被删除、移动或改名，你就得重新建立索引文件。而索引文件保存的文件路径和当前真实的文件并不能一一对应，所以你需要及时更新索引文件。</p><p>为了保证索引文件的时效性，你还可以把updatedb.py脚本加入到Windows的开机启动脚本中，每次打开计算机就会自动更新索引文件。通过这种方式就可以让索引文件里的文件路径更加准确。</p><h3>总结</h3><p>最后，我来为你总结一下。这节课，我为你讲解了如何使用pathlib库搜索文件，以及如何使用配置文件和索引文件加快搜索。</p><p>利用索引文件减少等待时间，实际上是将Windows的搜索进行了拆分，提前将搜索的路径保存到了索引文件中，从索引文件搜索时，就不用再进行真正的文件查找工作了，这就减少了搜索的等待的时间。</p><p>这种搜索方法在服务器领域已经被广泛使用，像Linux和MacOS操作系统中都存在着利用索引文件的搜索命令，对于服务器上变化频率较低的场景，利用索引文件搜索非常实用。</p><h3>思考题</h3><p>我给你留一道思考题。如何扩展locate.py的搜索功能，实现搜索.jpg扩展名的文件呢?</p><p>欢迎把你的思考和想法分享在留言区，我们一起交流讨论。如果课程帮你解决了一些工作上的问题，也欢迎你把课程分享给你的朋友、同事。</p>","neighbors":{"left":{"article_title":"08｜正则表达式：如何提高搜索内容的精确度？","id":346724},"right":{"article_title":"10｜按指定顺序给词语排序，提高查找效率","id":348179}},"comments":[{"had_liked":false,"id":285654,"user_name":"回到原点","can_delete":false,"product_type":"c1","uid":1162646,"ip_address":"","ucode":"95B48784A64271","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/96/da84604a.jpg","comment_is_top":false,"comment_ctime":1616942240,"is_pvip":false,"replies":[{"id":"103942","content":"赞","user_name":"作者回复","user_name_real":"尹会生","uid":"1056235","ctime":1617279134,"ip_address":"","comment_id":285654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10206876832","product_id":100071001,"comment_content":"def search_ext(file_ext):<br>    with open(dbfile, encoding=&#39;utf-8&#39;) as f:<br>        for line in f.readlines():<br>            if line.rstrip().endswith(file_ext):<br>                print(line.rstrip())<br><br>if __name__ == &quot;__main__&quot;:<br>    search_ext(&#39;.jpg&#39;)","like_count":2,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517742,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617279134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347085,"user_name":"Geek_cdcb96","can_delete":false,"product_type":"c1","uid":2927541,"ip_address":"","ucode":"FE14A56CF6EFC8","user_header":"","comment_is_top":false,"comment_ctime":1653704578,"is_pvip":false,"replies":[{"id":"126818","content":"1 result 之前定义过，所以没有报错，可参考完整代码<br><br>2 初步怀疑是执行命令的“当前目录”不一样导致的问题，可以在循环处理目录之前，增加print() 函数，在遍历前打印要遍历的目录，往往能快速定位问题","user_name":"作者回复","user_name_real":"编辑","uid":"1056235","ctime":1654665892,"ip_address":"","comment_id":347085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653704578","product_id":100071001,"comment_content":"def write_to_db():    <br>&quot;&quot;&quot;    写入索引文件    &quot;&quot;&quot;    <br>current_path = pathlib.PurePath(__file__).parent    <br>dbfile = current_path.joinpath(&quot;search.db&quot;)    <br>with open(dbfile, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: <br>       for r in result:  <br>          f.write(f&quot;{str(r)}\\n&quot;)<br><br>请问老师，这个函数中的result变量是在哪里定义的？<br>没有在函数中定义，是不是用的函数外部的result，但是也没有指定为全局变量，关键是最后没有报错。<br><br>还有一个问题，我使用locate_file()函数对文件较多的目录进行搜索时，显示直接跳出了，没有返回目录中的文件，但是在命令行条件下可以返回。是怎么回事。","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575201,"discussion_content":"1 result 之前定义过，所以没有报错，可参考完整代码\n\n2 初步怀疑是执行命令的“当前目录”不一样导致的问题，可以在循环处理目录之前，增加print() 函数，在遍历前打印要遍历的目录，往往能快速定位问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654665892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283373,"user_name":"琥珀·","can_delete":false,"product_type":"c1","uid":1162136,"ip_address":"","ucode":"7DB119EB3D4F8F","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/98/db72a54a.jpg","comment_is_top":false,"comment_ctime":1615732390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615732390","product_id":100071001,"comment_content":"expanded_name = &quot;jpg&quot;<br><br>with open(dbfile, encoding=&#39;utf-8&#39;) as f:<br>    for line in f.readlines():<br>        if re.search(f&quot;.*{expanded_name}&quot;, line, flags=re.IGNORECASE):<br>            print(line.rstrip())","like_count":0},{"had_liked":false,"id":281256,"user_name":"Soul of the Dragon","can_delete":false,"product_type":"c1","uid":2438011,"ip_address":"","ucode":"21603099E51B8A","user_header":"https://static001.geekbang.org/account/avatar/00/25/33/7b/9e012181.jpg","comment_is_top":false,"comment_ctime":1614666668,"is_pvip":false,"replies":[{"id":"102171","content":"file前后是两个“_” 可以先确认一下，或者参考我为这一讲写的演示代码，看下是否有书写错误的问题","user_name":"作者回复","user_name_real":"尹会生","uid":"1056235","ctime":1614754397,"ip_address":"","comment_id":281256,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1614666668","product_id":100071001,"comment_content":"老师，我按照您之前说的，用.py格式的脚本文件运行“current_path = pathlib.PurePath(__file__).parent”这一行代码，为什么还是会出现“NameError: name &#39;__file__&#39; is not defined”这样的报错？","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516341,"discussion_content":"file前后是两个“_” 可以先确认一下，或者参考我为这一讲写的演示代码，看下是否有书写错误的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614754397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2367914,"avatar":"https://static001.geekbang.org/account/avatar/00/24/21/aa/3b1dbca7.jpg","nickname":"坚果","note":"","ucode":"480E112DF49A6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554641,"discussion_content":"jupyter nb运行改成current_path=pathlib.Path.cwd()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646526874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252620,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1d/0c/c438c5df.jpg","nickname":"天国之影","note":"","ucode":"FBCB451EF0BA23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537131,"discussion_content":"可以参考我的方法，Jupyter Notebook中使用os.getcwd()进行替换，详见6.2节\n\n在线阅读地址：\nhttps://relph1119.github.io/TechBooks-ReadingNote/#/python_office_automation/section02","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638965160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}