{"id":152668,"title":"32 | 自己动手写高性能HTTP服务器（一）：设计和思路","content":"<p>\b你好，我是盛延敏，这里是网络编程实战第32讲，欢迎回来。</p><p>从这一讲开始，我们进入实战篇，开启一个高性能HTTP服务器的编写之旅。</p><p>在开始编写高性能HTTP服务器之前，我们先要构建一个支持TCP的高性能网络编程框架，完成这个TCP高性能网络框架之后，再增加HTTP特性的支持就比较容易了，这样就可以很快开发出一个高性能的HTTP服务器程序。</p><h2>设计需求</h2><p>在第三个模块性能篇中，我们已经使用这个网络编程框架完成了多个应用程序的开发，这也等于对网络编程框架提出了编程接口方面的需求。综合之前的使用经验，TCP高性能网络框架需要满足的需求有以下三点。</p><p>第一，采用reactor模型，可以灵活使用poll/epoll作为事件分发实现。</p><p>第二，必须支持多线程，从而可以支持单线程单reactor模式，也可以支持多线程主-从reactor模式。可以将套接字上的I/O事件分离到多个线程上。</p><p>第三，封装读写操作到Buffer对象中。</p><p>按照这三个需求，正好可以把整体设计思路分成三块来讲解，分别包括反应堆模式设计、I/O模型和多线程模型设计、数据读写封装和buffer。今天我们主要讲一下主要的设计思路和数据结构，以及反应堆模式设计。</p><!-- [[[read_end]]] --><h2>主要设计思路</h2><h3>反应堆模式设计</h3><p>反应堆模式，按照性能篇的讲解，主要是设计一个基于事件分发和回调的反应堆框架。这个框架里面的主要对象包括：</p><ul>\n<li>\n<h3>event_loop</h3>\n</li>\n</ul><p>你可以把event_loop这个对象理解成和一个线程绑定的无限事件循环，你会在各种语言里看到event_loop这个抽象。这是什么意思呢？简单来说，它就是一个无限循环着的事件分发器，一旦有事件发生，它就会回调预先定义好的回调函数，完成事件的处理。</p><p>具体来说，event_loop使用poll或者epoll方法将一个线程阻塞，等待各种I/O事件的发生。</p><ul>\n<li>\n<h3>channel</h3>\n</li>\n</ul><p>对各种注册到event_loop上的对象，我们抽象成channel来表示，例如注册到event_loop上的监听事件，注册到event_loop上的套接字读写事件等。在各种语言的API里，你都会看到channel这个对象，大体上它们表达的意思跟我们这里的设计思路是比较一致的。</p><ul>\n<li>\n<h3>acceptor</h3>\n</li>\n</ul><p>acceptor对象表示的是服务器端监听器，acceptor对象最终会作为一个channel对象，注册到event_loop上，以便进行连接完成的事件分发和检测。</p><ul>\n<li>\n<h3>event_dispatcher</h3>\n</li>\n</ul><p>event_dispatcher是对事件分发机制的一种抽象，也就是说，可以实现一个基于poll的poll_dispatcher，也可以实现一个基于epoll的epoll_dispatcher。在这里，我们统一设计一个event_dispatcher结构体，来抽象这些行为。</p><ul>\n<li>\n<h3>channel_map</h3>\n</li>\n</ul><p>channel_map保存了描述字到channel的映射，这样就可以在事件发生时，根据事件类型对应的套接字快速找到channel对象里的事件处理函数。</p><h3>I/O模型和多线程模型设计</h3><p>I/O线程和多线程模型，主要解决event_loop的线程运行问题，以及事件分发和回调的线程执行问题。</p><ul>\n<li>\n<h3>thread_pool</h3>\n</li>\n</ul><p>thread_pool维护了一个sub-reactor的线程列表，它可以提供给主reactor线程使用，每次当有新的连接建立时，可以从thread_pool里获取一个线程，以便用它来完成对新连接套接字的read/write事件注册，将I/O线程和主reactor线程分离。</p><ul>\n<li>\n<h3>event_loop_thread</h3>\n</li>\n</ul><p>event_loop_thread是reactor的线程实现，连接套接字的read/write事件检测都是在这个线程里完成的。</p><h3>Buffer和数据读写</h3><ul>\n<li>\n<h3>buffer</h3>\n</li>\n</ul><p>buffer对象屏蔽了对套接字进行的写和读的操作，如果没有buffer对象，连接套接字的read/write事件都需要和字节流直接打交道，这显然是不友好的。所以，我们也提供了一个基本的buffer对象，用来表示从连接套接字收取的数据，以及应用程序即将需要发送出去的数据。</p><ul>\n<li>\n<h3>tcp_connection</h3>\n</li>\n</ul><p>tcp_connection这个对象描述的是已建立的TCP连接。它的属性包括接收缓冲区、发送缓冲区、channel对象等。这些都是一个TCP连接的天然属性。</p><p>tcp_connection是大部分应用程序和我们的高性能框架直接打交道的数据结构。我们不想把最下层的channel对象暴露给应用程序，因为抽象的channel对象不仅仅可以表示tcp_connection，前面提到的监听套接字也是一个channel对象，后面提到的唤醒socketpair也是一个 channel对象。所以，我们设计了tcp_connection这个对象，希望可以提供给用户比较清晰的编程入口。</p><h2>反应堆模式设计</h2><h3>概述</h3><p>下面，我们详细讲解一下以event_loop为核心的反应堆模式设计。这里有一张event_loop的运行详图，你可以对照这张图来理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/61/7ab9f89544aba2021a9d2ceb94ad9661.jpg?wh=3499*1264\" alt=\"\"></p><p>当event_loop_run完成之后，线程进入循环，首先执行dispatch事件分发，一旦有事件发生，就会调用channel_event_activate函数，在这个函数中完成事件回调函数eventReadcallback和eventWritecallback的调用，最后再进行event_loop_handle_pending_channel，用来修改当前监听的事件列表，完成这个部分之后，又进入了事件分发循环。</p><h3>event_loop分析</h3><p>说event_loop是整个反应堆模式设计的核心，一点也不为过。先看一下event_loop的数据结构。</p><p>在这个数据结构中，最重要的莫过于event_dispatcher对象了。你可以简单地把event_dispatcher理解为poll或者epoll，它可以让我们的线程挂起，等待事件的发生。</p><p>这里有一个小技巧，就是event_dispatcher_data，它被定义为一个void *类型，可以按照我们的需求，任意放置一个我们需要的对象指针。这样，针对不同的实现，例如poll或者epoll，都可以根据需求，放置不同的数据对象。</p><p>event_loop中还保留了几个跟多线程有关的对象，如owner_thread_id是保留了每个event loop的线程ID，mutex和con是用来进行线程同步的。</p><p>socketPair是父线程用来通知子线程有新的事件需要处理。pending_head和pending_tail是保留在子线程内的需要处理的新事件。</p><pre><code>struct event_loop {\n    int quit;\n    const struct event_dispatcher *eventDispatcher;\n\n    /** 对应的event_dispatcher的数据. */\n    void *event_dispatcher_data;\n    struct channel_map *channelMap;\n\n    int is_handle_pending;\n    struct channel_element *pending_head;\n    struct channel_element *pending_tail;\n\n    pthread_t owner_thread_id;\n    pthread_mutex_t mutex;\n    pthread_cond_t cond;\n    int socketPair[2];\n    char *thread_name;\n};\n</code></pre><p>下面我们看一下event_loop最主要的方法event_loop_run方法，前面提到过，event_loop就是一个无限while循环，不断地在分发事件。</p><pre><code>/**\n *\n * 1.参数验证\n * 2.调用dispatcher来进行事件分发,分发完回调事件处理函数\n */\nint event_loop_run(struct event_loop *eventLoop) {\n    assert(eventLoop != NULL);\n\n    struct event_dispatcher *dispatcher = eventLoop-&gt;eventDispatcher;\n\n    if (eventLoop-&gt;owner_thread_id != pthread_self()) {\n        exit(1);\n    }\n\n    yolanda_msgx(&quot;event loop run, %s&quot;, eventLoop-&gt;thread_name);\n    struct timeval timeval;\n    timeval.tv_sec = 1;\n\n    while (!eventLoop-&gt;quit) {\n        //block here to wait I/O event, and get active channels\n        dispatcher-&gt;dispatch(eventLoop, &amp;timeval);\n\n        //handle the pending channel\n        event_loop_handle_pending_channel(eventLoop);\n    }\n\n    yolanda_msgx(&quot;event loop end, %s&quot;, eventLoop-&gt;thread_name);\n    return 0;\n}\n</code></pre><p>代码很明显地反映了这一点，这里我们在event_loop不退出的情况下，一直在循环，循环体中调用了dispatcher对象的dispatch方法来等待事件的发生。</p><h3>event_dispacher分析</h3><p>为了实现不同的事件分发机制，这里把poll、epoll等抽象成了一个event_dispatcher结构。event_dispatcher的具体实现有poll_dispatcher和epoll_dispatcher两种，实现的方法和性能篇<a href=\"https://time.geekbang.org/column/article/140520\">21</a><a href=\"https://time.geekbang.org/column/article/140520\">讲</a>和<a href=\"https://time.geekbang.org/column/article/141573\">22讲</a>类似，这里就不再赘述，你如果有兴趣的话，可以直接研读代码。</p><pre><code>/** 抽象的event_dispatcher结构体，对应的实现如select,poll,epoll等I/O复用. */\nstruct event_dispatcher {\n    /**  对应实现 */\n    const char *name;\n\n    /**  初始化函数 */\n    void *(*init)(struct event_loop * eventLoop);\n\n    /** 通知dispatcher新增一个channel事件*/\n    int (*add)(struct event_loop * eventLoop, struct channel * channel);\n\n    /** 通知dispatcher删除一个channel事件*/\n    int (*del)(struct event_loop * eventLoop, struct channel * channel);\n\n    /** 通知dispatcher更新channel对应的事件*/\n    int (*update)(struct event_loop * eventLoop, struct channel * channel);\n\n    /** 实现事件分发，然后调用event_loop的event_activate方法执行callback*/\n    int (*dispatch)(struct event_loop * eventLoop, struct timeval *);\n\n    /** 清除数据 */\n    void (*clear)(struct event_loop * eventLoop);\n};\n</code></pre><h3>channel对象分析</h3><p>channel对象是用来和event_dispather进行交互的最主要的结构体，它抽象了事件分发。一个channel对应一个描述字，描述字上可以有READ可读事件，也可以有WRITE可写事件。channel对象绑定了事件处理函数event_read_callback和event_write_callback。</p><pre><code>typedef int (*event_read_callback)(void *data);\n\ntypedef int (*event_write_callback)(void *data);\n\nstruct channel {\n    int fd;\n    int events;   //表示event类型\n\n    event_read_callback eventReadCallback;\n    event_write_callback eventWriteCallback;\n    void *data; //callback data, 可能是event_loop，也可能是tcp_server或者tcp_connection\n};\n</code></pre><h3>channel_map对象分析</h3><p>event_dispatcher在获得活动事件列表之后，需要通过文件描述字找到对应的channel，从而回调channel上的事件处理函数event_read_callback和event_write_callback，为此，设计了channel_map对象。</p><pre><code>/**\n * channel映射表, key为对应的socket描述字\n */\nstruct channel_map {\n    void **entries;\n\n    /* The number of entries available in entries */\n    int nentries;\n};\n</code></pre><p>channel_map对象是一个数组，数组的下标即为描述字，数组的元素为channel对象的地址。</p><p>比如描述字3对应的channel，就可以这样直接得到。</p><pre><code>struct chanenl * channel = map-&gt;entries[3];\n</code></pre><p>这样，当event_dispatcher需要回调channel上的读、写函数时，调用channel_event_activate就可以，下面是channel_event_activate的实现，在找到了对应的channel对象之后，根据事件类型，回调了读函数或者写函数。注意，这里使用了EVENT_READ和EVENT_WRITE来抽象了poll和epoll的所有读写事件类型。</p><pre><code>int channel_event_activate(struct event_loop *eventLoop, int fd, int revents) {\n    struct channel_map *map = eventLoop-&gt;channelMap;\n    yolanda_msgx(&quot;activate channel fd == %d, revents=%d, %s&quot;, fd, revents, eventLoop-&gt;thread_name);\n\n    if (fd &lt; 0)\n        return 0;\n\n    if (fd &gt;= map-&gt;nentries)return (-1);\n\n    struct channel *channel = map-&gt;entries[fd];\n    assert(fd == channel-&gt;fd);\n\n    if (revents &amp; (EVENT_READ)) {\n        if (channel-&gt;eventReadCallback) channel-&gt;eventReadCallback(channel-&gt;data);\n    }\n    if (revents &amp; (EVENT_WRITE)) {\n        if (channel-&gt;eventWriteCallback) channel-&gt;eventWriteCallback(channel-&gt;data);\n    }\n\n    return 0;\n}\n</code></pre><h3>增加、删除、修改channel event</h3><p>那么如何增加新的channel event事件呢？下面这几个函数是用来增加、删除和修改channel event事件的。</p><pre><code>int event_loop_add_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);\n\nint event_loop_remove_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);\n\nint event_loop_update_channel_event(struct event_loop *eventLoop, int fd, struct channel *channel1);\n</code></pre><p>前面三个函数提供了入口能力，而真正的实现则落在这三个函数上：</p><pre><code>int event_loop_handle_pending_add(struct event_loop *eventLoop, int fd, struct channel *channel);\n\nint event_loop_handle_pending_remove(struct event_loop *eventLoop, int fd, struct channel *channel);\n\nint event_loop_handle_pending_update(struct event_loop *eventLoop, int fd, struct channel *channel);\n</code></pre><p>我们看一下其中的一个实现，event_loop_handle_pending_add在当前event_loop的channel_map里增加一个新的key-value对，key是文件描述字，value是channel对象的地址。之后调用event_dispatcher对象的add方法增加channel event事件。注意这个方法总在当前的I/O线程中执行。</p><pre><code>// in the i/o thread\nint event_loop_handle_pending_add(struct event_loop *eventLoop, int fd, struct channel *channel) {\n    yolanda_msgx(&quot;add channel fd == %d, %s&quot;, fd, eventLoop-&gt;thread_name);\n    struct channel_map *map = eventLoop-&gt;channelMap;\n\n    if (fd &lt; 0)\n        return 0;\n\n    if (fd &gt;= map-&gt;nentries) {\n        if (map_make_space(map, fd, sizeof(struct channel *)) == -1)\n            return (-1);\n    }\n\n    //第一次创建，增加\n    if ((map)-&gt;entries[fd] == NULL) {\n        map-&gt;entries[fd] = channel;\n        //add channel\n        struct event_dispatcher *eventDispatcher = eventLoop-&gt;eventDispatcher;\n        eventDispatcher-&gt;add(eventLoop, channel);\n        return 1;\n    }\n\n    return 0;\n}\n</code></pre><h2>总结</h2><p>在这一讲里，我们介绍了高性能网络编程框架的主要设计思路和基本数据结构，以及反应堆设计相关的具体做法。在接下来的章节中，我们将继续编写高性能网络编程框架的线程模型以及读写Buffer部分。</p><h2>思考题</h2><p>和往常一样，给你留两道思考题:</p><p>第一道，如果你有兴趣，不妨实现一个select_dispatcher对象，用select方法实现定义好的event_dispatcher接口；</p><p>第二道，仔细研读channel_map实现中的map_make_space部分，说说你的理解。</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":143255,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1571657459,"is_pvip":false,"replies":[{"id":"55843","content":"这块是我的疏忽，应该直接赋值的，可能是开始我撰写的时候channel对象的初始化放到了event_loop_handle_pending_add函数中，后来把channel对象的初始化重构到外面，这里忘记删掉了。<br><br>已经更新文稿(待周一编辑更新)和github代码，感谢指正。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572064101,"ip_address":"","comment_id":143255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31636428531","product_id":100032701,"comment_content":"event_loop_handle_pending_add函数中，<br>map-&gt;entries[fd] = calloc(1, sizeof(struct channel *));<br>map-&gt;entries[fd] = channel;<br>这两行都给map-&gt;entries[fd] 赋值，后一行不是覆盖上一行的赋值了么？有何用意？","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471449,"discussion_content":"这块是我的疏忽，应该直接赋值的，可能是开始我撰写的时候channel对象的初始化放到了event_loop_handle_pending_add函数中，后来把channel对象的初始化重构到外面，这里忘记删掉了。\n\n已经更新文稿(待周一编辑更新)和github代码，感谢指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572064101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143470,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1571714198,"is_pvip":false,"replies":[{"id":"55831","content":"显然是看进去了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572058676,"ip_address":"","comment_id":143470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27341517974","product_id":100032701,"comment_content":"map_make_space() 函数里 realloc() 和 memset() 两个函数用的很巧妙啊，realloc() 用来扩容，且把旧的内容搬过去，memset() 用来给新申请的内存赋 0 值。赞，C 语言太强大了。","like_count":7,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471554,"discussion_content":"显然是看进去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572058676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143088,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571628389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14456530277","product_id":100032701,"comment_content":"第二道题 就是一个扩容啊 类似std的vector自动扩容 而且每次成倍的增长","like_count":3},{"had_liked":false,"id":157398,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1575132420,"is_pvip":false,"replies":[{"id":"60375","content":"这里是位与操作，举个例子，EVENT_READ可能为二进制的00000010，如果有可读事件发生，那么在这个位上的bit值一定位1，这样位与的结果就说明这个事件发生了。之所以采用位与，而不是位或，是因为只需要关心这一种类型的事件。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575186077,"ip_address":"","comment_id":157398,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10165067012","product_id":100032701,"comment_content":"老师你好，问个基础的问题：<br>epoll_dispatcher和poll_dispatcher都有，在添加，删除，更新事件时都有如下的逻辑，其中if条件中的判断怎么理解啊？<br>if (channel1-&gt;events &amp; EVENT_READ) {<br>        events = events | POLLRDNORM;<br>    }<br><br>    if (channel1-&gt;events &amp; EVENT_WRITE) {<br>        events = events | POLLWRNORM;<br>    }","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476417,"discussion_content":"这里是位与操作，举个例子，EVENT_READ可能为二进制的00000010，如果有可读事件发生，那么在这个位上的bit值一定位1，这样位与的结果就说明这个事件发生了。之所以采用位与，而不是位或，是因为只需要关心这一种类型的事件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575186077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","nickname":"酸葡萄","note":"","ucode":"9D059C4FB327C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73145,"discussion_content":"谢谢老师,我想问的是为什么channel1->events 要和EVENT_READ/EVENT_WRITE  &amp;.   提问过之后就看明白了了,EVENT_READ/EVENT_WRITE 是前面注册过的.  谢谢老师的解答了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575553910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296545,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1623036367,"is_pvip":false,"replies":[{"id":"108676","content":"很好的问题。<br><br>第一，你可以看看实际分配的fd，大概会是什么样子；<br>第二，除了这个方法，你有别的更高效的方法吗？因为从fd来查找数据，需要非常的快；<br><br>我个人的判断，这点内存不算什么，因为我在设计这个结构时，大部分数据都是指针类型的。<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1624805715,"ip_address":"","comment_id":296545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918003663","product_id":100032701,"comment_content":"int map_make_space(struct channel_map *map, int slot, int msize) {<br>    if (map-&gt;nentries &lt;= slot) {<br>        int nentries = map-&gt;nentries ? map-&gt;nentries : 32;<br>        void **tmp;<br><br>        while (nentries &lt;= slot)<br>            nentries &lt;&lt;= 1;<br><br>        tmp = (void **) realloc(map-&gt;entries, nentries * msize);<br>        if (tmp == NULL)<br>            return (-1);<br><br>        memset(&amp;tmp[map-&gt;nentries], 0,<br>               (nentries - map-&gt;nentries) * msize);<br><br>        map-&gt;nentries = nentries;<br>        map-&gt;entries = tmp;<br>    }<br><br>    return (0);<br>}<br>老师，fd不一定是连续的吧，这样会浪费内存存储空间吧？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521479,"discussion_content":"很好的问题。\n\n第一，你可以看看实际分配的fd，大概会是什么样子；\n第二，除了这个方法，你有别的更高效的方法吗？因为从fd来查找数据，需要非常的快；\n\n我个人的判断，这点内存不算什么，因为我在设计这个结构时，大部分数据都是指针类型的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624805715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287971,"user_name":"谁家内存泄露了","can_delete":false,"product_type":"c1","uid":2436042,"ip_address":"","ucode":"CDDA3BE17FE40E","user_header":"https://static001.geekbang.org/account/avatar/00/25/2b/ca/71ff1fd7.jpg","comment_is_top":false,"comment_ctime":1618236226,"is_pvip":false,"replies":[{"id":"104846","content":"所有的作用范围是全局的，而mutex锁看情况，有些是线程级别的，比如这里：<br>    pthread_mutex_lock(&amp;eventLoopThread-&gt;mutex);","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1618751350,"ip_address":"","comment_id":287971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5913203522","product_id":100032701,"comment_content":"老师好，请问您的代码中关于锁的使用，我想知道您关于每个loop都设计了一个锁，可是这几个mutex都是局部变量吧？他们的作用范围是什么样的呢？这里想不清楚，请指点一下！","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518477,"discussion_content":"所有的作用范围是全局的，而mutex锁看情况，有些是线程级别的，比如这里：\n    pthread_mutex_lock(&amp;amp;eventLoopThread-&amp;gt;mutex);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618751350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279197,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1613654837,"is_pvip":false,"replies":[{"id":"102001","content":"连接着client端的套接字和server端的套接字。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516145,"ip_address":"","comment_id":279197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5908622133","product_id":100032701,"comment_content":"如果Channel是一个管道，他连接着哪两个对象？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515658,"discussion_content":"连接着client端的套接字和server端的套接字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143567,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571733875,"is_pvip":false,"replies":[{"id":"55824","content":"好问题，我试着解读一下:<br>第一，Java有JVM实现，在Java的世界里，它的对象是统一被JVM管理的，包括GC，对象管理，基于这一层考虑，它不可能使用系统级别的对象内存管理，这两个没有办法调和，就像你举的例子，如果我们创建一个类似ReallocList对象，那么这个对象的内存管理完全不是JVM那套了；<br><br>第二，JVM是一个跨OS的实现，我不知道是否Windows也有类似realloc函数，这样就需要JVM做到跨OS的直接内存接管，这和Java的思想是不一致的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572058320,"ip_address":"","comment_id":143567,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5866701171","product_id":100032701,"comment_content":"看到map_make_space里面的realloc函数，突然有个疑问，既然操作系统底层支持直接在原数组上扩充内存，为什么Java不支持直接在原数组上扩容呢，ArrayList每次扩容都要重新拷贝一份原来的数据。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471596,"discussion_content":"好问题，我试着解读一下:\n第一，Java有JVM实现，在Java的世界里，它的对象是统一被JVM管理的，包括GC，对象管理，基于这一层考虑，它不可能使用系统级别的对象内存管理，这两个没有办法调和，就像你举的例子，如果我们创建一个类似ReallocList对象，那么这个对象的内存管理完全不是JVM那套了；\n\n第二，JVM是一个跨OS的实现，我不知道是否Windows也有类似realloc函数，这样就需要JVM做到跨OS的直接内存接管，这和Java的思想是不一致的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572058320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258839,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/57/ab4ba792.jpg","nickname":"小鱼","note":"","ucode":"9F3D087A95D0C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38482,"discussion_content":"我认为数组是连续的内存空间，一旦申请好了内存空间，那么这个空间之外的地址是随时可以被别的程序占用费，如果不重新申请空间则数组很可能无法扩容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571794264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1300678,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","nickname":"搞怪者😘 😒 😏 👿","note":"","ucode":"40DFF5D3E3B24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38283,"discussion_content":"因为频繁申请内存很耗时间的缘故吧，每次新增数据就要申请内存，还不如一口气申请大的，然后复制过去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571755312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358406,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"江苏","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1664275482,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664275482","product_id":100032701,"comment_content":"老师，套接字不是用于进城通信的嘛，线程也能用？","like_count":0},{"had_liked":false,"id":352572,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1658766623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658766623","product_id":100032701,"comment_content":"再来看看 重温重温。感谢老师 这个教程 是我入门网络编程的领路人。我是做iOS开发的 因为一些原因转到网络这边 一开始一头懵逼 学习了老师的教程就清晰了很多。后面接触到的知识 老师的教程都能引申到 真的很赞。","like_count":0},{"had_liked":false,"id":346673,"user_name":"漠博嵩","can_delete":false,"product_type":"c1","uid":2660316,"ip_address":"","ucode":"33704880E9790F","user_header":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","comment_is_top":false,"comment_ctime":1653352875,"is_pvip":true,"replies":[{"id":"126586","content":"还真不是。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1653808019,"ip_address":"","comment_id":346673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653352875","product_id":100032701,"comment_content":"感觉就是仿照netty框架做的","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574034,"discussion_content":"还真不是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653808019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345093,"user_name":"菜鸡","can_delete":false,"product_type":"c1","uid":1683117,"ip_address":"","ucode":"A3102C3ECCA332","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLmWgscKlnjXiaBugNJ2ozMmZibAEKichZv7OfGwQX9voDicVy2qnKtlm5kWQAKZ414vFohR8FV5N9ZhA/132","comment_is_top":false,"comment_ctime":1652018324,"is_pvip":false,"replies":[{"id":"126189","content":"还好吧，channel_map中的元素没几个字节，比起复杂的压缩算法，这点实在是微不足道。而且，你也没办法预测后面的连接情况，准备好一个上限比较大的fd存储空间，其实是效率比较高的。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1652614214,"ip_address":"","comment_id":345093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652018324","product_id":100032701,"comment_content":"第二个问题有点疑问。channel_map中元素的空间大小是与fd的值正相关的，而不是跟当前在线的连接数量正相关，这样做是不是有点浪费内存？比如经历了很多次连接、断开之后，fd返回的值比较大，而此时只有几个未断开的连接，那么channel_map有必要申请那么大的内存空间嘛？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572130,"discussion_content":"还好吧，channel_map中的元素没几个字节，比起复杂的压缩算法，这点实在是微不足道。而且，你也没办法预测后面的连接情况，准备好一个上限比较大的fd存储空间，其实是效率比较高的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652614215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321134,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1636686388,"is_pvip":true,"replies":[{"id":"116709","content":"不会。因为唤醒是kernel干的，只不过是多了一路I&#47;O而已。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1636875080,"ip_address":"","comment_id":321134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636686388","product_id":100032701,"comment_content":"用sock对通知 唤醒会不会增加逻辑线程或主线程的系统调用次数 限制了吞吐量呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530226,"discussion_content":"不会。因为唤醒是kernel干的，只不过是多了一路I/O而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636875080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279144,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1613636119,"is_pvip":false,"replies":[{"id":"102008","content":"因为是C的代码，通篇都是C语言，不需要学习C++知识。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516770,"ip_address":"","comment_id":279144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613636119","product_id":100032701,"comment_content":"我看了下定义，channel_element就像是个链表节点，为什么不用C++来做这块呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515636,"discussion_content":"因为是C的代码，通篇都是C语言，不需要学习C++知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258927,"user_name":"YUAN","can_delete":false,"product_type":"c1","uid":2153838,"ip_address":"","ucode":"98EF68EEE21893","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/6e/8f6f79d2.jpg","comment_is_top":false,"comment_ctime":1604583755,"is_pvip":false,"replies":[{"id":"95515","content":"嗯，差不多的意思。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1606042291,"ip_address":"","comment_id":258927,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604583755","product_id":100032701,"comment_content":"老师请问这个channel就相当于libevent中的event结构体吧？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508790,"discussion_content":"嗯，差不多的意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606042291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250380,"user_name":"spark","can_delete":false,"product_type":"c1","uid":1264022,"ip_address":"","ucode":"D84C36D957ECCF","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/96/7523cdb6.jpg","comment_is_top":false,"comment_ctime":1601042194,"is_pvip":false,"replies":[{"id":"92054","content":"是的呀，因为每个线程对应自己的event_loop对象，而发起event_loop_handle_pending_channel操作的线程可能是不同的线程，所以使用的是线程级别的lock，也就是event_loop里面的lock。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601871155,"ip_address":"","comment_id":250380,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1601042194","product_id":100032701,"comment_content":"盛老师好: 为什么要在下面这个函数中lock和unlock? 不是每个线程都对应一个自己的event_loop吗?<br>这样的话event_loop就不是shared resource。<br>int event_loop_handle_pending_channel(struct event_loop *eventLoop) {<br>    &#47;&#47;get the lock<br>    pthread_mutex_lock(&amp;eventLoop-&gt;mutex);<br>    eventLoop-&gt;is_handle_pending = 1;<br><br>    struct channel_element *channelElement = eventLoop-&gt;pending_head;<br>    while (channelElement != NULL) {<br>        &#47;&#47;save into event_map<br>        struct channel *channel = channelElement-&gt;channel;<br>        int fd = channel-&gt;fd;<br>        if (channelElement-&gt;type == 1) {<br>            event_loop_handle_pending_add(eventLoop, fd, channel);<br>        } else if (channelElement-&gt;type == 2) {<br>            event_loop_handle_pending_remove(eventLoop, fd, channel);<br>        } else if (channelElement-&gt;type == 3) {<br>            event_loop_handle_pending_update(eventLoop, fd, channel);<br>        }<br>        channelElement = channelElement-&gt;next;<br>    }<br><br>    eventLoop-&gt;pending_head = eventLoop-&gt;pending_tail = NULL;<br>    eventLoop-&gt;is_handle_pending = 0;<br><br>    &#47;&#47;release the lock<br>    pthread_mutex_unlock(&amp;eventLoop-&gt;mutex);<br><br>    return 0;<br>}","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506196,"discussion_content":"是的呀，因为每个线程对应自己的event_loop对象，而发起event_loop_handle_pending_channel操作的线程可能是不同的线程，所以使用的是线程级别的lock，也就是event_loop里面的lock。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601871155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063923,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4rbCWDxib3FHibYBouTwZqZBH6h5IgvjibEiaBv4Ceekib9SYg0peBBlFGu8hDuGvwjKp6LNznvEAibYw/132","nickname":"DonaldTrumpppppppppp","note":"","ucode":"211B1A25C53172","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390535,"discussion_content":"因为主reactor线程接收到客户端连接后，会调用线程池中的某个线程，执行该函数。按我的理解，这个锁是为了防止主线程和线程池中的线程冲突","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629881256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236746,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1595515842,"is_pvip":false,"replies":[{"id":"87602","content":"是一个问题。不过，第一，跳变不是非常巨大，这个可以从实际的程序运行可以看到fd的增长，一个合理的解释是OS也是在&quot;智能&quot;的分配文件描述字；第二，即使跳变，一个channel地址也就是8个字节(64bit OS)，占用的内存也不是特别多。<br><br>好处fd到channel的查询，是非常非常快的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1595680251,"ip_address":"","comment_id":236746,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1595515842","product_id":100032701,"comment_content":"channel_map这里map-&gt;entries是一个数组，数组的下标是fd,数组的元素是channel的地址，如果新增的fd跳变很大的话比如从3变成了100，会不会浪费了很多的空间","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502187,"discussion_content":"是一个问题。不过，第一，跳变不是非常巨大，这个可以从实际的程序运行可以看到fd的增长，一个合理的解释是OS也是在&amp;quot;智能&amp;quot;的分配文件描述字；第二，即使跳变，一个channel地址也就是8个字节(64bit OS)，占用的内存也不是特别多。\n\n好处fd到channel的查询，是非常非常快的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595680251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586222,"discussion_content":"这个有点像哈希查找思想，用空间换时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662045787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213959,"user_name":"胤","can_delete":false,"product_type":"c1","uid":1158091,"ip_address":"","ucode":"0BFD0A021B05A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/cb/55eddaf1.jpg","comment_is_top":false,"comment_ctime":1588600369,"is_pvip":true,"replies":[{"id":"79831","content":"好问题。<br><br>按照道理说，返回值非0表示有错误信息，只是这里我没有返回而已。个人习惯哈，你可以改成无返回值。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1589099214,"ip_address":"","comment_id":213959,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588600369","product_id":100032701,"comment_content":"问个c语言的问题，比如event_loop_handle_pending_channel这个函数，返回值是int类型，但是除了函数最后是个return 0，其他地方没有错误处理，为什么要返回0？还是就是一种习惯？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493913,"discussion_content":"好问题。\n\n按照道理说，返回值非0表示有错误信息，只是这里我没有返回而已。个人习惯哈，你可以改成无返回值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589099214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165105,"user_name":"chs","can_delete":false,"product_type":"c1","uid":1618711,"ip_address":"","ucode":"BE4B6A19317400","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/17/19ea024f.jpg","comment_is_top":false,"comment_ctime":1577162440,"is_pvip":false,"replies":[{"id":"63891","content":"这个是通过下面的方式在头文件中声明：<br><br>extern const struct event_dispatcher poll_dispatcher;<br>extern const struct event_dispatcher epoll_dispatcher;<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577603766,"ip_address":"","comment_id":165105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577162440","product_id":100032701,"comment_content":"老师，您为了支持poll和epoll，抽象出了struct event_dispatcher结构体，然后在epoll_dispatcher.c 和poll_dispatcher.c中分别实现struct event_dispatcher中定义的接口。请问epoll_dispatcher.c中的 const struct event_dispatcher epoll_dispatcher变量 和poll_dispatcher.c中的const struct event_dispatcher poll_dispatcher变量怎样让其他文件知道其定义的。我自己写的提示上边两个变量未定义。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479028,"discussion_content":"这个是通过下面的方式在头文件中声明：\n\nextern const struct event_dispatcher poll_dispatcher;\nextern const struct event_dispatcher epoll_dispatcher;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577603766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143697,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1571757443,"is_pvip":false,"replies":[{"id":"55822","content":"channel里的fd是在有连接建立时创建好的，当然，也是被设置为非阻塞的，这里channle对象不需要关系fd的属性。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572058072,"ip_address":"","comment_id":143697,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571757443","product_id":100032701,"comment_content":"请问channel里的fd也需要设置为非阻塞吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471656,"discussion_content":"channel里的fd是在有连接建立时创建好的，当然，也是被设置为非阻塞的，这里channle对象不需要关系fd的属性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572058072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143276,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571659976,"is_pvip":false,"replies":[{"id":"55883","content":"放到统一答疑里了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572099118,"ip_address":"","comment_id":143276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571659976","product_id":100032701,"comment_content":"老师 你好 问你一个和课程沾点点边的关系的问题哈，虽然我晓得什么这样模式那样模式 但是还是不会设计 比如像老师为课程设计的框架 回调都是两层 为什么要这样设计我却不明白 有没有什么规范啥的可以指导一下 可能真的是没好好学过设计模式,既然现在都涉及到要自己动手一个服务器框架了  我也想解决设计这方面的问题，希望老师点播一下","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471462,"discussion_content":"放到统一答疑里了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572099118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143270,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571659124,"is_pvip":false,"replies":[{"id":"55884","content":"统一答疑中解释。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572099129,"ip_address":"","comment_id":143270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571659124","product_id":100032701,"comment_content":"而且新连接,创建的channel对象上的回调也应该是tcp_connection上的回调","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471460,"discussion_content":"统一答疑中解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572099129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143269,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571659052,"is_pvip":false,"replies":[{"id":"55885","content":"统一答疑中解释。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572099137,"ip_address":"","comment_id":143269,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571659052","product_id":100032701,"comment_content":"lib&#47;tcp_connection.c最终是在lib&#47;tcp_connection.c 第22行执行了应用层的readcallback函数执行 epoll-server-multithreads.c onMessage为什么要封装两次呢？ 封装一个tcp_connection是为了隐藏读取字节流的实现吗,主要是套接字层？ tcp_server层主要就是引用层的这样理解可以吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471459,"discussion_content":"统一答疑中解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572099137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143268,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571658805,"is_pvip":false,"replies":[{"id":"55886","content":"统一答疑中解释。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572099143,"ip_address":"","comment_id":143268,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571658805","product_id":100032701,"comment_content":"今天仔细研读了老师的代码突然发现有两层回调<br>1. epoll-server-multithreads.c里面写的有回调 并且赋给了tcp_server<br>2. tcp_connection.c 实现了 handle_read handle_write 等等事件的回调 为什么要封装两层回调呢 我设计模式没怎么学过 希望老师指点哈","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471458,"discussion_content":"统一答疑中解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572099143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143206,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571648499,"is_pvip":false,"replies":[{"id":"55844","content":"笔误，已修复。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572065110,"ip_address":"","comment_id":143206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571648499","product_id":100032701,"comment_content":"epollDispatcherData-&gt;events = calloc(MAXEVENTS, sizeof(struct acceptor));<br>这一行不太明白为什么要分配MAXEVENTS* sizeof( struct acceptor )这么多内存？我的关注点在sizeof( <br>struct acceptor ),为什么取它的大小？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471420,"discussion_content":"笔误，已修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572065110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143156,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1571640511,"is_pvip":false,"replies":[{"id":"55599","content":"是操作系统提供的能力就是这样，大家都这么发挥了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571846399,"ip_address":"","comment_id":143156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571640511","product_id":100032701,"comment_content":"老师的程序读了一遍，c版的netty，果然高手们的思路都是相通的","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471401,"discussion_content":"是操作系统提供的能力就是这样，大家都这么发挥了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571846399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143013,"user_name":"刘系","can_delete":false,"product_type":"c1","uid":1009725,"ip_address":"","ucode":"A772E5BCAE640E","user_header":"","comment_is_top":false,"comment_ctime":1571620054,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1571620054","product_id":100032701,"comment_content":"第二课后题：当描述字大于channel_map的容量时，map_make_space会被调用。在map初始化时，容量为0，往map里写描述字时先给容量为32，如果描述字仍然大于等于32将会使容量右移一位，也就是描述字容量增加两倍再与要写入的描述字进行比较，直至容量大于要写入的描述字。然后使用realloc进行空间开辟，保留原有空间，扩展新空间。将新空间内存置0。最后更新map","like_count":0,"discussions":[{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586223,"discussion_content":"只增不减，内存会越来越多被占用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662046057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009725,"avatar":"","nickname":"刘系","note":"","ucode":"A772E5BCAE640E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37474,"discussion_content":"应该是增加一倍，也就是乘以2。描述不准确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571622151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}