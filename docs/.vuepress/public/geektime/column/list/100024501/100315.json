{"id":100315,"title":"39 | 打通前端与原生的桥梁：JavaScriptCore 能干哪些事情？","content":"<p>你好，我是戴铭。</p><p>今天这篇文章是原生与前端共舞模块的第一篇，我来跟你聊聊前端和原生之间的桥梁 JavaScriptCore，看看它是什么、能做哪些事儿。</p><p>总结来说，JavaScriptCore 为原生编程语言 Objective-C、Swift 提供调用 JavaScript 程序的动态能力，还能为 JavaScript 提供原生能力来弥补前端所缺能力。</p><p>正是因为JavaScriptCore的这种桥梁作用，所以出现了很多使用 JavaScriptCore 开发 App 的框架 ，比如React Native、Weex、小程序、WebView Hybird等框架。</p><p>接下来，我们再回过头来看看，JavaScriptCore 的来头是啥，为什么这些框架不约而同地都要用 JavaScriptCore 引擎来作为前端和原生的桥梁呢？</p><p>要回答这个问题的话，你还需要<strong>了解JavaScriptCore 的背景</strong>。</p><p>JavaScriptCore，原本是 WebKit中用来解释执行 JavaScript 代码的核心引擎。解释执行 JavaScript 代码的引擎自 JavaScript 诞生起就有，不断演进，一直发展到现在，如今苹果公司有 JavaScriptCore 引擎、谷歌有 V8 引擎、Mozilla 有 SpiderMonkey。对于 iOS 开发者来说，你只要深入理解苹果公司的 JavaScriptCore 框架就可以了。</p><!-- [[[read_end]]] --><p>iOS7 之前，苹果公司没有开放 JavaScriptCore 引擎。如果你想使用 JavaScriptCore 的话，需要手动地从开源WebKit 中编译出来，其接口都是 C 语言，这对于iOS开发者来说非常不友好。</p><p>但是从iOS7开始，苹果公司开始将 JavaScriptCore 框架引入 iOS 系统，并将其作为系统级的框架提供给开发者使用。这时，接口使用 Objective-C 进行包装，这对于原生 Objective-C 开发者来说，体验上就非常友好了。</p><p>JavaScriptCore 框架的框架名是 JavaScriptCore.framework。由于苹果公司的系统已经内置了JavaScriptCore 框架，而且性能不逊色于 V8 和 SpiderMonkey 等其他引擎，所以前端开发 App 框架就都不约而同将 JavaScriptCore 框架作为自己和原生的桥梁。</p><p>接下来，我就和你详细分析一下JavaScriptCore框架的原理。</p><h2>JavaScriptCore 框架</h2><p>苹果官方对JavaScriptCore框架的说明，你可以点击<a href=\"https://developer.apple.com/documentation/javascriptcore\">这个链接</a>查看。从结构上看，JavaScriptCore 框架主要由 JSVirtualMachine 、JSContext、JSValue类组成。</p><p>JSVirturalMachine的作用，是为 JavaScript 代码的运行提供一个虚拟机环境。在同一时间内，JSVirtualMachine只能执行一个线程。如果想要多个线程执行任务，你可以创建多个 JSVirtualMachine。每个 JSVirtualMachine 都有自己的 GC（Garbage Collector，垃圾回收器），以便进行内存管理，所以多个 JSVirtualMachine 之间的对象无法传递。</p><p>JSContext 是 JavaScript 运行环境的上下文，负责原生和 JavaScript 的数据传递。</p><p>JSValue 是 JavaScript 的值对象，用来记录 JavaScript 的原始值，并提供进行原生值对象转换的接口方法。</p><p>JSVirtualMachine、JSContext、JSValue 之间的关系，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/00/24/00306bd8193cd606d6e62340cffcbb24.png?wh=888*1042\" alt=\"\"></p><p>可以看出，JSVirtualMachine 里包含了多个 JSContext， 同一个JSContext 中又可以有多个 JSValue。</p><p>JSVirtualMachine 、JSContext、JSValue 类提供的接口，能够让原生应用执行 JavaScript 代码，访问 JavaScript 变量，访问和执行 JavaScript 函数；也能够让 JavaScript 执行原生代码，使用原生输出的类。</p><p>那么，<strong>解释执行 JavaScript 代码的 JavaScriptCore 和原生应用是怎么交互的呢？</strong></p><p>要理解这个问题，我们先来看看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/31/c3/316d9ba836fd6fd14155e941e21b27c3.png?wh=2118*1628\" alt=\"\"></p><p>可以看到，每个 JavaScriptCore 中的 JSVirtualMachine 对应着一个原生线程，同一个 JSVirtualMachine 中可以使用 JSValue 与原生线程通信，遵循的是JSExport协议：原生线程可以将类方法和属性提供给 JavaScriptCore 使用，JavaScriptCore 可以将JSValue提供给原生线程使用。</p><p>JavaScriptCore 和原生应用要想交互，首先要有 JSContext。JSContext 直接使用 init 初始化，会默认使用系统创建的 JSVirtualMachine。如果 JSContext 要自己指定使用哪个 JSVirtualMachine，可以使用 initWithVirtualMachine 方法来指定，代码如下：</p><pre><code>// 创建 JSVirtualMachine 对象 jsvm\nJSVirtualMachine *jsvm = [[JSVirtualMachine alloc] init];\n// 使用 jsvm 的 JSContext 对象 ct\nJSContext *ct = [[JSContext alloc] initWithVirtualMachine:jsvm];\n</code></pre><p>如上面代码所示，首先初始化一个 JSVirtualMachine 对象 jsvm，再初始化一个使用 jsvm 的 JSContext 对象 ct。</p><p>下面我再举一个<strong>通过JavaScriptCore在原生代码中调用JavaScript变量的例子</strong>。</p><p>这里有一段 JavaScript 代码，我定义了一个 JavaScript 变量 i ，然后我们一起看看如何通过 JavaScriptCore 在原生中调用变量i。代码如下：</p><pre><code>JSContext *context  = [[JSContext alloc] init];\n// 解析执行 JavaScript 脚本\n[context evaluateScript:@&quot;var i = 4 + 8&quot;];\n// 转换 i 变量为原生对象\nNSNumber *number = [context[@&quot;i&quot;] toNumber];\nNSLog(@&quot;var i is %@, number is %@&quot;,context[@&quot;i&quot;], number);\n</code></pre><p>上面代码中，JSContext 会调用 evaluateScript 方法，返回 JSValue 对象。</p><p>JSValue 类提供了一组将 JavaScript 对象值类型转成原生类型的接口，你可以点击<a href=\"https://developer.apple.com/documentation/javascriptcore/jsvalue\">这个链接</a>，查看官方文档中对 JSValue 接口的详细说明。</p><p>其中，有3个转换类型的接口比较常用，我来和你稍作展开：</p><ul>\n<li>在这个示例中，我们使用的是 toNumber 方法，来将 JavaScript 值转换成 NSNumber 对象。</li>\n<li>如果 JavaScript 代码中的变量是数组对象，可以使用 toArray方法将其转换成 NSArray对象。</li>\n<li>如果变量是 Object类型，可以使用 toDictionary方法将其转换成 NSDictionary。</li>\n</ul><p>如果你想在原生代码中使用JavaScript 中的函数对象，可以通过 callWithArguments 方法传入参数，然后实现它的调用。使用示例如下：</p><pre><code>// 解析执行 JavaScript 脚本\n[context evaluateScript:@&quot;function addition(x, y) { return x + y}&quot;];\n// 获得 addition 函数\nJSValue *addition = context[@&quot;addition&quot;];\n// 传入参数执行 addition 函数\nJSValue *resultValue = [addition callWithArguments:@[@(4), @(8)]];\n// 将 addition 函数执行的结果转成原生 NSNumber 来使用。\nNSLog(@&quot;function is %@; reslutValue is %@&quot;,addition, [resultValue toNumber]);\n</code></pre><p>如上面代码所示：首先，JSContext 通过 evaluateScript 方法获取 JavaScript 代码中 addition 函数，并保存为一个 JSValue 对象；然后，通过 JSValue 的 callWithArguments 方法，传入 addition 函数所需参数 x、y 以执行函数。</p><p>而如果要在原生代码中调用JavaScript 全局函数，你需要使用 JSValue 的 invokeMethod:withArguments 方法。比如，<a href=\"https://github.com/apache/incubator-weex/\">Weex</a>框架就是使用这个方法，来获取 JavaScript 函数的。</p><p>相关代码路径是 incubator-weex/ios/sdk/WeexSDK/Sources/Bridge/WXJSCoreBridge.mm ，核心代码如下：</p><pre><code>- (JSValue *)callJSMethod:(NSString *)method args:(NSArray *)args {\n    WXLogDebug(@&quot;Calling JS... method:%@, args:%@&quot;, method, args);\n    return [[_jsContext globalObject] invokeMethod:method withArguments:args];\n}\n</code></pre><p>可以看到，JSContext 中有一个 globalObject 属性。globalObject 是 JSValue 类型，里面记录了 JSContext 的全局对象，使用 globalObject 执行的 JavaScript 函数能够使用全局 JavaScript 对象。因此，通过 globalObject 执行 invokeMethod:withArguments 方法就能够去使用全局 JavaScript 对象了。</p><p>通过上面的分析，我们可以知道，通过 evaluateScript 方法，就能够在原生代码中执行 JavaScript 脚本，并使用 JavaScript 的值对象和函数对象。那么，<strong>JavaScript又是如何调用原生代码呢？</strong></p><p>我先给出一段代码示例，你可以思考一下是如何实现的：</p><pre><code>// 在 JSContext 中使用原生 Block 设置一个减法 subtraction 函数\ncontext[@&quot;subtraction&quot;] = ^(int x, int y) {\n    return x - y;\n};\n\n// 在同一个 JSContext 里用 JavaScript 代码来调用原生 subtraction 函数\nJSValue *subValue = [context evaluateScript:@&quot;subtraction(4,8);&quot;];\nNSLog(@&quot;substraction(4,8) is %@&quot;,[subValue toNumber]);\n</code></pre><p>可以看出，JavaScript 调用原生代码的方式，就是：</p><ul>\n<li>首先，在 JSContext 中使用原生 Block 设置一个减法函数subtraction；</li>\n<li>然后，在同一个 JSContext 里用 JavaScript 代码来调用原生 subtraction 函数。</li>\n</ul><p>除了 Block外，我们还可以通过 JSExport 协议来实现在JavaScript中调用原生代码，也就是原生代码中让遵循JSExport协议的类，能够供 JavaScript 使用。Weex 框架里，就有个遵循了 JSExport 协议的WXPolyfillSet 类，使得JavaScript 也能够使用原生代码中的 NSMutableSet 类型。</p><p>WXPolyfillSet 的头文件代码路径是 incubator-weex/ios/sdk/WeexSDK/Sources/Bridge/WXPolyfillSet.h ，内容如下：</p><pre><code>@protocol WXPolyfillSetJSExports &lt;JSExport&gt;\n\n// JavaScript 可以使用的方法\n+ (instancetype)create;\n- (BOOL)has:(id)value;\n- (NSUInteger)size;\n- (void)add:(id)value;\n- (BOOL)delete:(id)value;\n- (void)clear;\n\n@end\n\n// WXPolyfillSet 遵循 JSExport 协议\n@interface WXPolyfillSet : NSObject &lt;WXPolyfillSetJSExports&gt;\n\n@end\n</code></pre><p>可以看到，WXPolyfillSet 通过 JSExport 协议，提供了一系列方法给 JavaScript 使用。</p><p>现在我们已经理解了原生和 JavaScript 的互通方式，知道了它们的互通依赖于虚拟机环境JSVirtualMachine。接下来，我们需要对JavaScriptCore引擎进行更深入地理解，才能更好地用好这个框架。比如，JavaScriptCore 是怎么通过直接使用缓存 JIT 编译的机器码来提高性能的，又是怎么对部分函数进行针对性测试编译优化的。</p><p>JSVirtualMachine 是一个抽象的 JavaScript 虚拟机，是提供给开发者进行开发的，而其核心的 <strong>JavaScriptCore 引擎则是一个真实的虚拟机，包含了虚拟机都有的解释器和运行时部分</strong>。其中，解释器主要用来将高级的脚本语言编译成字节码，运行时主要用来管理运行时的内存空间。当内存出现问题，需要调试内存问题时，你可以使用 JavaScriptCore 里的 Web Inspector，或者通过手动触发 Full GC 的方式来排查内存问题。</p><p>接下来，我跟你说下 JavaScriptCore 引擎内部的组成。</p><h2>JavaScriptCore 引擎的组成</h2><p>JavaScriptCore内部是由 Parser、Interpreter、Compiler、GC 等部分组成，其中 Compiler 负责把字节码翻译成机器码，并进行优化。你可以点击<a href=\"https://trac.webkit.org/wiki/JavaScriptCore\">这个链接</a>，来查看WebKit 官方对JavaScriptCore 引擎的介绍。</p><p>JavaScriptCore 解释执行 JavaScript 代码的流程，可以分为两步。</p><p>第一步，由 Parser 进行词法分析、语法分析，生成字节码。</p><p>第二步，由 Interpreter 进行解释执行，解释执行的过程是先由 LLInt（Low Level Interpreter）来执行 Parser 生成的字节码，JavaScriptCore 会对运行频次高的函数或者循环进行优化。优化器有 Baseline JIT、DFG JIT、FTL JIT。对于多优化层级切换， JavaScriptCore 使用 OSR（On Stack Replacement）来管理。</p><p>如果你想更深入地理解JavaScriptCore 引擎的内容，可以参考我以前的一篇博文“<a href=\"https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/\">深入剖析 JavaScriptCore</a>”。</p><h2>小结</h2><p>今天这篇文章，我主要和你分享的是 iOS 中 JavaScriptCore 能干的事情。</p><p>总结来说，JavaScriptCore 提供了前端与原生相互调用的接口，接口层上主要用的是 JSContext 和 JSValue 这两个类，通过 JSValue 的 evaluateScript 方法、Block 赋值 context、JSExport 协议导出来达到互通的效果。</p><p>前端的优势在于快速编写UI，原生的优势在于对平台特性的天然支持，现在我们有了能够打通前端和原生的武器，就可以充分利用二者的优势，互为补充地去做更多、更有意思的事儿。而你，也可以充分发挥自己的想象力，去实现更有意思的App。</p><h2>课后作业</h2><p>如果原生方法没有遵循 JSExport 协议，也没有使用 Block 方式设置给 JSContext，那还有没有其他办法可以在JavaScript中调用原生代码呢？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":102446,"user_name":"Ansion","can_delete":false,"product_type":"c1","uid":1002049,"ip_address":"","ucode":"FF9AFE77E98BC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/41/58757849.jpg","comment_is_top":false,"comment_ctime":1560222135,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"78869633463","product_id":100024501,"comment_content":"课后作业：<br>可以借助JSContext与JSValue的类型转换和OC的Runtime消息转发机制实现动态调用，巧妙避开Export协议；<br>可以参考JSPatch的实现原理","like_count":19,"discussions":[{"author":{"id":1471806,"avatar":"https://static001.geekbang.org/account/avatar/00/16/75/3e/71b16443.jpg","nickname":"Struggle","note":"","ucode":"C769D8FFD9C1B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290798,"discussion_content":"JSPatch不是使用了JSContext的block来让javascript调用oc的吗，然后oc才用runtime去处理的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594607583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010399,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLMGCcYZHdAJg7CpoO4kF7srVDkyO2yXRMia9ck74nMbGwjzXYicVfAuYDqz6oUeOswm4Z78CWkPVQ/132","nickname":"摇摆迈克","note":"","ucode":"721F2046C8D6BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1707,"discussion_content":"总的消息分发的入口还是要用JSExport或者Block方式来实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562833827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102552,"user_name":"哈","can_delete":false,"product_type":"c1","uid":1453904,"ip_address":"","ucode":"3F46ADFFBC94CE","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/50/b46a9b6a.jpg","comment_is_top":false,"comment_ctime":1560250046,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31625021118","product_id":100024501,"comment_content":"WKWebView用不到JavaScripCore吧…毕竟取不到JSContext…","like_count":7,"discussions":[{"author":{"id":1010399,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLMGCcYZHdAJg7CpoO4kF7srVDkyO2yXRMia9ck74nMbGwjzXYicVfAuYDqz6oUeOswm4Z78CWkPVQ/132","nickname":"摇摆迈克","note":"","ucode":"721F2046C8D6BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1708,"discussion_content":"WKWebView用的还是JSCore啊，跟UIWebView比较多了JIT","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562833899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102387,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1461532,"ip_address":"","ucode":"8BF4D9E4C11EF7","user_header":"https://static001.geekbang.org/account/avatar/00/16/4d/1c/2512341d.jpg","comment_is_top":false,"comment_ctime":1560214940,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23035051420","product_id":100024501,"comment_content":"这里讲的方式还是基于uiwebview hybrid开发，wkwebview 还是很大的不同吧，现在用webviewjavascriptbrigde多一些。","like_count":5,"discussions":[{"author":{"id":2120213,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dhGrw9HgLURfHhoYSyqIbWfp3fBM82Hun2jfy4BBqtI1icsSiadMYbBjic4s0MR8jatGZfbkvzENvfCFY9IPk6hzQ/132","nickname":"Apple_b22154","note":"","ucode":"F39073E94E4A1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301108,"discussion_content":"JSBridge 准确的说应该是 binding. 推荐这一篇文章。\nhttp://www.awhisper.net/2019/03/03/native-dynamic/","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598409307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144026,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1571827361,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14456729249","product_id":100024501,"comment_content":"老师，你在文中说“JSContext 会调用 evaluateScript 方法，返回 JSValue 对象。”，应该是生成JSValue 对象，而不是返回吧？","like_count":3,"discussions":[{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249862,"discussion_content":"Returns  The last value generated by the script. Note that a script can result in the JavaScript value undefined.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587968429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249860,"discussion_content":"先生成，在返回哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587968319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103573,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1560474012,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14445375900","product_id":100024501,"comment_content":"戴老师你好，请问后面会讲解通过WKWebview来构建hybrid app吗？目前正在用vue.js写前端，用WKWebview作web容器，不知道业界是怎么打造自己的hybrid app的，还请给些指导，谢谢。","like_count":3,"discussions":[{"author":{"id":1478519,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8f/77/c3a080cd.jpg","nickname":"白欣","note":"","ucode":"7754425C270C59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15270,"discussion_content":"有没有好的解决方案了啊 同学 我也想这么搞一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568813487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1456392,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","nickname":"淡","note":"","ucode":"6856CA319DE2F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1478519,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8f/77/c3a080cd.jpg","nickname":"白欣","note":"","ucode":"7754425C270C59","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174522,"discussion_content":"我是通过写WKWebviewBridge+Vue来做Hybrid app的，目前已实现，感觉还行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581924690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":15270,"ip_address":""},"score":174522,"extra":""}]}]},{"had_liked":false,"id":102482,"user_name":"Xqqq0","can_delete":false,"product_type":"c1","uid":1335462,"ip_address":"","ucode":"38C05366ACB23B","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a6/3614094e.jpg","comment_is_top":false,"comment_ctime":1560233490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14445135378","product_id":100024501,"comment_content":"不知道大神会不会讲NSURLProtocol的实战，希望会🙏🙏🙏","like_count":3},{"had_liked":false,"id":173131,"user_name":"jun","can_delete":false,"product_type":"c1","uid":1799617,"ip_address":"","ucode":"73294487897025","user_header":"https://static001.geekbang.org/account/avatar/00/1b/75/c1/3d350d18.jpg","comment_is_top":false,"comment_ctime":1579430892,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10169365484","product_id":100024501,"comment_content":"“JavaScriptCore 框架的框架名是 JavaScriptCore.framework。由于苹果公司的系统已经内置了 JavaScriptCore 框架，而且性能不逊色于 V8 和 SpiderMonkey 等其他引擎，所以前端开发 App 框架就都不约而同将 JavaScriptCore 框架作为自己和原生的桥梁。”<br>这里会误导人吧，你确定App使用其他JS引擎能通过苹果审核？","like_count":2,"discussions":[{"author":{"id":1457016,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3b/78/027117d9.jpg","nickname":"꧁༺苏格༻꧂","note":"","ucode":"5ECC1640A82551","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305754,"discussion_content":"这就是 Chrome for iOS 为何无法使用自主研发的 Chromium WebKit 和 V8 的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600076182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105789,"user_name":"学无止境","can_delete":false,"product_type":"c1","uid":1350473,"ip_address":"","ucode":"FC13803A5A3E9E","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/49/33b2da58.jpg","comment_is_top":false,"comment_ctime":1561084205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856051501","product_id":100024501,"comment_content":"WebViewJavascriptBridge","like_count":1},{"had_liked":false,"id":342103,"user_name":"小千","can_delete":false,"product_type":"c1","uid":1286065,"ip_address":"","ucode":"8A1274AD7B87F0","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/b1/ae61b184.jpg","comment_is_top":false,"comment_ctime":1650015051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650015051","product_id":100024501,"comment_content":"我们利用WKUIDelegate，自己处理H5调用的Prompt弹框事件，通过和前端约定好的参数格式，来实现js调用原生。并且支持同步和异步返回js结果。","like_count":1},{"had_liked":false,"id":159097,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1456533,"ip_address":"","ucode":"812208DE6C6A7B","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/95/c442a6cc.jpg","comment_is_top":false,"comment_ctime":1575537299,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575537299","product_id":100024501,"comment_content":"您好戴老师，一直都在听您的课程，现在我很迷茫，一直在做ios原生开发，想学新东西但是不知道该学习什么，烦请戴老师看到能给个指引，感激不尽老师","like_count":0,"discussions":[{"author":{"id":1234311,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/87/7b6b7a90.jpg","nickname":"bluce","note":"","ucode":"5BBD82416509F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362166,"discussion_content":"自己的路自己走，你的人生迷茫多看书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616860044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/77/70/466368e1.jpg","nickname":"杰森莫玛","note":"","ucode":"A29AEC27270657","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273528,"discussion_content":"根据工作需要及自己的兴趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590467399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144025,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1571827219,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1571827219","product_id":100024501,"comment_content":"老师，你在文中说“原生线程可以将类方法和属性提供给 JavaScriptCore 使用，JavaScriptCore 可以将 JSValue 提供给原生线程使用。”，为什么可以将类方法提供给 JavaScriptCore 使用？对象方法不行么？","like_count":0,"discussions":[{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532401,"discussion_content":"原文写的有歧义","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637593554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249866,"discussion_content":"你是不是理解错了？老师说的是类的方法和属性。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587968617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143788,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1571792213,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571792213","product_id":100024501,"comment_content":"老师，您在文中多次提到了“字节码”，它具体是个什么东西呀？","like_count":0,"discussions":[{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249868,"discussion_content":"与CPU架构无关的二进制吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587968662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122710,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1565495917,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1565495917","product_id":100024501,"comment_content":"老师，你说“前端的优势在于快速编写 UI，原生的优势在于对平台特性的天然支持”，这有点抽象，有没有充分结合这两者优势的案例参考一下。谢谢！","like_count":0,"discussions":[{"author":{"id":1079152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/77/70/466368e1.jpg","nickname":"杰森莫玛","note":"","ucode":"A29AEC27270657","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273532,"discussion_content":"我觉得意思是跨平台把，一套代码运行在多端上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590467833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102374,"user_name":"我系哆啦","can_delete":false,"product_type":"c1","uid":1258151,"ip_address":"","ucode":"109A96943F1DDA","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/a7/3f3e05fa.jpg","comment_is_top":false,"comment_ctime":1560214246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560214246","product_id":100024501,"comment_content":"沙发？","like_count":0}]}