{"id":74296,"title":"数学专栏课外加餐（一） | 我们为什么需要反码和补码？","content":"<p>你好，我是黄申。欢迎来到第一次课外加餐时间。</p><p>专栏已经更新了几讲，看到这么多人在留言区写下自己的疑惑和观点，我非常开心。很多同学在留言里提出了很多非常好的问题，所以我决定每隔一段时间，对留言里的疑问、有代表性的问题做个集中的解答，也是对我们主线内容做一个补充，希望对你有帮助。</p><h2>什么是符号位？为什么要有符号位？</h2><p>在<a href=\"https://time.geekbang.org/column/article/71840\">第1讲</a>里，我介绍了十进制数转二进制数。这里面很多人对逻辑右移和算术右移中提到的符号位和补码有疑惑。这里面涉及了几个重要的概念，包括符号位、溢出、原码、反码和补码。我详细讲一下这几个点的来龙去脉。</p><p>首先我们来看，<strong>什么是符号位，为什么要有符号位</strong>？用一句话来概括就是，<strong>符号位是有符号二进制数中的最高位，我们需要它来表示负数。</strong></p><p>在实际的硬件系统中，计算机CPU的运算器只实现了加法器，而没有实现减法器。那么计算机如何做减法呢？我们可以通过加上一个负数来达到这个目的。比如，3-2可以看作3+(-2)。因此，负数的表示对于计算机中的二进制减法至关重要。</p><p>那么，接下来的问题就是，<strong>如何让计算机理解哪些是正数，哪些是负数呢</strong>？为此，人们把二进制数分为有符号数（signed）和无符号数（unsigned）。</p><p>如果是有符号数，那么最高位就是符号位。当符号位为0时，表示该数值为正数；当符号位为1时，表示该数值为负数。例如一个8位的有符号位二进制数10100010，最高位是1，这就表示它是一个负数。</p><!-- [[[read_end]]] --><p>如果是无符号数，那么最高位就不是符号位，而是二进制数字的一部分，例如一个8位的无符号位二进制数10100010，我们可以通过第1讲讲过的内容，换算出它所对应的十进制数是162。由于没有表示负数的符号位，所有无符号位的二进制都代表正数。</p><p>有些编程语言，比如Java，它所有和数字相关的数据类型都是有符号位的；而有些编程语言，比如C语言，它有诸如unsigned int这种无符号位的数据类型。</p><p>下面我们来看，<strong>什么是溢出？</strong></p><p>在数学的理论中，数字可以有无穷大，也有无穷小。可是，现实中的计算机系统，总有一个物理上的极限（比如说晶体管的大小和数量），因此不可能表示无穷大或者无穷小的数字。对计算机而言，无论是何种数据类型，都有一个上限和下限。</p><p>在Java中，int型是32位，它的最大值也就是上限是2^31-1（最高位是符号位，所以是2的31次方而不是32次方），最小值也就是下限是-2^31。而long型是64位，它的最大值，也就是上限是2^63-1；最小值，也就是下限是-2^63。</p><p>对于n位的数字类型，符号位是1，后面n-1位全是0，我们把这种情形表示为-2^(n-1) ，而不是2^(n-1)。一旦某个数字超过了这些限定，就会发生溢出。如果超出上限，就叫<strong>上溢出</strong>（overflow）。如果超出了下限，就叫<strong>下溢出</strong>（underflow）。</p><p>那么<strong>溢出之后会发生什么呢？</strong>我以上溢出为例来给你解释。</p><p>n位数字的最大的正值，其符号位为0，剩下的n-1位都为1，再增大一个就变为了符号位为1，剩下的n-1位都为0。而符号位是1，后面n-1位全是0，我们已经说过这表示-2^(n-1)。</p><p><img src=\"https://static001.geekbang.org/resource/image/10/36/10974fab2acf1ebd3cd3938387b65c36.jpg?wh=1142*500\" alt=\"\"></p><p>那么就是说，上溢出之后，又从下限开始，最大的数值加1，就变成了最小的数值，周而复始，这不就是余数和取模的概念吗？下面这个图可以帮助你理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/57/71/57e275c509cb477588b8c19b63df0b71.jpg?wh=1142*597\" alt=\"\"></p><p>其中右半部分的虚线表示已经溢出的区间，而为了方便你理解，我将溢出后所对应的数字也标在了虚线的区间里。由此可以看到，所以说，<strong>计算机数据的溢出，就相当于取模。</strong>而用于取模的除数就是数据类型的上限减去下限的值，再加上1，也就是(2^(n-1)-1)-(-2^(n-1))+1=2x2^(n-1)-1+1=2^n-1+1。</p><p>你可能会好奇，这个除数为什么不直接写成2^n呢？这是因为2^n已经是n+1位了，已经超出了n位所能表示的范围。</p><h2>二进制的原码、反码及补码</h2><p>理解了符号位和溢出，我接下来说说，什么是二进制的原码、反码和补码，以及我们为什么需要它们。</p><p><strong>原码</strong>就是我们看到的二进制的原始表示。对于有符号的二进制来说，原码的最高位是符号位，而其余的位用来表示该数字绝对值的二进制。所以+2的原码是000…010，-2的的原码是100.…010。</p><p>那么我们是不是可以直接使用负数的原码来进行减法计算呢？答案是否定的。我还是以3+(-2)为例。</p><p>假设我们使用Java中的32位整型来表示2，它的二进制是000…010。最低的两位是10，前面的高位都是0。如果我们使用-2的原码，也就是100…010，然后我们把3的二进制原码000…011和-2的二进制原码100…010相加，会得到100…0101。具体计算你可以看我画的这张图。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/6b/267986137720c8a14e45fa3bb46f736b.jpg?wh=1142*388\" alt=\"\"></p><p>二进制编码上的加减法和十进制类似，只不过，在加法中，十进制是满10才进一位，二进制加法中只要满2就进位；同样，在减法中，二进制借位后相当于2而不是10。</p><p>相加后的结果是二进制100…0101，它的最高位是1，表示负数，而最低的3位是101，表示5，所以结果就是-5的原码了，而3+(-2)应该等于1，两者不符。</p><p>如果负数的原码并不适用于减法操作，那该怎么办呢？这个问题的解答还要依赖计算机的溢出机制。</p><p>我刚刚介绍了溢出以及取模的特性，我们可以充分利用这一点，对计算机里的减法进行变换。假设有i-j，其中j为正数。如果i-j加上取模的除数，那么会形成溢出，并正好能够获得我们想要的i-j的运算结果。如果我说的还是不太好理解，你可以参考下面这张图。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/4f/d3788c6ecac1f8d8eee9552c7452ca4f.jpg?wh=1142*704\" alt=\"\"></p><p>我们把这个过程用表达式写出来就是i-j=(i-j)+(2^n-1+1)=i+(2^n-1-j+1)。</p><p>其中2^n-1的二进制码在不考虑符号位的情况下是n-1位的1，那么2^n-1-2的结果就是下面这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/0e/413470413ff2fe1ce02fa51f07884c0e.jpg?wh=1142*492\" alt=\"\"></p><p>从结果可以观察出来，所谓2^n-1-j相当于对正数j的二进制原码，除了符号位之外按位取反（0变1，1变0）。由于负数-j和正数j的原码，除了符号位之外都是相同的，所以，2^n-1-j也相当于对负数-j的二进制原码，除了符号位之外按位取反。我们把2^n-1-j所对应的编码称为负数-j的反码。所以，-2的反码就是1111…1101。</p><p>有了反码的定义，那么就可以得出i-j=i+(2^n-1-j+1)=i的原码+(-j的反码)+1。</p><p>如果我们把-j的反码加上1定义为-j的补码，就可以得到i-j=i的原码+(-j的补码)。</p><p>由于正数的加法无需负数的加法这样的变换，因此正数的原码、反码和补码三者都是一样的。最终，我们可以得到i-j=i的补码+(-j的补码)。</p><p>换句话说，计算机可以通过补码，正确地运算二进制减法。我们再来用3+(-2)来验证一下。正数3的补码仍然是0000…0011，-2的补码是1111…1110，两者相加，最后得到了正确的结果1的二进制。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/1f/3f4133ef63fd467bd389f58820c72d1f.jpg?wh=1142*446\" alt=\"\"></p><p>可见，溢出本来是计算机数据类型的一种局限性，但在负数的加法上，它倒是可以帮我们大忙。</p><p>最后，给你留一道思考题吧。理解了负数的原码、反码和补码之后，你能算算看，8位的有符号位二进制数10100010，对应的是哪个十进制数吗？</p><p>好了，关于二进制的补充内容就到这里了。<span class=\"orange\">欢迎你继续留言给我。你也可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p>","comments":[{"had_liked":false,"id":89931,"user_name":"奔跑的蜗牛","can_delete":false,"product_type":"c1","uid":1384698,"ip_address":"","ucode":"C5277C80B423A0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6Nic6V6iawbbIF1RRbRlwNmC0Cmt3LlQRAiaiayCibpplSDPXticVyOp97CEypEuQm2Iib7ZYCjrrlIgWQ/132","comment_is_top":true,"comment_ctime":1556334416,"is_pvip":false,"replies":[{"id":"32344","content":"我分别来回答一下<br>疑问1：这个还是要回到计算机只有累加器、没有累减器的本质。因为只有累加器，那么我们如何才能实现减法呢？人们巧妙的利用了计算机的数值是有范围的（无法表示无穷大），从而通过加法来实现减法。核心思想就是通过加上一个取模的除数，这样(-j)+取模的除数正好形成了溢出，达到了减法的效果<br><br>疑问2：我们只考虑(n-1)位的1，不考虑第一位<br><br>疑问3：这取决于数据是有符号还是无符号的，如果是无符号的数据类型就不存在这个问题。如果是有符号的数据类型，非符号位可能溢出到符号位，这也是为什么对于有符号的数据类型，过大的数据反而会变成负数。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1556471992,"ip_address":"","comment_id":89931,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720555910001e+18","product_id":100021201,"comment_content":"疑问1:为什么i-j得加上取模的除数？<br>疑问2:2^n-1就是32位1，这个地方就又没有符号位之说了？<br>疑问3:非符号位计算溢出会进到符号位嘛？<br>麻烦老师帮忙解答下","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448323,"discussion_content":"我分别来回答一下\n疑问1：这个还是要回到计算机只有累加器、没有累减器的本质。因为只有累加器，那么我们如何才能实现减法呢？人们巧妙的利用了计算机的数值是有范围的（无法表示无穷大），从而通过加法来实现减法。核心思想就是通过加上一个取模的除数，这样(-j)+取模的除数正好形成了溢出，达到了减法的效果\n\n疑问2：我们只考虑(n-1)位的1，不考虑第一位\n\n疑问3：这取决于数据是有符号还是无符号的，如果是无符号的数据类型就不存在这个问题。如果是有符号的数据类型，非符号位可能溢出到符号位，这也是为什么对于有符号的数据类型，过大的数据反而会变成负数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556471992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56142,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1546396872,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"362323649736","product_id":100021201,"comment_content":"为什么负数的补码等于反码加一<br>1，基本概念（看看了解一下就好）<br><br>计算机通过将最高位设置为符号位来表示正负数：<br>符号位为1时，代表这个数为负数；符号位为0时，代表这个数为正数。<br><br>为了方便理解，本文中的例子全部用4位二进制数举例<br><br>原码：除符号位外的其他位，保存该二进制数的绝对值。<br>例如 1：0001   -1：1001<br><br>反码：正数的反码等于原码；<br>           负数的反码就是其原码除符号位外，按位取反。<br>例如 1：0001   -1: 1110<br><br>补码：正数的补码等于其原码<br>            负数的的补码等于反码加一<br>例如 1：1001    -1：1111<br><br>2，原码、补码<br>原码、反码、补码都可以通过符号位非常方便的表示正负数，但是在进行加法计算时，原码和反码都存在这样或那样的问题：<br><br>注: 计算机cpu的运算器只实现了加法器，而没有实现减法器，计算机是通过加上一个负数来做减法的<br><br>原码：<br><br>1 + 1 = 0001 + 0001 = 0010 = 2 <br>1 + -1 = 0001 + 1001 = 1010 = -2<br><br>从上面的计算可以看出，原码无法通过加上一个负数来实现减法<br><br>反码<br><br>1 + -1 = 0001 + 1110 = 1111 = -0<br>1 + -2 = 0001 + 1010 = 1011 = -4<br><br>从上面的计算可以看出，反码也无法实现加上一个负数来实现减法<br><br>原码和反码都不能解决的事情，只有通过寻找一种可以完美支持件“减法“的二进制数的表示方法来解决！<br><br>3，补码<br>一个4位的二进制数能表示的数是有限的，从 0000 ~ 1111 ，0000表示0，1111表示 - 1，最大值7（0111），最小值-8（1000）。<br><br>看下面这组计算：<br><br><br>0000 + 0001 =  0 + 1 = 0001 = 1<br>0001 + 0001 = 1 + 1 = 0010 = 2<br>0010 + 0001 = 2 + 1 = 0011 = 3<br>...<br>0111 + 0001 = 7 + 1 = 1000 = -8  <br>1000 + 0001 = -8 + 1 = 1001 = -7<br>1001 + 0001 = -7 + 1 = 1010 = -6<br>...<br>1111 + 0001 = -1 + 1 = 0000 = 0<br>0000 + 0001 =  0 + 1 = 0001 = 1<br><br><br>0000 每次加上 0001 ；当最大值7 + 1时，正溢出，结果为最小值-8；最小值-8加上8后，又变成了0000，就像钟表一样，循环往复。<br><br>比如说现在有一个数字2，我们想让它变成0，怎么办？<br>有两种方法:<br>1. 减去 2 个 1  即：0010 - 0010 = 0000<br>2. 加上  14 个 1 即：0010 + 1110 = 0000<br><br>我们可以总结出，当一个四位的二进制数abcd 减去 另一个四位的二进制数 efgh ： abcd - efgh = abcd + (1111 + 1 - efgh) 。<br><br>efgh 和 (1111 + 1 - efgh) 对模 （1111 + 1）同余。<br><br>如果不太理解，就可以想象一个钟表的时针停在10点的位置，如果想让时针停在8点的位置，可以逆时针的旋转2个刻度，也可以顺时针的旋转10个刻度。<br><br>通过公式abcd - efgh = abcd + (1111 + 1 - efgh) ，我们可以得出，如果计算机使用（1111 + 1 -efgh）来表示 -(efgh) ，就可以解决减法的问题。这就是我们补码的原理。<br><br>由于1111 - efgh 等于 efgh 的反码 ，所以 efgh 的补码等于 efgh的反码加上1。<br><br>","like_count":84,"discussions":[{"author":{"id":2028947,"avatar":"","nickname":"Geek5350","note":"","ucode":"6EB4553707C357","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307939,"discussion_content":"比作者的好懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600788775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346998,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8d/b6/55ba741a.jpg","nickname":"wiliam","note":"","ucode":"FF15363E72887A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350481,"discussion_content":"看明白了，感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613892000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53389,"user_name":"老板来几袋面粉","can_delete":false,"product_type":"c1","uid":1321548,"ip_address":"","ucode":"77C06732723F62","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/4c/823dc4d3.jpg","comment_is_top":false,"comment_ctime":1545637007,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"233473870991","product_id":100021201,"comment_content":"好复杂，开始慌了","like_count":54,"discussions":[{"author":{"id":1349519,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/8f/c091d4f3.jpg","nickname":"john","note":"","ucode":"CE4991BEF991BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189,"discussion_content":"其实画个圈，物极必反，最大值最小值相邻，就明白了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561262863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1349519,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/8f/c091d4f3.jpg","nickname":"john","note":"","ucode":"CE4991BEF991BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65520,"discussion_content":"太极","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575009170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":189,"ip_address":""},"score":65520,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65518,"discussion_content":"看了01 | 二进制就开始慌了，看了这个更慌了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575009090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53479,"user_name":"梓航(﹏)","can_delete":false,"product_type":"c1","uid":1027773,"ip_address":"","ucode":"8ECA3C994D697C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/bd/d12f8907.jpg","comment_is_top":false,"comment_ctime":1545654404,"is_pvip":true,"replies":[{"id":"19435","content":"其他的材料一般都没有将“为什么”这么算说清楚，我画了张图，你结合图来理解。简单的说，你可以认为a-b的减法就是给a加上一个特别大的数，导致溢出，然后剩下的反而比a小，这就达到了减法的目的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545687754,"ip_address":"","comment_id":53479,"utype":1}],"discussion_count":1,"race_medal":0,"score":"130394673284","product_id":100021201,"comment_content":"老师，你讲的那个取模和反码的关系那一段我看不懂，之前看书也没有遇到你说的这种概念，请问还有其他学习资料吗？","like_count":30,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434149,"discussion_content":"其他的材料一般都没有将“为什么”这么算说清楚，我画了张图，你结合图来理解。简单的说，你可以认为a-b的减法就是给a加上一个特别大的数，导致溢出，然后剩下的反而比a小，这就达到了减法的目的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1545687754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85390,"user_name":"随欣所遇","can_delete":false,"product_type":"c1","uid":1024565,"ip_address":"","ucode":"9A5F6D61DEFBD3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/35/04536ff4.jpg","comment_is_top":false,"comment_ctime":1555050666,"is_pvip":true,"replies":[{"id":"30646","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555085014,"ip_address":"","comment_id":85390,"utype":1}],"discussion_count":2,"race_medal":1,"score":"83159429290","product_id":100021201,"comment_content":"用大家熟悉的一周七天进行对比吧<br>1、计算数据的溢出相当于模：假设第1天为周一，第2天为周二，以此类推第7天为周日，第8天已经大于7溢出了，8对7进行取模为1，也即第八天为周一；取模的除数为上限减去下限+1，替换过来换算：一周的上限为7，下限为1，那一周取模的除数换算为：7-1+1，所以我们想要知道第15天后是周几直接对（7-1+1）取模即可；<br>2、i-j=(i-j)+(2^n-1+1)=i+(2^n-1-j），可以换算为 周一 = （周一）+ （7-1+1）进行理解（ps：不一定周一，周几都为同一样，只是将 i-j 看成一个单元用其做概念上的替换）","like_count":19,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446653,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555085014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311588,"discussion_content":"同学，如果星期3减去星期5，应该是应该几？3-5+(7-1+1)=5，5对7取模=5，所以是星期五？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602410795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53218,"user_name":"石佳佳_Gemtra","can_delete":false,"product_type":"c1","uid":1235210,"ip_address":"","ucode":"C992091D9CC8D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/0a/ce61e397.jpg","comment_is_top":false,"comment_ctime":1545616906,"is_pvip":true,"replies":[{"id":"19293","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545627716,"ip_address":"","comment_id":53218,"utype":1}],"discussion_count":3,"race_medal":0,"score":"83149995530","product_id":100021201,"comment_content":"思考题：<br>原码：10100010<br>对补码除符号位取反得<br>反码：11011101<br>+1操作得<br>补码：11011110<br>对应十进制数：-94<br>还有一种方法，把负数原码除符号位外求和，减去 （2^n-1+1），即 2+32-(2^7-1+1)=-94","like_count":19,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434069,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545627716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1832194,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/f5/02/d1a1f878.jpg","nickname":"买了就等于学了","note":"","ucode":"1FA56272783A53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551595,"discussion_content":"你的回答和老师回复都有问题吧，知道是原码就不用算补码来求十进制了，如果是补码才要反推原码求二进制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645067511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446437,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/25/f9cdf7e9.jpg","nickname":"耀明","note":"","ucode":"99D03E4547EB70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195,"discussion_content":"这个解答有问题吧，思考题给出的是补码吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561271671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53237,"user_name":"风轨","can_delete":false,"product_type":"c1","uid":1185844,"ip_address":"","ucode":"7B8A5233B61EB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/34/c082419c.jpg","comment_is_top":false,"comment_ctime":1545618429,"is_pvip":false,"replies":[{"id":"19292","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545627709,"ip_address":"","comment_id":53237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48790258685","product_id":100021201,"comment_content":"思考题<br>0b10100010 = 0b10000000 + 0b00100010<br>其中<br>0b10000000 = -128<br>0b00100010 = 34<br>所以答案是 -94<br><br>2进制取相反数公式<br>相反数 = 原数减一再取反<br><br>- 0b10100010 = !(0b10100010-1) = 0b01011110 = 94<br>","like_count":11,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434077,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545627709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56441,"user_name":"二十八画生","can_delete":false,"product_type":"c1","uid":1339076,"ip_address":"","ucode":"A58F6A1726B936","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/c4/df9d1126.jpg","comment_is_top":false,"comment_ctime":1546443956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31611215028","product_id":100021201,"comment_content":"本文重要的是说清了补码的由来，为啥这样定义补码","like_count":7},{"had_liked":false,"id":105124,"user_name":"Temme","can_delete":false,"product_type":"c1","uid":1310995,"ip_address":"","ucode":"BCBA3A5570216A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/eyKgpIVFSDQBia7SJRVUKFh5qgwc3ohzEPSKvchLf9ZvwIO9CrS470ER7OhNzWTs0svECHCBiarQTa41BO3Hf0DA/132","comment_is_top":false,"comment_ctime":1560924575,"is_pvip":false,"replies":[{"id":"38401","content":"对的，负负得正的原理","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561247251,"ip_address":"","comment_id":105124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27330728351","product_id":100021201,"comment_content":"思考题:10100010<br>如果是原码，所对应的数字就是-34<br>如果是补码，那么就减一取反求原码，11011110，就是-94。<br><br>然而对着补码再去求一次补码也可以得出原码，所以神奇的是某个回答也是对的。。。这就是所谓的互为补码。<br>","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454567,"discussion_content":"对的，负负得正的原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561247251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104821,"user_name":"恒","can_delete":false,"product_type":"c1","uid":1136165,"ip_address":"","ucode":"BCB3636424DEBA","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/25/ba0e44af.jpg","comment_is_top":false,"comment_ctime":1560847926,"is_pvip":false,"replies":[{"id":"37990","content":"很详细的解释","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560876055,"ip_address":"","comment_id":104821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27330651702","product_id":100021201,"comment_content":"补码代码的数值的快速求法<br>负数补码通过非符号位0出现的位置来计算，然后计算结果加1，最后带上符号即可。<br>比如 1000,非符号位为000，按照0出现的位置计算，000=2^2+2^1+2^0=4+2+1=7,结果加上1后得到8，所以这个二进制数<br>表示-8<br>正数补码看非符号位1出现的位置来计算，然后加上符号即可。<br>比如 0111，非符号位为111，按照1出现的位置计算,111=4+2+1=7 所以这个二进制数<br>表示+7<br><br>对补码的理解：<br>目的：为了使用相同电路来实现加减运算，使得计算机cpu设计更加容易<br>为何用补码，可以通过如下四位数模拟补码从0开始一直加1的情况<br>0000 = 0<br>0001 = 1<br>0010 = 2<br>0011 = 3<br>0100 = 4<br>0101 = 5<br>0110 = 6<br>0111 = 7<br>1000 = -8<br>1001 = -7<br>1010 = -6<br>1011 = -5<br>1100 = -4<br>1101 = -3<br>1110 = -2<br>1111 = -1<br>0000 = 0 （再加1又从0开始了，上面表示的不同数值的个数是2^4=16,所以模是16）<br>...<br>然后上溢和下溢也顺便理解了，如下所示，<br>上溢就是4位二进制数的正数的最大值加1，然后通过补码加法运算后结果是4位二进制数的最小数-8 <br>上溢：7 +  1 =0111+0001=1000(4位二进制数的最小数)=-8   注：加上1的目的是最大值再大一点，当然就溢出了<br>下溢就是4位二进制数的负数的最小值加-1，然后通过补码加法运算后结果是4位二进制数的最大数+7<br>下溢：-8+(-1)=1000+1111=0111(最大数)=7  注：加上-1的目的是最小值再小一点，当然就溢出了","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454439,"discussion_content":"很详细的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560876055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54241,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1545814598,"is_pvip":true,"replies":[{"id":"19739","content":"是的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545843354,"ip_address":"","comment_id":54241,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27315618374","product_id":100021201,"comment_content":"老师，不好意思<br>问题有一处错误，我纠正一下，以免误导后来的同学<br>java中int的最小值是-2^31<br>二进制源码:1 000 0000 0000 0000 0000 0000 0000 0000<br>二进制反码:1 111 1111 1111 1111 1111 1111 1111 1111<br>-2^31的补码还是自己，符号位进位舍弃","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434403,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545843354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53605,"user_name":"夏飞","can_delete":false,"product_type":"c1","uid":1346023,"ip_address":"","ucode":"445B4ADF13E1E1","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/e7/015d82b1.jpg","comment_is_top":false,"comment_ctime":1545700318,"is_pvip":false,"replies":[{"id":"19500","content":"可以将问题简化一下，假设计算机的数据类型只有正数，而超过100就溢出了，那么102就好比2。这就好比对100取模，2和102的余数是一样的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545717484,"ip_address":"","comment_id":53605,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23020536798","product_id":100021201,"comment_content":"这不就是余数和取模的概念吗？<br>这句话不明其意","like_count":5,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434201,"discussion_content":"可以将问题简化一下，假设计算机的数据类型只有正数，而超过100就溢出了，那么102就好比2。这就好比对100取模，2和102的余数是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545717484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107261,"user_name":"爱吃锅巴的沐泡","can_delete":false,"product_type":"c1","uid":1244560,"ip_address":"","ucode":"27451E4F1A22D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/90/ae39017f.jpg","comment_is_top":false,"comment_ctime":1561509584,"is_pvip":false,"replies":[{"id":"38918","content":"计算机存储的就是补码，这个推导过程是便于人的理解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561558111,"ip_address":"","comment_id":107261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18741378768","product_id":100021201,"comment_content":"老师，请教一下问题<br>文章中讲的是原码到补码的推导过程。<br>一个二进制数在计算机中存储的形式就是补码。<br>那么一个数输入到计算机中就是补码形式，还是说有一个从原码到补码的推导过程？可是这个推导过程中也有减法，和补码把减法加法化的说法就冲突了？","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455442,"discussion_content":"计算机存储的就是补码，这个推导过程是便于人的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561558111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53664,"user_name":"吾本糊涂","can_delete":false,"product_type":"c1","uid":1346999,"ip_address":"","ucode":"33839747313030","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/b7/326a90c4.jpg","comment_is_top":false,"comment_ctime":1545707338,"is_pvip":false,"replies":[{"id":"19497","content":"负数在计算机中用补码表示，你可以先算算-34的补码是多少","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545716714,"ip_address":"","comment_id":53664,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14430609226","product_id":100021201,"comment_content":"10100010直接用10进制表示不是-34吗 为啥要去它的补码再换算10进制？","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434216,"discussion_content":"负数在计算机中用补码表示，你可以先算算-34的补码是多少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545716714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53508,"user_name":"吉祥","can_delete":false,"product_type":"c1","uid":1004960,"ip_address":"","ucode":"4E4F549CB975DB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/a0/65833509.jpg","comment_is_top":false,"comment_ctime":1545660209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430562097","product_id":100021201,"comment_content":"以为是-34呢😂","like_count":3},{"had_liked":false,"id":53419,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1545640550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430542438","product_id":100021201,"comment_content":"                           1010 0010<br>除符号位取反 -&gt;  1101 1101<br>加1                -&gt;  1101 1110<br>转十进制        -&gt;  -94","like_count":3},{"had_liked":false,"id":189162,"user_name":"江宁猎妈人","can_delete":false,"product_type":"c1","uid":1816802,"ip_address":"","ucode":"A4B6DAAA47D607","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/e2/11b9f1a8.jpg","comment_is_top":false,"comment_ctime":1584462409,"is_pvip":false,"replies":[{"id":"75088","content":"是的，很好的总结","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585633112,"ip_address":"","comment_id":189162,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174397001","product_id":100021201,"comment_content":"以前学计算机原理的时候，一直想不明白为啥补码这么设计，虽然也知道是取余，但一直没很清楚的推导过。这次看了文章更有体会。拿 4 位 2 进制数举例，-2 原码 1010，补码 1110，相当于 -6 的原码 ，也就是 -6 = -8 - (-2)，而 -8 正是一个循环。给 -6 加 1，1110 + 0001 = 1111 (-7)， -7 还原以后就是 - 1 = -2 + 1；继续下去 1111 + 0001 = 1&#47; 0000 = 0，这样就转回来了。<br>同样的，这也是补码 1000 代表 -8 的原因。 和上面一样，1001 是 -7 的补码，也是 -1 的原码。再减一位，变成1000 ，若用原码表示法，就是 -0，和 0000  都是 0，浪费了一个数。若以补码的思想，-8 - 0 = -8，这样摇身一变，就使得表示范围多了一位，弥补了 2 ^ n 的边界值。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487622,"discussion_content":"是的，很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585633112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54604,"user_name":"Rainbow","can_delete":false,"product_type":"c1","uid":1214835,"ip_address":"","ucode":"0651CFFE920BE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/89/73/e1e01096.jpg","comment_is_top":false,"comment_ctime":1545912393,"is_pvip":false,"replies":[{"id":"19827","content":"对于有符号的数据类型，2^n-1是n位1，但是第一个是符号位，所以符号位是1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545930411,"ip_address":"","comment_id":54604,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135846985","product_id":100021201,"comment_content":"“其中 2^n-1 的二进制码在不考虑符号位的情况下是 n-1位的1“<br>这个地方不理解，2^n-1的符号位不是0吗？<br>而2^n - 1是有位的1啊。<br>这个地方不理解，希望老师能解答一下~","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434509,"discussion_content":"对于有符号的数据类型，2^n-1是n位1，但是第一个是符号位，所以符号位是1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545930411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54426,"user_name":"Modern","can_delete":false,"product_type":"c1","uid":1239720,"ip_address":"","ucode":"23B741F694F7D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/a8/72e43f12.jpg","comment_is_top":false,"comment_ctime":1545869794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135804386","product_id":100021201,"comment_content":"想了好久好久，想通了几点，老师看下～<br>1.计算机中，用补码来表示负数，方便计算<br>2.但是，原码才是人类可识别的<br>3.将补码转换为原码，有2种方式，一种是取反后加1，另一种是减1后取反，其实本质上是一样的，借助于取余的思想就好理解多了","like_count":2},{"had_liked":false,"id":53515,"user_name":"毕明亮","can_delete":false,"product_type":"c1","uid":1341227,"ip_address":"","ucode":"1A72F759A97CD4","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/2b/788c15f7.jpg","comment_is_top":false,"comment_ctime":1545661387,"is_pvip":false,"replies":[{"id":"19433","content":"其实两者是可以这样互换的，这样思考可能更简单一点：(2^n-1-j原+1)=j补，那么j原和j补分别移到等号的另一边，就是(2^n-1-j补+1)=j原，2^n-1-j补就是去j补码的反码，然后+1就是j原码","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545687155,"ip_address":"","comment_id":53515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135595979","product_id":100021201,"comment_content":"老师，评论里石佳佳说那个是源码取反加一，Li Shundong又说是补码取反加一得源码……看晕了","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434165,"discussion_content":"其实两者是可以这样互换的，这样思考可能更简单一点：(2^n-1-j原+1)=j补，那么j原和j补分别移到等号的另一边，就是(2^n-1-j补+1)=j原，2^n-1-j补就是去j补码的反码，然后+1就是j原码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545687155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53284,"user_name":"阿猫","can_delete":false,"product_type":"c1","uid":1314206,"ip_address":"","ucode":"4B8145CD28C839","user_header":"https://static001.geekbang.org/account/avatar/00/14/0d/9e/f22e1c28.jpg","comment_is_top":false,"comment_ctime":1545622152,"is_pvip":false,"replies":[{"id":"19294","content":"符号位不参与","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545627736,"ip_address":"","comment_id":53284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135556744","product_id":100021201,"comment_content":"负数换算补码时，+1，符号位参与运算吗？听晕了。。。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434094,"discussion_content":"符号位不参与","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545627736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53166,"user_name":"chengzise","can_delete":false,"product_type":"c1","uid":1006070,"ip_address":"","ucode":"1C27D216359894","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/f6/ed66d1c1.jpg","comment_is_top":false,"comment_ctime":1545613305,"is_pvip":false,"replies":[{"id":"19278","content":"是的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545618460,"ip_address":"","comment_id":53166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135547897","product_id":100021201,"comment_content":"计算机内部有符号数才用补码表示，10100010最高位为1是个负数，负数的绝对值是其补码取反再加1，为01011110。十进制为94.因此10100010的十进制值为-94","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434054,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545618460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107462,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1561539855,"is_pvip":false,"replies":[{"id":"38917","content":"要考虑符号位","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561558073,"ip_address":"","comment_id":107462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5856507151","product_id":100021201,"comment_content":"2^n-1-2这个图解中，为什么是n-1个1呢，不考虑符号位的话应该是n个1吧","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455519,"discussion_content":"要考虑符号位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561558073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81668,"user_name":"focus　根","can_delete":false,"product_type":"c1","uid":1126545,"ip_address":"","ucode":"4FD612ACE353E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/91/75a69d33.jpg","comment_is_top":false,"comment_ctime":1554001489,"is_pvip":false,"replies":[{"id":"29604","content":"补码主要是为了实现加法器上的减法","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554014209,"ip_address":"","comment_id":81668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848968785","product_id":100021201,"comment_content":"理解了负数的原码、反码和补码之后，你能算算看，8 位的有符号位二进制数 10100010，对应的是哪个十进制数吗？<br><br>针对这题  我发现我迷惑了<br>为什么要将这个二进制数  转化为补码才去求十进制呢<br><br>之前-2的原码是10000010，那么10000010的十进制表示不就是-2<br><br>然后我就看到这里迷惑了<br><br>在计算机表示中  比如c++的表示  一个int   8位的值  为-2   那么转化为byte  在大端模式下  是用补码来表示吗","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445292,"discussion_content":"补码主要是为了实现加法器上的减法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554014209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56874,"user_name":"枫暂","can_delete":false,"product_type":"c1","uid":1014069,"ip_address":"","ucode":"C68D26F42B2110","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/35/0f9fcaea.jpg","comment_is_top":false,"comment_ctime":1546571406,"is_pvip":false,"replies":[{"id":"20584","content":"感谢支持 我们继续努力","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546648780,"ip_address":"","comment_id":56874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841538702","product_id":100021201,"comment_content":"不错的文章，读罢对溢出，原码，反码，补码的由来有了点线成面的认识，以前对这些数字在计算机中的二进制表示相关知识的理解更多是零散的，串不起来，需要记忆的成分在里面，过上一段时间后，总得重新梳理好半会才理清楚。阅读了本文后，终于有水到渠成，一以贯之之感😁，为作者大大点赞😊","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435291,"discussion_content":"感谢支持 我们继续努力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546648780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54958,"user_name":"令","can_delete":false,"product_type":"c1","uid":1004133,"ip_address":"","ucode":"284FB90098734F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/65/d984d4e8.jpg","comment_is_top":false,"comment_ctime":1545988641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840955937","product_id":100021201,"comment_content":"通篇读了2遍，j、-j反码研究了半个小时才彻底明白，感觉容易被绕晕，学习作者的额外加餐，“味道”很美~","like_count":1},{"had_liked":false,"id":54859,"user_name":"OzoraTsubasa","can_delete":false,"product_type":"c1","uid":1298651,"ip_address":"","ucode":"A29805845F58BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/db/8b8173d0.jpg","comment_is_top":false,"comment_ctime":1545972157,"is_pvip":false,"replies":[{"id":"19978","content":"第一个问题的回答是，除符号位之外，最大值是31个1，也就是2^31-1<br><br>第二个问题，缝二进一要一直进位，直到最高位","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546018971,"ip_address":"","comment_id":54859,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840939453","product_id":100021201,"comment_content":"老师，请教您2个问题：<br>      1.您文章说的，Java Int类型是32位，最大值是2^31-1，这个最大值是去除符号位第31位的最大值还是从0位按照2^*n 这个算法 从0位相加一直加到31位得到的值那？<br><br>     2.为什么最大正值01111..11+1之后就变成10000..00啦 ，按照逢二进一也应该是01111..10,不明白老师？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434588,"discussion_content":"第一个问题的回答是，除符号位之外，最大值是31个1，也就是2^31-1\n\n第二个问题，缝二进一要一直进位，直到最高位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546018971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54570,"user_name":"Oli张帆","can_delete":false,"product_type":"c1","uid":1338098,"ip_address":"","ucode":"6E60A370C3C14A","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/f2/db90fa96.jpg","comment_is_top":false,"comment_ctime":1545902606,"is_pvip":false,"replies":[{"id":"19826","content":"我会努力将普通话发音说得更标准😄","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545930154,"ip_address":"","comment_id":54570,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5840869902","product_id":100021201,"comment_content":"说的题外话，我发现每次看文字的时候，都很容易走神，但是听语音就好很多。不知道别的同学是怎样的。","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434495,"discussion_content":"我会努力将普通话发音说得更标准😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545930154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221103,"discussion_content":"其实文字更好，文字可以来回琢磨。对作者而言，文字要求更高：白纸黑字，落笔为证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585975239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54325,"user_name":"包美丽","can_delete":false,"product_type":"c1","uid":1159509,"ip_address":"","ucode":"EE9C9EFC495257","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/55/249c3abd.jpg","comment_is_top":false,"comment_ctime":1545828831,"is_pvip":false,"replies":[{"id":"19740","content":"假设无符号，那么32个1表示2^32-1，所以范围是0到2^32-1，共2^32个数。Java的int是有符号的，所以最高位是符号位，那么正负各分一半，正的是0到2^31-1，一共2^31个数，负的是-1到-2^31，也是2^31个数。可以将1后面n-1个0看作负0，但是没必要要两个0，所以将它看作-2^31","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545843994,"ip_address":"","comment_id":54325,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840796127","product_id":100021201,"comment_content":"为什么Java中int的下限是-2^31，怎么计算出来的？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434427,"discussion_content":"假设无符号，那么32个1表示2^32-1，所以范围是0到2^32-1，共2^32个数。Java的int是有符号的，所以最高位是符号位，那么正负各分一半，正的是0到2^31-1，一共2^31个数，负的是-1到-2^31，也是2^31个数。可以将1后面n-1个0看作负0，但是没必要要两个0，所以将它看作-2^31","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545843994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54139,"user_name":"okawari","can_delete":false,"product_type":"c1","uid":1342105,"ip_address":"","ucode":"57CA7DD2010C6A","user_header":"https://static001.geekbang.org/account/avatar/00/14/7a/99/9f22eaa9.jpg","comment_is_top":false,"comment_ctime":1545796639,"is_pvip":false,"replies":[{"id":"19607","content":"这样理解也是可以的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545809397,"ip_address":"","comment_id":54139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840763935","product_id":100021201,"comment_content":"黄老师还能看到吗，肥宅大哭ing，不知道理解的对不对，还请黄老师指正，谢谢黄老师～<br><br>我是这样理解的，-2就是再加2就到0的意思，0表示为全0，所以-2需要表示为11111110，这样加两个单位，最高位溢出后就归零了，即为补码。而原码为补码的一个映射，目的是使得人更加容易理解。","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434367,"discussion_content":"这样理解也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545809397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53976,"user_name":"李雷","can_delete":false,"product_type":"c1","uid":1146149,"ip_address":"","ucode":"5FE8354356B32C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/25/f59a0d5c.jpg","comment_is_top":false,"comment_ctime":1545783716,"is_pvip":false,"replies":[{"id":"19594","content":"比如4个1是15，相当于2^4-1，所以31个1相当于2^31-1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796407,"ip_address":"","comment_id":53976,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840751012","product_id":100021201,"comment_content":"32位的int值，最大值不应该是31个1么，那应该是2^32-1吧？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434309,"discussion_content":"比如4个1是15，相当于2^4-1，所以31个1相当于2^31-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53900,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545750312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840717608","product_id":100021201,"comment_content":"喜欢老师的加餐，为老师的加餐点赞","like_count":1},{"had_liked":false,"id":53857,"user_name":"Zzzzz","can_delete":false,"product_type":"c1","uid":1234821,"ip_address":"","ucode":"01CDDB17F905C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/85/f2d5997a.jpg","comment_is_top":false,"comment_ctime":1545742660,"is_pvip":false,"replies":[{"id":"19606","content":"我的理解是符号位就是用来表示正负数的，不受到后面进位的影响","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545809233,"ip_address":"","comment_id":53857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840709956","product_id":100021201,"comment_content":"其中 2^n-1 的二进制码在不考虑符号位的情况下是 n-1 位的 1，那么 2^n-1-2 的结果就是下面这样的：<br><br>或者说为什么不把符号位加入计算","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434270,"discussion_content":"我的理解是符号位就是用来表示正负数的，不受到后面进位的影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545809233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53850,"user_name":"Zzzzz","can_delete":false,"product_type":"c1","uid":1234821,"ip_address":"","ucode":"01CDDB17F905C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/85/f2d5997a.jpg","comment_is_top":false,"comment_ctime":1545741696,"is_pvip":false,"replies":[{"id":"19520","content":"因为有正负，所以除数还是256。至于不考虑符号位，是为了对应取反的操作","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545744193,"ip_address":"","comment_id":53850,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840708992","product_id":100021201,"comment_content":"其中 2^n-1 的二进制码在不考虑符号位的情况下是 n-1 位的 1，那么 2^n-1-2 的结果就是下面这样的:<br><br><br>老师，这里不是很理解，为什么在计算i-j+取模的除数的时候，不考虑符号位？假设是8位的情况，不考虑符号位的话，那取模的除数不是才128吗？按道理8位的模数应该是256","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434265,"discussion_content":"因为有正负，所以除数还是256。至于不考虑符号位，是为了对应取反的操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545744193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53499,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1545657844,"is_pvip":true,"replies":[{"id":"19436","content":"我的理解是，有符号位的n位二进制可以表示两组数，由于0的存在，一组是大于等于0的，另一组是小于0的，两组的数量都是2的n-1次方，由于负数这组没有0，所以可以表示-2^n","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545688465,"ip_address":"","comment_id":53499,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5840625140","product_id":100021201,"comment_content":"对于 n 位的数字类型，符号位是 1，后面 n-1 位全是 0，我们把这种情形表示为 -2^n<br><br>为什么这样表示呢？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434159,"discussion_content":"我的理解是，有符号位的n位二进制可以表示两组数，由于0的存在，一组是大于等于0的，另一组是小于0的，两组的数量都是2的n-1次方，由于负数这组没有0，所以可以表示-2^n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545688465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53280,"user_name":"自由港","can_delete":false,"product_type":"c1","uid":1117277,"ip_address":"","ucode":"A5CC6FD89C8909","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/5d/0ccc195b.jpg","comment_is_top":false,"comment_ctime":1545621804,"is_pvip":false,"replies":[{"id":"19291","content":"你是指-(2^n-1)? 如果是这样，2^n-1的原码是n个1，负数的反码是n个0，补码加1就是00...01，符号位是1，最后一位也是1，就不是n-1个0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545627684,"ip_address":"","comment_id":53280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840589100","product_id":100021201,"comment_content":"“而符号位是 1，后面 n-1 位全是 0，我们已经说过这表示 -2^n。”<br>这个是不是应该表示-2^n-1 ?","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434093,"discussion_content":"你是指-(2^n-1)? 如果是这样，2^n-1的原码是n个1，负数的反码是n个0，补码加1就是00...01，符号位是1，最后一位也是1，就不是n-1个0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545627684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53253,"user_name":"云韵","can_delete":false,"product_type":"c1","uid":1025622,"ip_address":"","ucode":"3DE26DBAAAEDE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/56/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1545619736,"is_pvip":true,"replies":[{"id":"19296","content":"你可以参考原文中的图，最大值(2^(n-1) - 1)，再加上1，就变成-2^(n-1)，相当于回到了原点。所有整个周期的长度就是 (最大值 - 最小值 + 1)。而周期的长度就是取模的除数。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545628183,"ip_address":"","comment_id":53253,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5840587032","product_id":100021201,"comment_content":"&quot;计算机数据的溢出，就相当于取模。而用于取模的除数就是数据类型的上限减去下限的值，在加上1“ 这句话不理解。老师可以帮忙在详细解答一下吗？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434084,"discussion_content":"你可以参考原文中的图，最大值(2^(n-1) - 1)，再加上1，就变成-2^(n-1)，相当于回到了原点。所有整个周期的长度就是 (最大值 - 最小值 + 1)。而周期的长度就是取模的除数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545628183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53204,"user_name":"Jermery","can_delete":false,"product_type":"c1","uid":1205154,"ip_address":"","ucode":"924E3D661CD295","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/a2/1123d904.jpg","comment_is_top":false,"comment_ctime":1545615806,"is_pvip":false,"replies":[{"id":"19271","content":"负数的反码是原码取反<br>其他的理解都是对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545616924,"ip_address":"","comment_id":53204,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840583102","product_id":100021201,"comment_content":"正数的原码、反码、补码都一样；<br>负数的反码是给为取反、补码是反码+1；<br>两数相减就是 正数原码 - 负数补码。<br>是这意思不？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434062,"discussion_content":"负数的反码是原码取反\n其他的理解都是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545616924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53160,"user_name":"Li Shunduo","can_delete":false,"product_type":"c1","uid":1222882,"ip_address":"","ucode":"6C5AB4129E9780","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/e2/f8e51df2.jpg","comment_is_top":false,"comment_ctime":1545612831,"is_pvip":false,"replies":[{"id":"19279","content":"正解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545618469,"ip_address":"","comment_id":53160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840580127","product_id":100021201,"comment_content":"思考题:<br>对补码（除符号位）取反+1，得到原码11011110，十进制为 -94","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434052,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545618469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358100,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663909533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663909533","product_id":100021201,"comment_content":"学习反码和补码","like_count":0},{"had_liked":false,"id":336382,"user_name":"Geek_1b7f39","can_delete":false,"product_type":"c1","uid":2598894,"ip_address":"","ucode":"F4B9B0F281A66E","user_header":"https://static001.geekbang.org/account/avatar/00/27/a7/ee/cbb92643.jpg","comment_is_top":false,"comment_ctime":1646122939,"is_pvip":false,"replies":[{"id":"124728","content":" i-j=i 的补码 +(-j 的补码) 这个公式是根据之前的分析推导出来的，你可以结合图片来看。至于i为负数的时候，其实以此类推，主要是要研究-j的操作（j大于0）","user_name":"作者回复","user_name_real":"编辑","uid":"1275061","ctime":1649449368,"ip_address":"","comment_id":336382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646122939","product_id":100021201,"comment_content":"“由于正数的加法无需负数的加法这样的变换，因此正数的原码、反码和补码三者都是一样的。最终，我们可以得到 i-j=i 的补码 +(-j 的补码)。”  这是怎么得到的，如果i是负数呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560795,"discussion_content":" i-j=i 的补码 +(-j 的补码) 这个公式是根据之前的分析推导出来的，你可以结合图片来看。至于i为负数的时候，其实以此类推，主要是要研究-j的操作（j大于0）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649449368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330940,"user_name":"龙爷Linux","can_delete":false,"product_type":"c1","uid":1080861,"ip_address":"","ucode":"D65BD74A430295","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/1d/4bd67285.jpg","comment_is_top":false,"comment_ctime":1642317115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642317115","product_id":100021201,"comment_content":"符号位=最高位，负数1，正数0；<br>原码，减法运算会溢出；<br>正数 反码=原码，负数 符号位不变，其他位=原码取反；<br>反码的出现，主要是为了解决原码无法执行减法运算的问题，但有2个缺点，0有两种表示，计算要判断溢出效率低；补码，解决反码问题，正数的补码与原码格式相同，负数补码=原码取反+1 <br>https:&#47;&#47;blog.csdn.net&#47;Turnhead&#47;article&#47;details&#47;90902407","like_count":0},{"had_liked":false,"id":302524,"user_name":"Mr.LIU","can_delete":false,"product_type":"c1","uid":1590371,"ip_address":"","ucode":"0E3BE4272F7112","user_header":"https://static001.geekbang.org/account/avatar/00/18/44/63/283aa01b.jpg","comment_is_top":false,"comment_ctime":1626249794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626249794","product_id":100021201,"comment_content":"0000 0001   1<br>1000 0010  -2<br><br>0000 0001<br><br>1111 1101   -2  反码<br>1111 1110   -2  补码<br><br>0000 0001    1  补码<br>1111 1110   -2  补码<br>1111 1111    !=-1   ?","like_count":0},{"had_liked":false,"id":296906,"user_name":"FuriousEric","can_delete":false,"product_type":"c1","uid":1138576,"ip_address":"","ucode":"0A66DA938976F7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/90/711efc88.jpg","comment_is_top":false,"comment_ctime":1623220245,"is_pvip":false,"replies":[{"id":"108261","content":"感谢建议，这方面还需加强 :)","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1624026711,"ip_address":"","comment_id":296906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623220245","product_id":100021201,"comment_content":"老师能力强，但表达能力不行，一堆的符号，不举简单的例子，根本看不懂。后来到互联网上搜索到用12点时钟的概念比喻，加上另外一篇文章里的一个概念，再结合老师的&quot;除数&quot;概念才终于明白。本篇内容讲解是不及格的，这可能也是所有技术大牛的通病。另外一个感悟是，重要的不是获取这个知识，而是通过彻底搞懂知识背后的原理，从而锻炼了大脑和思维，显然后一种更重要，如果哪位网友觉得搞懂了补码，不妨通俗易懂写出来，保证你发现自己没搞明白。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521640,"discussion_content":"感谢建议，这方面还需加强 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624026711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264728,"user_name":"凹凸鸿","can_delete":false,"product_type":"c1","uid":1915334,"ip_address":"","ucode":"A458BAEBF314B2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/c6/1e12f271.jpg","comment_is_top":false,"comment_ctime":1606618186,"is_pvip":false,"replies":[{"id":"96729","content":"这个看编程语言的定义，如果一个语言支持有符号数，那么在数据类型的定义上可能会有所不同","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1607280709,"ip_address":"","comment_id":264728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606618186","product_id":100021201,"comment_content":"老师，怎么区分有符号数和无符合数呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510667,"discussion_content":"这个看编程语言的定义，如果一个语言支持有符号数，那么在数据类型的定义上可能会有所不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607280709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254059,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1603033749,"is_pvip":false,"replies":[{"id":"92845","content":"正数的几种码无需变换是指在进行加法的时候，无需变化。两个正数相加，还是可能溢出的。而负数的反码和补码设计，就是为了让计算机能够通过加法操作（文中提到了计算机只有累加器）来完成人类定义的减法操作。而反码和补码也正是利用了计算机数据类型有一个范围的特性来设计的。如果计算机的数据类型可以支持无穷大和无穷小，那么目前关于负数的反码和补码设计也就不能奏效了。<br>至于为何1000 0000正好就是-128呢，这是人们针对计算机数据字段的取值范围，预先设定好的规则，所以说是先有上溢出之后从下限开始的规定，然后再有负数的反码和补码设计，最终达到了在计算机领域中，通过累加器来实现减法操作的目的。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1603127066,"ip_address":"","comment_id":254059,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1603033749","product_id":100021201,"comment_content":"“由于正数的加法无需负数的加法这样的变换，因此正数的原码、反码和补码三者都是一样的。”<br>为何正数就不用变换了？两个正数相加溢出了，为何正好就等于那个溢出之后的补码呢，比如：127+1==》0111 1111 + 0000 0001 = 1000 0000，为何1000 0000正好就是-128呢？到底是先有补码，还是先有上溢出之后从下限开始的规定。开始凌乱了，我再对比看看其他资料，再想一想。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507268,"discussion_content":"正数的几种码无需变换是指在进行加法的时候，无需变化。两个正数相加，还是可能溢出的。而负数的反码和补码设计，就是为了让计算机能够通过加法操作（文中提到了计算机只有累加器）来完成人类定义的减法操作。而反码和补码也正是利用了计算机数据类型有一个范围的特性来设计的。如果计算机的数据类型可以支持无穷大和无穷小，那么目前关于负数的反码和补码设计也就不能奏效了。\n至于为何1000 0000正好就是-128呢，这是人们针对计算机数据字段的取值范围，预先设定好的规则，所以说是先有上溢出之后从下限开始的规定，然后再有负数的反码和补码设计，最终达到了在计算机领域中，通过累加器来实现减法操作的目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603127066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252636,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1602412310,"is_pvip":false,"replies":[{"id":"92515","content":"很好的思考，负数就是相反的方向，原理是一样的。因为在反方向，同样有一个长度为2^n的循环周期","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1602647443,"ip_address":"","comment_id":252636,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1602412310","product_id":100021201,"comment_content":"老师，上面的i-j=(i-j)+(2^n-1+1)=i+(2^n-1-j+1)对应的图，是按照 i 大于 j 画的，但如i小于j呢（比如 5 - 7），图应该怎么画，i-j 在0的左边吗？所以推导公式为：i-j=i+(2^n -1 + 1) - i - | i-j | = i+(2^n-1-j+1)，其中 | i-j | 表示i-j的绝对值，还请老师帮忙之中抽空解答一下。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506823,"discussion_content":"很好的思考，负数就是相反的方向，原理是一样的。因为在反方向，同样有一个长度为2^n的循环周期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602647443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228083,"user_name":"述为","can_delete":false,"product_type":"c1","uid":1238965,"ip_address":"","ucode":"E62AEC705AEDC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/b5/c08b71e1.jpg","comment_is_top":false,"comment_ctime":1592551029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592551029","product_id":100021201,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;qq_20255275&#47;article&#47;details&#47;99703848 这个链接讲的还挺清楚。。关于取值范围的。。算是解了点惑。。","like_count":0},{"had_liked":false,"id":202764,"user_name":"许灵","can_delete":false,"product_type":"c1","uid":1059926,"ip_address":"","ucode":"0296EC9929B570","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/56/ff7a9730.jpg","comment_is_top":false,"comment_ctime":1586063779,"is_pvip":true,"replies":[{"id":"75879","content":"是的，取模的除数","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1586109062,"ip_address":"","comment_id":202764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586063779","product_id":100021201,"comment_content":"其实补码就是源码加取膜的除数","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490678,"discussion_content":"是的，取模的除数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586109062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190816,"user_name":"Geek_bb2310","can_delete":false,"product_type":"c1","uid":1926508,"ip_address":"","ucode":"022885B257DEB3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","comment_is_top":false,"comment_ctime":1584695528,"is_pvip":false,"replies":[{"id":"75077","content":"因为有一个留给了0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585632468,"ip_address":"","comment_id":190816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584695528","product_id":100021201,"comment_content":"想问一下int上界是2^31-1，为什么还要-1， 没搞明白，老师可以解释一下吗？ ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488059,"discussion_content":"因为有一个留给了0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585632468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170512,"user_name":"Farewell丶","can_delete":false,"product_type":"c1","uid":1179565,"ip_address":"","ucode":"A0D69893C5375C","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","comment_is_top":false,"comment_ctime":1578623674,"is_pvip":false,"replies":[{"id":"66323","content":"是的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1578851453,"ip_address":"","comment_id":170512,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578623674","product_id":100021201,"comment_content":"原来只会用，现在知道了，出现原码、反码、补码是为了利用溢出特性，解决负数加法的问题","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481003,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578851453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149262,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1573180458,"is_pvip":false,"replies":[{"id":"57452","content":"如果最高位是符号位，那么相加后最高位符号位为0，不是1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1573250883,"ip_address":"","comment_id":149262,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1573180458","product_id":100021201,"comment_content":"老师，你好，正数 3 的补码仍然是 0000…0011，-2 的补码是 1111…1110，两者相加，最后得到了正确的结果 1 的二进制。这里从第二位开始进位最后不是应该会得到1000...0001吗？这是正数1吗？<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473797,"discussion_content":"如果最高位是符号位，那么相加后最高位符号位为0，不是1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573250883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","nickname":"Eleven","note":"","ucode":"FB4A0C8CA732BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47180,"discussion_content":"哦，进位后应该是10符号位为0，1是符号位之后的1位，这种怎么算呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573289310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148954,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1573117629,"is_pvip":false,"replies":[{"id":"57321","content":"负数可以多一个，正数有一个留给0了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1573149107,"ip_address":"","comment_id":148954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573117629","product_id":100021201,"comment_content":"老师，你好，在 Java 中，int 型是 32 位，它的最大值也就是上限是 2^31-1（最高位是符号位，所以是 2 的 31 次方而不是 32 次方），最小值也就是下限是 -2^31。这里最小值也就是下限为什么是-2^31次方，不应该也是-2^31+1吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473685,"discussion_content":"负数可以多一个，正数有一个留给0了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573149107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125331,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1566166377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566166377","product_id":100021201,"comment_content":"取模运算在计算机编码里面真是无处不在，对负数符号位处理最后的一个数也用了这个思想，1后面全部是零的时候既可以表示负数的最小值，也可以表示0,0已经通过正数的编码处理了，这里就表示负数的最小值（这也保证了反码和补码的处理）。负数的反码和补码都表示和源码和为固定值的码，反码（除符号位按位取反）的存在是为了方便计算补码（反码+1），补码是为了方便计算减法，减法的实现是用加法取模运算，又回到了取模......注意这里符号位是特殊处理的，一方面符号位是区分负数和非负数，另一方面在求和取模的过程里符号位并不参与距离计算，这就导致了补码和反码的位运算都无视符号位。","like_count":0},{"had_liked":false,"id":122573,"user_name":"薇薇来了","can_delete":false,"product_type":"c1","uid":1343859,"ip_address":"","ucode":"C2CA98F021346B","user_header":"https://static001.geekbang.org/account/avatar/00/14/81/73/d8f12cec.jpg","comment_is_top":false,"comment_ctime":1565426593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565426593","product_id":100021201,"comment_content":"反复看了几遍才理解溢出在负数加法中的使用，有疑问的地方就是反码那个图的公式不太理解，具体的换算有点儿懵，不过看了底下评论的钟表示例就很容易理解","like_count":0},{"had_liked":false,"id":118918,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1564467986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564467986","product_id":100021201,"comment_content":"关于补码和其计算公式的由来，可参考<br>https:&#47;&#47;blog.csdn.net&#47;wenxinwukui234&#47;article&#47;details&#47;42119265","like_count":0},{"had_liked":false,"id":118880,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1564457049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564457049","product_id":100021201,"comment_content":"不知道大家一开始有没有这个疑惑，为啥Integer的最大值是2^31-1而不是2^31？因为直觉上看最高位是符号位，那剩下的位数都是有效数字位，理应有2^31个数，但不要忽略0。在一般编程语言里0被归在最大值范围里，所以要减一。<br>http:&#47;&#47;javadevnotes.com&#47;java-integer-max-value","like_count":0},{"had_liked":false,"id":111773,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1562597071,"is_pvip":false,"replies":[{"id":"40700","content":"感谢支持","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1562638840,"ip_address":"","comment_id":111773,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562597071","product_id":100021201,"comment_content":"搞了几年JAVA，第一次有人把这个讲清楚，老师好棒！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457442,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562638840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110561,"user_name":"殿小二","can_delete":false,"product_type":"c1","uid":1284986,"ip_address":"","ucode":"E979673B257C24","user_header":"https://static001.geekbang.org/account/avatar/00/13/9b/7a/58327b6d.jpg","comment_is_top":false,"comment_ctime":1562294548,"is_pvip":false,"replies":[{"id":"40331","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1562404763,"ip_address":"","comment_id":110561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562294548","product_id":100021201,"comment_content":"10100010 可以知道是个负数. 一个负数转换成二进制,首选绝对值再转为二进制,再进行取反操作,再加1即表示该负数的二进制. 那10100010可以进行反向推导 首先-1 = 10100001 再取反=01011110 这个值是94,由于原数是负数则结果为-94 对不 老师?","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456944,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562404763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109503,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1562046568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562046568","product_id":100021201,"comment_content":"反码，符号位不变，其余位置取反<br>原码<br>补码，反码加上1","like_count":0},{"had_liked":false,"id":108740,"user_name":"健健的树袋","can_delete":false,"product_type":"c1","uid":1575214,"ip_address":"","ucode":"D7896B6F7B31D0","user_header":"https://static001.geekbang.org/account/avatar/00/18/09/2e/35a6f9f9.jpg","comment_is_top":false,"comment_ctime":1561870557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561870557","product_id":100021201,"comment_content":"所以4位带符号的负数上限是0111（+7）,<br>下限是1000（为[+8]的补码+1进位溢出舍弃最高位）<br>所以0和8是好朋友，取模8相等。<br><br>以前一直以为上限是0111（+7），下限是1111（自己读作-7），但现在纠正了自己，所谓的1111是-001的补码即负1，根本不是整数下限。<br>计算机世界好欢乐。原来补码1000才是下限。<br>又突然发现，除去最高符号位，除了正0的补码是000外，也只有负8的补码是000了。","like_count":0},{"had_liked":false,"id":107592,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1561561718,"is_pvip":false,"replies":[{"id":"39042","content":"首先，2^n-1的二进制码，如果不考虑符号位，就只有（n-1）位，所以2^(n-1)-1的二进制码就是(n-1)位的1。而符号位是不参于反码和补码的计算的。负数的最高位、无论何种码、永远是1。<br><br>至于周长，由于要同时考虑正、负数空间，所以是2 * 2^(n-1) = 2^n","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561625240,"ip_address":"","comment_id":107592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561561718","product_id":100021201,"comment_content":"其中 2^n-1 的二进制码在不考虑符号位的情况下是 n-1 位的 1，那么 2^n-1-2 的结果就是下面这样的：<br><br>这个地方我真的是没想通呀，能不能再详细解释一下呢，为啥是n-1位的1呢。这个2^n - 1+ 1表示周长，可老师用n-1个1来表示，n-1个1是2^（n-1）啊。这个地方这样转我实在想不通","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455578,"discussion_content":"首先，2^n-1的二进制码，如果不考虑符号位，就只有（n-1）位，所以2^(n-1)-1的二进制码就是(n-1)位的1。而符号位是不参于反码和补码的计算的。负数的最高位、无论何种码、永远是1。\n\n至于周长，由于要同时考虑正、负数空间，所以是2 * 2^(n-1) = 2^n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561625240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105117,"user_name":"Temme","can_delete":false,"product_type":"c1","uid":1310995,"ip_address":"","ucode":"BCBA3A5570216A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/eyKgpIVFSDQBia7SJRVUKFh5qgwc3ohzEPSKvchLf9ZvwIO9CrS470ER7OhNzWTs0svECHCBiarQTa41BO3Hf0DA/132","comment_is_top":false,"comment_ctime":1560922768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560922768","product_id":100021201,"comment_content":"如何让加法达到减法一样的效果，那就是加一个能够溢出上限的数字（上限可以理解为硬件决定的最大值，比如32位就是2^32-1），溢出上限之后的部分又从下限位置（就是0）开始累加（除模取余）。假设做减法的数a，能达到相同效果做加法的数为b，前辈们发现上限减下限加一（模的大小）和a加b的和大小竟然一样。。。（(๑&gt;؂&lt;๑）），好吧，那就把-a映射到b吧，就可以永远做加法了，把这个映射操作叫做求补码吧。<br>就好比是一个只能顺时针走的（加法）时钟，如果要时针走移到过去时间的位置，一个是逆时针移（减法）（不行，只能顺时针走），另一个就是顺时针移，其中逆时针移动量的‘补码’就是顺时针移动量（数字取反加一其实和用模减去这个数字是一样的结果）。<br>所谓的溢出上限可以类比为顺时针走过了0点位置。<br>要理解清楚：原码&#47;代码层的数字表示；补码&#47;硬件层面的数字表示，可以达到只做加法，结果准确的效果。<br>","like_count":0},{"had_liked":false,"id":104763,"user_name":"钠镁铝硅磷😒","can_delete":false,"product_type":"c1","uid":1575196,"ip_address":"","ucode":"40B91112F1F969","user_header":"https://static001.geekbang.org/account/avatar/00/18/09/1c/40a47446.jpg","comment_is_top":false,"comment_ctime":1560829395,"is_pvip":false,"replies":[{"id":"37989","content":"很高兴对你有价值!","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560875983,"ip_address":"","comment_id":104763,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1560829395","product_id":100021201,"comment_content":"之前一直不知道为什么正数的原反补码一样，而负数的不一样，也不知道为什么负数的补码是取反加一，看完老师的讲解后，终于弄明白了。666666","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454414,"discussion_content":"很高兴对你有价值!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560875983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138576,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5f/90/711efc88.jpg","nickname":"FuriousEric","note":"","ucode":"0A66DA938976F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378426,"discussion_content":"你确定你搞懂了？这种马屁别拍，没意义，这篇文章好几个公式，一点都不直观，你也能搞懂？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623220308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98485,"user_name":"真人","can_delete":false,"product_type":"c1","uid":1545331,"ip_address":"","ucode":"206B3F6193F7F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Crr2DudRs9Br7V6WKqKJkjrfdWVxykSLHId3E58BmpbqHqC0FzH3UqnvNqlTI09kS3cuicb6Zc4tdwhWTHpL87g/132","comment_is_top":false,"comment_ctime":1559009601,"is_pvip":false,"replies":[{"id":"35322","content":"主要是看约定好的形式，是采用补码还是原码？通常计算机有符号的数据类型采用的是补码","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559061010,"ip_address":"","comment_id":98485,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559009601","product_id":100021201,"comment_content":"它在计算机表示为补码-94，但表达的数学值依然是-34，对吗老师","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451708,"discussion_content":"主要是看约定好的形式，是采用补码还是原码？通常计算机有符号的数据类型采用的是补码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559061010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96809,"user_name":"绘","can_delete":false,"product_type":"c1","uid":1543003,"ip_address":"","ucode":"1128AC61E9DB74","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/5b/bf32920c.jpg","comment_is_top":false,"comment_ctime":1558513009,"is_pvip":false,"replies":[{"id":"34661","content":"可能从码本身看不出来，需要预先定义好","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1558543175,"ip_address":"","comment_id":96809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558513009","product_id":100021201,"comment_content":"问个奇葩的问题，如何分辨一个二进制数是原码还是补码，（负数）","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451021,"discussion_content":"可能从码本身看不出来，需要预先定义好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558543175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91036,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1024842,"ip_address":"","ucode":"47E030165390BE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/4a/2006a4dc.jpg","comment_is_top":false,"comment_ctime":1556812568,"is_pvip":false,"replies":[{"id":"32639","content":"这里2^n-1+1是一个周期（求余的除数），所以求余之后的余数不变","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1556815747,"ip_address":"","comment_id":91036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556812568","product_id":100021201,"comment_content":"i-j=(i-j)+(2^n-1+1)<br>老师，这里弄不明白","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448772,"discussion_content":"这里2^n-1+1是一个周期（求余的除数），所以求余之后的余数不变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556815747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88677,"user_name":"朋朋","can_delete":false,"product_type":"c1","uid":1133890,"ip_address":"","ucode":"3070498E7282C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/42/8fd7c2e2.jpg","comment_is_top":false,"comment_ctime":1555982055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555982055","product_id":100021201,"comment_content":"补码加多对应负数的补码等于0所以 用正数去加它等于0就能算出对应的数","like_count":0},{"had_liked":false,"id":88137,"user_name":"jiangjing","can_delete":false,"product_type":"c1","uid":1295268,"ip_address":"","ucode":"D45001E5FB4D6F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibcRNslcyp7dwIR3TIwvloCibMd7Ew2TB3MU0wISFXEolyuHRtfIriagm6PMX5zQHicmc78BrBcxA6vQ5qnTPCev9A/132","comment_is_top":false,"comment_ctime":1555857285,"is_pvip":false,"replies":[{"id":"31696","content":"可以的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555885348,"ip_address":"","comment_id":88137,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555857285","product_id":100021201,"comment_content":"反码符号位不参与，反码+1=补码时，符号位参与计算。<br>补码=反码+1<br>反码=补码-1=10100010-1=10100001<br>原码=11011110 = -94","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447744,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555885348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79947,"user_name":"Jeson","can_delete":false,"product_type":"c1","uid":1258168,"ip_address":"","ucode":"A75A8BF2EBD9CD","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/b8/6a80fb00.jpg","comment_is_top":false,"comment_ctime":1553579472,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553579472","product_id":100021201,"comment_content":"见过的里面，讲得最清楚的一个。赞","like_count":0},{"had_liked":false,"id":77625,"user_name":"Lay Zhao","can_delete":false,"product_type":"c1","uid":1380033,"ip_address":"","ucode":"E3060C75B9E088","user_header":"https://static001.geekbang.org/account/avatar/00/15/0e/c1/0e95d479.jpg","comment_is_top":false,"comment_ctime":1552974705,"is_pvip":false,"replies":[{"id":"28425","content":"对，加餐中讲解了，正数的补码就是原码，负数的补码是从原码转化而来","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1553010361,"ip_address":"","comment_id":77625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552974705","product_id":100021201,"comment_content":"我看到思考题的时候一脸懵逼，10100010 的十进制不就是34的负数 -34吗？这么简单？但是看到大家的答案都是-94， ╮(╯_╰)╭ 懵逼。╮(╯_╰)╭ 懵逼。╮(╯_╰)╭ 懵逼。╮(╯_╰)╭ 懵逼。<br><br>直到我在其他地方查到了：  “在计算机中，所有数字都是以补码的形式存储的。”  ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443800,"discussion_content":"对，加餐中讲解了，正数的补码就是原码，负数的补码是从原码转化而来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553010361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75896,"user_name":"ferry","can_delete":false,"product_type":"c1","uid":1255187,"ip_address":"","ucode":"0A848FA96C3AD8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGOSxM1GIHX9Y2JIe7vGQ87rK8xpo5F03KmiaGyXeKnozZsicHeSZrbSlzUVhTOdDlXCkTrcYNIVJg/132","comment_is_top":false,"comment_ctime":1552489162,"is_pvip":false,"replies":[{"id":"27844","content":"这里假设是按照计算机的通用设计，有符号的数，如果是负数使用补码来表示。<br><br>至于第二种，实际上就是之前我们介绍的如何计算补码的逆过程，你可以尝试推导一下<br>","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552582674,"ip_address":"","comment_id":75896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552489162","product_id":100021201,"comment_content":"老师，您对不同答案的肯定都把我搞糊涂了。如果10100010是补码，那么通过取反加一变成原码，我们可以得到-94。但是如果这个数本来就是原码，那不是表示-34吗？我的这个思路哪里出错了呢？<br>另外，有一个答案说：2进制取相反数公式，相反数 = 原数减一再取反，这是什么意思呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443081,"discussion_content":"这里假设是按照计算机的通用设计，有符号的数，如果是负数使用补码来表示。\n\n至于第二种，实际上就是之前我们介绍的如何计算补码的逆过程，你可以尝试推导一下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552582674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75878,"user_name":"创星","can_delete":false,"product_type":"c1","uid":1338706,"ip_address":"","ucode":"11069607050E7A","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/52/f68acc03.jpg","comment_is_top":false,"comment_ctime":1552486807,"is_pvip":false,"replies":[{"id":"27674","content":"目前计算机累加器的硬件实现都只有加法没有减法，所以减法就是通过加上一个补码来实现的。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552495177,"ip_address":"","comment_id":75878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552486807","product_id":100021201,"comment_content":"老师说了为什么要有补码，大概点一下，举个例子告诉我哪里会用到","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443072,"discussion_content":"目前计算机累加器的硬件实现都只有加法没有减法，所以减法就是通过加上一个补码来实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552495177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75233,"user_name":"等待","can_delete":false,"product_type":"c1","uid":1255162,"ip_address":"","ucode":"687A6BB673414E","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/fa/266bcb89.jpg","comment_is_top":false,"comment_ctime":1552368178,"is_pvip":false,"replies":[{"id":"27551","content":"你的理解思路是对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552408480,"ip_address":"","comment_id":75233,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552368178","product_id":100021201,"comment_content":"老师，计算机中的溢出是否可以这样子理解，<br>当到达上限的时候，就会重新从下限开始。<br>反之，到达下限之后，就会从上限重新开始。<br>这个取决于各种类型的数据范围。<br>c++中的unsigned long long 这种情况没有负数，感觉这样子说比较好一些。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442832,"discussion_content":"你的理解思路是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552408480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73490,"user_name":"小木匠","can_delete":false,"product_type":"c1","uid":1055610,"ip_address":"","ucode":"222F861CF9129C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/7a/390a8530.jpg","comment_is_top":false,"comment_ctime":1551917254,"is_pvip":false,"replies":[{"id":"26940","content":"是的，就像有读者建议的，也许用钟表转一圈回到原点来形容更容易理解。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551980314,"ip_address":"","comment_id":73490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551917254","product_id":100021201,"comment_content":"反码那段琢磨了好久才看明白。我觉得这么讲会更容易理解点，其实i-j ，可以先看做i+0-j，0的二进制表示就是0…000，利用溢出的特性，其实就是2^n，就是i+2^n-j，再借1，还1，就是i+2^n-1-j+1，就成了i+j反码+1。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442110,"discussion_content":"是的，就像有读者建议的，也许用钟表转一圈回到原点来形容更容易理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551980314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73137,"user_name":"Bernie","can_delete":false,"product_type":"c1","uid":1359928,"ip_address":"","ucode":"E082493F877A8D","user_header":"https://static001.geekbang.org/account/avatar/00/14/c0/38/667420c3.jpg","comment_is_top":false,"comment_ctime":1551830615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551830615","product_id":100021201,"comment_content":"其实蛮好理解的 ","like_count":0},{"had_liked":false,"id":72810,"user_name":"窹寐","can_delete":false,"product_type":"c1","uid":1240246,"ip_address":"","ucode":"0FEDC0F0FADD2E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b6/1358f78f.jpg","comment_is_top":false,"comment_ctime":1551742374,"is_pvip":false,"replies":[{"id":"26569","content":"只有负数是。正数你可以认为它有符号位，不过是0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551811209,"ip_address":"","comment_id":72810,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1551742374","product_id":100021201,"comment_content":"根据思考题思路，所以有符号位的数字都是直接拿补码表示吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441763,"discussion_content":"只有负数是。正数你可以认为它有符号位，不过是0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551811209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71069,"user_name":"Che!","can_delete":false,"product_type":"c1","uid":1337588,"ip_address":"","ucode":"7759C7CB3C0717","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/f4/99859414.jpg","comment_is_top":false,"comment_ctime":1551258583,"is_pvip":false,"replies":[{"id":"25493","content":"是有符号的，从最小的负数值到最大的正数值，取值范围是2^n-1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551291980,"ip_address":"","comment_id":71069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551258583","product_id":100021201,"comment_content":"您好，<br>i - j加上取模除数后溢出的那个图有个问题<br>图中取的取模用的除数是(2 ^ n - 1)<br>这里指的是无符号整数？<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440971,"discussion_content":"是有符号的，从最小的负数值到最大的正数值，取值范围是2^n-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551291980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67266,"user_name":"GB","can_delete":false,"product_type":"c1","uid":1141461,"ip_address":"","ucode":"7BF6C623FF944B","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/d5/4ea9258e.jpg","comment_is_top":false,"comment_ctime":1550118033,"is_pvip":false,"replies":[{"id":"23895","content":"这也是一个视角，可以的👌","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550164608,"ip_address":"","comment_id":67266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550118033","product_id":100021201,"comment_content":"老师，我觉得是不是解释负数的二进制为什么用正数的二进制的补码进行表示会比较简单","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439122,"discussion_content":"这也是一个视角，可以的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550164608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66893,"user_name":"Sam.张朝","can_delete":false,"product_type":"c1","uid":1132448,"ip_address":"","ucode":"FB20554D94B250","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","comment_is_top":false,"comment_ctime":1550038825,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1550038825","product_id":100021201,"comment_content":"也是以为是-34，但是负数在计算机中用补码表示，这个知识点不知道，真计算错了。","like_count":0},{"had_liked":false,"id":66335,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1549931354,"is_pvip":false,"replies":[{"id":"23621","content":"时针可以帮助理解，👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550006453,"ip_address":"","comment_id":66335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549931354","product_id":100021201,"comment_content":"补码其实就是解决了在原码表示中1+(-1) != 0的问题，在计算编码对应的数字很简单，对任何一个负数的编码，只需要找到这个编码跟谁相加能归零即可，找到的编码对应的正数值加负号就是要求的值题目中10100010对应的是01011110，所以是-94，溢出可以理解为一个圆，一条特殊的直径一端对应的是0的位置，一端对应的是永远取不到的溢出处，从0处逆时针可以达到最大，顺时针可以到达最小，1和-1，最大和最小分别对称，从相应的方向溢出对应上溢出和下溢出。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438783,"discussion_content":"时针可以帮助理解，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550006453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65644,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1549533269,"is_pvip":false,"replies":[{"id":"23235","content":"由于我们不需要两个0，所以10表示当前范围内最小的负数。同样的位数，无符号数要比有符号数多一倍再加1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1549557602,"ip_address":"","comment_id":65644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549533269","product_id":100021201,"comment_content":"有符号数，比如考虑仅有 2 位二进制位的情况，表示的二进制数有<br>00 ，01 ，10 ，11 ，此处全为原码，十进制数为 -1 ，0 ，1 。<br>在有符号情况下，是不是可以认为二进制原码 01 和 10 都可以表示十进制数 0 ？无符号情况下，二进制表示的数据个数，比有符号表示的总是多一个？<br>谢谢 ～ 新年快乐","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438533,"discussion_content":"由于我们不需要两个0，所以10表示当前范围内最小的负数。同样的位数，无符号数要比有符号数多一倍再加1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549557602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61660,"user_name":"李加春","can_delete":false,"product_type":"c1","uid":1234955,"ip_address":"","ucode":"900C07F079A728","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/0b/1c5fbd3a.jpg","comment_is_top":false,"comment_ctime":1547770060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547770060","product_id":100021201,"comment_content":"思路很赞👍","like_count":0},{"had_liked":false,"id":57735,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1546877813,"is_pvip":false,"replies":[{"id":"20793","content":"这里提示了是有符号数，而最高位表示负数，按照负数使用二进制的补码，这里是指补码","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546905288,"ip_address":"","comment_id":57735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546877813","product_id":100021201,"comment_content":"请问老师，最后给出的思考题，并没有说明是原码还是补码，为什么下面大家都是当作补码来使用了呢？是我太愚笨，看了即便都没看懂。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435728,"discussion_content":"这里提示了是有符号数，而最高位表示负数，按照负数使用二进制的补码，这里是指补码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546905288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57529,"user_name":"koei","can_delete":false,"product_type":"c1","uid":1129613,"ip_address":"","ucode":"16C31A52E22676","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8d/860cb97f.jpg","comment_is_top":false,"comment_ctime":1546828745,"is_pvip":false,"replies":[{"id":"20797","content":"不考虑第一位的符号位","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546905731,"ip_address":"","comment_id":57529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546828745","product_id":100021201,"comment_content":"2的n次方-1的二进制码在不考虑符号位的情况下是n-1位的1。   2的n次方应该是第n+1位是1,剩下的n位是0,所以2的n次方-1不应该是n位的全是1吗，为什么是n-1位的1呢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435628,"discussion_content":"不考虑第一位的符号位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546905731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56854,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1043160,"ip_address":"","ucode":"64BD69C84EE6A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erdpKbFgRLnicjsr6qkrPVKZcFrG3aS2V51HhjFP6Mh2CYcjWric9ud1Qiclo8A49ia3eZ1NhibDib0AOCg/132","comment_is_top":false,"comment_ctime":1546568924,"is_pvip":false,"replies":[{"id":"20589","content":"首先，负数是使用补码来表示的，所以-15的二进制是10001，而不是11111。<br>另外，我们规定10000是-16，而不是-0，是因为00000已经表示正0，没有必要两个0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546650038,"ip_address":"","comment_id":56854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546568924","product_id":100021201,"comment_content":"假设五位二进制。最高位为符号位，左边为最高位。<br>那么抛去符号位，还剩四位，四位最大值为1111，对应十进制是15,也即(2^4)-1<br>最大的值15变换符号，不就成了最小的值了吗？为什么最小的值不是-15,而是-16?","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435280,"discussion_content":"首先，负数是使用补码来表示的，所以-15的二进制是10001，而不是11111。\n另外，我们规定10000是-16，而不是-0，是因为00000已经表示正0，没有必要两个0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546650038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56525,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1043160,"ip_address":"","ucode":"64BD69C84EE6A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erdpKbFgRLnicjsr6qkrPVKZcFrG3aS2V51HhjFP6Mh2CYcjWric9ud1Qiclo8A49ia3eZ1NhibDib0AOCg/132","comment_is_top":false,"comment_ctime":1546482159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546482159","product_id":100021201,"comment_content":"Java中<br>\tint是４字节，一个字节８位，所以是３２位。由于ｉｎｔ是有符号数，除去符号位，ｉｎｔ实际能表达的数值范围只有３１位。也即-2^31 到2^31<br>\t同理long是8字节　范围为:-2^63 到　2^63","like_count":0},{"had_liked":false,"id":56470,"user_name":"风中之心","can_delete":false,"product_type":"c1","uid":1097711,"ip_address":"","ucode":"027633377D9D6B","user_header":"https://static001.geekbang.org/account/avatar/00/10/bf/ef/6f6a0c1f.jpg","comment_is_top":false,"comment_ctime":1546474392,"is_pvip":false,"replies":[{"id":"20456","content":"2^31是1后面更31个0，2^31-1就是31个1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546556305,"ip_address":"","comment_id":56470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546474392","product_id":100021201,"comment_content":"老师，为啥正数是2^31-1这个1代表啥呀，一直很懵懂","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435053,"discussion_content":"2^31是1后面更31个0，2^31-1就是31个1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546556305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55276,"user_name":"OzoraTsubasa","can_delete":false,"product_type":"c1","uid":1298651,"ip_address":"","ucode":"A29805845F58BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/db/8b8173d0.jpg","comment_is_top":false,"comment_ctime":1546087065,"is_pvip":false,"replies":[{"id":"20042","content":"可以考虑成时钟，溢出相当于下午1点，又回到了凌晨1点，用12取模","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546148600,"ip_address":"","comment_id":55276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546087065","product_id":100021201,"comment_content":"老师 关于 计算机数据溢出，就是相当于取模 怎么理解啊 这句话始终理解不透 导致i-j那个图也看不懂。应该怎么理解这句话 ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434724,"discussion_content":"可以考虑成时钟，溢出相当于下午1点，又回到了凌晨1点，用12取模","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546148600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55118,"user_name":"React","can_delete":false,"product_type":"c1","uid":1100554,"ip_address":"","ucode":"A176EF0AA242B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/0a/6a9e6602.jpg","comment_is_top":false,"comment_ctime":1546047315,"is_pvip":false,"replies":[{"id":"20011","content":"可以的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546062793,"ip_address":"","comment_id":55118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546047315","product_id":100021201,"comment_content":"八位有符号数，127跟256取模，得出的值是-128。可以这么理解吗","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434678,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546062793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54946,"user_name":"OzoraTsubasa","can_delete":false,"product_type":"c1","uid":1298651,"ip_address":"","ucode":"A29805845F58BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/db/8b8173d0.jpg","comment_is_top":false,"comment_ctime":1545986813,"is_pvip":false,"replies":[{"id":"19974","content":"轴线上有正负区间，相当于两倍的2^(n-1)，就是2^n。你关于括号的理解是对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546018528,"ip_address":"","comment_id":54946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545986813","product_id":100021201,"comment_content":"老师 对您这个i-j 的解释图我一个问题：就是蓝色区间值为什么突然是2^n 而轴线上一直都是2^(n-1)，我想问为什么2^(n-1）怎么变成2^n 还要就是您博文中用到的参数^(n-1)加挂号代表幂上-1 ，不带挂号2^n-1 代表的是2^n值-1 是吧 老师","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434626,"discussion_content":"轴线上有正负区间，相当于两倍的2^(n-1)，就是2^n。你关于括号的理解是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546018528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54937,"user_name":"OzoraTsubasa","can_delete":false,"product_type":"c1","uid":1298651,"ip_address":"","ucode":"A29805845F58BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/db/8b8173d0.jpg","comment_is_top":false,"comment_ctime":1545985349,"is_pvip":false,"replies":[{"id":"19975","content":"对于正数，你可以考虑无符号的情况，例如1111就是15，也就是2^4-1","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546018638,"ip_address":"","comment_id":54937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545985349","product_id":100021201,"comment_content":"老师 Int最大值是2^31-1  这个-1是怎么来的，为什么需要做－1的操作？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434620,"discussion_content":"对于正数，你可以考虑无符号的情况，例如1111就是15，也就是2^4-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546018638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54913,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1545980901,"is_pvip":false,"replies":[{"id":"19976","content":"嗯 画成一个圈是个好建议","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546018711,"ip_address":"","comment_id":54913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545980901","product_id":100021201,"comment_content":"这个取模的过程，比一般的取模过程更加复杂；<br>个人感觉把图画成一个圆圈，更容易让人理解。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434608,"discussion_content":"嗯 画成一个圈是个好建议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546018711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54451,"user_name":"🌙照常升起","can_delete":false,"product_type":"c1","uid":1341219,"ip_address":"","ucode":"BF706897AB15C2","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/23/60582af0.jpg","comment_is_top":false,"comment_ctime":1545872937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545872937","product_id":100021201,"comment_content":"1.计算机都是通过补码进行运算<br>2.正数的原码、反码、补码都是其本身<br>3.负数的反码是符号位不变，其余位取反<br>4.负数的补码是其反码加1<br>5.3-2 == 3+（-2）也就是3的补码加上-2的补码<br>  3补码：0000...0011<br>-2反码：1111...0001<br>-2补码：1111...0010<br>3-2 = 1 (0000...0001)<br>","like_count":0},{"had_liked":false,"id":54440,"user_name":"zhaimy","can_delete":false,"product_type":"c1","uid":1080524,"ip_address":"","ucode":"E40607BC994D66","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/cc/140c4b61.jpg","comment_is_top":false,"comment_ctime":1545871393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545871393","product_id":100021201,"comment_content":"思考题:<br>方法一:取反+1<br>方法二:-1后取反","like_count":0},{"had_liked":false,"id":53883,"user_name":"道爷","can_delete":false,"product_type":"c1","uid":1059753,"ip_address":"","ucode":"809DD149710C72","user_header":"https://static001.geekbang.org/account/avatar/00/10/2b/a9/b6ee624d.jpg","comment_is_top":false,"comment_ctime":1545748053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545748053","product_id":100021201,"comment_content":"老师，int32位的最小负数没整明白。最大数是0…111（31个1），那最小负数难道不是1…111（31个1）吗，为啥后面全是0，如果全是0那不就是-0，最后还是0嘛。没搞懂，我好方。😳😳","like_count":0},{"had_liked":false,"id":53823,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1545735493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545735493","product_id":100021201,"comment_content":"10100010说的是补码，减1取反求原码即可。","like_count":0},{"had_liked":false,"id":53810,"user_name":"樊少皇","can_delete":false,"product_type":"c1","uid":1243453,"ip_address":"","ucode":"17D7928D8FFFDB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/3d/3e20a86a.jpg","comment_is_top":false,"comment_ctime":1545732462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545732462","product_id":100021201,"comment_content":"思考题：<br>1、1010 0010<br>     除符号位取反  1101 1101<br>     加1  1101 1110<br>     转十进制  -94<br>2、1010 0010<br>      减1  1010 0001<br>      除符号位取反 1101 1110<br>      转十进制 -94<br>第一种方法利用一个负数的补码的补码是它本身。<br>老师可以评论一下第二种方法吗？我一开始的想法是你给出的是要求的数的补码，那就逆向运算得到原码，虽然结果是对的，但是感觉减1那里好像有问题。<br>","like_count":0},{"had_liked":false,"id":53728,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1545715067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545715067","product_id":100021201,"comment_content":"土木出身的我表示看了又忘","like_count":0},{"had_liked":false,"id":53542,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1545667080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545667080","product_id":100021201,"comment_content":"第二张图，取模的除数的范围感觉有点小问题。","like_count":0},{"had_liked":false,"id":53539,"user_name":"Wing·三金","can_delete":false,"product_type":"c1","uid":1341402,"ip_address":"","ucode":"6B9F5822C3717F","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","comment_is_top":false,"comment_ctime":1545666550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545666550","product_id":100021201,"comment_content":"解法1<br>先求反码：10100010 - 1 = 10100001<br>再求原码，除了符号位取反：11011110<br>其相反数为 01011110 = 94，所以该数是-94<br><br>解法2<br>10100010的十进制 = 100000000 - 10100010的相反数 = 01011110的相反数 = -94","like_count":0},{"had_liked":false,"id":53124,"user_name":"李嘉鹏","can_delete":false,"product_type":"c1","uid":1022999,"ip_address":"","ucode":"730E44B3535DF9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/17/6ffd80f6.jpg","comment_is_top":false,"comment_ctime":1545609122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545609122","product_id":100021201,"comment_content":"0 - 0x5D - 1 ","like_count":0}]}