{"id":132889,"title":"20 | RocketMQ Producer源码分析：消息生产的实现过程","content":"<p>你好，我是李玥。</p><p>对于消息队列来说，它最核心的功能就是收发消息。也就是消息生产和消费这两个流程。我们在之前的课程中提到了消息队列一些常见问题，比如，“如何保证消息不会丢失？”“为什么会收到重复消息？”“消费时为什么要先执行消费业务逻辑再确认消费？”，针对这些问题，我讲过它们的实现原理，这些最终落地到代码上，都包含在这一收一发两个流程中。</p><p>在接下来的两节课中，我会带你一起通过分析源码的方式，详细学习一下这两个流程到底是如何实现的。你在日常使用消息队列的时候，遇到的大部分问题，更多的是跟Producer和Consumer，也就是消息队列的客户端，关联更紧密。搞清楚客户端的实现原理和代码中的细节，将对你日后使用消息队列时进行问题排查有非常大的帮助。所以，我们这两节课的重点，也将放在分析客户端的源代码上。</p><p>秉着先易后难的原则，我们选择代码风格比较简明易懂的RocketMQ作为分析对象。一起分析RocketMQ的Producer的源代码，学习消息生产的实现过程。</p><p>在分析源代码的过程中，我们的首要目的就是搞清楚功能的实现原理，另外，最好能有敏锐的嗅觉，善于发现代码中优秀的设计和巧妙构思，学习、总结并记住这些方法。在日常开发中，再遇到类似场景，你就可以直接拿来使用。</p><!-- [[[read_end]]] --><p>我们使用当前最新的release版本release-4.5.1进行分析，使用Git在GitHub上直接下载源码到本地：</p><pre><code>git clone git@github.com:apache/rocketmq.git\ncd rocketmq\ngit checkout release-4.5.1\n</code></pre><p>客户端是一个单独的Module，在rocketmq/client目录中。</p><h2>从单元测试看Producer API的使用</h2><p>在专栏之前的课程《<a href=\"https://time.geekbang.org/column/article/115519\">09 | 学习开源代码该如何入手？</a>》中我和你讲过，不建议你从main()方法入手去分析源码，而是带着问题去分析。我们本节课的问题是非常清晰的，就是要搞清楚Producer是如何发消息的。带着这个问题，接下来我们该如何分析源码呢？</p><p>我的建议是，先看一下单元测试用例。因为，一般单元测试中，每一个用例就是测试代码中的一个局部或者说是一个小流程。那对于一些比较完善的开源软件，它们的单元测试覆盖率都非常高，很容易找到我们关心的那个流程所对应的测试用例。我们的源码分析，就可以从这些测试用例入手，一步一步跟踪其方法调用链路，理清实现过程。</p><p>首先我们先分析一下RocketMQ客户端的单元测试，看看Producer提供哪些API，更重要的是了解这些API应该如何使用。</p><p>Producer的所有测试用例都在同一个测试类\"org.apache.rocketmq.client.producer.DefaultMQProducerTest\"中，看一下这个测试类中的所有单元测试方法，大致可以了解到Producer的主要功能。</p><p>这个测试类的主要测试方法如下：</p><blockquote>\n<p>init<br>\nterminate<br>\ntestSendMessage_ZeroMessage<br>\ntestSendMessage_NoNameSrv<br>\ntestSendMessage_NoRoute<br>\ntestSendMessageSync_Success<br>\ntestSendMessageSync_WithBodyCompressed<br>\ntestSendMessageAsync_Success<br>\ntestSendMessageAsync<br>\ntestSendMessageAsync_BodyCompressed<br>\ntestSendMessageSync_SuccessWithHook</p>\n</blockquote><p>其中init和terminate是测试开始初始化和测试结束销毁时需要执行的代码，其他以testSendMessage开头的方法都是在各种情况和各种场景下发送消息的测试用例，通过这些用例的名字，你可以大致看出测试的功能。</p><p>比如，testSendMessageSync和testSendMessageAsync分别是测试同步发送和异步发送的用例，testSendMessageSync_WithBodyCompressed是压缩消息发送的测试用例，等等。</p><p>像RocketMQ这种开源项目，前期花费大量时间去编写测试用例，看似浪费时间，实际上会节省非常多后期联调测试、集成测试、以及上线后出现问题解决问题的时间，并且能够有效降低线上故障的概率，总体来说是非常划算的。强烈建议你在日常进行开发的过程中，也多写一些测试用例，尽量把单元测试的覆盖率做到50%以上。</p><p>RockectMQ的Producer入口类为“org.apache.rocketmq.client.producer.DefaultMQProducer”，大致浏览一下代码和类的继承关系，我整理出Producer相关的几个核心类和接口如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/09/ee719ca65c6fb1d43c10c60512913209.png?wh=1834*824\" alt=\"\"></p><p>这里面RocketMQ使用了一个设计模式：门面模式（Facade Pattern）。</p><blockquote>\n<p>门面模式主要的作用是给客户端提供了一个可以访问系统的接口，隐藏系统内部的复杂性。</p>\n</blockquote><p>接口MQProducer就是这个模式中的门面，客户端只要使用这个接口就可以访问Producer实现消息发送的相关功能，从使用层面上来说，不必再与其他复杂的实现类打交道了。</p><p>类DefaultMQProducer实现了接口MQProducer，它里面的方法实现大多没有任何的业务逻辑，只是封装了对其他实现类的方法调用，也可以理解为是门面的一部分。Producer的大部分业务逻辑的实现都在类DefaultMQProducerImpl中，这个类我们会在后面重点分析其实现。</p><p>有的时候，我们的实现分散在很多的内部类中，不方便用接口来对外提供服务，你就可以仿照RocketMQ的这种方式，使用门面模式来隐藏内部实现，对外提供服务。</p><p>接口MQAdmin定义了一些元数据管理的方法，在消息发送过程中会用到。</p><h2>启动过程</h2><p>通过单元测试中的代码可以看到，在init()和terminate()这两个测试方法中，分别执行了Producer的start和shutdown方法，说明在RocketMQ中，Producer是一个有状态的服务，在发送消息之前需要先启动Producer。这个启动过程，实际上就是为了发消息做的准备工作，所以，在分析发消息流程之前，我们需要先理清Producer中维护了哪些状态，在启动过程中，Producer都做了哪些初始化的工作。有了这个基础才能分析其发消息的实现流程。</p><p>首先从测试用例的方法init()入手：</p><pre><code>  @Before\n  public void init() throws Exception {\n      String producerGroupTemp = producerGroupPrefix + System.currentTimeMillis();\n      producer = new DefaultMQProducer(producerGroupTemp);\n      producer.setNamesrvAddr(&quot;127.0.0.1:9876&quot;);\n      producer.setCompressMsgBodyOverHowmuch(16);\n\n      //省略构造测试消息的代码\n\n      producer.start();\n\n      //省略用于测试构造mock的代码\n  }\n</code></pre><p>这段初始化代码的逻辑非常简单，就是创建了一个DefaultMQProducer的实例，为它初始化一些参数，然后调用start方法启动它。接下来我们跟进start方法的实现，继续分析其初始化过程。</p><p>DefaultMQProducer#start()方法中直接调用了DefaultMQProducerImpl#start()方法，我们直接来看这个方法的代码：</p><pre><code>public void start(final boolean startFactory) throws MQClientException {\n    switch (this.serviceState) {\n        case CREATE_JUST:\n            this.serviceState = ServiceState.START_FAILED;\n\n            // 省略参数检查和异常情况处理的代码\n\n            // 获取MQClientInstance的实例mQClientFactory，没有则自动创建新的实例\n            this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQProducer, rpcHook);\n            // 在mQClientFactory中注册自己\n            boolean registerOK = mQClientFactory.registerProducer(this.defaultMQProducer.getProducerGroup(), this);\n            // 省略异常处理代码\n\n            // 启动mQClientFactory\n            if (startFactory) {\n                mQClientFactory.start();\n            }\n            this.serviceState = ServiceState.RUNNING;\n            break;\n        case RUNNING:\n        case START_FAILED:\n        case SHUTDOWN_ALREADY:\n            // 省略异常处理代码\n        default:\n            break;\n    }\n    // 给所有Broker发送心跳\n    this.mQClientFactory.sendHeartbeatToAllBrokerWithLock();\n}\n</code></pre><p>这里面，RocketMQ使用一个成员变量serviceState来记录和管理自身的服务状态，这实际上是状态模式(State Pattern)这种设计模式的变种实现。</p><blockquote>\n<p>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来就像是改变了它的类。</p>\n</blockquote><p>与标准的状态模式不同的是，它没有使用状态子类，而是使用分支流程（switch-case）来实现不同状态下的不同行为，在管理比较简单的状态时，使用这种设计会让代码更加简洁。这种模式非常广泛地用于管理有状态的类，推荐你在日常开发中使用。</p><p>在设计状态的时候，有两个要点是需要注意的，第一是，不仅要设计正常的状态，还要设计中间状态和异常状态，否则，一旦系统出现异常，你的状态就不准确了，你也就很难处理这种异常状态。比如在这段代码中，RUNNING和SHUTDOWN_ALREADY是正常状态，CREATE_JUST是一个中间状态，START_FAILED是一个异常状态。</p><p>第二个要点是，将这些状态之间的转换路径考虑清楚，并在进行状态转换的时候，检查上一个状态是否能转换到下一个状态。比如，在这里，只有处于CREATE_JUST状态才能转换为RUNNING状态，这样就可以确保这个服务是一次性的，只能启动一次。从而避免了多次启动服务而导致的各种问题。</p><p>接下来看一下启动过程的实现：</p><ol>\n<li>通过一个单例模式（Singleton Pattern）的MQClientManager获取MQClientInstance的实例mQClientFactory，没有则自动创建新的实例；</li>\n<li>在mQClientFactory中注册自己；</li>\n<li>启动mQClientFactory；</li>\n<li>给所有Broker发送心跳。</li>\n</ol><p>这里面又使用了一个最简单的设计模式：单例模式。我们在这儿给出单例模式的定义，不再详细说明了，不会的同学需要自我反省一下，然后赶紧去复习设计模式基础去。</p><blockquote>\n<p>单例模式涉及一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n</blockquote><p>其中实例mQClientFactory对应的类MQClientInstance是RocketMQ客户端中的顶层类，大多数情况下，可以简单地理解为每个客户端对应类MQClientInstance的一个实例。这个实例维护着客户端的大部分状态信息，以及所有的Producer、Consumer和各种服务的实例，想要学习客户端整体结构的同学可以从分析这个类入手，逐步细化分析下去。</p><p>我们进一步分析一下MQClientInstance#start()中的代码：</p><pre><code>// 启动请求响应通道\nthis.mQClientAPIImpl.start();\n// 启动各种定时任务\nthis.startScheduledTask();\n// 启动拉消息服务\nthis.pullMessageService.start();\n// 启动Rebalance服务\nthis.rebalanceService.start();\n// 启动Producer服务\nthis.defaultMQProducer.getDefaultMQProducerImpl().start(false);\n</code></pre><p>这一部分代码的注释比较清楚，流程是这样的：</p><ol>\n<li>启动实例mQClientAPIImpl，其中mQClientAPIImpl是类MQClientAPIImpl的实例，封装了客户端与Broker通信的方法；</li>\n<li>启动各种定时任务，包括与Broker之间的定时心跳，定时与NameServer同步数据等任务；</li>\n<li>启动拉取消息服务；</li>\n<li>启动Rebalance服务；</li>\n<li>启动默认的Producer服务。</li>\n</ol><p>以上是Producer的启动流程。这里面有几个重要的类，你需要清楚它们的各自的职责。后续你在使用RocketMQ时，如果遇到问题需要调试代码，了解这几个重要类的职责会对你有非常大的帮助。</p><ol>\n<li>DefaultMQProducerImpl：Producer的内部实现类，大部分Producer的业务逻辑，也就是发消息的逻辑，都在这个类中。</li>\n<li>MQClientInstance：这个类中封装了客户端一些通用的业务逻辑，无论是Producer还是Consumer，最终需要与服务端交互时，都需要调用这个类中的方法；</li>\n<li>MQClientAPIImpl：这个类中封装了客户端服务端的RPC，对调用者隐藏了真正网络通信部分的具体实现；</li>\n<li>NettyRemotingClient：RocketMQ各进程之间网络通信的底层实现类。</li>\n</ol><h2>消息发送过程</h2><p>接下来我们一起分析Producer发送消息的流程。</p><p>在Producer的接口MQProducer中，定义了19个不同参数的发消息的方法，按照发送方式不同可以分成三类：</p><ul>\n<li>单向发送（Oneway）：发送消息后立即返回，不处理响应，不关心是否发送成功；</li>\n<li>同步发送（Sync）：发送消息后等待响应；</li>\n<li>异步发送（Async）：发送消息后立即返回，在提供的回调方法中处理响应。</li>\n</ul><p>这三类发送实现基本上是相同的，异步发送稍微有一点儿区别，我们看一下异步发送的实现方法\"DefaultMQProducerImpl#send()\"（对应源码中的1132行）：</p><pre><code>@Deprecated\npublic void send(final Message msg, final MessageQueueSelector selector, final Object arg, final SendCallback sendCallback, final long timeout)\n    throws MQClientException, RemotingException, InterruptedException {\n    final long beginStartTime = System.currentTimeMillis();\n    ExecutorService executor = this.getAsyncSenderExecutor();\n    try {\n        executor.submit(new Runnable() {\n            @Override\n            public void run() {\n                long costTime = System.currentTimeMillis() - beginStartTime;\n                if (timeout &gt; costTime) {\n                    try {\n                        try {\n                            sendSelectImpl(msg, selector, arg, CommunicationMode.ASYNC, sendCallback,\n                                timeout - costTime);\n                        } catch (MQBrokerException e) {\n                            throw new MQClientException(&quot;unknownn exception&quot;, e);\n                        }\n                    } catch (Exception e) {\n                        sendCallback.onException(e);\n                    }\n                } else {\n                    sendCallback.onException(new RemotingTooMuchRequestException(&quot;call timeout&quot;));\n                }\n            }\n\n        });\n    } catch (RejectedExecutionException e) {\n        throw new MQClientException(&quot;exector rejected &quot;, e);\n    }\n}\n</code></pre><p>我们可以看到，RocketMQ使用了一个ExecutorService来实现异步发送：使用asyncSenderExecutor的线程池，异步调用方法sendSelectImpl()，继续发送消息的后续工作，当前线程把发送任务提交给asyncSenderExecutor就可以返回了。单向发送和同步发送的实现则是直接在当前线程中调用方法sendSelectImpl()。</p><p>我们来继续看方法sendSelectImpl()的实现：</p><pre><code>// 省略部分代码\nMessageQueue mq = null;\n\n// 选择将消息发送到哪个队列（Queue）中\ntry {\n    List&lt;MessageQueue&gt; messageQueueList =\n        mQClientFactory.getMQAdminImpl().parsePublishMessageQueues(topicPublishInfo.getMessageQueueList());\n    Message userMessage = MessageAccessor.cloneMessage(msg);\n    String userTopic = NamespaceUtil.withoutNamespace(userMessage.getTopic(), mQClientFactory.getClientConfig().getNamespace());\n    userMessage.setTopic(userTopic);\n\n    mq = mQClientFactory.getClientConfig().queueWithNamespace(selector.select(messageQueueList, userMessage, arg));\n} catch (Throwable e) {\n    throw new MQClientException(&quot;select message queue throwed exception.&quot;, e);\n}\n\n// 省略部分代码\n\n// 发送消息\nif (mq != null) {\n    return this.sendKernelImpl(msg, mq, communicationMode, sendCallback, null, timeout - costTime);\n} else {\n    throw new MQClientException(&quot;select message queue return null.&quot;, null);\n}\n// 省略部分代码\n</code></pre><p>方法sendSelectImpl()中主要的功能就是选定要发送的队列，然后调用方法sendKernelImpl()发送消息。</p><p>选择哪个队列发送由MessageQueueSelector#select方法决定。在这里RocketMQ使用了策略模式（Strategy Pattern），来解决不同场景下需要使用不同的队列选择算法问题。</p><blockquote>\n<p>策略模式：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化。</p>\n</blockquote><p>RocketMQ提供了很多MessageQueueSelector的实现，例如随机选择策略，哈希选择策略和同机房选择策略等，如果需要，你也可以自己实现选择策略。之前我们的课程中提到过，如果要保证相同key消息的严格顺序，你需要使用哈希选择策略，或者提供一个自己实现的选择策略。</p><p>接下来我们再看一下方法sendKernelImpl()。这个方法的代码非常多，大约有200行，但逻辑比较简单，主要功能就是构建发送消息的头RequestHeader和上下文SendMessageContext，然后调用方法MQClientAPIImpl#sendMessage()，将消息发送给队列所在的Broker。</p><p>至此，消息被发送给远程调用的封装类MQClientAPIImpl，完成后续序列化和网络传输等步骤。</p><p>可以看到，RocketMQ的Producer整个发消息的流程，无论是同步发送还是异步发送，都统一到了同一个流程中。包括异步发送消息的实现，实际上也是通过一个线程池，在异步线程执行的调用和同步发送相同的底层方法来实现的。</p><p>在底层方法的代码中，依靠方法的一个参数来区分同步还是异步发送。这样实现的好处是，整个流程是统一的，很多同步异步共同的逻辑，代码可以复用，并且代码结构清晰简单，便于维护。</p><p>使用同步发送的时候，当前线程会阻塞等待服务端的响应，直到收到响应或者超时方法才会返回，所以在业务代码调用同步发送的时候，只要返回成功，消息就一定发送成功了。异步发送的时候，发送的逻辑都是在Executor的异步线程中执行的，所以不会阻塞当前线程，当服务端返回响应或者超时之后，Producer会调用Callback方法来给业务代码返回结果。业务代码需要在Callback中来判断发送结果。这和我们在之前的课程《<a href=\"https://time.geekbang.org/column/article/111488\">05 | 如何确保消息不会丢失？</a>》讲到的发送流程是完全一样的。</p><h2>小结</h2><p>这节课我带你分析了RocketMQ客户端消息生产的实现过程，包括Producer初始化和发送消息的主流程。Producer中包含的几个核心的服务都是有状态的，在Producer启动时，在MQClientInstance这个类中来统一来启动。在发送消息的流程中，RocketMQ分了三种发送方式：单向、同步和异步，这三种发送方式对应的发送流程基本是相同的，同步和异步发送是由已经封装好的MQClientAPIImpl类来分别实现的。</p><p>对于我们在分析代码中提到的几个重要的业务逻辑实现类，你最好能记住这几个类和它的功能，包括 ：DefaultMQProducerImpl封装了大部分Producer的业务逻辑，MQClientInstance封装了客户端一些通用的业务逻辑，MQClientAPIImpl封装了客户端与服务端的RPC，NettyRemotingClient实现了底层网络通信。</p><p>我在课程中，只能带你把主干流程分析清楚，但是很多细节并没有涉及，课后请你一定要按照流程把源代码仔细看一遍，仔细消化一下没有提及到的分支流程，将这两个流程绘制成详细的流程图或者时序图。</p><p>分析过程中提到的几个设计模式，是非常实用且常用的设计模式，希望你能充分理解并熟练运用。</p><h2>思考题</h2><p>你有没有注意到，在源码中，异步发送消息方法DefaultMQProducerImpl#send()(1132行)被开发者加了@Deprecated（弃用）注解，显然开发者也意识到了这种异步的实现存在一些问题，需要改进。请你结合我们专栏文章《<a href=\"https://time.geekbang.org/column/article/117272\">10 | 如何使用异步设计提升系统性能？</a>》中讲到的异步设计方法想一想，应该如何改进这个异步发送的流程？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":145352,"user_name":". 。o O","can_delete":false,"product_type":"c1","uid":1273146,"ip_address":"","ucode":"79767AC422D775","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/3a/dfda3cbd.jpg","comment_is_top":false,"comment_ctime":1572257095,"is_pvip":false,"replies":[{"id":56297,"content":"异步发送仍然可以保证严格顺序，但需要注意几点：\n\n1. 需要单线程异步发送；\n2. 需要记录一个递增流水号，保证每个发出的消息都有一个流水号，如果某个流水号的消息发送出错，需要重发这个流水号之后的所有消息。比如，连续异步发送12345这5条消息，假如已经异步发送了12345，然后异步检查发送结果的时候发现3发送失败了，需要从3开始重发。也就是按顺序重发345。\n3. 消费逻辑需要幂等，能接受2中的这种情况，也就是说，收到的消息有可能是：12（3丢了）45 345。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1572397823,"ip_address":"","comment_id":145352,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"请教老师一个问题,如果异步发送的话,就是把发送逻辑封装成任务放到线程池里去处理,那么是不是就没法保证消息的顺序性了呢?哪怕是通过key哈希到一个同一个队列,但是发送消息的任务执行先后顺序没法保证吧?","like_count":35},{"had_liked":false,"id":132615,"user_name":"微微一笑","can_delete":false,"product_type":"c1","uid":1250327,"ip_address":"","ucode":"CFA7ABE81D0B99","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/17/8763dced.jpg","comment_is_top":false,"comment_ctime":1568173245,"is_pvip":false,"replies":[{"id":50996,"content":"A1：这个参数是控制客户端在生产消费的时候会访问同一个主题的队列数量，假设一个主题有100个队列，对于每一个客户端来说，它没必要100个队列都访问，只需要使用其中的几个队列就行了。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。这两个参数是服务端参数，优先级是高于客户端控制的参数defaultTopicQueueNums的。perm是设置Topic读写等权限的参数，具体如何设置你需要去看一下文档。\n\nA3：如果局限于：“APP&#47;浏览器 --[http协议]--&gt;web 服务”这样的场景，受限于http协议，前端和web服务的交互一定是单向和同步的。一定要等待结果然后返回响应，但是，这种情况仍然可以使用异步的方法，这个我在“08答疑”中解释秒杀的时候其实已经给出了答案。很多同学不理解的原因是思维被web框架给限制住了。像spring web这种框架，它把处理web请求都给你封装好了，你只要写一个handler就行了，很方便。但是，这个handler只能是一个同步方法，它必须在返回值中给出响应结果，所以导致很多同学的思维转不过来这个弯儿。\n\n你可以结合我们讲的异步网络IO内容想一下，http协议发一个请求到服务端，就是发了一些数据过来，服务端回响应也就是在这个连接上给它返回一些数据回去就可以了。至于什么时候往回发响应数据，哪个线程来发，有要求吗？并没有。只要在超时之前发响应就可以了。我们讲得如何来实现异步网络IO的方法处理的不就是这种情况吗？\n\n这个过程不是说一定要做成和web框架一样的同步处理。\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568429329,"ip_address":"","comment_id":132615,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师好，先祝您节日快乐！！！您辛苦了~\n有几个疑问需要老师解答一下：\n①今天在看rocketMq源码过程中，发现DefaultMQProducer有个属性defaultTopicQueueNums，它是用来设置topic的ConsumeQueue的数量的吗？我之前的理解是，consumeQueue的数量是创建topic的时候指定的，跟producer没有关系，那这个参数又有什么作用呢？\n②在RocketMq的控制台上可以创建topic，需要指定writeQueueNums，readQueueNums，perm，这三个参数是有什么用呢？这里为什么要区分写队列跟读队列呢？不应该只有一个consumeQueue吗？\n③用户请求--&gt;异步处理---&gt;用户收到响应结果。异步处理的作用是：用更少的线程来接收更多的用户请求，然后异步处理业务逻辑。老师，异步处理完后，如何将结果通知给原先的用户呢？即使有回调接口，我理解也是给用户发个短信之类的处理，那结果怎么返回到定位到用户，并返回之前请求的页面上呢？需要让之前的请求线程阻塞吗？那也无法达到【用更少的线程来接收更多的用户请求】的目的丫。\n望老师能指点迷津~~~","like_count":23,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472352,"discussion_content":"异步发送仍然可以保证严格顺序，但需要注意几点：\n\n1. 需要单线程异步发送；\n2. 需要记录一个递增流水号，保证每个发出的消息都有一个流水号，如果某个流水号的消息发送出错，需要重发这个流水号之后的所有消息。比如，连续异步发送12345这5条消息，假如已经异步发送了12345，然后异步检查发送结果的时候发现3发送失败了，需要从3开始重发。也就是按顺序重发345。\n3. 消费逻辑需要幂等，能接受2中的这种情况，也就是说，收到的消息有可能是：12（3丢了）45 345。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572397823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585940,"discussion_content":"晕倒 这是rabbitmq的实现方式吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661913603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":472352,"ip_address":"广东","group_id":0},"score":585940,"extra":""}]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637260,"discussion_content":"要保证顺序，肯定不能用线程池了，或者说线程池大小得是 1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708223188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152755,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1574075752,"is_pvip":false,"replies":[{"id":58723,"content":"我理解主要的原因除了超时时间的计算不准确以外，更重要的原因是这个异步方法还有改进的空间，其实可以直接结合Netty做到不需要Executor。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1574123954,"ip_address":"","comment_id":152755,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，异步发送为什么是弃用，还是没有看懂，感觉超时时间的计算没有错啊…","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474927,"discussion_content":"我理解主要的原因除了超时时间的计算不准确以外，更重要的原因是这个异步方法还有改进的空间，其实可以直接结合Netty做到不需要Executor。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574123954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147297,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572855479,"is_pvip":false,"replies":[{"id":57124,"content":"给认真思考完成作业的同学点赞👍！\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573006661,"ip_address":"","comment_id":147297,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"课后作业，请老师指正：\n从方法的注释看，说是因为异常处理和超时时间的语义不对。\n异常处理这块我觉得应该是采用统一的异常处理，而不应该是有的异常抛出，而有的异常通过回调方法返回客户端。\n再说超时时间的错误语义，严格来说应该是不准确的超时时间，因为在run方法里进行时间判断（if (timeout &gt; costTime)）实际上已经是开始执行当前线程的时间，而之前的排队时间没有算，因此我改进的方法应该是这样：\nCompletableFuture.runAsync(() -&gt; {\n            long costTime = System.currentTimeMillis() - beginStartTime;\n            if (timeout &gt; costTime) {\n                try {\n                    sendDefaultImpl(msg, CommunicationMode.ASYNC, sendCallback, timeout - costTime);\n                } catch (Exception e) {\n                    sendCallback.onException(e);\n                }\n            } else {\n                sendCallback.onException(\n                        new RemotingTooMuchRequestException(&quot;DEFAULT ASYNC send call timeout&quot;));\n            }\n        }, executor);","like_count":7,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474927,"discussion_content":"我理解主要的原因除了超时时间的计算不准确以外，更重要的原因是这个异步方法还有改进的空间，其实可以直接结合Netty做到不需要Executor。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574123954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132382,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1568104167,"is_pvip":false,"replies":[{"id":50691,"content":"个人建议学习Java或者Go，这两种语言都有不错的生态系统，都可以用来构建大规模集群。\n\n相对来说，Java的生态系统更强大，Go比较年轻，有很多Java不具备的语言特性。\n\nPython本来只是一门脚本语言，特别适合开发机器学习程序而火起来了，如果你不是从事机器学习相关的研发，不太建议作为第一语言来学习。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568165136,"ip_address":"","comment_id":132382,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"       编程语言的话Python或Go可以么？极客时间里都有购买，就是忙着其它课程的学习，一直没顾的上编程语言的学习。\n       从开始一路跟到现在：算是少数一直在完全没有缺的课；前期一直遍边学习边针对开篇时的学习目标针对当下工作环境的Nosql DB和MQ使用率的低下的问题找解决思路和方案，课后笔记主要同样集中在思路以及针对思路的困惑查疑上，代码这块完全没顾上。虽然代码的思路看的懂，发现动手能力确实非常欠缺。一路学到现在梳理到现在整体方案大致定下来：以及早期的部分课程的结束；课程的主要方案自己估计在掌握思路的基础上去补强Coding能力。虽然DBA的Coding能力都比较烂，不过还是得边学边啃下来；逼自己一下总能勉强写出来，估计就是效率问题、、、MQ这块PY或GO哪种更合适，或者说都可以？\n        感谢老师一路的辛勤授业：授课之余尽力去帮助学生们解惑，让我们能一路走来一路成长；愿老师教师节快乐，谢谢老师的分享。","like_count":6,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466905,"discussion_content":"个人建议学习Java或者Go，这两种语言都有不错的生态系统，都可以用来构建大规模集群。\n\n相对来说，Java的生态系统更强大，Go比较年轻，有很多Java不具备的语言特性。\n\nPython本来只是一门脚本语言，特别适合开发机器学习程序而火起来了，如果你不是从事机器学习相关的研发，不太建议作为第一语言来学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568165136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132757,"user_name":"墙角儿的花","can_delete":false,"product_type":"c1","uid":1258474,"ip_address":"","ucode":"EE5CAD76175CCF","user_header":"","comment_is_top":false,"comment_ctime":1568214192,"is_pvip":false,"replies":[{"id":50886,"content":"有一个问题你需要考虑，你是不是需要为每一个会话（比如，张三和李四之间开始聊天，成为一个会话）在MQ中凑创建一个Topic呢？这样会导致MQ集群中的Topic数量非常多。假设你的系统注册用户数是n，理论上最多会需要 n x n 个Topic，这还没有计算用户拉的群。\n\n对于海量的Topic数量，RocketMQ和Kafka都不是太好的选择。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568251706,"ip_address":"","comment_id":132757,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师 对于im服务器集群，客户端的socket均布在各个服务器，目标socket不在同一个服务器上时，服务器间需要转发消息，这个场景需要低延迟无需持久化，服务器间用redis的发布订阅，因其走内存较快，即使断电还可以走库。im服务器和入库服务间用其他mq解耦，因为这个环节需要持久化，所以选rocketmq或kafka，但kafka会延迟批量发布消息 所以选rocketmq，这两个环节的mq选型可行吗。","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466905,"discussion_content":"个人建议学习Java或者Go，这两种语言都有不错的生态系统，都可以用来构建大规模集群。\n\n相对来说，Java的生态系统更强大，Go比较年轻，有很多Java不具备的语言特性。\n\nPython本来只是一门脚本语言，特别适合开发机器学习程序而火起来了，如果你不是从事机器学习相关的研发，不太建议作为第一语言来学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568165136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147211,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572841004,"is_pvip":false,"replies":[{"id":57129,"content":"PullConsumer：业务代码在需要的时候调用consumer.pullxxxx方法从consumer拉消息；PushConsumer：当有消息的时候，consumer会自动调用messageListener(业务处理消息的代码)。\n\n这两种方式主要是为了方便使用者进行线程控制，没有什么本质区别。\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573007518,"ip_address":"","comment_id":147211,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师继续请教问题：\n1.DefaultMQPullConsumer和DefaultMQPushConsumer有什么区别\n2.为什么pullConsumer的启动和producer的启动在同一个start方法里（最终都在MQClientInstance#start里）\n3.rebalanceService服务是干嘛的","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467109,"discussion_content":"有一个问题你需要考虑，你是不是需要为每一个会话（比如，张三和李四之间开始聊天，成为一个会话）在MQ中凑创建一个Topic呢？这样会导致MQ集群中的Topic数量非常多。假设你的系统注册用户数是n，理论上最多会需要 n x n 个Topic，这还没有计算用户拉的群。\n\n对于海量的Topic数量，RocketMQ和Kafka都不是太好的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568251706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2019655,"avatar":"","nickname":"Geek_92d619","note":"","ucode":"BE0E322B9178E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349883,"discussion_content":"老师，我想问一下，这里为什么要考虑为每个会话创建一个Topic，这是出于什么样的考虑？用同一个topic，再通过其他自定义标记来区分会话不行么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613616303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101526,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/d6/ab8e6178.jpg","nickname":"R师傅","note":"","ucode":"74FC6975E881B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346793,"discussion_content":"老师，我们是用rabbitmq做的消息中间件，但是也遇到了queue size暴涨的问题。网上很多STOMP over websokect的sample，如果中间件是MQ broker，好像都是一个user创建一个queue的方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612065085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178891,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1581847391,"is_pvip":false,"replies":[{"id":69994,"content":"A1: 因为它服务的类没有设计成线程安全的，所以也没必要用volatile关键字。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。因为对主题来说，生产者的实例数和消费者的实例数是没有关系的，所以这两个参数是不关联的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1582246785,"ip_address":"","comment_id":178891,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"1、为什么ServiceState变量不设置成volatile呢？\n2、消费者MessageQueue(readQueueNums)怎么和生产者MessageQueue(writeQueueNums)关联起来的呢？比如readQueueNums=19个，writeQueueNums=23个，它们是怎么关联的呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484008,"discussion_content":"A1: 因为它服务的类没有设计成线程安全的，所以也没必要用volatile关键字。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。因为对主题来说，生产者的实例数和消费者的实例数是没有关系的，所以这两个参数是不关联的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582246785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151559,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1573740020,"is_pvip":false,"replies":[{"id":58287,"content":"这两个方法没有做到线程安全，但是这两个方法的实现内部，调用的方法都是线程安全的方法。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573779248,"ip_address":"","comment_id":151559,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"DefaultMQProducerImpl的start和shutdown方法没有加同步，serviceState也只是一个普通成员变量没加volatile，不会有线程安全问题吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474533,"discussion_content":"这两个方法没有做到线程安全，但是这两个方法的实现内部，调用的方法都是线程安全的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573779248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135155,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1569046724,"is_pvip":false,"replies":[{"id":51965,"content":"分别在哪两个地方执行的2次启动呢？\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569202847,"ip_address":"","comment_id":135155,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"看了Rocketmq producer源码，关于producer这块有个疑问不知道能否请教下？就是producer启动过程中为什么MQClientInstance mQClientFactory.start()这个方法需要被执行2次？2次的作用分别是什么？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468071,"discussion_content":"分别在哪两个地方执行的2次启动呢？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569202847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145352,"user_name":". 。o O","can_delete":false,"product_type":"c1","uid":1273146,"ip_address":"","ucode":"79767AC422D775","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/3a/dfda3cbd.jpg","comment_is_top":false,"comment_ctime":1572257095,"is_pvip":false,"replies":[{"id":56297,"content":"异步发送仍然可以保证严格顺序，但需要注意几点：\n\n1. 需要单线程异步发送；\n2. 需要记录一个递增流水号，保证每个发出的消息都有一个流水号，如果某个流水号的消息发送出错，需要重发这个流水号之后的所有消息。比如，连续异步发送12345这5条消息，假如已经异步发送了12345，然后异步检查发送结果的时候发现3发送失败了，需要从3开始重发。也就是按顺序重发345。\n3. 消费逻辑需要幂等，能接受2中的这种情况，也就是说，收到的消息有可能是：12（3丢了）45 345。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1572397823,"ip_address":"","comment_id":145352,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"请教老师一个问题,如果异步发送的话,就是把发送逻辑封装成任务放到线程池里去处理,那么是不是就没法保证消息的顺序性了呢?哪怕是通过key哈希到一个同一个队列,但是发送消息的任务执行先后顺序没法保证吧?","like_count":35,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472352,"discussion_content":"异步发送仍然可以保证严格顺序，但需要注意几点：\n\n1. 需要单线程异步发送；\n2. 需要记录一个递增流水号，保证每个发出的消息都有一个流水号，如果某个流水号的消息发送出错，需要重发这个流水号之后的所有消息。比如，连续异步发送12345这5条消息，假如已经异步发送了12345，然后异步检查发送结果的时候发现3发送失败了，需要从3开始重发。也就是按顺序重发345。\n3. 消费逻辑需要幂等，能接受2中的这种情况，也就是说，收到的消息有可能是：12（3丢了）45 345。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572397823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585940,"discussion_content":"晕倒 这是rabbitmq的实现方式吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661913603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":472352,"ip_address":"广东","group_id":0},"score":585940,"extra":""}]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637260,"discussion_content":"要保证顺序，肯定不能用线程池了，或者说线程池大小得是 1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708223188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132615,"user_name":"微微一笑","can_delete":false,"product_type":"c1","uid":1250327,"ip_address":"","ucode":"CFA7ABE81D0B99","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/17/8763dced.jpg","comment_is_top":false,"comment_ctime":1568173245,"is_pvip":false,"replies":[{"id":50996,"content":"A1：这个参数是控制客户端在生产消费的时候会访问同一个主题的队列数量，假设一个主题有100个队列，对于每一个客户端来说，它没必要100个队列都访问，只需要使用其中的几个队列就行了。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。这两个参数是服务端参数，优先级是高于客户端控制的参数defaultTopicQueueNums的。perm是设置Topic读写等权限的参数，具体如何设置你需要去看一下文档。\n\nA3：如果局限于：“APP&#47;浏览器 --[http协议]--&gt;web 服务”这样的场景，受限于http协议，前端和web服务的交互一定是单向和同步的。一定要等待结果然后返回响应，但是，这种情况仍然可以使用异步的方法，这个我在“08答疑”中解释秒杀的时候其实已经给出了答案。很多同学不理解的原因是思维被web框架给限制住了。像spring web这种框架，它把处理web请求都给你封装好了，你只要写一个handler就行了，很方便。但是，这个handler只能是一个同步方法，它必须在返回值中给出响应结果，所以导致很多同学的思维转不过来这个弯儿。\n\n你可以结合我们讲的异步网络IO内容想一下，http协议发一个请求到服务端，就是发了一些数据过来，服务端回响应也就是在这个连接上给它返回一些数据回去就可以了。至于什么时候往回发响应数据，哪个线程来发，有要求吗？并没有。只要在超时之前发响应就可以了。我们讲得如何来实现异步网络IO的方法处理的不就是这种情况吗？\n\n这个过程不是说一定要做成和web框架一样的同步处理。\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568429329,"ip_address":"","comment_id":132615,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师好，先祝您节日快乐！！！您辛苦了~\n有几个疑问需要老师解答一下：\n①今天在看rocketMq源码过程中，发现DefaultMQProducer有个属性defaultTopicQueueNums，它是用来设置topic的ConsumeQueue的数量的吗？我之前的理解是，consumeQueue的数量是创建topic的时候指定的，跟producer没有关系，那这个参数又有什么作用呢？\n②在RocketMq的控制台上可以创建topic，需要指定writeQueueNums，readQueueNums，perm，这三个参数是有什么用呢？这里为什么要区分写队列跟读队列呢？不应该只有一个consumeQueue吗？\n③用户请求--&gt;异步处理---&gt;用户收到响应结果。异步处理的作用是：用更少的线程来接收更多的用户请求，然后异步处理业务逻辑。老师，异步处理完后，如何将结果通知给原先的用户呢？即使有回调接口，我理解也是给用户发个短信之类的处理，那结果怎么返回到定位到用户，并返回之前请求的页面上呢？需要让之前的请求线程阻塞吗？那也无法达到【用更少的线程来接收更多的用户请求】的目的丫。\n望老师能指点迷津~~~","like_count":23,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467038,"discussion_content":"A1：这个参数是控制客户端在生产消费的时候会访问同一个主题的队列数量，假设一个主题有100个队列，对于每一个客户端来说，它没必要100个队列都访问，只需要使用其中的几个队列就行了。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。这两个参数是服务端参数，优先级是高于客户端控制的参数defaultTopicQueueNums的。perm是设置Topic读写等权限的参数，具体如何设置你需要去看一下文档。\n\nA3：如果局限于：“APP/浏览器 --[http协议]--&amp;gt;web 服务”这样的场景，受限于http协议，前端和web服务的交互一定是单向和同步的。一定要等待结果然后返回响应，但是，这种情况仍然可以使用异步的方法，这个我在“08答疑”中解释秒杀的时候其实已经给出了答案。很多同学不理解的原因是思维被web框架给限制住了。像spring web这种框架，它把处理web请求都给你封装好了，你只要写一个handler就行了，很方便。但是，这个handler只能是一个同步方法，它必须在返回值中给出响应结果，所以导致很多同学的思维转不过来这个弯儿。\n\n你可以结合我们讲的异步网络IO内容想一下，http协议发一个请求到服务端，就是发了一些数据过来，服务端回响应也就是在这个连接上给它返回一些数据回去就可以了。至于什么时候往回发响应数据，哪个线程来发，有要求吗？并没有。只要在超时之前发响应就可以了。我们讲得如何来实现异步网络IO的方法处理的不就是这种情况吗？\n\n这个过程不是说一定要做成和web框架一样的同步处理。\n\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568429329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267905,"discussion_content":"如果写队列设置8个，而读队列设置4个会发生什么情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589707712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049360,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/10/26f9f762.jpg","nickname":"Switch","note":"","ucode":"D8A7F7F6A0BEA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39862,"discussion_content":"老师 A3 的内容解除了一直以来对 web 框架为啥要同步响应的疑惑。😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572004469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152755,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1574075752,"is_pvip":false,"replies":[{"id":58723,"content":"我理解主要的原因除了超时时间的计算不准确以外，更重要的原因是这个异步方法还有改进的空间，其实可以直接结合Netty做到不需要Executor。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1574123954,"ip_address":"","comment_id":152755,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，异步发送为什么是弃用，还是没有看懂，感觉超时时间的计算没有错啊…","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467038,"discussion_content":"A1：这个参数是控制客户端在生产消费的时候会访问同一个主题的队列数量，假设一个主题有100个队列，对于每一个客户端来说，它没必要100个队列都访问，只需要使用其中的几个队列就行了。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。这两个参数是服务端参数，优先级是高于客户端控制的参数defaultTopicQueueNums的。perm是设置Topic读写等权限的参数，具体如何设置你需要去看一下文档。\n\nA3：如果局限于：“APP/浏览器 --[http协议]--&amp;gt;web 服务”这样的场景，受限于http协议，前端和web服务的交互一定是单向和同步的。一定要等待结果然后返回响应，但是，这种情况仍然可以使用异步的方法，这个我在“08答疑”中解释秒杀的时候其实已经给出了答案。很多同学不理解的原因是思维被web框架给限制住了。像spring web这种框架，它把处理web请求都给你封装好了，你只要写一个handler就行了，很方便。但是，这个handler只能是一个同步方法，它必须在返回值中给出响应结果，所以导致很多同学的思维转不过来这个弯儿。\n\n你可以结合我们讲的异步网络IO内容想一下，http协议发一个请求到服务端，就是发了一些数据过来，服务端回响应也就是在这个连接上给它返回一些数据回去就可以了。至于什么时候往回发响应数据，哪个线程来发，有要求吗？并没有。只要在超时之前发响应就可以了。我们讲得如何来实现异步网络IO的方法处理的不就是这种情况吗？\n\n这个过程不是说一定要做成和web框架一样的同步处理。\n\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568429329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267905,"discussion_content":"如果写队列设置8个，而读队列设置4个会发生什么情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589707712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049360,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/10/26f9f762.jpg","nickname":"Switch","note":"","ucode":"D8A7F7F6A0BEA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39862,"discussion_content":"老师 A3 的内容解除了一直以来对 web 框架为啥要同步响应的疑惑。😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572004469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147297,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572855479,"is_pvip":false,"replies":[{"id":57124,"content":"给认真思考完成作业的同学点赞👍！\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573006661,"ip_address":"","comment_id":147297,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"课后作业，请老师指正：\n从方法的注释看，说是因为异常处理和超时时间的语义不对。\n异常处理这块我觉得应该是采用统一的异常处理，而不应该是有的异常抛出，而有的异常通过回调方法返回客户端。\n再说超时时间的错误语义，严格来说应该是不准确的超时时间，因为在run方法里进行时间判断（if (timeout &gt; costTime)）实际上已经是开始执行当前线程的时间，而之前的排队时间没有算，因此我改进的方法应该是这样：\nCompletableFuture.runAsync(() -&gt; {\n            long costTime = System.currentTimeMillis() - beginStartTime;\n            if (timeout &gt; costTime) {\n                try {\n                    sendDefaultImpl(msg, CommunicationMode.ASYNC, sendCallback, timeout - costTime);\n                } catch (Exception e) {\n                    sendCallback.onException(e);\n                }\n            } else {\n                sendCallback.onException(\n                        new RemotingTooMuchRequestException(&quot;DEFAULT ASYNC send call timeout&quot;));\n            }\n        }, executor);","like_count":7,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473222,"discussion_content":"给认真思考完成作业的同学点赞👍！\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573006661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","nickname":"Standly","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51348,"discussion_content":"老哥你这个改造版，超时时间的计算和原版有什么区别吗？没看出来啊。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573835590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1721168,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/43/50/abb4ca1e.jpg","nickname":"凡","note":"","ucode":"80C2A6452AB9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","nickname":"Standly","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183904,"discussion_content":"CompletableFuture.runAsync","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582531015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51348,"ip_address":"","group_id":0},"score":183904,"extra":""}]},{"author":{"id":1478242,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8e/62/435148c1.jpg","nickname":"SinKitwah","note":"","ucode":"BC39A39E17C95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389505,"discussion_content":"没看出来你这个超时时间和原版计算出来的结果哪里会有区别？我的理解是这里排队之后再在netty的线程池又排队一次导致时间不准确，请指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629296758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381282,"discussion_content":"调用send方法入口处获取beginStartTime，线程执行run方法内部long costTime = System.currentTimeMillis() - beginStartTime;按道理这里的超时语义应该是对的哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624980221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1880246,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8ENRufE9XpK1CTV63hIg0UmncylH8ibAoIwmxVReAMwTGt7enOpuhKVLRS6k0H73ToWHAokPE6Tzu7b1icO6Z9icQ/132","nickname":"林跃涛","note":"","ucode":"9238AD646C042E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380202,"discussion_content":"之前排队的时间没有算是啥意思。。。有点不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624371850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1597566,"avatar":"","nickname":"Geek_yoriba","note":"","ucode":"9754362861F2B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1880246,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8ENRufE9XpK1CTV63hIg0UmncylH8ibAoIwmxVReAMwTGt7enOpuhKVLRS6k0H73ToWHAokPE6Tzu7b1icO6Z9icQ/132","nickname":"林跃涛","note":"","ucode":"9238AD646C042E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407305,"discussion_content":"线程真正执行前的 在cpu排队的时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634974927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":380202,"ip_address":"","group_id":0},"score":407305,"extra":""}]}]},{"had_liked":false,"id":132382,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1568104167,"is_pvip":false,"replies":[{"id":50691,"content":"个人建议学习Java或者Go，这两种语言都有不错的生态系统，都可以用来构建大规模集群。\n\n相对来说，Java的生态系统更强大，Go比较年轻，有很多Java不具备的语言特性。\n\nPython本来只是一门脚本语言，特别适合开发机器学习程序而火起来了，如果你不是从事机器学习相关的研发，不太建议作为第一语言来学习。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568165136,"ip_address":"","comment_id":132382,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"       编程语言的话Python或Go可以么？极客时间里都有购买，就是忙着其它课程的学习，一直没顾的上编程语言的学习。\n       从开始一路跟到现在：算是少数一直在完全没有缺的课；前期一直遍边学习边针对开篇时的学习目标针对当下工作环境的Nosql DB和MQ使用率的低下的问题找解决思路和方案，课后笔记主要同样集中在思路以及针对思路的困惑查疑上，代码这块完全没顾上。虽然代码的思路看的懂，发现动手能力确实非常欠缺。一路学到现在梳理到现在整体方案大致定下来：以及早期的部分课程的结束；课程的主要方案自己估计在掌握思路的基础上去补强Coding能力。虽然DBA的Coding能力都比较烂，不过还是得边学边啃下来；逼自己一下总能勉强写出来，估计就是效率问题、、、MQ这块PY或GO哪种更合适，或者说都可以？\n        感谢老师一路的辛勤授业：授课之余尽力去帮助学生们解惑，让我们能一路走来一路成长；愿老师教师节快乐，谢谢老师的分享。","like_count":6,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473222,"discussion_content":"给认真思考完成作业的同学点赞👍！\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573006661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","nickname":"Standly","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51348,"discussion_content":"老哥你这个改造版，超时时间的计算和原版有什么区别吗？没看出来啊。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573835590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1721168,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/43/50/abb4ca1e.jpg","nickname":"凡","note":"","ucode":"80C2A6452AB9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","nickname":"Standly","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183904,"discussion_content":"CompletableFuture.runAsync","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582531015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51348,"ip_address":"","group_id":0},"score":183904,"extra":""}]},{"author":{"id":1478242,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8e/62/435148c1.jpg","nickname":"SinKitwah","note":"","ucode":"BC39A39E17C95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389505,"discussion_content":"没看出来你这个超时时间和原版计算出来的结果哪里会有区别？我的理解是这里排队之后再在netty的线程池又排队一次导致时间不准确，请指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629296758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381282,"discussion_content":"调用send方法入口处获取beginStartTime，线程执行run方法内部long costTime = System.currentTimeMillis() - beginStartTime;按道理这里的超时语义应该是对的哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624980221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1880246,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8ENRufE9XpK1CTV63hIg0UmncylH8ibAoIwmxVReAMwTGt7enOpuhKVLRS6k0H73ToWHAokPE6Tzu7b1icO6Z9icQ/132","nickname":"林跃涛","note":"","ucode":"9238AD646C042E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380202,"discussion_content":"之前排队的时间没有算是啥意思。。。有点不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624371850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1597566,"avatar":"","nickname":"Geek_yoriba","note":"","ucode":"9754362861F2B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1880246,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8ENRufE9XpK1CTV63hIg0UmncylH8ibAoIwmxVReAMwTGt7enOpuhKVLRS6k0H73ToWHAokPE6Tzu7b1icO6Z9icQ/132","nickname":"林跃涛","note":"","ucode":"9238AD646C042E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407305,"discussion_content":"线程真正执行前的 在cpu排队的时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634974927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":380202,"ip_address":"","group_id":0},"score":407305,"extra":""}]}]},{"had_liked":false,"id":132757,"user_name":"墙角儿的花","can_delete":false,"product_type":"c1","uid":1258474,"ip_address":"","ucode":"EE5CAD76175CCF","user_header":"","comment_is_top":false,"comment_ctime":1568214192,"is_pvip":false,"replies":[{"id":50886,"content":"有一个问题你需要考虑，你是不是需要为每一个会话（比如，张三和李四之间开始聊天，成为一个会话）在MQ中凑创建一个Topic呢？这样会导致MQ集群中的Topic数量非常多。假设你的系统注册用户数是n，理论上最多会需要 n x n 个Topic，这还没有计算用户拉的群。\n\n对于海量的Topic数量，RocketMQ和Kafka都不是太好的选择。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568251706,"ip_address":"","comment_id":132757,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师 对于im服务器集群，客户端的socket均布在各个服务器，目标socket不在同一个服务器上时，服务器间需要转发消息，这个场景需要低延迟无需持久化，服务器间用redis的发布订阅，因其走内存较快，即使断电还可以走库。im服务器和入库服务间用其他mq解耦，因为这个环节需要持久化，所以选rocketmq或kafka，但kafka会延迟批量发布消息 所以选rocketmq，这两个环节的mq选型可行吗。","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467109,"discussion_content":"有一个问题你需要考虑，你是不是需要为每一个会话（比如，张三和李四之间开始聊天，成为一个会话）在MQ中凑创建一个Topic呢？这样会导致MQ集群中的Topic数量非常多。假设你的系统注册用户数是n，理论上最多会需要 n x n 个Topic，这还没有计算用户拉的群。\n\n对于海量的Topic数量，RocketMQ和Kafka都不是太好的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568251706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2019655,"avatar":"","nickname":"Geek_92d619","note":"","ucode":"BE0E322B9178E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349883,"discussion_content":"老师，我想问一下，这里为什么要考虑为每个会话创建一个Topic，这是出于什么样的考虑？用同一个topic，再通过其他自定义标记来区分会话不行么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613616303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101526,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/d6/ab8e6178.jpg","nickname":"R师傅","note":"","ucode":"74FC6975E881B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346793,"discussion_content":"老师，我们是用rabbitmq做的消息中间件，但是也遇到了queue size暴涨的问题。网上很多STOMP over websokect的sample，如果中间件是MQ broker，好像都是一个user创建一个queue的方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612065085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147211,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572841004,"is_pvip":false,"replies":[{"id":57129,"content":"PullConsumer：业务代码在需要的时候调用consumer.pullxxxx方法从consumer拉消息；PushConsumer：当有消息的时候，consumer会自动调用messageListener(业务处理消息的代码)。\n\n这两种方式主要是为了方便使用者进行线程控制，没有什么本质区别。\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573007518,"ip_address":"","comment_id":147211,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师继续请教问题：\n1.DefaultMQPullConsumer和DefaultMQPushConsumer有什么区别\n2.为什么pullConsumer的启动和producer的启动在同一个start方法里（最终都在MQClientInstance#start里）\n3.rebalanceService服务是干嘛的","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473198,"discussion_content":"PullConsumer：业务代码在需要的时候调用consumer.pullxxxx方法从consumer拉消息；PushConsumer：当有消息的时候，consumer会自动调用messageListener(业务处理消息的代码)。\n\n这两种方式主要是为了方便使用者进行线程控制，没有什么本质区别。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573007518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178891,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1581847391,"is_pvip":false,"replies":[{"id":69994,"content":"A1: 因为它服务的类没有设计成线程安全的，所以也没必要用volatile关键字。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。因为对主题来说，生产者的实例数和消费者的实例数是没有关系的，所以这两个参数是不关联的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1582246785,"ip_address":"","comment_id":178891,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"1、为什么ServiceState变量不设置成volatile呢？\n2、消费者MessageQueue(readQueueNums)怎么和生产者MessageQueue(writeQueueNums)关联起来的呢？比如readQueueNums=19个，writeQueueNums=23个，它们是怎么关联的呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473198,"discussion_content":"PullConsumer：业务代码在需要的时候调用consumer.pullxxxx方法从consumer拉消息；PushConsumer：当有消息的时候，consumer会自动调用messageListener(业务处理消息的代码)。\n\n这两种方式主要是为了方便使用者进行线程控制，没有什么本质区别。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573007518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151559,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1573740020,"is_pvip":false,"replies":[{"id":58287,"content":"这两个方法没有做到线程安全，但是这两个方法的实现内部，调用的方法都是线程安全的方法。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573779248,"ip_address":"","comment_id":151559,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"DefaultMQProducerImpl的start和shutdown方法没有加同步，serviceState也只是一个普通成员变量没加volatile，不会有线程安全问题吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484008,"discussion_content":"A1: 因为它服务的类没有设计成线程安全的，所以也没必要用volatile关键字。\n\nA2：writeQueueNums和readQueueNums是在服务端来控制每个客户端在生产和消费的时候，分别访问多少个队列。因为对主题来说，生产者的实例数和消费者的实例数是没有关系的，所以这两个参数是不关联的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582246785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135155,"user_name":"Standly","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/a7df049a.jpg","comment_is_top":false,"comment_ctime":1569046724,"is_pvip":false,"replies":[{"id":51965,"content":"分别在哪两个地方执行的2次启动呢？\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569202847,"ip_address":"","comment_id":135155,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"看了Rocketmq producer源码，关于producer这块有个疑问不知道能否请教下？就是producer启动过程中为什么MQClientInstance mQClientFactory.start()这个方法需要被执行2次？2次的作用分别是什么？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474533,"discussion_content":"这两个方法没有做到线程安全，但是这两个方法的实现内部，调用的方法都是线程安全的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573779248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132462,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1568127325,"is_pvip":false,"replies":[{"id":50692,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568165178,"ip_address":"","comment_id":132462,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师，节日快乐🎉","like_count":0},{"had_liked":false,"id":132361,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1568097737,"is_pvip":false,"replies":[{"id":50686,"content":"感谢！\n代码能力这块儿，除了学习，还是多写代码，熟能生巧。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568164739,"ip_address":"","comment_id":132361,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"     前期一直忙着强化和梳理一些基本功：操作系统、网络这块，学到现在发现老师的课程中的代码能看懂，大致思路也能明白；就是写不出。Python或者Go可以么？ Java实在、、、Python和Go极客时间都有购买课程。\n           可能目前线上的存储中间件现状比较差【许老师的课程对数据存储的定义，觉得有道理就直接现用了】，尤其是Nosql DB和MQ基本处于闲置，故而一直焦虑在这块；可是当现在初期迷惑已经解除且基本清晰时发现学习这门课和使用MQ的瓶颈就在代码能力上，毕竟DBA的Coding能力都比较差尤其是开发相关的能力；准备开始把之前报的开发语言的课程学习一遍。\n         今天教师节：愿老师节日快乐，感激老师在授课之余一直如此辛勤的回帖解答我们的困惑；谢谢老师。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466950,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568165178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132351,"user_name":"付永强","can_delete":false,"product_type":"c1","uid":1419544,"ip_address":"","ucode":"898998296EBD56","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/18/393a841d.jpg","comment_is_top":false,"comment_ctime":1568096762,"is_pvip":false,"replies":[{"id":50685,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568164622,"ip_address":"","comment_id":132351,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"教师节快乐！","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466900,"discussion_content":"感谢！\n代码能力这块儿，除了学习，还是多写代码，熟能生巧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568164739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132263,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1568075415,"is_pvip":false,"replies":[{"id":50556,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568077350,"ip_address":"","comment_id":132263,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"教师节，老师们都辛苦了！","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466894,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568164622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132251,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1568072563,"is_pvip":false,"replies":[{"id":50561,"content":"不需要一定会Java，但至少要熟练掌握一门编程语言。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568077564,"ip_address":"","comment_id":132251,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"一定要学java吗 老师","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466846,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568077350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132337,"user_name":"lmtoo","can_delete":false,"product_type":"c1","uid":1133918,"ip_address":"","ucode":"FCD5B9C941D448","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/5e/c5c62933.jpg","comment_is_top":false,"comment_ctime":1568087605,"is_pvip":false,"replies":null,"discussion_count":8,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"这种异步方式几乎没有意义，底层的netty已经实现了异步，这里只是在选择消息队列等判断的过程加了异步，最终callback还是由netty线程来调用的","like_count":20,"discussions":[{"author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288217,"discussion_content":"可以继续往下看源码，一直跟到NettyRemotingAbstract的406行，无论rocketmq用的是同步还是异步的方式，到了netty这一层，都是异步的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1593680764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1031336,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/a8/810c8fd4.jpg","nickname":"nikoart","note":"","ucode":"FF7AB24E25ABA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600005,"discussion_content":"我也看了下异步和同步发送消息的底层，感觉逻辑是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673939305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288217,"ip_address":"北京","group_id":0},"score":600005,"extra":""},{"author":{"id":1031336,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/a8/810c8fd4.jpg","nickname":"nikoart","note":"","ucode":"FF7AB24E25ABA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600006,"discussion_content":"同步方式获取响应的地方，是这么写的，responseFuture.waitResponse(timeoutMillis)，区别大概就是这里吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673939408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288217,"ip_address":"北京","group_id":0},"score":600006,"extra":""}]},{"author":{"id":2019655,"avatar":"","nickname":"Geek_92d619","note":"","ucode":"BE0E322B9178E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349881,"discussion_content":"我觉得异步和同步的意义是相对调用API 的层面来说的，如果是同步的API，你底层是通过异步还是同步获取结果都和上层无关，因为对于调用API哪里来说它都必须等待结果才能往下走。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1613615385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221488,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/70/a9f35354.jpg","nickname":"Pretender","note":"","ucode":"F87B509143C9C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21956,"discussion_content":"异步有没有意义是相对于同步，而不是异步谁来做","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569555844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550145,"discussion_content":"怎么能没有意义呢，虽然netty是异步发送的，但是调用netty前的一些处理逻辑也是有时间开销的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644393884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063149,"avatar":"https://static001.geekbang.org/account/avatar/00/10/38/ed/72f73710.jpg","nickname":"嘻嘻","note":"","ucode":"C47140EF144225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216592,"discussion_content":"前半部分是这样的。但callback rocketmq是把response分发了另一个线程池处理回调，所以只在读取response的时候占用了IO线程池","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585468561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115777,"avatar":"https://static001.geekbang.org/account/avatar/00/11/06/81/28418795.jpg","nickname":"衣申人","note":"","ucode":"887FE9109B97DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110250,"discussion_content":"我赞同这个大神的分析，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577718995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132461,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1568127191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"我总结的kafka生产消息的源码分析\nhttps:&#47;&#47;mp.weixin.qq.com&#47;s&#47;-s34_y16HU6HR5HDsSD4bg","like_count":6},{"had_liked":false,"id":132440,"user_name":"明日","can_delete":false,"product_type":"c1","uid":1003917,"ip_address":"","ucode":"348899EC65AE8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/8d/09f28606.jpg","comment_is_top":false,"comment_ctime":1568122913,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"李老师节日快乐！\n关于思考题看到了源码的注释说异常处理和超时时间有问题。\n自己看的话一是异常这里抛未知的原因，不够明确。\n二是这里用的线程池默认使用了虚拟机可用的线程，可能会对其他服务造成影响。\n三是超时时间这把线程阻塞可能等待的时间也包括进去了不太合适。\n感觉代码层次使用老师说过的completablefuture处理更优雅。另外底层使用了netty，应该直接用异步io就行了吧。","like_count":4},{"had_liked":false,"id":171553,"user_name":"侧面","can_delete":false,"product_type":"c1","uid":1098974,"ip_address":"","ucode":"D55BF71996FDE8","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/de/9649fcee.jpg","comment_is_top":false,"comment_ctime":1578966080,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"有这篇这课就买的值了","like_count":2},{"had_liked":false,"id":288081,"user_name":"二少","can_delete":false,"product_type":"c1","uid":1442885,"ip_address":"","ucode":"190983809CD3EC","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/45/0c474d47.jpg","comment_is_top":false,"comment_ctime":1618291565,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"DefaultMQProducer是DefaultMQProducerImpl的门面，但二者的类名起得有点怪怪的感觉。类名有Impl后缀，一般都表示这个类是某个接口的实现类，但实际上却是门面和被包装类的关系。而且把门面类给个facade后缀不是更适当一些吗？大家怎么看。","like_count":1,"discussions":[{"author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288217,"discussion_content":"可以继续往下看源码，一直跟到NettyRemotingAbstract的406行，无论rocketmq用的是同步还是异步的方式，到了netty这一层，都是异步的。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1593680764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1031336,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/a8/810c8fd4.jpg","nickname":"nikoart","note":"","ucode":"FF7AB24E25ABA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600005,"discussion_content":"我也看了下异步和同步发送消息的底层，感觉逻辑是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673939305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288217,"ip_address":"北京","group_id":0},"score":600005,"extra":""},{"author":{"id":1031336,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/a8/810c8fd4.jpg","nickname":"nikoart","note":"","ucode":"FF7AB24E25ABA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434220,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzkDzxIjZItgnK58KjRwGHiaFibO93yluEDggaLOHpG9BLup4R3boKIpSYvy69zcSNJjXrXQicPjIJw/132","nickname":"不甘平庸的小码农","note":"","ucode":"6CE5B7D94D09F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600006,"discussion_content":"同步方式获取响应的地方，是这么写的，responseFuture.waitResponse(timeoutMillis)，区别大概就是这里吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673939408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288217,"ip_address":"北京","group_id":0},"score":600006,"extra":""}]},{"author":{"id":2019655,"avatar":"","nickname":"Geek_92d619","note":"","ucode":"BE0E322B9178E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349881,"discussion_content":"我觉得异步和同步的意义是相对调用API 的层面来说的，如果是同步的API，你底层是通过异步还是同步获取结果都和上层无关，因为对于调用API哪里来说它都必须等待结果才能往下走。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1613615385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221488,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/70/a9f35354.jpg","nickname":"Pretender","note":"","ucode":"F87B509143C9C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21956,"discussion_content":"异步有没有意义是相对于同步，而不是异步谁来做","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569555844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550145,"discussion_content":"怎么能没有意义呢，虽然netty是异步发送的，但是调用netty前的一些处理逻辑也是有时间开销的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644393884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063149,"avatar":"https://static001.geekbang.org/account/avatar/00/10/38/ed/72f73710.jpg","nickname":"嘻嘻","note":"","ucode":"C47140EF144225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216592,"discussion_content":"前半部分是这样的。但callback rocketmq是把response分发了另一个线程池处理回调，所以只在读取response的时候占用了IO线程池","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585468561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115777,"avatar":"https://static001.geekbang.org/account/avatar/00/11/06/81/28418795.jpg","nickname":"衣申人","note":"","ucode":"887FE9109B97DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110250,"discussion_content":"我赞同这个大神的分析，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577718995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132462,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1568127325,"is_pvip":false,"replies":[{"id":50692,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568165178,"ip_address":"","comment_id":132462,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师，节日快乐🎉","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466950,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568165178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132361,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1568097737,"is_pvip":false,"replies":[{"id":50686,"content":"感谢！\n代码能力这块儿，除了学习，还是多写代码，熟能生巧。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568164739,"ip_address":"","comment_id":132361,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"     前期一直忙着强化和梳理一些基本功：操作系统、网络这块，学到现在发现老师的课程中的代码能看懂，大致思路也能明白；就是写不出。Python或者Go可以么？ Java实在、、、Python和Go极客时间都有购买课程。\n           可能目前线上的存储中间件现状比较差【许老师的课程对数据存储的定义，觉得有道理就直接现用了】，尤其是Nosql DB和MQ基本处于闲置，故而一直焦虑在这块；可是当现在初期迷惑已经解除且基本清晰时发现学习这门课和使用MQ的瓶颈就在代码能力上，毕竟DBA的Coding能力都比较差尤其是开发相关的能力；准备开始把之前报的开发语言的课程学习一遍。\n         今天教师节：愿老师节日快乐，感激老师在授课之余一直如此辛勤的回帖解答我们的困惑；谢谢老师。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466900,"discussion_content":"感谢！\n代码能力这块儿，除了学习，还是多写代码，熟能生巧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568164739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132351,"user_name":"付永强","can_delete":false,"product_type":"c1","uid":1419544,"ip_address":"","ucode":"898998296EBD56","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/18/393a841d.jpg","comment_is_top":false,"comment_ctime":1568096762,"is_pvip":false,"replies":[{"id":50685,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568164622,"ip_address":"","comment_id":132351,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"教师节快乐！","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466894,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568164622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132263,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1568075415,"is_pvip":false,"replies":[{"id":50556,"content":"感谢！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568077350,"ip_address":"","comment_id":132263,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"教师节，老师们都辛苦了！","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466846,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568077350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132251,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1568072563,"is_pvip":false,"replies":[{"id":50561,"content":"不需要一定会Java，但至少要熟练掌握一门编程语言。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568077564,"ip_address":"","comment_id":132251,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"一定要学java吗 老师","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466842,"discussion_content":"不需要一定会Java，但至少要熟练掌握一门编程语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568077564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132337,"user_name":"lmtoo","can_delete":false,"product_type":"c1","uid":1133918,"ip_address":"","ucode":"FCD5B9C941D448","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/5e/c5c62933.jpg","comment_is_top":false,"comment_ctime":1568087605,"is_pvip":false,"replies":null,"discussion_count":8,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"这种异步方式几乎没有意义，底层的netty已经实现了异步，这里只是在选择消息队列等判断的过程加了异步，最终callback还是由netty线程来调用的","like_count":20,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466842,"discussion_content":"不需要一定会Java，但至少要熟练掌握一门编程语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568077564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132461,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1568127191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"我总结的kafka生产消息的源码分析\nhttps:&#47;&#47;mp.weixin.qq.com&#47;s&#47;-s34_y16HU6HR5HDsSD4bg","like_count":6},{"had_liked":false,"id":132440,"user_name":"明日","can_delete":false,"product_type":"c1","uid":1003917,"ip_address":"","ucode":"348899EC65AE8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/8d/09f28606.jpg","comment_is_top":false,"comment_ctime":1568122913,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"李老师节日快乐！\n关于思考题看到了源码的注释说异常处理和超时时间有问题。\n自己看的话一是异常这里抛未知的原因，不够明确。\n二是这里用的线程池默认使用了虚拟机可用的线程，可能会对其他服务造成影响。\n三是超时时间这把线程阻塞可能等待的时间也包括进去了不太合适。\n感觉代码层次使用老师说过的completablefuture处理更优雅。另外底层使用了netty，应该直接用异步io就行了吧。","like_count":4},{"had_liked":false,"id":171553,"user_name":"侧面","can_delete":false,"product_type":"c1","uid":1098974,"ip_address":"","ucode":"D55BF71996FDE8","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/de/9649fcee.jpg","comment_is_top":false,"comment_ctime":1578966080,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"有这篇这课就买的值了","like_count":2},{"had_liked":false,"id":288081,"user_name":"二少","can_delete":false,"product_type":"c1","uid":1442885,"ip_address":"","ucode":"190983809CD3EC","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/45/0c474d47.jpg","comment_is_top":false,"comment_ctime":1618291565,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"DefaultMQProducer是DefaultMQProducerImpl的门面，但二者的类名起得有点怪怪的感觉。类名有Impl后缀，一般都表示这个类是某个接口的实现类，但实际上却是门面和被包装类的关系。而且把门面类给个facade后缀不是更适当一些吗？大家怎么看。","like_count":1},{"had_liked":false,"id":278111,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1612766178,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"因为Netty本身就支持异步的写入消息,并注入Listener,这一步的发送,则是利用Nio的WorkGroup,这种情况下,显式的使用线程池异步的发送显得有点多余","like_count":1},{"had_liked":false,"id":231169,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1593599299,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"RocketMQ同等的策略模式还有消费端的时候选择消费者与queue的对应策略：\nAllocateMessageQueueStrategy接口下有如下几个实现类\nAllocateMessageQueueAveragely\nAllocateMachineRoomNearby\nAllocateMessageQueueAveragelyByCircle\nAllocateMessageQueueByConfig：这个策略真不知道有啥鸟用\nAllocateMessageQueueByMachineRoom\nAllocateMessageQueueConsistentHash\n而且看这名字就知道是策略模式。直接以Strategy结尾。","like_count":1},{"had_liked":false,"id":182871,"user_name":"Geek_6ank0y","can_delete":false,"product_type":"c1","uid":1116340,"ip_address":"","ucode":"54F4AE0579711C","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/b4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1582880242,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"跟踪源码发现，异步回调，最后还是在NettyRemotingAbstract中启动线程池做了    \n&#47;**\n     * Execute callback in callback executor. If callback executor is null, run directly in current thread\n     *&#47;\n    private void executeInvokeCallback(final ResponseFuture responseFuture) {\n        boolean runInThisThread = false;\n        ExecutorService executor = this.getCallbackExecutor();\n        if (executor != null) {\n            try {\n                executor.submit(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            responseFuture.executeInvokeCallback();\n                        } catch (Throwable e) {\n                            log.warn(&quot;execute callback in executor exception, and callback throw&quot;, e);\n                        } finally {\n                            responseFuture.release();\n                        }\n                    }\n                });\n            } catch (Exception e) {\n                runInThisThread = true;\n                log.warn(&quot;execute callback in executor exception, maybe executor busy&quot;, e);\n            }\n        } else {\n            runInThisThread = true;\n        }\n\n        if (runInThisThread) {\n            try {\n                responseFuture.executeInvokeCallback();\n            } catch (Throwable e) {\n                log.warn(&quot;executeInvokeCallback Exception&quot;, e);\n            } finally {\n                responseFuture.release();\n            }\n        }\n    }","like_count":1},{"had_liked":false,"id":137300,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1569681655,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"1. 异常处理问题：线程内部抛出的异常，比如MQBrokerException，客户端无法感知到，以为发送成功，会继续执行。\n2. 超时时间的概念问题：这里似乎去掉了线程调度的时间，将剩下的时间给了netty，个人感觉也应该包含进去。对客户端而言，调度是自己的事，不应包含在网络超时时间里。\n\n请老师指正。","like_count":1},{"had_liked":false,"id":358567,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"上海","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1664433474,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"消息生产者启动拉取消息这个感觉没什么用啊，它不是推送消息得吗？\n","like_count":0},{"had_liked":false,"id":167733,"user_name":"七楼","can_delete":false,"product_type":"c1","uid":1491023,"ip_address":"","ucode":"106856DF5F8F12","user_header":"https://static001.geekbang.org/account/avatar/00/16/c0/4f/db7f2ab2.jpg","comment_is_top":false,"comment_ctime":1577925621,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"mvc框架的 controller也算是门面模式的门面把？他也是提供一个可访问系统的借口  隐藏了系统内部的复杂性  对吗","like_count":0},{"had_liked":false,"id":147206,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572838402,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师请教问题：RocketMQ有个DefaultMQPullConsumer和DefaultMQPushConsumer，这两个类到底是干嘛的，它们到底什么关系？","like_count":0},{"had_liked":false,"id":136558,"user_name":"山头","can_delete":false,"product_type":"c1","uid":1610142,"ip_address":"","ucode":"9CD45A7966F37E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/kQ0NueqD3LTRravKIH2DgtqFKLqgjZQicDZtibdTqJ8pBRjNwlKornibGj2qibPdsgLXh2xQ3MesQ7q2JyATIEBphVHpcS2iaboZqATms4IDUibes/132","comment_is_top":false,"comment_ctime":1569472405,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，辛苦了，能否讲讲发送端如何找到broker上的文件，队列和文件的关系，消息都放到文件上吧，能否展开梳理梳理，不然还是不懂怎么实现的","like_count":0},{"had_liked":false,"id":133760,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1568647227,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"这里使用异步主要是提升消息发送的吞吐量，而在这过程中影响吞吐的有两个：磁盘IO和网络IO，而现在的这种异步方式好像并没有为这两部分设计详细的优化，似乎只是简单用了一个多线程去执行各自的操作，也就是并没有对真正的性能短板做优化。我觉得真要是异步的话，需要在这里维持一个队列、一个磁盘IO选择器和一个网络发送IO选择器，真正异步的点应该是两个选择器加并发协调处理待发送的数据。不过就像有些同学评价的，netty底层对各种IO已经做了很好的支持，这里的异步就显得很苍白无力了。不知netty是怎么设计异步来达到极致的性能的。","like_count":0},{"had_liked":false,"id":133559,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1568605238,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"一是处理异常的代码很奇怪吧，有的异常使用sendCallback抛出，有的直接抛出；二是超时的语义有问题，现在的timeout意思是消息在线程池中排队的时间","like_count":0},{"had_liked":false,"id":278111,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1612766178,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"因为Netty本身就支持异步的写入消息,并注入Listener,这一步的发送,则是利用Nio的WorkGroup,这种情况下,显式的使用线程池异步的发送显得有点多余","like_count":1},{"had_liked":false,"id":231169,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1593599299,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"RocketMQ同等的策略模式还有消费端的时候选择消费者与queue的对应策略：\nAllocateMessageQueueStrategy接口下有如下几个实现类\nAllocateMessageQueueAveragely\nAllocateMachineRoomNearby\nAllocateMessageQueueAveragelyByCircle\nAllocateMessageQueueByConfig：这个策略真不知道有啥鸟用\nAllocateMessageQueueByMachineRoom\nAllocateMessageQueueConsistentHash\n而且看这名字就知道是策略模式。直接以Strategy结尾。","like_count":1},{"had_liked":false,"id":182871,"user_name":"Geek_6ank0y","can_delete":false,"product_type":"c1","uid":1116340,"ip_address":"","ucode":"54F4AE0579711C","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/b4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1582880242,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"跟踪源码发现，异步回调，最后还是在NettyRemotingAbstract中启动线程池做了    \n&#47;**\n     * Execute callback in callback executor. If callback executor is null, run directly in current thread\n     *&#47;\n    private void executeInvokeCallback(final ResponseFuture responseFuture) {\n        boolean runInThisThread = false;\n        ExecutorService executor = this.getCallbackExecutor();\n        if (executor != null) {\n            try {\n                executor.submit(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            responseFuture.executeInvokeCallback();\n                        } catch (Throwable e) {\n                            log.warn(&quot;execute callback in executor exception, and callback throw&quot;, e);\n                        } finally {\n                            responseFuture.release();\n                        }\n                    }\n                });\n            } catch (Exception e) {\n                runInThisThread = true;\n                log.warn(&quot;execute callback in executor exception, maybe executor busy&quot;, e);\n            }\n        } else {\n            runInThisThread = true;\n        }\n\n        if (runInThisThread) {\n            try {\n                responseFuture.executeInvokeCallback();\n            } catch (Throwable e) {\n                log.warn(&quot;executeInvokeCallback Exception&quot;, e);\n            } finally {\n                responseFuture.release();\n            }\n        }\n    }","like_count":1},{"had_liked":false,"id":137300,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1569681655,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"1. 异常处理问题：线程内部抛出的异常，比如MQBrokerException，客户端无法感知到，以为发送成功，会继续执行。\n2. 超时时间的概念问题：这里似乎去掉了线程调度的时间，将剩下的时间给了netty，个人感觉也应该包含进去。对客户端而言，调度是自己的事，不应包含在网络超时时间里。\n\n请老师指正。","like_count":1},{"had_liked":false,"id":358567,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"上海","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1664433474,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"消息生产者启动拉取消息这个感觉没什么用啊，它不是推送消息得吗？\n","like_count":0},{"had_liked":false,"id":167733,"user_name":"七楼","can_delete":false,"product_type":"c1","uid":1491023,"ip_address":"","ucode":"106856DF5F8F12","user_header":"https://static001.geekbang.org/account/avatar/00/16/c0/4f/db7f2ab2.jpg","comment_is_top":false,"comment_ctime":1577925621,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"mvc框架的 controller也算是门面模式的门面把？他也是提供一个可访问系统的借口  隐藏了系统内部的复杂性  对吗","like_count":0,"discussions":[{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265719,"discussion_content":"hi，门面模式来分析 MVC 框架的  Controller 不是很合适。设计模式是用来设计某个类或者子系统的，Controller 和 MVC 的关系，其实是一种开发框架，两者的考虑的问题不是一个维度的。也就是说：Controller 中某个类使用了门面模式，让系统更容易被访问使用，但很少说 Controller 本身就是门面模式。:）\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589430131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147206,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":1595382,"ip_address":"","ucode":"A77322C4E07B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/f6/2c7ac1ad.jpg","comment_is_top":false,"comment_ctime":1572838402,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师请教问题：RocketMQ有个DefaultMQPullConsumer和DefaultMQPushConsumer，这两个类到底是干嘛的，它们到底什么关系？","like_count":0},{"had_liked":false,"id":136558,"user_name":"山头","can_delete":false,"product_type":"c1","uid":1610142,"ip_address":"","ucode":"9CD45A7966F37E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/kQ0NueqD3LTRravKIH2DgtqFKLqgjZQicDZtibdTqJ8pBRjNwlKornibGj2qibPdsgLXh2xQ3MesQ7q2JyATIEBphVHpcS2iaboZqATms4IDUibes/132","comment_is_top":false,"comment_ctime":1569472405,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，辛苦了，能否讲讲发送端如何找到broker上的文件，队列和文件的关系，消息都放到文件上吧，能否展开梳理梳理，不然还是不懂怎么实现的","like_count":0},{"had_liked":false,"id":133760,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1568647227,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"这里使用异步主要是提升消息发送的吞吐量，而在这过程中影响吞吐的有两个：磁盘IO和网络IO，而现在的这种异步方式好像并没有为这两部分设计详细的优化，似乎只是简单用了一个多线程去执行各自的操作，也就是并没有对真正的性能短板做优化。我觉得真要是异步的话，需要在这里维持一个队列、一个磁盘IO选择器和一个网络发送IO选择器，真正异步的点应该是两个选择器加并发协调处理待发送的数据。不过就像有些同学评价的，netty底层对各种IO已经做了很好的支持，这里的异步就显得很苍白无力了。不知netty是怎么设计异步来达到极致的性能的。","like_count":0},{"had_liked":false,"id":133559,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1568605238,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"一是处理异常的代码很奇怪吧，有的异常使用sendCallback抛出，有的直接抛出；二是超时的语义有问题，现在的timeout意思是消息在线程池中排队的时间","like_count":0,"discussions":[{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265719,"discussion_content":"hi，门面模式来分析 MVC 框架的  Controller 不是很合适。设计模式是用来设计某个类或者子系统的，Controller 和 MVC 的关系，其实是一种开发框架，两者的考虑的问题不是一个维度的。也就是说：Controller 中某个类使用了门面模式，让系统更容易被访问使用，但很少说 Controller 本身就是门面模式。:）\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589430131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132381,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1568103966,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"同楼上@lmtoo答案，源码一直追下去发现回调主要还是NettyRemoting做的，回调事件应该发生在netty的event executor绑定的线程内。最上层创建线程池没什么意义。改进的话是不是线程池去掉了就可以了。","like_count":0},{"had_liked":false,"id":132381,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1568103966,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"同楼上@lmtoo答案，源码一直追下去发现回调主要还是NettyRemoting做的，回调事件应该发生在netty的event executor绑定的线程内。最上层创建线程池没什么意义。改进的话是不是线程池去掉了就可以了。","like_count":0}]}