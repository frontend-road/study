{"id":301,"title":"30 | 编程范式游记（1）- 起源","content":"<h1>序</h1><p>你好，我是陈皓，网名左耳朵耗子。</p><p>现在很多的文章和演讲都在谈架构，很少有人再会谈及编程范式。然而， 这些基础性和本质性的话题，却是非常非常重要的。</p><p>一方面，我发现在一些语言争论上，有很多人对编程语言的认识其实并不深；另一方面，通过编程语言的范式，我们不但可以知道整个编程语言的发展史，而且还能提高自己的编程技能，写出更好的代码。</p><p><strong>我希望通过一系列的文章带大家漫游一下各式各样的编程范式。</strong>（这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。）</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/301\">01 | 编程范式游记：起源</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/303\">02 | 编程范式游记：泛型编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2017\">03 | 编程范式游记：类型系统和泛型的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2711\">04 | 编程范式游记：函数式编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2723\">05 | 编程范式游记：修饰器模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2729\">06 | 编程范式游记：面向对象编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2741\">07 | 编程范式游记：基于原型的编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2748\">08 | 编程范式游记：Go 语言的委托模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2751\">09 | 编程范式游记：编程的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2752\">10 | 编程范式游记：逻辑编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2754\">11 | 编程范式游记：程序世界里的编程范式</a></li>\n</ul><p>这一经历可能有些漫长，途中也会有各式各样的语言的代码。但是我保证这一历程对于一个程序员来说是非常有价值的，因为你不但可以对主流编程语言的一些特性有所了解，而且当我们到达终点的时候，你还能了解到编程的本质是什么。</p><!-- [[[read_end]]] --><p>这一系列文章中有各种语言的代码，其中有C、C++、Python、Java、Scheme、Go、JavaScript、Prolog等。所以，如果要能跟上本文的前因后果，你要对这几门比较主流的语言多少有些了解。</p><p>而且，你需要在一线编写一段时间（大概5年以上吧）的代码，可能才能体会到这一系列文章的内涵。</p><p>我根据每篇文章中所讲述的内容，将这一系列文章分为四个部分。</p><ul>\n<li>\n<p><strong>第一部分：泛型编程</strong>，第1~3章，讨论了从C到C++的泛型编程方法，并系统地总结了编程语言中的类型系统和泛型编程的本质。</p>\n</li>\n<li>\n<p><strong>第二部分：函数式编程</strong>，第4章和第5章，讲述了函数式编程用到的技术，及其思维方式，并通过Python和Go修饰器的例子，展示了函数式编程下的代码扩展能力，以及函数的相互和随意拼装带来的好处。</p>\n</li>\n<li>\n<p><strong>第三部分：面向对象编程</strong>，第6~8章，讲述与传统的编程思想的相反之处，面向对象设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，列举了面向对象编程的优缺点，基于原型的编程范式，以及Go语言的委托模式。</p>\n</li>\n<li>\n<p><strong>第四部分：编程本质和逻辑编程</strong>，第9~11章，先探讨了编程的本质：逻辑部分才是真正有意义的，控制部分只能影响逻辑部分的效率，然后结合Prolog语言介绍了逻辑编程范式，最后对程序世界里的编程范式进行了总结，对比了它们之间的不同。</p>\n</li>\n</ul><p>我会以每部分为一个发布单元，将这些文章陆续发表在专栏中。如果在编程范式方面，你有其他感兴趣的主题，欢迎留言给我。</p><p>下面我们来说说什么是编程范式。编程范式的英语是Programming Paradigm，范即模范之意，范式即模式、方法，是一类典型的编程风格，是指从事软件工程的一类典型的风格（可以对照“方法学”一词）。</p><p>编程语言发展到今天，出现了好多不同的代码编写方式，但不同的方式解决的都是同一个问题，那就是如何写出更为通用、更具可重用性的代码或模块。</p><p>如果你准备好了，就和我一起来吧。</p><h1>先从C语言开始</h1><p>为了讲清楚这个问题，我需要从C语言开始讲起。因为C语言历史悠久，而几乎现在看到的所有编程语言都是以C语言为基础来拓展的，不管是C++、Java、C#、Go、Python、PHP、Perl、JavaScript、Lua，还是Shell。</p><p>自C语言问世40多年以来，其影响了太多太多的编程语言，到现在还一直被广泛使用，不得不佩服它的生命力。但是，我们也要清楚地知道，大多数C Like编程语言其实都是在改善C语言带来的问题。</p><p>那C语言有哪些特性呢？我简单来总结下：</p><ol>\n<li>\n<p>C语言是一个静态弱类型语言，在使用变量时需要声明变量类型，但是类型间可以有隐式转换；</p>\n</li>\n<li>\n<p>不同的变量类型可以用结构体（struct）组合在一起，以此来声明新的数据类型；</p>\n</li>\n<li>\n<p>C语言可以用 <code>typedef</code> 关键字来定义类型的别名，以此来达到变量类型的抽象；</p>\n</li>\n<li>\n<p>C语言是一个有结构化程序设计、具有变量作用域以及递归功能的过程式语言；</p>\n</li>\n<li>\n<p>C语言传递参数一般是以值传递，也可以传递指针；</p>\n</li>\n<li>\n<p>通过指针，C语言可以容易地对内存进行低级控制，然而这加大了编程复杂度；</p>\n</li>\n<li>\n<p>编译预处理让C语言的编译更具有弹性，比如跨平台。</p>\n</li>\n</ol><p>C语言的这些特性，可以让程序员在微观层面写出非常精细和精确的编程操作，让程序员可以在底层和系统细节上非常自由、灵活和精准地控制代码。</p><p>然而，在代码组织和功能编程上，C语言的上述特性，却不那么美妙了。</p><h2>从C语言的一个简单例子说起</h2><p>我们从C语言最简单的交换两个变量的swap函数说起，参看下面的代码：</p><pre><code class=\"language-c\">void swap(int* x, int* y)\n{\n\tint tmp = *x;\n\t*x = *y;\n\t*y = tmp;\n}\n</code></pre><p>你可以想一想，这里为什么要传指针？这里是C语言指针，因为如果你不用指针的话，那么参数变成传值，即函数的形参是调用实参的一个拷贝，函数里面对形参的修改无法影响实参的结果。为了要达到调用完函数后，实参内容的交换，必须要把实参的地址传递进来，也就是传指针。这样在函数里面做交换，实际变量的值也被交换了。</p><p>然而，这个函数最大的问题就是它只能给int值用，这个世界上还有很多类型包括double、float，这就是静态语言最糟糕的一个问题。</p><h2>数据类型与现实世界的类比</h2><p>与现实世界类比一下，数据类型就好像螺帽一样，有多种接口方式：平口的、十字的、六角的等，而螺丝刀就像是函数，或是用来操作这些螺丝的算法或代码。我们发现，这些不同类型的螺帽（数据类型），需要我们为之适配一堆不同的螺丝刀。</p><p>而且它们还有不同的尺寸（尺寸就代表它是单字节的，还是多字节的，比如整型的int、long，浮点数的float和double），这样复杂度一下就提高了，最终导致电工（程序员）工作的时候需要带下图这样的一堆工具。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/3e/4a5e3c03a3aef6015cc93f5f11f8003e.png\" alt=\"\"></p><p>这就是类型为编程带来的问题。要解决这个问题，我们还是来看一下现实世界。</p><p>你应该见过下面图片中的这种经过优化的螺丝刀，上面手柄是一样的，拧螺丝的动作也是一样的，只是接口不一样。每次我看到这张图片的时候就在想，这密密麻麻的看着有40多种接口，不知道为什么人类世界要干出这么多的花样，你们这群人类究竟是要干什么啊。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/85/e907bb9069217abbbe85f1819c1cbc85.png\" alt=\"\"></p><p>我们可以看到，无论是传统世界，还是编程世界，我们都在干一件事情，什么事呢？<strong>那就是通过使用一种更为通用的方式，用另外的话说就是抽象和隔离，让复杂的“世界”变得简单一些</strong>。</p><p>然而，要做到抽象，对于C语言这样的类型语言来说，首先要拿出来讲的就是抽象类型，这就是所谓的泛型编程。</p><p>另外，我们还要注意到，在编程世界里，对于C语言来说，类型还可以转换。编译器会使用一切方式来做类型转换，因为类型转换有时候可以让我们编程更方便一些，也让相近的类型可以做到一点点的泛型。</p><p>然而，对于C语言的类型转换，是会出很多问题的。比如说，传给我一个数组，这个数组本来是double型的，或者是long型 64位的，但是如果把数组类型强转成int，那么就会出现很多问题，因为这会导致程序遍历数组的步长不一样了。</p><p>比如：一个 <code>double a[10]</code> 的数组，<code>a[2]</code> 意味着 <code>a + sizeof(double) * 2</code>。如果你把 <code>a</code> 强转成 <code>int</code>，那么 <code>a[2]</code> 就意味着 <code>a + sizeof(int) * 2</code>。我们知道 <code>sizeof(double)</code> 是 <code>8</code>，而 <code>sizeof(int)</code> 是 <code>4</code>。于是访问到了不同的地址和内存空间，这就导致程序出现严重的问题。</p><h2>C语言的泛型</h2><h3>一个泛型的示例 - swap函数</h3><p>好了，我们再看下，C语言是如何实现泛型的。C语言的类型泛型基本上来说就是使用<code>void *</code>关键字或是使用宏定义。</p><p>下面是一个使用了<code>void*</code>泛型版本的swap函数。</p><pre><code class=\"language-C\">void swap(void* x, void* y, size_t size)\n{\n     char tmp[size];\n     memcpy(tmp, y, size);\n     memcpy(y, x, size);\n     memcpy(x, tmp, size);\n}\n</code></pre><p>上面这个函数几乎完全改变了int版的函数的实现方式，这个实现方式有三个重点：</p><ul>\n<li>\n<p><strong>函数接口中增加了一个<code>size</code>参数</strong>。为什么要这么干呢？因为，用了 <code>void*</code> 后，类型被“抽象”掉了，编译器不能通过类型得到类型的尺寸了，所以，需要我们手动地加上一个类型长度的标识。</p>\n</li>\n<li>\n<p><strong>函数的实现中使用了<code>memcpy()</code>函数</strong>。为什么要这样干呢？还是因为类型被“抽象”掉了，所以不能用赋值表达式了，很有可能传进来的参数类型还是一个结构体，因此，为了要交换这些复杂类型的值，我们只能使用内存复制的方法了。</p>\n</li>\n<li>\n<p><strong>函数的实现中使用了一个<code>temp[size]</code>数组</strong>。这就是交换数据时需要用的buffer，用buffer来做临时的空间存储。</p>\n</li>\n</ul><p>于是，新增的<code>size</code>参数，使用的<code>memcpy</code>内存拷贝以及一个buffer，这增加了编程的复杂度。这就是C语言的类型抽象所带来的复杂度的提升。</p><p>在提升复杂度的同时，我们发现还有问题，比如，我们想交换两个字符串数组，类型是<code>char*</code>，那么，我的<code>swap()</code>函数的<code>x</code>和<code>y</code>参数是不是要用<code>void**</code>了？这样一来，接口就没法定义了。</p><p>除了使用 <code>void*</code> 来做泛型，在C语言中，还可以用宏定义来做泛型，如下所示：</p><pre><code class=\"language-c\">#define swap(x, y, size) {\\\n\tchar temp[size]; \\\n\tmemcpy(temp, &amp;y, size); \\\n\tmemcpy(&amp;y,   &amp;x, size); \\\n\tmemcpy(&amp;x, temp, size); \\\n}\n</code></pre><p>但用宏带来的问题就是编译器做字符串替换，因为宏是做字符串替换，所以会导致代码膨胀，导致编译出的执行文件比较大。不过对于swap这个简单的函数来说，用<code>void*</code>和宏替换来说都可以达到泛型。</p><p>但是，如果我们不是swap，而是min()或max()函数，那么宏替换的问题就会暴露得更多一些。比如，对于下面的这个宏：</p><pre><code class=\"language-c\">#define min(x, y)  （(x)&gt;(y) ? (y) : (x)）\n</code></pre><p>其中一个最大的问题，就是有可能会有<strong>重复执行</strong>的问题。如：</p><ul>\n<li>\n<p><code>min(i++, j++)</code> 对于这个案例来说，我们本意是比较完后，对变量做累加，但是，因为宏替换的缘故，这会导致变量<code>i</code>或<code>j</code>被累加两次。</p>\n</li>\n<li>\n<p><code>min(foo(), bar())</code> 对于这个示例来说，我们本意是比较 <code>foo()</code> 和 <code>bar()</code> 函数的返回值，然而，经过宏替换后，<code>foo()</code> 或 <code>bar()</code> 会被调用两次，这会带来很多问题。</p>\n</li>\n</ul><p>另外，你会不会觉得无论是用哪种方式，这种“泛型”是不是太宽松了一些，完全不做类型检查，就是在内存上对拷，直接操作内存的这种方式，感觉是不是比较危险，而且就像一个定时炸弹一样，不知道什么时候，在什么条件下就爆炸了。</p><p>从上面的两个例子，我们可以发现，无论哪种方式，接口都变得复杂了——加入了<code>size</code>，因为如果不加入<code>size</code>的话，那么我们的函数内部就需要自己检查<code>size</code>。然而，<code>void*</code> 这种地址的方式是没法得到<code>size</code>的。</p><p>而宏定义的那种方式，虽然不会把类型给隐藏掉，可以使用像 <code>sizeof(x)</code> 这样的方式得到 <code>size</code>。但是如果类型是 <code>char*</code>，那么，使用<code>sizeof</code>方式只能提到指针类型的<code>size</code>，而不是值的<code>size</code>。另外，对于不同的类型，比如说<code>double</code>和<code>int</code>，那应该用谁的<code>size</code>呢？是不是先转一下型呢？这些都是问题。</p><p>于是，这种泛型，让我们根本没有办法检查传入参数的<code>size</code>，导致我们只能增加接口复杂度，加入一个<code>size</code>参数，然后把这个问题抛给调用者了。</p><h3>一个更为复杂的泛型示例 - Search函数</h3><p>如果我们把这个事情变得更复杂，写个<code>search</code>函数，再传一个<code>int</code>数组，然后想搜索<code>target</code>，搜到返回数组下标，搜不到返回<code>-1</code>。</p><pre><code class=\"language-c\">int search(int* a, size_t size, int target) {\n\tfor(int i=0; i&lt;size; i++) {\n\t\tif (a[i] == target) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n</code></pre><p>我们可以看到，这个函数是类型 <code>int</code> 版的。如果我们要把这个函数变成泛型的应该怎么变呢？</p><p>就像上面<code>swap()</code>函数那样，如果要把它变成泛型，我们需要变更并复杂化函数接口。</p><ol>\n<li>\n<p>我们需要在函数接口上增加一个element size，也就是数组里面每个元素的size。这样，当我们遍历数组的时候，可以通过这个size正确地移动指针到下一个数组元素。</p>\n</li>\n<li>\n<p>我还要加个<code>cmpFn</code>。因为我要去比较数组里的每个元素和<code>target</code>是否相等。因为不同数据类型的比较的实现不一样，比如，整型比较用 <code>==</code> 就好了。但是如果是一个字符串数组，那么比较就需要用 <code>strcmp</code> 这类的函数。而如果你传一个结构体数组（如Account账号），那么比较两个数据对象是否一样就比较复杂了，所以，必须要自定义一个比较函数。</p>\n</li>\n</ol><p>最终我们的<code>search</code>函数的泛型版如下所示：</p><pre><code class=\"language-c\">int search(void* a, size_t size, void* target, \n\tsize_t elem_size, int(*cmpFn)(void*, void*) )\n{\n\tfor(int i=0; i&lt;size; i++) {\n\t\t// why not use memcmp()\n\t\t// use unsigned char * to calculate the address\n\t\tif ( cmpFn ((unsigned char *)a + elem_size * i, target) == 0 ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n</code></pre><p>在上面的代码中，我们没有使用<code>memcmp()</code>函数，这是因为，如果这个数组是一个指针数组，或是这个数组是一个结构体数组，而结构体数组中有指针成员。我们想比较的是指针指向的内容，而不是指针这个变量。所以，用<code>memcmp()</code>会导致我们在比较指针（内存地址），而不是指针所指向的值。</p><p>而调用者需要提供如下的比较函数：</p><pre><code class=\"language-c\">int int_cmp(int* x, int* y)\n{\n\treturn *x - *y;\n}\n\nint string_cmp(char* x, char* y){\n\treturn strcmp(x, y);\n}\n</code></pre><p>如果面对有业务类型的结构体，可能会是这样的比较函数：</p><pre><code class=\"language-c\">typedef struct _account {\n\tchar name[10];\n\tchar id[20];\n} Account;\n\nint account_cmp(Account* x, Account* y) {\n\tint n = strcmp(x-&gt;name, y-&gt;name);\n\tif (n != 0) return n;\n\treturn strcmp(x-&gt;id, y-&gt;id);\n}\n</code></pre><p>我们的C语言干成这个样子，看上去还行，但是，上面的这个<code>search</code>函数只能用于数组这样的顺序型的数据容器（数据结构）。如果这个<code>search</code>函数能支持一些非顺序型的数据容器（数据结构），比如：堆、栈、哈希表、树、图。那么，用C语言来干基本上干不下去了，对于像<code>search()</code>这样的算法来说，数据类型的自适应问题就已经把事情搞得很复杂了。然而，数据结构的自适应就会把这个事的复杂度搞上几个数量级。</p><h1>小结</h1><p>这里，如果说，<code>程序 = 算法 + 数据</code>，我觉得C语言会有这几个问题：</p><ol>\n<li>\n<p>一个通用的算法，需要对所处理的数据的数据类型进行适配。但在适配数据类型的过程中，C语言只能使用 <code>void*</code> 或 <code>宏替换</code>的方式，这两种方式导致了类型过于宽松，并带来很多其它问题。</p>\n</li>\n<li>\n<p>适配数据类型，需要C语言在泛型中加入一个类型的size，这是因为我们识别不了被泛型后的数据类型，而C语言没有运行时的类型识别，所以，只能将这个工作抛给调用泛型算法的程序员来做了。</p>\n</li>\n<li>\n<p>算法其实是在操作数据结构，而数据则是放到数据结构中的，所以，真正的泛型除了适配数据类型外，还要适配数据结构，最后这个事情导致泛型算法的复杂急剧上升。比如容器内存的分配和释放，不同的数据体可能有非常不一样的内存分配和释放模型；再比如对象之间的复制，要把它存进来我需要有一个复制，这其中又涉及到是深拷贝，还是浅拷贝。</p>\n</li>\n<li>\n<p>最后，在实现泛型算法的时候，你会发现自己在纠结哪些东西应该抛给调用者处理，哪些又是可以封装起来。如何平衡和选择，并没有定论，也不好解决。</p>\n</li>\n</ol><p>总体来说，C语言设计目标是提供一种能以简易的方式编译、处理底层内存、产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。C语言也很适合搭配汇编语言来使用。C语言把非常底层的控制权交给了程序员，它设计的理念是：</p><ul>\n<li>相信程序员；</li>\n<li>不会阻止程序员做任何底层的事；</li>\n<li>保持语言的最小和最简的特性；</li>\n<li>保证C语言的最快的运行速度，那怕牺牲移值性。</li>\n</ul><p>从某种角度上来说，C语言的伟大之处在于——<strong>使用C语言的程序员在高级语言的特性之上还能简单地做任何底层上的微观控制</strong>。这是C语言的强大和优雅之处。也有人说，C语言是高级语言中的汇编语言。</p><p>不过，这只是在针对底层指令控制和过程式的编程方式。而对于更高阶、更为抽象的编程模型来说，C语言这种基于过程和底层的初衷设计方式就会成为它的短板。因为，在编程这个世界中，更多的编程工作是解决业务上的问题，而不是计算机的问题，所以，我们需要更为贴近业务、更为抽象的语言。</p><p>说到这里，我想你会问，那C语言会怎么去解决这些问题呢？简单点说，C语言并没有解决这些问题，所以才有了后面的C++等其他语言，下一讲中，我也会和你聊聊C++是如何解决这些问题的。</p><p>C语言诞生于1972年，到现在已经有45年的历史，在它之后，C++、Java、C#等语言前仆后继，一浪高过一浪，都在试图解决那个时代的那个特定问题。我们不能去否定某个语言，但可以确定的是，随着历史的发展，每一门语言都还在默默迭代，不断优化和更新。同时，也会有很多新的编程语言带着新的闪光耀眼的特性出现在我们面前。</p><p>再回过头来说，编程范式其实就是程序的指导思想，它也代表了这门语言的设计方向，我们并不能说哪种范式更为超前，只能说各有千秋。</p><p>比如C语言就是过程式的编程语言，像C语言这样的过程式编程语言优点是底层灵活而且高效，特别适合开发运行较快且对系统资源利用率要求较高的程序，但我上面抛出的问题它在后来也没有试图去解决，因为编程范式的选择基本已经决定了它的“命运”。</p><p>我们怎么解决上述C语言没有解决好的问题呢？请期待接下来的讲解。</p>","comments":[{"had_liked":false,"id":2019,"user_name":"TaoLR","can_delete":false,"product_type":"c1","uid":1004102,"ip_address":"","ucode":"1BAE96AA8E6229","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/46/3d4f32f7.jpg","comment_is_top":false,"comment_ctime":1515523677,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"418127351389","product_id":100002201,"comment_content":"关于编程范式，超级喜欢《冒号课堂》那本书...两年前读的，真是相见恨晚。跟读大神的文章一样收获满满。","like_count":98,"discussions":[{"author":{"id":1033499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c5/1b/abb7bfe3.jpg","nickname":"happyzeng","note":"","ucode":"AD9DDE21448613","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1820,"discussion_content":"冒号学堂确实是一本非常好的书，开拓了我的技术视野。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1562928007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c5/1b/abb7bfe3.jpg","nickname":"happyzeng","note":"","ucode":"AD9DDE21448613","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1819,"discussion_content":"冒号学堂确实是一本非常好的书，开拓了我的技术视野。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562928007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2271170,"avatar":"","nickname":"Geek_U","note":"","ucode":"62D4FF54C2CDF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318655,"discussion_content":"又有文笔，又有技术的作者真的很少见。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603800033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1624871,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlvHOFaCicVAdz0ibnBlboBfvQkee9D4yPwH7pJdWnvpLDWfLOdiaaS7YR6LDqFQqwElkskfBmSx45A/132","nickname":"DeppWang","note":"","ucode":"3A1464D998652D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201016,"discussion_content":"强烈推荐冒号课堂，搞笑又有深度","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583752695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461770,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4e/0a/0ff15eaa.jpg","nickname":"pencilCool","note":"","ucode":"49A9FE2DEE2911","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":153941,"discussion_content":"kindle 上有这本书卖，读了一下作者的序言，文采斐然","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580094548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2803070,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/gTnAoZ9fJ3K2G9Mib3ecwt1ngfM1EkNm19e6xlpj1ibwruuleMne129icIHRc41td2RXtz7PE4v4NfKczEXhictjgA/132","nickname":"111qqz","note":"","ucode":"16C24D8347912B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565384,"discussion_content":"去看了冒号 ，感觉确实还不错，就是无关内容太多了，有60%都是和内容关系不大的对话场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650457246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004102,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/46/3d4f32f7.jpg","nickname":"TaoLR","note":"","ucode":"1BAE96AA8E6229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2803070,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/gTnAoZ9fJ3K2G9Mib3ecwt1ngfM1EkNm19e6xlpj1ibwruuleMne129icIHRc41td2RXtz7PE4v4NfKczEXhictjgA/132","nickname":"111qqz","note":"","ucode":"16C24D8347912B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569285,"discussion_content":"读了感悟没那么强烈也正常…所有书都一样，每个人读完感受都不一样。随意就好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651394398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":565384,"ip_address":""},"score":569285,"extra":""}]},{"author":{"id":1006248,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/a8/4af0e073.jpg","nickname":"woohello","note":"","ucode":"F21102C3014D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531443,"discussion_content":"去看看冒号课堂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637312224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004988,"avatar":"","nickname":"hhzzer","note":"","ucode":"3A6B085577913C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413619,"discussion_content":"我是看这一系列看不懂，看冒号学堂书重新梳理了，相见恨晚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636528205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286965,"discussion_content":"看来我也要去下载看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593334436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239747,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587307529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1884,"user_name":"ibrothergang","can_delete":false,"product_type":"c1","uid":1002191,"ip_address":"","ucode":"4151DA353A1DDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/cf/5cbccd62.jpg","comment_is_top":false,"comment_ctime":1515026495,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"173313718335","product_id":100002201,"comment_content":"真正优秀的程序员就是应该上能写业务，下能搞底层。","like_count":40,"discussions":[{"author":{"id":2058258,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/68/12/031a05c3.jpg","nickname":"A免帅叫哥","note":"","ucode":"76D2522E602AEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300507,"discussion_content":"跟术业有专攻矛盾不。。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598152383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2641303,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4d/97/1d99a0a3.jpg","nickname":"柒城","note":"","ucode":"CAC7861175232A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578854,"discussion_content":"能搞底层的搞业务就是浪费人才","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1657068779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210553,"user_name":"Filon","can_delete":false,"product_type":"c1","uid":1154707,"ip_address":"","ucode":"4B10D5ED40EA28","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/93/894f33ed.jpg","comment_is_top":false,"comment_ctime":1587786902,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"147616674966","product_id":100002201,"comment_content":"记一下评论里的推荐：斯坦福编程范式公开课、冒号课堂、七周七语言。","like_count":34,"discussions":[{"author":{"id":2018006,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ca/d6/14f9a821.jpg","nickname":"学海无涯我有涯","note":"","ucode":"BE1992C52EDD20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283650,"discussion_content":"看评论收获也不少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592320250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15653,"user_name":"403","can_delete":false,"product_type":"c1","uid":1001867,"ip_address":"","ucode":"D9360256DFEF5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/8b/3596a3e2.jpg","comment_is_top":false,"comment_ctime":1531359833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113200509529","product_id":100002201,"comment_content":"斯坦福大学的编程范式公开课很好","like_count":26},{"had_liked":false,"id":1950,"user_name":"shougao","can_delete":false,"product_type":"c1","uid":1019500,"ip_address":"","ucode":"17A3DD3B973787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6Zbo7ZIOYjnon52ONvWYicicxmwfg8xOqcEn0HtQ3UfE3UkpWv1ibJMoLLqmqIzjdoWmLqcgyNBAaw/132","comment_is_top":false,"comment_ctime":1515214425,"is_pvip":false,"replies":[{"id":"375","content":"我本来就是想在一年内写完104篇，写多少发多少，不是匀速发。不过运营方不同意，匀速发有规律，也容易慢慢消化，因为我的文章中知识量比较多……见谅了。以后我有控制权了，就照你说的办……","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1515333182,"ip_address":"","comment_id":1950,"utype":1}],"discussion_count":2,"race_medal":0,"score":"104594429529","product_id":100002201,"comment_content":"分好几篇读，而且还要等好久才有下篇，每次都有意犹未尽感觉，女生说的追剧可能就是这感觉吧，浩哥写书吧，哪怕199一本直接读到你前后所有的思路","like_count":24,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415597,"discussion_content":"我本来就是想在一年内写完104篇，写多少发多少，不是匀速发。不过运营方不同意，匀速发有规律，也容易慢慢消化，因为我的文章中知识量比较多……见谅了。以后我有控制权了，就照你说的办……","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1515333182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175405,"discussion_content":"这个专栏已经是一本书了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581954517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1882,"user_name":"Weizw","can_delete":false,"product_type":"c1","uid":1003091,"ip_address":"","ucode":"379386254110B2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/53/f5eb0de9.jpg","comment_is_top":false,"comment_ctime":1515022345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104594237449","product_id":100002201,"comment_content":"强烈请求耗子哥整理成书啊，现在都是打印出来慢慢读。","like_count":24},{"had_liked":false,"id":101387,"user_name":"karas","can_delete":false,"product_type":"c1","uid":1349594,"ip_address":"","ucode":"836873D0D9973B","user_header":"https://static001.geekbang.org/account/avatar/00/14/97/da/ae765e15.jpg","comment_is_top":false,"comment_ctime":1559795964,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57394370812","product_id":100002201,"comment_content":"代码看的比较郁闷的同学(比如我这种。。。)可以参考K&amp;R书的5.11章节，函数指针部分。<br><br>主要看两点，一个是函数指针的声明和调用，比如这种`int (*comp)(*void, *void)`。<br><br>另外，就是*void。void本身没啥卵用的，但是*void表示通用指针，可以被任何类型赋值。可以对标一下Java里面的Object类型。其实，Java的泛型在运行时擦除后，也都是Object，思路到挺像。","like_count":14,"discussions":[{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105892,"discussion_content":"C程序设计语言","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577497768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","nickname":"一枝梅","note":"","ucode":"7DCE43B638EA6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37504,"discussion_content":"K&amp;R书，书名是什么啊，请教一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571627082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1912,"user_name":"ryerh","can_delete":false,"product_type":"c1","uid":1042567,"ip_address":"","ucode":"D65B915B1674D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/87/a6110d14.jpg","comment_is_top":false,"comment_ctime":1515071064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53054678616","product_id":100002201,"comment_content":"响应式编程够得上算一门范式么？<br>以RX为代表的这一系列，考虑讲一讲么？","like_count":12},{"had_liked":false,"id":229591,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1593069002,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"27362872778","product_id":100002201,"comment_content":"专栏的文章是两年半之前的，上一次读是在一年之前（好像没有读完编程范式游记这个系列），最近因为学习《软件设计之美》，里面提到了编程范式，所以回过头来再学一遍。<br><br>感觉错过了一个亿。<br><br>按照文中的说法，学习编程范式，可以了解编程语言的发展史，同时还能提高编程技能。<br><br>以前一直认为 C 语言很“高级”，其实现在仍然可以这么说，但是估计 C 语言的职位可能相对要少一些（薪水可能很高）。<br><br>C 语言的编程范式——过程式语言，结构化程序设计、变量作用域、递归、静态弱类型，在高级语言的特性之上还能做底层微观控制，决定了 C 语言的适用范围和发展轨迹。<br><br>用 C 语言来操作泛型，看着真是心塞。是不是当年并没有现在这么多的数据类型？或者是那个时候的“业务”相对底层，只需要几种类型就可以。<br><br>像我这样资质普通的程序员，写的最多的还是业务代码，所以估计不会有太多机会写 C 代码了。<br><br>虽不能至，心向往之……","like_count":6},{"had_liked":false,"id":2011,"user_name":"子悠","can_delete":false,"product_type":"c1","uid":1000383,"ip_address":"","ucode":"070BB09477E8A8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/bf/9a982bc1.jpg","comment_is_top":false,"comment_ctime":1515474501,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27285278277","product_id":100002201,"comment_content":"这个系列又都是干货！！！","like_count":6},{"had_liked":false,"id":1898,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1515040947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27284844723","product_id":100002201,"comment_content":"最喜欢看到的文字就是“我保证你会，本质是……”","like_count":6},{"had_liked":false,"id":176383,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1581046215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23055882695","product_id":100002201,"comment_content":"阅过留痕<br>记下两本书回头看看<br>《冒号课堂》《七周七语言》","like_count":5},{"had_liked":false,"id":104304,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1560730608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23035567088","product_id":100002201,"comment_content":"编程范式中的主线从范型编程，函数式编程，面向对象编程，到阐述编程的本质。<br>编程概括来讲是算法＋数据结构，不同的语言希望达到的共同目标都是希望能够尽可能的做到代码的可重用和易扩展。<br>对于C语言这样面向过程，偏底层的语言，它选择信任程序员，可以很直接的操作计算机底层的硬件，做内存的直接读写访问，使得它执行更高效，但同时也带来了当类型变换代码扩展困难的问题。此处在C＋＋中通过范型来解决了","like_count":5},{"had_liked":false,"id":12854,"user_name":"宋桓公","can_delete":false,"product_type":"c1","uid":1151948,"ip_address":"","ucode":"04235C2B87AB0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_is_top":false,"comment_ctime":1529073221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23003909701","product_id":100002201,"comment_content":"今天对范式编程有了新的理解，非常感谢。<br>不过想想重装系统就是用这种范式都解决不好的语言写的，岂不蛋疼","like_count":5},{"had_liked":false,"id":1897,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1515040152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18694909336","product_id":100002201,"comment_content":"终于等到这个系列了！！","like_count":4},{"had_liked":false,"id":225213,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1591684631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14476586519","product_id":100002201,"comment_content":"螺帽 —— 数据<br>螺帽的尺寸 —— 数据类型、数据长度<br>平口的、十字的、六角的等螺帽 —— 接口，类<br>如何使用这些螺帽？通过螺丝刀 —— 函数、算法<br>在什么场景下使用什么螺丝刀安装螺帽？人 —— 编程逻辑","like_count":3},{"had_liked":false,"id":99328,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1559194185,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"14444096073","product_id":100002201,"comment_content":"大学的时候 C 语言就一直没有学好，不能全怪“谭老师”，不过确实那本教科书里面并没有讲的很清晰。回头看来，其实 C 语言可能并不适合作为入门语言。<br><br>毕业后没有什么动手写 C 代码的机会，接触了 JavaScript，Java，C#……比较喜欢 C# 的语法和风格。<br><br>还曾经看过斯坦福大学的编程范式，不过也只是看了个开头。<br><br>这个系列的文章发表已经快一年了，才来拜读，姗姗来迟，相见恨晚。","like_count":3},{"had_liked":false,"id":1910,"user_name":"小王","can_delete":false,"product_type":"c1","uid":1013344,"ip_address":"","ucode":"C69CF3D405770A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/60/9452d5ea.jpg","comment_is_top":false,"comment_ctime":1515067332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14399969220","product_id":100002201,"comment_content":"很精彩，希望后续还能有讲解数据结构的系列😄","like_count":3},{"had_liked":false,"id":211431,"user_name":"Simon","can_delete":false,"product_type":"c1","uid":1914504,"ip_address":"","ucode":"A8A2E3E57BD029","user_header":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","comment_is_top":false,"comment_ctime":1587962015,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10177896607","product_id":100002201,"comment_content":"char tmp[size];  如何能编译的过？","like_count":2,"discussions":[{"author":{"id":1687479,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bf/b7/3d22f02a.jpg","nickname":"许良","note":"","ucode":"DE8C5C01DF3A35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323753,"discussion_content":"C99支持VLA（variable length array）数组，允许使用变量定义数组的维度，不过在使用上有一定的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604991658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166725,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1577578952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167513544","product_id":100002201,"comment_content":"C语言是入门的第一门语言，当然也是基于C之父谭的教材。当时代码编写并不知道有什么逻辑也不清楚为什么如此设计，只知道照猫画虎编写实现几个函数。现在看来当时接触到，主动去学习了解的经典材料太少，同时实践太少。没有实践，尤其是复杂工程的实践，而是沉迷于hello world以及循环地hello world并不会让人对语言的高级技巧有需求，同时会给人一种我掌握了的错觉。循序渐进，通过循序来持续学习，通过渐进来提升能力应该是更好的一种学习提升的途径。<br>回到本篇，C很强大，通过C对指针对内存有了一定了解。但在后续工作中确实发现存在难以适配通用的麻烦。编程范式是一种思维，不范不厌烦，多复制几份代码照样可以输出正确答案，但这是不偷懒的表现，提高效率，应该刻在心里。","like_count":2},{"had_liked":false,"id":112369,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1562724379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152658971","product_id":100002201,"comment_content":"感觉c语言是个划时代的“中间层”语言。在它出现的那个年代最高级，而后又成为新的底层。在以前的硬件电路里它还有很多用武之地，但随着cpu内存等集成度越来越高，硬件资源的瓶颈被突破，c可能真的会被定格到“中间层”了。","like_count":2},{"had_liked":false,"id":65224,"user_name":"梁亮","can_delete":false,"product_type":"c1","uid":1376120,"ip_address":"","ucode":"7733F15EBA9D60","user_header":"https://static001.geekbang.org/account/avatar/00/14/ff/78/c05eed06.jpg","comment_is_top":false,"comment_ctime":1549121825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139056417","product_id":100002201,"comment_content":"七周七语言也是一本好书，推荐。","like_count":2},{"had_liked":false,"id":8383,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1526138769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10116073361","product_id":100002201,"comment_content":"这个五年的人才能看懂，是真的。","like_count":2},{"had_liked":false,"id":2047,"user_name":"亮出","can_delete":false,"product_type":"c1","uid":1014289,"ip_address":"","ucode":"A7673283D03656","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/11/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515632739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10105567331","product_id":100002201,"comment_content":"这样发挺好的，直接出书可能不会看了","like_count":2},{"had_liked":false,"id":1891,"user_name":"茎待佳阴","can_delete":false,"product_type":"c1","uid":1042464,"ip_address":"","ucode":"21A7DC2C3EA389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/20/3374ea9e.jpg","comment_is_top":false,"comment_ctime":1515033827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10104968419","product_id":100002201,"comment_content":"现在一般一个项目都不会只用一种语言了吧？底层的用c,c++这种，上层用java这些，各尽其能","like_count":2},{"had_liked":false,"id":123158,"user_name":"我的腿腿","can_delete":false,"product_type":"c1","uid":1239277,"ip_address":"","ucode":"2AAA36A7C3AD75","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_is_top":false,"comment_ctime":1565617729,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5860585025","product_id":100002201,"comment_content":"一段java代码怎么变成C语言、汇编语言，不知道能不能从这里找到答案","like_count":1,"discussions":[{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312034,"discussion_content":"还真不能，Java 编译后，会成为一个字节码文件。字节码，就是Java虚拟机上的汇编语言。所有你要看到一段 Java 代码编译成 C 语言，会汇编，是做不到的。JVM 技术还有一个 JIT ，运行时编译的机制，在高频代码里可以看到其生成机器码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602568302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49817,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1544775471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839742767","product_id":100002201,"comment_content":"对c语言有了进一步的了解，很喜欢这种讨论底层和本质的文章。<br>范式就是语言的指导思想，这就很形象，容易理解和记住，以前老师推荐七周七语言，好像也是讨论七种语言的编程范式","like_count":1},{"had_liked":false,"id":17919,"user_name":"固态U盘","can_delete":false,"product_type":"c1","uid":1043446,"ip_address":"","ucode":"9C473DA25CB4C1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/f6/ec7971f4.jpg","comment_is_top":false,"comment_ctime":1533023212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827990508","product_id":100002201,"comment_content":"浩哥的这篇文章刚发出来的时候基本没看明白，过了几个月回头再看，明白了。","like_count":1},{"had_liked":false,"id":13395,"user_name":"麋鹿在泛舟","can_delete":false,"product_type":"c1","uid":1121975,"ip_address":"","ucode":"1379CADA08688E","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","comment_is_top":false,"comment_ctime":1529581910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5824549206","product_id":100002201,"comment_content":"Mark","like_count":1},{"had_liked":false,"id":13255,"user_name":"elon","can_delete":false,"product_type":"c1","uid":1147046,"ip_address":"","ucode":"21D97A171A189F","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/a6/83b9096b.jpg","comment_is_top":false,"comment_ctime":1529476056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824443352","product_id":100002201,"comment_content":"看你文章上瘾，你真厉害。有空写一个《技术文章该怎么写能让人上瘾》系列。向您学习！","like_count":1},{"had_liked":false,"id":8845,"user_name":"Sammi","can_delete":false,"product_type":"c1","uid":1129573,"ip_address":"","ucode":"86E687B3501D0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/65/2f667f92.jpg","comment_is_top":false,"comment_ctime":1526480108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5821447404","product_id":100002201,"comment_content":"语言很简洁啊，但是又干货满满，越看越有意思","like_count":1},{"had_liked":false,"id":8384,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1526138810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5821106106","product_id":100002201,"comment_content":"五年经验看以看懂，难道我现在一年看懂很奇怪","like_count":1},{"had_liked":false,"id":3266,"user_name":"鲸鱼","can_delete":false,"product_type":"c1","uid":1052643,"ip_address":"","ucode":"71437C1C601040","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/e3/c49aa508.jpg","comment_is_top":false,"comment_ctime":1518840201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5813807497","product_id":100002201,"comment_content":"同问rxjava算一门范式吗？","like_count":1},{"had_liked":false,"id":2350,"user_name":"Lu | SSEINFO","can_delete":false,"product_type":"c1","uid":1045848,"ip_address":"","ucode":"389B5493CCEA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/58/9ee22cda.jpg","comment_is_top":false,"comment_ctime":1516874259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5811841555","product_id":100002201,"comment_content":"科班出身毕业一年这一篇都能看懂。不过看懂容易却讲不清楚写不出来。","like_count":1},{"had_liked":false,"id":2048,"user_name":"亮出","can_delete":false,"product_type":"c1","uid":1014289,"ip_address":"","ucode":"A7673283D03656","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/11/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515632828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5810600124","product_id":100002201,"comment_content":"本来就是地铁上打发时间用的，强烈要求匀速发","like_count":1},{"had_liked":false,"id":357644,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"广东","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1663513265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663513265","product_id":100002201,"comment_content":"C 语言是一个静态弱类型语言，在使用变量时需要声明变量类型，但是类型间可以有隐式转换。但是Java也存在类型的隐式转换，为什么Java就是强类型呢？","like_count":0},{"had_liked":false,"id":354399,"user_name":"Geek_4975c9","can_delete":false,"product_type":"c1","uid":1860558,"ip_address":"日本","ucode":"22E5D3926FF1FF","user_header":"","comment_is_top":false,"comment_ctime":1660359767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660359767","product_id":100002201,"comment_content":"没理解为什么min(i++,j++)宏替换后变量会累加两次","like_count":0},{"had_liked":false,"id":311033,"user_name":"我是曾经那个少年","can_delete":false,"product_type":"c1","uid":1015189,"ip_address":"","ucode":"9F02F7FF147D14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","comment_is_top":false,"comment_ctime":1631026348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631026348","product_id":100002201,"comment_content":"2021年回过头来打卡","like_count":0},{"had_liked":false,"id":278536,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1613028767,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1613028767","product_id":100002201,"comment_content":"对C快忘光了，不过用宏实现swap似乎不需要size参数？<br><br>```<br><br>#define swap(x, y) {\\<br>  size_t size = sizeof(x);<br>  char temp[size]; \\<br>  memcpy(temp, &amp;y, size); \\<br>  memcpy(&amp;y,   &amp;x, size); \\<br>  memcpy(&amp;x, temp, size); \\<br>}<br>```","like_count":0},{"had_liked":false,"id":277946,"user_name":"偶系渣渣辉","can_delete":false,"product_type":"c1","uid":1989788,"ip_address":"","ucode":"EC3C796E603D11","user_header":"https://static001.geekbang.org/account/avatar/00/1e/5c/9c/d3c694a0.jpg","comment_is_top":false,"comment_ctime":1612680438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612680438","product_id":100002201,"comment_content":"我们可以看到，无论是传统世界，还是编程世界，我们都在干一件事情，什么事呢？拧螺丝","like_count":0},{"had_liked":false,"id":268170,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1608088273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608088273","product_id":100002201,"comment_content":"从整体来看，每一种语言的出现，迭代，新生，都在试图解决那个时代的那个特定问题。编程范式其实就是程序的指导思想，它也代表了这门语言的设计方向。设计方向又源于解决那个时代的特定问题，所以编程范式也决定这门语言的命运。","like_count":0},{"had_liked":false,"id":222908,"user_name":"一墨","can_delete":false,"product_type":"c1","uid":2009734,"ip_address":"","ucode":"2EFB72EEC69FE2","user_header":"","comment_is_top":false,"comment_ctime":1590954307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590954307","product_id":100002201,"comment_content":"看到search函数的范式实现时, C&#47;C++语言10年编程者跪下了, 脑补火云邪神的那一跪... 牛气的皓哥, 大到分布式关键技术, 小到特定编程语言的细节, 拿捏得游刃有余. 陈皓这个名字我记下来了, 愿此生追随. 2020&#47;06&#47;01记","like_count":0},{"had_liked":false,"id":211408,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1587959070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587959070","product_id":100002201,"comment_content":"C 语言编程真感觉是高级的汇编语言，但胜在速度快，所以总感觉在开源项目中使用 C 语言编写的服务会比其他更高级的语言会有速度上的优势（当然还要看技术实现的核心算法）<br>","like_count":0},{"had_liked":false,"id":210563,"user_name":"毛毛狗","can_delete":false,"product_type":"c1","uid":1036692,"ip_address":"","ucode":"E71AB99F70C4B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d1/94/5d28ddea.jpg","comment_is_top":false,"comment_ctime":1587787781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587787781","product_id":100002201,"comment_content":"算法其实是在操作数据结构，而数据则是放到数据结构中的，所以，真正的泛型除了适配数据类型外，还要适配数据结构，最后这个事情导致泛型算法的复杂急剧上升。比如容器内存的分配和释放，不同的数据体可能有非常不一样的内存分配和释放模型；再比如对象之间的复制，要把它存进来我需要有一个复制，这其中又涉及到是深拷贝，还是浅拷贝。","like_count":0},{"had_liked":false,"id":210330,"user_name":"Johnny","can_delete":false,"product_type":"c1","uid":1809156,"ip_address":"","ucode":"E3BD0D9ABF2710","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/p83UpvULG4E9MbCfmia1OcUEu67eTOdWjednKu3N2FuAqxUqtyI9JCxf2Wmic39vwrAx55iakEEzNhLWE28bOvHyw/132","comment_is_top":false,"comment_ctime":1587722057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587722057","product_id":100002201,"comment_content":"一直想好好屡一下编程范式，没想到在这里看到了。之前买了本7周7语言。一直压箱子底呢。看来可以拿出来参照着看看了。C语言确实偏底层，但是强在效率高，过程化编程思想也最贴近计算机执行过程（输入--处理--输出）。","like_count":0},{"had_liked":false,"id":201668,"user_name":"xxyyyboy","can_delete":false,"product_type":"c1","uid":1916113,"ip_address":"","ucode":"C8F0E08ED1C1D9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJu684YiafbNTjJNZ0BpxD2wVzW9mSdBEQd6ALfnqQJDcfntiatOmRribgngn31JIsibgQUF7t2q1ibIkQ/132","comment_is_top":false,"comment_ctime":1585818195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585818195","product_id":100002201,"comment_content":"学习中","like_count":0},{"had_liked":false,"id":166808,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1577603680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577603680","product_id":100002201,"comment_content":"五年以上我也不是很理解，主要是对C语言的宏定义已经忘的差不多了，这个泛型编程是不是和java里的范型差不多，都是抽象出更加通用的方法和类型。达到复用的能力。","like_count":0},{"had_liked":false,"id":153700,"user_name":"月光蓝","can_delete":false,"product_type":"c1","uid":1339547,"ip_address":"","ucode":"B28A1B234C4016","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/9b/56248387.jpg","comment_is_top":false,"comment_ctime":1574298298,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574298298","product_id":100002201,"comment_content":"签到一下","like_count":0},{"had_liked":false,"id":147099,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572793537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572793537","product_id":100002201,"comment_content":"代码示例 swap，源自斯坦福  编程范式  04课程。","like_count":0},{"had_liked":false,"id":123153,"user_name":"我的腿腿","can_delete":false,"product_type":"c1","uid":1239277,"ip_address":"","ucode":"2AAA36A7C3AD75","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_is_top":false,"comment_ctime":1565617370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565617370","product_id":100002201,"comment_content":"刚打开看了一点，表示得慢慢消化慢慢看，信息量确实大","like_count":0},{"had_liked":false,"id":113557,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1181044,"ip_address":"","ucode":"64A617C170AE4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/74/bdd60f29.jpg","comment_is_top":false,"comment_ctime":1563077053,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563077053","product_id":100002201,"comment_content":"耗子哥出本书吧😄，我一定买下来慢慢看","like_count":0,"discussions":[{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249776,"discussion_content":"慢慢看，就是不会看","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587961964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12739,"user_name":"张洪阆","can_delete":false,"product_type":"c1","uid":1001954,"ip_address":"","ucode":"CFF7035D0DF059","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/e2/1fad12eb.jpg","comment_is_top":false,"comment_ctime":1528990249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528990249","product_id":100002201,"comment_content":"推荐读 c现代编程，可以作为补充","like_count":0},{"had_liked":false,"id":5537,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1025680,"ip_address":"","ucode":"FD6A58AB271E5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/90/5295fce8.jpg","comment_is_top":false,"comment_ctime":1523491906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1523491906","product_id":100002201,"comment_content":"开视野，涨知识","like_count":0},{"had_liked":false,"id":1987,"user_name":"coderliang","can_delete":false,"product_type":"c1","uid":1003016,"ip_address":"","ucode":"0C3EC272B9E40E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/08/d497c158.jpg","comment_is_top":false,"comment_ctime":1515383793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515383793","product_id":100002201,"comment_content":"请教能不能讲一讲 切面编程 ？之前听说过这个概念，但概念理解的不是很清晰。","like_count":0},{"had_liked":false,"id":1968,"user_name":"Join","can_delete":false,"product_type":"c1","uid":1014873,"ip_address":"","ucode":"20F51EFFD8FEDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/59/dc9bbb21.jpg","comment_is_top":false,"comment_ctime":1515297987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515297987","product_id":100002201,"comment_content":"学习了，再次对 程序＝数据结构 + 算法 有了新的认识","like_count":0},{"had_liked":false,"id":1942,"user_name":"总指挥","can_delete":false,"product_type":"c1","uid":1022702,"ip_address":"","ucode":"C33506F095DDEC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/ee/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515198449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515198449","product_id":100002201,"comment_content":"很喜欢这种娓娓道来的感觉","like_count":0},{"had_liked":false,"id":1925,"user_name":"cellardoor","can_delete":false,"product_type":"c1","uid":1003824,"ip_address":"","ucode":"ECB20F7DFC5A65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/30/da6ae0d8.jpg","comment_is_top":false,"comment_ctime":1515117979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515117979","product_id":100002201,"comment_content":"喜欢","like_count":0},{"had_liked":false,"id":1895,"user_name":"Langzi233","can_delete":false,"product_type":"c1","uid":1042685,"ip_address":"","ucode":"5A21AC08FC089B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515036570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515036570","product_id":100002201,"comment_content":"了解本源，对比学习，谢谢耗子叔","like_count":0}]}