{"id":3912,"title":"41 | 弹力设计篇之“认识故障和弹力设计”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>我前面写的《分布式系统架构的本质》系列文章，从分布式系统的业务层、中间件层、数据库层等各个层面介绍了高并发架构、异地多活架构、容器化架构、微服务架构、高可用架构、弹性化架构等，也就是所谓的“纲”。通过这个“纲”，你能够按图索骥，掌握分布式系统中每个部件的用途与总体架构思路。</p><p>为了让你更深入地了解分布式系统，在接下来的几期中，我想谈谈分布式系统中一些比较关键的设计模式，其中包括容错、性能、管理等几个方面。</p><ul>\n<li>\n<p><strong>容错设计又叫弹力设计</strong>，其中着眼于分布式系统的各种“容忍”能力，包括容错能力（服务隔离、异步调用、请求幂等性）、可伸缩性（有/无状态的服务）、一致性（补偿事务、重试）、应对大流量的能力（熔断、降级）。可以看到，在确保系统正确性的前提下，系统的可用性是弹力设计保障的重点。</p>\n</li>\n<li>\n<p><strong>管理篇</strong>会讲述一些管理分布式系统架构的一些设计模式，比如网关方面的，边车模式，还有一些刚刚开始流行的，如Service Mesh相关的设计模式。</p>\n</li>\n<li>\n<p><strong>性能设计篇</strong>会讲述一些缓存、CQRS、索引表、优先级队列、业务分片等相关的架构模式。</p>\n</li>\n</ul><p>我相信，你在掌握了这些设计模式之后，无论是对于部署一个分布式系统，开发一个分布式的业务模块，还是研发一个新的分布式系统中间件，都会有所裨益。</p><!-- [[[read_end]]] --><p>今天分享的就是《分布式系统设计模式》系列文章中的第一篇《弹力设计篇之“认识故障和弹力设计”》。</p><h1>系统可用性测量</h1><p>对于分布式系统的容错设计，在英文中又叫Resiliency（弹力）。意思是，系统在不健康、不顺，甚至出错的情况下有能力hold得住，挺得住，还有能在这种逆境下力挽狂澜的能力。</p><p>要做好一个设计，我们需要一个设计目标，或是一个基准线，通过这个基准线或目标来指导我们的设计，否则在没有明确基准线的指导下，设计会变得非常不明确，并且也不可预测，不可测量。可测试和可测量性是软件设计中非常重要的事情。</p><p>我们知道，容错主要是为了可用性，那么，我们是怎样计算一个系统的可用性的呢？下面是一个工业界里使用的一个公式：</p><p>$$Availability=\\frac{MTTF}{MTTF +MTTR}$$</p><p>其中，</p><ul>\n<li>\n<p>MTTF 是 Mean Time To Failure，平均故障前的时间，即系统平均能够正常运行多长时间才发生一次故障。系统的可靠性越高，MTTF越长。（注意：从字面上来说，看上去有Failure的字样，但其实是正常运行的时间。）</p>\n</li>\n<li>\n<p>MTTR 是 Mean Time To Recovery，平均修复时间，即从故障出现到故障修复的这段时间，这段时间越短越好。</p>\n</li>\n</ul><p>这个公式就是计算系统可用性的，也就是我们常说的，多少个9，如下表所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/11/6ca2f7ba3537b341c9f6701fc7e25711.png?wh=1728x1180\" alt=\"\"><br>\n根据上面的这个公式，为了提高可用性，我们要么提高系统的无故障时间，要么减少系统的故障恢复时间。</p><p>然而，我们要明白，我们运行的是一个分布式系统，对于一个分布式系统来说，要不出故障简直是太难了。</p><h1>故障原因</h1><p>老实说，我们很难计算我们设计的系统有多少的可用性，因为影响一个系统的因素实在是太多了，除了软件设计，还有硬件，还有第三方服务（如电信联通的宽带SLA），当然包括“建筑施工队的挖掘机”。</p><p>所以，正如SLA的定义，这不只是一个技术指标，而是一种服务提供商和用户之间的contract或契约。这种工业级的玩法，就像飞机一样，并不是把飞机造出来就好了，还有大量的无比专业的配套设施、工具、流程、管理和运营。</p><p>简而言之，SLA的几个9就是能持续提供可用服务的级别。不过，工业界中，会把服务不可用的因素分成两种：一种是有计划的，一种是无计划的。</p><p>无计划的宕机原因。下图来自Oracle的 <a href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\">High Availability Concepts and Best Practices</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/0b/a879f083b84e956e3b3ab549fac18a0b.jpg?wh=3500*2136\" alt=\"\"></p><p>有计划的宕机原因。下图来自Oracle的<a href=\"https://docs.oracle.com/cd/A91202_01/901_doc/rac.901/a89867/pshavdtl.htm\">High Availability Concepts and Best Practices</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/ad/3b17a354d64de88e8a51c381b64401ad.jpg?wh=3459*1511\" alt=\"\"><br>\n可以看到，宕机原因主要有以下这些。</p><p><strong>无计划的</strong></p><ul>\n<li>系统级故障，包括主机、操作系统、中间件、数据库、网络、电源以及外围设备。</li>\n<li>数据和中介的故障，包括人员误操作、硬盘故障、数据乱了。</li>\n<li>还有自然灾害、人为破坏，以及供电问题等。</li>\n</ul><p><strong>有计划的</strong></p><ul>\n<li>日常任务：备份，容量规划，用户和安全管理，后台批处理应用。</li>\n<li>运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护。</li>\n<li>升级相关：数据库、应用、中间件、操作系统、网络，包括硬件升级。</li>\n</ul><p>我们再给它们归个类。</p><ol>\n<li><strong>网络问题</strong>。网络链接出现问题，网络带宽出现拥塞……</li>\n<li><strong>性能问题</strong>。数据库慢SQL、Java Full GC、硬盘IO过大、CPU飙高、内存不足……</li>\n<li><strong>安全问题</strong>。被网络攻击，如DDoS等。</li>\n<li><strong>运维问题</strong>。系统总是在被更新和修改，架构也在不断地被调整，监控问题……</li>\n<li><strong>管理问题</strong>。没有梳理出关键服务以及服务的依赖关系，运行信息没有和控制系统同步……</li>\n<li><strong>硬件问题</strong>。硬盘损坏、网卡出问题、交换机出问题、机房掉电、挖掘机问题……</li>\n</ol><h1>故障不可避免</h1><p>如果你看过我写过的《分布式系统架构的本质》和《故障处理》这两个系列的文章，就会知道要管理好一个分布式系统是一件非常难的事。对于大规模的分布式系统，出现故障基本上就是常态，甚至还有些你根本就不知道会出问题的地方。</p><p>在今天来说，一个分布式系统的故障已经非常复杂了，因为故障是分布式的、多米诺骨牌式的。就像我在《分布式系统架构的本质》中展示过的这个图一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/3e/bd48fbd74405e8380defdf708b6b3e3e.png?wh=865*381\" alt=\"\"></p><p>如果你在云平台上，或者使用了“微服务”，面对大量的IoT设备以及不受控制的用户流量，那么系统故障会更为复杂和变态。因为上面这些因素增加了整个系统的复杂度。</p><p>所以，要充分地意识到下面两个事。</p><ul>\n<li><strong>故障是正常的，而且是常见的</strong>。</li>\n<li><strong>故障是不可预测突发的，而且相当难缠</strong>。</li>\n</ul><p>所以，亚马逊的AWS才会把Design for Failure作为其七大Design Principle的重点。这告诉我们，不要尝试着去避免故障，而是要把处理故障的代码当成正常的功能做在架构里写在代码里。</p><p>因为我们要干的事儿就是想尽一切手段来降低MTTR——故障的修复时间。</p><p>这就是为什么我们把这个设计叫做弹力（Resiliency）。</p><ul>\n<li>\n<p>一方面，在好的情况下，这个事对于我们的用户和内部运维来说是完全透明的，系统自动修复不需要人的干预。</p>\n</li>\n<li>\n<p>另一方面，如果修复不了，系统能够做自我保护，而不让事态变糟糕。</p>\n</li>\n</ul><p>这就是所谓的“弹力”——能上能下。这让我想到三国杀里赵云的技能——“能进能退乃真正法器”，哈哈。</p><h1>小结</h1><p>好了，今天的内容就到这里。相信通过今天的学习，你应该已经明白了弹力设计的真正目的，并对系统可用性的衡量指标和故障的各种原因有所了解。下一讲，我们将开始罗列一些相关的设计模式。</p><p>在这节课的最后，很想听听大家在设计一个分布式系统时，设定了多高的可用性指标？实现的难点在哪里？踩过什么样的坑？你是如何应对的？</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","comments":[{"had_liked":false,"id":3442,"user_name":"华烬","can_delete":false,"product_type":"c1","uid":1008444,"ip_address":"","ucode":"D36AE0FBEF665A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/3c/b4cfbce9.jpg","comment_is_top":false,"comment_ctime":1519630230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"121778714518","product_id":100002201,"comment_content":"看到挖掘机的时候我笑了，印象中真的经历过光纤被挖断的故障","like_count":29},{"had_liked":false,"id":227645,"user_name":"qgymje","can_delete":false,"product_type":"c1","uid":1309328,"ip_address":"","ucode":"1DFE4B52E8C36A","user_header":"https://static001.geekbang.org/account/avatar/00/13/fa/90/f937f371.jpg","comment_is_top":false,"comment_ctime":1592448590,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48837088846","product_id":100002201,"comment_content":"在听这文章的时候，我想到了可能容错这个概念，是统一分布式系统所有知识的核心，几乎所有的设计方案都是围绕着容错进行的，无论是简单的Supervisor启动服务进程，K8S里Pod的重启机制，还是应用层面的限流，熔断，降级，都是为了保证系统的可用性，也就是所谓的弹性；而幂等，补偿，以及数据复制等设计方案，是为了保证系统的正确性，也从另一方案说明了系统的容错能力。","like_count":12,"discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290723,"discussion_content":"谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594579909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":3367,"user_name":"songyy","can_delete":false,"product_type":"c1","uid":1007201,"ip_address":"","ucode":"34D6443B91676D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/61/985f3eb7.jpg","comment_is_top":false,"comment_ctime":1519221992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44468894952","product_id":100002201,"comment_content":"我觉得自己缺少解决 大规模 高可用 分布式 问题的经验，一直希望在这方面进行深挖但无奈工作范围限制，没有相关的问题可以遇到。期待能在这个系列之中看到更多的例子 😁","like_count":10},{"had_liked":false,"id":226257,"user_name":"迷途书童","can_delete":false,"product_type":"c1","uid":1090142,"ip_address":"","ucode":"462BE64D3373DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/5e/3871ff79.jpg","comment_is_top":false,"comment_ctime":1592017691,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"35951756059","product_id":100002201,"comment_content":"弹力这个词是左耳朵耗子翻译的一个词，大家应该慎用，要么直接用Resiliency，要么用容错。 因为在很多公司里，很少直接说，我们这个系统支持弹力设计。从感性的角度来说，容错这个词很难与弹力划上等号","like_count":9,"discussions":[{"author":{"id":1050518,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/96/d01ebfe7.jpg","nickname":"archmageforac","note":"","ucode":"782B46B42EEF65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549530,"discussion_content":"确实，一般公司里说的弹力都是和扩缩容相关😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644057812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290722,"discussion_content":"我觉得翻译为容错更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594579714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256660,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1603700072,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23078536552","product_id":100002201,"comment_content":"看到挖掘机挖端光纤的时候，太有意思了。有一次我们的系统不稳定，网络抖动故障，持续几天就出现那个点，上下游系统怎么查也查不出来。最后发现了，那个点下班时间，人员过多走过那条机房外面的路，通过地板砖踩踏，影响李里面的光纤网线了。","like_count":6,"discussions":[{"author":{"id":1203558,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/66/214d5b94.jpg","nickname":"blue","note":"","ucode":"D73CDD86E79946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379392,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623862486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244283,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/7b/adfef198.jpg","nickname":"一位不愿透漏姓名的足球名宿","note":"","ucode":"2A67AD14C1F436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350108,"discussion_content":"哈哈哈，绝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613712782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81047,"user_name":"一飞","can_delete":false,"product_type":"c1","uid":1059308,"ip_address":"","ucode":"A51A3714D6E5AB","user_header":"https://static001.geekbang.org/account/avatar/00/10/29/ec/19566a0a.jpg","comment_is_top":false,"comment_ctime":1553785412,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23028621892","product_id":100002201,"comment_content":"异步调用为啥是容错设计？ 应该是提高性能的一种策略。","like_count":5,"discussions":[{"author":{"id":1164003,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c2/e3/df7447ff.jpg","nickname":"008","note":"","ucode":"E1D9D91E18208A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41039,"discussion_content":"应该是与同步调用相比时，异步调用不会因为某个请求耗时阻塞，导致后续请求等待、资源被吊死的情况，在一个高并发请求中一旦有某一环节出现高耗时，那就可能造成雪崩效应，所以这是一种容错设计","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1572333963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45666,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1543741953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14428643841","product_id":100002201,"comment_content":"很多公司应该支撑不到挖掘机这个阶段就倒闭了。","like_count":4},{"had_liked":false,"id":3379,"user_name":"蓝海","can_delete":false,"product_type":"c1","uid":1046721,"ip_address":"","ucode":"F84ABE8B08B44E","user_header":"","comment_is_top":false,"comment_ctime":1519275252,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14404177140","product_id":100002201,"comment_content":"耗子哥可否在后面出一篇有关gcc优化带来的相关问题（各种崩溃，优化选项对程序做了哪些假设，哪些&quot;非标准&quot;的代码会导致优化错误），如何判断崩溃是由于优化，二进制不兼容，链接错误导致，而非一般的代码错误。gcc的优化选项看了官网说明很多遍，但说明过于简洁（编译原理只停留在前端印象，优化技术生疏），想了解的感性一些。这些bug问题解决都很费力，想归纳出一条方法经验论，怎样的代码要求才能对各种优化级别不出错（gcc本身bug除外）。以上的问题以及问题本身是否成立，想请耗子哥指导","like_count":4,"discussions":[{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407315,"discussion_content":"还不如关注如何把代码写对写好，把程序员的基本功抓好，而不是想着复制粘贴代码，依赖编译器去优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634978748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1050518,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/96/d01ebfe7.jpg","nickname":"archmageforac","note":"","ucode":"782B46B42EEF65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549532,"discussion_content":"我不太认可这个观点。比如iOS的apple clang++编译器，很多时候代码写对写好了也还是会crash。这里面确实需要一些经验，什么样的代码是比较保守的，能应对各种编译器的各种优化，什么样的代码是比较激进的，对特定编译器的特定编译选项能取得最优性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644058053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":407315,"ip_address":""},"score":549532,"extra":""}]}]},{"had_liked":false,"id":3378,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1519273753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14404175641","product_id":100002201,"comment_content":"耗子叔每篇文章真是干货十足。","like_count":3},{"had_liked":false,"id":211709,"user_name":"Geek_7b1383","can_delete":false,"product_type":"c1","uid":1310716,"ip_address":"","ucode":"A2F03709F77122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLndPicaib35sSOgGib8iafFBq8B0hoBO3Bfp3QViblYQ669lRFjPD1RSX2rDibmElID00l5oWokhuZBJnw/132","comment_is_top":false,"comment_ctime":1587998135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177932727","product_id":100002201,"comment_content":"故障是正常的，不可预测突发的，需要弹力（Resiliency）：<br>在好的情况下，这个事对于我们的用户和内部运维来说是完全透明的，系统自动修复不需要人的干预。<br>如果修复不了，系统能够做自我保护，而不让事态变糟糕。<br>我们设定可用率99.99%<br>实现的难点尽一切努力减少故障恢复时间<br>按照分类，系统无计划的系统级故障等做好智能监控和自愈能力，自然灾害、人为破坏，以及供电问题等有异地容灾，第三方规避风险。有计划的，流程加全链路监控保证，同时事前检查备份，事中双人复核操作，事后各位措施验证和人工验证，智能监控探测等，异常情况回滚方案的设计原则。<br>","like_count":2},{"had_liked":false,"id":183498,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1583053751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10172988343","product_id":100002201,"comment_content":"服务端是一个多用户系统，从这点就可以知道对后端可用性的高要求。服务端应提供7&#47;24的不间断服务。然而由于分布式系统由多台机器组成，出现故障就不是不可避免的。可以说分布式系统的架构就是为了解决这个矛盾。<br><br>服务调度是值一个服务有多个实例。不至于一台宕机整体服务不可用。<br>全栈监控是整个系统的眼睛，观察整个系统的状况，出现问题做报警。因而需要在业务逻辑中加入监控卖点，向监控系统报告自己的情况，还要做好审计日志以及异常日志，以便故障之后复现原因恢复系统运行。<br>流量调度是分担每个服务，进程等实例的访问压力。状态与数据调度是在多个副本之间对Ｃ,A做出权衡。","like_count":2},{"had_liked":false,"id":193018,"user_name":"高彬","can_delete":false,"product_type":"c1","uid":1182674,"ip_address":"","ucode":"E26D4E32F978F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/d2/e72e7657.jpg","comment_is_top":false,"comment_ctime":1584882300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879849596","product_id":100002201,"comment_content":"老师的课都是经验啊  赞","like_count":1},{"had_liked":false,"id":172481,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1579187679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874154975","product_id":100002201,"comment_content":"弹力设计，保持系统容错性。错误不可避免，如何在错误发生后恢复或者记录关键信息便于恢复才是我们应该达到的目标。对于故障，同时也要区分可能导致故障的场景，针对性地处理","like_count":1},{"had_liked":false,"id":164831,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1577097664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872064960","product_id":100002201,"comment_content":"对于分布式系统，故障是不避免的。根据公式：我们程序鲁棒性越高越好，故障恢复时长越短越好。如何缩短故障恢复时长，自动化+流程化。","like_count":1},{"had_liked":false,"id":121978,"user_name":"疾风紫狼","can_delete":false,"product_type":"c1","uid":1243304,"ip_address":"","ucode":"88FCCFDB6F7AFB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/a8/e8b8fc68.jpg","comment_is_top":false,"comment_ctime":1565261570,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5860228866","product_id":100002201,"comment_content":"能进能退乃真正法器可还行。","like_count":1,"discussions":[{"author":{"id":1002938,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/ba/83e6dcbf.jpg","nickname":"skyline","note":"","ucode":"4E73F9049751F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344100,"discussion_content":"七进七出可还行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611290857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282813,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","nickname":"文刂 氵共 超","note":"","ucode":"C2CE1512D23012","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91431,"discussion_content":"开车了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576833665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108950,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1561941204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856908500","product_id":100002201,"comment_content":"分布式系统出故障是不可避免的，弹力设计的关键是要提高系统的可用性，提高MTTF，提高MTTF，一是拉长系统稳定运行时间，一是减少故障恢复时间。<br>由于分布式系统故障呢普遍性，因此在分布式系统设计的和开发的过程中，就要把故障当作不可或缺的一环来处理，尽可能让故障恢复过程自动化，从而真正提高系统可用","like_count":1},{"had_liked":false,"id":3322,"user_name":"卢俊杰 _JAY","can_delete":false,"product_type":"c1","uid":1050867,"ip_address":"","ucode":"9A4EA3A518A27C","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/f3/4b10028e.jpg","comment_is_top":false,"comment_ctime":1519084257,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5814051553","product_id":100002201,"comment_content":"以前或多或少写过一些数据库, MQ自动重连的代码，不过还没有一个整体的认识，多谢作者把这个事情系统化，条理清晰多了","like_count":1},{"had_liked":false,"id":307883,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1629292004,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1629292004","product_id":100002201,"comment_content":"MTTF = MTTF&#47;(MTTF+MTTR)","like_count":0},{"had_liked":false,"id":307882,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1629291983,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1629291983","product_id":100002201,"comment_content":"弹力设计！","like_count":0},{"had_liked":false,"id":285534,"user_name":"刘旭","can_delete":false,"product_type":"c1","uid":1122641,"ip_address":"","ucode":"DD628C59BEB81D","user_header":"https://static001.geekbang.org/account/avatar/00/11/21/51/a6020b74.jpg","comment_is_top":false,"comment_ctime":1616859688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616859688","product_id":100002201,"comment_content":"韧性设计","like_count":0},{"had_liked":false,"id":214083,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1588651399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588651399","product_id":100002201,"comment_content":"可用度的计算比较容易理解，关键问题是MTTR和MTTF如何去计算呢？业界有没有相关的实践？","like_count":0},{"had_liked":false,"id":211428,"user_name":"Geek_130e9e","can_delete":false,"product_type":"c1","uid":1587628,"ip_address":"","ucode":"518AAF2F228C17","user_header":"","comment_is_top":false,"comment_ctime":1587961621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587961621","product_id":100002201,"comment_content":"大规模、高可用、分布式，考验实力了。","like_count":0},{"had_liked":false,"id":199586,"user_name":"PCMD","can_delete":false,"product_type":"c1","uid":1842844,"ip_address":"","ucode":"76A1106F42AEAC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/1e/9c/39f5ff2a.jpg","comment_is_top":false,"comment_ctime":1585491833,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585491833","product_id":100002201,"comment_content":"挖掘机挖断，非核心业务拖垮核心业务，大量数据量的请求，导致整体核心服务不可用，这些场景，都遇到过，而从这样一次次的事故中，满满的提升自己的服务健壮与容错，并总结出经验，这个的确是不经历，不知道的什么地方会给你埋雷","like_count":0},{"had_liked":false,"id":194593,"user_name":"头发茂密","can_delete":false,"product_type":"c1","uid":1474084,"ip_address":"","ucode":"263C8B685F19A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/24/afb15de3.jpg","comment_is_top":false,"comment_ctime":1585080124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585080124","product_id":100002201,"comment_content":"这部分和性能测试有点像，尤其是性能调优部分，会涉及软硬件，网络，数据库等等设施，相当复杂。","like_count":0},{"had_liked":false,"id":193020,"user_name":"高彬","can_delete":false,"product_type":"c1","uid":1182674,"ip_address":"","ucode":"E26D4E32F978F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/d2/e72e7657.jpg","comment_is_top":false,"comment_ctime":1584882348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584882348","product_id":100002201,"comment_content":"分布式系统可以做类似主从集群的架构吗   避免单点故障","like_count":0},{"had_liked":false,"id":166763,"user_name":"Haan","can_delete":false,"product_type":"c1","uid":1388133,"ip_address":"","ucode":"7A7BBE0D0CD39E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq8qpSvBoZz89u3BhGXWLibs2OibCkZl8bx74aLSJ58f467bR8anNaTiccJklcqjBdhfvvJpvLVmYesA/132","comment_is_top":false,"comment_ctime":1577589691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577589691","product_id":100002201,"comment_content":"get","like_count":0},{"had_liked":false,"id":163954,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1576833820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576833820","product_id":100002201,"comment_content":"坚持打卡，学习笔记  https:&#47;&#47;mubu.com&#47;colla&#47;3xYIprsBVJM","like_count":0},{"had_liked":false,"id":117761,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1564125590,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564125590","product_id":100002201,"comment_content":"看完分布式，以为一块难点看完了；这下好了，还有分布式系统设计模式，又得扒一层皮，慢慢消化。耗子叔的输出，真的帮助太大","like_count":0},{"had_liked":false,"id":115605,"user_name":"迷途书童","can_delete":false,"product_type":"c1","uid":1090142,"ip_address":"","ucode":"462BE64D3373DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/5e/3871ff79.jpg","comment_is_top":false,"comment_ctime":1563671403,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563671403","product_id":100002201,"comment_content":"偶然再回顾了一下，容错设计又叫弹力设计，弹力设计这个名字我google了一下，并没有官方的定义，放在这里任意误导读者","like_count":0},{"had_liked":false,"id":62892,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1548203450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548203450","product_id":100002201,"comment_content":"高度上来了，分布式系统也在弄，不过整体系统认知不足，正好学习下。<br>分布式系统太过分散和复杂，网络环境有不稳定，所以，问题不可避免，痛点感觉都在网络通信这一块了。","like_count":0},{"had_liked":false,"id":57675,"user_name":"十八哥","can_delete":false,"product_type":"c1","uid":1027167,"ip_address":"","ucode":"C0130252F97814","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/5f/894761f8.jpg","comment_is_top":false,"comment_ctime":1546866870,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546866870","product_id":100002201,"comment_content":"首先所有接口设计足够协议化，这是弹力前提。","like_count":0},{"had_liked":false,"id":57033,"user_name":"痴痴笑笑(Bruce)","can_delete":false,"product_type":"c1","uid":1355659,"ip_address":"","ucode":"569D7B23A91130","user_header":"https://static001.geekbang.org/account/avatar/00/14/af/8b/0a2fdaa4.jpg","comment_is_top":false,"comment_ctime":1546605456,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546605456","product_id":100002201,"comment_content":"目前正在做这方面的工作，刚好学以致用","like_count":0},{"had_liked":false,"id":24105,"user_name":"LeO","can_delete":false,"product_type":"c1","uid":1230651,"ip_address":"","ucode":"15C02DDE6114EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/3b/3ba28bc3.jpg","comment_is_top":false,"comment_ctime":1536803293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536803293","product_id":100002201,"comment_content":"提纲挈领，非常的系统地介绍了系统的高可用的设计理念","like_count":0},{"had_liked":false,"id":24104,"user_name":"LeO","can_delete":false,"product_type":"c1","uid":1230651,"ip_address":"","ucode":"15C02DDE6114EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/3b/3ba28bc3.jpg","comment_is_top":false,"comment_ctime":1536803292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536803292","product_id":100002201,"comment_content":"提纲挈领，非常的系统地介绍了系统的高可用的设计理念","like_count":0},{"had_liked":false,"id":21149,"user_name":"蜗Amazon牛","can_delete":false,"product_type":"c1","uid":1068923,"ip_address":"","ucode":"3652A74D558292","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1534940242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534940242","product_id":100002201,"comment_content":"老师你说的分布式系统架构本质的文章指的那几篇呢？分布式关键技术那几篇吗？其余的我也没看到啊","like_count":0},{"had_liked":false,"id":5164,"user_name":"data","can_delete":false,"product_type":"c1","uid":1010493,"ip_address":"","ucode":"4EEC3CE11E65F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/3d/ae41c2b3.jpg","comment_is_top":false,"comment_ctime":1522802246,"is_pvip":true,"replies":[{"id":"1396","content":"这些东西的代码量太大，你可以参看开源软件","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1522978070,"ip_address":"","comment_id":5164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1522802246","product_id":100002201,"comment_content":"老师可以提供代码案例来讲解吗这样感觉可以学的更多哈哈","like_count":0,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416622,"discussion_content":"这些东西的代码量太大，你可以参看开源软件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1522978070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":3681,"user_name":"厉害了我的国","can_delete":false,"product_type":"c1","uid":1052191,"ip_address":"","ucode":"CD0A54A1B998AA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","comment_is_top":false,"comment_ctime":1520299314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1520299314","product_id":100002201,"comment_content":"能进能退乃真正法器","like_count":0},{"had_liked":false,"id":3437,"user_name":"郎哲","can_delete":false,"product_type":"c1","uid":1007926,"ip_address":"","ucode":"EE2F5F061E2F7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/36/343a8ef8.jpg","comment_is_top":false,"comment_ctime":1519619124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1519619124","product_id":100002201,"comment_content":"有一段时间总是喜欢把iot和im 划等号，iot最大特点就是您文章提到流量不受控制还一直在线。","like_count":0},{"had_liked":false,"id":3364,"user_name":"Tony Du","can_delete":false,"product_type":"c1","uid":1001661,"ip_address":"","ucode":"F5FCC400E615EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/bd/6c7d4230.jpg","comment_is_top":false,"comment_ctime":1519205242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1519205242","product_id":100002201,"comment_content":"终于上新了","like_count":0}]}