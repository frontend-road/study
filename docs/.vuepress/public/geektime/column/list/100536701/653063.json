{"id":653063,"title":"21｜再回首： 如何实现Spring AOP?","content":"<p>你好，我是郭屹。</p><p>到这一节课，我们的Spring AOP部分也就结束了，你是不是跟随我的这个步骤也实现了自己的AOP呢？欢迎你把你的实现代码分享出来，我们一起讨论，共同进步！为了让你对这一章的内容掌握得更加牢固，我们对AOP的内容做一个重点回顾。</p><h3>重点回顾</h3><p>Spring AOP是Spring框架的一个核心组件之一，是Spring面向切面编程的探索。面向对象和面向切面，两者一纵一横，编织成一个完整的程序结构。</p><p>在AOP编程中，Aspect指的是横切逻辑（cross-cutting concerns），也就是那些和基本业务逻辑无关，但是却是很多不同业务代码共同需要的功能，比如日志记录、安全检查、事务管理，等等。Aspect能够通过Join point，Advice和Pointcut来定义，在运行的时候，能够自动在Pointcut范围内的不同类型的Advice作用在不同的Join point上，实现对横切逻辑的处理。</p><p>所以，这个AOP编程可以看作是一种以Aspect为核心的编程方式，它强调的是将横切逻辑作为一个独立的属性进行处理，而不是直接嵌入到基本业务逻辑中。这样做，可以提高代码的可复用性、可维护性和可扩展性，使得代码更容易理解和设计。</p><!-- [[[read_end]]] --><p>AOP的实现，是基于JDK动态代理的，站在Java的角度，这很自然，概念很容易实现，但是效率不高，限制也比较多。可以说AOP的实现是Spring框架中少数不尽人意的一部分，也可以看出世界顶级高手也有考虑不周到的地方。</p><p>那我们在课程中是如何一步步实现AOP的呢？</p><p>我们是基于JDK来实现的，因为比较自然、容易。我们先是引入了Java的动态代理技术，探讨如何用这个技术动态插入业务逻辑。然后我们进一步抽取动态业务逻辑，引入Spring里的Interceptor和Advice的概念。之后通过引入Spring的PointCut概念，进行advice作用范围的定义，让系统知道前面定义的Advice 会对哪些对象产生影响。最后为了免除手工逐个配置PointCut和Interceptor的工作，我们就通过一个自动化的机制自动生成动态代理。最终实现了一个有模有样的AOP解决方案。</p><p>好了，回顾完这一章的重点，我们再来看一下我每节课后给你布置的思考题。题目和答案我都放到下面了，不要偷懒，好好思考之后再来看答案。</p><h3>17｜动态代理：如何在运行时插入逻辑？</h3><h4>思考题</h4><p>如果MiniSpring想扩展到支持Cglib，程序应该从哪里下手改造？</p><h4>参考答案</h4><p>我们的动态代理包装在AopProxy这个接口中，对JDK动态代理技术，使用了JdkDynamicAopProxy这个类来实现，所以平行的做法，对于Cglib技术，我们就可以新增一个CglibAopProxy类进行实现。</p><p>同时，采用哪一种AOP Proxy可以由工厂方法决定，也就是在ProxyFactoryBean中所使用的aopProxyFactory，它在初始化的时候有个默认实现，即DefaultAopProxyFactory。我们可以将这个类的createAopProxy()方法改造一下。</p><pre><code class=\"language-plain\">\tpublic class DefaultAopProxyFactory implements AopProxyFactory {\n\t\tpublic AopProxy createAopProxy(Object target) {\n\t\t\tif (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {\n\t\t\t\treturn new JdkDynamicAopProxy(target);\n\t\t\t}\n\t\t\treturn new CglibAopProxy(config);\n\t\t}\n\t}\n</code></pre><p>根据某些条件决定使用JdkDynamicAopProxy还是CglibAopProxy，或者通过配置文件给一个属性来配置也可以。</p><h3>18｜拦截器 ：如何在方法前后进行拦截？</h3><h4>思考题</h4><p>如果我们希望beforeAdvice能在某种情况下阻止目标方法的调用，应该从哪里下手改造改造我们的程序？</p><h4>参考答案</h4><p>答案在MethodBeforeAdviceInterceptor&nbsp;的实现中，看它的invoke方法。</p><pre><code class=\"language-plain\">\tpublic class MethodBeforeAdviceInterceptor implements MethodInterceptor {\n\t\tpublic Object invoke(MethodInvocation mi) throws Throwable {\n\t\t\tthis.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());\n\t\t\treturn mi.proceed();\n\t\t}\n\t}\n</code></pre><p>这个方法先调用advice.before()，然后再调用目标方法。所以如果我们希望beforeAdvice能够阻止流程继续，可以将advice.before()接口改造成有一个boolean返回值，规定返回false则不调用mi.proceed()。</p><h3>19｜Pointcut ：如何批量匹配代理方法？</h3><h4>思考题</h4><p>我们现在实现的匹配规则是按照  <code>*</code> 模式串进行匹配，如果有不同的规则，应该如何改造呢？</p><h4>参考答案</h4><p>如果仍然按照名字来匹配，那就可以改造NameMatchMethodPointcut类，它现在的核心代码是：</p><pre><code class=\"language-plain\">\tpublic class NameMatchMethodPointcut implements MethodMatcher,Pointcut{\n\t\tprivate String mappedName = \"\";\n\t\tprotected boolean isMatch(String methodName, String mappedName) {\n\t\t\treturn PatternMatchUtils.simpleMatch(mappedName, methodName);\n\t\t}\n\t}\n</code></pre><p>默认的实现用的是PatternMatchUtils.simpleMatch()，比较简单的模式串。我们可以给PatternMatchUtils增加一个方法，如regExprMatch()正则表达式匹配，在这里接收正则表达式串，进行匹配校验。</p><p>如果超出名字匹配的范围，需要用到不一样的匹配规则，就可以并列增加一个OtherMatchMethodPointcut类h和响应的advisor类，自己实现。并在配置文件里指定使用这个Advisor。</p><pre><code class=\"language-plain\">\t&lt;bean id=\"advisor\" class=\"com.minis.aop.OtherMatchMethodPointcutAdvisor\"&gt;\n&nbsp; &nbsp; &lt;/bean&gt;\n&nbsp; &nbsp;&nbsp;&lt;bean id=\"action\" class=\"com.minis.aop.ProxyFactoryBean\"&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;property type=\"String\" name=\"interceptorName\" value=\"advisor\" /&gt;\n&nbsp; &nbsp; &lt;/bean&gt;\n</code></pre><h3>20｜AutoProxyCreator：如何自动添加动态代理？</h3><h4>思考题</h4><p>AOP时常用于数据库事务处理，如何用我们现在的AOP架构实现简单的事务处理？</p><h4>参考答案</h4><p>针对数据库事务，手工代码简化到了极致，就是执行SQL之前执行conn.setAutoCommit(false),在执行完SQL之后，再执行conn.commit()。因此，我们用一个MethodInterceptor就可以简单实现。</p><p>假定有了这样一个interceptor。</p><pre><code class=\"language-plain\">&lt;bean id=\"transactionInterceptor\" class=\"TransactionInterceptor\" /&gt;\n</code></pre><p>这个Interceptor拦截目标方法后添加事务处理逻辑，因此需要改造一下。</p><pre><code class=\"language-plain\">public class TransactionInterceptor implements MethodInterceptor{\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\nconn.setAutoCommit(false);\nObject ret=invocation.proceed();\nconn.commit();\n\t\treturn ret;\n\t}\n}\n</code></pre><p>从代码里可以看到，这里需要一个conn，因此我们要设法将数据源信息注入到这里。</p><p>我们可以抽取出一个TranactionManager类，大体如下：</p><pre><code class=\"language-plain\">public class TransactionManager {\n\t@Autowired\n\tprivate DataSource dataSource;\n\tConnection conn = null;\n\n\tprotected void doBegin() {\n\t\tconn = dataSource.getConnection();\n\t\tif (conn.getAutoCommit()) {\n\t\t\tconn.setAutoCommit(false);\n\t\t}\n\t}\n\tprotected void doCommit() {&nbsp;\n\t\tconn.commit();\n\t}\n}\n</code></pre><p>由这个transaction manager负责数据源以及开始和提交事务，然后将这个transaction manager作为一个Bean注入Interceptor，因此配置应该是这样的。</p><pre><code class=\"language-plain\">&lt;bean id=\"transactionInterceptor\" class=\"TransactionInterceptor\" &gt;\n&nbsp; &nbsp; &lt;property type=\"TransactionManager\" name=\"transactionManager\" value=\"txManager\" /&gt;\n&lt;/bean&gt;\n&lt;bean id=\"txManager\" class=\"TransactionManager\"&gt;\n&lt;/bean&gt;\n</code></pre><p>所以Interceptor最后应该改造成这个样子：</p><pre><code class=\"language-plain\">public class TransactionInterceptor implements MethodInterceptor{\n  TransactionManager transactionManager;\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\ntransactionManager.doBegin();\nObject ret=invocation.proceed();\ntransactionManager.doCommit();\n\t\treturn ret;\n\t}\n}\n</code></pre>","neighbors":{"left":{"article_title":"20｜AutoProxyCreator：如何自动添加动态代理？","id":652748},"right":{"article_title":"结束语｜老兵回首，薪火相传","id":653589}},"comments":[{"had_liked":false,"id":376864,"user_name":"__@Wong","can_delete":false,"product_type":"c1","uid":1422756,"ip_address":"广东","ucode":"A54A5FC672F23D","user_header":"https://static001.geekbang.org/account/avatar/00/15/b5/a4/67d6e3cb.jpg","comment_is_top":false,"comment_ctime":1687602452,"is_pvip":false,"replies":[{"id":137384,"content":"赞你！","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1687734277,"ip_address":"澳大利亚","comment_id":376864,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"这个课程终于学完了，讲实话收获很多。上班偷着看课程到周末写代码，前前后后花了一个多月的时间。之前也有看过spring的源码，但是看后基本忘记了。感谢本课程作者，将Spring庞大的体系进行了拆解剥离出主干，大大降低了spring学习起来的困难程度，学完对spring的体系也有了深层次的认识。一方面对spring的流程加深了理解，另一方面学习spring的优秀的架构体系设计。  git地址贴这里了，喜欢的点个小星星，建议一开始使用maven来构建项目方便很多 期待后续miniTomcat课程。\nhttps:&#47;&#47;github.com&#47;hhhhhzj&#47;mini-spring&#47;tree&#47;master","like_count":3,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621868,"discussion_content":"赞你！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687734277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179137,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/01/dedbf09a.jpg","nickname":"陈念念","note":"","ucode":"6B1C104F48499F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624558,"discussion_content":"非常实用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690709230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386435,"user_name":"1184507801","can_delete":false,"product_type":"c1","uid":1141923,"ip_address":"广东","ucode":"930E2F79C5582A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/a3/7d60e2a0.jpg","comment_is_top":false,"comment_ctime":1704805058,"is_pvip":false,"replies":[{"id":140891,"content":"你多试几次，国内访问Github不稳定。我后面的MiniTomcat课程让助手搬到国内的Gitee了\n","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1705023716,"ip_address":"澳大利亚","comment_id":386435,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"老师你发的源码地址失效了啊","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635647,"discussion_content":"你多试几次，国内访问Github不稳定。我后面的MiniTomcat课程让助手搬到国内的Gitee了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705023716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375950,"user_name":"风轻扬","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"北京","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/15ab499a.jpg","comment_is_top":false,"comment_ctime":1686146827,"is_pvip":false,"replies":[{"id":137192,"content":"会有的","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1686363389,"ip_address":"澳大利亚","comment_id":375950,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"期待miniTomcat课程","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620632,"discussion_content":"会有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686363389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373590,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1682729822,"is_pvip":false,"replies":[{"id":136430,"content":"util下的一个工具类，看github","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1682744405,"ip_address":"澳大利亚","comment_id":373590,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"PatternMatchUtils是SDK提供的，怎么增加方法？派生一个类吗？","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616365,"discussion_content":"util下的一个工具类，看github","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1682744405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"澳大利亚","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379620,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"上海","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1692198801,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100536701,"comment_content":"终于花了一个礼拜摸鱼学完了，我的代码在https:&#47;&#47;github.com&#47;dll02&#47;mini_spring ，环境搭建最大的难度是idea启动tomcat那里，主要需要确认编译后的代码处在out目录里生成的文件结构是否是预期的，启动以后打开tomcat对应的manager页面，检查加载进tomcat的模块名字，最后还需要注意tomcat和使用http serverlet包的匹配，其他的网上都有资料，对照检查。\n很期待老师其他的课程，手写tomcat啥的，自己学习如何从零造框架确实很有助于自己学习理解代码，精进自己的代码手艺。\n谢谢老师分享教学。","like_count":0}]}