{"id":125429,"title":"32丨查询优化器是如何工作的？","content":"<p>我们总是希望数据库可以运行得更快，也就是响应时间更快，吞吐量更大。想要达到这样的目的，我们一方面需要高并发的事务处理能力，另一方面需要创建合适的索引，让数据的查找效率最大化。事务和索引的使用是数据库中的两个重要核心，事务可以让数据库在增删查改的过程中，保证数据的正确性和安全性，而索引可以帮数据库提升数据的查找效率。</p><p>如果我们想要知道如何获取更高的SQL查询性能，最好的方式就是理解数据库是如何进行查询优化和执行的。</p><p>今天我们就来看看查询优化的原理是怎么一回事。今天的主要内容包括以下几个部分：</p><ol>\n<li>什么是查询优化器？一条SQL语句的执行流程都会经历哪些环节，在查询优化器中都包括了哪些部分？</li>\n<li>查询优化器的两种优化方式分别是什么？</li>\n<li>基于代价的优化器是如何统计代价的？总的代价又如何计算？</li>\n</ol><h2>什么是查询优化器</h2><p>了解查询优化器的作用之前，我们先来看看一条SQL语句的执行都需要经历哪些环节，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/31/6776cd76ea50db263bfd9d58c4d98631.png?wh=1296*166\" alt=\"\"><br>\n你能看到一条SQL查询语句首先会经过分析器，进行语法分析和语义检查。我们之前讲过语法分析是检查SQL拼写和语法是否正确，语义检查是检查SQL中的访问对象是否存在。比如我们在写SELECT语句的时候，列名写错了，系统就会提示错误。语法检查和语义检查可以保证SQL语句没有错误，最终得到一棵语法分析树，然后经过查询优化器得到查询计划，最后交给执行器进行执行。</p><!-- [[[read_end]]] --><p>查询优化器的目标是找到执行SQL查询的最佳执行计划，执行计划就是查询树，它由一系列物理操作符组成，这些操作符按照一定的运算关系组成查询的执行计划。在查询优化器中，可以分为逻辑查询优化阶段和物理查询优化阶段。</p><p>逻辑查询优化就是通过改变SQL语句的内容来使得SQL查询更高效，同时为物理查询优化提供更多的候选执行计划。通常采用的方式是对SQL语句进行等价变换，对查询进行重写，而查询重写的数学基础就是关系代数。对条件表达式进行等价谓词重写、条件简化，对视图进行重写，对子查询进行优化，对连接语义进行了外连接消除、嵌套连接消除等。</p><p>逻辑查询优化是基于关系代数进行的查询重写，而关系代数的每一步都对应着物理计算，这些物理计算往往存在多种算法，因此需要计算各种物理路径的代价，从中选择代价最小的作为执行计划。在这个阶段里，对于单表和多表连接的操作，需要高效地使用索引，提升查询效率。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/fa/650cd690c532161de1b0e856d4b067fa.png?wh=606*310\" alt=\"\"><br>\n在这两个阶段中，查询重写属于代数级、语法级的优化，也就是属于逻辑范围内的优化，而基于代价的估算模型是从连接路径中选择代价最小的路径，属于物理层面的优化。</p><h2>查询优化器的两种优化方式</h2><p>查询优化器的目的就是生成最佳的执行计划，而生成最佳执行计划的策略通常有以下两种方式。</p><p>第一种是基于规则的优化器（RBO，Rule-Based Optimizer），规则就是人们以往的经验，或者是采用已经被证明是有效的方式。通过在优化器里面嵌入规则，来判断SQL查询符合哪种规则，就按照相应的规则来制定执行计划，同时采用启发式规则去掉明显不好的存取路径。</p><p>第二种是基于代价的优化器（CBO，Cost-Based Optimizer），这里会根据代价评估模型，计算每条可能的执行计划的代价，也就是COST，从中选择代价最小的作为执行计划。相比于RBO来说，CBO对数据更敏感，因为它会利用数据表中的统计信息来做判断，针对不同的数据表，查询得到的执行计划可能是不同的，因此制定出来的执行计划也更符合数据表的实际情况。</p><p>但我们需要记住，SQL是面向集合的语言，并没有指定执行的方式，因此在优化器中会存在各种组合的可能。我们需要通过优化器来制定数据表的扫描方式、连接方式以及连接顺序，从而得到最佳的SQL执行计划。</p><p>你能看出来，RBO的方式更像是一个出租车老司机，凭借自己的经验来选择从A到B的路径。而CBO更像是手机导航，通过数据驱动，来选择最佳的执行路径。</p><h2>CBO是如何统计代价的</h2><p>大部分RDBMS都支持基于代价的优化器（CBO），CBO随着版本的迭代也越来越成熟，但是CBO依然存在缺陷。通过对CBO工作原理的了解，我们可以知道CBO可能存在的不足有哪些，有助于让我们知道优化器是如何确定执行计划的。</p><h3>能调整的代价模型的参数有哪些</h3><p>首先，我们先来了解下MySQL中的<code>COST Model</code>，<code>COST Model</code>就是优化器用来统计各种步骤的代价模型，在5.7.10版本之后，MySQL会引入两张数据表，里面规定了各种步骤预估的代价（Cost Value） ，我们可以从<code>mysql.server_cost</code>和<code>mysql.engine_cost</code>这两张表中获得这些步骤的代价：</p><pre><code>SQL &gt; SELECT * FROM mysql.server_cost\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/d5/e7/d571ea13f753ed24eedf6f20183e2ae7.png?wh=1728*468\" alt=\"\"><br>\nserver_cost数据表是在server层统计的代价，具体的参数含义如下：</p><ol>\n<li><code>disk_temptable_create_cost</code>，表示临时表文件（MyISAM或InnoDB）的创建代价，默认值为20。</li>\n<li><code>disk_temptable_row_cost</code>，表示临时表文件（MyISAM或InnoDB）的行代价，默认值0.5。</li>\n<li><code>key_compare_cost</code>，表示键比较的代价。键比较的次数越多，这项的代价就越大，这是一个重要的指标，默认值0.05。</li>\n<li><code>memory_temptable_create_cost</code>，表示内存中临时表的创建代价，默认值1。</li>\n<li><code>memory_temptable_row_cost</code>，表示内存中临时表的行代价，默认值0.1。</li>\n<li><code>row_evaluate_cost</code>，统计符合条件的行代价，如果符合条件的行数越多，那么这一项的代价就越大，因此这是个重要的指标，默认值0.1。</li>\n</ol><p>由这张表中可以看到，如果想要创建临时表，尤其是在磁盘中创建相应的文件，代价还是很高的。</p><p>然后我们看下在存储引擎层都包括了哪些代价：</p><pre><code>SQL &gt; SELECT * FROM mysql.engine_cost\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/96/72/969377b6a1348175ce211f137e2cf572.png?wh=1728*264\" alt=\"\"><br>\n<code>engine_cost</code>主要统计了页加载的代价，我们之前了解到，一个页的加载根据页所在位置的不同，读取的位置也不同，可以从磁盘I/O中获取，也可以从内存中读取。因此在<code>engine_cost</code>数据表中对这两个读取的代价进行了定义：</p><ol>\n<li><code>io_block_read_cost</code>，从磁盘中读取一页数据的代价，默认是1。</li>\n<li><code>memory_block_read_cost</code>，从内存中读取一页数据的代价，默认是0.25。</li>\n</ol><p>既然MySQL将这些代价参数以数据表的形式呈现给了我们，我们就可以根据实际情况去修改这些参数。因为随着硬件的提升，各种硬件的性能对比也可能发生变化，比如针对普通硬盘的情况，可以考虑适当增加<code>io_block_read_cost</code>的数值，这样就代表从磁盘上读取一页数据的成本变高了。当我们执行全表扫描的时候，相比于范围查询，成本也会增加很多。</p><p>比如我想将<code>io_block_read_cost</code>参数设置为2.0，那么使用下面这条命令就可以：</p><pre><code>UPDATE mysql.engine_cost\n  SET cost_value = 2.0\n  WHERE cost_name = 'io_block_read_cost';\nFLUSH OPTIMIZER_COSTS;\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/d5/96/d5e43099f925fc5d271055d69c0d6996.png?wh=1728*253\" alt=\"\"><br>\n我们对<code>mysql.engine_cost</code>中的<code>io_block_read_cost</code>参数进行了修改，然后使用<code>FLUSH OPTIMIZER_COSTS</code>更新内存，然后再查看<code>engine_cost</code>数据表，发现<code>io_block_read_cost</code>参数中的<code>cost_value</code>已经调整为2.0。</p><p>如果我们想要专门针对某个存储引擎，比如InnoDB存储引擎设置<code>io_block_read_cost</code>，比如设置为2，可以这样使用：</p><pre><code>INSERT INTO mysql.engine_cost(engine_name, device_type, cost_name, cost_value, last_update, comment)\n  VALUES ('InnoDB', 0, 'io_block_read_cost', 2,\n  CURRENT_TIMESTAMP, 'Using a slower disk for InnoDB');\nFLUSH OPTIMIZER_COSTS;\n</code></pre><p>然后我们再查看一下<code>mysql.engine_cost</code>数据表：</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/75/4def533e214f9a99f39d6ad62cc2b775.png?wh=1728*247\" alt=\"\"><br>\n从图中你能看到针对InnoDB存储引擎可以设置专门的<code>io_block_read_cost</code>参数值。</p><h3>代价模型如何计算</h3><p>总代价的计算是一个比较复杂的过程，上面只是列出了一些常用的重要参数，我们可以根据情况对它们进行调整，也可以使用默认的系统参数值。</p><p>那么总的代价是如何进行计算的呢？</p><p>在论文<a href=\"http://dbis.rwth-aachen.de/lehrstuhl/staff/li/resources/download/AccessPathSelectionInRelationalDatabase.pdf%EF%BC%89\">《Access Path Selection-in a Relational Database Management System》</a>中给出了计算模型，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/38/b0/387aaaeb22f50168402018d8891ca5b0.png?wh=598*181\" alt=\"\"><br>\n你可以简单地认为，总的执行代价等于I/O代价+CPU代价。在这里PAGE FETCH就是I/O代价，也就是页面加载的代价，包括数据页和索引页加载的代价。W*(RSI CALLS)就是CPU代价。W在这里是个权重因子，表示了CPU到I/O之间转化的相关系数，RSI CALLS代表了CPU的代价估算，包括了键比较（compare key）以及行估算（row evaluating）的代价。</p><p>为了让你更好地理解，我说下关于W和RSI CALLS的英文解释：W is an adjustable weight between I/O and CPU utilization. The number of RSI calls is used to approximate CPU utilization。</p><p>这样你应该能明白为了让CPU代价和I/O代价放到一起来统计，我们使用了转化的系数W，</p><p>另外需要说明的是，在MySQL5.7版本之后，代价模型又进行了完善，不仅考虑到了I/O和CPU开销，还对内存计算和远程操作的代价进行了统计，也就是说总代价的计算公式演变成下面这样：</p><p>总代价 = I/O代价 + CPU代价 + 内存代价 + 远程代价</p><p>这里对内存代价和远程代价不进行讲解，我们只需要关注I/O代价和CPU代价即可。</p><h2>总结</h2><p>我今天讲解了查询优化器，它在RDBMS中是个非常重要的角色。在优化器中会经历逻辑查询优化和物理查询优化阶段。</p><p>最后我们只是简单梳理了下CBO的总代价是如何计算的，以及包括了哪些部分。CBO的代价计算是个复杂的过程，细节很多，不同优化器的实现方式也不同。另外随着优化器的逐渐成熟，考虑的因素也会越来越多。在某些情况下MySQL还会把RBO和CBO组合起来一起使用。RBO是个简单固化的模型，在Oracle 8i之前采用的就是RBO，在优化器中一共包括了15种规则，输入的SQL会根据符合规则的情况得出相应的执行计划，在Oracle 10g版本之后就用CBO替代了RBO。</p><p>CBO中需要传入的参数除了SQL查询以外，还包括了优化器参数、数据表统计信息和系统配置等，这实际上也导致CBO出现了一些缺陷，比如统计信息不准确，参数配置过高或过低，都会导致路径选择的偏差。除此以外，查询优化器还需要在优化时间和执行计划质量之间进行平衡，比如一个执行计划的执行时间是10秒钟，就没有必要花1分钟优化执行计划，除非该SQL使用频繁高，后续可以重复使用该执行计划。同样CBO也会做一些搜索空间的剪枝，以便在有效的时间内找到一个“最优”的执行计划。这里，其实也是在告诉我们，为了得到一个事物，付出的成本过大，即使最终得到了，有时候也是得不偿失的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/36/1be7b4fcd9ebdbfcc4f203a6c5e4a836.jpg?wh=3341*2298\" alt=\"\"><br>\n最后留两道思考题吧，RBO和CBO各自的特点是怎样的呢？为什么CBO也存在不足？你能用自己的话描述一下其中的原因吗？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起来学习进步。</p>","neighbors":{"left":{"article_title":"31丨为什么大部分RDBMS都会支持MVCC？","id":120351},"right":{"article_title":"33丨如何使用性能分析工具定位SQL执行慢的原因？","id":126169}},"comments":[{"had_liked":false,"id":127452,"user_name":"DZ","can_delete":false,"product_type":"c1","uid":1132240,"ip_address":"","ucode":"452555FA0F9E0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","comment_is_top":false,"comment_ctime":1566720065,"is_pvip":false,"replies":[{"id":"47294","content":"对的，充分理解CBO，对实际工作很有帮助。","user_name":"作者回复","comment_id":127452,"uid":"1306094","ip_address":"","utype":1,"ctime":1566784640,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"181955346497","product_id":100029501,"comment_content":"1. RBO 和 CBO 各自的特点是怎样的呢？<br><br>RBO和CBO都基于规则，RBO使用静态规则，CBO使用动态规则。<br><br>RBO的输出可以预期，稳定的输入得到稳定的输出。<br><br>CBO的输出并不稳定，由很多不断改变的参数共同调节。<br><br>2. 为什么 CBO 也存在不足？<br><br>Cost Based有双关含义，一是它基于物理成本来考量执行计划，二是它自身就会消耗很大成本。<br><br>CBO由很多参数共同决定，系统需要不断地调节它们，尽量保持其准确性。<br><br>如果某些参数未能及时调整，不能如实表达其所代表的物理特性，会使得CBO发生误判。<br><br>为了减少误判，必须消耗一定的系统资源，用于频繁地收集和计算各项参数。<br><br>CBO的优势也恰恰就是它的不足，充分理解CBO，对实际工作很有帮助。","like_count":43,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464499,"discussion_content":"对的，充分理解CBO，对实际工作很有帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566784640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126996,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566531717,"is_pvip":false,"replies":[{"id":"47085","content":"对的，一个基于规则，一个基于数据。数据虽好，但也存在数据准确度，计算代价的限制","user_name":"作者回复","comment_id":126996,"uid":"1306094","ip_address":"","utype":1,"ctime":1566623897,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"57401106565","product_id":100029501,"comment_content":"RBO 和 CBO 各自的特点是怎样的呢？<br>RBO基于规则，每条sql经过RBO优化出来的结果都是固定的。<br>CBO基于代价，根据统计信息，配置参数，优化器参数，sql经过优化出来的结果不是固定的，有点类似利用统计学得到最佳的优化结果。<br><br>为什么 CBO 也存在不足？<br>CBO比较复杂，任何一个参数没有调好，可能优化结果都不理想，还有就是统计信息的准确度，如果要很高的准确度，那么修护这个高准确度带到的代价也是很大的。","like_count":14,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464275,"discussion_content":"对的，一个基于规则，一个基于数据。数据虽好，但也存在数据准确度，计算代价的限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566623897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164557,"user_name":"爬行的蜗牛","can_delete":false,"product_type":"c1","uid":1033956,"ip_address":"","ucode":"6623B62DE63CE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","comment_is_top":false,"comment_ctime":1577026736,"is_pvip":false,"replies":[{"id":"62571","content":"总结的很好","user_name":"作者回复","comment_id":164557,"uid":"1306094","ip_address":"","utype":1,"ctime":1577068355,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"31641797808","product_id":100029501,"comment_content":"RBO 基于现有规则，静态的；  <br>CBO 是基于动态的规则， 可以调整； <br>CBO 由于是动态的， 当物理资源的配置发生变化， 比如磁盘从sata 盘更换成固态硬盘， 那么响应的参数需要调整， 调整到多少合理就要在实践中摸索。","like_count":8,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478813,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577068355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148561,"user_name":"书痕","can_delete":false,"product_type":"c1","uid":1394726,"ip_address":"","ucode":"8367371EF89D61","user_header":"https://static001.geekbang.org/account/avatar/00/15/48/26/93fd21d5.jpg","comment_is_top":false,"comment_ctime":1573031441,"is_pvip":false,"replies":[{"id":"59818","content":"对 这样比喻不错","user_name":"作者回复","comment_id":148561,"uid":"1306094","ip_address":"","utype":1,"ctime":1574757255,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"23047867921","product_id":100029501,"comment_content":"1. RBO 和 CBO分别对应经验驱动和数据驱动，也可类比于于工厂化生产与手动定制。前者快但比较粗糙，后者精准但需要复杂计算。<br>2. CBO因为要对大量参数进行计算，因此难免出现偏差，且数据量少的情况下，优化的成本过高（优化还不如不优化）。","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473536,"discussion_content":"对 这样比喻不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574757255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126935,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1566522678,"is_pvip":false,"replies":[{"id":"47100","content":"IO代价和CPU代价在总代价中占比高，因为我们通常会做大量的IO操作，以及内存中的查找比较。Memory代价指的是内存拷贝代价。另外Memory和Remote代价系统会自动帮计算，而IO和CPU代价（内存中的查找代价）是我们进行成本估算中更关注的","user_name":"作者回复","comment_id":126935,"uid":"1306094","ip_address":"","utype":1,"ctime":1566636125,"user_name_real":"cy"}],"discussion_count":1,"race_medal":1,"score":"23041359158","product_id":100029501,"comment_content":"这里对内存代价和远程代价不进行讲解，我们只需要关注 I&#47;O 代价和 CPU 代价即可。<br>——不讲解，是因为很复杂吗？","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464253,"discussion_content":"IO代价和CPU代价在总代价中占比高，因为我们通常会做大量的IO操作，以及内存中的查找比较。Memory代价指的是内存拷贝代价。另外Memory和Remote代价系统会自动帮计算，而IO和CPU代价（内存中的查找代价）是我们进行成本估算中更关注的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566636125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132638,"user_name":"小白鼠丶","can_delete":false,"product_type":"c1","uid":1573288,"ip_address":"","ucode":"76EFABC5DF8AEB","user_header":"https://static001.geekbang.org/account/avatar/00/18/01/a8/2662a8d1.jpg","comment_is_top":false,"comment_ctime":1568182107,"is_pvip":false,"replies":[{"id":"63500","content":"IO高，可以考虑：数据没有缓存，读写频繁，写日志是否过多，磁盘是否已满，数据库连接数是否超限制等","user_name":"作者回复","comment_id":132638,"uid":"1306094","ip_address":"","utype":1,"ctime":1577514931,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"18748051291","product_id":100029501,"comment_content":"我想问下在什么情况下IO会很高","like_count":5,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467048,"discussion_content":"IO高，可以考虑：数据没有缓存，读写频繁，写日志是否过多，磁盘是否已满，数据库连接数是否超限制等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577514931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155460,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1574690861,"is_pvip":true,"replies":[{"id":"59712","content":"对的 任何事情都要balance，尤其是在工程领域，更需要","user_name":"作者回复","comment_id":155460,"uid":"1306094","ip_address":"","utype":1,"ctime":1574737099,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"10164625453","product_id":100029501,"comment_content":"每一种解决问题的方式都有其代价，要考虑成本和收益问题","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475760,"discussion_content":"对的 任何事情都要balance，尤其是在工程领域，更需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574737099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127459,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1566722881,"is_pvip":false,"replies":[{"id":"63514","content":"8.0逐渐火起来了，尤其是提供了MGR组复制技术","user_name":"作者回复","comment_id":127459,"uid":"1306094","ip_address":"","utype":1,"ctime":1577516141,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"10156657473","product_id":100029501,"comment_content":"      其实不同数据库这块其实都是不一样的：尤其是在查询优化器中各自都加了自己的特性在里面，虽然我们很多时候发现执行语句类似；可是还是不同的。<br>      sql server和mysql早期接近一点，可是后面随着oracle对其兼并之后会明显的发现完全就变成属于oracle的小弟的感觉。这种关系就像微软有sql server和Access，甲骨文有oracle和mysql；当然非商业版的MariaDB还是比较保持了原生态的东西。5.7没有看。<br>      mysql不像老师说的那样吧，尤其是5.7之前多种表引擎，不同引擎有不同的特性其实还是有些不同的;只使用一种表引擎是5.7才开始的；目前市面主流依然停留在5.6吧，国内各大云厂商自推的基于MYSQL的都是基于5.6.<br>","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464503,"discussion_content":"8.0逐渐火起来了，尤其是提供了MGR组复制技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577516141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200258,"user_name":"qijj","can_delete":false,"product_type":"c1","uid":1231369,"ip_address":"","ucode":"AAE7BAD5DABEE2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLn1y9RSL9JcACGRVkkhkEmjH7z1eiag763CVKwn3Mzb3djbibwbx0fgZqyBpPozGLOicnllSfydEng/132","comment_is_top":false,"comment_ctime":1585564688,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5880531984","product_id":100029501,"comment_content":"老师，请教下，在oracle 11中 left join 语句和直接写where语句效率哪个高？如 1、select a.a1 from a left join b on a.a1=b.b1 where b.b2=?  2. select a.a1 from a,b where a.a1=b.b1 and b.b2=?  这两条语句哪个效率高，实际工作中明明可以采用2中直连的方式，却 总是有人用1中left join 的方式，这是因为1的效率比2高吗？","like_count":2,"discussions":[{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279732,"discussion_content":"前面讲过了，92和99的区别，个人习惯吧，尽量遵循99，使用join","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591407082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136815,"user_name":"Yuhui","can_delete":false,"product_type":"c1","uid":1110470,"ip_address":"","ucode":"811933B016179F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/c6/6f39a982.jpg","comment_is_top":false,"comment_ctime":1569516164,"is_pvip":false,"replies":[{"id":"53355","content":"这些操作符按一定的运算关系组成查询计划（查询的执行方案），比如两个数据表A和B进行连接，在优化器内部会存在嵌套循环连接，归并连接，Hash连接 三种物理连接方式。同样A，B，C三张表进行联查，也存在连接顺序的问题。所以具体的查询计划，是由物理操作符组成的树形结构","user_name":"作者回复","comment_id":136815,"uid":"1306094","ip_address":"","utype":1,"ctime":1570426544,"user_name_real":"cy"}],"discussion_count":1,"race_medal":0,"score":"5864483460","product_id":100029501,"comment_content":"请教一下老师：“执行计划就是查询树，它由一系列物理操作符组成”这句话怎么理解？谢谢！","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468807,"discussion_content":"这些操作符按一定的运算关系组成查询计划（查询的执行方案），比如两个数据表A和B进行连接，在优化器内部会存在嵌套循环连接，归并连接，Hash连接 三种物理连接方式。同样A，B，C三张表进行联查，也存在连接顺序的问题。所以具体的查询计划，是由物理操作符组成的树形结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570426544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127260,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1566626214,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5861593510","product_id":100029501,"comment_content":"去查看 server_cost 的表中的记录，为什么看不到每个操作的 cost 的默认值呢？ 没有 default_value 那一列<br><br>mysql 的版本：5.17。18","like_count":1},{"had_liked":false,"id":310689,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/1c4af368.jpg","comment_is_top":false,"comment_ctime":1630841548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630841548","product_id":100029501,"comment_content":"简单总结<br>1.一种基于以往的经验来判断，但是这个经验是什么样的呢？应该也是一种高度抽象的东西吧<br>2.基于各种数据来计算出方案，我应该不会升入研究，看到那些公式就头疼0_0<br>3.可以改变一些优化器的代价参数，来达到优化查询的效果，但我也是看了这个专栏才知道这个方法，有点小众","like_count":0},{"had_liked":false,"id":248798,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1600313225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600313225","product_id":100029501,"comment_content":"RBO 和 CBO的关系，有点类似汇总某个数据， 一个使用已有快照，一个是实时获取数据。<br><br>","like_count":0},{"had_liked":false,"id":239667,"user_name":"Black","can_delete":false,"product_type":"c1","uid":1620774,"ip_address":"","ucode":"170977A014997C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iarwibic7h11K05YSJ9G6JERWqudL1ATGm0bib5pSCsP97rpSwuxLoDvp40RMsywibVH2g5DLphQGM51denSxx6hLZg/132","comment_is_top":false,"comment_ctime":1596611014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596611014","product_id":100029501,"comment_content":"RBO的特点是基于经验，使用以往性能比较好的查询计划，不保证能找到最优解。<br>CBO的特点是基于计算，计算比较每个查询计划的代价，但是计算结果不一定准确，运算CBO本身也会带来性能开销。","like_count":0},{"had_liked":false,"id":195344,"user_name":"汪zZ","can_delete":false,"product_type":"c1","uid":1234757,"ip_address":"","ucode":"8B93062A683902","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/45/d1621188.jpg","comment_is_top":false,"comment_ctime":1585182294,"is_pvip":true,"replies":[{"id":"82652","content":"加油~","user_name":"作者回复","comment_id":195344,"uid":"1306094","ip_address":"","utype":1,"ctime":1591443511,"user_name_real":"cy"}],"discussion_count":1,"race_medal":1,"score":"1585182294","product_id":100029501,"comment_content":"概念性东西太多了。。不过赞一个，适合我这种小白","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489037,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591443511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188713,"user_name":"柚子","can_delete":false,"product_type":"c1","uid":1574171,"ip_address":"","ucode":"27E34113E1977B","user_header":"https://static001.geekbang.org/account/avatar/00/18/05/1b/43518d02.jpg","comment_is_top":false,"comment_ctime":1584407126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584407126","product_id":100029501,"comment_content":"RBO基于静态规则，CBO基于动态规则，基于静态规则的话没有考虑到实际表中的数据，基于动态规则是和需要优化的表中的实际数据量有关？还是说基于动态规则只是和具体的一些参数配置相关和表数据无关呢？","like_count":0},{"had_liked":false,"id":129817,"user_name":"空知","can_delete":false,"product_type":"c1","uid":1013283,"ip_address":"","ucode":"C448E98238DD36","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","comment_is_top":false,"comment_ctime":1567267474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567267474","product_id":100029501,"comment_content":"CBO 做搜索空间的剪枝 是不考虑全部可能的意思吗？","like_count":0},{"had_liked":false,"id":126975,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1566529160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566529160","product_id":100029501,"comment_content":"CBO会根据代价评估模型，计算每条可能的执行计划的代价，对于复杂的数据情况，评估模型时会导致开销过大。","like_count":0},{"had_liked":false,"id":126945,"user_name":"Cue","can_delete":false,"product_type":"c1","uid":1516991,"ip_address":"","ucode":"A5CB460B54FDB0","user_header":"https://static001.geekbang.org/account/avatar/00/17/25/bf/1e9c853f.jpg","comment_is_top":false,"comment_ctime":1566524006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566524006","product_id":100029501,"comment_content":"老师，专栏会有mysql触发器的部分吗","like_count":0}]}