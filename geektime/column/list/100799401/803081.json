{"id":803081,"title":"04｜MySQL中不同类型的参数与参数配置","content":"<p>你好，我是俊达。</p><p>在第一讲中，我们使用了一个极简的配置文件，只包含了最基本的一些参数，使MySQL能正常运行起来，便于我们进行测试、熟悉MySQL。但是供正式环境使用的MySQL就不能仅仅依赖这个基础的配置了，我们需要根据部署MySQL的主机配置、使用MySQL的业务场景等因素，设置合理的参数，使MySQL能以比较高的性能运行，并满足业务对数据一致性的要求。</p><p>这一讲中，我们会介绍MySQL参数配置的基本机制。然后再介绍一些比较重要的参数，讲解这些参数的作用是什么，如何合理地设置这些参数。你可以根据这里提供的基本方法，为自己的MySQL设置一个相对合理的配置。</p><h2>MySQL参数设置机制</h2><p>MySQL 8.0总共有六百多个配置参数。有时候我们也将这些参数称为变量，因为官方文档中的术语是Variables。同时在MySQL中，我们使用命令show variables查看参数的当前值。因此在这一系列的课程中，“参数”和“变量”很多时候指的都是同一个概念。</p><h3>设置参数</h3><p>有几个方法都可以用来设置参数。首先mysqld进程启动时，可以指定一系列的命令行参数。下面是一个比较典型的例子。</p><pre><code class=\"language-go\">$ ps -elf | grep mysqld\n... /usr/local/mysql/bin/mysqld \\\n    --defaults-file=/data/mysql01/my.cnf \\\n    --basedir=/usr/local/mysql \\\n    --datadir=/data/mysql01/data \\\n    --plugin-dir=/usr/local/mysql/lib/plugin \\\n    --user=mysql \\\n    --log-error=/data/mysql01/log/alert.log \\\n    --open-files-limit=1024 \\\n    --pid-file=/data/mysql01/run/mysqld.pid \\\n    --socket=/data/mysql01/run/mysql.sock\n</code></pre><!-- [[[read_end]]] --><p>当然更多的情况下，我们会把参数写到配置文件中。MySQL默认会从一些固定位置读取配置。执行mysqld --verbose --help命令可以观察到mysqld读取默认参数文件的路径。</p><pre><code class=\"language-go\">/opt/mysql# ./bin/mysqld --verbose --help | head -30\n......\n\nDefault options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf\nThe following groups are read: mysql_cluster mysqld server mysqld-8.0\n</code></pre><p>上面的例子中，mysqld默认会从 <code>/etc/my.cnf</code>、<code>/etc/mysql/my.cnf</code>、<code>/usr/local/mysql/etc/my.cnf ~/.my.cnf</code> 多个文件依次读取配置。如果某个参数在多个文件都有配置，那么就以最后读取到的那个参数值为准。当然，为了避免引起混乱，我建议一个MySQL实例只使用一个配置文件。在启动MySQL时，可以使用命令行参数defaults-file指定配置文件，指定这个参数后，MySQL只会从这个文件中读取配置项。需要注意，defaults-file在所有命令行参数中必须排在最前面才有效。</p><pre><code class=\"language-go\">mysqld --defaults-file=/data/mysql3306/my.cnf --datadir=......\n</code></pre><p>MySQL的参数中，有的是只读的，你不能修改这些参数。比如参数lower_case_file_system反映了数据目录所在的文件系统是否区分文件名大小写，它是由底层操作系统的特性决定的，无法通过参数来修改。一般Linux和macOS文件名区分大小写，Windows不区分文件名大小写。</p><p>有一些参数不能动态修改，你只能将参数加到命令行，或者将参数写到配置文件中。MySQL只有在启动时才会读取这些参数。比如参数port指定了数据库的监听端口，要修改这个参数，只能重启数据库。</p><p>还有很多参数可以动态修改，你可以通过SET命令修改这些参数。</p><pre><code class=\"language-go\">mysql&gt; set global slow_query_log=ON;\nQuery OK, 0 rows affected (0.01 sec)\n</code></pre><p>通过SET命令设置的参数，只对当前运行中的实例生效，实例重启后，这些设置就失效了。MySQL 8.0开始支持参数修改持久化，通过SET PERSIST命令来设置。</p><pre><code class=\"language-go\">mysql&gt; set persist slow_query_log=ON;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><p>set persist命令不仅修改了参数的当前值，还会将参数的设置保存在数据目录（datadir）下的mysqld-auto.cnf文件中。MySQL重启时，会加载mysqld-auto.cnf文件中保存的参数。当然，你也可以通过reset persist命令将参数从mysqld-auto.cnf中移除。reset persist不会修改变量的当前值。</p><pre><code class=\"language-go\">mysql&gt; reset persist slow_query_log;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><p>按参数的作用范围来看，MySQL的参数分为全局参数和会话参数。全局参数对整个实例生效，需要用SET GLOBAL命令设置，使用SET命令会报错。</p><pre><code class=\"language-go\">mysql&gt; set innodb_flush_log_at_timeout=1;\nERROR 1229 (HY000): Variable 'innodb_flush_log_at_timeout' is a GLOBAL variable and should be set with SET GLOBAL\n\nmysql&gt; set global innodb_flush_log_at_timeout=1;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><p>会话参数只对某一个会话生效，使用SET命令设置，不能加GLOBAL关键字。</p><pre><code class=\"language-go\">mysql&gt; set global timestamp=0;\nERROR 1228 (HY000): Variable 'timestamp' is a SESSION variable and can't be used with SET GLOBAL\n\nmysql&gt; set timestamp=0;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre><p>MySQL中很多会话参数同时拥有同名的全局参数。使用SET GLOBAL命令时，设置的是全局变量的值，不影响现有会话的Session值，包括执行SET GLOBAL命令的那个会话。会话真正使用的是Session变量的值，会话创建时，会话变量会默认设置成全局变量的值，也可以使用SET命令修改会话变量。</p><pre><code class=\"language-go\">## 查看参数当前值\nmysql&gt; show variables like 'long_query_time';\n+-----------------+----------+\n| Variable_name   | Value    |\n+-----------------+----------+\n| long_query_time | 0.100000 |\n+-----------------+----------+\n1 row in set (0.00 sec)\n\n## 设置全局值\nmysql&gt; set global long_query_time=10;\nQuery OK, 0 rows affected (0.00 sec)\n\n## 当前值没有变化\nmysql&gt; show variables like 'long_query_time';\n+-----------------+----------+\n| Variable_name   | Value    |\n+-----------------+----------+\n| long_query_time | 0.100000 |\n+-----------------+----------+\n1 row in set (0.00 sec)\n\n## 全局值被修改了\nmysql&gt; show global variables like 'long_query_time';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| long_query_time | 10.000000 |\n+-----------------+-----------+\n1 row in set (0.00 sec)\n</code></pre><p>percona的MySQL分支对参数long_query_time做了特殊处理，修改全局值时，也会修改当前已经存在的那些会话的参数值，这样更符合我们在这个场景下的需求。<br>\n如果想了解某个参数的具体含义，我的建议是查阅官方文档。</p><ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html\">Server参数</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html\">InnoDB参数</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication-options-replica.html\">主备复制相关参数</a></li>\n</ul><h3>查看参数</h3><p>一般我们使用show variables和show global variables命令查看参数的当前值。show global variables显示全局参数的配置值，show variables命令显示当前会话的所有参数值。</p><pre><code class=\"language-go\">mysql&gt; show variables like 'wait%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| wait_timeout  | 28800 |\n+---------------+-------+\n1 row in set (0.01 sec)\n\nmysql&gt; show global variables  like 'wait%';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| wait_timeout  | 86400 |\n+---------------+-------+\n1 row in set (0.01 sec)\n</code></pre><p>在以前的MySQL版本中，如果想查看别的会话的某个参数值，没有很简便的方法。8.0中，可以到performance_schema.variables_by_thread表查看其他会话的变量值。</p><pre><code class=\"language-go\">mysql&gt;  select * from performance_schema.variables_by_thread \n    where variable_name = 'wait_timeout';\n+-----------+---------------+----------------+\n| THREAD_ID | VARIABLE_NAME | VARIABLE_VALUE |\n+-----------+---------------+----------------+\n|        64 | wait_timeout  | 28800          |\n|        65 | wait_timeout  | 3600           |\n+-----------+---------------+----------------+\n</code></pre><p>这个表的THREAD_ID是线程ID，不是SHOW PROCESSLIST命令输出中的ID。PROCESSLIT_ID和THREAD_ID的关系可以到performance_schema.threads表查找。</p><h3>参数文件的格式</h3><p>MySQL参数文件一般命名为my.cnf，当然你也可以使用不同的文件名，但需要在启动MySQL时，通过defaults-file参数指定配置文件的路径。参数文件分为多个组，组名用中括号[]括起来。一般将MySQL服务端的参数放到[mysqld]中。参数设置的一般格式为variable_name=variable_value，但是也有的参数值需要提供参数名，不需要提供参数值，如skip_name_resolve。</p><pre><code class=\"language-go\">[mysqld_safe]\npid-file=/data/mysql01/run/mysqld.pid\n\n\n[mysqld]\n\nbasedir=/opt/mysql\nlc_messages_dir=/opt/mysql/share\ndatadir=/data/mysql01/data\ntmpdir=/data/mysql01/tmp\nlog-error=/data/mysql01/log/alert.log\nslow_query_log_file=/data/mysql01/log/slow.log\ngeneral_log_file=/data/mysql01/log/general.log\n\nsocket=/data/mysql01/run/mysql.sock\nskip_name_resolve\n\n...\n</code></pre><h2>设置合理的参数</h2><h3>设置文件路径</h3><p>MySQL有一系列与文件路径相关的参数，用来指定程序文件的路径和其他文件的存放路径。basedir指定MySQL程序的安装路径，如果MySQL程序没有安装在默认的路径，需要指定basedir。</p><p>datadir指定数据文件的存放路径，默认路径是在构建MySQL二进制时确定的。我建议在配置文件中显式指定datadir。如果因为各种原因需要将数据目录移动到其他路径下，要同步修改datadir参数，否则数据库会无法启动。datadir同时也决定了其他很多文件的存放路径，如innodb系统表空间、innodb REDO日志、binlog、relaylog默认都存放在datadir下。当然，我们可以通过一些参数修改这些文件的存放路径。下面这个表格总结了平时比较常用的文件路径相关的参数。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/28/6acb451c80c32a8cd25bbc6cbd57be28.jpg?wh=1920x1052\" alt=\"图片\"></p><h3>设置日志文件</h3><p>MySQL的日志文件包括错误日志、慢SQL日志、General Log。建议开启慢SQL日志，这对SQL优化有比较重要的作用。general log一般不开启，只有在一些排查问题的场景下短暂开启。</p><pre><code class=\"language-go\">-- error\nlog_error=/data/mysql01/log/error.log\nslow_query_log_file=/data/mysql01/log/slow.log\ngeneral_log_file=/data/mysql01/log/general.log\n\n-- slow log，建议开启慢SQL日志\nslow_query_log=ON\nlong_query_time=1 ## (单位秒，可以精确到1微秒)\nlog_queries_not_using_indexes=1\nlog_slow_admin_statements=1\n</code></pre><h3>设置资源限制参数</h3><h4>open_files_limit</h4><p>参数open_files_limit限制了MySQL进程允许同时打开的文件句柄数。如果MySQL进程打开的文件句柄数达到open_files_limit，将无法打开新的文件，就会导致数据库访问异常。以下这些操作都需要占用文件句柄：</p><ul>\n<li>访问innodb数据文件</li>\n<li>访问临时文件</li>\n<li>建立TCP连接</li>\n<li>访问其他文件（如日志文件）</li>\n</ul><p>open_files_limit最终的取值受几个因素影响。</p><ol>\n<li>open_files_limit受参数max_connections和table_open_cache的影响。MySQL会将open_files_limit调整为以下几项的最大值：</li>\n</ol><ul>\n<li>open_files_limit参数的设置值</li>\n<li>max_connections + 2 * table_open_cache + 10</li>\n<li>max_connections * 5</li>\n</ul><ol start=\"2\">\n<li>open_files_limit受操作系统open files限制。</li>\n</ol><p>启动mysqld进程时，如果父进程在操作系统中有open files（ulimit -n）限制，那么open_files_limit不能超过父进程的open files限制。 下面这个例子中，我们先在操作系统中su到MySQL，ulimit -n设置为1024，然后再启动MySQL数据库。</p><pre><code class=\"language-go\"># su - mysql\n$ ulimit -n 1024\n$ ulimit -n\n1024\n\n$ /usr/local/mysql/bin/mysqld_safe --defaults-file=/data/mysql01/my.cnf &amp;\n</code></pre><p>在MySQL的错误日志中，可以看到max_open_files被缩小为1024，而且参数max_connections和table_open_cache也被改小了。</p><pre><code class=\"language-go\">[Server] Could not increase number of max_open_files to more than 1024 (request: 30000)\n[Server] Changed limits: max_connections: 214 (requested 1000)\n[Server] Changed limits: table_open_cache: 400 (requested 1000)\n</code></pre><p>为了避免这个问题，需要在操作系统中提高用户的资源限制。</p><pre><code class=\"language-go\">### /etc/security/limits.conf\nmysql       -       nofile  1000000\nmysql       -       nproc   65535\n</code></pre><h4>max_connections</h4><p>max_connections限制了数据库的最大连接数。需要注意的是max_connections受参数max_open_files影响，它不能超过max_open_files - 810，因此在上面的例子中，虽然max_connection配置为1000，但最终生效的值为214（1024 - 810）。</p><p>MySQL的每个连接都会占用一定的资源，max_connections参数需要根据业务的实际连接需求以及服务器的可用资源来综合评估。</p><h4>table_open_cache</h4><p>table_open_cache控制数据库中允许同时打开的表的数量，这个参数的最终取值会受参数max_open_files和max_connections实际运行值的影响。table_open_cache上限为(max_open_files - max_connections - 10) / 2或400。在我们的例子中，虽然在参数文件中table_open_cache设置为1000，但实际运行时，该参数被调整为400。当数据库中表的数量比较大时，可以适当增加table_open_cache。</p><h4>innodb_open_files</h4><p>innodb_open_files控制允许同时打开的InnoDB文件的数量。该参数默认取table_open_cache的运行值。</p><h4>table_definition_cache</h4><p>MySQL将表结构定义也缓存在内存中，参数table_definition_cache设置了允许缓存的表结构定义的数量。如果InnoDB表的数量比较多，可以把这个参数也设置得大一些。</p><h3>设置会话级内存参数</h3><p>SQL执行的过程中，可能会需要分配一些临时的内存空间，会话级内存参数控制这些临时内存的大小。这些内存参数用来控制单个会话的内存，当多个会话同时执行时，无法限制这些内存的总大小。</p><h4>sort_buffer_size</h4><p>SQL执行时如果需要排序，会先在内存中排序，sort_buffer_size控制每个会话可用于排序的内存空间。8.0.12版本之前，如果SQL需要排序，会一次性分配sort_buffer_size指定的内存，即使需要排序的数据很少。8.0.12版本进行了优化，会根据实际需要的排序的数据按需分配排序内存，最多不超过sort_buffer_size。一般sort_buffer_size可以设置为256K-2M。</p><h4>join_buffer_size</h4><p>执行表连接的时候，如果被驱动表缺少索引，会使用BNL连接或Hash连接算法，优化器会根据参数join_buffer_size的设置，分配连接缓存，用来缓存驱动表的记录，以提高表连接操作的性能。注意一个SQL可能会使用多个Join Buffer。一般join_buffer_size设置为256K-2M。不建议把全局join_buffer_size设置得很大，如果有大查询需要使用更多的Join Buffer，可以在会话层面调整。</p><h4>read_rnd_buffer_size</h4><p>参数read_rnd_buffer_size用来控制MRR访问路径能使用的buffer的大小。关于MRR执行计划的更多信息，可以参考后续SQL优化的相关文章。</p><h4>tmp_table_size</h4><p>tmp_table_size控制内存临时表的最大空间，当内存临时表内的数据超过tmp_table_size后，会转换成磁盘临时表。如果有SQL需要排序大量数据，可以在会话级别调整这个参数。</p><h3>设置InnoDB存储引擎参数</h3><p>InnoDB存储引擎是MySQL实现事务ACID属性的关键所在，合理地设置InnoDB相关参数，是实现MySQL高性能和数据强一致的一个基本前提。InnoDB是一个复杂的系统，MySQL 8.0中InnoDB有一百多个参数，当然这里面很多参数使用默认值就可以了，这里对需要重点关注的部分参数做一个介绍。我们按InnoDB的内部结构来介绍这些参数。</p><p>下面这个图中，我们将InnoDB分为4个大的结构，分别是InnoDB Buffer Pool、InnoDB数据文件、Redo Log Buffer、Redo日志。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/8c/a274bc40b8fc151dcbe04fb6e7f7ea8c.jpg?wh=1723x1077\" alt=\"图片\"></p><h4>InnoDB Buffer Pool</h4><p>访问InnoDB存储引擎表时，需要将数据先缓存到Buffer Pool，缓存的单位是一个数据页。数据页的大小通过参数innodb_page_size指定，默认为16K，一般我们使用默认值就可以了。</p><p>Buffer Pool的大小通过参数innodb_buffer_pool_size指定，这可能是MySQL中最重要的一个参数。如果innodb_buffer_pool_size设置得太小，无法把大部分热点数据缓存到内存中，会影响数据库的读写性能。但如果innodb_buffer_pool_size设置得太大，又会导致服务器内存资源耗尽，可能会出现SWAP，或者触发OOM-Killer。我们需要根据服务器和MySQL使用的实际情况来设置innodb_buffer_pool_size。</p><p>这里提供一个内存评估的方法，供你参考：</p><ul>\n<li>为操作系统预留一定的内存（min_free_kbytes，OS内核运行需要的基础内存），比如5%。</li>\n<li>OS其他程序运行占用的内存，比如MySQL数据库备份程序和其他程序。</li>\n<li>文件系统Cache会占用一定的内存，比如InnoDB REDO日志、binlog文件。</li>\n<li>MySQL线程分配的内存，包括运行时分配的内存（join buffer, sort buffer, net buffer等）和thread_stack。</li>\n<li>如果大量使用MyISAM，需要分配key buffer。myisam数据文件还会使用文件系统cache。</li>\n<li>Inno DB buffer pool管理需要额外占用一部分内存，大致为innodb_buffer_pool_size * 5%。</li>\n</ul><p>除去上述各类内存，将剩余的内存分配给Buffer Pool。假设我们的服务器总共有100G内存，系统内存按下面这个表格来评估。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/9b/68fee2a6efc97dfcfc6dcae45049719b.png?wh=1920x1094\" alt=\"图片\"></p><p>那么，留给InnoDB Buffer Pool的内存为79G，考虑到InnoDB Buffer Pool的管理开销，innodb_buffer_pool_size可设置为75G。当然在真实的业务场景下，MySQL连接线程会动态分配、释放内存，需要根据真实的运行情况，适当地调整内存设置。</p><p>InnoDB Buffer Pool分为多个内存块（Chunk），每个内存块的大小由参数innodb_buffer_pool_chunk_size指定，默认为128M。对于大内存的机器，可以适当增加innodb_buffer_pool_chunk_size，一个经验值是保持总的Chunk数不超过1000，比如Buffer Pool为1T，可以把innodb_buffer_pool_chunk_size设置为1G。</p><p>InnoDB Buffer Pool中存在大量链表结构，并发访问这些链表结构时，需要通过一些互斥锁、读写锁来保证这些数据结构的一致性。当数据库的并发很高的时候，在这些锁结构上会产生严重的争用。可以设置innodb_buffer_pool_instances，把Buffer Pool划分成多个区块，减少争用。</p><p>MySQL 8.4中，这个参数默认值取以下两个数字中的较小值：</p><ul>\n<li>逻辑CPU核数/4</li>\n<li>innodb_buffer_pool_size / innodb_buffer_pool_chunk_size / 2</li>\n</ul><p>我们也可以参考这个方法来得到innodb_buffer_pool_instances的一个合理的设置。</p><p>我们通过SQL语句修改表中的数据时，先修改缓存在Buffer Pool中的页面。页面被修改后称为脏页。脏页中的数据最终需要写回到数据文件中。Page Cleaner线程定期扫描Buffer Pool中的脏页，发起IO请求，将脏页写回磁盘。innodb_page_cleaners控制Page Cleaner线程数量，可以将该参数和innodb_buffer_pool_instances设置成一样。</p><p>InnoDB事务执行过程中，还会生成Undo日志。事务提交时，并不会立刻就清理Undo日志。Purge线程会在合适的时机回收Undo日志。参数innodb_purge_threads控制Purge线程的数量。</p><h4>InnoDB数据文件</h4><p>InnoDB Buffer Pool中的数据，最终会持久化到数据文件中。InnoDB使用IO线程来进行IO操作。参数innodb_read_io_threads、innodb_write_io_threads分别指定了读IO和写IO的线程数，默认值都为4，如果服务器上CPU核数多，可以适当增加这2个参数。</p><h4>Redo Log Buffer</h4><p>为了保障数据的持久化，修改Buffer Pool中的页面时，需要生成Redo日志。如果数据库或服务器异常崩溃，可以使用Redo日志来恢复数据。事务执行过程中，Redo日志会先写入到Redo Log Buffer中，Buffer的大小由参数innodb_log_buffer_size控制。一般分配几十兆就可以，比如8.4中默认为64M。如果你的数据库并发写入量高，可适当把这个参数增加到几百兆。</p><p>事务提交时，需要将事务产生的Redo日志持久化到Redo文件中，这样才能保证数据不丢。参数innodb_flush_log_at_trx_commit控制事务提交时，Redo日志的刷盘行为。设置为1时，每个事务提交时都会等待Redo日志刷盘完成，这是最安全的设置。但由于要等待Redo日志刷盘完成，性能上有一定的开销。这个参数设置为2时，事务提交时只会将Redo日志写到Redo文件中，然后每隔1秒刷新一次Redo文件，如果服务器异常崩溃，可能会导致部分数据丢失。</p><h4>Redo日志</h4><p>早期版本中，通过参数innodb_log_file_size和innodb_log_files_in_group控制Redo日志文件的大小和数量。8.0.30后，新增了innodb_redo_log_capacity参数，就不再需要单独设置innodb_log_file_size和innodb_log_files_in_group了。Redo文件循环使用，随着数据库事务不停地执行，新的Redo日志最终会覆盖老的Redo日志。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/47/946a1fc95719d7b9999bb084eae13847.jpg?wh=858x374\" alt=\"图片\"></p><p>数据库崩溃恢复时，需要通过Redo日志来恢复数据，那么覆盖老的Redo文件会不会导致数据丢失呢？或者MySQL如何保证覆盖Redo文件不影响数据库恢复？其实只要保证覆盖Redo文件时，数据库的Checkpoint LSN比Redo文件最大的LSN号更大就行了。</p><pre><code class=\"language-go\">mysql&gt; select file_id, start_lsn, end_lsn from innodb_redo_log_files;\n+---------+------------+------------+\n| file_id | start_lsn  | end_lsn    |\n+---------+------------+------------+\n|     656 | 2168369664 | 2171644416 |\n+---------+------------+------------+\n\nmysql&gt; show global status like '%lsn%';\n+-------------------------------------+------------+\n| Variable_name                       | Value      |\n+-------------------------------------+------------+\n| Innodb_redo_log_checkpoint_lsn      | 2170307263 |\n| Innodb_redo_log_current_lsn         | 2170307263 |\n| Innodb_redo_log_flushed_to_disk_lsn | 2170307263 |\n+-------------------------------------+------------+\n</code></pre><p>如果innodb_redo_log_capacity设置得太小，数据库写入量又比较大，那么覆盖Redo文件时，就可能需要等待数据库Checkpoint，这会严重影响数据库写入的性能。对于Buffer Pool比较大，写入频繁的数据库，需要把innodb_redo_log_capacity设置得大一些，设置成几个G到几十G都是可以的。</p><p>下面以这个表格对InnoDB参数的设置做一个简单的总结。</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/94/c793b53a1yy146d5621b4b9f7b85fb94.jpg?wh=1578x1550\" alt=\"图片\"></p><h3>其它参数设置</h3><p>关于MySQL主备复制相关的参数，我们到后续的课程中再单独讨论。此外，sql_mode也是MySQL中非常重要的一个参数。在生产环境中，修改这个参数可能会导致原先能运行的SQL直接报错，下一讲中我们会详细讨论sql_mode参数的设置。</p><h2>总结</h2><p>这一讲中，我们一起学习了MySQL的参数设置机制。我建议将一个数据库实例的参数都配置在同一个参数文件中。修改参数时，在参数文件中添加注释，简要说明参数这么设置的原因。有可能的话，使用版本控制工具来管理参数文件。</p><p>MySQL只需要配置最基本的参数就能运行起来。但如果对性能和数据一致性有要求，就需要设置一些重要的参数，比如我们在这一讲中讨论到的资源限制参数、InnoDB的一些参数。我们很难给MySQL设置真正意义上最优的参数，而且在不同的业务场景下，最优的配置可能是不一样的。我的建议是将参数设置得差不多好就行了，将更多的时间花在业务优化上。</p><p>如果你的业务场景对性能有极致的要求，可以使用真实业务场景，对数据库性能进行测评，测试在不同的参数配置下，数据库的性能表现。</p><h2>思考题</h2><p>我们写SQL语句时，关键字一般不区分大小，不同的人可能有不同的习惯。对于库名、表名、列名，不同的数据库有不同的处理方法。比如Oracle中，表名默认不区分大小写。在MySQL中，根据操作系统的不同，表名就可能会区分大小写。</p><pre><code class=\"language-go\">mysql&gt; show tables;\n+----------------+\n| Tables_in_db01 |\n+----------------+\n| Ta             |\n| ta             |\n+----------------+\n2 rows in set (0.01 sec)\n\nmysql&gt; select * from ta;\nEmpty set (0.01 sec)\n\nmysql&gt; SELECT * From tA;\nERROR 1146 (42S02): Table 'db01.tA' doesn't exist\n</code></pre><p>参数lower_case_table_names可用来控制表名是否区分大小写。</p><pre><code class=\"language-go\">mysql&gt; show variables like '%lower%';\n+------------------------+-------+\n| Variable_name          | Value |\n+------------------------+-------+\n| lower_case_file_system | OFF   |\n| lower_case_table_names | 0     |\n+------------------------+-------+\n</code></pre><p>MySQL 8.0中，这个参数只能在数据库初始化之前设置，之后就不能再修改了，修改后数据库都无法启动。</p><pre><code class=\"language-go\">[ERROR] [MY-011087] [Server] Different lower_case_table_names settings for server ('1') and data dictionary ('0').\n[ERROR] [MY-010020] [Server] Data Dictionary initialization failed.\n</code></pre><p>你觉得这个参数应该怎样设置？原因是什么？</p><p>期待你的思考，欢迎在留言区中与我交流。如果今天的课程让你有所收获，也欢迎转发给有需要的朋友。我们下节课再见！</p>","comments":[{"had_liked":false,"id":394173,"user_name":"笙 鸢","can_delete":false,"product_type":"c1","uid":3951358,"ip_address":"上海","ucode":"477AF524212C6D","user_header":"https://static001.geekbang.org/account/avatar/00/3c/4a/fe/7b6bd101.jpg","comment_is_top":false,"comment_ctime":1726041367,"is_pvip":false,"replies":[{"id":143096,"content":"我看了下文档，这个表是8.0.30才引入的。\n\nThe innodb_redo_log_files table contains a row for each active InnoDB redo log file. This table was introduced in MySQL 8.0.30.\n\n之前版本要看redolog lsn的话，估计得直接到redo文件中查看了。\n","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1726105315,"ip_address":"浙江","comment_id":394173,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"select file_id, start_lsn, end_lsn from innodb_redo_log_files;老师，这条命令在我的8.0版本没有找到这个表，我看一些文档说明是在perfmance_schema库下，但是不是跟版本有关，8.0.30才有的这个表？若是之前版本怎么能查看相对应的redolog lsn信息呢","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651033,"discussion_content":"我看了下文档，这个表是8.0.30才引入的。\n\nThe innodb_redo_log_files table contains a row for each active InnoDB redo log file. This table was introduced in MySQL 8.0.30.\n\n之前版本要看redolog lsn的话，估计得直接到redo文件中查看了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726105315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3951358,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/4a/fe/7b6bd101.jpg","nickname":"笙 鸢","note":"","ucode":"477AF524212C6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651056,"discussion_content":"redo_log日志好像也没有工具可以直接查看啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726136119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393713,"user_name":"范特西","can_delete":false,"product_type":"c1","uid":2642712,"ip_address":"浙江","ucode":"1905108C050D6E","user_header":"https://static001.geekbang.org/account/avatar/00/28/53/18/de532447.jpg","comment_is_top":false,"comment_ctime":1724679340,"is_pvip":false,"replies":[{"id":142963,"content":"对的。\n我也是建议lower_case_table_names都设置为1。\n这样即使是跨操作系统迁移数据库，也不会出现表名大小写的问题。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724725138,"ip_address":"浙江","comment_id":393713,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"在 linux 系统里面 lower_case_table_names 只支持设置为 0 或者 1，设置为 0 表示区分大小写，按照用户输入存储，设置为 1 表示不区分大小写，用户创建表名为大写时会按照小写存储，设置为 0 可能会出现两种命名方式，驼峰或者下划线，从标准化的角度想，希望表命名规则是统一的，可读性高，设置为 1 时，相当于数据库表名只能有下划线一种规则，所以推荐为 1","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650287,"discussion_content":"对的。\n我也是建议lower_case_table_names都设置为1。\n这样即使是跨操作系统迁移数据库，也不会出现表名大小写的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724725138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393704,"user_name":"Geek_0126","can_delete":false,"product_type":"c1","uid":3952196,"ip_address":"浙江","ucode":"2916F7FB3F6D71","user_header":"https://static001.geekbang.org/account/avatar/00/3c/4e/44/49b29792.jpg","comment_is_top":false,"comment_ctime":1724658424,"is_pvip":false,"replies":[{"id":142964,"content":"是的。\n我也是建议lower_case_table_names设置为1。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724725266,"ip_address":"浙江","comment_id":393704,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"lower_case_table_names参数一般推荐设置成1，这样库名表名不区分大小写。","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650288,"discussion_content":"是的。\n我也是建议lower_case_table_names设置为1。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724725266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393698,"user_name":"ls","can_delete":false,"product_type":"c1","uid":1001037,"ip_address":"上海","ucode":"C18E208B1DFDA7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/4d/161f3779.jpg","comment_is_top":false,"comment_ctime":1724642337,"is_pvip":true,"replies":[{"id":142965,"content":"对参数lower_case_table_names的作用解释得很全面，👍👍。\n我倾向于在所有的环境下，都将lower_case_table_names设置为1，保持一致。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724725483,"ip_address":"浙江","comment_id":393698,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"在 Unix 上lower_case_table_names的默认值为 0。在Windows上默认值为 1。在macOS 上默认值为 2\n0表示，表在文件系统存储的时候，对应的文件名是按建表时指定的大小写存的，MySQL 内部对表名的比较也是区分大小写的；\n1表示，表在文件系统存储的时候，对应的文件名都小写的，MySQL 内部对表名的比较是转成小写的，即不区分大小写；\n2表示，表在文件系统存储的时候，对应的文件名是按建表时指定的大小写存的，但是 MySQL 内部对表名的比较是转成小写的，即不区分大小写。\n\n0适用于区分大小写的系统，1都适用，2适用于不区分大小写的系统。","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650289,"discussion_content":"对参数lower_case_table_names的作用解释得很全面，👍👍。\n我倾向于在所有的环境下，都将lower_case_table_names设置为1，保持一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724725483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}