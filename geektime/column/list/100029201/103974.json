{"id":103974,"title":"14 | 幂等生产者和事务生产者是一回事吗？","content":"<p>你好，我是胡夕。今天我要和你分享的主题是：Kafka消息交付可靠性保障以及精确处理一次语义的实现。</p><p>所谓的消息交付可靠性保障，是指Kafka对Producer和Consumer要处理的消息提供什么样的承诺。常见的承诺有以下三种：</p><ul>\n<li>最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。</li>\n<li>至少一次（at least once）：消息不会丢失，但有可能被重复发送。</li>\n<li>精确一次（exactly once）：消息不会丢失，也不会被重复发送。</li>\n</ul><p>目前，Kafka默认提供的交付可靠性保障是第二种，即至少一次。在专栏<a href=\"https://time.geekbang.org/column/article/102931\">第11期</a>中，我们说过消息“已提交”的含义，即只有Broker成功“提交”消息且Producer接到Broker的应答才会认为该消息成功发送。不过倘若消息成功“提交”，但Broker的应答没有成功发送回Producer端（比如网络出现瞬时抖动），那么Producer就无法确定消息是否真的提交成功了。因此，它只能选择重试，也就是再次发送相同的消息。这就是Kafka默认提供至少一次可靠性保障的原因，不过这会导致消息重复发送。</p><p>Kafka也可以提供最多一次交付保障，只需要让Producer禁止重试即可。这样一来，消息要么写入成功，要么写入失败，但绝不会重复发送。我们通常不会希望出现消息丢失的情况，但一些场景里偶发的消息丢失其实是被允许的，相反，消息重复是绝对要避免的。此时，使用最多一次交付保障就是最恰当的。</p><!-- [[[read_end]]] --><p>无论是至少一次还是最多一次，都不如精确一次来得有吸引力。大部分用户还是希望消息只会被交付一次，这样的话，消息既不会丢失，也不会被重复处理。或者说，即使Producer端重复发送了相同的消息，Broker端也能做到自动去重。在下游Consumer看来，消息依然只有一条。</p><p>那么问题来了，Kafka是怎么做到精确一次的呢？简单来说，这是通过两种机制：幂等性（Idempotence）和事务（Transaction）。它们分别是什么机制？两者是一回事吗？要回答这些问题，我们首先来说说什么是幂等性。</p><h2>什么是幂等性（Idempotence）？</h2><p>“幂等”这个词原是数学领域中的概念，指的是某些操作或函数能够被执行多次，但每次得到的结果都是不变的。我来举几个简单的例子说明一下。比如在乘法运算中，让数字乘以1就是一个幂等操作，因为不管你执行多少次这样的运算，结果都是相同的。再比如，取整函数（floor和ceiling）是幂等函数，那么运行1次floor(3.4)和100次floor(3.4)，结果是一样的，都是3。相反地，让一个数加1这个操作就不是幂等的，因为执行一次和执行多次的结果必然不同。</p><p>在计算机领域中，幂等性的含义稍微有一些不同：</p><ul>\n<li>在命令式编程语言（比如C）中，若一个子程序是幂等的，那它必然不能修改系统状态。这样不管运行这个子程序多少次，与该子程序关联的那部分系统状态保持不变。</li>\n<li>在函数式编程语言（比如Scala或Haskell）中，很多纯函数（pure function）天然就是幂等的，它们不执行任何的side effect。</li>\n</ul><p>幂等性有很多好处，<strong>其最大的优势在于我们可以安全地重试任何幂等性操作，反正它们也不会破坏我们的系统状态</strong>。如果是非幂等性操作，我们还需要担心某些操作执行多次对状态的影响，但对于幂等性操作而言，我们根本无需担心此事。</p><h2>幂等性Producer</h2><p>在Kafka中，Producer默认不是幂等性的，但我们可以创建幂等性Producer。它其实是0.11.0.0版本引入的新功能。在此之前，Kafka向分区发送数据时，可能会出现同一条消息被发送了多次，导致消息重复的情况。在0.11之后，指定Producer幂等性的方法很简单，仅需要设置一个参数即可，即props.put(“enable.idempotence”, ture)，或props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)。</p><p>enable.idempotence被设置成true后，Producer自动升级成幂等性Producer，其他所有的代码逻辑都不需要改变。Kafka自动帮你做消息的重复去重。底层具体的原理很简单，就是经典的用空间去换时间的优化思路，即在Broker端多保存一些字段。当Producer发送了具有相同字段值的消息后，Broker能够自动知晓这些消息已经重复了，于是可以在后台默默地把它们“丢弃”掉。当然，实际的实现原理并没有这么简单，但你大致可以这么理解。</p><p>看上去，幂等性Producer的功能很酷，使用起来也很简单，仅仅设置一个参数就能保证消息不重复了，但实际上，我们必须要了解幂等性Producer的作用范围。</p><p>首先，它只能保证单分区上的幂等性，即一个幂等性Producer能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为Producer进程的一次运行。当你重启了Producer进程之后，这种幂等性保证就丧失了。</p><p>那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型Producer。这也是幂等性Producer和事务型Producer的最大区别！</p><h2>事务</h2><p>Kafka的事务概念类似于我们熟知的数据库提供的事务。在数据库领域，事务提供的安全性保障是经典的ACID，即原子性（Atomicity）、一致性(Consistency)、隔离性(Isolation)和持久性(Durability)。</p><p>当然，在实际场景中各家数据库对ACID的实现各不相同。特别是ACID本身就是一个有歧义的概念，比如对隔离性的理解。大体来看，隔离性非常自然和必要，但是具体到实现细节就显得不那么精确了。通常来说，<strong>隔离性表明并发执行的事务彼此相互隔离，互不影响</strong>。经典的数据库教科书把隔离性称为可串行化(serializability)，即每个事务都假装它是整个数据库中唯一的事务。</p><p>提到隔离级别，这种歧义或混乱就更加明显了。很多数据库厂商对于隔离级别的实现都有自己不同的理解，比如有的数据库提供Snapshot隔离级别，而在另外一些数据库中，它们被称为可重复读（repeatable read）。好在对于已提交读（read committed）隔离级别的提法，各大主流数据库厂商都比较统一。所谓的read committed，指的是当读取数据库时，你只能看到已提交的数据，即无脏读。同时，当写入数据库时，你也只能覆盖掉已提交的数据，即无脏写。</p><p>Kafka自0.11版本开始也提供了对事务的支持，目前主要是在read committed隔离级别上做事情。它能保证多条消息原子性地写入到目标分区，同时也能保证Consumer只能看到事务成功提交的消息。下面我们就来看看Kafka中的事务型Producer。</p><h2>事务型Producer</h2><p>事务型Producer能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型Producer也不惧进程的重启。Producer重启回来后，Kafka依然保证它们发送消息的精确一次处理。</p><p>设置事务型Producer的方法也很简单，满足两个要求即可：</p><ul>\n<li>和幂等性Producer一样，开启enable.idempotence = true。</li>\n<li>设置Producer端参数transactional. id。最好为其设置一个有意义的名字。</li>\n</ul><p>此外，你还需要在Producer代码中做一些调整，如这段代码所示：</p><pre><code>producer.initTransactions();\ntry {\n            producer.beginTransaction();\n            producer.send(record1);\n            producer.send(record2);\n            producer.commitTransaction();\n} catch (KafkaException e) {\n            producer.abortTransaction();\n}\n</code></pre><p>和普通Producer代码相比，事务型Producer的显著特点是调用了一些事务API，如initTransaction、beginTransaction、commitTransaction和abortTransaction，它们分别对应事务的初始化、事务开始、事务提交以及事务终止。</p><p>这段代码能够保证Record1和Record2被当作一个事务统一提交到Kafka，要么它们全部提交成功，要么全部写入失败。实际上即使写入失败，Kafka也会把它们写入到底层的日志中，也就是说Consumer还是会看到这些消息。因此在Consumer端，读取事务型Producer发送的消息也是需要一些变更的。修改起来也很简单，设置isolation.level参数的值即可。当前这个参数有两个取值：</p><ol>\n<li>read_uncommitted：这是默认值，表明Consumer能够读取到Kafka写入的任何消息，不论事务型Producer提交事务还是终止事务，其写入的消息都可以读取。很显然，如果你用了事务型Producer，那么对应的Consumer就不要使用这个值。</li>\n<li>read_committed：表明Consumer只会读取事务型Producer成功提交事务写入的消息。当然了，它也能看到非事务型Producer写入的所有消息。</li>\n</ol><h2>小结</h2><p>简单来说，幂等性Producer和事务型Producer都是Kafka社区力图为Kafka实现精确一次处理语义所提供的工具，只是它们的作用范围是不同的。幂等性Producer只能保证单分区、单会话上的消息幂等性；而事务能够保证跨分区、跨会话间的幂等性。从交付语义上来看，自然是事务型Producer能做的更多。</p><p>不过，切记天下没有免费的午餐。比起幂等性Producer，事务型Producer的性能要更差，在实际使用过程中，我们需要仔细评估引入事务的开销，切不可无脑地启用事务。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/ed/419a092ef55d0fa248a56fe582a551ed.jpg?wh=2069*2560\" alt=\"\"></p><h2>开放讨论</h2><p>你理解的事务是什么呢？通过今天的分享，你能列举出未来可能应用于你们公司实际业务中的事务型Producer使用场景吗？</p><p>欢迎写下你的思考和答案，我们一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":131832,"user_name":"时隐时现","can_delete":false,"product_type":"c1","uid":1111899,"ip_address":"","ucode":"DA4D622FF84920","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/5b/d2e7c2c4.jpg","comment_is_top":false,"comment_ctime":1567928399,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"572798578767","product_id":100029201,"comment_content":"幂等性producer和事务型producer实现原理都没有涉及，这篇有点太肤浅了","like_count":134,"discussions":[{"author":{"id":1800068,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI7y20jxxAnsdGLuUDjicibsgaMGO0PQg7WNTrNCzqmibtrsibpjJJHs6LK0FTWKs8icJickMJPkM7Tia2UA/132","nickname":"旺财勇士","note":"","ucode":"EB87A0D17C8F98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215514,"discussion_content":"这一系列文章真是把人看晕，讲了很多，到时没有一个讲清楚了…","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1585327726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1800068,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI7y20jxxAnsdGLuUDjicibsgaMGO0PQg7WNTrNCzqmibtrsibpjJJHs6LK0FTWKs8icJickMJPkM7Tia2UA/132","nickname":"旺财勇士","note":"","ucode":"EB87A0D17C8F98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267811,"discussion_content":"我也这么觉得,,,特别是事务producer的原理","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589693408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215514,"ip_address":""},"score":267811,"extra":""},{"author":{"id":2583249,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIOy2KKslnZOoZbBFgAMyzicbNgZmlyoSV6LfrPJMKoArFWWWrtkC3ImlhCrRgxTTKlpFfg7exywrg/132","nickname":"Geek_2a350f","note":"","ucode":"8BE1229A05BE07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1800068,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI7y20jxxAnsdGLuUDjicibsgaMGO0PQg7WNTrNCzqmibtrsibpjJJHs6LK0FTWKs8icJickMJPkM7Tia2UA/132","nickname":"旺财勇士","note":"","ucode":"EB87A0D17C8F98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371557,"discussion_content":"而且大白话太多，干货太少，密密麻麻一大篇，读下来之后，有用的就那几句","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1619844035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215514,"ip_address":""},"score":371557,"extra":""}]},{"author":{"id":2059216,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er64eekoibmiaABGFaEY49TqPPen1yMvKBhgDD0sAzedFkfDAvpABMNnxJvKOoiadY0RacWgwYWhhclg/132","nickname":"Geek_ce9867","note":"","ucode":"54DC12A2F57620","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583255,"discussion_content":"MySQL，redis真心不错，kafka确实不行，看了十几篇基本和没看效果一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1659981662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240103,"discussion_content":"这个讲的太简单了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587340103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997159,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/67/b4546e48.jpg","nickname":"咕噜咕噜咕","note":"","ucode":"291A60A726AA19","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577787,"discussion_content":"那你牛X啊，这么牛X的人还需要学习吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656332889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2503866,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/2PyCFC2XnkuayQGNhNX3dnGK7fjs2OSCN474iamm0vcr3ZEAI62HANNibs6BXmDicf8PEhmxoA7tg4MUfhMUI3QoA/132","nickname":"Geek_c6df8d","note":"","ucode":"E525722CCD3ECA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356783,"discussion_content":"请问应届生面试适合看这个吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615679808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2503866,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/2PyCFC2XnkuayQGNhNX3dnGK7fjs2OSCN474iamm0vcr3ZEAI62HANNibs6BXmDicf8PEhmxoA7tg4MUfhMUI3QoA/132","nickname":"Geek_c6df8d","note":"","ucode":"E525722CCD3ECA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356782,"discussion_content":"后面会讲到吗，是不是埋下伏笔？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615679122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2334601,"avatar":"","nickname":"yiocio1","note":"","ucode":"42F589C3B1B886","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328211,"discussion_content":"讲的过于简单了，都是可以随便百度到的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606105525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267814,"discussion_content":"可以看看评论,有些问题无涉及到,但是有人会提问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589693481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117807,"user_name":"Jowin","can_delete":false,"product_type":"c1","uid":1114356,"ip_address":"","ucode":"19017F7D06C22A","user_header":"https://static001.geekbang.org/account/avatar/00/11/00/f4/cc5f0896.jpg","comment_is_top":false,"comment_ctime":1564134050,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"246377269922","product_id":100029201,"comment_content":"研究了一下kafka的设计文档，基本搞清楚了幂等和事务消息，一些理解，https:&#47;&#47;www.jianshu.com&#47;p&#47;f77ade3f41fd， 欢迎大家一起交流。","like_count":58,"discussions":[{"author":{"id":2289723,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f0/3b/3a142c70.jpg","nickname":"大姐","note":"","ucode":"F23143AB43DDDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371600,"discussion_content":"kafka这个系列确实比较水","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1619866092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397677,"avatar":"https://static001.geekbang.org/account/avatar/00/15/53/ad/d1efda5c.jpg","nickname":"对方正在输入...","note":"","ucode":"08B7F728449529","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380760,"discussion_content":"写的很详细，棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624689083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2194764,"avatar":"","nickname":"K菌无惨","note":"","ucode":"97A532D588FD49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339494,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609688814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485408,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/60/7c0d55bd.jpg","nickname":"Mark.He","note":"","ucode":"C06D3F8AA0CAF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333102,"discussion_content":"写的比这里详细，这里很多地方就是一笔带过，基本上不涉及原理实现等分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607433290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037045,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/f5/0c716e9d.jpg","nickname":"roderickyu","note":"","ucode":"549C4A36D66C46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5814,"discussion_content":"赞，非常感谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566468728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110337,"user_name":"October","can_delete":false,"product_type":"c1","uid":1137879,"ip_address":"","ucode":"CEDA78F4A5F8B1","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/d7/e4673fde.jpg","comment_is_top":false,"comment_ctime":1562232087,"is_pvip":false,"replies":[{"id":"40154","content":"嗯嗯，我觉得很有道理：）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562287307,"ip_address":"","comment_id":110337,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121821316375","product_id":100029201,"comment_content":"我所理解的kafka事务是这样的：生产者的事务能够保证一条消息仅仅会保存在kafka的某一个分区上，不会出现在多个分区上，另外，能够保证多条消息原子性的发送到多个分区。也就是说它只保证了从producer端到broker端消息不丢失不重复。但对于consumer端，由于偏移量的提交和消息处理的顺序有前有后，依然可能导致重复消费或者消息丢失消费，如果要实现消费者消费的精确一次，还需要通过额外机制在消费端实现偏移量提交和消息消费的事务处理。不知道自己理解的对不对，希望老师指正。","like_count":29,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456825,"discussion_content":"嗯嗯，我觉得很有道理：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562287307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110199,"user_name":"dream","can_delete":false,"product_type":"c1","uid":1117793,"ip_address":"","ucode":"65B33D32FA8BE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/61/ae68f8eb.jpg","comment_is_top":false,"comment_ctime":1562206916,"is_pvip":false,"replies":[{"id":"40148","content":"主要的机制是两阶段提交（2PC）。引入了事务协调器的组件帮助完成分布式事务","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562286958,"ip_address":"","comment_id":110199,"utype":1}],"discussion_count":4,"race_medal":0,"score":"108936389316","product_id":100029201,"comment_content":"老师，请问一下，事务型 Producer 可以实现一组消息要么全部写入成功，要么全部失败，但是事务型 Producer 是具体怎么实现多分区以及多会话上的消息无重复的呢？<br><br>","like_count":25,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456773,"discussion_content":"主要的机制是两阶段提交（2PC）。引入了事务协调器的组件帮助完成分布式事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562286958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1564645,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/e5/65e37812.jpg","nickname":"快跑","note":"","ucode":"90ED7E6D40C58E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":538988,"discussion_content":"源码解析的课程中，有关于两阶段提交的介绍么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639572019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":456773,"ip_address":""},"score":538988,"extra":""}]},{"author":{"id":2328990,"avatar":"","nickname":"Geek4870","note":"","ucode":"30DBE32C77FFE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371562,"discussion_content":"两阶段提交，保证的是事务的一致性，和幂等性没什么关系吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619848082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363255,"discussion_content":"这个使用的是什么一致性算法？quorum NWR算法吗？我们可以自己设置wr的值吗？还是用的raft算法？但这样效率是不是会很低？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617155452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119862,"user_name":"知易","can_delete":false,"product_type":"c1","uid":1246882,"ip_address":"","ucode":"BD3E3F0F0A40EF","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","comment_is_top":false,"comment_ctime":1564714450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70284191186","product_id":100029201,"comment_content":"版本0.11.0.2，设置transactional.id并开启事务后，须同时保证retries&gt;1<br>","like_count":16},{"had_liked":false,"id":110270,"user_name":"风中花","can_delete":false,"product_type":"c1","uid":1085237,"ip_address":"","ucode":"067E0A1E116844","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","comment_is_top":false,"comment_ctime":1562218552,"is_pvip":false,"replies":[{"id":"40150","content":"我们没有使用。事务更多用在Kafka Streams中。如果要实现流处理中的精确一次语义，事务是不可少的。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562287063,"ip_address":"","comment_id":110270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70281695288","product_id":100029201,"comment_content":"我一直认为事务，不到必须时是不用得东西，那么我想知道，胡老师实际中，你们有用到过吗，在一些什么场景下使用？老师可以简单说下吗，谢谢","like_count":17,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456795,"discussion_content":"我们没有使用。事务更多用在Kafka Streams中。如果要实现流处理中的精确一次语义，事务是不可少的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562287063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112123,"user_name":"calljson","can_delete":false,"product_type":"c1","uid":1505262,"ip_address":"","ucode":"A5F81A6A5B4497","user_header":"https://static001.geekbang.org/account/avatar/00/16/f7/ee/6eeb58a3.jpg","comment_is_top":false,"comment_ctime":1562672066,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53102279618","product_id":100029201,"comment_content":"文中提到了幂等性，希望能够讲解下幂等性原理，如何实现，这样大家才能明白为何幂等性无法保证：跨回话、跨分区","like_count":12,"discussions":[{"author":{"id":2037522,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/YbUxEV3741vKZAiasOXggWucQbmicJwIjg3HDE58oyibYXbSop9QQFqZ7X6OhynDoo6rDHwzK8njSeJjN9hx3pJXg/132","nickname":"黄堃健","note":"","ucode":"B4AD5250A41B3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373104,"discussion_content":"幂等性，主要在单回话启动时申请一个pid。同时有一个序列号，每发送一条不同的消息，序列号+1。 注意如果重复发送消息。依然是同一个序列号。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620614975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146541,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1572570630,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"48817210886","product_id":100029201,"comment_content":"消息交付可靠性：<br>（1）可靠性保障，常见有三种：<br>\t最多一次（at most once）:消息可能会丢失，但不会被重复发送<br>\t至少一次（at least once）:消息不会丢失，但可能会重复发送<br>\t精确一次（exactly once）:消息不会对丢失，也不会被重复发送<br>（2）Kafka默认提供交付可靠性保障是至少一次<br>（3）Kafka消息交付可靠性保障以及精确处理一次语义通过两种机制来实现的：冥等性（Idempotence）和事务（Transaction）。<br>\t<br><br>冥等性<br>（1）什么是幂等性（Idempotence）<br>\tA：“幂等”：原是数学概念，指某些操作或函数能够被执行多次，但每次得到的结果都不变。<br>\tB：计算机领域的含义：<br>             a，在命令式编程语言（如C）中，若一个子程序是幂等的，那它必然不能修改系统状态。无论这个子程序运行多少次，与该子程序的关联的那部分系统保持不变。<br>             b，在函数式编程语言（比如Scala或Haskell）中，很多纯函数（pure function）天然就是幂等的，他们不执行任何的side effect。<br>       C：冥等性的优点：最大的优势是可以安全地重试任何冥等性操作，因为他们不会破坏系统状态<br>（2）冥等性Producer<br>       A：开启：设置props.put（“enable.idempotence”，true）或props.put(ProducerConfig.ENABLE_IDEMPOTENC_CONFIG，true)。<br>       B：特征：开启后，Kafka自动做消息的重复去重。<br>       C：实现思路：用空间换取时间，Broker端多保存一些字段，当Producer发送了具有相同字段值的消息后，Broker就可以知道这些消息重复，就将这些消息丢弃。<br>       D：作用范围：<br>          （1）只能保证单分区上幂等性，无法实现多个分区的幂等性。<br>          （2）只能实现单会话上的冥等性，当Producer重启后，这种幂等性保证就失效了。<br><br>事务<br>（1）事务概念：<br>\tA：事务提供的安全性保障是经典的ACID。原子性(Atomicity)，一致性(Consistency)，隔离性(Isolation)，持久性(Durability)。<br>        B：kafka的事务机制可以保证多条消息原子性地写入到目标分区，同时也能保证Consumer只能看到事务成功提交的消息。<br><br>（2）事务型Producer：<br>\tA：开启：<br>          【1】设置enable.idempotence = true。<br>          【2】设置Producer端参数transactional.id。最好为其设置一个有意义的名字。<br>          【3】调整Producer代码，显示调用事务API。<br>          【4】设置Consumer端参数 isolation.level 值：<br>                  read_uncommitted(默认值，能够读到kafka写入的任何消息)<br>                  read_committed（Consumer只会读取事务型Producer成功事务写入的消息。）<br>\tB：特征：<br>         【1】能够保证将消息原子性地写入到多个分区中。一批消息要么全部成功，要么全部失败。<br>         【2】不惧进程重启，Producer重启回来后，kafka依然能保证发送的消息的精确一次处理。<br><br>关键事项：<br>       1，幂等性无法实现多个分区以及多会话上的消息无重复，但事务（transaction）或依赖事务型Produce可以做到。<br>       2，开启事务对性能影响很大，在使用时要充分考虑<br>","like_count":12,"discussions":[{"author":{"id":1879262,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ac/de/68f35320.jpg","nickname":"小来子","note":"","ucode":"4EDAF31E43B211","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303852,"discussion_content":"这种把文章抄一遍的方式不可取！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599395858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138611,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1237401,"ip_address":"","ucode":"6E33D6E44A76C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/99/d08e2b5c.jpg","comment_is_top":false,"comment_ctime":1570367879,"is_pvip":false,"replies":[{"id":"53466","content":"Kafka broker基本上还是保持append-only的日志型风格，不做删除处理","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1570495449,"ip_address":"","comment_id":138611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48815008135","product_id":100029201,"comment_content":"老师，kafka中的事务提交异常，broker端的数据还是会写入日志，相当于只是记录一下失败状态，在消费端通过隔离级别，来过滤掉出这部分消息，不进行消费。为什么事务异常了，还要将数据写入日志呢？直接删除掉不好吗？像DB那样。","like_count":11,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469593,"discussion_content":"Kafka broker基本上还是保持append-only的日志型风格，不做删除处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570495449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204472,"user_name":"Kim","can_delete":false,"product_type":"c1","uid":1236573,"ip_address":"","ucode":"39CC8E1E8EFB8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/5d/a7e748db.jpg","comment_is_top":false,"comment_ctime":1586404398,"is_pvip":false,"replies":[{"id":"76530","content":"这里的写入失败是指事务失败，可能没有说太清楚。如果事务失败中止了，Kafka没法向数据库那样执行回滚，写入的日志也只能继续“躺在”日志中了，但是Kafka依赖于LSO等机制来设定一个事务型Consumer的可见范围，保证事务的准确性","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1586481799,"ip_address":"","comment_id":204472,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44536077358","product_id":100029201,"comment_content":"老师，有个地方很困惑，这句话“实际上即使写入失败，Kafka 也会把它们写入到底层的日志中，也就是说 Consumer 还是会看到这些消息”这是什么意思？明明写入都失败了，为什么还会写到底层的commit log中呢？那这里的写入失败是指写入磁盘失败么？麻烦老师解答一下，谢谢~~","like_count":10,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491193,"discussion_content":"这里的写入失败是指事务失败，可能没有说太清楚。如果事务失败中止了，Kafka没法向数据库那样执行回滚，写入的日志也只能继续“躺在”日志中了，但是Kafka依赖于LSO等机制来设定一个事务型Consumer的可见范围，保证事务的准确性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586481799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/5d/a7e748db.jpg","nickname":"Kim","note":"","ucode":"39CC8E1E8EFB8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230326,"discussion_content":"谢谢老师的解答，我想继续问下也就是说事务失败，数据也会写到日志里，但是依赖于kafka中的某种机制，Consumer无法消费到该条消息，可以这么理解么","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586740031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210012,"user_name":"冉冉","can_delete":false,"product_type":"c1","uid":1436334,"ip_address":"","ucode":"D36C0F95BC1DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/ea/ae/0e056410.jpg","comment_is_top":false,"comment_ctime":1587651668,"is_pvip":false,"replies":[{"id":"78343","content":"hmmm.... 应该这么来说：从Kafka设计的角度，不是永远的关系，c1理论上可以收到p2的消息，只要发生了rebalance。但实际使用过程中，一旦你的group确定了分配策略，其实这种分配关系也就是确定的了。特别是对于你这个场景，无论发生多少次rebalance，p1应该都会被分配给c1。当然我说的是c1,c2都运行的情况下，如果c2挂了，c1肯定能收到p2的消息","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1587697460,"ip_address":"","comment_id":210012,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40242357332","product_id":100029201,"comment_content":"想问下老师一个关于消费者的问题，如果一个消费者组里有两个消费者c1，c2，一个topic有两个分区p1，p2，那c1永远从p1收消息，而不会收到生产者发到p2的消息对吗？","like_count":9,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492917,"discussion_content":"hmmm.... 应该这么来说：从Kafka设计的角度，不是永远的关系，c1理论上可以收到p2的消息，只要发生了rebalance。但实际使用过程中，一旦你的group确定了分配策略，其实这种分配关系也就是确定的了。特别是对于你这个场景，无论发生多少次rebalance，p1应该都会被分配给c1。当然我说的是c1,c2都运行的情况下，如果c2挂了，c1肯定能收到p2的消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587697460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180945,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1582447475,"is_pvip":false,"replies":[{"id":"70211","content":"需要配合参数max.in.flight.requests.per.connection = 1来实现。这样producer会等待之前请求的消息发送成功才会发送下一个，从而不会乱序","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1582455457,"ip_address":"","comment_id":180945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31647218547","product_id":100029201,"comment_content":"不启用幂等也可以保证同分区下无消息乱序的。——消息发送失败重发时，在broker端不会导致收到的顺序，和producer端发送顺序不一致吗？如果是的话，是类似TCP那种保证有序的机制吗？","like_count":7,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484858,"discussion_content":"需要配合参数max.in.flight.requests.per.connection = 1来实现。这样producer会等待之前请求的消息发送成功才会发送下一个，从而不会乱序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582455457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149646,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1573303639,"is_pvip":true,"replies":[{"id":"57671","content":"producer端可能发送重复消息，broker端有一套机制来去重（幂等性依赖seq number机制，事务依赖各种marker来标记）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1573433346,"ip_address":"","comment_id":149646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31638074711","product_id":100029201,"comment_content":"老师，事务型producer不会重复发送消息吗？如果发送的这一批到broker了，但是broker返回的确认消息producer没有收到，再次尝试，broker会去重吗？或者consumer端会去重啊？","like_count":7,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473924,"discussion_content":"producer端可能发送重复消息，broker端有一套机制来去重（幂等性依赖seq number机制，事务依赖各种marker来标记）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573433346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110164,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1562203083,"is_pvip":false,"replies":[{"id":"39926","content":"是的，会保证","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562203655,"ip_address":"","comment_id":110164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27332006859","product_id":100029201,"comment_content":"retry的话producer会保证发送到同一个分区吧，不然幂等性就没法保证了","like_count":6,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456754,"discussion_content":"是的，会保证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562203655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186907,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1583964195,"is_pvip":false,"replies":[{"id":"72114","content":"嗯，很有道理：）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1583975907,"ip_address":"","comment_id":186907,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23058800675","product_id":100029201,"comment_content":"重启之后标识producer的PID就变化了，broker就不认识了——这个是幂等性的另一个限制条件，无法实现夸会话的幂等性。我理解的是：一个幂等性的producer，只保证单分区的幂等性，而producer的消息会发给一个主题的多个分区，每个单分区都保证幂等性，其实就是实现了多分区的幂等性，只是无法实现跨会话的幂等性，不知道理解的对不对？","like_count":5,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486913,"discussion_content":"嗯，很有道理：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583975907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375723,"discussion_content":"你这个说的是重复消费 好像和幂等性没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621832040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","nickname":"胡小禾","note":"","ucode":"1C23B7492C0C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264392,"discussion_content":"&#34;一个幂等性的producer，只保证单分区的幂等性，而producer的消息会发给一个主题的多个分区，每个单分区都保证幂等性，其实就是实现了多分区的幂等性&#34; ，这种说法不大对吧？\n\n幂等的producer 只能保证  在一个分区上这个消息只存在一条，跨分区就未必了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589301679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1249656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","nickname":"妥协","note":"","ucode":"7201DFE9C12669","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1132315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","nickname":"胡小禾","note":"","ucode":"1C23B7492C0C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265247,"discussion_content":"正常情况下，一条消息只会发往一个分区。一个消息发给多个分区，那就是分区挂了，属于跨会话不保证幂等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589381066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264392,"ip_address":""},"score":265247,"extra":""}]}]},{"had_liked":false,"id":110614,"user_name":"快跑","can_delete":false,"product_type":"c1","uid":1564645,"ip_address":"","ucode":"90ED7E6D40C58E","user_header":"https://static001.geekbang.org/account/avatar/00/17/df/e5/65e37812.jpg","comment_is_top":false,"comment_ctime":1562302511,"is_pvip":false,"replies":[{"id":"40302","content":"重启之后标识producer的PID就变化了，broker就不认识了。要想认识就要让broker和producer做更多的事，也就是事务机制做的那些事。<br><br>重试还是发送到同一个分区","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562371075,"ip_address":"","comment_id":110614,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23037138991","product_id":100029201,"comment_content":"老师，你好<br>幂等性为什么只保证单分区有效？是因为下一次消息重试指不定发送到哪个分区么。如果这样的话是不是可以采用按消息键保序的方式？这样重试消息还发送到同一个分区。","like_count":5,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456968,"discussion_content":"重启之后标识producer的PID就变化了，broker就不认识了。要想认识就要让broker和producer做更多的事，也就是事务机制做的那些事。\n\n重试还是发送到同一个分区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562371075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","nickname":"妥协","note":"","ucode":"7201DFE9C12669","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":184963,"discussion_content":" 重启之后标识producer的PID就变化了，broker就不认识了——这个是幂等性的另一个限制条件，无法实现夸会话的幂等性。我理解的是：一个幂等性的producer，只保证单分区的幂等性，而producer的消息会发给一个主题的多个分区，每个单分区都保证幂等性，其实就是实现了多分区的幂等性，只是无法实现跨会话的幂等性，不知道理解的对不对？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582590811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128784,"user_name":"奇奇","can_delete":false,"product_type":"c1","uid":1399097,"ip_address":"","ucode":"BC86B0CB55E35A","user_header":"","comment_is_top":false,"comment_ctime":1566962425,"is_pvip":true,"replies":[{"id":"47861","content":"Kafka Streams依靠幂等producer和事务机制来保证EOS","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1566984899,"ip_address":"","comment_id":128784,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18746831609","product_id":100029201,"comment_content":"事务还有用 冥等生产者没什么用，反正消费端都是有可能重复消费的，业务上必须做去重处理","like_count":4,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465101,"discussion_content":"Kafka Streams依靠幂等producer和事务机制来保证EOS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566984899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1490686,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXW5rycAcrNTwgOvib8poPXO0zvIekIPzBZJfsnciaLPIw9Q1t3rsXeH6DR24QndpYQibvibhR1tKHPw/132","nickname":"小马","note":"","ucode":"92B7ECD23BDCB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133344,"discussion_content":"看完本章节有些疑惑，首先幂等性只能保证单分区，单会话，那是不是说使用场景一单分区的topic；\n其次如果我们可以保证多个多个producer每个会话只会发送到topic的一个分区是否可达到幂等性，但有疑惑一个producer可能对应多个topic，会不会有影响。另外对于幂等性，事物原理讲解的章节有吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578962401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110511,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1562288775,"is_pvip":false,"replies":[{"id":"40303","content":"如果consumer能够读取page cache中的数据而不是要去磁盘执行物理读，那么可以用上zero copy，速度应该是很快的。你可以看下你的consumer消费时broker的物理读IO，如果很低，大概率走的是page cache。另外如果读kafka很快，es忽高忽低，那是不是应该查一下ES的写入？","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562371174,"ip_address":"","comment_id":110511,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18742157959","product_id":100029201,"comment_content":"老师请教个问题啊，我们在一个生产环境是日志入kafka，然后读取kafka的数据入到es里面，由于数据比较多，所以入到kafka的数据可能要过半天到一天才可以处理完，结果发现一个很奇怪的现象就是kafka的入的数据越快，那么入es的速度也越快，本来怀疑是kafka数据在cache里面所以快的，但是我们的数据延迟了很久，不太可能在cache，而且通过读kafka的程序日志分析，读kafka环节一直很快，只是入es的时间有快又慢，这个可能是什么问题那？","like_count":4,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456916,"discussion_content":"如果consumer能够读取page cache中的数据而不是要去磁盘执行物理读，那么可以用上zero copy，速度应该是很快的。你可以看下你的consumer消费时broker的物理读IO，如果很低，大概率走的是page cache。另外如果读kafka很快，es忽高忽低，那是不是应该查一下ES的写入？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562371174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30481,"discussion_content":"1.  关注kafka的 lag 监控，不要和es 混在一起 （不要跨系统debug）\n2.  直接看es 的marvel 监控。es性能一目了然。可能是es的写入变慢了。关注节点磁盘io情况。es 在高吞吐情况下，写入就是瓶颈。\n开启bulk 写入方式。queue调大些。换ssd数据节点，冷热分离。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570839637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224883,"user_name":"Geek_rebecca","can_delete":false,"product_type":"c1","uid":1524467,"ip_address":"","ucode":"68EAB856B74634","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/f3/1eb9b1e2.jpg","comment_is_top":false,"comment_ctime":1591582923,"is_pvip":false,"replies":[{"id":"82849","content":"不能完全避免消费者重复消费。最好还是使用业务去重","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1591631070,"ip_address":"","comment_id":224883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10181517515","product_id":100029201,"comment_content":"老师，kafka的幂等性仅限于单分区会话，producer重启PID会变。那是不是说明其实kafka还是不能保证不会重复消费消息，如果要做到不重复消费，只能consumer端的代码逻辑里面去重过滤。","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497643,"discussion_content":"不能完全避免消费者重复消费。最好还是使用业务去重","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591631070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216632,"user_name":"胡小禾","can_delete":false,"product_type":"c1","uid":1132315,"ip_address":"","ucode":"1C23B7492C0C9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","comment_is_top":false,"comment_ctime":1589298797,"is_pvip":false,"replies":[{"id":"80175","content":"嗯， 是的~","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589332132,"ip_address":"","comment_id":216632,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10179233389","product_id":100029201,"comment_content":"即使consumer读到了事务消息，但还是可能由于rebalance等原因导致重复消费的吧？","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494889,"discussion_content":"嗯， 是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589332132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389772,"discussion_content":"想只通过消息中间件达成幂等性，想都不要想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629428209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216161,"user_name":"席席","can_delete":false,"product_type":"c1","uid":1591399,"ip_address":"","ucode":"656377E29D4F76","user_header":"https://static001.geekbang.org/account/avatar/00/18/48/67/128eda8f.jpg","comment_is_top":false,"comment_ctime":1589198148,"is_pvip":false,"replies":[{"id":"80064","content":"没关系。我建议你可以先把Kafka官网简单看一下，特别是Get Started部分，对Kafka有个基础的了解，然后再结合专栏里面的内容进行学习：）","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589248751,"ip_address":"","comment_id":216161,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179132740","product_id":100029201,"comment_content":"胡老师，我是kafaka初学者，现在维护的web项目中有相关的代码，并非我写的而且我只是简单的看过，我该怎么在你的课程中获得对kafaka的理解，至少我下次需要使用kafaka时候我能知道该怎么去做，但是我听到现在也没觉得有太大收获，看了下面的课程貌似也不会对我有太大帮助。说话比较直接，但是需要胡老师解惑！","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494697,"discussion_content":"没关系。我建议你可以先把Kafka官网简单看一下，特别是Get Started部分，对Kafka有个基础的了解，然后再结合专栏里面的内容进行学习：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589248751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203429,"user_name":"firstblood","can_delete":false,"product_type":"c1","uid":1015168,"ip_address":"","ucode":"B53CC5FAECA34D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqjbwXwF3YUcSw7A8v6f0sAYzQMloOWg62aciaGfzZWibRw2jjTja1Vwh5CLVGZdseM6gSBnC1hRzEQ/132","comment_is_top":false,"comment_ctime":1586188309,"is_pvip":false,"replies":[{"id":"76089","content":"可以的~","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1586242800,"ip_address":"","comment_id":203429,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10176122901","product_id":100029201,"comment_content":"老师您好，想问一下如果两个producer往相同的topic写入，可不可以用相同的transactional. id ？","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490860,"discussion_content":"可以的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586242800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2059216,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er64eekoibmiaABGFaEY49TqPPen1yMvKBhgDD0sAzedFkfDAvpABMNnxJvKOoiadY0RacWgwYWhhclg/132","nickname":"Geek_ce9867","note":"","ucode":"54DC12A2F57620","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":580934,"discussion_content":"不可以啊。如果使用同一个transactionalId开启两个生产者，那么前一个开启的生产者会报出错误的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658408216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":490860,"ip_address":""},"score":580934,"extra":""}]}]},{"had_liked":false,"id":177958,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1581561925,"is_pvip":false,"replies":[{"id":"69136","content":"你是想说MVCC吧？Kafka没有采用MVCC的机制，而且Kafka的事务严格意义上说也不是我们平时所说的数据库领域内的事务。简单来说，你大致可以认为实现原理是类似于2PC的，只不过在Kafka中那个Coordinator叫TransactionCoordinator","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1581643344,"ip_address":"","comment_id":177958,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171496517","product_id":100029201,"comment_content":"kafka内部的事务是不是使用像mysql一样的一致性事务视图，使用的MVVC多版本控制吗？还是怎么实现的","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483611,"discussion_content":"你是想说MVCC吧？Kafka没有采用MVCC的机制，而且Kafka的事务严格意义上说也不是我们平时所说的数据库领域内的事务。简单来说，你大致可以认为实现原理是类似于2PC的，只不过在Kafka中那个Coordinator叫TransactionCoordinator","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581643344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151470,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1573726188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163660780","product_id":100029201,"comment_content":"对于单会话单分区幂等性～可以使用key分区策略，来实现多分区单会话幂等性。","like_count":2},{"had_liked":false,"id":138781,"user_name":"修愿三秋","can_delete":false,"product_type":"c1","uid":1014649,"ip_address":"","ucode":"0AEE445D8DBFF4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/79/df384bdc.jpg","comment_is_top":false,"comment_ctime":1570448033,"is_pvip":true,"replies":[{"id":"53465","content":"如果你使用producer接连发送相同的消息，在Kafka看来这是两条消息，而不是一条。判断重复消息的依据是消息的位移","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1570495415,"ip_address":"","comment_id":138781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10160382625","product_id":100029201,"comment_content":"你好，老师，幂等性producer能规避ABA问题吗？如果发送三条消息分别是A，B，A那broker保存的是ABA还是AB呢？","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469642,"discussion_content":"如果你使用producer接连发送相同的消息，在Kafka看来这是两条消息，而不是一条。判断重复消息的依据是消息的位移","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570495415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138552,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1570333226,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10160267818","product_id":100029201,"comment_content":"个人觉得由消费者来根据自身需求来保证幂等性要更好","like_count":2,"discussions":[{"author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389775,"discussion_content":"这是一定的，在消费端做幂等性，生产者保证消息至少一次，想要只通过MQ做到幂等性，想都不要想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629428399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112999,"user_name":"趁早","can_delete":false,"product_type":"c1","uid":1031970,"ip_address":"","ucode":"949FB3AA250D80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/22/26530e66.jpg","comment_is_top":false,"comment_ctime":1562863560,"is_pvip":false,"replies":[{"id":"41107","content":"不是，可以多个topic","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562891479,"ip_address":"","comment_id":112999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10152798152","product_id":100029201,"comment_content":"事务也是只针对同一个topic么","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458006,"discussion_content":"不是，可以多个topic","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562891479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110177,"user_name":"nightmare","can_delete":false,"product_type":"c1","uid":1056314,"ip_address":"","ucode":"EF2E51C2122A86","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/3a/5b21c01c.jpg","comment_is_top":false,"comment_ctime":1562204154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152138746","product_id":100029201,"comment_content":"实现上可以用kafka的幂等性来保证单分区单会话的精准一次语义，如果是一批消息，可以路由到同一个分区","like_count":2},{"had_liked":false,"id":297182,"user_name":"非洲黑猴子","can_delete":false,"product_type":"c1","uid":2639724,"ip_address":"","ucode":"F5FEAC07D562E0","user_header":"https://static001.geekbang.org/account/avatar/00/28/47/6c/78184d19.jpg","comment_is_top":false,"comment_ctime":1623354836,"is_pvip":true,"replies":[{"id":"108492","content":"其实这点开销还好了。毕竟即使没有幂等，broker也要做一些校验","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1624497691,"ip_address":"","comment_id":297182,"utype":1}],"discussion_count":1,"race_medal":5,"score":"5918322132","product_id":100029201,"comment_content":"胡老师您好，上面说到Broker多保存一些字段可以做到幂等，那如果消息被压缩了，要校验这些字段不得解压吗？这样效率岂不是会很低？是不是压缩和幂等不太能互相兼容啊？谢谢🙏","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521751,"discussion_content":"其实这点开销还好了。毕竟即使没有幂等，broker也要做一些校验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624497691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291759,"user_name":"包子","can_delete":false,"product_type":"c1","uid":1503408,"ip_address":"","ucode":"3050ADC0DC827A","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/b0/f6a218c6.jpg","comment_is_top":false,"comment_ctime":1620467096,"is_pvip":false,"replies":[{"id":"105691","content":"会多几轮RPC请求开销","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1620613448,"ip_address":"","comment_id":291759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5915434392","product_id":100029201,"comment_content":"能不能讲讲开启idempotence的开销？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519562,"discussion_content":"会多几轮RPC请求开销","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620613448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284987,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1616571426,"is_pvip":false,"replies":[{"id":"103531","content":"嗯嗯，没法保证。实际上，我不相信现在有任何一款流式处理框架能100%的实现正确性","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1616721486,"ip_address":"","comment_id":284987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911538722","product_id":100029201,"comment_content":"每一节课真的都能收获到东西，kafka 11之前的就没办法保持精准一次语义了嘛？我理解到的事务是从关系型数据库来的，为了保证数据的完整正确，最经典的还是银行转账的案例。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517539,"discussion_content":"嗯嗯，没法保证。实际上，我不相信现在有任何一款流式处理框架能100%的实现正确性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616721486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265132,"user_name":"木子三金","can_delete":false,"product_type":"c1","uid":1105493,"ip_address":"","ucode":"F3C33B6A319373","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/55/e417238c.jpg","comment_is_top":false,"comment_ctime":1606788667,"is_pvip":false,"replies":[{"id":"96628","content":"1. 是的。幂等性是对单个producer的单次会话而言<br>2. 依然不能保证多个分区同时写入消息的事务型<br>3. 事务提供的一致性要高于幂等性","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1607077945,"ip_address":"","comment_id":265132,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901755963","product_id":100029201,"comment_content":"胡老师你好，关于精确一次的保证我这里有些疑问，请帮忙指教。<br><br>1、“其次，它只能实现单会话上的幂等性，不能实现跨会话的幂等性。这里的会话，你可以理解为 Producer 进程的一次运行。当你重启了 Producer 进程之后，这种幂等性保证就丧失了。”<br>是否说如果2个生产者发送同一个消息是无法幂等呢？<br><br>2、 我理解幂等是保证消息不重复，事务是保证“批量消息”原子性写入不丢失。因为kafka本身已经保证当broker响应peoducer已提交后消息不丢失，如果我没有批量写入需求，是否就单独通过幂等保证精确一次呢？<br><br>3、“那么你可能会问，如果我想实现多分区以及多会话上的消息无重复，应该怎么做呢？答案就是事务（transaction）或者依赖事务型 Producer。这也是幂等性 Producer 和事务型 Producer 的最大区别！”这句话的意思是说事务本身已经保证了事务内所有消息的幂等性了么？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510815,"discussion_content":"1. 是的。幂等性是对单个producer的单次会话而言\n2. 依然不能保证多个分区同时写入消息的事务型\n3. 事务提供的一致性要高于幂等性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607077945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264936,"user_name":"风","can_delete":false,"product_type":"c1","uid":1147929,"ip_address":"","ucode":"AFDBEFA49F269E","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/19/7ed2ffa6.jpg","comment_is_top":false,"comment_ctime":1606712464,"is_pvip":true,"replies":[{"id":"96631","content":"由一些参数共同作用，比如batch.size， linger.ms等","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1607078115,"ip_address":"","comment_id":264936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901679760","product_id":100029201,"comment_content":"老师,我看kafka消息发送都是攒一批分批发送的,请问这个是怎么控制什么时候发送给broker的？因为是走这种机制,是不是可能存在生产者后台线程一致轮询消息的发送状态","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510746,"discussion_content":"由一些参数共同作用，比如batch.size， linger.ms等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607078115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259434,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1604726105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899693401","product_id":100029201,"comment_content":"rmq原理:生产者向broker发送消息，这个是消息也会存在磁盘，这个跟kafka一样不会回滚磁盘上数据，只不过消息有个状态为half committed。再执行本地事务成功后，进行commit，执行失败进行rollback。对于半消息状态消息，消费者是不能拉取无法消费。broker有后台线程去轮询所有半消息状态消息，并去询问是否提交还是回滚。原理大概差不多，都是通过两阶段提交去保证事务消息。","like_count":1},{"had_liked":false,"id":259432,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1604725758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899693054","product_id":100029201,"comment_content":"自己之前主要用的是Rocketmq简称rmq，现在新公司用kafka，rmq没有幂等生产者但是是4.0后新版本是支持事务。rmq事务原理大概是","like_count":1},{"had_liked":false,"id":218341,"user_name":"扬一场远远的风","can_delete":false,"product_type":"c1","uid":1357801,"ip_address":"","ucode":"AB47E3D2EAB8A8","user_header":"https://static001.geekbang.org/account/avatar/00/14/b7/e9/5400cdf3.jpg","comment_is_top":false,"comment_ctime":1589784285,"is_pvip":false,"replies":[{"id":"80803","content":"&quot;后发送的消息时间戳小于先发送消息的时间戳&quot;  --- 可能的影响就是时间索引可能会有一些混乱，至少这条消息不会被写入到时间索引中。<br><br>设计成&lt;时间戳，文件物理位置&gt;更加灵活些。因为确实有些场景下需要根据时间戳查找位移值","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589850745,"ip_address":"","comment_id":218341,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884751581","product_id":100029201,"comment_content":"您好。Kafka是使用appen 追加写消息数据，如果在生产消息时自己指定时间戳，且存在后发送的消息时间戳小于先发送消息的时间戳，这时会有什么影响？另外再问一下，.timeindex文件为什么不设计成（时间戳，文件物理位置）[与位移索引文件一样（相对位移，文件物理位置）]？我理解，如果这样设计，根据时间查询数据应该会更快，相当于直接使用位移定位数据。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495438,"discussion_content":"&amp;quot;后发送的消息时间戳小于先发送消息的时间戳&amp;quot;  --- 可能的影响就是时间索引可能会有一些混乱，至少这条消息不会被写入到时间索引中。\n\n设计成&amp;lt;时间戳，文件物理位置&amp;gt;更加灵活些。因为确实有些场景下需要根据时间戳查找位移值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589850745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218034,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1589700039,"is_pvip":false,"replies":[{"id":"80710","content":"超时，分区leader变更等","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589769094,"ip_address":"","comment_id":218034,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884667335","product_id":100029201,"comment_content":"请问老师,<br>事务生产者:<br>要么全部成功,要么失败;<br>除了程序抛出异常外导致失败回滚,<br>还有,比如ack收不到也会导致回滚吗,<br>还有其他失败导致回滚的例子吗.","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495329,"discussion_content":"超时，分区leader变更等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589769094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201457,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1585790633,"is_pvip":false,"replies":[{"id":"75357","content":"嗯嗯，EOS以后应该是趋势","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1585791457,"ip_address":"","comment_id":201457,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5880757929","product_id":100029201,"comment_content":"非常喜欢精确一次（exactly once）：消息不会丢失，也不会被重复发送。有点类似于：Flink的对流消费机制（exactly once）  但使用有限制就是当前会议和不能跨分区。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490340,"discussion_content":"嗯嗯，EOS以后应该是趋势","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585791457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201152,"user_name":"幸运草","can_delete":false,"product_type":"c1","uid":1622282,"ip_address":"","ucode":"ACDF6C4E573FDB","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/0a/a44e3786.jpg","comment_is_top":false,"comment_ctime":1585723953,"is_pvip":false,"replies":[{"id":"75360","content":"你需要设置consumer的隔离级别","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1585791926,"ip_address":"","comment_id":201152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880691249","product_id":100029201,"comment_content":"producer事务，消息失败了不回滚么，消费者为啥还能看到呢？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490255,"discussion_content":"你需要设置consumer的隔离级别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585791926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182395,"user_name":"狼暴暴","can_delete":false,"product_type":"c1","uid":1401191,"ip_address":"","ucode":"B7B4DE5C532A76","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/67/c4ceb86f.jpg","comment_is_top":false,"comment_ctime":1582780875,"is_pvip":false,"replies":[{"id":"70664","content":"只能依赖业务逻辑自己实现，依靠Kafka无法实现","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1582851409,"ip_address":"","comment_id":182395,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5877748171","product_id":100029201,"comment_content":"在0.11之前，如何保证精确一次呢？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485327,"discussion_content":"只能依赖业务逻辑自己实现，依靠Kafka无法实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582851409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401191,"avatar":"https://static001.geekbang.org/account/avatar/00/15/61/67/c4ceb86f.jpg","nickname":"狼暴暴","note":"","ucode":"B7B4DE5C532A76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189074,"discussion_content":"比如 在消费者端 新读取的消息与redis里存储的历史消息做对比进行去重？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582851620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170305,"user_name":"小马","can_delete":false,"product_type":"c1","uid":1490686,"ip_address":"","ucode":"92B7ECD23BDCB5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXW5rycAcrNTwgOvib8poPXO0zvIekIPzBZJfsnciaLPIw9Q1t3rsXeH6DR24QndpYQibvibhR1tKHPw/132","comment_is_top":false,"comment_ctime":1578564304,"is_pvip":false,"replies":[{"id":"66074","content":"并非所有场景都有消息不重复的强一致性需求。很多实际场景中at least once处理语义已经足够了。况且启用幂等producer也不是没有开销的。我想主要是这两个原因吧","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1578618948,"ip_address":"","comment_id":170305,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5873531600","product_id":100029201,"comment_content":"老师请教下，既然精确一次是我们所追求的模板，而幂等性Producer是能够实现单分区的消息不重复的，那么官方为什么不把它作为默认的方式呢？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480932,"discussion_content":"并非所有场景都有消息不重复的强一致性需求。很多实际场景中at least once处理语义已经足够了。况且启用幂等producer也不是没有开销的。我想主要是这两个原因吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578618948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398013,"discussion_content":"幂等性的api函数签名KafkaProducer都加了synchronized 那么对于多线程producer性能可想而知 吞吐量必然是无法保证的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632715022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146343,"user_name":"京京beaver","can_delete":false,"product_type":"c1","uid":1179056,"ip_address":"","ucode":"C21838D7CA7D6B","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","comment_is_top":false,"comment_ctime":1572503060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867470356","product_id":100029201,"comment_content":"我觉得精确实现exact once的消息语义，需要从业务层面去处理。每条消息有唯一业务id，kafka保证至少一次的投递，也就是：1. producer重试直到发送成功，broker回ack。2. consumer处理每条消息，对业务id需要落盘，查重复避免重复处理。consumer处理成功后，才通知kafka ack，并落盘业务id。3.为了提高并发量，一个consumer group的每个consumer开线程池，提高并发处理的性能。4.缺点是无法保证顺序性，如果要保证顺序性每个consumer就不能开线程池了。","like_count":1},{"had_liked":false,"id":140146,"user_name":"小飞","can_delete":false,"product_type":"c1","uid":1000347,"ip_address":"","ucode":"4C126548FBA94C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","comment_is_top":false,"comment_ctime":1570840561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865807857","product_id":100029201,"comment_content":"0.11.0 之后修改了消息格式，引入v2 格式，增加幂等和事务特性。对kafka来说是个里程碑。<br>结合Flink 1.7 引入的2PC Sink.  flink+kafka 完美实现端到端的EOS （exactly once ），非常有意义， 绝对是大规模生产的最佳实践！","like_count":1},{"had_liked":false,"id":135559,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1569212107,"is_pvip":false,"replies":[{"id":"51990","content":"不是因为有什么好处，是因为broker端无法单独做出判断。另外写入之后无法直接丢弃，只能依靠其他字段实现跳过该消息","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1569230223,"ip_address":"","comment_id":135559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864179403","product_id":100029201,"comment_content":"感谢老师的分享，对于kafka的事务Producer写入数据有点疑问，希望老师能帮忙解答一下，问题是：<br>在kafka中，事务型的producer对于数据写入失败，为什么还要将对应的数据日志写入，这么做的好处是什么？数据写入失败后为什么不直接丢弃掉？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468245,"discussion_content":"不是因为有什么好处，是因为broker端无法单独做出判断。另外写入之后无法直接丢弃，只能依靠其他字段实现跳过该消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569230223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124096,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1565825964,"is_pvip":false,"replies":[{"id":"45638","content":"1. 不会的<br>2. 没错，就是类似于2PC的机制，也有对应的事务Coordinator<br>3. 简单来说就是broker端多保存一些东西来判断消息是否已经写入过了<br>4. 有些消息属于不同流程，产生时机不同，而且是有因果关系的，不一定能合并","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1565876400,"ip_address":"","comment_id":124096,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860793260","product_id":100029201,"comment_content":"老师好，我有以下几个疑问<br>1：只发一条消息，kafka会默认加上事务的控制嘛？<br><br>2：消息的事务实现是怎么样的？和数据库类似也是采用的两阶段提交吗？如果是，那具体实现上有什么异同？<br><br>3：Kafka 自动帮你做消息的重复去重。底层具体的原理很简单，就是经典的用空间去换时间的优化思路，即在 Broker 端多保存一些字段。当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了，于是可以在后台默默地把它们“丢弃”掉。当然，实际的实现原理并没有这么简单，但你大致可以这么理解。<br>读完这段描述，感觉对于kafka怎么实现消息的幂等性还是不太理解，能在具体描述一下吗？<br><br>4：使用消息事务的场景，想必消息之间应该存在一定的依赖关系，也许和顺序也有关系，如果是这样，将消息合并发送岂不是更好？我们实际工作中目前未曾用到过这种方式，请问老师这是什么情况下会这么使用？<br><br>切记，天下没有免费的午餐。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463009,"discussion_content":"1. 不会的\n2. 没错，就是类似于2PC的机制，也有对应的事务Coordinator\n3. 简单来说就是broker端多保存一些东西来判断消息是否已经写入过了\n4. 有些消息属于不同流程，产生时机不同，而且是有因果关系的，不一定能合并","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565876400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5034,"discussion_content":"多谢老师的解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565882016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123094,"user_name":"寻海却不见水","can_delete":false,"product_type":"c1","uid":1226723,"ip_address":"","ucode":"B62C9BB757F515","user_header":"https://static001.geekbang.org/account/avatar/00/12/b7/e3/76ebcc41.jpg","comment_is_top":false,"comment_ctime":1565604157,"is_pvip":false,"replies":[{"id":"45231","content":"broker端会去掉重复的消息","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1565617046,"ip_address":"","comment_id":123094,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860571453","product_id":100029201,"comment_content":"老师，请教一个问题。如果恢复的时候，生产者再次产生的消息，跟上次失败的时候的消息一样。那么新产生的数据也会被“过滤”掉吗？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462536,"discussion_content":"broker端会去掉重复的消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565617046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121301,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1565096154,"is_pvip":false,"replies":[{"id":"44618","content":"消息不算发送成功","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1565138513,"ip_address":"","comment_id":121301,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860063450","product_id":100029201,"comment_content":"老师想问下kafka事务消息，如果开启了事务，发送了几条消息，之后生产者服务挂了，没有提交事务也没有回滚事务，那么这些消息是算没发成功吗？还有办法重启服务后回查或者弥补消息吗？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461730,"discussion_content":"消息不算发送成功","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565138513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119139,"user_name":"wmg","can_delete":false,"product_type":"c1","uid":1070036,"ip_address":"","ucode":"BA4CED171B59E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/d4/2ed767ea.jpg","comment_is_top":false,"comment_ctime":1564530897,"is_pvip":false,"replies":[{"id":"43679","content":"不支持","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1564534757,"ip_address":"","comment_id":119139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859498193","product_id":100029201,"comment_content":"老师，事物支持多个producer吗？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460757,"discussion_content":"不支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564534757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118089,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1564236263,"is_pvip":false,"replies":[{"id":"43359","content":"对于实现多个分区的原子性写入，幂等性producer就做不到","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1564361820,"ip_address":"","comment_id":118089,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859203559","product_id":100029201,"comment_content":"老师好，对这段话不太了解“首先，它只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性。” 其中，幂灯性producer无法实现对个分区的的幂等性能否举个具体的例子说明？谢谢老师","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460258,"discussion_content":"对于实现多个分区的原子性写入，幂等性producer就做不到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564361820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115165,"user_name":"野性力量","can_delete":false,"product_type":"c1","uid":1578718,"ip_address":"","ucode":"B6C152FA332B14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/diaGeaLuw3oTAcyFMnkiaVur33RXdUZL8z1LtfHibIyh4r629YSexJQz5JXYjBH7v9rwHH7ham5CzqDZF75QnGIwg/132","comment_is_top":false,"comment_ctime":1563502249,"is_pvip":false,"replies":[{"id":"42086","content":"如果是自己实现，不太容易，可以考虑使用Kafka Streams","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1563517138,"ip_address":"","comment_id":115165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858469545","product_id":100029201,"comment_content":"那么请问一般consumer有没有exactly only once这种语义的实现呢，也就是要实现消息消费和更新offset的事务性。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458995,"discussion_content":"如果是自己实现，不太容易，可以考虑使用Kafka Streams","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563517138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112454,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1562739001,"is_pvip":false,"replies":[{"id":"40981","content":"1. 如果想深入了解设计原理，参考https:&#47;&#47;www.cnblogs.com&#47;huxi2b&#47;p&#47;7717775.html<br>性能上的影响不好一概而论，最好结合测试来确定影响范围<br><br>2. 如果在业务上不好去重，可以考虑依赖幂等producer","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562804454,"ip_address":"","comment_id":112454,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5857706297","product_id":100029201,"comment_content":"幂等性 Producer，<br>1、只能保证单分区上的幂等性<br>2、只能实现单会话上的幂等性，不能实现跨会话的幂等性<br>3、重启了 Producer 进程之后，这种幂等性保证就丧失了<br>幂等性设置：props.put(“enable.idempotence”, ture)，或 props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG， true)。<br><br>问题：<br>1、kafka内部是怎样实现幂等性 Producer的呀？对性能有多大影响？<br>2、这种幂等性 Producer一般是什么场景会用到呀？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457739,"discussion_content":"1. 如果想深入了解设计原理，参考https://www.cnblogs.com/huxi2b/p/7717775.html\n性能上的影响不好一概而论，最好结合测试来确定影响范围\n\n2. 如果在业务上不好去重，可以考虑依赖幂等producer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562804454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3886,"discussion_content":"个人觉得，这种幂等性Producer无法达到事务保证级别，如果业务场景严格要求事务则无法保证，感觉这玩意太鸡肋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564925218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111732,"user_name":"莫道不销魂","can_delete":false,"product_type":"c1","uid":1225659,"ip_address":"","ucode":"62EC6258F04759","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/bb/7789fc32.jpg","comment_is_top":false,"comment_ctime":1562591256,"is_pvip":false,"replies":[{"id":"40692","content":"如果涉及多个分区的原子写入，幂等producer就无法实现了，只能依靠事务","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562636319,"ip_address":"","comment_id":111732,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5857558552","product_id":100029201,"comment_content":"老师我对今天的内容还是有些不理解，希望老师帮我解答下<br>1、幂等性是通过pid+seq来实现的，我看一些讲解说seq是针对分区级别的，假如目前topic 有两个分区 B和C，这时候我对该topic连续发送两条消息（轮询方式），那么B和C的seq是连续的还是相互独立的，即B-seq=1,C-seq=1 还是B-seq=1,C-seq=2<br><br>2、如果消息发送失败，在进行retry的时候 还是会向同一个分区发送吗？还是选择新的分区<br>3、看老师你发的事务代码，同时发两条消息，如果设置了幂等性理论上这两条消息应该在两个分区都能实现exactly once才对啊 ，都有自动重发的机制了为什么还要开启事务，是因为在会重试超过次数就放弃重试吗","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457430,"discussion_content":"如果涉及多个分区的原子写入，幂等producer就无法实现了，只能依靠事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562636319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046172,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f6/9c/b457a937.jpg","nickname":"不能扮演天使","note":"","ucode":"9922330BFF7FFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6621,"discussion_content":"我觉得是因为消息在所有分区中是唯一的，幂等是保证单分区唯一，而事务才能保证全分区唯一","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567000085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110883,"user_name":"无菇朋友","can_delete":false,"product_type":"c1","uid":1035562,"ip_address":"","ucode":"80482C5F0464A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/2a/bdbed6ed.jpg","comment_is_top":false,"comment_ctime":1562383590,"is_pvip":false,"replies":[{"id":"40513","content":"多个分区的原子性写操作单靠broker或分布式系统节点进程自己参与是无法达成的。想想2PC中的Coordinator角色。必须引入类似于这种第三方的Coordinator居中协调才能完成这种分布式事务——当然我说的是现有的研究成果，不排除未来有天才实现了这种机制。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562547105,"ip_address":"","comment_id":110883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857350886","product_id":100029201,"comment_content":"胡老师，为啥幂等producer只能保证单个分区没有重复消息，是因为单个分区对应的broker保存了一些必要字段做判断是么？","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457109,"discussion_content":"多个分区的原子性写操作单靠broker或分布式系统节点进程自己参与是无法达成的。想想2PC中的Coordinator角色。必须引入类似于这种第三方的Coordinator居中协调才能完成这种分布式事务——当然我说的是现有的研究成果，不排除未来有天才实现了这种机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562547105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110330,"user_name":"October","can_delete":false,"product_type":"c1","uid":1137879,"ip_address":"","ucode":"CEDA78F4A5F8B1","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/d7/e4673fde.jpg","comment_is_top":false,"comment_ctime":1562231105,"is_pvip":false,"replies":[{"id":"40153","content":"“也就是说同一条消息可能出现在不同的分区上” --- 不可能。。。。。。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562287280,"ip_address":"","comment_id":110330,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5857198401","product_id":100029201,"comment_content":"一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，也就是说同一条消息可能出现在不同的分区上，可是producer端没有收到broker的ack，就会重试，重试应该能保证同一条消息分区是不会改变的，为什么这条消息会出现在其他分区呢。","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456821,"discussion_content":"“也就是说同一条消息可能出现在不同的分区上” --- 不可能。。。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562287280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","nickname":"胡小禾","note":"","ucode":"1C23B7492C0C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264398,"discussion_content":"也就是说同一条消息可能出现在不同的分区上” --- 不可能。。。。。。\n\n\n老师的意思岂不是： 实际意义上，即使看所有分区，也就只有这一条消息 ？\n那本质上 幂等生产者实现的应该是  多分区、单会话 上的“exactly once”?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589302940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3885,"discussion_content":"重启会导致分区选择不一定还是原来的分区吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564925018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130646,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/96/1e8697ec.jpg","nickname":"Garfield","note":"","ucode":"2865B698A88421","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1486,"discussion_content":"据我了解，可能的，如果消息的key 指定，同一条消息会发送到同一分区。老师这对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562657835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110151,"user_name":"谦寻","can_delete":false,"product_type":"c1","uid":1033639,"ip_address":"","ucode":"07160FAFAD08F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/a7/e32dcfe7.jpg","comment_is_top":false,"comment_ctime":1562202066,"is_pvip":false,"replies":[{"id":"39928","content":"之前写过一个方法：https:&#47;&#47;www.cnblogs.com&#47;huxi2b&#47;p&#47;10638008.html","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562204778,"ip_address":"","comment_id":110151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857169362","product_id":100029201,"comment_content":"老师，请教最近遇到的一个问题，如何查询某个topic 有哪些消费的group","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456747,"discussion_content":"之前写过一个方法：https://www.cnblogs.com/huxi2b/p/10638008.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562204778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110127,"user_name":"墙角儿的花","can_delete":false,"product_type":"c1","uid":1258474,"ip_address":"","ucode":"EE5CAD76175CCF","user_header":"","comment_is_top":false,"comment_ctime":1562199467,"is_pvip":false,"replies":[{"id":"39898","content":"其实我还觉得挺实用的呢，毕竟能保证单个分区上的无重复性:)","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562201475,"ip_address":"","comment_id":110127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857166763","product_id":100029201,"comment_content":"幂等性producer好像不太实用，还不如业务自己幂等性","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456733,"discussion_content":"其实我还觉得挺实用的呢，毕竟能保证单个分区上的无重复性:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562201475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354988,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1829834,"ip_address":"广东","ucode":"83311F4944AB44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4mGSZxzsBmU1ib6INyvxWKY3rafl1xT9B6rdggF5RY35jzDKIg9U7YVIoLdlLNHUeEqxhTNbKibNIXs9IOrerM3A/132","comment_is_top":false,"comment_ctime":1660959505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660959505","product_id":100029201,"comment_content":"这一章讲得不太清楚，包括如何幂等、事务如何实现，以及怎么保证了精确一次。","like_count":0},{"had_liked":false,"id":350182,"user_name":"RickyTheGeek","can_delete":false,"product_type":"c1","uid":1606295,"ip_address":"","ucode":"806E4334A8E093","user_header":"https://static001.geekbang.org/account/avatar/00/18/82/97/04d1d538.jpg","comment_is_top":false,"comment_ctime":1656640748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656640748","product_id":100029201,"comment_content":"关于事务如何解决幂等性的问题，我的理解是: 使用事务主要是为了解决Producer端幂等性配置的两个问题，1. 仅在分区级别保证幂等 2. Producer进程重启以后不保证幂等。第一个问题，通过在一个事务中提交多条记录，通过事务的原子性来保证每个send操作都只操作一次，或全部都不操作。第二个问题也是通过事务原子性来保证，因为在一个事务中的操作，不是全部成功，就是全部失败，不存在不一致的情况。","like_count":0},{"had_liked":false,"id":346110,"user_name":"月明风清","can_delete":false,"product_type":"c1","uid":2226367,"ip_address":"","ucode":"65A97CF2E320FA","user_header":"https://static001.geekbang.org/account/avatar/00/21/f8/bf/59f2e600.jpg","comment_is_top":false,"comment_ctime":1652843967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652843967","product_id":100029201,"comment_content":"“多分区以及多会话的消息重复”是什么意思，怎么样才算多分区的消息重复呢？","like_count":0},{"had_liked":false,"id":329996,"user_name":"福","can_delete":false,"product_type":"c1","uid":2455712,"ip_address":"","ucode":"F2FC7AF5D433C6","user_header":"https://static001.geekbang.org/account/avatar/00/25/78/a0/7a248ddc.jpg","comment_is_top":false,"comment_ctime":1641718716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641718716","product_id":100029201,"comment_content":"问下老师，实际生成环境下，使用生产者幂等的情况多不多","like_count":0},{"had_liked":false,"id":325068,"user_name":"Insomnia","can_delete":false,"product_type":"c1","uid":1751214,"ip_address":"","ucode":"5986A48988D6E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/ae/085484e7.jpg","comment_is_top":false,"comment_ctime":1638795120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638795120","product_id":100029201,"comment_content":"老师，有个问题请教，一般发送消息到kafka, 都是流式的消息，在每个事务中不可能无限的等待消息，然后发送，那么如果每次都发送一个固定的batch的消息，是不是每个batch都需要开一个事务","like_count":0},{"had_liked":false,"id":323480,"user_name":"Joey","can_delete":false,"product_type":"c1","uid":2415368,"ip_address":"","ucode":"6856FA3A28B32C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DLcTlSKOQlrhRq1hzBNvnWfENsyFrxNnhJ5UPibPMLazy9c2nBlSd1sxHqzHaOTTaZIYkEDAby3HpdianMxt6Dsw/132","comment_is_top":false,"comment_ctime":1637922592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637922592","product_id":100029201,"comment_content":"flink-kafka-producer，用到了两次提交","like_count":0},{"had_liked":false,"id":318617,"user_name":"阿May的海绵宝宝","can_delete":false,"product_type":"c1","uid":1203058,"ip_address":"","ucode":"AA2B28DF8BEF80","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/72/4f8a4297.jpg","comment_is_top":false,"comment_ctime":1635349856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635349856","product_id":100029201,"comment_content":"请教老师一个问题，如果开启幂等，一个producer发送给同一个topic同一个partition 5个请求顺序是1，2，3，4，5。因为网络瞬时抖动导致1不能应答，1会重试。那么在1重试的过程中，后续的请求2，3，4，5会在broker中保存下来吗？","like_count":0},{"had_liked":false,"id":312739,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1631958058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631958058","product_id":100029201,"comment_content":"我觉得设计到这种金额这些东西，尽量要保持数据精准一次，不能丢失不能重复，就需要我们去进行开启事务。","like_count":0},{"had_liked":false,"id":308668,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1515145,"ip_address":"","ucode":"0EF2D58B46D7C3","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/89/25b12054.jpg","comment_is_top":false,"comment_ctime":1629726832,"is_pvip":false,"replies":[{"id":"112530","content":"不能。多个分区上的原子写入靠事务机制来保证。那么多个topic的原子写入就更是这样了","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1630810418,"ip_address":"","comment_id":308668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629726832","product_id":100029201,"comment_content":"请问老师，事务性生产者对写入多个topic是否生效呢？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525580,"discussion_content":"不能。多个分区上的原子写入靠事务机制来保证。那么多个topic的原子写入就更是这样了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630810418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308147,"user_name":"Liujun","can_delete":false,"product_type":"c1","uid":1736462,"ip_address":"","ucode":"3DB1F3CA57B5B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","comment_is_top":false,"comment_ctime":1629429254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629429254","product_id":100029201,"comment_content":"幂等性这个功能看看就行，真拿来实际使用那就搞笑了，事务性还是非常有用的，比如说下单操作，A 服务完成了订单号的生成，接着发送一个消息给 B 服务去扣减库存，假如不适用事务性消息的话，发送给 B 服务的消息，由于网络抖动 broker 存储了高消息，但是回复消息丢失了，那么 A 服务收到消息发送失败的结果，此时本地事务回滚了订单号的生成，那么灾难出现了，B 服务消费到消息，扣减了库存。这才是事务消息的使用场景，事务消息和幂等性放在一块讲多少有点不专业啊，你见过有人会问数据库事务是否已经先保证了幂等的了吗这样的问题的吗？","like_count":0},{"had_liked":false,"id":307761,"user_name":"银子","can_delete":false,"product_type":"c1","uid":1125765,"ip_address":"","ucode":"5233F5FB5D2755","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/85/55f19976.jpg","comment_is_top":false,"comment_ctime":1629249009,"is_pvip":true,"replies":[{"id":"112532","content":"事务机制要涵盖idempotent producer，但还有自己的设计机制来保证这个不会重复","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1630810572,"ip_address":"","comment_id":307761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629249009","product_id":100029201,"comment_content":"“事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。”<br>这句话没有理解，producer为什么不惧畏进程重启，如果事物提交了，但是还没等kafka返回成功的消息（消息保存成功），在这时重启进程，再次发送未返回成功的消息，broker不会保存两份消息么？ 因为enable.idempotent只能保证单个会话有效呀？<br><br>老师，有时间的话，麻烦您解答一下","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525276,"discussion_content":"事务机制要涵盖idempotent producer，但还有自己的设计机制来保证这个不会重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630810572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306248,"user_name":"受超凡","can_delete":false,"product_type":"c1","uid":2678558,"ip_address":"","ucode":"A2A160D483BBB0","user_header":"","comment_is_top":false,"comment_ctime":1628471811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628471811","product_id":100029201,"comment_content":"开启幂等性和事务会有什么副作用？","like_count":0},{"had_liked":false,"id":304796,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1627620246,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1627620246","product_id":100029201,"comment_content":"学习了，很有用","like_count":0},{"had_liked":false,"id":302286,"user_name":"wang-possible","can_delete":false,"product_type":"c1","uid":1268939,"ip_address":"","ucode":"5639E96CD4F833","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/cb/65b38e27.jpg","comment_is_top":false,"comment_ctime":1626156461,"is_pvip":false,"replies":[{"id":"109451","content":"没有太理解这里的步长的含义，能说的具体点吗","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1626241879,"ip_address":"","comment_id":302286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626156461","product_id":100029201,"comment_content":"老师，在工作中，发现使用事务类型的producer，发现消息的 offset 不连续的情况。即步长为 2增长，默认步长为1，我在 producerRecorder 哪里没有没设置 key，只有value，老师帮忙分析一下","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523249,"discussion_content":"没有太理解这里的步长的含义，能说的具体点吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626241879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297584,"user_name":"Geek8815","can_delete":false,"product_type":"c1","uid":2028944,"ip_address":"","ucode":"D5102AFFA20E7E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/90/2caa07d0.jpg","comment_is_top":false,"comment_ctime":1623654647,"is_pvip":false,"replies":[{"id":"108491","content":"幂等是针对分区这个级别而言。分区下面的副本你不需要考虑","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1624497666,"ip_address":"","comment_id":297584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623654647","product_id":100029201,"comment_content":"老师您好，我是初学kafka也没有实际用过，我想问问幂等producer实现这个单分区单会话幂等性，我们分区会有多个副本，此时其他副本的幂等性是无法保证的是吗？<br>然后就是事务性producer就能够做到其他副本的幂等吗","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521866,"discussion_content":"幂等是针对分区这个级别而言。分区下面的副本你不需要考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624497666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286099,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1617155914,"is_pvip":true,"replies":[{"id":"104156","content":"首先，我们无法干预。其次，producer端的是强一致性的，consumer端其实并不是的。最后，对性能是有损耗的","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1617670733,"ip_address":"","comment_id":286099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617155914","product_id":100029201,"comment_content":"请问老师，这里的事务是指的强一致性吗？那样是怎么保证事务的强一致性的？对效率是不是有非常大的影响，比如长时间阻塞集群？  使用的是什么一致性算法？raft还是quorum NWR算法。我们可以相应的一致性匹配进行调控吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517868,"discussion_content":"首先，我们无法干预。其次，producer端的是强一致性的，consumer端其实并不是的。最后，对性能是有损耗的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617670733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285564,"user_name":"lucas","can_delete":false,"product_type":"c1","uid":1564695,"ip_address":"","ucode":"B2973251F63A15","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3lJFX3XBF3C0qriazEcv7rPsdJZCwz0bkmP5M37pa1IJr7G5LNQevXLFBzPpOZLzNZnybN0bNPhg/132","comment_is_top":false,"comment_ctime":1616900266,"is_pvip":false,"replies":[{"id":"103774","content":"应该是版本不匹配导致的。最好去Flink官网去看看它支持什么Kafka版本","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1617067544,"ip_address":"","comment_id":285564,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1616900266","product_id":100029201,"comment_content":"老师好，我这边使用flink1.12.1写kafka2.3.0 报错，每次都是运行几个小时或者十几个小时之后报错，请教一下，大概是什么问题？  报错信息如下：<br>Transiting to fatal error state due to org.apache.kafka.common.errors.InvalidPidMappingException: The producer attempted to use a producer id which is not currently assigned to its transactional id.<br>Transiting to fatal error state due to org.apache.kafka.common.errors.UnsupportedVersionException: Attempted to write a non-default producerId at version 1<br>Transiting to fatal error state due to org.apache.kafka.common.KafkaException: The producer closed forcefully","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517711,"discussion_content":"应该是版本不匹配导致的。最好去Flink官网去看看它支持什么Kafka版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617067544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564695,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3lJFX3XBF3C0qriazEcv7rPsdJZCwz0bkmP5M37pa1IJr7G5LNQevXLFBzPpOZLzNZnybN0bNPhg/132","nickname":"lucas","note":"","ucode":"B2973251F63A15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537589,"discussion_content":"老师，请教一个问题\n2021-12-09 20:43:46,031 WARN  org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumerBase [] - Consumer subtask 5 failed async Kafka commit.\norg.apache.kafka.clients.consumer.RetriableCommitFailedException: Offset commit failed with a retriable exception. You should retry committing the latest consumed offsets.\nCaused by: org.apache.kafka.common.errors.CoordinatorNotAvailableException: The coordinator is not available.\n\n这个是什么问题  我发现fkink消费kafka，某些分区突然提交不上去offset了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639108501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281848,"user_name":"归零","can_delete":false,"product_type":"c1","uid":1103208,"ip_address":"","ucode":"C99B8E93009A46","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/68/2201b6b9.jpg","comment_is_top":false,"comment_ctime":1614924041,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614924041","product_id":100029201,"comment_content":"幂等设置补充官网的说明，需要几个参数配合使用。如下：When set to &#39;true&#39;, the producer will ensure that exactly one copy of each message is written in the stream. If &#39;false&#39;, producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5, retries to be greater than 0 and acks must be &#39;all&#39;. If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a ConfigException will be thrown.","like_count":0},{"had_liked":false,"id":269503,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1608687639,"is_pvip":false,"replies":[{"id":"97804","content":"幂等性作用于单分区上的，不能跨分区。跨分区的原子性由事务来保证。","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1608772959,"ip_address":"","comment_id":269503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608687639","product_id":100029201,"comment_content":"请教老师一个问题<br>实在想不出跨分区幂等性有什么应用场景，重试也只会发送到同一个分区，同样的一条消息也只会存在于一个分区，无论重试多少次都不会出现重复的情况，难道说同一条消息可能发送到同一个主题多个分区？？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512300,"discussion_content":"幂等性作用于单分区上的，不能跨分区。跨分区的原子性由事务来保证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608772959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263481,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1606141644,"is_pvip":false,"replies":[{"id":"95610","content":"不行的。它不能保证异质系统间的原子性<br>","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1606178692,"ip_address":"","comment_id":263481,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606141644","product_id":100029201,"comment_content":"kafka的事务能用来保证发消息和写DB的原子性吗？类似rocketmq的事务消息","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510211,"discussion_content":"不行的。它不能保证异质系统间的原子性\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606178692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","nickname":"妥协","note":"","ucode":"7201DFE9C12669","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328585,"discussion_content":"老师能详细解释下吗？因为kafka事物不是也基于两阶段提交吗？我看实例代码中，也是begin transaction和commit transaction，只要在这个中间加入本地事务处理，根据本地事务处理结果确定是提交还是回滚kafka事务消息，不可以吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606184196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246490,"user_name":"hangqi","can_delete":false,"product_type":"c1","uid":1130733,"ip_address":"","ucode":"D17C7AC44262EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/ed/b8b7ec16.jpg","comment_is_top":false,"comment_ctime":1599376406,"is_pvip":false,"replies":[{"id":"90625","content":"可以保证单个producer写入的消息不重复。这个满足你的需求吗？","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1599443453,"ip_address":"","comment_id":246490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599376406","product_id":100029201,"comment_content":"老师，我现在有一个需求，多个producer向一个topic中写消息，怎样保证消息不重复，使用事务型producer可以保证吗？？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505157,"discussion_content":"可以保证单个producer写入的消息不重复。这个满足你的需求吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599443453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243334,"user_name":"单朋荣","can_delete":false,"product_type":"c1","uid":1272662,"ip_address":"","ucode":"8AD121BEDD9675","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/56/37a4cea7.jpg","comment_is_top":false,"comment_ctime":1598063522,"is_pvip":false,"replies":[{"id":"89766","content":"1. 是一个事务中的所有写入都是原子性的，不一定就是一个topic下的<br>2. EOS确实主要用于重复性的问题","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1598232833,"ip_address":"","comment_id":243334,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598063522","product_id":100029201,"comment_content":"胡老师，重复写的原因大概有哪些啊？<br>我想到的场景有: callback没回应但已成功写入的场景，会再写一次；生产者端消息重复生产，即使幂等处理，在不同分区也可能出现重复情况等场景。用幂等处理挺好的，可惜只是单分区&#47;会话。。事务producer，是不是一个topic下所有分区的写入是否成功当作一个整体的判断？？<br>问题二：“Consumer只能看到事务成功后提交的消息”？<br>这个“成功提交”是不是为了避免出现“脏读”的情况，即正提交的消息被读取，若此时消息写入失败，当再次写入时，就会出现重复读？？<br>所以，精确一次语义处理，就是为了尽量解决读&#47;写重复性问题？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504259,"discussion_content":"1. 是一个事务中的所有写入都是原子性的，不一定就是一个topic下的\n2. EOS确实主要用于重复性的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598232833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239320,"user_name":"A_Tarnished","can_delete":false,"product_type":"c1","uid":1226034,"ip_address":"","ucode":"0125AB3B63F236","user_header":"https://static001.geekbang.org/account/avatar/00/12/b5/32/b9b4aefb.jpg","comment_is_top":false,"comment_ctime":1596503707,"is_pvip":false,"replies":[{"id":"88410","content":"source connector本质上是consumer，没有幂等。而且目前Kafka Connect不支持事务，详见https:&#47;&#47;issues.apache.org&#47;jira&#47;browse&#47;KAFKA-6080","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1596519108,"ip_address":"","comment_id":239320,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596503707","product_id":100029201,"comment_content":"source connector可以配置幂等和事务吗","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503061,"discussion_content":"source connector本质上是consumer，没有幂等。而且目前Kafka Connect不支持事务，详见https://issues.apache.org/jira/browse/KAFKA-6080","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596519108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226602,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1592148676,"is_pvip":false,"replies":[{"id":"83430","content":"不能保证。幂等producer保证的是单分区上的不重复","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1592182564,"ip_address":"","comment_id":226602,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1592148676","product_id":100029201,"comment_content":"老师问下，如果Producer设置的分区策略是以key为分区的，再采用幂等生产者，能够保证多分区的数据的唯一性吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498298,"discussion_content":"不能保证。幂等producer保证的是单分区上的不重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592182564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302056,"discussion_content":"分区数增加就有可能相同key发往不同分区了吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598774850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218020,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1589697641,"is_pvip":false,"replies":[{"id":"80711","content":"重复消息是指同一条消息被写入到broker端多次。一般不太好模拟~","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589769130,"ip_address":"","comment_id":218020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589697641","product_id":100029201,"comment_content":"请问老师,<br>重复消息是指多次发送相同数据的消息;<br>还是指网络问题导致,重试发送的相同数据.<br><br>还有想问下想证明幂等性是否有效,如何模拟重复数据发送呢.","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495325,"discussion_content":"重复消息是指同一条消息被写入到broker端多次。一般不太好模拟~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589769130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218011,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1589694932,"is_pvip":false,"replies":[{"id":"80804","content":"单分区单会话上的去重","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589850774,"ip_address":"","comment_id":218011,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589694932","product_id":100029201,"comment_content":"幂等生产者只能保证单分区不重复:<br>根据默认分区策略,无指定key值,将重复的数据多次发送到broker;假设有3个分区,那么还是有3个重复的数据;","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495322,"discussion_content":"单分区单会话上的去重","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589850774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1056982,"avatar":"https://static001.geekbang.org/account/avatar/00/10/20/d6/b9513db0.jpg","nickname":"kingcall","note":"","ucode":"508884DC684B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356445,"discussion_content":"重试会重新计算分区吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615600262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199319,"user_name":"Sruby","can_delete":false,"product_type":"c1","uid":1016232,"ip_address":"","ucode":"A7D1B93F41DA0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","comment_is_top":false,"comment_ctime":1585486687,"is_pvip":false,"replies":[{"id":"74841","content":"哪端其实都可以的：）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1585533751,"ip_address":"","comment_id":199319,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1585486687","product_id":100029201,"comment_content":"在消费者去重会不会更合适？不会影响到producer和broker的消息。","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489818,"discussion_content":"哪端其实都可以的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585533751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194897,"user_name":"一十六夜","can_delete":false,"product_type":"c1","uid":1606581,"ip_address":"","ucode":"41D4A6695B2A7B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","comment_is_top":false,"comment_ctime":1585117819,"is_pvip":false,"replies":[{"id":"74246","content":"“kafka没有过滤消息”  —— 这是指什么含义？启用幂等是为了避免重复提交相同的消息，不知道和您说的过滤是不是一回事？","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1585184044,"ip_address":"","comment_id":194897,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1585117819","product_id":100029201,"comment_content":"老师，咱们自己写代码可以测试幂等么，我是这么写的，但是发现kafka没有过滤消息<br>properties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,true);<br>try(KafkaProducer&lt;String, String&gt; kafkaProducer = new KafkaProducer&lt;String, String&gt;(properties);){<br>            for (int i = 1; i &lt;= 600; i++) {<br>kafkaProducer.send(new ProducerRecord&lt;String, String&gt;(&quot;topic&quot;, &quot;我的message&quot;));<br>}<br>请老师指点<br>","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488924,"discussion_content":"“kafka没有过滤消息”  —— 这是指什么含义？启用幂等是为了避免重复提交相同的消息，不知道和您说的过滤是不是一回事？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585184044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620239,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0f/648a4b3f.jpg","nickname":"配方","note":"","ucode":"C8C7214F0C195E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214187,"discussion_content":"kafka生产端只保证消息提交的幂等，不保证消息内容的幂等，你这600个消息对于kafka的生产端而言会分配600个不同的消息序列号，只有消息序列号相同的消息才会被定义为&#34;重复消息&#34;而不特指内容重复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585149890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1606581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","nickname":"一十六夜","note":"","ucode":"41D4A6695B2A7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1620239,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0f/648a4b3f.jpg","nickname":"配方","note":"","ucode":"C8C7214F0C195E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214548,"discussion_content":"明白了，我是想通过代码测试下幂等，那看来代码不应该这么写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585207148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214187,"ip_address":""},"score":214548,"extra":""},{"author":{"id":1620239,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0f/648a4b3f.jpg","nickname":"配方","note":"","ucode":"C8C7214F0C195E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1606581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","nickname":"一十六夜","note":"","ucode":"41D4A6695B2A7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215039,"discussion_content":"恩，你如果测试幂等，可以尝试从消息分配相同的序列号这个出发点开始，比如当生产者认为此条消息发送失败进行重新发送时，此时该消息的序列号会保持不变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585275174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214548,"ip_address":""},"score":215039,"extra":""},{"author":{"id":1606581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","nickname":"一十六夜","note":"","ucode":"41D4A6695B2A7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1620239,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0f/648a4b3f.jpg","nickname":"配方","note":"","ucode":"C8C7214F0C195E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221454,"discussion_content":"好的，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586010006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215039,"ip_address":""},"score":221454,"extra":""}]}]},{"had_liked":false,"id":182305,"user_name":"旗木卡卡","can_delete":false,"product_type":"c1","uid":1104407,"ip_address":"","ucode":"2C05BFE91D6892","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/17/69cca649.jpg","comment_is_top":false,"comment_ctime":1582766478,"is_pvip":false,"replies":[{"id":"70666","content":"虽说是瞬时抖动，但至少也要达到了请求超时的级别，否则再低级别的抖动TCP足以应付","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1582851547,"ip_address":"","comment_id":182305,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1582766478","product_id":100029201,"comment_content":"倘若消息成功“提交”，但 Broker 的应答没有成功发送回 Producer 端（比如网络出现瞬时抖动），那么 Producer 就无法确定消息是否真的提交成功了。<br>—— Producer和Broker不是通过可靠的TCP连接嘛，TCP提供了可靠性保障机制，怎么还会丢应答包呢？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485297,"discussion_content":"虽说是瞬时抖动，但至少也要达到了请求超时的级别，否则再低级别的抖动TCP足以应付","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582851547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061803,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/ab/d8ba4242.jpg","nickname":"哒哒哒","note":"","ucode":"9378AD329F8AE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409754,"discussion_content":"同问\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635502868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174191,"user_name":"夏目-Steve","can_delete":false,"product_type":"c1","uid":1037560,"ip_address":"","ucode":"3B8B66A75FC596","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/f8/6a368642.jpg","comment_is_top":false,"comment_ctime":1580055170,"is_pvip":false,"replies":[{"id":"67906","content":"Thanks for responding:)","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1580368400,"ip_address":"","comment_id":174191,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580055170","product_id":100029201,"comment_content":"props.put(“enable.idempotence”, ture)<br><br>-&gt;<br><br>props.put(“enable.idempotence”, true)","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482328,"discussion_content":"Thanks for responding:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580368400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172344,"user_name":"chp","can_delete":false,"product_type":"c1","uid":1112415,"ip_address":"","ucode":"F0A2442230CD45","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/5f/b0a125a9.jpg","comment_is_top":false,"comment_ctime":1579158138,"is_pvip":false,"replies":[{"id":"67068","content":"这个是事务型producer需要用到的API。当启用事务时，producer需要记录内部事务主题的位移，这个API就是用来做这个事情的~","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1579394277,"ip_address":"","comment_id":172344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579158138","product_id":100029201,"comment_content":"老师，看到producer的api有个sendOffsetsToTransaction，这个要怎么理解？producer怎么和位移扯上关系了，不是消费者消费后才有位移吗","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481706,"discussion_content":"这个是事务型producer需要用到的API。当启用事务时，producer需要记录内部事务主题的位移，这个API就是用来做这个事情的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579394277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170527,"user_name":"人唯优","can_delete":false,"product_type":"c1","uid":1503129,"ip_address":"","ucode":"7949FE2500759B","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/99/cc30e2ca.jpg","comment_is_top":false,"comment_ctime":1578626864,"is_pvip":false,"replies":[{"id":"66345","content":"客户端版本不支持导致的，查查对应的客户端版本吧","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1578877440,"ip_address":"","comment_id":170527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578626864","product_id":100029201,"comment_content":"老师好，0.11和1.0的版本都试了下提交事务，都会遇到如下报错Exception in thread &quot;main&quot; org.apache.kafka.common.errors.UnsupportedVersionException: Cannot create a v0 FindCoordinator request because we require features supported only in 1 or later.","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481010,"discussion_content":"客户端版本不支持导致的，查查对应的客户端版本吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578877440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167477,"user_name":"王大伟","can_delete":false,"product_type":"c1","uid":1180955,"ip_address":"","ucode":"A3BDC4D7B94B0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/1b/fc1aa0ac.jpg","comment_is_top":false,"comment_ctime":1577836872,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577836872","product_id":100029201,"comment_content":"这两个特性用起来都不托底，我觉得还是在消息里标识唯一性，在消费端去重比较好","like_count":0},{"had_liked":false,"id":158509,"user_name":"Rosy","can_delete":false,"product_type":"c1","uid":1757800,"ip_address":"","ucode":"74B015C848EA39","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d2/68/2149f518.jpg","comment_is_top":false,"comment_ctime":1575387815,"is_pvip":true,"replies":[{"id":"60680","content":"看上去是个已知的Kafka bug，升级到新版本试试吧","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1575423724,"ip_address":"","comment_id":158509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575387815","product_id":100029201,"comment_content":"老师，当大数据量写入kafka时，broker会报以下异常：org.apache.kafka.commons.errors.OutOfOrderSequenceException，这个问题应该如何排查呢？是Producer端的幂等性问题吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476751,"discussion_content":"看上去是个已知的Kafka bug，升级到新版本试试吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575423724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146924,"user_name":"朱东旭","can_delete":false,"product_type":"c1","uid":1242338,"ip_address":"","ucode":"C48DD620A63868","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/e2/dbc4a5f2.jpg","comment_is_top":false,"comment_ctime":1572702824,"is_pvip":false,"replies":[{"id":"56778","content":"不启用幂等也可以保证同分区下无消息乱序的。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1572769169,"ip_address":"","comment_id":146924,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572702824","product_id":100029201,"comment_content":"您好，胡老师，听说启用幂等还可以防止同分区消息乱序，请问是真的吗。。","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473057,"discussion_content":"不启用幂等也可以保证同分区下无消息乱序的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572769169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1466953,"avatar":"https://static001.geekbang.org/account/avatar/00/16/62/49/6332c99b.jpg","nickname":"man1s","note":"","ucode":"FFDB6B52F65A1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52900,"discussion_content":"网络导致的先send的消息后到达broken，不启用幂等性就会乱序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574091032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137346,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1569720406,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1569720406","product_id":100029201,"comment_content":"幂等性producer是范围是单会话的，这个所谓空间换时间的空间，空间的使用实现在客户端还是broker","like_count":0,"discussions":[{"author":{"id":1466953,"avatar":"https://static001.geekbang.org/account/avatar/00/16/62/49/6332c99b.jpg","nickname":"man1s","note":"","ucode":"FFDB6B52F65A1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52909,"discussion_content":"broken内部维护一个映射(pid，seg)，produce每次生产递增seg记为segnum并发送给broken，broken判断segnum是否等于broken_seg，相等双方安好，segnum＜broken_seg，重复消费   segnum＞broken_seg  消息丢失","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574091474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30489,"discussion_content":"broker. \n主要是只在 0.11.0 消息结构发生了变化（v2),\n添加了producer id字段，用于消息的去重。\n客户端在发送过程中会自动添加，server完成去充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570839819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120281,"user_name":"盘尼西林","can_delete":false,"product_type":"c1","uid":1197347,"ip_address":"","ucode":"B59569FC25144F","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/23/28311447.jpg","comment_is_top":false,"comment_ctime":1564819273,"is_pvip":false,"replies":[{"id":"44257","content":"1. broker端多做一些事来保证producer端幂等<br>2. 事务型producer和幂等producer就是两个东西啊","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1564966266,"ip_address":"","comment_id":120281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564819273","product_id":100029201,"comment_content":"还是有点小疑惑：<br>1. 为什么叫幂等型producer，但是控制幂等的方法却是在broker端<br>2. 事务型producer 只能保证精确一次的语义，但是似乎又和幂等没有多大的关系（我对幂等的理解是执行多次不会产生副作用）","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461268,"discussion_content":"1. broker端多做一些事来保证producer端幂等\n2. 事务型producer和幂等producer就是两个东西啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564966266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119327,"user_name":"ProgramGeek","can_delete":false,"product_type":"c1","uid":1008217,"ip_address":"","ucode":"3F0E3963C4FB57","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/59/a01a5ddd.jpg","comment_is_top":false,"comment_ctime":1564562075,"is_pvip":false,"replies":[{"id":"43869","content":"事务ID是producer启动时指定的，和topic没有关系","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1564627791,"ip_address":"","comment_id":119327,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564562075","product_id":100029201,"comment_content":"请教一个问题，那个事务ID是每次写入的时候设置一次还是一个topic下设置一次就可以了，后续无需再设置？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460851,"discussion_content":"事务ID是producer启动时指定的，和topic没有关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564627791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112184,"user_name":"酱排骨","can_delete":false,"product_type":"c1","uid":1348539,"ip_address":"","ucode":"FEB012688EAB9C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqwFYNicGUHlnpUXg3lBrjuWo2SLjUoH8SeE30QibzZprxjw8SZBMY5D70q5uFJshakb0WzRaKMknQA/132","comment_is_top":false,"comment_ctime":1562679718,"is_pvip":false,"replies":[{"id":"40831","content":"也可以用。总是有让你指定properties的地方吧","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562721052,"ip_address":"","comment_id":112184,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562679718","product_id":100029201,"comment_content":"老是我想问一下，enable.idempotence = true 这些配置只能在原生api才可以使用吗。kafkaTemplate又produce去重api吗?  在开发中使用的是原生api多还是kafkaTemplate用的多~","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457612,"discussion_content":"也可以用。总是有让你指定properties的地方吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562721052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111350,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1562547156,"is_pvip":false,"replies":[{"id":"40522","content":"幂等producer是Kafka内部的设计机制，用户无法干预。它保证的是同一条消息只会被保存在Broker上一次。<br><br>“两个不同的事务同时发送相同消息” 不确定这是什么意思。如果两个事务是在两个producer上创建的，那么它们不可能发送相同的消息，至少在kafka看来它们就是不同的消息。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562548370,"ip_address":"","comment_id":111350,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562547156","product_id":100029201,"comment_content":"老师好，“当 Producer 发送了具有相同字段值的消息后，Broker 能够自动知晓这些消息已经重复了”，想问下幂等性producer中是按照什么字段做幂等的呢？这个字段可以设置还是一个通用字段？另外为啥事务可以保证只消费一次的语义呢，如果两个不同的事务同时发送相同消息，难道只会被消费一次吗？事务不是只保证原子性，","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457314,"discussion_content":"幂等producer是Kafka内部的设计机制，用户无法干预。它保证的是同一条消息只会被保存在Broker上一次。\n\n“两个不同的事务同时发送相同消息” 不确定这是什么意思。如果两个事务是在两个producer上创建的，那么它们不可能发送相同的消息，至少在kafka看来它们就是不同的消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562548370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111332,"user_name":"电光火石","can_delete":false,"product_type":"c1","uid":1013160,"ip_address":"","ucode":"3AD33BB4AA940F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","comment_is_top":false,"comment_ctime":1562546265,"is_pvip":false,"replies":[{"id":"40518","content":"没有。。。。即使有也只是我自己的场景。最好还是结合你实际的情况做一下测试。使用kafka-producer-perf-test.sh就能测试","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562547405,"ip_address":"","comment_id":111332,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562546265","product_id":100029201,"comment_content":"老师有相关的benchmark吗？在开启幂等和事务的情况下，会比不开启的情况分别慢多少，谢谢了！","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457309,"discussion_content":"没有。。。。即使有也只是我自己的场景。最好还是结合你实际的情况做一下测试。使用kafka-producer-perf-test.sh就能测试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562547405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111162,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1562495258,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1562495258","product_id":100029201,"comment_content":"Kafka的幂等性解决的是producer向broker发送消息的过程。","like_count":0},{"had_liked":false,"id":111160,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1562495060,"is_pvip":true,"replies":[{"id":"40499","content":"不好评估。以实际测试结果为准，只能说肯定是有影响","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562546117,"ip_address":"","comment_id":111160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562495060","product_id":100029201,"comment_content":"老师，在这种上亿级别消息体量的场景中，精确一次的性能和至少一次的性能差距大么！","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457257,"discussion_content":"不好评估。以实际测试结果为准，只能说肯定是有影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562546117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110885,"user_name":"无菇朋友","can_delete":false,"product_type":"c1","uid":1035562,"ip_address":"","ucode":"80482C5F0464A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/2a/bdbed6ed.jpg","comment_is_top":false,"comment_ctime":1562383618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562383618","product_id":100029201,"comment_content":"而其他broker没有同步这些字段？","like_count":0},{"had_liked":false,"id":110649,"user_name":"新@青春","can_delete":false,"product_type":"c1","uid":1404838,"ip_address":"","ucode":"3E36FC6616ED33","user_header":"https://static001.geekbang.org/account/avatar/00/15/6f/a6/8a9cbc4f.jpg","comment_is_top":false,"comment_ctime":1562310364,"is_pvip":false,"replies":[{"id":"40301","content":"有可能重复发送造成多条消息被生产出来，但其实它们都是相同的消息（至少内容都是一样的）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562370980,"ip_address":"","comment_id":110649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562310364","product_id":100029201,"comment_content":"老师，同一个生产者发送同一个消息两次，主题只有一个分区，会产生两消息。我本来的理解是一条？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456985,"discussion_content":"有可能重复发送造成多条消息被生产出来，但其实它们都是相同的消息（至少内容都是一样的）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562370980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110630,"user_name":"丘壑","can_delete":false,"product_type":"c1","uid":1118203,"ip_address":"","ucode":"ECFEDA5A93828D","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/fb/68196d4c.jpg","comment_is_top":false,"comment_ctime":1562306332,"is_pvip":false,"replies":[{"id":"40515","content":"是否能够使用更新一点的版本。毕竟0.11才引入，有一些bug可能也是正常：）","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562547171,"ip_address":"","comment_id":110630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562306332","product_id":100029201,"comment_content":"本人测试中发现2个很奇怪的现象，kafka版本0.11.0，window，<br>1、同一个transactional.id&quot;，只能测试一次，第二次再启动程序一直卡在  producer.initTransactions();<br>2、消费端设置：isolation.level=read_committed将不能读取到任何消息，如果不设置该参数同样能实现只有commit的消息能被消费者看见并消费<br><br>本人测试程序：<br> producer端：<br>     Properties props = new Properties();<br>        props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);<br>        props.put(&quot;acks&quot;, &quot;all&quot;);<br>        props.put(&quot;compression.type&quot;,&quot;gzip&quot;);<br>        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);<br>        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);<br>        &#47;&#47;自定义分区策略<br>        props.put(&quot;partitioner.class&quot;,&quot;com.frz.sample.kafka.producer.MyPartitionHandler&quot;);<br>        props.put(&quot;enable.idempotence&quot;,true);<br>        props.put(&quot;transactional.id&quot;,&quot;test_trans_producer&quot;);<br><br>        Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props);<br>        System.out.println(&quot;初始化事务begin》》》》》》》》&quot;);<br>        producer.initTransactions();<br>        System.out.println(&quot;初始化事务end》》》》》》》》&quot;);<br>        try{<br>            System.out.println(&quot;开始事务begin》》》》》》》》&quot;);<br>            producer.beginTransaction();<br>            System.out.println(&quot;开始事务end》》》》》》》》&quot;);<br>            for (int i = 0; i &lt;10 ; i++) {<br>                Message message = new Message();<br>                message.setKey(Integer.toString(i));<br>                message.setValue(Integer.toString(i));<br>                ProducerRecord record = new ProducerRecord(&quot;my-topic-test&quot;, JSON.toJSONString(message));<br>                producer.send(record);<br>                System.out.println(&quot;发送：&quot;+i);<br><br>                if(i==5){<br>                    throw new Exception();<br>                }<br>            }<br>            producer.commitTransaction();<br>            System.out.println(&quot;提交事务》》》》》》&quot;);<br><br>        }catch (Exception e){<br>            producer.abortTransaction();<br>            e.printStackTrace();<br><br>        }<br><br>        producer.close();","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456978,"discussion_content":"是否能够使用更新一点的版本。毕竟0.11才引入，有一些bug可能也是正常：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562547171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110489,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1562287541,"is_pvip":false,"replies":[{"id":"40297","content":"关系不大，acks控制的是消息的持久化程度。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562370290,"ip_address":"","comment_id":110489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562287541","product_id":100029201,"comment_content":"最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。<br>至少一次（at least once）：消息不会丢失，但有可能被重复发送。<br>精确一次（exactly once）：消息不会丢失，也不会被重复发送。  这个跟acks是不是有相对应的关系？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456907,"discussion_content":"关系不大，acks控制的是消息的持久化程度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562370290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110428,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1562255500,"is_pvip":false,"replies":[{"id":"40516","content":"请问你用的是什么版本呢？","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562547209,"ip_address":"","comment_id":110428,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1562255500","product_id":100029201,"comment_content":"KafkaProducer&lt;Integer, String&gt; producer = new KafkaProducer&lt;&gt;(this.properties());<br>            producer.initTransactions();<br>            producer.beginTransaction();<br>            for (int index = 0; index &lt; 5; index++) {<br>                ProducerRecord&lt;Integer, String&gt; record = new ProducerRecord&lt;&gt;(&quot;test-topic&quot;, 123, &quot;测试数据2-&quot; + index);<br>                Future future = producer.send(record);<br>                future.get();<br>                System.out.println(&quot;发送&quot;);<br>            }<br>            producer.flush();<br>            producer.commitTransaction();<br>老师，我使用这种方式开启了事务，但是发生了，生产者生产消息成功，但是消费者怎么都消费不到消息的情况，而且Topic里面貌似没有消息进入（生产者和消费者是在两个不同的项目里面，生产的时候开启事务），请问老师有遇到过类似的情况吗？<br><br>我的配置<br> properties.put(&quot;acks&quot;, &quot;all&quot;);<br>        properties.put(&quot;bootstrap.servers&quot;, &quot;service1:9092,service2:9092,service3:9092&quot;);<br>        properties.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;);<br>        properties.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);<br>        properties.put(&quot;enable.idempotence&quot;, true);<br>        properties.put(&quot;transactional.id&quot;, &quot;test_transactional.id&quot;);<br>        properties.put(&quot;client.id&quot;, &quot;ProducerTranscationnalExample&quot;);","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456875,"discussion_content":"请问你用的是什么版本呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562547209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30503,"discussion_content":"消费 isolation_level 设置了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570840195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30719,"discussion_content":"发现问题了，因为是跑模块测试，好像就是latest导致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570854294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30503,"ip_address":""},"score":30719,"extra":""}]},{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1305,"discussion_content":"我使用的broker是2.0.1消费者2.0.1和2.2.0都试过。情况是如果生产者消费者同时启动是没问题的能正常消费，如果先启动生产者，再启动消费者会发现消息消费不了。PS:生产者发送消息我已经改成同步发送的方式了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562550204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110401,"user_name":"13761642169","can_delete":false,"product_type":"c1","uid":1232334,"ip_address":"","ucode":"68137695FC2120","user_header":"","comment_is_top":false,"comment_ctime":1562249122,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562249122","product_id":100029201,"comment_content":"在金融业务中，会使用事务消息","like_count":0,"discussions":[{"author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389781,"discussion_content":"那是必须的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629429343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110396,"user_name":"我已经设置了昵称","can_delete":false,"product_type":"c1","uid":1364034,"ip_address":"","ucode":"ED672C5EBDBDC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/42/6fd01fb9.jpg","comment_is_top":false,"comment_ctime":1562248367,"is_pvip":false,"replies":[{"id":"40155","content":"事务型消息是什么意思？幂等producer的机制还是在broker端做了一些元数据校验的工作","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562287348,"ip_address":"","comment_id":110396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562248367","product_id":100029201,"comment_content":"事务型消息能保证唯一的效果就是能够保证在broker往producer发确认消息这一环节做了优化，相对于至少一次来说，老师我理解的有问题吗","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456858,"discussion_content":"事务型消息是什么意思？幂等producer的机制还是在broker端做了一些元数据校验的工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562287348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110279,"user_name":"Bing","can_delete":false,"product_type":"c1","uid":1059579,"ip_address":"","ucode":"1A9745BBF0CDDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/2a/fb/e2b29825.jpg","comment_is_top":false,"comment_ctime":1562221125,"is_pvip":false,"replies":[{"id":"40151","content":"幂等和这个还是有些不同。Kafka幂等主要处理的问题是如何应对消息被发送多次的情况。","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562287105,"ip_address":"","comment_id":110279,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1562221125","product_id":100029201,"comment_content":"老师，按key做partition，同一key消息路由同一分区，这样是不是也就可以类似全局幂等？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456800,"discussion_content":"幂等和这个还是有些不同。Kafka幂等主要处理的问题是如何应对消息被发送多次的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562287105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1059579,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2a/fb/e2b29825.jpg","nickname":"Bing","note":"","ucode":"1A9745BBF0CDDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1303,"discussion_content":"老师，这样不就可以应对消息被发送多次么，单分区消息去重，按key分区，即所有分区去重，不就全局去重？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562549139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110176,"user_name":"nightmare","can_delete":false,"product_type":"c1","uid":1056314,"ip_address":"","ucode":"EF2E51C2122A86","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/3a/5b21c01c.jpg","comment_is_top":false,"comment_ctime":1562204153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562204153","product_id":100029201,"comment_content":"实现上可以用kafka的幂等性来保证单分区单会话的精准一次语义，如果是一批消息，可以路由到同一个分区","like_count":0},{"had_liked":false,"id":110134,"user_name":"Riordon","can_delete":false,"product_type":"c1","uid":1127497,"ip_address":"","ucode":"E2F6855B5FE5F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/49/6b27feb1.jpg","comment_is_top":false,"comment_ctime":1562200148,"is_pvip":false,"replies":[{"id":"39897","content":"这取决于你是否要在abort后重试了","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562201440,"ip_address":"","comment_id":110134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562200148","product_id":100029201,"comment_content":"事务终止后，需要自己实现重发逻辑吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456737,"discussion_content":"这取决于你是否要在abort后重试了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562201440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110119,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1143372,"ip_address":"","ucode":"335960F683C23C","user_header":"https://static001.geekbang.org/account/avatar/00/11/72/4c/4d636a23.jpg","comment_is_top":false,"comment_ctime":1562198768,"is_pvip":false,"replies":[{"id":"39900","content":"不一定是同一个broker。单会话可以简单理解为producer别重启","user_name":"作者回复","user_name_real":"huxi_2b","uid":"1288090","ctime":1562201513,"ip_address":"","comment_id":110119,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562198768","product_id":100029201,"comment_content":"幂等性 Producer 只能保证单分区、单会话上的消息幂等性<br>这句话不是很理解，单分区单会话，是指一个producer,一个partition，一个broker吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456729,"discussion_content":"不一定是同一个broker。单会话可以简单理解为producer别重启","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562201513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110106,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1562196170,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1562196170","product_id":100029201,"comment_content":"就是说幂等性producer 只有在某个topic只有一个partition的时候能实现精确一次接收消息？ 那不是很实用呀","like_count":0,"discussions":[{"author":{"id":1000347,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/9b/50927dfc.jpg","nickname":"小飞","note":"","ucode":"4C126548FBA94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30506,"discussion_content":"实际生产和事务一起使用。\n单幂等，生产意义较小。更多的是全局整体的eos","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570840301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}