{"id":267837,"title":"28 | 战略设计：如何划分系统的模块？","content":"<p>你好！我是郑晔。</p><p>上一讲，我们已经初步认识了 DDD ，知道了支撑 DDD 最核心的就是通用语言和模型驱动设计的方法。我们在上一讲已经讲了建立通用语言的方法，接下来，就该进行模型的设计了。</p><p>在模型设计中，DDD 又分成了两个阶段，战略设计和战术设计。这一讲，我们先来聊聊战略设计，下一讲再来谈战术设计。</p><p>战略设计，这个名字听上去有点高大上。而且，战略设计包含很多的概念，比如，子域、限界上下文和上下文映射图等等。这让很多人有些望而却步。虽然概念看似很多，但只要有一条主线将它们贯穿起来，这些概念也不难理解。</p><p>我们可以先把这些概念做一个划分，分为<strong>做业务的划分和落地成解决方案</strong>两个部分，也就是说，战略设计中的概念，一部分是为了将不同的业务区分开来，也就是要将识别出来的业务概念做一个划分，另一部分则是将划分出来的业务落实到真实的解决方案中。</p><p>好，我们接下来就先来看看战略设计中的这些概念到底是怎么回事。</p><h2>业务概念的划分</h2><p>我们前面说过，软件开发就是在解决问题，所以，一方面，我们要知道要解决的问题是什么；另一方面，我们要知道怎么去解决问题。</p><p>我们要解决的问题就是领域问题，在 DDD 中，有几个概念是与领域相关的，比如，子域、核心域、支撑域、通用域等。其实，它们说的都是一件事，就是如何先把问题从大面上进行分解。</p><!-- [[[read_end]]] --><p>领域驱动设计这个名字里面，排在第一位的是<strong>领域（Domain）</strong>，它就对应着要解决的问题。正如我们一直说的，软件开发是解决问题，而解决问题要分而治之。所谓分而治之，就是要把问题分解了，对应到领域驱动设计中，就是要把一个大领域分解成若干的小领域，而这个分解出来的小领域就是<strong>子域（Subdomain）</strong>。</p><p>我们在上一讲中说，领域驱动设计首先要建立起一套通用语言，这样一来，我们就拥有了各种各样的词汇，它们对应着模型。接下来，我们就要给这些词汇做个分类，而分类就是要把它们划分到不同的子域中去。这里面的关键就在于，要找出不同的关注点。没错，还是分离关注点。</p><p>比如，我要做一个项目管理软件，就需要有用户、有项目、有团队，不同的人还要扮演不同的角色。第一步，我们至少可以先把身份管理和项目管理这两件事分开，因为它们的关注点是不同的。身份管理关注的是用户的身份信息，诸如用户名密码之类的，而项目管理关注的重点是项目和团队之类的。所以，我们这里有了两个子域：身份管理和项目管理。</p><p>如果直接给你看结果，你可能会觉得很好理解。但是，划分出不同的子域还是比较容易出问题的，因为有一些概念并不容易区分。比如，用户应该怎么划分呢？放在身份管理是合适的，但项目管理也要用到用户。</p><p>幸好，我们已经学习了单一职责原则，它给了我们一个重要的思考维度，变化从何而来。不同角色的人会关注不同的变化，所以，我们知道虽然我们用的词都是“用户”，但我们想表达的含义却是不同的，我们最好将这些不同的含义分开，也就是将不同的角色分开。</p><p>比如，在身份管理中，它是“用户”，而在项目管理中，它就成了“项目成员”。所以，我们划分子域实际上就是在把不同的概念区分开来，让它们各归其位。</p><p>对于一个真实项目而言，划分出来的子域可能会有很多，但并非每个子域都一样重要。所以，我们还要把划分出来的子域再做一下区分，分成核心域（Core Domain）、支撑域（Supporting Subdomain）和通用域（Generic Subdomain）。</p><p>核心域是整个系统最重要的部分，是整个业务得以成功的关键。关于核心域，Eric Evans 曾提出过几个问题，帮我们识别核心域：</p><ul>\n<li>为什么这个系统值得写？</li>\n<li>为什么不直接买一个？</li>\n<li>为什么不外包？</li>\n</ul><p>如果你对这几个问题的回答能够帮你找到这个系统非写不可的理由，那它就是你的核心域。</p><p>什么是支撑域呢？有一些子域不是你的核心竞争力，但却是系统不得不做的东西，市场上也找不到一个现成的方案，这种子域就是支撑域。比如，我们要做一个排行榜功能，可能根据各种信息做排名，这种东西没有人会按照你的需要做出一个，对你来说，又是扩展自己系统的重要一步，它就是一个支撑域。</p><p>还有一种子域叫通用域，就是行业里通常都是这么做，即便不自己做，也并不影响你的业务运行。比如，很多 App 要给用户发通知，这样的功能完全可以买一个服务来做，丝毫不影响你的业务运行。它就是一个通用域。</p><p>我们之所以要区分不同的子域，关键的原因就在于，我们可以决定不同的投资策略。核心域要全力投入，支撑域次之，通用域甚至可以花钱买服务。</p><h2>业务概念的落地</h2><p>通过划分子域，区分核心域、支撑域和通用域，我们把DDD在问题层面的概念已经说清楚了。接下来，就要进入到解决方案层面了。</p><p>我们现在有了切分出来的子域，怎样去落实到代码上呢？首先要解决的就是这些子域如何组织的问题，是写一个程序把所有子域都放在里面呢，还是每个子域做一个独立的应用，抑或是有一些在一起，有一些分开。</p><p>这就引出了领域驱动设计中的一个重要的概念，限界上下文（Bounded Context）。</p><p><strong>限界上下文，顾名思义，它形成了一个边界，一个限定了通用语言自由使用的边界，一旦出界，含义便无法保证</strong>。比如，同样是说“订单”，如果不加限制，你很难区分它是用在哪种场景之下。而一旦定义了限界上下文，那交易上下文的“订单”和物流上下文的“订单”肯定是不同的。原因就在于，订单这个说法，在不同的边界内，含义是不一样的。</p><p>注意，子域和限界上下文不一定是一一对应的，可能在一个限界上下文中包含了多个子域，也可能在一个子域横跨了多个限界上下文。</p><p><img src=\"https://static001.geekbang.org/resource/image/41/ec/4188375e5221108bc6e59ab47d9c30ec.jpg?wh=2284*1285\" alt=\"\"></p><p>前面我们说了限界上下文是在解决方案层面的，所以，很自然地，我们就可以把限界上下文看作是一个独立的系统。很多团队做微服务的时候，最纠结的问题就是如何划分服务边界，而限界上下文的出现刚好与微服务的理念契合，每个限界上下文都可以成为一个独立的服务。</p><p><strong>限界上下文的重点在于，它是完全独立的，不会为了完成一个业务需求要跑到其他服务中去做很多事</strong>，而这恰恰是很多微服务出问题的点，比如，一个业务功能要调用很多其他系统的功能。</p><p>有了对限界上下文的理解，我们就可以把整个业务分解到不同的限界上下文中，但是，尽管我们拆分了系统，它们终究还是一个系统，免不了彼此之间要有交互。</p><p>比如，一个用户下了订单，这是在订单上下文中完成的。那接下来，用户要去支付，这是在支付上下文中完成的。我们肯定要通过某种途径让订单上下文的一些信息发送到支付上下文里的。</p><p>所以，我们就要有一种描述方式，将不同限界上下文之间交互的方式描述出来，这就是上下文映射图（Context Map）。DDD 给我们提供了一些描述这种交互的方式，比如：</p><ul>\n<li>合作关系（Partnership）；</li>\n<li>共享内核（Shared Kernel）；</li>\n<li>客户-供应商（Customer-Supplier）；</li>\n<li>跟随者（Conformist）；</li>\n<li>防腐层（Anticorruption Layer）；</li>\n<li>开放主机服务（Open Host Service）；</li>\n<li>发布语言（Published Language）；</li>\n<li>各行其道（Separate Ways）；</li>\n<li>大泥球（Big Ball of Mud）。</li>\n</ul><p>之所以有这么多不同的交互方式，主要是为了让你在头脑中仔细辨认一下，看看限界上下文之间到底在以怎样的方式进行交互。</p><p>当然这么多交互方式，想一次性记住也是不现实的，有些甚至是你要规避的，比如大泥球。如果说这么多交互方式你必须要记住一个的话，那就是防腐层（Anticorruption Layer）。</p><p>防腐层是最具防御性的一种关系，简言之，就是指我们要在外部模型和内部模型之间建立起一个翻译层，将外部模型转化为内部模型。我在第1讲给你讲了一个因为没有建立防腐造成的问题。所以，但凡有可能，就要建立防腐层，将外部模型完全隔离开。</p><p>当我们知道了不同的限界上下文之间采用哪种交互方式之后，不同的交互方式就可以落地为不同的协议。现在最常用的几种协议有REST API、RPC 或是消息队列，我们可以根据实际情况进行选择。</p><p>在我们定义好不同的限界上下文，将它们之间的交互呈现出来之后，我们就得到了一张上下文映射图。上下文映射图是可以帮助我们理解系统的各个部分之间，是怎样进行交互的，帮我们建立一个全局性的认知，而这往往是很多团队欠缺的。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/f4/606f7d3f445117475652409a837caff4.jpg?wh=2284*1285\" alt=\"\"></p><h2>总结时刻</h2><p>今天，我们主要讲了DDD 中的战略设计。战略设计中的概念主要是为了<strong>做业务的划分和落地成解决方案</strong>。</p><p>首先业务的划分，我们要把识别出来的模型做一个分类，把它们放置到不同的子域中。划分子域的出发点就是不同的关注点，也就是不同的变化来源。</p><p>划分出来的子域有着不同的重要程度，我们将它们再分为核心域、支撑域和通用域。做出这种区分，主要是为了针对它们各自的特点，决定不同的投入。</p><p>有了不同的领域划分，我们还要把这些领域映射到解决方案上，这就引出了限界上下文。限界上下文限定了模型的使用边界，它可以成为一个独立的系统。如果对应到微服务中，每一个限界上下文可以对应成一个微服务。</p><p>上下文映射图定义了不同上下文之间的交互方式，如果你只能记住一种交互方式的话，就应该记住防腐层。</p><p>按照我们之前介绍的了解软件设计的思路，建立起通用语言之后，我们就找到了主要的模型，通过战略设计，我们可以把识别出来的模型放到不同的限界上下文中，就相当于把模型做了分组。然后，我们需要定义出一些接口，让不同的模型之间可以交互，我们也就有了一张上下文映射图。</p><p>这样一来，我们就把之前学习的知识和新的知识建立起了连接。</p><p>我们有了模型，有了接口，接下来就该深入到实现中。下一讲，我们就要进一步了解 DDD 的实现：战术设计。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>战略设计，就是将不同的模型进行分组</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/51/2e0c3075edbe4f9817751abe041e8d51.jpg?wh=2284*2242\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你分享一下，你的项目在模型的分组上哪些地方做得好，哪些地方做得不够好呢？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"27 | 领域驱动设计：如何从零开始设计一个软件？","id":266819},"right":{"article_title":"29 | 战术设计：如何像写故事一样找出模型？","id":267843}},"comments":[{"had_liked":false,"id":238588,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1596206312,"is_pvip":false,"replies":[{"id":"88313","content":"听上去不太合理，各个服务都应该是一个完整独立的。这种把所有的入库都放在一起的操作，为啥还要做微服务呢？","user_name":"作者回复","comment_id":238588,"uid":"1258861","ip_address":"","utype":1,"ctime":1596436260,"user_name_real":"郑晔"}],"discussion_count":3,"race_medal":0,"score":"48840846568","product_id":100052601,"comment_content":"一套微服务里 有一个服务专门负责操作数据库同时又带有业务。其他系统需要发送 RPC 请求调用该系统完成数据库操作。请问老实这样合理吗","like_count":12,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502795,"discussion_content":"听上去不太合理，各个服务都应该是一个完整独立的。这种把所有的入库都放在一起的操作，为啥还要做微服务呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596436260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016155,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/5b/768e64c8.jpg","nickname":"kobepeng","note":"","ucode":"59F986491764DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582600,"discussion_content":"之前我们就按这种方式做的，后来复杂度越整越高，一团乱麻，分都分不开。此外，负责入库操作的人员需要极其非常的懂各个业务才能承担，且会形成公共依赖，造成瓶颈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659522490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055624,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","nickname":"磉盘","note":"","ucode":"1C245991F30A73","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374555,"discussion_content":"明显不是按业务划分领域","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621243921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238618,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1596235761,"is_pvip":true,"replies":[{"id":"88142","content":"四色建模并不是简便，从完整性的角度，它不如DDD。想了解四色建模，你可以去看看我推荐的那本书和那篇文章。","user_name":"作者回复","comment_id":238618,"uid":"1258861","ip_address":"","utype":1,"ctime":1596242825,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"18776104945","product_id":100052601,"comment_content":"想听郑老师讲讲更简便一些的模型设计方法，例如，四色建模法，我不知道是不是？主要是想听听郑老师的实战经验：）","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502804,"discussion_content":"四色建模并不是简便，从完整性的角度，它不如DDD。想了解四色建模，你可以去看看我推荐的那本书和那篇文章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596242825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238450,"user_name":"Geeker","can_delete":false,"product_type":"c1","uid":1957781,"ip_address":"","ucode":"155D3752638B04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhyK1QiaqyNo8rzhibX2o97ZEkvslpsYhjZSSTicKjwkNCyFrEH88ywUia8MZV7mml6Az8HEoghkQqfw/132","comment_is_top":false,"comment_ctime":1596171681,"is_pvip":false,"replies":[{"id":"88315","content":"交互方式和数据协议，都可以通过防腐层处理掉。","user_name":"作者回复","comment_id":238450,"uid":"1258861","ip_address":"","utype":1,"ctime":1596436501,"user_name_real":"郑晔"}],"discussion_count":3,"race_medal":0,"score":"18776040865","product_id":100052601,"comment_content":"有一点不太明白，在不同边界上下文交互过程中，防腐层是封装了具体的远程调用协议和将外部数据进行格式装换?","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502751,"discussion_content":"交互方式和数据协议，都可以通过防腐层处理掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596436501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295587,"discussion_content":"我理解一个界限上下文，并不一定是一个应用，可能是多个应用，有多个接口服务，可能粒度非常细，掺杂着很多这个领域的细节，所以通过防腐层包装一下，让接口更加标准化，易于使用，有点门面的意思，另外的职责，就是做模型转换，例如交易域有交易订单，支付的时候要映射成支付域的支付订单，支付域后续在内部再转换成各种支付请求，资金请求，不对外暴露支付域的内部其他领域概念和业务逻辑。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596256962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1957781,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhyK1QiaqyNo8rzhibX2o97ZEkvslpsYhjZSSTicKjwkNCyFrEH88ywUia8MZV7mml6Az8HEoghkQqfw/132","nickname":"Geeker","note":"","ucode":"155D3752638B04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296210,"discussion_content":"谢谢老师了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596468524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238401,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1596160035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14481061923","product_id":100052601,"comment_content":"总结一下<br>战略设计首先要把业务概念做一个划分，<br>这又分为业务划分和解决方案落地<br>业务划分将领域问题拆分为多个子领域问题，根据重要程度不一样又分为核心域、支撑域、通用域。<br>解决方案落地则需要做到把拆分的各个子领域问题对应到解决方案中，限定上下文就这样的一个桥梁，而上下文映射则定义了限定上下文之间的交互方式。<br>最重要的交互方式就是建立防腐层，它的作用是把外部模型和内部模型之间的交互进行转化（这个感觉有点类似适配器模式的意思）<br>","like_count":3},{"had_liked":false,"id":239173,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1596451832,"is_pvip":false,"replies":[{"id":"88402","content":"讲设计，困难的一点就在于背景太多，要想理解一个设计，通常要先理解背景。讲太细了，就会牵扯到很多具体的业务，怕透露太多。<br><br>选择什么粒度的内容其实我也一直比较纠结。","user_name":"作者回复","comment_id":239173,"uid":"1258861","ip_address":"","utype":1,"ctime":1596509126,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10186386424","product_id":100052601,"comment_content":"通用语言、战略设计、战术设计，好似一个三部曲，从上层到下层，层层细化和分解。感觉通用语言和战略设计对于接触和使用不久的新人是要不断踩坑的，希望郑老师能分析一些过去很多年的一些详细的实际案例，理论结合实际，更能体会其中的奥妙。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503010,"discussion_content":"讲设计，困难的一点就在于背景太多，要想理解一个设计，通常要先理解背景。讲太细了，就会牵扯到很多具体的业务，怕透露太多。\n\n选择什么粒度的内容其实我也一直比较纠结。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596509126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238451,"user_name":"小学一年级","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1596172430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186107022","product_id":100052601,"comment_content":"郑老师，上下文映射图的几种交互方式能给我们讲讲吗？","like_count":2},{"had_liked":false,"id":259894,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1604883514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899850810","product_id":100052601,"comment_content":"战略设计，就是将不同的模型进行分组！划分业务，划分子域，针对各自的特点，进行不同的投入。","like_count":1},{"had_liked":false,"id":250748,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601209052,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5896176348","product_id":100052601,"comment_content":"一篇文章搞懂子域、限界上下文和上下文映射图。<br><br>之前听到领域驱动设计的这些概念一头雾水，经过老师的梳理，清楚了很多。虽然一些具体的业务划分和落地方案还需要进一步的学习，但是大致的框架是有了。<br><br>对于同一个概念，在不同领域里面代表不同的含义，这个还是有点晦涩，特别是在使用同样名字的情况下，比如订单在订单上下文、支付上下文、物流上下文中的不同含义；用户和项目成员。<br><br>以前的项目在大部分情况下是没有模型分组的，能提取出来几个对象就算是让人满意了。做过类似新闻出版的业务系统，其实从一条新闻的原始材料，经过编辑、审稿、校对，到最终出版，应该也是可以划分出不同的子域的，我们只是使用了不同的对象来指代。用户其实也有不同的限定上下文，不同的用户出现在不同的子域，所担负的职责其实也不太一样，也只是根据职级赋予角色而已。<br><br>不过和之前留言的情况一样，如果想把原有系统按照领域驱动设计来重构，那真的就是“一把手工程”了，而一把手哪里会懂领域驱动设计。","like_count":0},{"had_liked":false,"id":240694,"user_name":"fengkuok","can_delete":false,"product_type":"c1","uid":1002056,"ip_address":"","ucode":"C1370D27D03869","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/48/744780ea.jpg","comment_is_top":false,"comment_ctime":1597038109,"is_pvip":true,"replies":[{"id":"88914","content":"是用的Xmind，推荐～","user_name":"编辑回复","comment_id":240694,"uid":"1954066","ip_address":"","utype":2,"ctime":1597053742,"user_name_real":"丁洋洋"}],"discussion_count":1,"race_medal":0,"score":"5892005405","product_id":100052601,"comment_content":"郑老师，每节课最后的思维导图是用什么软件画出来的？","like_count":1,"discussions":[{"author":{"id":1954066,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/d1/12/9a023035.jpg","nickname":"奶酪小海啸🧀","note":"","ucode":"ABEF552189AF50","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503531,"discussion_content":"是用的Xmind，推荐～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597053742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346407,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653108527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653108527","product_id":100052601,"comment_content":"战略设计，就是将不同的模型进行分组--记下来","like_count":0},{"had_liked":false,"id":342273,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650166172,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650166172","product_id":100052601,"comment_content":"解决方案对应的限界上下文还是不太理解，我理解是到了解决方案层面，开发需要将划分后的业务具体实现，但因为总是在一个系统中，难免会有子模块相互重合的地方，如何解决重合地方的就成了比较关键的问题，通过限界上下文可以比较好的解决，但是具体如何通过限界上下文来解决呢，没有get到这个点。","like_count":0},{"had_liked":false,"id":307252,"user_name":"abc-web","can_delete":false,"product_type":"c1","uid":1371804,"ip_address":"","ucode":"DE3B873863EFF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/9c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1628989011,"is_pvip":false,"replies":[{"id":"111319","content":"可以大致这么理解","user_name":"作者回复","comment_id":307252,"uid":"1258861","ip_address":"","utype":1,"ctime":1629113345,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"1628989011","product_id":100052601,"comment_content":"老师你好，听了关于领域驱动开发这几节课，感觉是先进行事件风暴，在进行领域划分，然后对事件风暴的输出进行归类，是这样吗老师？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525094,"discussion_content":"可以大致这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629113345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294351,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1621910128,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621910128","product_id":100052601,"comment_content":"通过建立通用语言识别模型，通过战略设计从更高层次对模型分组，模型放到不同的限界上下文中形成了子域，对不同的子域做不同的投入。子域映射到设计上为不同的上下文，每个上下文可以形成一个子系统（微服务）。<br><br>上下文通过暴露接口的方式进行交互，就是上下文映射图。在通过战术设计从技术上予以实现。","like_count":1},{"had_liked":false,"id":273797,"user_name":"zhao.shaowei","can_delete":false,"product_type":"c1","uid":1901415,"ip_address":"","ucode":"7263738B085A5D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/67/a1d46d25.jpg","comment_is_top":false,"comment_ctime":1610680584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610680584","product_id":100052601,"comment_content":"郑老师好!<br>根据不同的关注点,不同的变化来源,来划分子域.<br>那么划分限界上下文,有没有什么参考基准?","like_count":0},{"had_liked":false,"id":256272,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603590037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603590037","product_id":100052601,"comment_content":"看到留言有说项目重构成DDD通常是一把手工程，的确是。工作中怎么说服领导这个重构带来的收益是大于成本的呢。<br><br>《10X程序员工作法》里面有提过可以先组一个小团队来实践，其他团队看到成效了便会跟上。可是看这个专栏的大部分人应该还没到这种级别，这时候应该怎么做才好呢","like_count":0}]}