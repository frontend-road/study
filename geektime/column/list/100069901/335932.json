{"id":335932,"title":"02 | 基础架构：etcd一个读请求是如何执行的？","content":"<p>你好，我是唐聪。</p><p>在上一讲中，我和你分享了etcd的前世今生，同时也为你重点介绍了etcd  v2的不足之处，以及我们现在广泛使用etcd v3的原因。</p><p>今天，我想跟你介绍一下etcd v3的基础架构，让你从整体上对etcd有一个初步的了解，心中能构筑起一幅etcd模块全景图。这样，在你遇到诸如“Kubernetes在执行kubectl get pod时，etcd如何获取到最新的数据返回给APIServer？”等流程架构问题时，就能知道各个模块由上至下是如何紧密协作的。</p><p>即便是遇到请求报错，你也能通过顶层的模块全景图，推测出请求流程究竟在什么模块出现了问题。</p><h2>基础架构</h2><p>下面是一张etcd的简要基础架构图，我们先从宏观上了解一下etcd都有哪些功能模块。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/84/34486534722d2748d8cd1172bfe63084.png?wh=1920*1240\" alt=\"\"></p><p>你可以看到，按照分层模型，etcd可分为Client层、API网络层、Raft算法层、逻辑层和存储层。这些层的功能如下：</p><ul>\n<li>\n<p><strong>Client层</strong>：Client层包括client v2和v3两个大版本API客户端库，提供了简洁易用的API，同时支持负载均衡、节点间故障自动转移，可极大降低业务使用etcd复杂度，提升开发效率、服务可用性。</p>\n</li>\n<li>\n<p><strong>API网络层</strong>：API网络层主要包括client访问server和server节点之间的通信协议。一方面，client访问etcd server的API分为v2和v3两个大版本。v2 API使用HTTP/1.x协议，v3 API使用gRPC协议。同时v3通过etcd grpc-gateway组件也支持HTTP/1.x协议，便于各种语言的服务调用。另一方面，server之间通信协议，是指节点间通过Raft算法实现数据复制和Leader选举等功能时使用的HTTP协议。</p>\n</li>\n<li>\n<p><strong>Raft算法层</strong>：Raft算法层实现了Leader选举、日志复制、ReadIndex等核心算法特性，用于保障etcd多个节点间的数据一致性、提升服务可用性等，是etcd的基石和亮点。</p>\n</li>\n<li>\n<p><strong>功能逻辑层</strong>：etcd核心特性实现层，如典型的KVServer模块、MVCC模块、Auth鉴权模块、Lease租约模块、Compactor压缩模块等，其中MVCC模块主要由treeIndex模块和boltdb模块组成。</p>\n</li>\n<li>\n<p><strong>存储层</strong>：存储层包含预写日志(WAL)模块、快照(Snapshot)模块、boltdb模块。其中WAL可保障etcd crash后数据不丢失，boltdb则保存了集群元数据和用户写入的数据。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>etcd是典型的读多写少存储，在我们实际业务场景中，读一般占据2/3以上的请求。为了让你对etcd有一个深入的理解，接下来我会分析一个读请求是如何执行的，带你了解etcd的核心模块，进而由点及线、由线到面地帮助你构建etcd的全景知识脉络。</p><p>在下面这张架构图中，我用序号标识了etcd默认读模式（线性读）的执行流程，接下来，我们就按照这个执行流程从头开始说。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/bb/457db2c506135d5d29a93ef0bd97e4bb.png?wh=1920*1229\" alt=\"\"></p><h2>环境准备</h2><p>首先介绍一个好用的进程管理工具<a href=\"https://github.com/mattn/goreman\">goreman</a>，基于它，我们可快速创建、停止本地的多节点etcd集群。</p><p>你可以通过如下<code>go get</code>命令快速安装goreman，然后从<a href=\"https://github.com/etcd-io/etcd/releases/v3.4.9\">etcd release</a>页下载etcd v3.4.9二进制文件，再从<a href=\"https://github.com/etcd-io/etcd/blob/v3.4.9/Procfile\">etcd源码</a>中下载goreman Procfile文件，它描述了etcd进程名、节点数、参数等信息。最后通过<code>goreman -f Procfile start</code>命令就可以快速启动一个3节点的本地集群了。</p><pre><code>go get github.com/mattn/goreman\n</code></pre><h2>client</h2><p>启动完etcd集群后，当你用etcd的客户端工具etcdctl执行一个get hello命令（如下）时，对应到图中流程一，etcdctl是如何工作的呢？</p><pre><code>etcdctl get hello --endpoints http://127.0.0.1:2379  \nhello  \nworld  \n</code></pre><p>首先，etcdctl会对命令中的参数进行解析。我们来看下这些参数的含义，其中，参数“get”是请求的方法，它是KVServer模块的API；“hello”是我们查询的key名；“endpoints”是我们后端的etcd地址，通常，生产环境下中需要配置多个endpoints，这样在etcd节点出现故障后，client就可以自动重连到其它正常的节点，从而保证请求的正常执行。</p><p>在etcd v3.4.9版本中，etcdctl是通过clientv3库来访问etcd server的，clientv3库基于gRPC client API封装了操作etcd KVServer、Cluster、Auth、Lease、Watch等模块的API，同时还包含了负载均衡、健康探测和故障切换等特性。</p><p>在解析完请求中的参数后，etcdctl会创建一个clientv3库对象，使用KVServer模块的API来访问etcd server。</p><p>接下来，就需要为这个get hello请求选择一个合适的etcd server节点了，这里得用到负载均衡算法。在etcd 3.4中，clientv3库采用的负载均衡算法为Round-robin。针对每一个请求，Round-robin算法通过轮询的方式依次从endpoint列表中选择一个endpoint访问(长连接)，使etcd server负载尽量均衡。</p><p>关于负载均衡算法，你需要特别注意以下两点。</p><ol>\n<li>如果你的client 版本&lt;= 3.3，那么当你配置多个endpoint时，负载均衡算法仅会从中选择一个IP并创建一个连接（Pinned endpoint），这样可以节省服务器总连接数。但在这我要给你一个小提醒，在heavy usage场景，这可能会造成server负载不均衡。</li>\n<li>在client 3.4之前的版本中，负载均衡算法有一个严重的Bug：如果第一个节点异常了，可能会导致你的client访问etcd server异常，特别是在Kubernetes场景中会导致APIServer不可用。不过，该Bug已在 Kubernetes 1.16版本后被修复。</li>\n</ol><p>为请求选择好etcd server节点，client就可调用etcd server的KVServer模块的Range RPC方法，把请求发送给etcd server。</p><p>这里我说明一点，client和server之间的通信，使用的是基于HTTP/2的gRPC协议。相比etcd v2的HTTP/1.x，HTTP/2是基于二进制而不是文本、支持多路复用而不再有序且阻塞、支持数据压缩以减少包大小、支持server push等特性。因此，基于HTTP/2的gRPC协议具有低延迟、高性能的特点，有效解决了我们在上一讲中提到的etcd v2中HTTP/1.x 性能问题。</p><h2>KVServer</h2><p>client发送Range RPC请求到了server后，就开始进入我们架构图中的流程二，也就是KVServer模块了。</p><p>etcd提供了丰富的metrics、日志、请求行为检查等机制，可记录所有请求的执行耗时及错误码、来源IP等，也可控制请求是否允许通过，比如etcd Learner节点只允许指定接口和参数的访问，帮助大家定位问题、提高服务可观测性等，而这些特性是怎么非侵入式的实现呢？</p><p>答案就是拦截器。</p><h3>拦截器</h3><p>etcd server定义了如下的Service KV和Range方法，启动的时候它会将实现KV各方法的对象注册到gRPC Server，并在其上注册对应的拦截器。下面的代码中的Range接口就是负责读取etcd key-value的的RPC接口。</p><pre><code>service KV {  \n  // Range gets the keys in the range from the key-value store.  \n  rpc Range(RangeRequest) returns (RangeResponse) {  \n      option (google.api.http) = {  \n        post: &quot;/v3/kv/range&quot;  \n        body: &quot;*&quot;  \n      };  \n  }  \n  ....\n}  \n</code></pre><p>拦截器提供了在执行一个请求前后的hook能力，除了我们上面提到的debug日志、metrics统计、对etcd Learner节点请求接口和参数限制等能力，etcd还基于它实现了以下特性:</p><ul>\n<li>要求执行一个操作前集群必须有Leader；</li>\n<li>请求延时超过指定阈值的，打印包含来源IP的慢查询日志(3.5版本)。</li>\n</ul><p>server收到client的Range RPC请求后，根据ServiceName和RPC Method将请求转发到对应的handler实现，handler首先会将上面描述的一系列拦截器串联成一个执行，在拦截器逻辑中，通过调用KVServer模块的Range接口获取数据。</p><h3>串行读与线性读</h3><p>进入KVServer模块后，我们就进入核心的读流程了，对应架构图中的流程三和四。我们知道etcd为了保证服务高可用，生产环境一般部署多个节点，那各个节点数据在任意时间点读出来都是一致的吗？什么情况下会读到旧数据呢？</p><p>这里为了帮助你更好的理解读流程，我先简单提下写流程。如下图所示，当client发起一个更新hello为world请求后，若Leader收到写请求，它会将此请求持久化到WAL日志，并广播给各个节点，若一半以上节点持久化成功，则该请求对应的日志条目被标识为已提交，etcdserver模块异步从Raft模块获取已提交的日志条目，应用到状态机(boltdb等)。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/d5/cffba70a79609f29e1f2ae1f3bd07fd5.png?wh=1920*1074\" alt=\"\"></p><p>此时若client发起一个读取hello的请求，假设此请求直接从状态机中读取， 如果连接到的是C节点，若C节点磁盘I/O出现波动，可能导致它应用已提交的日志条目很慢，则会出现更新hello为world的写命令，在client读hello的时候还未被提交到状态机，因此就可能读取到旧数据，如上图查询hello流程所示。</p><p>从以上介绍我们可以看出，在多节点etcd集群中，各个节点的状态机数据一致性存在差异。而我们不同业务场景的读请求对数据是否最新的容忍度是不一样的，有的场景它可以容忍数据落后几秒甚至几分钟，有的场景要求必须读到反映集群共识的最新数据。</p><p>我们首先来看一个<strong>对数据敏感度较低的场景</strong>。</p><p>假如老板让你做一个旁路数据统计服务，希望你每分钟统计下etcd里的服务、配置信息等，这种场景其实对数据时效性要求并不高，读请求可直接从节点的状态机获取数据。即便数据落后一点，也不影响业务，毕竟这是一个定时统计的旁路服务而已。</p><p>这种直接读状态机数据返回、无需通过Raft协议与集群进行交互的模式，在etcd里叫做<strong>串行(<strong><strong>Serializable</strong></strong>)读</strong>，它具有低延时、高吞吐量的特点，适合对数据一致性要求不高的场景。</p><p>我们再看一个<strong>对数据敏感性高的场景</strong>。</p><p>当你发布服务，更新服务的镜像的时候，提交的时候显示更新成功，结果你一刷新页面，发现显示的镜像的还是旧的，再刷新又是新的，这就会导致混乱。再比如说一个转账场景，Alice给Bob转账成功，钱被正常扣出，一刷新页面发现钱又回来了，这也是令人不可接受的。</p><p>以上的业务场景就对数据准确性要求极高了，在etcd里面，提供了一种线性读模式来解决对数据一致性要求高的场景。</p><p><strong>什么是线性读呢?</strong></p><p>你可以理解一旦一个值更新成功，随后任何通过线性读的client都能及时访问到。虽然集群中有多个节点，但client通过线性读就如访问一个节点一样。etcd默认读模式是线性读，因为它需要经过Raft协议模块，反应的是集群共识，因此在延时和吞吐量上相比串行读略差一点，适用于对数据一致性要求高的场景。</p><p>如果你的etcd读请求显示指定了是串行读，就不会经过架构图流程中的流程三、四。默认是线性读，因此接下来我们看看读请求进入线性读模块，它是如何工作的。</p><h3>线性读之ReadIndex</h3><p>前面我们聊到串行读时提到，它之所以能读到旧数据，主要原因是Follower节点收到Leader节点同步的写请求后，应用日志条目到状态机是个异步过程，那么我们能否有一种机制在读取的时候，确保最新的数据已经应用到状态机中？</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/cc/1c065788051c6eaaee965575a04109cc.png?wh=1920*1095\" alt=\"\"></p><p>其实这个机制就是叫ReadIndex，它是在etcd 3.1中引入的，我把简化后的原理图放在了上面。当收到一个线性读请求时，它首先会从Leader获取集群最新的已提交的日志索引(committed index)，如上图中的流程二所示。</p><p>Leader收到ReadIndex请求时，为防止脑裂等异常场景，会向Follower节点发送心跳确认，一半以上节点确认Leader身份后才能将已提交的索引(committed index)返回给节点C(上图中的流程三)。</p><p>C节点则会等待，直到状态机已应用索引(applied index)大于等于Leader的已提交索引时(committed Index)(上图中的流程四)，然后去通知读请求，数据已赶上Leader，你可以去状态机中访问数据了(上图中的流程五)。</p><p>以上就是线性读通过ReadIndex机制保证数据一致性原理， 当然还有其它机制也能实现线性读，如在早期etcd 3.0中读请求通过走一遍Raft协议保证一致性， 这种Raft log read机制依赖磁盘IO， 性能相比ReadIndex较差。</p><p>总体而言，KVServer模块收到线性读请求后，通过架构图中流程三向Raft模块发起ReadIndex请求，Raft模块将Leader最新的已提交日志索引封装在流程四的ReadState结构体，通过channel层层返回给线性读模块，线性读模块等待本节点状态机追赶上Leader进度，追赶完成后，就通知KVServer模块，进行架构图中流程五，与状态机中的MVCC模块进行进行交互了。</p><h2>MVCC</h2><p>流程五中的多版本并发控制(Multiversion concurrency control)模块是为了解决上一讲我们提到etcd v2不支持保存key的历史版本、不支持多key事务等问题而产生的。</p><p>它核心由内存树形索引模块(treeIndex)和嵌入式的KV持久化存储库boltdb组成。</p><p>首先我们需要简单了解下boltdb，它是个基于B+ tree实现的key-value键值库，支持事务，提供Get/Put等简易API给etcd操作。</p><p>那么etcd如何基于boltdb保存一个key的多个历史版本呢?</p><p>比如我们现在有以下方案：方案1是一个key保存多个历史版本的值；方案2每次修改操作，生成一个新的版本号(revision)，以版本号为key， value为用户key-value等信息组成的结构体。</p><p>很显然方案1会导致value较大，存在明显读写放大、并发冲突等问题，而方案2正是etcd所采用的。boltdb的key是全局递增的版本号(revision)，value是用户key、value等字段组合成的结构体，然后通过treeIndex模块来保存用户key和版本号的映射关系。</p><p>treeIndex与boltdb关系如下面的读事务流程图所示，从treeIndex中获取key hello的版本号，再以版本号作为boltdb的key，从boltdb中获取其value信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/a3/4e2779c265c1da1f7209b5293e3789a3.png?wh=1920*1124\" alt=\"\"></p><h3>treeIndex</h3><p>treeIndex模块是基于Google开源的内存版btree库实现的，为什么etcd选择上图中的B-tree数据结构保存用户key与版本号之间的映射关系，而不是哈希表、二叉树呢？在后面的课程中我会再和你介绍。</p><p>treeIndex模块只会保存用户的key和相关版本号信息，用户key的value数据存储在boltdb里面，相比ZooKeeper和etcd v2全内存存储，etcd v3对内存要求更低。</p><p>简单介绍了etcd如何保存key的历史版本后，架构图中流程六也就非常容易理解了， 它需要从treeIndex模块中获取hello这个key对应的版本号信息。treeIndex模块基于B-tree快速查找此key，返回此key对应的索引项keyIndex即可。索引项中包含版本号等信息。</p><h3>buffer</h3><p>在获取到版本号信息后，就可从boltdb模块中获取用户的key-value数据了。不过有一点你要注意，并不是所有请求都一定要从boltdb获取数据。</p><p>etcd出于数据一致性、性能等考虑，在访问boltdb前，首先会从一个内存读事务buffer中，二分查找你要访问key是否在buffer里面，若命中则直接返回。</p><h3>boltdb</h3><p>若buffer未命中，此时就真正需要向boltdb模块查询数据了，进入了流程七。</p><p>我们知道MySQL通过table实现不同数据逻辑隔离，那么在boltdb是如何隔离集群元数据与用户数据的呢？答案是bucket。boltdb里每个bucket类似对应MySQL一个表，用户的key数据存放的bucket名字的是key，etcd MVCC元数据存放的bucket是meta。</p><p>因boltdb使用B+ tree来组织用户的key-value数据，获取bucket key对象后，通过boltdb的游标Cursor可快速在B+ tree找到key hello对应的value数据，返回给client。</p><p>到这里，一个读请求之路执行完成。</p><h2>小结</h2><p>最后我们来小结一下，一个读请求从client通过Round-robin负载均衡算法，选择一个etcd server节点，发出gRPC请求，经过etcd server的KVServer模块、线性读模块、MVCC的treeIndex和boltdb模块紧密协作，完成了一个读请求。</p><p>通过一个读请求，我带你初步了解了etcd的基础架构以及各个模块之间是如何协作的。</p><p>在这过程中，我想和你特别总结下client的节点故障自动转移和线性读。</p><p>一方面， client的通过负载均衡、错误处理等机制实现了etcd节点之间的故障的自动转移，它可助你的业务实现服务高可用，建议使用etcd 3.4分支的client版本。</p><p>另一方面，我详细解释了etcd提供的两种读机制(串行读和线性读)原理和应用场景。通过线性读，对业务而言，访问多个节点的etcd集群就如访问一个节点一样简单，能简洁、快速的获取到集群最新共识数据。</p><p>早期etcd线性读使用的Raft log read，也就是说把读请求像写请求一样走一遍Raft的协议，基于Raft的日志的有序性，实现线性读。但此方案读涉及磁盘IO开销，性能较差，后来实现了ReadIndex读机制来提升读性能，满足了Kubernetes等业务的诉求。</p><h2>思考题</h2><p>etcd在执行读请求过程中涉及磁盘IO吗？如果涉及，是什么模块在什么场景下会触发呢？如果不涉及，又是什么原因呢？</p><p>你可以把你的思考和观点写在留言区里，我会在下一节课里给出我的答案。</p><p>感谢你阅读，也欢迎你把这篇文章分享给更多的朋友一起阅读，我们下节课见。</p>","comments":[{"had_liked":false,"id":278920,"user_name":"hiroshi","can_delete":false,"product_type":"c1","uid":1398604,"ip_address":"","ucode":"2BEB51DBED1B87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4S6xTsiauPNbQrEHiayUVNvNXgl1WR4BFwvuJbPbGicSzpbYeKNGicPJ8RiaibAGZEDLcicJRibGQNUqfjs2t90EBPK9Pg/132","comment_is_top":false,"comment_ctime":1613462009,"is_pvip":false,"replies":[{"id":"101509","content":"非常好的问题，我个人认为主要还是性能因素，我记得etcd v2早期的时候如果你指定线性读&#47;共识读，它就是直接转发给leader的。后来在etcd v3.0中实现了raft log read但是要走一遍raft log，读涉及到磁盘IO，v3.1中引入了readIndex机制，它是非常轻量级的，开销较小，相比各个follower都转发给leader会导致leader负载较高，特别是expensive request场景，性能会急剧下降，leader的内存、cpu、网络带宽资源都很容易耗尽，readIndex机制的引入，使得每个follower节点都可以处理读请求，极大扩展提升了写性能。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1613750261,"ip_address":"","comment_id":278920,"utype":1}],"discussion_count":7,"race_medal":0,"score":"212066859513","product_id":100069901,"comment_content":"老师，readIndex 需要请求 leader，那为啥不直接让 leader 返回读请求的结果，而要等待自己的进度赶上 leader？","like_count":50,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515559,"discussion_content":"非常好的问题，我个人认为主要还是性能因素，我记得etcd v2早期的时候如果你指定线性读/共识读，它就是直接转发给leader的。后来在etcd v3.0中实现了raft log read但是要走一遍raft log，读涉及到磁盘IO，v3.1中引入了readIndex机制，它是非常轻量级的，开销较小，相比各个follower都转发给leader会导致leader负载较高，特别是expensive request场景，性能会急剧下降，leader的内存、cpu、网络带宽资源都很容易耗尽，readIndex机制的引入，使得每个follower节点都可以处理读请求，极大扩展提升了写性能。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613750261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069510,"avatar":"https://static001.geekbang.org/account/avatar/00/10/51/c6/5929b321.jpg","nickname":"1","note":"","ucode":"47999DCE76E566","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391975,"discussion_content":"readIndex 需要请求 leader 获取集群最新的已提交的日志索引，并且同时 &#34; leader 会向Follower节点发送心跳确认，一半以上节点确认Leader身份后才能将已提交的索引(committed index)返回给节点C&#34;  这些操作，怎么看起来都不轻量啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630742869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2526329,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIMRcKFGZTZGGs6eTTZ1Bb3AiaNnYxN1nrFITlThnx8a664O7wN8aRfm4bjIIwKTP6Na4dibHTib2Cg/132","nickname":"Geek_13d905","note":"","ucode":"CDF5018C1F3FA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391191,"discussion_content":"这个问题可以辩证的来看，例如：cockroachDB底层使用multi-raft，通过数据分片，每一个RaftGroup只负责处理一部分请求，直接让leader返回读请求的结果，减少了读请求的处理延迟，提升了读的性能，由于采用数据分片，又不会对写的性能造成影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630327971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069510,"avatar":"https://static001.geekbang.org/account/avatar/00/10/51/c6/5929b321.jpg","nickname":"1","note":"","ucode":"47999DCE76E566","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391977,"discussion_content":"leader 直接返回读请求的结果 不是要轻量级一些吗，因为不需要各个节点的同步了，我觉得原因是：raft 是通过读时修复各个节点的一致性的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630743009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2339434,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep7iazHRVUcqZ3tQzS9TOYdRjkK0fkx11cWpia4DVEceak52YgsZXHw2mwXibCZWnGxZ70tIxyNGr5rw/132","nickname":"Geek_2c36c4","note":"","ucode":"207BFB0406798E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069510,"avatar":"https://static001.geekbang.org/account/avatar/00/10/51/c6/5929b321.jpg","nickname":"1","note":"","ucode":"47999DCE76E566","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413401,"discussion_content":"唐老师的意思应该是，比如key对应的value很大时，如果采用你说的方法，那leader需要将value传输给follower，比较消耗资源。而readIndex相对很轻量","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636465322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391977,"ip_address":""},"score":413401,"extra":""},{"author":{"id":2373669,"avatar":"https://static001.geekbang.org/account/avatar/00/24/38/25/104e878f.jpg","nickname":"王也","note":"","ucode":"AE449241412D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069510,"avatar":"https://static001.geekbang.org/account/avatar/00/10/51/c6/5929b321.jpg","nickname":"1","note":"","ucode":"47999DCE76E566","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563994,"discussion_content":"我觉得老师说的重点不在于轻量级，而在于负载。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650123419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391977,"ip_address":""},"score":563994,"extra":""},{"author":{"id":1389941,"avatar":"https://static001.geekbang.org/account/avatar/00/15/35/75/a99df8bb.jpg","nickname":"智伤","note":"","ucode":"897CA384BF9B28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2339434,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep7iazHRVUcqZ3tQzS9TOYdRjkK0fkx11cWpia4DVEceak52YgsZXHw2mwXibCZWnGxZ70tIxyNGr5rw/132","nickname":"Geek_2c36c4","note":"","ucode":"207BFB0406798E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574327,"discussion_content":"单对于etcd来说存的都是服务数据 不是用户数据 不存在啥大key的... 所以... 感觉还是很鸡肋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653978556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":413401,"ip_address":""},"score":574327,"extra":""}]}]},{"had_liked":false,"id":275668,"user_name":"姜姜","can_delete":false,"product_type":"c1","uid":1120332,"ip_address":"","ucode":"1DAD620C8E9F31","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","comment_is_top":false,"comment_ctime":1611639476,"is_pvip":false,"replies":[{"id":"100200","content":"谢谢你的提问，我先简单快速回答下，后面不清楚的再写答疑文章深入解答<br>问题1和2是gRPC拦截器相关知识我推荐你看下这篇文章https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;80023990<br>问题3你理解串行读是“非强一致性读”，线性读是“强一致性读”没问题，至于串行含义并非你想的那样，你可以参考下维基百科的定义, 09事务篇我也会介绍事务隔离中的串行化<br>https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Serializability<br>问题4 建议先去阅读下04 raft篇，它本值上就是一个uint64的索引，表示日志条目序号<br>问题5，{2,0}={major,sub} 2是etcd mvcc事务版本号全局递增，0是事务内子版本号随修改操作递增（比如一个txn事务中多个put&#47;delete操作，其会从0递增)，07 mvcc会详细介绍<br>问题6，一个bucket对应一个颗B+tree","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611749740,"ip_address":"","comment_id":275668,"utype":1}],"discussion_count":6,"race_medal":0,"score":"100395887284","product_id":100069901,"comment_content":"老师，文中有些地方不太明白:<br>1, KVServer中的拦截器<br>我认为它只是作为一个辅助的功能吧，用于实现一些观测功能。但对于一个普通的读请求，是否必须通过拦截器才能完成读取数据的操作？<br><br>2, 文中“handler 首先会将上面描述的一系列拦截器串联成一个执行”<br>这段话中，拦截器是一系列的，一系列是指会有多个拦截器吗？难道不是一个请求只注册一个拦截器吗，还能注册多个？为什么要注册多个？<br>“串联成一个执行”，如何串联成一个？将多个拦截器串联成一个拦截器？<br><br>3, 串行读与线性读<br>这里我理解串行读是“非强一致性读”，线性读是“强一致性读”，对吗？<br>而且这里的“串行”总让我想到“并行&#47;串行”的概念，不知有关系吗？<br><br>4, ReadIndex，committed index，applied index<br>这几种索引底层实现是一样的吗，它们的数据结构是怎样的？是对同一份数据，分别建立不同的索引？又为什么建立这么多种索引？<br><br>5，版本号<br>您说是一个递增的全局ID， revision{2, 0}，ID指的是2还是0？ 版本号的格式是怎样的，另一个数字代表什么？<br><br>6,  bucket<br>请问一个 bucket 相当于一整个 B+ tree 索引树吗？还是相当于 B+ tree 中一个节点？","like_count":24,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514430,"discussion_content":"谢谢你的提问，我先简单快速回答下，后面不清楚的再写答疑文章深入解答\n问题1和2是gRPC拦截器相关知识我推荐你看下这篇文章https://zhuanlan.zhihu.com/p/80023990\n问题3你理解串行读是“非强一致性读”，线性读是“强一致性读”没问题，至于串行含义并非你想的那样，你可以参考下维基百科的定义, 09事务篇我也会介绍事务隔离中的串行化\nhttps://en.wikipedia.org/wiki/Serializability\n问题4 建议先去阅读下04 raft篇，它本值上就是一个uint64的索引，表示日志条目序号\n问题5，{2,0}={major,sub} 2是etcd mvcc事务版本号全局递增，0是事务内子版本号随修改操作递增（比如一个txn事务中多个put/delete操作，其会从0递增)，07 mvcc会详细介绍\n问题6，一个bucket对应一个颗B+tree","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611749740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134895,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/2f/7b04140c.jpg","nickname":"孫やさん","note":"","ucode":"C60877C1C71685","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578469,"discussion_content":"哥们 我猜你不是做开发的，否则你应该知道有种设计模式交责任链，这个过滤器就是责任链模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656804858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133945,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","nickname":"慢动作","note":"","ucode":"62C944F4A4D8AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381411,"discussion_content":"https://golang2.eddycjy.com/posts/ch3/08-grpc-interceptor/没讲明白。函数式编程，拦截器其实就是个方法，拦截器链就是方法的递归调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625043817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345590,"discussion_content":"再补充下\nIndex\n\n单调递增，每次经过 Raft 模块发起变更操作时由 leader 增加，一个index存储一个日志条目，条目内保存了put hello为world等信息\n\n\ncommitted Index\n表示经过 Raft 协议确认提交的数据 Index\n\napplied Index\n已经被应用层应用的 Index\n\nReadIndex就是查询Leader的committed index\n\n计划后面增加一篇答疑篇介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611750795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":345610,"discussion_content":"多谢老师解惑！我先消化一下……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611753138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345590,"ip_address":""},"score":345610,"extra":""},{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345614,"discussion_content":"嗯，学完基础篇，回过投来再细品02 03你会理解更加透彻","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611753709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345610,"ip_address":""},"score":345614,"extra":""}]}]},{"had_liked":false,"id":275631,"user_name":"小军","can_delete":false,"product_type":"c1","uid":1200516,"ip_address":"","ucode":"77221386C5D3E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yb5R8iaxicD8sfspaUaqMDpOopzqGjcnqxI83kxJcDlOUcdHTPP8wx6PzEiaNvl5Sf3CuMtU6r1Jzf3M0AQuef96w/132","comment_is_top":false,"comment_ctime":1611626200,"is_pvip":true,"replies":[{"id":"100026","content":"线性读，读出来的值实际上是你发出读请求时间点的集群最新共识数据，在你读请求发出后，若耗时一定时间还未完成，在这过程中leader又收到了写请求更新了它,   的确你原来读出来的值相比最新的集群共识就是旧的，在实际应用中，我们一般会通过增加版本号检测识别此类问题，后面事务篇会详细和你介绍","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611634716,"ip_address":"","comment_id":275631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78921037528","product_id":100069901,"comment_content":"请问老师，当Readindex结束并等待本节点的状态机apply的时候，key又被最新的更新请求给更新了怎么办，这个时候读取到的value是不是又是旧值了","like_count":18,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514421,"discussion_content":"线性读，读出来的值实际上是你发出读请求时间点的集群最新共识数据，在你读请求发出后，若耗时一定时间还未完成，在这过程中leader又收到了写请求更新了它,   的确你原来读出来的值相比最新的集群共识就是旧的，在实际应用中，我们一般会通过增加版本号检测识别此类问题，后面事务篇会详细和你介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611634716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275636,"user_name":"chapin","can_delete":false,"product_type":"c1","uid":1070020,"ip_address":"","ucode":"BB1800A771A8E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/c4/dea5d7f3.jpg","comment_is_top":false,"comment_ctime":1611627053,"is_pvip":false,"replies":[{"id":"100025","content":"没关系的，可以先大概看一篇，了解整个流程，不懂什么地方可以等学完后面后，回过头来再看就非常亲切了，后面每节中都有etcd特性体验案例，建议你跟着我一起实际操作下，比如02你就先准备好环境，能用goreman快速启一个多节点集群，也可以自己直接二进制启动一个单节点集群，然后体验一下get，put命令，随着后面的学习你会越来越了解etcd","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611634008,"ip_address":"","comment_id":275636,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44561300013","product_id":100069901,"comment_content":"没有基础，学习这个，可能会比较吃力。","like_count":10,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514423,"discussion_content":"没关系的，可以先大概看一篇，了解整个流程，不懂什么地方可以等学完后面后，回过头来再看就非常亲切了，后面每节中都有etcd特性体验案例，建议你跟着我一起实际操作下，比如02你就先准备好环境，能用goreman快速启一个多节点集群，也可以自己直接二进制启动一个单节点集群，然后体验一下get，put命令，随着后面的学习你会越来越了解etcd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611634008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275128,"user_name":"站在树上的松鼠","can_delete":false,"product_type":"c1","uid":2238479,"ip_address":"","ucode":"10D1D71BF988AE","user_header":"https://static001.geekbang.org/account/avatar/00/22/28/0f/e0abc71b.jpg","comment_is_top":false,"comment_ctime":1611318501,"is_pvip":false,"replies":[{"id":"100038","content":"感谢超凡帮忙解答第一点，第二点取决于rpc方法，range clientv3库有重试策略，参考一下这个文件clientv3&#47;retry.go","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611639463,"ip_address":"","comment_id":275128,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31676089573","product_id":100069901,"comment_content":"老师，下面这句话没有理解到，麻烦解答下呢，谢谢！<br>在client 3.4之前的版本中，负载均衡算法有一个严重的Bug：如果第一个节点异常了，可能会导致你的client访问etcd server异常。<br>\t（1）这里第一个节点怎么理解呢？ 是指的负载均衡刚好选中的那个etcd server节点异常吗？<br>\t（2）如果访问的节点异常了，是client库中会做重试机制，还是业务代码需要做重试呢？<br>","like_count":7,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514220,"discussion_content":"感谢超凡帮忙解答第一点，第二点取决于rpc方法，range clientv3库有重试策略，参考一下这个文件clientv3/retry.go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611639463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206982,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/c6/9f2fbc17.jpg","nickname":"wswcfan","note":"","ucode":"9D09EBB77A381B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344277,"discussion_content":"这里第一个节点指的是client指定的endpoint参数列表的第一个，具体可以看下这个PR和相关的issue: \nhttps://github.com/etcd-io/etcd/pull/10911","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611383221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/46/66/fe7ca16e.jpg","nickname":"李龙龙","note":"","ucode":"3AB8C1FF061C3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556697,"discussion_content":"我们线上etcd 宕机触发这个bug了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647477654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2238479,"avatar":"https://static001.geekbang.org/account/avatar/00/22/28/0f/e0abc71b.jpg","nickname":"站在树上的松鼠","note":"","ucode":"10D1D71BF988AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344644,"discussion_content":"谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611543168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275064,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1219972,"ip_address":"","ucode":"35E2DAA386FB86","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/84/171b2221.jpg","comment_is_top":false,"comment_ctime":1611292386,"is_pvip":false,"replies":[{"id":"99810","content":"嗯，不清楚的地方不要急，后面的每节会帮助你一个个解开疑问","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611312131,"ip_address":"","comment_id":275064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31676063458","product_id":100069901,"comment_content":"干货太多需要慢慢消化！老师能把课程代码放到github上吗……谢谢老师","like_count":7,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514202,"discussion_content":"嗯，不清楚的地方不要急，后面的每节会帮助你一个个解开疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611312131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277460,"user_name":"yayiyaya","can_delete":false,"product_type":"c1","uid":1615156,"ip_address":"","ucode":"38532C740FA186","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/34/6e3e962f.jpg","comment_is_top":false,"comment_ctime":1612422375,"is_pvip":true,"replies":[{"id":"100685","content":"etcd启动的时候通过mmap将db文件映射到内存，会告诉内核预读文件，下一讲给了参考答案","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1612484325,"ip_address":"","comment_id":277460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23087258855","product_id":100069901,"comment_content":"问答： etcd 在执行读请求过程中涉及磁盘 IO 吗？<br>答： 涉及到磁盘， 当读请求从treeIndex获取到用户的 key 和相关版本号信息后，去查询value值时， 没有命中 buffer， 会从boltdb获取数据， 这个时候就涉及到了磁盘。","like_count":5,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515060,"discussion_content":"etcd启动的时候通过mmap将db文件映射到内存，会告诉内核预读文件，下一讲给了参考答案","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612484325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275963,"user_name":"Want less","can_delete":false,"product_type":"c1","uid":1052649,"ip_address":"","ucode":"E5725F651A9E5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/e9/564eaf5b.jpg","comment_is_top":false,"comment_ctime":1611731578,"is_pvip":false,"replies":[{"id":"100192","content":"不是的哈，follower节点也可以处理读请求的，只是线性读时需要向leader发送readindex消息，然后确保本节点数据是最新的","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611740558,"ip_address":"","comment_id":275963,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18791600762","product_id":100069901,"comment_content":"当收到一个线性读请求时，它首先会从 Leader 获取集群最新的已提交的日志索引 (committed index)。<br>所有的client请求不是应该都通过leader下发至follower吗？","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514547,"discussion_content":"不是的哈，follower节点也可以处理读请求的，只是线性读时需要向leader发送readindex消息，然后确保本节点数据是最新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611740558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275759,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1611661188,"is_pvip":false,"replies":[{"id":"100076","content":"嗯，每个key在treeIndex中有一个对应的数据结构keyIndex,它保存了所有版本号(若未压缩)，07讲mvcc将详细介绍","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611670967,"ip_address":"","comment_id":275759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18791530372","product_id":100069901,"comment_content":"请教一个问题，在treeIndex中查询key对应的版本号，这里是会返回当前key的所有版本号吗？","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514463,"discussion_content":"嗯，每个key在treeIndex中有一个对应的数据结构keyIndex,它保存了所有版本号(若未压缩)，07讲mvcc将详细介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611670967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275098,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1611307164,"is_pvip":true,"replies":[{"id":"100039","content":"嗯，可以理解为随机，首先它会尝试连接所有etcd节点，连接建立后选择一个固定的长连接，其他关闭","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611639521,"ip_address":"","comment_id":275098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18791176348","product_id":100069901,"comment_content":"如果你的 client 版本 &lt;= 3.3，那么当你配置多个 endpoint 时，负载均衡算法仅会从中选择一个 IP 并创建一个连接（Pinned endpoint）<br><br>请问，此句提到的负载均衡算法是否等同：随机选中某个IP？","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514211,"discussion_content":"嗯，可以理解为随机，首先它会尝试连接所有etcd节点，连接建立后选择一个固定的长连接，其他关闭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611639521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275018,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1611278875,"is_pvip":false,"replies":[{"id":"99812","content":"读请求不涉及wal log，读流程中你可以看看不需要它，写请求会介绍，lsm树是leveldb使用的存储模型，etcd使用的是b+tree。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611312426,"ip_address":"","comment_id":275018,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18791148059","product_id":100069901,"comment_content":"wal log里面会涉及到磁盘读写。lsm树，双memtable，都满了刷到磁盘，继续写memtable.","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514188,"discussion_content":"读请求不涉及wal log，读流程中你可以看看不需要它，写请求会介绍，lsm树是leveldb使用的存储模型，etcd使用的是b+tree。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611312426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2526329,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIMRcKFGZTZGGs6eTTZ1Bb3AiaNnYxN1nrFITlThnx8a664O7wN8aRfm4bjIIwKTP6Na4dibHTib2Cg/132","nickname":"Geek_13d905","note":"","ucode":"CDF5018C1F3FA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391194,"discussion_content":"RocksDB是使用LSMTree来存储数据，其中WAL主要用来做故障恢复，MemTable分为两类：可读可写的MemTable和只读MemTable。RocksDB处理读请求时用不到WAL，大致的查询流程是：可读可写的MemTable -> 只读MemTable -> SSTable。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630328650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275734,"user_name":"七里","can_delete":false,"product_type":"c1","uid":1042604,"ip_address":"","ucode":"614A35DE72C739","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/ac/7324d5ca.jpg","comment_is_top":false,"comment_ctime":1611654567,"is_pvip":false,"replies":[{"id":"100079","content":"boltdb的key是revision，revision本身由etcd mvcc模块维护全局单调递增","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611671771,"ip_address":"","comment_id":275734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201589159","product_id":100069901,"comment_content":"boltdb怎么保证全局的revision呢","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514456,"discussion_content":"boltdb的key是revision，revision本身由etcd mvcc模块维护全局单调递增","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611671771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275212,"user_name":"no-one","can_delete":false,"product_type":"c1","uid":1299611,"ip_address":"","ucode":"671D30DEA36668","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/9b/00f6c7f8.jpg","comment_is_top":false,"comment_ctime":1611391314,"is_pvip":false,"replies":[{"id":"99875","content":"是的，follower节点是无法确认自己是否最新的，数据是leader向follower同步的","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611401920,"ip_address":"","comment_id":275212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201325906","product_id":100069901,"comment_content":"如果读之前follower节点的索引已经是最新的了，还会先去leader节点读readindex吗","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514264,"discussion_content":"是的，follower节点是无法确认自己是否最新的，数据是leader向follower同步的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611401920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275105,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1611308181,"is_pvip":false,"replies":[{"id":"100035","content":"好的，第一点，加餐篇计划增加集群成员管理等内容，第二点，任何follower节点都可以处理读请求，如果是线性读，它们都会向leader节点发出readindex请求，然后等待本节点数据赶上leader，如果一个follower节点io异常，数据落后多就可能超时","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611638692,"ip_address":"","comment_id":275105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201242773","product_id":100069901,"comment_content":"另外还想问下唐老师，是否会有章节介绍下etcd集群管理和请求路由的原理，比如节点如何探活及增减，及像在线性读场景里，请求是否一定要通过已提交的quorum内节点处理还是任何节点都可以处理呢？","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514214,"discussion_content":"好的，第一点，加餐篇计划增加集群成员管理等内容，第二点，任何follower节点都可以处理读请求，如果是线性读，它们都会向leader节点发出readindex请求，然后等待本节点数据赶上leader，如果一个follower节点io异常，数据落后多就可能超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611638692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275010,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1611276578,"is_pvip":true,"replies":[{"id":"100040","content":"参考我上面的评论，超时后依赖客户端重试，3.4中round-robin负载均衡算法重试后就会选择另外一个节点","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611639712,"ip_address":"","comment_id":275010,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10201211170","product_id":100069901,"comment_content":"老师，如果ReadIndex读过程中，流程4状态机迟迟不应用索引？或者流程5中，未能通知到读请求？这些情况会换节点读还是幂等重试呢？","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514185,"discussion_content":"参考我上面的评论，超时后依赖客户端重试，3.4中round-robin负载均衡算法重试后就会选择另外一个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611639712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344216,"discussion_content":"如果从leader获取committed index或等待状态机应用索引出线异常，这个读请求就会超时，直接报错返回给client了，由client重试，server端无重试机制。ReadIndex超时一般etcd日志可能会打印如下的日志\ntimed out waiting for read index response (local node might have slow network)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611331955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337952,"user_name":"抖腿冠军","can_delete":false,"product_type":"c1","uid":1525420,"ip_address":"","ucode":"66162C20658284","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/ac/9c324436.jpg","comment_is_top":false,"comment_ctime":1647177703,"is_pvip":false,"replies":[{"id":"125743","content":"https:&#47;&#47;github.com&#47;mattn&#47;goreman<br>go install github.com&#47;mattn&#47;goreman@latest<br>具体遇到了什么问题吗","user_name":"作者回复","user_name_real":"编辑","uid":"1009582","ctime":1651632410,"ip_address":"","comment_id":337952,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5942144999","product_id":100069901,"comment_content":"这个goreman  怎么搞不下来？ 只有我一个人搞不下来？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569990,"discussion_content":"https://github.com/mattn/goreman\ngo install github.com/mattn/goreman@latest\n具体遇到了什么问题吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651632410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2373669,"avatar":"https://static001.geekbang.org/account/avatar/00/24/38/25/104e878f.jpg","nickname":"王也","note":"","ucode":"AE449241412D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563997,"discussion_content":"改一下goproxy配置试试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650123892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716827,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/5b/d0c7e813.jpg","nickname":"luo","note":"","ucode":"1A1DA8EB916ECF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566154,"discussion_content":"直接手动，更方便便捷：https://doczhcn.gitbook.io/etcd/index/index-1/clustering","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650614991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332002,"user_name":"Geek_604077","can_delete":false,"product_type":"c1","uid":1969081,"ip_address":"","ucode":"3BDCDCA9187514","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S5MOS96THy0gQXcF26PNsnRBpyr3pM5rVibZdYvAibpVvAGfibF1ddpgrteg9fQUsq4vce9EM95Jj97Q/132","comment_is_top":false,"comment_ctime":1642955262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5937922558","product_id":100069901,"comment_content":"环境准备中踩坑日记<br>\t我用的是etcd Version: 3.5.0版本<br>\t1、需要将etcd解压文件夹下的bin文件目录设置到环境变量中，<br>\t   官网文档修改环境变量用的是export的方式，该方式只会在<br>\t   当前会话生效（难怪我打开别的终端窗口就执行不了etcd的<br>\t   命令）可以通过sudo vim .&#47;bash_profile的方式添加<br>\t   全局才会生效<br>\t2、文稿中的下载 goreman Procfile的文件需要做一点修改把<br>\t“bin&#47;etcd”改成“etcd”即可因为我们刚刚设置了全局的环境变<br>\t量<br>\t3、etcdctl get hello --endpoints http:&#47;&#47;127.0.0.1:2379<br>\t没有输出任何内容，这个人猜测是因为版本于老师版本不一致的原因<br>\t我用官网快速开始文档教程动手试了试有输出正常的hello etcd的<br>\t（以上是我在安装etcd踩的坑，因为我比较小白，贴出来印象深刻些，<br>\t毕竟老师的课堂作业做不出来，也不想空着）<br><br>","like_count":1},{"had_liked":false,"id":319540,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1635845080,"is_pvip":true,"replies":[{"id":"119294","content":"你可以理解为从架构图中的mvcc模块(treeindex&#47;boltdb)中读取.","user_name":"作者回复","user_name_real":"编辑","uid":"1009582","ctime":1640241361,"ip_address":"","comment_id":319540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5930812376","product_id":100069901,"comment_content":"从状态机里读数据是什么意思呢？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541043,"discussion_content":"你可以理解为从架构图中的mvcc模块(treeindex/boltdb)中读取.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640241361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315215,"user_name":"Geek_ddfeca","can_delete":false,"product_type":"c1","uid":2737540,"ip_address":"","ucode":"E9657C81FA0EA9","user_header":"","comment_is_top":false,"comment_ctime":1633750801,"is_pvip":false,"replies":[{"id":"114592","content":"是的，这时候就会产生数据不一致，apply失败的后果是非常严重的，正常情况下不会出现这个问题。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634312404,"ip_address":"","comment_id":315215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5928718097","product_id":100069901,"comment_content":"有一点没明白，文中提到：C 节点则会等待，直到状态机已应用索引 (applied index) 大于等于 Leader 的已提交索引时 (committed Index)(上图中的流程四)，然后去通知读请求，数据已赶上 Leader，你可以去状态机中访问数据了 (上图中的流程五)。<br>但12中提到，“etcd 无论 Apply 流程是成功还是失败，都会更新 raftAppliedIndex 值&quot;。那岂不是即使apply失败了，也会更新raftAppliedIndex ，但其实follower并没真正赶上leader，读到的还是旧数据?","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527905,"discussion_content":"是的，这时候就会产生数据不一致，apply失败的后果是非常严重的，正常情况下不会出现这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634312404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290609,"user_name":"Remember九离","can_delete":false,"product_type":"c1","uid":1237327,"ip_address":"","ucode":"97EE6E6344689F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/4f/00476b4c.jpg","comment_is_top":false,"comment_ctime":1619659086,"is_pvip":false,"replies":[{"id":"112712","content":"从设计上严格来说，etcd不存在脑裂，除非实现有问题。如果发生了网络分区，假设client与旧leader都处于网络分区节点小于n&#47;2+1的一侧，那么leader收到线性读请求后，在向多数follower节点发送心跳确认leader身份权威性的时候，就会失败，进而会报错给client.","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631057736,"ip_address":"","comment_id":290609,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5914626382","product_id":100069901,"comment_content":"有一个问题，当我发起一个线性读的时候，此时Leader 发生脑裂，这时候etcd是咋么处理的，响应异常？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519244,"discussion_content":"从设计上严格来说，etcd不存在脑裂，除非实现有问题。如果发生了网络分区，假设client与旧leader都处于网络分区节点小于n/2+1的一侧，那么leader收到线性读请求后，在向多数follower节点发送心跳确认leader身份权威性的时候，就会失败，进而会报错给client.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631057736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1752348,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jA97yib7VetXc4iclOg2gGfZu1fO7efyib2mKeqvIxDdmgLqukusyFzPrbIQeZYR0WDJUicRakgVGroaYC7aWGFrEw/132","nickname":"Turing","note":"","ucode":"F88679276D4841","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374280,"discussion_content":"论文里，leader需要发送心跳确认leader还是leader","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621093231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285003,"user_name":"%v","can_delete":false,"product_type":"c1","uid":2535070,"ip_address":"","ucode":"C08387DA4D01AE","user_header":"https://static001.geekbang.org/account/avatar/00/26/ae/9e/9ef2bf83.jpg","comment_is_top":false,"comment_ctime":1616574841,"is_pvip":false,"replies":[{"id":"103446","content":"如果treeIndex没找到，就不会去boltdb查询了，Range请求的响应包RangeResponse中的Kvs数组是空的，本身server没这个错误码。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1616651549,"ip_address":"","comment_id":285003,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5911542137","product_id":100069901,"comment_content":"请问下，老师，如果没从treeIndex 中获取到key对应的revision是不是就直接返回key not found了？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517549,"discussion_content":"如果treeIndex没找到，就不会去boltdb查询了，Range请求的响应包RangeResponse中的Kvs数组是空的，本身server没这个错误码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616651549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2535070,"avatar":"https://static001.geekbang.org/account/avatar/00/26/ae/9e/9ef2bf83.jpg","nickname":"%v","note":"","ucode":"C08387DA4D01AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372802,"discussion_content":"我这边使用客户端遇见一个很奇怪的问题，大量请求不存在的key，会出现dead context 读超时现象。照理说，key不存在应该立刻返回不应该超时。。而且正常的key,大值key都不会超时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620466804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275439,"user_name":"Nights Watch","can_delete":false,"product_type":"c1","uid":2057755,"ip_address":"","ucode":"A9E9F6D66BFDDF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/66/1b/1e76e031.jpg","comment_is_top":false,"comment_ctime":1611541116,"is_pvip":true,"replies":[{"id":"99970","content":"是的，可以看看03写请求分析，WAL和db文件都依赖磁盘IO性能","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611551549,"ip_address":"","comment_id":275439,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906508412","product_id":100069901,"comment_content":"老师，请问下etcd是不是对IO读写延迟要求很高，最近发现磁盘IO性能下降时apiserver连不上etcd","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514345,"discussion_content":"是的，可以看看03写请求分析，WAL和db文件都依赖磁盘IO性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611551549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275309,"user_name":"校歌","can_delete":false,"product_type":"c1","uid":2054611,"ip_address":"","ucode":"CD257668BB1A33","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKBENQekdV3e9XwRQ5kpO9Y9d81sEMm52qcwJWbFbWbW2rniaTFYCChoR0ibZ0E3soQqod9rvfmBibmQ/132","comment_is_top":false,"comment_ctime":1611462546,"is_pvip":true,"replies":[{"id":"99925","content":"看起来是正常错误，etcd master版本中我修复过，试试etcdctl get命令不报错吧","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611536967,"ip_address":"","comment_id":275309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906429842","product_id":100069901,"comment_content":"通过goreman，快速安装etcd集群，提示“transport: http2Server.HandleStreams failed to read frame: read tcp 127.0.0.1:2379-&gt;127.0.0.1:47320: read: connection reset by peer”，是什么那里设置不对吗？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514304,"discussion_content":"看起来是正常错误，etcd master版本中我修复过，试试etcdctl get命令不报错吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611536967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275240,"user_name":"Coder4","can_delete":false,"product_type":"c1","uid":1048453,"ip_address":"","ucode":"71DAC6B3D112DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcvQzf86HsxOkPcRpibBdCxDW0IK9wel9TmkEhicHPUHPRhzKna8wecDcJcVbNHNSrUMt4GHLxY3iaA/132","comment_is_top":false,"comment_ctime":1611405007,"is_pvip":false,"replies":[{"id":"99901","content":"嗯，你这么说也有道理，感谢，希望其他读者看到你的评论能有所帮助，我是参考etcd raft消息和接口使用的大写","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611457116,"ip_address":"","comment_id":275240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906372303","product_id":100069901,"comment_content":"ReadIndex其实没读懂，又查了下其他资料<br>其实应该是写成read index，维持和commited index一致，就能明白了","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514276,"discussion_content":"嗯，你这么说也有道理，感谢，希望其他读者看到你的评论能有所帮助，我是参考etcd raft消息和接口使用的大写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611457116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275141,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1611326870,"is_pvip":true,"replies":[{"id":"99848","content":"是的，每个节点都有WAL,  leader会向follower节点同步raft日志条目，日志条目中保存请求的命令，follower收到后会保存到wal中，此日志条目被提交后，各个节点应用它到状态机boltdb等中，后面两节会详细介绍，周一写请求原理，周三raft原理你看了后就非常清晰了。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611361036,"ip_address":"","comment_id":275141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906294166","product_id":100069901,"comment_content":"ETCD 集群中，每个节点都有 WAL 和状态机功能吗？ WAL 不是 leader 节点才起作用的？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514227,"discussion_content":"是的，每个节点都有WAL,  leader会向follower节点同步raft日志条目，日志条目中保存请求的命令，follower收到后会保存到wal中，此日志条目被提交后，各个节点应用它到状态机boltdb等中，后面两节会详细介绍，周一写请求原理，周三raft原理你看了后就非常清晰了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611361036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355425,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"湖北","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1661354994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661354994","product_id":100069901,"comment_content":"这里关于ReadIndex的有个细节，当其中某个节点没有追上大部分节点的时候，那么这里索引的结构信息里面，是不是就应该有一个字段列表，来获取当前已经追上的endpoints,并且是根据响应的先后顺序来排序的？ 同时这个结构，大概率是一个数组，会发送给客户端，那么假设一旦节点追上了，又重新更新了，这里通知客户端的机制是不是就是watch?嗯，有一些细节还是值得关注的。","like_count":0},{"had_liked":false,"id":354726,"user_name":"jiaobuchongจุ๊บ","can_delete":false,"product_type":"c1","uid":1118938,"ip_address":"北京","ucode":"0AEE4E579DC3A2","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg","comment_is_top":false,"comment_ctime":1660721567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660721567","product_id":100069901,"comment_content":"最近遇到一个问题，case跟这个 issue 一样，https:&#47;&#47;github.com&#47;etcd-io&#47;etcd&#47;issues&#47;10821，老师有什么解决方案吗？","like_count":0},{"had_liked":false,"id":353834,"user_name":"dreamintime","can_delete":false,"product_type":"c1","uid":1192982,"ip_address":"江苏","ucode":"0D22CF4A8ACA83","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6kFLT2oIiaU6fMCsC6ic2BWnXdm87OB3VibGFf4TUiaHQrUvU9V9hD3e2z8WwdOkumCWBZ8y05ia00UyicJorX5Xcskg/132","comment_is_top":false,"comment_ctime":1659854814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659854814","product_id":100069901,"comment_content":"下载下来的procfile需要放到哪个目录下面，goreman start出现了procfile no such file错误","like_count":0},{"had_liked":false,"id":352247,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1658478925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658478925","product_id":100069901,"comment_content":"* client 发送 `get &#47;foo` 线性读求到节点 C<br>* 节点C 从 Leader 节点获取最新提交的日志索引 committed index<br>* Leader 节点为了防止脑裂会向 Follower 节点 B C 发送心跳确认, 一半以上的 Follower 节点确认后, Leader 才会将最新的 committed index 发送给 C 节点<br>* C 节点会比较自己的日志索引和 Leader 的 committed index, 如果小于就等待<br>* 如果大于等于, 首先从 treeIndex 内存模块中获取 `&#47;foo` 的版本号<br>* 然后通过 `&#47;foo&#47;v2` 从 buffer 内存里面获取 value<br>* 如果 buffer 里面没有, 就从 boltdb 磁盘中获取<br>* 返回 client 数据","like_count":0},{"had_liked":false,"id":347535,"user_name":"molamola","can_delete":false,"product_type":"c1","uid":2184830,"ip_address":"","ucode":"BAE6A6A1E90E07","user_header":"https://static001.geekbang.org/account/avatar/00/21/56/7e/9c0d5172.jpg","comment_is_top":false,"comment_ctime":1654135407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654135407","product_id":100069901,"comment_content":"“etcd 提供了丰富的 metrics、日志、请求行为检查等机制”，老师，您好，请问下怎么开启和查看etcd的metrics","like_count":0},{"had_liked":false,"id":336931,"user_name":"特修斯之船","can_delete":false,"product_type":"c1","uid":1068192,"ip_address":"","ucode":"C041A289017D0C","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/a0/6cfdefa6.jpg","comment_is_top":false,"comment_ctime":1646476156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646476156","product_id":100069901,"comment_content":"线性读不也是要Leader确认大多数节点的心跳吗？和Raft Log Read的步骤好像一样？","like_count":0},{"had_liked":false,"id":335392,"user_name":"lixg","can_delete":false,"product_type":"c1","uid":1228028,"ip_address":"","ucode":"6E821145950FBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/fc/cf98963a.jpg","comment_is_top":false,"comment_ctime":1645501301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645501301","product_id":100069901,"comment_content":"老是，有一个地方没理解：<br>读流程获取到committed index 后，然后去treeindex读取对应的k的version，这里committed index和version怎么关联起来的，是哪里有保存的吗","like_count":0},{"had_liked":false,"id":333916,"user_name":"lixg","can_delete":false,"product_type":"c1","uid":1228028,"ip_address":"","ucode":"6E821145950FBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/fc/cf98963a.jpg","comment_is_top":false,"comment_ctime":1644582052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644582052","product_id":100069901,"comment_content":"一条日志被提交后，会在wal日志中追加记录吗，还是说只是修改内存中的committed  index","like_count":0},{"had_liked":false,"id":333561,"user_name":"米拉小胖子","can_delete":false,"product_type":"c1","uid":1200110,"ip_address":"","ucode":"E299B93F134CE0","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/ee/86864266.jpg","comment_is_top":false,"comment_ctime":1644406293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644406293","product_id":100069901,"comment_content":"“C 节点则会等待，直到状态机已应用索引 (applied index) 大于等于 Leader 的已提交索引时 (committed Index)(上图中的流程四)，然后去通知读请求，数据已赶上 Leader，你可以去状态机中访问数据了 (上图中的流程五)。”<br>老师，线性读的时候需要等待applied index &gt;= committed Index， 那等待过程中不会出现这个key又被更新了吗？ 还是说就算这个时候key被更新了也无关紧要，只要读取到的是发送读请求时刻的最新value，而不是返回读数据时刻的最新value?","like_count":0},{"had_liked":false,"id":330996,"user_name":"i_chase","can_delete":false,"product_type":"c1","uid":1795511,"ip_address":"","ucode":"09C41C863F4EA3","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/b7/058276dc.jpg","comment_is_top":false,"comment_ctime":1642346231,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1642346231","product_id":100069901,"comment_content":"tree index为什么使用b-tree？<br>boltdb又为什么使用b+树呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557676,"discussion_content":"个人理解：采用树形结构是因为b树和b+树对范围查询友好，而b+树相比b树对磁盘顺序读写性能友好但有多余节点，treeindex是内存结构，所以采用b树，boltdb是磁盘存储，所以采用b+树","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647928405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330939,"user_name":"躺着讀書","can_delete":false,"product_type":"c1","uid":1202727,"ip_address":"","ucode":"59BAFDECF2831B","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/27/538a9144.jpg","comment_is_top":false,"comment_ctime":1642316739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642316739","product_id":100069901,"comment_content":"请问：zk不支持线性读，我记得解决方案就是只读master节点吧？ ","like_count":0},{"had_liked":false,"id":328860,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1640920209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640920209","product_id":100069901,"comment_content":"从boltdb中读数据应该得触发磁盘io吧","like_count":0},{"had_liked":false,"id":325295,"user_name":"机智的我","can_delete":false,"product_type":"c1","uid":2058590,"ip_address":"","ucode":"C9C83C8DDE888B","user_header":"","comment_is_top":false,"comment_ctime":1638894094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638894094","product_id":100069901,"comment_content":"老师 请假下 如果apply阶段普遍比较慢 当key更新的时候 所有的wal也更新了 但因为apply阶段比较慢 查询的时候 leader返回的commitindex 并没有包含还在apply中的key 这时候会不会请求获取的还是老数据","like_count":0},{"had_liked":false,"id":319189,"user_name":"peterpc","can_delete":false,"product_type":"c1","uid":1222886,"ip_address":"","ucode":"48663EB8299D8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/e6/54a24332.jpg","comment_is_top":false,"comment_ctime":1635664412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635664412","product_id":100069901,"comment_content":"老师，我找到问题了，因为复制课程代码，http忘记更改为https了，更改为https就可以了。","like_count":0},{"had_liked":false,"id":319188,"user_name":"peterpc","can_delete":false,"product_type":"c1","uid":1222886,"ip_address":"","ucode":"48663EB8299D8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/e6/54a24332.jpg","comment_is_top":false,"comment_ctime":1635663422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635663422","product_id":100069901,"comment_content":"老师，我安装完成etcd集群，并查看状态已经正常启动：<br>+----------------------------+--------+-------------+-------+<br>|          ENDPOINT          | HEALTH |    TOOK     | ERROR |<br>+----------------------------+--------+-------------+-------+<br>| https:&#47;&#47;192.168.0.114:2379 |   true | 24.698118ms |       |<br>| https:&#47;&#47;192.168.0.116:2379 |   true | 25.837647ms |       |<br>| https:&#47;&#47;192.168.0.115:2379 |   true | 34.072852ms |       |<br>+----------------------------+--------+-------------+-------+<br>但是执行老师给的读命令提示如下错误，请问是什么问题：<br>&#47;opt&#47;etcd&#47;bin&#47;etcdctl get hello --endpoints http:&#47;&#47;192.168.0.114:2379                                                              {&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:&quot;2021-10-31T14:54:03.026+0800&quot;,&quot;caller&quot;:&quot;clientv3&#47;retry_interceptor.go:62&quot;,&quot;msg&quot;:&quot;retrying of unary invoker failed&quot;,&quot;target&quot;:&quot;endpoint:&#47;&#47;client-ecc9f9a5-7cd0-46d7-b5f4-ee3dc800b2d1&#47;192.168.0.114:2379&quot;,&quot;attempt&quot;:0,&quot;error&quot;:&quot;rpc error: code = DeadlineExceeded desc = latest balancer error: all SubConns are in TransientFailure, latest connection error: connection closed&quot;}<br>Error: context deadline exceeded","like_count":0},{"had_liked":false,"id":317657,"user_name":"Tomcat","can_delete":false,"product_type":"c1","uid":1399488,"ip_address":"","ucode":"58A9D44991EDB7","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/c0/e20eb855.jpg","comment_is_top":false,"comment_ctime":1634883185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634883185","product_id":100069901,"comment_content":"您好，在MVCC这个解决方案中 方案一为啥会存在写放大的问题啊 您能帮我解释一下吗？ 方案二不是会在 之前K-V 的基础上多存储一个版本号吗？ 占的内容会更多","like_count":0},{"had_liked":false,"id":316031,"user_name":"叶峥瑶","can_delete":false,"product_type":"c1","uid":1797584,"ip_address":"","ucode":"170E0F29BC6D4D","user_header":"","comment_is_top":false,"comment_ctime":1634111884,"is_pvip":false,"replies":[{"id":"114586","content":"可以的，但是你可能会读到旧数据，取决于你的业务场景。具体调整很简单，你可以参考etcd Range API(Serializable字段).<br>https:&#47;&#47;etcd.io&#47;docs&#47;v3.5&#47;learning&#47;api&#47;","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634309508,"ip_address":"","comment_id":316031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634111884","product_id":100069901,"comment_content":"你好，想问下etcd 默认应该实现的是你描述的线性读吧。。我们可以调整他的一致性级别吗？调整为串行读。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528244,"discussion_content":"可以的，但是你可能会读到旧数据，取决于你的业务场景。具体调整很简单，你可以参考etcd Range API(Serializable字段).\nhttps://etcd.io/docs/v3.5/learning/api/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634309508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314362,"user_name":"Geek_369a15","can_delete":false,"product_type":"c1","uid":2793128,"ip_address":"","ucode":"4B5A7F1B62A342","user_header":"","comment_is_top":false,"comment_ctime":1632986202,"is_pvip":false,"replies":[{"id":"114595","content":"故障的两个节点都无法启动了吗，报什么错误？可以提个issue详细看看，最坏可以通过从节点做快照重建个集群","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634313557,"ip_address":"","comment_id":314362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632986202","product_id":100069901,"comment_content":"etcd在 client 3.4 之前的版本中，负载均衡算法有一个严重的 Bug：如果第一个节点异常了，可能会导致你的 client 访问 etcd server 异常，特别是在 Kubernetes 场景中会导致 APIServer 不可用。不过，该 Bug 已在 Kubernetes 1.16 版本后被修复。--------公司的kubernetes版本是1.14，etcd版本是3.3.10, k8s集群起不来，原因是断电引起etcd数据不一致，一主二从，有一个从节点可以正常，其它都挂了，请问老师，这种情况可以修复吗，试了一些网上提的方法都不行，刚好在这篇文章看到了原因。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527659,"discussion_content":"故障的两个节点都无法启动了吗，报什么错误？可以提个issue详细看看，最坏可以通过从节点做快照重建个集群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634313557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312864,"user_name":"ming","can_delete":false,"product_type":"c1","uid":2316097,"ip_address":"","ucode":"AD183B7E1010A8","user_header":"https://static001.geekbang.org/account/avatar/00/23/57/41/886a9d74.jpg","comment_is_top":false,"comment_ctime":1632065675,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632065675","product_id":100069901,"comment_content":"老师，key的每次修改操作会生成一个新的revision号，也就是说多个revision号对应同一个key，那么通过treeIndex获取key的revision号，默认是返回最新的revision号吗？是的话旧的revision号要如何获取","like_count":0},{"had_liked":false,"id":312290,"user_name":"神毓逍遥","can_delete":false,"product_type":"c1","uid":2147220,"ip_address":"","ucode":"83351CB18B190E","user_header":"https://static001.geekbang.org/account/avatar/00/20/c3/94/e89ebc50.jpg","comment_is_top":false,"comment_ctime":1631718154,"is_pvip":true,"replies":[{"id":"113192","content":"赞，总结的非常好","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631796356,"ip_address":"","comment_id":312290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631718154","product_id":100069901,"comment_content":"本章节的作用，尤其针对新手，比如说我，了解了全景图，掌握了读请求的整个请求的路径这是重点，具体到链路中的每个模块是如何实现的，初次看时，不懂没关系，老师会在后续详细讲解，学习好比建大厦，先跟老师学习如何设计，画出架构图，然后针对每块知识点突击","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526926,"discussion_content":"赞，总结的非常好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631796356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312235,"user_name":"Action","can_delete":false,"product_type":"c1","uid":1239234,"ip_address":"","ucode":"FFFD1537C6BB3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c2/77a413a7.jpg","comment_is_top":false,"comment_ctime":1631697448,"is_pvip":false,"replies":[{"id":"113194","content":"执行什么命令报错 看起来没etcd这个二进制 去github上下载下","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631796495,"ip_address":"","comment_id":312235,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631697448","product_id":100069901,"comment_content":"17:16:33 etcd1 | Starting etcd1 on port 5000<br>17:16:33 etcd2 | Starting etcd2 on port 5100<br>17:16:33 etcd3 | Starting etcd3 on port 5200<br>17:16:33 etcd1 | &#47;bin&#47;sh: bin&#47;etcd: No such file or directory<br>17:16:33 etcd1 | Terminating etcd1<br>17:16:33 etcd2 | &#47;bin&#47;sh: bin&#47;etcd: No such file or directory<br>17:16:33 etcd2 | Terminating etcd2<br>17:16:33 etcd3 | &#47;bin&#47;sh: bin&#47;etcd: No such file or directory<br>17:16:33 etcd3 | Terminating etcd3<br>老师 我这问题应该怎么修复呀？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526906,"discussion_content":"执行什么命令报错 看起来没etcd这个二进制 去github上下载下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631796495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2454512,"avatar":"https://static001.geekbang.org/account/avatar/00/25/73/f0/69423887.jpg","nickname":"David","note":"","ucode":"B2D1533DAB3A24","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572179,"discussion_content":"The etcd command can be simply run as such if it is moved to the system path as below:\n\n```bash\nmv /tmp/etcd-download-test/etcd /usr/local/bin/\netcd\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652626593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310928,"user_name":"一粒","can_delete":false,"product_type":"c1","uid":1582813,"ip_address":"","ucode":"FB5F583CC6AE3C","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/dd/d58156b1.jpg","comment_is_top":false,"comment_ctime":1630990264,"is_pvip":true,"replies":[{"id":"113033","content":"learner节点是一个非投票成员节点(non-voting member), 可用于数据热备、提升成员变更管理过程中的稳定性等，详情可以参考etcd learner设计文档、https:&#47;&#47;etcd.io&#47;docs&#47;v3.4&#47;learning&#47;design-learner&#47;","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631546181,"ip_address":"","comment_id":310928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630990264","product_id":100069901,"comment_content":"“比如 etcd Learner 节点只允许指定接口和参数的访问”，老师，learner节点是什么角色","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526404,"discussion_content":"learner节点是一个非投票成员节点(non-voting member), 可用于数据热备、提升成员变更管理过程中的稳定性等，详情可以参考etcd learner设计文档、https://etcd.io/docs/v3.4/learning/design-learner/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631546181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310636,"user_name":"小超人","can_delete":false,"product_type":"c1","uid":1411096,"ip_address":"","ucode":"0D8A433F3E3737","user_header":"https://static001.geekbang.org/account/avatar/00/15/88/18/9744d5ec.jpg","comment_is_top":false,"comment_ctime":1630813671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630813671","product_id":100069901,"comment_content":"boltdb 模块会涉及磁盘 IO， treeIndex 模块只会保存用户的 key 和相关版本号信息，用户 key 的 value 数据存储在 boltdb 里面","like_count":0},{"had_liked":false,"id":310557,"user_name":"1","can_delete":false,"product_type":"c1","uid":1069510,"ip_address":"","ucode":"47999DCE76E566","user_header":"https://static001.geekbang.org/account/avatar/00/10/51/c6/5929b321.jpg","comment_is_top":false,"comment_ctime":1630744375,"is_pvip":false,"replies":[{"id":"112684","content":"在写事务结束前，同步更新read buffer.","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631017056,"ip_address":"","comment_id":310557,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630744375","product_id":100069901,"comment_content":"buffer的缓存同步机制是哪种？旁路缓存机制吗？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526273,"discussion_content":"在写事务结束前，同步更新read buffer.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631017056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299954,"user_name":"Geek_e5f5ea","can_delete":false,"product_type":"c1","uid":2543616,"ip_address":"","ucode":"15501C4A880B47","user_header":"","comment_is_top":false,"comment_ctime":1624936108,"is_pvip":false,"replies":[{"id":"112703","content":"你是指不同地域部署不同etcd集群a和b，然后通过同步服务将a集群数据同步到b吗? 还是指其他? 前者在我们内外部都有应用，依赖一个生产环境可用的同步服务，业务一般读多写少","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631027535,"ip_address":"","comment_id":299954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624936108","product_id":100069901,"comment_content":"请问老师怎么看 双master主备方案？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522599,"discussion_content":"你是指不同地域部署不同etcd集群a和b，然后通过同步服务将a集群数据同步到b吗? 还是指其他? 前者在我们内外部都有应用，依赖一个生产环境可用的同步服务，业务一般读多写少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631027535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293307,"user_name":"大大很二","can_delete":false,"product_type":"c1","uid":1306140,"ip_address":"","ucode":"E3B80C31E43D53","user_header":"https://static001.geekbang.org/account/avatar/00/13/ee/1c/e4a82c25.jpg","comment_is_top":false,"comment_ctime":1621330295,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1621330295","product_id":100069901,"comment_content":"老师，请教一个 grpc 方面的问题 <br><br>```<br><br>service KV {  <br>  &#47;&#47; Range gets the keys in the range from the key-value store.  <br>  rpc Range(RangeRequest) returns (RangeResponse) {  <br>      option (google.api.http) = {  <br>        post: &quot;&#47;v3&#47;kv&#47;range&quot;  <br>        body: &quot;*&quot;  <br>      };  <br>  }  <br>  ....<br>}  <br><br>```<br><br>中的 option 部分是什么意思 ？","like_count":0,"discussions":[{"author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550354,"discussion_content":"grpc-gateway","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644492733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288654,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618581487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618581487","product_id":100069901,"comment_content":"请问Raft log read，要把read操作变为日志，走一遍raft，那就只能主节点响应读请求了吧？？？ 那这种方式根本无法应用到follower read场景啊，难道follower把这次请求转发给leader，由leader来做？ 那还不如直接leader read呢。","like_count":0},{"had_liked":false,"id":288648,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618579557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618579557","product_id":100069901,"comment_content":"如果不使用read index保证线程读的话，quorum read应该就行吧，也就是我理解比如，c节点接收到读请求，我把读请求转发到一半以上节点进行读取，最终返回最新的值就行。 这个和上文提到的raft log read是一种方式吗？还是想知道raft log read 到底是什么做的，怎么执行一遍raft协议的，期待回答。","like_count":0},{"had_liked":false,"id":288646,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618578641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618578641","product_id":100069901,"comment_content":"请问能不能简单介绍下Raft log read的过程呢，也就是read index机制引入前的做法。<br>这个过程不太能想明白，怎么走一遍raft协议，像写操作走一遍raft。怎么个走法呢。<br>写是只写leader的，那读是请求到c节点的，c节点也可以同步读日志到其他节点？这不应该是只有leader才允许的吗？如果只有leader才允许的话，那所有请求都请求leader不就行了吗？反正最终也打到leader上。<br>请问这个过程详细应该是怎么样的，或者有没有资料，我去研究下，不太明白。","like_count":0},{"had_liked":false,"id":287579,"user_name":"木口","can_delete":false,"product_type":"c1","uid":1878104,"ip_address":"","ucode":"331A6823557B75","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a8/58/6f0688ee.jpg","comment_is_top":false,"comment_ctime":1618038686,"is_pvip":false,"replies":[{"id":"104904","content":"看读机制，如果是串行读，那是有可能的，如果是线性读，readindex需要向集群leader获取集群最新已提交的日志条目索引，并需要一半以上节点确认leader身份，则不会读到旧数据","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1618888172,"ip_address":"","comment_id":287579,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618038686","product_id":100069901,"comment_content":"如果读取的那个节点和其他节点产生了网络分区，会不会就读到旧的数据🤡","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518354,"discussion_content":"看读机制，如果是串行读，那是有可能的，如果是线性读，readindex需要向集群leader获取集群最新已提交的日志条目索引，并需要一半以上节点确认leader身份，则不会读到旧数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618888172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282440,"user_name":"(╯°□°）╯︵ ┻━┻..囧RZ=3=3","can_delete":false,"product_type":"c1","uid":1351838,"ip_address":"","ucode":"1D40EBD87C267C","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/9e/abb87028.jpg","comment_is_top":false,"comment_ctime":1615253650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615253650","product_id":100069901,"comment_content":"如果线性读的请求刚好打到一个状态机状态更新异常的节点上，岂不是会导致接收到 leader 最新状态数据，但是 fellow 节点一直无法更新最新的状态从而导致请求等待或失败？raft 共识算法允许存在一定数量的异常节点","like_count":0},{"had_liked":false,"id":281146,"user_name":"types","can_delete":false,"product_type":"c1","uid":2449777,"ip_address":"","ucode":"8B50927EF1804F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDUJyeq54fiaXAgF62tNeocO3lHsKT4mygEcNoZLnibg6ONKicMgCgUHSfgW8hrMUXlwpNSzR8MHZwg/132","comment_is_top":false,"comment_ctime":1614594682,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1614594682","product_id":100069901,"comment_content":"C 节点则会等待，直到状态机已应用索引 (applied index) 大于等于 Leader 的已提交索引时 (committed Index)(上图中的流程四)，然后去通知读请求，数据已赶上 Leader，你可以去状态机中访问数据了 (上图中的流程五)。<br><br>什么情况下applied index会大于Commited index？？","like_count":0,"discussions":[{"author":{"id":1752348,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jA97yib7VetXc4iclOg2gGfZu1fO7efyib2mKeqvIxDdmgLqukusyFzPrbIQeZYR0WDJUicRakgVGroaYC7aWGFrEw/132","nickname":"Turing","note":"","ucode":"F88679276D4841","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530766,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637144321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/7b/0c7f8fbe.jpg","nickname":"divfor","note":"","ucode":"3B14C74252741D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388104,"discussion_content":"commited index会变成历史值，新的applied index当然可以偷偷超过他","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628593879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279534,"user_name":"恰同学少年。","can_delete":false,"product_type":"c1","uid":1928162,"ip_address":"","ucode":"4D4BC29421A245","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6b/e2/f02e45df.jpg","comment_is_top":false,"comment_ctime":1613812637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613812637","product_id":100069901,"comment_content":"涉及场景：<br>1. boltdb模块：boltdb buffer击穿<br>2. 线性读模块：线性读等待follower应用到最新index<br><br>其他场景不涉及原因：串行读boltdb buffer命中就都是全内存的操作","like_count":0},{"had_liked":false,"id":278259,"user_name":"大远","can_delete":false,"product_type":"c1","uid":1365409,"ip_address":"","ucode":"A2421ACDD78490","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/a1/9800de2f.jpg","comment_is_top":false,"comment_ctime":1612848361,"is_pvip":false,"replies":[{"id":"101053","content":"版本号是个全局递增字段哈，put hello a时，hello对应的版本号若为2，下个请求put world b时，world对应的版本号则为3，可以先简单看一眼07","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1612860984,"ip_address":"","comment_id":278259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612848361","product_id":100069901,"comment_content":"两个不同的key，他们的版本号是分别各自递增的吗？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515330,"discussion_content":"版本号是个全局递增字段哈，put hello a时，hello对应的版本号若为2，下个请求put world b时，world对应的版本号则为3，可以先简单看一眼07","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612860984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278023,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1612707030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612707030","product_id":100069901,"comment_content":"请问 etcd v3  snapshot 是怎么处理的，难道不是直接就是 boltdb 的db文件吗？","like_count":0},{"had_liked":false,"id":277308,"user_name":"窝窝头","can_delete":false,"product_type":"c1","uid":1063866,"ip_address":"","ucode":"5C2635ED6484F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/ba/3b30dcde.jpg","comment_is_top":false,"comment_ctime":1612350906,"is_pvip":true,"replies":[{"id":"104097","content":"boltdb事务提交也会涉及到，后面有介绍","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1617439612,"ip_address":"","comment_id":277308,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612350906","product_id":100069901,"comment_content":"wal日志模块会涉及到磁盘io，另外boltdb会不会涉及到","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514998,"discussion_content":"boltdb事务提交也会涉及到，后面有介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617439612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275592,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1728183,"ip_address":"","ucode":"42003EDE4EC9AF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwf6OGGA3IujQ9lnbXrApCiaYmR48GrdkljG0t9XdKnO64rb3LBcSWJIZsEokbxiauSOQ/132","comment_is_top":false,"comment_ctime":1611593106,"is_pvip":false,"replies":[{"id":"100030","content":"是的，线性读是返回你发出读请求时间点的集群最新共识，实际应用中，我们读到数据再次更新的时候，会通过乐观锁机制检测此类问题，参考我上面一条回复","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611638280,"ip_address":"","comment_id":275592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611593106","product_id":100069901,"comment_content":"老师，有一个问题，关于ReadIndex，如果图中步骤3获取到committed index（假设为i1）之后，C会等待直到其applied index &gt;= i1（步骤4），如果C等待期间，hello的值改变，C还没有来得及更新，这就会返回旧的值。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514410,"discussion_content":"是的，线性读是返回你发出读请求时间点的集群最新共识，实际应用中，我们读到数据再次更新的时候，会通过乐观锁机制检测此类问题，参考我上面一条回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611638280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275235,"user_name":"ThinkerWalker","can_delete":false,"product_type":"c1","uid":1317111,"ip_address":"","ucode":"8CD44FFC37ACB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rQOn22bNV0kHpoPWRLRicjQCOkiaYmcVABiaIJxIDWIibSdqWXYTxjcdjiadibIxFsGVp5UE4DBd6Nx2DxjhAdlMIZeQ/132","comment_is_top":false,"comment_ctime":1611401946,"is_pvip":false,"replies":[{"id":"99902","content":"嗯，读写给你建立整体感觉，后面还会细讲，回过头来再读也疑惑全解","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611457174,"ip_address":"","comment_id":275235,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1611401946","product_id":100069901,"comment_content":"老师，干货太多看不懂[捂脸]，比如状态机、Range RPC、“一半以上节点确认 Leader 身份后才能将已提交的索引 (committed index) 返回给节点 C(上图中的流程三)”中为什么节点需要确认leader身份……，是不是可以暂时不需要理解这些，后面再回过头来看。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514275,"discussion_content":"嗯，读写给你建立整体感觉，后面还会细讲，回过头来再读也疑惑全解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611457174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2054611,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKBENQekdV3e9XwRQ5kpO9Y9d81sEMm52qcwJWbFbWbW2rniaTFYCChoR0ibZ0E3soQqod9rvfmBibmQ/132","nickname":"校歌","note":"","ucode":"CD257668BB1A33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344429,"discussion_content":"很多概念，也是不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611461517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2054611,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKBENQekdV3e9XwRQ5kpO9Y9d81sEMm52qcwJWbFbWbW2rniaTFYCChoR0ibZ0E3soQqod9rvfmBibmQ/132","nickname":"校歌","note":"","ucode":"CD257668BB1A33","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":344994,"discussion_content":"哪些概念提出来，后面我考虑增加一节etcd基础答疑文章，专门帮助刚学etcd的同学快速入门","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611634952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":344429,"ip_address":""},"score":344994,"extra":""}]}]},{"had_liked":false,"id":275176,"user_name":"海阔天空","can_delete":false,"product_type":"c1","uid":1733275,"ip_address":"","ucode":"8658B1610192E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZzc3keFAJT12Sic3VYWx4PrZbCGDm4kBZD3oqnR4xsibGGtGy4tFO8y05Ims27SiaavA/132","comment_is_top":false,"comment_ctime":1611372263,"is_pvip":false,"replies":[{"id":"99874","content":"不对喔，你可以自己先小小测试一下，下周给出答案","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611401875,"ip_address":"","comment_id":275176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611372263","product_id":100069901,"comment_content":"读如果在buffer不涉及磁盘IO，如果buffer没有通过boltdb拿数据，就有磁盘IO了","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514249,"discussion_content":"不对喔，你可以自己先小小测试一下，下周给出答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611401875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275135,"user_name":"Geek_5a8405","can_delete":false,"product_type":"c1","uid":2421596,"ip_address":"","ucode":"227449D010F147","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rPaT2MzkXFmlmMTicGCRk5yVKqibPlloh66ibGJfoLQbgb6ficD3TkPmngR8UCEkrKZf5UbzvLlIglyYXBZibUINQ9Q/132","comment_is_top":false,"comment_ctime":1611319388,"is_pvip":false,"replies":[{"id":"99849","content":"raft篇会详细介绍，下周三稍等","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611361077,"ip_address":"","comment_id":275135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611319388","product_id":100069901,"comment_content":"“若 Leader 收到写请求，它会将此请求持久化到 WAL 日志，并广播给各个节点，若一半以上节点持久化成功，则该请求对应的日志条目被标识为已提交”是怎么标示一条日志已提交的呢？是插一条新的log吗？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514224,"discussion_content":"raft篇会详细介绍，下周三稍等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611361077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275104,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1611308050,"is_pvip":false,"replies":[{"id":"99922","content":"嗯，后面会详细介绍，07 MVCC节","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611508510,"ip_address":"","comment_id":275104,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611308050","product_id":100069901,"comment_content":"请问唐老师etcd的MVCC后面会有内容详细介绍么？比如MVCC具体实现机制以及有哪些需要注意的点。 l","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514213,"discussion_content":"嗯，后面会详细介绍，07 MVCC节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611508510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}