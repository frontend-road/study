{"id":13294,"title":"06 | 模式与框架：它们的关系与误区？","content":"<p>在学习程序设计的路上，你一定会碰到“设计模式”，它或者给你启发，或者让你疑惑，并且你还会发现在不同的阶段遇到它，感受是不同的。而“开发框架”呢？似乎已是现在写程序的必备品。那么框架和模式又有何不同？它们有什么关系？在程序设计中又各自扮演什么角色呢？</p>\n<h2>设计模式</h2>\n<p>设计模式，最早源自 GoF 那本已成经典的《设计模式：可复用面向对象软件的基础》一书。该书自诞生以来，在程序设计领域已被捧为“圣经”。</p>\n<p>软件设计模式也是参考了建筑学领域的经验，早在建筑大师克里斯托弗·亚历山大（Christopher Alexander）的著作《建筑的永恒之道》中，已给出了关于“模式”的定义：</p>\n<blockquote>\n<p>每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式，我们可以无数次地重用那些已有的成功的解决方案，无须再重复相同的工作。</p>\n</blockquote>\n<p>而《设计模式》一书借鉴了建筑领域的定义和形式，原书中是这么说的：</p>\n<blockquote>\n<p>本书中涉及的设计模式并不描述新的或未经证实的设计，我们只收录那些在不同系统中多次使用过的成功设计；尽管这些设计不包括新的思路，但我们用一种新的、便于理解的方式将其展现给读者。</p>\n</blockquote>\n<p>虽然该书采用了清晰且分门别类的方式讲述各种设计模式，但我相信很多新入门的程序员在看完该书后还是会\b像我当年一样有困扰，无法真正理解也不知道这东西到底有啥用。</p><!-- [[[read_end]]] -->\n<p>早年我刚开始学习 Java 和面向对象编程，并编写 JSP 程序。当我把一个 JSP 文件写到一万行代码时，自己终于受不了了，然后上网大量搜索到底怎样写 JSP 才是对的。之后，我就碰到了《设计模式》一书，读完了，感觉若有所悟，但再去写程序时，反而更加困扰了。</p>\n<p>因为学 “设计模式” 之前，写程序是无所顾忌，属于拿剑就刺，虽无章法却还算迅捷。但学了一大堆 “招式” 后反而变得有点瞻前顾后，每次出剑都在考虑招式用对没，挥剑反倒滞涩不少。有人说：“设计模式，对于初窥门径的程序员，带来的麻烦简直不逊于它所解决的问题。”回顾往昔，我表示深有同感。</p>\n<p>后来回想，那个阶段我把《设计模式》用成了一本 “菜谱” 配方书。现实是，没做过什么菜只是看菜谱，也只能是照猫画虎，缺少好厨师的那种能力——火候。初窥门径的程序员其实缺乏的就是这样的“火候”能力，所以在看《设计模式》时必然遭遇困惑。而这种“火候”能力则源自大量的编程设计实践，在具体的实践中抽象出模式的思维。</p>\n<p>“设计模式” 是在描述一些抽象的概念，甚至还给它们起了一些专有名字，这又增加了一道弯儿、一层抽象。初窥门径的程序员，具体的实践太少，面临抽象的模式描述时难免困惑。但实践中，经验积累到一定程度的程序员，哪怕之前就没看过《设计模式》，他们却可能已经基于经验直觉地用起了某种模式。</p>\n<p>前面我说过我刚学习编程时看过一遍《设计模式》，看完后反而带来更多的干扰，不过后来倒也慢慢就忘了。好些年后，我又重读了一遍，竟然豁然开朗起来，因为其中一些模式我已经在过往的编程中使用过很多次，另一些模式虽未碰到，但理解起来已不见困惑。到了这个阶段，其实我已经熟练掌握了从具体到抽象之间切换的思维模式，设计模式的 “招数” 看来就亲切了很多。</p>\n<p>在我看来，模式是前人解决某类问题方式的总结，是一种解决问题域的优化路径。但引入模式也是有代价的。设计模式描述了抽象的概念，也就在代码层面引入了抽象，它会导致代码量和复杂度的增加。而衡量应用设计模式付出的代价和带来的益处是否值得，这也是程序员 “火候” 能力另一层面的体现。</p>\n<p>有人说，设计模式是招数；也有人说，设计模式是内功。我想用一种大家耳熟能详的武功来类比：降龙十八掌。以其中一掌“飞龙在天”为例，看其描述：</p>\n<blockquote>\n<p>气走督脉，行手阳明大肠经商阳…此式跃起凌空，居高下击，以一飞冲天之式上跃，双膝微曲，提气丹田，急发掌劲取敌首、肩、胸上三路。</p>\n</blockquote>\n<p>以上，前半句是关于内功的抽象描述，后半部分是具体招数的描述，而设计模式的描述表达就与此有异曲同工之妙。所以，设计模式是内功和招数并重、相辅相成的 “武功”。</p>\n<p>当你解决了一个前人从没有解决的问题，并把解决套路抽象成模式，你就创造了一招新的 “武功”，后来的追随者也许会给它起个新名字叫：某某模式。</p>\n<h2>开发框架</h2>\n<p>不知从何时起，写程序就越来越离不开框架了。</p>\n<p>记得我还在学校时，刚学习 Java 不久，那时 Java 的重点是 J2EE（现在叫 Java EE 了），而 J2EE 的核心是 EJB。当我终于用“JSP + EJB + WebLogic（EJB 容器）+ Oracle数据库”搭起一个 Web 系统时，感觉终于掌握了 Java 的核心。</p>\n<p>后来不久，我去到一家公司实习，去了以后发现那里的前辈们都在谈论什么 DI（依赖注入）和 IoC（控制反转）等新概念。他们正在把老一套的 OA 系统从基于 EJB 的架构升级到一套全新的框架上，而那套框架包含了一堆我完全没听过的新名词。</p>\n<p>然后有前辈给我推荐了一本书叫 <em>J2EE Development Without EJB</em>，看完后让我十分沮丧，因为我刚刚掌握的 Java 核心技术 EJB 还没机会出手就已过时了。</p>\n<p>从那时起，我开始知道了框架（Framework）这个词，然后学习了一整套的基于开源框架的程序开发方式，知道了为什么 EJB 是重量级的，而框架是轻量级的。当时 EJB 已步入暮年，而框架的春天才刚开始来临，彼时最有名的框架正好也叫 Spring。如今框架已经枝繁叶茂，遍地开花。</p>\n<p>现在的编程活动中，已是大量应用框架，而框架就像是给程序员定制的开发脚手架。一个框架是一个可复用的设计组件，它统一定义了高层设计和接口，使得从框架构建应用程序变得非常容易。因此，框架可以算是打开“快速开发”与“代码复用”这两扇门的钥匙。</p>\n<p>在如今这个框架遍地开花的时代，正因为框架过于好用、易于复用，所以也可能被过度利用。</p>\n<p>在 Java 中，框架很多时候就是由一个或一些 jar 包组成的。早在前几年（2012 年的样子）接触到一个 Web 应用系统，当时我尝试去拷贝一份工程目录时，意外发现居然有接近 500M 大小，再去看依赖的 jar 包多达 117 个，着实吓了一跳。在 500M 工程目录拷贝进度条缓慢移动中，我在想：“如今的程序开发是不是患上了框架过度依赖症？”</p>\n<p>我想那时应该没有人能解释清楚为什么这个系统需要依赖 117 个 jar 包之多，也许只是为了完成一个功能，引入了一个开源框架，而这个框架又依赖了其他 20 个 jar 包。</p>\n<p>有时候，框架确实帮我们解决了大部分的脏活累活，如果运气好，这些框架的质量很高或系统的调用量不大，那么它们可能也就从来没引发过什么问题，我们也就不需要了解它们是怎么去解决那些脏活、累活的。但若不巧，哪天某个框架在某些情况下出现了问题，在搞不懂框架原理的情况下，就总会有人惊慌失措。</p>\n<p>如今，框架带来的束缚在于，同一个问题，会有很多不同框架可供选择。如何了解、评估、选择与取舍框架，成了新的束缚。</p>\n<p>一些知名框架都是从解决一个特定领域问题的微小代码集合开始发展到提供解决方案、绑定概念、限定编程模式，并尝试不断通用化来扩大适用范围。</p>\n<p>这样的框架自然不断变得庞大、复杂、高抽象度。</p>\n<p>我一直不太喜欢通用型的框架，因为通用则意味着至少要适用于大于两种或以上的场景，场景越多我们的选择和取舍成本越高。另外，通用意味着抽象度更高，而现实是越高的抽象度，越不容易被理解。例如，人生活在三维世界，理解三维空间是直观的，完全没有抽象，理解四维空间稍微困难点，那五维或以上理解起来就很困难了。</p>\n<p>框架，既是钥匙，也是枷锁，既解放了我们，也束缚着我们。</p>\n<h2>两者关系</h2>\n<p>分析了模式，解读了框架，那么框架和模式有什么关系呢？</p>\n<p>框架和模式的共同点在于，它们都提供了一种问题的重用解决方案。其中，框架是代码复用，模式是设计复用。</p>\n<p>软件开发是一种知识与智力的活动，知识的积累很关键。框架采用了一种结构化的方式来对特定的编程领域进行了规范化，在框架中直接就会包含很多模式的应用、模式的设计概念、领域的优化实践等，都被固化在了框架之中。框架是程序代码，而模式是关于这些程序代码的知识。</p>\n<p>比如像 Spring 这样的综合性框架的使用与最佳实践，就隐含了大量设计模式的套路，即使是不懂设计模式的初学者，也可以按照这些固定的编程框架写出符合规范模式的程序。但写出代码完成功能是一回事，理解真正的程序设计又是另外一回事了。</p>\n<p>小时候，看过一部漫画叫《圣斗士》。程序员就像是圣斗士，框架是“圣衣”，模式是“流星拳“，但最重要的还是自身的“小宇宙”啊。</p>\n<p>我相信在编程学习与实践的路上，你对设计模式与开发框架也有过自己的思考。欢迎给我留言，说说你有过怎样的认识变化和体会，我们一起讨论。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":20216,"user_name":"third","can_delete":false,"product_type":"c1","uid":1025114,"ip_address":"","ucode":"9A37408A834F0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/5a/e708e423.jpg","comment_is_top":false,"comment_ctime":1534314670,"is_pvip":false,"replies":[{"id":"7094","content":"总结的好棒👍😄","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534336497,"ip_address":"","comment_id":20216,"utype":1}],"discussion_count":2,"race_medal":0,"score":"91728627886","product_id":100012101,"comment_content":"心得如下：\r<br>1.模式和框架都是前人总结之下的经验\r<br>模式是代码层面，解决单个问题的成功方法\r<br>框架是设计层面，解决一系列问题的成功方法\r<br>挺感谢前人的奋进的\r<br>\r<br>2.我们一边在使用工具，获得便捷，一边在被工具所驯化，讨厌麻烦，变得简单。比如重新理解框架原理。","like_count":22,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422155,"discussion_content":"总结的好棒👍😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534336497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1171820,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e1/6c/e2c617c5.jpg","nickname":"反骨仔","note":"","ucode":"1FAAAFACAD74A8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109766,"discussion_content":"模式也是用来解决一类问题的吧，而不是单个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577710580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20408,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1534423467,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27304227243","product_id":100012101,"comment_content":"现在还记得第一次看设计模式的那个场景，完全懵逼，然后看解决的问题，是如此的优雅！责任链，将接口容器化，链式调用，将业务逻辑的扩展变得轻松，然后我花了2周将代码做到能，不看源码，手打出来，然后慢慢的在花了2周终于理解了！老大推荐了一本《head first 设计模式》，当我看完这本书后，感觉豁然开朗，抽象的思维就开始在脑袋里慢慢形成！","like_count":7,"discussions":[{"author":{"id":1099324,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/3c/8ab9deb0.jpg","nickname":"@许还真","note":"","ucode":"6D754D5AE44CEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286839,"discussion_content":"headfitst经典 还有源码应用设计模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593308838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20646,"user_name":"who am i","can_delete":false,"product_type":"c1","uid":1205243,"ip_address":"","ucode":"819A8DA96AFED5","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/fb/14dcb6cd.jpg","comment_is_top":false,"comment_ctime":1534641209,"is_pvip":false,"replies":[{"id":"7256","content":"恩，会的😊","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534685470,"ip_address":"","comment_id":20646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14419543097","product_id":100012101,"comment_content":"作者使用类比和排比的手法，让我们更清楚框架，模式的联系和区别。希望后面的文章也能这样，会让我们更能理解明白。","like_count":3,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422347,"discussion_content":"恩，会的😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534685470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20302,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1534375834,"is_pvip":false,"replies":[{"id":"7257","content":"感觉还是我最后的比喻更贴切些，哈哈😄","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534685525,"ip_address":"","comment_id":20302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14419277722","product_id":100012101,"comment_content":"我的理解：<br><br>框架-是非业务代码功能的复用<br>模式-是经验优秀开发方式的复用<br><br>一个牛逼的框架，一定会使用一些牛逼的设计模式。框架，是牛人编写出来具体解决一类问题的半成品（相对于使用者），使用者主要的工作是按照框架的结构，填充自己业务代码。<br>设计模式是解决一类特定问题的最佳实践经验，类似内功，怎么用什么时候什么地方用用什么是使用者根据需要和积累选择的。<br><br>比喻一下：<br>框架有点类似游泳圈<br>模式有点类似潜水时该怎么办或仰泳时候该怎么办的最佳经验。","like_count":4,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422196,"discussion_content":"感觉还是我最后的比喻更贴切些，哈哈😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534685525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20138,"user_name":"Franklin.du","can_delete":false,"product_type":"c1","uid":1005891,"ip_address":"","ucode":"A249024B44A164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/43/66e5643a.jpg","comment_is_top":false,"comment_ctime":1534291349,"is_pvip":false,"replies":[{"id":"7097","content":"编程，是实践的艺术啊","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534336786,"ip_address":"","comment_id":20138,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14419193237","product_id":100012101,"comment_content":"看过好几遍设计模式的书，开发中能想到一些相关的设计模式，用起来就是“菜谱”的感觉。编程实践还是不够多，达不到融会贯通的地步。看来有了秘笈“降龙十八掌”也不是那么容易练成的。","like_count":4,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422129,"discussion_content":"编程，是实践的艺术啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534336786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112406,"user_name":"陈越","can_delete":false,"product_type":"c1","uid":1007632,"ip_address":"","ucode":"C27ED9BE19913E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/10/2c533d89.jpg","comment_is_top":false,"comment_ctime":1562729268,"is_pvip":true,"replies":[{"id":"41696","content":"😄，在你心里，你为此而努力战斗","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1563278535,"ip_address":"","comment_id":112406,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10152663860","product_id":100012101,"comment_content":"老师，谁是我们的雅典娜啊？😄","like_count":2,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457720,"discussion_content":"😄，在你心里，你为此而努力战斗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563278535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30906,"user_name":"HellloWorld","can_delete":false,"product_type":"c1","uid":1193388,"ip_address":"","ucode":"CAC6F12DF6AF1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVy4eB1Ncz4HNDnatoib4x3D8icA5AwbV8aoP13N7bibOibCWw0bZiar3vjearzMU6KItmK5ibuxZe68tw/132","comment_is_top":false,"comment_ctime":1539046337,"is_pvip":false,"replies":[{"id":"11155","content":"框架会用只是第一步，原理一定要明白，不懂就要去看文档和代码，框架搞透了，设计模式的应用自然就明了了。框架的实现中大量应用了设计模式","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1539081220,"ip_address":"","comment_id":30906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10128980929","product_id":100012101,"comment_content":"胡峰老师您好！1.我之前看过《大话设计模式》等设计模式的书籍，上面的demo也实践了，但是在实践中似乎从来没应用过，请问具体实践中应该应用什么方法去学习设计模式？如何才能真正做到掌握并且应用设计模式？2.Java相关的框架实在太多，自己在项目开发中用了很多框架，很多问题基本百度能解决，但是自己还是停留在会用的阶段，具体原理还是不懂，请问有必要去研究框架原理吗？学习框架达到什么样的水准才算可以呢？","like_count":2,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426142,"discussion_content":"框架会用只是第一步，原理一定要明白，不懂就要去看文档和代码，框架搞透了，设计模式的应用自然就明了了。框架的实现中大量应用了设计模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539081220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20253,"user_name":"L.","can_delete":false,"product_type":"c1","uid":1201645,"ip_address":"","ucode":"7D0BBE3557B10C","user_header":"https://static001.geekbang.org/account/avatar/00/12/55/ed/e014d4af.jpg","comment_is_top":false,"comment_ctime":1534336499,"is_pvip":false,"replies":[{"id":"7160","content":"开源的吧，基本能满足，遇到不满足的情况再扩展","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534423077,"ip_address":"","comment_id":20253,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124271091","product_id":100012101,"comment_content":"小公司还没有属于自己的开放框架，怎么能搭建一个开发框架呢","like_count":2,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422175,"discussion_content":"开源的吧，基本能满足，遇到不满足的情况再扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534423077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20215,"user_name":"June Yuan","can_delete":false,"product_type":"c1","uid":1053503,"ip_address":"","ucode":"2FA00E0A59C659","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/3f/817f380e.jpg","comment_is_top":false,"comment_ctime":1534313226,"is_pvip":false,"replies":[{"id":"7095","content":"是这样的，实践和理论要交叉进行，反复几次可能就豁然开朗了","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534336570,"ip_address":"","comment_id":20215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124247818","product_id":100012101,"comment_content":"相比编程而言，感觉设计模式和框架的学习是比较有门槛的，理解它们的前提，是要理解它们所解决的问题。曾经学习设计模式，看看书还能一知半解，但是像 IoC、AOP, 当时在没有任何 WEB 项目经验的情况下，看了一些博客文章试图简单了解，结果依然一头雾水。实际工作以后，在真实的项目和业务需求里泡得多了，有的原先云里雾里的东西才逐渐变得自然。","like_count":2,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422154,"discussion_content":"是这样的，实践和理论要交叉进行，反复几次可能就豁然开朗了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534336570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20154,"user_name":"绝露","can_delete":false,"product_type":"c1","uid":1136244,"ip_address":"","ucode":"5DD2F131B5903B","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/74/7ef8b5a0.jpg","comment_is_top":false,"comment_ctime":1534294888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10124229480","product_id":100012101,"comment_content":"框架是半成的产品，而设计模式只是一种针对特定问题的通用方案。产品里采纳了对应领域的一系列方案。","like_count":2},{"had_liked":false,"id":20148,"user_name":"艾尔欧唯伊","can_delete":false,"product_type":"c1","uid":1139716,"ip_address":"","ucode":"5BD50691342461","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/04/18875529.jpg","comment_is_top":false,"comment_ctime":1534294072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10124228664","product_id":100012101,"comment_content":"设计模式是一种编程方式或风格，框架更多是提供类库或简化一些重复性，比较复杂的通用代码。不是一个类型的定义。<br>另外，一个框架依赖的jar真的很可怕，最困惑的就是不知道哪些是必要，哪些不是。。。有时候可能只要这个jar里面的一个类，就得全引入，不然编译都过不去。。。","like_count":2},{"had_liked":false,"id":131806,"user_name":"疯狂土豆","can_delete":false,"product_type":"c1","uid":1273966,"ip_address":"","ucode":"16ADC351B57151","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/6e/27f43b70.jpg","comment_is_top":false,"comment_ctime":1567913490,"is_pvip":false,"replies":[{"id":"51787","content":"现在火的中台概念，就是行业业务规则的抽象和平台化","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1568969208,"ip_address":"","comment_id":131806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862880786","product_id":100012101,"comment_content":"感觉除了一些公共的模块可以抽象，和模式华。像框架都是针对一个大面积的需求去使用各种模式开发一套灵活的框架，但是在业务代码中将代码模式话可行性高吗？因为他们的共性太少了，不同的甲方不同的应用场景，都会导致共性降低，抽象相对比较困难。但是从另一方面而言一个行业下的规则和流程基本是统一的，所以我感觉针对各个行业都有自己可以抽象和模式华的空间。然而在实际开发和设计的时候，觉得抽象华和模式华完全无从下手？还望老师给点建议。","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466626,"discussion_content":"现在火的中台概念，就是行业业务规则的抽象和平台化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568969208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34659,"user_name":"无怨无悔","can_delete":false,"product_type":"c1","uid":1270055,"ip_address":"","ucode":"6E3DE4D50D8B5C","user_header":"https://static001.geekbang.org/account/avatar/00/13/61/27/caf1e8b4.jpg","comment_is_top":false,"comment_ctime":1540255476,"is_pvip":false,"replies":[{"id":"12373","content":"有时就是代码量和时间经验够了，突然就明白，抽象的东西总是突然就顿悟了","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1540289581,"ip_address":"","comment_id":34659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835222772","product_id":100012101,"comment_content":"在看设计模式那块的时候，也是似懂半懂的。实战中运用了，才明白设计模式的意义存在。我想问胡老师下有什么更好的方式去更深层次的理解它吗？有时候觉得，可能还是没有达到那个境界。希望能指导点拨下……","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427287,"discussion_content":"有时就是代码量和时间经验够了，突然就明白，抽象的东西总是突然就顿悟了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540289581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31102,"user_name":"HellloWorld","can_delete":false,"product_type":"c1","uid":1193388,"ip_address":"","ucode":"CAC6F12DF6AF1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVy4eB1Ncz4HNDnatoib4x3D8icA5AwbV8aoP13N7bibOibCWw0bZiar3vjearzMU6KItmK5ibuxZe68tw/132","comment_is_top":false,"comment_ctime":1539091298,"is_pvip":false,"replies":[{"id":"11279","content":"搞懂原理不一定都要看源码吧，先从文档开始，想想如果框架提供的这个功能我会怎么实现，想不出来，就去看它怎么实现的","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1539168463,"ip_address":"","comment_id":31102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834058594","product_id":100012101,"comment_content":"峰哥，工作中用到了Struts2,Springmvc,Spring,mybatis,hibernate。如果看源码搞懂原理，您建议从哪个框架着手更容易一些？这些框架都需要搞明白原理看懂源码吗？","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426231,"discussion_content":"搞懂原理不一定都要看源码吧，先从文档开始，想想如果框架提供的这个功能我会怎么实现，想不出来，就去看它怎么实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539168463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21003,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1534862083,"is_pvip":false,"replies":[{"id":"7453","content":"其实并不矛盾，我觉得","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534935610,"ip_address":"","comment_id":21003,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829829379","product_id":100012101,"comment_content":"设计模式这段有同感，刚开始硬着头皮学根本消化不良，若干年后自然而然就领悟了，所以我坚持〃以术悟道〃而不是〃以道生术〃","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422489,"discussion_content":"其实并不矛盾，我觉得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534935610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20523,"user_name":"夜海","can_delete":false,"product_type":"c1","uid":1075054,"ip_address":"","ucode":"5402AAC13370A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/6e/edefddc1.jpg","comment_is_top":false,"comment_ctime":1534509247,"is_pvip":true,"replies":[{"id":"7197","content":"😄","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534520923,"ip_address":"","comment_id":20523,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829476543","product_id":100012101,"comment_content":"小宇宙，圣衣，流星拳的比喻很形象。立马就理解了","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422287,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534520923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20428,"user_name":"Jiantao","can_delete":false,"product_type":"c1","uid":1163504,"ip_address":"","ucode":"444580EC5EF109","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/f0/1aabc056.jpg","comment_is_top":false,"comment_ctime":1534435043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5829402339","product_id":100012101,"comment_content":"模式学习：反复实践，理解思想！框架：解决问题的高效工具。⛽️💪","like_count":1},{"had_liked":false,"id":20220,"user_name":"董某越","can_delete":false,"product_type":"c1","uid":1205258,"ip_address":"","ucode":"00A5BF61B22B06","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/0a/6776981d.jpg","comment_is_top":false,"comment_ctime":1534317240,"is_pvip":false,"replies":[{"id":"7073","content":"推荐深入研究一次，以后可能就触类旁通了","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534331733,"ip_address":"","comment_id":20220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829284536","product_id":100012101,"comment_content":"是否推荐深入研究某个框架的组成和应用？ 某种语言的框架又是否大同小异。 感觉工作中每种语言所搭建的系统都倾向于使用一种框架，这是否是是一种提高代码阅读性的趋势呢？","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422159,"discussion_content":"推荐深入研究一次，以后可能就触类旁通了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534331733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20202,"user_name":"Sawyer","can_delete":false,"product_type":"c1","uid":1011280,"ip_address":"","ucode":"34DC7FBB01FE6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/50/c85284da.jpg","comment_is_top":false,"comment_ctime":1534308128,"is_pvip":false,"replies":[{"id":"7096","content":"火候感，其实挺微妙的","user_name":"作者回复","user_name_real":"mindwind","uid":"1001723","ctime":1534336622,"ip_address":"","comment_id":20202,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829275424","product_id":100012101,"comment_content":"关于设计模式的使用中，提到一个词是“火候”。这个才是真正区分一个新手和老手的关键因素。","like_count":1,"discussions":[{"author":{"id":1001723,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/fb/747fdba8.jpg","nickname":"mindwind","note":"","ucode":"21236147DFD116","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422146,"discussion_content":"火候感，其实挺微妙的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534336622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286206,"user_name":"gtp","can_delete":false,"product_type":"c1","uid":1372089,"ip_address":"","ucode":"12E21307343B3A","user_header":"https://static001.geekbang.org/account/avatar/00/14/ef/b9/c0c12bea.jpg","comment_is_top":false,"comment_ctime":1617191073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617191073","product_id":100012101,"comment_content":"程序员就像是圣斗士，框架是“圣衣”，模式是“流星拳“，但最重要的还是自身的“小宇宙”啊<br>这个比喻好贴切呀","like_count":0},{"had_liked":false,"id":280346,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1614163421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614163421","product_id":100012101,"comment_content":"设计模式是面对特定问题成熟的套路总结，问题可以是架构层面也可以是具体实现层面。<br>框架为开发效率而生，使复杂有难度的东西简化容易，并提供常用的功能避免重复造轮子。","like_count":0},{"had_liked":false,"id":158820,"user_name":"今之人兮","can_delete":false,"product_type":"c1","uid":1205542,"ip_address":"","ucode":"140DBBE133E1FE","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/26/2e9bc97f.jpg","comment_is_top":false,"comment_ctime":1575458787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575458787","product_id":100012101,"comment_content":"感觉模式是提供了思想的便利，框架是提供了写代码的便利","like_count":0},{"had_liked":false,"id":157434,"user_name":"一一","can_delete":false,"product_type":"c1","uid":1252756,"ip_address":"","ucode":"8F15F87CEDB019","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/94/80b8a9f4.jpg","comment_is_top":false,"comment_ctime":1575162568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575162568","product_id":100012101,"comment_content":"优秀高质量的框架大概就是众多设计模式的集大成者吧……","like_count":0},{"had_liked":false,"id":143809,"user_name":"熊喵","can_delete":false,"product_type":"c1","uid":1703845,"ip_address":"","ucode":"B876E720B5BAB4","user_header":"https://static001.geekbang.org/account/avatar/00/19/ff/a5/31033f91.jpg","comment_is_top":false,"comment_ctime":1571794584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571794584","product_id":100012101,"comment_content":"设计模式的学习有强烈共鸣。其实毕业之前我就把大话设计模式看了一遍，有些模式我吧代码都背下来了，入职以后得第一个项目生搬硬套了些设计模式进去，导致一个简单的功能，代码却复杂到不忍直视。工作两三年的时间里，有意识的从一些前辈的代码，以及开源软件中去总结写代码的套路，对设计模式有了更清晰的认识后再去看设计模式的书，感觉豁然开朗。","like_count":0},{"had_liked":false,"id":57227,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1546691498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546691498","product_id":100012101,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":32342,"user_name":"七年","can_delete":false,"product_type":"c1","uid":1024585,"ip_address":"","ucode":"140ACD205EA1EF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/49/03384d50.jpg","comment_is_top":false,"comment_ctime":1539536462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539536462","product_id":100012101,"comment_content":"笔记：<br>………………………<br>模式和框架都是前人总结之下的经验 <br>1. 模式是代码层面，解决单个问题的成功方法<br>2. 框架是设计层面，解决一系列问题的成功方法 <br><br>引入模式也是有代价的。设计模式描述了抽象的概念，也就在代码层面引入了抽象，它会导致代码量和复杂度的增加。而衡量应用设计模式付出的代价和带来的益处是否值得，这也是程序员&quot;火候&quot;能力另一层面的体现。<br><br>框架采用了一种结构化的方式来对特定的编程领域进行了规范化，在框架中直接就会包含很多模式的应用、模式的设计概念、领域的优化实践等，都被固化在了框架之中。框架是程序代码，而模式是关于这些程序代码的知识。<br>","like_count":0},{"had_liked":false,"id":32341,"user_name":"七年","can_delete":false,"product_type":"c1","uid":1024585,"ip_address":"","ucode":"140ACD205EA1EF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/49/03384d50.jpg","comment_is_top":false,"comment_ctime":1539536361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539536361","product_id":100012101,"comment_content":"模式和框架都是前人总结之下的经验 <br>1.模式是代码层面，解决单个问题的成功方法<br>框架是设计层面，解决一系列问题的成功方法 <br><br>引入模式也是有代价的。设计模式描述了抽象的概念，也就在代码层面引入了抽象，它会导致代码量和复杂度的增加。而衡量应用设计模式付出的代价和带来的益处是否值得，这也是程序员&quot;火候&quot;能力另一层面的体现。<br><br>框架采用了一种结构化的方式来对特定的编程领域进行了规范化，在框架中直接就会包含很多模式的应用、模式的设计概念、领域的优化实践等，都被固化在了框架之中。框架是程序代码，而模式是关于这些程序代码的知识。","like_count":0},{"had_liked":false,"id":26650,"user_name":"Starbug","can_delete":false,"product_type":"c1","uid":1197000,"ip_address":"","ucode":"81C7B6D7BD1B5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/c8/03604677.jpg","comment_is_top":false,"comment_ctime":1537712249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537712249","product_id":100012101,"comment_content":"继续补学习笔记：<br>1.设计模式<br>解决一类问题的套路，抽象成了一个“武功秘籍”<br>内功：看待问题的思维模式<br>招式：代码结构<br>2.框架<br>解决一系列特定问题（往往是一个应用场景）而产生的代码结构。<br>类似于开发人员的脚手架，软件大厦的基础框架给你搭好了，只用实现具体一个窗户之类的具体功能就好","like_count":0}]}