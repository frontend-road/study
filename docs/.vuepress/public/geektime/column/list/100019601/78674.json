{"id":78674,"title":"09 | 怎么用好Java注解？","content":"<p>如果你使用面向对象的概念和技术有一段时间了，不知道你会不会有这样的困惑： 面向对象技术带来的麻烦，一点都不比它带来的好处少！</p><p>比如说，我们辛辛苦苦继承了一个类，重写了它的方法。过几天，这个类居然修改了它的接口，而且没人通知我们。然后，我们写的子类还可以美滋滋地编译，运行，就是总出错误，怎么调试都没发现这个子类的实现有什么不妥。直到有人说，父类变了！这时候，我们就想找杯咖啡暖暖手，一个人静静。</p><p>面向对象技术确实有它值得傲娇的地方。但是，只有把类似上面的小麻烦解决掉，它的使用才更合理。 比如说，父类做了修改，能不能立即就通知我？ 别等到问题出现了，我们还被蒙在鼓里。</p><p>Java注解就可以帮助我们。</p><h2>什么是Java注解</h2><p>Java注解是Java 1.5引入的一个工具，类似于给代码贴个标签，通过注解可以为代码添加标签信息。这些标签信息可以添加在字段、方法和类上。开发工具、部署工具或者运行类库，可以对这些标签信息进行特殊的处理，从而获得更丰富的功能。</p><p>经过十多年的发展，注解已经成了Java生态系统一个非常重要的技术。使用注解可以大幅度降低我们的开发强度，提高工作效率，减少潜在的错误。像Java类库一样，注解也有了越来越丰富的定义和规范，成了我们需要掌握的重要技术之一。</p><!-- [[[read_end]]] --><p><strong>我们这里只讨论编写规范的代码时，该怎么合理地使用注解，具体就是Override、Deprecated、SuppressWarnings这三个注解</strong>。更详细的Java注解技术和规范，以及如何自定义注解，需要你参考相关的文档。</p><h2>在声明继承关系中，Java注解该如何使用？</h2><p>在代码编写中，继承和重写是面向对象编程的两个重要的机制。这两个机制，在给我们带来便利的同时，也顺便带来了一些麻烦，这就需要我们用到注解了。</p><p><strong>第一个麻烦是，识别子类的方法是不是重写方法</strong>。比如下面的例子，在一般情况下，对代码阅读者来说，最直觉的感受就是，getFirstName()这个方法不是重写方法，父类Person没有定义这个方法。</p><pre><code>class Student extends Person {\n    // snipped\n    public String getFirstName() {\n        // snipped\n    }\n    // snipped\n}\n</code></pre><p>通常如果一个方法是重写方法，一定要使用Override注解，清楚地标明这个方法是重写的方法。 使用Override 注解的另一个好处是，如果父类更改了方法，子类的编译就会出错。这样我们就能在第一时间获得通知，既可以及时地变更子类，也可以使父类的变更更加合理。</p><pre><code>class Student extends Person {\n    // snipped\n    @Override\n    public String getFirstName() {\n        // snipped\n    }\n    // snipped\n}\n</code></pre><p>为什么要识别重写方法呢？这是因为继承的第二个麻烦。</p><p><strong>第二个麻烦是，重写方法可以不遵守父类方法的规范</strong>。面向对象编程的机制，理想的状况是，父类定义了方法和规范，子类严格地遵守父类的定义。 比如Person.getFirstName()要求返回值是一个人的名，不包括姓氏部分，而且不可以是空值。但是子类Student.getFirstName()的实现完全有可能没有严格遵守这样的规范，不管是有意的，或者是无意的。 比如，返回了姓氏，或者返回了包括姓氏的姓名，或者可以返回了空值。</p><pre><code>class Student extends Person {\n    // snipped\n    @Override\n    public String getFirstName() {\n        return null;\n    }\n    // snipped\n}\n</code></pre><p>编译器无法检查重写到底该怎么实现，保持重写方法的行为一致需要我们凭借经验、肉眼识别。一般来说，一个重写方法不应该改变父类定义的规范。如果的确需要改变，就要有充足的理由，以及面对潜在兼容问题的具体的解决办法。</p><p>比如上面的例子中，如果Person.getFirstName()不允许返回空值，应用程序可以很安心地使用返回值，而不需要检查空值。</p><pre><code>boolean isAlice(Person person) {\n  return person.getFirstName().equals(&quot;Alice&quot;);\n}\n</code></pre><p>但是，有了可以返回空值的Studen.getFirstName()的重写，上面的代码就可能抛出NullPointerException。一段简单的、严格遵守规范的代码，就变得危机四伏。</p><p>既然需要肉眼的判断，第一步就是要识别出重写方法。 识别方法越简单越好。</p><p>所以，重写的方法，一定要加上Override注解。这个注解，既可以提醒代码的阅读者，也提醒代码的书写者，要谨慎对待该方法在父类定义的规范。</p><p>识别出重写方法后，第二步就要判断重写的方法和父类规范的定义有没有冲突和抵触。</p><p>虽然一般情况下，子类的重写方法不应该改变父类的规范。但是，编写代码处处充满了无奈和妥协。极少数情况下，除了变更方法的规范，我们可能别无选择。 一旦这种情况发生，一定要明确标明，并注明潜在的后果。</p><p>如果重写方法既没有改变父类规范，也没有其他情况需要重点说明，重写方法就不应该有规范描述部分的存在。这样，可以减少规范描述对于阅读者的误导。我们当然需要了解具体的规范，但是应该查找、阅读父类的规范描述。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/70/3ac5f9860961e2e570a6dfe298290970.jpg?wh=629*913\" alt=\"\"><br>\n继承和重写还有一些其他的麻烦，我们后面的章节接着再聊。</p><h2>在废弃退役接口的情况下，如何使用注解？</h2><p>一个软件，部署得越广泛，生命力越悠久，就越需要不断地改进、升级。而废弃不合理的设计，拥抱更新的思想，也是软件改进的一部分。</p><p>然而，软件接口的废弃，不是一件简单的事情。越是广泛使用的接口，它的废弃、退役越困难。</p><p>比如，下面的String构造方法，是1994年Java 1.0设计实现的方法。很快，人们发现了这个方法的局限性。在1997年发布的Java 1.1中，废弃了该构造方法以及其他相关的方法。到现在，已经废弃20多年了，但Java依然没有删除这些方法，因为String的使用太广泛了！</p><pre><code>@Deprecated(since=&quot;1.1&quot;)\npublic String(byte ascii[], int hibyte) {\n    this(ascii, hibyte, 0, ascii.length);\n}\n</code></pre><p>无论对于软件的维护者，还是软件的使用者，废弃的接口都是不值得让我们继续耗费精力的。</p><p>如果软件的维护者继续在废弃的接口上投入精力，意味着这个接口随着时间的推移，它的实现可能会存在各种各样的问题，包括严重的安全问题，就连使用者也要承担这些风险。而且还会有用户持续把它们运用到新的应用中去，这就违背了废弃接口的初衷。更多的使用者加入危险的游戏，也增加了删除废弃接口的难度。</p><p>这就要求我们做好两件事情。</p><p><strong>第一件事情是，如果接口的设计存在不合理性，或者新方法取代了旧方法，我们应该尽早地废弃该接口</strong>。</p><p>及时止损！</p><p>做好这件事情，需要我们使用Deprecated注解，并且用一切可以使用的办法，广而告之。对于代码而言，要在声明中使用Deprecated注解；在规范描述中，说明废弃的原因以及替代的办法；对于有计划要删除的接口，要注明计划删除的版本号。</p><p>下面是两个可以参照的Java代码废弃接口的例子：</p><pre><code>java/lang/String.java:\n\n/**\n * Counts the number of stack frames in this thread. The thread must\n * be suspended.\n *\n * @return     the number of stack frames in this thread.\n * @throws     IllegalThreadStateException  if this thread is not\n *             suspended.\n * @deprecated The definition of this call depends on\n *             {@link #suspend}, which is deprecated.  Further,\n *             the results of this call were never well-defined.\n *             This method is subject to removal in a future\n *             version of Java SE.\n * @see        StackWalker\n */\n@Deprecated(since=&quot;1.2&quot;, forRemoval=true)\npublic native int countStackFrames();\n</code></pre><pre><code>java.security.Certificate.java:\n\n/**\n * &lt;p&gt;This is an interface of abstract methods for managing a\n * variety of identity certificates.\n *\n * ... snipped ...\n *\n * @deprecated This class is deprecated and subject to removal\n *     in a future version of Java SE. It has been replaced by\n *     {@code java.security.cert.Certificate} and related classes.\n * @see java.security.cert.Certificate\n */\n@Deprecated(since=&quot;1.2&quot;, forRemoval=true)\npublic interface Certificate {\n    // snipped\n}\n</code></pre><p><strong>第二件事情是，如果我们在现有的代码中使用了废弃的接口，要尽快转换、使用替换的方法</strong>。等到废弃方法删除的时候，再去更改，就太晚了，<strong>不要等到压力山大的时候才救火</strong>。</p><p>如果一个接口被废弃，编译器会警告继续使用的代码。Java提供了一个不推荐使用的注解，SuppressWarnings。这个注解告诉编译器，忽略特定的警告。警告是非常有价值的信息，忽略警告永远不是一个最好的选项。</p><p>再次强调，除非万不得已，不要使用SuppressWarnings。如果万不得已来临，请参考下面的例子。</p><pre><code>@SuppressWarnings(&quot;deprecation&quot;)\nprivate boolean myMethodUseDeprecatedMethod() {\n  // snipped\n}\n</code></pre><p>当然，这样的使用带来了一系列的后遗症。 由于，废弃的编译警告被无视，我们使用了废弃接口的事实就被淹没在代码的海洋里，再也进入不了我们的视野。不到废弃接口被删除的那一天，我们都意识不到我们的代码里使用了废弃的接口，我们的应用程序都要承担着废弃接口维护不足的种种风险，包括严重的安全风险。</p><p>后面我们还会谈到，不要轻易地更改现有的代码，即使这些代码很丑陋，散发着浓浓的腐臭味。但是，有一个例外，如果看到了使用SuppressWarnings的代码，我们要尽可能地想办法把相关的警告消除掉、把这个注解去掉，越快越好。</p><h2>小结</h2><p>Java注解的功能很丰富，了解注解可以使得我们编码的工作更轻松。 这一次，希望我们记住三个基本的实践：</p><ol>\n<li>重写的方法，总是使用；</li>\n<li>过时的接口，尽早废弃；</li>\n<li>废弃的接口，不要使用。</li>\n</ol><h2>一起来动手</h2><p>Java的注解非常丰富，功能也很强大。借这个机会，我想让大家互相分享一下，你最经常使用的注解是什么？什么情况下使用这个注解？这个注解给你带来哪些便利？欢迎你把你的经验发布在评论区，我们一起来学习更多的注解，一起来进步。</p><p>也欢迎你把这篇文章分享给你的朋友或者同事，一起来探讨吧！</p><p></p>","neighbors":{"left":{"article_title":"08 | 写好声明的“八项纪律”","id":78288},"right":{"article_title":"10 | 异常处理都有哪些陷阱？","id":79083}},"comments":[{"had_liked":false,"id":63035,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1548234085,"is_pvip":false,"replies":[{"id":"22361","content":"人生三十，学历的分量应该比重不大了。国内的部分大公司，年龄是个考量的因素，但是也就是众多因素中的一个因素。如果把劳动力看成一个理性的市场，重要的是我们有什么可以拿来交换的。<br><br>我有一个朋友，认识他的人都特别佩服，他曾经兼顾过一段时间的非常枯燥无聊、看起来也没什么技术含量的工作。 过了几年，当他把工作转交给下一个人时，他已经把这项工作做的像一个艺术了。他做了大量的自动化，看起来非常枯燥无聊的事情，被他搞的很有趣，自动化后，根本就占用不了他多长时间。<br><br>软件是一个复杂的系统，需要各种各样的人才，有能研发的，有能测试的，有能运维的，有能运营的。每种都需要不同的技能。再厉害的研发也不一定做得了测试，也不一定做得了运维。<br><br>把你手头的工作做出花来，这就是我们值钱的地方。 怎么才能做出花来呢？ 这个你的领导不知道，你的公司可能也不知道，所以大概率没有人能够教你怎么做。你得自己去从工作中发现现实的问题，找到具体的解决办法。多看看新的技术，想一想能不能用到你的工作环境中去。 你可能看到100个技术，只有一个能用。 一个能用，这就行了。你要是不看100个，可能没有办法找到这一个。<br><br>运维就是一个涉及到很多复杂知识的岗位，它的复杂度一点都不必软件开发简单。 但是，的确也有的运维就是看几台机器。但是，既然是你做运维，你可以自己定义运维该怎么做最好。<br><br>不管时哪一个岗位，如果做到一定程度，年龄从来都不是真正的问题。很多岗位，年龄都是优势，而不是问题，因为没有积年累月的积累，我们成不了一个领域最专业的人。成为问题的，是我们40岁了，水平还停留在20到30岁的阶段。<br><br>Stay Hungry, Stay Foolish!","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548275085,"ip_address":"","comment_id":63035,"utype":1}],"discussion_count":2,"race_medal":0,"score":"220591566181","product_id":100019601,"comment_content":"老师，问3个很重要的题外问题：<br>1. 大专学历，想直接自学考本科或研究生，自考学历中大型公司承认的吗？<br>2. 大公司对年龄有限制的吗？<br>3. 30多岁，运维（编程自学java一年，没项目经验），只有小公司工作经验，技术一般，发展方向是什么？很多IT公司好像都不要年龄大点的~~人生80，那不是40岁就没得工作了？<br>","like_count":52,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437447,"discussion_content":"人生三十，学历的分量应该比重不大了。国内的部分大公司，年龄是个考量的因素，但是也就是众多因素中的一个因素。如果把劳动力看成一个理性的市场，重要的是我们有什么可以拿来交换的。\n\n我有一个朋友，认识他的人都特别佩服，他曾经兼顾过一段时间的非常枯燥无聊、看起来也没什么技术含量的工作。 过了几年，当他把工作转交给下一个人时，他已经把这项工作做的像一个艺术了。他做了大量的自动化，看起来非常枯燥无聊的事情，被他搞的很有趣，自动化后，根本就占用不了他多长时间。\n\n软件是一个复杂的系统，需要各种各样的人才，有能研发的，有能测试的，有能运维的，有能运营的。每种都需要不同的技能。再厉害的研发也不一定做得了测试，也不一定做得了运维。\n\n把你手头的工作做出花来，这就是我们值钱的地方。 怎么才能做出花来呢？ 这个你的领导不知道，你的公司可能也不知道，所以大概率没有人能够教你怎么做。你得自己去从工作中发现现实的问题，找到具体的解决办法。多看看新的技术，想一想能不能用到你的工作环境中去。 你可能看到100个技术，只有一个能用。 一个能用，这就行了。你要是不看100个，可能没有办法找到这一个。\n\n运维就是一个涉及到很多复杂知识的岗位，它的复杂度一点都不必软件开发简单。 但是，的确也有的运维就是看几台机器。但是，既然是你做运维，你可以自己定义运维该怎么做最好。\n\n不管时哪一个岗位，如果做到一定程度，年龄从来都不是真正的问题。很多岗位，年龄都是优势，而不是问题，因为没有积年累月的积累，我们成不了一个领域最专业的人。成为问题的，是我们40岁了，水平还停留在20到30岁的阶段。\n\nStay Hungry, Stay Foolish!","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548275085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138766,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/4e/1c654d86.jpg","nickname":"Omooo","note":"","ucode":"FFADFDC72EC847","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308601,"discussion_content":"卧槽，一语惊醒梦中人！\n“你可能看到100个技术，只有一个能用。 一个能用，这就行了。你要是不看100个，可能没有办法找到这一个。”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601003227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63199,"user_name":"岁月安然","can_delete":false,"product_type":"c1","uid":1258557,"ip_address":"","ucode":"4538C24B67B513","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/3d/51762e76.jpg","comment_is_top":false,"comment_ctime":1548297834,"is_pvip":false,"replies":[{"id":"22388","content":"学习了，我还不知道这个插件。注解真的非常强大！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548306682,"ip_address":"","comment_id":63199,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61677839978","product_id":100019601,"comment_content":"lombok插件的很多实用的注解<br>@Data 使用在类上，该注解会提供getter、setter、equals、canEqual、hashCode、toString方法。<br>@NonNull 该注解使用在属性上，该注解用于属的非空检查，当放在setter方法的字段上，将生成一个空检查，如果为空，则抛出NullPointerException。<br>@AllArgsConstructor 该注解使用在类上，该注解提供一个全参数的构造方法，默认不提供无参构造。<br>@NoArgsConstructor 该注解使用在类上，该注解提供一个无参构造。<br>等等","like_count":15,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437499,"discussion_content":"学习了，我还不知道这个插件。注解真的非常强大！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548306682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94923,"user_name":"卞雪达","can_delete":false,"product_type":"c1","uid":1523591,"ip_address":"","ucode":"D03875E6157716","user_header":"https://static001.geekbang.org/account/avatar/00/17/3f/87/8860f508.jpg","comment_is_top":false,"comment_ctime":1557924397,"is_pvip":false,"replies":[{"id":"33985","content":"👍 很多Java的特性，被大家用的出神入化，甚至远远超出了设计者的构想！这真的很帅啊！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1557971073,"ip_address":"","comment_id":94923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14442826285","product_id":100019601,"comment_content":"哈哈哈，最常用的注解，现在都成Spring的@Autowired啦，还有Spring的各种注解，给我的感觉，Spring使用多了，都是注解编程啦，我参数检验都用注解完成。我也会写自己的注解，我刚刚还完成了一个@Excel，我这是个Web的项目，有的接口产生的数据，可能会被导出成Excel，我捣鼓了几波，终于弄了一个注解，放在controller层的方法上，让那种简单的回List的接口，可以直接导出成Excel（配合下http参数），我遇到比较大的麻烦，是我之前设计了一个@Page的注解，注在Service层方法上，帮助开启数据库分页（也要配合http参数，且是一个方法查一次数据的那种），而@Excel跟它有个比较大的冲突：@Page是要分页，@Excel是不要分页。用户肯定是查询的时候看到分页接口，导出的时候拿到全部结果，我得想办法通知一下@Page，我最开始尝试给@Page里面的default方法弄个参数，然后改这个值，后来发现这个值竟然不是每个线程独有的，而是唯一的，也就是改了大家全都改，后来想了想，大概是因为注解本质上是个接口或类似接口？最终选择了ThreadLocal来通知@Page，我已经使用了很多ThreadLoacal了，我之前用它不是很多，现在有些上瘾，又隐隐担心别有坑，比如我知道有个不remove可能有内存溢出的坑。回到注解的话题，注解编程我觉得挺帅的，@Override我也爱加，能给方法加多少注解我就加多少，感觉是一种加持，哈哈哈，不过创造、使用注解就像是创造、使用规则，得对这个规则熟悉，好多注解编译器也不能判断你是不是符合了规则，用的时候还是有些学习成本。","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450259,"discussion_content":"👍 很多Java的特性，被大家用的出神入化，甚至远远超出了设计者的构想！这真的很帅啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557971073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62908,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1548206189,"is_pvip":false,"replies":[{"id":"22238","content":"加油！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548212491,"ip_address":"","comment_id":62908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14433108077","product_id":100019601,"comment_content":"阿里巴巴的扫描插件或许会有帮助的,在使用idea的过程中,安装了Alibaba Java Coding Guidelines之后,代码的规范等等插件就会检测出来报红,虽然可以运行,但是对于有强迫症和代码洁癖的人来说就很难受.<br>包括了if不写括号,继承的方法没有使用@Override注解.<br><br>对于刚刚工作的我,java中的注解用的最多的就是@Override了. 废弃方法在idea中会有横线作为标记,有这种标记的方法一律不使用.<br><br>继续加油去了.","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437395,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548212491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64099,"user_name":"web","can_delete":false,"product_type":"c1","uid":1069301,"ip_address":"","ucode":"32677A42C12650","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/f5/3bf66adb.jpg","comment_is_top":false,"comment_ctime":1548666802,"is_pvip":false,"replies":[{"id":"22709","content":"😄和规范有关的注解。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548688259,"ip_address":"","comment_id":64099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10138601394","product_id":100019601,"comment_content":"题目有点大, 以为是讲怎么写注解; 内容有点水, 半个版面怎么写override","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437857,"discussion_content":"😄和规范有关的注解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548688259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62891,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1548203370,"is_pvip":false,"replies":[{"id":"22228","content":"赞，这是一个好习惯！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548204541,"ip_address":"","comment_id":62891,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10138137962","product_id":100019601,"comment_content":"现在基本上是用静态代码检查工具扫描业务代码，jdk中的废弃方法基本替换掉","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437387,"discussion_content":"赞，这是一个好习惯！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548204541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84473,"user_name":"程龙","can_delete":false,"product_type":"c1","uid":1131918,"ip_address":"","ucode":"645516BFF8A96F","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/8e/83bac3bb.jpg","comment_is_top":false,"comment_ctime":1554868742,"is_pvip":false,"replies":[{"id":"30432","content":"要区分一下。 一般的，我们说接口是公开的interface或者class。接口的规范（注释的一种形式）要写在接口里，这样自动生成的文档，便于查阅。一般的实现类，是在内部包或者代码里。实现类的注释，是帮助理解实现类的，要贴着代码写。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1554874427,"ip_address":"","comment_id":84473,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5849836038","product_id":100019601,"comment_content":"老师 我想问下，接口和实现类，注解应该写在接口 上面还是实现类?","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446376,"discussion_content":"要区分一下。 一般的，我们说接口是公开的interface或者class。接口的规范（注释的一种形式）要写在接口里，这样自动生成的文档，便于查阅。一般的实现类，是在内部包或者代码里。实现类的注释，是帮助理解实现类的，要贴着代码写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554874427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67017,"user_name":"醉侠","can_delete":false,"product_type":"c1","uid":1106395,"ip_address":"","ucode":"1DE25BF9A15566","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKcg9I9LFukCRm0r06JZFnUrERQVlh7EZqTWibXcMHHAJdLJGIjy4ZvWlXfqCFvRjBW9RoqkwLXibMg/132","comment_is_top":false,"comment_ctime":1550056557,"is_pvip":false,"replies":[{"id":"23758","content":"是字符编码的问题，这个构造函数（String​(byte[] ascii, int hibyte)）没有充分的信息可以把字节（byte）转换成合适的字符（character）。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1550077449,"ip_address":"","comment_id":67017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845023853","product_id":100019601,"comment_content":"老师，想知道文章里String的构造函数为什么被移除，是因为字符编码的问题吗？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439017,"discussion_content":"是字符编码的问题，这个构造函数（String​(byte[] ascii, int hibyte)）没有充分的信息可以把字节（byte）转换成合适的字符（character）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550077449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65280,"user_name":"攻城拔寨","can_delete":false,"product_type":"c1","uid":1053934,"ip_address":"","ucode":"CBC37183DAB6B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/ee/d72a8222.jpg","comment_is_top":false,"comment_ctime":1549190359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844157655","product_id":100019601,"comment_content":"用的最多的应该是Lombox的@Data了","like_count":1},{"had_liked":false,"id":64632,"user_name":"小成","can_delete":false,"product_type":"c1","uid":1350143,"ip_address":"","ucode":"1BC685767B0FBD","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/ff/046495bb.jpg","comment_is_top":false,"comment_ctime":1548838242,"is_pvip":false,"replies":[{"id":"22919","content":"谢谢分享，这个留言对使用C++的有帮助！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548912976,"ip_address":"","comment_id":64632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843805538","product_id":100019601,"comment_content":"C++11引入了override关键字，对应Java的override.<br>C++14引入了deprecated关键字，对应Java的deprecated.","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438112,"discussion_content":"谢谢分享，这个留言对使用C++的有帮助！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548912976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62914,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1548206697,"is_pvip":false,"replies":[{"id":"22240","content":"谢谢分享C++对应的关键字。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548212734,"ip_address":"","comment_id":62914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843173993","product_id":100019601,"comment_content":"Override对应C++就是virtual了，经常用，以前还真不太清楚为什么重写的方法要加，就觉得好区别，就保留这个习惯了，今天才意识到要避免父类删除继承方法后，能快速通过编译器定位问题。<br>貌似C++没有JAVA的Depraceted和SuppressWarnings类似的，我再查查确认下，Deprecated的用处挺大的，及时止损呀","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437398,"discussion_content":"谢谢分享C++对应的关键字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548212734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62898,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1548204246,"is_pvip":false,"replies":[{"id":"22237","content":"除了个别的例子，几乎都是用Java讲解的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548212398,"ip_address":"","comment_id":62898,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843171542","product_id":100019601,"comment_content":"课程都是以java讲解的吗，没有其他编程语言吗","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437390,"discussion_content":"除了个别的例子，几乎都是用Java讲解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548212398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351662,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658061923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658061923","product_id":100019601,"comment_content":"不要等到压力山大的时候才救火。--记下来","like_count":0},{"had_liked":false,"id":322119,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1637196958,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637196958","product_id":100019601,"comment_content":"重写的方法，总是使用；<br>过时的接口，尽早废弃；<br>废弃的接口，不要使用。<br>虽然我们的开发语言没有注解一说，但是可以这都是借鉴的地方，赞~","like_count":0},{"had_liked":false,"id":287626,"user_name":"不工","can_delete":false,"product_type":"c1","uid":1462843,"ip_address":"","ucode":"A8725E6D0E1765","user_header":"https://static001.geekbang.org/account/avatar/00/16/52/3b/f1501d79.jpg","comment_is_top":false,"comment_ctime":1618054754,"is_pvip":false,"replies":[{"id":"104683","content":"链接API，比如类名、方法名字的时候，一般使用code，而不用link。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1618463672,"ip_address":"","comment_id":287626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618054754","product_id":100019601,"comment_content":"老师，什么时候用 {@link } {@code } ？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518371,"discussion_content":"链接API，比如类名、方法名字的时候，一般使用code，而不用link。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618463672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250253,"user_name":"Omooo","can_delete":false,"product_type":"c1","uid":1138766,"ip_address":"","ucode":"FFADFDC72EC847","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/4e/1c654d86.jpg","comment_is_top":false,"comment_ctime":1601003325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601003325","product_id":100019601,"comment_content":"用得最多的肯定就是 Android 里面的 NonNull 和 Nullable 了。","like_count":0},{"had_liked":false,"id":96639,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1558483443,"is_pvip":false,"replies":[{"id":"34705","content":"“是否使用注解应该是个开放话题”，是的，注解很复杂，不同的注解，要分开考量。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1558585984,"ip_address":"","comment_id":96639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558483443","product_id":100019601,"comment_content":"注解如果没有校检功能就是注释，如果需要校检功能，各个语言都有自己的特色，比如 python 的装饰器，能够极大的提高代码可读性，模块封装的更好。<br>是否使用注解应该是个开放话题，注释倒是必须写清楚的。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450947,"discussion_content":"“是否使用注解应该是个开放话题”，是的，注解很复杂，不同的注解，要分开考量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558585984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74593,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1552264240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552264240","product_id":100019601,"comment_content":"spring注解才是坑超级多","like_count":0},{"had_liked":false,"id":70364,"user_name":"悲劇の輪廻","can_delete":false,"product_type":"c1","uid":1367967,"ip_address":"","ucode":"73B3C152B65EE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/X9fK7y43n7oAo19GlYHQZRQQ2Y0Dj8wHUEDXHWXUauxXOiaMtAc0TPtv1dyXHWDr4P7icDITmOLbaKVWXnY5oReQ/132","comment_is_top":false,"comment_ctime":1551085898,"is_pvip":false,"replies":[{"id":"25128","content":"只有多次使用时，一般才会考虑定义常量。euqals的使用是一个很好的实践。代码质量就是这些一点一点的小事累积而成的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1551107312,"ip_address":"","comment_id":70364,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551085898","product_id":100019601,"comment_content":"虽然只是为了举例而写的代码段，但一般情况下需要被equals的对象为字符串时我们会声明一个字符串常量，而当一个从方法获得的值需要与字符串常量作比较的时候，通常把方法返回值放在被equals的位置，这样也能避免方法返回null时抛出空指针异常，而且不会引起逻辑上的错误。:-)","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440586,"discussion_content":"只有多次使用时，一般才会考虑定义常量。euqals的使用是一个很好的实践。代码质量就是这些一点一点的小事累积而成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551107312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63267,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1548315531,"is_pvip":false,"replies":[{"id":"22437","content":"可能是你搞错了，我不懂Oracle的数据库。我的数据库知识也比较陈旧了，还是十多年前的见识，没什么长进。<br><br>小伙伴们帮着回答一下吧！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548343531,"ip_address":"","comment_id":63267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548315531","product_id":100019601,"comment_content":"看你介绍，您是DBA大神，有哥们小公司搞DBA几年，会mysql、MSSQL、mongoDB，群集、分库，分表、分区简单优化等，不懂开发，我想问一下：<br>1.DBA一般发展方向是怎样的呀？运维和开发我了解，DBA没接触过，无法给建议，一般的升级过程是怎样的？<br>2.DBA开发语言选择是C++还是java，还是其它？<br>3.以后发展方向是怎样？现在都是开源、大数据时代时代，阿里又搞“去IOE”，一般oracle DBA发展前景不好吧？<br><br>DBA工资普遍比开发、运维高，但感觉很难~~能帮菜鸟指一个大概的方向吗？谢谢~~","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437527,"discussion_content":"可能是你搞错了，我不懂Oracle的数据库。我的数据库知识也比较陈旧了，还是十多年前的见识，没什么长进。\n\n小伙伴们帮着回答一下吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548343531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63232,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1548303386,"is_pvip":false,"replies":[{"id":"22386","content":"不客气","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548306365,"ip_address":"","comment_id":63232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548303386","product_id":100019601,"comment_content":"非常感谢您的认真回答！谢谢……","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437510,"discussion_content":"不客气","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548306365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63145,"user_name":"多拉格·five","can_delete":false,"product_type":"c1","uid":1207914,"ip_address":"","ucode":"07023F43811EE3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/6a/38a3fa8d.jpg","comment_is_top":false,"comment_ctime":1548288386,"is_pvip":false,"replies":[{"id":"22368","content":"了解了。谢谢！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548290326,"ip_address":"","comment_id":63145,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548288386","product_id":100019601,"comment_content":"在项目中使用Lombok可以减少很多重复代码的书写。使用注解在class文件中生成getter&#47;setter&#47;toString等方法。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437482,"discussion_content":"了解了。谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548290326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62909,"user_name":"allean","can_delete":false,"product_type":"c1","uid":1051470,"ip_address":"","ucode":"A0D2DB4F219EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","comment_is_top":false,"comment_ctime":1548206215,"is_pvip":false,"replies":[{"id":"22239","content":"FindBugs&#47;SpotBugds，或者规范的插件，都能检查出来这些问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1548212573,"ip_address":"","comment_id":62909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548206215","product_id":100019601,"comment_content":"Findbugs？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437396,"discussion_content":"FindBugs/SpotBugds，或者规范的插件，都能检查出来这些问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548212573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}