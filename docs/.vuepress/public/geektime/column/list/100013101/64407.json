{"id":64407,"title":"36 | unicode与字符编码","content":"<p>到目前为止，我们已经一起陆陆续续地学完了Go语言中那些最重要也最有特色的概念、语法和编程方式。我对于它们非常喜爱，简直可以用如数家珍来形容了。</p><p>在开始今天的内容之前，我先来做一个简单的总结。</p><h2>Go语言经典知识总结</h2><p>基于混合线程的并发编程模型自然不必多说。</p><p>在<strong>数据类型</strong>方面有：</p><ul>\n<li>基于底层数组的切片；</li>\n<li>用来传递数据的通道；</li>\n<li>作为一等类型的函数；</li>\n<li>可实现面向对象的结构体；</li>\n<li>能无侵入实现的接口等。</li>\n</ul><p>在<strong>语法</strong>方面有：</p><ul>\n<li>异步编程神器<code>go</code>语句；</li>\n<li>函数的最后关卡<code>defer</code>语句；</li>\n<li>可做类型判断的<code>switch</code>语句；</li>\n<li>多通道操作利器<code>select</code>语句；</li>\n<li>非常有特色的异常处理函数<code>panic</code>和<code>recover</code>。</li>\n</ul><p>除了这些，我们还一起讨论了<strong>测试Go程序</strong>的主要方式。这涉及了Go语言自带的程序测试套件，相关的概念和工具包括：</p><ul>\n<li>独立的测试源码文件；</li>\n<li>三种功用不同的测试函数；</li>\n<li>专用的<code>testing</code>代码包；</li>\n<li>功能强大的<code>go test</code>命令。</li>\n</ul><p>另外，就在前不久，我还为你深入讲解了Go语言提供的那些<strong>同步工具</strong>。它们也是Go语言并发编程工具箱中不可或缺的一部分。这包括了：</p><ul>\n<li>经典的互斥锁；</li>\n<li>读写锁；</li>\n<li>条件变量；</li>\n<li>原子操作。</li>\n</ul><p>以及<strong>Go语言特有的一些数据类型</strong>，即：</p><ul>\n<li>单次执行小助手<code>sync.Once</code>；</li>\n<li>临时对象池<code>sync.Pool</code>；</li>\n<li>帮助我们实现多goroutine协作流程的<code>sync.WaitGroup</code>、<code>context.Context</code>；</li>\n<li>一种高效的并发安全字典<code>sync.Map</code>。</li>\n</ul><!-- [[[read_end]]] --><p>毫不夸张地说，如果你真正地掌握了上述这些知识，那么就已经获得了Go语言编程的精髓。</p><p>在这之后，你再去研读Go语言标准库和那些优秀第三方库中的代码的时候，就一定会事半功倍。同时，在使用Go语言编写软件的时候，你肯定也会如鱼得水、游刃有余的。</p><p>我用了大量的篇幅讲解了Go语言中最核心的知识点，真心希望你已经搞懂了这些内容。</p><p><strong>在后面的日子里，我会与你一起去探究Go语言标准库中最常用的那些代码包，弄清它们的用法、了解它们的机理。当然了，我还会顺便讲一讲那些必备的周边知识。</strong></p><h2>前导内容1：Go语言字符编码基础</h2><p>首先，让我们来关注字符编码方面的问题。这应该是在计算机软件领域中非常基础的一个问题了。</p><p>我在前面说过，Go语言中的标识符可以包含“任何Unicode编码可以表示的字母字符”。我还说过，虽然我们可以直接把一个整数值转换为一个<code>string</code>类型的值。</p><p>但是，被转换的整数值应该可以代表一个有效的Unicode代码点，否则转换的结果就将会是<code>\"�\"</code>，即：一个仅由高亮的问号组成的字符串值。</p><p>另外，当一个<code>string</code>类型的值被转换为<code>[]rune</code>类型值的时候，其中的字符串会被拆分成一个一个的Unicode字符。</p><p>显然，Go语言采用的字符编码方案从属于Unicode编码规范。更确切地说，Go语言的代码正是由Unicode字符组成的。Go语言的所有源代码，都必须按照Unicode编码规范中的UTF-8编码格式进行编码。</p><p>换句话说，Go语言的源码文件必须使用UTF-8编码格式进行存储。如果源码文件中出现了非UTF-8编码的字符，那么在构建、安装以及运行的时候，go命令就会报告错误“illegal UTF-8 encoding”。</p><p>在这里，我们首先要对Unicode编码规范有所了解。不过，在讲述它之前，我先来简要地介绍一下ASCII编码。</p><h3>前导内容 2： ASCII编码</h3><p>ASCII是英文“American Standard Code for Information Interchange”的缩写，中文译为美国信息交换标准代码。它是由美国国家标准学会（ANSI）制定的单字节字符编码方案，可用于基于文本的数据交换。</p><p>它最初是美国的国家标准，后又被国际标准化组织（ISO）定为国际标准，称为ISO 646标准，并适用于所有的拉丁文字字母。</p><p>ASCII编码方案使用单个字节（byte）的二进制数来编码一个字符。标准的ASCII编码用一个字节的最高比特（bit）位作为奇偶校验位，而扩展的ASCII编码则将此位也用于表示字符。ASCII编码支持的可打印字符和控制字符的集合也被叫做ASCII编码集。</p><p>我们所说的Unicode编码规范，实际上是另一个更加通用的、针对书面字符和文本的字符编码标准。它为世界上现存的所有自然语言中的每一个字符，都设定了一个唯一的二进制编码。</p><p>它定义了不同自然语言的文本数据在国际间交换的统一方式，并为全球化软件创建了一个重要的基础。</p><p>Unicode编码规范以ASCII编码集为出发点，并突破了ASCII只能对拉丁字母进行编码的限制。它不但提供了可以对世界上超过百万的字符进行编码的能力，还支持所有已知的转义序列和控制代码。</p><p>我们都知道，在计算机系统的内部，抽象的字符会被编码为整数。这些整数的范围被称为代码空间。在代码空间之内，每一个特定的整数都被称为一个代码点。</p><p>一个受支持的抽象字符会被映射并分配给某个特定的代码点，反过来讲，一个代码点总是可以被看成一个被编码的字符。</p><p>Unicode编码规范通常使用十六进制表示法来表示Unicode代码点的整数值，并使用“U+”作为前缀。比如，英文字母字符“a”的Unicode代码点是U+0061。在Unicode编码规范中，一个字符能且只能由与它对应的那个代码点表示。</p><p>Unicode编码规范现在的最新版本是11.0，并会于2019年3月发布12.0版本。而Go语言从1.10版本开始，已经对Unicode的10.0版本提供了全面的支持。对于绝大多数的应用场景来说，这已经完全够用了。</p><p>Unicode编码规范提供了三种不同的编码格式，即：UTF-8、UTF-16和UTF-32。其中的UTF是UCS Transformation Format的缩写。而UCS又是Universal Character Set的缩写，但也可以代表Unicode Character Set。所以，UTF也可以被翻译为Unicode转换格式。它代表的是字符与字节序列之间的转换方式。</p><p>在这几种编码格式的名称中，“-”右边的整数的含义是，以多少个比特位作为一个编码单元。以UTF-8为例，它会以8个比特，也就是一个字节，作为一个编码单元。并且，它与标准的ASCII编码是完全兼容的。也就是说，在[0x00, 0x7F]的范围内，这两种编码表示的字符都是相同的。这也是UTF-8编码格式的一个巨大优势。</p><p>UTF-8是一种可变宽的编码方案。换句话说，它会用一个或多个字节的二进制数来表示某个字符，最多使用四个字节。比如，对于一个英文字符，它仅用一个字节的二进制数就可以表示，而对于一个中文字符，它需要使用三个字节才能够表示。不论怎样，一个受支持的字符总是可以由UTF-8编码为一个字节序列。以下会简称后者为UTF-8编码值。</p><p>现在，在你初步地了解了这些知识之后，请认真地思考并回答下面的问题。别担心，我会在后面进一步阐述Unicode、UTF-8以及Go语言对它们的运用。</p><p><strong>问题：一个<code>string</code>类型的值在底层是怎样被表达的？</strong></p><p><strong>典型回答</strong> 是在底层，一个<code>string</code>类型的值是由一系列相对应的Unicode代码点的UTF-8编码值来表达的。</p><h2>问题解析</h2><p>在Go语言中，一个<code>string</code>类型的值既可以被拆分为一个包含多个字符的序列，也可以被拆分为一个包含多个字节的序列。</p><p>前者可以由一个以<code>rune</code>为元素类型的切片来表示，而后者则可以由一个以<code>byte</code>为元素类型的切片代表。</p><p><code>rune</code>是Go语言特有的一个基本数据类型，它的一个值就代表一个字符，即：一个Unicode字符。</p><p>比如，<code>'G'</code>、<code>'o'</code>、<code>'爱'</code>、<code>'好'</code>、<code>'者'</code>代表的就都是一个Unicode字符。</p><p>我们已经知道，UTF-8编码方案会把一个Unicode字符编码为一个长度在[1, 4]范围内的字节序列。所以，一个<code>rune</code>类型的值也可以由一个或多个字节来代表。</p><pre><code>type rune = int32\n</code></pre><p>根据<code>rune</code>类型的声明可知，它实际上就是<code>int32</code>类型的一个别名类型。也就是说，一个<code>rune</code>类型的值会由四个字节宽度的空间来存储。它的存储空间总是能够存下一个UTF-8编码值。</p><p>一个<code>rune</code>类型的值在底层其实就是一个UTF-8编码值。前者是（便于我们人类理解的）外部展现，后者是（便于计算机系统理解的）内在表达。</p><p>请看下面的代码：</p><pre><code>str := &quot;Go爱好者&quot;\nfmt.Printf(&quot;The string: %q\\n&quot;, str)\nfmt.Printf(&quot;  =&gt; runes(char): %q\\n&quot;, []rune(str))\nfmt.Printf(&quot;  =&gt; runes(hex): %x\\n&quot;, []rune(str))\nfmt.Printf(&quot;  =&gt; bytes(hex): [% x]\\n&quot;, []byte(str))\n</code></pre><p>字符串值<code>\"Go爱好者\"</code>如果被转换为<code>[]rune</code>类型的值的话，其中的每一个字符（不论是英文字符还是中文字符）就都会独立成为一个<code>rune</code>类型的元素值。因此，这段代码打印出的第二行内容就会如下所示：</p><pre><code>  =&gt; runes(char): ['G' 'o' '爱' '好' '者']\n</code></pre><p>又由于，每个<code>rune</code>类型的值在底层都是由一个UTF-8编码值来表达的，所以我们可以换一种方式来展现这个字符序列：</p><pre><code>  =&gt; runes(hex): [47 6f 7231 597d 8005]\n</code></pre><p>可以看到，五个十六进制数与五个字符相对应。很明显，前两个十六进制数<code>47</code>和<code>6f</code>代表的整数都比较小，它们分别表示字符<code>'G'</code>和<code>'o'</code>。</p><p>因为它们都是英文字符，所以对应的UTF-8编码值用一个字节表达就足够了。一个字节的编码值被转换为整数之后，不会大到哪里去。</p><p>而后三个十六进制数<code>7231</code>、<code>597d</code>和<code>8005</code>都相对较大，它们分别表示中文字符<code>'爱'</code>、<code>'好'</code>和<code>'者'</code>。</p><p>这些中文字符对应的UTF-8编码值，都需要使用三个字节来表达。所以，这三个数就是把对应的三个字节的编码值，转换为整数后得到的结果。</p><p>我们还可以进一步地拆分，把每个字符的UTF-8编码值都拆成相应的字节序列。上述代码中的第五行就是这么做的。它会得到如下的输出：</p><pre><code>  =&gt; bytes(hex): [47 6f e7 88 b1 e5 a5 bd e8 80 85]\n</code></pre><p>这里得到的字节切片比前面的字符切片明显长了很多。这正是因为一个中文字符的UTF-8编码值需要用三个字节来表达。</p><p>这个字节切片的前两个元素值与字符切片的前两个元素值是一致的，而在这之后，前者的每三个元素值才对应字符切片中的一个元素值。</p><p>注意，对于一个多字节的UTF-8编码值来说，我们可以把它当做一个整体转换为单一的整数，也可以先把它拆成字节序列，再把每个字节分别转换为一个整数，从而得到多个整数。</p><p>这两种表示法展现出来的内容往往会很不一样。比如，对于中文字符<code>'爱'</code>来说，它的UTF-8编码值可以展现为单一的整数<code>7231</code>，也可以展现为三个整数，即：<code>e7</code>、<code>88</code>和<code>b1</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/85/0d8dac40ccb2972dbceef33d03741085.png?wh=1129*604\" alt=\"\"><br>\n（字符串值的底层表示）</p><p>总之，一个<code>string</code>类型的值会由若干个Unicode字符组成，每个Unicode字符都可以由一个<code>rune</code>类型的值来承载。</p><p>这些字符在底层都会被转换为UTF-8编码值，而这些UTF-8编码值又会以字节序列的形式表达和存储。因此，一个<code>string</code>类型的值在底层就是一个能够表达若干个UTF-8编码值的字节序列。</p><h2>知识扩展</h2><p><strong>问题 1：使用带有<code>range</code>子句的<code>for</code>语句遍历字符串值的时候应该注意什么？</strong></p><p>带有<code>range</code>子句的<code>for</code>语句会先把被遍历的字符串值拆成一个字节序列，然后再试图找出这个字节序列中包含的每一个UTF-8编码值，或者说每一个Unicode字符。</p><p>这样的<code>for</code>语句可以为两个迭代变量赋值。如果存在两个迭代变量，那么赋给第一个变量的值，就将会是当前字节序列中的某个UTF-8编码值的第一个字节所对应的那个索引值。</p><p>而赋给第二个变量的值，则是这个UTF-8编码值代表的那个Unicode字符，其类型会是<code>rune</code>。</p><p>例如，有这么几行代码：</p><pre><code>str := &quot;Go爱好者&quot;\nfor i, c := range str {\n fmt.Printf(&quot;%d: %q [% x]\\n&quot;, i, c, []byte(string(c)))\n}\n</code></pre><p>这里被遍历的字符串值是<code>\"Go爱好者\"</code>。在每次迭代的时候，这段代码都会打印出两个迭代变量的值，以及第二个值的字节序列形式。完整的打印内容如下：</p><pre><code>0: 'G' [47]\n1: 'o' [6f]\n2: '爱' [e7 88 b1]\n5: '好' [e5 a5 bd]\n8: '者' [e8 80 85]\n</code></pre><p>第一行内容中的关键信息有<code>0</code>、<code>'G'</code>和<code>[47]</code>。这是由于这个字符串值中的第一个Unicode字符是<code>'G'</code>。该字符是一个单字节字符，并且由相应的字节序列中的第一个字节表达。这个字节的十六进制表示为<code>47</code>。</p><p>第二行展示的内容与之类似，即：第二个Unicode字符是<code>'o'</code>，由字节序列中的第二个字节表达，其十六进制表示为<code>6f</code>。</p><p>再往下看，第三行展示的是<code>'爱'</code>，也是第三个Unicode字符。因为它是一个中文字符，所以由字节序列中的第三、四、五个字节共同表达，其十六进制表示也不再是单一的整数，而是<code>e7</code>、<code>88</code>和<code>b1</code>组成的序列。</p><p>下面要注意了，正是因为<code>'爱'</code>是由三个字节共同表达的，所以第四个Unicode字符<code>'好'</code>对应的索引值并不是<code>3</code>，而是<code>2</code>加<code>3</code>后得到的<code>5</code>。</p><p>这里的<code>2</code>代表的是<code>'爱'</code>对应的索引值，而<code>3</code>代表的则是<code>'爱'</code>对应的UTF-8编码值的宽度。对于这个字符串值中的最后一个字符<code>'者'</code>来说也是类似的，因此，它对应的索引值是<code>8</code>。</p><p>由此可以看出，这样的<code>for</code>语句可以逐一地迭代出字符串值里的每个Unicode字符。但是，相邻的Unicode字符的索引值并不一定是连续的。这取决于前一个Unicode字符是否为单字节字符。</p><p>正因为如此，如果我们想得到其中某个Unicode字符对应的UTF-8编码值的宽度，就可以用下一个字符的索引值减去当前字符的索引值。</p><p>初学者可能会对<code>for</code>语句的这种行为感到困惑，因为它给予两个迭代变量的值看起来并不总是对应的。不过，一旦我们了解了它的内在机制就会拨云见日、豁然开朗。</p><h2>总结</h2><p>我们今天把目光聚焦在了Unicode编码规范、UTF-8编码格式，以及Go语言对字符串和字符的相关处理方式上。</p><p>Go语言的代码是由Unicode字符组成的，它们都必须由Unicode编码规范中的UTF-8编码格式进行编码并存储，否则就会导致go命令的报错。</p><p>Unicode编码规范中的编码格式定义的是：字符与字节序列之间的转换方式。其中的UTF-8是一种可变宽的编码方案。</p><p>它会用一个或多个字节的二进制数来表示某个字符，最多使用四个字节。一个受支持的字符，总是可以由UTF-8编码为一个字节序列，后者也可以被称为UTF-8编码值。</p><p>Go语言中的一个<code>string</code>类型值会由若干个Unicode字符组成，每个Unicode字符都可以由一个<code>rune</code>类型的值来承载。</p><p>这些字符在底层都会被转换为UTF-8编码值，而这些UTF-8编码值又会以字节序列的形式表达和存储。因此，一个<code>string</code>类型的值在底层就是一个能够表达若干个UTF-8编码值的字节序列。</p><p>初学者可能会对带有<code>range</code>子句的<code>for</code>语句遍历字符串值的行为感到困惑，因为它给予两个迭代变量的值看起来并不总是对应的。但事实并非如此。</p><p>这样的<code>for</code>语句会先把被遍历的字符串值拆成一个字节序列，然后再试图找出这个字节序列中包含的每一个UTF-8编码值，或者说每一个Unicode字符。</p><p>相邻的Unicode字符的索引值并不一定是连续的。这取决于前一个Unicode字符是否为单字节字符。一旦我们清楚了这些内在机制就不会再困惑了。</p><p>对于Go语言来说，Unicode编码规范和UTF-8编码格式算是基础之一了。我们应该了解到它们对Go语言的重要性。这对于正确理解Go语言中的相关数据类型以及日后的相关程序编写都会很有好处。</p><h2>思考题</h2><p>今天的思考题是：判断一个Unicode字符是否为单字节字符通常有几种方式？</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","neighbors":{"left":{"article_title":"35 | 并发安全字典sync.Map (下)","id":42800},"right":{"article_title":"37 | strings包与字符串操作","id":64877}},"comments":[{"had_liked":false,"id":37373,"user_name":"wade","can_delete":false,"product_type":"c1","uid":1101357,"ip_address":"","ucode":"BBA3B616B9297D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/2d/ef3b42df.jpg","comment_is_top":false,"comment_ctime":1541560634,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"207699990842","product_id":100013101,"comment_content":"而后三个十六进制数7231、597d和8005都相对较大，它们分别表示中文字符&#39;爱&#39;、&#39;好&#39;和&#39;者&#39;。这些中文字符对应的 UTF-8 编码值，都需要使用三个字节来表达。所以，这三个数就是把对应的三个字节来表达。所以，这三个数就是把对应的三个字节的编码值，转换为整数后得到的结果。<br><br>&quot;爱好者&quot;对应的7231、597d、8005，不是UTF-8编码值，是unicode码点。unicode码点和最终计算器存储用的utf-8编码值不是一样的。转换成rune的时候rune切片每个元素存储一个unicode码点，也就是string里的一个字符转成rune切片的一个元素。string是以utf-8编码存储，byte切片也就是存储用的string用utf-8编码存储后的字节序。<br><br>unicode和utf-8的关系，可以看这个文章<br>http:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2007&#47;10&#47;ascii_unicode_and_utf-8.html","like_count":48,"discussions":[{"author":{"id":1115149,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/0d/3dc5683a.jpg","nickname":"柯察金","note":"","ucode":"F722BF8FCD2C47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337013,"discussion_content":"这个老师没有搞清楚，瞎讲","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608770973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115149,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/0d/3dc5683a.jpg","nickname":"柯察金","note":"","ucode":"F722BF8FCD2C47","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390142,"discussion_content":"老师讲的很清晰了，不知道你为何有这个结论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629687103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337013,"ip_address":""},"score":390142,"extra":""},{"author":{"id":1312366,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CdR9bPIEjBCZQHEWKotibmRL8dSLwhL57Tw7b3FngWxO3pUVRwm9QD7knpHyFlVH44tyAysK8BNM4B7yzfNTtKA/132","nickname":"beast","note":"","ucode":"198CA31331CC50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551659,"discussion_content":"不知你评论前，是否看了链接的文章？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645078465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390142,"ip_address":""},"score":551659,"extra":""},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1312366,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CdR9bPIEjBCZQHEWKotibmRL8dSLwhL57Tw7b3FngWxO3pUVRwm9QD7knpHyFlVH44tyAysK8BNM4B7yzfNTtKA/132","nickname":"beast","note":"","ucode":"198CA31331CC50","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552288,"discussion_content":"看了几遍呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645373705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551659,"ip_address":""},"score":552288,"extra":""}]}]},{"had_liked":false,"id":217631,"user_name":"ONLY","can_delete":false,"product_type":"c1","uid":1049147,"ip_address":"","ucode":"180990E586D060","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","comment_is_top":false,"comment_ctime":1589552587,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"87488898507","product_id":100013101,"comment_content":"unicode只是给全世界的字符做了一个编码，假如世界上有100亿个字符，那么从0到100亿，有的数只占用一个字节，有的数二个有的数三个…，找到对应的编号就找到了对应的字符。unicode只给字符分配了编号，没有说怎么去存储这些字符，用1字节存不下，100字节太浪费，于是utf-8就想到了一个存储的点子，因为生活中用到的字符用4个字节应该能存下了，于是就用1到4个字节来存储这些字符，占1个字节的就用1字节存储，2字节的就用2字节存储，以此类推……，utf8要做的就是怎么去判断一个字符到底用了几个字节存储，就好比买绳子一样，有的人要两米有的人要一米，不按照尺寸剪肯定不行，具体怎么减咱们先不关心这个留给utf8去处理。存储这些编码在计算机里就是二进制。这些二进制utf8能读懂，但是计算机看来就是01没啥了不起的，8二进制放到4字节存储没毛病吧，装不满的高位大不了填充0，就是这么有钱豆浆喝一杯倒一杯，这个就是[]rune, 但是世界总有吃不饱饭的人看着闹心，那还是一个字节一个字节存吧，等需要查看字符的时候大不了再转换为rune切片，这就是[]byte","like_count":20,"discussions":[{"author":{"id":2897824,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJYJ74BKhY0ibtDEsWs0eBcWERTSOcsibQ6ke5ibhicibWYRmeyuQOoCN0t7mw0pf9o3lWmtU7ZPY2Azg/132","nickname":"Geek_f62433","note":"","ucode":"227F8013345AD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550447,"discussion_content":"说的通俗易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644547995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36861,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1541378692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65965888132","product_id":100013101,"comment_content":"src文件编码是utf8<br>string是utf8编码的mb，len(string)是字节的长度<br>string可以转化为[]rune，unicode码，32bit的数字，当字符看，len([]rune)为字符长度<br>string可以转化为[]byte，utf8编码字节串，len([]byte)和len(string)是一样的<br>for range的时候，迭代出首字节下标和rune，首字符下标可能跳跃(视上一个字符编码长度定)","like_count":15},{"had_liked":false,"id":36599,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1541167345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40195873009","product_id":100013101,"comment_content":"看rune大小<br>转成byte看长度<br>加个小尾巴,range看间隔<br>","like_count":9},{"had_liked":false,"id":50266,"user_name":"小虾米","can_delete":false,"product_type":"c1","uid":1005528,"ip_address":"","ucode":"F543987A7FAB20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/d8/425e1b0a.jpg","comment_is_top":false,"comment_ctime":1544938028,"is_pvip":false,"replies":[{"id":"19222","content":"这么说没错，不过rune在底层也是字节串。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1545576502,"ip_address":"","comment_id":50266,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23019774508","product_id":100013101,"comment_content":"这篇文章把unicode和utf8区分的不是很清楚，正如上面有个网友说的rune切变16进制输出是字符的unicode的码点，而byte切片输出的才是utf8的编码","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432930,"discussion_content":"这么说没错，不过rune在底层也是字节串。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545576502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4022,"discussion_content":"我觉得应该先理解这些：首先，unicode是一种编码规范，约定了每一个数字对应的一个符文，所以每一个数字就是一个码点；在此基础上，utf-8/16/32分别是针对unicode的一种编码实现，一个码点用什么样的格式去表示以便于计算机识别/存储/读取。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565064315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390138,"discussion_content":"老师这篇没毛病，讲的很清晰了，懂的自然懂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629686163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133945,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","nickname":"慢动作","note":"","ucode":"62C944F4A4D8AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378680,"discussion_content":"有什么底层不是字节串的，好像位图还是字节串模拟的，😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623332209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308622,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1629707815,"is_pvip":false,"replies":[{"id":"111766","content":"这里所谓的混合线程就是：OS内核外的线程&#47;协程 + OS内核里的系统线程。<br><br>它牵扯到了两个程序级别，一个是用户级，一个是内核级，所以也叫“混合”或“两级”的线程模型。从数量对应的角度讲，它也叫M:N的线程模型（M指核外线程数量，N指核内线程数量），即两者之间是动态匹配的。你想想看，goroutine和系统线程是不是动态匹配的。Go语言的并发模型中不止有混合线程，但底层是基于此的。<br><br>相对应的，Java用的是1:1的纯内核级线程模型，也就是说JVM中的一个线程就等同于内核中的一个系统线程，一一对应。<br><br>还有就是，Python的绿色线程，是M:1的纯用户级线程模型。同进程内的多个绿色线程实际上共用一个线程，它们并不是真的并发执行（共用一个线程不可能出现并发执行的情况），只是通过调度看起来像并发执行而已。<br>","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1629773596,"ip_address":"","comment_id":308622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18809576999","product_id":100013101,"comment_content":"郝林老师，请问一下：“基于混合线程的并发编程模型”。这句话该怎么理解呢？","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525564,"discussion_content":"这里所谓的混合线程就是：OS内核外的线程/协程 + OS内核里的系统线程。\n\n它牵扯到了两个程序级别，一个是用户级，一个是内核级，所以也叫“混合”或“两级”的线程模型。从数量对应的角度讲，它也叫M:N的线程模型（M指核外线程数量，N指核内线程数量），即两者之间是动态匹配的。你想想看，goroutine和系统线程是不是动态匹配的。Go语言的并发模型中不止有混合线程，但底层是基于此的。\n\n相对应的，Java用的是1:1的纯内核级线程模型，也就是说JVM中的一个线程就等同于内核中的一个系统线程，一一对应。\n\n还有就是，Python的绿色线程，是M:1的纯用户级线程模型。同进程内的多个绿色线程实际上共用一个线程，它们并不是真的并发执行（共用一个线程不可能出现并发执行的情况），只是通过调度看起来像并发执行而已。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629773596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88591,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1555948770,"is_pvip":false,"replies":[{"id":"31779","content":"可以用 unicode&#47;utf8 代码包中的 RuneCount 函数。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1555984118,"ip_address":"","comment_id":88591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440850658","product_id":100013101,"comment_content":"+ isrunesingle.go<br><br>```go<br>package show_rune_length<br><br>func isSingleCharA(c rune) bool {<br>\treturn int32(c) &lt; 128<br>}<br><br>func isSingleCharB(c rune) bool {<br>\tdata := []byte(string(c))<br>\treturn len(data) == 1<br>}<br><br>func isSingleCharC(c rune) bool {<br>\tdata := string(c) + &quot; &quot;<br><br>\tfor i, _ := range data {<br>\t\tif i == 0 {<br>\t\t\tcontinue<br>\t\t}<br><br>\t\tif i == 1 {<br>\t\t\treturn true<br>\t\t} else {<br>\t\t\treturn false<br>\t\t}<br>\t}<br><br>\treturn false<br>}<br>```<br><br>+ isrunesingle_test.go<br><br>```go<br>package show_rune_length<br><br>import (<br>\t&quot;testing&quot;<br><br>\t&quot;github.com&#47;stretchr&#47;testify&#47;assert&quot;<br>)<br><br>type CharJudger func(c rune) bool<br><br>func TestIsSingleChar(t *testing.T) {<br><br>\tfor _, judger := range []CharJudger{<br>\t\tisSingleCharA,<br>\t\tisSingleCharB,<br>\t\tisSingleCharC,<br>\t} {<br>\t\tassert.True(t, judger(&#39;A&#39;))<br>\t\tassert.True(t, judger(rune(&#39; &#39;)))<br>\t\tassert.False(t, judger(&#39;😔&#39;))<br>\t\tassert.False(t, judger(&#39;爱&#39;))<br>\t}<br>}<br>```","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447841,"discussion_content":"可以用 unicode/utf8 代码包中的 RuneCount 函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555984118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39444,"user_name":"韡WEI","can_delete":false,"product_type":"c1","uid":1090979,"ip_address":"","ucode":"446E411E80A5D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/a5/a3/f8bcd9dd.jpg","comment_is_top":false,"comment_ctime":1542277099,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14427178987","product_id":100013101,"comment_content":"rune怎么翻译？有道查的：神秘的记号。为什么这么命名这个类型？有没有什么故事？","like_count":3,"discussions":[{"author":{"id":1191996,"avatar":"https://static001.geekbang.org/account/avatar/00/12/30/3c/49eb36e7.jpg","nickname":"猫和芝士蛋糕","note":"","ucode":"0970A3BB993D32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186351,"discussion_content":"北欧以前曾经使用过的一种书写系统，就叫rune字母。像很多奇幻类型的西方游戏中，比如暗黑破坏神，里面的符文都是使用rune来命名的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1582678501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4021,"discussion_content":"rune也有符文的意思，符号/文字，都包含了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565064078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36530,"user_name":"Gryllus","can_delete":false,"product_type":"c1","uid":1198113,"ip_address":"","ucode":"4CB3DFCB51A7CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/21/bd739446.jpg","comment_is_top":false,"comment_ctime":1541143386,"is_pvip":false,"replies":[{"id":"13297","content":"🐂","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1541480858,"ip_address":"","comment_id":36530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14426045274","product_id":100013101,"comment_content":"终于追上了进度","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427899,"discussion_content":"🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541480858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134424,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1568822127,"is_pvip":false,"replies":[{"id":"51580","content":"内存里存的是 UTF-8 的编码值，会由 1~4 个字节组成。Unicode 代码点是 Unicode 标准中用来唯一标识字符的东西。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1568868732,"ip_address":"","comment_id":134424,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10158756719","product_id":100013101,"comment_content":"一个unicode字符在内存中存的是码点的值还是utf8对应的编码值？","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467739,"discussion_content":"内存里存的是 UTF-8 的编码值，会由 1~4 个字节组成。Unicode 代码点是 Unicode 标准中用来唯一标识字符的东西。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568868732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16128,"discussion_content":"那如果内存中存的是utf8的变长编码，在go语言中我们通过for循环打印字符时，每打印一个，指针向后移动的长度都是不确定的，具体移动多少长度，是go语言运行时帮用户搞定了吧？这样的话存储效率是高了，但是计算效率会打个折扣吗？毕竟是变长编码。\n记得看过一篇文章，在C C++中是存的unicode码点值，因为C C++中的指针需要用户来控制，这样的话占用的内存长度是固定的，指针的移动也可以很方便的计算出来的，也就是提升了计算效率降低了存储效率。 \n还有人说utf8更多的用在字符串的持久化和网络传输上，毕竟可以节省不少空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568872475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131125,"user_name":"qiushye","can_delete":false,"product_type":"c1","uid":1322164,"ip_address":"","ucode":"D005A152F8BEDC","user_header":"","comment_is_top":false,"comment_ctime":1567647786,"is_pvip":false,"replies":[{"id":"49381","content":"收到，谢谢。已经通知编辑修正了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1567653707,"ip_address":"","comment_id":131125,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10157582378","product_id":100013101,"comment_content":"str := &quot;Go 爱好者 &quot;fmt.Printf(&quot;Th...<br><br>您在文章里举的这个例子在Go后面多加了空格，会让人误解成遍历字符串可以跳过空格，github代码里没问题。<br><br>","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466298,"discussion_content":"收到，谢谢。已经通知编辑修正了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567653707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008348,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/dc/8876c73b.jpg","nickname":"moooofly","note":"","ucode":"4A20795C281B6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30778,"discussion_content":"貌似到现在也没修正~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570858801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262313,"user_name":"趣学车","can_delete":false,"product_type":"c1","uid":1505155,"ip_address":"","ucode":"5279A6BF4C67A3","user_header":"https://static001.geekbang.org/account/avatar/00/16/f7/83/7fa4bd45.jpg","comment_is_top":false,"comment_ctime":1605691525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900658821","product_id":100013101,"comment_content":"len(s) == 1 则为单字节","like_count":1},{"had_liked":false,"id":139503,"user_name":"文武木子","can_delete":false,"product_type":"c1","uid":1015986,"ip_address":"","ucode":"348752BDECD65F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/b2/2e9f442d.jpg","comment_is_top":false,"comment_ctime":1570669919,"is_pvip":false,"replies":[{"id":"54092","content":"你想问什么？十六进制的一位相当于二进制的四位。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1570781220,"ip_address":"","comment_id":139503,"utype":1}],"discussion_count":2,"race_medal":5,"score":"5865637215","product_id":100013101,"comment_content":"十六进制四个数字不是一共占用32位吗，一个字节不是8位嘛，这样不是占用4个字节吗？求大神解答","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469970,"discussion_content":"你想问什么？十六进制的一位相当于二进制的四位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570781220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85852,"discussion_content":"十六进制表示法每位表示4个bit位","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576579820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118712,"user_name":"党","can_delete":false,"product_type":"c1","uid":1071974,"ip_address":"","ucode":"EE531DB3EA124D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","comment_is_top":false,"comment_ctime":1564422468,"is_pvip":false,"replies":[{"id":"43578","content":"Unicode 代码点是一个抽象的概念，并且没有规定占用的字节数，只是说以“U+XXXX”的形式来表示。“X”还可能有 5 个或 6 个。<br><br>Unicode 代码点是 Unicode 编码标准的一部分。但你要分清楚编码标准和编码格式（像 UTF-8、UTF-16 等等）的区别。前者是概念和表示法，后者是真正的落地格式。编码格式才是真正与存储占用（比如一个字符占用多少个字节）有关的东西。<br><br>rune 类型的宽度是 4 个字节，那是因为 Go 语言使用 UTF-8 编码格式。这种格式编出来的码最多占用 4 个字节。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1564453472,"ip_address":"","comment_id":118712,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859389764","product_id":100013101,"comment_content":"一个unicode字符点都是由两个字节存储，为什么在go语言中 type rune = int32 四个字节 而不是 type rune=16 两个字节啊","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460542,"discussion_content":"Unicode 代码点是一个抽象的概念，并且没有规定占用的字节数，只是说以“U+XXXX”的形式来表示。“X”还可能有 5 个或 6 个。\n\nUnicode 代码点是 Unicode 编码标准的一部分。但你要分清楚编码标准和编码格式（像 UTF-8、UTF-16 等等）的区别。前者是概念和表示法，后者是真正的落地格式。编码格式才是真正与存储占用（比如一个字符占用多少个字节）有关的东西。\n\nrune 类型的宽度是 4 个字节，那是因为 Go 语言使用 UTF-8 编码格式。这种格式编出来的码最多占用 4 个字节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564453472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103439,"user_name":"benying","can_delete":false,"product_type":"c1","uid":1247522,"ip_address":"","ucode":"DEBAB485F381CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","comment_is_top":false,"comment_ctime":1560435915,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5855403211","product_id":100013101,"comment_content":"打卡,讲的挺清楚的,谢谢","like_count":1},{"had_liked":false,"id":357724,"user_name":"花见笑","can_delete":false,"product_type":"c1","uid":1219485,"ip_address":"广东","ucode":"8A5122BC11E695","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/9d/d487c368.jpg","comment_is_top":false,"comment_ctime":1663581074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663581074","product_id":100013101,"comment_content":"UTF-8的编码规则:<br>1、对于单字节的字符，字节的第一位设为0，后面七位为这个字符的Unicode码。<br>因此对于英文字符，UTF-8编码和ASCII码是相同的。<br><br>2、对于n字节的字符(n&gt;1)，第一个字节的前n位都设为1，第n+1位设为0，后面字节的<br>前两位一律设为10。剩下的没有提及的二进制位，全部为这个字符的Unicode编码。<br><br>UTF-8每次传送8位数据,并且是一种可变长的编码格式<br>具体来说，是怎么的可变长呢.<br><br>分为四个区间：<br>0x0000 0000 至 0x0000 007F:0xxxxxxx<br>0x0000 0080 至 0x0000 07FF:110xxxxx 10xxxxxx<br>0x0000 0800 至 0x0000 FFFF:1110xxxx 10xxxxxx 10xxxxxx<br>0x0001 0000 至 0x0010 FFFF:11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br><br>UTF-8解码过程:<br><br>对于采用UTF-8编码的任意字符B<br><br>如果B的第一位为0，则B为ASCII码，并且B独立的表示一个字符;<br><br>如果B的前两位为1，第三位为0，则B为一个非ASCII字符，该字符由多个字节表示，<br>并且该字符由两个字节表示;<br><br>如果B的前三位为1，第四位为0，则B为一个非ASCII字符，该字符由多个字节表示，<br>并且该字符由三个字节表示;<br><br>比如汉字 “王”,它的二进制形式为: 0x0000 738B,属于第三区间,<br>0x0000 738B - 00000000 00000000 01110011 10001011,<br>第三区间的编码是 1110xxxx 10xxxxxx 10xxxxxx<br>把x都给替换,则最终&quot;王&quot;字对应的Unicode的编码是<br>11100111 10001110 10001011<br>转换成16进制 0xe7 0x8e 0x8b<br><br>如果B的前四位为1，第五位为0，则B为一个非ASCII字符，该字符由多个字节表示，<br>并且该字符由四个字节表示;","like_count":0},{"had_liked":false,"id":342727,"user_name":"Geek_479239","can_delete":false,"product_type":"c1","uid":2660515,"ip_address":"","ucode":"E7BF2AEEAA7F87","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZonGorryP0YHQic0YGutFumhCRvQPiamqUV0uYzY1pDVqjaGPdWKfseyJn7iaHxNZYs8rwibKlHp8k7IDYGxcyAQKQ/132","comment_is_top":false,"comment_ctime":1650436223,"is_pvip":false,"replies":[{"id":"125245","content":"不客气，加油！","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1650531298,"ip_address":"","comment_id":342727,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650436223","product_id":100013101,"comment_content":"谢谢老师，这篇很有收获","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565735,"discussion_content":"不客气，加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650531299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334877,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1645164855,"is_pvip":true,"replies":[{"id":"122373","content":"你还可以看看这篇文章：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;syyKS7lztRGTu1t00YhoFA ，我的另一本书的免费章节。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1645331793,"ip_address":"","comment_id":334877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645164855","product_id":100013101,"comment_content":"打卡，一直不明白字符集unicode与字符编码utf-8以及其他的编码实现方式的区别，现在有些理解，但是还是需要理一理。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552161,"discussion_content":"你还可以看看这篇文章：https://mp.weixin.qq.com/s/syyKS7lztRGTu1t00YhoFA ，我的另一本书的免费章节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645331793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334379,"user_name":"窝窝头","can_delete":false,"product_type":"c1","uid":1063866,"ip_address":"","ucode":"5C2635ED6484F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/ba/3b30dcde.jpg","comment_is_top":false,"comment_ctime":1644908905,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644908905","product_id":100013101,"comment_content":"看它的长度或者转换类型判断","like_count":0},{"had_liked":false,"id":286895,"user_name":"Louhwz","can_delete":false,"product_type":"c1","uid":1988237,"ip_address":"","ucode":"9ADF138DD172AA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/56/8d/9b8a6837.jpg","comment_is_top":false,"comment_ctime":1617673554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617673554","product_id":100013101,"comment_content":"这章讲的很清楚，谢谢","like_count":0},{"had_liked":false,"id":271771,"user_name":"丶浮空的身体如石的❤","can_delete":false,"product_type":"c1","uid":1028503,"ip_address":"","ucode":"74FAF4B737B5A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/97/9cbfca81.jpg","comment_is_top":false,"comment_ctime":1609805532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609805532","product_id":100013101,"comment_content":"豁然开朗","like_count":0},{"had_liked":false,"id":247094,"user_name":"鸠摩·智","can_delete":false,"product_type":"c1","uid":1211909,"ip_address":"","ucode":"6CD93CD1DB6955","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/05/431d380f.jpg","comment_is_top":false,"comment_ctime":1599601492,"is_pvip":false,"discussion_count":1,"race_medal":5,"score":"1599601492","product_id":100013101,"comment_content":"对于utf8字节序列中的某个字节，是独立成为一个字符，还是和前字节或者后字节或者前后字节来共同组成一个字符，需要前后字节和当前字节都考虑的。考虑的点为每个字节的最高位。具体来讲，前0当0，则当前字节独立成字符；前1或0当0，则当前字节和前面一个或多个字节组成一个字符；前1或0当1，则当前字节和前后多个字节组成一个字符；当1，则当前字节和后面一个或多个字节组成一个字符。","like_count":0,"discussions":[{"author":{"id":1211909,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7e/05/431d380f.jpg","nickname":"鸠摩·智","note":"","ucode":"6CD93CD1DB6955","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304527,"discussion_content":"总结一句话，一个字节的最高位，表示其后面一个字节是不是一起来表示一个字符。0不是，1是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599601965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228867,"user_name":"1287","can_delete":false,"product_type":"c1","uid":1950498,"ip_address":"","ucode":"C91D3AD48298A4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c3/22/8520be75.jpg","comment_is_top":false,"comment_ctime":1592829705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592829705","product_id":100013101,"comment_content":"这篇很赞","like_count":0},{"had_liked":false,"id":210645,"user_name":"强凯","can_delete":false,"product_type":"c1","uid":1007387,"ip_address":"","ucode":"A27125F80EF64F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/1b/5462d887.jpg","comment_is_top":false,"comment_ctime":1587802111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587802111","product_id":100013101,"comment_content":"写的真清楚，说的真明白！","like_count":0},{"had_liked":false,"id":205436,"user_name":"慢熊胖胖跑","can_delete":false,"product_type":"c1","uid":1065065,"ip_address":"","ucode":"58523B53D45C7F","user_header":"https://static001.geekbang.org/account/avatar/00/10/40/69/f86a1526.jpg","comment_is_top":false,"comment_ctime":1586617169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586617169","product_id":100013101,"comment_content":"判断一个 Unicode 字符是否为单字节字符\t<br>for i,runestr := range []rune(str) {<br>\t\tfmt.Printf(&quot;i: %d ,len(str(runestr) %d,-&gt; %x\\n&quot;, i,len(string(runestr)),runestr)<br>\t}","like_count":0},{"had_liked":false,"id":172687,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1579251869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579251869","product_id":100013101,"comment_content":"这篇文章 收获很大","like_count":0},{"had_liked":false,"id":168933,"user_name":"疯琴","can_delete":false,"product_type":"c1","uid":1099379,"ip_address":"","ucode":"82ACAA4A27753D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1578219683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578219683","product_id":100013101,"comment_content":"Unicode、UTF来回来去看了好多文章，开始糊涂，多看逐渐就明白了，老师讲得挺清楚的。","like_count":0},{"had_liked":false,"id":168442,"user_name":"杨锦","can_delete":false,"product_type":"c1","uid":1198470,"ip_address":"","ucode":"E0730901B6EC03","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/86/a588c76d.jpg","comment_is_top":false,"comment_ctime":1578067662,"is_pvip":false,"replies":[{"id":"65371","content":"首先不存在6个字节的utf8编码的字符，只有1～4个字节的。其次，unicode&#47;utf8把里有相应的API。要看原理，看它的源码就好了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1578120728,"ip_address":"","comment_id":168442,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578067662","product_id":100013101,"comment_content":"郝老师，请教一个问题，对于一个6字节的utf8编码，怎么判断是要解码成6个宽度为1字节宽度的的还是2个3字节宽度的呢？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480221,"discussion_content":"首先不存在6个字节的utf8编码的字符，只有1～4个字节的。其次，unicode/utf8把里有相应的API。要看原理，看它的源码就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578120728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159718,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1575740194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575740194","product_id":100013101,"comment_content":"二刷","like_count":0},{"had_liked":false,"id":116401,"user_name":"张岳文","can_delete":false,"product_type":"c1","uid":1196820,"ip_address":"","ucode":"1CBAE7CE572E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/14/99aeb30d.jpg","comment_is_top":false,"comment_ctime":1563846825,"is_pvip":false,"replies":[{"id":"42639","content":"内存上的也是二进制储存的啊，Unicode 只是一个字符编码标准，不是编码格式。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1563889858,"ip_address":"","comment_id":116401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563846825","product_id":100013101,"comment_content":"我认为string的底层是Unicode, 而非UTF-8。只是string转成[]byte时，string转成了utf-8的序列。。。内存中的应该统一用unicode处理，而UTF-8是为了存储和传输才进行字节转换的。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459523,"discussion_content":"内存上的也是二进制储存的啊，Unicode 只是一个字符编码标准，不是编码格式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563889858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93909,"user_name":"jacke","can_delete":false,"product_type":"c1","uid":1161209,"ip_address":"","ucode":"05F355E1FF88C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/f9/a8f26b10.jpg","comment_is_top":false,"comment_ctime":1557661118,"is_pvip":false,"replies":[{"id":"33579","content":"你要知道，string 类型的值本身就是由 UTF-8 编码的一个个字节组成的，同时也可以看做是由一个个 Unicode 字符组成的。这不是在转换的时候才去做的。<br><br>你既然已经找到了 stringtoslicebyte 函数，那就应该再去看看那个源码文件中的其他代码。可以从 rawstring 函数看起。等都看完了你就应该明白了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1557719542,"ip_address":"","comment_id":93909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557661118","product_id":100013101,"comment_content":"string 底层是[]byte数组，我的疑问是：例子里面看出来，string转化为tune的时候，tune里面保存的是utf-8的代码点数据，string转化为[]byte的时候保存的是utf-8代码点对应的字节序。<br>上面这些转化逻辑在哪里实现的？fmt.print里面？看了fmt.print找不到,string转为[]byte的实现函数stringtoslicebyte也没看到这部分逻辑","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449824,"discussion_content":"你要知道，string 类型的值本身就是由 UTF-8 编码的一个个字节组成的，同时也可以看做是由一个个 Unicode 字符组成的。这不是在转换的时候才去做的。\n\n你既然已经找到了 stringtoslicebyte 函数，那就应该再去看看那个源码文件中的其他代码。可以从 rawstring 函数看起。等都看完了你就应该明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557719542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76116,"user_name":"Geek_1ed70f","can_delete":false,"product_type":"c1","uid":1394112,"ip_address":"","ucode":"B9A1928A6967B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erNhKGpqicibpQO3tYvl9vwiatvBzn27ut9y5lZ8hPgofPCFC24HX3ko7LW5mNWJficgJncBCGKpGL2jw/132","comment_is_top":false,"comment_ctime":1552532485,"is_pvip":false,"replies":[{"id":"28883","content":"存储的时候会以二进制的形式。另外如果你要看Unicode代码点。你这么转换比较混乱。你可以参看fmt包的文档，看看怎样才能把对应的进制值打印出来。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1553399555,"ip_address":"","comment_id":76116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552532485","product_id":100013101,"comment_content":"您是说 一个汉字的rune值 在计算机底层会被转成utf-8编码来 给计算机读取是吗?  <br><br>比如  一个&quot;严&quot;字  unicode为20005(十进制),  utf-8编码是11100100 10111000 10100101(二进制),十进制就是14989477 ,     我们平时打印只能看到 20005  它是什么时候转成14989477的啊","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443185,"discussion_content":"存储的时候会以二进制的形式。另外如果你要看Unicode代码点。你这么转换比较混乱。你可以参看fmt包的文档，看看怎样才能把对应的进制值打印出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553399555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73363,"user_name":"melody_future","can_delete":false,"product_type":"c1","uid":1072632,"ip_address":"","ucode":"AEF6218FDA0B0A","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/f8/62a8b90d.jpg","comment_is_top":false,"comment_ctime":1551868649,"is_pvip":false,"replies":[{"id":"26849","content":"rune的底层表达使用的是Unicode代码点。<br>但是，底层的存储用UTF-8编码。<br><br>表达和存储这两者的关系你能分清楚吧？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551953480,"ip_address":"","comment_id":73363,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551868649","product_id":100013101,"comment_content":"有点小晕，想请问下 rune 类型在内存的表现形式是 unicde 编码值，还是utf-8 编码值，你所说的底层指的是？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442043,"discussion_content":"rune的底层表达使用的是Unicode代码点。\n但是，底层的存储用UTF-8编码。\n\n表达和存储这两者的关系你能分清楚吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551953480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63920,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1548596252,"is_pvip":false,"replies":[{"id":"25249","content":"目前utf-8是1~4个字节的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551181361,"ip_address":"","comment_id":63920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548596252","product_id":100013101,"comment_content":"打卡：<br>1、len函数对于字符串，得到的是字节长度<br>2、utf-8 我以前看到的资料是 1-6个字节的可变长编码，go如果用rune，对于超过4个字节的utf-8字符怎么处理？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437763,"discussion_content":"目前utf-8是1~4个字节的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551181361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36975,"user_name":"ryon","can_delete":false,"product_type":"c1","uid":1044027,"ip_address":"","ucode":"B1BD25FB739D6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/3b/0ecd751d.jpg","comment_is_top":false,"comment_ctime":1541410216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541410216","product_id":100013101,"comment_content":"这章讲得还可以","like_count":0}]}