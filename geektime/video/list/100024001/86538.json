{"id":86538,"title":"25 | CSP并发机制","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":107624,"user_name":"pinteressante","can_delete":false,"product_type":"c3","uid":1007569,"ip_address":"","ucode":"C17A89E655CC84","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/d1/faf32296.jpg","comment_is_top":false,"comment_ctime":1561566376,"is_pvip":false,"replies":[{"id":39063,"content":"如果不sleep，主协程退出，程序就终止了（他不会等待子协程）","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1561642384,"ip_address":"","comment_id":107624,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"主方法最后为什么要sleep一下","like_count":9,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455592,"discussion_content":"如果不sleep，主协程退出，程序就终止了（他不会等待子协程）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561642384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78120,"user_name":"辉仔lovers","can_delete":false,"product_type":"c3","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1553074133,"is_pvip":false,"replies":[{"id":28494,"content":"你可以传回一个结构体，里面包含结果和错误","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1553087357,"ip_address":"","comment_id":78120,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师 ：请教个问题，goroutine异步执行的结果通过channel来通知主线程，是不是应该把goroutine执行过程中的error等信息也放到channel返回，因为node的异常机制都是通过回调函数带回来的。","like_count":3,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443976,"discussion_content":"你可以传回一个结构体，里面包含结果和错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553087357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376726,"user_name":"翱翔","can_delete":false,"product_type":"c3","uid":1658287,"ip_address":"北京","ucode":"F5550D1D0A981A","user_header":"https://static001.geekbang.org/account/avatar/00/19/4d/af/4e922a96.jpg","comment_is_top":false,"comment_ctime":1687272404,"is_pvip":false,"replies":[{"id":138682,"content":"哈哈","user_name":"作者回复","user_name_real":"编辑","uid":1008262,"ctime":1694307710,"ip_address":"北京","comment_id":376726,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"还是喜欢老师边讲边lu代码，这样撸好了，直接来用，不太好get到写代码的思路呀","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627580,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694307711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331834,"user_name":"涛","can_delete":false,"product_type":"c3","uid":1174992,"ip_address":"","ucode":"0839908E458151","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/d0/2f18a78b.jpg","comment_is_top":false,"comment_ctime":1642816964,"is_pvip":false,"replies":[{"id":121478,"content":"感谢信任","user_name":"作者回复","user_name_real":"编辑","uid":1008262,"ctime":1643332460,"ip_address":"","comment_id":331834,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"非常感谢老师，看第二遍了","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548692,"discussion_content":"感谢信任","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643332460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229468,"user_name":"IAmLinGe","can_delete":false,"product_type":"c3","uid":1994848,"ip_address":"","ucode":"9DCDA0FA5CF2B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/TXAUcbHlPbyEibtUB2STNgmOb6oQdO8nKuA9nnhuI76Ccv2U5Vgxfp8YxvGeKQP8k47ULBwVGglH4DibOzH8Qfeg/132","comment_is_top":false,"comment_ctime":1593007307,"is_pvip":false,"replies":[{"id":84915,"content":"mailbox\n","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1593264070,"ip_address":"","comment_id":229468,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"mailbox还是messagebox？？","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499494,"discussion_content":"mailbox\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593264070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204226,"user_name":"Geek_8607a4","can_delete":false,"product_type":"c3","uid":1953243,"ip_address":"","ucode":"493EA87394BDD4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epsRcQM1w3rNhv9iaYxz7tDGtFQ6tKCbrjnic2uEAZFyd3TK8Sb24DUic2f845VtP0GnVnfRspwiaH5ug/132","comment_is_top":false,"comment_ctime":1586353944,"is_pvip":false,"replies":[{"id":76616,"content":"不会。因为程序用的是buffered channel。\nretCh := make(chan string, 1) \n是不会阻塞协程的。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1586514485,"ip_address":"","comment_id":204226,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师这个异步方法带返回值的有问题吧，调用方如果不检查返回的通道，那么方法中的协程就泄露了","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491110,"discussion_content":"不会。因为程序用的是buffered channel。\nretCh := make(chan string, 1) \n是不会阻塞协程的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586514485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198109,"user_name":"Vicky~婵娟","can_delete":false,"product_type":"c3","uid":1899341,"ip_address":"","ucode":"E10E28773B60F9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fb/4d/c5ac9df5.jpg","comment_is_top":false,"comment_ctime":1585409900,"is_pvip":false,"replies":[{"id":75256,"content":"谢谢🙏","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1585745592,"ip_address":"","comment_id":198109,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"很喜欢老师的讲课内容和授课方式，对于我这种对go语言0基础的人也很容易理解和上手","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489648,"discussion_content":"谢谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585745592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114988,"user_name":"饭团","can_delete":false,"product_type":"c3","uid":1332557,"ip_address":"","ucode":"E24F240CC91BE8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbY9UsqHZhhVoI69yXNibBBg0TRdUVsKLMg2UZ1R3NJxXdMicqceI5yhdKZ5Ad6CJYO0XpFHlJzIYQ/132","comment_is_top":false,"comment_ctime":1563443145,"is_pvip":false,"replies":[{"id":42065,"content":"如果不是buffer chan，在发送时无接收者或者buffer chan中的数据已经满了的时候，发送者是会被阻塞的","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1563507817,"ip_address":"","comment_id":114988,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"我的理解是 在协程里吧数据写入管道后  协程就继续往下执行了   协程不需要等待管道里的数据被提取\nfunc service() string {\n\ttime.Sleep(time.Millisecond * 110)\n\tfmt.Println(&quot;service end&quot;)\n\treturn &quot;service action call&quot;\n}\n\nfunc sendMessage() chan string {\n\tMchannel := make(chan string)\n\tgo func() {\n\t\tfmt.Println(&quot;service in.&quot;)\n\t\tret := service()\n\t\tMchannel &lt;- ret\n\t\tfmt.Println(&quot;service exited.&quot;)\n\t}()\n\treturn Mchannel\n}\n\nservice exited.  这句输出 会在 service action call 前输出","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458916,"discussion_content":"如果不是buffer chan，在发送时无接收者或者buffer chan中的数据已经满了的时候，发送者是会被阻塞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563507817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101267,"user_name":"Eden","can_delete":false,"product_type":"c3","uid":1197733,"ip_address":"","ucode":"BE0AD731E5EF5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/a5/51449de6.jpg","comment_is_top":false,"comment_ctime":1559766280,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"初学语言，用中文解释，便于理解\n```go\nfunc service() string {\n\tfmt.Println(&quot;---service---立即执行 50 毫秒延时&quot;)\n\ttime.Sleep(time.Millisecond * 50)\n\treturn &quot;---service---Done&quot;\n}\n\nfunc otherTask() {\n\tfmt.Println(&quot;---otherTask---working on something else&quot;)\n\tfmt.Println(&quot;---otherTask---立即执行 100 毫秒延时&quot;)\n\ttime.Sleep(time.Millisecond * 100)\n\tfmt.Println(&quot;---otherTask---Task is Done&quot;)\n}\n\nfunc AsyncService() chan string { &#47;&#47; 该函数返回一个通道, 消息类型是 string\n\t&#47;&#47; retCh := make(chan string)    &#47;&#47; 声明一个无缓冲 chan通道, 这个通道的类型是 string, 通道用于协程间的通信\n\t&#47;&#47;                               &#47;&#47; ⚠️ 使用无缓冲通道时, 如果协程1 没有立即接受协程 2 通过管道发送的消息，就会阻塞，反之亦然\n\tretCh := make(chan string, 1) &#47;&#47; 声明一个缓冲容量为 1 的chan通道, 这个通道的类型是 string, 通道用于协程间的通信\n\tgo func() {                   &#47;&#47; 此处执行 匿名协程函数\n\t\tret := service()\n\t\tfmt.Println(&quot;---AsyncService---returned result:&quot;, ret)\n\t\tretCh &lt;- ret &#47;&#47;通过通道将 service()函数返回的值传递给  通道 retCh\n\t\tfmt.Println(&quot;---AsyncService---service exited&quot;)\n\t}()\n\treturn retCh &#47;&#47; 返回这个通道\n}\n\nfunc TestAsyncService(t *testing.T) {\n\tretCh := AsyncService()\n\totherTask()\n\tfmt.Println(&lt;-retCh)\n}\n\n```","like_count":19},{"had_liked":false,"id":78441,"user_name":"辉仔lovers","can_delete":false,"product_type":"c3","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1553148498,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"type Promise struct{\n\twg sync.WaitGroup\n\tres string\n\terr error\n}\n\nfunc NewPromise(f func() (string ,error)) *Promise{\n\tp := &amp;Promise{}\n\tp.wg.Add(1)\n\tgo func(){\n\t\tp.res, p.err = f()\n\t\tp.wg.Done()\n\t}()\n\treturn p\n}\n\nfunc (p *Promise) then(r func(string), e func(error))(*Promise){\n\tgo func(){\n\t\tp.wg.Wait()\n\t\tif p.err != nil{\n\t\t\te(p.err)\n\t\t\treturn\n\t\t}\n\t\tr(p.res)\n\t}()\n\treturn p\n}\n使用go模仿的异步promise","like_count":5},{"had_liked":false,"id":121341,"user_name":"瓶盖足球类似","can_delete":false,"product_type":"c3","uid":1373150,"ip_address":"","ucode":"FF70BEFF553665","user_header":"https://static001.geekbang.org/account/avatar/00/14/f3/de/2ebdc487.jpg","comment_is_top":false,"comment_ctime":1565103048,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师您好，学习本节课程后，测试并总结如下：\n    1. 若创建通道时未设置通道容量，则协程在向通道中存放数据后会一直等待，直到其它协程取走数据后才会向下执行；\n    2. 若创建通道时设置通道容量，则协程在向通道中存放数据后会继续向下执行；\n    3. 在向通道中存放数据时，若通道已满，则当前协程会一直等待，直到通道空闲；\n    4. 在从通道中读取数据时，若通道中不存在数据，则当前协程会一直等待，直到其它协程向通道中存放数据。\n    5. 当4发生时，若没有协程向该通道存放数据，则会照成程序死锁。\n\n有错误的地方，烦请老师斧正。","like_count":4},{"had_liked":false,"id":297248,"user_name":"Geek_ab2b44","can_delete":false,"product_type":"c3","uid":1358225,"ip_address":"","ucode":"17CE6624374E3F","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnfEgoyUEPw8dvMVz42K1nt1YIoOt5dIH8onNE1db4N4ViaOFjv8uPxkguCJ414IyYILqpkeRAzfA/132","comment_is_top":false,"comment_ctime":1623393289,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师在写demo的时候，fmt 的msg 可以添加一些与方法相关的message，可以从日志能更明确日志是从哪个函数出来的，现在这种方式，done, task done等等的日志，再加上窗口滚动，我都记不住谁是谁了，虽然多看两遍能明白，哈哈。","like_count":2},{"had_liked":false,"id":333402,"user_name":"再见理想","can_delete":false,"product_type":"c3","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1644327990,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"为什么我执行第一种没有阻塞啊 和后面设置1的效果一样","like_count":1,"discussions":[{"author":{"id":1120078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/4e/a264b1ec.jpg","nickname":"zxf","note":"","ucode":"8C8D5A6BDBDC64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582178,"discussion_content":"我也是你这种情况，后来把sleep改成2秒就正常了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659277415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2834946,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/42/02/7c9d5339.jpg","nickname":"ksl","note":"","ucode":"206906DBB07AE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/4e/a264b1ec.jpg","nickname":"zxf","note":"","ucode":"8C8D5A6BDBDC64","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625661,"discussion_content":"不要被fmt 或者 t.log 迷惑  chan 接到消息 到 打印日志 这还有一段路要走 \n哪边走的快这个不一定的  两回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692028205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":582178,"ip_address":"上海","group_id":0},"score":625661,"extra":""}]}]},{"had_liked":false,"id":156830,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c3","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1574986517,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"感觉就像个内嵌版的消息队列","like_count":1,"discussions":[{"author":{"id":1435172,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e6/24/30806a88.jpg","nickname":"right-chen","note":"","ucode":"E0E940E80E7A2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582971,"discussion_content":"就是消息队列的结构，先进先出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659855603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353700,"user_name":"right-chen","can_delete":false,"product_type":"c3","uid":1435172,"ip_address":"北京","ucode":"E0E940E80E7A2D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/24/30806a88.jpg","comment_is_top":false,"comment_ctime":1659687584,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"这个channel有点像消息队列，如果队列容量1的话，需要发送等待消费。如果容量大于1的话，可以先生产，再消费。结果是先进先出。关于异步任务这块是这么理解的","like_count":0},{"had_liked":false,"id":346082,"user_name":"少年","can_delete":false,"product_type":"c3","uid":1994249,"ip_address":"","ucode":"15FC16DEEF13B0","user_header":"https://static001.geekbang.org/account/avatar/00/1e/6e/09/4aa5fbc2.jpg","comment_is_top":false,"comment_ctime":1652808468,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"让我想起了操作系统里的进程管理-进程的通信方式：1：共享内存；2：消息传递；3：管道通信","like_count":0},{"had_liked":false,"id":344141,"user_name":"总有刁民想害朕","can_delete":false,"product_type":"c3","uid":1492500,"ip_address":"","ucode":"2EA4E4CA6A28E7","user_header":"https://static001.geekbang.org/account/avatar/00/16/c6/14/cbbdb191.jpg","comment_is_top":false,"comment_ctime":1651297794,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"唉 这一节讲的\n","like_count":0},{"had_liked":false,"id":307278,"user_name":"braincy","can_delete":false,"product_type":"c3","uid":1467619,"ip_address":"","ucode":"B1DE2447CD5102","user_header":"https://static001.geekbang.org/account/avatar/00/16/64/e3/6e469d05.jpg","comment_is_top":false,"comment_ctime":1629000585,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"主函数不需要 sleep 吧，从 channel 中取数据不是阻塞的吗，我去掉了运行也是正常的","like_count":0},{"had_liked":false,"id":252650,"user_name":"Shadow","can_delete":false,"product_type":"c3","uid":1233631,"ip_address":"","ucode":"AC67D583C6B4D7","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/df/381fb327.jpg","comment_is_top":false,"comment_ctime":1602420568,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"和linux的消息队列很像","like_count":0},{"had_liked":false,"id":250847,"user_name":"Geek_427d0c","can_delete":false,"product_type":"c3","uid":1876823,"ip_address":"","ucode":"D7A04138C4B8CB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/X4ib36ADEvj76XaKD4OUY9k15KqWCAVCwibPicBxz6BBUfDrVolpYInn8zFOw3JBPtVw3L4Lkibaf2eLPemwGKzAXA/132","comment_is_top":false,"comment_ctime":1601260408,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"Go的协程有两点跟我想的不一样：1）channel“没有消费”也会执行，即把`&lt;-retCh`去掉也会正常输出所有Println，2)一个协程里go func() {xxx}的xxx是顺序执行的，即先service()执行完成，再retCh &lt;- ret。","like_count":0},{"had_liked":false,"id":236007,"user_name":"新仔","can_delete":false,"product_type":"c3","uid":2061942,"ip_address":"","ucode":"830DD6BCA39DD2","user_header":"https://static001.geekbang.org/account/avatar/00/1f/76/76/6d523a36.jpg","comment_is_top":false,"comment_ctime":1595289618,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"老师您好~初学golang 请问为什么这样的程序最后会死锁\n\tarr:=[]int{1,2,3,4,5}\n\tc:=make(chan int,5)\n\tfin:=make(chan int,3)\n\tcl:=make(chan int,1)\n\tdefer close(fin)\n\tdefer close(cl)\n\tdefer close(c)\n\tgo func() {\n\t\tfor _,ch:=range arr{\n\t\t\tc&lt;-ch\n\t\t}\n\t}()\n\tfor i:=0;i&lt;3;i++{\n\t\tgo func() {\n\t\t\tfor{\n\t\t\t\tclassId:=&lt;-c\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tfin&lt;-classId\n\t\t\t}\n\t\t}()\n\t}\n\tgo func() {\n\t\tfor classId:=range fin{\n\t\t\tfmt.Printf(&quot;classId %d finished \\n&quot;,classId)\n\t\t}\n\t\tcl&lt;-1\n\t}()\n\t&lt;-cl\n\tfmt.Println(&quot;all done&quot;)","like_count":0,"discussions":[{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600728,"discussion_content":"尽力了兄弟，你这代码让我很迷茫","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674794029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600725,"discussion_content":"如果采用下面的代码，看起来没有违背这个老哥的意愿，但是这个程序实际上存在概率性的错误，你可以试着运行下面这段代码，你会发现它有时正确，有时错误，并且错误不再是 deadlock，而是 “panic: send on closed channel”，why？\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tc := make(chan int, 5)\n\tfin := make(chan int, 3)\n\tcl := make(chan int, 1)\n\twg := new(sync.WaitGroup)\n\tvar once = new(sync.Once)\n\n\tdefer close(cl)\n\n\twg.Add(1)\n\tgo func() {\n\t\tfor _, ch := range arr {\n\t\t\tc &lt;- ch\n\t\t}\n\t\tclose(c)\n\t\twg.Done()\n\t}()\n\n\twg.Add(3)\n\tfor i := 0; i &lt; 3; i++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tif classId, ok := &lt;-c; ok {\n\t\t\t\t\t// time.Sleep(time.Second)\n\t\t\t\t\tfin &lt;- classId\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tonce.Do(func() { close(fin) })\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor classId := range fin {\n\t\t\tfmt.Printf(&#34;classId %d finished \\n&#34;, classId)\n\t\t}\n\t\tcl &lt;- 1\n\t}()\n\tcl &lt;- 1\n\t&lt;-cl\n\twg.Wait()\n\tfmt.Println(&#34;all done&#34;)\n}\n\n产生这段代码的错误原因是：一个通道有多个写 goroutine，你看下面的代码，\nfor i := 0; i &lt; 3; i++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tif classId, ok := &lt;-c; ok {\n\t\t\t\t\t// time.Sleep(time.Second)\n\t\t\t\t\tfin &lt;- classId\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tonce.Do(func() { close(fin) })\n\t\t\twg.Done()\n\t\t}()\n\t}\n这里实际上有三个 goroutiine 再向 fin send 数据，这很不好，最好还是读写各一个协程","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1674792897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600685,"discussion_content":"上面的程序其实只需要修改一步就能运行，但是运行结果应该和这个老哥的想法不一致。\n1. 无论如何主线程都不能被阻塞\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tc := make(chan int, 5)\n\tfin := make(chan int, 3)\n\tcl := make(chan int, 1)\n\tdefer close(fin)\n\tdefer close(cl)\n\tdefer close(c)\n\tgo func() {\n\t\tfor _, ch := range arr {\n\t\t\tc &lt;- ch\n\t\t}\n\t}()\n\tfor i := 0; i &lt; 3; i++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\tclassId := &lt;-c\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tfin &lt;- classId\n\t\t\t}\n\t\t}()\n\t}\n\tgo func() {\n\t\tfor classId := range fin {\n\t\t\tfmt.Printf(&#34;classId %d finished \\n&#34;, classId)\n\t\t}\n\t\tcl &lt;- 1\n\t}()\n\t&lt;-cl // 这里导致主线程阻塞，把这句注释掉\n\tfmt.Println(&#34;all done&#34;)\n}\n\n由于 cl channel 没有放入数据，这主要是有由于 range fin 这个 goroutine 被阻塞了， cl &lt;- 1 根本就没有执行，如果注释掉 &lt;-cl 这句话，这个程序能够正常结束。\n\n2. 如果不删除 &lt;-cl ，那么就需要调整 range fin，让 fin 这个channel 的读写等同，就不会阻塞， fin channel 的阻塞归根结底 classId 这三个 goroutine 造成的，合理设计这些 goroutine 的行为就能让这个程序正确","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1674726863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600632,"discussion_content":"你这个程序问题很多啊，兄弟，这看起来根本就不是一个有意义的程序哇。\n\n1. 及时在发送方关闭 channel\ngo func() {\n\t\tfor _,ch:=range arr{\n\t\t\tc&lt;-ch\n\t\t}\n\t}()\n建议在 for 循环后增加 close(c)，当然这个代码是否关系 c 不影响结果\n\n2. fin 被阻塞，由于 c 已经没有任何数据可读\nfor i:=0;i&lt;3;i++{\n\t\tgo func() {\n\t\t\tfor{\n\t\t\t\tclassId:=&lt;-c\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tfin&lt;-classId\n\t\t\t}\n\t\t}()\n\t}\n\n这段代码将开启三个 goroutine，每个 goroutine 都在死循环获取上一个 c channel 中的数据，c 只放了 5 个数据，这显然每个 goroutine 都将被阻塞\n\n3. range 一个被阻塞的 fin channel，这将导致 deadlock，且 range 的 fin 未被正确 close，导致它一致在等\ngo func() {\n\t\tfor classId:=range fin{\n\t\t\tfmt.Printf(&#34;classId %d finished \\n&#34;,classId)\n\t\t}\n\t\tcl&lt;-1 // 它不影响\n\t}()\n这个 范围 for 循环实际上做了如下操作:\n\nfor{\n    if classId, ok := &lt;-ch; ok{\n         fmt.Printf(&#34;classId %d finished \\n&#34;,classId)\n    }else{\n         break\n    }\n}\n\n我们看到这里实际上 fin 迟早会因为 c 没有新的值而被阻塞\n\n而且我们不能在接收方关闭 fin\ngo func() {\n               close(fin) // 这会导致 上面 fin &lt;- chassId 发生错误\n\t\tfor classId:=range fin{\n\t\t\tfmt.Printf(&#34;classId %d finished \\n&#34;,classId)\n\t\t}\n\t\tcl&lt;-1 // 它不影响\n\t}()\n\n4. 运行错误提示\n你这段代码执行后报错结果错误 stack 也到了下面这段代码上，这和我们上面的结论也是一致的。\ngo func() {\n\t\tfor classId := range fin {\n\t\t\tfmt.Printf(&#34;classId %d finished \\n&#34;, classId)\n\t\t}\n\t\tcl &lt;- 1\n\t}()\n\n5. 错误结果复现\nfunc main() {\n\tch := make(chan int)\n\n\tgo func() {\n\t\tfor i := 0; i &lt; 10; i++ {\n\t\t\tch &lt;- i // 这里会阻塞等待读取\n\t\t}\n\t}()\n\tfor val := range ch {\n\t\tfmt.Println(val)\n\t}\n}\n\n这段代码报错，改成下面代码后正确\n\nfunc main() {\n\tch := make(chan int)\n\n\tgo func() {\n\t\tfor i := 0; i &lt; 10; i++ {\n\t\t\tch &lt;- i\n\t\t}\n\t\tclose(ch)\n\t}()\n\tfor val := range ch {\n\t\tfmt.Println(val)\n\t}\n}\n\n这个代码的意图我觉得这位同学非常不清楚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1674650874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207355,"user_name":"Alvin-L","can_delete":false,"product_type":"c3","uid":1603052,"ip_address":"","ucode":"5AC96AAB75B720","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/ec/c60b29f5.jpg","comment_is_top":false,"comment_ctime":1587053687,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"\n&#47;&#47; 以上函数首先会调用AsyncService()，即建立通道接收值，并开启一个协程，\n&#47;&#47; 协程里执行ret := service(){等待50毫秒后返回值&quot;Done&quot;}。。。等等\n&#47;&#47; 但是这时候不影响主线程的运行，所以主线程的 otherTask()紧接着运行，\n&#47;&#47; 首先打印working on something else并睡100毫秒后继续打印&quot;otherTask is done.&quot;(暂时不会打印)\n&#47;&#47; 这睡100毫秒期间协程是同时运行的，即 service(){等待50毫秒后返回值&quot;Done&quot;}完成后，会打印&quot;returned result.&quot;\n&#47;&#47; 然后将返回值&quot;Done&quot;交给通道{retCh &lt;- ret}\n&#47;&#47; 然后打印&quot;service exited.&quot;，\n&#47;&#47; 主线程由于还在睡100毫秒，在睡醒后，会打印otherTask is done.\n&#47;&#47; 接着会从通道里拿出未来值并打印{fmt.Println(&lt;-retCh)}\n&#47;&#47; 另一个情况\n&#47;&#47; 由于通道retCh是由AsyncService()生成的，所以如果在AsyncService()没有跑完之前(更换各自睡眠时间)，\n&#47;&#47; 主程序如果想从通道里获取值(&lt;-retCh)会阻塞，此时的主线程会阻塞，一直等待通道的值&quot;Done&quot;\n&#47;&#47; 直到通道里有值&quot;Done&quot;后，才会打印\n&#47;&#47; 再另一个情况\n&#47;&#47; 如果使用无缓冲通道{make(chan string)}，那么在主线程（或者其他线程）没有获取管道的值的时候，管道会发生阻塞\n&#47;&#47; 此时会先打印Done，再打印&quot;service exited.&quot;，这种方法会降低协程处理性能，\n&#47;&#47; 除非有特定业务场景，否则尽量用有缓冲，尽量不用无缓冲","like_count":0},{"had_liked":false,"id":195284,"user_name":"小虎","can_delete":false,"product_type":"c3","uid":1033083,"ip_address":"","ucode":"31438B30CF7910","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GkMk4gBlfZcljsY3Vqu7w8ZkxBfe8WTz1ySnPTJARKXF0FpCr3HqlicIHQlItib9m7iaxLESkmBNpoiaY81EUUzQrA/132","comment_is_top":false,"comment_ctime":1585153733,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"通道类似于java里面的futuer，异步反回结果，如果加上buffer容量会更高效。","like_count":0,"discussions":[{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600664,"discussion_content":"future","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674703810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179411,"user_name":"艾斯曼","can_delete":false,"product_type":"c3","uid":1001772,"ip_address":"","ucode":"B73FA6A2530138","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/2c/a2a948b6.jpg","comment_is_top":false,"comment_ctime":1581999161,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"使用Channel来通信确实理解轻松，不用考虑那么复杂的同步异步问题","like_count":0},{"had_liked":false,"id":131485,"user_name":"一百瓦特微笑","can_delete":false,"product_type":"c3","uid":1204445,"ip_address":"","ucode":"E270A359775F22","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/dd/b8fef258.jpg","comment_is_top":false,"comment_ctime":1567764285,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"图画的用心","like_count":0},{"had_liked":false,"id":105272,"user_name":"祖国的花朵","can_delete":false,"product_type":"c3","uid":1581761,"ip_address":"","ucode":"5896EBB8D523D6","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/c1/c91c4fd6.jpg","comment_is_top":false,"comment_ctime":1560952261,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"回复@南宫云遥子:\nch := make(chan int) \n1. 这样定义出来的是一个无缓冲的channel, 必须要有一个同时写一个等待\n2. 如果串行执行的话写和等待并不成对, 造成死锁\n3. 可以使用cap(ch)看到创建出来的channel容量为0\n解决:\nch := make(chan int, 1) \n1. 这样的话有一个缓冲, 可以先写进去再取值","like_count":0,"discussions":[{"author":{"id":1953243,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epsRcQM1w3rNhv9iaYxz7tDGtFQ6tKCbrjnic2uEAZFyd3TK8Sb24DUic2f845VtP0GnVnfRspwiaH5ug/132","nickname":"Geek_8607a4","note":"","ucode":"493EA87394BDD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225252,"discussion_content":"无缓冲最主要的用途就是close之后，所有监听次通道的协程都会收到通知，可以去阅读一下context的设计，就是这么应用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586353688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88725,"user_name":"南宫云遥子","can_delete":false,"product_type":"c3","uid":1350610,"ip_address":"","ucode":"356C45EFF11756","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/d2/08d1dbc8.jpg","comment_is_top":false,"comment_ctime":1555986309,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"channel不能写完就读吗？这段代码会报死锁\n```\nfunc main(){\n\tc := make(chan int)\n\tc &lt;- 12\n\ttime.Sleep(2 * time.Second)\n\tch := &lt;-c\n\tfmt.Println(ch)\n}\n```\n```\nfatal error: all goroutines are asleep - deadlock!\n```","like_count":0,"discussions":[{"author":{"id":1112873,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/29/ee2982de.jpg","nickname":"阿德","note":"","ucode":"07F66FCDED4CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3621,"discussion_content":"我分析是这样，你的channel不是缓冲channel，c <- 12 这句之后就阻塞了，后面的语句都没有机会执行。改为缓冲channel，或把从channel存取内容放到不同的协程里就可以","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1564643448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600665,"discussion_content":"两位都是正解，要么改成 buffered chan 要么放入另外一个 goroutine","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674703919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435172,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e6/24/30806a88.jpg","nickname":"right-chen","note":"","ucode":"E0E940E80E7A2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582970,"discussion_content":"楼上说的对，把“c&lt;-12”改为“\n\tgo func() {\n\t\tc &lt;- 12\n\t}()”异步编程就好了，这是异步编程的美妙之处","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659855510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}