{"id":68247,"title":"08 | 答疑解惑：缓存失效的策略应该怎么定？","content":"<p>十一黄金周的时候，极客时间团队邀请到了前阿里巴巴高级技术专家许令波专门撰写了《如何设计一个秒杀系统》专栏，希望带你透彻理解秒杀系统的各个关键技术点，并借助“秒杀”这个互联网高并发场景中的典型代表，带你了解如何打造一个超大流量并发读写、高性能，以及高可用的系统架构。</p><p>专栏虽然只有短短7篇，但却持续获得大量用户的支持和赞誉。留言区，我们更是可以看到大量从学习角度或业务角度出发提出的各种问题。为此，我们也特别邀请专栏作者许令波就一些关键或普遍的问题进一步“加餐”解答，希望能够给你更好的帮助。</p><p><strong>1. “06 | 秒杀系统‘减库存’设计的核心逻辑”一文中，很多用户比较关注应用层排队的问题，大家主要的疑问就是应用层用队列接受请求，然后结果怎么返回的问题。</strong></p><p>其实我这里所说的排队，更多地是说在服务端的服务调用之间采用排队的策略。例如，秒杀需要调用商品服务、调用价格优惠服务或者是创建订单服务，由于调用这些服务出现性能瓶颈，或者由于热点请求过于集中导致远程调用的连接数都被热点请求占据，那么那些正常的商品请求（非秒杀商品）就得不到服务器的资源了，这样对整个网站来说是不公平的。</p><p>再比如说，正常整个网站上每秒只有几万个请求，这几万个请求可能是非常分散的，那么假如现在有一个秒杀商品，这个秒杀商品带来的瞬间请求一下子就打满了我们的服务器资源，这样就会导致那些正常的几万个请求得不到正常的服务，这个情况对系统来说是绝对不合理的，也是应该避免的。</p><!-- [[[read_end]]] --><p>所以我们设计了一些策略，把秒杀系统独立出来，部署单独的一些服务器，也隔离了一些热点的数据库，等等。但是实际上不能把整个秒杀系统涉及的所有系统都独立部署一套，不然这样代价太大。</p><p>既然不能所有系统都独立部署一套，势必就会存在一部分系统不能区分秒杀请求和正常请求，那么要如何防止前面所说的问题出现呢？通常的解决方案就是在部分服务调用的地方对请求进行Hash分组，来限制一部分热点请求过多地占用服务器资源，分组的策略就可以根据商品ID来进行Hash，热点商品的请求始终会进入一个分组中，这样就解决了前面的问题。</p><p>我看问的问题很多是说对秒杀的请求进行排队如何把结果通知给用户，我并不是说在用户HTTP请求时采用排队的策略（也就是把用户的所有秒杀请求都放到一个队列进行排队，然后在队列里按照进入队列的顺序进行选择，先到先得），虽然这看起来还是一个挺合理的设计，但是实际上并没有必要这么做！</p><p>为什么？因为我们服务端接受请求本身就是按照请求顺序处理的，而且这个处理在Web层是实时同步的，处理的结果也会立马就返回给用户。但是我前面也说了，整个请求的处理涉及很多服务调用也涉及很多其他的系统，也会有部分的处理需要排队，所以可能有部分先到的请求由于后面的一些排队的服务拖慢，导致最终整个请求处理完成的时间反而比较后面的请求慢的情况。</p><p>这种情况理论上的确存在，你可能会说这样可能会不公平，但是这的确没有办法，这种所谓的“不公平”，并不是由于人为设置的因素导致的。</p><p>你可能会问（如果你一定要问），采用请求队列的方式能不能做？我会说“能”，但是有两点问题：</p><ul>\n<li>一是体验会比较差，因为是异步的方式，在页面中搞个倒计时，处理的时间会长一点；</li>\n<li>二是如果是根据入队列的时间来判断谁获得秒杀商品，那也太没有意思了，没有运气成分不也就没有惊喜了？</li>\n</ul><p>至于大家在纠结异步请求如何返回结果的问题，其实有多种方案。</p><ul>\n<li>一是页面中采用轮询的方式定时主动去服务端查询结果，例如每秒请求一次服务端看看有没有处理结果（现在很多支付页面都采用了这种策略），这种方式的缺点是服务端的请求数会增加不少。</li>\n<li>二是采用主动push的方式，这种就要求服务端和客户端保持连接了，服务端处理完请求主动push给客户端，这种方式的缺点是服务端的连接数会比较多。</li>\n</ul><p>还有一个问题，就是如果异步的请求失败了，怎么办？对秒杀来说，我觉得如果失败了直接丢弃就好了，最坏的结果就是这个人没有抢到而已。但是你非要纠结的话，就要做异步消息的持久化以及重试机制了，要保证异步请求的最终正确处理一般都要借助消息系统，即消息的最终可达，例如阿里的消息中间件是能承诺只要客户端消息发送成功，那么消息系统一定会保证消息最终被送到目的地，即消息不会丢。因为客户端只要成功发送一条消息，下游消费方就一定会消费这条消息，所以也就不存在消息发送失败的问题了。</p><p><strong>2. 在“02 | 如何才能做好动静分离？有哪些方案可选？”一文中，有介绍静态化的方案中关于Hash分组的问题。</strong></p><p>大家可能通常理解Hash分组，像Cache这种可能一个key对应的数据只存在于一个实例中，这样做其实是为了保证缓存命中率，因为所有请求都被路由到一个缓存实例中，除了第一次没有命中外，后面的都会命中。</p><p>但是这样也存在一个问题，就是如果热点商品过于集中，Cache就会成为瓶颈，这时单个实例也支撑不了。像秒杀这个场景中，单个商品对Cache的访问会超过20w次，一般单Cache实例都扛不住这么大的请求量。所以需要采用一个分组中有多个实例缓存相同的数据（冗余）的办法来支撑更大的访问量。</p><p>你可能会问：一个商品数据存储在多个Cache实例中，如何保证数据一致性呢？（关于失效问题大家问得也比较多，后面再回答。）这个专栏中提的Hash分组都是基于Nginx+Varnish实现的，Nginx把请求的URL中的商品ID进行Hash并路由到一个upstream中，这个upstream挂载一个Varnish分组（如下图所示）。这样，一个相同的商品就可以随机访问一个分组的任意一台Varnish机器了。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/db/76b3292f992697fe117852c3159c9fdb.jpg?wh=886*865\" alt=\"\"></p><p>另外一个问题，关于Hash分组大家关注比较多的是命中率的问题，就是Cache机器越多命中率会越低。</p><p>这个其实很好理解，Cache实例越多，那么这些Cache缓存数据需要访问的次数也就越多。例如我有3个Redis实例，需要3个Redis实例都缓存商品A，那么至少需要访问3次才行，而且是这3次访问刚好落到不同的Redis实例中。那么从第4次访问开始才会被命中，如果仅仅是一个Redis实例，那么第二次访问时其实就能命中了。所以理论上Cache实例多会影响命中率。</p><p>你可能还会问，如果访问量足够大，那么只是影响前几次命中率而已，是的，如果Cache一直不失效的话是这样的，但是在实际的生产环境中Cache失效是很频繁发生的事情。很多情况下，还没等到所有Cache实例填满，该商品就已经失效了。所以，我们要根据商品的重复访问量来合理地设置Cache分组。</p><p><strong>3. 在“02 | 如何才能做好动静分离？有哪些方案可选？”和“04 | 流量削峰这事应该怎么做？”两篇文章中，关于Cache失效的问题。</strong></p><p>首先，咱们要有个共识，有Cache的地方就必然存在失效问题。为啥要失效？因为要保证数据的一致性。所以要用到Cache必然会问如何保证Cache和DB的数据一致性，如果Cache有分组的话，还要保证一个分组中多个实例之间数据的一致性，就像保证MySQL的主从一致一样。</p><p>其实，失效有主动失效和被动失效两种方式。</p><ul>\n<li>被动失效，主要处理如模板变更和一些对时效性不太敏感数据的失效，采用设置一定时间长度（如只缓存3秒钟）这种自动失效的方式。当然，你也要开发一个后台管理界面，以便能够在紧急情况下手工失效某些Cache。</li>\n<li>主动失效，一般有Cache失效中心监控数据库表变化发送失效请求、系统发布也需要清空Cache数据等几种场景。其中失效中心承担了主要的失效功能，这个失效中心的逻辑图如下：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7e/54/7e9b45adfc8b31616d9c675415bfdd54.jpg?wh=1009*407\" alt=\"\"></p><p>失效中心会监控关键数据表的变更（有个中间件来解析MySQL的binglog，然后发现有Insert、Update、Delete等操作时，会把变更前的数据以及要变更的数据转成一个消息发送给订阅方），通过这种方式来发送失效请求给Cache，从而清除Cache数据。如果Cache数据放在CDN上，那么也可以采用类似的方式来设计级联的失效结构，采用主动发请求给Cache软件失效的方式，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/71/4bdba84115a2386409fee083e96f8671.jpg?wh=891*707\" alt=\"\"></p><p>这种失效有失效中心将失效请求发送给每个CDN节点上的Console机，然后Console机来发送失效请求给每台Cache机器。</p><p></p>","comments":[{"had_liked":false,"id":47233,"user_name":"张雨桐老豆","can_delete":false,"product_type":"c1","uid":1113083,"ip_address":"","ucode":"66743BD66434F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/fb/701d2652.jpg","comment_is_top":false,"comment_ctime":1544084480,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"366616304640","product_id":100017501,"comment_content":"这方面的东西看了很多，但是，大多数程序员是接触不到或者这方面的知识让你去搭建设计一个这样的系统，一方面公司没有这么大的流量，除了一些bat公司.另一方面，就算有这个留了，一般的系统都是现成的.一个100人的团队，也许就那么一两个人负责，大多数还是在硬编码，所以说大多数的程序员都停留在一个理论阶段，很少有实践的地方","like_count":84,"discussions":[{"author":{"id":1857536,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoG6W3ugJo1XEqmLPULB9o19GribV7hDZTMuVauvcpW8gaS2QPibwMkxce4fT2xCLGqRG0rx3V9WAWA/132","nickname":"睡不醒的🐷","note":"","ucode":"E88BD4EAD6F655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":184408,"discussion_content":"思想是程序员最高境界的艺术体现,代码是其次","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582554590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ff/f71034e9.jpg","nickname":"悟空WuKong","note":"","ucode":"49AFD2B048C1BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217578,"discussion_content":"自己写一套模拟秒杀的demo，使用jmeter模拟高并发，当然，cdn这种实在不好实践","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585571349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","nickname":"爱学习的大叔","note":"","ucode":"91F9ABF1EC98D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268078,"discussion_content":"大部分人遇不到这种体量，有这种体量的确实基本上大公司。看看，羡慕一下就好了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589726398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306311,"discussion_content":"同感。。还是先打好基础，掌握最基本的思想和方法。这些高大上的系统，最终也是通过最基础的方法落地的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600244849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212602,"discussion_content":"决定自己玩一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584978640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18938,"discussion_content":"可以自己搭一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569121156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58013,"user_name":"小胡子","can_delete":false,"product_type":"c1","uid":1018182,"ip_address":"","ucode":"79FEC6400D25DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","comment_is_top":false,"comment_ctime":1546960641,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57381535489","product_id":100017501,"comment_content":"看来看去 没有看出个所以然 看来还是我道行不够","like_count":13,"discussions":[{"author":{"id":1635513,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f4/b9/66f78e40.jpg","nickname":"杨军","note":"","ucode":"1BB7B6DCD42A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373099,"discussion_content":"建议少点文字，多点图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620613850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18940,"discussion_content":"分段式锁、哈希环了解一下再来看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569121249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39194,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1542207223,"is_pvip":false,"replies":[{"id":"14443","content":"😉","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1542527229,"ip_address":"","comment_id":39194,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31606978295","product_id":100017501,"comment_content":"还有加餐，厉害了👍","like_count":7,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428959,"discussion_content":"😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542527229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65290,"user_name":"Do","can_delete":false,"product_type":"c1","uid":1313480,"ip_address":"","ucode":"EA11EBD6439D1B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/c8/dae4a360.jpg","comment_is_top":false,"comment_ctime":1549198979,"is_pvip":false,"replies":[{"id":"26111","content":"你没理解我的意思，建议你仔细看看我说的话，一个组内的三台实例，同一份商品数据只会存一份。<br><br>一个商品是随机路由到3个分组的，但是一个商品始终只会命中一个分组中的一个实例","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1551523783,"ip_address":"","comment_id":65290,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18729068163","product_id":100017501,"comment_content":"你好，分组是为避免热点，这是ok的，我所说的空间浪费3倍不是指分组的浪费，我指的是组内的机器。如你的例子，一个组里面有3个varsion实例，那么假设这3个varsion实例的内存是1GB，那么其实这3个varsion实例也就只能提供1GB的的缓存。假如这个组命名为A组，分别给组内varsion实例分别命名为A1,A2A3,假设每组的热点数据是2GB,那么是否有以下几个缺陷<br>1：缓存不一致，会导致一台实例请求过的还需要在回源。例如有个商品A的请求，被路由到A组，那么第一次随机到A1，此时A1需要回源然后存储，那么假设下次同下是商品A的请求，还是被路由到A组，但是这次被路由到A2，此时因为A2没请求过所以还是需要回源请求下。也就是组内各个varnish的缓存数据不一致会导致不必要的请求回源；<br>2：集群数据扩容代价大。例如现在集权每台varnish实例是1GB内存进行HTTP缓存，然后为了提高HTTP缓存命中率，将varnish实例内存提高到2GB，尽可能的将热点数据在每个varnish实例间缓存，那么以你集群所示，一个组3台机器，由于varnish实例间不共享内存数据，所以为了能尽可能的缓存，每台机器都需要扩容到2G，也就是一共是增加了3GB内存,但是只提高了1GB的缓存增加；<br> 您留言说的Nginx增加热点模块，也有上述缺陷吧<br>我的问题是:<br>1.关于我所说的第一点,是否可以让商品请求在组内时，使用一致性HASH算法路由到varnish实例上而不是随机访问组内varnish实例；<br>2.关于第二点，有什么好的方式解决吗","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438388,"discussion_content":"你没理解我的意思，建议你仔细看看我说的话，一个组内的三台实例，同一份商品数据只会存一份。\n\n一个商品是随机路由到3个分组的，但是一个商品始终只会命中一个分组中的一个实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551523783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033730,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/08/42/b14f3a32.jpg","nickname":"Geek_2ecc5d","note":"","ucode":"4B6D777B754A80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285603,"discussion_content":"辣鸡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592890602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70082,"discussion_content":"关于缓存如何使用在唐扬老师的高并发系统设计里，专门有一章讲解缓存的正确使用姿势，当然了，即便是学了正确的使用姿势也只是刚入门而已，以后还有很多具体情况需要实际去分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575312023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57655,"user_name":"古夜","can_delete":false,"product_type":"c1","uid":1341612,"ip_address":"","ucode":"0A82D3CFCEDF07","user_header":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","comment_is_top":false,"comment_ctime":1546862672,"is_pvip":false,"replies":[{"id":"21995","content":"第一个问题没明白你要问什么？<br>第二个问题：我已经解释的这么详细了，不知道还怎么解释😂！！所谓命中就是在没有提前填充缓存的情况下，必须要访问一次cache这个商品才会被缓存起来，这样第二次再访问时cache才会被命中。<br>","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1547979043,"ip_address":"","comment_id":57655,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18726731856","product_id":100017501,"comment_content":"第一个问题:同一个商品比如苹果，多个这种苹果的ID是否相同？<br><br>二:这个其实很好理解，Cache 实例越多，那么这些 Cache 缓存数据需要访问的次数也就越多。例如我有 3 个 Redis 实例，需要 3 个 Redis 实例都缓存商品 A，那么至少需要访问 3 次才行，而且是这 3 次访问刚好落到不同的 Redis 实例中。那么从第 4 次访问开始才会被命中，如果仅仅是一个 Redis 实例，那么第二次访问时其实就能命中了。所以理论上 Cache 实例多会影响命中率。<br>这块没明白，希望老师再详细讲讲","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435686,"discussion_content":"第一个问题没明白你要问什么？\n第二个问题：我已经解释的这么详细了，不知道还怎么解释😂！！所谓命中就是在没有提前填充缓存的情况下，必须要访问一次cache这个商品才会被缓存起来，这样第二次再访问时cache才会被命中。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547979043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099875,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c8/63/f94f9fda.jpg","nickname":"smily","note":"","ucode":"E2FDA059724A02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173725,"discussion_content":"假设每个redis实例能扛住10万读，有3个redis实例，每个实例都缓存A单品，可以扛住30万并发量。假设访问A单品，超40万并发量，3个redis实例都被单品A占用，无法服务其他单品访问，如何设计。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581863223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1255437,"avatar":"https://static001.geekbang.org/account/avatar/00/13/28/0d/558f6141.jpg","nickname":"你净瞎说～","note":"","ucode":"A4EE0154034D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1099875,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c8/63/f94f9fda.jpg","nickname":"smily","note":"","ucode":"E2FDA059724A02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199423,"discussion_content":"这就跟你公司就3台服务器，项目却有几百个一样。优化个差不多，只能加机器了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583589521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":173725,"ip_address":""},"score":199423,"extra":""}]},{"author":{"id":1099875,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c8/63/f94f9fda.jpg","nickname":"smily","note":"","ucode":"E2FDA059724A02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173733,"discussion_content":"如何设计扩展此类需求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581863284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52116,"user_name":"耶愿","can_delete":false,"product_type":"c1","uid":1340960,"ip_address":"","ucode":"549E54F67FC000","user_header":"https://static001.geekbang.org/account/avatar/00/14/76/20/2f9c6763.jpg","comment_is_top":false,"comment_ctime":1545312828,"is_pvip":false,"replies":[{"id":"19632","content":"不知道你说的tps先·并发写上千是什么场景下得出的，就我了解即使是MySQL没经过单机写肯定也不止上千QPS。阿里在数据库存的并发写肯定是做了很多的优化，我建议可以订阅一下隔壁的MySQL课程。另外我们说的并发写是有纬度概念的，比如单机还是单库还是单表，还是指一个业务在同一时刻的并发，都不一样。比如阿里的双十一并发下单支持10w的QPS，虽然是的10w但是落到实际的数据库层多个库的多台机器上，因为我们可以根据用户请求的商品ID进行分库分表，这样可以大大减少并发度。","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1545823378,"ip_address":"","comment_id":52116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18725182012","product_id":100017501,"comment_content":"许老师，问个问题，关于并发写的问题，目前我知道MySQL和redis并发写即使做过优化，tps也就是上千。而淘宝的写入tps至少上万，想知道淘宝是怎么做到上万写入tps的，而用户没有等待的感觉，非常感谢！虽然其它同学有留言，但感觉他们的方法都是过家家的方法，我想知道淘宝这是怎么实现的。","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433752,"discussion_content":"不知道你说的tps先·并发写上千是什么场景下得出的，就我了解即使是MySQL没经过单机写肯定也不止上千QPS。阿里在数据库存的并发写肯定是做了很多的优化，我建议可以订阅一下隔壁的MySQL课程。另外我们说的并发写是有纬度概念的，比如单机还是单库还是单表，还是指一个业务在同一时刻的并发，都不一样。比如阿里的双十一并发下单支持10w的QPS，虽然是的10w但是落到实际的数据库层多个库的多台机器上，因为我们可以根据用户请求的商品ID进行分库分表，这样可以大大减少并发度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545823378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61658,"user_name":"oTo123","can_delete":false,"product_type":"c1","uid":1071162,"ip_address":"","ucode":"5923128645D816","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/3a/98d6ee8d.jpg","comment_is_top":false,"comment_ctime":1547769162,"is_pvip":false,"replies":[{"id":"22005","content":"如你所说这是个平衡的问题，没有标准答案，是合并还是分开要具体根据测试结果来判断。就根据经验来判断，像一些评价和推荐数据一般都是单独请求比较好，一个是这些数据比较多，而且服务端也比较耗时所以单独请求会比较合理一些","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1547982277,"ip_address":"","comment_id":61658,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14432671050","product_id":100017501,"comment_content":"老师，请问一下，一个其他问题。商品详情页这种页面，有商品数据，商家数据，评价数据，商品推荐等。这些是放到一个接口返回呢（这样接口那耦合了多个模块的数据），还是每个部分都开一个接口给前端调用（这样减少了网络开销次数）? 在性能需求下怎么权衡呢?","like_count":3,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436943,"discussion_content":"如你所说这是个平衡的问题，没有标准答案，是合并还是分开要具体根据测试结果来判断。就根据经验来判断，像一些评价和推荐数据一般都是单独请求比较好，一个是这些数据比较多，而且服务端也比较耗时所以单独请求会比较合理一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547982277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47134,"user_name":"IT小菜鸟","can_delete":false,"product_type":"c1","uid":1267275,"ip_address":"","ucode":"C71A163F799C09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pCUrja4Z78P36FkdXQFFwsQ4pSP6X5icrGJSUtlruntor1JfWqYfpWwUVhu6Yd8fzLUA3GJu56hRC7PvoXMZfJA/132","comment_is_top":false,"comment_ctime":1544061550,"is_pvip":false,"replies":[{"id":"19648","content":"找你身边的同学帮你看看吧&gt;o&lt;","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1545825810,"ip_address":"","comment_id":47134,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14428963438","product_id":100017501,"comment_content":"许神，打扰您一下，您抽空帮我看一下这个问题，就是我现在项目中的用的spring版本是3.2.0 的，我现在要用spring-session实现session共享，我看网上都是要求spring版本4.x以上，我在本地试了一下，发现session是能存到redis里的，但是我把项目部署到服务器上的时候却存不到redis里，不知道是什么原因，还望许神有空帮忙分析一下哈","like_count":3,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431675,"discussion_content":"找你身边的同学帮你看看吧&amp;gt;o&amp;lt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545825810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435845,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/c5/8bdb0bba.jpg","nickname":"DarKnight","note":"","ucode":"B04AFD03768827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324173,"discussion_content":"这里不是spring全家桶专栏������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605065042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41314,"discussion_content":"看看文档，这个问题放在这里不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572398628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44127,"user_name":"Adam","can_delete":false,"product_type":"c1","uid":1156060,"ip_address":"","ucode":"76BA279D9F4E5E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/dc/11eef428.jpg","comment_is_top":false,"comment_ctime":1543371670,"is_pvip":false,"replies":[{"id":"16255","content":"Canal可以去了解一下","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1543727336,"ip_address":"","comment_id":44127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14428273558","product_id":100017501,"comment_content":"解析binlog的中间件是什么？有开源的产品么？ 不然自己实现的话代价就比较大了","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430640,"discussion_content":"Canal可以去了解一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543727336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85014,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1554956438,"is_pvip":false,"replies":[{"id":"34287","content":"嗯","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1558245934,"ip_address":"","comment_id":85014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10144891030","product_id":100017501,"comment_content":"失效中心可以直接调用cdn的接口服务吧","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446529,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558245934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45433,"user_name":"tony","can_delete":false,"product_type":"c1","uid":1254277,"ip_address":"","ucode":"D5BBFBEB576BE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/85/e19f8833.jpg","comment_is_top":false,"comment_ctime":1543640356,"is_pvip":false,"replies":[{"id":"16267","content":"你说的场景是一种实现思路，当然也可以直接通过应用程序直接操作db和cache保持一致性","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1543758988,"ip_address":"","comment_id":45433,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133574948","product_id":100017501,"comment_content":"针对Cache和DB的数据一致性问题，如果DB是A团队业务使用的，Cache是B团队业务使用。DB对于B团队来说不可控，可以通过什么方式对A提出较少的需求（比如是要在DB所在机器安装监控binlog的中间件吗？比如要求A团队打开DB的binlog？），实现读取Cache和A业务的DB数据一致性。","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431037,"discussion_content":"你说的场景是一种实现思路，当然也可以直接通过应用程序直接操作db和cache保持一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543758988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84995,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1554953725,"is_pvip":false,"replies":[{"id":"34286","content":"这个没有统一的答案😀","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1558245898,"ip_address":"","comment_id":84995,"utype":1}],"discussion_count":5,"race_medal":0,"score":"5849921021","product_id":100017501,"comment_content":"比较想问的是学完框架后，是先学设计模式还是先学JVM原理，并发与线程安全，然后中间件和架构设计，数据库设计，Linux学习，跨语言学习顺序，这些都是按照什么样的顺序学习的，还有源码阅读顺序","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446523,"discussion_content":"这个没有统一的答案😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558245898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70084,"discussion_content":"建议先学数据结构和算法，JVM原理也是基于各种数据结构和算法实现的，算法都学会了，可以看看王宝令的Java并发编程实战，至于数据库设计，这些都有比较完整的方法论，买本书看看就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575312369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":92912,"discussion_content":"多谢\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576893768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70084,"ip_address":""},"score":92912,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18953,"discussion_content":"跨语言学放到最后，选一门主流语言深入学习，因为数据结构、算法是基础，介绍这样知识的书一般会有主流语言的版本，这样学习起来相对轻松。同时学习设计模式，最后再学习jvm、操作系统，因为他们是基于数据结构、算法、设计模式设计开发的，基础打好了学起来飞快，不然不是放弃就是不能深入。建议顺序：主流语言、设计模式、数据结构、算法、有基础后想学什么都行。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569121843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46190,"discussion_content":"多谢多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573129297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":18953,"ip_address":""},"score":46190,"extra":""}]}]},{"had_liked":false,"id":72466,"user_name":"du","can_delete":false,"product_type":"c1","uid":1109115,"ip_address":"","ucode":"AEEB2F80324108","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/7b/f082c80f.jpg","comment_is_top":false,"comment_ctime":1551635391,"is_pvip":true,"replies":[{"id":"30095","content":"😉","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1554532904,"ip_address":"","comment_id":72466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846602687","product_id":100017501,"comment_content":"所以需要采用一个分组中有多个实例缓存相同的数据（冗余）的办法来支撑更大的访问量。<br>………<br>","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441602,"discussion_content":"😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554532904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63472,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1282648,"ip_address":"","ucode":"3A23079E4AA92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/58/b4f6365d.jpg","comment_is_top":false,"comment_ctime":1548380613,"is_pvip":false,"replies":[{"id":"23141","content":"秒杀商品中的部分信息一致不变的话（例如商品描述信息），是可以一直缓存在cache中的，等结束了再删除","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1549163375,"ip_address":"","comment_id":63472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843347909","product_id":100017501,"comment_content":"请问老师，关于cache失效问题，一般秒杀商品详情不怎么会变，那为什么不可以一直缓存在cache中，不设置过期呢，等秒杀结束再删掉？","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437601,"discussion_content":"秒杀商品中的部分信息一致不变的话（例如商品描述信息），是可以一直缓存在cache中的，等结束了再删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549163375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48630,"user_name":"放","can_delete":false,"product_type":"c1","uid":1178180,"ip_address":"","ucode":"F637FF0D2F63AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/44/aa19d1f6.jpg","comment_is_top":false,"comment_ctime":1544500938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839468234","product_id":100017501,"comment_content":"感谢老师的分享，即使不做架构师，对以后写代码的思路也有很大的提升！","like_count":1},{"had_liked":false,"id":40350,"user_name":"15757172538","can_delete":false,"product_type":"c1","uid":1258786,"ip_address":"","ucode":"BE4B753841D3EF","user_header":"","comment_is_top":false,"comment_ctime":1542597640,"is_pvip":false,"replies":[{"id":"16243","content":"阿里有个来源的mysql工具分析工具canal","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1543723636,"ip_address":"","comment_id":40350,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837564936","product_id":100017501,"comment_content":"binlog的监控有推荐的分析工具吗？<br>oracle有类似binlog的日志分析方式吗？","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429488,"discussion_content":"阿里有个来源的mysql工具分析工具canal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543723636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39288,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1542243884,"is_pvip":false,"replies":[{"id":"14440","content":"变更前后数据就是sql执行影响的数据","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1542527106,"ip_address":"","comment_id":39288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837211180","product_id":100017501,"comment_content":"re: 解析 MySQL 的 binglog，然后发现有 Insert、Update、Delete 等操作时，会把变更前的数据以及要变更的数据转成一个消息发送给订阅方<br><br>问题：<br>将『变更后』的数据转成消息发给订阅方，是方便不用再查询数据库获得数据么？<br><br>为啥要将『变更前』的数据也发给订阅方吖？这里的『变更前』数据，只是一个 id 之类而非全量数据吧？<br><br>谢谢","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428997,"discussion_content":"变更前后数据就是sql执行影响的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542527106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335447,"user_name":"李晓东","can_delete":false,"product_type":"c1","uid":2542191,"ip_address":"","ucode":"B109142EEE1DC4","user_header":"","comment_is_top":false,"comment_ctime":1645521521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645521521","product_id":100017501,"comment_content":"慢慢消化","like_count":0},{"had_liked":false,"id":335164,"user_name":"宋雨新","can_delete":false,"product_type":"c1","uid":2751206,"ip_address":"","ucode":"BA04DCC38B6105","user_header":"","comment_is_top":false,"comment_ctime":1645368223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645368223","product_id":100017501,"comment_content":"感谢老师","like_count":0},{"had_liked":false,"id":328932,"user_name":"王益维","can_delete":false,"product_type":"c1","uid":2055291,"ip_address":"","ucode":"ADEC44CB556B3D","user_header":"","comment_is_top":false,"comment_ctime":1640942041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640942041","product_id":100017501,"comment_content":"很有参考价值","like_count":0},{"had_liked":false,"id":313110,"user_name":"杨超","can_delete":false,"product_type":"c1","uid":2717035,"ip_address":"","ucode":"5A656DB643CB98","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo0zjOtxgSibuXNhp6fSu8qXXiaOjE7uLHy6FhyDGYLjYZl6AxvSG0K1Nlrq9ZZqv8TW2CqE2Tgh2eg/132","comment_is_top":false,"comment_ctime":1632281745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632281745","product_id":100017501,"comment_content":"感谢老师","like_count":0},{"had_liked":false,"id":289994,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1619312151,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1619312151","product_id":100017501,"comment_content":"失效监控中心眼界大开","like_count":0},{"had_liked":false,"id":286642,"user_name":"轨迹","can_delete":false,"product_type":"c1","uid":1738455,"ip_address":"","ucode":"6C9619A0B60CDD","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/d7/bfd9e42a.jpg","comment_is_top":false,"comment_ctime":1617442105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617442105","product_id":100017501,"comment_content":"所以，就是redis减扣库存成功之后，所有抢库存成功的请求，都同时去生成订单吗？mysql扛得住？<br>还是说先记录用户抢购成功状态(消息队列异步记)，让用户进入到提交订单页面，然后分散用户创建订单时间？但是这样其实还是有可能并发量比较大啊","like_count":0},{"had_liked":false,"id":282666,"user_name":"Bf-Bus","can_delete":false,"product_type":"c1","uid":1961813,"ip_address":"","ucode":"66D9E76AA810E5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ef/55/57393993.jpg","comment_is_top":false,"comment_ctime":1615357248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615357248","product_id":100017501,"comment_content":"在没有理论与实践相结合的前提下，看完整片文章并没有特别的感觉，类似文章在网上也有很多","like_count":0},{"had_liked":false,"id":281898,"user_name":"攻城汪","can_delete":false,"product_type":"c1","uid":2285974,"ip_address":"","ucode":"62C7B1311AD010","user_header":"https://static001.geekbang.org/account/avatar/00/22/e1/96/5853624a.jpg","comment_is_top":false,"comment_ctime":1614938444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614938444","product_id":100017501,"comment_content":"我是阿里同学，其中什么tair的集团外的人貌似看不懂，还有mysql的优化他们也想像不到，建议可以另开一个课程介绍这些他们接触不到的原理之类的，我觉得他们会非常感兴趣","like_count":0},{"had_liked":false,"id":269004,"user_name":"mbc","can_delete":false,"product_type":"c1","uid":1698015,"ip_address":"","ucode":"D5F52BA5047152","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJsOFUdib57ORVyia33dibSGRgwZZ9L2hQ90Xh5WsDUHfpHoCW2AMibnawMLBS6upGH3Qic57kl4PE6v2w/132","comment_is_top":false,"comment_ctime":1608469073,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608469073","product_id":100017501,"comment_content":"提高缓存命中率有啥好的方案吗？比如根据 redis的ttl把快过期的key通过job定期去更新","like_count":0},{"had_liked":false,"id":266635,"user_name":"向博士后进军","can_delete":false,"product_type":"c1","uid":1903452,"ip_address":"","ucode":"CFDC3CF31C582D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0b/5c/9734702d.jpg","comment_is_top":false,"comment_ctime":1607421610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607421610","product_id":100017501,"comment_content":"一个商品在三个CACHE里，为什第4次才命中呢","like_count":0},{"had_liked":false,"id":264523,"user_name":"crtmsvc","can_delete":false,"product_type":"c1","uid":2201323,"ip_address":"","ucode":"A00D3FB17CB614","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdxvFhbrkicjZa4avHTfWWPJCKCIrkhgws8WN9RJAJ5D4oGAPgAOVXmDk9gKEQ9nbrhia9Qjsqk4DyA/132","comment_is_top":false,"comment_ctime":1606488150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606488150","product_id":100017501,"comment_content":"做过算大的电商，我觉得收获很多。同时对以前用到的做法也有更深的理解，谢谢老师，我很喜欢这门课。","like_count":0},{"had_liked":false,"id":258677,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1604538343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604538343","product_id":100017501,"comment_content":"老师好，想请教下秒杀中数据库单行热点问题是怎么解决的呢？如何变成多行来处理呢？","like_count":0},{"had_liked":false,"id":219446,"user_name":"山猫","can_delete":false,"product_type":"c1","uid":1466682,"ip_address":"","ucode":"004F622AEDA906","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/3a/a259c187.jpg","comment_is_top":false,"comment_ctime":1590026595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590026595","product_id":100017501,"comment_content":"能不能问个简单的问题：用Redis进行缓存时，是通过代码进行缓存同步，还是Redis本身就有同步机制。如何保证同步的一致性呢？","like_count":0},{"had_liked":false,"id":194810,"user_name":"未命名","can_delete":false,"product_type":"c1","uid":1178114,"ip_address":"","ucode":"414CAE9E927CD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/02/7e70ada0.jpg","comment_is_top":false,"comment_ctime":1585107350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585107350","product_id":100017501,"comment_content":"打卡学习，我就喜欢这种高屋建瓴的方式！","like_count":0},{"had_liked":false,"id":192091,"user_name":"Mango","can_delete":false,"product_type":"c1","uid":1734886,"ip_address":"","ucode":"EC2D20BD322E22","user_header":"","comment_is_top":false,"comment_ctime":1584837196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584837196","product_id":100017501,"comment_content":"缓存失效，mark","like_count":0},{"had_liked":false,"id":182384,"user_name":"Cheney Hsu","can_delete":false,"product_type":"c1","uid":1049955,"ip_address":"","ucode":"0491CC594E7007","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/63/aeeeea80.jpg","comment_is_top":false,"comment_ctime":1582777050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582777050","product_id":100017501,"comment_content":"不错！支持！","like_count":0},{"had_liked":false,"id":163670,"user_name":"AAA_叶子","can_delete":false,"product_type":"c1","uid":1325994,"ip_address":"","ucode":"1E93617D308EE0","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/aa/e8dfcd7e.jpg","comment_is_top":false,"comment_ctime":1576764437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576764437","product_id":100017501,"comment_content":"针对第一个问题， 最近在看kafka，kafka在处理consumer的请求的时候， 也是利用队列来排队，然后线程池处理请求，再将结果返回，利用的是参数对象里面有repsonse引用来获取那个response，我想问这个处理方式可以解决第一个问题吗？","like_count":0},{"had_liked":false,"id":151902,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1573809765,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1573809765","product_id":100017501,"comment_content":"老师您好.我有个这样的问题(与咱们这个秒杀无关).<br><br>就是网站的首页, 要展示很多的信息(多数是统计信息),一共大约查询了7个接口. 而这些接口的数据,一般的都是实时产生的, 我如何去优化这些呢?<br><br>目前能想到的是加入缓存 redis 数据产生变化的时候,调用redis修改缓存数据 , 但是这些数据的产生来源于各种不同的节点, 改造点太多了....<br><br>有木有什么好的建议?","like_count":0,"discussions":[{"author":{"id":1723864,"avatar":"","nickname":"Geek_857","note":"","ucode":"08DB59885AE0CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72066,"discussion_content":"1、页面不要求必须是时时数据，可以单独起一个定时去调7个接口，数据放到redis中，再给页面提供一个接口\n2、必须实时，改造数据提供方，数据可以放内存也可以放redis\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575469317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1723864,"avatar":"","nickname":"Geek_857","note":"","ucode":"08DB59885AE0CD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72461,"discussion_content":"必须实时，改造代价太大了， \n目前采用了多线程的方式. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575475466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72066,"ip_address":""},"score":72461,"extra":""}]}]},{"had_liked":false,"id":146874,"user_name":"superfq","can_delete":false,"product_type":"c1","uid":1033472,"ip_address":"","ucode":"37B45E9018F14F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/00/37ef050e.jpg","comment_is_top":false,"comment_ctime":1572683995,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1572683995","product_id":100017501,"comment_content":"老师，您好，请教两个问题<br>1. cache失效期间一致性的问题：从mysql数据更改后，到失效中心通知cache失效，这期间的请求仍然会读到老的cache，出现读写不一致的情况，比如线程A提交数据库把数据从1改成2，线程B马上从cache中读这个数据可能读到的还是1，只后具体1做写操作，就出现了不一致，请问这种情况如何处理？<br>2. 老师在文中提到了cache分组，失效中心如何有效保证cache中每个cache都失效，如果出现部分cache没有被失效，如何处理？<br>谢谢","like_count":0,"discussions":[{"author":{"id":1061306,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/ba/35b3b16c.jpg","nickname":"Marsman","note":"","ucode":"A108E7A0A59FAC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375105,"discussion_content":"我的理解： cache不一致可以接受，cache的库存扣减逻辑， 只是挡了一层请求，把部分的无效请求挡在上层， 不进入核心的交易逻辑（最终的库存一致性由DB来保证）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621483764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144593,"user_name":"王丰","can_delete":false,"product_type":"c1","uid":1084423,"ip_address":"","ucode":"E4A668D873A32A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8c/07/b4ea8f10.jpg","comment_is_top":false,"comment_ctime":1571974137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571974137","product_id":100017501,"comment_content":"面试必问题","like_count":0},{"had_liked":false,"id":136799,"user_name":"傻不拉几二锅头","can_delete":false,"product_type":"c1","uid":1356474,"ip_address":"","ucode":"E26045E067A099","user_header":"https://static001.geekbang.org/account/avatar/00/14/b2/ba/b74f2ec0.jpg","comment_is_top":false,"comment_ctime":1569511348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569511348","product_id":100017501,"comment_content":"主动失效：监控binlog 从而去动态变更cache中的配置","like_count":0},{"had_liked":false,"id":127954,"user_name":"陈榕","can_delete":false,"product_type":"c1","uid":1063159,"ip_address":"","ucode":"88CDB49D5574D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/f7/bd729d33.jpg","comment_is_top":false,"comment_ctime":1566813848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566813848","product_id":100017501,"comment_content":"许哥，请问一下，阿里秒杀单机的QPS，多少台机器呢，大概是多少呢，最近要做一个分享，麻烦您告知一下","like_count":0},{"had_liked":false,"id":124267,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1217896,"ip_address":"","ucode":"947C5785A7EDF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/68/41546e8a.jpg","comment_is_top":false,"comment_ctime":1565847895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565847895","product_id":100017501,"comment_content":"看完 估计也难有机会实践","like_count":0},{"had_liked":false,"id":105300,"user_name":"Do","can_delete":false,"product_type":"c1","uid":1313480,"ip_address":"","ucode":"EA11EBD6439D1B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/c8/dae4a360.jpg","comment_is_top":false,"comment_ctime":1560958954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560958954","product_id":100017501,"comment_content":"许老师你好，我对问题一种进行分组的实现还是不太理解，或者目前哪些服务中间件实现了这个分组的逻辑？我自己看下也行。","like_count":0},{"had_liked":false,"id":68915,"user_name":"晓洁","can_delete":false,"product_type":"c1","uid":1283547,"ip_address":"","ucode":"DFFC5C26FAF0BC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGicA7oewUtC2VOuaO2UaSs5q2Feic7JJrvrJHgeaJqK4ewF1rMhsZaTZ5IeaUqibjAgTiag0W6iaDyDg/132","comment_is_top":false,"comment_ctime":1550627928,"is_pvip":false,"replies":[{"id":"26122","content":"你还想看哪些方面的？😊","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1551525423,"ip_address":"","comment_id":68915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550627928","product_id":100017501,"comment_content":"什么时候上新呢？","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439871,"discussion_content":"你还想看哪些方面的？😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551525423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64079,"user_name":"Do","can_delete":false,"product_type":"c1","uid":1313480,"ip_address":"","ucode":"EA11EBD6439D1B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/c8/dae4a360.jpg","comment_is_top":false,"comment_ctime":1548661932,"is_pvip":false,"replies":[{"id":"23143","content":"首先分为2组，是浪费了一倍的空间，不是3倍。<br><br>其次，设置分组是会浪费空间的，浪费空间是为了保证热点问题。<br><br>当然也有一个简单的热点方案就是在每个Nginx上增加一个很小的热点模块，这个模块只会缓存少量的热点商品，例如top1000个热点商品。这样也可以起到一定的保护存在，这样就不用通过分组的实现了，当然采用哪种方式还是要看情况而定","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1549163979,"ip_address":"","comment_id":64079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548661932","product_id":100017501,"comment_content":"你好，在2. 在“02 | 如何才能做好动静分离？有哪些方案可选？一文中，有介绍静态化的方案中关于 Hash 分组的问题。”中varnish是做了分组，分为2组，每组3台机器。我的问题是，分支并且组内多个varnish实例虽然能避免单点和热点问题，但是组内的机器其实存储的数据很大部分是一样的，varnish是单实例部署，实例间没有共享内存，这样会不会导致内存浪费。例如存储1GB的HTTP缓存，那么这个架构的话实际上就是消耗3GB存储，而且以后如果组内需要扩容的话，其实也受制于与单个varnish实例的内存大小，比如原先单个实例是1GB内存进行缓存，发现不够用了需要2GB了，那么需要的话是就只能讲组内的varnish实例的内存都增加的2G，消耗了3G确只提高了1GB的存储量，不像Aerospike或者mongode sharding模式下，增加机器就能提高整个集群的存储量。不知道我的理解对不对","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437848,"discussion_content":"首先分为2组，是浪费了一倍的空间，不是3倍。\n\n其次，设置分组是会浪费空间的，浪费空间是为了保证热点问题。\n\n当然也有一个简单的热点方案就是在每个Nginx上增加一个很小的热点模块，这个模块只会缓存少量的热点商品，例如top1000个热点商品。这样也可以起到一定的保护存在，这样就不用通过分组的实现了，当然采用哪种方式还是要看情况而定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549163979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53957,"user_name":"外星人","can_delete":false,"product_type":"c1","uid":1060406,"ip_address":"","ucode":"4DB01CAE332F02","user_header":"https://static001.geekbang.org/account/avatar/00/10/2e/36/10a11413.jpg","comment_is_top":false,"comment_ctime":1545782076,"is_pvip":false,"replies":[{"id":"19621","content":"排队本身没啥问题，就是觉得没啥必要：）","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1545821641,"ip_address":"","comment_id":53957,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545782076","product_id":100017501,"comment_content":"如果是秒杀1个商品10个库存，服务端请求排队1000个(10倍库存量或更多)，超出1000个直接返回“秒杀结束”，这种方式有啥不好呢？","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434302,"discussion_content":"排队本身没啥问题，就是觉得没啥必要：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545821641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41595,"user_name":"func","can_delete":false,"product_type":"c1","uid":1254534,"ip_address":"","ucode":"481018617F42D8","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/86/6069f169.jpg","comment_is_top":false,"comment_ctime":1542810449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542810449","product_id":100017501,"comment_content":"赞一个","like_count":0}]}