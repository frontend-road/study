{"id":662725,"title":"19｜协同过滤：召回算法中永远不落幕的经典","content":"<p>你好，我是黄鸿波。</p><p>在前面的章节中，我们讲解了数据、算法以及简单的推荐服务，从本章开始，我们将开启一个全新的篇章：算法。本章我们会围绕算法和模型进行展开。</p><p>这节课我们先来讲解协同过滤算法，我将其分为了下面三个部分。</p><ol>\n<li>什么是协同过滤算法、协同过滤算法的基本原理是什么？</li>\n<li>协同过滤算法中的常见问题和弊端。</li>\n<li>搭建一个简单的协同过滤算法。</li>\n</ol><h2><strong>协同过滤算法的基本原理</strong></h2><p>在实际的工程项目中，拿到用户的行为信息对一个线上产品来说非常容易，而如何利用好用户的行为数据才是重中之重。</p><p>在众多捕捉用户行为的推荐算法中，协同过滤算法是最基础也是最重要的算法之一，其核心思想就是对用户历史行为进行处理和挖掘，从而找到用户的喜好，并通过用户所喜好的内容进行召回、推荐。</p><p>我们经常会看到“猜你喜欢”“购买此商品的人也购买了某商品”等功能，这些功能常常就是使用协同过滤算法作为其最基础的召回算法，进行内容信息的召回。</p><p>一般我们可以将协同过滤算法分为两种类型：基于邻域的协同过滤算法和基于模型的协同过滤算法。其中基于邻域的协同过滤算法又包括基于用户的协同过滤算法和基于内容的协同过滤算法。无论采用哪种协同过滤算法，核心思想都一样：<strong>收集用户的行为记录，找到用户的偏好并找到与偏好相似的内容，计算比重再推荐给用户。</strong></p><!-- [[[read_end]]] --><p>本质上，协同过滤算法通过计算用户之间的相似度来预测用户对未知内容的兴趣，相似度计算是协同过滤算法的核心。</p><h3>相似度计算</h3><p>在推荐算法中，常见的相似度计算有以下五种。</p><ol>\n<li>欧氏距离（欧几里得距离）。</li>\n<li>余弦相似度。</li>\n<li>皮尔逊相关系数。</li>\n<li>修正余弦相似度</li>\n<li>Jaccard相似系数。</li>\n</ol><p><strong>欧氏距离</strong></p><p>欧氏距离是最常用的相似度计算方法，最初用于计算欧几里得空间中两个点之间的距离，当然，我们也可以用它来计算平面之间或空间向量中的两点距离。</p><p>一般来讲，每个向量都可以认为是高维空间中的一个点，欧氏距离实际上就是衡量这两个点之间的距离。因为两个点一般都是用坐标来表示，因此我们可以给向量一个相对明确的横坐标和纵坐标。</p><p>假设和是n维空间中的两个点，他们之间的欧式距离如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/b0/29c3deac37e57fd3a50f74392de078b0.png?wh=417x105\" alt=\"图片\"></p><p>一般来讲，我们都是将这些点映射到2维平面进行计算。也就是说在实际过程中，我们通常考虑的是n=2时的距离。当n=2时，欧氏距离就是平面上两个点之间的距离，但是根据上面的公式我们可以发现，得到的结果是一个非负数，最大值是正无穷，而在实际过程中，相似度的取值范围通常在[-1,1]之间，我们可以对他进行求导数将结果转化到(0,1]之间，其相似度计算公式如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/4c/ba2818194c6fa97c28705c5f560a4f4c.png?wh=443x149\" alt=\"图片\"></p><p>我们在推荐系统中做用户画像、分析用户能力模型之间的差异时，使用欧氏距离比较合适。</p><p><strong>余弦相似度</strong></p><p>余弦相似度使用向量空间中的两个向量夹角的余弦值衡量两个个体之间差异的大小，余弦值越接近1，说明两个向量之间的夹角就越小（也就是说明两个向量越相似），我们可以以此来作为度量两个向量之间的相似度，余弦相似度的计算公式如下。</p><p>$similarity=cos(\\theta)=\\frac{A\\cdot B}{||A|| ||B||}=\\frac{\\sum_{i=1}^{n}{A_{i}\\times{B_{i}}}}{\\sqrt{\\sum_{i=1}^{n}{(A_{i})}^{2}}\\times\\sqrt{\\sum_{i=1}^{n}{(B_{i})}^{2}}}$</p><p><strong>皮尔逊相关系数</strong></p><p>皮尔逊相关系数通过计算两个用户之间的共同评分来衡量它们之间的相似度，它的取值范围在-1到1之间，值越接近1表示两个用户越相似，越接近-1则表示两个用户越不相似。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/c7/cd8b7f812b5bbcdcd488992de90336c7.png?wh=1557x221\" alt=\"图片\"></p><p><strong>修正余弦相似度</strong></p><p>修正余弦相似度在计算相似度时加入了用户的偏好偏差，它通过调整评分矩阵每个用户的平均值来计算用户之间的相似度。</p><p>$sim= \\frac{\\sum_{c\\in I_{ij}}^{}{(R_{i,c} - \\bar{R_{i}}) (R_{j,c} - \\bar{R_{j}})}}{\\sqrt{\\sum_{c\\in I_{i}}^{}{(R_{i,c} - \\bar{R_{i}})^{2}}}\\sqrt{\\sum_{c\\in I_{j}}^{}{(R_{j,c} - \\bar{R_{j}})^{2}}}}$</p><p>修正的余弦相似度计算就是用用户均值中心化后的向量进行余弦相似度计算，因为中心化后的值才相对真实反映用户的喜好（即把矩阵中的分数减去对应用户分数的均值）。</p><p>你可以分别看看公式中这些符号的含义。</p><ul>\n<li>$I_{ij}$：用户i与j的公共评分集。</li>\n<li>$I_{i}$：被用户i评分的物品集合。</li>\n<li>$I_{j}$：被用户j评分的物品集合。</li>\n<li>$R_{i,c}$：用户i对物品c的评分。</li>\n<li>$R_{j,c}$：用户j对物品c的评分。</li>\n<li>$\\bar{R_{i}}$：用户i所有评分的均值。</li>\n<li>$\\bar{R_{j}}$：用户j所有评分的均值。</li>\n</ul><p><strong>Jaccard相似系数</strong></p><p>Jaccard相似系数是一种适用于二元评分数据的相似度计算方法，它通过计算两个用户评分交集与评分并集的比值来衡量它们之间的相似度。它的取值范围在0到1之间，值越接近1表示两个用户越相似，越接近0则表示两个用户越不相似。Jaccard相似系数的计算公式如下。</p><p>$J(A,B) = \\frac{|A\\cap B|}{|A\\cup B|}=\\frac{|A\\cap B|}{|A| + |B| - |A\\cap B|}$</p><h3><strong>基于用户的协同过滤</strong></h3><p>我们学习相似度计算实际上就是要学习协同过滤，因为协同过滤中所有计算两两相似的部分，都会用到上面的其中一种方法。</p><p>典型的协同过滤有两种，一种是基于用户的协同过滤，另外一种是基于内容的协同过滤（也叫基于Item的协同过滤），我们首先来看基于用户的协同过滤。</p><p>基于用户的协同过滤（User-Based Collaborative Filtering）通过分析用户之间的相似性来实现推荐。简单来说，就是根据用户的历史行为（比如浏览、购买、评分等）来找到与其兴趣相似的其他用户，然后向该用户推荐这些相似用户喜欢的商品或内容。</p><p>具体的推荐步骤如下。</p><ol>\n<li>为每个用户创建一个兴趣向量，向量中包含该用户浏览、购买、评分等行为对应的商品或内容。</li>\n<li>通过计算用户之间的相似度，找到与目标用户相似度最高的一些用户。</li>\n<li>根据这些相似用户对商品或内容做出的行为，将对应商品或内容推荐给目标用户。</li>\n</ol><p>简单来说，基于用户的协同过滤就是找相似的用户，比如说现在有A、B、C、D四个人，同时有a、b、c、d、e、f这六个物品，这时我们可以做如下假设。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/aa/3a35130dda4d33f49375a6dyy87488aa.jpg?wh=2862x1778\" alt=\"\"></p><p>我们以商品的角度，会出现以下结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/ef/5e0a94e15be9f6f1915e199076b63bef.jpg?wh=2388x2000\" alt=\"\"></p><p>这时，我们就可以给它再转化成一个用户喜欢物品的共现矩阵。</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/3e/c3d35a125b37eb89cb3ae93a42c9ee3e.jpg?wh=3000x1160\" alt=\"\"></p><p>这里简单解释一下，A和B有1个同时喜欢的物品，所以这里是1分。同样A和C有2个同时喜欢的物品，所以这里记了2分，以此类推，就可以把所有的得分记录出来。</p><p>这个时候我们可以发现，A和C有2个共同喜欢的物品，所以他们的相似度最高。A和B、A和D、B和D、C和D都有相同喜欢的物品，所以他们的相似度一样。我们再使用一些相似度计算方法，就可以得出A、B、C、D四个用户的相似度关系，从而进行推荐。</p><p>基于用户的协同过滤算法的优点在于能够捕捉用户的偏好和行为模式，同时也比较容易实现和解释。但该算法也存在一些缺点，如用户数量较多时计算量大、推荐结果容易出现重复等。</p><h3><strong>基于内容的协同过滤</strong></h3><p>基于内容的协同过滤（Item-Based Collaborative Filtering）与基于用户的协同过滤类似，但是其推荐的对象不是与目标用户相似的其他用户，而是与该用户曾经感兴趣的内容相似的其他内容。</p><p>该算法具体的推荐步骤如下。</p><ol>\n<li>为每个内容创建一个分类向量，向量中包含了该内容与其他内容的相似度。</li>\n<li>根据用户曾经感兴趣的内容，找到这些内容与哪些其他内容相似度比较高。</li>\n<li>将这些相似度高的内容推荐给目标用户。</li>\n</ol><p>我们再拿上面的表格来举例。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/aa/3a35130dda4d33f49375a6dyy87488aa.jpg?wh=2862x1778\" alt=\"\"></p><p>实际上我们只需要在计算维度上变化一下，结果就会发生改变。上面的表格可以变成下面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/3f/0c10f42fdddfe876618075c6a3b2af3f.jpg?wh=3000x1160\" alt=\"\"></p><p>这个时候我们可以发现，如果站在内容的角度上，我们就能够知道内容之间被喜欢的共现矩阵，这样，我们以此来计算出内容的相似度。</p><p>我们用a和b之间的相似度计算来举例。a和b的共现次数为2，喜欢a的用户数是3，喜欢b的用户数是2，那么我们可以计算出ab的相似度如下。</p><p>$W_{ab}=\\frac{C[a][b]}{\\sqrt{N(a)*N(b)}}=\\frac{2}{6}=0.33$</p><p>基于内容的协同过滤算法优点在于能够充分利用内容之间的相似性，同时也较为高效。该算法还可以解决基于用户的协同过滤算法存在的“冷启动”问题——当新用户加入系统时，由于其历史行为较少，基于用户的协同过滤算法的准确性可能不高。</p><h2><strong>协同过滤算法的优点和常见问题</strong></h2><p>了解协同过滤算法的基本原理后，我们来整体看看它的优缺点。</p><h3><strong>协同过滤算法优点</strong></h3><p><strong>1</strong><strong>.</strong><strong>个性化推荐</strong></p><p>协同过滤算法基于用户历史行为数据或者评分数据来推荐内容，在这里，实际上我们找的就是用户与用户、内容与内容之间的交叉的矩阵信息，通过交叉的矩阵信息再结合相似度计算，就能够拿到各种用户可能喜欢的内容，因此在一定程度上可以满足用户的个性化需求。</p><p><strong>2</strong><strong>.</strong><strong>没有约束条件</strong></p><p>协同过滤算法没有固定的约束条件，可以应用于各种形式的数据，包括评分数据、行为数据和社交网络数据。比如目前特征相对较少，只有用户浏览过的新闻内容，这个时候我们可以用协同过滤来做。</p><p><strong>3</strong><strong>.</strong><strong>灵活性较高</strong></p><p>协同过滤算法可以适应不同的数据集和算法改进，可以通过调整相似度计算方法、加入时间衰减因素、增加用户/内容属性等方式来提升推荐效果。</p><p><strong>4</strong><strong>.</strong><strong>可扩展性较好</strong></p><p>协同过滤算法不需要事先对数据进行分类或者标签，适用于大规模数据处理，也便于在以后增加新数据进行模型的更新和扩展。</p><p><strong>5</strong><strong>.</strong><strong>算法效果较好</strong></p><p>对于评分数据而言，协同过滤算法具有较高的准确性和预测能力，在实际推荐中能够取得应用效果，可以满足大多数的推荐需求。</p><p></p><p></p><h3><strong>协同过滤算法的缺点</strong></h3><p><strong>1</strong><strong>.</strong><strong>稀疏性问题</strong></p><p>协同过滤算法需要构建用户评分或者行为矩阵，而实际上很多用户只会对部分内容进行评分或者行为，这会导致评分矩阵很稀疏，很难找到具有高度相关性的用户或内容来做准确预测。</p><p><strong>2</strong><strong>.</strong><strong>冷启动问题</strong></p><p>当新增用户或者内容时，协同过滤算法很难做出准确的推荐。因为新用户没有足够的历史行为数据，无法找到可以跟他们相关的其他用户或内容进行推荐。同样，新内容也没有足够的历史行为数据，很难找到具有相似特征的内容来做推荐。</p><p><strong>3</strong><strong>.</strong><strong>数据稳定性问题</strong></p><p>协同过滤算法基于历史行为数据来做推荐，而用户的兴趣会随着时间发生变化，这会带来数据的不稳定性，导致历史数据无法准确反映当前的用户兴趣，导致推荐结果不准确。</p><p><strong>4</strong><strong>.</strong><strong>算法适用性问题</strong></p><p>协同过滤算法基于人与人之间的相似性（或内容之间的相似性）做推荐，但并不是所有的推荐场景都适用于这种算法。比如当用户需要一些全局性的推荐时，基于局部相似性的协同过滤算法就无法很好地完成任务。</p><p></p><h2><strong>搭建一个简单的协同过滤算法</strong></h2><p>在对协同过滤算法有了一个基本的了解之后，接下来我们来搭建一个简单的基于Item的协调过滤算法。</p><p>回顾一下，到目前为止我们整个系统的工程有以下三个项目。</p><ol>\n<li>爬虫项目，主要是用来爬取用户的数据。</li>\n<li>推荐算法的主项目，里面包含了各种数据处理、推荐算法等等。</li>\n<li>推荐服务项目，也就是如何将我们的数据推荐给用户，这里面就会涉及给前端的接口等。</li>\n</ol><p>接下来我们主要会用到前面的推荐算法主项目，也就是recommendation-class这个项目。</p><p>对于基于Item的协同过滤算法，我们要做的就是两件事，第一个是计算基于Item的相似度矩阵，第二个是给用户进行推荐结果的计算。</p><p>我们先来看计算协同过滤矩阵部分代码。</p><pre><code class=\"language-plain\">def cf_item_train(self):\n\t\"\"\"\n\treturn:相似度矩阵：{content_id:{content_id:score}}\n\t\"\"\"\n\tprint(\"start train\")\n\tself.item_to_item, self.item_count = dict(), dict()\n&nbsp;\n\tfor user, items in self.train.items():\n\t\tfor i in items.keys():\n\t\t\tself.item_count.setdefault(i, 0)\n\t\t\tself.item_count[i] += 1 &nbsp;# item i 出现一次就加1分\n&nbsp;\n\tfor user, items in self.train.items():\n\t\tfor i in items.keys():\n\t\t\tself.item_to_item.setdefault(i, {})\n\t\t\tfor j in items.keys():\n\t\t\t\tif i == j:\n\t\t\t\t\tcontinue\n\t\t\t\tself.item_to_item[i].setdefault(j, 0)\n\t\t\t\tself.item_to_item[i][j] += 1 / (\n\t\t\t\t\tmath.sqrt(self.item_count[i] + self.item_count[j])) # item i 和 j 共现一次就加1\n&nbsp;\n\t# 计算相似度矩阵\n\tfor _item in self.item_to_item:\n\t\tself.item_to_item[_item] = dict(sorted(self.item_to_item[_item].items(),\n\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;key=lambda x: x[1], reverse=True)[0:30])\n</code></pre><p>简单解释下这段代码，它实现了一个协同过滤算法中的Item-based推荐算法的训练函数，代码主要流程如下。</p><ol>\n<li>遍历每个用户和该用户对应的所有内容，统计每个内容被多少个用户使用。</li>\n<li>遍历每个用户和该用户对应的所有内容，对于每个内容&nbsp;i，遍历该用户已阅读过的所有其它内容&nbsp;j。如果 i 和 j 不相同，则将内容&nbsp;i 和内容&nbsp;j 之间的相似度计算出来，并存储在字典 self.item_to_item 中。</li>\n<li>对于self.item_to_item中的每个内容&nbsp;i，将其与其他所有内容的相似度按照从大到小的顺序排序，并只保留前30个最相似的内容。</li>\n</ol><p>具体来说，self.item_to_item是一个字典，其中每个键值对表示一个内容及其相似的其他内容，如：{内容1:{内容2:相似度, 内容3: 相似度, …}, 内容4:{内容5:相似度, 内容6: 相似度, …}, …}。</p><p>而self.item_count是另一个字典，用于存储每个内容出现的次数。 该函数最终返回一个相似度矩阵self.item_to_item，该矩阵将所有内容两两之间的相似度计算出来，并只保留每个内容与前30个最相似内容的相似度。这个相似度矩阵可以作为 item-based 推荐算法的依据，用于计算每个用户对未使用过内容的预测评分。</p><p>当我们需要推理的时候，则会传入user_id，然后通过user_id来找对应的推荐的内容，具体代码如下。</p><pre><code class=\"language-plain\">def cal_rec_item(self, user, N=5):\n\t\"\"\"\n\t给用户user推荐前N个感兴趣的文章\n\t:param user:\n\t:param N:\n\t:return: &nbsp;推荐的文章的列表\n\t\"\"\"\n\trank = dict()\n\ttry:\n\t\taction_item = self.train[user]\n\t\tfor item, score in action_item.items():\n\t\t&nbsp;&nbsp;for j, wj in self.item_to_item[item].items():\n\t\t\tif j in action_item.keys(): #如果文章j已经被阅读过了，那么我们就不会去推荐了\n\t\t\t\tcontinue\n\t\t\trank.setdefault(j, 0)\n\t\t\trank[j] += score * wj / 10000\n&nbsp;\n\t\tres = dict(sorted(rank.items(), key=lambda x:x[1], reverse=True)[0:N])\n\t\tprint(res)\n\t\treturn res\n&nbsp;\n\texcept:\n\t\treturn {}\n</code></pre><p>简单解释下这一段代码，函数cal_rec_item实现的是给用户推荐感兴趣的文章，参数user表示用户，N表示推荐的文章数目。</p><p>具体可以分为以下五步。</p><ol>\n<li>将用户的历史浏览记录存储在self.train中，action_item表示用户user的历史行为。</li>\n<li>遍历用户的历史行为，对于每个行为中浏览过的文章Item，找到与该文章相关性较高的其他文章j。</li>\n<li>计算文章j的推荐得分rank[j]，得分为用户对文章Item的评分score与文章Item与文章j的相关性wj的乘积。其中wj是Item和j的相似度，计算方式可以是基于协同过滤的相似度计算算法。</li>\n<li>将所有推荐文章的得分按照从大到小的顺序排序，取前N篇文章作为推荐结果。排序使用sorted函数进行，其中的key参数表示以每个元素的第二个值（即文章得分）进行排序，reverse=True表示从大到小排序。</li>\n<li>将推荐结果存储在字典res中，返回给用户。如果用户没有历史行为，返回空字典。</li>\n</ol><p>到这里，实际上我们已经把基于Item的协同过滤代码主逻辑部分写完了。在后面的课程中，我会把数据处理和整个流程串起来，形成一个完整的推荐系统流程。</p><p></p><h2>总结</h2><p>我们来做一个总结。学完本节课，你应该知道以下五个要点。</p><ol>\n<li>协同过滤是一类基于用户行为的推荐算法，该算法的核心思想是利用用户的历史行为数据，推荐其可能会感兴趣的内容。</li>\n<li>基于用户的协同过滤算法是通过寻找和目标用户口味类似的其他用户，推荐这些用户喜欢的物品给目标用户。</li>\n<li>基于物品的协同过滤算法是通过寻找和目标物品相似的其他物品，推荐这些相似物品给目标用户。</li>\n<li>协同过滤算法是推荐系统中应用广泛的算法之一，其优点在于不需事先获知物品的内容和属性。缺点是当用户和物品都很多时算法复杂度会很高，且算法受数据稀疏性的影响较大。</li>\n<li>熟悉如何通过Python实现一个简单的协同过滤算法。</li>\n</ol><h2>课后练习</h2><p>学完本节课的内容，给你留两个小作业。</p><ol>\n<li>实现基于Item的协调过滤算法。</li>\n<li>想一想，我们的数据集要怎么建立，并且怎么传入到这两个函数中。</li>\n</ol><p>欢迎你在留言区与我交流讨论，如果这节课对你有帮助，也欢迎你推荐给朋友一起学习。</p>","neighbors":{"left":{"article_title":"18｜一个简单的推荐服务闭环包括哪些模块？","id":662204},"right":{"article_title":"20｜Embedding：深入挖掘用户底层特征","id":663444}},"comments":[{"had_liked":false,"id":380221,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"北京","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/45ffdca3.jpg","comment_is_top":false,"comment_ctime":1693219684,"is_pvip":false,"replies":[{"id":140001,"content":"一般来讲，对于这种比较大的并发量，我们采用的是分布式的计算方式，而不是一台机器就可以胜任的，具体配置主要是根据你的实际情况来。","user_name":"作者回复","user_name_real":"编辑","uid":1982950,"ctime":1699860132,"ip_address":"广东","comment_id":380221,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"我在想一个问题，如果是成百万或上千万甚至更多级别的文章，再加上上百万甚至千万级别的用户，这么打循环计算，需要什么样的服务器才可以胜任？","like_count":2,"discussions":[{"author":{"id":1982950,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/41/e6/beb42103.jpg","nickname":"黄鸿波","note":"","ucode":"5EB4E6946A363C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631635,"discussion_content":"一般来讲，对于这种比较大的并发量，我们采用的是分布式的计算方式，而不是一台机器就可以胜任的，具体配置主要是根据你的实际情况来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699860132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375312,"user_name":"翡翠虎","can_delete":false,"product_type":"c1","uid":1448015,"ip_address":"广西","ucode":"2572E93C4C57A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/4f/9e4d5591.jpg","comment_is_top":false,"comment_ctime":1685320928,"is_pvip":false,"replies":[{"id":140026,"content":"在每天新增大量文章的情况下，一次性对所有文章进行相似度计算可能会非常耗时和占用大量的计算资源。为了提高计算效率，可以考虑以下几种方法：\n\n增量计算：每天新增的文章可能只是整个文集的一小部分，可以采用增量计算的方式，只计算新增文章与已有文章之间的相似度。这样可以大大减少计算量，只需对新增文章进行相似度计算，而不是对整个文集重新计算。\n\n分布式计算：可以使用分布式计算的框架（如Hadoop、Spark等）来进行相似度计算。将文章数据分割成多个分区，利用多台计算机并行计算各个分区之间的相似度，最后再合并结果。这样可以利用集群的计算能力，提高计算速度和处理大规模数据的能力。\n\n近似相似度计算：在实际应用中，并不需要精确的相似度计算。可以考虑使用一些近似相似度计算的方法（如LSH、MinHash等），通过降低计算复杂度来快速估计文章之间的相似度。这些方法通过哈希函数或采样的方式进行相似度计算，可以在保证一定准确性的情况下，大大降低计算成本。\n\n综合考虑以上方法，可以根据具体的场景和需求选择合适的方法来进行相似度计算。例如，如果对实时性要求较高，可以采用增量计算；如果需要处理海量数据，则可以考虑分布式计算；如果计算复杂度过高，可以尝试近似相似度计算。另外，还可以结合缓存机制和索引技术来提高相似度计算的效率，以满足实际需求。","user_name":"作者回复","user_name_real":"编辑","uid":1982950,"ctime":1699860719,"ip_address":"广东","comment_id":375312,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"每天新增很多（几十万篇）文章的情况下，怎么做相似度计算呢？是一次性批量计算相似度还是有别的方法？","like_count":1,"discussions":[{"author":{"id":1982950,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/41/e6/beb42103.jpg","nickname":"黄鸿波","note":"","ucode":"5EB4E6946A363C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631660,"discussion_content":"在每天新增大量文章的情况下，一次性对所有文章进行相似度计算可能会非常耗时和占用大量的计算资源。为了提高计算效率，可以考虑以下几种方法：\n\n增量计算：每天新增的文章可能只是整个文集的一小部分，可以采用增量计算的方式，只计算新增文章与已有文章之间的相似度。这样可以大大减少计算量，只需对新增文章进行相似度计算，而不是对整个文集重新计算。\n\n分布式计算：可以使用分布式计算的框架（如Hadoop、Spark等）来进行相似度计算。将文章数据分割成多个分区，利用多台计算机并行计算各个分区之间的相似度，最后再合并结果。这样可以利用集群的计算能力，提高计算速度和处理大规模数据的能力。\n\n近似相似度计算：在实际应用中，并不需要精确的相似度计算。可以考虑使用一些近似相似度计算的方法（如LSH、MinHash等），通过降低计算复杂度来快速估计文章之间的相似度。这些方法通过哈希函数或采样的方式进行相似度计算，可以在保证一定准确性的情况下，大大降低计算成本。\n\n综合考虑以上方法，可以根据具体的场景和需求选择合适的方法来进行相似度计算。例如，如果对实时性要求较高，可以采用增量计算；如果需要处理海量数据，则可以考虑分布式计算；如果计算复杂度过高，可以尝试近似相似度计算。另外，还可以结合缓存机制和索引技术来提高相似度计算的效率，以满足实际需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699860719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375917,"user_name":"alexliu","can_delete":false,"product_type":"c1","uid":1112019,"ip_address":"上海","ucode":"DD65983BBC9CD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/d3/2bbc62b2.jpg","comment_is_top":false,"comment_ctime":1686126297,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"&quot;a 和 b 的共现次数为 2，喜欢 a 的用户数是 3，喜欢 b 的用户数是 2，那么我们可以计算出 ab 的相似度 2&#47;6=0.33&quot;\n这里是不是应该对6开根号？相似度应该是2&#47;sqrt(6)=0.81吧","like_count":3},{"had_liked":false,"id":387647,"user_name":"锐","can_delete":false,"product_type":"c1","uid":1110915,"ip_address":"广东","ucode":"A245BA96C9471F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/83/e2612d81.jpg","comment_is_top":false,"comment_ctime":1708322599,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"请教老师，如果要过滤用户已读文章，而用户已读几十万篇甚至更多，召回时怎么处理效率更高？","like_count":0,"discussions":[{"author":{"id":2948431,"avatar":"","nickname":"Geek_bc9832","note":"","ucode":"30D50E13AB2DE6","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655360,"discussion_content":"用redis的bitmap吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734683257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375585,"user_name":"Geek_ccc0fd","can_delete":false,"product_type":"c1","uid":1461544,"ip_address":"广东","ucode":"DB53D576AEC020","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/EaBxhibOicZe9L7z2icbU4W462l543drFWYqibqczTicj4Msyb2g9pDSGmFTiafW9jibwib7jG6hpAdPMcCowdCiaxHaOdA/132","comment_is_top":false,"comment_ctime":1685692294,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"问题2：数据集就是user-item的交互行为日志，然后group by user得到每个用户点击&#47;点赞&#47;收藏过的item_list，传入我们的函数中做相似度计算，这里还可以根据行为的不同做加权","like_count":0},{"had_liked":false,"id":375427,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1685454775,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"Q1：相似度的计算有多种方法，一个网站会应用多种方法吗？\nQ2：相似度计算的规模，或者说矩阵的规模，一般多大？\nQ3：对于一个用户的相似度的计算，网站多久更新一次？\nQ4：一个网站后端是用Java开发的，计算相似度的时候，会采用Java吗？有观点认为Java计算慢，是否会采用速度更快的？ 比如C、C++，或者python？","like_count":0}]}