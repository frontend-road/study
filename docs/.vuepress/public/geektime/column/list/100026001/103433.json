{"id":103433,"title":"27 | SIMD：如何加速矩阵乘法？","content":"<p>上一讲里呢，我进一步为你讲解了CPU里的“黑科技”，分别是超标量（Superscalar）技术和超长指令字（VLIW）技术。</p><p>超标量（Superscalar）技术能够让取指令以及指令译码也并行进行；在编译的过程，超长指令字（VLIW）技术可以搞定指令先后的依赖关系，使得一次可以取一个指令包。</p><p>不过，CPU里的各种神奇的优化我们还远远没有说完。这一讲里，我就带你一起来看看，专栏里最后两个提升CPU性能的架构设计。它们分别是，你应该常常听说过的<strong>超线程</strong>（Hyper-Threading）技术，以及可能没有那么熟悉的<strong>单指令多数据流</strong>（SIMD）技术。</p><h2>超线程：Intel多卖给你的那一倍CPU</h2><p>不知道你是不是还记得，在<a href=\"https://time.geekbang.org/column/article/100554\">第21讲</a>，我给你介绍了Intel是怎么在Pentium 4处理器上遭遇重大失败的。如果不太记得的话，你可以回过头去回顾一下。</p><p>那时我和你说过，Pentium 4失败的一个重要原因，就是它的CPU的流水线级数太深了。早期的Pentium 4的流水线深度高达20级，而后期的代号为Prescott的Pentium 4的流水线级数，更是到了31级。超长的流水线，使得之前我们讲的很多解决“冒险”、提升并发的方案都用不上。</p><!-- [[[read_end]]] --><p>因为这些解决“冒险”、提升并发的方案，本质上都是一种<strong>指令级并行</strong>（Instruction-level parallelism，简称IPL）的技术方案。换句话说就是，CPU想要在同一个时间，去并行地执行两条指令。而这两条指令呢，原本在我们的代码里，是有先后顺序的。无论是我们在流水线里面讲到的流水线架构、分支预测以及乱序执行，还是我们在上一讲说的超标量和超长指令字，都是想要通过同一时间执行两条指令，来提升CPU的吞吐率。</p><p>然而在Pentium 4这个CPU上，这些方法都可能因为流水线太深，而起不到效果。我之前讲过，更深的流水线意味着同时在流水线里面的指令就多，相互的依赖关系就多。于是，很多时候我们不得不把流水线停顿下来，插入很多NOP操作，来解决这些依赖带来的“冒险”问题。</p><p>不知道是不是因为当时面临的竞争太激烈了，为了让Pentium 4的CPU在性能上更有竞争力一点，2002年底，Intel在的3.06GHz主频的Pentium 4 CPU上，第一次引入了<strong>超线程</strong>（Hyper-Threading）技术。</p><p>什么是超线程技术呢？Intel想，既然CPU同时运行那些在代码层面有前后依赖关系的指令，会遇到各种冒险问题，我们不如去找一些和这些指令完全独立，没有依赖关系的指令来运行好了。那么，这样的指令哪里来呢？自然同时运行在另外一个程序里了。</p><p>你所用的计算机，其实同一个时间可以运行很多个程序。比如，我现在一边在浏览器里写这篇文章，后台同样运行着一个Python脚本程序。而这两个程序，是完全相互独立的。它们两个的指令完全并行运行，而不会产生依赖问题带来的“冒险”。</p><p>然而这个时候，你可能就会觉得奇怪了，这么做似乎不需要什么新技术呀。现在我们用的CPU都是多核的，本来就可以用多个不同的CPU核心，去运行不同的任务。即使当时的Pentium 4是单核的，我们的计算机本来也能同时运行多个进程，或者多个线程。这个超线程技术有什么特别的用处呢？</p><p>无论是上面说的多个CPU核心运行不同的程序，还是在单个CPU核心里面切换运行不同线程的任务，在同一时间点上，一个物理的CPU核心只会运行一个线程的指令，所以其实我们并没有真正地做到指令的并行运行。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/c8/96aa1220ff27776f55091c55c2eddbc8.jpeg?wh=2665*736\" alt=\"\"></p><p>超线程可不是这样。超线程的CPU，其实是把一个物理层面CPU核心，“伪装”成两个逻辑层面的CPU核心。这个CPU，会在硬件层面增加很多电路，使得我们可以在一个CPU核心内部，维护两个不同线程的指令的状态信息。</p><p>比如，在一个物理CPU核心内部，会有双份的PC寄存器、指令寄存器乃至条件码寄存器。这样，这个CPU核心就可以维护两条并行的指令的状态。在外面看起来，似乎有两个逻辑层面的CPU在同时运行。所以，超线程技术一般也被叫作<strong>同时多线程</strong>（Simultaneous Multi-Threading，简称SMT）技术<strong>。</strong></p><p>不过，在CPU的其他功能组件上，Intel可不会提供双份。无论是指令译码器还是ALU，一个CPU核心仍然只有一份。因为超线程并不是真的去同时运行两个指令，那就真的变成物理多核了。超线程的目的，是在一个线程A的指令，在流水线里停顿的时候，让另外一个线程去执行指令。因为这个时候，CPU的译码器和ALU就空出来了，那么另外一个线程B，就可以拿来干自己需要的事情。这个线程B可没有对于线程A里面指令的关联和依赖。</p><p>这样，CPU通过很小的代价，就能实现“同时”运行多个线程的效果。通常我们只要在CPU核心的添加10%左右的逻辑功能，增加可以忽略不计的晶体管数量，就能做到这一点。</p><p>不过，你也看到了，我们并没有增加真的功能单元。所以超线程只在特定的应用场景下效果比较好。一般是在那些各个线程“等待”时间比较长的应用场景下。比如，我们需要应对很多请求的数据库应用，就很适合使用超线程。各个指令都要等待访问内存数据，但是并不需要做太多计算。</p><p>于是，我们就可以利用好超线程。我们的CPU计算并没有跑满，但是往往当前的指令要停顿在流水线上，等待内存里面的数据返回。这个时候，让CPU里的各个功能单元，去处理另外一个数据库连接的查询请求就是一个很好的应用案例。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/e5/759b55d8acdc6f69d0b711f4f62ad4e5.png?wh=409*412\" alt=\"\"></p><center><span class=\"reference\">我的移动工作站的CPU信息</span></center><p>我这里放了一张我的电脑里运行CPU-Z的截图。你可以看到，在右下角里，我的CPU的Cores，被标明了是4，而Threads，则是8。这说明我手头的这个CPU，只有4个物理的CPU核心，也就是所谓的4核CPU。但是在逻辑层面，它“装作”有8个CPU核心，可以利用超线程技术，来同时运行8条指令。如果你用的是Windows，可以去下载安装一个<a href=\"https://www.cpuid.com/softwares/cpu-z.html\">CPU-Z</a>来看看你手头的CPU里面对应的参数。</p><h2>SIMD：如何加速矩阵乘法？</h2><p>在上面的CPU信息的图里面，你会看到，中间有一组信息叫作Instructions，里面写了有MMX、SSE等等。这些信息就是这个CPU所支持的指令集。这里的MMX和SSE的指令集，也就引出了我要给你讲的最后一个提升CPU性能的技术方案，<strong>SIMD</strong>，中文叫作<strong>单指令多数据流</strong>（Single Instruction Multiple Data）。</p><p>我们先来体会一下SIMD的性能到底怎么样。下面是两段示例程序，一段呢，是通过循环的方式，给一个list里面的每一个数加1。另一段呢，是实现相同的功能，但是直接调用NumPy这个库的add方法。在统计两段程序的性能的时候，我直接调用了Python里面的timeit的库。</p><pre><code>$ python\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; a = list(range(1000))\n&gt;&gt;&gt; b = np.array(range(1000))\n&gt;&gt;&gt; timeit.timeit(&quot;[i + 1 for i in a]&quot;, setup=&quot;from __main__ import a&quot;, number=1000000)\n32.82800309999993\n&gt;&gt;&gt; timeit.timeit(&quot;np.add(1, b)&quot;, setup=&quot;from __main__ import np, b&quot;, number=1000000)\n0.9787889999997788\n&gt;&gt;&gt;\n</code></pre><p>从两段程序的输出结果来看，你会发现，两个功能相同的代码性能有着巨大的差异，足足差出了30多倍。也难怪所有用Python讲解数据科学的教程里，往往在一开始就告诉你不要使用循环，而要把所有的计算都向量化（Vectorize）。</p><p>有些同学可能会猜测，是不是因为Python是一门解释性的语言，所以这个性能差异会那么大。第一段程序的循环的每一次操作都需要Python解释器来执行，而第二段的函数调用是一次调用编译好的原生代码，所以才会那么快。如果你这么想，不妨试试直接用C语言实现一下1000个元素的数组里面的每个数加1。你会发现，即使是C语言编译出来的代码，还是远远低于NumPy。原因就是，NumPy直接用到了SIMD指令，能够并行进行向量的操作。</p><p>而前面使用循环来一步一步计算的算法呢，一般被称为<strong>SISD</strong>，也就是<strong>单指令单数据</strong>（Single Instruction Single Data）的处理方式。如果你手头的是一个多核CPU呢，那么它同时处理多个指令的方式可以叫作<strong>MIMD</strong>，也就是<strong>多指令多数据</strong>（Multiple Instruction Multiple Dataa）。</p><p>为什么SIMD指令能快那么多呢？这是因为，SIMD在获取数据和执行指令的时候，都做到了并行。一方面，在从内存里面读取数据的时候，SIMD是一次性读取多个数据。</p><p>就以我们上面的程序为例，数组里面的每一项都是一个integer，也就是需要 4 Bytes的内存空间。Intel在引入SSE指令集的时候，在CPU里面添上了8个 128 Bits的寄存器。128 Bits也就是 16 Bytes ，也就是说，一个寄存器一次性可以加载 4 个整数。比起循环分别读取4次对应的数据，时间就省下来了。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/a6/48ddcd5ac345091c1be5963d5ef7d7a6.jpeg?wh=2977*2086\" alt=\"\"></p><p>在数据读取到了之后，在指令的执行层面，SIMD也是可以并行进行的。4个整数各自加1，互相之前完全没有依赖，也就没有冒险问题需要处理。只要CPU里有足够多的功能单元，能够同时进行这些计算，这个加法就是4路同时并行的，自然也省下了时间。</p><p>所以，对于那些在计算层面存在大量“数据并行”（Data Parallelism）的计算中，使用SIMD是一个很划算的办法。在这个大量的“数据并行”，其实通常就是实践当中的向量运算或者矩阵运算。在实际的程序开发过程中，过去通常是在进行图片、视频、音频的处理。最近几年则通常是在进行各种机器学习算法的计算。</p><p>而基于SIMD的向量计算指令，也正是在Intel发布Pentium处理器的时候，被引入的指令集。当时的指令集叫作<strong>MMX</strong>，也就是Matrix Math eXtensions的缩写，中文名字就是<strong>矩阵数学扩展</strong>。而Pentium处理器，也是CPU第一次有能力进行多媒体处理。这也正是拜SIMD和MMX所赐。</p><p>从Pentium时代开始，我们能在电脑上听MP3、看VCD了，而不用专门去买一块“声霸卡”或者“显霸卡”了。没错，在那之前，在电脑上看VCD，是需要专门买能够解码VCD的硬件插到电脑上去的。而到了今天，通过GPU快速发展起来的深度学习技术，也一样受益于SIMD这样的指令级并行方案，在后面讲解GPU的时候，我们还会遇到它。</p><h2>总结延伸</h2><p>这一讲，我们讲完了超线程和SIMD这两个CPU的“并行计算”方案。超线程，其实是一个“线程级并行”的解决方案。它通过让一个物理CPU核心，“装作”两个逻辑层面的CPU核心，使得CPU可以同时运行两个不同线程的指令。虽然，这样的运行仍然有着种种的限制，很多场景下超线程并不一定能带来CPU的性能提升。但是Intel通过超线程，让使用者有了“占到便宜”的感觉。同样的4核心的CPU，在有些情况下能够发挥出8核心CPU的作用。而超线程在今天，也已经成为Intel CPU的标配了。</p><p>而SIMD技术，则是一种“指令级并行”的加速方案，或者我们可以说，它是一种“数据并行”的加速方案。在处理向量计算的情况下，同一个向量的不同维度之间的计算是相互独立的。而我们的CPU里的寄存器，又能放得下多条数据。于是，我们可以一次性取出多条数据，交给CPU并行计算。</p><p>正是SIMD技术的出现，使得我们在Pentium时代的个人PC，开始有了多媒体运算的能力。可以说，Intel的MMX、SSE指令集，和微软的Windows 95这样的图形界面操作系统，推动了PC快速进入家庭的历史进程。</p><h2>推荐阅读</h2><p>如果你想看一看Intel CPU里面的SIMD指令具体长什么样，可以去读一读《计算机组成与设计：硬件/软件接口》的3.7章节。</p><h2>课后思考</h2><p>最后，给你留一道思考题。超线程这样的技术，在什么样的应用场景下最高效？你在自己开发系统的过程中，是否遇到超线程技术为程序带来性能提升的情况呢？</p><p>欢迎留言和我分享你的疑惑和见解。你也可以把今天的内容，分享给你的朋友，和他一起学习和进步。</p><p></p>","comments":[{"had_liked":false,"id":139591,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1570686545,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"108944868945","product_id":100026001,"comment_content":"超线程技术是伪装成2个核心，在期中一个“线程”需要等待的时候去执行另一个“线程”，因此比较适合并发大量IO的操作","like_count":26,"discussions":[{"author":{"id":2413481,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d3/a9/2b84cc97.jpg","nickname":"Linux C·Core Api","note":"","ucode":"E370F0627E8B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583499,"discussion_content":"明白了。第一个线程等待时候，第二个线程补充上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660144835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143109,"user_name":"westfall","can_delete":false,"product_type":"c1","uid":1632773,"ip_address":"","ucode":"F3F5CB7DF695FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/05/b164dc15.jpg","comment_is_top":false,"comment_ctime":1571632009,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"100355879817","product_id":100026001,"comment_content":"那我们平时写的程序怎么直接使用SIMD指令呢？","like_count":23,"discussions":[{"author":{"id":1180460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/2c/33ba4d12.jpg","nickname":"山中无老虎 😪","note":"","ucode":"594247C3A976DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350485,"discussion_content":"https://www.zhihu.com/question/267178154","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1613893221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2413071,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d2/0f/8f14c85b.jpg","nickname":"红薯板栗","note":"","ucode":"236BE91291A575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350870,"discussion_content":"c++ 下有个头文件，immintrin.h","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614059368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145054,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1572172831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57406747679","product_id":100026001,"comment_content":"---总结---<br>为了提高没有依赖关系的指令间的并行性，引入了超线程技术。<br>超线程技术：在硬件层面为每个线程设立单独的PC寄存器、指令寄存器、条件码寄存器等线程相关硬件，从而让一个CPU物理核心中有多个逻辑核心的目的。这样当一个线程在流水线中停顿时，另一个线程就可以去执行指令。<br>从超线程技术中可以看到，软件层面概念的提出也会影响到硬件层面的设计，而结合硬件条件也能更好地指导软件设计。<br>为了针对可向量化的计算提供进一步的优化，引入了SIMD。<br>SIMD：利用单个指令读取并操作多个数据流的方式加大并行化程度。","like_count":14},{"had_liked":false,"id":166014,"user_name":"任鹏斌","can_delete":false,"product_type":"c1","uid":1104086,"ip_address":"","ucode":"34319B05EA6E74","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg","comment_is_top":false,"comment_ctime":1577362283,"is_pvip":false,"replies":[{"id":"68132","content":"任鹏斌同学，<br><br>你好，可以啊，通过JNI，或者本身编译器会做自动向量化<br>可以去看看知乎上的这个回答<br>https:&#47;&#47;www.zhihu.com&#47;question&#47;267178154&#47;answer&#47;348228410","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580650774,"ip_address":"","comment_id":166014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35937100651","product_id":100026001,"comment_content":"java有办法使用到SIMD指令集吗？","like_count":8,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479350,"discussion_content":"任鹏斌同学，\n\n你好，可以啊，通过JNI，或者本身编译器会做自动向量化\n可以去看看知乎上的这个回答\nhttps://www.zhihu.com/question/267178154/answer/348228410","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580650774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107945,"user_name":"易儿易","can_delete":false,"product_type":"c1","uid":1242864,"ip_address":"","ucode":"B15D1031CA841E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","comment_is_top":false,"comment_ctime":1561638002,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27331441778","product_id":100026001,"comment_content":"终于知道为什么挖矿烧显卡啦～","like_count":6,"discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375793,"discussion_content":"&#34;矿&#34;本身就是为计算机设计的数学题，无论CPU还是GPU，计算量都极大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621850318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208556,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1587380524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18767249708","product_id":100026001,"comment_content":"加速矩阵乘法:<br>超线程:超线程CPU其实就是把一个月物理层面的CPU核心，伪装成两个逻辑层面的CPU核心。在硬件层面增加一部分指令，在内部维持两个指令的状态信息。比如有两个PC寄存器，指令寄存器和条件吗寄存器，这样就可以维护两条并行的指令。但事实上并不是真的运行两条指令，只是在一条指令停顿的时候运行另一条指令。<br>SIMD单指令多数据流:区别于单指令单数据流（简单的一步一步执行）和多指令多数据流（多核运行）。而SIMD为什么快，是因为他在取指令和执行指令的阶段都做到了并行","like_count":4},{"had_liked":false,"id":176010,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1350446,"ip_address":"","ucode":"56E8AD725D9D1A","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/2e/7c749c3f.jpg","comment_is_top":false,"comment_ctime":1580910609,"is_pvip":false,"replies":[{"id":"68644","content":"是的，大部分情况下，依赖编译器是OK的，现代编译器已经非常强大了。不过要避免写一些反模式的代码，使得编译器优化不了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581222500,"ip_address":"","comment_id":176010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18760779793","product_id":100026001,"comment_content":"前几天研究AVX指令集，发现gcc和icc都是可以自动进行向量化优化的，自己编写向量化程序获得的性能提升远不如编译器的自动优化","like_count":5,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482991,"discussion_content":"是的，大部分情况下，依赖编译器是OK的，现代编译器已经非常强大了。不过要避免写一些反模式的代码，使得编译器优化不了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581222500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135872,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1569291101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14454192989","product_id":100026001,"comment_content":"1 超线程技术是在cpu中添加逻辑电路，使一个cpu核心伪装成2个或者多个cpu核心，在这个线程，需要等待的时候，cpu去计算别的线程需要计算的部分，这两个线程都在执行过程中，都没有停下。<br>2 SIMD（单线程多数据流）技术，是一种指令级的并行计算。一次从寄存器中取多个数据，如果这些数据的计算没有依赖关系可以同时并发计算，应用场景较多的是向量运算，也就是音频、视频技术，还有深度学习的计算等。","like_count":3},{"had_liked":false,"id":107367,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1561520198,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14446422086","product_id":100026001,"comment_content":"老师超线程，是不是有点像python的协程？","like_count":3,"discussions":[{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175232,"discussion_content":"协程是是提高cpu执行效率，超线程看起来也差不多，反正就是让cpu忙起来","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581952164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210035,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqdsd8qbkOFkcKQO0EZzg3p7yEw6cGl47zJzGl12jHQgMUnKpMWib0ZnibRH4LZPYqhfkWH0oYt31mQ/132","nickname":"雷雷","note":"","ucode":"648204DABB1AD5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584133,"discussion_content":"不是一个层面的东西，不过效果上看还确实像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660637901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528450,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/BAuQlia9Dc07m3icOkibIqu2szlUFqUIv76V8FWVhrPQUVbO0ibyzUBOdl2NdBbnniccC97xwMA52R5iaeApMJ3z3zicw/132","nickname":"Geek_cdd840","note":"","ucode":"4B2F9855458A01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52704,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574079689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231843,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1593784900,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10183719492","product_id":100026001,"comment_content":"原来假cpu核就是用超线程技术实现的，假核数会是真核数的2倍，为什么不是3倍呢，原来它的造假的目的是为了填补流水线暂停的浪费，本来需要替补的地方就很少，容不下太多的线程空间，况且超线程只适合那种频繁访问磁盘，或经常待机的等待输入的程序，只有这些要比较长时间等待的指令才能发挥超线程的效果。<br><br>使用simd的前提是cpu支持mmx指令集，它的工作原理是cpu里有一组多个bit位的寄存器来存放一次读到的多条数据，然后对它们进行并行。","like_count":2},{"had_liked":false,"id":130307,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1567422066,"is_pvip":false,"replies":[{"id":"51125","content":"可以这样说，通过找两个完全不相关的指令，这样就没有冒险的问题存在，同时运行也不会发生冒险。<br>","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568537964,"ip_address":"","comment_id":130307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157356658","product_id":100026001,"comment_content":"我的理解是分别从线程和代码角度来避免冒险的可能，从而提高效率，不知道这样的理解是否正确","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465897,"discussion_content":"可以这样说，通过找两个完全不相关的指令，这样就没有冒险的问题存在，同时运行也不会发生冒险。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568537964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129993,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1567348175,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10157282767","product_id":100026001,"comment_content":"在量化交易分析NumPy是用到过、只知道它快、但确不知道NumPy为什么这么快？今天终于知道底层的实现原理了<br><br>day27 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11442013.html","like_count":2,"discussions":[{"author":{"id":1112415,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/5f/b0a125a9.jpg","nickname":"chp","note":"","ucode":"F0A2442230CD45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382444,"discussion_content":"这个哥们，我已经无力吐槽，纯抄，没有自己的文字理解，你能不能自己重新组织下语言，这样印象更深","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625573744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/77/c1310aad.jpg","nickname":"剑衣清风","note":"","ucode":"470CD81F6612F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343900,"discussion_content":"更绝的是，结尾的版权归属","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611211790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315126,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/36/04817bf7.jpg","nickname":"一亩三分地","note":"","ucode":"6EB0888BDC82DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329797,"discussion_content":"你这个能叫笔记？？明明是copy一份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606461085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292504,"discussion_content":"大胸弟,直接把别人的作品搬过去不太合适吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595247117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108616,"user_name":"Geek_29981e","can_delete":false,"product_type":"c1","uid":1577803,"ip_address":"","ucode":"6186BA4623C4F6","user_header":"","comment_is_top":false,"comment_ctime":1561815280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151749872","product_id":100026001,"comment_content":"数据库应用，io读写应用，多线程应用的生产者和消费者主动挂起和唤醒的应用","like_count":2},{"had_liked":false,"id":107420,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1561533585,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10151468177","product_id":100026001,"comment_content":"老师这个从超线程技术是不是可以和各种语言中的多线程概念联系起来？<br>看起来像是多个线程在运行，其实这是当流水线停顿的时候执行另一个线程的指令，这个是经常说的时间片是什么关系？<br>那线程的阻塞，唤醒操作又是如何实现的呢？","like_count":2,"discussions":[{"author":{"id":1076950,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6e/d6/af4f49db.jpg","nickname":"小马哥Mar","note":"","ucode":"101C2B2DC67940","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3558,"discussion_content":"我理解超线程是串行的，第一条指令nop的时候第二条指令才会有机会执行，而并发的线程是没有时序关系的，谁抢到cpu谁跑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564577901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1576512,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0e/40/49a71ed8.jpg","nickname":"八戒","note":"","ucode":"3F262A99492A65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2652,"discussion_content":"对啊，老铁这么一问，感觉跟操作系统里的多线程调度是不是矛盾了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563845088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107376,"user_name":"magicnum","can_delete":false,"product_type":"c1","uid":1004869,"ip_address":"","ucode":"96B3696961F654","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/45/e4314bc6.jpg","comment_is_top":false,"comment_ctime":1561521825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151456417","product_id":100026001,"comment_content":"I&#47;O密集型单不是CPU密集型的场景下超线程效率高。数据库连接池、定制线程池处理I&#47;O读写","like_count":2},{"had_liked":false,"id":107288,"user_name":"pebble","can_delete":false,"product_type":"c1","uid":1022021,"ip_address":"","ucode":"871930CB227C68","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/45/318ba48a.jpg","comment_is_top":false,"comment_ctime":1561511623,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10151446215","product_id":100026001,"comment_content":"MMX指令是多媒体扩展指令吧，最早是为多媒体引入的","like_count":3,"discussions":[{"author":{"id":1240270,"avatar":"","nickname":"梅坊帝卿","note":"","ucode":"702F019BA3356C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36489,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571384056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294995,"user_name":"Wayne","can_delete":false,"product_type":"c1","uid":2616022,"ip_address":"","ucode":"4FA52F2E03BF02","user_header":"https://static001.geekbang.org/account/avatar/00/27/ea/d6/a6f98c5d.jpg","comment_is_top":false,"comment_ctime":1622174869,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5917142165","product_id":100026001,"comment_content":"要追求性能，还得向底层发展","like_count":1},{"had_liked":false,"id":108126,"user_name":"GeekVoyager","can_delete":false,"product_type":"c1","uid":1528242,"ip_address":"","ucode":"19564619980A34","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1BLgfPicBbSkV2qH7pBTjeIQBtBrTyhPrDRIh79YKRiccC8ibdeMn4L9JHnf2HUzgUWg3r6udHJlMg/132","comment_is_top":false,"comment_ctime":1561684626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856651922","product_id":100026001,"comment_content":"这讲质量狠可以啊 现在从事GPU行业 不知道系统框架需要看哪些内容啊？","like_count":1},{"had_liked":false,"id":349884,"user_name":"一頭蠻牛","can_delete":false,"product_type":"c1","uid":1209653,"ip_address":"","ucode":"887E596A1DBF2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","comment_is_top":false,"comment_ctime":1656410910,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1656410910","product_id":100026001,"comment_content":"老师 SIMD在电路层面上是怎么处理的","like_count":0},{"had_liked":false,"id":341105,"user_name":"Xiaosong","can_delete":false,"product_type":"c1","uid":1883431,"ip_address":"","ucode":"28A03027343F9D","user_header":"https://static001.geekbang.org/account/avatar/00/1c/bd/27/e653a220.jpg","comment_is_top":false,"comment_ctime":1649356699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649356699","product_id":100026001,"comment_content":" 所以AMD用的是不同的指令集吗","like_count":1},{"had_liked":false,"id":337500,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1646873756,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1646873756","product_id":100026001,"comment_content":"超线程技术不会发生线程饥渴吗？一个一直占用着CPU，另一个一直得不到执行？这怎么解决？","like_count":1,"discussions":[{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564430,"discussion_content":"操作系统调度啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650246792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328156,"user_name":"大尾巴老猫","can_delete":false,"product_type":"c1","uid":1260089,"ip_address":"","ucode":"246AB375244773","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/39/72d81605.jpg","comment_is_top":false,"comment_ctime":1640576948,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640576948","product_id":100026001,"comment_content":"声霸卡，影霸卡...暴露年龄了","like_count":0},{"had_liked":false,"id":321146,"user_name":"活着即是修行","can_delete":false,"product_type":"c1","uid":2258416,"ip_address":"","ucode":"C420AA71FB7F9F","user_header":"https://static001.geekbang.org/account/avatar/00/22/75/f0/2c65887d.jpg","comment_is_top":false,"comment_ctime":1636688366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636688366","product_id":100026001,"comment_content":"图像吧。我之前在做计算机视觉，图像都以矩阵的方式存储，所以这种并行计算的方式可以快速计算，也就是gpu的用处了","like_count":0},{"had_liked":false,"id":305496,"user_name":"Linux C·Core Api","can_delete":false,"product_type":"c1","uid":2413481,"ip_address":"","ucode":"E370F0627E8B11","user_header":"https://static001.geekbang.org/account/avatar/00/24/d3/a9/2b84cc97.jpg","comment_is_top":false,"comment_ctime":1627997796,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1627997796","product_id":100026001,"comment_content":"26章 如何让CPU的吞吐率超过1 介绍了多个译码器 在这章的超线程中为啥每个cpu只有一个译码器","like_count":0,"discussions":[{"author":{"id":2370675,"avatar":"https://static001.geekbang.org/account/avatar/00/24/2c/73/5b7af117.jpg","nickname":"四月的谎言","note":"","ucode":"5A924319D1050E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397573,"discussion_content":"查了些资料比如i7取指令一次16字节就有至少四条指令，就是所谓四发射，译码器也能同时译码四条指令所以一个就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632642441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161437,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/dd/d729557f.jpg","nickname":"Will","note":"","ucode":"BB78C2B9B44D36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387949,"discussion_content":"对的，我也有这个疑惑，难道超标量和超线程技术不能同时拥有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628506937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301203,"user_name":"chp","can_delete":false,"product_type":"c1","uid":1112415,"ip_address":"","ucode":"F0A2442230CD45","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/5f/b0a125a9.jpg","comment_is_top":false,"comment_ctime":1625573794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625573794","product_id":100026001,"comment_content":"这讲很不错，学到了很多。","like_count":0},{"had_liked":false,"id":291332,"user_name":"童言","can_delete":false,"product_type":"c1","uid":1565441,"ip_address":"","ucode":"6FE5804578354B","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/01/a254f22d.jpg","comment_is_top":false,"comment_ctime":1620210052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620210052","product_id":100026001,"comment_content":"超线程技术通过在CPU内部增加寄存器，实现了多指令的“伪并行”，能够在当前指令等待时取执行另一条指令，提高CPU的利用率。<br>SIMD，单指令多数据流。一次读多个数据存放在寄存器中，然后并行计算，以此提高计算效率。numpy、GPU等都用到了这个技术。","like_count":0},{"had_liked":false,"id":285698,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1616983712,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616983712","product_id":100026001,"comment_content":"超线程是一个“线程级并行”的解决方案。通过让一个物理 CPU 核心，“装作”两个逻辑层面的 CPU 核心，使得 CPU 可以同时运行两个不同线程的指令","like_count":0},{"had_liked":false,"id":285420,"user_name":"monchickey","can_delete":false,"product_type":"c1","uid":1513948,"ip_address":"","ucode":"D7B670444F62B3","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","comment_is_top":false,"comment_ctime":1616804904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616804904","product_id":100026001,"comment_content":"现在终于明白了在多个逻辑核心上并行使用指令集为什么不能提高性能了，因为ALU不够用，流水线还是需要等待，在每个物理核心上是可以的，基础太重要了，感谢老师~","like_count":1},{"had_liked":false,"id":282097,"user_name":"郁","can_delete":false,"product_type":"c1","uid":1058787,"ip_address":"","ucode":"905D8D5FA60172","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ynEtBO8iayrGrbbekL9g8CJ7Mnl1u2Dom2Bt4XNPNZyTJ5woicYTewvxwTEhEyQ2UEBszRLEj5TkJxicaEb5rW0Cw/132","comment_is_top":false,"comment_ctime":1615085969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615085969","product_id":100026001,"comment_content":"用avx256加速memcpy，取得了不错的效果","like_count":0},{"had_liked":false,"id":280026,"user_name":"红薯板栗","can_delete":false,"product_type":"c1","uid":2413071,"ip_address":"","ucode":"236BE91291A575","user_header":"https://static001.geekbang.org/account/avatar/00/24/d2/0f/8f14c85b.jpg","comment_is_top":false,"comment_ctime":1614059920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614059920","product_id":100026001,"comment_content":"SIMD指令集：<br>x86 ：MMX、SSE、AVX<br>arm：neon","like_count":0},{"had_liked":false,"id":280007,"user_name":"红薯板栗","can_delete":false,"product_type":"c1","uid":2413071,"ip_address":"","ucode":"236BE91291A575","user_header":"https://static001.geekbang.org/account/avatar/00/24/d2/0f/8f14c85b.jpg","comment_is_top":false,"comment_ctime":1614052190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614052190","product_id":100026001,"comment_content":"超线程，增加双份的PC寄存器，指令寄存器，条件码寄存器，增加ALU的并行。SIMD，利用多个ALU功能单元，和多份数据提高计算速度。","like_count":0},{"had_liked":false,"id":256108,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1603530228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603530228","product_id":100026001,"comment_content":"“超长的流水线，使得之前我们讲的很多解决“冒险”、提升并发的方案都用不上。”这是为什么呢？","like_count":0},{"had_liked":false,"id":255913,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1603455633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603455633","product_id":100026001,"comment_content":"SIMD 技术，则是一种“指令级并行”的加速方案，或者我们可以说，它是一种“数据并行”的加速方案。在处理向量计算的情况下，同一个向量的不同维度之间的计算是相互独立的。而我们的 CPU 里的寄存器，又能放得下多条数据。于是，我们可以一次性取出多条数据，交给 CPU 并行计算。","like_count":0},{"had_liked":false,"id":239514,"user_name":"Ethan","can_delete":false,"product_type":"c1","uid":1810189,"ip_address":"","ucode":"75F613D58909DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZHw73tgCqGKhvticUWGRz4icgicu4hFWfKtacoFJeItH7maNuNUmjnEgDTJvOibwUWgGV0p6guNPibMVWDV4BUmEmlA/132","comment_is_top":false,"comment_ctime":1596552975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596552975","product_id":100026001,"comment_content":"”为什么 SIMD 指令能快那么多呢？这是因为，SIMD 在获取数据和执行指令的时候，都做到了并行。一方面，在从内存里面读取数据的时候，SIMD 是一次性读取多个数据。“ 老师，这句话越看怎么越想超标量或者超长指令字设计啊？现在有点梦了，希望老师解答一下这SIMD跟上一讲的两个技术有什么区别","like_count":1},{"had_liked":false,"id":186798,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1090784,"ip_address":"","ucode":"563C4A71D80DA1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwQvLGE4dMsF4JU0svW3DtGbodpjskbY65FdwF13JdtBYZfgL2IXHlHrdejWzHdjT0RibEIfib4QYA/132","comment_is_top":false,"comment_ctime":1583928732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583928732","product_id":100026001,"comment_content":"有些同学可能会猜测，是不是因为 Python 是一门解释性的语言，所以这个性能差异会那么大。第一段程序的循环的每一次操作都需要 Python 解释器来执行，而第二段的函数调用是一次调用编译好的原生代码，所以才会那么快。如果你这么想，不妨试试直接用 C 语言实现一下 1000 个元素的数组里面的每个数加 1。你会发现，即使是 C 语言编译出来的代码，还是远远低于 NumPy。原因就是，NumPy 直接用到了 SIMD 指令，能够并行进行向量的操作。<br><br>远远高于吧？","like_count":0},{"had_liked":false,"id":185490,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1583592467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583592467","product_id":100026001,"comment_content":"超线程在io bound程序中比较好。<br>用户态多线程也是。","like_count":0},{"had_liked":false,"id":160562,"user_name":"XcodeYang","can_delete":false,"product_type":"c1","uid":1017095,"ip_address":"","ucode":"7BFE3F6CF63536","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/07/b5feabdb.jpg","comment_is_top":false,"comment_ctime":1575974771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575974771","product_id":100026001,"comment_content":"豁然开朗！","like_count":0},{"had_liked":false,"id":107259,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1561509238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561509238","product_id":100026001,"comment_content":"这里有个问题请教，之前做性能监控由于超线程的存在，一般看负载和cpu利用率会按照 CPU数*核数*线程数，通过今天的课程来看，好像不能这么看了? ","like_count":0},{"had_liked":false,"id":107257,"user_name":"null","can_delete":false,"product_type":"c1","uid":1274609,"ip_address":"","ucode":"F07FCCF6552F1C","user_header":"https://static001.geekbang.org/account/avatar/00/13/72/f1/3d7460bb.jpg","comment_is_top":false,"comment_ctime":1561509004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561509004","product_id":100026001,"comment_content":"simd只是用来加速向量么？有没有其他方面可以优化代码的呀？感觉学了很有帮助。。","like_count":0}]}