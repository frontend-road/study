{"id":79734,"title":"32 | 答疑（四）：阻塞、非阻塞 I/O 与同步、异步 I/O 的区别和联系","content":"<p>你好，我是倪朋飞。</p><p>专栏更新至今，四大基础模块的第三个模块——文件系统和磁盘 I/O 篇，我们就已经学完了。很开心你还没有掉队，仍然在积极学习思考和实践操作，并且热情地留言与讨论。</p><p>今天是性能优化的第四期。照例，我从 I/O 模块的留言中摘出了一些典型问题，作为今天的答疑内容，集中回复。同样的，为了便于你学习理解，它们并不是严格按照文章顺序排列的。</p><p>每个问题，我都附上了留言区提问的截屏。如果你需要回顾内容原文，可以扫描每个问题右下方的二维码查看。</p><h2>问题1：阻塞、非阻塞 I/O 与同步、异步 I/O 的区别和联系</h2><p><img src=\"https://static001.geekbang.org/resource/image/1c/b0/1c3237118d1c55792ac0d9cc23f14bb0.png?wh=600*700\" alt=\"\"></p><p>在<a href=\"https://time.geekbang.org/column/article/76876\">文件系统的工作原理</a>篇中，我曾经介绍了阻塞、非阻塞 I/O 以及同步、异步 I/O 的含义，这里我们再简单回顾一下。</p><p>首先我们来看阻塞和非阻塞 I/O。根据应用程序是否阻塞自身运行，可以把 I/O 分为阻塞 I/O 和非阻塞 I/O。</p><ul>\n<li>\n<p>所谓阻塞I/O，是指应用程序在执行I/O操作后，如果没有获得响应，就会阻塞当前线程，不能执行其他任务。</p>\n</li>\n<li>\n<p>所谓非阻塞I/O，是指应用程序在执行I/O操作后，不会阻塞当前的线程，可以继续执行其他的任务。</p>\n</li>\n</ul><p>再来看同步 I/O 和异步 I/O。根据 I/O 响应的通知方式的不同，可以把文件 I/O 分为同步 I/O 和异步 I/O。</p><!-- [[[read_end]]] --><ul>\n<li>\n<p>所谓同步 I/O，是指收到 I/O 请求后，系统不会立刻响应应用程序；等到处理完成，系统才会通过系统调用的方式，告诉应用程序 I/O 结果。</p>\n</li>\n<li>\n<p>所谓异步 I/O，是指收到 I/O 请求后，系统会先告诉应用程序  I/O 请求已经收到，随后再去异步处理；等处理完成后，系统再通过事件通知的方式，告诉应用程序结果。</p>\n</li>\n</ul><p>你可以看出，阻塞/非阻塞和同步/异步，其实就是两个不同角度的 I/O 划分方式。它们描述的对象也不同，阻塞/非阻塞针对的是 I/O 调用者（即应用程序），而同步/异步针对的是 I/O 执行者（即系统）。</p><p>我举个例子来进一步解释下。比如在 Linux I/O 调用中，</p><ul>\n<li>\n<p>系统调用 read 是同步读，所以，在没有得到磁盘数据前，read 不会响应应用程序。</p>\n</li>\n<li>\n<p>而 aio_read 是异步读，系统收到 AIO 读请求后不等处理就返回了，而具体的 read 结果，再通过回调异步通知应用程序。</p>\n</li>\n</ul><p>再如，在网络套接字的接口中，</p><ul>\n<li>\n<p>使用 send() 直接向套接字发送数据时，如果套接字没有设置 O_NONBLOCK 标识，那么 send() 操作就会一直阻塞，当前线程也没法去做其他事情。</p>\n</li>\n<li>\n<p>当然，如果你用了 epoll，系统会告诉你这个套接字的状态，那就可以用非阻塞的方式使用。当这个套接字不可写的时候，你可以去做其他事情，比如读写其他套接字。</p>\n</li>\n</ul><h2>问题2：“文件系统”课后思考</h2><p><img src=\"https://static001.geekbang.org/resource/image/40/a6/40c924ea4b11e12d6d34181a00f292a6.jpg?wh=750*1170\" alt=\"\"></p><p>在<a href=\"https://time.geekbang.org/column/article/76876\">文件系统原理</a><a href=\"https://time.geekbang.org/column/article/76876\">文章</a>的最后，我给你留了一道思考题，那就是执行 find 命令时，会不会导致系统的缓存升高呢？如果会导致，升高的又是哪种类型的缓存呢？</p><p>关于这个问题，白华和 coyang 的答案已经很准确了。通过学习Linux 文件系统的原理，我们知道，文件名以及文件之间的目录关系，都放在目录项缓存中。而这是一个基于内存的数据结构，会根据需要动态构建。所以，查找文件时，Linux 就会动态构建不在缓存中的目录项结构，导致 dentry 缓存升高。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/c5/488110263a9c7ff801a3e04c010f0bc5.png?wh=600*1202\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/57/58/57e4cf5a42a91392ebebf106f992a858.png?wh=600*1438\" alt=\"\"></p><p>事实上，除了目录项缓存增加，Buffer 的使用也会增加。如果你用 vmstat 观察一下，会发现 Buffer 和 Cache 都在增长：</p><pre><code>$ vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  1      0 7563744   6024 225944    0    0  3736     0  574 3249  3  5 89  3  0\n 1  0      0 7542792  14736 236856    0    0  8708     0 13494 32335  8 19 66  7  0\n 0  1      0 7494452  27280 272284    0    0 12544     0 4550 17084  5 15 68 13  0\n 0  1      0 7475084  42380 276320    0    0 15096     0 2541 14253  2  6 78 13  0\n 0  1      0 7455728  57600 280436    0    0 15220     0 2025 14518  2  6 70 22  0\n</code></pre><p>这里，Buffer 的增长是因为，构建目录项缓存所需的元数据（比如文件名称、索引节点等），需要从文件系统中读取。</p><h2>问题3：“磁盘 I/O 延迟”课后思考</h2><p>在<a href=\"https://time.geekbang.org/column/article/78409\">磁盘 I/O 延迟案例</a>的最后，我给你留了一道思考题。</p><p>我们通过 iostat ，确认磁盘 I/O 已经出现了性能瓶颈，还用 pidstat 找出了大量磁盘 I/O 的进程。但是，随后使用 strace 跟踪这个进程，却找不到任何 write 系统调用。这是为什么呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/64/09/6408b3aa2aa9a98a930d1a5b2e2fef09.jpg?wh=750*1551\" alt=\"\"></p><p>很多同学的留言都准确回答了这个问题。比如，划时代和 jeff 的留言都指出，在这个场景中，我们需要加 -f 选项，以便跟踪多进程和多线程的系统调用情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/55/e4e9a070022f7b49cb8d5554b9a60055.png?wh=600*700\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/71/05/71a6df4144ce59d9e1a01c26453acf05.png?wh=600*700\" alt=\"\"></p><p>你看，仅仅是不恰当的选项，都可能会导致性能工具“犯错”，呈现这种看起来不合逻辑的结果。非常高兴看到，这么多同学已经掌握了性能工具使用的核心思路——弄清楚工具本身的原理和问题。</p><h2>问题4：“MySQL 案例”课后思考</h2><p>在 <a href=\"https://time.geekbang.org/column/article/78633\">MySQL 案例</a>的最后，我给你留了一个思考题。</p><p>为什么 DataService 应用停止后，即使仍没有索引，MySQL 的查询速度还是快了很多，并且磁盘 I/O 瓶颈也消失了呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/92/78/924fbc974313b1e0fe6b8d14e7a44178.png?wh=600*700\" alt=\"\"></p><p>ninuxer 的留言基本解释了这个问题，不过还不够完善。</p><p>事实上，当你看到 DataService 在修改 <em>/proc/sys/vm/drop_caches</em>  时，就应该想到前面学过的 Cache 的作用。</p><p>我们知道，案例应用访问的数据表，基于 MyISAM 引擎，而 MyISAM 的一个特点，就是只在内存中缓存索引，并不缓存数据。所以，在查询语句无法使用索引时，就需要数据表从数据库文件读入内存，然后再进行处理。</p><p>所以，如果你用 vmstat 工具，观察缓存和 I/O 的变化趋势，就会发现下面这样的结果：</p><pre><code>$ vmstat 1\n\nprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n\n# 备注： DataService正在运行\n0  1      0 7293416    132 366704    0    0 32516    12   36  546  1  3 49 48  0\n 0  1      0 7260772    132 399256    0    0 32640     0   37  463  1  1 49 48  0\n 0  1      0 7228088    132 432088    0    0 32640     0   30  477  0  1 49 49  0\n 0  0      0 7306560    132 353084    0    0 20572     4   90  574  1  4 69 27  0\n 0  2      0 7282300    132 368536    0    0 15468     0   32  304  0  0 79 20  0\n\n# 备注：DataService从这里开始停止\n 0  0      0 7241852   1360 424164    0    0   864   320  133 1266  1  1 94  5  0\n 0  1      0 7228956   1368 437400    0    0 13328     0   45  366  0  0 83 17  0\n 0  1      0 7196320   1368 470148    0    0 32640     0   33  413  1  1 50 49  0\n...\n 0  0      0 6747540   1368 918576    0    0 29056     0   42  568  0  0 56 44  0\n 0  0      0 6747540   1368 918576    0    0     0     0   40  141  1  0 100  0  0\n</code></pre><p>在 DataService 停止前，cache 会连续增长三次后再降回去，这正是因为 DataService 每隔3秒清理一次页缓存。而 DataService 停止后，cache 就会不停地增长，直到增长为 918576 后，就不再变了。</p><p>这时，磁盘的读（bi）降低到 0，同时，iowait（wa）也降低到 0，这说明，此时的所有数据都已经在系统的缓存中了。我们知道，缓存是内存的一部分，它的访问速度比磁盘快得多，这也就能解释，为什么 MySQL 的查询速度变快了很多。</p><p>从这个案例，你会发现，MySQL 的 MyISAM 引擎，本身并不缓存数据，而要依赖系统缓存来加速磁盘 I/O 的访问。一旦系统中还有其他应用同时运行，MyISAM 引擎就很难充分利用系统缓存。因为系统缓存可能被其他应用程序占用，甚至直接被清理掉。</p><p>所以，一般来说，我并不建议，把应用程序的性能优化完全建立在系统缓存上。还是那句话，最好能在应用程序的内部分配内存，构建完全自主控制的缓存，比如 MySQL 的 InnoDB 引擎，就同时缓存了索引和数据；或者，可以使用第三方的缓存应用，比如 Memcached、Redis 等。</p><p>今天主要回答这些问题，同时也欢迎你继续在留言区写下疑问和感想，我会持续不断地解答。希望借助每一次的答疑，可以和你一起，把文章知识内化为你的能力，我们不仅在实战中演练，也要在交流中进步。</p><p></p>","neighbors":{"left":{"article_title":"31 | 套路篇：磁盘 I/O 性能优化的几个思路","id":79368},"right":{"article_title":"33 | 关于 Linux 网络，你必须知道这些（上）","id":80898}},"comments":[{"had_liked":false,"id":80024,"user_name":"eagle","can_delete":false,"product_type":"c1","uid":1369898,"ip_address":"","ucode":"78B2CEFD8ED6FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e7/2a/ccac99dd.jpg","comment_is_top":false,"comment_ctime":1553594896,"is_pvip":true,"replies":[{"id":"29200","content":"谢谢😊","user_name":"作者回复","comment_id":80024,"uid":"1001282","ip_address":"","utype":1,"ctime":1553610824,"user_name_real":"倪朋飞"}],"discussion_count":4,"race_medal":0,"score":"78863006224","product_id":100020901,"comment_content":"我根据我们自己实际应用中遇到的情况，试着回复一下两个问题：<br>安小依 的问题，df -h 显示占用100%，而关闭应用程序后，再次df -h是85%，这一般是因为该应用程序还有指向已删除文件的文件指针没有关闭，典型的比如日志文件，虽然在操作系统中用rm命令删除了，在相应的目录中已经没有该文件了，但如果应用中还有对应的文件指针没有关闭，则实际硬盘空间还不会释放，而应用程序被关闭时，实际空间才会释放。问题中更像是有些apk文件或处理后文件的文件指针没有释放。这种情况也可以通过 lsof | grep deleted 来找到这些文件。<br>lvy的out of memory的问题，可以先用free或top看一下可用内存是否确实没有了，如果确实是没有内存了，那再去研究内存的问题；还有一种常见情况，内存是充足的，文件描述符的个数或进程数达到上限了，那就得调整 ulimit，可以通过 ulimit -a (注意要用php的用户）来查看，关注open files和max user processes，这两个默认很小，1k和4k，建议调整到加两个0.","like_count":19,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444727,"discussion_content":"谢谢😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553610824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","nickname":"注意力$","note":"","ucode":"7FB3399A1EAB72","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280847,"discussion_content":"今天我们mysql的环境就遇到了/ 目录使用100%，但实际算下来只有60%，通过lsof | grep deleted 发现也是 msyql进程占用的文件句柄没有释放，  最后也是重启mysql，这个有没有什么好的解决办法吗？老是重启也不是办法啊\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591620999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2066801,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/W0VEO7Hxzd61mia6Ls2EpBmaZ0l9q7SFUAErbu4XKIjWLmlALr4ybpicDoI8SoXY8XJNKmk04Ep1ibTCuFvfCF8GQ/132","nickname":"Chen","note":"","ucode":"5D0F3DF807706E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343105,"discussion_content":"lsof | grep deleted 查到文件，然后echo &#34; &#34;> 该文件清空。不知是否可行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610950549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","nickname":"注意力$","note":"","ucode":"7FB3399A1EAB72","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280848,"discussion_content":"麻烦老师也指点下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591621015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64923,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1548979440,"is_pvip":false,"replies":[{"id":"23049","content":"新年快乐！","user_name":"作者回复","comment_id":64923,"uid":"1001282","ip_address":"","utype":1,"ctime":1549023533,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"35908717808","product_id":100020901,"comment_content":"打卡day33<br>感恩作者带来的分享，提前祝新年快乐！","like_count":8,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438234,"discussion_content":"新年快乐！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549023533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298481,"discussion_content":"时间飞逝~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597308049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76068,"user_name":"Maxwell","can_delete":false,"product_type":"c1","uid":1086275,"ip_address":"","ucode":"720A00AD472616","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/43/0e84492d.jpg","comment_is_top":false,"comment_ctime":1552527611,"is_pvip":false,"replies":[{"id":"28055","content":"Windows书籍最推荐的是《Windows Internals 7th edition》","user_name":"作者回复","comment_id":76068,"uid":"1001282","ip_address":"","utype":1,"ctime":1552750247,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"31617298683","product_id":100020901,"comment_content":"Windows和linux有很大区别吧？如果想深入了解windows，有什么可以推荐的书吗？","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443162,"discussion_content":"Windows书籍最推荐的是《Windows Internals 7th edition》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552750247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68531,"user_name":"Ivy","can_delete":false,"product_type":"c1","uid":1131135,"ip_address":"","ucode":"78156E0D5DEC52","user_header":"","comment_is_top":false,"comment_ctime":1550539596,"is_pvip":false,"replies":[{"id":"24523","content":"可以考虑调整 tcp_max_tw_buckets、ip_conntrack_max、ip_conntrack 这些内核选项","user_name":"作者回复","comment_id":68531,"uid":"1001282","ip_address":"","utype":1,"ctime":1550674037,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"18730408780","product_id":100020901,"comment_content":"老师您好，我最近在生产环境遇到一个问题，centos7频繁报错tcp out of memory ，访问页面时css文件响应头200，但是响应正文为空，我猜测就是因为tcp问题，有时候又能正常返回，每次重启php fpm就能解决问题，cat &#47;proc&#47;net&#47;sockstat 的时候tcp 行mem值在fpm重启前后差距很大，同时tw状态的连接也很多，alloc也很大，我该怎么去找原因？能看到每个tw状态的连接占用多少tcp 内存吗？或者怎么查询php fpm为何没有释放tcp内存？","like_count":5,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439721,"discussion_content":"可以考虑调整 tcp_max_tw_buckets、ip_conntrack_max、ip_conntrack 这些内核选项","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550674037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82731,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1318347,"ip_address":"","ucode":"D13D693D66E5FE","user_header":"","comment_is_top":false,"comment_ctime":1554288424,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10144223016","product_id":100020901,"comment_content":"《UNIX网络编程》提到的5种IO模型中，除了异步IO模型没有阻塞操作外，其他四种IO模型（阻塞IO、非阻塞IO、IO多路复用、信号驱动IO）都有阻塞操作。是不是可以这么理解:<br>同步IO一定有阻塞可能有非阻塞，<br>异步IO一定是非阻塞；<br>有阻塞一定是同步IO，<br>有非阻塞可能是同步IO或异步IO<br>求大佬解答问题","like_count":1,"discussions":[{"author":{"id":1101226,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","nickname":"卫江","note":"","ucode":"DE2F7A6916F1A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133785,"discussion_content":"我个人认为，同步与异步，阻塞与非阻塞是从两个角度来说的，阻塞与非阻塞是从使用的api角度来说的，在调用期间，因为某些原因，会发生上下文切换。同步与异步是从直接结果来说的，同步代表当函数返回的时候，已经得到想要的结果，异步代表当函数返回的时候，没有得到想要的结果，所以需要配合其他的机制来得到结果！","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1578988880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238642,"user_name":"没有昵称","can_delete":false,"product_type":"c1","uid":1763208,"ip_address":"","ucode":"565783BDD01CE4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e7/88/c8b4ad9c.jpg","comment_is_top":false,"comment_ctime":1596247407,"is_pvip":false,"replies":[{"id":"88795","content":"欢迎分享一下链接","user_name":"作者回复","comment_id":238642,"uid":"1001282","ip_address":"","utype":1,"ctime":1596978155,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"5891214703","product_id":100020901,"comment_content":"我觉得同步异步io的提问者并不是想要理解字面意思，而是想要了解内部的工作模式，之前看过一篇文章讲解的比较好，把io分成了几个阶段，不同类型的io每个阶段都干了什么，回头再找下","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502808,"discussion_content":"欢迎分享一下链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596978155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1763208,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e7/88/c8b4ad9c.jpg","nickname":"没有昵称","note":"","ucode":"565783BDD01CE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296615,"discussion_content":"https://www.cnblogs.com/felixzh/p/10345929.html","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1596603511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1763208,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e7/88/c8b4ad9c.jpg","nickname":"没有昵称","note":"","ucode":"565783BDD01CE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380539,"discussion_content":"这篇文章说清楚了什么是同步阻塞，同步非阻塞，异步非阻塞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624547700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296615,"ip_address":""},"score":380539,"extra":""}]}]},{"had_liked":false,"id":99845,"user_name":"LA","can_delete":false,"product_type":"c1","uid":1178482,"ip_address":"","ucode":"28AD0DA151799C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/72/3fe64bc5.jpg","comment_is_top":false,"comment_ctime":1559321071,"is_pvip":false,"replies":[{"id":"38376","content":"不包括套接字","user_name":"作者回复","comment_id":99845,"uid":"1001282","ip_address":"","utype":1,"ctime":1561215840,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5854288367","product_id":100020901,"comment_content":"老师，看了您的文章，有个问题一直在困扰这我。文章所说进程不可中断状态有可能是因为等待io响应，那这里的等待io响应包括等待从套接字读取数据么？如果是包括的话对于阻塞io来讲岂不是只要有阻塞进程就一直处在不可中断状态，从而无法被kill信号杀掉？","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452291,"discussion_content":"不包括套接字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561215840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79210,"user_name":"allan","can_delete":false,"product_type":"c1","uid":1142819,"ip_address":"","ucode":"CA0BE868AA9FF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/23/972dcd30.jpg","comment_is_top":false,"comment_ctime":1553402723,"is_pvip":false,"replies":[{"id":"29344","content":"嗯，数据库文件","user_name":"作者回复","comment_id":79210,"uid":"1001282","ip_address":"","utype":1,"ctime":1553698994,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5848370019","product_id":100020901,"comment_content":"原文：DataService 停止后，bi iowait 都降到0，说明此时的所有数据都已经在系统的缓存中了。<br><br>这里所有数据指的是 数据库文件 中的数据 是吗？不包括索引。","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444399,"discussion_content":"嗯，数据库文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553698994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71572,"user_name":"安小依","can_delete":false,"product_type":"c1","uid":1101660,"ip_address":"","ucode":"A5C414C7B994FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/5c/d4e19eb6.jpg","comment_is_top":false,"comment_ctime":1551372587,"is_pvip":false,"replies":[{"id":"25722","content":"解压缩很可疑，有没有看看这些apk解压后的大小？","user_name":"作者回复","comment_id":71572,"uid":"1001282","ip_address":"","utype":1,"ctime":1551400530,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"5846339883","product_id":100020901,"comment_content":"老师，今天遇见了一个问题: 系统使用 df -h 显示磁盘占用100%了，而且应用程序(这是一个不停下载 apk 文件、解压缩并分析 apk文件的应用程序)在命令行也提示磁盘空间不足了。但是，关闭应用程序后，再次 df-h 统计，却发现这次磁盘占用是 85%，释放了 15%大约150G 的空间…能大概推测出来为什么关闭应用后，磁盘空间突然多了的原因吗？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441212,"discussion_content":"解压缩很可疑，有没有看看这些apk解压后的大小？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551400530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257739,"discussion_content":"也可能是程序对某个deleted的文件句柄未释放，关闭之后空间也出来了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588602469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64945,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1548982833,"is_pvip":false,"replies":[{"id":"23050","content":"是的，读文件内容的时候不会的。文中指的是执行 find 命令查找文件的情景","user_name":"作者回复","comment_id":64945,"uid":"1001282","ip_address":"","utype":1,"ctime":1549023751,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5843950129","product_id":100020901,"comment_content":"老师，读文件系统的内容不会引起buffer升高吧，读块设备会引起，我做了文章的实验发现<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 1  0      0 1620788      0 431512    0    0   348    70  415  585  2  4 94  0  0<br> 0  0      0 1618488      0 431948    0    0   480     0 1605 2056  1  4 96  0  0<br> 0  0      0 1619524      0 431788    0    0    16     0 1157 1674  1  2 97  0  0<br> 2  0      0 1499696      0 548464    0    0 116905   281 5084 7062  3 14 82  1  0<br> 2  0      0 1495664      0 552444    0    0  4964   125 2996 4413  2  6 92  0  0<br> 2  0      0 1329960      0 646564    0    0 34028     0 8495 10589 21 24 53  1  0<br> 2  0      0 1152440      0 769524    0    0 142805   206 13584 16541 19 32 48  1  0<br> 3  0      0 1112028      0 783200    0    0 44753    86 14794 20490 19 23 57  0  0<br> 0  0      0 1050900      0 809624    0    0 36540     0 8927 13517  5 20 75  0  0<br> 0  0      0 1050892      0 809636    0    0     0     0 1277 1879  1  2 97  0  0<br> 0  0      0 1050632      0 809644    0    0     0     0 1344 1953  1  2 97  0  0<br>buffer并没有升高","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438245,"discussion_content":"是的，读文件内容的时候不会的。文中指的是执行 find 命令查找文件的情景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549023751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342295,"user_name":"Peter","can_delete":false,"product_type":"c1","uid":2425556,"ip_address":"","ucode":"5E57A0FE948966","user_header":"https://static001.geekbang.org/account/avatar/00/25/02/d4/1e0bb504.jpg","comment_is_top":false,"comment_ctime":1650176082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650176082","product_id":100020901,"comment_content":"阻塞、非阻塞 I&#47;O 以及同步、异步 I&#47;O的区别和 同步、异步、阻塞、非阻塞之间区别是不是同一个概念的？ 我之前看过还有同步阻塞、同步非阻塞、异步阻塞、异步非阻塞等","like_count":0},{"had_liked":false,"id":333413,"user_name":"谛听","can_delete":false,"product_type":"c1","uid":1228687,"ip_address":"","ucode":"7539D5B06662EA","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/8f/51f044dc.jpg","comment_is_top":false,"comment_ctime":1644332912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644332912","product_id":100020901,"comment_content":"有个疑问，rust 或者 node.js 或者 python 中的 async&#47;await 是同步的还是异步的，是阻塞的还是非阻塞的？有 async 关键字，应该是异步的，可是会等待 await 返回结果后才会继续执行，又觉得是同步的。因为会等待 await 返回结果后才往下走，应该是阻塞的，但实际上其它的 future 也在执行，又不是阻塞的，有点混乱，希望能解答一下","like_count":0},{"had_liked":false,"id":327148,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1639961236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639961236","product_id":100020901,"comment_content":"- 阻塞&#47;非阻塞：针对的是数据未就绪操作是否能够立即返回的划分。非阻塞调用后立马返回，随后通过轮询或者事件得知数据是否就绪<br>- 同步&#47;异步：针对的数据就绪后的获取&#47;写入操作过程是否立刻返回的划分。同步操作有用户线程同步完成，异步操作（比如read）由于用户线程需要立刻返回，数据拷贝的操作由内核完成。","like_count":0},{"had_liked":false,"id":306060,"user_name":"笃定","can_delete":false,"product_type":"c1","uid":1316173,"ip_address":"","ucode":"92E06FA13CC046","user_header":"https://static001.geekbang.org/account/avatar/00/14/15/4d/bbfda6b7.jpg","comment_is_top":false,"comment_ctime":1628324740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628324740","product_id":100020901,"comment_content":"老师，有一个疑问，如果我的应用程序使用的是异步非阻塞IO调用方式，那么我发起IO请求获取大量的数据，因为是异步非阻塞的；可以不马上得到数据而继续执行其他任务，这样的话，是不是我这个系统上就不会出现CPUIOWAIT升高的情况呢（系统上就只跑这一个程序的情况下）","like_count":1},{"had_liked":false,"id":297660,"user_name":"curry30","can_delete":false,"product_type":"c1","uid":1825232,"ip_address":"","ucode":"2A4F51CEE36F7A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersRGspOZwfckQcnzQxOzUYdw36wufiaQIic4hfmPrN5arOTuPF7aTz0leNSibs8C3nc3aDuh8CcMtOw/132","comment_is_top":false,"comment_ctime":1623718281,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623718281","product_id":100020901,"comment_content":"老师你好，文中说的“Buffer 的增长是因为，构建目录项缓存所需的元数据（比如文件名称、索引节点等），需要从文件系统中读取”，这里“文件系统中读取”描述有点疑惑，文件系统中读取的话，增长的cache，磁盘中读取的话才是增长Buffer吧，不是很能理解。","like_count":0,"discussions":[{"author":{"id":1013424,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","nickname":"不了峰","note":"","ucode":"E23B96D6A3D4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551697,"discussion_content":"可以从「Linux 系统的 I/O 栈图」中看文件系统的下方是缓冲区（buffer），所以 buffer 增加。不知道这样子理解对不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645085806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297131,"user_name":"奋斗","can_delete":false,"product_type":"c1","uid":2047392,"ip_address":"","ucode":"C84C2D030ACA51","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3d/a0/acf6b165.jpg","comment_is_top":false,"comment_ctime":1623321681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623321681","product_id":100020901,"comment_content":"我觉得同步io和异步io最大区别是:同步io需要用户线程去内核主动读取数据，异步io是内核已经将数据返回给用户，用户直接使用即可","like_count":0},{"had_liked":false,"id":291248,"user_name":"Geek_9a0180","can_delete":false,"product_type":"c1","uid":1104526,"ip_address":"","ucode":"E0975DBE140DF2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/8e/eecebc1a.jpg","comment_is_top":false,"comment_ctime":1620141962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620141962","product_id":100020901,"comment_content":"老师您好，不是很懂文中说的“Buffer 的增长是因为，构建目录项缓存所需的元数据（比如文件名称、索引节点等），需要从文件系统中读取”，是元数据都存在Buffer中吗？望解答","like_count":0},{"had_liked":false,"id":268741,"user_name":"Cryhard","can_delete":false,"product_type":"c1","uid":1589593,"ip_address":"","ucode":"E0BF4548B502CB","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/59/78042964.jpg","comment_is_top":false,"comment_ctime":1608336756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608336756","product_id":100020901,"comment_content":"复习一下，仍然会有新的收获！谢谢！","like_count":1},{"had_liked":false,"id":259471,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604734244,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604734244","product_id":100020901,"comment_content":"老师你好，将数据从内核空间复制到用户空间这个过程中，如果这个过程中应用程序被阻塞就叫同步IO，否则就叫异步IO。这种说法对吗？","like_count":0},{"had_liked":false,"id":118486,"user_name":"Jarvis","can_delete":false,"product_type":"c1","uid":1087106,"ip_address":"","ucode":"4D780F9FD13F93","user_header":"https://static001.geekbang.org/account/avatar/00/10/96/82/8ac1e909.jpg","comment_is_top":false,"comment_ctime":1564374082,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564374082","product_id":100020901,"comment_content":"他如果都从调用者的角度来看，阻塞和同步其实没什么区别？都是在得到响应之前没法做其他事？","like_count":0,"discussions":[{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257741,"discussion_content":"还是从分类的角度看，这两个没法一起比较。只能具体到一个场景，既是阻塞，也是同步调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588602578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78117,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1553073581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553073581","product_id":100020901,"comment_content":"DAY32，打卡","like_count":0},{"had_liked":false,"id":69109,"user_name":"马殿军","can_delete":false,"product_type":"c1","uid":1048707,"ip_address":"","ucode":"97FE6251C04E6D","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/83/9329a697.jpg","comment_is_top":false,"comment_ctime":1550663424,"is_pvip":false,"replies":[{"id":"24536","content":"不是，buffer只是磁盘的缓存，其他都可以认为是cache","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1550675482,"ip_address":"","comment_id":69109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550663424","product_id":100020901,"comment_content":"老师好，请教：目录项缓存在cache中，索引节点缓存在buffer中，这是对的吗？<br><br>还是二者都在buffer中？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439955,"discussion_content":"不是，buffer只是磁盘的缓存，其他都可以认为是cache","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550675482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66088,"user_name":"陈帅","can_delete":false,"product_type":"c1","uid":1316646,"ip_address":"","ucode":"F8EC28252B80EF","user_header":"","comment_is_top":false,"comment_ctime":1549875206,"is_pvip":false,"replies":[{"id":"23704","content":"是的，在很多场景下都可以理解成一样的。不过要细分的话，还是有些区别（见文中内容）","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1550068420,"ip_address":"","comment_id":66088,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549875206","product_id":100020901,"comment_content":"关于，阻塞、非阻塞 I&#47;O 与同步、异步 I&#47;O ，这个问题回答。我确认下，是不是其实是一个东西，只不过划分的角度不同罢了。是这个意思吗？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438697,"discussion_content":"是的，在很多场景下都可以理解成一样的。不过要细分的话，还是有些区别（见文中内容）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550068420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65186,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1549096136,"is_pvip":false,"replies":[{"id":"23138","content":"👍","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549161389,"ip_address":"","comment_id":65186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549096136","product_id":100020901,"comment_content":"[D32打卡]<br>时间过得真快，转眼专栏的五大模块已经学完了三个。😄","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438352,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549161389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65061,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1549015189,"is_pvip":false,"replies":[{"id":"23053","content":"除了CPU、内存、磁盘之外，网络也可能是个原因。另外，对 I&#47;O，还可以用 iostat 看一下其他指标是不是有什么线索","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549024129,"ip_address":"","comment_id":65061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549015189","product_id":100020901,"comment_content":"老师，我们的测试环境机器我从几个指标看只有系统盘每秒写的数据量比测试环境多，为什么比测试环境卡很多，进程也只是测试环境一倍而已，使用vmstat pidstat,top,发现只有线上机器进程数多一倍，io写入量是测试机器10倍，测试配置4核16G，线上32核，256G，磁盘随机读写都是79MB&#47;s左右<br>测试17时50分54秒     0         1      3.85     16.61      4.86  systemd<br>线上05:50:51 PM     0         1    151.52   1922.47    210.85  systemd<br>top<br>top - 17:57:54 up 24 days,  6:32,  3 users,  load average: 2.06, 2.07, 2.41<br>Tasks: 974 total,   2 running, 970 sleeping,   0 stopped,   2 zombie<br>%Cpu(s):  2.2 us,  4.1 sy,  0.1 ni, 65.6 id, 27.7 wa,  0.0 hi,  0.0 si,  0.3 st<br>KiB Mem : 16249556 total,  2730324 free,  8055928 used,  5463304 buff&#47;cache<br>KiB Swap:        0 total,        0 free,        0 used.  7338032 avail Mem<br>线上 top - 17:58:03 up 73 days,  8:41,  2 users,  load average: 4.84, 3.40, 2.94<br>Tasks: 2651 total,   1 running, 2650 sleeping,   0 stopped,   0 zombie<br>%Cpu(s):  1.4 us,  0.5 sy,  0.0 ni, 92.9 id,  5.1 wa,  0.0 hi,  0.1 si,  0.0 st<br>KiB Mem : 26385616+total, 88973160 free, 23977900 used, 15090508+buff&#47;cache<br>KiB Swap:        0 total,        0 free,        0 used. 23713659+avail Mem<br>难道IO就是线上机器卡的原因<br>","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438304,"discussion_content":"除了CPU、内存、磁盘之外，网络也可能是个原因。另外，对 I/O，还可以用 iostat 看一下其他指标是不是有什么线索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549024129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64982,"user_name":"blackpiglet","can_delete":false,"product_type":"c1","uid":1032928,"ip_address":"","ucode":"58AA8329C91767","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/e0/7188aa0a.jpg","comment_is_top":false,"comment_ctime":1548991142,"is_pvip":false,"replies":[{"id":"23059","content":"系统日志肯定是最有效的，一般都会留下一些线索。死机的时候，如果可以通过IPMI看到服务器的Console，那也有可能看到一些线索（比如内核中的错误或者内核栈等等）。","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549024642,"ip_address":"","comment_id":64982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548991142","product_id":100020901,"comment_content":"老师，在工作中遇到了 Ubuntu 16.04 系统死机的问题，和性能优化并不直接相关，不过还是想问一下遇到这种问题该如何分析。我能想到的步骤是：<br>1. 看 &#47;var&#47;crash 下是否有 kernel panic 的记录；<br>2. 看 &#47;var&#47;log&#47;syslog 下是否有应用程序异常记录；<br>3. 看服务器上主要的应用程序日志，是否有异常；<br>4. 查看是否有 coredump 文件；<br>5. 查看 IPMI 日志，是否有硬件异常。<br><br>有的时候这一趟下来，还是没有什么收获，请问老师有没有其他需要注意的？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438261,"discussion_content":"系统日志肯定是最有效的，一般都会留下一些线索。死机的时候，如果可以通过IPMI看到服务器的Console，那也有可能看到一些线索（比如内核中的错误或者内核栈等等）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549024642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}