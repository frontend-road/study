{"id":678249,"title":"05｜ 旧画师GAN：天生有缺陷还是学艺不精湛？","content":"<p>你好，我是南柯。</p><p>今天开始，我们正式进入AI绘画理论阶段的学习。我会带你理解图像生成模型背后的算法原理，掌握AI绘画主流算法方案背后通用的算法模块，并带你从零到一训练一个扩散模型。</p><p>基于扩散模型的AI绘画技术是我们这门课的主题，但其实在22年以前，GAN才是业界公认的AI绘画技术首选。在老一辈的AI画图中，GAN（生成对抗网络）可以说是唯一的选择。相信你也在各种社交软件上见到过各种变小孩、变老、性别变换的视觉特效，这类效果通常就是靠GAN完成的。</p><p>然而，随着22年DALL-E 2、Stable Diffusion的推出，扩散模型技术逐渐成为了AI绘画的主流技术。无论是绘画细节的精致度还是内容的多样性，扩散模型似乎都要优于GAN。</p><p>即便如此，对于入门AI绘画知识体系而言，GAN仍然是绕不开的话题，值得我们深入了解。因为搞懂了GAN的长处和短板，才能理解后来扩散模型解决了GAN的哪些痛点。而且今天我们要学的各种算法模型，也是面试中常常会问到的。</p><p>在正式探索基于扩散模型的AI绘画技术之前，我们用这一讲来重温旧画师GAN，探讨GAN如何从兴起到高光，并简要回顾GAN发展史上那些里程碑式的技术。</p><h2>GAN的起源</h2><p>下面我放了两张例子。第一个例子是张大千模仿石涛的画作，第二个例子是贝特莱奇14岁时仿照毕加索的画作。假如你是艺术鉴赏家，能否发现这些仿作的破绽呢？</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/b9/30/b90db198yy2937a8e5a697006d5e2930.jpg?wh=3891x2303\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/fd/c4/fdfaae42d842f7cf88e0d2efe4750dc4.jpg?wh=4409x2187\" alt=\"\"></p><p>事实上，名画伪造家和艺术鉴赏家之间的较量，酷似GAN中生成器与判别器之间的对抗。接下来，就让我们一起揭开GAN背后的奥秘。</p><p>故事还要从“遥远”的2014年说起。那时候，Ian Goodfellow等人提出了生成对抗网络——也就是GAN这个全新的概念。</p><p>当时的深度神经网络通常需要收集图像样本和目标标签，比如分类任务的标签就是类别信息、年龄回归任务的标签就是年龄数值。通常通过交叉熵损失来训练分类任务，通过数值误差损失（比如L1损失和L2损失）来训练回归任务。</p><p>而GAN的思路则完全不同。GAN模型由两个模块构成，也就是常说的生成器（Generator）和判别器（Discriminator）。可以这样类比，生成器是一位名画伪造家，目标是创作出逼真的艺术品，判别器是一位艺术鉴赏家，目标是从细节中找出伪造破绽。生成器与判别器在模型训练的过程中持续更新与对抗，最终达到平衡。</p><p>你可以看下面的伪代码，加深对GAN这种对抗训练思想的理解。</p><pre><code class=\"language-python\">for epoch in range(num_epochs):\n&nbsp; &nbsp; for batch_data in data_loader:\n&nbsp; &nbsp; &nbsp; &nbsp; # 更新判别器\n&nbsp; &nbsp; &nbsp; &nbsp; real_images = batch_data.to(device)\n&nbsp; &nbsp; &nbsp; &nbsp; z = torch.randn(batch_size, latent_dim).to(device)\n&nbsp; &nbsp; &nbsp; &nbsp; fake_images = generator(z).detach()\n&nbsp; &nbsp; &nbsp; &nbsp; d_loss_real = discriminator(real_images)\n&nbsp; &nbsp; &nbsp; &nbsp; d_loss_fake = discriminator(fake_images)\n        # 判别器损失\n&nbsp; &nbsp; &nbsp; &nbsp; d_loss = -(torch.mean(d_loss_real) - torch.mean(d_loss_fake))\n&nbsp; &nbsp; &nbsp; &nbsp; discriminator.zero_grad()\n&nbsp; &nbsp; &nbsp; &nbsp; d_loss.backward()\n&nbsp; &nbsp; &nbsp; &nbsp; discriminator_optimizer.step()\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; # 更新生成器\n&nbsp; &nbsp; &nbsp; &nbsp; z = torch.randn(batch_size, latent_dim).to(device)\n&nbsp; &nbsp; &nbsp; &nbsp; fake_images = generator(z)\n&nbsp; &nbsp; &nbsp; &nbsp; g_loss = -torch.mean(discriminator(fake_images))\n&nbsp; &nbsp; &nbsp; &nbsp; generator.zero_grad()\n&nbsp; &nbsp; &nbsp; &nbsp; g_loss.backward()\n&nbsp; &nbsp; &nbsp; &nbsp; generator_optimizer.step()\n</code></pre><p>在每个训练周期内，对于每个批次的数据是这样处理的。</p><p>1.首先更新判别器，将真实图像和生成器生成的假图像输入到判别器中，计算真实图像的损失和生成图像的损失。通过反向传播更新判别器的参数，也就是利用梯度下降类的算法更新模型的权重。</p><p>2.接着更新生成器。生成一批随机噪声输入到生成器中生成图像，再将生成的图像输入到判别器中计算损失，之后反向传播更新生成器的参数。</p><p>3.重复以上步骤进行多个训练周期，直到达到预定的训练次数。</p><p>在上面代码中，关于判别器损失的计算你可能会有疑问，我这就为你解释一下。我们已经知道，判别器的目标是区分真实图像和生成图像，因此损失函数的设计是通过<strong>最大化真实图像的损失（d_loss_real）和最小化生成图像的损失（d_loss_fake）</strong>来实现的。</p><p>torch.mean(d_loss_real)计算了真实图像的平均损失，而torch.mean(d_loss_fake)计算了生成图像的平均损失。在这里，我们用减号将两个损失相减，是为了实现最大化真实图像损失和最小化生成图像损失的效果。通过这样的设计，我们希望判别器能够更好地区分真实图像和生成图像，从而提高生成器生成逼真图像的能力。</p><p>GAN最初的故事咱们就说到这里，它的精髓在于对抗训练思想。GAN通过生成器和判别器的竞争和学习，使得生成的图像逐渐趋近于真实图像。在现实世界中，GAN的应用场景广泛，包括图像合成、图像修复、图像风格转换等。</p><h2>走向高光的GAN</h2><p>最初的GAN并没有走进大众的视野，主要是因为GAN模型存在一些问题，比如同时训练生成器和判别器的过程并不稳定，最初的生成器生成内容不能被指定，生成的图像分辨率较低，模型推理在手机等设备上用时过长等等。</p><p>从14年GAN被提出以来，随着上面提到的这些问题逐一得到解决，GAN的发展经历了一系列的重要改进，终于迎来了它的高光时刻。那GAN是如何从平凡到卓越的呢？我们这就来看看。</p><h3>图像生成能力的进化：DCGAN/CGAN/WGAN</h3><p>最初的GAN模型使用全连接神经网络，对于图像生成任务来说，学习图像的空间结构和局部特征是非常困难的。</p><p>但2015年由Radford等人提出的<a href=\"https://arxiv.org/pdf/1511.06434.pdf\">深度卷积GAN（DCGAN）</a>给GAN带来了进化可能。主要创新就是引入卷积神经网络（CNN）结构，通过卷积层和反卷积层替代全连接层，使得生成器和判别器能够感知和利用图像的局部关系，更好地处理图像数据，从而生成更逼真的图像。</p><p>DCGAN的优点在于它的稳定性和生成效果。通过使用卷积神经网络，DCGAN能够更好地保持图像的空间结构和细节信息，生成的图像质量更高。此外，DCGAN的架构设计也为后续的GAN改进工作提供了重要的基础。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/58/9e670cdc2d08d1409e10a5e9df656258.jpg?wh=3936x2083\" alt=\"\"></p><p><a href=\"https://readpaper.com/pdf-annotate/note?pdfId=4500170052153794561&noteId=1848651293424178944\">条件GAN</a>，简称cGAN，允许我们在生成图像的过程中引入额外的条件信息。这样一来，我们可以控制生成图像的特征，比如生成特定类别的图像。比如在上面的数字图中，普通的GAN无法提前指定生成的数字是0到9中的哪一个，而cGAN便可以轻松控制要生成的数字是几。</p><p><a href=\"https://readpaper.com/pdf-annotate/note?pdfId=4665126035419840513&noteId=1848652981780710144\">Wasserstein GAN</a>，简称wGAN，是另一个重要的改进，它通过使用Wasserstein距离（瓦瑟斯坦距离，也被称为地面距离）来衡量生成图像和真实图像之间的差异，这样就能提升训练的稳定性和生成图像的质量。</p><p>Wasserstein距离用于比较两个概率分布之间的差异，量化了将一个分布转换为另一个分布所需的最小工作量。</p><p>这么说有点抽象，我再举个形象的例子帮你理解，假设我们有两堆沙子，一堆沙子分布在一个地方，另一堆沙子分布在另一个地方。现在我们想将第一堆沙子移动到第二堆沙子的位置，但我们只能以一定的速度和固定的容器大小来移动沙子。Wasserstein距离就是将第一堆沙子移动到第二堆沙子所需的最小总移动成本。在wGAN中，这两堆沙子就是真实数据分布和生成数据分布。</p><p>cGAN和wGAN生成图像的分辨率很低，分辨率提升是图像生成领域一个持续研究的方向，后来的 <a href=\"https://readpaper.com/pdf-annotate/note?pdfId=4500186031072108545&noteId=1848670213424382720\">PGGAN</a>、<a href=\"https://arxiv.org/abs/1809.11096\">BigGAN</a>、<a href=\"https://arxiv.org/abs/1812.04948\">StyleGAN</a> 等工作，将生成图像的分辨率提高了1024x1024分辨率之上。这个我们之后再讲。</p><h3>手机端实时特效：从Pix2Pix到CycleGAN</h3><p><a href=\"https://readpaper.com/pdf-annotate/note?pdfId=4500178853162541057&noteId=1848681503787931392\">Pix2Pix</a> 系列工作延续了cGAN的思想，将cGAN的条件换成了与原图尺寸大小相同的图片，可以实现类似轮廓图转真实图片、黑白图转彩色图等效果。是不是听起来很熟悉？没错，就是GAN时代的ControlNet！</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/98/ebe7925deea4ff2f11063a35600fc598.jpg?wh=4409x1850\" alt=\"\"></p><p>Pix2Pix最大的缺点就是训练需要大量目标图像与输入图像的图像对，优点是模型可以做到很轻很快，甚至能在很低端的手机上也能达到实时效果。从18年至今，我们在短视频平台上看到的各种实时变脸特效，比如年龄转换、性别编辑等特效，都是基于这个技术。</p><p>那么问题来了，获取成对的数据是困难且耗时的，那大量成对数据该怎么来呢？答案就是大名鼎鼎的 <a href=\"https://junyanz.github.io/CycleGAN/\">CycleGAN</a>。2017年Jun-Yan Zhu等人提出了CycleGAN，也就是循环一致性生成对抗网络。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/a2/56927b7896feb8fe104d95da335f20a2.jpg?wh=4409x2086\" alt=\"\"></p><p>CycleGAN的核心要点就是让两个不同领域的图像可以互相转换。它有两个生成器，分别是G（A→B）和G（B→A），它们的任务是把A领域的图像变成B领域的，反之亦然。同时，还有两个判别器，D_A和D_B，负责分辨A和B领域里的真实图像和生成的图像。</p><p>CycleGAN的关键点在于循环一致性损失。这个方法把原图像转换到目标领域，然后再转换回原来的领域，就可以确保生成的图像跟原图像差别不大。这种循环一致性约束让图像转换有了双向的一致性。我举个例子你就明白了，先把马变成斑马，再恢复成马，最后的图像应该跟原来的马图像很相似。</p><p>CycleGAN的优势是不需要成对的训练数据便可以实现图像转换，在很多图像转换任务上都表现得非常出色，比如风景、动物、风格等转换。再加上Pix2Pix，CycleGAN简直是制作短视频特效的神器。</p><h3>高分辨率的生成：StyleGAN系列工作</h3><p>之后，英伟达在2018年提出的生成对抗网络模型StyleGAN，彻底改变了GAN在图像合成和风格迁移方面的应用前景。与传统的GAN模型相比，StyleGAN在图像生成的质量、多样性和可控性方面取得了显著的突破。</p><p>StyleGAN的核心思想是用风格向量来控制生成图像的各种属性特点，并通过自适应实例归一化（AdaIN）把风格向量和生成器的特征图结合在一起。另外，用渐进式的生成器结构逐渐提高分辨率，这样可以提高训练的稳定性和生成图像的质量。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/d2/9d9e2667a3a45e692aac942884f13bd2.jpg?wh=3501x2170\" alt=\"\"></p><p>StyleGAN的应用非常广泛。它不仅可以用于生成高分辨率的逼真图像，还可以用于风格迁移、图像编辑和人脸合成等任务。StyleGAN生成的图像质量非常高，具有细致的纹理、自然的细节和丰富的变化，可用于各种创作、设计和研究领域。</p><p>StyleGAN 2和StyleGAN 3是StyleGAN的改进版本。它在StyleGAN的基础上引入了一系列重要的改进，进一步提升了图像生成的质量、稳定性和控制性。</p><p>另外还有一种叫做超分辨率生成对抗网络（SRGAN）的模型，它的目标是将低分辨率图像转换成高分辨率的图像。</p><p>讲到这估计你也发现了，GAN类型的生成模型非常多，我这里给你分享的是最有影响力的模型，对于其他GAN模型，有兴趣的话你可以了解下BigGAN、StarGAN、Progressive GAN等模型。</p><h2>GAN的应用场景</h2><p>无论过去还是现在，在图像生成、编辑和风格化领域，GAN都占据着非常重要的地位，而且是生成模型发展的重要里程碑。</p><h3>图像生成</h3><p>GAN可以生成各种类型的图像，包括自然风景、人脸、动物等。通过训练生成器网络，GAN能够从随机噪声中生成逼真的图像，为艺术创作、虚拟场景生成、游戏开发等领域提供了强大的工具。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/38/66f88e6b6968e006549b4b7610466938.jpg?wh=4173x2281\" alt=\"\"></p><h3>图像局部编辑</h3><p>GAN可以通过生成器网络实现对图像局部的编辑。通过将输入图像和编辑向量结合，可以精确地控制生成器网络，在特定区域编辑图像，比如改变图像的颜色、纹理或形状。这为图像编辑和修复提供了一种更加灵活和高效的方式。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/41/4cf074db7468143ca084518d39ed0041.jpg?wh=4409x1620\" alt=\"\"></p><h3>图像风格化</h3><p>GAN可以将图像转换为具有不同艺术风格的图像。通过训练一个生成器网络，可以将输入图像转换为特定风格的图像，如印象派、油画、水彩画等。这种图像风格化技术，广泛应用于艺术创作、图像处理和社交媒体滤镜等领域。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/f8/25104ece4c97c9c0ef27e0351100b4f8.jpg?wh=4409x1772\" alt=\"\"></p><h3>老照片修复</h3><p>另外，GAN可以用于修复老照片中的损坏或模糊的部分。通过训练生成器网络，GAN可以学习恢复损坏图像的细节和纹理，并生成高质量的修复结果。这在数字文化遗产保护和历史文档修复等领域具有重要的应用意义。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/75/b52acb79c9d887790a176eac55cbcb75.jpg?wh=4409x1392\" alt=\"\"></p><h2>与扩散模型狭路相逢</h2><p>尽管GAN逐渐走向高光，高分辨率生成、可控编辑能力等问题也得到了解决，GAN仍然存在着局限性。GAN的局限性主要表现在训练不稳定性、生成图像模糊、难以评估和控制生成质量等问题。此外，在图像风格化、图像编辑等任务中，通常是每个任务一个GAN。训练成本、数据需求量、使用场景局限性都是实际工作中的痛点。</p><p>而扩散模型在很大程度上解决了GAN的痛点。其实扩散模型并不是这两年的新鲜事，实际上，早在2015年就有人提出了图像扩散模型的概念。而GAN是2014年！二者几乎是前后脚同时提出的。</p><p>2021年之前GAN一直在图像生成领域处于制霸地位，直到2021年10月，一篇名为“<a href=\"https://arxiv.org/abs/2105.05233\">扩散模型在图像生成领域击败了GAN</a>” 的文章横空出世，扩散模型在图像生成领域的潜力才广为人知。</p><p>后来OpenAI的Glide、DALL-E 2，Google的Imagen、Parti，还有广为人知的Stable Diffusion、Midjourney，更是把基于扩散模型的AI绘画推向了新的高度。关于扩散模型，下一讲我们再深入探讨。</p><h2>GAN能否东山再起？</h2><p>有意思的是，热衷于GAN的研究人员并没有放弃。就在2023年3月，Adobe的学者提出了GigaGAN, 一个新的GAN架构。一听这个名字，就有一种大模型的味道。</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/f0/4f06153da946ec53e171353d56bac3f0.jpg?wh=3314x2261\" alt=\"\"></p><p>GigaGAN是一种具有突破性的GAN模型，它通过扩大模型规模，在多个方面展现了卓越的优势。比如，对于512分辨率图像的合成，仅需要0.13秒的推理速度，这比现有的工作在推理速度上高出了一个数量级。并且GigaGAN可以合成更高分辨率的图像，生成1600万像素的图像仅需3.66秒。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/c2/503238a43497e42ce61039e5c7a552c2.jpg?wh=4104x2299\" alt=\"\"></p><p>我们再来看看GAN领域的另一位明星——DragGAN。实际上，DragGAN是一种交互式图像操作方法，为各种GAN开发提供了一种神奇的功能，我们用鼠标简单拉伸图像，就能够生成全新的图像。</p><p>使用DragGAN非常简单，用户只需要设置一个起始点、一个目标点，以及希望修改的区域。接下来，模型会进行运动监督和点跟踪这两个步骤的迭代，然后修改原始图像。这种交互式的操作方式让图像的编辑变得非常直观和有趣。</p><h2>总结时刻</h2><p>这一讲，我们认识了生成对抗网络（GAN），了解了GAN的基本算法原理，还学习了经典的GAN算法和它的应用场景，比如图像生成、局部编辑、图像风格化、老照片修复等。</p><p>之后我们也探讨了GAN的局限性，这对我们后续学习和理解扩散模型也很有帮助。即便在扩散模型风靡的今天，GAN的改进版例如GigaGAN和DragGAN仍展示出令人惊叹的创新和功能。在AI绘画这个快速发展的领域中，我们也期待GAN技术能够取得更大的突破和进步，为我们带来更加出色的图像生成和编辑能力。</p><p>我把今天的重点内容梳理成了知识导图，供你参考复习。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/c9/7117a324d7fc5902a3edeb10228213c9.jpg?wh=2084x1619\" alt=\"\"></p><h2>思考题</h2><p>在基于扩散模型的AI绘画时代到来之前，你还见过哪些有意思的GAN的应用？背后的技术原理是怎样的？</p><p>欢迎你在留言区和我交流互动，如果这一讲对你有启发，别忘了分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"04｜实战项目（一）：用LoRA制作一个你自己的漫画故事","id":677274},"right":{"article_title":"06 | 颠覆者扩散模型：直观去理解加噪与去噪","id":681276}},"comments":[{"had_liked":false,"id":381711,"user_name":"Chengfei.Xu","can_delete":false,"product_type":"c1","uid":2440848,"ip_address":"浙江","ucode":"00A895B0B4CA3E","user_header":"https://static001.geekbang.org/account/avatar/00/25/3e/90/c86ec4ca.jpg","comment_is_top":false,"comment_ctime":1695719888,"is_pvip":false,"replies":[{"id":139073,"content":"赞总结记录精神","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1695871587,"ip_address":"北京","comment_id":381711,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"GAN的原理总结：\n\n生成对抗网络（GAN）由两个部分组成：生成器（Generator）与判别器（Discriminator），它们在模型训练的过程中会持续更新和对抗，最终达到平衡\n\n生成器的任务是根据输入的随机噪声，生成看起来像真实样本的新数据\n判别器的任务是辨别给定的真实数据是真样本还是生成器生成的伪造样本（它会收到一组真实数据和一组生成数据）\n\n在训练过程中，生成器和判别器互相对抗。生成器试图生成更逼真的样本来迷惑判别器，而判别器则努力辨别出生成器生成的伪造样本。它们之间会不断重复这个过程，持续更新自己的参数，达到相互改进和提升\n\n\n而随着训练的进行，生成器和判别器逐渐“学会”了“博弈”，最终会达到一个平衡状态，即生成器的样本会越来越逼真，判别器识别的准确率也会越来越高。通过这种对抗式的训练方式，GAN可以生成非常逼真的数据，使用场景有图像合成、图像修复、图像风格转换等等。","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628805,"discussion_content":"赞总结记录精神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695871588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380995,"user_name":"Wiliam","can_delete":false,"product_type":"c1","uid":2316536,"ip_address":"福建","ucode":"FD880525762D4D","user_header":"https://static001.geekbang.org/account/avatar/00/23/58/f8/8b9bb574.jpg","comment_is_top":false,"comment_ctime":1694568521,"is_pvip":false,"replies":[{"id":139006,"content":"你好。针对第一个问题，GigaGAN引入更多的模型参数、CLIP文本编码器和海量数据，能够通过文本生成高分辨率的清晰图像。在使用体验上和Stable Diffusion是类似的，但由于训练代码和模型权重没有开源，没有形成很大的影响力。在我看来，它的优势是图像质量，训练稳定性和生成质量控制的问题没有被解决。针对第二个问题，GAN的优点就是推理速度快，在单一任务上发挥稳定（比如变性别算法）。强强联合方面，短视频平台推出过一些特效，用Diffusion模型生产高质量风格化数据，使用Pix2Pix来实现手机端实时的风格化算法。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1695569422,"ip_address":"北京","comment_id":380995,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师请教一下：\n1. GAN 的局限性主要表现在训练不稳定性、生成图像模糊、难以评估和控制生成质量等问题，那么GigaGAN具体是解决了哪个问题呢？\n2. 抛开GAN的劣势，相比Diffusion，GAN有什么优点吗？有考虑过GAN的优点与Diffusion的优点强强联合吗？","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628606,"discussion_content":"你好。针对第一个问题，GigaGAN引入更多的模型参数、CLIP文本编码器和海量数据，能够通过文本生成高分辨率的清晰图像。在使用体验上和Stable Diffusion是类似的，但由于训练代码和模型权重没有开源，没有形成很大的影响力。在我看来，它的优势是图像质量，训练稳定性和生成质量控制的问题没有被解决。针对第二个问题，GAN的优点就是推理速度快，在单一任务上发挥稳定（比如变性别算法）。强强联合方面，短视频平台推出过一些特效，用Diffusion模型生产高质量风格化数据，使用Pix2Pix来实现手机端实时的风格化算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695569422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380422,"user_name":"xixi","can_delete":false,"product_type":"c1","uid":3678659,"ip_address":"北京","ucode":"19FE9E6D35D507","user_header":"https://static001.geekbang.org/account/avatar/00/38/21/c3/bb900ed2.jpg","comment_is_top":false,"comment_ctime":1693540585,"is_pvip":false,"replies":[{"id":138677,"content":"你好~感谢反馈！我们的音频同学会再接再厉😁。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1694269910,"ip_address":"北京","comment_id":380422,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"giga读错了","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627570,"discussion_content":"你好~感谢反馈！我们的音频同学会再接再厉😁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694269910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379498,"user_name":"xingliang","can_delete":false,"product_type":"c1","uid":1146320,"ip_address":"立陶宛","ucode":"C6E35A4BD33B78","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/d0/48c13a76.jpg","comment_is_top":false,"comment_ctime":1692018468,"is_pvip":false,"replies":[{"id":138311,"content":"赞，自行总结也是加深记忆理解的好方法～","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1692326733,"ip_address":"北京","comment_id":379498,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"BigGAN：BigGAN 是为了实现高分辨率、高质量的图像生成而设计的。它的特点是在模型中引入了大量的参数，利用更大的批次大小和更多的特征通道。这样可以实现高分辨率且内容丰富的图像生成。但同时，由于模型的复杂性，它需要大量的计算资源和时间来训练。\n\nStarGAN：不同于其他 GANs 专注于单一领域或任务，StarGAN 能够在多个领域之间进行图像转换，例如，它可以在一个模型中实现人脸属性（如头发颜色、性别等）的多种转换。StarGAN 的核心是使用一个共同的生成器和判别器，以及域标签，使其可以对多个域进行学习和转换。\n\nProgressive GAN (逐步增长的 GAN，也被称为 PGGAN)：Progressive GAN 的主要特点是它从低分辨率开始训练，然后逐渐添加更多的层来增加分辨率。这种逐步的方法使得模型在初期的训练更稳定，并且能够逐渐适应更高分辨率的图像。这使得模型能够生成高质量且高分辨率的图像。","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625920,"discussion_content":"赞，自行总结也是加深记忆理解的好方法～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692326733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378554,"user_name":"xueerfei007","can_delete":false,"product_type":"c1","uid":1155062,"ip_address":"浙江","ucode":"EF3FE821E5B54A","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/f6/7431e82e.jpg","comment_is_top":false,"comment_ctime":1690422302,"is_pvip":false,"replies":[{"id":137960,"content":"下一讲已经更新了，继续追更吧～","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1690510782,"ip_address":"北京","comment_id":378554,"utype":2}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"一口气看完，催更","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624371,"discussion_content":"下一讲已经更新了，继续追更吧～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690510782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":1,"child_discussions":[{"author":{"id":1155062,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9f/f6/7431e82e.jpg","nickname":"xueerfei007","note":"","ucode":"EF3FE821E5B54A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":624372,"discussion_content":"已经看完了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690510975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":624371,"ip_address":"浙江","group_id":0},"score":624372,"extra":""}]}]},{"had_liked":false,"id":378541,"user_name":"AI悦创","can_delete":false,"product_type":"c1","uid":1525309,"ip_address":"福建","ucode":"D1007711CB0A79","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/3d/55653953.jpg","comment_is_top":false,"comment_ctime":1690384317,"is_pvip":false,"replies":[{"id":137938,"content":"你好。如果非要说破绽，笔触、配色还是有差异的（当然，我并不是艺术鉴赏家，这个问题见仁见智）。这里我们是举一个例子，为了引出GAN中生成器、判别器的作用。希望能对你有所帮助。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1690387946,"ip_address":"北京","comment_id":378541,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"这句：下面我放了两张例子。第一个例子是张大千模仿石涛的画作，第二个例子是贝特莱奇 14 岁时仿照毕加索的画作。假如你是艺术鉴赏家，能否发现这些仿作的破绽呢？\n\n所以破绽是什么？（到这里，我还没往下看，想先提问一下）","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624282,"discussion_content":"你好。如果非要说破绽，笔触、配色还是有差异的（当然，我并不是艺术鉴赏家，这个问题见仁见智）。这里我们是举一个例子，为了引出GAN中生成器、判别器的作用。希望能对你有所帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690387946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378534,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1690378019,"is_pvip":false,"replies":[{"id":137937,"content":"你好。针对Q1，2019年风靡一时的「ZAO」、各种DeepFake换脸软件都是GAN的具体产品；抖音、快手各种实时的人像特效（年龄、性别、表情编辑）基本也都是GAN；SD的具体产品当前有很多，比如Midjourney、最近大火的妙鸭相机、Lensa相机、Wink相机等等，以及去年年底以来各种AIGC短视频特效。针对Q2，在GAN和扩散模型中提到的噪声，可以理解为高斯噪声（都是随机噪声），这样才能保证最终生成内容的多样性。针对Q3，模型训练一般使用Python，训练框架可以是Pytorch、TensorFlow等（对于矩阵运算进行各种加速处理）；针对Q4，GAN和WebUI不适合制作确定性的流程图、时间轴、链路图等，当前主要用于创意图片的生成。希望能帮助到你。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1690387674,"ip_address":"北京","comment_id":378534,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"请教老师几个问题：\nQ1：GAN有具体产品吗？\n扩散模型有具体产品，比如SD，GAN有具体产品吗？\nQ2：GAN的生成器加随机噪声，请问有非随机噪声吗？\nQ3：模型的训练一般用什么语言？\nQ4：GAN或webUI能制作技术文档上的图吗？比如写一个技术文档，上面有数据链应用图等，可以制作这一类的技术图片吗？","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624281,"discussion_content":"你好。针对Q1，2019年风靡一时的「ZAO」、各种DeepFake换脸软件都是GAN的具体产品；抖音、快手各种实时的人像特效（年龄、性别、表情编辑）基本也都是GAN；SD的具体产品当前有很多，比如Midjourney、最近大火的妙鸭相机、Lensa相机、Wink相机等等，以及去年年底以来各种AIGC短视频特效。针对Q2，在GAN和扩散模型中提到的噪声，可以理解为高斯噪声（都是随机噪声），这样才能保证最终生成内容的多样性。针对Q3，模型训练一般使用Python，训练框架可以是Pytorch、TensorFlow等（对于矩阵运算进行各种加速处理）；针对Q4，GAN和WebUI不适合制作确定性的流程图、时间轴、链路图等，当前主要用于创意图片的生成。希望能帮助到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690387674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378700,"user_name":"yanyu-xin","can_delete":false,"product_type":"c1","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1690634040,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"看不懂伪代码。将代码复制给极客的&quot;AI学习助手“，回答如下：\n这段代码是一个用于训练生成对抗网络（GAN）的循环。下面是对代码的逐行分析：\n\nfor epoch in range(num_epochs):：外层循环，用于控制训练的轮数。\n\nfor batch_data in data_loader:：内层循环，用于遍历训练数据集中的每个批次。\n\nreal_images = batch_data.to(device)：将真实图像数据移动到指定的设备（如GPU）上。\n\nz = torch.randn(batch_size, latent_dim).to(device)：从标准正态分布中生成一组随机噪声向量z，并将其移动到指定的设备上。\n\nfake_images = generator(z).detach()：使用生成器网络（generator）和随机噪声z生成一组假图像，并将其与生成器的参数的计算图分离。\n\nd_loss_real = discriminator(real_images)：将真实图像输入判别器网络（discriminator）中，计算真实图像的判别器损失。\n\nd_loss_fake = discriminator(fake_images)：将假图像输入判别器网络中，计算假图像的判别器损失。\n\nd_loss = -(torch.mean(d_loss_real) - torch.mean(d_loss_fake))：计算判别器的总损失，这里使用了最大化判别器对真实图像的预测概率和最小化判别器对假图像的预测概率的策略。\n\ndiscriminator.zero_grad()：清除判别器的梯度。\n\nd_loss.backward()：反向传播，计算判别器的梯度。\n\ndiscriminator_optimizer.step()：更新判别器的参数，使用优化器进行梯度下降。\n\nz = torch.randn(batch_size, latent_dim).to(device)：重新生成一组随机噪声向量z，并将其移动到指定的设备上。\n\nfake_images = generator(z)：使用生成器网络和新的随机噪声z生成一组新的假图像。\n\ng_loss = -torch.mean(discriminator(fake_images))：计算生成器的损失，这里使用了最大化判别器对假图像的预测概率的策略。\n\ngenerator.zero_grad()：清除生成器的梯度。\n\ng_loss.backward()：反向传播，计算生成器的梯度。\n\ngenerator_optimizer.step()：更新生成器的参数，使用优化器进行梯度下降。\n\n这段代码的作用是通过交替地训练判别器和生成器，使生成器能够生成逼真的假图像，同时判别器能够准确地区分真实图像和假图像。","like_count":5},{"had_liked":false,"id":387395,"user_name":"大将","can_delete":false,"product_type":"c1","uid":3788930,"ip_address":"北京","ucode":"DEF8F5B4A2DFE3","user_header":"https://static001.geekbang.org/account/avatar/00/39/d0/82/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1707188934,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"最大化真实图像的损失（d_loss_real）和最小化生成图像的损失（d_loss_fake），个人感觉这个描述并不准确，最大化和最小化容易引起歧义","like_count":0},{"had_liked":false,"id":378756,"user_name":"Geek_0bac2d","can_delete":false,"product_type":"c1","uid":3678718,"ip_address":"广东","ucode":"558018D495BDC1","user_header":"","comment_is_top":false,"comment_ctime":1690723131,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"AI生成的代码解释\nfor epoch in range(num_epochs):\n    for batch_data in data_loader:\n        # 更新判别器\n        real_images = batch_data.to(device)  # 获取真实图像数据\n        z = torch.randn(batch_size, latent_dim).to(device)  # 生成随机噪声向量\n        fake_images = generator(z).detach()  # 通过生成器生成假图像，并将其与生成器的梯度计算图分离\n\n        d_loss_real = discriminator(real_images)  # 判别器对真实图像的判别结果\n        d_loss_fake = discriminator(fake_images)  # 判别器对假图像的判别结果\n\n        # 判别器损失\n        d_loss = -(torch.mean(d_loss_real) - torch.mean(d_loss_fake))  # 计算判别器的损失\n\n        discriminator.zero_grad()  # 清空判别器的梯度\n        d_loss.backward()  # 反向传播计算判别器的梯度\n        discriminator_optimizer.step()  # 利用优化器更新判别器的参数\n\n        # 更新生成器\n        z = torch.randn(batch_size, latent_dim).to(device)  # 生成新的随机噪声向量\n        fake_images = generator(z)  # 通过生成器生成新的假图像\n\n        g_loss = -torch.mean(discriminator(fake_images))  # 判别器对新的假图像的判别结果作为生成器的损失\n\n        generator.zero_grad()  # 清空生成器的梯度\n        g_loss.backward()  # 反向传播计算生成器的梯度\n        generator_optimizer.step()  # 利用优化器更新生成器的参数\n","like_count":0}]}