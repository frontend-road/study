{"id":181091,"title":"39 | 信息流设计（一）：通用信息流系统的推模式要如何做？","content":"<p>你好，我是唐扬。</p><p>前两节课中，我带你探究了如何设计和实现互联网系统中一个常见模块——计数系统。它的业务逻辑其实非常简单，基本上最多只有三个接口，获取计数、增加计数和重置计数。所以我们在考虑方案的时候考察点也相对较少，基本上使用缓存就可以实现一个兼顾性能、可用性和鲁棒性的方案了。然而大型业务系统的逻辑会非常复杂，在方案设计时通常需要灵活运用多种技术，才能共同承担高并发大流量的冲击。那么接下来，我将带你了解如何设计社区系统中最为复杂、并发量也最高的信息流系统。这样，你可以从中体会怎么应用之前学习的组件了。</p><p>最早的信息流系统起源于微博，我们知道，微博是基于关注关系来实现内容分发的，也就是说，如果用户A关注了用户B，那么用户A就需要在自己的信息流中，实时地看到用户B发布的最新内容，<strong>这是微博系统的基本逻辑，也是它能够让信息快速流通、快速传播的关键。</strong> 由于微博的信息流一般是按照时间倒序排列的，所以我们通常把信息流系统称为TimeLine（时间线）。那么当我们设计一套信息流系统时需要考虑哪些点呢？</p><h2>设计信息流系统的关注点有哪些</h2><p>首先，我们需要关注延迟数据，也就是说，你关注的人发了微博信息之后，信息需要在短时间之内出现在你的信息流中。</p><!-- [[[read_end]]] --><p>其次，我们需要考虑如何支撑高并发的访问。信息流是微博的主体模块，是用户进入到微博之后最先看到的模块，因此它的并发请求量是最高的，可以达到每秒几十万次请求。</p><p>最后，信息流拉取性能直接影响用户的使用体验。微博信息流系统中需要聚合的数据非常多，你打开客户端看一看，想一想其中需要聚合哪些数据？主要是微博的数据，用户的数据，除此之外，还需要查询微博是否被赞、评论点赞转发的计数、是否被关注拉黑等等。聚合这么多的数据就需要查询多次缓存、数据库、计数器，而在每秒几十万次的请求下，如何保证在100ms之内完成这些查询操作，展示微博的信息流呢？这是微博信息流系统最复杂之处，也是技术上最大的挑战。</p><p>那么我们怎么设计一套支撑高并发大流量的信息流系统呢？一般来说，会有两个思路：一个是基于推模式，另一个是基于拉模式。</p><h2>如何基于推模式实现信息流系统</h2><p>什么是推模式呢？推模式是指用户发送一条微博后，主动将这条微博推送给他的粉丝，从而实现微博的分发，也能以此实现微博信息流的聚合。</p><p>假设微博系统是一个邮箱系统，那么用户发送的微博可以认为是进入到一个发件箱，用户的信息流可以认为是这个人的收件箱。推模式的做法是在用户发布一条微博时，除了往自己的发件箱里写入一条微博，同时也会给他的粉丝收件箱里写入一条微博。</p><p>假如用户A有三个粉丝B、C、D，如果用SQL表示A发布一条微博时系统做的事情，那么就像下面展示的这个样子：</p><pre><code>insert into outbox(userId, feedId, create_time) values(&quot;A&quot;, $feedId, $current_time); //写入A的发件箱\ninsert into inbox(userId, feedId, create_time) values(&quot;B&quot;, $feedId, $current_time); //写入B的收件箱\ninsert into inbox(userId, feedId, create_time) values(&quot;C&quot;, $feedId, $current_time); //写入C的收件箱\ninsert into inbox(userId, feedId, create_time) values(&quot;D&quot;, $feedId, $current_time); //写入D的收件箱\n</code></pre><p>当我们要查询B的信息流时，只需要执行下面这条SQL就可以了：</p><pre><code>select feedId from inbox where userId = &quot;B&quot;;\n</code></pre><p>如果你想要提升读取信息流的性能，可以把收件箱的数据存储在缓存里面，每次获取信息流的时候直接从缓存中读取就好了。</p><h2>推模式存在的问题和解决思路</h2><p>你看，按照这个思路就可以实现一套完整的微博信息流系统，也比较符合我们的常识。但是，这个方案会存在一些问题。</p><p>首先，就是消息延迟。在讲系统通知未读数的时候，我们曾经提到过，不能采用遍历全量用户给他们加未读数的方式，原因是遍历一次全量用户的延迟很高，而推模式也有同样的问题。对明星来说，他们的粉丝数庞大，如果在发微博的同时还要将微博写入到上千万人的收件箱中，那么发微博的响应时间会非常慢，用户根本没办法接受。因此，我们一般会使用消息队列来消除写入的峰值，但即使这样，由于写入收件箱的消息实在太多，你还是有可能在几个小时之后才能够看到明星发布的内容，这会非常影响用户的使用体验。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/b0/c2e64231a2b6c52082567f8422069cb0.jpg?wh=1142*474\" alt=\"\"></p><p>在推模式下，你需要关注的是微博的写入性能，因为用户每发一条微博，都会产生多次的数据库写入。为了尽量减少微博写入的延迟，我们可以从两方面来保障。</p><ul>\n<li>一方面，在消息处理上，你可以启动多个线程并行地处理微博写入的消息。</li>\n<li>另一方面，由于消息流在展示时可以使用缓存来提升读取性能，所以我们应该尽量保证数据写入数据库的性能，必要时可以采用写入性能更好的数据库存储引擎。</li>\n</ul><p>比如，我在网易微博的时候就是采用推模式来实现微博信息流的。当时为了提升数据库的插入性能，我们采用了TokuDB作为MySQL的存储引擎，这个引擎架构的核心是一个名为分形树的索引结构（Fractal Tree Indexes）。我们知道数据库在写入的时候会产生对磁盘的随机写入，造成磁盘寻道，影响数据写入的性能；而分形树结构和我们在<a href=\"https://time.geekbang.org/column/article/147946\">11讲</a>中提到的LSM一样，可以将数据的随机写入转换成顺序写入，提升写入的性能。另外，TokuDB相比于InnoDB来说，数据压缩的性能更高，经过官方的测试，TokuDB可以将存储在InnoDB中的4TB的数据压缩到200G，这对于写入数据量很大的业务来说也是一大福音。然而，相比于InnoDB来说，TokuDB的删除和查询性能都要差一些，不过可以使用缓存加速查询性能，而微博的删除频率不高，因此这对于推模式下的消息流来说影响有限。</p><p>其次，存储成本很高。<strong>在这个方案中我们一般会这么来设计表结构：</strong></p><p>先设计一张Feed表，这个表主要存储微博的基本信息，包括微博ID、创建人的ID、创建时间、微博内容、微博状态（删除还是正常）等等，它使用微博ID做哈希分库分表；</p><p>另外一张表是用户的发件箱和收件箱表，也叫做TimeLine表（时间线表），主要有三个字段，用户ID、微博ID和创建时间。它使用用户的ID做哈希分库分表。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/6c/71b4b33d966a7e34a62f635a1a23646c.jpg?wh=1142*678\" alt=\"\"></p><p>由于推模式需要给每一个用户都维护一份收件箱的数据，所以数据的存储量极大，你可以想一想，谢娜的粉丝目前已经超过1.2亿，那么如果采用推模式的话，谢娜每发送一条微博就会产生超过1.2亿条的数据，多么可怕！<strong>我们的解决思路是：</strong> 除了选择压缩率更高的存储引擎之外，还可以定期地清理数据，因为用户更加关注最近几天发布的数据，通常不会翻阅很久之前的微博，所以你可以定期地清理用户的收件箱，比如只保留最近1个月的数据就可以了。</p><p>除此之外，推模式下我们还通常会遇到扩展性的问题。在微博中有一个分组的功能，它的作用是你可以将关注的人分门别类，比如你可以把关注的人分为“明星”“技术”“旅游”等类别，然后把杨幂放入“明星”分类里，将InfoQ放在“技术”类别里。<strong>那么引入了分组之后，会对推模式有什么样的影响呢？</strong> 首先是一个用户不会只有一个收件箱，比如我有一个全局收件箱，还会针对每一个分组再分别创建一个收件箱，而一条微博在发布之后也需要被复制到更多的收件箱中了。</p><p>如果杨幂发了一条微博，那么不仅需要插入到我的收件箱中，还需要插入到我的“明星”收件箱中，这样不仅增加了消息分发的压力，同时由于每一个收件箱都需要单独存储，所以存储成本也就更高。</p><p>最后，在处理取消关注和删除微博的逻辑时会更加复杂。比如当杨幂删除了一条微博，那么如果要删除她所有粉丝收件箱中的这条微博，会带来额外的分发压力，我们还是尽量不要这么做。</p><p>而如果你将一个人取消关注，那么需要从你的收件箱中删除这个人的所有微博，假设他发了非常多的微博，那么即使你之后很久不登录，也需要从你的收件箱中做大量的删除操作，有些得不偿失。<strong>所以你可以采用的策略是：</strong> 在读取自己信息流的时候，判断每一条微博是否被删除以及你是否还关注这条微博的作者，如果没有的话，就不展示这条微博的内容了。使用了这个策略之后，就可以尽量减少对于数据库多余的写操作了。</p><p><strong>那么说了这么多，推模式究竟适合什么样的业务的场景呢？</strong> 在我看来，它比较适合于一个用户的粉丝数比较有限的场景，比如说微信朋友圈，你可以理解为我在微信中增加一个好友是关注了他也被他关注，所以好友的上限也就是粉丝的上限（朋友圈应该是5000）。有限的粉丝数可以保证消息能够尽量快地被推送给所有的粉丝，增加的存储成本也比较有限。如果你的业务中粉丝数是有限制的，那么在实现以关注关系为基础的信息流时，也可以采用推模式来实现。</p><h2>课程小结</h2><p>以上就是本节课的全部内容了。本节课我带你了解以推模式实现信息流的方案以及这个模式会存在哪些问题和解决思路，这里你需要了解的重点是：</p><ol>\n<li>推模式就是在用户发送微博时，主动将微博写入到他的粉丝的收件箱中；</li>\n<li>推送信息是否延迟、存储的成本、方案的可扩展性以及针对取消关注和微博删除的特殊处理是推模式的主要问题；</li>\n<li>推模式比较适合粉丝数有限的场景。</li>\n</ol><p>你可以看到，其实推模式并不适合微博这种动辄就有上千万粉丝的业务，因为这种业务特性带来的超高的推送消息延迟以及存储成本是难以接受的，因此，我们要么会使用基于拉模式的实现，要么会使用基于推拉结合模式的实现。那么这两种方案是如何实现的呢？他们在实现中会存在哪些坑呢？又要如何解决呢？我将在下节课中带你着重了解。</p><h2>一课一思</h2><p>你是否设计过这种信息流系统呢？如果你来设计的话，要如何解决推模式下的延迟问题呢？欢迎在留言区与我分享你的经验。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"38 | 计数系统设计（二）：50万QPS下如何设计未读数系统？","id":180211},"right":{"article_title":"40 |  信息流设计（二）：通用信息流系统的拉模式要如何做？","id":181886}},"comments":[{"had_liked":false,"id":164796,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1577092727,"is_pvip":true,"replies":[{"id":"63052","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240449,"ip_address":"","comment_id":164796,"utype":1}],"discussion_count":1,"race_medal":0,"score":"194850621047","product_id":100035801,"comment_content":"信息流的架构演化<br>1、一开始很简单，两张表，一张存储关注关系 ，一张存储微博消息，用户A发微博就是在相应的微博消息表中写入一条即可，用户B读微博也很简单，就是先得到自己关注的用户列表，然后定时去存储微博消息表中去读取自己关注的微博展示出来即可，优点是只有一份存储，缺点也很明显，对于这张表的读操作太多了，并发过大。<br>2、改成推模式，即写扩散机制，用户A发送一条消息，除了写入微博消息表以外，还要写入关注它的所有的用户的收件箱中（这个可以用redis来实现），然后用户去收件箱中读取消息即可，优点就是自己读自己的消息，跟别人没有竞争，缺点是多余存储，在大V用户发微博消息中有延迟，同时写入次数太多了，同时取消关注什么的也比较难操作。<br>3、后面改成了推拉结合的方式，即对于大V用拉模式，对于普通的用户继续用推模式。<br>4、后面出现了基于时间分区的拉模式，个人觉得可以结合推模式来进行相应的弥补。","like_count":46,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478896,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164657,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1577067191,"is_pvip":false,"replies":[{"id":"63054","content":"是的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240522,"ip_address":"","comment_id":164657,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31641838263","product_id":100035801,"comment_content":"我觉得推模式最大的问题是没有做到按需传递信息，可能一个粉丝的用户中，只有很少比例才需要较高的时效性，这些用户不应该消耗太多的系统资源。<br><br>此外，推模式中的写操作太多了，一个人发送，其他人在本质上都是读取这条消息，却也引发了写入操作。<br><br>应该把新的信息写入到若干存储（包括缓存上），然后选择适当的策论，让用户去这些存储上读取数据。这样可以大大降低写入操作的数量。","like_count":7,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478850,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98462,"discussion_content":"我也有这个想法 感觉这个应该就是下节课的拉模式了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577164334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173619,"user_name":"追逐繁星的孩纸~","can_delete":false,"product_type":"c1","uid":1593884,"ip_address":"","ucode":"69DC37A9E39C7E","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/1c/e902de0f.jpg","comment_is_top":false,"comment_ctime":1579617708,"is_pvip":true,"replies":[{"id":"67352","content":"如果关注的人数不多，消息写入没有瓶颈的话，可以继续使用推模式。消息的乱序问题可以通过别的方式解决，比如如果使用Kafka，那么可以把一个人的消息写入到一个固定的partition","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579694351,"ip_address":"","comment_id":173619,"utype":1}],"discussion_count":1,"race_medal":4,"score":"23054454188","product_id":100035801,"comment_content":"老师，我有个疑问，我们是关注文档，使用推模式，新增和更新文档时，就查询有哪些用户关注了这篇文档，然后新增或者更新这些用户的收件箱。这样导致有个问题，一个是写入和更新操作比较多，另外一个是有重复消息或者消息乱序时，会重复更新用户动态或者把用户的动态更新为更早的。因为我们的关注用户量比较少，所以目前还能使用推模式。我想过使用缓存来缓存文档id和操作时间，每次新增或者更新动态时先比较下操作时间，但就需要加分布式锁。这种情况老师有什么建议么？","like_count":6,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482141,"discussion_content":"如果关注的人数不多，消息写入没有瓶颈的话，可以继续使用推模式。消息的乱序问题可以通过别的方式解决，比如如果使用Kafka，那么可以把一个人的消息写入到一个固定的partition","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579694351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205061,"user_name":"正在减肥的胖籽。","can_delete":false,"product_type":"c1","uid":1033728,"ip_address":"","ucode":"99E2E4DF599236","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/00/683bb4f0.jpg","comment_is_top":false,"comment_ctime":1586518109,"is_pvip":false,"replies":[{"id":"78096","content":"只有一万的关注，这样做最简单了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1587473374,"ip_address":"","comment_id":205061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14471419997","product_id":100035801,"comment_content":"1.目前我公司的产品，我的做法没用数据库，全部是用redis来存储，用的就是推的模式。一个用户最多关注也就1万多个用户，当发了一条微博，就扔到消息队里面，消息队列再去拉取用户所有关注的人。一个一个放到对应粉丝的redis中。","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491370,"discussion_content":"只有一万的关注，这样做最简单了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587473374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204145,"user_name":"胖胖程","can_delete":false,"product_type":"c1","uid":1296832,"ip_address":"","ucode":"03C4D56A114078","user_header":"https://static001.geekbang.org/account/avatar/00/13/c9/c0/730ea586.jpg","comment_is_top":false,"comment_ctime":1586341411,"is_pvip":false,"replies":[{"id":"78099","content":"👍","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1587473459,"ip_address":"","comment_id":204145,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14471243299","product_id":100035801,"comment_content":"推的时候只给在线用户推一个未读消息数的提示，然后用户在点击未读消息的时候再去拉消息列表。推拉结合着用。","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491087,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587473459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553900,"discussion_content":"这个不错，既达到了时效性，又降低了技术的实现复杂度！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646128357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164627,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1577062668,"is_pvip":false,"replies":[{"id":"63055","content":"是的，推拉结合 是这样的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240561,"ip_address":"","comment_id":164627,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14461964556","product_id":100035801,"comment_content":"推模式中可以给用户分优先级，优先推送优先级高的用户的方式来提升用户体验。","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478845,"discussion_content":"是的，推拉结合 是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215714,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589082136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10179016728","product_id":100035801,"comment_content":"目前还没做过这样的系统，不过想一想数据量确实大一亿个粉丝，每发一条消息需要写一亿条消息，确实有些恐怖，这些大v如果是话唠，那分分钟几亿几十亿的消息需要写入，想想就头疼。存储延迟会比较大和存储空间会花费许多。<br>不知道微博的数据是怎么存储的？所有数据永久保存嘛？压缩存储？而且为了灾备会分区域存储多份？微博的存储系统做的也一定能讲究啦😄","like_count":2,"discussions":[{"author":{"id":2445197,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4f/8d/36311efc.jpg","nickname":"锟斤拷","note":"","ucode":"194F4082A2546A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401568,"discussion_content":"直接念特朗普的ID","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633693430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166677,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1577542387,"is_pvip":false,"replies":[{"id":"63856","content":"一般收件箱都是记录ID，也就是对应关系，但即使这样，写入量依然很高","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577586588,"ip_address":"","comment_id":166677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10167476979","product_id":100035801,"comment_content":"1.根据分组又建一张表。应该不存全量数据吧，太浪费空间。存与全局收件箱的id映射就好了吧。<br><br>2.这个推模式确实有点恐怖。大量写操作简直就是噩梦。硬刚实现这种大量写是不现实的。所以改成拉模式，在登陆时按需拉取。但全量的按需拉取，登陆时的信息同步延迟也是不能接受，所以推拉结合以及更细力度的操作，满满都是权衡。长见识。<br><br>3.拉可以批量可以压缩，其实优化的空间会大点。","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479584,"discussion_content":"一般收件箱都是记录ID，也就是对应关系，但即使这样，写入量依然很高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577586588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164883,"user_name":"skyeinfo","can_delete":false,"product_type":"c1","uid":1017772,"ip_address":"","ucode":"FA15D6A5E5B959","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/ac/30a0bd5a.jpg","comment_is_top":false,"comment_ctime":1577105224,"is_pvip":false,"replies":[{"id":"63050","content":"微博是只存储发件箱，并且是按照时间来分为多级缓存，比如把最近五天的微博ID存储到一组缓存里面，所以可以存储全量。<br><br>考虑过滤的话，也会存储一些用于过滤的flag信息","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240361,"ip_address":"","comment_id":164883,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5872072520","product_id":100035801,"comment_content":"老师，对于信息流的缓存存储有什么比较好的建议呢？因为考虑到分页、过滤等筛选条件。","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478932,"discussion_content":"微博是只存储发件箱，并且是按照时间来分为多级缓存，比如把最近五天的微博ID存储到一组缓存里面，所以可以存储全量。\n\n考虑过滤的话，也会存储一些用于过滤的flag信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296369,"discussion_content":"多级缓存是一个不错的方案；具体的分页如何实现呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596523201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164582,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1577032604,"is_pvip":false,"replies":[{"id":"63056","content":"存在即合理~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240581,"ip_address":"","comment_id":164582,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5871999900","product_id":100035801,"comment_content":"跟微博比，我們的信息流弱爆了，目前都是用elasticsearch做信息流拉模式，閱讀之後就給當前頁的數據批量設置狀態，拉到下一頁就給下一頁數據更新狀態","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478825,"discussion_content":"存在即合理~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96426,"discussion_content":"请问更新状态是指？数据“已读未读”标记吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577064202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342215,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1650107572,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650107572","product_id":100035801,"comment_content":"推的模式，需要知道对方地址，当接受对象多则发送方压力大，实时性有影响，对方不怎么登录也要触发及时性的推送没有优先级。<br>拉的按需消费，登录了就查询消息。实时性如果关系数量不大则推实时性高，否则拉性能高。<br>拉的模式下保存下目标对象的消费进度就可以。","like_count":0},{"had_liked":false,"id":164673,"user_name":"Luciano李鑫","can_delete":false,"product_type":"c1","uid":1329995,"ip_address":"","ucode":"5FBE5F86FD5B2C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/4b/97926cba.jpg","comment_is_top":false,"comment_ctime":1577070380,"is_pvip":false,"replies":[{"id":"63053","content":"是需要存储微博ID，不存储微博的内容，我不知道你提到的存储关联消息指的是不是这个","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240501,"ip_address":"","comment_id":164673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577070380","product_id":100035801,"comment_content":"不理解为什么基于推模式要给每个用户甚至每个分组存储一份完整的消息，为什么不能用存储关联关系，计算得到推送的消息呢？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478859,"discussion_content":"是需要存储微博ID，不存储微博的内容，我不知道你提到的存储关联消息指的是不是这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}