{"id":107183,"title":"34 | 理解虚拟机：你在云上拿到的计算机是什么样的？","content":"<p>上世纪60年代，计算机还是异常昂贵的设备，实际的计算机使用需求要面临两个挑战。第一，计算机特别昂贵，我们要尽可能地让计算机忙起来，一直不断地去处理一些计算任务。第二，很多工程师想要用上计算机，但是没有能力自己花钱买一台，所以呢，我们要让很多人可以共用一台计算机。</p><h2>缘起分时系统</h2><p>为了应对这两个问题，<a href=\"https://en.wikipedia.org/wiki/Time-sharing\">分时系统</a>的计算机就应运而生了。</p><p>无论是个人用户，还是一个小公司或者小机构，你都不需要花大价钱自己去买一台电脑。你只需要买一个输入输出的终端，就好像一套鼠标、键盘、显示器这样的设备，然后通过电话线，连到放在大公司机房里面的计算机就好了。这台计算机，会自动给程序或任务分配计算时间。你只需要为你花费的“计算时间”和使用的电话线路付费就可以了。比方说，比尔·盖茨中学时候用的学校的计算机，就是GE的分时系统。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/9d/d107e645e1f849ebcafab0e4d4b73a9d.png?wh=1280*864\" alt=\"\"></p><center><a href=\"https://commons.wikimedia.org/wiki/File:Unix_Timesharing_UW-Madison_1978.jpeg\">图片来源</a></center><center><span class=\"reference\">图片里面的“计算机”其实只是一个终端而已，并没有计算能力，要通过电话线连接到实际的计算机上，才能完成运算</span></center><h2>从“黑色星期五”到公有云</h2><p>现代公有云上的系统级虚拟机能够快速发展，其实和分时系统的设计思路是一脉相承的，这其实就是来自于电商巨头亚马逊大量富余的计算能力。</p><p>和国内有“双十一”一样，美国会有感恩节的“<a href=\"https://en.wikipedia.org/wiki/Black_Friday_(shopping)\">黑色星期五</a>（Black Friday）”和“<a href=\"https://en.wikipedia.org/wiki/Cyber_Monday\">网络星期一</a>（Cyber Monday）”，这样一年一度的大型电商促销活动。几天的活动期间，会有大量的用户进入亚马逊这样的网站，看商品、下订单、买东西。这个时候，整个亚马逊需要的服务器计算资源可能是平时的数十倍。</p><!-- [[[read_end]]] --><p>于是，亚马逊会按照“黑色星期五”和“网络星期一”的用户访问量，来准备服务器资源。这个就带来了一个问题，那就是在一年的365天里，有360天这些服务器资源是大量空闲的。要知道，这个空闲的服务器数量不是一台两台，也不是几十几百台。根据媒体的估算，亚马逊的云服务器AWS在2014年就已经超过了150万台，到了2019年的今天，估计已经有超过千万台的服务器。</p><p>平时有这么多闲着的服务器实在是太浪费了，所以，亚马逊就想把这些服务器给租出去。出租物理服务器当然是可行的，但是却不太容易自动化，也不太容易面向中小客户。</p><p>直接出租物理服务器，意味着亚马逊只能进行服务器的“整租”，这样大部分中小客户就不愿意了。为了节约数据中心的空间，亚马逊实际用的物理服务器，大部分多半是强劲的高端8核乃至12核的服务器。想要租用这些服务器的中小公司，起步往往只需要1个CPU核心乃至更少资源的服务器。一次性要他们去租一整台服务器，就好像刚毕业想要租个单间，结果你非要整租个别墅给他。</p><p>这个“整租”的问题，还发生在“时间”层面。物理服务器里面装好的系统和应用，不租了而要再给其他人使用，就必须清空里面已经装好的程序和数据，得做一次“重装”。如果我们只是暂时不用这个服务器了，过一段时间又要租这个服务器，数据中心服务商就不得不先重装整个系统，然后租给别人。等别人不用了，再重装系统租给你，特别地麻烦。</p><p>其实，对于想要租用服务器的用户来说，最好的体验不是租房子，而是住酒店。我住一天，我就付一天的钱。这次是全家出门，一次多定几间酒店房间就好啦。</p><p>而这样的需求，用虚拟机技术来实现，再好不过了。虚拟机技术，使得我们可以在一台物理服务器上，同时运行多个虚拟服务器，并且可以动态去分配，每个虚拟服务器占用的资源。对于不运行的虚拟服务器，我们也可以把这个虚拟服务器“关闭”。这个“关闭”了的服务器，就和一个被关掉的物理服务器一样，它不会再占用实际的服务器资源。但是，当我们重新打开这个虚拟服务器的时候，里面的数据和应用都在，不需要再重新安装一次。</p><h2>虚拟机的技术变迁</h2><p>那虚拟机技术到底是怎么一回事呢？下面我带你具体来看一看，它的技术变迁过程，好让你能更加了解虚拟机，从而更好地使用它。</p><p><strong>虚拟机</strong>（Virtual Machine）技术，其实就是指在现有硬件的操作系统上，能够<strong>模拟</strong>一个计算机系统的技术。而模拟一个计算机系统，最简单的办法，其实不能算是虚拟机技术，而是一个模拟器（Emulator）。</p><h3>解释型虚拟机</h3><p>要模拟一个计算机系统，最简单的办法，就是兼容这个计算机系统的指令集。我们可以开发一个应用程序，跑在我们的操作系统上。这个应用程序呢，可以识别我们想要模拟的、计算机系统的程序格式和指令，然后一条条去解释执行。</p><p>在这个过程中，我们把原先的操作系统叫作<strong>宿主机</strong>（Host），把能够有能力去模拟指令执行的软件，叫作<strong>模拟器</strong>（Emulator），而实际运行在模拟器上被“虚拟”出来的系统呢，我们叫<strong>客户机</strong>（Guest VM）。</p><p>这个方式，其实和运行Java程序的Java虚拟机很像。只不过，Java虚拟机运行的是Java自己定义发明的中间代码，而不是一个特定的计算机系统的指令。</p><p>这种解释执行另一个系统的方式，有没有真实的应用案例呢？当然是有的，如果你是一个Android开发人员，你在开发机上跑的Android模拟器，其实就是这种方式。如果你喜欢玩一些老游戏，可以注意研究一下，很多能在Windows下运行的游戏机模拟器，用的也是类似的方式。</p><p><strong>这种解释执行方式的最大的优势就是，模拟的系统可以跨硬件。</strong>比如，Android手机用的CPU是ARM的，而我们的开发机用的是Intel X86的，两边的CPU指令集都不一样，但是一样可以正常运行。如果你想玩的街机游戏，里面的硬件早就已经停产了，那你自然只能选择MAME这样的模拟器。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/6b/912a6b83c639ae06b61a56327488916b.png?wh=1280*960\" alt=\"\"></p><center><a href=\"https://commons.wikimedia.org/wiki/File:NewMAME.png\">图片来源</a></center><center><span class=\"reference\">MAME模拟器的界面</span></center><p>不过这个方式也有两个明显的缺陷。第一个是，我们做不到精确的“模拟”。很多的老旧的硬件的程序运行，要依赖特定的电路乃至电路特有的时钟频率，想要通过软件达到100%模拟是很难做到的。第二个缺陷就更麻烦了，那就是这种解释执行的方式，性能实在太差了。因为我们并不是直接把指令交给CPU去执行的，而是要经过各种解释和翻译工作。</p><p>所以，虽然模拟器这样的形式有它的实际用途。甚至为了解决性能问题，也有类似于Java当中的JIT这样的“编译优化”的办法，把本来解释执行的指令，编译成Host可以直接运行的指令。但是，这个性能还是不能让人满意。毕竟，我们本来是想要把空余的计算资源租用出去的。如果我们空出来的计算能力算是个大平层，结果经过模拟器之后能够租出去的计算能力就变成了一个格子间，那我们就划不来了。</p><h3>Type-1和Type-2：虚拟机的性能提升</h3><p>所以，我们希望我们的虚拟化技术，能够克服上面的模拟器方式的两个缺陷。同时，我们可以放弃掉模拟器方式能做到的跨硬件平台的这个能力。因为毕竟对于我们想要做的云服务里的“服务器租赁”业务来说，中小客户想要租的也是一个x86的服务器。而另外一方面，他们希望这个租用的服务器用起来，和直接买一台或者租一台物理服务器没有区别。作为出租方的我们，也希望服务器不要因为用了虚拟化技术，而在中间损耗掉太多的性能。</p><p>所以，首先我们需要一个“全虚拟化”的技术，也就是说，我们可以在现有的物理服务器的硬件和操作系统上，去跑一个完整的、不需要做任何修改的客户机操作系统（Guest OS）。那么，我们怎么在一个操作系统上，再去跑多个完整的操作系统呢？答案就是，我们自己做软件开发中很常用的一个解决方案，就是加入一个中间层。在虚拟机技术里面，这个中间层就叫作<strong>虚拟机监视器</strong>，英文叫VMM（Virtual Machine Manager）或者Hypervisor。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/bf/e09b64e035a3b1bd664b0584a7b52fbf.jpeg?wh=2176*1426\" alt=\"\"></p><p>如果说我们宿主机的OS是房东的话，这个虚拟机监视器呢，就好像一个二房东。我们运行的虚拟机，都不是直接和房东打交道，而是要和这个二房东打交道。我们跑在上面的虚拟机呢，会把整个的硬件特征都映射到虚拟机环境里，这包括整个完整的CPU指令集、I/O操作、中断等等。</p><p>既然要通过虚拟机监视器这个二房东，我们实际的指令是怎么落到硬件上去实际执行的呢？这里有两种办法，也就是Type-1和Type-2这两种类型的虚拟机。</p><p>我们先来看Type-2类型的虚拟机。在Type-2虚拟机里，我们上面说的虚拟机监视器好像一个运行在操作系统上的软件。你的客户机的操作系统呢，把最终到硬件的所有指令，都发送给虚拟机监视器。而虚拟机监视器，又会把这些指令再交给宿主机的操作系统去执行。</p><p>那这时候你就会问了，这和上面的模拟器看起来没有那么大分别啊？看起来，我们只是把在模拟器里的指令翻译工作，挪到了虚拟机监视器里。没错，Type-2型的虚拟机，更多是用在我们日常的个人电脑里，而不是用在数据中心里。</p><p>在数据中心里面用的虚拟机，我们通常叫作Type-1型的虚拟机。这个时候，客户机的指令交给虚拟机监视器之后呢，不再需要通过宿主机的操作系统，才能调用硬件，而是可以直接由虚拟机监视器去调用硬件。</p><p>另外，在数据中心里面，我们并不需要在Intel x86上面去跑一个ARM的程序，而是直接在x86上虚拟一个x86硬件的计算机和操作系统。所以，我们的指令不需要做什么翻译工作，可以直接往下传递执行就好了，所以指令的执行效率也会很高。</p><p>所以，在Type-1型的虚拟机里，我们的虚拟机监视器其实并不是一个操作系统之上的应用层程序，而是一个嵌入在操作系统内核里面的一部分。无论是KVM、XEN还是微软自家的Hyper-V，其实都是系统级的程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/8e/9c30f8d93270a9563154aa732b9c9f8e.jpeg?wh=2212*3436\" alt=\"\"></p><p>因为虚拟机监视器需要直接和硬件打交道，所以它也需要包含能够直接操作硬件的驱动程序。所以Type-1的虚拟机监视器更大一些，同时兼容性也不能像Type-2型那么好。不过，因为它一般都是部署在我们的数据中心里面，硬件完全是统一可控的，这倒不是一个问题了。</p><h3>Docker：新时代的最佳选择？</h3><p>虽然，Type-1型的虚拟机看起来已经没有什么硬件损耗。但是，这里面还是有一个浪费的资源。在我们实际的物理机上，我们可能同时运行了多个的虚拟机，而这每一个虚拟机，都运行了一个属于自己的单独的操作系统。</p><p>多运行一个操作系统，意味着我们要多消耗一些资源在CPU、内存乃至磁盘空间上。那我们能不能不要多运行的这个操作系统呢？</p><p>其实是可以的。因为我们想要的未必是一个完整的、独立的、全虚拟化的虚拟机。我们很多时候想要租用的不是“独立服务器”，而是独立的计算资源。在服务器领域，我们开发的程序都是跑在Linux上的。其实我们并不需要一个独立的操作系统，只要一个能够进行资源和环境隔离的“独立空间”就好了。那么，能够满足这个需求的解决方案，就是过去几年特别火热的Docker技术。使用Docker来搭建微服务，可以说是过去两年大型互联网公司的必经之路了。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/35/6cbf5f5f4275bc053fabcd3480304a35.jpeg?wh=2281*3277\" alt=\"\"></p><p>在实践的服务器端的开发中，虽然我们的应用环境需要各种各样不同的依赖，可能是不同的PHP或者Python的版本，可能是操作系统里面不同的系统库，但是通常来说，我们其实都是跑在Linux内核上的。通过Docker，我们不再需要在操作系统上再跑一个操作系统，而只需要通过容器编排工具，比如Kubernetes或者Docker Swarm，能够进行各个应用之间的环境和资源隔离就好了。</p><p>这种隔离资源的方式呢，也有人称之为“操作系统级虚拟机”，好和上面的全虚拟化虚拟机对应起来。不过严格来说，Docker并不能算是一种虚拟机技术，而只能算是一种资源隔离的技术而已。</p><h2>总结延伸</h2><p>这一讲，我从最古老的分时系统讲起，介绍了虚拟机的相关技术。我们现在的云服务平台上，你能够租到的服务器其实都是虚拟机，而不是物理机。而正是虚拟机技术的出现，使得整个云服务生态得以出现。</p><p>虚拟机是模拟一个计算机系统的技术，而其中最简单的办法叫模拟器。我们日常在PC上进行Android开发，其实就是在使用这样的模拟器技术。不过模拟器技术在性能上实在不行，所以我们才有了虚拟化这样的技术。</p><p>在宿主机的操作系统上，运行一个虚拟机监视器，然后再在虚拟机监视器上运行客户机的操作系统，这就是现代的虚拟化技术。这里的虚拟化技术可以分成Type-1和Type-2这两种类型。</p><p>Type-1类型的虚拟化机，实际的指令不需要再通过宿主机的操作系统，而可以直接通过虚拟机监视器访问硬件，所以性能比Type-2要好。而Type-2类型的虚拟机，所有的指令需要经历客户机操作系统、虚拟机监视器、宿主机操作系统，所以性能上要慢上不少。不过因为经历了宿主机操作系统的一次“翻译”过程，它的硬件兼容性往往会更好一些。</p><p>今天，即使是Type-1型的虚拟机技术，我们也会觉得有一些性能浪费。我们常常在同一个物理机上，跑上8个、10个的虚拟机。而且这些虚拟机的操作系统，其实都是同一个Linux Kernel的版本。于是，轻量级的Docker技术就进入了我们的视野。Docker也被很多人称之为“操作系统级”的虚拟机技术。不过Docker并没有再单独运行一个客户机的操作系统，而是直接运行在宿主机操作系统的内核之上。所以，Docker也是现在流行的微服务架构底层的基础设施。</p><h2>推荐阅读</h2><p>又到了阅读英文文章的时间了。想要更多了解虚拟机、Docker这些相关技术的概念和知识，特别是进一步理解Docker的细节，你可以去读一读FreeCodeCamp里的<a href=\"https://www.freecodecamp.org/news/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b/\">A Beginner-Friendly Introduction to Containers, VMs and Docker</a>这篇文章。</p><h2>课后思考</h2><p>我们在程序开发过程中，除了会用今天讲到的系统级虚拟机之外，还会常常遇到Java虚拟机这样的进程级虚拟机。那么，JVM这个进程级虚拟机是为了解决什么问题而出现的呢？今天我们讲到的系统级虚拟机发展历程中的各种优化手段，有哪些是JVM中也可以通用的呢？</p><p>欢迎留言和我分享你的疑惑和见解。如果有收获，你也可以把今天的文章分享给你朋友。</p><p></p>","neighbors":{"left":{"article_title":"33 | 解读TPU：设计和拆解一块ASIC芯片","id":106476},"right":{"article_title":"35 | 存储器层次结构全景：数据存储的大金字塔长什么样？","id":107422}},"comments":[{"had_liked":false,"id":113954,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1563193731,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"190541754755","product_id":100026001,"comment_content":"老师我有个疑问？像亚马逊公司平日机器没多忙的所以可以租出去，但是像黑色星期五这种情况，其他租机器的公司也要用资源，亚马逊也要算资源那不是资源要爆了吗？","like_count":45,"discussions":[{"author":{"id":1073180,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/1c/148ab38c.jpg","nickname":"张驰翔","note":"","ucode":"57C8108B24C484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3651,"discussion_content":"这只是开端，云计算走到今天，亚马逊云收入早就超过了电商，所以服务器是专用的，不会出现相互抢占的情况了。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1564660628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412715,"discussion_content":"资源调度和共享问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636262252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135604,"user_name":"DriveMan_邱佳源","can_delete":false,"product_type":"c1","uid":1250807,"ip_address":"","ucode":"A4C83BF07DEE7A","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","comment_is_top":false,"comment_ctime":1569226422,"is_pvip":false,"replies":[{"id":"52607","content":"邱佳源同学，<br><br>你好，我是这样来看的。JVM的两个核心优化，第一个是通过编译成中间语言，在实际解释器执行的时候简化了中间语言到机器指令的难度。第二个是JIT技术，也就是通过收集程序运行中反复执行的中间代码，直接编译成机器指令来执行，加速执行速度。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569652311,"ip_address":"","comment_id":135604,"utype":1}],"discussion_count":2,"race_medal":0,"score":"134713212598","product_id":100026001,"comment_content":"JVM的优化手段主要就是为了减少指令数，从而减少cpu计算时间","like_count":32,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468264,"discussion_content":"邱佳源同学，\n\n你好，我是这样来看的。JVM的两个核心优化，第一个是通过编译成中间语言，在实际解释器执行的时候简化了中间语言到机器指令的难度。第二个是JIT技术，也就是通过收集程序运行中反复执行的中间代码，直接编译成机器指令来执行，加速执行速度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569652311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1510142,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0a/fe/f8433975.jpg","nickname":"fjf3997","note":"","ucode":"53BAEDB2C22AE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559666,"discussion_content":"Java字节码指令跟cpu指令可不是一一对应的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648869672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114340,"user_name":"张立昊Leon","can_delete":false,"product_type":"c1","uid":1321002,"ip_address":"","ucode":"2D80F71C0BC83E","user_header":"https://static001.geekbang.org/account/avatar/00/14/28/2a/173ea0e1.jpg","comment_is_top":false,"comment_ctime":1563277539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61692819683","product_id":100026001,"comment_content":"JVM主要应该是解决跨平台问题，即一次编码，处处运行。同样的Java代码编译成字节码后通过各个平台jvm的翻译就可以运行。从优化的角度来说，就像课程中讲到的，解释执行会损耗效率，可以通过jit编译成本地机器码运行","like_count":15},{"had_liked":false,"id":133134,"user_name":"anginiit","can_delete":false,"product_type":"c1","uid":1105763,"ip_address":"","ucode":"C3FA0CFEADB3BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/63/b7296340.jpg","comment_is_top":false,"comment_ctime":1568378079,"is_pvip":false,"replies":[{"id":"50992","content":"谢谢，能对大家有一点点帮助，这些文章就没有白写。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1568427641,"ip_address":"","comment_id":133134,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57402952927","product_id":100026001,"comment_content":"之前困惑我许久的问题 学到这里 基本都解开了  很开心","like_count":14,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467266,"discussion_content":"谢谢，能对大家有一点点帮助，这些文章就没有白写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568427641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055624,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","nickname":"磉盘","note":"","ucode":"1C245991F30A73","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299817,"discussion_content":"是什么问题呢，说出来分享一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597828508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233518,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1594346271,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35954084639","product_id":100026001,"comment_content":"虚拟化技术满足了人们在不同场景下的不同算力需求，对算力进行了量化，让租用服务器的生意不仅停留在toB，还能toC。对企业来说，要想减少维护成本，就需要把虚拟机做成一个应用程序，甚至一个函数，随删随建。<br>一个完整的计算机系统包括硬件、操作系统、程序库、应用程序这四个模块，其中后三个模块可以封装成一个虚拟机程序，然后在宿主机操作系统中增加对虚拟机程序的支持，让它可以直接使用硬件接收硬件信号。这种设计模式就是type1。<br>同一台服务器上跑的虚拟机往往都是同一种操作系统，比如都是linux，只是发行套件不同，那么每个虚拟机程序都运行一个操作系统就太浪费了，它们可以共用同一个kernel，每个虚拟机程序只要不同维护发行套件的程序库、配置文件即可。这种虚拟机就是docker。","like_count":9},{"had_liked":false,"id":232760,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1594111069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479012957","product_id":100026001,"comment_content":"先确定一个问题，JVM的解释器把class文件，解释成机器码，这个机器码是作用在jvm上，与底层硬件不相关，还是这个经过解释器最终解释成的机器码是直接作用在底层硬件上。<br>如果是直接作用在jvm上，经过jvm转换后在作用到底层硬件，那就可以理解为，这个机器码本身是平台无关的，那还要class文件干啥，就没必要保留class文件了。而关于Java的介绍，这个class文件才是实现跨平台的关键。所以，这种理解是不正确的，解释器解释的机器码，直接是作用在底层硬件上的；这个机器码不是平台无关的，和操作系统和硬件有关；<br>如果说是直接作用在操作系统和硬件上，那直接丢给操作系统就行，为什么在jvm内存中还有程序计数器这个区域，这个完全可以有底层操作系统和硬件代替，完全没jvm的事；主要原因还是和java 边解释边执行有关，就像老师说的，jvm简化了class文件和机器码转换的难度，class是个中间代码，是跨平台的，直接把这个class文件，在jvm解释器的作用下，转换为对应的操作系统指令相对其他语言来说，难度不大。所以java最主要的目的，也就是和别的语言最大的不同，就是这个class文件的存在，这个文件的存在就是为了跨平台；<br>可以把class文件，当做其他语言经过编译器编译后的混编代码。而jvm当做是其他语言运行的物理运行环境。c这种语言，编译后的混编代码是不能跨平台的，跨平台必须重新编译，而class文件没必要，因为它作用在jvm上。<br>而jvm内存中的程序计数器，可以说是在解释执行的时候，指的是class文件对应的行号，这里类似混编代码对应的cpu指令地址，根据程序计数器记录的行号，将class文件，进行边解释，边执行，这种解释执行，其实就是为了，启动时不会慢，不是一次加载，有点内存分页的意思，而如果碰到百分之二十的代码，执行时间在百分八十左右，那就认为这段代码是重复执行的，因为不同行的代码，运行差距不会太大，这里占了百分八十，说明这段代码是重复执行了，就是热点代码，这时候就采用JIT，直接将这段代码编译成合操作系统和硬件相关的机器码。提升性能。<br>所以，jvm存在的意义，我感觉，更主要的就是为了跨平台，这是它存在的最大特性，也可以理解为，面对对象的思想，用在了编译执行阶段，把不同平台上的指令集，都封装到jvm规范上，开发人员，只需要关系你写的程序，完全不用关系，编译，解释执行等步骤，换句话说，就是关系你的class文件，不需要管不同平台是怎么解释执行的，这个解释执行的步骤封装在了jvm中。<br>如果不是这样，jvm的存在与否，相对别的编程语言，除了以上分析的优势，他还能有什么优势呢？","like_count":3},{"had_liked":false,"id":157408,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1575134132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165068724","product_id":100026001,"comment_content":"在2019年12月的第一天，看到这篇文章，让我对之前一知半解对虚拟机和Docker知识有了更全面对了解，太好了！","like_count":2},{"had_liked":false,"id":121967,"user_name":"焰火","can_delete":false,"product_type":"c1","uid":1244606,"ip_address":"","ucode":"D3353B386DE3B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/be/079c78c7.jpg","comment_is_top":false,"comment_ctime":1565259087,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"10155193679","product_id":100026001,"comment_content":"浩哥~~，同一台机器上的docker如何解决不同客户对不同linux版本的需求呢？","like_count":2,"discussions":[{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19798,"discussion_content":"通过容器编排工具，能够对不同容器配置不同的环境，操作在内核之上的","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1569226245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":95531,"discussion_content":"解决不了内核版本不同的需求，docker本质就是一个进程","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1577023939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545647,"avatar":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","nickname":"拓山","note":"","ucode":"11FE9CF3821898","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29527,"discussion_content":"同一台机器上的docker是共享同一个内核版本的，内核版本是比较稳定。docker中可以运行基于这个内核的linux不同发行版本","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570772278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565662,"discussion_content":"用不同linux版本的镜像就像了，不过内核都是同一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650510653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113058,"user_name":"xindoo","can_delete":false,"product_type":"c1","uid":1101718,"ip_address":"","ucode":"AEAF3208E644BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/96/251c0cee.jpg","comment_is_top":false,"comment_ctime":1562892469,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10152827061","product_id":100026001,"comment_content":"我的理解，jvm虚拟机主要是为了解决java语言跨平台的问题，这和服务器虚拟化的出发点发点完全不一样。java多租户技术，感觉有点类似docker的方式，但不知道为什么这个技术已经出现好多年了，就是没多少大规模的实践，难道是因为docker？","like_count":2},{"had_liked":false,"id":164410,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576980696,"is_pvip":false,"replies":[{"id":"68653","content":"Hash同学，<br><br>这个理解不太对哦，JVM并不能解决减少指令操作，和计算CPU的计算时间问题。<br><br>本质上，JVM是操作系统上的一个应用程序，为了实现跨平台，甚至有可能会在特定的硬件上增加一些指令操作，增加CPU的计算时间。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1581234318,"ip_address":"","comment_id":164410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871947992","product_id":100026001,"comment_content":"JVM是为了解决Java跨平台操作的问题，减少指令操作的次数！最终减少cpu的计算时间！","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478753,"discussion_content":"Hash同学，\n\n这个理解不太对哦，JVM并不能解决减少指令操作，和计算CPU的计算时间问题。\n\n本质上，JVM是操作系统上的一个应用程序，为了实现跨平台，甚至有可能会在特定的硬件上增加一些指令操作，增加CPU的计算时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581234318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113164,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1562905834,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5857873130","product_id":100026001,"comment_content":"那现在阿里云、谷歌云对外卖的云主机采用的都是docker吗","like_count":1,"discussions":[{"author":{"id":1101718,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/96/251c0cee.jpg","nickname":"xindoo","note":"","ucode":"AEAF3208E644BC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1778,"discussion_content":"云厂商售卖的都是虚拟机，主流应该都是kvm","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562910549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1291193,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b3/b9/15bc110a.jpg","nickname":"Geek_8def05","note":"","ucode":"5C8110716CE483","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353274,"discussion_content":"kvm docker都有卖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615108480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299763,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d5/33/d79fae5c.jpg","nickname":"Hommin","note":"","ucode":"C020CA5DE785DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198128,"discussion_content":"type-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583476842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113084,"user_name":"twodog","can_delete":false,"product_type":"c1","uid":1112440,"ip_address":"","ucode":"642639AF63F92C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/78/b35d8915.jpg","comment_is_top":false,"comment_ctime":1562894653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857861949","product_id":100026001,"comment_content":"你好，分布式计算那一篇不讲了吗，还想看呢","like_count":1},{"had_liked":false,"id":344509,"user_name":"Jack_1024","can_delete":false,"product_type":"c1","uid":2690027,"ip_address":"","ucode":"D6B1B5B24F2BEF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/icHMBoxO5zDicEgIOkFsZCsbicMAeaW3zd7e6YjJJKfvwu7Q8E3wtpXojfdClOeCGrPicJ16FBpEMicfpuDiariajibDSg/132","comment_is_top":false,"comment_ctime":1651593517,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1651593517","product_id":100026001,"comment_content":"醍醐灌顶","like_count":0},{"had_liked":false,"id":327323,"user_name":"大尾巴老猫","can_delete":false,"product_type":"c1","uid":1260089,"ip_address":"","ucode":"246AB375244773","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/39/72d81605.jpg","comment_is_top":false,"comment_ctime":1640065791,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1640065791","product_id":100026001,"comment_content":"KVM算是type1还是type2呢？","like_count":0,"discussions":[{"author":{"id":1191069,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2c/9d/cc150980.jpg","nickname":"崔巍","note":"","ucode":"1EE10CE5A3CECD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549685,"discussion_content":"有争论。有种看法是kvm把linux变成了一个hypervisor，所以归到type1合适；我个人觉得更像type2，因为host os还是比较明显的。当然，其实也无所谓了，type1和type2的概念和分类可能已经过时了，当初做这样分类的时候，还没有kvm呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644208580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307689,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1629202183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629202183","product_id":100026001,"comment_content":"老师，你最后的思考题说的系统级虚拟机是说的其实是资源隔离的docker吗？还是说的就是type-1的虚拟机呢？","like_count":0},{"had_liked":false,"id":260581,"user_name":"人在江湖龙在江湖","can_delete":false,"product_type":"c1","uid":2285946,"ip_address":"","ucode":"20850038573DAE","user_header":"https://static001.geekbang.org/account/avatar/00/22/e1/7a/b206cded.jpg","comment_is_top":false,"comment_ctime":1605065190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605065190","product_id":100026001,"comment_content":"这一章些的真的很好","like_count":0},{"had_liked":false,"id":233521,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1594346428,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594346428","product_id":100026001,"comment_content":"JVM我认为主要是为了让java程序夸平台服务的。虚拟机管理程序如果做到操作系统里，也是可以提高程序运行效率的。","like_count":0},{"had_liked":false,"id":232748,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1594108940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594108940","product_id":100026001,"comment_content":"jvm。解释执行，把class文件，经过解释器后解释的机器码，是直接作用与jvm，还是直接作用与硬件cpu，如果直接作用与虚拟机，那还要class文件干嘛，直接机器码和jvm就可以跨平台，所以jvm经过解释器解释出来的机器码是直接作用与底层硬件上","like_count":0},{"had_liked":false,"id":219620,"user_name":"ack","can_delete":false,"product_type":"c1","uid":1440912,"ip_address":"","ucode":"69CA1233EEA8E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/90/c9df0459.jpg","comment_is_top":false,"comment_ctime":1590052287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590052287","product_id":100026001,"comment_content":"可结合此篇享用：https:&#47;&#47;www.freecodecamp.org&#47;news&#47;a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b&#47;","like_count":0},{"had_liked":false,"id":205297,"user_name":"王坤祥","can_delete":false,"product_type":"c1","uid":1003327,"ip_address":"","ucode":"FB988B9F381A33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","comment_is_top":false,"comment_ctime":1586587437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586587437","product_id":100026001,"comment_content":"JVM主要应该是解决跨平台问题，即一次编码，处处运行。<br><br>从优化的角度，解释执行会损耗效率，可以通过jit编译成本地机器码运行提高执行效率。<br>Java程序最初是通过解释器（Interpreter）进行解释执行的，这样java程序启动时不会感觉太慢；启动并运行后，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为即时编译器（Just In Time Compiler，JIT编译器）。<br>","like_count":0},{"had_liked":false,"id":182362,"user_name":"深水蓝","can_delete":false,"product_type":"c1","uid":1637933,"ip_address":"","ucode":"3E3B195DE54DE1","user_header":"https://static001.geekbang.org/account/avatar/00/18/fe/2d/e23fc6ee.jpg","comment_is_top":false,"comment_ctime":1582773629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582773629","product_id":100026001,"comment_content":"请问一下老师，那平常听说的CPU虚拟化有是怎么实现的呢？","like_count":0,"discussions":[{"author":{"id":1527366,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4e/46/e037c0df.jpg","nickname":"Let go","note":"","ucode":"30EC4EC53E2A81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584922,"discussion_content":"cpu虚拟化，我理解就是进程。\n虚拟化cpu就是进城。记录下程序运行时需要的环境。这些存在寄存器里。进程切换就是寄存器变量来回赋值。\n当然也会有一些调度算法。\n属于操作系统的内容。我只了解概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661225708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142585,"user_name":"一个工匠","can_delete":false,"product_type":"c1","uid":1038449,"ip_address":"","ucode":"2168BA6F926074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","comment_is_top":false,"comment_ctime":1571406821,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1571406821","product_id":100026001,"comment_content":"谢谢老师，学习到了非常多的知识。","like_count":0},{"had_liked":false,"id":113678,"user_name":"林三杠","can_delete":false,"product_type":"c1","uid":1012832,"ip_address":"","ucode":"E667F986D07DC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/60/0403b575.jpg","comment_is_top":false,"comment_ctime":1563116552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563116552","product_id":100026001,"comment_content":"jvm为了解决跨平台开发的问题。减少一次指令的翻译也可以用在jvm的优化上，jit就是这个原理","like_count":0},{"had_liked":false,"id":113099,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1562896850,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1562896850","product_id":100026001,"comment_content":"老师，请教一下，有一种概念叫“裸金属架构虚拟机”，这种算type-1型虚拟机吗？但是它本身好像可以不依赖操作系统——它似乎可以直接安装在硬件上（自带操作系统？）","like_count":1,"discussions":[{"author":{"id":2285946,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e1/7a/b206cded.jpg","nickname":"人在江湖龙在江湖","note":"","ucode":"20850038573DAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324174,"discussion_content":"当然可以把操作系统上的功能写在type-1型虚拟机，相当于为专门硬件写个专门操作系统，当然有可能效率更高，只是从工程的角度说，划算不划算的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605065414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19802,"discussion_content":"“裸金属架构虚拟机”像是docker容器的吧，操作系统也是一种系统应用程序，简单说是内核的一种包装，docker容器就是直接越过操作系统，对内核进行操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569226605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19910,"discussion_content":"docker并没有越过操作系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569237152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":19802,"ip_address":""},"score":19910,"extra":""}]}]}]}