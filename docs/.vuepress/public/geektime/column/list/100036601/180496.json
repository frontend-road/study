{"id":180496,"title":"28 | 迈向云端：云原生应用时代的平台思考","content":"<p>你好，我是石雪峰。</p><p>最近几年，相信你一定从各种场合听到过“云原生”这个词。比如云原生应用的<a href=\"https://12factor.net/zh_cn/\">12要素</a>、最近大火的现象级技术Docker，以及容器编排技术Kubernetes。其中，Kubernetes背后的CNCF，也就是云原生应用基金会，也成了各大企业争相加入的组织。</p><p>DevOps似乎也一直跟云技术有着说不清的关系，比如容器、微服务、不可变基础设施以及服务网格、声明式API等都是DevOps技术领域中的常客。云原生应用似乎天生就和DevOps是绝配，自带高可用、易维护、高扩展、持续交付的光环。</p><p>那么，所谓的云原生，到底是什么意思呢？我引用一下来自于CNCF的官方定义：</p><blockquote>\n<p>Cloud native computing uses an open source software stack to deploy applications as microservices, packaging each part into its own container, and dynamically orchestrating those containers to optimize resource utilization.<br>\n云原生使用一种开源软件技术栈来部署微服务应用，将每个组件打包到它自己的容器中，并且通过动态编排来优化资源的利用率。</p>\n</blockquote><!-- [[[read_end]]] --><p>我总结一下这里面的关键字：<strong>开源软件、微服务应用、容器化部署和动态编排</strong>。那么，简单来说，云原生应用就是将微服务风格的架构应用，以容器化的方式部署在云平台上，典型的是以Kubernetes为核心的云平台，从而受益于云服务所带来的各种好处。</p><p>我在专栏中也反复强调过，容器技术和Kubernetes是划时代的技术，是每一个学习DevOps的工程师的必备技能。就像很多年前要人手一本《鸟哥的Linux私房菜》在学习Linux一样，Kubernetes作为云时代的Linux，同样值得你投入精力。</p><p>今天，我并不是要跟你讲Kubernetes，我想通过一个项目，以及最近两年我的亲身经历，给你分享一下，云原生究竟会带给DevOps怎样的改变。这个项目就是Jenkins X。</p><p>在2018年初，我分享过有关Jenkins X的文章，在短短几天的时间内，阅读量就过万了。这一方面体现了Jenkins在国内的巨大影响力，另外一方面，也凸显了Jenkins与这个时代的冲突和格格不入。为什么这么说呢？因为Jenkins作为一个15年的老系统，浑身上下充满了云原生的反模式 ，比如：</p><ol>\n<li>Jenkins是一个Java单体应用，运行在JVM之上，和其他典型的Java应用并没有什么区别；</li>\n<li>Jenkins使用文件存储，以及各种加载模式、资源调度机制等，确保了它天生不支持高可用；</li>\n<li>Jenkins虽然提供了流水线，但是流水线依然是执行在主节点上，这就意味着随着任务越来越多，主节点消耗的资源也就越来越多，不仅难以扩展，还非常容易被随便一个不靠谱的任务搞挂掉。</li>\n</ol><p>举个最简单的例子，如果一个任务输出了500MB的日志，当你在Jenkins上点击查看全部日志的时候，那就保佑自己的服务器能挺过去吧。因为很多时候，服务器可能直接就死掉了。当然，<strong>我非常不建议你在生产环境做这个实验。</strong></p><p>那么，如果想让Jenkins实现云原生化，要怎么做呢？有的同学可能会说：“把Jenkins放到容器中，然后丢给Kubernetes管理不就行了吗？”如果你也是这么想的，那就说明，无论是对Kubernetes还是云原生应用，你的理解还不够到位。我来给你列举下，如果要把Jenkins改造为一个真正的云原生应用，要解决哪些问题：</p><ol>\n<li>可插拔式的存储（典型的像是S3、OSS）</li>\n<li>外部制品管理</li>\n<li>Credentials管理</li>\n<li>Configuration管理</li>\n<li>测试报告和覆盖率报告管理</li>\n<li>日志管理</li>\n<li>Jenkins Job</li>\n<li>……</li>\n</ol><p>你看，我还只是列举了其中一部分，以云原生应用12要素的标准来说，要做的改造还有很多。</p><p>以日志为例，当前Jenkins的所有日志都是写在Master节点上的，如果想改造成云原生应用的方法，首先就是要把日志看作一种输出流。输出流不应该由应用管理，写在应用运行节点的本地，而是应该由专门的日志服务来负责收集、分析、整理和展示。比如ElasticSearch、Fluent，或者是AWS的CloudWatch Logs，都可以实现这个功能。</p><p>那么，Jenkins X是怎么解决这个问题的呢？</p><p>我们来试想一个场景：当开发工程师想要开发一个云原生应用的时候，他需要做什么？</p><p>首先，他需要有一套可以运行的Kubernetes环境。考虑到各种不可抗力因素，这绝对不是一件简单的事情。尤其是在几年前，如果有人能够通过二进制的方式完成Kubernetes集群的搭建和部署，这一定是一件值得吹牛的事情。好在现在公司里面都有专人负责Kubernetes集群维护，各大公有云厂商也都提供了这方面的支持。</p><p>现在，我们继续回到工程师的视角。</p><p>当他接到一个需求后，他首先需要修改代码，然后把代码编译打包，在本地测试通过。接下来，他要将代码提交到版本控制系统，手动触发流水线任务，并等待执行完毕。如果碰巧这次调整了编译命令，他还要修改流水线配置文件。最后，经过千辛万苦，生成了一个镜像文件，并把镜像文件推送到镜像服务器上。这还没完，他还需要修改测试环境的Kubernetes资源配置，调用kubectl命令完成应用的更新并等待部署完成。如果对于这次修改，系统验证出了新的问题，那么不好意思，刚刚的这些步骤都需要重头来过。</p><p>你看，虽然云原生应用有这么多好处，但是大大提升了开发的复杂度。一个工程师必须要熟悉Kubernetes、流水线、镜像、打包、部署等一系列的环节和新技术新工具，才有可能完成一次部署。如果这些操作都依赖于外部门或者其他人，那你就且等着吧。这么看来，这条路是走不下去的。</p><p><strong>在云时代，一切皆服务</strong>。那么，在云原生应用时代，DevOps或持续交付理应也是以一种服务的形式存在。就好比你在用电的时候，一定不会去考虑电厂是怎么运转的，电是怎么送到家里来的，你只要负责用就可以了。</p><p>那么，我们来看看Jenkins X是怎么一步步地把Jenkins“干掉”的。其实，我希望你能记得，<strong>是不是Jenkins X本身并不重要，在这个过程中使用到的工具和技术，以及它们背后的设计理念，才是更重要的</strong>。</p><h2>1.自动化生成依赖的配置文件</h2><p>对于一个云原生应用来说，除了源代码本身之外，还依赖于哪些配置文件呢？其中就包括：</p><ul>\n<li>Dockerfile：用于生成Docker镜像</li>\n<li>Jenkinsfile：应用关联的流水线配置</li>\n<li>Helm Chart：把应用打包并部署运行在Kubernetes上的资源文件</li>\n<li>Skaffold：用于在Kubernetes中生成Docker image的工具</li>\n</ul><p>考虑到你可能不太熟悉这个Skaffold工具，我简单介绍一下。</p><p>实际上，如果想在 Kubernetes 环境中生成Docker镜像，你会发现，一般来说，这都依赖于Docker服务，也就是Docker daemon。那么常见的做法无外乎Docker-in-Docker和Docker-outside-Docker。</p><p>其中，Docker-in-Docker就是在基础镜像中提供内建的Docker daemon和镜像生成环境，这依赖于官方镜像的支持。而Docker-outside-Docker比较好理解，就是将宿主机的Docker daemon挂载到Docker镜像里面。</p><p>有三种典型的实现方式：第一种是挂载节点的Docker daemon，第二种就是使用云平台提供的外部服务，比如Google Cloud Builder，第三种就是使用无需Docker daemon也能打包的方案，比如常见的Kaniko。</p><p>而Skaffold想要解决的就是，你不需要再关心如何生成镜像、推送镜像和运行镜像，它会通通帮你搞定，依赖的就是skaffold.yaml文件。</p><p>这些文件如果让研发手动生成，那会让研发的门槛变得非常高。好在你可以通过Draft工具来自动化这些操作。Draft是微软开源的一个工具，它包含两个部分。</p><ul>\n<li>源代码分析器。它可以自动扫描你的源代码，根据代码特征，识别出你所用到的代码类型，比如JavaScript、Python等。</li>\n<li>build pack。简单来说，build pack就是一种语言对应的模板。通过在模板中定义好预设的环境依赖配置文件，包括上面提到的Dockerfile、Jenkinsfile等，从而实现依赖项的自动生成和创建。当然，你也可以定义自己的build pack，并作为模板在内部项目中使用。</li>\n</ul><p>很多时候，模板都是一种特别好的思路，它可以大大简化初始配置成本，提升环境和服务的标准化程度。对于流水线来说，也是如此，毕竟，不是很多人都是这方面的专家，只要能针对90%的场景提供一组或几组最佳实践的模板就足够了。</p><p>这样一来，无论是已经存在的代码，还是权限初始化的项目，研发都不需要操心如何实现代码打包、生成镜像，以及部署的过程。这也会大大节省研发的精力。毕竟，就像我刚刚提到的，不是每个人都是容器和构建方面的专家。</p><h2>2.自动化流水线过程</h2><p>当应用初始化完成之后，流水线应该是开箱即用的状态。也就是说，比如项目采用的是特性分支加主干开发分支发布的策略，那么，build pack中就预置了针对每条分支的流水线配置文件。这些文件定义了每条分支需要经过的检查过程。</p><p>那么，当研发提交代码的时候，对应的流水线就会被自动触发。对于研发来说，这一切都是无感知的。只有在必要的时候（比如出现了问题），系统才会通知研发查看错误信息。这就要求<strong>流水线的Jenkinsfile要自动生成，版本控制系统和CI/CD系统也需要自动打通</strong>。比如，Webhook的注册和配置、MR的评审条件、自动过滤的分支信息等等，都是需要自动化完成的。</p><p>这里所用到的技术主要有三点。</p><ol>\n<li><strong>流水线即代码</strong>。毕竟，只有代码化的流水线配置才有可能自动化。</li>\n<li><strong>流水线的抽象和复用</strong>。以典型的Jenkinsfile为例，大多数操作应该提取到公共库，也就是shared library中，而不应该hard code在流水线配置文件里面，以提升抽象水平和能力复用。</li>\n<li><strong>流水线的条件判断</strong>。对于同一条流水线来说，根据不同的条件，可以实现不同的执行路径。</li>\n</ol><h2>3.自动化多环境部署</h2><p>对于传统应用来说，尤其是对上下游依赖比较复杂的应用来说，环境管理是个老大难的问题。Kubernetes的出现大大简化了这个过程。当然，<strong>前提是云原生应用部署在Kubernetes上时，所有依赖都是环境中的资源</strong>。</p><p>依靠Kubernetes强大的资源管理能力，能够动态初始化出来一套环境，是一种巨大的进步。</p><p>Jenkins X默认就提供了预发环境和生产环境。不仅如此，对于每一次的代码提交所产生的PR，Jenkins X都会自动初始化一个预览环境出来，并自动完成应用在预览环境的部署。这样一来，每次代码评审的时候，都能够打开预览环境查看应用的功能是否就绪。通过借助用户视角来验收这些功能，也提升了最终交付的质量。</p><p>这里面所用到的技术，除了之前我在第16讲中给你介绍过的GitOps，主要就是<strong>Prow工具</strong>。</p><p>你可以把Prow看作ChatOps的一种具体实现。实际上，它提供的是一种<strong>高度扩展的Webhook时间处理能力</strong>。比如，你可以通过对话的方式，输入 /approve 命令，Prow接收到这个命令后，就会触发对应的Webhook，并实现流水线的自动执行以及一系列的后台操作。</p><h2>4. 使用云原生流水线</h2><p>在今年年初，Jenkins X进行了一次全面的升级，开始支持Tekton流水线。Tekton的前身是2018年初创建的KNative项目，这是一个面向Kubernetes的Serverless解决方案。但随着这个项目边界的扩大，它渐渐地把整个交付流程的编排都纳入了进来，于是就成立了Tekton项目，用来提供Kubernetes原生的流水线能力。</p><p>Tekton提供了最底层的能力，Jenkins X提供了上层抽象，也就是通过一个yaml文件的形式来描述整个交付过程。我给你分享了一个流水线配置文件的例子：</p><pre><code>agent:\n  label: jenkins-maven\n  container: maven\npipelines:\n  pullRequest:\n    build:\n      steps:\n      - sh: mvn versions:set -DnewVersion=$PREVIEW_VERSION\n      - sh: mvn install\n  release:\n    setVersion:\n      steps:\n      - sh: echo \\$(jx-release-version) &gt; VERSION\n        comment: so we can retrieve the version in later steps\n      - sh: mvn versions:set -DnewVersion=\\$(cat VERSION)\n      - sh: jx step tag --version \\$(cat VERSION)\n    build:\n      steps:\n      - sh: mvn clean deploy\n</code></pre><p>在这个例子中，你可以看到，流水线过程是通过yaml格式来描述的，而不是通过我们之前所熟悉的groovy格式。另外，在这个文件中，你基本上也看不到Tekton中的资源类型，比如Task、TaskRun等。</p><p>实际上，Jenkins X基于Jenkins原有的流水线语法结构，重新定义了一套基于yaml格式的语法。你依然可以使用以前的命令在yaml中完成整个流水线的定义，但是，在后台，Jenkins X会将这个文件转换成Tekton需要使用的CRD资源并触发Kubernetes执行。</p><p>说白了，用户看起来还是在使用Jenkins，但实际上，流水线的执行引擎已经从原来的JVM变成了现在Kubernetes。流水线的执行和调度由Kubernetes来完成，整个过程中每一步的环境都是动态初始化生成的容器，所有的数据都是通过外部存储来保存的。</p><p>经过这次升级，终于实现了真正意义上的平台云原生化改造。关于这个全新的Jenkins流水线语法定义，你可以参考下<a href=\"https://jenkins-x.io/docs/reference/pipeline-syntax-reference/\">官方文档</a>。</p><p>我再给你分享一幅Serverless Jenkins和Tekton的关系示意图，希望可以帮助你更好地理解背后的实现机制。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/8f/4cb1d827f29ca6d2a55f13ab9b60a58f.jpeg?wh=936*376\" alt=\"\"></p><blockquote>\n<p><a href=\"https://dzone.com/articles/move-toward-next-generation-pipelines\">https://dzone.com/articles/move-toward-next-generation-pipelines</a></p>\n</blockquote><p>最终，我们希望达到的目的，就是不再有一个一直存在的Jenkins Master实例等待用户调用，而是一种被称为是“Ephemeral Jenkins”的机制，也就是一次性的Jenkins，只有在需要的时候才会启动一个Master实例，用完了就关闭掉，从一种静态服务变成了一种转瞬即逝的动态服务，也就是看似不在、又无处不在的形式，以此来驱动云原生应用的CI/CD之旅。</p><p>讲到这里，我们回头再看看最开始的那个场景。对于享受了云原生流水线服务的工程师而言，他所需要关注的就只有把代码写好这一件事情，其他原本需要他操心的事情，都已经通过后台的自动化、模板化实现了。</p><p>即便是在本地开发调试，你也完全可以利用Kubernetes提供的环境管理能力，甚至在IDE里面，只要保存代码，就能完成从打包、镜像生成、推送、环境初始化和部署的完整过程。我相信，这也是云原生工具赋能研发的终极追求。</p><h2>总结</h2><p>最近这两年，经常有人问我，Jenkins是不是过时了？类似Argo、Drone等更轻量化的解决方案是否更加适合云原生应用的发展？</p><p>其实，社区的开发者也在问自己这样的问题，而答案就是Jenkins X项目。这个项目整合了大量的开源工具和云原生解决方案，其中包括：</p><ul>\n<li>基于Kubernetes的云原生开发体验</li>\n<li>自动化的CI/CD流程</li>\n<li>多套预置的环境，并能够灵活初始化环境</li>\n<li>使用GitOps在多环境之间进行部署晋级</li>\n<li>云原生的流水线架构和面向用户的易用配置</li>\n<li>可插接自定义的流水线执行引擎</li>\n</ul><p>我必须要承认，云原生带给平台的改变是巨大且深刻的。这两年，我一方面惊叹于社区的巨大活力和创新力，另一方面，我也深刻地意识到“未来已来”，这种变更的脚步越来越近。</p><p>在云原生时代，我们需要打造的也应该是一个自动化、服务化、高度扩展的平台。这也就是说，<strong>用于打造云原生应用的平台自身也应该具备云原生应用的特征</strong>，并通过平台最大化地赋能研发工程师，提升他们的生产力水平。</p><h2>思考题</h2><p>对于DevOps的落地推行来说，建设工具仅仅是完成了第一步，那么，如何让工具发挥真正的威力，并在团队中真正地进行推广落地呢？你有哪些建议呢？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，也欢迎你把文章分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"27 | 巨人的肩膀：那些你不能忽视的开源工具","id":179675},"right":{"article_title":"29 | 向前一步：万人规模企业的DevOps实战转型案例（上）","id":182460}},"comments":[{"had_liked":false,"id":164340,"user_name":"happychap","can_delete":false,"product_type":"c1","uid":1388033,"ip_address":"","ucode":"C872B959BF2F3D","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/01/14a478bb.jpg","comment_is_top":false,"comment_ctime":1576939739,"is_pvip":true,"replies":[{"id":"67662","content":"呵呵，这部分内容已经在期末总结中补充上了，有时间的话可以回来看看哈！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1579855009,"ip_address":"","comment_id":164340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166874331","product_id":100036601,"comment_content":"老师，jenkins x的流水线编排yaml文件中所指定pipeline任务是像drone那样以did的方式工作，还是像传统jenkins那样重度依赖插件呢？听老师讲后，咋眼一看感觉jenkins x的学习成本不低呢。drone的话基本花一两天时间就能把它摸透。老师能否针对当前的主流流水线开源工具梳理对比一下，以便小伙伴们能够针对自身环境特点做出适合自身的选择呢？｡◕‿◕｡","like_count":2,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478729,"discussion_content":"呵呵，这部分内容已经在期末总结中补充上了，有时间的话可以回来看看哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579855009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263209,"user_name":"贾俊","can_delete":false,"product_type":"c1","uid":1591943,"ip_address":"","ucode":"A2E6DD5BAF3E27","user_header":"https://static001.geekbang.org/account/avatar/00/18/4a/87/b6b91b03.jpg","comment_is_top":false,"comment_ctime":1606047266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606047266","product_id":100036601,"comment_content":"您评论里提到的移动app分享的在线会议还有录屏可看么？谢谢","like_count":0},{"had_liked":false,"id":207159,"user_name":"李茂","can_delete":false,"product_type":"c1","uid":1016744,"ip_address":"","ucode":"B91BADEAFC9654","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/a8/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1587018448,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587018448","product_id":100036601,"comment_content":"我们公司一些产品前端使用的技术是GWT，而GWT的编译速度极慢，虽然有很多优化和升级，但是对于一些比较大的微服务组件，编译速度需20分钟左右，由于时间过长总感觉不适合做在代码提交时触发整体构建发布流水线，不然很容易出现上次的构建还没完成，又触发了一次新的构建，导致后续流程出现不可控的局面，或者说发现jenkins一致在排队构建，不知道我们这样的场景，老是怎么来看优化路径","like_count":0,"discussions":[{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293604,"discussion_content":"取消之前的aaq","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595595702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199052,"user_name":"丁乐洪","can_delete":false,"product_type":"c1","uid":1264392,"ip_address":"","ucode":"549CE57AB20B49","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/08/52954cd7.jpg","comment_is_top":false,"comment_ctime":1585477779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585477779","product_id":100036601,"comment_content":"JenkisX怎么落地呀，还是不太会用，求模板项目","like_count":0},{"had_liked":false,"id":181713,"user_name":"Oliver","can_delete":false,"product_type":"c1","uid":1692705,"ip_address":"","ucode":"527BEEBD4043F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/21/7bb4a12c.jpg","comment_is_top":false,"comment_ctime":1582622470,"is_pvip":false,"replies":[{"id":"70736","content":"欢迎你明天参加我的在线分享哈，我会专门介绍移动App的一些内容<br><br>https:&#47;&#47;www.bagevent.com&#47;event&#47;6192844","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1582899122,"ip_address":"","comment_id":181713,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1582622470","product_id":100036601,"comment_content":"老师。针对ios客户端项目，使用不了docker,而且编译速度非常慢，请问你们在编译客户端时是否有遇到编译慢的情况。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485091,"discussion_content":"欢迎你明天参加我的在线分享哈，我会专门介绍移动App的一些内容\n\nhttps://www.bagevent.com/event/6192844","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582899122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085197,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/0d/d61908c2.jpg","nickname":"呆呆栋","note":"","ucode":"66D3891587F8FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375485,"discussion_content":"石老师，超大型移动 App CI/CD 实践这个还有录播可以看？\n另外看完您的专栏其实对于DevOps才刚刚起步，实际运用中还有很多关于DevOps相关的问题和疑惑，能提供下您的微信？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621682840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1692705,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/21/7bb4a12c.jpg","nickname":"Oliver","note":"","ucode":"527BEEBD4043F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189899,"discussion_content":"好的，明天一定来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582901893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173516,"user_name":"空调","can_delete":false,"product_type":"c1","uid":1221939,"ip_address":"","ucode":"395812019BFE02","user_header":"","comment_is_top":false,"comment_ctime":1579587367,"is_pvip":false,"replies":[{"id":"67631","content":"你好，既然是独立的微服务项目，是否可以并行编译打包呢，我们是采用了分级流水线的模式，也就是组件（服务）级别和系统级别，组件级别只打包对应的组件，如果有依赖会自动触发依赖组价的打包，当然这里会做自动检查，如果没有代码变更则跳过这个过程，系统级别做整体的集成测试，每个部分都可以独立运行，你们也可以考虑一下是否可行。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1579849983,"ip_address":"","comment_id":173516,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579587367","product_id":100036601,"comment_content":"我们使用了gitlab自带的CI工具，编写了.gitlab-ci.yml。<br>目前有一个问题请教：<br>我们一个project下有5个以上的服务项目（java），有些相互关联，每次编译,打镜像需要全部执行一次，花费的时间也很长。怎么才能分开呢。","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482094,"discussion_content":"你好，既然是独立的微服务项目，是否可以并行编译打包呢，我们是采用了分级流水线的模式，也就是组件（服务）级别和系统级别，组件级别只打包对应的组件，如果有依赖会自动触发依赖组价的打包，当然这里会做自动检查，如果没有代码变更则跳过这个过程，系统级别做整体的集成测试，每个部分都可以独立运行，你们也可以考虑一下是否可行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579849983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167028,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1577673542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577673542","product_id":100036601,"comment_content":"就工具来说，不管黑猫白猫，能捉老鼠的就是好猫😀","like_count":0},{"had_liked":false,"id":165425,"user_name":"🐱","can_delete":false,"product_type":"c1","uid":1608413,"ip_address":"","ucode":"C3976AC974EA66","user_header":"https://static001.geekbang.org/account/avatar/00/18/8a/dd/3e3ea5fe.jpg","comment_is_top":false,"comment_ctime":1577236685,"is_pvip":false,"replies":[{"id":"63829","content":"呵呵，看来最近drone大有流行的趋势，已经不止一个人跟我提过这个工具了，有时间研究一下，也欢迎你可以总结一篇文章，共建专栏内容哈！<br>其实吧，工具也没那么重要，前两天还跟一个朋友聊起来，你说云容器时代了，是不是监控都要用Prometheus了，zabbix已经过时了呢？这还真不一定，有的公司用zabbix监控容器就做的好好的，所以啊，大家都知道Jenkins，Gitlab，Sonar，但是真的能用好，解决研发问题的就是另外一码事啦。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577546846,"ip_address":"","comment_id":165425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577236685","product_id":100036601,"comment_content":"感觉用drone这种，支持docker插件的模式，就非常容易灵活扩展，学习成本也不高，但是目前drone也确实存着很多不完善的地方。本质上CI&#47;CD都差不多，就是配置流水线，写pipeline，看哪个ci工具好写，用起来没啥bug，可以自己简单扩展。就基本符合要求的。","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479155,"discussion_content":"呵呵，看来最近drone大有流行的趋势，已经不止一个人跟我提过这个工具了，有时间研究一下，也欢迎你可以总结一篇文章，共建专栏内容哈！\n其实吧，工具也没那么重要，前两天还跟一个朋友聊起来，你说云容器时代了，是不是监控都要用Prometheus了，zabbix已经过时了呢？这还真不一定，有的公司用zabbix监控容器就做的好好的，所以啊，大家都知道Jenkins，Gitlab，Sonar，但是真的能用好，解决研发问题的就是另外一码事啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577546846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165006,"user_name":"阿硕","can_delete":false,"product_type":"c1","uid":1210978,"ip_address":"","ucode":"39856C29E6614B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/62/9b248708.jpg","comment_is_top":false,"comment_ctime":1577147068,"is_pvip":false,"replies":[{"id":"63832","content":"你好，我个人的建议是，对于Jenkins X项目还没有到直接迁移生产使用的成熟度，除非你想做第一批吃螃蟹的人，但是这个项目中的很多工具，理念是可以整合到自建平台里面的，我们也是这样做的。<br>之所以不推荐直接迁移，是因为Jenkins X项目要解决的问题非常明确，场景比较单一，比如强制要求Kubernetes，要求GitOps等等，这跟公司目前的流程和习惯可能会存在冲突，还没法做到灵活配置的地步哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577547313,"ip_address":"","comment_id":165006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577147068","product_id":100036601,"comment_content":"石老师，您好，由jenkins到X的迁移有什么推荐的参考实践吗？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478980,"discussion_content":"你好，我个人的建议是，对于Jenkins X项目还没有到直接迁移生产使用的成熟度，除非你想做第一批吃螃蟹的人，但是这个项目中的很多工具，理念是可以整合到自建平台里面的，我们也是这样做的。\n之所以不推荐直接迁移，是因为Jenkins X项目要解决的问题非常明确，场景比较单一，比如强制要求Kubernetes，要求GitOps等等，这跟公司目前的流程和习惯可能会存在冲突，还没法做到灵活配置的地步哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577547313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164400,"user_name":"刘超  mingo","can_delete":false,"product_type":"c1","uid":1698904,"ip_address":"","ucode":"28F6AA245D38BF","user_header":"https://static001.geekbang.org/account/avatar/00/19/ec/58/a8e35513.jpg","comment_is_top":false,"comment_ctime":1576979024,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576979024","product_id":100036601,"comment_content":"我们写java单元测试时候都是需要注册到主测试类，这样每个人都改主测试类，提交不拼频繁，容易冲突，有没有好的团队写单元测试，避免冲突的方法？","like_count":0,"discussions":[{"author":{"id":1031677,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bd/fd/3f5d5db5.jpg","nickname":"scorpiozj","note":"","ucode":"C66EA76809F9BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":103906,"discussion_content":"依赖注入？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577406342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1698904,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ec/58/a8e35513.jpg","nickname":"刘超  mingo","note":"","ucode":"28F6AA245D38BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1031677,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bd/fd/3f5d5db5.jpg","nickname":"scorpiozj","note":"","ucode":"C66EA76809F9BF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110633,"discussion_content":"具体呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577749856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":103906,"ip_address":""},"score":110633,"extra":""}]}]},{"had_liked":false,"id":164190,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1576907008,"is_pvip":false,"replies":[{"id":"63833","content":"你好，我的建议还是有必要看下的，就像你说的Drone解决一些轻量级的CI&#47;CD是足够用了，这是好事，也是坏事，因为屏蔽了很多实现的细节，后面也只能使用这个工具了。而Jenkins X不仅是几个工具，而是一组工具的集合，并且最重要的是他整体的设计思路，包括CI&#47;CD跟PR，ChatOps，GitOps，晋级等等的结合，还有云原生流水线的一些实践，都是基于Kubernetes底层实现来封装的，我觉得如果够用就好，那不需要研究这么复杂的Jenkins X，但是如果未来有自己设计改造平台的可能，多了解点并没有什么坏处哈！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577547728,"ip_address":"","comment_id":164190,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576907008","product_id":100036601,"comment_content":"老师, 您好!<br><br>我之前一直没使用过持续集成平台.<br>也没有任何java的基础.<br><br>今年项目组在选型时最终选用了熟悉的Go语言开发的Drone.<br>在目前这个小规模的项目中,使用还是蛮方便的,只需要添加一个.drone.yml配置文件.<br>整个Drone平台的部署也非常简单,就启动两个docker镜像即可.<br><br>老师, 您说有必要自己再折腾一下Jenkins X,开开眼界么?<br>","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478675,"discussion_content":"你好，我的建议还是有必要看下的，就像你说的Drone解决一些轻量级的CI/CD是足够用了，这是好事，也是坏事，因为屏蔽了很多实现的细节，后面也只能使用这个工具了。而Jenkins X不仅是几个工具，而是一组工具的集合，并且最重要的是他整体的设计思路，包括CI/CD跟PR，ChatOps，GitOps，晋级等等的结合，还有云原生流水线的一些实践，都是基于Kubernetes底层实现来封装的，我觉得如果够用就好，那不需要研究这么复杂的Jenkins X，但是如果未来有自己设计改造平台的可能，多了解点并没有什么坏处哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577547728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107427,"discussion_content":"了解了，感谢老师的答复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577579884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164149,"user_name":"johnny","can_delete":false,"product_type":"c1","uid":1210226,"ip_address":"","ucode":"54E78B7BBC6AF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/72/8f77ddb0.jpg","comment_is_top":false,"comment_ctime":1576895756,"is_pvip":false,"replies":[{"id":"63834","content":"这个话题比较专业，我给你推荐一篇文章参考：https:&#47;&#47;www.cnblogs.com&#47;sunsky303&#47;p&#47;11544540.html","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577547939,"ip_address":"","comment_id":164149,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576895756","product_id":100036601,"comment_content":"老师可以简单说下Kubernetes对cpu、内存、硬盘等硬件资源的管理和调度原理吗？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478658,"discussion_content":"这个话题比较专业，我给你推荐一篇文章参考：https://www.cnblogs.com/sunsky303/p/11544540.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577547939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010511,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/4f/7902b8a5.jpg","nickname":"Cary","note":"","ucode":"0161D180D894E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93846,"discussion_content":"这个极客时间有专门的kubernetes课程可以了解下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576937603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164126,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1576889409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576889409","product_id":100036601,"comment_content":"      东西不错：云生态的一个不错的解决方式，有机会去尝试一下，业务和框架足够了解之后；云框架的SVN😀<br>   ","like_count":0}]}