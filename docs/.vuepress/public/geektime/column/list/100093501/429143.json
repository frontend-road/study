{"id":429143,"title":"05｜标准先行：Go项目的布局标准是什么？","content":"<p>你好，我是Tony Bai。</p><p>在前面的讲解中，我们编写的Go程序都是简单程序，一般由一个或几个Go源码文件组成，而且所有源码文件都在同一个目录中。但是生产环境中运行的实用程序可不会这么简单，通常它们都有着复杂的项目结构布局。弄清楚一个实用Go项目的项目布局标准是Go开发者走向编写复杂Go程序的第一步，也是必经的一步。</p><p>但Go官方到目前为止也没有给出一个关于Go项目布局标准的正式定义。那在这样的情况下，Go社区是否有我们可以遵循的参考布局，或者事实标准呢？我可以肯定的告诉你：有的。在这一节课里，我就来告诉你Go社区广泛采用的Go项目布局是什么样子的。</p><p>要想了解Go项目的结构布局以及演化历史，全世界第一个Go语言项目是一个最好的切入点。所以，我们就先来看一下Go语言“创世项目”的结构布局是什么样的。</p><h3>Go语言“创世项目”结构是怎样的？</h3><p>什么是“<strong>Go语言的创世项目</strong>”呢？其实就是Go语言项目自身，它是全世界第一个Go语言项目。但这么说也不够精确，因为Go语言项目从项目伊始就混杂着多种语言，而且以C和Go代码为主，Go语言的早期版本C代码的比例还不小。</p><p>我们先用 <a href=\"https://gitlab.com/esr/loccount\">loccount工具</a>对Go语言发布的第一个 <a href=\"https://github.com/golang/go/releases/tag/go1\">Go 1.0版本</a>分析看看：</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">$loccount .\nall          SLOC=460992  (100.00%)\tLLOC=193045  in 2746 files\nGo           SLOC=256321  (55.60%)\tLLOC=109763  in 1983 files\nC            SLOC=148001  (32.10%)\tLLOC=73458   in 368 files\nHTML         SLOC=25080   (5.44%)\tLLOC=0       in 57 files\nasm          SLOC=10109   (2.19%)\tLLOC=0       in 133 files\n... ...\n</code></pre><p>你会发现，在1.0版本中，Go代码行数占据一半以上比例，但是C语言代码行数也占据了32.10%的份额。而且在后续Go版本演进过程中，Go语言代码行数占比还在逐步提升，直到Go 1.5版本实现自举后，Go语言代码行数占比将近90%，C语言比例下降为不到1%，这一比例一直延续至今。</p><p>虽然C代码比例下降，Go代码比例上升，但Go语言项目的布局结构却整体保留了下来，十多年间虽然也有一些小范围变动，但整体没有本质变化。作为Go语言的“创世项目”，它的结构布局对后续Go社区的项目具有重要的参考价值，尤其是Go项目早期src目录下面的结构。</p><p>为了方便查看，我们首先下载Go语言创世项目源码：</p><pre><code class=\"language-plain\">$git clone https://github.com/golang/go.git\n</code></pre><p>进入Go语言项目根目录后，我们使用tree命令来查看一下Go语言项目自身的最初源码结构布局，以Go 1.3版本为例，结果是这样的：</p><pre><code class=\"language-plain\">$cd go // 进入Go语言项目根目录\n$git checkout go1.3 // 切换到go 1.3版本\n$tree -LF 1 ./src // 查看src目录下的结构布局\n./src\n├── all.bash*\n├── clean.bash*\n├── cmd/\n├── make.bash*\n├── Make.dist\n├── pkg/\n├── race.bash*\n├── run.bash*\n... ...\n└── sudo.bash*\n</code></pre><p>从上面的结果来看，src目录下面的结构有这三个特点。</p><p>首先，你可以看到，以all.bash为代表的代码构建的脚本源文件放在了src下面的顶层目录下。</p><p>第二，src下的二级目录cmd下面存放着Go相关可执行文件的相关目录，我们可以深入查看一下cmd目录下的结构：</p><pre><code class=\"language-plain\">$ tree -LF 1 ./cmd\n./cmd\n... ...\n├── 6a/\n├── 6c/\n├── 6g/\n... ...\n├── cc/\n├── cgo/\n├── dist/\n├── fix/\n├── gc/\n├── go/\n├── gofmt/\n├── ld/\n├── nm/\n├── objdump/\n├── pack/\n└── yacc/\n</code></pre><p>我们可以看到，这里的每个子目录都是一个Go工具链命令或子命令对应的可执行文件。其中，6a、6c、6g等是早期Go版本针对特定平台的汇编器、编译器等的特殊命名方式。</p><p>第三个特点，你会看到src下的二级目录pkg下面存放着运行时实现、标准库包实现，这些包既可以被上面cmd下各程序所导入，也可以被Go语言项目之外的Go程序依赖并导入。下面是我们通过tree命令查看pkg下面结构的输出结果：</p><pre><code class=\"language-plain\"># tree -LF 1 ./pkg\n./pkg\n... ...\n├── flag/\n├── fmt/\n├── go/\n├── hash/\n├── html/\n├── image/\n├── index/\n├── io/\n... ...\n├── net/\n├── os/\n├── path/\n├── reflect/\n├── regexp/\n├── runtime/\n├── sort/\n├── strconv/\n├── strings/\n├── sync/\n├── syscall/\n├── testing/\n├── text/\n├── time/\n├── unicode/\n└── unsafe/\n</code></pre><p>虽然Go语言的创世项目的src目录下的布局结构，离现在已经比较久远了，但是这样的布局特点依然对后续很多Go项目的布局产生了比较大的影响，尤其是那些Go语言早期采纳者建立的Go项目。比如，Go调试器项目Delve、开启云原生时代的Go项目Docker，以及云原生时代的“操作系统”项目Kubernetes等，它们的项目布局，至今都还保持着与Go创世项目早期相同的风格。</p><p>当然了，这些早期的布局结构一直在不断地演化，简单来说可以归纳为下面三个比较重要的演进。</p><p><strong>演进一：Go 1.4版本删除pkg这一中间层目录并引入internal目录</strong></p><p>出于简化源码树层次的原因，Go语言项目的Go 1.4版本对它原来的src目录下的布局做了两处调整。第一处是删除了Go源码树中“src/pkg/xxx”中pkg这一层级目录而直接使用src/xxx。这样一来，Go语言项目的源码树深度减少一层，更便于Go开发者阅读和探索Go项目源码。</p><p>另外一处就是Go 1.4引入internal包机制，增加了internal目录。这个internal机制其实是所有Go项目都可以用的，Go语言项目自身也是自Go 1.4版本起，就使用internal机制了。根据internal机制的定义，一个Go项目里的internal目录下的Go包，只可以被本项目内部的包导入。项目外部是无法导入这个internal目录下面的包的。可以说，internal目录的引入，让一个Go项目中Go包的分类与用途变得更加清晰。</p><p><strong>演进二：Go1.6版本增加vendor目录</strong></p><p>第二次的演进，其实是为了解决Go包依赖版本管理的问题，Go核心团队在Go 1.5版本中做了第一次改进。增加了vendor构建机制，也就是Go源码的编译可以不在GOPATH环境变量下面搜索依赖包的路径，而在vendor目录下查找对应的依赖包。</p><p>Go语言项目自身也在Go 1.6版本中增加了vendor目录以支持vendor构建，但vendor目录并没有实质性缓存任何第三方包。直到Go 1.7版本，Go才真正在vendor下缓存了其依赖的外部包。这些依赖包主要是golang.org/x下面的包，这些包同样是由Go核心团队维护的，并且其更新速度不受Go版本发布周期的影响。</p><p>vendor机制与目录的引入，让Go项目第一次具有了可重现构建（Reproducible Build）的能力。</p><p><strong>演进三：Go 1.13版本引入go.mod和go.sum</strong></p><p>第三次演进，还是为了解决Go包依赖版本管理的问题。在Go 1.11版本中，Go核心团队做出了第二次改进尝试：引入了Go Module构建机制，也就是在项目引入go.mod以及在go.mod中明确项目所依赖的第三方包和版本，项目的构建就将摆脱GOPATH的束缚，实现精准的可重现构建。</p><p>Go语言项目自身在Go 1.13版本引入go.mod和go.sum以支持Go Module构建机制，下面是Go 1.13版本的go.mod文件内容：</p><pre><code class=\"language-plain\">module std\n\ngo 1.13\n\nrequire (\n\tgolang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8\n\tgolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7\n\tgolang.org/x/sys v0.0.0-20190529130038-5219a1e1c5f8 // indirect\n\tgolang.org/x/text v0.3.2 // indirect\n)\n</code></pre><p>我们看到，Go语言项目自身所依赖的包在go.mod中都有对应的信息，而原本这些依赖包是缓存在vendor目录下的。</p><p>总的来说，这三次演进主要体现在简化结构布局，以及优化包依赖管理方面，起到了改善Go开发体验的作用。可以说，Go创世项目的源码布局以及演化对Go社区项目的布局具有重要的启发意义，以至于在多年的Go社区实践后，Go社区逐渐形成了公认的Go项目的典型结构布局。</p><h3>现在的Go项目的典型结构布局是怎样的？</h3><p>一个Go项目通常分为可执行程序项目和库项目，现在我们就来分析一下这两类Go项目的典型结构布局分别是怎样的。</p><p><strong>首先我们先来看Go可执行程序项目的典型结构布局。</strong></p><p>可执行程序项目是以构建可执行程序为目的的项目，Go社区针对这类Go项目所形成的典型结构布局是这样的：</p><pre><code class=\"language-plain\">$tree -F exe-layout \nexe-layout\n├── cmd/\n│&nbsp;&nbsp; ├── app1/\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── main.go\n│&nbsp;&nbsp; └── app2/\n│&nbsp;&nbsp;     └── main.go\n├── go.mod\n├── go.sum\n├── internal/\n│&nbsp;&nbsp; ├── pkga/\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── pkg_a.go\n│&nbsp;&nbsp; └── pkgb/\n│&nbsp;&nbsp;     └── pkg_b.go\n├── pkg1/\n│&nbsp;&nbsp; └── pkg1.go\n├── pkg2/\n│&nbsp;&nbsp; └── pkg2.go\n└── vendor/\n</code></pre><p>这样的一个Go项目典型布局就是“脱胎”于Go创世项目的最新结构布局，我现在跟你解释一下这里面的几个要点。</p><p>我们从上往下按顺序来，先来看 <strong>cmd目录</strong>。cmd目录就是存放项目要编译构建的可执行文件对应的main包的源文件。如果你的项目中有多个可执行文件需要构建，每个可执行文件的main包单独放在一个子目录中，比如图中的app1、app2，cmd目录下的各app的main包将整个项目的依赖连接在一起。</p><p>而且通常来说，main包应该很简洁。我们在main包中会做一些命令行参数解析、资源初始化、日志设施初始化、数据库连接初始化等工作，之后就会将程序的执行权限交给更高级的执行控制对象。另外，也有一些Go项目将cmd这个名字改为app或其他名字，但它的功能其实并没有变。</p><p>接着我们来看 <strong>pkgN目录</strong>，这是一个存放项目自身要使用、同样也是可执行文件对应main包所要依赖的库文件，同时这些目录下的包还可以被外部项目引用。</p><p>然后是 <strong>go.mod</strong> 和 <strong>go.sum</strong> ，它们是Go语言包依赖管理使用的配置文件。我们前面说过，Go 1.11版本引入了Go Module构建机制，这里我建议你所有新项目都基于Go Module来进行包依赖管理，因为这是目前Go官方推荐的标准构建模式。</p><p>对于还没有使用Go Module进行包依赖管理的遗留项目，比如之前采用dep、glide等作为包依赖管理工具的，建议尽快迁移到Go Module模式。Go命令支持直接将dep的Gopkg.toml/Gopkg.lock或glide的glide.yaml/glide.lock转换为go.mod。</p><p>最后我们再来看看 <strong>vendor目录</strong>。vendor是Go 1.5版本引入的用于在项目本地缓存特定版本依赖包的机制，在Go Modules机制引入前，基于vendor可以实现可重现构建，保证基于同一源码构建出的可执行程序是等价的。</p><p>不过呢，我们这里将vendor目录视为一个可选目录。原因在于，Go Module本身就支持可再现构建，而无需使用vendor。 当然Go Module机制也保留了vendor目录（通过go mod vendor可以生成vendor下的依赖包，通过go build -mod=vendor可以实现基于vendor的构建）。一般我们仅保留项目根目录下的vendor目录，否则会造成不必要的依赖选择的复杂性。</p><p>当然了，有些开发者喜欢借助一些第三方的构建工具辅助构建，比如：make、bazel等。你可以将这类外部辅助构建工具涉及的诸多脚本文件（比如Makefile）放置在项目的顶层目录下，就像Go创世项目中的all.bash那样。</p><p>另外，这里只要说明一下的是，Go 1.11引入的module是一组同属于一个版本管理单元的包的集合。并且Go支持在一个项目/仓库中存在多个module，但这种管理方式可能要比一定比例的代码重复引入更多的复杂性。 因此，如果项目结构中存在版本管理的“分歧”，比如：app1和app2的发布版本并不总是同步的，那么我建议你将项目拆分为多个项目（仓库），每个项目单独作为一个module进行单独的版本管理和演进。</p><p>当然如果你非要在一个代码仓库中存放多个module，那么新版Go命令也提供了很好的支持。比如下面代码仓库multi-modules下面有三个module：mainmodule、module1和module2：</p><pre><code class=\"language-plain\">$tree multi-modules\nmulti-modules\n├── go.mod // mainmodule\n├── module1\n│&nbsp;&nbsp; └── go.mod // module1\n└── module2\n&nbsp; &nbsp; └── go.mod // module2\n</code></pre><p>我们可以通过git tag名字来区分不同module的版本。其中vX.Y.Z形式的tag名字用于代码仓库下的mainmodule；而module1/vX.Y.Z形式的tag名字用于指示module1的版本；同理，module2/vX.Y.Z形式的tag名字用于指示module2版本。</p><p>如果Go可执行程序项目有一个且只有一个可执行程序要构建，那就比较好办了，我们可以将上面项目布局进行简化：</p><pre><code class=\"language-plain\">$tree -F -L 1 single-exe-layout\nsingle-exe-layout\n├── go.mod\n├── internal/\n├── main.go\n├── pkg1/\n├── pkg2/\n└── vendor/\n</code></pre><p>你可以看到，我们删除了cmd目录，将唯一的可执行程序的main包就放置在项目根目录下，而其他布局元素的功用不变。</p><p><strong>好了到这里，我们已经了解了Go可执行程序项目的典型布局，现在我们再来看看Go库项目的典型结构布局是怎样的。</strong></p><p>Go库项目仅对外暴露Go包，这类项目的典型布局形式是这样的：</p><pre><code class=\"language-plain\">$tree -F lib-layout \nlib-layout\n├── go.mod\n├── internal/\n│&nbsp;&nbsp; ├── pkga/\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── pkg_a.go\n│&nbsp;&nbsp; └── pkgb/\n│&nbsp;&nbsp;     └── pkg_b.go\n├── pkg1/\n│&nbsp;&nbsp; └── pkg1.go\n└── pkg2/\n    └── pkg2.go\n</code></pre><p>我们看到，库类型项目相比于Go可执行程序项目的布局要简单一些。因为这类项目不需要构建可执行程序，所以去除了cmd目录。</p><p>而且，在这里，vendor也不再是可选目录了。对于库类型项目而言，我们并不推荐在项目中放置vendor目录去缓存库自身的第三方依赖，库项目仅通过go.mod文件明确表述出该项目依赖的module或包以及版本要求就可以了。</p><p>Go库项目的初衷是为了对外部（开源或组织内部公开）暴露API，对于仅限项目内部使用而不想暴露到外部的包，可以放在项目顶层的internal目录下面。当然internal也可以有多个并存在于项目结构中的任一目录层级中，关键是项目结构设计人员要明确各级internal包的应用层次和范围。</p><p>对于有一个且仅有一个包的Go库项目来说，我们也可以将上面的布局做进一步简化，简化的布局如下所示：</p><pre><code class=\"language-plain\">$tree -L 1 -F single-pkg-lib-layout\nsingle-pkg-lib-layout\n├── feature1.go\n├── feature2.go\n├── go.mod\n└── internal/\n</code></pre><p>简化后，我们将这唯一包的所有源文件放置在项目的顶层目录下（比如上面的feature1.go和feature2.go），其他布局元素位置和功用不变。</p><p>好了，现在我们已经了解完目前Go项目的典型结构布局了。不过呢，除了这些之外，还要注意一下早期Go可执行程序项目的经典布局，这个又有所不同。</p><h3>注意早期Go可执行程序项目的典型布局</h3><p>很多早期接纳Go语言的开发者所建立的Go可执行程序项目，深受Go创世项目1.4版本之前的布局影响，这些项目将所有可暴露到外面的Go包聚合在pkg目录下，就像前面Go 1.3版本中的布局那样，它们的典型布局结构是这样的：</p><pre><code class=\"language-plain\">$tree -L 3 -F early-project-layout\nearly-project-layout\n└── exe-layout/\n    ├── cmd/\n    │&nbsp;&nbsp; ├── app1/\n    │&nbsp;&nbsp; └── app2/\n    ├── go.mod\n    ├── internal/\n    │&nbsp;&nbsp; ├── pkga/\n    │&nbsp;&nbsp; └── pkgb/\n    ├── pkg/\n    │&nbsp;&nbsp; ├── pkg1/\n    │&nbsp;&nbsp; └── pkg2/\n    └── vendor/\n</code></pre><p>我们看到，原本放在项目顶层目录下的pkg1和pkg2公共包被统一聚合到pkg目录下了。而且，这种早期Go可执行程序项目的典型布局在Go社区内部也不乏受众，很多新建的Go项目依然采用这样的项目布局。</p><p>所以，当你看到这样的布局也不要奇怪，并且在我的讲解后，你应该就明确在这样的布局下pkg目录所起到的“聚类”的作用了。不过，在这里还是建议你在创建新的Go项目时，优先采用前面的标准项目布局。</p><h3>小结</h3><p>到这里，我们今天这门课就结束了。在这一节课里，我们学习了Go创世项目，也就是Go语言项目自身的项目源码布局，以及演进情况。在Go创世项目的启发下，Go社区在多年实践中形成了典型的Go项目结构布局形式。</p><p>我们将Go项目分为可执行程序项目和Go库项目两类进行了详细的项目典型布局讲解，这里简单回顾一下。</p><p>首先，对于以生产可执行程序为目的的Go项目，它的典型项目结构分为五部分：</p><ul>\n<li>放在项目顶层的Go Module相关文件，包括go.mod和go.sum；</li>\n<li>cmd目录：存放项目要编译构建的可执行文件所对应的main包的源码文件；</li>\n<li>项目包目录：每个项目下的非main包都“平铺”在项目的根目录下，每个目录对应一个Go包；</li>\n<li>internal目录：存放仅项目内部引用的Go包，这些包无法被项目之外引用；</li>\n<li>vendor目录：这是一个可选目录，为了兼容Go 1.5引入的vendor构建模式而存在的。这个目录下的内容均由Go命令自动维护，不需要开发者手工干预。</li>\n</ul><p>第二，对于以生产可复用库为目的的Go项目，它的典型结构则要简单许多，我们可以直接理解为在Go可执行程序项目的基础上去掉cmd目录和vendor目录。</p><p>最后，早期接纳Go语言的开发者所建立的项目的布局深受Go创世项目1.4版本之前布局的影响，将可导出的公共包放入单独的pkg目录下，我们了解这种情况即可。对于新建Go项目，我依旧建议你采用前面介绍的标准布局形式。</p><p>现在，如果你要再面对一个要用于生产环境的Go应用项目的布局问题，是不是胸有成竹了呢？</p><h3>思考题</h3><p>如果非要你考虑Go项目结构的最小标准布局，那么你觉得这个布局中都应该包含哪些东西呢？欢迎在留言区留下你的答案。</p><p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go项目布局感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","neighbors":{"left":{"article_title":"04｜初窥门径：一个Go程序的结构是怎样的？","id":428267},"right":{"article_title":"06｜构建模式：Go是怎么解决包依赖管理问题的？","id":429941}},"comments":[{"had_liked":false,"id":317679,"user_name":"Nlife","can_delete":false,"product_type":"c1","uid":2077869,"ip_address":"","ucode":"BD075AD4EB9ECE","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b4/ad/94c0ae00.jpg","comment_is_top":false,"comment_ctime":1634888299,"is_pvip":false,"replies":[{"id":115422,"content":"举个例子，假设我们有两个go module，两个module的结构如下：\n\n.\n├── module1\n│   ├── go.mod\n│   ├── internal\n│   │   └── pkga\n│   ├── pkg1\n│   └── pkg2\n└── module2\n    ├── go.mod\n    └── pkg1\n\nmodule1中的internal&#47;pkga包可以被module1的pkg1和pkg2包所导入。\n\n但无法被module2的pkg1包所导入。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635235322,"ip_address":"","comment_id":317679,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，这句话&quot;一个 Go 项目里的 internal 目录下的 Go 包，只可以被本项目内部的包导入。项目外部是无法导入这个 internal 目录下面的包的。&quot; 能否再讲解具体一些呢？比如后续我们的课程中是否会讲到这块的实践操作？","like_count":62},{"had_liked":false,"id":317687,"user_name":"Geek_c1467d","can_delete":false,"product_type":"c1","uid":2586041,"ip_address":"","ucode":"54189B95CB5D86","user_header":"","comment_is_top":false,"comment_ctime":1634890280,"is_pvip":false,"replies":[{"id":115418,"content":"这个已经被Go官方否了，https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout&#47;issues&#47;117#issuecomment-828503689。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234218,"ip_address":"","comment_id":317687,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"另外goalng标准布局可以参考下这个：https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout","like_count":29,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528930,"discussion_content":"这个已经被Go官方否了，https://github.com/golang-standards/project-layout/issues/117#issuecomment-828503689。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1635234218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568845,"discussion_content":"go团队没有给出一个标准目录，意味着是没有标准的。但golang-standards/project-layout项目提供了尝试规范化的一种布局思路参考。所以仅仅是参考而已。对于没有go项目经验的人来说，是一个很好的学习材料。待自己或团队的go项目经验成熟以后，是可以根据自身情况做适当调整的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1651242611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414877,"discussion_content":"这个并不是官方的标准布局，但是也算是一个不错的项目布局。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636909055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1819176,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c2/28/32fdc447.jpg","nickname":"newchaos","note":"","ucode":"EBC1909694A0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652794,"discussion_content":"https://github.com/golang-standards/project-layout/issues/117#issuecomment-828503689     mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729647335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317854,"user_name":"Linuaa","can_delete":false,"product_type":"c1","uid":2573678,"ip_address":"","ucode":"99048EE28E5C21","user_header":"https://static001.geekbang.org/account/avatar/00/27/45/6e/fe395ded.jpg","comment_is_top":false,"comment_ctime":1634995920,"is_pvip":false,"replies":[{"id":115426,"content":"可重现构建，顾名思义，就是针对同一份go module的源码进行构建，不同人，在不同机器(同一架构，比如都是x86-64)，相同os上，在不同时间点都能得到相同的二进制文件。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635237408,"ip_address":"","comment_id":317854,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师可以讲讲 ”Reproducible Build“ 吗，看了一些文章感觉抓不到重点。谢谢老师~","like_count":18,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529007,"discussion_content":"可重现构建，顾名思义，就是针对同一份go module的源码进行构建，不同人，在不同机器(同一架构，比如都是x86-64)，相同os上，在不同时间点都能得到相同的二进制文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635237408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317678,"user_name":"郭纯","can_delete":false,"product_type":"c1","uid":1314521,"ip_address":"","ucode":"2613860B4642C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/d9/e61ce097.jpg","comment_is_top":false,"comment_ctime":1634888177,"is_pvip":false,"replies":[{"id":115416,"content":"Go语言技术负责人Russ Cox曾谈过这个问题，他认为一个项目的最小布局至少有一个go.mod，一个LICENSE（针对开源项目）。然后就像你说的，在项目根目录下放置go代码即可。对于tiny项目，一个main.go也是可以的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635233774,"ip_address":"","comment_id":317678,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"对于最小的布局 我觉的只要这几个文件就好了 main.go.  go.mod  go.sum. 既然是小项目代码量不多所有代码在 main.go 文件就好。","like_count":17,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528925,"discussion_content":"Go语言技术负责人Russ Cox曾谈过这个问题，他认为一个项目的最小布局至少有一个go.mod，一个LICENSE（针对开源项目）。然后就像你说的，在项目根目录下放置go代码即可。对于tiny项目，一个main.go也是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635233774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333060,"user_name":"光明","can_delete":false,"product_type":"c1","uid":1289275,"ip_address":"","ucode":"91182728077051","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/3b/53dab296.jpg","comment_is_top":false,"comment_ctime":1644040071,"is_pvip":false,"replies":[{"id":121739,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644120938,"ip_address":"","comment_id":333060,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这一节虽然没有搞懂太多，反复看了3遍，后发现这一章节，是现行很多 GO 语言书籍中缺少部分。非常感谢Tony 老师的这么细致有详细的讲解。细微之处见真功夫。","like_count":14,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549603,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644120938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342936,"user_name":"alexgreenbar","can_delete":false,"product_type":"c1","uid":1003655,"ip_address":"","ucode":"87ED7233E2767C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/87/dde718fa.jpg","comment_is_top":false,"comment_ctime":1650541124,"is_pvip":false,"replies":[{"id":125297,"content":"我觉得你提到的是两件事：\n\n1. go项目标准布局的事儿\n\n到目前为止，Go官方并没有给出书面标准。文中内容也是基于Go项目自身以及Go社区的主流实践整理而得的。\n\nGo语言技术负责人Russ Cox曾谈过这个问题，但他仅给出对于go项目最小布局的观点，他认为一个项目的最小布局至少有一个go.mod，一个LIC\nENSE（针对开源项目）。其他都有程序员自行确定。不可否认，没有基本标准布局，这的确给规模稍大一些的项目的开发人员带来困惑。 \n\n2. 没有统一的集中的module&#47;包库\n\nGo没有，且也是故意这么设计的。你提到Go团队故意忽视了软件工业过去20年的积累，但从Go团队角度来看，这是他们的一种解决安全风险的方案。可以看看这篇文章：https:&#47;&#47;tonybai.com&#47;2022&#47;04&#47;02&#47;how-go-mitigates-supply-chain-attacks\n\n从今年来npm暴露出的一系列安全问题来看，集中库的确也存在各种各样的问题。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650604252,"ip_address":"","comment_id":342936,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这些难道不是一门语言一开始就应该解决的问题吗？10多年过去了，go居然还在纠结这个，在这点上，感觉go的创建者们故意忽视了软件工业过去20年的积累，不比较语言本身，只考虑构建：java有maven，rust有cargo，并且它们都有集中可访问的repository用于分享，go到现在都没有这个机制，也是服了。","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549603,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644120938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317581,"user_name":"Long_hz","can_delete":false,"product_type":"c1","uid":1101646,"ip_address":"","ucode":"9EDF43829C8E47","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/4e/01479fc4.jpg","comment_is_top":false,"comment_ctime":1634865830,"is_pvip":false,"replies":[{"id":115397,"content":"loccount只是一个代码统计工具，你可以用其他类似的工具替代。如果非要编译loccount工具，并且它没有go.mod的话，可以下载loccount工具源码后，在你的本地为其创建一个go.mod，然后编译试试。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635217986,"ip_address":"","comment_id":317581,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师你好，请问一下loccount 工具编译的时候缺少go.mod需要怎么解决？","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566111,"discussion_content":"我觉得你提到的是两件事：\n\n1. go项目标准布局的事儿\n\n到目前为止，Go官方并没有给出书面标准。文中内容也是基于Go项目自身以及Go社区的主流实践整理而得的。\n\nGo语言技术负责人Russ Cox曾谈过这个问题，但他仅给出对于go项目最小布局的观点，他认为一个项目的最小布局至少有一个go.mod，一个LIC\nENSE（针对开源项目）。其他都有程序员自行确定。不可否认，没有基本标准布局，这的确给规模稍大一些的项目的开发人员带来困惑。 \n\n2. 没有统一的集中的module/包库\n\nGo没有，且也是故意这么设计的。你提到Go团队故意忽视了软件工业过去20年的积累，但从Go团队角度来看，这是他们的一种解决安全风险的方案。可以看看这篇文章：https://tonybai.com/2022/04/02/how-go-mitigates-supply-chain-attacks\n\n从今年来npm暴露出的一系列安全问题来看，集中库的确也存在各种各样的问题。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1650604252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317704,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1634895939,"is_pvip":false,"replies":[{"id":115431,"content":"感谢认真的思考和棒棒的问题，我也认真回答一下:)\n\n1. 是的，如果采用vendor模式，依赖包会缓存在vendor目录下。\n2. 在go module机制进入go之前，也就是gopath构建模式时代，我们谈到的所有依赖都是包与包的版本；但go module引入后，所有的版本信息都绑定在module上，所以你在go.mod中看到的require块中的依赖都是module与module的版本，不再是包。\n3. 06和07讲会提到。\n4. 06,07讲会有例子。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635238575,"ip_address":"","comment_id":317704,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bail 老师的这一讲关于Go项目的布局标准的讲解非常专业。极客时间孔令飞老师的专栏，对这一布局方式很很好的实践。\n\n有以下疑问，烦请老师抽空解答一下：\n\n1. “ 这些依赖包是缓存在 vendor 目录下的”。那我可以是否可以理解为，接是把这些包的源码文件下载到本地的vendor目录中呢？\n\n2. “库项目仅通过 go.mod 文件明确表述出该项目依赖的 module 或包以及版本要求就可以了。” 请问一下，go.mod文件中还能表述依赖的 module吗？ 我看go.mod文件中的内容一般不都是依赖的第三方包和版本吗？\n\n3. 使用vendor的优势是什么？对比使用 go module形式，只是访问第三方包的源码路径的不同吗？\n\n4. 老师，后面的项目代码会在这一讲的目录基础上来构建吗？这一讲没有实际的代码操作，如果没有实际的操作感受，很容易遗忘这些概念。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528938,"discussion_content":"感谢认真的思考和棒棒的问题，我也认真回答一下:)\n\n1. 是的，如果采用vendor模式，依赖包会缓存在vendor目录下。\n2. 在go module机制进入go之前，也就是gopath构建模式时代，我们谈到的所有依赖都是包与包的版本；但go module引入后，所有的版本信息都绑定在module上，所以你在go.mod中看到的require块中的依赖都是module与module的版本，不再是包。\n3. 06和07讲会提到。\n4. 06,07讲会有例子。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635238575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408456,"discussion_content":"感谢老师的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635250494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317694,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1634892554,"is_pvip":true,"replies":[{"id":115417,"content":"是的。loccount就是它的作品。他还用go编写了将gcc代码从svn仓库无损(提交历史)地迁移到git的工具。可以看看他切换到go的感悟：https:&#47;&#47;gitlab.com&#47;esr&#47;reposurgeon&#47;blob&#47;master&#47;GoNotes.adoc","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234161,"ip_address":"","comment_id":317694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"诶，ESR也写go了？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528934,"discussion_content":"是的。loccount就是它的作品。他还用go编写了将gcc代码从svn仓库无损(提交历史)地迁移到git的工具。可以看看他切换到go的感悟：https://gitlab.com/esr/reposurgeon/blob/master/GoNotes.adoc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318495,"user_name":"向阳花开","can_delete":false,"product_type":"c1","uid":2163512,"ip_address":"","ucode":"7025BAC303BEBD","user_header":"https://static001.geekbang.org/account/avatar/00/21/03/38/f798eec1.jpg","comment_is_top":false,"comment_ctime":1635314193,"is_pvip":false,"replies":[{"id":115508,"content":"哈哈，昼夜努力中。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635370559,"ip_address":"","comment_id":318495,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师老师加把劲，一周七天不断更😄","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529271,"discussion_content":"哈哈，昼夜努力中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635370559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317679,"user_name":"Nlife","can_delete":false,"product_type":"c1","uid":2077869,"ip_address":"","ucode":"BD075AD4EB9ECE","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b4/ad/94c0ae00.jpg","comment_is_top":false,"comment_ctime":1634888299,"is_pvip":false,"replies":[{"id":115422,"content":"举个例子，假设我们有两个go module，两个module的结构如下：\n\n.\n├── module1\n│   ├── go.mod\n│   ├── internal\n│   │   └── pkga\n│   ├── pkg1\n│   └── pkg2\n└── module2\n    ├── go.mod\n    └── pkg1\n\nmodule1中的internal&#47;pkga包可以被module1的pkg1和pkg2包所导入。\n\n但无法被module2的pkg1包所导入。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635235322,"ip_address":"","comment_id":317679,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，这句话&quot;一个 Go 项目里的 internal 目录下的 Go 包，只可以被本项目内部的包导入。项目外部是无法导入这个 internal 目录下面的包的。&quot; 能否再讲解具体一些呢？比如后续我们的课程中是否会讲到这块的实践操作？","like_count":62,"discussions":[{"author":{"id":1802350,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/6e/94987c2a.jpg","nickname":"XLQ","note":"","ucode":"7CEBC4DC1F34C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588607,"discussion_content":"内部包的规范约定：导出路径包含internal关键字的包，只允许internal的父级目录及父级目录的子包导入，其它包无法导入。\n\n老师举的例子中，internal的父级目录是module1，父级目录的子包有module1/pkg1、module1/pkg2，所以在这个例子中internal只能被这三个地方导入。\n\n上面的约定是由Go编译器验证的，internal/是Go编译器在编译程序时可以识别的特殊目录名，如果验证不过会报错。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1663897774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528926,"discussion_content":"举个例子，假设我们有两个go module，两个module的结构如下：\n\n.\n├── module1\n│   ├── go.mod\n│   ├── internal\n│   │   └── pkga\n│   ├── pkg1\n│   └── pkg2\n└── module2\n    ├── go.mod\n    └── pkg1\n\nmodule1中的internal/pkga包可以被module1的pkg1和pkg2包所导入。\n\n但无法被module2的pkg1包所导入。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635235322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573246,"discussion_content":"老师，这internal包无法被module2导入，是取决于包内的类型可导出还是因为internal文件夹就可以避免导出呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1653294216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528926,"ip_address":"","group_id":0},"score":573246,"extra":""},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577649,"discussion_content":"同问，这个地方有啥标记没有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656261502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573246,"ip_address":"","group_id":0},"score":577649,"extra":""},{"author":{"id":1042385,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/d1/abb7bfe3.jpg","nickname":"木木夕","note":"","ucode":"75BDB2ED7B9A4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579863,"discussion_content":"这个找到答案了不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657726417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573246,"ip_address":"","group_id":0},"score":579863,"extra":""}]}]},{"had_liked":false,"id":317687,"user_name":"Geek_c1467d","can_delete":false,"product_type":"c1","uid":2586041,"ip_address":"","ucode":"54189B95CB5D86","user_header":"","comment_is_top":false,"comment_ctime":1634890280,"is_pvip":false,"replies":[{"id":115418,"content":"这个已经被Go官方否了，https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout&#47;issues&#47;117#issuecomment-828503689。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234218,"ip_address":"","comment_id":317687,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"另外goalng标准布局可以参考下这个：https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout","like_count":29,"discussions":[{"author":{"id":1802350,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/6e/94987c2a.jpg","nickname":"XLQ","note":"","ucode":"7CEBC4DC1F34C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588607,"discussion_content":"内部包的规范约定：导出路径包含internal关键字的包，只允许internal的父级目录及父级目录的子包导入，其它包无法导入。\n\n老师举的例子中，internal的父级目录是module1，父级目录的子包有module1/pkg1、module1/pkg2，所以在这个例子中internal只能被这三个地方导入。\n\n上面的约定是由Go编译器验证的，internal/是Go编译器在编译程序时可以识别的特殊目录名，如果验证不过会报错。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1663897774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528926,"discussion_content":"举个例子，假设我们有两个go module，两个module的结构如下：\n\n.\n├── module1\n│   ├── go.mod\n│   ├── internal\n│   │   └── pkga\n│   ├── pkg1\n│   └── pkg2\n└── module2\n    ├── go.mod\n    └── pkg1\n\nmodule1中的internal/pkga包可以被module1的pkg1和pkg2包所导入。\n\n但无法被module2的pkg1包所导入。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635235322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573246,"discussion_content":"老师，这internal包无法被module2导入，是取决于包内的类型可导出还是因为internal文件夹就可以避免导出呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1653294216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528926,"ip_address":"","group_id":0},"score":573246,"extra":""},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577649,"discussion_content":"同问，这个地方有啥标记没有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656261502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573246,"ip_address":"","group_id":0},"score":577649,"extra":""},{"author":{"id":1042385,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/d1/abb7bfe3.jpg","nickname":"木木夕","note":"","ucode":"75BDB2ED7B9A4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1803283,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/13/9570f522.jpg","nickname":"非梧桐不止","note":"","ucode":"F70A5D19D86742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579863,"discussion_content":"这个找到答案了不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657726417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573246,"ip_address":"","group_id":0},"score":579863,"extra":""}]}]},{"had_liked":false,"id":317854,"user_name":"Linuaa","can_delete":false,"product_type":"c1","uid":2573678,"ip_address":"","ucode":"99048EE28E5C21","user_header":"https://static001.geekbang.org/account/avatar/00/27/45/6e/fe395ded.jpg","comment_is_top":false,"comment_ctime":1634995920,"is_pvip":false,"replies":[{"id":115426,"content":"可重现构建，顾名思义，就是针对同一份go module的源码进行构建，不同人，在不同机器(同一架构，比如都是x86-64)，相同os上，在不同时间点都能得到相同的二进制文件。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635237408,"ip_address":"","comment_id":317854,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师可以讲讲 ”Reproducible Build“ 吗，看了一些文章感觉抓不到重点。谢谢老师~","like_count":18,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528930,"discussion_content":"这个已经被Go官方否了，https://github.com/golang-standards/project-layout/issues/117#issuecomment-828503689。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1635234218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128549,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/65/edf48816.jpg","nickname":"悟二空","note":"","ucode":"BF3B8BA6E49B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568845,"discussion_content":"go团队没有给出一个标准目录，意味着是没有标准的。但golang-standards/project-layout项目提供了尝试规范化的一种布局思路参考。所以仅仅是参考而已。对于没有go项目经验的人来说，是一个很好的学习材料。待自己或团队的go项目经验成熟以后，是可以根据自身情况做适当调整的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1651242611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414877,"discussion_content":"这个并不是官方的标准布局，但是也算是一个不错的项目布局。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636909055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1819176,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c2/28/32fdc447.jpg","nickname":"newchaos","note":"","ucode":"EBC1909694A0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652794,"discussion_content":"https://github.com/golang-standards/project-layout/issues/117#issuecomment-828503689     mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729647335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317678,"user_name":"郭纯","can_delete":false,"product_type":"c1","uid":1314521,"ip_address":"","ucode":"2613860B4642C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/d9/e61ce097.jpg","comment_is_top":false,"comment_ctime":1634888177,"is_pvip":false,"replies":[{"id":115416,"content":"Go语言技术负责人Russ Cox曾谈过这个问题，他认为一个项目的最小布局至少有一个go.mod，一个LICENSE（针对开源项目）。然后就像你说的，在项目根目录下放置go代码即可。对于tiny项目，一个main.go也是可以的。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635233774,"ip_address":"","comment_id":317678,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"对于最小的布局 我觉的只要这几个文件就好了 main.go.  go.mod  go.sum. 既然是小项目代码量不多所有代码在 main.go 文件就好。","like_count":17,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529007,"discussion_content":"可重现构建，顾名思义，就是针对同一份go module的源码进行构建，不同人，在不同机器(同一架构，比如都是x86-64)，相同os上，在不同时间点都能得到相同的二进制文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635237408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333060,"user_name":"光明","can_delete":false,"product_type":"c1","uid":1289275,"ip_address":"","ucode":"91182728077051","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/3b/53dab296.jpg","comment_is_top":false,"comment_ctime":1644040071,"is_pvip":false,"replies":[{"id":121739,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644120938,"ip_address":"","comment_id":333060,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这一节虽然没有搞懂太多，反复看了3遍，后发现这一章节，是现行很多 GO 语言书籍中缺少部分。非常感谢Tony 老师的这么细致有详细的讲解。细微之处见真功夫。","like_count":14,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528925,"discussion_content":"Go语言技术负责人Russ Cox曾谈过这个问题，他认为一个项目的最小布局至少有一个go.mod，一个LICENSE（针对开源项目）。然后就像你说的，在项目根目录下放置go代码即可。对于tiny项目，一个main.go也是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635233774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342936,"user_name":"alexgreenbar","can_delete":false,"product_type":"c1","uid":1003655,"ip_address":"","ucode":"87ED7233E2767C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/87/dde718fa.jpg","comment_is_top":false,"comment_ctime":1650541124,"is_pvip":false,"replies":[{"id":125297,"content":"我觉得你提到的是两件事：\n\n1. go项目标准布局的事儿\n\n到目前为止，Go官方并没有给出书面标准。文中内容也是基于Go项目自身以及Go社区的主流实践整理而得的。\n\nGo语言技术负责人Russ Cox曾谈过这个问题，但他仅给出对于go项目最小布局的观点，他认为一个项目的最小布局至少有一个go.mod，一个LIC\nENSE（针对开源项目）。其他都有程序员自行确定。不可否认，没有基本标准布局，这的确给规模稍大一些的项目的开发人员带来困惑。 \n\n2. 没有统一的集中的module&#47;包库\n\nGo没有，且也是故意这么设计的。你提到Go团队故意忽视了软件工业过去20年的积累，但从Go团队角度来看，这是他们的一种解决安全风险的方案。可以看看这篇文章：https:&#47;&#47;tonybai.com&#47;2022&#47;04&#47;02&#47;how-go-mitigates-supply-chain-attacks\n\n从今年来npm暴露出的一系列安全问题来看，集中库的确也存在各种各样的问题。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650604252,"ip_address":"","comment_id":342936,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这些难道不是一门语言一开始就应该解决的问题吗？10多年过去了，go居然还在纠结这个，在这点上，感觉go的创建者们故意忽视了软件工业过去20年的积累，不比较语言本身，只考虑构建：java有maven，rust有cargo，并且它们都有集中可访问的repository用于分享，go到现在都没有这个机制，也是服了。","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566111,"discussion_content":"我觉得你提到的是两件事：\n\n1. go项目标准布局的事儿\n\n到目前为止，Go官方并没有给出书面标准。文中内容也是基于Go项目自身以及Go社区的主流实践整理而得的。\n\nGo语言技术负责人Russ Cox曾谈过这个问题，但他仅给出对于go项目最小布局的观点，他认为一个项目的最小布局至少有一个go.mod，一个LIC\nENSE（针对开源项目）。其他都有程序员自行确定。不可否认，没有基本标准布局，这的确给规模稍大一些的项目的开发人员带来困惑。 \n\n2. 没有统一的集中的module/包库\n\nGo没有，且也是故意这么设计的。你提到Go团队故意忽视了软件工业过去20年的积累，但从Go团队角度来看，这是他们的一种解决安全风险的方案。可以看看这篇文章：https://tonybai.com/2022/04/02/how-go-mitigates-supply-chain-attacks\n\n从今年来npm暴露出的一系列安全问题来看，集中库的确也存在各种各样的问题。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1650604252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317581,"user_name":"Long_hz","can_delete":false,"product_type":"c1","uid":1101646,"ip_address":"","ucode":"9EDF43829C8E47","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/4e/01479fc4.jpg","comment_is_top":false,"comment_ctime":1634865830,"is_pvip":false,"replies":[{"id":115397,"content":"loccount只是一个代码统计工具，你可以用其他类似的工具替代。如果非要编译loccount工具，并且它没有go.mod的话，可以下载loccount工具源码后，在你的本地为其创建一个go.mod，然后编译试试。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635217986,"ip_address":"","comment_id":317581,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师你好，请问一下loccount 工具编译的时候缺少go.mod需要怎么解决？","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528879,"discussion_content":"loccount只是一个代码统计工具，你可以用其他类似的工具替代。如果非要编译loccount工具，并且它没有go.mod的话，可以下载loccount工具源码后，在你的本地为其创建一个go.mod，然后编译试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635217986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1031828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","nickname":"plh","note":"","ucode":"D79F2B87AC3AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532344,"discussion_content":"按照提示，创建 mod，编译成功.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637582923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528879,"ip_address":"","group_id":0},"score":532344,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":317704,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1634895939,"is_pvip":false,"replies":[{"id":115431,"content":"感谢认真的思考和棒棒的问题，我也认真回答一下:)\n\n1. 是的，如果采用vendor模式，依赖包会缓存在vendor目录下。\n2. 在go module机制进入go之前，也就是gopath构建模式时代，我们谈到的所有依赖都是包与包的版本；但go module引入后，所有的版本信息都绑定在module上，所以你在go.mod中看到的require块中的依赖都是module与module的版本，不再是包。\n3. 06和07讲会提到。\n4. 06,07讲会有例子。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635238575,"ip_address":"","comment_id":317704,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bail 老师的这一讲关于Go项目的布局标准的讲解非常专业。极客时间孔令飞老师的专栏，对这一布局方式很很好的实践。\n\n有以下疑问，烦请老师抽空解答一下：\n\n1. “ 这些依赖包是缓存在 vendor 目录下的”。那我可以是否可以理解为，接是把这些包的源码文件下载到本地的vendor目录中呢？\n\n2. “库项目仅通过 go.mod 文件明确表述出该项目依赖的 module 或包以及版本要求就可以了。” 请问一下，go.mod文件中还能表述依赖的 module吗？ 我看go.mod文件中的内容一般不都是依赖的第三方包和版本吗？\n\n3. 使用vendor的优势是什么？对比使用 go module形式，只是访问第三方包的源码路径的不同吗？\n\n4. 老师，后面的项目代码会在这一讲的目录基础上来构建吗？这一讲没有实际的代码操作，如果没有实际的操作感受，很容易遗忘这些概念。","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528879,"discussion_content":"loccount只是一个代码统计工具，你可以用其他类似的工具替代。如果非要编译loccount工具，并且它没有go.mod的话，可以下载loccount工具源码后，在你的本地为其创建一个go.mod，然后编译试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635217986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1031828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","nickname":"plh","note":"","ucode":"D79F2B87AC3AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532344,"discussion_content":"按照提示，创建 mod，编译成功.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637582923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528879,"ip_address":"","group_id":0},"score":532344,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":317694,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1634892554,"is_pvip":true,"replies":[{"id":115417,"content":"是的。loccount就是它的作品。他还用go编写了将gcc代码从svn仓库无损(提交历史)地迁移到git的工具。可以看看他切换到go的感悟：https:&#47;&#47;gitlab.com&#47;esr&#47;reposurgeon&#47;blob&#47;master&#47;GoNotes.adoc","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234161,"ip_address":"","comment_id":317694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"诶，ESR也写go了？","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528938,"discussion_content":"感谢认真的思考和棒棒的问题，我也认真回答一下:)\n\n1. 是的，如果采用vendor模式，依赖包会缓存在vendor目录下。\n2. 在go module机制进入go之前，也就是gopath构建模式时代，我们谈到的所有依赖都是包与包的版本；但go module引入后，所有的版本信息都绑定在module上，所以你在go.mod中看到的require块中的依赖都是module与module的版本，不再是包。\n3. 06和07讲会提到。\n4. 06,07讲会有例子。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635238575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408456,"discussion_content":"感谢老师的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635250494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318495,"user_name":"向阳花开","can_delete":false,"product_type":"c1","uid":2163512,"ip_address":"","ucode":"7025BAC303BEBD","user_header":"https://static001.geekbang.org/account/avatar/00/21/03/38/f798eec1.jpg","comment_is_top":false,"comment_ctime":1635314193,"is_pvip":false,"replies":[{"id":115508,"content":"哈哈，昼夜努力中。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635370559,"ip_address":"","comment_id":318495,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师老师加把劲，一周七天不断更😄","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528934,"discussion_content":"是的。loccount就是它的作品。他还用go编写了将gcc代码从svn仓库无损(提交历史)地迁移到git的工具。可以看看他切换到go的感悟：https://gitlab.com/esr/reposurgeon/blob/master/GoNotes.adoc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317603,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1634868265,"is_pvip":false,"replies":[{"id":115400,"content":"make是unix&#47;linux&#47;mac上最常见的第三方构建管理辅助工具。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218109,"ip_address":"","comment_id":317603,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"内建函数 make 是第三方构建工具吗 ？","like_count":5},{"had_liked":false,"id":352491,"user_name":"陈星宇(2.11)","can_delete":false,"product_type":"c1","uid":1450562,"ip_address":"","ucode":"970E48260B7924","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/42/11674804.jpg","comment_is_top":false,"comment_ctime":1658728324,"is_pvip":false,"replies":[{"id":128221,"content":"这也是正常现象，再简单的编程语言对于没有开发基础的同学来说也是有不小门槛的:)。\n\n既然没有基础，那么别人看一遍，你就要看3-5遍。\n\n别人可能不亲手敲例子代码，你就必须要亲手敲例子代码。\n\n别人要问1个问题，你就要问出5个具体问题。\n\n同时，遇到不明白的开发概念（可能是语言无关）的时候，也要并行学习一些语言无关的开发相关基础知识。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658757776,"ip_address":"","comment_id":352491,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，没开发基础的听着有点吃力呢。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581404,"discussion_content":"这也是正常现象，再简单的编程语言对于没有开发基础的同学来说也是有不小门槛的:)。\n\n既然没有基础，那么别人看一遍，你就要看3-5遍。\n\n别人可能不亲手敲例子代码，你就必须要亲手敲例子代码。\n\n别人要问1个问题，你就要问出5个具体问题。\n\n同时，遇到不明白的开发概念（可能是语言无关）的时候，也要并行学习一些语言无关的开发相关基础知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658757777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333135,"user_name":"喜乐雅歌","can_delete":false,"product_type":"c1","uid":2830552,"ip_address":"","ucode":"227E5DADE9F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/2b/30/d8/81dfc7ba.jpg","comment_is_top":false,"comment_ctime":1644123571,"is_pvip":false,"replies":[{"id":121806,"content":"《The Go Programming Language》这本书每节后面的习题可以做做。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644291294,"ip_address":"","comment_id":333135,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好，我是一名初学者目前学了一些go语言基本的语法，有没有练习的习题可以练习，请老师帮助推荐一些练习的习题。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549910,"discussion_content":"《The Go Programming Language》这本书每节后面的习题可以做做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644291294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325975,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1639287071,"is_pvip":true,"replies":[{"id":119076,"content":"看一下 《Go语言第一课FAQ》吧 https:&#47;&#47;tonybai.com&#47;go-course-faq ，那里有我的解释。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050903,"ip_address":"","comment_id":325975,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，请教一下，“可再现重建”是什么意思？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540376,"discussion_content":"看一下 《Go语言第一课FAQ》吧 https://tonybai.com/go-course-faq ，那里有我的解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321798,"user_name":"Geek_5d8f2f","can_delete":false,"product_type":"c1","uid":1951924,"ip_address":"","ucode":"2836BC5634E64F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ornnGqSaTxRdbxhUHibeylvYngHvK64ebMaBso6vwXD9I3OEic75dZXxypvwfoCKeKutkpK2d7Xte8Gqh0UH4QA/132","comment_is_top":false,"comment_ctime":1637049248,"is_pvip":false,"replies":[{"id":117138,"content":"多看几遍，有问题就问。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637556104,"ip_address":"","comment_id":321798,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这节课看的云里雾里，哈哈哈。继续学习","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532206,"discussion_content":"多看几遍，有问题就问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637556104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544059,"discussion_content":"我怎么相反的感受啊。老师讲解得好清晰——拉了go的代码，跟着切换版本，看看目录布局，循环渐进，有种自己变得好牛的感觉。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641391318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531665,"discussion_content":"我真是从头懵到尾。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637377645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320131,"user_name":"天意","can_delete":false,"product_type":"c1","uid":2419081,"ip_address":"","ucode":"4E8BDE616DF2F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL04hRoaiarae3484B5UbHpVJN9Lkub4iahs6nCb8mVO46TXKlmicGVZ5bmSKjJwOY7n9Jlqic7jLXErw/132","comment_is_top":false,"comment_ctime":1636093128,"is_pvip":false,"replies":[{"id":116262,"content":"看了一下，感觉这个目录就是gopath下的目录，bin、src、pkg与gopath下的目录结构是一样的。\n\n另外目前看不出 像one,two这样的go module是否是在单独的git repo中管理。\n\n有了go module构建模式后，go项目不必放在gopath目录下面，但如果像上面例子中放在gopath目录下面也是ok的。\n\n05讲其实针对的是每个module下面的布局。对应的是例子里的one、two这样的module。例子中的one、two 两个module都是最简形式，和我们讲解的内容不冲突。\n\n","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636425154,"ip_address":"","comment_id":320131,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"project\n├── bin&#47;\n│   ├── bee\n│   └── one\n├── pkg&#47;\n│   ├── sumdb&#47;\n│   └── mod&#47;\n│       └── github.com&#47;\n│       └── cache&#47;\n├── src&#47;\n│   │── one&#47;\n│   │    └── main.go\n│   │    └── go.mod\n│   │\n│   └── two&#47;\n│        └── main.go\n│        └── go.mod\n\n\n这种算是什么结构，可取么","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529886,"discussion_content":"看了一下，感觉这个目录就是gopath下的目录，bin、src、pkg与gopath下的目录结构是一样的。\n\n另外目前看不出 像one,two这样的go module是否是在单独的git repo中管理。\n\n有了go module构建模式后，go项目不必放在gopath目录下面，但如果像上面例子中放在gopath目录下面也是ok的。\n\n05讲其实针对的是每个module下面的布局。对应的是例子里的one、two这样的module。例子中的one、two 两个module都是最简形式，和我们讲解的内容不冲突。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636425154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317588,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634866718,"is_pvip":false,"replies":[{"id":115398,"content":"历史悠久的优秀开源库，它的布局也在演化。不过有些也没变。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218065,"ip_address":"","comment_id":317588,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"对于刚用 Go 开发的时候，凑合能用就行，那个时候一心想着是功能开发，等到功能完成之后，目录结构优化过两三版。感谢老师详细的讲解，对于这种目录结构困惑，我觉得最快找答案的方式就是看优秀的开源库。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528884,"discussion_content":"历史悠久的优秀开源库，它的布局也在演化。不过有些也没变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635218065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348627,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1655262628,"is_pvip":false,"replies":[{"id":126972,"content":"好问题，观察的也很细心。\n\n不过，Go官方的建议从来都是“包的单元测试与包放在一起的”。\n\n你提到的go源码中的test目录，你可以打开那个目录下的README看一下其说明，就会理解了。下面是摘录：\n\nThe test directory contains tests of the Go tool chain and runtime.\nIt includes black box tests, regression tests, and error output tests.\nThey are run as part of all.bash.\n\nTo run just these tests, execute:\n\n    go run run.go\n\nStandard library tests should be written as regular Go tests in the appropriate package.\n\nThe tool chain and runtime also have regular Go tests in their packages.\n\n这里着重看：\nThe main reasons to add a new test to this directory are:\n\n* it is most naturally expressed using the test runner; or\n* it is also applicable to `gccgo` and other Go tool chains.\n~                                                             \n\n另外你提到的包内的test源文件的包可以是其他包名(xxx_test)，这是因为xx_test.go文件本就不会和当前目录内的包一并参与go build，xxx_test.go是go test的输入。\n\n","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1655272992,"ip_address":"","comment_id":348627,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"查了一下相关单元测试代码的布局，我看像 go 官方源码，kubernetes 源码等，都有独立的 test 目录，下面再放各种子目录。\n但 go 官方源码中也有很多单元测试代码直接跟源码放一起，比如 errors.go 和 errors_test.go 在一个目录下（且 package 还不同）。\n\n请教老师：\n1）单元测试的代码是直接跟源码放一起，还是单独放在一个 test 目录下面，我觉得应该放在 test 目录下聚合比较好，当然，如果就一两个文件，放在根目录下与 main.go 同级应该也没问题。\n2）但从另一个角度来分析，一般情况下一个目录下是不能有两个 package 的，但 go 官方显然为了单元测试开了小灶，说明很重视，所以跟源码放一起更好？\n\n想了解一下行业内的最佳实践是什么，谢谢您。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528884,"discussion_content":"历史悠久的优秀开源库，它的布局也在演化。不过有些也没变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635218065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346499,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1070670,"ip_address":"","ucode":"ED9970F7E66080","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4e/9291fac0.jpg","comment_is_top":false,"comment_ctime":1653201490,"is_pvip":false,"replies":[{"id":126403,"content":"过誉了😊","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653224381,"ip_address":"","comment_id":346499,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感觉太幸运能在初学go语言时，就遇到了大师级别的入门教程！之前学一门语言，很少有人谈编程语言的设计哲学、设计背景、演进中的有趣的故事，这些有血有肉的素材愈发让我感觉go语言的匠心独运。老师的文笔不但读起来通俗易懂、结构化严谨，而且细小甚微，这是一门语言的深入研究者综合多年实践经验、对读者体验感知极为敏感下的条件下才能做到的，很喜欢这种故事感的入门体验！赞赞赞！","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576082,"discussion_content":"好问题，观察的也很细心。\n\n不过，Go官方的建议从来都是“包的单元测试与包放在一起的”。\n\n你提到的go源码中的test目录，你可以打开那个目录下的README看一下其说明，就会理解了。下面是摘录：\n\nThe test directory contains tests of the Go tool chain and runtime.\nIt includes black box tests, regression tests, and error output tests.\nThey are run as part of all.bash.\n\nTo run just these tests, execute:\n\n    go run run.go\n\nStandard library tests should be written as regular Go tests in the appropriate package.\n\nThe tool chain and runtime also have regular Go tests in their packages.\n\n这里着重看：\nThe main reasons to add a new test to this directory are:\n\n* it is most naturally expressed using the test runner; or\n* it is also applicable to `gccgo` and other Go tool chains.\n~                                                             \n\n另外你提到的包内的test源文件的包可以是其他包名(xxx_test)，这是因为xx_test.go文件本就不会和当前目录内的包一并参与go build，xxx_test.go是go test的输入。\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655272992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576124,"discussion_content":"谢谢老师指点，下次我要留个心看一眼README","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655286267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364231,"user_name":"子杨","can_delete":false,"product_type":"c1","uid":1236803,"ip_address":"辽宁","ucode":"EA7555EEE6DECE","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/43/1aa8708a.jpg","comment_is_top":false,"comment_ctime":1670683929,"is_pvip":false,"replies":[{"id":132420,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670852119,"ip_address":"辽宁","comment_id":364231,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最小标准布局，可能是：\ngo.mod\nxxx.go","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573157,"discussion_content":"过誉了😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653224381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1627670,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d6/16/107f0d04.jpg","nickname":"山青","note":"","ucode":"904AE3C23D3B92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580173,"discussion_content":"看过不少教程 最后还是回来看这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657954108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317603,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1634868265,"is_pvip":false,"replies":[{"id":115400,"content":"make是unix&#47;linux&#47;mac上最常见的第三方构建管理辅助工具。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218109,"ip_address":"","comment_id":317603,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"内建函数 make 是第三方构建工具吗 ？","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528893,"discussion_content":"make是unix/linux/mac上最常见的第三方构建管理辅助工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635218109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673990,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/06/fb3be14a.jpg","nickname":"TableBear","note":"","ucode":"A2C0562EEA2725","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585442,"discussion_content":"这位兄弟估计把make关键字和构建工具make搞混了。老师说的第三方构建工具make，常用来构建C/C++。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661573106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/4f/ff04156a.jpg","nickname":"天天向上","note":"","ucode":"D0914D4FD82272","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583220,"discussion_content":"可以参考下 阮一峰老师一篇博客[Make 命令教程] (https://www.ruanyifeng.com/blog/2015/02/make.html)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659959367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352491,"user_name":"陈星宇(2.11)","can_delete":false,"product_type":"c1","uid":1450562,"ip_address":"","ucode":"970E48260B7924","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/42/11674804.jpg","comment_is_top":false,"comment_ctime":1658728324,"is_pvip":false,"replies":[{"id":128221,"content":"这也是正常现象，再简单的编程语言对于没有开发基础的同学来说也是有不小门槛的:)。\n\n既然没有基础，那么别人看一遍，你就要看3-5遍。\n\n别人可能不亲手敲例子代码，你就必须要亲手敲例子代码。\n\n别人要问1个问题，你就要问出5个具体问题。\n\n同时，遇到不明白的开发概念（可能是语言无关）的时候，也要并行学习一些语言无关的开发相关基础知识。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1658757776,"ip_address":"","comment_id":352491,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，没开发基础的听着有点吃力呢。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528893,"discussion_content":"make是unix/linux/mac上最常见的第三方构建管理辅助工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635218109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673990,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/06/fb3be14a.jpg","nickname":"TableBear","note":"","ucode":"A2C0562EEA2725","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585442,"discussion_content":"这位兄弟估计把make关键字和构建工具make搞混了。老师说的第三方构建工具make，常用来构建C/C++。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661573106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/4f/ff04156a.jpg","nickname":"天天向上","note":"","ucode":"D0914D4FD82272","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583220,"discussion_content":"可以参考下 阮一峰老师一篇博客[Make 命令教程] (https://www.ruanyifeng.com/blog/2015/02/make.html)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659959367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333135,"user_name":"喜乐雅歌","can_delete":false,"product_type":"c1","uid":2830552,"ip_address":"","ucode":"227E5DADE9F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/2b/30/d8/81dfc7ba.jpg","comment_is_top":false,"comment_ctime":1644123571,"is_pvip":false,"replies":[{"id":121806,"content":"《The Go Programming Language》这本书每节后面的习题可以做做。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644291294,"ip_address":"","comment_id":333135,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师您好，我是一名初学者目前学了一些go语言基本的语法，有没有练习的习题可以练习，请老师帮助推荐一些练习的习题。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581404,"discussion_content":"这也是正常现象，再简单的编程语言对于没有开发基础的同学来说也是有不小门槛的:)。\n\n既然没有基础，那么别人看一遍，你就要看3-5遍。\n\n别人可能不亲手敲例子代码，你就必须要亲手敲例子代码。\n\n别人要问1个问题，你就要问出5个具体问题。\n\n同时，遇到不明白的开发概念（可能是语言无关）的时候，也要并行学习一些语言无关的开发相关基础知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658757777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325975,"user_name":"运维夜谈","can_delete":false,"product_type":"c1","uid":1054300,"ip_address":"","ucode":"E2E93375FF5A07","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/5c/d0476f9f.jpg","comment_is_top":false,"comment_ctime":1639287071,"is_pvip":true,"replies":[{"id":119076,"content":"看一下 《Go语言第一课FAQ》吧 https:&#47;&#47;tonybai.com&#47;go-course-faq ，那里有我的解释。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050903,"ip_address":"","comment_id":325975,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师，请教一下，“可再现重建”是什么意思？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549910,"discussion_content":"《The Go Programming Language》这本书每节后面的习题可以做做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644291294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321798,"user_name":"Geek_5d8f2f","can_delete":false,"product_type":"c1","uid":1951924,"ip_address":"","ucode":"2836BC5634E64F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ornnGqSaTxRdbxhUHibeylvYngHvK64ebMaBso6vwXD9I3OEic75dZXxypvwfoCKeKutkpK2d7Xte8Gqh0UH4QA/132","comment_is_top":false,"comment_ctime":1637049248,"is_pvip":false,"replies":[{"id":117138,"content":"多看几遍，有问题就问。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1637556104,"ip_address":"","comment_id":321798,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"这节课看的云里雾里，哈哈哈。继续学习","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540376,"discussion_content":"看一下 《Go语言第一课FAQ》吧 https://tonybai.com/go-course-faq ，那里有我的解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320131,"user_name":"天意","can_delete":false,"product_type":"c1","uid":2419081,"ip_address":"","ucode":"4E8BDE616DF2F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL04hRoaiarae3484B5UbHpVJN9Lkub4iahs6nCb8mVO46TXKlmicGVZ5bmSKjJwOY7n9Jlqic7jLXErw/132","comment_is_top":false,"comment_ctime":1636093128,"is_pvip":false,"replies":[{"id":116262,"content":"看了一下，感觉这个目录就是gopath下的目录，bin、src、pkg与gopath下的目录结构是一样的。\n\n另外目前看不出 像one,two这样的go module是否是在单独的git repo中管理。\n\n有了go module构建模式后，go项目不必放在gopath目录下面，但如果像上面例子中放在gopath目录下面也是ok的。\n\n05讲其实针对的是每个module下面的布局。对应的是例子里的one、two这样的module。例子中的one、two 两个module都是最简形式，和我们讲解的内容不冲突。\n\n","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636425154,"ip_address":"","comment_id":320131,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"project\n├── bin&#47;\n│   ├── bee\n│   └── one\n├── pkg&#47;\n│   ├── sumdb&#47;\n│   └── mod&#47;\n│       └── github.com&#47;\n│       └── cache&#47;\n├── src&#47;\n│   │── one&#47;\n│   │    └── main.go\n│   │    └── go.mod\n│   │\n│   └── two&#47;\n│        └── main.go\n│        └── go.mod\n\n\n这种算是什么结构，可取么","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532206,"discussion_content":"多看几遍，有问题就问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637556104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544059,"discussion_content":"我怎么相反的感受啊。老师讲解得好清晰——拉了go的代码，跟着切换版本，看看目录布局，循环渐进，有种自己变得好牛的感觉。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641391318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531665,"discussion_content":"我真是从头懵到尾。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637377645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317588,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634866718,"is_pvip":false,"replies":[{"id":115398,"content":"历史悠久的优秀开源库，它的布局也在演化。不过有些也没变。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218065,"ip_address":"","comment_id":317588,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"对于刚用 Go 开发的时候，凑合能用就行，那个时候一心想着是功能开发，等到功能完成之后，目录结构优化过两三版。感谢老师详细的讲解，对于这种目录结构困惑，我觉得最快找答案的方式就是看优秀的开源库。","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529886,"discussion_content":"看了一下，感觉这个目录就是gopath下的目录，bin、src、pkg与gopath下的目录结构是一样的。\n\n另外目前看不出 像one,two这样的go module是否是在单独的git repo中管理。\n\n有了go module构建模式后，go项目不必放在gopath目录下面，但如果像上面例子中放在gopath目录下面也是ok的。\n\n05讲其实针对的是每个module下面的布局。对应的是例子里的one、two这样的module。例子中的one、two 两个module都是最简形式，和我们讲解的内容不冲突。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636425154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348627,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1655262628,"is_pvip":false,"replies":[{"id":126972,"content":"好问题，观察的也很细心。\n\n不过，Go官方的建议从来都是“包的单元测试与包放在一起的”。\n\n你提到的go源码中的test目录，你可以打开那个目录下的README看一下其说明，就会理解了。下面是摘录：\n\nThe test directory contains tests of the Go tool chain and runtime.\nIt includes black box tests, regression tests, and error output tests.\nThey are run as part of all.bash.\n\nTo run just these tests, execute:\n\n    go run run.go\n\nStandard library tests should be written as regular Go tests in the appropriate package.\n\nThe tool chain and runtime also have regular Go tests in their packages.\n\n这里着重看：\nThe main reasons to add a new test to this directory are:\n\n* it is most naturally expressed using the test runner; or\n* it is also applicable to `gccgo` and other Go tool chains.\n~                                                             \n\n另外你提到的包内的test源文件的包可以是其他包名(xxx_test)，这是因为xx_test.go文件本就不会和当前目录内的包一并参与go build，xxx_test.go是go test的输入。\n\n","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1655272992,"ip_address":"","comment_id":348627,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"查了一下相关单元测试代码的布局，我看像 go 官方源码，kubernetes 源码等，都有独立的 test 目录，下面再放各种子目录。\n但 go 官方源码中也有很多单元测试代码直接跟源码放一起，比如 errors.go 和 errors_test.go 在一个目录下（且 package 还不同）。\n\n请教老师：\n1）单元测试的代码是直接跟源码放一起，还是单独放在一个 test 目录下面，我觉得应该放在 test 目录下聚合比较好，当然，如果就一两个文件，放在根目录下与 main.go 同级应该也没问题。\n2）但从另一个角度来分析，一般情况下一个目录下是不能有两个 package 的，但 go 官方显然为了单元测试开了小灶，说明很重视，所以跟源码放一起更好？\n\n想了解一下行业内的最佳实践是什么，谢谢您。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576082,"discussion_content":"好问题，观察的也很细心。\n\n不过，Go官方的建议从来都是“包的单元测试与包放在一起的”。\n\n你提到的go源码中的test目录，你可以打开那个目录下的README看一下其说明，就会理解了。下面是摘录：\n\nThe test directory contains tests of the Go tool chain and runtime.\nIt includes black box tests, regression tests, and error output tests.\nThey are run as part of all.bash.\n\nTo run just these tests, execute:\n\n    go run run.go\n\nStandard library tests should be written as regular Go tests in the appropriate package.\n\nThe tool chain and runtime also have regular Go tests in their packages.\n\n这里着重看：\nThe main reasons to add a new test to this directory are:\n\n* it is most naturally expressed using the test runner; or\n* it is also applicable to `gccgo` and other Go tool chains.\n~                                                             \n\n另外你提到的包内的test源文件的包可以是其他包名(xxx_test)，这是因为xx_test.go文件本就不会和当前目录内的包一并参与go build，xxx_test.go是go test的输入。\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655272992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576124,"discussion_content":"谢谢老师指点，下次我要留个心看一眼README","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655286267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346499,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1070670,"ip_address":"","ucode":"ED9970F7E66080","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4e/9291fac0.jpg","comment_is_top":false,"comment_ctime":1653201490,"is_pvip":false,"replies":[{"id":126403,"content":"过誉了😊","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653224381,"ip_address":"","comment_id":346499,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"感觉太幸运能在初学go语言时，就遇到了大师级别的入门教程！之前学一门语言，很少有人谈编程语言的设计哲学、设计背景、演进中的有趣的故事，这些有血有肉的素材愈发让我感觉go语言的匠心独运。老师的文笔不但读起来通俗易懂、结构化严谨，而且细小甚微，这是一门语言的深入研究者综合多年实践经验、对读者体验感知极为敏感下的条件下才能做到的，很喜欢这种故事感的入门体验！赞赞赞！","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573157,"discussion_content":"过誉了😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653224381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1627670,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d6/16/107f0d04.jpg","nickname":"山青","note":"","ucode":"904AE3C23D3B92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580173,"discussion_content":"看过不少教程 最后还是回来看这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657954108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364231,"user_name":"子杨","can_delete":false,"product_type":"c1","uid":1236803,"ip_address":"辽宁","ucode":"EA7555EEE6DECE","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/43/1aa8708a.jpg","comment_is_top":false,"comment_ctime":1670683929,"is_pvip":false,"replies":[{"id":132420,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1670852119,"ip_address":"辽宁","comment_id":364231,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"最小标准布局，可能是：\ngo.mod\nxxx.go","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596282,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670852119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2163449,"avatar":"https://static001.geekbang.org/account/avatar/00/21/02/f9/2a4197a0.jpg","nickname":"关春生","note":"","ucode":"14BAF08DC84B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624740,"discussion_content":"更小布局README.md","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690887886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357575,"user_name":"柒","can_delete":false,"product_type":"c1","uid":2419502,"ip_address":"北京","ucode":"D41241629321A1","user_header":"https://static001.geekbang.org/account/avatar/00/24/eb/2e/90fea784.jpg","comment_is_top":false,"comment_ctime":1663409937,"is_pvip":false,"replies":[{"id":130230,"content":"不用src了。你看这一讲后面提到的Go 可执行程序项目的典型结构布局和库布局都不用src了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663640105,"ip_address":"北京","comment_id":357575,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看完有个疑惑（也看了老师出版的书籍），老师这讲讲的是每个module下面的布局。 \n那对于一个项目，还需要src目录吗？比如说：以二进制可执行文件为目的的项目结构，只构建库为目的项目结构。\ngo项目自身有src，但是我看github上的项目好像没有了src目录，比如这个：https:&#47;&#47;github.com&#47;golang&#47;crypto","like_count":2},{"had_liked":false,"id":356492,"user_name":"rocking","can_delete":false,"product_type":"c1","uid":1885255,"ip_address":"北京","ucode":"D56118448BCAAB","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c4/47/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1662363960,"is_pvip":false,"replies":[{"id":129810,"content":"众口难调啊(手动允悲)，还有很多小伙伴说要先讲go module依赖管理，他们认为：这是go的难点，如果早搞明白，后面都不是问题，并且再复杂的go项目也能搞懂结构，便于更深入的动手实践。\n\n其实吧，这个专栏也不用完全按顺序学，可以根据自己的情况，在适合的章节跳过，然后需要的时候再回来复习一下:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1662461930,"ip_address":"北京","comment_id":356492,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，对于我一个新手，一开始就讲包的依赖，是很懵的，是不是调一调顺序，是不是对于新手来说 先了解了解go的语法，函数，demo搞起来之后，再讲这些依赖的关系，我自己也是java开发，刚开始学习也没直接学依赖 都是循序渐进，谢谢！","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586726,"discussion_content":"众口难调啊(手动允悲)，还有很多小伙伴说要先讲go module依赖管理，他们认为：这是go的难点，如果早搞明白，后面都不是问题，并且再复杂的go项目也能搞懂结构，便于更深入的动手实践。\n\n其实吧，这个专栏也不用完全按顺序学，可以根据自己的情况，在适合的章节跳过，然后需要的时候再回来复习一下:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662461931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350905,"user_name":"helllocn","can_delete":false,"product_type":"c1","uid":1069514,"ip_address":"","ucode":"3B6E10F7F607FA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx9A2J1pCWjjqR4sfnVK0HDGEwqJwbwDPic7Kic1cl6L2DiaAfmBSaaLlVM80SgnIoAjjHbZVbCwJfA/132","comment_is_top":false,"comment_ctime":1657330771,"is_pvip":false,"replies":[{"id":127666,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657402525,"ip_address":"","comment_id":350905,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"写了一段时间go项目了，当时困惑我很久的就是这节课的内容，太棒了","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579370,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657402525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342998,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1588622,"ip_address":"","ucode":"BCA46436B13163","user_header":"https://static001.geekbang.org/account/avatar/00/18/3d/8e/e3b080a2.jpg","comment_is_top":false,"comment_ctime":1650588763,"is_pvip":false,"replies":[{"id":125293,"content":"像你提到的这种，算是领域方面的布局，比如针对web开发、微服务开发等。这中目前更是没有统一的“标准布局”了。即便有，估计争议也会很大。如果自己不知道该如何做，可以参考一下领域方面的头部开源项目的布局。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650601598,"ip_address":"","comment_id":342998,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"有没有更复杂一点的布局结构？比如Java里面常见的分层包dao、service、util之类的，对应go里面有什么讲究吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566096,"discussion_content":"像你提到的这种，算是领域方面的布局，比如针对web开发、微服务开发等。这中目前更是没有统一的“标准布局”了。即便有，估计争议也会很大。如果自己不知道该如何做，可以参考一下领域方面的头部开源项目的布局。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650601598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1588622,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/8e/e3b080a2.jpg","nickname":"Edward Lee","note":"","ucode":"BCA46436B13163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":566210,"discussion_content":"好的，感谢老师的回复。作为刚从Java转go的新手，老师的课程非常有帮助，新手入门强烈推荐~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650629936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566096,"ip_address":"","group_id":0},"score":566210,"extra":""}]}]},{"had_liked":false,"id":342108,"user_name":"before","can_delete":false,"product_type":"c1","uid":2551993,"ip_address":"","ucode":"97F5A21796C418","user_header":"https://static001.geekbang.org/account/avatar/00/26/f0/b9/2564e577.jpg","comment_is_top":false,"comment_ctime":1650016518,"is_pvip":false,"replies":[{"id":125046,"content":"Go社区惯例，减少目录层次。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650108745,"ip_address":"","comment_id":342108,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，&quot;不过，在这里还是建议你在创建新的 Go 项目时，优先采用前面的标准项目布局。&quot;这个新的标准布局把pkg下面的pkgN都平铺到外层目录，有其他好处吗，或者是基于其他设计规范做的这个事情嘞","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563900,"discussion_content":"Go社区惯例，减少目录层次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650108746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334483,"user_name":"莫林","can_delete":false,"product_type":"c1","uid":1086720,"ip_address":"","ucode":"9F733B4622E7E8","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/00/a7001873.jpg","comment_is_top":false,"comment_ctime":1644975316,"is_pvip":false,"replies":[{"id":122587,"content":"通常我们只会给出第一级目录的结构，这样才有广泛意义。因为go应用的领域很多，不同领域都会有自己的“领域特定”目录组织结构，比如你提到的一些web框架生成的目录结构。我个人建议将这些“领域特定”的目录保留，但最好整合到我们给出的布局结构中，可以作为二级目录，比如：\n\nweb&#47;\n   - model\n   - controller\n   - view\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645596949,"ip_address":"","comment_id":334483,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，这里只讲了第一层目录，对于一个生产项目的internal目录下的目录结构是怎么组织的呢？对于数据库操作的是不是internal下还有mvc的分层呢？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552789,"discussion_content":"通常我们只会给出第一级目录的结构，这样才有广泛意义。因为go应用的领域很多，不同领域都会有自己的“领域特定”目录组织结构，比如你提到的一些web框架生成的目录结构。我个人建议将这些“领域特定”的目录保留，但最好整合到我们给出的布局结构中，可以作为二级目录，比如：\n\nweb/\n   - model\n   - controller\n   - view\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645596949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333938,"user_name":"Geek_7254f2","can_delete":false,"product_type":"c1","uid":2275448,"ip_address":"","ucode":"D5770398168983","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4iaBTGZFCibGEWH3YavQO3e1FB9wnODiaYzexxGqTWRMiay6THfZNVSLDaIOz5RClHefVIYibZxm8G2Q/132","comment_is_top":false,"comment_ctime":1644617550,"is_pvip":false,"replies":[{"id":121986,"content":"因为这个项目下有两个go程序啊，分别是cmd&#47;app1和cmd&#47;app2啊:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644642692,"ip_address":"","comment_id":333938,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"上一节说 整个 Go 程序中仅允许存在一个名为 main 的包\n为啥还这一节还能有两个main.go?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550623,"discussion_content":"因为这个项目下有两个go程序啊，分别是cmd/app1和cmd/app2啊:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644642692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321497,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1322811,"ip_address":"","ucode":"02C3847652D3CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHfQPjwdyOLYsbF6T2rUSILRc3VsNmMcNJkEEd3TvbfcYProhE8jrKD7EozLTpJ94N7SnbBcTnOA/132","comment_is_top":false,"comment_ctime":1636904547,"is_pvip":true,"replies":[{"id":116796,"content":"按你这么一说，和java的包管理历史演进的确很像。不过我对java这块了解不多，好久不研究了。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966668,"ip_address":"","comment_id":321497,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师想问一下这个项目中说到的vendor目录，用于家在第三方依赖的包，是不是和Java最开始那样加一个lib包存放各种jar包，等后来使用maven（go.mod）以后就可以舍弃掉lib文件夹（相当于go项目中的vendor包）\n\n我认为的最小包应该说\n\nproject\n    ｜--src\n            |---internal\n            |---external\n            |---main.go\n   ｜\n   ｜---go.mod\n","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530305,"discussion_content":"按你这么一说，和java的包管理历史演进的确很像。不过我对java这块了解不多，好久不研究了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607065,"discussion_content":"肯定要借鉴其它语言的做法(站在前人的肩膀上)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677587823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354184,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ec/08/68cf2f1b.jpg","nickname":"116153","note":"","ucode":"FDB596BA11A24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559340,"discussion_content":"作为一名java开发者，跟maven比，同样这么认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648713054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317733,"user_name":"浅色幽默","can_delete":false,"product_type":"c1","uid":1104164,"ip_address":"","ucode":"AD413CCBF7109F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/24/b92b01d5.jpg","comment_is_top":false,"comment_ctime":1634907269,"is_pvip":false,"replies":[{"id":115307,"content":"一周三篇，欢迎继续学习。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635135238,"ip_address":"","comment_id":317733,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"我去 还没更新完呢 能快点吗 ","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528946,"discussion_content":"一周三篇，欢迎继续学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635135238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317595,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1634867193,"is_pvip":false,"replies":[{"id":115399,"content":"有问题的话，欢迎留言。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218081,"ip_address":"","comment_id":317595,"utype":1}],"discussion_count":4,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看完有点懵，练习一下再说","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528888,"discussion_content":"有问题的话，欢迎留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635218081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":531860,"discussion_content":"谢谢老师，是因为自身Go语言基础太差导致的，目前跟着官网学习基础，文章中的\n代码基本都能看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637424931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":528888,"ip_address":"","group_id":0},"score":531860,"extra":"{\"user_type\":1}"}]},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531666,"discussion_content":"已经是想跳过入门篇，直接学基础代码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637377767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":531859,"discussion_content":"我已经在官网学习基础代码了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637424780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":531666,"ip_address":"","group_id":0},"score":531859,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":357575,"user_name":"柒","can_delete":false,"product_type":"c1","uid":2419502,"ip_address":"北京","ucode":"D41241629321A1","user_header":"https://static001.geekbang.org/account/avatar/00/24/eb/2e/90fea784.jpg","comment_is_top":false,"comment_ctime":1663409937,"is_pvip":false,"replies":[{"id":130230,"content":"不用src了。你看这一讲后面提到的Go 可执行程序项目的典型结构布局和库布局都不用src了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1663640105,"ip_address":"北京","comment_id":357575,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看完有个疑惑（也看了老师出版的书籍），老师这讲讲的是每个module下面的布局。 \n那对于一个项目，还需要src目录吗？比如说：以二进制可执行文件为目的的项目结构，只构建库为目的项目结构。\ngo项目自身有src，但是我看github上的项目好像没有了src目录，比如这个：https:&#47;&#47;github.com&#47;golang&#47;crypto","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588265,"discussion_content":"不用src了。你看这一讲后面提到的Go 可执行程序项目的典型结构布局和库布局都不用src了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663640105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356492,"user_name":"rocking","can_delete":false,"product_type":"c1","uid":1885255,"ip_address":"北京","ucode":"D56118448BCAAB","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c4/47/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1662363960,"is_pvip":false,"replies":[{"id":129810,"content":"众口难调啊(手动允悲)，还有很多小伙伴说要先讲go module依赖管理，他们认为：这是go的难点，如果早搞明白，后面都不是问题，并且再复杂的go项目也能搞懂结构，便于更深入的动手实践。\n\n其实吧，这个专栏也不用完全按顺序学，可以根据自己的情况，在适合的章节跳过，然后需要的时候再回来复习一下:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1662461930,"ip_address":"北京","comment_id":356492,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，对于我一个新手，一开始就讲包的依赖，是很懵的，是不是调一调顺序，是不是对于新手来说 先了解了解go的语法，函数，demo搞起来之后，再讲这些依赖的关系，我自己也是java开发，刚开始学习也没直接学依赖 都是循序渐进，谢谢！","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588265,"discussion_content":"不用src了。你看这一讲后面提到的Go 可执行程序项目的典型结构布局和库布局都不用src了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663640105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350905,"user_name":"helllocn","can_delete":false,"product_type":"c1","uid":1069514,"ip_address":"","ucode":"3B6E10F7F607FA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx9A2J1pCWjjqR4sfnVK0HDGEwqJwbwDPic7Kic1cl6L2DiaAfmBSaaLlVM80SgnIoAjjHbZVbCwJfA/132","comment_is_top":false,"comment_ctime":1657330771,"is_pvip":false,"replies":[{"id":127666,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657402525,"ip_address":"","comment_id":350905,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"写了一段时间go项目了，当时困惑我很久的就是这节课的内容，太棒了","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586726,"discussion_content":"众口难调啊(手动允悲)，还有很多小伙伴说要先讲go module依赖管理，他们认为：这是go的难点，如果早搞明白，后面都不是问题，并且再复杂的go项目也能搞懂结构，便于更深入的动手实践。\n\n其实吧，这个专栏也不用完全按顺序学，可以根据自己的情况，在适合的章节跳过，然后需要的时候再回来复习一下:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662461931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342998,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1588622,"ip_address":"","ucode":"BCA46436B13163","user_header":"https://static001.geekbang.org/account/avatar/00/18/3d/8e/e3b080a2.jpg","comment_is_top":false,"comment_ctime":1650588763,"is_pvip":false,"replies":[{"id":125293,"content":"像你提到的这种，算是领域方面的布局，比如针对web开发、微服务开发等。这中目前更是没有统一的“标准布局”了。即便有，估计争议也会很大。如果自己不知道该如何做，可以参考一下领域方面的头部开源项目的布局。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650601598,"ip_address":"","comment_id":342998,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"有没有更复杂一点的布局结构？比如Java里面常见的分层包dao、service、util之类的，对应go里面有什么讲究吗？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579370,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657402525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342108,"user_name":"before","can_delete":false,"product_type":"c1","uid":2551993,"ip_address":"","ucode":"97F5A21796C418","user_header":"https://static001.geekbang.org/account/avatar/00/26/f0/b9/2564e577.jpg","comment_is_top":false,"comment_ctime":1650016518,"is_pvip":false,"replies":[{"id":125046,"content":"Go社区惯例，减少目录层次。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650108745,"ip_address":"","comment_id":342108,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，&quot;不过，在这里还是建议你在创建新的 Go 项目时，优先采用前面的标准项目布局。&quot;这个新的标准布局把pkg下面的pkgN都平铺到外层目录，有其他好处吗，或者是基于其他设计规范做的这个事情嘞","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566096,"discussion_content":"像你提到的这种，算是领域方面的布局，比如针对web开发、微服务开发等。这中目前更是没有统一的“标准布局”了。即便有，估计争议也会很大。如果自己不知道该如何做，可以参考一下领域方面的头部开源项目的布局。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650601598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1588622,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/8e/e3b080a2.jpg","nickname":"Edward Lee","note":"","ucode":"BCA46436B13163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":566210,"discussion_content":"好的，感谢老师的回复。作为刚从Java转go的新手，老师的课程非常有帮助，新手入门强烈推荐~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650629936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566096,"ip_address":"","group_id":0},"score":566210,"extra":""}]}]},{"had_liked":false,"id":334483,"user_name":"莫林","can_delete":false,"product_type":"c1","uid":1086720,"ip_address":"","ucode":"9F733B4622E7E8","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/00/a7001873.jpg","comment_is_top":false,"comment_ctime":1644975316,"is_pvip":false,"replies":[{"id":122587,"content":"通常我们只会给出第一级目录的结构，这样才有广泛意义。因为go应用的领域很多，不同领域都会有自己的“领域特定”目录组织结构，比如你提到的一些web框架生成的目录结构。我个人建议将这些“领域特定”的目录保留，但最好整合到我们给出的布局结构中，可以作为二级目录，比如：\n\nweb&#47;\n   - model\n   - controller\n   - view\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645596949,"ip_address":"","comment_id":334483,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师，这里只讲了第一层目录，对于一个生产项目的internal目录下的目录结构是怎么组织的呢？对于数据库操作的是不是internal下还有mvc的分层呢？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563900,"discussion_content":"Go社区惯例，减少目录层次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650108746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333938,"user_name":"Geek_7254f2","can_delete":false,"product_type":"c1","uid":2275448,"ip_address":"","ucode":"D5770398168983","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4iaBTGZFCibGEWH3YavQO3e1FB9wnODiaYzexxGqTWRMiay6THfZNVSLDaIOz5RClHefVIYibZxm8G2Q/132","comment_is_top":false,"comment_ctime":1644617550,"is_pvip":false,"replies":[{"id":121986,"content":"因为这个项目下有两个go程序啊，分别是cmd&#47;app1和cmd&#47;app2啊:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644642692,"ip_address":"","comment_id":333938,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"上一节说 整个 Go 程序中仅允许存在一个名为 main 的包\n为啥还这一节还能有两个main.go?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552789,"discussion_content":"通常我们只会给出第一级目录的结构，这样才有广泛意义。因为go应用的领域很多，不同领域都会有自己的“领域特定”目录组织结构，比如你提到的一些web框架生成的目录结构。我个人建议将这些“领域特定”的目录保留，但最好整合到我们给出的布局结构中，可以作为二级目录，比如：\n\nweb/\n   - model\n   - controller\n   - view\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645596949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321497,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1322811,"ip_address":"","ucode":"02C3847652D3CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHfQPjwdyOLYsbF6T2rUSILRc3VsNmMcNJkEEd3TvbfcYProhE8jrKD7EozLTpJ94N7SnbBcTnOA/132","comment_is_top":false,"comment_ctime":1636904547,"is_pvip":true,"replies":[{"id":116796,"content":"按你这么一说，和java的包管理历史演进的确很像。不过我对java这块了解不多，好久不研究了。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1636966668,"ip_address":"","comment_id":321497,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"老师想问一下这个项目中说到的vendor目录，用于家在第三方依赖的包，是不是和Java最开始那样加一个lib包存放各种jar包，等后来使用maven（go.mod）以后就可以舍弃掉lib文件夹（相当于go项目中的vendor包）\n\n我认为的最小包应该说\n\nproject\n    ｜--src\n            |---internal\n            |---external\n            |---main.go\n   ｜\n   ｜---go.mod\n","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550623,"discussion_content":"因为这个项目下有两个go程序啊，分别是cmd/app1和cmd/app2啊:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644642692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317733,"user_name":"浅色幽默","can_delete":false,"product_type":"c1","uid":1104164,"ip_address":"","ucode":"AD413CCBF7109F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/24/b92b01d5.jpg","comment_is_top":false,"comment_ctime":1634907269,"is_pvip":false,"replies":[{"id":115307,"content":"一周三篇，欢迎继续学习。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635135238,"ip_address":"","comment_id":317733,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"我去 还没更新完呢 能快点吗 ","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530305,"discussion_content":"按你这么一说，和java的包管理历史演进的确很像。不过我对java这块了解不多，好久不研究了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636966668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607065,"discussion_content":"肯定要借鉴其它语言的做法(站在前人的肩膀上)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677587823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354184,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ec/08/68cf2f1b.jpg","nickname":"116153","note":"","ucode":"FDB596BA11A24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559340,"discussion_content":"作为一名java开发者，跟maven比，同样这么认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648713054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317595,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1634867193,"is_pvip":false,"replies":[{"id":115399,"content":"有问题的话，欢迎留言。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635218081,"ip_address":"","comment_id":317595,"utype":1}],"discussion_count":4,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看完有点懵，练习一下再说","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528946,"discussion_content":"一周三篇，欢迎继续学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635135238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361751,"user_name":"大鼻子先生","can_delete":false,"product_type":"c1","uid":1394997,"ip_address":"北京","ucode":"4F9ED4A302B60C","user_header":"https://static001.geekbang.org/account/avatar/00/15/49/35/4fc7bc20.jpg","comment_is_top":false,"comment_ctime":1667826558,"is_pvip":false,"replies":[{"id":131656,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988394,"ip_address":"北京","comment_id":361751,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师太强了，真的很用心这门课","like_count":1},{"had_liked":false,"id":342648,"user_name":"pythonbug","can_delete":false,"product_type":"c1","uid":1487274,"ip_address":"","ucode":"1A70CA92FFF8EB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/wgMMrp1hvSB3E30KqZvMsj3KQdAI3T1uQM77LT7hZ65nVSjPGRg3AbUOyiahnssA6AIT5PAkyHFmlTBzUH9gdyQ/132","comment_is_top":false,"comment_ctime":1650382132,"is_pvip":false,"replies":[{"id":125194,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650418079,"ip_address":"","comment_id":342648,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"都是干货，谢谢大佬，对正在转入go，并且短时间内投入生产的学习者非常有帮助","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593179,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667988394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342143,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650034934,"is_pvip":false,"replies":[{"id":125043,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650108646,"ip_address":"","comment_id":342143,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"这节内容太实用了， 就应该像gofmt那样给项目结构的最佳实践。 ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563896,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650108646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335708,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1645655452,"is_pvip":false,"replies":[{"id":122716,"content":"1. 不用修改环境变量，go 1.11后，go module构建模式下，依赖会存放在特定位置，无需开发者关心。\n2. vendor就是把依赖的代码clone一份，放在vendor中，这样构建时，go编译器会使用vendor中的依赖，而不是到网上去下载，也不会使用本地module cache中的依赖。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645716527,"ip_address":"","comment_id":335708,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，上节课我们做的那个简单例子中，按默认配置，所下载的依赖直接存到了 ~&#47;go 目录下。那么在构建 Go 项目之前我们是不是得改环境变量使得下载的第三方依赖存到恰当的目录下，比如这里的 pkgN&#47;，或者是 internal&#47;？\n\n另外还是不太理解 vendor&#47; 目录具体起到的作用，还麻烦老师举例解释，感谢 🙏","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563896,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650108646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335046,"user_name":"1⃣️","can_delete":false,"product_type":"c1","uid":1375706,"ip_address":"","ucode":"DDD1B98F90281C","user_header":"https://static001.geekbang.org/account/avatar/00/14/fd/da/7e0f0a02.jpg","comment_is_top":false,"comment_ctime":1645268538,"is_pvip":false,"replies":[{"id":122606,"content":"1. 如果github仓库被goproxy缓存过，理论上构建还是ok的，可以供goproxy下载对应版本的代码。但是如果goproxy定期删除缓存，当缓存被删除后，构建可能就会失败了。\n2. 可以看一下看后面有关go module部分的讲解以及go module加餐。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645604279,"ip_address":"","comment_id":335046,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师您好，发现go项目的很多包直接引用自github，所以有以下问题：\n1. 如果项目没有用vendor缓存，github的仓库作者把项目删除或者修改了，我是否就没办法“可重现构建”了？\n2. 如果我想把我写的库文件放github给其他人使用，有没有相关学习资料？比如说，import github.com&#47;myproject&#47;xx时，是对应哪个分支？如果想引入特定版本和分支怎么做？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552818,"discussion_content":"1. 如果github仓库被goproxy缓存过，理论上构建还是ok的，可以供goproxy下载对应版本的代码。但是如果goproxy定期删除缓存，当缓存被删除后，构建可能就会失败了。\n2. 可以看一下看后面有关go module部分的讲解以及go module加餐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645604279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2713546,"avatar":"","nickname":"Geek_2c6fcd","note":"","ucode":"7A3AF7815351F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":574569,"discussion_content":"那还是有风险, 不知道后续有没关于公司内部自己搭建中央库的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654150690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552818,"ip_address":"","group_id":0},"score":574569,"extra":""}]}]},{"had_liked":false,"id":332639,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1643436210,"is_pvip":false,"replies":[{"id":121624,"content":"go是编译型语言，所以一个以构建可执行文件为目的的go项目必然要编译出一个可执行的二进制文件。在布局时，对于这类项目，我们会将其放在cmd&#47;xxx目录下。\n\n至于node.js，我了解甚少，没法对比。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544603,"ip_address":"","comment_id":332639,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"“cmd 目录：存放项目要编译构建的可执行文件所对应的 main 包的源码文件；”\n\n老师您好，平时都是做前端，不太理解这句话的意思。如果是在一个web后端项目中，那它的“编译构建的可执行文件”是代表什么呢？如果在nodejs的后端项目中，有没有什么可类比的地方呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552818,"discussion_content":"1. 如果github仓库被goproxy缓存过，理论上构建还是ok的，可以供goproxy下载对应版本的代码。但是如果goproxy定期删除缓存，当缓存被删除后，构建可能就会失败了。\n2. 可以看一下看后面有关go module部分的讲解以及go module加餐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645604279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2713546,"avatar":"","nickname":"Geek_2c6fcd","note":"","ucode":"7A3AF7815351F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":574569,"discussion_content":"那还是有风险, 不知道后续有没关于公司内部自己搭建中央库的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654150690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552818,"ip_address":"","group_id":0},"score":574569,"extra":""}]}]},{"had_liked":false,"id":325612,"user_name":"武好累","can_delete":false,"product_type":"c1","uid":2059031,"ip_address":"","ucode":"3DEEAD6A7927D7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/17/0c73f775.jpg","comment_is_top":false,"comment_ctime":1639042632,"is_pvip":false,"replies":[{"id":118608,"content":"放入internal的包从go机制上就无法被外部引用。其他非internal中的包、非main包，理论上都可以被外部引用到。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1639564254,"ip_address":"","comment_id":325612,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"internal 目录下的 go 包无法被项目外引用，pkgN 下的可以被项目外应用，这种是否能被项目外引用是认知上的还是有什么管控","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549087,"discussion_content":"go是编译型语言，所以一个以构建可执行文件为目的的go项目必然要编译出一个可执行的二进制文件。在布局时，对于这类项目，我们会将其放在cmd/xxx目录下。\n\n至于node.js，我了解甚少，没法对比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1070878,"avatar":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","nickname":"Paradise","note":"","ucode":"D92EACCBF6B3B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":550097,"discussion_content":"已明白，感谢老师解答！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644385558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549087,"ip_address":"","group_id":0},"score":550097,"extra":""}]}]},{"had_liked":false,"id":318870,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1635471801,"is_pvip":false,"replies":[{"id":115658,"content":"你的问题在06讲中有答案。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635597999,"ip_address":"","comment_id":318870,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师您好，对于vendor模式和modlue模式的包管理，我想问下module模式的包管理优势是什么呢?因为我看现在还有很多语言都在用vendor模式来管理依赖包，go官方采用module模式的管理是有什么原因吗?能否简要说明一下或者举个例子，谢谢！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538962,"discussion_content":"放入internal的包从go机制上就无法被外部引用。其他非internal中的包、非main包，理论上都可以被外部引用到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639564254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2186045,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/3d/634776c9.jpg","nickname":"蟋蟀大叔","note":"","ucode":"0FB40046EC3596","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553541,"discussion_content":"这个go 编译器保证的吗 ？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645958591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317707,"user_name":"郑童文","can_delete":false,"product_type":"c1","uid":1030733,"ip_address":"","ucode":"3D193715CB8549","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg","comment_is_top":false,"comment_ctime":1634896965,"is_pvip":false,"replies":[{"id":115420,"content":"这个问题是不是重复问过，我记得回复过:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234728,"ip_address":"","comment_id":317707,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"请问老师go env 里面的配置项究竟是存储在哪儿的？ 网上有说是生成go 命令（go语言的的编译工具）时，直接包含在其中了，也有说是在一个和用户相关的配置文件夹里面，还有的说是来自系统环境变量，那这三种来源的优先级是怎么样的？ 谢谢！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528939,"discussion_content":"这个问题是不是重复问过，我记得回复过:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390290,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715006513,"is_pvip":false,"replies":[{"id":142011,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715262504,"ip_address":"辽宁","comment_id":390290,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"思考题：Go项目结构的最小标准布局。\n1. 首先是共性的，包管理必要的go.mod和go.sum都需要在根目录下\n2. 区分作用域的internal目录是必要的，存放内部使用不公开的go包；其他公开的go包直接放到根目录下\n3. 如果是可执行项目，根目录下放置main.go","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644472,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715262504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361751,"user_name":"大鼻子先生","can_delete":false,"product_type":"c1","uid":1394997,"ip_address":"北京","ucode":"4F9ED4A302B60C","user_header":"https://static001.geekbang.org/account/avatar/00/15/49/35/4fc7bc20.jpg","comment_is_top":false,"comment_ctime":1667826558,"is_pvip":false,"replies":[{"id":131656,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667988394,"ip_address":"北京","comment_id":361751,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师太强了，真的很用心这门课","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593179,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667988394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342648,"user_name":"pythonbug","can_delete":false,"product_type":"c1","uid":1487274,"ip_address":"","ucode":"1A70CA92FFF8EB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/wgMMrp1hvSB3E30KqZvMsj3KQdAI3T1uQM77LT7hZ65nVSjPGRg3AbUOyiahnssA6AIT5PAkyHFmlTBzUH9gdyQ/132","comment_is_top":false,"comment_ctime":1650382132,"is_pvip":false,"replies":[{"id":125194,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650418079,"ip_address":"","comment_id":342648,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"都是干货，谢谢大佬，对正在转入go，并且短时间内投入生产的学习者非常有帮助","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565234,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650418079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342143,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650034934,"is_pvip":false,"replies":[{"id":125043,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1650108646,"ip_address":"","comment_id":342143,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"这节内容太实用了， 就应该像gofmt那样给项目结构的最佳实践。 ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565234,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650418079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335708,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1645655452,"is_pvip":false,"replies":[{"id":122716,"content":"1. 不用修改环境变量，go 1.11后，go module构建模式下，依赖会存放在特定位置，无需开发者关心。\n2. vendor就是把依赖的代码clone一份，放在vendor中，这样构建时，go编译器会使用vendor中的依赖，而不是到网上去下载，也不会使用本地module cache中的依赖。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645716527,"ip_address":"","comment_id":335708,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师，上节课我们做的那个简单例子中，按默认配置，所下载的依赖直接存到了 ~&#47;go 目录下。那么在构建 Go 项目之前我们是不是得改环境变量使得下载的第三方依赖存到恰当的目录下，比如这里的 pkgN&#47;，或者是 internal&#47;？\n\n另外还是不太理解 vendor&#47; 目录具体起到的作用，还麻烦老师举例解释，感谢 🙏","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553116,"discussion_content":"1. 不用修改环境变量，go 1.11后，go module构建模式下，依赖会存放在特定位置，无需开发者关心。\n2. vendor就是把依赖的代码clone一份，放在vendor中，这样构建时，go编译器会使用vendor中的依赖，而不是到网上去下载，也不会使用本地module cache中的依赖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645716527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335046,"user_name":"1⃣️","can_delete":false,"product_type":"c1","uid":1375706,"ip_address":"","ucode":"DDD1B98F90281C","user_header":"https://static001.geekbang.org/account/avatar/00/14/fd/da/7e0f0a02.jpg","comment_is_top":false,"comment_ctime":1645268538,"is_pvip":false,"replies":[{"id":122606,"content":"1. 如果github仓库被goproxy缓存过，理论上构建还是ok的，可以供goproxy下载对应版本的代码。但是如果goproxy定期删除缓存，当缓存被删除后，构建可能就会失败了。\n2. 可以看一下看后面有关go module部分的讲解以及go module加餐。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645604279,"ip_address":"","comment_id":335046,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师您好，发现go项目的很多包直接引用自github，所以有以下问题：\n1. 如果项目没有用vendor缓存，github的仓库作者把项目删除或者修改了，我是否就没办法“可重现构建”了？\n2. 如果我想把我写的库文件放github给其他人使用，有没有相关学习资料？比如说，import github.com&#47;myproject&#47;xx时，是对应哪个分支？如果想引入特定版本和分支怎么做？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553116,"discussion_content":"1. 不用修改环境变量，go 1.11后，go module构建模式下，依赖会存放在特定位置，无需开发者关心。\n2. vendor就是把依赖的代码clone一份，放在vendor中，这样构建时，go编译器会使用vendor中的依赖，而不是到网上去下载，也不会使用本地module cache中的依赖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645716527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332639,"user_name":"Paradise","can_delete":false,"product_type":"c1","uid":1070878,"ip_address":"","ucode":"D92EACCBF6B3B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","comment_is_top":false,"comment_ctime":1643436210,"is_pvip":false,"replies":[{"id":121624,"content":"go是编译型语言，所以一个以构建可执行文件为目的的go项目必然要编译出一个可执行的二进制文件。在布局时，对于这类项目，我们会将其放在cmd&#47;xxx目录下。\n\n至于node.js，我了解甚少，没法对比。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643544603,"ip_address":"","comment_id":332639,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"“cmd 目录：存放项目要编译构建的可执行文件所对应的 main 包的源码文件；”\n\n老师您好，平时都是做前端，不太理解这句话的意思。如果是在一个web后端项目中，那它的“编译构建的可执行文件”是代表什么呢？如果在nodejs的后端项目中，有没有什么可类比的地方呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549087,"discussion_content":"go是编译型语言，所以一个以构建可执行文件为目的的go项目必然要编译出一个可执行的二进制文件。在布局时，对于这类项目，我们会将其放在cmd/xxx目录下。\n\n至于node.js，我了解甚少，没法对比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643544603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1070878,"avatar":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","nickname":"Paradise","note":"","ucode":"D92EACCBF6B3B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":550097,"discussion_content":"已明白，感谢老师解答！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644385558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549087,"ip_address":"","group_id":0},"score":550097,"extra":""}]}]},{"had_liked":false,"id":325612,"user_name":"武好累","can_delete":false,"product_type":"c1","uid":2059031,"ip_address":"","ucode":"3DEEAD6A7927D7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/17/0c73f775.jpg","comment_is_top":false,"comment_ctime":1639042632,"is_pvip":false,"replies":[{"id":118608,"content":"放入internal的包从go机制上就无法被外部引用。其他非internal中的包、非main包，理论上都可以被外部引用到。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1639564254,"ip_address":"","comment_id":325612,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"internal 目录下的 go 包无法被项目外引用，pkgN 下的可以被项目外应用，这种是否能被项目外引用是认知上的还是有什么管控","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538962,"discussion_content":"放入internal的包从go机制上就无法被外部引用。其他非internal中的包、非main包，理论上都可以被外部引用到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639564254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2186045,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/3d/634776c9.jpg","nickname":"蟋蟀大叔","note":"","ucode":"0FB40046EC3596","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553541,"discussion_content":"这个go 编译器保证的吗 ？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645958591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318870,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1635471801,"is_pvip":false,"replies":[{"id":115658,"content":"你的问题在06讲中有答案。","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635597999,"ip_address":"","comment_id":318870,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"老师您好，对于vendor模式和modlue模式的包管理，我想问下module模式的包管理优势是什么呢?因为我看现在还有很多语言都在用vendor模式来管理依赖包，go官方采用module模式的管理是有什么原因吗?能否简要说明一下或者举个例子，谢谢！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529407,"discussion_content":"你的问题在06讲中有答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635597999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409920,"discussion_content":"06讲会有详细讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635550428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317707,"user_name":"郑童文","can_delete":false,"product_type":"c1","uid":1030733,"ip_address":"","ucode":"3D193715CB8549","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg","comment_is_top":false,"comment_ctime":1634896965,"is_pvip":false,"replies":[{"id":115420,"content":"这个问题是不是重复问过，我记得回复过:)","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635234728,"ip_address":"","comment_id":317707,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"请问老师go env 里面的配置项究竟是存储在哪儿的？ 网上有说是生成go 命令（go语言的的编译工具）时，直接包含在其中了，也有说是在一个和用户相关的配置文件夹里面，还有的说是来自系统环境变量，那这三种来源的优先级是怎么样的？ 谢谢！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529407,"discussion_content":"你的问题在06讲中有答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635597999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409920,"discussion_content":"06讲会有详细讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635550428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390290,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715006513,"is_pvip":false,"replies":[{"id":142011,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715262504,"ip_address":"辽宁","comment_id":390290,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"思考题：Go项目结构的最小标准布局。\n1. 首先是共性的，包管理必要的go.mod和go.sum都需要在根目录下\n2. 区分作用域的internal目录是必要的，存放内部使用不公开的go包；其他公开的go包直接放到根目录下\n3. 如果是可执行项目，根目录下放置main.go","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528939,"discussion_content":"这个问题是不是重复问过，我记得回复过:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635234728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383199,"user_name":"Geek_754270","can_delete":false,"product_type":"c1","uid":3735875,"ip_address":"重庆","ucode":"2297D9F5B14618","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qwqPnn095yDuc6uycMwCt7TIBibFXriaPS9BrMXic6tcNg1OlAiaR8YDeiaO5uDictZJFfnaL81rVflyeibTTR5qNibFCg/132","comment_is_top":false,"comment_ctime":1698655813,"is_pvip":false,"replies":[{"id":139589,"content":"go module模式下，go get后的module会被缓存在GOMODCACHE环境变量指示的路径下，默认这个路径为$GOPATH&#47;pkg&#47;mod下。如果你没有设置GOPATH变量，其默认值为$HOME&#47;go。也就是说GOMODCACHE默认值为$HOME&#47;go&#47;pkg&#47;mod。\n\n标准库是随你的go安装包一并安装的。在$GOROOT&#47;src下面。\n\nGo 1.21版本之后，Go标准库也会被缓存到$GOMODCACHE下面。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698677851,"ip_address":"辽宁","comment_id":383199,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师，我想问一下就是我们git pull 的包和标准库是存到那里的","like_count":0},{"had_liked":false,"id":381632,"user_name":"锎心😌😌😌","can_delete":false,"product_type":"c1","uid":2282579,"ip_address":"上海","ucode":"612E08AD756DBE","user_header":"https://static001.geekbang.org/account/avatar/00/22/d4/53/836cdaae.jpg","comment_is_top":false,"comment_ctime":1695560333,"is_pvip":false,"replies":[{"id":139052,"content":"Gopath构建模式已经过时，不要使用。\n\nGo module引入后，引用本地包可在go.mod中使用replace directive，\n\nGo 1.18引入了go.work，帮助建立本地工作空间。也可直接使用go.work机制实现引用本地包的开发。\n\n无论是go.mod中用replace还是使用go.work，你依赖的本地包自身也要支持go module，即有自己的go.mod。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1695736303,"ip_address":"辽宁","comment_id":381632,"utype":1}],"discussion_count":1,"race_medal":1,"score":6,"product_id":100093501,"comment_content":"老师，您好。如果引用本地包，是要放在%GOPATH%\\src下吗","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630584,"discussion_content":"go module模式下，go get后的module会被缓存在GOMODCACHE环境变量指示的路径下，默认这个路径为$GOPATH/pkg/mod下。如果你没有设置GOPATH变量，其默认值为$HOME/go。也就是说GOMODCACHE默认值为$HOME/go/pkg/mod。\n\n标准库是随你的go安装包一并安装的。在$GOROOT/src下面。\n\nGo 1.21版本之后，Go标准库也会被缓存到$GOMODCACHE下面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698677851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377630,"user_name":"lufofire","can_delete":false,"product_type":"c1","uid":3218954,"ip_address":"新加坡","ucode":"CA12C6E772C7BD","user_header":"https://static001.geekbang.org/account/avatar/00/31/1e/0a/159b2129.jpg","comment_is_top":false,"comment_ctime":1688895576,"is_pvip":false,"replies":[{"id":137618,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688941853,"ip_address":"辽宁","comment_id":377630,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"很精炼，实打实工程上需要的","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623005,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688941853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361102,"user_name":"李亮","can_delete":false,"product_type":"c1","uid":1079702,"ip_address":"北京","ucode":"E26284C3BF7DF1","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/96/fb0d8a65.jpg","comment_is_top":false,"comment_ctime":1667218693,"is_pvip":false,"replies":[{"id":131382,"content":"理论上一段时间内，各个goproxy server上会有缓存。是永久缓存还是定期清理，这个坎各个goproxy server的策略。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667377619,"ip_address":"北京","comment_id":361102,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"如果有人把自己的包删除了的话，就不能可重现构建了吧？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592388,"discussion_content":"理论上一段时间内，各个goproxy server上会有缓存。是永久缓存还是定期清理，这个坎各个goproxy server的策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667377619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358367,"user_name":"防腐基","can_delete":false,"product_type":"c1","uid":2696605,"ip_address":"北京","ucode":"0FF3BF30631995","user_header":"https://static001.geekbang.org/account/avatar/00/29/25/9d/d612cbf8.jpg","comment_is_top":false,"comment_ctime":1664248890,"is_pvip":false,"replies":[{"id":130415,"content":"node包管理是啥味？😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664266268,"ip_address":"北京","comment_id":358367,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"go module咋感觉有node包管理那股味儿呢","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588963,"discussion_content":"node包管理是啥味？😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664266269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337831,"user_name":"简爱","can_delete":false,"product_type":"c1","uid":2826204,"ip_address":"","ucode":"CEA61CBC8949DA","user_header":"https://static001.geekbang.org/account/avatar/00/2b/1f/dc/682fa185.jpg","comment_is_top":false,"comment_ctime":1647082522,"is_pvip":false,"replies":[{"id":123552,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647174875,"ip_address":"","comment_id":337831,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"我认为库项目最小的布局只需要包括两部分，go.mod和go.sum、internal，而可执行程序项目在此基础上还需要增加main包所在的目录。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588963,"discussion_content":"node包管理是啥味？😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664266269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318383,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1635262959,"is_pvip":false,"replies":[{"id":115625,"content":".cmd是什么文件？","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635569010,"ip_address":"","comment_id":318383,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师，请问下原来的布局cmd文件夹中是不是包含了.cmd的文件呢，这类文件要怎么执行的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556035,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647174875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317716,"user_name":"mazhen","can_delete":false,"product_type":"c1","uid":1002569,"ip_address":"","ucode":"3D1361126AD3CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/49/125f5adc.jpg","comment_is_top":false,"comment_ctime":1634901714,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"这节课的内容非常实用，介绍了最新的最佳实践，大部go语言的书籍都缺少这部分内容。","like_count":38},{"had_liked":false,"id":321505,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1636909076,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"个人觉得 https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout 并不是官方的标准布局，但是也算是一个不错的项目布局。","like_count":3},{"had_liked":false,"id":317811,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1634977020,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"知道创世布局，知所以然，才可以更好展开技术工作。","like_count":2},{"had_liked":false,"id":383199,"user_name":"Geek_754270","can_delete":false,"product_type":"c1","uid":3735875,"ip_address":"重庆","ucode":"2297D9F5B14618","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qwqPnn095yDuc6uycMwCt7TIBibFXriaPS9BrMXic6tcNg1OlAiaR8YDeiaO5uDictZJFfnaL81rVflyeibTTR5qNibFCg/132","comment_is_top":false,"comment_ctime":1698655813,"is_pvip":false,"replies":[{"id":139589,"content":"go module模式下，go get后的module会被缓存在GOMODCACHE环境变量指示的路径下，默认这个路径为$GOPATH&#47;pkg&#47;mod下。如果你没有设置GOPATH变量，其默认值为$HOME&#47;go。也就是说GOMODCACHE默认值为$HOME&#47;go&#47;pkg&#47;mod。\n\n标准库是随你的go安装包一并安装的。在$GOROOT&#47;src下面。\n\nGo 1.21版本之后，Go标准库也会被缓存到$GOMODCACHE下面。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698677851,"ip_address":"辽宁","comment_id":383199,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师，我想问一下就是我们git pull 的包和标准库是存到那里的","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630584,"discussion_content":"go module模式下，go get后的module会被缓存在GOMODCACHE环境变量指示的路径下，默认这个路径为$GOPATH/pkg/mod下。如果你没有设置GOPATH变量，其默认值为$HOME/go。也就是说GOMODCACHE默认值为$HOME/go/pkg/mod。\n\n标准库是随你的go安装包一并安装的。在$GOROOT/src下面。\n\nGo 1.21版本之后，Go标准库也会被缓存到$GOMODCACHE下面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698677851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381632,"user_name":"锎心😌😌😌","can_delete":false,"product_type":"c1","uid":2282579,"ip_address":"上海","ucode":"612E08AD756DBE","user_header":"https://static001.geekbang.org/account/avatar/00/22/d4/53/836cdaae.jpg","comment_is_top":false,"comment_ctime":1695560333,"is_pvip":false,"replies":[{"id":139052,"content":"Gopath构建模式已经过时，不要使用。\n\nGo module引入后，引用本地包可在go.mod中使用replace directive，\n\nGo 1.18引入了go.work，帮助建立本地工作空间。也可直接使用go.work机制实现引用本地包的开发。\n\n无论是go.mod中用replace还是使用go.work，你依赖的本地包自身也要支持go module，即有自己的go.mod。","user_name":"作者回复","user_name_real":"作者","uid":1026224,"ctime":1695736303,"ip_address":"辽宁","comment_id":381632,"utype":1}],"discussion_count":1,"race_medal":1,"score":6,"product_id":100093501,"comment_content":"老师，您好。如果引用本地包，是要放在%GOPATH%\\src下吗","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628722,"discussion_content":"Gopath构建模式已经过时，不要使用。\n\nGo module引入后，引用本地包可在go.mod中使用replace directive，\n\nGo 1.18引入了go.work，帮助建立本地工作空间。也可直接使用go.work机制实现引用本地包的开发。\n\n无论是go.mod中用replace还是使用go.work，你依赖的本地包自身也要支持go module，即有自己的go.mod。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695736303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377630,"user_name":"lufofire","can_delete":false,"product_type":"c1","uid":3218954,"ip_address":"新加坡","ucode":"CA12C6E772C7BD","user_header":"https://static001.geekbang.org/account/avatar/00/31/1e/0a/159b2129.jpg","comment_is_top":false,"comment_ctime":1688895576,"is_pvip":false,"replies":[{"id":137618,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688941853,"ip_address":"辽宁","comment_id":377630,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"很精炼，实打实工程上需要的","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628722,"discussion_content":"Gopath构建模式已经过时，不要使用。\n\nGo module引入后，引用本地包可在go.mod中使用replace directive，\n\nGo 1.18引入了go.work，帮助建立本地工作空间。也可直接使用go.work机制实现引用本地包的开发。\n\n无论是go.mod中用replace还是使用go.work，你依赖的本地包自身也要支持go module，即有自己的go.mod。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695736303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361102,"user_name":"李亮","can_delete":false,"product_type":"c1","uid":1079702,"ip_address":"北京","ucode":"E26284C3BF7DF1","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/96/fb0d8a65.jpg","comment_is_top":false,"comment_ctime":1667218693,"is_pvip":false,"replies":[{"id":131382,"content":"理论上一段时间内，各个goproxy server上会有缓存。是永久缓存还是定期清理，这个坎各个goproxy server的策略。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1667377619,"ip_address":"北京","comment_id":361102,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"如果有人把自己的包删除了的话，就不能可重现构建了吧？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623005,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688941853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358367,"user_name":"防腐基","can_delete":false,"product_type":"c1","uid":2696605,"ip_address":"北京","ucode":"0FF3BF30631995","user_header":"https://static001.geekbang.org/account/avatar/00/29/25/9d/d612cbf8.jpg","comment_is_top":false,"comment_ctime":1664248890,"is_pvip":false,"replies":[{"id":130415,"content":"node包管理是啥味？😁","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1664266268,"ip_address":"北京","comment_id":358367,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"go module咋感觉有node包管理那股味儿呢","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592388,"discussion_content":"理论上一段时间内，各个goproxy server上会有缓存。是永久缓存还是定期清理，这个坎各个goproxy server的策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667377619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337831,"user_name":"简爱","can_delete":false,"product_type":"c1","uid":2826204,"ip_address":"","ucode":"CEA61CBC8949DA","user_header":"https://static001.geekbang.org/account/avatar/00/2b/1f/dc/682fa185.jpg","comment_is_top":false,"comment_ctime":1647082522,"is_pvip":false,"replies":[{"id":123552,"content":"👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647174875,"ip_address":"","comment_id":337831,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"我认为库项目最小的布局只需要包括两部分，go.mod和go.sum、internal，而可执行程序项目在此基础上还需要增加main包所在的目录。","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556035,"discussion_content":"👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647174875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318383,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1635262959,"is_pvip":false,"replies":[{"id":115625,"content":".cmd是什么文件？","user_name":"作者回复","user_name_real":"Tony Bai","uid":1026224,"ctime":1635569010,"ip_address":"","comment_id":318383,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"老师，请问下原来的布局cmd文件夹中是不是包含了.cmd的文件呢，这类文件要怎么执行的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529215,"discussion_content":".cmd是什么文件？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635569010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409738,"discussion_content":"这个cmd 和执行的cmd文件不一样,这里的cmd 下面存放的是类似于功能组件的工具类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635499724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317716,"user_name":"mazhen","can_delete":false,"product_type":"c1","uid":1002569,"ip_address":"","ucode":"3D1361126AD3CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/49/125f5adc.jpg","comment_is_top":false,"comment_ctime":1634901714,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"这节课的内容非常实用，介绍了最新的最佳实践，大部go语言的书籍都缺少这部分内容。","like_count":38},{"had_liked":false,"id":321505,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1636909076,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"个人觉得 https:&#47;&#47;github.com&#47;golang-standards&#47;project-layout 并不是官方的标准布局，但是也算是一个不错的项目布局。","like_count":3},{"had_liked":false,"id":317811,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1634977020,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100093501,"comment_content":"知道创世布局，知所以然，才可以更好展开技术工作。","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529215,"discussion_content":".cmd是什么文件？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635569010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409738,"discussion_content":"这个cmd 和执行的cmd文件不一样,这里的cmd 下面存放的是类似于功能组件的工具类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635499724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325650,"user_name":"Andrew陈海越","can_delete":false,"product_type":"c1","uid":1042496,"ip_address":"","ucode":"E28708CC4C1CAA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/40/e69fcf1c.jpg","comment_is_top":false,"comment_ctime":1639060894,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100093501,"comment_content":"go语言的标准目录布局包括 cmd, Go Module，项目非main包，internal，vender","like_count":0},{"had_liked":false,"id":317605,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1634868375,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100093501,"comment_content":"这里原来是，Makefile","like_count":0},{"had_liked":false,"id":325650,"user_name":"Andrew陈海越","can_delete":false,"product_type":"c1","uid":1042496,"ip_address":"","ucode":"E28708CC4C1CAA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/40/e69fcf1c.jpg","comment_is_top":false,"comment_ctime":1639060894,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100093501,"comment_content":"go语言的标准目录布局包括 cmd, Go Module，项目非main包，internal，vender","like_count":0},{"had_liked":false,"id":317605,"user_name":"酥宝话不多","can_delete":false,"product_type":"c1","uid":2564698,"ip_address":"","ucode":"3B9BF256682504","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/5a/873ac981.jpg","comment_is_top":false,"comment_ctime":1634868375,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100093501,"comment_content":"这里原来是，Makefile","like_count":0}]}