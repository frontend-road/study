{"id":689012,"title":"16｜显微镜下的Stable Diffusion（二）：从图像变体到神雕侠侣（SDXL）","content":"<p>你好，我是南柯。</p><p>在上一讲，我们详细探讨了Stable Diffusion模型的核心技术，包括无分类器引导、UNet模块构成、负向描述词原理等。</p><p>事实上，随着AI绘画技术的不断发展，Stable Diffusion模型也在持续进化，比如2023年6月刚刚发布的SDXL模型。参考上一讲的叫法，为了方便，我们还是将Stable Diffusion简称为SD。</p><p>在SD模型家族中，有两个具有特殊能力的模型，也就是我们今天要探讨的SD图像变体（Stable Diffusion Reimagine）和“神雕侠侣”（SDXL）。SD图像变体模型用来对标DALL-E 2的图像变体功能，SDXL模型则用来和Midjourney这个最强画师掰掰手腕。</p><p>在我看来，生成图像变体和生成通用高美感图片，是当前多数开源垂类模型都做不好的事情。所以这一讲，我们把这SD中的两个特殊模型单独拿出来，用显微镜分析它们的能力和背后的算法原理。理解了这些之后，也会给我们向自己的SD模型引入新能力带来启发。</p><h2>SD图像变体</h2><p>你是否还记得，在关于DALL-E 2的解读中（可以回顾<a href=\"https://time.geekbang.org/column/article/686873\">第13讲</a>内容），我们提到了一种名为图像变体的图像生成策略。</p><p>我带你快速回忆一下这个策略的设计理念。用户输入一张图像，使用CLIP的图像编码器提取图像表征作为图像解码器的输入，这样就实现了生成图像变体的能力。图像变体能力在实际工作中能快速生成相似图像效果，激发我们的设计灵感。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/d7/ee/d7d6c16fede2bce9dfe124b13b8524ee.jpg?wh=4409x1919\" alt=\"\"></p><p>提到图像变体，你也许会联想到SD模型的图生图模式。但实际上，SD的图生图和我们今天要继续探讨的图像变体，在原理上和效果上是完全不同的。</p><p>在SD模型中，图生图能力通过重绘强度这个超参数向原始图像添加噪声，并根据prompt文本描述重新去噪得到新图像。这种方式生成的新图像在轮廓上会和原始图像非常接近，而内容和风格上则会更接近文本引导。</p><p>而图像变体，生成的图像与输入图像在色调、构图和人物形象方面具有相似性。你可以参考后面的图片，来看看图生图和图像变体的效果对比。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/02/01c40d468c5285a184bd5e9848aff102.jpg?wh=4409x2480\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/70/e3/7049434c0e87de7fbbb1e74d7ef6d0e3.jpg?wh=4409x2480\" alt=\"\"></p><p>分析了这么多，我来给你稍微归纳一下。图生图和图像变体，它们都是以图像为主进行变化。<strong>图生图本质是依赖于prompt来引导相似轮廓下的内容变化；图像变体则以输入图像为基础，生成具有相似内容但不同样式的图像，过程不需要描述语句的引导</strong>。</p><h3>SD图像变体的使用</h3><p>那么，这种有趣且神奇的图像变体能力，是否只有DALL-E 2才具备呢？</p><p>事实上并非如此。接下来，我们就来看看如何利用SD模型实现图像变体，即SD图像变体能力（<a href=\"https://stability.ai/blog/stable-diffusion-reimagine\">Stable Diffusion Reimagine</a>）。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/bf/812df6ffbec2030e324f47fd7c63c1bf.png?wh=1920x924\" alt=\"\" title=\"图片来源：https://huggingface.co/stabilityai/stable-diffusion-2-1-unclip\"></p><p>不需要复杂的prompt，SD图像变体功能从图像中提取需要使用的信息，帮助用户生成输入图片的多种变化。那么，相比标准SD模型（比如SD1.5等），SD图像变体模型究竟有何区别呢？</p><p>不妨拿出我们的显微镜来看一看。SD图像变体实际上是一个全新的SD模型，其官方名称为Stable unCLIP 2.1。没错，与DALL-E 2一样，它也属于unCLIP模型，也就是我们第10讲CLIP模型的扩展版。我们回顾下CLIP和unCLIP的算法原理。</p><p>CLIP通过4亿图文对数据进行对比学习，得到一个图像编码器和一个文本编码器。在使用CLIP时，成对的图像文本经过对应模态的编码器后，得到的特征会更接近。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/83/8eb3da98237df983fe6a70d1aed1c683.png?wh=1628x1070\" alt=\"\" title=\"图片来源：https://openai.com/research/clip\"></p><p>而DALL-E 2 利用CLIP图像编码器提取图像表征，得到的图像表征直接通过扩散模型解码器生成变体图像。这个过程被称为 unCLIP。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/ee/d7d6c16fede2bce9dfe124b13b8524ee.jpg?wh=4409x1919\" alt=\"\"></p><p>了解了这些，我们再来看SD图像变体的能力。SD图像变体模型是基于SD2.1模型微调而来的，能生成768x768分辨率的图像。在我编写这一讲的内容时，WebUI尚未集成SD图像变体模型。如果你想使用这个模型，可以使用官方平台<a href=\"https://clipdrop.co/stable-diffusion-reimagine\">Clipdrop</a>试试效果，或者按照<a href=\"https://huggingface.co/stabilityai/stable-diffusion-2-1-unclip\">Hugging Face</a>中提供的代码示例进行操作。</p><p>首先，我们看一下如何通过官方平台实现图像变体功能。打开<a href=\"https://clipdrop.co/stable-diffusion-reimagine\">Clipdrop</a>后，我们只需上传图像，耐心等待一会，便可以看到SD图像变体模型生成的新图像。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/50/92114f671cfb2a72a689363f8ed39b50.png?wh=2378x1424\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/15/5e/156151dd1246e3f4cd5e4a6c45791f5e.jpg?wh=4409x2480\" alt=\"\"></p><p>为了看图更直观，我们可以将变体图像下载到本地查看。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/11/42b4ed0ee094cdffd27c7ac3cecb4811.jpg?wh=4409x1768\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/44/97/44b0f92ec3578da561120fe46b1c8497.jpg?wh=4409x1791\" alt=\"\"></p><p>虽然在平台上使用图像变体功能非常方便，但如果想调整参数和批量生成图像变体，更推荐你用写代码的方式调用。</p><p>标准的SD图像变体用法，我们可以采用后面的方式来调用。你可以点开 <a href=\"https://colab.research.google.com/github/NightWalker888/ai_painting_journey/blob/main/lesson16/SD%E5%9B%BE%E5%83%8F%E5%8F%98%E4%BD%93.ipynb\">Colab</a> 一起进行操作。</p><pre><code class=\"language-python\">from diffusers import StableUnCLIPImg2ImgPipeline\nfrom diffusers.utils import load_image\nimport torch\n\npipe = StableUnCLIPImg2ImgPipeline.from_pretrained(\n    \"stabilityai/stable-diffusion-2-1-unclip\", torch_dtype=torch.float16, variation=\"fp16\")\npipe = pipe.to(\"cuda\")\n\n# 这里的url可以换成你想测试的图片url链接\nurl = \"https://ice.frostsky.com/2023/08/13/ec9539fef32052dac71f19c11d76ab6c.png\"\ninit_image = load_image(url)\n\nimages = pipe(init_image).images\nimages[0].save(\"variation_image.png\")\n</code></pre><p>我来给你解释下这段代码。首先，我们从官方仓库下载SD图像变体模型。然后，我们使用一张“在祈祷的猫咪图像”作为输入，调用SD图像变体模型完成图像生成。这里，你也可以使用自己的图像替换掉上面第10行代码中的图片链接。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/81/5c7267100aaf21349970aca0d16f7481.jpg?wh=4409x2480\" alt=\"\"></p><p>图中两只猫咪在“气质上”确实比较相似。你应该已经注意到，在上面的生成过程中，我们并没有使用prompt。也正因此，生成图像变体的过程并不是很可控，比如上面的猫咪没有呈现出祈祷的姿势。</p><p>为了更好地控制图像变体，我们也可以设置<strong>prompt语句</strong>。你可以参考后面的代码。</p><pre><code class=\"language-python\">from diffusers import StableUnCLIPImg2ImgPipeline\nfrom diffusers.utils import load_image\nimport torch\n\npipe = StableUnCLIPImg2ImgPipeline.from_pretrained(\n    \"stabilityai/stable-diffusion-2-1-unclip\", torch_dtype=torch.float16, variation=\"fp16\"\n)\npipe = pipe.to(\"cuda\")\n\nurl = \"https://ice.frostsky.com/2023/08/13/ec9539fef32052dac71f19c11d76ab6c.png\"\ninit_image = load_image(url)\n\nimages = pipe(init_image).images\nimages[0].save(\"variation_image.png\")\n\nprompt = \"A praying cat\"\n\nimages = pipe(init_image, prompt=prompt).images\nimages[0].save(\"variation_image_two.png\")\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/6b/34/6b2887e3f0092243c704cb1221490334.jpg?wh=4409x2480\" alt=\"\"></p><p>使用prompt引导图像变体生成的关键在于前面代码的第18行。在生成过程中，我们引入了新的参数prompt。</p><p>我们已经知道，DALL-E 2的图像变体功能是不能使用prompt的，那么问题来了，为什么SD图像变体却可以使用prompt呢？接下来，我就带你探索一下这背后的原因。</p><h3>技术细节探究</h3><p>带着我们前面的疑问，咱们从源代码入手来“破案”。</p><p>根据SD图像变体的源代码（<a href=\"https://github.com/huggingface/diffusers/blob/v0.18.0/src/diffusers/pipelines/stable_diffusion/pipeline_stable_unclip_img2img.py#L66\">StableUnCLIPImg2ImgPipeline</a> ），我们发现输入的图像首先会进入 _encode_image这个函数，这个函数负责将输入图像转为图像表征。</p><pre><code class=\"language-python\"># 4. Encoder input image\nnoise_level = torch.tensor([noise_level], device=device)\nimage_embeds = self._encode_image(\n&nbsp; &nbsp; image=image,\n&nbsp; &nbsp; device=device,\n&nbsp; &nbsp; batch_size=batch_size,\n&nbsp; &nbsp; num_images_per_prompt=num_images_per_prompt,\n&nbsp; &nbsp; do_classifier_free_guidance=do_classifier_free_guidance,\n&nbsp; &nbsp; noise_level=noise_level,\n&nbsp; &nbsp; generator=generator,\n&nbsp; &nbsp; image_embeds=image_embeds,)\n</code></pre><p>接下来，我们分析一下图像表征的注入方式。实际上，图像表征是在UNet模型每次预测噪声的过程中引入的。</p><p>我们已经知道，标准SD中UNet的输入包括文本表征、上一步去噪后的潜在表示以及时间步t的编码。而在SD图像变体方案里，除了刚提到的三项标准输入，代码中多了 “class_labels = image_embeds” 这一项（第6行），这正是它与其他SD模型不同之处。</p><p>你可以这样理解，<strong>SD图像变体模型的prompt作用机制和其他SD模型是相同的，而参考图像的信息是额外新增的</strong>。</p><pre><code class=\"language-python\"># predict the noise residual\nnoise_pred = self.unet(\n&nbsp; &nbsp; latent_model_input,\n&nbsp; &nbsp; t,\n&nbsp; &nbsp; encoder_hidden_states=prompt_embeds,\n&nbsp; &nbsp; class_labels=image_embeds, # 破案的关键，输入了图像的表征\n&nbsp; &nbsp; cross_attention_kwargs=cross_attention_kwargs,\n&nbsp; &nbsp; return_dict=False,\n)[0]\n</code></pre><p>为了更深入了解这个过程，我们可以进一步探究SD图像变体模型UNet <a href=\"https://github.com/huggingface/diffusers/blob/v0.18.0/src/diffusers/models/unet_2d_condition.py#L819\">预测噪声的代码</a>，这里我只截取了关于图像表征（image_embeds）使用方式的部分。在代码最后一行，SD图像变体模型将图像表征与时间步的编码做了相加处理。通过这种方式，参考图像便可以直接影响我们的生成结果。</p><pre><code class=\"language-python\">emb = self.time_embedding(t_emb, timestep_cond)\n\nif self.class_embedding is not None:\n&nbsp; &nbsp; if class_labels is None:\n&nbsp; &nbsp; &nbsp; &nbsp; raise ValueError(\"class_labels should be provided when num_class_embeds &gt; 0\")\n\n&nbsp; &nbsp; if self.config.class_embed_type == \"timestep\":\n&nbsp; &nbsp; &nbsp; &nbsp; class_labels = self.time_proj(class_labels)\n\n&nbsp; &nbsp; class_emb = self.class_embedding(class_labels).to(dtype=sample.dtype)\n&nbsp; &nbsp; emb = emb + class_emb\n</code></pre><p>至此，我们找到了关键所在。SD图像变体模型不仅可以输入参考图生成变体，同时还能使用prompt进行引导。这个过程与DALL-E 2的图像变体能力是截然不同的。</p><h2>“神雕侠侣”</h2><p>除了SD图像变体模型外，SD系列最近亮眼的更新莫过于“神雕侠侣”（SDXL）这个模型了。</p><p>我们已经知道，标准SD模型和SD图像变体模型，都是StabilityAI这家公司推出的开源AI绘画模型，在Hugging Face、Civitai这些论坛备受追捧。但遗憾的是，Midjourney在AI绘画生成效果上始终一骑绝尘。</p><p>可能是为了证明SD模型同样拥有无限的AI绘画潜力，StabilityAI决定大力出奇迹，开发一款能与Midjourney效果相匹配的模型。于是，SDXL便应运而生。</p><h3>初识SDXL</h3><p>2023年6月，<a href=\"https://stability.ai/blog/sdxl-09-stable-diffusion\">Stable Diffusion XL 0.9</a> 正式发布，我们先来看看它的AI绘画效果。当我写这一讲的时候，SDXL1.0版本也已经正式发布。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/34/1176ab45c870cc4d919657a883ab6034.png?wh=1704x1337\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><p>论文中也将SDXL和DeepFloyd IF、Midjourney v5.2、DALL-E 2等方案做了对比。这个比较很有意思，在相同prompt下测试了当下各个最强的AI绘画模型。你可以点开大图做一下对比，选择你心中的top1。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/db/3a5aaa47df3660efd78621e1901738db.png?wh=1272x1194\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><p>我们可以看出相比于其他版本的SD模型，比如SD1.5、SD2.1等，SDXL的提升也非常明显的。不仅生成的图像瑕疵更少，图片被裁切的情况也得到明显改善。你可以点开图片查看。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/24/ebc7dd99d8e2729c12e2dd8f0be74824.png?wh=1941x1049\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><p>看了这么多效果，你一定也很好奇，这是怎么做到的呢？我们这就来探索一下SDXL背后的技术细节！</p><h3>SDXL的整体方案</h3><p>SDXL采用级联模型的方式完成图像生成。所谓级联模型，就是将多个模型按照顺序串联，目的是完成更复杂的任务。</p><p>SDXL将Base模型和Refiner模型进行串联，整体方案你可以参考后面这张图。</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/12/c6d34057232c5b2eea9531e011862112.png?wh=1192x421\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><p>我们知道SD1.x系列模型的潜在表示是64x64维度，而SDXL为了生成更高清的图像，直接在128x128维度的潜在表示上进行去噪计算。Base模型的整体思路和SD模型一致，不过它更换了更强的CLIP、VAE模块，使用了更大的UNet模型。</p><p>Base模型去噪后的潜在表示，也使用了较低的加噪步数（比如200步）进行加噪，对Refiner进行训练。</p><p>Refiner模型的作用有点类似于我们的图生图功能。该怎么理解呢？</p><p>Base模型已经生成了我们要的图像，默认分辨率是1024x1024。然后我们给这张图像加上少许噪声，Refiner模型负责二次去除这些噪声。较低的加噪步数类似于我们知道的重绘强度，避免加噪到纯粹的噪声，那样的话就很难保持第一阶段图像的“绘画成果”了。总之，引入Refiner这个模型，可以进一步提升AI绘画的效果。</p><p>经过Refiner得到的潜在表示，经过VAE解码后，便可以直接得到1024x1024分辨率的图像。</p><h3>新的VAE、CLIP和UNet</h3><p>SDXL模型没有沿用SD1.x和SD2.x模型中使用的VAE模型，而是基于同样的模型架构，使用更大的训练batch_size来重新训练VAE。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/685121\">第11讲</a>也提到过，VAE决定了SD模型生成图像的上限，未经过单独调优的VAE并不擅长处理小脸和细节的重建。而SDXL单独训练的VAE模型，在各种图像生成评测任务上都有明显提升。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/ca/eff4643a96d0cc9eebce8e50c736a1ca.png?wh=1247x319\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><p>说完VAE，再来看CLIP。SD1.x系列使用的是CLIP ViT-L/14这个模型，该模型来自OpenAI，参数量是123M。而SD2.x系列将文本编码器升级为OpenCLIP 的ViT-H/14模型，参数量是354M。</p><p>SDXL更进一步，使用了两个文本编码器，分别是OpenCLIP的ViT-G/14模型（参数量694M）和OpenAI的ViT-L/14模型。在实际使用中，分别提取这两个文本编码器倒数第二层的特征，将1280维特征（Vit-G/14）和768维特征（ViT-L/14）进行拼接，得到2048维度的文本表征。</p><p>我们在Imagen那一讲已经提过，拥有更强的文本表征能力，就意味着AI绘画模型更能听懂我们的指令。</p><p>我们再来看看SDXL中的UNet模型结构。相比于上一讲标准SD模型的UNet，SDXL的CADB模块（CrossAttnDownBlock2D）只有两层，UNet最终的潜在表示维度也从8x8提升到了32x32。同时，在CADB内部，SDXL也使用了更多层的Transformer结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/e2/dd1882be83baa4901063c89220cafce2.png?wh=2033x1053\" alt=\"\"></p><p>了解完这些技术细节，相信你会对“大力出奇迹”背后的含义理解更深刻。值得一提的是，SDXL的UNet有2.6B参数量，相比于DeepFloyd IF模型的4.3B参数量，还是“小巫见大巫”。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/f3/0006ebef32ec20029b76897bf87e01f3.png?wh=1812x420\" alt=\"\" title=\"图片来源：https://arxiv.org/abs/2307.01952\"></p><h3>SDXL的使用</h3><p>最后我们上手体验一下，看看SDXL这个模型怎么用。最简单的方法依旧是使用官方平台 <a href=\"https://clipdrop.co/stable-diffusion\">clipdrop</a> 或者 <a href=\"https://beta.dreamstudio.ai/\">dreamstudio</a>。比如我们在中心区域输入我们想要生成的图像，“一只长着鹿角的彩虹色柯基犬”。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/f4/5d93745021598746886a1c8e64e937f4.png?wh=1137x537\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/b6/a9/b65yy1f2ab3ee76f8f69f2720652cfa9.png?wh=1090x1137\" alt=\"\"></p><p>我们还可以测试一下SDXL在图片中写文字的能力，比如我们要求其绘制这样一幅画：一个飞行在天空的热气球，挂着一个边缘镶嵌满鲜花的木板，木板上写着“Geekbang”。</p><p><img src=\"https://static001.geekbang.org/resource/image/70/59/70dacffd4ee9b412c5ae50bb90c41159.png?wh=1202x450\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/b9/d0/b900d0c52868ea891fc5f6d4707581d0.png?wh=1188x1153\" alt=\"\"></p><p>从图片结果看，并不理想。你还记得这个prompt下DeepFloyd模型的表现么？DeepFloyd模型是可以胜任这个任务的。从这个测试我们可以知道，SDXL的文本编码器还有一定的提升空间。</p><p>当然我们也可以通过写代码的方式使用SDXL模型批量生成图像。你可以点开 <a href=\"https://colab.research.google.com/github/NightWalker888/ai_painting_journey/blob/main/lesson16/SDXL%E4%BD%BF%E7%94%A8.ipynb\">Colab链接</a>，了解更多的代码细节。需要说明，使用SDXL的Refiner模型生成1024x1024分辨率的图片，需要较多GPU显存，Colab 15G的T4显卡不能胜任这个任务。推荐使用V100-32G这个性能的显卡来运行这个Colab。</p><p>可以看到，代码中我们加载了Base和Refiner两个扩散模型，AI绘画的过程也是使用这两个模型通过“接力”的方式生成的。</p><pre><code class=\"language-python\">from diffusers import StableDiffusionXLPipeline, StableDiffusionXLImg2ImgPipeline\nimport torch\n\n# 下载并加载SDXL1.0的Base模型，未来SDXL模型更新新版本，需要根据实际情况替换版本号\npipe = StableDiffusionXLPipeline.from_pretrained(\n&nbsp; &nbsp; \"stabilityai/stable-diffusion-xl-base-1.0\", torch_dtype=torch.float16, variant=\"fp16\", use_safetensors=True\n)\npipe.to(\"cuda\")\n\n# 下载并加载SDXL1.0的Refiner模型，未来SDXL模型更新新版本，需要根据实际情况替换版本号\nrefiner = StableDiffusionXLImg2ImgPipeline.from_pretrained(\n&nbsp; &nbsp; \"stabilityai/stable-diffusion-xl-refiner-1.0\", torch_dtype=torch.float16, use_safetensors=True, variant=\"fp16\"\n)\nrefiner.to(\"cuda\")\n\nprompt = \"ultra close-up color photo portrait of a lovely corgi\"\n\nuse_refiner = True\n# Base模型生成图像\nimage = pipe(prompt=prompt, output_type=\"latent\" if use_refiner else \"pil\").images[0]\n\n# Refiner模型生成图像\nimage = refiner(prompt=prompt, image=image[None, :]).images[0]\n</code></pre><p>我们对比下Base模型和Refiner模型生成的图像效果，可以发现，Base模型和Refiner模型生成的图像效果都不错，而Refiner在细节上更胜一筹。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/8a/44bba185b8b4db1e3e59bc5c8753058a.jpg?wh=4409x2689\" alt=\"\"></p><p>左边的图片是Base模型输出效果，详情你可以参考 <a href=\"https://colab.research.google.com/github/NightWalker888/ai_painting_journey/blob/main/lesson16/SDXL%E4%BD%BF%E7%94%A8.ipynb\">Colab代码</a>链接。右边的图片则是Refiner模型输出效果，是通过 <a href=\"https://clipdrop.co/stable-diffusion?output=true\">Clipdrop</a> 平台生成的。</p><p>事实上，6月底发布的SDXL0.9版本相当于测试版，StabilityAI这家公司根据用户体验反馈针对性补充了训练数据，同时还引入了RLHF技术（人类反馈强化学习），才完成SDXL1.0模型的优化。下面这张图对比了0.9和1.0版本的AI绘画效果，直观感受上差别不大。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/15/182aa8883c0efb302f7bd6d0c6001b15.png?wh=1920x1282\" alt=\"\" title=\"图片来源：https://www.reddit.com/media?url=https%3A%2F%2Fi.redd.it%2Fh74i8386gceb1.png\"></p><p>到这里，我们已经掌握了SDXL的算法原理和使用方法，现在你可以在 <a href=\"https://clipdrop.co/stable-diffusion\">clipdrop</a> 上使用SDXL创作更多有意思的AI绘画作品了。</p><h2>课程小结</h2><p>这一讲，我们学习了SD系列两个有意思的模型，分别是SD图像变体和SDXL模型。</p><p>SD图像变体和DALL-E 2有异曲同工之妙，都可以输入一张图像产生多张变体，从而帮我们完成相似图像的生成任务。不同之处在于，SD图像变体可以使用额外的prompt，引导模型生成图像变体，而这一点，DALL-E 2是无法做到的。我们详细探讨了这背后的原因。</p><p>SDXL是SD系列“大力出奇迹”的结果，目标是在AI绘画效果上挑战Midjourney。SDXL用了两个强大的CLIP文本编码器，重新训练了VAE模型，而且引入了更多参数的UNet结构。与此同时，SDXL还使用级联模型的方式进一步提升AI绘画效果。</p><p>今天学到的两个模型都可以通过官方平台 <a href=\"https://clipdrop.co/\">clipdrop</a> 进行体验。在这些新能力的加持下，也期待你能生成出更多有趣的作品。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/a0/f8ce7ddca6ef5407e9bcbb2c9b0ae4a0.jpg?wh=3900x1958\" alt=\"\"></p><h2>思考题</h2><p>SD图像变体与SDXL分别具有哪些优势和特点，可以应用于哪些场景中？</p><p>期待你在留言区和我交流互动，如果这一讲对你有启发，也推荐你发给身边更多朋友。</p><h2></h2>","neighbors":{"left":{"article_title":"15｜显微镜下的Stable Diffusion（一）：惊艳效果下的关键技术揭秘","id":688429},"right":{"article_title":"17｜巅峰画师Midjourney：一起来猜猜年入1亿美元背后的技术方案","id":689912}},"comments":[{"had_liked":false,"id":381839,"user_name":"Wiliam","can_delete":false,"product_type":"c1","uid":2316536,"ip_address":"福建","ucode":"FD880525762D4D","user_header":"https://static001.geekbang.org/account/avatar/00/23/58/f8/8b9bb574.jpg","comment_is_top":false,"comment_ctime":1695958910,"is_pvip":false,"replies":[{"id":139150,"content":"你好。Base模型可以看作是一个文生图的过程，而Refiner模型则是图生图的过程。Refiner模型相比于Base模型的生成效果有一定提升，但这里的评估其实比较主观，论文中也是通过user study来统计的。究其原因，Base模型在所有数据上训练，偶尔会生成低质量人类、粗糙背景等，所以引入Refiner模型，原论文中说的是使用high-quality, high resolution数据训练，因此Refiner模型的作用类似于使用图生图来修复细节。希望能帮助到你。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1696586815,"ip_address":"北京","comment_id":381839,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师，能从原理上解释一下为什么加入Refiner 模型之后，效果能更好呢？","like_count":2,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629051,"discussion_content":"你好。Base模型可以看作是一个文生图的过程，而Refiner模型则是图生图的过程。Refiner模型相比于Base模型的生成效果有一定提升，但这里的评估其实比较主观，论文中也是通过user study来统计的。究其原因，Base模型在所有数据上训练，偶尔会生成低质量人类、粗糙背景等，所以引入Refiner模型，原论文中说的是使用high-quality, high resolution数据训练，因此Refiner模型的作用类似于使用图生图来修复细节。希望能帮助到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696586816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380000,"user_name":"zhihai.tu","can_delete":false,"product_type":"c1","uid":1045888,"ip_address":"新加坡","ucode":"61371EA3EF6988","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/80/baddf03b.jpg","comment_is_top":false,"comment_ctime":1692801766,"is_pvip":true,"replies":[{"id":138503,"content":"你好。是的，看了下，当前最新的WebUI中已经可以使用SDXL和SD图像变体了。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1693380878,"ip_address":"北京","comment_id":380000,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"目前最新版本的webui中，这两个特殊模型是否已经集成进去了啊？","like_count":1,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626780,"discussion_content":"你好。是的，看了下，当前最新的WebUI中已经可以使用SDXL和SD图像变体了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693380878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380591,"user_name":"Geek_55d08a","can_delete":false,"product_type":"c1","uid":1146144,"ip_address":"广东","ucode":"EB72D8289992E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/20/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1693879216,"is_pvip":false,"replies":[{"id":138665,"content":"你好。这句话的意思是，SDXL没有直接用此前的VAE模型权重，而是复用相同架构，对VAE进行了模型重训（也就是我们VAE那一讲提到的重训VAE），以提升VAE重建的效果。感谢你的反馈。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1694268058,"ip_address":"北京","comment_id":380591,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"&quot;SDXL 模型没有沿用 SD1.x 和 SD2.x 模型中使用的 VAE 模型，而是基于同样的模型架构，&quot; 这句话是有笔误么？","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627555,"discussion_content":"你好。这句话的意思是，SDXL没有直接用此前的VAE模型权重，而是复用相同架构，对VAE进行了模型重训（也就是我们VAE那一讲提到的重训VAE），以提升VAE重建的效果。感谢你的反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694268058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380529,"user_name":"Seeyo","can_delete":false,"product_type":"c1","uid":1988016,"ip_address":"上海","ucode":"B1AA86509B0C02","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlicd6xoiaozzsTEH0l2s4epW4zXacqmwAlOrVApGCSIIdReaKwibqxhicqvlEK2vh56sCDvVhEFOlLQ/132","comment_is_top":false,"comment_ctime":1693787234,"is_pvip":false,"replies":[{"id":138670,"content":"你好。这里可能有一个误解，那就是在训练和测试阶段，我们都可以使用多个不同prompt进行文生图（也就是batch）。我们课程中用到的AI绘画模型都不是自回归模型（比如Parti就是自回归模型）。对于扩散模型而言，从纯噪声逐步去噪得到图像，UNet模型的输入包括上一步噪声图、prompt文本表征和时间步t的编码，噪声图初值不同、prompt文本表征不同，UNet预测的噪声自然不同。整个过程是可以按照batch的维度并行的。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1694269038,"ip_address":"北京","comment_id":380529,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师请问一下，关于batch处理的问题。\n\n测试阶段：\n\n1、我目前的理解是不能用batch进行不同text prompt对应图片的处理，是因scheduler的处理方式是自回归吗？\n\n2、当使用相同的promot时，因为webui支持批量生成，为什么此时可以使用batch的生成方式？虽然text产生的embedding相同，但每个推理时刻，产生的x_t-1是不一样的。\n\n训练阶段：\n\n要使用ddpm采样器，为什么能使用batch训练呢？\n\n\n以上是目前的个人理解，期待老师的回答指正","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627562,"discussion_content":"你好。这里可能有一个误解，那就是在训练和测试阶段，我们都可以使用多个不同prompt进行文生图（也就是batch）。我们课程中用到的AI绘画模型都不是自回归模型（比如Parti就是自回归模型）。对于扩散模型而言，从纯噪声逐步去噪得到图像，UNet模型的输入包括上一步噪声图、prompt文本表征和时间步t的编码，噪声图初值不同、prompt文本表征不同，UNet预测的噪声自然不同。整个过程是可以按照batch的维度并行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694269038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380045,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1692882830,"is_pvip":false,"replies":[{"id":138501,"content":"你好。第一个问题，深度学习模型推理主要用到的是线性代数（比如矩阵运算、LoRA秩因子分解）、微积分（比如反向传播）的知识，扩散模型的理论推导还需要用到一些概率论的相关知识。第二个问题，对于DALL-E 2和SD Reimagine的图像变体而言，本质上仍旧是扩散模型的AI绘画过程，由于随机噪声的存在，每次生成的结果是不同的。如果希望结果相同，需要固定中随机种子参数。希望能够帮助到你。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1693379583,"ip_address":"北京","comment_id":380045,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"请教老师两个问题：\nQ1:模型的数学推导主要用哪些方面的知识？微积分吗？\nQ2：图像变体每次运行的结果都是不同的吗？","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626777,"discussion_content":"你好。第一个问题，深度学习模型推理主要用到的是线性代数（比如矩阵运算、LoRA秩因子分解）、微积分（比如反向传播）的知识，扩散模型的理论推导还需要用到一些概率论的相关知识。第二个问题，对于DALL-E 2和SD Reimagine的图像变体而言，本质上仍旧是扩散模型的AI绘画过程，由于随机噪声的存在，每次生成的结果是不同的。如果希望结果相同，需要固定中随机种子参数。希望能够帮助到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693379583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379947,"user_name":"海杰","can_delete":false,"product_type":"c1","uid":1032694,"ip_address":"新加坡","ucode":"72FE97A820D3F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/f6/d6c1a0c2.jpg","comment_is_top":false,"comment_ctime":1692755047,"is_pvip":false,"replies":[{"id":138507,"content":"你好。围绕SDXL，我们更多地是探讨背后算法原理和基本使用，课程中我们使用ClipDrop和Colab来体验，ComfyUI不在我们的课程范围内。感谢你的反馈。","user_name":"作者回复","user_name_real":"编辑","uid":2288210,"ctime":1693381876,"ip_address":"北京","comment_id":379947,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师，既然提到SDXL, 会讲下ComfyUI 的使用吗？","like_count":0,"discussions":[{"author":{"id":2288210,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/52/c6f6ed5a.jpg","nickname":"南柯","note":"","ucode":"957ACF2DCCD2F7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626789,"discussion_content":"你好。围绕SDXL，我们更多地是探讨背后算法原理和基本使用，课程中我们使用ClipDrop和Colab来体验，ComfyUI不在我们的课程范围内。感谢你的反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693381876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387516,"user_name":"YX","can_delete":false,"product_type":"c1","uid":1338489,"ip_address":"云南","ucode":"973F52053DDF8C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/79/f098c11d.jpg","comment_is_top":false,"comment_ctime":1707716628,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"SDXL 更进一步，使用了两个文本编码器，分别是 OpenCLIP 的 ViT-G&#47;14 模型（参数量 694M）和 OpenAI 的 ViT-L&#47;14 模型。在实际使用中，分别提取这两个文本编码器倒数第二层的特征，将 1280 维特征（Vit-G&#47;14）和 768 维特征（ViT-L&#47;14）进行拼接，得到 2048 维度的文本表征。\n------\n老师请问下，这句话是不是意味着对于SDXL模型，clip skip可以不需要再设置了呢","like_count":0},{"had_liked":false,"id":383090,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":2559238,"ip_address":"上海","ucode":"8ACBA423B5A505","user_header":"https://static001.geekbang.org/account/avatar/00/27/0d/06/970cc957.jpg","comment_is_top":false,"comment_ctime":1698398243,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师，怎么实现将中文嵌入图片中呢？这些都是只支持英文的，对中文不友好。\n比如：生日卡片，有气球和生日蛋糕，卡片上写着“XX生日快乐”","like_count":0,"discussions":[{"author":{"id":1024195,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","nickname":"石云升","note":"","ucode":"78F1DD33EFD000","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640045,"discussion_content":"借用现有成熟的图片编辑吧，不太指望短期内AI能支持中文生成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711095008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381838,"user_name":"Wiliam","can_delete":false,"product_type":"c1","uid":2316536,"ip_address":"福建","ucode":"FD880525762D4D","user_header":"https://static001.geekbang.org/account/avatar/00/23/58/f8/8b9bb574.jpg","comment_is_top":false,"comment_ctime":1695958780,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100555001,"comment_content":"老师，能从原理上解释一下，为什么引入了Refiner 模型，效果能更好呢？","like_count":0}]}