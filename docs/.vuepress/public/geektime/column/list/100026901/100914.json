{"id":100914,"title":"17 | 强大的装饰器","content":"<p>你好，我是景霄。这节课，我们一起来学习装饰器。</p><p>装饰器一直以来都是Python中很有用、很经典的一个feature，在工程中的应用也十分广泛，比如日志、缓存等等的任务都会用到。然而，在平常工作生活中，我发现不少人，尤其是初学者，常常因为其相对复杂的表示，对装饰器望而生畏，认为它“too fancy to learn”，实际并不如此。</p><p>今天这节课，我会以前面所讲的函数、闭包为切入点，引出装饰器的概念、表达和基本用法，最后，再通过实际工程中的例子，让你再次加深理解。</p><p>接下来，让我们进入正文一起学习吧！</p><h2>函数-&gt;装饰器</h2><h3>函数核心回顾</h3><p>引入装饰器之前，我们首先一起来复习一下，必须掌握的函数的几个核心概念。</p><p>第一点，我们要知道，在Python中，函数是一等公民（first-class citizen），函数也是对象。我们可以把函数赋予变量，比如下面这段代码：</p><pre><code>def func(message):\n    print('Got a message: {}'.format(message))\n    \nsend_message = func\nsend_message('hello world')\n\n# 输出\nGot a message: hello world\n</code></pre><p>这个例子中，我们把函数func赋予了变量send_message，这样之后你调用send_message，就相当于是调用函数func()。</p><p>第二点，我们可以把函数当作参数，传入另一个函数中，比如下面这段代码：</p><pre><code>def get_message(message):\n    return 'Got a message: ' + message\n\n\ndef root_call(func, message):\n    print(func(message))\n    \nroot_call(get_message, 'hello world')\n\n# 输出\nGot a message: hello world\n</code></pre><p>这个例子中，我们就把函数get_message以参数的形式，传入了函数root_call()中然后调用它。</p><!-- [[[read_end]]] --><p>第三点，我们可以在函数里定义函数，也就是函数的嵌套。这里我同样举了一个例子：</p><pre><code>def func(message):\n    def get_message(message):\n        print('Got a message: {}'.format(message))\n    return get_message(message)\n\nfunc('hello world')\n\n# 输出\nGot a message: hello world\n</code></pre><p>这段代码中，我们在函数func()里又定义了新的函数get_message()，调用后作为func()的返回值返回。</p><p>第四点，要知道，函数的返回值也可以是函数对象（闭包），比如下面这个例子：</p><pre><code>def func_closure():\n    def get_message(message):\n        print('Got a message: {}'.format(message))\n    return get_message\n\nsend_message = func_closure()\nsend_message('hello world')\n\n# 输出\nGot a message: hello world\n</code></pre><p>这里，函数func_closure()的返回值是函数对象get_message本身，之后，我们将其赋予变量send_message，再调用send_message(‘hello world’)，最后输出了<code>'Got a message: hello world'</code>。</p><h3>简单的装饰器</h3><p>简单的复习之后，我们接下来学习今天的新知识——装饰器。按照习惯，我们可以先来看一个装饰器的简单例子：</p><pre><code>def my_decorator(func):\n    def wrapper():\n        print('wrapper of decorator')\n        func()\n    return wrapper\n\ndef greet():\n    print('hello world')\n\ngreet = my_decorator(greet)\ngreet()\n\n# 输出\nwrapper of decorator\nhello world\n</code></pre><p>这段代码中，变量greet指向了内部函数wrapper()，而内部函数wrapper()中又会调用原函数greet()，因此，最后调用greet()时，就会先打印<code>'wrapper of decorator'</code>，然后输出<code>'hello world'</code>。</p><p>这里的函数my_decorator()就是一个装饰器，它把真正需要执行的函数greet()包裹在其中，并且改变了它的行为，但是原函数greet()不变。</p><p>事实上，上述代码在Python中有更简单、更优雅的表示：</p><pre><code>def my_decorator(func):\n    def wrapper():\n        print('wrapper of decorator')\n        func()\n    return wrapper\n\n@my_decorator\ndef greet():\n    print('hello world')\n\ngreet()\n</code></pre><p>这里的<code>@</code>，我们称之为语法糖，<code>@my_decorator</code>就相当于前面的<code>greet=my_decorator(greet)</code>语句，只不过更加简洁。因此，如果你的程序中有其它函数需要做类似的装饰，你只需在它们的上方加上<code>@decorator</code>就可以了，这样就大大提高了函数的重复利用和程序的可读性。</p><h3>带有参数的装饰器</h3><p>你或许会想到，如果原函数greet()中，有参数需要传递给装饰器怎么办？</p><p>一个简单的办法，是可以在对应的装饰器函数wrapper()上，加上相应的参数，比如：</p><pre><code>def my_decorator(func):\n    def wrapper(message):\n        print('wrapper of decorator')\n        func(message)\n    return wrapper\n\n\n@my_decorator\ndef greet(message):\n    print(message)\n\n\ngreet('hello world')\n\n# 输出\nwrapper of decorator\nhello world\n</code></pre><p>不过，新的问题来了。如果我另外还有一个函数，也需要使用my_decorator()装饰器，但是这个新的函数有两个参数，又该怎么办呢？比如：</p><pre><code>@my_decorator\ndef celebrate(name, message):\n    ...\n</code></pre><p>事实上，通常情况下，我们会把<code>*args</code>和<code>**kwargs</code>，作为装饰器内部函数wrapper()的参数。<code>*args</code>和<code>**kwargs</code>，表示接受任意数量和类型的参数，因此装饰器就可以写成下面的形式：</p><pre><code>def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print('wrapper of decorator')\n        func(*args, **kwargs)\n    return wrapper\n</code></pre><h3>带有自定义参数的装饰器</h3><p>其实，装饰器还有更大程度的灵活性。刚刚说了，装饰器可以接受原函数任意类型和数量的参数，除此之外，它还可以接受自己定义的参数。</p><p>举个例子，比如我想要定义一个参数，来表示装饰器内部函数被执行的次数，那么就可以写成下面这种形式：</p><pre><code>def repeat(num):\n    def my_decorator(func):\n        def wrapper(*args, **kwargs):\n            for i in range(num):\n                print('wrapper of decorator')\n                func(*args, **kwargs)\n        return wrapper\n    return my_decorator\n\n\n@repeat(4)\ndef greet(message):\n    print(message)\n\ngreet('hello world')\n\n# 输出：\nwrapper of decorator\nhello world\nwrapper of decorator\nhello world\nwrapper of decorator\nhello world\nwrapper of decorator\nhello world\n</code></pre><h3>原函数还是原函数吗？</h3><p>现在，我们再来看个有趣的现象。还是之前的例子，我们试着打印出greet()函数的一些元信息：</p><pre><code>greet.__name__\n## 输出\n'wrapper'\n\nhelp(greet)\n# 输出\nHelp on function wrapper in module __main__:\n\nwrapper(*args, **kwargs)\n</code></pre><p>你会发现，greet()函数被装饰以后，它的元信息变了。元信息告诉我们“它不再是以前的那个greet()函数，而是被wrapper()函数取代了”。</p><p>为了解决这个问题，我们通常使用内置的装饰器<code>@functools.wrap</code>，它会帮助保留原函数的元信息（也就是将原函数的元信息，拷贝到对应的装饰器函数里）。</p><pre><code>import functools\n\ndef my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print('wrapper of decorator')\n        func(*args, **kwargs)\n    return wrapper\n    \n@my_decorator\ndef greet(message):\n    print(message)\n\ngreet.__name__\n\n# 输出\n'greet'\n</code></pre><h3>类装饰器</h3><p>前面我们主要讲了函数作为装饰器的用法，实际上，类也可以作为装饰器。类装饰器主要依赖于函数<code>__call__()</code>，每当你调用一个类的示例时，函数<code>__call__()</code>就会被执行一次。</p><p>我们来看下面这段代码：</p><pre><code>class Count:\n    def __init__(self, func):\n        self.func = func\n        self.num_calls = 0\n\n    def __call__(self, *args, **kwargs):\n        self.num_calls += 1\n        print('num of calls is: {}'.format(self.num_calls))\n        return self.func(*args, **kwargs)\n\n@Count\ndef example():\n    print(&quot;hello world&quot;)\n\nexample()\n\n# 输出\nnum of calls is: 1\nhello world\n\nexample()\n\n# 输出\nnum of calls is: 2\nhello world\n\n...\n</code></pre><p>这里，我们定义了类Count，初始化时传入原函数func()，而<code>__call__()</code>函数表示让变量num_calls自增1，然后打印，并且调用原函数。因此，在我们第一次调用函数example()时，num_calls的值是1，而在第二次调用时，它的值变成了2。</p><h3>装饰器的嵌套</h3><p>回顾刚刚讲的例子，基本都是一个装饰器的情况，但实际上，Python也支持多个装饰器，比如写成下面这样的形式：</p><pre><code>@decorator1\n@decorator2\n@decorator3\ndef func():\n    ...\n</code></pre><p>它的执行顺序从里到外，所以上面的语句也等效于下面这行代码：</p><pre><code>decorator1(decorator2(decorator3(func)))\n</code></pre><p>这样，<code>'hello world'</code>这个例子，就可以改写成下面这样：</p><pre><code>import functools\n\ndef my_decorator1(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print('execute decorator1')\n        func(*args, **kwargs)\n    return wrapper\n\n\ndef my_decorator2(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print('execute decorator2')\n        func(*args, **kwargs)\n    return wrapper\n\n\n@my_decorator1\n@my_decorator2\ndef greet(message):\n    print(message)\n\n\ngreet('hello world')\n\n# 输出\nexecute decorator1\nexecute decorator2\nhello world\n</code></pre><h2>装饰器用法实例</h2><p>到此，装饰器的基本概念及用法我就讲完了，接下来，我将结合实际工作中的几个例子，带你加深对它的理解。</p><h3>身份认证</h3><p>首先是最常见的身份认证的应用。这个很容易理解，举个最常见的例子，你登录微信，需要输入用户名密码，然后点击确认，这样，服务器端便会查询你的用户名是否存在、是否和密码匹配等等。如果认证通过，你就可以顺利登录；如果不通过，就抛出异常并提示你登录失败。</p><p>再比如一些网站，你不登录也可以浏览内容，但如果你想要发布文章或留言，在点击发布时，服务器端便会查询你是否登录。如果没有登录，就不允许这项操作等等。</p><p>我们来看一个大概的代码示例：</p><pre><code>import functools\n\ndef authenticate(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        request = args[0]\n        if check_user_logged_in(request): # 如果用户处于登录状态\n            return func(*args, **kwargs) # 执行函数post_comment() \n        else:\n            raise Exception('Authentication failed')\n    return wrapper\n    \n@authenticate\ndef post_comment(request, ...)\n    ...\n \n</code></pre><p>这段代码中，我们定义了装饰器authenticate；而函数post_comment()，则表示发表用户对某篇文章的评论。每次调用这个函数前，都会先检查用户是否处于登录状态，如果是登录状态，则允许这项操作；如果没有登录，则不允许。</p><h3>日志记录</h3><p>日志记录同样是很常见的一个案例。在实际工作中，如果你怀疑某些函数的耗时过长，导致整个系统的latency（延迟）增加，所以想在线上测试某些函数的执行时间，那么，装饰器就是一种很常用的手段。</p><p>我们通常用下面的方法来表示：</p><pre><code>import time\nimport functools\n\ndef log_execution_time(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start = time.perf_counter()\n        res = func(*args, **kwargs)\n        end = time.perf_counter()\n        print('{} took {} ms'.format(func.__name__, (end - start) * 1000))\n        return res\n    return wrapper\n    \n@log_execution_time\ndef calculate_similarity(items):\n    ...\n</code></pre><p>这里，装饰器log_execution_time记录某个函数的运行时间，并返回其执行结果。如果你想计算任何函数的执行时间，在这个函数上方加上<code>@log_execution_time</code>即可。</p><h3>输入合理性检查</h3><p>再来看今天要讲的第三个应用，输入合理性检查。</p><p>在大型公司的机器学习框架中，我们调用机器集群进行模型训练前，往往会用装饰器对其输入（往往是很长的JSON文件）进行合理性检查。这样就可以大大避免，输入不正确对机器造成的巨大开销。</p><p>它的写法往往是下面的格式：</p><pre><code>import functools\n\ndef validation_check(input):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs): \n        ... # 检查输入是否合法\n    \n@validation_check\ndef neural_network_training(param1, param2, ...):\n    ...\n</code></pre><p>其实在工作中，很多情况下都会出现输入不合理的现象。因为我们调用的训练模型往往很复杂，输入的文件有成千上万行，很多时候确实也很难发现。</p><p>试想一下，如果没有输入的合理性检查，很容易出现“模型训练了好几个小时后，系统却报错说输入的一个参数不对，成果付之一炬”的现象。这样的“惨案”，大大减缓了开发效率，也对机器资源造成了巨大浪费。</p><h3>缓存</h3><p>最后，我们来看缓存方面的应用。关于缓存装饰器的用法，其实十分常见，这里我以Python内置的LRU cache为例来说明（如果你不了解 <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Examples\">LRU cache</a>，可以点击链接自行查阅）。</p><p>LRU cache，在Python中的表示形式是<code>@lru_cache</code>。<code>@lru_cache</code>会缓存进程中的函数参数和结果，当缓存满了以后，会删除least recenly used 的数据。</p><p>正确使用缓存装饰器，往往能极大地提高程序运行效率。为什么呢？我举一个常见的例子来说明。</p><p>大型公司服务器端的代码中往往存在很多关于设备的检查，比如你使用的设备是安卓还是iPhone，版本号是多少。这其中的一个原因，就是一些新的feature，往往只在某些特定的手机系统或版本上才有（比如Android v200+）。</p><p>这样一来，我们通常使用缓存装饰器，来包裹这些检查函数，避免其被反复调用，进而提高程序运行效率，比如写成下面这样：</p><pre><code>@lru_cache\ndef check(param1, param2, ...) # 检查用户设备类型，版本号等等\n    ...\n</code></pre><h2>总结</h2><p>这节课，我们一起学习了装饰器的概念及用法。<strong>所谓的装饰器，其实就是通过装饰器函数，来修改原函数的一些功能，使得原函数不需要修改。</strong></p><blockquote>\n<p>Decorators is to modify the behavior of the function through a wrapper so we don’t have to actually modify the function.</p>\n</blockquote><p>而实际工作中，装饰器通常运用在身份认证、日志记录、输入合理性检查以及缓存等多个领域中。合理使用装饰器，往往能极大地提高程序的可读性以及运行效率。</p><h2>思考题</h2><p>那么，你平时工作中，通常会在哪些情况下使用装饰器呢？欢迎留言和我讨论，也欢迎你把这篇文章分享给你的同事、朋友，一起在交流中进步。</p>","neighbors":{"left":{"article_title":"16 | 值传递，引用传递or其他，Python里参数是如何传递的？","id":100532},"right":{"article_title":"18 | metaclass，是潘多拉魔盒还是阿拉丁神灯？","id":101288}},"comments":[{"had_liked":false,"id":104386,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1560741999,"is_pvip":false,"replies":[{"id":"37808","content":"是的，你的理解很正确<br>","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560751882,"ip_address":"","comment_id":104386,"utype":1}],"discussion_count":6,"race_medal":0,"score":"323683289199","product_id":100026901,"comment_content":"我感觉python的装饰器的应用场景有点像AOP的应用场景，把一些常用的业务逻辑分离，提高程序可重用性，降低耦合度，提高开发效率。","like_count":75,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454252,"discussion_content":"是的，你的理解很正确\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560751882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2050798,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4a/ee/fe035424.jpg","nickname":"棟","note":"","ucode":"D85800A3BA3CF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579308,"discussion_content":"您好，同学，降低耦合体现在哪些场景，能举个例子吗，我怎么觉得他增加耦合了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657336609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459939,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/23/e71f180b.jpg","nickname":"Geek_fc975d","note":"","ucode":"05B6507FE4349B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558091,"discussion_content":"想问老师，装饰器是不是有些像.net里面的委托","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648089823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254814,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/9e/69b65b6f.jpg","nickname":"一棵开花的树","note":"","ucode":"01688DC32E4F8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344083,"discussion_content":"切面编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611285597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310063,"discussion_content":"In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a &#34;pointcut&#34; specification, such as &#34;log all function calls when the function&#39;s name begins with &#39;set&#39;&#34;.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601600289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1946804,"avatar":"","nickname":"Geek_33a949","note":"","ucode":"4E9EC9E75CC27F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293952,"discussion_content":"拦截器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595738862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104364,"user_name":"Wing·三金","can_delete":false,"product_type":"c1","uid":1341402,"ip_address":"","ucode":"6B9F5822C3717F","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","comment_is_top":false,"comment_ctime":1560737886,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"233488971870","product_id":100026901,"comment_content":"老师能否补充下，用 @functools.wraps(func) 来保留原来的元信息，有哪些现实意义呢？","like_count":54,"discussions":[{"author":{"id":1528751,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","nickname":"lllong33","note":"","ucode":"5D012385994C3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192,"discussion_content":"多个函数被同一装饰，出错了，你就知道那个函数问题了","likes_number":50,"is_delete":false,"is_hidden":false,"ctime":1561268850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1528751,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","nickname":"lllong33","note":"","ucode":"5D012385994C3D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13479,"discussion_content":"醍醐灌顶，赞","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568678759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":192,"ip_address":""},"score":13479,"extra":""},{"author":{"id":1747284,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a9/54/975be8ae.jpg","nickname":"Geek_80123f","note":"","ucode":"A7A9FE13592FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1528751,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","nickname":"lllong33","note":"","ucode":"5D012385994C3D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274556,"discussion_content":"还是不够明白，有没有一个具体的例子呢。太抽象化。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590591447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":192,"ip_address":""},"score":274556,"extra":""},{"author":{"id":2033353,"avatar":"","nickname":"Geek_e8ed52","note":"","ucode":"15EF55EB1660BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1747284,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a9/54/975be8ae.jpg","nickname":"Geek_80123f","note":"","ucode":"A7A9FE13592FCA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284810,"discussion_content":"比如有两个函数A和B，分别加了装饰器C，并且装饰器C已加@functools.wraps(func)，那么函数A报错的时候，就能迅速定位哪个函数出错了，我的理解大概是酱紫","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1592646520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":274556,"ip_address":""},"score":284810,"extra":""}]},{"author":{"id":1581705,"avatar":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","nickname":"响雨","note":"","ucode":"C5FB3A3BC68F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390,"discussion_content":"根据端点名重定向的时候，不加@functools.wraps(func)，你会发现找不到原先那个函数了。因为它的元信息被修改了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1561529678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1408992,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7f/e0/4ba323bc.jpg","nickname":"🎈大力.","note":"","ucode":"762887D13A53D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3712,"discussion_content":"如果多个函数被两个装饰器装饰时就报错,在使用过程中,由于装饰器的加入导致解释器认为函数本身发生了改变,在某些情况下(比如测试时),可能会导致一些问题,所以使用@functools.wraps(func) 函数解决了这个问题,来保留函数的元信息","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1564729500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1268609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","nickname":"lcqbug","note":"","ucode":"08FA17F21BCEC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1408992,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7f/e0/4ba323bc.jpg","nickname":"🎈大力.","note":"","ucode":"762887D13A53D5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272900,"discussion_content":"多个函数被两个装饰器修饰时不会报错","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590373538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3712,"ip_address":""},"score":272900,"extra":""},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1408992,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7f/e0/4ba323bc.jpg","nickname":"🎈大力.","note":"","ucode":"762887D13A53D5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310067,"discussion_content":"那文中的装饰器的嵌套\n@decorator1\n@decorator2\n@decorator3\ndef func(): ...\n是不是也是类似的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601601498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3712,"ip_address":""},"score":310067,"extra":""}]}]},{"had_liked":false,"id":104402,"user_name":"三水","can_delete":false,"product_type":"c1","uid":1017781,"ip_address":"","ucode":"11837CF38FD9BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/b5/dd0353f4.jpg","comment_is_top":false,"comment_ctime":1560745085,"is_pvip":false,"replies":[{"id":"37807","content":"第一点：<br>直接赋值send_message = func()是错误的，因为func()必须接受一个参数，send_message = func(&#39;hello world&#39;)就正确了，他等同于send_message = func然后send_message(&#39;hello world&#39;)<br><br>第4点：func_closure()是一个闭包，返回的是函数对象。不能直接用send_message = func_closure，然后send_message(&#39;hello world&#39;)调用，必须是send_message = func_closure()，然后再send_message(&#39;hello world&#39;)，这样才能把参数&#39;hello world&#39;正确传给内部函数","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560751870,"ip_address":"","comment_id":104402,"utype":1}],"discussion_count":1,"race_medal":0,"score":"173359436925","product_id":100026901,"comment_content":"请教前辈们或老师一个初入门的问题：在本方前部&quot;函数回顾&quot;中，把函数赋给一个变量时，<br>第1点：send_message = func<br>第4点：send_message = func_closure()<br><br>我尝试如下会报错：<br>第1点：send_message = func()<br>第4点：send_message = func_closure<br><br>想知道这是哪一个知识点，谢谢","like_count":40,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454259,"discussion_content":"第一点：\n直接赋值send_message = func()是错误的，因为func()必须接受一个参数，send_message = func(&amp;#39;hello world&amp;#39;)就正确了，他等同于send_message = func然后send_message(&amp;#39;hello world&amp;#39;)\n\n第4点：func_closure()是一个闭包，返回的是函数对象。不能直接用send_message = func_closure，然后send_message(&amp;#39;hello world&amp;#39;)调用，必须是send_message = func_closure()，然后再send_message(&amp;#39;hello world&amp;#39;)，这样才能把参数&amp;#39;hello world&amp;#39;正确传给内部函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560751870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200370,"user_name":"Geek.S.","can_delete":false,"product_type":"c1","uid":1899087,"ip_address":"","ucode":"FC8A9FE3300B94","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","comment_is_top":false,"comment_ctime":1585577632,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"104664792736","product_id":100026901,"comment_content":"想当初, 学习Python装饰器时, 迷糊了好久, 才有点感觉, 还不是真的理解.<br><br>直到学习了这节课, 有种茅塞顿开的感觉, 于是非常想把自己的学习体会分享给同学们, 希望能帮到你们.<br>(希望放一放)<br><br>(长文警告)<br><br>学习装饰器, 分下面 4 部分:<br>一. 前言<br>二. 熟悉Python函数的特点<br>三. 什么是装饰器<br>四. 多实践<br><br>(超字数了, 5000+字, 应该可以在下方评论补充)","like_count":24,"discussions":[{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217715,"discussion_content":"三. 什么是装饰器\n\n装饰器是同时满足上面 4 个特点的函数.\n\n解释一下:\n1. 装饰器是一个函数\n2. 这个函数内部至少有一个嵌套函数\n3. 这个函数或其内部函数, 至少有一个参数是函数对象(可调用)\n4. 这个函数的返回值是函数对象(内部函数名)\n\n装饰器就是这么贪心, 全部特点它都有.\n\n既然装饰器是一个函数, 那么无非就是: 定义函数和使用函数.\n\n1. 定义函数\n```python\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(&#39;wrapper of decorator1&#39;)\n        func(*args, **kwargs)\n        print(&#39;wrapper of decorator2&#39;)\n    return wrapper\n```\n\n2. 使用函数\n\n```python\ndef greet():\n    print(&#39;hello decorator&#39;)\n    \ngreet = my_decorator(greet)\ngreet()\n```\n\n```python\n@my_decorator\ndef greet(): \n    print(&#39;hello decorator&#39;)\n    \ngreet()\n```\n\n上面两种方式是等价的, 我们学习装饰器的过程:\n1. 先学习将函数 4 大特征运用在函数里(定义)\n2. 传入函数对象, 调用函数, 返回同名函数, 最后再调用\n\n然而我们在大多数情况下都是直接看到 @ 语法糖, 然后不知所措, 一脸懵逼.\n为了解决这个问题, 鄙人认为, 需要这样做: \n- 看到 @ 语法糖的装饰器, 需要一双火眼金睛, 看出它的本来面目, 还原为最原始的使用方式.\n- 原则: 上面修饰下面, 即@语法糖的函数修饰下面的函数","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1585577923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237007,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e0/0f/23a94c8a.jpg","nickname":"youker","note":"","ucode":"56CEFB930F3B32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289569,"discussion_content":"同样觉得醍醐灌顶！小伙伴的细节解析很到位，实例变量而不是类变量那边一解释就想通了，赞！\n另外，补充一下。注意到老师的wrapper函数内其实会有返回，return func(*args, **kwargs) .讲白了，就是用wrapper替代原来函数，那么除了做完修饰的操作，还应该模拟原来函数的调用情况。\n所以如果原来有返回值，那么这里也应该返回一下原来函数调用后的返回结果～大不了原来就没有返回值，按python的机制，默认就是返回none。使用时，还是按原来函数的使用习惯，没有返回值，就不需要谁来接收函数调用的结果呗\n对吧？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1594135741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217719,"discussion_content":"你看, 将装饰器还原本来面目后, 装饰器的所有问题, 请先还原为本来面目后再慢慢分析, 还有什么不会的?\n\n大家不要被装饰器经过一番修饰之后就不认得了, 不管 @ 怎么化妆, 你都能认出它, 所以, 要学好装饰器, 你需要的是练就一双火眼金睛, 揭开层层面纱, 见其真面目的本领.\n\n明白了这一点之后, 再回到文稿中, 看老师的讲解, 应该会明白一些.","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585578075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217717,"discussion_content":"再复杂一点的:\n```python\nclass Count:\n    def __init__(self, func):\n        self.func = func\n        self.num_calls = 0\n        print(&#39;Count __init__&#39;)\n\n    def __call__(self, *args, **kwargs):\n        self.num_calls += 1\n        print(&#39;num of calls is: {}&#39;.format(self.num_calls))\n        return self.func(*args, **kwargs)\n\n@Count\ndef example():\n    print(&#34;hello Count&#34;)\n\nexample()\nexample()\n\n&#39;&#39;&#39;\n类装饰器又如何:\nexample = Count(example)  # 这个不就是实例化对象么\nexample()                 # 调用类实例对象, 由 __call__ 实现\nexample()\n&#39;&#39;&#39;\n```\n\n注意, 上面这个例子, 评论区很多同学不知道为什么第二次运行 example() 时, 会输出 2.\n从上面的&#34;真实面目&#34;来看, num_calls 就是实例属性, 并不是类属性:\n1. example = Count(example), 实例化对象后, 赋值给 example\n2. example(), 第一次调用类实例, 调用了 __call__() 方法\n3. example(), 上面调用一次 example 后, example 还没被释放呢, 既然没释放, 其内部的 num_calls 属性还保留着, 因此这里第二次调用, 不会再次初始化, 输出 2.\n\n不知道大家注意到没有, 上面的 Count 初始化方法里, 我增加了一句 `print(&#39;Count __init__&#39;)`, 我们来运行一下上面这段代码, 结果如下:\n\n```\nCount __init__\nnum of calls is: 1\nhello Count\nnum of calls is: 2\nhello Count\n```\n\nCount 只初始化了一次, 输出结果与预期相符.\n\n你看, ","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585578040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217724,"discussion_content":"我们看一下这个嵌套函数 my_decorator1(my_decorator2(my_decorator3(greet)))\n\n1. 运行 my_decorator3(greet), 出来的是一个函数对象, 此时还没有被调用, 修饰之后核心部分是这样的:\n\n```python\nprint(&#39;my_decorator3 - 1&#39;)\nfunc(*args, **kwargs)\nprint(&#39;my_decorator3 - 2&#39;)\n```\n\n这一部分, 就是函数体\n\n2. my_decorator2(my_decorator3(greet)), 同理, 在上面结果的基础上, 用 my_decorator2 修饰一下\n\n```python\nprint(&#39;my_decorator2 - 1&#39;)\nprint(&#39;my_decorator3 - 1&#39;)\nfunc(*args, **kwargs)\nprint(&#39;my_decorator3 - 2&#39;)\nprint(&#39;my_decorator2 - 2&#39;)\n```\n\n3. my_decorator1(my_decorator2(my_decorator3(greet))), 在上面结果的基础上, 用 my_decorator2 修饰一下\n\n```python\nprint(&#39;my_decorator1 - 1&#39;)\nprint(&#39;my_decorator2 - 1&#39;)\nprint(&#39;my_decorator3 - 1&#39;)\nfunc(*args, **kwargs)\nprint(&#39;my_decorator3 - 2&#39;)\nprint(&#39;my_decorator2 - 2&#39;)\nprint(&#39;my_decorator1 - 2&#39;)\n```\n\n这样, 结果显而易见了, 大家自己运行以下, 自己分析一下.\n\n试着用这套方法, 分析一下装饰器传参的情况.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585578146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217716,"discussion_content":"比如: \n\n简单一点的: \n```python\n@my_decorator\ndef celebrate(name, message):\n    pass\n\n&#39;&#39;&#39;\n看到什么这段代码, 火眼金睛一看, 现原形:\ncelebrate = my_decorator(celebrate)\n&#39;&#39;&#39;\n```\n\n复杂一点的:\n```python\n@repeat(4)\ndef greet(msg): \n    print(msg)\n    \n&#39;&#39;&#39;\n老孙的火眼金睛, 难不倒我:\ngreet = repeat(4)(greet)\n&#39;&#39;&#39;\n```","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585578002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217712,"discussion_content":"二. 熟悉Python函数的特点\n\nPython 函数具有以下 4 个特点:\n1. 函数也是对象, 可以把函数的**名字**赋值给变量;\n2. 函数(的名字)可以当做另一个函数的参数;\n3. 函数可以嵌套, 即在函数里面可以定义函数;\n4. 函数对象(函数名字)可以作为函数的返回值.\n\n上面提到的 函数对象 = 函数的名字, 就把&#34;函数的名字&#34;当成普通的变量对待就好了, \n普通的变量可以赋值, 也可以作为函数参数; \n函数的名字(函数对象)同样可以赋值, 也可以作为函数参数 \n\n上面 4 个特点的例子对应文中的示例 1 - 4\n\n分别根据这 4 个示例, 来做一下完形填空(下面每一点分别对应示例 1 - 4, 这里就不重复列出了):\n1. get_message 函数也是对象, 可以把 get_message 赋值给变量 send_message;\n2. get_message 可以当做另一个函数(root_call)的参数;\n3. get_message 函数定义在 func 函数里面;\n4. 内层函数 get_message 作为外层函数 func_closure 的返回值(return get_message).\n\n这 4 个特点看上应该还是很好理解的, 不过, 还需要补充一个知识点:\n\n我们经常使用函数, 使用函数无非就 2 点: 定义函数和使用函数(调用函数).\n我们是如何调用函数的? 在函数名后面加一对圆括号 &#34;()&#34; 就表示调用函数. 圆括号里加点调料, 这些调料叫参数\n如: get_message 是函数名, 调用这个函数: get_message(&#34;hello decorator&#34;)\n\n函数名后面可以加圆括号进行调用, 因此这个函数就称为&#34;可调用&#34;. 因此, &#34;函数名&#34;是&#34;可调用&#34;的.\n除了函数名可调用, 还有什么是&#34;可调用&#34;呢? 类实例(注意, 是&#34;实例&#34;)也可以为&#34;可调用&#34;, 在类里实现 __call__ 方法即可.\n\n好了, 下面开始出大招, 请接招.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585577850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217726,"discussion_content":"上面的描述会显得很啰嗦, 但希望能帮到你们!","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585578166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217723,"discussion_content":"最后, 用上面的方法, 分析一下多重装饰器修饰的问题. 借用老师给出的实例, 并稍作修改:\n\n```python\n\nimport functools\n\ndef my_decorator1(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(&#39;my_decorator1 - 1&#39;)\n        func(*args, **kwargs)\n        print(&#39;my_decorator1 - 2&#39;)\n    return wrapper\n\n\ndef my_decorator2(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(&#39;my_decorator2 - 1&#39;)\n        func(*args, **kwargs)\n        print(&#39;my_decorator2 - 2&#39;)\n    return wrapper\n\ndef my_decorator3(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(&#39;my_decorator3 - 1&#39;)\n        func(*args, **kwargs)\n        print(&#39;my_decorator3 - 2&#39;)\n    return wrapper\n\n\n@my_decorator1\n@my_decorator2\n@my_decorator3\ndef greet(message):\n    print(message)\n\ngreet(&#39;hello world&#39;)\n```\n\n我们一起来揭开面纱, 根据&#34;上面修饰下面&#34;原则, 本来面目为:\n\n```\ngreet = my_decorator1(my_decorator2(my_decorator3(greet)))\ngreet(&#39;hello world&#39;)\n```","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585578123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1899087,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fa/4f/4252911a.jpg","nickname":"Geek.S.","note":"","ucode":"FC8A9FE3300B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217709,"discussion_content":"一. 前言\n\n学习Python装饰器, 不要被&#34;一等公民&#34;, &#34;闭包&#34;等高大上的概念唬住.\n下面我会隐去这些高大上的概念, 等你理解后, 也会慢慢理解了.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585577824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541263,"avatar":"https://static001.geekbang.org/account/avatar/00/17/84/8f/a305cc1e.jpg","nickname":"otakuhuang","note":"","ucode":"283641975339AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378944,"discussion_content":"谢谢 Geek.S. 老师的讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623549178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368310,"discussion_content":"有收获 谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618651256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104493,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1560764517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65985273957","product_id":100026901,"comment_content":"lru cache常用来做一些小规模缓存，比如最近浏览记录，空间浏览记录等等，常用三种策略:1.FIFO(先进先出)２.最少使用LRU 3.最近最少使用LRU. 看了下源码，原来python原生的functools中的lru是链表写的","like_count":15},{"had_liked":false,"id":104318,"user_name":"吴星","can_delete":false,"product_type":"c1","uid":1031136,"ip_address":"","ucode":"CFC777B7F87C12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/e0/39c256c2.jpg","comment_is_top":false,"comment_ctime":1560732374,"is_pvip":false,"replies":[{"id":"37813","content":"因为num_calls这个变量是类变量，不是具体的实例变量，二次执行相当于调用了函数__call__两次，因此变量num_calls会变为2","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560752362,"ip_address":"","comment_id":104318,"utype":1}],"discussion_count":11,"race_medal":0,"score":"44510405334","product_id":100026901,"comment_content":"请教下，为什么count那儿是单例模式吗？为什么二次执行会加1？","like_count":10,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454221,"discussion_content":"因为num_calls这个变量是类变量，不是具体的实例变量，二次执行相当于调用了函数__call__两次，因此变量num_calls会变为2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560752362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1970660,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK2hcYF9YPt17GaicvtIehxNc8cdtIibiaA7VDxGrwI5iavC7aHwZyqOFFjT9WZg5hCFzAg/132","nickname":"Geek_83edf2","note":"","ucode":"975FD85FAF6078","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250533,"discussion_content":"def boo(test):\n    num = 0\n    def wrapper():\n        print(num)\n    wrapper()\n\n@boo\ndef bar():\n    print(&#34;Hello World!&#34;)\n\n如上，当解释器遇到装饰器的时候就会执行bar=boo(bar)，实际上bar就变成了类装饰器的一个实例，所以重复执行bar，成员属性自然就会不断增长。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1588008673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1248286,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/1e/74d65100.jpg","nickname":"jack motor","note":"","ucode":"158814F7DBBDC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1970660,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK2hcYF9YPt17GaicvtIehxNc8cdtIibiaA7VDxGrwI5iavC7aHwZyqOFFjT9WZg5hCFzAg/132","nickname":"Geek_83edf2","note":"","ucode":"975FD85FAF6078","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267791,"discussion_content":"有道理，同一个对象执行了两边","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589689485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":250533,"ip_address":""},"score":267791,"extra":""},{"author":{"id":1026358,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/36/f4028000.jpg","nickname":"monleylu","note":"","ucode":"BC2C0A17E50110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1970660,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK2hcYF9YPt17GaicvtIehxNc8cdtIibiaA7VDxGrwI5iavC7aHwZyqOFFjT9WZg5hCFzAg/132","nickname":"Geek_83edf2","note":"","ucode":"975FD85FAF6078","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388087,"discussion_content":"实例变量，只是两次执行都是同一个实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628585246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":250533,"ip_address":""},"score":388087,"extra":""}]},{"author":{"id":1016031,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/df/25235ce1.jpg","nickname":"Devin","note":"","ucode":"5421083D85878A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203088,"discussion_content":"同问，num_calls为啥是类变量而不是成员变量呢？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583994884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqVDbbuyIzSZibcydqnDkdZ96NBDmNYHun484FUcdj3vdaJmuxia9wqEChMRkhj8IpfaA/132","nickname":"Summer","note":"","ucode":"DA2683248EA698","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96729,"discussion_content":"老师您好，想问下这个num_calls为啥是类变量呢？\n我理解的类变量定义如下：\nclass TestClass(object):\n    num=0 #类变量,可以直接用类调用，或用实例对象调用\n    def __init__(self,x):\n        self.x=x  #实例变量（成员变量）,需要它是在类的构造函数内以self.开头来定义的\n        self.y=0 #\n        \n期待老师答复，谢谢\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577088917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1069127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","nickname":"Fan()","note":"","ucode":"FED79EC7D78E91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1793589,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqVDbbuyIzSZibcydqnDkdZ96NBDmNYHun484FUcdj3vdaJmuxia9wqEChMRkhj8IpfaA/132","nickname":"Summer","note":"","ucode":"DA2683248EA698","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317744,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603595874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96729,"ip_address":""},"score":317744,"extra":""}]},{"author":{"id":1045455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","nickname":"Milittle","note":"","ucode":"80E566639A8ABB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294532,"discussion_content":"这个地方应该是使用到了同一对象，并不是类对象","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1595920000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1579113,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGTgnCUZbXpDCeia2RdXVmP5aQdxTPNR5iaGUhhUfyEMHL9wnOHIsTmt4FJicceB0DBQZlUYTcqkLkw/132","nickname":"jumpingwa","note":"","ucode":"78005B31EFF335","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581074,"discussion_content":"num_calls是实例属性，可以通过Count().__dict__查看，而Count.__dict__是没有num_calls这个属性的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658484246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1659261,"avatar":"https://static001.geekbang.org/account/avatar/00/19/51/7d/2772ec9a.jpg","nickname":"风过留痕","note":"","ucode":"F13405AD8511B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276679,"discussion_content":"同问希望老师解惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590928550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238529,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/01/ae2468f3.jpg","nickname":"D.A.Y","note":"","ucode":"A9B60EBE6AC011","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244950,"discussion_content":"同疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587643373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104280,"user_name":"farFlight","can_delete":false,"product_type":"c1","uid":1245211,"ip_address":"","ucode":"B0872D3ECBEC38","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbRibsic15KXfGEN3SSjnLhXGyhK2Uyrj5ibBJsKAjicNqtafDaQOLH4xpSJRZD1vmibFPJER1ySmwP9A/132","comment_is_top":false,"comment_ctime":1560713086,"is_pvip":false,"replies":[{"id":"37814","content":"LRU cache is to remove the least recently used data when the cache is full。翻译过来可能有点问题，意思就是删除最久没有访问的，我还是直接保留英文解释吧。","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560753185,"ip_address":"","comment_id":104280,"utype":1}],"discussion_count":4,"race_medal":0,"score":"35920451454","product_id":100026901,"comment_content":"请问一下，lru cache不是应该删除最久没有访问的内容吗。","like_count":8,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454201,"discussion_content":"LRU cache is to remove the least recently used data when the cache is full。翻译过来可能有点问题，意思就是删除最久没有访问的，我还是直接保留英文解释吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560753185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2273602,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/42/fae5b225.jpg","nickname":"小田君","note":"","ucode":"3BD80F3BBEEA25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341744,"discussion_content":"最近最少使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610509579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1923399,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/59/47/af8200b4.jpg","nickname":"Jim_Ching","note":"","ucode":"E3467A79B2D491","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332989,"discussion_content":"FIFO，先进先出即可解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607409848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325700,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/84/70340e87.jpg","nickname":"向南","note":"","ucode":"E6072AD7CA6798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200109,"discussion_content":"最久未使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583658243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135322,"user_name":"被炸的油条","can_delete":false,"product_type":"c1","uid":1345808,"ip_address":"","ucode":"10760C73AA9E78","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/10/c1615952.jpg","comment_is_top":false,"comment_ctime":1569126116,"is_pvip":false,"replies":[{"id":"51908","content":"正解","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1569139581,"ip_address":"","comment_id":135322,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31633897188","product_id":100026901,"comment_content":"工作当中，如果是二次开发，在原来的需求基础之上做优化，原逻辑不需要修改的情况下，只需增加新的业务场景的时候，感觉用装饰器挺好的。不动原来的逻辑，增加程序的健壮性。","like_count":7,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468143,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569139581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104334,"user_name":"🇨🇳","can_delete":false,"product_type":"c1","uid":1306115,"ip_address":"","ucode":"D6C5E9CA44D082","user_header":"https://static001.geekbang.org/account/avatar/00/13/ee/03/09926387.jpg","comment_is_top":false,"comment_ctime":1560733717,"is_pvip":false,"replies":[{"id":"37810","content":"欢迎指正错别字。类装饰器的用途和函数装饰器差不多，比如文中所讲的机器学习中需要对输入进行合理性检查，他也常常可以写成类装饰器的形式，进行调用。写成类的话，优点是程序的分解度更加高，具体用类装饰器和函数装饰器，视情况而定，二者本质是一样的","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560752103,"ip_address":"","comment_id":104334,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27330537493","product_id":100026901,"comment_content":"1、总结中，倒数第二行发现错别字（程序）不是程度。<br>2、类装饰器在实际中有哪些应用场景呢","like_count":6,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454232,"discussion_content":"欢迎指正错别字。类装饰器的用途和函数装饰器差不多，比如文中所讲的机器学习中需要对输入进行合理性检查，他也常常可以写成类装饰器的形式，进行调用。写成类的话，优点是程序的分解度更加高，具体用类装饰器和函数装饰器，视情况而定，二者本质是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560752103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581705,"avatar":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","nickname":"响雨","note":"","ucode":"C5FB3A3BC68F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391,"discussion_content":"类装饰器，体积更大吧，因为继承了很多方法和属性。不如函数装饰器轻便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561529815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104323,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1560733058,"is_pvip":false,"replies":[{"id":"37811","content":"很高兴看到你有所收获","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560752124,"ip_address":"","comment_id":104323,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27330536834","product_id":100026901,"comment_content":"还有类装饰器，又长见识了，最近正愁参数校验放哪里，参照本文终于开窍了","like_count":6,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454225,"discussion_content":"很高兴看到你有所收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560752124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229383,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1592981833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23067818313","product_id":100026901,"comment_content":"装饰器的使用过程本质上是“找上级，听命令”的过程：1、“身份认证”是上级让不让原函数运行。2、日志记录是上级记录原函数工作时长。3、“输入合理性检查”是上级检查原函数工作内容。4、“LRU”是上级让原函数预先进入阵地---系统缓存。找上级的同时，还允许函数体内携带参数、函数体外携带参数。综合来看，“装饰器”不如叫做“统帅器”，：）","like_count":5},{"had_liked":false,"id":148774,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1573085621,"is_pvip":false,"replies":[{"id":"57285","content":"说的很好","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1573093206,"ip_address":"","comment_id":148774,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23047922101","product_id":100026901,"comment_content":"我之前开发过微服务脚手架，跟装饰器模式很像，就是rpc调用之前，把限流，上报，统计耗时统计在前面，每个功能还可以自由选择执行的时机，跟业务功能分离，开发关注于业务研发就行了","like_count":5,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473605,"discussion_content":"说的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573093206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111654,"user_name":"岁月婧好","can_delete":false,"product_type":"c1","uid":1580287,"ip_address":"","ucode":"A75DB677DE61D3","user_header":"https://static001.geekbang.org/account/avatar/00/18/1c/ff/cfc25424.jpg","comment_is_top":false,"comment_ctime":1562578374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23037414854","product_id":100026901,"comment_content":"“原函数还是原函数吗？”一栏中“为了解决这个问题，我们通常使用内置的装饰器@functools.wrap“，应该是@functools.wraps,有s的吧<br>","like_count":5},{"had_liked":false,"id":185663,"user_name":"向南","can_delete":false,"product_type":"c1","uid":1325700,"ip_address":"","ucode":"E6072AD7CA6798","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/84/70340e87.jpg","comment_is_top":false,"comment_ctime":1583658193,"is_pvip":false,"replies":[{"id":"72038","content":"对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1583890939,"ip_address":"","comment_id":185663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18763527377","product_id":100026901,"comment_content":"装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数&#47;类对象。<br>它经常用于有特定需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。<br>有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。<br>装饰器并没有修改原函数，或者说装饰器并没有修改原函数的功能，而为其新增其他功能。","like_count":4,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486455,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583890939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118800,"user_name":"江南皮革厂研发中心保安队长","can_delete":false,"product_type":"c1","uid":1099584,"ip_address":"","ucode":"231419643A5CC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/40/66a203cd.jpg","comment_is_top":false,"comment_ctime":1564448544,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18744317728","product_id":100026901,"comment_content":"装饰器年年都在学，每次学都是新发现0_0 , 看来还是没到家","like_count":4,"discussions":[{"author":{"id":1165084,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c7/1c/e59a699b.jpg","nickname":"海朋森","note":"","ucode":"212BADF1F9E962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319523,"discussion_content":"哈哈，childs我也喜欢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604043741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104794,"user_name":"一叶知秋","can_delete":false,"product_type":"c1","uid":1445189,"ip_address":"","ucode":"15A95FA86B7AE4","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/45/b88a1794.jpg","comment_is_top":false,"comment_ctime":1560840183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18740709367","product_id":100026901,"comment_content":"平时似乎也就property、staticmethod、classmethod用的比较多一点","like_count":4},{"had_liked":false,"id":104749,"user_name":"GentleCP","can_delete":false,"product_type":"c1","uid":1525440,"ip_address":"","ucode":"BB1EE3720D44F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/c0/01292b08.jpg","comment_is_top":false,"comment_ctime":1560826684,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"18740695868","product_id":100026901,"comment_content":"老师，装饰器嵌套的时候，执行顺序不是decorator1-&gt;decorator2-&gt;func吗，应该是从外到内吧，外层的装饰器先执行，打印结果是<br>decorator1<br>decorator2<br>hello world","like_count":4,"discussions":[{"author":{"id":1761988,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e2/c4/25acaa38.jpg","nickname":"苹果","note":"","ucode":"5D0FA9D8560FD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156440,"discussion_content":"我发现是要看装饰器本身的函数功能，和都陷入的函数之间的前后顺序的。把函数按照1（2（3（func()）））,替代其中的func.来判断执行结果，交换这个两行的顺序func(*args,**kwargs)和print（），结果就是反过来的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580364098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528751,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/af/e5bf5d08.jpg","nickname":"lllong33","note":"","ucode":"5D012385994C3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191,"discussion_content":"反向装饰，正向执行，仔细扣有点难理解，记住就好了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1561268456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526699,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ia6JAkzNibEwqJicr8rKThHdPl8B5MCmk846efGsURAa4hUklrru5qGVIIX1iax35bkZWpXAsGqvVpYxNibIqAVoOw/132","nickname":"胖三叶","note":"","ucode":"F3C33669997496","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2783,"discussion_content":"对于目标函数的执行的确是由里到外，但是在每个装饰器内部，约定俗成的做法是先执行装饰器的内容，最后执行目标函数的内容，这也是为什么我们会看到外层的装饰器的内容先被打印。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563932848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248732,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/dc/ddfaf280.jpg","nickname":"Pixel.","note":"","ucode":"A740BD008C5A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":703,"discussion_content":"我理解“由里向外”执行，是指func先执行完，然后是decorator2，最后是decorator1。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561971046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2369413,"avatar":"https://static001.geekbang.org/account/avatar/00/24/27/85/ddeeaf30.jpg","nickname":"dived","note":"","ucode":"141916A3BAF5A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374350,"discussion_content":"def my_decorator1(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n#         print(&#39;execute decorator1&#39;)\n        func(*args, **kwargs)\n        print(&#39;execute decorator1&#39;)\n    return wrapper\n\n\ndef my_decorator2(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        #print(&#39;execute decorator2&#39;)\n        func(*args, **kwargs)\n         print(&#39;execute decorator2&#39;)\n    return wrapper\n\n@my_decorator1\n@my_decorator2\ndef greet(message):\n    print(message)\ngreet(&#39;hello world&#39;)\n\n大家只要记住装饰器是用来用改原函数的这点就可以，然后搭配从内到外的顺序来执行。\n[比如我的写法] 内到外的执行顺序\n1:my_decorator2(greet(message)）\n这个装饰器 决定先执行func(*args, **kwargs)=greet(message)=print(&#39;hello world&#39;)，然后打印print(&#39;execute decorator2&#39;)\n即\nprint(&#39;hello world&#39;)\nprint(&#39;execute decorator2&#39;)\n2:my_decorator1(my_decorator2(greet(message)) \n决定先执行my_decorator2(greet(message)，再print(&#39;execute decorator1&#39;)\nprint(&#39;hello world&#39;)\nprint(&#39;execute decorator2&#39;)\nprint(&#39;execute decorator1&#39;)\n这个就整个执行完整了\n\n老师的源写法\ndef my_decorator1(func):\n    def wrapper(*args, **kwargs):\n        print(&#39;execute decorator1&#39;)\n        func(*args, **kwargs)\n\ndef my_decorator2(func):\n    def wrapper(*args, **kwargs):\n        print(&#39;execute decorator2&#39;)\n        func(*args, **kwargs)\n1，my_decorator2(greet(message)）决定先打印装饰信息print(&#39;execute decorator2&#39;)，再执行原函数func(*args, **kwargs)=greet(message)=print(&#39;hello world&#39;)，\nprint(&#39;execute decorator2&#39;)\nprint(&#39;hello world&#39;)\n2, my_decorator1(my_decorator2(greet(message))  一样 ,先打印print(&#39;execute decorator1&#39;) 再执行my_decorator2(greet(message)\nprint(&#39;execute decorator1&#39;)\n\nprint(&#39;execute decorator2&#39;)\nprint(&#39;hello world&#39;)\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621148856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104506,"user_name":"upempty","can_delete":false,"product_type":"c1","uid":1013145,"ip_address":"","ucode":"C7325C121C1180","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/99/f9da15ee.jpg","comment_is_top":false,"comment_ctime":1560769390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14445671278","product_id":100026901,"comment_content":"老师好，num_calls不是实例属性？example实例对象一次，call两次实例属性num_calls得到2。谢谢！","like_count":3},{"had_liked":false,"id":104319,"user_name":"Hoo-Ah","can_delete":false,"product_type":"c1","uid":1306913,"ip_address":"","ucode":"823093A6C7DEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/21/52e8267b.jpg","comment_is_top":false,"comment_ctime":1560732396,"is_pvip":false,"replies":[{"id":"37812","content":"嗯嗯","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560752233,"ip_address":"","comment_id":104319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14445634284","product_id":100026901,"comment_content":"目前工作中使用的是tornado框架，里面依赖tornado.gen.coroutine这个装饰器用来将被装饰的函数变为协程，这样就可以将代码的执行变为异步非阻塞，提高程序的并发量。","like_count":3,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454222,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560752233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231052,"user_name":"王坤祥","can_delete":false,"product_type":"c1","uid":1003327,"ip_address":"","ucode":"FB988B9F381A33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","comment_is_top":false,"comment_ctime":1593572028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183506620","product_id":100026901,"comment_content":"最后讲到装饰器应用场景这一点很不错，学习了","like_count":2},{"had_liked":false,"id":162466,"user_name":"王圣军","can_delete":false,"product_type":"c1","uid":1395602,"ip_address":"","ucode":"1E13CF683137D1","user_header":"https://static001.geekbang.org/account/avatar/00/15/4b/92/03338a22.jpg","comment_is_top":false,"comment_ctime":1576543683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166478275","product_id":100026901,"comment_content":"感觉装饰器类比java中的代理模式，AOP思想","like_count":2},{"had_liked":false,"id":104496,"user_name":"Geek_59f23e","can_delete":false,"product_type":"c1","uid":1513783,"ip_address":"","ucode":"A463C6EB7447FD","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","comment_is_top":false,"comment_ctime":1560765112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150699704","product_id":100026901,"comment_content":"1. 在类装饰器那一节中，’每当你调用一个类的示例时‘，应该是类的实例吧。<br>另外这里还是有点疑问，类装饰器被调用两次时self.num_calls这个变量不是实例变量么，第二次调用时为什么没有生成新的实例，同时把之前的实例变量清空呢？<br>2. 输入合理性检查一节中，应该是@functools.wraps(input)吧，最后还要加上return wrapper。<br>3. 缓存一节中，代码头加上from functools import lru_cache可能更容易理解些。<br><br>4. 感觉装饰器和中间件很像，都是一层包一层的堆栈结构，框架好像都少不了使用闭包装饰器。","like_count":2},{"had_liked":false,"id":274039,"user_name":"生无所息","can_delete":false,"product_type":"c1","uid":2396309,"ip_address":"","ucode":"F96CE1084E50F7","user_header":"https://static001.geekbang.org/account/avatar/00/24/90/95/0a9e93eb.jpg","comment_is_top":false,"comment_ctime":1610794716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905762012","product_id":100026901,"comment_content":"看了N次装饰器各种资料，就你给我讲明白了","like_count":1},{"had_liked":false,"id":226492,"user_name":"Jadm","can_delete":false,"product_type":"c1","uid":1074374,"ip_address":"","ucode":"F8222DD8AF893C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/c6/513469df.jpg","comment_is_top":false,"comment_ctime":1592121689,"is_pvip":false,"replies":[{"id":"84143","content":"谢谢支持哦","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1592592859,"ip_address":"","comment_id":226492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887088985","product_id":100026901,"comment_content":"老师能不能多出点课程，讲的太好了🤠🤠","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498261,"discussion_content":"谢谢支持哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592592859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112840,"user_name":"A.Windy","can_delete":false,"product_type":"c1","uid":1128146,"ip_address":"","ucode":"254868B270F26D","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/d2/32d3545a.jpg","comment_is_top":false,"comment_ctime":1562830156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5857797452","product_id":100026901,"comment_content":"装饰器完全可以转换为方法调用：<br>import functools<br>def my_decorator(param):<br>    def inner(func):<br>        @functools.wraps(func)  #保留函数的元信息<br>        def wrapper(*args, **kwargs):<br>            print(&quot;before func run. {}&quot;.format(param))<br>            func(*args, **kwargs)<br>            print(&quot;after func run. {}&quot;.format(param))<br>        return wrapper<br>    return inner<br>@my_decorator(&quot;装饰器参数形式&quot;)<br>def test(p, p1):<br>    print(&quot;i am func with param.{}, {}&quot;.format(p, p1))<br># 装饰器方式<br>test(&quot;decorator&quot;, &quot;p22&quot;)<br><br># 函数定义方式，等价于装饰器<br>def test1(p, p1):<br>    print(&quot;i am func 函数调用 param.{}, {}&quot;.format(p, p1))<br>f = my_decorator(&quot;函数参数形式&quot;)(test1)<br>f(&quot;func call&quot;, &quot;p2&quot;)<br>#<br>print(test, f)<br>输出：<br>before func run. 装饰器参数形式<br>i am func with param.decorator, p22<br>after func run. 装饰器参数形式<br>before func run. 函数参数形式<br>i am func 函数调用 param.func call, p2<br>after func run. 函数参数形式<br>&lt;function my_decorator.&lt;locals&gt;.inner.&lt;locals&gt;.wrapper at 0x10a7107b8&gt; &lt;function my_decorator.&lt;locals&gt;.inner.&lt;locals&gt;.wrapper at 0x10a710bf8&gt;<br>","like_count":1},{"had_liked":false,"id":108859,"user_name":"magician","can_delete":false,"product_type":"c1","uid":1483968,"ip_address":"","ucode":"1BD1125C7C907A","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/c0/c6880c07.jpg","comment_is_top":false,"comment_ctime":1561903553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856870849","product_id":100026901,"comment_content":"api权限验证，缓存，日志，api运行时间","like_count":1},{"had_liked":false,"id":106442,"user_name":"峥嵘","can_delete":false,"product_type":"c1","uid":1372521,"ip_address":"","ucode":"A5E68C683FD549","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDoryvjG7gvmC4o8TyKuficiaGK9JKAnzUlgh1eQPQb1WZHSKXgcExdbsHmDaPibpoSFO4W5jjGPIvQA/132","comment_is_top":false,"comment_ctime":1561303414,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5856270710","product_id":100026901,"comment_content":"请问老师，在“输入合理性检查“部分，为什么装饰器validation_check的参数不是func？<br>谢谢老师<br><br>def validation_check(input):<br>    @functools.wraps(func)<br>    def wrapper(*args, **kwargs): <br>        ... # 检查输入是否合法<br>    <br>@validation_check<br>def neural_network_training(param1, param2, ...):<br>    ...","like_count":1,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9486,"discussion_content":"应该是写错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568173520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105605,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1561040455,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5856007751","product_id":100026901,"comment_content":"不实用，代码可读性太低","like_count":1,"discussions":[{"author":{"id":1604029,"avatar":"https://static001.geekbang.org/account/avatar/00/18/79/bd/d9c4b12f.jpg","nickname":"Geek_dae047","note":"","ucode":"4FEB920240770D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196233,"discussion_content":"django的middleware了解一下[狗子]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583333497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104932,"user_name":"木木杰","can_delete":false,"product_type":"c1","uid":1234433,"ip_address":"","ucode":"94FD85CA7F01E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/01/52bcd7a0.jpg","comment_is_top":false,"comment_ctime":1560873600,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5855840896","product_id":100026901,"comment_content":"没看懂啊，是我的问题吗？😂","like_count":1,"discussions":[{"author":{"id":1024962,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/c2/abb7bfe3.jpg","nickname":"©™","note":"","ucode":"766C79DEFA2887","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575,"discussion_content":"是的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561713661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104720,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1560821877,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5855789173","product_id":100026901,"comment_content":"老师，您好，locked_cached_property是类，它没有__call__方法，但是却能用来装饰另一个方法(name)，这是为什么了？以下是代码，来自flask源码<br><br>class locked_cached_property(object):<br>    &quot;&quot;&quot;A decorator that converts a function into a lazy property.  The<br>    function wrapped is called the first time to retrieve the result<br>    and then that calculated result is used the next time you access<br>    the value.  Works like the one in Werkzeug but has a lock for<br>    thread safety.<br>    &quot;&quot;&quot;<br><br>    def __init__(self, func, name=None, doc=None):<br>        self.__name__ = name or func.__name__<br>        self.__module__ = func.__module__<br>        self.__doc__ = doc or func.__doc__<br>        self.func = func<br>        self.lock = RLock()<br><br>    def __get__(self, obj, type=None):<br>        if obj is None:<br>            return self<br>        with self.lock:<br>            value = obj.__dict__.get(self.__name__, _missing)<br>            if value is _missing:<br>                value = self.func(obj)<br>                obj.__dict__[self.__name__] = value<br>            return value<br>\t\t\t<br>@locked_cached_property<br>    def name(self):<br>        &quot;&quot;&quot;The name of the application.  This is usually the import name<br>        with the difference that it&#39;s guessed from the run file if the<br>        import name is main.  This name is used as a display name when<br>        Flask needs the name of the application.  It can be set and overridden<br>        to change the value.<br>        .. versionadded:: 0.8<br>        &quot;&quot;&quot;<br>        if self.import_name == &quot;__main__&quot;:<br>            fn = getattr(sys.modules[&quot;__main__&quot;], &quot;__file__&quot;, None)<br>            if fn is None:<br>                return &quot;__main__&quot;<br>            return os.path.splitext(os.path.basename(fn))[0]<br>        return self.import_name<br><br>","like_count":1,"discussions":[{"author":{"id":1579113,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGTgnCUZbXpDCeia2RdXVmP5aQdxTPNR5iaGUhhUfyEMHL9wnOHIsTmt4FJicceB0DBQZlUYTcqkLkw/132","nickname":"jumpingwa","note":"","ucode":"78005B31EFF335","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581071,"discussion_content":"因为用了描述符实现了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658483460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1341402,"avatar":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","nickname":"Wing·三金","note":"","ucode":"6B9F5822C3717F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147,"discussion_content":"下面的 name 函数是在另一个类里面吗？是的话这篇文章也许有帮助：https://baijiahao.baidu.com/s?id=1627791616262685687&amp;wfr=spider&amp;for=pc。不是的话……请老师讲解 emm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561176028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357882,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"北京","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1663728485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663728485","product_id":100026901,"comment_content":"从数学的角度来理解装饰器，就是：如果质点在一个坐标系里的运动规律“不好看”、需要完善，那么我们就基于这个坐标系创建一个子坐标系，把这个质点放到子坐标系里。然后调整子坐标系的运动状态。这样，从父坐标系的角度看，质点运动完美了。","like_count":0},{"had_liked":false,"id":357879,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"北京","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1663728181,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1663728181","product_id":100026901,"comment_content":"记得应该这是我第二次吐槽 Pyhonn 语言装饰器这里的语法设计问题了：当装饰器有自定义参数时候，这个函数就是三层嵌套了，看起来像是丑陋的回调地狱一样。为何不能采用一些简单的语法表示呢 ？ <br>比如，我之前提到过的那种形式<br>def my_decorator(func, decorator_para=null, func_para=（*args, **kwargs）):<br>    print(&#39;wrapper of decorator&#39;)<br>    result = func(message)<br>    return result<br><br><br>@my_decorator<br>def greet(message):<br>    print(message)<br><br>我理解装饰器的作用在于：在不改变原有函数内部代码（原逻辑结构不变）的前提下，根据新的业务场景来重写函数的一种方式。因此，经过装饰器改造后，只要调用原函数名能够得到新业务场景需要的结果就可以了。因此采用的语法方式应该有很多种。语法不一定要采用“回调地狱”的这种方式。","like_count":0,"discussions":[{"author":{"id":3206367,"avatar":"https://static001.geekbang.org/account/avatar/00/30/ec/df/b44e0d17.jpg","nickname":"jinrong","note":"","ucode":"415777E0D2B492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591824,"discussion_content":"已经第2次看了，还是“回调地狱”的感觉。依旧不能很好的理解装饰器。之前一直不懂为什么理解不了，“回调地狱”戳中我了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666845435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351328,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1657702768,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657702768","product_id":100026901,"comment_content":"感觉这个装饰器有点像是代理模式的应用，也有点像装饰器模式","like_count":0},{"had_liked":false,"id":347419,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1129549,"ip_address":"","ucode":"6210B499F0A8E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/4d/0db7b5dc.jpg","comment_is_top":false,"comment_ctime":1654004443,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654004443","product_id":100026901,"comment_content":"就跟java的动态代理一个道理","like_count":0},{"had_liked":false,"id":346521,"user_name":"Ins-think","can_delete":false,"product_type":"c1","uid":2876025,"ip_address":"","ucode":"07E73D4C963E52","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e2/79/d5d021cb.jpg","comment_is_top":false,"comment_ctime":1653211016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653211016","product_id":100026901,"comment_content":"装饰器模式和代理模式感觉很像，请问它们有什么区别吗？一直没太区分清楚它们俩，包括初始化和使用方式都很像。。。","like_count":0},{"had_liked":false,"id":345971,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1652746762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652746762","product_id":100026901,"comment_content":"装饰器不一定非要有 def wrapper（）","like_count":0},{"had_liked":false,"id":345779,"user_name":"三年二班邱小东","can_delete":false,"product_type":"c1","uid":2922136,"ip_address":"","ucode":"909B49C63C8EC6","user_header":"https://static001.geekbang.org/account/avatar/00/2c/96/98/89b96cda.jpg","comment_is_top":false,"comment_ctime":1652590259,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652590259","product_id":100026901,"comment_content":"请问老师，最后的缓存装饰器是如何减少检查版本函数的调用次数的？是最老的版本会被删掉吗？","like_count":0},{"had_liked":false,"id":343778,"user_name":"Geek_145846","can_delete":false,"product_type":"c1","uid":2530478,"ip_address":"","ucode":"1DA77D13A8F19E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoAlkIjytYG8MqOtDf7n7pF3rXJnoMNL9ebRXluPvGh2e2A9TxyMoQxPyYQ1dInAFIeltwo8zuvhg/132","comment_is_top":false,"comment_ctime":1651049851,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651049851","product_id":100026901,"comment_content":"这一篇太抽象了，讲到类装饰器就完全看不懂了，难受","like_count":0},{"had_liked":false,"id":342048,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1649991619,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649991619","product_id":100026901,"comment_content":"这个装饰器就像java的切面aop功能。在class，method都有丰富的使用场景","like_count":0},{"had_liked":false,"id":340778,"user_name":"Geek_e21a27","can_delete":false,"product_type":"c1","uid":2941979,"ip_address":"","ucode":"307749D0E4E472","user_header":"","comment_is_top":false,"comment_ctime":1649136056,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649136056","product_id":100026901,"comment_content":"请教个问题，保留原函数的元数据有什么用啊","like_count":0},{"had_liked":false,"id":337843,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1106929,"ip_address":"","ucode":"B2F562F717BD3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/f1/346bd356.jpg","comment_is_top":false,"comment_ctime":1647089294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647089294","product_id":100026901,"comment_content":"老师，@lru_cache在多进程模式下，缓存数据不能共享，怎么解决？","like_count":0},{"had_liked":false,"id":331914,"user_name":"Geek_fe1850","can_delete":false,"product_type":"c1","uid":2713567,"ip_address":"","ucode":"FF42110F64D18C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vp61JmITAsvM9hcicicaWcMp9T6eOEickjwMEccC8IoJFyNN55sFYibzBPibgmzuLDx9L8tBrOQZP3Kwa9u9tfAQF4g/132","comment_is_top":false,"comment_ctime":1642867412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642867412","product_id":100026901,"comment_content":"用户权限控制时，使用过装饰器进行url方法控制","like_count":0},{"had_liked":false,"id":322758,"user_name":"徐 磊","can_delete":false,"product_type":"c1","uid":2350856,"ip_address":"","ucode":"8DF41A4CD678FD","user_header":"https://static001.geekbang.org/account/avatar/00/23/df/08/261a1bd0.jpg","comment_is_top":false,"comment_ctime":1637576986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637576986","product_id":100026901,"comment_content":"想请问下老师，带点的装饰器怎么理解如Pytest中很多类或函数前的装饰器@pytest.mark.parametrize()<br>@pytest.mark.xxx,根据mark的说明，好像后面跟的xxx是自定义的标记字符<br>这样格式的装饰器怎么理解","like_count":0},{"had_liked":false,"id":319270,"user_name":"曹明路","can_delete":false,"product_type":"c1","uid":1336804,"ip_address":"","ucode":"BE4328CBB0466F","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/e4/187e539e.jpg","comment_is_top":false,"comment_ctime":1635728356,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1635728356","product_id":100026901,"comment_content":"<br>class Count:<br>    def __init__(self, func):<br>        self.func = func<br>        self.num_calls = 0<br><br>    def __call__(self, *args, **kwargs):<br>        self.num_calls += 1<br>        print(&#39;num of calls is: {}&#39;.format(self.num_calls))<br>        return self.func(*args, **kwargs)<br><br>@Count<br>def example():<br>    print(&quot;hello world&quot;)<br><br>example()<br><br># 输出<br>num of calls is: 1<br>hello world<br><br>example()<br><br># 输出<br>num of calls is: 2<br>hello world<br><br>...    <br>老师，这段代码__call__()函数什么时候被调用的呢？","like_count":0,"discussions":[{"author":{"id":1579113,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGTgnCUZbXpDCeia2RdXVmP5aQdxTPNR5iaGUhhUfyEMHL9wnOHIsTmt4FJicceB0DBQZlUYTcqkLkw/132","nickname":"jumpingwa","note":"","ucode":"78005B31EFF335","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581072,"discussion_content":"装饰example的时候自动调用了呀，example=Count(example)()，Count(example)()会调用__call__","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658483615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312491,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/1c4af368.jpg","comment_is_top":false,"comment_ctime":1631841663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631841663","product_id":100026901,"comment_content":"装饰器，装饰类是什么运用？","like_count":0},{"had_liked":false,"id":300267,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1625069435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625069435","product_id":100026901,"comment_content":"时长来复习一遍，这篇讲的太好。","like_count":0},{"had_liked":false,"id":291360,"user_name":"榴莲芝士🏃","can_delete":false,"product_type":"c1","uid":1606788,"ip_address":"","ucode":"DA886FC33DF091","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/84/d12ea6b0.jpg","comment_is_top":false,"comment_ctime":1620226847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620226847","product_id":100026901,"comment_content":"日志记录里面，查看函数的执行时间用得比较多","like_count":0},{"had_liked":false,"id":284193,"user_name":"cooper","can_delete":false,"product_type":"c1","uid":2321982,"ip_address":"","ucode":"27259668DC97B5","user_header":"https://static001.geekbang.org/account/avatar/00/23/6e/3e/874ec3c1.jpg","comment_is_top":false,"comment_ctime":1616118198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616118198","product_id":100026901,"comment_content":"我看装饰器嵌套的执行怎么感觉是先执行外面，再执行里面的呢？例子里面就是先执行了decorator1，再执行的decorator2的呀，老师可以解疑吗？","like_count":0},{"had_liked":false,"id":281833,"user_name":"Okay","can_delete":false,"product_type":"c1","uid":1484469,"ip_address":"","ucode":"0C861979801BB5","user_header":"https://static001.geekbang.org/account/avatar/00/16/a6/b5/2349e784.jpg","comment_is_top":false,"comment_ctime":1614917737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614917737","product_id":100026901,"comment_content":"我对装饰器的理解，就是重写里面的函数内容吧","like_count":0},{"had_liked":false,"id":272902,"user_name":"Jim","can_delete":false,"product_type":"c1","uid":2049369,"ip_address":"","ucode":"2D3D035DD3C225","user_header":"https://static001.geekbang.org/account/avatar/00/1f/45/59/1a40c6de.jpg","comment_is_top":false,"comment_ctime":1610350883,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610350883","product_id":100026901,"comment_content":"输入合理性检查这里，为什么是input 不是func呢：<br>def validation_check(input):","like_count":0,"discussions":[{"author":{"id":1447496,"avatar":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","nickname":"郑泽洲","note":"","ucode":"EA1B540A040875","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382792,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625726799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272788,"user_name":"米勒","can_delete":false,"product_type":"c1","uid":2344816,"ip_address":"","ucode":"9C02A167B593A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCbnGYOhwYmBwytX5e8Dd3ll9JwjUgaS5QK2JnbxrNdwJiaFksjsKQXBw9OuLZicrCB7unnS3ZGLOw/132","comment_is_top":false,"comment_ctime":1610283650,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610283650","product_id":100026901,"comment_content":"老师，问个小白问题：<br>def a():<br>    print(&#39;a&#39;)<br>    def b():<br>        print(&#39;b&#39;)<br>这里的 b如何外部调用呢？<br> <br>","like_count":0,"discussions":[{"author":{"id":1363634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","nickname":"海盗船长","note":"","ucode":"ECB28BA21A4113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344006,"discussion_content":"没法外部调用，如果想外部调用，就单独再写个func。你举的例子不是闭包，所以给你造成了理解上的困难，b中需要使用到a里的参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611232590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268870,"user_name":"保持微笑","can_delete":false,"product_type":"c1","uid":1914859,"ip_address":"","ucode":"A8BB6462243204","user_header":"https://static001.geekbang.org/account/avatar/00/1d/37/eb/90f5769b.jpg","comment_is_top":false,"comment_ctime":1608382077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608382077","product_id":100026901,"comment_content":"staticmethod和自己写的装饰器能一起用吗？","like_count":0},{"had_liked":false,"id":257614,"user_name":"海朋森","can_delete":false,"product_type":"c1","uid":1165084,"ip_address":"","ucode":"212BADF1F9E962","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/1c/e59a699b.jpg","comment_is_top":false,"comment_ctime":1604043783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604043783","product_id":100026901,"comment_content":"既然，强大，一定是很强很大哈","like_count":0},{"had_liked":false,"id":256298,"user_name":"Fan()","can_delete":false,"product_type":"c1","uid":1069127,"ip_address":"","ucode":"FED79EC7D78E91","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","comment_is_top":false,"comment_ctime":1603595999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603595999","product_id":100026901,"comment_content":"为啥num_calls是类属性不是实例属性？","like_count":0},{"had_liked":false,"id":252591,"user_name":"海峰","can_delete":false,"product_type":"c1","uid":1395741,"ip_address":"","ucode":"4C5CD36C43A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/15/4c/1d/4a05d2a7.jpg","comment_is_top":false,"comment_ctime":1602394904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602394904","product_id":100026901,"comment_content":"数据库初始化时，会预先预置一些数据和表，如果需要修改这些表中的预置数据，可以在调用之前使用装饰器对每个表进行清空数据，然后再进行数据预置。","like_count":0},{"had_liked":false,"id":251936,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1601988603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601988603","product_id":100026901,"comment_content":"这一篇很好的回顾了之前的方法 函数嵌套 闭包","like_count":0},{"had_liked":false,"id":251468,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1601600060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601600060","product_id":100026901,"comment_content":"“我们通常使用缓存装饰器，来包裹这些检查函数，避免其被反复调用，进而提高程序运行效率，”<br>这里是说把一些版本号之类的东西放到缓存里面，这样就不需要一直到内存中调用，节省时间，是这个意思吗？","like_count":0},{"had_liked":false,"id":230493,"user_name":"patience","can_delete":false,"product_type":"c1","uid":1922298,"ip_address":"","ucode":"46BEA083F550A8","user_header":"","comment_is_top":false,"comment_ctime":1593399753,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593399753","product_id":100026901,"comment_content":"一直想不通装饰器的嵌套，不是说顺序是从里到外的嘛？文章中的举例为什么输出的结果却是：<br>execute decorator1<br>execute decorator2<br>hello world<br>由于先执行decorator2，不是应该先输出execute decorator2嘛？","like_count":0,"discussions":[{"author":{"id":2034725,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UGqtO7nj9EXt7tbicojstIcLnMgzY2cWaUyXWzQU7G0c1YttVcxlslKXTev1ohonFfJBWQZ1oNT3C9GQ6jjlhyw/132","nickname":"Geek_f9d390","note":"","ucode":"521B60A2DCABD4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287416,"discussion_content":"你把她分解为函数调用的表示形式就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593436157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220991,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1590373643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590373643","product_id":100026901,"comment_content":"老师能否补充下，用 @functools.wraps(func) 来保留原来的元信息，如果不保留，会有什么错误呢？有没有例子说明一下？","like_count":0},{"had_liked":false,"id":216392,"user_name":"做一个可靠的UDP","can_delete":false,"product_type":"c1","uid":1995257,"ip_address":"","ucode":"2428ED20AD3398","user_header":"https://static001.geekbang.org/account/avatar/00/1e/71/f9/85329b42.jpg","comment_is_top":false,"comment_ctime":1589250425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589250425","product_id":100026901,"comment_content":"感谢作者！配合这篇文章的评论食用更佳：https:&#47;&#47;www.runoob.com&#47;w3cnote&#47;python-func-decorators.html","like_count":0},{"had_liked":false,"id":202934,"user_name":"7_","can_delete":false,"product_type":"c1","uid":1652284,"ip_address":"","ucode":"5A511A31BE295D","user_header":"https://static001.geekbang.org/account/avatar/00/19/36/3c/73fda266.jpg","comment_is_top":false,"comment_ctime":1586088732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586088732","product_id":100026901,"comment_content":"函数复习部分 第三个例子代码有小问题，不符合规范，嵌套函数 外层参数message 内层参数也是message  直接去掉内层函数的message参数， 让内层函数使用外层函数的message参数就行了","like_count":0},{"had_liked":false,"id":201366,"user_name":"王大华","can_delete":false,"product_type":"c1","uid":1163590,"ip_address":"","ucode":"7AD5C4B8E93B0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c1/46/a81f7402.jpg","comment_is_top":false,"comment_ctime":1585756502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585756502","product_id":100026901,"comment_content":"1 鉴权<br>2 web开发input参数验证<br>3 web开发用户权限验证<br>’","like_count":0},{"had_liked":false,"id":200961,"user_name":"恬恬","can_delete":false,"product_type":"c1","uid":1237977,"ip_address":"","ucode":"12335280B53040","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/d9/bda5e991.jpg","comment_is_top":false,"comment_ctime":1585699693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585699693","product_id":100026901,"comment_content":"看完后，觉得可以去改改自己程序的log日志了，感觉装饰器可以很简洁，自己用logging那些来记录太冗余了😂","like_count":0},{"had_liked":false,"id":200621,"user_name":"WESTWALL","can_delete":false,"product_type":"c1","uid":1434423,"ip_address":"","ucode":"295A030F9D3BF4","user_header":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","comment_is_top":false,"comment_ctime":1585625289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585625289","product_id":100026901,"comment_content":"看完了装饰器，觉得有点类似java的AOP","like_count":0},{"had_liked":false,"id":197930,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1585403823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585403823","product_id":100026901,"comment_content":"class Count: <br>       def __init__(self, func):  <br>              self.func = func <br>              self.num_calls = 0 <br><br>     def __call__(self, *args, **kwargs): <br>            self.num_calls += 1 <br>           print(&#39;num of calls is: {}&#39;.format(self.num_calls)) <br>           return self.func(*args, **kwargs)<br><br>中，为什么self.num_calls = 0 是类变量，前面讲类变量是定义在实例函数外，并与实例函数平齐呀？","like_count":0},{"had_liked":false,"id":191273,"user_name":"潘会大","can_delete":false,"product_type":"c1","uid":1015004,"ip_address":"","ucode":"41085C621B8BEF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/dc/d9fa47b1.jpg","comment_is_top":false,"comment_ctime":1584760125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584760125","product_id":100026901,"comment_content":"老师您好，<br>对于“带有自定义参数的装饰器”部分的示例，还原成没有语法糖的写法是怎样的啊？<br>即”@my_decorator就相当于前面的greet=my_decorator(greet)语句“，那”@repeat(4)&quot;相当于什么呢？<br>谢谢！","like_count":0},{"had_liked":false,"id":190260,"user_name":"wnz27","can_delete":false,"product_type":"c1","uid":1130122,"ip_address":"","ucode":"BC9ACB6B7C6FD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","comment_is_top":false,"comment_ctime":1584624450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584624450","product_id":100026901,"comment_content":"类装饰器如何传参啊~~~~请教一下","like_count":0},{"had_liked":false,"id":187034,"user_name":"宋阳","can_delete":false,"product_type":"c1","uid":1089885,"ip_address":"","ucode":"4B849D22FCA3A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/a1/5d/f33a1ace.jpg","comment_is_top":false,"comment_ctime":1583996403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583996403","product_id":100026901,"comment_content":"def func_closure():<br>    def get_message(message):<br>        print(&#39;Got a message: {}&#39;.format(message))<br>    return get_message<br><br>send_message = func_closure()<br>send_message(&#39;hello world&#39;)<br>print(send_message.__closure__) ## None<br><br>这个好像不是闭包<br><br>必须是嵌套函数<br>内层嵌套函数必须引用外层嵌套函数变量<br>外层嵌套函数的返回值是内层嵌套函数<br><br>只满足了第一点和第三点<br><br>望指教","like_count":0},{"had_liked":false,"id":180588,"user_name":"Ray","can_delete":false,"product_type":"c1","uid":1253774,"ip_address":"","ucode":"A7059C7D505AA0","user_header":"","comment_is_top":false,"comment_ctime":1582343566,"is_pvip":false,"replies":[{"id":"72040","content":"可以这么理解","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1583891267,"ip_address":"","comment_id":180588,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582343566","product_id":100026901,"comment_content":"老师，类装饰器的那个代码中，example是不是变成了Count类一个对象？<br>我通过type(example)，返回的是class &#39;__main__.Count&#39;","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484724,"discussion_content":"可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583891267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173889,"user_name":"xiong","can_delete":false,"product_type":"c1","uid":1099375,"ip_address":"","ucode":"C1BFD9EF96372F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/6f/ac3003fa.jpg","comment_is_top":false,"comment_ctime":1579759570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579759570","product_id":100026901,"comment_content":"有点像代理模式额","like_count":0},{"had_liked":false,"id":170882,"user_name":"大懒虫","can_delete":false,"product_type":"c1","uid":1440873,"ip_address":"","ucode":"51014C4A7074DA","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/69/02953435.jpg","comment_is_top":false,"comment_ctime":1578748844,"is_pvip":false,"replies":[{"id":"66786","content":"不客气，好好学","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579135594,"ip_address":"","comment_id":170882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578748844","product_id":100026901,"comment_content":"终于彻底理解了装饰器，感谢老师😄","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481150,"discussion_content":"不客气，好好学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579135594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160913,"user_name":"舍予","can_delete":false,"product_type":"c1","uid":1134618,"ip_address":"","ucode":"F333699D14213A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0wXEfsGnCiarxEUEvZz45bFEpSaWL79eK5DfUUbrNwLv6I6WDkMnmhb2fZvm2MtmIoU2yhBz7iaew/132","comment_is_top":false,"comment_ctime":1576059756,"is_pvip":false,"replies":[{"id":"66791","content":"嗯","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579135873,"ip_address":"","comment_id":160913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576059756","product_id":100026901,"comment_content":"老师，装饰器的作用是不是也可以用函数封装来实现？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477531,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579135873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158961,"user_name":"Defensor","can_delete":false,"product_type":"c1","uid":1575714,"ip_address":"","ucode":"BA636359596936","user_header":"https://static001.geekbang.org/account/avatar/00/18/0b/22/a26031d6.jpg","comment_is_top":false,"comment_ctime":1575507288,"is_pvip":false,"replies":[{"id":"66793","content":"如果本身需要返回值，就return，根据实际需要，和装饰器没关系","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579135970,"ip_address":"","comment_id":158961,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575507288","product_id":100026901,"comment_content":"老师 能讲解下warpper函数里的return么 我看前面的案例没有return 但是后面有返回func的有返回func结果的 就有点乱了 如果原函数本身需要返回值呢？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476901,"discussion_content":"如果本身需要返回值，就return，根据实际需要，和装饰器没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579135970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157865,"user_name":"wnz27","can_delete":false,"product_type":"c1","uid":1130122,"ip_address":"","ucode":"BC9ACB6B7C6FD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","comment_is_top":false,"comment_ctime":1575273168,"is_pvip":false,"replies":[{"id":"66795","content":"没明白你的意思，能再重复一遍么？","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579136042,"ip_address":"","comment_id":157865,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1575273168","product_id":100026901,"comment_content":"这里有一个疑问请教老师：<br>import timeimport functools<br>def log_execution_time(func):    <br>    @functools.wraps(func)    <br>    def wrapper(*args, **kwargs):        <br>        start = time.perf_counter()<br>        res = func(*args, **kwargs)<br>        end = time.perf_counter()        <br>        print(&#39;{} took {} ms&#39;.format(func.__name__, (end - start) * 1000))<br>        return res    <br>    return wrapper    <br>@log_execution_time<br>def calculate_similarity(items):<br><br>这里：如果是要测运行时间的话res = func(*args, **kwargs) 这不是相当于直接调用吗？<br>加上返回的，在执行一遍不是相当于每次使用哪个被装饰的函数就都会执行两遍？","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476556,"discussion_content":"没明白你的意思，能再重复一遍么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579136042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130122,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","nickname":"wnz27","note":"","ucode":"BC9ACB6B7C6FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136236,"discussion_content":"没有问题了，是我自己理解错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579136322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130122,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","nickname":"wnz27","note":"","ucode":"BC9ACB6B7C6FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71317,"discussion_content":"自己试了一下返回的并不是被执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575390876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152163,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573895399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573895399","product_id":100026901,"comment_content":"装饰器是函数的函数，在原函数的基础上加入正交功能。","like_count":0},{"had_liked":false,"id":143244,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1571654902,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1571654902","product_id":100026901,"comment_content":"装饰器可以理解为Spring中的AOP、Java里的proxy","like_count":0},{"had_liked":false,"id":139751,"user_name":"扶幽","can_delete":false,"product_type":"c1","uid":1322612,"ip_address":"","ucode":"1400EDFF8970D3","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/74/88c613e0.jpg","comment_is_top":false,"comment_ctime":1570717623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570717623","product_id":100026901,"comment_content":"学到了，干货满满~（~_~）~","like_count":0},{"had_liked":false,"id":138500,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1570282285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570282285","product_id":100026901,"comment_content":"思考题<br>以前没用过装饰器，也没有动力去了解。今天学了，装饰器就是在一个函数上增加新的功能，而不必修改该函数。两个好处，第一是比较清晰简洁，第二是增添的功能可以方便的复用。用处嘛，我在学数据结构学算法的时候写过专门的计时器类(用的c++)，测量算法运行时间。但是那时要在算法开始前begin()，算法结束后end()，然后再人工调用getresult()来得到测量结果并自己输出，有装饰器就不用啦。<br>实例的日志记录那里，计算时间貌似不用乘1000了，直接相减就是正确的秒数了。<br>课程的练习代码: https:&#47;&#47;github.com&#47;zwdnet&#47;PythonPractice","like_count":0},{"had_liked":false,"id":137545,"user_name":"黄毅","can_delete":false,"product_type":"c1","uid":1159363,"ip_address":"","ucode":"201C9FD58CF90B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/c3/e1e2c097.jpg","comment_is_top":false,"comment_ctime":1569772040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569772040","product_id":100026901,"comment_content":"有关repeat例子的疑问，repeat例子前面的装饰器例子中，都是使用被装饰的函数为参数。repeat修饰的不作为参数传给repeat函数了吗？翘盼老师答疑。","like_count":0},{"had_liked":false,"id":131120,"user_name":"missing","can_delete":false,"product_type":"c1","uid":1316598,"ip_address":"","ucode":"3FC438D387779A","user_header":"https://static001.geekbang.org/account/avatar/00/14/16/f6/b864cf41.jpg","comment_is_top":false,"comment_ctime":1567646875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567646875","product_id":100026901,"comment_content":"请问有没一种全局设置：默认所有的函数都会引用我某个装饰器，然后可以配置某些函数不使用该装饰器？","like_count":0},{"had_liked":false,"id":119919,"user_name":"🎈大力.","can_delete":false,"product_type":"c1","uid":1408992,"ip_address":"","ucode":"762887D13A53D5","user_header":"https://static001.geekbang.org/account/avatar/00/15/7f/e0/4ba323bc.jpg","comment_is_top":false,"comment_ctime":1564730017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564730017","product_id":100026901,"comment_content":"当多个装饰器嵌套时执行顺序是从里向外执行, 但是您下面的例子中看起来是由外至内执行的. ","like_count":0},{"had_liked":false,"id":115958,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1563769480,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563769480","product_id":100026901,"comment_content":"https:&#47;&#47;github.com&#47;micheles&#47;decorator<br>这个比官方的装饰器写起来容易多了","like_count":0,"discussions":[{"author":{"id":1204008,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/28/17ed19bc.jpg","nickname":"J","note":"","ucode":"7F1BD7F66F4700","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182419,"discussion_content":"这个把函数和参数放在一起了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582423748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108652,"user_name":"和你一起搬砖的胡大爷","can_delete":false,"product_type":"c1","uid":1008587,"ip_address":"","ucode":"54607F4E17917A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","comment_is_top":false,"comment_ctime":1561821407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561821407","product_id":100026901,"comment_content":"老师，装饰器很类似AOP，但是AOP是代理，代理模式是控制对象访问，装饰器是增强对象能力。python这边怎么理解呢？","like_count":0},{"had_liked":false,"id":106428,"user_name":"TopoInside","can_delete":false,"product_type":"c1","uid":1565643,"ip_address":"","ucode":"50DFE1C440144F","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/cb/b61be297.jpg","comment_is_top":false,"comment_ctime":1561297432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561297432","product_id":100026901,"comment_content":"老师，您讲的例子中原来函数没有输出。如果原函数中有返回值，那么wrapper函数中是否也要return原函数的返回值？这样看来一个装饰器只能针对输出相同的函数？还是说函数的输出也能像*args这样表达成统一格式？","like_count":0},{"had_liked":false,"id":106179,"user_name":"刘磊","can_delete":false,"product_type":"c1","uid":1550747,"ip_address":"","ucode":"2375FE2868C1BE","user_header":"https://static001.geekbang.org/account/avatar/00/17/a9/9b/0c9dd159.jpg","comment_is_top":false,"comment_ctime":1561195994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561195994","product_id":100026901,"comment_content":"输入合理性检查的示例中，@validation_check(input)使用时需要带上参数吧？因为定义的时候带了参数，示例中沒有参数。","like_count":0},{"had_liked":false,"id":106162,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1561192277,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561192277","product_id":100026901,"comment_content":"Python内置的@property装饰器可以把类的方法伪装成属性调用的方式。<br>class Student(object):<br>    def __init__(self, name, score):<br>        self.name = name<br>        self.__score = score<br>    @property<br>    def score(self):<br>        return self.__score<br>    @score.setter<br>    def score(self, score):<br>        if score &lt; 0 or score &gt; 100:<br>            raise ValueError(&#39;invalid score&#39;)<br>        self.__score = score<br><br>1. get方法，用@property装饰;<br>2. set方法，用@score.setter装饰。<br>3. @score.setter是@property装饰后的副产品。<br>4. 如果没有定义set方法，就不能对“属性”赋值，score相当于只读“属性”。<br>执行：<br><br>&gt;&gt;&gt; s = Student(&#39;Bob&#39;, 59)<br>&gt;&gt;&gt; s.score = 60<br>&gt;&gt;&gt; print(s.score)<br>60<br>&gt;&gt;&gt; s.score = 1000<br>Traceback (most recent call last): ... ValueError: invalid score","like_count":0,"discussions":[{"author":{"id":1581705,"avatar":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","nickname":"响雨","note":"","ucode":"C5FB3A3BC68F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392,"discussion_content":"还有一个deleter吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561530105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106075,"user_name":"刘磊","can_delete":false,"product_type":"c1","uid":1550747,"ip_address":"","ucode":"2375FE2868C1BE","user_header":"https://static001.geekbang.org/account/avatar/00/17/a9/9b/0c9dd159.jpg","comment_is_top":false,"comment_ctime":1561166696,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1561166696","product_id":100026901,"comment_content":"def myfunc(message):<br>    print(&#39;Got a message:{}&#39;.format(message))<br>send_message = myfunc<br><br>def main_call(func,message):<br>    print(func(message))<br>​<br>main_call(myfunc,&#39;hello ,how are you&#39;)<br>#输出<br>Got a message:hello ,how are you<br>None<br><br>请问老师，我在练习的时候，得到的输出结果为什么会多出来个None值呢？谢谢","like_count":0,"discussions":[{"author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4697,"discussion_content":"函数没有返回值的话，默认就是None了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565669269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105907,"user_name":"imxintian","can_delete":false,"product_type":"c1","uid":1178908,"ip_address":"","ucode":"0E20BF5E0E7CE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/1c/8245a8d8.jpg","comment_is_top":false,"comment_ctime":1561102637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561102637","product_id":100026901,"comment_content":"老师，类装饰器如果有参数，不应该__init__ 接收参数，而__call__接收func嘛？","like_count":0},{"had_liked":false,"id":105693,"user_name":"Kuzaman","can_delete":false,"product_type":"c1","uid":1166957,"ip_address":"","ucode":"DB60937873CBF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/6d/6de830ef.jpg","comment_is_top":false,"comment_ctime":1561076289,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1561076289","product_id":100026901,"comment_content":"老师，问个本文之外的话题，您大概什么时候会讲解关于log日志的专题呢？","like_count":0},{"had_liked":false,"id":105431,"user_name":"A.Windy","can_delete":false,"product_type":"c1","uid":1128146,"ip_address":"","ucode":"254868B270F26D","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/d2/32d3545a.jpg","comment_is_top":false,"comment_ctime":1560998354,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560998354","product_id":100026901,"comment_content":"在讲带有参数的装饰器时，老师告诉了我们如何使用， 这里有个疑问， greet 函数的message 在被@my_decorator 装饰后<br>my_decorator 的wrapper 函数是如何接收message到这个参数的呢？是python 解释器帮我们做的吗？带参数的装饰器能否像前面例子一样转换为闭包函数的调用？","like_count":0},{"had_liked":false,"id":105291,"user_name":"zengyunda","can_delete":false,"product_type":"c1","uid":1359389,"ip_address":"","ucode":"3F08F16FB92C8E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ic76sMTwXTJYJQglBTHVian3OHibEuvGXuRH5QibvwqVIsUNa8pzRYkmsbXjLp1eacN1vC77EVKe4k5u7RRVFb3dOg/132","comment_is_top":false,"comment_ctime":1560955535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560955535","product_id":100026901,"comment_content":"装饰器也算我的一块心病了，每次去查文档，都能看懂人家的举例和代码，但是实际工作却不会使用，反正就是不知道用到哪个地方，感觉还是没有理解到精髓！","like_count":0},{"had_liked":false,"id":105171,"user_name":"Geek_d848f7","can_delete":false,"product_type":"c1","uid":1524021,"ip_address":"","ucode":"F24BC59B6E9E6B","user_header":"","comment_is_top":false,"comment_ctime":1560932760,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1560932760","product_id":100026901,"comment_content":"是否可以这样理解：函数闭包是函数嵌套的一种特殊情况，而函数装饰器实质是一个闭包<br><br>装饰器用得最多是web服务器，账户验证、权限控制、请求方式判断等","like_count":0,"discussions":[{"author":{"id":1581705,"avatar":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","nickname":"响雨","note":"","ucode":"C5FB3A3BC68F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393,"discussion_content":"嗯嗯，一般是登录验证，权限设计，匿名用户，请求方式等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561530214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104941,"user_name":"维诺妮卡","can_delete":false,"product_type":"c1","uid":1258084,"ip_address":"","ucode":"CBCC12C5DED6BD","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/64/dbfdf210.jpg","comment_is_top":false,"comment_ctime":1560875593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560875593","product_id":100026901,"comment_content":"老师能从装饰器底层实现讲下递归时每层调用都会被装饰的原因吗","like_count":0},{"had_liked":false,"id":104855,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1560856858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560856858","product_id":100026901,"comment_content":"老师，看不太懂这句话，“你会发现，greet() 函数被装饰以后，它的元信息变了。元信息告诉我们“它不再是以前的那个greet（）函数了，而是被wrapper()函数取代了”<br>这个改变了又什么影响呢？能举个例子嘛<br>","like_count":0},{"had_liked":false,"id":104849,"user_name":"庄小P","can_delete":false,"product_type":"c1","uid":1489063,"ip_address":"","ucode":"A71FA01F713790","user_header":"","comment_is_top":false,"comment_ctime":1560855026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560855026","product_id":100026901,"comment_content":"def func_closure():<br>    def get_message(message):<br>        print(&#39;Got a message: {}&#39;.format(message))<br>    return get_message<br><br>send_message = func_closure()<br>send_message(&#39;hello world&#39;)<br>老师，为什么这里send_message = fun_closure就会报错，前面那个send_message = func 不加括号也不会报错呢？？？<br><br><br><br>","like_count":0},{"had_liked":false,"id":104843,"user_name":"Linux命令手册","can_delete":false,"product_type":"c1","uid":1069291,"ip_address":"","ucode":"F80776F9F53337","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/eb/a1a2cf00.jpg","comment_is_top":false,"comment_ctime":1560852848,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1560852848","product_id":100026901,"comment_content":"装饰器一定要return吗？","like_count":0,"discussions":[{"author":{"id":1363634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","nickname":"海盗船长","note":"","ucode":"ECB28BA21A4113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344009,"discussion_content":"内部的wrapper是一定要返回的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611232911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613232,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9d/b0/25463caa.jpg","nickname":"Ｙinh","note":"","ucode":"C99CF4AD90DFE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7250,"discussion_content":"看你实际函数，实际函数有return，那么装饰器就有return","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567429684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104839,"user_name":"John Si","can_delete":false,"product_type":"c1","uid":1526611,"ip_address":"","ucode":"705B90724A4BD4","user_header":"https://static001.geekbang.org/account/avatar/00/17/4b/53/67c08006.jpg","comment_is_top":false,"comment_ctime":1560851502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560851502","product_id":100026901,"comment_content":"老师好，如果没理解错，装饰器就像其名字一样，在不改动其原有功能情况下，调用其他函数去完成某些特定事情，如身份验证等，这跟浏灠器透过安装插件，新增某些功能去完成某些事情的情况相类似，对吗？另外，在类装饰器的例子中，请问在调用该类装饰器时，该类是否会生成一个实例呢？待覆。谢谢!","like_count":0},{"had_liked":false,"id":104783,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1560835885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560835885","product_id":100026901,"comment_content":"老师您好，咨询个问题，类装饰器中的构造函数一定要传func参数吗？如何不传会怎样？","like_count":0},{"had_liked":false,"id":104730,"user_name":"GentleCP","can_delete":false,"product_type":"c1","uid":1525440,"ip_address":"","ucode":"BB1EE3720D44F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/c0/01292b08.jpg","comment_is_top":false,"comment_ctime":1560823132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560823132","product_id":100026901,"comment_content":"装饰器的本质是在不修改原始功能的前提下添加新的功能，如果不用@functools.wraps(func)，虽然元信息被改变，但是其功能并未修改，应该没有什么影响。请问老师，那这样是否还有必要添加@functools.wraps(func)？","like_count":0},{"had_liked":false,"id":104684,"user_name":"阿丽","can_delete":false,"product_type":"c1","uid":1170970,"ip_address":"","ucode":"C01D32E7165302","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erJFlHhylrbLANtehiaX50wgVa2Z1ibQAdLpgyW4gCpEyOKEI9bPNZZBiabrP2oCleZWc2KKyKADz8tg/132","comment_is_top":false,"comment_ctime":1560818203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560818203","product_id":100026901,"comment_content":"老师你好，如果不使用装饰器，还有哪些登录认证方式啊？","like_count":0},{"had_liked":false,"id":104657,"user_name":"Geek_严禁超员","can_delete":false,"product_type":"c1","uid":1543751,"ip_address":"","ucode":"47C671D062A657","user_header":"https://static001.geekbang.org/account/avatar/00/17/8e/47/a7b3fac7.jpg","comment_is_top":false,"comment_ctime":1560815497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560815497","product_id":100026901,"comment_content":"为什么函数赋给变量的时候有时候加括号有时候不能加括号啊？比如第一点和第四点……谢谢老师解惑","like_count":0},{"had_liked":false,"id":104644,"user_name":"mccrms","can_delete":false,"product_type":"c1","uid":1232528,"ip_address":"","ucode":"EE65C5B2012A0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/90/fafbbe0b.jpg","comment_is_top":false,"comment_ctime":1560812882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560812882","product_id":100026901,"comment_content":"return func(*args, **kwargs) #执行函数 post_comment()<br><br>文中身份认证实例中的 return 是否有必要，加与不加的区别是什么呢","like_count":0},{"had_liked":false,"id":104619,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1560786041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560786041","product_id":100026901,"comment_content":"这和装饰器设计模式是一个道理吗？还是这就是装饰器设计模式？","like_count":0},{"had_liked":false,"id":104576,"user_name":"puhan","can_delete":false,"product_type":"c1","uid":1529235,"ip_address":"","ucode":"50746E9A4990A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icniaGmw8xiboxib5xa1RSNvRDX1yVQTrcSqVOlJPibt0A6SM7EnFTHa6ib0YQKSUPqtx7wVksxZZXK4huUpCqrKjT1w/132","comment_is_top":false,"comment_ctime":1560778342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560778342","product_id":100026901,"comment_content":"（一）装饰器的作用：1、为已经存在的对象添加额外的功能<br>              2、提高了程序的可重复利用性，增加了程序的可读性<br><br>（二）why:   python的函数能像普通的对象一样作为参数传递给其他函数<br>       。。。上面函数核心回顾的内容<br>       <br>（三）什么是装饰器？<br>     通过装饰器函数，来修改原函数的一些功能，使得原函数不需要修改<br>     <br>（四）应用：<br><br>      身份认证<br>      日志记录<br>      输入合理性检查<br>      缓存<br>","like_count":0},{"had_liked":false,"id":104567,"user_name":"huizhenhe","can_delete":false,"product_type":"c1","uid":1491324,"ip_address":"","ucode":"86A4BA494610D7","user_header":"https://static001.geekbang.org/account/avatar/00/16/c1/7c/e885d8d0.jpg","comment_is_top":false,"comment_ctime":1560777324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560777324","product_id":100026901,"comment_content":"老师， num_calls这个变量为什么是类变量，不是具体的实例变量啊？这个我不理解","like_count":0},{"had_liked":false,"id":104462,"user_name":"Geek_974cd5","can_delete":false,"product_type":"c1","uid":1528654,"ip_address":"","ucode":"5A6BC28919AD4D","user_header":"","comment_is_top":false,"comment_ctime":1560758737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560758737","product_id":100026901,"comment_content":"终于体验到python的优雅了！感觉用C++也应该可以实现。","like_count":0},{"had_liked":false,"id":104452,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1560757197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560757197","product_id":100026901,"comment_content":"我是个新手😄，装饰器的使用的话，之前在一个Django项目中限制访问的时候有用到。","like_count":0},{"had_liked":false,"id":104431,"user_name":"hallo128","can_delete":false,"product_type":"c1","uid":1212044,"ip_address":"","ucode":"3921D6E11CFCB1","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/8c/f029535a.jpg","comment_is_top":false,"comment_ctime":1560752189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560752189","product_id":100026901,"comment_content":"终于对装饰器有点感觉了，之前都不知道它有什么作用。<br>现在知道它的作用就是，不改变原函数的编写的情况下，加入一些可重复利用的附加功能。这比你一个函数一个函数的都去添加功能，要合理且高效。","like_count":0},{"had_liked":false,"id":104430,"user_name":"三水","can_delete":false,"product_type":"c1","uid":1017781,"ip_address":"","ucode":"11837CF38FD9BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/b5/dd0353f4.jpg","comment_is_top":false,"comment_ctime":1560752127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560752127","product_id":100026901,"comment_content":"明白了，谢谢老师！我还需要大量的写代码去体会。","like_count":0},{"had_liked":false,"id":104383,"user_name":"Feng","can_delete":false,"product_type":"c1","uid":1015205,"ip_address":"","ucode":"42DB60B7BF69D0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/a5/930c9103.jpg","comment_is_top":false,"comment_ctime":1560741545,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1560741545","product_id":100026901,"comment_content":"增加functools.wrap调用的也不会是原函数了，有没有场景同一个函数的两次调用，一次使用装饰器，一次不需要？","like_count":0},{"had_liked":false,"id":104358,"user_name":"soda_soda","can_delete":false,"product_type":"c1","uid":1545813,"ip_address":"","ucode":"2D3FDD31215F8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZbpP8Of9zVbDeGsWTU0brxXOeEpSu5ULQdtPIMQibWtHR9JHyhXtAFVynUI2LbfuPSPwYCqTrptg/132","comment_is_top":false,"comment_ctime":1560736359,"is_pvip":false,"replies":[{"id":"37809","content":"哪里不懂？","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1560751904,"ip_address":"","comment_id":104358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560736359","product_id":100026901,"comment_content":"有点难啊 不是很懂","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454241,"discussion_content":"哪里不懂？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560751904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}