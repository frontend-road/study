{"id":208100,"title":"21 | 队列与单调队列：滑动区间最大值","content":"<p>你好，我是胡光，欢迎回来。</p><p>上节课呢，我们学习了二分查找的基本思想，以及明确了二分答案所使用的问题模型，你会发现，正因为问题具有单调性，我们才可以使用二分查找算法对问题求解过程进行加速。</p><p>今天呢，我将带你学习一种性质有趣、简单且高效的数据结构，叫做：单调队列。学习这个数据结构的时候呢，我们还是要强调一下那句话：数据结构，就是定义一种性质，并且维护这种性质。</p><h2>今日任务</h2><p>在正式开始学习之前呢，先来看一下今天这 10 分钟的任务吧。</p><p>滑动区间最大值，就是指在固定区间长度的前提下，在一个序列上，从前到后滑动这个区间窗口，每次窗口内部的最大值，就组成了滑动区间最大值。</p><p>例如，给你如下包含 8 个数字的序列，区间长度设置为 3：</p><pre><code>[6 4 2] 10 3 8 5 9 -&gt; 6\n6 [4 2 10] 3 8 5 9 -&gt; 10\n6 4 [2 10 3] 8 5 9 -&gt; 10\n6 4 2 [10 3 8] 5 9 -&gt; 10\n6 4 2 10 [3 8 5] 9 -&gt; 8\n6 4 2 10 3 [8 5 9] -&gt; 9\n</code></pre><p>滑动区间从数字6开始出发，每次向右移动一个数字，同时把左边的一个数字丢出去，保持区间长度为3，最后移动到数字9停止。可以看到，这个序列共包含8个数字，所以最后形成的滑动区间最大值共有6个，依次是 6、10、10、10、8、9。</p><p>面对这个问题，你很容易采用 $O(nm)$ 的算法来完成，n 是区间长度，m 是窗口长度，就是枚举区间的终止位置，每次扫描区间内部，获得最大值。</p><!-- [[[read_end]]] --><p>而我今天要给你讲的这种方法，能让时间复杂度降低到 $O(n)$，你可以认为是对原序列扫描一遍，就能得到问题的答案。这究竟是什么样神奇的方法呢？带着这份好奇，我们开始今天的课程吧！</p><h2>必知必会，查缺补漏</h2><p>想要完成今天这个任务呢，你必须掌握今天我将要教给你的一种新的结构，就是：单调队列。</p><h4>1.初识队列</h4><p>首先让我们来认识一下最简单的队列结构，举一个生活中最常见的例子：火车站排队买票，你应该都经历过吧？售票员坐在窗口里面，每次只能服务队列中排在最前面的那个人，每当有人买完票，都会从队列的头部离开，后面的人上前一步，接替离开的人向售票员购票，当有其他人想要来买票的时候，必须从队列的末尾开始排队。这种结构就是典型的队列结构。</p><p>我们计算机中的队列，和买票的这个队列是一样的，先到先得，先入先出，每个元素都是从队列尾部入队，在头部被处理完后再出队。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/12/31/1223c53b5bd1e0e4d2bc50f18244ce31.jpg?wh=2625*900\" alt=\"\" title=\"队列结构示意图\"></p><p>如图所示，队列就像一个数组一样，每个元素从数组尾部进入数组，从头部出数组。这种结构很简单，你应该很容易理解它的工作顺序。任何事物，往往就是看起来越简单，想要掌握其真谛就越难。就像是我给你一把锤子，你知道这东西大概可以干什么，而我要是给你一块铁，你可能就懵了。其实队列就是这种表面简单，可作用却不简单的数据结构。</p><p>想要理解队列，你就必须理解一句话，叫做：计算机是很专注的。什么意思呢，我们回忆一下之前讲到的链表判环，作为人类的你和我，可以一眼就看出来链表中是否有环。而对于计算机程序来说，只有指针指向的地方，才是它能看得到的地方。所以，我们才费了很大的力气，为计算机设计了一个快慢指针的算法，来判断链表中是否有环。</p><p>实际上，当我们在实现程序的时候，我们不仅要把数据存储在计算机中，我们还要规定计算机处理这些数据的顺序。想一想，我们之前设计的所有的循环程序，不就是在规定计算机的处理顺序么？</p><p>而今天我们学习的这个队列，你可以把其中的元素，看成是计算机要处理的一个个的任务，那么队列结构，其实就是规定了这些任务的处理顺序，程序只从队列头部取任务，先到先处理，后到的任务，需要在队列后面排着，直到轮到它，这样就可以把计算机的专注与高效发挥到极致。</p><p>学习编程，与其说是将我们的思维转换成代码，不如说是将我们的思维，锻炼成计算机的思维。注意，计算机的处理逻辑，是有顺序的。今天，我们所说的队列，就代表了一种顺序。后面，我们还会介绍另外一种顺序的代表，就是“栈”，到时候我再详细讲解。</p><h4>2.队列升级：单调队列</h4><p>讲完了最简单的队列以后，下面就来让我们学习一种队列的升级产物：单调队列。在正式讲解单调队列之前，让我们来讲一个现实中的单调队列的例子。</p><p>假设你的学长张三，作为乒乓球体育生，很幸运地进了高中学校的校队。学校规定当前校队中，能力最强的人，才有可能代表学校去参加比赛。那么在校的这三年，张三都有机会代表学校参加国家赛。</p><p>高一的时候张三战斗力 85，比他能力强的有两个人，一个是高二的孔令辉，战斗力 93，一个是高三的刘国梁，战斗力 98。那么此时，能代表学校参加比赛的只有最高战力的刘国梁。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/88/440a0401bc65a31d9002a77163abad88.jpg?wh=2293*951\" alt=\"\"></p><p>过了一年，张三上了高二，原高二的孔令辉上了高三，刘国梁毕业了，如果张三的战力比后面上来的新生要强，那么他再等一年，有可能在高三的时候代表学校参赛。然而这时作为高一乒乓球体育生的你也进入了校队，战斗力 88。悲剧出现了，因为只要你在学校，张三永远不可能参加国家赛了。<br>\n<img src=\"https://static001.geekbang.org/resource/image/c5/4b/c51f381f501c6d0b18b493fafd11a54b.jpg?wh=2283*944\" alt=\"\"><br>\n这个时候你欣喜若狂，因为再熬一年，如果新学弟战斗力没你高的话，你就能代表学校去参加国家赛了。很快一年又过去了，你终于熬到了高二，同时也迎来了一名新学弟张继科，战斗力 90。悲剧再次上演，你和张三一样，也失去了代表学校参赛的机会了，此时你的心情，是不是五味杂陈？<br>\n<img src=\"https://static001.geekbang.org/resource/image/66/62/66a3931ad85a5386795847a92e893562.jpg?wh=2265*921\" alt=\"\"><br>\n上面的几个校队名单呢，就是我们所谓的单调队列，如果把学生从高年级到低年级排列，随着时间的流逝，这本身就是一个队列结构，高年级的同学从队列头部毕业，低年级的同学从队列尾部进入。</p><p>而这个校队名单，记录的是最有可能代表学校参加比赛队员的名字。刘国梁毕业了，最有可能接班的是孔令辉，孔令辉毕业了，最有可能接班的是张三。而当你进入队列的那一刻，张三尽管比你入队早，但战力没你高，所以张三就永远失去了机会。后来张继科进入队列，你遭遇了和张三一样的悲剧。</p><p>如果你要是仔细观察校队名单，你会发现校队名单上，永远是按照能力值的从高到低，来记录学校里面的种子选手。这个名单，既有队列的样子，又有单调的性质，所以称为“单调队列”。</p><p>单调队列的作用，就是用来维护在<strong>队列处理顺序</strong>中的区间最大值。就像上面所说的校队名单，维护的就是区间长度为3时候的最大值。当一个新的元素入队的时候，它会把其前面违反单调性的元素，都从队列中踢掉，就像张继科的入学，把你踢出了校队名单，最终他成为了队列里的最大值。</p><h2>滑动区间最大值</h2><p>让我们回到开始的求“滑动窗口最大值”的任务。其实，滑动窗口每次向后滑动一位，会有一个元素从队首出队，同时也会有一个元素从队尾入队，所以滑动窗口的过程，就遵照了我们所谓的队列处理顺序。</p><p>而这个任务，本身就是求区间最大值的，所以也符合了单调队列应用的场景：维护在<strong>队列处理顺序</strong>中的区间最大值。下面呢，我们就来看一下具体代码：</p><pre><code>#define MAX_N 1000\nint q[MAX_N + 5], head, tail;\nvoid interval_max_number(int *a, int n, int m) {\n    head = tail = 0;\n    for (int i = 0; i &lt; n; i++) {\n        // a[i] 入队，将违反单调性的从队列 q 中踢出\n        while (head &lt; tail &amp;&amp; a[q[tail - 1]] &lt; a[i]) tail--;\n        q[tail++] = i; // i 入队\n        // 判断队列头部元素是否出了窗口范围\n        if (i - m == q[head]) head++;\n        // 输出区间内最大值\n        if (i + 1 &gt;= m) {\n            printf(&quot;interval(%d, %d)&quot;, i - m + 1, i);\n            printf(&quot; = %d\\n&quot;, a[q[head]]);\n        }\n    }\n    return ;\n}\n</code></pre><p>如代码所示，interval_max_number 函数，传入三个参数，数组首地址 a，元素数量 n 以及 区间长度 m。代码中的 q 数组，后续的作用就是模拟单调队列，head 与 tail 代表了队列的头尾下标，这里我们采用左闭右开式的表示方法，也就是 head 和 tail 所指示的区间范围内，包含 head 所指位置，但不包含 tail 所指位置。</p><p>函数内部，依次处理数组中的每个元素，每次处理相应元素的时候，涉及到两个过程：</p><ul>\n<li>第一个过程，是将当前元素入队。在入队之前，将队列尾部违反单调性的元素都从队列中踢出，这个就是第 7 行 while 过程的作用，之后就是将编号 i 入队即可。这里注意，单调队列里面，存储的是 a 数组的下标，而不是 a 数组的值。其实存储了下标，我们就可以索引到值，而在上一节二分查找的课里面，我们也见识过了，要是存储了值，想要反向索引下标是比较困难的。</li>\n<li>第二个过程呢，就是判断单调队列头部的元素是否超出了窗口范围，也就是前面我们例子中你的学长毕业的过程，如果元素下标已经超出了窗口范围，就将队列头部元素出队。</li>\n</ul><p>这样我们就可以保证，我们每次输出的，就都是滑动窗口内部的区间最大值了。</p><h2>课程小结</h2><p>以上就是我们今天要学习的单调队列的内容，关于单调队列的知识，你在理解其处理过程的时候，更应该记住单调队列应用的场景：<strong>就是维护队列处理顺序中的区间最大值</strong>。</p><p>这个里面，需要重点强调一个<strong>队列处理顺序</strong> 。也就是说，如果你可以把一个问题的求解顺序，抽象成队列求解顺序，并且在这个过程中，你还需要维护区间最大值，那么翻出“单调队列”，准能帮助你大幅度提升处理速度！而单调队列，无论是入队，还是出队，操作完以后，一定要保证队列内部满足单调性，这就是开头我们说的：定义一种性质，并且维护这种性质。单调队列，维护的就是单调性。</p><p>最后，我们来简单说一下单调队列处理单个元素的平均时间复杂度为什么是 $O(1)$ 的。假设我们要处理 n 个元素，从整体上来看，每个元素会入队列 1 次，出队列最多也是 1 次，那么n 个元素的总操作次数不会超过 $2 \\times n$ 次，平均到一个元素上就是 2 次，也就是常数次，记作 $O(1)$ 时间复杂度。由此得知，处理 n 个元素的总时间复杂度，就是 $O(n)$。</p><p>今天没有思考题，因为这节课的内容只是作为一个铺垫，下节课关于“栈”的知识才是重头戏。我也希望你对这节课的内容认真学习体会，可以的话，在留言区说说你的看法和思考。</p><p>好了，单调队列的知识，就讲到这里了，我是胡光，我们下期见。</p>","neighbors":{"left":{"article_title":"20 | 二分查找：提升程序的查找效率","id":206937},"right":{"article_title":"22 | 栈与单调栈：最大矩形面积","id":209084}},"comments":[{"had_liked":false,"id":252303,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1602229223,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5897196519","product_id":100043901,"comment_content":"茶艺师学编程<br><br>1、“数据结构，就是定义一种结构，并且维护这个结构。”这句话值得好好品味。<br>2、初看老师的给的代码，我是蒙的，为什么不是直接的a[n]而是要a[q[n]]，后来才回过神来，例子中的的q[n]是坐标轴，区间滑动就是在它上面进行的，a[q[n]]才这个轴的值。这里可以打个比方，就是我要到某青年旅馆找我的朋友a[q[n]]，朋友给了我他的房间号（q[n])。我比对了n个房间号，终于找到q[n]房号，这才敲门进屋，看见我的朋友a[q[n]]，而不是没每到一个房间前就踹门而进看看里面是什么人。<br><br>文中例子的完整可行代码如下：<br><br>#include &lt;stdio.h&gt;<br>#define MAX_N 1000<br>int q[MAX_N + 5], head, tail;<br>void interval_max_number(int *a, int n, int m){<br>\thead = tail = 0;<br>\tfor (int i = 0; i &lt; n; i++){<br>\t\twhile (head &lt; tail &amp;&amp; a[q[tail - 1]] &lt; a[i])tail--;<br>\t\tq[tail++] = i;<br>\t\tif (i - m == q[head])head++;<br>\t\tif(i + 1 &gt;= m){<br>\t\t\tprintf(&quot;interval(%d, %d)&quot;, i - m + 1, i);<br>\t\t\tprintf(&quot; = %d\\n&quot;, a[q[head]]);<br>\t\t}<br>\t}<br>\treturn ;<br>} <br><br>int main(){<br>\tint a[8] = {6, 4, 2, 10, 3, 8, 5, 9};<br>\tint n = 8;<br>\tint m = 3;<br>\tinterval_max_number(a, n, m);<br>\treturn 0 ;<br>}","like_count":1},{"had_liked":false,"id":185526,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1583599630,"is_pvip":false,"replies":[{"id":"71713","content":"你好，听了你的情况，我对你的判断是，你的理论知识应该是很扎实的，只是缺少实践经验，建议如下：<br>1、平时多在 Linux 系统下学习和工作，可以选择 CentOS 或者 Ubuntu 均可<br>2、试着使用 github 上传自己用 python 封装的机器学习模型算法<br>3、如果有条件，尽量的在分布式环境下跑跑算法，课外有时间的话，可以读一读分布式计算与并行计算方面的东西。<br><br>只能给你如上建议了，仅供参考。","user_name":"作者回复","comment_id":185526,"uid":"1374625","ip_address":"","utype":1,"ctime":1583660457,"user_name_real":"胡炜燚"}],"discussion_count":1,"race_medal":0,"score":"5878566926","product_id":100043901,"comment_content":"老师，我目前在北京某985读书，平时实验室做得机器学习，大部分代码就是简单得把矩阵运算翻译成matlab和python，但感觉除了matlab其他得编程语言都写得很业余，想来是自己非科班不够努力，同时其他语言对计算得封装是不如matlab完善的。但应该什么样的训练方法可以快速提高呢？本科偏数学，毕业后想去大厂面试（机器学习&amp;深度学习）算法岗，大概还有5年的硕博学习时间，除了数学上的持续学习，（计算机科班培养计划这边学习了geek的深入理解计算机原理，在啃推荐的那本《深入理解计算机系统》,也在和这门课同时学习geek的数据结构与算法之美，看懂容易，自己上手就有点难度了，基本上跟着抄一边）计算机科班的东西我应该主要补一下哪些内容呢?有什么好的学习路径的推荐和学习建议吗？希望老师能指点一下，万分感谢！","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486395,"discussion_content":"你好，听了你的情况，我对你的判断是，你的理论知识应该是很扎实的，只是缺少实践经验，建议如下：\n1、平时多在 Linux 系统下学习和工作，可以选择 CentOS 或者 Ubuntu 均可\n2、试着使用 github 上传自己用 python 封装的机器学习模型算法\n3、如果有条件，尽量的在分布式环境下跑跑算法，课外有时间的话，可以读一读分布式计算与并行计算方面的东西。\n\n只能给你如上建议了，仅供参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583660457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253700,"user_name":"doge","can_delete":false,"product_type":"c1","uid":1593251,"ip_address":"","ucode":"9E2D4C8F9B4CBC","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","comment_is_top":false,"comment_ctime":1602835485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602835485","product_id":100043901,"comment_content":"在这个最大值单调队列维护的过程中有2个点：<br>1、元素在区间最大；<br>2、元素是否已经过期。<br>最开始直接在单调队列存数值本身，结果发现判断过期还需要额外的空间<br>后面反应过来来用索引既能获得数值也能判断过期<br><br>这个是我在思维上的一个槛，不知道啥时候才能自然跨过这个问题","like_count":0},{"had_liked":false,"id":234535,"user_name":"Geek_79bb26","can_delete":false,"product_type":"c1","uid":2056095,"ip_address":"","ucode":"265AB8892DB087","user_header":"","comment_is_top":false,"comment_ctime":1594715297,"is_pvip":false,"replies":[{"id":"88436","content":"首先理解单调队列，你要先忽略掉底层实现。单调队列中，就是维护元素某个维度上的单调性。不是维护序号的单调性，因为序号一定是单调出现的，不需要维护，你想想这个逻辑。","user_name":"作者回复","comment_id":234535,"uid":"1374625","ip_address":"","utype":1,"ctime":1596526122,"user_name_real":"胡炜燚"}],"discussion_count":1,"race_medal":0,"score":"1594715297","product_id":100043901,"comment_content":"老师好，我还是没理解单调数列里单调性的概念，比如老师给的例程，q数组里应该存储的是滑动窗口中a数组最大值对应的序号值，以6 4 2] 10 3 8 5 9，应该是0，3，5，7（序号），那么q里这个数组单调性体现在哪儿呢？只能是滑动窗口值是单调的。理解力不好，谢谢老师","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501416,"discussion_content":"首先理解单调队列，你要先忽略掉底层实现。单调队列中，就是维护元素某个维度上的单调性。不是维护序号的单调性，因为序号一定是单调出现的，不需要维护，你想想这个逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596526122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207511,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1587096969,"is_pvip":false,"replies":[{"id":"77526","content":"注重学习计算机问题的处理顺序。这是第一步，代表了计算机的思考顺序。就像栈和队列，以及之前所学习的链表，其实都代表了按照某种顺序处理问题的思想。","user_name":"作者回复","comment_id":207511,"uid":"1374625","ip_address":"","utype":1,"ctime":1587117607,"user_name_real":"胡炜燚"}],"discussion_count":1,"race_medal":1,"score":"1587096969","product_id":100043901,"comment_content":"老师讲的算法用数学语言去理解感觉讲的太到位了，很好理解，但是再去转换成机器思维好像就不知道如何表达了……听了老师今天的课感觉在入门编程之前应该先再去学学入门前的入门课，比如数据结构，基础算法，组成原理，微积分、离散数学等等；感觉真是正如高德纳大师——冯诺依曼之后最伟大的计算机科学家说的如果连《计算机程序设计艺术》的卷一都学不懂干脆就别当程序员了。另外高德纳大师说的“只要不是对计算机只有一时兴趣的人，都应该学好机器语言，这是计算机的基础。”这个说法正对上了和胡光老师说的“学习编程，与其说是将我们的思维转换成代码，不如说是将我们的思维，锻炼成计算机的思维。”胡老师和高德纳老师的这个训练机器思维如出一辙呀！那么问题来了，如和才能用正确的姿势学好那天书一样的机器语言呢？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492154,"discussion_content":"注重学习计算机问题的处理顺序。这是第一步，代表了计算机的思考顺序。就像栈和队列，以及之前所学习的链表，其实都代表了按照某种顺序处理问题的思想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587117607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184623,"user_name":"🤪HappyJoo","can_delete":false,"product_type":"c1","uid":1234591,"ip_address":"","ucode":"96E1858F06BABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","comment_is_top":false,"comment_ctime":1583373291,"is_pvip":false,"replies":[{"id":"71443","content":"不是你的错误，你的是对的！是我代码的问题，队列中最后一个元素应该是，q[tail - 1]，最近疫情，都把我在家呆傻了。-_-||| sorry","user_name":"作者回复","comment_id":184623,"uid":"1374625","ip_address":"","utype":1,"ctime":1583410884,"user_name_real":"胡炜燚"}],"discussion_count":2,"race_medal":0,"score":"1583373291","product_id":100043901,"comment_content":"老师不好意思，我知道我代码出错的概率大很多很多：<br>输入：nums = [1,3,-1,-3,5,3,6,7], n = 8, m = 3<br>错误输出：[3, 3, 5, 3, 6, 7] <br>正确输出：[3, 3, 5, 5, 6, 7] <br>第四项不知道为啥错了，是copy您的代码然后输出的，不知道是不是您的代码哪里写错了。当然，更大可能是我的代码写错了（笑哭）。看了两个多小时了呀，都看不懂这段代码，我是不是太钻牛角尖了（笑哭）。<br>https:&#47;&#47;github.com&#47;HappyJoo&#47;CLearningScript&#47;blob&#47;master&#47;Heap&#47;239_Sliding_window_maximum.cpp","like_count":1,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486071,"discussion_content":"不是你的错误，你的是对的！是我代码的问题，队列中最后一个元素应该是，q[tail - 1]，最近疫情，都把我在家呆傻了。-_-||| sorry","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583410884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197807,"discussion_content":"哈哈哈，没事没事，不过我也真是死脑筋，看了两小时，下次应该先看一下结果对不对︿(￣︶￣)︿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583450540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184575,"user_name":"🤪HappyJoo","can_delete":false,"product_type":"c1","uid":1234591,"ip_address":"","ucode":"96E1858F06BABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","comment_is_top":false,"comment_ctime":1583343954,"is_pvip":false,"replies":[{"id":"71447","content":"你的目标是啥呢？","user_name":"作者回复","comment_id":184575,"uid":"1374625","ip_address":"","utype":1,"ctime":1583411122,"user_name_real":"胡炜燚"}],"discussion_count":12,"race_medal":0,"score":"1583343954","product_id":100043901,"comment_content":"老师你好啊~我现在不知道要看啥，c专家与编程好像还早了点，课程其他内容虽然还没有完全消化，但是也差不多了，有点不知道应该干什么，去leetcode刷题吗？还是看一些例如C与指针，啃一下大部头？还是去看看《数据结构与算法之美》，或者《深入了解计算机原理》，或者《编译原理之美》？又或者去看看python？有点不知道要走哪个方向，迷茫~","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486058,"discussion_content":"你的目标是啥呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583411122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593251,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","nickname":"doge","note":"","ucode":"9E2D4C8F9B4CBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200833,"discussion_content":"这段代码我觉得主要是要搞明白伪队列数组head里存的是滑动窗口中最大数的索引，超窗口的从队列头出去，比正要进窗的小的要从队列尾出，这样就维护了head指向有效的最大值的特性，这是我的理解😊！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583728293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1819574,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c3/b6/7483c3b7.jpg","nickname":"淡蓝色","note":"","ucode":"D35A1B5647E227","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219176,"discussion_content":"不知道你选好方向了没有a😉 加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585741753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1819574,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/c3/b6/7483c3b7.jpg","nickname":"淡蓝色","note":"","ucode":"D35A1B5647E227","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229521,"discussion_content":"谢谢，没有哈哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586660432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219176,"ip_address":""},"score":229521,"extra":""}]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198089,"discussion_content":"那要不，就当个全栈工程师，虽然不是真的全能，但听起来就很牛掰！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583470299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197808,"discussion_content":"简单的目标：赚更多的钱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583450592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200052,"discussion_content":"赚钱不是目标，是做好事情之后的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583651931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":197808,"ip_address":""},"score":200052,"extra":""}]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197610,"discussion_content":"我现在比较迷茫，也是因为我不知道我目标是啥，前端，后端，数据库，数据分析，好像很多方向，所以不知道应该着重那个方向。只是想找个更好的工作，有更好的发展前景，能提升自己的能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583422720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686477,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","nickname":"Cache","note":"","ucode":"B2DAC13FC4EE7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197149,"discussion_content":"学c，先学一两个月，重复看，我认为c是贯穿整个编程语言的，很有必要学好它。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583409764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196768,"discussion_content":"解题的逻辑是懂得，但是就是代码逻辑看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583371947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200053,"discussion_content":"学完这门课，你可以去学习下Python\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583651969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196768,"ip_address":""},"score":200053,"extra":""}]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196767,"discussion_content":"好的我可能在欺骗自己，刚刚花了两个小时看这一节的这段代码，还没有完全搞懂。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583371918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}