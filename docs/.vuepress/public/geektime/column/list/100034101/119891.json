{"id":119891,"title":"03 | 语法分析（一）：纯手工打造公式计算器","content":"<p>我想你应该知道，公式是Excel电子表格软件的灵魂和核心。除此之外，在HR软件中，可以用公式自定义工资。而且，如果你要开发一款通用报表软件，也会大量用到自定义公式来计算报表上显示的数据。总而言之，很多高级一点儿的软件，都会用到自定义公式功能。</p><p>既然公式功能如此常见和重要，我们不妨实现一个公式计算器，给自己的软件添加自定义公式功能吧！</p><p>本节课将继续“手工打造”之旅，让你纯手工实现一个公式计算器，借此掌握<strong>语法分析的原理</strong>和<strong>递归下降算法（Recursive Descent Parsing），<strong>并初步了解</strong>上下文无关文法（Context-free Grammar，CFG）。</strong></p><p>我所举例的公式计算器支持加减乘除算术运算，比如支持“2 + 3 * 5”的运算。</p><p>在学习语法分析时，我们习惯把上面的公式称为表达式。这个表达式看上去很简单，但你能借此学到很多语法分析的原理，例如左递归、优先级和结合性等问题。</p><p>当然了，要实现上面的表达式，你必须能分析它的语法。不过在此之前，我想先带你解析一下变量声明语句的语法，以便让你循序渐进地掌握语法分析。</p><h2>解析变量声明语句：理解“下降”的含义</h2><p>在“<a href=\"https://time.geekbang.org/column/article/118132\">01 | 理解代码：编译器的前端技术</a>”里，我提到语法分析的结果是生成AST。算法分为自顶向下和自底向上算法，其中，递归下降算法是一种常见的自顶向下算法。</p><!-- [[[read_end]]] --><p>与此同时，我给出了一个简单的代码示例，也针对“int age = 45”这个语句，画了一个语法分析算法的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/16/cbf2b953cb84ef30b154470804262c16.jpg?wh=1142*558\" alt=\"\"></p><p>我们首先把变量声明语句的规则，用形式化的方法表达一下。它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。在语法解析的过程中，左边会被右边替代。如果替代之后还有非终结符，那么继续这个替代过程，直到最后全部都是终结符（Terminal），也就是Token。只有终结符才可以成为AST的叶子节点。这个过程，也叫做推导（Derivation）过程：</p><pre><code>intDeclaration : Int Identifier ('=' additiveExpression)?;\n</code></pre><p>你可以看到，int类型变量的声明，需要有一个Int型的Token，加一个变量标识符，后面跟一个可选的赋值表达式。我们把上面的文法翻译成程序语句，伪代码如下：</p><pre><code>//伪代码\nMatchIntDeclare(){\n  MatchToken(Int)；        //匹配Int关键字\n  MatchIdentifier();       //匹配标识符\n  MatchToken(equal);       //匹配等号\n  MatchExpression();       //匹配表达式\n}\n</code></pre><p>实际代码在SimpleCalculator.java类的IntDeclare()方法中：</p><pre><code>SimpleASTNode node = null;\nToken token = tokens.peek();    //预读\nif (token != null &amp;&amp; token.getType() == TokenType.Int) {   //匹配Int\n    token = tokens.read();      //消耗掉int\n    if (tokens.peek().getType() == TokenType.Identifier) { //匹配标识符\n        token = tokens.read();  //消耗掉标识符\n        //创建当前节点，并把变量名记到AST节点的文本值中，\n        //这里新建一个变量子节点也是可以的\n        node = new SimpleASTNode(ASTNodeType.IntDeclaration, token.getText());\n        token = tokens.peek();  //预读\n        if (token != null &amp;&amp; token.getType() == TokenType.Assignment) {\n            tokens.read();      //消耗掉等号\n            SimpleASTNode child = additive(tokens);  //匹配一个表达式\n            if (child == null) {\n                throw new Exception(&quot;invalide variable initialization, expecting an expression&quot;);\n            }\n            else{\n                node.addChild(child);\n            }\n        }\n    } else {\n        throw new Exception(&quot;variable name expected&quot;);\n    }\n}\n</code></pre><p>直白地描述一下上面的算法：</p><blockquote>\n<p>解析变量声明语句时，我先看第一个Token是不是int。如果是，那我创建一个AST节点，记下int后面的变量名称，然后再看后面是不是跟了初始化部分，也就是等号加一个表达式。我们检查一下有没有等号，有的话，接着再匹配一个表达式。</p>\n</blockquote><p>我们通常会对产生式的每个部分建立一个子节点，比如变量声明语句会建立四个子节点，分别是int关键字、标识符、等号和表达式。后面的工具就是这样严格生成AST的。但是我这里做了简化，只生成了一个子节点，就是表达式子节点。变量名称记到ASTNode的文本值里去了，其他两个子节点没有提供额外的信息，就直接丢弃了。</p><p>另外，从上面的代码中我们看到，程序是从一个Token的流中顺序读取。代码中的peek()方法是预读，只是读取下一个Token，但并不把它从Token流中移除。在代码中，我们用peek()方法可以预先看一下下一个Token是否是等号，从而知道后面跟着的是不是一个表达式。而read()方法会从Token流中移除，下一个Token变成了当前的Token。</p><p>这里需要注意的是，通过peek()方法来预读，实际上是对代码的优化，这有点儿预测的意味。我们后面会讲带有预测的自顶向下算法，它能减少回溯的次数。</p><p>我们把解析变量声明语句和表达式的算法分别写成函数。在语法分析的时候，调用这些函数跟后面的Token串做模式匹配。匹配上了，就返回一个AST节点，否则就返回null。如果中间发现跟语法规则不符，就报编译错误。</p><p>在这个过程中，上级文法嵌套下级文法，上级的算法调用下级的算法。表现在生成AST中，上级算法生成上级节点，下级算法生成下级节点。<strong>这就是“下降”的含义。</strong></p><p>分析上面的伪代码和程序语句，你可以看到这样的特点：<strong>程序结构基本上是跟文法规则同构的。这就是递归下降算法的优点，非常直观。</strong></p><p>接着说回来，我们继续运行这个示例程序，输出AST：</p><pre><code>Programm Calculator\n    IntDeclaration age\n        AssignmentExp =\n            IntLiteral 45\n</code></pre><p>前面的文法和算法都很简单，这样级别的文法没有超出正则文法。也就是说，并没有超出我们做词法分析时用到的文法。</p><p>好了，解析完变量声明语句，带你理解了“下降”的含义之后，我们来看看如何用上下文无关文法描述算术表达式。</p><h2>用上下文无关文法描述算术表达式</h2><p>我们解析算术表达式的时候，会遇到更复杂的情况，这时，正则文法不够用，我们必须用上下文无关文法来表达。你可能会问：“正则文法为什么不能表示算术表达式？”别着急，我们来分析一下算术表达式的语法规则。</p><p>算术表达式要包含加法和乘法两种运算（简单起见，我们把减法与加法等同看待，把除法也跟乘法等同看待），加法和乘法运算有不同的优先级。我们的规则要能匹配各种可能的算术表达式：</p><ul>\n<li>2+3*5</li>\n<li>2*3+5</li>\n<li>2*3</li>\n<li>……</li>\n</ul><p>思考一番之后，我们把规则分成两级：第一级是加法规则，第二级是乘法规则。把乘法规则作为加法规则的子规则，这样在解析形成AST时，乘法节点就一定是加法节点的子节点，从而被优先计算。</p><pre><code>additiveExpression\n    :   multiplicativeExpression\n    |   additiveExpression Plus multiplicativeExpression\n    ;\n\nmultiplicativeExpression\n    :   IntLiteral\n    |   multiplicativeExpression Star IntLiteral\n    ;\n</code></pre><p>你看，我们可以通过文法的嵌套，实现对运算优先级的支持。这样我们在解析“2 + 3 * 5”这个算术表达式时会形成类似下面的AST：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/1c/5ed231aced0b65b8c0d343b86634401c.jpg?wh=1142*661\" alt=\"\"></p><p>如果要计算表达式的值，只需要对根节点求值就可以了。为了完成对根节点的求值，需要对下级节点递归求值，所以我们先完成“3 * 5 = 15”，然后再计算“2 + 15 = 17”。</p><p>有了这个认知，我们在解析算术表达式的时候，便能拿加法规则去匹配。在加法规则中，会嵌套地匹配乘法规则。我们通过文法的嵌套，实现了计算的优先级。</p><p>应该注意的是，加法规则中还递归地又引用了加法规则。通过这种递归的定义，我们能展开、形成所有各种可能的算术表达式。比如“2+3*5” 的推导过程：</p><pre><code>--&gt;additiveExpression + multiplicativeExpression\n--&gt;multiplicativeExpression + multiplicativeExpression\n--&gt;IntLiteral + multiplicativeExpression\n--&gt;IntLiteral + multiplicativeExpression * IntLiteral \n--&gt;IntLiteral + IntLiteral * IntLiteral\n</code></pre><p>这种文法已经没有办法改写成正则文法了，它比正则文法的表达能力更强，叫做<strong>“上下文无关文法”。</strong>正则文法是上下文无关文法的一个子集。它们的区别呢，就是上下文无关文法允许递归调用，而正则文法不允许。</p><p>上下文无关的意思是，无论在任何情况下，文法的推导规则都是一样的。比如，在变量声明语句中可能要用到一个算术表达式来做变量初始化，而在其他地方可能也会用到算术表达式。不管在什么地方，算术表达式的语法都一样，都允许用加法和乘法，计算优先级也不变。好在你见到的大多数计算机语言，都能用上下文无关文法来表达它的语法。</p><p>那有没有上下文相关的情况需要处理呢？也是有的，但那不是语法分析阶段负责的，而是放在语义分析阶段来处理的。</p><h2>解析算术表达式：理解“递归”的含义</h2><p>在讲解上下文无关文法时，我提到了文法的递归调用，你也许会问，是否在算法上也需要递归的调用呢？要不怎么叫做“递归下降算法”呢？</p><p>的确，我们之前的算法只算是用到了“下降”，没有涉及“递归”，现在，我们就来看看如何用递归的算法翻译递归的文法。</p><p>我们先按照前面说的，把文法直观地翻译成算法。但是，我们遇到麻烦了。这个麻烦就是出现了无穷多次调用的情况。我们来看个例子。</p><p>为了简单化，我们采用下面这个简化的文法，去掉了乘法的层次：</p><pre><code>additiveExpression\n    :   IntLiteral\n    |   additiveExpression Plus IntLiteral\n    ;\n</code></pre><p>在解析 “2 + 3”这样一个最简单的加法表达式的时候，我们直观地将其翻译成算法，结果出现了如下的情况：</p><ul>\n<li>首先匹配是不是整型字面量，发现不是；</li>\n<li>然后匹配是不是加法表达式，这里是递归调用；</li>\n<li>会重复上面两步，无穷无尽。</li>\n</ul><p>“additiveExpression Plus multiplicativeExpression”这个文法规则的第一部分就递归地引用了自身，这种情况叫做<strong>左递归。</strong>通过上面的分析，我们知道左递归是递归下降算法无法处理的，这是递归下降算法最大的问题。</p><p>怎么解决呢？把“additiveExpression”调换到加号后面怎么样？我们来试一试。</p><pre><code>additiveExpression\n    :   multiplicativeExpression\n    |   multiplicativeExpression Plus additiveExpression\n    ;\n</code></pre><p>我们接着改写成算法，这个算法确实不会出现无限调用的问题：</p><pre><code>private SimpleASTNode additive(TokenReader tokens) throws Exception {\n    SimpleASTNode child1 = multiplicative();  //计算第一个子节点\n    SimpleASTNode node = child1;  //如果没有第二个子节点，就返回这个\n    Token token = tokens.peek();\n    if (child1 != null &amp;&amp; token != null) {\n        if (token.getType() == TokenType.Plus) {\n            token = tokens.read();\n            SimpleASTNode child2 = additive(); //递归地解析第二个节点\n            if (child2 != null) {\n                node = new SimpleASTNode(ASTNodeType.AdditiveExp, token.getText());\n                node.addChild(child1);\n                node.addChild(child2);\n            } else {\n                throw new Exception(&quot;invalid additive expression, expecting the right part.&quot;);\n            }\n        }\n    }\n    return node;\n}\n</code></pre><p>为了便于你理解，我解读一下上面的算法：</p><blockquote>\n<p>我们先尝试能否匹配乘法表达式，如果不能，那么这个节点肯定不是加法节点，因为加法表达式的两个产生式都必须首先匹配乘法表达式。遇到这种情况，返回null就可以了，调用者就这次匹配没有成功。如果乘法表达式匹配成功，那就再尝试匹配加号右边的部分，也就是去递归地匹配加法表达式。如果匹配成功，就构造一个加法的ASTNode返回。</p>\n</blockquote><p>同样的，乘法的文法规则也可以做类似的改写：</p><pre><code>multiplicativeExpression\n    :   IntLiteral\n    |   IntLiteral Star multiplicativeExpression\n    ;\n</code></pre><p>现在我们貌似解决了左递归问题，运行这个算法解析 “2+3*5”，得到下面的AST：</p><pre><code>Programm Calculator\n    AdditiveExp +\n        IntLiteral 2\n        MulticativeExp *\n            IntLiteral 3\n            IntLiteral 5\n</code></pre><p>是不是看上去一切正常？可如果让这个程序解析“2+3+4”呢？</p><pre><code>Programm Calculator\n    AdditiveExp +\n        IntLiteral 2\n        AdditiveExp +\n            IntLiteral 3\n            IntLiteral 4\n</code></pre><p>问题是什么呢？计算顺序发生错误了。连续相加的表达式要从左向右计算，这是加法运算的结合性规则。但按照我们生成的AST，变成从右向左了，先计算了“3+4”，然后才跟“2”相加。这可不行！</p><p>为什么产生上面的问题呢？是因为我们修改了文法，把文法中加号左右两边的部分调换了一下。造成的影响是什么呢？你可以推导一下“2+3+4”的解析过程：</p><ul>\n<li>首先调用乘法表达式匹配函数multiplicative()，成功，返回了一个字面量节点2。</li>\n<li>接着看看右边是否能递归地匹配加法表达式。</li>\n<li>匹配的结果，真的返回了一个加法表达式“3+4”，这个变成了第二个子节点。错误就出在这里了。这样的匹配顺序，“3+4”一定会成为子节点，在求值时被优先计算。</li>\n</ul><p>所以，我们前面的方法其实并没有完美地解决左递归，因为它改变了加法运算的结合性规则。那么，我们能否既解决左递归问题，又不产生计算顺序的错误呢？答案是肯定的。不过我们下一讲再来解决它。目前先忍耐一下，凑合着用这个“半吊子”的算法吧。</p><h2>实现表达式求值</h2><p>上面帮助你理解了“递归”的含义，接下来，我要带你实现表达式的求值。其实，要实现一个表达式计算，只需要基于AST做求值运算。这个计算过程比较简单，只需要对这棵树做深度优先的遍历就好了。</p><p>深度优先的遍历也是一个递归算法。以上文中“2 + 3 * 5”的AST为例看一下。</p><ul>\n<li>对表达式的求值，等价于对AST根节点求值。</li>\n<li>首先求左边子节点，算出是2。</li>\n<li>接着对右边子节点求值，这时候需要递归计算下一层。计算完了以后，返回是15（3*5）。</li>\n<li>把左右节点相加，计算出根节点的值17。</li>\n</ul><p>代码参见SimpleCalculator.Java中的evaluate()方法。</p><p>还是以“2+3*5”为例。它的求值过程输出如下，你可以看到求值过程中遍历了整棵树：</p><pre><code>    Calculating: AdditiveExp          //计算根节点\n        Calculating: IntLiteral      //计算第一个子节点\n        Result: 2                     //结果是2\n        Calculating: MulticativeExp   //递归计算第二个子节点\n            Calculating: IntLiteral\n            Result: 3\n            Calculating: IntLiteral\n            Result: 5\n        Result: 15                //忽略递归的细节，得到结果是15\n    Result: 17                    //根节点的值是17\n</code></pre><p>你可以运行一下示例程序看看输出结果，而且我十分建议你修改表达式，自己做做实验，并试着让表达式不符合语法，看看语法分析程序能不能找出错误来。</p><h2>课程小结</h2><p>今天我们实现了一个简单的公式计算器，尽管简单，相信你已经有了收获。那么我来总结一下今天的重点：</p><ul>\n<li>初步了解上下文无关文法，知道它能表达主流的计算机语言，以及与正则文法的区别。</li>\n<li>理解递归下降算法中的“下降”和“递归”两个特点。它跟文法规则基本上是同构的，通过文法一定能写出算法。</li>\n<li>通过遍历AST对表达式求值，加深对计算机程序执行机制的理解。</li>\n</ul><p>在后面的课程中，我们会在此基础上逐步深化，比如在变量声明中可以使用表达式，在表达式中可以使用变量，例如能够执行像这样的语句：</p><pre><code>int A = 17；\nint B = A + 10*2;\n</code></pre><p>实现了上述功能以后，这个程序就越来越接近一个简单的脚本解释器了！当然，在此之前，我们还必须解决左递归的问题。所以下一讲，我会带你填掉左递归这个坑。我们学习和工作的过程，就是在不停地挖坑、填坑，你要有信心，只要坚强走过填坑这段路，你的职业生涯将会愈发平坦！</p><h2>一课一思</h2><p>递归算法是很好的自顶向下解决问题的方法，是计算机领域的一个核心的思维方式。拥有这种思维方式，可以说是程序员相对于非程序员的一种优势。</p><p>那么，你是否用递归算法或递归思维解决过工作中或者生活中存在的某些问题？你能否再找一些证据证明一下，哪些语法规则只能用上下文无关文法表达，用正则文法是怎样都写不出来的？ 欢迎在留言区和我一起讨论。</p><p>最后，十分感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p>另外，为了便于你更好地学习，我将本节课的示例程序放到了<a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/lab/craft/SimpleCalculator.java\">码云</a>和<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/craft/SimpleCalculator.java\">GitHub</a>上，你可以看一下。</p><p></p>","neighbors":{"left":{"article_title":"02 | 正则文法和有限自动机：纯手工打造词法分析器","id":118378},"right":{"article_title":"04 | 语法分析（二）：解决二元表达式中的难点","id":120388}},"comments":[{"had_liked":false,"id":126721,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1237382,"ip_address":"","ucode":"C2F9C01CFEA032","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/86/c9e17412.jpg","comment_is_top":true,"comment_ctime":1566457876,"is_pvip":false,"replies":[{"id":"46861","content":"点赞！","user_name":"作者回复","comment_id":126721,"uid":"1543380","ip_address":"","utype":1,"ctime":1566462641,"user_name_real":"宫文学Richard"}],"discussion_count":5,"race_medal":0,"score":"9.2233724034935009e+18","product_id":100034101,"comment_content":"初学者看了 8 遍, 终于看懂了, 不急不燥, 慢慢看就行了","like_count":86,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464137,"discussion_content":"点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566462641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237382,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e1/86/c9e17412.jpg","nickname":"Sam","note":"","ucode":"C2F9C01CFEA032","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5856,"discussion_content":"caculator.evaluate(&#39;5+3*4+1*9+3&#39;) 我做出来了!!!","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1566487285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309950,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/fe/034aa271.jpg","nickname":"Dean","note":"","ucode":"FEA7DDE940B912","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573179,"discussion_content":"确实不太好理解，需要配合代码调试理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653233150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019849,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","nickname":"玉皇大亮","note":"","ucode":"5C4FDF1FDCF8A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356882,"discussion_content":"确实不好理解，需要反复揣摩+实践，共勉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615695781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1378779,"avatar":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","nickname":"Gaollard","note":"","ucode":"1B200F5E73C3E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019849,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","nickname":"玉皇大亮","note":"","ucode":"5C4FDF1FDCF8A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373995,"discussion_content":"菜鸟可以抱团取暖，一起搞个群？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620962347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356882,"ip_address":""},"score":373995,"extra":""}]}]},{"had_liked":false,"id":125551,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566202639,"is_pvip":false,"replies":[{"id":"46092","content":"这个实际上就是语法规则，是用BNF表达的。以addtive为例，它有两个产生式。<br>产生式1：一个乘法表达式<br>产生式2：一个加法表达式 + 乘法表达式。<br>通过上面两个产生式的组合，特别是产生式2的递归调用，就能推导出所有的加减乘数算术表达式。<br>比如，对于2*3这个表达式，运用的是产生式1。<br>对于2+3*5，运用的是产生式2。<br>我上面用的语法规则的写法，实际上是后面会用到的Antlr工具的写法。你也可以这样书写，就是一般教材上的写法：<br>A -&gt; M |  A + M<br>M -&gt; int | M * int<br>我们每个非终结符只用了一个大写字母代表，比较简洁。我在文稿中用比较长的单词，是为了容易理解其含义。<br>其中的竖线，是选择其一。你还可以拆成最简单的方式，形成4条规则：<br>A -&gt; M<br>A -&gt;  A + M<br>M -&gt; int<br>M -&gt; M * int<br>上面这些不同的写法，都是等价的。你要能够看习惯，在不同的写法中自由切换。<br>不知道是否解答了你的疑问。<br>","user_name":"作者回复","comment_id":125551,"uid":"1543380","ip_address":"","utype":1,"ctime":1566209414,"user_name_real":"宫文学Richard"}],"discussion_count":9,"race_medal":0,"score":"426767964943","product_id":100034101,"comment_content":"老师你好，<br>additiveExpression<br>    :   multiplicativeExpression<br>    |   additiveExpression Plus multiplicativeExpression<br>    ;<br> <br>multiplicativeExpression<br>    :   IntLiteral<br>    |   multiplicativeExpression Star IntLiteral<br>    ;<br><br>这种DSL怎么理解？","like_count":100,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463603,"discussion_content":"这个实际上就是语法规则，是用BNF表达的。以addtive为例，它有两个产生式。\n产生式1：一个乘法表达式\n产生式2：一个加法表达式 + 乘法表达式。\n通过上面两个产生式的组合，特别是产生式2的递归调用，就能推导出所有的加减乘数算术表达式。\n比如，对于2*3这个表达式，运用的是产生式1。\n对于2+3*5，运用的是产生式2。\n我上面用的语法规则的写法，实际上是后面会用到的Antlr工具的写法。你也可以这样书写，就是一般教材上的写法：\nA -&amp;gt; M |  A + M\nM -&amp;gt; int | M * int\n我们每个非终结符只用了一个大写字母代表，比较简洁。我在文稿中用比较长的单词，是为了容易理解其含义。\n其中的竖线，是选择其一。你还可以拆成最简单的方式，形成4条规则：\nA -&amp;gt; M\nA -&amp;gt;  A + M\nM -&amp;gt; int\nM -&amp;gt; M * int\n上面这些不同的写法，都是等价的。你要能够看习惯，在不同的写法中自由切换。\n不知道是否解答了你的疑问。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566209414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085129,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","nickname":"不会魔法","note":"","ucode":"6B470D893A64F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294117,"discussion_content":"关于为什么 A->M|A+M，为什么这样推导，为什么推导的规则是这样的说下自己的理解。\n\n首先用中文来翻一下这个表达式，把A理解为一个句子，把A和M理解为句子A中包含的元素。\n\n比如，对 &#39;你好&#39; 这个句子进行推导，可推导为\n你好－＞你|好|你好\n构成这个句子包含这几种元素可能。\n\n进行抽象，句子你好＝主语＋谓语，主语记做S，谓语记做V。\n以bnf表达式形式描述。\nSV(你好)->S(你)|V(好)|SV(你好)\n这个句子可能由这三种元素组合而成。\n\n再简化\nSV->S|V|SV\n简化sv为s，右侧大写转为小写方便区分\nS->s|v\n是不是有点内个味道了。\n\n然后咱们基本就明白了啥是推导了吧，就是说左边的集合（句子是单词的集合，文法是词法的集合）包含右边元素的可能。找出来这个句子中可能包含的单词有哪些，抽象一下就是找出这个句子中可能包含的单词类型有哪些。\n\n你好中包含，主语谓语\n\n再拉回来说本章中的\nA->M|A+M\n等于\nadditiveExpression\n    : multiplicativeExpression\n    | additiveExpression Plus multiplicativeExpression\n    ;\na=additiveExpression，是加法表达式的意思。\nM＝multiplicativeExpression，是乘法表达式的意思。\n那么上面个bnf表达式的意思就是说。\n\n一个加法表达式中可能包含元素有乘法表达式或者加法表达式＋乘法表达式的意思。\n\n这是简化后的答案，如果不简化的话，大家可以穷举一下。\n\n本结中为了简单只使用了加法和乘法，没有减法除法等。\n\n加法表达式包含，加法，乘法，加法＋乘法，加法＋加法，加法＋加法＋乘法 等等。\n\n以上所有可能最终都可以用\n\n乘法和加法＋乘法，两种元素代替。\n\n至于为什么我就不知道了，我也是个萌新哈哈。看到这里大家应该都能差不多明白\nA->M|A+M\n究竟是个什么鬼东西了吧。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1595785999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013841,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","nickname":"Smallfly","note":"","ucode":"D388D5E0249A69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7283,"discussion_content":"A -> M | A + M 转化为 BNF 表达式就是：\nA\n: M\n| A + M\n;\n\n这个 | 换行了，开始看的很迷。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1567473663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242864,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","nickname":"易儿易","note":"","ucode":"B15D1031CA841E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6147,"discussion_content":"看了老师的回复才能看得懂，“或”的作用是行之间的……","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566726277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609385,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/HrbY1o4wvbccEWJlkS7Jj1SmDxiasjn7Lf7gTEYrick2hEZ3XmLDrUogNSGcd9iaq2kDew8wzQ7xUaUwmCtPdMG4A/132","nickname":"Geek_wisecsj","note":"","ucode":"F0B4F036E69EE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197205,"discussion_content":"A -> M | A + M 是指 A -> （M | A ）+ M吧？那为什么可以说有A -> M这个规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583412810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152250,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/fa/9763766f.jpg","nickname":"传输助手","note":"","ucode":"A8C9720364E376","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93314,"discussion_content":"我也是看了回复才看得懂，之前都没注意到哪个|，我点个赞，送这个回复上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576920410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","nickname":"1900","note":"","ucode":"320D65D14817D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12275,"discussion_content":"“ A -> M”是说“把M赋值给A”么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568514731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1673801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","nickname":"YellowDuck","note":"","ucode":"9F1D2473CBA59B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","nickname":"1900","note":"","ucode":"320D65D14817D3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":72980,"discussion_content":"不是 是转化 对于2*3这个additive表达式 将他就转化为了 M 乘法表达式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575546791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":12275,"ip_address":""},"score":72980,"extra":""},{"author":{"id":1358045,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","nickname":"小马哥","note":"","ucode":"B2C0FF38F8C9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1105774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","nickname":"1900","note":"","ucode":"320D65D14817D3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":406700,"discussion_content":"不是，表达的意思是解析A，结果是M或者A+M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634822745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":12275,"ip_address":""},"score":406700,"extra":""}]}]},{"had_liked":false,"id":131141,"user_name":"阿尔伯特","can_delete":false,"product_type":"c1","uid":1300012,"ip_address":"","ucode":"70B8EA81FAD7BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/d6/2c/9aa0ae40.jpg","comment_is_top":false,"comment_ctime":1567650322,"is_pvip":false,"replies":[{"id":"49447","content":"哇，这么认真，这么仔细:-)<br>竖线“|”是或者的关系，怪我忘了强调这一点了。在正则文法、上下文无关文法中，“|”都是代表几个不同的选项。<br>另外，在前端技术的算法篇，会再把我们对算法的理解提升一下。我尽量做几个示例程序，演示出深度优先和广度优先的差别来。特别是，为什么广度优先的回溯会太多。<br>当然，如果你能先于我写一个，也可以分享给大家，就省了我的事了 :-)<br>为你的认真精神点赞！","user_name":"作者回复","comment_id":131141,"uid":"1543380","ip_address":"","utype":1,"ctime":1567666920,"user_name_real":"宫文学Richard"}],"discussion_count":11,"race_medal":0,"score":"199136145938","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;albertabc&#47;compiler<br>读了几遍老师的讲义。才逐渐理解了语法解析中用的推导。接着前一讲，攒了个程序。<br>就这个推导说说我目前的理解，其中最开始不能理解的根本原因就是没能理解语法规则之间的相互关系，以及与此相关的token的消耗。<br>比如例子A-&gt;Int | A + Int<br>在最开始的理解中，错误以为，这两条是顺序关系，与此相应就想当然认为token的消耗是像字符串匹配一样“一个接一个”的进行。这种错误思路是这样的：2+3， 首先看token 2， 它是int所以消耗掉，然后类推。<br><br>而实际上，这两条规则是从某种程度上是“互斥”的关系。也就是说，2+3 要么是Int， 要么是A+Int，在没有找到合适的规则前，token是不会被消耗的。由此，在深度优先实现中，就有老师所说的推导实现过程。总的要解决的问题是，2+3 是不是A，能不能用这条A规则来解释。那么就看它是否满足A的具体规则。首先，2+3 显然不是Int，因此没有token消耗。然后，在匹配A + Int时，上来就要看 2+3 是不是A，不断要解决原来的问题，从而就产生了所谓左递归。<br><br>所以在深度优先情况下，打破无穷递归，就把规则改为A-&gt;Int|Int + A。这时，推导， 2+3显然不是Int。于是看Int + A。2显然是Int，于是消耗掉；再看+，消耗掉；再看3是不是A，3显然是Int，所以返回。<br><br>作为老师的示例程序，并没有体现出对A-&gt;M|M+A 两条“互斥”标准的分别处理，所以可能造成了一定疑惑。我是这样理解的，程序事实上合并了对于M的处理，一段代码，处理了第一全部和第二一部分。比如2+3*5，机械按照刚才的理解，2+3*5显然不是M，于是任何token都不消耗，退回。再匹配第二条，第二条上来就会找，它是不是M开头，如果是就消耗掉+之前的token；然后消耗+；然后再看看A。程序是不管如何，上来就看，是不是M开头。如果不是，那肯定就不是A，就返回NULL。如果是，就看你有没有“+”，如果没有，你就直接是规则第一条，如果有，就看你是不是第二条。从而就实现了两条M的合并处理。<br><br>在看了评论后，又看到了广度优先的推导，以及老师说有大量回溯，刚开始不甚理解。后来有点理解，A-&gt;Int|A+Int.该规则在深度优先中，会导致左递归。如果用广度优先，则会有如下方式。所谓广度优先，通俗理解就是“横”着来。那我理解是，2+3显然不是Int。因此要找第二条规则那就是首先要从头扫描，找“+”，然后再“回头”看2是不是A，这就带来了回溯吧。但是由于只用了部分token，即判断2而不是2+3是不是A，所以，避免了左递归。<br><br>请老师和各位同学有空帮忙指正。谢谢","like_count":47,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466308,"discussion_content":"哇，这么认真，这么仔细:-)\n竖线“|”是或者的关系，怪我忘了强调这一点了。在正则文法、上下文无关文法中，“|”都是代表几个不同的选项。\n另外，在前端技术的算法篇，会再把我们对算法的理解提升一下。我尽量做几个示例程序，演示出深度优先和广度优先的差别来。特别是，为什么广度优先的回溯会太多。\n当然，如果你能先于我写一个，也可以分享给大家，就省了我的事了 :-)\n为你的认真精神点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567666920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374673,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/d1/a1ca4797.jpg","nickname":"酷吧你我他","note":"","ucode":"8588778638D9F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363749,"discussion_content":"大佬牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617273719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/0d/6d8f2228.jpg","nickname":"shawn","note":"","ucode":"0AD39EDBE5DA4D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275549,"discussion_content":"厉害，终于看懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590728231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1361489,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c6/51/44791c01.jpg","nickname":"🇧🇪 Hazard🇦🇷","note":"","ucode":"E2C44FAFDFAA88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217121,"discussion_content":"大佬牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585498911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309950,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/fe/034aa271.jpg","nickname":"Dean","note":"","ucode":"FEA7DDE940B912","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579979,"discussion_content":"我去。我真是被你解惑了。我也是去一个个匹配的，越看越不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657786819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630053,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/65/e93cd7dc.jpg","nickname":"听风的歌","note":"","ucode":"51C2ADF6ECE781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574598,"discussion_content":"看评论帮助好大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654170028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2803181,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/c5/ed/abb7bfe3.jpg","nickname":"月敲山门","note":"","ucode":"968275E5B3ACBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403258,"discussion_content":"看懂了！终于知道为啥2+3那里会有左递归了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634041445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1378779,"avatar":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","nickname":"Gaollard","note":"","ucode":"1B200F5E73C3E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373002,"discussion_content":"这位同学太秀了，出书吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620565533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1883322,"avatar":"","nickname":"1111","note":"","ucode":"3F5FF18F3F18A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191751,"discussion_content":"看完了，可以说解释很清楚了：深度优先遍历带来的左递归问题。\n同时，评论里指出了 左递归可以用广度优先遍历来解决，也阐述了广度优先的遍历过程。既：“回头看”。  所以我想问一下，这里对于广度优先遍历过程的解释是正确的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583031824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182910,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/be/e0563e93.jpg","nickname":"观海雲遠","note":"","ucode":"76680C70AF4B2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41356,"discussion_content":"谢谢这位同学，老师啊 我看到2+3会导致无无限左递归很是懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572405907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365574,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","nickname":"Sudouble","note":"","ucode":"B369B09DAF8D20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34727,"discussion_content":"看你写的，终于懂了为什么左递归会一直无效了。非常感谢这么详细的解析！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571216890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125700,"user_name":"鸠摩智","can_delete":false,"product_type":"c1","uid":1106201,"ip_address":"","ucode":"853E584FC4CD64","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/19/c756aaed.jpg","comment_is_top":false,"comment_ctime":1566228209,"is_pvip":true,"replies":[{"id":"46244","content":"你提的问题特别好！其他同学可能也会有这种疑问。<br>文法，英文叫做Grammar，是形式语言（Formal Language）的一个术语。所以也有Formal Grammar这样的说法。这里的文法有定义清晰的规则。比如，我们的词法规则、语法规则和属性规则，使用形式文法来定义的。我们的课程里讲解了正则文法(Regular Grammar)、上下文无关文法(Context-free Grammar)等不同的文法规则，用来描述词法和语法。<br>语法分析中的这个语法，英文是Syntax，主要是描述词是怎么组成句子的。一个语言的语法规则，通常指的是这个Syntax。<br>问题是，Grammar这个词，在中文很多应用场景中也叫做语法。这是会引起混淆的地方。我们在使用的时候要小心一点就行了。<br>比如，我做了一个规则文件，里面都是一些词法规则（Lexer Grammar），我会说，这是一个词法规则文件，或者词法文法文件。这个时候，把它说成是一个语法规则文件，就有点含义模糊。因为这里面并没有语法规则（Syntax Grammar）。<br>为你的认真思考点赞！<br>","user_name":"作者回复","comment_id":125700,"uid":"1543380","ip_address":"","utype":1,"ctime":1566273919,"user_name_real":"宫文学Richard"}],"discussion_count":4,"race_medal":0,"score":"186249821937","product_id":100034101,"comment_content":"老师您好，请问语法和文法有什么区别和联系？","like_count":44,"discussions":[{"author":{"id":1013841,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","nickname":"Smallfly","note":"","ucode":"D388D5E0249A69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7291,"discussion_content":"整理一下我对文法和语法的理解。\n\n“极客时间是程序员的学习平台”，以这句话为例：\n\n极客时间、程序员、学习平台。\n\n如果从文法角度看， ”极客时间“，”学习平台“，”程序员“ 是名词\n\n如果从语法的角度看，”极客时间“是主语，“学习平台”是宾语，”程序员“是宾补。\n\n顺便补充一下语义的理解，语义是在语法的基础上，需要上下文有关的。\n\n比如同样是主+谓+宾+宾补的结构，下面这句话就是语义不恰当的。\n\n极客时间是程序员的娱乐平台。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1567475875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463667,"discussion_content":"你提的问题特别好！其他同学可能也会有这种疑问。\n文法，英文叫做Grammar，是形式语言（Formal Language）的一个术语。所以也有Formal Grammar这样的说法。这里的文法有定义清晰的规则。比如，我们的词法规则、语法规则和属性规则，使用形式文法来定义的。我们的课程里讲解了正则文法(Regular Grammar)、上下文无关文法(Context-free Grammar)等不同的文法规则，用来描述词法和语法。\n语法分析中的这个语法，英文是Syntax，主要是描述词是怎么组成句子的。一个语言的语法规则，通常指的是这个Syntax。\n问题是，Grammar这个词，在中文很多应用场景中也叫做语法。这是会引起混淆的地方。我们在使用的时候要小心一点就行了。\n比如，我做了一个规则文件，里面都是一些词法规则（Lexer Grammar），我会说，这是一个词法规则文件，或者词法文法文件。这个时候，把它说成是一个语法规则文件，就有点含义模糊。因为这里面并没有语法规则（Syntax Grammar）。\n为你的认真思考点赞！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566273919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245241,"avatar":"https://static001.geekbang.org/account/avatar/00/13/00/39/e4c699c9.jpg","nickname":"wenruaaron","note":"","ucode":"159D9CC2DC5DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263340,"discussion_content":"我觉得“语法”和“文法”是同义词，都对应grammar，而syntax翻译成“句法”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589201462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632773,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ea/05/b164dc15.jpg","nickname":"westfall","note":"","ucode":"F3F5CB7DF695FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258917,"discussion_content":"可以简单理解为文法是描述词法和语法的规则，语法是描述句子的组成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588740254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126693,"user_name":"长方体混凝土移动工程师","can_delete":false,"product_type":"c1","uid":1262728,"ip_address":"","ucode":"00CB4C4AB4D119","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/88/69580101.jpg","comment_is_top":false,"comment_ctime":1566450516,"is_pvip":false,"replies":[{"id":"46859","content":"没错。很好。<br><br>既然你已经理解了，那么我再增加一点难度。当前推导是最左推导（LeftMost）推导的算法。也就是总是先把左边的非终结符展开。而且是深度优先的。<br><br>你再广度优先推演一下看看？<br>你再最右推导一下看看？<br><br>可能你的感受又不一样。很有意思的。可以作为消遣游戏 :-D","user_name":"作者回复","comment_id":126693,"uid":"1543380","ip_address":"","utype":1,"ctime":1566458235,"user_name_real":"宫文学Richard"}],"discussion_count":8,"race_medal":0,"score":"169070175060","product_id":100034101,"comment_content":"2 + 3 的推导过程就是要找到一个表达示可以正确的表达这个计算规则。顺序的消耗掉三个token,找到能表达这个式子的公式推导过程完成,并成功。<br>如果使用A: M | A + M 的方式来递归代入,步步推导无法消耗完三个token的情况下就会陷入无限循环<br>推导过程:<br>--------------------------------------------------------------------------<br>1. 2 + 3 不是M表达式,使用A + M的方法匹配<br>2. A + M 在推导A的时候重复第1步操作,因为此时我们并没有消耗掉token,将完整的token代入A重复第1步推导,无限循环<br>--------------------------------------------------------------------------<br><br>但如果使用A: M | M + A 的方式来递归代入<br>推导过程:<br>--------------------------------------------------------------------------<br>1. 2 + 3 不是一个M，使用M + A推导,变成M + A<br>2. 使用2去匹配M可以顺序推导并消耗掉2这个字面量token,此时流中剩下 + 3两个token<br>3. 使用M + A规则中的+号消耗掉 + 3中的+号token<br>4. 将M + A中的A再次推导成M<br>5.最终推导成M + M,此时剩下的最后一个字面量token 3被消耗掉<br>--------------------------------------------------------------------------<br>","like_count":40,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464122,"discussion_content":"没错。很好。\n\n既然你已经理解了，那么我再增加一点难度。当前推导是最左推导（LeftMost）推导的算法。也就是总是先把左边的非终结符展开。而且是深度优先的。\n\n你再广度优先推演一下看看？\n你再最右推导一下看看？\n\n可能你的感受又不一样。很有意思的。可以作为消遣游戏 :-D","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566458235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182910,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/be/e0563e93.jpg","nickname":"观海雲遠","note":"","ucode":"76680C70AF4B2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41385,"discussion_content":"以匹配公式为主 而不是以tokens为主 你转换一下角度便豁然开朗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572417599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5911,"discussion_content":" 但如果使用A: M | A + M 的方式来递归代入\n推导过程:\n--------------------------------------------------------------------------\n1. 2 + 3 不是一个M，使用A + M推导,变成A + M\n2. 使用2去匹配A可以顺序推导并消耗掉2这个字面量token,此时流中剩下 + 3两个token\n3. 使用A + M规则中的+号消耗掉 + 3中的+号token\n4. 使用3去匹配M，此时剩下的最后一个字面量token 3被消耗掉\n--------------------------------------------------------------------------\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566533101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1108505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","nickname":"瓜瓜","note":"","ucode":"F90A5135A9BB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157024,"discussion_content":"错误出现在了第二步，完整推到过程：\n1.2 + 3 不是一个M，使用A + M推导，并没有变成A+M\n2.取出2，符合m，但是整个表达式并没有完成，表达式为2+3，然后不符合，再次使用A + M推导\n3.再次取出2，符合m，但是整个表达式并没有完成，表达式为2+3，然后不符合，再次使用A + M推导\n4.再次取出2。。。。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580435807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5911,"ip_address":""},"score":157024,"extra":""},{"author":{"id":1108505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","nickname":"瓜瓜","note":"","ucode":"F90A5135A9BB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157064,"discussion_content":"/**\n     * 左递归，死循环的写法\n     */\n    /**\n     * 语法解析：加法表达式\n     * @return\n     * @throws Exception\n     */\n    private SimpleASTNode additiveLeftRecursion(TokenReader tokens) throws Exception {\n        SimpleASTNode node = null;\n        Token token = tokens.peek();\n        //判断2\n        if (token.getType() == TokenType.IntLiteral){\n            //取出2\n            token = tokens.read();\n            //判断下一个token是否为;如果不是，则用 A + M 来匹配（此处需要用到回退\n            if (tokens.peek().getType() == TokenType.SemiColon){\n                node = new SimpleASTNode(ASTNodeType.IntLiteral, token.getText());\n                return node;\n            } else {\n                //回退2\n                tokens.unread();\n                //递归调用\n                additiveLeftRecursion(tokens);\n            }\n        }\n        return node;\n    }\n\n写了个例子，你可以跑下试试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580438405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5911,"ip_address":""},"score":157064,"extra":""}]},{"author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5886,"discussion_content":"第二步，A+M时为什么是将完整的token代入，而在下面的M+A第二步不是？而是用2先做匹配？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566526526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1049682,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/52/97a81657.jpg","nickname":"百晓风","note":"","ucode":"E837666B79F01A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41654,"discussion_content":"我理解是整个tokens会进入递归方法，重复A+M的匹配","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572484718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5886,"ip_address":""},"score":41654,"extra":""},{"author":{"id":1264223,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/5f/72195e7a.jpg","nickname":"火火","note":"","ucode":"7CC7E3B54B6A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54404,"discussion_content":"同样的不理解～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574298442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5886,"ip_address":""},"score":54404,"extra":""}]}]},{"had_liked":false,"id":125943,"user_name":"张辽儿","can_delete":false,"product_type":"c1","uid":1264305,"ip_address":"","ucode":"73D37D088EA568","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/b1/30a218db.jpg","comment_is_top":false,"comment_ctime":1566278929,"is_pvip":false,"replies":[{"id":"46323","content":"为了方便讨论，我们把规则简化一下，去掉乘法那一层。否则在乘法那就已经无限递归下去了。修改后为：<br><br>additive -&gt; IntLiteral | additive Intliteral ;<br><br>我们假设是最左推导，也就是总是先展开左边的非中介符。<br>第一遍：additive-&gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。<br>这可能是你没理解的地方。我们是要用additive匹配整个Token串，而不仅仅是第一个Token。<br><br>第二遍：用第二个产生式，additive-&gt;additive-&gt;IntLiteral，还是一样失败。<br><br>第三遍：additive-&gt;additive-&gt;additive-&gt;IntLiteral。<br>第四遍：....<br><br>这样说，有没有帮助？","user_name":"作者回复","comment_id":125943,"uid":"1543380","ip_address":"","utype":1,"ctime":1566288565,"user_name_real":"宫文学Richard"}],"discussion_count":8,"race_medal":0,"score":"113235428625","product_id":100034101,"comment_content":"为什么出现左递归无限调用我还没有理解，例如2+3；当进入加法表达式递归的时候，参数不是已经变成了2吗，然后就是乘法表达式，最后形成字面常量。请老师解答下我的疑问，谢谢","like_count":26,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463758,"discussion_content":"为了方便讨论，我们把规则简化一下，去掉乘法那一层。否则在乘法那就已经无限递归下去了。修改后为：\n\nadditive -&amp;gt; IntLiteral | additive Intliteral ;\n\n我们假设是最左推导，也就是总是先展开左边的非中介符。\n第一遍：additive-&amp;gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。\n这可能是你没理解的地方。我们是要用additive匹配整个Token串，而不仅仅是第一个Token。\n\n第二遍：用第二个产生式，additive-&amp;gt;additive-&amp;gt;IntLiteral，还是一样失败。\n\n第三遍：additive-&amp;gt;additive-&amp;gt;additive-&amp;gt;IntLiteral。\n第四遍：....\n\n这样说，有没有帮助？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566288565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788689,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4b/11/8c879189.jpg","nickname":"胜东","note":"","ucode":"8111C8D63C4A71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168440,"discussion_content":"/**\n     * 我这块最开始听的时候也没有看明白；看了老师的解释稍微明白了一点；\n     * 写一个程序大家就会清楚了；\n     * 这个程序的目的是解析加法表达式，可以解析单个字面量，或者解析表达式；\n     * <p>\n     * 1，先用程序解析一下单个字面量 2\n     * 这个是可以解析的，直接就返回了；\n     * 2，这块用程序解析一下表达式 2+3，就会发现有问题，\n     *\n     * @param tokens 表达式\n     * @return ASTNode\n     * @throws Exception exp\n     */\n    private SimpleASTNode additive2(TokenReader tokens) throws Exception {\n        SimpleASTNode child1 = primary(tokens); // 这时获取的是2\n        SimpleASTNode node = child1;\n        Token token = tokens.peek(); // 看一下下面是个啥，原来是个加号 +\n        if (child1 != null &amp;&amp; token != null) {\n            tokens.unread(); // 发现后面还有内容，是个加号，就不能解析了；这个需要回退一下\n            additive2(tokens); // 回退之后又调用这个解析方法，这样递归调用就发生循环了；\n        }\n        // 这块还应该有代码，理想上可以处理 (2+3) +4，把2+3当做一个式子，然后再加4，\n        // 但是上面就会出现递归死循环了，这块也不知道怎么写了；\n        return node;\n    }","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1581581563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1628237,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/4d/ec7e18cb.jpg","nickname":"Cuinidaye","note":"","ucode":"D65D8F2F08C212","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1788689,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4b/11/8c879189.jpg","nickname":"胜东","note":"","ucode":"8111C8D63C4A71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211228,"discussion_content":"牛逼，一看代码逻辑就清晰多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584812885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":168440,"ip_address":""},"score":211228,"extra":""},{"author":{"id":1634044,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ee/fc/8717c26b.jpg","nickname":"柠檬","note":"","ucode":"AF73A8B705CE76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1788689,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4b/11/8c879189.jpg","nickname":"胜东","note":"","ucode":"8111C8D63C4A71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227600,"discussion_content":"感谢，理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586505652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":168440,"ip_address":""},"score":227600,"extra":""}]},{"author":{"id":1206158,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/8e/14f06610.jpg","nickname":"胖虎","note":"","ucode":"2A3D72C6F38980","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70058,"discussion_content":"我觉得老师的讲解的例子不利于提问题者的理解\n老师的简化我认为是在变相的加大理解难度\nadditive -> IntLiteral | additive Intliteral ;\n这个例子就已经偏离了A -> M | A + M的含义\n少了 + plus增加了理解的难度\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575305217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1059121,"avatar":"https://static001.geekbang.org/account/avatar/00/10/29/31/e85391c0.jpg","nickname":"Charles","note":"","ucode":"230914786D1E62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1206158,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/8e/14f06610.jpg","nickname":"胖虎","note":"","ucode":"2A3D72C6F38980","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400992,"discussion_content":"的确是，我也觉得有些不用太简化，越简化反而进入了极端，不那么清楚地表达事物本来的面貌。\n这些除非以前学过，接触过，然后边查资料边理解，否则绝对不可能学会和理解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633515476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70058,"ip_address":""},"score":400992,"extra":""}]},{"author":{"id":1639012,"avatar":"https://static001.geekbang.org/account/avatar/00/19/02/64/7610a579.jpg","nickname":"EvangeYu","note":"","ucode":"CA4AC3B4C8E7A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6390,"discussion_content":"第三遍 为什么产生add–>add->add->int，不是add–>add->int->int","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566877971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1013841,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","nickname":"Smallfly","note":"","ucode":"D388D5E0249A69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1639012,"avatar":"https://static001.geekbang.org/account/avatar/00/19/02/64/7610a579.jpg","nickname":"EvangeYu","note":"","ucode":"CA4AC3B4C8E7A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7287,"discussion_content":"你先理解一下第二遍为什么是这样，第三遍就清楚了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567474454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6390,"ip_address":""},"score":7287,"extra":""}]}]},{"had_liked":false,"id":205360,"user_name":"炎发灼眼","can_delete":false,"product_type":"c1","uid":1425953,"ip_address":"","ucode":"7D195057C8E94C","user_header":"https://static001.geekbang.org/account/avatar/00/15/c2/21/a8ef82ac.jpg","comment_is_top":false,"comment_ctime":1586598110,"is_pvip":false,"replies":[{"id":"76749","content":"不错。你已经思考得挺细致的了！值得表扬！<br>如果你想继续做一下脑体操，可以看看17讲中与广度优先有关的算法，看看能否把深度优先和广度优先在大脑里转换自如！","user_name":"作者回复","comment_id":205360,"uid":"1543380","ip_address":"","utype":1,"ctime":1586660992,"user_name_real":"宫文学Richard"}],"discussion_count":4,"race_medal":0,"score":"87485944030","product_id":100034101,"comment_content":"老师，又把文章读了好几遍，然后仔仔细细看了你所有问题的回复，重新理解了下，是不是这样；<br>例如：2+3这个式子，用A-&gt;Int | A + Int去推导，就是用2+3去匹配第一个式子Int，不满足，然后看是否满足第二个式子A + Int，<br>这个时候，因为我们能直接看到整个表达式是什么样子的，现在是2+3，所以我们本能的就使用了广度优先算法，觉得用2匹配A，+自然匹配，Int刚好消耗掉3，完美；<br>但是计算机拿到TOKENS的时候，是不知道这个是什么样子的，所以按照写好的深度优先算法来匹配，每一次的匹配，都想尽办法尽可能多的<br>消耗掉TOKENS中的TOKEN，所以，在A + Int的时候，用整个TOKENS来和A匹配，看看最多能消耗掉多少个TOKEN，其实这个时候，<br>对于计算机来说，是不知道这个式子后面还有 + Int这个的，然后回到了那一步，先用TOKENS匹配Int，不对，退回来，进行另一个式子的尝试，<br>又回到了A + Int，然后又是对A + Int中的A进行尽可能的多匹配，周而复始，就是所谓的左递归了","like_count":21,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491461,"discussion_content":"不错。你已经思考得挺细致的了！值得表扬！\n如果你想继续做一下脑体操，可以看看17讲中与广度优先有关的算法，看看能否把深度优先和广度优先在大脑里转换自如！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586660992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","nickname":"YellowDuck","note":"","ucode":"9F1D2473CBA59B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285046,"discussion_content":"关键是大家本能的用了广度优先的想法....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592721460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","nickname":"YellowDuck","note":"","ucode":"9F1D2473CBA59B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285045,"discussion_content":"这个讲得好～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592721447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049113,"avatar":"https://static001.geekbang.org/account/avatar/00/10/02/19/84b4abd3.jpg","nickname":"小柏","note":"","ucode":"A9E353887A4D72","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247962,"discussion_content":"赞！刷完了整个评论，你讲的很清晰，对入门同学理解帮助很大，感觉你这个贴要顶上去！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587828719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126392,"user_name":"kaixiao7","can_delete":false,"product_type":"c1","uid":1242577,"ip_address":"","ucode":"505EC4AFB5E656","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/d1/cc6f82eb.jpg","comment_is_top":false,"comment_ctime":1566379794,"is_pvip":false,"replies":[{"id":"46767","content":"算法可以首先尝试产生式1。推导顺序是这样的：<br>additive -&gt; multiplicative(加法的产生式1)<br>           -&gt; Intliteral（2）（乘法的产生式1）<br>这时候只消化了一个Token呀。我们是要用一个表达式把这5个Token都消化掉才行。所以会继续尝试乘法的产生式2。<br><br>additive -&gt; multiplicative(加法的产生式1)<br>           -&gt; Intliteral * multiplicative （乘法的产生式2）<br>这次尝试不成功，因为我们下一个Token是加号，不是乘号。<br><br>现在，退回来尝试加法的产生式2。<br>additive -&gt; multiplicative + additive(加法的产生式2)<br>           -&gt; Intliteral(2) + additive<br>           -&gt;Intliteral(2) + multiplicative<br>           -&gt; Intliteral(2) + Intliteral(3)  不行，因为还有Token <br>           -&gt; Intliteral(2) + Intliteral(3)  * multiplicative 又用上乘法的产生式2了<br>           -&gt;Intliteral(2) + Intliteral(3)  * Intliteral(5) <br><br>这是严格的推导过程。我在示例代码的实现中，因为提取了左公因子，所以没用多次回溯。<br><br>这样说，你能明白吗？如果还不明白，就再问。<br>","user_name":"作者回复","comment_id":126392,"uid":"1543380","ip_address":"","utype":1,"ctime":1566390032,"user_name_real":"宫文学Richard"}],"discussion_count":7,"race_medal":0,"score":"78875791122","product_id":100034101,"comment_content":"老师您好：<br>additiveExpression<br>    :   multiplicativeExpression<br>    |   multiplicativeExpression Plus additiveExpression<br>    ;<br><br>multiplicativeExpression<br>    :   IntLiteral<br>    |   IntLiteral Star multiplicativeExpression<br>    ;<br>在用上述文法求解 2+3*5 时，首先会匹配乘法规则， 根据代码，这一步返回字面量2，显然是产生式1匹配的结果， 我的问题是这里不应该用 产生式1 匹配 2+3*5 整个token串吗？<br>另外，再计算表达式 2*3*5 时， 返回的AST为 2*3，而 *5 丢失了，因此multiplicative()方法中的SimpleASTNode child2 = primary(tokens); 是不是应该递归调用multiplicative()呢？<br><br>期待您的解惑！","like_count":19,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463969,"discussion_content":"算法可以首先尝试产生式1。推导顺序是这样的：\nadditive -&amp;gt; multiplicative(加法的产生式1)\n           -&amp;gt; Intliteral（2）（乘法的产生式1）\n这时候只消化了一个Token呀。我们是要用一个表达式把这5个Token都消化掉才行。所以会继续尝试乘法的产生式2。\n\nadditive -&amp;gt; multiplicative(加法的产生式1)\n           -&amp;gt; Intliteral * multiplicative （乘法的产生式2）\n这次尝试不成功，因为我们下一个Token是加号，不是乘号。\n\n现在，退回来尝试加法的产生式2。\nadditive -&amp;gt; multiplicative + additive(加法的产生式2)\n           -&amp;gt; Intliteral(2) + additive\n           -&amp;gt;Intliteral(2) + multiplicative\n           -&amp;gt; Intliteral(2) + Intliteral(3)  不行，因为还有Token \n           -&amp;gt; Intliteral(2) + Intliteral(3)  * multiplicative 又用上乘法的产生式2了\n           -&amp;gt;Intliteral(2) + Intliteral(3)  * Intliteral(5) \n\n这是严格的推导过程。我在示例代码的实现中，因为提取了左公因子，所以没用多次回溯。\n\n这样说，你能明白吗？如果还不明白，就再问。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566390032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333594,"discussion_content":"建议老师把这个推导步骤加到正文中去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607570843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300708,"discussion_content":"这里终于明白了，这个例子讲得很清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598241958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283639,"discussion_content":"感谢老师，终于明白了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592316141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","nickname":"瓜瓜","note":"","ucode":"F90A5135A9BB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154995,"discussion_content":"谢谢老师，细心的教导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580207999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263294,"avatar":"https://static001.geekbang.org/account/avatar/00/13/46/be/d3040f9e.jpg","nickname":"小广","note":"","ucode":"9738E8DCEF9E3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5873,"discussion_content":"我也明白了，谢谢老师，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566521506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242577,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/d1/cc6f82eb.jpg","nickname":"kaixiao7","note":"","ucode":"505EC4AFB5E656","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5683,"discussion_content":"明白了，谢谢老师!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566437002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125328,"user_name":"阿名","can_delete":false,"product_type":"c1","uid":1634842,"ip_address":"","ucode":"6CD4279527283C","user_header":"","comment_is_top":false,"comment_ctime":1566161079,"is_pvip":false,"replies":[{"id":"46008","content":"实际上，这些看上去比较正式的术语，是我在这篇文稿的最后一版才加上去的。其实，你忽略这些术语，也完全能看懂文稿。加上这些术语，是为后面正式讲算法做个铺垫。<br><br>我知道编译原理的术语本身就能吓倒很多人。但是这门课程的重点在于帮你建立直觉（Intuition）。建立起直觉来以后，你其实已经明白了语法分析的过程，你已经对它有熟悉感了。之后你再把这些直觉跟术语联系在一起，就不觉得困难了。<br><br>再次强调一点，首先建立直觉，然后再追求对术语和算法的严格理解。<br><br>学编译原理最大的困难不是这门课本身的难度，而是我们对它的畏惧心理。相信你自己！","user_name":"作者回复","comment_id":125328,"uid":"1543380","ip_address":"","utype":1,"ctime":1566173655,"user_name_real":"宫文学Richard"}],"discussion_count":3,"race_medal":0,"score":"74580605111","product_id":100034101,"comment_content":"如果没有基础 比较难听得懂 比如文法推导 终结符 非终结符 这些概念 本身就不好理解","like_count":17,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463528,"discussion_content":"实际上，这些看上去比较正式的术语，是我在这篇文稿的最后一版才加上去的。其实，你忽略这些术语，也完全能看懂文稿。加上这些术语，是为后面正式讲算法做个铺垫。\n\n我知道编译原理的术语本身就能吓倒很多人。但是这门课程的重点在于帮你建立直觉（Intuition）。建立起直觉来以后，你其实已经明白了语法分析的过程，你已经对它有熟悉感了。之后你再把这些直觉跟术语联系在一起，就不觉得困难了。\n\n再次强调一点，首先建立直觉，然后再追求对术语和算法的严格理解。\n\n学编译原理最大的困难不是这门课本身的难度，而是我们对它的畏惧心理。相信你自己！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566173655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079345,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/31/c7f8d1db.jpg","nickname":"Laputa","note":"","ucode":"64C157042CF138","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348597,"discussion_content":"我觉得老师说的是不对的，有些术语还是要提前说清楚的，如果不说清楚就要换一种表达方式来替换相关术语，比如“终结符”，不然会影响没有基础的同学的理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612661726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590892,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","nickname":"Varphp","note":"","ucode":"889550391E3F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5563,"discussion_content":"我在找文法怎么解析的 文法的写法哪里学  没基础得我一脸懵  正则好用会用  这个文法 是不是也有什么插件专门解析  我们使用就好了？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566354946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125629,"user_name":"朱天超","can_delete":false,"product_type":"c1","uid":1130852,"ip_address":"","ucode":"A50AA622B54CDA","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/64/2f0a595c.jpg","comment_is_top":false,"comment_ctime":1566217135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65990726575","product_id":100034101,"comment_content":"课下可以参考下:《编译系统透视：图解编译原理》","like_count":15},{"had_liked":false,"id":127560,"user_name":"Rockbean","can_delete":false,"product_type":"c1","uid":1632261,"ip_address":"","ucode":"30D0BDFB47D38B","user_header":"https://static001.geekbang.org/account/avatar/00/18/e8/05/a623c531.jpg","comment_is_top":false,"comment_ctime":1566741304,"is_pvip":false,"replies":[{"id":"47306","content":"1.终结符跟非终结符在04讲得更细一点，可以在04讲再体会一下。<br>2.它的左边，是指：<br>intDeclaration :  Int Identifier (&#39;=&#39; additiveExpression)?;<br>这个规则，冒号的左边。<br>","user_name":"作者回复","comment_id":127560,"uid":"1543380","ip_address":"","utype":1,"ctime":1566787254,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"44516414264","product_id":100034101,"comment_content":"小白读得有些吃力<br>&gt; &quot;我们首先把变量声明语句的规则，用形式化的方法表达一下。它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。&quot;<br><br>“它的左边”的“它”是指变量声明语句&quot;int age = 45&quot;呢还是什么，如果是变量声明语句,那左边是左到哪里，是“int age”还是什么？非终结符，是什么，往前翻了几个课也没有找到，或者说终结符是什么？同样的右边是右从哪里开始算右边？产生式是“=45”吗？小白对这些基础词汇有点蒙，见笑了","like_count":11,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464549,"discussion_content":"1.终结符跟非终结符在04讲得更细一点，可以在04讲再体会一下。\n2.它的左边，是指：\nintDeclaration :  Int Identifier (&amp;#39;=&amp;#39; additiveExpression)?;\n这个规则，冒号的左边。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566787254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632261,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e8/05/a623c531.jpg","nickname":"Rockbean","note":"","ucode":"30D0BDFB47D38B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6337,"discussion_content":"谢谢宫老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566839411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125373,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1566175702,"is_pvip":false,"replies":[{"id":"46033","content":"你说的很对！<br>实际上，你提到了递归的优化问题。这是一个专门的研究领域。在SICP（《计算机程序的构造和解释》）这本书中，对这个问题也很重视。<br><br>我们下一讲会提到尾递归的情形，也就是线性迭代的递归函数。它实际上可以转化成循环语句，就没有对栈的消耗了。这是在编译技术中常用的一种优化策略。你可以提前了解一下尾递归 : )","user_name":"作者回复","comment_id":125373,"uid":"1543380","ip_address":"","utype":1,"ctime":1566179929,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"40220881366","product_id":100034101,"comment_content":"递归容易表达很多算法，但是计算机本身执行递归有栈溢出和效率等问题，如何平衡呢？","like_count":9,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463549,"discussion_content":"你说的很对！\n实际上，你提到了递归的优化问题。这是一个专门的研究领域。在SICP（《计算机程序的构造和解释》）这本书中，对这个问题也很重视。\n\n我们下一讲会提到尾递归的情形，也就是线性迭代的递归函数。它实际上可以转化成循环语句，就没有对栈的消耗了。这是在编译技术中常用的一种优化策略。你可以提前了解一下尾递归 : )","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566179929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258402,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a2/6c0ffc15.jpg","nickname":"皮皮侠","note":"","ucode":"04205990C1DE1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213785,"discussion_content":"SICP，一本可以当成艺术来看的书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585121680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213925,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1588590436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23063426916","product_id":100034101,"comment_content":"同行们，看不懂没关系，继续往下看，把下面两个小节都看完之后照着 github 上面的代码敲一遍，再回来看，你就能懂了。因为天资愚钝的我就是这样搞懂的。","like_count":5},{"had_liked":false,"id":126323,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1566362598,"is_pvip":true,"replies":[{"id":"46638","content":"我觉得你在认真分析，点赞！<br><br>在讨论左递归会无穷次递归的时候，我们把语法简化了一下，是根本就不要乘法运算了，只看加法运算。这样来推演左递归更加方便一点。<br><br>简化后的规则为：<br>additive -&gt; IntLiteral | additive Intliteral ;<br><br>解析过程：<br>第一遍：additive-&gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。<br>第二遍：additive-&gt;additive-&gt;IntLiteral，还是一样失败。<br>第三遍：additive-&gt;additive-&gt;additive-&gt;IntLiteral。<br>第四遍：....<br><br>Star就是*号，是一个Token符号。是词法分析过程中形成的。这样的问题建议你看看源代码，甚至运行一下，就更清楚了。<br><br>如果不清楚，继续问我。","user_name":"作者回复","comment_id":126323,"uid":"1543380","ip_address":"","utype":1,"ctime":1566372897,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"23041199078","product_id":100034101,"comment_content":"<br>总结一下：开头讲的推导过程就是递归过程<br>针对加法表达式 2+3<br><br>最初规则：<br>additive<br>\t:multiplicative<br>\t| additive Plus multiplicative<br>\t;<br>multiplicative<br>\t: IntLiteral<br>\t| multiplicative Star IntLiteral<br>\t;<br>\t<br>简化：<br>additive<br>\t：IntLiteral<br>\t| additive Plus IntLiteral <br>\t；<br>\t<br>multiplicative<br>\t：IntLiteral <br>\t| multiplicative Star IntLiteral<br>\t；<br>遍历整个token串，运用产生式1 ，不是 IntLiteral，运用产生式2，这里会出现左递归\t<br><br>\t<br>解决左递归， 把additive 调换到 加号（plus）后边去。相应的multiplicative 也调换位置<br>additive<br>\t: IntLiteral<br>\t| IntLiteral Plus multiplicative<br>\t;<br>\t<br>multiplicative<br>\t: IntLiteral<br>\t| IntLiteral Star multiplicative  <br>\t;<br>\t<br>再解析 “2+3+4” <br>这里我就不明白了，为什么首先调用乘法表达式匹配函数，就能成功返回字面量2呢？<br>文法规则里的 “Star” 是什么意思？  还请老师解惑！","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463940,"discussion_content":"我觉得你在认真分析，点赞！\n\n在讨论左递归会无穷次递归的时候，我们把语法简化了一下，是根本就不要乘法运算了，只看加法运算。这样来推演左递归更加方便一点。\n\n简化后的规则为：\nadditive -&amp;gt; IntLiteral | additive Intliteral ;\n\n解析过程：\n第一遍：additive-&amp;gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。\n第二遍：additive-&amp;gt;additive-&amp;gt;IntLiteral，还是一样失败。\n第三遍：additive-&amp;gt;additive-&amp;gt;additive-&amp;gt;IntLiteral。\n第四遍：....\n\nStar就是*号，是一个Token符号。是词法分析过程中形成的。这样的问题建议你看看源代码，甚至运行一下，就更清楚了。\n\n如果不清楚，继续问我。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566372897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521661,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbQJvvPGOykVpBjjE9gA2tDg18eBrLHkIOH9ga9NuNKN4U977VE2PlIzzQ4VJMgE0CJvHTx3Ssicw/132","nickname":"Geek_c32e72","note":"","ucode":"539295D69DE77E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6417,"discussion_content":"multiplicativeExpression\n    :   IntLiteral\n    |   multiplicativeExpression Star IntLiteral\n    ;\n请问老师，这个第一遍也是M：IntLiteral吧？为什么不用退回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566892186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126100,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1566313080,"is_pvip":true,"replies":[{"id":"46658","content":"学完课程，你应该会理解这两个的运作机制。<br><br>Babel，只是做语言翻译，只需要前端技术就可以了。翻译成AST，做完语义分析，再转成另一个版本的js。<br><br>Node.js基于v8，不仅仅做前端工作，更重要的是在后端运行时做各种优化。","user_name":"作者回复","comment_id":126100,"uid":"1543380","ip_address":"","utype":1,"ctime":1566376625,"user_name_real":"宫文学Richard"}],"discussion_count":1,"race_medal":2,"score":"23041149560","product_id":100034101,"comment_content":"前端开发，表示有些吃力。很好奇Babel、Node.js的编译机制。","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463830,"discussion_content":"学完课程，你应该会理解这两个的运作机制。\n\nBabel，只是做语言翻译，只需要前端技术就可以了。翻译成AST，做完语义分析，再转成另一个版本的js。\n\nNode.js基于v8，不仅仅做前端工作，更重要的是在后端运行时做各种优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566376625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125908,"user_name":"小广","can_delete":false,"product_type":"c1","uid":1263294,"ip_address":"","ucode":"9738E8DCEF9E3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/46/be/d3040f9e.jpg","comment_is_top":false,"comment_ctime":1566270873,"is_pvip":false,"replies":[{"id":"46250","content":"嗯。谢谢你的建议。我看看是否需要把文稿表达得更细致一点。<br>如果不要乘法那一层，说明起来可能更简洁一些。否则，其实进入到乘法以后，就已经递归个不停了，根本回不到加法规则这来。<br>修改规则为：<br>additive -&gt; IntLiteral | additive Intliteral ;<br>第一遍：additive-&gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。<br>第二遍：additive-&gt;additive-&gt;IntLiteral，还是一样失败。<br>第三遍：additive-&gt;additive-&gt;additive-&gt;IntLiteral。<br>第四遍：....","user_name":"作者回复","comment_id":125908,"uid":"1543380","ip_address":"","utype":1,"ctime":1566274962,"user_name_real":"宫文学Richard"}],"discussion_count":4,"race_medal":0,"score":"18746140057","product_id":100034101,"comment_content":"解析“2 + 3”遇到左递归问题那一段，需要解析到 + 号的时候，才会发生下面的递归循环的问题，一开始看有点断档，因为第一个字符2是不会遇最递归的问题的，如果老师可以提示一下话，可能看起来会更加流畅一点O(∩_∩)O~","like_count":4,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463744,"discussion_content":"嗯。谢谢你的建议。我看看是否需要把文稿表达得更细致一点。\n如果不要乘法那一层，说明起来可能更简洁一些。否则，其实进入到乘法以后，就已经递归个不停了，根本回不到加法规则这来。\n修改规则为：\nadditive -&amp;gt; IntLiteral | additive Intliteral ;\n第一遍：additive-&amp;gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。\n第二遍：additive-&amp;gt;additive-&amp;gt;IntLiteral，还是一样失败。\n第三遍：additive-&amp;gt;additive-&amp;gt;additive-&amp;gt;IntLiteral。\n第四遍：....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566274962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004121,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/59/c861b97b.jpg","nickname":"herui","note":"","ucode":"957F8FAF48DCD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6049,"discussion_content":"// 我觉得换成代码,更容易明白为什么,如果按照A -> M|A+M 文法\n// 那代码大概是这样,仿照原文非递归的代码:\nprivate SimpleASTNode additive(TokenReader tokens) throws Exception {\n    测试M表达式 try multiplicative() -> error, 需要注意,如果error是不吃token的, 即token位置等都不变,执行下一个语句,就直接导致了死循环\n    SimpleASTNode child1 = additive();  // 计算第一个子节点\n    ...\n}\n\n// 实际理解非递归代码是关键","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566638162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060242,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","nickname":"lion_fly","note":"","ucode":"FCFD6B66C01B83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298498,"discussion_content":"从代码实现的角度，看这个问题更透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597312303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474107,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/3b/ab5fd20d.jpg","nickname":"刘 - -","note":"","ucode":"EB43E511C2AAE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6089,"discussion_content":"用产生式 A+M 的时候 multiplicative 会出错吗？能写一下 multiplicative 的伪代码吗？谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566662518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148964,"user_name":"恩佐","can_delete":false,"product_type":"c1","uid":1509370,"ip_address":"","ucode":"955C45137073EE","user_header":"https://static001.geekbang.org/account/avatar/00/17/07/fa/62186c97.jpg","comment_is_top":false,"comment_ctime":1573119058,"is_pvip":false,"replies":[{"id":"57667","content":"看到你的工程经常更新，我已经在github上加了关注。<br><br>简单地用go test运行了一下你的lexer和calculator。运行的输出挺漂亮!<br><br>如果有小的建议的话，就是再稍微多写点注释。否则过一阵你自己看代码会想不起来了...","user_name":"作者回复","comment_id":148964,"uid":"1543380","ip_address":"","utype":1,"ctime":1573432959,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"14458020946","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;shaojintian&#47;learn_compiler&#47;blob&#47;master&#47;calculator&#47;calculator_test.go<br>老师我完全自己实现了calculator，可否看一下，指点一下，多谢<br>","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473688,"discussion_content":"看到你的工程经常更新，我已经在github上加了关注。\n\n简单地用go test运行了一下你的lexer和calculator。运行的输出挺漂亮!\n\n如果有小的建议的话，就是再稍微多写点注释。否则过一阵你自己看代码会想不起来了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573432959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1509370,"avatar":"https://static001.geekbang.org/account/avatar/00/17/07/fa/62186c97.jpg","nickname":"恩佐","note":"","ucode":"955C45137073EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47874,"discussion_content":"好的老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573434210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130533,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1567479951,"is_pvip":false,"replies":[{"id":"49336","content":"这个地方确实写得不够细，没有交代清楚什么是非终结符，什么是终结符。后来在下一讲里有更多的描述。<br>总体来说，终结符，就是我们在词法分析阶段获得的Token。在建立AST的时候，它们是叶子节点。因为不管是表达式也好，语句也好，最终都是由这些Token构成的。<br>非终结符就相当于AST非叶子节点，它们是由Token构成的一些语法结构，比如表达式、语句。<br>如果把AST这种直观的理解换成文法的推导过程，那么就是反着来的。从非终结符一步步替换，直到全部替换成终结符。也就是从树根，一步步生成一棵AST。","user_name":"作者回复","comment_id":130533,"uid":"1543380","ip_address":"","utype":1,"ctime":1567650088,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"10157414543","product_id":100034101,"comment_content":"宫老师，看了几遍，还是没有理解 下面所表达的含义。<br><br>它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。在语法解析的过程中，左边会被右边替代。如果替代之后还有非终结符，那么继续这个替代过程，直到最后全部都是终结符（Terminal）。<br><br>谢谢。","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466000,"discussion_content":"这个地方确实写得不够细，没有交代清楚什么是非终结符，什么是终结符。后来在下一讲里有更多的描述。\n总体来说，终结符，就是我们在词法分析阶段获得的Token。在建立AST的时候，它们是叶子节点。因为不管是表达式也好，语句也好，最终都是由这些Token构成的。\n非终结符就相当于AST非叶子节点，它们是由Token构成的一些语法结构，比如表达式、语句。\n如果把AST这种直观的理解换成文法的推导过程，那么就是反着来的。从非终结符一步步替换，直到全部替换成终结符。也就是从树根，一步步生成一棵AST。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567650088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045455,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","nickname":"Milittle","note":"","ucode":"80E566639A8ABB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50268,"discussion_content":"这个地方可以补充一下说是推导式的左边和右边，也就是对应推导式冒号的左边和右边。这样会更加容易理解和对应。不然确实感觉听突兀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573698096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128609,"user_name":"鱼_XueTr","can_delete":false,"product_type":"c1","uid":1506691,"ip_address":"","ucode":"A164D2540F251D","user_header":"https://static001.geekbang.org/account/avatar/00/16/fd/83/b432b125.jpg","comment_is_top":false,"comment_ctime":1566913446,"is_pvip":false,"replies":[{"id":"47792","content":"是的。<br>学习也是这么多次迭代的过程。<br>前面的即使学了，可能也隔着一层。等学到后面，再回过头来看前面，会有新的体会。<br>这就是最宝贵的直觉。是我们课程里着力培养的。就是你说的“感觉”。有了直觉，直观的理解一件事情了，再去细究，就不难了！","user_name":"作者回复","comment_id":128609,"uid":"1543380","ip_address":"","utype":1,"ctime":1566958139,"user_name_real":"宫文学Richard"}],"discussion_count":1,"race_medal":0,"score":"10156848038","product_id":100034101,"comment_content":"写了几个Antlr的语法，然后回来再看，终于看着有感觉了。","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465021,"discussion_content":"是的。\n学习也是这么多次迭代的过程。\n前面的即使学了，可能也隔着一层。等学到后面，再回过头来看前面，会有新的体会。\n这就是最宝贵的直觉。是我们课程里着力培养的。就是你说的“感觉”。有了直觉，直观的理解一件事情了，再去细究，就不难了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566958139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125433,"user_name":"Void_seT","can_delete":false,"product_type":"c1","uid":1070863,"ip_address":"","ucode":"DD55CB0198A5CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg","comment_is_top":false,"comment_ctime":1566184379,"is_pvip":false,"replies":[{"id":"46073","content":"你提得很对。<br>可能是从右递归的推导过程拷贝过来，没改彻底。<br>谢谢！","user_name":"作者回复","comment_id":125433,"uid":"1543380","ip_address":"","utype":1,"ctime":1566199601,"user_name_real":"宫文学Richard"}],"discussion_count":2,"race_medal":0,"score":"10156118971","product_id":100034101,"comment_content":"“2+3*5”的表达式推导中，第三行到第四行的推导<br>--&gt;IntLiteral + IntLiteral * multiplicativeExpression<br>是否应该是<br>--&gt;IntLiteral + multiplicativeExpression * IntLiteral<br>因为上面定义的multiplicativeExpression只包含了左边multiplicativeExpression star IntLiteral，却没有包含IntLiteral star multiplicativeExpression。","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463573,"discussion_content":"你提得很对。\n可能是从右递归的推导过程拷贝过来，没改彻底。\n谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566199601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070863,"avatar":"https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg","nickname":"Void_seT","note":"","ucode":"DD55CB0198A5CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5333,"discussion_content":"另外，代码中的注释：multiplicative -> primary | primary + multiplicative应该是multiplicative -> primary | primary * multiplicative吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566185585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237341,"user_name":"不会魔法","can_delete":false,"product_type":"c1","uid":2085129,"ip_address":"","ucode":"6B470D893A64F1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","comment_is_top":false,"comment_ctime":1595786042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890753338","product_id":100034101,"comment_content":"关于为什么 A-&gt;M|A+M，为什么这样推导，为什么推导的规则是这样的说下自己的理解。<br><br>首先用中文来翻一下这个表达式，把A理解为一个句子，把A和M理解为句子A中包含的元素。<br><br>比如，对 &#39;你好&#39; 这个句子进行推导，可推导为<br>你好－＞你|好|你好<br>构成这个句子包含这几种元素可能。<br><br>进行抽象，句子你好＝主语＋谓语，主语记做S，谓语记做V。<br>以bnf表达式形式描述。<br>SV(你好)-&gt;S(你)|V(好)|SV(你好)<br>这个句子可能由这三种元素组合而成。<br><br>再简化<br>SV-&gt;S|V|SV<br>简化sv为s，右侧大写转为小写方便区分<br>S-&gt;s|v<br>是不是有点内个味道了。<br><br>然后咱们基本就明白了啥是推导了吧，就是说左边的集合（句子是单词的集合，文法是词法的集合）包含右边元素的可能。找出来这个句子中可能包含的单词有哪些，抽象一下就是找出这个句子中可能包含的单词类型有哪些。<br><br>你好中包含，主语谓语<br><br>再拉回来说本章中的<br>A-&gt;M|A+M<br>等于<br>additiveExpression<br>    : multiplicativeExpression<br>    | additiveExpression Plus multiplicativeExpression<br>    ;<br>a=additiveExpression，是加法表达式的意思。<br>M＝multiplicativeExpression，是乘法表达式的意思。<br>那么上面个bnf表达式的意思就是说。<br><br>一个加法表达式中可能包含元素有乘法表达式或者加法表达式＋乘法表达式的意思。<br><br>这是简化后的答案，如果不简化的话，大家可以穷举一下。<br><br>本结中为了简单只使用了加法和乘法，没有减法除法等。<br><br>加法表达式包含，加法，乘法，加法＋乘法，加法＋加法，加法＋加法＋乘法 等等。<br><br>以上所有可能最终都可以用<br><br>乘法和加法＋乘法，两种元素代替。<br><br>至于为什么我就不知道了，我也是个萌新哈哈。看到这里大家应该都能差不多明白<br>A-&gt;M|A+M<br>究竟是个什么鬼东西了吧。","like_count":2},{"had_liked":false,"id":227221,"user_name":"Leoorz","can_delete":false,"product_type":"c1","uid":1030657,"ip_address":"","ucode":"8912628AD6ADE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","comment_is_top":false,"comment_ctime":1592317045,"is_pvip":false,"replies":[{"id":"84100","content":"分享一点我的观点：学习在很大程度上是个心理问题。<br>我们这门课的所有学员呢，会形成一个气场。当你看到别的同学也能学会的时候呢，你自然就会觉得，其实我也OK。<br>20多年前，我读研的时候，考GRE。以前一天背几十个单词就了不起了。到了GRE的班上，发现大家每天是背200~300个单词，于是自己也就接受了这个标准。<br>学计算机科学其实也一样。所有这些基础知识，其实都是每个人都有能力学会的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1592553781,"ip_address":"","comment_id":227221,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887284341","product_id":100034101,"comment_content":"老师真是太细致了，基本每个回答都回复，这一节上来就是劝退的节奏......基本是看下面回复看懂的哈哈，给老师点赞","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498538,"discussion_content":"分享一点我的观点：学习在很大程度上是个心理问题。\n我们这门课的所有学员呢，会形成一个气场。当你看到别的同学也能学会的时候呢，你自然就会觉得，其实我也OK。\n20多年前，我读研的时候，考GRE。以前一天背几十个单词就了不起了。到了GRE的班上，发现大家每天是背200~300个单词，于是自己也就接受了这个标准。\n学计算机科学其实也一样。所有这些基础知识，其实都是每个人都有能力学会的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592553781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186983,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1583983570,"is_pvip":false,"replies":[{"id":"77069","content":"实现一个具体的Parser的时候，有很多地方可以优化。我没有精力去细看JSON.parse的代码。只是做猜想，帮你分析两个可能的优化方向：<br>1.Javascript里有原生的正则表达式工具，是否可以借助它完成部分工作？因为它是本地代码编写的，性能会很高。<br>2.把字符串解析成json的时候，像ast这样的中间结构可能并不需要，因为json本身也是个树结构，不用再去重复了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586851634,"ip_address":"","comment_id":186983,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5878950866","product_id":100034101,"comment_content":"这门课真的特别“干货”，是我在timeGeek app里订阅过的课程里收获最大的一门课了没有之一（当然也是因为编译原理方面自己在大学书本中欠的债最严重）。目前基本看完了编译前端的理论部分，自己手撸了一个完整的 json-parse方法，用Node.js实现（因为借助chrome inspect单步调试各种bug很方便），发到这里宫老师有时间的时候帮忙看看点评下：github.com&#47;zhuyingda&#47;yastjson 另外自己做了跟原生parse方法的对比测试，发现自己实现的json-parse方法和Node.js原生的JSON.parse 在解析大json时性能差距巨大，2M的一个json字符串时间开销性能相差将近100倍（JSON.parse 几乎秒级....） 总之，这个课程真的很棒，期待老师的回复。","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486944,"discussion_content":"实现一个具体的Parser的时候，有很多地方可以优化。我没有精力去细看JSON.parse的代码。只是做猜想，帮你分析两个可能的优化方向：\n1.Javascript里有原生的正则表达式工具，是否可以借助它完成部分工作？因为它是本地代码编写的，性能会很高。\n2.把字符串解析成json的时候，像ast这样的中间结构可能并不需要，因为json本身也是个树结构，不用再去重复了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586851634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167046,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","nickname":"sugar","note":"","ucode":"454538FF253B5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232148,"discussion_content":"感谢老师百忙之中的回复，其中第1点在我的测试当中发现，占据主要时间的并不是词法分析环节，还是语法分析环节，因为涉及到json的大括号中括号消歧问题，循环嵌套产生了更大的时间复杂度。另外，因为我测试的运行环境是node.js，v8虚拟机对js代码的hot代码是会做jit优化的，这个优化的维度是函数级别，所以我理解在我们的这个场景下与native代码差异没有想象中那么大才对，至少不至于相差100倍。第2条确实是一个点了，毕竟我初次写这个程序时是本着照本宣科把编译器前端自己跑一遍的心态，并不是以性能最优的目的性；而且，拿到ast作为中间结构更有利于对json解析的过程做一些干预，比如防proto原型链污染等等。老师您提到的两个思路挺有启发的，我会继续研究这个问题的，待进一步的结论得出来之后我也会分享到这里来，期待老师还能继续关注我提的这个点～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586856882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144693,"user_name":"MC","can_delete":false,"product_type":"c1","uid":1200582,"ip_address":"","ucode":"105D3C4C819223","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/c6/3a723556.jpg","comment_is_top":false,"comment_ctime":1571998002,"is_pvip":false,"replies":[{"id":"57699","content":"你补充了以后，很详细准确，但是太长了。乘法运算有时还要加上求余数的，越加越长。<br><br>所以有时候就用一个单词代表算了：<br>additive：代表有加有减。<br>multiplicative：代表乘、除、求余。<br>assignment：代表=，+=， -=， *=， &#47;=...<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573444775,"ip_address":"","comment_id":144693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5866965298","product_id":100034101,"comment_content":"additionSubtractionExpression &#47;&#47;加法、减法的表达式的规则<br>    : multiplyDivideExpression &#47;&#47;乘法、除法的表达式规则，优先级高于加法、减法。<br>    | multiplyDivideExpression Add additionSubtractionExpression &#47;&#47;表达式 + 表达式<br>    | multiplyDivideExpression Sub additionSubtractionExpression &#47;&#47;表达式 - 表达式<br>    ;<br>multiplyDivideExpression  &#47;&#47;乘法、除法的表达式的规则<br>    : primary_expression &#47;&#47;一元表达式<br>    | primary_expression Mul multiplyDivideExpression &#47;&#47;表达式 * 表达式<br>    | primary_expression Div multiplyDivideExpression &#47;&#47;表达式 &#47; 表达式<br>    ;<br>primary_expression &#47;&#47;一元表达式的规则 <br>    : IntLiteral &#47;&#47;int的字面量<br>    ;","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472074,"discussion_content":"你补充了以后，很详细准确，但是太长了。乘法运算有时还要加上求余数的，越加越长。\n\n所以有时候就用一个单词代表算了：\nadditive：代表有加有减。\nmultiplicative：代表乘、除、求余。\nassignment：代表=，+=， -=， *=， /=...\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573444775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132997,"user_name":"陈越","can_delete":false,"product_type":"c1","uid":1007632,"ip_address":"","ucode":"C27ED9BE19913E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/10/2c533d89.jpg","comment_is_top":false,"comment_ctime":1568296014,"is_pvip":true,"replies":[{"id":"51374","content":"感谢分享！<br>是的，递归的最大优点就是直观、简洁。<br><br>当然，如果递归嵌套层数太多，系统开销会比较大。这个时候需要改写和优化。对于嵌套层数有限的场景，用递归就行了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568697701,"ip_address":"","comment_id":132997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5863263310","product_id":100034101,"comment_content":"    最近在做leetcode，所有与树相关的题目都可以用递归解决，虽然有些也可以用栈或队列解决，但使用递归的代码真的更简洁。<br><br>    另外，记得当年看盗梦空间的时候，心里就想，这不就是递归吗:D","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467207,"discussion_content":"感谢分享！\n是的，递归的最大优点就是直观、简洁。\n\n当然，如果递归嵌套层数太多，系统开销会比较大。这个时候需要改写和优化。对于嵌套层数有限的场景，用递归就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568697701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127438,"user_name":"windpiaoxue","can_delete":false,"product_type":"c1","uid":1258079,"ip_address":"","ucode":"3769AAFFB61814","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/5f/0c870296.jpg","comment_is_top":false,"comment_ctime":1566712473,"is_pvip":false,"replies":[{"id":"47323","content":"哈哈！<br>你提供了一个很好的广度优先的自顶向下算法的例子。<br>递归下降算法是深度优先的。当你第二次试图用S匹配的时候，算法还是会试图匹配全部的Token，而不是只去匹配第一个Token。<br>我在第15讲里，把自顶向下的算法做梳理的时候，会提到这个广度优先算法。广度优先算法有好处，就是可以避免左递归。但它会导致更多次的回溯，是指数级上升的，所以没有实际用途。<br>而深度优先的递归下降算法，虽然会有左递归的毛病，但回溯次数不多，具有实际使用价值。<br>另外，动手写写算法验证一下马上就清楚了。<br>恭喜你，你可能比别的同学了解得更透彻！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566790640,"ip_address":"","comment_id":127438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861679769","product_id":100034101,"comment_content":"老师您好<br>我理解的是消除左递归主要原因是：<br>1：在程序中要回溯和比较推导结果是否匹配(很麻烦)<br>2：遇到不合法的语句时会无限展开<br>是不是在正确的语句情况下还是可以的推导出来<br>例如：<br>S-&gt;1|S+1<br>在匹配1+1的时候<br>S-&gt;1(匹配失败尝试第二个产生式)<br>S-&gt;S+1(从最左非终结符继续推导)<br>S-&gt;1+1(比较推导结果发现匹配, 推导完成)<br>不知道这样理解对不对，希望老师指点一下","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464491,"discussion_content":"哈哈！\n你提供了一个很好的广度优先的自顶向下算法的例子。\n递归下降算法是深度优先的。当你第二次试图用S匹配的时候，算法还是会试图匹配全部的Token，而不是只去匹配第一个Token。\n我在第15讲里，把自顶向下的算法做梳理的时候，会提到这个广度优先算法。广度优先算法有好处，就是可以避免左递归。但它会导致更多次的回溯，是指数级上升的，所以没有实际用途。\n而深度优先的递归下降算法，虽然会有左递归的毛病，但回溯次数不多，具有实际使用价值。\n另外，动手写写算法验证一下马上就清楚了。\n恭喜你，你可能比别的同学了解得更透彻！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566790640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127051,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1566544974,"is_pvip":true,"replies":[{"id":"47011","content":"你是指lab&#47;craft下面的代码吗？<br>建议1：不用任何IDE，只找个编辑器，编辑完以后javac *.java就可以了。<br>建议2：用idea的基于已有代码建立新工程的功能，引入示例代码，会成功的建立一个工程的。实在不行，建立一个空的工程，把代码文件拷贝过去。<br><br>如果你是指其他我们课程还没用到的部分，那先别着急。我到时会更新readme。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566553234,"ip_address":"","comment_id":127051,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861512270","product_id":100034101,"comment_content":"拿个 github 工程 idea 运行不了  请老师指导","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464296,"discussion_content":"你是指lab/craft下面的代码吗？\n建议1：不用任何IDE，只找个编辑器，编辑完以后javac *.java就可以了。\n建议2：用idea的基于已有代码建立新工程的功能，引入示例代码，会成功的建立一个工程的。实在不行，建立一个空的工程，把代码文件拷贝过去。\n\n如果你是指其他我们课程还没用到的部分，那先别着急。我到时会更新readme。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566553234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057056,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","nickname":"秋天","note":"","ucode":"A7E1D953EF7E17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5963,"discussion_content":"好的，谢谢老师，还有就是，编译原理有些语法说的不是太懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566553715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126718,"user_name":"长方体混凝土移动工程师","can_delete":false,"product_type":"c1","uid":1262728,"ip_address":"","ucode":"00CB4C4AB4D119","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/88/69580101.jpg","comment_is_top":false,"comment_ctime":1566457126,"is_pvip":false,"replies":[{"id":"46862","content":"点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566462667,"ip_address":"","comment_id":126718,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5861424422","product_id":100034101,"comment_content":"小人使用swift 实现了一个版本: https:&#47;&#47;github.com&#47;czqasngit&#47;Compiler.git 🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🍅🍆🌽🍄🌰🍞🍖🍗","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464134,"discussion_content":"点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566462667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632261,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e8/05/a623c531.jpg","nickname":"Rockbean","note":"","ucode":"30D0BDFB47D38B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6114,"discussion_content":"demo删掉了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566709857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082539,"avatar":"https://static001.geekbang.org/account/avatar/00/10/84/ab/9902ab56.jpg","nickname":"如也","note":"","ucode":"12601101BC22C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6016,"discussion_content":"鄙人，不是小人。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566610850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126518,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1566400068,"is_pvip":false,"replies":[{"id":"46808","content":"那个是程序打印输出的。程序打印的时候没法画成一个树状的图，就用缩进代表树状结构。下一级AST节点缩进更多一些。我在第一讲中，讲到用clang输出AST，它也是这样用缩进代表树状结构的。<br><br>我们的课程是带着示例代码的，看一看跑一跑示例代码就全明白了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566432189,"ip_address":"","comment_id":126518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861367364","product_id":100034101,"comment_content":"文中多次说到&quot;得到下面的AST&quot;，然后给出了带缩进的几行文字，这些缩进有什么意义吗？没有看太懂，如果去网上搜这种缩进形式应该搜什么关键词？","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464029,"discussion_content":"那个是程序打印输出的。程序打印的时候没法画成一个树状的图，就用缩进代表树状结构。下一级AST节点缩进更多一些。我在第一讲中，讲到用clang输出AST，它也是这样用缩进代表树状结构的。\n\n我们的课程是带着示例代码的，看一看跑一跑示例代码就全明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566432189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125528,"user_name":"萌妻的路飞","can_delete":false,"product_type":"c1","uid":1347387,"ip_address":"","ucode":"266E4286614CDF","user_header":"https://static001.geekbang.org/account/avatar/00/14/8f/3b/234ce259.jpg","comment_is_top":false,"comment_ctime":1566198777,"is_pvip":false,"replies":[{"id":"46096","content":"你的困难是很多同学都会遇到的。<br>我的建议：<br>1.重在建立直觉认识，也就是先理解这件事情，之后再去管术语、算法什么的。<br>2.一定要动手。我们只有动手，才能真正理解所学的。建议你找出你的领域的一个问题，看看能不能跟着我们的课程解决它。<br><br>另外，我把回复另一个同学的信息也贴在这里，供你参考：<br><br>阿名<br>2019-08-19 04:44<br>如果没有基础 比较难听得懂 比如文法推导 终结符 非终结符 这些概念 本身就不好理解<br>03 | 语法分析（一）：纯手工打造公式计算器<br>作者回复：<br>实际上，这些看上去比较正式的术语，是我在这篇文稿的最后一版才加上去的。其实，你忽略这些术语，也完全能看懂文稿。加上这些术语，是为后面正式讲算法做个铺垫。<br>我知道编译原理的术语本身就能吓倒很多人。但是这门课程的重点在于帮你建立直觉（Intuition）。建立起直觉来以后，你其实已经明白了语法分析的过程，你已经对它有熟悉感了。之后你再把这些直觉跟术语联系在一起，就不觉得困难了。<br>再次强调一点，首先建立直觉，然后再追求对术语和算法的严格理解。<br>学编译原理最大的困难不是这门课本身的难度，而是我们对它的畏惧心理。相信你自己！<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566210106,"ip_address":"","comment_id":125528,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861166073","product_id":100034101,"comment_content":"老师，感觉没有基础，这几章都好难理解啊。还有java代码也不是很熟悉。老师建议我这种没有基础的先囫囵吞枣的看，等有一定基础了，再回来慢慢细看吗","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463595,"discussion_content":"你的困难是很多同学都会遇到的。\n我的建议：\n1.重在建立直觉认识，也就是先理解这件事情，之后再去管术语、算法什么的。\n2.一定要动手。我们只有动手，才能真正理解所学的。建议你找出你的领域的一个问题，看看能不能跟着我们的课程解决它。\n\n另外，我把回复另一个同学的信息也贴在这里，供你参考：\n\n阿名\n2019-08-19 04:44\n如果没有基础 比较难听得懂 比如文法推导 终结符 非终结符 这些概念 本身就不好理解\n03 | 语法分析（一）：纯手工打造公式计算器\n作者回复：\n实际上，这些看上去比较正式的术语，是我在这篇文稿的最后一版才加上去的。其实，你忽略这些术语，也完全能看懂文稿。加上这些术语，是为后面正式讲算法做个铺垫。\n我知道编译原理的术语本身就能吓倒很多人。但是这门课程的重点在于帮你建立直觉（Intuition）。建立起直觉来以后，你其实已经明白了语法分析的过程，你已经对它有熟悉感了。之后你再把这些直觉跟术语联系在一起，就不觉得困难了。\n再次强调一点，首先建立直觉，然后再追求对术语和算法的严格理解。\n学编译原理最大的困难不是这门课本身的难度，而是我们对它的畏惧心理。相信你自己！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566210106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqVMLKa5NXlehH9UwoGbkIyDEaNHjxbUeVlDHHvvUrRnCEED82lW6Pdw4caY3U5tmsndhbIwjyIbw/132","nickname":"YellowDuck","note":"","ucode":"9F1D2473CBA59B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284222,"discussion_content":"和语言没有关系的吧...而且不是写java的读java代码读起来很好读的...如果从来没了解过java另当别论了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592476296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349284,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":2712078,"ip_address":"","ucode":"32C83B9B063541","user_header":"https://static001.geekbang.org/account/avatar/00/29/62/0e/af82f76f.jpg","comment_is_top":false,"comment_ctime":1655865590,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655865590","product_id":100034101,"comment_content":"感觉可以改写加法规则： A -&gt; Int | A + M来避免左递归，这样对吗","like_count":0},{"had_liked":false,"id":345997,"user_name":"黄秋生","can_delete":false,"product_type":"c1","uid":2642855,"ip_address":"","ucode":"21EBB35A5FE77F","user_header":"https://static001.geekbang.org/account/avatar/00/28/53/a7/a3f98d9c.jpg","comment_is_top":false,"comment_ctime":1652756442,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652756442","product_id":100034101,"comment_content":"这里最好设计成状态机吧！而且这里也没有考虑空格的情况，说实话其实代码实现都不是很重要。","like_count":0},{"had_liked":false,"id":343873,"user_name":"铭","can_delete":false,"product_type":"c1","uid":1237742,"ip_address":"","ucode":"F634E0D402CF37","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/ee/66f6e84a.jpg","comment_is_top":false,"comment_ctime":1651109328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651109328","product_id":100034101,"comment_content":"TokenReader是个什么类型呀","like_count":0},{"had_liked":false,"id":330384,"user_name":"果然爸爸","can_delete":false,"product_type":"c1","uid":1467300,"ip_address":"","ucode":"0E5F031A0E6A69","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/a4/e663c4d4.jpg","comment_is_top":false,"comment_ctime":1641960232,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1641960232","product_id":100034101,"comment_content":"additiveExpression<br>    : multiplicativeExpression<br>    | additiveExpression Plus multiplicativeExpression<br>    ;<br> <br>multiplicativeExpression<br>    : IntLiteral<br>    | multiplicativeExpression Star IntLiteral<br>    ;<br>为什么最后是写成这样的语法规则。感觉应该有很多写法，只是这种最简洁？老师能不能详细讲一下<br>比如为什么不是<br>additiveExpression<br>    : multiplicativeExpression<br>    | additiveExpression Plus multiplicativeExpression <br>    | IntLiteral<br>    | additiveExpression Plus additiveExpression<br>    ;","like_count":0,"discussions":[{"author":{"id":1630889,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e2/a9/d2720608.jpg","nickname":"慧强","note":"","ucode":"3864410D115D02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549688,"discussion_content":"而且 additiveExpression Plus additiveExpression 是也就是说这个是自己推到出自己递归推导，永远也推不出只包含终结符的产生式。你为什么不问为什么没有 这种additiveExpression Plus additiveExpression Plus additiveExpression ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644211219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630889,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e2/a9/d2720608.jpg","nickname":"慧强","note":"","ucode":"3864410D115D02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549686,"discussion_content":"你写的这种  | IntLiteral\n    | additiveExpression Plus additiveExpression\n    ;  根本走不下去啊   \nIntLiteral  这个在multiplicativeExpression 已经被匹配了\n additiveExpression Plus additiveExpression 这样写法有什么意义？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644210068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329490,"user_name":"Geek_a2ebc2","can_delete":false,"product_type":"c1","uid":2882139,"ip_address":"","ucode":"AAA323CF062042","user_header":"","comment_is_top":false,"comment_ctime":1641369497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641369497","product_id":100034101,"comment_content":"老师你好，这里代码有误：<br>private SimpleASTNode additive(TokenReader tokens) throws Exception { <br>      SimpleASTNode child1 = multiplicative(); &#47;&#47;计算第一个子节点<br>      ......<br>应该是multiplicative(tokens)<br>最好能把multiplicative的代码也贴一下，要不然没看码云的完整代码的同学可能会一头雾水<br>","like_count":0},{"had_liked":false,"id":315275,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1633779175,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1633779175","product_id":100034101,"comment_content":"有些难度了，小白会比较吃力","like_count":0},{"had_liked":false,"id":312775,"user_name":"hYector","can_delete":false,"product_type":"c1","uid":2173880,"ip_address":"","ucode":"C1DEEB8FAC0B2E","user_header":"https://static001.geekbang.org/account/avatar/00/21/2b/b8/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1631986602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631986602","product_id":100034101,"comment_content":"这一课，对于初学者来说，只看课程不将语法解析器demo实践出来，会很难理解什么是下降。还有一定要结合老师仓库的源代码学习。实践下来，也能理解最终的AST并不是死板的，可以根据需要灵活取舍构建。加油，用python实现出来，更有信心了。","like_count":0},{"had_liked":false,"id":312181,"user_name":"菜鸟","can_delete":false,"product_type":"c1","uid":2451215,"ip_address":"","ucode":"214A61B6B3410F","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/0f/3cb10900.jpg","comment_is_top":false,"comment_ctime":1631674698,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1631674698","product_id":100034101,"comment_content":"老师，您提供的代码GitHub，下载下来后怎样编译运行啊？（本人没搞过JAva，也没用过intellijidea）<br>使用的IDE是：intellijidea ，项目的配置方式能不能给介绍一下。Java 环境已配置好，应该是还缺少一些配置没做，却不知道怎么配置。","like_count":0},{"had_liked":false,"id":309380,"user_name":"菜鸟","can_delete":false,"product_type":"c1","uid":2451215,"ip_address":"","ucode":"214A61B6B3410F","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/0f/3cb10900.jpg","comment_is_top":false,"comment_ctime":1630076414,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1630076414","product_id":100034101,"comment_content":"AdditiveExpression,递归调用没传参数，multiplicativeExpression没有定义。","like_count":0},{"had_liked":false,"id":299657,"user_name":"任国宁","can_delete":false,"product_type":"c1","uid":1960963,"ip_address":"","ucode":"FE47D8DB5FA4C7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXoqDLvF3l8OzIwDBVlbgZ2FtbPFoncicFjQPqMFkKqdG5BnRVIxxrN40zUhTkynsd6yLhqqYiblAQ/132","comment_is_top":false,"comment_ctime":1624784206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624784206","product_id":100034101,"comment_content":"如何理解左递归问题？<br>下面以产生式“additive -&gt; Int | additive Plus Int&quot; 匹配“2+3”为例说明一下。<br>additive 可以 被匹配为 “Int”或者 “additive Plus Int”，<br>有两种选择，<br>先选择第一种：匹配为 “Int” ，消费当前token：2，发现是Int，将此token消费后，新的当前token为token：+，所以additive直接匹配为“Int”是失败的。<br>那么我们回溯，尝试将additive匹配为“additive Plus Int”，<br>因为发生回溯，所以已经消费的token：2再次变成当前token。<br>现在变成使用“additive Plus Int” 匹配tokens了。<br>按照最左推导规则，从左到右依次将非终结符匹配为终结符，那么我们应该先匹配“additive Plus Int” 中的非终结符”additive“。<br>至此又变成使用&quot;additive&quot;匹配tokens。而tokens中也还没有任何一个token被消费呐（token：2被回溯了不算已消费）。<br>所以发生了无穷递归。这就是左递归的问题","like_count":0},{"had_liked":false,"id":291891,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1620573842,"is_pvip":false,"replies":[{"id":"105999","content":"基本差不多。<br>我来重新表述一下，看看这样是否更易懂：<br>“2+3*5”是一个additiveExpression吗？<br>    -&gt;“2+3*5”是一个multiplicativeExpression吗？<br>        -&gt;“2+3*5”是一个Literal吗？不是。2后面不是终结符($)。<br>        -&gt;“2+3*5”是一个multiplicativeExpression Star IntLitera吗？<br>           -&gt;“2+3*5”是一个multiplicativeExpression吗？在这里开始进入递归。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1620984401,"ip_address":"","comment_id":291891,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1620573842","product_id":100034101,"comment_content":"老师，我的思考过程是这样，用下面文法来解析2+3*5表达式：<br><br>```<br>additiveExpression<br>    :   multiplicativeExpression<br>    |   additiveExpression Plus multiplicativeExpression<br>    ;<br><br>multiplicativeExpression<br>    :   IntLiteral<br>    |   multiplicativeExpression Star IntLiteral<br>    ;<br>```<br><br>additiveExpression -&gt; multiplicativeExpression <br>                   -&gt; IntLiteral 不满足，进入乘法生产式2<br>                   -&gt; multiplicativeExpression Star IntLiteral<br>                                               -&gt; IntLiteral Star IntLiteral 不满足，进入乘法生成式2<br>                                               -&gt; multiplicativeExpression Star IntLiteral Star IntLiteral 到这样就进入无限递归，这样就解析不了上面表达式了<br><br>老师我这样思考有问题吗？麻烦老师帮我解惑一下，","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519594,"discussion_content":"基本差不多。\n我来重新表述一下，看看这样是否更易懂：\n“2+3*5”是一个additiveExpression吗？\n    -&amp;gt;“2+3*5”是一个multiplicativeExpression吗？\n        -&amp;gt;“2+3*5”是一个Literal吗？不是。2后面不是终结符($)。\n        -&amp;gt;“2+3*5”是一个multiplicativeExpression Star IntLitera吗？\n           -&amp;gt;“2+3*5”是一个multiplicativeExpression吗？在这里开始进入递归。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620984401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684811,"avatar":"","nickname":"杨帅","note":"","ucode":"0A558B1BA62E44","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383270,"discussion_content":"请问，代码中没有回搠的操作，而是直接按照既定的逻辑就解析tokens了，那和这个有什么联系吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626017733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439568,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","nickname":",","note":"","ucode":"191431A878D7B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374193,"discussion_content":"懂了，谢谢老师⊙ω⊙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621058059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291758,"user_name":"Gaollard","can_delete":false,"product_type":"c1","uid":1378779,"ip_address":"","ucode":"1B200F5E73C3E1","user_header":"https://static001.geekbang.org/account/avatar/00/15/09/db/78996b11.jpg","comment_is_top":false,"comment_ctime":1620466546,"is_pvip":false,"replies":[{"id":"105998","content":"这个问题是通过语法分析解决的。<br>在设计语法规则的时候，有两条语法规则会跟负号相关：一条处理一元运算的，比如-2；另一条是处理二元运算的，比如a-2。通过语法规则可以把它们区分开，这样就不会冲突了。<br>在词法分析阶段，会返回2，作为字面量。不会把-2作为一个Token的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1620983594,"ip_address":"","comment_id":291758,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620466546","product_id":100034101,"comment_content":"老是您好，对于 `-2 - 2` 中，`-` 既有取反又有去减法的含义，那么我怎么知道它属于哪一种呢？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519561,"discussion_content":"这个问题是通过语法分析解决的。\n在设计语法规则的时候，有两条语法规则会跟负号相关：一条处理一元运算的，比如-2；另一条是处理二元运算的，比如a-2。通过语法规则可以把它们区分开，这样就不会冲突了。\n在词法分析阶段，会返回2，作为字面量。不会把-2作为一个Token的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620983594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282728,"user_name":"Neil","can_delete":false,"product_type":"c1","uid":1206345,"ip_address":"","ucode":"909A2103DFEE1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/49/418a9486.jpg","comment_is_top":false,"comment_ctime":1615380544,"is_pvip":false,"replies":[{"id":"105388","content":"祝贺:-)","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1619791012,"ip_address":"","comment_id":282728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615380544","product_id":100034101,"comment_content":"终于看懂了，特别是下面的推倒，刚开始一脸懵逼，我参考自制编译器这本书和ANTRL4官方文档，回头再看这个，感觉一下子就通了","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516822,"discussion_content":"祝贺:-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619791012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274005,"user_name":"宋捷","can_delete":false,"product_type":"c1","uid":1333006,"ip_address":"","ucode":"7905BABF1D8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/0e/36847d8c.jpg","comment_is_top":false,"comment_ctime":1610785670,"is_pvip":false,"replies":[{"id":"99541","content":"不错，还写了很清晰的文档，很有条理。点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1610933216,"ip_address":"","comment_id":274005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610785670","product_id":100034101,"comment_content":"老师我去练习啦，写了个js版本的本小节的实现代码 https:&#47;&#47;github.com&#47;superjunjin&#47;compiler","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513892,"discussion_content":"不错，还写了很清晰的文档，很有条理。点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610933216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272893,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1610349161,"is_pvip":true,"replies":[{"id":"99547","content":"不错！<br>从github上看到你做了很多练习了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1610934729,"ip_address":"","comment_id":272893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610349161","product_id":100034101,"comment_content":"Python版本的实现<br><br>https:&#47;&#47;github.com&#47;leveryd&#47;PlayWithCompiler&#47;blob&#47;master&#47;lab&#47;SimpleCalc.py","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513422,"discussion_content":"不错！\n从github上看到你做了很多练习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610934729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265047,"user_name":"酷吧你我他","can_delete":false,"product_type":"c1","uid":1374673,"ip_address":"","ucode":"8588778638D9F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/d1/a1ca4797.jpg","comment_is_top":false,"comment_ctime":1606745059,"is_pvip":true,"replies":[{"id":"98492","content":"自顶向下的解析过程，不是去匹配一个Token，而是匹配整个表达式。也就是说，去看“2+3”是不是一个整型字面量。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609739485,"ip_address":"","comment_id":265047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606745059","product_id":100034101,"comment_content":"在解析 “2 + 3”这样一个最简单的加法表达式的时候，我们直观地将其翻译成算法，结果出现了如下的情况：首先匹配是不是整型字面量，发现不是；<br>2 难道 不是 整型字面量 吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510780,"discussion_content":"自顶向下的解析过程，不是去匹配一个Token，而是匹配整个表达式。也就是说，去看“2+3”是不是一个整型字面量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609739485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246669,"user_name":"Ivan.Qi","can_delete":false,"product_type":"c1","uid":1099170,"ip_address":"","ucode":"36F46A4D1F0EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/a2/4ece341b.jpg","comment_is_top":false,"comment_ctime":1599449831,"is_pvip":false,"replies":[{"id":"91250","content":"看到了你的代码，不错！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1600175015,"ip_address":"","comment_id":246669,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599449831","product_id":100034101,"comment_content":"C++ SimpleCalculator<br>https:&#47;&#47;github.com&#47;Ivanqi&#47;CompilationPrinciple&#47;tree&#47;master&#47;craft&#47;tests&#47;SimpleCalculator","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505201,"discussion_content":"看到了你的代码，不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600175015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244691,"user_name":"ben","can_delete":false,"product_type":"c1","uid":2097533,"ip_address":"","ucode":"3287431472A90C","user_header":"https://static001.geekbang.org/account/avatar/00/20/01/7d/36a82725.jpg","comment_is_top":false,"comment_ctime":1598619036,"is_pvip":false,"replies":[{"id":"90551","content":"你的理解没错！<br>实际上，在使用递归下降算法时，就是把M和A分别写成一个函数，比如matchM()、matchA()。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1599358069,"ip_address":"","comment_id":244691,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598619036","product_id":100034101,"comment_content":"来回看了好几遍，终于有点感觉了。<br>2+3<br>A-&gt;M|A+M<br>就是在匹配A+M的时候，第一个A一开始要尽可能匹配2+3，这时不断地递归进去让A匹配2+3了。<br><br>A-&gt;M|M+A<br>这个在匹配M+A时，第一个匹配M和2+3是失败的，但不会递归进去，而是找另一种可能，按整个M+A来匹配2+3，这时最后的3从M+A的A里递归进去时，匹配上了A-&gt;M .这时3就是递归的终止条件了。<br><br>这里的A,M可以看成一个方法函数可能更好理解，输入值的不同，输出返回也就不同，不能看成常量。<br><br>不知道这样理解是否正确？<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504666,"discussion_content":"你的理解没错！\n实际上，在使用递归下降算法时，就是把M和A分别写成一个函数，比如matchM()、matchA()。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599358069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242764,"user_name":"曹源","can_delete":false,"product_type":"c1","uid":1042459,"ip_address":"","ucode":"A0A982159FF758","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/1b/9d1c6077.jpg","comment_is_top":false,"comment_ctime":1597835161,"is_pvip":false,"replies":[{"id":"90560","content":"恭喜！温故而知新！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1599373082,"ip_address":"","comment_id":242764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597835161","product_id":100034101,"comment_content":"过了很久再回来看，终于彻底明白了。这里的左递归问题要放在不断消耗token流的大背景下才好理解，不是一般的递归问题。<br>因为消耗token流只能从左往右消耗，不消除左递归，第一个token始终消耗不掉，所以就卡死了。<br>为什么第一个token消耗不掉，因为additiveExpression Plus multiplicativeExpression这一步并不会消耗token，所以不断调用他是没有用的。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504092,"discussion_content":"恭喜！温故而知新！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599373082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237331,"user_name":"不会魔法","can_delete":false,"product_type":"c1","uid":2085129,"ip_address":"","ucode":"6B470D893A64F1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","comment_is_top":false,"comment_ctime":1595781988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595781988","product_id":100034101,"comment_content":"老师您好，我看了您本章和下一章的所有回复，但我还是没有弄明白<br><br>additiveExpression<br>    : multiplicativeExpression<br>    | additiveExpression Plus multiplicativeExpression<br>    ;<br> <br>multiplicativeExpression<br>    : IntLiteral<br>    | multiplicativeExpression Star IntLiteral<br>    ;<br>思考一番之后，我们把规则分成两级：第一级是加法规则，第二级是乘法规则。把乘法规则作为加法规则的子规则，这样在解析形成 AST 时，乘法节点就一定是加法节点的子节点，从而被优先计算<br>还是这个问题。<br><br>您回复里面有说上面的表达式是什么意思，但是没有说为什么是这个样子，为啥一个a就能推导成m|a+m。为什么这样推导。我怎么就不知道要这样推导，我怎么不知道a是a|a+m，请老师帮忙解惑，是否学习本课程之前需要有预科内容，这是数学内容吗，需要有什么样的数学基础或者计算机基础呢<br><br>","like_count":0},{"had_liked":false,"id":231775,"user_name":"云淡风轻","can_delete":false,"product_type":"c1","uid":1121817,"ip_address":"","ucode":"D6903A0FCEBC58","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/19/a235f31d.jpg","comment_is_top":false,"comment_ctime":1593767591,"is_pvip":false,"replies":[{"id":"86340","content":"不错，看到了，用C++实现的！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1594560168,"ip_address":"","comment_id":231775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593767591","product_id":100034101,"comment_content":"这一章结合代码看了一周，代码理解了，文章中的术语没太理解。自己动手实现了一下。https:&#47;&#47;github.com&#47;Alvinyk&#47;compilation.git","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500434,"discussion_content":"不错，看到了，用C++实现的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594560168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229133,"user_name":"江世民","can_delete":false,"product_type":"c1","uid":1966624,"ip_address":"","ucode":"B328FA859E1007","user_header":"","comment_is_top":false,"comment_ctime":1592904220,"is_pvip":false,"replies":[{"id":"84589","content":"恭喜，你闯过了一关！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1592958130,"ip_address":"","comment_id":229133,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1592904220","product_id":100034101,"comment_content":"看了三遍，一直卡在无限调用那里，不明白为什么会出现无限调用，结合着代码终于看懂了。<br>还是文中的例子<br>AdditiveExpression:<br>    : IntLiteral<br>    | AdditiveExpression Plus IntLiteral<br>在解析“2+3”时，进行了如下步骤：<br>（1）解析“2”，发现是一个IntLiteral，应该匹配第一条规则，但别急，现在还没匹配结束；<br>（2）解析“+”，发现IntLiteral后面还跟着个加号，所以不应该匹配第一条规则，而应该匹配第二条；<br>（3）第二条规则需要首先匹配AdditiveExpression，所以要重新从“2”开始解析，看看能不能匹配上AdditiveExpression，此时回到步骤（1），开始了无限调用。<br><br>而如果把第二条规则中的AdditiveExpression放到后面呢？<br><br>AdditiveExpression:<br>    : IntLiteral<br>    | IntLiteral Plus AdditiveExpression<br>还是解析“2+3”，过程变成了这样：<br>（1）解析“2”，发现是一个IntLiteral，应该匹配第一条规则，但别急，现在还没匹配结束；<br>（2）解析“+”，发现IntLiteral后面还跟着个加号，所以不应该匹配第一条规则，而应该匹配第二条；<br>（3）第二条规则需要首先匹配IntLiteral，所以要重新从“2”开始解析，发现“2”正好匹配上了，然后再匹配Plus，发现“2”后面的加号也正好匹配上了，最后拿“3”去匹配AdditiveExpression，此时回到步骤（1），发现也正好匹配上了，并且整个token串也解析完毕。<br><br>理解到这里，我也明白了前一讲中为什么要有一个预读的方法peek()，这里是用来看一下IntLiteral后面是否还有加号，以此来选择匹配哪一条规则。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499348,"discussion_content":"恭喜，你闯过了一关！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592958130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1928817,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/oHWfrFczyrJnMADiaKUe1XCVweJq27rHvdSJ8AEvxztalYEL2icLW3oHTmZk0nfJiaTLbAiagZ73iaCG8mHDDT0H4VQ/132","nickname":"Geek_940c41","note":"","ucode":"D150BC8FA85C79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588846,"discussion_content":"翻了好多页 终于看懂了 思路清晰啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664163549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224783,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1591538281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591538281","product_id":100034101,"comment_content":"递归+分治解决xx文件的无限维度结构分析，并且实现取列替换等等，不得不说递归和分治结合起来能解决很多问题","like_count":0},{"had_liked":false,"id":216500,"user_name":"我不是极客","can_delete":false,"product_type":"c1","uid":1513198,"ip_address":"","ucode":"79C49CD3CCD41B","user_header":"","comment_is_top":false,"comment_ctime":1589272750,"is_pvip":false,"replies":[{"id":"82316","content":"这件事在我的待办中，我加快速度。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1591081747,"ip_address":"","comment_id":216500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589272750","product_id":100034101,"comment_content":"我就想问，github上的代码能不能不要以文本的方式，搞成maven啊，不然一堆依赖报错，头疼","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494843,"discussion_content":"这件事在我的待办中，我加快速度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591081747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207704,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1587142304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587142304","product_id":100034101,"comment_content":"循环也只能用上下文无关文法表达吧。本质上循环跟递归是等价的。","like_count":0},{"had_liked":false,"id":205068,"user_name":"炎发灼眼","can_delete":false,"product_type":"c1","uid":1425953,"ip_address":"","ucode":"7D195057C8E94C","user_header":"https://static001.geekbang.org/account/avatar/00/15/c2/21/a8ef82ac.jpg","comment_is_top":false,"comment_ctime":1586519489,"is_pvip":false,"replies":[{"id":"76653","content":"首先，是要先匹配那个长的产生式。我回头把文稿改改，把A-&gt;A + Int写在前面。长的这个匹配不上，再去匹配短的（A-&gt;Int）。<br>因为左递归是个共性问题，所以我在第19讲有专门的答疑，你可以提前先去阅读一下。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586527685,"ip_address":"","comment_id":205068,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586519489","product_id":100034101,"comment_content":"老师，对于左递归，本来感觉看懂了，多看了几遍，发现又懵了，<br>例如：2+3这个式子，用A-&gt;Int | A + Int去推导，就是用2+3去匹配第一个式子Int，不满足，然后看是否满足第二个式子A + Int，<br>这个时候，看你的解释是，继续用2+3去匹配A，而不是用2+3去匹配A + Int，这是第一个疑惑，<br>第二，改成A-&gt;Int|Int + A之后，用2+3去匹配Int，不满足，然后看是否满足Int + A，这个时候，又是用整个式子2+3去匹配Int + A，或者说<br>用Int + A中的Int去匹配2了，那什么时候用整个式子去匹配，又什么时候用单个节点去匹配呢？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491374,"discussion_content":"首先，是要先匹配那个长的产生式。我回头把文稿改改，把A-&amp;gt;A + Int写在前面。长的这个匹配不上，再去匹配短的（A-&amp;gt;Int）。\n因为左递归是个共性问题，所以我在第19讲有专门的答疑，你可以提前先去阅读一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586527685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204948,"user_name":"Hommin","can_delete":false,"product_type":"c1","uid":1299763,"ip_address":"","ucode":"C020CA5DE785DB","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/33/d79fae5c.jpg","comment_is_top":false,"comment_ctime":1586498587,"is_pvip":false,"replies":[{"id":"76600","content":"好的。过几天会把这几章优化一下，把一些术语定义加上。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586510175,"ip_address":"","comment_id":204948,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586498587","product_id":100034101,"comment_content":"最好把终结符和非终结符解释一下，不会编译原理的我懵逼了半天","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491333,"discussion_content":"好的。过几天会把这几章优化一下，把一些术语定义加上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586510175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203540,"user_name":"九叔(高翔龙)","can_delete":false,"product_type":"c1","uid":1936418,"ip_address":"","ucode":"269F29B7090C7D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8c/22/28bf1183.jpg","comment_is_top":false,"comment_ctime":1586230031,"is_pvip":false,"replies":[{"id":"76603","content":"很多同学都有你这个疑问。这里的关键，在于理解递归下降算法是深度优先的。你的思路实际上是宽度优先的。<br>在第19章，我对这个问题做了集中答疑，你可以看看。<br>在留言区，还有其他同学遇到过类似问题，你也可以看看我对他们的回复。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586510766,"ip_address":"","comment_id":203540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586230031","product_id":100034101,"comment_content":"在解析 “2 + 3”这样一个最简单的加法表达式的时候，我们直观地将其翻译成算法，结果出现了如下的情况：首先匹配是不是整型字面量，发现不是；然后匹配是不是加法表达式，这里是递归调用；会重复上面两步，无穷无尽。<br>=========================<br>老师的意思是，如果发现不是字面值就回溯并递归，死循环。<br>但是如果正常来看，我为什么要去匹配整个token串？？？<br>token(2)<br>token(+)<br>token(3)<br>按顺序走，一个一个来，则不会出现左递归，为什么非要去匹配一个整串？？？？不理解","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490890,"discussion_content":"很多同学都有你这个疑问。这里的关键，在于理解递归下降算法是深度优先的。你的思路实际上是宽度优先的。\n在第19章，我对这个问题做了集中答疑，你可以看看。\n在留言区，还有其他同学遇到过类似问题，你也可以看看我对他们的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586510766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199671,"user_name":"幻境之桥","can_delete":false,"product_type":"c1","uid":1061517,"ip_address":"","ucode":"F9F4DD94CB554E","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","comment_is_top":false,"comment_ctime":1585493431,"is_pvip":false,"replies":[{"id":"76646","content":"嗯。看的语法规则多了以后，你会在里面发现美感:-D<br>因为简洁的，就是美的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586524753,"ip_address":"","comment_id":199671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585493431","product_id":100034101,"comment_content":"之前一直没明白为什么加法的生产式需要这样写：<br>additiveExpression<br>    : multiplicativeExpression<br>    | additiveExpression Plus multiplicativeExpression<br>    ;<br>而不是下面这样各校情况的组合<br><br>additiveExpression<br>    :   IntLiteral<br>    |   IntLiteral Plus IntLiteral<br>    |   additiveExpression Plus IntLiteral<br>    |   IntLiteral Plus additiveExpression <br>    |   multiplicativeExpression Plus additiveExpression<br>    |   multiplicativeExpression Plus IntLiteral<br>    ;<br><br>后面的看不懂回过头来第二次看才发现直接给出的简短生产式就足以表示所有的可能，抽象能力太强了","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489863,"discussion_content":"嗯。看的语法规则多了以后，你会在里面发现美感:-D\n因为简洁的，就是美的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586524753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195683,"user_name":"宋健","can_delete":false,"product_type":"c1","uid":1283082,"ip_address":"","ucode":"7DD1CAB40440C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/0a/7f7c9b25.jpg","comment_is_top":false,"comment_ctime":1585211828,"is_pvip":false,"replies":[{"id":"74395","content":"嗯，用顺手的语言实现就行。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585267301,"ip_address":"","comment_id":195683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585211828","product_id":100034101,"comment_content":"果然用C++实在太难写了，心中有对象却不知道怎么处理。还是将老师的代码读了两遍，用java自己写了一便！老师讲的真的太棒了！满满的成就感！","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489146,"discussion_content":"嗯，用顺手的语言实现就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585267301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192399,"user_name":"大橘为重","can_delete":false,"product_type":"c1","uid":1106152,"ip_address":"","ucode":"96479F205B8384","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/e8/66439469.jpg","comment_is_top":false,"comment_ctime":1584848764,"is_pvip":true,"replies":[{"id":"74122","content":"重在坚持，说得好！<br>所有的坚持都是值得的。<br>知识就在那里，一旦理解，就不会忘掉。只需要你说的坚持！<br>我最近看过一个对Linus Torvalds的采访。Linus说自己的特点：他并不认为自己特别聪明，但他最大的特点是不轻易Let go。所以，就成就了现在的Linux世界。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585126000,"ip_address":"","comment_id":192399,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584848764","product_id":100034101,"comment_content":"学习得还是有点吃力，不过重在坚持，加油＾０＾~","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488387,"discussion_content":"重在坚持，说得好！\n所有的坚持都是值得的。\n知识就在那里，一旦理解，就不会忘掉。只需要你说的坚持！\n我最近看过一个对Linus Torvalds的采访。Linus说自己的特点：他并不认为自己特别聪明，但他最大的特点是不轻易Let go。所以，就成就了现在的Linux世界。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585126000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175023,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1580529212,"is_pvip":false,"replies":[{"id":"77037","content":"不是的。<br>这里用的文法，实际上是：<br>mul : pri (&#39;*&#39; pri)*<br>这是用EBNF的方法来表示的，并且没有左递归。<br>所以，你会在代码里看到一个循环。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586833375,"ip_address":"","comment_id":175023,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1580529212","product_id":100034101,"comment_content":"老师，代码里面 multiplicative 方法中  SimpleASTNode child2 = primary(tokens); 是不是应该改成  SimpleASTNode child2 = multiplicative(tokens);","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482600,"discussion_content":"不是的。\n这里用的文法，实际上是：\nmul : pri (&amp;#39;*&amp;#39; pri)*\n这是用EBNF的方法来表示的，并且没有左递归。\n所以，你会在代码里看到一个循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586833375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2198742,"avatar":"","nickname":"xuefu wang","note":"","ucode":"FC01B2C9DE81DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":586860,"discussion_content":"如果不递归，2*3*5只能计算出2*3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662545587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":482600,"ip_address":"江苏"},"score":586860,"extra":""}]},{"author":{"id":1130852,"avatar":"https://static001.geekbang.org/account/avatar/00/11/41/64/2f0a595c.jpg","nickname":"朱天超","note":"","ucode":"A50AA622B54CDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190567,"discussion_content":"是的，按照文法是要递归mul的。实际代码中应该是简写了，毕竟demo只是匹配了3*5而不是3*5*x*x","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582960689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174284,"user_name":"秦东","can_delete":false,"product_type":"c1","uid":1365487,"ip_address":"","ucode":"3E21D2777B1D3D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHiaJ01zhIap20ckTyMWg3NycAd2yTRVwJyKQfdCt7rR2MlnBak1yZOfuRfxq51lstxQJ9ic6df9icQ/132","comment_is_top":false,"comment_ctime":1580120170,"is_pvip":false,"replies":[{"id":"74216","content":"对。意识到这个问题了。后面优化的时候，会把概念和术语提前介绍一下！<br>多谢你的宝贵建议！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585147358,"ip_address":"","comment_id":174284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580120170","product_id":100034101,"comment_content":"我是觉得，写这章的时候将基本概念和整体思路说一下，然后再具体分析，不然很难懂，比如什么是AST节点，表示什么意思？<br>整体的思路是什么样的？把基础奠定了，然后再去讲很细的东西，所以这章写的比较失败","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482358,"discussion_content":"对。意识到这个问题了。后面优化的时候，会把概念和术语提前介绍一下！\n多谢你的宝贵建议！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585147358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170255,"user_name":"刘力晗","can_delete":false,"product_type":"c1","uid":1195235,"ip_address":"","ucode":"6314A3DEB936F4","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/e3/e1cd7c4b.jpg","comment_is_top":false,"comment_ctime":1578557737,"is_pvip":false,"replies":[{"id":"74220","content":"肯定会有点挑战。但攻克困难之后就是收获！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585147807,"ip_address":"","comment_id":170255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578557737","product_id":100034101,"comment_content":"太干了，需要提前准备知识，这个是在看完书，看懂代码之后来看这个才有用啊。这也是优点。哈哈","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480906,"discussion_content":"肯定会有点挑战。但攻克困难之后就是收获！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585147807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170123,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1578534833,"is_pvip":false,"replies":[{"id":"76763","content":"你说的很对，确实相当于左旋操作。<br>不过没必要先把树生成再左旋。连续的加法可以转成循环操作，一次性生成正确的结构。<br>第二季会分析Java编译器，它能把加减乘除等10个优先级的二元运算，一次性生成优先级和结核性都正确的AST。你可以猜猜它是怎么做到的。或者可以提前去看看Java编译器的代码。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586668547,"ip_address":"","comment_id":170123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578534833","product_id":100034101,"comment_content":"突然发现，二元表达式，用右递归得到的AST（二叉树），违背左结合，但只要从左到右，对所有非终端结点进行左旋，就会得到正确的二叉树，这个发现有没有什么意义呢🧐？<br><br>最近在复习AVL和红黑树的实现，对左旋右旋异常敏感。。😅","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480849,"discussion_content":"你说的很对，确实相当于左旋操作。\n不过没必要先把树生成再左旋。连续的加法可以转成循环操作，一次性生成正确的结构。\n第二季会分析Java编译器，它能把加减乘除等10个优先级的二元运算，一次性生成优先级和结核性都正确的AST。你可以猜猜它是怎么做到的。或者可以提前去看看Java编译器的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586668547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165024,"user_name":"简玉","can_delete":false,"product_type":"c1","uid":1013401,"ip_address":"","ucode":"C7F9471C7BFC7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/99/00597feb.jpg","comment_is_top":false,"comment_ctime":1577149119,"is_pvip":false,"replies":[{"id":"77077","content":"这个类很简单，就包含了四个属性：<br>1.父节点<br>2.子节点（列表）<br>3.节点类型，比如是加法表达式，还是乘法表达式，还是一个数字字面量？<br>4.文本值。对于数字字面量类型的节点来说，这个值是一个字符串格式的数字。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586852836,"ip_address":"","comment_id":165024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577149119","product_id":100034101,"comment_content":"老师是否可以帮忙详细讲解下SimpleASTNode的程序语句","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478989,"discussion_content":"这个类很简单，就包含了四个属性：\n1.父节点\n2.子节点（列表）\n3.节点类型，比如是加法表达式，还是乘法表达式，还是一个数字字面量？\n4.文本值。对于数字字面量类型的节点来说，这个值是一个字符串格式的数字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586852836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164242,"user_name":"七月有风","can_delete":false,"product_type":"c1","uid":1439990,"ip_address":"","ucode":"B3F82397347C5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/f6/3e2db176.jpg","comment_is_top":false,"comment_ctime":1576914211,"is_pvip":false,"replies":[{"id":"63366","content":"很多同学都会在这里疑惑。这个问题在答疑的章节有进一步的分析。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577431813,"ip_address":"","comment_id":164242,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576914211","product_id":100034101,"comment_content":"为什么会循环，第一遍确实没看出来，多看两次，一下子就明白了：<br>- 判断是不是加法表达式，首先匹配&#39;2+3&#39;字符串是不是整型字面量，发现不是；<br>- 然后匹配是不是加法表达式，又会去匹配&#39;2+3&#39;字符串是不是整型字面量；就这样一直循环下去了。<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478692,"discussion_content":"很多同学都会在这里疑惑。这个问题在答疑的章节有进一步的分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577431813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162626,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1576568880,"is_pvip":false,"replies":[{"id":"63371","content":"我们还在继续把教程优化、深耕。<br>你提到的文法表述方式，我也有所考虑。后面会在这个点上进一步帮大家减少疑惑！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577432360,"ip_address":"","comment_id":162626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576568880","product_id":100034101,"comment_content":"在学校学过编译原理，看了文章，感觉有些东西没说细，文法的写法看着也不习惯。不知道没上过编译原理的同学，能不能理解。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478109,"discussion_content":"我们还在继续把教程优化、深耕。\n你提到的文法表述方式，我也有所考虑。后面会在这个点上进一步帮大家减少疑惑！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577432360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160871,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1576050984,"is_pvip":false,"replies":[{"id":"63390","content":"这句话指的是用整个“3+2”来匹配一个整型字面量，不是仅仅拿“3”。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577438123,"ip_address":"","comment_id":160871,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1576050984","product_id":100034101,"comment_content":"首先匹配是不是整型字面量，发现不是；<br>然后匹配是不是加法表达式，这里是递归调用；<br>会重复上面两步，无穷无尽。<br><br>麻烦问下，第一句话，首先匹配是不是整型字面量，发现不是；<br>这个地方是不是错了？3+2，先匹配3这个token，应该是整型字面量吧？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477513,"discussion_content":"这句话指的是用整个“3+2”来匹配一个整型字面量，不是仅仅拿“3”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577438123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160861,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1576048297,"is_pvip":false,"replies":[{"id":"77064","content":"原文的意思是，子节点只有一个。没算父节点。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586850021,"ip_address":"","comment_id":160861,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1576048297","product_id":100034101,"comment_content":"但是我这里做了简化，只生成了一个子节点，就是表达式子节点。变量名称记到 ASTNode 的文本值里去了，其他两个子节点没有提供额外的信息，就直接丢弃了。<br><br>您好，请教一个问题：<br>文中说道，为了简化，只生成了一个节点。<br><br>但是代码中：<br>node = new SimpleASTNode(ASTNodeType.IntDeclaration, token.getText());<br>        token = tokens.peek();  &#47;&#47;预读<br>        if (token != null &amp;&amp; token.getType() == TokenType.Assignment) {<br>            tokens.read();      &#47;&#47;消耗掉等号<br>            SimpleASTNode child = additive(tokens);  &#47;&#47;匹配一个表达式<br>            if (child == null) {<br>                throw new Exception(&quot;invalide variable initialization, expecting an expression&quot;);<br>            }<br>            else{<br>                node.addChild(child);<br>            }<br>        }<br><br>node和child，应该是两个节点。<br><br>想请教一下我理解错了吗？麻烦指导","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477507,"discussion_content":"原文的意思是，子节点只有一个。没算父节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586850021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160285,"user_name":"谛听","can_delete":false,"product_type":"c1","uid":1228687,"ip_address":"","ucode":"7539D5B06662EA","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/8f/51f044dc.jpg","comment_is_top":false,"comment_ctime":1575905148,"is_pvip":false,"replies":[{"id":"77065","content":"你说的对。感谢提醒！<br>这块代码可能是从SimpleParser.java中拷贝代码，忘了改了。在SimpleParser中的代码是已经消除了左递归的版本。<br>github上的代码已经修改。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586850393,"ip_address":"","comment_id":160285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575905148","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;RichardGong&#47;PlayWithCompiler&#47;blob&#47;master&#47;lab&#47;craft&#47;SimpleCalculator.java 的第224行应该是 SimpleASTNode child2 = multiplicative(tokens);","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477325,"discussion_content":"你说的对。感谢提醒！\n这块代码可能是从SimpleParser.java中拷贝代码，忘了改了。在SimpleParser中的代码是已经消除了左递归的版本。\ngithub上的代码已经修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586850393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159267,"user_name":"LY.","can_delete":false,"product_type":"c1","uid":1143476,"ip_address":"","ucode":"C6A3A7D8BAB618","user_header":"https://static001.geekbang.org/account/avatar/00/11/72/b4/8153fcc2.jpg","comment_is_top":false,"comment_ctime":1575593377,"is_pvip":false,"replies":[{"id":"64923","content":"只要递归的嵌套层次不是太深，就没有关系。<br>递归函数可以用标准的方法转换为基于栈的迭代函数。实际上，递归函数的执行过程，就是由系统自动维护了一个栈，只不过这个栈的开销要更大一些，比如要保存寄存器的值、返回值、返回地址、参数等。<br>我们的编译器在解析代码的时候，嵌套的深度不会太深，还是可以接受的。<br>在《编译原理之美》的第二季，我们会分析实际的编译器，那时会看看它们是怎样处理你的关切的。敬请期待！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577712253,"ip_address":"","comment_id":159267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575593377","product_id":100034101,"comment_content":"老师你好，代码上看到了好几处递归调用，想问下实际项目中也会这样使用么？还是有其它处理方式，这样处理复杂代码会不会递归层次太深导致栈溢出呢？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476998,"discussion_content":"只要递归的嵌套层次不是太深，就没有关系。\n递归函数可以用标准的方法转换为基于栈的迭代函数。实际上，递归函数的执行过程，就是由系统自动维护了一个栈，只不过这个栈的开销要更大一些，比如要保存寄存器的值、返回值、返回地址、参数等。\n我们的编译器在解析代码的时候，嵌套的深度不会太深，还是可以接受的。\n在《编译原理之美》的第二季，我们会分析实际的编译器，那时会看看它们是怎样处理你的关切的。敬请期待！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577712253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156790,"user_name":"曹扬","can_delete":false,"product_type":"c1","uid":1733802,"ip_address":"","ucode":"1953DBEF1E17DD","user_header":"https://static001.geekbang.org/account/avatar/00/1a/74/aa/ee89876e.jpg","comment_is_top":false,"comment_ctime":1574956296,"is_pvip":false,"replies":[{"id":"60452","content":"有一些其他同学用js写的。可以翻翻留言找找。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1575248894,"ip_address":"","comment_id":156790,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574956296","product_id":100034101,"comment_content":"看是看懂了.. 但是不知道怎么用js写","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476234,"discussion_content":"有一些其他同学用js写的。可以翻翻留言找找。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575248894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151551,"user_name":"Geek_e986e3","can_delete":false,"product_type":"c1","uid":1642716,"ip_address":"","ucode":"EF53D2DEA59A8F","user_header":"","comment_is_top":false,"comment_ctime":1573739090,"is_pvip":false,"replies":[{"id":"76768","content":"我这么解释看看是否更直观一些：<br>非终结符：可以看做是AST的中间节点<br>终结符：可以看做是AST的叶子节点<br>产生式：就是某个AST节点的子节点<br><br>我再用产生式推导出2+3*5表达式给你看看，是否能明白“产生”的含义：<br>add -&gt; add + mul<br>      -&gt; mul + mul<br>      -&gt; pri + mul<br>      -&gt; 2 + mul<br>      -&gt; 2 + mul * pri<br>      -&gt; 2 + pri * pri<br>      -&gt; 2 + 3 * pri<br>      -&gt; 2 + 3 * 5","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586670957,"ip_address":"","comment_id":151551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573739090","product_id":100034101,"comment_content":"它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。在语法解析的过程中，左边会被右边替代。如果替代之后还有非终结符，那么继续这个替代过程，直到最后全部都是终结符（Terminal），也就是 Token。<br>老师这句话怎么理解？不是很明白非终结符和生产式的含义。能举个例子吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474528,"discussion_content":"我这么解释看看是否更直观一些：\n非终结符：可以看做是AST的中间节点\n终结符：可以看做是AST的叶子节点\n产生式：就是某个AST节点的子节点\n\n我再用产生式推导出2+3*5表达式给你看看，是否能明白“产生”的含义：\nadd -&amp;gt; add + mul\n      -&amp;gt; mul + mul\n      -&amp;gt; pri + mul\n      -&amp;gt; 2 + mul\n      -&amp;gt; 2 + mul * pri\n      -&amp;gt; 2 + pri * pri\n      -&amp;gt; 2 + 3 * pri\n      -&amp;gt; 2 + 3 * 5","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586670957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151245,"user_name":"Morton","can_delete":false,"product_type":"c1","uid":1348901,"ip_address":"","ucode":"882FBAA4E44F38","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKTVKUUk0lLfo0kP9GTgibybZWPmhF0V7EQnKAbXdvsiavuKNFPoSc2qEdETLicL7k4GyAGOBBP6TgGQ/132","comment_is_top":false,"comment_ctime":1573691263,"is_pvip":false,"replies":[{"id":"77076","content":"你看看我对Geek_e986e3和rome的回复，是否有帮助。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586852503,"ip_address":"","comment_id":151245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573691263","product_id":100034101,"comment_content":"老师好，它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。在语法解析的过程中，左边会被右边替代。如果替代之后还有非终结符，那么继续这个替代过程，直到最后全部都是终结符（Terminal），也就是 Token。<br>这句不太明白，还能详解一下吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474415,"discussion_content":"你看看我对Geek_e986e3和rome的回复，是否有帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586852503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149728,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1573357606,"is_pvip":true,"replies":[{"id":"57594","content":"还是一样会左递归。<br>我在19讲有比较深入的解释，你可以提前去看一下。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573367986,"ip_address":"","comment_id":149728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573357606","product_id":100034101,"comment_content":"老师你好，这个表达式如果没有去掉乘法表达式是不是就不会出现左递归？<br>additiveExpression<br>    :   IntLiteral<br>    |   additiveExpression Plus IntLiteral<br>    ;","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473957,"discussion_content":"还是一样会左递归。\n我在19讲有比较深入的解释，你可以提前去看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573367986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149388,"user_name":"SapereAude","can_delete":false,"product_type":"c1","uid":1717549,"ip_address":"","ucode":"C5D61C535B7B10","user_header":"https://static001.geekbang.org/account/avatar/00/1a/35/2d/a2bde67e.jpg","comment_is_top":false,"comment_ctime":1573206930,"is_pvip":false,"replies":[{"id":"57504","content":"前端部分，我已经尽最大努力了。基本上我的目标是让编辑能看懂...<br>等回头再优化一遍的时候，我看看有什么地方还可以更加通俗化。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573290251,"ip_address":"","comment_id":149388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573206930","product_id":100034101,"comment_content":"存在【知识的诅咒】<br>https:&#47;&#47;zhidao.baidu.com&#47;question&#47;414569826.html","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473845,"discussion_content":"前端部分，我已经尽最大努力了。基本上我的目标是让编辑能看懂...\n等回头再优化一遍的时候，我看看有什么地方还可以更加通俗化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573290251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146500,"user_name":"zKerry","can_delete":false,"product_type":"c1","uid":1497740,"ip_address":"","ucode":"9FB006D1A38D3F","user_header":"","comment_is_top":false,"comment_ctime":1572550348,"is_pvip":false,"replies":[{"id":"57527","content":"加油！由陌生到熟悉是一个过程！<br>动动手，陌生感消除得会更快！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573301910,"ip_address":"","comment_id":146500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572550348","product_id":100034101,"comment_content":"嚯...读两遍，连蒙带猜差不多算是看明白","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472887,"discussion_content":"加油！由陌生到熟悉是一个过程！\n动动手，陌生感消除得会更快！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573301910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146370,"user_name":"观海雲遠","can_delete":false,"product_type":"c1","uid":1182910,"ip_address":"","ucode":"76680C70AF4B2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/be/e0563e93.jpg","comment_is_top":false,"comment_ctime":1572509159,"is_pvip":false,"replies":[{"id":"57595","content":"恭喜！<br>继续往下学，肯定会支持的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573370682,"ip_address":"","comment_id":146370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572509159","product_id":100034101,"comment_content":"我自己写了一遍代码调试通过， 但是也发现了问题。 当前无法处理在一个表达式中有多个+号或者* 后续会讲到吗","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472823,"discussion_content":"恭喜！\n继续往下学，肯定会支持的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573370682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146279,"user_name":"观海雲遠","can_delete":false,"product_type":"c1","uid":1182910,"ip_address":"","ucode":"76680C70AF4B2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/be/e0563e93.jpg","comment_is_top":false,"comment_ctime":1572489002,"is_pvip":false,"replies":[{"id":"77087","content":"对语法解析的理解，可以循序渐进地进行，后面一直有相应的迭代，在第19讲答疑区会有一些总结。<br><br>这里我讲一个关键点：就是语法分析的时候，AST的根节点是能够代表整个句子的。假设我用这个语法规则：<br>exp -&gt; add<br>add -&gt; mul<br>add -&gt; add + mul<br>去解析“2+3*5”这个表达式，要形成的是&quot;exp$&quot;这么一个结果，其中$代表Token串的末尾，而exp是一棵AST，完整的代表了整个表达式，而不能只解析成功一部分就行了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586855527,"ip_address":"","comment_id":146279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572489002","product_id":100034101,"comment_content":"老师 你好：<br>SimpleASTNode child1 = multiplicative(); &#47;&#47;计算第一个子节点<br>这句代码感觉难以理解，我如何判断2+3这个表达式是不是匹配乘法表达式呢？ <br>乘法表达式为：A: M | A + M<br>看了评论区以及您的解答是说，首先看整体是否匹配, 我已经做了分词了，那么整体如何去匹配呢？ <br>是每个token去比较吗？每个token区比较就不会出现循环递归的问题了吧<br>感觉很多感念或者结果是突然冒出来的，是否加些铺垫更好呢","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472778,"discussion_content":"对语法解析的理解，可以循序渐进地进行，后面一直有相应的迭代，在第19讲答疑区会有一些总结。\n\n这里我讲一个关键点：就是语法分析的时候，AST的根节点是能够代表整个句子的。假设我用这个语法规则：\nexp -&amp;gt; add\nadd -&amp;gt; mul\nadd -&amp;gt; add + mul\n去解析“2+3*5”这个表达式，要形成的是&amp;quot;exp$&amp;quot;这么一个结果，其中$代表Token串的末尾，而exp是一棵AST，完整的代表了整个表达式，而不能只解析成功一部分就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586855527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144791,"user_name":"David","can_delete":false,"product_type":"c1","uid":1044324,"ip_address":"","ucode":"8A5F064C911714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ef/64/5b71bb14.jpg","comment_is_top":false,"comment_ctime":1572058802,"is_pvip":false,"replies":[{"id":"77214","content":"你说的对。谢谢你细心阅读。<br>另一个同学也发现了这个问题。已经改过了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586926741,"ip_address":"","comment_id":144791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572058802","product_id":100034101,"comment_content":"老师你好，<br>SimpleCalculator.java  文件中语法解析乘法表达式, 224行SimpleASTNode child2 = primary(tokens);<br>按规则是不是要这样写呢：SimpleASTNode child2 = multiplicative(tokens);","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472113,"discussion_content":"你说的对。谢谢你细心阅读。\n另一个同学也发现了这个问题。已经改过了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586926741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140763,"user_name":"那又如何.จุ๊บ","can_delete":false,"product_type":"c1","uid":1262786,"ip_address":"","ucode":"86DEA8EDDEB3A3","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/c2/84c9e8be.jpg","comment_is_top":false,"comment_ctime":1571044520,"is_pvip":false,"replies":[{"id":"54560","content":"这个课程是设计了多次迭代提升的过程。一开始就讲Antlr也可以，但也要建立对原理的理解。否则，只是用工具，不知其所以然，心里也会不踏实。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1571107321,"ip_address":"","comment_id":140763,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571044520","product_id":100034101,"comment_content":"Antlr4和go都装好了...但是不会java代码...无奈,其实可以直接用Antlr4从头开始讲解啊..","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470544,"discussion_content":"这个课程是设计了多次迭代提升的过程。一开始就讲Antlr也可以，但也要建立对原理的理解。否则，只是用工具，不知其所以然，心里也会不踏实。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571107321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135211,"user_name":"秋","can_delete":false,"product_type":"c1","uid":1371800,"ip_address":"","ucode":"A2EAF7B003CD34","user_header":"","comment_is_top":false,"comment_ctime":1569063938,"is_pvip":false,"replies":[{"id":"52096","content":"点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1569300429,"ip_address":"","comment_id":135211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569063938","product_id":100034101,"comment_content":"看了俩小时终于明白了。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468096,"discussion_content":"点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569300429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135169,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1569051018,"is_pvip":true,"replies":[{"id":"57687","content":"great!<br>把这两中基础语法的区别搞清楚，很有意思。脑体操。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573440036,"ip_address":"","comment_id":135169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569051018","product_id":100034101,"comment_content":"想了好久，感觉上下文无关文法和正则文法核心的却别在于上下文可以嵌套，正则却只是顺序的连接，这其实也是词法分析得出的是token流，而语法分析得到的是token为叶子节点+rule的树。<br>所以只要是像json xml这样的有嵌套的，最简单的比如e:（e）这种语法rule，正则就不能表达。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468079,"discussion_content":"great!\n把这两中基础语法的区别搞清楚，很有意思。脑体操。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573440036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133606,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1568620060,"is_pvip":false,"replies":[{"id":"51364","content":"为你点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568692381,"ip_address":"","comment_id":133606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568620060","product_id":100034101,"comment_content":"不急不躁慢慢看 终于看懂了  顺便跟着写了写 代码  个人缺少基础 第一次接触编译原理  纯看专栏看的比较懵逼(再加上英语也不太好)  配合 龙书+图解编译原理 一起看 慢慢看多看几遍 就懂了","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467445,"discussion_content":"为你点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568692381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131979,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1007267,"ip_address":"","ucode":"80594B4B056A53","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a3/9670d4b4.jpg","comment_is_top":false,"comment_ctime":1567998236,"is_pvip":false,"replies":[{"id":"50736","content":"你和另外一些同学有共性的问题。总的来说，是误把广度优先当做了深度优先。<br>你查一下留言。我有一些评论。<br>总的来说，思路是这样的。<br>第一次匹配，你尝试IntLiteral，这个时候是失败的。而不会成功。因为后面有没有解析的部分。如果这个时候算作成功，整个additiveExpression只返回了一个2。这显然不对。你可能就是在这里理解错的。<br>第二次匹配，你选择第二个产生式。接着，就进入了无限递归了。<br>不要着急，我们在第17讲梳理自顶向下的算法时，还会回到这个问题，加深理解！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568182500,"ip_address":"","comment_id":131979,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1567998236","product_id":100034101,"comment_content":"老师，你好：<br> 针对“左递归”不是很理解，请指导一下；<br><br>按照您文中所说：<br>additiveExpression<br>    :   IntLiteral<br>    |   additiveExpression Plus IntLiteral<br>    ;<br><br>在解析 “2 + 3”时，直观的翻译为：<br>* 首先匹配是不是整型；<br>* 然后匹配是不是加法表达式，这里是递归调用；<br>* 重复上面两步；<br><br>我根据您代码 SimpleParser 中解析加法的方法做了修改：<br><br>private SimpleASTNode additive(TokenReader tokens) throws Exception {<br>        &#47;&#47;SimpleASTNode child1 = multiplicative(tokens);  &#47;&#47;应用add规则<br>        SimpleASTNode child1 = primary(tokens);  &#47;&#47;应用add规则<br><br>        SimpleASTNode node = child1;<br>        if (child1 != null) {<br>            while (true) {                              &#47;&#47;循环应用add&#39;规则<br>                Token token = tokens.peek();<br>                if (token != null &amp;&amp; (token.getType() == TokenType.Plus || token.getType() == TokenType.Minus)) {<br>                    token = tokens.read();              &#47;&#47;读出加号<br>                    &#47;&#47;SimpleASTNode child2 = multiplicative(tokens);  &#47;&#47;计算下级节点<br>                    SimpleASTNode child2 = additive(tokens);  &#47;&#47;计算下级节点<br>                    if (child2 !=null) {<br>                        node = new SimpleASTNode(ASTNodeType.Additive, token.getText());<br>                        node.addChild(child1);              &#47;&#47;注意，新节点在顶层，保证正确的结合性<br>                        node.addChild(child2);<br>                        child1 = node;<br>                    }else{<br>                        throw new Exception(&quot;invalid additive expression, expecting the right part.&quot;);<br>                    }<br>                } else {<br>                    break;<br>                }<br>            }<br>        }<br>        return node;<br>    }<br><br>这样解析不会出现“左递归”，请教一下老师，我在什么地方出错了？<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466709,"discussion_content":"你和另外一些同学有共性的问题。总的来说，是误把广度优先当做了深度优先。\n你查一下留言。我有一些评论。\n总的来说，思路是这样的。\n第一次匹配，你尝试IntLiteral，这个时候是失败的。而不会成功。因为后面有没有解析的部分。如果这个时候算作成功，整个additiveExpression只返回了一个2。这显然不对。你可能就是在这里理解错的。\n第二次匹配，你选择第二个产生式。接着，就进入了无限递归了。\n不要着急，我们在第17讲梳理自顶向下的算法时，还会回到这个问题，加深理解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568182500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630889,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e2/a9/d2720608.jpg","nickname":"慧强","note":"","ucode":"3864410D115D02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77263,"discussion_content":"所以我也有同样的顾虑，我直接先匹配整形的不就完了，还多一步搞个multi表达式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575898530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630889,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e2/a9/d2720608.jpg","nickname":"慧强","note":"","ucode":"3864410D115D02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77288,"discussion_content":"我觉得他改的没毛病啊，第一次匹配了2是成功的，然后继续执行判断是不是加号，然后消耗掉加号 再次进入第二次匹配到了3 这个时候程序后面已经没有token了，不就返回了嘛，没出现无限递归嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575899293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131674,"user_name":"张玉棠","can_delete":false,"product_type":"c1","uid":1203564,"ip_address":"","ucode":"40BF9506955A0B","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6c/40bb7d92.jpg","comment_is_top":false,"comment_ctime":1567843456,"is_pvip":false,"replies":[{"id":"50753","content":"先不要在心理上觉得难，也不要被术语吓倒，尝试建立直觉认识:-)","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568183546,"ip_address":"","comment_id":131674,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567843456","product_id":100034101,"comment_content":"好难 看的快睡着","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466567,"discussion_content":"先不要在心理上觉得难，也不要被术语吓倒，尝试建立直觉认识:-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568183546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203564,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6c/40bb7d92.jpg","nickname":"张玉棠","note":"","ucode":"40BF9506955A0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10903,"discussion_content":"好的谢谢老师的指导，多看了几遍之后终于有感觉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568337352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128772,"user_name":"Unrestrained","can_delete":false,"product_type":"c1","uid":1515923,"ip_address":"","ucode":"88519C6B5E475F","user_header":"https://static001.geekbang.org/account/avatar/00/17/21/93/90d0f8c9.jpg","comment_is_top":false,"comment_ctime":1566960364,"is_pvip":false,"replies":[{"id":"47819","content":"点赞！学习本来就是违反人性的事情。<br>但学进去了，收获的快乐也会更多！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566963138,"ip_address":"","comment_id":128772,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566960364","product_id":100034101,"comment_content":"初学者理解起来有点难，，拿着教材一遍遍看，终于看懂了！！","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465095,"discussion_content":"点赞！学习本来就是违反人性的事情。\n但学进去了，收获的快乐也会更多！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566963138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128513,"user_name":"Geek_c32e72","can_delete":false,"product_type":"c1","uid":1521661,"ip_address":"","ucode":"539295D69DE77E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbQJvvPGOykVpBjjE9gA2tDg18eBrLHkIOH9ga9NuNKN4U977VE2PlIzzQ4VJMgE0CJvHTx3Ssicw/132","comment_is_top":false,"comment_ctime":1566892070,"is_pvip":false,"replies":[{"id":"47800","content":"有疑问就问是好事，为你的勇气点赞！<br>1.递归下降算法是深度优先的算法。不要把深度优先和广度优先搞混。有一个学员已经提的问题，他的思路恰恰是广度优先的。<br>2.每次试图匹配一个非终结符的时候，都要尽可能的消耗掉Token。成功匹配的条件是，确实后面跟着的Token不再本表达式的能力之内才可以。从这个意义上，如果拿multiplicative匹配3*5，光试图用IntLiteral这个产生式去比配是不行的，因为你只匹配了一个3。可是后面还有乘号呀，这就证明本来该把后面的也匹配进来，你事情做少了。所以用IntLiteral就不行，没匹配不成功。如果换成第二个产生式呢，那就不停的递归了，没有结束的时候。<br>我觉得给你的解释可能是讲得最清楚的一次了:-)<br>至于退回一个Token，是因为一次匹配失败后，必须“恢复现场”，不能影响另外的尝试。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566958925,"ip_address":"","comment_id":128513,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566892070","product_id":100034101,"comment_content":"additiveExpression<br>    :   multiplicativeExpression<br>    |   additiveExpression Plus multiplicativeExpression<br>    ;<br><br>multiplicativeExpression<br>    :   IntLiteral<br>    |   multiplicativeExpression Star IntLiteral<br>    ;<br>宫老师，问题二是：A文法的算法实现完全可以实现成M文法。例如： 2+3*5，先用A：M  消耗掉2，然后A：A plus M， 中A可以有A：M结果替换，算法中应该接着peek 如何有+ 号，消耗掉生成一个+ node. 递归调用A方法，此时3 * 5 能被M产生式完全消耗。所以您在评论区解释指出用A：M 匹配，因为后面还有token需要退回，我不能理解。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464981,"discussion_content":"有疑问就问是好事，为你的勇气点赞！\n1.递归下降算法是深度优先的算法。不要把深度优先和广度优先搞混。有一个学员已经提的问题，他的思路恰恰是广度优先的。\n2.每次试图匹配一个非终结符的时候，都要尽可能的消耗掉Token。成功匹配的条件是，确实后面跟着的Token不再本表达式的能力之内才可以。从这个意义上，如果拿multiplicative匹配3*5，光试图用IntLiteral这个产生式去比配是不行的，因为你只匹配了一个3。可是后面还有乘号呀，这就证明本来该把后面的也匹配进来，你事情做少了。所以用IntLiteral就不行，没匹配不成功。如果换成第二个产生式呢，那就不停的递归了，没有结束的时候。\n我觉得给你的解释可能是讲得最清楚的一次了:-)\n至于退回一个Token，是因为一次匹配失败后，必须“恢复现场”，不能影响另外的尝试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566958925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128504,"user_name":"Geek_c32e72","can_delete":false,"product_type":"c1","uid":1521661,"ip_address":"","ucode":"539295D69DE77E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIbQJvvPGOykVpBjjE9gA2tDg18eBrLHkIOH9ga9NuNKN4U977VE2PlIzzQ4VJMgE0CJvHTx3Ssicw/132","comment_is_top":false,"comment_ctime":1566891287,"is_pvip":false,"replies":[{"id":"47801","content":"都有左递归问题。给你的另一个回复里详细写了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566958977,"ip_address":"","comment_id":128504,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566891287","product_id":100034101,"comment_content":"additiveExpression<br>    :   multiplicativeExpression<br>    |   additiveExpression Plus multiplicativeExpression<br>    ;<br><br>multiplicativeExpression<br>    :   IntLiteral<br>    |   multiplicativeExpression Star IntLiteral<br>    ;<br>宫老师，你好！M文法也想文法1一样的左递归写法，难道是M的第一个产生式推导出IntLiteral 为终结符，所以不会存在左递归问题？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464976,"discussion_content":"都有左递归问题。给你的另一个回复里详细写了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566958977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128438,"user_name":"EvangeYu","can_delete":false,"product_type":"c1","uid":1639012,"ip_address":"","ucode":"CA4AC3B4C8E7A0","user_header":"https://static001.geekbang.org/account/avatar/00/19/02/64/7610a579.jpg","comment_is_top":false,"comment_ctime":1566880117,"is_pvip":false,"replies":[{"id":"47805","content":"为你深入钻研点赞！<br>理解“深度优先”是关键。<br>很多同学在推导的时候，实际上用的是“广度优先”。<br>请参考给@Geek_c32e72同学的回复，我觉得在那里说的最清楚了。<br>还可以参考给@windpiaoxue同学的回复。他做了一个典型的广度优先的解析过程。<br><br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566959237,"ip_address":"","comment_id":128438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566880117","product_id":100034101,"comment_content":"2+3的无限左递归<br>第三遍 为什么产生add–&gt;add-&gt;add-&gt;int，不是add–&gt;add-&gt;int-&gt;int","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464945,"discussion_content":"为你深入钻研点赞！\n理解“深度优先”是关键。\n很多同学在推导的时候，实际上用的是“广度优先”。\n请参考给@Geek_c32e72同学的回复，我觉得在那里说的最清楚了。\n还可以参考给@windpiaoxue同学的回复。他做了一个典型的广度优先的解析过程。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566959237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127775,"user_name":"藏獒的自述","can_delete":false,"product_type":"c1","uid":1135507,"ip_address":"","ucode":"7A1E9FF6F3888C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIxU3HQoTdhGYsibfiaJyH0PMRI3fWaZU7YWNDIsZu2ZRZ8hXCWqicDiaF3JS9vwfRD71dftiafWKB1I4g/132","comment_is_top":false,"comment_ctime":1566791365,"is_pvip":false,"replies":[{"id":"47354","content":"资料的推荐，请参考：<br>https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;125948<br>可以阅读一下参考书里对文法的描述。<br>无限调用，必须是在深度优先的算法里才会出现，递归下降是深度优先的。有另一个同学问我的时候，举的匹配过程其实是广度优先。<br>最好的办法，是动手编程试一试，就能更深刻理解为什么会出现左递归。<br>我尽量在答疑的那讲里把这个比较多次提的疑问再用更清晰的方式讲一遍。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566793495,"ip_address":"","comment_id":127775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566791365","product_id":100034101,"comment_content":"博主，您好~即使看了您在评论区的回复，还是不理解 文法 和 语法 的区别？还有为什么会出现 无限调用，递归到最后不是会到递归基吗？ 想问下博主 有没有什么书籍或者资料推荐~","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464650,"discussion_content":"资料的推荐，请参考：\nhttps://time.geekbang.org/column/article/125948\n可以阅读一下参考书里对文法的描述。\n无限调用，必须是在深度优先的算法里才会出现，递归下降是深度优先的。有另一个同学问我的时候，举的匹配过程其实是广度优先。\n最好的办法，是动手编程试一试，就能更深刻理解为什么会出现左递归。\n我尽量在答疑的那讲里把这个比较多次提的疑问再用更清晰的方式讲一遍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566793495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127556,"user_name":"李懂","can_delete":false,"product_type":"c1","uid":1330436,"ip_address":"","ucode":"539E6639042C88","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/04/5e0d3713.jpg","comment_is_top":false,"comment_ctime":1566740789,"is_pvip":false,"replies":[{"id":"47307","content":"你要把文法规则和算法两件事情区分开。<br>同一个文法，用不同的算法去做，结果会不同。<br>文法规则当然是对的。但问题是算法，算法是按照一定的步骤去执行的。<br>你需要按照递归下降算法的逻辑去一步步推导一下。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566787402,"ip_address":"","comment_id":127556,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1566740789","product_id":100034101,"comment_content":"看了好几遍2+3会造成无限递归还是不懂？根据规则additive -&gt; IntLiteral | additive +Intliteral ;<br><br>第一种：additive-&gt;IntLiteral，这个不匹配<br><br>第二种：additive-&gt;additive+IntLiteral，这个是可以匹配的呀，2为additive，+3为+IntLiteral<br>在接着就是additive-&gt;IntLiteral匹配前面的2<br><br>过程推导：<br>2+3<br>additive+IntLiteral<br>IntLiteral+IntLiteral<br>是我哪里理解错误了，给点提示！","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464547,"discussion_content":"你要把文法规则和算法两件事情区分开。\n同一个文法，用不同的算法去做，结果会不同。\n文法规则当然是对的。但问题是算法，算法是按照一定的步骤去执行的。\n你需要按照递归下降算法的逻辑去一步步推导一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566787402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632261,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e8/05/a623c531.jpg","nickname":"Rockbean","note":"","ucode":"30D0BDFB47D38B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6176,"discussion_content":"感觉写成additive->(additive->IntLiteral)+IntLiteral就容易理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566744681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632261,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e8/05/a623c531.jpg","nickname":"Rockbean","note":"","ucode":"30D0BDFB47D38B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6175,"discussion_content":"评论区有老师的回复，第二种additive->additive +IntLiteral,这里的additive表示的是第一种文法，需要先回到第一种additive->additive","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566744541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127405,"user_name":"E","can_delete":false,"product_type":"c1","uid":1193143,"ip_address":"","ucode":"B1B0759EDA4AF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/b7/60281658.jpg","comment_is_top":false,"comment_ctime":1566699332,"is_pvip":false,"replies":[{"id":"47336","content":"上个星期刚发布了一个学习路径，请参考：<br>https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;125948","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566791943,"ip_address":"","comment_id":127405,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566699332","product_id":100034101,"comment_content":"老师，有没有什么好的书籍可以推荐的吗","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464476,"discussion_content":"上个星期刚发布了一个学习路径，请参考：\nhttps://time.geekbang.org/column/article/125948","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566791943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127298,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1566640454,"is_pvip":false,"replies":[{"id":"47321","content":"每次匹配失败以后，要把已经读出来的token再退回去，尝试别的产生式。这就是回溯。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566789778,"ip_address":"","comment_id":127298,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566640454","product_id":100034101,"comment_content":"老师讲的很好，但是我还有点不明白，左递归为什么会导致死循环，每一次递归调用，token都会往前进一步，token数量是有限的，递归调用几次后，token就到头了，然后判断下不就是可以结束循环吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464423,"discussion_content":"每次匹配失败以后，要把已经读出来的token再退回去，尝试别的产生式。这就是回溯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566789778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127039,"user_name":"半桶水","can_delete":false,"product_type":"c1","uid":1000475,"ip_address":"","ucode":"AFC053EB627E48","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/1b/fa287ed5.jpg","comment_is_top":false,"comment_ctime":1566542336,"is_pvip":false,"replies":[{"id":"47014","content":"你发现的很对。我看了一下SimpleScript.java里的好像是对的，代码失去同步了:-D<br>已经调整过来了。<br>说明你确实是在跑代码了:-D<br>谢谢你！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566554022,"ip_address":"","comment_id":127039,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566542336","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;RichardGong&#47;PlayWithCompiler&#47;blob&#47;master&#47;lab&#47;craft&#47;SimpleCalculator.java#L116 这个地方应该是IntLiteral？不然result会都是0","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464290,"discussion_content":"你发现的很对。我看了一下SimpleScript.java里的好像是对的，代码失去同步了:-D\n已经调整过来了。\n说明你确实是在跑代码了:-D\n谢谢你！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566554022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126541,"user_name":"Holy","can_delete":false,"product_type":"c1","uid":1359643,"ip_address":"","ucode":"14D9AD7D12EF9B","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/1b/d23da43b.jpg","comment_is_top":false,"comment_ctime":1566404435,"is_pvip":false,"replies":[{"id":"46813","content":"这门课程就是最好的入门课 :-D<br>当然多看看相关资料是好的！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566432894,"ip_address":"","comment_id":126541,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566404435","product_id":100034101,"comment_content":"看到评论区里，这么多人说看不懂，我就放心了。看来不是因为我太笨的原因。我还是准备先去看看其他文章补一下基础，再回来继续","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464045,"discussion_content":"这门课程就是最好的入门课 :-D\n当然多看看相关资料是好的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566432894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235537,"avatar":"https://static001.geekbang.org/account/avatar/00/12/da/51/51e680c5.jpg","nickname":"Geek_b6ff54","note":"","ucode":"CDE3A5DE2641E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5848,"discussion_content":"没点基础真会有点懵逼的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566483289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126287,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1566357196,"is_pvip":true,"replies":[{"id":"46641","content":"给你回复了另一个留言，你再看看。如果还不懂，我再换方法给你解释。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566374236,"ip_address":"","comment_id":126287,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566357196","product_id":100034101,"comment_content":"从递归那里开始，看了好几遍， 就是看不懂","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463926,"discussion_content":"给你回复了另一个留言，你再看看。如果还不懂，我再换方法给你解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566374236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126196,"user_name":"逍遥子","can_delete":false,"product_type":"c1","uid":1127109,"ip_address":"","ucode":"777CF0635970E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/c5/38a59795.jpg","comment_is_top":false,"comment_ctime":1566348354,"is_pvip":false,"replies":[{"id":"46654","content":"尽量别先关注术语。先看看能否直观的明白整个计算过程。<br><br>另外，有可能的话，动手写一写。有助于理解。<br>我认为，学编译原理的时候，没有一个人不说难的；但动手写编译器，其实每个人都能写出来。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566376108,"ip_address":"","comment_id":126196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566348354","product_id":100034101,"comment_content":"对于没有基础的人来说有难度 ","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463879,"discussion_content":"尽量别先关注术语。先看看能否直观的明白整个计算过程。\n\n另外，有可能的话，动手写一写。有助于理解。\n我认为，学编译原理的时候，没有一个人不说难的；但动手写编译器，其实每个人都能写出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566376108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126099,"user_name":"傲娇的小宝","can_delete":false,"product_type":"c1","uid":1493922,"ip_address":"","ucode":"C079B19BCC1B7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","comment_is_top":false,"comment_ctime":1566312854,"is_pvip":false,"replies":[{"id":"46660","content":"我理解你的第一段，说的是求值过程。对的，依据ASTNode的文本值就能知道是做加减乘数的哪个运算，然后运用左右两个节点的值做计算。<br><br>至于左递归会导致无穷递归下去的情况，是这么一个过程：<br><br>采用下面这个最简单的语法规则：<br>additive -&gt; IntLiteral | additive Intliteral ;<br><br>我们假设是最左推导，也就是总是先展开左边的非终结符。<br>第一遍：additive-&gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。<br>我们是要用additive匹配整个Token串，而不仅仅是第一个Token。<br><br>第二遍：用第二个产生式，additive-&gt;additive-&gt;IntLiteral，还是一样失败。原因同上。<br><br>第三遍：additive-&gt;additive-&gt;additive-&gt;IntLiteral。<br>第四遍：.... 一直不停。<br><br>这样说，有没有帮助？<br><br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566376942,"ip_address":"","comment_id":126099,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566312854","product_id":100034101,"comment_content":"有些懵懂，囫囵吞枣的看了两三遍。大概的意思是在符号节点的两边形成两个子树，通过递归分别获得节点左右两边的值，最后根据符号处理，得到最终值（我理解的是这样的）。所以其实每个节点，单纯点看，符号节点的左边假设是已经求解到的值，右边是待求解的表达式。最终值是两边根据符号节点的符号做运算么？左递归不行，指的是如果按照左递归，在解析右边的Token的时候，因为右边Token可能是多个Token的组合，所以无法解析到预定的值，是这样么？（可能我表述的比较乱）","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463829,"discussion_content":"我理解你的第一段，说的是求值过程。对的，依据ASTNode的文本值就能知道是做加减乘数的哪个运算，然后运用左右两个节点的值做计算。\n\n至于左递归会导致无穷递归下去的情况，是这么一个过程：\n\n采用下面这个最简单的语法规则：\nadditive -&amp;gt; IntLiteral | additive Intliteral ;\n\n我们假设是最左推导，也就是总是先展开左边的非终结符。\n第一遍：additive-&amp;gt;IntLiteral，但因为后面还有Token没处理完，所以这个推导过程会失败，要退回来。\n我们是要用additive匹配整个Token串，而不仅仅是第一个Token。\n\n第二遍：用第二个产生式，additive-&amp;gt;additive-&amp;gt;IntLiteral，还是一样失败。原因同上。\n\n第三遍：additive-&amp;gt;additive-&amp;gt;additive-&amp;gt;IntLiteral。\n第四遍：.... 一直不停。\n\n这样说，有没有帮助？\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566376942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1493922,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","nickname":"傲娇的小宝","note":"","ucode":"C079B19BCC1B7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6056,"discussion_content":"嗯嗯，应该是和我理解的一样，因为左边只是一个token，不是完整的语句，所以先处理右边，再结合运算符，这样就完整了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566644667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126034,"user_name":"M1racle","can_delete":false,"product_type":"c1","uid":1057144,"ip_address":"","ucode":"CFA981F34AFDA8","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/78/732a2e33.jpg","comment_is_top":false,"comment_ctime":1566297763,"is_pvip":true,"replies":[{"id":"46661","content":"收到你的意见。谢谢！<br>我会在文稿末尾标注清楚。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566377155,"ip_address":"","comment_id":126034,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566297763","product_id":100034101,"comment_content":"原本想自己实现一份的，结果深度优先遍历忘却了，回去补补在继续写，老师能提个意见吗，能在每篇文章的后面都标注一下都用到了那些文件么？要不然git 里面的readme太简略了，只能通过源码再去看文件引用","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463797,"discussion_content":"收到你的意见。谢谢！\n我会在文稿末尾标注清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566377155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126013,"user_name":"京京beaver","can_delete":false,"product_type":"c1","uid":1179056,"ip_address":"","ucode":"C21838D7CA7D6B","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/b0/e30fd916.jpg","comment_is_top":false,"comment_ctime":1566293289,"is_pvip":false,"replies":[{"id":"46664","content":"非常好！<br>自己动手能学得更好！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566377306,"ip_address":"","comment_id":126013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566293289","product_id":100034101,"comment_content":"这篇文章讲解了2个不同表达式的语法树构造的过程。<br>第一个是整型变量定义int a=b+3; <br>第二个是四则算数表达式2+3*5; <br>整个解析过程分成两步，第一步是词法分析，就是抽取了token的列表，词法分析的程序是共用的。<br>第二步语法分析，两个表达式是各做各的。<br><br>我把老师示例代码整理了一下，去掉了暂时用不掉的部分，看起来会简单一些。<br>https:&#47;&#47;gitee.com&#47;babayetu&#47;myclang-03-grammar-analysis","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463786,"discussion_content":"非常好！\n自己动手能学得更好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566377306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126008,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1566292743,"is_pvip":false,"replies":[{"id":"46665","content":"对的，代码一定要跑一跑，改一改！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566377328,"ip_address":"","comment_id":126008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566292743","product_id":100034101,"comment_content":"读了第一遍 有点懵逼  感觉还是前面的2讲缺少动手实践   准备在复习下前面的 多动手实际操作一下","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463784,"discussion_content":"对的，代码一定要跑一跑，改一改！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566377328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125927,"user_name":"2xshu","can_delete":false,"product_type":"c1","uid":1188473,"ip_address":"","ucode":"71584CB9676EDF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKsz8j0bAayjSne9iakvjzUmvUdxWEbsM9iasQ74spGFayIgbSE232sH2LOWmaKtx1WqAFDiaYgVPwIQ/132","comment_is_top":false,"comment_ctime":1566273518,"is_pvip":false,"replies":[{"id":"46251","content":"哈哈！<br>在后端部分，我们主要会用C++。到时候你可能会比较Happy：）<br>有些同学在把代码改成他们熟悉的语言。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566276641,"ip_address":"","comment_id":125927,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566273518","product_id":100034101,"comment_content":"老师，要是有c代码就非常完美了。当然现在也很完美。主要是我不太会java。。。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463755,"discussion_content":"哈哈！\n在后端部分，我们主要会用C++。到时候你可能会比较Happy：）\n有些同学在把代码改成他们熟悉的语言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566276641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590892,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","nickname":"Varphp","note":"","ucode":"889550391E3F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5513,"discussion_content":"我觉得node更好😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566314247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125873,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1566266714,"is_pvip":false,"replies":[{"id":"46249","content":"文稿中后面的部分，就是一个解析过程呀。<br>不过不要着急。我们有好几讲都是围绕语法分析过程。你会逐步建立起直观的认知。培养这种感觉是最重要的。比掌握严密的算法还重要。<br>你多读几遍文稿。一下子没明白也没关系。因为后面还会继续围绕语法来讲。还会引入这方面的工具。你会逐步明白，奥，原来就是这么回事。<br>当然，如有可能，最重要的就是动手。首先把例子跑一跑，然后再改一改！动手才会真正明白！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566274430,"ip_address":"","comment_id":125873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566266714","product_id":100034101,"comment_content":"我们首先把变量声明语句的规则，用形式化的方法表达一下。它的左边是一个非终结符（Non-terminal）。右边是它的产生式（Production Rule）。在语法解析的过程中，左边会被右边替代。如果替代之后还有非终结符，那么继续这个替代过程，直到最后全部都是终结符（Terminal），也就是 Token。只有终结符才可以成为 AST 的叶子节点。<br>对这段话不是很理解唉，可以举一个例子吗？比如int age = 45; 用上面上的语法解析的过程是怎么样的？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463727,"discussion_content":"文稿中后面的部分，就是一个解析过程呀。\n不过不要着急。我们有好几讲都是围绕语法分析过程。你会逐步建立起直观的认知。培养这种感觉是最重要的。比掌握严密的算法还重要。\n你多读几遍文稿。一下子没明白也没关系。因为后面还会继续围绕语法来讲。还会引入这方面的工具。你会逐步明白，奥，原来就是这么回事。\n当然，如有可能，最重要的就是动手。首先把例子跑一跑，然后再改一改！动手才会真正明白！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566274430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125852,"user_name":"江永枫","can_delete":false,"product_type":"c1","uid":1015357,"ip_address":"","ucode":"6206B16BB389B8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/3d/e97e661c.jpg","comment_is_top":false,"comment_ctime":1566265190,"is_pvip":true,"replies":[{"id":"46248","content":"后缀表达式算是一种中间语言。我们讲中间语言的时候会提到这种方式。<br>但后缀表达式也是跟AST同构的，从AST翻译过来的。如果AST树的结构错了，翻译也会出错。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566274210,"ip_address":"","comment_id":125852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566265190","product_id":100034101,"comment_content":"文中的算术优先级和求解顺序问题，能否利用后缀表达式特性来解决呢。对后缀表达式的遍历求解过程就可以构建正确的AST，不过好像不是通用的方式。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463718,"discussion_content":"后缀表达式算是一种中间语言。我们讲中间语言的时候会提到这种方式。\n但后缀表达式也是跟AST同构的，从AST翻译过来的。如果AST树的结构错了，翻译也会出错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566274210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125694,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1566227230,"is_pvip":false,"replies":[{"id":"46160","content":"忽略各种术语。专注于理解过程，建立直观认识！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566228702,"ip_address":"","comment_id":125694,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566227230","product_id":100034101,"comment_content":"这一节对零基础的人还是有难度的","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463662,"discussion_content":"忽略各种术语。专注于理解过程，建立直观认识！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566228702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590892,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","nickname":"Varphp","note":"","ucode":"889550391E3F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5514,"discussion_content":"我就蒙了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566314336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125538,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566200411,"is_pvip":false,"replies":[{"id":"46093","content":"加油！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566209426,"ip_address":"","comment_id":125538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566200411","product_id":100034101,"comment_content":"这节有点难，要好好消化一下。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463600,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566209426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}