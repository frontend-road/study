{"id":640978,"title":"17｜框架升级：如何小步安全地升级数据库框架？","content":"<p>你好，我是黄俊彬。</p><p>上节课我们重构了消息组件，最后遗留了一个问题，就是消息组件的数据存储都是采用SQL拼写的方式来操作，这样不便于后续的扩展及维护。</p><p>除此之外，相比前面的其他重构，升级数据框架需要考虑的场景会更多，例如升级框架以后用户的重要数据不能丢失。</p><p>今天我们以Sharing项目为例，一起把项目中原先采用SQL拼写的方式替换为使用Room框架来统一管理缓存数据。在这个过程中我会与你分享如何小步安全重构，分阶段完成数据库框架的升级。为了确保重构完的代码不会破坏原有功能，还有用户的关键数据不丢失，我还会讲解如何给数据操作相关功能做自动化测试覆盖，以及如何实现更安全的数据迁移。</p><h2>代码分析</h2><p>我们先一起来看看消息组件中创建数据库表的相关操作，核心代码是后面这样。</p><pre><code class=\"language-plain\">//数据库表的创建\nclass DataBaseHelper(context: Context?) : SQLiteOpenHelper(context, \"message.db\", null, 1) {\n    override fun onCreate(db: SQLiteDatabase) {\n        createTable(db)\n    }\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {}\n    fun createTable(db: SQLiteDatabase) {\n        val createTableSql = \"\"\"CREATE TABLE IF NOT EXISTS $message_info(\n   $id INTEGER PRIMARY KEY AUTOINCREMENT,\n   $content VARCHAR(1024) ,\n   $fileName VARCHAR(1024) ,\n   $date LONG \n)\"\"\"\n        try {\n            db.execSQL(createTableSql)\n        } catch (e: Exception) {\n            Log.d(\"Task:Sql\", e.message!!)\n        }\n    }\n    companion object {\n        var message_info = \"message_info\"\n        var id = \"id\"\n        var content = \"content\"\n        var fileName = \"fileName\"\n        var date = \"date\"\n    }\n}\n</code></pre><!-- [[[read_end]]] --><p>我们从上述核心代码，可以看出Sharing项目主要通过SQLite提供的SQLiteDatabase以及SQLiteOpenHelper来创建数据表。</p><p>目前Sharing项目仅有一个表以及简单的几个字段，通过SQL拼写的方式看起来也还好维护，但是<strong>如果现在面临的是几十个表以及几百个字段，那么管理和维护这些拼写的SQL字符串就会非常困难，当有修改的时候也非常容易出错。</strong></p><p>我们继续来看数据的缓存以及读取操作。</p><pre><code class=\"language-plain\">//进行信息缓存以及读取的代码\nclass LocalDataSource constructor( private var mContext: Context) : IDataSource {\n    override fun getMessageListFromCache(): MutableList&lt;Message&gt; {\n        val messageList: MutableList&lt;Message&gt; = ArrayList()\n        val dataBaseHelper = DataBaseHelper(mContext)\n        val c = dataBaseHelper.writableDatabase.query(\n            DataBaseHelper.Companion.message_info, null,null, null, null, null,null)\n        if (c.moveToFirst()) { \n            for (i in 0 until c.count) {\n                c.move(i) //移动到指定记录\n                val id = c.getInt(c.getColumnIndex(DataBaseHelper.Companion.id))\n                val content = c.getString(c.getColumnIndex(DataBaseHelper.Companion.content))\n                val fileName = c.getString(c.getColumnIndex(DataBaseHelper.Companion.fileName))\n                val date = c.getLong(c.getColumnIndex(DataBaseHelper.Companion.date))\n                messageList.add(Message(id, content, fileName, date))\n            }\n        }\n        return messageList\n    }\n    override fun saveMessageToCache(messageList: List&lt;Message&gt;) {\n        val dataBaseHelper = DataBaseHelper(mContext)\n        if (messageList.isNotEmpty()) {\n            dataBaseHelper.writableDatabase.delete(\n                DataBaseHelper.Companion.message_info, null,null)\n            for (message in messageList) {\n                val cv = ContentValues()\n                cv.put(DataBaseHelper.Companion.id, message.id)\n                cv.put(DataBaseHelper.Companion.content, message.content)\n                cv.put(DataBaseHelper.Companion.date, message.date)\n                cv.put(DataBaseHelper.Companion.fileName, message.fileName)\n                dataBaseHelper.writableDatabase.insert(\n                    DataBaseHelper.Companion.message_info,null,cv)\n            }\n        }\n    }\n}\n</code></pre><p>通过上述代码可以看到，<strong>减少虽然SQLite提供了query以及delete等操作方法，我们可以减少编写SQL字符串，但是我们仍然需要去编写大量的对象转换代码。</strong></p><p>其实这些代码都是我们前面提到的非业务的模板代码，这会大大增加我们维护代码的成本。为了解决这些问题，官方也提供了新的数据库框架 <a href=\"https://developer.android.com/training/data-storage/room?hl=zh_cn\">Room</a>。官方文档强烈建议使用 Room，而不是<a href=\"https://developer.android.com/training/data-storage/sqlite?hl=zh-cn\">直接使用 SQLite API</a>。</p><p>下面我们就一起来看看如何安全地升级Room框架。</p><h2>补充自动化守护测试</h2><p>首先第一步还是需要先做基本的自动化测试覆盖，作为后续重构的安全守护网。</p><p>这里我们主要针对LocalDataSource 类来做测试，保证基本的数据缓存以及读取功能是正确的。用例设计是这样的。</p><ul>\n<li>测试用例1：当message数据表没有缓存数据时，获取的缓存数据为空。</li>\n<li>测试用例2：当message数据表中有缓存数据时，能够成功获取缓存数据。读取的缓存数据内容需要与保持的缓存数据内容一致。</li>\n</ul><p>现在，我们需要将测试用例转换成自动化测试用例。</p><pre><code class=\"language-plain\">class LocalDataSourceTest {\n    //用例1\n    @Test\n    fun `should get message list is empty when database has not data`() = runBlocking {\n        //given\n        val localDataSource = LocalDataSource(ApplicationProvider.getApplicationContext())\n        //when\n        val messageListFromCache = localDataSource.getMessageListFromCache()\n        //then\n        assert(messageListFromCache.isEmpty())\n    }\n    //用例2\n    @Test\n    fun `should get message list success when database has data`() = runBlocking {\n        //given\n        val localDataSource = LocalDataSource(ApplicationProvider.getApplicationContext())\n        localDataSource.saveMessageToCache(getMockData())\n        //when\n        val messageListFromCache = localDataSource.getMessageListFromCache()\n        //then\n        val messageOne = messageListFromCache[0]\n        Truth.assertThat(messageOne.id).isEqualTo(1)\n        Truth.assertThat(messageOne.content).isEqualTo(\"张三共享文件到消息中...\")\n        Truth.assertThat(messageOne.fileName).isEqualTo(\"大型Android遗留系统重构.pdf\")\n        Truth.assertThat(messageOne.formatDate).isEqualTo(\"2021-03-17 14:47:55\")\n        val messageTwo = messageListFromCache[1]\n        Truth.assertThat(messageTwo.id).isEqualTo(2)\n        Truth.assertThat(messageTwo.content).isEqualTo(\"李四共享视频到消息中……\")\n        Truth.assertThat(messageTwo.fileName).isEqualTo(\"修改代码的艺术.pdf\")\n        Truth.assertThat(messageTwo.formatDate).isEqualTo(\"2021-03-17 14:48:08\")\n    }\n}\n</code></pre><p>后面是执行测试用例的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/63/1b5fd583635f8aed02c496cc44104663.jpg?wh=2748x1455\" alt=\"\"></p><h2>小步安全重构</h2><p>有了基本的测试守护以后，接下来我们就可以小步地做安全重构，<strong>注意在过程中每当我们完成一步重构后，都可以频繁运行测试来验证是否有破坏原有的逻辑。</strong></p><p>拆分重构过程的要求是，每一小步的重构都不能破坏之前的功能，而且全部步骤都完成之后即可完成整体的重构。</p><p>这里我们结合Room框架的设计，把整个重构分成下面这5个步骤。</p><p>第一步是使用Room注解更新实体。</p><p>第二步是使用Room的SupportSQLiteOpenHelper进行SQL操作。这2个步骤完成后，不会修改原有的查询及删除操作代码。</p><p>接下来是第三步，进阶使用Room的Dao注解方式来管理数据的增删改查，替换掉原有的查询及删除代码。第四步是优化操作，使用协程来优化IO的异步操作。最后是第五步，迁移旧数据。</p><p><strong>1. 使用Room注解更新实体</strong></p><p>首先我们来看第一步，这一步相对比较简单，使用Room的注解标记新的实体代码就可以了。</p><pre><code class=\"language-plain\">@Entity(tableName = \"message_info\")\nclass Message(\n    @PrimaryKey @ColumnInfo(name = \"id\") var id: Int,\n    @ColumnInfo(name = \"content\") var content: String,\n    @ColumnInfo(name = \"fileName\") var fileName: String,\n    @ColumnInfo(name = \"date\") var date: Long\n) {\n    @Ignore\n    val formatDate = DateUtil.getDateToString(date)\n    @Ignore\n    val downloadCount = ARouter.getInstance().navigation(IFileStatistics::class.java)\n        ?.getDownloadCount(id.toString())\n}\n</code></pre><p><strong>2. 使用Room的SupportSQLiteOpenHelper进行SQL操作</strong></p><p>Room提供了SupportSQLiteOpenHelper类，可以用它替换SQLite中的SQLiteOpenHelper，我们将原本使用SQLiteOpenHelper的地方替换为使用Room的SupportSQLiteOpenHelper。</p><pre><code class=\"language-plain\">@Database(entities = [Message::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n}\n\nclass LocalDataSource constructor(\n    private var mContext: Context\n) : IDataSource {\n    val db = Room.databaseBuilder(\n        mContext,\n        AppDatabase::class.java, \"message.db\"\n    ).build()\n    \n   override fun getMessageListFromCache(): MutableList&lt;Message&gt; {\n    val messageList: MutableList&lt;Message&gt; = ArrayList()\n    val dataBaseHelper = db.openHelper\n    //... ...\n    return messageList\n  }\n\n  override fun saveMessageToCache(messageList: List&lt;Message&gt;) {\n    val dataBaseHelper = db.openHelper\n     //... ...\n    }\n}\n</code></pre><p><strong>3. 使用Dao注解方式来管理数据的增删改查</strong></p><p>接下来，我们可以选择将query及delete等的操作，使用Room的Dao注解做替换。</p><pre><code class=\"language-plain\">@Dao\ninterface MessageDao {\n    @Query(\"SELECT * FROM message_info\")\n    suspend fun getAll(): List&lt;Message&gt;\n    @Insert\n    suspend fun insertAll(vararg message: Message)\n\n    @Query(\"DELETE FROM message_info\")\n    suspend fun deleteAll()\n}\n</code></pre><p>完成后，就可以将LocalDataSource的实现替换为使用MessageDao进行操作了。</p><pre><code class=\"language-plain\">class LocalDataSource constructor(\n    private var mContext: Context\n) : IDataSource {\n    val db = Room.databaseBuilder(\n        mContext,\n        AppDatabase::class.java, \"message.db\"\n    ).build()\n    override suspend fun getMessageListFromCache(): MutableList&lt;Message&gt; {\n        return db.messageDao().getAll().toMutableList()\n    }\n    override suspend fun saveMessageToCache(messageList: List&lt;Message&gt;) {\n        messageList.let {\n            db.messageDao().deleteAll()\n            db.messageDao().insertAll(*it.toTypedArray())\n        }\n    }\n}\n</code></pre><p>至此我们完成了Room框架的升级，你可以对比一下LocalDataSource改造前后的代码，<strong>使用Room框架大大帮我们减少了模板代码的编写，代码更加容易维护。</strong></p><p><strong>4. 数据迁移</strong></p><p>如果我们升级数据库框架时，调整过表结构的话，这时就可以用Room提供的Migration机制升级数据。</p><p>例如Sharing项目在升级Room框架时，我们新增了一个count字段用于缓存文件的下载数量，但是在旧的数据表中并没有这个字段，这时就可以使用Migration机制来迁移升级数据。</p><pre><code class=\"language-plain\">private val MIGRATION_1_2 = object : Migration(1, 2) {\n    override fun migrate(database: SupportSQLiteDatabase) {\n        database.execSQL(\"ALTER TABLE message_info RENAME TO message_info_back_up\")\n        database.execSQL(\"CREATE TABLE message_info ( id  INTEGER PRIMARY KEY NOT NULL, content TEXT NOT NULL,date INTEGER NOT NULL, count INTEGER NOT NUL)\")\n        database.execSQL(\"INSERT INTO message_info (id, content,date，0) SELECT id, content,date FROM message_info_back_up\")\n    }\n}\nprivate val db = Room.databaseBuilder(\n    mContext,\n    AppDatabase::class.java, \"message.db\"\n).addMigrations(MIGRATION_1_2).build()\n</code></pre><p>在实际的项目中，我们需要根据数据对用户的重要性，来决定是否要做数据的迁移。例如一些缓存数据只是提高用户的体验，哪怕这部分数据没有了，从网络获取它也很方便，我们就不必迁移数据。</p><p>但如果对用户来说是关键的数据，就必须迁移和做专项的测试。例如一个短信息的APP（信息只缓存在本地），当升级框架后，迁移这些短信息就非常重要，因为这部分数据丢失的话，对用户来说是非常糟糕的体验。更多迁移数据的方法，你可以参考<a href=\"https://developer.android.google.cn/training/data-storage/room/migrating-db-versions\">官网的说明</a>。</p><h2>集成验收</h2><p>跟之前的组件内分层架构重构一样，完成重构后我们需要完成最后的集成验收。</p><p>验收有三个标准：第一是编译通过，能够打包出安装包；第二是架构守护用例执行通过；第三是验收自动化测试执行通过。</p><p>下面我们来看看改造后相关的自动化测试运行结果。</p><p>基本冒烟及架构守护用例自动化测试报告如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/08/68/0865058ae824d41ce3585802de45c868.jpg?wh=2748x1084\" alt=\"\"></p><p>消息组件自动化测试报告如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/05/6a/05ea5579a087fcb7dcb66e0edce3026a.jpg?wh=2748x1084\" alt=\"\"><br>\n至此，我们完成了对Sharing项目的数据库框架升级重构。</p><h2>总结</h2><p>今天我给你讲解了如何小步安全地升级数据库框架。</p><p>改造前Sharing项目使用了SQLite来管理数据库，这个方式主要存在2个问题。第一个是使用拼写SQL方式来管理表创建，不便于扩展；第二个是存在大量的对象转换重复代码，不便于维护。所以我们根据官方的建议，使用Room框架来帮我们完成这些重复的工作，让我们可以更聚焦在业务开发上。</p><p>Room框架的升级可以分2个阶段完成。</p><p>第一个阶段是先引入 <strong>Room框架</strong>，将原本使用SQLiteOpenHelper操作数据库的方式，调整为使用Room提供的SupportSQLiteOpenHelper来进行管理，此时不会修改原有的查询及删除操作代码。</p><p>第二个阶段可以使用 <strong>Room提供的Dao注解方式</strong>，替换掉原来的insert、query等方法，完成后可以减少大量的增删改查模板代码。此时你就可以充分感受到使用框架带来的收益。同样完成一个功能，我们可以少写很多模板的代码。</p><p>特别需要注意的是，<strong>如果在改造过程中，如果数据表结构有变化，我们需要采用Room框架提供的Migration机制来迁移数据。</strong></p><p>至此，我们已经完成了第三篇解耦重构篇的学习。接下来我们将进入第四篇持续交付篇的学习，让我们一起学习组件化架构持续交付的核心实践，帮助我们更好提高版本发布的效率及质量，敬请期待！</p><h2>思考题</h2><p>感谢你学完了今天的内容，今天的思考题是这样的：曾经在一个项目上有一个同学问我说我们团队就想使用SQL拼写的方式，因为这样能做到最极端的性能优化，你怎么看这个问题呢？</p><p>感谢你学完了今天的课程，欢迎你把它分享给你的同事或朋友，让我们一起来高效高质量交付软件！</p>","comments":[{"had_liked":false,"id":370781,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"山西","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1679273181,"is_pvip":false,"replies":[{"id":135310,"content":"Hi，peter。\nQ1：适配大屏，通常采用多布局文件的方式。\nQ2：Insert注解表示插入数据，不用SQL语句，后面的Delete由于是要删除所有数据，Delete注解不支持，所以用了Query。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1679363977,"ip_address":"广东","comment_id":370781,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"请教老师两个问题：\nQ1：屏幕适配一般怎么做？采用框架？如采用，什么框架好？还是逐页面来做？不采用框架的话，布局时控件宽高都用weight，距离用dp，字体用sp，这样就可以适配吗？\nQ2：MessageDao的定义中，@Insert后面为什么没有SQL语句？另外，Delete函数的注解写的是@Query，应该是笔误吧。","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610043,"discussion_content":"Hi，peter。\nQ1：适配大屏，通常采用多布局文件的方式。\nQ2：Insert注解表示插入数据，不用SQL语句，后面的Delete由于是要删除所有数据，Delete注解不支持，所以用了Query。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679363977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382321,"user_name":"Aā 阳～","can_delete":false,"product_type":"c1","uid":2251159,"ip_address":"上海","ucode":"F89841D298A90D","user_header":"https://static001.geekbang.org/account/avatar/00/22/59/97/9b7a412c.jpg","comment_is_top":false,"comment_ctime":1697073511,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，可以解释一下思考题吗","like_count":1}]}