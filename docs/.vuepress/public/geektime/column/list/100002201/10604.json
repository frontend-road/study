{"id":10604,"title":"82 | 程序员练级攻略：分布式架构经典图书和论文","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><h1>经典图书</h1><p>首先，我推荐几本分布式架构方面的经典图书。</p><ul>\n<li>\n<p><strong><a href=\"http://book.mixu.net/distsys/single-page.html\">Distributed Systems for fun and profit</a></strong>，这是一本免费的电子书。作者撰写此书的目的是希望以一种更易于理解的方式，讲述以亚马逊的Dynamo、谷歌的Bigtable和MapReduce等为代表的分布式系统背后的核心思想。</p>\n</li>\n<li>\n<p><strong><a href=\"https://book.douban.com/subject/27154352/\">Designing Data Intensive Applications</a></strong>，这本书是一本非常好的书，我们知道，在分布式的世界里，数据结点的扩展是一件非常麻烦的事。这本书深入浅出地用很多的工程案例讲解了如何让数据结点做扩展。作者马丁·科勒普曼（Martin Kleppmann）在分布式数据系统领域有着很深的功底，并在这本书中完整地梳理各类纷繁复杂设计背后的技术逻辑，不同架构之间的妥协与超越，很值得开发人员与架构设计者阅读。</p>\n<p>这本书深入到B-Tree、SSTables、LSM这类数据存储结构中，并且从外部的视角来审视这些数据结构对NoSQL和关系型数据库的影响。这本书可以让你很清楚地了解到真正世界的大数据架构中的数据分区、数据复制的一些坑，并提供了很好的解决方案。最赞的是，作者将各种各样技术的本质非常好地关联在一起，令你触类旁通。</p>\n<p>而且，这本书完全就是抽丝剥茧，循循善诱，从“提出问题”到“解决问题”、“解决方案”、“优化方案”和“对比不同的方案”，一点一点地把非常晦涩的技术和知识展开。本书的引用相当多，每章后面都有几百个Reference，通过这些Reference你可以看到更为广阔、更为精彩的世界。</p>\n</li>\n<li>\n<p><a href=\"http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/Distributed%20Systems%20Principles%20and%20Paradigms.pdf\">Distributed Systems: Principles and Paradigms</a> ，本书是由计算机科学家安德鲁·斯图尔特·塔能鲍姆（Andrew S. Tanenbaum）和其同事马丁·范·斯蒂恩（Martin van Steen）合力撰写的，是分布式系统方面的经典教材。</p>\n<p>语言简洁，内容通俗易懂，介绍了分布式系统的七大核心原理，并给出了大量的例子；系统讲述了分布式系统的概念和技术，包括通信、进程、命名、同步化、一致性和复制、容错以及安全等；讨论了分布式应用的开发方法（即范型）。但本书不是一本指导“如何做”的手册，仅适合系统性地学习基础知识，了解编写分布式系统的基本原则和逻辑。中文翻译版为<a href=\"https://item.jd.com/10079452.html\">《分布式系统原理与范型》（第二版）</a>。</p>\n</li>\n<li>\n<p><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a>，<br>\n这是一本免费的在线小册子，其中文翻译版 <a href=\"http://nettee.github.io/posts/2016/Scalable-Web-Architecture-and-Distributed-Systems/\">可扩展的Web架构和分布式系统</a>。本书主要针对面向互联网（公网）的分布式系统，但其中的原理或许也可以应用于其他分布式系统的设计中。作者的观点是，通过了解大型网站的分布式架构原理，小型网站的构建也能从中受益。本书从大型互联网系统的常见特性，如高可用、高性能、高可靠、易管理等出发，引出了一个类似于Flickr的典型的大型图片网站的例子。</p>\n</li>\n<li>\n<p><a href=\"http://dcg.ethz.ch/lectures/podc_allstars/lecture/podc.pdf\">Principles of Distributed Systems</a> ，本书是苏黎世联邦理工学院的教材。它讲述了多种分布式系统中会用到的算法。虽然分布式系统的不同场景会用到不同算法，但并不表示这些算法都会被用到。不过，作为学生来说，掌握了算法设计的精髓也就能举一反三地设计出解决其他问题的算法，从而得到分布式系统架构设计中所需的算法。</p>\n</li>\n</ul><!-- [[[read_end]]] --><h1>经典论文</h1><h2>分布式事务</h2><p>想了解分布式模型中最难的“分布式事务”，你需要看看Google App Engine联合创始人瑞恩·巴雷特（Ryan Barrett）在2009年的Google I/O大会上的演讲《<a href=\"http://snarfed.org/transactions_across_datacenters_io.html\">Transaction Across DataCenter</a>》（<a href=\"http://www.youtube.com/watch?v=srOgpXECblk\">YouTube视频</a>）。</p><p>在这个演讲中，巴雷特讲述了各种经典的解决方案如何在一致性、事务、性能和错误上做平衡。而最后得到为什么分布式系统的事务只有Paxos算法是最好的。</p><p>下面这个图是这个算法中的结论。</p><p><img src=\"https://coolshell.cn/wp-content/uploads/2014/01/Transaction-Across-DataCenter.jpg\" alt=\"\"></p><p>你也可以移步看一下我在Coolshell上写的这篇文章《<a href=\"https://coolshell.cn/articles/10910.html\">分布式系统的事务处理</a>》。</p><h2>Paxos一致性算法</h2><p>Paxos算法，是莱斯利·兰伯特（Lesile Lamport）于1990年提出来的一种基于消息传递且具有高度容错特性的一致性算法。但是这个算法太过于晦涩，所以一直以来都属于理论上的论文性质的东西。其真正进入工程圈，主要是来源于Google的Chubby lock——一个分布式的锁服务，用在了Bigtable中。直到Google发布了下面这两篇论文，Paxos才进入到工程界的视野中来。</p><ul>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf\">Bigtable: A Distributed Storage System for Structured Data</a></li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a></li>\n</ul><p>Google与Bigtable相齐名的还有另外两篇论文。</p><ul>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\">The Google File System</a></li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">MapReduce: Simplified Data Processing on Large Clusters</a></li>\n</ul><p>不过，这几篇文章中并没有讲太多的Paxos算法上的细节，反而是在<a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf\">Paxos Made Live - An Engineering Perspective</a> 这篇论文中提到了很多工程实现的细节。这篇论文详细解释了Google实现Paxos时遇到的各种问题和解决方案，讲述了从理论到实际应用二者之间巨大的鸿沟。</p><p>Paxos算法的原版论文比较晦涩，也不易懂。这里推荐一篇比较容易读的—— <a href=\"http://harry.me/blog/2014/12/27/neat-algorithms-paxos/\">Neat Algorithms - Paxos</a> 。这篇文章中还有一些小动画帮助你读懂。还有一篇可以帮你理解的文章是 <a href=\"https://angus.nyc/2012/paxos-by-example/\">Paxos by Examples</a>。</p><h2>Raft一致性算法</h2><p>因为Paxos算法太过于晦涩，而且在实际的实现上有太多的坑，并不太容易写对。所以，有人搞出了另外一个一致性的算法，叫Raft。其原始论文是 <a href=\"https://raft.github.io/raft.pdf\">In search of an Understandable Consensus Algorithm (Extended Version) </a> ，寻找一种易于理解的Raft算法。这篇论文的译文在InfoQ上，题为《<a href=\"https://infoq.cn/article/raft-paper\">Raft一致性算法论文译文</a>》，推荐你读一读。</p><p>这里推荐几个不错的Raft算法的动画演示。</p><ul>\n<li><a href=\"http://thesecretlivesofdata.com/raft/\">Raft - The Secret Lives of Data</a></li>\n<li><a href=\"https://raft.github.io/\">Raft Consensus Algorithm</a></li>\n<li><a href=\"http://kanaka.github.io/raft.js/\">Raft Distributed Consensus Algorithm Visualization</a></li>\n</ul><h2>Gossip一致性算法</h2><p>后面，业内又搞出来一些工程上的东西，比如Amazon的DynamoDB，其论文<a href=\"http://bnrg.eecs.berkeley.edu/~randy/Courses/CS294.F07/Dynamo.pdf\">Dynamo: Amazon’s Highly Available Key Value Store</a> 的影响力非常大。这篇论文中讲述了Amazon的DynamoDB是如何满足系统的高可用、高扩展和高可靠的。其中展示了系统架构是如何做到数据分布以及数据一致性的。GFS采用的是查表式的数据分布，而DynamoDB采用的是计算式的，也是一个改进版的通过虚拟结点减少增加结点带来数据迁移的一致性哈希。</p><p>这篇文章中有几个关键的概念，一个是Vector Clock，另一个是Gossip协议。</p><ul>\n<li>\n<p><a href=\"https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/\">Time, Clocks and the Ordering of Events in a Distributed System</a> ，这篇文章是莱斯利·兰伯特（Leslie Lamport）于1978年发表的，并在2007年被选入SOSP的名人堂，被誉为第一篇真正的“分布式系统”论文，该论文曾一度成为计算机科学史上被引用最多的文章。分布式系统中的时钟同步是一个非常难的问题，因为分布式系统中是使用消息进行通信的，若使用物理时钟来进行同步，一方面是不同的process的时钟有差异，另一方面是时间的计算也有一定的误差，这样若有两个时间相同的事件，则无法区分它们谁前谁后了。这篇文章主要解决分布式系统中的时钟同步问题。</p>\n</li>\n<li>\n<p><a href=\"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures.html\">马萨诸塞大学课程Distributed Operating System</a> 中第10节 <a href=\"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures/Lec10.pdf\">Clock Synchronization</a>，这篇讲义讲述了时钟同步的问题。</p>\n</li>\n<li>\n<p>关于Vector Clock，你可以看一下<a href=\"http://basho.com/posts/technical/why-vector-clocks-are-easy/\"> Why Vector Clocks are Easy</a> 和 <a href=\"http://basho.com/posts/technical/why-vector-clocks-are-hard/\">Why Vector Clocks are Hard</a> 这两篇文章。</p>\n</li>\n</ul><p>用来做数据同步的Gossip协议的原始论文是 <a href=\"https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf\">Efficient Reconciliation and Flow Control for Anti-Entropy Protocols</a>。Gossip算法也是Cassandra使用的数据复制协议。这个协议就像八卦和谣言传播一样，可以“一传十、十传百”传播开来。但是这个协议看似简单，细节上却非常麻烦。</p><p>Gossip协议也是NoSQL数据库Cassandra中使用到的数据协议，你可以上YouTube上看一下这个视频介绍： <a href=\"https://www.youtube.com/watch?v=FuP1Fvrv6ZQ\">Understanding Gossip (Cassandra Internals)</a>。</p><p>关于Gossip的一些图示化的东西，你可以看一下动画 <a href=\"https://rrmoelker.github.io/gossip-visualization/\">Gossip Visualization</a>。</p><h2>分布式存储和数据库</h2><p>除了前面的Google的BigTable和Google File System那两篇论文，还有Amazon的DynamoDB的论文，下面也有几篇也是要读一下的。</p><ul>\n<li>\n<p>一篇是AWS Aurora的论文 <a href=\"http://www.allthingsdistributed.com/files/p1041-verbitski.pdf\">Amazon Aurora: Design Considerations for High Throughput Cloud -Native Relation Databases</a>。</p>\n</li>\n<li>\n<p>另一篇是比较有代表的论文是Google的 <a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/spanner-osdi2012.pdf\">Spanner: Google’s Globally-Distributed Database</a>。 其2017年的新版论文：<a href=\"https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45855.pdf\">Spanner, TrueTime &amp; The CAP Theorem</a>。</p>\n</li>\n<li>\n<p><a href=\"http://research.google.com/pubs/archive/38125.pdf\">F1 - The Fault-Tolerant Distributed RDBMS Supporting Google’s Ad Business</a> 。</p>\n</li>\n<li>\n<p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.161.6751&rep=rep1&type=pdf\">Cassandra: A Decentralized Structured Storage System</a> 。</p>\n</li>\n<li>\n<p><a href=\"http://www.ssrc.ucsc.edu/Papers/weil-sc06.pdf\">CRUSH: Controlled, Scalable, Decentralized Placement of Replicated Data</a>, 这里提到的算法被应用在了Ceph分布式文件系统中，其架构可以读一下 <a href=\"https://ceph.com/wp-content/uploads/2016/08/weil-rados-pdsw07.pdf\">RADOS - A Scalable, Reliable Storage Service for Petabyte-scale<br>\nStorage Clusters</a> 以及 <a href=\"http://docs.ceph.com/docs/jewel/architecture/\">Ceph的架构文档</a>。</p>\n</li>\n</ul><h2>分布式消息系统</h2><ul>\n<li>\n<p>分布式消息系统，你一定要读一下Kafka的这篇论文 <a href=\"http://notes.stephenholiday.com/Kafka.pdf\">Kafka: a Distributed Messaging System for Log Processing</a>。</p>\n</li>\n<li>\n<p><a href=\"https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-sharma.pdf\">Wormhole: Reliable Pub-Sub to Support Geo-replicated Internet Services</a> ，Wormhole是Facebook内部使用的一个Pub-Sub系统，目前还没有开源。它和Kafka之类的消息中间件很类似。但是它又不像其它的Pub-Sub系统，Wormhole没有自己的存储来保存消息，它也不需要数据源在原有的更新路径上去插入一个操作来发送消息，是非侵入式的。其直接部署在数据源的机器上并直接扫描数据源的transaction logs，这样还带来一个好处，Wormhole本身不需要做任何地域复制（geo-replication）策略，只需要依赖于数据源的geo-replication策略即可。</p>\n</li>\n<li>\n<p><a href=\"https://engineering.linkedin.com/research/2012/all-aboard-the-databus-linkedlns-scalable-consistent-change-data-capture-platform\">All Aboard the Databus! LinkedIn’s Scalable Consistent Change Data Capture Platform</a> ， 在LinkedIn投稿SOCC 2012的这篇论文中，指出支持对不同数据源的抽取，允许不同数据源抽取器的开发和接入，只需该抽取器遵循设计规范即可。该规范的一个重要方面就是每个数据变化都必须被一个单调递增的数字标注（SCN），用于同步。这其中的一些方法完全可以用做异地双活的系统架构中。（和这篇论文相关的几个链接如下：<a href=\"https://915bbc94-a-62cb3a1a-s-sites.googlegroups.com/site/acm2012socc/s18-das.pdf?attachauth=ANoY7cpF7igQlU-DGe3gMeW4PZr0cnRDm6cFsuJnv8n5LtJqYrEE9TMMzctK8P9OUTzPD-M2efmpes3zsc10VXN0g6RmdqTpSv3YwgUIW08RBmUvv3XMpUhEAiHkLdrzqC5thiAu5kyskHhkflK3wPYPvA6PeH4uM_XD3u4Quo0MR87BXnE_TcmnRnPzUzNAAYLng2K5t5elUuTj9NaU4o8QSfFX8edgwA%3D%3D&attredirects=0\">PDF论文</a> 、 <a href=\"https://www.slideshare.net/amywtang/databus-socc-v3\">PPT分享</a>。）</p>\n</li>\n</ul><h2>日志和数据</h2><ul>\n<li>\n<p><a href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\">The Log: What every software engineer should know about real-time data’s unifying abstraction</a> ，这篇文章好长，不过这是一篇非常好非常好的文章，这是每个工程师都应用知道的事，必看啊。你可以看中译版《<a href=\"https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md\">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a>》。</p>\n</li>\n<li>\n<p><a href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\">The Log-Structured Merge-Tree (LSM-Tree)</a> ，N多年前，谷歌发表了 Bigtable的论文，论文中很多很酷的方面，其一就是它所使用的文件组织方式，这个方法更一般的名字叫Log Structured-Merge Tree。LSM是当前被用在许多产品的文件结构策略：HBase、Cassandra、LevelDB、SQLite，甚至在MongoDB 3.0中也带了一个可选的LSM引擎（Wired Tiger实现的）。LSM有趣的地方是它抛弃了大多数数据库所使用的传统文件组织方法。实际上，当你第一次看它时是违反直觉的。这篇论文可以让你明白这个技术。（如果读起来有些费解的话，你可以看看中文社区里的这几篇文章：<a href=\"http://www.cnblogs.com/siegfang/archive/2013/01/12/lsm-tree.html\">文章一</a>、<a href=\"https://kernelmaker.github.io/lsm-tree\">文章二</a>。）</p>\n</li>\n<li>\n<p><a href=\"http://cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf\">Immutability Changes Everything</a> ，这篇论文是现任Salesforce软件架构师帕特·赫兰德（Pat Helland）在CIDR 2015大会上发表的（<a href=\"https://vimeo.com/52831373\">相关视频演讲</a>）。</p>\n</li>\n<li>\n<p><a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2013/11/Tango.pdf\">Tango: Distributed Data Structures over a Shared Log</a>）。这个论文非常经典，其中说明了不可变性（immutability）架构设计的优点。随着为海量数据集存储和计算而设计的以数据为中心的新型抽象技术的出现，分布式系统比以往任何时候都更容易构建。但是，对于元数据的存储和访问不存在类似的抽象。</p>\n<p>为了填补这一空白，Tango为开发人员提供了一个由共享日志支持的内存复制数据结构（例如地图或树）的抽象。Tango对象易于构建和使用，通过共享日志上简单的追加和读取操作来复制状态，而不是复杂的分布式协议。在这个过程中，它们从共享日志中获得诸如线性化、持久性和高可用性等属性。Tango还利用共享日志支持跨不同对象的快速事务处理，允许应用程序跨机器进行状态划分，并在不牺牲一致性的情况下扩展到底层日志的上限。</p>\n</li>\n</ul><h2>分布式监控和跟踪</h2><ul>\n<li>Google的分布式跟踪监控论文 - <a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf\">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</a>， 其开源实现有三个 <a href=\"http://zipkin.io/\">Zipkin</a>、<a href=\"https://github.com/naver/pinpoint\">Pinpoint</a> 和 <a href=\"http://htrace.incubator.apache.org/\">HTrace</a>。我个人更喜欢Zipkin。</li>\n</ul><h2>数据分析</h2><ul>\n<li>\n<p><a href=\"http://vldb.org/pvldb/vol5/p1771_georgelee_vldb2012.pdf\">The Unified Logging Infrastructure for Data Analytics at Twitter</a> ，Twitter公司的一篇关于日志架构和数据分析的论文。</p>\n</li>\n<li>\n<p><a href=\"http://www.datascienceassn.org/sites/default/files/Scaling%20Big%20Data%20Mining%20Infrastructure%20-%20The%20Twitter%20Experience.pdf\">Scaling Big Data Mining Infrastructure: The Twitter Experience</a> ，讲Twitter公司的数据分析平台在数据量越来越大，架构越来越复杂，业务需求越来越多的情况下，数据分析从头到底是怎么做的。</p>\n</li>\n<li>\n<p><a href=\"http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/pubs/archive/36632.pdf\">Dremel: Interactive Analysis of Web-Scale Datasets</a>，Google公司的Dremel，是一个针对临时查询提供服务的系统，它处理的是只读的多层数据。本篇文章介绍了它的架构与实现，以及它与MapReduce是如何互补的。</p>\n</li>\n<li>\n<p><a href=\"https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf\">Resident Distributed Datasets: a Fault-Tolerant Abstraction for In-Memory Cluster Computing</a>，这篇论文提出了弹性分布式数据集（Resilient Distributed Dataset，RDD）的概念，它是一个分布式存储抽象，使得程序员可以在大型集群上以容错的方式执行内存计算；解释了其出现原因：解决之前计算框架在迭代算法和交互式数据挖掘工具两种应用场景下处理效率低下的问题，并指出将数据保存在内存中，可以将性能提高一个数量级；同时阐述了其实现原理及应用场景等多方面内容。很有趣儿，推荐阅读。</p>\n</li>\n</ul><h2>与编程相关的论文</h2><ul>\n<li><a href=\"http://web.cs.ucdavis.edu/~pandey/Research/Papers/icdcs01.pdf\">Distributed Programming Model</a></li>\n<li><a href=\"http://www.di.ens.fr/~cezarad/popl16.pdf\">PSync: a partially synchronous language for fault-tolerant distributed algorithms</a></li>\n<li><a href=\"http://heather.miller.am/teaching/cs7680/\">Programming Models for Distributed Computing</a></li>\n<li><a href=\"http://db.cs.berkeley.edu/papers/UCB-lattice-tr.pdf\">Logic and Lattices for Distributed Programming</a></li>\n</ul><h2>其它的分布式论文阅读列表</h2><p>除了上面上的那些我觉得不错的论文，下面还有三个我觉得不错的分布式系统论文的阅读列表，你可以浏览一下。</p><ul>\n<li><a href=\"https://github.com/mmcgrana/services-engineering\">Services Engineering Reading List</a></li>\n<li><a href=\"http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html\">Readings in Distributed Systems</a></li>\n<li><a href=\"https://ai.google/research/pubs/?area=DistributedSystemsandParallelComputing\">Google Research - Distributed Systems and Parallel Computing</a></li>\n</ul><h1>小结</h1><p>今天分享的内容是分布式架构方面的经典图书和论文，并给出了导读文字，几乎涵盖了分布式系统架构方面的所有关键的理论知识。这些内容非常重要，是学好分布式架构的基石，请一定要认真学习。</p><p>下篇文章中，我们将讲述分布式架构工程设计方面的内容，包括设计原则、设计模式以及工程实践等方面的内容。敬请期待。</p><p>下面是《程序员练级攻略》系列文章的目录。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/8136\">开篇词</a></li>\n<li>入门篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8216\">零基础启蒙</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8217\">正式入门</a></li>\n</ul>\n</li>\n<li>修养篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8700\">程序员修养</a></li>\n</ul>\n</li>\n<li>专业基础篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8701\">编程语言</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8887\">理论学科</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8888\">系统知识</a></li>\n</ul>\n</li>\n<li>软件设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9369\">软件设计</a></li>\n</ul>\n</li>\n<li>高手成长篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9759\">Linux系统、内存和网络（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/9851\">异步I/O模型和Lock-Free编程（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10216\">Java底层知识</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10301\">数据库</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10603\">分布式架构入门（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10604\">分布式架构经典图书和论文（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11232\">分布式架构工程设计(分布式架构)</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11116\">微服务</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11665\">容器化和自动化运维</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11669\">机器学习和人工智能</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12271\">前端基础和底层原理（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12389\">前端性能优化和框架（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12486\">UI/UX设计（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12561\">技术资源集散地</a></li>\n</ul>\n</li>\n</ul>","neighbors":{"left":{"article_title":"81 | 程序员练级攻略：分布式架构入门","id":10603},"right":{"article_title":"83 | 程序员练级攻略：分布式架构工程设计","id":11232}},"comments":[{"had_liked":false,"id":15622,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1531354427,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"199099850043","product_id":100002201,"comment_content":"这些论文和书读了有一半了，但是还是进不了分布式的门。因为全部是自己兴趣学的，没有相关开发经验。感觉找个分布式开发的工作挺难的。望指点迷津。","like_count":46,"discussions":[{"author":{"id":1093658,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b0/1a/427c854c.jpg","nickname":"lemon","note":"","ucode":"360693FCFC8E8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408257,"discussion_content":"参与到TiDB的开源项目中","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635212764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194853,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","nickname":"prepared","note":"","ucode":"00E54A5C7CDCBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345023,"discussion_content":"只看不实践，很难变成自己的东西","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611641249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15999,"user_name":"💎A","can_delete":false,"product_type":"c1","uid":1075412,"ip_address":"","ucode":"914FFA92CA2713","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/d4/c9b5d3f9.jpg","comment_is_top":false,"comment_ctime":1531724525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61661266669","product_id":100002201,"comment_content":"😂😂太高级了。前面几篇就够我实践几年了，这些完全看不来了，要不我们再谈谈人生理想。。","like_count":14},{"had_liked":false,"id":15808,"user_name":"周扬","can_delete":false,"product_type":"c1","uid":1012834,"ip_address":"","ucode":"496447389BFC8A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/62/bd50c186.jpg","comment_is_top":false,"comment_ctime":1531533728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31596304800","product_id":100002201,"comment_content":"建议皓叔讲讲自己公司的开发，自动化测试，自动化部署，自动化运维的流程。","like_count":7},{"had_liked":false,"id":58420,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1547080421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23021916901","product_id":100002201,"comment_content":"太棒了，够消化许多年了，幸好还年轻有时间和兴趣，英文要么是门槛，要么阶梯。","like_count":5},{"had_liked":false,"id":143424,"user_name":"永夜涂鸦","can_delete":false,"product_type":"c1","uid":1088567,"ip_address":"","ucode":"97EE560CC89EBA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4zgpuyXHP3cLgj5s6vrm5kMpoBKXWC9r700ibPK40XmSaOHC8a16211ZPe12tFWjJDyDQ6kqx77Ig/132","comment_is_top":false,"comment_ctime":1571707470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14456609358","product_id":100002201,"comment_content":"这些论文和书相当有内容。amazon dynamo那里有个笔误，dynamo和dynamodb是amazon的两个产品。dynamodb并没有用gossip协议，用的是master- replication方式","like_count":4},{"had_liked":false,"id":15728,"user_name":"中山浪子","can_delete":false,"product_type":"c1","uid":1055296,"ip_address":"","ucode":"25D0F8462473D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/40/f10493ef.jpg","comment_is_top":false,"comment_ctime":1531439681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14416341569","product_id":100002201,"comment_content":"靠自己兴趣学的分布式，假设读完上述的文章和书籍，在有了理论指导前提下，如何获取实际相关开发经验（最终目的是找个分布式开发的工作，前提是无分布式相关开发经验的小白）求耗叔指点…","like_count":3},{"had_liked":false,"id":257724,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1604102814,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10194037406","product_id":100002201,"comment_content":"这些资料如果用心去找，一般人也能找到七七八八，但是可能没法像专栏里面整理的这么清楚、系统。如果你能“醍醐灌顶”皓叔脑子里的知识，哪怕知识“拷贝”一部分，那么也足够用来吃饭了。但是，谁都知道那是不可能的，而且“金手指”、“铁饭碗”，还有“鸡汤”，都没什么用，还是按着攻略慢慢打怪升级吧。<br><br>其中一些论文我之前也看过，但是真的看不太懂。一方面，上一篇中提到的入门资料我反而看的不多，可能缺少一些背景知识；另外，如果打算读论文的话，最好还是能找到一些相关的讨论，如果没有导师的话，那么在网络上可能也有交流的地方。<br><br>英语是门槛，能迈过去的话，就领先了至少一半的人。","like_count":2},{"had_liked":false,"id":15772,"user_name":"ydp","can_delete":false,"product_type":"c1","uid":1113243,"ip_address":"","ucode":"12E757403D8B02","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/9b/bac31594.jpg","comment_is_top":false,"comment_ctime":1531465819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121400411","product_id":100002201,"comment_content":"耗子老师，希望后面在讲讲，大数据和网络安全等内容。谢谢","like_count":2},{"had_liked":false,"id":15697,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1531396389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10121330981","product_id":100002201,"comment_content":"果然对于编程最难的还是英文😂","like_count":2},{"had_liked":false,"id":211571,"user_name":"Geek_dwq","can_delete":false,"product_type":"c1","uid":1817279,"ip_address":"","ucode":"7DC6BFCF746787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wI2LwgvwseNqXwkF67zicD9UXBSle9DPhmL6uyKG9Nib6NLfU3OuKYuSQ4DHCWxIQecnqell2vKVvNX8boox0B8w/132","comment_is_top":false,"comment_ctime":1587984882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882952178","product_id":100002201,"comment_content":"资料收藏了","like_count":1},{"had_liked":false,"id":209645,"user_name":"Geek_130e9e","can_delete":false,"product_type":"c1","uid":1587628,"ip_address":"","ucode":"518AAF2F228C17","user_header":"","comment_is_top":false,"comment_ctime":1587587729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882555025","product_id":100002201,"comment_content":"今天分享的内容是分布式架构方面的经典图书和论文，并给出了导读文字，几乎涵盖了分布式系统架构方面的所有关键的理论知识。这些内容非常重要，是学好分布式架构的基石。","like_count":1},{"had_liked":false,"id":203149,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1586144898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881112194","product_id":100002201,"comment_content":"谢谢，这个知识地图非常有价值，英语是一道坎，要努力攻克","like_count":1},{"had_liked":false,"id":189148,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1723812,"ip_address":"","ucode":"36BBA79BBFEA8B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/4d/a4/d28eb55d.jpg","comment_is_top":false,"comment_ctime":1584460350,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5879427646","product_id":100002201,"comment_content":"想问下皓叔，是怎么找到这些资料的？完全吸收皓叔脑子里的各种知识我觉得是没什么意义的，毕竟时代在变，需求在变，想获得皓叔的“金手指”、“铁饭碗”，让自己持续学习，持续获取最新的信息","like_count":1,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319687,"discussion_content":"这些资料如果用心去找，一般人也能找到七七八八，但是可能没法像专栏里面整理的这么清楚、系统。如果你能“醍醐灌顶”皓叔脑子里的知识，哪怕知识“拷贝”一部分，那么也足够用来吃饭了。但是，谁都知道那是不可能的，而且“金手指”、“铁饭碗”，还有“鸡汤”，都没什么用，还是按着攻略慢慢打怪升级吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604102554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130479,"user_name":"sooerr","can_delete":false,"product_type":"c1","uid":1043454,"ip_address":"","ucode":"2DB3E2D35196B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/fe/fefeb799.jpg","comment_is_top":false,"comment_ctime":1567472413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862439709","product_id":100002201,"comment_content":"埋藏宝藏的地方……","like_count":1},{"had_liked":false,"id":15839,"user_name":"小蛋壳","can_delete":false,"product_type":"c1","uid":1101602,"ip_address":"","ucode":"8344163BF7722E","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/22/5a483755.jpg","comment_is_top":false,"comment_ctime":1531548350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826515646","product_id":100002201,"comment_content":"在实际研发中，梳理需求，模型设计等是日常工作的常态，怎么提高这一块？","like_count":1},{"had_liked":false,"id":15788,"user_name":"破晓","can_delete":false,"product_type":"c1","uid":1153316,"ip_address":"","ucode":"13C33DE0CFD43B","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/24/e1cb609e.jpg","comment_is_top":false,"comment_ctime":1531491922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826459218","product_id":100002201,"comment_content":"都是英文的，读起来有点吃力和缓慢。","like_count":1},{"had_liked":false,"id":15755,"user_name":"刘宝峰_DEV","can_delete":false,"product_type":"c1","uid":1145823,"ip_address":"","ucode":"3ABE05FE615BCB","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/df/4ded0f2c.jpg","comment_is_top":false,"comment_ctime":1531451911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826419207","product_id":100002201,"comment_content":"希望陈老师能出一篇关于单元测试，集成测试，和代码重构方面的文章😄","like_count":1},{"had_liked":false,"id":15754,"user_name":"创意","can_delete":false,"product_type":"c1","uid":1127425,"ip_address":"","ucode":"42DE460C4E002E","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/01/19eac279.jpg","comment_is_top":false,"comment_ctime":1531450400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5826417696","product_id":100002201,"comment_content":"分布式我是在写程序中碰到名种问题，看了很多资料和书，很依然像画画一样，太多太多的未知","like_count":1},{"had_liked":false,"id":333264,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1447283,"ip_address":"","ucode":"708042A35424DC","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","comment_is_top":false,"comment_ctime":1644237888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644237888","product_id":100002201,"comment_content":"回头来看，怎么感觉耗子哥这么厉害，看得东西实在太多了，真的很牛啊，这么多论文，你深入思考，真的不是一天两天的事情啊，即使在现在工作中，也很少有人能够花时间去阅读这些经典论文","like_count":0},{"had_liked":false,"id":326795,"user_name":"Lynn","can_delete":false,"product_type":"c1","uid":2547238,"ip_address":"","ucode":"1890F48F83D1F3","user_header":"https://static001.geekbang.org/account/avatar/00/26/de/26/f51798b4.jpg","comment_is_top":false,"comment_ctime":1639703430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639703430","product_id":100002201,"comment_content":"感觉压力好大，越看被推的书和论文就越多，还都是超级硬核的，感觉不全心投入几年都学不完","like_count":0},{"had_liked":false,"id":324135,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1638321283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638321283","product_id":100002201,"comment_content":"Gossip prometheus体系alertmanager采用这种协议，启发很大","like_count":0},{"had_liked":false,"id":310908,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1630979263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630979263","product_id":100002201,"comment_content":"分布式事务把Google也难住了！","like_count":0},{"had_liked":false,"id":15735,"user_name":"sevenfan","can_delete":false,"product_type":"c1","uid":1005261,"ip_address":"","ucode":"DD5757CEF9FD2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/cd/74c40655.jpg","comment_is_top":false,"comment_ctime":1531442420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531442420","product_id":100002201,"comment_content":"非常全面，赞","like_count":0},{"had_liked":false,"id":15721,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1531412891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531412891","product_id":100002201,"comment_content":"建议后续讲点机器学习、人工智能、深度学习相关知识，非常感谢。","like_count":0}]}