{"id":808306,"title":"06｜动手实战：回答用户问题","content":"<p>你好，我是叶伟民。</p><p>上一节课，我们已经可以根据用户的提问从数据库里面检索出数据了。那么这节课，我们继续动手实战，根据这些数据去回答用户的提问。</p><p>虽然我们的例子是用RAG改造MIS系统，但今天的内容很多RAG的场景里都是适用的。好，我们直接开始吧。</p><h2>从数据库查不到相关数据时的操作</h2><p>我们先回到<strong>实战案例1\\改造前\\home\\views.py</strong> 文件的 <strong>index</strong> 函数。第5行到第8行的代码，我们上一节课讲过了。这节课主要讲第10行到第13行的代码。</p><pre><code class=\"language-python\">def index(request):\n&nbsp; &nbsp; if request.method == 'POST':\n&nbsp; &nbsp; &nbsp; &nbsp; 用户输入 = request.POST['question']\n\n&nbsp; &nbsp; &nbsp; &nbsp; 查询参数 = 获取结构化数据查询参数(用户输入)\n&nbsp; &nbsp; &nbsp; &nbsp; 查询结果 = None\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询参数 is not None:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询结果 = 查询(查询参数)\n\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询结果 is None:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 从数据库查不到相关数据时的操作()\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 根据查询结果回答用户输入(查询结果,用户输入)\n\n&nbsp; &nbsp; conversation_list = 对话记录.objects.filter(已结束=False).order_by('created_time')\n&nbsp; &nbsp; return render(request, \"home/index.html\",{\"object_list\":conversation_list})\n</code></pre><!-- [[[read_end]]] --><p>先看第10行代码，它的作用是判断有没有从数据库找到相关数据。如果没有找到的话，我们将通过第11行代码，调用<strong>从数据库查不到相关数据时的操作函数</strong>。</p><p>这个函数实现在 <strong>rag.py</strong> 文件。我们打开<strong>实战案例1\\改造前\\home\\rag.py</strong> 文件，添加以下代码。</p><pre><code class=\"language-python\">def 从数据库查不到相关数据时的操作():\n&nbsp; record = 对话记录()\n&nbsp; record.role = \"assistant\"\n&nbsp; record.处理后content = \"抱歉，数据库里面没有你需要的信息。\"\n&nbsp; record.不带入大模型对话中 = False\n&nbsp; record.save()\n</code></pre><p>这段代码很简单，就是直接创建一条AI角色的对话记录。不同的是，它实际上并没有调用大模型，而是我们直接指定了这条对话记录的内容，也就是第4行代码。</p><h2>根据检索结果回答用户输入</h2><p>如果我们从数据库检索到结果，那么将调用<strong>根据检索结果回答用户输入</strong>函数。</p><p>这个函数实现在 <strong>rag.py</strong> 文件。我们打开<strong>实战案例1\\改造前\\home\\rag.py</strong> 文件，添加以下代码。</p><pre><code class=\"language-python\">def 根据查询结果回答用户输入(查询结果,用户输入):\n&nbsp; 当前messages = 构造查询结果用的messages(查询结果,用户输入)\n&nbsp; 之前的messages = 对话记录.objects.filter(已结束=False).order_by('created_time')\n&nbsp; 全部messages = 构造全部messages(之前的messages,当前messages)\n&nbsp; 对话模式(全部messages)\n</code></pre><p>我们逐行来看一下这段代码做了哪些工作。第1行接受查询结果和用户输入。然后第2行根据查询结果和用户输入构造messages。第3行从对话记录里面获取前面的对话记录构造messages。</p><p>接着第4行根据之前的messages和当前的messsages，构造全部messages。最后，在第5行把全部messages传给对话模式函数。</p><p>我们首先把第2行用到的函数加到 <strong>rag.py</strong> 文件的末尾。</p><pre><code class=\"language-python\">def 构造查询结果用的messages(查询结果,用户输入):\n&nbsp; return [{\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 您已经知道以下信息：\n\n&nbsp; {将查询结果转为字符串(查询结果)}\n\n&nbsp; 请根据以上您所知道的信息回答用户的问题，注意，请简单和直接的回答，不要返回其他内容，不要提“根据您所提供的信息”之类的话。\n：{用户输入}\n&nbsp; \"\"\"}]\n</code></pre><p>我们看到第5行出现了一个新函数——<strong>将查询结果转为字符串</strong>。这个函数有什么用呢？解决了什么问题呢？我们继续往下看。</p><h3>将查询结果转为字符串</h3><p>从数据库里面查询出来的结果，要么是json格式要么是字典格式，我们需要将它转换为大模型更容易识别的人类语言。这就是刚才这个新函数的意义了。</p><p>这个函数会将json格式的查询结果转换为以下格式。</p><pre><code class=\"language-python\">客户：广州神机妙算有限公司\n入账日期：2024-07-06T00:00:00Z\n入账金额：9527 \n已到账款项：57980 \n剩余到账款项：2908\n</code></pre><p>这个函数的具体代码如下。我们把它加到 <strong>rag.py</strong> 文件末尾。</p><pre><code class=\"language-python\">from django.core import serializers\n\ndef 将查询结果转为字符串(查询结果):\n  json_str = serializers.serialize(\"json\", list(查询结果))\n  return_str = \"\"\n  data = json.loads(json_str)\n  for current in data:\n    for key, value in current['fields'].items():\n      return_str += f\"{key}：{value}\\n\"\n  return return_str\n</code></pre><p>其中第7行到第9行就是将json数据转换为人类语言的代码。其他代码在不同的MIS系统会不一样，并且与RAG无关，所以我们暂时可以忽略。</p><h3>构造全部messages</h3><p>下一步我们来构造全部messages函数，我们把它加到 <strong>rag.py</strong> 文件末尾。</p><pre><code class=\"language-python\">def 构造全部messages(之前的messages,当前messages):\n&nbsp; if 之前的messages is not None and len(之前的messages) &gt;= 2:\n&nbsp; &nbsp; 适配大模型的messages = []\n&nbsp; &nbsp; for current in list(之前的messages)[:-1]: # 使用-1是为了去掉当前messages\n&nbsp; &nbsp; &nbsp; 适配大模型的messages.append({\"role\":current.role, \"content\":current.content})\n&nbsp; &nbsp; return [*适配大模型的messages,*当前messages]\n&nbsp; else:\n&nbsp; &nbsp; return 当前messages\n</code></pre><p>这里有两个地方需要你留意。首先通过第2行判断是否有之前的messages，之所以要大于等于2，是因为从数据库里面读到的messages会包含当前message。</p><p>如果有之前的messages，以上函数将通过第5行提取其中的role和content属性，整合成适配大模型的messages。</p><h3>保存对话记录</h3><p>到目前为止，我们还没有把对话记录保存到数据库里面，我们这就来完成这项工作。</p><p>我们先在 <strong>rag.py</strong> 文件末尾加上<strong>保存对话记录</strong>函数。</p><pre><code class=\"language-python\">def 保存对话记录(role,content,处理后content,提交给大模型的playload,不带入大模型对话中):\n&nbsp; record = 对话记录()\n&nbsp; record.role = role\n&nbsp; if content is not None:\n&nbsp; &nbsp; record.content = content\n&nbsp; if 处理后content is not None:\n&nbsp; &nbsp; record.处理后content = 处理后content\n&nbsp; if 提交给大模型的playload is not None:\n&nbsp; &nbsp; record.提交给大模型的playload = 提交给大模型的playload\n&nbsp; record.save()\n</code></pre><p>然后在对话模式函数里面添加调用代码。第19行和第20行就是调用代码。</p><pre><code class=\"language-python\">def 对话模式(messages):\n&nbsp; url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie-lite-8k?access_token=\" + get_access_token()\n&nbsp; \n&nbsp; json_obj = {\n&nbsp; &nbsp; &nbsp; \"messages\": messages,\n&nbsp; }\n\n&nbsp; playload= json.dumps(json_obj)\n&nbsp; headers = {\n&nbsp; &nbsp; &nbsp; 'Content-Type': 'application/json'\n&nbsp; }\n&nbsp; \n&nbsp; response = requests.request(\"POST\", url, headers=headers, data=playload)\n&nbsp; json_result = json.loads(response.text)\n&nbsp; if \"error_code\" in json_result:\n&nbsp; &nbsp; return json_result[\"error_msg\"] + \"：\" + playload\n&nbsp; else:\n&nbsp; &nbsp; 处理后结果 = 对AI结果进一步处理(json_result[\"result\"])\n&nbsp; &nbsp; 保存对话记录(messages[-1][\"role\"],messages[-1][\"content\"])\n&nbsp; &nbsp; 保存对话记录(\"assistant\",处理后结果)\n&nbsp; return 处理后结果\n</code></pre><h3>运行起来看看效果</h3><p>好了，现在一切最基本的代码都具备了，我们先运行起来看看效果。</p><p>我们还是先按照第1节所讲的步骤把MIS系统运行起来。不过我们会遇到以下错误。</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/0d/4b8a4d95fca23a9e51b687eb15265a0d.jpg?wh=1936x303\" alt=\"\"></p><p>这时候我们需要以下命令安装requests包。</p><pre><code class=\"language-powershell\">pip install requests\n</code></pre><p>然后我们继续输入以下命令来更新数据库结构。也就是第4节课新加的对话记录表。</p><pre><code class=\"language-powershell\">python manage.py makemigrations\npython manage.py migrate\n</code></pre><p>如果一切顺利，我们应该会看到如下截图里面的提示。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/b5/fc65c9f5131dcf0a80c1fba5dc6834b5.jpg?wh=1903x374\" alt=\"\"></p><p>然后输入以下命令运行起来。</p><pre><code class=\"language-powershell\">python manage.py runserver\n</code></pre><p>然后打开浏览器，跳转到 <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a>。</p><p>输入以下问题。</p><pre><code class=\"language-javascript\">客户广州神机妙算有限公司的款项到账了多少？\n</code></pre><p>我们会看到类似后面的回答。</p><pre><code class=\"language-python\">你： 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。注意，模块部分请按以下选项返回对应序号： 1. 销售对账 2. 报价单 3. 销售订单 4. 送货单 5. 退货单 6. 其他 示例1： 用户：客户北京极客邦有限公司的款项到账了多少？ 系统： {'模块':1,'客户名称':'北京极客邦有限公司'} 示例2： 用户：你好 系统： {'模块':6,'其他数据',None} 示例3： 用户：最近一年你过得如何？ 系统： {'模块':6,'其他数据',None} 用户：客户广州神机妙算有限公司的款项到账了多少？ 系统：\nAI： {\"模块\": 1, \"客户名称\": \"广州神机妙算有限公司\"}\n</code></pre><p>显然，这并不是我们想要的结果。为什么呢？主要存在两个问题。</p><ol>\n<li>\n<p>第1行应该只显示用户的发问，而不应该把所有细节都展示出来。</p>\n</li>\n<li>\n<p>第2行AI的回答不应该展现给用户。</p>\n</li>\n</ol><p>那么如何解决这个问题呢？针对第1点，我们应该把用户提问保存在对话记录的一个字段，然后把具体细节保存在另一个字段。具体处理方式详见下一节。</p><p>针对第2点，我们需要用一个字段来表示这条记录是否需要出现在用户和大模型对话中。</p><h3>只带入人机对话</h3><p>我们把用户提问保存在<strong>对话记录</strong>表的 <strong>content</strong> 字段，把细节保存在<strong>对话记录</strong>表的<strong>处理后content</strong> 字段。</p><p>因此我们需要修改<strong>对话模式</strong>函数。</p><pre><code class=\"language-python\">def 对话模式(messages,用户输入):\n&nbsp; url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie-lite-8k?access_token=\" + get_access_token()\n&nbsp; \n&nbsp; json_obj = {\n&nbsp; &nbsp; &nbsp; \"messages\": messages,\n&nbsp; }\n\n&nbsp; playload= json.dumps(json_obj)\n&nbsp; headers = {\n&nbsp; &nbsp; &nbsp; 'Content-Type': 'application/json'\n&nbsp; }\n&nbsp; \n&nbsp; response = requests.request(\"POST\", url, headers=headers, data=playload)\n&nbsp; json_result = json.loads(response.text)\n&nbsp; if \"error_code\" in json_result:\n&nbsp; &nbsp; return json_result[\"error_msg\"] + \"：\" + playload\n&nbsp; else:\n&nbsp; &nbsp; 处理后结果 = 对AI结果进一步处理(json_result[\"result\"])\n&nbsp; &nbsp; 保存对话记录(messages[-1][\"role\"],用户输入,messages[-1][\"content\"],None,False)\n&nbsp; &nbsp; 保存对话记录(\"assistant\",json_result[\"result\"],处理后结果,None,False)\n&nbsp; return 处理后结果\n</code></pre><p>我们在第1行多添加了一个传入参数。然后在第19行将这个传入参数保存在<strong>对话记录</strong>表的 <strong>content</strong> 字段。</p><p>然后我们还要修改调用<strong>对话模式</strong>函数的代码。</p><pre><code class=\"language-python\">def 根据查询结果回答用户输入(查询结果,用户输入):\n&nbsp; 当前messages = 构造查询结果用的messages(查询结果,用户输入)\n&nbsp; 之前的messages = 对话记录.objects.filter(已结束=False,不带入大模型对话中 = False).order_by('created_time')\n&nbsp; 全部messages = 构造全部messages(之前的messages,当前messages)\n&nbsp; 对话模式(全部messages,用户输入)\n</code></pre><p>还需要修改以下函数里面的代码。</p><pre><code class=\"language-python\">def 获取结构化数据查询参数(用户输入):\n&nbsp; 之前的用户输入 = 获取之前的用户输入()\n&nbsp; 重试总次数 = 2\n&nbsp; 当前重试次数 = 0\n&nbsp; while 当前重试次数 &lt;= 重试总次数:\n&nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; 结构化数据 = 对话模式(构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入),用户输入)\n&nbsp; &nbsp; &nbsp; 查询参数 = json.loads(结构化数据)\n&nbsp; &nbsp; &nbsp; return 查询参数\n&nbsp; &nbsp; except:\n&nbsp; &nbsp; &nbsp; 当前重试次数 += 1\n&nbsp; \n&nbsp; return None\n</code></pre><p>我们再运行一遍，然后提问，就会得到以下结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/d5/fce08336c3a2191d3c5f585a0b6d46d5.jpg?wh=2010x754\" alt=\"\"></p><p>我们发现，第1个问题解决了。接下来我们去解决第2个问题。</p><h3>页面隐藏部分对话</h3><p>我们继续修改<strong>对话模式</strong>函数。</p><pre><code class=\"language-python\">def 对话模式(messages,用户输入,原文不带入大模型对话中,结果不带入大模型对话中):\n&nbsp; url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie-lite-8k?access_token=\" + get_access_token()\n&nbsp; \n&nbsp; json_obj = {\n&nbsp; &nbsp; &nbsp; \"messages\": messages,\n&nbsp; }\n\n&nbsp; playload = json.dumps(json_obj)\n&nbsp; headers = {\n&nbsp; &nbsp; &nbsp; 'Content-Type': 'application/json'\n&nbsp; }\n&nbsp; \n&nbsp; response = requests.request(\"POST\", url, headers=headers, data=playload)\n&nbsp; json_result = json.loads(response.text)\n&nbsp; if \"error_code\" in json_result:\n&nbsp; &nbsp; return json_result[\"error_msg\"] + \"：\" + playload\n&nbsp; else:\n&nbsp; &nbsp; 处理后结果 = 对AI结果进一步处理(json_result[\"result\"])\n&nbsp; 保存对话记录(messages[-1][\"role\"],用户输入,messages[-1][\"content\"],playload,原文不带入大模型对话中)\n&nbsp; 保存对话记录(\"assistant\",json_result[\"result\"],处理后结果,None,结果不带入大模型对话中)\n&nbsp; return 处理后结果\n</code></pre><p>这次我们多传了两个参数。一个是<strong>原文不带入大模型对话中</strong>，用于用户提问。另一个是<strong>结果不带入大模型对话中</strong>，用于AI的回答。</p><p>然后我们更新一下调用<strong>对话模式</strong>的函数。</p><pre><code class=\"language-python\">def 获取结构化数据查询参数(用户输入):\n&nbsp; 之前的用户输入 = 获取之前的用户输入()\n&nbsp; 重试总次数 = 2\n&nbsp; 当前重试次数 = 0\n&nbsp; while 当前重试次数 &lt;= 重试总次数:\n&nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; 结构化数据 = 对话模式(构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入),用户输入,原文不带入大模型对话中=False,结果不带入大模型对话中=True)\n&nbsp; &nbsp; &nbsp; 查询参数 = json.loads(结构化数据)\n&nbsp; &nbsp; &nbsp; return 查询参数\n&nbsp; &nbsp; except:\n&nbsp; &nbsp; &nbsp; 当前重试次数 += 1\n&nbsp; \n&nbsp; return None\n</code></pre><p>我们在获取结构化数据查询参数的时候，需要将原文不带入大模型对话中设置为False，将结果不带入大模型对话中设置为True，也就是第7行代码。</p><p>然后是根据查询结果回答用户输入函数。同样地，我们将原文不带入大模型对话中设置为True，将结果不带入大模型对话中设置为False，也就是第5行代码。</p><pre><code class=\"language-python\">def 根据查询结果回答用户输入(查询结果,用户输入):\n&nbsp; 当前messages = 构造查询结果用的messages(查询结果,用户输入)\n&nbsp; 之前的messages = 对话记录.objects.filter(已结束=False,不带入大模型对话中 = False).order_by('created_time')\n&nbsp; 全部messages = 构造全部messages(之前的messages,当前messages)\n&nbsp; 对话模式(全部messages,None,原文不带入大模型对话中=True,结果不带入大模型对话中=False)\n</code></pre><p>最后别忘了更新一下<strong>实战案例1\\改造前\\templates\\home\\index.html</strong>文件。变化就添加了第2行代码。</p><pre><code class=\"language-xml\">&nbsp; &nbsp; {% for current_obj in object_list %}\n&nbsp; &nbsp; &nbsp; {% if current_obj.不带入大模型对话中 is False%}\n&nbsp; &nbsp; &nbsp; &lt;div&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; {% if current_obj.role == \"user\" %}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 你：{{current_obj.content}}\n&nbsp; &nbsp; &nbsp; &nbsp; {% else %}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AI：{{current_obj.处理后content}}\n&nbsp; &nbsp; &nbsp; &nbsp; {% endif %}\n&nbsp; &nbsp; &nbsp; &lt;/div&gt;\n&nbsp; &nbsp; &nbsp; {% endif %}\n&nbsp; &nbsp; {% endfor %}\n</code></pre><p>现在我们重新运行一下，点击“开始新的对话”，然后重新发问。如果你看到类似后面这样的返回结果，就表明一切顺利，我们的改造终于完成了！</p><p><img src=\"https://static001.geekbang.org/resource/image/75/ce/7522f3f1491d2dc9a4fc77a24768e2ce.jpg?wh=1303x496\" alt=\"\"></p><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了两件事情。</p><p>第一件事情是从数据库查不到相关数据时如何处理。这时候我们需要明确告诉用户：抱歉，数据库里面没有你需要的信息。</p><p>第二件事情是根据查询结果回答用户输入。具体包括将查询结果转为字符串、构造全部messages、保存对话记录、只带入人机对话、页面隐藏部分对话。</p><p>其实今天我们得到的系统只是个demo，如果要支持更多的用例、支持更多的模块，我们需要像上一节课说的，添加更多选项序号、示例还有提示。不过用户使用我们系统的时候，我们并没有在旁边看着，那我们如何知道应该添加哪些内容？又如何知道怎么改进？这个问题我们下节课再讨论。</p><h2>思考题</h2><p>如果有多个用户使用这个系统，那么如何判断哪条对话记录属于哪个用户？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","comments":[{"had_liked":false,"id":395249,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"北京","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1729850067,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"AI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。\nAI：抱歉，数据库里面没有你需要的信息。  一直没有数据","like_count":2,"discussions":[{"author":{"id":4036974,"avatar":"","nickname":"Geek_c5c3d5","note":"","ucode":"C65B8C820DE58D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654145,"discussion_content":"我也是这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732001761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}