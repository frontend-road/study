{"id":272121,"title":"09｜七大常用技巧：让编辑效率再上一个台阶","content":"<p>你好，我是吴咏炜。</p><p>学到这里，你应该已经初步掌握 Vim 了。我们这一讲来重点看一下 Vim 里的七大常用编辑技巧。有些技巧你直接就可以用，有些则需要安装第三方插件。但无论是哪种情况，它们都可以大大提高你的编辑效率。</p><p>从这一讲开始，我们将不再讨论插件的安装过程，而只是给出像 skywind3000/asyncrun.vim 这样的名称。相信你学到现在应该已经不需要我再详细讲述这样的基础知识了。如果你对安装插件还不太熟练的话，请复习第 4 讲。接下来，我们正式开始今天的内容。</p><h2>自动完成</h2><p>自动完成是一个编辑器中很主流的功能了。通常，我们希望编辑器能在我们输入一部分内容时就能猜到我们希望输入的是什么，并能够予以提示。自动完成可以节约我们输入的工作量，是一件编辑中非常必要的利器。</p><p>Vim 内置有自动完成功能。最基本的自动完成功能有两种：</p><ul>\n<li>基于当前文件文本的自动完成</li>\n<li>基于文件系统的自动完成</li>\n</ul><p>我们先说<strong>基于当前文件文本</strong>的自动完成。在当前文件里，或当前文件用 <code>#include</code>（C 类语言的情况）包含的文件里包含某个关键字时，你可以输入头若干个字母并按下 <code>&lt;C-P&gt;</code>（表示 previous）或 <code>&lt;C-N&gt;</code>（表示 next）来进行自动完成。这两者的区别是，<code>&lt;C-P&gt;</code> 是从当前位置往前找，而 <code>&lt;C-N&gt;</code> 是从当前位置往后找。当只有一个匹配项时，Vim 直接给出完成结果，再次按下 <code>&lt;C-P&gt;</code> 或 <code>&lt;C-N&gt;</code> 则取消自动完成。当存在多个匹配项时，Vim 会根据搜索顺序给出匹配项列表并使用第一个匹配项；再次按下 <code>&lt;C-P&gt;</code> 或 <code>&lt;C-N&gt;</code> 则可以在列表里进行选择。</p><!-- [[[read_end]]] --><p>Vim 的缺省选项能帮你在 Unix 系统上找到系统的头文件，利用里面出现的关键字来完成。想要在其他语言或平台里找到当前文件“包含”的文件里的关键字，请参考下列选项帮助：</p><ul>\n<li><a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'include'\"><code>:help include</code></a></li>\n<li><a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'includeexpr'\"><code>:help includeexpr</code></a></li>\n<li><a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'isfname'\"><code>:help isfname</code></a></li>\n<li><a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'path'\"><code>:help path</code></a></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/72/68/7231db664f67cb5403c287d5e4b70c68.gif?wh=1324*902\" alt=\"Fig9.1\" title=\"自动完成的示例\"></p><p>我们再看一下<strong>基于文件系统</strong>的自动完成。当你在插入模式下输入一个绝对路径或者当前目录下的文件/目录名称的一部分时，你可以使用 <code>&lt;C-X&gt;&lt;C-F&gt;</code> 来启动文件自动完成。在此之后，操作就和前面一样了，你可以使用 <code>&lt;C-P&gt;</code> 和 <code>&lt;C-N&gt;</code> 在匹配项中跳转和取消。</p><p>Vim 里还有其他一些以 <code>&lt;C-X&gt;</code> 开始的自动完成功能。比如，你可以用 <code>&lt;C-X&gt;&lt;C-K&gt;</code> 从配置的词典中选择合适的单词，可以用 <code>&lt;C-X&gt;&lt;C-O&gt;</code> 进行“代码自动完成”。但这些功能要么不常用，要么在缺省配置下工作得并不好。所以，今天我就暂时不讨论其他自动完成功能了。等到了提高篇和拓展篇，我们再来看英文文本编辑和代码自动完成这两个话题。</p><p>最后，要注意任何自动完成功能都可能会重复你的错误。如果你一开始拼错了，后面又拼对了，很可能会发现前面的错误。而一旦使用自动完成，你要是一开始就拼错了，后面可能就会不断重复之前的错误。这当然不是编辑器的错，但作为我曾经见到发生过的问题，我觉得值得提醒你一下。</p><h2>文本目标跳转</h2><p>如果光标下面是一个计算机可以找到的文件，你一定希望我们有办法可以一下子打开这个文件吧。这正是我们这一节要讨论的技巧。</p><p>当光标下的文件名可以在 <code>path</code> 选项标识的目录下找到时，我们可以很方便地跳转过去。你需要的是正常模式命令 <code>gf</code> 和 <code>&lt;C-W&gt;f</code>。估计你很容易猜到，前者是直接跳转到文件（理解为“goto file”），后者则会打开一个新窗口（window），在新窗口里打开该文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/33/9cd42ac85567641079dd781cd51fa733.gif?wh=1324*902\" alt=\"Fig9.2\" title=\"文件跳转的演示\"></p><p>如果光标下面是一个链接，或者非文本文件，那我们该怎么办呢？显然，即使 Vim 可以打开这个文件，看到的内容也多半不是你想要的（你想看图片，还是把图片当成文本的乱码？）。这时候，最简单的解决方式是使用 netrw 插件提供的 <code>gx</code> 命令。它的缺省行为是使用操作系统提供的机制来打开光标下的文件或链接。</p><p>比较让人伤心的是，最新版本的 netrw 插件在打开链接时的行为不正常。<a href=\"https://github.com/vim/vim/issues/4738\">这个问题已经报告有一年了，还没有解决。</a>作为临时方案，我在 Vim 配置的目录放了一个可以工作的老版本，你可以把这个文件复制到你的 Vim 配置目录下的 plugin 子目录下来绕过这个问题。此外，<code>gx</code> 只适合本机，不适合在远程连接上使用。</p><h2>Vim 寄存器/剪贴板</h2><p>我们已经学到，Vim 的删除和复制命令（如 <code>d</code> 和 <code>y</code>）会把内容存起来，以供粘贴命令（如 <code>p</code> 和 <code>P</code>）使用。我们还没有讨论这种内容存储有什么特别的地方。</p><p>首先，估计你已经知道的是，Vim 把要粘贴的内容存在 Vim 内部的“寄存器”（register）里，而非系统的剪贴板。你不一定知道的是，Vim 里的寄存器有好多个。事实上，Vim 有超过 40 个不同的寄存器！我们挨个来看一下：</p><ul>\n<li>首先是无名寄存器。当操作没有用 <code>\"</code> 加寄存器名称指定寄存器时，我们默认使用无名寄存器。不过，我们仍可以使用 <code>\"\"</code> 来指定使用无名寄存器，也就是说，<code>\"\"p</code> 和 <code>p</code> 效果相同。</li>\n<li>其次是数字寄存器 <code>0</code> 到 <code>9</code>。<code>0</code> 号寄存器中放的永远是最近一次复制（yank）的内容。这和无名寄存器很不一样，它里面放的是最近操作的结果，也包括了 <code>d</code>、<code>x</code>、<code>c</code> 等命令，特别是包括了粘贴命令所替换的内容。<code>1</code> 到 <code>9</code> 号寄存器中放的则是上一次、倒数第二次、直到倒数第九次被删除或修改命令删除的文本。在做少量的用一个名字替换另一个名字、而又懒得使用替换命令时，<code>\"0p</code> 是一个接近图形界面里的粘贴命令的常用选择。</li>\n<li>然后有小删除寄存器 <code>-</code>。上面我说得不全，删除内容进入 <code>1</code> 到 <code>9</code> 号寄存器的前提条件是被删除的内容至少有一行，或者使用了移动命令 <code>%</code>、<code>(</code>、<code>)</code>、<code>`</code>、<code>/</code>、<code>?</code>、<code>n</code>、<code>N</code>、<code>{</code> 和 <code>}</code> 进行删除。否则，删除的内容只会进入 <code>-</code> 而不是 <code>1</code> 到 <code>9</code> 号寄存器。</li>\n<li>常用的有名寄存器 <code>a</code> 到 <code>z</code>。这些寄存器仅在用户手工指定时才会使用，内容在下一次打开 Vim 时仍然存在。比如，我们可以用 <code>\"ayy</code> 代替 <code>yy</code> 把当前行复制到 <code>a</code> 寄存器中，以后就一直可以用 <code>\"ap</code> 来进行粘贴了，直到 <code>a</code> 寄存器的内容被替换为止。</li>\n<li>不常用的特殊寄存器 <code>.</code> 、<code>:</code>、<code>#</code> 和 <code>%</code>。这些相对来说不那么常用，请自行查看帮助文件 <a href=\"https://yianwillis.github.io/vimcdoc/doc/change.html#quote.\"><code>:help \".</code></a> 等。</li>\n<li>黑洞寄存器 <code>_</code>。专门用来删除，目的就是不要影响无名寄存器的内容。</li>\n<li>搜索寄存器 <code>/</code>。存放是上一次搜索使用的模式。</li>\n<li>表达式寄存器 <code>=</code>。可以把 Vim 表达式估值的结果作为寄存器的内容。这个我们以后讲 Vim 脚本编程的时候再探讨。</li>\n<li>最后是图形界面剪贴板寄存器 <code>+</code>、<code>*</code> 和 <code>~</code>。一般而言，<code>+</code> 寄存器代表操作系统的剪贴板，和图形界面应用程序交互用这个就好；你用图形界面 Vim 菜单里的拷贝和粘贴访问的也是系统剪贴板。<code>*</code> 和 <code>~</code> 在 X11 和 GTK 环境下有一些特殊用途，我们目前就不展开了。想深入钻研的话，可以查看帮助文档 <a href=\"https://yianwillis.github.io/vimcdoc/doc/gui_x11.html#quoteplus\"><code>:help \"+</code></a>、<a href=\"https://yianwillis.github.io/vimcdoc/doc/gui.html#quotestar\"><code>:help \"*</code></a> 和 <a href=\"https://yianwillis.github.io/vimcdoc/doc/change.html#quote%7E\"><code>:help \"~</code></a>。</li>\n</ul><p>寄存器在正常模式下可以用 <code>d</code>、<code>y</code>、<code>p</code> 等命令来访问，你现在应当已经很清楚了。它们在插入模式和命令行模式下也可以用 <code>C-R</code> 加寄存器名来访问，这经常也会省去你很多打字的麻烦。</p><p>这些寄存器当然不是每个都常用。具体你是否会用到它们，取决你的工作方式。下面我说几个我自己编辑时的常用场景。</p><h3>常用的寄存器使用场景</h3><p>如果要<strong>交换两行内容</strong>，可以直接利用删除命令会把删除的内容放到无名寄存器这个特性。我们在第一行上面按下 <code>dd</code>，然后直接按 <code>p</code> 粘贴即可。</p><p>如果要<strong>交换两处文本内容</strong>，可以类似地使用删除和粘贴替换都会把内容放到无名寄存器这个特性。我们选中第一处文本，按下 <code>d</code> 进行删除；然后选中第二处文本，按下 <code>p</code> 进行粘贴；最后回到第一处文本的原来位置，使用 <code>P</code> 把文本粘贴回去即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/fe/b8/fe8e4ee739357cecdcd2a3f1f354e1b8.gif?wh=1324*902\" alt=\"Fig9.3\" title=\"两处文本交换的演示\"></p><p>如果要<strong>少量修改某一变量名称</strong>（多的话使用 <code>:s</code> 替换命令更合适），可以把光标移到变量名称上，用 <code>*</code> 进行开启自动搜索，然后编辑变量名称到合适；随后复制新的变量名称，反复使用 <code>n</code> 命令搜索，并用 <code>ve\"0p</code> 进行替换即可。</p><p>当然，反复打 <code>ve\"0p</code> 真的会感觉这个命令有点长。鉴于这个组合键使用的频度还挺高，我觉得映射一个更短的按键比较好，我的选择是 <code>\\v</code>，同时，我做了点更通用的处理：</p><pre><code class=\"language-vim\">\" 替换光标下单词的键映射\nnnoremap &lt;Leader&gt;v viw\"0p\nvnoremap &lt;Leader&gt;v    \"0p\n</code></pre><p>关于 <code>&lt;Leader&gt;</code> 的含义，可查看帮助文档 <a href=\"https://yianwillis.github.io/vimcdoc/doc/map.html#mapleader\"><code>:help &lt;Leader&gt;</code></a>，里面说得很清楚，我就不重复了。如果你忘了 <code>viw</code> 的意义，请复习一下第 3 讲里的文本对象。</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/cc/fd28ec0d43a977c62dc2b4dcacd40fcc.gif?wh=1324*902\" alt=\"Fig9.4\" title=\"使用复制、自动选择、粘贴修改变量名\"></p><h3>宏的录制和播放</h3><p>Vim 里可以用 <code>q</code> 把动作记录到寄存器里，然后使用 <code>@</code> 来播放这些动作。上面这个变量更名，如果用宏来做也可以：</p><ul>\n<li>用 <code>*</code> 开启搜索</li>\n<li>键入 <code>qa</code> 开始录制宏到 <code>a</code> 寄存器；当然我们可以使用其他寄存器，只要被录制的命令不会修改这个寄存器即可，所以一般使用 <code>a</code> 到 <code>z</code> 这 26 个有名寄存器</li>\n<li>键入 <code>n</code> 进行搜索；先行搜索的目的是，如果搜索不到内容，命令出错，宏的剩余部分就不会被执行</li>\n<li>键入 <code>eabar&lt;Esc&gt;</code> 把 <code>foo</code> 修改为 <code>foobar</code></li>\n<li>键入 <code>q</code> 结束宏录制</li>\n<li>键入 <code>@a</code> 播放录制的宏</li>\n<li>重复上一步直到 Vim 报告找不到 <code>foo</code> 为止</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/58/1d/588f5bd4416945d442924ac24ba0261d.gif?wh=1324*902\" alt=\"Fig9.5\" title=\"使用宏修改变量名\"></p><p>关于宏的进一步细节可以查看帮助文件（<a href=\"https://yianwillis.github.io/vimcdoc/doc/repeat.html#q\"><code>:help q</code></a>），我就不展开了。</p><p>从上一节的 <code>\\v</code> 到宏再到 <code>:s</code> 命令，对我们当前的任务而言，自动化程度逐步上升，但交互性逐步下降，“僵硬”性也逐步上升。对于重复遍数较多、信心较高的修改，我们应当偏向使用更自动化的方式，对于重复遍数较少或信心较低的修改，我认为使用不那么自动化的方式更有助于实时检查修改的效果。</p><p>今天关于寄存器和复制粘贴我们就讲到这里。我们以后还会有讨论到寄存器的时候。</p><h2>文本对象增强</h2><p>Vim 对文本对象的支持我已经在第 3 讲里讨论过了。那些当然是很不错的功能，不过，能不能在那些功能的基础上再进一步，做出更有用的功能呢？对于写了多个 Vim 插件的 Tim Pope 来说，答案是肯定的。</p><p>具体来说，如果你安装了他的 tpope/vim-surround 插件，你可以实现下面这些功能：</p><ul>\n<li>在一个单词的外面加上引号，如把 <code>word</code> 变成 <code>\"word\"</code>，可以使用命令 <code>ysiw\"</code></li>\n<li>把一个单词的外面的双引号变成单引号（有强迫症的 Python 程序员很可能有这样的需求），如把 <code>\"word\"</code> 变成 <code>'word'</code>，可以使用命令 <code>cs\"'</code></li>\n<li>把外面的引号或括号变成 HTML 标签也没有问题，如把 <code>[my choice]</code> 变成 <code>&lt;em&gt;my choice&lt;/em&gt;</code>，可以使用命令 <code>cs[&lt;em&gt;</code></li>\n<li>可视模式也有类似的命令，如可以在选中 <code>my choice</code> 后，输入 <code>S&lt;em&gt;</code> 把文本变成 <code>&lt;em&gt;my choice&lt;/em&gt;</code></li>\n<li>当然，你也可以把加上的包围符号移除，命令是 <code>ds</code> 后面跟包围符号，如 <code>ds\"</code> 可以移除外围的双引号；要移除 HTML 标签则使用 <code>t</code> 来表达，即使用 <code>dst</code> 来移除文本外面的第一个 HTML 标签</li>\n</ul><p>注意 Vim 命令 <code>.</code> 只能用来重复 Vim 的内置命令，而不能用来重复上面这样的用户自定义命令。为了解决这个问题，我也会安装 tpope/vim-repeat 插件，使得重复命令对上面这样的情况依然能够生效。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/2a/270e5c5a2cc9ccccf295b7f59db99d2a.gif?wh=1324*902\" alt=\"Fig9.6\" title=\"Vim-surround 和 vim-repeat 的演示\"></p><h2>撤销树</h2><p>Vim 不仅支持多级撤销，而且有撤销树的概念。利用撤销树，你可以转回到编辑中的任何一个历史状态。不过，问题是，Vim 用来管理撤销树的命令不那么直观。在使用撤销树的图形化插件之前，我自己也没有把相关的命令真正用好。</p><p>著名的撤销树插件我知道两个，一个是 mbbill/undotree，一个是 sjl/gundo.vim。两者功能相似，界面风格和快捷键有所不同。鉴于 undotree 功能更加丰富，我就以它为例来介绍一下。</p><p>从下图中可以看到，undotree 可以展示完整修改历史。你可以用 <code>J</code> 和 <code>K</code> 在历史中跳转，左下角的预览窗口中就会显示修改的内容，右侧文件直接会回到相应的历史状态，并加亮最近的那次修改。一旦用上这个插件，就真的回不到没有这个插件的环境了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/18/3c99c626290b302139e086ce05eebb18.png?wh=1582*1140\" alt=\"Fig9.7\" title=\"Undotree 插件的效果\"></p><p>另外需要稍加注意的一点是，一旦这个文件在其他编辑器里修改了，Vim 发现内容对不上，就无法保留编辑的历史。有一个绕过方法是，当你需要使用其他编辑器修改前，确保你在 Vim 里打开了该文件并且所有修改已保存；这样，在修改完成之后，只要在 Vim 里用 <code>:e</code> 命令重新载入该文件，Vim 就可以把外部的修改也保存在撤销历史记录里，保留完整的编辑历史。此外要注意的是，<strong>最后得在 Vim 里使用 <code>:w</code> 存盘一次</strong>，才能把编辑历史真正保存下来——即使你在 Vim 里没有进行任何修改，也需要这样做一下才能保存修改的历史。</p><h2>对当前缓冲区的更名和移动</h2><p>你肯定遇见过文件需要更名或者移动吧。这当然很简单，你可以通过图形界面或命令行进行操作。但这样操作之后，有一个问题是 Vim 的撤销历史跟文件就再也对不上了，你也没法再继续撤销更名或移动前的编辑操作了。有一个 Vim 插件，也是 Tim Pope 写的 tpope/vim-eunuch，可以解决这个问题。</p><p>事实上，这个插件的功能远不止更名和移动。它实际上是把 Unix 的很多命令行工具搬到了 Vim 里（比较一下 Unix 和 eunuch 的发音你就知道这个插件的名字是什么意思了）。对我来说，最重要的就是它提供的 <code>:Rename</code> 和 <code>:Move</code> 命令，后面跟的参数就是新的名字或路径。这样操作之后，以后再打开这个更名或移动后的文件，仍然能够访问它的一切编辑历史。</p><h2>模糊文件查找</h2><p>使用 NERDTree 的话，你可以通过浏览目录来打开文件。这种方式，对于你知道文件在哪个目录下、但不知道文件名的时候特别有用。另外一种可能的情况是，你知道文件名或其中的关键部分，但你不知道或不关心文件在哪里。这种情况下，Fzf 的模糊匹配就非常有用了。我们先来看一下动画演示，有一个初步的印象：</p><p><img src=\"https://static001.geekbang.org/resource/image/da/36/da779a8796a771f3cbbce130c13a1036.gif?wh=1840*1198\" alt=\"Fig9.8\" title=\"Fzf 的动态文件筛选演示\"></p><p>从动画可以看到，插件使用的是模糊匹配的方式，可以动态展示搜索的结果，并能直接预览当前选中的文件内容（在窗口足够宽的情况下）。因而这种方式不仅快，而且非常直观。</p><p>跟其他插件不同的是，fzf.vim 插件依赖于 fzf 命令行工具。在 <a href=\"https://github.com/junegunn/fzf\">fzf</a> 的页面上列出了具体安装方式，支持各个平台。但由于这个软件比较新，老一点的 Linux 发布版（如 Ubuntu 18.04 和 CentOS 7）在包管理器里还没有 fzf。所以我的安装建议是：</p><ul>\n<li>对于 macOS，使用 Homebrew 命令 <code>brew install fzf</code> 安装。</li>\n<li>对于 Ubuntu 19.10 或更新版本，使用 <code>sudo apt-get install fzf</code> 安装。</li>\n<li>对于较老的 Ubuntu、CentOS 7 和其他页面中没有列出的 Linux 发布版，直接使用<a href=\"https://github.com/junegunn/fzf-bin/releases\">二进制发布版本</a>，一般使用后缀为“linux_amd64.tgz”的文件。</li>\n<li>对于 Windows，也使用<a href=\"https://github.com/junegunn/fzf-bin/releases\">二进制发布版本</a>，使用后缀为“windows386.zip”（32 位）或“windows_amd64.zip”（64 位）的文件。</li>\n</ul><p>在安装了 fzf 后（可以执行 <code>fzf</code> 来验证一下，它会枚举当前目录下的所有文件，并在你输入字符时缩小匹配；按 <code>&lt;CR&gt;</code> 选择文件，按 <code>&lt;Esc&gt;</code> 取消选择），就可以安装插件了。使用 minpac 的话，我们需要在 vimrc 中加入下面两行：</p><pre><code class=\"language-vim\">  call minpac#add('junegunn/fzf', {'do': {-&gt; fzf#install()}})\n  call minpac#add('junegunn/fzf.vim')\n</code></pre><p>在安装完成之后，你就可以像我前面展示的那样使用 <code>:Files</code> 命令了。更多高级用法可以查看 <a href=\"https://github.com/junegunn/fzf.vim\">fzf.vim</a> 的页面。</p><p>顺便说一句，如果你对安装一个可执行文件有点发怵的话，插件也可以自动帮你下载 <code>fzf</code> 命令。但这样做的缺点是，fzf 就只能在 Vim 里面使用了。如果你使用包管理器安装或手工安装，fzf 可以在 Vim 里使用，也可以在 Bash 等其他地方使用——fzf 的 Bash 集成是可以大大提升 shell 的使用体验的，不过这不属于我们 Vim 课程要讨论的话题，就请你自行参阅文档了。</p><p>这个插件可以跟其他工具进一步配合。如果你安装了 <a href=\"https://github.com/BurntSushi/ripgrep\">ripgrep</a> 和 <a href=\"https://github.com/sharkdp/bat\">bat</a> 的话，可以获得更好的效果。动图中右下角文件预览的语法加亮的效果就依赖于系统里有 bat。如果你装了 ripgrep 的话，可以考虑设置下面的环境变量：</p><pre><code class=\"language-bash\">export FZF_DEFAULT_COMMAND='rg --files --sortr modified'\n</code></pre><p>这样的话，fzf 可以利用 ripgrep 来自动过滤掉被 Git 忽略的文件、隐藏文件、二进制文件等程序员通常不关心的内容，并将结果以修改时间倒排，确保最新修改的文件在最下面，大大提高了迅速找到你需要的文件的概率。</p><h2>内容小结</h2><p>今天我们讲述了不少编辑中的技巧。鉴于这些内容比较散、单项内容又比较小，我在这儿只对它们适用的场合作一下快速总结：</p><ul>\n<li>Vim 里有自动完成功能，可以让你只输入文本或文件名/路径的一部分，让 Vim 来帮你完成剩余部分。</li>\n<li>反过来，对于文件中出现的文件名和超链接，Vim 也支持打开它们。</li>\n<li>Vim 里的寄存器相当于几十个不同用途的自动剪贴板，用好它们，能更加高效地完成常见的编辑动作。</li>\n<li>Vim 里的文本对象是个特色功能，vim-surround 和 vim-repeat 插件又对其进行了进一步增强。我觉得这对前端程序员和 Python 程序员会特别有用。</li>\n<li>跨会话撤销已经很强大了，而撤销树则让你能够充分发挥这个强大功能的潜力。</li>\n<li>Vim-eunuch 插件可以让你在对文件进行更名和移动时仍然保留其编辑/撤销历史。</li>\n<li>Fzf.vim 插件提供若干快速查找文件的工具，它的最基本命令 <code>:Files</code> 可以让你使用部分匹配的文件名快速地在当前目录或指定的目录下面的任一目录里找到你需要的文件。</li>\n</ul><p>本讲我们的配置文件修改也不少，包含了我们今天讲到的这些插件。对应的标签是 <code>l9-unix</code> 和 <code>l9-windows</code>。</p><h2>课后练习</h2><p>今天讲的主要是技巧，而非理论知识，所以最主要的课后练习，就是需要自己实践一下，把需要安装的插件也全部都装起来。如果有任何问题，可以留言和我讨论。</p><p>希望你根据你的实际使用场景，可以举一反三、融会贯通。比如，我讲到了交换两行，你能不能也能做到交换两列的内容呢？学以致用是掌握 Vim 这样的工具的唯一方法。</p><p>我是吴咏炜，我们下一讲再见。</p>","comments":[{"had_liked":false,"id":241128,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1597197926,"is_pvip":false,"replies":[{"id":"89119","content":"对你来讲，讲得越多你越开心。但编辑已经嫌我最近几讲内容太多了，还要我砍少点，免得把初学的同学吓跑了。🤪","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597214936,"ip_address":"","comment_id":241128,"utype":1}],"discussion_count":8,"race_medal":0,"score":"23072034406","product_id":100055801,"comment_content":"老师的这些常用技巧确实都很实用.<br><br># 文本目标跳转<br>与文件名自动补全一样,有时还是非常实用的.<br>既然提到了`gf`,可以把类似的命令`gF`也记一下.<br>`:h gF` 和 &quot;gf&quot; 相同，但如果文件名后面跟随着数值，那么光标将定位在该文件名的该行上。<br><br># Vim 寄存器 &#47; 剪贴板<br>今天对数字寄存器0-9和小删除寄存器`-`有了新的认识.之前完全没有留意过这几个.<br>作为补充,与`a-z`小写字母的寄存器对应的,`A-Z`大小的寄存器,表示在原来小写寄存器的内容后面追加.(虽然这个也不常用)<br><br># 常用的寄存器使用场景<br>不确定老师是不是为了特意把`&quot;0`寄存器用起来才这么弄.<br>我是看了半天才弄明白的.<br><br>在`使用复制、自动选择、粘贴修改变量名`的场景中,如果构建的步骤合适,是可以用`.`命令,更简单的来实现相同的效果.<br>就拿图中的状况来说,我的按键序列可能是这样<br>1. `*`<br>　　全字匹配光标下的内容`foo`<br>2. `cwfoobar&lt;Esc&gt;`<br>　　编辑光标下的单词<br>3. `n`<br>　　跳转到下一处匹配的地方<br>4. `.`<br>　　重复上次的修改操作<br>5. `n.`<br>　　可以不断的重复<br><br>`只要每次构建的命令合适`,就可以用`.`命令方便的实现重复.<br><br># 宏的录制和播放<br>作为补充,与寄存器类似,大写的`A-Z`宏,好像也是在原有宏的后面添加内容.<br><br># `junegunn&#47;fzf.vim`<br>有精力的同学,这个插件可以好好的深挖一下.<br>有很多实用的功能待你去发掘.<br><br># 题外话<br>针对MacOS下的同学,我推荐一款神器[paste](https:&#47;&#47;pasteapp.io&#47;)<br>它可以记录历史的剪切板内容. 还可以给他们取别名, 钉起来.<br><br>有了它,应对本文中`两处文本交换的演示`类似的场景,就有了另外一套搞法.<br>","like_count":5,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503651,"discussion_content":"对你来讲，讲得越多你越开心。但编辑已经嫌我最近几讲内容太多了，还要我砍少点，免得把初学的同学吓跑了。🤪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597214936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5d/30/a9d12bdb.jpg","nickname":"ChamPly","note":"","ucode":"B7FA8EB8DD8CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298194,"discussion_content":"alfred 也有历史记录剪切板内容，也可以起别名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597217164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1072432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5d/30/a9d12bdb.jpg","nickname":"ChamPly","note":"","ucode":"B7FA8EB8DD8CD5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298215,"discussion_content":"alfred我也在用.还特意购买的正版序列号.\n可能alfred的剪切板功能我不太会用,我只知道它可以找历史命令.\n起别名是不是要借助它的snippets功能?\n\npaste还是更专注于做这一件事.\n它可以将不同的剪切板归类,比如你可以把相关的,放在某一个Pinboard中.到时候可以只在这一个Pinboard中去搜索.\n它可以方便的去修改历史剪切板内容.\n它可以直接把历史的某个剪切板Pin起来,直接取个别名,方便后面搜索.\n它可以在多个设备间同步历史剪切板.\n\n就是因为paste最近转为了订阅制,我才买了setapp.\n(paste单独订阅的价格也不低,而它也在setapp的支持列表中.)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597220499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298194,"ip_address":""},"score":298215,"extra":""},{"author":{"id":1072432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5d/30/a9d12bdb.jpg","nickname":"ChamPly","note":"","ucode":"B7FA8EB8DD8CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298362,"discussion_content":"就是snippets功能，因为需要记住的东西不是很多，所以就用这个我觉得足够了，我也用用你的这个paste，感觉更专业一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597280616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298215,"ip_address":""},"score":298362,"extra":""}]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298190,"discussion_content":"老师不要怕编辑.\n学习的过程,哪有轻松的.\n如果编辑觉得一篇专栏25分钟时间太长,就分成两个15分钟的上下篇嘛.\n\n我估计<<互联网人的英语私教课>>的用户数据跟您这个专栏也不相上下.\n别看它有大几千人购买,后面的留言也是相当的惨淡.\n那个专栏真是残暴啊,一篇都是45分钟的.������\n老实说,那个专栏,我的学习进度停留在了75%","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597216074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298295,"discussion_content":"这不恰恰说明编辑说得是对的么？——一讲长了会吓退读者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597238641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298190,"ip_address":""},"score":298295,"extra":""},{"author":{"id":1072432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5d/30/a9d12bdb.jpg","nickname":"ChamPly","note":"","ucode":"B7FA8EB8DD8CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":298364,"discussion_content":"老师，vim东西其实还是很多的，能否拉一个群，方便大家交流，很多好用的插件大家可以探讨探讨","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597280746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298295,"ip_address":""},"score":298364,"extra":""},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1072432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5d/30/a9d12bdb.jpg","nickname":"ChamPly","note":"","ucode":"B7FA8EB8DD8CD5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298393,"discussion_content":"你不是在那个微信群么😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597288640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298364,"ip_address":""},"score":298393,"extra":""}]}]},{"had_liked":false,"id":254806,"user_name":"乘风破浪","can_delete":false,"product_type":"c1","uid":1477915,"ip_address":"","ucode":"A93D1E8D78E824","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKNDKOCoZvCqmn86B6h9icxf1htkd1ehXqIq7vpcddd98KAnGQiahrtibfjiagjd1VmZL0dnMxNAngiaxQ/132","comment_is_top":false,"comment_ctime":1603189226,"is_pvip":false,"replies":[{"id":"93103","content":"不需要配置，但 bat 的预览效果的前提是：<br><br>- 在 Vim 里使用 :Files 命令（不是 :FZF 命令）<br>- 屏幕足够大（比如 80x24 是出不来的）<br><br>是不是有某个条件你没满足？","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1603375177,"ip_address":"","comment_id":254806,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5898156522","product_id":100055801,"comment_content":"请问老师您的bat如何配合fzf使用？我已经安装了bat，但是调出fzf, 还是无法显示语法高亮的效果。","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507519,"discussion_content":"不需要配置，但 bat 的预览效果的前提是：\n\n- 在 Vim 里使用 :Files 命令（不是 :FZF 命令）\n- 屏幕足够大（比如 80x24 是出不来的）\n\n是不是有某个条件你没满足？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603375177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477915,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKNDKOCoZvCqmn86B6h9icxf1htkd1ehXqIq7vpcddd98KAnGQiahrtibfjiagjd1VmZL0dnMxNAngiaxQ/132","nickname":"乘风破浪","note":"","ucode":"A93D1E8D78E824","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326569,"discussion_content":"谢谢老师，已经OK了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605619091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314908,"discussion_content":"是没预览，还是有预览没高亮？单独用bat命令查看这个文件有没有高亮？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603208182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350581,"user_name":"皮聪","can_delete":false,"product_type":"c1","uid":1105744,"ip_address":"","ucode":"75D9E182BC00E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/50/b9955f61.jpg","comment_is_top":false,"comment_ctime":1657013740,"is_pvip":false,"replies":[{"id":"127569","content":"就是多练吧。有些东西就是纯粹的熟能生巧。","user_name":"作者回复","user_name_real":"编辑","uid":"1645639","ctime":1657103134,"ip_address":"","comment_id":350581,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657013740","product_id":100055801,"comment_content":"前9章看了两遍，内容确实不少，跟着做的话，感觉还好，光看的话就很难看下去。还是得做，这么多章对我而言，最麻烦的是正则那一章，不知道有没有快速的训练正则使用的方法。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578964,"discussion_content":"就是多练吧。有些东西就是纯粹的熟能生巧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657103134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337221,"user_name":"bianf","can_delete":false,"product_type":"c1","uid":2655951,"ip_address":"","ucode":"E8B0E15356464F","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/cf/3764011f.jpg","comment_is_top":false,"comment_ctime":1646705699,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1646705699","product_id":100055801,"comment_content":"我在vim插入模式下，输入当前路径下的其他文件开头，然后按下ctrl+f，终端窗口下方出现了文件名补全字样，同时也出现了文件名列表，可以用ctrl+f&#47;n&#47;p在匹配项中跳转，但是ctrl+x不行，输入ctrl+x只会显示^x 模式（^]^D^E^F^I^K^L^N^O^Ps^U^V^Y）但是您的文章里是说可以的，ctrl+x有什么特别的使用条件吗","like_count":0,"discussions":[{"author":{"id":2655951,"avatar":"https://static001.geekbang.org/account/avatar/00/28/86/cf/3764011f.jpg","nickname":"bianf","note":"","ucode":"E8B0E15356464F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554972,"discussion_content":"....没事了，我就说为什么ctrl+f时好时坏，原来是先ctrl+c然后在ctrl+f","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646705849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254617,"user_name":"大狗爱吃鱼","can_delete":false,"product_type":"c1","uid":2062955,"ip_address":"","ucode":"5E8A002A993608","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7a/6b/1b021705.jpg","comment_is_top":false,"comment_ctime":1603158552,"is_pvip":false,"replies":[{"id":"92917","content":"我倒真没在Windows下试过fzf。错误信息提示说应该安装bash，你可以试试。Git for Windows就带了Bash，打开个Git窗口试试。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1603169837,"ip_address":"","comment_id":254617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603158552","product_id":100055801,"comment_content":"win10下，fzf安装bat和ripgrep后，无预览小窗口，报&quot;Preview window not supported (bash not found in PATH)&quot;","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507457,"discussion_content":"我倒真没在Windows下试过fzf。错误信息提示说应该安装bash，你可以试试。Git for Windows就带了Bash，打开个Git窗口试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603169837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246480,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1599369869,"is_pvip":false,"replies":[{"id":"90609","content":"对，光学不练一场空。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1599437347,"ip_address":"","comment_id":246480,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599369869","product_id":100055801,"comment_content":"边学边练了好几天，终于看完啦～技能学习还是得慢慢练哈，学了不练过几天就忘了","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505151,"discussion_content":"对，光学不练一场空。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599437347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242062,"user_name":"李公子胜治","can_delete":false,"product_type":"c1","uid":1455420,"ip_address":"","ucode":"7D48D78D289935","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/3c/9800b0ba.jpg","comment_is_top":false,"comment_ctime":1597580172,"is_pvip":false,"replies":[{"id":"89347","content":"我没说过剖析 folly 吧……而且，像 folly、boost 这样的大库，真要剖析，单一个库就可以写一个专栏了。<br><br>关键仍然是方法，理解了语法要点和惯用法，自然就能看明白代码了。Folly 的代码还是相当清晰的。<br><br>看源码肯定是有用的，不过如果不是自己经常用的，看的体会可能不大。从我自己的角度，我自己没有完整看过哪个库的源码，基本是按需查看。（《STL源码剖析》不算的话，毕竟，有导读的看书比直接看代码还是要轻松。）<br><br>《C++ 沉思录》评价还是不错的，我觉得可以结合学习新标准一起看。毕竟书本身确实是有点老了。反过来，这么老的书评价还不错，说明确实是经典。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597591859,"ip_address":"","comment_id":242062,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597580172","product_id":100055801,"comment_content":"老师，我最近学了你的c++专栏，准备实战剖析folly源码，结果根本看不到，老师觉得学习cpp分析源码这种学习方式咋样，另外，我最近买了一本  《c++沉思录》，但是网上说书太老了，请问老师还有必要看吗","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503910,"discussion_content":"我没说过剖析 folly 吧……而且，像 folly、boost 这样的大库，真要剖析，单一个库就可以写一个专栏了。\n\n关键仍然是方法，理解了语法要点和惯用法，自然就能看明白代码了。Folly 的代码还是相当清晰的。\n\n看源码肯定是有用的，不过如果不是自己经常用的，看的体会可能不大。从我自己的角度，我自己没有完整看过哪个库的源码，基本是按需查看。（《STL源码剖析》不算的话，毕竟，有导读的看书比直接看代码还是要轻松。）\n\n《C++ 沉思录》评价还是不错的，我觉得可以结合学习新标准一起看。毕竟书本身确实是有点老了。反过来，这么老的书评价还不错，说明确实是经典。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597591859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455420,"avatar":"https://static001.geekbang.org/account/avatar/00/16/35/3c/9800b0ba.jpg","nickname":"李公子胜治","note":"","ucode":"7D48D78D289935","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299209,"discussion_content":"谢谢老师，打错字了，是folly看不懂（＃－.－）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597593016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241452,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1597298931,"is_pvip":false,"replies":[{"id":"89172","content":"1. 这个要看相关的插件支持怎么样了（如 vim-go 和 coc、YouCompleteMe 等）。我觉得应该没问题的。用 Vim 内置的这个跳转功能确实不行。<br><br>2. 这个已经说过啦。第 7 讲定义的 &lt;F2&gt; 就是干这个的。<br><br>3. 没啥特别习惯。印象里 a-z 我同时最多用过 5 个？编辑过后也就不记得里面是什么了。<br><br>4. 目前没计划。Vim的功能太多了，感觉讲都讲不完。������<br><br>如果后面能找到时间，看看是不是再搞个加餐吧。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597308073,"ip_address":"","comment_id":241452,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597298931","product_id":100055801,"comment_content":"每一篇都是满满的干货，感谢老师，有几个问题<br><br>1. 文本目标跳转那里，貌似必须是有后缀名的文件名才能跳转过去？像是在 golang 和 javascript 中路径中文件的后缀是默认省去的，就没有办法跳转过去，不知道是不是需要自行配置或者依赖插件？<br><br>2. 用 &#47;... 全局搜索的结果会被高亮表示，但是回到正常模式或者插入模式，这个高亮显示一直都还在。该如何去除呢？感觉像是搜索寄存器里的值一直会显示出来，除非搜索一个全局不存在的东西才能让高亮消失。。。<br><br>3. 关于 a-z 寄存器那里，不知道老师有没有使用上面的习惯。感觉没有刻意去练习并习惯，一般也就临时用用，大概也就用到前 3 个吧。多了真的记不住。0-9 寄存器也是一样。估计还是要借助插件把这些寄存器的内容都显示出来？<br><br>4. 另外有关宏，感觉这个功能挺强大的。不知道老师后面会不会讲更多的应用场景？<br><br>越来越感觉到 vim 的强大。另外认识到好多 shell 上面的工具，像是 fzf，真是节省效率的利器。希望以后跟着老师多多认识并学习这方面的工具。另外，不知道老师有没有计划写几篇来专门讲实际应用的案例，虽然说每一篇针对每个点都有案例。但是我想的是如果能够有一个应用场景把前后讲的这些东西都串起来，这样跟着练习几次，熟练度会大大提高。毕竟 VIM 这东西不练还是不行的，工作中习惯了以往的编辑模式，要一下子应用上老师前前后后讲的这些内容，除非把注意力刻意放在编辑这一块，否则不太容易。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503741,"discussion_content":"1. 这个要看相关的插件支持怎么样了（如 vim-go 和 coc、YouCompleteMe 等）。我觉得应该没问题的。用 Vim 内置的这个跳转功能确实不行。\n\n2. 这个已经说过啦。第 7 讲定义的 &amp;lt;F2&amp;gt; 就是干这个的。\n\n3. 没啥特别习惯。印象里 a-z 我同时最多用过 5 个？编辑过后也就不记得里面是什么了。\n\n4. 目前没计划。Vim的功能太多了，感觉讲都讲不完。������\n\n如果后面能找到时间，看看是不是再搞个加餐吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597308073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298633,"discussion_content":"第一个问题不知道`:help suffixesadd`这个能不能实现你说的,给文件添加后缀的需求.\n印象中golang只有导入包名的地方会有一个近似的路径.但是这地方也没有文件名.\n\n`a-z`寄存器和`a-z`书签类似,最好是能把场景和字母对应起来.这样短时间内是不会忘记的.\n比如用二分查找时,用`s`表示`start`开始的地方,`e`标识`end`结束的地方.\n这样尽可能的发挥自己的想象力.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597367689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241166,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1597206395,"is_pvip":false,"replies":[{"id":"89120","content":"没问题，关键是练熟、掌握。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597214970,"ip_address":"","comment_id":241166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597206395","product_id":100055801,"comment_content":"实用。<br>确实有点多， 计划每天学一个，稳健。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503663,"discussion_content":"没问题，关键是练熟、掌握。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597214970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}