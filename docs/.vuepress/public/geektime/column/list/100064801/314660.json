{"id":314660,"title":"04｜选择哈希算法应该考虑哪些因素？","content":"<p>你好，我是范学雷。</p><p>上一讲，通过讨论单向散列函数的两个困难程度，我们了解到了安全强度的计量办法，安全强度的衰减，以及常见的安全强度推荐指标，我们还对安全强度有了一个更直观的感受。</p><p>你还记得上一讲提到的，现在的应用程序要使用128位或者更高安全强度的算法吗？那么，对于单向散列函数来说，哪些算法能够满足这样的安全强度要求呢？我们在选择这些算法的时候，应该去考虑哪些因素呢？这就是我们这次要解决的问题。</p><p>首先，让我们先来分析一下，还有哪些算法是可用的算法。</p><h2>有哪些可用的算法？</h2><p>为什么要先分析有哪些可用的算法呢？因为，在选择哈希算法的时候，我们的确需要综合考虑很多因素，但是如果这个算法是不可用的，其他因素也就无足轻重了。</p><p>所以，<strong>判断一个现存的算法，还能不能继续使用是我们选择算法的第一步</strong>。根据这个标准，我把常见的算法分为了以下三类：</p><ul>\n<li>退役的算法；</li>\n<li>遗留的算法；</li>\n<li>现行的算法。</li>\n</ul><p><strong>退役的算法，<strong><strong>就是那些</strong></strong>已经退出了历史舞台<strong><strong>的算法</strong></strong>，<strong><strong>它们的</strong></strong>安全强度很弱，<strong><strong>你</strong></strong>一定不<strong><strong>能</strong></strong>再用了</strong>。如果你看到退役的算法还在使用，往往意味着这是一个过时的系统，或者是它的开发者缺少密码学常识（这怪不得它的开发者，毕竟密码学常识一直没有得到普及）。</p><p>如果是我们自己能够掌控的系统，一定要尽最大努力、尽快地升级算法。</p><!-- [[[read_end]]] --><p><strong>什么是遗留的算法？你只要记住，它们存在明显的安全问题，已经不足以支撑现在的安全强度需求了，你一定不要用在新系统中了</strong>。因为，遗留的算法，已经走在退役的路上了。</p><p>那为什么有的人还在保留遗留的算法？因为，保留遗留算法，还是会让系统有更好的兼容性和互操作性，给现有系统升级到新算法留有一段时间。但是，新的代码和项目，就不要再使用遗留算法了。现在，还要继续运营的系统，也要想办法尽快升级算法。</p><p>到了最后，<strong>只有现行的算法，<strong><strong>没有明显的安全问题，<strong><strong>是</strong></strong>我们</strong></strong>现在可以使用的算法</strong>。这是因为现行算法的安全性，是经过很多密码学专家分析验证的。一般到目前为止，还没有人能发现明显的安全缺陷。现行的算法，才是我们应该使用、可以放心的算法。</p><p>不过，不同的推荐指标，对于算法的选择也有不同的考量和倾向。我们这里使用上一讲，我们提到过的较为保守的ECRYPT-CSA的2018年建议。</p><p>在下面的表格里，我罗列了一些常见的算法，以及一些相关的信息。其中，计算性能参考的是ECRYPT在2020年7月和2019年10月对4096个字节数据的性能基准测试结果。</p><p>什么是计算性能？它表示在数据运算时，处理一个字节处理需要执行的微处理器的时钟周期数。它使用的度量单位是每字节周期数（CPB，Cycles Per Byte）。</p><p>每字节周期数是一个常用的密码算法实际性能的参考指标。每字节花费的时钟周期数越小，表示这个算法运算得越快，性能越好。</p><p><img src=\"https://static001.geekbang.org/resource/image/af/a9/af9f9f99535ea29f54b934cf2ce449a9.jpg?wh=2284*1285\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/e4/bb/e454af18046b37e5d51e575601e119bb.jpg?wh=2284*1285\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/79/77/79236952581b4a612749cbec11cc2577.jpg?wh=2284*1285\" alt=\"\"></p><h2>为什么有处理能力限制？</h2><p>在上面的表格里，你能看到，有一列说的是数据处理能力。数据处理能力指的是对应的单向散列函数能够处理的最大的输入数据。比如，SHA-256能够处理的最大数据是2^64位。</p><p>我们前面说过，单向散列函数可以把任意大小的数据，转行成固定长度的数据。那为什么有的单向散列函数还有处理能力限制呢？上限不应该是无限大吗？为什么有的单向散列函数，比如SHAKE128，又没有处理能力限制呢？</p><p>问题虽然有点多，不过还是值得我们关注的。我们要想了解这个数据处理能力的限制是什么意思，就要知道它的由来。也就是说，我们需要了解单向散列函数是如何处理输入数据的。</p><p>一个典型的单向散列函数，由四个部分组成：数据分组、链接模式、单向压缩函数和终结函数。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/63/766c6b81c43b684a0f083c540ea94163.jpeg?wh=2284*1285\" alt=\"\" title=\"单向散列函数处理过程\"></p><p>我们来看数据分组，数据分组负责把输入数据分割成压缩函数能够处理的数据块。在上面的表里，有一项是“数据分块”，按照“位”来计量，指的就是压缩函数能够处理的数据块尺寸。</p><p>一般来说，压缩函数能够接收的数据块大小是固定的。比如SHA-256的压缩函数只能处理512位的数据，多一位不行，少一位也不行。</p><p>可是，实际单向散列函数的输入数据的大小不一定就是一个完整的、压缩函数可以接收的数据块。比如说，我们可能使用SHA-256处理一个字节，可能处理一千个字节，也可能处理一百万个字节。输入数据可能是512位的整数倍，也可能不是。</p><p>然后，整数倍的数据，可以送给压缩函数分批处理；不足整数倍的数据，就需要填充、补齐，变成压缩函数可以处理的数据块大小。</p><p>在下图SHA-1和SHA-2的数据补齐方案里，输入数据长度是补充数据的一部分。其中，SHA-1、SHA-224、SHA-256使用64位来表示输入数据长度；SHA-384、SHA-512、 SHA-512/224和 SHA-512/256使用128位来表示输入数据长度。</p><p>但是，如果输入数据长度超过了数据补齐方案的限制，数据就没有办法分组了。这就是单向散列函数数据处理能力限制的来源。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/8f/810cda88e56e0yy5917220c3e1a3658f.jpg?wh=2284*1285\" alt=\"\"></p><p>而我们说，SHA-3的设计，放弃了在数据补齐方案里使用固定位数表示输入数据长度的做法，它也就不再有数据处理能力的限制。</p><p>幸运的是，到目前为止，这个数据处理能力限制是很高的，一般的应用程序很难超越它。不过，我们心里还是要有一根弦，需要考虑数据处理能力限制的时候，我们千万不能疏忽了它。</p><p><strong>选择什么样的数据补齐方案，是密码学里一个棘手的问题</strong>。很多针对密码算法的攻击，都是从数据补齐方案下手的。我们关注这个问题，更多地是为了简单地了解单向散列函数的内部计算。</p><p>之后，我们会详细讨论单向散列函数的一个常见的算法错配问题：长度延展攻击。</p><h2>算法的性能是怎么决定的？</h2><p>我们再来看一个在选择哈希算法时应该重点考虑的因素，算法的性能问题。</p><p>从理论上讲，一个算法的性能主要是由算法的复杂度决定的。这里有一个假设，就是不考虑其他因素的影响。但是在实践中，其他因素有时候才是影响算法性能的主要因素，比如实现细节。</p><p>在一个算法的实现细节中，通常影响计算性能的因素有：</p><ul>\n<li>算法实现的内存使用影响；</li>\n<li>算法实现有没有使用优化的步骤，比如并行计算或者预运算？</li>\n<li>算法实现有没有使用硬件加速，比如使用CPU关于算法的扩展指令？</li>\n</ul><p>一个规规矩矩的算法实现，它的性能一般落后于CPU扩展指令数十倍。遗憾的是，并不是每一个算法都有CPU扩展指令，或者每一个实现都支持CPU扩展指令。</p><p>另外，计算机本身的指令集，比如是使用32位还是64位的指令，是否和算法匹配，也是影响算法性能的一个重要因素。我们经常可以看到，SHA-512的计算速度，比SHA-256还要快。SHA-256使用32位的数据进行计算，而SHA-512使用64位的数据进行计算。</p><p>现在的计算机，一般都是64位的。所以运行在64位的计算机上，基于32位的计算可能反而比基于64位的计算还要慢。</p><p>这对我们选用算法有什么启示呢？一个应用程序，<strong>一般而言，应该选用现行的、流行的算法。现行推荐的算法，保证了算法的安全性。流行的算法，成熟的实现会考虑实现优化，包括CPU扩展指令的支持</strong>。选用流行的算法，也是获得较好计算性能的一个实践办法。</p><p>对于单向散列函数，目前现行的、流行的算法有：</p><ul>\n<li>SHA-256</li>\n<li>SHA-384</li>\n<li>SHA-512</li>\n</ul><p>使用现行的、流行的算法是不是就万无一失了？遗憾的是，我们依然需要小心谨慎，不要掉进已知的安全漏洞陷阱。下一次，我们讨论单向散列函数在应用中常见的问题，包括我们上面提到的“长度延展攻击”。</p><h2>Take Away（今日收获）</h2><p>今天，通过罗列常见的单向散列函数算法，我们讨论了退役的、遗留的和现行的算法分类；知道了单向散列函数的处理能力限制，以及处理能力限制的来源；我们还简单讨论了影响算法性能的常见因素。这都是我们在选择哈希算法时需要考虑的。</p><p>这一讲，我们要：</p><ul>\n<li><strong>了解三类单向散列函数算法：退役的算法、遗留的算法以及现行的算法；</strong></li>\n<li><strong>知道要<strong><strong>尽量选用现行的、流行的算法</strong></strong>。对于单向散列函数，它们是<strong><strong>SHA-256，SHA-384</strong></strong>和SHA-512。</strong></li>\n</ul><h2>思考题</h2><p>今天留给大家的是一个需要动手的思考题。我们罗列了常见的单向散列函数算法，知道了退役的、遗留的和现行的算法。知道了这样的概念，我们就要把它用起来。</p><p>在你正在开发的项目中，或者你关注的开放源代码项目中，试着搜索一下这些算法，看看哪些退役的算法还在使用，哪些遗留的算法还在使用。如果发现了退役算法和遗留算法的使用，你有没有什么建议？</p><p>这是一个能够帮助你理解算法生命阶段、解决现有项目历史遗留问题的好办法。欢迎在留言区留言，记录、讨论你的发现和建议。</p><p>好的，今天就这样，我们下次再聊。</p>","comments":[{"had_liked":false,"id":265220,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1606815594,"is_pvip":true,"replies":[{"id":"96403","content":"赞！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606842518,"ip_address":"","comment_id":265220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78916226922","product_id":100064801,"comment_content":"一直没有看明白单向哈希函数关于输入数据能力的限制，找了一篇博客回头在看我们的专栏恍然大悟。<br>以SHA256举例：输入数据长度不是512的整数倍的话，需要预处理填充<br>1.在报文末尾进行填充，使报文长度在对512取模以后的余数是448<br>填充是这样进行的：先补第一个比特为1，然后都补0，直到长度满足对512取模后余数是448。<br>2.附加长度值<br>   SHA256用一个64位的数据来表示原始消息的长度<br>   附加长度值就是将原始数据（第一步填充前的消息）的长度信息补到已经进行了填充操作的消息后面<br>   因此，通过SHA256计算的消息长度必须要小于$ 2^64 $，当然绝大多数情况这足够大了<br>最后经过上面两步448+64=512  刚好是512的整数倍<br>参考地址：https:&#47;&#47;blog.csdn.net&#47;u011583927&#47;article&#47;details&#47;80905740&#47;","like_count":18,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510842,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606842518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265211,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1606814093,"is_pvip":true,"replies":[{"id":"96399","content":"很多同学关心这个细节，这很棒。看来这个专栏可以讲的再深入一些，聊聊算法的设计细节。<br><br>SHA-1不是使用64位的来表示输入数据长度吗？一个数据块是512位，除掉64位，还剩448位。数据是三个字节，24位。除掉24位，还剩424位。去掉补齐数据开始的标识位（也就是423前面的1），还剩423位。 这423位要用零填充。这就是423的来源。你自己试着拆解一下SHA-512?","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606841852,"ip_address":"","comment_id":265211,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14491715981","product_id":100064801,"comment_content":"老师，请问数据补齐方案示意图中的俩数字，423 和 871 具体含义是什么呢？","like_count":3,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510837,"discussion_content":"很多同学关心这个细节，这很棒。看来这个专栏可以讲的再深入一些，聊聊算法的设计细节。\n\nSHA-1不是使用64位的来表示输入数据长度吗？一个数据块是512位，除掉64位，还剩448位。数据是三个字节，24位。除掉24位，还剩424位。去掉补齐数据开始的标识位（也就是423前面的1），还剩423位。 这423位要用零填充。这就是423的来源。你自己试着拆解一下SHA-512?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606841852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415127,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/17/8c6d48f7.jpg","nickname":"陈学彬","note":"","ucode":"334617FE24478E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362687,"discussion_content":"老师，上面数据是三字节，24位。这个数据指的是什么数据？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617011021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1512898,"avatar":"https://static001.geekbang.org/account/avatar/00/17/15/c2/10ac0e82.jpg","nickname":"Mirage","note":"","ucode":"CB983311735C32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2415127,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/17/8c6d48f7.jpg","nickname":"陈学彬","note":"","ucode":"334617FE24478E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547204,"discussion_content":"abc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642579464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362687,"ip_address":""},"score":547204,"extra":""}]}]},{"had_liked":false,"id":265208,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1606813927,"is_pvip":true,"replies":[{"id":"96401","content":"比如说，填充方案里需要指明原始数据长度，指明这个数据长度的使用64位来表示。64位能表示的数最大就是2^64。如果需要进行散列值计算的数据超出2^64，这个填充方案就没有办法使用了，因为长度超出了它能够表达范围，溢出了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606842331,"ip_address":"","comment_id":265208,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10196748519","product_id":100064801,"comment_content":"如果输入数据长度超过了数据补齐方案的限制，数据就没有办法分组了<br><br>老师，这句话应该怎么理解呢？","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510836,"discussion_content":"比如说，填充方案里需要指明原始数据长度，指明这个数据长度的使用64位来表示。64位能表示的数最大就是2^64。如果需要进行散列值计算的数据超出2^64，这个填充方案就没有办法使用了，因为长度超出了它能够表达范围，溢出了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606842331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1669343,"avatar":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","nickname":"于途","note":"","ucode":"70300C6CCCEAF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331412,"discussion_content":"明白了，谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606868729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285783,"user_name":"陈学彬","can_delete":false,"product_type":"c1","uid":2415127,"ip_address":"","ucode":"334617FE24478E","user_header":"https://static001.geekbang.org/account/avatar/00/24/da/17/8c6d48f7.jpg","comment_is_top":false,"comment_ctime":1617011405,"is_pvip":false,"replies":[{"id":"103913","content":"看图前面的ABC，就是这三个字节。 例子而已，例子使用了三个字节，所以就是三个字节。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1617260439,"ip_address":"","comment_id":285783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5911978701","product_id":100064801,"comment_content":"老师，看了其他人留言，明白了补齐数据那张图中423 和 871的由来，但不太明白说的“数据是三个字节，24位”，这个数据是什么数据，为什么要用占用三个字节。","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517780,"discussion_content":"看图前面的ABC，就是这三个字节。 例子而已，例子使用了三个字节，所以就是三个字节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617260439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265216,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1606814996,"is_pvip":true,"replies":[{"id":"96402","content":"对的。448的来源，是要剪掉表达数据长度的位数，这个位数对于SHA-256来说，是64位。 512 - 64 = 448.","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606842454,"ip_address":"","comment_id":265216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901782292","product_id":100064801,"comment_content":"SHA256，输入长度不是512位<br>在报文末尾进行填充，使报文长度在对512取模以后的余数是448<br>填充是这样进行的：先补第一个比特为1，然后都补0，直到长度满足对512取模后余数是448。","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510840,"discussion_content":"对的。448的来源，是要剪掉表达数据长度的位数，这个位数对于SHA-256来说，是64位。 512 - 64 = 448.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606842454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265213,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1606814532,"is_pvip":true,"replies":[{"id":"96398","content":"每一个类别的算法，都会有整理。另外，专栏结课的时候会有一个总的表格。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606841497,"ip_address":"","comment_id":265213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901781828","product_id":100064801,"comment_content":"老师，针对退役的算法、遗留的算法、现行的算法，能否整理一个概览图或者表格呢？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510839,"discussion_content":"每一个类别的算法，都会有整理。另外，专栏结课的时候会有一个总的表格。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606841497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265032,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1606740091,"is_pvip":true,"replies":[{"id":"96241","content":"我特别喜欢这样的问题，这就是我在开篇词里说的发现新问题。你在学习群里找一下我的微信号，如果有需要，我可以送你一门极客时间的其他课程，或者我自己的《代码精进之路》。<br><br>SHA-1和SHA-2的算法设计，如果输入数据长度是数据块的整数倍，就用补齐数据再补一个数据块。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606758854,"ip_address":"","comment_id":265032,"utype":1}],"discussion_count":8,"race_medal":0,"score":"5901707387","product_id":100064801,"comment_content":"在下图 SHA-1 和 SHA-2 的数据补齐方案里，输入数据长度是补充数据的一部分<br>————————-<br>这里没有理解，输入数据长度是64位或者是128怎么进行补齐的？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510775,"discussion_content":"我特别喜欢这样的问题，这就是我在开篇词里说的发现新问题。你在学习群里找一下我的微信号，如果有需要，我可以送你一门极客时间的其他课程，或者我自己的《代码精进之路》。\n\nSHA-1和SHA-2的算法设计，如果输入数据长度是数据块的整数倍，就用补齐数据再补一个数据块。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606758854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014146,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/79/82/c3cccc38.jpg","nickname":"IT生涯路漫漫","note":"","ucode":"4954D1CBEB4E44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362316,"discussion_content":"老师学习群是哪个啊？怎么加入？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616919135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331076,"discussion_content":"还是不是很明白，老师能补充个具体的例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606783628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":331088,"discussion_content":"我不在计算机旁。我们就打个比方，数据块是4个字节。 “ABC”这三个字节的，要补齐到四个字节，“ABCX”。 要是“ABCD”是数据，已经四个字节了，够一个数据块了，就按照补齐布局的规则，再加一个数据块，补齐后的数据看起来像“ABCDWXYZ”，ABCD是原数据，WXYZ是补齐数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606785313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331076,"ip_address":""},"score":331088,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":331115,"discussion_content":"这个理解的，就是输入数据长度当作补齐数据，然后这个又限制了处理位数的能力，这个对应关系没有明白的。这里不可以用输入数据的长度进行无限的补齐吗？(只要有待补齐的数据块，就从补齐数据中取出一部分数据进行补齐)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606790237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331088,"ip_address":""},"score":331115,"extra":""},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":331202,"discussion_content":"补齐数据有格式的，其中有一块说明有多少字节，这一块的长度是固定的，如果是64位，数据就不能超过在2^64。 比如说，“ABC”补齐成“ABCX”，其中“X”就有长度限制，比如说最后三个位表示数据长度，哪数据就不能超过2^3。你再仔细看看文章里的图，琢磨琢磨是不是这个道理。 无限补齐当然有时候也行，但是SHA-1算法没这么设计，所以就不能支持无线多的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606807473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331115,"ip_address":""},"score":331202,"extra":""}]}]},{"had_liked":false,"id":264901,"user_name":"向东是大海","can_delete":false,"product_type":"c1","uid":2046992,"ip_address":"","ucode":"A9FE1049D0D144","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/10/61efe672.jpg","comment_is_top":false,"comment_ctime":1606703780,"is_pvip":false,"replies":[{"id":"96159","content":"MD5是退役的算法了。SHA-1也很危险了，但是由于SHA-1算法应用太广泛，还有很多遗留系统在使用。现在主流的浏览器，还有密码算法类库（包括Java），已经把SHA-1禁止掉了（特别是数字签名）。<br><br>CRC16，CRC32不是单向散列函数，不属于密码学的算法，一般也不会当中密码学算法来使用。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606711021,"ip_address":"","comment_id":264901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901671076","product_id":100064801,"comment_content":"MD5，SHA-1 是退役的算法吧？另外，循环冗余校验CRC16，CRC32是哈希算法吗，还可以在新项目中使用吗？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510734,"discussion_content":"MD5是退役的算法了。SHA-1也很危险了，但是由于SHA-1算法应用太广泛，还有很多遗留系统在使用。现在主流的浏览器，还有密码算法类库（包括Java），已经把SHA-1禁止掉了（特别是数字签名）。\n\nCRC16，CRC32不是单向散列函数，不属于密码学的算法，一般也不会当中密码学算法来使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606711021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361362,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667450037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667450037","product_id":100064801,"comment_content":"5.1判断一个现存的算法，还能不能继续使用是我们选择算法的第一步。--记下来","like_count":0},{"had_liked":false,"id":361361,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667449997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667449997","product_id":100064801,"comment_content":"学习打卡，工作中还在用md5，des，aes等退役算法","like_count":0},{"had_liked":false,"id":338559,"user_name":"rocedu","can_delete":false,"product_type":"c1","uid":1013097,"ip_address":"","ucode":"E46E29CBBB94A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/69/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1647572935,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647572935","product_id":100064801,"comment_content":"就我国的情况，sm3应该排第一","like_count":0},{"had_liked":false,"id":265204,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1606812852,"is_pvip":false,"replies":[{"id":"96400","content":"好问题！ 前面的abc使用的是位，64和128指的也是位。24表示输入数据长度，423位表示除了表示数据长度的位数，以及数据补齐开始的标识位外，还需要的补齐数据。<br><br>我在另外一个回复里，拆解了423位是怎么来的。你找找看？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606842044,"ip_address":"","comment_id":265204,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606812852","product_id":100064801,"comment_content":"补齐数据那张图不是很明白，423、871、24这三个数字是什么意思；还有64、128是指二进制有64、128位吗","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510833,"discussion_content":"好问题！ 前面的abc使用的是位，64和128指的也是位。24表示输入数据长度，423位表示除了表示数据长度的位数，以及数据补齐开始的标识位外，还需要的补齐数据。\n\n我在另外一个回复里，拆解了423位是怎么来的。你找找看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606842044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","nickname":"天天有吃的","note":"","ucode":"6267FE8E68DEE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331538,"discussion_content":"已找到，多谢老师，整理了一下\n64\n- 指的也是位，使用64位来表示输入数据长度\n\n24\n- 表示输入字节的位数\n- 这里是a、b、c，每个八位，总共24位\n\n423\n- 512 - 64（输入数据长度） - 24（数据三字节） -1（补齐数据开始的标识位，也就是423前面的1）= 423\n- 这423位要用零填充，即还需要的补齐数据\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606896491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264930,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1606710670,"is_pvip":true,"replies":[{"id":"96240","content":"TLS的签名套件里的SHA-1指的是HMAC算法。基于SHA-1的HMAC算法，虽然目前已经不推荐使用了，但是它的安全性目前看还是足够的。我们后面还会讲HMAC。我个人建议HTTP server禁止掉使用SHA-1的密码套件。如果禁止掉TLS 1.0&#47;1.1没有兼容性问题，禁止掉使用SHA-1的密码套件，一般的应该也没什么问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606758095,"ip_address":"","comment_id":264930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606710670","product_id":100064801,"comment_content":"我唯一能想到的是，我们前几个月，disable了http server的tls1.0和1.1。但是遗憾的是tls1.2有些密码套件的签名还是sha1。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510743,"discussion_content":"TLS的签名套件里的SHA-1指的是HMAC算法。基于SHA-1的HMAC算法，虽然目前已经不推荐使用了，但是它的安全性目前看还是足够的。我们后面还会讲HMAC。我个人建议HTTP server禁止掉使用SHA-1的密码套件。如果禁止掉TLS 1.0/1.1没有兼容性问题，禁止掉使用SHA-1的密码套件，一般的应该也没什么问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606758095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}