{"id":155273,"title":"34 | 自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现","content":"<p>你好，我是盛延敏，这里是网络编程实战第34讲，欢迎回来。</p><p>这一讲，我们延续第33讲的话题，继续解析高性能网络编程框架的字节流处理部分，并为网络编程框架增加HTTP相关的功能，在此基础上完成HTTP高性能服务器的编写。</p><h2>buffer对象</h2><p>你肯定在各种语言、各种框架里面看到过不同的buffer对象，buffer，顾名思义，就是一个缓冲区对象，缓存了从套接字接收来的数据以及需要发往套接字的数据。</p><p>如果是从套接字接收来的数据，事件处理回调函数在不断地往buffer对象增加数据，同时，应用程序需要不断把buffer对象中的数据处理掉，这样，buffer对象才可以空出新的位置容纳更多的数据。</p><p>如果是发往套接字的数据，应用程序不断地往buffer对象增加数据，同时，事件处理回调函数不断调用套接字上的发送函数将数据发送出去，减少buffer对象中的写入数据。</p><p>可见，buffer对象是同时可以作为输入缓冲（input buffer）和输出缓冲（output buffer）两个方向使用的，只不过，在两种情形下，写入和读出的对象是有区别的。</p><p>这张图描述了buffer对象的设计。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/bb/44eaf37e860212a5c6c9e7f8dc2560bb.png?wh=946*316\" alt=\"\"><br>\n下面是buffer对象的数据结构。</p><pre><code>//数据缓冲区\nstruct buffer {\n    char *data;          //实际缓冲\n    int readIndex;       //缓冲读取位置\n    int writeIndex;      //缓冲写入位置\n    int total_size;      //总大小\n};\n</code></pre><!-- [[[read_end]]] --><p>buffer对象中的writeIndex标识了当前可以写入的位置；readIndex标识了当前可以读出的数据位置，图中红色部分从readIndex到writeIndex的区域是需要读出数据的部分，而绿色部分从writeIndex到缓存的最尾端则是可以写出的部分。</p><p>随着时间的推移，当readIndex和writeIndex越来越靠近缓冲的尾端时，前面部分的front_space_size区域变得会很大，而这个区域的数据已经是旧数据，在这个时候，就需要调整一下整个buffer对象的结构，把红色部分往左侧移动，与此同时，绿色部分也会往左侧移动，整个缓冲区的可写部分就会变多了。</p><p>make_room函数就是起这个作用的，如果右边绿色的连续空间不足以容纳新的数据，而最左边灰色部分加上右边绿色部分一起可以容纳下新数据，就会触发这样的移动拷贝，最终红色部分占据了最左边，绿色部分占据了右边，右边绿色的部分成为一个连续的可写入空间，就可以容纳下新的数据。下面的一张图解释了这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/63/80/638e76a9f926065a72de9116192ef780.png?wh=1046*622\" alt=\"\"><br>\n下面是make_room的具体实现。</p><pre><code>void make_room(struct buffer *buffer, int size) {\n    if (buffer_writeable_size(buffer) &gt;= size) {\n        return;\n    }\n    //如果front_spare和writeable的大小加起来可以容纳数据，则把可读数据往前面拷贝\n    if (buffer_front_spare_size(buffer) + buffer_writeable_size(buffer) &gt;= size) {\n        int readable = buffer_readable_size(buffer);\n        int i;\n        for (i = 0; i &lt; readable; i++) {\n            memcpy(buffer-&gt;data + i, buffer-&gt;data + buffer-&gt;readIndex + i, 1);\n        }\n        buffer-&gt;readIndex = 0;\n        buffer-&gt;writeIndex = readable;\n    } else {\n        //扩大缓冲区\n        void *tmp = realloc(buffer-&gt;data, buffer-&gt;total_size + size);\n        if (tmp == NULL) {\n            return;\n        }\n        buffer-&gt;data = tmp;\n        buffer-&gt;total_size += size;\n    }\n}\n</code></pre><p>当然，如果红色部分占据过大，可写部分不够，会触发缓冲区的扩大操作。这里我通过调用realloc函数来完成缓冲区的扩容。</p><p>下面这张图对此做了解释。</p><p><img src=\"https://static001.geekbang.org/resource/image/9f/ba/9f66d628572b0ef5b7d9d5989c7a14ba.png?wh=1248*500\" alt=\"\"></p><h2>套接字接收数据处理</h2><p>套接字接收数据是在tcp_connection.c中的handle_read来完成的。在这个函数里，通过调用buffer_socket_read函数接收来自套接字的数据流，并将其缓冲到buffer对象中。之后你可以看到，我们将buffer对象和tcp_connection对象传递给应用程序真正的处理函数messageCallBack来进行报文的解析工作。这部分的样例在HTTP报文解析中会展开。</p><pre><code>int handle_read(void *data) {\n    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;\n    struct buffer *input_buffer = tcpConnection-&gt;input_buffer;\n    struct channel *channel = tcpConnection-&gt;channel;\n\n    if (buffer_socket_read(input_buffer, channel-&gt;fd) &gt; 0) {\n        //应用程序真正读取Buffer里的数据\n        if (tcpConnection-&gt;messageCallBack != NULL) {\n            tcpConnection-&gt;messageCallBack(input_buffer, tcpConnection);\n        }\n    } else {\n        handle_connection_closed(tcpConnection);\n    }\n}\n</code></pre><p>在buffer_socket_read函数里，调用readv往两个缓冲区写入数据，一个是buffer对象，另外一个是这里的additional_buffer，之所以这样做，是担心buffer对象没办法容纳下来自套接字的数据流，而且也没有办法触发buffer对象的扩容操作。通过使用额外的缓冲，一旦判断出从套接字读取的数据超过了buffer对象里的实际最大可写大小，就可以触发buffer对象的扩容操作，这里buffer_append函数会调用前面介绍的make_room函数，完成buffer对象的扩容。</p><pre><code>int buffer_socket_read(struct buffer *buffer, int fd) {\n    char additional_buffer[INIT_BUFFER_SIZE];\n    struct iovec vec[2];\n    int max_writable = buffer_writeable_size(buffer);\n    vec[0].iov_base = buffer-&gt;data + buffer-&gt;writeIndex;\n    vec[0].iov_len = max_writable;\n    vec[1].iov_base = additional_buffer;\n    vec[1].iov_len = sizeof(additional_buffer);\n    int result = readv(fd, vec, 2);\n    if (result &lt; 0) {\n        return -1;\n    } else if (result &lt;= max_writable) {\n        buffer-&gt;writeIndex += result;\n    } else {\n        buffer-&gt;writeIndex = buffer-&gt;total_size;\n        buffer_append(buffer, additional_buffer, result - max_writable);\n    }\n    return result;\n}\n</code></pre><h2>套接字发送数据处理</h2><p>当应用程序需要往套接字发送数据时，即完成了read-decode-compute-encode过程后，通过往buffer对象里写入encode以后的数据，调用tcp_connection_send_buffer，将buffer里的数据通过套接字缓冲区发送出去。</p><pre><code>int tcp_connection_send_buffer(struct tcp_connection *tcpConnection, struct buffer *buffer) {\n    int size = buffer_readable_size(buffer);\n    int result = tcp_connection_send_data(tcpConnection, buffer-&gt;data + buffer-&gt;readIndex, size);\n    buffer-&gt;readIndex += size;\n    return result;\n}\n</code></pre><p>如果发现当前channel没有注册WRITE事件，并且当前tcp_connection对应的发送缓冲无数据需要发送，就直接调用write函数将数据发送出去。如果这一次发送不完，就将剩余需要发送的数据拷贝到当前tcp_connection对应的发送缓冲区中，并向event_loop注册WRITE事件。这样数据就由框架接管，应用程序释放这部分数据。</p><pre><code>//应用层调用入口\nint tcp_connection_send_data(struct tcp_connection *tcpConnection, void *data, int size) {\n    size_t nwrited = 0;\n    size_t nleft = size;\n    int fault = 0;\n\n    struct channel *channel = tcpConnection-&gt;channel;\n    struct buffer *output_buffer = tcpConnection-&gt;output_buffer;\n\n    //先往套接字尝试发送数据\n    if (!channel_write_event_registered(channel) &amp;&amp; buffer_readable_size(output_buffer) == 0) {\n        nwrited = write(channel-&gt;fd, data, size);\n        if (nwrited &gt;= 0) {\n            nleft = nleft - nwrited;\n        } else {\n            nwrited = 0;\n            if (errno != EWOULDBLOCK) {\n                if (errno == EPIPE || errno == ECONNRESET) {\n                    fault = 1;\n                }\n            }\n        }\n    }\n\n    if (!fault &amp;&amp; nleft &gt; 0) {\n        //拷贝到Buffer中，Buffer的数据由框架接管\n        buffer_append(output_buffer, data + nwrited, nleft);\n        if (!channel_write_event_registered(channel)) {\n            channel_write_event_add(channel);\n        }\n    }\n\n    return nwrited;\n}\n</code></pre><h2>HTTP协议实现</h2><p>下面，我们在TCP的基础上，加入HTTP的功能。</p><p>为此，我们首先定义了一个http_server结构，这个http_server本质上就是一个TCPServer，只不过暴露给应用程序的回调函数更为简单，只需要看到http_request和http_response结构。</p><pre><code>typedef int (*request_callback)(struct http_request *httpRequest, struct http_response *httpResponse);\n\nstruct http_server {\n    struct TCPserver *tcpServer;\n    request_callback requestCallback;\n};\n</code></pre><p>在http_server里面，重点是需要完成报文的解析，将解析的报文转化为http_request对象，这件事情是通过http_onMessage回调函数来完成的。在http_onMessage函数里，调用的是parse_http_request完成报文解析。</p><pre><code>// buffer是框架构建好的，并且已经收到部分数据的情况下\n// 注意这里可能没有收到全部数据，所以要处理数据不够的情形\nint http_onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    yolanda_msgx(&quot;get message from tcp connection %s&quot;, tcpConnection-&gt;name);\n\n    struct http_request *httpRequest = (struct http_request *) tcpConnection-&gt;request;\n    struct http_server *httpServer = (struct http_server *) tcpConnection-&gt;data;\n\n    if (parse_http_request(input, httpRequest) == 0) {\n        char *error_response = &quot;HTTP/1.1 400 Bad Request\\r\\n\\r\\n&quot;;\n        tcp_connection_send_data(tcpConnection, error_response, sizeof(error_response));\n        tcp_connection_shutdown(tcpConnection);\n    }\n\n    //处理完了所有的request数据，接下来进行编码和发送\n    if (http_request_current_state(httpRequest) == REQUEST_DONE) {\n        struct http_response *httpResponse = http_response_new();\n\n        //httpServer暴露的requestCallback回调\n        if (httpServer-&gt;requestCallback != NULL) {\n            httpServer-&gt;requestCallback(httpRequest, httpResponse);\n        }\n\n        //将httpResponse发送到套接字发送缓冲区中\n        struct buffer *buffer = buffer_new();\n        http_response_encode_buffer(httpResponse, buffer);\n        tcp_connection_send_buffer(tcpConnection, buffer);\n\n        if (http_request_close_connection(httpRequest)) {\n            tcp_connection_shutdown(tcpConnection);\n            http_request_reset(httpRequest);\n        }\n    }\n}\n</code></pre><p>还记得<a href=\"https://time.geekbang.org/column/article/132443\">第16讲中</a>讲到的HTTP协议吗？我们从16讲得知，HTTP通过设置回车符、换行符作为HTTP报文协议的边界。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/5a/6d91c7c2a0224f5d4bad32a0f488765a.png?wh=942*324\" alt=\"\"><br>\nparse_http_request的思路就是寻找报文的边界，同时记录下当前解析工作所处的状态。根据解析工作的前后顺序，把报文解析的工作分成REQUEST_STATUS、REQUEST_HEADERS、REQUEST_BODY和REQUEST_DONE四个阶段，每个阶段解析的方法各有不同。</p><p>在解析状态行时，先通过定位CRLF回车换行符的位置来圈定状态行，进入状态行解析时，再次通过查找空格字符来作为分隔边界。</p><p>在解析头部设置时，也是先通过定位CRLF回车换行符的位置来圈定一组key-value对，再通过查找冒号字符来作为分隔边界。</p><p>最后，如果没有找到冒号字符，说明解析头部的工作完成。</p><p>parse_http_request函数完成了HTTP报文解析的四个阶段:</p><pre><code>int parse_http_request(struct buffer *input, struct http_request *httpRequest) {\n    int ok = 1;\n    while (httpRequest-&gt;current_state != REQUEST_DONE) {\n        if (httpRequest-&gt;current_state == REQUEST_STATUS) {\n            char *crlf = buffer_find_CRLF(input);\n            if (crlf) {\n                int request_line_size = process_status_line(input-&gt;data + input-&gt;readIndex, crlf, httpRequest);\n                if (request_line_size) {\n                    input-&gt;readIndex += request_line_size;  // request line size\n                    input-&gt;readIndex += 2;  //CRLF size\n                    httpRequest-&gt;current_state = REQUEST_HEADERS;\n                }\n            }\n        } else if (httpRequest-&gt;current_state == REQUEST_HEADERS) {\n            char *crlf = buffer_find_CRLF(input);\n            if (crlf) {\n                /**\n                 *    &lt;start&gt;-------&lt;colon&gt;:-------&lt;crlf&gt;\n                 */\n                char *start = input-&gt;data + input-&gt;readIndex;\n                int request_line_size = crlf - start;\n                char *colon = memmem(start, request_line_size, &quot;: &quot;, 2);\n                if (colon != NULL) {\n                    char *key = malloc(colon - start + 1);\n                    strncpy(key, start, colon - start);\n                    key[colon - start] = '\\0';\n                    char *value = malloc(crlf - colon - 2 + 1);\n                    strncpy(value, colon + 1, crlf - colon - 2);\n                    value[crlf - colon - 2] = '\\0';\n\n                    http_request_add_header(httpRequest, key, value);\n\n                    input-&gt;readIndex += request_line_size;  //request line size\n                    input-&gt;readIndex += 2;  //CRLF size\n                } else {\n                    //读到这里说明:没找到，就说明这个是最后一行\n                    input-&gt;readIndex += 2;  //CRLF size\n                    httpRequest-&gt;current_state = REQUEST_DONE;\n                }\n            }\n        }\n    }\n    return ok;\n}\n</code></pre><p>处理完了所有的request数据，接下来进行编码和发送的工作。为此，创建了一个http_response对象，并调用了应用程序提供的编码函数requestCallback，接下来，创建了一个buffer对象，函数http_response_encode_buffer用来将http_response中的数据，根据HTTP协议转换为对应的字节流。</p><p>可以看到，http_response_encode_buffer设置了如Content-Length等http_response头部，以及http_response的body部分数据。</p><pre><code>void http_response_encode_buffer(struct http_response *httpResponse, struct buffer *output) {\n    char buf[32];\n    snprintf(buf, sizeof buf, &quot;HTTP/1.1 %d &quot;, httpResponse-&gt;statusCode);\n    buffer_append_string(output, buf);\n    buffer_append_string(output, httpResponse-&gt;statusMessage);\n    buffer_append_string(output, &quot;\\r\\n&quot;);\n\n    if (httpResponse-&gt;keep_connected) {\n        buffer_append_string(output, &quot;Connection: close\\r\\n&quot;);\n    } else {\n        snprintf(buf, sizeof buf, &quot;Content-Length: %zd\\r\\n&quot;, strlen(httpResponse-&gt;body));\n        buffer_append_string(output, buf);\n        buffer_append_string(output, &quot;Connection: Keep-Alive\\r\\n&quot;);\n    }\n\n    if (httpResponse-&gt;response_headers != NULL &amp;&amp; httpResponse-&gt;response_headers_number &gt; 0) {\n        for (int i = 0; i &lt; httpResponse-&gt;response_headers_number; i++) {\n            buffer_append_string(output, httpResponse-&gt;response_headers[i].key);\n            buffer_append_string(output, &quot;: &quot;);\n            buffer_append_string(output, httpResponse-&gt;response_headers[i].value);\n            buffer_append_string(output, &quot;\\r\\n&quot;);\n        }\n    }\n\n    buffer_append_string(output, &quot;\\r\\n&quot;);\n    buffer_append_string(output, httpResponse-&gt;body);\n}\n</code></pre><h2>完整的HTTP服务器例子</h2><p>现在，编写一个HTTP服务器例子就变得非常简单。</p><p>在这个例子中，最主要的部分是onRequest callback函数，这里，onRequest方法已经在parse_http_request之后，可以根据不同的http_request的信息，进行计算和处理。例子程序里的逻辑非常简单，根据http request的URL path，返回了不同的http_response类型。比如，当请求为根目录时，返回的是200和HTML格式。</p><pre><code>#include &lt;lib/acceptor.h&gt;\n#include &lt;lib/http_server.h&gt;\n#include &quot;lib/common.h&quot;\n#include &quot;lib/event_loop.h&quot;\n\n//数据读到buffer之后的callback\nint onRequest(struct http_request *httpRequest, struct http_response *httpResponse) {\n    char *url = httpRequest-&gt;url;\n    char *question = memmem(url, strlen(url), &quot;?&quot;, 1);\n    char *path = NULL;\n    if (question != NULL) {\n        path = malloc(question - url);\n        strncpy(path, url, question - url);\n    } else {\n        path = malloc(strlen(url));\n        strncpy(path, url, strlen(url));\n    }\n\n    if (strcmp(path, &quot;/&quot;) == 0) {\n        httpResponse-&gt;statusCode = OK;\n        httpResponse-&gt;statusMessage = &quot;OK&quot;;\n        httpResponse-&gt;contentType = &quot;text/html&quot;;\n        httpResponse-&gt;body = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is network programming&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello, network programming&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;;\n    } else if (strcmp(path, &quot;/network&quot;) == 0) {\n        httpResponse-&gt;statusCode = OK;\n        httpResponse-&gt;statusMessage = &quot;OK&quot;;\n        httpResponse-&gt;contentType = &quot;text/plain&quot;;\n        httpResponse-&gt;body = &quot;hello, network programming&quot;;\n    } else {\n        httpResponse-&gt;statusCode = NotFound;\n        httpResponse-&gt;statusMessage = &quot;Not Found&quot;;\n        httpResponse-&gt;keep_connected = 1;\n    }\n\n    return 0;\n}\n\n\nint main(int c, char **v) {\n    //主线程event_loop\n    struct event_loop *eventLoop = event_loop_init();\n\n    //初始tcp_server，可以指定线程数目，如果线程是0，就是在这个线程里acceptor+i/o；如果是1，有一个I/O线程\n    //tcp_server自己带一个event_loop\n    struct http_server *httpServer = http_server_new(eventLoop, SERV_PORT, onRequest, 2);\n    http_server_start(httpServer);\n\n    // main thread for acceptor\n    event_loop_run(eventLoop);\n}\n</code></pre><p>运行这个程序之后，我们可以通过浏览器和curl命令来访问它。你可以同时开启多个浏览器和curl命令，这也证明了我们的程序是可以满足高并发需求的。</p><pre><code>$curl -v http://127.0.0.1:43211/\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to 127.0.0.1 (127.0.0.1) port 43211 (#0)\n&gt; GET / HTTP/1.1\n&gt; Host: 127.0.0.1:43211\n&gt; User-Agent: curl/7.54.0\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Content-Length: 116\n&lt; Connection: Keep-Alive\n&lt;\n* Connection #0 to host 127.0.0.1 left intact\n&lt;html&gt;&lt;head&gt;&lt;title&gt;This is network programming&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello, network programming&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;%\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/71/a5/719804f279f057a9a12b5904a39e06a5.png?wh=1106*330\" alt=\"\"></p><h2>总结</h2><p>这一讲我们主要讲述了整个编程框架的字节流处理能力，引入了buffer对象，并在此基础上通过增加HTTP的特性，包括http_server、http_request、http_response，完成了HTTP高性能服务器的编写。实例程序利用框架提供的能力，编写了一个简单的HTTP服务器程序。</p><h2>思考题</h2><p>和往常一样，给你布置两道思考题：</p><p>第一道， 你可以试着在HTTP服务器中增加MIME的处理能力，当用户请求/photo路径时，返回一张图片。</p><p>第二道，在我们的开发中，已经有很多面向对象的设计，你可以仔细研读代码，说说你对这部分的理解。</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":151829,"user_name":"chs","can_delete":false,"product_type":"c1","uid":1618711,"ip_address":"","ucode":"BE4B6A19317400","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/17/19ea024f.jpg","comment_is_top":false,"comment_ctime":1573797722,"is_pvip":false,"replies":[{"id":"58560","content":"这里你的理解有点问题，确实是两个buffer对象，一个input_buffer用来接收数据，这个input_buffer对象的写入是框架的handle_read函数来完成的，同时应用程序不端的将input_buffer里的数据取走，这样handle_read就可以不断的将接收缓冲区的数据写入input_buffer。<br><br>另一个buffer对象是output_buffer，应用程序不断的往这个缓冲区里写入待发送的数据，框架里的handle_write函数不端的将缓冲区的数据送到套接字发送缓冲区中。<br><br>缓冲区的设计中，肯定是有一个往缓冲区里写入的，另一个从缓冲区里读取数据，否则就没有缓冲区了，而是临时创建一个个的字节流对象。<br><br>使用缓冲区可以大大减少对内存的消耗。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573992548,"ip_address":"","comment_id":151829,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35933536090","product_id":100032701,"comment_content":"老师不明白缓冲区为什么要这样设计。用两块内存当做缓冲区，一个用于接收数据，另一个用于发送数据。这两种方式的优缺点能说一下吗？","like_count":8,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474627,"discussion_content":"这里你的理解有点问题，确实是两个buffer对象，一个input_buffer用来接收数据，这个input_buffer对象的写入是框架的handle_read函数来完成的，同时应用程序不端的将input_buffer里的数据取走，这样handle_read就可以不断的将接收缓冲区的数据写入input_buffer。\n\n另一个buffer对象是output_buffer，应用程序不断的往这个缓冲区里写入待发送的数据，框架里的handle_write函数不端的将缓冲区的数据送到套接字发送缓冲区中。\n\n缓冲区的设计中，肯定是有一个往缓冲区里写入的，另一个从缓冲区里读取数据，否则就没有缓冲区了，而是临时创建一个个的字节流对象。\n\n使用缓冲区可以大大减少对内存的消耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573992548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2776006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5SNsSoiaZw4Qzd2ctH4vtibHQordcLrYsX43oFZFloRTId0op617mcGlrvGx33U8ic2LTgdicoEFPvQ/132","nickname":"Frankey","note":"","ucode":"2F09BC2500C9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569520,"discussion_content":"我刚开始看图也有这样的疑惑。以为读写buffer缓冲区是一个。老师解惑了已经。再看图，比如readbuffer。先read到了buffer 需要writeindex。应用程序再从buffer读所以需要readIndex。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651467683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246808,"user_name":"keepgoing","can_delete":false,"product_type":"c1","uid":1471387,"ip_address":"","ucode":"A2FE0687FB17E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/73/9b/67a38926.jpg","comment_is_top":false,"comment_ctime":1599482954,"is_pvip":false,"replies":[{"id":"92039","content":"你读的很仔细，我看了一下，确实是有问题的。<br><br>最简单的方法是在channel里面保持一个event_loop对象指针，在构建channel时传过来，在channel.c的channel_write_event_enable方法里直接使用这个对象就可以了。<br><br>如果可以，欢迎你提一个patch过来，感谢~<br><br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601867085,"ip_address":"","comment_id":246808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10189417546","product_id":100032701,"comment_content":"老师，在tcp_connection.c文件tcp_connection_new方法创建channel时传入的data是tcp_connection类型，但在channel.c中channel_write_event_enable方法会直接从channel-&gt;data中取一个event_loop类型指针出来，阅读了整个tcp框架看起来没有找到直接传入event_loop类型的地方，这里是一个代码bug吗","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505232,"discussion_content":"你读的很仔细，我看了一下，确实是有问题的。\n\n最简单的方法是在channel里面保持一个event_loop对象指针，在构建channel时传过来，在channel.c的channel_write_event_enable方法里直接使用这个对象就可以了。\n\n如果可以，欢迎你提一个patch过来，感谢~\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601867085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334893,"user_name":"罗兆峰","can_delete":false,"product_type":"c1","uid":2413440,"ip_address":"","ucode":"05A7F73E7F6C58","user_header":"https://static001.geekbang.org/account/avatar/00/24/d3/80/dd0b26cb.jpg","comment_is_top":false,"comment_ctime":1645173261,"is_pvip":false,"replies":[{"id":"122807","content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1645882927,"ip_address":"","comment_id":334893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940140557","product_id":100032701,"comment_content":"第二题： 用户申请图片的时候可以申请一个GET 方法的request, GET URI version, URI 是图片相对服务器程序的地址，在服务器端程序使用io 函数read&#47;或者mmap 读取图片文件的内容， 并且写到connectedfd 中即可， http response 中的文件类型标记为image&#47;png。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553422,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645882927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301708,"user_name":"小家伙54","can_delete":false,"product_type":"c1","uid":2444674,"ip_address":"","ucode":"8DCEC9BFA2260B","user_header":"https://static001.geekbang.org/account/avatar/00/25/4d/82/2bb78658.jpg","comment_is_top":false,"comment_ctime":1625819023,"is_pvip":false,"replies":[{"id":"109695","content":"貌似是内存访问出错了，你可以看下dump文件，另外，我不能确定是和ubuntu20.4有关。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1626605915,"ip_address":"","comment_id":301708,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5920786319","product_id":100032701,"comment_content":"老师，ubuntu20.4运行lib程序会出现段错误，这是怎么回事啊？<br><br>nuc@nuc-NUC8i5BEHS:~&#47;learn&#47;GeekTime&#47;net_prog&#47;yolanda&#47;build&#47;bin$ .&#47;http_server01<br>[msg] set epoll as dispatcher, main thread<br>[msg] add channel fd == 5, main thread<br>[msg] set epoll as dispatcher, Thread-1<br>[msg] add channel fd == 9, Thread-1<br>[msg] event loop thread init and signal, Thread-1<br>[msg] event loop run, Thread-1<br>[msg] event loop thread started, Thread-1<br>[msg] set epoll as dispatcher, Thread-2<br>[msg] add channel fd == 12, Thread-2<br>[msg] event loop thread init and signal, Thread-2<br>[msg] event loop run, Thread-2<br>[msg] event loop thread started, Thread-2<br>[msg] add channel fd == 6, main thread<br>[msg] event loop run, main thread<br>[msg] epoll_wait wakeup, main thread<br>[msg] get message channel fd==6 for read, main thread<br>[msg] activate channel fd == 6, revents=2, main thread<br>[msg] new connection established, socket == 13<br>[msg] connection completed<br>[msg] epoll_wait wakeup, Thread-1<br>[msg] get message channel fd==9 for read, Thread-1<br>[msg] activate channel fd == 9, revents=2, Thread-1<br>[msg] wakeup, Thread-1<br>[msg] add channel fd == 13, Thread-1<br>[msg] epoll_wait wakeup, Thread-1<br>[msg] get message channel fd==13 for read, Thread-1<br>[msg] activate channel fd == 13, revents=2, Thread-1<br>[msg] get message from tcp connection connection-13<br>段错误 (核心已转储)","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523069,"discussion_content":"貌似是内存访问出错了，你可以看下dump文件，另外，我不能确定是和ubuntu20.4有关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626605915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010602,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/aa/ec09c4b4.jpg","nickname":"zssdhr","note":"","ucode":"2DFE1F017A46EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551340,"discussion_content":"您好，请问您解决这个问题了吗，我也遇到了这个问题，目前无法解决，求帮助。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644992307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2747650,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ed/02/0d4467e8.jpg","nickname":"glory","note":"","ucode":"4BA20B1BB4B20E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401099,"discussion_content":"您好，请问您解决这个问题了吗，我也遇到了这个问题，目前无法解决，求帮助。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633545402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261944,"user_name":"TinyCalf","can_delete":false,"product_type":"c1","uid":2137418,"ip_address":"","ucode":"0A3EF213359388","user_header":"https://static001.geekbang.org/account/avatar/00/20/9d/4a/09a5041e.jpg","comment_is_top":false,"comment_ctime":1605584859,"is_pvip":false,"replies":[{"id":"95508","content":"没有哦，这个其实是一个request_header的数组，直接用指针来表示了，这个数组的最大长度是INIT_REQUEST_HEADER_SIZE。因为http request header就是一个数组。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1606041853,"ip_address":"","comment_id":261944,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5900552155","product_id":100032701,"comment_content":"&#47;&#47;初始化一个request对象<br>struct http_request *http_request_new() {<br>    struct http_request *httpRequest = malloc(sizeof(struct http_request));<br>    httpRequest-&gt;method = NULL;<br>    httpRequest-&gt;current_state = REQUEST_STATUS;<br>    httpRequest-&gt;version = NULL;<br>    httpRequest-&gt;url = NULL;<br>    httpRequest-&gt;request_headers = malloc(sizeof(struct http_request) * INIT_REQUEST_HEADER_SIZE);<br>    httpRequest-&gt;request_headers_number = 0;<br>    return httpRequest;<br>}<br>这里的<br>httpRequest-&gt;request_headers = malloc(sizeof(struct http_request) * INIT_REQUEST_HEADER_SIZE);<br>是不是写错了 ；）","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509672,"discussion_content":"没有哦，这个其实是一个request_header的数组，直接用指针来表示了，这个数组的最大长度是INIT_REQUEST_HEADER_SIZE。因为http request header就是一个数组。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606041853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145966,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1572409157,"is_pvip":false,"replies":[{"id":"56651","content":"我也是ubuntu系统啊，有同学碰到同样的问题么？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572575070,"ip_address":"","comment_id":145966,"utype":1}],"discussion_count":6,"race_medal":0,"score":"5867376453","product_id":100032701,"comment_content":"在ubuntu系统上一运行老师的程序就会出现“interrupted by signal 11: SIGSEGV”错误","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472649,"discussion_content":"我也是ubuntu系统啊，有同学碰到同样的问题么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572575070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1321860,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2b/84/07f0c0d6.jpg","nickname":"supermouse","note":"","ucode":"88072D5F881827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186691,"discussion_content":"我用的是Ubuntu18.04，我也遇到这个问题了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582705895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021680,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/f0/a612a08e.jpg","nickname":"horcruxen","note":"","ucode":"B1929DDF7C63D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398065,"discussion_content":"wsl的ubuntu20.04有遇到，gdb看了下是 memmem 函数的返回值不正确，自己实现一个类似的memmem就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632728058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2620019,"avatar":"","nickname":"Geek_569f22","note":"","ucode":"E0A12103CCEC72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382438,"discussion_content":"wsl的ubuntu 20.04也遇到这样的问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625569720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2650394,"avatar":"","nickname":"Geek_e30e11","note":"","ucode":"DAB14EEE0D960A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377773,"discussion_content":"这不就是非法内存访问导致进程停止。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622823544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618711,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b3/17/19ea024f.jpg","nickname":"chs","note":"","ucode":"BE4B6A19317400","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50773,"discussion_content":"这样设计缓冲区是不是太复杂了？可不可以设计成两个缓冲区，一个接受，一个发送。这样比较简单。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573765333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144570,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571971033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866938329","product_id":100032701,"comment_content":"第二个问题 才是把我考到了 我感觉现在我对设计模式的理解并不深,但是我现在感受特深的一点就是单一职责原理 buffer类才套接字的处理 tcpconnect应用层面的处理,而且最近在工作中我也是尝试着画流程图 把每个功能进行细分 分到一个流程分支里面只处理一个逻辑","like_count":1},{"had_liked":false,"id":353559,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1659550681,"is_pvip":true,"replies":[{"id":"128564","content":"真棒！","user_name":"编辑回复","user_name_real":"编辑","uid":"1356014","ctime":1659602248,"ip_address":"","comment_id":353559,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1659550681","product_id":100032701,"comment_content":"好不容易看完了 打卡纪念一下","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582698,"discussion_content":"真棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659602248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341839,"user_name":"铲铲队","can_delete":false,"product_type":"c1","uid":1132569,"ip_address":"","ucode":"D16372C34B7AE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/19/14dd81d9.jpg","comment_is_top":false,"comment_ctime":1649855641,"is_pvip":false,"replies":[{"id":"125341","content":"这样你不好管理啊，统一部分数据你硬生生把它劈成两份，这两份数据你怎么读呢？","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1650713622,"ip_address":"","comment_id":341839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649855641","product_id":100032701,"comment_content":"make_room 函数就是起这个作用的，如果右边绿色的连续空间不足以容纳新的数据，而最左边灰色部分加上右边绿色部分一起可以容纳下新数据，就会触发这样的移动拷贝，最终红色部分占据了最左边，绿色部分占据了右边，右边绿色的部分成为一个连续的可写入空间，就可以容纳下新的数据<br>----》个人觉得好像不用移动拷贝，数据一部分拷贝满writeable_size,剩余部分拷贝到front_spare_size。即循环缓冲，这样效率更高吧<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566558,"discussion_content":"这样你不好管理啊，统一部分数据你硬生生把它劈成两份，这两份数据你怎么读呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650713622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337147,"user_name":"肥磊","can_delete":false,"product_type":"c1","uid":2678877,"ip_address":"","ucode":"C7FC552181B3F6","user_header":"https://static001.geekbang.org/account/avatar/00/28/e0/5d/c2867e36.jpg","comment_is_top":false,"comment_ctime":1646646768,"is_pvip":false,"replies":[{"id":"123519","content":"我怀疑我哪里有内存拷贝没考虑细致，只能慢慢troubleshooting了，欢迎你debug下，提MR帮我改进哈。&lt;抱拳&gt;","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1647090261,"ip_address":"","comment_id":337147,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1646646768","product_id":100032701,"comment_content":"老师，用wenbench测试出现段错误，是什么原因，<br>[msg] get message channel i==0, fd==7, Thread-1<br>[msg] activate channel fd == 7, revents=2, Thread-1<br>[msg] wakeup, Thread-1<br>[msg] add channel fd == 14, Thread-1<br>[msg] poll added channel fd==14, Thread-1<br>[msg] get message channel i==2, fd==14, Thread-1<br>[msg] activate channel fd == 14, revents=2, Thread-1<br>[msg] get message from tcp connection connection-14<br>[1]    2424 segmentation fault (core dumped)  .&#47;http_server01<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555876,"discussion_content":"我怀疑我哪里有内存拷贝没考虑细致，只能慢慢troubleshooting了，欢迎你debug下，提MR帮我改进哈。&lt;抱拳&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647090261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2842556,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/5f/bc/ddae8e11.jpg","nickname":"羁鸟","note":"","ucode":"6DAEABAF468C65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555242,"discussion_content":"是不是发生了段错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646820737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328112,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1640534612,"is_pvip":false,"replies":[{"id":"119878","content":"好像你悟了 ：）","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1641115837,"ip_address":"","comment_id":328112,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640534612","product_id":100032701,"comment_content":"哦 我知道了。front_spare_size是被读了一段之后产生的。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543386,"discussion_content":"好像你悟了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641115837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328111,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1640534444,"is_pvip":false,"replies":[{"id":"119877","content":"好像你悟了 ：）","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1641115833,"ip_address":"","comment_id":328111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640534444","product_id":100032701,"comment_content":"老师你好 为什么要设计front_spare_size？或者说为什么存在front_spare_size？readIndex和writeIndex一开始不是从0开始的吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543385,"discussion_content":"好像你悟了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641115833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325468,"user_name":"T------T","can_delete":false,"product_type":"c1","uid":2270365,"ip_address":"","ucode":"AC68D88893FAD7","user_header":"https://static001.geekbang.org/account/avatar/00/22/a4/9d/95900f70.jpg","comment_is_top":false,"comment_ctime":1638967850,"is_pvip":true,"replies":[{"id":"118236","content":"嗯，严格来说，所有和OS环境有关联的函数调用，都需要抽象屏蔽一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1639295541,"ip_address":"","comment_id":325468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638967850","product_id":100032701,"comment_content":"老师好，发现一个memmem函数运行错误的Bug.<br>环境：Ubuntu18.04 GCC 10.3 glic 2.33<br>问题：返回void* 的memmem函数未声明，系统默认调用了返回int的memmem函数。返回值由int强转成char*,导致后续处理出现错误。<br>解决办法：在#include&lt;string.h&gt; 之前添加#define _GNU_SOURCE解决<br>参考：https:&#47;&#47;insidelinuxdev.net&#47;article&#47;a09522.html","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538000,"discussion_content":"嗯，严格来说，所有和OS环境有关联的函数调用，都需要抽象屏蔽一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639295541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316623,"user_name":"日就月将","can_delete":false,"product_type":"c1","uid":2651148,"ip_address":"","ucode":"0F9BA55A2898FF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavXnEckAgo971o4l1CxP4L9wOV2eUGTyKBUicTib6gJyKV9iatM4GG1scz5Ym17GOzXWQEGzhE31tXUtQ/132","comment_is_top":false,"comment_ctime":1634456800,"is_pvip":false,"replies":[{"id":"115260","content":"这是因为http request headers的key-value对，128这个值足够用了。要知道，request headers本身是一个map，所以需要指定map的大小。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1635127274,"ip_address":"","comment_id":316623,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1634456800","product_id":100032701,"comment_content":"老师  http服务器request初始化的时候 http_header申请内存为什么还要乘128","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528440,"discussion_content":"这是因为http request headers的key-value对，128这个值足够用了。要知道，request headers本身是一个map，所以需要指定map的大小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635127274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2651148,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavXnEckAgo971o4l1CxP4L9wOV2eUGTyKBUicTib6gJyKV9iatM4GG1scz5Ym17GOzXWQEGzhE31tXUtQ/132","nickname":"日就月将","note":"","ucode":"0F9BA55A2898FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407840,"discussion_content":"好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635130552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300676,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1625301269,"is_pvip":false,"replies":[{"id":"109696","content":"这个看上去是poll参数传入出错了，什么系统? ","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1626605977,"ip_address":"","comment_id":300676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625301269","product_id":100032701,"comment_content":"[msg] set poll as dispatcher, main thread<br>[msg] add channel fd == 4, main thread<br>[msg] poll added channel fd==4, main thread<br>[msg] set poll as dispatcher, Thread-1<br>[msg] add channel fd == 7, Thread-1<br>[msg] poll added channel fd==7, Thread-1<br>[msg] event loop thread init and signal, Thread-1<br>[msg] event loop run, Thread-1<br>[msg] event loop thread started, Thread-1<br>poll failed : Invalid argument (22)<br>[msg] set poll as dispatcher, Thread-2<br>[msg] add channel fd == 9, Thread-2<br>[msg] poll added channel fd==9, Thread-2<br>[msg] event loop thread init and signal, Thread-2<br>[msg] event loop run, Thread-2<br>poll failed : Invalid argument (22)","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522791,"discussion_content":"这个看上去是poll参数传入出错了，什么系统? ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626605977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292946,"user_name":"study的程序员","can_delete":false,"product_type":"c1","uid":1023101,"ip_address":"","ucode":"E5AE9037D24429","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","comment_is_top":false,"comment_ctime":1621089923,"is_pvip":false,"replies":[{"id":"106720","content":"管理起来难度挺大","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1621778966,"ip_address":"","comment_id":292946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621089923","product_id":100032701,"comment_content":"缓冲区可以设置为环形的，避免移动","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520022,"discussion_content":"管理起来难度挺大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621778966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279002,"user_name":"JeQer","can_delete":false,"product_type":"c1","uid":2269563,"ip_address":"","ucode":"5F73FE56BDD34C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/zkbuproauw8Ov7jjIGYertOQMLGtIzo26bc1m0CsnAHhQ96bpbh4A4jmdE2qm6lccpnr7nnDG93W6JUyDrCjPg/132","comment_is_top":false,"comment_ctime":1613533967,"is_pvip":false,"replies":[{"id":"102010","content":"欢迎压测","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516966,"ip_address":"","comment_id":279002,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613533967","product_id":100032701,"comment_content":"没有经过压力测试的服务器怎么能称为高性能呢?","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515593,"discussion_content":"欢迎压测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276932,"user_name":"卡布猴纸","can_delete":false,"product_type":"c1","uid":2132724,"ip_address":"","ucode":"5B1ADE66ACB53C","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/f4/a4243808.jpg","comment_is_top":false,"comment_ctime":1612182306,"is_pvip":false,"replies":[{"id":"102012","content":"直接回收掉。<br><br>int handle_connection_closed(struct tcp_connection *tcpConnection) {<br>    struct event_loop *eventLoop = tcpConnection-&gt;eventLoop;<br>    struct channel *channel = tcpConnection-&gt;channel;<br>    event_loop_remove_channel_event(eventLoop, channel-&gt;fd, channel);<br>    if (tcpConnection-&gt;connectionClosedCallBack != NULL) {<br>        tcpConnection-&gt;connectionClosedCallBack(tcpConnection);<br>    }<br>}","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614517952,"ip_address":"","comment_id":276932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612182306","product_id":100032701,"comment_content":"老师你好，断连的tcpconnection和channel资源怎么管理的？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514874,"discussion_content":"直接回收掉。\n\nint handle_connection_closed(struct tcp_connection *tcpConnection) {\n    struct event_loop *eventLoop = tcpConnection-&amp;gt;eventLoop;\n    struct channel *channel = tcpConnection-&amp;gt;channel;\n    event_loop_remove_channel_event(eventLoop, channel-&amp;gt;fd, channel);\n    if (tcpConnection-&amp;gt;connectionClosedCallBack != NULL) {\n        tcpConnection-&amp;gt;connectionClosedCallBack(tcpConnection);\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614517952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243760,"user_name":"GalaxyCreater","can_delete":false,"product_type":"c1","uid":1508329,"ip_address":"","ucode":"C79E8A088D57CF","user_header":"https://static001.geekbang.org/account/avatar/00/17/03/e9/6358059c.jpg","comment_is_top":false,"comment_ctime":1598268556,"is_pvip":false,"replies":[{"id":"90119","content":"如果实际读缓冲区的数据量比较大，后面会通过buffer_append把additional_buffer里面的数据拷贝到buffer中，这样，其实就减少了系统调用的次数，通过空间换取了时间。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1598795554,"ip_address":"","comment_id":243760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598268556","product_id":100032701,"comment_content":"在buffer_socket_read函数用了char additional_buffer[INIT_BUFFER_SIZE]这个临时变量，那么预创建buffer来减少内存创建的开销就没效了，最少在读数据上的优化已经没效了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504386,"discussion_content":"如果实际读缓冲区的数据量比较大，后面会通过buffer_append把additional_buffer里面的数据拷贝到buffer中，这样，其实就减少了系统调用的次数，通过空间换取了时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598795554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233790,"user_name":"I believe you","can_delete":false,"product_type":"c1","uid":2005242,"ip_address":"","ucode":"3CD46075D616CF","user_header":"https://static001.geekbang.org/account/avatar/00/1e/98/fa/d87a1432.jpg","comment_is_top":false,"comment_ctime":1594451806,"is_pvip":false,"replies":[{"id":"86809","content":"webbench发送的请求是啥？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594907438,"ip_address":"","comment_id":233790,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1594451806","product_id":100032701,"comment_content":"老师，用你的程序在linux中使用webbench进行压力测试，每次请求都只有一个成功，其他全都失败，能请问下是什么原因吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501166,"discussion_content":"webbench发送的请求是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2651148,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavXnEckAgo971o4l1CxP4L9wOV2eUGTyKBUicTib6gJyKV9iatM4GG1scz5Ym17GOzXWQEGzhE31tXUtQ/132","nickname":"日就月将","note":"","ucode":"0F9BA55A2898FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405266,"discussion_content":"我也用webbench测了一下\n命令如下：\n webbench -c 10 -t 1 http://127.0.0.1:43211/\n返回结果如下：\nBenchmarking: GET http://127.0.0.1:43211/\n10 clients, running 1 sec.\n\nSpeed=57302936 pages/min, 180 bytes/sec.\nRequests: 1 susceed, 955048 failed.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634544057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233577,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d2/a9/d08cba2b.jpg","nickname":"胖佳儿-Clara","note":"","ucode":"225D9FE7B8BF18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298019,"discussion_content":"我也是这样的，但是你试一下只有5个客户端连接1s的话就是成功的，经过长时间测试，我感觉可能是因为，代码malloc出来的很多东西都没有free. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597146154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188709,"user_name":"Geek_e5533e","can_delete":false,"product_type":"c1","uid":1619048,"ip_address":"","ucode":"A448C49036181E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQWW7Vp2GGMFwPwZdIG0Xbr4yv3lsToeCQ8Zuic9ibJibcsJXjkic5mH1ml2KA1ydyaLVZwmAt3iaic8Kg/132","comment_is_top":false,"comment_ctime":1584406867,"is_pvip":false,"replies":[{"id":"73537","content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584863662,"ip_address":"","comment_id":188709,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584406867","product_id":100032701,"comment_content":"请问下课件示例代码的github地址？想好好学习下。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487495,"discussion_content":"https://github.com/froghui/yolanda","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584863662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368735,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/9f/e5f5e138.jpg","nickname":"lin","note":"","ucode":"380FFA0C7790DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310496,"discussion_content":"老师代码有点问题，http_server使用的memmem函数似乎过时了，并没有正确工作，倒置后面strncpy的时候栈溢出了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601879640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168637,"user_name":"不诉离殇","can_delete":false,"product_type":"c1","uid":1239350,"ip_address":"","ucode":"4F7BB1220ECED7","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/36/f62471c5.jpg","comment_is_top":false,"comment_ctime":1578128911,"is_pvip":false,"replies":[{"id":"65472","content":"在什么情况下数据会收不全呢？一个http连接请求的head并没有多大，head部分的报文肯定是需要预先解析处理啊，才能往下处理。这里parse_http_request严格来说是parse_http_request_header","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1578212641,"ip_address":"","comment_id":168637,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578128911","product_id":100032701,"comment_content":"老师好，parse_http_request函数没太看懂，while循环中如果数据没收全，这个函数不会返回，那么底层的handle_read函数也不会返回?那就没有机会再将数据写到input_buffer了呀？这样不是就卡住了？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480276,"discussion_content":"在什么情况下数据会收不全呢？一个http连接请求的head并没有多大，head部分的报文肯定是需要预先解析处理啊，才能往下处理。这里parse_http_request严格来说是parse_http_request_header","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578212641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/36/f62471c5.jpg","nickname":"不诉离殇","note":"","ucode":"4F7BB1220ECED7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120450,"discussion_content":"老师好，我只是觉得既然前面说了TCP是无边界的字节流，那理论上是有这种收不全的可能。那么有没有必要业务层（ 这里就是http服务这一层）自己再维护一个缓冲区，来存储没有收完的数据，直到收完才调用最外层的数据onRequest函数。外层看到的肯定是完整的数据包。只是这么一来性能会不会有影响？这个其实就是一个经验抉择？实际生产环境写这种框架的机会不多，望老师指点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578276472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153177,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574174881,"is_pvip":false,"replies":[{"id":"59332","content":"大概是指哪个部分？因为客户端还是比较简单的，所以没有做这个。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574498480,"ip_address":"","comment_id":153177,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574174881","product_id":100032701,"comment_content":"希望老师加一个客户端请求到服务器响应的全过程流程图包括tcp连接和应用程序处理的流程😁","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475072,"discussion_content":"大概是指哪个部分？因为客户端还是比较简单的，所以没有做这个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147084,"user_name":"J.M.Liu","can_delete":false,"product_type":"c1","uid":1200037,"ip_address":"","ucode":"B2CB84B8E923A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","comment_is_top":false,"comment_ctime":1572790167,"is_pvip":false,"replies":[{"id":"57474","content":"是有点疯狂。（哭脸）","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573281333,"ip_address":"","comment_id":147084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572790167","product_id":100032701,"comment_content":"c语言写bbs网站的年代，真的是太疯狂了，一个一个字符的print（哭脸）","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473136,"discussion_content":"是有点疯狂。（哭脸）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145236,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1572234093,"is_pvip":false,"replies":[{"id":"56016","content":"是的，面向对象写起来简洁许多","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572238382,"ip_address":"","comment_id":145236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572234093","product_id":100032701,"comment_content":"嗯，对于第二个问题，因为我是从C++语言开始进入编程的，老师的C代码确实很多都是面向对象的。<br><br>很多模块，比如tcp_connection，对应的头文件中声明的函数，第一个参数都是tcp_connection指针，这就相当于this指针。而相应的以&quot;_new&quot;结尾的函数就相当于C++中的构造函数。<br>而结构体里的函数指针，我把它理解为了实现了继承C++中的虚拟基类或类似于java中实现了一个接口。<br><br>画UML图的时候，完全可以用C++的术语进行。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472305,"discussion_content":"是的，面向对象写起来简洁许多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572238382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144790,"user_name":"MoonGod","can_delete":false,"product_type":"c1","uid":1254337,"ip_address":"","ucode":"CB39976963F37A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/c1/54ef6885.jpg","comment_is_top":false,"comment_ctime":1572058679,"is_pvip":false,"replies":[{"id":"55853","content":"非常好的问题，我发到统一答疑部分了。感谢~","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572076482,"ip_address":"","comment_id":144790,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572058679","product_id":100032701,"comment_content":"如果发现当前 channel 没有注册 WRITE 事件，并且当前 tcp_connection 对应的发送缓冲无数据需要发送，就直接调用 write 函数将数据发送出去。<br>老师好，这里没有理解，为啥不能做成无论有没有write事件都统一往发送缓冲区写呢，之后如果没有write事件，就再注册一个就好了不是？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472112,"discussion_content":"非常好的问题，我发到统一答疑部分了。感谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572076482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144738,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1572018809,"is_pvip":false,"replies":[{"id":"55805","content":"很好奇学不动的意思是啥","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572056889,"ip_address":"","comment_id":144738,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572018809","product_id":100032701,"comment_content":"实在学不动了，我想抄袭老师的创意自己写一个框架，然后慢慢该吧<br>(◦`~´◦)","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472092,"discussion_content":"很好奇学不动的意思是啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572056889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622329,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","nickname":"Steiner","note":"","ucode":"232C1C75207A1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39979,"discussion_content":"慢慢改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572049910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144731,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1572015111,"is_pvip":false,"replies":[{"id":"55790","content":"您好，文章已进行改正，谢谢反馈。","user_name":"编辑回复","user_name_real":"何昌梅","uid":"1165037","ctime":1572018356,"ip_address":"","comment_id":144731,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1572015111","product_id":100032701,"comment_content":"老师的的c代码看上去是一种享受。<br>逻辑很清晰，很佩服函数命名。<br><br>以前我们缓冲区是用的循环，避免频繁的挪动数据，不过要处理好溢出的情况。<br><br>文中好像拼错了单词。<br>“只需要看到 http_request 和 http_responsde 结构。”<br>“创建了一个 buffe 对象”","like_count":0,"discussions":[{"author":{"id":1165037,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c6/ed/89a2dc13.jpg","nickname":"丢了个丢丢丢","note":"","ucode":"BDD7E97E0E5E96","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472089,"discussion_content":"您好，文章已进行改正，谢谢反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572018356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]}]}