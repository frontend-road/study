{"id":614507,"title":"13｜动态表单组件：怎么优雅地动态渲染表单？","content":"<p>你好，我是杨文坚。</p><p>上节课，我们学习Vue.js 3.x自研组件库的“受控表单组件”，开发了“表单字段组件”来辅助提高开发表单的效率。但是，在实际的企业级项目中，业务需求总是“紧急”且“多变”的，表单类的开发需求，不能只靠一个“受控表单组件”的能力来提效。我们看个常见例子。</p><p>假设你接到一个业务需求，要开发一个“用户信息设置”的页面，让注册用户可以编辑自己的个人信息，常规开发步骤，我们一般是用表单组件来封装这个用户信息配置的功能。</p><p>但接下来业务需求变了，业务方要做用户类型的区分，不同类型的用户显示“不同个人信息配置”，比如这里就有“普通用户”、“多种等级会员用户”的信息配置，后续可能会新增其他维度类型的用户信息配置。这时候，你还能用常规的表单开发思路，来开发这个需求吗？</p><p>我们简单分析一下，如果按常规开发思路，每新增一个用户类型，就要重新开发一个用户信息表单来支持业务需求，工作量就是无底洞。所以问题就来了，<strong>是否有一种表单方案，能够通过简单的自定义配置，快速生成对应的表单功能呢？</strong></p><p>答案是有的，就是“动态表单组件”。这节课，我们就来学习如何基于Vue.js 3.x，开发自研组件库里的“动态表单组件”。</p><h2>什么是动态表单？</h2><!-- [[[read_end]]] --><p>“动态表单”，顾名思义，就是能“动态”生产想要功能的“表单”。</p><p>在前端技术视角里，动态表单概念在十几年的jQuery时代就有了，可以用“简单配置”方式来“动态生成表单”，通过一个JSON的数据形式来描述表单格式，再通过JavaScript代码，根据数据描述渲染出表单。</p><p>可以看出，<strong>动态表单，核心就是通过自定义数据来动态生成自定义表单</strong>。也就是说，面对实际的开发需求时，每当新增一个表单类型的需求，我们只需要配置一下“数据”就能生成表单，不需要从零开始来开发。</p><p>这类技术方案在前端开发中经常用到，例如，开发后台页面场景时，不同类型用户身份，信息录入需要渲染多种表单；搭建页面场景时，动态生成调查问卷页面，让用户可以配置不同数据来生成不同问题内容的表单，这个过程无需投入额外的前端开发工作，用户可以自助配置数据生成问卷的表单。</p><p>那么，“动态表单”到底怎么实现呢？一步到位肯定不怎么现实，所以我们先从一个最简单的动态表单开始，先来看如何用Vue.js3.x实现一个最简单的动态表单。</p><h2>如何用Vue.js3.x实现最简单的动态表单？</h2><p>在动手实现之前，我们先分析一下，表单哪些内容可以统一进行动态管理。</p><p>上节课我们讲过，表单核心是由一个个表单字段组成，每个表单字段背后都是一个个表单数据组件。那么，动态表单，其实就是按照动态数据的内容，生成对应“表单数据组件”的各种“组合“的“结果”。<strong>实现一个最简单的表单组件，其实就是根据自定义数据，来自定义生成表单数据组件的各种组合。</strong></p><p>实现步骤现在就很清晰了：</p><ul>\n<li>第一步，列举要用到的表单数据组件，例如 input，radio等；</li>\n<li>第二步，定义描述动态表单的数据格式；</li>\n<li>第三步，根据数据格式来渲染动态表单。</li>\n</ul><p>来看代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;form class=\"dynamic-form\" @submit=\"onSubmit\"&gt;\n    &lt;div class=\"dynamic-form-title\"&gt;{{ schema.title }}&lt;/div&gt;\n    &lt;div\n      class=\"dynamic-form-field\"\n      v-for=\"(field, index) in schema.fieldList\"\n      v-bind:key=\"index\"\n    &gt;\n      &lt;div class=\"dynamic-form-label\"&gt;{{ field.label }}：&lt;/div&gt;\n      &lt;div v-if=\"field.fieldType === 'input'\" class=\"dynamic-form-item\"&gt;\n        &lt;input v-model=\"model[field.name]\" /&gt;\n      &lt;/div&gt;\n      &lt;div v-else-if=\"field.fieldType === 'radio'\" class=\"dynamic-form-item\"&gt;\n        &lt;span\n          v-for=\"(option, index) in field.options\"\n          v-bind:key=\"index\"\n          class=\"dynamic-form-option\"\n        &gt;\n          &lt;input\n            type=\"radio\"\n            :id=\"option.value\"\n            :name=\"field.name\"\n            :value=\"option.value\"\n            :checked=\"model[field.name] === option.value\"\n            @change=\"\n              onRadioChange({ fieldName: field.name, value: option.value })\n            \"\n          /&gt;\n          &lt;label :for=\"option.value\"&gt;{{ option.name }}&lt;/label&gt;\n        &lt;/span&gt;\n      &lt;/div&gt;\n      &lt;div v-else class=\"dynamic-form-item\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;button class=\"dynamic-form-btn\" type=\"submit\"&gt;提交&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { reactive, toRaw } from 'vue';\n\nconst schema = {\n  title: '普通用户信息',\n  filedList: [\n    {\n      label: '用户名称',\n      name: 'usename',\n      fieldType: 'input'\n    },\n    {\n      label: '手机号码',\n      name: 'phone',\n      fieldType: 'input'\n    },\n    {\n      label: '收货地址',\n      name: 'address',\n      fieldType: 'input'\n    }\n  ]\n};\n\nconst model = reactive&lt;{ [key: string]: unknown }&gt;({});\nschema.fieldList.forEach((field) =&gt; {\n  model[field.name] = '';\n});\n\nconst onRadioChange = (data: { fieldName: string; value: string }) =&gt; {\n  model[data.fieldName] = data.value;\n};\n\nconst onSubmit = (e: Event) =&gt; {\n  e.preventDefault();\n  window.alert(JSON.stringify(data));\n};\n&lt;/script&gt;\n&lt;style&gt; /* 样式代码省略，请看代码案例 */ &lt;/style&gt;\n</code></pre><p>我先定义了描述动态表单的数据格式 schema，然后，把动态表单的描述数据，按照数组形式进行管理，根据描述数据在数组里的排列形式，按需渲染出表单内容。</p><p>这里，schema定义的动态表单数据，是一个“普通用户”的数据，表单的动态渲染结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/3e/79a7b31f77d1d02747fd28a43156203e.png?wh=1366x822\" alt=\"图片\"></p><p>这个简单的动态表单，内部支持了两种表单数据组件，input输入框和radio单项选择，现在我们把schema修改一下，改成“会员用户信息”的数据，代码如下：</p><pre><code class=\"language-typescript\">const schema = {\n  title: '会员用户信息',\n  fieldList: [\n    {\n      label: '用户名称',\n      name: 'usename',\n      fieldType: 'input'\n    },\n    {\n      label: '手机号码',\n      name: 'phone',\n      fieldType: 'input'\n    },\n    {\n      label: '优惠服务',\n      name: 'service',\n      fieldType: 'radio',\n      options: [\n        { name: '免运费', value: 'service001' },\n        { name: '9折优惠', value: 'service002' },\n        { name: '满80减10', value: 'service003' }\n      ]\n    },\n    {\n      label: '收货地址',\n      name: 'address',\n      fieldType: 'input'\n    }\n  ]\n}\n</code></pre><p>这里的“会员用户”表单描述数据，比“普通用户”的多了一个“优惠服务”的表单描述字段，动态表单渲染效果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/3c/72/3c36761e8f8c4526ebe1b568f236d172.png?wh=1456x864\" alt=\"图片\"></p><p>这两个表单功能，其实出于同一个动态表单的代码，我们只是将表单描述数据schema做对应差异修改，就能直接渲染出对应不同的表单功能。</p><p>通过，这样一个简单的Vue.js 3.x动态表单实现，我们可以总结出<strong>动态表单实现的三个核心要素</strong>：</p><ul>\n<li>第一点，梳理要用到的表单数据组件；</li>\n<li>第二点，根据表单数据组件种类制定数据格式；</li>\n<li>第三点，根据数据格式的内容，来渲染表单数据组件的自定义组合，这个自定义组合就是所需要的表单结果。</li>\n</ul><p>我们用Vue.js实现了一个简单的动态表单，实际业务需要的动态表单功能可不只这些，我们还要考虑表单校验逻辑、扩展新的表单数据组件等等，这需要一个更完善的动态表单组件。</p><h2>如何设计和实现完善的动态表单组件？</h2><p>在具体实现之前，我们先设计动态表单组件的规范。这个规范除了能满足现有的功能需要，还需要有前瞻性的设计，保证能扩展“新的表单动态组件”，不能局限于一开始约定的表单数据组件。</p><p>按照要求，再结合实现最简单的动态表单的核心要素，我重新梳理了四点实现要素：</p><ul>\n<li>定义表单数据组件的统一API；</li>\n<li>定义默认支持的数据表单组件；</li>\n<li>支持自定义表单字段的校验规则；</li>\n<li>支持根据统一API扩展自定义表单数据组件。</li>\n</ul><p>我们来具体分析一下每一点要素。</p><p>第一点，定义表单数据组件的统一API。由于动态表单核心是由各种“表单数据组件”的组成，但是，每个表单数据组件，都有各自原生的API使用方式，这些API的差异会降低兼容性。<strong>所以，我们需要约定好统一的表单数据组件的API，对不同表单数据组件做API统一封装。</strong></p><p>第二点，定义默认支持的数据表单组件。常用的表单数据组件要在动态表单内默认支持，所以我们要用统一的API进行二次封装，并内置到动态表单组件内。这里表单数据组件的API统一代码如下所示：</p><pre><code class=\"language-typescript\">const props = defineProps&lt;{\n  // 传入的数据值\n  value: string | any;\n  // 组件内部选项参数，例如多选框，单选框，下拉框的选项数据\n  options: Array&lt;{ name: string; value: string }&gt;;\n}&gt;();\n\nconst emits = defineEmits&lt;{\n  // 监听组件内部数据变化事件\n  (e: 'change', value: string): void;\n}&gt;();\n</code></pre><p>第三点，支持自定义表单字段和校验规则。上节课我们说了，抽象表单里中最重要的复用逻辑就是“表单校验”，当时我演示了如何封装一个“表单字段组件”作为“表单数据组件”的外壳，统一管理字段校验规则。所以，<strong>自定义表单校验规则，对动态表单来讲也很重要，我们可以把上节课的表单字段组件，沿用到我们的动态表单组件里，统一管理表单校验。</strong></p><p>第四点，支持根据统一API扩展自定义表单数据组件。</p><p>既然要实现动态表单组件，我们就不能只支持默认表单数据组件的表单生成。毕竟，如果不能扩展新的表单数据组件，以后有新的表单需求，要用到自定义的表单数据组件，动态表单组件就不能快速配置生成表单了，需要我们从零开发一个支持自定义数据组件的表单。这就失去动态表单原本提效的意义了。</p><p>所以，<strong>我们这里需要支持可扩展自定义表单数据组件，但有个前提，就是自定义表单数据组件要按照第一点要素的内容，封装统一的API</strong>。</p><p>好了，那么我们现在来根据四点要素，实现动态表单组件，看代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div :class=\"{ [baseClassName]: true }\"&gt;\n    &lt;Form&gt;\n      &lt;Form\n        ref=\"formRef\"\n        :model=\"internalModel\"\n        @finish=\"onFinish\"\n        @finishFail=\"onFinishFail\"\n      &gt;\n        &lt;FormItem\n          v-for=\"(field, index) in fieldList\"\n          :key=\"index\"\n          :label=\"field.label\"\n          :name=\"field.name\"\n          :rule=\"field.rule\"\n        &gt;\n          &lt;component\n            :is=\"registerComponentMap[field.fieldType]\"\n            :value=\"internalModel[field.name]\"\n            :options=\"field.options || []\"\n            @change=\"(value: unknown) =&gt; { onFieldChange({ name: field.name, value }) }\"\n          /&gt;\n        &lt;/FormItem&gt;\n        &lt;Row v-if=\"$slots.default\"&gt;\n          &lt;slot&gt;&lt;/slot&gt;\n        &lt;/Row&gt;\n      &lt;/Form&gt;\n    &lt;/Form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { reactive } from 'vue';\nimport { prefixName } from '../theme';\nimport Row from '../row';\nimport Form from '../form';\nimport Input from '../input';\nimport RadioList from '../radio-list';\nimport type { Component } from 'vue';\nimport type { DynamicFormField } from './common';\n\n// 内置支持的表单数据组件\nconst registerComponentMap: { [key: string]: Component } = {\n  Input: Input,\n  RadioList: RadioList\n};\n\nconst props = withDefaults(\n  defineProps&lt;{\n    fieldList?: DynamicFormField[];\n    model?: { [name: string]: unknown };\n  }&gt;(),\n  {}\n);\n\nconst internalModel = reactive&lt;{ [name: string]: unknown }&gt;(props?.model || {});\nconst FormItem = Form.FormItem;\nconst baseClassName = `${prefixName}-dynamic-form`;\n\nconst onFieldChange = (event: { name: string; value: string | unknown }) =&gt; {\n  internalModel[event.name] = event.value;\n};\n\nconst emits = defineEmits&lt;{\n  (event: 'finish', e: unknown): void;\n  (event: 'finishFail', e: unknown): void;\n}&gt;();\n\nconst onFinish = (e: unknown) =&gt; {\n  emits('finish', e);\n};\n\nconst onFinishFail = (e: unknown) =&gt; {\n  emits('finishFail', e);\n};\n\n&lt;/script&gt;\n</code></pre><p>上述代码中，我设计了动态表单的数据格式，通过数组一一对应来描述表单字段内容的。每个表单字段的数据描述有：表单的标签名称、字段名称、字段类型、字段使用数据组件的类型和校验规则。</p><p>我们根据实现的动态表单组件，来生成一个可校验的“普通用户”信息编辑表单，代码如下所示：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"example\"&gt;\n    &lt;DynamicForm\n      :model=\"model\"\n      :fieldList=\"fieldList\"\n      @finish=\"onFinish\"\n      @finishFail=\"onFinishFail\"\n    &gt;\n      &lt;Button type=\"primary\"&gt;提交信息&lt;/Button&gt;\n    &lt;/DynamicForm&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { Button, DynamicForm } from '../src';\nimport type { DynamicFormField } from '../src';\n\nconst model = {\n  username: 'Hello',\n  phone: '123456',\n  address: '',\n  service: ''\n};\n\nconst fieldList: DynamicFormField[] = [\n  {\n    label: '用户名称',\n    name: 'username',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = /^[a-z]{1,}$/gi.test(`${val || ''}`) !== true;\n        return {\n          hasError,\n          message: hasError ? '仅支持a-z的大小写字母' : ''\n        };\n      }\n    }\n  },\n  {\n    label: '手机号码',\n    name: 'phone',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = /^[0-9]{1,}$/gi.test(`${val || ''}`) !== true;\n        return {\n          hasError,\n          message: hasError ? '仅支持0-9的数字' : ''\n        };\n      }\n    }\n  },\n  {\n    label: '快递地址',\n    name: 'address',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = `${val}`?.length === 0;\n        return {\n          hasError,\n          message: hasError ? '地址不能为空' : ''\n        };\n      }\n    }\n  }\n];\n\nconst onFinish = (e: any) =&gt; {\n  // eslint-disable-next-line no-console\n  console.log('success =', e);\n};\n\nconst onFinishFail = (e: any) =&gt; {\n  // eslint-disable-next-line no-console\n  console.log('fail =', e);\n};\n&lt;/script&gt;\n\n&lt;style&gt;\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n}\n.example {\n  width: 400px;\n  padding: 16px;\n  margin: 20px auto;\n  box-sizing: border-box;\n  border-radius: 4px;\n  border: 1px solid #999999;\n  font-size: 14px;\n}\n\n.btn {\n  height: 32px;\n  padding: 0 20px;\n  min-width: 100px;\n}\n&lt;/style&gt;\n\n</code></pre><p>代码在浏览器里的演示效果如图：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/b7/3749yy0c6e4582341853b5b9806e14b7.gif?wh=600x335\" alt=\"图片\"></p><p>我再改变一下自定义数据，生成一个可校验的“会员用户”信息编辑表单，代码如下所示：</p><pre><code class=\"language-typescript\">\nconst fieldList: DynamicFormField[] = [\n  {\n    label: '用户名称',\n    name: 'username',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = /^[a-z]{1,}$/gi.test(`${val || ''}`) !== true;\n        return {\n          hasError,\n          message: hasError ? '仅支持a-z的大小写字母' : ''\n        };\n      }\n    }\n  },\n  {\n    label: '手机号码',\n    name: 'phone',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = /^[0-9]{1,}$/gi.test(`${val || ''}`) !== true;\n        return {\n          hasError,\n          message: hasError ? '仅支持0-9的数字' : ''\n        };\n      }\n    }\n  },\n  {\n    label: '快递地址',\n    name: 'address',\n    fieldType: 'Input',\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = `${val}`?.length === 0;\n        return {\n          hasError,\n          message: hasError ? '地址不能为空' : ''\n        };\n      }\n    }\n  },\n  {\n    label: '会员服务',\n    name: 'service',\n    fieldType: 'RadioList',\n    options: [\n      { name: '免运费', value: 'service001' },\n      { name: '9折优惠', value: 'service002' },\n      { name: '满80减10', value: 'service003' }\n    ],\n    rule: {\n      validator: (val: unknown) =&gt; {\n        const hasError = `${val}`?.length === 0;\n        return {\n          hasError,\n          message: hasError ? '优惠不能为空' : ''\n        };\n      }\n    }\n  }\n]; \n\n</code></pre><p>上述使用代码的动态表单渲染如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/33/d5f4c85776fc2b6793b01e3f1f59f533.gif?wh=600x356\" alt=\"图片\"></p><p>这两个不同的表单内容，是通过输入不同的表单配置得来的。</p><p>第一个表单是在动态表单组件里输入“普通用户”的表单配置数据（用户名称、手机号码和快递地址），渲染了普通用户的表单，也实现了对应表单的校验功能。</p><p>第二个表单，输入“会员用户”的表单配置数据（用户名称、手机号码、快递地址和会员服务），其中“会员服务”的配置数据是一个“单选表单数据组件”，附带了可选择的数据，渲染了一个与输入框不一样的表单数据组件。同时，所有表单的字段也配置了校验数据，自动地实现动态校验功能。</p><p>好，到这里，我们已经通过动态数据，大致实现了动态渲染表单和动态校验的功能。</p><p>但是，在完善动态表单的要素中，我们说的最后一点就是，要支持自定义表单数据组件的扩展，那么要怎么基于现在完善的动态表单组件，实现可扩展的动态表单组件呢？</p><h2>如何实现可扩展的动态表单</h2><p>从前面完善的表单组件可以看出，默认支持的表单数据组件，都是内部定义好的，存放在内部的一个对象里，这就意味着，要扩展其他自定义表单数据组件，把相应的组件配置进去就可以了。</p><p>这时候，我们需要一个“配置”的过程，一般称为“注册”，首先就是自定义表单数据组件的注册。而表单数据组件需要统一使用的API，也就是说，我们还需要先封装好自定义组件，再把自定义表单数据组件，给注册到统一的动态表单里。</p><p>实现的代码如下：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div :class=\"{ [baseClassName]: true }\"&gt;\n    &lt;Form&gt;\n      &lt;Form\n        ref=\"formRef\"\n        :model=\"internalModel\"\n        @finish=\"onFinish\"\n        @finishFail=\"onFinishFail\"\n      &gt;\n        &lt;FormItem\n          v-for=\"(field, index) in fieldList\"\n          :key=\"index\"\n          :label=\"field.label\"\n          :name=\"field.name\"\n          :rule=\"field.rule\"\n        &gt;\n          &lt;component\n            :is=\"registerComponentMap[field.fieldType]\"\n            :value=\"internalModel[field.name]\"\n            :options=\"field.options || []\"\n            @change=\"(value: unknown) =&gt; { onFieldChange({ name: field.name, value }) }\"\n          /&gt;\n        &lt;/FormItem&gt;\n        &lt;Row v-if=\"$slots.default\"&gt;\n          &lt;slot&gt;&lt;/slot&gt;\n        &lt;/Row&gt;\n      &lt;/Form&gt;\n    &lt;/Form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt; \n\n// 中间省略上述演示过的代码 ....\n\n// 内置支持的表单数据组件\nconst registerComponentMap: { [key: string]: Component } = {\n  Input: Input,\n  RadioList: RadioList\n};\n\n// 中间省略上述演示过的代码 ....\n\n// 注册自定义表单数据组件方法\nconst registerFieldComponent = (name: string, component: Component) =&gt; {\n  registerComponentMap[name] = component;\n};\n\n// 暴露可以注册自定义表单数据组件\ndefineExpose&lt;{\n  registerFieldComponent: typeof registerFieldComponent;\n}&gt;({\n  registerFieldComponent\n});\n&lt;/script&gt;\n\n</code></pre><p>代码中，我给动态表单组件添加了一个“外用方法”registerFieldComponent，把子自定义表单组件，注册到动态表单里。你可以从代码的注释中看出，registerFieldComponent 注册组件方法和内置组件缓存变量registerComponentMap的关系。</p><p>通过registerFieldComponent方法，我们可以把自定义组件缓存到registerComponentMap变量里，等待后续渲染表单时候使用。也就是说，外部组件，可以直接通过这个方法来操控动态表单，将自定义组件注入到表单中。后续，只要动态的配置数据里用到了这个自定义组件，就会自动渲染出来。</p><p>至此，我们就从API设计到组件扩展层面，实现了一个完整的动态表单组件。</p><h2>总结</h2><p>通过这节课的学习，相信你应该已经理解了什么是动态表单，以及如何基于Vue.js 3.x开发自研组件库里的动态表单组件。我们总结几个重要的概念和技术实现。</p><p>动态表单的要素：</p><ul>\n<li>能通过自定义数据来配置生成表单渲染；</li>\n<li>能支持扩展其他表单数据组件来扩展表单能力；</li>\n</ul><p>“动态表单组件”的核心技术实现就是，通过数据来动态渲染所需的表单数据组件，以及可以自定义其他数据组件。具体的实现步骤：</p><ul>\n<li>第一步，需要定义好统一的表单数据组件的API，封装好默认支持的表单数据组件；</li>\n<li>第二步，定义动态表单的配置数据格式，并且做好可以扩展的数据格式设计；</li>\n<li>第三步，根据配置数据来渲染描述的表单数据组件，以及用表单字段组件进行统一管理；</li>\n<li>第四步，开发自定义表单数据组件的的注册能力；</li>\n</ul><h2>思考题</h2><p>动态表单能实现多种表单数据组件的渲染，那么不同表单数据组件能否做联动操作的功能配置？</p><p>欢迎积极参与讨论，如果有疑问，也欢迎在留言区留言，我会尽快回复。下一讲见。</p><h3><a href=\"https://github.com/FE-star/vue3-course/tree/main/chapter/13\">完整的代码在这里</a></h3>","neighbors":{"left":{"article_title":"12｜受控表单组件：如何开发受控的表单组件？","id":614501},"right":{"article_title":"14｜代码单元测试：如何轻松地保证自己的代码质量？","id":614518}},"comments":[{"had_liked":false,"id":368737,"user_name":"Akili","can_delete":false,"product_type":"c1","uid":1388437,"ip_address":"云南","ucode":"286D58069F7D86","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/95/db8dedde.jpg","comment_is_top":false,"comment_ctime":1676627063,"is_pvip":false,"replies":[{"id":134951,"content":"您好，动态表单的联动，其实可以抽象理解成是 “数据”和“交互事件”的联动，做好“数据监听”和“事件管理”的控制。  当表单某个“数据发生”了变化，就检查是否要触发“事件”来管理联动。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678523707,"ip_address":"浙江","comment_id":368737,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"动态表单 联动怎么做呢","like_count":2,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608567,"discussion_content":"您好，动态表单的联动，其实可以抽象理解成是 “数据”和“交互事件”的联动，做好“数据监听”和“事件管理”的控制。  当表单某个“数据发生”了变化，就检查是否要触发“事件”来管理联动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678523708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394143,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1725944276,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100311101,"comment_content":"学习打卡","like_count":0}]}