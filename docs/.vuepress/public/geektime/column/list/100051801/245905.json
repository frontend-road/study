{"id":245905,"title":"17 | 脚本语言：搭建高性能的混合系统","content":"<p>你好，我是Chrono。</p><p>经过了前面这么多节课的学习，相信你已经认识到了C++的高效、灵活和强大。使用现代特性，再加上标准库和第三方库，C++几乎“无所不能”。</p><p>但是，C++也有自己的“阿喀琉斯之踵”，那就是语言复杂、学习曲线陡峭、开发周期长、排错/维护成本高。</p><p>所以，C++不能完全适应现在的快速开发和迭代的节奏，最终只能退到后端、底层等领域。要想充分发挥C++的功力，就要辅助其他的语言搭建混合系统，尽量扬长避短，做好那最关键、最核心的部分，这样才能展现出它应有的价值。</p><p>由于当前的操作系统、虚拟机、解释器、引擎很多都是用C或者C++编写的，所以，使用C++，可以很容易地编写各种底层模块，为上层的Java、Go等语言提供扩展功能。</p><p>不过，今天我不去说这些大型语言，而是讲两种轻便的脚本语言：Python和Lua，看看C++怎么和它们俩实现无缝对接：以C++为底层基础，Python和Lua作为上层建筑，共同搭建起高性能、易维护、可扩展的混合系统。</p><h2>Python</h2><p>Python应该是除了JavaScript以外最流行的一种脚本语言了，一直在TIOBE榜单里占据前三名的位置。而且，在新兴的大数据、人工智能、科学计算等领域，也都有着广泛的应用。很多大公司都长期招聘Python程序员，就是看中了它的高生产率。</p><!-- [[[read_end]]] --><p>Python本身就有C接口，可以用C语言编写扩展模块，把一些低效耗时的功能改用C实现，有的时候，会把整体性能提升几倍甚至几十倍。</p><p>但是，使用纯C语言写扩展模块非常麻烦，那么，能不能利用C++的那些高级特性来简化这部分的工作呢？</p><p>很多人都想到了这个问题，于是，就出现了一些专门的C++/Python工具，使用C++来开发Python扩展。其中，我认为最好的一个就是<a href=\"https://github.com/pybind/pybind11\">pybind11</a>。</p><p>pybind11借鉴了“前辈”Boost.Python，能够在C++和Python之间自由转换，任意翻译两者的语言要素，比如把C++的vector转换为Python的列表，把Python的元组转换为C++的tuple，既可以在C++里调用Python脚本，也可以在Python里调用C++的函数、类。</p><p>pybind11名字里的“11”表示它完全基于现代C++开发（C++11以上），所以没有兼容旧系统的负担。它使用了大量的现代C++特性，不仅代码干净整齐，运行效率也更高。</p><p>下面，我就带你看看怎么用pybind11，让C++来辅助Python，提升Python的性能。</p><p>pybind11是一个纯头文件的库，但因为必须结合Python，所以首先要有Python的开发库，然后再用pip工具安装。</p><p>pybind11支持Python2.7、Python3和PyPy，这里我用的是Python3：</p><pre><code>apt-get install python3-dev\napt-get install python3-pip\npip3 install pybind11\n</code></pre><p>pybind11充分利用了C++预处理和模板元编程，把原本无聊重复的代码都隐藏了起来，展现了“神奇的魔法”——只需要短短几行代码，就可以实现一个Python扩展模块。具体怎么实现呢？</p><p>实际上，你只要用一个宏“<strong>PYBIND11_MODULE</strong>”，再给它两个参数，Python模块名和C++实例对象名，就可以了。</p><pre><code>#include &lt;pybind11/pybind11.h&gt;        // pybind11的头文件\n\nPYBIND11_MODULE(pydemo, m)            // 定义Python模块pydemo\n{\n  m.doc() = &quot;pybind11 demo doc&quot;;      // 模块的说明文档\n}                                     // Python模块定义结束\n</code></pre><p>代码里的pydemo就是Python里的模块名，之后在Python脚本里必须用这个名字才能import。</p><p>第二个参数“m”其实是pybind11::module的一个实例对象，封装了所有的操作，比如这里的doc()就是模块的说明文档。它只是个普通的变量，起什么名字都可以，但为了写起来方便，一般都用“m”。</p><p>假设这个C++源文件名是“pybind.cpp”，现在你就可以用g++把它编译成在Python里调用的模块了，不过编译命令比较复杂：</p><pre><code>g++ pybind.cpp               \\                  #编译的源文件\n   -std=c++11 -shared -fPIC   \\                 #编译成动态库\n  `python3 -m pybind11 --includes` \\            #获得包含路径\n  -o pydemo`python3-config --extension-suffix`  #生成的动态库名字\n</code></pre><p>我来稍微解释一下。第一行是指定编译的源文件，第二行是指定编译成动态库，这两个不用多说。第三行调用了Python，获得pybind11所在的包含路径，让g++能够找得到头文件。第四行最关键，是生成的动态库名字，<strong>前面必须是源码里的模块名</strong>，而后面那部分则是Python要求的后缀名，否则Python运行时会找不到模块。</p><p>编译完后会生成一个大概这样的文件：pydemo.cpython-35m-x86_64-linux-gnu.so，现在就可以在Python里验证了，使用import导入，然后用help就能查看模块说明：</p><pre><code>$ python3\n&gt;&gt;&gt; import pydemo\n&gt;&gt;&gt; help(pydemo)\n</code></pre><p>刚才的代码非常简单，只是个空模块，里面什么都没有，现在，我们来看看怎么把C++的函数导入Python。</p><p>你需要用的是<strong>def()函数</strong>，传递一个Python函数名和C++的函数、函数对象或者是lambda表达式，形式上和Python的函数也差不多：</p><pre><code>namespace py = pybind11;               // 名字空间别名，简化代码\n\nPYBIND11_MODULE(pydemo, m)             // 定义Python模块pydemo\n{\n  m.def(&quot;info&quot;,                        // 定义Python函数\n    []()                              // 定义一个lambda表达式\n    {\n      py::print(&quot;c++ version =&quot;, __cplusplus);  // pybind11自己的打印函数\n      py::print(&quot;gcc version =&quot;, __VERSION__);\n      py::print(&quot;libstdc++   =&quot;, __GLIBCXX__);\n    }\n  );  \n\n  m.def(&quot;add&quot;,                       // 定义Python函数\n    [](int a, int b)                 // 有参数的lambda表达式\n    {\n      return a + b;\n    }\n  );  \n}                                     // Python模块定义结束\n</code></pre><p>这样我们就非常轻松地实现了两个Python函数，在Python里可以验证效果：</p><pre><code>import pydemo            # 导入pybind11模块\npydemo.info()            # 调用C++写的函数\nx = pydemo.add(1,2)      # 调用C++写的函数\n</code></pre><p>pybind11也支持函数的参数、返回值使用标准容器，会自动转换成Python里的list、dict，不过你需要额外再包含一个“stl.h”的头文件。</p><p>下面的示例代码演示了C++的string、tuple和vector是如何用于Python的：</p><pre><code>#include &lt;pybind11/stl.h&gt;              // 转换标准容器必须的头文件\n\nPYBIND11_MODULE(pydemo, m)             // 定义Python模块pydemo\n{\n  m.def(&quot;use_str&quot;,                     // 定义Python函数\n    [](const string&amp; str)              // 入参是string\n    {\n        py::print(str);\n        return str + &quot;!!&quot;;            // 返回string\n    }\n  );  \n\n  m.def(&quot;use_tuple&quot;,                  // 定义Python函数\n    [](tuple&lt;int, int, string&gt; x)     // 入参是tuple\n    {\n        get&lt;0&gt;(x)++;\n        get&lt;1&gt;(x)++;\n        get&lt;2&gt;(x)+= &quot;??&quot;;\n        return x;                     // 返回元组\n    }\n  );  \n\n  m.def(&quot;use_list&quot;,                   // 定义Python函数\n    [](const vector&lt;int&gt;&amp; v)          // 入参是vector\n    {\n        auto vv = v;\n        py::print(&quot;input :&quot;, vv);\n        vv.push_back(100);\n        return vv;                    // 返回列表       \n    }\n  );\n}\n\n</code></pre><p>因为都是面向对象的编程语言，C++里的类也能够等价地转换到Python里面调用，这要用到一个特别的模板类class_，注意，它有意模仿了关键字class，后面多了一个下划线。</p><p>我拿一个简单的Point类来举个例子：</p><pre><code>class Point final\n{\npublic:\n    Point() = default;\n    Point(int a)；\npublic:\n    int get() const;\n    void set(int a);\n};\n</code></pre><p>使用pybind11，你需要在模板参数里写上这个类名，然后在构造函数里指定它在Python里的名字。</p><p>导出成员函数还是调用函数def()，但它会返回对象自身的引用，所以就可以连续调用，在一句话里导出所有接口：</p><pre><code>py::class_&lt;Point&gt;(m, &quot;Point&quot;)           // 定义Python类\n    .def(py::init())                    // 导出构造函数\n    .def(py::init&lt;int&gt;())               // 导出构造函数\n    .def(&quot;get&quot;, &amp;Point::get)            // 导出成员函数\n    .def(&quot;set&quot;, &amp;Point::set)            // 导出成员函数\n    ;\n</code></pre><p>对于一般的成员函数来说，定义的方式和普通函数一样，只是你必须加上取地址操作符“&amp;”，把它写成函数指针的形式。而构造函数则比较特殊，必须调用init()函数来表示，如果有参数，还需要在init()函数的模板参数列表里写清楚。</p><p>pybind11的功能非常丰富，我们不可能一下子学完全部的功能，刚才说的这些只是最基本，也是非常实用的功能。除了这些，它还支持异常、枚举、智能指针等很多C++特性，你可以再参考一下它的<a href=\"https://github.com/pybind/pybind11\">文档</a>，学习一下具体的方法，挖掘出它的更多价值。</p><p>如果你在工作中重度使用Python，那么pybind11绝对是你的得力助手，它能够让C++紧密地整合进Python应用里，让Python跑得更快、更顺畅，建议你有机会就尽量多用。</p><h2>Lua</h2><p>接下来我要说的第二个脚本语言是小巧高效的Lua，号称是“最快的脚本语言”。</p><p>你可能对Lua不太了解，但你一定听说过《魔兽世界》《愤怒的小鸟》吧，它们就在内部大量使用了Lua来编写逻辑。在游戏开发领域，Lua可以说是一种通用的工作语言。</p><p>Lua与其他语言最大的不同点在于它的设计目标：不追求“大而全”，而是“小而美”。Lua自身只有很小的语言核心，能做的事情很少。但正是因为它小，才能够很容易地嵌入到其他语言里，为“宿主”添加脚本编程的能力，让“宿主”更容易扩展和定制。</p><p>标准的Lua（PUC-Rio Lua）使用解释器运行，速度虽然很快，但和C/C++比起来还是有差距的。所以，你还可以选择另一个兼容的项目：LuaJIT（<a href=\"https://luajit.org/\">https://luajit.org/</a>）。它使用了JIT（Just in time）技术，能够把Lua代码即时编译成机器码，速度几乎可以媲美原生C/C++代码。</p><p>不过，LuaJIT也有一个问题，它是一个个人项目，更新比较慢，最新的2.1.0-beta3已经是三年前的事情了。所以，我推荐你改用它的一个非官方分支：OpenResty-LuaJIT（<a href=\"https://github.com/openresty/luajit2\">https://github.com/openresty/luajit2</a>）。它由OpenResty负责维护，非常活跃，修复了很多小错误。</p><pre><code>git clone git@github.com:openresty/luajit2.git\nmake &amp;&amp; make install\n\n</code></pre><p>和Python一样，Lua也有C接口用来编写扩展模块，但因为它比较小众，所以C++项目不是很多。现在我用的是LuaBridge，虽然它没有用到太多的C++11新特性，但也足够好。</p><p>LuaBridge是一个纯头文件的库，只要下载下来，把头文件拷贝到包含路径，就能够直接用：</p><pre><code>git clone git@github.com:vinniefalco/LuaBridge.git\n</code></pre><p>我们先来看看在Lua里怎么调C++的功能。</p><p>和前面说的pybind11类似，LuaBridge也定义了很多的类和方法，可以把C++函数、类注册到Lua里，让Lua调用。</p><p>但我不建议你用这种方式，因为我们现在有LuaJIT。它内置了一个ffi库（Foreign Function Interface），能够在Lua脚本里直接声明接口函数、直接调用，不需要任何的注册动作，更加简单方便。而且这种做法还越过了Lua传统的栈操作，速度也更快。</p><p>使用ffi唯一要注意的是，<strong>它只能识别纯C接口，不认识C++</strong>，所以，写Lua扩展模块的时候，内部可以用C++，但对外的接口必须转换成纯C函数。</p><p>下面我写了一个简单的add()函数，还有一个全局变量，注意里面必须要用extern \"C\"声明：</p><pre><code>extern &quot;C&quot; {                // 使用纯C语言的对外接口\nint num = 10; \nint my_add(int a, int b); \n}\n\nint my_add(int a, int b)    // 一个简单的函数，供Lua调用\n{\n    return a + b;\n}\n</code></pre><p>然后就可以用g++把它编译成动态库，不像pybind11，它没有什么特别的选项：</p><pre><code>g++ lua_shared.cpp -std=c++11 -shared -fPIC -o liblua_shared.so\n</code></pre><p>在Lua脚本里，你首先要用ffi.cdef声明要调用的接口，再用ffi.load加载动态库，这样就会把动态库所有的接口都引进Lua，然后就能随便使用了：</p><pre><code>local ffi = require &quot;ffi&quot;            -- 加载ffi库\nlocal ffi_load = ffi.load            -- 函数别名\nlocal ffi_cdef = ffi.cdef\n\nffi_cdef[[                           // 声明C接口\nint num;\nint my_add(int a, int b);\n]]\n\nlocal shared = ffi_load(&quot;./liblua_shared.so&quot;)    -- 加载动态库 \n\nprint(shared.num)                                -- 调用C接口\nlocal x = shared.my_add(1, 2)                    -- 调用C接口\n</code></pre><p>在ffi的帮助下，让Lua调用C接口几乎是零工作量，但这并不能完全发挥出Lua的优势。</p><p>因为和Python不一样，Lua很少独立运行，大多数情况下都要嵌入在宿主语言里，被宿主调用，然后再“回调”底层接口，利用它的“胶水语言”特性去粘合业务逻辑。</p><p>要在C++里嵌入Lua，首先要调用函数<strong>luaL_newstate()</strong>，创建出一个Lua虚拟机，所有的Lua功能都要在它上面执行。</p><p>因为Lua是用C语言写的，Lua虚拟机用完之后必须要用函数<strong>lua_close()</strong>关闭，所以最好用RAII技术写一个类来自动管理。可惜的是，LuaBridge没有对此封装，所以只能自己动手了。这里我用了智能指针shared_ptr，在一个lambda表达式里创建虚拟机，顺便再打开Lua基本库：</p><pre><code>auto make_luavm = []()              // lambda表达式创建虚拟机\n{\n    std::shared_ptr&lt;lua_State&gt; vm(  // 智能指针\n        luaL_newstate(), lua_close  // 创建虚拟机对象，设置删除函数\n        );\n    luaL_openlibs(vm.get());        // 打开Lua基本库\n\n    return vm; \n};\n#define L vm.get()                  // 获取原始指针，宏定义方便使用\n</code></pre><p>在LuaBridge里，一切Lua数据都被封装成了<strong>LuaRef</strong>类，完全屏蔽了Lua底层那难以理解的栈操作。它可以隐式或者显式地转换成对应的数字、字符串等基本类型，如果是表，就可以用“[]”访问成员，如果是函数，也可以直接传参调用，非常直观易懂。</p><p>使用LuaBridge访问Lua数据时，还要注意一点，它只能用函数<strong>getGlobal()</strong>看到全局变量，所以，如果想在C++里调用Lua功能，就一定不能加“local”修饰。</p><p>给你看一小段代码，它先创建了一个Lua虚拟机，然后获取了Lua内置的package模块，输出里面的默认搜索路径path和cpath：</p><pre><code>auto vm = make_luavm();                  // 创建Lua虚拟机\nauto package = getGlobal(L, &quot;package&quot;);  // 获取内置的package模块\n\nstring path  = package[&quot;path&quot;];          // 默认的lua脚本搜索路径\nstring cpath = package[&quot;cpath&quot;];         // 默认的动态库搜索路径\n</code></pre><p>你还可以调用<strong>luaL_dostring()和luaL_dofile()</strong>这两个函数，直接执行Lua代码片段或者外部的脚本文件。注意，luaL_dofile()每次调用都会从磁盘载入文件，所以效率较低。如果是频繁调用，最好把代码读进内存，存成一个字符串，再用luaL_dostring()运行：</p><pre><code>luaL_dostring(L, &quot;print('hello lua')&quot;);  // 执行Lua代码片段\nluaL_dofile(L, &quot;./embedded.lua&quot;);        // 执行外部的脚本文件\n</code></pre><p>在C++里嵌入Lua，还有另外一种方式：<strong>提前在脚本里写好一些函数，加载后在C++里逐个调用</strong>，这种方式比执行整个脚本更灵活。</p><p>具体的做法也很简单，先用luaL_dostring()或者luaL_dofile()加载脚本，然后调用getGlobal()从全局表里获得封装的LuaRef对象，就可以像普通函数一样执行了。由于Lua是动态语言，变量不需要显式声明类型，所以写起来就像是C++的泛型函数，但却更简单：</p><pre><code>string chunk = R&quot;(                    -- Lua代码片段\n    function say(s)                   -- Lua函数1\n        print(s)\n    end\n    function add(a, b)                -- Lua函数2\n        return a + b\n    end\n)&quot;;\n\nluaL_dostring(L, chunk.c_str());      // 执行Lua代码片段\n\nauto f1 = getGlobal(L, &quot;say&quot;);        // 获得Lua函数\nf1(&quot;say something&quot;);                  // 执行Lua函数\n\nauto f2 = getGlobal(L, &quot;add&quot;);        // 获得Lua函数\nauto v = f2(10, 20);                  // 执行Lua函数\n</code></pre><p>只要掌握了上面的这些基本用法，并合理地划分出C++与Lua的职责边界，就可以搭建出“LuaJIT + LuaBridge + C++”的高性能应用，运行效率与开发效率兼得。比如说用C++写底层的框架、引擎，暴露出各种调用接口作为“业务零件”，再用灵活的Lua脚本去组合这些“零件”，写上层的业务逻辑。</p><h2>小结</h2><p>好了，今天我讲了怎么基于C++搭建混合系统，介绍了Python和Lua这两种脚本语言。</p><p>Python很“大众”，但比较复杂、性能不是特别高；而Lua比较“小众”，很小巧，有LuaJIT让它运行速度极快。你可以结合自己的实际情况来选择，比如语言的熟悉程度、项目的功能/性能需求、开发的难易度，等等。</p><p>今天的内容也比较多，我简单小结一下要点：</p><ol>\n<li>C++高效、灵活，但开发周期长、成本高，在混合系统里可以辅助其他语言，编写各种底层模块提供扩展功能，从而扬长避短；</li>\n<li>pybind11是一个优秀的C++/Python绑定库，只需要写很简单的代码，就能够把函数、类等C++要素导入Python；</li>\n<li>Lua是另一种小巧快速的脚本语言，它的兼容项目LuaJIT速度更快；</li>\n<li>使用LuaBridge可以导出C++的函数、类，但直接用LuaJIT的ffi库更好；</li>\n<li>使用LuaBridge也可以很容易地执行Lua脚本、调用Lua函数，让Lua跑在C++里。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你觉得使用脚本语言与C++搭建混合系统有什么优势？</li>\n<li>你觉得“把C++嵌入脚本语言”和“把脚本语言嵌入C++”有什么区别，哪种方式更好？</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/2b/e47906e7f83ec210cc011e2652eee12b.jpg?wh=1400*1766\" alt=\"\"></p>","comments":[{"had_liked":false,"id":226476,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1592117909,"is_pvip":false,"replies":[{"id":"83394","content":"说的很好。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592120963,"ip_address":"","comment_id":226476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40246823573","product_id":100051801,"comment_content":"1. 我想这种方式可以利用脚本语言的高产的优势，例如老师说的python；<br>2. 把C++嵌入到脚本语言可以有效提升脚本语言的执行效率；而把脚本语言嵌入到C++，有点通过利用脚本语言特性的优势来弥补相对C++的弱项，使得C++开发变得更灵活和开放。","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498257,"discussion_content":"说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592120963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247146,"user_name":"IT老兵重开始","can_delete":false,"product_type":"c1","uid":1102898,"ip_address":"","ucode":"D87789261CDB1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/32/77d386b6.jpg","comment_is_top":false,"comment_ctime":1599617827,"is_pvip":true,"replies":[{"id":"90758","content":"从零开始学C++，真是很佩服。<br><br>我的建议是不要去抠那些内存管理、指针、构造&#47;析构等细枝末节，先把C++当做java、Python来用，有了一些实际经验体会后再了解底层机制。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1599620298,"ip_address":"","comment_id":247146,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18779487011","product_id":100051801,"comment_content":"一个C++零基础的初学者，正在看一个C++开源库，这章很有启发，因工作需要改造一下开源库代码","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505327,"discussion_content":"从零开始学C++，真是很佩服。\n\n我的建议是不要去抠那些内存管理、指针、构造/析构等细枝末节，先把C++当做java、Python来用，有了一些实际经验体会后再了解底层机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599620298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305714,"discussion_content":"老师很好的建议 学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600066928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236116,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1595320576,"is_pvip":false,"replies":[{"id":"87298","content":"看样子好像是没识别出string、tuple等类型，应该是没打开std名字空间吧。<br><br>示例里的代码为了简单都省略了using namespace std，也许给你造成了误解，抱歉。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595379511,"ip_address":"","comment_id":236116,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18775189760","product_id":100051801,"comment_content":"老师，我复制C++ 的 string、tuple 和 vector 用于 Python 的示例代码，编译报错了，没识别到类型。<br>下面是部分错误信息：<br>pybind.cpp: In function ‘void pybind11_init_videoparser(pybind11::module&amp;)’:<br>pybind.cpp:15:14: error: ‘string’ does not name a type<br>     [](const string&amp; str)              &#47;&#47; 入参是string<br>              ^<br>pybind.cpp:19:5: error: ISO C++ forbids declaration of ‘parameter’ with no type [-fpermissive]<br>     }<br>     ^<br>pybind.cpp: In lambda function:<br>pybind.cpp:20:4: error: expected ‘{’ before ‘;’ token<br>   );<br>    ^<br>pybind.cpp: In function ‘void pybind11_init_videoparser(pybind11::module&amp;)’:<br>pybind.cpp:20:4: error: expected ‘)’ before ‘;’ token<br>pybind.cpp:23:8: error: ‘tuple’ has not been declared<br>     [](tuple&lt;int, int, string&gt; x)     &#47;&#47; 入参是tuple<br>        ^<br>pybind.cpp:23:13: error: expected ‘,’ or ‘...’ before ‘&lt;’ token<br>     [](tuple&lt;int, int, string&gt; x)     &#47;&#47; 入参是tuple<br>             ^<br>pybind.cpp: In lambda function:<br>pybind.cpp:25:9: error: ‘get’ was not declared in this scope<br>         get&lt;0&gt;(x)++;<br>         ^<br>pybind.cpp:25:9: note: suggested alternative:","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501950,"discussion_content":"看样子好像是没识别出string、tuple等类型，应该是没打开std名字空间吧。\n\n示例里的代码为了简单都省略了using namespace std，也许给你造成了误解，抱歉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595379511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293233,"discussion_content":"感谢指正，稍后修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595488494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292914,"discussion_content":"可以了老师。另外最后一个m.def( 少了配对的 );","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595383167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226801,"user_name":"reverse","can_delete":false,"product_type":"c1","uid":1240138,"ip_address":"","ucode":"0B546E540DF096","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/4a/40a2ba79.jpg","comment_is_top":false,"comment_ctime":1592206467,"is_pvip":false,"replies":[{"id":"83511","content":"没用过jsBridge，不好讲，抱歉了。<br><br>如果是单纯地用C&#47;C++写native接口让js调，那还是比较简单的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592209441,"ip_address":"","comment_id":226801,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14477108355","product_id":100051801,"comment_content":"老师，能增加一部分内容讲讲 jsBridge吗 我正常的研发都要和nodejs打交道 但是经验不足","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498368,"discussion_content":"没用过jsBridge，不好讲，抱歉了。\n\n如果是单纯地用C/C++写native接口让js调，那还是比较简单的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592209441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1994088,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/6d/68/e40b3300.jpg","nickname":"Bluebuger","note":"","ucode":"946EE346371D8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389329,"discussion_content":"Qt  qml js 用qt开发东西时候我就这样用 也全是能用js做部分逻辑。不过最终宿主是cpp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629220976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302361,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1626178651,"is_pvip":false,"replies":[{"id":"109407","content":"<br>1.说的很好。<br><br>2.对，多语言混合编程就看应用场合，有的需要运行速度，有的需要开发效率，比重可以任意调整。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626218958,"ip_address":"","comment_id":302361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10216113243","product_id":100051801,"comment_content":"1.脚本语言实现业务比较方便,开发周期短,而C++作为底层库,运算效率高,相当于优势互补吧.<br>2.关于脚本语言嵌入到C++语言中,我特意查了下,网上说&quot;游戏开发中,如果要修改C++为主体的代码逻辑,使用Lua可以不重启服务器就能做到&quot;.我平常接触比较多的是C++作为底层库嵌入到脚本语言中.感觉各有千秋,适合不同的场景吧,说不出来哪个更好","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523274,"discussion_content":"\n1.说的很好。\n\n2.对，多语言混合编程就看应用场合，有的需要运行速度，有的需要开发效率，比重可以任意调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626218958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226327,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1592036943,"is_pvip":false,"replies":[{"id":"83343","content":"pybind11比较现代，用C++11的特性简化了很多原来的操作，非常推荐。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592044540,"ip_address":"","comment_id":226327,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10181971535","product_id":100051801,"comment_content":"之前用swig，再尝尝pybind11，感谢大佬提供思路","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498195,"discussion_content":"pybind11比较现代，用C++11的特性简化了很多原来的操作，非常推荐。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592044540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226235,"user_name":"浑浑噩噩cium","can_delete":false,"product_type":"c1","uid":1617939,"ip_address":"","ucode":"358C0BCFF62B40","user_header":"https://static001.geekbang.org/account/avatar/00/18/b0/13/5cb3459c.jpg","comment_is_top":false,"comment_ctime":1592011693,"is_pvip":false,"replies":[{"id":"83327","content":"对，这是一种很好的混合编程方式。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592023433,"ip_address":"","comment_id":226235,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10181946285","product_id":100051801,"comment_content":"以前遇到过升级软件就是lua和c+＋配合，业务流程就是lua脚本里面控制，c＋＋调用lua脚本。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498160,"discussion_content":"对，这是一种很好的混合编程方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294606,"user_name":"奋斗","can_delete":false,"product_type":"c1","uid":2047392,"ip_address":"","ucode":"C84C2D030ACA51","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3d/a0/acf6b165.jpg","comment_is_top":false,"comment_ctime":1622015691,"is_pvip":false,"replies":[{"id":"106900","content":"<br>1.perl应该也可以，不过我没研究过，不熟。<br><br>2.pybind11的GitHub上的readme就已经很详细了。<br><br>3.我觉得最好不要做选择题，而是全都要，都有各自合适的应用场合。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622018226,"ip_address":"","comment_id":294606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916982987","product_id":100051801,"comment_content":"老师，请教您三个问题：<br>1、除了 python 和 lua ，  perl 可以吗？<br>2、有没有 pybind11 的教程资料？<br>3、如果学习 c++ 必须掌握一门脚本语言，那个是首选？ ","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520732,"discussion_content":"\n1.perl应该也可以，不过我没研究过，不熟。\n\n2.pybind11的GitHub上的readme就已经很详细了。\n\n3.我觉得最好不要做选择题，而是全都要，都有各自合适的应用场合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622018226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288182,"user_name":"易轻尘","can_delete":false,"product_type":"c1","uid":1136684,"ip_address":"","ucode":"0D0CB9D6D45A70","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/2c/92c7ce3b.jpg","comment_is_top":false,"comment_ctime":1618337658,"is_pvip":true,"replies":[{"id":"104607","content":"great.","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618361760,"ip_address":"","comment_id":288182,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5913304954","product_id":100051801,"comment_content":"把 C++ 嵌入脚本语言：适用于脚本语言运行速度满或者和操作系统底层交互不方便的时候；<br>把脚本语言嵌入 C++：C++开发需要注意的点多，开发效率较低，可以使用脚本语言方便开发者","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518538,"discussion_content":"great.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618361760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231421,"user_name":"hao","can_delete":false,"product_type":"c1","uid":1980191,"ip_address":"","ucode":"1FA69BBF5F624C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erCibehm9W3tbhKic1RnbTvPVCgWDmludx9YQ97BneVRhyegkr13R6vrFPYol4IYEF98s07MicgOtS0g/132","comment_is_top":false,"comment_ctime":1593673098,"is_pvip":false,"replies":[{"id":"85463","content":"C++和python混合编程没问题，但要实现“大型高并发高性能服务端”，可能就没那么简单了。<br><br>因为C++偏向在底层写高性能组件，Python实现业务逻辑，而服务器应用一般业务比较多，这样就难以发挥C++的高性能优势，可能需要仔细划分两者的功能区。<br><br>我个人推荐用Nginx+Lua，或者是OpenResty。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593675887,"ip_address":"","comment_id":231421,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5888640394","product_id":100051801,"comment_content":"C++和python配合适合实现大型高并发高性能服务端吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500295,"discussion_content":"C++和python混合编程没问题，但要实现“大型高并发高性能服务端”，可能就没那么简单了。\n\n因为C++偏向在底层写高性能组件，Python实现业务逻辑，而服务器应用一般业务比较多，这样就难以发挥C++的高性能优势，可能需要仔细划分两者的功能区。\n\n我个人推荐用Nginx+Lua，或者是OpenResty。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593675887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294826,"discussion_content":"我觉得说的很好。我实践中的用法是看开发的复杂度和效率，C++不好处理的比如文本处理、字符串解析就交给Python、lua。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596010209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1343717,"avatar":"https://static001.geekbang.org/account/avatar/00/14/80/e5/251d89b5.jpg","nickname":"锦鲤","note":"","ucode":"B9F1495E39F00A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294503,"discussion_content":"&#34;因为C++偏向在底层写高性能组件，Python实现业务逻辑，而服务器应用一般业务比较多，这样就难以发挥C++的高性能优势，可能需要仔细划分两者的功能区。&#34;\n罗老师，怎么划分两者的功能区？有什么原则或者建议？或者实际项目中方面是怎么搭配的？我抛个砖，比如c++用于实现底层的网络通信与第三方服务交互(这里要实现数据高速处理)，而python实现业务功能，调用c++实现的通信服务(通过网络通信gRPC等手段调用)从而实现与第三方服务的交互。按照这种结构来混合使用python和c++，是否合理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595907162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227077,"user_name":"f","can_delete":false,"product_type":"c1","uid":1330839,"ip_address":"","ucode":"953393855F1253","user_header":"https://static001.geekbang.org/account/avatar/00/14/4e/97/bc19ca4d.jpg","comment_is_top":false,"comment_ctime":1592277099,"is_pvip":false,"replies":[{"id":"83631","content":"可以看源码，都是用C++写的函数和类，然后在Python里调用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592278070,"ip_address":"","comment_id":227077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887244395","product_id":100051801,"comment_content":"pybind11例子举错了吧，python定义的函数用python调??.","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498487,"discussion_content":"可以看源码，都是用C++写的函数和类，然后在Python里调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592278070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226233,"user_name":"Eglinux","can_delete":false,"product_type":"c1","uid":1187353,"ip_address":"","ucode":"4AAB9940789442","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/19/17245c59.jpg","comment_is_top":false,"comment_ctime":1592011546,"is_pvip":false,"replies":[{"id":"83328","content":"GitHub上的代码都是与各讲结合在一起的，我特意写的很简单，只要认真看课程就能明白，如果不明白可以留言，或者在GitHub上提issue。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592023497,"ip_address":"","comment_id":226233,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886978842","product_id":100051801,"comment_content":"老师，能录个视频大概讲一下 github 上 cpp_study 仓库里面的代码吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498158,"discussion_content":"GitHub上的代码都是与各讲结合在一起的，我特意写的很简单，只要认真看课程就能明白，如果不明白可以留言，或者在GitHub上提issue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356670,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"北京","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1662481696,"is_pvip":true,"replies":[{"id":"129827","content":"这方面个人不太熟悉，如果有好的心得欢迎分享。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662520786,"ip_address":"北京","comment_id":356670,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1662481696","product_id":100051801,"comment_content":"c++ 同步js，这个方向怎么没人尝试？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586802,"discussion_content":"这方面个人不太熟悉，如果有好的心得欢迎分享。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662520786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586813,"discussion_content":"我先按老师的方法试试，看是否可行😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662528208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586802,"ip_address":"广东"},"score":586813,"extra":""}]}]},{"had_liked":false,"id":341450,"user_name":"卡皮","can_delete":false,"product_type":"c1","uid":1175570,"ip_address":"","ucode":"20A8D19DD91AE7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/12/89b7c95a.jpg","comment_is_top":false,"comment_ctime":1649635331,"is_pvip":false,"replies":[{"id":"124843","content":"可以看pybind11的文档，也是很简单的，这里就不细说了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1649812387,"ip_address":"","comment_id":341450,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649635331","product_id":100051801,"comment_content":"老师，请问怎么把python嵌入c++中使用？<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562327,"discussion_content":"可以看pybind11的文档，也是很简单的，这里就不细说了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649812387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336556,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1646212747,"is_pvip":true,"replies":[{"id":"123039","content":"需要在Python的查找路径里，测试来说当前路径就可以，如果要是实际应用就得找熟悉Python的同事来配置了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646356034,"ip_address":"","comment_id":336556,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646212747","product_id":100051801,"comment_content":"pydemo.cpython-35m-x86_64-linux-gnu.so<br>需要放到特定的目录下吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554350,"discussion_content":"需要在Python的查找路径里，测试来说当前路径就可以，如果要是实际应用就得找熟悉Python的同事来配置了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646356034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332736,"user_name":"移海","can_delete":false,"product_type":"c1","uid":1976433,"ip_address":"","ucode":"A1BE5C10475421","user_header":"https://static001.geekbang.org/account/avatar/00/1e/28/71/e223e992.jpg","comment_is_top":false,"comment_ctime":1643530515,"is_pvip":true,"replies":[{"id":"121655","content":"不了解C#，抱歉了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1643788727,"ip_address":"","comment_id":332736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643530515","product_id":100051801,"comment_content":"我会一些c#，python，有无类似pybind11那样的C#库？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549259,"discussion_content":"不了解C#，抱歉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643788727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326522,"user_name":"没事莫慌冠","can_delete":false,"product_type":"c1","uid":1070095,"ip_address":"","ucode":"D4C3176E16798E","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/0f/fe690e3c.jpg","comment_is_top":false,"comment_ctime":1639551493,"is_pvip":false,"replies":[{"id":"118590","content":"macOS环境不是很了解，抱歉了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1639559661,"ip_address":"","comment_id":326522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639551493","product_id":100051801,"comment_content":"我在osx上链接luajit编译出来的动态库&#47;usr&#47;local&#47;lib&#47;libluajit-5.1.2.1.0.dylib。但是提示符号找不到:<br>Undefined symbols for architecture x86_64:<br>  &quot;lua_remove(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_settop(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRefBase&lt;luabridge::LuaRef, luabridge::LuaRef&gt;::StackPop::~StackPop() in main.cpp.o<br>  &quot;lua_rawgeti(lua_State*, int, int)&quot;, referenced from:<br>      luabridge::LuaRef::push() const in main.cpp.o<br>      luabridge::LuaRef::TableItem::TableItem(lua_State*, int) in main.cpp.o<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_getfield(lua_State*, int, char const*)&quot;, referenced from:<br>      luabridge::LuaRef::getGlobal(lua_State*, char const*) in main.cpp.o<br>  &quot;lua_gettable(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_pushlstring(lua_State*, char const*, unsigned long)&quot;, referenced from:<br>      luabridge::Stack&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::push(lua_State*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) in main.cpp.o<br>  &quot;lua_type(lua_State*, int)&quot;, referenced from:<br>      luabridge::Stack&lt;char const*&gt;::get(lua_State*, int) in main.cpp.o<br>  &quot;lua_close(lua_State*)&quot;, referenced from:<br>      lua::Config::Config() in main.cpp.o<br>ld: symbol(s) not found for architecture x86_64<br>==============================================================<br>然后我用nm 命令查看库文件，发现里边都有相应的定义:<br>0000000000017350 T _lua_remove （像这样）<br>请问老师，我这种情况有可能是什么原因导致的呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538937,"discussion_content":"macOS环境不是很了解，抱歉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639559661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326519,"user_name":"没事莫慌冠","can_delete":false,"product_type":"c1","uid":1070095,"ip_address":"","ucode":"D4C3176E16798E","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/0f/fe690e3c.jpg","comment_is_top":false,"comment_ctime":1639551280,"is_pvip":false,"replies":[{"id":"118589","content":"抱歉没在macOS上做过开发，暂时帮不上忙。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1639559622,"ip_address":"","comment_id":326519,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639551280","product_id":100051801,"comment_content":"我在osx上链接luajit编译出的&#47;usr&#47;local&#47;lib&#47;libluajit-5.1.2.1.0.dylib。但是符号找不到<br>Undefined symbols for architecture x86_64:<br>  &quot;lua_remove(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_settop(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRefBase&lt;luabridge::LuaRef, luabridge::LuaRef&gt;::StackPop::~StackPop() in main.cpp.o<br>  &quot;lua_rawgeti(lua_State*, int, int)&quot;, referenced from:<br>      luabridge::LuaRef::push() const in main.cpp.o<br>      luabridge::LuaRef::TableItem::TableItem(lua_State*, int) in main.cpp.o<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_getfield(lua_State*, int, char const*)&quot;, referenced from:<br>      luabridge::LuaRef::getGlobal(lua_State*, char const*) in main.cpp.o<br>  &quot;lua_gettable(lua_State*, int)&quot;, referenced from:<br>      luabridge::LuaRef::TableItem::push() const in main.cpp.o<br>  &quot;lua_pushlstring(lua_State*, char const*, unsigned long)&quot;, referenced from:<br>      luabridge::Stack&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::push(lua_State*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) in main.cpp.o<br>  &quot;lua_type(lua_State*, int)&quot;, referenced from:<br>      luabridge::Stack&lt;char const*&gt;::get(lua_State*, int) in main.cpp.o<br>  &quot;lua_close(lua_State*)&quot;, referenced from:<br>      lua::Config::Config() in main.cpp.o<br>ld: symbol(s) not found for architecture x86_64","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538936,"discussion_content":"抱歉没在macOS上做过开发，暂时帮不上忙。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639559622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070095,"avatar":"https://static001.geekbang.org/account/avatar/00/10/54/0f/fe690e3c.jpg","nickname":"没事莫慌冠","note":"","ucode":"D4C3176E16798E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539283,"discussion_content":"找到问题了，我的vscode插件自动添加了#include &lt;lua.h&gt;， 没有用extern &#34;C&#34;包起来，结果编译出的函数符号前面没有下划线，和luajit库里的函数符号对不上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639658698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314698,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1633335248,"is_pvip":true,"replies":[{"id":"114000","content":"lua官网上有api参考，https:&#47;&#47;www.lua.org&#47;manual&#47;，不过达不到像msdn那样特别详细，毕竟lua比较小众。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633395413,"ip_address":"","comment_id":314698,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633335248","product_id":100051801,"comment_content":"老师您好 看老师里面讲到可以用C调用lua脚本<br>使用luaL_newstate、lua_close等函数<br>想请教一下老师这些函数有类似MSDN的文档么，使用过程中应该怎样查询这些函数呢<br>多谢老师了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527765,"discussion_content":"lua官网上有api参考，https://www.lua.org/manual/，不过达不到像msdn那样特别详细，毕竟lua比较小众。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633395413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297815,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1623798820,"is_pvip":true,"replies":[{"id":"108136","content":"luajit与Luabridge没有直接关系，一个是虚拟机，一个是上层接口包装。<br><br>LuaJIT现在一直是2.1.0beta，课程里用的是openresty的分支。luabridge则是很久没更新了。<br><br>两者基于标准的lua语言通信，所以版本不需要对应。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1623808255,"ip_address":"","comment_id":297815,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1623798820","product_id":100051801,"comment_content":"大家好、请问luajit和luabridge 都是哪个分支？最新代码好像版本对不起来","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521937,"discussion_content":"luajit与Luabridge没有直接关系，一个是虚拟机，一个是上层接口包装。\n\nLuaJIT现在一直是2.1.0beta，课程里用的是openresty的分支。luabridge则是很久没更新了。\n\n两者基于标准的lua语言通信，所以版本不需要对应。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623808255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032305,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","nickname":"一个坏人","note":"","ucode":"4AF05BF008095A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379711,"discussion_content":"学习的时候，编译报错（ xxx not declared in this scope）,有些是luajit 的头文件，有些是luabridge 中的头文件，当时猜测是和版本有关系。后来又可以了 🤦‍♂️ 。  仔细回忆，也不知道咱么解决的。（报错后，在学习 Lua 调用C ++ 的，编译动态库后，*.so 文件存在的时候，任然提示 xxx.so.2  not found, 经过google 后，执行了 ldconfig ，后面再尝试LuaBridge 就又可以了，🤦‍♂️ ）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624089383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261707,"user_name":"JY","can_delete":false,"product_type":"c1","uid":2311396,"ip_address":"","ucode":"5DE1DC047946E6","user_header":"","comment_is_top":false,"comment_ctime":1605498623,"is_pvip":false,"replies":[{"id":"94983","content":"让C++给Python添加更多的动力！","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1605504189,"ip_address":"","comment_id":261707,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605498623","product_id":100051801,"comment_content":"原来用 python&#47;c API 写了一些python 扩展，很高效，也很方便，但是团队很多 C++的库，想转成python 扩展，没找到合适方法，就放弃了。看完今天这个文章发现还有 pybind11 这个好东西，赶紧试试，感谢老师。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509575,"discussion_content":"让C++给Python添加更多的动力！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605504189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2311396,"avatar":"","nickname":"JY","note":"","ucode":"5DE1DC047946E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327535,"discussion_content":"追评，这两天把团队早前魔改的 redis hyperloglog  C++实现用 pybind11 wrapper 起来了，类也是直接互操作，简直惊呆我了，哈哈，真香。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605858025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257333,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1603940449,"is_pvip":true,"replies":[{"id":"93691","content":"是的，要先安装luajit，注释里写了，下载之后make就可以了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1603954131,"ip_address":"","comment_id":257333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603940449","product_id":100051801,"comment_content":"老师您好<br>我按照luajit.cpp中的注释安装编译，在运行a.out时候出现错误<br>.&#47;a.out: error while loading shared libraries: libluajit-5.1.so.2: cannot open shared object file: No such file or directory<br><br>老师还需要安装一个ibluajit-5.1版本么","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508298,"discussion_content":"是的，要先安装luajit，注释里写了，下载之后make就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603954131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237437,"user_name":"张博","can_delete":false,"product_type":"c1","uid":1226979,"ip_address":"","ucode":"B4494D608C2757","user_header":"https://static001.geekbang.org/account/avatar/00/12/b8/e3/351b31a7.jpg","comment_is_top":false,"comment_ctime":1595831622,"is_pvip":false,"replies":[{"id":"87722","content":"C++与Python的完全互操作，数据结构可以任意互转，高效，实现代码简单。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595837765,"ip_address":"","comment_id":237437,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595831622","product_id":100051801,"comment_content":"使用pybind11比直接使用ctypes find_library好在哪里? ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502417,"discussion_content":"C++与Python的完全互操作，数据结构可以任意互转，高效，实现代码简单。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595837765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236915,"user_name":"锦鲤","can_delete":false,"product_type":"c1","uid":1343717,"ip_address":"","ucode":"B9F1495E39F00A","user_header":"https://static001.geekbang.org/account/avatar/00/14/80/e5/251d89b5.jpg","comment_is_top":false,"comment_ctime":1595583124,"is_pvip":false,"replies":[{"id":"87550","content":"我印象里好像有Photoshop，另外在手机游戏开发中也大量应用了lua。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595590667,"ip_address":"","comment_id":236915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595583124","product_id":100051801,"comment_content":"除了OpenResty和Nginx使用c++和Lua，罗老师能否举些例子，实际工作中有哪些场景是使用cpp + Lua实现的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502252,"discussion_content":"我印象里好像有Photoshop，另外在手机游戏开发中也大量应用了lua。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595590667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235870,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1595230962,"is_pvip":false,"replies":[{"id":"87115","content":"是不是so文件的查找路径问题，没找到模块","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595233541,"ip_address":"","comment_id":235870,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1595230962","product_id":100051801,"comment_content":"老师，python扩展c++的方式，为什么我在命令行import 模块能打印出值。但是写到py文件里执行，打印就为空。。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501858,"discussion_content":"是不是so文件的查找路径问题，没找到模块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595233541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292844,"discussion_content":"感谢老师答复，确实是路径问题，已有项目中存在os.chdir()代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595345307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229123,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":1656378,"ip_address":"","ucode":"6F502CDCAD7A79","user_header":"https://static001.geekbang.org/account/avatar/00/19/46/3a/35d9cc02.jpg","comment_is_top":false,"comment_ctime":1592901063,"is_pvip":false,"replies":[{"id":"84495","content":"课下可以再自己实践试试，发挥脚本语言的威力。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592903481,"ip_address":"","comment_id":229123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592901063","product_id":100051801,"comment_content":"信息量大，非常好！","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499341,"discussion_content":"课下可以再自己实践试试，发挥脚本语言的威力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592903481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}