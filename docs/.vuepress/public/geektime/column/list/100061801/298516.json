{"id":298516,"title":"06 | WaitGroup：协同等待，任务编排利器","content":"<p>你好，我是鸟窝。</p><p>WaitGroup，我们以前都多多少少学习过，或者是使用过。其实，WaitGroup很简单，就是package sync用来做任务编排的一个并发原语。它要解决的就是并发-等待的问题：现在有一个goroutine A 在检查点（checkpoint）等待一组goroutine全部完成，如果在执行任务的这些goroutine还没全部完成，那么goroutine A就会阻塞在检查点，直到所有goroutine都完成后才能继续执行。</p><p>我们来看一个使用WaitGroup的场景。</p><p>比如，我们要完成一个大的任务，需要使用并行的goroutine执行三个小任务，只有这三个小任务都完成，我们才能去执行后面的任务。如果通过轮询的方式定时询问三个小任务是否完成，会存在两个问题：一是，性能比较低，因为三个小任务可能早就完成了，却要等很长时间才被轮询到；二是，会有很多无谓的轮询，空耗CPU资源。</p><p>那么，这个时候使用WaitGroup并发原语就比较有效了，它可以阻塞等待的goroutine。等到三个小任务都完成了，再即时唤醒它们。</p><p>其实，很多操作系统和编程语言都提供了类似的并发原语。比如，Linux中的barrier、Pthread（POSIX线程）中的barrier、C++中的std::barrier、Java中的CyclicBarrier和CountDownLatch等。由此可见，这个并发原语还是一个非常基础的并发类型。所以，我们要认真掌握今天的内容，这样就可以举一反三，轻松应对其他场景下的需求了。</p><!-- [[[read_end]]] --><p>我们还是从WaitGroup的基本用法学起吧。</p><h2>WaitGroup的基本用法</h2><p>Go标准库中的WaitGroup提供了三个方法，保持了Go简洁的风格。</p><pre><code>    func (wg *WaitGroup) Add(delta int)\n    func (wg *WaitGroup) Done()\n    func (wg *WaitGroup) Wait()\n</code></pre><p>我们分别看下这三个方法：</p><ul>\n<li>Add，用来设置WaitGroup的计数值；</li>\n<li>Done，用来将WaitGroup的计数值减1，其实就是调用了Add(-1)；</li>\n<li>Wait，调用这个方法的goroutine会一直阻塞，直到WaitGroup的计数值变为0。</li>\n</ul><p>接下来，我们通过一个使用WaitGroup的例子，来看下Add、Done、Wait方法的基本用法。</p><p>在这个例子中，我们使用了以前实现的计数器struct。我们启动了10个worker，分别对计数值加一，10个worker都完成后，我们期望输出计数器的值。</p><pre><code>// 线程安全的计数器\ntype Counter struct {\n    mu    sync.Mutex\n    count uint64\n}\n// 对计数值加一\nfunc (c *Counter) Incr() {\n    c.mu.Lock()\n    c.count++\n    c.mu.Unlock()\n}\n// 获取当前的计数值\nfunc (c *Counter) Count() uint64 {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    return c.count\n}\n// sleep 1秒，然后计数值加1\nfunc worker(c *Counter, wg *sync.WaitGroup) {\n    defer wg.Done()\n    time.Sleep(time.Second)\n    c.Incr()\n}\n\nfunc main() {\n    var counter Counter\n    \n    var wg sync.WaitGroup\n    wg.Add(10) // WaitGroup的值设置为10\n\n    for i := 0; i &lt; 10; i++ { // 启动10个goroutine执行加1任务\n        go worker(&amp;counter, &amp;wg)\n    }\n    // 检查点，等待goroutine都完成任务\n    wg.Wait()\n    // 输出当前计数器的值\n    fmt.Println(counter.Count())\n}\n</code></pre><p>我们一起来分析下这段代码。</p><ul>\n<li>第28行，声明了一个WaitGroup变量，初始值为零。</li>\n<li>第29行，把WaitGroup变量的计数值设置为10。因为我们需要编排10个goroutine(worker)去执行任务，并且等待goroutine完成。</li>\n<li>第35行，调用Wait方法阻塞等待。</li>\n<li>第32行，启动了goroutine，并把我们定义的WaitGroup指针当作参数传递进去。goroutine完成后，需要调用Done方法，把WaitGroup的计数值减1。等10个goroutine都调用了Done方法后，WaitGroup的计数值降为0，这时，第35行的主goroutine就不再阻塞，会继续执行，在第37行输出计数值。</li>\n</ul><p>这就是我们使用WaitGroup编排这类任务的常用方式。而“这类任务”指的就是，需要启动多个goroutine执行任务，主goroutine需要等待子goroutine都完成后才继续执行。</p><p>熟悉了WaitGroup的基本用法后，我们再看看它具体是如何实现的吧。</p><h2>WaitGroup的实现</h2><p>首先，我们看看WaitGroup的数据结构。它包括了一个noCopy的辅助字段，一个state1记录WaitGroup状态的数组。</p><ul>\n<li>noCopy的辅助字段，主要就是辅助vet工具检查是否通过copy赋值这个WaitGroup实例。我会在后面和你详细分析这个字段；</li>\n<li>state1，一个具有复合意义的字段，包含WaitGroup的计数、阻塞在检查点的waiter数和信号量。</li>\n</ul><p>WaitGroup的数据结构定义以及state信息的获取方法如下：</p><pre><code>type WaitGroup struct {\n    // 避免复制使用的一个技巧，可以告诉vet工具违反了复制使用的规则\n    noCopy noCopy\n    // 64bit(8bytes)的值分成两段，高32bit是计数值，低32bit是waiter的计数\n    // 另外32bit是用作信号量的\n    // 因为64bit值的原子操作需要64bit对齐，但是32bit编译器不支持，所以数组中的元素在不同的架构中不一样，具体处理看下面的方法\n    // 总之，会找到对齐的那64bit作为state，其余的32bit做信号量\n    state1 [3]uint32\n}\n\n\n// 得到state的地址和信号量的地址\nfunc (wg *WaitGroup) state() (statep *uint64, semap *uint32) {\n    if uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0 {\n        // 如果地址是64bit对齐的，数组前两个元素做state，后一个元素做信号量\n        return (*uint64)(unsafe.Pointer(&amp;wg.state1)), &amp;wg.state1[2]\n    } else {\n        // 如果地址是32bit对齐的，数组后两个元素用来做state，它可以用来做64bit的原子操作，第一个元素32bit用来做信号量\n        return (*uint64)(unsafe.Pointer(&amp;wg.state1[1])), &amp;wg.state1[0]\n    }\n}\n</code></pre><p>因为对64位整数的原子操作要求整数的地址是64位对齐的，所以针对64位和32位环境的state字段的组成是不一样的。</p><p>在64位环境下，state1的第一个元素是waiter数，第二个元素是WaitGroup的计数值，第三个元素是信号量。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/ea/71b5fyy6284140986d04c0b6f87aedea.jpg?wh=3033*1572\" alt=\"\"></p><p>在32位环境下，如果state1不是64位对齐的地址，那么state1的第一个元素是信号量，后两个元素分别是waiter数和计数值。</p><p><img src=\"https://static001.geekbang.org/resource/image/22/ac/22c40ac54cfeb53669a6ae39020c23ac.jpg?wh=3874*1439\" alt=\"\"></p><p>然后，我们继续深入源码，看一下Add、Done和Wait这三个方法的实现。</p><p>在查看这部分源码实现时，我们会发现，除了这些方法本身的实现外，还会有一些额外的代码，主要是race检查和异常检查的代码。其中，有几个检查非常关键，如果检查不通过，会出现panic，这部分内容我会在下一小节分析WaitGroup的错误使用场景时介绍。现在，我们先专注在Add、Wait和Done本身的实现代码上。</p><p>我先为你梳理下<strong>Add方法的逻辑</strong>。Add方法主要操作的是state的计数部分。你可以为计数值增加一个delta值，内部通过原子操作把这个值加到计数值上。需要注意的是，这个delta也可以是个负数，相当于为计数值减去一个值，Done方法内部其实就是通过Add(-1)实现的。</p><p>它的实现代码如下：</p><pre><code>func (wg *WaitGroup) Add(delta int) {\n    statep, semap := wg.state()\n    // 高32bit是计数值v，所以把delta左移32，增加到计数上\n    state := atomic.AddUint64(statep, uint64(delta)&lt;&lt;32)\n    v := int32(state &gt;&gt; 32) // 当前计数值\n    w := uint32(state) // waiter count\n\n    if v &gt; 0 || w == 0 {\n        return\n    }\n\n    // 如果计数值v为0并且waiter的数量w不为0，那么state的值就是waiter的数量\n    // 将waiter的数量设置为0，因为计数值v也是0,所以它们俩的组合*statep直接设置为0即可。此时需要并唤醒所有的waiter\n    *statep = 0\n    for ; w != 0; w-- {\n        runtime_Semrelease(semap, false, 0)\n    }\n}\n\n\n// Done方法实际就是计数器减1\nfunc (wg *WaitGroup) Done() {\n    wg.Add(-1)\n}\n</code></pre><p>Wait方法的实现逻辑是：不断检查state的值。如果其中的计数值变为了0，那么说明所有的任务已完成，调用者不必再等待，直接返回。如果计数值大于0，说明此时还有任务没完成，那么调用者就变成了等待者，需要加入waiter队列，并且阻塞住自己。</p><p>其主干实现代码如下：</p><pre><code>func (wg *WaitGroup) Wait() {\n    statep, semap := wg.state()\n    \n    for {\n        state := atomic.LoadUint64(statep)\n        v := int32(state &gt;&gt; 32) // 当前计数值\n        w := uint32(state) // waiter的数量\n        if v == 0 {\n            // 如果计数值为0, 调用这个方法的goroutine不必再等待，继续执行它后面的逻辑即可\n            return\n        }\n        // 否则把waiter数量加1。期间可能有并发调用Wait的情况，所以最外层使用了一个for循环\n        if atomic.CompareAndSwapUint64(statep, state, state+1) {\n            // 阻塞休眠等待\n            runtime_Semacquire(semap)\n            // 被唤醒，不再阻塞，返回\n            return\n        }\n    }\n}\n</code></pre><h2>使用WaitGroup时的常见错误</h2><p>在分析WaitGroup的Add、Done和Wait方法的实现的时候，为避免干扰，我删除了异常检查的代码。但是，这些异常检查非常有用。</p><p>我们在开发的时候，经常会遇见或看到误用WaitGroup的场景，究其原因就是没有弄明白这些检查的逻辑。所以接下来，我们就通过几个小例子，一起学习下在开发时绝对要避免的3个问题。</p><h3>常见问题一：计数器设置为负值</h3><p>WaitGroup的计数器的值必须大于等于0。我们在更改这个计数值的时候，WaitGroup会先做检查，如果计数值被设置为负数，就会导致panic。</p><p>一般情况下，有两种方法会导致计数器设置为负数。</p><p>第一种方法是：<strong>调用Add的时候传递一个负数</strong>。如果你能保证当前的计数器加上这个负数后还是大于等于0的话，也没有问题，否则就会导致panic。</p><p>比如下面这段代码，计数器的初始值为10，当第一次传入-10的时候，计数值被设置为0，不会有啥问题。但是，再紧接着传入-1以后，计数值就被设置为负数了，程序就会出现panic。</p><pre><code>func main() {\n    var wg sync.WaitGroup\n    wg.Add(10)\n\n    wg.Add(-10)//将-10作为参数调用Add，计数值被设置为0\n\n    wg.Add(-1)//将-1作为参数调用Add，如果加上-1计数值就会变为负数。这是不对的，所以会触发panic\n}\n</code></pre><p>第二个方法是：<strong>调用Done方法的次数过多，超过了WaitGroup的计数值</strong>。</p><p><strong>使用WaitGroup的正确姿势是，预先确定好WaitGroup的计数值，然后调用相同次数的Done完成相应的任务</strong>。比如，在WaitGroup变量声明之后，就立即设置它的计数值，或者在goroutine启动之前增加1，然后在goroutine中调用Done。</p><p>如果你没有遵循这些规则，就很可能会导致Done方法调用的次数和计数值不一致，进而造成死锁（Done调用次数比计数值少）或者panic（Done调用次数比计数值多）。</p><p>比如下面这个例子中，多调用了一次Done方法后，会导致计数值为负，所以程序运行到这一行会出现panic。</p><pre><code>func main() {\n    var wg sync.WaitGroup\n    wg.Add(1)\n\n    wg.Done()\n\n    wg.Done()\n}\n</code></pre><h3>常见问题二：不期望的Add时机</h3><p>在使用WaitGroup的时候，你一定要遵循的原则就是，<strong>等所有的Add方法调用之后再调用Wait</strong>，否则就可能导致panic或者不期望的结果。</p><p>我们构造这样一个场景：只有部分的Add/Done执行完后，Wait就返回。我们看一个例子：启动四个goroutine，每个goroutine内部调用Add(1)然后调用Done()，主goroutine调用Wait等待任务完成。</p><pre><code>func main() {\n    var wg sync.WaitGroup\n    go dosomething(100, &amp;wg) // 启动第一个goroutine\n    go dosomething(110, &amp;wg) // 启动第二个goroutine\n    go dosomething(120, &amp;wg) // 启动第三个goroutine\n    go dosomething(130, &amp;wg) // 启动第四个goroutine\n\n    wg.Wait() // 主goroutine等待完成\n    fmt.Println(&quot;Done&quot;)\n}\n\nfunc dosomething(millisecs time.Duration, wg *sync.WaitGroup) {\n    duration := millisecs * time.Millisecond\n    time.Sleep(duration) // 故意sleep一段时间\n\n    wg.Add(1)\n    fmt.Println(&quot;后台执行, duration:&quot;, duration)\n    wg.Done()\n}\n</code></pre><p>在这个例子中，我们原本设想的是，等四个goroutine都执行完毕后输出Done的信息，但是它的错误之处在于，将WaitGroup.Add方法的调用放在了子gorotuine中。等主goorutine调用Wait的时候，因为四个任务goroutine一开始都休眠，所以可能WaitGroup的Add方法还没有被调用，WaitGroup的计数还是0，所以它并没有等待四个子goroutine执行完毕才继续执行，而是立刻执行了下一步。</p><p>导致这个错误的原因是，没有遵循先完成所有的Add之后才Wait。要解决这个问题，一个方法是，预先设置计数值：</p><pre><code>func main() {\n    var wg sync.WaitGroup\n    wg.Add(4) // 预先设定WaitGroup的计数值\n\n    go dosomething(100, &amp;wg) // 启动第一个goroutine\n    go dosomething(110, &amp;wg) // 启动第二个goroutine\n    go dosomething(120, &amp;wg) // 启动第三个goroutine\n    go dosomething(130, &amp;wg) // 启动第四个goroutine\n\n    wg.Wait() // 主goroutine等待\n    fmt.Println(&quot;Done&quot;)\n}\n\nfunc dosomething(millisecs time.Duration, wg *sync.WaitGroup) {\n    duration := millisecs * time.Millisecond\n    time.Sleep(duration)\n\n    fmt.Println(&quot;后台执行, duration:&quot;, duration)\n    wg.Done()\n}\n\n</code></pre><p>另一种方法是在启动子goroutine之前才调用Add：</p><pre><code>func main() {\n    var wg sync.WaitGroup\n\n    dosomething(100, &amp;wg) // 调用方法，把计数值加1，并启动任务goroutine\n    dosomething(110, &amp;wg) // 调用方法，把计数值加1，并启动任务goroutine\n    dosomething(120, &amp;wg) // 调用方法，把计数值加1，并启动任务goroutine\n    dosomething(130, &amp;wg) // 调用方法，把计数值加1，并启动任务goroutine\n\n    wg.Wait() // 主goroutine等待，代码逻辑保证了四次Add(1)都已经执行完了\n    fmt.Println(&quot;Done&quot;)\n}\n\nfunc dosomething(millisecs time.Duration, wg *sync.WaitGroup) {\n    wg.Add(1) // 计数值加1，再启动goroutine\n\n    go func() {\n        duration := millisecs * time.Millisecond\n        time.Sleep(duration)\n        fmt.Println(&quot;后台执行, duration:&quot;, duration)\n        wg.Done()\n    }()\n}\n\n</code></pre><p>可见，无论是怎么修复，都要保证所有的Add方法是在Wait方法之前被调用的。</p><h3>常见问题三：前一个Wait还没结束就重用WaitGroup</h3><p>“前一个Wait还没结束就重用WaitGroup”这一点似乎不太好理解，我借用田径比赛的例子和你解释下吧。在田径比赛的百米小组赛中，需要把选手分成几组，一组选手比赛完之后，就可以进行下一组了。为了确保两组比赛时间上没有冲突，我们在模型化这个场景的时候，可以使用WaitGroup。</p><p>WaitGroup等一组比赛的所有选手都跑完后5分钟，才开始下一组比赛。下一组比赛还可以使用这个WaitGroup来控制，因为<strong>WaitGroup是可以重用的</strong>。只要WaitGroup的计数值恢复到零值的状态，那么它就可以被看作是新创建的WaitGroup，被重复使用。</p><p>但是，如果我们在WaitGroup的计数值还没有恢复到零值的时候就重用，就会导致程序panic。我们看一个例子，初始设置WaitGroup的计数值为1，启动一个goroutine先调用Done方法，接着就调用Add方法，Add方法有可能和主goroutine并发执行。</p><pre><code>func main() {\n    var wg sync.WaitGroup\n    wg.Add(1)\n    go func() {\n        time.Sleep(time.Millisecond)\n        wg.Done() // 计数器减1\n        wg.Add(1) // 计数值加1\n    }()\n    wg.Wait() // 主goroutine等待，有可能和第7行并发执行\n}\n</code></pre><p>在这个例子中，第6行虽然让WaitGroup的计数恢复到0，但是因为第9行有个waiter在等待，如果等待Wait的goroutine，刚被唤醒就和Add调用（第7行）有并发执行的冲突，所以就会出现panic。</p><p>总结一下：WaitGroup虽然可以重用，但是是有一个前提的，那就是必须等到上一轮的Wait完成之后，才能重用WaitGroup执行下一轮的Add/Wait，如果你在Wait还没执行完的时候就调用下一轮Add方法，就有可能出现panic。</p><h2>noCopy：辅助vet检查</h2><p>我们刚刚在学习WaitGroup的数据结构时，提到了里面有一个noCopy字段。你还记得它的作用吗？其实，它就是指示vet工具在做检查的时候，这个数据结构不能做值复制使用。更严谨地说，是不能在第一次使用之后复制使用( must not be copied after first use)。</p><p>你可能会说了，为什么要把noCopy字段单独拿出来讲呢？一方面，把noCopy字段穿插到waitgroup代码中讲解，容易干扰我们对WaitGroup整体的理解。另一方面，也是非常重要的原因，noCopy是一个通用的计数技术，其他并发原语中也会用到，所以单独介绍有助于你以后在实践中使用这个技术。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/296541\">第3讲</a>学习Mutex的时候用到了vet工具。vet会对实现Locker接口的数据类型做静态检查，一旦代码中有复制使用这种数据类型的情况，就会发出警告。但是，WaitGroup同步原语不就是Add、Done和Wait方法吗？vet能检查出来吗？</p><p>其实是可以的。通过给WaitGroup添加一个noCopy字段，我们就可以为WaitGroup实现Locker接口，这样vet工具就可以做复制检查了。而且因为noCopy字段是未输出类型，所以WaitGroup不会暴露Lock/Unlock方法。</p><p>noCopy字段的类型是noCopy，它只是一个辅助的、用来帮助vet检查用的类型:</p><pre><code>type noCopy struct{}\n\n// Lock is a no-op used by -copylocks checker from `go vet`.\nfunc (*noCopy) Lock()   {}\nfunc (*noCopy) Unlock() {}\n\n</code></pre><p>如果你想要自己定义的数据结构不被复制使用，或者说，不能通过vet工具检查出复制使用的报警，就可以通过嵌入noCopy这个数据类型来实现。</p><h2>流行的Go开发项目中的坑</h2><p>接下来又到了喝枸杞红枣茶的时间了。你可以稍微休息一下，心态放轻松地跟我一起围观下知名项目犯过的错，比如copy Waitgroup、Add/Wait并发执行问题、遗漏Add等Bug。</p><p>有网友在Go的<a href=\"https://github.com/golang/go/issues/28123\">issue 28123</a>中提了以下的例子，你能发现这段代码有什么问题吗？</p><pre><code>type TestStruct struct {\n\tWait sync.WaitGroup\n}\n\nfunc main() {\n\tw := sync.WaitGroup{}\n\tw.Add(1)\n\tt := &amp;TestStruct{\n\t\tWait: w,\n\t}\n\n\tt.Wait.Done()\n\tfmt.Println(&quot;Finished&quot;)\n}\n</code></pre><p>这段代码最大的一个问题，就是第9行copy了WaitGroup的实例w。虽然这段代码能执行成功，但确实是违反了WaitGroup使用之后不要复制的规则。在项目中，我们可以通过vet工具检查出这样的错误。</p><p>Docker <a href=\"https://github.com/moby/moby/issues/28161\">issue 28161</a> 和 <a href=\"https://github.com/moby/moby/issues/27011\">issue 27011</a>  ，都是因为在重用WaitGroup的时候，没等前一次的Wait结束就Add导致的错误。Etcd <a href=\"https://github.com/etcd-io/etcd/issues/6534\">issue 6534</a> 也是重用WaitGroup的Bug，没有等前一个Wait结束就Add。</p><p>Kubernetes <a href=\"https://github.com/kubernetes/kubernetes/pull/59574\">issue 59574</a> 的Bug是忘记Wait之前增加计数了，这就属于我们通常认为几乎不可能出现的Bug。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/f8/3ff86f54893c23d997113440a3a0e2f8.png?wh=1122*680\" alt=\"\"></p><p>即使是开发Go语言的开发者自己，在使用WaitGroup的时候，也可能会犯错。比如 <a href=\"https://github.com/golang/go/issues/12813\">issue 12813</a>，因为defer的使用，Add方法可能在Done之后才执行，导致计数负值的panic。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/5c/2f69127691a431300478d7d7d1c7bd5c.png?wh=1129*391\" alt=\"\"></p><h2>总结</h2><p>学完这一讲，我们知道了使用WaitGroup容易犯的错，是不是有些手脚被束缚的感觉呢？其实大可不必，只要我们不是特别复杂地使用WaitGroup，就不用有啥心理负担。</p><p>而关于如何避免错误使用WaitGroup的情况，我们只需要尽量保证下面5点就可以了：</p><ul>\n<li>不重用WaitGroup。新建一个WaitGroup不会带来多大的资源开销，重用反而更容易出错。</li>\n<li>保证所有的Add方法调用都在Wait之前。</li>\n<li>不传递负数给Add方法，只通过Done来给计数值减1。</li>\n<li>不做多余的Done方法调用，保证Add的计数值和Done方法调用的数量是一样的。</li>\n<li>不遗漏Done方法的调用，否则会导致Wait hang住无法返回。</li>\n</ul><p>这一讲我们详细学习了WaitGroup的相关知识，这里我整理了一份关于WaitGroup的知识地图，方便你复习。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/ff/845yyf00c6db85c0yy59867e6de77dff.jpg?wh=2250*1741\" alt=\"\"></p><h2>思考题</h2><p>通常我们可以把WaitGroup的计数值，理解为等待要完成的waiter的数量。你可以试着扩展下WaitGroup，来查询WaitGroup的当前的计数值吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得有所收获，也欢迎你把今天的内容分享给你的朋友或同事。</p>","comments":[{"had_liked":false,"id":257967,"user_name":"Dragon Frog","can_delete":false,"product_type":"c1","uid":1510621,"ip_address":"","ucode":"6B4A2ECFA818E2","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/dd/1b12d77d.jpg","comment_is_top":false,"comment_ctime":1604227564,"is_pvip":true,"replies":[{"id":"93923","content":"没错，你理解的对","user_name":"作者回复","comment_id":257967,"uid":"1066613","ip_address":"","utype":1,"ctime":1604279936,"user_name_real":"鸟窝"}],"discussion_count":8,"race_medal":0,"score":"66028737004","product_id":100061801,"comment_content":"老师好！接 linxs 同学的提问，我觉得他是一开始没表述清楚问题，我之前也有类似的疑问，后来仔细想了想我是这么理解这个问题的，也想请教老师看理解的<br>--------------------------------------------------<br>为什么32bit系统的处理上，state1的元素排列和64bit的不同呢<br>64bit ： waiter,counter,sem<br>32bit ： sem,waiter,counter<br>------------------------------------------------------<br><br>首先要理解的是**内存对齐**，32 位机和 64 位机的差别在于每次读取的块大小不同，前者一次读取 4 字节的块，后者一次读取 8 字节的块。<br><br> `WaitGroup` 的大小是 12 字节，接下来我声明了一个 `var wg sync.WaitGroup`，假设此处 wg 的内存地址是 0xc420016240，此时这个地址是 64bit 对齐的，因此这里的重点是**不论是 32 位机器还是 64 位机器，state1 的元素排列都是 `waiter,counter,sem`**。wg 的地址空间是 `0xc420016240~0xc42001624c`，因此如果此时是 64 位机的话还有4字节的空间可以分配给其他大小合适的变量。那此时 state1 的排列能不能是 `sem,waiter,counter` 呢？不能，因为 64 bit 值的原子操作必须 64 bit 对齐。<br><br>对于 32 位机器就会有一种**特殊情况**，那就是 wg 的内存地址起始被分配到了 0xc420016244，此时这个地址不是 64 bit 对齐的，因此这个时候排列变成了 `sem,waiter,counter`，这样的话，`waiter` 的起始地址变成了 0xc420016248，可以使用 64 bit 值的原子操作。<br><br><br>","like_count":16,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508512,"discussion_content":"没错，你理解的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604279936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388765,"discussion_content":"不过我还是奇怪的一点就是 32位机每次读取就是32位 那么顺序是什么不是应该不重要吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628941564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348872,"discussion_content":"什么叫地址64位对齐...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612762394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674992,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8e/f0/18720510.jpg","nickname":"50%","note":"","ucode":"3E4247B5844B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322798,"discussion_content":"之前没想明白，你一说我明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604818778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088303,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9b/2f/db466c67.jpg","nickname":"HD","note":"","ucode":"3F61B901BB9245","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320774,"discussion_content":"请问为什么在32bit的时候，因为sem,waiter,counter的长度都是一样的，排列的顺序会变呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604475892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1510621,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0c/dd/1b12d77d.jpg","nickname":"Dragon Frog","note":"","ucode":"6B4A2ECFA818E2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1088303,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9b/2f/db466c67.jpg","nickname":"HD","note":"","ucode":"3F61B901BB9245","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321149,"discussion_content":"并不是说 32bit 机器一定会变，而是可能会变，会不会变取决于分配地址的时候是不是 64 bit 对齐，对齐就依旧是 `waiter,counter,sem`，否则就是 `sem,waiter,counter`","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604542071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320774,"ip_address":""},"score":321149,"extra":""},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1510621,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0c/dd/1b12d77d.jpg","nickname":"Dragon Frog","note":"","ucode":"6B4A2ECFA818E2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":388762,"discussion_content":"明白了 就是决定初始的地址决定排列顺序 然后为了消除随机性做的准备","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628939912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321149,"ip_address":""},"score":388762,"extra":""},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1510621,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0c/dd/1b12d77d.jpg","nickname":"Dragon Frog","note":"","ucode":"6B4A2ECFA818E2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":388766,"discussion_content":"这个64bit对齐有点像烟雾弹 32位的机器怎么会64位对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628942083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321149,"ip_address":""},"score":388766,"extra":""}]}]},{"had_liked":false,"id":255924,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1603457697,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"44553130657","product_id":100061801,"comment_content":"关于64位对齐，这个帖子讲的也不错，分享一下。https:&#47;&#47;go101.org&#47;article&#47;memory-layout.html","like_count":10,"discussions":[{"author":{"id":1191550,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2e/7e/ebc28e10.jpg","nickname":"NULL","note":"","ucode":"2A323DD05352BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538404,"discussion_content":"这本书也有中文版的 https://gfw.go101.org/article/memory-layout.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639403222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255947,"user_name":"橙子888","can_delete":false,"product_type":"c1","uid":1447790,"ip_address":"","ucode":"8FB8A9AAE526E3","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/6e/76b4aa3d.jpg","comment_is_top":false,"comment_ctime":1603464592,"is_pvip":false,"replies":[{"id":"93217","content":"Done是在另外的goroutine执行的。保证不了先后顺序","user_name":"作者回复","comment_id":255947,"uid":"1066613","ip_address":"","utype":1,"ctime":1603501767,"user_name_real":"鸟窝"}],"discussion_count":2,"race_medal":0,"score":"23078301072","product_id":100061801,"comment_content":"issue 12813 按照 defer 后进先出的原则，Done 一定会在 Add 之前执行吧，为啥是“可能”呢？","like_count":5,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507886,"discussion_content":"Done是在另外的goroutine执行的。保证不了先后顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603501767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447790,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/6e/76b4aa3d.jpg","nickname":"橙子888","note":"","ucode":"8FB8A9AAE526E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317104,"discussion_content":"动手实验了下，确实如老师所说，不同 goroutine 的defer 是保证不了先后顺序的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603506051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286568,"user_name":"寻风","can_delete":false,"product_type":"c1","uid":2230331,"ip_address":"","ucode":"A5294CF85BDA50","user_header":"https://static001.geekbang.org/account/avatar/00/22/08/3b/6fbc7ea0.jpg","comment_is_top":false,"comment_ctime":1617377847,"is_pvip":false,"replies":[{"id":"104105","content":"对，保证指令在这些cpu架构上不会panic","user_name":"作者回复","comment_id":286568,"uid":"1066613","ip_address":"","utype":1,"ctime":1617449525,"user_name_real":"鸟窝"}],"discussion_count":1,"race_medal":0,"score":"14502279735","product_id":100061801,"comment_content":"老师你好，我想问一下，为啥64位的int要保证原子操作就一定要64位对齐呢，那么为啥要这样规定呢？之前看到atomic文档后面说了一句就是就是说有部分32位处理器需要使用者自行对齐来保证atomic包中方法的正确性，是不是就是因为waitgroup用了atomic包的东西，为了保证atomic使用的正确才有这样的规定。<br><br>atomic文档的内容是：On ARM, x86-32, and 32-bit MIPS, it is the caller’s responsibility to arrange for 64-bit alignment of 64-bit words accessed atomically. The first word in a variable or in an allocated struct, array, or slice can be relied upon to be 64-bit aligned.","like_count":4,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518031,"discussion_content":"对，保证指令在这些cpu架构上不会panic","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617449525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267613,"user_name":"( ･᷄ὢ･᷅ )","can_delete":false,"product_type":"c1","uid":2234129,"ip_address":"","ucode":"E5F5EDEBB74C46","user_header":"https://static001.geekbang.org/account/avatar/00/22/17/11/a63acc6a.jpg","comment_is_top":false,"comment_ctime":1607845762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492747650","product_id":100061801,"comment_content":"刚才那个作业没完全 这回加上了 32位和64位的区分，因为没有32位测试环境 所以仅测试了64位<br>type WaitGroup struct {<br>\tsync.WaitGroup<br>}<br><br>func (receiver *WaitGroup) GetCounter32()uint32   {<br>\tpointer:=unsafe.Pointer(&amp;receiver.WaitGroup)<br>\treturn *(*uint32)(unsafe.Pointer(uintptr(pointer)+8))<br>}<br>func (receiver *WaitGroup) GetCounter64()uint32   {<br>\tpointer:=unsafe.Pointer(&amp;receiver.WaitGroup)<br>\treturn *(*uint32)(unsafe.Pointer(uintptr(pointer)+4))<br>}<br><br>func main() {<br> a:=WaitGroup{}<br> a.Add(19999)<br> fmt.Println(a.GetCounter64())<br>}","like_count":4},{"had_liked":false,"id":256622,"user_name":"moooofly","can_delete":false,"product_type":"c1","uid":1008348,"ip_address":"","ucode":"4A20795C281B6F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/dc/8876c73b.jpg","comment_is_top":false,"comment_ctime":1603692306,"is_pvip":false,"replies":[{"id":"93408","content":"对","user_name":"作者回复","comment_id":256622,"uid":"1066613","ip_address":"","utype":1,"ctime":1603699285,"user_name_real":"鸟窝"}],"discussion_count":1,"race_medal":0,"score":"14488594194","product_id":100061801,"comment_content":"没理解错的话，waiter 数量对应的应该是调用 Wait() 的 goroutine 的数量吧，文中的示例代码都只是在 main goroutine 中调用一次，所以 waiter 数量都只是 1 ，没错吧","like_count":3,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508070,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603699285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296087,"user_name":"一笑淡然","can_delete":false,"product_type":"c1","uid":1165645,"ip_address":"","ucode":"477ACF40DD74B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/4d/89a764b5.jpg","comment_is_top":false,"comment_ctime":1622736625,"is_pvip":false,"replies":[{"id":"107515","content":"主要是保证操作的是一个对齐的64bit,否则可能panic","user_name":"作者回复","comment_id":296087,"uid":"1066613","ip_address":"","utype":1,"ctime":1622883027,"user_name_real":"鸟窝"}],"discussion_count":4,"race_medal":0,"score":"10212671217","product_id":100061801,"comment_content":"老师好，Add() 中，先将delta&lt;&lt;32位，加入counter，是不是counter应该在waiter位前，即<br>64bit ： counter,waiter,,sem<br>32bit ： sem,counter,waiter","like_count":2,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521318,"discussion_content":"主要是保证操作的是一个对齐的64bit,否则可能panic","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622883027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591780,"discussion_content":"counter存在statep指向的64位空间里的高32位，肯定在waiter后面啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666805665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2678376,"avatar":"https://static001.geekbang.org/account/avatar/00/28/de/68/27ea710e.jpg","nickname":"阿卷","note":"","ucode":"E9B433370B1772","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545811,"discussion_content":"同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642056748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400664,"discussion_content":"有同样的疑问，提问的意思是，根据代码逻辑 stat1数组中，应该是conter数量在前，waiter数量在后吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633359914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295060,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1622200177,"is_pvip":false,"replies":[{"id":"107113","content":"Yeah","user_name":"作者回复","comment_id":295060,"uid":"1066613","ip_address":"","utype":1,"ctime":1622204502,"user_name_real":"鸟窝"}],"discussion_count":2,"race_medal":0,"score":"10212134769","product_id":100061801,"comment_content":"32位&#47;64位对齐的思考：<br>如果内存地址不是64位对齐，则让seman填充第一个32位，这样子就可以使得后面的state以64位对齐（因为state存储的两个值要同步修改）。","like_count":2,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520929,"discussion_content":"Yeah","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622204502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1556358,"avatar":"https://static001.geekbang.org/account/avatar/00/17/bf/86/c0cb35f0.jpg","nickname":"8.13.3.27.30","note":"","ucode":"2DE3CE3E338BAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534527,"discussion_content":"test同学,虽然我还没看实际代码是不是一定要2个值同时修改,但是看到你的分析和老师的回答,已经明白一大半了,这个问题捆牢了我好久,原来目的是为了后面2个能同步修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638201553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255760,"user_name":"Junes","can_delete":false,"product_type":"c1","uid":1354665,"ip_address":"","ucode":"CD2E829C868970","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/a9/590d6f02.jpg","comment_is_top":false,"comment_ctime":1603423061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193357653","product_id":100061801,"comment_content":"思路：主要难点在于32位和64位时的处理，具体逻辑就参考sync.WaiterGroup源码中的state()方法，跟老师的示例图互相映证。<br><br>实现：<br>func getStateAndWait(wgp *sync.WaitGroup) (uint32, uint32) {<br>\tvar statep *uint64<br>\tif uintptr(unsafe.Pointer(wgp))%8 == 0 {<br>\t\tstatep = (*uint64)(unsafe.Pointer(wgp))<br>\t} else {<br>\t\tstatep = (*uint64)(unsafe.Pointer(uintptr(unsafe.Pointer(wgp)) + unsafe.Sizeof(uint32(0))))<br>\t}<br>\treturn uint32(*statep &gt;&gt; 32), uint32(*statep)<br>}<br><br>注意点：<br>1.  这里用了一个函数来实现，更常见的可以自己封一个类。用函数实现时注意用指针传递wg<br>2. 返回的两个值分别是state和wait，state是要完成的waiter计数值（即等待多少个goroutine完成）；wait是指有多少个sync.Wait在等待（和前面的waiter不是一个概念）。<br><br>最后谈一点：<br>nocopy这个字段之前一直没有注意，没想到还有这么巧妙的方法~","like_count":2},{"had_liked":false,"id":270674,"user_name":"蒋巧纯","can_delete":false,"product_type":"c1","uid":1583251,"ip_address":"","ucode":"7975A4C5706096","user_header":"https://static001.geekbang.org/account/avatar/00/18/28/93/88a1ee95.jpg","comment_is_top":false,"comment_ctime":1609212973,"is_pvip":false,"replies":[{"id":"98207","content":"因为需要同时原子更新多个值，分开设置就不是原子操作了","user_name":"作者回复","comment_id":270674,"uid":"1066613","ip_address":"","utype":1,"ctime":1609223210,"user_name_real":"鸟窝"}],"discussion_count":1,"race_medal":0,"score":"5904180269","product_id":100061801,"comment_content":"老师好，我想问一下，为什么不在waitgroup中使用32位的原子操作？state1代表的三个值，其实都各占32bit，分离他们并且使用32位的原子操作，不是应该更好理解吗？","like_count":1,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512710,"discussion_content":"因为需要同时原子更新多个值，分开设置就不是原子操作了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609223210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256579,"user_name":"linxs","can_delete":false,"product_type":"c1","uid":1006728,"ip_address":"","ucode":"0D860DF26FD150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/88/9575e5d3.jpg","comment_is_top":false,"comment_ctime":1603682640,"is_pvip":true,"replies":[{"id":"93388","content":"因为32bit上是32bit的对齐的，state1<br>地址不一定正好是8byte对齐","user_name":"作者回复","comment_id":256579,"uid":"1066613","ip_address":"","utype":1,"ctime":1603686499,"user_name_real":"鸟窝"}],"discussion_count":3,"race_medal":0,"score":"5898649936","product_id":100061801,"comment_content":"为什么32bit系统的处理上，state1的元素排列和64bit的不同呢<br>64bit ： waiter,counter,sem<br>32bit ： sem,waiter,counter","like_count":1,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508061,"discussion_content":"因为32bit上是32bit的对齐的，state1\n地址不一定正好是8byte对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603686499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006728,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/88/9575e5d3.jpg","nickname":"linxs","note":"","ucode":"0D860DF26FD150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318279,"discussion_content":"其实这里主要不太明白：如果state1地址不是8bytes对齐的话，为什么要把信号量`sema`作为state1的第一个元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603695911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1006728,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/88/9575e5d3.jpg","nickname":"linxs","note":"","ucode":"0D860DF26FD150","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":388772,"discussion_content":"如果不是64bit对齐 那么第一个是sema 那么writer的地址就是 64bit对齐了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628944462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318279,"ip_address":""},"score":388772,"extra":""}]}]},{"had_liked":false,"id":255731,"user_name":"新味道","can_delete":false,"product_type":"c1","uid":2227527,"ip_address":"","ucode":"979E3574082CE7","user_header":"https://static001.geekbang.org/account/avatar/00/21/fd/47/499339d1.jpg","comment_is_top":false,"comment_ctime":1603419289,"is_pvip":false,"replies":[{"id":"93171","content":"这个是运行时的实现，用来阻塞当前goroutine. 它会把当前g放入队列，标记成waiting,让渡m","user_name":"作者回复","comment_id":255731,"uid":"1066613","ip_address":"","utype":1,"ctime":1603428446,"user_name_real":"鸟窝"}],"discussion_count":1,"race_medal":0,"score":"5898386585","product_id":100061801,"comment_content":"  &#47;&#47; 阻塞休眠等待            <br>runtime_Semacquire(semap)<br>--------------<br><br>没理解『阻塞休眠等待』的意思，能否再详细讲一下。 ","like_count":1,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507817,"discussion_content":"这个是运行时的实现，用来阻塞当前goroutine. 它会把当前g放入队列，标记成waiting,让渡m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603428446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354608,"user_name":"The brain is a good thing","can_delete":false,"product_type":"c1","uid":1710489,"ip_address":"北京","ucode":"7CE2C85BC5C092","user_header":"https://static001.geekbang.org/account/avatar/00/1a/19/99/ba3719e1.jpg","comment_is_top":false,"comment_ctime":1660609820,"is_pvip":true,"replies":[{"id":"129141","content":"这个我需要修正下。 64位架构下，uint32并不能保证是64bit对齐的。有可能是对齐的，也有可能不是对齐的。所以官方实现并不是判断架构，而是检查地址是否64bit对齐。<br><br>比如下面的代码,单独使用时可能是64bit对齐，但是嵌入到另一个struct 中又不是64bit对齐。<br><br>```go<br>type waitGroup struct {<br>\tstate1 [3]uint32<br>}<br><br>type A struct {<br>\ta  uint32<br>\twg waitGroup<br>}<br><br>func main() {<br>\tvar wg waitGroup<br><br>\tfmt.Println(unsafe.Alignof(wg.state1))<br>\tfmt.Println(unsafe.Pointer(&amp;wg.state1))<br>\tfmt.Println(uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0) &#47;&#47;true<br><br>\tvar a A<br><br>\tfmt.Println(unsafe.Alignof(a.wg.state1))<br>\tfmt.Println(unsafe.Pointer(&amp;a.wg.state1))<br>\tfmt.Println(uintptr(unsafe.Pointer(&amp;a.wg.state1))%8 == 0) &#47;&#47;false<br>}<br><br>```<br><br>谢谢你指出问题","user_name":"作者回复","comment_id":354608,"uid":"1066613","ip_address":"北京","utype":1,"ctime":1660968360,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1660609820","product_id":100061801,"comment_content":"有个疑问：<br>查阅到的资料：<br>为了充分利用CPU指令来达到最佳程序性能，为一个特定类型的值开辟的内存块的起始地址必须为某个整数N的倍数。 N被称为此类型的值地址对齐保证。  <br><br>type waitGroup struct {<br>\t\tstate1 [3]uint32<br>}<br>\tvar wg waitGroup<br>\tfmt.Println(unsafe.Alignof(wg.state1))<br>\tfmt.Println(uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0)<br><br>这里系统架构是64位，但输出的对齐保证是 4，并且%8 ！=0，<br><br>为什么原文中64位架构下，起始地址一定是64位（8字节，8N）对齐<br>uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0<br><br>求解答，是不是哪里理解错误了","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584617,"discussion_content":"这个我需要修正下。 64位架构下，uint32并不能保证是64bit对齐的。有可能是对齐的，也有可能不是对齐的。所以官方实现并不是判断架构，而是检查地址是否64bit对齐。\n\n比如下面的代码,单独使用时可能是64bit对齐，但是嵌入到另一个struct 中又不是64bit对齐。\n\n```go\ntype waitGroup struct {\n\tstate1 [3]uint32\n}\n\ntype A struct {\n\ta  uint32\n\twg waitGroup\n}\n\nfunc main() {\n\tvar wg waitGroup\n\n\tfmt.Println(unsafe.Alignof(wg.state1))\n\tfmt.Println(unsafe.Pointer(&amp;wg.state1))\n\tfmt.Println(uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0) //true\n\n\tvar a A\n\n\tfmt.Println(unsafe.Alignof(a.wg.state1))\n\tfmt.Println(unsafe.Pointer(&amp;a.wg.state1))\n\tfmt.Println(uintptr(unsafe.Pointer(&amp;a.wg.state1))%8 == 0) //false\n}\n\n```\n\n谢谢你指出问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660968360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337833,"user_name":"GEEKBANG_5295513","can_delete":false,"product_type":"c1","uid":1267792,"ip_address":"","ucode":"F54C5284C551D4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTINObH6BicJCaorsWLcYs1QAvFt2wiaoRWHp5MQegAAJCrPH66Ucjgg5bpTOH78yvGwHzanhHPOc7VQ/132","comment_is_top":false,"comment_ctime":1647085290,"is_pvip":false,"replies":[{"id":"123603","content":"源代码中有说明，这里没有并发问题。<br>&#47;&#47; This goroutine has set counter to 0 when waiters &gt; 0.\t&#47;&#47; Now there can&#39;t be concurrent mutations of state:\t&#47;&#47; - Adds must not happen concurrently with Wait,\t&#47;&#47; - Wait does not increment waiters if it sees counter == 0.\t&#47;&#47; Still do a cheap sanity check to detect WaitGroup misuse.","user_name":"作者回复","comment_id":337833,"uid":"1066613","ip_address":"","utype":1,"ctime":1647271356,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1647085290","product_id":100061801,"comment_content":"老师好，请教一个问题<br><br>func (wg *WaitGroup) Add(delta int) {<br>    statep, semap := wg.state()<br>    &#47;&#47; 高32bit是计数值v，所以把delta左移32，增加到计数上<br>    state := atomic.AddUint64(statep, uint64(delta)&lt;&lt;32)<br>    v := int32(state &gt;&gt; 32) &#47;&#47; 当前计数值<br>    w := uint32(state) &#47;&#47; waiter count<br><br>    if v &gt; 0 || w == 0 {<br>        return<br>    }<br><br>    &#47;&#47; 如果计数值v为0并且waiter的数量w不为0，那么state的值就是waiter的数量<br>    &#47;&#47; 将waiter的数量设置为0，因为计数值v也是0,所以它们俩的组合*statep直接设置为0即可。此时需要并唤醒所有的waiter<br>    *statep = 0<br>    for ; w != 0; w-- {<br>        runtime_Semrelease(semap, false, 0)<br>    }<br>}<br><br>在这段代码中，*statep = 0 这里没有用原子操作，不会有问题么？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556268,"discussion_content":"源代码中有说明，这里没有并发问题。\n// This goroutine has set counter to 0 when waiters &gt; 0.\t// Now there can&#39;t be concurrent mutations of state:\t// - Adds must not happen concurrently with Wait,\t// - Wait does not increment waiters if it sees counter == 0.\t// Still do a cheap sanity check to detect WaitGroup misuse.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647271356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336704,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1646300986,"is_pvip":true,"replies":[{"id":"123061","content":"Z注释你得看全。32位和64位环境下是不一样的","user_name":"作者回复","comment_id":336704,"uid":"1066613","ip_address":"","utype":1,"ctime":1646373982,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":1,"score":"1646300986","product_id":100061801,"comment_content":" 关于 WaitGroup state1 三部分含义是不是 counter,waiter,sema<br>看了代码和注释都是证明这一点<br>&#47;&#47; 64-bit value: high 32 bits are counter, low 32 bits are waiter count.<br>state := atomic.AddUint64(statep, uint64(delta)&lt;&lt;32)<br>v := int32(state &gt;&gt; 32)<br>w := uint32(state)<br><br>老师画的图是不是有问题？<br><br>","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554426,"discussion_content":"Z注释你得看全。32位和64位环境下是不一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646373982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336250,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1646033118,"is_pvip":false,"replies":[{"id":"122916","content":"指state中用来记录waiter的那部分值","user_name":"作者回复","comment_id":336250,"uid":"1066613","ip_address":"","utype":1,"ctime":1646108168,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1646033118","product_id":100061801,"comment_content":"老师思考题第一句：通常我们可以把 WaitGroup 的计数值，理解为等待要完成的 waiter 的数量<br>这里没明白，计数值就是waiter数量吗？那state里的计数值和waiter值岂不是重复了？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553821,"discussion_content":"指state中用来记录waiter的那部分值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646108168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321843,"user_name":"Geek6666","can_delete":false,"product_type":"c1","uid":2689372,"ip_address":"","ucode":"47927165B348AB","user_header":"","comment_is_top":false,"comment_ctime":1637062443,"is_pvip":false,"replies":[{"id":"117243","content":"这个新版本的wg有些许修改，总得来说就是为了64位对齐","user_name":"作者回复","comment_id":321843,"uid":"1066613","ip_address":"","utype":1,"ctime":1637681932,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1637062443","product_id":100061801,"comment_content":"不知道这个时候提出疑问，老师还会不会看的<br><br>对于func (wg *WaitGroup) state() (statep *uint64, semap *uint32) 函数，我的理解是由于要兼容64位的uint64原子操作，所以要判断内存对齐情况，这里只是判断wg.state1的地址是否是8个字节对齐的，如果是8字节对齐，就使用 waiter,counter,sem的顺序，结论就是不管是32位还是64位，只要wg.state1的地址是8字节对齐，就使用 waiter,counter,sem的顺序，，和大家的理解都不一致，不知道对错","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532775,"discussion_content":"这个新版本的wg有些许修改，总得来说就是为了64位对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637681932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319739,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1635925840,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635925840","product_id":100061801,"comment_content":"没人解答思考题，我贴下结果，请老师们看看是否正确：<br>func calcWaitGroupCount() {<br>\t&#47;&#47; 获取 WaitGroup 的计数值<br>\tvar wg sync.WaitGroup<br><br>\twg.Add(20)<br>\t&#47;&#47; state1 [3]uint32，当前是 64bit 的<br>\t&#47;&#47; state1[0]：Waiter数目，也就是调用了 Wait() 的 goroutine 的数量<br>\t&#47;&#47; state1[1]：计数值<br><br>\tfor i := 10; i &gt; 0; i-- {<br>\t\tgo func(i int) {<br>\t\t\twg.Wait()<br>\t\t}(i)<br>\t}<br><br>\ttime.Sleep(1 * time.Second)<br>\tptr := (*uint64)(unsafe.Pointer((uintptr(unsafe.Pointer(&amp;wg)))))<br>\tcounter := int32(*ptr &gt;&gt; 32)<br>\twaiters := uint32(*ptr)<br>\tlog.Printf(&quot;waiters:%d, counter:%d&quot;, waiters, counter)<br><br>\twg.Add(-20)<br>\twg.Wait()<br>}","like_count":0},{"had_liked":false,"id":318044,"user_name":"Geek8956","can_delete":false,"product_type":"c1","uid":2689403,"ip_address":"","ucode":"BF7EF77F174B79","user_header":"","comment_is_top":false,"comment_ctime":1635130884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635130884","product_id":100061801,"comment_content":"结构体的state（）函数中，“if uintptr(unsafe.Pointer(&amp;wg.state1))%8 == 0 {”中的这个模8。这个就在判断state1的其实地址，是不是64位对齐的。","like_count":0},{"had_liked":false,"id":296088,"user_name":"一笑淡然","can_delete":false,"product_type":"c1","uid":1165645,"ip_address":"","ucode":"477ACF40DD74B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/4d/89a764b5.jpg","comment_is_top":false,"comment_ctime":1622736683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622736683","product_id":100061801,"comment_content":"老师好，Add() 中，先将delta&lt;&lt;32位，加入counter，是不是counter位应该在waiter位前，即<br>64bit：counter,waiter,,sem<br>32bit：sem,counter,waiter","like_count":0},{"had_liked":false,"id":293711,"user_name":"姜小凡","can_delete":false,"product_type":"c1","uid":1026976,"ip_address":"","ucode":"C8D9FD73075E47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/a0/0cf3cd63.jpg","comment_is_top":false,"comment_ctime":1621501720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621501720","product_id":100061801,"comment_content":"我还是习惯用go的扩展 ErrorGroup","like_count":0},{"had_liked":false,"id":286054,"user_name":"王麒","can_delete":false,"product_type":"c1","uid":1265260,"ip_address":"","ucode":"330017C5A911B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4e/6c/71020c59.jpg","comment_is_top":false,"comment_ctime":1617122419,"is_pvip":false,"replies":[{"id":"105594","content":"vet需要知道你要不要检查复制，nocopy给vet提示：请检查","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1620333661,"ip_address":"","comment_id":286054,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617122419","product_id":100061801,"comment_content":"如果你想要自己定义的数据结构不被复制使用，或者说，不能通过 vet 工具检查出复制使用的报警，就可以通过嵌入 noCopy 这个数据类型来实现。<br>这里不应该是能通过vet工具检查出复制吗。。看起来怪怪的。","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517859,"discussion_content":"vet需要知道你要不要检查复制，nocopy给vet提示：请检查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620333661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256395,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1603617125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603617125","product_id":100061801,"comment_content":"如果有一个goroutine先调用了runtime_Semrelease，之后另一个goroutine调用runtime_Semacquire，应该不会阻塞而是立即返回吧？考虑到如下场景：Wait方法假如执行完13行，此时Done方法整个执行完成，之后Wait方法执行15行。","like_count":0},{"had_liked":false,"id":255961,"user_name":"地下城勇士","can_delete":false,"product_type":"c1","uid":1739992,"ip_address":"","ucode":"91ACD73D56A9F1","user_header":"","comment_is_top":false,"comment_ctime":1603466753,"is_pvip":false,"replies":[{"id":"93216","content":"就是这个goroutine被设置成waiting,让渡出M。相当于进入休眠状态，需要别人唤醒它，它才能继续工作","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1603501353,"ip_address":"","comment_id":255961,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603466753","product_id":100061801,"comment_content":"「可以阻塞等待的 goroutine。等到三个小任务都完成了，再即时唤醒它们」<br>---<br>老师，没有理解这句话是什么意思？什么叫阻塞等待？还有完成了，为什么还要唤醒？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507889,"discussion_content":"就是这个goroutine被设置成waiting,让渡出M。相当于进入休眠状态，需要别人唤醒它，它才能继续工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603501353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255863,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1807836,"ip_address":"","ucode":"F26BC1F14AB0D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","comment_is_top":false,"comment_ctime":1603446542,"is_pvip":false,"replies":[{"id":"93188","content":"1补码，看godoc<br>2复制一份代码，重用","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1603449438,"ip_address":"","comment_id":255863,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603446542","product_id":100061801,"comment_content":"老师好，有两个疑问，谢谢。<br><br>1.wg.Add(-1) <br>这个方法是在Done中调用的。但是我没太理解 -1的时候，是怎么减去的。我在Add中的代码中看到<br>state := atomic.AddUint64(statep, uint64(delta)&lt;&lt;32)<br>我在想一个uint64是一个无符号的，是怎么做到减一呢<br><br>2.noCopy<br>像老师最后说的，想把我们自己写的一些struct组合以便通过vet可以进行复制检测。但是这个类型是私有的啊？该怎么使用,有没有样例，谢谢老师。","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507855,"discussion_content":"1补码，看godoc\n2复制一份代码，重用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603449438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255857,"user_name":"橙子888","can_delete":false,"product_type":"c1","uid":1447790,"ip_address":"","ucode":"8FB8A9AAE526E3","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/6e/76b4aa3d.jpg","comment_is_top":false,"comment_ctime":1603444738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603444738","product_id":100061801,"comment_content":"先打卡，然后慢慢消化……","like_count":0},{"had_liked":false,"id":255798,"user_name":"oCupJS","can_delete":false,"product_type":"c1","uid":2244547,"ip_address":"","ucode":"D37DAD8B0FEB50","user_header":"https://static001.geekbang.org/account/avatar/00/22/3f/c3/7431e82e.jpg","comment_is_top":false,"comment_ctime":1603433783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603433783","product_id":100061801,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":255736,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1603419835,"is_pvip":false,"replies":[{"id":"93169","content":"1.那个原子操作要求64位对齐<br>2.那段逻辑是如果发现state1不是64对齐的，那么可以推断跳过32位后就是64位对齐了","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1603428243,"ip_address":"","comment_id":255736,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1603419835","product_id":100061801,"comment_content":"请问老师，waitgroup里state1里提到对 64 位整数的原子操作要求整数的地址是 64 位对齐的，不是很理解，能否提供例子说明下呢？<br>另外在32位对齐的图例里，也有个64位对齐指示，是什么含义呢？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507820,"discussion_content":"1.那个原子操作要求64位对齐\n2.那段逻辑是如果发现state1不是64对齐的，那么可以推断跳过32位后就是64位对齐了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603428243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317922,"discussion_content":"哈哈哈，感觉没说一样，可能篇幅所限吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603617082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}