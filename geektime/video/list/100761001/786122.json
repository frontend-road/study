{"id":786122,"title":"28｜理解约束（constraint）","content":"","comments":[{"had_liked":false,"id":391885,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1719329535,"is_pvip":false,"replies":[{"id":142470,"content":"非常不错。越来越得心应手了","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1719503257,"ip_address":"江苏","comment_id":391885,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; 作业： ReverseTuple\ntype TupleCase = [1, &#39;2&#39;, true, null, undefined, { a: Map&lt;string, unknown&gt;}, [], (() =&gt; void), never];\n\ntype ReverseTuple&lt;T extends unknown[], R extends unknown[] = []&gt; = T extends [infer First, ...infer Rest] ?\n  ReverseTuple&lt;Rest, [First, ...R]&gt; :\n  R;\n\ntype Result = ReverseTuple&lt;TupleCase&gt;;\n\n&#47;&#47; 探究: 遍历Tuple成员的过程\ntype WhatHappenInTraversalTuple&lt;T extends any[]&gt; = T extends [infer First, ...infer Rest] ?\n  WhatHappenInTraversalTuple&lt;Rest&gt; |  [First, &#39;&#39;]:\n  [T,&#39;EOF&#39;];\ntype Happened = WhatHappenInTraversalTuple&lt;TupleCase&gt;;&#47;&#47; 可以发现 T 最终会会变成 []\n&#47;&#47; [[], &quot;EOF&quot;] | [never, &quot;&quot;] | [() =&gt; void, &quot;&quot;] | [[], &quot;&quot;] | [{a: Map&lt;string, unknown&gt;;}, &quot;&quot;] | [undefined, &quot;&quot;] | [null, &quot;&quot;] | [true, &quot;&quot;] | [&quot;2&quot;, &quot;&quot;] | [1, &quot;&quot;]\ntype ReverseTuple0&lt;T extends unknown[], R extends unknown[] = []&gt; = T extends [] ? [&#39;muti branch: first&#39;, R] :\n  T extends [infer First, ...infer Rest] ?\n    ReverseTuple0&lt;Rest, [First, ...R]&gt; :\n    [&#39;muti branch: second&#39;, R];\n\ntype ReverseTuple1&lt;T extends unknown[], R extends unknown[] = []&gt; = T extends [infer First, ...infer Rest] ?\n    ReverseTuple1&lt;Rest, [First, ...R]&gt; :\n    [&#39;one branch&#39;, R];\n\ntype Res0 = ReverseTuple0&lt;TupleCase&gt;; &#47;&#47; 进入手动添加的第一个分支:判断 T 为 [] 提前 终止循环\ntype Res1 = ReverseTuple1&lt;TupleCase&gt;; &#47;&#47; T 为 [] 会自动进入 false 分支\n\n&#47;&#47; 原理 类似 &quot;&quot; extends `${infer A}${infer B}` ? [A,B] : never\ntype Principle = [] extends [infer First, ...infer Rest] ? [First, Rest] : never;&#47;&#47; 计算结果为 never","like_count":2,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647126,"discussion_content":"非常不错。越来越得心应手了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1719503258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396282,"user_name":"fatme","can_delete":false,"product_type":"c3","uid":1034451,"ip_address":"广东","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1733846822,"is_pvip":false,"replies":[{"id":143855,"content":"ReverseTuple&lt;&gt;很OK~ 不过课外题其实可以更简单：\n```\ntype T5 = keyof typeof E;\n```\n你觉得E的key中不应该包括number，所以你试图在映射中去排除它。但是既然E本身就“没有&#47;不存在”number类型的key，那么何必再处理它呢？","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1733897109,"ip_address":"江苏","comment_id":396282,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; 作业\ntype ReverseTuple&lt;T extends any[], Result extends any[] = []&gt; = T extends [infer First, ...infer Rest] ? [...ReverseTuple&lt;Rest&gt;, First] : Result;\ntype T = [&#39;a&#39;, &#39;b&#39;, 1, number, never];\ntype T2 = ReverseTuple&lt;T&gt;;\n\n&#47;&#47; 课外题\nenum E {\n    A, B, C, D=&#39;d&#39;\n}\ntype T5 = keyof {\n    [k in keyof typeof E as (\n        number extends k ? never : k\n    )]: k;\n};","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654966,"discussion_content":"ReverseTuple&lt;&gt;很OK~ 不过课外题其实可以更简单：\n```\ntype T5 = keyof typeof E;\n```\n你觉得E的key中不应该包括number，所以你试图在映射中去排除它。但是既然E本身就“没有/不存在”number类型的key，那么何必再处理它呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733897109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}