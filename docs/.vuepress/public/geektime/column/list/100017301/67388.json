{"id":67388,"title":"22 | 哈希算法（下）：哈希算法在分布式系统中有哪些应用？","content":"<p>上一节，我讲了哈希算法的四个应用，它们分别是：安全加密、数据校验、唯一标识、散列函数。今天，我们再来看剩余三种应用：<strong>负载均衡、数据分片、分布式存储</strong>。</p><p>你可能已经发现，这三个应用都跟分布式系统有关。没错，今天我就带你看下，<strong><span class=\"orange\">哈希算法是如何解决这些分布式问题的</span></strong>。</p><h2>应用五：负载均衡</h2><p>我们知道，负载均衡算法有很多，比如轮询、随机、加权轮询等。那如何才能实现一个会话粘滞（session sticky）的负载均衡算法呢？也就是说，我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上。</p><p>最直接的方法就是，维护一张映射关系表，这张表的内容是客户端IP地址或者会话ID与服务器编号的映射关系。客户端发出的每次请求，都要先在映射表中查找应该路由到的服务器编号，然后再请求编号对应的服务器。这种方法简单直观，但也有几个弊端：</p><ul>\n<li>\n<p>如果客户端很多，映射表可能会很大，比较浪费内存空间；</p>\n</li>\n<li>\n<p>客户端下线、上线，服务器扩容、缩容都会导致映射失效，这样维护映射表的成本就会很大；</p>\n</li>\n</ul><p>如果借助哈希算法，这些问题都可以非常完美地解决。<strong>我们可以通过哈希算法，对客户端IP地址或者会话ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。</strong> 这样，我们就可以把同一个IP过来的所有请求，都路由到同一个后端服务器上。</p><!-- [[[read_end]]] --><h2>应用六：数据分片</h2><p>哈希算法还可以用于数据的分片。我这里有两个例子。</p><h3>1.如何统计“搜索关键词”出现的次数？</h3><p>假如我们有1T的日志文件，这里面记录了用户的搜索关键词，我们想要快速统计出每个关键词被搜索的次数，该怎么做呢？</p><p>我们来分析一下。这个问题有两个难点，第一个是搜索日志很大，没办法放到一台机器的内存中。第二个难点是，如果只用一台机器来处理这么巨大的数据，处理时间会很长。</p><p>针对这两个难点，<strong>我们可以先对数据进行分片，然后采用多台机器处理的方法，来提高处理速度</strong>。具体的思路是这样的：为了提高处理的速度，我们用n台机器并行处理。我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟n取模，最终得到的值，就是应该被分配到的机器编号。</p><p>这样，哈希值相同的搜索关键词就被分配到了同一个机器上。也就是说，同一个搜索关键词会被分配到同一个机器上。每个机器会分别计算关键词出现的次数，最后合并起来就是最终的结果。</p><p>实际上，这里的处理过程也是MapReduce的基本设计思想。</p><h3>2.如何快速判断图片是否在图库中？</h3><p>如何快速判断图片是否在图库中？上一节我们讲过这个例子，不知道你还记得吗？当时我介绍了一种方法，即给每个图片取唯一标识（或者信息摘要），然后构建散列表。</p><p>假设现在我们的图库中有1亿张图片，很显然，在单台机器上构建散列表是行不通的。因为单台机器的内存有限，而1亿张图片构建散列表显然远远超过了单台机器的内存上限。</p><p>我们同样可以对数据进行分片，然后采用多机处理。我们准备n台机器，让每台机器只维护某一部分图片对应的散列表。我们每次从图库中读取一个图片，计算唯一标识，然后与机器个数n求余取模，得到的值就对应要分配的机器编号，然后将这个图片的唯一标识和图片路径发往对应的机器构建散列表。</p><p>当我们要判断一个图片是否在图库中的时候，我们通过同样的哈希算法，计算这个图片的唯一标识，然后与机器个数n求余取模。假设得到的值是k，那就去编号k的机器构建的散列表中查找。</p><p>现在，我们来估算一下，给这1亿张图片构建散列表大约需要多少台机器。</p><p>散列表中每个数据单元包含两个信息，哈希值和图片文件的路径。假设我们通过MD5来计算哈希值，那长度就是128比特，也就是16字节。文件路径长度的上限是256字节，我们可以假设平均长度是128字节。如果我们用链表法来解决冲突，那还需要存储指针，指针只占用8字节。所以，散列表中每个数据单元就占用152字节（这里只是估算，并不准确）。</p><p>假设一台机器的内存大小为2GB，散列表的装载因子为0.75，那一台机器可以给大约1000万（2GB*0.75/152）张图片构建散列表。所以，如果要对1亿张图片构建索引，需要大约十几台机器。在工程中，这种估算还是很重要的，能让我们事先对需要投入的资源、资金有个大概的了解，能更好地评估解决方案的可行性。</p><p>实际上，针对这种海量数据的处理问题，我们都可以采用多机分布式处理。借助这种分片的思路，可以突破单机内存、CPU等资源的限制。</p><h2>应用七：分布式存储</h2><p>现在互联网面对的都是海量的数据、海量的用户。我们为了提高数据的读取、写入能力，一般都采用分布式的方式来存储数据，比如分布式缓存。我们有海量的数据需要缓存，所以一个缓存机器肯定是不够的。于是，我们就需要将数据分布在多台机器上。</p><p>该如何决定将哪个数据放到哪个机器上呢？我们可以借用前面数据分片的思想，即通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号。</p><p>但是，如果数据增多，原来的10个机器已经无法承受了，我们就需要扩容了，比如扩到11个机器，这时候麻烦就来了。因为，这里并不是简单地加个机器就可以了。</p><p>原来的数据是通过与10来取模的。比如13这个数据，存储在编号为3这台机器上。但是新加了一台机器中，我们对数据按照11取模，原来13这个数据就被分配到2号这台机器上了。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/7c/138b060ee522cd2eae83c0c31a16bc7c.jpg?wh=1142*674\" alt=\"\"></p><p>因此，所有的数据都要重新计算哈希值，然后重新搬移到正确的机器上。这样就相当于，缓存中的数据一下子就都失效了。所有的数据请求都会穿透缓存，直接去请求数据库。这样就可能发生<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%AA%E5%B4%A9%E6%95%88%E5%BA%94\">雪崩效应</a>，压垮数据库。</p><p>所以，我们需要一种方法，使得在新加入一个机器后，并不需要做大量的数据搬移。这时候，<strong>一致性哈希算法</strong>就要登场了。</p><p>假设我们有k个机器，数据的哈希值的范围是[0, MAX]。我们将整个范围划分成m个小区间（m远大于k），每个机器负责m/k个小区间。当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡。</p><p>一致性哈希算法的基本思想就是这么简单。除此之外，它还会借助一个虚拟的环和虚拟结点，更加优美地实现出来。这里我就不展开讲了，如果感兴趣，你可以看下这个<a href=\"https://en.wikipedia.org/wiki/Consistent_hashing\">介绍</a>。</p><p>除了我们上面讲到的分布式缓存，实际上，一致性哈希算法的应用非常广泛，在很多分布式存储系统中，都可以见到一致性哈希算法的影子。</p><h2>解答开篇&amp;内容小结</h2><p>这两节的内容理论不多，比较贴近具体的开发。今天我讲了三种哈希算法在分布式系统中的应用，它们分别是：负载均衡、数据分片、分布式存储。</p><p>在负载均衡应用中，利用哈希算法替代映射表，可以实现一个会话粘滞的负载均衡策略。在数据分片应用中，通过哈希算法对处理的海量数据进行分片，多机分布式处理，可以突破单机资源的限制。在分布式存储应用中，利用一致性哈希算法，可以解决缓存等分布式系统的扩容、缩容导致数据大量搬移的难题。</p><h2>课后思考</h2><p>这两节我总共讲了七个哈希算法的应用。实际上，我讲的也只是冰山一角，哈希算法还有很多其他的应用，比如网络协议中的CRC校验、Git commit id等等。除了这些，你还能想到其他用到哈希算法的地方吗？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","comments":[{"had_liked":false,"id":37804,"user_name":"ban","can_delete":false,"product_type":"c1","uid":1034204,"ip_address":"","ucode":"E523CE97E48266","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","comment_is_top":false,"comment_ctime":1541731784,"is_pvip":false,"discussion_count":32,"race_medal":0,"score":"1547729958344","product_id":100017301,"comment_content":"一致性算法讲的有的有点抽象，不够详细。我网上找到一个漫画图解，各位可以参考一下：https:&#47;&#47;www.sohu.com&#47;a&#47;158141377_479559","like_count":360,"discussions":[{"author":{"id":1218347,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","nickname":"Geek_37984c","note":"","ucode":"7A319AE28599B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214077,"discussion_content":"http://www.zsythink.net/archives/1182 可以看","likes_number":34,"is_delete":false,"is_hidden":false,"ctime":1585145023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1218347,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","nickname":"Geek_37984c","note":"","ucode":"7A319AE28599B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295206,"discussion_content":"从头到尾看完了，写得确实好！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596118889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214077,"ip_address":""},"score":295206,"extra":""},{"author":{"id":2286193,"avatar":"","nickname":"Geek_253ff0","note":"","ucode":"03AE08DC7A05A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1218347,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","nickname":"Geek_37984c","note":"","ucode":"7A319AE28599B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337047,"discussion_content":"确实还不错，其实之前并不了解分布式系统，这篇文章很不错，适合新手看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608781248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214077,"ip_address":""},"score":337047,"extra":""},{"author":{"id":1897788,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f5/3c/0a0247d9.jpg","nickname":"ShawnZ","note":"","ucode":"1A37744CCE0DD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1218347,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","nickname":"Geek_37984c","note":"","ucode":"7A319AE28599B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557488,"discussion_content":"体贴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647833716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214077,"ip_address":""},"score":557488,"extra":""}]},{"author":{"id":1048286,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/de/2019f370.jpg","nickname":"jony","note":"","ucode":"80765A6B9ABA0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3341,"discussion_content":"一致性hash算法这个讲得不错：http://www.zsythink.net/archives/1182","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1564409917,"is_liked":true,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1646323,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1e/f3/fe4273fe.jpg","nickname":"徐亮","note":"","ucode":"1EE4C515C4F319","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048286,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/de/2019f370.jpg","nickname":"jony","note":"","ucode":"80765A6B9ABA0D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16316,"discussion_content":"看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568884203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3341,"ip_address":""},"score":16316,"extra":""}]},{"author":{"id":1060908,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/2c/333d7080.jpg","nickname":"Northern","note":"","ucode":"6B8DB4CF385029","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85793,"discussion_content":"https://www.jianshu.com/p/570dc8913c20\n是这个链接，没毛病","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1576575976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1858552,"avatar":"","nickname":"Geek_c359d5","note":"","ucode":"1C3B7F9E625A48","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300010,"discussion_content":"链接失效了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597908777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226340,"discussion_content":"各位大佬，请教一个问题：哈希函数计算出来的hash值，是一个字符串呢还是一个数字哇？如果是一个字符串，那大家一直再说的取模%到底是个啥意思？难道字符串可以直接对数字进行取模运算呢？哪一门编程语言可以这样做？？？还是我理解有误？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1586432422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1955569,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/d6/f1/4fc06657.jpg","nickname":"zoran","note":"","ucode":"E3EF3A9DDB89B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":231945,"discussion_content":"是数字，原始数据可以是字符串","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586840249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226340,"ip_address":""},"score":231945,"extra":""},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1955569,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/d6/f1/4fc06657.jpg","nickname":"zoran","note":"","ucode":"E3EF3A9DDB89B9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232939,"discussion_content":"java 中有一个叫hashcode的东西，任何一个对象或者类型都会对应一个hashcode，所以计算出来的字符串也有一个与之对应的hashcode，从而可以进行取模运算","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586879575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":231945,"ip_address":""},"score":232939,"extra":""},{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":283283,"discussion_content":"有些hash函数比如xxHash32/64，算出来的就是对应4/8个字节的整数，因此可以直接取模；比如MD5计算出来是字节数组，16个字节(32个16进制位)，这样最大的uint64也不支持，但是可以利用取模的规则进行转换：(x + y) % m = (x %m + y % m) % m，这样对于任意长度的字符串都可以取模了，比如MD5的16进制表示为：f561aaf6ef0bf14d4208bb46a4ccb3ad，对m = 25取模python大致写法如下：\nr = &#39;f561aaf6ef0bf14d4208bb46a4ccb3ad&#39;\nans, m = 0, 25\nfor c in r:\n    ans = (ans * 16 + int(c, 16)) % m\nprint(ans)\n最后ans为17就是取余的结果","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1592228458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226340,"ip_address":""},"score":283283,"extra":""}]},{"author":{"id":2756739,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","nickname":"利威尔兵长","note":"","ucode":"FDE0BD5BFB1B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394639,"discussion_content":"http://www.zsythink.net/archives/1182对一致性哈希讲的很比较清楚","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1631967668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2694205,"avatar":"https://static001.geekbang.org/account/avatar/00/29/1c/3d/76465ee4.jpg","nickname":"摘星","note":"","ucode":"55D8CAFC938F91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2756739,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","nickname":"利威尔兵长","note":"","ucode":"FDE0BD5BFB1B4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404819,"discussion_content":"感谢！ 讲得贼好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634428996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":394639,"ip_address":""},"score":404819,"extra":""}]},{"author":{"id":1039464,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/68/006ba72c.jpg","nickname":"Untitled","note":"","ucode":"8DD6ABA3E81A2E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313308,"discussion_content":"这个连接的最后有点像哈希值，是不是web服务器提供的图片路径也是一个hash值来命名？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603028891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390978,"discussion_content":"这一节几个案例感觉讲的都不够详细","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630208391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1916587,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq9Kq8OPa3fzicibQS7OKYkC08QuhmMDmkQ0zX5rDUQeKMsOIDibq42vKVqAcIYqCoM2b5p0vTvO14iaA/132","nickname":"人间有妖气","note":"","ucode":"1E98DFCAB3BADD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299834,"discussion_content":"你们的链接都失效了，文章中的一些链接也打不开了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597832584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2445066,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4f/0a/0ebfbb01.jpg","nickname":"征服天堂","note":"","ucode":"686ED7ECC00004","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1916587,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq9Kq8OPa3fzicibQS7OKYkC08QuhmMDmkQ0zX5rDUQeKMsOIDibq42vKVqAcIYqCoM2b5p0vTvO14iaA/132","nickname":"人间有妖气","note":"","ucode":"1E98DFCAB3BADD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360129,"discussion_content":"文章中一些链接可能是维基百科，需要翻墙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616376637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299834,"ip_address":""},"score":360129,"extra":""}]},{"author":{"id":1991279,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","nickname":"Geek_Akara","note":"","ucode":"E86A5A9EEC8BFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269771,"discussion_content":"这个跟老师讲的是一个例子： https://yikun.github.io/2016/06/09/一致性哈希算法的理解与实践/","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589948679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1858552,"avatar":"","nickname":"Geek_c359d5","note":"","ucode":"1C3B7F9E625A48","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1991279,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","nickname":"Geek_Akara","note":"","ucode":"E86A5A9EEC8BFF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300011,"discussion_content":"这个链接也失效了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597908806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":269771,"ip_address":""},"score":300011,"extra":""}]},{"author":{"id":1007330,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/e2/1fad3052.jpg","nickname":"Jemmy","note":"","ucode":"A979F4A5210225","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214027,"discussion_content":"Emmm 在新闻网站学技术 这个信息噪点是不是有点太高了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585142048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24963,"discussion_content":"404","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570347902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2715388,"avatar":"","nickname":"Geek8535","note":"","ucode":"D1919541632C95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413627,"discussion_content":"https://www.zsythink.net/archives/1182\nhttps://yikun.github.io/2016/06/09/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E8%B7%B5/\n用这2个链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636530026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388417,"discussion_content":"链接都是404","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628756642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1149567,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8a/7f/788a33b1.jpg","nickname":"老乡快跑💨","note":"","ucode":"E8581B00E71DCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376722,"discussion_content":"redis集群模式的存储也属于hash一致性的体现吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622292976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","nickname":"蚂蚁内推+v","note":"","ucode":"24B10AEE54B3FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296,"discussion_content":"老哥，链接不存在了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561433668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1186807,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f7/45e8b64a.jpg","nickname":"Fire","note":"","ucode":"4A2C50B77EDB2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1050508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","nickname":"蚂蚁内推+v","note":"","ucode":"24B10AEE54B3FD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651,"discussion_content":"我猜应该是这个：https://www.jianshu.com/p/570dc8913c20","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1561880583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296,"ip_address":""},"score":651,"extra":""},{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1186807,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f7/45e8b64a.jpg","nickname":"Fire","note":"","ucode":"4A2C50B77EDB2C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3253,"discussion_content":"程序员小灰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564357077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":651,"ip_address":""},"score":3253,"extra":""},{"author":{"id":1034204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","nickname":"ban","note":"","ucode":"E523CE97E48266","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1186807,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f7/45e8b64a.jpg","nickname":"Fire","note":"","ucode":"4A2C50B77EDB2C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12909,"discussion_content":"是这个，原链接坏了，看不到的可以看这个链接。\n\n由程序员小灰出品","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568609912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":651,"ip_address":""},"score":12909,"extra":""}]}]},{"had_liked":false,"id":37777,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1541727082,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"1010859041642","product_id":100017301,"comment_content":"一致性哈希算法，举个栗子：<br>我们钟表有 60 分钟，从 0 开始到 59，共 60 个点。<br>现在我们将机器往这 60 个点分配，规则如下：<br>hash(ip) % 60。<br><br>假设有 3 台机器 A，B 和 C，分别被分配到了 14，37 和 46 这三个点上。<br><br>图片的分配规则类似：<br>hash(image_id) % 60。<br>现有 3 张图片 x， y， z，分别被分配到 5，30，50 这三个点。<br><br>很明示，图片都没被分配到机器的节点上，怎么办呢?在钟表上顺时钟往前寻找，第一台遇到的机器，就是它的归属。<br><br>--- 我是分割线 ---<br><br>现在很不凑巧，A B C 三台机器分别分配到 5，10，15 这三个点。这样对 A 是很不公平的吖，要负责存储绝大多数的图片，那这怎么办呢?我们社会主义核心价值观基本内容：和谐、平等、公正。为建设和谐社会努力奋斗！！<br><br>为了避免不必要的争端，我们引入“虚拟节点”，每台机器都可以拔一根汗毛，变成若干台，把虚拟节点分散到 60 个点上，归属“虚拟节点”的图片，均保存到它的真身。这样就能解决分配不均匀的问题。<br><br>------<br><br>应用时，将 60 替换下即可，如替换为 2的 32 次方。","like_count":235,"discussions":[{"author":{"id":1916587,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq9Kq8OPa3fzicibQS7OKYkC08QuhmMDmkQ0zX5rDUQeKMsOIDibq42vKVqAcIYqCoM2b5p0vTvO14iaA/132","nickname":"人间有妖气","note":"","ucode":"1E98DFCAB3BADD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299835,"discussion_content":"这就是作者一句话带过的“环”","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597832721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188142,"avatar":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","nickname":"Z宇锤锤","note":"","ucode":"7DB36E986A7A51","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542249,"discussion_content":"那我有一个想不明白的点，那加机器咋整。有真身需要使用代码这些汗毛呢。进行数据迁移么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640690679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2730834,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ab/52/7da45fc4.jpg","nickname":"Lancer","note":"","ucode":"6F0D2FBA72E69A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389228,"discussion_content":"一句“社会主义核心价值观”把我逗笑了，不过说的挺好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629184619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318598,"discussion_content":"高手。简单易懂。能自己说明白，是真的懂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603789218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2068721,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/90/f1/7f2b5e16.jpg","nickname":"CHN-Lee-玉米","note":"","ucode":"0A53080F38F229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301899,"discussion_content":"哈希环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598703894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809092,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9a/c4/7c49255a.jpg","nickname":"木对林三","note":"","ucode":"D31B48BB93D24B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226108,"discussion_content":"记得redis 集群也是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586421451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1691258,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ce/7a/3eabbfd4.jpg","nickname":"DirtyLiar จุ๊บ","note":"","ucode":"ADBBBA41E63B8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809092,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9a/c4/7c49255a.jpg","nickname":"木对林三","note":"","ucode":"D31B48BB93D24B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283878,"discussion_content":"不是，redis集群用的是hash槽","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1592388184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226108,"ip_address":""},"score":283878,"extra":""},{"author":{"id":1116403,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/f3/35773693.jpg","nickname":"非常非常非常非常的普通中下","note":"","ucode":"4D15549F5055D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1691258,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ce/7a/3eabbfd4.jpg","nickname":"DirtyLiar จุ๊บ","note":"","ucode":"ADBBBA41E63B8E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388537,"discussion_content":"切片集群用的是哈希槽，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628827255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":283878,"ip_address":""},"score":388537,"extra":""},{"author":{"id":1347740,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/9c/53d0f906.jpg","nickname":"黄豆豆","note":"","ucode":"5D47A4E3BAD3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809092,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9a/c4/7c49255a.jpg","nickname":"木对林三","note":"","ucode":"D31B48BB93D24B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567914,"discussion_content":"16384个槽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651027230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":226108,"ip_address":""},"score":567914,"extra":""}]}]},{"had_liked":false,"id":37797,"user_name":"Geek_fbe6fe","can_delete":false,"product_type":"c1","uid":1250069,"ip_address":"","ucode":"E69AD55364C93E","user_header":"https://static001.geekbang.org/account/avatar/00/13/13/15/5dabb390.jpg","comment_is_top":false,"comment_ctime":1541729815,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"315074342423","product_id":100017301,"comment_content":"跟着作者学习整个数据结构和算法，感觉如醍醐灌顶，好像整个世界被重新打开了，最近也想学习go所以用go实现了到目前为止的所有算法和数据结构，用于自己学习和理解希望对大家有帮助<br>https:&#47;&#47;github.com&#47;xiangdong1987&#47;studyAlgorithm<br>对于一致性算法：我理解是先从整体上将hash 分好区间m  在通过自己维护一套在K台机器上m区间的分布来实现不需要rehash 的扩容方式","like_count":73,"discussions":[{"author":{"id":1058801,"avatar":"https://static001.geekbang.org/account/avatar/00/10/27/f1/e4fc57a3.jpg","nickname":"无隅","note":"","ucode":"756E8D6E915FF0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577688,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656298779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39886,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1542375648,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"169046100192","product_id":100017301,"comment_content":"总结：哈希算法在分布式系统中的应用<br>1.负载均衡<br>1.1.需求<br>如何实现一个会话粘滞（session sticky）的负载均衡算法？也就是说，在一次会话中的所有请求都路由到同一个服务器上。<br>1.2.解决方案<br>通过哈希算法对客户端IP或会话ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。这样，就可以把同一个IP过来的请求都路由到同一个后端服务器上。<br>2.数据分片<br>2.1.如何统计“搜索关键词”出现的次数？<br>①需求描述<br>假如我们有1T的日志文件，这里面记录了用户的搜索关键词，我们想要快速统计出每个关键词被搜索的次数，该怎么做呢？<br>②问题分析<br>这个问题有两个难点，第一个是搜索的日子很大，没办法放到一台机器的内存中。第二个是只用一台机器来处理这么巨大的数据，处理时间会很长。<br>③解决方案<br>先对数据进行分片，然后采用多台（比如n台）机器进行处理。具体做法：从搜索记录的日志文件中依次读取每个关键词，并通过哈希函数计算该关键词的哈希值，然后跟机器的台数n取模，最终得到值就是该关键词应该被分到的机器编号，这样相同的关键词一定会被分配到同一台机器上，数据分配完成后，由多台机器并行进行统计，最后合并起来就是最终结果。<br>实际上，这里的处理过程也是 MapReduce 的基本设计思想。<br>2.2.如何快速判断图片是否存在图库中？<br>①需求描述<br>假设现在我们的图库中有1亿张图片，如何快速判断图片是否在图库中？基本方式是给每个图片去唯一表示（或者信息摘要），然后构建散列表。<br>②问题分析<br>很显然，在单台机器上构建散列表示行不通的，因为单台机器的内存有限，而1亿张图片构建散列表远远超过了单台机器的内存上限。<br>②解决方案<br>准备n台机器，让每台机器只维护一部分图片对应的散列表。我们每次从图库中读取一个图片，计算唯一标识，然后与机器个数n求余取模，得到的值就对应要分配的机器编号，然后将这个图片的唯一表示和图片路径发往对应的机器构建散列表。<br>当我们要判断一个图片是否在图库中时，我们通过同样的哈希算法，计算这个图片的唯一表示，然后与机器个数n求余取模。假设得到的值是k，那就去编号为k的机器构建的散列表中查找。<br>如何估算给1亿张图片构建散列表大约需要多少台机器？<br>散列表中每个数据单元包含两个信息，哈希值和图片文件的路径。假设我们通过 MD5 来计算哈希值，那长度就是 128 比特，也就是 16 字节。文件路径长度的上限是 256 字节，我们可以假设平均长度是 128 字节。如果我们用链表法来解决冲突，那还需要存储指针，指针只占用 8 字节。所以，散列表中每个数据单元就占用 152 字节（这里只是估算，并不准确）。<br>假设一台机器的内存大小为 2GB，散列表的装载因子为 0.75，那一台机器可以给大约 1000 万（2GB*0.75&#47;152）张图片构建散列表。所以，如果要对 1 亿张图片构建索引，需要大约十几台机器。在工程中，这种估算还是很重要的，能让我们事先对需要投入的资源、资金有个大概的了解，能更好地评估解决方案的可行性。<br>实际上，针对这种海量数据的处理问题，我们都可以采用多机分布式处理。借助这种分片的思路，可以突破单机内存、CPU 等资源的限制。<br>3.分布式存储<br>3.1.什么是分布式存储？<br>分布式存储就是将数据存储在多台机器上并提供高效的读取、写入支持。那如何决定将哪个数据放到哪个机器上呢？可以利用数据分片的思想，即通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号。<br>3.2.遇到的问题是什么？<br>如果数据持续增多，原来的机器数量已经不能满足需求，就需要增加机器，这时就麻烦了，因为所有的数据都需要重新哈希值进行再次分配。这就相当于，缓存中的数据一下子都失效了，所有的数据请求都会穿透缓存，直接去请求数据库。这样就可能发生雪崩效应，压垮数据库。<br>3.3.解决方案是什么？<br>①这时，需要一种方法，使得新加入一个机器后，并不需要做大量的数据搬移。那就是在分布式系统中应用非常广泛的一致性哈希算法。<br>②一致性哈希算法的基本思想是什么呢？为了说清楚这个问题，我们假设有k个机器，数据的哈希值范围是[0-MAX]，我们将整个范围划分成m个小区间（m远大于k），每个机器复杂m&#47;k个小区间。当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据量的均衡。","like_count":39,"discussions":[{"author":{"id":1753115,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","nickname":"ZMH.","note":"","ucode":"D45D6CEDFDF8F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226188,"discussion_content":"课代表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586427318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1382587,"avatar":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","nickname":"Null","note":"","ucode":"A7D4DF2A43C7D8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556384,"discussion_content":"课代表虽好，但是笔记太多了。有看笔记的时候，我重新看了文档。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647336619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37738,"user_name":"Hesher","can_delete":false,"product_type":"c1","uid":1026832,"ip_address":"","ucode":"99AB8B1704CB7E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","comment_is_top":false,"comment_ctime":1541722307,"is_pvip":false,"replies":[{"id":"13586","content":"主要是展开讲内容会很多 网上关于一致性哈希算法的文章很多 你可以看下我给的那个链接。这个算法的核心思想非常简单，网上讲的都很复杂 只是为了实现起来优美。","user_name":"作者回复","comment_id":37738,"uid":"1190123","ip_address":"","utype":1,"ctime":1541728008,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"156160544963","product_id":100017301,"comment_content":"一致性哈希算法没看懂，只能说看完文章知道了有这么个概念可以解决扩容rehash问题","like_count":36,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428470,"discussion_content":"主要是展开讲内容会很多 网上关于一致性哈希算法的文章很多 你可以看下我给的那个链接。这个算法的核心思想非常简单，网上讲的都很复杂 只是为了实现起来优美。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541728008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1817165,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/0qP9dQyibmPu1JUAan9bXEXZBAaOetRStstIcQDXZUFdU9jHb5W3RlNfCBI0kVkZzZTf6NbXwSY4IQqOsVSNQibw/132","nickname":"Geek_652490","note":"","ucode":"0612EE1FD02AF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348436,"discussion_content":"你可以这样理解:\n哈希值的取值范围构成一个哈希环\n节点和数据散列后较为均匀地分布在哈希环上\n每个节点负责存储他到环上下一个节点内的数据\n------------------------------------------------------------\n一致性哈希在节点退出时容易发生倾斜问题\n所以,工程实现(Memcached )中也有采用&#34;带有虚拟节点的一致性哈希算法&#34;\n另外,谷歌在17年的论文提出了&#34;带有限负载的一致性哈希算法&#34;,可以避免单节点负载过大导致宕机引发雪崩,HAProxy便是采用这种算法","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612569945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56586,"user_name":"鹏飞天下","can_delete":false,"product_type":"c1","uid":1101792,"ip_address":"","ucode":"EB9FFD9FE64A4C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/e0/f6819d03.jpg","comment_is_top":false,"comment_ctime":1546500111,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"147575388175","product_id":100017301,"comment_content":"一致性hash算法http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182","like_count":34,"discussions":[{"author":{"id":2849002,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/icN7228pbUMBKqdcysNzKFMAx7B5cf9vurZ0yyWricQcPKib42k7I0hhZLV8mPzKzazCtcmJz2LnR4CJEYUBxGLwg/132","nickname":"Geek_30a69d","note":"","ucode":"A153CDCB1F2E3E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533849,"discussion_content":"牛！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637993152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809885,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/bcIibiaSu84wkP1kD9iaWpSriaBVmXJDvOFg22jjsy9GBdx9L9eGzHmAA0ZbFnohdLl2c0WYXMvoDiaq99ANxI298Rg/132","nickname":"Geek_6cf199","note":"","ucode":"CDD7D46D3D9FAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274275,"discussion_content":"通过这篇看明白了，多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590561064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1901015,"avatar":"","nickname":"201201177","note":"","ucode":"8E2C0DB7A4D3D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243365,"discussion_content":"这文章看明白了，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587536317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1588610,"avatar":"","nickname":"cjxz","note":"","ucode":"9735F51D4721E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567,"discussion_content":"这个帖子讲的很好，但是我有个问题。假设1节点进入A服务器，这是增加了D服务器，D服务器在1节点和A服务器之间。那么再次寻找1节点的时候按照环的方式应该是去D服务器，但是此时1节点在A上面。该如何处理？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561709063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1485515,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/KB4590biaILdggH6ibRibQtlr7p2yONZCfeRK3QM9OSHrwyZrV8oSl5HuOHICl4lQtVoKgpHVydmxQ4peeYPmoIGA/132","nickname":"Chris","note":"","ucode":"712CD86AE8EB81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1588610,"avatar":"","nickname":"cjxz","note":"","ucode":"9735F51D4721E9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5480,"discussion_content":"这应该就是老师说的，“只要移动区间中的少部分就可以”。移动这些在之前节点中的数据，到新节点中，新映射的数据在新节点之前的就可以直接放在新节点中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566293715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":567,"ip_address":""},"score":5480,"extra":""}]}]},{"had_liked":false,"id":37730,"user_name":"会网络的老鼠","can_delete":false,"product_type":"c1","uid":1128708,"ip_address":"","ucode":"CFECDE8B67FE3C","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/04/a8817ecf.jpg","comment_is_top":false,"comment_ctime":1541719645,"is_pvip":false,"replies":[{"id":"13588","content":"👍 也是可以的","user_name":"作者回复","comment_id":37730,"uid":"1190123","ip_address":"","utype":1,"ctime":1541728074,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"121800803933","product_id":100017301,"comment_content":"上几节讲过扩容冗余算法，可以避免搬移数据，如果对当前n取模未中再对扩容前的m取模，直到都未中再返回值是不是也可以？","like_count":28,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428465,"discussion_content":"👍 也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541728074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318609,"discussion_content":"哪一节有扩容冗余算法？没有找到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603790004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2229978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/QUoGOYH4CHzI4mkNicwneAzCiaLH9VJKmnS6K2HHuxCWDTzPMMuZSl3frTeqhSRX6HNiaQfr3pMqhIVPrlHnBdwiaw/132","nickname":"Geek_a520ea","note":"","ucode":"D22BACAA5A3019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327316,"discussion_content":"19章避免低效的动态扩容那里提了一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605789327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318609,"ip_address":""},"score":327316,"extra":""}]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287691,"discussion_content":"是不是得记得从一开始进行过扩容、缩容的所有n的值？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593511032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50157,"user_name":"jiaobuchongจุ๊บ","can_delete":false,"product_type":"c1","uid":1118938,"ip_address":"","ucode":"0AEE4E579DC3A2","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg","comment_is_top":false,"comment_ctime":1544880853,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"100329128661","product_id":100017301,"comment_content":"一致性 hash 算法，这篇文章讲得挺好的：http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182","like_count":23,"discussions":[{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1804,"discussion_content":"看了，写的很明白，通俗易懂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562918884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232074,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1593850210,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"78903261538","product_id":100017301,"comment_content":"其实一致性hash的原理真的很简单，通常情况下，比如只有三台机器，那么计算好哈希值后就模3运算，等于几就分到哪台机器上。<br>然而到了一致性哈希这里，（前提还是3台机器）就不是模三运算了，而是模2^32次方运算，那么我们知道，最终计算的结果位于[0,2^32-1]内。<br>这时候关键来了，我们把整个计算结果空间想像成一个环，那么三台机器，会把这个环三等分。接下来，取模后的值，落在哪一等分就给哪一台机器处理。<br>也就是说，对于常规哈希，计算值和机器，是一对一的关系。一致性哈希，是多对一的关系。","like_count":18,"discussions":[{"author":{"id":1272031,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/df/7653ed08.jpg","nickname":"^_^","note":"","ucode":"801738927EFA91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338228,"discussion_content":"这个理解好👍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609218593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572915,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653040049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1972724,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cZb0G3d4NjRkQJib3icd3q9ePKcgkqwVyq5MIiapQ8TRmWJ0Dbe5JgMoUGxWvlGic5DcFxmSiancS2TrfiasqtCicrEKA/132","nickname":"chunyizanchi","note":"","ucode":"297598360CEDEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558084,"discussion_content":"这个可以，扫一下盲了~ 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648088815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37782,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1259814,"ip_address":"","ucode":"1608E84D2F0655","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/26/61e46afe.jpg","comment_is_top":false,"comment_ctime":1541727633,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"70261204369","product_id":100017301,"comment_content":"Redis集群就是应用的一致性哈希算法","like_count":16,"discussions":[{"author":{"id":1028698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","nickname":"Lukia","note":"","ucode":"C19472337BCCC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4459,"discussion_content":"严格来说好像是和一致性哈希相似的虚拟槽算法","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1565436322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1028698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","nickname":"Lukia","note":"","ucode":"C19472337BCCC6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322507,"discussion_content":"差距很大的吧.. 完全就是两种方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604756620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4459,"ip_address":""},"score":322507,"extra":""},{"author":{"id":2807877,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/d8/45/daeb3c30.jpg","nickname":"disiwei","note":"","ucode":"2E610597B20329","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411102,"discussion_content":"差距在哪儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635849854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322507,"ip_address":""},"score":411102,"extra":""}]},{"author":{"id":1513966,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/ee/6154cfd8.jpg","nickname":"🌜","note":"","ucode":"190C308B747FF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168412,"discussion_content":"redis集群用的是哈希槽（SLOT）的这种概念，主要的原因，一致性哈希算法对于数据分布、节点位置的控制并不是很友好，redis自己支持MOVE跳转请求，可以自己对槽点数据进行平滑迁移。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581579562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322506,"discussion_content":"不是哦 redis cluster使用的slots映射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604756576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104061,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/bd/57a119bf.jpg","nickname":"chen","note":"","ucode":"86C0A5A5A17DF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194789,"discussion_content":"不是一致性哈希哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583242814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98955,"user_name":"宁侠","can_delete":false,"product_type":"c1","uid":1021643,"ip_address":"","ucode":"EB7AC89D59ACCE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lMXLPxY3NF4g1IwdOAQhLicA0iaicDZ1uqKBXwM0dKibOQUP585K2dW9xibcXMCetwiajAk0eSs7H6YC98V8sHtPF47Q/132","comment_is_top":false,"comment_ctime":1559119670,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61688661814","product_id":100017301,"comment_content":"漫画：什么是一致性哈希？<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;yimfkNYF_tIJJqUIzV7TFA","like_count":14,"discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572916,"discussion_content":"感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653040083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192940,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/ec/f41da26c.jpg","nickname":"杨剑锋","note":"","ucode":"890BA54B313C2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348307,"discussion_content":"非常赞，http://www.zsythink.net/archives/1182中没有讲到具体的虚拟节点的实现，你推荐的漫画补充完整了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612506473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214784,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1588818790,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40243524454","product_id":100017301,"comment_content":"百度网盘的文件秒传功能，通过hash算法，判断文件是否在服务器中已经存在，如果已经存在，则不需要重复上传","like_count":9,"discussions":[{"author":{"id":1073947,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","nickname":"忧天小鸡","note":"","ucode":"A1412BDC108FD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374520,"discussion_content":"不够详细，这种回答基本属于不合格，量级文件怎么解决hash冲突的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621231654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37825,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1541739537,"is_pvip":false,"replies":[{"id":"13724","content":"嗯嗯 感谢给出的意见","user_name":"作者回复","comment_id":37825,"uid":"1190123","ip_address":"","utype":1,"ctime":1541987936,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"35901477905","product_id":100017301,"comment_content":"感觉评论里好多技术大佬，如果老师能附上一致性哈希算法代码案例就更好了","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428496,"discussion_content":"嗯嗯 感谢给出的意见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40207,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1542551631,"is_pvip":false,"replies":[{"id":"14685","content":"对于缓存来说 可以不用 直接让要搬移的数据失效就好了","user_name":"作者回复","comment_id":40207,"uid":"1190123","ip_address":"","utype":1,"ctime":1542679907,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"31607322703","product_id":100017301,"comment_content":"采用一致性hash算法，在增加节点的时候，是不是仍然要遍历数据，进行部分迁移，只是改变存储数据比较少啊","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429424,"discussion_content":"对于缓存来说 可以不用 直接让要搬移的数据失效就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542679907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397149,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/9d/e6947e9b.jpg","nickname":"遇事不决，量子力学","note":"","ucode":"6E5B015F4E427B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331548,"discussion_content":"这个可以换种方式考虑吧，如果是删除节点的化，这个节点都没了，那数据自然无法迁移；所以这时候在查询时发现缓存失效，就去查后继节点，重新生成缓存","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606897946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155960,"user_name":" 臣馟飞扬","can_delete":false,"product_type":"c1","uid":1116188,"ip_address":"","ucode":"F2F882B7678055","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/1c/ef15e661.jpg","comment_is_top":false,"comment_ctime":1574783517,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27344587293","product_id":100017301,"comment_content":"一致性哈希算法，讲的挺好：【白话解析：一致性哈希算法 consistent hashing】http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182","like_count":6,"discussions":[{"author":{"id":2233904,"avatar":"https://static001.geekbang.org/account/avatar/00/22/16/30/a9d108c5.jpg","nickname":"三山四水","note":"","ucode":"07B18A6782BFC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388033,"discussion_content":"确实讲得好，我看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628564964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127783,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/67/7598e7f8.jpg","nickname":"毅","note":"","ucode":"927F29D970657D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383916,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626304812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45212,"user_name":"蓝艺","can_delete":false,"product_type":"c1","uid":1239640,"ip_address":"","ucode":"FC81CC63C8F245","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/58/2aa56c18.jpg","comment_is_top":false,"comment_ctime":1543561311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27313365087","product_id":100017301,"comment_content":"自己用go写的，一致性hash算法，https:&#47;&#47;github.com&#47;lanyilee&#47;ConsistentHash","like_count":6},{"had_liked":false,"id":43525,"user_name":"若星","can_delete":false,"product_type":"c1","uid":1247442,"ip_address":"","ucode":"D92DC0D777724E","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/d2/83bdc5dd.jpg","comment_is_top":false,"comment_ctime":1543236393,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"27313040169","product_id":100017301,"comment_content":"数据分片“搜索关键词”出现的次数，依次读出每个搜索关键词，的时候就可以计数了吧？","like_count":6,"discussions":[{"author":{"id":1607789,"avatar":"https://static001.geekbang.org/account/avatar/00/18/88/6d/322acb73.jpg","nickname":"12356","note":"","ucode":"9A792921122A12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347938,"discussion_content":"应该是：数据分成m片，m个机器各自一片，各个机器进行读取，将每个关键词引到对应机器上，这才是协同的价值。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612383133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810156,"avatar":"","nickname":"poordickey","note":"","ucode":"2A436EC813AF97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330676,"discussion_content":"了解下MapReduce的原理  每个word分配到哪个机器  需要hash算法来指定 也就是MapReduce的shuffle阶段 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606664685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310828,"discussion_content":"读出的时候计数是没有问题的，问题是数据太多，单台机器内存放不下，这时候要么单台机器多次处理，要么分给多台机器处理，当然多台机器处理速度快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602067338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247009,"avatar":"https://static001.geekbang.org/account/avatar/00/13/07/21/5153d403.jpg","nickname":"Y","note":"","ucode":"497A8FB4059387","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303032,"discussion_content":"我的理解是，因为统计出现次数要用散列表，关键字=>次数，如果数据量很大的话，这个散列表会非常大，你统计的过程中内存会装不下，所以要用分布式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599118269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292700,"discussion_content":"这里的hash算法可能比较高效而冲突的概率比较大吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595310448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288635,"discussion_content":"分布式能解决掉的问题，单机一般都能解决。只是单机解决需要更长的时间，所以考虑使用分布式。你说的当然是可以的，但是单机针对大量数据时是无法承受的，所以先将数据进行分片，然后每台机器单独处理。你说的那种方式已经变成单机了，而老师讲的是在分布式的情况下。那么，在分布式对数据进行分片时用到了什么？有用到 hash 算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593830718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287693,"discussion_content":"这里我也不太明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593511130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246061,"discussion_content":"我觉得是那段描述的有点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587723222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38546,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1542073606,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"27311877382","product_id":100017301,"comment_content":"您在计算1亿张图片的散列表占用内存的部分提到，每个数据单元都包含16字节的md5哈希值。加上文件路径和指针，一共152字节。这里为什么要存哈希值呢？谢谢","like_count":6,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78065,"discussion_content":"当发生hash冲突时要用到原key的值进行比较，这里就是md5值，以便取出正确的图片路径","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575973005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581792,"discussion_content":"hash(key)，其中key就是哈希值。映射到散列表上，需要用哈希值再计算哈希再对散列表长度取模得到下标。当有冲突时，就需要将散列表中的哈希值拿出来和key对比了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658995112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334653,"discussion_content":"也就是说单个图片数据节点不用保存哈希值，因为相同哈希值的节点全在同一条链表上，哈希值本身只是为了定位其在哪一个桶里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607929989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334652,"discussion_content":"也就是通过图片路径找到图片本身就直接全量对比数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607929851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172090,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/7a/38a27e47.jpg","nickname":"蓦然回首","note":"","ucode":"B17658DCFE6402","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334651,"discussion_content":"构建散列表的时候，本来就是用哈希值来构建的，哈希值决定了数据存放在哪一个桶里面，如果有相同的哈希值存在，就是常说的散列冲突发生了，就可以才用链式寻址或者开放寻址解决冲突。如果是链式寻址，那同一个哈希值对应的同一个桶里面就存放的是一个链表，在里面直接对比图片本身数据就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607929787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163079,"discussion_content":"不存哈希值 你怎么知道哪个文件路径对应你那张图片的路径呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581046877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13176,"discussion_content":"感觉只需要在hash表里面存一次就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568643960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37760,"user_name":"道","can_delete":false,"product_type":"c1","uid":1100869,"ip_address":"","ucode":"B17CA7372C21C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/45/73a0f7f8.jpg","comment_is_top":false,"comment_ctime":1541725490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23016561970","product_id":100017301,"comment_content":"希望对一致性哈希有深入的讲解。","like_count":5},{"had_liked":false,"id":215515,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589007733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18768876917","product_id":100017301,"comment_content":"哈希算法:<br>五、负载均衡<br>这个问题是从没有想过的，因为没接触过过类似的东西。就是想让一个人的所有请求都由同一个服务器来应答。并且每个服务器大致有相同的负载。解决办法是哈希算法得到哈希值的平均性保证服务器负载均衡，同时保证每个用户ID或会话ID都由同一个服务器应答。<br>六、数据分片<br>    1. 处理海量数据是，多机工作。将海量数据求哈希值，对机器数取模，得到的结果就是分配的机器<br>    2. 估算大致需要的机器数，也是个技能<br>七、分布式存储<br>    1. 和数据分片类似。<br>    2. 扩容时，取模得到的机器号变动问题。可以用一致性哈希算法来解决。没怎么听懂。感觉是每个机器得到哈希值在一定范围内的数据。增加机器时，机器对应的哈希值是一定的范围，所以只会移动一部分数据。但是这跟一致性哈希算法有什么关系？一致性哈希算法又是什么？<br>思考题：<br>     我觉得还是消化一下这7个应用吧...<br>","like_count":4},{"had_liked":false,"id":84047,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1554774247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18734643431","product_id":100017301,"comment_content":"git status应该也是利用文件的hash值判断文件是否有修改的","like_count":4},{"had_liked":false,"id":37984,"user_name":"书木子谢明","can_delete":false,"product_type":"c1","uid":1259879,"ip_address":"","ucode":"3090C080A570BE","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/67/743128f7.jpg","comment_is_top":false,"comment_ctime":1541839751,"is_pvip":false,"replies":[{"id":"13715","content":"当然不是了 大于2^128个数据是必然有冲突 但有可能随便找2个数据就冲突了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987273,"ip_address":"","comment_id":37984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18721708935","product_id":100017301,"comment_content":"老师，MD5计算的哈希值是128位，是不是意味着，用MD5计算小于2∧128个不同数据，不会出现哈希冲突？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428546,"discussion_content":"当然不是了 大于2^128个数据是必然有冲突 但有可能随便找2个数据就冲突了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37763,"user_name":"cyf","can_delete":false,"product_type":"c1","uid":1249381,"ip_address":"","ucode":"CA09B04D8AC5C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/65/94763b43.jpg","comment_is_top":false,"comment_ctime":1541725496,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14426627384","product_id":100017301,"comment_content":"哈希值相同的搜索关键词就被分配到了同一个机器上，这里数据是分片存储到不同的机器上的，而同一个机器只搜索固定的关键词，最后的结果会不会不完整？可能我没get到老师的点。","like_count":3,"discussions":[{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288637,"discussion_content":"不会的，老师讲的就是 mapreduce 的基本思想。假如数据是分片存储在不同机器上的话，那么每台机器也可以通过同样的方法，将数据进行分片，然后发送给其他机器。这样，相同的数据肯定是在同一台机器上了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593830862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236790,"user_name":"谁谁","can_delete":false,"product_type":"c1","uid":1203114,"ip_address":"","ucode":"9651913B7B7ECC","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","comment_is_top":false,"comment_ctime":1595551183,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10185485775","product_id":100017301,"comment_content":"通过计算哈希值，再和机器数n取模，从而得到被分配到哪台机器上！这里计算出来的哈希值不应该是数字+字母吗？怎么和n取模呢？","like_count":2,"discussions":[{"author":{"id":1252235,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/8b/ca59be30.jpg","nickname":"向阳生","note":"","ucode":"C2E9E463CA9B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322139,"discussion_content":"同学，想想ascii码和对应的数字","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604678151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2068474,"avatar":"","nickname":"朱小倩","note":"","ucode":"0684CFC388ABDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295430,"discussion_content":"没搞懂，就算是纯数字，比如5，现在机器数量是10，得到取模数为5，现在机器数加一台，取模还是5。但是如果机器数减少4,这种取模后得到的数量就是1了，数据不就掉了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596194788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1120025,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/19/46fcde38.jpg","nickname":"yonyoupht","note":"","ucode":"9B3AC96150B8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2068474,"avatar":"","nickname":"朱小倩","note":"","ucode":"0684CFC388ABDD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358778,"discussion_content":"数据不会掉，数据会根据新的服务器数量取模后，重新分布。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616048659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295430,"ip_address":""},"score":358778,"extra":""}]}]},{"had_liked":false,"id":211305,"user_name":"pythonista","can_delete":false,"product_type":"c1","uid":1493954,"ip_address":"","ucode":"CE117439281B93","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/c2/abd584db.jpg","comment_is_top":false,"comment_ctime":1587947394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177881986","product_id":100017301,"comment_content":"docker镜像存储使用hash算法检验数据一致性 使用hash值做为镜像id查找镜像","like_count":2},{"had_liked":false,"id":174424,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1580204740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170139332","product_id":100017301,"comment_content":"买这个课而不是淘宝的好处就是和大家交流看下面的评论","like_count":2},{"had_liked":false,"id":115738,"user_name":"老白","can_delete":false,"product_type":"c1","uid":1397031,"ip_address":"","ucode":"39881175152D49","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/27/f0dd6f19.jpg","comment_is_top":false,"comment_ctime":1563712833,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10153647425","product_id":100017301,"comment_content":"感觉分布式存储和数据分片是一个功能。","like_count":2},{"had_liked":false,"id":68884,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1550625875,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10140560467","product_id":100017301,"comment_content":"一致性hash算法感觉不是利用hash取模分配的，而是规定好哪些内容分配到哪些机器中，如果扩容就讲某些内容移植到新机器中，具体选择哪些内容移植到新机器，也不是用的hash去做的","like_count":2,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78069,"discussion_content":"划分槽是重点，槽的数量是不能变的，哈希算法一旦使用就不能变了，每台机器对应槽的范围是可以变的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575973439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48037,"discussion_content":"一致性问题，个人认为是以hash值作为基础，划分槽位才是核心，在动态扩容的时候，取模的分母是永远不变的。在新旧节点的动态变容的时候，对槽的划分问题就不是hash干的了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573443411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","nickname":"一枝梅","note":"","ucode":"7DCE43B638EA6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4396,"discussion_content":"规定好哪些内容分配到哪些机器就是用哈希算法来分配的呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565356090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68033,"user_name":"乔丹","can_delete":false,"product_type":"c1","uid":1217413,"ip_address":"","ucode":"D832A9F97A0C7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/85/f5d9474c.jpg","comment_is_top":false,"comment_ctime":1550393236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140327828","product_id":100017301,"comment_content":"理论结合实际应用 爽得不要不要的。哈哈。","like_count":2},{"had_liked":false,"id":39290,"user_name":"Jamin","can_delete":false,"product_type":"c1","uid":1236792,"ip_address":"","ucode":"0449B773FE4D21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhyK1QiaqyNox3wr3GmBibziau9pPDxN5HjYBpYCd7ytDmLNtJ1cKKaq2WYFF3jpRSg6638M8NFDf2w/132","comment_is_top":false,"comment_ctime":1542244172,"is_pvip":false,"replies":[{"id":"14040","content":"减机器的套路也是一样的 机器上的数据分配给其他机器","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542246184,"ip_address":"","comment_id":39290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10132178764","product_id":100017301,"comment_content":"如果减机器呢","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428999,"discussion_content":"减机器的套路也是一样的 机器上的数据分配给其他机器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542246184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38205,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1228498,"ip_address":"","ucode":"582698D772810D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d2/3d88cb8e.jpg","comment_is_top":false,"comment_ctime":1541988161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10131922753","product_id":100017301,"comment_content":"我了解的，某些互联网大厂Redis，使用的不是Redis的集群，而是主从的模式，客户端通过Hash映射到相应的机器上，使用的也是自己的hash算法。","like_count":2},{"had_liked":false,"id":38048,"user_name":"远方夕阳","can_delete":false,"product_type":"c1","uid":1122317,"ip_address":"","ucode":"EEBCD53B2B5D3E","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/0d/93967314.jpg","comment_is_top":false,"comment_ctime":1541908210,"is_pvip":false,"replies":[{"id":"13711","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541986934,"ip_address":"","comment_id":38048,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10131842802","product_id":100017301,"comment_content":"一致性哈希也会存在映射差异的问题， A ,C节点中插入B节点，那么A  B之间原先映射到C的请求都会B，这样的情况，是要C分割一些数据给B吗","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428578,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541986934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215022,"user_name":"你在不远的未来","can_delete":false,"product_type":"c1","uid":1318404,"ip_address":"","ucode":"5B34C8BD03B71A","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","comment_is_top":false,"comment_ctime":1588874208,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5883841504","product_id":100017301,"comment_content":"<br>五：负载均衡<br>    1. 访问粘滞，同一个ip或者会话ID落到同一个服务器上。将服务器IP映射成索引编号，通过hash算法将访问ip或者回话ID取hashcode，将取得的hashcode与映射列表数取模<br>    运算，所得数就是访问服务器编号。这样就可以将固定客户端IP或者会话锁定在同一台服务器上。<br>    <br>六：数据分片<br>    1. 分布式数据操作（countByKey、containByKey、actionByKey）：将数据以某种纬度值进行hash取hashcode，之后的hashcode于服务器总数取模，根据取模值将数据<br>    纬度值和属性值以某种载体如（redis、memory、mysql、file）均匀存储服务器集群中，利用集群资源来处理数据。spark、hadoop皆是如此。<br>    1.2 <br>    一致性哈希算法：<br>        场景：<br>            当1.中服务器由于承载能力有限，需要扩容服务器数量，导致服务器数n变更，在已经经过hashcode分配的数据需要重新计算新的服务器存放位置。因为n的变化导致<br>        所有的数据都要重新分配，这时候所有的服务器缓存数据会同时失效，发生雪崩效应。这时候用到一致性哈希算法来解决。<br>        <br>        假设：<br>            数据总数：n default 30<br>            数据存放服务器编码：i<br>            服务器数：k1 default 3<br>            服务器数：k2 default 4<br>            逻辑分区数：m default 12<br>            hash公式1：i = n % m % k1<br>            扩容搬运数：= n &#47; k2<br>            <br>        扩容前：<br>            i = 30 % 12 % 3<br>            k1: [3,6,9,12,15,18,21,24,27,30]<br>            k2：[1,4,7,10,13,16,19,22,25,28]<br>            k3: [2,5,8,11,14,17,20,23,26,29]<br>            <br>        扩容后：<br>            i = 30 % 12 % 4<br>            k1: [4,8,12,16,20,24,28] =&gt; 搬运至k4[3,15,27]<br>            k2: [1,5,9,13,17,21,25,29] =&gt; 搬运至k4[7,19]<br>            k3: [2,6,10,14,18,22,26,30] =&gt; 搬运至k4[11,23]<br>            k4: [3,7,11,15,19,23,27] <br>        搬运总数：30 &#47; 4 = 7<br>            <br>","like_count":1,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318619,"discussion_content":"hash公式简单好多，都不用环了。但是是否能均匀分布？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603791429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206708,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586919126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881886422","product_id":100017301,"comment_content":"之前工作过程中就接触过分布式系统，但是理解并不深刻。学完哈希算法之后，不仅对哈希算法的理解有所提高，对分布式系统的认识又上升了一个层次，继续学习，加油加油！！！！","like_count":1},{"had_liked":false,"id":142573,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1571399910,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5866367206","product_id":100017301,"comment_content":"老师，关于数据分片有3点疑问：，请老师解答一下。谢谢<br>1.我们从搜索记录的日志文件中，依次读出每个搜索关键词，依次读不要先把1T的文件加载到内存才能读吗？若不是，那请问下怎么依次读呢？<br>2.数据分片是每台机器都copy一份1T的日志文件来统计各自负责（hash计算编号而得）的关键字吗？<br>3.统计次数也计数来统计吗？还是老师有更好的办法呢？","like_count":1,"discussions":[{"author":{"id":1390375,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","nickname":"kaiser","note":"","ucode":"F9438786E9A57B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236485,"discussion_content":"我也对这个搜索关键词的例子有疑问，我的理解是\n1. 这个 1T 文件是一个单独的文件，还是多个小文件组成的？有一台机器专门负责读取文件和进行数据分发；\n2. 日志文件中的日志，每条日志应该有一定的格式，比如一个 json 格式字符串或者其他格式，里边包含了关键词，解析出关键词之后，进行哈希取值并对机器数量 n 取模，得到要分配的机器，然后将关键词发送到消息中间件中，比如 kafka，可以指定n个 topic，每台机器负责消费一个 topic；\n3. 负责计算统计关键词的机器，从 topic 中接收数据，在内存中通过散列表记录关键词出现的次数；\n4. 负责读取文件和进行分发数据的机器，通过一个zookeeper 或者数据库或者 redis 等数据源，维护一个一共发送了多少次消息，以及生成消息的状态（生产中、已完成等，也就是日志文件是否读取完毕关键词消息是否发送完毕）等消息消费生产信息、以及每个 topic 一共发送了多少个消息等信息；\n5. 负责计算统计的机器，每次消费完消息后，更新上面数据源中消息消费信息中的消已费数量，以及比较 topic 中的消息总数，如果这个 topic 的消息已经全部消费完毕，那就将统计的信息都记录在 redis 或者数据库中；\n6. 负责读取与分发消息的机器启动一个线程去监听数据源中的消息消费与生成信息，如果已经消费完毕，那就从 redis 或者数据库中读取关键词的统计信息。\n\n感觉这样做有点复杂了。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587097758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3074460,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/e9/9c/791d0f5e.jpg","nickname":"大阿明","note":"","ucode":"79ECE905CACA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390375,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","nickname":"kaiser","note":"","ucode":"F9438786E9A57B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584965,"discussion_content":"大数据需要你这样的人才","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661249229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":236485,"ip_address":"北京"},"score":584965,"extra":""}]},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78078,"discussion_content":"读取文件可以通过偏移量读取的，每次只读取一小片到内存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575974201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1846808,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erzR5YjFylzkPw6FYUAZXU6dG9nmVyOHtyoY7vpG72OKKic3yianhU41npicxOLmkrtaqfDZ4uQ58efA/132","nickname":"Geek_6e023f","note":"","ucode":"B1E9DD4FFD642E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218985,"discussion_content":"整个流程说实话也没太懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585720518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78078,"ip_address":""},"score":218985,"extra":""}]}]},{"had_liked":false,"id":40013,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1542440836,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5837408132","product_id":100017301,"comment_content":"“也就是说，同一个搜索关键词会被分配到同一个机器上。”这句话怎么理解？我不是做服务器端开发的，搜索的词应该数以亿计吧，那得用多少台服务器呢？","like_count":1,"discussions":[{"author":{"id":3074460,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/e9/9c/791d0f5e.jpg","nickname":"大阿明","note":"","ucode":"79ECE905CACA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584966,"discussion_content":"关键词是重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661249450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120025,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/19/46fcde38.jpg","nickname":"yonyoupht","note":"","ucode":"9B3AC96150B8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358781,"discussion_content":"“关键词”hash后再用服务器数量取模。关键你得理解取模的意义，取模就是为了将数据分散到不同的机器上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616049011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178283,"avatar":"","nickname":"钟狼","note":"","ucode":"EBDED251153164","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136882,"discussion_content":"意思是n多关键词会落到同一台机器，比如其中1000万落到机器A, 那么这1000万中的“争哥威武&#34;肯定会落到A, 而不是一个关键词一台机器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579170229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38663,"user_name":"李坤","can_delete":false,"product_type":"c1","uid":1203140,"ip_address":"","ucode":"A9F82C6EFDDA39","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/c4/40cc1989.jpg","comment_is_top":false,"comment_ctime":1542099947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837067243","product_id":100017301,"comment_content":"在学校做课题的时候，用到了一致性哈希算法（Chord），当时知其然而不知其所以然，跟着课程一直学下来，现在有种豁然开朗的感觉了","like_count":1},{"had_liked":false,"id":38141,"user_name":"关心","can_delete":false,"product_type":"c1","uid":1242116,"ip_address":"","ucode":"D5509406BE591B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/04/88543b9f.jpg","comment_is_top":false,"comment_ctime":1541953688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5836920984","product_id":100017301,"comment_content":"才有一致哈希环算法怎么可以实现由5台机器到6台机器避免雪崩效应、代码怎么实现一致哈希环算法呢 ？","like_count":1},{"had_liked":false,"id":38054,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1541911706,"is_pvip":false,"replies":[{"id":"13710","content":"客户端下线了 映射关系要删除吧 不然会浪费内存<br>客户端上线 映射关系要加上吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541986839,"ip_address":"","comment_id":38054,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5836879002","product_id":100017301,"comment_content":"在负载均衡那一块，客户端上线下线和服务器扩容缩容怎么影响映射表呢啊?<br>这部分没看明白。&quot;如果借助哈希算法，这些问题都可以非常完美地解决。&quot;这个方法也会对服务器列表进行取模运算，那为什么扩容，缩容没影响？难道是应用到了一致性哈希？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428582,"discussion_content":"客户端下线了 映射关系要删除吧 不然会浪费内存\n客户端上线 映射关系要加上吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541986839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4349,"discussion_content":"至于缩容和扩容，只要不是把当前正在服务的会话映射到不同的服务器就没有问题，比如说扩容前你的会话被送到服务器1，然后你会话完了，over了，那扩容后你又来了，给你哈希到新扩容的服务器11，又啥关系，只要能服务你就行。这里的哈希的作用主要就是均衡的找服务器来服务就行，均衡才重要，找到服务器就完了，又不要把被服务的客户端排个先后，所以这是和普通的hashtable","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565328910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4348,"discussion_content":"这里和普通的hashtable不一样，不需要用拉链法来解决冲突问题，你想两个不同的ip地址通过哈希算法算到同一个服务器，那直接路由过去就行啦，又不需要在hashtable记录这个映射关系，每次有请求来了先用哈希算法算一下，完了用哈希值选择服务器就行。所以说不存在客户端上下线影响服务器端的问题，只要这个服务器在就行了。这就是有评论说：用计算机CPU的速度换取存储空间的原因","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565328580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4350,"discussion_content":"不一样的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565328918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37779,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1541727196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5836694492","product_id":100017301,"comment_content":"一致性哈希算法那里可以用图来进一步解释的，<br>memcached 就用到了 Consistent Hashing 。在这里发链接会屏蔽么？<br>https:&#47;&#47;kb.cnblogs.com&#47;page&#47;42734&#47; 这里也说到了哈希一致性算法<br>这里提个问题，应用五那个场景，如果搜索关键词比较集中怎么办？也就是说虽然有多个server，但是根据取余法，相同的关键词肯定会到相同server中，那么在相对坏的情况下（搜索词多，单重复的很多）那么这种算法不仅没有达到相应的并发计算的效果，也浪费了其他server","like_count":1},{"had_liked":false,"id":360353,"user_name":"阿杰","can_delete":false,"product_type":"c1","uid":2370758,"ip_address":"广东","ucode":"B9C504269C8CD3","user_header":"https://static001.geekbang.org/account/avatar/00/24/2c/c6/416bd86e.jpg","comment_is_top":false,"comment_ctime":1666491034,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666491034","product_id":100017301,"comment_content":"哈希算法在分布式中的应用，打卡笔记02<br>应用二：数据分片，假设现在在图库中有一亿张图片，我们如何快速的判断图片是否在图库中呢？<br>1、首先经过上节课程的铺垫，我们已经知道了，快速定位一张图片的方法是：可以在图片的字节码序列中，起始、中间、末尾位置各抽取100字节，然后合并进行hash计算，计算结果作为该图片的信息摘要（唯一标识），然后把图片的信息摘要和图片路径在内存中构建散列表，这样就可以快速定位一张图片是否在图库中以及在图库中的位置了。<br>2、再回到本问题，一亿张图片，假设每张图片路径128个字节，hash（唯一标识）大概是16个字节，如果散列表使用的是拉链法解决冲突，那么需要存放链表指针8字节，存放单个结点到散列表需要占用的空间就是152字节。经计算大概就是 15.2G，一般服务器内存大小2G，且还要考虑散列表加载因子（假设为0.75），很明显一台服务器搞不定，大概需要11台服务器左右。<br>3、具体操作步骤：<br>3.1 先对数据进行逻辑分片，也就是编号1的服务器处理<br>0-910w的数据（1亿&#47;11近似估算）编号2处理（910w+1）到（1820w + 1）的数据，以此类推，把数据均匀分配到每台服务器上处理。<br>3.2 11台服务器并行处理对每张图片做运算，hash（信息摘要）% 11 计算出构造该图片散列表的服务器序号，然后把hash（信息摘要）和图片路径，发送到计算出的服务器上去，构造散列表。<br>3.3 如果要查找图片a，那么根据一样的计算方式，计算出唯一标识，以及服务器序列号，然后用该唯一标识去对应的服务器上的散列表中寻找，若存在则找到图片路径，根据路径找到图片全量比对，否则图片不在图库内。<br>应用三：分布式缓存，背景是：大数据时代，海量数据，海量用户，缓存仍然是基于内存的，所以一台服务器指定不够，也需要分布式存储。存储的思路与判断图片是否在图库中一致，不再赘述。<br>1. 有所区别的是，缓存可能碰到服务器数量变更的问题，比如：缓存服务器不够用了，需要加一台，或者压力太大了，down掉了，数量就减少了一台。一旦发生服务器数量变化，按照我们在2中的思路，hash（缓存关键字）% 服务器数量计算出来的结果就可能全部都对不上了，这就相当于一瞬间，所有的缓存全部失效，所有的请求会都打到数据库上去，很容易就会把数据库搞崩，造成整个系统崩溃。<br>2. 想解决这个问题就是引出一致性哈希。假设有一个虚拟的环（2^32 - 1  ---   0   ---   2^32 - 1），他就像钟表一样，时针都会周而复始的转动。然后我们的服务器就是环上的点haah（服务器ip）% 2^32，这样环就被我们的服务器切割成了多个区间，假设服务器为a，b，c，就切割成了（a，b），（b，c），（c，a）（画图看看就清楚了，当我们需要用到缓存时，我们就根据把服务器映射到换上一样的映射方法，hash（缓存关键字）%2^32，这样就算根据计算出来的结果，没有找到服务器也不用慌，沿着环顺时针方向寻找最近的服务器即可。这样哪怕再增加服务器或者缩减服务器也只是影响某个区间中的缓存而已，而其他区间的缓存仍然可以正常运行（假设增加了服务器d，把在c和a之间，把原本的（c，a）区间分割成（c，d），（d，a）那么也只影响原本落于（c，a）之间的缓存，而不会影响到整个缓存系统。）<br>3. 哈希一致性，可能出现哈希一致性倾斜问题，也就是服务器分布的很集中，这样把（2^32 - 1  ---   0   ---   2^32 - 1）分割的就不均匀了，极端情况下，可能出现所有的缓存都到了一台服务器上的情况，解决该问题的方法是增加虚拟结点，就像孙悟空似的一根毫毛吹出去，分成一个或多个自己，但是这些假自己最终还是指向本体。只是起一个均匀分割虚拟环的作用。<br>4. 哈希一致性代码待实现，初步考虑使用循环链表的方式，嫌定位区间慢的话可以加个散列表。","like_count":0},{"had_liked":false,"id":360288,"user_name":"阿杰","can_delete":false,"product_type":"c1","uid":2370758,"ip_address":"广东","ucode":"B9C504269C8CD3","user_header":"https://static001.geekbang.org/account/avatar/00/24/2c/c6/416bd86e.jpg","comment_is_top":false,"comment_ctime":1666406137,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666406137","product_id":100017301,"comment_content":"学习复盘总结打卡~<br>hash算法在分布式中的应用01：<br>1、负载均衡，负载均衡有三种方式：随机、轮询、加权随机；<br>* 怎么实现会话粘滞呢？（也就是同一次会话中，我希望请求的都是同一台服务器，为什么希望请求同一台服务器呢？因为服务器中存放了用户sessionId&lt;&gt;session对象【里面可以设置一些用户上下文类的信息，比如：用户名称】）<br>* 实现会话粘滞的方式有哪些？<br>一、维护 sessionId&#47;用户ip &lt;&gt; 请求服务器 映射表<br>二、对于每次请求，都根据sessionId或者用户ip进行hash运算，然后对服务器数量取模值【这样的话计算出来的结果，一定是服务器的序号】。在同一次会话中因为sessionId、IP肯定是不会发生变化的，所以根据 hash(sessionId&#47;ip) % 服务器数量 计算出来的结果，在同一次会话中不管计算多少次都是一样的（同一次会话中幂等），从而实现了会话粘滞的效果，妙哉妙哉！<br>* 上线&#47;下线、扩容&#47;缩容 上面说的两种会话粘滞性的方案还适用吗？<br>用户上线、下线 对于维护映射表的方案来说，维护成本太高，每一次上线，都得新增一条记录；同理，每一次下线都得删除一条记录。但是对于使用hash函数的方式而言，没有任何影响，当用户上线，发送请求时，根据hash函数计算一下分配服务器就好。下线的话更加没有影响了。<br>* 扩容&#47;缩容：对于维护映射表的方案而言，新扩容的机器是否能用上，得看具体得分配策略；而机器下线或者出现故障不通，得批量去找映射为该台服务器得记录，然后重新分配新的服务器，比较麻烦耗时；而对于使用映射表得时候，仍然是有无需维护得优点，但是有一个很大得缺点是，只能停机扩容或者下线，因为一旦扩容 hash(sessionId&#47;ip) % 服务器数量，这个公式前后计算出来得数值就会有差异了，如果用户第一次请求了机器001，那么很可能扩容之后请求的就是机器002了。<br>","like_count":0},{"had_liked":false,"id":358907,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665018927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665018927","product_id":100017301,"comment_content":"总结：<br>1. 负载均衡<br>2. 数据分片<br>3. 分布式存储<br><br>2，3都是通过hash使用多台机器存储数据，只是一个考虑了扩容使用了一致性hash","like_count":0},{"had_liked":false,"id":358656,"user_name":"囧微","can_delete":false,"product_type":"c1","uid":1880761,"ip_address":"广东","ucode":"0871BCC5FA4892","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b2/b9/825b48d1.jpg","comment_is_top":false,"comment_ctime":1664521425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664521425","product_id":100017301,"comment_content":"我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟n取模，最终得到的值，就是应该被分配到的机器编号。<br>这里意思是很多关键词，不同机器读取全部数据文件然后处理不同的关键词，再合并结果？","like_count":0},{"had_liked":false,"id":358187,"user_name":"老一帆","can_delete":false,"product_type":"c1","uid":1350850,"ip_address":"浙江","ucode":"BF170D3B382293","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/c2/7f41f71b.jpg","comment_is_top":false,"comment_ctime":1664011644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664011644","product_id":100017301,"comment_content":"请问统计关键字次数的案例中，如果是遇到比较极端的情况（某个关键字出现的次数非常多），导致一台机器仍然存不下数据，该怎么办？是选择继续加机器，减少这种情况的发生么？","like_count":0},{"had_liked":false,"id":356337,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1662176266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662176266","product_id":100017301,"comment_content":"1. 负载，这种方式一般都使用，不够丝滑。<br>2. 秒转<br>3. 一致性hash，这种方式也不丝滑。<br>4. 分片思想","like_count":0},{"had_liked":false,"id":346263,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1802022,"ip_address":"","ucode":"5AC8CBCC0AD48B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7f/26/c5127e9a.jpg","comment_is_top":false,"comment_ctime":1652955038,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652955038","product_id":100017301,"comment_content":"一致性hash算法，主要解决数据分布式存储中新增服务节点后的数据搬移问题：<br>主要利用虚拟环数据结构 + 每台物理服务器的虚拟节点组来解决的，具体步骤如下：<br>1）定制一个hash值的数据范围的hash环（虚拟环），把数据对象放入hash环，虚拟节点放入hash环<br>2）顺时针遍历hash环，把数据对象放入距离最近的虚拟节点<br>3）服务器新增：<br>    3.1）当新增一台服务器，先把物理服务器进行虚拟化，得出一组虚拟节点；然后把虚拟节点放入hash环中，此时虚拟节点就会相对均匀地分布在hash环上，再次顺时针把离新增虚拟节点进的数据放入新增虚拟节点中，这样新增的服务器的多个虚拟节点就会分担其他节点的数据，达到一定的均衡分配<br>    3.2）删除服务器（下线或者宕机）：顺时针遍历，把下线服务器的虚拟节点的数据，分配给各自虚拟节点的下一个虚拟节点（可能分担的多个节点的数据，达到一定的均衡分配）","like_count":0},{"had_liked":false,"id":344012,"user_name":"摊牌","can_delete":false,"product_type":"c1","uid":1453182,"ip_address":"","ucode":"F142596BFE4594","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/7e/f1efd18b.jpg","comment_is_top":false,"comment_ctime":1651192596,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651192596","product_id":100017301,"comment_content":"数据分片和数据分布式存储的本质都是把数据按照哈希算法均匀的分布在不同的机器上，区别是分片侧重的是数据处理，存储侧重数据落库。","like_count":0},{"had_liked":false,"id":337135,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646642883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646642883","product_id":100017301,"comment_content":"内容小结：<br><br>哈希算法在分布式相关的应用如下：<br><br>1. 实现一个会话粘滞的负载均衡算法： 对 IP 或 ID 映射成 hash， 对服务器个数取模,  弃用哈希表<br>2. 实现数据分片，比如：统计搜索词次数 和 判断图片是否在图库中， 这种海量数据的处理问题，我们都可以采用多机分布式处理， 借助这种分片的思路，可以突破单机内存、CPU 等资源的限制。<br>3. 分布式存储，使用一致哈希解决缓存服务器个数增减引起的雪崩效应<br><br>一致性哈希的优点：<br><br>当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡。<br><br>其他：<br><br>​\t通过提前估算资源大小来评估方案的可行性;<br><br>​\t一致哈希会借助一个虚拟的环和虚拟结点来优美实现，提高缓存被均匀分布的概率<br>思考题：<br>打包策略中有各种的hash值，防止浏览器不更新资源","like_count":0},{"had_liked":false,"id":319237,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1635690858,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635690858","product_id":100017301,"comment_content":"分布式存储，Redis使用的是哈希槽(hash slot)<br>https:&#47;&#47;redis.io&#47;topics&#47;cluster-spec","like_count":0},{"had_liked":false,"id":318200,"user_name":"瓜牛","can_delete":false,"product_type":"c1","uid":2273620,"ip_address":"","ucode":"5EB7D2F4400A70","user_header":"https://static001.geekbang.org/account/avatar/00/22/b1/54/6d663b95.jpg","comment_is_top":false,"comment_ctime":1635182497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635182497","product_id":100017301,"comment_content":"负载均衡的例子不对吧，机器扩缩容期间的请求怎么保证打到同个机器？","like_count":0},{"had_liked":false,"id":313961,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1632756548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632756548","product_id":100017301,"comment_content":"哈希算法的应用场景<br>数据加密(数据签名)<br>唯一标识<br>数据校验<br>散列函数<br>负载均衡<br>数据分片<br>分布式存储","like_count":0},{"had_liked":false,"id":313427,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1632417323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632417323","product_id":100017301,"comment_content":"学习总结<br>hash算法在分布式系统中的应用：<br>1. 负载均衡：实现一个会话粘连的负载均衡算法<br>2. 数据分片，典型的分库分表<br>3. 分布式存储 一致性hash","like_count":0},{"had_liked":false,"id":303836,"user_name":"znz","can_delete":false,"product_type":"c1","uid":2545284,"ip_address":"","ucode":"C8F83E70BD0A2B","user_header":"https://static001.geekbang.org/account/avatar/00/26/d6/84/e7750e4b.jpg","comment_is_top":false,"comment_ctime":1627019715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627019715","product_id":100017301,"comment_content":"仔细看了一致性哈希算法实现 觉得这个只能用户分布式缓存","like_count":0},{"had_liked":false,"id":297714,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623745043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623745043","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":289461,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1619020102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619020102","product_id":100017301,"comment_content":"【每个机器负责 m&#47;k 个小区间】一个机器负责的m&#47;k个小区间，这几个小区间的哈希值是不是连续的？应该不是吧？","like_count":0},{"had_liked":false,"id":287437,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1617950839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617950839","product_id":100017301,"comment_content":"所谓一致性算法.不过是分治思想的一种转换.<br>可以这么理解.既然把我自己的全部都交出去会很麻烦.那我就在内部分组.也可以理解成总体分组.没人分管几组.到时候只交接部分组就可以了.比全部交出去好得多.<br>其实也可以理解成把鸡蛋分到多个篮子里.后期总归是要移动的.还不如分开.这样移动的时候还能保留一些.","like_count":0},{"had_liked":false,"id":286097,"user_name":"Geek_6b6e5d","can_delete":false,"product_type":"c1","uid":2320398,"ip_address":"","ucode":"26097F678719CC","user_header":"","comment_is_top":false,"comment_ctime":1617155709,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617155709","product_id":100017301,"comment_content":"这边有个疑问，md5后的hash值应该是字符串吧？对字符串取模输出是什么呀<br>","like_count":0,"discussions":[{"author":{"id":3074460,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/e9/9c/791d0f5e.jpg","nickname":"大阿明","note":"","ucode":"79ECE905CACA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584967,"discussion_content":"字符串取ASCII码再转int","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661249665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280781,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614385648,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614385648","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>一开始我就仅仅知道哈希函数用来校验某个文件的真假······这还是在玩压缩文件时看到的","like_count":0},{"had_liked":false,"id":278531,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1613025219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613025219","product_id":100017301,"comment_content":"一致性 hash 算法主要是对固定长度进行取模，解决上面的对服务实例的数量进行取模的缺点，服务实例数量变化时所有的实例的缓存都失败了。","like_count":0},{"had_liked":false,"id":273743,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1610668428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610668428","product_id":100017301,"comment_content":"总结：<br><br>1. 哈希算法的定义<br><br>可以将任意长度的二进制数据转化为固定长度的二进制数据的算法叫哈希算法<br><br>2. 一个好的哈希算法写起来并不容易，往往需要满足以下几个前提条件<br>（1）哈希值不能反推原始值<br>（2）对输入的数据敏感，哪怕是只修改了一个字节，生成的哈希值也会大不相同<br>（3）生成的哈希值发生碰撞的概率要小<br>（4）哈希算法的执行效率要高。即使针对于很大的数据文本，也可以快速的求解哈希值<br><br>3. 哈希算法的应用<br><br>3.1 安全加密<br><br>在安全加密领域的哈希算法常见的主要有：MD5，SHA，DES，AES等。加密后的值安全性越高，哈希算法的执行的时间也就越长，所以在实际的应用场景中，需要根据场景，在安全性和执行效率上达到一个平衡。<br><br>3.2 数据校验。例如下载文件后，针对文件数据块的完整性进行验证。<br><br>3.3 散列函数<br><br>3.4 唯一标识。例如区块链在头中存储的针对所有交易数据进行计算的摘要信息。<br><br>在分布式方面的应用<br><br>3.5 数据分片。例如统计关键词出现的次数<br>3.6 分布式存储。在服务器增加时，需要进行数据搬移，此时会涉及到一致性哈希算法<br>3.7 会话粘连的负载均衡","like_count":0},{"had_liked":false,"id":261058,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1605185456,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1605185456","product_id":100017301,"comment_content":"针对海量数据的处理问题，我们都可以采用多机分布式处理。借助数据分片的思路，可以突破单机内存、CPU 等资源的限制。<br><br>看到这，想起了 ES 的分片。","like_count":0},{"had_liked":false,"id":257872,"user_name":"Geek_11f3d8","can_delete":false,"product_type":"c1","uid":2195261,"ip_address":"","ucode":"7E75E3EB5A1E51","user_header":"","comment_is_top":false,"comment_ctime":1604163879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604163879","product_id":100017301,"comment_content":"一致性哈希是把哈希地址空间全预分了，几台机器 就占对应节点的位置，哈希数据分配的时候 就近原则找机器，为了均衡再搞个虚拟节点，但是这样不停添加或者删除机器的话，那hash查找的时候不是全乱了吗？如何确定某个hash值是否已经存在 岂不是得遍历所有机器才行？","like_count":0},{"had_liked":false,"id":257104,"user_name":"skying","can_delete":false,"product_type":"c1","uid":1041865,"ip_address":"","ucode":"E7CFF50AB64BB1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/c9/1061582b.jpg","comment_is_top":false,"comment_ctime":1603852209,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603852209","product_id":100017301,"comment_content":"一致性hash算法的java实现,请大家指正<br>https:&#47;&#47;github.com&#47;nicky1&#47;micro-seed&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;waffle&#47;integrated&#47;interview&#47;algo&#47;ConsistentHashLb.java","like_count":0},{"had_liked":false,"id":256522,"user_name":"Geek_0f31ae","can_delete":false,"product_type":"c1","uid":1870888,"ip_address":"","ucode":"A0F198BEF2AB2F","user_header":"","comment_is_top":false,"comment_ctime":1603653150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603653150","product_id":100017301,"comment_content":"文件路径长度的上限是 256 字节？这里是不是有点问题？linux下，应该是文件名长度的上限是 256 字节吧，文件路径长度的上限是4096 字节","like_count":0},{"had_liked":false,"id":245273,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1598881873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598881873","product_id":100017301,"comment_content":"一致性hash可以参考redis集群配置槽位","like_count":0},{"had_liked":false,"id":242970,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1597907879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597907879","product_id":100017301,"comment_content":"数字签名，文件指纹","like_count":0},{"had_liked":false,"id":239736,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596628911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596628911","product_id":100017301,"comment_content":"隐隐约约觉得，这节课的内容，对于leedcode里面的统计类的题，思路相通","like_count":0},{"had_liked":false,"id":238551,"user_name":"朱小倩","can_delete":false,"product_type":"c1","uid":2068474,"ip_address":"","ucode":"0684CFC388ABDD","user_header":"","comment_is_top":false,"comment_ctime":1596196847,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596196847","product_id":100017301,"comment_content":"感觉很多同学都在看最复杂的一直性hash算法，但我还是不明白，为何可以通过算出来的hash值对机器数取模就可以解决机器动态扩容或者缩容。<br><br>取模运算，针对的是两个数，其中一个数变了，另一个数始终不会变吗？这不太对吧<br><br>感觉作者也没有讲明白。","like_count":0,"discussions":[{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310829,"discussion_content":"哈希一致性算法通过虚拟节点来解决动态扩容问题。一旦采用分布式系统，节点的总数就确定了，也就是取模运算的右边已经定了。刚开始真实的物理机器不够也没关系，再维护一个虚拟节点到真实节点的映射关系就好了，这样扩容后只影响一个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602068401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238317,"user_name":"对白","can_delete":false,"product_type":"c1","uid":1268797,"ip_address":"","ucode":"3183E5ADBC794B","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","comment_is_top":false,"comment_ctime":1596119539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596119539","product_id":100017301,"comment_content":"散列算法的第六个应用：数据分片，我觉得这个标题换成MapReduce的分区实现应该会更好，因为MapReduce中的分区就是计算key的散列值，然后对reduce的数据取模得到分区编号&#47;reduce编号，目的是平均reduce的处理能力，提高reduce拉取map的效率。","like_count":0},{"had_liked":false,"id":238312,"user_name":"对白","can_delete":false,"product_type":"c1","uid":1268797,"ip_address":"","ucode":"3183E5ADBC794B","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","comment_is_top":false,"comment_ctime":1596119385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596119385","product_id":100017301,"comment_content":"看完了http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182写的关于一致性散列算法，现总结如下：<br>一致性散列算法：分别计算数据和机器的散列值，然后对2的32次方取模，将结果映射到散列环（由2的32次方个点组成的环）上；在散列环上，从数据的起始位置出发，沿顺时针方向遇到的第一个机器就是该数据需要缓存到的机器。<br>散列环的倾斜：当机器在散列环上分布不均匀时，会造成数据大部分集中缓存在某一台机器上，解决方法”加入虚拟节点。<br>这是我对一致性散列算法做的浅显易懂的解释，提供给大家~","like_count":0},{"had_liked":false,"id":227663,"user_name":"fxlego","can_delete":false,"product_type":"c1","uid":1634260,"ip_address":"","ucode":"32B09E5B542BBA","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","comment_is_top":false,"comment_ctime":1592450362,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592450362","product_id":100017301,"comment_content":"一致性哈希算法和普通哈希算法原理上是完全一致的，唯一的区别是一致性哈希算法取模的节点数比较大，比如可以设置成2的32次方，可以将2的32次方个点想象成一个环；<br>接着对于每台机器都是取模2^32，映射到环上；数据也是取模2^32映射到环上；对于每个数据按照顺时针方向找到最近的一个机器节点即可；<br>当发生节点插入和删除时，只需要迁移临近的一小块区域数据；（题外话：对于分布式系统中，节点删除或者故障超过一定阈值，才会触发数据迁移动作。）<br>最后要注意的是，节点映射到在环上可能很不均匀，这时候可以引入虚拟节点来解决。","like_count":0,"discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295215,"discussion_content":"总结的很好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596119960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227378,"user_name":"Ray.Woo","can_delete":false,"product_type":"c1","uid":1358626,"ip_address":"","ucode":"630160A0F1814F","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/22/b66c5bba.jpg","comment_is_top":false,"comment_ctime":1592366443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592366443","product_id":100017301,"comment_content":"我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟 n 取模，最终得到的值，就是应该被分配到的机器编号。 我有点疑问，从日志文件中，已经依次读到了搜索关键词，不是就可以直接统计了吗....这一个步骤应该很耗时吧？","like_count":0},{"had_liked":false,"id":223852,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1591196757,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1591196757","product_id":100017301,"comment_content":"普通哈希算法和一致性哈希算法的区别其实就是取模的线段到圆的变化。线段的映射在模变化时失效，但是圆上的一个点失效只会导致一部分映射失效。这就好像普通队列和循环队列的区别，普通队列在不断插入删除数据之后需要通过移动数据来解决空间浪费的问题，而循环队列在有剩余空间时永远不需要移动数据来解决问题","like_count":0},{"had_liked":false,"id":223840,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1591194559,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"1591194559","product_id":100017301,"comment_content":"对于负载均衡那里，当服务器扩容或者缩容时，取模的结果将发生变化，这时就没办法映射到同一台机器了吧？也需要做额外的处理。","like_count":0,"discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295216,"discussion_content":"使用一致性散列算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596120004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214887,"user_name":"Obed","can_delete":false,"product_type":"c1","uid":1399904,"ip_address":"","ucode":"8717488DD14AB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","comment_is_top":false,"comment_ctime":1588841869,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1588841869","product_id":100017301,"comment_content":"王老师你好,将同一个会话的请求都集中在同一个服务器中有什么好处呢? 请指教一下","like_count":0,"discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295218,"discussion_content":"负载均衡啊，否则多个客户端的请求放到一台服务器上就是负载不均衡了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596120073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1399904,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","nickname":"Obed","note":"","ucode":"8717488DD14AB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295237,"discussion_content":"啊，我的重点是为什么要将同一个请求集中在同一个服务器中，这样的考虑是为了什么。因为http请求是无状态的么，然后一般用户的信息也都是保存在数据库或者分布式缓存当中，会比较少的放在某一个的服务器当中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596122634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295218,"ip_address":""},"score":295237,"extra":""},{"author":{"id":2068474,"avatar":"","nickname":"朱小倩","note":"","ucode":"0684CFC388ABDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1399904,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","nickname":"Obed","note":"","ucode":"8717488DD14AB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295448,"discussion_content":"这里讲的就是把会话数据放在机器的内存中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596197157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295237,"ip_address":""},"score":295448,"extra":""},{"author":{"id":1399904,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","nickname":"Obed","note":"","ucode":"8717488DD14AB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2068474,"avatar":"","nickname":"朱小倩","note":"","ucode":"0684CFC388ABDD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295595,"discussion_content":"哦哦 明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596258842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295448,"ip_address":""},"score":295595,"extra":""}]}]},{"had_liked":false,"id":213905,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1588588168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588588168","product_id":100017301,"comment_content":"思考题：<br>1.要把这一亿个整数排序，最简单的做法，把这1亿个整数存到位图中，位图大小是10亿bit，约120MB，位图中位的顺序即为整数的顺序。<br>2.如果采用布隆过滤器，可以用10亿bit位存储1亿图片的信息(包括图片唯一标识和图片文件路径长)，10亿bit约为120MB, 如果单机的内存容量上限为2GB，那么只需要1台机器就可以存贮。","like_count":0},{"had_liked":false,"id":213818,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1588567677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588567677","product_id":100017301,"comment_content":"工作中，多个地方都可能存储相同的图片（摄像头抓拍的图片），在想怎么避免重复呢？<br>可以用哈希算法计算一个唯一标识，来代表图片的内容，可以有效避免重复；<br>或者，可以根据图片的信息（来自哪个摄像头、抓拍时间、帧编号等）组织成一个唯一编号，则可能存在少量重复。<br>二者结合一下，还是根据图片信息生成哈希值，作为图片的 ID，且附加图片的信息（用于过期清理等）。","like_count":0},{"had_liked":false,"id":213602,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1588488958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588488958","product_id":100017301,"comment_content":"60天攻克算法打卡行动第21天<br>哈希算法（下）：哈希算法在分布式系统中有哪些应用？<br><br>负载均衡<br>哈希求余得到不同的路由分配地址<br>数据分片<br>计算数据大小根据机器容量进行分片操作，es，solr ，redis这些都有分片算法处理<br>分布式存储<br>多台机器存储数据，通过计算哈希值对机器个数求余数，得到所属的机器位置。如果新增加机器，那么就需要哈希一致算法，部分数据迁移得到负载均衡的效果。<br><br>哈希算法：hbase不隆过滤器应该也是保持一致性的一种哈希算法把。","like_count":0},{"had_liked":false,"id":204634,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586432946,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586432946","product_id":100017301,"comment_content":"无论对象的自身是什么类型，他们的hashcode都是一个整形变量。","like_count":0},{"had_liked":false,"id":204625,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586430727,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1586430727","product_id":100017301,"comment_content":"我们可以先对数据进行分片，然后采用多台机器处理的方法，来提高处理速度。具体的思路是这样的：为了提高处理的速度，我们用 n 台机器并行处理。我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟 n 取模。这里的经过hash计算的关键词是一个字符串，请问一下，是如何跟n进行取模运算的？能解答一下吗？感觉听起来很晕。","like_count":0,"discussions":[{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226368,"discussion_content":"这里所说的计算出来的hash code是一个字符串还是一个数字？真的是一脸懵，不知道大家都是怎么理解的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586432763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226363,"discussion_content":"说实话，我也不知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586432703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204623,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586430441,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586430441","product_id":100017301,"comment_content":"哈希算法计算出来的是一个字符串，如何对一个数字进行取余操作呢？没太明白作者的意思。","like_count":0},{"had_liked":false,"id":204617,"user_name":"ZMH.","can_delete":false,"product_type":"c1","uid":1753115,"ip_address":"","ucode":"D45D6CEDFDF8F5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","comment_is_top":false,"comment_ctime":1586429996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586429996","product_id":100017301,"comment_content":"哈希算法得出的不是一个字符串吗..怎么取模啊..是我理解错了吗","like_count":0},{"had_liked":false,"id":201503,"user_name":"demnox","can_delete":false,"product_type":"c1","uid":1798260,"ip_address":"","ucode":"C3D8A08ED74ED1","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/74/06742258.jpg","comment_is_top":false,"comment_ctime":1585796656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585796656","product_id":100017301,"comment_content":"任何问题都可以通过加一层来解决，一致性哈希算法也是中间加了一层","like_count":0},{"had_liked":false,"id":201110,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585717445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585717445","product_id":100017301,"comment_content":"HTTPS中就用到了","like_count":0},{"had_liked":false,"id":196359,"user_name":"Geek_112e68","can_delete":false,"product_type":"c1","uid":1644011,"ip_address":"","ucode":"82843584C97F43","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WhoLIb4HZtuwErPetUjHj9JVOYFibDXDAcIic3K0CSzJp4zibe1cemraIq1S8YSN5KSCJcUdicm9f4aKTwZHxFBwTw/132","comment_is_top":false,"comment_ctime":1585275366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585275366","product_id":100017301,"comment_content":"一致性哈希算法","like_count":0},{"had_liked":false,"id":190868,"user_name":"SteelHuaSheng","can_delete":false,"product_type":"c1","uid":1396126,"ip_address":"","ucode":"BC8127FC5207FC","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/9e/04ec08bf.jpg","comment_is_top":false,"comment_ctime":1584702126,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584702126","product_id":100017301,"comment_content":"原来哈希算法可以在分布式中这么用。<br>可能给了我哈希算法，我都想不到可以这么用。<br>给了我望远镜，我可能还是不能把天空所有能看的都看个遍。<br>水平还得赶紧再长进长进<br><br>一致性那块可能还有点犯迷糊，我再看看。","like_count":0},{"had_liked":false,"id":186805,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1583930754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583930754","product_id":100017301,"comment_content":"老师 我有一个疑问。当其中一个结点宕机了，后面新增的数据会被存储到相应结点中。但是当这台宕机结点又恢复了，此时是否需要将刚刚新增的那部分数据重新计算一遍hashValue，并看看是否需要迁移？另外通常虚拟结点的个数是固定的吗？","like_count":0},{"had_liked":false,"id":175767,"user_name":"Elliot","can_delete":false,"product_type":"c1","uid":1030070,"ip_address":"","ucode":"CC58A6FD2F338C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b7/b6/17103195.jpg","comment_is_top":false,"comment_ctime":1580825366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580825366","product_id":100017301,"comment_content":"React 里的时间分片，底层是否与此有关呢？","like_count":0},{"had_liked":false,"id":173563,"user_name":"想象你的身影","can_delete":false,"product_type":"c1","uid":1785382,"ip_address":"","ucode":"F9301E3A1E76D5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTINv9F0mcuXvfOM6k7GWvrlTMjYkTpHH1XD6QtJia9R9nsCkjIrCz6AbgxS6UhSjcW6ojULv6iax8BA/132","comment_is_top":false,"comment_ctime":1579598088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579598088","product_id":100017301,"comment_content":"http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182，白话解析一致性算法，老师的文章看完之后再看这个，会有拨开云雾见青天的感觉","like_count":0},{"had_liked":false,"id":171876,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1579048632,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1579048632","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":167383,"user_name":"无始","can_delete":false,"product_type":"c1","uid":1758577,"ip_address":"","ucode":"B96982583496B1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d5/71/308fe8a4.jpg","comment_is_top":false,"comment_ctime":1577781524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577781524","product_id":100017301,"comment_content":"在我看来一致性hash算法就是负载均衡算法，一般还要增加更多的虚拟节点，方便数据的平均分配，也是为了在扩容后减少数据迁移量。","like_count":0},{"had_liked":false,"id":166907,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":1716933,"ip_address":"","ucode":"CD583272CF1237","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","comment_is_top":false,"comment_ctime":1577628381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577628381","product_id":100017301,"comment_content":"身份证最后一个数组校验，S3协议中的签名校验，HTTPS协议，KMS加密服务。。。","like_count":0},{"had_liked":false,"id":165647,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1577275427,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577275427","product_id":100017301,"comment_content":"应用五：负载均衡<br>\t1，负载均衡算法有很多，如轮询，随机，加权轮询等。但实现一个会话粘滞（session sticky）的负载均衡算法，是个难点。<br>\t2，最直接的方法是维护一张映射关系表，这张表的内容是客户端IP地址或会话ID与服务器编号的映射关系。客户端发出的每次请求，都先在映射表中查找应该路由到服务器编号，然后在请求编号对应的服务器。<br>\t但：比较浪费内存空间，客户端上下线，服务器扩容等都会导致映射失败，维护成本很大。<br>\t3，哈希算法，对客户端IP地址或者会话ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。这样就可将同一个IP过来的所有请求，都路由到同一个后端服务器上。<br>\t<br>应用六：数据分片<br>1，统计“搜索关键词”出现的次数<br>\t假如：有1T日志文件，记录了用户的搜索关键词，想要快速统计出每个关键词被搜索的次数：<br>\t难点：1，搜索日志很大，无法放到一台机器的内存中。2，只用一台机器处理，数据量巨大耗时很久。<br>\t方案：对数据进行分片，然后采用多台机器处理的方法，来提高处理速度。<br>具体思路：采用n台机器并行处理。从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后在跟n取模，最终得到的值，就是应该被分配的机器编号。<br><br>2，快速判断图片是否在图库中：<br>\t假如：图库中有1亿张图片，在单台机器上构建散列表是行不通的。1亿张图片构建散列表会远远超过单台机器的内存上限。<br>\t方案：对数据进行分片，采用多机处理。<br>具体思路：<br>准备n台机器，让每台机器只维护某一部分图片对应的散列表，每次从图片库中读取一个图片，计算唯一标识，然后于机器个数n求余取模，得到的值就是对应的要分配的机器编号，然后将这个图片的唯一标识和图片路径发往对应的机器构建列表。<br>当要判读一个图片是否在图库时，通过同样的哈希算法，计算这个图片的唯一标识，然后与机器个数n求余取模。去对应的机器上构建的散列表中查找。<br>\t资源估算：<br>\t\t\t散列表中每个数据单元包含两个信息，哈希值和图片文件路径。<br>\t\t\t假设：<br>通过MD5来计算哈希值，则长度是128bit（16字节）<br>文件路径长度的上限是256字节，假设平均长度是128字节。<br>若用链表法来解决冲突，则还需要存储指针，指针占用8字节<br>\t\t\t所以：散列表每个数据单元占用152个字节。<br>\t\t\t在假设：<br>\t\t\t\t一台机器的内存大小为2GB,<br>\t\t\t\t散列表的装载因子为0.75<br>\t\t\t\t那一台机器可以给：2GB * 0.75 &#47; 152=1000万张图片构建散列表<br><br>\t应用七：分布式存储<br>\t1，面对海量数据和海量用户，为了提供高数据的读取，写入能力，一般都采用分布式的方式来存储数据。<br>\t2，通过哈希算法对数据取哈希值，然后对机器取模，这个最终值就是应该存储的缓存机器编号。<br>\t\t但机器数量发生变化时，这种算法会导致所有的数据都要重新计算哈希值，然后重新搬移到正确的机器上。<br>\t\t这样就想当于，缓存中的数据一下子就都失效。所有的数据请求都会穿透缓存，直接去请求数据库。<br>\t3，一致性哈希算法：可以使得在新加入一个机器后，并不需要做大量的数据搬移。<br>假设有k台机器，数据的哈希值的范围是[0，MAX]。我们将整个范围划分成m个小区间（m远大于k），每个机器负责 m&#47;k个小空间。<br>当有新机器加入的时候，我们就将某几个小区间的数据，从原有的机器中搬移到新的机器中。这样，既不用全部重新哈希，搬移数据，也保持了各个机器上数据数量的均衡。<br>一致性哈希算法还会借助一个虚拟的环和虚拟结点，更加优美的实现出来。<br>","like_count":0},{"had_liked":false,"id":164249,"user_name":"seven","can_delete":false,"product_type":"c1","uid":1180307,"ip_address":"","ucode":"55CE5F60051F89","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","comment_is_top":false,"comment_ctime":1576915771,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576915771","product_id":100017301,"comment_content":"mysql数据库中间件mycal进行分库和分表用的是hash算法","like_count":0},{"had_liked":false,"id":164248,"user_name":"seven","can_delete":false,"product_type":"c1","uid":1180307,"ip_address":"","ucode":"55CE5F60051F89","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","comment_is_top":false,"comment_ctime":1576915623,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576915623","product_id":100017301,"comment_content":"nginx的负载均衡就是用了hash算法来实现的","like_count":0},{"had_liked":false,"id":162556,"user_name":"冲","can_delete":false,"product_type":"c1","uid":1149914,"ip_address":"","ucode":"4191C8A4DF3840","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIk46cor5XVFTPZbPOnb7pViabgy450pobo46hRHFQz5nR5ocYRKIzC8vShic36vwa553H4Vj50x5wA/132","comment_is_top":false,"comment_ctime":1576553816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576553816","product_id":100017301,"comment_content":"将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。这块不太理解，老师能否举个例子","like_count":0},{"had_liked":false,"id":162118,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1576463291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576463291","product_id":100017301,"comment_content":"一致性哈希算法就是通过环，判断一个对象应该被缓存到哪台服务器上的，将缓存服务器与被缓存对象都映射到hash环上以后，从被缓存对象的位置出发，沿顺时针方向遇到的第一个服务器，就是当前对象将要缓存于的服务器。","like_count":0},{"had_liked":false,"id":160642,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1575992059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575992059","product_id":100017301,"comment_content":"一致性哈希那段看了好多遍没明白","like_count":0},{"had_liked":false,"id":160554,"user_name":"moonfox","can_delete":false,"product_type":"c1","uid":1526355,"ip_address":"","ucode":"902BFF40EFA9FA","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","comment_is_top":false,"comment_ctime":1575973583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575973583","product_id":100017301,"comment_content":"对于划分关键字，既然都能划分关键字了，在划分的同时不能进行统计么？","like_count":0},{"had_liked":false,"id":159046,"user_name":"大魔王","can_delete":false,"product_type":"c1","uid":1308552,"ip_address":"","ucode":"5EB049D18E122F","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/88/da243c77.jpg","comment_is_top":false,"comment_ctime":1575524207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575524207","product_id":100017301,"comment_content":"老师,我太爱你了","like_count":0},{"had_liked":false,"id":155265,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1574672461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574672461","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":155224,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1574667456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574667456","product_id":100017301,"comment_content":"打卡<br>","like_count":0},{"had_liked":false,"id":150158,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1573470790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573470790","product_id":100017301,"comment_content":"dockers image的唯一标识也是","like_count":0},{"had_liked":false,"id":149380,"user_name":"anker","can_delete":false,"product_type":"c1","uid":1218937,"ip_address":"","ucode":"6EDF1FB9D45238","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/79/74d4f24f.jpg","comment_is_top":false,"comment_ctime":1573204884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573204884","product_id":100017301,"comment_content":"计算机里面学到的一个比较基础的数据位校验方式：奇偶校验也算是一种hash的应用","like_count":0},{"had_liked":false,"id":148984,"user_name":"网名还没想好","can_delete":false,"product_type":"c1","uid":1555732,"ip_address":"","ucode":"533BC9CF0A1BB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/bd/14/29e8cb77.jpg","comment_is_top":false,"comment_ctime":1573121777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573121777","product_id":100017301,"comment_content":"过瘾","like_count":0},{"had_liked":false,"id":148093,"user_name":"克尔苏加德","can_delete":false,"product_type":"c1","uid":1459388,"ip_address":"","ucode":"E35A6DFA012F37","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/bc/0bb265a7.jpg","comment_is_top":false,"comment_ctime":1572940078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572940078","product_id":100017301,"comment_content":"一致性哈希算法可以防止缓存服务器数量变化导致的全体缓存失效，只会失效一部分。","like_count":0},{"had_liked":false,"id":147228,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1572848157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572848157","product_id":100017301,"comment_content":"一致hash本质是为了尽可能少的不影响原有的hash映射，可以采用一致hash环（还是会影响某台机器），或者增加一个虚拟层。（将影响分摊到各个机器）","like_count":0},{"had_liked":false,"id":144975,"user_name":"AlexS","can_delete":false,"product_type":"c1","uid":1472051,"ip_address":"","ucode":"3DA81A613CE645","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","comment_is_top":false,"comment_ctime":1572146204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572146204","product_id":100017301,"comment_content":"老师讲得太棒了，介绍理论的同时结合实际应用，让知识更立体生动。同学们的留言补充也是超赞的。咧。","like_count":0},{"had_liked":false,"id":144337,"user_name":"深山何处钟","can_delete":false,"product_type":"c1","uid":1100117,"ip_address":"","ucode":"5D42024E40D751","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/55/3b2526ce.jpg","comment_is_top":false,"comment_ctime":1571899888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571899888","product_id":100017301,"comment_content":"我是个菜鸡哈，有个这样的幻觉（感觉就算对了也没啥用）：<br>感觉我们的arr[0], arr[2]这样的，本质上也是一个哈希算法。。。","like_count":0},{"had_liked":false,"id":142451,"user_name":"厚积薄发","can_delete":false,"product_type":"c1","uid":1657999,"ip_address":"","ucode":"6FE711F65C8C66","user_header":"https://static001.geekbang.org/account/avatar/00/19/4c/8f/83eefcff.jpg","comment_is_top":false,"comment_ctime":1571370389,"is_pvip":false,"replies":[{"id":"55227","content":"对的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571618934,"ip_address":"","comment_id":142451,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571370389","product_id":100017301,"comment_content":"老师举例的负载均衡，利用哈希算法解决同一个IP的请求，都被路由到同一个服务器编号，而服务器机器增加、减少等，原来的服务器会变成新的服务器，这个时候如果涉及到数据文件等的迁移，那么可以应用到下面讲到的哈希一致性能解决了数据的全量搬迁问题，我的理解是这样，不知道对不对","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471132,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571618934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134271,"discussion_content":"&#39;&#39;而服务器机器增加、减少等，原来的服务器会变成新的服务器&#39;&#39; 听不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579013922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142254,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1571320859,"is_pvip":false,"replies":[{"id":"54888","content":"没说非得是2的32次方吧，其他的也可以的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571359267,"ip_address":"","comment_id":142254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571320859","product_id":100017301,"comment_content":"找了好多资料终于看懂了一致性hash算法，但是还是有一个疑问，就是为什么节点是2的32次方，而不是其他，比如10w。请老师帮我解答一下，谢谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471047,"discussion_content":"没说非得是2的32次方吧，其他的也可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571359267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138688,"user_name":"Joiner","can_delete":false,"product_type":"c1","uid":1071941,"ip_address":"","ucode":"7F67D4C325E71F","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/45/5dc5437e.jpg","comment_is_top":false,"comment_ctime":1570421971,"is_pvip":false,"replies":[{"id":"53592","content":"一致性hash算法应该不需要","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570579936,"ip_address":"","comment_id":138688,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570421971","product_id":100017301,"comment_content":"老师，关于分布式存储，当机器扩容后，为什么所有的数据都需要重新计算hash值？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469620,"discussion_content":"一致性hash算法应该不需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570579936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78086,"discussion_content":"一致性hash对于要迁移的数据也要通过哈希值计算它属于的区间吧，除非也保存了槽号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575974581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135111,"user_name":"Geek_f8dc6b","can_delete":false,"product_type":"c1","uid":1448402,"ip_address":"","ucode":"D60EB10F9F5932","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBiaPEt5QP5QtiaYthFoLwLGc9oicd1OOMRXZGzRPECuSq0tPrp7BLhqoJDiarfYFT6GnrTicoQVoZk0w/132","comment_is_top":false,"comment_ctime":1569030671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569030671","product_id":100017301,"comment_content":"老师讲的真好，太感谢了！祝好啊","like_count":0},{"had_liked":false,"id":134446,"user_name":"ellenlovestwerk","can_delete":false,"product_type":"c1","uid":1645672,"ip_address":"","ucode":"21AA6258CAF12D","user_header":"https://static001.geekbang.org/account/avatar/00/19/1c/68/8eed8224.jpg","comment_is_top":false,"comment_ctime":1568845436,"is_pvip":false,"replies":[{"id":"51691","content":"一个意思","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568933630,"ip_address":"","comment_id":134446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568845436","product_id":100017301,"comment_content":"究竟是取余求模还是求模取余？ 我看文本和解说人说的不一样？ 然后这两个概念有什么区别吗？ 求高人指点！！！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467753,"discussion_content":"一个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568933630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133530,"user_name":"ITACHI","can_delete":false,"product_type":"c1","uid":1260500,"ip_address":"","ucode":"4EE419128ED9E8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/d4/e4bfb25f.jpg","comment_is_top":false,"comment_ctime":1568597247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568597247","product_id":100017301,"comment_content":"mark下","like_count":0},{"had_liked":false,"id":132902,"user_name":"supermouse","can_delete":false,"product_type":"c1","uid":1321860,"ip_address":"","ucode":"88072D5F881827","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/84/07f0c0d6.jpg","comment_is_top":false,"comment_ctime":1568266998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568266998","product_id":100017301,"comment_content":"其他哈希算法的应用：Java 中的 hashCode() 函数？","like_count":0},{"had_liked":false,"id":128105,"user_name":"lyh","can_delete":false,"product_type":"c1","uid":1247951,"ip_address":"","ucode":"A35C3AEE94C37E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBWjSjrBYr4DpMktO8XeRnpXeJFLWP0kpiaKFlsoeOoCN87PUDfbqicjPibuWIH4rdyoa0hE1iannzVKg/132","comment_is_top":false,"comment_ctime":1566831547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566831547","product_id":100017301,"comment_content":"http:&#47;&#47;www.zsythink.net&#47;archives&#47;1182 简单明了 一致性哈希","like_count":0},{"had_liked":false,"id":121968,"user_name":"🍸周澳🤗จุ๊บ","can_delete":false,"product_type":"c1","uid":1440905,"ip_address":"","ucode":"F43CE389EBAEE8","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/89/397feef0.jpg","comment_is_top":false,"comment_ctime":1565259846,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565259846","product_id":100017301,"comment_content":"Hash槽：redis cluster使用的算法，redis准备了16384（1024*2*8）个槽，每个服务器外加上客户端都带有这16382个槽，总计2k的数据量。这些槽分配给不同的节点，每个节点有16384&#47;n个槽。当扩容的时候，比如增加1个服务器，那么每个节点变为16384&#47;n+1个槽，客户端和服务器都重新计算，变动的缓存也同时迁移","like_count":0,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78090,"discussion_content":"只有受影响的区间对应的服务器的槽数才会变化吧，所有节点的槽数都变就不是一致性hash的初衷了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575974869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121336,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1565102064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565102064","product_id":100017301,"comment_content":"算法_22<br># 作业<br>哈希的应用很多，java中，有时候equals方法就是在比较hashCode...<br><br># 内容<br>哈希算法在分布式中的应用<br>- 负载均衡(哈希算法代替映射表)<br>- 数据分片(突破单机资源限制)<br>- 分布式存储(一致性哈希算法，解决在扩容或缩容时，产生的缓存等数据搬移问题)<br><br># 感想<br>现在想研究一下，怎么写一个哈希算法。。。","like_count":0},{"had_liked":false,"id":118798,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1564448495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564448495","product_id":100017301,"comment_content":"希望有机会能用到实战中。","like_count":0},{"had_liked":false,"id":118639,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1564404444,"is_pvip":false,"replies":[{"id":"43658","content":"有点那个意思","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564526717,"ip_address":"","comment_id":118639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564404444","product_id":100017301,"comment_content":"负载均衡里边的哈希算法就是用CPU处理时间来换取内存空间吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460503,"discussion_content":"有点那个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564526717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109857,"user_name":"一念_风生","can_delete":false,"product_type":"c1","uid":1577339,"ip_address":"","ucode":"13211B6B33C491","user_header":"https://static001.geekbang.org/account/avatar/00/18/11/7b/3426351c.jpg","comment_is_top":false,"comment_ctime":1562122221,"is_pvip":true,"replies":[{"id":"39883","content":"目的就是对数据分片，均匀的分配到不同机器上","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562191951,"ip_address":"","comment_id":109857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562122221","product_id":100017301,"comment_content":"“我们每次从图库中读取一个图片,计算唯一标识,然后与机器个数 n 求余取模,得到的值对应要分配的机器编号” 这个没太理解","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456608,"discussion_content":"目的就是对数据分片，均匀的分配到不同机器上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562191951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108183,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561691774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561691774","product_id":100017301,"comment_content":"负载均衡中实现会话粘滞的哈希算法：对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。<br>数据分片中的WordCount问题的难点：<br><br>1. 文件过大，无法放入内存<br>2. 单台机器处理大数据耗时长<br><br>数据分片中的WordCount问题中的哈希算法：利用哈希算法+取模的方式将数据分配到不同的机器<br>数据分片中的机器数量计算：根据哈希值大小&amp;文件路径大小&amp;指针大小&amp;负载因子&amp;一台机器内存大小等综合计算所需的机器数<br>分布式存储中的哈希算法：一致性哈希算法<br><br>另外，老师非常能抓住一个数据结构或算法的核心，删繁就简，并总是能结合实践和其他知识点，受教了！","like_count":0},{"had_liked":false,"id":107435,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1561535992,"is_pvip":false,"replies":[{"id":"38958","content":"你可以网上搜下一致性hash算法的实现，有很多讲的比较清楚的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561599089,"ip_address":"","comment_id":107435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561535992","product_id":100017301,"comment_content":"<br>老师是这样实现虚拟节点的吗？<br><br>“虚拟节点”的 hash 计算可以采用对应节点的 IP 地址加数字后缀的方式。例如假设 cache A 的 IP 地址为202.168.14.241 。<br><br>引入“虚拟节点”前，计算 cache A 的 hash 值：<br><br>Hash(“202.168.14.241”);<br><br>引入“虚拟节点”后，计算“虚拟节”点 cache A1 和 cache A2 的 hash 值：<br><br>Hash(“202.168.14.241#1”);  &#47;&#47; cache A1<br><br>Hash(“202.168.14.241#2”);  &#47;&#47; cache A2<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455509,"discussion_content":"你可以网上搜下一致性hash算法的实现，有很多讲的比较清楚的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561599089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93066,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1557388247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557388247","product_id":100017301,"comment_content":"老师,能不能展示一些分布式处理的代码,我感觉很酷","like_count":0},{"had_liked":false,"id":93021,"user_name":"Shawn","can_delete":false,"product_type":"c1","uid":1014729,"ip_address":"","ucode":"B95D7B54465DE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/c9/75c9002e.jpg","comment_is_top":false,"comment_ctime":1557379081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557379081","product_id":100017301,"comment_content":"如果一个问题解决起来很困难，那就加中间层，如果还是不行，那就再加一层。<br>中间层就是银弹，哈哈。","like_count":0},{"had_liked":false,"id":84147,"user_name":"快乐de肥仔","can_delete":false,"product_type":"c1","uid":1470332,"ip_address":"","ucode":"EB9E89D174E722","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/7c/db64bd6d.jpg","comment_is_top":false,"comment_ctime":1554793620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554793620","product_id":100017301,"comment_content":"晚到的新人：） 一致性算法如果大家看的比较迷糊的话，可以看一下这篇文章，有个基础的认知，老师写的太过于精简啦 https:&#47;&#47;www.cnblogs.com&#47;moonandstar08&#47;p&#47;5405991.html","like_count":0},{"had_liked":false,"id":81904,"user_name":"Vicky","can_delete":false,"product_type":"c1","uid":1470314,"ip_address":"","ucode":"84610E23A73528","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL3OaibxsOia5ZMiaK5B1AIBW2KwibMhuInSD0xORaSbS2jKUTkLpWfz7ueySJhZfD72HjiamqeW8Hc2HA/132","comment_is_top":false,"comment_ctime":1554081034,"is_pvip":false,"replies":[{"id":"29790","content":"可以失效重连","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554162347,"ip_address":"","comment_id":81904,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1554081034","product_id":100017301,"comment_content":"用哈希算法实现session sticky的负载均衡，那如果扩容缩容了，同一ip过来的请求不会被映射到不同的节点上吗？还能找到对应session？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445387,"discussion_content":"可以失效重连","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554162347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134295,"discussion_content":"失效重连不会对业务有影响么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579014244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77542,"user_name":"weimin","can_delete":false,"product_type":"c1","uid":1354721,"ip_address":"","ucode":"C94DD3DE451885","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/e1/14cf564b.jpg","comment_is_top":false,"comment_ctime":1552961178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552961178","product_id":100017301,"comment_content":"老师，我一直很好奇，为什么一致性哈希要采用顺时针第一个，而不是逆时针第一个，按理来说逆时针第一个也可以呀！求解！","like_count":0},{"had_liked":false,"id":75151,"user_name":"nʌθɪŋ风格","can_delete":false,"product_type":"c1","uid":1265618,"ip_address":"","ucode":"C3ACC75F70ECBE","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/d2/c6b2ba64.jpg","comment_is_top":false,"comment_ctime":1552358894,"is_pvip":false,"replies":[{"id":"27865","content":"k，max是啥啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552615402,"ip_address":"","comment_id":75151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552358894","product_id":100017301,"comment_content":"老师好，一致性算法中，定义区间为10，如果Max一直保持是k的整数倍，也就是k加1，Max加10，是不是就不用数据搬移了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442806,"discussion_content":"k，max是啥啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552615402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69291,"user_name":"胡家鹏","can_delete":false,"product_type":"c1","uid":1109940,"ip_address":"","ucode":"1636F84062948B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","comment_is_top":false,"comment_ctime":1550713105,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1550713105","product_id":100017301,"comment_content":"余数不能大于除数，上面我错了，汗颜","like_count":0},{"had_liked":false,"id":69279,"user_name":"胡家鹏","can_delete":false,"product_type":"c1","uid":1109940,"ip_address":"","ucode":"1636F84062948B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","comment_is_top":false,"comment_ctime":1550711171,"is_pvip":true,"replies":[{"id":"24625","content":"负载均衡算法有很多。我们讲的这种叫Round-Robin算法，在极端情况下，会发生你说的问题。不过，在真实的软件开发中，它往往表现的会很好，简单好用。<br><br>如果对10取余数的话，是0到9。机器是要编码的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550719931,"ip_address":"","comment_id":69279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550711171","product_id":100017301,"comment_content":"负载均衡，哈希值对n台机器取模，也就是求余数，能保证n台机器都会公平接受请求吗？是不是会有一种情况，由于余数随机，其中一台或几台机器永远也不会被访问到，还有余数就是0-9吧，那最后是不是对服务器编码做了处理？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440037,"discussion_content":"负载均衡算法有很多。我们讲的这种叫Round-Robin算法，在极端情况下，会发生你说的问题。不过，在真实的软件开发中，它往往表现的会很好，简单好用。\n\n如果对10取余数的话，是0到9。机器是要编码的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550719931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65264,"user_name":"镞砺括羽","can_delete":false,"product_type":"c1","uid":1309089,"ip_address":"","ucode":"EC4CD773CA06EA","user_header":"https://static001.geekbang.org/account/avatar/00/13/f9/a1/0396e1fb.jpg","comment_is_top":false,"comment_ctime":1549172842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549172842","product_id":100017301,"comment_content":"一致性哈希算法早在学习redis里面碰上了，解决slot的分配问题，一开始看得一脸懵逼，看了3次以后才彻底了解了。","like_count":0},{"had_liked":false,"id":63009,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1548226031,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548226031","product_id":100017301,"comment_content":"负载均衡，数据分片，分布式存储(一致性哈希)","like_count":0},{"had_liked":false,"id":62410,"user_name":"Tattoo","can_delete":false,"product_type":"c1","uid":1036503,"ip_address":"","ucode":"CE926AC8582C96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/d7/a09ef784.jpg","comment_is_top":false,"comment_ctime":1548049560,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548049560","product_id":100017301,"comment_content":"＂也就是说，同一个搜索关键词会被分配到同一个机器上。”这句话我的理解就是一台机器对应与一个关键字，如果是这样的话，那么，老师，如果搜索的词全都不相同的话，那得用多少台服务器呢？像这种情况该如何处理啊？","like_count":0},{"had_liked":false,"id":56496,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1546477975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546477975","product_id":100017301,"comment_content":"这二篇hash算法讲解结合以前的工作经验理解很透测，算法其实也不难","like_count":0},{"had_liked":false,"id":55213,"user_name":"水果刀","can_delete":false,"product_type":"c1","uid":1236586,"ip_address":"","ucode":"CA787A086DAB70","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/6a/4db4a75e.jpg","comment_is_top":false,"comment_ctime":1546067328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546067328","product_id":100017301,"comment_content":"数据分片“搜索关键词”出现的次数，依次读出每个搜索关键词，的时候就可以计数了吧？<br>---------------------------<br>我的理解是这些关键词在写入文件的时候就已经经过哈希计算分到不同的机器中存储了。","like_count":0},{"had_liked":false,"id":53852,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1545741745,"is_pvip":false,"replies":[{"id":"19674","content":"不急 慢慢来","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545829252,"ip_address":"","comment_id":53852,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1545741745","product_id":100017301,"comment_content":"终于要看到下一章节二叉树了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434267,"discussion_content":"不急 慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545829252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575234,"discussion_content":"我也很期待，终于熬到二叉树了。很兴奋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654676752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52001,"user_name":"hhhhhh","can_delete":false,"product_type":"c1","uid":1017443,"ip_address":"","ucode":"0826CE1D2C9F1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/63/0112cc96.jpg","comment_is_top":false,"comment_ctime":1545291819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545291819","product_id":100017301,"comment_content":"老师好，搜索关键词出现次数的统计问题，之所以要把关键词分配到各个机器上是不同关键词的数量也很大吗？ ","like_count":0},{"had_liked":false,"id":51984,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1545289368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545289368","product_id":100017301,"comment_content":"负载均衡：如何实现一个会话粘滞的负载均衡算法？即同一个客户端上在一次会话中所有的请求都路由到同一个服务器上。最直接的方法是维护一张映射关系表，内容是客户端IP地址或者会话ID于服务器编号的映射关系。但映射表大则浪费内存，且扩容、缩容都会导致映射失效。 可以借助哈希算法完美解决：对客户端ip地址或者会话id计算哈希值，将哈希值于服务器列表大小进行取模运算，得到的值就是应该被路由到的服务器编号。这样就可以把同一个ip过来的所有请求都路由到同一个后端服务器上。<br><br>数据分片：统计“搜索关键词”次数。若有1T的日志文件，里面是用户搜索关键词，如何统计关键词的搜索次数？ 可以线对数据进行分片，然后用多太机器处理的方法来提高处理速度。即用n台机器并行处理。我们从日志文件中一次读取每个关键词通过哈希函数计算哈希值，然后再对n取模，最终的到的值就是应该被分配到的机器编号。每个机器分别计算关键词出现次数，合并起来即结果（MapReduce的基本设计思想）<br><br>分布式存储：互联网面对海量的数据和用户，一般都采用分布式缓存，即将数据分布再多太机器上。所以一般都是通过哈希值对机器个数取模，最后的结果值即数据存放再该机器上。但当扩容时新增加了机器，那么取模的值会都做改变。那么原来的数据存放的机器编号就变了，这是需要将所有数据都报搬移到正确的机器人上，所有数据都会取请求数据库则可能会发生雪崩效应，压垮数据库。所以这时候就需要一致性哈希算法。即将数据分为m个小区间（m远大于k机器数），每个机器负责m&#47;k个小区间，当加入新机器时，则只需搬移几个小区间的数据，不用全部重新哈希、搬移数据。<br>一致性哈希算法应用非常广泛，很多分布式存储系统中都可以看到。","like_count":0},{"had_liked":false,"id":51249,"user_name":"暮雨","can_delete":false,"product_type":"c1","uid":1176426,"ip_address":"","ucode":"4B7F4932446EF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/6a/6d82e7a3.jpg","comment_is_top":false,"comment_ctime":1545142497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545142497","product_id":100017301,"comment_content":"那个负载均衡的会话保持，hash取模怎么实现，hash函数怎么设计","like_count":0},{"had_liked":false,"id":50295,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1544946693,"is_pvip":false,"replies":[{"id":"18165","content":"要维护映射关系。哪些小区间对应哪天机器","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545010470,"ip_address":"","comment_id":50295,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1544946693","product_id":100017301,"comment_content":"假设我们有 k 个机器，数据的哈希值的范围是 [0, MAX]。我们将整个范围划分成 m 个小区间（m 远大于 k），每个机器负责 m&#47;k 个小区间。当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡。<br><br>“某几个小区间”怎么选呢    hash值已经全部改变了啊    原先的区间的数据已经全部失效了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432935,"discussion_content":"要维护映射关系。哪些小区间对应哪天机器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545010470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575235,"discussion_content":"争哥，其实，不能算是搬移吧。是让原来机器的缓存自然失效，然后有请求过来后，从新增加的机器上再次添加新缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654676877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48391,"user_name":"ccx","can_delete":false,"product_type":"c1","uid":1042577,"ip_address":"","ucode":"FC0B6CC8A3D3A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/91/e05a03a0.jpg","comment_is_top":false,"comment_ctime":1544434223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544434223","product_id":100017301,"comment_content":"哈，一致性哈希正好是我最近研究的东西，为了搞清楚为什么 ipfs 的 Kademlia 分布式哈希表在全网 1000 万个节点的分布式系统中的值搜索最多只需要 8 跳这个问题，花了整整一周的时间；如果早点看到这篇，那应该要节省不少时间了。","like_count":0},{"had_liked":false,"id":48362,"user_name":"熊熊熊","can_delete":false,"product_type":"c1","uid":1250631,"ip_address":"","ucode":"8B9ECDF33BE076","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/47/17f0687b.jpg","comment_is_top":false,"comment_ctime":1544428483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544428483","product_id":100017301,"comment_content":"厉害厉害，表示买的非常值，之前在学校学过这些理论知识，并没有这么深刻的理解，都是死记硬背。出来工作之后，再回过头看这些，仿佛打开新世界的大门，另外对于一致性哈希算法 说的太抽象了，不好理解","like_count":0},{"had_liked":false,"id":46782,"user_name":"不成熟的萌","can_delete":false,"product_type":"c1","uid":1244537,"ip_address":"","ucode":"4F5059446D062D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/79/d42c4c68.jpg","comment_is_top":false,"comment_ctime":1543980670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543980670","product_id":100017301,"comment_content":"突然对哈希算法有了那么一丢丢理解。<br>1. hash函数的本质就是对一个东西，或者一个复杂对象进行了数字唯一标识。存储这个复杂对象可能需要很多东西，但存储这个标识非常简单。我们之前的顺序查找类比一下，就是在国内找一个人，挨个问每个人是不是。而假设这个人可以hash，hash后得到其身份证号，我们根据身份证号在国家档案库中一查，就可以查到这个人。<br>2. hash函数冲突的16个9可能性基本意味着我们可以做到唯一标识。<br>利用ipv6的一句话，即地球上的每一粒沙子我们都可以进行唯一标识。所以因为这个独一无二被我们称为数据的指纹。如果嫌这个不够的话，可以使用多重hash函数（这就是在性能上和唯一性的衡量了）。<br>3. hash函数表示对象时又有一定均衡性。这即天然将任何数据经过hash转换后的分布变为均匀分布。所以相当于做了负载均衡。而我们只要对其进行取余，在大样本情况下，基本可以做到数据均衡分配。","like_count":0},{"had_liked":false,"id":43889,"user_name":"qzq","can_delete":false,"product_type":"c1","uid":1130407,"ip_address":"","ucode":"334B5E522EBF1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/a7/a378347f.jpg","comment_is_top":false,"comment_ctime":1543318443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543318443","product_id":100017301,"comment_content":"HDFS加Spark处理这么多数据可行吗？","like_count":0},{"had_liked":false,"id":43629,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1543248814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543248814","product_id":100017301,"comment_content":"「我们引入“虚拟节点”，每台机器都可以拔一根汗毛，变成若干台，把虚拟节点分散到 60 个点上，归属“虚拟节点”的图片，均保存到它的真身」有种恍然大悟的感觉...","like_count":0},{"had_liked":false,"id":43398,"user_name":"寂静的声音","can_delete":false,"product_type":"c1","uid":1020916,"ip_address":"","ucode":"9A839520267567","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/f4/8d881025.jpg","comment_is_top":false,"comment_ctime":1543222290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543222290","product_id":100017301,"comment_content":"关于留言中补充的一致性算法的漫画图解简直太棒了，工作中也碰到了这种分库分表的情况，不同的公司的处理方式不同，视野有限，处理方式都没有这个看起来这么优美","like_count":0},{"had_liked":false,"id":42930,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1543110636,"is_pvip":false,"replies":[{"id":"15606","content":"假设的，并不一定真的是","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543286408,"ip_address":"","comment_id":42930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543110636","product_id":100017301,"comment_content":"为什么单台机器的内存大小是2gb啊，现在一般pc不是都有8gb了吗？小白求教","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430247,"discussion_content":"假设的，并不一定真的是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543286408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42926,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1543109969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543109969","product_id":100017301,"comment_content":"MapReduce 的基本设计思想原来有hash的数据分片！tql","like_count":0},{"had_liked":false,"id":40212,"user_name":"于斯人也","can_delete":false,"product_type":"c1","uid":1001227,"ip_address":"","ucode":"F40A74F87EA2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/0b/f9cf6d51.jpg","comment_is_top":false,"comment_ctime":1542554985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542554985","product_id":100017301,"comment_content":"希望&quot;冲突碰撞&quot;的 局部敏感哈希 simhash geohash","like_count":0},{"had_liked":false,"id":39431,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1542274544,"is_pvip":false,"replies":[{"id":"14094","content":"嗯嗯 那就略过 看后面的吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542279657,"ip_address":"","comment_id":39431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542274544","product_id":100017301,"comment_content":"请问后面这几节讲到的应用都是偏向于服务器端开发的嘛？作为移动端开发的，我感觉这几课我目前没有用到。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429063,"discussion_content":"嗯嗯 那就略过 看后面的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542279657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39381,"user_name":"Fran","can_delete":false,"product_type":"c1","uid":1162011,"ip_address":"","ucode":"6F27C5D771A53A","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/1b/67b58fbf.jpg","comment_is_top":false,"comment_ctime":1542260302,"is_pvip":false,"replies":[{"id":"14100","content":"嗯 所以才有线程安全的散列表的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542279823,"ip_address":"","comment_id":39381,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542260302","product_id":100017301,"comment_content":"问一个，和本篇文章无关的问题，在多线程操作的情况下，用链表解决哈希冲突的哈希表，链表会不会出现循环链表的可能？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429038,"discussion_content":"嗯 所以才有线程安全的散列表的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542279823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39247,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1542239568,"is_pvip":false,"replies":[{"id":"14041","content":"1 图片存在硬盘上的 我们在内存中构建散列表<br>2 图片如果没规律的存储在n台机器上 散列表也可以放在这n台机器上 只是每台机器上的图片和散列表不一一对应了<br>3 图片可能是存在想gfs这样的分布式文件系统上的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542246710,"ip_address":"","comment_id":39247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542239568","product_id":100017301,"comment_content":"如果图片在存储时没有使用任何算法，随意的存放在 n 台服务器中，达到 1 亿张时 n 台服务器被存满，我们希望将这些图片使用哈希算法重新存储 ，如果不使用额外的服务器能否实现呢？<br><br>（个人感觉是做不到的，但不确定最少需要多少额外的空间）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428981,"discussion_content":"1 图片存在硬盘上的 我们在内存中构建散列表\n2 图片如果没规律的存储在n台机器上 散列表也可以放在这n台机器上 只是每台机器上的图片和散列表不一一对应了\n3 图片可能是存在想gfs这样的分布式文件系统上的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542246710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38515,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1542070579,"is_pvip":false,"replies":[{"id":"13803","content":"不用存哈希值的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542073372,"ip_address":"","comment_id":38515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542070579","product_id":100017301,"comment_content":"散列表每个数据单元为什么要包含哈希值？难道哈希值不是数组下标么，或者取模后的数组下标？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428730,"discussion_content":"不用存哈希值的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542073372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38265,"user_name":"我不吃甜食","can_delete":false,"product_type":"c1","uid":1086808,"ip_address":"","ucode":"1718E6D78F2852","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/58/95e9507d.jpg","comment_is_top":false,"comment_ctime":1542009124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542009124","product_id":100017301,"comment_content":"听了这篇分享，很有收获；在一致性hash算法中，如果每个节点做了本地化存储，那么增减节点时，有什么好的办法吗？","like_count":0},{"had_liked":false,"id":38109,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1541941194,"is_pvip":false,"replies":[{"id":"13704","content":"对缓存来说 实际上也不用搬移 直接让原来的数据缓存失效就好","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541985658,"ip_address":"","comment_id":38109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541941194","product_id":100017301,"comment_content":"我希望有人来解决一下，当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器搬移到新的机器中。先对m取模（避免hash值重新计算）,m对k取模，每台机器上有m&#47;k个小区间，那新增机器时，区间数据是怎么搬移的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428606,"discussion_content":"对缓存来说 实际上也不用搬移 直接让原来的数据缓存失效就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541985658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38044,"user_name":"jinghaitingfeng","can_delete":false,"product_type":"c1","uid":1030201,"ip_address":"","ucode":"8FE786877B0777","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/39/16ac4aa7.jpg","comment_is_top":false,"comment_ctime":1541906849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541906849","product_id":100017301,"comment_content":"这个买的值了","like_count":0},{"had_liked":false,"id":38043,"user_name":"Demter","can_delete":false,"product_type":"c1","uid":1158439,"ip_address":"","ucode":"BE3B6F726916CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/27/5556ae50.jpg","comment_is_top":false,"comment_ctime":1541906446,"is_pvip":false,"replies":[{"id":"13712","content":"已回复其他同学的留言了 你可以去看下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987018,"ip_address":"","comment_id":38043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541906446","product_id":100017301,"comment_content":"在负载均衡那一块，客户端上线下线和服务器扩容缩容怎么影响映射表呢啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428574,"discussion_content":"已回复其他同学的留言了 你可以去看下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37912,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1541806325,"is_pvip":false,"replies":[{"id":"13720","content":"哥们 没怎么看懂你说的 能再描述一下吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987631,"ip_address":"","comment_id":37912,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541806325","product_id":100017301,"comment_content":"1 亿张图片在 n 台机器上，是散乱的，而且机器都被存满了，如果不提供额外的空间，能做到对数据进行分片实现高效查找么？<br><br>如果不能，额外大概需要几台机器（空间）？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428524,"discussion_content":"哥们 没怎么看懂你说的 能再描述一下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37842,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1541746477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541746477","product_id":100017301,"comment_content":"这一节怎么看都像是在为大数据做铺垫哈哈","like_count":0},{"had_liked":false,"id":37791,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1541728964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541728964","product_id":100017301,"comment_content":"crc 认证和hash 有什么关系吗 crc 我印象中是校验码 。 方便老师解答下吗","like_count":0},{"had_liked":false,"id":37783,"user_name":"cweioo","can_delete":false,"product_type":"c1","uid":1087300,"ip_address":"","ucode":"E48D291E6C6993","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/44/52b5e2e2.jpg","comment_is_top":false,"comment_ctime":1541727730,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1541727730","product_id":100017301,"comment_content":"分布式，理由到同一个服务器，那万一这台服务器挂了，后面怎么处理，session怎么同步？","like_count":0},{"had_liked":false,"id":37775,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1541727052,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1541727052","product_id":100017301,"comment_content":"看到有小伙伴提到将缓存机器扩容与散列表扩容比较，其实这里有一些不同点：<br>①：散列表扩容：即使使用动态扩容，在下一次扩容之前，数据会逐渐迁移到新的散列表<br>②：缓存机器扩容：机器扩容一般是人为去加机器，可能会出现连续几次加机器的操作，此时，两次查找也无法解决问题<br>个人觉得最大的不同是：散列表的扩容至少是double（或者保证下次扩容时，数据全部在现有的散列表中）；而缓存机器扩容一般是加少许，此时就需要一致性hash算法了","like_count":0},{"had_liked":false,"id":37765,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1541725811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541725811","product_id":100017301,"comment_content":"最近几节课都没什么代码！纯理论看的有些吃力！然后没只做过移动端开发，对这几个例子理解有点难度！","like_count":0},{"had_liked":false,"id":37761,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1541725494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541725494","product_id":100017301,"comment_content":"请问一致性哈希算法是先对m取模，然后再对k取模吗？因为不是直接对机器数取模，所以当扩容时不会对所有数据进行重新哈希，老师，我的理解对吗？","like_count":0},{"had_liked":false,"id":37755,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1541724436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541724436","product_id":100017301,"comment_content":"MySQL分库分表后，根据分片键查询数据","like_count":0}]}