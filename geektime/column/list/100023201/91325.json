{"id":91325,"title":"CSS动画与交互：为什么动画要用贝塞尔曲线这么奇怪的东西？","content":"<p>你好，我是winter，今天我们来学习一下CSS的动画和交互。</p><p>在CSS属性中，有这么一类属性，它负责的不是静态的展现，而是根据用户行为产生交互。这就是今天我们要讲的属性。</p><p>首先我们先从属性来讲起。CSS中跟动画相关的属性有两个：animation和transition。</p><h2>animation属性和transition属性</h2><p>我们先来看下animation的示例，通过示例来了解一下animation属性的基本用法:</p><pre><code class=\"language-CSS\">@keyframes mykf\n{\n  from {background: red;}\n  to {background: yellow;}\n}\n\ndiv\n{\n    animation:mykf 5s infinite;\n}\n</code></pre><p>这里展示了animation的基本用法，实际上animation分成六个部分：</p><ul>\n<li>animation-name 动画的名称，这是一个keyframes类型的值（我们在第9讲“CSS语法：除了属性和选择器，你还需要知道这些带@的规则”讲到过，keyframes产生一种数据，用于定义动画关键帧）；</li>\n<li>animation-duration 动画的时长；</li>\n<li>animation-timing-function\t动画的时间曲线；</li>\n<li>animation-delay\t动画开始前的延迟；</li>\n<li>animation-iteration-count\t动画的播放次数；</li>\n<li>animation-direction\t动画的方向。</li>\n</ul><!-- [[[read_end]]] --><p>我们先来看 <code>animation-name</code>，这个是一个keyframes类型，需要配合@规则来使用。</p><p>比如，我们前面的示例中，就必须配合定义 mymove 这个 keyframes。keyframes的主体结构是一个名称和花括号中的定义，它按照百分比来规定数值，例如：</p><pre><code class=\"language-CSS\">@keyframes mykf {\n  0% { top: 0; }\n  50% { top: 30px; }\n  75% { top: 10px; }\n  100% { top: 0; }\n}\n</code></pre><p>这里我们可以规定在开始时把top值设为0，在50%是设为30px，在75%时设为10px，到100%时重新设为0，这样，动画执行时就会按照我们指定的关键帧来变换数值。</p><p>这里，0%和100%可以写成from和to，不过一般不会混用，画风会变得很奇怪，比如：</p><pre><code class=\"language-CSS\">@keyframes mykf {\n  from { top: 0; }\n  50% { top: 30px; }\n  75% { top: 10px; }\n  to { top: 0; }\n}\n</code></pre><p>这里关键帧之间，是使用 <code>animation-timing-function</code> 作为时间曲线的，稍后我会详细介绍时间曲线。</p><p>接下来我们来介绍一下transition。transition与animation相比来说，是简单得多的一个属性。</p><p>它有四个部分：</p><ul>\n<li>transition-property 要变换的属性；</li>\n<li>transition-duration 变换的时长；</li>\n<li>transition-timing-function 时间曲线；</li>\n<li>transition-delay 延迟。</li>\n</ul><p>这里的四个部分，可以重复多次，指定多个属性的变换规则。</p><p>实际上，有时候我们会把transition和animation组合，抛弃animation的timing-function，以编排不同段用不同的曲线。</p><pre><code class=\"language-CSS\">@keyframes mykf {\n  from { top: 0; transition:top ease}\n  50% { top: 30px;transition:top ease-in }\n  75% { top: 10px;transition:top ease-out }\n  to { top: 0; transition:top linear}\n}\n</code></pre><p>在这个例子中，在keyframes中定义了transition属性，以达到各段曲线都不同的效果。</p><p>接下来，我们就来详细讲讲刚才提到的timing-function，动画的时间曲线。</p><h2>三次贝塞尔曲线</h2><p>我想，你能从很多CSS的资料中都找到了贝塞尔曲线，但是为什么CSS的时间曲线要选用（三次）贝塞尔曲线呢？</p><p>我们在这里首先要了解一下贝塞尔曲线，贝塞尔曲线是一种插值曲线，它描述了两个点之间差值来形成连续的曲线形状的规则。</p><p>一个量（可以是任何矢量或者标量）从一个值到变化到另一个值，如果我们希望它按照一定时间平滑地过渡，就必须要对它进行插值。</p><p>最基本的情况，我们认为这个变化是按照时间均匀进行的，这个时候，我们称其为线性插值。而实际上，线性插值不大能满足我们的需要，因此数学上出现了很多其它的插值算法，其中贝塞尔插值法是非常典型的一种。它根据一些变换中的控制点来决定值与时间的关系。</p><p>贝塞尔曲线是一种被工业生产验证了很多年的曲线，它最大的特点就是“平滑”。时间曲线平滑，意味着较少突兀的变化，这是一般动画设计所追求的。</p><p>贝塞尔曲线用于建筑设计和工业设计都有很多年历史了，它最初的应用是汽车工业用贝塞尔曲线来设计车型。</p><p>K次贝塞尔插值算法需要k+1个控制点，最简单的一次贝塞尔插值就是线性插值，将时间表示为0到1的区间，一次贝塞尔插值公式是：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/f8/d7e7c3bcc1e2b2ce72fde79956e872f8.png?wh=452*21\" alt=\"\"></p><p>“二次贝塞尔插值”有3个控制点，相当于对P0和P1，P1和P2分别做贝塞尔插值，再对结果做一次贝塞尔插值计算</p><p><img src=\"https://static001.geekbang.org/resource/image/14/84/14d6a5396b7c0cc696c52a9e06e45184.png?wh=422*23\" alt=\"\"></p><p>“三次贝塞尔插值”则是“两次‘二次贝塞尔插值’的结果，再做一次贝塞尔插值”：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/b2/65ff1dd9b8e5911f9dd089531acea2b2.png?wh=558*23\" alt=\"\"></p><p>贝塞尔曲线的定义中带有一个参数t，但是这个t并非真正的时间，实际上贝塞尔曲线的一个点(x, y)，这里的x轴才代表时间。</p><p>这就造成了一个问题，如果我们使用贝塞尔曲线的直接定义，是没办法直接根据时间来计算出数值的，因此，浏览器中一般都采用了数值算法，其中公认做有效的是牛顿积分，我们可以看下JavaScript版本的代码：</p><pre><code class=\"language-JavaScript\">function generate(p1x, p1y, p2x, p2y) {\n    const ZERO_LIMIT = 1e-6;\n    // Calculate the polynomial coefficients,\n    // implicit first and last control points are (0,0) and (1,1).\n    const ax = 3 * p1x - 3 * p2x + 1;\n    const bx = 3 * p2x - 6 * p1x;\n    const cx = 3 * p1x;\n\n    const ay = 3 * p1y - 3 * p2y + 1;\n    const by = 3 * p2y - 6 * p1y;\n    const cy = 3 * p1y;\n\n    function sampleCurveDerivativeX(t) {\n        // `ax t^3 + bx t^2 + cx t' expanded using Horner 's rule.\n        return (3 * ax * t + 2 * bx) * t + cx;\n    }\n\n    function sampleCurveX(t) {\n        return ((ax * t + bx) * t + cx ) * t;\n    }\n\n    function sampleCurveY(t) {\n        return ((ay * t + by) * t + cy ) * t;\n    }\n\n    // Given an x value, find a parametric value it came from.\n    function solveCurveX(x) {\n        var t2 = x;\n        var derivative;\n        var x2;\n\n        // https://trac.webkit.org/browser/trunk/Source/WebCore/platform/animation\n        // First try a few iterations of Newton's method -- normally very fast.\n        // http://en.wikipedia.org/wiki/Newton's_method\n        for (let i = 0; i &lt; 8; i++) {\n            // f(t)-x=0\n            x2 = sampleCurveX(t2) - x;\n            if (Math.abs(x2) &lt; ZERO_LIMIT) {\n                return t2;\n            }\n            derivative = sampleCurveDerivativeX(t2);\n            // == 0, failure\n            /* istanbul ignore if */\n            if (Math.abs(derivative) &lt; ZERO_LIMIT) {\n                break;\n            }\n            t2 -= x2 / derivative;\n        }\n\n        // Fall back to the bisection method for reliability.\n        // bisection\n        // http://en.wikipedia.org/wiki/Bisection_method\n        var t1 = 1;\n        /* istanbul ignore next */\n        var t0 = 0;\n\n        /* istanbul ignore next */\n        t2 = x;\n        /* istanbul ignore next */\n        while (t1 &gt; t0) {\n            x2 = sampleCurveX(t2) - x;\n            if (Math.abs(x2) &lt; ZERO_LIMIT) {\n                return t2;\n            }\n            if (x2 &gt; 0) {\n                t1 = t2;\n            } else {\n                t0 = t2;\n            }\n            t2 = (t1 + t0) / 2;\n        }\n\n        // Failure\n        return t2;\n    }\n\n    function solve(x) {\n        return sampleCurveY(solveCurveX(x));\n    }\n\n    return solve;\n}\n\n</code></pre><p>这段代码其实完全翻译自WebKit的C++代码，牛顿积分的具体原理请参考相关数学著作，注释中也有相关的链接。</p><p>这个JavaScript版本的三次贝塞尔曲线可以用于实现跟CSS一模一样的动画。</p><h2>贝塞尔曲线拟合</h2><p>理论上，贝塞尔曲线可以通过分段的方式拟合任意曲线，但是有一些特殊的曲线，是可以用贝塞尔曲线完美拟合的，比如抛物线。</p><p>这里我做了一个示例，用于模拟抛物线：</p><pre><code class=\"language-JavaScript\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width\"&gt;\n  &lt;title&gt;Simulation&lt;/title&gt;\n  &lt;style&gt;\n    .ball {\n      width:10px;\n      height:10px;\n      background-color:black;\n      border-radius:5px;\n      position:absolute;\n      left:0;\n      top:0;\n      transform:translateY(180px);\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;label&gt;运动时间：&lt;input value=\"3.6\" type=\"number\" id=\"t\" /&gt;s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;初速度：&lt;input value=\"-21\" type=\"number\" id=\"vy\" /&gt; px/s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;水平速度：&lt;input value=\"21\" type=\"number\" id=\"vx\" /&gt; px/s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;重力：&lt;input value=\"10\" type=\"number\" id=\"g\" /&gt; px/s²&lt;/label&gt;&lt;br/&gt;\n  &lt;button onclick=\"createBall()\"&gt;来一个球&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"language-JavaScript\">function generateCubicBezier (v, g, t){\n    var a = v / g;\n    var b = t + v / g;\n\n    return [[(a / 3 + (a + b) / 3 - a) / (b - a), (a * a / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)],\n        [(b / 3 + (a + b) / 3 - a) / (b - a), (b * b / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)]];\n}\n\nfunction createBall() {\n  var ball = document.createElement(\"div\");\n  var t = Number(document.getElementById(\"t\").value);\n  var vx = Number(document.getElementById(\"vx\").value);\n  var vy = Number(document.getElementById(\"vy\").value);\n  var g = Number(document.getElementById(\"g\").value);\n  ball.className = \"ball\";\n  document.body.appendChild(ball)\n  ball.style.transition = `left linear ${t}s, top cubic-bezier(${generateCubicBezier(vy, g, t)}) ${t}s`;\n  setTimeout(function(){ \n    ball.style.left = `${vx * t}px`; \n    ball.style.top = `${vy * t + 0.5 * g * t * t}px`; \n  }, 100);\n  setTimeout(function(){ document.body.removeChild(ball); }, t * 1000);\n}\n\n</code></pre><p>这段代码中，我实现了抛物线运动的小球，其中核心代码就是 generateCubicBezier 函数。</p><p>这个公式完全来自于一篇论文，推理过程我也不清楚，但是不论如何，它确实能够用于模拟抛物线。</p><p>实际上，我们日常工作中，如果需要用贝塞尔曲线拟合任何曲线，都可以找到相应的论文，我们只要取它的结论即可。</p><h2>总结</h2><p>我们今天的课程，重点介绍了动画和它背后的一些机制。</p><p>CSS用transition和animation两个属性来实现动画，这两个属性的基本用法很简单，我们今天还介绍了它们背后的原理：贝塞尔曲线。</p><p>我们中介绍了贝塞尔曲线的实现原理和贝塞尔曲线的拟合技巧。</p><p>最后，留给你一个小问题，请纯粹用JavaScript来实现一个transition函数，用它来跟CSS的transition来做一下对比，看看有哪些区别。</p><p></p>","comments":[{"had_liked":false,"id":87858,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1555734246,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"108929916646","product_id":100023201,"comment_content":"const tweenFns = {<br>  linear: (from, to, t, d) =&gt; from + (to - from) * (t &#47; d)<br>}<br><br>&#47;**<br> * only support &quot;linear&quot; timing-function<br> * duration unit is &quot;ms&quot;<br> * @param {HTMLElement} el<br> * @param {({prop: String, value: String, duration: Number})[]} list<br> *&#47;<br>function transitionTo(el, list) {<br>  let startTime<br>  let oldStyle = new Map()<br>  let newStyle = new Map()<br>  for (let prop of list) {<br>    oldStyle.set(prop.name, window.getComputedStyle(el)[prop.name])<br>  }<br>  for (let prop of list) {<br>    el.style[prop.name] = prop.value<br>  }<br>  for (let prop of list) {<br>    newStyle.set(prop.name, window.getComputedStyle(el)[prop.name])<br>  }<br>  for (let prop of list) {<br>    el.style[prop.name] = oldStyle.get(prop.name)<br>  }<br><br><br>  requestAnimationFrame(run)<br><br>  function run(time) {<br>    if (startTime == null) startTime = time<br>    let t = time - startTime<br>    let done = true<br>    for (let prop of list) {<br>      if (t &gt;= prop.duration) {<br>        el.style[prop.name] = newStyle.get(prop.name)<br>        continue<br>      }<br>      done = false<br>      let oldPropValue = oldStyle.get(prop.name)<br>      let newPropValue = newStyle.get(prop.name)<br>      if (prop.name === &#39;transform&#39;) {<br>        if (oldPropValue === &#39;none&#39;) oldPropValue = &#39;matrix(1, 0, 0, 1, 0, 0)&#39;<br>        if (newPropValue === &#39;none&#39;) newPropValue = &#39;matrix(1, 0, 0, 1, 0, 0)&#39;<br>      }<br>      el.style[prop.name] = generateNewStyle(oldPropValue, newPropValue, t, prop.duration, tweenFns.linear)<br>    }<br>    if (!done) requestAnimationFrame(run)<br>  }<br>}<br><br>function generateNewStyle(from, to, t, duration, tweenFn) {<br>  let fromExp = &#47;[\\d.-]+&#47;g<br>  let toExp = &#47;[\\d.-]+&#47;g<br>  let fromMatch<br>  let toMatch<br>  let result = &#39;&#39;<br>  let lastIndex = 0<br>  while (fromMatch = fromExp.exec(from)) {<br>    result += from.slice(lastIndex, fromMatch.index)<br>    toMatch = toExp.exec(to)<br>    result += tweenFn(+fromMatch[0], +toMatch[0], t, duration)<br>    lastIndex = fromExp.lastIndex<br>  }<br>  result += from.slice(lastIndex)<br>  return result<br>}","like_count":26,"discussions":[{"author":{"id":1385772,"avatar":"https://static001.geekbang.org/account/avatar/00/15/25/2c/8f61089f.jpg","nickname":"宗麒麟","note":"","ucode":"AC15E3AFAECE3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4268,"discussion_content":"阿成好厉害啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565264229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87859,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1555734526,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"87455080446","product_id":100023201,"comment_content":"跟CSS的transition比，JS更加偏向指令式，而CSS更加偏向声明式，当然，这本身也是两门语言自身的特点，CSS用法简单直观，JS则在控制方面有更大的灵活性。<br><br>上面我只实现了 linear timing function（其他的函数实现网上大把大把的...），具体用法如下：<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>  &lt;meta charset=&quot;UTF-8&quot;&gt;<br>  &lt;title&gt;Document&lt;&#47;title&gt;<br>  &lt;style&gt;<br>    #ball {<br>      width: 100px;<br>      height: 100px;<br>      background: blue;<br>    }<br>  &lt;&#47;style&gt;<br>&lt;&#47;head&gt;<br>&lt;body&gt;<br>  &lt;div id=&quot;ball&quot;&gt;&lt;&#47;div&gt;<br><br>  &lt;script src=&quot;transition.js&quot;&gt;&lt;&#47;script&gt;<br>  &lt;script&gt;<br>    transitionTo(document.getElementById(&#39;ball&#39;), [<br>      {name: &#39;transform&#39;, duration: 1000, value: &#39;translate(400px, 200px) rotate(40deg)&#39;},<br>      {name: &#39;backgroundColor&#39;, duration: 1000, value: &#39;red&#39;},<br>      {name: &#39;width&#39;, duration: 1000, value: &#39;200px&#39;},<br>      {name: &#39;height&#39;, duration: 1000, value: &#39;200px&#39;}<br>    ])<br>  &lt;&#47;script&gt;<br>&lt;&#47;body&gt;<br>&lt;&#47;html&gt;","like_count":21,"discussions":[{"author":{"id":1249969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/12/b1/3a112b27.jpg","nickname":"段帅帅","note":"","ucode":"2675BC0BE154E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564185,"discussion_content":"哪里都有你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650181160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440442,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3c/fa/b88b8b4e.jpg","nickname":"Hozan","note":"","ucode":"FADCE07AC849D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390743,"discussion_content":"每节都有你啊，阿成哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630023620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698735,"avatar":"https://static001.geekbang.org/account/avatar/00/19/eb/af/e49af9a8.jpg","nickname":"JC.彦","note":"","ucode":"E87C1420B140F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278968,"discussion_content":"猛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591264960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87841,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1555729251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27325533027","product_id":100023201,"comment_content":"这个课后练习有点难啊。希望老师可以带着大家过一遍。","like_count":7},{"had_liked":false,"id":239159,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1138706,"ip_address":"","ucode":"D955A98C48CBEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/12/268826e6.jpg","comment_is_top":false,"comment_ctime":1596449348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891416644","product_id":100023201,"comment_content":"&#47;&#47; 利用老师提供的贝塞尔曲线函数<br>    function timing_function(easing) {<br>        let resolve;<br>        if (easing === &#39;linear&#39;) resolve = generate(0, 0, 1, 1);<br>        else if (easing === &#39;ease&#39;) resolve = generate(0.25, 0.1, 0.25, 1);<br>        else if (easing === &#39;ease-in&#39;) resolve = generate(0.42, 0, 1, 1);<br>        else if (easing === &#39;ease-out&#39;) resolve = generate(0, 0, 0.58, 1);<br>        else if (easing === &#39;ease-in-out&#39;) resolve = generate(0.42, 0, 0.58, 1);<br>        else if (easing.indexOf(&#39;cubic-bezier&#39;) === 0) {<br>            let arr = easing.match(&#47;(?&lt;=\\()(.*)(?=\\))&#47;)[0].split(&quot;,&quot;);<br>            arr.map(item =&gt; { return Number(item); })<br>            resolve = generate(...arr);<br>        } else {<br>            resolve = generate(0, 0, 1, 1);<br>        }<br>        return resolve;<br>    }<br>    function transition(el,<br>                        target_value,<br>                        transition_property,<br>                        transition_duration,<br>                        transition_timing_function,<br>                        transition_delay) {<br><br>        let start = 0;<br>        let bezier = timing_function(transition_timing_function);<br>        let scale = 1 &#47; transition_duration;<br>        let targetArr = target_value.match(&#47;(\\d*)(.*)&#47;);<br>        console.log(targetArr);<br><br>        function step(timestamp) {<br>            if (!start) start = timestamp;<br>            let progress = timestamp - start;<br>            let y = bezier(scale * progress); &#47;&#47; y轴的比例<br>            el.style[transition_property] = (Number(targetArr[1]) * y) + targetArr[2];<br>            if (progress &lt;= transition_duration)requestAnimationFrame(step);<br>        }<br>        setTimeout(() =&gt; {<br>            requestAnimationFrame(step)<br>        }, transition_delay);<br>    }<br><br><br><br>    let ball = document.getElementsByClassName(&quot;ball&quot;)[0];<br>    transition(ball, &quot;50px&quot;, &quot;font-size&quot;, 2000, &quot;liner&quot;, 1000);","like_count":2},{"had_liked":false,"id":137000,"user_name":"剑客不能说","can_delete":false,"product_type":"c1","uid":1087433,"ip_address":"","ucode":"3B489FE628C81B","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/c9/08fde78b.jpg","comment_is_top":false,"comment_ctime":1569573230,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5864540526","product_id":100023201,"comment_content":"一脸懵逼状态看完的~","like_count":2,"discussions":[{"author":{"id":1343882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9d5EibbkjiawXAmibERCKiaQy6picXPM9picCI64yRkc0NlC573G0w2H9QESg1HJsMzvnNVGicr5rxe5Kg/132","nickname":"Geek_ae0f3f","note":"","ucode":"C5B370FA80DB2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113592,"discussion_content":"文章拙劣","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577924353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239162,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1138706,"ip_address":"","ucode":"D955A98C48CBEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/12/268826e6.jpg","comment_is_top":false,"comment_ctime":1596449792,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596449792","product_id":100023201,"comment_content":"不是非常严谨的实现，但是差不多了。可以设置各种属性和时间曲线。<br>只支持数值+单位的形式例如：left: 200px 或者 font-size: 20px;<br><br>https:&#47;&#47;github.com&#47;OleileiA&#47;TransitionJs&#47;blob&#47;master&#47;transition.html","like_count":0},{"had_liked":false,"id":225270,"user_name":"zlxag","can_delete":false,"product_type":"c1","uid":1163321,"ip_address":"","ucode":"136FB0201B64A3","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/39/16340f72.jpg","comment_is_top":false,"comment_ctime":1591700648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591700648","product_id":100023201,"comment_content":"交互没有？<br>","like_count":0}]}