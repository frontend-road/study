{"id":85001,"title":"05 | 一不小心就死锁了，怎么办？","content":"<p>在上一篇文章中，我们用Account.class作为互斥锁，来解决银行业务里面的转账问题，虽然这个方案不存在并发问题，但是所有账户的转账操作都是串行的，例如账户A 转账户B、账户C 转账户D这两个转账操作现实世界里是可以并行的，但是在这个方案里却被串行化了，这样的话，性能太差。</p><p>试想互联网支付盛行的当下，8亿网民每人每天一笔交易，每天就是8亿笔交易；每笔交易都对应着一次转账操作，8亿笔交易就是8亿次转账操作，也就是说平均到每秒就是近1万次转账操作，若所有的转账操作都串行，性能完全不能接受。</p><p>那下面我们就尝试着把性能提升一下。</p><h2>向现实世界要答案</h2><p>现实世界里，账户转账操作是支持并发的，而且绝对是真正的并行，银行所有的窗口都可以做转账操作。只要我们能仿照现实世界做转账操作，串行的问题就解决了。</p><p>我们试想在古代，没有信息化，账户的存在形式真的就是一个账本，而且每个账户都有一个账本，这些账本都统一存放在文件架上。银行柜员在给我们做转账时，要去文件架上把转出账本和转入账本都拿到手，然后做转账。这个柜员在拿账本的时候可能遇到以下三种情况：</p><ol>\n<li>文件架上恰好有转出账本和转入账本，那就同时拿走；</li>\n<li>如果文件架上只有转出账本和转入账本之一，那这个柜员就先把文件架上有的账本拿到手，同时等着其他柜员把另外一个账本送回来；</li>\n<li>转出账本和转入账本都没有，那这个柜员就等着两个账本都被送回来。</li>\n</ol><!-- [[[read_end]]] --><p>上面这个过程在编程的世界里怎么实现呢？其实用两把锁就实现了，转出账本一把，转入账本另一把。在transfer()方法内部，我们首先尝试锁定转出账户this（先把转出账本拿到手），然后尝试锁定转入账户target（再把转入账本拿到手），只有当两者都成功时，才执行转账操作。这个逻辑可以图形化为下图这个样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/55/cb18e672732ab76fc61d60bdf66bf855.png?wh=1142*640\" alt=\"\"></p><center><span class=\"reference\">两个转账操作并行示意图</span></center><p>而至于详细的代码实现，如下所示。经过这样的优化后，账户A 转账户B和账户C 转账户D这两个转账操作就可以并行了。</p><pre><code>class Account {\n  private int balance;\n  // 转账\n  void transfer(Account target, int amt){\n    // 锁定转出账户\n    synchronized(this) {              \n      // 锁定转入账户\n      synchronized(target) {           \n        if (this.balance &gt; amt) {\n          this.balance -= amt;\n          target.balance += amt;\n        }\n      }\n    }\n  } \n}\n</code></pre><h2>没有免费的午餐</h2><p>上面的实现看上去很完美，并且也算是将锁用得出神入化了。相对于用Account.class作为互斥锁，锁定的范围太大，而我们锁定两个账户范围就小多了，这样的锁，上一章我们介绍过，叫<strong>细粒度锁</strong>。<strong>使用细粒度锁可以提高并行度，是性能优化的一个重要手段</strong>。</p><p>这个时候可能你已经开始警觉了，使用细粒度锁这么简单，有这样的好事，是不是也要付出点什么代价啊？编写并发程序就需要这样时时刻刻保持谨慎。</p><p><strong>的确，使用细粒度锁是有代价的，这个代价就是可能会导致死锁。</strong></p><p>在详细介绍死锁之前，我们先看看现实世界里的一种特殊场景。如果有客户找柜员张三做个转账业务：账户A 转账户B 100元，此时另一个客户找柜员李四也做个转账业务：账户B 转账户A 100 元，于是张三和李四同时都去文件架上拿账本，这时候有可能凑巧张三拿到了账本A，李四拿到了账本B。张三拿到账本A后就等着账本B（账本B已经被李四拿走），而李四拿到账本B后就等着账本A（账本A已经被张三拿走），他们要等多久呢？他们会永远等待下去…因为张三不会把账本A送回去，李四也不会把账本B送回去。我们姑且称为死等吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/88/f293dc0d92b7c8255bd0bc790fc2a088.png?wh=1142*640\" alt=\"\"></p><center><span class=\"reference\">转账业务中的“死等”</span></center><p>现实世界里的死等，就是编程领域的死锁了。<strong>死锁</strong>的一个比较专业的定义是：<strong>一组互相竞争资源的线程因互相等待，导致“永久”阻塞的现象</strong>。</p><p>上面转账的代码是怎么发生死锁的呢？我们假设线程T1执行账户A转账户B的操作，账户A.transfer(账户B)；同时线程T2执行账户B转账户A的操作，账户B.transfer(账户A)。当T1和T2同时执行完①处的代码时，T1获得了账户A的锁（对于T1，this是账户A），而T2获得了账户B的锁（对于T2，this是账户B）。之后T1和T2在执行②处的代码时，T1试图获取账户B的锁时，发现账户B已经被锁定（被T2锁定），所以T1开始等待；T2则试图获取账户A的锁时，发现账户A已经被锁定（被T1锁定），所以T2也开始等待。于是T1和T2会无期限地等待下去，也就是我们所说的死锁了。</p><pre><code>class Account {\n  private int balance;\n  // 转账\n  void transfer(Account target, int amt){\n    // 锁定转出账户\n    synchronized(this){     ①\n      // 锁定转入账户\n      synchronized(target){ ②\n        if (this.balance &gt; amt) {\n          this.balance -= amt;\n          target.balance += amt;\n        }\n      }\n    }\n  } \n}\n</code></pre><p>关于这种现象，我们还可以借助资源分配图来可视化锁的占用情况（资源分配图是个有向图，它可以描述资源和线程的状态）。其中，资源用方形节点表示，线程用圆形节点表示；资源中的点指向线程的边表示线程已经获得该资源，线程指向资源的边则表示线程请求资源，但尚未得到。转账发生死锁时的资源分配图就如下图所示，一个“各据山头死等”的尴尬局面。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/1c/829d69c7d32c3ad1b89d89fc56017d1c.png?wh=1142*682\" alt=\"\"></p><center><span class=\"reference\">转账发生死锁时的资源分配图</span></center><h2>如何预防死锁</h2><p>并发程序一旦死锁，一般没有特别好的方法，很多时候我们只能重启应用。因此，解决死锁问题最好的办法还是规避死锁。</p><p>那如何避免死锁呢？要避免死锁就需要分析死锁发生的条件，有个叫Coffman的牛人早就总结过了，只有以下这四个条件都发生时才会出现死锁：</p><blockquote></blockquote><ol>\n<li>互斥，共享资源X和Y只能被一个线程占用；</li>\n<li>占有且等待，线程T1已经取得共享资源X，在等待共享资源Y的时候，不释放共享资源X；</li>\n<li>不可抢占，其他线程不能强行抢占线程T1占有的资源；</li>\n<li>循环等待，线程T1等待线程T2占有的资源，线程T2等待线程T1占有的资源，就是循环等待。</li>\n</ol><p>反过来分析，<strong>也就是说只要我们破坏其中一个，就可以成功避免死锁的发生</strong>。</p><p>其中，互斥这个条件我们没有办法破坏，因为我们用锁为的就是互斥。不过其他三个条件都是有办法破坏掉的，到底如何做呢？</p><ol>\n<li>对于“占用且等待”这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。</li>\n<li>对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。</li>\n<li>对于“循环等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不存在循环了。</li>\n</ol><p>我们已经从理论上解决了如何预防死锁，那具体如何体现在代码上呢？下面我们就来尝试用代码实践一下这些理论。</p><h3>1. 破坏占用且等待条件</h3><p>从理论上讲，要破坏这个条件，可以一次性申请所有资源。在现实世界里，就拿前面我们提到的转账操作来讲，它需要的资源有两个，一个是转出账户，另一个是转入账户，当这两个账户同时被申请时，我们该怎么解决这个问题呢？</p><p>可以增加一个账本管理员，然后只允许账本管理员从文件架上拿账本，也就是说柜员不能直接在文件架上拿账本，必须通过账本管理员才能拿到想要的账本。例如，张三同时申请账本A和B，账本管理员如果发现文件架上只有账本A，这个时候账本管理员是不会把账本A拿下来给张三的，只有账本A和B都在的时候才会给张三。这样就保证了“一次性申请所有资源”。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/db/273af8c2ee60bd659f18673d2af005db.png?wh=1142*640\" alt=\"\"></p><center><span class=\"reference\">通过账本管理员拿账本</span></center><p>对应到编程领域，“同时申请”这个操作是一个临界区，我们也需要一个角色（Java里面的类）来管理这个临界区，我们就把这个角色定为Allocator。它有两个重要功能，分别是：同时申请资源apply()和同时释放资源free()。账户Account 类里面持有一个Allocator的单例（必须是单例，只能由一个人来分配资源）。当账户Account在执行转账操作的时候，首先向Allocator同时申请转出账户和转入账户这两个资源，成功后再锁定这两个资源；当转账操作执行完，释放锁之后，我们需通知Allocator同时释放转出账户和转入账户这两个资源。具体的代码实现如下。</p><pre><code>class Allocator {\n  private List&lt;Object&gt; als =\n    new ArrayList&lt;&gt;();\n  // 一次性申请所有资源\n  synchronized boolean apply(\n    Object from, Object to){\n    if(als.contains(from) ||\n         als.contains(to)){\n      return false;  \n    } else {\n      als.add(from);\n      als.add(to);  \n    }\n    return true;\n  }\n  // 归还资源\n  synchronized void free(\n    Object from, Object to){\n    als.remove(from);\n    als.remove(to);\n  }\n}\n\nclass Account {\n  // actr应该为单例\n  private Allocator actr;\n  private int balance;\n  // 转账\n  void transfer(Account target, int amt){\n    // 一次性申请转出账户和转入账户，直到成功\n    while(!actr.apply(this, target))\n      ；\n    try{\n      // 锁定转出账户\n      synchronized(this){              \n        // 锁定转入账户\n        synchronized(target){           \n          if (this.balance &gt; amt){\n            this.balance -= amt;\n            target.balance += amt;\n          }\n        }\n      }\n    } finally {\n      actr.free(this, target)\n    }\n  } \n}\n</code></pre><h3>2. 破坏不可抢占条件</h3><p>破坏不可抢占条件看上去很简单，核心是要能够主动释放它占有的资源，这一点synchronized是做不到的。原因是synchronized申请资源的时候，如果申请不到，线程直接进入阻塞状态了，而线程进入阻塞状态，啥都干不了，也释放不了线程已经占有的资源。</p><p>你可能会质疑，“Java作为排行榜第一的语言，这都解决不了？”你的怀疑很有道理，Java在语言层次确实没有解决这个问题，不过在SDK层面还是解决了的，java.util.concurrent这个包下面提供的Lock是可以轻松解决这个问题的。关于这个话题，咱们后面会详细讲。</p><h3>3. 破坏循环等待条件</h3><p>破坏这个条件，需要对资源进行排序，然后按序申请资源。这个实现非常简单，我们假设每个账户都有不同的属性 id，这个 id 可以作为排序字段，申请的时候，我们可以按照从小到大的顺序来申请。比如下面代码中，①~⑥处的代码对转出账户（this）和转入账户（target）排序，然后按照序号从小到大的顺序锁定账户。这样就不存在“循环”等待了。</p><pre><code>class Account {\n  private int id;\n  private int balance;\n  // 转账\n  void transfer(Account target, int amt){\n    Account left = this        ①\n    Account right = target;    ②\n    if (this.id &gt; target.id) { ③\n      left = target;           ④\n      right = this;            ⑤\n    }                          ⑥\n    // 锁定序号小的账户\n    synchronized(left){\n      // 锁定序号大的账户\n      synchronized(right){ \n        if (this.balance &gt; amt){\n          this.balance -= amt;\n          target.balance += amt;\n        }\n      }\n    }\n  } \n}\n</code></pre><h2>总结</h2><p>当我们在编程世界里遇到问题时，应不局限于当下，可以换个思路，向现实世界要答案，<strong>利用现实世界的模型来构思解决方案</strong>，这样往往能够让我们的方案更容易理解，也更能够看清楚问题的本质。</p><p>但是现实世界的模型有些细节往往会被我们忽视。因为在现实世界里，人太智能了，以致有些细节实在是显得太不重要了。在转账的模型中，我们为什么会忽视死锁问题呢？原因主要是在现实世界，我们会交流，并且会很智能地交流。而编程世界里，两个线程是不会智能地交流的。所以在利用现实模型建模的时候，我们还要仔细对比现实世界和编程世界里的各角色之间的差异。</p><p>我们今天这一篇文章主要讲了<strong>用细粒度锁来锁定多个资源时，要注意死锁的问题</strong>。这个就需要你能把它强化为一个思维定势，遇到这种场景，马上想到可能存在死锁问题。当你知道风险之后，才有机会谈如何预防和避免，因此，<strong>识别出风险很重要</strong>。</p><p>预防死锁主要是破坏三个条件中的一个，有了这个思路后，实现就简单了。但仍需注意的是，有时候预防死锁成本也是很高的。例如上面转账那个例子，我们破坏占用且等待条件的成本就比破坏循环等待条件的成本高，破坏占用且等待条件，我们也是锁了所有的账户，而且还是用了死循环 <code>while(!actr.apply(this, target));</code>方法，不过好在apply()这个方法基本不耗时。 在转账这个例子中，破坏循环等待条件就是成本最低的一个方案。</p><p>所以我们在选择具体方案的时候，还需要<strong>评估一下操作成本，从中选择一个成本最低的方案</strong>。</p><h2>课后思考</h2><p>我们上面提到：破坏占用且等待条件，我们也是锁了所有的账户，而且还是用了死循环 <code>while(!actr.apply(this, target));</code>这个方法，那它比synchronized(Account.class)有没有性能优势呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":74019,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1552065517,"is_pvip":false,"replies":[{"id":"27037","content":"还真是这样啊！<br>","user_name":"作者回复","comment_id":74019,"uid":"1269969","ip_address":"","utype":1,"ctime":1552091804,"user_name_real":"王宝令"}],"discussion_count":16,"race_medal":0,"score":"607142454253","product_id":100023901,"comment_content":"synchronized(Account.class) 锁了Account类相关的所有操作。相当于文中说的包场了，只要与Account有关联，通通需要等待当前线程操作完成。while死循环的方式只锁定了当前操作的两个相关的对象。两种影响到的范围不同。","like_count":141,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442389,"discussion_content":"还真是这样啊！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552091804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141682,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/b2/05c4c057.jpg","nickname":"Solarex","note":"","ucode":"1C866A79956896","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223,"discussion_content":"while死循环锁的是Allocator的单例对象实例，synchronized锁的是Account.class，锁的粒度感觉在同一JVM上差不多啊？","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1561306441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1018809,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/b9/abb7bfe3.jpg","nickname":"孙清醒","note":"","ucode":"28FF7A3BD8221F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1141682,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/b2/05c4c057.jpg","nickname":"Solarex","note":"","ucode":"1C866A79956896","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133877,"discussion_content":"但是只是在转账的时候才去获得Allocator对象锁，其他操作没有去获取Allocator对象锁。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1578997930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":223,"ip_address":""},"score":133877,"extra":""},{"author":{"id":1043789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","nickname":"magict4","note":"","ucode":"CB6F063D881AAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018809,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/b9/abb7bfe3.jpg","nickname":"孙清醒","note":"","ucode":"28FF7A3BD8221F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542460,"discussion_content":"其他操作没有去获取Allocator对象锁 -&gt; 这样会不会更加危险？其他操作，例如取款，如果没有通过 Allocator 获取锁，会不会与转账操作产生线程安全的问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640756592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":133877,"ip_address":""},"score":542460,"extra":""}]},{"author":{"id":1702117,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","nickname":"山海","note":"","ucode":"77FA9967E58FA3","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348503,"discussion_content":"我觉得Allocator这个对象是全局的，在执行这个apply时还是全局串行，只是这里的逻辑都在内存中进行，比较快。 但是Account这个操作在真正都业务逻辑中可能涉及到数据库操作，时间就比较长了。所以他们只是持有锁时间缩短了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1612604759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1786788,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJINWmZjibZA4eibL31PzMDia2yt1icOc9QnFWwTKuXbWTFCAZaMgCrqO7Oa5sZka81pHoibPgSM8nCjibA/132","nickname":"超能力先生","note":"","ucode":"C042DB628CAA86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107721,"discussion_content":"但是allocator只有一个，所以所有账号还是被锁定了啊","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1577602264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1756562,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/cd/92/f75a00dd.jpg","nickname":"、落叶为你舞","note":"","ucode":"A196460774A33F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1786788,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJINWmZjibZA4eibL31PzMDia2yt1icOc9QnFWwTKuXbWTFCAZaMgCrqO7Oa5sZka81pHoibPgSM8nCjibA/132","nickname":"超能力先生","note":"","ucode":"C042DB628CAA86","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228521,"discussion_content":"A向B转账，C向D转账，synchronized(Account.class)这两个操作只能串行，Allocator 拿锁时是串行，但是转账过程是可以并行的","likes_number":24,"is_delete":false,"is_hidden":false,"ctime":1586541010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":107721,"ip_address":""},"score":228521,"extra":""},{"author":{"id":1987202,"avatar":"","nickname":"Geek_783cc7","note":"","ucode":"C43F76B1978FA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1756562,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/cd/92/f75a00dd.jpg","nickname":"、落叶为你舞","note":"","ucode":"A196460774A33F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322337,"discussion_content":"明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604726315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228521,"ip_address":""},"score":322337,"extra":""}]},{"author":{"id":1032755,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c2/33/ccbf2045.jpg","nickname":"sta","note":"","ucode":"D840070850EA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351998,"discussion_content":"有性能优势，两个都是全局锁。一个是在while循环时，即获取资源时，是全局的串行执行；一个是在执行转账操作的时候串行执行。一般来说，获取资源操作比转账执行操作耗时会更短，所以单个串行执行的时间会更短，总的串行效率就会更高。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1614562365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2192295,"avatar":"https://static001.geekbang.org/account/avatar/00/21/73/a7/c8ea0a62.jpg","nickname":"北京小妞","note":"","ucode":"5A327F761E2DFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337331,"discussion_content":"不对，死循环的代码中要获取Allocator单例图锁，这个单例是全局相关的，因此这种方式和获取Account类对象的锁基本没区别","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608876759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2139604,"avatar":"","nickname":"成电帅才","note":"","ucode":"DDE757138F41D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2192295,"avatar":"https://static001.geekbang.org/account/avatar/00/21/73/a7/c8ea0a62.jpg","nickname":"北京小妞","note":"","ucode":"5A327F761E2DFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347540,"discussion_content":"想了一下，还是有区别的，Account和单例虽然都是全局的，但是Account阻塞在业务上，单例阻塞在标记上（是否成功加锁的标记），如果业务代码执行时间长的话，account的性能很低，但是单例的这种阻塞很短","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612252463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337331,"ip_address":""},"score":347540,"extra":""},{"author":{"id":1433737,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e0/89/c3db1efc.jpg","nickname":"青梅煮马","note":"","ucode":"529AEBCF25E828","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2139604,"avatar":"","nickname":"成电帅才","note":"","ucode":"DDE757138F41D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534152,"discussion_content":"想到一个不恰当的例子。\n假如说因为疫情，动物园只能窗口购票，并且只开放一个窗口，大家都排队。这就是class 的锁。后来因为太慢，就单独设置了一个看健康码的小姐姐，二维码通过后开放十个窗口。虽然也要排队，但是速度可能就会快很多。当然要是这个小姐姐沉迷聊天无法自拔，可能还不如一个窗口快。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638109574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347540,"ip_address":""},"score":534152,"extra":""}]},{"author":{"id":1619082,"avatar":"","nickname":"Geek_b77477","note":"","ucode":"9B27C9F12122CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3628,"discussion_content":"我也感觉两者粒度差不多","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1564647530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292176,"discussion_content":"本质是锁的范围不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595130339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1175383,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/57/935c0ea1.jpg","nickname":"0+1","note":"","ucode":"03E5A11F8A3D37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283559,"discussion_content":"在并发比较小的时候while这种自旋方式可能效率高点，并发大了就没sync效率高了，都在那while了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592296911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1174199,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/b7/1a18a39d.jpg","nickname":"5-刘新波(Arvin)","note":"","ucode":"DBD135D2587A93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4173,"discussion_content":"精辟！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565184627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74091,"user_name":"Tony Du","can_delete":false,"product_type":"c1","uid":1001661,"ip_address":"","ucode":"F5FCC400E615EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/bd/6c7d4230.jpg","comment_is_top":false,"comment_ctime":1552102058,"is_pvip":false,"replies":[{"id":"27086","content":"你考虑的很周到！👍<br>加超时在实际项目中非常重要！","user_name":"作者回复","comment_id":74091,"uid":"1269969","ip_address":"","utype":1,"ctime":1552111203,"user_name_real":"王宝令"}],"discussion_count":5,"race_medal":0,"score":"469703537322","product_id":100023901,"comment_content":"while循环是不是应该有个timeout，避免一直阻塞下去？","like_count":109,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442437,"discussion_content":"你考虑的很周到！👍\n加超时在实际项目中非常重要！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552111203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38575,"discussion_content":"我觉得这个 while 有种 CAS 的设计理念，失败重试","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571805388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2280894,"avatar":"","nickname":"Geek_781cba","note":"","ucode":"E419728928D36E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336210,"discussion_content":"这不就是传说中的自旋锁了吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608530485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38573,"discussion_content":"不会一直阻塞吧，阶段性阻。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571805335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2455382,"avatar":"https://static001.geekbang.org/account/avatar/00/25/77/56/dd035ec9.jpg","nickname":"追逐太阳的猪哼哼","note":"","ucode":"9E77CB1D8CC4B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355737,"discussion_content":"只是各自的线程阻塞了，单例那里并不会，拿不到就出去临界区，继续下一轮抢锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615472527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38573,"ip_address":""},"score":355737,"extra":""}]}]},{"had_liked":false,"id":75402,"user_name":"张立华","can_delete":false,"product_type":"c1","uid":1231713,"ip_address":"","ucode":"173B938DD9478A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/61/b62d8a3b.jpg","comment_is_top":false,"comment_ctime":1552391672,"is_pvip":false,"replies":[{"id":"27468","content":"这个方案最简单<br>","user_name":"作者回复","comment_id":75402,"uid":"1269969","ip_address":"","utype":1,"ctime":1552393718,"user_name_real":"王宝令"}],"discussion_count":6,"race_medal":0,"score":"396689382904","product_id":100023901,"comment_content":"之前遇到死锁，我就是用资源id的从小到大的顺序去申请锁解决的","like_count":92,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442883,"discussion_content":"这个方案最简单\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552393718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494622,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ce/5e/b103d538.jpg","nickname":"大明猩","note":"","ucode":"61D330B42AE3C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393813,"discussion_content":"看头像就是高手","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631609483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1174199,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/b7/1a18a39d.jpg","nickname":"5-刘新波(Arvin)","note":"","ucode":"DBD135D2587A93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4174,"discussion_content":"谁牌大，谁先走","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565184876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1393856,"avatar":"https://static001.geekbang.org/account/avatar/00/15/44/c0/a39672a3.jpg","nickname":"王者之钻","note":"","ucode":"D877B496829D1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590882,"discussion_content":"怎么用资源大小id申请锁，求解答，最好上代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666149333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3071431,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/dd/c7/9523b3dc.jpg","nickname":"月影","note":"","ucode":"39D5315F2365A8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587842,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663317595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280198,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591513517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74104,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1552104484,"is_pvip":false,"replies":[{"id":"27075","content":"你发现了个大bug!感谢感谢！！！我这就修改一下啊<br>","user_name":"作者回复","comment_id":74104,"uid":"1269969","ip_address":"","utype":1,"ctime":1552107501,"user_name_real":"王宝令"}],"discussion_count":4,"race_medal":1,"score":"323674651684","product_id":100023901,"comment_content":"while(actr.apply(this, target)); --&gt; while(!actr.apply(this, target));<br>我感觉应该是这样，老师，我理解错了？","like_count":75,"discussions":[{"author":{"id":1018706,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/52/6659dc1b.jpg","nickname":"黑米","note":"","ucode":"E7DBEA7867862A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391107,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630296754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2583432,"avatar":"https://static001.geekbang.org/account/avatar/00/27/6b/88/6315d04c.jpg","nickname":"Geek_Black","note":"","ucode":"8CFB324D281FC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387788,"discussion_content":"为什么是非啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628414694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1758825,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d6/69/f59d4f6f.jpg","nickname":"Ryan","note":"","ucode":"387955FD53E98C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2583432,"avatar":"https://static001.geekbang.org/account/avatar/00/27/6b/88/6315d04c.jpg","nickname":"Geek_Black","note":"","ucode":"8CFB324D281FC5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412998,"discussion_content":"未获取到资源就一直转，获取到了才能往下走","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636355837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387788,"ip_address":""},"score":412998,"extra":""}]},{"author":{"id":1702511,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUVVjoibAO1cWoM0VcOcbibT0O9bbOvgjJmn6fWyKRNWgrZsOuj7mSMSubFXknOxRP3ozoicdwp1zibw/132","nickname":"衡山弟子","note":"","ucode":"5C635588688A88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216694,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585477871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74265,"user_name":"几字凉了秋丶","can_delete":false,"product_type":"c1","uid":1178503,"ip_address":"","ucode":"B1B7A3726AD4E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/87/9c2dc94f.jpg","comment_is_top":false,"comment_ctime":1552149266,"is_pvip":false,"replies":[{"id":"27165","content":"实际开发中都是用数据库事务+乐观锁的方式解决的。这个就是个例子，为了说明死锁是怎么回事，以及死锁问题怎么解决。","user_name":"作者回复","comment_id":74265,"uid":"1269969","ip_address":"","utype":1,"ctime":1552189724,"user_name_real":"王宝令"}],"discussion_count":4,"race_medal":0,"score":"254955219730","product_id":100023901,"comment_content":"老师，请问一下，在实际的开发中，account对象应该是从数据库中查询出来的吧，假如A转B，C转B一起执行，那B的account对象如何保证是同一个对象，不太理解。。。","like_count":59,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442501,"discussion_content":"实际开发中都是用数据库事务+乐观锁的方式解决的。这个就是个例子，为了说明死锁是怎么回事，以及死锁问题怎么解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552189724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039544,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/b8/31c7e110.jpg","nickname":"LVM_23","note":"","ucode":"5E54F9DB582E9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394309,"discussion_content":"我也是想到这个，用this 怎么保证是同一个对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631839048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1462645,"avatar":"https://static001.geekbang.org/account/avatar/00/16/51/75/6997e91a.jpg","nickname":"Sean 🍓","note":"","ucode":"652F4C2A8D93A1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1039544,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/b8/31c7e110.jpg","nickname":"LVM_23","note":"","ucode":"5E54F9DB582E9F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572242,"discussion_content":"这个只是个例子，实际场景可以用账户id或者编号这样的作为分布式锁使用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652671876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":394309,"ip_address":""},"score":572242,"extra":""}]},{"author":{"id":2280894,"avatar":"","nickname":"Geek_781cba","note":"","ucode":"E419728928D36E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336214,"discussion_content":"你这种在业务层的话，可以用分布式锁了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608530641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76114,"user_name":"别皱眉","can_delete":false,"product_type":"c1","uid":1177354,"ip_address":"","ucode":"D24F65EFF65586","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/0a/067537fc.jpg","comment_is_top":false,"comment_ctime":1552532439,"is_pvip":false,"replies":[{"id":"27737","content":"你说到我心里了😃😃😃<br>","user_name":"作者回复","comment_id":76114,"uid":"1269969","ip_address":"","utype":1,"ctime":1552537403,"user_name_real":"王宝令"}],"discussion_count":15,"race_medal":0,"score":"194826060759","product_id":100023901,"comment_content":"@阿官 我来回答下你的问题<br><br>以下是阿官的问题<br>-------------------------------------------------------<br>老师，在破坏占用且等待的案例中，为何申请完两个账户的资源后还需要再分别锁定this和target账户呢？<br>-------------------------------------------------------<br>因为还存在其他业务啊 比如客户取款<br>这个时候也是对全局变量balance做操作<br>如果不加锁 并发情况下会出问题<br><br>老师你看我说的对吗😄😄","like_count":45,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443183,"discussion_content":"你说到我心里了😃😃😃\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552537403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","nickname":"吕","note":"","ucode":"8F08E2CB81C4C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202447,"discussion_content":"看到评论才明白，怪不得之间我觉得有了Allocator后，应该就不需要后边的两把锁了，原来是为了防止其他的业务功能","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583918747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2343086,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","nickname":"徐志超-Klaus","note":"","ucode":"CF26B39965F2A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389332,"discussion_content":"管理员对象也可以写一个重载方法只获取一把锁的方法，其他业务就去判断集合里是否有某一把锁不就行了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629223161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585829,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/a5/9868cd56.jpg","nickname":"southday","note":"","ucode":"4A8FB63D35F6E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2054,"discussion_content":"那这么说来，结合其他业务，还是可能存在死锁咯","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563206379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1250262,"avatar":"https://static001.geekbang.org/account/avatar/00/13/13/d6/0cf21fe8.jpg","nickname":"Skylar","note":"","ucode":"9E8D1697BEE884","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1585829,"avatar":"https://static001.geekbang.org/account/avatar/00/18/32/a5/9868cd56.jpg","nickname":"southday","note":"","ucode":"4A8FB63D35F6E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6328,"discussion_content":"不会啊，因为有统一的管理员Allocator分配账户","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566833455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2054,"ip_address":""},"score":6328,"extra":""}]},{"author":{"id":2753834,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/05/2a/cfbcb0b2.jpg","nickname":"Donkey","note":"","ucode":"3DB4DFF6D99035","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403982,"discussion_content":"获取两个账本后，不加锁就会被别人抢走了。必须转账完成，才能释放账本，所以加锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634204074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2313724,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/drctCc7ys2K91CKqc1OgBeAJWgx0wvGvtlgCo8gmtobmVicu1W9Z89RCqaHW86emMRt17Cr1RHaQvnR7QqUUPfg/132","nickname":"Geek_edc76d","note":"","ucode":"E6B9E1930C3AAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374707,"discussion_content":"如果不考虑其他业务的话,这里把这两把锁去掉,然后用volatile修饰balance变量更好.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621321840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2343086,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","nickname":"徐志超-Klaus","note":"","ucode":"CF26B39965F2A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2313724,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/drctCc7ys2K91CKqc1OgBeAJWgx0wvGvtlgCo8gmtobmVicu1W9Z89RCqaHW86emMRt17Cr1RHaQvnR7QqUUPfg/132","nickname":"Geek_edc76d","note":"","ucode":"E6B9E1930C3AAD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389331,"discussion_content":"为何要加volatile ？happensbefore互斥锁那条和第一条加第三条不能保证可见性吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629222936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374707,"ip_address":""},"score":389331,"extra":""},{"author":{"id":2753834,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/05/2a/cfbcb0b2.jpg","nickname":"Donkey","note":"","ucode":"3DB4DFF6D99035","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2313724,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/drctCc7ys2K91CKqc1OgBeAJWgx0wvGvtlgCo8gmtobmVicu1W9Z89RCqaHW86emMRt17Cr1RHaQvnR7QqUUPfg/132","nickname":"Geek_edc76d","note":"","ucode":"E6B9E1930C3AAD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403983,"discussion_content":"不保证原子性是不行滴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634204238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374707,"ip_address":""},"score":403983,"extra":""}]},{"author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295017,"discussion_content":"其他业务操作不是也已经加锁，还是没理解第二次加锁的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295016,"discussion_content":"其他业务操作不是也已经加锁，还是没理解第二次加锁的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295015,"discussion_content":"其他业务操作不是也已经加锁，还是没理解第二次加锁的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1133545,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQyCFqdkJB97EXF7VVO1n0nRZUmxfWwDicJMmupDdDia7VnPkLSJicFyEe28eUtZamH9uprtBJ4Ojjw/132","nickname":"qhj","note":"","ucode":"A9A9370BB2EE0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304106,"discussion_content":"其他操作并没有同时申请两个资源，所以没有加锁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599469799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295015,"ip_address":""},"score":304106,"extra":""}]},{"author":{"id":1818343,"avatar":"","nickname":"刘同青","note":"","ucode":"84B62DF8BC61FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280204,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591513690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","nickname":"Monday","note":"","ucode":"77B9BACC783598","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":137257,"discussion_content":"也就是说如果只有例子中这一个转账业务，那后面的锁就没有必要了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579183053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77013,"user_name":"李可威","can_delete":false,"product_type":"c1","uid":1440757,"ip_address":"","ucode":"7BB0B44076A4F4","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/f5/6521cb02.jpg","comment_is_top":false,"comment_ctime":1552804867,"is_pvip":false,"replies":[{"id":"28093","content":"循环等待，一定是A-&gt;B-&gt;C-&gt;...-&gt;N-&gt;A形成环状。<br>如果按需申请，是不允许N-&gt;A出现的，只能N-&gt;P。没有环状，也就不会死锁了。","user_name":"作者回复","comment_id":77013,"uid":"1269969","ip_address":"","utype":1,"ctime":1552814102,"user_name_real":"王宝令"}],"discussion_count":7,"race_medal":0,"score":"151876660227","product_id":100023901,"comment_content":"老师为什么按序申请资源就可以破坏循环等待条件呢？这点没有看懂求解答","like_count":35,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443541,"discussion_content":"循环等待，一定是A-&amp;gt;B-&amp;gt;C-&amp;gt;...-&amp;gt;N-&amp;gt;A形成环状。\n如果按需申请，是不允许N-&amp;gt;A出现的，只能N-&amp;gt;P。没有环状，也就不会死锁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552814102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078849,"avatar":"https://static001.geekbang.org/account/avatar/00/10/76/41/7ff49c40.jpg","nickname":"E^cho","note":"","ucode":"23DE4B7AD6C23C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372339,"discussion_content":"循环等待你可以理解为一个密室进去需要开两扇门，两扇门分别有两把钥匙，小 A拿了钥匙1等小B把钥匙2给自己用，小B拿了钥匙2等小A把钥匙1给自己用，小A说我要两扇门都开了才能把钥匙让出来，小B说我也是，他们互相等就导致死锁了。假如拿钥匙有顺序，都必须先拿钥匙1然后才能拿钥匙2的话，就不会发生两个线程互相占用对方需要的锁，就不会死锁","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1620289182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1184678,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDgV2qia6eAL7Fb4egX3odViclRRwOlkfCBrjhU9lLeib90KGkIDjdddSibNVs47N90L36Brgnr6ppiag/132","nickname":"ddww","note":"","ucode":"2871112FC9B3F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383133,"discussion_content":"按序申请资源，不就是，上帝定义了1,2,3三个顺序的task。一个人按顺序把task完成后，下一个人才可以接着完成task。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625921613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1333094,"avatar":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","nickname":"liliumss","note":"","ucode":"A52AC5042F3115","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200831,"discussion_content":"线性单向加锁","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1583727899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38544,"discussion_content":"就是说永远是按照  0 1 2 3... 的顺序申请，不会出现一个申请了 0， 另一个直接申请了 1 导致循环。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571801046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLniccwC1Mootc7IQsRGUTX3ZkkCKPc7lYV0g8CAqscWtAjd8xkHYcY3UFbYvicm42FXuAO5bZP6WQ/132","nickname":"Geek_417e74","note":"","ucode":"BEA8915879274D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553984,"discussion_content":"按序申请：都是小的等大的，不会出现大的等小的，就没有循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646154915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379455,"discussion_content":"必须先拿到1锁，才能拿到2锁，不允许直接拿2锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623913637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89767,"user_name":"Bright丶","can_delete":false,"product_type":"c1","uid":1138016,"ip_address":"","ucode":"B1DEA8C8100538","user_header":"https://static001.geekbang.org/account/avatar/00/11/5d/60/38ea52c5.jpg","comment_is_top":false,"comment_ctime":1556259240,"is_pvip":false,"replies":[{"id":"32181","content":"实际工作中也有这么做的，只不过是把转入操作放到mq里面，mq消费失败会重试，所以能保证最终一致性。","user_name":"作者回复","comment_id":89767,"uid":"1269969","ip_address":"","utype":1,"ctime":1556280682,"user_name_real":"王宝令"}],"discussion_count":20,"race_medal":0,"score":"130405278120","product_id":100023901,"comment_content":"老师，感觉下面的代码也能避免死锁，并且能实现功能：<br>void transfer(Account target, int amt){<br>    boolean isTransfer  = false;<br>&#47;&#47; 锁定转出账户<br>    synchronized(this){<br>          if (this.balance &gt; amt) {<br>          this.balance -= amt;<br>          isTransfer = true;<br>    }   <br>    if (!isTransfer) {<br>         return;<br>    }<br>      &#47;&#47; 锁定转入账户<br>      synchronized(target){ <br>          target.balance += amt;<br>      }<br>  }<br><br>反映到现实中的场景：服务员A拿到账本1先判断余额够不够，够的话先扣款，再等待其他人操作完账本2，才增加它的额度。<br><br>但是这样转账和到账就存在一个时差，现实生活中也是这样，转账不会立马到账，短信提醒24小时内到账，所谓的最终一致性。 <br><br>老师帮忙看看这样实现会不会有啥其他问题？","like_count":30,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448254,"discussion_content":"实际工作中也有这么做的，只不过是把转入操作放到mq里面，mq消费失败会重试，所以能保证最终一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556280682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289306,"discussion_content":"对于“占有且等待这个条件”，实际就是【逐一】的占有【全部】资源。\n\n因此可以通过避免【逐一】，即一次性占有，来破坏这个条件，实际就是对所有相关的共享资源加同一把锁。\n还可以通过避免【全部】，就破坏了占有且等待，实际就是对资源单独处理，处理以后立刻释放","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594048828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289304,"discussion_content":"楼主这个方案也是破坏占有且等待的方法，每个资源都是单独占有单独处理单独释放，而不是试图逐一的获取全部资源","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594048314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1960096,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e8/a0/14de6984.jpg","nickname":"Eric W.Liu","note":"","ucode":"8B394A3C1448BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230762,"discussion_content":"如果在锁定账户的操作中有条件判断，不满足某些条件会失败，会导致，A扣了钱但是B未到账的情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586770001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1138016,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5d/60/38ea52c5.jpg","nickname":"Bright丶","note":"","ucode":"B1DEA8C8100538","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1960096,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e8/a0/14de6984.jpg","nickname":"Eric W.Liu","note":"","ucode":"8B394A3C1448BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251174,"discussion_content":"会通过其他方式保证最终一致性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588071602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":230762,"ip_address":""},"score":251174,"extra":""}]},{"author":{"id":2568744,"avatar":"https://static001.geekbang.org/account/avatar/00/27/32/28/078ec46c.jpg","nickname":"top啦它","note":"","ucode":"1F2656293D1B9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554834,"discussion_content":"哥，如果在a给b转账的同时，b也给a转账。应该会产生死锁吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646639979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1075913,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6a/c9/ba39a8a4.jpg","nickname":"Kon","note":"","ucode":"F9E0EB1B244A6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2568744,"avatar":"https://static001.geekbang.org/account/avatar/00/27/32/28/078ec46c.jpg","nickname":"top啦它","note":"","ucode":"1F2656293D1B9F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575710,"discussion_content":"是分别sync 加的锁，不会出现这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655045418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":554834,"ip_address":""},"score":575710,"extra":""}]},{"author":{"id":1433737,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e0/89/c3db1efc.jpg","nickname":"青梅煮马","note":"","ucode":"529AEBCF25E828","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534161,"discussion_content":"这样target 就别放在入参了，避免跑了一半target 变了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638110560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018706,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/52/6659dc1b.jpg","nickname":"黑米","note":"","ucode":"E7DBEA7867862A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391115,"discussion_content":"你这个原始的代码synchronized(this)里的if是不是漏了个括号？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630299493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1089385,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9f/69/bb533bad.jpg","nickname":"lee","note":"","ucode":"47E318CD6A0471","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369112,"discussion_content":"分布式事务使用柔性事务也就是最终一致性的解决方案，有个条件哦，就是被动者不允许存在业务异常，这个转账场景明显不行啊，账号余额不足这种业务异常是不允许最终一致性的，只能用tcc刚性事务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618930376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1687656,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/68/314e8306.jpg","nickname":"威先森","note":"","ucode":"5F445C6832274B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352785,"discussion_content":"这个并不能保证最后转账能成功，target肯定是从库查询出来的，在你最后target余额更新入库这个时间差中，可能target的余额又发生变化了，还是需要其他措施保证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614849362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2410092,"avatar":"https://static001.geekbang.org/account/avatar/00/24/c6/6c/a400175a.jpg","nickname":"FARO_Z","note":"","ucode":"B33BCC36C2A74E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1687656,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/68/314e8306.jpg","nickname":"威先森","note":"","ucode":"5F445C6832274B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539105,"discussion_content":"感觉没有问题诶，target 余额发生变化，也是和其他账户进行了转账操作，但是只要最终所有转账操作都结束，target 自身的余额是正确值就行了（也就是楼主提到的最终一致性）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639610815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352785,"ip_address":""},"score":539105,"extra":""}]},{"author":{"id":1702117,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","nickname":"山海","note":"","ucode":"77FA9967E58FA3","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348508,"discussion_content":"    if (!isTransfer) {\n         return;\n    }\n这个没太理解，在上面代码执行完之后， isTransfer肯定就是等于true了。 这里设置的意义在哪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612605135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1687656,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/68/314e8306.jpg","nickname":"威先森","note":"","ucode":"5F445C6832274B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1702117,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","nickname":"山海","note":"","ucode":"77FA9967E58FA3","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":352784,"discussion_content":"防止转出账户余额不足","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614849191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348508,"ip_address":""},"score":352784,"extra":""}]},{"author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233683,"discussion_content":"不太懂这里怎么避免死锁，两个线程A,B用户互相转账的话，都执行到“// 锁定转入账户“那一步不是就会死锁了么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586938798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1138016,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5d/60/38ea52c5.jpg","nickname":"Bright丶","note":"","ucode":"B1DEA8C8100538","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251176,"discussion_content":"不嵌套锁就可以避免","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588071660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":233683,"ip_address":""},"score":251176,"extra":""},{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1605330,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/d2/be993431.jpg","nickname":"氵又弓虽","note":"","ucode":"A62F060B02CDD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318223,"discussion_content":"执行到转入时，上面的那个this锁已经释放了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603682075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":233683,"ip_address":""},"score":318223,"extra":""},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357997,"discussion_content":"这代码锁是嵌套的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615902926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318223,"ip_address":""},"score":357997,"extra":""}]},{"author":{"id":1508339,"avatar":"https://static001.geekbang.org/account/avatar/00/17/03/f3/0bd094ad.jpg","nickname":"zhangchao","note":"","ucode":"E665D153A85DE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210677,"discussion_content":"这个想法牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584760029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74143,"user_name":"轻歌赋","can_delete":false,"product_type":"c1","uid":1251574,"ip_address":"","ucode":"22F62446208805","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/f6/2ff7bc7a.jpg","comment_is_top":false,"comment_ctime":1552114853,"is_pvip":false,"replies":[{"id":"27131","content":"可以用top命令查看Java线程的cpu利用率，用jstack来dump线程。开发环境可以用 java visualvm查看线程执行情况","user_name":"作者回复","comment_id":74143,"uid":"1269969","ip_address":"","utype":1,"ctime":1552138621,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"113221264549","product_id":100023901,"comment_content":"存在性能差距，虽然申请的时候加锁导致单线程访问，但是hash判断和赋值时间复杂度低，而在锁中执行业务代码时间长很多。<br>申请的时候单线程，但是执行的时候就可以多线程了，这里性能提升比较明显<br><br>想问问老师，如何判断多线程的阻塞导致的问题呢？有什么工具吗","like_count":26,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442464,"discussion_content":"可以用top命令查看Java线程的cpu利用率，用jstack来dump线程。开发环境可以用 java visualvm查看线程执行情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552138621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128914,"user_name":"王二宝","can_delete":false,"product_type":"c1","uid":1042241,"ip_address":"","ucode":"E147D6E597EF5B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/41/2ea1f5dc.jpg","comment_is_top":false,"comment_ctime":1566982880,"is_pvip":false,"replies":[{"id":"48101","content":"👍","user_name":"作者回复","comment_id":128914,"uid":"1269969","ip_address":"","utype":1,"ctime":1567080935,"user_name_real":"王宝令"}],"discussion_count":2,"race_medal":0,"score":"91761296096","product_id":100023901,"comment_content":"最常见的就是B转A的同时，A转账给B，那么先锁B再锁A，但是，另一个线程是先锁A再锁B，然而，如果两个线程同时执行，那么就是出现死锁的情况，线程T1锁了A请求锁B，此时线程T2锁了B请求锁A，都在等着对方释放锁，然而自己都不会释放锁，故死锁。<br>最简单的办法，就是无论哪个线程执行的时候，都按照顺序加锁，即按照A和B的id大小来加锁，这样，无论哪个线程执行的时候，都会先加锁A，再加锁B，A被加锁，则等待释放。这样就不会被死锁了。","like_count":21,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465172,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567080935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2434363,"avatar":"https://static001.geekbang.org/account/avatar/00/25/25/3b/864c5115.jpg","nickname":"saiuna","note":"","ucode":"8DB9C47C965195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365204,"discussion_content":"🐂🍺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617728169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74051,"user_name":"邋遢的流浪剑客","can_delete":false,"product_type":"c1","uid":1260881,"ip_address":"","ucode":"32AF6F9070506D","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/51/9723276c.jpg","comment_is_top":false,"comment_ctime":1552094068,"is_pvip":false,"replies":[{"id":"27055","content":"这一部分的最后一章，要不就给答案吧<br>","user_name":"作者回复","comment_id":74051,"uid":"1269969","ip_address":"","utype":1,"ctime":1552098091,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"78861505396","product_id":100023901,"comment_content":"思考题的话希望老师能够过后给出一个比较标准的答案，毕竟大家的留言中说法各不相同很难去判断答案的对错","like_count":18,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442409,"discussion_content":"这一部分的最后一章，要不就给答案吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552098091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134089,"user_name":"铿然","can_delete":false,"product_type":"c1","uid":1162461,"ip_address":"","ucode":"D529242EC2E2EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/dd/c9413f59.jpg","comment_is_top":false,"comment_ctime":1568737178,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"70288213914","product_id":100023901,"comment_content":"如果有人没有理解透彻，看着例子来写生产代码，那么并发情况下会出问题，如果并发小，一直没出问题，会以为代码没问题，真正出问题的时候都分析不出来哪里错了。<br><br>并发情况下，这些代码的加锁对象并不是同一个，所以是有问题的。-- 不同的线程都获取到了账户A的实例对象，但这些实例对象不是同一个。<br><br>希望所有读者都能看透这个，多线程对账户A，B实例加锁时一定要保证是同一个实例对象，就像在数据库表中通过select * from account where account_id = ? for update 加锁一样，锁住的是同一条账户记录。","like_count":16,"discussions":[{"author":{"id":1744053,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/b5/c936c54b.jpg","nickname":"💣","note":"","ucode":"F3B82CEB6B6934","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313993,"discussion_content":"意思是需要保证是在单例模式下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603110425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1162461,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bc/dd/c9413f59.jpg","nickname":"铿然","note":"","ucode":"D529242EC2E2EA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1744053,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/b5/c936c54b.jpg","nickname":"💣","note":"","ucode":"F3B82CEB6B6934","race_medal":2,"user_type":1,"is_pvip":true},"discussion":{"id":379115,"discussion_content":"不是，确保是同一个锁就行，实现方式🈶很多，可以传入锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623696903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":313993,"ip_address":""},"score":379115,"extra":""}]},{"author":{"id":1083238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/66/31629628.jpg","nickname":"MaO","note":"","ucode":"3D839733E87435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296723,"discussion_content":"数据库操作又是io操作，不是的ssd硬盘环境下操作系统和虚拟机是否有专门的优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596632412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485018,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a8/da/63dd5078.jpg","nickname":"演员","note":"","ucode":"20040EC3D42025","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237448,"discussion_content":"说的非常好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587141595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76069,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1552527851,"is_pvip":false,"replies":[{"id":"27734","content":"为了保险而已，单纯这个例子是不需要的，如果还有取款操作就需要了<br>","user_name":"作者回复","comment_id":76069,"uid":"1269969","ip_address":"","utype":1,"ctime":1552536937,"user_name_real":"王宝令"}],"discussion_count":3,"race_medal":0,"score":"70272004587","product_id":100023901,"comment_content":"老师，在破坏占用且等待的案例中，为何申请完两个账户的资源后还需要再分别锁定this和target账户呢？","like_count":16,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443163,"discussion_content":"为了保险而已，单纯这个例子是不需要的，如果还有取款操作就需要了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552536937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2445017,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4e/d9/a559e58c.jpg","nickname":"郭橙輝-","note":"","ucode":"2B61A22448E5DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409966,"discussion_content":"mark, 这个我也困扰很久","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635561457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289120,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593998454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74325,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1552190122,"is_pvip":false,"replies":[{"id":"27175","content":"是的，就是id的次序。","user_name":"作者回复","comment_id":74325,"uid":"1269969","ip_address":"","utype":1,"ctime":1552200564,"user_name_real":"王宝令"}],"discussion_count":6,"race_medal":0,"score":"61681732266","product_id":100023901,"comment_content":"看了老师的讲解学到了很多，联想了下实际转账业务，应该是数据库来实现的，假如有账户表account，利用mysql的悲观锁select ...for update对a，b两条数据锁定，这时也有可能发生死锁，按照您讲到的第三种破坏循环等待的方式，按照id的大小顺序依次锁定。我这样理解的对吗？","like_count":14,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442532,"discussion_content":"是的，就是id的次序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552200564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2583432,"avatar":"https://static001.geekbang.org/account/avatar/00/27/6b/88/6315d04c.jpg","nickname":"Geek_Black","note":"","ucode":"8CFB324D281FC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387787,"discussion_content":"ID顺序  具体怎么写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628414375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2192295,"avatar":"https://static001.geekbang.org/account/avatar/00/21/73/a7/c8ea0a62.jpg","nickname":"北京小妞","note":"","ucode":"5A327F761E2DFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373043,"discussion_content":"老哥们，意思是执行4句sql:\n1.select for update A;\n2.select from update B;\n3.update A set A = A - num;\n4.update B set B = B + num;\n这样吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620575795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/66/31629628.jpg","nickname":"MaO","note":"","ucode":"3D839733E87435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296722,"discussion_content":"数据for update 好像可以定义timeout\n这样完整得解决方案岂不是可以这样\n按大小顺序 for update\ntimeout 抛异常\n异常处理回滚事务\n完美","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596632247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542037,"avatar":"https://static001.geekbang.org/account/avatar/00/17/87/95/cba0a896.jpg","nickname":"卢","note":"","ucode":"B6A9F41AEE348C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292224,"discussion_content":"游戏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595147048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289121,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593998485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76146,"user_name":"陈华","can_delete":false,"product_type":"c1","uid":1082730,"ip_address":"","ucode":"3AF9E8EB39E507","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtS26SJpSF7JLu9pusGsy1Qln0NdQg1eV2YKOJxpX2QXaBuuyXMqZY3fm0rhzKwsqN5aa6CVNOQQ/132","comment_is_top":false,"comment_ctime":1552535784,"is_pvip":false,"replies":[{"id":"27736","content":"能起作用，这俩操作不会死锁<br>","user_name":"作者回复","comment_id":76146,"uid":"1269969","ip_address":"","utype":1,"ctime":1552537364,"user_name_real":"王宝令"}],"discussion_count":7,"race_medal":0,"score":"53092143336","product_id":100023901,"comment_content":"对于第三点，按资源顺序来锁就能打破循环等待有疑问。<br>例如：账户 1 向 账户 3 转账<br>  同时 账户 3 向 账户 5 转账<br>即使按资源顺序来锁，也是起不了啥作用吧！？，","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443196,"discussion_content":"能起作用，这俩操作不会死锁\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552537364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178651,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/1b/7fa5823c.jpg","nickname":"在下令狐冲","note":"","ucode":"6228893CCF8C09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293178,"discussion_content":"这种情况不叫死锁，极端情况下就是获取锁超时，账户3往5转账完成了之后，账户1转3就能获取到3的锁了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595469165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/66/31629628.jpg","nickname":"MaO","note":"","ucode":"3D839733E87435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296724,"discussion_content":"实际环境中可能会出现因为等待关键资源而导致大量超时，但不会死锁吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596632502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292177,"discussion_content":"可以执行的，不会死锁。我刚开始也有这个疑问。同时转账的话，总有一个会成功，另外一个就会被阻塞了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595130813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242062,"discussion_content":"只要是A-B-C-D-A这种的就会出现死锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587462126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1587129,"avatar":"https://static001.geekbang.org/account/avatar/00/18/37/b9/e72b2e2e.jpg","nickname":"Harvey","note":"","ucode":"9658EE9693574A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1217,"discussion_content":"obj1 > obj2 ,  假如从大到小顺序上锁   A线程锁了obj1  那B线程肯定锁不了obj1， 即不会死锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562406968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1055854,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/6e/6c5f5734.jpg","nickname":"终结者999号","note":"","ucode":"33ADE61580B6DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1587129,"avatar":"https://static001.geekbang.org/account/avatar/00/18/37/b9/e72b2e2e.jpg","nickname":"Harvey","note":"","ucode":"9658EE9693574A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163986,"discussion_content":"B线程只会锁obj2是嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581133432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1217,"ip_address":""},"score":163986,"extra":""}]}]},{"had_liked":false,"id":74165,"user_name":"Howie","can_delete":false,"product_type":"c1","uid":1127629,"ip_address":"","ucode":"30393BD92D9ADD","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/cd/4e2cd598.jpg","comment_is_top":false,"comment_ctime":1552123172,"is_pvip":false,"replies":[{"id":"27129","content":"自旋锁在JVM里是一种特殊的锁机制，自诩不会阻塞线程的。咱们这个其实还是会阻塞线程的。不过原理都一样，你这样理解也没问题。","user_name":"作者回复","comment_id":74165,"uid":"1269969","ip_address":"","utype":1,"ctime":1552138107,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"53091730724","product_id":100023901,"comment_content":"while 循环就是一个自旋锁机制吧，自旋锁的话要关注它的循环时间，不能一直循环下去，不然会浪费 cpu 资源。","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442476,"discussion_content":"自旋锁在JVM里是一种特殊的锁机制，自诩不会阻塞线程的。咱们这个其实还是会阻塞线程的。不过原理都一样，你这样理解也没问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552138107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75828,"user_name":"GP","can_delete":false,"product_type":"c1","uid":1099980,"ip_address":"","ucode":"01115F293F02C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/cc/d52d3317.jpg","comment_is_top":false,"comment_ctime":1552476948,"is_pvip":false,"replies":[{"id":"27657","content":"保护的是对象里面的成员，这俩对象变也只能是里面成员变，相对于里面的成员来说，这俩对象是永远不会变的。你可以这样理解。不是绝对不能用于可变对象，只是一条最佳实践。","user_name":"作者回复","comment_id":75828,"uid":"1269969","ip_address":"","utype":1,"ctime":1552483458,"user_name_real":"王宝令"}],"discussion_count":2,"race_medal":0,"score":"48797117204","product_id":100023901,"comment_content":"问下，上节最后说到，不能用可变对象做锁，这里为何又synchronized（left）？","like_count":11,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443047,"discussion_content":"保护的是对象里面的成员，这俩对象变也只能是里面成员变，相对于里面的成员来说，这俩对象是永远不会变的。你可以这样理解。不是绝对不能用于可变对象，只是一条最佳实践。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552483458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1533266,"avatar":"https://static001.geekbang.org/account/avatar/00/17/65/52/07c09c7f.jpg","nickname":"josancpp","note":"","ucode":"0CDC39B3E716A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265162,"discussion_content":"锁住的对象没变～地址没变","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589377977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75643,"user_name":"长眉_张永","can_delete":false,"product_type":"c1","uid":1442279,"ip_address":"","ucode":"B3DCA68BDD473E","user_header":"https://static001.geekbang.org/account/avatar/00/16/01/e7/091804b7.jpg","comment_is_top":false,"comment_ctime":1552442849,"is_pvip":false,"replies":[{"id":"27608","content":"是啊，所以知识只是知识，不是能力","user_name":"作者回复","comment_id":75643,"uid":"1269969","ip_address":"","utype":1,"ctime":1552455004,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"48797083105","product_id":100023901,"comment_content":"关键是如何找到最合适的锁的力度。","like_count":11,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442971,"discussion_content":"是啊，所以知识只是知识，不是能力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552455004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74725,"user_name":"Nero.t.Kang","can_delete":false,"product_type":"c1","uid":1111864,"ip_address":"","ucode":"0F2806A17E3198","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/38/1b74f53d.jpg","comment_is_top":false,"comment_ctime":1552286777,"is_pvip":false,"replies":[{"id":"27268","content":"有区别，如果转账操作很耗时，那么a-b,c-d能并行还是有价值的<br>","user_name":"作者回复","comment_id":74725,"uid":"1269969","ip_address":"","utype":1,"ctime":1552305986,"user_name_real":"王宝令"}],"discussion_count":5,"race_medal":0,"score":"48796927033","product_id":100023901,"comment_content":"虽然看起来 while(!actr.apply(this, target));只是锁住了两个对象，但是因为actr是一个单例的对象，这个方法在执行的时候也需要锁住actr，在多线程状态下也相当于是串行化了，那么这和加上一个Account.class的类锁的串行化有什么区别吗?请老师赐教，谢谢。","like_count":11,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442662,"discussion_content":"有区别，如果转账操作很耗时，那么a-b,c-d能并行还是有价值的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552305986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2697700,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/LFJZ4x47rvShGhsePLIxc8EzdlBxAmVAIjJ2FQZ4NEpo8E4JCZQEOb2NIfOuiaQLL6Otkt7W3Rmu6Tv3AkgYdRA/132","nickname":"键盘上的魔术","note":"","ucode":"A731D721FB8D3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554261,"discussion_content":"老师，还是没明白区别在哪里。 a-b申请资源(持有单例对象actr锁)，然后转账，再释放资源(释放单例actr锁)。 申请资源如果是串行的， c-d此时根本无法申请到资源，必须等到a-b转账结束了，释放了才行(finally才释放，是在转账后的)。  怎么可能会出现a-b，c-d并行转账呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646291675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":442662,"ip_address":""},"score":554261,"extra":""}]},{"author":{"id":1771658,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/08/8a/c141ff16.jpg","nickname":"I am watermelon","note":"","ucode":"009EFA2065221C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265848,"discussion_content":"感觉老是说的这个并行是指进程的并行，两个进程有两个单例","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589446859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1771658,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/08/8a/c141ff16.jpg","nickname":"I am watermelon","note":"","ucode":"009EFA2065221C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358006,"discussion_content":"a-b很耗时的话在这期间c-d有可能获取到Allocator锁去后去转账，此时a-b，c-d并行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615903574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265848,"ip_address":""},"score":358006,"extra":""},{"author":{"id":2697700,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/LFJZ4x47rvShGhsePLIxc8EzdlBxAmVAIjJ2FQZ4NEpo8E4JCZQEOb2NIfOuiaQLL6Otkt7W3Rmu6Tv3AkgYdRA/132","nickname":"键盘上的魔术","note":"","ucode":"A731D721FB8D3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554262,"discussion_content":"不懂，a-b释放锁是在finally块里，要等到a-b转账结束吧。 这个时候c-d才能拿到锁，然后再转账。 怎么并行转账？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646291838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358006,"ip_address":""},"score":554262,"extra":""}]}]},{"had_liked":false,"id":126504,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1566397354,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40221103018","product_id":100023901,"comment_content":"虽然上面两种锁的方式都是串行化了，但是具体还是有一点区别的：synchronized(Account.class)的方式相当于A-&gt;B 转账，C-&gt;D转账 先后执行，而 actr.apply(this, target)的方式则是apply--&gt;转账--&gt;free这样的串行方式执行，但是在转账中是可以A-&gt;B，C-&gt;D转账线程并行执行的，正如文中提到的apply方法耗时很少 所以比如一次转账耗时200ms,apply+release方式执行要20ms,所以用synchronized的方式A-&gt;B,C-&gt;D则需要耗时400ms,而appy的方式则要200+20*2=240ms,并且同时转账的人越多 apply方式的转账并行度越高 比synchronized的方式的优势越明显。 但是有一个不明白的地方,对于已经通过apply获取锁的线程，感觉没有必要对转账的账户锁定了，因为其他的线程想对相同的账户进行转账 调用apply方式是没法返回true的(已经有线程对list加入账户了) ","like_count":9,"discussions":[{"author":{"id":2192295,"avatar":"https://static001.geekbang.org/account/avatar/00/21/73/a7/c8ea0a62.jpg","nickname":"北京小妞","note":"","ucode":"5A327F761E2DFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373044,"discussion_content":"要锁定，要数据写对其他线程的可见性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620575912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1341612,"avatar":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","nickname":"古夜","note":"","ucode":"0A82D3CFCEDF07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274599,"discussion_content":"厉害，仔细看了你的回答两遍，对比着代码，有了更深刻的理解，多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590593529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74844,"user_name":"λ","can_delete":false,"product_type":"c1","uid":1441520,"ip_address":"","ucode":"71709A827123E0","user_header":"https://static001.geekbang.org/account/avatar/00/15/fe/f0/135c2cd9.jpg","comment_is_top":false,"comment_ctime":1552303749,"is_pvip":false,"replies":[{"id":"27287","content":"是串行，但是允许A转B，C转D","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552310309,"ip_address":"","comment_id":74844,"utype":1}],"discussion_count":4,"race_medal":0,"score":"35912042117","product_id":100023901,"comment_content":"单例导致操作也是串行的吧","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442704,"discussion_content":"是串行，但是允许A转B，C转D","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552310309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229623,"discussion_content":"如果锁对象是sy(actr)这种的话，就包场了，所有转账操作变成了串行。\n而例子中锁对象是this、target，所以即便串行也支持A转B，C转D","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586675093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109892,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ef/84/a0ffbd8b.jpg","nickname":"白三岁","note":"","ucode":"39594C357FEA1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226198,"discussion_content":"申请锁的时候是串行，后续的转账操作是并行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586427735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1953,"discussion_content":"请问这代买里是单例么，我怎么没看出来。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563117317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74121,"user_name":"winter","can_delete":false,"product_type":"c1","uid":1323233,"ip_address":"","ucode":"04D4DE4A60C4C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBywibUar2Q8TmCy6ZrNQk9qia7sQgosBYInmygZI118vzrWu4CfUQnbOefvP82c8Inhb6xVqymhvYw/132","comment_is_top":false,"comment_ctime":1552107530,"is_pvip":true,"replies":[{"id":"27112","content":"是的，有时候性能更差，毕竟要synchronized三次。但是有些场景会更好，例如转账操作很慢，而apply很快，这个时候允许a-&gt;b,c-&gt;d并行就有优势了。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114905,"ip_address":"","comment_id":74121,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31616878602","product_id":100023901,"comment_content":"我的想法是，如果Account对象中只有转账业务的话，while(actr.apply(this, target)和对象锁synchronized(Account.class)的性能优势几乎看不出来，synchronized(Account.class)的性能甚至更差；但是如果Account对象中如果还有其它业务，比如查看余额等功能也加了synchronized(Account.class)修饰，那么把单独的转账业务剥离出来，性能的提升可能就比较明显了。<br>","like_count":7,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442457,"discussion_content":"是的，有时候性能更差，毕竟要synchronized三次。但是有些场景会更好，例如转账操作很慢，而apply很快，这个时候允许a-&amp;gt;b,c-&amp;gt;d并行就有优势了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143411,"user_name":"无言的约定","can_delete":false,"product_type":"c1","uid":1128953,"ip_address":"","ucode":"5E8046EB6B7956","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/f9/acfb9a48.jpg","comment_is_top":false,"comment_ctime":1571706607,"is_pvip":false,"replies":[{"id":"55684","content":"都在，说明都被别人拿走了，所以不能再分配。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1571926079,"ip_address":"","comment_id":143411,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14456608495","product_id":100023901,"comment_content":"class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br>  synchronized boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>      als.add(from);<br>      als.add(to);  <br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>目测if条件有问题，当from和to都在list中时，返回的是false","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471523,"discussion_content":"都在，说明都被别人拿走了，所以不能再分配。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571926079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2598274,"avatar":"","nickname":"Geek_97d1b0","note":"","ucode":"B8FF1ED262B612","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370770,"discussion_content":"归还资源是remove,请求资源是添加,这个设计有点反向思维啊,有点曲折","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619527753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1150234,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8d/1a/ecacb992.jpg","nickname":"文哲","note":"","ucode":"62DBD7CA1E7726","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298398,"discussion_content":"他的管理员是单例，如果当前线程(即当前用户)判断有账本（这里的账本要门都有要么都没有），就说明别人已经拿走账本了，进入账户转账环节了，这时，该线程只能等那个线程释放账本。主要是因为单例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597289190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2598274,"avatar":"","nickname":"Geek_97d1b0","note":"","ucode":"B8FF1ED262B612","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1150234,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8d/1a/ecacb992.jpg","nickname":"文哲","note":"","ucode":"62DBD7CA1E7726","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370771,"discussion_content":"文不对题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619528112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298398,"ip_address":""},"score":370771,"extra":""}]}]},{"had_liked":false,"id":74298,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1552183694,"is_pvip":false,"replies":[{"id":"27172","content":"下一章讲优化","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552190924,"ip_address":"","comment_id":74298,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14437085582","product_id":100023901,"comment_content":"考虑现实场景，做出如下假设：转账操作会相对apply方法耗时。<br>那在高并发下synchronized(Account.class)会使得所有转账串行化，使用apply方法能提高转账的吞吐量。<br>但apply方法也有问题，在同一个账户转账操作并发量高的场景下，apply方法频繁失败，转账的线程会不断的阻塞唤醒阻塞唤醒，开销大。<br>也许应该改进一下由Allocator负责在有资源的情况下唤醒调用apply的线程？<br>","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442517,"discussion_content":"下一章讲优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552190924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179795,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1582101553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10172036145","product_id":100023901,"comment_content":"死锁是当两个两个线程需要占有多个锁，两个线程都占有了对象需要的锁而等待对方占有的锁的时候。两个线程一直等待就会形成死锁。<br><br>死锁的条件是：<br>1.资源是互斥的，<br>2.占有等待，占有一个资源，等待其他的资源。<br>3.不可剥夺。线程占有资源以后，不会被剥夺。<br>4.循环等待。<br>这四个问题 中：互斥问题是根本问题，无法解决。<br>对于<br>1.占有等待。可以要么全部加锁，要么都不加锁。<br>2.不可剥夺。当线程申请锁的时候，等待一段时间，没有申请到，这个时候也会释放自己占有的锁。<br>3.循环等待。按照一定的顺序锁定资源。<br><br>","like_count":2},{"had_liked":false,"id":137774,"user_name":"Mr.Jason_Sam","can_delete":false,"product_type":"c1","uid":1517294,"ip_address":"","ucode":"5CD5CE952344CB","user_header":"https://static001.geekbang.org/account/avatar/00/17/26/ee/ba1f2c31.jpg","comment_is_top":false,"comment_ctime":1569842205,"is_pvip":false,"replies":[{"id":"53014","content":"感谢大学老师😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1569928535,"ip_address":"","comment_id":137774,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10159776797","product_id":100023901,"comment_content":"哲学家就餐经典解法，资源排序和托管者。作者基础知识杠杠的啊","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469254,"discussion_content":"感谢大学老师😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569928535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018706,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/52/6659dc1b.jpg","nickname":"黑米","note":"","ucode":"E7DBEA7867862A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391111,"discussion_content":"哲学家饿死问题说起来就想起大学的岁月啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630298291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125396,"user_name":"zyz","can_delete":false,"product_type":"c1","uid":1019339,"ip_address":"","ucode":"0092F8C0FFA375","user_header":"","comment_is_top":false,"comment_ctime":1566178902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10156113494","product_id":100023901,"comment_content":"while(actr.apply(this, target))和对象锁synchronized(Account.class)操作的时候锁定范围是一样的，actr是单例，但是actr.apply(this, target)是判断两个账户是否被锁定，马上返回结果，同时也释放了actr的锁。","like_count":2},{"had_liked":false,"id":107411,"user_name":"杨鹏程baci","can_delete":false,"product_type":"c1","uid":1205949,"ip_address":"","ucode":"3D22F6B74340A8","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/bd/bd5d503e.jpg","comment_is_top":false,"comment_ctime":1561531750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151466342","product_id":100023901,"comment_content":"老师，对于破坏占用等待条件的代码，我理解所有的申请资源操作是串行的，但是后面的转账就支持并行操作了","like_count":2},{"had_liked":false,"id":97085,"user_name":"江南豆沙包","can_delete":false,"product_type":"c1","uid":1061596,"ip_address":"","ucode":"4B7833260F9F2F","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/dc/d3e3847f.jpg","comment_is_top":false,"comment_ctime":1558583582,"is_pvip":false,"replies":[{"id":"34748","content":"解决不了，synch获取不到锁会傻等","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558616787,"ip_address":"","comment_id":97085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148518174","product_id":100023901,"comment_content":"老师提到的向现实世界要答案，对于取账本这个场景，假如张三柜员拿了a账本，等待b账本，李四柜员拿了b账本，等待a账本。这种情况现实中一般是张三和李四先自行协商，一般情况下都能协商好，给某个人先用，然后另一个人再用；如果协商不好，一般就是问题上升，由领导决定谁先使用。如果synchronized关键字能参考这个逻辑实现，是否可以解决 不可抢占 这个问题。<br>","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451133,"discussion_content":"解决不了，synch获取不到锁会傻等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558616787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94868,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1435138,"ip_address":"","ucode":"2817C6A41C2E53","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/02/65a764fe.jpg","comment_is_top":false,"comment_ctime":1557913570,"is_pvip":false,"replies":[{"id":"33935","content":"打印的时候，那三个线程还没执行完，打印前需要join一下那三个线程","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557929912,"ip_address":"","comment_id":94868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10147848162","product_id":100023901,"comment_content":"老师，我运行下面的代码为什么结果是随机的，正确情况应该都是200。请老师指正<br>public class Test {<br><br>  public static void main(String[] args) throws InterruptedException {<br>    Account a = new Account();<br>    Account b = new Account();<br>    Account c = new Account();<br><br>    for (int i = 0; i &lt; 3000; i++) {<br>      Thread t1 = new Thread(()-&gt;{<br>        a.transfer(b, 100);<br>      });<br>      Thread t2 = new Thread(()-&gt;{<br>        b.transfer(c, 100);<br>      });<br><br>      Thread t3 = new Thread(()-&gt;{<br>        c.transfer(a, 100);<br>      });<br><br>      t1.start();<br>      t2.start();<br>      t3.start();<br>    }<br><br>    System.out.println(a.getBalance());<br>    System.out.println(b.getBalance());<br>    System.out.println(c.getBalance());<br>  }<br>}<br><br>class Account {<br>  private int balance = 200;<br><br>  void transfer(Account target, int amount) {<br>    synchronized (this) {<br>      synchronized (target) {<br>        if (this.balance &gt; amount) {<br>          this.balance -= amount;<br>          target.balance += amount;<br>        }<br>      }<br>    }<br>  }<br><br>  public int getBalance() {<br>    return balance;<br>  }<br>}<br>","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450239,"discussion_content":"打印的时候，那三个线程还没执行完，打印前需要join一下那三个线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557929912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90284,"user_name":"我是爹","can_delete":false,"product_type":"c1","uid":1269600,"ip_address":"","ucode":"E02D8A7A916B61","user_header":"https://static001.geekbang.org/account/avatar/00/13/5f/60/7ea2d646.jpg","comment_is_top":false,"comment_ctime":1556466059,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10146400651","product_id":100023901,"comment_content":"&#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>while(!actr.apply(this, target))<br>     ;<br>这里已经一次性申请了所有资源，为什么还要锁 转出和转入 对象","like_count":2,"discussions":[{"author":{"id":1613854,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a0/1e/6189499c.jpg","nickname":"hqyang","note":"","ucode":"A5E9D3A403BC00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2792,"discussion_content":"因为 while(!actr.apply(this, target))申请完了所有资源后,this和target还没有执行转账操作，如果在这个时候，另外一个 while(!actr.apply(this, target))资源申请成功后，想想会发生什么情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563936548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1577580,"avatar":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","nickname":"苏暮沉觞","note":"","ucode":"532B816D4EF47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613854,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a0/1e/6189499c.jpg","nickname":"hqyang","note":"","ucode":"A5E9D3A403BC00","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49411,"discussion_content":"第一个 while(!actr.apply(this, target))申请成功，如果第一个没有actr.free(this, target),第二个while(!actr.apply(this, target))怎么会成功？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573576284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2792,"ip_address":""},"score":49411,"extra":""}]},{"author":{"id":1334774,"avatar":"","nickname":"noma","note":"","ucode":"ADB9D589B9A798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2438,"discussion_content":"同意，我试了一下把l两个synchronized去掉，也是没有问题的。希望老师解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563617160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1577580,"avatar":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","nickname":"苏暮沉觞","note":"","ucode":"532B816D4EF47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179101,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/dd/baeda83e.jpg","nickname":"Monster!","note":"","ucode":"74F1D3BB5E3915","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49412,"discussion_content":"while(!actr.apply(a, b)) 成功以后，如果没有free(a,b),while(!actr.apply(a, c)) 应该成功不了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573576372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":13043,"ip_address":""},"score":49412,"extra":""}]}]},{"had_liked":false,"id":88449,"user_name":"vision","can_delete":false,"product_type":"c1","uid":1229373,"ip_address":"","ucode":"A08979AEC048E6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLrECTVEkicdKJDBCROtfjjsZ4mpCeG2nj7bTKz1JseC7icKfDCS03bSGDUDtAdO5s2ouiclkeu7s4Q/132","comment_is_top":false,"comment_ctime":1555920599,"is_pvip":false,"replies":[{"id":"31757","content":"5向1转，加锁顺序是1，5，这才叫顺序<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555941033,"ip_address":"","comment_id":88449,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145855191","product_id":100023901,"comment_content":"对于第三点，按资源顺序来锁就能打破循环等待有疑问。<br>例如：账户 1 向 账户 3 转账<br>         账户 3 向 账户 5 转账<br>         账户 5 向 账户 1 转账 <br>3个线程同时做3个转账操作，假设t1 执行账户1转账户3，锁1等待锁3；t2 执行账户3转账户5，锁3等待锁5；t3执行账户5转账户1， 等待锁1，这是不是就死锁了？ ","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447799,"discussion_content":"5向1转，加锁顺序是1，5，这才叫顺序\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555941033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76504,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1552620372,"is_pvip":false,"replies":[{"id":"27935","content":"👍👍<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552650982,"ip_address":"","comment_id":76504,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10142554964","product_id":100023901,"comment_content":"手写了转账的代码，发现死循环的确性能成问题，10个线程并发同样两个账户间转账，且转账逻辑不耗时，就会有30w次左右的锁尝试。必须加interval和timeout限制锁尝试的次数和获取锁的最大时长，来提高cpu和资源利用率。<br><br>total lock failed time is 252153<br>pool-1-thread-10 failed 117866 times!<br>pool-1-thread-2 failed 14645 times!<br>pool-1-thread-3 failed 3661 times!<br>pool-1-thread-4 failed 6163 times!<br>pool-1-thread-5 failed 9908 times!<br>pool-1-thread-6 failed 32832 times!<br>pool-1-thread-7 failed 19087 times!<br>pool-1-thread-8 failed 1334 times!<br>pool-1-thread-9 failed 46648 times!","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443333,"discussion_content":"👍👍\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552650982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1702511,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUVVjoibAO1cWoM0VcOcbibT0O9bbOvgjJmn6fWyKRNWgrZsOuj7mSMSubFXknOxRP3ozoicdwp1zibw/132","nickname":"衡山弟子","note":"","ucode":"5C635588688A88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216695,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585477952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75492,"user_name":"walkingonair","can_delete":false,"product_type":"c1","uid":1444748,"ip_address":"","ucode":"0C8BEE064ABF8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/0b/8c/db1ee0a2.jpg","comment_is_top":false,"comment_ctime":1552403818,"is_pvip":false,"replies":[{"id":"27610","content":"如果仅仅是示例代码就没必要，如果账户还有其他操作，例如取款，就有必要了<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552455218,"ip_address":"","comment_id":75492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142338410","product_id":100023901,"comment_content":"学习了下一章以后又回来学习了一遍，有个疑问:死循环使用apply方法判断后，那么线程会被阻塞在这个方法这里，那么下面的锁转账对象的同步代码块还有必要吗？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442914,"discussion_content":"如果仅仅是示例代码就没必要，如果账户还有其他操作，例如取款，就有必要了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552455218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74518,"user_name":"Asanz","can_delete":false,"product_type":"c1","uid":1005200,"ip_address":"","ucode":"430AB7ED59EE3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/90/be01bb8d.jpg","comment_is_top":false,"comment_ctime":1552229648,"is_pvip":false,"replies":[{"id":"27236","content":"我没查到，要不你给赐个大名？","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552277443,"ip_address":"","comment_id":74518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142164240","product_id":100023901,"comment_content":"Coffman的四条原则有没有一个命名？或者一个比较正式的学术话的名称？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442587,"discussion_content":"我没查到，要不你给赐个大名？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552277443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74199,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1552140665,"is_pvip":false,"replies":[{"id":"27140","content":"死循环里其实也还锁了一个全局对象","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552143430,"ip_address":"","comment_id":74199,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142075257","product_id":100023901,"comment_content":"死循环只是锁的是两个对象，而Account锁的是所有，串行化了","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442495,"discussion_content":"死循环里其实也还锁了一个全局对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552143430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74063,"user_name":"指尖流逝","can_delete":false,"product_type":"c1","uid":1005381,"ip_address":"","ucode":"417009F674FAF1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/45/c418ea5c.jpg","comment_is_top":false,"comment_ctime":1552097053,"is_pvip":false,"replies":[{"id":"27105","content":"锁的范围变了，如果转账这个操作很耗时，而apply很快，那就有优势了。这个要看具体场景。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114077,"ip_address":"","comment_id":74063,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10142031645","product_id":100023901,"comment_content":"请问下，既然Account类中，持有的Allocator实例时单实例的。那么在Account中调用Allocator.apply或者Allocator.free方法时，还是同一个对象锁。跟直接锁Account.class有是没区别？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442419,"discussion_content":"锁的范围变了，如果转账这个操作很耗时，而apply很快，那就有优势了。这个要看具体场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1900550,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqpYdydSevQVgL0xkj7REG9efRYeesEKnMlzSLVzcMxstvib1jD40BFqhXcJaiaX2AOeO69bf2SUx8Q/132","nickname":"是愛不是爱","note":"","ucode":"7577081245E620","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278898,"discussion_content":"请老师赐教，这里怎么能确定Allocator是单例的呢？我看了单例模式的代码，这里的代码并没有对Allocator的构造方法进行私有化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591253880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74059,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1552096124,"is_pvip":false,"replies":[{"id":"27067","content":"很多人都会想到用1😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552104278,"ip_address":"","comment_id":74059,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142030716","product_id":100023901,"comment_content":"看完要哭了，我干过用1来解决死锁问题，后来改成3就好很多。当然业务场景不是转账。","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442415,"discussion_content":"很多人都会想到用1😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552104278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74026,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1552087258,"is_pvip":false,"replies":[{"id":"27046","content":"锁的范围变了，所以场景不同性能也会有差异，并发量小的话，性能还会变差<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552094923,"ip_address":"","comment_id":74026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142021850","product_id":100023901,"comment_content":"没有性能优势，alloctor的操作也是获取alloctor对象的锁，和获取account的对象锁本质没有区别","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442394,"discussion_content":"锁的范围变了，所以场景不同性能也会有差异，并发量小的话，性能还会变差\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552094923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74016,"user_name":"西西弗与卡夫卡","can_delete":false,"product_type":"c1","uid":1001710,"ip_address":"","ucode":"B4C27B8335B76A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg","comment_is_top":false,"comment_ctime":1552064028,"is_pvip":true,"replies":[{"id":"27096","content":"是的，锁的范围是个大问题。允许A-&gt;B 和 C-&gt;D可以并行还是很重要的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113158,"ip_address":"","comment_id":74016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10141998620","product_id":100023901,"comment_content":"性能优势还是有的，毕竟后者是对这个类的所有访问都有锁的动作","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442387,"discussion_content":"是的，锁的范围是个大问题。允许A-&amp;gt;B 和 C-&amp;gt;D可以并行还是很重要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552113158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150662,"user_name":"苏暮沉觞","can_delete":false,"product_type":"c1","uid":1577580,"ip_address":"","ucode":"532B816D4EF47B","user_header":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","comment_is_top":false,"comment_ctime":1573576743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868544039","product_id":100023901,"comment_content":"老师，在破坏占用且等待的案例中，申请完两个账户的资源后再分别锁定this和target账户。你说如果还有取款操作就需要了。我有几个问题：<br>1、假如a,b两个账号做转账，存入als中，那么如果要对a,b做其他操作。不是应该先判断a,b是否在als里吗？不在才可以继续操作。<br>2、如果有了判断a,b是否在als里，是不是就不需要申请完两个账户的资源后再分别锁定this和target账户？","like_count":1},{"had_liked":false,"id":115517,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1563610171,"is_pvip":false,"replies":[{"id":"53839","content":"数据库里有死锁检测，一般的程序不会这个处理","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570679398,"ip_address":"","comment_id":115517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858577467","product_id":100023901,"comment_content":"---问题---<br>1. 解决死锁的方法还包括对死锁的检测（如银行家算法）和死锁出现后的处理，请问老师这两种解决方案会在实际场景中使用吗？<br><br>老师可抽空回答，若有表达不正确之处，也烦请指出，谢谢！","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459140,"discussion_content":"数据库里有死锁检测，一般的程序不会这个处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570679398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115254,"user_name":"从这里走来","can_delete":false,"product_type":"c1","uid":1068285,"ip_address":"","ucode":"9EB775A3B36039","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/fd/2e8af037.jpg","comment_is_top":false,"comment_ctime":1563518871,"is_pvip":false,"replies":[{"id":"51088","content":"您客气啦😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568507414,"ip_address":"","comment_id":115254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858486167","product_id":100023901,"comment_content":"老师分析的很好，谢谢！","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459029,"discussion_content":"您客气啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568507414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113936,"user_name":"DOVE","can_delete":false,"product_type":"c1","uid":1584095,"ip_address":"","ucode":"5A8CC3FE7CF002","user_header":"https://static001.geekbang.org/account/avatar/00/18/2b/df/7ec4f12b.jpg","comment_is_top":false,"comment_ctime":1563189502,"is_pvip":false,"replies":[{"id":"41578","content":"客气啦😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1563235283,"ip_address":"","comment_id":113936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858156798","product_id":100023901,"comment_content":"老师讲的非常通俗易懂，例子举得很好，通过例子理解起来毫不费力，图画得也好，学习了很多，谢谢老师！","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458445,"discussion_content":"客气啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563235283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95751,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1558164893,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5853132189","product_id":100023901,"comment_content":"Allocator的apply方法无需一进来就加锁，只需在要将其锁加进队列里，然后再判断一次，还有Account里也无需在加锁，因为有统一的锁分配，无需在transfer里面再加锁，直接转账就ok<br>class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br> boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>\tsynchronized(this) {<br>\t\tif(als.contains(from) ||<br>        \t\t\t als.contains(to)){<br>      \t\t\t return false;  <br>    \t\t\t}<br>\t\tals.add(from);<br>      \t\tals.add(to); <br>\t}<br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>class Account {<br>  &#47;&#47; actr 应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>       if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br>","like_count":1,"discussions":[{"author":{"id":1360872,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c3/e8/46894786.jpg","nickname":"ProgramerM","note":"","ucode":"717C12BD80CBBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20858,"discussion_content":"apply开始的部分不加锁有可见性问题。 其他线程把als  free了，但它看不到。导致这俩判断一直为true，  \nif(als.contains(from) ||\n         als.contains(to)){\n      return false; \n }","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1569386636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92353,"user_name":"LiuHu","can_delete":false,"product_type":"c1","uid":1039768,"ip_address":"","ucode":"284E2025C554BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/98/883c42b4.jpg","comment_is_top":false,"comment_ctime":1557239013,"is_pvip":false,"replies":[{"id":"33513","content":"应该，能不用就不用","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557645904,"ip_address":"","comment_id":92353,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852206309","product_id":100023901,"comment_content":"while(!actr.apply(this, target)); <br>这种写法应该杜绝吧~","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449223,"discussion_content":"应该，能不用就不用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557645904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88814,"user_name":"Geek_e6f3ec","can_delete":false,"product_type":"c1","uid":1360738,"ip_address":"","ucode":"A0ACE49CD3F9BB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotuhVFN9phZnUxxXueAm8rDDibjIkj0L8W7VojYRpSeXwHtDSgLW3SdrNjMQy0AcOUuMmTAQSyO3g/132","comment_is_top":false,"comment_ctime":1556007018,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"5850974314","product_id":100023901,"comment_content":"        ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;();<br>        SafeCacl a = new SafeCacl();<br>        SafeCacl b = new SafeCacl();<br>        list.add(a);<br>&#47;&#47;        list.add(b);<br><br>        if (list.contains(a)|| list.contains(b)){<br>            System.out.println(&quot;进来了&quot;);<br>        }<br><br><br>我在测试获取转账代码的时候，感觉这里有点问题，两个对象只要获取一个就返回false?","like_count":1,"discussions":[{"author":{"id":1179101,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/dd/baeda83e.jpg","nickname":"Monster!","note":"","ucode":"74F1D3BB5E3915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13047,"discussion_content":"这么想，如果A在给B转账，这时list中就有A，如果C要给A转账的话需要拿A的锁，判断list.contains(A)然后apply()返回false，这时候就说明A正在有其他操作，C等一会才能拿到A，这时候也就是A,B之间的交易完成了，C,A可以交易了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568634366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625515,"avatar":"","nickname":"Thong2018","note":"","ucode":"DA05A3B08D1DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6102,"discussion_content":"应该是list.contains(a) &amp;&amp; list.contains(b)吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566689729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","nickname":"绅士","note":"","ucode":"5B58E5A958F489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3945,"discussion_content":"我也有这个疑问，对第三点还是不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564999175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77716,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1552986166,"is_pvip":false,"replies":[{"id":"28393","content":"感谢你把有趣读出来了😄<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552997953,"ip_address":"","comment_id":77716,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5847953462","product_id":100023901,"comment_content":"言简意赅, 真是太有趣了; 老师对并发的讲解深入浅出! 赞赞赞!!","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443819,"discussion_content":"感谢你把有趣读出来了😄\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552997953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1497346,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d9/02/c4e2d7e8.jpg","nickname":"Geek_Huahui","note":"","ucode":"A688B183E5CE5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2932,"discussion_content":"这有趣吗= =","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564042103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76421,"user_name":"","can_delete":false,"product_type":"c1","uid":1154194,"ip_address":"","ucode":"","user_header":"","comment_is_top":false,"comment_ctime":1552609391,"is_pvip":false,"replies":[{"id":"27883","content":"释放2个资源是在转账完成之后，而不是while执行完。线程2获得资源一定是线程1 执行完转账了<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552623301,"ip_address":"","comment_id":76421,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5847576687","product_id":100023901,"comment_content":"class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br>  synchronized boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>      als.add(from);<br>      als.add(to);  <br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>class Account {<br>  &#47;&#47; actr 应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        synchronized(target){           <br>          if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>        }<br>      }<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br>这段代码还是会发生死锁的；场景如下：线程1 A转账给B，线程2 B转账给A：线程1执行完while(!actr.apply(this, target))；这段代码之后，释放2个资源，然后交出CPU;此时线程2也执行while(!actr.apply(this, target))；这段代码，接着线程2 获得B资源，交出CPU，等待；此时线程1获得A资源，这样下去，两个线程还是会死锁的； ---- while(!actr.apply(this, target))这段代码和之后的代码没有关联在一起，是独立的，不是原子性的；","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443299,"discussion_content":"释放2个资源是在转账完成之后，而不是while执行完。线程2获得资源一定是线程1 执行完转账了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552623301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326060,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/ec/69848c5a.jpg","nickname":"醉歌","note":"","ucode":"6789093C19A633","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586552,"discussion_content":"建议执行下，再来喷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662336784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676771,"avatar":"","nickname":"Geek_cae4a2","note":"","ucode":"28B0A987FF11DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21056,"discussion_content":"emmmm，虽然是学线程的，但是我有点没看懂apply那块的逻辑.....，为啥判断条件是包含，不应该是不包含么...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569418900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74672,"user_name":"Geek_c42505","can_delete":false,"product_type":"c1","uid":1232899,"ip_address":"","ucode":"6421EB85640C44","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/03/2e632d36.jpg","comment_is_top":false,"comment_ctime":1552278555,"is_pvip":false,"replies":[{"id":"27292","content":"这个要看场景，如果转账操作耗时长，允许A转B，C转D并行就是有意义的。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552310622,"ip_address":"","comment_id":74672,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5847245851","product_id":100023901,"comment_content":"Account.class 锁住的是Account下的所有操作，虽然while里面看是只锁了两个对象，但是apply方法还有一把锁，所有转账操作都要调用该方法，所以所有转账操作都要等这把锁，性能也不是很好，对吗？望老师，指正","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442645,"discussion_content":"这个要看场景，如果转账操作耗时长，允许A转B，C转D并行就是有意义的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552310622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2311005,"avatar":"","nickname":"Geek_067762","note":"","ucode":"B3C3CFD1C05283","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389134,"discussion_content":"并行，值得是多个进程了吧，比如把服务部署成集群。每个服务都一个单独的进程。每个进程都可以同时获取到锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629128234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74631,"user_name":"球场诗人","can_delete":false,"product_type":"c1","uid":1444771,"ip_address":"","ucode":"C172FC05D9AC58","user_header":"https://static001.geekbang.org/account/avatar/00/16/0b/a3/bf1f0f9f.jpg","comment_is_top":false,"comment_ctime":1552269754,"is_pvip":false,"replies":[{"id":"27238","content":"数据库，而且只能是数据库<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552277587,"ip_address":"","comment_id":74631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847237050","product_id":100023901,"comment_content":"实际应用中，我们是数据库用的多一些，还是用这个类多一些","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442626,"discussion_content":"数据库，而且只能是数据库\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552277587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74162,"user_name":"叶色","can_delete":false,"product_type":"c1","uid":1015131,"ip_address":"","ucode":"6F7AFB18A4A10C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/5b/beeeb675.jpg","comment_is_top":false,"comment_ctime":1552122274,"is_pvip":false,"replies":[{"id":"27125","content":"是的，循环很消耗CPU。下一期会优化这个问题。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552137216,"ip_address":"","comment_id":74162,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5847089570","product_id":100023901,"comment_content":"如果锁的竞争不激烈，用循环就很容易获取到锁，性能也会更好。<br>如果锁竞争激烈，这时候就需要循环很久才能拿到锁，性能就不是太好了，也会浪费很多资源在循环上，这时候用synchronize会好一点，在等待锁的时候，其他线程会休眠，减少资源消耗。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442473,"discussion_content":"是的，循环很消耗CPU。下一期会优化这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552137216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1702511,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUVVjoibAO1cWoM0VcOcbibT0O9bbOvgjJmn6fWyKRNWgrZsOuj7mSMSubFXknOxRP3ozoicdwp1zibw/132","nickname":"衡山弟子","note":"","ucode":"5C635588688A88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216696,"discussion_content":"66","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585477962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74122,"user_name":"ack","can_delete":false,"product_type":"c1","uid":1440912,"ip_address":"","ucode":"69CA1233EEA8E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/90/c9df0459.jpg","comment_is_top":false,"comment_ctime":1552107821,"is_pvip":false,"replies":[{"id":"27113","content":"是的，要看场景。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114943,"ip_address":"","comment_id":74122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847075117","product_id":100023901,"comment_content":"这个方法还是比 synchronized(Account.class) 有性能优势的，多个账户进行转账工作这个性能会更明显，一个串行等待，一个可并发操作。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442458,"discussion_content":"是的，要看场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74053,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1552094498,"is_pvip":false,"replies":[{"id":"27050","content":"数据库这么牛逼都免不了，linux这么牛，也不能自证没有死锁","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552096928,"ip_address":"","comment_id":74053,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847061794","product_id":100023901,"comment_content":"茫茫的代码海洋，，，怎么找到哪里发生了死锁，，，，，","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442410,"discussion_content":"数据库这么牛逼都免不了，linux这么牛，也不能自证没有死锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552096928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74049,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1552093344,"is_pvip":false,"replies":[{"id":"27106","content":"apply里面也有一个锁，所以并不公平。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114233,"ip_address":"","comment_id":74049,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847060640","product_id":100023901,"comment_content":"synchronized(Account.class) 导致其他线程来抢占资源时，进入阻塞状态，阻塞线程的唤醒是要比下面这种更消耗资源的吧，这种阻塞后的抢占，可以是公平或者非公平的竞争，……<br><br>Allocator采用while(apply(…))的形式等待资源的释放，并不会进入阻塞状态，但是线程一直处于活跃状态，很多线程下会对cpu使用率增加吧，这种的竞争应该是 看哪个线程先得到返回true吧？ 这种算公平竞争还是非公平竞争呢？<br><br>有点想不明白，想请老师大概提醒一下~","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442408,"discussion_content":"apply里面也有一个锁，所以并不公平。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359369,"user_name":"CBeann","can_delete":false,"product_type":"c1","uid":2294042,"ip_address":"重庆","ucode":"1EC7CBEEFD7546","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIym7CJnvZW4Xyj9OurEClibVPcNlh4lUjiakibTlUz4h0sQffwfU4uqB1HwDROFCNsBUTOZtOGGdTiaw/132","comment_is_top":false,"comment_ctime":1665478690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665478690","product_id":100023901,"comment_content":"有点像自旋锁和重量级锁","like_count":0},{"had_liked":false,"id":356976,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1476245,"ip_address":"重庆","ucode":"2668A965FA79F2","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/95/b9d960d9.jpg","comment_is_top":false,"comment_ctime":1662775949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662775949","product_id":100023901,"comment_content":"两者都会阻塞线程，破坏占用且等待是手动阻塞线程，通过死循环的方式；synchronized(Account.class)自动阻塞线程，管程。但是前者只会阻塞当前操作的两个账户相关的线程，而后者会将所有的线程阻塞","like_count":0},{"had_liked":false,"id":355656,"user_name":"authority","can_delete":false,"product_type":"c1","uid":1264706,"ip_address":"北京","ucode":"E5CA431B2BBD36","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/nBqcXB2xznHoiaMrnQ3ciaibicwK36nkaYqvKvQ72wqk4fQShcnajIxzaiamwxSXPo7gOngGqAMlHnfhX1iam8nywoOg/132","comment_is_top":false,"comment_ctime":1661599055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661599055","product_id":100023901,"comment_content":"现实场景下的A用户给B用户转账，B用户给C用户转账。这两个操作的B用户是同一个对象吗？？","like_count":0},{"had_liked":false,"id":350221,"user_name":"Geek_11dc8c","can_delete":false,"product_type":"c1","uid":1479664,"ip_address":"","ucode":"49CC02E1D0697B","user_header":"","comment_is_top":false,"comment_ctime":1656667791,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656667791","product_id":100023901,"comment_content":"老师，针对转账这个方法而言，既然Allocator对象是单例对象，在获取这个对象锁时和获取Account类锁，感觉成本一样啊","like_count":0},{"had_liked":false,"id":349177,"user_name":"可圈可丶","can_delete":false,"product_type":"c1","uid":2015438,"ip_address":"","ucode":"EB527E176EDE91","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c0/ce/eb1b4ae1.jpg","comment_is_top":false,"comment_ctime":1655783140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655783140","product_id":100023901,"comment_content":"提问一下：死锁的线程是否可以被中断？<br>例如：synchronize、lock这些","like_count":0},{"had_liked":false,"id":349156,"user_name":"沧海一粟","can_delete":false,"product_type":"c1","uid":1482590,"ip_address":"","ucode":"146961635959E7","user_header":"https://static001.geekbang.org/account/avatar/00/16/9f/5e/479f33a6.jpg","comment_is_top":false,"comment_ctime":1655777097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655777097","product_id":100023901,"comment_content":"如果银行里的账号很多 <br>private List als = new ArrayList&lt;&gt;();<br>用HashSet会更高效些吧。","like_count":0},{"had_liked":false,"id":349135,"user_name":"yzhao66","can_delete":false,"product_type":"c1","uid":1513503,"ip_address":"","ucode":"9F76363A0ECC4B","user_header":"https://static001.geekbang.org/account/avatar/00/17/18/1f/2c4cbea0.jpg","comment_is_top":false,"comment_ctime":1655768751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655768751","product_id":100023901,"comment_content":"我们假设线程 T1 执行账户 A 转账户 B 的操作，账户 A.transfer(账户 B)；同时线程 T2 执行账户 B 转账户 A 的操 这种情况再现实场景会怎么发生","like_count":0},{"had_liked":false,"id":344205,"user_name":"xiaochao321","can_delete":false,"product_type":"c1","uid":1083596,"ip_address":"","ucode":"8F5AC46CD9400C","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/cc/11b10a6f.jpg","comment_is_top":false,"comment_ctime":1651370926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651370926","product_id":100023901,"comment_content":"为了解决性能问题，可以用细粒度锁来解决，但是细粒度锁会带来死锁问题，如何解决死锁，主要是破坏掉造成死锁的三个条件，破坏占有且等待条件，引入协调员，破坏不可抢站，主动释放锁，破坏循环等待，引入资源顺序","like_count":0},{"had_liked":false,"id":341639,"user_name":"Geek_92b8a3","can_delete":false,"product_type":"c1","uid":2642899,"ip_address":"","ucode":"706EB1F2575FAA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOWucpCLACCUR59wF1fPRMaJI3lUJAlFYo57ib6Maq0U9aweCuQQicAybjRYN1MeUZBQNW6LXFicyew/132","comment_is_top":false,"comment_ctime":1649746666,"is_pvip":false,"replies":[{"id":"124865","content":"学以致用了！","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1649824683,"ip_address":"","comment_id":341639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649746666","product_id":100023901,"comment_content":"联想到，上个月做的微服务项目中的转账业务，转入账户和转出账户 我当时加的分布式锁，<br>锁id分别加在了这两个转入和转出账户上，也存在死锁的可能。<br>老师提出的按照id排序后再加锁，这个方法不错，有时间我把之前的业务代码再优化一下，感谢！！！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562436,"discussion_content":"学以致用了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649824683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336687,"user_name":"键盘上的魔术","can_delete":false,"product_type":"c1","uid":2697700,"ip_address":"","ucode":"A731D721FB8D3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/LFJZ4x47rvShGhsePLIxc8EzdlBxAmVAIjJ2FQZ4NEpo8E4JCZQEOb2NIfOuiaQLL6Otkt7W3Rmu6Tv3AkgYdRA/132","comment_is_top":false,"comment_ctime":1646291218,"is_pvip":false,"replies":[{"id":"123163","content":"synchronized(Account.class)锁的是所有账户，所有账户只能串行。另外一个方式是仅锁转账的账户，A转B和C转D这两个转账动作可以并行。","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1646615773,"ip_address":"","comment_id":336687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646291218","product_id":100023901,"comment_content":"我看了思考题的评论，说获取资源虽然是串行的，但后面转账是并行的，所以比synchronized(Account.class)好。 还是没明白，这里释放资源是在finally里的，是在转账之后才释放。 转账根本无法并行，必须要前面那个转账完成并释放了资源，才能申请到资源去转账啊。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554781,"discussion_content":"synchronized(Account.class)锁的是所有账户，所有账户只能串行。另外一个方式是仅锁转账的账户，A转B和C转D这两个转账动作可以并行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646615774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334897,"user_name":"枫林血舞","can_delete":false,"product_type":"c1","uid":2809867,"ip_address":"","ucode":"EE7F6DA78D21EA","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e0/0b/6f667b2c.jpg","comment_is_top":false,"comment_ctime":1645173738,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645173738","product_id":100023901,"comment_content":"synchronized(Account.class)：是对Account对应的Class级别的锁，属于粗粒度锁；while(!actr.apply(this, target))这种死循环方式，concurrent包中用的很多，不通过加锁实现资源的占有（自旋锁），性能上优于类锁，但是会占用CPU资源。","like_count":0},{"had_liked":false,"id":334287,"user_name":"Jit Gwan","can_delete":false,"product_type":"c1","uid":1389981,"ip_address":"","ucode":"CE2C8FC46D9D71","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/9d/4f23ec3d.jpg","comment_is_top":false,"comment_ctime":1644850698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644850698","product_id":100023901,"comment_content":"关于课后思考，使用上文实现的 Allocator 和 synchronized( Account.class ) 效果一样，都是全部操作串行执行了","like_count":0},{"had_liked":false,"id":331846,"user_name":"Walk beside you","can_delete":false,"product_type":"c1","uid":1803932,"ip_address":"","ucode":"C3FDED0004C763","user_header":"https://static001.geekbang.org/account/avatar/00/1b/86/9c/f1c43834.jpg","comment_is_top":false,"comment_ctime":1642832135,"is_pvip":false,"replies":[{"id":"122154","content":"不能用对象锁，同时还有分布式的情况，所以都是强依赖数据库","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1644922767,"ip_address":"","comment_id":331846,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642832135","product_id":100023901,"comment_content":"老师，在真实的开发环境下，咱们的数据都是从数据库中查询出来然后创建的对象，假如一个请求要A对B转账，一个请求B对A转账，那么这种情况下怎么实现上面这些锁呢，好像这种情况下创建出来的对象都不是一样的，只是数据一样，不能够使用具体的对象锁吧","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551196,"discussion_content":"不能用对象锁，同时还有分布式的情况，所以都是强依赖数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644922767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330203,"user_name":"青禾qingh","can_delete":false,"product_type":"c1","uid":1651441,"ip_address":"","ucode":"453FC435B03790","user_header":"https://static001.geekbang.org/account/avatar/00/19/32/f1/fd24d52b.jpg","comment_is_top":false,"comment_ctime":1641865725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641865725","product_id":100023901,"comment_content":"1，互斥 2，占用且等待 3，无法抢占 4，循环等待","like_count":0},{"had_liked":false,"id":324388,"user_name":"连铮坤","can_delete":false,"product_type":"c1","uid":1102201,"ip_address":"","ucode":"B8C910FC41C3C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/79/e21b88fa.jpg","comment_is_top":false,"comment_ctime":1638412572,"is_pvip":false,"replies":[{"id":"117736","content":"apply方法是同步方法，两个线程不可能同时执行","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1638446687,"ip_address":"","comment_id":324388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638412572","product_id":100023901,"comment_content":"老师，破坏占有且等待条件，设置一个集合，当集合为空获得两个对象时才能加锁。但这样会有一个问题，两个线程同时对集合进行判定，此时两个线程判定的结果是集合都为空，于是集合同时获得了对象，进入获得锁阶段。还是会出现死锁问题。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535459,"discussion_content":"apply方法是同步方法，两个线程不可能同时执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638446687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323476,"user_name":"青梅煮马","can_delete":false,"product_type":"c1","uid":1433737,"ip_address":"","ucode":"529AEBCF25E828","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/89/c3db1efc.jpg","comment_is_top":false,"comment_ctime":1637919932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637919932","product_id":100023901,"comment_content":"让我掌握了更多写bug的姿势","like_count":0},{"had_liked":false,"id":320981,"user_name":"10xiaohu","can_delete":false,"product_type":"c1","uid":1589055,"ip_address":"","ucode":"CAB39DBB93E608","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKKdCyib4iblXC6JIH7HWDfIFVweTb7SgEOuRjquic3GiaiaGInFSiaU8w2y2bjvZjgiaA3IEQuyibXTaeHQ/132","comment_is_top":false,"comment_ctime":1636610053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636610053","product_id":100023901,"comment_content":"没看懂Alloctor 单例的意思，不是单例呀，只对Account中的变量 allocator是唯一的","like_count":0},{"had_liked":false,"id":320245,"user_name":"luke25","can_delete":false,"product_type":"c1","uid":1543428,"ip_address":"","ucode":"4D667DDBDA898C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDrwrfgpyavWAPKRo2IDtWMQ53bh4C1g4tv0egmGCuslicmCvPiaq6RqNURyy3rDqichZPqAexVvwicQ/132","comment_is_top":false,"comment_ctime":1636171067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636171067","product_id":100023901,"comment_content":"Allocator这种方式很有意思，锁是干什么的呢？ 锁用来实现共享资源的互斥，是对某一个共享资源的管理，而Allocator就更厉害了，它是对多个共享资源进行统一管理","like_count":0},{"had_liked":false,"id":320243,"user_name":"luke25","can_delete":false,"product_type":"c1","uid":1543428,"ip_address":"","ucode":"4D667DDBDA898C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDrwrfgpyavWAPKRo2IDtWMQ53bh4C1g4tv0egmGCuslicmCvPiaq6RqNURyy3rDqichZPqAexVvwicQ/132","comment_is_top":false,"comment_ctime":1636170816,"is_pvip":false,"replies":[{"id":"116129","content":"我觉得粒度是一样的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1636263967,"ip_address":"","comment_id":320243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636170816","product_id":100023901,"comment_content":"老师请教下，对Class对象加锁和对任意一个单例对象加锁效果是一样的么？我理解这两个的锁粒度是一样的","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529926,"discussion_content":"我觉得粒度是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636263967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316816,"user_name":"SharpBB","can_delete":false,"product_type":"c1","uid":2014573,"ip_address":"","ucode":"D30C5B798B8E8C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/bd/6d/7010f98e.jpg","comment_is_top":false,"comment_ctime":1634558319,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634558319","product_id":100023901,"comment_content":"赞啊 这节课学到很多！！！！！！！","like_count":0},{"had_liked":false,"id":314996,"user_name":"官宝儿","can_delete":false,"product_type":"c1","uid":2110827,"ip_address":"","ucode":"03B4312475A984","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI5eicXFWltiaF9ibsEh2nNC80OYoHibhhE0X1hPHZ5KuAtY4Yxp5dQ4LsciaDxUHFBPlJM7kgQwkspzsQ/132","comment_is_top":false,"comment_ctime":1633653384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633653384","product_id":100023901,"comment_content":"循环等待性能消耗比直接synchronized来的多，循环体内有重复的contaions操作，不过这种方案规避了死锁，我觉得id排序是更好的方案，只是增加了生成id的开销；","like_count":0},{"had_liked":false,"id":309882,"user_name":"小宏","can_delete":false,"product_type":"c1","uid":1343456,"ip_address":"","ucode":"08B34C89368649","user_header":"https://static001.geekbang.org/account/avatar/00/14/7f/e0/b77e176e.jpg","comment_is_top":false,"comment_ctime":1630379686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630379686","product_id":100023901,"comment_content":"有。Account.class的话。所有和账号操作相关的都会被锁。而while死循环的方式，只会影响from 和<br>to两个当前操作的对象","like_count":0},{"had_liked":false,"id":306793,"user_name":"Tomy","can_delete":false,"product_type":"c1","uid":1192601,"ip_address":"","ucode":"D7E49E90B0D60F","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/99/91b58bf7.jpg","comment_is_top":false,"comment_ctime":1628726763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628726763","product_id":100023901,"comment_content":"target.balance += amt;<br>老师这行代码会报红呀","like_count":0},{"had_liked":false,"id":303856,"user_name":"1111","can_delete":false,"product_type":"c1","uid":2704613,"ip_address":"","ucode":"17A4E21927541A","user_header":"http://thirdwx.qlogo.cn/mmopen/DGaO1JGLPvzZ2mvdUia9sD40rvRhpLCavgtOEguakqgKhI8vt3kx9y1kOn8pfZH4l7aHuWocPJvCauOcGwgjkTNnpJwic55Hcp/132","comment_is_top":false,"comment_ctime":1627030194,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627030194","product_id":100023901,"comment_content":"<br>class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br>  synchronized boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>      als.add(from);<br>      als.add(to);  <br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>class Account {<br>  &#47;&#47; actr应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        synchronized(target){           <br>          if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>        }<br>      }<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br>如果，A转B100，B转A100<br>此时队列里面有A、B两个对象<br>那么A、B同时跳出，while(!actr.apply(this, target))<br>假设A，在synchronized(this)之前切换了线程，B执行了synchronized(this)，这个时候又切换为A，A执行了synchronized(this)，之后还要在synchronized(target)，A的target是B，但是B已经被锁了，同理B需要A，但是A也已经被锁了，这不是又发生了死锁吗？<br>老师，是我理解错了嘛？<br>","like_count":0,"discussions":[{"author":{"id":1580123,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/5b/25932cb6.jpg","nickname":"小笨孩","note":"","ucode":"C0584C7AD28BC3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581243,"discussion_content":"Allocator 是个单例对象，在A转B100，调用的时候，B转A100，是阻塞的。A转B执行完后，释放锁，B转A拿到，此时 als 里面已经有A，B对象了，返回的是false。A转B while(!actr.apply(this, target)) 会跳过， B转A 会一直在循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658660345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301797,"user_name":"spring","can_delete":false,"product_type":"c1","uid":2084208,"ip_address":"","ucode":"8E4687397A0344","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cd/70/145e88f0.jpg","comment_is_top":false,"comment_ctime":1625886002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625886002","product_id":100023901,"comment_content":"老师，在分布式项目中多个账户往B账户转账，用Allocator 方案没办法保障往B转账操作的互斥，此时这个方案会有线程安全问题，应该要用分布式锁解决是吗？如果是用分布式锁解决方案又是怎样的？麻烦老师解答一下，谢谢。","like_count":0},{"had_liked":false,"id":295803,"user_name":"宋柯仰","can_delete":false,"product_type":"c1","uid":1422296,"ip_address":"","ucode":"50FB61E3E9DAF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/b3/d8/c56e0f0b.jpg","comment_is_top":false,"comment_ctime":1622603328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622603328","product_id":100023901,"comment_content":"老师，账本管理员的方法，虽然把锁的粒度变细，但是当用户量很大，这里会成为新的瓶颈，所有用户转账都要抢占这个锁，对吧？","like_count":0},{"had_liked":false,"id":294504,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1621987303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621987303","product_id":100023901,"comment_content":"破坏占用且等待条件，破坏循环等待条件，破坏不可抢占条件","like_count":0},{"had_liked":false,"id":292598,"user_name":"Yeyw","can_delete":false,"product_type":"c1","uid":1463740,"ip_address":"","ucode":"C9D20DB91C3BE5","user_header":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","comment_is_top":false,"comment_ctime":1620889314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620889314","product_id":100023901,"comment_content":"锁局部，和锁全局的区别，锁局部不影响其他账户转账，最多是在申请资源排队；而顺序申请资源是最中意的，影响范围是最小的了","like_count":0},{"had_liked":false,"id":290517,"user_name":"Geek_b37487","can_delete":false,"product_type":"c1","uid":2043619,"ip_address":"","ucode":"B6E202603B1A84","user_header":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","comment_is_top":false,"comment_ctime":1619598663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619598663","product_id":100023901,"comment_content":"怎么也想不通第一个例子是用 this做锁对象的！   这不又回去了么......  每个调用该功能的线程，都有各自的this, 感觉完全没意义的","like_count":0},{"had_liked":false,"id":290376,"user_name":"Geek_b37487","can_delete":false,"product_type":"c1","uid":2043619,"ip_address":"","ucode":"B6E202603B1A84","user_header":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","comment_is_top":false,"comment_ctime":1619518672,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1619518672","product_id":100023901,"comment_content":"第一个例子就感觉有问题，一旦使用了this做锁对象, 如果有多个线程同时做A-&gt;B的转账，也是会有问题的哈，每个线程都去 new Account() 然后做转账的话，里面的this是各自的Account实例  是有问题的啊。和前面说的要使用Account.class那里矛盾了啊","like_count":0,"discussions":[{"author":{"id":2311005,"avatar":"","nickname":"Geek_067762","note":"","ucode":"B3C3CFD1C05283","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389136,"discussion_content":"Account是各自的，但是apply方法的提供者Allocator是单例的。最终加锁还是给一个单例对象加锁。所以是线程安全的，不知道我的理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629128501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290134,"user_name":"雨飞Vee","can_delete":false,"product_type":"c1","uid":1199975,"ip_address":"","ucode":"8AC07868C30E24","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/67/6a7a7534.jpg","comment_is_top":false,"comment_ctime":1619398185,"is_pvip":true,"replies":[{"id":"105787","content":"想办法让他们不一样","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1620731682,"ip_address":"","comment_id":290134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619398185","product_id":100023901,"comment_content":"从小到大排序，两个一样怎么办？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519123,"discussion_content":"想办法让他们不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620731682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289524,"user_name":"孤傲的虎王","can_delete":false,"product_type":"c1","uid":2536451,"ip_address":"","ucode":"FE9B90D6EEBAFB","user_header":"https://static001.geekbang.org/account/avatar/00/26/b4/03/677fd301.jpg","comment_is_top":false,"comment_ctime":1619061214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619061214","product_id":100023901,"comment_content":"为什么我使用分配器来获取所有资源，不会发生死锁，但是数据却出现了不一致的问题，求指教<br>public class DeadLock {<br>    public static void main(String[] args) {<br>        Alator alator = new Alator();<br>        Account1 account1 = new Account1(alator,1,100);<br>        Account1 account2 = new Account1(alator,2,100);<br><br>        new Thread(()-&gt;{<br>            account1.transfer(account2,50);<br>        }).start();<br>        new Thread(()-&gt;{<br>            account2.transfer(account1,50);<br>        }).start();<br>        System.out.println(account1.getBalance());<br>        System.out.println(account2.getBalance());<br>    }<br><br>}<br><br>class Alator{<br>    private List&lt;Account1&gt; lockList = new ArrayList&lt;&gt;();<br><br>    public synchronized boolean addLock(Account1 account1, Account1 account2){<br>        if(lockList.contains(account1) || lockList.contains(account2)){<br>            return false;<br>        }else{<br>            lockList.add(account1);<br>            lockList.add(account2);<br>        }<br><br><br>        return true;<br>    }<br><br>    public synchronized void freeLock(Account1 account1, Account1 account2){<br>        lockList.remove(account1);<br>        lockList.remove(account2);<br>    }<br>}<br>class Account1{<br>    private Alator alator;<br>    private int id;<br>    private int balance;<br><br>    public Account1(Alator alator, int id, int balance) {<br>        this.alator = alator;<br>        this.id = id;<br>        this.balance = balance;<br>    }<br><br>    public void setBalance(int balance) {<br>        this.balance = balance;<br>    }<br><br>    public int getBalance() {<br>        return balance;<br>    }<br><br>    public void transfer(Account1 target, int amount){<br>        while(!alator.addLock(this,target))<br>            ;<br>        try{<br>            synchronized (this) {<br>                synchronized (target) {<br>                    if (this.balance &gt;= amount) {<br>                        this.balance -= amount;<br>                        target.balance += amount;<br>                    }<br>                }<br>            }<br>        } finally {<br>            alator.freeLock(this,target);<br>        }<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":287281,"user_name":"RoccoLee","can_delete":false,"product_type":"c1","uid":2508667,"ip_address":"","ucode":"C55AD67FF8C2D7","user_header":"https://static001.geekbang.org/account/avatar/00/26/47/7b/c5ec018c.jpg","comment_is_top":false,"comment_ctime":1617867270,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1617867270","product_id":100023901,"comment_content":"课后思考：有一定性能优势，synchroinzed(Account.class)是粗粒度锁，使用this和target两个锁对象粒度较小，并发程度较高","like_count":0,"discussions":[{"author":{"id":2043619,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","nickname":"Geek_b37487","note":"","ucode":"B6E202603B1A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370730,"discussion_content":"问题是一旦使用了this做锁对象, 如果有多个线程同时做A->B的转账，也是会有问题的哈，每个线程都去 new Account() 然后做转账的话，里面的this是各自的Account实例  是有问题的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619518599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285286,"user_name":"hu big sea","can_delete":false,"product_type":"c1","uid":1486549,"ip_address":"","ucode":"489F9B4BF819FF","user_header":"https://static001.geekbang.org/account/avatar/00/16/ae/d5/abe7078a.jpg","comment_is_top":false,"comment_ctime":1616724288,"is_pvip":false,"replies":[{"id":"103595","content":"不需要了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1616822076,"ip_address":"","comment_id":285286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616724288","product_id":100023901,"comment_content":"一次性申请到所有资源，为什么后续转账还要加细粒度锁？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517634,"discussion_content":"不需要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616822076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284916,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1616545297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616545297","product_id":100023901,"comment_content":"在破坏占用且等待条件时，转账逻辑那块(也就是在while循环之后的代码)能不加锁吗？我觉得不加锁也没什么不可以的，因为能通过while循环就说明已经同时拿到了转入和转出这两套账本，不可能再有其他线程拿到这两套账本中的任何一个了。","like_count":0},{"had_liked":false,"id":283569,"user_name":"时光守护者-基兰","can_delete":false,"product_type":"c1","uid":1554995,"ip_address":"","ucode":"F0B0887B1979D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","comment_is_top":false,"comment_ctime":1615821074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615821074","product_id":100023901,"comment_content":"A向B转账，C向D转账，synchronized(Account.class)这两个操作只能串行。但是破坏占用且等待条件下A向B转账拿完Allocator 锁就去转账了（Allocator 锁会释放），此时C向D转账可以继续拿Allocator 锁去转账，A向B转账，C向D转账并行执行性能明显好","like_count":0},{"had_liked":false,"id":283049,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1615531409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615531409","product_id":100023901,"comment_content":"主要看场景吧，如果while等待拿锁的太多，假如有耗时的操作或者异常释放不了锁，性能肯定也下降。","like_count":0},{"had_liked":false,"id":282663,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1615355697,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"1615355697","product_id":100023901,"comment_content":"死锁、Spring 中的循环依赖，感觉问题都是类似的","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379509,"discussion_content":"都是形成了环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623932697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282436,"user_name":"zhunode","can_delete":false,"product_type":"c1","uid":1214421,"ip_address":"","ucode":"D60B6B28C5336C","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/d5/4a6c6890.jpg","comment_is_top":false,"comment_ctime":1615252126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615252126","product_id":100023901,"comment_content":"死循环性能较优。死循环锁了两个相关联对象的资源，是细粒度锁，而synchronize锁了整个类对象，只能串行。比如有N个客户两两转账，则死循环可以N&#47;2个线程并发执行，synchronized只能N个线程串行。","like_count":0},{"had_liked":false,"id":279568,"user_name":"蒋波","can_delete":false,"product_type":"c1","uid":1526325,"ip_address":"","ucode":"611A1F0629F08E","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/35/16861bf8.jpg","comment_is_top":false,"comment_ctime":1613826085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613826085","product_id":100023901,"comment_content":"对account.class加锁和对转入转出账户加锁，两个的粒度不一样，后者粒度要小，这个情况下应该转入转出账户粒度会导致的资源争夺概率应该会更小，老师，不知道这样理解对不对？还有想问一下是不是粒度越小，性能就会更好呢？","like_count":0},{"had_liked":false,"id":278752,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1829834,"ip_address":"","ucode":"83311F4944AB44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4mGSZxzsBmU1ib6INyvxWKY3rafl1xT9B6rdggF5RY35jzDKIg9U7YVIoLdlLNHUeEqxhTNbKibNIXs9IOrerM3A/132","comment_is_top":false,"comment_ctime":1613293984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613293984","product_id":100023901,"comment_content":"在破坏占有并等待条件代码里，转账功能，只有申请到资源，才能往下执行，没有申请到资源的，都会在循环里出不来，是不是不用加锁了？","like_count":0},{"had_liked":false,"id":278085,"user_name":"Geek_1d40b2","can_delete":false,"product_type":"c1","uid":1626130,"ip_address":"","ucode":"C02603A7C43E1C","user_header":"","comment_is_top":false,"comment_ctime":1612754978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612754978","product_id":100023901,"comment_content":"破坏占用且等待条件哪块，仅仅只是一次性拿到所有资源，并未对资源加锁，如果别的地方仅仅对单个资源进行加锁操作，是不是意味着拿到所有资源没有意义（因为别的地方照样可以对资源加锁），是不是可以修改为可变参数（保证最小粒度），每次加锁的时候，都需要apply 成立然后再加锁","like_count":0},{"had_liked":false,"id":275672,"user_name":"PeiXy","can_delete":false,"product_type":"c1","uid":1595503,"ip_address":"","ucode":"0C6A212B0B140D","user_header":"https://static001.geekbang.org/account/avatar/00/18/58/6f/4acc5b43.jpg","comment_is_top":false,"comment_ctime":1611640943,"is_pvip":true,"replies":[{"id":"100067","content":"是这个意思","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1611666430,"ip_address":"","comment_id":275672,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611640943","product_id":100023901,"comment_content":"破坏循环等待条件 这例子是不是 就相当于AB用户互相转账,原先死锁 第一次获取的都是自己的锁, 而通过例子三 第一次都是获取较小ID的锁,从而保证不会循环锁住的情况,","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514432,"discussion_content":"是这个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611666430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272939,"user_name":"子杰","can_delete":false,"product_type":"c1","uid":1025250,"ip_address":"","ucode":"717D10394391BE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/e2/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1610359801,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610359801","product_id":100023901,"comment_content":"Account target 对象会是每线程独享的私有变量吗？相同的账户可以是不同的target对象，甚至每线程会有一个target对象，这样就相当于没锁了","like_count":0},{"had_liked":false,"id":261930,"user_name":"Geek_89e362","can_delete":false,"product_type":"c1","uid":2308075,"ip_address":"","ucode":"E596C2CFE1CFAF","user_header":"","comment_is_top":false,"comment_ctime":1605582092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605582092","product_id":100023901,"comment_content":"有优势的，synchronized 存在线程上线文的切换开销，而 whille循环则不存在","like_count":0},{"had_liked":false,"id":260991,"user_name":"Geek_c75d82","can_delete":false,"product_type":"c1","uid":2286012,"ip_address":"","ucode":"81202A016FC5D2","user_header":"","comment_is_top":false,"comment_ctime":1605168212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605168212","product_id":100023901,"comment_content":"锁class，粒度比较大，所有调用这个方法，都会上锁，如果用from,to,只是对this对象和target对象上锁，锁的粒度比较小","like_count":0},{"had_liked":false,"id":256258,"user_name":"蚝不鱿鱼","can_delete":false,"product_type":"c1","uid":1428043,"ip_address":"","ucode":"5DB98E406F1D3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","comment_is_top":false,"comment_ctime":1603587649,"is_pvip":false,"replies":[{"id":"93324","content":"加油吧������","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1603596645,"ip_address":"","comment_id":256258,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603587649","product_id":100023901,"comment_content":"二刷，希望我能刷出新的认知，刷出新的觉悟","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507983,"discussion_content":"加油吧������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603596645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253882,"user_name":"李孟","can_delete":false,"product_type":"c1","uid":1006768,"ip_address":"","ucode":"AD2349CB12F130","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/b0/77e5f8c8.jpg","comment_is_top":false,"comment_ctime":1602931477,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1602931477","product_id":100023901,"comment_content":"&#47;&#47;两把锁<br>@Data<br>public class AccountClassLock3 {<br>    private int balance;<br><br>    public AccountClassLock3(int balance) {<br>        this.balance = balance;<br>    }<br><br>    public void transfer(AccountClassLock3 target,int amt){<br>        &#47;&#47;锁定转出账户<br>        synchronized (this){<br>            &#47;&#47;锁定转入账户<br>            synchronized (target){<br>                if(this.balance &gt; amt){<br>                    this.balance -= amt;<br>                    target.balance += amt;<br>                }<br><br>            }<br>        }<br><br><br>    }<br><br><br>    public static void main(String[] args) throws InterruptedException {<br>        for (int i = 0; i &lt; 1000; i++) {<br>            AccountClassLock3 a = new AccountClassLock3(200);<br>            AccountClassLock3 b = new AccountClassLock3(200);<br>            AccountClassLock3 c = new AccountClassLock3(200);<br><br><br>            Thread t1 = new Thread(()-&gt;{<br>                a.transfer(b,100);<br>            });<br><br><br><br>            Thread t2 = new Thread(()-&gt;{<br>                b.transfer(c,100);<br>            });<br>            t1.start();<br>            t2.start();<br><br><br>            t2.join();<br><br>            System.out.println(a.getBalance());<br>            System.out.println(b.getBalance());<br>            System.out.println(c.getBalance());<br>            System.out.println(&quot;---------------&quot;);<br>        }<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":253555,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1602774893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602774893","product_id":100023901,"comment_content":"这章节讲得太实用了！！真棒","like_count":0},{"had_liked":false,"id":249014,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1600401756,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1600401756","product_id":100023901,"comment_content":"死锁发生的必要条件：<br>1、互斥，共享资源X和Y只能被一个线程占有<br>2、占用且等待，线程T1已经取得共享资源X，在等待共享资源Y的时候不释放共享资源X<br>3、不可抢占，其它线程不能强行抢占线程T1占有的资源<br>4、循环等待，线程T1等待线程T2占有的资源，线程T2等待线程T1占有的资源<br><br>破环其中一个就可避免死锁：<br>1、（互斥），无法破坏，本身用锁就是要互斥<br>2、（占用且等待），一次性可以申请所有的资源，这样就不存在等待了<br>3、（不可抢占），占用部分资源的线程进一步申请资源的时候，如果申请不到，就可以主动释放占有的资源<br>4、（循环等待），可以靠按顺序申请资源来预防。所谓按顺序申请，就是指资源本身有线性顺序，申请的时候可以先申请资源序号小的，再申请大的，这样线性化后自然不存在循环了","like_count":0},{"had_liked":false,"id":242585,"user_name":"fightingD","can_delete":false,"product_type":"c1","uid":1443637,"ip_address":"","ucode":"AD2876CED5D5AC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwViav94kcF50CxA0Jw7icicxociaVzut97iacy3b2ciacFqXuFWdiakVq304YcI8pt4HT5A1Yvp8EkYCpw/132","comment_is_top":false,"comment_ctime":1597768230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597768230","product_id":100023901,"comment_content":"是有性能优势的，用Account.class锁，所有的转账操作都是串行了，循环等待获取转出账户和转入账户的锁还是要比串行性能要好。","like_count":0},{"had_liked":false,"id":242523,"user_name":"寻码人","can_delete":false,"product_type":"c1","uid":1480750,"ip_address":"","ucode":"1CED05494AC7E2","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/2e/9cd3cea8.jpg","comment_is_top":false,"comment_ctime":1597750559,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597750559","product_id":100023901,"comment_content":"对资源进行排序，账户A 账户B，两个线程需要同时对AB进行操作时，都会首先获取A，获取不到就等待不会再获取B，就不会导致循环等待。","like_count":0},{"had_liked":false,"id":240455,"user_name":"黄毅","can_delete":false,"product_type":"c1","uid":1159363,"ip_address":"","ucode":"201C9FD58CF90B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/c3/e1e2c097.jpg","comment_is_top":false,"comment_ctime":1596937293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596937293","product_id":100023901,"comment_content":"在破坏占用且等待条件小节中，通过Allocater一次性获得申请资源后，在Account的transfer方法中，还需要加锁this和target的原因是什么，麻烦老师解答？谢谢。","like_count":0},{"had_liked":false,"id":239395,"user_name":"续费专用","can_delete":false,"product_type":"c1","uid":2028938,"ip_address":"","ucode":"1B585A131B64B4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","comment_is_top":false,"comment_ctime":1596523063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596523063","product_id":100023901,"comment_content":"if(als.contains(from) || als.contains(to)){ return false; } else { als.add(from); als.add(to); } 老师，这里if(als.contains(from) || als.contains(to)){ return false; }   如果只有一个对象，也是会往下走啊，怎么确认同时申请到了两个资源呢","like_count":0},{"had_liked":false,"id":237824,"user_name":"7","can_delete":false,"product_type":"c1","uid":1114093,"ip_address":"","ucode":"10A6E57A027D42","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","comment_is_top":false,"comment_ctime":1595983595,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595983595","product_id":100023901,"comment_content":"虽然Allocator是单例，apply方法也加上了synchornized（相当于串行申请资源），但申请到资源后转账操作是可以并行的。<br><br>不过在并发比较小的时候while这种自旋方式可能效率高点，并发大了就没synchornized效率高了，都在那while了<br>这里的并发大是指出现转账有很多交集的情况。比如A转B，C转A，这里出现A账户的交集<br>","like_count":0,"discussions":[{"author":{"id":2697700,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/LFJZ4x47rvShGhsePLIxc8EzdlBxAmVAIjJ2FQZ4NEpo8E4JCZQEOb2NIfOuiaQLL6Otkt7W3Rmu6Tv3AkgYdRA/132","nickname":"键盘上的魔术","note":"","ucode":"A731D721FB8D3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554268,"discussion_content":"转账怎么并行？ 前面一个线程没有转账完成然后finally里调用free方法，后面那个线程都拿不到资源一直在while循环里，自然也无法转账","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646292952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233665,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1594377373,"is_pvip":false,"replies":[{"id":"86303","content":"👍🏻","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1594461790,"ip_address":"","comment_id":233665,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1594377373","product_id":100023901,"comment_content":"老师好，根据这篇文章，写了篇博客，用代码详细实现了转账的线程不安全实现，活锁实现，死锁实现和4种正确的实现，并发现一次性加锁和tryLock+随机sleep的两种实现的性能没有顺序加锁的性能高。<br><br>博文地址:  https:&#47;&#47;blog.csdn.net&#47;zhouwenjun0820&#47;java&#47;article&#47;details&#47;107247177","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501125,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594461790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323652,"avatar":"","nickname":"sibyl","note":"","ucode":"0D142011860D69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290555,"discussion_content":"不好意思，更新链接   https://blog.csdn.net/zhouwenjun0820/article/details/107247177?utm_source=app","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594531306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232198,"user_name":"Paul","can_delete":false,"product_type":"c1","uid":1076465,"ip_address":"","ucode":"6E3E907E6DFFD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/6c/f1/d4a4fb43.jpg","comment_is_top":false,"comment_ctime":1593916724,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593916724","product_id":100023901,"comment_content":"while这个还不让度CPU调度吧？就是不会使当前这个while所执行线程进入阻塞状态。是吗","like_count":0},{"had_liked":false,"id":232019,"user_name":"13501018051","can_delete":false,"product_type":"c1","uid":1218076,"ip_address":"","ucode":"D90E50B9C249AE","user_header":"","comment_is_top":false,"comment_ctime":1593832815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593832815","product_id":100023901,"comment_content":"在“破坏占用且等待条件”中， 已经通过Allocator的来保证对转账的两个Account资源的抢占的“原子性”。 Account.transfer 方法体的 两个 synchronized 是否可以去掉了？  ","like_count":0},{"had_liked":false,"id":229127,"user_name":"周豪","can_delete":false,"product_type":"c1","uid":1877217,"ip_address":"","ucode":"C47AE94726A989","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erIBYBQl9STN29VfmS4OSWWNXSCg0jnPI1ibVERGUcHMyseNSibBfIlF68myqFkfox0Ibg75a1hgXCw/132","comment_is_top":false,"comment_ctime":1592902165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592902165","product_id":100023901,"comment_content":"老师，你前面文章说不能用多个锁保护一个资源吗？你上面第一段代码用一个this锁和target锁 锁定了同一个资源，这是为啥","like_count":0},{"had_liked":false,"id":225791,"user_name":"Become a architect","can_delete":false,"product_type":"c1","uid":1248265,"ip_address":"","ucode":"6F1C9B183095E4","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/09/a46ad0a6.jpg","comment_is_top":false,"comment_ctime":1591858712,"is_pvip":false,"replies":[{"id":"83305","content":"感觉不仅是这样，循环等待至少有两把锁，一一对上也会有问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1591971877,"ip_address":"","comment_id":225791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591858712","product_id":100023901,"comment_content":"破坏循环等待条件，关键点在于left和right交换这一下。也就是把锁和资源一一对应上，避免用别人家的锁，锁了自家的门。老师这样理解对吗？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497992,"discussion_content":"感觉不仅是这样，循环等待至少有两把锁，一一对上也会有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591971877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224333,"user_name":"Just","can_delete":false,"product_type":"c1","uid":2022626,"ip_address":"","ucode":"35FA6917DE1D04","user_header":"https://static001.geekbang.org/account/avatar/00/1e/dc/e2/a3abd320.jpg","comment_is_top":false,"comment_ctime":1591346597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591346597","product_id":100023901,"comment_content":"1）在破坏占用且等待的案例中，如果账户A转账给账户B，账户B转账给账户C，还是会串行执行，不过影响的时A、B、C三个用户<br>2）用synchronized(Account.class)的话，有且只有一个线程能获取锁","like_count":0},{"had_liked":false,"id":223792,"user_name":"随心","can_delete":false,"product_type":"c1","uid":1358922,"ip_address":"","ucode":"9D399CF3D4082E","user_header":"https://static001.geekbang.org/account/avatar/00/14/bc/4a/bc5b1748.jpg","comment_is_top":false,"comment_ctime":1591182058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591182058","product_id":100023901,"comment_content":"我觉得这个要看while()和下面转账操作哪个更耗时了，毕竟那个while循环里Account是单例，所有的线程在这里都是串行的，如果下面那个转账的操作比较耗时，两个线程的转账人也是不同的，那么只是在判断那一块串行，之后就可以都获取到锁，然后并行去转账了","like_count":0},{"had_liked":false,"id":222269,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1923267,"ip_address":"","ucode":"FFCE9DE42920E2","user_header":"","comment_is_top":false,"comment_ctime":1590732697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590732697","product_id":100023901,"comment_content":"你好，老师，在一次性申请所有资源的例子中，有两个地方的synchronized是没必要加的，第一个是synchronized void free，这里的synchronized没必要加。第二是转账方法中的嵌套synchronized，一个操作A、B这两个账户的线程能走到这个地方，就不会有第二个包含A、B的线程走到这里了。","like_count":0},{"had_liked":false,"id":216713,"user_name":"大象佩奇","can_delete":false,"product_type":"c1","uid":1070165,"ip_address":"","ucode":"EAFB4FA3B9CFEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/55/f686c2ed.jpg","comment_is_top":false,"comment_ctime":1589331370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589331370","product_id":100023901,"comment_content":"破坏占有且等待的代码里，Account中的两个synchronized是不是可以去掉，然后把balance改成violate就行了","like_count":0},{"had_liked":false,"id":215423,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1008071,"ip_address":"","ucode":"9FE5F43055D3AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/c7/b64ac05e.jpg","comment_is_top":false,"comment_ctime":1588989034,"is_pvip":false,"replies":[{"id":"80122","content":"如果是一次性获取所有锁，就没必要再排序了。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1589286592,"ip_address":"","comment_id":215423,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588989034","product_id":100023901,"comment_content":"<br>class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br>  synchronized boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>      als.add(from);<br>      als.add(to);  <br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>class Account {<br>  &#47;&#47; actr应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        synchronized(target){           <br>          if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>        }<br>      }<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br><br><br><br><br><br><br><br>对于这个有个疑问，既然已经一次拿到了所有资源，内部是不是就不需要再排序了，因为不会再出现 同样的两个account 再并发获取锁 造成死锁， 我理解的有问题不，求老师指教","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494429,"discussion_content":"如果是一次性获取所有锁，就没必要再排序了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589286592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008071,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/61/c7/b64ac05e.jpg","nickname":"sky","note":"","ucode":"9FE5F43055D3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268949,"discussion_content":"一次性获取到所有的锁，是不是也不再需要对两个单独account 再分别上锁了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589851054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215069,"user_name":"wking","can_delete":false,"product_type":"c1","uid":1294634,"ip_address":"","ucode":"47D52E4280D1E6","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/2a/e7102065.jpg","comment_is_top":false,"comment_ctime":1588900185,"is_pvip":false,"replies":[{"id":"79655","content":"不是","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1588943125,"ip_address":"","comment_id":215069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588900185","product_id":100023901,"comment_content":"破坏循环等待，从小到大顺序锁，按照这样的想法，只能a账户给b账户转账，b永远不能转账给a，是吗？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494300,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588943125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214572,"user_name":"海东","can_delete":false,"product_type":"c1","uid":1635517,"ip_address":"","ucode":"69F48B3151BDCB","user_header":"https://static001.geekbang.org/account/avatar/00/18/f4/bd/8d6b3098.jpg","comment_is_top":false,"comment_ctime":1588767074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588767074","product_id":100023901,"comment_content":"老师，为什么我觉得条件二和条件三其实是一回事？ 占用且等待就是不能被抢占","like_count":0},{"had_liked":false,"id":213609,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1588490313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588490313","product_id":100023901,"comment_content":"while循环这种方式的等待就是传说中的自旋锁？","like_count":0},{"had_liked":false,"id":213376,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1588398585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588398585","product_id":100023901,"comment_content":"细粒度锁能够提升性能，但可能会引入死锁。死锁需要互斥，持有并等待，不可抢占，循环等待等条件，只需要破坏其中一种。一般就是一次全部获取，获取失败则释放，按序申请等方式。","like_count":0},{"had_liked":false,"id":209566,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1587567030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587567030","product_id":100023901,"comment_content":"记录下，死锁的出现满足四个条件:互斥，占有并等待，循环等待，不可抢占资源。互斥是使用锁的原因。占有并等待可以通过获取不到释放不阻塞tryLock，循环等待则是按顺序获取锁，不可抢战资源全部一次获取。","like_count":0},{"had_liked":false,"id":208849,"user_name":"牙医","can_delete":false,"product_type":"c1","uid":1108159,"ip_address":"","ucode":"27791DFF11EF45","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/bf/39042a46.jpg","comment_is_top":false,"comment_ctime":1587450061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587450061","product_id":100023901,"comment_content":"C++里面有adopt_lock,为何java不能从语言层面解决一下呢？","like_count":0},{"had_liked":false,"id":205569,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1586675682,"is_pvip":false,"replies":[{"id":"76835","content":"有收获就好😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1586693788,"ip_address":"","comment_id":205569,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586675682","product_id":100023901,"comment_content":"3. 破坏循环等待条件<br>当我读第一遍代码时，没看懂，心想这是什么意思嘛。<br>当我读第二遍时，发现排序（从小到大），按照顺序加锁，细细的品味了一番代码，哇，原来是这样，太高明了<br><br>老师真的太棒了，讲解的很透彻，谢谢老师提供了这个专栏！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491514,"discussion_content":"有收获就好😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586693788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205557,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1586673261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586673261","product_id":100023901,"comment_content":"synchronized(Account.class）这种所有的转账操作都成了串行了，排队等待。<br>而while(!actr.apply(this, target));只是同时循环申请两个对象，就比如A转账B，C转账D，相对于sy来说这两个转账就成了串行，而while也是并行操作，只是循环同时获取A和B的锁或C和D的锁，相对于串行，while效率还是高一点","like_count":0},{"had_liked":false,"id":203935,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586308614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586308614","product_id":100023901,"comment_content":"老师，其实synchronized是重锁，而while(!actr.apply(this, target))这个方法类似于CAS自旋算法，虽然消耗了一定的CUP，但是提高了性能。","like_count":0},{"had_liked":false,"id":202587,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1586011411,"is_pvip":false,"replies":[{"id":"75864","content":"只有一个线程执行临界区的代码，所以可以使用不安全的arraylist，不过百万级别并发使用这种方法一定有性能问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1586091304,"ip_address":"","comment_id":202587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586011411","product_id":100023901,"comment_content":"令哥好，来复习文章的时候发现有些疑问❓<br>Allocator作为单例，在[转账]这个也许场景下，内部持有ArrayList是否不太对呢？<br>按我理解，ArrayList属于线程不安全，如果在实际生产环境下，百万级以上用户同时转账，频繁地加加减减，应该会有问题吧？😂<br>望令哥指正🌚🌚","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490624,"discussion_content":"只有一个线程执行临界区的代码，所以可以使用不安全的arraylist，不过百万级别并发使用这种方法一定有性能问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586091304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201236,"user_name":"J.N.","can_delete":false,"product_type":"c1","uid":1934147,"ip_address":"","ucode":"E6501AFA8C6BC6","user_header":"https://static001.geekbang.org/account/avatar/00/1d/83/43/2132acb5.jpg","comment_is_top":false,"comment_ctime":1585737938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585737938","product_id":100023901,"comment_content":"synchronized(Account.class) 锁的是类，被所有线程所共享，所以调用该方法的线程都会被阻塞，while(!actr.apply(this, target))锁的是this, target两个对象，只有锁是这两个对象之一的才会被阻塞","like_count":0},{"had_liked":false,"id":196668,"user_name":"qpzm7903","can_delete":false,"product_type":"c1","uid":1138683,"ip_address":"","ucode":"C7C14962D34BE7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/fb/af061ca7.jpg","comment_is_top":false,"comment_ctime":1585301343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585301343","product_id":100023901,"comment_content":"资源是互斥的，不是你拿就是我拿，自己拿不到资源还得等着，不能抢。。","like_count":0},{"had_liked":false,"id":193266,"user_name":"丁","can_delete":false,"product_type":"c1","uid":1130108,"ip_address":"","ucode":"33E94956454A3D","user_header":"","comment_is_top":false,"comment_ctime":1584887765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584887765","product_id":100023901,"comment_content":"结合业务来讲。对理解原理很有帮助","like_count":0},{"had_liked":false,"id":192583,"user_name":"Zain Zhu","can_delete":false,"product_type":"c1","uid":1125986,"ip_address":"","ucode":"5402E6FF76333A","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/62/ea49480e.jpg","comment_is_top":false,"comment_ctime":1584861688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584861688","product_id":100023901,"comment_content":"学习了。前一讲首先就是想到了用类代替实例作为锁，但是没再进一步思考下这样会带来的性能问题。细分粒度锁的时候，又没有进一步想到可能随之而来的死锁问题。","like_count":0},{"had_liked":false,"id":189110,"user_name":"弹弹棉花","can_delete":false,"product_type":"c1","uid":1241859,"ip_address":"","ucode":"FCB9FB8338CAF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/03/a5091282.jpg","comment_is_top":false,"comment_ctime":1584456191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584456191","product_id":100023901,"comment_content":"思考题：<br>while(!actr.apply(this, target)) 性能会高一些，对于非this和target对象的账户可以非互斥的进行操作；","like_count":0},{"had_liked":false,"id":187158,"user_name":"流氓兔","can_delete":false,"product_type":"c1","uid":1098600,"ip_address":"","ucode":"1A6AC1177BC17E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/68/63fabc34.jpg","comment_is_top":false,"comment_ctime":1584028674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584028674","product_id":100023901,"comment_content":"按道理来说，在这个转账例子中，修改B账户余额应该是调用B对象自身的方法操作，不应该在A对象里面直接修改B对象的成员变量。如果每个对象自身的实例方法里面都用了synchronized修饰，锁的粒度也是比较小的，不会存在并发问题。","like_count":0},{"had_liked":false,"id":186160,"user_name":"Hugas Chan 🎭","can_delete":false,"product_type":"c1","uid":1597153,"ip_address":"","ucode":"10AEBC72784970","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/e1/261664f8.jpg","comment_is_top":false,"comment_ctime":1583768077,"is_pvip":false,"replies":[{"id":"72703","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1584357366,"ip_address":"","comment_id":186160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583768077","product_id":100023901,"comment_content":"那个分布式的是不是synchronized就没啥用了","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486651,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584357366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176022,"user_name":"茶没喝完","can_delete":false,"product_type":"c1","uid":1644104,"ip_address":"","ucode":"D72D88C42A1258","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/48/09493874.jpg","comment_is_top":false,"comment_ctime":1580913056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580913056","product_id":100023901,"comment_content":"思路非常清晰，厉害。","like_count":0},{"had_liked":false,"id":174564,"user_name":"三年过后","can_delete":false,"product_type":"c1","uid":1283157,"ip_address":"","ucode":"5E9106C5F11BED","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/55/afc64956.jpg","comment_is_top":false,"comment_ctime":1580279912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580279912","product_id":100023901,"comment_content":"&#47;&#47; 一次性申请转出账户和转入账户，直到成功    while(!actr.apply(this, target))      ；    try{      &#47;&#47; 锁定转出账户      synchronized(this){                      &#47;&#47; 锁定转入账户        synchronized(target){ <br><br>有个疑问：交给资源管理员去维护锁资源了，那么这块代码中的转入和转出账号就不需要锁了把？ ","like_count":0},{"had_liked":false,"id":173469,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1579569849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579569849","product_id":100023901,"comment_content":"synchronized不能保证对分布式场景下互斥资源的同步访问，分布式场景下用什么方案了，分布式锁加分布式事物吗","like_count":0},{"had_liked":false,"id":171808,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1641319,"ip_address":"","ucode":"E1184E76B14431","user_header":"https://static001.geekbang.org/account/avatar/00/19/0b/67/dc49a1a8.jpg","comment_is_top":false,"comment_ctime":1579016412,"is_pvip":false,"replies":[{"id":"66868","content":"死锁是永远都获取不到锁，你说的这里C迟早会释放的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1579179243,"ip_address":"","comment_id":171808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579016412","product_id":100023901,"comment_content":"破坏循环等待条件方式的示例好像也会出现死锁，当线程1和线程2执行转账A-B B-C，然后就出现线程1等待线程2释放B对象，不知道理解的是否正确，请老师帮我解答一下。谢谢","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481516,"discussion_content":"死锁是永远都获取不到锁，你说的这里C迟早会释放的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579179243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171708,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1641319,"ip_address":"","ucode":"E1184E76B14431","user_header":"https://static001.geekbang.org/account/avatar/00/19/0b/67/dc49a1a8.jpg","comment_is_top":false,"comment_ctime":1578994515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578994515","product_id":100023901,"comment_content":"课后思考：synchronized(Account.class)锁的粒度比while(!actr.apply(this, target));大。<br>synchronized(Account.class)只要是执行的方法对Account.class进行加锁，那这些操作都是串行执行。<br>while(!actr.apply(this, target));只会使this或target是相同的对象的操作是串行执行。<br>","like_count":0},{"had_liked":false,"id":170995,"user_name":"Running Man","can_delete":false,"product_type":"c1","uid":1121459,"ip_address":"","ucode":"4DD2F6AF71327E","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/b3/6d10ba4f.jpg","comment_is_top":false,"comment_ctime":1578814817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578814817","product_id":100023901,"comment_content":"牛逼，专栏超值！","like_count":0},{"had_liked":false,"id":167318,"user_name":"💢 星星💢","can_delete":false,"product_type":"c1","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1577763136,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577763136","product_id":100023901,"comment_content":"老师想问一下，一次性申请到了账户资源，进行转账的时候，为啥还需要锁定转出账户，和转入账户，这个时候不是只有一个线程才能进行转账了么？","like_count":0},{"had_liked":false,"id":148914,"user_name":"朕爱吾妃","can_delete":false,"product_type":"c1","uid":1733692,"ip_address":"","ucode":"B10EB69934F9E2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/74/3c/da79d2a1.jpg","comment_is_top":false,"comment_ctime":1573108678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573108678","product_id":100023901,"comment_content":"synchronized(Account.class)和while(!actr.apply(this, target))，可以这样理解，synchronized(Account.class)，是把所有人的账户写同一个账本上，而while(!actr.apply(this, target))，可以理解为每个人一个账本，所以性能上还是while(!actr.apply(this, target))性能要高一点","like_count":0},{"had_liked":false,"id":147531,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1572868429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868429","product_id":100023901,"comment_content":"今天的专栏已经是介绍并发编程锁的概念的第三篇了，也由此可以看出锁在并发编程领域的地位，在上一篇中提到了用一把锁保护多个资源，比如对class加锁，可以保护所有类实例化的对象，但是这样就导致效率极低，是不可接受的。<br>本篇中提到的细粒度锁，如果是像之前那种密码锁、账号余额锁的关系的话是没问题的，因为这两个锁直接不存在冲突，但是像今天这种转账操作的账号锁就不一样了，因为明显对两个账号加锁，实际上锁的资源类型是相同的，必然会导致出现死锁的发生。<br>死锁是并发编程中需要极力避免的，因为出现了死锁对系统的影响很大，而且没有很好的线上解决方案，通常是服务重启。<br>因次需要了解避免发生死锁的几个方法。","like_count":0},{"had_liked":false,"id":143901,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1571805214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571805214","product_id":100023901,"comment_content":"我的理解是 <br><br>Alloctor 是用来一次性分配锁定……只要对象在 list 里，那么他的锁一定被其他线程持有……","like_count":0},{"had_liked":false,"id":143895,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1571804123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571804123","product_id":100023901,"comment_content":"我觉得并没有完全锁定账户，因为 transfer 的 while 循环还是可以执行的……只是锁定了 下面的部分。","like_count":0},{"had_liked":false,"id":143889,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1571803626,"is_pvip":false,"replies":[{"id":"55682","content":"不同的思维方式，一个是抽象化的，一个是具体化的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1571925658,"ip_address":"","comment_id":143889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571803626","product_id":100023901,"comment_content":"为什么大家都叫锁定了账户？我理解，只是持有了对象的锁，然后锁定了 synchronized 对应的方法……","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471741,"discussion_content":"不同的思维方式，一个是抽象化的，一个是具体化的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571925658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143855,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1571799884,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571799884","product_id":100023901,"comment_content":"while 循环的情况，性能损耗会大些？线程没有阻塞，而是一直在运行；<br>synchronized 至少会阻塞，让出 cpu 时间片？","like_count":0,"discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38560,"discussion_content":"求指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571803209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137128,"user_name":"Jacian","can_delete":false,"product_type":"c1","uid":1460492,"ip_address":"","ucode":"8F0A54EE3C4516","user_header":"https://static001.geekbang.org/account/avatar/00/16/49/0c/b0d13058.jpg","comment_is_top":false,"comment_ctime":1569632487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569632487","product_id":100023901,"comment_content":"while(!actr.apply(this, target))<br><br>对于这种方式，如果一个线程a向b转账，另一个线程b向a转账，如果调用转账操作的对象和第一个线程中传入的b对象不是同一个，那就不认为他们是同一个人吗？","like_count":0},{"had_liked":false,"id":134356,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1568812424,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568812424","product_id":100023901,"comment_content":"后期优化的时候可以为两个资源绑定一个安全的资源，比如AtomicInteger，然后在外层利用CAS的机制来替代这个死循环中的频繁进入恭喜那个资源区，因为CAS比Synchronized性能要好不少，虽然我也没搞清楚底层咋搞的","like_count":0},{"had_liked":false,"id":134237,"user_name":"时光","can_delete":false,"product_type":"c1","uid":1347240,"ip_address":"","ucode":"1087509C209C54","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/a8/c9819e37.jpg","comment_is_top":false,"comment_ctime":1568780613,"is_pvip":true,"replies":[{"id":"54138","content":"防止有类似存款操作","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570796007,"ip_address":"","comment_id":134237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568780613","product_id":100023901,"comment_content":"老师，关于1.破坏占用且等待的演示代码中，既然任意一个Account对象在执行allocator的apply得到了操作目标账本和自己账本的权限，为什么还要使用两个synchronied锁？我理解的是通过apply操作之后，在我自行free之前，别的线程是不会apply成功的。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467665,"discussion_content":"防止有类似存款操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570796007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133379,"user_name":"B 612 星球来客","can_delete":false,"product_type":"c1","uid":1113469,"ip_address":"","ucode":"CBFB05B1F1B178","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/7d/a4bda9ce.jpg","comment_is_top":false,"comment_ctime":1568538855,"is_pvip":false,"replies":[{"id":"51315","content":"没有效果，必须是一个对象","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568635031,"ip_address":"","comment_id":133379,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568538855","product_id":100023901,"comment_content":"老师，有个问题，我在实际工作当中发现，不同线程查询账户生成的对象，地址是不同的，这意味着，我锁账户没效果","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467371,"discussion_content":"没有效果，必须是一个对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568635031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132858,"user_name":"cpp","can_delete":false,"product_type":"c1","uid":1449812,"ip_address":"","ucode":"85B13736CA43BB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erxAjBHiaJUyZqk8JWz1RHAY196YYlZj5HGGUric3pXYIOotzgRViauYxbz49Qt3TToFYW4YiapOIvQFg/132","comment_is_top":false,"comment_ctime":1568253997,"is_pvip":false,"replies":[{"id":"50908","content":"会有","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568272775,"ip_address":"","comment_id":132858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568253997","product_id":100023901,"comment_content":"问下老师，如果用springboot框架开发的话，那么还会有这种并发问题么？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467148,"discussion_content":"会有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568272775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128552,"user_name":"robot","can_delete":false,"product_type":"c1","uid":1611676,"ip_address":"","ucode":"C4AC58020DFBED","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/9c/5b41af12.jpg","comment_is_top":false,"comment_ctime":1566900018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566900018","product_id":100023901,"comment_content":"为什么线程获得了里层的锁却没有获得外层的锁","like_count":0},{"had_liked":false,"id":128489,"user_name":"Simple life","can_delete":false,"product_type":"c1","uid":1571460,"ip_address":"","ucode":"1902D7F72FB43F","user_header":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","comment_is_top":false,"comment_ctime":1566889205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566889205","product_id":100023901,"comment_content":"allocator方法的细粒度体现在多业务环境，并不是单一业务，性能肯定好一点","like_count":0},{"had_liked":false,"id":127385,"user_name":"Thong2018","can_delete":false,"product_type":"c1","uid":1625515,"ip_address":"","ucode":"DA05A3B08D1DEA","user_header":"","comment_is_top":false,"comment_ctime":1566689686,"is_pvip":false,"replies":[{"id":"47166","content":"不是","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1566711912,"ip_address":"","comment_id":127385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566689686","product_id":100023901,"comment_content":"是不是应该用与运算啊？als.contains(from) &amp;&amp; als.contains(to)，像这样？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464468,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566711912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127384,"user_name":"Thong2018","can_delete":false,"product_type":"c1","uid":1625515,"ip_address":"","ucode":"DA05A3B08D1DEA","user_header":"","comment_is_top":false,"comment_ctime":1566689319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566689319","product_id":100023901,"comment_content":"while(!actr.apply(this, target)只锁定this和target两个对象的资源，而synchronized(Account.class)是锁定所有的Account对象的资源，前者锁的范围更小，后者锁的范围更多，所以前者更有优势","like_count":0},{"had_liked":false,"id":127261,"user_name":" 臣馟飞扬","can_delete":false,"product_type":"c1","uid":1116188,"ip_address":"","ucode":"F2F882B7678055","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/1c/ef15e661.jpg","comment_is_top":false,"comment_ctime":1566627451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566627451","product_id":100023901,"comment_content":"一个锁无法保护同一个类中具有关联关系的共享变量，需要用类锁进行保护，但是并发性能会有很大影响，考虑使用两个对象锁分别保护自己的共享变量。但是又会出现死锁的情况，考虑从破坏死锁的条件上入手，即破坏占用且等待、不可抢占及循环等待三个条件，从而达到避免死锁的情况。","like_count":0},{"had_liked":false,"id":122092,"user_name":"BigCrab","can_delete":false,"product_type":"c1","uid":1591752,"ip_address":"","ucode":"0499088775A144","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyDiaaDJrwRsSc6GhvviaDmm70pg099gVibUQDUWHwhHibgNMuqicyGjdeKD8LdZPvQFenHzPNZThBpww/132","comment_is_top":false,"comment_ctime":1565284364,"is_pvip":false,"replies":[{"id":"44966","content":"ab放一起这个模型就有问题，bc怎么办？有两个b？还是共享一个b？","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1565428843,"ip_address":"","comment_id":122092,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565284364","product_id":100023901,"comment_content":"老师，我想请教一下您，您上面“破坏占用且等待条件”中转账的例子，如果我把A和B放到一个类里面，然后转账方法直接锁这个类可以吗？还有这样和您的例子有什么不同？不好意思，初学并发编程这块，很多地方不是太明白。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462096,"discussion_content":"ab放一起这个模型就有问题，bc怎么办？有两个b？还是共享一个b？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565428843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591752,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyDiaaDJrwRsSc6GhvviaDmm70pg099gVibUQDUWHwhHibgNMuqicyGjdeKD8LdZPvQFenHzPNZThBpww/132","nickname":"BigCrab","note":"","ucode":"0499088775A144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4521,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565516679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120801,"user_name":"绅士","can_delete":false,"product_type":"c1","uid":1583859,"ip_address":"","ucode":"5B58E5A958F489","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","comment_is_top":false,"comment_ctime":1564997971,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564997971","product_id":100023901,"comment_content":"a转b,b转a的问题：第一个线程执行a转b，第二个线程执行b转a，第一，第二个线程同时到达transfer方法进行转账<br>的时候，actr是单例的，假如第一个线程先执行，进入apply的方法，第一次就会返回true,然后进入try的方法，<br> 这里有一个疑问？第二个线程进入apply的方法的时候，als这个数组里面是null的还是已经有了a和b两个对象了","like_count":0,"discussions":[{"author":{"id":1179101,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/dd/baeda83e.jpg","nickname":"Monster!","note":"","ucode":"74F1D3BB5E3915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13048,"discussion_content":"你自己都说了actr是单例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568634605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120680,"user_name":"绅士","can_delete":false,"product_type":"c1","uid":1583859,"ip_address":"","ucode":"5B58E5A958F489","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","comment_is_top":false,"comment_ctime":1564972518,"is_pvip":false,"replies":[{"id":"73987","content":"我觉得对","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1585048922,"ip_address":"","comment_id":120680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564972518","product_id":100023901,"comment_content":"关于排序的理解：<br>a转b,b转a的问题：两个线程同时进行转账操作，第一个线程操作a转b,第二个线程操作b转a,假如a是账号的小的，第一个线程到达第七步，<br>锁定的是a,第二个线程到达第七步锁定的也是a,但是此时a已经被第一个线程给锁定，第二个线程如果想拿到a锁，就必须等到第一个线程<br>释放a锁，这样第一个线程和第二个线程就不会出现竞争死锁的问题了，不知道我理解的对不对，请同学们和老师指导","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461430,"discussion_content":"我觉得对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585048922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115516,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1563610160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563610160","product_id":100023901,"comment_content":"---总结---<br>什么是死锁：一组线程持有对方的资源后向对方请求对方已持有的资源而造成相互等待。<br>解决死锁问题：预防死锁；检测死锁；死锁处理<br>死锁四大条件：互斥；占有并等待；不可抢占；循环等待<br>破坏占用并等待：一次性申请所有资源，即让一组资源的访问是原子性的，这样一组资源的操作方式就同一个资源类似。<br>破坏不可抢占：让资源在获取不到想要的资源时能主动释放占有的资源。这种方式像是我有锤子你有钉子，我那不到钉子，那我把锤子先给你，你先用完一套。<br>破坏循环等待条件：人为地对资源进行排序并按序申请资源，这样一组资源的操作方式也像是同一个资源类似。","like_count":0},{"had_liked":false,"id":114734,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1022568,"ip_address":"","ucode":"C8C617B87C63C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","comment_is_top":false,"comment_ctime":1563373344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563373344","product_id":100023901,"comment_content":"以前操作系统课程学过，那时候只是背书考试，理解全靠想象","like_count":0},{"had_liked":false,"id":113865,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1563175341,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1563175341","product_id":100023901,"comment_content":"有优势，synchronized(Account.class)锁的范围大，在同一时刻只能进行一笔交易；而while方法锁的粒度更细化，只对相关的账户进行锁同步，在性能上要好","like_count":0,"discussions":[{"author":{"id":1004192,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/a0/d308434e.jpg","nickname":"StarKing","note":"","ucode":"EB825CFA70AC1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15070,"discussion_content":"synchronized(Account.class)锁的范围大,但适合少量线程跑.while方法锁的粒度更细化，只对相关的账户进行锁同步，在性能上要好.但也有空转现象.如果仅是2个线程未必哪个快.哪个性能更好.仅在较多的并发下while看起来有些优势.此处while也不是一个很好的解决办法.\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568801611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2043619,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","nickname":"Geek_b37487","note":"","ucode":"B6E202603B1A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370731,"discussion_content":"问题是一旦使用了this做锁对象, 如果有多个线程同时做A->B的转账，也是会有问题的哈，每个线程都去 new Account() 然后做转账的话，里面的this是各自的Account实例  是有问题的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619518722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113819,"user_name":"JackLei","can_delete":false,"product_type":"c1","uid":1099989,"ip_address":"","ucode":"01128A61A9E80F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/d5/e88c1805.jpg","comment_is_top":false,"comment_ctime":1563161832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563161832","product_id":100023901,"comment_content":" 1. 破坏占用且等待条件<br>while(!actr.apply(this, targe)<br>;<br> <br> &#47;&#47; 锁定转出账户 synchronize...<br>&#47;&#47; 锁定转入账户 synchronized(...<br>是否可以不加锁，<br> 只要进入了while(),并获得锁，那么下面的代码执行是安全的。<br>因为，Allocator是单列，如果其他线程来抢用， 其他的线程，是在while循环里，只有final释放后，才会进入下面的转账逻辑。<br>","like_count":0},{"had_liked":false,"id":113527,"user_name":"赵小洛","can_delete":false,"product_type":"c1","uid":1592232,"ip_address":"","ucode":"A326C12B1A1ABA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/a8/14b8a860.jpg","comment_is_top":false,"comment_ctime":1563069274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563069274","product_id":100023901,"comment_content":"synchronize 比较自私 是会 锁住整个 Account类，while死循环是阻塞局部。","like_count":0},{"had_liked":false,"id":110767,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1562327242,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562327242","product_id":100023901,"comment_content":"actr虽说是个单例，但是对他并没有加锁，也就是说这个线程能用，另一个线程也可以用，用他去申请两个全局唯一的两个账户from ，和target，没有什么问题，只是这种方式有些暴力，吭哧吭哧一直在申请，申请到了就开始转账了。以前在银行做过，他们实行全行一本账，我一直以为老师所说的账本是那个呢，所以就很迷茫","like_count":0,"discussions":[{"author":{"id":1179101,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/dd/baeda83e.jpg","nickname":"Monster!","note":"","ucode":"74F1D3BB5E3915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13049,"discussion_content":"单例加锁干啥，多线程用就用呗，再多线程用的也是同一个对象啊，然后进去执行apply的时候有锁啊，这还不够？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568634705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110762,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1562326749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562326749","product_id":100023901,"comment_content":"看了n多遍以后终于有些入门了，不是老师讲的不好，而是老子悟性太低。真是书读百遍其义自见","like_count":0},{"had_liked":false,"id":110139,"user_name":"不寻常的远方","can_delete":false,"product_type":"c1","uid":1449711,"ip_address":"","ucode":"2B319E01F5F135","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/ef/1d17edfa.jpg","comment_is_top":false,"comment_ctime":1562200493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562200493","product_id":100023901,"comment_content":"您好老师，您说死锁时，A给B转100，B给A转100，在account类中两个线程走到①位置获取不同锁（this），A是A的account对象，B是B的account对象在进入②的位置会死锁，但是转账操作时，account对象指针不一样也就是A转账给B的this(A的对象)和B给A转账的target（A的对象）不一样怎么会死锁呢？","like_count":0},{"had_liked":false,"id":108314,"user_name":"八百","can_delete":false,"product_type":"c1","uid":1253530,"ip_address":"","ucode":"79F1F79ADF5A00","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","comment_is_top":false,"comment_ctime":1561716654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561716654","product_id":100023901,"comment_content":"锁的范围一样大，只是锁的时间变短了。","like_count":0},{"had_liked":false,"id":108051,"user_name":"a(๑≖ิټ≖ิ)✌","can_delete":false,"product_type":"c1","uid":1392431,"ip_address":"","ucode":"AEF9B5CA1605DF","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/2f/8513c4d3.jpg","comment_is_top":false,"comment_ctime":1561654163,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1561654163","product_id":100023901,"comment_content":"哦跑了几遍想明白了，它是方法内的局部变量，不会有线程问题","like_count":0,"discussions":[{"author":{"id":2043619,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","nickname":"Geek_b37487","note":"","ucode":"B6E202603B1A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370733,"discussion_content":"一开始就觉着有问题，不是死不死锁的问题，而是一旦使用了this做锁对象, 如果有多个线程同时做A->B的转账，也是会有问题的哈，每个线程都去 new Account() 然后做转账的话，里面的this是各自的Account实例  ，应该还是有问题的啊   除非前提是保证Account是单例的才行啊  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619518852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108050,"user_name":"a(๑≖ิټ≖ิ)✌","can_delete":false,"product_type":"c1","uid":1392431,"ip_address":"","ucode":"AEF9B5CA1605DF","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/2f/8513c4d3.jpg","comment_is_top":false,"comment_ctime":1561653750,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1561653750","product_id":100023901,"comment_content":"交换account对象target和this会不会也有线程问题，怎么解决呢，给排序对象这段代码也加个锁吗？","like_count":0},{"had_liked":false,"id":106861,"user_name":"Kian.Lee","can_delete":false,"product_type":"c1","uid":1086568,"ip_address":"","ucode":"3FB08A00F2DFD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/68/56794ea3.jpg","comment_is_top":false,"comment_ctime":1561417470,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1561417470","product_id":100023901,"comment_content":"void transfer(Account target, int amt)这个示例有些疑问，Account target 假定为账户B，但是无特殊处理下，可能两个线程执行transfer时，虽然都是账户B但是两个Java 对象，所以最好做一下声明，要在代码里实现一个物理账户对应一个Account对象。","like_count":0},{"had_liked":false,"id":95130,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1435138,"ip_address":"","ucode":"2817C6A41C2E53","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/02/65a764fe.jpg","comment_is_top":false,"comment_ctime":1557972254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557972254","product_id":100023901,"comment_content":"老师下面的写法结果还是不正确，正确结果应该都是200，实际情况是随机的100，200，300请老师指正<br>public class Test {<br><br>  public static void main(String[] args) throws InterruptedException {<br>    Account a = new Account();<br>    Account b = new Account();<br>    Account c = new Account();<br><br>    Thread s1 = new Thread(()-&gt;{<br>      for (int i = 0; i &lt; 1000; i++) {<br>        Thread t1 = new Thread(() -&gt;<br>            a.transfer(b, 100)<br>        );<br>        Thread t2 = new Thread(() -&gt;<br>            b.transfer(c, 100)<br>        );<br><br>        Thread t3 = new Thread(() -&gt;<br>            c.transfer(a, 100)<br>        );<br>        t1.start();<br>        t2.start();<br>        t3.start();<br>        try {<br>          t1.join();<br>          t2.join();<br>          t3.join();<br>        } catch (InterruptedException e) {<br>          e.printStackTrace();<br>        }<br>      }<br>    });<br><br>    Thread s2 = new Thread(()-&gt;{<br>      for (int i = 0; i &lt; 2000; i++) {<br>        Thread t1 = new Thread(() -&gt;<br>            a.transfer(b, 100)<br>        );<br>        Thread t2 = new Thread(() -&gt;<br>            b.transfer(c, 100)<br>        );<br>        Thread t3 = new Thread(() -&gt;<br>            c.transfer(a, 100)<br>        );<br>        t1.start();<br>        t2.start();<br>        t3.start();<br>        try {<br>          t1.join();<br>          t2.join();<br>          t3.join();<br>        } catch (InterruptedException e) {<br>          e.printStackTrace();<br>        }<br>      }<br>    });<br><br>    s1.start();<br>    s2.start();<br>    s1.join();<br>    s2.join();<br><br>    System.out.println(a.getBalance());<br>    System.out.println(b.getBalance());<br>    System.out.println(c.getBalance());<br>  }<br>}<br><br>class Account {<br><br>  private volatile int balance = 200;<br><br>  void transfer(Account target, int amount) {<br>    synchronized (this) {<br>      synchronized (target) {<br>        if (this.balance &gt; amount) {<br>          this.balance -= amount;<br>          target.balance += amount;<br>        }<br>      }<br>    }<br>  }<br><br>  public int getBalance() {<br>    return balance;<br>  }<br>}<br>","like_count":0},{"had_liked":false,"id":94714,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1557884430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557884430","product_id":100023901,"comment_content":"在最后那个破坏循环等待条件的案例中，通过给A和B两个账户中的id排序的方式来加同步，如果有两个线程，那这两个线程中的A和B是同一个A和B吗，这两个账户不是new出来的吗，如果是new出来的，那两个线程中的A账户就不是同一个对象了，即使按序加锁，也不生效呀","like_count":0},{"had_liked":false,"id":91753,"user_name":"zl","can_delete":false,"product_type":"c1","uid":1119422,"ip_address":"","ucode":"9260FC1C6CFECC","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/be/488b85a0.jpg","comment_is_top":false,"comment_ctime":1557104398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557104398","product_id":100023901,"comment_content":"class Allocator {<br>  private List&lt;Object&gt; als =<br>    new ArrayList&lt;&gt;();<br>  &#47;&#47; 一次性申请所有资源<br>  synchronized boolean apply(<br>    Object from, Object to){<br>    if(als.contains(from) ||<br>         als.contains(to)){<br>      return false;  <br>    } else {<br>      als.add(from);<br>      als.add(to);  <br>    }<br>    return true;<br>  }<br>  &#47;&#47; 归还资源<br>  synchronized void free(<br>    Object from, Object to){<br>    als.remove(from);<br>    als.remove(to);<br>  }<br>}<br><br>class Account {<br>  &#47;&#47; actr 应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        synchronized(target){           <br>          if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>        }<br>      }<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br>这段代码是有线程安全问题的啊","like_count":0},{"had_liked":false,"id":90274,"user_name":"ycfHH","can_delete":false,"product_type":"c1","uid":1498283,"ip_address":"","ucode":"084FF6C86CBCE4","user_header":"","comment_is_top":false,"comment_ctime":1556464841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556464841","product_id":100023901,"comment_content":"账户 1 向 账户 3 转账 同时 账户 3 向 账户 5 转账<br>给资源排序后确实能解决死锁问题，但是并发问题依然没有解决。即账户1给账户3转账，资源1锁上后。执行账户3向5转账，此时账户3资源未加锁，所以账户3成功转账到5。再执行1转到3的操作，此时3的金额是不正确的。但是确实没有死锁问题了。","like_count":0},{"had_liked":false,"id":89779,"user_name":"Geek_bbbda3","can_delete":false,"product_type":"c1","uid":1504651,"ip_address":"","ucode":"737394CE472C21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKNDKOCoZvCqoYVM1t97Q77QPLmRBGvOLYzFsh8073RicycoIuwGrIsCXpAFEyVBOxcyE3Ih1mr6Vw/132","comment_is_top":false,"comment_ctime":1556263000,"is_pvip":false,"replies":[{"id":"32180","content":"如果仅仅是这个题目，可以去掉，如果还有存款业务，就不能去了<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1556280248,"ip_address":"","comment_id":89779,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556263000","product_id":100023901,"comment_content":"class Account {<br>  &#47;&#47; actr 应该为单例<br>  private Allocator actr;<br>  private int balance;<br>  &#47;&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      &#47;&#47;synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        &#47;&#47;synchronized(target){           <br>          if (this.balance &gt; amt){<br>            this.balance -= amt;<br>            target.balance += amt;<br>          }<br>        &#47;&#47;}<br>      &#47;&#47;}<br>    } finally {<br>      actr.free(this, target)<br>    }<br>  } <br>}<br>hi，while 通过后，是否可以把synchronized代码注释掉？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448259,"discussion_content":"如果仅仅是这个题目，可以去掉，如果还有存款业务，就不能去了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556280248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87243,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1555552504,"is_pvip":false,"replies":[{"id":"31551","content":"逻辑上等价<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555675899,"ip_address":"","comment_id":87243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555552504","product_id":100023901,"comment_content":"老师您好，Allocator 只允许单例，那代码改写成 synchronized(Allocator.class)&#47; synchronize static apply(...) 是不是等价的，这样还能防止出现 Allocator 对象不一致的情况。<br>谢谢老师","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447363,"discussion_content":"逻辑上等价\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555675899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87223,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1555550626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555550626","product_id":100023901,"comment_content":"课后思考：<br>synchronized(Account.class) 是所有转账操作都串行化了，影响到了无关的账户。<br>而 while-apply 的方式只是阻塞当前的这次转账。性能是 while-apply 要好。不过如果其他线程忘了释放锁资源，刚就是死循环了。","like_count":0},{"had_liked":false,"id":85045,"user_name":"肖邦的学徒","can_delete":false,"product_type":"c1","uid":1159128,"ip_address":"","ucode":"1DB95CD3E10F33","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/d8/0f85fc8f.jpg","comment_is_top":false,"comment_ctime":1554966143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554966143","product_id":100023901,"comment_content":"actr.apply(this, target)已经同时拿到两把锁了，感觉不需要在锁住this和target了 ","like_count":0},{"had_liked":false,"id":83309,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1554527662,"is_pvip":false,"replies":[{"id":"30119","content":"实际工作中基本都是靠数据库解决的，这个只是个例子，说明并发编程的一些基本概念而已。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554538537,"ip_address":"","comment_id":83309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554527662","product_id":100023901,"comment_content":"转账使用细粒度锁，比较好奇一点是，那些账户对象是一样，比如线程1账户A转账给账户B，线程2账户B转账给账户C,那两个线程拿到账户B是一样对象的，那账户预先存到缓存中，感觉这样又不合理，老师，在银行业务方面真正的做法是如何保证多个线程拿到的账户对象是同一个，不然对象不一样拿到的锁就不一样，帮忙解答下哦","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445970,"discussion_content":"实际工作中基本都是靠数据库解决的，这个只是个例子，说明并发编程的一些基本概念而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554538537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82948,"user_name":"龙腾","can_delete":false,"product_type":"c1","uid":1439436,"ip_address":"","ucode":"51D41953C90207","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/cc/dac4c28c.jpg","comment_is_top":false,"comment_ctime":1554356544,"is_pvip":false,"replies":[{"id":"29977","content":"分布式有分布式的解法😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554379832,"ip_address":"","comment_id":82948,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554356544","product_id":100023901,"comment_content":"老师好，我在用这个Account类的时候怎么控制不同线程访问账户a，a的this都为同一个对象？如果放到集合类里的话没办法满足分布式，放redis存储好像就不是同一个对象了","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445789,"discussion_content":"分布式有分布式的解法😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554379832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82705,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1135159,"ip_address":"","ucode":"CD8B84A57A6A0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/37/13b4c8aa.jpg","comment_is_top":false,"comment_ctime":1554281189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554281189","product_id":100023901,"comment_content":"思考题: 同步类class实例的同步范围太大，只要涉及该类的操作，都会被同步，性能太差; 破坏占用且等待条件 将同步范围缩小为操作涉及的两个账户。提高了并发性能。另外while循环可以替换为基于AQS实现的同步队列，减少CPU消耗。","like_count":0},{"had_liked":false,"id":82317,"user_name":"Sun、","can_delete":false,"product_type":"c1","uid":1441974,"ip_address":"","ucode":"1B11AF8B8A138A","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/b6/c19640cf.jpg","comment_is_top":false,"comment_ctime":1554184183,"is_pvip":false,"replies":[{"id":"29873","content":"不会死锁，b_c会成功，最终释放锁，然后a_b成功<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554248910,"ip_address":"","comment_id":82317,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1554184183","product_id":100023901,"comment_content":"对于第3点，破坏循环等待条件，<br>老师，针对这有个问题，A-&gt;B和B-&gt;C同时执行，id依次增加，是否存在这种可能，在A-&gt;B中，排序，A上锁，对B上锁的时候，B-&gt;C获取到B，对B上锁，出现死锁，老师请明确一下","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445551,"discussion_content":"不会死锁，b_c会成功，最终释放锁，然后a_b成功\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554248910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123942,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/66/6643c75d.jpg","nickname":"Geek_a45c0b","note":"","ucode":"D3CFD2A88F0EF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202027,"discussion_content":"没懂为啥b c先执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583854277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82048,"user_name":"虎爷","can_delete":false,"product_type":"c1","uid":1024907,"ip_address":"","ucode":"42E8339F183055","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/8b/e7389cf5.jpg","comment_is_top":false,"comment_ctime":1554109746,"is_pvip":true,"replies":[{"id":"29708","content":"我信😄<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554129190,"ip_address":"","comment_id":82048,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1554109746","product_id":100023901,"comment_content":"它比 synchronized(Account.class)这个方法，还是有性能优势的。apply方法，只锁定了2个实例，转出和转入这2个实例，而synchronized(Account.class)这个方法，锁的是所有的Account实例。我声明啊，我没看别人的。<br><br><br>","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445444,"discussion_content":"我信😄\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554129190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2043619,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWiaJYL67ABTOrYO4VBibq5GrB7F2muJpibBPn4t8reWiaAHb7aNxckpGUk3V6mfyGhk2PruoicHdCkKIc/132","nickname":"Geek_b37487","note":"","ucode":"B6E202603B1A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370734,"discussion_content":"一开始就觉着有问题，不是死不死锁的问题，而是一旦使用了this做锁对象, 如果有多个线程同时做A->B的转账，也是会有问题的哈，每个线程都去 new Account() 然后做转账的话，里面的this是各自的Account实例  ，应该还是有问题的啊   除非前提是保证Account是单例的才行啊  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619518869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80800,"user_name":"龙腾","can_delete":false,"product_type":"c1","uid":1439436,"ip_address":"","ucode":"51D41953C90207","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/cc/dac4c28c.jpg","comment_is_top":false,"comment_ctime":1553735494,"is_pvip":false,"replies":[{"id":"29422","content":"我很努力看你的问题了但是没看懂，不同线程访问账户a,a的this都是一个，不知道你的问题是什么<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553781061,"ip_address":"","comment_id":80800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553735494","product_id":100023901,"comment_content":"老师好，不同线程访问进来用this和target对象来作为锁是怎么判断是不是同一个账户的对象？<br><br>我理解里面的this对象永远为一个对象不会针对不同账户进行加锁和解锁，如果不是同一个那应该是每个线程都有各自的对象，即使不同线程有可能会有相同的账户但他们的对象不是同一个对象也不会形成互斥吧？target对象由于是从外部传进来的所以我认为传入的对象为每个线程的对象即使为相同账户但对象内存地址不同也不会形成互斥。<br><br>看了好几遍就是想不通，望老师解惑。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444979,"discussion_content":"我很努力看你的问题了但是没看懂，不同线程访问账户a,a的this都是一个，不知道你的问题是什么\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553781061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80619,"user_name":"胡桥","can_delete":false,"product_type":"c1","uid":1055874,"ip_address":"","ucode":"673C3207614010","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/82/74ab79df.jpg","comment_is_top":false,"comment_ctime":1553689525,"is_pvip":false,"replies":[{"id":"29424","content":"两个线程都执行a转b,你看看能不能同时到达下面<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553781174,"ip_address":"","comment_id":80619,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553689525","product_id":100023901,"comment_content":"第一条，破坏占用且等待条件，感觉while(!actr.apply(this, target))没有意义啊？两个线程完全有可能同时从while出来到达下面的try语句吧。没看懂，麻烦老师指点下。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444923,"discussion_content":"两个线程都执行a转b,你看看能不能同时到达下面\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553781174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79984,"user_name":"秋天来了","can_delete":false,"product_type":"c1","uid":1205977,"ip_address":"","ucode":"98781C246B60A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/d9/8953d6c6.jpg","comment_is_top":false,"comment_ctime":1553588520,"is_pvip":false,"replies":[{"id":"29189","content":"有","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553604514,"ip_address":"","comment_id":79984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553588520","product_id":100023901,"comment_content":"你用ArrayList在并发下有线程安全问题吗？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444711,"discussion_content":"有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553604514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79027,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1553326442,"is_pvip":false,"replies":[{"id":"28856","content":"1.只是讲解理论<br>2.用内存模型去理解，不要试图推测jvm怎么实现的<br>3.不能","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553388485,"ip_address":"","comment_id":79027,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553326442","product_id":100023901,"comment_content":"1、感觉破坏占用且等待的实现，使用单例分配器，用list要是转账用户数太多，导致在一次性获取锁的时候，需要先判断锁是否有在list里面，感觉这里也会影响到性能，并且list太大占用jvm内存，在一次性获取到锁的时候，感觉内部是不需要在对转出账户和转入账户进行加锁，虽然加锁，jvm会优化成无锁，感觉在安全方面也会有问题，有可能一个线程加的锁，被另一个线程释放掉，比如先调分配器的free在调apply，\b老师问下，这个避免死锁的使用方法应该使用的比较少吧，感觉使用顺序避免死锁较常用。<br>2、锁或者volatile，在锁中的操作，都会强制刷入内存么？volatile的操作之前的操作也是会强制刷内存么？<br>3、构造函数是不能保证原子的么？如果想在并发的条件下，在一个方法中构造一个对象，在另一个对象能看到构造完的对象，里面的属性都是需要使用final并且对象没有溢出么？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444330,"discussion_content":"1.只是讲解理论\n2.用内存模型去理解，不要试图推测jvm怎么实现的\n3.不能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553388485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77816,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1553003999,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553003999","product_id":100023901,"comment_content":"1、多线程间获取共享变量资源的冲突概率非常高，使用synchronized会好一些<br>2、概率低，则使用while好一些，类似于乐观锁的应用场景","like_count":0},{"had_liked":false,"id":77777,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1552997192,"is_pvip":false,"replies":[{"id":"28392","content":"参考网络上单例的实现，有很多方式<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552997895,"ip_address":"","comment_id":77777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552997192","product_id":100023901,"comment_content":"老师，我想知道单例的allocator 什么时候 new , 什么时候set 到 account 对象里边？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443848,"discussion_content":"参考网络上单例的实现，有很多方式\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552997895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77755,"user_name":"RedStar","can_delete":false,"product_type":"c1","uid":1318186,"ip_address":"","ucode":"19FB2220CA8859","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/nSsRjJXH3msYEZUazkB7hXHWZpXUZH1ZFDhht8KDFO26Jfpqibjm6OdzEDwqplSz5Y5NGkSicl6MzEicZicStNy5AA/132","comment_is_top":false,"comment_ctime":1552993756,"is_pvip":false,"replies":[{"id":"28500","content":"        final Account a = new Account(200);<br>        final Account b = new Account(200);<br><br>        Thread th1 = new Thread(()-&gt;{<br>            while (true)<br>                a.transfer(b, 100);<br>        }, &quot;T1&quot;);<br>        Thread th2 = new Thread(()-&gt;{<br>            while (true)<br>                b.transfer(a, 100);<br>        }, &quot;T2&quot;);<br><br>        th1.start();<br>        th2.start();<br>        th1.join();<br>        th2.join();","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553092037,"ip_address":"","comment_id":77755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552993756","product_id":100023901,"comment_content":"老师，下面死锁的测试代码能不能贴出来呢？想做测试不知道怎么模拟...<br>public class Account {<br>\tprivate int balance = 200;<br>\tpublic void transfer(Account target, int amt) {<br>\t\tsynchronized (this) {<br>\t\t\tsynchronized (target) {<br>\t\t\t\tif(this.balance &gt; amt) {<br>\t\t\t\t\tthis.balance -= amt;<br>\t\t\t\t\ttarget.balance += amt;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\tpublic int getBalance() {<br>\t\treturn balance;<br>\t}<br>}","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443838,"discussion_content":"        final Account a = new Account(200);\n        final Account b = new Account(200);\n\n        Thread th1 = new Thread(()-&amp;gt;{\n            while (true)\n                a.transfer(b, 100);\n        }, &amp;quot;T1&amp;quot;);\n        Thread th2 = new Thread(()-&amp;gt;{\n            while (true)\n                b.transfer(a, 100);\n        }, &amp;quot;T2&amp;quot;);\n\n        th1.start();\n        th2.start();\n        th1.join();\n        th2.join();","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553092037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77111,"user_name":"alias cd=rm -rf","can_delete":false,"product_type":"c1","uid":1318325,"ip_address":"","ucode":"E7B27D76305B75","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/b5/971261fd.jpg","comment_is_top":false,"comment_ctime":1552835876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552835876","product_id":100023901,"comment_content":"因为actr.apply(this, target)只会阻塞调用this.transfer的线程。而synchronized锁了Account.class相关的操作都会变成串行。","like_count":0},{"had_liked":false,"id":76611,"user_name":"Enterprise","can_delete":false,"product_type":"c1","uid":1443784,"ip_address":"","ucode":"FCDD57F7F8CC8E","user_header":"https://static001.geekbang.org/account/avatar/00/16/07/c8/14945a9e.jpg","comment_is_top":false,"comment_ctime":1552642996,"is_pvip":false,"replies":[{"id":"27941","content":"在if下面sleep一段时间看看<br><br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552651727,"ip_address":"","comment_id":76611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552642996","product_id":100023901,"comment_content":"我试了一下直接给this加锁，跑了很多遍始终是100 200 300。是不是写的有点儿问题，始终没有出现bug的情况，求答疑<br>         public static void main(String[] args) throws InterruptedException {<br>\t\tAccountStupidLock accountStupidLock = new AccountStupidLock();<br>\t\tAccountStupidLock accountStupidLock1 = new AccountStupidLock();<br>\t\tAccountStupidLock accountStupidLock2 =new AccountStupidLock();<br>\t\tThread thread1 = new Thread(() -&gt; {<br>\t\t\taccountStupidLock.transfer(accountStupidLock1,100);<br>\t\t});<br>\t\tThread thread2=new Thread(()-&gt;{<br>\t\t\taccountStupidLock1.transfer(accountStupidLock2,100);<br>\t\t});<br>\t\tthread2.start();<br>\t\tthread1.start();<br>\t\tthread1.join();<br>\t\tthread2.join();<br>\t\tSystem.out.println(accountStupidLock.getBalance());<br>\t\tSystem.out.println(accountStupidLock1.getBalance());<br>\t\tSystem.out.println(accountStupidLock2.getBalance());<br>\t}<br>class AccountStupidLock {<br><br>\tprivate int balance=200;<br><br>\tpublic int getBalance(){<br>\t\treturn balance;<br>\t}<br><br>\t&#47;&#47; 转账<br>\tsynchronized void transfer(AccountStupidLock target, int amt) {<br>\t\tif (this.balance &gt; amt) {<br>\t\t\tthis.balance -= amt;<br>\t\t\ttarget.balance += amt;<br>\t\t}<br>\t}<br>","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443377,"discussion_content":"在if下面sleep一段时间看看\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552651727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76581,"user_name":"HeroKojima","can_delete":false,"product_type":"c1","uid":1242568,"ip_address":"","ucode":"BA267EE3921E8B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLYBHUSKR9LTS7iaLbbO0pzbmR997SHfSZf7qbuEUhyM9hlvjh5QwnRFlww296XkqVZLdibWcvDEM3A/132","comment_is_top":false,"comment_ctime":1552635385,"is_pvip":false,"replies":[{"id":"27938","content":"会的<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552651417,"ip_address":"","comment_id":76581,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552635385","product_id":100023901,"comment_content":"在破坏占用且等待条件中，保证Allocator为单例与上一节中传入同一个对象作为锁是不是一样的？是不是也会遇到不同工程下有多个Allocator的情况？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443361,"discussion_content":"会的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552651417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76552,"user_name":"kaizhi","can_delete":false,"product_type":"c1","uid":1257663,"ip_address":"","ucode":"EBD8CDA27DC521","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/bf/c635b6b1.jpg","comment_is_top":false,"comment_ctime":1552631685,"is_pvip":false,"replies":[{"id":"27937","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552651377,"ip_address":"","comment_id":76552,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552631685","product_id":100023901,"comment_content":"感觉嘟嘟科技研发部所说的死锁其实不会发生，因为actr.apply执行完成后并不会释放两个资源，两个资源的释放是在actr.free中通过remove完成的，而不是synctorized执行完就释放这两个资源了。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443350,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552651377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76382,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1552580573,"is_pvip":false,"replies":[{"id":"27885","content":"理论上，如果两个线程优先级相同，操作系统能保证他们机会均等","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552623617,"ip_address":"","comment_id":76382,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1552580573","product_id":100023901,"comment_content":"关于课后问题就不在各位大神的回复之后赘述了。<br>我想到一种可能，如果apply（a，b）成功之后的转账操作需要10分钟，而下个请求是apply（b，c），那么apply（b，c）在这10分钟一定会失败且不断尝试。如果这时一个apply（d，e）过来了，但由于运气不好apply（b，c）在出临界区后总能再次得到allocator的锁，一直占据allocator的锁，那么apply（d，e）岂不是也会因为一直拿不到allocator的锁一直失败并尝试？即使看上去apply（a，b）和apply（d，e）可以并行。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443282,"discussion_content":"理论上，如果两个线程优先级相同，操作系统能保证他们机会均等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552623617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","nickname":"绅士","note":"","ucode":"5B58E5A958F489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3946,"discussion_content":"a转b,b转a的问题：第一个线程执行a转b，第二个线程执行b转a，第一，第二个线程同时到达transfer方法进行转账\n的时候，actr是单例的，假如第一个线程先执行，进入apply的方法，第一次就会返回true,然后进入try的方法，\n 这里有一个疑问？第二个线程进入apply的方法的时候，als这个数组里面是null的还是已经有了a和b两个对象了\n代码有一个归还资源的操作，意思是，线程一不执行完，资源是不会归还的，也就是说线程二，到达apply的方法后\n 会返回true,那线程二进入try岂不是又会造成死锁\n希望帮小白指正，感谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564999500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1361746,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c7/52/c5adf218.jpg","nickname":"喜欢地球的阿培同学","note":"","ucode":"5F97037585F857","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1583859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","nickname":"绅士","note":"","ucode":"5B58E5A958F489","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91280,"discussion_content":"apply()方法有锁，只有A线程执行完转账过后，才会执行finally中的actr.free(this, target)方法，这时B线程执行apply()才会返回true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576824210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3946,"ip_address":""},"score":91280,"extra":""}]}]},{"had_liked":false,"id":76109,"user_name":"shangyu","can_delete":false,"product_type":"c1","uid":1011389,"ip_address":"","ucode":"13A26E53508D75","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/bd/b83ad32d.jpg","comment_is_top":false,"comment_ctime":1552532170,"is_pvip":true,"replies":[{"id":"27738","content":"你厉害👍<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552537451,"ip_address":"","comment_id":76109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552532170","product_id":100023901,"comment_content":"同样，现实世界里的问题 ，也可以参考软件世界里的解决思路","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443182,"discussion_content":"你厉害👍\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552537451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76088,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1552529819,"is_pvip":false,"replies":[{"id":"27797","content":"是的，要看具体场景","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552567094,"ip_address":"","comment_id":76088,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552529819","product_id":100023901,"comment_content":"我觉得while(!actr.apply(this, target));和synchronized(Account.class)也使用中，Account只有一个转账操作其实两者差不多。但是如果Account中还有修改密码，查询余额等也需要加锁的操作，那就不一样了。加锁Account看似简单易懂也能保证安全，但是效率不敢恭维你来个相关操作我就全给你锁上，而前者转账对应转账的操作，修改密码对应修改密码的操作，看余额对应余额操作彼此独立，不用出现A操作等待B操作完场的这种状况。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443173,"discussion_content":"是的，要看具体场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552567094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75958,"user_name":"嘎子","can_delete":false,"product_type":"c1","uid":1273348,"ip_address":"","ucode":"E6FB6E97710C89","user_header":"https://static001.geekbang.org/account/avatar/00/13/6e/04/94677062.jpg","comment_is_top":false,"comment_ctime":1552498528,"is_pvip":false,"replies":[{"id":"27681","content":"极客时间的同学用ppt画的<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552523905,"ip_address":"","comment_id":75958,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552498528","product_id":100023901,"comment_content":"想问一下老师，用的是什么做图神器？又好看又清晰！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443105,"discussion_content":"极客时间的同学用ppt画的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552523905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75914,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1552491222,"is_pvip":false,"replies":[{"id":"27732","content":"其他同学说的是apply里也有一把锁，那把锁所有转账都要去竞争<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552536567,"ip_address":"","comment_id":75914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552491222","product_id":100023901,"comment_content":"在并行执行 A-&gt;B B-&gt;C 的转账过程中，A-&gt;B的转账过程，会在while(!actr.apply(this, target)); 这个循环中，阻塞B-&gt;C的转账线程。<br>然而在并行执行 A-&gt;B C-&gt;D的转账过程中，是不会相互阻塞的。所谓的锁了所有账户的说法，我不是很理解。<br><br>反观 synchronized(Account.class)， 不仅在 A-&gt;B C-&gt;D的转账过程中不能并行。甚至会串行其他需要获得Account.class这个锁的所有操作。例如查看余额。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443087,"discussion_content":"其他同学说的是apply里也有一把锁，那把锁所有转账都要去竞争\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552536567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75642,"user_name":"鱼客","can_delete":false,"product_type":"c1","uid":1070928,"ip_address":"","ucode":"5233FF41D88638","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/50/82097d59.jpg","comment_is_top":false,"comment_ctime":1552442750,"is_pvip":false,"replies":[{"id":"27606","content":"一旦进步等待队列，还有机会执行wait吗？","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552454958,"ip_address":"","comment_id":75642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552442750","product_id":100023901,"comment_content":"看了下一章 对这一章的synchronize不能主动释放资源表示不解 难道wait不是主动释放资源吗？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442970,"discussion_content":"一旦进步等待队列，还有机会执行wait吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552454958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75631,"user_name":"k2b_dll","can_delete":false,"product_type":"c1","uid":1391618,"ip_address":"","ucode":"0E4FD51E2039E5","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/02/d9a8c8ce.jpg","comment_is_top":false,"comment_ctime":1552441753,"is_pvip":false,"replies":[{"id":"27635","content":"再想想为什么会死锁吧，就是文中的例子，读懂为什么会死锁就知道答案了<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552479013,"ip_address":"","comment_id":75631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552441753","product_id":100023901,"comment_content":"破坏循环条件那个解决方案里， account里的id,有什么作用呢？ 按顺序加锁 跟原来的锁两次有什么区别呢？  ","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442966,"discussion_content":"再想想为什么会死锁吧，就是文中的例子，读懂为什么会死锁就知道答案了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552479013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75375,"user_name":"机遇号","can_delete":false,"product_type":"c1","uid":1105053,"ip_address":"","ucode":"A2940DE77BCAEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/9d/e20b37d7.jpg","comment_is_top":false,"comment_ctime":1552384396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552384396","product_id":100023901,"comment_content":"我按照你写的代码while(actr.apply(this, target));<br>编译器报错","like_count":0},{"had_liked":false,"id":75371,"user_name":"机遇号","can_delete":false,"product_type":"c1","uid":1105053,"ip_address":"","ucode":"A2940DE77BCAEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/9d/e20b37d7.jpg","comment_is_top":false,"comment_ctime":1552384154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552384154","product_id":100023901,"comment_content":"学习中","like_count":0},{"had_liked":false,"id":75216,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1552365607,"is_pvip":false,"replies":[{"id":"27464","content":"这才是科学家","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552393108,"ip_address":"","comment_id":75216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552365607","product_id":100023901,"comment_content":"Coffman总结的很到位😄","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442825,"discussion_content":"这才是科学家","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552393108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75201,"user_name":"Smile","can_delete":false,"product_type":"c1","uid":1125189,"ip_address":"","ucode":"0617032294DC43","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/45/e8f64725.jpg","comment_is_top":false,"comment_ctime":1552362848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552362848","product_id":100023901,"comment_content":"之前没有想到通过次序来重新调整获取锁的次序，从而解决循坏等待问题，学到了","like_count":0},{"had_liked":false,"id":75058,"user_name":"Sunny_Lu","can_delete":false,"product_type":"c1","uid":1453000,"ip_address":"","ucode":"4327DE41D7DB28","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/c8/61eeae65.jpg","comment_is_top":false,"comment_ctime":1552352686,"is_pvip":false,"replies":[{"id":"27456","content":"不是单例，但是同一个账户只有一个实例<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552390211,"ip_address":"","comment_id":75058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552352686","product_id":100023901,"comment_content":"老师你好，我有个疑惑，Account实例难道永远是单例的么？现实中往往针对转账操作会new 一个线程私有的Account对象吧？那这样锁是无效的，还是说老师您说的场景就是要确保项目一启动，每一个Account都只能是单例的，可能理解有误，请老师指证！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442790,"discussion_content":"不是单例，但是同一个账户只有一个实例\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552390211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74762,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":1125474,"ip_address":"","ucode":"01437C4021E82E","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/62/b5fcbf2b.jpg","comment_is_top":false,"comment_ctime":1552293408,"is_pvip":false,"replies":[{"id":"27267","content":"持有的是同一个，代码注释里提了，actr是单例，创建单例的代码还是不写的好，和这节的内容没关系","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552305889,"ip_address":"","comment_id":74762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552293408","product_id":100023901,"comment_content":"应该不能，有一行没看明白<br>Account类中字段Allocator actr在哪里实例化的，这应该关系到申请资源是否安全吧。<br><br>&#47; 转账<br>  void transfer(Account target, int amt){<br>    &#47;&#47; 一次性申请转出账户和转入账户，直到成功<br>    while(!actr.apply(this, target))<br>      ；<br>  ？？？？？？  关键这里我没看明白 Allocator actr 在哪里实例化的，线程T1和T2，持有的是同一个Allocator实例嘛？？<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442672,"discussion_content":"持有的是同一个，代码注释里提了，actr是单例，创建单例的代码还是不写的好，和这节的内容没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552305889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74677,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":1125474,"ip_address":"","ucode":"01437C4021E82E","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/62/b5fcbf2b.jpg","comment_is_top":false,"comment_ctime":1552279314,"is_pvip":false,"replies":[{"id":"27245","content":"申请完ab，还能申请ba吗？<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552284532,"ip_address":"","comment_id":74677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552279314","product_id":100023901,"comment_content":"代码31-35步不是原子的啊，31步之后，获取到两个资源的als集合可被其它线程操作啊。<br>最开始的T1和T2线程分别AB对象死锁没有解决，只是降低了可性。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442648,"discussion_content":"申请完ab，还能申请ba吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552284532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74617,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":1125474,"ip_address":"","ucode":"01437C4021E82E","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/62/b5fcbf2b.jpg","comment_is_top":false,"comment_ctime":1552267964,"is_pvip":false,"replies":[{"id":"27239","content":"举个例子？","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552277699,"ip_address":"","comment_id":74617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552267964","product_id":100023901,"comment_content":"破坏占用且等待示例代码我觉得有点儿问题，Allocator和account里都是对象级别锁，accocator在return之后释放了allocator对象锁，别的线程可以继续获取资源。account依然会有死锁可能。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442621,"discussion_content":"举个例子？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552277699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74613,"user_name":"书策稠浊","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1552267660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552267660","product_id":100023901,"comment_content":"思考题，.class的方式性能更差，把所有不相关的操作也锁住了。","like_count":0},{"had_liked":false,"id":74363,"user_name":"Php test","can_delete":false,"product_type":"c1","uid":1107151,"ip_address":"","ucode":"895C6B484FCB53","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIS0nk3C1ibMgufXryCzYkrL5bpO25fXPqbSqodGibZqOvbY8m5HEZ8LG4gTDmPKsIj3uK9Z3ibiceF1g/132","comment_is_top":false,"comment_ctime":1552202764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552202764","product_id":100023901,"comment_content":"循环获取锁，如果线程少则响应快，如果线程多则大量线程消耗性能。","like_count":0},{"had_liked":false,"id":74345,"user_name":"天涯煮酒","can_delete":false,"product_type":"c1","uid":1241127,"ip_address":"","ucode":"EF9516EC878E4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/27/8b72141c.jpg","comment_is_top":false,"comment_ctime":1552196063,"is_pvip":false,"replies":[{"id":"27179","content":"有道理！！！！","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552200884,"ip_address":"","comment_id":74345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552196063","product_id":100023901,"comment_content":"案例中为啥不把als和apply(),free()都设为static呢？感觉作用是一样的，代码简洁些","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442542,"discussion_content":"有道理！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552200884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74341,"user_name":"包子","can_delete":false,"product_type":"c1","uid":1089345,"ip_address":"","ucode":"6CC4EBB8CD3924","user_header":"https://static001.geekbang.org/account/avatar/00/10/9f/41/82306dfe.jpg","comment_is_top":false,"comment_ctime":1552195389,"is_pvip":false,"replies":[{"id":"27177","content":"和cas还不一样，apply里面还是有synchronized的。也就是说apply还是会阻塞的。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552200801,"ip_address":"","comment_id":74341,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552195389","product_id":100023901,"comment_content":"老师，课后题，这种方式避免了线程反复切换，有效减少内存切换的开销。就像cas一样。<br>是这样吗","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442539,"discussion_content":"和cas还不一样，apply里面还是有synchronized的。也就是说apply还是会阻塞的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552200801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74329,"user_name":"罗","can_delete":false,"product_type":"c1","uid":1259157,"ip_address":"","ucode":"C71E4413130A66","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/95/a5358127.jpg","comment_is_top":false,"comment_ctime":1552190572,"is_pvip":false,"replies":[{"id":"27176","content":"这个例子里可以，因为除此之外没有其他路径能够访问到this。如果还有别的方法，例如取款操作，那就不可以了。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552200728,"ip_address":"","comment_id":74329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552190572","product_id":100023901,"comment_content":"在第一种方式中：<br>class Account {<br>    ... ... <br>    while(!actr.apply(this, target))<br>      ；<br>    try{<br>      &#47;&#47; 锁定转出账户<br>      synchronized(this){              <br>        &#47;&#47; 锁定转入账户<br>        synchronized(target){    <br>\t\t<br>｝<br><br>我们使用while循环获取锁，后面的 synchronized(this)与synchronized(target)是不是就可以去掉了呢? ","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442534,"discussion_content":"这个例子里可以，因为除此之外没有其他路径能够访问到this。如果还有别的方法，例如取款操作，那就不可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552200728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74285,"user_name":"随风而逝","can_delete":false,"product_type":"c1","uid":1447169,"ip_address":"","ucode":"4E4D46905697AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/01/927d96e5.jpg","comment_is_top":false,"comment_ctime":1552178043,"is_pvip":false,"replies":[{"id":"27167","content":"这种情况下，A转B能成功，所以最终会释放A锁，之后C转A就能成功了。所以不会死锁。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552190309,"ip_address":"","comment_id":74285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552178043","product_id":100023901,"comment_content":"老师，现在的嵌套锁方案，对于A转B，C转A的情况是不是也可能被锁住了？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442510,"discussion_content":"这种情况下，A转B能成功，所以最终会释放A锁，之后C转A就能成功了。所以不会死锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552190309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74281,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1552177653,"is_pvip":false,"replies":[{"id":"27174","content":"范围不同，不过性能是否有优势，要看场景。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552191098,"ip_address":"","comment_id":74281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552177653","product_id":100023901,"comment_content":"优势是有的，直接锁class文件，会阻塞所有的同步方法。使用一个新对象来实现同步，仅仅锁住的账户转账。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442508,"discussion_content":"范围不同，不过性能是否有优势，要看场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552191098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74164,"user_name":"波波","can_delete":false,"product_type":"c1","uid":1155827,"ip_address":"","ucode":"4344D9F4486D42","user_header":"https://static001.geekbang.org/account/avatar/00/11/a2/f3/aa504fa6.jpg","comment_is_top":false,"comment_ctime":1552123028,"is_pvip":false,"replies":[{"id":"27127","content":"基本都会用伪码，原因是字数更少。手机屏幕太小，换行后很难看清楚。至于其他的我尽力吧。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552137814,"ip_address":"","comment_id":74164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552123028","product_id":100023901,"comment_content":"老师提供的思路不错，但是贴出来的代码，不够严谨，首先单例初始化没体现出来，然后循环判断错误。建议老师以后贴出来的代码，可以先执行，确保没问题后再贴出来。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442475,"discussion_content":"基本都会用伪码，原因是字数更少。手机屏幕太小，换行后很难看清楚。至于其他的我尽力吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552137814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74093,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1237471,"ip_address":"","ucode":"5F6D82F118C6F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/df/6e6a4c6b.jpg","comment_is_top":false,"comment_ctime":1552102406,"is_pvip":false,"replies":[{"id":"27104","content":"你也发现了一个大bug，感谢感谢，已经修复了。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113953,"ip_address":"","comment_id":74093,"utype":1}],"discussion_count":0,"race_medal":0,"score":"1552102406","product_id":100023901,"comment_content":"while(actr.apply(this, target))<br><br>这里是等待守护条件成立，不成立循环尝试，apply成功后应该是退出，执行后续操作<br>所以是不是应该改成<br><br>while( !actr.apply(this, target) )","like_count":0},{"had_liked":false,"id":74085,"user_name":"花蛋壳","can_delete":false,"product_type":"c1","uid":1111006,"ip_address":"","ucode":"917BB219120BD2","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/de/c6509355.jpg","comment_is_top":false,"comment_ctime":1552101121,"is_pvip":false,"replies":[{"id":"27100","content":"我已经很努力看了，还是没看懂，最好是代码化一下","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113758,"ip_address":"","comment_id":74085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552101121","product_id":100023901,"comment_content":"如果alloctor单例对象只用在转账业务中，那么锁的范围肯定没有锁住account.class范围大！我这里有一个业务上的疑问，如果想让同一个用户的账户操作上锁，不同用户之间转账业务不用互斥，这该如何操作？假设每次操作请求都是一个新的account对象，如何确保两个不同线程对用户a账户的操作是互斥的，是不是只能限制同一个用户账户操作是同一个account对象？不知道我这个问题有没有表达清楚","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442433,"discussion_content":"我已经很努力看了，还是没看懂，最好是代码化一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552113758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74083,"user_name":"小彗星","can_delete":false,"product_type":"c1","uid":1423047,"ip_address":"","ucode":"86133944E8AEAC","user_header":"https://static001.geekbang.org/account/avatar/00/15/b6/c7/db31ecba.jpg","comment_is_top":false,"comment_ctime":1552100917,"is_pvip":false,"replies":[{"id":"27099","content":"是有点像，不过还不是cas","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113549,"ip_address":"","comment_id":74083,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552100917","product_id":100023901,"comment_content":"有点像自旋+cas","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442432,"discussion_content":"是有点像，不过还不是cas","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552113549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74074,"user_name":"小黄","can_delete":false,"product_type":"c1","uid":1049839,"ip_address":"","ucode":"519BF8191D3A6B","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/ef/fea0fdbd.jpg","comment_is_top":false,"comment_ctime":1552098243,"is_pvip":false,"replies":[{"id":"27098","content":"是的，我也觉得要看应用场景。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113530,"ip_address":"","comment_id":74074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552098243","product_id":100023901,"comment_content":"我分析循环不一定有优势，看应用场景了。虽然apply, free并不耗时，但仍是同步方法。<br>如果一个线程正在请求，势必其他线程会进入阻塞状态，而该线程不会因为循环会继续请求，所以不公平<br>","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442426,"discussion_content":"是的，我也觉得要看应用场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552113530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74070,"user_name":"WolvesLeader","can_delete":false,"product_type":"c1","uid":1103839,"ip_address":"","ucode":"33610E19CA2E96","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/df/fc0a6709.jpg","comment_is_top":false,"comment_ctime":1552097921,"is_pvip":false,"replies":[{"id":"27064","content":"java的线程dump能看到是不是死锁了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552104103,"ip_address":"","comment_id":74070,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552097921","product_id":100023901,"comment_content":"我的意思是，我们怎能找到发生死锁的地方，怎么检测有没有死锁","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442423,"discussion_content":"java的线程dump能看到是不是死锁了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552104103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74066,"user_name":"正在加载更多......","can_delete":false,"product_type":"c1","uid":1321839,"ip_address":"","ucode":"06AF4EA0786D60","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/6f/4b307aad.jpg","comment_is_top":false,"comment_ctime":1552097334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552097334","product_id":100023901,"comment_content":"@捞鱼的搬砖奇  while死循环的 actr.apply(this, target) 的这个方法还获取了  Alloctor  对象的锁吧？与获取Account 对象的锁没有什么区别吧","like_count":0},{"had_liked":false,"id":74061,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1552096422,"is_pvip":false,"replies":[{"id":"27066","content":"后面会讲<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552104203,"ip_address":"","comment_id":74061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552096422","product_id":100023901,"comment_content":"划重点 ， 解决死锁的三个方向点 ， 又get到了新姿势 😁<br><br>另外，老师后面会不会讲到线程的生命周期和线程间通信的相关知识","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442417,"discussion_content":"后面会讲\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552104203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74047,"user_name":"罗洲","can_delete":false,"product_type":"c1","uid":1263417,"ip_address":"","ucode":"68133E38A25C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/39/0ce1aa62.jpg","comment_is_top":false,"comment_ctime":1552093258,"is_pvip":false,"replies":[{"id":"27049","content":"严重同意<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552096826,"ip_address":"","comment_id":74047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552093258","product_id":100023901,"comment_content":"性能优势取决于操作范围，如果account 对象还有其他操作，那么对于while 循环只会锁住转账，而account.class是锁住整个对象，这里会涉及锁的范围不同，如果忽略范围，我觉得在性能优势不大","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442406,"discussion_content":"严重同意\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552096826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74038,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1552091825,"is_pvip":false,"replies":[{"id":"27108","content":"apply里面也有一个锁，所以也不是仅仅锁了当前的两个账户。性能是否有优势，要看具体场景。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114336,"ip_address":"","comment_id":74038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552091825","product_id":100023901,"comment_content":"有优势，因为用Acount.class锁定的是全部账户资源，而现在这个做法只是锁住了两个当前转账的账户对象，期待老师的解释！期待加快更新！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442401,"discussion_content":"apply里面也有一个锁，所以也不是仅仅锁了当前的两个账户。性能是否有优势，要看具体场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74034,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1552090959,"is_pvip":false,"replies":[{"id":"27110","content":"有些场景，也能快。例如转账操作很耗时的时候。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552114426,"ip_address":"","comment_id":74034,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552090959","product_id":100023901,"comment_content":"对于转账操作来说，是没有区别的，因为申请资源是单例对象，所有转账业务都是串行执行的。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442398,"discussion_content":"有些场景，也能快。例如转账操作很耗时的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552114426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74031,"user_name":"李","can_delete":false,"product_type":"c1","uid":1119312,"ip_address":"","ucode":"5C0FAA211F2E26","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","comment_is_top":false,"comment_ctime":1552089704,"is_pvip":true,"replies":[{"id":"27097","content":"有点自旋的意思。但是apply里面有锁，所以还不是自旋。能想到apply的耗时很好，无论什么情况下，同步代码块里的代码都要尽可能快。","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1552113349,"ip_address":"","comment_id":74031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552089704","product_id":100023901,"comment_content":"如果申请耗时比较长，性能就差。如果耗时短，性能就有优势。感觉有点像自旋锁。不晓得得对不对","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442396,"discussion_content":"有点自旋的意思。但是apply里面有锁，所以还不是自旋。能想到apply的耗时很好，无论什么情况下，同步代码块里的代码都要尽可能快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552113349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}