{"id":740906,"title":"第 2 章 HTTP/1.0 的语义：浏览器基本功能的背后(1)","content":"\n    <p>第 1 章我们介绍了 HTTP 的 4 个基本元素。</p>\n    <blockquote>\n        <ul>\n            <li>方法和路径</li>\n            <li>首部</li>\n            <li>主体</li>\n            <li>状态码</li>\n        </ul>\n    </blockquote>\n    <p>Web 浏览器通过将数据放到容器里发送，或者从通过服务器的响应发来的容器中取出数据来实现与服务器的交互。随着 Web\n        的发展，浏览器中新增了各种功能，尤其是首部结构中实现了许多功能。本章我们将看一下浏览器是如何使用这些基本元素来实现基本功能的。与第 1 章一样，本章我们也会根据需要使用 curl 命令，了解浏览器的运行原理。</p>\n    <h2 id=\"nav_point_43\">2.1　使用 x-www-form-urlencoded 发送表单</h2>\n    <p>首先，我们来深入了解一下第 1 章未详细介绍的主体的相关知识。第 1 章介绍了 HTTP/1.0 中请求和资源一一对应的主体的接收。虽然也可以使用 JavaScript API\n        来发送数据，不过在本节和下一节中，笔者将介绍使用表单的发送方法。</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　另外，HTTP/1.1\n            中有一种叫作范围请求的特殊的请求方法。我们将在介绍 HTTP/1.1 的章节中对此进行详细说明。</p>\n    </blockquote>\n    <p>使用表单进行 <code>POST</code> 的方式有很多种。我们先来看一下最简单的发送方式。</p>\n    <pre class=\"code-rows\"><code>&lt;form method=\"POST\"&gt;\n    &lt;input name=\"title\"&gt;\n    &lt;input name=\"author\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code></pre>\n    <p>这是很常见的 Web 表单。<code>method</code> 中设置了 <code>POST</code>。我们也可以使用下面的 curl 命令以和表单相同的形式发送数据。</p>\n    <pre class=\"code-rows\"><code>$ curl --http1.0 -d title=\"The Art of Community\" -d author=\"Jono Bacon\" http://\nlocalhost:18888</code></pre>\n    <p>我们可以在 curl 命令中使用 <code>-d</code> 选项设置通过表单发送的数据。如果指定了 <code>-d</code> 选项，curl 命令就可以像浏览器一样设置首部\n        <code>Content-Type:application/x-www-form-urlencoded</code>。这时，主体就会变成下面这样的字符串，其中键和值用等号拼接，各项用 <code>&amp;</code>\n        拼接。</p><!-- [[[read_end]]] -->\n    <pre class=\"code-rows\"><code>title=The Art of Community&amp;author=Jono Bacon</code></pre>\n    <p>不过，该命令生成的主体与通过浏览器的 Web 表单发送的内容之间实际存在一些差别。在使用 <code>-d</code> 发送数据时，指定的字符串会直接拼接。因为即使存在分隔符 <code>&amp;</code> 和\n        <code>=</code>，也是直接拼接，所以读取主体的一方无法正确还原数据集。例如，当主体中加上 <em>Head First PHP &amp; MySQL</em> 这一书名时，读取主体的一方就很难弄清在哪里分隔了。\n    </p>\n    <pre class=\"code-rows\"><code>title=Head First PHP &amp; MySQL&amp;author=Lynn Beighley, Michael Morrison</code></pre>\n    <p>浏览器根据 RFC 1866 中定义的转换格式对字符串进行转换。该格式要求除字母、数值、星号、连字符、点号和下划线这 6 种字符以外，其他字符都进行转义。由于空格会变为加号，所以主体实际上会变成下面这样。</p>\n    <pre class=\"code-rows\"><code>title=Head+First+PHP+%26+MySQL&amp;author=Lynn+Beighley%2C+Michael+Morrison</code></pre>\n    <p>按照这种方式转换后，名称与值中包含的 <code>=</code> 和 <code>&amp;</code> 会分别转换为 <code>%3D</code> 和\n        <code>%26</code>。作为分隔符使用的字符未发生转换，因此读取主体的一方可以正确解析。curl 命令中还存在具备类似功能的 <code>--data-urlencode</code>。使用该选项替换\n        <code>-d</code> 就可以按照 RFC 3986 中定义的方法进行转义了 <span class=\"comment-number\">1</span>。该方法与 RFC 1866\n        中定义的方法在处理的字符种类方面存在一些差异。另外，RFC 3986 中定义的方法规定空格转换为 <code>%20</code>，而不是 <code>+</code>。</p>\n    \n    <p>操作结果如下所示。</p>\n    <pre class=\"code-rows\"><code>$ curl --http1.0 --data-urlencode title=\"Head First PHP &amp; MySQL\" --data-urlencode\nauthor=\"Lynn Beighley, Michael Morrison\" http://localhost:18888\n\ntitle=Head%20First%20PHP%20%26%20MySQL&amp;author=Lynn%20Beighley%2C%20Michael%20\nMorrison</code></pre>\n    <p>无论哪一种转换方法，都可以通过相同的算法还原，因此不会出现什么问题。程序员平时也会把这些转换方法统称为 <strong>URL 转义</strong>。RFC 3986 中将 URL 的字符编码方法称为 <strong>URL\n            编码</strong>。</p>\n    <p>RFC 1866 中规定，当 Web 表单的方法设为 <code>method=\"GET\"</code> 时，赋给 URL 的不是主体，而是查询。格式与第 1 章中介绍的 HTTP/0.9 的查询功能中的格式相同。</p>\n    <h2 id=\"nav_point_44\">2.2　使用 multipart/form-data 发送文件</h2>\n    <p>在 HTML 的表单中，我们可以选择 <code>multipart/form-data</code>\n        这一编码格式。该格式比前面介绍的格式复杂，不过可以用来发送文件。<code>multipart/form-data</code> 是在 RFC 1867 中定义的。</p>\n    <pre class=\"code-rows\"><code>&lt;form action=\"POST\" enctype=\"multipart/form-data\"&gt;\n&lt;/form&gt;</code></pre>\n    <p>HTTP 响应一般每次只返回一个文件，因此在发现空行后，按 <code>Content-Type</code> 中指定的字节数进行读取，就可以获取全部数据。我们也不必关心数据之间怎么分隔。在使用\n        <code>multipart/form-data</code> 的情况下，一次请求可以发送多个文件，因此接收端必须对各个文件进行区分。Google Chrome 使用\n        <code>multipart/form-data</code> 输出的首部如下所示。虽然 <code>Content-Type</code> 确实为\n        <code>multipart/form-data</code>，但它还有另外一个属性——边界字符串。各个浏览器的实现会采用自己的格式随机创建边界字符串。</p>\n    <pre&#10; class=\"code-rows\"><code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryyOYfbccgoID172j7</code>\n    <p>主体如下所示。可以发现，主体被分隔符分割成两部分。另外，末尾是分隔符 +“<code>--</code>”的字符串行。每一部分的结构都类似于 HTTP，即“首部 + 空行 + 内容”。首部包含\n        <code>Content-Disposition</code>。英文 Disposition 是“性格”的意思，大致与 <code>Content-Type</code> 类似。这里声明为带项目名的表单数据。</p>\n    <pre class=\"code-rows\"><code>------WebKitFormBoundaryyOYfbccgoID172j7\nContent-Disposition: form-data; name=\"title\"\n\nThe Art of Community\n------WebKitFormBoundaryyOYfbccgoID172j7\n\nContent-Disposition: form-data; name=\"author\"\n\nJono Bacon\n------WebKitFormBoundaryyOYfbccgoID172j7--</code></pre>\n    <p>仅看这些，<code>multipart/form-data</code> 与分隔符变复杂的 <code>x-www-form-urlencoded</code>\n        格式并无不同，但发送文件时就不一样了。我们试着添加一个常见的文件上传操作。</p>\n    <pre class=\"code-rows\"><code>&lt;input name=\"attachment-file\" type=\"file\"&gt;</code></pre>\n    <p>发送该表单后，结果如下所示。在使用 <code>x-www-form-urlencoded</code> 的情况下，名称与其内容信息一一对应。而在使用 <code>multipart/form-data</code>\n        的情况下，每个项目会分别持有添加的元信息作为标签。我们可以发现，在发送文件时，表单的字段名（<code>attachment-file</code>）、文件名（<code>test.txt</code>）、文件类型（<code>text/plain</code>）和文件内容这几项信息会发送过去。想发送文件，可\n        <code>enctype</code> 中并未指定 <code>multipart/form-data</code>，导致文件发送失败，想必有人经历过或听说过这样的事情吧。之所以会出现这种情况，是因为在使用\n        <code>x-www-form-urlencoded</code> 发送文件时，无法发送所有需要的信息，只是发送文件名而已 <span class=\"comment-number\">2</span>。</p>\n    \n    <pre class=\"code-rows\"><code>------WebKitFormBoundaryX139fhEFk4BdHACC\nContent-Disposition: form-data; name=\"attachment-file\"; filename=\"test.txt\"\nContent-Type: text/plain\n\nhello world\n\n------WebKitFormBoundaryX139fhEFk4BdHACC--</code></pre>\n    <p>采用 <code>multipart/form-data</code> 编码的文件也可以通过 curl 命令发送。</p>\n    <pre class=\"code-rows\"><code>$ curl --http1.0 -F title=\"The Art of Community\" -F author=\"Jono Bacon\" -F\nattachment-file=@test.txt http://localhost:18888</code></pre>\n    <p>只要把 <code>-d</code> 替换为 <code>-F</code>，curl 命令就与设置为 <code>enctype=\"multipart/form-data\"</code>\n        的表单的发送形式一样了。<code>-d</code> 与 <code>-F</code> 不可以同时使用。如果加上 <code>@</code> 指定文件名来发送文件，curl\n        命令便会读取并添加该文件的内容。我们也可以像下面这样手动设置发送的文件名和文件类型。<code>type</code> 和 <code>filename</code> 可以同时设置。</p>\n    <pre class=\"code-rows\"><code># 从 test.txt 获取文件内容。发送的文件名与本地文件名一样。类型是自动设置的\n$ curl --http1.0 -F attachment-file=@test.txt http://localhost:18888\n\n# 从 test.txt 获取文件内容。类型是手动设置的\n$ curl --http1.0 -F \"attachment-file=@test.txt;type=text/html\" http://\nlocalhost:18888\n\n# 从 test.txt 获取文件内容。文件名是手动设置的\n$ curl --http1.0 -F \"attachment-file=@test.txt;filename=sample.txt\" http://\nlocalhost:18888</code></pre>\n    <p><code>-d</code> 的 <code>x-www-form-urlencoded</code> 中也可以使用“<code>@ 文件名</code>”这种形式。这时不会发送文件名，而是将文件内容展开发送。如果想使用\n        <code>-F</code> 单独发送内容，可以使用 <code>-F \"attachment-file=&lt; 文件名 &gt;\"</code>。</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　<strong>表单的第三种编码格式：text/plain</strong></p>\n        <p>表单的 <code>enctype</code> 在不设置任何值时默认设置为 <code>www-form-urlencoded</code>，在发送文件的情况下则设置为\n            <code>multipart/form-data</code>。除了这两种编码格式之外，还可以使用\n            <code>text/plain</code>。大家可能不怎么使用这种编码格式。实际上，笔者也是在为了编写本书而重读 W3C 的规范时才第一次知道这种格式的。虽然它与\n            <code>www-form-urlencoded</code> 相近，但不进行转义，而是通过换行对值进行排列并发送。</p>\n        <pre class=\"code-rows\"><code>title=The Art of Community\nauthor=Jono Bacon</code></pre>\n        <p>使用 curl 命令无法传递通过换行隔开的多个参数。若要采用与此相同的形式进行发送，则需要事先准备一个与发送内容相同的文本文件，使用 <code>-d \"@ 文件名 \"</code> 选项进行发送。还需要设置\n            <code>-H \"Content-Type:text/plain\"</code>。笔者并未见过实际使用该编码格式的例子。当服务端的安全实现存在漏洞时，该编码格式可能会引发安全问题。</p>\n    </blockquote>\n    <p>&nbsp;</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　<strong>使用表单进行 POST 时的响应</strong>\n        </p>\n        <p>使用表单进行 <code>POST</code> 后，服务器会接收表单信息并进行处理。不管是论坛还是 SNS（Social Networking\n            Services，社交网络服务），用户在发送数据后，都会期待能显示反映该表单信息的页面。在这种情况下，服务器最好返回 <code>302 Found</code> 状态码，并跳转到显示发送结果的页面。</p>\n        <p>还有一种不进行重定向，直接使用 URL 返回新页面内容的方法。由于重定向时会进行很多次没有必要的通信，所以这种方法的响应也不比重定向的差，但该方法有两个缺点。</p>\n        <blockquote>\n            <ul>\n                <li class=\"第3级无序列表\">URL 是用于 <code>POST</code> 的 URL。因此，如果直接将该 URL 添加到书签，或将链接发送给他人，当打开链接时，页面就无法正常显示</li>\n                <li class=\"第3级无序列表\">如果重新加载浏览器，就会再次更新表单（浏览器会弹出确认对话框）</li>\n            </ul>\n        </blockquote>\n        <p>由于 URL 也是用户界面的重要元素之一，所以发送和显示最好明确分开。</p>\n    </blockquote>\n    <h2 id=\"nav_point_45\">2.3　使用表单进行重定向</h2>\n    <p>第 1 章介绍了使用 3 字头的状态码进行重定向的相关内容，不过这种方法存在一些限制。</p>\n    <blockquote>\n        <ul>\n            <li>正如笔者在第 1 章介绍 URL 时讲解的那样，因为 URL 最长不超过 2000 个字符，所以可以通过 <code>GET</code> 查询发送的数据有限</li>\n            <li>因为数据放在了 URL 中，所以要发送的内容可能会遗留在访问日志里</li>\n        </ul>\n    </blockquote>\n    <p>摆脱这些限制的一个方法是，使用 HTML 的表单进行重定向。如下所示，服务器将要发送给重定向目标的数据通过 <code>&lt;input type=\"hidden\"&gt;</code> 标签写入 HTML\n        并返回。表单的发送目标就是重定向目标。由于 HTML 中记载了加载后立即触发事件来发送表单，所以浏览器在读取该 HTML 后会立即跳转到重定向目标。</p>\n    <pre class=\"code-rows\"><code>HTTP/1.1 200 OK\nDate: 21 Jan 2004 07:00:49 GMT\nContent-Type: text/html; charset=iso-8859-1\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body onload=\"document.forms[0].submit()\"&gt;\n&lt;form action=\" 重定向目标\" method=\"post\"&gt;\n&lt;input type=\"hidden\" name=\"data\"\nvalue=\" 要发送的消息/&gt;\n&lt;input type=\"submit\" value=\"Continue\"/&gt;\n&lt;/form&gt;\n&lt;/body&gt;</code></pre>\n    <p>这种做法的优点是，即使使用 Internet Explorer，也不存在数据容量方面的限制。当然这种做法也存在一些缺点，比如页面有一瞬间会变为空白，另外，虽然会临时显示向下跳转的按钮，但如果 JavaScript\n        失效，就无法实现自动跳转。</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　该方法在第 5 章中介绍的 SAML 认证协议和 OpenID\n            Connect 等协议中作为规范使用。</p>\n    </blockquote>\n    <h2 id=\"nav_point_46\">2.4　内容协商</h2>\n    <p>由于服务器和客户端是分开开发和维护的，所以适合二者的格式和设置并不总是一致。为了优化通信方法，服务器和客户端在一个请求中共享彼此的最优设置，这种结构就是<strong>内容协商</strong>。内容协商中会使用首部，如表\n        2-1 所示。</p>\n    <p><strong>表 2-1　内容协商中使用的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>请求首部</p>\n                </th>\n                <th>\n                    <p>响应首部</p>\n                </th>\n                <th>\n                    <p>协商对象</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Accept</code></p>\n                </td>\n                <td>\n                    <p><code>Content-Type</code> 首部</p>\n                </td>\n                <td>\n                    <p>MIME 类型</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Language</code></p>\n                </td>\n                <td>\n                    <p><code>Content-Language</code> 首部 / HTML 标签</p>\n                </td>\n                <td>\n                    <p>显示语言</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Charset</code></p>\n                </td>\n                <td>\n                    <p><code>Content-Type</code> 首部</p>\n                </td>\n                <td>\n                    <p>字符集</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Encoding</code></p>\n                </td>\n                <td>\n                    <p><code>Content-Encoding</code> 首部</p>\n                </td>\n                <td>\n                    <p>主体压缩</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h3 id=\"nav_point_47\">2.4.1　确定文件类型</h3>\n    <pre&#10; class=\"code-rows\"><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</code>\n    <p>上述内容取自笔者计算机上的 Google Chrome 的请求首部。前半部分是 HTML 的相关内容，这里笔者来讲一下比较容易理解的图像部分（<code>image/webp</code>\n        及其后面的部分）。首先是用逗号隔开的各项。</p>\n    <blockquote>\n        <ul>\n            <li><code>image/webp</code></li>\n            <li><code>*/*;q=0.8</code></li>\n        </ul>\n    </blockquote>\n    <p><code>q</code> 称为品质因子，取值范围为 0~1，默认值为 1.0。该数值表示优先度。也就是说，Web 服务器如果支持 WebP（Google 推荐使用的图像格式，其文件大小是 PNG 文件大小的\n        80%），则需要向服务器发送 WebP，否则需要向服务器发送 PNG 等其他格式（优先度为 0.8）。</p>\n    <p>服务器按照请求要求的格式返回文件。具体来说，就是解析优先顺序，从最优先的格式开始依次查找支持的格式，如果有一致的格式，就采用该格式返回文件；如果没有一致的格式，就返回\n        <code>406 Not Acceptable</code> 错误。</p>\n    <h3 id=\"nav_point_48\">2.4.2　确定显示语言</h3>\n    <p>显示语言的确定也基本一样。设置为英语优先的 Google Chrome 会把下面的首部赋给各个请求。</p>\n    <pre class=\"code-rows\"><code>Accept-Language: en-US,en;q=0.8,ja;q=0.6</code></pre>\n    <p>请求按 <code>en-US</code>、<code>en</code>、<code>ja</code> 的优先顺序发送。虽然 <code>Content-Language</code>\n        首部被定义为储存语言信息的“容器”，但许多网站并没有使用该首部。我们经常看到下面这种在 HTML 标签中返回的页面。</p>\n    <pre class=\"code-rows\"><code>&lt;html lang=\"ja\"&gt;</code></pre>\n    <p>当不同语言显示的标签稍有不同时，只要使用 <code>Content-Language</code> 首部修改显示语言即可。当不同语言的内容稍有不同时（如翻译进度不同、商品种类或价格不同等），许多服务会在 URL\n        中加入语言或国家的名称，在初次访问时根据该首部的信息进行重定向。</p>\n    <h3 id=\"nav_point_49\">2.4.3　确定字符集</h3>\n    <p>在确定字符集时会发送如下所示的首部。</p>\n    <pre class=\"code-rows\"><code>Accept-Charset: UTF-8,Shift_JIS;q=0.7,*;q=0.3</code></pre>\n    <p>不过，所有的现代浏览器都不会发送 <code>Accept-Charset</code>。可能是因为浏览器内嵌了所有的字符集，所以没有必要提前协商了吧。响应内容的字符集会和 MIME 类型成对地存储在首部\n        <code>Content-Type</code> 中。</p>\n    <pre class=\"code-rows\"><code>Content-Type: text/html; charset=UTF-8</code></pre>\n    <p>在 HTML 中，字符集也可以记述在文档中，在 RFC 1866 的 HTML/2.0 中已经可以这样做了。由于很多浏览器会将 HTML 保存在本地重新显示，所以大多会同时使用上述两种方式。不过，如果开头的 1024\n        字节中没有记述下述内容，就无法确保会使用 <code>&lt;meta http-equiv&gt;</code> 标签。</p>\n    <pre class=\"code-rows\"><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;</code></pre>\n    <p>HTML 的 <code>&lt;meta http-equiv&gt;</code> 标签是一个“窗口”，用于将与 HTTP 首部相同的指示填充到文档内部并返回。从 HTML5 开始，我们也可以按照下面的方式进行记述。\n    </p>\n    <pre class=\"code-rows\"><code>&lt;meta charset=\"UTF-8\"&gt;</code></pre>\n    <p>IANA 负责管理可以使用的字符集。</p>\n    <p>Character Sets 的主页中有一个表，表的 Name 列中记载的是可以使用的字符集的名称，有几个字符集还拥有别名。对于拥有多个别名的字符集，最左边的列中记载了推荐使用的别名。</p>\n    <p>分隔符经常让开发人员感到困惑，是因为分隔符缺乏统一性，比如 UTF-8 中的分隔符是连字符，Shift_JIS 中的分隔符是下划线。</p>\n    <p>2017 年 12 月，HTML 5.2 成为 W3C 推荐的规范。该规范要求今后内容创作者应该使用 UTF-8。UTF-8 可以处理 Unicode 定义的约 100 万个字符，每个字符使用 1~4 字节的可变长度表示。用\n        1 字节表示的字符与 ASCII 码兼容。由于使用方便，到 2019 年 6 月，已经有 93.5% 的网站采用了这种编码方式 <span class=\"comment-number\">3</span>。</p>\n    \n    <p>现在仍然可以使用 UTF-8 之外的编码方式。以前用户可以通过在浏览器端指定编码来浏览未设置编码的内容，但如今的 Chrome 中不可以手动选择编码。Firefox 中虽然有相关菜单，但也无法指定编码。另外，在处理 UTF-8\n        之外的内容时，如果编码设置不正确，则无法正常显示。</p>\n    <h3 id=\"nav_point_50\">2.4.4　使用压缩提高通信速度</h3>\n    <p><strong>内容压缩</strong>是一种用来提高传输速度的结构，定义在 1992 年版的 HTTP 规范中。</p>\n    <p>虽然压缩程度会根据内容发生变化，但现在常用的压缩算法可以将文本文件的大小压缩为原来的 1/10。如果是多次出现相同符号的 JSON，文件大小可以压缩为原来的 1/20\n        左右。因为用于压缩和解压的时间少于通信所花费的时间，所以使用压缩算法能够减少显示 Web 页面所花费的总的处理时间。也就是说，从浏览器使用者的角度来看，传输速度提高了。</p>\n    <p>除此之外，压缩还会对费用产生影响。在 ADSL\n        和光纤普及之前，很多用户使用的是拨号上网，按时间收费，而现在的移动通信是按数据量收费的。无论哪种方式，我们都可以通过压缩算法来减少费用。在使用移动端时，收发电波会消耗很多电量，使用压缩算法也可以达到减少电量消耗的效果。\n    </p>\n    <p>进行内容压缩的协商在 HTTP 的首部完成。首先，客户端通过首部指定其可以接收的压缩格式。这里指定的压缩格式为 deflate 和 gzip。</p>\n    <pre class=\"code-rows\"><code>Accept-Encoding: deflate, gzip</code></pre>\n    <p>在 curl 命令中指定 <code>--compressed</code> 选项，就可以添加与前面使用 <code>-H</code> 记述的首部一样的首部 <span class=\"comment-number\">4</span>。</p>\n    \n    <pre class=\"code-rows\"><code>$ curl --http1.0 --compressed http://localhost:18888</code></pre>\n    <p>在服务器端，如果发送过来的列表中存在支持的格式，则服务器在响应时采用该格式对内容进行压缩，或者返回之前已经压缩好的内容。如果服务器支持的是 gzip，响应首部就会变成下面这样。这时，表示内容数据量的首部\n        <code>Content-Length</code> 指的是压缩后的文件大小。</p>\n    <pre class=\"code-rows\"><code>Content-Encoding: gzip</code></pre>\n    <p>Google 开发了比 gzip 更高效的压缩算法 Brotli，其规范定义在 RFC 7932 中，源代码也作为开源软件公开。目前 Chrome、Safari、Firefox 和 Edge 等浏览器都对 Brotli\n        提供了支持。这些浏览器可以通过相同的结构使用 Brotli。将编码格式指定为 br，并发送请求，如果服务器也支持该格式，就能通过 Brotli 实现高速通信。即使浏览器支持该格式，如果编程语言的 HTTP 客户端库不支持\n        Brotli，则也不会发送 br。另外，如果服务器不支持 Brotli，就会把压缩格式换为彼此都支持的格式（如 gzip）。像这样，使用 HTTP\n        的首部结构，能够在一次请求和响应的往返过程中保持向后兼容，与此同时实现最佳通信。</p>\n    <p>另外，关于从客户端向服务器上传数据时是否进行压缩的问题，人们也进行了讨论。虽然当前提出的方案都无法只通过一次通信来完成，但实现方式基本相同。服务器将最初的 Web 页面返给客户端时会返回\n        <code>Accept-Encoding</code> 首部，之后，客户端在上传数据时会发送 <code>Content-Encoding</code>。由于请求和响应双方都使用了首部这一结构，所以可以轻松实现压缩。\n    </p>\n    <p>我们还可以使用表示没有压缩的 identity。主要的压缩算法如表 2-2 所示。</p>\n    <p><strong>表 2-2　Web 浏览器可以使用的主要的压缩算法</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>名称</p>\n                </th>\n                <th>\n                    <p>别名</p>\n                </th>\n                <th>\n                    <p>算法</p>\n                </th>\n                <th>\n                    <p>IANA 注册完毕</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p>br</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>Brotli</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>compress</p>\n                </td>\n                <td>\n                    <p>x-compress</p>\n                </td>\n                <td>\n                    <p>UNIX 中自带的 <code>compress</code> 命令</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>deflate</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p><code>zlib</code> 库中提供的压缩算法（RFC 1951）</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>exi</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>W3C Efficient XML Interchange</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>gzip</p>\n                </td>\n                <td>\n                    <p>x-gzip</p>\n                </td>\n                <td>\n                    <p>与 <code>GZIP</code> 命令相同的压缩算法（RFC 1952）</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>identity</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用来声明没有进行压缩</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p>pack200-gzip</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>面向 Java 的网络传输算法</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p>在通过压缩算法减少通信数据量时，除了可以使用 <code>Content-Encoding</code> 压缩内容，还可以使用 <code>Transfer-Encoding</code>\n        首部来压缩通信线路，不过后者并不常用。</p>\n    <h2 id=\"nav_point_51\">2.5　Cookie</h2>\n    <p>Cookie 是将网站信息保存在浏览器端的一种结构。常见的数据库是通过客户端向数据库管理系统发送 SQL 来保存数据的，而 Cookie 正好相反，由服务端指示客户端（浏览器）保存数据。</p>\n    <p>Cookie 也将 HTTP 首部作为一种基础设施来实现。服务器以下面的方式发送响应首部。该服务器要在客户端保存最后的访问日期和时间。</p>\n    <pre class=\"code-rows\"><code>Set-Cookie: LAST_ACCESS_DATE=Jul/31/2016\nSet-Cookie: LAST_ACCESS_TIME=12:04</code></pre>\n    <p>访问日期和时间都以“<code>名称 = 值</code>”的形式返回。客户端会保存该值，并在下次访问服务器时以下面的方式发送该值。服务器读取该设置信息后，就可以知道客户端最后的访问日期和时间了。</p>\n    <pre class=\"code-rows\"><code>Cookie: LAST_ACCESS_DATE=Jul/31/2016\nCookie: LAST_ACCESS_TIME=12:04</code></pre>\n    <p>例如，下面的代码用来判断客户端是不是第一次访问服务器，并根据判断结果显示相应的内容。</p>\n    <pre class=\"code-rows\"><code>func handler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Add(\"Set-Cookie\", \"VISIT=TRUE\")\n    if _, ok := r.Header[\"Cookie\"]; ok {\n        // 有 Cookie 就代表曾经访问过\n        fmt.Fprintf(w, \"&lt;html&gt;&lt;body&gt; 第 2 次及之后&lt;/body&gt;&lt;/html&gt;\\n\")\n    } else {\n        fmt.Fprintf(w, \"&lt;html&gt;&lt;body&gt; 第 1 次访问&lt;/body&gt;&lt;/html&gt;\\n\")\n    }\n}</code></pre>\n    <p>从服务器的程序来看，数据保存在外部，每当客户端访问服务器时，就会加载该数据。虽然 HTTP 是无状态（stateless）的（无论谁在什么时候发出请求，只要请求相同，结果就相同），但在使用 Cookie 后，HTTP\n        就可以提供让服务器看起来是有状态的一些服务，比如从中断位置开始重新运行等。</p>\n    <p>我们可以在浏览器上使用 JavaScript 读取 Cookie，或者向服务器发送 Cookie。例如，打开 Facebook 等需要登录的网站页面，然后打开开发者工具查看\n        <code>document.cookie</code> 属性，就可以知道 Cookie 是以字符串格式存储的。</p>\n    <pre class=\"code-rows\"><code>&gt; console.log(document.cookie);\n\"_ga=GA1.2....; c_user=100002291...; csm=2; p = 02; act=147--2358...;...\"</code></pre>\n    <p>由于 Cookie 是基于首部创建的一种结构，所以在使用 curl 命令时，可以将接收到的首部内容放入 Cookie 中再次发送，以此来实现 Cookie 的功能。我们也可以使用专门的选项来实现 Cookie\n        的功能。将接收到的 Cookie 保存在用 <code>-c/--cookie-jar</code> 选项指定的文件中，从 <code>-b/--cookie</code> 选项指定的文件中读取 Cookie\n        并发送。指定这两个选项可以同时发送和接收 Cookie。<code>-b/--cookie</code> 选项不仅可以用来读取文件，还可以用来往文件中添加内容。</p>\n    <p>并非只在浏览器请求从服务器读取 HTML 页面时才设置 Cookie。如图 2-1 所示，在获取页面中引用的图像等附属文件时的响应中，或者第 5 章介绍的 XMLHttpRequest 和第 7 章介绍的 Fetch API\n        访问的响应中，如果服务器添加了 <code>Set-Cookie</code> 首部，那么客户端也会保存为 Cookie。不过，在读取其他域的图像文件或脚本时，从保护隐私的角度来看，是否接收 Cookie\n        是有限制的，详细内容请参考 14.11 节。</p>\n    <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00386.jpeg\" alt=\"{%}\" /></p>\n    <p class=\"ebook-image-title\"><strong>图 2-1　除了 HTML 响应之外，也可以设置 Cookie</strong></p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　<strong>Cookie 与用户同意</strong></p>\n        <p>欧盟在 2018 年 5 月针对个人信息出台了《通用数据保护条例》（<em>General Data Protection\n                Regulation</em>，GDPR）。该条例在对个人信息的处理进行限制的同时，也对个人信息中关键的 Cookie 进行了限制。</p>\n        <ul>\n            <li>除了必要的 Cookie 之外，在使用 Cookie 之前要获得用户的同意</li>\n            <li>在获得同意之前，要用简单易懂的语言提供各个 Cookie 追踪的数据以及关于其用途的准确、具体的信息</li>\n            <li>保存用户的同意信息</li>\n            <li>即使用户不允许使用指定的 Cookie，也可以访问服务</li>\n            <li>用户取消同意的操作要与同意时一样简单</li>\n        </ul>\n    </blockquote>\n    <h3 id=\"nav_point_52\">2.5.1　Cookie 的分类</h3>\n    <p>GDPR 官网中对 Cookie 进行了详细介绍，这里笔者来介绍一下 Cookie 有哪些类别。我们可以按照来源、使用期限和用途对 Cookie 进行分类。</p>\n    <p>根据来源，Cookie 可分类为用户访问过的网站的 Cookie（<strong>第一方 Cookie</strong>）和除此之外的网站的 Cookie（<strong>第三方 Cookie</strong>）。</p>\n    <p>根据使用期限，Cookie 可分类为关闭浏览器后就消失的<strong>会话 Cookie</strong> 和设置有期限以在关闭浏览器后依旧存在的<strong>持久 Cookie</strong>。</p>\n    <p>根据用途，Cookie 可分为如下 4 类。</p>\n    <blockquote>\n        <ol>\n            <li class=\"第2级有序列表\">绝对必要的 Cookie。在电商网站上购物时，如果需要使用 Cookie 实现购物车功能，那么 Cookie 就是该功能所必不可少的要素。这种 Cookie 通常为第一方的会话\n                Cookie。</li>\n            <li class=\"第2级有序列表\">用于设置环境的 Cookie。这类 Cookie 是之前用户设置的语言、用户名和密码等。</li>\n            <li class=\"第2级有序列表\">用于统计的 Cookie。这类 Cookie 用于收集网站的分析信息，比如访问过的页面或点击过的链接等。这类 Cookie 不用于识别用户，而用来改善网站。</li>\n            <li class=\"第2级有序列表\">用于市场营销的 Cookie。这类 Cookie 会追踪用户的行为，以提高广告的精准度，控制广告的显示次数。它们有时会在运营者之间共享。这类 Cookie 通常为第三方的持久\n                Cookie。</li>\n        </ol>\n    </blockquote>\n    <h3 id=\"nav_point_53\">2.5.2　Cookie 的错误用法</h3>\n    <p>Cookie 是一个非常便利的功能，但其本身存在一些限制，因此在使用方法上需要我们多加注意。</p>\n    <p>首先是永久性问题。Cookie 保存在浏览器本地，在更换计算机或智能手机后，之前的 Cookie 信息就不能再访问了。Cookie\n        并不是在任何情况下都能永久保存的，具体要看浏览器的安全设置。另外，设为隐私模式的浏览器会无视服务器的保存指示，或者在会话结束时进行重置。使用删除记录功能和开发者工具也能删除 Cookie。Cookie\n        不能用于更新服务器的数据库，因为一旦重置，数据就会消失。Cookie 只适合存储即使丢失也不会产生任何影响的信息，以及可根据服务器的信息复原的数据。</p>\n    <p>其次是数据大小的问题。因为 Cookie 在请求时会作为首部添加到通信中，所以通信量会有所增加，这就会对请求和响应的通信速度造成影响。因此，Cookie 的容量存在严格的限制。RFC 6265 中规定，Cookie\n        的总容量最大是 4 KB，每个域可保存 50 个 Cookie，浏览器可保存的 Cookie 全部加起来约为 3000 个。为了节约资源，浏览器可以删除超出容量的部分。根据 Browser Cookie Limits\n        网站通过实验测量的可实际保存的容量来看，浏览器可保存的 Cookie 的总容量有时会超出规定容量。例如，虽然 Chrome 中一个 Cookie 的大小是 4 KB，但 Chrome 可以接收大量的\n        Cookie，可以说基本上没有限制。另外，许多浏览器有 Cookie 总容量不超过 4 KB 的限制。如果容量超出规定范围，可使用的浏览器就会受限，因此 4 KB 的总容量是必须坚守的底线。在将 Cookie\n        用作简单的数据保存区域时，这种容量限制和通信量的增加会成为绊脚石。</p>\n    <p>最后是安全问题。虽然在设置了 <code>secure</code> 属性的情况下只能通过 HTTPS 进行加密通信，但在 HTTP 中，Cookie 是明文传递的。因为每次请求都会发送和接收\n        Cookie，所以如果其中存在不可以公开的密码，该密码就有泄露的危险。即使进行了加密，用户可以随便查看这一点也是一个不小的问题。从原理上讲，用户也可以自行改写 Cookie。Cookie 不适合保存系统需要的 ID\n        和改写后会造成错误动作的敏感信息。在添加敏感信息时，有的 Web 应用程序服务器会提供通过署名和加密等进行保护的方法。</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　正如下一节介绍的那样，最好只将认证后的记录或者删掉也没关系的信息放入 Cookie 中。</p>\n    </blockquote>\n    <h3 id=\"nav_point_54\">2.5.3　对 Cookie 加以限制</h3>\n    <p>客户端把从服务器接收的 Cookie 保存到本地存储（local storage）中，在访问同一个 URL 时，客户端会读取该 Cookie，并将其添加到请求首部中。由于 Cookie\n        在很多情况下是作为使用特定的服务所需的令牌（token）使用的，所以如果我们将 Cookie 发送给不需要它的服务器，就会增加安全风险。因此，HTTP 中定义了用于控制发送目的地或设置生命周期的属性。HTTP\n        客户端有义务解析这些属性，并对发送 Cookie 的操作进行控制。</p>\n    <p>如下所示，多个属性之间用分号隔开。另外，由于属性名不区分大小写，所以也可以像各个网页上的说明消息一样全部使用小写。本书采用的是 RFC 6265 的规范。</p>\n    <pre class=\"code-rows\"><code>Set-Cookie: SID=31d4d96e407aad42; Path=/; Secure; HttpOnly\nSet-Cookie: lang=en-US; Path=/; Domain=××××.com</code></pre>\n    <blockquote>\n        <p><strong><code>Expires</code> 属性、<code>Max-Age</code> 属性</strong></p>\n        <p>这两个属性用于设置 Cookie 的生命周期。<code>Max-Age</code> 的单位为秒，在从当前时刻开始经过指定的秒数后，Cookie 变为无效。<code>Expires</code> 用于解析\n            <code>Wed, 09 Jun 2021 10:18:14 GMT</code> 形式的字符串。如果这两个属性都未设置，Cookie 就会变为会话 Cookie，在浏览器关闭的瞬间消失。</p>\n        <p><strong><code>Domain</code> 属性</strong></p>\n        <p>该属性表示客户端发送 Cookie 的对象服务器。当省略该属性时，默认为发送 Cookie 的服务器。</p>\n        <p><strong><code>Path</code> 属性</strong></p>\n        <p>该属性表示客户端发送 Cookie 的对象服务器的路径。当省略该属性时，默认为发送 Cookie 的服务器的路径。</p>\n        <p><strong><code>Secure</code> 属性</strong></p>\n        <p>该属性表示客户端仅在用 HTTPS 进行安全连接时向服务器发送 Cookie。Cookie 决定是否将 URL 作为键来发送和接收。不过，URL 可能会因 DNS 攻击而被冒充，这就存在将 Cookie\n            发送给使用者预期之外的服务器的风险。攻击者即使不操作机器，也可以通过冒充免费的 Wi-Fi 服务来实现 DNS 攻击。在使用 <code>Secure</code> 属性的情况下，一旦使用 HTTP\n            连接，浏览器就会弹出警告，停止访问页面，以此来防止泄密。</p>\n        <p><strong><code>HttpOnly</code> 属性</strong></p>\n        <p>笔者在介绍 Cookie 时提到过，我们可以使用 JavaScript 来操作 Cookie，但如果给 Cookie 加上 <code>HttpOnly</code> 属性，就无法使用 JavaScript 读取\n            Cookie 了。该属性可以防止跨站脚本攻击，避免恶意的 JavaScript 被执行。</p>\n        <p><strong><code>SameSite</code> 属性</strong></p>\n        <p>RFC 中并不存在该属性。它是 Chrome 在版本 51 中引入的属性，用于发送同源（见 2.5.4 节）的域。现在该属性可设置为 <code>None</code>、<code>Lax</code> 和\n            <code>Strict</code>。</p>\n    </blockquote>\n    <p>Cookie 的功能添加历史也是 Web 安全的历史。关于具体存在的安全风险、应对措施，以及第三方 Cookie 等的内容将在第 10 章进行介绍。</p>\n    <h3 id=\"nav_point_55\">2.5.4　源</h3>\n    <p>Cookie 等 Web 安全的基础就是<strong>源</strong>。在登录 A 网站的状态下访问 B 网站，这时如果直接保持 A 网站的访问权限，就可以在 B 网站上随意访问 A 网站中保存的信息。</p>\n    <p>如果方案、域（主机名）、端口这三组数据相同，浏览器就会判断为同一个网站。反过来讲，如果有一组数据不同，浏览器就会判断为不同的网站。我们以 <code>http://××××.com</code> 为例来进行思考。下面两个\n        URL 与该示例 URL 是同一个网站。</p>\n    <blockquote>\n        <ul>\n            <li><code>http://××××.com:80</code>：HTTP 默认使用 80 端口，因此为同一个网站</li>\n            <li><code>http://××××.com/news</code>：路径可以不同</li>\n        </ul>\n    </blockquote>\n    <p>下面这三个 URL 与该示例 URL 就是不同的网站。</p>\n    <blockquote>\n        <ul>\n            <li><code>http://www.××××.com</code>：域不同</li>\n            <li><code>https://××××.com</code>：方案不同</li>\n            <li><code>http://××××.com:8080</code>：端口不同</li>\n        </ul>\n    </blockquote>\n    <p>例如，浏览器中有 <code>localStorage</code> 和 <code>sessionStorage</code> 这两个可用的存储 API。用户无法从 B 网站读取 A 网站中写入的内容。源不同，权限也就不同。\n    </p>\n    <p>上一节介绍的 Cookie 默认是以源为单位进行处理的，但我们也可以对其进行修改，比如按路径层次进行过滤，或者让子域也变得有效等。不过现在对完全不同的域进行写入操作是受限制的。</p>\n    <p>另外，当把 <code>POST</code> 等请求发送给其他域时，需要用到 <strong>CORS</strong>（Cross Origin Resource\n        Sharing，跨域资源共享），相关内容会在后面的章节中介绍。</p>\n    <h3 id=\"nav_point_56\">2.5.5　SameSite 属性</h3>\n    <p><code>SameSite</code> 属性还未成为 RFC 规范，只是草案，但所有的浏览器中都已经实现了该属性。在本书第 1 版出版时，<code>SameSite</code> 属性还只是 Chrome\n        拥有的功能，但之后包含 Internet Explorer 在内的所有浏览器都支持了该属性。</p>\n    <p>Cookie 仅在源匹配时发送，但即使有来自被攻击者劫持的网站的访问，浏览器也不会进行判别，而是直接发送 Cookie。如果不想执行来自其他网站的 <code>POST</code> 方式的 API\n        请求，只想处理自己网站的请求，可以把 <code>SameSite</code> 属性设置为 <code>SameSite=Strict</code> 或\n        <code>SameSite=Lax</code>，其中，<code>Strict</code> 更加严格，即使是点击 <code>&lt;a&gt;</code> 标签的链接时会切换页面的 <code>GET</code>\n        访问（全局导航），也不会发送 Cookie。如果是需要登录的网站，就得重新登录 <span class=\"comment-number\">5</span>。</p>\n    \n    <p>为了提高安全性，Google Chrome 计划将未设置 <code>SameSite</code> 属性时的默认 Cookie 从 <code>None</code> 改为\n        <code>Lax</code>。如果在其他网站访问时要发送第三方 Cookie，则必须显式设置 <code>SameSite=None</code>，同时附加 <code>Secure</code> 属性。Firefox\n        也计划这样做。</p>\n    <h2 id=\"nav_point_57\">2.6　认证和会话</h2>\n    <p>如今的 Web 服务大多需要登录。很多 Web\n        服务虽然允许查看一部分页面，但可使用的服务是有限的。通过<strong>认证</strong>，也就是输入用户名和密码进行登录，服务端就可以知道前来访问的用户是谁，并为其提示个性化信息，比如 SNS 显示朋友的最新消息等。\n    </p>\n    <p>回顾历史，我们会发现认证分为很多种。笔者先来介绍一下客户端每次都发送用户名和密码的认证方式。</p>\n    <h3 id=\"nav_point_58\">2.6.1　BASIC 认证和 Digest 认证</h3>\n    <p><strong>BASIC 认证</strong>是最简单的认证方式。用户名和密码采用 Base64 进行编码。因为 Base64\n        是一种可逆的编码方式，所以服务器端可以还原和取出原来的用户名和密码。将还原的用户名和密码与服务器的数据库保存的用户名和密码进行比较，就可以确认用户是否合法。不过，在没有使用 SSL/TLS\n        通信的状态下，如果通信遭到监听，通信内容中的用户名和密码就容易泄露出去。</p>\n    <pre class=\"code-rows\"><code>base64( 用户名 + \":\" + 密码)</code></pre>\n    <p>当使用 curl 命令进行 BASIC 认证时，使用 <code>-u/--user</code> 发送用户名和密码。<code>--basic</code> 用于显式声明使用的认证方式是 BASIC\n        认证，但其实我们可以省略这个 <code>--basic</code>，因为 BASIC 认证就是默认的认证方式。</p>\n    <pre class=\"code-rows\"><code>$ curl --http1.0 --basic -u user:pass http://localhost:18888</code></pre>\n    <p>在加上上面的选项之后，我们会得到下面的首部。</p>\n    <pre class=\"code-rows\"><code>Authorization: \"Basic dXNlcjpwYXNz\"</code></pre>\n    <p><strong>Digest 认证</strong>比 BASIC 认证更安全。Digest 认证使用的是散列函数（A → B 容易实现，但 B → A\n        就无法轻易地计算出来了）。虽然在使用庞大的计算资源的情况下可以找出几个能输出 B 的 A 的备选，但短时间内是无法简单地还原最初的字符串的。首先，在浏览器要访问受保护的区间时，服务器会返回\n        <code>401 Unauthorized</code>，添加的首部如下所示。</p>\n    <pre class=\"code-rows\"><code>WWW-Authenticate: Digest realm=\" 区间名称\", nonce=\"1234567890\", algorithm=MD5,\nqop=\"auth\"</code></pre>\n    <p><code>realm</code> 是受保护的区间名称，显示在认证对话框中。<code>nonce</code> 是服务器每次生成的随机数据。<code>qop</code> 是保护等级。客户端基于它们的值和随机生成的\n        <code>cnonce</code> 来计算 <code>response</code>。</p>\n    <pre class=\"code-rows\"><code>A1 = 用户名 \":\" realm \":\" 密码\nA2 = HTTP 的方法 \":\" 内容的 URI\nresponse = MD5( MD5(A1) \":\" nonce \":\" nc \":\" cnonce \":\" qop \":\" MD5(A2) )</code></pre>\n    <p><code>nc</code> 是使用给定的 <code>nonce</code> 值发送请求的次数的计数器。如果没有 <code>qop</code>，则省略 <code>nc</code>。<code>nc</code>\n        值使用 8 位的十六进制数表示。因为同一个 <code>nc</code> 值被使用的次数是已知的，所以服务器能够检测到重放攻击 <span class=\"comment-number\">6</span>（replay attacks）。\n    </p>\n    \n    <p>客户端会添加所生成的 <code>cnonce</code> 与计算出来的 <code>response</code>，然后加上下面的首部，再次发送请求。</p>\n    <pre class=\"code-rows\"><code>Authorization: Digest username=\"用户名\", realm=\"区间名称\",\n    nonce=\"1234567890\", uri=\"/secret.html\", algorithm=MD5,\n    qop=auth, nc=00000001, cnonce=\"0987654321\",\n    response=\"9d47a3f8b2d5c\"</code></pre>\n    <p>服务器也会使用该首部中的信息、服务内部保存的用户名和密码来进行相同的计算。如果计算出与再次发送的请求相同的\n        <code>response</code>，就证明用户正确地输入了用户名和密码。这样一来，就算请求中不包含用户名和密码，服务器也可以准确地对用户进行认证。</p>\n    <p>在使用 curl 命令的情况下，我们可以像下面这样加上 <code>--digest</code> 和 <code>-u/--user</code> 来使用 Digest 认证，但由于用于测试的服务器不返回\n        401，所以如果不采取任何措施，访问就会直接结束。在确认动作的情况下，我们可以让用于测试的服务器返回 <code>401 Unauthorized</code>。当使用 <code>/digest</code> 路径且\n        <code>Authorization</code> 首部不存在时，为了让服务器返回 <code>401</code>，我们在测试服务器中添加一个 <code>handler</code> 函数。</p>\n    <pre class=\"code-rows\"><code>import (\n// 在 import 段中添加以下两行代码\n\"io/ioutil\"\n\"github.com/k0kubun/pp\"\n)\n\nfunc handlerDigest(w http.ResponseWriter, r *http.Request) {\n    pp.Printf(\"URL: %s\\n\", r.URL.String())\n    pp.Printf(\"Query: %v\\n\", r.URL.Query())\n    pp.Printf(\"Proto: %s\\n\", r.Proto)\n    pp.Printf(\"Method: %s\\n\", r.Method)\n    pp.Printf(\"Header: %v\\n\", r.Header)\n    defer r.Body.Close()\n    body, _ := ioutil.ReadAll(r.Body)\n    fmt.Printf(\"--body--\\n%s\\n\", string(body))\n    if _, ok := r.Header[\"Authorization\"]; !ok {\n        w.Header().Add(\"WWW-Authenticate\", `Digest realm=\"Secret Zone\", nonce=\"TgLc\n25U2BQA=f510a2780473e18e6587be702c2e67fe2b04afd\", algorithm=MD5, qop=\"auth\"`)\n        w.WriteHeader(http.StatusUnauthorized)\n    } else {\n        fmt.Fprintf(w, \"&lt;html&gt;&lt;body&gt;secret page&lt;/body&gt;&lt;/html&gt;\\n\")\n    }\n}</code></pre>\n    <p>在 <code>main</code> 函数中注册 <code>handler</code> 的地方，注册刚刚创建的函数。</p>\n    <pre class=\"code-rows\"><code>http.HandleFunc(\"/\", handler)\nhttp.HandleFunc(\"/digest\", handlerDigest)</code></pre>\n    <p><code>import</code> 段中添加的 <code>github.com/k0kubun/pp</code> 是一个第三方库。第三方库或者标准库必须另行下载才能使用。我们可以使用\n        <code>go get</code> 命令来获取第三方库。</p>\n    <pre class=\"code-rows\"><code>$ go get github.com/k0kubun/pp</code></pre>\n    <p>通过下面的命令，可以确认返回的响应（<code>secret page</code>）与前面的不一样。如果加上 <code>-v</code>，就可以知道在因状态码 <code>401</code>\n        被拒绝之后，客户端会再次发送请求。</p>\n    <pre class=\"code-rows\"><code>$ curl --http1.0 --digest -u user:pass http://localhost:18888/digest</code></pre>\n    <h3 id=\"nav_point_59\">2.6.2　使用 Cookie 进行会话管理</h3>\n    <p>现在 BASIC 认证和 Digest 认证已经不常用了，主要原因如下。</p>\n    <blockquote>\n        <ul>\n            <li>\n                这两种认证方式只能用于禁止查看指定文件夹下的内容，无法在首页中显示用户固有的信息。如果要在首页显示用户固有的信息，就有必要对首页进行保护。也就是说，在用户访问首页时，登录对话框也要显示出来。这样的首页对初次访问的用户来说不够人性化\n            </li>\n            <li>每次请求都要发送用户名和密码进行计算和认证。特别是 Digest 认证的计算量非常大</li>\n            <li>无法自定义登录页面。最近，为了防范网络钓鱼（phishing），有的网站会显示（预先持有的）与用户 ID 对应的页面等，让用户知道这不是钓鱼网站</li>\n            <li>无法显式退出登录</li>\n            <li>无法识别登录的终端。对于需要防止同时登录的游戏，以及在从未知的终端登录时向登录用的邮箱发送安全警告的 Web 服务来说，无法识别登录的终端会带来一些麻烦</li>\n        </ul>\n    </blockquote>\n    <p>最近流行使用表单进行登录，使用 Cookie 进行会话管理。</p>\n    <p>客户端使用表单发送用户 ID 和密码。与 Digest 认证不同，由于用户 ID 和密码会被直接发送，所以必须使用 SSL/TLS 通信。服务器使用用户 ID 和密码进行认证，如果没有问题，就发送会话令牌（session\n        token）。服务器将会话令牌保存到关系数据库或者键值数据库中。令牌会作为 Cookie 返回给客户端。之后客户端再进行访问时会再次发送 Cookie，这时服务器就知道该客户端已经登录过了。</p>\n    <p>客户端只是组合使用前面出现的表单和 Cookie 这两种技术，因此这里省略了 curl 相关的介绍。有的 Web 服务为了应对跨站请求伪造（Cross-Site Request\n        Forgery，CSRF）会发送随机的键，所以在发送请求时不要忘记这个键。关于 CSRF，我们将在第 14 章进行介绍。</p>\n    <h3 id=\"nav_point_60\">2.6.3　使用带签名的 Cookie 保存会话数据</h3>\n    <p>前面介绍过，Cookie 会增加通信数据量，因此在使用 Cookie 时要多加注意。当然，我们也可以按其原本的用途，将其用于保存。</p>\n    <p>无论哪种 Web 应用程序框架，都拥有读写永久性数据的对象关系映射器等结构，以及处理易变数据的会话存储功能。早期的会话存储会创建关系数据库专用的表，将会话管理中创建的 ID 作为键，以在服务器端进行数据管理。</p>\n    <p>随着通信速度的提高和网站本身数据量的增加，我们已经没有必要在意 Cookie 导致的数据量的增加了。因此，使用 Cookie 进行数据管理的结构被广泛使用。</p>\n    <p>如今，Ruby on Rails 的默认会话存储就是使用 Cookie 保存数据的。Django 也从版本 1.4 开始使用 Cookie 进行数据管理。在使用 Cookie\n        保存数据的情况下，为了防止数据被篡改，服务器会向客户端发送电子签名后的数据，当客户端再次向服务器发送 Cookie 时，服务器会确认该电子签名。关于电子签名的结构，笔者将在第 4\n        章进行介绍。由于电子签名和确认工作都由服务器进行，所以客户端不持有任何密钥，公开密钥和私有密钥都由服务器持有。</p>\n    <p>服务器的优势在于无须准备保存数据的结构。另外，即使是将服务器以功能为单位进行细分的微服务，也可以通过相同的会话存储的加密方法来读写会话数据。</p>\n    <p>从客户端来看，访问服务进行操作的结果保存在了 Cookie 中。只要持有该 Cookie，就暂时持有了数据。不过，与使用了关系数据库的会话存储不同，在使用 Cookie\n        的情况下，如果同一个用户通过智能手机和计算机使用不同的浏览器访问服务，数据是不共享的。</p>\n    </pre&#10;></pre&#10;>","neighbors":{"left":{"article_title":"第 1 章 HTTP/1.0 的语法：4 个基本元素","id":740905},"right":{"article_title":"第 2 章 HTTP/1.0 的语义：浏览器基本功能的背后(2)","id":740907}},"comments":[]}