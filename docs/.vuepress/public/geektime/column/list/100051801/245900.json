{"id":245900,"title":"16 | 网络通信：我不想写原生Socket","content":"<p>你好，我是Chrono。</p><p>在上一节课，我讲了JSON、MessagePack和ProtoBuffer这三种数据交换格式。现在，我们手里有了这些跨语言、跨平台的通用数据，该怎么与外部通信交换呢？</p><p>你肯定首先想到的就是Socket网络编程，使用TCP/IP协议栈收发数据，这样不仅可以在本地的进程间通信，也可以在主机、机房之间异地通信。</p><p>大方向上这是没错的，但你也肯定知道，原生的Socket API非常底层，要考虑很多细节，比如TIME_WAIT、CLOSE_WAIT、REUSEADDR等，如果再加上异步就更复杂了。</p><p>虽然你可能看过、学过不少这方面的资料，对如何处理这些问题“胸有成竹”，但无论如何，像Socket建连/断连、协议格式解析、网络参数调整等，都要自己动手做，想要“凭空”写出一个健壮可靠的网络应用程序还是相当麻烦的。</p><p>所以，今天我就来谈谈C++里的几个好用的网络通信库：libcurl、cpr和ZMQ，让你摆脱使用原生Socket编程的烦恼。</p><h2>libcurl：高可移植、功能丰富的通信库</h2><p>第一个要说的库是libcurl，它来源于著名的<a href=\"https://curl.haxx.se/\">curl项目</a>，也是curl的底层核心。</p><p>libcurl经过了多年的开发和实际项目的验证，非常稳定可靠，拥有上百万的用户，其中不乏Apple、Facebook、Google、Netflix等大公司。</p><!-- [[[read_end]]] --><p>它最早只支持HTTP协议，但现在已经扩展到支持所有的应用层协议，比如HTTPS、FTP、LDAP、SMTP等，功能强大。</p><p>libcurl使用纯C语言开发，兼容性、可移植性非常好，基于C接口可以很容易写出各种语言的封装，所以Python、PHP等语言都有libcurl相关的库。</p><p>因为C++兼容C，所以我们也可以在C++程序里直接调用libcurl来收发数据。</p><p>在使用libcurl之前，你需要用apt-get或者yum等工具安装开发库：</p><pre><code>apt-get install libcurl4-openssl-dev\n</code></pre><p>虽然libcurl支持很多协议，但最常用的还是HTTP。所以接下来，我也主要介绍libcurl的HTTP使用方法，这样对其他的协议你也可以做到“触类旁通”。</p><p>libcurl的接口可以粗略地分成两大类：easy系列和multi系列。其中，easy系列是同步调用，比较简单；multi系列是异步的多线程调用，比较复杂。通常情况下，我们用easy系列就足够了。</p><p>使用libcurl收发HTTP数据的基本步骤有4个：</p><ol>\n<li>使用curl_easy_init()创建一个句柄，类型是CURL*。但我们完全没有必要关心句柄的类型，直接用auto推导就行。</li>\n<li>使用curl_easy_setopt()设置请求的各种参数，比如请求方法、URL、header/body数据、超时、回调函数等。这是最关键的操作。</li>\n<li>使用curl_easy_perform()发送数据，返回的数据会由回调函数处理。</li>\n<li>使用curl_easy_cleanup()清理句柄相关的资源，结束会话。</li>\n</ol><p>下面我用个简短的例子来示范一下这4步：</p><pre><code>#include &lt;curl/curl.h&gt;               // 包含头文件\n\nauto curl = curl_easy_init();        // 创建CURL句柄\nassert(curl);\n\ncurl_easy_setopt(curl, CURLOPT_URL, &quot;http://nginx.org&quot;); // 设置请求URI\n\nauto res = curl_easy_perform(curl);   // 发送数据\nif (res != CURLE_OK) {                // 检查是否执行成功\n    cout &lt;&lt; curl_easy_strerror(res) &lt;&lt; endl;\n}\n\ncurl_easy_cleanup(curl);             // 清理句柄相关的资源\n</code></pre><p>这段代码非常简单，重点是调用curl_easy_setopt()设置了URL，请求Nginx官网的首页，其他的都使用默认值即可。</p><p>由于没有设置你自己的回调函数，所以libcurl会使用内部的默认回调，把得到的HTTP响应数据输出到标准流，也就是直接打印到屏幕上。</p><p>这个处理结果显然不是我们所期待的，所以如果想要自己处理返回的HTTP报文，就得写一个回调函数，在里面实现业务逻辑。</p><p>因为libcurl是C语言实现的，所以回调函数必须是函数指针。不过，C++11允许你写lambda表达式，这利用了一个特别规定：<strong>无捕获的lambda表达式可以显式转换成一个函数指针</strong>。注意一定要是“无捕获”，也就是说lambda引出符“[]”必须是空的，不能捕获任何外部变量。</p><p>所以，只要多做一个简单的转型动作，你就可以用lambda表达式直接写libcurl的回调，还是熟悉的函数式编程风格：</p><pre><code>// 回调函数的原型\nsize_t write_callback(char* , size_t , size_t , void* );\n \ncurl_easy_setopt(curl, CURLOPT_WRITEFUNCTION,        // 设置回调函数\n  (decltype(&amp;write_callback))      // decltype获取函数指针类型，显式转换\n  [](char *ptr, size_t size, size_t nmemb, void *userdata)// lambda\n  {\n      cout &lt;&lt; &quot;size = &quot; &lt;&lt; size * nmemb &lt;&lt; endl;   // 简单的处理\n      return size * nmemb;                // 返回接收的字节数\n  }\n);\n</code></pre><p>libcurl的用法大概就是这个样子了，开头的准备和结尾的清理工作都很简单，关键的就是curl_easy_setopt()这一步的参数设置。我们必须通过查文档知道该用哪些标志宏，写一些单调重复的代码。</p><p>你可能想到了，可以自己用C++包装出一个类，就能够少敲点键盘。但不要着急，因为我们有一个更好的选择，就是cpr。</p><h2>cpr：更现代、更易用的通信库</h2><p>cpr是对libcurl的一个C++11封装，使用了很多现代C++的高级特性，对外的接口模仿了Python的requests库，非常简单易用。</p><p>你可以从<a href=\"https://github.com/whoshuu/cpr\">GitHub</a>上获取cpr的源码，再用cmake编译安装：</p><pre><code>git clone git@github.com:whoshuu/cpr.git\ncmake . -DUSE_SYSTEM_CURL=ON -DBUILD_CPR_TESTS=OFF\nmake &amp;&amp; make install\n</code></pre><p>和libcurl相比，cpr用起来真的是太轻松了，不需要考虑什么初始化、设置参数、清理等杂事，一句话就能发送HTTP请求：</p><pre><code>#include &lt;cpr/cpr.h&gt;                            // 包含头文件\n\nauto res = cpr::Get(                           // GET请求    \n           cpr::Url{&quot;http://openresty.org&quot;}   // 传递URL\n);\n</code></pre><p>你也不用写回调函数，HTTP响应就是函数的返回值，用成员变量url、header、status_code、text就能够得到报文的各个组成部分：</p><pre><code>cout &lt;&lt; res.elapsed &lt;&lt; endl;            // 请求耗费的时间\n\ncout &lt;&lt; res.url &lt;&lt; endl;               // 请求的URL\ncout &lt;&lt; res.status_code &lt;&lt; endl;       // 响应的状态码\ncout &lt;&lt; res.text.length() &lt;&lt; endl;     // 响应的body数据\n\nfor(auto&amp; x : res.header) {            // 响应的头字段\n    cout &lt;&lt; x.first &lt;&lt; &quot;=&gt;&quot;            // 类似map的结构\n         &lt;&lt; x.second &lt;&lt; endl;\n}\n</code></pre><p>在cpr里，HTTP协议的概念都被实现为相应的函数或者类，内部再转化为libcurl操作，主要的有：</p><ul>\n<li>GET/HEAD/POST等请求方法，使用同名的Get/Head/Post函数；</li>\n<li>URL使用Url类，它其实是string的别名；</li>\n<li>URL参数使用Parameters类，KV结构，近似map；</li>\n<li>请求头字段使用Header类，它其实是map的别名，使用定制的函数实现了大小写无关比较；</li>\n<li>Cookie使用Cookies类，也是KV结构，近似map；</li>\n<li>请求体使用Body类；</li>\n<li>超时设置使用Timeout类。</li>\n</ul><p>这些函数和类的用法都非常自然、符合思维习惯，而且因为可以使用C++11的花括号“{}”初始化语法，如果你以前用过Python reqeusts库的话一定会感到很亲切：</p><pre><code>const auto url = &quot;http://openresty.org&quot;s;  // 访问的URL\n\nauto res1 = cpr::Head(                    // 发送HEAD请求\n            cpr::Url{url}                 // 传递URL\n);\n\nauto res2 = cpr::Get(                     // 发送GET请求\n            cpr::Url{url},               // 传递URL\n            cpr::Parameters{             // 传递URL参数\n                {&quot;a&quot;, &quot;1&quot;}, {&quot;b&quot;, &quot;2&quot;}}\n);\n\nauto res3 = cpr::Post(                  // 发送POST请求\n            cpr::Url{url},             // 传递URL\n            cpr::Header{                // 定制请求头字段\n              {&quot;x&quot;, &quot;xxx&quot;},{&quot;expect&quot;,&quot;&quot;}},\n            cpr::Body{&quot;post data&quot;},    // 传递body数据\n            cpr::Timeout{200ms}       // 超时时间\n);\n</code></pre><p>cpr也支持异步处理，但它内部没有使用libcurl的multi接口，而是使用了标准库里的future和async（参见<a href=\"https://time.geekbang.org/column/article/245259\">第14讲</a>），和libcurl的实现相比，既简单又好理解。</p><p>异步接口与同步接口的调用方式基本一样，只是名字多了个“Async”的后缀，返回的是一个future对象。你可以调用wait()或者get()来获取响应结果：</p><pre><code>auto f = cpr::GetAsync(                    // 异步发送GET请求\n            cpr::Url{&quot;http://openresty.org&quot;}\n);\n\nauto res = f.get();                       // 等待响应结果\ncout &lt;&lt; res.elapsed &lt;&lt; endl;              // 请求耗费的时间\n</code></pre><p>看了上面这些介绍，你是不是有些心动了。说实话，我原来在C++里也是一直用libcurl，也写过自己的包装类，直到发现了cpr这个“大杀器”，就立即“弃暗投明”了。</p><p>相信有了cpr，你今后在C++里写HTTP应用就不再是痛苦，而是一种享受了。</p><h2>ZMQ：高效、快速、多功能的通信库</h2><p>libcurl和cpr处理的都是HTTP协议，虽然用起来很方便，但协议自身也有一些限制，比如必须要一来一回，必须点对点直连，在超大数据量通信的时候就不是太合适。</p><p>还有一点，libcurl和cpr只能充当HTTP的客户端，如果你想写服务器端程序，这两个工具就完全派不上用场。</p><p>所以，我们就需要一个更底层、更灵活的网络通信工具，它应该能够弥补libcurl和cpr的不足，不仅快速高效，还能同时支持客户端和服务器端编程。</p><p>这就是我要说的第三个库：<a href=\"https://zeromq.org/\">ZMQ</a>。</p><p>其实，ZMQ不仅是一个单纯的网络通信库，更像是一个高级的异步并发框架。</p><p>从名字上就可以看出来，Zero Message Queue——零延迟的消息队列，意味着它除了可以收发数据外，还可以用作消息中间件，解耦多个应用服务之间的强依赖关系，搭建高效、有弹性的分布式系统，从而超越原生的Socket。</p><p>作为消息队列，ZMQ的另一大特点是零配置零维护零成本，不需要搭建额外的代理服务器，只要安装了开发库就能够直接使用，相当于把消息队列功能直接嵌入到你的应用程序里：</p><pre><code>apt-get install libzmq3-dev\n</code></pre><p>ZMQ是用C++开发的，但出于兼容的考虑，对外提供的是纯C接口。不过它也有很多C++封装，这里我选择的是自带的<a href=\"https://github.com/zeromq/cppzmq\">cppzmq</a>，虽然比较简单，但也基本够用了。</p><p>由于ZMQ把自身定位于更高层次的“异步消息队列”，所以它的用法就不像Socket、HTTP那么简单直白，而是定义了5种不同的工作模式，来适应实际中常见的网络通信场景。</p><p>我来大概说一下这5种模式：</p><ul>\n<li>原生模式（RAW），没有消息队列功能，相当于底层Socket的简单封装；</li>\n<li>结对模式（PAIR），两个端点一对一通信；</li>\n<li>请求响应模式（REQ-REP），也是两个端点一对一通信，但请求必须有响应；</li>\n<li>发布订阅模式（PUB-SUB），一对多通信，一个端点发布消息，多个端点接收处理；</li>\n<li>管道模式（PUSH-PULL），或者叫流水线，可以一对多，也可以多对一。</li>\n</ul><p>前四种模式类似HTTP协议、Client-Server架构，很简单，就不多说了。我拿我在工作中比较常用的管道模式来给你示范一下ZMQ的用法，它非常适合进程间无阻塞传送海量数据，也有点map-reduce的意思。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/2d/8b868214b032aebfcee1e0e97a8a1e2d.png?wh=360*480\" alt=\"\"></p><p>在ZMQ里有两个基本的类。</p><ul>\n<li>第一个是context_t，它是ZMQ的运行环境。使用ZMQ的任何功能前，必须要先创建它。</li>\n<li>第二个是socket_t，表示ZMQ的套接字，需要指定刚才说的那5种工作模式。注意它与原生Socket没有任何关系，只是借用了名字来方便理解。</li>\n</ul><p>下面的代码声明了一个全局的ZMQ环境变量，并定义了一个lambda表达式，生产ZMQ套接字：</p><pre><code>const auto thread_num = 1;              // 并发线程数\n\nzmq::context_t context(thread_num);     // ZMQ环境变量\n\nauto make_sock = [&amp;](auto mode)        // 定义一个lambda表达式\n{\n    return zmq::socket_t(context, mode); // 创建ZMQ套接字\n};\n\n</code></pre><p>和原生Socket一样，ZMQ套接字也必须关联到一个确定的地址才能收发数据，但它不仅支持TCP/IP，还支持进程内和进程间通信，这在本机交换数据时会更高效：</p><ul>\n<li>TCP通信地址的形式是“tcp://…”，指定IP地址和端口号；</li>\n<li>进程内通信地址的形式是“inproc://…”，指定一个本地可访问的路径；</li>\n<li>进程间通信地址的形式是“ipc://…”，也是一个本地可访问的路径。</li>\n</ul><p>用bind()/connect()这两个函数把ZMQ套接字连接起来之后，就可以用send()/recv()来收发数据了，看一下示例代码吧：</p><pre><code>const auto addr = &quot;ipc:///dev/shm/zmq.sock&quot;s;  // 通信地址\n\nauto receiver = [=]()                     // lambda表达式接收数据\n{\n    auto sock = make_sock(ZMQ_PULL);      // 创建ZMQ套接字，拉数据\n\n    sock.bind(addr);                     // 绑定套接字\n    assert(sock.connected());\n\n    zmq::message_t msg;\n    sock.recv(&amp;msg);                      // 接收消息\n\n    string s = {msg.data&lt;char&gt;(), msg.size()};\n    cout &lt;&lt; s &lt;&lt; endl;\n};\n\nauto sender = [=]()                     // lambda表达式发送数据\n{\n    auto sock = make_sock(ZMQ_PUSH);     // 创建ZMQ套接字，推数据\n\n    sock.connect(addr);                  // 连接到对端\n    assert(sock.connected());\n\n    string s = &quot;hello zmq&quot;;\n    sock.send(s.data(), s.size());       // 发送消息\n};\n</code></pre><p>这段代码实现了两个最基本的客户端和服务器，看起来好像没什么特别的。但你应该注意到，使用ZMQ完全不需要考虑底层的TCP/IP通信细节，它会保证消息异步、安全、完整地到达服务器，让你关注网络通信之上更有价值的业务逻辑。</p><p>ZMQ的用法就是这么简单，但想要进一步发掘它的潜力，处理大流量的数据还是要去看<a href=\"http://wiki.zeromq.org/\">它的文档</a>，选择合适的工作模式，再仔细调节各种参数。</p><p>接下来，我再给你分享两个实际工作中会比较有用的细节吧。</p><p>一个是<strong>ZMQ环境的线程数</strong>。它的默认值是1，太小了，适当增大一些就可以提高ZMQ的并发处理能力。我一般用的是4~6，具体设置为多少最好还是通过性能测试来验证下。</p><p>另一个是<strong>收发消息时的本地缓存数量</strong>，ZMQ的术语叫High Water Mark。如果收发的数据过多，数量超过HWM，ZMQ要么阻塞，要么丢弃消息。</p><p>HWM需要调用套接字的成员函数setsockopt()来设置，注意收发使用的是两个不同的标志：</p><pre><code>sock.setsockopt(ZMQ_RCVHWM, 1000);     // 接收消息最多缓存1000条\nsock.setsockopt(ZMQ_SNDHWM, 100);      // 发送消息最多缓存100条\n</code></pre><p>我们把HWM设置成多大都可以，比如我就曾经在一个高并发系统里用过100万以上的值，不用担心，ZMQ会把一切都处理得很好。</p><p>关于ZMQ就暂时说到这里，它还有很多强大的功能，你可以阅读<a href=\"http://zguide.zeromq.org/page:all\">官网</a>上的教程和指南，里面非常详细地讨论了ZMQ的各种模式和要点。</p><h2>小结</h2><p>好了，我来给今天的内容做一个小结：</p><ol>\n<li>libcurl是一个功能完善、稳定可靠的应用层通信库，最常用的就是HTTP协议；</li>\n<li>cpr是对libcurl的C++封装，接口简单易用；</li>\n<li>libcurl和cpr都只能作为客户端来使用，不能编写服务器端应用；</li>\n<li>ZMQ是一个高级的网络通信库，支持多种通信模式，可以把消息队列功能直接嵌入应用程序，搭建出高效、灵活、免管理的分布式系统。</li>\n</ol><p>最后，再说说即将到来的C++20，原本预计会加入期待已久的networking库，但现在已经被推迟到了下一个版本（C++23）。</p><p>networking库基于已有多年实践的boost.asio，采用前摄器模式（Proactor）统一封装了操作系统的各种异步机制（epoll、kqueue、IOCP），而且支持协程。有了它，我们的网络通信工作就会更加轻松。</p><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你在网络编程的时候都遇到过哪些“坑”，今天说的这几个库能否解决你的问题？</li>\n<li>你觉得ZMQ能够在多大程度上代替原生Socket？</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/dd/3e07516e87c61172f9b2ddc317c74add.jpg?wh=2000*2536\" alt=\"\"></p>","comments":[{"had_liked":false,"id":226719,"user_name":"屈肖东","can_delete":false,"product_type":"c1","uid":1995346,"ip_address":"","ucode":"A6E2250A3CFEA5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/72/52/8e81daf1.jpg","comment_is_top":false,"comment_ctime":1592189476,"is_pvip":false,"replies":[{"id":"83500","content":"C++开源库很多都比较大、比较复杂，找合适学习的还真不是件容易的事情。<br><br>我觉得比较好的开始方式是看课程里推荐的这几个库，都不是特别大，功能比较单一，比较容易聚焦学习点。<br><br>看的时候可以先从代码风格看起，再熟悉C++关键字的用法，再到整体架构、接口设计。不能心急，不要想着几天或者一个月就能看完。而且也没必要完全看懂，只要能从中学到一两个点就可以说是值得了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592199158,"ip_address":"","comment_id":226719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70311666212","product_id":100051801,"comment_content":"老师什么时候可以推荐几个值得读的比较通用的开源代码，因为很多开源代码虽然很好，但是太过复杂庞大，很难阅读。或者写一篇针对如何更好的阅读源码的文章。毕竟读代码应该是学习写代码最好的方式","like_count":17,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498342,"discussion_content":"C++开源库很多都比较大、比较复杂，找合适学习的还真不是件容易的事情。\n\n我觉得比较好的开始方式是看课程里推荐的这几个库，都不是特别大，功能比较单一，比较容易聚焦学习点。\n\n看的时候可以先从代码风格看起，再熟悉C++关键字的用法，再到整体架构、接口设计。不能心急，不要想着几天或者一个月就能看完。而且也没必要完全看懂，只要能从中学到一两个点就可以说是值得了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592199158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225664,"user_name":"赖阿甘","can_delete":false,"product_type":"c1","uid":1351988,"ip_address":"","ucode":"77493FE85CBAF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTICBNZjA9hW65x6g9b2iaicKUJW5gxFxtgPXH9Cqp6eyFfY1sD2hVY4dZrY5pmoK2r1KZEiaaIKocdZQ/132","comment_is_top":false,"comment_ctime":1591808263,"is_pvip":false,"replies":[{"id":"83148","content":"你说的很对，这些库用起来比较复杂，一时半会说不清楚，光里面的epoll、多线程机制就要解释半天，要用起来更是要很多步骤。<br><br>我的想法还是让大家尽量快速上手，能用起来最重要。<br><br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591837844,"ip_address":"","comment_id":225664,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53131415815","product_id":100051801,"comment_content":"说实在在看文章之前，我还不知道ZMQ这个网络通信库，哈哈。老师怎么没提到libevent、libev、asio、muduo等网络通信库，是否这些库的接口比较原始，不好用，还望解答","like_count":13,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497934,"discussion_content":"你说的很对，这些库用起来比较复杂，一时半会说不清楚，光里面的epoll、多线程机制就要解释半天，要用起来更是要很多步骤。\n\n我的想法还是让大家尽量快速上手，能用起来最重要。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591837844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225695,"user_name":"编程国学","can_delete":false,"product_type":"c1","uid":1071993,"ip_address":"","ucode":"9EEF2F62ACAFEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/79/0f083d7d.jpg","comment_is_top":false,"comment_ctime":1591836157,"is_pvip":false,"replies":[{"id":"83141","content":"qt我没用过，不好评价，我觉得可以试试zmq，它的性能也很不错。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591837547,"ip_address":"","comment_id":225695,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27361639933","product_id":100051801,"comment_content":"军工行业，用户强调实时，一般采用udp，目前我们采用qt 自己的库，有没有好的建议","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497951,"discussion_content":"qt我没用过，不好评价，我觉得可以试试zmq，它的性能也很不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591837547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193938,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/d2/945fa276.jpg","nickname":"AirY","note":"","ucode":"54E8F7E55BDEA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575847,"discussion_content":"zmq好像有内存泄漏，自动重连","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655136218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2875594,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","nickname":"孙新","note":"","ucode":"A80038A479B943","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556634,"discussion_content":"boost ASIO?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647431710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006856,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/08/abb7bfe3.jpg","nickname":"笔良文昌","note":"","ucode":"484E7266055703","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378946,"discussion_content":"我们做 real time bidding 的，用的libuv","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623550364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229116,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":1656378,"ip_address":"","ucode":"6F502CDCAD7A79","user_header":"https://static001.geekbang.org/account/avatar/00/19/46/3a/35d9cc02.jpg","comment_is_top":false,"comment_ctime":1592899923,"is_pvip":false,"replies":[{"id":"84492","content":"我觉得这个要从两方面去看，一个是要知道底层的运行原理，是基本功，另一个是要快速高效地开发出稳定可靠的应用。<br><br>这两者并不矛盾，可以齐头并行，一个是学习自身修炼，一个是工作的要求，而且两者也可以互相促进。<br><br>我们不自己造轮子，但要懂造轮子的原理，必要的时候能够自己造。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592902370,"ip_address":"","comment_id":229116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23067736403","product_id":100051801,"comment_content":"我也知道别人的东西好，但是老师也用，会不会这样的依赖，而让我们进步缓慢，怎么看这个问题。如何破？","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499339,"discussion_content":"我觉得这个要从两方面去看，一个是要知道底层的运行原理，是基本功，另一个是要快速高效地开发出稳定可靠的应用。\n\n这两者并不矛盾，可以齐头并行，一个是学习自身修炼，一个是工作的要求，而且两者也可以互相促进。\n\n我们不自己造轮子，但要懂造轮子的原理，必要的时候能够自己造。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592902370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225702,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1591837570,"is_pvip":false,"replies":[{"id":"83174","content":"asio推迟到了C++23，而且从它的前身boost.asio来看，用起来也是很复杂的，里面的概念很多，不好一下子说清楚，以后如果有机会可以专门写一篇。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591843767,"ip_address":"","comment_id":225702,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23066674050","product_id":100051801,"comment_content":"疑惑同楼上～ ASIO 据说要加到c++ 20了，应该介绍呀？","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497953,"discussion_content":"asio推迟到了C++23，而且从它的前身boost.asio来看，用起来也是很复杂的，里面的概念很多，不好一下子说清楚，以后如果有机会可以专门写一篇。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591843767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229814,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1593154314,"is_pvip":false,"replies":[{"id":"84800","content":"go了解的不多，但它后面有Google撑腰，所以发展的势头比较好，而且也有了很多成功的应用，今后应该还会继续保持这个势头吧。<br><br>不过我还是喜欢C++。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593172421,"ip_address":"","comment_id":229814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183088906","product_id":100051801,"comment_content":"请教罗老师，如何看待Go语言在网络编程上的发展势头～","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499653,"discussion_content":"go了解的不多，但它后面有Google撑腰，所以发展的势头比较好，而且也有了很多成功的应用，今后应该还会继续保持这个势头吧。\n\n不过我还是喜欢C++。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593172421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285658,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1616943968,"is_pvip":false,"replies":[{"id":"103668","content":"nanomsg很早就停止维护了吧，反而zmq一直在更新。不建议用nanomsg了，zmq有文档，有社区，这个技术支持是最重要的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1616981706,"ip_address":"","comment_id":285658,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5911911264","product_id":100051801,"comment_content":"确实感觉nanomsg更新的很慢,而且资料,影响力都不如zeromq.请教老师一个事情,如果想要学习这一块,是选择ZMQ还是nanomsg呢,我最近在看zmq作者写的一本书《ZeroMQ:云时代极速消息通信库》.但同事说,zmq已经过时了,应该学习nanomsg,给我搞的很无语,老师怎么看?","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517743,"discussion_content":"nanomsg很早就停止维护了吧，反而zmq一直在更新。不建议用nanomsg了，zmq有文档，有社区，这个技术支持是最重要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616981706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165201,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","nickname":"Stephen","note":"","ucode":"0D49223E6CB7B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362610,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616991854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238138,"user_name":"henry","can_delete":false,"product_type":"c1","uid":1019455,"ip_address":"","ucode":"D2744C559ADFD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/3f/1f529b26.jpg","comment_is_top":false,"comment_ctime":1596078667,"is_pvip":true,"replies":[{"id":"88001","content":"zmq和redis的差距很大，用途也不同。<br><br>zmq的主要目的是为了高效地传输数据，消息不丢失，支持超大消息，而redis是内存存储，虽然有的模式比较像，但对应的业务场景是不同的。<br><br>具体怎么用还是要看实际情况，一般要求不高用redis简单，zmq用在高流量的时候。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596089842,"ip_address":"","comment_id":238138,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5891045963","product_id":100051801,"comment_content":"请问下罗老师，ZMQ的pub&#47;sub, push&#47;pull模式和redis相比有哪些优势？<br><br>如果多个进程之间要 pub，push 不同的业务类型数据，需要在一些进程中开多个端口，管理上有点麻烦，如果加一个Broker的中间层，又有点类似redis用法的意思","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502653,"discussion_content":"zmq和redis的差距很大，用途也不同。\n\nzmq的主要目的是为了高效地传输数据，消息不丢失，支持超大消息，而redis是内存存储，虽然有的模式比较像，但对应的业务场景是不同的。\n\n具体怎么用还是要看实际情况，一般要求不高用redis简单，zmq用在高流量的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596089842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225966,"user_name":"土土人","can_delete":false,"product_type":"c1","uid":1045486,"ip_address":"","ucode":"6501B7D4F63E95","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/ee/33ef689b.jpg","comment_is_top":false,"comment_ctime":1591920659,"is_pvip":true,"replies":[{"id":"83245","content":"可能是因为它用的是proactor吧，但设计架构还是挺好的，作为底层比较合适，如果在上面有高级封装库就好了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591924080,"ip_address":"","comment_id":225966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886887955","product_id":100051801,"comment_content":"ASIO使用起来极其别扭","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498060,"discussion_content":"可能是因为它用的是proactor吧，但设计架构还是挺好的，作为底层比较合适，如果在上面有高级封装库就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591924080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225901,"user_name":"TC128","can_delete":false,"product_type":"c1","uid":1993621,"ip_address":"","ucode":"C5FF12BB7406FB","user_header":"","comment_is_top":false,"comment_ctime":1591885111,"is_pvip":false,"replies":[{"id":"83251","content":"我没用过，简单搜了一下，感觉还不错，可以一试。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591924611,"ip_address":"","comment_id":225901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886852407","product_id":100051801,"comment_content":"HP-Socket有人用吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498034,"discussion_content":"我没用过，简单搜了一下，感觉还不错，可以一试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591924611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225742,"user_name":"Confidant.","can_delete":false,"product_type":"c1","uid":1660039,"ip_address":"","ucode":"6E137F863906B0","user_header":"https://static001.geekbang.org/account/avatar/00/19/54/87/3b1f9de4.jpg","comment_is_top":false,"comment_ctime":1591844905,"is_pvip":false,"replies":[{"id":"83179","content":"GitHub上的代码都用g++5.4编译通过的，注意用std=C++14，可以看一下源码开头的注释。<br><br>如果还不行，可以在GitHub上提issue。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591848815,"ip_address":"","comment_id":225742,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5886812201","product_id":100051801,"comment_content":"老师，zmq的代码有一个lamda用&amp;捕获的错误，你的都可以编过吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497972,"discussion_content":"GitHub上的代码都用g++5.4编译通过的，注意用std=C++14，可以看一下源码开头的注释。\n\n如果还不行，可以在GitHub上提issue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591848815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282077,"discussion_content":"没用过这么高版本的gcc，但我觉得应该不是这个问题，既然gcc5.4能过，9.3就更不会有问题，空的[]应该是无捕获才对，我觉得你应该再仔细找一下原因。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591880173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2670319,"avatar":"https://static001.geekbang.org/account/avatar/00/28/be/ef/a1bb0528.jpg","nickname":"Wei Zhou","note":"","ucode":"91B72493A8765D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409778,"discussion_content":"我的也是g++ 9.3 是同样的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635509247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1660039,"avatar":"https://static001.geekbang.org/account/avatar/00/19/54/87/3b1f9de4.jpg","nickname":"Confidant.","note":"","ucode":"6E137F863906B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281986,"discussion_content":"我不知道是不是我编译器的问题，9.3的g++好像不支持用&amp;捕获全局变量，因为context是全局的，所以lamda内也可以访问，把捕获&amp;号删掉，就可以正常运行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591855877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225680,"user_name":"黄骏","can_delete":false,"product_type":"c1","uid":1849733,"ip_address":"","ucode":"3C41D02F4F712C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/39/85/c6110f83.jpg","comment_is_top":false,"comment_ctime":1591833735,"is_pvip":true,"replies":[{"id":"83143","content":"zmq算是老牌的消息中间件了，用的比较广泛，不过确实有点老。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591837620,"ip_address":"","comment_id":225680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886801031","product_id":100051801,"comment_content":"之前用过zmq，他的创始人也非常传奇","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497943,"discussion_content":"zmq算是老牌的消息中间件了，用的比较广泛，不过确实有点老。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591837620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225671,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1591827124,"is_pvip":false,"replies":[{"id":"83144","content":"对，这些通讯库可以减轻底层的一部分工作，把时间和精力集中在上层应用上。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591837667,"ip_address":"","comment_id":225671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886794420","product_id":100051801,"comment_content":"涨知识了，之前http通信一直使用的原生 libcurl，看起来现在可以转cpr了，不是不知道这个库的存在，只是没人推荐不敢换而已。另外ZMQ，这个库看起来可以解决手写TCP&#47;IP通信的问题，后面会试试。<br>网络编程最大的坑其实是不懂网络协议，以及联调的问题，感觉不是库能解决的。但是库能解决底层封装，避免重复造轮子的痛苦。<br>","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497940,"discussion_content":"对，这些通讯库可以减轻底层的一部分工作，把时间和精力集中在上层应用上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591837667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343209,"user_name":"旭日东升","can_delete":false,"product_type":"c1","uid":2972401,"ip_address":"","ucode":"705991C9C1E993","user_header":"https://static001.geekbang.org/account/avatar/00/2d/5a/f1/67a3e8c6.jpg","comment_is_top":false,"comment_ctime":1650707941,"is_pvip":false,"replies":[{"id":"125385","content":"看了文档，感觉还不错，不过它是go风格的，和标准不一样，需要自己评估一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1650848902,"ip_address":"","comment_id":343209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650707941","product_id":100051801,"comment_content":"cocoyaxi<br>看到过这个go风格的c++协程库，很方便的创建http server， 并且实现http client。<br>老师这个库怎么样？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567152,"discussion_content":"看了文档，感觉还不错，不过它是go风格的，和标准不一样，需要自己评估一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650848903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334830,"user_name":"在水一方","can_delete":false,"product_type":"c1","uid":1414215,"ip_address":"","ucode":"D8371EFEBED2C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiboeh23vhCNruZ7odUjROiac6N9fx0VWAE6zBNRxJIJFZspSUTQdgu9ajg4F0fAZgdk1vBsicnib3QQ/132","comment_is_top":false,"comment_ctime":1645149364,"is_pvip":false,"replies":[{"id":"122367","content":"这个就不了解了，很久没用Windows，抱歉。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1645326821,"ip_address":"","comment_id":334830,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645149364","product_id":100051801,"comment_content":"老师，ZMQ库有没有windows版的安装包？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552146,"discussion_content":"这个就不了解了，很久没用Windows，抱歉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645326821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326746,"user_name":"忧天小鸡","can_delete":false,"product_type":"c1","uid":1073947,"ip_address":"","ucode":"A1412BDC108FD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","comment_is_top":false,"comment_ctime":1639657252,"is_pvip":false,"replies":[{"id":"118721","content":"C++的库太多了，可以在GitHub上搜一下awesome C++之类的。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1639702553,"ip_address":"","comment_id":326746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639657252","product_id":100051801,"comment_content":"有流媒体udp特别适合的库吗？刚接触c++，对编译什么的还不熟","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539376,"discussion_content":"C++的库太多了，可以在GitHub上搜一下awesome C++之类的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639702553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319919,"user_name":"ydq","can_delete":false,"product_type":"c1","uid":2037482,"ip_address":"","ucode":"B3A90F5BC37F76","user_header":"https://static001.geekbang.org/account/avatar/00/1f/16/ea/c7caf466.jpg","comment_is_top":false,"comment_ctime":1636008957,"is_pvip":false,"replies":[{"id":"116016","content":"就在课程正文里，我再贴一下：<br><br>const auto thread_num = 1;              &#47;&#47; 并发线程数<br><br>zmq::context_t context(thread_num);     &#47;&#47; ZMQ环境变量<br><br>auto make_sock = [&amp;](auto mode)        &#47;&#47; 定义一个lambda表达式<br>{<br>    return zmq::socket_t(context, mode); &#47;&#47; 创建ZMQ套接字<br>};<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1636067968,"ip_address":"","comment_id":319919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636008957","product_id":100051801,"comment_content":"老师。make_sock接口的定义在哪里呢？<br>ydqun@ydqhost zmq % cat 02.cpp                                                                                                  [1]<br>&#47;*************************************************************************<br>        &gt; File Name: 02.cpp<br>        &gt; Author:<br>        &gt; Mail:<br>        &gt; Created Time: Thu 04 Nov 2021 02:30:06 PM CST<br> ************************************************************************&#47;<br>#include &lt;iostream&gt;<br>#include &lt;zmq.hpp&gt;<br><br>using namespace std;<br><br>int main() {<br>    const auto addr = &quot;ipc:&#47;&#47;&#47;dev&#47;shm&#47;zmq.sock&quot;s;  &#47;&#47;通信地址<br><br>    auto recviver = [=]()<br>    {<br>        auto sock = make_sock(ZMQ_PULL);<br><br>        sock.bind(addr);<br>        assert(sock.connected());<br><br>        zmq::message_t msg;<br>        sock.recv(&amp;msg);<br><br>        string s = {msg.data&lt;char&gt;(), msg.size()};<br>        cout &lt;&lt; s &lt;&lt; endl;<br>    };<br><br>    auto sender = [=]()<br>    {<br>        auto sock = make_sock(ZMQ_PUSH);<br><br>        sock.connect(addr);<br>        assert(sock.connected());<br><br>        string s = &quot;hello zmq&quot;;<br>        sock.send(s.data(), s.size());<br>    };<br><br>    sender();<br><br>    recviver();<br><br>    return 0;<br>}<br><br><br><br>ydqun@ydqhost zmq % g++ 02.cpp   -lzmq                                                                                          [0]<br>02.cpp: In lambda function:<br>02.cpp:17:21: error: ‘make_sock’ was not declared in this scope<br>   17 |         auto sock = make_sock(ZMQ_PULL);<br>      |                     ^~~~~~~~~<br>02.cpp: In lambda function:<br>02.cpp:31:21: error: ‘make_sock’ was not declared in this scope<br>   31 |         auto sock = make_sock(ZMQ_PUSH);<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529812,"discussion_content":"就在课程正文里，我再贴一下：\n\nconst auto thread_num = 1;              // 并发线程数\n\nzmq::context_t context(thread_num);     // ZMQ环境变量\n\nauto make_sock = [&amp;amp;](auto mode)        // 定义一个lambda表达式\n{\n    return zmq::socket_t(context, mode); // 创建ZMQ套接字\n};\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636067968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290625,"user_name":"鲍勃","can_delete":false,"product_type":"c1","uid":1142312,"ip_address":"","ucode":"9B5E4A5B1A54E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","comment_is_top":false,"comment_ctime":1619664222,"is_pvip":false,"replies":[{"id":"105320","content":"这个还真没用过，因为我主要把zmq用在内部通信，没有加密的需求。<br><br>大概看了一下文档，感觉挺不错的，如果要在公网环境下用应该不错。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1619670737,"ip_address":"","comment_id":290625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619664222","product_id":100051801,"comment_content":"感谢老师的指点，我参考官方文档已经找到和解决丢消息的问题了。这里想请教下老师另外一个关于ZMQ问题：有个关于ZMQ Security的库CurveZMQ，不知道老师是否了解过呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519248,"discussion_content":"这个还真没用过，因为我主要把zmq用在内部通信，没有加密的需求。\n\n大概看了一下文档，感觉挺不错的，如果要在公网环境下用应该不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619670737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289401,"user_name":"鲍勃","can_delete":false,"product_type":"c1","uid":1142312,"ip_address":"","ucode":"9B5E4A5B1A54E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","comment_is_top":false,"comment_ctime":1618997744,"is_pvip":false,"replies":[{"id":"105025","content":"可能需要看一下zmq的文档，调整一下参数，比如消息缓存的数量等。<br><br>这样的问题不到现场看到具体情况是不太好给出解决办法的，抱歉了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1619056494,"ip_address":"","comment_id":289401,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1618997744","product_id":100051801,"comment_content":"使用czmq 4.1的时候遇到了比较棘手的问题：请问如何才能保证pub-sub（整个消息流框架是dealer-router-pub-sub）的消息不丢失呢，好像比较新的库都不支持可持续化的durapub&#47;sub了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518906,"discussion_content":"可能需要看一下zmq的文档，调整一下参数，比如消息缓存的数量等。\n\n这样的问题不到现场看到具体情况是不太好给出解决办法的，抱歉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619056494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","nickname":"鲍勃","note":"","ucode":"9B5E4A5B1A54E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369572,"discussion_content":"不是1ms，是10ms比较稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619083912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","nickname":"鲍勃","note":"","ucode":"9B5E4A5B1A54E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369571,"discussion_content":"我今天又研究了下官方文档，发现了我们程序存在的问题：我们没等sub与pub的连接建立完就开始发送消息了，官方文档建议sleep 1秒等连接建立来解决这个问题，这样尝试了发现确实稳定了，但是感觉1秒钟是不是太长了啊（我们的机器是Intel I7 4核），我把这个sleep改成1ms好像也没啥问题。请问老师对此有什么好的建议吗？谢谢啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619083728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1142312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","nickname":"鲍勃","note":"","ucode":"9B5E4A5B1A54E5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371161,"discussion_content":"像这种参数调整就得实验确定，依环境而定。开源的产品没有商业支持，就只能依靠文档和社区了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619671027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369571,"ip_address":""},"score":371161,"extra":""}]},{"author":{"id":1142312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","nickname":"鲍勃","note":"","ucode":"9B5E4A5B1A54E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369511,"discussion_content":"谢谢老师的回复，我先尝试按照你的建议来调整下I/O线程数和HWM来试试看，然后看能不能写个高并发的测试例做下压力测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619061054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284456,"user_name":"凌云","can_delete":false,"product_type":"c1","uid":1326161,"ip_address":"","ucode":"C5D3665C4FED40","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/51/c324a7de.jpg","comment_is_top":false,"comment_ctime":1616254101,"is_pvip":false,"replies":[{"id":"103158","content":"一般是提供一个C接口，因为C语言大部分都支持，然后在上面用其他语言去包装，这个相当于适配器模式了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1616290187,"ip_address":"","comment_id":284456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616254101","product_id":100051801,"comment_content":"罗老师，请教一下，支持多语言的库，比如zmq，源码是分别使用不同语言都实现了一遍这个库么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517354,"discussion_content":"一般是提供一个C接口，因为C语言大部分都支持，然后在上面用其他语言去包装，这个相当于适配器模式了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616290187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282829,"user_name":"Why not.","can_delete":false,"product_type":"c1","uid":1788706,"ip_address":"","ucode":"2588F0411F6F34","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/22/10df9727.jpg","comment_is_top":false,"comment_ctime":1615430607,"is_pvip":false,"replies":[{"id":"102641","content":"当然可以了，它底层调用了libcurl，对HTTP的支持是非常全面的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1615431138,"ip_address":"","comment_id":282829,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1615430607","product_id":100051801,"comment_content":"老师 您好 想问一下 cpr可以发送put方式请求吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516850,"discussion_content":"当然可以了，它底层调用了libcurl，对HTTP的支持是非常全面的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615431138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371162,"discussion_content":"C++里有一些这样的库，比如cpprestsdk、boost.beast，但都比较复杂了，自己要研究会费一些力气。\n另外，这种回复在系统里我是看不见的，偶尔来翻留言才能看见，抱歉回复晚了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619671148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788706,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4b/22/10df9727.jpg","nickname":"Why not.","note":"","ucode":"2588F0411F6F34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355432,"discussion_content":"好的 老师 我还想问下 有没有这样的一种网络库 既能做服务端又能做客户端 比如说服务端1收到了一个客户端1的请求 接收到之后给客户端1一个响应  然后将处理后的结果post给服务端2 然后还要跟服务端2进行几次交互。 如果没有这样的网络库的话     上面的处理过程应该怎么设计比较好呢？ 最近在搞这个 比较头疼  老师能否给点思路呢 感激不尽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615431748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270986,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1609339302,"is_pvip":true,"replies":[{"id":"98292","content":"可以试试C++20里新的networking库，它是基于asio的，或者升级到最新版的asio。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1609391675,"ip_address":"","comment_id":270986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609339302","product_id":100051801,"comment_content":"最近用asio做服务器，压力测试好久结果宕机在asio的内存分配中， asio默认开启了小内存分配优化 这个问题一直无法解决，堆栈信息是为一个函数对象分配内存时宕机了，调用的接口是async_write_some回调函数是传入的闭包","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512810,"discussion_content":"可以试试C++20里新的networking库，它是基于asio的，或者升级到最新版的asio。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609391675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270982,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1609338845,"is_pvip":true,"replies":[{"id":"98291","content":"asio比较复杂，内部的运行机制不是能一下子搞明白的，我也没有深度使用过，可以试试C++20里新的networking库，它是基于asio的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1609391641,"ip_address":"","comment_id":270982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609338845","product_id":100051801,"comment_content":"老师好 我最近遇到一个asio宕机的问题 在调用async_write_some的时候宕机在asio内存分配代码里，asio默认开启了一个小内存分配优化的特性，这个问题不是必现，服务器压力测试很久才可能出现一次","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512807,"discussion_content":"asio比较复杂，内部的运行机制不是能一下子搞明白的，我也没有深度使用过，可以试试C++20里新的networking库，它是基于asio的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609391641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262844,"user_name":"JY","can_delete":false,"product_type":"c1","uid":2311396,"ip_address":"","ucode":"5DE1DC047946E6","user_header":"","comment_is_top":false,"comment_ctime":1605857665,"is_pvip":false,"replies":[{"id":"95360","content":"这些都是我实际中用过的，很能够弥补C++标准的不足，希望能够帮到你。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1605859482,"ip_address":"","comment_id":262844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605857665","product_id":100051801,"comment_content":"实践得真知。老师每篇文章点出来的东西，都是好东西啊，哈哈，太好用了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509996,"discussion_content":"这些都是我实际中用过的，很能够弥补C++标准的不足，希望能够帮到你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605859482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257605,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1604041732,"is_pvip":true,"replies":[{"id":"93815","content":"cpr是对libcurl的一个包装，底层调用的还是libcurl，所以必须要安装libcurl，否则运行的时候就找不到底层库了。<br><br>至于编译命令的链接，加上-lcurl是为了保险，可以根据自己的实际情况调整。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1604043945,"ip_address":"","comment_id":257605,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604041732","product_id":100051801,"comment_content":"老师您好<br>我自己下载安装cpr，在编译项目中的cpr.cpp，使用注释中的<br>g++ cpr.cpp -std=c++14 -lcpr -lpthread -lcurl -o a.out<br>发现：&#47;usr&#47;bin&#47;ld: cannot find -lcurl<br>我把-lcurl选项去掉也能编译运行成功，请问老师-lcurl是必须的么，这里面-lcurl起到了什么作用<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508389,"discussion_content":"cpr是对libcurl的一个包装，底层调用的还是libcurl，所以必须要安装libcurl，否则运行的时候就找不到底层库了。\n\n至于编译命令的链接，加上-lcurl是为了保险，可以根据自己的实际情况调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604043945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251336,"user_name":"鲁·本","can_delete":false,"product_type":"c1","uid":1209939,"ip_address":"","ucode":"F1DEB30C21B48E","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/53/21d62a23.jpg","comment_is_top":false,"comment_ctime":1601469962,"is_pvip":false,"replies":[{"id":"91895","content":"据我所知，还没有特别全面解析的，只能自己看了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1601514701,"ip_address":"","comment_id":251336,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601469962","product_id":100051801,"comment_content":"老师，有没有zmq源码剖析相关的资料，我想深入学习下他是如何做到高性能的.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506453,"discussion_content":"据我所知，还没有特别全面解析的，只能自己看了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601514701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249193,"user_name":"Why not.","can_delete":false,"product_type":"c1","uid":1788706,"ip_address":"","ucode":"2588F0411F6F34","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/22/10df9727.jpg","comment_is_top":false,"comment_ctime":1600497594,"is_pvip":false,"replies":[{"id":"91422","content":"我觉得这个应该取决于你服务器端的并发模型，如果用多线程，那么可能就基于标准库里的thread。<br><br>C++的网络库有很多，但并没有一个大家公认的，我个人认为boost的asio算是比较好的吧，是C++20里网络库的前身，在上面写高级协议可以用boost.beast。<br><br>其他的可以用关键字搜，比如libevent什么的，也都各有所长，还是需要结合自己的实际需求。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1600501236,"ip_address":"","comment_id":249193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600497594","product_id":100051801,"comment_content":"老师 我想问一下  如果要处理一些并发操作 用哪个网络库比较好？就是我的一个客户端程序 使用多线程一次性发送5请求  需要让服务端接受到请求后并行处理，之后返回结果","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505861,"discussion_content":"我觉得这个应该取决于你服务器端的并发模型，如果用多线程，那么可能就基于标准库里的thread。\n\nC++的网络库有很多，但并没有一个大家公认的，我个人认为boost的asio算是比较好的吧，是C++20里网络库的前身，在上面写高级协议可以用boost.beast。\n\n其他的可以用关键字搜，比如libevent什么的，也都各有所长，还是需要结合自己的实际需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600501236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236909,"user_name":"锦鲤","can_delete":false,"product_type":"c1","uid":1343717,"ip_address":"","ucode":"B9F1495E39F00A","user_header":"https://static001.geekbang.org/account/avatar/00/14/80/e5/251d89b5.jpg","comment_is_top":false,"comment_ctime":1595581809,"is_pvip":false,"replies":[{"id":"87549","content":"rocketMQ没怎么用过，抱歉了。<br><br>zmq可以在进程间传递消息，实现高效的进程间通信，让多个进程协同工作，当然用它来实现服务也是可以的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595590625,"ip_address":"","comment_id":236909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595581809","product_id":100051801,"comment_content":"c++与RocketMQ交互的中间件有什么可以推荐的吗？这里的ZMQ更多的场景应该是用C++实现了一个MQ的服务吧？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502250,"discussion_content":"rocketMQ没怎么用过，抱歉了。\n\nzmq可以在进程间传递消息，实现高效的进程间通信，让多个进程协同工作，当然用它来实现服务也是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595590625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233607,"user_name":"群","can_delete":false,"product_type":"c1","uid":1843313,"ip_address":"","ucode":"F8A363F19DAB9B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/20/71/ad3465c0.jpg","comment_is_top":false,"comment_ctime":1594366295,"is_pvip":false,"replies":[{"id":"86224","content":"应该是链接的时候没有找libcurl，看一下cpp里的注释，添加链接选项。<br><br>g++ curl.cpp -std=c++11 -lcurl -o a.out<br><br>里面的-lcurl。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594371822,"ip_address":"","comment_id":233607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594366295","product_id":100051801,"comment_content":"老师，我把您的第一个libcurl的代码放在int main() {} 中运行， 如下<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;curl&#47;curl.h&gt;  &#47;&#47; 包含头文件<br>#include &lt;assert.h&gt;<br><br>using namespace std;<br><br>int main()<br>{<br>    auto curl = curl_easy_init();        &#47;&#47; 创建CURL句柄<br>    assert(curl);<br><br>    curl_easy_setopt(curl, CURLOPT_URL, &quot;http:&#47;&#47;nginx.org&quot;); &#47;&#47; 设置请求URI<br><br>    auto res = curl_easy_perform(curl);   &#47;&#47; 发送数据<br>    if (res != CURLE_OK) {                &#47;&#47; 检查是否执行成功<br>        cout &lt;&lt; curl_easy_strerror(res) &lt;&lt; endl;<br>    }<br><br>    curl_easy_cleanup(curl);             &#47;&#47; 清理句柄相关的资源<br>    return 0;<br>}<br>但报错显示，<br>&#47;tmp&#47;ccDJPIiv.o: In function `main&#39;:<br>Part16网络通信.cpp:(.text+0x9): undefined reference to `curl_easy_init&#39;<br>Part16网络通信.cpp:(.text+0x50): undefined reference to `curl_easy_setopt&#39;<br>Part16网络通信.cpp:(.text+0x5c): undefined reference to `curl_easy_perform&#39;<br>Part16网络通信.cpp:(.text+0x6f): undefined reference to `curl_easy_strerror&#39;<br>Part16网络通信.cpp:(.text+0x9f): undefined reference to `curl_easy_cleanup&#39;<br>collect2: error: ld returned 1 exit status<br>就是这种运行方法对吗？真的希望老师点拨一下，不知道该怎么处理这种东西？我明明已经下载了这个库，也已经成功导入curl库了，但怎么会还出现未定义呢？？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501107,"discussion_content":"应该是链接的时候没有找libcurl，看一下cpp里的注释，添加链接选项。\n\ng++ curl.cpp -std=c++11 -lcurl -o a.out\n\n里面的-lcurl。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594371822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233356,"user_name":"Ryan24G","can_delete":false,"product_type":"c1","uid":1631292,"ip_address":"","ucode":"EA1E134C18DA80","user_header":"https://static001.geekbang.org/account/avatar/00/18/e4/3c/dfcb86df.jpg","comment_is_top":false,"comment_ctime":1594296515,"is_pvip":true,"replies":[{"id":"86148","content":"<br>1.注意有大小写区别，Zmq.hpp和zmq.hpp是两个不同的文件，有大写字母的表示是我们自己写的代码。<br><br>2.zmq.h是C接口，里面都是C函数，而zmq.hpp是C++接口，可以看一下源码，就明白了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594343204,"ip_address":"","comment_id":233356,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594296515","product_id":100051801,"comment_content":"老师，我看你的源码<br>1.你自己定义了一个zmq.hpp文件，为什么在这个里面又要用#include &lt;zmq.hpp&gt;? 自己包含自己？2.还有我看网上使用zmq，都是包含&quot;zmq.h&quot; 文件，然后直接使用zmq_ctx_new之类的函数，zmq : : socket_t 显示不出来，这是为什么？ ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500992,"discussion_content":"\n1.注意有大小写区别，Zmq.hpp和zmq.hpp是两个不同的文件，有大写字母的表示是我们自己写的代码。\n\n2.zmq.h是C接口，里面都是C函数，而zmq.hpp是C++接口，可以看一下源码，就明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594343204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232431,"user_name":"老鼠阿尔吉侬","can_delete":false,"product_type":"c1","uid":2005550,"ip_address":"","ucode":"D3AAD6BF36E433","user_header":"https://static001.geekbang.org/account/avatar/00/1e/9a/2e/410554b7.jpg","comment_is_top":false,"comment_ctime":1594003167,"is_pvip":false,"replies":[{"id":"85814","content":"cpr内部还是调用的libcurl，按理来说肯定会获取完整的http响应。<br><br>我觉得你可以先看一下它的实现源码，在session.cpp:Session::Impl::makeRequest，还有util.cpp:writeFunction，或者尝试用libcurl的easy系列接口试试。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594015937,"ip_address":"","comment_id":232431,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1594003167","product_id":100051801,"comment_content":"下载了cpr，调用Get方法返回的数据太长，text只有一部分，请问老师应该调用哪个函数来拿剩下的数据呢？希望老师有时间的话能指点秘境。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500642,"discussion_content":"cpr内部还是调用的libcurl，按理来说肯定会获取完整的http响应。\n\n我觉得你可以先看一下它的实现源码，在session.cpp:Session::Impl::makeRequest，还有util.cpp:writeFunction，或者尝试用libcurl的easy系列接口试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594015937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2005550,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/9a/2e/410554b7.jpg","nickname":"老鼠阿尔吉侬","note":"","ucode":"D3AAD6BF36E433","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289219,"discussion_content":"确实是我弄错了，我比较了text的长度和content—length，是一样的！谢谢罗老师，抱歉浪费您时间！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594029243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2005550,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/9a/2e/410554b7.jpg","nickname":"老鼠阿尔吉侬","note":"","ucode":"D3AAD6BF36E433","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290096,"discussion_content":"没关系，答疑解惑是分内之事，有问题欢迎再问。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594343964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289219,"ip_address":""},"score":290096,"extra":""}]}]},{"had_liked":false,"id":227681,"user_name":"wonderNick","can_delete":false,"product_type":"c1","uid":1146813,"ip_address":"","ucode":"855ABB9B4B2404","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/bd/6ba7d5a5.jpg","comment_is_top":false,"comment_ctime":1592452265,"is_pvip":false,"replies":[{"id":"83930","content":"粘包在自己处理底层通信的时候是个很烦人的问题，zmq可以很好地解决，保证拿到的是一个完整可靠的消息。<br><br>不过要用好这些库还是要仔细阅读它们的文档，因为C++的东西都有可能有隐藏的坑，所以不了解的特性就要尽量少用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592465929,"ip_address":"","comment_id":227681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592452265","product_id":100051801,"comment_content":"老师推荐的 json for modern C++ cpr ZMQ 真的都是实用的好东西啊，看的时候就很激动。下一阶段落地到我们的项目中，预计可以使我们的工程的可读性和易用性，有较大的提升。<br>思考题：<br>1.之前我们在 局域网通信时，客户端发送至服务端的数据出现了粘包，导致数据解析出错，这个问题我们通过限定数据流长度的方式得以解决。<br>2.还没有实际应用，先上手练练，后续会回来补充答案<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498745,"discussion_content":"粘包在自己处理底层通信的时候是个很烦人的问题，zmq可以很好地解决，保证拿到的是一个完整可靠的消息。\n\n不过要用好这些库还是要仔细阅读它们的文档，因为C++的东西都有可能有隐藏的坑，所以不了解的特性就要尽量少用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592465929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226720,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1592189846,"is_pvip":false,"replies":[{"id":"83498","content":"<br>1.zmq是消息中间件，可以保证消息不丢失，准确送达。<br><br>2.rpc适用于开发请求-响应的场景，是远程调用，而zmq是更底层一些的网络传输库，所以应用范围就更广。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592198495,"ip_address":"","comment_id":226720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592189846","product_id":100051801,"comment_content":"zmq是可以做成服务端的是吧？那这个除了易用性，和其他网络库相比还有啥优势呢？另外cpp的rpc框架其实也都提供了这些功能，是否用rpc更合理？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498343,"discussion_content":"\n1.zmq是消息中间件，可以保证消息不丢失，准确送达。\n\n2.rpc适用于开发请求-响应的场景，是远程调用，而zmq是更底层一些的网络传输库，所以应用范围就更广。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592198495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226239,"user_name":"朱熙","can_delete":false,"product_type":"c1","uid":1039029,"ip_address":"","ucode":"2B9E2B8645A844","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/b5/9d1f2f55.jpg","comment_is_top":false,"comment_ctime":1592013211,"is_pvip":false,"replies":[{"id":"83335","content":"大概看了一下，挺有意思的，可惜要求gcc&gt;7，这在很多老系统上满足不了要求。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592023851,"ip_address":"","comment_id":226239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592013211","product_id":100051801,"comment_content":"老师您好，有一个caf的框架，希望可以在之后的课程里有机会能分析下优劣，是一个多线程的框架，包括线程间的通信","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498161,"discussion_content":"大概看了一下，挺有意思的，可惜要求gcc&amp;gt;7，这在很多老系统上满足不了要求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226065,"user_name":"王珏大大","can_delete":false,"product_type":"c1","uid":1026799,"ip_address":"","ucode":"20936CFC985134","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/ef/1c22b3d8.jpg","comment_is_top":false,"comment_ctime":1591942777,"is_pvip":false,"replies":[{"id":"83321","content":"这个是zmq内部的工作线程数量，开多个线程可以增加zmq的处理能力。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592004025,"ip_address":"","comment_id":226065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591942777","product_id":100051801,"comment_content":"请问老师，“ZMQ 环境的线程数” 这是什么设置吗，如何设置？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498096,"discussion_content":"这个是zmq内部的工作线程数量，开多个线程可以增加zmq的处理能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592004025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225982,"user_name":"java2c++","can_delete":false,"product_type":"c1","uid":1460660,"ip_address":"","ucode":"C4F8C3D7B1A910","user_header":"","comment_is_top":false,"comment_ctime":1591923830,"is_pvip":false,"replies":[{"id":"83253","content":"花括号是C++11的新初始化语法，和圆括号的构造函数类似，用这种形式看起来更清楚一些，也和Python比较像。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591925843,"ip_address":"","comment_id":225982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591923830","product_id":100051801,"comment_content":"cpr::Url{&quot;http:&#47;&#47;openresty.org&quot;}   &#47;&#47; 传递URL<br>);<br>URL 使用 Url 类，它其实是 string 的别名；<br><br>这个地方的语法没有看懂，Url后面跟个大括号｛｝表示什么意思，是Url的匿名子类吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498067,"discussion_content":"花括号是C++11的新初始化语法，和圆括号的构造函数类似，用这种形式看起来更清楚一些，也和Python比较像。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591925843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225972,"user_name":"幻境之桥","can_delete":false,"product_type":"c1","uid":1061517,"ip_address":"","ucode":"F9F4DD94CB554E","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","comment_is_top":false,"comment_ctime":1591921998,"is_pvip":false,"replies":[{"id":"83244","content":"很遗憾，目前C++还没有非常完善易用的高级框架，rpc框架倒是有一些。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591924028,"ip_address":"","comment_id":225972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591921998","product_id":100051801,"comment_content":"这几个库都很 nice 👍🏻<br>cpp 有类似 JAVA Netty 这样的框架吗？<br>或者上面这些有可以方便实现自定义协议的吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498062,"discussion_content":"很遗憾，目前C++还没有非常完善易用的高级框架，rpc框架倒是有一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591924028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225956,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1591919027,"is_pvip":false,"replies":[{"id":"83246","content":"不支持，它用的是自己的协议，不走标准。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591924099,"ip_address":"","comment_id":225956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591919027","product_id":100051801,"comment_content":"zmp是否支持websocket？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498054,"discussion_content":"不支持，它用的是自己的协议，不走标准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591924099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225712,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1053390,"ip_address":"","ucode":"ABB3F1A63E102A","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/ce/a8c8b5e8.jpg","comment_is_top":false,"comment_ctime":1591838499,"is_pvip":false,"replies":[{"id":"83175","content":"<br>1.系统的问题，libcurl肯定解决不了，得外部调整。<br><br>2.可以用函数Curl_sndbufset()调整，源码在lib&#47;connect.c。不过我看它只在Windows上生效，Linux下是空的，所以在linux上应该不需要用这个。可以用libcurl试验一下，我还没有遇到过你这样的问题。<br><br>3.zmq不用担心这个问题，它属于mq，会自动处理大数据。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591844134,"ip_address":"","comment_id":225712,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591838499","product_id":100051801,"comment_content":"前段时间遇到过一个问题，通过http发送图片数据老是发送不全，最终定位到有两个原因：一是因为Linux 系统的TCP 缓冲区太小，通过&#47;etc&#47;sysctl.conf设置解决；二是因为代码中socket的SO_SNDBUF参数不够大，通过setsockopt函数重新设置解决。如果用老师说的这三个库来开发的话，不知道会不会遇到上面的问题？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497959,"discussion_content":"\n1.系统的问题，libcurl肯定解决不了，得外部调整。\n\n2.可以用函数Curl_sndbufset()调整，源码在lib/connect.c。不过我看它只在Windows上生效，Linux下是空的，所以在linux上应该不需要用这个。可以用libcurl试验一下，我还没有遇到过你这样的问题。\n\n3.zmq不用担心这个问题，它属于mq，会自动处理大数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591844134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}