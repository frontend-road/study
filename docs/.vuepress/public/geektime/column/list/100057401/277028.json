{"id":277028,"title":"07 | 数据复制：为什么有时候Paxos不是最佳选择？","content":"<p>你好，我是王磊，你也可以叫我Ivan。今天，我们要学习的是数据复制。</p><p>数据复制是一个老生常谈的话题了，典型的算法就是Paxos和Raft。只要你接触过分布式，就不会对它们感到陌生。经过从业者这些年的探索和科普，网上关于Paxos和Raft算法的高质量文章也是一搜一大把了。</p><p>所以，今天这一讲我不打算全面展开数据复制的方方面面，而是会聚焦在与分布式数据库相关的，比较重要也比较有意思的两个知识点上，这就是分片元数据的存储和数据复制的效率。</p><h2>分片元数据的存储</h2><p>我们知道，在任何一个分布式存储系统中，收到客户端请求后，承担路由功能的节点首先要访问分片元数据（简称元数据），确定分片对应的节点，然后才能访问真正的数据。这里说的元数据，一般会包括分片的数据范围、数据量、读写流量和分片副本处于哪些物理节点，以及副本状态等信息。</p><p>从存储的角度看，元数据也是数据，但特别之处在于每一个请求都要访问它，所以元数据的存储很容易成为整个系统的性能瓶颈和高可靠性的短板。如果系统支持动态分片，那么分片要自动地分拆、合并，还会在节点间来回移动。这样，元数据就处在不断变化中，又带来了多副本一致性（Consensus）的问题。</p><p>下面，让我们看看，不同的产品具体是如何存储元数据的。</p><!-- [[[read_end]]] --><h3>静态分片</h3><p>最简单的情况是静态分片。我们可以忽略元数据变动的问题，只要把元数据复制多份放在对应的工作节点上就可以了，这样同时兼顾了性能和高可靠。TBase大致就是这个思路，直接将元数据存储在协调节点上。即使协调节点是工作节点，随着集群规模扩展，会导致元数据副本过多，但由于哈希分片基本上就是静态分片，也就不用考虑多副本一致性的问题。</p><p>但如果要更新分片信息，这种方式显然不适合，因为副本数量过多，数据同步的代价太大了。所以对于动态分片，通常是不会在有工作负载的节点上存放元数据的。</p><p>那要怎么设计呢？有一个凭直觉就能想到的答案，那就是专门给元数据搞一个小规模的集群，用Paxos协议复制数据。这样保证了高可靠，数据同步的成本也比较低。</p><p>TiDB大致就是这个思路，但具体的实现方式会更巧妙一些。</p><h3>TiDB：无服务状态</h3><p>在TiDB架构中，TiKV节点是实际存储分片数据的节点，而元数据则由Placement Driver节点管理。Placement Driver这个名称来自Spanner中对应节点角色，简称为PD。</p><p>在PD与TiKV的通讯过程中，PD完全是被动的一方。TiKV节点定期主动向PD报送心跳，分片的元数据信息也就随着心跳一起报送，而PD会将分片调度指令放在心跳的返回信息中。等到TiKV下次报送心跳时，PD就能了解到调度的执行情况。</p><p>由于每次TiKV的心跳中包含了全量的分片元数据，PD甚至可以不落盘任何分片元数据，完全做成一个无状态服务。这样的好处是，PD宕机后选举出的新主根本不用处理与旧主的状态衔接，在一个心跳周期后就可以工作了。当然，在具体实现上，PD仍然会做部分信息的持久化，这可以认为是一种缓存。</p><p>我将这个通讯过程画了下来，希望帮助你理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/61/946f37b234790208a6643b5703e65d61.jpg?wh=2700*1711\" alt=\"\"></p><p>三个TiKV节点每次上报心跳时，由主副本（Leader）提供该分片的元数据，这样PD可以获得全量且没有冗余的信息。</p><p>虽然无状态服务有很大的优势，但PD仍然是一个单点，也就是说这个方案还是一个中心化的设计思路，可能存在性能方面的问题。</p><p>有没有完全“去中心化”的设计呢？当然是有的。接下来，我们就看看P2P架构的CockroachDB是怎么解决这个问题的。</p><h3>CockroachDB：去中心化</h3><p>CockroachDB的解决方案是使用Gossip协议。你是不是想问，为什么不用Paxos协议呢？</p><p>这是因为Paxos协议本质上是一种广播机制，也就是由一个中心节点向其他节点发送消息。当节点数量较多时，通讯成本就很高。</p><p>CockroachDB采用了P2P架构，每个节点都要保存完整的元数据，这样节点规模就非常大，当然也就不适用广播机制。而Gossip协议的原理是谣言传播机制，每一次谣言都在几个人的小范围内传播，但最终会成为众人皆知的谣言。这种方式达成的数据一致性是 “最终一致性”，即执行数据更新操作后，经过一定的时间，集群内各个节点所存储的数据最终会达成一致。</p><p>看到这，你可能有点晕。我们在<a href=\"https://time.geekbang.org/column/article/272104\">第2讲</a>就说过分布式数据库是强一致性的，现在搞了个最终一致性的元数据，能行吗？</p><p>这里我先告诉你结论，<strong>CockroachDB真的是基于“最终一致性”的元数据实现了强一致性的分布式数据库</strong>。我画了一张图，我们一起走下这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/23/3afa38b9a29e2ecfa17f6b809c1e2123.jpg?wh=2700*1742\" alt=\"\"></p><ol>\n<li>节点A接到客户端的SQL请求，要查询数据表T1的记录，根据主键范围确定记录可能在分片R1上，而本地元数据显示R1存储在节点B上。</li>\n<li>节点A向节点B发送请求。很不幸，节点A的元数据已经过时，R1已经重新分配到节点C。</li>\n<li>此时节点B会回复给节点A一个非常重要的信息，R1存储在节点C。</li>\n<li>节点A得到该信息后，向节点C再次发起查询请求，这次运气很好R1确实在节点C。</li>\n<li>节点A收到节点C返回的R1。</li>\n<li>节点A向客户端返回R1上的记录，同时会更新本地元数据。</li>\n</ol><p>可以看到，CockroachDB在寻址过程中会不断地更新分片元数据，促成各节点元数据达成一致。</p><p>看完TiDB和CockroachDB的设计，我们可以做个小结了。复制协议的选择和数据副本数量有很大关系：如果副本少，参与节点少，可以采用广播方式，也就是Paxos、Raft等协议；如果副本多，节点多，那就更适合采用Gossip协议。</p><h2>复制效率</h2><p>说完了元数据的存储，我们再看看今天的第二个知识点，也就是数据复制效率的问题，具体来说就是Raft与Paxos在效率上的差异，以及Raft的一些优化手段。在分布式数据库中，采用Paxos协议的比较少，知名产品就只有OceanBase，所以下面的差异分析我们会基于Raft展开。</p><h3>Raft的性能缺陷</h3><p>我们可以在网上看到很多比较Paxos和Raft的文章，它们都会提到在复制效率上Raft会差一些，主要原因就是Raft必须“顺序投票”，不允许日志中出现空洞。在我看来，顺序投票确实是影响Raft算法复制效率的一个关键因素。</p><p>接下来，我们就分析一下为什么“顺序投票”对性能会有这么大的影响。</p><p>我们先看一个完整的Raft日志复制过程：</p><ol>\n<li>Leader 收到客户端的请求。</li>\n<li>Leader 将请求内容（即Log Entry）追加（Append）到本地的Log。</li>\n<li>Leader 将Log Entry 发送给其他的 Follower。</li>\n<li>Leader 等待 Follower 的结果，如果大多数节点提交了这个 Log，那么这个Log Entry就是Committed Entry，Leader就可以将它应用（Apply）到本地的状态机。</li>\n<li>Leader 返回客户端提交成功。</li>\n<li>Leader 继续处理下一次请求。</li>\n</ol><p>以上是单个事务的运行情况。那么，当多事务并行操作时，又是什么样子的呢？我画了张图来演示这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/2b/c46f44da1ae27ffe6545c3d00964ba2b.jpg?wh=2700*1707\" alt=\"\"></p><p>我们设定这个Raft组由5个节点组成，T1到T5是先后发生的5个事务操作，被发送到这个Raft组。</p><p>事务T1的操作是将X置为1，5个节点都Append成功，Leader节点Apply到本地状态机，并返回客户端提交成功。事务T2执行时，虽然有一个Follower没有响应，但仍然得到了大多数节点的成功响应，所以也返回客户端提交成功。</p><p>现在，轮到T3事务执行，没有得到超过半数的响应，这时Leader必须等待一个明确的失败信号，比如通讯超时，才能结束这次操作。因为有顺序投票的规则，T3会阻塞后续事务的进行。T4事务被阻塞是合理的，因为它和T3操作的是同一个数据项，但是T5要操作的数据项与T3无关，也被阻塞，显然这不是最优的并发控制策略。</p><p>同样的情况也会发生在Follower节点上，第一个Follower节点可能由于网络原因没有收到T2事务的日志，即使它先收到T3的日志，也不会执行Append操作，因为这样会使日志出现空洞。</p><p>Raft的顺序投票是一种设计上的权衡，虽然性能有些影响，但是节点间日志比对会非常简单。在两个节点上，只要找到一条日志是一致的，那么在这条日志之前的所有日志就都是一致的。这使得选举出的Leader与Follower同步数据非常便捷，开放Follower读操作也更加容易。要知道，我说的可是保证一致性的Follower读操作，它可以有效分流读操作的访问压力。这一点我们在24讲再详细介绍。</p><h3>Raft的性能优化方法（TiDB）</h3><p>当然，在真正的工程实现中，Raft主副本也不是傻傻地挨个处理请求，还是有一些优化手段的。TiDB的官方文档对Raft优化说得比较完整，我们这里引用过来，着重介绍下它的四个优化点。</p><ol>\n<li><strong>批操作（Batch）。</strong>Leader 缓存多个客户端请求，然后将这一批日志批量发送给 Follower。Batch的好处是减少的通讯成本。</li>\n<li><strong>流水线（Pipeline）。</strong>Leader本地增加一个变量（称为NextIndex），每次发送一个Batch后，更新NextIndex记录下一个Batch的位置，然后不等待Follower返回，马上发送下一个Batch。如果网络出现问题，Leader重新调整NextIndex，再次发送Batch。当然，这个优化策略的前提是网络基本稳定。</li>\n<li><strong>并行追加日志（Append Log Parallelly）。</strong>Leader将Batch发送给Follower的同时，并发执行本地的Append操作。因为Append是磁盘操作，开销相对较大，而标准流程中Follower与Leader的Append是先后执行的，当然耗时更长。改为并行就可以减少部分开销。当然，这时Committed Entry的判断规则也要调整。在并行操作下，即使Leader没有Append成功，只要有半数以上的Follower节点Append成功，那就依然可以视为一个Committed Entry，Entry可以被Apply。</li>\n<li><strong>异步应用日志（Asynchronous Apply）。</strong>Apply并不是提交成功的必要条件，任何处于Committed状态的Log Entry都确保是不会丢失的。Apply仅仅是为了保证状态能够在下次被正确地读取到，但多数情况下，提交的数据不会马上就被读取。因此，Apply是可以转为异步执行的，同时读操作配合改造。</li>\n</ol><p>其实，Raft算法的这四项优化并不是TiDB独有的，CockroachDB和一些Raft库也做了类似的优化。比如，SOFA-JRaft也实现了Batch和Pipeline优化。</p><p>不知道你有没有听说过etcd，它是最早的、生产级的Raft协议开源实现，TiDB和CockroachDB都借鉴了它的设计。甚至可以说，它们选择Raft就是因为etcd提供了可靠的工程实现，而Paxos则没有同样可靠的工程实现。既然是开源，为啥不直接用呢？因为etcd是单Raft组，写入性能受限。所以，TiDB和CockroachDB都改造成多个Raft组，这个设计被称为Multi Raft，所有采用Raft协议的分布式数据库都是Multi Raft。这种设计，可以让多组并行，一定程度上规避了Raft的性能缺陷。</p><p>同时，Raft组的大小，也就是分片的大小也很重要，越小的分片，事务阻塞的概率就越低。TiDB的默认分片大小是96M，CockroachDB的分片不超过512M。那么，TiDB的分片更小，就是更好的设计吗？也未必，因为分片过小又会增加扫描操作的成本，这又是另一个权衡点了。</p><h2>小结</h2><p>好了，今天的内容就到这里。我们一起回顾下这节课的重点。</p><ol>\n<li>分片元数据的存储是分布式数据库的关键设计，要满足性能和高可靠两方面的要求。静态分片相对简单，可以直接通过多副本分散部署的方式实现。</li>\n<li>动态分片，满足高可靠的同时还要考虑元数据的多副本一致性，必须选择合适的复制协议。如果搭建独立的、小规模元数据集群，则可以使用Paxos或Raft等协议，传播特点是广播。如果元数据存在工作节点上，数量较多则可以考虑Gossip协议，传播特点是谣言传播。虽然Gossip是最终一致性，但通过一些寻址过程中的巧妙设计，也可以满足分布式数据的强一致性要求。</li>\n<li>Paxos和Raft是广泛使用的复制协议，也称为共识算法，都是通过投票方式动态选主，可以保证高可靠和多副本的一致性。Raft算法有“顺序投票”的约束，可能出现不必要的阻塞，带来额外的损耗，性能略差于Paxos。但是，etcd提供了优秀的工程实现，促进了Raft更广泛的使用，而etcd的出现又有Raft算法易于理解的内因。</li>\n<li>分布式数据库产品都对Raft做了一定的优化，另外采用Multi Raft设计实现多组并行，再通过控制分片大小，降低事务阻塞概率，提升整体性能。</li>\n</ol><p>讲了这么多，回到我们最开始的问题，为什么有时候Paxos不是最佳选择呢？一是架构设计方面的原因，看参与复制的节点规模，规模太大就不适合采用Paxos，同样也不适用其他的共识算法。二是工程实现方面的原因，在适用共识算法的场景下，选择Raft还是Paxos呢？因为Paxos没有一个高质量的开源实现，而Raft则有etcd这个不错的工程实现，所以Raft得到了更广泛的使用。这里的深层原因还是Paxos算法本身过于复杂，直到现在，实现Raft协议的开源项目也要比Paoxs更多、更稳定。</p><p>有关分片元数据的存储，在我看来，TiDB和CockroachDB的处理方式都很优雅，但是TiDB的方案仍然建立在PD这个中心点上，对集群的整体扩展性，对于主副本跨机房、跨地域部署，有一定的局限性。</p><p>关于Raft的优化方法，大的思路就是并行和异步化，其实这也是整个分布式系统中常常采用的方法，在第10讲原子协议的优化中我们还会看到类似的案例。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/6e/1a8c2e11b0072edd80c3bd3e5f4dca6e.jpg?wh=2700*2314\" alt=\"\"></p><h2>思考题</h2><p>最后是今天的思考题时间。我们在<a href=\"https://time.geekbang.org/column/article/271373\">第1讲</a>就提到过分布式数据库具备海量存储能力，那么你猜，这个海量有上限吗？或者说，你觉得分布式数据库的存储容量会受到哪些因素的制约呢？欢迎你在评论区留言和我一起讨论，我会在答疑篇回复这个问题。</p><p>你是不是也经常听到身边的朋友讨论数据复制的相关问题呢，而且得出的结论有可能是错的？如果有的话，希望你能把今天这一讲分享给他/她，我们一起来正确地理解分布式数据库的数据复制是怎么一回事。</p>","comments":[{"had_liked":false,"id":244084,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1598398703,"is_pvip":false,"replies":[{"id":"89878","content":"说的很好，点赞","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598408900,"ip_address":"","comment_id":244084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96087679215","product_id":100057401,"comment_content":"我认为分布式数据库的瓶颈可能在于两个方面:<br>1. 元数据，元数据过多的情况下，可能需要多层查找，才能找到数据的节点，由此降低了性能。<br>2. 心跳包，如果网络中太多节点，那么心跳包也会占用相当多的带宽，影响IO性能","like_count":23,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504473,"discussion_content":"说的很好，点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598408900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243705,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1598253239,"is_pvip":false,"replies":[{"id":"89794","content":"这个思路非常赞，我再补充一下，集群规模增大对于局部业务来说，可能是不受影响，因为局部业务的分片和节点说可能并未增多。但是元数据是所有业务都会访问的，就会收到规模增大的影响。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598264536,"ip_address":"","comment_id":243705,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44547926199","product_id":100057401,"comment_content":"我觉得容量上限主要受制于业务场景，为了提高性能需要增加分片，但是分片多了以后，为了达到一致性的要求，节点太多影响通讯和数据复制的成本，这两个方面权衡一下就决定了容量的上限","like_count":11,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504368,"discussion_content":"这个思路非常赞，我再补充一下，集群规模增大对于局部业务来说，可能是不受影响，因为局部业务的分片和节点说可能并未增多。但是元数据是所有业务都会访问的，就会收到规模增大的影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598264536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301090,"discussion_content":"我觉得分片多了应该不太影响一致性要求吧，毕竟每一个分片是自己做数据冗余的，分片多了只是管理的成本，也就是元数据的一致性很难管理，在原数据管理这里可能出现瓶颈，这里就可以用zk来存，增加读吞吐，一般range改变也发生的少。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598405382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326176,"discussion_content":"用zk如果跨机房部署网络抖动分区会各种问题..","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605538219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301090,"ip_address":""},"score":326176,"extra":""}]}]},{"had_liked":false,"id":243787,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598276546,"is_pvip":false,"replies":[{"id":"89876","content":"基本正确，我再提示一下。Region之间的数据是不同的，所以任何情况下Region间都没有主副本关系。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598408749,"ip_address":"","comment_id":243787,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14483178434","product_id":100057401,"comment_content":"老师看看我对Multi Raft的理解对不对。<br>一个Raft Group存储一个Region的多副本。例如TiDB默认副本数是３，那么一个Raft Group就是３个副本。同时一个节点可能有上千个Region（一般这些Region都不互为副本），每一个Region都属于一个Raft Group，那么也就是说这个节点可能参与上千个Raft Group。每个Raft Group又会选举出一个节点作为Raft Leader，负责写入数据。","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504395,"discussion_content":"基本正确，我再提示一下。Region之间的数据是不同的，所以任何情况下Region间都没有主副本关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598408749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","nickname":"妥协","note":"","ucode":"7201DFE9C12669","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570720,"discussion_content":"说的好呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651892006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243680,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1598248731,"is_pvip":false,"replies":[{"id":"89795","content":"嗯嗯，所以学习的过程也是收获感满满","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598264607,"ip_address":"","comment_id":243680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14483150619","product_id":100057401,"comment_content":"佩服这些协议的理论提出者，更佩服协议的工程实现者","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504359,"discussion_content":"嗯嗯，所以学习的过程也是收获感满满","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598264607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251181,"user_name":"wy","can_delete":false,"product_type":"c1","uid":1064681,"ip_address":"","ucode":"41C1B304E7F032","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","comment_is_top":false,"comment_ctime":1601390386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10191324978","product_id":100057401,"comment_content":"使用gossip协议的话，必须保证至少存在一个节点有正确的元数据","like_count":2,"discussions":[{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335535,"discussion_content":"raft/paxos也不能解决拜占庭问题..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608215798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247219,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1599636003,"is_pvip":false,"replies":[{"id":"90780","content":"Gossip达成共识不比Raft更快，CRDB选择它，因为它不是广播机制。而节点规模很大是广播机制的通讯成本太高。TiDB和其他数据库的元数据节点规模很小，所以适用Raft","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1599637716,"ip_address":"","comment_id":247219,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10189570595","product_id":100057401,"comment_content":"老师，看到你的文章中对比了Gossip和Raft&#47;Paxos这种算法，能说明一下如果Gossip共识时间更短，为什么TiDB等数据库不选择呢？为什么它更适合多节点？是因为它把网络I&#47;O分散到多个节点上吗？可是这也带来了一定的串行性呀！<br>BTW, Gossip达成共识要比Raft和Paxos要快么？","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505344,"discussion_content":"Gossip达成共识不比Raft更快，CRDB选择它，因为它不是广播机制。而节点规模很大是广播机制的通讯成本太高。TiDB和其他数据库的元数据节点规模很小，所以适用Raft","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599637716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326178,"discussion_content":"主要还是因为元信息存储在数据节点中, p2p模式..类似于redis-cluster","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605538388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299673,"user_name":"淡漠落寞","can_delete":false,"product_type":"c1","uid":1049550,"ip_address":"","ucode":"17FF0A02D13098","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/ce/ec3b8de9.jpg","comment_is_top":false,"comment_ctime":1624788934,"is_pvip":false,"replies":[{"id":"108728","content":"1.客户端访问节点时并不考虑节点的元数据情况，是由不同的负载均衡策略决定。<br>2.多数节点的元数据变更在实际数据迁移之后。根据gossip协议原理，数据一致性收敛会有个过程。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1624885594,"ip_address":"","comment_id":299673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919756230","product_id":100057401,"comment_content":"老师，想请教一下关于cockroachdb里的gossip相关的问题：<br>1 客户端是如何知道要往哪个节点发送请求的呢？<br>2 range的分裂场景下，节点的分片元数据信息的变更和节点的实际数据的迁移的先后顺序是怎么样的呢？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522504,"discussion_content":"1.客户端访问节点时并不考虑节点的元数据情况，是由不同的负载均衡策略决定。\n2.多数节点的元数据变更在实际数据迁移之后。根据gossip协议原理，数据一致性收敛会有个过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624885594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280866,"user_name":"xyx","can_delete":false,"product_type":"c1","uid":2250114,"ip_address":"","ucode":"1AECC9DDAC3D11","user_header":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","comment_is_top":false,"comment_ctime":1614430690,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5909397986","product_id":100057401,"comment_content":"&quot;Leader 等待 Follower 的结果，如果大多数节点提交了这个 Log，那么这个 Log Entry 就是 Committed Entry，Leader 就可以将它应用（Apply）到本地的状态机。&quot;<br><br>这里表述有点小问题: 应该是leader等大多数节点append了这个log, leader才能commit(commit日志可以任何时候再apply). leader先commit, 下一个心跳中follower才会commit.","like_count":1,"discussions":[{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352199,"discussion_content":"哦 应该是一个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614647249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253793,"user_name":"Geek_81c7c9","can_delete":false,"product_type":"c1","uid":1638611,"ip_address":"","ucode":"60E7FA04D44CB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/d3/ef5d2af0.jpg","comment_is_top":false,"comment_ctime":1602898358,"is_pvip":false,"replies":[{"id":"92735","content":"PGXC并没有使用Raft，还是基于单体数据库的主从复制，NewSQL产品则是在Raft和Paxos中选择，多数是Raft。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1602918640,"ip_address":"","comment_id":253793,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5897865654","product_id":100057401,"comment_content":"引用一下王老师对PGXC和NEWSQL的观点：<br>PGXC（raft）有稳定的工程实现；<br>NEWSQL（paxos）有更先进的设计思想；<br>从更容易落地的角度出发，raft确实更适合；<br>从更长远、更能有效规避潜在风险的角度出发，还是得上paxos，毕竟两大国民APP（支付宝ob、微信PhxPaxos）背后都是它对吧~","like_count":2,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507183,"discussion_content":"PGXC并没有使用Raft，还是基于单体数据库的主从复制，NewSQL产品则是在Raft和Paxos中选择，多数是Raft。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602918640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638611,"avatar":"https://static001.geekbang.org/account/avatar/00/19/00/d3/ef5d2af0.jpg","nickname":"Geek_81c7c9","note":"","ucode":"60E7FA04D44CB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313181,"discussion_content":"paxos（类似newsql）2017年前几乎看不到开源的工程实践，但做好了可以解决从有到优的问题；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602990885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638611,"avatar":"https://static001.geekbang.org/account/avatar/00/19/00/d3/ef5d2af0.jpg","nickname":"Geek_81c7c9","note":"","ucode":"60E7FA04D44CB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313180,"discussion_content":"我前面表达有歧义，本意是从实现难度的角度做个类比：raft（类似pgxc）有大量工程实现，可以快速解决从无到有的问题；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602990772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244249,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1598441465,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5893408761","product_id":100057401,"comment_content":"Paxos不是有一个工业级实现，ZAB么？","like_count":1,"discussions":[{"author":{"id":1257418,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","nickname":"梦想的优惠券","note":"","ucode":"D3B44F6C618CA7","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407512,"discussion_content":"zab是从paxos演化而来的，zab协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635043379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161637,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b9/a5/c16157b6.jpg","nickname":"Young","note":"","ucode":"343332673F1A35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327474,"discussion_content":"Zab是最终一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605846711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326174,"discussion_content":"zab更像是raft..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605537762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244126,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1598406312,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5893373608","product_id":100057401,"comment_content":"如果分片信息由单节点管理的话这个分布式数据库是会有瓶颈的，但不是存储瓶颈（像bigtable那样，就像个多级页表一样，最大存储2^61字节数据），是访问瓶颈（当然是不是还需要测试），但也就是因为访问瓶颈就可能导致数据存储是有上限的，但是如果像spanner一样，把每个分布式数据库看做一个spannerserver，再建立一层，就像zone去管理spannerserver，然后再有一层去管理zone，这样貌似就可以无限扩展了，当然说着简单，做起来就太难了。还有对于无主架构中gossip传播集群分片信息，就像redis cluster一样，我觉得瓶颈在于每台机器要存储全部的分片信息，当机器多了以后单机光存储这个就是一个巨大的开销，这也是一个限制的因素吧。","like_count":1,"discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326179,"discussion_content":"我觉得redis cluster这种p2p+gossip集群模式, 元数据本身的数据量应该还好, 主要是通信上的开销","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605538555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243819,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1598282138,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5893249434","product_id":100057401,"comment_content":"分片信息不需要强一致性，更强调ap吧？所以paxos不一定是最好的选择，就像服务发现也是ap型。","like_count":1,"discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326177,"discussion_content":"元数据独立集群部署的情况下还是需要强一致性的, 因为slots/range等元信息只有元数据服务维护, 一旦不一致或者丢失没办法恢复的(相对于p2p+gossip(cockroach/redis-cluster))","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605538243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243785,"user_name":"OliviaHu","can_delete":false,"product_type":"c1","uid":1505322,"ip_address":"","ucode":"7316E79FBFD5ED","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0Qwib3PcoRRxTZSoxAdJ1hELibJeoEqSKP6Ksyu0e7MrGickk1COuv6oQ1w9W2kqM8gUg0Oj057UBw/132","comment_is_top":false,"comment_ctime":1598275868,"is_pvip":false,"replies":[{"id":"89877","content":"全局时间戳貌似解决不了这个问题，R1过期是因为与实际数据存储不符，而原来承载R1的节点会记录R1的去向，可以再次路由","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598408880,"ip_address":"","comment_id":243785,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5893243164","product_id":100057401,"comment_content":"老师，咨询下，CockroachDB是如何判断R1分片的元数据过期的呢？全局时间戳吗？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504393,"discussion_content":"全局时间戳貌似解决不了这个问题，R1过期是因为与实际数据存储不符，而原来承载R1的节点会记录R1的去向，可以再次路由","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598408880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243598,"user_name":"武功不高","can_delete":false,"product_type":"c1","uid":1072190,"ip_address":"","ucode":"E7EA0A765F87A8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/3e/a9c91e9f.jpg","comment_is_top":false,"comment_ctime":1598226420,"is_pvip":false,"replies":[{"id":"89772","content":"嗯，慢慢来，有问题就留言讨论","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598234148,"ip_address":"","comment_id":243598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5893193716","product_id":100057401,"comment_content":"额，全是新知识，有点懵懵，需要好好消化消化……<br>","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504333,"discussion_content":"嗯，慢慢来，有问题就留言讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598234148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339502,"user_name":"家乐","can_delete":false,"product_type":"c1","uid":1301941,"ip_address":"","ucode":"94F8720B59F221","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJia90ErsTQtNDNeyTWNwWjicERicXj72b4xgbvru2IkUdrLxrgJb5lCrTaiaW2iaX3mOYiaV8vYo3voWlg/132","comment_is_top":false,"comment_ctime":1648136576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648136576","product_id":100057401,"comment_content":"即客订阅了很多门课程，印象最深或者说体验感，学习理解度最好的就是王磊老师的分布式数据库，林晓斌老师的MySQL45讲。受益匪浅。不仅是技术好，而且都很谦虚。回复同学也很多。再次感谢老师的分享。","like_count":0},{"had_liked":false,"id":275016,"user_name":"kafka","can_delete":false,"product_type":"c1","uid":1310147,"ip_address":"","ucode":"D8189D71C0F3C6","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/c3/565f0c57.jpg","comment_is_top":false,"comment_ctime":1611278199,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611278199","product_id":100057401,"comment_content":"为什么PD要做无状态的设计呢？把分片信息持久化，不需要数据节点向元数据发心跳包不是更稳定性的选择吗？","like_count":0,"discussions":[{"author":{"id":1447496,"avatar":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","nickname":"郑泽洲","note":"","ucode":"EA1B540A040875","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543272,"discussion_content":"分片信息持久化必然带来一致性问题需要解决，另外心跳包是分布式节点管理中必需的。无状态设计的好处文中说了是旧主挂了后，新主上位流程比较简单，不需要和旧主同步，当然我认为无状态设计也有一定的损耗，就是心跳报文会比较大些，但是这是一种权衡吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641041134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273137,"user_name":"antz","can_delete":false,"product_type":"c1","uid":1005589,"ip_address":"","ucode":"BDFDED6D7F0BD2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/15/56f4e62a.jpg","comment_is_top":false,"comment_ctime":1610454119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610454119","product_id":100057401,"comment_content":"关于数据复制，需要保证副本节点数据一致问题：<br><br>raft算法可以应用到业务数据层面吗？非分片规则数据？如果不行，有什么更好的方案吗？业务数据量比较大","like_count":0},{"had_liked":false,"id":264457,"user_name":"Geek_d560e0","can_delete":false,"product_type":"c1","uid":2344782,"ip_address":"","ucode":"064A1AE69F5BC5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkkzHH7lKmxHdJmZW4niaUNicmZwVr8usAxDp93RgicDSicoVpict2ezIexpnTEs5dZQibQdt1V0UMlCUg/132","comment_is_top":false,"comment_ctime":1606470737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606470737","product_id":100057401,"comment_content":"老师，mgr算不算是一个比较好的Paxos工程实现呢?","like_count":0},{"had_liked":false,"id":260985,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1605167193,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605167193","product_id":100057401,"comment_content":"收获满满","like_count":0},{"had_liked":false,"id":258042,"user_name":"星之柱","can_delete":false,"product_type":"c1","uid":1496497,"ip_address":"","ucode":"95F3DF9CE46B57","user_header":"https://static001.geekbang.org/account/avatar/00/16/d5/b1/1007b5d2.jpg","comment_is_top":false,"comment_ctime":1604277809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604277809","product_id":100057401,"comment_content":"tidb的分片的的分裂等复杂的逻辑还是pd来管理的吧，tikv的心跳只是为了汇报每个分片的状态","like_count":0},{"had_liked":false,"id":243778,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1598273037,"is_pvip":true,"replies":[{"id":"89798","content":"zk也是一个保证数据高可靠存储的小集群呀，和etcd是一个道理。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598278884,"ip_address":"","comment_id":243778,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598273037","product_id":100057401,"comment_content":"hbase 的 root 表位置放到zk上，root 表找到meta表， 再找到region表，这种方式好像和老师说的不同哦。 hbase不是分布式数据库，所以可以不一样的实现？","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504391,"discussion_content":"zk也是一个保证数据高可靠存储的小集群呀，和etcd是一个道理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598278884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}