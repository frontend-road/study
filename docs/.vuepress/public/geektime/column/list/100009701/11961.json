{"id":11961,"title":"10 | 让环境自己说话，论环境自描述的重要性","content":"<p>在前两篇文章中，我从现实需求、成本与效率的角度，分析了对环境管理者来说最重要的一个问题，即到底需要多少套环境来支撑持续交付。如果你已经从中能掌握了一些环境管理的窍门，那么你基本就可以搞定对环境管理的宏观把控了。</p>\n<p>但是，除了宏观的把控和管理外，即使只有一套环境，你还是有可能陷入无穷无尽的细节工作中。因为在日常的环境管理过程中，环境配置才是工作的重头和难点。那么今天，我就来跟你详细说说有关环境配置的问题。</p>\n<p><strong>从我的实践经验看，要想把环境配置这件事做好，就是要做到让环境自己能说话。</strong></p>\n<p>要做到这点，首先需要定义配置的范围。</p>\n<p>从面向的目标来看，环境配置大体上可以分为两大部分：</p>\n<ol>\n<li>\n<p>以环境中每台服务器为对象的运行时配置；</p>\n</li>\n<li>\n<p>以一个环境为整体目标的独立环境配置。</p>\n</li>\n</ol>\n<h2>服务器运行时配置</h2>\n<p>以一个 Java Web 应用为例，需要哪些运行时配置呢？</p>\n<ol>\n<li>\n<p>安装 war 包运行依赖的基础环境，比如 JDK，Tomcat 等。</p>\n</li>\n<li>\n<p>修改 Tomcat 的配置文件，关注点主要包括：应用的日志目录，日志的输出格式，war 包的存放位置。Tomcat的server.xml配置包括：连接数、 端口、线程池等参数。</p>\n</li>\n<li>\n<p>配置Java 参数，包括JVM堆内存的xmx、xmn等参数，GC方式、参数，JMX 监控开启等。</p>\n</li>\n<li>\n<p>考虑操作系统参数，比较常见的一个配置是 Linux 的文件句柄数，如果应用对网络环境有一些特殊要求的话，还需要调整系统的TCP参数等配置。</p>\n</li>\n</ol><!-- [[[read_end]]] -->\n<p>经过上面这4步，一个简单的运行时环境的配置就算是完成了， 可以开始运行一个程序了。是不是感觉有点复杂呢？</p>\n<p>而这，对正常的运行时配置管理来说，只不过是冰山一角而已。</p>\n<p><strong>我们不光要考虑单个实例初始化配置，还要考虑每次JDK、Tomcat等基础软件的版本升级引起的运行时配置的变更，而且这些变更都需要被清晰地记录下来，从而保证扩容出新的服务器时能取到正确的、最新的配置。</strong></p>\n<p>另外，对于一个集群的服务器组来说，还需要强制保证它们的运行时配置是一致的。</p>\n<h2>独立环境配置</h2>\n<p><strong>独立环境配置的主要目的是，保证一个环境能够完整运作的同时，又保证足够的隔离性，使其成为一个内聚的整体。</strong></p>\n<p>所以，要让一个环境能够符合需求的正常运作，你需要考虑的内容包括：</p>\n<ol>\n<li>\n<p><strong>这个环境所依赖的数据库该如何配置，缓存服务器又该如何配置。</strong></p>\n</li>\n<li>\n<p><strong>如果是分布式系统，或者SOA架构的话，就需要考虑服务中心、配置中心等一系列中间件的配置问题。</strong></p>\n</li>\n</ol>\n<p>其中，最为重要的是配置中心的配置。只有先访问到正确的配置中心，才能获取到其他相关的环境配置或者应用配置信息。也就是说，如果配置中心的配置错了，那么环境就会陷入混乱状态。</p>\n<ol>\n<li>\n<p><strong>要考虑访问入口问题。</strong> 这套环境的入口在哪里？是一个站点还是一个服务入口？<br />\n如果是一个站点的话，那这个站点的访问域名就需要被特殊配置。如果这是一个内部环境的话，那么这个内部域名的 DNS 解析也需要被配置。如果这套环境中有多个 Web 应用，那么你就要考虑7层路由的配置问题了。</p>\n</li>\n<li>\n<p><strong>还要配置环境对应的基础服务，比如监控，短信，搜索等。</strong></p>\n</li>\n</ol>\n<p>读到这里，如此多的与环境有关的配置，有没有让你觉得太复杂了。</p>\n<p>再想象一下，如果你的环境要承载多种语言栈，各类应用依赖的基础软件也不同，环境和环境之间有各种关联设置，数据库的连接分配，环境中负载均衡的设置，等等。是不是让你感觉有些焦虑？</p>\n<p>如果每天都要和这样的工作做斗争，那简直就是一场噩梦。更别提在这样的环境下，完成持续交付了，那简直就是难如登天。</p>\n<p>虽然环境配置有这么多糟心的待处理事项，但是环境本身也是一个非常强大的工具，本身包含非常多的信息，如果这些糟心的事情环境能和你一起来解决，那就简单了，也就是我所说的让环境自己来说话，那么接下来就看看怎么做到吧。</p>\n<h2>环境一定要标准化</h2>\n<p>解决复杂问题的办法，无非是先将其分解，再将其简单化，对环境配置这个难题来说也是同样的道理。想要解决它，首先得要想办法分解、简化它。</p>\n<p>最好的简化方法，莫过于标准化了。<strong>所谓标准化，就是为了在一定范围内获得最佳秩序，对实际的或潜在的问题制定共同、可重复使用的规则。</strong></p>\n<p><strong>标准化也就是让环境学会了一门统一的语言，是自己说话的前提。</strong></p>\n<p>按照这个思路，我们首先可以实现对语言栈的使用、运行时配置模板、独立环境配置的方法等的标准化：</p>\n<ol>\n<li>\n<p>规定公司的主流语言栈；</p>\n</li>\n<li>\n<p>统一服务器安装镜像；</p>\n</li>\n<li>\n<p>提供默认的运行时配置模板；</p>\n</li>\n<li>\n<p>统一基础软件的版本，以及更新方式；</p>\n</li>\n<li>\n<p>在架构层面统一解决环境路由问题；</p>\n</li>\n<li>\n<p>自动化环境产生过程。</p>\n</li>\n</ol>\n<p>看到这里，你可能感觉需要标准化的内容也是多种多样的，而且每个公司的具体情况也不同，那么标准化实施起来也必定困难重重。</p>\n<p>从我的实践经验来看，建议你在实施持续交付的同时，去推动形成以下几个方面的规范：</p>\n<ol>\n<li>\n<p>代码及依赖规范；</p>\n</li>\n<li>\n<p>命名规范；</p>\n</li>\n<li>\n<p>开发规范；</p>\n</li>\n<li>\n<p>配置规范；</p>\n</li>\n<li>\n<p>部署规范；</p>\n</li>\n<li>\n<p>安全规范；</p>\n</li>\n<li>\n<p>测试规范。</p>\n</li>\n</ol>\n<p>其实，不管是持续交付还是架构改造，标准先行都是技术实施的前提条件。</p>\n<h2>约定大于配置</h2>\n<p>讲到这里，你可能也会疑惑了，和环境有关的内容实在是太多了，即使有了标准化，怎么可能都通过配置实现呢？</p>\n<p>举个例子，代码的部署路径，标准化后所有服务器的路径都应该遵循这个标准，但是不可能在每台服务器上都去定义一个配置文件或环境变量来标示它，也没有这个必要。</p>\n<p>实际上，你也从来都没有疑惑过部署路径的问题，因为从你来到公司起，它就已经是约定俗成了。而且，每家公司都是这样的，难道不是吗？</p>\n<p>像代码的部署路径这种情况，我们就把它叫作“约定大于配置”，在实际工作中，还有很多类似的场景，你完全可以利用这套方法，简化环境配置。</p>\n<p>比如，每个环境的域名定义，可以遵循以环境名作为区分的泛域名实现；又比如，可以用FAT，UAT这样的关键词来表示环境的作用；又比如，可以约定单机单应用；再比如，可以约定所有服务的端口都是8080。</p>\n<p><strong>“约定大于配置”的好处是，除了简化配置工作外，还可以提高沟通效率。</strong> 团队成员一旦对某项内容形成认知，他们的沟通将不再容易产生歧义。</p>\n<p><strong>“约定大于配置”相当于赋予了环境天生的本能，进一步加强了环境的自我描述能力。</strong></p>\n<h2>让环境自己能开口说话</h2>\n<p>有了环境标准化，以及约定大于配置的基础，你就可以顺利地让环境自己开口说话了。</p>\n<p>也就是说，<strong>通过环境的自描述文件，让环境能讲清楚自己的作用、依赖，以及状态，而不是由外部配置来解释这些内容。</strong></p>\n<p>以一台服务器为例，一旦生成，除了不能控制自己的生死外，其他运行过程中的配置，都应该根据它自身的描述来决定。</p>\n<p>那么，如何让服务器自己说话呢？</p>\n<p><strong>首先，需要定义Server Spec。</strong></p>\n<p>这是重中之重，在服务器生成时，写入它自己的描述文件。我们通常把这个文件命名为“Server Spec”。在这个文件里，记录了这台服务器的所有身份信息，包括：IDC，型号，归属环境，作用，所属应用，服务类型，访问路径等。</p>\n<p><strong>其次，解决配置中心寻址。</strong></p>\n<p>中间件根据Server Spec的描述，寻找到它所在环境对应的配置中心，从而进一步获取其他配置，如数据库连接字符串，短信服务地址等等。</p>\n<p><strong>最后，完成服务自发现。</strong></p>\n<p>其实这就是一个服务自发现的过程。根据服务类型，访问路径等，还可以自动生成对应的路由配置，负载均衡配置等。</p>\n<p>总结来说，我们是在尝试把环境配置的方向调个个儿：由原来外部通过配置告知环境应该干什么，转变成环境根据自身的能力和属性，决定自己应该去干什么。</p>\n<p>这种尝试，标志着环境配置能力的质的飞跃。一台服务器可以实现自描述，你同样就可以把这个方法推广到所有服务器中。同理，一个环境可以实现自描述，你就可以把自描述的方式扩展到所有环境中。</p>\n<p>从此，环境配置将变得不再艰难。</p>\n<h2>总结</h2>\n<p>我主要围绕环境配置的问题，讲了它的内容和一些特性，以及简化和优化的一些方案。</p>\n<p>一定要意识到，环境配置是非常复杂的，直接影响你的环境治理能力，而环境治理能力又直接影响着持续交付的能力。但是我们还是可以通过：<strong>标准化、约定、自描述</strong>等方式去简化和优化环境配置工作。</p>\n<p>我们的目标是，让环境自己能说话。</p>\n<h2>思考题</h2>\n<p>在你的公司，这些环境配置相关的工作由谁来完成？又由谁来为他们制造工具和提高工作效率？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":19963,"user_name":"韭菜 罗聪聪 ChaseLaw","can_delete":false,"product_type":"c1","uid":1171416,"ip_address":"","ucode":"E0577AD8FD1168","user_header":"https://static001.geekbang.org/account/avatar/00/11/df/d8/0717ffa9.jpg","comment_is_top":false,"comment_ctime":1534182192,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"87433528112","product_id":100009701,"comment_content":"感觉还是没有说到“how”","like_count":21,"discussions":[{"author":{"id":2557596,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKj6mwgIovRmrT9OdlsF4icq5Vkyjg9dBQUhtdX0ZlsGicNow9EAQ5epNTNm5Tnf8ODZ4mwJTCHmN9g/132","nickname":"金戟","note":"","ucode":"2284A14D291872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368714,"discussion_content":"感觉真的太泛泛了 后续我有点怀疑课程质量了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618816025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3071054,"avatar":"","nickname":"何雁秋","note":"","ucode":"80C99D23E7924C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2557596,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKj6mwgIovRmrT9OdlsF4icq5Vkyjg9dBQUhtdX0ZlsGicNow9EAQ5epNTNm5Tnf8ODZ4mwJTCHmN9g/132","nickname":"金戟","note":"","ucode":"2284A14D291872","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584000,"discussion_content":"确实，HOW是重点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660555675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":368714,"ip_address":"上海"},"score":584000,"extra":""}]}]},{"had_liked":false,"id":54279,"user_name":"有道测试组","can_delete":false,"product_type":"c1","uid":1337013,"ip_address":"","ucode":"BD5463427B9BE9","user_header":"","comment_is_top":false,"comment_ctime":1545820139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430722027","product_id":100009701,"comment_content":" 环境问题、服务路径， 服务配置，也经常是一些历史遗留问题。没有从上之下的政策，一般人都不愿意接受改变带来的风险，<br>需要从clone操作系统开始， 定制什么服务用什么clone模板， 里面包含特定的依赖包， 对于服务需要标准化，能够用统一的编译方式，统一的启动方式，启动路径，统一的代码配置自动生成方式。<br>有些项目中既有底层c++，又有上层web接口，还有app端等，依赖ant的， gradle 编译的，cmake等， 这样要做到端到端的持续交付确实在环境部署上就是一个大问题<br>","like_count":3},{"had_liked":false,"id":30344,"user_name":"孙磊","can_delete":false,"product_type":"c1","uid":1256741,"ip_address":"","ucode":"F88E2322D51E2F","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/25/6ac2f111.jpg","comment_is_top":false,"comment_ctime":1538801409,"is_pvip":false,"replies":[{"id":"11077","content":"基本思路很正，逐步再增加一些辅助配置工具，方便开发测试自助调整就更棒了","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1539042542,"ip_address":"","comment_id":30344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14423703297","product_id":100009701,"comment_content":"目前做法，开发测试环境使用自建私有云，使用ansible做配置中心（克隆生产环境ansible代码进行修改），开机器～推统一基础配置～推环境和代码部署，之后就是开发测试自己玩了。","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425950,"discussion_content":"基本思路很正，逐步再增加一些辅助配置工具，方便开发测试自助调整就更棒了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539042542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23719,"user_name":"robin","can_delete":false,"product_type":"c1","uid":1011158,"ip_address":"","ucode":"3442955E2A3EFC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/d6/061a1703.jpg","comment_is_top":false,"comment_ctime":1536625241,"is_pvip":false,"replies":[{"id":"8659","content":"标准化，约定，自描述，就是解决环境配置问题的方案，文章中应该也都讲到了，关于具体场景，我们可以一起讨论，针对你的问题来解答：）","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1536638348,"ip_address":"","comment_id":23719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126559833","product_id":100009701,"comment_content":"感觉基本上都是问题陈述，没有给出解决方案，或者什么场景下做什么事，包括每次给的思考题，也没有一个解说","like_count":3,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423696,"discussion_content":"标准化，约定，自描述，就是解决环境配置问题的方案，文章中应该也都讲到了，关于具体场景，我们可以一起讨论，针对你的问题来解答：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536638348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18225,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1533197077,"is_pvip":false,"replies":[{"id":"6378","content":"笔误了，xmx和xmn了，至于设置多少，是非常复杂的问题，要具体应用，具体分析","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533205665,"ip_address":"","comment_id":18225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10123131669","product_id":100009701,"comment_content":"配置 Java 参数，包括 JVM 堆内存的最大最小方式，GC 方式、参数，JMX 监控开启等。<br>==================<br>请问JVM堆内存的最大最小方式是什么？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421435,"discussion_content":"笔误了，xmx和xmn了，至于设置多少，是非常复杂的问题，要具体应用，具体分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533205665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129175,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1567057137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862024433","product_id":100009701,"comment_content":"如果老师在讲了理论之后再讲一套最佳实践就更棒了","like_count":2},{"had_liked":false,"id":191735,"user_name":"戴斌","can_delete":false,"product_type":"c1","uid":1119385,"ip_address":"","ucode":"7DC53BEA432217","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/99/5b1ed92b.jpg","comment_is_top":false,"comment_ctime":1584793360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584793360","product_id":100009701,"comment_content":"我们的环境配置主要由运维团队做，这块主要是配置工作带来很多问题","like_count":0},{"had_liked":false,"id":102485,"user_name":"春之绿野","can_delete":false,"product_type":"c1","uid":1057216,"ip_address":"","ucode":"296003F7D2B086","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/c0/38816c31.jpg","comment_is_top":false,"comment_ctime":1560234050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560234050","product_id":100009701,"comment_content":"没有人做这些事，都是辅助项目的同事各自管自己的环境","like_count":0},{"had_liked":false,"id":19126,"user_name":"小豪","can_delete":false,"product_type":"c1","uid":1050412,"ip_address":"","ucode":"70C75B9E5BD19E","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/2c/180075e0.jpg","comment_is_top":false,"comment_ctime":1533688174,"is_pvip":true,"replies":[{"id":"6610","content":"ansible还是很有作用的，通过同步保持环境的收敛是它的长处，但是环境个性化却不是，环境分工越细，越不一致它的维护难度就越大。之后发布的章节中关于immutable，我也会从理论角度告诉大家，为什么ansible有些事情不合适用它","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533691980,"ip_address":"","comment_id":19126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1533688174","product_id":100009701,"comment_content":"那么像ansible这种自动化运维工具在建立环境自描述过程中能扮演什么样的角色呢","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421723,"discussion_content":"ansible还是很有作用的，通过同步保持环境的收敛是它的长处，但是环境个性化却不是，环境分工越细，越不一致它的维护难度就越大。之后发布的章节中关于immutable，我也会从理论角度告诉大家，为什么ansible有些事情不合适用它","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533691980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17438,"user_name":"心在飞","can_delete":false,"product_type":"c1","uid":1001630,"ip_address":"","ucode":"80551D24593175","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/9e/99cb0a7a.jpg","comment_is_top":false,"comment_ctime":1532651042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532651042","product_id":100009701,"comment_content":"我们会先制作一个“金映像”，安装没法自动化的应用，比如Visualstudio， 然后通过Chef做环境配置管理，每台被管理的Chef client 每隔30分钟就会和Chef server同步，确保它们运行在正常的状态。通过修改Chef recipe来同步。","like_count":1}]}