{"id":803088,"title":"05｜你用对数据类型了吗？","content":"<p>你好，我是俊达。</p><p>我们都知道，在关系型数据库中，数据存储在表里面，表由若干个列组成，每个列都有各自的数据类型。MySQL数据库支持一些基本的数据类型，包括串（String）类型、数值类型、日期和时间类型，MySQL新版本还支持一些复杂的数据类型，包括JSON类型、空间数据类型（Spatial Data Types）。</p><p>那么，在设计表结构时，应该如何选择每个列的数据类型呢？总体来说，我们需要根据业务的需求来确定数据类型。在这一讲中，我们就来详细聊一聊MySQL中基础数据类型的特点和适用场景，至于复杂的数据类型，这节课先不做太多的讨论。</p><h2>串（String）类型</h2><p>好，接下来我们就先从串类型开始讲起。</p><p>串类型可分为定长类型和变长类型。定长类型又包括 CHAR 和 BINARY，变长类型包括VARCHAR、VARBINARY、TEXT 和 BLOB。下面我们通过一些简单的例子来熟悉一下这些数据类型。</p><h3>字符串类型</h3><h4>CHAR(N)</h4><p>首先是CHAR类型的一些例子。</p><pre><code class=\"language-go\">mysql&gt; create table t_char(a char(10));\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; insert into t_char values('  中文符号    ');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select length(a), char_length(a) from t_char;\n+-----------+----------------+\n| length(a) | char_length(a) |\n+-----------+----------------+\n|        14 |              6 |\n+-----------+----------------+\n1 row in set (0.00 sec)\n\n\nmysql&gt; select a, hex(a), concat('{', a, '}') as aa from t_char;\n+------------+------------------------------+--------------+\n| a          | hex(a)                       | aa           |\n+------------+------------------------------+--------------+\n|   中文符号 | 2020E4B8ADE69687E7ACA6E58FB7 | {  中文符号} |\n+------------+------------------------------+--------------+\n1 row in set (0.00 sec)\n\n\nmysql&gt; insert into t_char values('0123456789A');\nERROR 1406 (22001): Data too long for column 'a' at row 1\n\n\nmysql&gt; create table t_char(a char(256))  charset utf8mb4;\nERROR 1074 (42000): Column length too big for column 'a' (max = 255); use BLOB or TEXT instead\n</code></pre><!-- [[[read_end]]] --><p>CHAR类型的基本特点：</p><ol>\n<li>使用CHAR(N)的形式定义，其中N是规定了字段中允许存储的最大字符数，N不超过255。需要注意，这里的N是字符数，而不是字节数。如果使用UTF8MB4字符集，CHAR(N)最多可能占用N*4字节。</li>\n<li>在InnoDB中存储CHAR(N)类型的数据时，如果数据实际占用的空间不到N字节，则会使用空格填充到N。这里InnoDB的实现上，是将数据填充到N字节，而不是N个字符。如果存储的数据虽然字符数不到N，但是占用的空间已经超过了N字节，则InnoDB不会再填充空格。</li>\n<li>查询Char类型的字段时，MySQL Server会自动去掉末尾的空格。SQL_MODE中的PAD_CHAR_TO_FULL_LENGTH可以改变这个默认行为（8.0.13版本开始，PAD_CHAR_TO_FULL_LENGTH被标记deprecated，不再建议使用），下面是一个简单的测试案例。</li>\n</ol><pre><code class=\"language-go\">mysql&gt; select concat('{', a, '}') as a1, char_length(a) from t_char;\n+------------------+----------------+\n| a1               | char_length(a) |\n+------------------+----------------+\n| {  中文符号}     |              6 |\n+------------------+----------------+\n\n### 设置PAD_CHAR_TO_FULL_LENGTH\nmysql&gt; set sql_mode='PAD_CHAR_TO_FULL_LENGTH';\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\n### 返回数据时，使用空格填充满N个字符\nmysql&gt; select concat('{', a, '}') as a1, char_length(a) from t_char;\n+----------------------+----------------+\n| a1                   | char_length(a) |\n+----------------------+----------------+\n| {  中文符号    }     |             10 |\n+----------------------+----------------+\n</code></pre><h3>VARCHAR(N)</h3><p>相比CHAR类型，VARCHAR类型可能平时使用得更多。VARCHAR字段最多可存储65535字节。定义Varchar类型时，如果字段可存储的最大空间超过了65535，则在SQL Mode严格模式下，SQL会报错，在非严格模式下，MySQL会自动将类型转换为Text。</p><pre><code class=\"language-go\">mysql&gt; create table t_varchar1(a varchar(65536)) charset latin1;\nERROR 1074 (42000): Column length too big for column 'a' (max = 65535); use BLOB or TEXT instead\n\nmysql&gt; set sql_mode='';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; create table t_varchar1(a varchar(65536)) charset latin1;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nmysql&gt; show warnings;\n+-------+------+--------------------------------------------+\n| Level | Code | Message                                    |\n+-------+------+--------------------------------------------+\n| Note  | 1246 | Converting column 'a' from VARCHAR to TEXT |\n+-------+------+--------------------------------------------+\n1 row in set (0.00 sec)\n\n### 列类型自动转成了mediumtext\nmysql&gt; desc t_varchar1;\n+-------+------------+------+-----+---------+-------+\n| Field | Type       | Null | Key | Default | Extra |\n+-------+------------+------+-----+---------+-------+\n| a     | mediumtext | YES  |     | NULL    |       |\n+-------+------------+------+-----+---------+-------+\n</code></pre><p>MySQL Server层限制了1行记录的最大长度为65535。1行记录中，除了数据本身，还有一些额外的开销，比如需要记录变长数据的实际长度，还需要记录字段是否为NULL等，所以VARCHAR能存储的数据，比65535要稍微小一些。</p><pre><code class=\"language-go\">### 表创建失败，行长超过了65535\nmysql&gt; create table t_varchar2(a varchar(65533)) charset latin1;\nERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs\n\n### 加上NOT NULL约束后，可以创建成功\nmysql&gt; create table t_varchar2(a varchar(65533) not null) charset latin1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; desc t_varchar2;\n+-------+----------------+------+-----+---------+-------+\n| Field | Type           | Null | Key | Default | Extra |\n+-------+----------------+------+-----+---------+-------+\n| a     | varchar(65533) | NO   |     | NULL    |       |\n+-------+----------------+------+-----+---------+-------+\n1 row in set (0.02 sec)\n</code></pre><p>和CHAR类型不一样，VARCHAR类型不会自动截断插入数据中尾部的空格，也不会往字段尾部里填充空格。</p><pre><code class=\"language-go\">mysql&gt; create table t_varchar(a varchar(10));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; insert into t_varchar values ('abc   ');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select concat('{', a, '}') from t_varchar;\n+---------------------+\n| concat('{', a, '}') |\n+---------------------+\n| {abc   }            |\n+---------------------+\n1 row in set (0.00 sec)\n</code></pre><p>VARCHAR字段占用的空间主要由实际存储的数据决定。如果我们将字段定义为VARCHAR(8000)，但写入的都是比较短的字符串，那么并不会占用很多存储空间。</p><p>所以我们在定义VARCHAR类型时，是不是可以把长度设置得很大呢？反正只要不真的存很大的数据进去，长度设置得大一点并不会占用额外的空间？</p><p>答案当然是否定的，定义VARCHAR类型时，切记不要超过业务真正需要存储的数据的长度。比如身份证号码长度是18位，那么就定义为VARCHAR(18)。如果业务中限制了用户名最多不超过16个符号，那么就定义为VARCHAR(16)。</p><p>这是为什么呢？为什么不能把字段长度设置得很大呢？这是因为：</p><ol>\n<li>为VARCHAR字段设置合理的长度，能避免业务写入超长的数据。这对业务实际上也是一种保护。</li>\n<li>MySQL和存储引擎对行长度都有限制。如果行长度超过65535，建表都建不成功。</li>\n<li>InnoDB存储引擎对行长度也有限制。具体的限制和页面大小有关。对于默认16K的页面大小，行长度大致为8000多一些（页面大小的一半）。同时，InnoDB还限制了最大行长度不能超过16K。这里的行长度是指将行外存储的数据排除后，其余数据占用的空间。下面这个例子就是超过了InnoDB对行长度的限制。有兴趣的话，你可以测试一下，将列C11长度改成多少后，表能建成功？</li>\n</ol><pre><code class=\"language-go\">### 从报错信息得知，InnoDB默认一行记录最大长度为8126\nmysql&gt; create table t_inno1(\n        c01 varchar(768),\n        c02 varchar(768),\n        c03 varchar(768),\n        c04 varchar(768),\n        c05 varchar(768),\n        c06 varchar(768),\n        c07 varchar(768),\n        c08 varchar(768),\n        c09 varchar(768),\n        c10 varchar(768),\n        c11 varchar(398)\n     ) engine=innodb row_format=compact charset latin1;\n\nERROR 1118 (42000): Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.\n</code></pre><ol start=\"4\">\n<li>\n<p>InnoDB二级索引长度有限制。具体的限制跟ROW_FORMAT和页面大小有关。</p>\n</li>\n<li>\n<p>如果使用了InnoDB，在有些情况下，即使实际存储的数据一样，VARCHAR长度定义不一样时，行实际占用的空间也可能会不一样。</p>\n</li>\n</ol><p>这跟InnoDB数据的物理存储格式有关。对于每个变长类型的列，InnoDB需要在行首分配1-2字节，用来记录列里面实际上存储了多少字节的数据。如果字段最大可能存储的数据不超过255字节，那么只需要使用1个字节就能表示这个长度（1个字节8比特，最大值为255）。</p><p>如果字段最大可存储的数据超过了255字节，那么当实际存储的数据不超过127字节时，使用1个字节就可以表达数据的长度，否则就需要使用2个字节来表达数据的长度。</p><p>为什么是127呢？因为如果VARCHAR可存储的数据超过了255字节后，用来存储记录长度的字节，最高位有特殊含义，只剩下7比特用来表达长度。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/71/526a9013d725dbe1082529d476e71b71.jpg?wh=692x176\" alt=\"图片\"></p><p>解释下这张图：InnoDB行首用来记录变长字段实际长度的格式。字节最高位为0时，使用1字节表达长度。最高位为1时，使用2字节表达长度，此时最高位旁边的比特（图中标记为e）也有特殊含义，表示字段是否有行外存储，剩下的14比特用来表达长度。</p><p>实际上对于每个CHAR类型的列，InnoDB也会在行首分配1-2个字节，用来记录CHAR列中实际存储了多少字节。这可能是因为由于变长字符集的存在，CHAR类型占用的空间也不一定是固定的。</p><ol start=\"6\">\n<li>MySQL Server层可能会使用不同数据格式。比如在排序时，排序字段的存储格式，或者将排序数据写到临时文件时的格式，可能会根据字段定义的长度来分配空间。</li>\n</ol><p>如果执行计划需要用到Sort Buffer、Join Buffer、Read RND Buffer，在计算这些Buffer中能缓存多少行记录时，一般也是基于字段的定义长度来进行计算。</p><p>上面列举了这么多原因，其实平时使用时，最重要的是记住一点：<strong>不要超过业务的实际需要，额外增加VARCHAR字段的长度。</strong></p><h2>二进制串</h2><h3>BINARY (N)</h3><p>MySQL使用BINARY和VARBINARY类型来存储二进制数据。BINARY(N)是定长类型，这里N是字节数，最大不能超过255。往BINARY字段中存数据时，如果数据不到N字节，会在尾部填充0。</p><pre><code class=\"language-go\">mysql&gt; create table t_binary(a binary(20)) engine=innodb;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; insert into t_binary values('中文符号');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select a, hex(a) from t_binary;\n+----------------------+------------------------------------------+\n| a                    | hex(a)                                   |\n+----------------------+------------------------------------------+\n| 中文符号             | E4B8ADE69687E7ACA6E58FB70000000000000000 |\n+----------------------+------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre><p>因为字符编码后实际上也是一串二进制的数据，所以使用BINARY也可以存储文本信息。当然我并不建议你这么做。具体原因我们后面再讨论。</p><h3>VARBINARY(N)</h3><p>VARBINARY存储变长的二进制串。VARBINARY和VARCHAR在很多方面都比较类似，比如最长不超过65535字节，物理存储格式也类似。实际上这一讲中VARCHAR部分的内容对VARBINARY也基本成立。只不过VARCHAR(N)中的N是字符数，而VARBINARY(N)中的N是字节数。</p><p>你可能会问，是不是可以用VARBINARY类型来存储文本信息呢？</p><p>我们通过一些例子来说明这个问题。</p><p>先创建一个表，一个字段使用VARCHAR类型，另一个字段使用VARBINARY类型，初看好像都行。</p><pre><code class=\"language-go\">mysql&gt; create table t_varchar_or_varbin(vc varchar(30), vb varbinary(30)) engine=innodb;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; insert into t_varchar_or_varbin values('中文符号', '中文符号');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t_varchar_or_varbin;\n+--------------+--------------+\n| vc           | vb           |\n+--------------+--------------+\n| 中文符号     | 中文符号     |\n+--------------+--------------+\n</code></pre><p>但是当我们使用另外一个GBK的终端时，就出现问题了，VARBINARY字段返回了乱码。</p><pre><code class=\"language-go\">mysql&gt; select * from t_varchar_or_varbin;\n+----------+--------------+\n| vc       | vb           |\n+----------+--------------+\n| 中文符号 | 涓枃绗﹀彿 |\n+----------+--------------+\n1 row in set (0.00 sec)\n</code></pre><p>使用VARCHAR类型时，数据库帮我们自动进行了字符集的转换，而使用VARBINARY类型时，数据库不会做字符集的转换。对于VARBINARY类型，其实也不存在字符集这个概念。</p><p>VARCHAR和VARBINARY的另外一个重要的区别是，VARCHAR只允许存储满足字符集编码规则的数据，而VARBINARY可以存储任何二进制数据。下面这个例子就说明了这一点。</p><pre><code class=\"language-go\">mysql&gt; delete from t_varchar_or_varbin;\nQuery OK, 1 rows affected (0.00 sec)\n\n### 数据无法写入VARCHAR，不符合编码规则\nmysql&gt; insert into t_varchar_or_varbin(vc) values ( unhex('ABAB') );\nERROR 1366 (HY000): Incorrect string value: '\\xAB\\xAB' for column 'vc' at row 1\n\n### 数据可以写入VARBINARY列\nmysql&gt; insert into t_varchar_or_varbin(vb) values ( unhex('ABAB') );\nQuery OK, 1 row affected (0.00 sec)\n\n\nmysql&gt; select hex(vc), hex(vb) from t_varchar_or_varbin;\n+--------------------------+--------------------------+\n| hex(vc)                  | hex(vb)                  |\n+--------------------------+--------------------------+\n| NULL                     | ABAB                     |\n+--------------------------+--------------------------+\n</code></pre><p>所以，如果业务上需要存储的是文本信息，就不要使用二进制类型。只有当需要存储二进制信息时，才使用BINARY或VARBINARY类型。</p><p>使用VARCHAR和VARBINARY类型时，不能存储超过64K的数据。如果我们需要存储更大的数据，则可以选择使用Text或Blob类型。Text类型用于存储文本信息，Blob类型用于存储二进制信息（一张图片或一个视频文件都是典型的二进制数据）。tinytext和tinyblob最多存储256字节，Text和Blob最多存储64K字节，mediumtext 和 mediumblob 最多存储16M字节，longtext 和 longblob 最多存储4G字节。</p><p>当然在实践中，我们不太建议在数据库中存储大对象，比如大量的图片、视频文件，一般我们会建议将这些文件存储到单独的文件系统中，比如对象存储或分布式文件系统。数据库中最多只存一个链接，记录文件的访问地址。</p><p>从理论上来说，所有数据都可以存到串类型的字段中，比如日期时间（2024-12-23 12:34:56）、数字（123456）都能以字符串的形式存到VARCHAR类型的列中。但是我建议你千万不要这么做，因为这么做有很多缺点。</p><ul>\n<li>数据存储到VARCHAR列后，无法直接进行数学运算，需要先进行类型转换才行。</li>\n<li>如果我们给 VARCHAR 列建立了过滤性很好的索引，但是业务查询数据时，传入了数字类型的参数，那么将无法使用这个索引，从而导致查询的性能很差。这个问题在真实环境中也比较常见。</li>\n<li>使用VARCHAR类型后，无法限制用户写入非法的数据。</li>\n</ul><p>这里做一个小小的调研：你参与过的各个系统中，使用什么数据类型来存储电话号码？</p><h2>数值类型</h2><h3>整数类型</h3><p>整数也很常用的一种类型。MySQL中可以使用tinyint、smallint、int、bigint来存储整数，这几种整数类型的区别是可以存储的数字的范围不一样，同时占用的空间也不一样。如果业务上明确只存储正数，还可以在类型后加上unsigned关键字。</p><p>下面这个表格总结了各个整数类型可存储的数字范围。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/dd/a3bba1b235b715097yy32f03fe6580dd.jpg?wh=2038x1456\" alt=\"\"></p><p>int类型最多可以存储20多亿，如果使用int unsigned，能存储的最大值是40多亿。当然如果你的业务数据量非常大，int可能还不够用，则可以使用bigint。</p><p>具体使用哪个整数类型，主要取决于业务存储需求。</p><p>如果用来存储一个状态值，而且业务中状态值最多可能也就几十种，可以考虑使用tinyint，因为这样占用的空间少。</p><p>如果要存储订单的ID，并且业务评估将来每秒的订单量有1万，那么1天就需要分配超过8亿的订单号，使用int类型可能几天就溢出了，这时就要使用bigint类型。使用bigint类型后，可以用几千万年也不会溢出。</p><h3>小数类型</h3><p>如果业务中需要存储小数，可以使用float、double或decimal和NUMERIC类型。</p><p>float、double是非精确类型，在进行运算时可能会有一些误差。那么在存储类似金额类的数据时，就不太合适。</p><pre><code class=\"language-go\">mysql&gt; create table testd(a float, b double);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; insert into testd values(1.1, 1.1);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from testd;\n+------+------+\n| a    | b    |\n+------+------+\n|  1.1 |  1.1 |\n+------+------+\n1 row in set (0.00 sec)\n\n### float double可能会有误差\nmysql&gt; select a + a, b * 1.1 from testd;\n+-------------------+--------------------+\n| a + a             | b * 1.1            |\n+-------------------+--------------------+\n| 2.200000047683716 | 1.2100000000000002 |\n+-------------------+--------------------+\n</code></pre><p>如果要存储精确的小数信息，不允许有误差，可以使用decimal或NUMERIC类型。MySQL中NUMERIC和decimal类型实现方式一样。</p><p>使用 decimal(M, N) 形式定义，其中M是有效数字的位数，N是保留的小数位数。</p><p>比如对于下面这个例子，可以存储-999999.99到999999.99之间的数字。</p><pre><code class=\"language-go\">mysql&gt; create table t_decimal(a decimal(8, 2)) engine=innodb;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; insert into t_decimal values(999999.99)\n    -&gt; ;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into t_decimal values(1234567)\n    -&gt; ;\nERROR 1264 (22003): Out of range value for column 'a' at row 1\n</code></pre><h2>日期时间类型</h2><p>MySQL中使用DATE、DATETIME、TIMESTAMP、TIME、YEAR这几种类型来存储时间日期信息。</p><h3>DATE</h3><p>DATE用来存储日期。如果你只需要记录日期信息，不用记录时间信息，如存储人员的出生日期，那么就可以使用DATE类型。</p><h3>DATETIME</h3><p>如果你需要同时存储日期和时间，比如存储订单的创建时间，那么就可以使用DATETIME类型，可以使用DATETIME存储最多精确到微秒的信息。MySQL中DATETIME类型没有时区的概念，如果你需要处理多个时区的时间信息，可以考虑在数据库中统一存储UTC时区的时间，并在读取和写入数据时做相应的时区转换。</p><h3>TIMESTAMP</h3><p>TIMESTAMP类型也可以同时存储日期和时间，也可以精确到微秒。和DATETIME类型相比，TIMESTAMP类型能记录的时间范围更短，TIMESTAMP可以记录从UTC 1970-01-01 00:00:00到UTC 2038-01-19 03:14:07之间的时间。TIMESTAMP类型在InnoDB存储引擎中，实际上使用了4字节的整数来存储距UTC 1970-01-01 00:00:00经过的秒数。</p><p>和DATETIME类型不一样，时区的设置会影响TIMESTAMP列中数据的读写。</p><pre><code class=\"language-go\">### \nmysql&gt; create table t_timeinfo(a timestamp, b datetime);\nQuery OK, 0 rows affected (0.02 sec)\n\n### 将时区设置为UTC\nmysql&gt; set time_zone='+00:00';\nQuery OK, 0 rows affected (0.00 sec)\n\n### 插入 UTC '2024-06-07 14:06:45'\nmysql&gt; insert into t_timeinfo values('2024-06-07 14:06:45', '2024-06-07 14:06:45');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from t_timeinfo;\n+---------------------+---------------------+\n| a                   | b                   |\n+---------------------+---------------------+\n| 2024-06-07 14:06:45 | 2024-06-07 14:06:45 |\n+---------------------+---------------------+\n1 row in set (0.00 sec)\n\n### 将时区设置为东8区\nmysql&gt; set time_zone='+08:00';\nQuery OK, 0 rows affected (0.00 sec)\n\n### Timestamp列的返回数据转换成对应的时区\nmysql&gt; select * from t_timeinfo;\n+---------------------+---------------------+\n| a                   | b                   |\n+---------------------+---------------------+\n| 2024-06-07 22:06:45 | 2024-06-07 14:06:45 |\n+---------------------+---------------------+\n1 row in set (0.00 sec)\n</code></pre><h3>TIME</h3><p>TIME 可能是比较少用的一种时间类型，只存储了时间信息，可以用来存储-838:59:59到838:59:59之间的时间。</p><h3>YEAR</h3><p>YEAR 类型使用1个字节来存储年的信息，支持的范围为1901年到2155年。YEAR 类型最大的优点可能就是能节省一点点空间。</p><p>最后我们使用下面这个表格对MySQL的时间日期类型做一个小结。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/ab/8bf78630217c6ea6de5e637815a3a6ab.png?wh=1920x1389\" alt=\"图片\"></p><p>如果使用了时间日期类型，程序中经常会使用一些时间日期函数来处理数据。下面我们对平时最常用的几个日期和时间函数做一个简单的介绍。</p><p>使用函数now()或current_timestamp()来获取系统当前的时间。这2个函数的返回值受参数TIME_ZONE影响，MySQL按TIME_ZONE的设置返回对应时区的当前时间。</p><pre><code class=\"language-go\">mysql&gt; select now(), sleep(3), current_timestamp();\n+---------------------+----------+---------------------+\n| now()               | sleep(3) | current_timestamp() |\n+---------------------+----------+---------------------+\n| 2024-06-07 06:40:52 |        0 | 2024-06-07 06:40:52 |\n+---------------------+----------+---------------------+\n1 row in set (3.00 sec)\n</code></pre><p>参数timestamp的设置会影响now()和current_timestamp()的返回。Binlog模式为STATEMENT时，备库上就是使用这个方法来保证主备库时间函数返回一样的数据。</p><pre><code class=\"language-go\">mysql&gt; set timestamp=1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select now(), current_timestamp();\n+---------------------+---------------------+\n| now()               | current_timestamp() |\n+---------------------+---------------------+\n| 1970-01-01 00:00:01 | 1970-01-01 00:00:01 |\n+---------------------+---------------------+\n1 row in set (0.00 sec)\n\n### timestamp设置为0后，函数返回系统当前时间\nmysql&gt; set timestamp=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select now(), current_timestamp();\n+---------------------+---------------------+\n| now()               | current_timestamp() |\n+---------------------+---------------------+\n| 2024-06-07 06:47:09 | 2024-06-07 06:47:09 |\n+---------------------+---------------------+\n</code></pre><p>函数sysdate()也能获取系统当前时间。sysdate和current_time函数的最大区别是sysdate总是返回函数执行那一刻的时间，而current_time函数返回的是语句开始执行的时间，而且可以通过变量timestamp控制。在使用STATEMENT格式的Binlog时，使用sysdate()函数会导致主备数据不一致，因此不建议使用。</p><h2>总结时刻</h2><p>设计表结构时，需要根据业务的需求，选择合适的数据类型，我们需要考虑几点。</p><ol>\n<li>选择精确匹配业务需求的数据类型。如时间和日期类型的数据使用TIMESTAMP或DATETIME类型，整数类的数据使用INT系列类型，文本类型的使用VARCHAR类型。</li>\n<li>要关注数据类型的空间占用情况。在满足业务存储需求的前提下，优先使用空间占用更小的类型。比如业务中最多几十种状态，我们就可以使用tinyint类型，而不使用int或bigint。VARCHAR的长度要按实际需求设置。</li>\n<li>如果业务上可以保证一个字段中一定会有数据，就给字段加上Not Null约束。</li>\n<li>在多个表中，使用相同的数据类型存储同一个业务字段。</li>\n<li>文本类型字段要设置合适的字符集。如果需要处理多语言数据，优先考虑UTF8字符集。</li>\n<li>尽量不要在数据库中存储大量大对象（如图片、视频文件等），使用分布式文件系统可能更加合适。</li>\n</ol><h2>思考题</h2><p>你刚刚接到了1个需求，要开发一个员工管理系统。该系统计划使用MySQL数据库，设计人员提供了表结构，其中就包括下面这2个表。作为一位资深的MySQL使用者，你觉得这2个表存在哪些问题？你会怎么改进呢？</p><pre><code class=\"language-go\">create table t_employee(\n    emp_id int not null comment '员工编号',\n    emp_name varchar(200) comment '员工姓名',\n    birth_day varchar(200) comment '出生日期',\n    age int comment '年龄',\n    gender varchar(200) comment '性别',\n    address varchar(200) comment '住址',\n    photo blob comment '员工照片',\n    primary key(emp_id)\n) engine=innodb charset utf8;\n\ncreate table t_emp_salary(\n    emp_id varchar(30) not null comment '员工编号',\n    effect_date varchar(200) comment '生效日期',\n    salary double comment '薪资',\n    descripton varchar(2000) comment '备注',\n    primary key(emp_id, effect_date)\n) engine=innodb charset utf8;\n</code></pre><p>期待你的思考，欢迎在留言区中与我交流。如果今天的课程让你有所收获，也欢迎转发给有需要的朋友。我们下节课再见！</p>","comments":[{"had_liked":false,"id":393774,"user_name":"123","can_delete":false,"product_type":"c1","uid":2662872,"ip_address":"浙江","ucode":"5A343B568B9524","user_header":"https://static001.geekbang.org/account/avatar/00/28/a1/d8/42252c48.jpg","comment_is_top":false,"comment_ctime":1724832963,"is_pvip":false,"replies":[{"id":142977,"content":"InnoDB行格式中，还有其他一些信息：\n1. 表没有主键，InnoDB会自动添加一个db_row_id，6字节\n2. 隐藏字段db_trx_id, db_roll_ptr，分别占用6字节和7字节\n3. compact格式固有的5字节记录头部信息\n4. 表里的字段都可以为null，每个字段需要1 bit的标记位，11个字段总共需要11 bit，取整为2字节。\n加上varchar本身占用的空间，总共需要\n(768+2)* 10 + (397 + 2) + 6 + 6 + 7 + 5 + 2 = 8125字节。\n\n我翻了一下代码，当行长度 &gt;= 8126时，会报Row size too large的错误。\n\nInnoDB物理存储格式在第三章InnoDB存储引擎篇中会详细介绍。\n\n另外，我在5.7的环境测试了一下，建表时不报错，但是insert数据时会报错。\n\nmysql&gt; insert into t_inno2 values(\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 768, &#39;x&#39;),\n rpad(&#39;x&#39;, 398, &#39;x&#39;)\n );\n \n  ERROR 1118 (42000): Row size too large (&gt; 8126).\n\n","user_name":"作者回复","user_name_real":"作者","uid":3898827,"ctime":1724845515,"ip_address":"浙江","comment_id":393774,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师，请教一个问题，文中\nmysql&gt; create table t_inno1( -&gt; c01 varchar(768), -&gt; c02 varchar(768), -&gt; c03 varchar(768), -&gt; c04 varchar(768), -&gt; c05 varchar(768), -&gt; c06 varchar(768), -&gt; c07 varchar(768), -&gt; c08 varchar(768), -&gt; c09 varchar(768), -&gt; c10 varchar(768), -&gt; c11 varchar(398) -&gt; ) engine=innodb row_format=compact charset latin1;\n\n当c11设置为varchar(397)的时候，就可以创建成功，本地数据库版本为8.0.29\n但是计算了下其实是没有达到8126个字节的，结合下前面可能存在的行首字节分配，应该是（768+2）* 10 + （397 + 2）= 8099个字节\n而当c11设置为varchar(398)，也就是8100个字节，也是小于8126个字节，网上所说是ROW_FORMAT=COMPACT的问题，会有额外的开销\n\n请教下老师具体的原因是什么？","like_count":2,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650358,"discussion_content":"InnoDB行格式中，还有其他一些信息：\n1. 表没有主键，InnoDB会自动添加一个db_row_id，6字节\n2. 隐藏字段db_trx_id, db_roll_ptr，分别占用6字节和7字节\n3. compact格式固有的5字节记录头部信息\n4. 表里的字段都可以为null，每个字段需要1 bit的标记位，11个字段总共需要11 bit，取整为2字节。\n加上varchar本身占用的空间，总共需要\n(768+2)* 10 + (397 + 2) + 6 + 6 + 7 + 5 + 2 = 8125字节。\n\n我翻了一下代码，当行长度 >= 8126时，会报Row size too large的错误。\n\nInnoDB物理存储格式在第三章InnoDB存储引擎篇中会详细介绍。\n\n另外，我在5.7的环境测试了一下，建表时不报错，但是insert数据时会报错。\n\nmysql> insert into t_inno2 values(\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 768, 'x'),\n rpad('x', 398, 'x')\n );\n \n  ERROR 1118 (42000): Row size too large (> 8126).\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724845515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":2662872,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a1/d8/42252c48.jpg","nickname":"123","note":"","ucode":"5A343B568B9524","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":650360,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724847646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":650358,"ip_address":"浙江","group_id":0},"score":650360,"extra":""}]}]},{"had_liked":false,"id":393969,"user_name":"瑶瑶","can_delete":false,"product_type":"c1","uid":2344024,"ip_address":"江苏","ucode":"1C72F1AD911A3F","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/58/952caade.jpg","comment_is_top":false,"comment_ctime":1725453504,"is_pvip":false,"replies":[{"id":143042,"content":"这个得看一下数据库的具体报错信息。\n另外在更新语句执行的过程中，收集几个processlist快照，看看当时更新语句处于哪个state。\n明确问题的原因后，才能有针对性地解决。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1725616022,"ip_address":"浙江","comment_id":393969,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师您好，请教个问题，我在项目中的一个表里面 使用mediumtext用来存储json字符串，这个字符一般50KB大小，整个表数据量也就几千行，Spring Boot通过 mybaties 去更新这个字段，经常发生超时 我把java连接mysql超时时间改成38s,　也经常出现更新超时 数据更新不进去\n，都是内网连接，不知道需要调整MySQL什么参数 可以解决这个问题，谢谢","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650791,"discussion_content":"这个得看一下数据库的具体报错信息。\n另外在更新语句执行的过程中，收集几个processlist快照，看看当时更新语句处于哪个state。\n明确问题的原因后，才能有针对性地解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725616023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396475,"user_name":"木几丶","can_delete":false,"product_type":"c1","uid":2420294,"ip_address":"福建","ucode":"FFDB958DA64F8C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","comment_is_top":false,"comment_ctime":1734604445,"is_pvip":true,"replies":[{"id":143931,"content":"是的。因为InnoDB中数据存在聚簇索引中，而聚簇索引是一棵B+树。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1734660845,"ip_address":"浙江","comment_id":396475,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"引用原文：“InnoDB 存储引擎对行长度也有限制。具体的限制和页面大小有关。对于默认 16K 的页面大小，行长度大致为 8000 多一些（页面大小的一半）”\n--------------------------------------------------\n老师，这意思是说一页至少要放2行数据，请问MySQL为什么要有这种限制呢？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655347,"discussion_content":"是的。因为InnoDB中数据存在聚簇索引中，而聚簇索引是一棵B+树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734660845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395987,"user_name":"吃苹果的考拉","can_delete":false,"product_type":"c1","uid":1304459,"ip_address":"广东","ucode":"DD5AC5FFEAA9CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/8b/7baca523.jpg","comment_is_top":false,"comment_ctime":1732603090,"is_pvip":false,"replies":[{"id":143788,"content":"回答得非常全面了。\n\n不过t_emp_salary表的联合主键倒不是我故意设计成这样的。这里是引用了employee样例数据库的salaries表。（https:&#47;&#47;github.com&#47;datacharmer&#47;test_db&#47;blob&#47;master&#47;employees.sql）","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1732712026,"ip_address":"浙江","comment_id":395987,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"t_employee表：emp_name太长，birth_day类型不对，gender太长或者更换类型，address太长，photo不建议在数据库存photo这种blob，charset最好是utf8mb4\nt_emp_salary：effect_date类型不对，primary key不用联合索引，因为很可能t_employee和t_emp_salary要关联查询，这种联合索引用不上，charset最好是utf8mb4\n另外，t_employee和t_emp_salary的emp_id最好保持同一类型，避免表连接时的类型转换","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654445,"discussion_content":"回答得非常全面了。\n\n不过t_emp_salary表的联合主键倒不是我故意设计成这样的。这里是引用了employee样例数据库的salaries表。（https://github.com/datacharmer/test_db/blob/master/employees.sql）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732712026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394225,"user_name":"笙 鸢","can_delete":false,"product_type":"c1","uid":3951358,"ip_address":"上海","ucode":"477AF524212C6D","user_header":"https://static001.geekbang.org/account/avatar/00/3c/4a/fe/7b6bd101.jpg","comment_is_top":false,"comment_ctime":1726153030,"is_pvip":false,"replies":[{"id":143097,"content":"这个和版本、以及参数innodb_strict_mode都有关系。\n\nmysql&gt; select @@version,  @@innodb_strict_mode;\n+--------------+----------------------+\n| @@version    | @@innodb_strict_mode |\n+--------------+----------------------+\n| 8.0.32-debug |                    1 |\n+--------------+----------------------+\n\n\nmysql&gt; CREATE TABLE `t_inno10` (\n       `c01` varchar(768) DEFAULT NULL,\n       `c02` varchar(768) DEFAULT NULL,\n       `c03` varchar(768) DEFAULT NULL,\n       `c04` varchar(768) DEFAULT NULL,\n       `c05` varchar(768) DEFAULT NULL,\n       `c06` varchar(768) DEFAULT NULL,\n       `c07` varchar(768) DEFAULT NULL,\n       `c08` varchar(768) DEFAULT NULL,\n       `c09` varchar(768) DEFAULT NULL,\n       `c10` varchar(768) DEFAULT NULL,\n       `c11` varchar(53333) DEFAULT NULL\n     ) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;\nERROR 1118 (42000): Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1726207981,"ip_address":"浙江","comment_id":394225,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"-------------------------------------------------------------------------------------------+\n| t_inno10 | CREATE TABLE `t_inno10` (\n  `c01` varchar(768) DEFAULT NULL,\n  `c02` varchar(768) DEFAULT NULL,\n  `c03` varchar(768) DEFAULT NULL,\n  `c04` varchar(768) DEFAULT NULL,\n  `c05` varchar(768) DEFAULT NULL,\n  `c06` varchar(768) DEFAULT NULL,\n  `c07` varchar(768) DEFAULT NULL,\n  `c08` varchar(768) DEFAULT NULL,\n  `c09` varchar(768) DEFAULT NULL,\n  `c10` varchar(768) DEFAULT NULL,\n  `c11` varchar(53333) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT |\n老师，我这个是假的innodb表吗？为什么我这个列表数这么大啊","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651087,"discussion_content":"这个和版本、以及参数innodb_strict_mode都有关系。\n\nmysql&gt; select @@version,  @@innodb_strict_mode;\n+--------------+----------------------+\n| @@version    | @@innodb_strict_mode |\n+--------------+----------------------+\n| 8.0.32-debug |                    1 |\n+--------------+----------------------+\n\n\nmysql&gt; CREATE TABLE `t_inno10` (\n       `c01` varchar(768) DEFAULT NULL,\n       `c02` varchar(768) DEFAULT NULL,\n       `c03` varchar(768) DEFAULT NULL,\n       `c04` varchar(768) DEFAULT NULL,\n       `c05` varchar(768) DEFAULT NULL,\n       `c06` varchar(768) DEFAULT NULL,\n       `c07` varchar(768) DEFAULT NULL,\n       `c08` varchar(768) DEFAULT NULL,\n       `c09` varchar(768) DEFAULT NULL,\n       `c10` varchar(768) DEFAULT NULL,\n       `c11` varchar(53333) DEFAULT NULL\n     ) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;\nERROR 1118 (42000): Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726207981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3951358,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/4a/fe/7b6bd101.jpg","nickname":"笙 鸢","note":"","ucode":"477AF524212C6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651144,"discussion_content":"mysql&gt; set innodb_strict_mode=ON;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select @@version,  @@innodb_strict_mode;\n+-----------+----------------------+\n| @@version | @@innodb_strict_mode |\n+-----------+----------------------+\n| 8.0.28    |                    1 |\n+-----------+----------------------+\n1 row in set (0.01 sec)\n\nmysql&gt; CREATE TABLE `t_inno18` ( `c01` varchar(768) DEFAULT NULL, `c02` varchar(768) DEFAULT NULL, `c03` varchar(768) DEFAULT NULL, `c04` varchar(768) DEFAULT NULL, `c05` varchar(768) DEFAULTNULL, `c06` varchar(768) DEFAULT NULL, `c07` varchar(768) DEFAULT NULL, `c08` varchar(768) DEFAULT NULL, `c09` varchar(768) DEFAULT NULL, `c10` varchar(768) DEFAULT NULL, `c11` varchar(53333)DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;\nQuery OK, 0 rows affected (0.05 sec)\n那我这个估计就是版本的问题了，创表可以，但是插入数据会报&gt;8126","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726280322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393903,"user_name":"Geek_8bdefc","can_delete":false,"product_type":"c1","uid":2759242,"ip_address":"湖南","ucode":"2875C7A0432987","user_header":"","comment_is_top":false,"comment_ctime":1725288742,"is_pvip":false,"replies":[{"id":143020,"content":"这个地方是写错了，[0,65535]才是正确的。\n非常感谢指正。🤝🤝","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1725351258,"ip_address":"浙江","comment_id":393903,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师：\n文中，smallint unsigned类型的数值范围：[0,32767]好像标错了吧，正确应该是：[0,65535]吧。谢谢","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650625,"discussion_content":"这个地方是写错了，[0,65535]才是正确的。\n非常感谢指正。🤝🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725351258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393901,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"北京","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/0829cbdc.jpg","comment_is_top":false,"comment_ctime":1725275308,"is_pvip":false,"replies":[{"id":143019,"content":"我倾向于使用datetime类型，这样虽然会多占用一点空间，但是能保存的时间范围更长。\n\n另外有一点需要注意，timestamp类型会受time_zone设置的影响。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1725350914,"ip_address":"浙江","comment_id":393901,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师，请教一个问题，时间字段是用时间戳还是datetime呢，我经历的过的公司两种方式都用过，我感觉用两个都没错，您平常用那个多一些","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650624,"discussion_content":"我倾向于使用datetime类型，这样虽然会多占用一点空间，但是能保存的时间范围更长。\n\n另外有一点需要注意，timestamp类型会受time_zone设置的影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1725350915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393779,"user_name":"Amosヾ","can_delete":false,"product_type":"c1","uid":1567014,"ip_address":"广东","ucode":"833F6FCB4042AD","user_header":"https://static001.geekbang.org/account/avatar/00/17/e9/26/472e16e4.jpg","comment_is_top":false,"comment_ctime":1724856062,"is_pvip":true,"replies":[{"id":142982,"content":"这都是可以的。占用的空间也都是1字节。\n\n使用enum类型时，如果枚举的成员发生变化，比如要新增一些类型时，还需要修改字段的类型，需要执行DDL。\n\n使用tinyint的话，只要在程序的代码中修改就好了。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724898764,"ip_address":"浙江","comment_id":393779,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"思考题中t_employee表gender这种使用 tinyint(1) 后程序根据不同值显示性别，还是直接 enum 类型中设置“男”、“女”比较好？为什么？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650393,"discussion_content":"这都是可以的。占用的空间也都是1字节。\n\n使用enum类型时，如果枚举的成员发生变化，比如要新增一些类型时，还需要修改字段的类型，需要执行DDL。\n\n使用tinyint的话，只要在程序的代码中修改就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724898765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393775,"user_name":"123","can_delete":false,"product_type":"c1","uid":2662872,"ip_address":"浙江","ucode":"5A343B568B9524","user_header":"https://static001.geekbang.org/account/avatar/00/28/a1/d8/42252c48.jpg","comment_is_top":false,"comment_ctime":1724833537,"is_pvip":false,"replies":[{"id":142981,"content":"回答得比较完整了。\nt_employee中，其实age字段是多余了。\nt_emp_salary的联合主键，实际上是参考了MySQL的employee样例数据库，使用联合主键的原因是这个表记录了员工在不同时间的salary。\n\n备注字段看业务需要，一般设置个varchar(2000)、varchar(4000)，如果在极端情况下长度还不够，也可以使用text。如果整行记录长度没有超过限制，text类型应该也可以在行内存储的。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724854726,"ip_address":"浙江","comment_id":393775,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"回答下课后思考题：\n\n[t_employee]\n1、emp_name设置过长，姓名可以固定位数\n2、birth_day应使用data类型\n3、age不必用int，可以使用unsign tinyint\n4、gender基本上只会有两种可能，若后续不确定，使用tinyint完全可以，或可以使用char\n5、尽量不在数据库中存储照片的二进制，而使用对象存储，防止引用即可\n\n[t_emp_salary]\n1、emp_id作为主键最好不要使用varchar，影响查询性能\n2、effect_date使用dateTime即可\n3、salary使用decimal，float、double会存在计算误差\n4、emp_id是不会重复的，完全不需要使用复合主键\n\n另外，请教下老师对于[备注]这类字段，应该设置成多长，正常情况下，这个字段被写入的数据不会太多，或者有些也可能特别多，是否应该换成text，但是text是额外空间，并不在行空间中，是否会影响查询性能","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650369,"discussion_content":"回答得比较完整了。\nt_employee中，其实age字段是多余了。\nt_emp_salary的联合主键，实际上是参考了MySQL的employee样例数据库，使用联合主键的原因是这个表记录了员工在不同时间的salary。\n\n备注字段看业务需要，一般设置个varchar(2000)、varchar(4000)，如果在极端情况下长度还不够，也可以使用text。如果整行记录长度没有超过限制，text类型应该也可以在行内存储的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724854726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393771,"user_name":"Geek_0126","can_delete":false,"product_type":"c1","uid":3952196,"ip_address":"浙江","ucode":"2916F7FB3F6D71","user_header":"https://static001.geekbang.org/account/avatar/00/3c/4e/44/49b29792.jpg","comment_is_top":false,"comment_ctime":1724830713,"is_pvip":false,"replies":[{"id":142980,"content":"回答得很完整了。\n我再加一条：使用utf8mb4代替utf8。\n","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724854126,"ip_address":"浙江","comment_id":393771,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"我们系统用 varchar(20) 来存储电话号码\n\n那两张员工表字段类型使用有很多错误，改进方案：\n1.varchar类型按需设置 并尽量设为 not null\n2.日期字段改为使用date或datetime类型\n3.age年龄 可用tinyint，或者不要此字段 \n4.不要在数据库中存储大对象\n5.emp_id类型两个表不一致，建议都用int类型\n6.薪资建议用更精确的decimal类型","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650367,"discussion_content":"回答得很完整了。\n我再加一条：使用utf8mb4代替utf8。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724854126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}