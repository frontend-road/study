{"id":10688,"title":"32 | 可扩展架构的基本思想和模式","content":"<p>软件系统与硬件和建筑系统最大的差异在于软件是可扩展的，一个硬件生产出来后就不会再进行改变、一个建筑完工后也不会再改变其整体结构。例如，一颗CPU生产出来后装到一台PC机上，不会再返回工厂进行加工以增加新的功能；金字塔矗立千年历经风吹雨打，但其现在的结构和当时建成完工时的结构并无两样。相比之下，软件系统就完全相反，如果一个软件系统开发出来后，再也没有任何更新和调整，反而说明了这套软件系统没有发展、没有生命力。真正有生命力的软件系统，都是在不断迭代和发展的，典型的如Windows操作系统，从Windows 3.0到Windows 95到Windows XP，直到现在的Windows 10，一直在跟着技术的发展而不断地发展。</p><p>今天我们进入架构可扩展模式的学习，这部分内容包括分层架构、SOA架构、微服务和微内核等，先来<span class=\"orange\">聊聊架构的可扩展模式</span>。</p><p>软件系统的这种天生和内在的可扩展的特性，既是魅力所在，又是难点所在。魅力体现在我们可以通过修改和扩展，不断地让软件系统具备更多的功能和特性，满足新的需求或者顺应技术发展的趋势。而难点体现在如何以最小的代价去扩展系统，因为很多情况下牵一发动全身，扩展时可能出现到处都要改，到处都要推倒重来的情况。这样做的风险不言而喻：改动的地方越多，投入也越大，出错的可能性也越大。因此，如何避免扩展时改动范围太大，是软件架构可扩展性设计的主要思考点。</p><!-- [[[read_end]]] --><h2>可扩展的基本思想</h2><p>幸运的是，可扩展性架构的设计方法很多，但万变不离其宗，所有的可扩展性架构设计，背后的基本思想都可以总结为一个字：<strong>拆</strong>！</p><p>拆，就是将原本大一统的系统拆分成多个规模小的部分，扩展时只修改其中一部分即可，无须整个系统到处都改，通过这种方式来减少改动范围，降低改动风险。</p><p>说起来好像挺简单，毕竟“拆”我们见得太多了。一般情况下，我们要拆一个东西时，都是简单粗暴的。例如，用推土机拆房子、用剪刀拆快递包装、用手撕开包装袋等，反正拆完了这些东西就扔了。但面对软件系统，拆就没那么简单了，因为我们并不是要摧毁一个软件系统，而是要通过拆让软件系统变得更加优美（具备更好的可扩展性）。形象地说，软件系统中的“拆”是建设性的，因此难度要高得多。</p><p>按照不同的思路来拆分软件系统，就会得到不同的架构。常见的拆分思路有如下三种。</p><ul>\n<li>面向流程拆分：将整个业务流程拆分为几个阶段，每个阶段作为一部分。</li>\n<li>面向服务拆分：将系统提供的服务拆分，每个服务作为一部分。</li>\n<li>面向功能拆分：将系统提供的功能拆分，每个功能作为一部分。</li>\n</ul><p>理解这三种思路的关键就在于如何理解“流程”“服务”“功能”三者的联系和区别。从范围上来看，从大到小依次为：流程&gt;服务&gt;功能，单纯从概念解释可能难以理解，但实际上看几个案例就很清楚了。</p><p>我以TCP/IP协议栈为例，来说明“流程”“服务”“功能”的区别和联系。TCP/IP协议栈和模型图如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/d9/2c11cdd67fa78bb3aef4a1fd338fa8d9.jpg?wh=2662*2219\" alt=\"\"></p><ul>\n<li>流程</li>\n</ul><p>对应TCP/IP四层模型，因为TCP/IP网络通信流程是：应用层 → 传输层 → 网络层 → 物理+数据链路层，不管最上层的应用层是什么，这个流程都不会变。</p><ul>\n<li>服务</li>\n</ul><p>对应应用层的HTTP、FTP、SMTP等服务，HTTP提供Web服务，FTP提供文件服务，SMTP提供邮件服务，以此类推。</p><ul>\n<li>功能</li>\n</ul><p>每个服务都会提供相应的功能。例如，HTTP服务提供GET、POST功能，FTP提供上传下载功能，SMTP提供邮件发送和收取功能。</p><p>我再以一个简单的学生信息管理系统为例（几乎每个技术人员读书时都做过这样一个系统），拆分方式是：</p><p>1.面向流程拆分</p><p>展示层 → 业务层 → 数据层 → 存储层，各层含义是：</p><ul>\n<li>\n<p>展示层：负责用户页面设计，不同业务有不同的页面。例如，登录页面、注册页面、信息管理页面、安全设置页面等。</p>\n</li>\n<li>\n<p>业务层：负责具体业务逻辑的处理。例如，登录、注册、信息管理、修改密码等业务。</p>\n</li>\n<li>\n<p>数据层：负责完成数据访问。例如，增删改查数据库中的数据、记录事件到日志文件等。</p>\n</li>\n<li>\n<p>存储层：负责数据的存储。例如，关系型数据库MySQL、缓存系统Memcache等。</p>\n</li>\n</ul><p>最终的架构如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/76/04/76ebf6b2c4efb7b5e1c20ecc1f775904.jpg?wh=2259*1607\" alt=\"\"></p><p>2.面向服务拆分</p><p>将系统拆分为注册、登录、信息管理、安全设置等服务，最终架构示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/55/aa/554b3850bbaec4dc73eb7b8fb45047aa.jpg?wh=3629*1832\" alt=\"\"></p><p>3.面向功能拆分</p><p>每个服务都可以拆分为更多细粒度的功能，例如：</p><ul>\n<li>\n<p>注册服务：提供多种方式进行注册，包括手机号注册、身份证注册、学生邮箱注册三个功能。</p>\n</li>\n<li>\n<p>登录服务：包括手机号登录、身份证登录、邮箱登录三个功能。</p>\n</li>\n<li>\n<p>信息管理服务：包括基本信息管理、课程信息管理、成绩信息管理等功能。</p>\n</li>\n<li>\n<p>安全设置服务：包括修改密码、安全手机、找回密码等功能。</p>\n</li>\n</ul><p>最终架构图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/24/b45ddf7991ccdda1b65c557252d4d424.jpg?wh=3590*1827\" alt=\"\"></p><p>通过学生信息管理系统的案例可以发现，不同的拆分方式，架构图差异很大。但好像无论哪种方式，最终都是可以实现的。既然如此，我们何必费尽心机去选择呢，随便挑选一个不就可以了？</p><p>当然不能随便挑，否则架构设计就没有意义了，架构师也就要丢掉饭碗了。原因在于：<strong>不同的拆分方式，本质上决定了系统的扩展方式</strong>。</p><h2>可扩展方式</h2><p>当我们谈可扩展性时，很多同学都会有一个疑惑：就算是不拆分系统，只要在设计和写代码时做好了，同样不会出现到处改的问题啊？例如，在面向服务拆分的案例中，增加“学号注册”，就算是不拆分为服务，也可以控制修改的范围，那为何我们要大费周章地去拆分系统呢？</p><p>在一个理想的环境，你的团队都是高手，每个程序员都很厉害，对业务都很熟悉，新来的同事很快就知晓所有的细节……那确实不拆分也没有问题。但现实却是：团队有菜鸟程序员，到底是改A处实现功能还是改B处实现功能，完全取决于他觉得哪里容易改；有的程序员比较粗心；有的程序员某天精神状态不太好；新来的同事不知道历史上某行代码为何那么“恶心”，而轻易地将其改漂亮了一些……所有的这些问题都可能出现，这时候你就会发现，合理的拆分，能够强制保证即使程序员出错，出错的范围也不会太广，影响也不会太大。</p><p>下面是不同拆分方式应对扩展时的优势。</p><p>1.面向流程拆分</p><p>扩展时大部分情况只需要修改某一层，少部分情况可能修改关联的两层，不会出现所有层都同时要修改。例如学生信息管理系统，如果我们将存储层从MySQL扩展为同时支持MySQL和Oracle，那么只需要扩展存储层和数据层即可，展示层和业务层无须变动。</p><p>2.面向服务拆分</p><p>对某个服务扩展，或者要增加新的服务时，只需要扩展相关服务即可，无须修改所有的服务。同样以学生管理系统为例，如果我们需要在注册服务中增加一种“学号注册”功能，则只需要修改“注册服务”和“登录服务”即可，“信息管理服务”和“安全设置”服务无须修改。</p><p>3.面向功能拆分</p><p>对某个功能扩展，或者要增加新的功能时，只需要扩展相关功能即可，无须修改所有的服务。同样以学生管理系统为例，如果我们增加“学号注册”功能，则只需要在系统中增加一个新的功能模块，同时修改“登录功能”模块即可，其他功能都不受影响。</p><p>不同的拆分方式，将得到不同的系统架构，典型的可扩展系统架构有：</p><ul>\n<li>\n<p>面向流程拆分：分层架构。</p>\n</li>\n<li>\n<p>面向服务拆分：SOA、微服务。</p>\n</li>\n<li>\n<p>面向功能拆分：微内核架构。</p>\n</li>\n</ul><p>当然，这几个系统架构并不是非此即彼的，而是可以在系统架构设计中进行组合使用的。以学生管理系统为例，我们最终可以这样设计架构：</p><ul>\n<li>\n<p>整体系统采用面向服务拆分中的“微服务”架构，拆分为“注册服务”“登录服务”“信息管理服务”“安全服务”，每个服务是一个独立运行的子系统。</p>\n</li>\n<li>\n<p>其中的“注册服务”子系统本身又是采用面向流程拆分的分层架构。</p>\n</li>\n<li>\n<p>“登录服务”子系统采用的是面向功能拆分的“微内核”架构。</p>\n</li>\n</ul><p>专栏后面的内容我将详细阐述每种可扩展架构。</p><h2>小结</h2><p>今天我为你讲了可扩展架构的一些基本思想和方式，希望对你有所帮助。</p><p>这就是今天的全部内容，留一道思考题给你吧，规则引擎是常用的一种支持可扩展的方式，按照今天的分析，它属于哪一类？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）</p>","neighbors":{"left":{"article_title":"31 | 如何应对接口级的故障？","id":10312},"right":{"article_title":"33 | 传统的可扩展架构模式：分层架构和SOA","id":10790}},"comments":[{"had_liked":false,"id":15490,"user_name":"鹅米豆发","can_delete":false,"product_type":"c1","uid":1017687,"ip_address":"","ucode":"98E8D911EE32DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","comment_is_top":false,"comment_ctime":1531221272,"is_pvip":false,"replies":[{"id":5240,"content":"思路很清晰，赞，面向流程这个说法确实不那么容易理解，但你对照TCP&#47;IP那个图就很清晰了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275494,"ip_address":"","comment_id":15490,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"       面向流程、面向服务、面向功能，这三个的命名，面向服务和面向功能还可以，面向流程这个容易让人误解。\r\n       面向流程，大概指的是数据移动的流程，而不是业务流程。分层架构的本质，就是固定的内核，移动的数据。\r\n       规则引擎的扩展方式，可以用下排除法。\r\n       首先，肯定不是分层架构，即不是面向流程的，因为规则引擎主要作用在业务层。\r\n       其次，也不应该是面向服务的，因为规则引擎都是跨越多个服务的。\r\n       规则引擎和插件式架构，解决的都是功能扩展的问题。微内核架构就是一种插件式架构。\r\n       所以，规则引擎应该是面向功能的扩展方式。","like_count":108},{"had_liked":false,"id":15423,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1531185147,"is_pvip":false,"replies":[{"id":5257,"content":"理解正确","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531277139,"ip_address":"","comment_id":15423,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。\n\n规则引擎是将业务决策与业务分离，它提供的还是决策功能，我觉得是面向功能，我没使用规则引擎的经验！不知道这样理解是否存在问题？","like_count":34,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420402,"discussion_content":"思路很清晰，赞，面向流程这个说法确实不那么容易理解，但你对照TCP/IP那个图就很清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531275494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610361,"discussion_content":"6","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679540396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368449,"discussion_content":"分层架构的本质：固定的内核，移动的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618716699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15542,"user_name":"东","can_delete":false,"product_type":"c1","uid":1043947,"ip_address":"","ucode":"0FF5018422CEA9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/eb/88cac7a5.jpg","comment_is_top":false,"comment_ctime":1531274572,"is_pvip":false,"replies":[{"id":5263,"content":"可以理解服务是一组相似功能的集合，例如用户登录是服务，这个服务支持手机号登录，微信登录，QQ登录3个登录功能，当然，如果你真的需要把手机号登录做成一个独立的服务也是可以的，不存在绝对的界限","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531291375,"ip_address":"","comment_id":15542,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向服务和面向功能，这两个概念感觉十分难以区分，某个功能也可以做成一个微服务，某个微服务也可以认为是一个功能，求教二者的差别。谢谢华仔","like_count":28,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420380,"discussion_content":"理解正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531277139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129973,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567345195,"is_pvip":false,"replies":[{"id":49161,"content":"回答正确","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1567597533,"ip_address":"","comment_id":129973,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"课后思考及问题\n1：拆——不仅仅是许多房二代产生原因，还是所有可扩展性系统架构的精髓。\n在看正文之前我稍微想了一下，发现能做到水平扩展的，比如：web服务、微服务、数据存储服务等，加上一些机器就能一起扛量，都是流量的路由和中转，对应的服务够纯粹，可以独立提供对于的服务。\n2：系统拆分的模式？\n2-1：面向流程——分层架构，数据流程非业务流程\n2-2：面向服务——微服务，倾向于站在外部视角而言\n2-3：面向功能——微内核，倾向于站在内部视角而言\n3：规则引擎是常用的一种支持可扩展的方式，按照今天的分析，它属于哪一类？\n规则引擎没具体弄过，不过我感觉类似状态转换，是一个功能型的东东。也可通过排除法比较清晰的，看出它应该属于面向功能的类型。","like_count":15,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465745,"discussion_content":"回答正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567597533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15438,"user_name":"正是那朵玫瑰","can_delete":false,"product_type":"c1","uid":1048261,"ip_address":"","ucode":"73D630B654573F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/c5/3467cf94.jpg","comment_is_top":false,"comment_ctime":1531189120,"is_pvip":false,"replies":[{"id":5251,"content":"文章中的流程概念范围要大很多，可以认为流程和条件无关","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276232,"ip_address":"","comment_id":15438,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎是嵌入应用程序的一种组件，我们也一直想引入来解决复杂多变的规则变化，而规则应属某项功能，比如我们在p2p行业，想筛选出种子用户，可能会有很多的条件限制，如投资额达到多少，投资的频率等等，而这些条件又会经常变化，于是用规则引擎抽离出来，从这个角度看规则引擎应该是面向功能拆分（筛选种子用户是属于一项功能）。不过我觉得规则引擎还可以编排流程，比如有A，B，C，D四个流程，\n1、当满足条件1时走A--&gt;B--&gt;C--&gt;D\n2、满足条件2时走A--&gt;B--&gt;D\n3、满足条件2时走A--&gt;B--&gt;C\n从这个角度来说是不是也可以认为是面向流程拆分，不知道理解是否正确？","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465745,"discussion_content":"回答正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567597533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17309,"user_name":"天外来客","can_delete":false,"product_type":"c1","uid":1008825,"ip_address":"","ucode":"AFC43E878058F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/b9/1b63042a.jpg","comment_is_top":false,"comment_ctime":1532564685,"is_pvip":false,"replies":[{"id":6007,"content":"理解到位👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532577448,"ip_address":"","comment_id":17309,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎是嵌入的一种功能组件，就像计算引擎一样，属于功能级的概念，应该属于面向功能的拆分。\n另一方面，即使把规则相关的部分做成服务，仅就规则引擎来讲，它也是功能级的概念，而非流程或者服务。","like_count":12,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420387,"discussion_content":"文章中的流程概念范围要大很多，可以认为流程和条件无关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531276232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240101,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1596762794,"is_pvip":false,"replies":[{"id":88711,"content":"点赞👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1596842824,"ip_address":"","comment_id":240101,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"总结下今天所学到的内容。可拓展架构的基本思想就是拆，拆又分为流程拆分，服务拆分，功能拆分，三个粒度是越来越小。在工作中首先是按照业务流程拆分为不同的服务，小服务为了支持可拓展按流程拆分为合单、过滤拦截、冻结、查询库存、预售、寻仓等，再每个小流程按功能去拆分为不同的接口，再通过配置化实现这些接口的组装或者说调用链，来实现可配置化的支持业务。有新增业务，只需增加配置项和接口，不会影响到其他业务功能。","like_count":8,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421111,"discussion_content":"理解到位👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532577448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15500,"user_name":"沧海一粟","can_delete":false,"product_type":"c1","uid":1120190,"ip_address":"","ucode":"5284AD424CC3CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/be/73be948a.jpg","comment_is_top":false,"comment_ctime":1531234813,"is_pvip":false,"replies":[{"id":5238,"content":"每个服务是独立的子系统，有各自独立的数据库，缓存，服务器","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275275,"ip_address":"","comment_id":15500,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向服务的拆分成独立的子系统，如文中所讲的学生管理系统，拆分为注册服务，登录服务，管理系统等子系统，请问老师，这些子系统是自己链接数据库的吗？实际项目都是怎么做的？","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503341,"discussion_content":"点赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596842824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341166,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1649400937,"is_pvip":false,"replies":[{"id":124747,"content":"是的，大道相通","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1649502952,"ip_address":"","comment_id":341166,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"提高架构的扩展性靠拆，那么拆是也可以提高代码层面的扩展性？比如：两个功能耦合在一个方法里了，通过拆分成两个方法，一个方法里面各完成一个功能，也达到解耦的效果来提供扩展性","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420409,"discussion_content":"每个服务是独立的子系统，有各自独立的数据库，缓存，服务器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531275275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16153,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1079349,"ip_address":"","ucode":"BAF94C4B7FA0EC","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/35/63a49c0a.jpg","comment_is_top":false,"comment_ctime":1531802612,"is_pvip":false,"replies":[{"id":5585,"content":"是的，这就是面向流程拆分，同样是这个电商案例，如果按照男装，女装，电器拆分，就是面向服务拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531810626,"ip_address":"","comment_id":16153,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向流程是否可以这样理解，比如电商网站下单的流程。登陆、浏览商品、加入购物车、结算、下单、支付、收货、评价等。拆完就是用户服务、商品服务、订单服务、评价服务等。谢谢华仔这么赞的所有章节！","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560967,"discussion_content":"是的，大道相通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649502952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15490,"user_name":"鹅米豆发","can_delete":false,"product_type":"c1","uid":1017687,"ip_address":"","ucode":"98E8D911EE32DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/57/645159ee.jpg","comment_is_top":false,"comment_ctime":1531221272,"is_pvip":false,"replies":[{"id":5240,"content":"思路很清晰，赞，面向流程这个说法确实不那么容易理解，但你对照TCP&#47;IP那个图就很清晰了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275494,"ip_address":"","comment_id":15490,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"       面向流程、面向服务、面向功能，这三个的命名，面向服务和面向功能还可以，面向流程这个容易让人误解。\r\n       面向流程，大概指的是数据移动的流程，而不是业务流程。分层架构的本质，就是固定的内核，移动的数据。\r\n       规则引擎的扩展方式，可以用下排除法。\r\n       首先，肯定不是分层架构，即不是面向流程的，因为规则引擎主要作用在业务层。\r\n       其次，也不应该是面向服务的，因为规则引擎都是跨越多个服务的。\r\n       规则引擎和插件式架构，解决的都是功能扩展的问题。微内核架构就是一种插件式架构。\r\n       所以，规则引擎应该是面向功能的扩展方式。","like_count":108,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420402,"discussion_content":"思路很清晰，赞，面向流程这个说法确实不那么容易理解，但你对照TCP/IP那个图就很清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531275494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610361,"discussion_content":"6","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679540396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368449,"discussion_content":"分层架构的本质：固定的内核，移动的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618716699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15423,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1531185147,"is_pvip":false,"replies":[{"id":5257,"content":"理解正确","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531277139,"ip_address":"","comment_id":15423,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。\n\n规则引擎是将业务决策与业务分离，它提供的还是决策功能，我觉得是面向功能，我没使用规则引擎的经验！不知道这样理解是否存在问题？","like_count":34,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420380,"discussion_content":"理解正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531277139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15542,"user_name":"东","can_delete":false,"product_type":"c1","uid":1043947,"ip_address":"","ucode":"0FF5018422CEA9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/eb/88cac7a5.jpg","comment_is_top":false,"comment_ctime":1531274572,"is_pvip":false,"replies":[{"id":5263,"content":"可以理解服务是一组相似功能的集合，例如用户登录是服务，这个服务支持手机号登录，微信登录，QQ登录3个登录功能，当然，如果你真的需要把手机号登录做成一个独立的服务也是可以的，不存在绝对的界限","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531291375,"ip_address":"","comment_id":15542,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向服务和面向功能，这两个概念感觉十分难以区分，某个功能也可以做成一个微服务，某个微服务也可以认为是一个功能，求教二者的差别。谢谢华仔","like_count":28,"discussions":[{"author":{"id":1100655,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/6f/c78ef1cf.jpg","nickname":"王二北","note":"","ucode":"D9090E28B3E1F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565242,"discussion_content":"服务是一组相似或相关功能的集合，服务要做的功能的内聚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650419619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420433,"discussion_content":"可以理解服务是一组相似功能的集合，例如用户登录是服务，这个服务支持手机号登录，微信登录，QQ登录3个登录功能，当然，如果你真的需要把手机号登录做成一个独立的服务也是可以的，不存在绝对的界限","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1531291375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172362,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e3/8a/ed8d1b63.jpg","nickname":"梧桐秋雨","note":"","ucode":"9D6AC6BA1E4259","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579621,"discussion_content":"确实服务和功能容易混淆，而功能理论上又分为业务功能和程序功能，业务功能里头理论上是包含流程的，此流程指的是业务流程，业务功能必须闭环。而程序功能就是crud，只是这里头每个管理单元还需加上一堆的业务管控逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657586458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129973,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567345195,"is_pvip":false,"replies":[{"id":49161,"content":"回答正确","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1567597533,"ip_address":"","comment_id":129973,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"课后思考及问题\n1：拆——不仅仅是许多房二代产生原因，还是所有可扩展性系统架构的精髓。\n在看正文之前我稍微想了一下，发现能做到水平扩展的，比如：web服务、微服务、数据存储服务等，加上一些机器就能一起扛量，都是流量的路由和中转，对应的服务够纯粹，可以独立提供对于的服务。\n2：系统拆分的模式？\n2-1：面向流程——分层架构，数据流程非业务流程\n2-2：面向服务——微服务，倾向于站在外部视角而言\n2-3：面向功能——微内核，倾向于站在内部视角而言\n3：规则引擎是常用的一种支持可扩展的方式，按照今天的分析，它属于哪一类？\n规则引擎没具体弄过，不过我感觉类似状态转换，是一个功能型的东东。也可通过排除法比较清晰的，看出它应该属于面向功能的类型。","like_count":15,"discussions":[{"author":{"id":1100655,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/6f/c78ef1cf.jpg","nickname":"王二北","note":"","ucode":"D9090E28B3E1F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565242,"discussion_content":"服务是一组相似或相关功能的集合，服务要做的功能的内聚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650419619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420433,"discussion_content":"可以理解服务是一组相似功能的集合，例如用户登录是服务，这个服务支持手机号登录，微信登录，QQ登录3个登录功能，当然，如果你真的需要把手机号登录做成一个独立的服务也是可以的，不存在绝对的界限","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1531291375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1172362,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e3/8a/ed8d1b63.jpg","nickname":"梧桐秋雨","note":"","ucode":"9D6AC6BA1E4259","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579621,"discussion_content":"确实服务和功能容易混淆，而功能理论上又分为业务功能和程序功能，业务功能里头理论上是包含流程的，此流程指的是业务流程，业务功能必须闭环。而程序功能就是crud，只是这里头每个管理单元还需加上一堆的业务管控逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657586458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15438,"user_name":"正是那朵玫瑰","can_delete":false,"product_type":"c1","uid":1048261,"ip_address":"","ucode":"73D630B654573F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/c5/3467cf94.jpg","comment_is_top":false,"comment_ctime":1531189120,"is_pvip":false,"replies":[{"id":5251,"content":"文章中的流程概念范围要大很多，可以认为流程和条件无关","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276232,"ip_address":"","comment_id":15438,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎是嵌入应用程序的一种组件，我们也一直想引入来解决复杂多变的规则变化，而规则应属某项功能，比如我们在p2p行业，想筛选出种子用户，可能会有很多的条件限制，如投资额达到多少，投资的频率等等，而这些条件又会经常变化，于是用规则引擎抽离出来，从这个角度看规则引擎应该是面向功能拆分（筛选种子用户是属于一项功能）。不过我觉得规则引擎还可以编排流程，比如有A，B，C，D四个流程，\n1、当满足条件1时走A--&gt;B--&gt;C--&gt;D\n2、满足条件2时走A--&gt;B--&gt;D\n3、满足条件2时走A--&gt;B--&gt;C\n从这个角度来说是不是也可以认为是面向流程拆分，不知道理解是否正确？","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420387,"discussion_content":"文章中的流程概念范围要大很多，可以认为流程和条件无关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531276232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17309,"user_name":"天外来客","can_delete":false,"product_type":"c1","uid":1008825,"ip_address":"","ucode":"AFC43E878058F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/b9/1b63042a.jpg","comment_is_top":false,"comment_ctime":1532564685,"is_pvip":false,"replies":[{"id":6007,"content":"理解到位👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532577448,"ip_address":"","comment_id":17309,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"规则引擎是嵌入的一种功能组件，就像计算引擎一样，属于功能级的概念，应该属于面向功能的拆分。\n另一方面，即使把规则相关的部分做成服务，仅就规则引擎来讲，它也是功能级的概念，而非流程或者服务。","like_count":12,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421111,"discussion_content":"理解到位👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532577448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240101,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1596762794,"is_pvip":false,"replies":[{"id":88711,"content":"点赞👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1596842824,"ip_address":"","comment_id":240101,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"总结下今天所学到的内容。可拓展架构的基本思想就是拆，拆又分为流程拆分，服务拆分，功能拆分，三个粒度是越来越小。在工作中首先是按照业务流程拆分为不同的服务，小服务为了支持可拓展按流程拆分为合单、过滤拦截、冻结、查询库存、预售、寻仓等，再每个小流程按功能去拆分为不同的接口，再通过配置化实现这些接口的组装或者说调用链，来实现可配置化的支持业务。有新增业务，只需增加配置项和接口，不会影响到其他业务功能。","like_count":8,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503341,"discussion_content":"点赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596842824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15500,"user_name":"沧海一粟","can_delete":false,"product_type":"c1","uid":1120190,"ip_address":"","ucode":"5284AD424CC3CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/be/73be948a.jpg","comment_is_top":false,"comment_ctime":1531234813,"is_pvip":false,"replies":[{"id":5238,"content":"每个服务是独立的子系统，有各自独立的数据库，缓存，服务器","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275275,"ip_address":"","comment_id":15500,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向服务的拆分成独立的子系统，如文中所讲的学生管理系统，拆分为注册服务，登录服务，管理系统等子系统，请问老师，这些子系统是自己链接数据库的吗？实际项目都是怎么做的？","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420409,"discussion_content":"每个服务是独立的子系统，有各自独立的数据库，缓存，服务器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531275275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341166,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1649400937,"is_pvip":false,"replies":[{"id":124747,"content":"是的，大道相通","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1649502952,"ip_address":"","comment_id":341166,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"提高架构的扩展性靠拆，那么拆是也可以提高代码层面的扩展性？比如：两个功能耦合在一个方法里了，通过拆分成两个方法，一个方法里面各完成一个功能，也达到解耦的效果来提供扩展性","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560967,"discussion_content":"是的，大道相通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649502952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16153,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1079349,"ip_address":"","ucode":"BAF94C4B7FA0EC","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/35/63a49c0a.jpg","comment_is_top":false,"comment_ctime":1531802612,"is_pvip":false,"replies":[{"id":5585,"content":"是的，这就是面向流程拆分，同样是这个电商案例，如果按照男装，女装，电器拆分，就是面向服务拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531810626,"ip_address":"","comment_id":16153,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"面向流程是否可以这样理解，比如电商网站下单的流程。登陆、浏览商品、加入购物车、结算、下单、支付、收货、评价等。拆完就是用户服务、商品服务、订单服务、评价服务等。谢谢华仔这么赞的所有章节！","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420690,"discussion_content":"是的，这就是面向流程拆分，同样是这个电商案例，如果按照男装，女装，电器拆分，就是面向服务拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531810626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100655,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/6f/c78ef1cf.jpg","nickname":"王二北","note":"","ucode":"D9090E28B3E1F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571372,"discussion_content":"“拆完就是用户服务、商品服务、订单服务、评价服务等” ，这么拆分不是按服务拆分吗? 怎么是按流程拆分？按流程拆分是分层架构，每个服务可以按流程拆分，比如用户服务分成n层。 有点晕了，求华仔指导。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1652187928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2643691,"avatar":"https://static001.geekbang.org/account/avatar/00/28/56/eb/c862a6bd.jpg","nickname":"最美的时光","note":"","ucode":"5AAAC0B858F6B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100655,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/6f/c78ef1cf.jpg","nickname":"王二北","note":"","ucode":"D9090E28B3E1F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593612,"discussion_content":"我理解你说的是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668392596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":571372,"ip_address":"天津","group_id":0},"score":593612,"extra":""}]}]},{"had_liked":false,"id":326880,"user_name":"Walter","can_delete":false,"product_type":"c1","uid":1142493,"ip_address":"","ucode":"2AE436899510D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/dd/9f6f3305.jpg","comment_is_top":false,"comment_ctime":1639730517,"is_pvip":false,"replies":[{"id":118748,"content":"Java的SPI，eclipse的OSGi就是微内核相关的技术","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1639738152,"ip_address":"","comment_id":326880,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向功能拆分：微内核架构。\n老师，这个微内核架构该怎么理解?","like_count":2},{"had_liked":false,"id":28716,"user_name":"微风","can_delete":false,"product_type":"c1","uid":1256016,"ip_address":"","ucode":"E55A2764ECFE88","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/50/ec923346.jpg","comment_is_top":false,"comment_ctime":1538133000,"is_pvip":false,"replies":[{"id":10358,"content":"下一章会简单介绍一下","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1538142927,"ip_address":"","comment_id":28716,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"李老师能说说OSGI吗","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425359,"discussion_content":"下一章会简单介绍一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538142927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378795,"user_name":"单朋荣","can_delete":false,"product_type":"c1","uid":1272662,"ip_address":"山东","ucode":"8AD121BEDD9675","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/56/37a4cea7.jpg","comment_is_top":false,"comment_ctime":1690795222,"is_pvip":false,"replies":[{"id":138031,"content":"道法术器，道法基本相通，术器随技术发展而变化","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1690855166,"ip_address":"广东","comment_id":378795,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"感觉架构好多思想都是通的，因为分的方式或者架构本身的特性（SOA和微服务，虽然都是面向服务，因拆分力度、架构设计目的、应用场景、服务通信、是否ESB等方面特性，划分为不同架构模式），形成了特定的架构模式（分层；SOA、微服务；微内核）。\n为什么说思想通的呢？以云原生为例，可以看做是以服务为拆分粒度（Pod），这是变化点，属业务侧；稳定点，也是通用功能Master:controller组建、API Server等和Slave:kubelet，负责服务注册发现、通信等；单看隔离变化，这里也和“微内核”思想的类似，即将业务变化部分封装在插件里面。\n总的来说，架构模式间特性差异明显，但有时也存在关联，尤其思想上较为明显。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624686,"discussion_content":"道法术器，道法基本相通，术器随技术发展而变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690855166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369677,"user_name":"LWD","can_delete":false,"product_type":"c1","uid":1986739,"ip_address":"广东","ucode":"DDA444DB113C01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","comment_is_top":false,"comment_ctime":1677805838,"is_pvip":false,"replies":[{"id":134710,"content":"所有的拆分都是为了单一职责哦","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1677852019,"ip_address":"广东","comment_id":369677,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向流程面向服务面向功能感觉都是在强调单一原则，避免设计出你中有我，我中有你的架构；","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607421,"discussion_content":"所有的拆分都是为了单一职责哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677852019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334944,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1645193694,"is_pvip":false,"replies":[{"id":122751,"content":"对的，可以灵活组合的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645755522,"ip_address":"","comment_id":334944,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"对于整个图书管理系统，有三种拆分方式：按照流程拆，按照服务拆，按照功能拆。在本文案例中，则是选择的按照服务拆分，拆分为了若干个服务。而对于每个服务仍可以继续按照流程、或按照服务、或按照功能继续拆。在本文案例中，注册服务选择了按照流程继续拆分，而登录服务则选择按照功能继续拆分。 ","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553170,"discussion_content":"对的，可以灵活组合的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645755522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284468,"user_name":"Leo Zhao","can_delete":false,"product_type":"c1","uid":1402034,"ip_address":"","ucode":"5E4917CCD120B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/64/b2/18005d2a.jpg","comment_is_top":false,"comment_ctime":1616286312,"is_pvip":true,"replies":[{"id":103168,"content":"你说的这个一般不叫规则引擎，叫流程编排，流程编排和规则引擎都有一个“中央处理器”的大脑，但是设计上不太一样。\n\n规则引擎的核心是规则抽象和规则编写；流程编排的核心是数据流设计和流程扩展。\n\n流程编排一般会将流程固定为几个步骤，然后每个步骤定义好输入输出，处理过程可以通过插件来实现，这样支持不同的流程。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1616295806,"ip_address":"","comment_id":284468,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"很多都认为rule engine是功能拆分，我想说的是 也不一定非黑即白。1，可以是面向流程分层：如果rule engine 本身就是产品，可以有定制 rule 的应用层，计算执行层，数据存储层，导入数据的数据采集层。2。可以是面向业务服务，比如不同的业务部门各自rule 有业务联系，如 校验安全验证- 校验用户画像 - 计算业务部门指标 - 决策部门 报警。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517359,"discussion_content":"你说的这个一般不叫规则引擎，叫流程编排，流程编排和规则引擎都有一个“中央处理器”的大脑，但是设计上不太一样。\n\n规则引擎的核心是规则抽象和规则编写；流程编排的核心是数据流设计和流程扩展。\n\n流程编排一般会将流程固定为几个步骤，然后每个步骤定义好输入输出，处理过程可以通过插件来实现，这样支持不同的流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616295806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939320,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/78/9229749e.jpg","nickname":"未见","note":"","ucode":"EC8F9B0E5F3D9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640371,"discussion_content":"问出了我想问的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711442545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134660,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1568887504,"is_pvip":false,"replies":[{"id":51999,"content":"属于功能扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1569235102,"ip_address":"","comment_id":134660,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"       规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。它最大的价值是实现了业务决策和应用的分离，也就是说最开始应用和规则是耦合在一起的，随着业务的发展规则越来越多，代码越来越难维护，迫切需要将规则分离出去，规则引擎应运而生，变成了应用的决策支持层。从这一点上来讲它属于流程的扩展性。\n        由于大数据和人工智能的发展，决策层的\n功能也变得越来越强大和丰富，往往又引入了基于大数据和人工智能的决策方式，规则引擎是其中之一。从这一点上来讲它属于功能的扩展。\n        规则引擎是通用的能力，离开了具体的应用就不会产生价值，通常要应用传递参数才能给出决策。从这一点上看它不属于服务的扩展。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467852,"discussion_content":"属于功能扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569235102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23539,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1536471246,"is_pvip":false,"replies":[{"id":8590,"content":"通常规则引擎还是按功能拆分更方便实施","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536567764,"ip_address":"","comment_id":23539,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"规则引擎更多的是对变化比较频繁、参数比较多、条件组合比较多场景下的一种相对优雅的解决方法，可以归属为服务或功能层面，具体是功能还是服务要看切分的粒度。比如判断当前操作者是否为用户本人，可以采用规则引擎来实现，但这是一个服务还是功能就需要看具体的切分粒度和实现方式。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467852,"discussion_content":"属于功能扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569235102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15985,"user_name":"Tom","can_delete":false,"product_type":"c1","uid":1109832,"ip_address":"","ucode":"00EEDE4CB11776","user_header":"","comment_is_top":false,"comment_ctime":1531707252,"is_pvip":false,"replies":[{"id":5519,"content":"微内核，规则引擎","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531720204,"ip_address":"","comment_id":15985,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向服务拆分的具体表现形式是每个服务部署为一个子系统，面向功能拆分的具体表现形式是怎样的呢，新功能一个dll？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423605,"discussion_content":"通常规则引擎还是按功能拆分更方便实施","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536567764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15454,"user_name":"空档滑行","can_delete":false,"product_type":"c1","uid":1091611,"ip_address":"","ucode":"06A6A7F503FAA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/1b/ced1d171.jpg","comment_is_top":false,"comment_ctime":1531197023,"is_pvip":false,"replies":[{"id":5246,"content":"是的，功能拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276082,"ip_address":"","comment_id":15454,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"感觉像是按功能拆分，一个模块可能之前只支持一两个规则，在有新的功能要加进来时可以只添加具体功能的实现，嵌入到原来的流程中。比如我们之前做的积分系统，各种活动获取积分时翻倍，新的活动规则都是用插件的方式添加的，不知道这个算不算。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420391,"discussion_content":"是的，功能拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531276082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326880,"user_name":"Walter","can_delete":false,"product_type":"c1","uid":1142493,"ip_address":"","ucode":"2AE436899510D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/dd/9f6f3305.jpg","comment_is_top":false,"comment_ctime":1639730517,"is_pvip":false,"replies":[{"id":118748,"content":"Java的SPI，eclipse的OSGi就是微内核相关的技术","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1639738152,"ip_address":"","comment_id":326880,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向功能拆分：微内核架构。\n老师，这个微内核架构该怎么理解?","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539518,"discussion_content":"Java的SPI，eclipse的OSGi就是微内核相关的技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639738152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28716,"user_name":"微风","can_delete":false,"product_type":"c1","uid":1256016,"ip_address":"","ucode":"E55A2764ECFE88","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/50/ec923346.jpg","comment_is_top":false,"comment_ctime":1538133000,"is_pvip":false,"replies":[{"id":10358,"content":"下一章会简单介绍一下","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1538142927,"ip_address":"","comment_id":28716,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"李老师能说说OSGI吗","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539518,"discussion_content":"Java的SPI，eclipse的OSGi就是微内核相关的技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639738152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378795,"user_name":"单朋荣","can_delete":false,"product_type":"c1","uid":1272662,"ip_address":"山东","ucode":"8AD121BEDD9675","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/56/37a4cea7.jpg","comment_is_top":false,"comment_ctime":1690795222,"is_pvip":false,"replies":[{"id":138031,"content":"道法术器，道法基本相通，术器随技术发展而变化","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1690855166,"ip_address":"广东","comment_id":378795,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"感觉架构好多思想都是通的，因为分的方式或者架构本身的特性（SOA和微服务，虽然都是面向服务，因拆分力度、架构设计目的、应用场景、服务通信、是否ESB等方面特性，划分为不同架构模式），形成了特定的架构模式（分层；SOA、微服务；微内核）。\n为什么说思想通的呢？以云原生为例，可以看做是以服务为拆分粒度（Pod），这是变化点，属业务侧；稳定点，也是通用功能Master:controller组建、API Server等和Slave:kubelet，负责服务注册发现、通信等；单看隔离变化，这里也和“微内核”思想的类似，即将业务变化部分封装在插件里面。\n总的来说，架构模式间特性差异明显，但有时也存在关联，尤其思想上较为明显。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425359,"discussion_content":"下一章会简单介绍一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538142927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369677,"user_name":"LWD","can_delete":false,"product_type":"c1","uid":1986739,"ip_address":"广东","ucode":"DDA444DB113C01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","comment_is_top":false,"comment_ctime":1677805838,"is_pvip":false,"replies":[{"id":134710,"content":"所有的拆分都是为了单一职责哦","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1677852019,"ip_address":"广东","comment_id":369677,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向流程面向服务面向功能感觉都是在强调单一原则，避免设计出你中有我，我中有你的架构；","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624686,"discussion_content":"道法术器，道法基本相通，术器随技术发展而变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690855166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334944,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1645193694,"is_pvip":false,"replies":[{"id":122751,"content":"对的，可以灵活组合的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645755522,"ip_address":"","comment_id":334944,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"对于整个图书管理系统，有三种拆分方式：按照流程拆，按照服务拆，按照功能拆。在本文案例中，则是选择的按照服务拆分，拆分为了若干个服务。而对于每个服务仍可以继续按照流程、或按照服务、或按照功能继续拆。在本文案例中，注册服务选择了按照流程继续拆分，而登录服务则选择按照功能继续拆分。 ","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607421,"discussion_content":"所有的拆分都是为了单一职责哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677852019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284468,"user_name":"Leo Zhao","can_delete":false,"product_type":"c1","uid":1402034,"ip_address":"","ucode":"5E4917CCD120B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/64/b2/18005d2a.jpg","comment_is_top":false,"comment_ctime":1616286312,"is_pvip":true,"replies":[{"id":103168,"content":"你说的这个一般不叫规则引擎，叫流程编排，流程编排和规则引擎都有一个“中央处理器”的大脑，但是设计上不太一样。\n\n规则引擎的核心是规则抽象和规则编写；流程编排的核心是数据流设计和流程扩展。\n\n流程编排一般会将流程固定为几个步骤，然后每个步骤定义好输入输出，处理过程可以通过插件来实现，这样支持不同的流程。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1616295806,"ip_address":"","comment_id":284468,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"很多都认为rule engine是功能拆分，我想说的是 也不一定非黑即白。1，可以是面向流程分层：如果rule engine 本身就是产品，可以有定制 rule 的应用层，计算执行层，数据存储层，导入数据的数据采集层。2。可以是面向业务服务，比如不同的业务部门各自rule 有业务联系，如 校验安全验证- 校验用户画像 - 计算业务部门指标 - 决策部门 报警。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553170,"discussion_content":"对的，可以灵活组合的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645755522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134660,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1568887504,"is_pvip":false,"replies":[{"id":51999,"content":"属于功能扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1569235102,"ip_address":"","comment_id":134660,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"       规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。它最大的价值是实现了业务决策和应用的分离，也就是说最开始应用和规则是耦合在一起的，随着业务的发展规则越来越多，代码越来越难维护，迫切需要将规则分离出去，规则引擎应运而生，变成了应用的决策支持层。从这一点上来讲它属于流程的扩展性。\n        由于大数据和人工智能的发展，决策层的\n功能也变得越来越强大和丰富，往往又引入了基于大数据和人工智能的决策方式，规则引擎是其中之一。从这一点上来讲它属于功能的扩展。\n        规则引擎是通用的能力，离开了具体的应用就不会产生价值，通常要应用传递参数才能给出决策。从这一点上看它不属于服务的扩展。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517359,"discussion_content":"你说的这个一般不叫规则引擎，叫流程编排，流程编排和规则引擎都有一个“中央处理器”的大脑，但是设计上不太一样。\n\n规则引擎的核心是规则抽象和规则编写；流程编排的核心是数据流设计和流程扩展。\n\n流程编排一般会将流程固定为几个步骤，然后每个步骤定义好输入输出，处理过程可以通过插件来实现，这样支持不同的流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616295806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939320,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/78/9229749e.jpg","nickname":"未见","note":"","ucode":"EC8F9B0E5F3D9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640371,"discussion_content":"问出了我想问的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711442545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23539,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1536471246,"is_pvip":false,"replies":[{"id":8590,"content":"通常规则引擎还是按功能拆分更方便实施","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536567764,"ip_address":"","comment_id":23539,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"规则引擎更多的是对变化比较频繁、参数比较多、条件组合比较多场景下的一种相对优雅的解决方法，可以归属为服务或功能层面，具体是功能还是服务要看切分的粒度。比如判断当前操作者是否为用户本人，可以采用规则引擎来实现，但这是一个服务还是功能就需要看具体的切分粒度和实现方式。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423605,"discussion_content":"通常规则引擎还是按功能拆分更方便实施","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536567764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15985,"user_name":"Tom","can_delete":false,"product_type":"c1","uid":1109832,"ip_address":"","ucode":"00EEDE4CB11776","user_header":"","comment_is_top":false,"comment_ctime":1531707252,"is_pvip":false,"replies":[{"id":5519,"content":"微内核，规则引擎","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531720204,"ip_address":"","comment_id":15985,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"面向服务拆分的具体表现形式是每个服务部署为一个子系统，面向功能拆分的具体表现形式是怎样的呢，新功能一个dll？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420626,"discussion_content":"微内核，规则引擎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531720204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15454,"user_name":"空档滑行","can_delete":false,"product_type":"c1","uid":1091611,"ip_address":"","ucode":"06A6A7F503FAA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/1b/ced1d171.jpg","comment_is_top":false,"comment_ctime":1531197023,"is_pvip":false,"replies":[{"id":5246,"content":"是的，功能拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276082,"ip_address":"","comment_id":15454,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"感觉像是按功能拆分，一个模块可能之前只支持一两个规则，在有新的功能要加进来时可以只添加具体功能的实现，嵌入到原来的流程中。比如我们之前做的积分系统，各种活动获取积分时翻倍，新的活动规则都是用插件的方式添加的，不知道这个算不算。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420626,"discussion_content":"微内核，规则引擎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531720204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15405,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1531180748,"is_pvip":false,"replies":[{"id":5265,"content":"规则引擎最终还是要完成功能的呀，不是把规则拆分为设计和执行","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531292208,"ip_address":"","comment_id":15405,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"感觉规则引擎是面向流程的拆分，将规则的生命周期拆分成了:设计和执行两步","like_count":1},{"had_liked":false,"id":383006,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1698299237,"is_pvip":false,"replies":[{"id":139541,"content":"你说的三者集合是在需求分析的时候可能都用到，但是在系统设计落地的时候，不可能三个同时落地。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1698392342,"ip_address":"广东","comment_id":383006,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师你好，就 面相 流程 服务 功能 的拆分我有些疑问。\n\n\n就比较常规的项目来说，是不是都是这三者的集合(就即使 不做微服的传统项目也类似)\n\n就比如，一个项目来说，首先 它肯定是要划分服务的(也就是不同的业务场景，登录，评论等)，然后 每个具体业务都需要进一步划分细粒度功能(即服务是一系列同类型功能的集合，比如短信登录和邮箱登录)，最后 落实到业务和功能的代码实现上，传统项目来说，也都是分层拆分的。\n\n然后 在拆分上 面相 业务和功能 拆分都是为了 具体业务或功能的可扩展性，这两者的目的相同，但是粒度粒度级别不同\n\n而 面相流程拆分 则是一种具体编写代码的组织形式，目的 通常是为了替换某一个组件(比如数据库)，防止 组件更换时，对 不同抽象级别的代码 的影响，让变更集中在 某一个抽象层级(比如 service 或者 dao)","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420375,"discussion_content":"规则引擎最终还是要完成功能的呀，不是把规则拆分为设计和执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531292208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372557,"user_name":"Wheat Liu","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"北京","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","comment_is_top":false,"comment_ctime":1681283431,"is_pvip":false,"replies":[{"id":136006,"content":"除了集成第三方登录，还有很多可以做的事情","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1681360763,"ip_address":"广东","comment_id":372557,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"有一个问题，为什么注册、登录、信息管理等功能，要拆成单独的服务，我理解首先，这些功能不需要具备强大的扩展性，因为不可能隔段时间就要集成一个新的第三方登录","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630410,"discussion_content":"你说的三者集合是在需求分析的时候可能都用到，但是在系统设计落地的时候，不可能三个同时落地。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698392342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370336,"user_name":"拿笔小星","can_delete":false,"product_type":"c1","uid":1193755,"ip_address":"上海","ucode":"D3D8F6A959710D","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/1b/82310e20.jpg","comment_is_top":false,"comment_ctime":1678721217,"is_pvip":false,"replies":[{"id":135071,"content":"对的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1678789745,"ip_address":"广东","comment_id":370336,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"所以MVC架构是一个面向流程拆分的架构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613501,"discussion_content":"除了集成第三方登录，还有很多可以做的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681360763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","nickname":"Wheat Liu","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":613631,"discussion_content":"华哥好，感谢您的回复！想请教下，您是基于什么原因，将学生管理系统这样拆分的。比如考虑到登录后期可能会有xx 变化，加 xx 功能，会出现 xx 问题，所以将它拆出来。因为就我理解，对于学生管理系统而言，这样的设计是不是违背简单原则了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681435835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":613501,"ip_address":"北京","group_id":0},"score":613631,"extra":""}]}]},{"had_liked":false,"id":357873,"user_name":"Geek_06d12d","can_delete":false,"product_type":"c1","uid":1590623,"ip_address":"广东","ucode":"1C5172C3BBAEC3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqGaJsoQicG7Bp8cUjUkevAp5Sm8ZXy5vl5TVk4CDrq5UAoI9VicK5wwjCdk66FVRbGziaWXHgO52l1Q/132","comment_is_top":false,"comment_ctime":1663723628,"is_pvip":false,"replies":[{"id":130313,"content":"1. 注册服务是面向服务拆分，\n2. 面向流程可以按照处理流程，也可以按照业务流程来拆分；\n3. 登录服务本身可以继续按功能拆分","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1663900171,"ip_address":"广东","comment_id":357873,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"没懂为啥注册服务是属于面向流程拆分？面向流程不是抽象具体业务的分层么？还有登录服务不是属于面向服务吗？怎么又变成微内核？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609030,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678789746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353795,"user_name":"李晨","can_delete":false,"product_type":"c1","uid":2716735,"ip_address":"广东","ucode":"D734DE3B9A5A2D","user_header":"https://static001.geekbang.org/account/avatar/00/29/74/3f/5c9fd08f.jpg","comment_is_top":false,"comment_ctime":1659790619,"is_pvip":false,"replies":[{"id":128827,"content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1660208056,"ip_address":"广东","comment_id":353795,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"没有分层，也不区分服务。规则引擎的核心我认为是可以扩展规则，也就是功能方面的扩展，所以我认为它是面向功能拆分的方式。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588611,"discussion_content":"1. 注册服务是面向服务拆分，\n2. 面向流程可以按照处理流程，也可以按照业务流程来拆分；\n3. 登录服务本身可以继续按功能拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663900171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334770,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1645107446,"is_pvip":false,"replies":[{"id":122291,"content":"同一个级别的范围是流程&gt;服务&gt;功能，你做的那个图书管理系统，第一次拆分是按服务拆分得到注册服务，第二次是进一步对注册服务拆分，这时就按照流程拆分了，两次拆分的级别不同。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645143299,"ip_address":"","comment_id":334770,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"本书前面介绍到“从范围上来看，从大到小依次为：流程 &gt; 服务 &gt; 功能”  但是最后的图书管理系统的组合拆分方式为是：先将系统整体按照微服务拆分为XXX服务 注册服务等   然后注册服务又按照流程拆分。从这个例子我感觉是 从范围来看 服务&gt;流程了  这与开头的大小关系岂不是矛盾了么 ？ 请李老师解惑 ","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583565,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660208056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326188,"user_name":"zzj8704","can_delete":false,"product_type":"c1","uid":1140303,"ip_address":"","ucode":"ED58C490232B96","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/4f/39386c3f.jpg","comment_is_top":false,"comment_ctime":1639407508,"is_pvip":false,"replies":[{"id":118537,"content":"迭代和递归 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1639526731,"ip_address":"","comment_id":326188,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"分层，分领域，分类，三刀拆分法； 分类后也可以继续按此分法继续玩.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551802,"discussion_content":"同一个级别的范围是流程&gt;服务&gt;功能，你做的那个图书管理系统，第一次拆分是按服务拆分得到注册服务，第二次是进一步对注册服务拆分，这时就按照流程拆分了，两次拆分的级别不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645143299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663324,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","nickname":"11月的萧邦","note":"","ucode":"E7A2236BFD9ABE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551810,"discussion_content":"那对于同一级别 是只能选择一种拆分方式么  为啥图书管理系统不是按照流程去拆分 而是按照服务拆分呢？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645145786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313560,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2429927,"ip_address":"","ucode":"29DFC9EAD0F018","user_header":"https://static001.geekbang.org/account/avatar/00/25/13/e7/9dc6ac55.jpg","comment_is_top":false,"comment_ctime":1632499323,"is_pvip":false,"replies":[{"id":113599,"content":"你可以理解为拆分后就得到了处理视图","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1632615553,"ip_address":"","comment_id":313560,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"这里的可拓展架构设计，从流程，服务，功能维度得到的架构图与4+1视图得出的架构图有什么联系或者区别吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538799,"discussion_content":"迭代和递归 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639526731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279423,"user_name":"袁军","can_delete":false,"product_type":"c1","uid":2411102,"ip_address":"","ucode":"201E088AE4D271","user_header":"","comment_is_top":false,"comment_ctime":1613783054,"is_pvip":false,"replies":[{"id":101537,"content":"OSGI通过bundle来做物理隔离，bundle之间用消息来通信，也是可以做到强制隔离的。\n\n一般来说，函数、类、包并不能起到隔离作用，因为仅靠程序员意识是无法精确区分什么时候该用类来隔离，什么时候该用包来隔离。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1613813126,"ip_address":"","comment_id":279423,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"从另一个角度，单体系统和分布式系统应该分开来讲会更好理解，从函数、类、包、组件、单体系统、分布式系统是不同层次的粒度，各层次都可以拆分进行解耦。差别在于各层隔离的约束力不一样，比如用服务拆分优势在于能达到强制隔离，因为服务与单体系统是同层次的，而单体系统都是相互隔离的。OSGI想在单体系统中实现强隔离，但是缺乏实际的物理边界，靠程序员自身意识来保障太难了。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527392,"discussion_content":"你可以理解为拆分后就得到了处理视图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632615553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15405,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1531180748,"is_pvip":false,"replies":[{"id":5265,"content":"规则引擎最终还是要完成功能的呀，不是把规则拆分为设计和执行","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531292208,"ip_address":"","comment_id":15405,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"感觉规则引擎是面向流程的拆分，将规则的生命周期拆分成了:设计和执行两步","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420375,"discussion_content":"规则引擎最终还是要完成功能的呀，不是把规则拆分为设计和执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531292208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383006,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1698299237,"is_pvip":false,"replies":[{"id":139541,"content":"你说的三者集合是在需求分析的时候可能都用到，但是在系统设计落地的时候，不可能三个同时落地。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1698392342,"ip_address":"广东","comment_id":383006,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师你好，就 面相 流程 服务 功能 的拆分我有些疑问。\n\n\n就比较常规的项目来说，是不是都是这三者的集合(就即使 不做微服的传统项目也类似)\n\n就比如，一个项目来说，首先 它肯定是要划分服务的(也就是不同的业务场景，登录，评论等)，然后 每个具体业务都需要进一步划分细粒度功能(即服务是一系列同类型功能的集合，比如短信登录和邮箱登录)，最后 落实到业务和功能的代码实现上，传统项目来说，也都是分层拆分的。\n\n然后 在拆分上 面相 业务和功能 拆分都是为了 具体业务或功能的可扩展性，这两者的目的相同，但是粒度粒度级别不同\n\n而 面相流程拆分 则是一种具体编写代码的组织形式，目的 通常是为了替换某一个组件(比如数据库)，防止 组件更换时，对 不同抽象级别的代码 的影响，让变更集中在 某一个抽象层级(比如 service 或者 dao)","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630410,"discussion_content":"你说的三者集合是在需求分析的时候可能都用到，但是在系统设计落地的时候，不可能三个同时落地。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698392342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372557,"user_name":"Wheat Liu","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"北京","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","comment_is_top":false,"comment_ctime":1681283431,"is_pvip":false,"replies":[{"id":136006,"content":"除了集成第三方登录，还有很多可以做的事情","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1681360763,"ip_address":"广东","comment_id":372557,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"有一个问题，为什么注册、登录、信息管理等功能，要拆成单独的服务，我理解首先，这些功能不需要具备强大的扩展性，因为不可能隔段时间就要集成一个新的第三方登录","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613501,"discussion_content":"除了集成第三方登录，还有很多可以做的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681360763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","nickname":"Wheat Liu","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":613631,"discussion_content":"华哥好，感谢您的回复！想请教下，您是基于什么原因，将学生管理系统这样拆分的。比如考虑到登录后期可能会有xx 变化，加 xx 功能，会出现 xx 问题，所以将它拆出来。因为就我理解，对于学生管理系统而言，这样的设计是不是违背简单原则了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681435835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":613501,"ip_address":"北京","group_id":0},"score":613631,"extra":""}]}]},{"had_liked":false,"id":370336,"user_name":"拿笔小星","can_delete":false,"product_type":"c1","uid":1193755,"ip_address":"上海","ucode":"D3D8F6A959710D","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/1b/82310e20.jpg","comment_is_top":false,"comment_ctime":1678721217,"is_pvip":false,"replies":[{"id":135071,"content":"对的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1678789745,"ip_address":"广东","comment_id":370336,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"所以MVC架构是一个面向流程拆分的架构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609030,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678789746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357873,"user_name":"Geek_06d12d","can_delete":false,"product_type":"c1","uid":1590623,"ip_address":"广东","ucode":"1C5172C3BBAEC3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqGaJsoQicG7Bp8cUjUkevAp5Sm8ZXy5vl5TVk4CDrq5UAoI9VicK5wwjCdk66FVRbGziaWXHgO52l1Q/132","comment_is_top":false,"comment_ctime":1663723628,"is_pvip":false,"replies":[{"id":130313,"content":"1. 注册服务是面向服务拆分，\n2. 面向流程可以按照处理流程，也可以按照业务流程来拆分；\n3. 登录服务本身可以继续按功能拆分","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1663900171,"ip_address":"广东","comment_id":357873,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"没懂为啥注册服务是属于面向流程拆分？面向流程不是抽象具体业务的分层么？还有登录服务不是属于面向服务吗？怎么又变成微内核？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588611,"discussion_content":"1. 注册服务是面向服务拆分，\n2. 面向流程可以按照处理流程，也可以按照业务流程来拆分；\n3. 登录服务本身可以继续按功能拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663900171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353795,"user_name":"李晨","can_delete":false,"product_type":"c1","uid":2716735,"ip_address":"广东","ucode":"D734DE3B9A5A2D","user_header":"https://static001.geekbang.org/account/avatar/00/29/74/3f/5c9fd08f.jpg","comment_is_top":false,"comment_ctime":1659790619,"is_pvip":false,"replies":[{"id":128827,"content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1660208056,"ip_address":"广东","comment_id":353795,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"没有分层，也不区分服务。规则引擎的核心我认为是可以扩展规则，也就是功能方面的扩展，所以我认为它是面向功能拆分的方式。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583565,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660208056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334770,"user_name":"11月的萧邦","can_delete":false,"product_type":"c1","uid":2663324,"ip_address":"","ucode":"E7A2236BFD9ABE","user_header":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","comment_is_top":false,"comment_ctime":1645107446,"is_pvip":false,"replies":[{"id":122291,"content":"同一个级别的范围是流程&gt;服务&gt;功能，你做的那个图书管理系统，第一次拆分是按服务拆分得到注册服务，第二次是进一步对注册服务拆分，这时就按照流程拆分了，两次拆分的级别不同。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645143299,"ip_address":"","comment_id":334770,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"本书前面介绍到“从范围上来看，从大到小依次为：流程 &gt; 服务 &gt; 功能”  但是最后的图书管理系统的组合拆分方式为是：先将系统整体按照微服务拆分为XXX服务 注册服务等   然后注册服务又按照流程拆分。从这个例子我感觉是 从范围来看 服务&gt;流程了  这与开头的大小关系岂不是矛盾了么 ？ 请李老师解惑 ","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551802,"discussion_content":"同一个级别的范围是流程&gt;服务&gt;功能，你做的那个图书管理系统，第一次拆分是按服务拆分得到注册服务，第二次是进一步对注册服务拆分，这时就按照流程拆分了，两次拆分的级别不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645143299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663324,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","nickname":"11月的萧邦","note":"","ucode":"E7A2236BFD9ABE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551810,"discussion_content":"那对于同一级别 是只能选择一种拆分方式么  为啥图书管理系统不是按照流程去拆分 而是按照服务拆分呢？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645145786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326188,"user_name":"zzj8704","can_delete":false,"product_type":"c1","uid":1140303,"ip_address":"","ucode":"ED58C490232B96","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/4f/39386c3f.jpg","comment_is_top":false,"comment_ctime":1639407508,"is_pvip":false,"replies":[{"id":118537,"content":"迭代和递归 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1639526731,"ip_address":"","comment_id":326188,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"分层，分领域，分类，三刀拆分法； 分类后也可以继续按此分法继续玩.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538799,"discussion_content":"迭代和递归 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639526731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313560,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2429927,"ip_address":"","ucode":"29DFC9EAD0F018","user_header":"https://static001.geekbang.org/account/avatar/00/25/13/e7/9dc6ac55.jpg","comment_is_top":false,"comment_ctime":1632499323,"is_pvip":false,"replies":[{"id":113599,"content":"你可以理解为拆分后就得到了处理视图","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1632615553,"ip_address":"","comment_id":313560,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"这里的可拓展架构设计，从流程，服务，功能维度得到的架构图与4+1视图得出的架构图有什么联系或者区别吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527392,"discussion_content":"你可以理解为拆分后就得到了处理视图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632615553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279423,"user_name":"袁军","can_delete":false,"product_type":"c1","uid":2411102,"ip_address":"","ucode":"201E088AE4D271","user_header":"","comment_is_top":false,"comment_ctime":1613783054,"is_pvip":false,"replies":[{"id":101537,"content":"OSGI通过bundle来做物理隔离，bundle之间用消息来通信，也是可以做到强制隔离的。\n\n一般来说，函数、类、包并不能起到隔离作用，因为仅靠程序员意识是无法精确区分什么时候该用类来隔离，什么时候该用包来隔离。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1613813126,"ip_address":"","comment_id":279423,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"从另一个角度，单体系统和分布式系统应该分开来讲会更好理解，从函数、类、包、组件、单体系统、分布式系统是不同层次的粒度，各层次都可以拆分进行解耦。差别在于各层隔离的约束力不一样，比如用服务拆分优势在于能达到强制隔离，因为服务与单体系统是同层次的，而单体系统都是相互隔离的。OSGI想在单体系统中实现强隔离，但是缺乏实际的物理边界，靠程序员自身意识来保障太难了。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515734,"discussion_content":"OSGI通过bundle来做物理隔离，bundle之间用消息来通信，也是可以做到强制隔离的。\n\n一般来说，函数、类、包并不能起到隔离作用，因为仅靠程序员意识是无法精确区分什么时候该用类来隔离，什么时候该用包来隔离。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613813126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270864,"user_name":"小神david","can_delete":false,"product_type":"c1","uid":1206959,"ip_address":"","ucode":"F593F5ECEC58BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","comment_is_top":false,"comment_ctime":1609305449,"is_pvip":false,"replies":[{"id":98334,"content":"分析到位","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1609486428,"ip_address":"","comment_id":270864,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"服务应该更多是具体的、场景化的功能集合，为实现某个场景，比如登录或者注册，而功能是一个微型的、单独实现某个具体任务的，比如登录的不同方式等，所以规则引擎更倾向于属于面向功能的。","like_count":0},{"had_liked":false,"id":262359,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1605698849,"is_pvip":false,"replies":[{"id":95465,"content":"正解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606010924,"ip_address":"","comment_id":262359,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎属于具体得业务功能，属于功能点。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509800,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606010924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250282,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1601009219,"is_pvip":false,"replies":[{"id":91865,"content":"你这个复杂度只是规模复杂度，高性能高可用不一定用拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601431182,"ip_address":"","comment_id":250282,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"架构是为了应对软件系统复杂度。而应对复杂事物的方式无非是:分而治之，或者说拆，分工，模块化等用语。拆了之后，一个功能有问题，就只需改这一个功能，这就满足了扩展性要求。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506173,"discussion_content":"你这个复杂度只是规模复杂度，高性能高可用不一定用拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601431182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217060,"user_name":"清泉","can_delete":false,"product_type":"c1","uid":1102743,"ip_address":"","ucode":"28EAE68B33A140","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","comment_is_top":false,"comment_ctime":1589414518,"is_pvip":false,"replies":[{"id":80546,"content":"你可以再仔细研究一下几个案例，架构层面的可扩展性的核心就是拆分然后独立扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1589624697,"ip_address":"","comment_id":217060,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"个人感觉拆跟扩展性关系并不是那么密切。拆其实是架构设计的过程，通过分治来解决系统的复杂度。流程更像是功能模块的分层，服务和功能更像是不同粒度的功能模块","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506173,"discussion_content":"你这个复杂度只是规模复杂度，高性能高可用不一定用拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601431182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200295,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1580358,"ip_address":"","ucode":"D85B99FD0C4B76","user_header":"https://wx.qlogo.cn/mmopen/vi_32/ZMALpD4bKCVdsx8ymCC5Oo0oxibxIFGQzT6fP2B8MEgLGLktQRX4ictobkbcNBDTQibjoQNKBmWCKomNibWqHZ5kpg/132","comment_is_top":false,"comment_ctime":1585569932,"is_pvip":false,"replies":[{"id":75029,"content":"哈哈，这个已经是简单的系统了，所以说学点理论还是很有帮助的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585625459,"ip_address":"","comment_id":200295,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"学生管理系统是我进公司时,为公司的人事部实现的一个系统.当时什么也不懂,看个代码也是费力.今天看到老师的课,才知道当时是按照服务来划分的.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495027,"discussion_content":"你可以再仔细研究一下几个案例，架构层面的可扩展性的核心就是拆分然后独立扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589624697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274889,"discussion_content":"拆分，然后独立扩展。嗯，这么理解确实比较明白。谢谢指导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590629295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79287,"user_name":"日光倾城","can_delete":false,"product_type":"c1","uid":1120345,"ip_address":"","ucode":"E4329963F660DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/59/daeb0b6c.jpg","comment_is_top":false,"comment_ctime":1553424711,"is_pvip":false,"replies":[{"id":29078,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1553557831,"ip_address":"","comment_id":79287,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎我觉得是基于功能的","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489989,"discussion_content":"哈哈，这个已经是简单的系统了，所以说学点理论还是很有帮助的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585625459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15951,"user_name":"成功","can_delete":false,"product_type":"c1","uid":1112099,"ip_address":"","ucode":"954B90AC92E8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/23/165d2f0e.jpg","comment_is_top":false,"comment_ctime":1531695384,"is_pvip":false,"replies":[{"id":5524,"content":"我理解是面向功能的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531720889,"ip_address":"","comment_id":15951,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎应该是面向流程的架构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420615,"discussion_content":"我理解是面向功能的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531720889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15628,"user_name":"LB","can_delete":false,"product_type":"c1","uid":1047988,"ip_address":"","ucode":"25DD8D5597CB1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/b4/b5483cd5.jpg","comment_is_top":false,"comment_ctime":1531355567,"is_pvip":false,"replies":[{"id":5420,"content":"其实没有明显的界限，微服务章节会讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531448566,"ip_address":"","comment_id":15628,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"请问服务、微服务、功能从拆分边界上如何区分呢？谢谢华仔。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420615,"discussion_content":"我理解是面向功能的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531720889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15620,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1531354143,"is_pvip":false,"replies":[{"id":5418,"content":"规则引擎是面向功能拆分，后面会讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531448481,"ip_address":"","comment_id":15620,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎应该用面向服务的方式进行拆分，因为把规则作为服务的方式，一来可以复用，二来方便对规则进行扩展，不知道我的回答对不？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420479,"discussion_content":"规则引擎是面向功能拆分，后面会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531448481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15498,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1531232679,"is_pvip":false,"replies":[{"id":5239,"content":"规则引擎不太会独立为服务","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275385,"ip_address":"","comment_id":15498,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"看人看法，站在系统的角度，规则引擎应该属于服务拆分。而规则引擎内部属于功能拆分。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420408,"discussion_content":"规则引擎不太会独立为服务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531275385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270864,"user_name":"小神david","can_delete":false,"product_type":"c1","uid":1206959,"ip_address":"","ucode":"F593F5ECEC58BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","comment_is_top":false,"comment_ctime":1609305449,"is_pvip":false,"replies":[{"id":98334,"content":"分析到位","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1609486428,"ip_address":"","comment_id":270864,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"服务应该更多是具体的、场景化的功能集合，为实现某个场景，比如登录或者注册，而功能是一个微型的、单独实现某个具体任务的，比如登录的不同方式等，所以规则引擎更倾向于属于面向功能的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512769,"discussion_content":"分析到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609486428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262359,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1605698849,"is_pvip":false,"replies":[{"id":95465,"content":"正解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606010924,"ip_address":"","comment_id":262359,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎属于具体得业务功能，属于功能点。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512769,"discussion_content":"分析到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609486428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250282,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1601009219,"is_pvip":false,"replies":[{"id":91865,"content":"你这个复杂度只是规模复杂度，高性能高可用不一定用拆分","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601431182,"ip_address":"","comment_id":250282,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"架构是为了应对软件系统复杂度。而应对复杂事物的方式无非是:分而治之，或者说拆，分工，模块化等用语。拆了之后，一个功能有问题，就只需改这一个功能，这就满足了扩展性要求。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509800,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606010924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217060,"user_name":"清泉","can_delete":false,"product_type":"c1","uid":1102743,"ip_address":"","ucode":"28EAE68B33A140","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","comment_is_top":false,"comment_ctime":1589414518,"is_pvip":false,"replies":[{"id":80546,"content":"你可以再仔细研究一下几个案例，架构层面的可扩展性的核心就是拆分然后独立扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1589624697,"ip_address":"","comment_id":217060,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"个人感觉拆跟扩展性关系并不是那么密切。拆其实是架构设计的过程，通过分治来解决系统的复杂度。流程更像是功能模块的分层，服务和功能更像是不同粒度的功能模块","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495027,"discussion_content":"你可以再仔细研究一下几个案例，架构层面的可扩展性的核心就是拆分然后独立扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589624697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274889,"discussion_content":"拆分，然后独立扩展。嗯，这么理解确实比较明白。谢谢指导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590629295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200295,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1580358,"ip_address":"","ucode":"D85B99FD0C4B76","user_header":"https://wx.qlogo.cn/mmopen/vi_32/ZMALpD4bKCVdsx8ymCC5Oo0oxibxIFGQzT6fP2B8MEgLGLktQRX4ictobkbcNBDTQibjoQNKBmWCKomNibWqHZ5kpg/132","comment_is_top":false,"comment_ctime":1585569932,"is_pvip":false,"replies":[{"id":75029,"content":"哈哈，这个已经是简单的系统了，所以说学点理论还是很有帮助的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585625459,"ip_address":"","comment_id":200295,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"学生管理系统是我进公司时,为公司的人事部实现的一个系统.当时什么也不懂,看个代码也是费力.今天看到老师的课,才知道当时是按照服务来划分的.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489989,"discussion_content":"哈哈，这个已经是简单的系统了，所以说学点理论还是很有帮助的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585625459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79287,"user_name":"日光倾城","can_delete":false,"product_type":"c1","uid":1120345,"ip_address":"","ucode":"E4329963F660DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/59/daeb0b6c.jpg","comment_is_top":false,"comment_ctime":1553424711,"is_pvip":false,"replies":[{"id":29078,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1553557831,"ip_address":"","comment_id":79287,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎我觉得是基于功能的","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444431,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553557831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15951,"user_name":"成功","can_delete":false,"product_type":"c1","uid":1112099,"ip_address":"","ucode":"954B90AC92E8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/23/165d2f0e.jpg","comment_is_top":false,"comment_ctime":1531695384,"is_pvip":false,"replies":[{"id":5524,"content":"我理解是面向功能的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531720889,"ip_address":"","comment_id":15951,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎应该是面向流程的架构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444431,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553557831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15628,"user_name":"LB","can_delete":false,"product_type":"c1","uid":1047988,"ip_address":"","ucode":"25DD8D5597CB1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/b4/b5483cd5.jpg","comment_is_top":false,"comment_ctime":1531355567,"is_pvip":false,"replies":[{"id":5420,"content":"其实没有明显的界限，微服务章节会讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531448566,"ip_address":"","comment_id":15628,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"请问服务、微服务、功能从拆分边界上如何区分呢？谢谢华仔。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420483,"discussion_content":"其实没有明显的界限，微服务章节会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531448566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15620,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1531354143,"is_pvip":false,"replies":[{"id":5418,"content":"规则引擎是面向功能拆分，后面会讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531448481,"ip_address":"","comment_id":15620,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎应该用面向服务的方式进行拆分，因为把规则作为服务的方式，一来可以复用，二来方便对规则进行扩展，不知道我的回答对不？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420483,"discussion_content":"其实没有明显的界限，微服务章节会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531448566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15498,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1531232679,"is_pvip":false,"replies":[{"id":5239,"content":"规则引擎不太会独立为服务","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531275385,"ip_address":"","comment_id":15498,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"看人看法，站在系统的角度，规则引擎应该属于服务拆分。而规则引擎内部属于功能拆分。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420479,"discussion_content":"规则引擎是面向功能拆分，后面会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531448481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15447,"user_name":"炫吉","can_delete":false,"product_type":"c1","uid":1106795,"ip_address":"","ucode":"E35C964F3C6DFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/6b/84aa2e63.jpg","comment_is_top":false,"comment_ctime":1531192776,"is_pvip":false,"replies":[{"id":5248,"content":"面向流程的范围要比if then要大的多，参考TCP&#47;IP的案例","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276143,"ip_address":"","comment_id":15447,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎的核心是if（evalue） then{execute}这样的控制流抽象，所以应该属于面向流程的架构\r\n其中evalue和execute两部分也可以继续进行架构拆分","like_count":0},{"had_liked":false,"id":15426,"user_name":"凡凡","can_delete":false,"product_type":"c1","uid":1056142,"ip_address":"","ucode":"134C1E1E6B22BF","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/8e/0a546871.jpg","comment_is_top":false,"comment_ctime":1531186161,"is_pvip":false,"replies":[{"id":5256,"content":"再研究一下TCP&#47;IP的案例","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531277107,"ip_address":"","comment_id":15426,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"1.应该属于按流程拆分的一类吧，规则引擎大多是嵌入在整个流程里边的一个环节，比如流程系统中判断下一步发送给哪个处理人的判断，比如风控系统种各种风控规则的管理，执行。2.功能划分和服务划分，感觉不太好分清楚。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420383,"discussion_content":"再研究一下TCP/IP的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531277107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15411,"user_name":"但莫","can_delete":false,"product_type":"c1","uid":1108901,"ip_address":"","ucode":"6B40F4E0EDB1C7","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/a5/5d04b7cd.jpg","comment_is_top":false,"comment_ctime":1531181710,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎可能是面向流程和面向功能两种拆分方式相结合。\n流程规划每一层的职责，并规划好处理流程，在每一层可按功能模块进行拆分和管理，更容易添加新的规则。\n\n如果系统做的更大一些可能还会引入soa。把没一层或每一层中的模块拆分成单独的服务。","like_count":2},{"had_liked":false,"id":313010,"user_name":"Drake敏","can_delete":false,"product_type":"c1","uid":2734734,"ip_address":"","ucode":"38366767EFDC90","user_header":"https://static001.geekbang.org/account/avatar/00/29/ba/8e/4645afae.jpg","comment_is_top":false,"comment_ctime":1632199800,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"面向对象","like_count":0},{"had_liked":false,"id":288832,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1618721020,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"可扩展的基本思想\n：拆\n面向流程拆分：将整个业务流程拆分为几个阶段，每个阶段作为一部分。面向服务拆分：将系统提供的服务拆分，每个服务作为一部分。面向功能拆分：将系统提供的功能拆分，每个功能作为一部分。","like_count":0},{"had_liked":false,"id":236471,"user_name":"极客时间工程师123","can_delete":false,"product_type":"c1","uid":1027953,"ip_address":"","ucode":"4453C22C440E50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/71/f5d9b00a.jpg","comment_is_top":false,"comment_ctime":1595422931,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"学习了","like_count":0},{"had_liked":false,"id":216948,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1589375070,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"拆到正交分解再组合。","like_count":0},{"had_liked":false,"id":186207,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1583799977,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"要理解面向流程&#47;服务&#47;功能，需要理解什么叫流程&#47;服务&#47;功能。老师在文章中提到的TCP&#47;IP例子很典型，这样基本上可以对号入座，比如流程对应于应用层，传输层，网络层，物理层，数据链路层；服务对应于http服务，功能对应于http的get&#47;post功能。\n按照类似同构性即可理解其它系统的流程&#47;服务&#47;功能，一般来说流程是需要分层的，类似于工作流。而服务类似于一个包，而功能则是其中更小的一个点了。\n针对三种不同的拆分，可以得到三种不同的结果：\n1）面向流程，分层架构\n2）面向服务，soa，微服务\n3）面向功能，微内核架构\n\n规则引擎没有用过，应该是业务层面向功能的。","like_count":0},{"had_liked":false,"id":136012,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1569329144,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"服务是个逻辑概念，功能实现了服务。每个服务（功能）的执行都有一定的流程。如:\n\npublic interface LoginService{ \n    void login();\n}\n\npublic class PhoneLoginService implements LoginService{\n    @Override\n    public void login(){\n        &#47;&#47;1. 流程1\n        doA();\n        &#47;&#47;2. 流程2\n        doB();\n        &#47;&#47;......\n\n    } \n}\n\n","like_count":0},{"had_liked":false,"id":87573,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1555636625,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"可扩展性三种架构\n分层架构，固定的内核，移动的数据如，展示层，业务层，数据层，存储层\n面向服务架构，微服务，osa\n面向功能","like_count":0},{"had_liked":false,"id":15447,"user_name":"炫吉","can_delete":false,"product_type":"c1","uid":1106795,"ip_address":"","ucode":"E35C964F3C6DFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/6b/84aa2e63.jpg","comment_is_top":false,"comment_ctime":1531192776,"is_pvip":false,"replies":[{"id":5248,"content":"面向流程的范围要比if then要大的多，参考TCP&#47;IP的案例","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531276143,"ip_address":"","comment_id":15447,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎的核心是if（evalue） then{execute}这样的控制流抽象，所以应该属于面向流程的架构\r\n其中evalue和execute两部分也可以继续进行架构拆分","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420390,"discussion_content":"面向流程的范围要比if then要大的多，参考TCP/IP的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531276143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15426,"user_name":"凡凡","can_delete":false,"product_type":"c1","uid":1056142,"ip_address":"","ucode":"134C1E1E6B22BF","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/8e/0a546871.jpg","comment_is_top":false,"comment_ctime":1531186161,"is_pvip":false,"replies":[{"id":5256,"content":"再研究一下TCP&#47;IP的案例","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1531277107,"ip_address":"","comment_id":15426,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"1.应该属于按流程拆分的一类吧，规则引擎大多是嵌入在整个流程里边的一个环节，比如流程系统中判断下一步发送给哪个处理人的判断，比如风控系统种各种风控规则的管理，执行。2.功能划分和服务划分，感觉不太好分清楚。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420390,"discussion_content":"面向流程的范围要比if then要大的多，参考TCP/IP的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531276143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15411,"user_name":"但莫","can_delete":false,"product_type":"c1","uid":1108901,"ip_address":"","ucode":"6B40F4E0EDB1C7","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/a5/5d04b7cd.jpg","comment_is_top":false,"comment_ctime":1531181710,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎可能是面向流程和面向功能两种拆分方式相结合。\n流程规划每一层的职责，并规划好处理流程，在每一层可按功能模块进行拆分和管理，更容易添加新的规则。\n\n如果系统做的更大一些可能还会引入soa。把没一层或每一层中的模块拆分成单独的服务。","like_count":2},{"had_liked":false,"id":313010,"user_name":"Drake敏","can_delete":false,"product_type":"c1","uid":2734734,"ip_address":"","ucode":"38366767EFDC90","user_header":"https://static001.geekbang.org/account/avatar/00/29/ba/8e/4645afae.jpg","comment_is_top":false,"comment_ctime":1632199800,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"面向对象","like_count":0},{"had_liked":false,"id":288832,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1618721020,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"可扩展的基本思想\n：拆\n面向流程拆分：将整个业务流程拆分为几个阶段，每个阶段作为一部分。面向服务拆分：将系统提供的服务拆分，每个服务作为一部分。面向功能拆分：将系统提供的功能拆分，每个功能作为一部分。","like_count":0},{"had_liked":false,"id":236471,"user_name":"极客时间工程师123","can_delete":false,"product_type":"c1","uid":1027953,"ip_address":"","ucode":"4453C22C440E50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/71/f5d9b00a.jpg","comment_is_top":false,"comment_ctime":1595422931,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"学习了","like_count":0},{"had_liked":false,"id":216948,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1589375070,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"拆到正交分解再组合。","like_count":0},{"had_liked":false,"id":186207,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1583799977,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"要理解面向流程&#47;服务&#47;功能，需要理解什么叫流程&#47;服务&#47;功能。老师在文章中提到的TCP&#47;IP例子很典型，这样基本上可以对号入座，比如流程对应于应用层，传输层，网络层，物理层，数据链路层；服务对应于http服务，功能对应于http的get&#47;post功能。\n按照类似同构性即可理解其它系统的流程&#47;服务&#47;功能，一般来说流程是需要分层的，类似于工作流。而服务类似于一个包，而功能则是其中更小的一个点了。\n针对三种不同的拆分，可以得到三种不同的结果：\n1）面向流程，分层架构\n2）面向服务，soa，微服务\n3）面向功能，微内核架构\n\n规则引擎没有用过，应该是业务层面向功能的。","like_count":0},{"had_liked":false,"id":136012,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1569329144,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"服务是个逻辑概念，功能实现了服务。每个服务（功能）的执行都有一定的流程。如:\n\npublic interface LoginService{ \n    void login();\n}\n\npublic class PhoneLoginService implements LoginService{\n    @Override\n    public void login(){\n        &#47;&#47;1. 流程1\n        doA();\n        &#47;&#47;2. 流程2\n        doB();\n        &#47;&#47;......\n\n    } \n}\n\n","like_count":0},{"had_liked":false,"id":87573,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1555636625,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"可扩展性三种架构\n分层架构，固定的内核，移动的数据如，展示层，业务层，数据层，存储层\n面向服务架构，微服务，osa\n面向功能","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420383,"discussion_content":"再研究一下TCP/IP的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531277107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47117,"user_name":"乘风","can_delete":false,"product_type":"c1","uid":1115724,"ip_address":"","ucode":"0420C5535DACB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","comment_is_top":false,"comment_ctime":1544059942,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"\t\t规则引擎：规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的\n\t语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。\n\t\t规则引擎将输入的数据根据业务规则做决策，根据不同功能拆分成不同的业务规则，是面向功能拆分，微内核，如注册功能可以根据不同的注册方式\n\t拆分成的不同的注册功能，手机号、第三方快登等。","like_count":0},{"had_liked":false,"id":21528,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1535156182,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎是微内核架构，面向具体功能，因为引擎是由中端用户来定的，架构师设计时考虑由功能指导。","like_count":0},{"had_liked":false,"id":16103,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1531787866,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展架构的基本思想就是——拆！！","like_count":0},{"had_liked":false,"id":15483,"user_name":"summer","can_delete":false,"product_type":"c1","uid":1103386,"ip_address":"","ucode":"A57684B7A90129","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/1a/532f8a66.jpg","comment_is_top":false,"comment_ctime":1531216127,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎是面向功能拆分","like_count":0},{"had_liked":false,"id":15428,"user_name":"炫吉","can_delete":false,"product_type":"c1","uid":1106795,"ip_address":"","ucode":"E35C964F3C6DFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/6b/84aa2e63.jpg","comment_is_top":false,"comment_ctime":1531186397,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎的核心是if（evalue） then{execute}这样的控制流抽象，所以应该属于面向流程的架构\r\n其中evalue和execute两部分也可以继续进行架构拆分，个人理解所谓的架构拆分场景是可以互相嵌套组合的","like_count":0},{"had_liked":false,"id":15415,"user_name":"Geek_1177eb","can_delete":false,"product_type":"c1","uid":1124937,"ip_address":"","ucode":"AC10915E3A7203","user_header":"","comment_is_top":false,"comment_ctime":1531182675,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎，我理解应该是按功能拆分","like_count":0},{"had_liked":false,"id":47117,"user_name":"乘风","can_delete":false,"product_type":"c1","uid":1115724,"ip_address":"","ucode":"0420C5535DACB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","comment_is_top":false,"comment_ctime":1544059942,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"\t\t规则引擎：规则引擎由推理引擎发展而来，是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来，并使用预定义的\n\t语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。\n\t\t规则引擎将输入的数据根据业务规则做决策，根据不同功能拆分成不同的业务规则，是面向功能拆分，微内核，如注册功能可以根据不同的注册方式\n\t拆分成的不同的注册功能，手机号、第三方快登等。","like_count":0},{"had_liked":false,"id":21528,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1535156182,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎是微内核架构，面向具体功能，因为引擎是由中端用户来定的，架构师设计时考虑由功能指导。","like_count":0},{"had_liked":false,"id":16103,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1531787866,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展架构的基本思想就是——拆！！","like_count":0},{"had_liked":false,"id":15483,"user_name":"summer","can_delete":false,"product_type":"c1","uid":1103386,"ip_address":"","ucode":"A57684B7A90129","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/1a/532f8a66.jpg","comment_is_top":false,"comment_ctime":1531216127,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎是面向功能拆分","like_count":0},{"had_liked":false,"id":15428,"user_name":"炫吉","can_delete":false,"product_type":"c1","uid":1106795,"ip_address":"","ucode":"E35C964F3C6DFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/6b/84aa2e63.jpg","comment_is_top":false,"comment_ctime":1531186397,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎的核心是if（evalue） then{execute}这样的控制流抽象，所以应该属于面向流程的架构\r\n其中evalue和execute两部分也可以继续进行架构拆分，个人理解所谓的架构拆分场景是可以互相嵌套组合的","like_count":0},{"had_liked":false,"id":15415,"user_name":"Geek_1177eb","can_delete":false,"product_type":"c1","uid":1124937,"ip_address":"","ucode":"AC10915E3A7203","user_header":"","comment_is_top":false,"comment_ctime":1531182675,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"规则引擎，我理解应该是按功能拆分","like_count":0}]}