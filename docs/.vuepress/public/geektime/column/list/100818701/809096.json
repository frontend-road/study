{"id":809096,"title":"04｜项目初始化四大件：命令行参数、配置、日志、测试用例","content":"<blockquote>\n<p><span class=\"reference\">本课程为精品小课，不标配音频</span></p>\n</blockquote><p>你好，我是文强。</p><p>上节课我们完成了项目的初始化，这节课我们来完成<strong>如何处理命令行参数</strong>、<strong>如何管理配置</strong>、<strong>如何记录日志</strong>、<strong>如何运行测试用例</strong>四个任务。有了这四个基础部分，项目的基础模块就基本成型了。</p><h2>处理命令行参数</h2><p>Rust 处理命令行参数推荐使用 <a href=\"https://crates.io/crates/clap\">clap</a> 这个库。</p><p>这里，我想同时跟你聊一下如何更好地使用前面提过的 <a href=\"https://crates.io/\">https://crates.io/</a> 这个网站，它是 Rust 的公共库的代码仓库。</p><p>在我看来，<strong>能不能把 crates.io 用好，决定了你能不能学好Rust 这个语言。</strong>接下来我们就以使用 clap 库来处理命令行参数这个 case 来讲解一下如何用好 crates.io。</p><p>比如我们需要使用库 clap，下图是 clap 库的首页。一般在首页都会有关于这个库详细的使用说明，比如使用方法、使用 demo。所以你得重视这个页面，在这个页面可以得到很多信息。另外需要关注右下角两个链接，一个是库的 Rust 文档地址，格式是统一的；另一个一般是源码所在地址，一般是 GitHub 仓库的地址。</p><p>这里有个技巧是：<strong>如果在文档中找不到你想要的信息，可以尝试去 GitHub 仓库找，GitHub 仓库一般有更详细的 example 信息。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/4a/01/4a71ea212312603eb08e2e6yy0628e01.png?wh=1920x1854\" alt=\"图片\"></p><p>如下图所示，库的文档首页是统一格式的。它会展示库中 Modules、Macros、Structs、Enums、Traits、Type Aliases 六部分信息，分别会列举库中的 mod、宏、结构体、枚举、Trait、Type Alias 等相关信息。你可以根据需要查看对应部分的内容。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/46/05/46806a4c0b1073a68821c85c24227f05.png?wh=1920x932\" alt=\"图片\"></p><p>比如我想知道 clap 要怎么用，那就直接看首页的 demo 即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/40/b512a7073cbba9fd420ccb2a1a9d9740.png?wh=1828x1504\" alt=\"图片\"></p><p>接下来来看一下我们的项目是怎么处理命令行参数的。在当前阶段，我们需求是：<strong>能从命令行接收配置文件路径</strong>，则代码应该在 src/cmd/src/metadata-service/server.rs 中，代码如下：</p><pre><code class=\"language-plain\">use clap::command;\nuse clap::Parser;\n\n\n// 定义默认的配置路径，即当命令行没传配置路径时，默认的配置文件路径\npub const DEFAULT_PLACEMENT_CENTER_CONFIG: &amp;str = \"config/placement-center.toml\";\n\n\n// 定义接收哪些参数\n#[derive(Parser, Debug)]\n#[command(author=\"robustmq-geek\", version=\"0.0.1\", about=\" RobustMQ: Next generation cloud-native converged high-performance message queue.\", long_about = None)]\n#[command(next_line_help = true)]\nstruct ArgsParams {\n    #[arg(short, long, default_value_t=String::from(DEFAULT_PLACEMENT_CENTER_CONFIG))]\n    conf: String,\n}\n\n\nfn main() {\n    // 解析命令行参数\n    let args = ArgsParams::parse();\n    println!(\"conf path: {:?}\", args.conf);\n}\n</code></pre><p>这里，处理命令行参数主要分为两步：</p><ol>\n<li>\n<p>定义一个结构体 ArgsParams，结构体包含自定义的 conf 属性，即需要接收的配置文件路径。</p>\n</li>\n<li>\n<p>通过 ArgsParams::parse() 解析参数。</p>\n</li>\n</ol><p>上面的代码可以通过下面的命令执行得到结果：</p><pre><code class=\"language-plain\">cargo run --package cmd --bin placement-center -- --conf=config/placement-center.toml\n</code></pre><p>效果如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/19/1c051775fc8bcfa183813b81921b6b19.png?wh=1920x174\" alt=\"图片\"></p><p>如果要了解更多关于 clap 这个库的语法，可以看它在 crates 的官方文档。</p><h2>管理静态配置</h2><p>在管理项目配置文件时，第一件事就是要思考：<strong>要用哪种格式的配置文件</strong>。有 Java 背景的同学会习惯用 yaml 或 properties 的配置文件，另外可能可能会用到 json、toml 等配置文件。</p><p>那应该用哪种呢？我在一开始写 Rust 的时候也遇到了这个问题。后来我研究后的结果是：<strong>使用 toml 文件</strong>。</p><p>原因很简单，一是因为 toml 格式简单好用，能满足各种配置场景；二是因为大部分开源的 Rust 项目都是使用 toml 格式的配置文件。</p><p>那么如何读取和处理 toml 格式的配置文件呢？在 Rust 中，建议通过 <a href=\"https://crates.io/crates/toml\">toml</a> 这个库，这个库的功能比较简单，你可以先不看下面的代码，去看一下 crates.io 上的内容，看是否知道怎么写。</p><p>接下来我们来开发我们的配置文件模块，总共分为三步。</p><ol>\n<li>定义我们元数据服务的配置文件 placement-center.toml，先定义节点 ID 和节点监听的 GRPC 端口两个属性</li>\n</ol><pre><code class=\"language-plain\">node_id = 1 # 节点 ID\ngrpc_port = 1228 # 节点监听的 GRPC 端口\n</code></pre><ol start=\"2\">\n<li>定义解析配置文件的结构体</li>\n</ol><pre><code class=\"language-plain\">use serde::Deserialize;\n\n\n#[derive(Debug, Deserialize, Clone, Default)]\npub struct PlacementCenterConfig {\n    #[serde(default = \"default_node_id\")]\n    pub node_id: u32,\n    #[serde(default = \"default_grpc_port\")]\n    pub grpc_port: usize,\n}\n\n\npub fn default_node_id() -&gt; u32 {\n    1\n}\n\n\npub fn default_grpc_port() -&gt; usize {\n    9982\n}\n</code></pre><ol start=\"3\">\n<li>解析配置文件</li>\n</ol><pre><code class=\"language-plain\">static PLACEMENT_CENTER_CONF: OnceLock&lt;PlacementCenterConfig&gt; = OnceLock::new();\n\n\npub fn init_placement_center_conf_by_path(config_path: &amp;String) -&gt; &amp;'static PlacementCenterConfig {\n    // n.b. static items do not call [`Drop`] on program termination, so if\n    // [`DeepThought`] impls Drop, that will not be used for this instance.\n    PLACEMENT_CENTER_CONF.get_or_init(|| {\n        let content = read_file(config_path);\n        let pc_config: PlacementCenterConfig = toml::from_str(&amp;content).unwrap();\n        return pc_config;\n    })\n}\n\n\npub fn placement_center_conf() -&gt; &amp;'static PlacementCenterConfig {\n    match PLACEMENT_CENTER_CONF.get() {\n        Some(config) =&gt; {\n            return config;\n        }\n        None =&gt; {\n            panic!(\n                \"Placement center configuration is not initialized, check the configuration file.\"\n            );\n        }\n    }\n}\n</code></pre><p>上面的代码不复杂，主要有两步：</p><ol>\n<li>\n<p><code>#[serde(default = \"default_node_id\")]</code> 的使用，这个语法是定义配置 node_id的默认值，即如果没有配置 node_id 的时候，node_id 的默认值是多少。其中default_node_id是一个函数名，对应上面的 fn default_node_id()， 所以默认值是这个函数的返回值。</p>\n</li>\n<li>\n<p>第二个是下面这两行代码，表示读取指定配置文件的内容，并让 <code>toml::from_str</code> 解析配置文件的内容。</p>\n</li>\n</ol><pre><code class=\"language-plain\">let content = read_file(config_path);\nlet pc_config: PlacementCenterConfig = toml::from_str(&amp;content).unwrap();\n</code></pre><p>理论上 1 和 2 就完成了配置的管理。这里如果每次获取配置都执行 2 来获取配置内容，那每次都要解析文件，就太重了，就得想办法把配置文件缓存到内存里面，比如某个静态变量。</p><p>此时，我们是通过OnceLock这个语法来实现的。OnceLock 都是 Rust 标准库中用于实现懒加载的数据结构，<strong>它能够确保一个变量只被初始化一次</strong><strong>，</strong><strong>也就是我们在其他语言中用到的单例模式</strong>。</p><p>关键代码是：</p><ol>\n<li>\n<p><code>PLACEMENT_CENTER_CONF.get_or_init</code>：获取或者初始化值。这个函数特殊的地方在于，不管调用多少次，只会初始化一次。</p>\n</li>\n<li>\n<p><code>PLACEMENT_CENTER_CONF.get</code>：获取已经初始化后的值。</p>\n</li>\n</ol><p>所以我们在 main 函数初始化配置后，就可以通过placement_center_conf随时获取到配置，代码如下：</p><pre><code class=\"language-plain\">fn main() {\n    let args = ArgsParams::parse();\n    init_placement_center_conf_by_path(&amp;args.conf);\n}\n</code></pre><p>执行后效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/6f/c5f6eb31146623c7406981f954d12d6f.png?wh=1808x196\" alt=\"图片\"></p><p>接下来我们来看看如何初始化我们的日志模块。到这里你可以在脑子里面想一下这个日志模块应该需要满足什么功能需求？</p><h2>如何记录日志</h2><p>通用的日志模块核心是四个需求：</p><ol>\n<li>\n<p>支持多个不同的日志级别。</p>\n</li>\n<li>\n<p>支持多种日志滚动方式，比如按时间滚动、按大小滚动。</p>\n</li>\n<li>\n<p>支持自定义日志格式。</p>\n</li>\n<li>\n<p>支持根据不同的类型将日志打印到不同的文件。</p>\n</li>\n</ol><p>在 Rust 中，日志文件建议直接用 <a href=\"https://crates.io/crates/log4rs\">log4rs</a> 库即可，它满足我们上面的这几点需求。初始化日志模块主要分为三步：</p><ol>\n<li>\n<p>编写 log4rs.yaml 文件</p>\n</li>\n<li>\n<p>初始化日志模块</p>\n</li>\n<li>\n<p>记录日志</p>\n</li>\n</ol><p>接下来我们来看一下我们的 log4rs.yaml 文件，<strong>下面重点关注 loggers 模块，这块官方文档写得不太清晰</strong>。</p><pre><code class=\"language-plain\">appenders:\n  # 定义一个名为stdout的appender，功能是将日志输出到控制台\n&nbsp; stdout:\n&nbsp; &nbsp; kind: console\n  \n  # 定义一个名为server的appender，功能是将日志输出到名为server.log的滚动文件\n  # 每个文件大小 1gb，文件序号从 0 开始到 50\n  # 日志的格式为\"{d(%Y-%m-%d %H:%M:%S)} {h({l})} {m}{n}\"\n  # 日志格式参考这个文档：https://docs.rs/log4rs/1.3.0/log4rs/encode/pattern/index.html\n&nbsp; server:\n&nbsp; &nbsp; kind: rolling_file\n&nbsp; &nbsp; path: \"{$path}/server.log\"\n&nbsp; &nbsp; encoder:\n&nbsp; &nbsp; &nbsp; &nbsp; pattern: \"{d(%Y-%m-%d %H:%M:%S)} {h({l})} {m}{n}\"\n&nbsp; &nbsp; policy:\n&nbsp; &nbsp; &nbsp; &nbsp; trigger:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; kind: size\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; limit: 1 gb\n&nbsp; &nbsp; &nbsp; &nbsp; roller:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; kind: fixed_window\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"{$path}/server-{}.log\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; base: 0\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count: 50\n  # 参考 server\n&nbsp; requests:\n&nbsp; &nbsp; kind: rolling_file\n&nbsp; &nbsp; path: \"{$path}/requests-log.log\"\n&nbsp; &nbsp; encoder:\n&nbsp; &nbsp; &nbsp; &nbsp; pattern: \"{d(%Y-%m-%d %H:%M:%S)} {h({l})} {m}{n}\"\n&nbsp; &nbsp; policy:\n&nbsp; &nbsp; &nbsp; &nbsp; trigger:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; kind: size\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; limit: 1 gb\n&nbsp; &nbsp; &nbsp; &nbsp; roller:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; kind: fixed_window\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"{$path}/requests-log-{}.log\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; base: 0\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count: 50\n\n\n# 默认清况下，所有的日志都会输出到 stdout和 server 两个 appender\nroot:\n&nbsp; level: info\n&nbsp; appenders:\n&nbsp; &nbsp; - stdout\n&nbsp; &nbsp; - server\n\n\n# 这个需要重点注意，可以将不同 lib 或 mod 中的日志输出到不同的文件\nloggers:\n&nbsp;&nbsp;# 将 placement_center::server模块的日志会写入到 stdout 和 server 两个 appender\n&nbsp; placement_center::server:\n&nbsp; &nbsp; level: info\n&nbsp; &nbsp; appenders:\n&nbsp; &nbsp; &nbsp; - stdout\n&nbsp; &nbsp; &nbsp; - server\n&nbsp; &nbsp; additive: false\n  # 将 placement_center::requests模块的日志会写入到 stdout 和 requests 两个 appender\n&nbsp; placement_center::requests:\n&nbsp; &nbsp; level: info\n&nbsp; &nbsp; appenders:\n&nbsp; &nbsp; &nbsp; - stdout\n&nbsp; &nbsp; &nbsp; - requests\n&nbsp; &nbsp; additive: false\n</code></pre><p>log4rs.yaml 的语法都写在注释里，就不展开了。编写好文件后，就需要初始化配置，来看下面代码：</p><pre><code class=\"language-plain\">pub fn init_placement_center_log() {\n    // 1. 获取配置信息\n    let conf = placement_center_conf();\n    \n    // 2. 检查日志配置 .yaml 文件是否存在\n    if !file_exists(&amp;conf.log.log_config) {\n        panic!(\n            \"Logging configuration file {} does not exist\",\n            conf.log.log_config\n        );\n    }\n    \n    // 3.尝试初始化日志存放目录\n    match create_fold(&amp;conf.log.log_path) {\n        Ok(()) =&gt; {}\n        Err(e) =&gt; {\n            panic!(\"Failed to initialize log directory {}\", conf.log.log_path);\n        }\n    }\n    \n    // 4. 读取日志配置.yaml 文件的内容\n    let content = match read_file(&amp;conf.log.log_config) {\n        Ok(data) =&gt; data,\n        Err(e) =&gt; {\n            panic!(\"{}\", e.to_string());\n        }\n    };\n    \n    // 5. 替换日志文件的存放路径\n    let config_content = content.replace(\"{$path}\", &amp;conf.log.log_path);\n    println!(\"{}\",\"log config:\");\n    println!(\"{}\", config_content);\n\n\n    // 6. 解析 yaml 格式的配置文件\n    let config = match serde_yaml::from_str(&amp;config_content) {\n        Ok(data) =&gt; data,\n        Err(e) =&gt; {\n            panic!(\n                \"Failed to parse the contents of the config file {} with error message :{}\",\n                conf.log.log_config,\n                e.to_string()\n            );\n        }\n    };\n    \n    // 7. 初始化日志配置\n    match log4rs::init_raw_config(config) {\n        Ok(_) =&gt; {}\n        Err(e) =&gt; {\n            panic!(\"{}\", e.to_string());\n        }\n    }\n}\n\n\n</code></pre><p>上面代码整体分为七步，如果对 <a href=\"https://crates.io/crates/log4rs\">log4rs</a> 学习比较充分的同学，可能会有一个想法，初始化日志配置需要这么复杂吗？用下面的代码不就好了吗？</p><pre><code class=\"language-plain\">log4rs::init_file(\"log4rs.yml\", Default::default()).unwrap();\n</code></pre><p>是的，理论上这样是可以的。</p><p>但是因为用户修改日志存放目录，是一个常见的需求，并且除了修改日志存放目录外，大部分情况下，用户不需要去修改日志的配置文件内容。</p><p>所以希望进一步优化使用体验，即：<strong>希望用户大部分清况下不用去理解 log4rs 的语法，且修改日志存放目录时，不需要修改</strong> <strong>log4rs.yaml 中<strong><strong>的</strong></strong>日志路径</strong>。</p><p>所以为了达到上面的效果，我们在配置文件中加了下面这两行配置：</p><pre><code class=\"language-plain\">[log]\nlog_config = \"./config/log4rs.yaml\"\nlog_path = \"./logs\"\n</code></pre><p>然后再手动读取 log4rs.yaml 的内容，并且在第 5 步<strong>替换了 log4rs.yaml 中的日志目录路径</strong>。最后通过log4rs::init_raw_config(config) 完成了日志模块的初始化。</p><p>最后在 main 函数中调用init_placement_center_log初始化日志。</p><pre><code class=\"language-plain\">fn main() {\n    let args = ArgsParams::parse();\n    // 初始化配置文件\n    init_placement_center_conf_by_path(&amp;args.conf);\n    \n    // 初始化日志\n    init_placement_center_log();\n    \n    let conf = placement_center_conf();\n    // 记录日志\n    info!(\"{:?}\", conf);\n    start_server();\n}\n</code></pre><p>当完成初始化后，就可以通过 info!、debug!、warn!、error! 等方法记录日志了，并将 placement_center::requests 模块的日志写入到 request.log 和 stdout，再将placement_center::server 模块的日志写入到 server.log 和 stdout，其他日志默认全部写入 server.log 和 stdout。</p><p>到这里我们就完成了日志模块的初始化。接下来我们来看一下如何写测试用例。</p><h2>运行测试用例</h2><p>接下来我们以读取静态配置的流程为 case，写一个测试用例验证我们读取静态配置的代码是没问题的。</p><p>写测试用例的时候，<strong>一般<strong><strong>会</strong></strong>把测试用例和代码写在一起</strong>。比如我们要测试common/base/src/config/placement_center.rs 中的代码，则可以把下面的测试用例放在这个文件中。</p><p>测试文件用例如下：</p><pre><code class=\"language-plain\">mod tests {\n    use crate::config::placement_center::{\n        init_placement_center_conf_by_path, placement_center_conf,\n    };\n\n\n    #[test]\n    fn config_init_test() {\n        let path = format!(\n            \"{}/../../../config/placement-center.toml\",\n            env!(\"CARGO_MANIFEST_DIR\")\n        );\n        init_placement_center_conf_by_path(&amp;path);\n        let config = placement_center_conf();\n        assert_eq!(config.node_id, 1);\n        assert_eq!(config.grpc_port, 1228);\n    }\n}\n</code></pre><p>这里我写了一个 config_init_test 方法来验证 init 日志是否正常。主要依赖 assert_eq 来判断读取的数据是否符合预期。</p><p>基本所有测试用例都是这个逻辑：<strong>初始化某个数据，然后判断数据是否符合预期</strong>。我们可以通过 <code>cargo test --package common-base</code> 来测试这个模块中的测试用例。</p><p>最后分享一个运行测试用例的技巧。</p><p>我们通常会运行 Server 来提供服务，一般都需要测试我们提供的服务是否正常，我们通常会写测试用例验证服务接口的进出参是否正常。此时，如果运行 Cargo 就会遇到一个问题，如果 Server 没启动，那么 Cargo Test 执行就会失败。</p><p>此时，可以通过一个 shell 脚本封装 Cargo Test 来测试，脚本内容伪代码如下：</p><pre><code class=\"language-plain\">start server\ncargo test --package common-base\nstop server\n</code></pre><p>这里给一个我们封装好的 shell 示例，给你参考，比较简单，就不展开讲了。</p><pre><code class=\"language-plain\">#!/bin/sh\nstart_placement_center(){\n    nohup cargo run --package cmd --bin $placement_center_process_name -- --conf=tests/config/$placement_center_process_name.toml &gt;/dev/null 2&gt;&amp;1 &amp;\n    sleep 3\n    while ! ps aux | grep -v grep | grep \"$placement_center_process_name\" &gt; /dev/null; do\n        echo \"Process $placement_center_process_name has not started yet, wait 1s....\"\n        sleep 1  \n    done\n    echo \"Process $placement_center_process_name starts successfully and starts running the test case\"\n}\n\n\nstop_placement_center(){\n    pc_no=`ps aux | grep -v grep | grep \"$placement_center_process_name\" | awk '{print $2}'`\n    echo \"placement center num: $pc_no\"\n    kill $pc_no\n    sleep 3\n\n\n    while ps aux | grep -v grep | grep \"$placement_center_process_name\" &gt; /dev/null; do\n        echo \"”Process $placement_center_process_name stopped successfully\"\n        sleep 1  \n    done\n}\n\n\n# 1. 启动placement center\nstart_placement_center\n\n\n# 2. Run Cargo Test\ncargo test\n\n\n# 3. stop server\nif [ $? -ne 0 ]; then\n    echo \"Test case failed to run\"\n    stop_placement_center\n    exit 1\nelse\n    echo \"Test case runs successfully\"\n    stop_placement_center\nfi\n</code></pre><h2>总结</h2><blockquote>\n<p>tips：每节课的代码都能在项目 <a href=\"https://github.com/robustmq/robustmq-geek\">https://github.com/robustmq/robustmq-geek</a> 中找到源码，有兴趣的同学可以下载源码来看。</p>\n</blockquote><p>这节课我们完成了命令行参数、静态配置、日志模块、测试用例的开发。</p><ul>\n<li>\n<p>命令行参数推荐使用 clap 库。</p>\n</li>\n<li>\n<p>配置文件建议用 toml 格式文件，通过 toml 库配合 OnceLock 来实现配置文件的单例加载。</p>\n</li>\n<li>\n<p>日志模块通过 log4rs 来初始化即可。</p>\n</li>\n<li>\n<p>测试用例建议和代码写在同一个文件，如果需要依赖外部系统完成测试用例，建议在 Cargo Test 上配合 shell 来完成对应的工作。</p>\n</li>\n</ul><h2>思考题</h2><p>这里是本节课推荐的相关 issue 的任务列表，请点击查看<a href=\"http://www.robustmq.com/docs/robustmq-tutorial-cn/%e8%b4%a1%e7%8c%ae%e6%8c%87%e5%8d%97/good-first-issue/\">《Good First Issue》</a>，任务列表会不间断地更新。欢迎给我的项目 <a href=\"https://github.com/robustmq/robustmq\">https://github.com/robustmq/robustmq</a> 点个 Star 啊！</p>","neighbors":{"left":{"article_title":"03｜正式开工：如何组织、编译、打包复杂的Rust项目？","id":808932},"right":{"article_title":"05｜逻辑功能开发：网络层Server端如何选型？","id":809901}},"comments":[{"had_liked":false,"id":394825,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"北京","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","comment_is_top":false,"comment_ctime":1728514573,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100818701,"comment_content":"测试最近看到一个工具nextest，也可以试试。","like_count":0},{"had_liked":false,"id":394479,"user_name":"吃饱喝足开始干活","can_delete":false,"product_type":"c1","uid":3647899,"ip_address":"广西","ucode":"29955313B312A1","user_header":"https://static001.geekbang.org/account/avatar/00/37/a9/9b/b114d348.jpg","comment_is_top":false,"comment_ctime":1726910027,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100818701,"comment_content":"这都是之前工作中会的，快速读完，下一篇，哈哈","like_count":0}]}