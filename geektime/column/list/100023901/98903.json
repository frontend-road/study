{"id":98903,"title":"42 | Actor模型：面向对象原生的并发模型","content":"<p>上学的时候，有门计算机专业课叫做面向对象编程，学这门课的时候有个问题困扰了我很久，按照面向对象编程的理论，对象之间通信需要依靠<strong>消息</strong>，而实际上，像C++、Java这些面向对象的语言，对象之间通信，依靠的是<strong>对象方法</strong>。对象方法和过程语言里的函数本质上没有区别，有入参、有出参，思维方式很相似，使用起来都很简单。那面向对象理论里的消息是否就等价于面向对象语言里的对象方法呢？很长一段时间里，我都以为对象方法是面向对象理论中消息的一种实现，直到接触到Actor模型，才明白消息压根不是这个实现法。</p><h2>Hello Actor模型</h2><p>Actor模型本质上是一种计算模型，基本的计算单元称为Actor，换言之，<strong>在Actor模型中，所有的计算都是在Actor中执行的</strong>。在面向对象编程里面，一切都是对象；在Actor模型里，一切都是Actor，并且Actor之间是完全隔离的，不会共享任何变量。</p><p>当看到“不共享任何变量”的时候，相信你一定会眼前一亮，并发问题的根源就在于共享变量，而Actor模型中Actor之间不共享变量，那用Actor模型解决并发问题，一定是相当顺手。的确是这样，所以很多人就把Actor模型定义为一种<strong>并发计算模型</strong>。其实Actor模型早在1973年就被提出来了，只是直到最近几年才被广泛关注，一个主要原因就在于它是解决并发问题的利器，而最近几年随着多核处理器的发展，并发问题被推到了风口浪尖上。</p><!-- [[[read_end]]] --><p>但是Java语言本身并不支持Actor模型，所以如果你想在Java语言里使用Actor模型，就需要借助第三方类库，目前能完备地支持Actor模型而且比较成熟的类库就是<strong>Akka</strong>了。在详细介绍Actor模型之前，我们就先基于Akka写一个Hello World程序，让你对Actor模型先有个感官的印象。</p><p>在下面的示例代码中，我们首先创建了一个ActorSystem（Actor不能脱离ActorSystem存在）；之后创建了一个HelloActor，Akka中创建Actor并不是new一个对象出来，而是通过调用system.actorOf()方法创建的，该方法返回的是ActorRef，而不是HelloActor；最后通过调用ActorRef的tell()方法给HelloActor发送了一条消息 “Actor” 。</p><pre><code>//该Actor当收到消息message后，\n//会打印Hello message\nstatic class HelloActor \n    extends UntypedActor {\n  @Override\n  public void onReceive(Object message) {\n    System.out.println(&quot;Hello &quot; + message);\n  }\n}\n\npublic static void main(String[] args) {\n  //创建Actor系统\n  ActorSystem system = ActorSystem.create(&quot;HelloSystem&quot;);\n  //创建HelloActor\n  ActorRef helloActor = \n    system.actorOf(Props.create(HelloActor.class));\n  //发送消息给HelloActor\n  helloActor.tell(&quot;Actor&quot;, ActorRef.noSender());\n}\n</code></pre><p>通过这个例子，你会发现Actor模型和面向对象编程契合度非常高，完全可以用Actor类比面向对象编程里面的对象，而且Actor之间的通信方式完美地遵守了消息机制，而不是通过对象方法来实现对象之间的通信。那Actor中的消息机制和面向对象语言里的对象方法有什么区别呢？</p><h2>消息和对象方法的区别</h2><p>在没有计算机的时代，异地的朋友往往是通过写信来交流感情的，但信件发出去之后，也许会在寄送过程中弄丢了，也有可能寄到后，对方一直没有时间写回信……这个时候都可以让邮局“背个锅”，不过无论如何，也不过是重写一封，生活继续。</p><p>Actor中的消息机制，就可以类比这现实世界里的写信。Actor内部有一个邮箱（Mailbox），接收到的消息都是先放到邮箱里，如果邮箱里有积压的消息，那么新收到的消息就不会马上得到处理，也正是因为Actor使用单线程处理消息，所以不会出现并发问题。你可以把Actor内部的工作模式想象成只有一个消费者线程的生产者-消费者模式。</p><p>所以，在Actor模型里，发送消息仅仅是把消息发出去而已，接收消息的Actor在接收到消息后，也不一定会立即处理，也就是说<strong>Actor中的消息机制完全是异步的</strong>。而<strong>调用对象方法</strong>，实际上是<strong>同步</strong>的，对象方法return之前，调用方会一直等待。</p><p>除此之外，<strong>调用对象方法</strong>，需要持有对象的引用，<strong>所有的对象必须在同一个进程中</strong>。而在Actor中发送消息，类似于现实中的写信，只需要知道对方的地址就可以，<strong>发送消息和接收消息的Actor可以不在一个进程中，也可以不在同一台机器上</strong>。因此，Actor模型不但适用于并发计算，还适用于分布式计算。</p><h2>Actor的规范化定义</h2><p>通过上面的介绍，相信你应该已经对Actor有一个感官印象了，下面我们再来看看Actor规范化的定义是什么样的。Actor是一种基础的计算单元，具体来讲包括三部分能力，分别是：</p><ol>\n<li>处理能力，处理接收到的消息。</li>\n<li>存储能力，Actor可以存储自己的内部状态，并且内部状态在不同Actor之间是绝对隔离的。</li>\n<li>通信能力，Actor可以和其他Actor之间通信。</li>\n</ol><p>当一个Actor接收的一条消息之后，这个Actor可以做以下三件事：</p><ol>\n<li>创建更多的Actor；</li>\n<li>发消息给其他Actor；</li>\n<li>确定如何处理下一条消息。</li>\n</ol><p>其中前两条还是很好理解的，就是最后一条，该如何去理解呢？前面我们说过Actor具备存储能力，它有自己的内部状态，所以你也可以把Actor看作一个状态机，把Actor处理消息看作是触发状态机的状态变化；而状态机的变化往往要基于上一个状态，触发状态机发生变化的时刻，上一个状态必须是确定的，所以确定如何处理下一条消息，本质上不过是改变内部状态。</p><p>在多线程里面，由于可能存在竞态条件，所以根据当前状态确定如何处理下一条消息还是有难度的，需要使用各种同步工具，但在Actor模型里，由于是单线程处理，所以就不存在竞态条件问题了。</p><h2>用Actor实现累加器</h2><p>支持并发的累加器可能是最简单并且有代表性的并发问题了，可以基于互斥锁方案实现，也可以基于原子类实现，但今天我们要尝试用Actor来实现。</p><p>在下面的示例代码中，CounterActor内部持有累计值counter，当CounterActor接收到一个数值型的消息message时，就将累计值counter += message；但如果是其他类型的消息，则打印当前累计值counter。在main()方法中，我们启动了4个线程来执行累加操作。整个程序没有锁，也没有CAS，但是程序是线程安全的。</p><pre><code>//累加器\nstatic class CounterActor extends UntypedActor {\n  private int counter = 0;\n  @Override\n  public void onReceive(Object message){\n    //如果接收到的消息是数字类型，执行累加操作，\n    //否则打印counter的值\n    if (message instanceof Number) {\n      counter += ((Number) message).intValue();\n    } else {\n      System.out.println(counter);\n    }\n  }\n}\npublic static void main(String[] args) throws InterruptedException {\n  //创建Actor系统\n  ActorSystem system = ActorSystem.create(&quot;HelloSystem&quot;);\n  //4个线程生产消息\n  ExecutorService es = Executors.newFixedThreadPool(4);\n  //创建CounterActor \n  ActorRef counterActor = \n    system.actorOf(Props.create(CounterActor.class));\n  //生产4*100000个消息 \n  for (int i=0; i&lt;4; i++) {\n    es.execute(()-&gt;{\n      for (int j=0; j&lt;100000; j++) {\n        counterActor.tell(1, ActorRef.noSender());\n      }\n    });\n  }\n  //关闭线程池\n  es.shutdown();\n  //等待CounterActor处理完所有消息\n  Thread.sleep(1000);\n  //打印结果\n  counterActor.tell(&quot;&quot;, ActorRef.noSender());\n  //关闭Actor系统\n  system.shutdown();\n}\n</code></pre><h2>总结</h2><p>Actor模型是一种非常简单的计算模型，其中Actor是最基本的计算单元，Actor之间是通过消息进行通信。Actor与面向对象编程（OOP）中的对象匹配度非常高，在面向对象编程里，系统由类似于生物细胞那样的对象构成，对象之间也是通过消息进行通信，所以在面向对象语言里使用Actor模型基本上不会有违和感。</p><p>在Java领域，除了可以使用Akka来支持Actor模型外，还可以使用Vert.x，不过相对来说Vert.x更像是Actor模型的隐式实现，对应关系不像Akka那样明显，不过本质上也是一种Actor模型。</p><p>Actor可以创建新的Actor，这些Actor最终会呈现出一个树状结构，非常像现实世界里的组织结构，所以利用Actor模型来对程序进行建模，和现实世界的匹配度非常高。Actor模型和现实世界一样都是异步模型，理论上不保证消息百分百送达，也不保证消息送达的顺序和发送的顺序是一致的，甚至无法保证消息会被百分百处理。虽然实现Actor模型的厂商都在试图解决这些问题，但遗憾的是解决得并不完美，所以使用Actor模型也是有成本的。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":100821,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1559646682,"is_pvip":false,"replies":[{"id":"36788","content":"spark，flink，play应该都用到了，我也不会scala，如果想深入理解只能先把scala学了😂😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560129028,"ip_address":"","comment_id":100821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96048927194","product_id":100023901,"comment_content":"老师，actor模式具体实现的产品有哪些?想知道这些更加理解actor","like_count":22,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452692,"discussion_content":"spark，flink，play应该都用到了，我也不会scala，如果想深入理解只能先把scala学了😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560129028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108906,"user_name":"翡冷翠","can_delete":false,"product_type":"c1","uid":1326971,"ip_address":"","ucode":"42FFE0F7501D56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcmZIPiaKWfMosmDmkejiac8TDhJKz3cygJ2pRJIBHmoeUCNUssSmjETAV9dyozW6c0y8TibNCXqd8Q/132","comment_is_top":false,"comment_ctime":1561920874,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"91756234090","product_id":100023901,"comment_content":"累加器这个例子里只是启动了四个线程去发送消息，实际累加只是在一个线程(actor)里进行的","like_count":21,"discussions":[{"author":{"id":1138722,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/22/92284df2.jpg","nickname":"其实我很屌","note":"","ucode":"2B75EAAD748A60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408614,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635294380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154436,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574429985,"is_pvip":false,"replies":[{"id":"59291","content":"这本书也不错","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1574433977,"ip_address":"","comment_id":154436,"utype":1}],"discussion_count":2,"race_medal":0,"score":"61703972129","product_id":100023901,"comment_content":"感兴趣的可以看看《响应式架构  消息模式Actor实现与Scala.Akka应用集成》","like_count":14,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475468,"discussion_content":"这本书也不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574433977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2337950,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fmhWQeJqq0iaTZOl06HfkowAsQIU08vccCNLUH1thib7GSFJAm2WKgjmI3OMXMNQQbchHAy403KgicGLzMDKD1Kyw/132","nickname":"李林发","note":"","ucode":"9B5DF0E2687C44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552326,"discussion_content":"标记下，以后有机会看下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645412629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100604,"user_name":"兔斯基","can_delete":false,"product_type":"c1","uid":1061320,"ip_address":"","ucode":"146A5FE2D8B301","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/c8/a64e4aef.jpg","comment_is_top":false,"comment_ctime":1559605402,"is_pvip":false,"replies":[{"id":"36239","content":"线程池也一样会丢数据，现在基本上都是靠数据库，mq这些支持事务的存储来搞定安全的异步处理","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559609391,"ip_address":"","comment_id":100604,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57394180250","product_id":100023901,"comment_content":"这种并发模型现实应用多么？系统往往很少有可以接受丢失消息的吧？","like_count":13,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452615,"discussion_content":"线程池也一样会丢数据，现在基本上都是靠数据库，mq这些支持事务的存储来搞定安全的异步处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559609391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1629094,"avatar":"https://static001.geekbang.org/account/avatar/00/18/db/a6/60bf0220.jpg","nickname":"背道而驰","note":"","ucode":"953CFFE377E176","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77676,"discussion_content":"spark2.0之前就是基于akka实现的rpc框架","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575924298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016308,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","nickname":"慕容引刀","note":"","ucode":"714E94AEB42D7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7307,"discussion_content":"做游戏用的多吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567484540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214684,"user_name":"stg609","can_delete":false,"product_type":"c1","uid":1073025,"ip_address":"","ucode":"FB70A75A891BB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/81/1c614f4a.jpg","comment_is_top":false,"comment_ctime":1588781492,"is_pvip":false,"replies":[{"id":"79657","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1588943268,"ip_address":"","comment_id":214684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53128389044","product_id":100023901,"comment_content":"虽然一个actor 是不会有并发问题，但要是同时发给多个actor去处理呢，每个actor 都可能访问同一数据库或者redis 这种共享资源，那还是有并发问题吧","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494174,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588943268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218629,"user_name":"湮汐","can_delete":false,"product_type":"c1","uid":1106268,"ip_address":"","ucode":"FB6185621891E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/5c/86606d9c.jpg","comment_is_top":false,"comment_ctime":1589847949,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"31654619021","product_id":100023901,"comment_content":"感觉就像消息队列，但是是用单线程顺序消费的模式。","like_count":7,"discussions":[{"author":{"id":1493907,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cb/93/4adea49a.jpg","nickname":"努力努力再努力","note":"","ucode":"0C6EEA28FCE8C7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587053,"discussion_content":"我也是这么理解，汐神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662715662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1669586,"avatar":"https://static001.geekbang.org/account/avatar/00/19/79/d2/a3fbad97.jpg","nickname":"chachae","note":"","ucode":"F9FB01803C0F1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574015,"discussion_content":"居然在这看到你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653795322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141584,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1571195115,"is_pvip":true,"replies":[{"id":"54748","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1571227570,"ip_address":"","comment_id":141584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31635966187","product_id":100023901,"comment_content":"Actor读起来好像流数据处理模型中的Operator，不过Flink解决一致性语义(exactly-once)使用的是轻量级一致性快照，即在每个节点内部缓存当前整个系统执行到何处的状态，不过代价就是需要在计算拓扑中传递状态，算是一种内存换一致性吧，不过现在存储愈发可得，这个代价应该也是可以接受的。","like_count":7,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470808,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571227570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101060,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1559706747,"is_pvip":false,"replies":[{"id":"36462","content":"不会","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559741261,"ip_address":"","comment_id":101060,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23034543227","product_id":100023901,"comment_content":"请问老师actor模型的效率是不是会比较低","like_count":5,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452789,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559741261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019302,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","nickname":"楊_宵夜","note":"","ucode":"7BA0CADC5F23BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228939,"discussion_content":"可以这么想, 由于Actor内部类似于&#34;生产-消费模型&#34;, 同时消费者是单线程处理, 既然只有一条线程在处理, 那么就有很多优化方式可以做, 例如&#34;批处理&#34;;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586592856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56065,"discussion_content":"《响应式架构  消息模式Actor实现与Scala.Akka应用集成》Actor的性能非常恐怖，单机每秒轻松处理千万级的消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574429607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100655,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1559611304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18739480488","product_id":100023901,"comment_content":"Actor模型的最佳实践目前还是erlang，Java的akka有些不伦不类","like_count":4},{"had_liked":false,"id":210904,"user_name":"new life","can_delete":false,"product_type":"c1","uid":1447866,"ip_address":"","ucode":"B817AC3909102B","user_header":"https://static001.geekbang.org/account/avatar/00/16/17/ba/c56aa720.jpg","comment_is_top":false,"comment_ctime":1587863977,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14472765865","product_id":100023901,"comment_content":"actor 模型没有性能问题，我觉得是因为我们加锁保证线程安全，这个期间只有一个线程在对共享资源的持有，而actor只有一个线程处理消息，一样的道理，还省略了线程抢资源时候的切换开销，不知道理解的对不对；","like_count":3},{"had_liked":false,"id":343406,"user_name":"焕澪","can_delete":false,"product_type":"c1","uid":1217720,"ip_address":"","ucode":"783F37930E5A2A","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/b8/3ac880b9.jpg","comment_is_top":false,"comment_ctime":1650818678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10240753270","product_id":100023901,"comment_content":"如果actor的核心武器是单线程消费，控制流程，无锁，避免线程切换和共享资源争用，那么，直接写串行程序岂不是更省力，也具备这些特征","like_count":2},{"had_liked":false,"id":169915,"user_name":"Cv","can_delete":false,"product_type":"c1","uid":1062797,"ip_address":"","ucode":"C77CE172B5AA28","user_header":"","comment_is_top":false,"comment_ctime":1578472137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168406729","product_id":100023901,"comment_content":"我理解示例中的累加器只是用了4个线程把累计动作丢到队列里, 累加器还是单线程消费队列的, 实际效率并不高","like_count":2},{"had_liked":false,"id":140837,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1571057167,"is_pvip":false,"replies":[{"id":"54539","content":"方法参数😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1571098277,"ip_address":"","comment_id":140837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10160991759","product_id":100023901,"comment_content":"很长一段时间里，我都以为对象方法是面向对象理论中消息的一种实现，直到接触到 Actor 模型，才明白消息压根不是这个实现法。<br><br><br>老师是认为面向对象调用方法不叫消息？那么面向对象调用方法这种数据传递方式叫什么？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470584,"discussion_content":"方法参数😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571098277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100640,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1559609630,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10149544222","product_id":100023901,"comment_content":"感觉核心就是通过消息对列实现消息的暂存，然后actor就可以一个接一个单线程处理消息。有点像redis，但不同的是不同actor的调用线程可能不一样，只要保证同一时刻最多只有一个线程处理某个actor就行，并且actor直接可以消息通信，意味着可以用多个actor去组织起来完成一次请求。","like_count":2},{"had_liked":false,"id":145688,"user_name":"军","can_delete":false,"product_type":"c1","uid":1326801,"ip_address":"","ucode":"7D4DE0E435BF21","user_header":"https://static001.geekbang.org/account/avatar/00/14/3e/d1/17f3160c.jpg","comment_is_top":false,"comment_ctime":1572344435,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5867311731","product_id":100023901,"comment_content":"这里的Actor工作方式很像游戏里的角色Actor，ActorSystem就是游戏里的World","like_count":1,"discussions":[{"author":{"id":1232334,"avatar":"","nickname":"13761642169","note":"","ucode":"68137695FC2120","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53206,"discussion_content":"小丑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574144962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135552,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1569208665,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5864175961","product_id":100023901,"comment_content":"老师说Actor模型并不能保证消息100%可达，也不能保证100%能被处理，可见Actor模式适用的情形还是受限狭窄的","like_count":1,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56067,"discussion_content":"性能这么优秀，可以重试啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574429733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100982,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1559697933,"is_pvip":false,"replies":[{"id":"36463","content":"理论模型没这要求，并发情况下严格实现fifo很影响性能","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1559741436,"ip_address":"","comment_id":100982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854665229","product_id":100023901,"comment_content":"&quot;也不保证消息送达的顺序和发送的顺序是一致的&quot; …… 想问下什么情况下会发生这种情形？MailBox不是类似Queue一样FIFO结构吗？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452765,"discussion_content":"理论模型没这要求，并发情况下严格实现fifo很影响性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559741436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100969,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1559696946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854664242","product_id":100023901,"comment_content":"actor，看erlang","like_count":1},{"had_liked":false,"id":100746,"user_name":"潭州太守","can_delete":false,"product_type":"c1","uid":1178824,"ip_address":"","ucode":"1DA953B8DCA3C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/c8/15c85ee4.jpg","comment_is_top":false,"comment_ctime":1559631299,"is_pvip":false,"replies":[{"id":"54027","content":"也不是，erlang就有这方面的应用","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570768120,"ip_address":"","comment_id":100746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854598595","product_id":100023901,"comment_content":"请问老师，Actor是不是不适合低延迟场景，或者有没有策略保证低延迟。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452664,"discussion_content":"也不是，erlang就有这方面的应用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570768120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100607,"user_name":"邱","can_delete":false,"product_type":"c1","uid":1443771,"ip_address":"","ucode":"6235D4CDA8B8C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/07/bb/97ba4ccd.jpg","comment_is_top":false,"comment_ctime":1559605850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854573146","product_id":100023901,"comment_content":"要是有数据库io和纯cpu结合的大数据量高并发的实际就更好😊","like_count":1},{"had_liked":false,"id":100598,"user_name":"周治慧","can_delete":false,"product_type":"c1","uid":1335293,"ip_address":"","ucode":"7D56C4E66BEE17","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKR3ibELhjgVicCNShZCBwvaDxibnzibggG4wUzVkS2mkDxUBZyIs87nDEdJ7PiahJBVoZcuhQ84RxAziag/132","comment_is_top":false,"comment_ctime":1559604903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854572199","product_id":100023901,"comment_content":"万物皆是面向对象 早上好","like_count":1},{"had_liked":false,"id":353046,"user_name":"浩","can_delete":false,"product_type":"c1","uid":2372470,"ip_address":"北京","ucode":"B1A08AE574DA67","user_header":"https://static001.geekbang.org/account/avatar/00/24/33/76/9582bf05.jpg","comment_is_top":false,"comment_ctime":1659089360,"is_pvip":true,"replies":[{"id":"130863","content":"我没有这样搞过，集成的太多坑就多，不过查了一下，还真有人这样搞过，还是建议慎重选择。<br>https:&#47;&#47;github.com&#47;aliakh&#47;demo-akka-spring","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1665838008,"ip_address":"北京","comment_id":353046,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659089360","product_id":100023901,"comment_content":"老师怎么把actor用在实际开发中，在spring boot中集成<br>","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590527,"discussion_content":"我没有这样搞过，集成的太多坑就多，不过查了一下，还真有人这样搞过，还是建议慎重选择。\nhttps://github.com/aliakh/demo-akka-spring","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665838008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318406,"user_name":"其实我很屌","can_delete":false,"product_type":"c1","uid":1138722,"ip_address":"","ucode":"2B75EAAD748A60","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/22/92284df2.jpg","comment_is_top":false,"comment_ctime":1635294552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635294552","product_id":100023901,"comment_content":"感觉最后这个累加器，和多线程往一个队列写，然后有一个单线程消费，类似","like_count":0},{"had_liked":false,"id":316002,"user_name":"lidashuang","can_delete":false,"product_type":"c1","uid":1104850,"ip_address":"","ucode":"560ABE8032760E","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","comment_is_top":false,"comment_ctime":1634104056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634104056","product_id":100023901,"comment_content":"erlang&#47;elixir 的并发模型也是actor","like_count":0},{"had_liked":false,"id":311432,"user_name":"萤火之森","can_delete":false,"product_type":"c1","uid":1183966,"ip_address":"","ucode":"26791DC3000F3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/de/dbf2abde.jpg","comment_is_top":false,"comment_ctime":1631236684,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631236684","product_id":100023901,"comment_content":"框架级的等待唤醒？","like_count":0},{"had_liked":false,"id":291978,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1620634609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620634609","product_id":100023901,"comment_content":"开眼了，actor模式第一次看到","like_count":0},{"had_liked":false,"id":199819,"user_name":"😜哈哈","can_delete":false,"product_type":"c1","uid":1069001,"ip_address":"","ucode":"1FF58FB3A91135","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/c9/88837387.jpg","comment_is_top":false,"comment_ctime":1585496428,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585496428","product_id":100023901,"comment_content":"actor模型在flink中相似的用法","like_count":0},{"had_liked":false,"id":102319,"user_name":"机遇号","can_delete":false,"product_type":"c1","uid":1105053,"ip_address":"","ucode":"A2940DE77BCAEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/9d/e20b37d7.jpg","comment_is_top":false,"comment_ctime":1560194462,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1560194462","product_id":100023901,"comment_content":"老师您好，能不能在继承UntypedActor这个类里将消息保存到数据库？具体怎么实现？能不能指点一下","like_count":0,"discussions":[{"author":{"id":1468298,"avatar":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","nickname":"锦","note":"","ucode":"CB0EB4B68C468B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104665,"discussion_content":"直接在Actor中落库就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577445687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56068,"discussion_content":"发个消息给专门存数据库的Actor应该就行吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574429805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100634,"user_name":"明天更美好","can_delete":false,"product_type":"c1","uid":1180696,"ip_address":"","ucode":"F036B8718938BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/18/4b02510f.jpg","comment_is_top":false,"comment_ctime":1559608703,"is_pvip":false,"replies":[{"id":"67123","content":"可以试试异步处理，暂存本地数据库，另起进程发mq<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1579439557,"ip_address":"","comment_id":100634,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559608703","product_id":100023901,"comment_content":"遇到一个线程问题，我们有个业务要通过mq去通知第三方，但是第三方能力比较差，我们同步的时候mq堆积很多。后来改成用woker-thread模式，队列设置了2000线程用了64个机器是64核的，拒绝策论是当前线程执行该任务。结果发现队列很快就被放满了，一段时间后mq又堆积了。因为客户端没有及时签收消息，导致broker限流了直接不销费了，这种问题老师您有什么好的建议吗？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452620,"discussion_content":"可以试试异步处理，暂存本地数据库，另起进程发mq\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579439557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56070,"discussion_content":"扩充队列，只要队列抗的住，请求理论上都可以被处理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574429938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100625,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1559607661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559607661","product_id":100023901,"comment_content":"Scala 编写spark 内部实现也是用这个通信机制","like_count":0},{"had_liked":false,"id":100584,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1559601476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559601476","product_id":100023901,"comment_content":"打卡！","like_count":0}]}