{"id":40036,"title":"03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？","content":"<p>我们都知道，数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。那如何来衡量你编写的算法代码的执行效率呢？这里就要用到我们今天要讲的内容：时间、空间复杂度分析。</p><p>其实，只要讲到数据结构与算法，就一定离不开时间、空间复杂度分析。而且，我个人认为，<strong>复杂度分析是整个算法学习的精髓，只要掌握了它，数据结构和算法的内容基本上就掌握了一半</strong>。</p><p>复杂度分析实在太重要了，因此我准备用两节内容来讲。希望你学完这个内容之后，无论在任何场景下，面对任何代码的复杂度分析，你都能做到“庖丁解牛”般游刃有余。</p><h2>为什么需要复杂度分析？</h2><p>你可能会有些疑惑，我把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占用的内存大小。为什么还要做时间、空间复杂度分析呢？这种分析方法能比我实实在在跑一遍得到的数据更准确吗？</p><p>首先，我可以肯定地说，你这种评估算法执行效率的方法是正确的。很多数据结构和算法书籍还给这种方法起了一个名字，叫<strong>事后统计法</strong>。但是，这种统计方法有非常大的局限性。</p><p><strong>1. 测试结果非常依赖测试环境</strong></p><p>测试环境中硬件的不同会对测试结果有很大的影响。比如，我们拿同样一段代码，分别用Intel Core i9处理器和Intel Core i3处理器来运行，不用说，i9处理器要比i3处理器执行的速度快很多。还有，比如原本在这台机器上a代码执行的速度比b代码要快，等我们换到另一台机器上时，可能会有截然相反的结果。</p><!-- [[[read_end]]] --><p><strong>2.测试结果受数据规模的影响很大</strong></p><p>后面我们会讲排序算法，我们先拿它举个例子。对同一个排序算法，待排序数据的有序度不一样，排序的执行时间就会有很大的差别。极端情况下，如果数据已经是有序的，那排序算法不需要做任何操作，执行时间就会非常短。除此之外，如果测试数据规模太小，测试结果可能无法真实地反映算法的性能。比如，对于小规模的数据排序，插入排序可能反倒会比快速排序要快！</p><p>所以，<strong>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</strong>。这就是我们今天要讲的时间、空间复杂度分析方法。</p><h2>大O复杂度表示法</h2><p>算法的执行效率，粗略地讲，就是算法代码执行的时间。但是，如何在不运行代码的情况下，用“肉眼”得到一段代码的执行时间呢？</p><p>这里有段非常简单的代码，求1,2,3...n的累加和。现在，我就带你一块来估算一下这段代码的执行时间。</p><pre><code> int cal(int n) {\n   int sum = 0;\n   int i = 1;\n   for (; i &lt;= n; ++i) {\n     sum = sum + i;\n   }\n   return sum;\n }\n</code></pre><p>从CPU的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据</strong>-<strong>运算</strong>-<strong>写数据</strong>。尽管每行代码对应的CPU执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？</p><p>第2、3行代码分别需要1个unit_time的执行时间，第4、5行都运行了n遍，所以需要2n*unit_time的执行时间，所以这段代码总的执行时间就是(2n+2)*unit_time。可以看出来，<strong>所有代码的执行时间T(n)与每行代码的执行次数成正比</strong>。</p><p>按照这个分析思路，我们再来看这段代码。</p><pre><code> int cal(int n) {\n   int sum = 0;\n   int i = 1;\n   int j = 1;\n   for (; i &lt;= n; ++i) {\n     j = 1;\n     for (; j &lt;= n; ++j) {\n       sum = sum +  i * j;\n     }\n   }\n }\n</code></pre><p>我们依旧假设每个语句的执行时间是unit_time。那这段代码的总执行时间T(n)是多少呢？</p><p>第2、3、4行代码，每行都需要1个unit_time的执行时间，第5、6行代码循环执行了n遍，需要2n * unit_time的执行时间，第7、8行代码循环执行了n<sup>2</sup>遍，所以需要2n<sup>2</sup> * unit_time的执行时间。所以，整段代码总的执行时间T(n) = (2n<sup>2</sup>+2n+3)*unit_time。</p><p>尽管我们不知道unit_time的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，<strong><span class=\"orange\">所有代码的执行时间T(n)与每行代码的执行次数f(n)成正比</span></strong>。</p><p>我们可以把这个规律总结成一个公式。注意，大O就要登场了！</p><p><img src=\"https://static001.geekbang.org/resource/image/22/ef/22900968aa2b190072c985a08b0e92ef.png?wh=1133*109\" alt=\"\"></p><p>我来具体解释一下这个公式。其中，T(n)我们已经讲过了，它表示代码执行的时间；n表示数据规模的大小；f(n)表示每行代码执行的次数总和。因为这是一个公式，所以用f(n)来表示。公式中的O，表示代码的执行时间T(n)与f(n)表达式成正比。</p><p>所以，第一个例子中的T(n) = O(2n+2)，第二个例子中的T(n) = O(2n<sup>2</sup>+2n+3)。这就是<strong>大O时间复杂度表示法</strong>。大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p><p>当n很大时，你可以把它想象成10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大O表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n<sup>2</sup>)。</p><h2>时间复杂度分析</h2><p>前面介绍了大O时间复杂度的由来和表示方法。现在我们来看下，如何分析一段代码的时间复杂度？我这儿有三个比较实用的方法可以分享给你。</p><p><strong>1.只关注循环执行次数最多的一段代码</strong></p><p>我刚才说了，大O这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，<strong>我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了</strong>。这段核心代码执行次数的n的量级，就是整段要分析代码的时间复杂度。</p><p>为了便于你理解，我还是拿前面的例子来说明。</p><pre><code> int cal(int n) {\n   int sum = 0;\n   int i = 1;\n   for (; i &lt;= n; ++i) {\n     sum = sum + i;\n   }\n   return sum;\n }\n</code></pre><p>其中第2、3行代码都是常量级的执行时间，与n的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第4、5行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了n次，所以总的时间复杂度就是O(n)。</p><p><strong>2.加法法则：总复杂度等于量级最大的那段代码的复杂度</strong></p><p>我这里还有一段代码。你可以先试着分析一下，然后再往下看跟我的分析思路是否一样。</p><pre><code>int cal(int n) {\n   int sum_1 = 0;\n   int p = 1;\n   for (; p &lt; 100; ++p) {\n     sum_1 = sum_1 + p;\n   }\n\n   int sum_2 = 0;\n   int q = 1;\n   for (; q &lt; n; ++q) {\n     sum_2 = sum_2 + q;\n   }\n \n   int sum_3 = 0;\n   int i = 1;\n   int j = 1;\n   for (; i &lt;= n; ++i) {\n     j = 1; \n     for (; j &lt;= n; ++j) {\n       sum_3 = sum_3 +  i * j;\n     }\n   }\n \n   return sum_1 + sum_2 + sum_3;\n }\n</code></pre><p>这个代码分为三部分，分别是求sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。</p><p>第一段的时间复杂度是多少呢？这段代码循环执行了100次，所以是一个常量的执行时间，跟n的规模无关。</p><p>这里我要再强调一下，即便这段代码循环10000次、100000次，只要是一个已知的数，跟n无关，照样也是常量级的执行时间。当n无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</p><p>那第二段代码和第三段代码的时间复杂度是多少呢？答案是O(n)和O(n<sup>2</sup>)，你应该能容易就分析出来，我就不啰嗦了。</p><p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度<strong><strong>就</strong></strong>等于量级最大的那段代码的时间复杂度</strong>。那我们将这个规律抽象成公式就是：</p><p>如果T1(n)=O(f(n))，T2(n)=O(g(n))；那么T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).</p><p><strong>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong></p><p>我刚讲了一个复杂度分析中的加法法则，这儿还有一个<strong>乘法法则</strong>。类比一下，你应该能“猜到”公式是什么样子的吧？</p><p>如果T1(n)=O(f(n))，T2(n)=O(g(n))；那么T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).</p><p>也就是说，假设T1(n) = O(n)，T2(n) = O(n<sup>2</sup>)，则T1(n) * T2(n) = O(n<sup>3</sup>)。落实到具体的代码上，我们可以把乘法法则看成是<strong>嵌套循环</strong>，我举个例子给你解释一下。</p><pre><code>int cal(int n) {\n   int ret = 0; \n   int i = 1;\n   for (; i &lt; n; ++i) {\n     ret = ret + f(i);\n   } \n } \n \n int f(int n) {\n  int sum = 0;\n  int i = 1;\n  for (; i &lt; n; ++i) {\n    sum = sum + i;\n  } \n  return sum;\n }\n</code></pre><p>我们单独看cal()函数。假设f()只是一个普通的操作，那第4～6行的时间复杂度就是，T1(n) = O(n)。但f()函数本身不是一个简单的操作，它的时间复杂度是T2(n) = O(n)，所以，整个cal()函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n<sup>2</sup>)。</p><p>我刚刚讲了三种复杂度的分析技巧。不过，你并不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。</p><h2>几种常见时间复杂度实例分析</h2><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了你今后可以接触的所有代码的复杂度量级。</p><p><img src=\"https://static001.geekbang.org/resource/image/37/0a/3723793cc5c810e9d5b06bc95325bf0a.jpg?wh=1142*572\" alt=\"\"></p><p>对于刚罗列的复杂度量级，我们可以粗略地分为两类，<strong>多项式量级</strong>和<strong>非多项式量级</strong>。其中，非多项式量级只有两个：O(2<sup>n</sup>)和O(n!)。</p><p>我们把时间复杂度为非多项式量级的算法问题叫作NP（Non-Deterministic Polynomial，非确定多项式）问题。</p><p>当数据规模n越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于NP时间复杂度我就不展开讲了。我们主要来看几种常见的<strong>多项式时间复杂度</strong>。</p><p><strong>1. O(1)</strong></p><p>首先你必须明确一个概念，O(1)只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有3行，它的时间复杂度也是O(1），而不是O(3)。</p><pre><code> int i = 8;\n int j = 6;\n int sum = i + j;\n</code></pre><p>我稍微总结一下，只要代码的执行时间不随n的增大而增长，这样代码的时间复杂度我们都记作O(1)。或者说，<strong>一般<strong><strong>情况下</strong></strong>，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)</strong>。</p><p><strong>2.  O(logn)、O(nlogn)</strong></p><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p><pre><code> i=1;\n while (i &lt;= n)  {\n   i = i * 2;\n }\n</code></pre><p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p><p>从代码中可以看出，变量i的值从1开始取，每循环一次就乘以2。当大于n时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量i的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/9a/9b1c88264e7a1a20b5954be9bc4bec9a.jpg?wh=1142*147\" alt=\"\"></p><p>所以，我们只要知道x值是多少，就知道这行代码执行的次数了。通过2<sup>x</sup>=n求解x这个问题我们想高中应该就学过了，我就不多说了。x=log<sub>2</sub>n，所以，这段代码的时间复杂度就是O(log<sub>2</sub>n)。</p><p>现在，我把代码稍微改下，你再看看，这段代码的时间复杂度是多少？</p><pre><code> i=1;\n while (i &lt;= n)  {\n   i = i * 3;\n }\n</code></pre><p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为O(log<sub>3</sub>n)。</p><p>实际上，不管是以2为底、以3为底，还是以10为底，我们可以把所有对数阶的时间复杂度都记为O(logn)。为什么呢？</p><p>我们知道，对数之间是可以互相转换的，log<sub>3</sub>n就等于log<sub>3</sub>2 * log<sub>2</sub>n，所以O(log<sub>3</sub>n) = O(C *  log<sub>2</sub>n)，其中C=log<sub>3</sub>2是一个常量。基于我们前面的一个理论：<strong>在采用大O标记复杂度的时候，可以忽略系数，即O(Cf(n)) = O(f(n))</strong>。所以，O(log<sub>2</sub>n) 就等于O(log<sub>3</sub>n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为O(logn)。</p><p>如果你理解了我前面讲的O(logn)，那O(nlogn)就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是O(logn)，我们循环执行n遍，时间复杂度就是O(nlogn)了。而且，O(nlogn)也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是O(nlogn)。</p><p><strong>3.  O(m+n)、O(m*n)</strong></p><p>我们再来讲一种跟前面都不一样的时间复杂度，代码的复杂度<strong>由两个数据的规模</strong>来决定。老规矩，先看代码！</p><pre><code>int cal(int m, int n) {\n  int sum_1 = 0;\n  int i = 1;\n  for (; i &lt; m; ++i) {\n    sum_1 = sum_1 + i;\n  }\n\n  int sum_2 = 0;\n  int j = 1;\n  for (; j &lt; n; ++j) {\n    sum_2 = sum_2 + j;\n  }\n\n  return sum_1 + sum_2;\n}\n</code></pre><p>从代码中可以看出，m和n是表示两个数据规模。我们无法事先评估m和n谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是O(m+n)。</p><p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。</p><h2>空间复杂度分析</h2><p>前面，咱们花了很长时间讲大O表示法和时间复杂度分析，理解了前面讲的内容，空间复杂度分析方法学起来就非常简单了。</p><p>前面我讲过，时间复杂度的全称是<strong>渐进时间复杂度</strong>，<strong>表示算法的执行时间与数据规模之间的增长关系</strong>。类比一下，空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p><p>我还是拿具体的例子来给你说明。（这段代码有点“傻”，一般没人会这么写，我这么写只是为了方便给你解释。）</p><pre><code>void print(int n) {\n  int i = 0;\n  int[] a = new int[n];\n  for (i; i &lt;n; ++i) {\n    a[i] = i * i;\n  }\n\n  for (i = n-1; i &gt;= 0; --i) {\n    print out a[i]\n  }\n}\n</code></pre><p>跟时间复杂度分析一样，我们可以看到，第2行代码中，我们申请了一个空间存储变量i，但是它是常量阶的，跟数据规模n没有关系，所以我们可以忽略。第3行申请了一个大小为n的int类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是O(n)。</p><p>我们常见的空间复杂度就是O(1)、O(n)、O(n<sup>2</sup> )，像O(logn)、O(nlogn)这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p><h2>内容小结</h2><p>基础复杂度分析的知识到此就讲完了，我们来总结一下。</p><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup> )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/04/497a3f120b7debee07dc0d03984faf04.jpg?wh=1142*640\" alt=\"\"></p><p><strong>复杂度分析并不难，关键在于多练。</strong> 之后讲后面的内容时，我还会带你详细地分析每一种数据结构和算法的时间、空间复杂度。只要跟着我的思路学习、练习，你很快就能和我一样，每次看到代码的时候，简单的一眼就能看出其复杂度，难的稍微分析一下就能得出答案。</p><h2>课后思考</h2><p>有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","neighbors":{"left":{"article_title":"02 | 如何抓住重点，系统高效地学习数据结构与算法？","id":40011},"right":{"article_title":"04 | 复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度","id":40447}},"comments":[{"had_liked":true,"id":27497,"user_name":"xr","can_delete":false,"product_type":"c1","uid":1145077,"ip_address":"","ucode":"FF78E9247C31ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/78/f5/915d5442.jpg","comment_is_top":false,"comment_ctime":1537897821,"is_pvip":false,"replies":[{"id":"9894","content":"写得很好。理解的到位<br>","user_name":"作者回复","comment_id":27497,"uid":"1190123","ip_address":"","utype":1,"ctime":1537917101,"user_name_real":"gg"}],"discussion_count":40,"race_medal":0,"score":"9626559608157","product_id":100017301,"comment_content":"我不认为是多此一举，渐进时间，空间复杂度分析为我们提供了一个很好的理论分析的方向，并且它是宿主平台无关的，能够让我们对我们的程序或算法有一个大致的认识，让我们知道，比如在最坏的情况下程序的执行效率如何，同时也为我们交流提供了一个不错的桥梁，我们可以说，算法1的时间复杂度是O(n)，算法2的时间复杂度是O(logN)，这样我们立刻就对不同的算法有了一个“效率”上的感性认识。<br><br>当然，渐进式时间，空间复杂度分析只是一个理论模型，只能提供给粗略的估计分析，我们不能直接断定就觉得O(logN)的算法一定优于O(n), 针对不同的宿主环境，不同的数据集，不同的数据量的大小，在实际应用上面可能真正的性能会不同，个人觉得，针对不同的实际情况，进而进行一定的性能基准测试是很有必要的，比如在统一一批手机上(同样的硬件，系统等等)进行横向基准测试，进而选择适合特定应用场景下的最有算法。<br><br>综上所述，渐进式时间，空间复杂度分析与性能基准测试并不冲突，而是相辅相成的，但是一个低阶的时间复杂度程序有极大的可能性会优于一个高阶的时间复杂度程序，所以在实际编程中，时刻关心理论时间，空间度模型是有助于产出效率高的程序的，同时，因为渐进式时间，空间复杂度分析只是提供一个粗略的分析模型，因此也不会浪费太多时间，重点在于在编程时，要具有这种复杂度分析的思维。","like_count":2241,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424926,"discussion_content":"写得很好。理解的到位\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537917101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131957,"avatar":"https://static001.geekbang.org/account/avatar/00/11/45/b5/c3cfb198.jpg","nickname":"王振华 程序员","note":"","ucode":"31BB337642B882","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67143,"discussion_content":"总结的好！\n想做一点不成熟的小补充，哈哈。\n我觉得懂得了时间复杂度、空间复杂度分析之后，在写代码的时候，就会去尽可能寻找最优的算法。\n而性能测试，则是代码写完之后，才能进行的。只能是事后的。\n所以，这两者都有用处，应该结合使用","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1575123846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6b/0d/74aeb985.jpg","nickname":"睡着的海豚","note":"","ucode":"E5F069F7C9E1BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346151,"discussion_content":"时间复杂度和空间复杂度的分析有助于我们产出高质量的代码！能区分一流的工程师和三流的工程师","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1611882692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144772,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/EJZoM46wR6QqTeibhPZsO5wJTeUia4RndGicWfDZLw153WibjsnJXqEtGZICxAa8icb36pDkficTic3FViaySd1z9HmQBw/132","nickname":"翰弟","note":"","ucode":"42149ACC75AA08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300184,"discussion_content":"作者和李笑来都提到过   不会才是不用的理由","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597978411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541022,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/9e/2f4aba1b.jpg","nickname":"thunder","note":"","ucode":"5569DCFFB90F19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54996,"discussion_content":"自己懂似乎不难，说出来让别人懂不容易，高手，理解深刻，总结精辟","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574331205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2163901,"avatar":"","nickname":"livy","note":"","ucode":"04D639A75886E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308714,"discussion_content":"一个词，酣畅淋漓","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601041473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317420,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1a/2c/f1c58366.jpg","nickname":"程博","note":"","ucode":"F7018BEC94C6ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263173,"discussion_content":"写的真好，把我想说又说不好的话都说了出来","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589183022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1710960,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","nickname":"谭方敏","note":"","ucode":"728DC7ECB7C902","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193188,"discussion_content":"事前的复杂度估算，有助于写出相对高质量的代码，而事后的性能测试则涉及多方面的考虑，比如数据规模，以及运行关键，也是对事前复杂度估算的印证和修正吧，渐进式方法还是非常有效的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1583135374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039970,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/62/5b088727.jpg","nickname":"杨忠山","note":"","ucode":"0285B56FD0C54F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295305,"discussion_content":"厉害，总结的太棒了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596160735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282839,"discussion_content":"把我不知道的都说出来了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592102405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1981574,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3c/86/f964868c.jpg","nickname":"Guanjm","note":"","ucode":"E472FA918DF9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573618,"discussion_content":"理论分析，模糊的很精准，效率上的理论计算","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1653550500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2867273,"avatar":"","nickname":"Geek_8153bb","note":"","ucode":"10E25188899718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538001,"discussion_content":"你写的让我觉得确实如此，渐进时间复杂度和渐进空间复杂度只是为了给一个粗略的估计，具体的性能评估还需要实际检测，这两者是相辅相成的，缺一不可！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639295559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4c/3b/2780fc51.jpg","nickname":"书豪","note":"","ucode":"212FBDE59E8457","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354200,"discussion_content":"有理有据，表达清晰，赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615254939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1949759,"avatar":"","nickname":"thetwomoon","note":"","ucode":"896A30078E1031","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307457,"discussion_content":"前端主要是锻炼思维,实际开发用不到的,后台数据库方面用的比较多","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600657367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1946354,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/b2/f2/186191e8.jpg","nickname":"无为","note":"","ucode":"E323FBCA1DA864","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305857,"discussion_content":"看不懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600095246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1548569,"avatar":"https://static001.geekbang.org/account/avatar/00/17/a1/19/a9d50cc0.jpg","nickname":"黎明的雾","note":"","ucode":"6BE3737F0E7067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588080,"discussion_content":"知识点:\n一、why\n事后统计有很大局限性\n1.依赖测试环境\n2.受数据规模影响大\n二、时间、空间复杂度分析法  大O复杂度表示法\n1.cpu角度 每行代码执行类似操作  读 算  写\n2.代码运行时间T  =  k*  每行代码执行的次数\n3.常见时间复杂度事例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663547812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3008684,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/e8/ac/352dc84a.jpg","nickname":"DRay-Z","note":"","ucode":"CE4890A23F59DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577748,"discussion_content":"复杂度分析是感应分析，事前分析，性能测试是理性分析，事后分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656317283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1722033,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/46/b1/811f827b.jpg","nickname":"BOBO","note":"","ucode":"E7F35D7F3A1BD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573761,"discussion_content":"说的真好，感觉看评论就相当于和高手进行了思维交流，补充自己没有想到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653631926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162594,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/62/b2c3fba1.jpg","nickname":"南风","note":"","ucode":"38DAB775A05214","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546906,"discussion_content":"哈哈哈哈 那请问你实际分析了吗？？还不是摸鱼学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642468138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890949,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/c5/3df9fa5e.jpg","nickname":"路远","note":"","ucode":"46DCE2D12D38C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545891,"discussion_content":"听得懂，但说不出来，看来消化到输出也是有距离的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642072780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1856464,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ibA1j3Lrtn7zct63NytxRJ5ZbSicws4MKFKaPhfKUO08qN0Riby9oeJsNJ4nSiaic1JpD5ZHQiboNJPY9ML7HW05A4Tg/132","nickname":"Geek_Allen","note":"","ucode":"B8350087DFF9FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541487,"discussion_content":"补充一点个人愚见：性能分析工具的产生就是提高生产力，设计的目的就是能直观感受到一个明显的性能量化数据，让小白也能快速感知性能差异。而渐进时间，空间复杂度只是一个量化公式，不直观。而且理解也需要一定基础。产品都不是单打独斗，一切的设计都是为了参差不齐水品的团队更好的交流协作，效率优先，所以我觉得两者都有必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640403069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2850617,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/7f/39/9fe8397c.jpg","nickname":"年轻人°","note":"","ucode":"3A2B6DABECD402","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532601,"discussion_content":"建议全文背诵 , 面试用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637652622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2745977,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/PibU2hVibFm52WUX2kunBgNNbCUytxIEkichqxhxJxrDGdr6unlic6v7fAbSjYJnVOQVZ0yngibdQoDDHseSLUI8eMA/132","nickname":"Geek_35e10f","note":"","ucode":"4FA50C11D29070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390439,"discussion_content":"说的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629837789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/56/315c5be7.jpg","nickname":"青鸟","note":"","ucode":"A4818C5C0C688D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389434,"discussion_content":"老哥写得好啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629275901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2678109,"avatar":"","nickname":"Apple_d5e27c","note":"","ucode":"132677BCA97EED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381652,"discussion_content":"你好，很高兴看到你这么精彩的留言，宁夏这段评论是我用语音转文字的方式读给我的电子设备上让他评论出来的，如果有什么错别字，还请见谅，你理解的跟我一样额不同的机器有不同的性能，我们通过时间跟空间复杂度来表示，描述一个程序的执行效率是非常非常有用的，是非常理论的，也是非常可以评估一个东西了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625152354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094099,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f4/13/fa7e638a.jpg","nickname":"大剑士","note":"","ucode":"1D99E345947C92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303612,"discussion_content":"厉害了，我以为是老师总结的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599314330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037714,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/17/d2/68cdbd75.jpg","nickname":"海狮","note":"","ucode":"18FDDF5841F282","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283136,"discussion_content":"渐进复杂度作用：提供方向性指导以及节省时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592192927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328375,"avatar":"","nickname":"男朋友","note":"","ucode":"C1D09186F29134","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48158,"discussion_content":"你可以当讲师了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573454782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070364,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/1c/61f30f21.jpg","nickname":"考拉","note":"","ucode":"347183CFECAC70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44034,"discussion_content":"很多算法的时间复杂度，其基本操作次数的和式找到，但求解并不易，有些甚至无法用数学的渐近式表达，怎么能说不难呢？不能欺骗式鼓励！唉，有些失望了！原夲买课程是想看看能不能推荐给别人，老师的细节尚可，但理解令人失望！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572924725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070364,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/1c/61f30f21.jpg","nickname":"考拉","note":"","ucode":"347183CFECAC70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44028,"discussion_content":"为何要用基本操次数的渐近界来评价一个算法的时间耗费？即算法时间评价体系确立的理由！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572923918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729125,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/rpW9po20ASRbwoCWLT1xnRX5gTEh89n3fYylySEiaCWDP3bEGxjDsIcPRkdgQhbX7SmguIbejh944GyGyDxAiacQ/132","nickname":"Geek_a5c5a8","note":"","ucode":"ADB2F79BF4E0AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43072,"discussion_content":"算法小白还在写砖块，结果一下拉就看到玉石，666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572850590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634890,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/4a/613d8ea7.jpg","nickname":"Zak","note":"","ucode":"40EF2AD4928530","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24294,"discussion_content":"很棒，理论需要和实际相结合~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570082836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311995,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","nickname":"小罗希冀","note":"","ucode":"88416458FF0041","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2784,"discussion_content":"牛逼牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563933205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066230,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/f6/60f948e1.jpg","nickname":"Aven","note":"","ucode":"E2B1D0B57F18D1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1397,"discussion_content":"这段话大部分我是赞同的，也是理解的。就是关于有一点不太明白，从平面空间坐标系中可以看得出来log(N)的时间复杂度是肯定优于N的时间复杂度的呀，为什么作者说不能直接判断log(N)一定优于N呢，真的不明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562598277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1577580,"avatar":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","nickname":"苏暮沉觞","note":"","ucode":"532B816D4EF47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066230,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/f6/60f948e1.jpg","nickname":"Aven","note":"","ucode":"E2B1D0B57F18D1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":3445,"discussion_content":"大0表示法表示的是一个算法的趋势。两个算法的好坏是要根据实际情况决定的，包括N的大小，算法的系数等，例如一个算法的时间复杂度是 1000*log(N)+1000，用大O表示法表示是O（log(N)），另一个算法的时间复杂度是N/1000，用大O表示法表示是O（N)）。那在N一定范围内，N/1000的效率是比1000*log(N)+1000高的。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1564481989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1397,"ip_address":""},"score":3445,"extra":""},{"author":{"id":1079152,"avatar":"https://static001.geekbang.org/account/avatar/00/10/77/70/466368e1.jpg","nickname":"杰森莫玛","note":"","ucode":"A29AEC27270657","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066230,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/f6/60f948e1.jpg","nickname":"Aven","note":"","ucode":"E2B1D0B57F18D1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":5680,"discussion_content":"我觉得是数据量小的时候","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566435818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1397,"ip_address":""},"score":5680,"extra":""},{"author":{"id":1133702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/86/3be94807.jpg","nickname":"angel😇txy🤓","note":"","ucode":"C0AEE0D8BAF7ED","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1066230,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/f6/60f948e1.jpg","nickname":"Aven","note":"","ucode":"E2B1D0B57F18D1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":6356,"discussion_content":"作者只是举个例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566868318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1397,"ip_address":""},"score":6356,"extra":""}]},{"author":{"id":1073306,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/9a/95a29f98.jpg","nickname":"Felix Yin","note":"","ucode":"39667D1772D0E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155,"discussion_content":"见解够深","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561195340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":27565,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1537921809,"is_pvip":false,"replies":[{"id":"9909","content":"总结的很棒","user_name":"作者回复","comment_id":27565,"uid":"1190123","ip_address":"","utype":1,"ctime":1537922615,"user_name_real":"gg"}],"discussion_count":38,"race_medal":0,"score":"5610765210385","product_id":100017301,"comment_content":"总结<br>一、什么是复杂度分析？<br>1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。<br>二、为什么要进行复杂度分析？<br>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。<br>三、如何进行复杂度分析？<br>1.大O表示法<br>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。<br>2.复杂度分析法则<br>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。<br>四、常用的复杂度级别？<br>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）<br>五、如何掌握好复杂度分析方法？<br>复杂度分析关键在于多练，所谓孰能生巧。","like_count":1306,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424949,"discussion_content":"总结的很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537922615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282816,"discussion_content":"复杂度分析法则\n1）单段代码看高频：比如循环。\n2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。\n3）嵌套代码求乘积：比如递归、多重循环等\n4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。\n\n这段很受用","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1592099387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025191,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/a7/85454287.jpg","nickname":"Byte_Panda","note":"","ucode":"20DE59CD988798","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35452,"discussion_content":"总觉得看下评论就行了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1571281936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070364,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/1c/61f30f21.jpg","nickname":"考拉","note":"","ucode":"347183CFECAC70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44024,"discussion_content":"数据结构和算法是让计算机有效的解决问题，不是单纯追求快、省。在时空允许的情况下，应追求简单、稳定！虽然目前大多数是在时空不鸲的情况下如何高效解决问题，但别忘了何谓好的数据结构与算法！老师的讲解会给一些初学者对这门课的理解造成偏差！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572923530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1025093,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","nickname":"拾迹","note":"","ucode":"38F367B77FF2D7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1070364,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/1c/61f30f21.jpg","nickname":"考拉","note":"","ucode":"347183CFECAC70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173124,"discussion_content":"嗯，你说的也有道理，只是角度不同而已。在实际工程中，要考虑的因素会有很多，不单是性能成本和空间成本。但是这门课我认为就是从各种角度帮你解决这两个成本怎么减少的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581831573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44024,"ip_address":""},"score":173124,"extra":""},{"author":{"id":1315126,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/36/04817bf7.jpg","nickname":"一亩三分地","note":"","ucode":"6EB0888BDC82DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1070364,"avatar":"https://static001.geekbang.org/account/avatar/00/10/55/1c/61f30f21.jpg","nickname":"考拉","note":"","ucode":"347183CFECAC70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237712,"discussion_content":"你就是传说中的杠精","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587179475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44024,"ip_address":""},"score":237712,"extra":""}]},{"author":{"id":2163901,"avatar":"","nickname":"livy","note":"","ucode":"04D639A75886E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308715,"discussion_content":"学习到如何做笔记了，牛","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601041847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1646248,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1e/a8/b6d901a6.jpg","nickname":"浮生","note":"","ucode":"2D3256F7595E1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7182,"discussion_content":"课代表呀~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567417571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2200851,"avatar":"https://static001.geekbang.org/account/avatar/00/21/95/13/8a68e5ee.jpg","nickname":"白夜","note":"","ucode":"1BC0500BE9C1CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308425,"discussion_content":"课代表就是不一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600949286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1739220,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI1MqK71ITCXdWAJ2W0L24hvYcv64sg1SwYFT6eB3EYnsdBhPymPXibz4ptWljlnrbao3ial5anicKZg/132","nickname":"Yifan","note":"","ucode":"EE866C96B3A54A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66264,"discussion_content":"感恩666","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575041873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48598,"discussion_content":"总结的太好了。666","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573495685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2436686,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2e/4e/bfaf21e2.jpg","nickname":"","note":"","ucode":"251664E1CD286C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387028,"discussion_content":"最佳课代表，优秀。学到了。继续加油总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087726,"avatar":"https://static001.geekbang.org/account/avatar/00/10/98/ee/9d162043.jpg","nickname":"文艺科技青年","note":"","ucode":"4801899BC41B13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374859,"discussion_content":"算法课代表，后面坚持啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621392109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2214714,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/RRpxhoBiatuCsoFzb9CPnETfqGcGM1UTvz4Fb8qrgMMqCFHeKKwiazKnofHS3p2FeTT9FUv6VJUy3dUtbGAhVhyQ/132","nickname":"yihh","note":"","ucode":"2C1475AFF88EDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372537,"discussion_content":"强呀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620370791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371563,"discussion_content":"彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619848597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985953,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4d/a1/b3b2aeeb.jpg","nickname":"安时","note":"","ucode":"C6AD2E230178A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371209,"discussion_content":"总结的是真的好 总结归纳真的是个了不起的能力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619684333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1262086,"avatar":"https://static001.geekbang.org/account/avatar/00/13/42/06/8eb34fe6.jpg","nickname":"王文建","note":"","ucode":"A540E30AB8B0AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1985953,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4d/a1/b3b2aeeb.jpg","nickname":"安时","note":"","ucode":"C6AD2E230178A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374332,"discussion_content":"1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621141365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":371209,"ip_address":""},"score":374332,"extra":""}]},{"author":{"id":2081401,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/c2/79/fbc18da4.jpg","nickname":"超斌hello","note":"","ucode":"DA41E2C19B51F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358446,"discussion_content":"这个总结比老师还到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615983858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800868,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","nickname":"发飙的蜗牛","note":"","ucode":"B2D96A2D0B6BA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336083,"discussion_content":"总结的很好，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608473985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2371810,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxyKrFpzicHoHK5tO1ca14BgpCrmHJ5czZAdN260JdTic5eMnPlt5nGO6yVLfZSy0QKMoe79hhGiaVQ/132","nickname":"想晴的天","note":"","ucode":"6C6584BF55CD75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335259,"discussion_content":"学习了，这笔记总结的太好了，我看下来觉得好像没多少内容，看了你的总结又学习不少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608131028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122286,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1f/ee/51c900ee.jpg","nickname":"liubh","note":"","ucode":"96C526560576A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303349,"discussion_content":"复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系  跟代码长度没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599213897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1392556,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3f/ac/abd79156.jpg","nickname":"helloworld","note":"","ucode":"9DCFCF6835A8E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301311,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598488333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622071,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/37/3e4ac0d9.jpg","nickname":"兴趣使然","note":"","ucode":"8219E197DF64ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288025,"discussion_content":"这就是课代表吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593615814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282815,"discussion_content":"同样是九年义务教育，为什么你那么优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592099359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1963868,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f7/5c/c6e2a516.jpg","nickname":"隐身要彻底","note":"","ucode":"8829434B7F875C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":241210,"discussion_content":"总结的到位👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587396218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898574,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f8/4e/3026516d.jpg","nickname":"一雄","note":"","ucode":"DB71F9125BEED5","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232519,"discussion_content":"总结得太好了，已抄，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586871576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1938739,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/95/33/7d4b08ec.jpg","nickname":"乐朦","note":"","ucode":"C5A666DB0521E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221058,"discussion_content":"课堂笔记 太优秀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585969594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240490,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ed/aa/67fbccda.jpg","nickname":"soulful","note":"","ucode":"93105631E8106A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217305,"discussion_content":"总结的太好了，三好学生","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585541229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1877436,"avatar":"","nickname":"张笛","note":"","ucode":"D25D1FF5489845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208571,"discussion_content":"抄作业，感谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584548726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507648,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/40/060c21e3.jpg","nickname":"口袋里的怀表","note":"","ucode":"2F9D4D75BA4F97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190568,"discussion_content":"我怀疑您是说相声的，怎么还有口诀呢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582960694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187523,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1e/c3/c9399b2e.jpg","nickname":"大飞","note":"","ucode":"DA641A3C6ECCFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100555,"discussion_content":"厉害，点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577269171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359878,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDuUeF7u9lAY3qmfKSfDBQzCJuveFVyIGE7D1PEI8ZQ1kTScwvRdruYHff0zpEnJWlsYicLlWGvcTg/132","nickname":"小虎","note":"","ucode":"66CCAB2C757B3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77527,"discussion_content":"总结的真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575905427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1531204,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5d/44/932645e3.jpg","nickname":"Thoms","note":"","ucode":"DF9E351162CC41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25313,"discussion_content":"总结的好，考试必考的点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570499850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593126,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/26/f21afb83.jpg","nickname":"暖色浮余生","note":"","ucode":"ED943F2DF88896","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23044,"discussion_content":"点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569747039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199091,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4b/f3/8b9df836.jpg","nickname":"jimmy","note":"","ucode":"9B93DCAB317572","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22870,"discussion_content":"课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569719146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1671321,"avatar":"https://static001.geekbang.org/account/avatar/00/19/80/99/8b332c43.jpg","nickname":"圈圈圆圆@。","note":"","ucode":"342B923218B2B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16134,"discussion_content":"写的确实很棒，前面听课有点懵，看了你的总结就懂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568872658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7c/b9/864afbed.jpg","nickname":"宋兵乙","note":"","ucode":"3C9C9572CD6ADB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6568,"discussion_content":"为什么你这么优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566978622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1499380,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6vz8MgZia6Xwdhayv9Jdnee7HfDYSAMTUtMAAVORMhiaN8bIM0QJibrQ5EDqB8o5pWE6FRuaqguwG86o5Gh90ruDw/132","nickname":"不会爬树的熊","note":"","ucode":"E417D8D9D5FED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1306,"discussion_content":"看完这个总结，这章可以跳过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562550591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27651,"user_name":"吕宁","can_delete":false,"product_type":"c1","uid":1248542,"ip_address":"","ucode":"5C36EFF6961E63","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/1e/7f2d5872.jpg","comment_is_top":false,"comment_ctime":1537926961,"is_pvip":false,"replies":[{"id":"9997","content":"比如8用二进制表示就是3个bit。16用二进制表示就是4个bit。以此类推 n用二进制表示就是logn个bit","user_name":"作者回复","comment_id":27651,"uid":"1190123","ip_address":"","utype":1,"ctime":1537938507,"user_name_real":"gg"}],"discussion_count":27,"race_medal":0,"score":"1573495957297","product_id":100017301,"comment_content":"老师好，我们上算法课，老师讲到存储一个二进制数，输入规模（空间复杂度）是O(logn) bit。请问如何理解？","like_count":366,"discussions":[{"author":{"id":1236527,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RRphehcOju6viaKMicXwhZATXZAT7I7zShCiaXB8icwtDk92lic7nyXK25upY3qI55Mt1jvviayQwicPFAjdeFkJxONJQ/132","nickname":"席尔","note":"","ucode":"697384FF090601","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180027,"discussion_content":"我的思路（主要从数学方面理解）：\n（1）他这里的输入规模指的是输入一个数，注意是一个，这个数（只讨论正整数）可以是0、1、2、...、n ，然后找出每个输入的数对应的空间大小，那么这里的映射关系就是我们要求的 “空间复杂度”。\n（2）\n输入                                                          占用空间大小（bit）\n0、1                                                  →            1\n2、3                                                  →            2       \n4、5、6、7                                       →            3\n8、9、10、11、12、13、14、15      →            4\n....                                                      →            ...\n.....................................................................n   →            m\n这里我们可以想到\n当我们输入小于等于1的数的时候，那么对应的占用的空间大小是1bit\n当我们输入小于等于3的数的时候，那么对应的占用的空间大小是2bit\n当我们输入小于等于7的数的时候，那么对应的占用的空间大小是3bit\n当我们输入小于等于15的数的时候，那么对应的占用的空间大小是4bit\n那么当我们输入小于等于n的数的时候，那么对应的占用的空间大小是多少呢？\n（3）由上述映射关系很容易知道\nn = (2^m) -1 \n那么m = log2 n+1  ，也就是当我输入一个任意小于等于n的数，那么其占用的空间大小即为log2 n+1\n（4）综上所述，存储一个二进制数，输入规模(空间复杂度)是O(logn) bit\n","likes_number":76,"is_delete":false,"is_hidden":false,"ctime":1582272493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1256428,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","nickname":"caohuan","note":"","ucode":"4B092E33F3DF1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236527,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RRphehcOju6viaKMicXwhZATXZAT7I7zShCiaXB8icwtDk92lic7nyXK25upY3qI55Mt1jvviayQwicPFAjdeFkJxONJQ/132","nickname":"席尔","note":"","ucode":"697384FF090601","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186543,"discussion_content":"解释的很清晰","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582690390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180027,"ip_address":""},"score":186543,"extra":""},{"author":{"id":2332598,"avatar":"https://static001.geekbang.org/account/avatar/00/23/97/b6/95263edc.jpg","nickname":"看，天空","note":"","ucode":"E9AF87587A8005","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236527,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RRphehcOju6viaKMicXwhZATXZAT7I7zShCiaXB8icwtDk92lic7nyXK25upY3qI55Mt1jvviayQwicPFAjdeFkJxONJQ/132","nickname":"席尔","note":"","ucode":"697384FF090601","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333080,"discussion_content":"强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607429222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180027,"ip_address":""},"score":333080,"extra":""},{"author":{"id":2628809,"avatar":"https://static001.geekbang.org/account/avatar/00/28/1c/c9/d325e025.jpg","nickname":"章蔚","note":"","ucode":"F83152DB5FFE97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236527,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RRphehcOju6viaKMicXwhZATXZAT7I7zShCiaXB8icwtDk92lic7nyXK25upY3qI55Mt1jvviayQwicPFAjdeFkJxONJQ/132","nickname":"席尔","note":"","ucode":"697384FF090601","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375252,"discussion_content":"您好，不知道“那么其占用的空间大小即为log2 n+1”\n怎么得到“（4）综上所述，存储一个二进制数，输入规模(空间复杂度)是O(logn) bit”，麻烦帮忙讲解一下，谢谢( •̥́ ˍ •̀ू )","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621553766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180027,"ip_address":""},"score":375252,"extra":""}]},{"author":{"id":1457551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/8f/4d1ffc7f.jpg","nickname":"Geek_麟凤来思","note":"","ucode":"7ADF5585765A42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625,"discussion_content":" 2^3= 8\n 2^4= 16\n 2^x= n\n--> x = log2n  = log22 * log2n \n--> O(log2n) = O(C * log2n) =  O(log2n) =  O(logn)","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1561817643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1690682,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/3a/f3054f3d.jpg","nickname":"测不准and不相容","note":"","ucode":"049DF78B8D3A6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1457551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/8f/4d1ffc7f.jpg","nickname":"Geek_麟凤来思","note":"","ucode":"7ADF5585765A42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24941,"discussion_content":"嗯，比较形象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570338320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625,"ip_address":""},"score":24941,"extra":""},{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1457551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/8f/4d1ffc7f.jpg","nickname":"Geek_麟凤来思","note":"","ucode":"7ADF5585765A42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373148,"discussion_content":"清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620631856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625,"ip_address":""},"score":373148,"extra":""}]},{"author":{"id":1159589,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b1/a5/424a2dcf.jpg","nickname":"扣扣羊","note":"","ucode":"57062CFC0C2A60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304734,"discussion_content":"我的理解: \n输入规模，是一个熵(可能性）的概念，而不是具体的数值。一个bit 表是数据的数据可能性是2 (0,1)；两个bit 表示的数据可能性是4(00,01,10,11)；三个bit表示的数据可能性是8(000,001,010,011,100,101,110,111)。那么数据规模为n的时候，就需要㏒n个bit 才能完整表示所有输入的可能。\n更具体来说，如果输入一个二进制数。可以是任意数，但的最大值为n。那么n的可能性(输入规模)就是n+1，需要用㏒n+1个bit 才能完整表示所有可能的输入，空间复杂度为㏒n+1，也就是㏒n(1是常量，忽略它)","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599650323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255043,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/83/56086536.jpg","nickname":"执念","note":"","ucode":"D888626F69B233","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52017,"discussion_content":"前8个数0-7用3bit,\n前16个数0-15用4bit，复杂度只是描述了一种趋势！","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1573983993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025093,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","nickname":"拾迹","note":"","ucode":"38F367B77FF2D7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173125,"discussion_content":"厉害了，老师说这种空间复杂度不常见，马上举出了一个例子，建议老师加到课程里面去，很经典！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1581831684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1646248,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1e/a8/b6d901a6.jpg","nickname":"浮生","note":"","ucode":"2D3256F7595E1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7184,"discussion_content":"存储一个二进制数，输入规模（空间复杂度）是O(logn) bit。是不是指存储8个数字的话，就是从0开始到111结束，所以是3bit？ 求大佬解惑","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567418082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1686477,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","nickname":"Cache","note":"","ucode":"B2DAC13FC4EE7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1646248,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1e/a8/b6d901a6.jpg","nickname":"浮生","note":"","ucode":"2D3256F7595E1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37092,"discussion_content":"是的，讲的是数据规模，而不是数值，数值的话，数字8，三比特是表示不出来的，而三比特可以表示八个数字，0—7，这就是数据的规模了。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1571499138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7184,"ip_address":""},"score":37092,"extra":""},{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1686477,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","nickname":"Cache","note":"","ucode":"B2DAC13FC4EE7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292022,"discussion_content":"分析的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595054396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37092,"ip_address":""},"score":292022,"extra":""},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1686477,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/cd/66f6c56e.jpg","nickname":"Cache","note":"","ucode":"B2DAC13FC4EE7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407299,"discussion_content":"看到&#34;数据的规模&#34;，瞬间就理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634972369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37092,"ip_address":""},"score":407299,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424986,"discussion_content":"比如8用二进制表示就是3个bit。16用二进制表示就是4个bit。以此类推 n用二进制表示就是logn个bit","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1537938507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4554,"discussion_content":"一个比特（bit）占一位，每个位有两个状态：0和1","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565537238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1137353,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/c9/933ee0a8.jpg","nickname":"冉野","note":"","ucode":"2CAEA424996876","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309,"discussion_content":"8的二进制表示不应你该是 1000 四个比特位么？？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1561442059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1137353,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/c9/933ee0a8.jpg","nickname":"冉野","note":"","ucode":"2CAEA424996876","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52360,"discussion_content":"8个规模的数吧 0-7","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574044327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309,"ip_address":""},"score":52360,"extra":""},{"author":{"id":1985298,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4b/12/cf361333.jpg","nickname":"Henry","note":"","ucode":"A259F2B1E939E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1137353,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/c9/933ee0a8.jpg","nickname":"冉野","note":"","ucode":"2CAEA424996876","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253996,"discussion_content":"应该是输入规模O(log2n)+1，但是空间复杂度忽略常数项，你看这样是不是好理解一点。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588264164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309,"ip_address":""},"score":253996,"extra":""}]},{"author":{"id":2745936,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e6/50/9aa48d74.jpg","nickname":"K.Chan","note":"","ucode":"567DBA855B8BD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550592,"discussion_content":"在我看来，二进制存储一个数，通常都可以使用2的n次方减去一个小于等于2的(n-1)次方的数,n表示的是bit位数，所以量级取最大的就是 2的n次方，然后得出空间复杂度为O（logn）；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644628295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2714938,"avatar":"https://static001.geekbang.org/account/avatar/00/29/6d/3a/9af556f3.jpg","nickname":"反转的钟","note":"","ucode":"41A4C0AFA673E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386296,"discussion_content":"归纳分析大法好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627521012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286231,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/57/8d6deacc.jpg","nickname":"陈彬","note":"","ucode":"17A57B581D682F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5946,"discussion_content":"这里的这个理解始终不太清晰，不是很明白，为什么8用二进制表示就是3个bit？3楼的回复并没有解释空间复杂度的原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566546911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1937343,"avatar":"","nickname":"ylxb","note":"","ucode":"E7600E6384946A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286231,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/57/8d6deacc.jpg","nickname":"陈彬","note":"","ucode":"17A57B581D682F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214527,"discussion_content":"3楼说的应该是3个bit能表示的数的个数是8，即表示数的规模是8，范围就是0-7这8个数，而数字8用二进制表示是1000","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1585203003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5946,"ip_address":""},"score":214527,"extra":""}]},{"author":{"id":1598771,"avatar":"https://static001.geekbang.org/account/avatar/00/18/65/33/a421b1cb.jpg","nickname":"星辰","note":"","ucode":"BE608F7E230A4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1245,"discussion_content":" 我也是这么理解 同求解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562463983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27507,"user_name":"芳芳","can_delete":false,"product_type":"c1","uid":1245220,"ip_address":"","ucode":"B50D78AB4BEDAF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiaSqyv7ic9yE0MqicxiaS1J5XOibqZxnLuKcPC5Aw33l49aicbegNJicdg5EsXXcOd6AF3F2QnOrbq7Z7g/132","comment_is_top":false,"comment_ctime":1537916237,"is_pvip":false,"discussion_count":19,"race_medal":0,"score":"1526251306317","product_id":100017301,"comment_content":"糟糕，是看不懂的感觉","like_count":355,"discussions":[{"author":{"id":1064482,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3e/22/51cef415.jpg","nickname":"六月有一个人","note":"","ucode":"8671C1228A0CA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107963,"discussion_content":"是心动啊，糟糕眼神躲不掉","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1577618755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1601085,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/3d/a4cfdf76.jpg","nickname":"王大伟","note":"","ucode":"4C7A0CDF2102F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6933,"discussion_content":"沉淀慢慢就懂了,还有那么多大佬的评论有助于理解","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1567180138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2229665,"avatar":"https://static001.geekbang.org/account/avatar/00/22/05/a1/2c631e12.jpg","nickname":"Zachariah","note":"","ucode":"B0AED2A3B91369","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322521,"discussion_content":"糟糕，是心动的感觉","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604758404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296243,"discussion_content":"不怕 多多看看","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596495723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2200851,"avatar":"https://static001.geekbang.org/account/avatar/00/21/95/13/8a68e5ee.jpg","nickname":"白夜","note":"","ucode":"1BC0500BE9C1CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308427,"discussion_content":"这个大学时候学过了，但是没有总结得这么完善，看了这篇文档真的受益匪浅啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600949586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286661,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/05/bcab944b.jpg","nickname":"猫小镇","note":"","ucode":"B315A7F41C210E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281953,"discussion_content":"还是没看懂logN","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591846913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":7,"child_discussions":[{"author":{"id":1837716,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/0a/94/736a4d51.jpg","nickname":"zhaoyou","note":"","ucode":"D6C5C26A989C02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286661,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/05/bcab944b.jpg","nickname":"猫小镇","note":"","ucode":"B315A7F41C210E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284790,"discussion_content":"这个还是比较简单的呀，复习下对数概念","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592640355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281953,"ip_address":""},"score":284790,"extra":""},{"author":{"id":1310355,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fe/93/f34a25b5.jpg","nickname":"剑客","note":"","ucode":"F2B48BFB5F0006","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286661,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/05/bcab944b.jpg","nickname":"猫小镇","note":"","ucode":"B315A7F41C210E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286398,"discussion_content":"while(i<n){i=i*2;},就是每次循环，i都乘以个2，变成了2i,4i,8i,16i，终止条件是：此时的i >= n。一句话说，就是i乘以多少个2，会大于等于n。多少呢，数学表示就是log2n~~~~i = i*3同理，那个log3n = log32*log2n，查下换底公式就明白了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1593161204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281953,"ip_address":""},"score":286398,"extra":""},{"author":{"id":1805565,"avatar":"","nickname":"邵丹丹","note":"","ucode":"54BA126D68ABC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286661,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a2/05/bcab944b.jpg","nickname":"猫小镇","note":"","ucode":"B315A7F41C210E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290856,"discussion_content":"哈哈，是不是文科生呀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594626239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281953,"ip_address":""},"score":290856,"extra":""}]},{"author":{"id":1085462,"avatar":"https://static001.geekbang.org/account/avatar/00/10/90/16/41832738.jpg","nickname":"suli","note":"","ucode":"7CA58F77091B30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218407,"discussion_content":"多看几遍就懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585655423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1916654,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3e/ee/82c2ef12.jpg","nickname":"是海港呀","note":"","ucode":"32AD09DB7B1F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211346,"discussion_content":"讲的还是很好的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584842651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301928,"discussion_content":"要有一定的变成代码基础，例如看懂基本的循环等，再来看会很容易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598710040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1978464,"avatar":"","nickname":"聂朝宇","note":"","ucode":"5F9DECC9A313BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301387,"discussion_content":"对数级，效率处于常量级与线性级之间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598512282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1089575,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/27/32abff71.jpg","nickname":"车明轩","note":"","ucode":"F194EB0060D25D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256490,"discussion_content":"过两天再看一遍，结合作者代码看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588486403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232037,"discussion_content":"这是基础吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586847009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27682,"user_name":"realEago","can_delete":false,"product_type":"c1","uid":1108495,"ip_address":"","ucode":"CD9F6AD57ACDD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/0f/9a7004e5.jpg","comment_is_top":false,"comment_ctime":1537929034,"is_pvip":false,"replies":[{"id":"9982","content":"说的太好了 我这里也没葵花宝典 学还是得靠自己","user_name":"作者回复","comment_id":27682,"uid":"1190123","ip_address":"","utype":1,"ctime":1537937947,"user_name_real":"gg"}],"discussion_count":8,"race_medal":0,"score":"667257859914","product_id":100017301,"comment_content":"看不懂别慌，也别忙着总结，先读五遍文章先，无他，唯手熟尔~","like_count":155,"discussions":[{"author":{"id":1984068,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDCEibaYsiaaLHH440T8ibzvR0ibqeNuNpmm7qE2iaehpL7AU0QQ4EvHtC0UC0zuB0qIuIRYEibyUrZ8lQ/132","nickname":"Fozei","note":"","ucode":"C9004B1FED8749","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273392,"discussion_content":"书读百遍，其义自见，我看不懂的时候，就问自己，读够一百遍了吗～～～我也真是～～～","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590454281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425001,"discussion_content":"说的太好了 我这里也没葵花宝典 学还是得靠自己","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1537937947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2708062,"avatar":"","nickname":"Geek_20bf23","note":"","ucode":"A4BC7B8DD16A2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396678,"discussion_content":"无他，但手熟尔。康肃忿然曰，尔安敢轻吾射！翁曰，以我酌油知之。乃取一葫芦置于地，以钱覆其口","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632475422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000417,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","nickname":"sam","note":"","ucode":"8D48F4B9045947","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281485,"discussion_content":"看到你的这条留言， 我就不慌了😝","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591752565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585759,"avatar":"","nickname":"Geek_22267a","note":"","ucode":"BE3821E804BAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1955,"discussion_content":"辟邪剑谱最好哈哈😄","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563120482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1585759,"avatar":"","nickname":"Geek_22267a","note":"","ucode":"BE3821E804BAD6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373150,"discussion_content":"《辟邪剑谱》是林远图根据《葵花宝典》残本所悟，自创的一套剑法，两者系出同源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620632089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1955,"ip_address":""},"score":373150,"extra":""}]},{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579320,"discussion_content":"姐妹，有内推吗，没有的话，缺男朋友吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657351808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1601085,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/3d/a4cfdf76.jpg","nickname":"王大伟","note":"","ucode":"4C7A0CDF2102F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6934,"discussion_content":"这样我就不慌了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567180185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27473,"user_name":"二三子也","can_delete":false,"product_type":"c1","uid":1245787,"ip_address":"","ucode":"69C7D86583277D","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/5b/ce326cfc.jpg","comment_is_top":false,"comment_ctime":1537891936,"is_pvip":false,"replies":[{"id":"9900","content":"嗯嗯 我联系运营加上","user_name":"作者回复","comment_id":27473,"uid":"1190123","ip_address":"","utype":1,"ctime":1537918956,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"439624556128","product_id":100017301,"comment_content":"老师，代码片段把行号也写上吧。","like_count":102,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424921,"discussion_content":"嗯嗯 我联系运营加上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537918956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27506,"user_name":"起名好难","can_delete":false,"product_type":"c1","uid":1231059,"ip_address":"","ucode":"089DE7D2F50DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/c8/d3/16b45d58.jpg","comment_is_top":false,"comment_ctime":1537916033,"is_pvip":false,"replies":[{"id":"9899","content":"理解的非常透彻 非常有逻辑性 很赞。ps 图画错了 我联系运营改下","user_name":"作者回复","comment_id":27506,"uid":"1190123","ip_address":"","utype":1,"ctime":1537918847,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"358020201601","product_id":100017301,"comment_content":"文章里也说了，性能测试这种是受环境所影响的。作为程序员，我们能做的就是尽可能的降低复杂度，才能让代码在不同的环境下以最快的效率执行。至于是不是浪费时间，我觉得其实是个伪命题。首先按刚刚分析过程来看，通过熟悉练习，简单的代码是可以直接看出来复杂度的也就是不费时间；而比较复杂的代码就容易“一不小心”太“复杂”了，这个时候，为了代码质量考虑分析复杂度的时间也并不浪费。再有甚者，我们学习这个分析法，我觉得更多的是要明白这个理念，在写代码的时候就能关注一下这方面的问题，毕竟复杂的代码在写的过程往往是先分析整体逻辑结构的，并且写的过程也需要不断思考，了解这个理念后才能在写的过程中也思考关注这个点。不然，复杂的一段代码一旦写成，日后因为性能问题重构，更费时间。<br><br>以上是对课后题的思考，欢迎批评指正☺。<br>另: 感觉加法法则那个图，maxf(n)+g(n) 换成max(f(n)+g(n))会不会更好些？","like_count":83,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424930,"discussion_content":"理解的非常透彻 非常有逻辑性 很赞。ps 图画错了 我联系运营改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537918847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1902239,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/06/9f/5a6e5f17.jpg","nickname":"米饭噗噗","note":"","ucode":"9E7AECF01CE84C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352504,"discussion_content":"重构更废时间说到点子上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614757427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27860,"user_name":"scarlett","can_delete":false,"product_type":"c1","uid":1104937,"ip_address":"","ucode":"F30414146C709F","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/29/33d0d7ff.jpg","comment_is_top":false,"comment_ctime":1537957064,"is_pvip":false,"replies":[{"id":"10077","content":"👍 分析的通俗易懂 棒棒哒","user_name":"作者回复","comment_id":27860,"uid":"1190123","ip_address":"","utype":1,"ctime":1537972457,"user_name_real":"gg"}],"discussion_count":12,"race_medal":0,"score":"349430308040","product_id":100017301,"comment_content":"回答 thinkings 的问题<br>i=1; <br>while (i &lt;= n) {<br>i = i * 2<br>}<br>假设n= 20，i每次的取值是2  4  8  16 执行4次，时间复杂度是O(log2n)<br>i=1; <br>while (i &lt;= n) {<br>i = i + 2<br>}<br>假设 n=20 i每次取值：3，5，7，9，11，13，15，17，19 ，执行9次，时间复杂度是O(n&#47;2),根据老师讲的 公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略，所以是O（n）","like_count":81,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425061,"discussion_content":"👍 分析的通俗易懂 棒棒哒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2723576,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqepI5hGHjU3fP8yVIicUq7gYRZfR3PoDCMQqd2ia8CmCSa1mIIf6OYGFjbW28RCXmrJQ/132","nickname":"Geek_aef4be","note":"","ucode":"F1C3F2AE3CCA0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386891,"discussion_content":"那如果while(i<=20),这样的代码是不是就是时间复杂度就是O(1)了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627879400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2245428,"avatar":"https://static001.geekbang.org/account/avatar/00/22/43/34/d7b34bbf.jpg","nickname":"崔嵬","note":"","ucode":"A4E2DE6E2E54B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324279,"discussion_content":"懂了，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605085445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795769,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/66/b9/52e303cf.jpg","nickname":"小吴大人","note":"","ucode":"4187A1E3AFCE84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288705,"discussion_content":"这哥代码里，如果n在代码里面是个常量，是不是复杂度就变成O(1)了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593845231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1744708,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlicKgCNuhqMq0ET6ubAU9uQho9icKBWQxAseKBmk4QtAopiatBnP2QavM2dYVIxDtPLWnhwvlejyHA/132","nickname":"Geek_d0fe67","note":"","ucode":"9680C17ECAAB0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1795769,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/66/b9/52e303cf.jpg","nickname":"小吴大人","note":"","ucode":"4187A1E3AFCE84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290534,"discussion_content":"我认为是的，如果n是常量，不再随n的增长，而时间复杂度增长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594526469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288705,"ip_address":""},"score":290534,"extra":""}]},{"author":{"id":2028396,"avatar":"","nickname":"Geek_1663d2","note":"","ucode":"A453DBF3A40284","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282377,"discussion_content":"第二个while会执行10次，到i=21停止，次数=n/2，时间复杂度=O(n/2)=O(n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591957331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025195,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a4/ab/7d076dc1.jpg","nickname":"ted","note":"","ucode":"5F094E0AE45944","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40196,"discussion_content":"请问一下，根据条件，n= 20的时候，i=i*2应该被执行了5次啊，i每次的计算结果是2 4 8 16 32","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572102681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541677,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/2d/2e834f0f.jpg","nickname":"Alex","note":"","ucode":"926B84795C3657","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30819,"discussion_content":"为什么假设 n=20 i每次取值：3，5，7，9，11，13，15，17，19 ，执行9次，时间复杂度是O(n/2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570863026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1541677,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/2d/2e834f0f.jpg","nickname":"Alex","note":"","ucode":"926B84795C3657","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44904,"discussion_content":"3+(0*2)  3+(1*2)  3+((x-1)*2)=n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572972461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30819,"ip_address":""},"score":44904,"extra":""},{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1541677,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/2d/2e834f0f.jpg","nickname":"Alex","note":"","ucode":"926B84795C3657","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44906,"discussion_content":"x=(n-3)/2+1 ^忽略系数n/2","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572972571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30819,"ip_address":""},"score":44906,"extra":""},{"author":{"id":1800141,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/77/cd/6cf5c666.jpg","nickname":"Re-Mac","note":"","ucode":"9BEB6F65806764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1541677,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/2d/2e834f0f.jpg","nickname":"Alex","note":"","ucode":"926B84795C3657","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114122,"discussion_content":"等差数列，a1=1，公差为2，执行的次数为x，即2x-1=n，那么x=(n+1)/2，系数忽略即是n/2","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577959094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30819,"ip_address":""},"score":114122,"extra":""}]}]},{"had_liked":false,"id":27835,"user_name":"有一天","can_delete":false,"product_type":"c1","uid":1249817,"ip_address":"","ucode":"4EDEE04C62C5B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/19/32bd8b9a.jpg","comment_is_top":false,"comment_ctime":1537952559,"is_pvip":false,"replies":[{"id":"10082","content":"不是英文缩写 就是一个数学符号而已","user_name":"作者回复","comment_id":27835,"uid":"1190123","ip_address":"","utype":1,"ctime":1537975140,"user_name_real":"gg"}],"discussion_count":14,"race_medal":0,"score":"272120892207","product_id":100017301,"comment_content":"一直有一个很纠结的问题，烦请解答一下：O具体是哪一个英文字母的缩写？","like_count":63,"discussions":[{"author":{"id":1665297,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/11/1def252c.jpg","nickname":"都城门外","note":"","ucode":"76E90647FC0032","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261704,"discussion_content":"大O符号（Big O notation）是用于描述函数渐进行为的数学符号。更确切地说，它是用另一个（通常更简单的）函数来描述一个函数数量级的渐近上界。在数学中，它一般用来刻画被截断的无穷级数尤其是渐近级数的剩余项；在计算机科学中，它在分析算法复杂性的方面非常有用。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1588994906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143406,"avatar":"","nickname":"lqhcp123","note":"","ucode":"5758F441A3A5E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367742,"discussion_content":"同上，大O是描述函数渐进行为的数学符号。更确切地说，它是用另一个（通常更简单的）函数来描述一个函数数量级的渐近上界。此外还有渐进下界，渐进上下界\n\nΘ渐进上下界 （theta）\nO渐进上界（最坏情况）\nΩ渐进下界（最好情况）（omega）","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1618457025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186115,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/43/226ca347.jpg","nickname":"Michael 🛡YZY","note":"","ucode":"F1D2BF8489A7D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3935,"discussion_content":"The letter O is used because the growth rate of a function is also referred to as the order of the function. Refer to: https://en.wikipedia.org/wiki/Big_O_notation","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1564989669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234716,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/1c/f0993d6c.jpg","nickname":"LEO","note":"","ucode":"F78463C0F2753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287025,"discussion_content":"在下数学系的学生 觉得这个大O符号可能时来源于数学分析里面的 同阶无穷小符号. 都是用一个大写的O表示. 而数学中的这个大O就是 order of 的含义.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593349924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425053,"discussion_content":"不是英文缩写 就是一个数学符号而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1537975140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1376195,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epo2nlYjsB8CksibIiaeibT0bRicuAYJnOzaIciaf7VMC96icbPvWicrQhgApD2edkSXHacMrU3EFhJsVFOQ/132","nickname":"pingping","note":"","ucode":"D51C979AD0560D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342231,"discussion_content":"这几个O看不懂，算法还有办法学么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610621275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2332598,"avatar":"https://static001.geekbang.org/account/avatar/00/23/97/b6/95263edc.jpg","nickname":"看，天空","note":"","ucode":"E9AF87587A8005","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333083,"discussion_content":"学到了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607429368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153719,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","nickname":"悟者","note":"","ucode":"B50C8FF5CDE045","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301813,"discussion_content":"O 就像一个闹钟一样，也看起来想一个被圈起来的空间， 闹钟代表的是时间，而时间和空间在生活中是复杂的，所以要一步一步去分析，就 时间复杂度和空间复杂度， 但是这个复杂度是渐渐变化的， 又可以说是 渐进时间复杂度和渐进空间复杂度，希望这样可以帮助到你从另外一个角度去理解，当然老师的讲解为基础. 我的观点只是说希望可以帮助到理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598669256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543652,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/e4/1137270e.jpg","nickname":"Aaron","note":"","ucode":"7679D1B911FC3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232833,"discussion_content":"Order","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586877828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1807718,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/95/66/7c78b3a6.jpg","nickname":"董文之一凯","note":"","ucode":"559CEAEFA09F1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413593,"discussion_content":"希腊字母Omega吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636519154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200275,"avatar":"https://static001.geekbang.org/account/avatar/00/12/50/93/dfc3c214.jpg","nickname":"肉球明晖","note":"","ucode":"E5E3CAED3A1029","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349009,"discussion_content":"我也困惑了很久，看同学们的回复，认同Order","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612846068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233106,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/d2/1f67739b.jpg","nickname":"Anita🍭","note":"","ucode":"D25171BC08C10A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290125,"discussion_content":"Order","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594350242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","nickname":"Purson","note":"","ucode":"5F0C1BB3C0C0A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177248,"discussion_content":"omiga","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582088758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1137353,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/c9/933ee0a8.jpg","nickname":"冉野","note":"","ucode":"2CAEA424996876","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306,"discussion_content":"Open 哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561440697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27495,"user_name":"Geek_242743","can_delete":false,"product_type":"c1","uid":1014007,"ip_address":"","ucode":"69EF72216E1ABD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/f7/766f23c7.jpg","comment_is_top":false,"comment_ctime":1537896060,"is_pvip":false,"replies":[{"id":"9897","content":"i 第一次等于1<br>第2次等于2<br>第3次等于2*2<br>第4次等于2*2*2<br>.....<br>第x次等于2的x-1次方<br>……<br>那第几次之后等于n呢<br><br>也就是2的x-1次方等于n求解x<br><br>x粗略点讲就近似于logn<br><br>也就是代码执行了logn遍就退出循环了<br><br>所以根据大o标记法 为logn<br><br><br><br>","user_name":"作者回复","comment_id":27495,"uid":"1190123","ip_address":"","utype":1,"ctime":1537917594,"user_name_real":"gg"}],"discussion_count":7,"race_medal":0,"score":"220581228156","product_id":100017301,"comment_content":"没有看懂，所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2x=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。   这里的x不就是代码里的n吗，时间复杂度不是O(n)吗？","like_count":51,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424925,"discussion_content":"i 第一次等于1\n第2次等于2\n第3次等于2*2\n第4次等于2*2*2\n.....\n第x次等于2的x-1次方\n……\n那第几次之后等于n呢\n\n也就是2的x-1次方等于n求解x\n\nx粗略点讲就近似于logn\n\n也就是代码执行了logn遍就退出循环了\n\n所以根据大o标记法 为logn\n\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537917594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645123,"avatar":"","nickname":"Geek_22b259","note":"","ucode":"4573121E6B305F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8201,"discussion_content":"因为退出循环的条件是i=n，所以我们要求i什么时候等于n，即2^x=n时x的值，求出的x即是代码执行的次数，也就是时间复杂度","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1567827815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2138640,"avatar":"https://static001.geekbang.org/account/avatar/00/20/a2/10/343ad64c.jpg","nickname":"苜苜","note":"","ucode":"CAF9288B550C33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320514,"discussion_content":"这个的关键点在于：i = i * 2，如果i = i +1的话复杂度就是O(n)，因为是以1递进的，如果是i = i * 2的话是以2的次方递进的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604388305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971003,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/13/3b/1c2a8d32.jpg","nickname":"superhu0","note":"","ucode":"391A93711EF549","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270464,"discussion_content":"当数值小于n时，就跳出循环了。所以这里要计算在n这个数值内，程序循环了多少遍？比如n取20时，程序分别在2、4、8、16上循环了一遍，共4次，也就是大概log20（以2为底）次，log20（以2为底）大概就是4。推广到n，就是logn","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590019502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224862,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b0/9e/ff642ba0.jpg","nickname":"Eddie","note":"","ucode":"B653E943B7881C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40559,"discussion_content":"同时取log 得到log2^x = logn => x*log2 = logn => x = logn","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572235068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1482166,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9d/b6/8a9d2a64.jpg","nickname":"言凡","note":"","ucode":"80EB2A53B69D1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5525,"discussion_content":"我们求解的时间复杂度应该是根据输入 n  运行了几次。在这个循环中我们要执行2的x-1次等于n，那么输入n要运行几次就是logn次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566345475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1607835,"avatar":"https://static001.geekbang.org/account/avatar/00/18/88/9b/32df8d51.jpg","nickname":"超🌱🐏","note":"","ucode":"2F27250E801DEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4732,"discussion_content":"同問","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565691454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27500,"user_name":"YourSweetHeart","can_delete":false,"product_type":"c1","uid":1242122,"ip_address":"","ucode":"38843F447B03F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","comment_is_top":false,"comment_ctime":1537902555,"is_pvip":false,"replies":[{"id":"9893","content":"因为两层循环 一层是n 两层是n*n。不信你自己令n=5 自己算算","user_name":"作者回复","comment_id":27500,"uid":"1190123","ip_address":"","utype":1,"ctime":1537916958,"user_name_real":"gg"}],"discussion_count":8,"race_medal":0,"score":"203401365467","product_id":100017301,"comment_content":"第二个例子中，第6.7行为什么是2n平方遍而不是n平方遍呢？","like_count":47,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424927,"discussion_content":"因为两层循环 一层是n 两层是n*n。不信你自己令n=5 自己算算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537916958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1626129,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d0/11/eb091bc9.jpg","nickname":"涛涛之海","note":"","ucode":"9EC072C949BD43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359244,"discussion_content":"差点带偏，是按行的，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n2遍，所以需要 2n2","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616149467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623347,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/33/8889014b.jpg","nickname":"编程海中的🐟","note":"","ucode":"3EB9ADD94F4093","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30125,"discussion_content":"要得出正确答案，是有一个前置条件，for 括号里面执行的语句算一行代码时间，好了，我先排除内部第二层for的干扰 令第二层整个for循环时间为A，那么T（n）= 3  + 2n + n * A,现在把A展开 A = 2 * n，现在的T（n ） 3 + 2n + n * （2n)，整理后 T(N) = 3+2n+2n * n，以上，希望能帮助到诱惑的人。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570800984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201538,"avatar":"https://static001.geekbang.org/account/avatar/00/12/55/82/b25071de.jpg","nickname":"daryl","note":"","ucode":"B88F39A8D4DDB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76098,"discussion_content":"我觉得应该是 3n ^ 2，因为 for 里面其实是两个语句不是么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575809530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1677237,"avatar":"https://static001.geekbang.org/account/avatar/00/19/97/b5/431b2561.jpg","nickname":"络石","note":"","ucode":"B0FCF8156EB2AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58300,"discussion_content":"一行语句是n的平方，这里for这一行也算一行语句，他们是同步操作的。在n平方的基础上乘以2就是。 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574666700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340128,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8m96uYNX9WcJLXJGic3F9StzdjPyZhKW0RzpvYkVfgsuM9q4GuCSvJ5rslJgClEJg3ImXUEHXkbmNxmrAOiaxKtw/132","nickname":"don","note":"","ucode":"82BACA83063B57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14124,"discussion_content":"第6行是n平方遍，第7行也是n平方遍，两行的遍数相加就是2n平方遍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568728346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1384381,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1f/bd/04100cb4.jpg","nickname":"困到清醒","note":"","ucode":"1CD20C408C0BC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7611,"discussion_content":"我也是同样的疑惑，写了程序输出，也是有5+25次呀，有没有人能讲解一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567585162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1626129,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d0/11/eb091bc9.jpg","nickname":"涛涛之海","note":"","ucode":"9EC072C949BD43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1384381,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1f/bd/04100cb4.jpg","nickname":"困到清醒","note":"","ucode":"1CD20C408C0BC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":359245,"discussion_content":"不是看输出的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616149480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7611,"ip_address":""},"score":359245,"extra":""}]}]},{"had_liked":false,"id":27483,"user_name":"最爱小黑黑","can_delete":false,"product_type":"c1","uid":1234669,"ip_address":"","ucode":"E28A847B7A6D95","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/ed/8afdc5b2.jpg","comment_is_top":false,"comment_ctime":1537893496,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"186221487224","product_id":100017301,"comment_content":"睡前刷一遍 明早起来再细看一遍 加油各位！","like_count":43,"discussions":[{"author":{"id":1723565,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4c/ad/bdf56999.jpg","nickname":"HyperF","note":"","ucode":"02CAF213299EE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61667,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574782205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1723565,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4c/ad/bdf56999.jpg","nickname":"HyperF","note":"","ucode":"02CAF213299EE7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256355,"discussion_content":"？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588473834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":61667,"ip_address":""},"score":256355,"extra":""}]}]},{"had_liked":false,"id":27640,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1537926253,"is_pvip":false,"replies":[{"id":"9938","content":"理解的很透彻！","user_name":"作者回复","comment_id":27640,"uid":"1190123","ip_address":"","utype":1,"ctime":1537928591,"user_name_real":"gg"}],"discussion_count":5,"race_medal":0,"score":"181926552685","product_id":100017301,"comment_content":"本节通读两遍，通俗易懂，对复杂度的概念有了新的认识。<br>复杂度就是用来分析算法执行效率与数据规模之间增长关系。<br>思考题，性能测试与复杂度分析不冲突，原因如下：<br>1、性能测试是依附于具体的环境，如SIT、UAT机器配置及实例数量不一致结果也有差别。<br>2、复杂度分析是独立于环境的，可以大致估算出程序所执行的效率。<br>3、将复杂度熟记于心，能够写出更高效率、更好性能的代码。若某接口通过性能测试，达不到预期，还可以用复杂度分析接口代码，找出最影响性能的代码，进行优化。<br><br>每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？<br>这个问题分两种情况讨论<br>1、开发过程中，码代码的过程中就能得出其复杂度，这并不会太多的浪费时间，同时只有分析了每段代码的复杂度，才能估算出它们的执行效率。<br>2、优化代码时，只有在分析每段代码的复杂度后，才能定位问题代码，才能做相应优化<br><br>另外提出两个问题：<br>1、评论太多，也无法进行关键字搜索，一般没有时间爬楼全部看完，导致不同学友提出一样的问题<br>2、评论太多，可能有些评论不正确，需要官方确认正确与否，以免误导学友。<br><br><br>","like_count":42,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424979,"discussion_content":"理解的很透彻！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0f/1e/6b6eb987.jpg","nickname":"我们在路上","note":"","ucode":"0DB77DB7C64C47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392214,"discussion_content":"我也表示评论太多，看不完","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630908863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143406,"avatar":"","nickname":"lqhcp123","note":"","ucode":"5758F441A3A5E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367743,"discussion_content":"同意最后的两点问题，需要官方管理评论，挑出优质评论，纠正评论中的错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618457487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242665,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f6/29/9377f607.jpg","nickname":"贫穷保护了我的隐私","note":"","ucode":"6F45B4605B87A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187602,"discussion_content":"？说的啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582743570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1607835,"avatar":"https://static001.geekbang.org/account/avatar/00/18/88/9b/32df8d51.jpg","nickname":"超🌱🐏","note":"","ucode":"2F27250E801DEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4882,"discussion_content":"張學友表示：？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565791078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28119,"user_name":"huangjh","can_delete":false,"product_type":"c1","uid":1235879,"ip_address":"","ucode":"A84144E3F8B041","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/a7/eab461f0.jpg","comment_is_top":false,"comment_ctime":1538010173,"is_pvip":false,"replies":[{"id":"10106","content":"简洁到位！","user_name":"作者回复","comment_id":28119,"uid":"1190123","ip_address":"","utype":1,"ctime":1538010286,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"130387029053","product_id":100017301,"comment_content":"有必要，性能测试更多的是一种实验结果。而复杂度分析，可以帮助我们分析内因。","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425147,"discussion_content":"简洁到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538010286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34130,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1540014064,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"121799098352","product_id":100017301,"comment_content":"阅后留痕<br><br>先说三点感受：<br>1：王争老师的算法功力真是深厚，能化繁为简，能把复杂的东西简单化<br>2：栏中高手如云，延迟学习的好处也是极大的，能看到各种声音，有些言简意赅，直至本质<br>3：订阅这个专栏时也订阅了其他的，其他的结束才来跟进这个，为此还放弃了另外一个，王老师讲解的算法通俗易懂，妙趣横生，我相信这次一定收益匪浅，今天是周六，我希望这个周末能补上拉下的课程（当然，不明白的还是要反复学习的，看精选留言也受益良多）<br><br>回归初心<br>1：为什么王老师要开设这个专栏？<br>     为了提高国内编程水平的高度<br>2：为什么我要学习这个专栏？<br>     为了提高自身编程的水平<br>3：为什么我要提高自身编程的水平？<br>     为了更高的职级、更好的待遇、更多的选择。。。<br>4：为什么我的水平高了，公司肯给我更高的职级和待遇？<br>     为了公司程序运行的更快、更好、更稳定，为了提供更好的服务，赚更多的钱，<br>     公司间的竞争、国家间的竞争，都在拼速度、拼效率，从大往小了去落实就落到了我们每个人的身上了，就落到我们每个人的工作效率上了，程序员通过构建程序来和电脑打交道，程序的效率就非常的重要了。<br>5：那么问题来了，怎么评价一段代码的好坏呢？<br>     完成同样的功能，理解起来更简单、执行起来更快、消耗的资源更少，那就是好程序，那就能节省成本，提高竞争力。我们学习数据结构和算法就是为了写出这样的高效程序，而复杂度分析这个知识就是用于衡量一个算法是好是坏？是快是慢？是优是劣？的一个理论工具。<br><br>6：复杂度分析的工具，有两个<br>一个是时间复杂度，也叫做渐进时间复杂度，因为它表示的含义是：代码执行时间随数据规模增长的变化趋势<br>另一个是空间复杂度，也叫做渐进空间复杂度，因为它所表示的含义是：代码执行空间随数据规模之间的变化趋势<br>这里的核心变量是数据规模，关注趋势有两个一个是时间、一个是空间，一个算法随着数据规模的增长，所用时间的变化趋势越平稳，所用空间的变化趋势越平稳，我们则认为这样的算法是牛逼的算法高效的算法。<br><br>那怎么表示数据规模的增长和时间、空间的变化趋势哪？<br>使用图表形象直观最好不过了，怎么画这些图表呢？数学公式是可以转换为图表的，那就用数学公司吧！不过应该使用那些数据公式呢？当然是使用那些能表现变化趋势，又能直指变化趋势本质的数学公式了，当然，变化趋势这个含义是一定要表现出来的，于是就选择了O表示法，O的本质含义是：同阶无穷大<br>常见的时间复杂度按数量级递增，如下：<br>1）常量级 O(1) 随着数据规模n增大，对应算法的时间复杂度不变<br>2）对数级 O(logn) 随着数据规模n增大，对应算法的时间复杂度成对数曲线logn变化<br>3）线性级 O(n) 随着数据规模n增大，对应算法的时间复杂度成线性曲线n变化<br>4）线性对数级 O(nlogn) 随着数据规模n增大，对应算法的时间复杂度成线性对数曲线nlogn变化<br>5）平方级 O(n^2) 随着数据规模n增大，对应算法的时间复杂度成平方级n^2变化<br>6）立方级 O(n^3) 随着数据规模n增大，对应算法的时间复杂度成立方级n^3变化<br>7）K此方级 O(n^k) 随着数据规模n增大，对应算法的时间复杂度成n^k次方级变化<br>8）指数级 O(2^n) 随着数据规模n增大，对应算法的时间复杂度成2^n次方级变化<br>9）阶乘级 O(n!) 随着数据规模n增大，对应算法的时间复杂度成n!阶乘级变化<br><br>常见的空间复杂度按数量级递增，如下：<br>1）常数级 O(1)  随着数据规模n增大，对应算法的空间复杂度不变<br>2）线性级 O(n)  随着数据规模n增大，对应算法的空间复杂度成线性曲线n变化<br>3）平方级 O(n^2)  随着数据规模n增大，对应算法的空间复杂度成立方曲线n^2变化<br><br>时间复杂度和空间复杂度这些O表示法都是怎么推出来的呢？<br>一段代码的总执行时间=这段代码所有行的执行时间（循环行，可以通过拉平的方式来统计，换言之：所有代码的执行时间与每行代码的执行次数n成正比）<br><br>T(n)=O(f(n))<br>T(n) 表示代码执行的时间；<br>n 表示数据规模的大小；<br>f(n) 表示每行代码执行的次数总和。因为它是一个公式，所以用 f(n) 来表示。<br>公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。表示代码的执行时间随数据规模的增长的变化趋势<br><br>核心思想是：仅关注数据规模的增长和所执行时间、所使用空间的变化关系，假设软硬件环境等其他因素完全一致，并且在数据规模n无限增长的极限情况，忽略低阶、常量、系数，这些不影响变化趋势的细枝末节，使用变化的最大趋势，表示变化趋势即可。<br>这种方式，简单、快捷、不依赖环境和待测数据的情况，能粗略的反应算法的性能。<br>计算时间复杂度的原则：<br>1）关注最多循环<br>2）加法法则<br>3）乘法法则<br><br>","like_count":28,"discussions":[{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579906,"discussion_content":"太能拍了，老师都听不下去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657767559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575842,"discussion_content":"居然还能上升到国家战略层面上，这是我没有想到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655134478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27547,"user_name":"冯剑","can_delete":false,"product_type":"c1","uid":1180833,"ip_address":"","ucode":"C22CAC2021A485","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/a1/99aca569.jpg","comment_is_top":false,"comment_ctime":1537920962,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"121797005250","product_id":100017301,"comment_content":"在分析多项式复杂度的时候，有根据输入规模确定复杂度O(m+n),我的理解是 假设n是相对比较大的值，那么这个复杂度O(m+n)&lt;=O(2n)，2是常量，这样的话复杂度不就是O(n),请问下，O(n)和O(m+n)的区别在什么地方？有什么应用场景能体现出二者不同","like_count":28,"discussions":[{"author":{"id":1631207,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e3/e7/a20443ae.jpg","nickname":"二十九","note":"","ucode":"7F37D06CA99DB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5072,"discussion_content":"时间复杂度分析是执行时间随数据增长量的变化趋势，这里m和n算是两个趋势，两个变量，所以要写两个。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1565924398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324647,"discussion_content":"当m是10000000，n是1的时候，n可忽略不计，复杂度为O(m)；当n是10000000，m是1的时候，m可忽略不计，复杂度为O(n)；但问题是，在m, n真正输入代码之前，我们是无法知道m, n的实际大小的；记住我们在“估算”数据规模对算法执行时间的影响；所谓的估算，就是说：无论是m比n大10000000个数量级，还是n比m大10000000个数量级，两种情况都应该考虑在内，所以采用了O(m+n) 的说法。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605147867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233106,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/d2/1f67739b.jpg","nickname":"Anita🍭","note":"","ucode":"D25171BC08C10A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290126,"discussion_content":"图形问题。n个点，m条边。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594350345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554764,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b9/4c/8c9edc85.jpg","nickname":"小庞","note":"","ucode":"7C8367CDB47163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297947,"discussion_content":"这个问题的主要原因是输入规模（N）不是唯一的，你也无法事先知道到底哪一个输入规模会影响到最终的运行时间（次数）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597116760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740263,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/e7/98a4b182.jpg","nickname":"静谧的夜晚","note":"","ucode":"6B2086E5339684","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49673,"discussion_content":"这两个应该只是个例子，例子里面写的是O(m)的复杂度，但是这两个sum可能并不一定都是o(m)的呀，我写个while的logn再加上一个o(n)那还是o(n)么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573619373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007159,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/37/c2f9190e.jpg","nickname":"Eric","note":"","ucode":"D30AA9A8C81257","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30886,"discussion_content":"我也不是很懂 我认为O(m+n) = O(n) 因为m和n不是给定的既定值吗？那么m+n也就是既定值 那不就是O(n)?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570867683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2198755,"avatar":"https://static001.geekbang.org/account/avatar/00/21/8c/e3/b9e926f9.jpg","nickname":"面罩","note":"","ucode":"E85F2550D7C6D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007159,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/37/c2f9190e.jpg","nickname":"Eric","note":"","ucode":"D30AA9A8C81257","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388085,"discussion_content":"m、n 是两个不同的问题规模，比如你在一个算法里面处理两个来源不同的数据。问题规模并不是既定的值","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628584459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":30886,"ip_address":""},"score":388085,"extra":""}]}]},{"had_liked":false,"id":27742,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1537935412,"is_pvip":false,"replies":[{"id":"9967","content":"是换底公式 👍","user_name":"作者回复","comment_id":27742,"uid":"1190123","ip_address":"","utype":1,"ctime":1537937484,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"108912117812","product_id":100017301,"comment_content":"03 <br>大家好，这是我的总结：<br><br>公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略<br>1. 只关注循环执行次数最多的一段代码<br>2.加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br><br>只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们集作O(1)<br>不同数据规模，无法评估 m 和 n 的量级大，所以不能利用加法法则，去掉某一个，而是 O(m+n)<br><br>空间复杂度：表示算法的存储空间与数据规模之间的增加关系<br><br>额外说一下：log3n 就等于 log32 * log2n 其实是利用换底公示推导，有疑问的搜一下。","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425024,"discussion_content":"是换底公式 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27760,"user_name":"小疯子","can_delete":false,"product_type":"c1","uid":1235022,"ip_address":"","ucode":"9639FE579DF33E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/4e/b47bc120.jpg","comment_is_top":false,"comment_ctime":1537938114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104617153218","product_id":100017301,"comment_content":"思考题没有经历过，工作环境中没有出现过这个场景，算法学习只是自己一人在默默的修炼内功，从榜首那位的分析中涨了见识，也很在理~<br>今日学习感想：久违的数学学习之感~没有看过专门的算法书籍，没有对比感，真心感觉老师讲的很清晰！<br>今日笔记：<br>一、复杂度分析<br>1、为什么进行复杂度分析？研究算法与数据结构，目的在于“快执行+省存储空间”，故对代码的复杂度进行分析是极有必要的；<br>2、对比事后统计法（应该就是评论区里说的性能测试）的优点在于：后者依赖测试环境，且受数据规模的影响大，标准难把控；<br>3、概念：不利用测试数据，粗略估算代码的执行效率。<br>二、大O复杂度表示方法<br>1、T(n)=O(F(n)) ：T(n)代表代码执行时间，F(n)代表代码总执行次数，O表示代码执行时间与代码总执行次数成正比。<br>2、大O时间复杂度代表代码执行时间随数据规模增长的变化趋势，数据规模超大时，低阶、常量、系数并不能左右增长趋势，所以只需记录最大量级即可。<br>三、常见的时间复杂度的分析方法：<br>1、只关心循环执行次数最多的代码；<br>2、加法法则，取量级更大的那个:T(n)=O(max(f(n),g(n)));<br>3、乘法法则，嵌套代码复杂度=嵌套内外复杂度的乘积:T(n)=O(f(n)*g(n));<br><br>四、常见时间复杂度<br>第一种：多项式时间复杂度(按数量级递增)<br>1、O(1) 常量阶，代码执行时间不随n增大而增大，见于无循环无递归代码，不论多少行~O(1)是一种表示方式（不论多少行）；<br>2、O(logN)对数阶，因为对数可以互相转换，且常量系数可忽略，所以忽略对数的底；<br>3、O(n)线性阶；<br>4、O(nlogN)对数线性阶；<br>5、各种次方阶。<br>第二种：非多项式时间复杂度：O(2的n次方) 和 O(n!)     属于非常低效的算法<br>第三种：O（m+n）与O(m*n)，代码复杂度由两个数据规模决定，由于无法得知m、n哪个量级更大，故不能直接取其一。<br>五、空间复杂度分析<br>1、定义：算法存储空间与数据规模增长的关系，主要看声明的空间存储变量所需要的控件存储量<br>2、O(1)、O(n)、O(n平方)，个人认为可参考基本数据类型、一维数组、二维数组，希望老师可以加上代码举例。<br><br><br><br><br><br><br>","like_count":24},{"had_liked":false,"id":27643,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1537926272,"is_pvip":true,"replies":[{"id":"9937","content":"理解的很透彻！","user_name":"作者回复","comment_id":27643,"uid":"1190123","ip_address":"","utype":1,"ctime":1537928492,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"104617141376","product_id":100017301,"comment_content":"       有必要，基准测试是事后，也是理论验证，有时候O(n)未必一定比O(1)效率低。<br>       复杂度分析是理论，整体趋势上反应了一个算法的时间或者空间利用率与数据规模的渐进关系，并且像程序员之间使用设计模式来讨论代码设计一样，说出名字就大致知道代码是如何组织的，大O也是一样。<br>        随着自己使用大O分析代码复杂度的熟练程度增加，判断一段代码的复杂度可能分分钟的事情，甚至更快。<br>","like_count":24,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424980,"discussion_content":"理解的很透彻！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27646,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1012037,"ip_address":"","ucode":"D69ED1BAF42262","user_header":"https://static001.geekbang.org/account/avatar/00/0f/71/45/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1537926474,"is_pvip":false,"replies":[{"id":"9935","content":"哈哈 也没错","user_name":"作者回复","comment_id":27646,"uid":"1190123","ip_address":"","utype":1,"ctime":1537928410,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"100322174282","product_id":100017301,"comment_content":"分析复杂度，倒是可以掌握一个分析算法大致流程，不至于无从下手，或者学完就忘。从软件开发角度来讲，提供了吐槽别人代码性能差的有效量化工具","like_count":23,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424982,"discussion_content":"哈哈 也没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34439,"discussion_content":"角度刁钻","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571198554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27700,"user_name":"ChaoYrAx","can_delete":false,"product_type":"c1","uid":1240428,"ip_address":"","ucode":"7B43B9D06C67C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/6c/dac226ff.jpg","comment_is_top":false,"comment_ctime":1537930417,"is_pvip":false,"replies":[{"id":"9973","content":"一个表示内存的消耗 一个表示执行的快慢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937746,"ip_address":"","comment_id":27700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96027210929","product_id":100017301,"comment_content":"老师  空间复杂度 和时间复杂度的 具体区别是什么，我怎么看上去像一样的","like_count":22,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425009,"discussion_content":"一个表示内存的消耗 一个表示执行的快慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28013,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1537975336,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"87437321256","product_id":100017301,"comment_content":"很有必要，现在是大数据时代，如果是矩阵计算，那就是on，如果是传统双for遍历那就是on²，做lr不依托矩阵都要天荒地老，那神经网络尤其是rnn就不用做了，即使是84万文本数据，长度为20个词，用单机gpu加速要跑七天。双for是几天那？经典例子是马踏棋盘，没优化代码跑几天，优化了又看不懂，问问老师如何对代码做优化，因为优化了就读不懂了有没有？<br>空间复杂度也有必要，还是nlp的例子，如果是embending的话，内存开销和磁盘开销都小的多，虽然现在分布式允许无限大，但是生产环境要把数据传到hdfs，再传到训练集群上，这都有网络传输开销啊，其二是可能没有这个权限，不安全。其三，生成npy文件不能shuffle，很不便利，也不允许分割，所以事先要想好空间要怎么来。当然时间更重要，敏捷迭代。","like_count":20,"discussions":[{"author":{"id":1331202,"avatar":"https://static001.geekbang.org/account/avatar/00/14/50/02/cce1cf67.jpg","nickname":"awmthink","note":"","ucode":"742915BBCE7111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239497,"discussion_content":"矩阵计算只是利用了硬件的并行能力，复杂度并没有降低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587301509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27529,"user_name":"","can_delete":false,"product_type":"c1","uid":1031328,"ip_address":"","ucode":"1B73BA45ACD06C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/a0/97c7679b.jpg","comment_is_top":false,"comment_ctime":1537919858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70257396594","product_id":100017301,"comment_content":"考研数据结构会考到🤓🤓","like_count":16},{"had_liked":false,"id":28272,"user_name":"陆上行舟","can_delete":false,"product_type":"c1","uid":1239985,"ip_address":"","ucode":"60B24DD30D7216","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/b1/d5ceb9c7.jpg","comment_is_top":false,"comment_ctime":1538038434,"is_pvip":false,"replies":[{"id":"10168","content":"👍 理解的很透彻","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044581,"ip_address":"","comment_id":28272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65962547874","product_id":100017301,"comment_content":"说一下个人的一点理解:<br><br>事后统计法: 定量分析<br><br>1. 需要具体的执行代码，需要具体的软硬件运行环境；<br>2. 需要具体的测试数据，数据规模大小会影响测试结果；<br><br>3. 得到的是这一次在具体的运行环境，具体的测试数据运行所需的时间，得到的是一个具体的时间。(点)<br><br><br>时间复杂度分析: 定性分析<br><br>1. 不需要具体执行代码，与运行环境无关；<br>2. 不需要具体测试数据；<br>3. 得到的不是程序具体运行时间，而是反映时间随数据规模增加变化的趋势。(线)<br><br>从评估结果来看，事后统计法得到的是一个具体的点，而时间复杂度分析得到的是一条线。<br><br>两种评估方法是相辅相成的，不是冲突的。<br><br>假如，假如说解决某一个具体的问题有两种算法 A 和 B，相应的代码是【代码A】和【代码B】，假如我们对两种算法代码进行时间复杂度分析得到结果:<br><br>代码A: O(8n+100)，那就可以说代码A的时间复杂度为 O(n) <br><br>代码B: O(n2+n+5)，那么可以说代码B的时间复杂度为 O(n2)<br><br><br>从时间复杂度角度分析，我们可以定性的得出结论说算法 A 优于算法 B。<br><br>但是如果使用事后统计法，假设在同样的运行环境，执行两段代码，由于需要具体的测试数据，相当于知道了具体 n 的值，假如是 n 的值是2，则算法A粗略估算需要 116 个单位时间，算法B需要 11 个单位时间(当然单位时间可能都是不同的)。<br><br>我们很有可能得出这一次测试结果是算法B所用时间是少于算法A，只是这一次，只是得出了一个定量的结果。<br><br>所以事后统计法有时候我们并不能知道算法 A 和 算法 B 那个性能更优，而通过时间复杂度分析我们可以得出定性结论算法A优于算法B。(当随着数据规模增大的时候算法A运行增加的时间要比算法B少的多。)<br><br>如果数据规模是确定的那使用算法A和算法B，随便那个选择熟悉的就行，如果数据规模不确定那在写程序的时候就需要尽可能的考虑时间复杂度选择更优的算法来解决。<br><br><br><br><br><br><br>","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425204,"discussion_content":"👍 理解的很透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28384,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538064842,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"61667606986","product_id":100017301,"comment_content":"老师请教您一个问题 之前面试一家公司，他问我 微信抢红包的算法是怎么实现的？怎么去规避一些陷阱。 比如总额100块钱，第一个人是不是就可以100块钱的基数来抢 那他获得更多钱的概率就更大。这样是不公平的，在我们的算法设计中，怎么规避这种不公平？这个问题困扰了我好久，烦请老师或在座的各位同学也一起探讨一下。","like_count":14,"discussions":[{"author":{"id":1137880,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/d8/dfe1d4dc.jpg","nickname":"学斌","note":"","ucode":"ED3432D8EDC327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308558,"discussion_content":"定义红包金额：m，红包个数:n，\n剩余金额：f，开始f=m，剩余红包个数：p，初始p=n，浮动金额x，\n则：\n抢红包金额= [1    ，  f/p +x  ]\n然后最后个好吧直接领取完。\n基本思路就是这样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600996303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1739144,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/88/5314619a.jpg","nickname":"小土豆","note":"","ucode":"2FDBF14D4333A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119471,"discussion_content":"线段切割法，将100块看成一个100单位长度的线段，有n个人抢就获取n-1个随机数来切割线段","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578231582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1160050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","nickname":"烈鸟","note":"","ucode":"F568728E862D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1739144,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/88/5314619a.jpg","nickname":"小土豆","note":"","ucode":"2FDBF14D4333A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128397,"discussion_content":"但是我们平时抢红包，并不是一起抢，而可能是分别去抢的，我也没想到好答案T^T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578635038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":119471,"ip_address":""},"score":128397,"extra":""},{"author":{"id":1739144,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/88/5314619a.jpg","nickname":"小土豆","note":"","ucode":"2FDBF14D4333A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1160050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","nickname":"烈鸟","note":"","ucode":"F568728E862D50","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131389,"discussion_content":"按我说的方法来的话，多少个包不是在发红包是就定下了的嘛，点击发红包时就分割好了，按顺序领就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578839160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128397,"ip_address":""},"score":131389,"extra":""},{"author":{"id":1256428,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","nickname":"caohuan","note":"","ucode":"4B092E33F3DF1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1739144,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/88/5314619a.jpg","nickname":"小土豆","note":"","ucode":"2FDBF14D4333A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186525,"discussion_content":"这不是 需要n个人同上领完红包，才知道自己的红包数目吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582688619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":119471,"ip_address":""},"score":186525,"extra":""}]},{"author":{"id":1081166,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7f/4e/2ed11247.jpg","nickname":"沐鸽","note":"","ucode":"4372E3B29BFE88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255845,"discussion_content":"加入一个随机变量 变量是发红包者和抢红包者之间的一个动态关系 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588429984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1256428,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","nickname":"caohuan","note":"","ucode":"4B092E33F3DF1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186531,"discussion_content":"觉得 做二次随机数，可以保证 公平性，比如100元，发十个红包，第一次是0到 100元 取随机数，第二次是0到 （100-第一次的数） 之间的随机数，依次下去，做九次，剩下的红包数目为最后一次红包的数目，把这十次 编号0到9，客户点击，选择这十个编号中的一个，编号对应相应的红包，这样虽然麻烦，但保证了公平性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582689223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1256428,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","nickname":"caohuan","note":"","ucode":"4B092E33F3DF1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303540,"discussion_content":"不科学，那第一次随机就99了，后面的还怎么抢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599293535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":186531,"ip_address":""},"score":303540,"extra":""},{"author":{"id":1183518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0f/1e/6b6eb987.jpg","nickname":"我们在路上","note":"","ucode":"0DB77DB7C64C47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392220,"discussion_content":"怎么第一次随机就99了呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630910394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303540,"ip_address":""},"score":392220,"extra":""}]},{"author":{"id":1283989,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/95/aad51e9b.jpg","nickname":"waterjiao","note":"","ucode":"74F2F75BF0CA6F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36842,"discussion_content":"能不能以金钱/红包个数作为基数浮动，其他则为剩余金钱/剩余红包个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571450462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27842,"user_name":"小帅b","can_delete":false,"product_type":"c1","uid":1234521,"ip_address":"","ucode":"D866A428967480","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/59/cb4e7ed8.jpg","comment_is_top":false,"comment_ctime":1537954143,"is_pvip":false,"replies":[{"id":"10079","content":"写得很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972553,"ip_address":"","comment_id":27842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61667496287","product_id":100017301,"comment_content":"--------总结一下--------<br><br>事后统计的局限性：<br><br>1.不同的环境测试结果差异大<br>2.数据本身规模会影响结果（如数据规模小，结果无法真实反应出算法的性能问题）<br><br>所以：需要复杂度分析<br><br><br>时间复杂度：<br><br>表示法：T(n) = O(n)； T(n) = O(n2)。  <br>T(n) 代表代码执行时间<br>(n)代表每行代码的执行次数总和<br><br>也就是每行代码的执行次数总和越大，那么代码执行就需要更多的时间。<br><br><br>时间复杂度分析方法：<br>1.只关注执行次数最多的那段代码。<br>2.加法法则：总复杂度取量级最大的那段代码。<br>3.乘法法则：代码之间复杂度有嵌套情况，将各个复杂度相乘得到总复杂度。<br><br>复杂度常见案例：<br><br>非多项式量级：<br>O（2^n）<br>O(n!)<br>n越大，算法执行时间急剧增加，相对低效<br><br>多项式量级：<br>O(1) : 不存在n的影响因素<br>O（logn）、O（nlogn）：对阶时间复杂度，最难分析之一。<br>O（m+n）、O（m*n） ：当数据规模无法评估哪个较大时，加法法则失效，可以使用 O（m+n）的方式。<br><br>空间复杂度分析<br>类比于时间复杂度就是：存储空间与数据规模的增长关系。<br><br><br>-----------课后思考--------------<br><br>不认为是浪费时间，性能的基准测试可能会受到环境，数据规模本身的影响，对时间复杂度、空间复杂度进行分析至少对一些复杂度能够做出判断，写出相对效率高的代码，此外，还能提升自己分析复杂度的思维和效率的认知。","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425055,"discussion_content":"写得很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28615,"user_name":"Shira","can_delete":false,"product_type":"c1","uid":1235268,"ip_address":"","ucode":"1E8B5A8DA1DA7A","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/44/180944ee.jpg","comment_is_top":false,"comment_ctime":1538113187,"is_pvip":false,"replies":[{"id":"10307","content":"正比不确切 谢谢指正。应该是跟f（n）成正比。f（n）就是你后面说的关于n的公式","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538121355,"ip_address":"","comment_id":28615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48782753443","product_id":100017301,"comment_content":"【所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比】<br>这句高亮的话不对吧。根据后文的意思，似乎应该是：T(n) 与每行代码的执行时间 unit_time 成正比。<br>两个例子的时间复杂度分别是： T(n) = (2n+2)* unit_time;  T(n) = (2n^2+2n+3)*unit_time<br>我是数学系学渣初学数据结构与算法，感觉如果T(n)与n成正比，岂不是一定有形如 T(n)=a*n, a为某常量，这种关系了。<br>                   ","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425325,"discussion_content":"正比不确切 谢谢指正。应该是跟f（n）成正比。f（n）就是你后面说的关于n的公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538121355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27542,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1537920594,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40192626258","product_id":100017301,"comment_content":"老师讲得太好了！记得上学时，刚接触大O，直接懵，并且丝毫没意识到复杂度分析的重要性，还觉得为什么不直接讲干货呢。现在想想真愚蠢！<br>今天课程的感悟：<br>第一，复杂度分析的重要性。我觉得再怎么强调其重要性也不为过，不具备这种意识，就很难摆脱底层码农的处境。<br>第二，理解“大”和“小”。科普书《从1到无穷大》中举到一个例子：比较自然数和奇数的个数，答案是一样多。当数据规模大到一定程度时，靠感觉是不够的，必须借助理论工具，大O表示法就是一个强有力的工具。<br>第三，抓主要矛盾。刚开始分析算法复杂度的时候，系数常数都考虑得很细致，这只是方便理解。真正在实际运用中，系数和常数都可以忽略，我们真正关心的是 算法是常数复杂度，对数复杂度还是线性复杂度等，它们之间有天壤之别，决定了计算量是几亿次还是几万亿次。<br><br>课后思考我觉得 xr 同学回答得非常好！我自己从中学到了很多。我举一个自己的例子：<br>我曾经需要对3G条数据排序，使用了内省排序，时间复杂度是nlogn，花了半个小时左右。假如我用选择排序，时间复杂度是n方，计算量是前者的几千万倍，在我有生之年也等不到排序结束。","like_count":9,"discussions":[{"author":{"id":1588293,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3c/45/9a12f744.jpg","nickname":"Eric","note":"","ucode":"7D5E40C8B17243","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78942,"discussion_content":"比较自然数和奇数的个数，答案是一样多    这个怎么理解？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576035506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158235,"user_name":"执剑者","can_delete":false,"product_type":"c1","uid":1266537,"ip_address":"","ucode":"72FAE71F74329F","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/69/7f963ffb.jpg","comment_is_top":false,"comment_ctime":1575355551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35935093919","product_id":100017301,"comment_content":"log3(n) = log3(2) * log2(n) 原理<br>对数换底公式：<br>       loga(n) = loge(n)&#47;loge(a)<br>设 loga(n) = x，<br>则 a^x = n；①<br>等式①两边同时取以 c 为底的对数，<br>则 logc(a^x) = logc(n)；②<br>由于 logc(a^x) = x * logc(a),<br>则 x * logc(a) = logc(n)；③<br>则 x = logc(n)&#47;logc(a)。<br><br>log2(n) = log(n)&#47;log(2) =&gt;log(n) = log(2) * log2(n)","like_count":8},{"had_liked":false,"id":30541,"user_name":"广州小拳拳","can_delete":false,"product_type":"c1","uid":1010290,"ip_address":"","ucode":"F40FCD787C8D2C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/72/a9f595a7.jpg","comment_is_top":false,"comment_ctime":1538916528,"is_pvip":false,"replies":[{"id":"11029","content":"最好不要 因为m和n的关系不确定。万一m=n^3呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538958700,"ip_address":"","comment_id":30541,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35898654896","product_id":100017301,"comment_content":"O(m+n^2) 是否可以简化为 O(n^2) ？","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426032,"discussion_content":"最好不要 因为m和n的关系不确定。万一m=n^3呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538958700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28234,"user_name":"karenaaa","can_delete":false,"product_type":"c1","uid":1246825,"ip_address":"","ucode":"7BC4ED1A1E60DA","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/69/b362d00b.jpg","comment_is_top":false,"comment_ctime":1538027642,"is_pvip":false,"replies":[{"id":"10167","content":"同学很认真啊 你说的对 不过我画这张图主要是体现每个量级的增长趋势的不同。不用太在意起点的地方","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044494,"ip_address":"","comment_id":28234,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35897766010","product_id":100017301,"comment_content":"最后一个图，O(nlogn)的变化曲线，n小于1时，对应的T(n)应该是小于0的","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425188,"discussion_content":"同学很认真啊 你说的对 不过我画这张图主要是体现每个量级的增长趋势的不同。不用太在意起点的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52154,"user_name":"小辛","can_delete":false,"product_type":"c1","uid":1242945,"ip_address":"","ucode":"95AA0DEA715267","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/41/c474f66c.jpg","comment_is_top":false,"comment_ctime":1545320634,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31610091706","product_id":100017301,"comment_content":"i = 2<br>while( i＜=n){<br>i=i²<br>}<br>请问老师，这个时间复杂度是多少，我算的是log（log n）","like_count":7,"discussions":[{"author":{"id":1183518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0f/1e/6b6eb987.jpg","nickname":"我们在路上","note":"","ucode":"0DB77DB7C64C47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392222,"discussion_content":"我算出来是O(logn)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630911035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27690,"user_name":"jackeymm","can_delete":false,"product_type":"c1","uid":1103650,"ip_address":"","ucode":"A06543EA294750","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/22/a05987e7.jpg","comment_is_top":false,"comment_ctime":1537929615,"is_pvip":false,"replies":[{"id":"9974","content":"嗯嗯 说的不错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937791,"ip_address":"","comment_id":27690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31602700687","product_id":100017301,"comment_content":"先进行性能测试，可以帮助我们找到瓶颈点，也就是时间复杂度最高的点，按照时间复杂度渐进的过程，复杂度最高的点，几乎可以等同于整个程序的复杂度，所以性能测试可以帮助我们减少分析类似o(1)这类复杂度低的程序的时间;<br>如果是作为练习，分析每段代码的复杂度，并不算浪费时间，如果是为了优化程序，我们就应该找到复杂度最高的部分进行分析，然后优化，但是这有一个前提是你能一眼分辨出绝大多数复杂度地的程序","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425006,"discussion_content":"嗯嗯 说的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28000,"user_name":"祸祸和懒懒","can_delete":false,"product_type":"c1","uid":1244953,"ip_address":"","ucode":"7011DA9751F56F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/19/c04d0196.jpg","comment_is_top":false,"comment_ctime":1537974309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27307778085","product_id":100017301,"comment_content":"感觉自己看一遍之后虽然差不多理解了，但还是不够透彻，明天早上再看一遍争取吃透 👀。看了一圈评论，感觉大神很多，现在我是发表不出那样的感想啦😔，我的 收货很多啦。 老师讲的也很棒👏 ，坚持下去，希望有一天我也会变成像老师那样厉害的人！","like_count":6},{"had_liked":false,"id":28006,"user_name":"秋凯","can_delete":false,"product_type":"c1","uid":1235435,"ip_address":"","ucode":"0BD0F4F60556F5","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/eb/223c6c80.jpg","comment_is_top":false,"comment_ctime":1537974488,"is_pvip":false,"replies":[{"id":"10087","content":"是的。还有平均 均摊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976579,"ip_address":"","comment_id":28006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23012810968","product_id":100017301,"comment_content":"看了下上面的总结，我想补充一下<br><br>学习复杂度的主要目的就一个：方便后续定性比较算法性能，比如归并是nlogn，插入是n²，所以归并快，而且快不少。<br><br>下一期是不是讲最坏情况和最好情况？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425112,"discussion_content":"是的。还有平均 均摊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27730,"user_name":"玉皇大亮","can_delete":false,"product_type":"c1","uid":1019849,"ip_address":"","ucode":"5C4FDF1FDCF8A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","comment_is_top":false,"comment_ctime":1537933931,"is_pvip":false,"replies":[{"id":"9968","content":"理解的到位！👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937541,"ip_address":"","comment_id":27730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23012770411","product_id":100017301,"comment_content":"老师提出的问题，文章中已经回答了，通过打印代码执行时间进行性能测试统计属于事后统计方法，这种方法很直观，但是有局限性。1.测试结果依赖于测试环境，不同的机器由于配置不同可能会有不同的测试结果。2.测试的结果受数据规模的影响，同样一套算法，n和n^3数量级规模的直观结果肯定是不一样的，但是当数据的规模小时，算法的效率又不容易得到提现。通过提前分析代码的时间复杂度和空间复杂度，不仅做到对自己的代码心中有数，而且如果出了性能瓶颈，也比较好想到解决问题的方向。但是我觉得不是每部分代码都需要分析时间和空间复杂度的，只有核心算法部分需要重点关注，像一些业务调用接口，只需要注意下就可以了","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425022,"discussion_content":"理解的到位！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31852,"user_name":"殇","can_delete":false,"product_type":"c1","uid":1257719,"ip_address":"","ucode":"96405BE6C747D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/f7/7fb84c57.jpg","comment_is_top":false,"comment_ctime":1539311561,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"18719180745","product_id":100017301,"comment_content":"int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br> <br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum;<br> }<br>老师，为什么这里是用乘法法则计算复杂度而不是用加法啊","like_count":4,"discussions":[{"author":{"id":2881261,"avatar":"","nickname":"201202077","note":"","ucode":"2FB173EB6A9A2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543047,"discussion_content":"函数调用，展开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640938853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303541,"discussion_content":"双重循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599293745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1663660,"avatar":"https://static001.geekbang.org/account/avatar/00/19/62/ac/9fb6c140.jpg","nickname":"利伊奥克儿","note":"","ucode":"2160BEBAD1034D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38678,"discussion_content":"你把ret = ret + f(i); 这一句 中的 f(i) 用循环替代你就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571816947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397017,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/19/b2813318.jpg","nickname":"时间小鱼","note":"","ucode":"0B4FEB53102D56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2444,"discussion_content":"注意 ret = ret + f(i) 这一句，你就理解了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563624410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31755,"user_name":"Jock","can_delete":false,"product_type":"c1","uid":1236780,"ip_address":"","ucode":"2FF16F050C228F","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/2c/d2e97b6a.jpg","comment_is_top":false,"comment_ctime":1539279583,"is_pvip":false,"replies":[{"id":"11485","content":"说的很对 加油💪","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539310565,"ip_address":"","comment_id":31755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18719148767","product_id":100017301,"comment_content":"学习落后了好几天了。发现光听根本跟不上，果断选择了看文档。看的时候卡在了对数换底公式，花了20分钟Google换底公式的推导证明，然后自己才能推导出来文中那部分。<br>总之:复杂度分析根本是为了从理论上找到更优选择，提高代码运行速度，节约存储空间，写出更加简洁高效的代码！能够在写代码时，时刻牢记效率问题！作为一个编程小白，感觉概率在代码的执行效率上有时也有很大影响！比如学习成绩的正太分布规律。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426495,"discussion_content":"说的很对 加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539310565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28181,"user_name":"A_foreign 이호연 wuli 혜리","can_delete":false,"product_type":"c1","uid":1242168,"ip_address":"","ucode":"B6EC7962D9B926","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/38/4439bea9.jpg","comment_is_top":false,"comment_ctime":1538016560,"is_pvip":false,"replies":[{"id":"10120","content":"书写习惯 没太大区别","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538017540,"ip_address":"","comment_id":28181,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18717885744","product_id":100017301,"comment_content":"老师 我不太明白为什么++i在这里而不是i++<br>您的书写习惯还是？<br>","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425170,"discussion_content":"书写习惯 没太大区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538017540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1670263,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/3Ko0eH05zmgyLjVR5AlmR56kNYfBV53d2jPc2rvGhmuEOzzF2VvXldGnGUlZ6V0a4vMtPNiaRJWzXWribTNiaNSNQ/132","nickname":"暮光之下","note":"","ucode":"D6A5C024EA15EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16487,"discussion_content":"有区别的，++i表示先对i+1，在执行；i++表示先执行i，然后在+1","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568896421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2312214,"avatar":"https://static001.geekbang.org/account/avatar/00/23/48/16/df9b9f53.jpg","nickname":"纳兰小狐獴","note":"","ucode":"882182192B89FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324652,"discussion_content":"同意 所以很讨厌这种写法 都是写成 i += 1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605148346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28068,"user_name":"米斯特粥","can_delete":false,"product_type":"c1","uid":1048271,"ip_address":"","ucode":"49689C18EC41A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/cf/aa6b25b7.jpg","comment_is_top":false,"comment_ctime":1538004300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18717873484","product_id":100017301,"comment_content":"大型的软件，最好是借助代码分析工具，并且适用28定律，尽量把时间花在那20%复杂度最高最影响性能的问题上，另外，工程上还有另外一种复杂度即圈复杂度也很重要。","like_count":4},{"had_liked":false,"id":27746,"user_name":"Hubery_Jun","can_delete":false,"product_type":"c1","uid":1240391,"ip_address":"","ucode":"50AA758EBF87C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/47/f8aba277.jpg","comment_is_top":false,"comment_ctime":1537935846,"is_pvip":false,"replies":[{"id":"9965","content":"哈哈 能看懂就行","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937412,"ip_address":"","comment_id":27746,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18717805030","product_id":100017301,"comment_content":"这是Java？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425025,"discussion_content":"哈哈 能看懂就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27693,"user_name":"牵手约定","can_delete":false,"product_type":"c1","uid":1249461,"ip_address":"","ucode":"01AF328FDDD38C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/b5/0813608c.jpg","comment_is_top":false,"comment_ctime":1537929768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18717798952","product_id":100017301,"comment_content":"看着姜威大佬的总结，加上自己的总结，在小本本上记下来了。","like_count":4},{"had_liked":false,"id":27654,"user_name":"alic","can_delete":false,"product_type":"c1","uid":1240077,"ip_address":"","ucode":"47E9D22030CA01","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/0d/43d46889.jpg","comment_is_top":false,"comment_ctime":1537927131,"is_pvip":false,"replies":[{"id":"9931","content":"你是说n的立方对吧 也有啊 不常见而已","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928230,"ip_address":"","comment_id":27654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18717796315","product_id":100017301,"comment_content":"难道没有O(n*3)这种复杂度吗","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424988,"discussion_content":"你是说n的立方对吧 也有啊 不常见而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27572,"user_name":"by","can_delete":false,"product_type":"c1","uid":1242524,"ip_address":"","ucode":"B35FB69EB23E3A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/9c/8c14d4bd.jpg","comment_is_top":false,"comment_ctime":1537922060,"is_pvip":false,"replies":[{"id":"9908","content":"两层循环没问题呀 并没有说n的平方阶不好 要具体看情况分析","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537922585,"ip_address":"","comment_id":27572,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18717791244","product_id":100017301,"comment_content":"实际工作中有种情况就是集合里面装对象，这个对象里面有一个字段是集合，我要拿这个对象里的集合里的值判断做处理，那不用2层for，怎么做，明知道时间复杂度是n的2次方，这不是很纠结了","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424953,"discussion_content":"两层循环没问题呀 并没有说n的平方阶不好 要具体看情况分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537922585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274329,"user_name":"包包大人","can_delete":false,"product_type":"c1","uid":2415185,"ip_address":"","ucode":"408A04F2D2FC87","user_header":"https://static001.geekbang.org/account/avatar/00/24/da/51/fab0fa33.jpg","comment_is_top":false,"comment_ctime":1610966755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14495868643","product_id":100017301,"comment_content":"不是多此一举，性能测试是很有必要的，和复杂度分析相辅相成。平时写代码时有意识进行复杂度分析，就更有可能写出性能好的代码。","like_count":3},{"had_liked":false,"id":144440,"user_name":"小肥羊","can_delete":false,"product_type":"c1","uid":1081582,"ip_address":"","ucode":"9F44BAA1A59FAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","comment_is_top":false,"comment_ctime":1571922242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14456824130","product_id":100017301,"comment_content":"性能测试的目的在于要知道这个程序在当前这个硬件设备下，当前这个数据规模下，当前这个宿主环境下确切的运行时间以及空间。而通过复杂度分析，我们能快速感知该程序哪里费时间，哪里费空间，但是只是感知。就像排序算法，有的算法输入1 2 3 4 5 6这样的数列反而运行时间可能很慢，而给一个无序的数列，它的运行时间反而还更快了。<br>每段代码都分析一下时间，好像很费事，但是在这个矛盾的世界上，省事就是费事。比如java语言中的一个Math.min方法，虽然我们用的时候只需输入两个参数，但自己一实现起来就发现不仅要判断两个数的大小，还要判断输入内容是否合法。我想表达的就是虽然我只写了一行代码，这个代码还是系统包给我的，但它的运行性能需要考虑，不然submit不通过😂<br>求个赞，下节课走起来！","like_count":3},{"had_liked":false,"id":109729,"user_name":"地球侠客12138","can_delete":false,"product_type":"c1","uid":1390138,"ip_address":"","ucode":"E270B98DEBEE3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/36/3a/6dfd68fe.jpg","comment_is_top":false,"comment_ctime":1562083513,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"14446985401","product_id":100017301,"comment_content":"老师 没有太理解文中分析常见时间复杂度的O(m+n),O(m*n)的例子，定义m和n的代码并未嵌套，为何符合乘法法则呢","like_count":3,"discussions":[{"author":{"id":1266233,"avatar":"https://static001.geekbang.org/account/avatar/00/13/52/39/2211b1a2.jpg","nickname":"Z-ll","note":"","ucode":"68A75A53D1455E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55645,"discussion_content":"这个其实就是取一个大值，但是又无法判断m更大还是n更大。如果m=n的话，那O(m+n) = O(2n)，那时间复杂度其实就是O(n)。但是如果 m = n^2 呢，那时间复杂度就变成了O(n^2 + n), 去掉低阶就是O(n^2)。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574387189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130122,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","nickname":"wnz27","note":"","ucode":"BC9ACB6B7C6FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56239,"discussion_content":"意思是乘法适用，不是说那段代码适用于乘法~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574446382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28643,"user_name":"symbol _woo","can_delete":false,"product_type":"c1","uid":1245841,"ip_address":"","ucode":"D9761BC2291473","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/91/e1b48e54.jpg","comment_is_top":false,"comment_ctime":1538118702,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14423020590","product_id":100017301,"comment_content":"当年数据结构老师要是这么讲，我怎么会听不懂呢？！","like_count":3,"discussions":[{"author":{"id":1989803,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5c/ab/8e84d692.jpg","nickname":"治稳","note":"","ucode":"19A5C007E6B84A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254506,"discussion_content":"老师好，在平时写代码，很少循环到n，都是常量，这种无论嵌套多少层循环，时间复杂度是不是O(1)呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588331561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1304564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f4/482e3413.jpg","nickname":"土豆-gavin               ༽","note":"","ucode":"15D24B71468A2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1989803,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5c/ab/8e84d692.jpg","nickname":"治稳","note":"","ucode":"19A5C007E6B84A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303544,"discussion_content":"N是传入的数据规模参数，你算法要是没不确定的数据量的输入，那就是o(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599293930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":254506,"ip_address":""},"score":303544,"extra":""}]}]},{"had_liked":false,"id":28360,"user_name":"大坏蛋","can_delete":false,"product_type":"c1","uid":1240376,"ip_address":"","ucode":"E5728F85273D14","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/38/217ecccb.jpg","comment_is_top":false,"comment_ctime":1538061022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422962910","product_id":100017301,"comment_content":"影响程序运行时间的因素主要有：<br>（1）程序所依赖的算法<br>（2）问题规模和输入数据<br>（3）计算机系统性能<br>渐进复杂度分析，可以培养写出性能良好的代码习惯，尽量保证程序实现算法较优。但是复杂度分析只是粗略的理论分析，且算法只是影响程序性能的因素之一；纸上得来终觉浅，绝知此事要躬行；应用程序需要进行性能测试，压力测试，模拟实际应用场景检验 程序健壮性。","like_count":3},{"had_liked":false,"id":27999,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1537974075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422875963","product_id":100017301,"comment_content":"有必要，测试过程也要讲究粗调和精调。<br>1、粗调：可以根据运用场景，利用时间、空间复杂度分析来筛选使用的主要方法<br>2、精调：利用性能测试给出较准确的事后分析数据以确认最终的方案<br>结合起来可以有清晰的优化路径，也能提高很多效率。<br>","like_count":3},{"had_liked":false,"id":27885,"user_name":"单行线的旋律","can_delete":false,"product_type":"c1","uid":1108402,"ip_address":"","ucode":"4D01060FCE4F21","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/b2/7ab31105.jpg","comment_is_top":false,"comment_ctime":1537961776,"is_pvip":false,"replies":[{"id":"10055","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537970756,"ip_address":"","comment_id":27885,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14422863664","product_id":100017301,"comment_content":"我也立个Flag<br>1.弄明白:是什么？为什么？怎么做？  <br>               优点？ 缺点？ 有没有更好？<br>2.练习，实践，总结<br>3.坚持，坚持，再坚持!","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425070,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537970756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27574,"user_name":"SSS","can_delete":false,"product_type":"c1","uid":1248529,"ip_address":"","ucode":"0CDE04437E025C","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/11/8e473d27.jpg","comment_is_top":false,"comment_ctime":1537922129,"is_pvip":false,"replies":[{"id":"9904","content":"第二个例子中有两行代码被执行了n的平方次。所以乘以了2","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537922463,"ip_address":"","comment_id":27574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14422824017","product_id":100017301,"comment_content":"老师，第二个例子中2n的平方不是很理解，按理说应该是n的平方，也就是n*n，如果n =5那么n 的平方是25，2n的平方不就50了？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424954,"discussion_content":"第二个例子中有两行代码被执行了n的平方次。所以乘以了2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537922463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27522,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1537918736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422820624","product_id":100017301,"comment_content":"为什么要做复杂度分析？我认为有3个关键点<br>1.掌握复杂度分析方法后，便能在编程中习惯性的考虑代码性能问题，提高编程质量，从而整体提升系统性能，降低系统的开发和维护成本。<br>2.和性能测试相比，复杂度分析有成本低，效率高，易操作，指导性强的优势。<br>3.复杂度分析是数据结构和算法之核心，不掌握这个，就没必要研究数据结构和算法啦！😄","like_count":3},{"had_liked":false,"id":27478,"user_name":"小博","can_delete":false,"product_type":"c1","uid":1078829,"ip_address":"","ucode":"4DB860A0D35BA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U6Y6xwm9BryshBqapb8iaQCf3P4RUxIxiakfEdEzDEPy5QR6sjCjqj7CNgz6Lyj8rPYA/132","comment_is_top":false,"comment_ctime":1537892888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422794776","product_id":100017301,"comment_content":"深夜刷题突然发现更新了，心中窃喜，留言于此，开始算法之旅","like_count":3},{"had_liked":false,"id":337907,"user_name":"敏さん","can_delete":false,"product_type":"c1","uid":2942648,"ip_address":"","ucode":"057DB5AE38C096","user_header":"https://static001.geekbang.org/account/avatar/00/2c/e6/b8/511e3e11.jpg","comment_is_top":false,"comment_ctime":1647156242,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10237090834","product_id":100017301,"comment_content":"1.不浪费时间,同样的代码在不同配置的电脑和环境,运行的速度会不一样.<br>2.比如代码写的很烂,运行很慢,基本不会有公司特地来升级硬件提升速度的,都是优先优化算法.<br>3.进行复杂度分析可以抛开上述硬件环境等差异,能够直观的看出一个算法的性能.<br>4.还有就是性能测试后要是速率太慢,还是得要分析原因,试图优化,最终还是逃不掉复杂度分析.<br>以前都没往这些方面想过,楼主讲的内容非常干货,棒棒的!","like_count":2},{"had_liked":false,"id":212862,"user_name":"iris","can_delete":false,"product_type":"c1","uid":1986106,"ip_address":"","ucode":"8D54D1DBEA6F64","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4e/3a/1932100c.jpg","comment_is_top":false,"comment_ctime":1588227925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178162517","product_id":100017301,"comment_content":"觉得不是多此一举，是注重每一个小的代码块，让每一小块都复杂度低，组成的大的程序系统才能优。<br>小记：<br>时间复杂度：取最复杂的那一块代码的复杂度值，其次O（logn)的复杂度较难看出，考虑2^ x=n得此值。<br>空间复杂度：主要看代码占用的内存量大小。<br>复杂度公式大小比较：O(logn)&lt;O(n) &lt;O(nlogn) &lt;O(n2)<br>=================================<br>升级打怪开始","like_count":2},{"had_liked":false,"id":156432,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1574870339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164804931","product_id":100017301,"comment_content":"这两天仔细看了开篇词和前5节内容, 内容讲的很好, 通俗易懂, 属于难得的好文章, 在读《复杂度分析(上)》的时候, 有两个小疑问: ①证明乘法法则所用的循环嵌套示例, 感觉讲解的比较笼统, 并没有严谨的递推过程, cal (int n) 的复杂度是O(n), 不难理解, 但是嵌套在内部的 f (int n), 每次被调用的入参都不一样, 是逐渐递增的, 最少仅有一次循环, 作者一笔带过说这个 f (int n) 操作的时间复杂度也是 O(n), 对于想我这样的算法新手, 会很难理解, 所以如果增加一个简单的推导过程就更完美了; ②老师把复杂度量级, 以多项式类别作为区分简单的分为了两类, 我感觉这一块不是很恰当(和我理解的多项式好像有比较大的出入), 多项式的定义是: &quot;在数学中，由若干个单项式相加组成的代数式叫做多项式（若有减法：减一个数等于加上它的相反数）。&quot;, 按照这个定义, 老师说的这几个常用的复杂度量级应该没有一个是属于多项式.","like_count":2},{"had_liked":false,"id":154974,"user_name":"不谈","can_delete":false,"product_type":"c1","uid":1156936,"ip_address":"","ucode":"2E18977EAC5E5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItaas8rpvXb70zfjMetkEuYeLH0rI348MCaKqyn9HAbGZsdCKibLTnfGEBMbwQLBOhPMROcVBk9vA/132","comment_is_top":false,"comment_ctime":1574608123,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10164542715","product_id":100017301,"comment_content":"听过一些算法课，但是今天才真的懂了大O是怎么分析的，泪奔。。。","like_count":2,"discussions":[{"author":{"id":2056073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Zo8ZoMrNKpb6l5wC0DicibEExGSyrqsjrASLxlouDOEJjbeC7WicK37riaqyAWibJSyu2hr1iaIHwVxectk34RSpjKpQ/132","nickname":"大当家-白","note":"","ucode":"DCBAA9596DEE52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289166,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594012101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149478,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1573229676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163164268","product_id":100017301,"comment_content":"非常有必要，别跟老夫提什么事后性能测试等各种基准测试。老夫就问你，你写代码的时候都不知道你的时间复杂度和空间复杂度是多少，即使测试出来结果后你怎么知道是最优的？我明明在写代码之前就能下意识的知道怎么写最优，这样他不香吗？","like_count":2},{"had_liked":false,"id":148494,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1573018883,"is_pvip":false,"replies":[{"id":"57642","content":"有时候不行，如果我们m和n是否同一个量级，哪个更大，不确定的时候，就要写成O（m+n）和O（m*n）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573425264,"ip_address":"","comment_id":148494,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10162953475","product_id":100017301,"comment_content":"研习设计模式中，顺便重温一遍数据结构和算法  一般的 O（m+n） 和O(m*n) 我都当成了 O(n) 和O（n2） 不知道有没有什么问题","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473512,"discussion_content":"有时候不行，如果我们m和n是否同一个量级，哪个更大，不确定的时候，就要写成O（m+n）和O（m*n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573425264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583499,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/8b/3629c0f8.jpg","nickname":"游山行人","note":"","ucode":"E559BD0A3C6484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217275,"discussion_content":"可以理解为是2个可能不同的数据规模，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585536611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140704,"user_name":"简单不代表没内容","can_delete":false,"product_type":"c1","uid":1099231,"ip_address":"","ucode":"193BA053774FDF","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/df/7f23fdee.jpg","comment_is_top":false,"comment_ctime":1571035024,"is_pvip":false,"replies":[{"id":"54522","content":"加油~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571093961,"ip_address":"","comment_id":140704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10160969616","product_id":100017301,"comment_content":"这篇文章的知识点反反复复看了不下于五遍，上午看到下午，总算明白了","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470518,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571093961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31118,"user_name":"传奇","can_delete":false,"product_type":"c1","uid":1246151,"ip_address":"","ucode":"E8F0A083C02AC5","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/c7/66bb8412.jpg","comment_is_top":false,"comment_ctime":1539095172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10129029764","product_id":100017301,"comment_content":"笔记整理：<br>1. 数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。常用的有时间、空间复杂度分析。<br>2. 大 O 复杂度表示法：T(n) = O(f(n)),T(n)表示代码执行的时间,n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。<br>```<br>列如： T(n) = O(2n+2)；T(n) = O(2n2+2n+3)<br>```<br>3. 大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。<br>4. 当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n2)。<br>5. 如何分析一段代码的时间复杂度？<br>    1. 只关注循环执行次数最多的一段代码;<br>    2. 加法法则：总复杂度等于量级最大的那段代码的复杂度;T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))[多段的循环代码]<br>    3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积;T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))[嵌套的循环代码]<br>6. 复杂度量级(按数量级递增)：<br>```<br>多项式量级------<br>1. 常数阶：O(1); 只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。<br>2. 对数阶：O(㏒n); 变量 i 的取值就是一个等比数列【如：while (i &lt;= n)  { i = i * 3; }】<br>3. 线性阶：O(n);<br>4. 线性对数阶：O(n ㏒n);如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn)，归并排序、快速排序的时间复杂度都是 O(nlogn)。<br>5. 平方阶：O(n²)，立方阶：O(n³)，...K次方阶：O(nⁿ)<br>非多项式量级------该类的算法问题叫作NP（Non-Deterministic Polynomial，非确定多项式）问题，当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法<br>6. 指数阶：O(2²);<br>7. 阶乘阶：O(n!);<br>```<br>7. O(m+n)、O(m*n)：m 和 n 是表示两个数据规模 ，加法法则失效应表示为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))<br>8. 时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比：空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br>9. 常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。","like_count":2},{"had_liked":false,"id":28245,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1233952,"ip_address":"","ucode":"783F963EAA9544","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/20/079efea7.jpg","comment_is_top":false,"comment_ctime":1538032338,"is_pvip":false,"replies":[{"id":"10211","content":"总结的不错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538063155,"ip_address":"","comment_id":28245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10127966930","product_id":100017301,"comment_content":"总结：<br>事后统计法：<br>1. 测试结果非常依赖测试环境；<br>2. 测试结果受数据规模的影响很大；<br><br>一、时间复杂度：<br>1. 表示算法的执行时间与数据规模之间的增长关系；<br>2. 只关注循环执行次数最多的代码；<br>3. 加法法则：总时间复杂度等于量级最大的那段代码的复杂度；<br>4. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积；<br><br>几种常见的时间复杂度：<br>1. O(1)：一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万的代码，其时间复杂度也是O(1)；<br>2. O(logn)、O(nlogn)：在采用大O标记复杂度的时候，可以忽略系数，即O(Cf(n)) = O(f(n));<br>3. O(m+n)、O(m*n)：在无法事先评估m和n谁的量极大时，原来的加法法则就不正确了，需要将加法法则改为：T1(m) + T2(n) = O(f(m) + f(n))，但是乘法法则继续有效：T1(m) * T2(n) = O(f(m) * f(n))；<br><br>二、空间复杂度<br>1. 表示算法的存储空间与数据规模之间的增长关系；<br>2. 常见的空间复杂度：O(1)、O(n)、O(logn)；<br><br>越高阶复杂度的算法，执行效率越低。常见复杂度从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n²)；","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425193,"discussion_content":"总结的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538063155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27875,"user_name":"molybdenum","can_delete":false,"product_type":"c1","uid":1251208,"ip_address":"","ucode":"DA24BDFCFF416C","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/88/be4fe19e.jpg","comment_is_top":false,"comment_ctime":1537959825,"is_pvip":false,"replies":[{"id":"10057","content":"说的很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537970999,"ip_address":"","comment_id":27875,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10127894417","product_id":100017301,"comment_content":"分析这些很有必要，作为学生党从多个方面可以深刻感受到<br>1.在实习面试的时候这些都是作为基础知识被问到的<br>2.自己刷算法题的时候超时，超限这也很常见，如果不会分析，很难优化代码<br>3.考研数据结构如果接触过的同学会发现，它会考你运用，设计一些数据问你运算后的结果，分布，另一种就是考复杂度分析，其实会分析了，这个算法自然就会了<br>那为什么这种东西总是被忽略呢，我想可能有这样一些原因<br>1.大家都是调包师有现成的，基本不自己写，完成业务第一<br>2.多用框架开发，小优化对整个系统的运行效果没有明显改善，所以一般不考虑，而且业务多为增删改查，提交数据库还会自动优化一层，所以考虑很少。<br>总的来说，这还是很有必要的首先注重分析能让代码更加优雅，其次我们说，人要向前看，浅层的业务搬砖也要有梦想，要成为架构师这个坎一定要跨","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425066,"discussion_content":"说的很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537970999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27782,"user_name":"John","can_delete":false,"product_type":"c1","uid":1108531,"ip_address":"","ucode":"5B14B449C3240C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ea/33/37f261a3.jpg","comment_is_top":false,"comment_ctime":1537943122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10127877714","product_id":100017301,"comment_content":"数据结构解决的问题：“快” + “省”，即为时间，空间复杂度分析<br>1：为什么需要复杂度分析？<br>\t因为通过统计手段分析的结果受到两个因素的影响，一：测试结果非常依赖测试环境，二：测试结果受数据规模的影响很大<br>2：大O复杂度表示法<br>\t所有代码的执行时间T(n)与每行代码的执行次数n成正比。<br>\tT(n) = O(f(n))<br>3:时间复杂度分析<br>\t1：只关注循环执行次数最多的一段代码<br>\t2：加法法则：总复杂度等于量级最大的那段代码的复杂度<br>\t3：乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>4：几种常见时间复杂度量级：<br>\t多项式量级：<br>\t常数阶O(1)<br>\t对数阶O(logn)<br>\t线性阶O(n)<br>\t线性对数阶O(nlogn)<br>\t平方阶O(n*n),立方阶O(n*n*n)… k方阶O(n*……*n)<br>非多项式量级：<br>\t指数阶O(2*……*2)<br>\t阶乘阶O(n!)<br>5：空间复杂度分析:<br>\t常见的空间复杂度：O(1) O(n) O(n*n)<br>","like_count":2},{"had_liked":false,"id":27602,"user_name":"搬砖维持生活","can_delete":false,"product_type":"c1","uid":1027440,"ip_address":"","ucode":"08D5794F97A269","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/70/3fbfa4e4.jpg","comment_is_top":false,"comment_ctime":1537923785,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10127858377","product_id":100017301,"comment_content":"时间复杂度和空间复杂度分析肯定是有必要的，一个节省CPU时钟周期，一个节省内存。要想写出高效的代码，二者缺一不可！","like_count":2},{"had_liked":false,"id":311248,"user_name":"佛系生存","can_delete":false,"product_type":"c1","uid":2756617,"ip_address":"","ucode":"514ACF2A2EBEC6","user_header":"https://static001.geekbang.org/account/avatar/00/2a/10/09/849c9bb9.jpg","comment_is_top":false,"comment_ctime":1631117621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926084917","product_id":100017301,"comment_content":"由心的感觉，买的太值了，第一次&quot;真正&quot;明白，时间和空间复杂度是怎么回事，怎么来计算。感谢。","like_count":1},{"had_liked":false,"id":288376,"user_name":"Windleaf18","can_delete":false,"product_type":"c1","uid":2407301,"ip_address":"","ucode":"479E3B97EF625A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/av4NrjvjIicqO0eRBJaiax9Cmfcw0QRyZXf0soszbWHzKepwr5ia7NDaACyVkmOUNnaR7ANVm7qE6Q1ibibYqW0XPBQ/132","comment_is_top":false,"comment_ctime":1618449177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913416473","product_id":100017301,"comment_content":"二刷，老师结合代码示例，讲解清晰明了，足见功底。个人理解，最重要的两个字应该是渐进，渐进体现的是数据规模与执行时间和资源占用的关系。其次理解数据规模，利用数据规模的衡量方式，使得衡量不依赖具体的执行环境！","like_count":1},{"had_liked":false,"id":268726,"user_name":"蝈蝈","can_delete":false,"product_type":"c1","uid":2370619,"ip_address":"","ucode":"9FEC722355B7CC","user_header":"https://static001.geekbang.org/account/avatar/00/24/2c/3b/0df7630e.jpg","comment_is_top":false,"comment_ctime":1608306991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903274287","product_id":100017301,"comment_content":"大O表示法反应的是代码执行时间与数据规模的关系，当循环的次数是一个人常数时，无论该循环次数多大，该断代码都是O(1)的时间复杂度。评判时间复杂度最简单方法是看循环的最大层数。","like_count":1},{"had_liked":false,"id":248338,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1600130160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895097456","product_id":100017301,"comment_content":"算法-03<br><br>站在性能角度，大家更关注的是量级，同一个数量级内不会拉开成本和体验的差距。<br>如果想要技术产生商业上的竞争力，那么十倍的量级是更好的选择，也就是说，性能要比竞争对手好十倍，这种体验上&#47;成本上的优势，才能让用户愿意改用你的产品。<br><br>渐进时间复杂度的概念就非常契合上面的理念，我们更关心的是，随着数据规模(业务量)的增长，完成单个业务(成本)的变化是什么样的？我们追求的是边际成本递减，持平，可控的增长也行。但如果是指数级增长(2^n, n!)，那么以用户增长为重要追求目标的互联网业务就会成为一个噩梦，难以维持。","like_count":1},{"had_liked":false,"id":247667,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1599789365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894756661","product_id":100017301,"comment_content":"我的看法是复杂度的评估与性能测试不是在一个阶段发生的，因此复杂度的自我评估依然重要。<br>在写一段代码之前，通常我们会在大脑里形成一个思路或者方案，有思路之后，你就可以大概评估思路的时间空间复杂度了，例如，经过思考，你想到一种O(N2)的方案，你们团队的另外一个人设计了O( n log n)的方案，在不考虑空间与实现难度来说，我们当然要首先考虑时间复杂度更低的方案，然后再进行开发。<br>另一方面，在我们将代码实现好之后，我们可以用性能测试来更一步验证实现方式的具体性能，然后根据测试报告来发现更进一步的优化提升思路。<br>所以总结下，两者放生在不同时间，两者都是非常重要的。","like_count":1},{"had_liked":false,"id":246601,"user_name":"划船一哥","can_delete":false,"product_type":"c1","uid":1811010,"ip_address":"","ucode":"61539E491E86F5","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a2/42/4948f2b9.jpg","comment_is_top":false,"comment_ctime":1599436719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894404015","product_id":100017301,"comment_content":"“所有代码的执行时间 T(n) 与每行代码的执行次数成正比”，这里，正相关更合适，正比似乎不太确切","like_count":1},{"had_liked":false,"id":246024,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599137856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894105152","product_id":100017301,"comment_content":"【要点】<br>1、数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。<br>2、大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。<br>3、时间复杂度分析：<br>分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了<br>加法法则：总的时间复杂度就等于量级最大的那段代码的时间复杂度。<br>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br>4、按复杂度的量级可分为多项式量级和非多项式量级。<br>多项式量级包括：<br>常量阶：O(1)<br>对数阶：O(logn)<br>线性阶：O(n)<br>线性对数阶：O(nlogn)<br>平方阶：O(n2)、立方阶：O(n3) ...<br>非多项式量级：<br>指数阶：O(2n)<br>阶乘阶：O(n!)<br>5、时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br>【思考】<br>分析代码的时间空间复杂度并不是多此一举，我们不能总是写完代码之后再去验证复杂度，而是要在写的时候就衡量代码的复杂度，这样有助于我们更高效的写出执行效率更高的代码。而且时间复杂度分析和具体运行环境无关，写出的代码很可以反映代码的效率。","like_count":1},{"had_liked":false,"id":243271,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598008119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892975415","product_id":100017301,"comment_content":"通过实际工作，性能测试只是代码最终交付的最后一道性能屏障，并不能当成万能的银弹，不在项目开发中注意算法复杂度，到了真正性能测试的时候，遇到性能瓶颈，那就是非常耗时耗人力的一件事了，倘若能在开发过程中就很好的规避这些问题，会让我们项目更加的健壮高效","like_count":1},{"had_liked":false,"id":236941,"user_name":"a   d   e","can_delete":false,"product_type":"c1","uid":2083625,"ip_address":"","ucode":"56584BFAC129A9","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/29/2059e052.jpg","comment_is_top":false,"comment_ctime":1595595798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890563094","product_id":100017301,"comment_content":"熟悉之后基本一眼就可知时间和空间的复杂度,或许稍作思考,看是否有改进的地方,不缺这点时间.慢即是快,学习算法也就是这个道理.","like_count":1},{"had_liked":false,"id":230197,"user_name":"樊有为","can_delete":false,"product_type":"c1","uid":2048497,"ip_address":"","ucode":"9E99171266F474","user_header":"https://static001.geekbang.org/account/avatar/00/1f/41/f1/6e6da149.jpg","comment_is_top":false,"comment_ctime":1593308839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888276135","product_id":100017301,"comment_content":"在写代码的时候关注时间复杂度和空间复杂度是为了能有意识的运用合适的良好的数据结构与算法，写出更加简洁高效的代码。","like_count":1},{"had_liked":false,"id":224745,"user_name":"斯巴达克斯♛","can_delete":false,"product_type":"c1","uid":1332583,"ip_address":"","ucode":"99E18A2973EEC0","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/67/2b23d9c7.jpg","comment_is_top":false,"comment_ctime":1591526696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886493992","product_id":100017301,"comment_content":"复杂度分析(上)<br>1.为什么需要复杂度分析<br>通过事后统计法就可以得到代码的执行时间与占用空间，为什么还需要复杂度分析？<br>事后统计法受测试环境不同、测试数据规模的影响非常大，所以需要一种不需要通过测试数据就能够粗略的估计出代码的执行效率的方法。<br><br>2.大O时间复杂度表示法<br>大O时间复杂度表示法并不是代码的真正执行时间，而是代码执行时间随着数据规模增长的变化趋势，也叫做渐进时间复杂度，简称时间复杂度。<br><br>3.时间复杂度分析方法<br>3.1.只关注代码执行次数最多的一段代码的时间复杂度(只关注循环执行次数最多的一段代码)<br>3.2.加法法则:总时间复杂度等于量级最大的那段代码的复杂度。公式:T1(n)+T2(n) = O(f(n))+O(g(n)) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))<br>3.3.乘法法则:嵌套循环的复杂度等于嵌套内外层代码的复杂度的乘积。公式:T1(n)*T2(n) = O(f(n))*O(g(n)) = O(f(n)*g(n))<br><br>4.常见时间复杂度<br>1.时间复杂度可以分为多项式量级和非多项式量级(NP问题),非多项式量级的时间复杂度当数据规模越来越大时，执行时间会急剧增加。<br>2.O(1)常量级时间复杂度;<br>O(logn),O(nlogn)对数阶时间复杂度;<br>O(m+n),O(mn):当代码的复杂度由两个数据规模决定时,加法法则失效,乘法法则依然有效","like_count":1},{"had_liked":false,"id":208659,"user_name":"隐身要彻底","can_delete":false,"product_type":"c1","uid":1963868,"ip_address":"","ucode":"8829434B7F875C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f7/5c/c6e2a516.jpg","comment_is_top":false,"comment_ctime":1587396471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882363767","product_id":100017301,"comment_content":"感觉大O表示法有点像高数里的等价无穷小 正好它是小o 他们有很多相似之处 比如都有只看高阶忽略低阶的特性 ","like_count":1},{"had_liked":false,"id":206040,"user_name":"Geek_f9c246","can_delete":false,"product_type":"c1","uid":1951950,"ip_address":"","ucode":"822D9547A6AC2D","user_header":"","comment_is_top":false,"comment_ctime":1586778325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881745621","product_id":100017301,"comment_content":"代码复杂度只是一个逻辑估算并不代表最终结果，所以还是需要具体性能测试","like_count":1},{"had_liked":false,"id":204927,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1586493323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881460619","product_id":100017301,"comment_content":"1. 不同的场景下，算法的表现不一样<br>2. 粗略地估计，也意味着要抓大放小，把握最主要的西瓜","like_count":1},{"had_liked":false,"id":203834,"user_name":"yoummg","can_delete":false,"product_type":"c1","uid":1067856,"ip_address":"","ucode":"1B809CFDD7A508","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/50/fdecd51a.jpg","comment_is_top":false,"comment_ctime":1586271547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881238843","product_id":100017301,"comment_content":"常用时间复杂度：O(1)，O(log n), O(n), O(nlog n), O(n*n)<br>总的时间复杂度就等于量级最大的那段代码的时间复杂度。<br><br>课后思考：<br>对项目做时间和空间复杂度的分析，是要求在写代码的时候多多考虑代码性能。<br>性能测试往往是对一个系统的评估，包含的比较多。有IO，CPU，内存，项目代码等等。","like_count":1},{"had_liked":false,"id":186895,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1583946969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878914265","product_id":100017301,"comment_content":"受益匪浅，👍深入浅出","like_count":1},{"had_liked":false,"id":175003,"user_name":"百步飞剑","can_delete":false,"product_type":"c1","uid":1817289,"ip_address":"","ucode":"11197E4C0EDA34","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ba/c9/37a1d853.jpg","comment_is_top":false,"comment_ctime":1580524894,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5875492190","product_id":100017301,"comment_content":"我觉得，很有必要。比如一个项目正在推广阶段，使用的人数在不断增长，配合算法的时间复杂度和空间复杂度曲线分析，再与用户预计的增长趋势和硬件资源情况相比较,可以预测出软件的使用时间。","like_count":1},{"had_liked":false,"id":155900,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1574776384,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5869743680","product_id":100017301,"comment_content":"项目上线之前的测试，和项目提交测试之前的开发，都需要关注性能。不同的是，前者应使用真机测试，而后者应使用复杂度分析。开发者不能将所有的性能优化都拖到测试才来解决。","like_count":1},{"had_liked":false,"id":155560,"user_name":"谭利平","can_delete":false,"product_type":"c1","uid":1691314,"ip_address":"","ucode":"DF022D77B3180D","user_header":"https://static001.geekbang.org/account/avatar/00/19/ce/b2/44dedc42.jpg","comment_is_top":false,"comment_ctime":1574698400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869665696","product_id":100017301,"comment_content":"性能测试依赖于具体的环境，输入参数，把控的是整个大的方向的性能，而时间，空间复杂度的分析，则是从细节上，注重性能的提升，量变是可能会引起质变的。至于每段代码是否都要分析，则是没有必要，简单的，一眼就知道复杂度，大部分可能都是o(1),无需关注，复杂的关注一下，也不会太浪费时间，熟了，也会很快的，所以平时如果注重自己的代码的话，则不会有什么问题，可千万不要一起去评估复杂度，想想都是很恐怖的。","like_count":1},{"had_liked":false,"id":154051,"user_name":"NEVER SETTLE","can_delete":false,"product_type":"c1","uid":1101894,"ip_address":"","ucode":"9C86BDAFDBF768","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","comment_is_top":false,"comment_ctime":1574356119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869323415","product_id":100017301,"comment_content":"学习总结：<br><br>时间复杂度与空间复杂度分析 是衡量代码的执行效率重要的指标。<br><br>1、为什么需要复杂度分析？<br>     通过复杂度分析可以粗略地估计算法的执行效率，这样就可以避免使用具体的测试数据来测试代码。因为测试的结果非常依赖测试环境（如CPU性能），并且受数据规模的影响很大（如排序算法）。<br><br>2、时间复杂度 表示代码执行时间随数据规模增长的变化趋势。<br><br>3、如何分析代码的时间复杂度？<br>     只关注循环执行次数最多的一段代码；<br>     总复杂度等于量级最大的那段代码的复杂度；<br>     嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br><br>4、复杂度量级（按数量级递增）<br>     常量阶：O(1)<br>     对数阶：O(logn)<br>     线性阶：O(n)<br>     线性对数阶：O(nlogn)<br>     平方阶：O(n²)、立方阶：O(n³)、......、k次方阶O(n^k)<br>     指数阶：O(2^n)<br>     阶乘阶：O(n!)<br>     以上可以粗略地分为两类，多项式量级和非多项式量级。<br>     其中，非多项式量级只有两个：O(2^n) 和 O(n!)。<br><br>5、非多项式量级<br>      时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。<br>      当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。<br><br>6、O(1)时间复杂度实例分析<br>      一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。<br><br>7、O(logn)、O(nlogn)时间复杂度实例分析<br>     最常见，最难分析<br>     实际上，可以把所有对数阶的时间复杂度都记为 O(logn)。<br>因为对数之间是可以互相转换的。<br>     在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。<br>     如果一段代码的时间复杂度是 O(logn)，循环执行 n 遍，时间复杂度就是 O(nlogn)。\t  <br>     O(nlogn) 也是一种非常常见的算法时间复杂度。<br>     归并排序、快速排序的时间复杂度都是 O(nlogn)。<br>8、O(m+n)、O(m*n)时间复杂度实例分析<br>     m 和 n 是表示两个数据规模。<br>     因为无法事先评估 m 和 n 谁的量级大，所以在表示复杂度的时候，就不能简单地省略掉其中一个。 <br>     因此时间复杂度就是 O(m+n)。<br><br>9、空间复杂度表示算法的存储空间与数据规模之间的增长关系。<br><br>10、常见的空间复杂度就是 O(1)、O(n)、O(n2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。","like_count":1},{"had_liked":false,"id":152349,"user_name":"第四单元","can_delete":false,"product_type":"c1","uid":1747184,"ip_address":"","ucode":"3ED9D553E1DE17","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","comment_is_top":false,"comment_ctime":1573980736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868948032","product_id":100017301,"comment_content":"思考题：<br>1.复杂度分析分析的是随数据规模的增长，程序执行时间或申请空间的大小的增长趋势。这和项目中所做的性能测试并不冲突。我理解性能测试是为了看项目是否能在指定的数据规模下正常工作。<br>2.每段代码都分析以下时间空间复杂度，有助于提高程序的性能，不是浪费时间。","like_count":1},{"had_liked":false,"id":149182,"user_name":"无邪","can_delete":false,"product_type":"c1","uid":1469632,"ip_address":"","ucode":"4D33CEEF302C7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/c0/85618c4b.jpg","comment_is_top":false,"comment_ctime":1573174009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868141305","product_id":100017301,"comment_content":"开发时间远远小于也简单于修改时间，在开始阶段就做到精致，比后续返工更高效","like_count":1},{"had_liked":false,"id":139030,"user_name":"仲夏","can_delete":false,"product_type":"c1","uid":1690965,"ip_address":"","ucode":"2849869C765CDE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","comment_is_top":false,"comment_ctime":1570529710,"is_pvip":false,"replies":[{"id":"53589","content":"我觉得比较全面了，照着学就完了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570579728,"ip_address":"","comment_id":139030,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5865497006","product_id":100017301,"comment_content":"感觉老师总结的很好很认真，请问一下这门课是把工作面试常用的知识点都总结了吗，会了这门课是不是工作方面基本可以解决了","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469756,"discussion_content":"我觉得比较全面了，照着学就完了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570579728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690965,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","nickname":"仲夏","note":"","ucode":"2849869C765CDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25908,"discussion_content":"早点遇到可以少很多弯路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570579783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138542,"user_name":"小菠萝🍍","can_delete":false,"product_type":"c1","uid":1686410,"ip_address":"","ucode":"DA814203C6C062","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/8a/d33d9d3f.jpg","comment_is_top":false,"comment_ctime":1570327046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865294342","product_id":100017301,"comment_content":"我不认为是多此一举的，进行性能测试的目的是检验当前程序在某个主机上运行的性能效果，它是由许多主观因素构成的：主机硬件配置、运行的环境（Windows&#47;Linux&#47;MacOS）、编程语言版本的特性······；所以在诸多主观因素的影响下，我们无法对一段程序代码进行客观的定量的去评价它的优劣性，所以出现了渐进复杂度分析方法，它与上面陈列的所有主观因素没有关联，而仅仅关注于程序本身。<br>有了渐进复杂度分析方法，为什么还要保留性能测试呢？个人认为性能测试不仅仅是对程序代码的性能分析，也是对程序代码的正确性检验，在生产上线时，性能测试是最直观的一种检验程序代码的方式，在确保性能、正确的前提下，可以先将程序进行上线，再进行程序的复杂度分析，对代码进行优化，版本迭代，如此反复进行，程序的设计会更加的完善。","like_count":1},{"had_liked":false,"id":138198,"user_name":"Geek_jack","can_delete":false,"product_type":"c1","uid":1688495,"ip_address":"","ucode":"68BB997C5DBD22","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL4iaYPNBC91U49F540btYiaDhplb6cRz8QE2GHtPANaozoerIsQ6S0Vngsndqubbic9wV5TcWdHyEibg/132","comment_is_top":false,"comment_ctime":1570090750,"is_pvip":false,"replies":[{"id":"53613","content":"这里有：https:&#47;&#47;github.com&#47;wangzheng0822&#47;algo","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570581023,"ip_address":"","comment_id":138198,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5865058046","product_id":100017301,"comment_content":"王老师您好，您课上的算法，会给出c和python语言的实现代码吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469433,"discussion_content":"这里有：https://github.com/wangzheng0822/algo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570581023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1688495,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL4iaYPNBC91U49F540btYiaDhplb6cRz8QE2GHtPANaozoerIsQ6S0Vngsndqubbic9wV5TcWdHyEibg/132","nickname":"Geek_jack","note":"","ucode":"68BB997C5DBD22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36981,"discussion_content":"谢谢谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571475699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102916,"user_name":"Charley Choi 🎃","can_delete":false,"product_type":"c1","uid":1235154,"ip_address":"","ucode":"E43371C6B2BBDA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d2/8bc05ccf.jpg","comment_is_top":false,"comment_ctime":1560328274,"is_pvip":false,"replies":[{"id":"37279","content":"你百度一下对数换底公式","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560382466,"ip_address":"","comment_id":102916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855295570","product_id":100017301,"comment_content":"老师，请问一下log3n 就等于 log32 * log2n，这里不太明白？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453647,"discussion_content":"你百度一下对数换底公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560382466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101964,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1560075988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855043284","product_id":100017301,"comment_content":"1. 课程内容总结：<br>- 复杂度分析是研究数据规模变化时，运行时间&#47;占用空间随之变化的规律。<br>- 大O表示法：只看执行最多的代码，加法法则，乘法法则。<br>- 常见的时间复杂度(增序排列)：O(1),O(logn),O(n),O(nlogn),O(n^2),O(n!)(后两种性能很差)<br><br>2. 课程问题：<br>对于性能测试前的复杂度分析，我认为**有必要**，可以理解为黑盒测试与白盒测试的关系；另外，自己的项目要做好，经过复杂度分析的项目，可以提前避免一些性能问题，对于项目的上线也更加有信心。<br><br>3. 个人感受：<br>- 为什么要用渐进复杂度的方式？<br><br>计算机工程师分析问题，先看规模。先解决最影响性能的瓶颈因素，而不是只能解决提升几个百分点的问题。","like_count":1},{"had_liked":false,"id":100768,"user_name":"神州第一媒","can_delete":false,"product_type":"c1","uid":1297178,"ip_address":"","ucode":"A431DC82CE4260","user_header":"","comment_is_top":false,"comment_ctime":1559635690,"is_pvip":false,"replies":[{"id":"36474","content":"o（10）=o（1）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559777604,"ip_address":"","comment_id":100768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854602986","product_id":100017301,"comment_content":"问个比较有意思的问题： for (int n=1;n&lt;10;n++){System.out.println(&quot;111&quot;);}  如果这个的复杂度是O(n),那么，我直接写十行：System.out.println(&quot;111&quot;)，它的复杂度为O(1)， 这怎么理解？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452672,"discussion_content":"o（10）=o（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559777604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82163,"user_name":"Geek_f4ef24","can_delete":false,"product_type":"c1","uid":1445470,"ip_address":"","ucode":"E08867C2100407","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/n2N3Gg1kfc80sKGDRicYWa9L35GXZjia9ErMEdpXpltaCMF2dYCBCu6rlbKaRTxVZUFKZD4Hp4nCFp1AKibOQYNPw/132","comment_is_top":false,"comment_ctime":1554132713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849100009","product_id":100017301,"comment_content":"第一遍，理解起来有点飘渺，先多看几遍，把留言刷完再总结","like_count":1},{"had_liked":false,"id":79310,"user_name":"小k","can_delete":false,"product_type":"c1","uid":1304236,"ip_address":"","ucode":"AE0C5ADEB489F5","user_header":"https://static001.geekbang.org/account/avatar/00/13/e6/ac/5b99aa18.jpg","comment_is_top":false,"comment_ctime":1553432758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848400054","product_id":100017301,"comment_content":"代码执行时间随数据规模增长的变化趋势,结合下面的例子怎么理解呢，C是常数<br>C(n+1)^2-Cn^2=C(2n+1)<br>(n+1)^2-n^2=2n+1<br>C一影响曲线的陡峭走势啊<br>C为啥能省略呢，有点不懂，请老师指教","like_count":1},{"had_liked":false,"id":74629,"user_name":"半瓶醋","can_delete":false,"product_type":"c1","uid":1282746,"ip_address":"","ucode":"8C898E244D0417","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/ba/9833f06f.jpg","comment_is_top":false,"comment_ctime":1552269532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5847236828","product_id":100017301,"comment_content":"对于项目之前的性能测试，我是学生没接触过没有啥发言权，希望过来人给点指教。对于时间、空间复杂度分析，我觉得写代码之前先把模块的逻辑图简单画一下，分析用哪种算法效率更快（主），节省存储空间（次），这些搞清楚了编码思路更清晰，优化的时候也更容易找到问题关键节点，提升了效率也锻炼了思维。","like_count":1},{"had_liked":false,"id":73747,"user_name":"凭实力写bug","can_delete":false,"product_type":"c1","uid":1235611,"ip_address":"","ucode":"6F772551F18935","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/9b/e0ef47df.jpg","comment_is_top":false,"comment_ctime":1551967529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846934825","product_id":100017301,"comment_content":"个人觉得，正常代码基本都是是O(n)或者O(1)的复杂度比较多也不用关心复杂度，更多关心的是代码的优雅程度，这点比较难，代码复杂度主要在大量数据运算方面，但代码出现嵌套循环我们基本就该考虑是不是有更好的写法了","like_count":1},{"had_liked":false,"id":69755,"user_name":"JAY","can_delete":false,"product_type":"c1","uid":1042288,"ip_address":"","ucode":"4F6C14E7EA7C06","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/70/e6b1368f.jpg","comment_is_top":false,"comment_ctime":1550829389,"is_pvip":false,"replies":[{"id":"25061","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551061626,"ip_address":"","comment_id":69755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845796685","product_id":100017301,"comment_content":"二刷开始！<br>一个月时间搞定！<br>立帖为证！","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440266,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551061626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68683,"user_name":"李宁","can_delete":false,"product_type":"c1","uid":1427718,"ip_address":"","ucode":"6F2E7681D2BEBE","user_header":"https://static001.geekbang.org/account/avatar/00/15/c9/06/6cbc7eb6.jpg","comment_is_top":false,"comment_ctime":1550571822,"is_pvip":false,"replies":[{"id":"24619","content":"朴素字符串匹配算法就是这个复杂度。在后面的章节中有讲到。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550718927,"ip_address":"","comment_id":68683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845539118","product_id":100017301,"comment_content":"老师，关于O(m*n)这个，有没有具体代码？没看懂这个","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439795,"discussion_content":"朴素字符串匹配算法就是这个复杂度。在后面的章节中有讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550718927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67584,"user_name":"finn","can_delete":false,"product_type":"c1","uid":1417421,"ip_address":"","ucode":"BEEE67EFD8E014","user_header":"","comment_is_top":false,"comment_ctime":1550202118,"is_pvip":false,"replies":[{"id":"25406","content":"你理解的没错，我们估算只要保证数量级不错就可以了。<br>++i，i++ 只是习惯的问题。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551232872,"ip_address":"","comment_id":67584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845169414","product_id":100017301,"comment_content":"老师, 关于 for 循环的语句执行时间我有点不太明白,<br>for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>}<br><br>按照我的理解, 这段 for 循环, 循环一次要执行三条指令. 时间复杂度应该为 3n<br>1. i&lt;=n<br>2. sum = sum + i<br>3. ++i<br><br>但是好像您算的时候是按照代码行数算的时间复杂度为 2n. <br>我知道常数的系数并不影响之后的复杂度的分析.<br>所以您是为了简化而是按照代码行数来分析, 而不是按实际指令条数来分析, 还是其他原因. 我这样理解是有什么误解吗, 谢谢指正?<br><br>另外我发现老师写的 for 循环, 给 i 初值为 1 , 用 ++i 自增,  和我习惯写的 i = 0, i++ 不同.这有什么讲究吗, 还是只是习惯问题 .<br>再次谢谢老师的讲解, 对时间复杂度的概念清晰了不少.<br><br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439261,"discussion_content":"你理解的没错，我们估算只要保证数量级不错就可以了。\n++i，i++ 只是习惯的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551232872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54900,"user_name":"雨蒙","can_delete":false,"product_type":"c1","uid":1347245,"ip_address":"","ucode":"9D2EE39D1EDF93","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/ad/db8f1d67.jpg","comment_is_top":false,"comment_ctime":1545979544,"is_pvip":false,"replies":[{"id":"20253","content":"可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546418328,"ip_address":"","comment_id":54900,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840946840","product_id":100017301,"comment_content":"老师，写的太好了，最为算法小白的我竟然看到了，我想发篇文章到我自己的博客中，会捡一下你的句子，可以吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434605,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546418328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46303,"user_name":"飞天雕","can_delete":false,"product_type":"c1","uid":1313517,"ip_address":"","ucode":"C323D53855D53C","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/ed/1b3d06e1.jpg","comment_is_top":false,"comment_ctime":1543895614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838862910","product_id":100017301,"comment_content":"老师不管咋样都是11次，都是指向每一次执行2次<br>function c(n){<br>  var i=1;<br> while (i &lt;= n) {<br>  console.log(11);<br> i = i * 2;<br><br>}<br><br>}<br><br>c(5)<br> 11<br><br>function c(n){<br>  var i=1;<br> while (i &lt;= n) {<br>  console.log(11);<br> i = i * 3;<br><br>}<br><br>}<br><br>c(5)<br> 11","like_count":1},{"had_liked":false,"id":45545,"user_name":"DreamItPossible","can_delete":false,"product_type":"c1","uid":1254103,"ip_address":"","ucode":"232FCE2BB22012","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d7/fed46140.jpg","comment_is_top":false,"comment_ctime":1543669045,"is_pvip":false,"replies":[{"id":"16369","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543802725,"ip_address":"","comment_id":45545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5838636341","product_id":100017301,"comment_content":"“所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比”，这里写的不准确，比较正确的描述，我认为是“所有代码的执行时间 T(n) 与每行代码的执行次数总和成正比”。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431086,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543802725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40424,"user_name":"对方正在输入","can_delete":false,"product_type":"c1","uid":1257515,"ip_address":"","ucode":"57C3A444E33832","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/2b/bc5873c6.jpg","comment_is_top":false,"comment_ctime":1542618235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837585531","product_id":100017301,"comment_content":"完了,我爱上了算法和数据结构,是心动的感觉, 突然觉得和老师相见恨晚","like_count":1},{"had_liked":false,"id":37848,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1541750216,"is_pvip":false,"replies":[{"id":"13722","content":"可以用一些profile工具 去看哪些地方最耗内存 最耗时间","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987851,"ip_address":"","comment_id":37848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5836717512","product_id":100017301,"comment_content":"工作中基本没涉及到时间复杂度和空间复杂度的分析。上周参加公司培训，讲线上问题排查处理，其中讲到了OOM异常的排查方法，用jmap分析dump日志。所以我想遇到OOM的问题要做代码优化时，分析空间复杂度是否也是方法之一，但是一个项目代码量如此巨大，要怎么找到问题的切入点呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428502,"discussion_content":"可以用一些profile工具 去看哪些地方最耗内存 最耗时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34559,"user_name":"ForzaJuve","can_delete":false,"product_type":"c1","uid":1047302,"ip_address":"","ucode":"E090D83AE78EE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/06/0e6b6365.jpg","comment_is_top":false,"comment_ctime":1540205886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835173182","product_id":100017301,"comment_content":"为什么需要复杂度分析？<br>事后统计法的测试结果非常依赖测试环境而且受数据规模影响大<br>之前看的一些算法的东西，提到复杂度的时候没有这样抽丝剥茧的讲解的，今天总算明白了，这课看到这我就觉得值了，多多练习使用就能<br>掌握心法无照剩有招。<br>看完评论后同学说的换底公式google之后搞明白了   why      log3n 就等于 log32 * log2n,发现高中的数学知识早忘光了","like_count":1},{"had_liked":false,"id":30270,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1235207,"ip_address":"","ucode":"CB3D55B4011C8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/07/f477e85a.jpg","comment_is_top":false,"comment_ctime":1538751240,"is_pvip":false,"replies":[{"id":"10968","content":"1. 空间、时间复杂度是完全两个东西的评价指标，一个是存储空间一个是执行时间。没有太大关系。<br>2. 每次两个都要考虑，也不会冲突。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538839266,"ip_address":"","comment_id":30270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833718536","product_id":100017301,"comment_content":"老师我想请教一个问题：不论时间复杂度还是空间复杂度都反应的是代码本身的复杂度。一个计算要不就需要很大的存储空间来减少计算时间；要不就需要较长的计算时间来节约存储空间。那么时间复杂度和空间复杂度是冲突关系吗？还是每次计算只用计算时间复杂度或者空间复杂度？求老师指点","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425919,"discussion_content":"1. 空间、时间复杂度是完全两个东西的评价指标，一个是存储空间一个是执行时间。没有太大关系。\n2. 每次两个都要考虑，也不会冲突。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538839266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30052,"user_name":"你好","can_delete":false,"product_type":"c1","uid":1252980,"ip_address":"","ucode":"0B5E024BA58560","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/74/636ea0f3.jpg","comment_is_top":false,"comment_ctime":1538637298,"is_pvip":false,"replies":[{"id":"10800","content":"是的 留言区大牛很多！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538656681,"ip_address":"","comment_id":30052,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833604594","product_id":100017301,"comment_content":"赞～不只有文章能学到东西，评论区也可以学到很多。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425837,"discussion_content":"是的 留言区大牛很多！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538656681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28401,"user_name":"Ye","can_delete":false,"product_type":"c1","uid":1235520,"ip_address":"","ucode":"3FED98D61A7B4F","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/40/5f8f72fa.jpg","comment_is_top":false,"comment_ctime":1538078551,"is_pvip":false,"replies":[{"id":"10223","content":"是的 👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538094132,"ip_address":"","comment_id":28401,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833045847","product_id":100017301,"comment_content":"O可以理解成同阶无穷大，其实它本意就是这个","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425257,"discussion_content":"是的 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538094132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28282,"user_name":"wocow","can_delete":false,"product_type":"c1","uid":1021989,"ip_address":"","ucode":"7335B115FCA06C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/25/93977b53.jpg","comment_is_top":false,"comment_ctime":1538040857,"is_pvip":false,"replies":[{"id":"10158","content":"总结的很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044189,"ip_address":"","comment_id":28282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833008153","product_id":100017301,"comment_content":"性能测试与复杂度分析是相辅相成的，在编码时，复杂度可以对算法的执行与空间的效率有一个基础的概念，而性能测试则是对我们的猜想进行验证，知其然，知其所以然，才能帮助我们更好的写出最适合当前业务场景下的代码。<br><br>-------------------------------------------------------------------------------<br>笔记<br>-------------------------------------------------------------------------------<br><br>## 为什么需要复杂度分析<br>- 能够对算法执行的效率有一个概念<br><br>## 如何估算算法执行效率<br>- 大O复杂度表示法：T(n) = O(f(n))<br>    - T(n)：代码执行时间<br>    - n：数据规模的大小<br>    - f(n)：每行代码执行的次数总和<br>    - O：渐进复杂度：用来分析算法执行效率与数据规模之间的增长关系<br><br>- 时间复杂度：代码的执行效率<br>- 空间复杂度：代码申请的空间<br><br>## 如何分析复杂度<br>- 只记录最大量级，公式中的低阶、常数、系数三部分不会左右增长趋势，可以选择忽略<br>    - 比如<br>        - O(2n+2) =&gt; O(n)<br>        - O(2n^2 + 2n + 3) =&gt; O(n^2)<br><br>- 加法法则：总的时间复杂度就等于量级最大的那段代码的时间复杂度<br>- 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>## 复杂度量级<br>- 多项式量级<br>    - 常量阶 O(1)<br>    - 对数阶 O(logn)<br>    - 线性阶 O(n)<br>    - 线性对数阶 O(nlogn)<br>    - 平方阶 O(n^2)<br>    - 立方阶 O(n^3)<br>    - K次方阶 O(n^k)<br><br>- 非多项式量级，也称为NP(Non-Deterministic Polynomial，非确定多项式)<br>    - 指数阶 O(2^n)<br>    - 阶乘阶 O(n!)<br><br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425211,"discussion_content":"总结的很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28240,"user_name":"THREE","can_delete":false,"product_type":"c1","uid":1248238,"ip_address":"","ucode":"B8F7136E5DE298","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/ee/d54fc5e5.jpg","comment_is_top":false,"comment_ctime":1538030097,"is_pvip":false,"replies":[{"id":"10166","content":"占不占都无所谓 毕竟是常量 对复杂度没影响","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044413,"ip_address":"","comment_id":28240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832997393","product_id":100017301,"comment_content":"1 int cal(int n) {<br>2   int sum = 0;<br>3   int i = 1;<br>4   for (; i &lt;= n; ++i) {<br>5     sum = sum + i;<br>6   }<br>7   return sum;<br>8 }<br>弱弱的请问一下，第一行和第七行需不需要各自占用CPU的一个unit_time，对于底层的东西不太懂，还是还是好奇的问一下","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425190,"discussion_content":"占不占都无所谓 毕竟是常量 对复杂度没影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27984,"user_name":"sarahsnow","can_delete":false,"product_type":"c1","uid":1249446,"ip_address":"","ucode":"63D0832C4F75CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/a6/564f9143.jpg","comment_is_top":false,"comment_ctime":1537972949,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5832940245","product_id":100017301,"comment_content":"清晰易懂<br>看完脑海里冒出的第一个问号是:时间复杂度和空间复杂度如何平衡？<br>不过对于目前近乎无限的云存储空间，也许空间复杂度都不是个事","like_count":1,"discussions":[{"author":{"id":1035994,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ce/da/440ec2dc.jpg","nickname":"李师奇","note":"","ucode":"B24F98DD38176B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533252,"discussion_content":"空间也要花钱的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637825302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27855,"user_name":"　　　　　　　　　　　Spike　　","can_delete":false,"product_type":"c1","uid":1116988,"ip_address":"","ucode":"C99AFF555430B2","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/3c/e0251be9.jpg","comment_is_top":false,"comment_ctime":1537955707,"is_pvip":false,"replies":[{"id":"10078","content":"没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972494,"ip_address":"","comment_id":27855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832923003","product_id":100017301,"comment_content":"我觉得问第二个例子中5、6行代码为什么是2n平方遍而不是n平方遍的应该是问的第七八行吧，而且解释应该是“第七行有n平方遍，第八行有平方遍，加起来是2n的平方遍”","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425060,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27838,"user_name":"炫焰苍龙","can_delete":false,"product_type":"c1","uid":1250947,"ip_address":"","ucode":"4975E05DCC3D30","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/83/13656ef6.jpg","comment_is_top":false,"comment_ctime":1537953075,"is_pvip":false,"replies":[{"id":"10080","content":"哈哈 那不是一个函数吗？怎么会是正则表达式呢 把java搞熟练点 看看是不是更容易看懂些吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972692,"ip_address":"","comment_id":27838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832920371","product_id":100017301,"comment_content":"int cal(int n){<br>}这里看不懂?这是一个什么语句，正则表达式吗？还是说是while语句?unit_time 是每行普通代码所执行的时间吗？T(n)=O(f(n))  f(n)代表每次执行代码次数的总和。然后第一例f(n)等于2n+2..<br>说实话看着有点吃力，这里要用到的学习技巧是多问多思考，多互动。还有沉淀，，因为感觉自己看了一遍，有点看不懂。。至于边学边练的话，我看不懂代码属于那种类型，因为我还只是刚学Java的萌新。。。这里还需要定义个打怪升级的目标，要坚持下去啊。。我以后吃饭就靠这个了。。目标，每次作者发文章，我一定要带着脑子看一遍或者两遍然后将自己内心想说的东西吐槽出来。。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425054,"discussion_content":"哈哈 那不是一个函数吗？怎么会是正则表达式呢 把java搞熟练点 看看是不是更容易看懂些吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27800,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1537945972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832913268","product_id":100017301,"comment_content":"复杂度的讲法很接地气，但算法导论上讲的更全更严谨(从数学的角度)，希望老师能讲得更深入一些","like_count":1},{"had_liked":false,"id":27768,"user_name":"觅食","can_delete":false,"product_type":"c1","uid":1241184,"ip_address":"","ucode":"D7A4490A596ED4","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/60/3191cabc.jpg","comment_is_top":false,"comment_ctime":1537940483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832907779","product_id":100017301,"comment_content":"果然浅显易懂，读两遍已烂熟于心。美滋滋。","like_count":1},{"had_liked":false,"id":27755,"user_name":"大顺子","can_delete":false,"product_type":"c1","uid":1236805,"ip_address":"","ucode":"E77E29439B6C71","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/45/e3dd6a83.jpg","comment_is_top":false,"comment_ctime":1537936485,"is_pvip":false,"replies":[{"id":"9966","content":"理解的没问题","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937445,"ip_address":"","comment_id":27755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832903781","product_id":100017301,"comment_content":"关于第二个 for 循环嵌套例子，我是这样理解的，首先 i &lt;= n 和 j =1,其时间复杂度是2n,里面的 for 循环是 n + n，即2n ,乘以外面的循环就是 2 *n^2, 即最后加起来 T(n) = (2n^2+2n+3)*unit_time<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425028,"discussion_content":"理解的没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27734,"user_name":"杯中酒醉人心","can_delete":false,"product_type":"c1","uid":1247525,"ip_address":"","ucode":"657CF082256C88","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/25/b1a249bc.jpg","comment_is_top":false,"comment_ctime":1537934422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832901718","product_id":100017301,"comment_content":"概述：<br>  数据结构和算法解决代码的“快”“省”，而时间、空间复杂度做为数据结构和算法的精髓，很直观说明了代码”多快“”多省“。<br>   因为测试环境的不稳定因素（如同样的代码，i7比i3快得多），测试规模对测试结果影响很大（有些算法更适用于大规模数据），所以需要复杂度分析。<br>   所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比    T(n) = O(f（n）)<br>大 O 时间复杂度并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，也叫作渐进时间复杂度，简称时间复杂度<br>   时间复杂度分析<br>1.只看执行次数最多的一段代码 2.加法法则：总复杂度等于量级最大的那段代码的复杂度 3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>常见的时间复杂度：O(1)、O(logn)、O(nlogn)、O(m+n)、O(m*n)<br>空间复杂度分析<br>空间复杂度的全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系<br>常见的时间复杂度：O(1)、O(n)、O(n2 )<br>       越高阶复杂度的算法，执行效率越低<br><br>思考：性能测试时环境不稳定，规模易变，而分析时间复杂度，空间复杂度，效率快，高效、易操作、还能降低开发、维护成本，从根源上解决效率问题；","like_count":1},{"had_liked":false,"id":27720,"user_name":"cbing","can_delete":false,"product_type":"c1","uid":1010179,"ip_address":"","ucode":"61399122B2E62D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/03/a3b0d635.jpg","comment_is_top":false,"comment_ctime":1537932677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832899973","product_id":100017301,"comment_content":"1、「其中，非多项式量级只有两个：O(2n) 和 O(n!)。」 对数也算多项式量级吗？<br><br>2、「我们把时间复杂度为非多项式量级的算法问题叫作NP（Non-Deterministic Polynomial，非确定多项式）问题。」 为什么把非多项式量级的问题称为 非确定-的-多项式问题呢，这样不是变成多项式了吗？<br>","like_count":1},{"had_liked":false,"id":27705,"user_name":"屈超","can_delete":false,"product_type":"c1","uid":1054877,"ip_address":"","ucode":"98025A827041A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/9d/23dd0017.jpg","comment_is_top":false,"comment_ctime":1537931274,"is_pvip":true,"replies":[{"id":"9972","content":"总结的不错👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937718,"ip_address":"","comment_id":27705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832898570","product_id":100017301,"comment_content":"重点知识提炼<br>事后统计法的缺点：<br>1.测试结果非常依赖测试环境<br>2.测试结果受数据规模的影响很大<br><br>大O复杂度表示法（渐进时间复杂度）：T(n) = O(f(n))<br>代码的执行时间与代码每行的总的执行次数成正比，表示代码执行时间随数据规模增长的变化趋势<br><br>方法：<br>1.只关注循环执行次数最多的一段代码<br>2.总的时间复杂度就等于量级最大的那段代码的时间复杂度<br>3.嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>复杂度量级分为：<br>1.多项式量级：<br>O(1)、O(logn)、O(n)、O(nlogn)、O(n^2)&#47;O(n^k)<br>2.非多项式量级(非确定多项式NP，表示非常低效的算法)：O(2^n)、O(n!) <br><br>空间复杂度（渐进空间复杂度）：<br>表示存储空间随数据规模增长的变化趋势<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425011,"discussion_content":"总结的不错👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27679,"user_name":"o9","can_delete":false,"product_type":"c1","uid":1101332,"ip_address":"","ucode":"E373E82A39BBFE","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","comment_is_top":false,"comment_ctime":1537928590,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5832895886","product_id":100017301,"comment_content":"看完之后发现还没有把大学学的知识全部交给老师，哈哈。讲的很棒！期待下一篇","like_count":1},{"had_liked":false,"id":27509,"user_name":"挨踢菜鸟","can_delete":false,"product_type":"c1","uid":1195409,"ip_address":"","ucode":"CC208C8749B228","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZuwMDaoJviaf3lZ5BOgAvTzLzmbGrMrCZ22krLSRyxpKUrVicU9pSnWsyuSHjksyNldBpXrRzUqeA/132","comment_is_top":false,"comment_ctime":1537916965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832884261","product_id":100017301,"comment_content":"老师，第二个例子中，第6.7行为什么是2n平方遍而不是n平方遍呢？","like_count":1},{"had_liked":false,"id":27489,"user_name":"子清","can_delete":false,"product_type":"c1","uid":1106345,"ip_address":"","ucode":"2E2E82AD5B1680","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/a9/64a2fe3a.jpg","comment_is_top":false,"comment_ctime":1537894584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832861880","product_id":100017301,"comment_content":"性能测试应该是测试总体性能，但是当要去优化时应该分析下每段代码的时间和空间复杂度，才知道哪些代码需要优化","like_count":1},{"had_liked":false,"id":27482,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1537893141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832860437","product_id":100017301,"comment_content":"大学只学过时间复杂度分析，看之前对O（1）和O（n）之间的区别还有些迷惑，现在懂了。第一节还是比较基础，暂时能够理解，也可能是大学学过的缘故。","like_count":1},{"had_liked":false,"id":27474,"user_name":"Skyell","can_delete":false,"product_type":"c1","uid":1243003,"ip_address":"","ucode":"F5E826F6BAA638","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/7b/7e7625ae.jpg","comment_is_top":false,"comment_ctime":1537891988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832859284","product_id":100017301,"comment_content":"沙发？干货满满啊","like_count":1},{"had_liked":false,"id":360824,"user_name":"一个失去拖拉机的刀手","can_delete":false,"product_type":"c1","uid":3205480,"ip_address":"上海","ucode":"9374885A8D3D49","user_header":"https://static001.geekbang.org/account/avatar/00/30/e9/68/1bff8dfd.jpg","comment_is_top":false,"comment_ctime":1666879482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666879482","product_id":100017301,"comment_content":"Q1：性能测试和 代码的时间复杂度，空间复杂度是否冲突？<br>时间，空间复杂度相当于 在 写代码的指定想法，复杂度思考会指引coder 按照较好的线路进行coding，有好的思维逻辑指导才会code出性能更好的code。复杂度相当于过程指导，性能测试相当于结果映射<br>Q2：复杂度分析是否会浪费时间？<br>不会，因为是估算出变化趋势，孰能生巧","like_count":0},{"had_liked":false,"id":360165,"user_name":"Geek_1b3b4b","can_delete":false,"product_type":"c1","uid":3202852,"ip_address":"安徽","ucode":"3F61B5964C37AE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0MCsGbBt0TwsUKgLm4iccLC1j6lA9VU9C4a6sJqW1bzFoG3ENv6KIL6vAYJuLvViaROkGzNs1qQPQ/132","comment_is_top":false,"comment_ctime":1666248172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666248172","product_id":100017301,"comment_content":"之前说过，事后统计法是很依赖测试环境和数据规模，即使可能在性能优越机器上耗时很低，但是如果在低端机器跑可能就不一样，那数据集也是一样。只有再做代码的时间复杂度、空间复杂度分析，才能对测试代码质量进行准确评估，这也是代码评审好处吧。可以看到别人提交代码优点和缺点。<br>只有对自己写的每行代码进行准确评估，那性能定位问题其实可以很快定位。让垃圾代码远离我们，只有未雨绸缪才能闲庭若步","like_count":0},{"had_liked":false,"id":360155,"user_name":"面包客","can_delete":false,"product_type":"c1","uid":3203706,"ip_address":"广东","ucode":"5A5559A9F9FE11","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/vAVuY5B2JkbwCSnfNAXx9S1dVak35JnFvMuTc8PhywCeQicfDSyiaLGbjPUYYDIaaIddcumfw1aUwJUyKRvtgicWg/132","comment_is_top":false,"comment_ctime":1666238802,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1666238802","product_id":100017301,"comment_content":"（1）不是多此一举，先做性能测试再做时复杂度分析相当于实际与理论相结合，可以两者相比较修改后得到性能更高的代码，而不是简单的测试完没问题就行了。<br>（2）每段代码的复杂度分析是为了减少原代码可能出现的效率低的问题","like_count":0},{"had_liked":false,"id":360105,"user_name":"忆达夫","can_delete":false,"product_type":"c1","uid":1923213,"ip_address":"上海","ucode":"6E907300B08F98","user_header":"https://static001.geekbang.org/account/avatar/00/1d/58/8d/aafec657.jpg","comment_is_top":false,"comment_ctime":1666176929,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666176929","product_id":100017301,"comment_content":"我居然看懂了","like_count":0},{"had_liked":false,"id":360103,"user_name":"胖胖","can_delete":false,"product_type":"c1","uid":3203743,"ip_address":"江苏","ucode":"970ADF70A10191","user_header":"https://static001.geekbang.org/account/avatar/00/30/e2/9f/d9a70817.jpg","comment_is_top":false,"comment_ctime":1666175742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666175742","product_id":100017301,"comment_content":"一孰能生巧，简单的练习可以可以加快掌握<br>二通过复杂度的分析可以更好的了解代码，是否有优化空间，去优化","like_count":0},{"had_liked":false,"id":360081,"user_name":"🐙","can_delete":false,"product_type":"c1","uid":2469428,"ip_address":"陕西","ucode":"4659D4B675E9C1","user_header":"https://static001.geekbang.org/account/avatar/00/25/ae/34/a7a5671a.jpg","comment_is_top":false,"comment_ctime":1666167256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666167256","product_id":100017301,"comment_content":"性能测试确定了运行时间和空间的上限和基本预期，同时是对实际的运行环境和较大数据规模数据运行状况的检验，方便我们利用复杂度分析法进行性能优化。<br>每一段代码进行分析的确浪费时间，但对于代码在时间和空间维度的节约起到重要作用，同时也是考验程序员对每一段代码的把控水准。","like_count":0},{"had_liked":false,"id":359577,"user_name":"Geek_67bed1","can_delete":false,"product_type":"c1","uid":1843567,"ip_address":"北京","ucode":"0186E90BA0437D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/u9X0qf7OlqoCiaUjoaO7Z2b8a1dSp83QCIVZYn9KfneadyOY50LUtF4ZGt1e3Su8Ug81yFQibDxn7kd7rkBRicJMw/132","comment_is_top":false,"comment_ctime":1665654270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665654270","product_id":100017301,"comment_content":"王老师，就是我们在算法的过程中，如何判断语言自带的api的算法复杂度呢。比如js语言提供的Object.keys，Array.prototype.indexOf, Array.prototype.split这种方法，我倾向于他们的算法复杂度是O(n)，这样的话，我们就可以通过算法复杂度去评测业务代码的好坏了。","like_count":0},{"had_liked":false,"id":359117,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"广东","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1665277930,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1665277930","product_id":100017301,"comment_content":"其实很简单，这就是个单选题，你拿答案一个一个套，总有一个是正确的。","like_count":0},{"had_liked":false,"id":358557,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1009786,"ip_address":"广东","ucode":"9993B42B5437F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/7a/09ca3326.jpg","comment_is_top":false,"comment_ctime":1664424070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664424070","product_id":100017301,"comment_content":"首先说下我对思考题的看法：<br>我觉得倒不算是多此一举，而是相辅相成，优化点不同。关注时间复杂度和空间复杂度有助于写好局部的代码计算逻辑，这里的性能主要于数据量和算法相关；而项目性能测试更多是关注于整体流程上的性能结果，这里会有更多的外部因素相关，比如硬件配置、网络、i&#47;o操作、数据库或中间件或模块间调用。前者把每一段代码写好，后者把模块于流程设计好。<br><br><br>王争老师的课使我茅塞顿开，很易懂。我是一名从业多年的资深工程师，做出了一些大型的千万级流量产品，但那更多是软件工程和架构设计方面。过去一直把精力投入在实战上面，而忽略了数据结构与算法这门课，一度认为不实用且晦涩难懂。现在发现原来是自己的认知给自己埋下了困难的心里障碍，现在听王争老师的课竟然很容易就懂了，对余下的课程很期待。","like_count":0},{"had_liked":false,"id":358260,"user_name":"Geek_93cecd","can_delete":false,"product_type":"c1","uid":3176219,"ip_address":"浙江","ucode":"1AEA57E57AC174","user_header":"","comment_is_top":false,"comment_ctime":1664151043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664151043","product_id":100017301,"comment_content":"时间复杂度分析：<br>1.只关注循环执行次数最多的一段代码<br>2.加法原则：总复杂度等于量级最大的那段代码的复杂度<br>（特殊情况，当两段代码复杂度无法评估谁更大时，直接写O（m+n））<br>3.乘法原则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>几种常见的时间复杂度：O（1），O（n），O（logn），O（nlogn），O（n²），O（n³）……<br>O（2²），O（n！）<br><br>空间复杂度：<br>算法的存储空间与数据规模之间的增长关系<br>常见空间复杂度：：O（1），O（n），O（n²）","like_count":0},{"had_liked":false,"id":358176,"user_name":"郑卫林","can_delete":false,"product_type":"c1","uid":1941858,"ip_address":"广东","ucode":"13D14BDDCBC7AC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ff70ZuQbiaP0aUkNPasRkHfyIEyGLsMBd1EYQgQYZRoH85c4SsibWHJgA3u0X4Z8QyxHs17ausF2V4oN9hdYyfRg/132","comment_is_top":false,"comment_ctime":1664003644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664003644","product_id":100017301,"comment_content":"时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系，空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系","like_count":0},{"had_liked":false,"id":358159,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1663982748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663982748","product_id":100017301,"comment_content":"有必要的，就和开头说的一样：1. 不同的机器，执行时间不同 2. 数据不同也不同。而分析的话可以对代码的执行有一个大概的认识，这样测试完后如果有问题也可以有办法去改进。不然对于改进无从下手。","like_count":0},{"had_liked":false,"id":357892,"user_name":"Affection","can_delete":false,"product_type":"c1","uid":3180229,"ip_address":"日本","ucode":"82DA3022AE837E","user_header":"https://static001.geekbang.org/account/avatar/00/30/86/c5/6b80b4ac.jpg","comment_is_top":false,"comment_ctime":1663735763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663735763","product_id":100017301,"comment_content":"我觉得时间复杂度和空间复杂度的分析很有必要。就像是社会法则一样，优胜劣汰，如果有更优秀的处理方法没道理不去用。而怎么去评判一个处理方法就得要考两个复杂度的分析。光看性能并不能得出一个准确的结论，开发岗用的cpu肯定是给力的，但是你要考虑到大部分的用户(特别是手机开发)其实设备性能并不是很好，能够提炼出一个满足任何设备性能的软件&#47;游戏才是开发的本心。所以才需要潜心钻研怎么样能更快怎么样能占用更少资源","like_count":0},{"had_liked":false,"id":357360,"user_name":"大少爷","can_delete":false,"product_type":"c1","uid":3179313,"ip_address":"山东","ucode":"55114E4C15B637","user_header":"https://static001.geekbang.org/account/avatar/00/30/83/31/cf03c77b.jpg","comment_is_top":false,"comment_ctime":1663203755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663203755","product_id":100017301,"comment_content":"m*n和m+n那个例子时间复杂度到底是多少？感觉不太通顺","like_count":0},{"had_liked":false,"id":356892,"user_name":"Geek_3eabb6","can_delete":false,"product_type":"c1","uid":1925704,"ip_address":"天津","ucode":"04196AAAB0D21D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ficC1F523ibmj3aptMZjIOYiawRUpLIsedvzybribeIx67tFdnNOPYYJfZdicMJdytVXXLiaib1qnoZcYPLibnOuf99OxQ/132","comment_is_top":false,"comment_ctime":1662687726,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662687726","product_id":100017301,"comment_content":"不是多此一举。判断是否多此一举要看目的和达成的结果是否重复。我认为是不重复的。<br>类比造飞机，性能测试就是飞机造好了，看能飞多快飞多高，飞行是否平稳。时间、空间复杂度分析就是每造好一个零件，都根据一个标准检查一下，是否合格。很明显，作用不是完全相同的，没有可替代性。<br>其次，我们可以看一下如果没有时间、空间复杂度分析，只有性能测试，可能会出现的问题。<br>第一，发现问题的时间节点会被推迟。如果有时间、空间复杂度分析，写完方法就可以发现问题，方法是否复杂度过高。如果没有，就只能在代码都写完，性能测试时才能发现问题。<br>第二，找到问题源头的难度增大。如果有时间、空间复杂度分析，直接看方法是否复杂度过高就行了。如果没有，就只能看到系统的性能有问题、慢。但无法直接确定是哪段代码导致的。需要追本溯源，一点点找到源头。难度大，花费时间长。<br>第三，修改代价高。如果有时间、空间复杂度分析，在开发过程中，直接修改方法本身就行了。可能需要考虑和方法相关的一些地方，但还是相对较少。如果没有，就需要考虑对整个系统的影响，是否可以改，改了会影响什么。<br>看了下其他同学的留言，再补充几点。<br>1.性能测试可能无法覆盖到所有情况，如果线上的数据规模超出了性能测试的覆盖范围，可能会出问题。<br>2.性能测试是实践，时间、空间复杂度分析是理论。性能测试受环境影响较大。<br>开篇的时候也有说过事后统计法的局限性。第一，测试结果非常依赖测试环境。第二，测试结果受数据规模的影响很大。<br>所以，结论是最好两个都要有。相辅相成。","like_count":0},{"had_liked":false,"id":356389,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1476245,"ip_address":"重庆","ucode":"2668A965FA79F2","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/95/b9d960d9.jpg","comment_is_top":false,"comment_ctime":1662257797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662257797","product_id":100017301,"comment_content":"好的代码不是一次就写出来的，需要不断的测试与修改，基于不同场景，不同数据规模，不同的机器下同一段代码的运行结果有差异，怎么缩小差异化提高整体的性能就需要性能测试，测试的过程中出现的局部问题就需要用到时间空间复杂度分析。时间空间复杂度分析给代码的修改提供了一个标准，在什么场景下应该选择时间或者空间","like_count":0},{"had_liked":false,"id":356311,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662129777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662129777","product_id":100017301,"comment_content":"思考题：性能测试只是了解当前机器环境下代码实际的运行效率。进行复杂度分析可以了解到具体的性能瓶颈在哪，找到优化点。<br><br>本节主要讲了如何计算复杂度。<br>    what 分为时间复杂度和空间复杂度。 复杂度计算是计算渐进复杂度，表示算法的执行时间和空间与数据规模之间的增长关系。<br><br>  how 计算： <br>      1.使用大 O 标记复杂度，可以忽略常数项。<br>      2.计算方法：加法， 乘法，取最高阶。","like_count":0},{"had_liked":false,"id":355886,"user_name":"我和狐狸","can_delete":false,"product_type":"c1","uid":3167968,"ip_address":"广东","ucode":"F27AD8B7B4FBE4","user_header":"https://static001.geekbang.org/account/avatar/00/30/56/e0/44f11a31.jpg","comment_is_top":false,"comment_ctime":1661829145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661829145","product_id":100017301,"comment_content":"所有代码的执行时间 T(n) 与 每行代码执行的次数之和 f(n) 成正比","like_count":0},{"had_liked":false,"id":355635,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"北京","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1661576158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661576158","product_id":100017301,"comment_content":"首先说为什么要做<br><br>分析时间复杂度可以让我们对于函数的执行时间有个简单的概念，当写出 O(n^2) 或者更高的复杂度的函数时，内心就会触发报警，这已经是比较糟糕的复杂度了，我真的要写成这样吗？有没有更好的办法。<br><br>然后说浪费时间的问题<br><br>分析多了以后，一个一二百行的程序，最多几分钟就可以分析出来，花费的时间并不多。而且高复杂度函数报警，可以避免让我们写出非常耗时的代码，这避免了后续遇到问题时的优化工作，从这个角度来看，更是节省了时间。<br><br>总结<br><br>如果需要在 github 文档中或者公司部门会议上说明你的程序的性能优势，还是需要贴出基准测试，相比其他的程序，你快了多少。<br><br>时间复杂度是供自己写代码时简单的思考，或者和同事辩论时提供的小工具，给你提供了一个写出更好代码的思路。","like_count":0},{"had_liked":false,"id":355598,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661525630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661525630","product_id":100017301,"comment_content":"1. T(n) = (2n2+2n+3)*unit_time =&gt;T(n)=O(f(n))<br>2. 时间复杂度统计方法<br>- 只关注循环执行次数最多<br>- 加法法则，Max(O(f(n)))<br>- 乘法法则，O(f(n))*O(f(n))=O(f(n2))<br>多项式量级<br>- O(N!)<br>- O(2n)<br>非多项式量级<br>-O(1) 常量<br>-O(logn) 等比数列特点<br>-O(n)  ，O(M+N) 加法失效<br>-O(nlogn)  乘法法则, 归并排序，快速排序<br>-O(n2,nK)<br><br>空间复杂度<br>- 占的空间大小<br>最常见的 O(1) O(n) O(n2)","like_count":0},{"had_liked":false,"id":355209,"user_name":"一敬","can_delete":false,"product_type":"c1","uid":1136721,"ip_address":"中国台湾","ucode":"5ED541DD7FE728","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/51/fc457d4e.jpg","comment_is_top":false,"comment_ctime":1661172791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661172791","product_id":100017301,"comment_content":"性能的测试只能表达在某几个状态下的执行效率，无法表达在数据规模变化时算法的执行效率会如何变化。我们应该先进行复杂度的分析，然后根据复杂度的变化曲线有针对性的进行性能测试。","like_count":0},{"had_liked":false,"id":354567,"user_name":"我这一次","can_delete":false,"product_type":"c1","uid":3134475,"ip_address":"广东","ucode":"C6EE55B1C3A1AB","user_header":"https://static001.geekbang.org/account/avatar/00/2f/d4/0b/79b60170.jpg","comment_is_top":false,"comment_ctime":1660551612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660551612","product_id":100017301,"comment_content":"时间复杂度和空间复杂度，就是抛开性能测试的一些外界条件，如：硬件，单从数据规模进行分析。可以从时间复杂度和空间复杂度分析，得到数据规模的最优解，然后再从性能测试得到硬件等其他条件的分析","like_count":0},{"had_liked":false,"id":354382,"user_name":"樹","can_delete":false,"product_type":"c1","uid":3119609,"ip_address":"江苏","ucode":"41E789F4062EAF","user_header":"https://static001.geekbang.org/account/avatar/00/2f/99/f9/10c6d492.jpg","comment_is_top":false,"comment_ctime":1660326102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660326102","product_id":100017301,"comment_content":"性能测试后再做时间和空间复杂度测试，我想原因主要有以下几条：<br>1. 实际数据出来之后，对比理论数据，可以发现实际性能是优是良；<br>2. 对照理论数据就像红绿灯一样，可以起到警示作用。","like_count":0},{"had_liked":false,"id":354129,"user_name":"阿巴拉度哈","can_delete":false,"product_type":"c1","uid":2386292,"ip_address":"四川","ucode":"33D594AA76BB70","user_header":"https://static001.geekbang.org/account/avatar/00/24/69/74/6a085422.jpg","comment_is_top":false,"comment_ctime":1660118757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660118757","product_id":100017301,"comment_content":"我不认为多此一举，性能测试后可以分析出来哪些函数是性能瓶颈，根据项目需求有没有必要优化，如果有的话就可以用复杂度分析来帮助改进代码。但每段代码都做复杂度分析就没有太大必要了，有些代码的调用频率很低或者在业务上根本不是瓶颈就没有分析优化的必要了，俗话说好钢用在刀刃上，真正需要性能优化的代码才需要","like_count":0},{"had_liked":false,"id":353705,"user_name":"光着脚丫子飙五环","can_delete":false,"product_type":"c1","uid":1180243,"ip_address":"北京","ucode":"FC4681883A895F","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/53/ed2600ae.jpg","comment_is_top":false,"comment_ctime":1659689496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659689496","product_id":100017301,"comment_content":"看完天才基本法，回来找NP问题","like_count":0},{"had_liked":false,"id":352591,"user_name":"Geek_b14c55","can_delete":false,"product_type":"c1","uid":2027632,"ip_address":"","ucode":"C98EAEC045F13D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MOuCWWOnoQjOr8KjicQ84R7xu6DRcfDv3VAuHseGJ1gxXicKJboA24vOcrcJickTJPwFAU38VuwCGGkGq7f8WkTIg/132","comment_is_top":false,"comment_ctime":1658798501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658798501","product_id":100017301,"comment_content":"1.相当于是代码测试阶段，我的理解是类似于压测之类的，比如和前端联调，需要自己看一下接口返回，来考虑一下性能，是否有优化的点<br>2.写代码分析一下复杂度，复杂度越高，说明随着数据量的增加，代码的执行效率会下降，尤其是对于多级循环问题，所以分析复杂度，可以让自己在写代码初期就减少自己的代码复杂度，而不是等代码都写完了，这样代码链路太长，就不好改动了","like_count":0},{"had_liked":false,"id":351722,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":2942404,"ip_address":"","ucode":"C1AD031F155EFE","user_header":"","comment_is_top":false,"comment_ctime":1658128177,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658128177","product_id":100017301,"comment_content":"并不是多此一举，主要有两方面的原因:<br>1.测试用例是不可能穷举的。我见过我们公司的性能测试，代码覆盖率低的可怜，很多分支代码，甚至很影响性能的循环分支都没跑到，就不要指望能得出多么客观的性能测试报告了。依靠自己的代码分析要可靠的多，所有代码性能都没问题，就不会出现很严重的性能问题。<br>2.如果线上出了性能问题需要快速定位的话，在此之前能做到对主要的代码性能心中有数，解决起问题来也会快的多。","like_count":0},{"had_liked":false,"id":350961,"user_name":"烟花依易冷，人旧憔悴","can_delete":false,"product_type":"c1","uid":3049895,"ip_address":"","ucode":"72E04593C16A7D","user_header":"https://static001.geekbang.org/account/avatar/00/2e/89/a7/79a664d4.jpg","comment_is_top":false,"comment_ctime":1657422357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657422357","product_id":100017301,"comment_content":"看上一篇，信心十足，看写一篇，一脸懵逼<br><br>第 7、8 行代码循环执行了 n2遍，所以需要 2n2 * unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n2+2n+3)*unit_time。 <br>这个地方是根据上一个n决定了下个n的次数，那不应该是2nn么，为什么要是2n2<br>还有就是为什么 nlogn要把n放前面呢，放在后面写成lognn不好么。","like_count":0},{"had_liked":false,"id":350861,"user_name":"胡皓","can_delete":false,"product_type":"c1","uid":2974311,"ip_address":"","ucode":"DD94F033D37AF3","user_header":"","comment_is_top":false,"comment_ctime":1657261071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657261071","product_id":100017301,"comment_content":"嵌套循环和双层for循环有什么区别……","like_count":0},{"had_liked":false,"id":350792,"user_name":"WangK","can_delete":false,"product_type":"c1","uid":2724977,"ip_address":"","ucode":"245A2C18CC4A16","user_header":"https://static001.geekbang.org/account/avatar/00/29/94/71/b70b2f9d.jpg","comment_is_top":false,"comment_ctime":1657197793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657197793","product_id":100017301,"comment_content":"性能测试，会局限于不同的设备平台，而复杂度分析则是基于代码本身的效率，养成复杂度分析的习惯，能有效提升我们写出高质量高效率的代码","like_count":0},{"had_liked":false,"id":349852,"user_name":"DRay-Z","can_delete":false,"product_type":"c1","uid":3008684,"ip_address":"","ucode":"CE4890A23F59DC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/e8/ac/352dc84a.jpg","comment_is_top":false,"comment_ctime":1656386808,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656386808","product_id":100017301,"comment_content":"复杂度分析<br>优点：<br>1. 不用具体的测试数据来测试，<br>就可以粗略地估计算法的执行效率的方法。<br>2. 在写程序的时候，提供感性认识，比如：<br>算法1的时间复杂度是O(n)，算法2的时间复杂度是O(logN)，这样我们立刻就对不同的算法有了一个“效率”上的感性认识（引用评论优质问答，感谢！🙇‍）<br>缺点：<br>只能粗略估计分析，只能粗略估计分析，<br>我们不能直接断定就觉得O(logN)的算法一定优于O(n), 针对不同的宿主环境，不同的数据集，不同的数据量的大小，在实际应用上面可能真正的性能会不同，故进行一定的性能基准测试很有必要（要控制变量）（引用评论优质问答，感谢！🙇‍）<br>事后分析：<br>优点：<br>是正确的，更贴近实际，提供理性认识<br>缺点：<br>测试结果受测试环境、数据规模的影响很大，且是事后分析<br><br>综上，复杂度分析与事后分析法并不冲突，相辅相成","like_count":0},{"had_liked":false,"id":349851,"user_name":"DRay-Z","can_delete":false,"product_type":"c1","uid":3008684,"ip_address":"","ucode":"CE4890A23F59DC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/e8/ac/352dc84a.jpg","comment_is_top":false,"comment_ctime":1656386624,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656386624","product_id":100017301,"comment_content":"\t1. 时间复杂度分析<br>\t\ta. 原理<br>\t\t\ta. 假设<br>\t\t\t\t1) 做假设基于的规律：所有代码的执行时间 T(n) 与每行代码的执行次数 f(n) 成正比。<br>\t\t\t\t2) 从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。由于是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。<br>\t\t\tb. 内容：T(n) = O( f(n) )<br>\t\t\t\t1) 例子： T(n) = O(2n+2)    T(n) = O(2n2+2n+3)<br>\t\t\t\t2) 涵义：代码执行时间随数据规模增长的变化趋势。&#47; 一个算法执行效率与数据规模增长变化的趋势<br>\t\tb. 特点<br>\t\t\ta. 类似数学上无穷大的比较，并不关注低阶、常量、系数三部分，因为他们并不左右增长趋势，我们只关注最大量级<br>\t\tc. 应用<br>\t\t\ta. 分析技巧（3）<br>\t\t\t\t1) 单段代码看高频<br>\t\t\t\t\t1) 比如循环、递归<br>\t\t\t\t2) 多段代码取最大<br>\t\t\t\t\t1) 代码比较长的时候，可以分开计算，比如 sum_1、sum_2、sum_3。<br>\t\t\t\t3) 嵌套代码求乘积<br>\t\t\t\t\t1) 要关注什么样的嵌套？直观的比如for多层嵌套，不直观的，比如for嵌套中引用别的码农自己写的代码<br>\t\t\t\t4) 多个未知求加法<br>\t\t\tb. 常见实例分析<br>\t\t\t\t1) 序<br>\t\t\t\t    粗略分成两类，多项式量级和非多项式量级，<br>\t\t\t\t2) 多项式量级<br>\t\t\t\t\t1) O( 1 )<br>\t\t\t\t\t\ta) 一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。<br>\t\t\t\t\t2) O( log n ) 、O(n log n )<br>\t\t\t\t\t\ta) 文章讲的清楚，这里提一句，如何发现？--当循环条件是 i&lt;n 但循环体中 i = i * c(常数) 而不是i=i+c 的时候复杂度就是O( log n )(循环次数是 n&#47;&#47;c 不关注系数，故时间复杂度为O( n ))<br>\t\t\t\t\t\tb) 还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。<br>\t\t\t\t\t3) O(m+n)、O(m*n)<br>\t\t\t\t\t\ta) 当存在多个数据规模，且无法判断哪个数据规模大的时候，无法直接套用加法法则，需要保留多个数据规模。<br>\t\t\t\t\t\tb) 什么时候无法判断？--循环次数与函数调用时输入的参数相关<br>\t\t\t\t3) 非多项式量级<br>\t\t\t\t\t1) 也叫做 NP（Non-Deterministic Polynomial，非确定多项式）问题。<br>\t\t\t\t\t2) 其中，非多项式量级只有两个：O(2n) 和 O(n!)。<br>\t\t\t\t\t3) 当数据规模n越来越大，非多项式算法时间会急剧增长，求解时间会无限延长，故这种算法效率非常低<br>","like_count":0},{"had_liked":false,"id":349129,"user_name":"来个蟹黄堡","can_delete":false,"product_type":"c1","uid":1612686,"ip_address":"","ucode":"7E24592E0BDC6F","user_header":"https://static001.geekbang.org/account/avatar/00/18/9b/8e/5b64649e.jpg","comment_is_top":false,"comment_ctime":1655741373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655741373","product_id":100017301,"comment_content":"记录：<br>时间复杂度：代码运算时间和数据规模的增长之间的关系。当数据非常大的时候，其他的执行都可以忽略不计，其实也就影响数据的是最大关系者。<br>空间复杂度：代码运行所占用的空间和数据规模的增长之间的关系。","like_count":0},{"had_liked":false,"id":348912,"user_name":"蔡洪宝","can_delete":false,"product_type":"c1","uid":3010867,"ip_address":"","ucode":"CFA04CC9A087D7","user_header":"https://static001.geekbang.org/account/avatar/00/2d/f1/33/4de9affe.jpg","comment_is_top":false,"comment_ctime":1655540260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655540260","product_id":100017301,"comment_content":"老师的讲解非常清晰，讲的太好了","like_count":0},{"had_liked":false,"id":348682,"user_name":"yl120064227","can_delete":false,"product_type":"c1","uid":2865070,"ip_address":"","ucode":"66E19E8A027D29","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b7/ae/376dd048.jpg","comment_is_top":false,"comment_ctime":1655300086,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655300086","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br> 答：不是多此一举，复杂度分析是指一个算法执行效率与数据规模增长的变化趋势，从而引出了时间复杂度（算法执行时间与数据规模增长之间的关系），空间复杂度（算法存储空间与数据规模增长之间的关系），可以在性能测试之前就能判断算法性能，从而节约资源（时间和存储空间），类似机械零件设计之前都会仿真计算，从而降低经验判断的资源浪费，提高效率。<br>  复杂度分析是为性能测试提供指导，性能测试可以验证分析的正确性，相辅相成。","like_count":0},{"had_liked":false,"id":348490,"user_name":"东方拓睿","can_delete":false,"product_type":"c1","uid":1605058,"ip_address":"","ucode":"1FD25D75CAC7C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","comment_is_top":false,"comment_ctime":1655133464,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655133464","product_id":100017301,"comment_content":"项目性能测试就是相当于事后统计，其实测试的性能结果与很多东西相关，算法效率，软硬件的性能，网络条件等等，数据规模相关，并不能精准反映代码的性能。而做时间复杂度，和空间复杂度分析有几个好处<br>1、不受软硬件平台的限制，精准的反映代码执行效率<br>2、不受数据规模的影响<br>3、长期做时间复杂度、空间复杂度分析，有助于在代码运行前就考虑到执行效率，比运行后再优化，效率高<br>4、养成良好的编程习惯，在编程的时候时刻注意代码执行效率问题，有助于写出高效的代码","like_count":0},{"had_liked":false,"id":348052,"user_name":"笨笨程序猿","can_delete":false,"product_type":"c1","uid":1805343,"ip_address":"","ucode":"C1C595B9778601","user_header":"","comment_is_top":false,"comment_ctime":1654690716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654690716","product_id":100017301,"comment_content":"理论指导实践，但是也需要通过实验结果去检验理论，这样才能发现理论和实验结果的出入，并尝试去找到最优解。","like_count":0},{"had_liked":false,"id":347359,"user_name":"Vivion","can_delete":false,"product_type":"c1","uid":1242310,"ip_address":"","ucode":"C62C4F46B8EB4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c6/aed9e44a.jpg","comment_is_top":false,"comment_ctime":1653967779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653967779","product_id":100017301,"comment_content":"事先代码层面的分析，与事后性能测试，最大区别是代码没有在机器上跑起来。所以不至于让性能问题直到程序编译运行了之后才发现。<br>而且，事前的分析，并不需要像性能测试一样占用大量的时间。<br>还能有助于自己保持意识写出高质量代码。","like_count":0},{"had_liked":false,"id":346562,"user_name":"bd7xzz","can_delete":false,"product_type":"c1","uid":1003006,"ip_address":"","ucode":"420199A024D4F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fe/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1653231014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653231014","product_id":100017301,"comment_content":"1.性能测试是基于原有的经验和对业务增长量初步预估，很多情况下新的业务无法提供历史经验，甚至无法做到用户调用量、空间等预估。所以这时候就需要分析时间空间复杂度，比如往redis存数据，选用什么数据结构读写快？是否会出现大key的情况<br>2.性能压测通常是代码集成后进行的，而时间复杂度和空间复杂度大多是行级别、方法级别的，维度不同、关注点不同。同时精细化的时间复杂度分析应对了那句老话，细节决定成败。记得微信的一个架构师说过，在亿级流量下，改一行代码都心惊胆战，可见细节的重要性。<br>3.国内性能压测通常作为事后分析法，包括全链路压测，很少有人做单元性质的性能压测。<br>所以个人认为分析时间复杂度、空间复杂度并不是浪费时间，一个好的方案就是在论证并解决失败、错误、异常、边界的case。做好时间复杂度和空间复杂度分析是必要的。","like_count":0},{"had_liked":false,"id":344947,"user_name":"许登旺","can_delete":false,"product_type":"c1","uid":2924912,"ip_address":"","ucode":"2E8275C336EA42","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBKUcF74HD3nS5xrvfQwQCWYUz6zHCNEZ0480TqFxGqNLd3lCr62JZ05JE9jujkWVkGtUFNvvASg/132","comment_is_top":false,"comment_ctime":1651890688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651890688","product_id":100017301,"comment_content":"时间复杂度是把代码执行的时间消耗，使用数据公式【数学建模】方式分析，以了解算法执行的时间趋势<br>代码是将算法、模型具体化，解决现实问题","like_count":0},{"had_liked":false,"id":344702,"user_name":"深水蓝","can_delete":false,"product_type":"c1","uid":1637933,"ip_address":"","ucode":"3E3B195DE54DE1","user_header":"https://static001.geekbang.org/account/avatar/00/18/fe/2d/e23fc6ee.jpg","comment_is_top":false,"comment_ctime":1651731647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651731647","product_id":100017301,"comment_content":"我觉得在项目中做复杂度分析是很有必要的，很多稍微有一些规模的项目（不用很大规模），往往都需要开发比较长的时间，如果到项目或者某些算法开发完成了才发现时间复杂度太高，需要优化。可能成本代价是非常高的。<br><br>在实际项目中，必须根据项目的需求，估算数据的规模。在开发过程中时刻知道自己的代码的时间和空间复杂度，如果计算机资源在最大数据规模下不能提供良好的体验，这些技术点就需要成为项目难点集中攻克，如果无法突破，项目也只能终止或者妥协了（止损）。<br><br>在开发过程中关注复杂度的分析，另一个比较重要的因素是当项目需求有变更的时候（例如数据规模的预期变大了，特定的硬件平台买不到了只能用性能更低的平台），可以比较准确快捷地估算出需求变化之后项目所呈现的效果（例如那些功能需要削减，那些计算资源不能妥协等等）","like_count":0},{"had_liked":false,"id":344470,"user_name":"Mr.L","can_delete":false,"product_type":"c1","uid":2400757,"ip_address":"","ucode":"E180F5329D8F87","user_header":"https://static001.geekbang.org/account/avatar/00/24/a1/f5/163de665.jpg","comment_is_top":false,"comment_ctime":1651573215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651573215","product_id":100017301,"comment_content":"为什么大学上课的时候一知半懂，现在看专栏一下就懂了，是我变强了还是老师教得好🌝🌝","like_count":0},{"had_liked":false,"id":342821,"user_name":"Geek_e2c59e","can_delete":false,"product_type":"c1","uid":2708942,"ip_address":"","ucode":"14B60545ABB9F4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VzjUV1Io39wvVzLpdyF2ibIodS1JpTiaDKosSQSWDMgSjhxrWUSQYwUzK3cSeJW5Zz3zwLlDnyKcX1QAib9TCcvAw/132","comment_is_top":false,"comment_ctime":1650494824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650494824","product_id":100017301,"comment_content":"不管是时间复杂度分析还是空间复杂度分析，我理解都是取最大值，项目当中的多重嵌套循环是不是要尽量避免呢","like_count":0},{"had_liked":false,"id":341262,"user_name":"Qin","can_delete":false,"product_type":"c1","uid":2967307,"ip_address":"","ucode":"5647EF34F0EB9F","user_header":"https://static001.geekbang.org/account/avatar/00/2d/47/0b/56c393a9.jpg","comment_is_top":false,"comment_ctime":1649488622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649488622","product_id":100017301,"comment_content":"并不是一种时间的浪费，时间和空间复杂度的分析看似“浪费时间”，但是，它却能够让我们在程序的具体实现时结合不同数据结构的时间空间复杂度的大小，操作系统所能支撑的内存，以及我们对于程序的运行速度的要求给出适合这个程序的数据结构和算法，如果省略了前面对时间和空间复杂度的分析，在后面发现内存不足或者性能过差问题再回来调整，效率明显大大下降了。所以，对于世界和空间复杂度的提前分析，是很有必要的。","like_count":0},{"had_liked":false,"id":341127,"user_name":"家号","can_delete":false,"product_type":"c1","uid":1235717,"ip_address":"","ucode":"EB2CCB27FA6DB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/05/65b1fbc7.jpg","comment_is_top":false,"comment_ctime":1649381034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649381034","product_id":100017301,"comment_content":"代码局部最优解，和整体最优解。所以都需要","like_count":0},{"had_liked":false,"id":341011,"user_name":"易安","can_delete":false,"product_type":"c1","uid":2962261,"ip_address":"","ucode":"4984A4072A868F","user_header":"https://static001.geekbang.org/account/avatar/00/2d/33/55/43cacdcb.jpg","comment_is_top":false,"comment_ctime":1649294139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649294139","product_id":100017301,"comment_content":"很棒","like_count":0},{"had_liked":false,"id":341008,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1649292970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649292970","product_id":100017301,"comment_content":"并不多此一举，对空间和时间复杂度分析，可以让我们思考是否还有更好的数据结构和算法去做优化。 ","like_count":0},{"had_liked":false,"id":340674,"user_name":"clemask","can_delete":false,"product_type":"c1","uid":1027141,"ip_address":"","ucode":"62315A976F84D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/45/31fc5bfd.jpg","comment_is_top":false,"comment_ctime":1649039472,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649039472","product_id":100017301,"comment_content":"性能测试依赖于测试环境，数据规模这样的硬性条件；而时间复杂度，空间复杂度是一种模型预测，是剥离了环境的复杂状况，只受数据规模趋涨来预估造成的影响。","like_count":0},{"had_liked":false,"id":340491,"user_name":"中中","can_delete":false,"product_type":"c1","uid":2664782,"ip_address":"","ucode":"FD3E4F585BE7C9","user_header":"https://static001.geekbang.org/account/avatar/00/28/a9/4e/6feba224.jpg","comment_is_top":false,"comment_ctime":1648863827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648863827","product_id":100017301,"comment_content":"性能测试的影响因素太多，跟机器性能有关。<br>本节知识点：<br>1、时间复杂度和空间复杂度的全称是渐近时间复杂度和渐近空间复杂度，表示的算法执行快慢和占用空间大小与数据规模之间的关系；<br>2、不管是100还是100000，只要跟n不扯上关系，那么时间复杂度就是常量级的；<br>3、计算复杂度三大原则（基本思想是时间复杂度与执行次数是成正比关系的）：<br>①只关注执行的最多的那行代码；<br>②加法原则，最后看的是量级最大的；<br>③乘法原则，主要是针对嵌套循环的情况。","like_count":0},{"had_liked":false,"id":340450,"user_name":"Geek_3eabb6","can_delete":false,"product_type":"c1","uid":1925704,"ip_address":"","ucode":"04196AAAB0D21D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ficC1F523ibmj3aptMZjIOYiawRUpLIsedvzybribeIx67tFdnNOPYYJfZdicMJdytVXXLiaib1qnoZcYPLibnOuf99OxQ/132","comment_is_top":false,"comment_ctime":1648818045,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648818045","product_id":100017301,"comment_content":"还是看具体情况吧。如果确实项目规模小数据量不大，那也确实没什么必要。但是如果是大厂，数据量非常大，就是必要的了。总不能等到代码写完了，测试的时候发现性能瓶颈全部返工吧。只能在写之前就想好设计好。磨刀不误砍柴功嘛。而且习惯了之后感觉应该也不会费什么时间，直接就不会写那种复杂度高的代码或者一眼就看出复杂度了。","like_count":0},{"had_liked":false,"id":340005,"user_name":"武佳铖","can_delete":false,"product_type":"c1","uid":2943649,"ip_address":"","ucode":"02E2FD44B44AB9","user_header":"https://static001.geekbang.org/account/avatar/00/2c/ea/a1/f13da3ac.jpg","comment_is_top":false,"comment_ctime":1648536997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648536997","product_id":100017301,"comment_content":"两个数规模那一段不知道自己的理解是否准确？大o表达式表达的是所有代码执行时间和最复杂度代码行数的正比，也就是说随着量级变大时间也相应的变大的关系，所以这端代码并不适合用加法法则，加法法则是取多个中最复杂的一个，如果m和n都是未知的那么无法取最大的一个，，但是乘法法则依然可以表达出时间和复杂度关系","like_count":0},{"had_liked":false,"id":339105,"user_name":"Ares","can_delete":false,"product_type":"c1","uid":2027643,"ip_address":"","ucode":"DFB8FDCA0100D6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f0/7b/dadb931a.jpg","comment_is_top":false,"comment_ctime":1647918454,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647918454","product_id":100017301,"comment_content":"课后思考：<br>项目性能测试，只能事后完成，代码已经完成，如果发现问题也不好返工。<br>如果只是开发过程中不考虑时间效率，相当于只是累加代码，对自己不会有任何提高。<br>如果对于一个比较大型的项目，分析复杂度，挑选性能更高的写法，会有质的飞跃。","like_count":0},{"had_liked":false,"id":338749,"user_name":"林海俭","can_delete":false,"product_type":"c1","uid":1973346,"ip_address":"","ucode":"403020C3201C90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6ssNfBGQXiafTSCBHtl4L7ykIBjqZMMpWU3v4ibwP0APYzWk88zELRaJXUNMIVcuWpkb0Q3x0CicYxg/132","comment_is_top":false,"comment_ctime":1647699718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647699718","product_id":100017301,"comment_content":"我认为分析时间和空间复杂度是非常必要的，因为工作中会有很多场景不是通过常量来实现的，通过分析复杂度优化合适的代码，可以使得未来数据大量膨胀时，不会对整体的性能产生很大的影响。当然如果是确定常量级的代码实现，也是可以不用每次都分析的。","like_count":0},{"had_liked":false,"id":338735,"user_name":"AFlymamba","can_delete":false,"product_type":"c1","uid":1359224,"ip_address":"","ucode":"FAEAF3BD3E5146","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/78/be976ab3.jpg","comment_is_top":false,"comment_ctime":1647696239,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647696239","product_id":100017301,"comment_content":"课后思考：写完代码后根据测试数据反馈 VS 先预先评估再写<br><br>建议预先评估再去实现，虽然这类方式也会根据实现后的反馈结果做动态调整，但至少第一版代码不会那么差。<br><br>尤其是做业务，不能说实现了那就完事了，提前预估数据规模、分析模型、拆分关系等是有好处的，这些预处理能让你对整个需求更有把控性，你还可以分析性能卡顿点，会有更多的思考吧。","like_count":0},{"had_liked":false,"id":338675,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1647656227,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1647656227","product_id":100017301,"comment_content":"复杂化度分析：<br>1. 只关注循环执行次数最多的一段代码；<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度；<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积；<br>常见的时间复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )<br>常见的空间复杂度就是 O(1)、O(n)、O(n2 )","like_count":0},{"had_liked":false,"id":337689,"user_name":"woJA1wCgAA_v2u3ws8o6bYfKyprV3V4A","can_delete":false,"product_type":"c1","uid":2940540,"ip_address":"","ucode":"A8F531B3ED6F87","user_header":"","comment_is_top":false,"comment_ctime":1646976524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646976524","product_id":100017301,"comment_content":"磨刀不误砍柴工，慢就是快。","like_count":0},{"had_liked":false,"id":336412,"user_name":"H","can_delete":false,"product_type":"c1","uid":1793962,"ip_address":"","ucode":"04D7D030245E27","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5f/aa/63e641c1.jpg","comment_is_top":false,"comment_ctime":1646133569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646133569","product_id":100017301,"comment_content":"问题：因为性能测试，会受到数据规模和测试机器配置的影响","like_count":0},{"had_liked":false,"id":336338,"user_name":"谭雪娇","can_delete":false,"product_type":"c1","uid":1375252,"ip_address":"","ucode":"B20AB23E0D20E0","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/14/b6b50f91.jpg","comment_is_top":false,"comment_ctime":1646102763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646102763","product_id":100017301,"comment_content":"有没有记笔记功能呀？感觉这个读一读明白了，顺便在旁边记一下笔记挺好，到时候再把笔记导出，","like_count":0},{"had_liked":false,"id":336314,"user_name":"姜兵仁","can_delete":false,"product_type":"c1","uid":1027820,"ip_address":"","ucode":"5783023A847A37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/ec/06973ab9.jpg","comment_is_top":false,"comment_ctime":1646063819,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646063819","product_id":100017301,"comment_content":"要养成分析性能的习惯，在写完代码后，就能应当能很快速的看出当前代码的时间复杂度","like_count":0},{"had_liked":false,"id":336136,"user_name":"知  青","can_delete":false,"product_type":"c1","uid":1603894,"ip_address":"","ucode":"971686D2BE64E4","user_header":"https://static001.geekbang.org/account/avatar/00/18/79/36/f8f8fe07.jpg","comment_is_top":false,"comment_ctime":1645950640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645950640","product_id":100017301,"comment_content":"● 复杂度分析是理论性，用于写代码前，如何写出最高效的代码，不受环境影响；<br>● 性能测试是实践性的，用于写完代码后，测试代码在不同环境的性能，易受环境影响；<br>● 两者有先后关系，且缺一不可，不考虑复杂度写出的代码，最终的性能也不会好。","like_count":0},{"had_liked":false,"id":335675,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1645622316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645622316","product_id":100017301,"comment_content":"课后问题思考：复杂度的分析可以帮助我们养成如何编写高性能的代码习惯， 潜移默化中会提高我们编写代码的质量， 从而提升工程项目质量； <br>工程项目的性能测试确实可以帮助我们检测到 “突出” 的性能缺陷， 但已经是属于事后补救， 并不能兼顾到各方面的代码性能；","like_count":0},{"had_liked":false,"id":335491,"user_name":"Sam.张朝","can_delete":false,"product_type":"c1","uid":1132448,"ip_address":"","ucode":"FB20554D94B250","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","comment_is_top":false,"comment_ctime":1645539367,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645539367","product_id":100017301,"comment_content":"平台无关性，性能好可能是硬件的加持，代码懒点没关系，但是没长进就很有关系啦","like_count":0},{"had_liked":false,"id":335270,"user_name":"🐟 🐟 🐟","can_delete":false,"product_type":"c1","uid":2556217,"ip_address":"","ucode":"EB2EDEF667F30F","user_header":"https://static001.geekbang.org/account/avatar/00/27/01/39/bd834cc6.jpg","comment_is_top":false,"comment_ctime":1645434395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645434395","product_id":100017301,"comment_content":"课后习题思考：<br>不认为是多此一举。原因如下几点：<br>1）时间复杂度和空间复杂度可以摆脱硬件本身好坏所带的影响，让我们在开发代码（有一个初步的性能预估）或者优化代码（分析不同代码的执行效率等来明确优化方向）时能够有一个初步的预计和认知，这样既可以避免最差效率的情况，也可以在代码侧有一个优化的方向。<br>2）性能测试和复杂度分析相辅相成，复杂度分析可以提供粗略的评估，而性能测试针对于实际情况，比如不同硬件环境、数据量等等来做出一个更准确的评估。","like_count":0},{"had_liked":false,"id":335086,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1645321498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645321498","product_id":100017301,"comment_content":"有个问题<br>for(int i = 0; i&lt;=n;i++){<br>    for (int j = 0; j&lt;=m;j++){<br>        &#47;&#47;...<br>    }<br>}<br>&#47;&#47; (n+1)*(m+1)= m*n + n + m +1  <br>这个的时间复杂度是上面这个，还是m*n，我觉得应该是 m*n + n + m +1  大佬教教我呗","like_count":0},{"had_liked":false,"id":335083,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1645319414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645319414","product_id":100017301,"comment_content":"虽然我不是很清楚性能分析都会做什么，但是我觉得分析代码的时间和空间复杂度是有必要的，因为他可以让我们明白那部分代码的执行时间和影响我们整个软件的执行效率","like_count":0},{"had_liked":false,"id":335066,"user_name":"Geek_981f19","can_delete":false,"product_type":"c1","uid":2917891,"ip_address":"","ucode":"5CF88CAE022F4E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/aWmpjpvUDhrWibuQOkmPW0sAYR1RqyYtZrF0Y7DiaUM3yiapiaZPz5aM2OYJZLb5OK5luyVn2XevLBd0sXK88Ch36w/132","comment_is_top":false,"comment_ctime":1645282124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645282124","product_id":100017301,"comment_content":"我不认为是多此一举，在数据量小的时候并看不出时间复杂度和空间复杂度的好处，当数据量达到一定程度时，小的时间复杂度处理数据快了好几倍","like_count":0},{"had_liked":false,"id":335030,"user_name":"明","can_delete":false,"product_type":"c1","uid":1457844,"ip_address":"","ucode":"B0ECF9525861C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/b4/84a0b50b.jpg","comment_is_top":false,"comment_ctime":1645260935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645260935","product_id":100017301,"comment_content":"写成了一个文章，最后标注了老师的地址<br>个人总结https:&#47;&#47;juejin.cn&#47;post&#47;7066339169676558373&#47; <br>","like_count":0},{"had_liked":false,"id":334085,"user_name":"+","can_delete":false,"product_type":"c1","uid":2912368,"ip_address":"","ucode":"EF95F0571EA4AE","user_header":"https://static001.geekbang.org/account/avatar/00/2c/70/70/7ae38b1d.jpg","comment_is_top":false,"comment_ctime":1644736815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644736815","product_id":100017301,"comment_content":"时间复杂度不能重复利用 但是空间复杂度可以重复利用 ","like_count":0},{"had_liked":false,"id":333770,"user_name":"夜空中的咸鱼","can_delete":false,"product_type":"c1","uid":2143489,"ip_address":"","ucode":"D6F1EAF082D000","user_header":"https://static001.geekbang.org/account/avatar/00/20/b5/01/9938349b.jpg","comment_is_top":false,"comment_ctime":1644506676,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1644506676","product_id":100017301,"comment_content":"一刷看的似懂非懂的,现在二刷能理解些<br>课程小结<br>1.本节课主要讲的是时间复杂度,以及为啥需要使用它;在此之前我用前文所提及的事后统计法(即:通过把代码跑一遍，通过统计、监控，就能得到算法执行的时间和占用的内存大小).这样确实简单上手,但是局限性特别大,操作系统,软件,硬件,数据规模,网络等都会影响该程序的执行时间和占用的内存大小<br>2.既然事后统计法有局限性,那用啥可以统计或者估算计算程序的执行的时间和占用内存大小?这个时候就要用到作者提到的复杂度分析,这个方法可以预估当前程序的执行速度和占用内存的大小<br>3.复杂度分析包括两个方面:时间和空间;我们先看下时间复杂度<br>4.时间复杂度分析,又分了多个种类和法则,最简单的复杂度量级是常量阶即(即 : O(1)),这个表示一行代码执行的时间;数据规模执行时间最长的时间复杂度量级是指数阶,这个表示少量的代码需要执行的时间很长<br>5.时间复杂度的法则之加法法则(ps:这只包括一种数据类型):只取复杂度最高的量级<br>6.时间复杂度的法则之加法法则(ps:这里包括两种数据类型):二者复杂度相加就是该程序的时间复杂度<br>7.时间复杂度的法则之乘法法则:多种类型的复杂度相乘,就是该程序的时间复杂度<br>8.时间复杂度的量级分类:多项式量级和非多项式量级.其中,非多项式量级只有两个指数阶和阶乘阶.<br>9.学习完了时间复杂度,我们可以简单的了解下空间复杂度;空间复杂度是算法存储空间与数据规模的之间的增长关系,常见的空间复杂度就是 O(1)、O(n)、平方阶，像 对数阶、线性对数阶 这样的对数阶复杂度平时都用不到<br>10.学习复杂度的目的就是为了降低代码的运行时间,减少代码的存储空间(也是职业长远发展的一部分)<br>思考题:<br>我不认为多次一举.依据是,我本次在做一个项目,项目的并发数(10w)很高,用户量(10w)也很大.需要进行多次的性能压测,才能调整到系统的稳定运行;在完成性能的压测,根据性能压测的结果,在进行代码的复杂度分析,可以更快的找到优化解决方案,复杂度分析提供理论依据,性能压测提供压测结果.这样能更快的优化代码,使系统能稳定运行","like_count":0},{"had_liked":false,"id":333587,"user_name":"Akira","can_delete":false,"product_type":"c1","uid":2669006,"ip_address":"","ucode":"614E08F19B0AE2","user_header":"https://static001.geekbang.org/account/avatar/00/28/b9/ce/7e07a4cc.jpg","comment_is_top":false,"comment_ctime":1644412613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644412613","product_id":100017301,"comment_content":"今天刚看到一句话，“菩萨畏因，凡人畏果”，感觉很适合说明复杂度分析的作用。复杂度分析就是从根源上看一段代码运行时，数据量增长的走向。","like_count":0},{"had_liked":false,"id":333573,"user_name":"Geek_1af452","can_delete":false,"product_type":"c1","uid":2908485,"ip_address":"","ucode":"2FF76FB24B3FD1","user_header":"","comment_is_top":false,"comment_ctime":1644409191,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1644409191","product_id":100017301,"comment_content":"我认为性能测试和复杂度分析是两码事，性能测试是为了保证新上线的功能不会有明显的性能问题，保证生产环境的稳定性；而复杂度分析更像是一个警钟，时刻提醒我们尽量写出高效率的代码，此外，进行复杂度分析，有利于我们对整个系统的性能有一个宏观的预期，当出现与预期不合的异常时，我们能快速识别到系统的瓶颈在哪里","like_count":0},{"had_liked":false,"id":333570,"user_name":"Ascetic","can_delete":false,"product_type":"c1","uid":2563593,"ip_address":"","ucode":"99B176AA913D41","user_header":"https://static001.geekbang.org/account/avatar/00/27/1e/09/cf540940.jpg","comment_is_top":false,"comment_ctime":1644409103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644409103","product_id":100017301,"comment_content":"性能测试是在特定的环境条件下去进行测试。时间复杂度与空间复杂度考虑的不是在特定的环境，是粗略地估算算法的执行效率。","like_count":0},{"had_liked":false,"id":332798,"user_name":"Cedric","can_delete":false,"product_type":"c1","uid":1113829,"ip_address":"","ucode":"1CDAF4B32DE536","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/e5/918b641c.jpg","comment_is_top":false,"comment_ctime":1643619646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643619646","product_id":100017301,"comment_content":"性能测试只是一个结果，用来指导我们是否可能需要做优化。<br>但是复杂度分析是面对具体细节，在分析过程中，就比较容易发现要优化的位置。","like_count":0},{"had_liked":false,"id":332296,"user_name":"jiangb","can_delete":false,"product_type":"c1","uid":1030861,"ip_address":"","ucode":"A09415749CA88D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrqLEic7DVicYY1s9ldH0vGBialDoplVGpicZUJ0Fdaklw27Frv8Ac67eicb5LibhL74SUxAzlick2nfltA/132","comment_is_top":false,"comment_ctime":1643163775,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1643163775","product_id":100017301,"comment_content":"理解：时间和空间复杂度分析是一种定型的估算方法，估算算法的效率。","like_count":0},{"had_liked":false,"id":331438,"user_name":"Reign","can_delete":false,"product_type":"c1","uid":2672207,"ip_address":"","ucode":"B0236B81B3CDB0","user_header":"https://static001.geekbang.org/account/avatar/00/28/c6/4f/af5a6cb8.jpg","comment_is_top":false,"comment_ctime":1642585665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642585665","product_id":100017301,"comment_content":"讲得很好，尤其是加法法则和乘积法则，上学时老师都没讲过😂","like_count":0},{"had_liked":false,"id":331390,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1642570573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642570573","product_id":100017301,"comment_content":"P=NP","like_count":0},{"had_liked":false,"id":331234,"user_name":"Geek_232778","can_delete":false,"product_type":"c1","uid":2290677,"ip_address":"","ucode":"A561E9272E6EA0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6UjL0SBicZg00S4pmFtb3LZI0F2I0zC1dXibNrlC8FibicfFE7RIIAkayFYQxVov5uf0NxwA52HZGVA/132","comment_is_top":false,"comment_ctime":1642495616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642495616","product_id":100017301,"comment_content":"但是从数学理论到工程实践的落地过程中，还是有几点需要注意的：<br>1. 数据规模<br>如果你项目的数据规模较大，有时候选择时间复杂度更高的算法反而更高效，比如5n^2 跟 100n来说，在n&lt;20的情况下，选择前者效果更好<br>2. 常数阶<br>如果某个算法的常数是个大常数，比如10^7这种，也需要重点关注<br>3.语言的熟悉程度<br>对语言不够了解，时间复杂度为O(N)的算法可能写出O(N^2)的效果；如果c++的vector中的insert操作本身的时间复杂度就是O(N), 并且还需要考虑vector的扩容机制...","like_count":0},{"had_liked":false,"id":331067,"user_name":"大显","can_delete":false,"product_type":"c1","uid":1250284,"ip_address":"","ucode":"302E8A2639BC00","user_header":"https://static001.geekbang.org/account/avatar/00/13/13/ec/3c1560d9.jpg","comment_is_top":false,"comment_ctime":1642407212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642407212","product_id":100017301,"comment_content":"复杂度分析是必要的，同时也不会浪费时间。要在编程是注意自己的代码复杂度，养成好的编程习惯。这样随着代码里的变大，在后续的性能优化中省力、省时、发现真正需要优化的地方。","like_count":0},{"had_liked":false,"id":330596,"user_name":"路远","can_delete":false,"product_type":"c1","uid":2890949,"ip_address":"","ucode":"46DCE2D12D38C4","user_header":"https://static001.geekbang.org/account/avatar/00/2c/1c/c5/3df9fa5e.jpg","comment_is_top":false,"comment_ctime":1642063275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642063275","product_id":100017301,"comment_content":"曾经高中唯爱数学，大学因专业黯然相离，如今跨专业到编程，算法将是曾经热爱的再续，久旱逢甘霖，美哉。","like_count":0},{"had_liked":false,"id":330191,"user_name":"Geek_cd2fbc","can_delete":false,"product_type":"c1","uid":2889805,"ip_address":"","ucode":"9A96EEC24D0083","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SnnUOnqRBBCJUeweO6S0CmDJnuPQlgNK3S7ygQuicl2TianXSWcwHBTgibEZf3HKSwXBDAQIELlFtaOb6cQZKZSFw/132","comment_is_top":false,"comment_ctime":1641861059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641861059","product_id":100017301,"comment_content":"我認為該分析不是多此一舉。<br>猶如文章所述，代碼效能除了受到程序員功力影響外，也受硬件及編譯器等外部因素影響。<br>因此實際測試可以更確保程式實際的執行效能。<br><br>此外，每次都分析每段代碼效能也有許多好處：<br>1.精進程式複雜度及效能分析的熟練度<br>2.透過多次分析熟悉後，更能掌握平時設計盲點<br>3.若後續開發已該代碼為基礎，則不僅造福後人省下許多技術債，也能擁有一定的穩定度。","like_count":0},{"had_liked":false,"id":330124,"user_name":"","can_delete":false,"product_type":"c1","uid":1935486,"ip_address":"","ucode":"","user_header":"","comment_is_top":false,"comment_ctime":1641805992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641805992","product_id":100017301,"comment_content":"时间复杂度 我习惯用 O 标识，空间复杂度我习惯用 T 标识。<br>内存不足的时候 我们用时间换空间，比如大数据排序，内存充足的时候 我们以 空间 换时间，比如求两个字符串的最大公序列","like_count":0},{"had_liked":false,"id":330086,"user_name":"D","can_delete":false,"product_type":"c1","uid":2887500,"ip_address":"","ucode":"9BA28B5C7C32FA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/0f/4c/693f6f53.jpg","comment_is_top":false,"comment_ctime":1641792720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641792720","product_id":100017301,"comment_content":"为什么是2n呢？是因为赋值和计算吗？那么i小于等于，i++也算是2个，应该是4n，不好意思老师，我学历低有点不明白","like_count":0},{"had_liked":false,"id":329716,"user_name":"Vikee","can_delete":false,"product_type":"c1","uid":2034285,"ip_address":"","ucode":"17BF7DAD4F7E37","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0a/6d/f9016796.jpg","comment_is_top":false,"comment_ctime":1641492489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641492489","product_id":100017301,"comment_content":"重新理了一遍来由，知其然知其所以然，很放心有业务经验的前辈。","like_count":0},{"had_liked":false,"id":329705,"user_name":"江湖过客","can_delete":false,"product_type":"c1","uid":1910572,"ip_address":"","ucode":"3DDB346D675139","user_header":"https://static001.geekbang.org/account/avatar/00/1d/27/2c/b62f9743.jpg","comment_is_top":false,"comment_ctime":1641482866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641482866","product_id":100017301,"comment_content":"并不是多此一举，首先掌握了时间、空间复杂度分析会让我们在写代码的时候就尽量写出复杂度低的代码，毕竟低复杂度的代码大概率上会比高复杂度的代码执行效率更高，更加节省空间。这样写出来的程序一气呵成，大部分情况下执行效率会比较优秀，就算有少部分特殊场景（低复杂度但是执行效率低），在实际生产中，服务上线前会进行压测，上线后会进行监控，这些“后补”的操作中会帮助我们发现这些问题，这个时候再来解决这些少量的特殊问题也比较省时省力。相反，如果写代码的时候一点都不考虑复杂度，那么再等压测和监控的时候，发现的问题应该是会比较多的。","like_count":0},{"had_liked":false,"id":329696,"user_name":"endorphin","can_delete":false,"product_type":"c1","uid":2532144,"ip_address":"","ucode":"234043945254DF","user_header":"https://static001.geekbang.org/account/avatar/00/26/a3/30/e0de2ac2.jpg","comment_is_top":false,"comment_ctime":1641476404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641476404","product_id":100017301,"comment_content":"不是浪费时间，因为这本来就是目的不同的两件事，做性能测试是产品上线前的必要流程，看各项指标是否满足用户要求，而做复杂度分析本身是为了帮助程序员写出更高效的代码，这两件事不冲突且都有必要。","like_count":0},{"had_liked":false,"id":329677,"user_name":"小柯","can_delete":false,"product_type":"c1","uid":1228978,"ip_address":"","ucode":"43E9D6D98A5BCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/b2/635ba9d9.jpg","comment_is_top":false,"comment_ctime":1641466318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641466318","product_id":100017301,"comment_content":"我认为不是多此一举，在写代码的时候，时间复杂度和空间复杂度分别从两个维度帮我们分析代码的运行时间和空间占有率。为我们写代码提供了一个方向，我们可以尽量避免复杂度高的代码，这样可以让我们对“效率”有一个感性的认知。<br><br>但是每个算法都有各自的优缺点，当然，看上图线性关系，我们不能够直接断定O(logn)算法一定优于O(n)算法，需要针对不同的环境，不同的数据集，不同的数据大小，具体问题具体分析。在实际问题中衡量应该用哪种算法。<br><br>渐进式时间复杂度和渐进式空间复杂度不冲突，是相辅相成的关系，但有时候需要舍时间用空间，或者舍空间用时间。或者两者都能兼顾到。这个需要在实际代码中时刻关心时间和空间复杂度模型。这样有助于产出高质量的代码。","like_count":0},{"had_liked":false,"id":328936,"user_name":"Geek_5e03f1","can_delete":false,"product_type":"c1","uid":2847749,"ip_address":"","ucode":"8341E884D0E5AA","user_header":"","comment_is_top":false,"comment_ctime":1640944649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640944649","product_id":100017301,"comment_content":"请问&quot;return sum; &quot;执行时是不需要占用时间吗？为什么在分析有多少个unit_time时没有算return语句？","like_count":0},{"had_liked":false,"id":328925,"user_name":"201202077","can_delete":false,"product_type":"c1","uid":2881261,"ip_address":"","ucode":"2FB173EB6A9A2E","user_header":"","comment_is_top":false,"comment_ctime":1640938814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640938814","product_id":100017301,"comment_content":"看了大家的总结，感觉很全面，很精彩；我想抛个砖，探讨下这个问题，时间复杂度和空间复杂度之间是不是相互影响的？如果是，他们之间是如何相互影响的？<br>有没有这样一个结论：<br>1，时间复杂度高一阶，相应的空间复杂度就可以优化得低一阶<br>2，根据具体场景，空间复杂度和时间复杂度是可以做到一个平衡的<br>希望和大家一起探讨：）","like_count":0},{"had_liked":false,"id":328704,"user_name":"anytime","can_delete":false,"product_type":"c1","uid":1683885,"ip_address":"","ucode":"6DF15CA3F5388D","user_header":"https://static001.geekbang.org/account/avatar/00/19/b1/ad/a62c71aa.jpg","comment_is_top":false,"comment_ctime":1640848539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640848539","product_id":100017301,"comment_content":"我并非专业测试，如果让我去做性能测试，可能会存在一定的局限性，会存在例如数据规模不能足够大，某些复杂耗时的逻辑无法完全覆盖。<br>但是如果进行复杂度分析，可以从一个更加抽象，宏观的角度去了解程序的执行效率。可以规避一些通过性能测试可能无法发现的问题。<br>所以我认为复杂度分析并不是多此一举","like_count":0},{"had_liked":false,"id":328428,"user_name":"YOU","can_delete":false,"product_type":"c1","uid":2878843,"ip_address":"","ucode":"7F4CE735A863C2","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ed/7b/a0e0280c.jpg","comment_is_top":false,"comment_ctime":1640737410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640737410","product_id":100017301,"comment_content":"时间复杂度分析与空间复杂度分析，常见时间复杂度有O(1), O( log n), O( n), O( n log n), O( n2),,空间复杂度O(1), O( n), O( n2)","like_count":0},{"had_liked":false,"id":328368,"user_name":"tc小马哥","can_delete":false,"product_type":"c1","uid":2877435,"ip_address":"","ucode":"94B7F24298FF35","user_header":"","comment_is_top":false,"comment_ctime":1640693421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640693421","product_id":100017301,"comment_content":"log3n=log2n&#47;log23","like_count":0},{"had_liked":false,"id":327607,"user_name":"Geek_ting_2021","can_delete":false,"product_type":"c1","uid":2687339,"ip_address":"","ucode":"A6D5C57FA6806F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85d3jQpWibbXwfjaGnKmmGOzX45a3AQN67E5QnuKwaKc4MPfOe5qqLmW4tJxqZ8RCiawg/132","comment_is_top":false,"comment_ctime":1640186823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640186823","product_id":100017301,"comment_content":"（1）性能测试依赖于机器性能，很多时候会造成带有有欺骗性的结论；但是个人觉得到达一定数据量的规模之后性能测试还是具有参考性的意义，我平时会这样做；<br>（2）复杂度分析对于分析大数量的存储空间占用和运行速度带来很大的帮助，相对于事后统计来说，这种方式更高效直观；<br>发现自己有点静下心来看老师的文章了，感谢分享，感谢广大网友的评论分享  ","like_count":0},{"had_liked":false,"id":327209,"user_name":"88先生","can_delete":false,"product_type":"c1","uid":2785912,"ip_address":"","ucode":"E58003C2524279","user_header":"https://static001.geekbang.org/account/avatar/00/2a/82/78/b0d3bd02.jpg","comment_is_top":false,"comment_ctime":1639983744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639983744","product_id":100017301,"comment_content":"个人认为项目评估时间复杂度和空间复杂度之前进行性能测试并不是多此一举。实际的性能测试可以提供一个算法性能实际表现的直观数据，实际表现的说服力要强于理论分析。其后进行算法的时间复杂度和空间复杂度分析在理论上可以提供优化代码的方向，有助于优化代码或者算法。而对每一段代码进行时间和空间复杂度分析可以更为细致地把控程序整体的运行时间分布，内存消耗占比，实现对程序庖丁解牛般的掌握，这是对程序进行优化的基础。","like_count":0},{"had_liked":false,"id":327042,"user_name":"你好，阳光","can_delete":false,"product_type":"c1","uid":2145095,"ip_address":"","ucode":"1A2F487C57F7D9","user_header":"https://static001.geekbang.org/account/avatar/00/20/bb/47/b60ae3eb.jpg","comment_is_top":false,"comment_ctime":1639882363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639882363","product_id":100017301,"comment_content":"复杂度分析是一种理论分析，成本较低，能够帮助我们对算法的执行效率有一个感性的认识，但它不能完全替代性能基准测试，因为硬件平台差异等原因，理论分析和实际测试结果可能会有出入，不过更低复杂度的算法在实际测试中大概率会有一个更高的效率。","like_count":0},{"had_liked":false,"id":326420,"user_name":"李树青","can_delete":false,"product_type":"c1","uid":2660071,"ip_address":"","ucode":"B31B3068AE2247","user_header":"","comment_is_top":false,"comment_ctime":1639525639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639525639","product_id":100017301,"comment_content":"<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 3;<br> }<br>这行代码，执行次数跟n有关系，又不是n*2，所以应该是加法法则吧，老师，这个地方有点晕","like_count":0},{"had_liked":false,"id":326313,"user_name":"冬瓜","can_delete":false,"product_type":"c1","uid":1721291,"ip_address":"","ucode":"8C14735D17F480","user_header":"https://static001.geekbang.org/account/avatar/00/1a/43/cb/7cef89a6.jpg","comment_is_top":false,"comment_ctime":1639467689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639467689","product_id":100017301,"comment_content":"我认为不是多此一举，但也没必要事事都要进行复杂度分析。针对性能要求高函数可以进行复杂度分析，眼前看到的“烂代码”可以试着分析并优化。两中方法可以互相补充使用。<br>1、前面小争哥提了，事后统计方法是有局限性的，例如机器配置的不同、参数的不同这些是测试无法预测到的。此外事后统计方法无法做出性能预估判断。<br>2、复杂度分析适合做粗粒度的性能预估，以及对性能趋势的判断，缺点是无法精确地判断所需时间。","like_count":0},{"had_liked":false,"id":325640,"user_name":"Lemon Tree","can_delete":false,"product_type":"c1","uid":2855423,"ip_address":"","ucode":"670E49BA69669F","user_header":"https://static001.geekbang.org/account/avatar/00/2b/91/ff/7a710233.jpg","comment_is_top":false,"comment_ctime":1639056234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639056234","product_id":100017301,"comment_content":"在计算之前的代码时间复杂度时，为什么第一行没有计算进时间复杂度里，例如int cal() 这一行","like_count":0},{"had_liked":false,"id":325597,"user_name":"","can_delete":false,"product_type":"c1","uid":1248994,"ip_address":"","ucode":"F77B453D15A848","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e2/86e4c7ca.jpg","comment_is_top":false,"comment_ctime":1639035595,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639035595","product_id":100017301,"comment_content":"理解，时间复杂度与代码执行次数成正比，只关注循环的部分，然后取最大量级复杂度，logn 是 2^x = n 的对数","like_count":0},{"had_liked":false,"id":325498,"user_name":"hwluo12","can_delete":false,"product_type":"c1","uid":1384724,"ip_address":"","ucode":"1C495B8E96AD0B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erIBYBQl9STN5jl9bpjLBCBjEFnt6YW76u1427WRrC8nibw4ibPuPmR6dxjZWQf9Yx3VTWqXqKwGngQ/132","comment_is_top":false,"comment_ctime":1639003534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639003534","product_id":100017301,"comment_content":"老师您好，请教个问题：<br>for(var i=0;i&lt;n;i++) {sum = sum + nums[i]}，一直循环执行的循环体是i&lt;n =&gt; sum=sum+nums[i] =&gt; i++ }，执行次数为n，这样看是不是应该是3n？<br>（ps：知道不影响时间复杂度，只是单纯的请教下老师这个unit_time的计算）","like_count":0},{"had_liked":false,"id":325162,"user_name":"Lucifer","can_delete":false,"product_type":"c1","uid":2110013,"ip_address":"","ucode":"1AEE3C75C7B392","user_header":"https://static001.geekbang.org/account/avatar/00/20/32/3d/e41711c0.jpg","comment_is_top":false,"comment_ctime":1638845780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638845780","product_id":100017301,"comment_content":"时间复杂度最大的应用是可以再优化时快速查看较为复杂的代码段评估出大概得时间复杂度，再通过具体算法优化，至少对我是很有用的","like_count":0},{"had_liked":false,"id":324161,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1109632,"ip_address":"","ucode":"E6C4119C752465","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/80/db52af6b.jpg","comment_is_top":false,"comment_ctime":1638324101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638324101","product_id":100017301,"comment_content":"1.拿到性能测试数据，可以比较直观的对比后面的复杂度分析，评估出可能得优化空间。<br>2.每个细节的复杂度评估与优化，汇总起来对整体性能提升提供巨大帮助。","like_count":0},{"had_liked":false,"id":323627,"user_name":"任锋","can_delete":false,"product_type":"c1","uid":1086592,"ip_address":"","ucode":"8C32C85A61C426","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/80/70e483f6.jpg","comment_is_top":false,"comment_ctime":1638028138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638028138","product_id":100017301,"comment_content":"复杂度O(1). O(logn). O(n).O(nlogn).O(n2)","like_count":0},{"had_liked":false,"id":323626,"user_name":"任锋","can_delete":false,"product_type":"c1","uid":1086592,"ip_address":"","ucode":"8C32C85A61C426","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/80/70e483f6.jpg","comment_is_top":false,"comment_ctime":1638028000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638028000","product_id":100017301,"comment_content":"O(nlogn)就是当有一段代码执行n遍，另外一部分代码执行logn 乘起来就是nlogn","like_count":0},{"had_liked":false,"id":322937,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637666345,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1637666345","product_id":100017301,"comment_content":"什么叫渐进复杂度，开发阶段的性能测试不可能覆盖到所有情况，我们可以根据当前的性能测试结果以及时间复杂度去预估线上的增长情况。","like_count":0},{"had_liked":false,"id":322900,"user_name":"Tina","can_delete":false,"product_type":"c1","uid":2851354,"ip_address":"","ucode":"8D6D9F6E3D0A99","user_header":"https://static001.geekbang.org/account/avatar/00/2b/82/1a/30676c2e.jpg","comment_is_top":false,"comment_ctime":1637651071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637651071","product_id":100017301,"comment_content":"学习数据结构与算法，目的就是为了提高代码的性能，能够用更短的时间以及更小的空间来解决问题，而时间复杂度以及空间复杂度分析便是分析的手段，养成分析复杂度的习惯，这样不管是看别人的代码还是自己写代码的时候都会考虑到复杂度问题，便会想到用时间复杂度以及空间复杂度更低，性能更高的方式来解决问题，这是一种好习惯，也是很必要的。<br><br>时间复杂度分析通过大O表示法，因为数据量很大的时候，常量，系数以及更低阶的表达式便影响不大了，可以忽略，找到最大量级的进行估算就可以表示整段代码的时间复杂度了。而空间复杂度分析要看代码中有哪几个语句申请了内存空间，申请了多少，也是按最大量级来计算。<br><br>之前学习复杂度的时候，也只是大体知道了由来，动脑也很少，往后也很少分析过，之前觉得没什么用，也就糊弄着自己往下学，却忘记了数据结构与算法真正的本质，不是为了学习各个存储数据的结构怎么用，而是能够懂得在不同的问题面前要用什么数据结构和算法才是效率最高的，性能最好的，学会复杂度分析是很重要的！","like_count":0},{"had_liked":false,"id":322075,"user_name":"Geek_7e6229","can_delete":false,"product_type":"c1","uid":2600397,"ip_address":"","ucode":"51438E4C8829D5","user_header":"","comment_is_top":false,"comment_ctime":1637158088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637158088","product_id":100017301,"comment_content":"我觉得分析时间复杂度是为了让自己知道这段代码是否可以优化，从而让我们拥有提高程序性能的能力，而且熟悉了之后，分析并不会浪费我们太多时间。","like_count":0},{"had_liked":false,"id":321968,"user_name":"i","can_delete":false,"product_type":"c1","uid":1376513,"ip_address":"","ucode":"20D3D876E30B11","user_header":"https://static001.geekbang.org/account/avatar/00/15/01/01/8890d0d1.jpg","comment_is_top":false,"comment_ctime":1637119396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637119396","product_id":100017301,"comment_content":"当 n 无限大的时候，就可以忽略   这句话的意思是：如果一段代码的时间复杂度是常量级，但是若是这个常量级接近于无限大，他的时间复杂度还是常量级吗？","like_count":0},{"had_liked":false,"id":321499,"user_name":"windf1sh","can_delete":false,"product_type":"c1","uid":1157244,"ip_address":"","ucode":"9745EC7820493D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/7c/bb08fba5.jpg","comment_is_top":false,"comment_ctime":1636905961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636905961","product_id":100017301,"comment_content":"1.算法的执行效率，粗略地讲，就是算法代码执行的时间。<br>2.所有代码的执行时间 T(n) 与每行代码的执行次数 f(n) 成正比。<br>3.大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。<br>4.时间复杂度分析：<br>1）只关注循环执行次数最多的一段代码<br>2）加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>5.几种常见时间复杂度实例分析：<br>1）O(1)：只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。<br>2）O(logn)、O(nlogn)：在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。<br>3） O(m+n)、O(m*n)<br>6.空间复杂度分析：时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":321342,"user_name":"刘学","can_delete":false,"product_type":"c1","uid":2841527,"ip_address":"","ucode":"783678835E297D","user_header":"","comment_is_top":false,"comment_ctime":1636801050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636801050","product_id":100017301,"comment_content":"老师 今天开始听你的课 讲的很好 文档中有一个小问题 log3底N=log2底3 * log2底N,文中写成log3底2","like_count":0},{"had_liked":false,"id":320918,"user_name":"divergent","can_delete":false,"product_type":"c1","uid":1225561,"ip_address":"","ucode":"DFDD062B8CE711","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/59/7c8f32c2.jpg","comment_is_top":false,"comment_ctime":1636556663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636556663","product_id":100017301,"comment_content":"性能测试更多是为了在现有场景下的正常运行，而时间复杂度和空间复杂度分析是尝试找到最优解，这样的理解是否正确","like_count":0},{"had_liked":false,"id":320752,"user_name":"WADE","can_delete":false,"product_type":"c1","uid":2763473,"ip_address":"","ucode":"55C3E6615B0A9F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKuBBITVkpA7y3OarK7d7ch9YtVpiaDfzoQEcJFOE8PHjdKcVQvy9ZkCfA7Kgr6HupVS9luic3mQ5DA/132","comment_is_top":false,"comment_ctime":1636504425,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636504425","product_id":100017301,"comment_content":"我觉得在开发过程中始终要有一份思考，能不能更加优化，看起来思考浪费了时间，但远比后期迭代时，看着杂乱复杂代码时到处重构好","like_count":0},{"had_liked":false,"id":320326,"user_name":"wessonwang","can_delete":false,"product_type":"c1","uid":1000441,"ip_address":"","ucode":"A9BA5E3A3F278E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","comment_is_top":false,"comment_ctime":1636254173,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636254173","product_id":100017301,"comment_content":"时间复杂度，即 执行次数=f(数据规模n)<br>空间复杂度，即 资源消耗=f(数据规模n)<br>一般记为O(f(n))<br><br>时间复杂度分析的三个法则<br>1、关注执行次数最多的一段代码，通常就是循环了；<br>2、加法法则，代码实现上是 多段循环体前后分布，而不是嵌套关系，O(n)=MAX(f1(n), f2(n))；<br>3、乘法法则，循环嵌套，O(n)=O(f1(n)*f2(n))<br><br>空间复杂度分析<br>一般较简单，主要是循环体内分配的存储是临时内存，一次循环后不再被依赖了，被释放了或者随后被回收。","like_count":0},{"had_liked":false,"id":319931,"user_name":"悠悠做神仙","can_delete":false,"product_type":"c1","uid":2836018,"ip_address":"","ucode":"86DDAD806EF983","user_header":"https://static001.geekbang.org/account/avatar/00/2b/46/32/c5232058.jpg","comment_is_top":false,"comment_ctime":1636012028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636012028","product_id":100017301,"comment_content":"时间、空间复杂度分析方法，是不依赖于设备环境等做出的一种粗略的估算，目的主要是反映一段代码的大概运行效率，而性能测试往往是更精细的一种代码执行效率的反应，两种方法并不冲突。对于一些不做性能测试的代码块，往往可以直接通过时间、空间复杂度估算一下运行效率，基于此进行代码优化，可以避免一些比较低级的垃圾代码出现。","like_count":0},{"had_liked":false,"id":319532,"user_name":"zansin","can_delete":false,"product_type":"c1","uid":2676294,"ip_address":"","ucode":"B75A6CB1AF37CE","user_header":"https://static001.geekbang.org/account/avatar/00/28/d6/46/5acb3594.jpg","comment_is_top":false,"comment_ctime":1635843407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635843407","product_id":100017301,"comment_content":"完全不是浪费时间，当在不同的应用场景选择不同算法和数据结构，造成的时间和空间的差别可能是千差万别，这在互联网竞争如此激烈的今天实在是太重要了","like_count":0},{"had_liked":false,"id":319035,"user_name":"Geek_1d4382","can_delete":false,"product_type":"c1","uid":2826799,"ip_address":"","ucode":"D6C0105FDD01B8","user_header":"","comment_is_top":false,"comment_ctime":1635519496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635519496","product_id":100017301,"comment_content":"时间复杂度 最长的 加法法则 乘法法则<br>空间复杂度<br>不是，对于小的程序而言问题不大，但是在处理非常大的数据的时候，不同的复杂度之间差距非常大","like_count":0},{"had_liked":false,"id":317625,"user_name":"矿仔","can_delete":false,"product_type":"c1","uid":2596393,"ip_address":"","ucode":"6F5D60D4F16250","user_header":"https://static001.geekbang.org/account/avatar/00/27/9e/29/a55da673.jpg","comment_is_top":false,"comment_ctime":1634871792,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1634871792","product_id":100017301,"comment_content":"从前两节的前置铺垫中走过来，来到心法部分，复杂度分析。从单循环到嵌套循环，思路跟着代码的执行时间与执行次数间的关系，引出了复杂度分析的概念，以及大O表示法。<br>从非确定多项式问题(NP)的简单描述到常见的多项式问题，常量阶、对数阶(在对数之间可以自由转换抽出常量以及忽略对数底的问题)、线性阶、线性阶、平方阶以及k方阶，让我再看我自己写的代码或者他人的代码时，会带上复杂度分析的角度去看待，现在或许还是刻意的，当真正的熟练以后，希望去变成一种很自然的思考。<br>空间复杂度的内容不多，只引入了O(1)、O(n)、O(n^2)，但是对于该部分在实际中应用的思考并不多，甚至说有点盲区。<br>总结：无论何种知识，学习只是最开始的一小步，还要反复的实践、练习以及反思复盘，才能掌握的更好，加油，相信自己可以，攻克数据结构与算法👊","like_count":0},{"had_liked":false,"id":316980,"user_name":"MarkTang","can_delete":false,"product_type":"c1","uid":1165689,"ip_address":"","ucode":"58F3439A070B7E","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/79/68a73484.jpg","comment_is_top":false,"comment_ctime":1634631832,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634631832","product_id":100017301,"comment_content":"性能测试依赖实际环境，覆盖面不够广。 个人认为不用每段代码都进行分析，主要在核心部分或者会存在性能隐患的部分进行分析。","like_count":0},{"had_liked":false,"id":316515,"user_name":"Geek_f0adb7","can_delete":false,"product_type":"c1","uid":2741952,"ip_address":"","ucode":"D3EF3C11934802","user_header":"","comment_is_top":false,"comment_ctime":1634367410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634367410","product_id":100017301,"comment_content":"最后这个时间复杂度的 T(n) 直角坐标系 图画错了. nlog(n) 应该经过(1,0) 才对. 或者以坐标(1,0) 为原点是否更好.","like_count":0},{"had_liked":false,"id":316418,"user_name":"强者自强","can_delete":false,"product_type":"c1","uid":1362648,"ip_address":"","ucode":"391B934CC10342","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/d8/767d8e6e.jpg","comment_is_top":false,"comment_ctime":1634299193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634299193","product_id":100017301,"comment_content":"讲的很好，网上很多没看过的人抹黑是真无语，对我而言这是我看过对算法复杂度解释最好的一版","like_count":0},{"had_liked":false,"id":315113,"user_name":"付伟","can_delete":false,"product_type":"c1","uid":1397649,"ip_address":"","ucode":"97DC8054E30D97","user_header":"https://static001.geekbang.org/account/avatar/00/15/53/91/5a160371.jpg","comment_is_top":false,"comment_ctime":1633691364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633691364","product_id":100017301,"comment_content":"等比数列，重拾高中数学","like_count":0},{"had_liked":false,"id":315103,"user_name":"Geek_cc6b8e","can_delete":false,"product_type":"c1","uid":2763861,"ip_address":"","ucode":"DC6C2B8229A9A7","user_header":"","comment_is_top":false,"comment_ctime":1633688853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633688853","product_id":100017301,"comment_content":"<br> int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br>这段代码的第四五行，说是都运行了n遍，我觉得第四行代码应该是n+1遍，如果说不满足for循环的条件是不会执行第五行代码的。","like_count":0},{"had_liked":false,"id":314980,"user_name":"big stone","can_delete":false,"product_type":"c1","uid":1187345,"ip_address":"","ucode":"70C565DDE57233","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/11/c0894529.jpg","comment_is_top":false,"comment_ctime":1633620205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633620205","product_id":100017301,"comment_content":"课后思考题：对于代码先做性能测试再分析代码质量是不是浪费时间？<br>我认为是的，对于一段代码，基本的功能测试都过不了，还做啥性能测试，早期的分析能够预测可能出现问题的地方，从而更好的去测试性能，知道在不同实现的情况下，差异究竟有多大","like_count":0},{"had_liked":false,"id":314524,"user_name":"up","can_delete":false,"product_type":"c1","uid":1763045,"ip_address":"","ucode":"D6117772063301","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e6/e5/4a6a317e.jpg","comment_is_top":false,"comment_ctime":1633173333,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1633173333","product_id":100017301,"comment_content":"两者不冲突 复杂度分析对象是算法 做项目时 首先我们保证做到代码的复杂度最低 在此基础上进行性能测试 分析系统瓶颈进行针对性的优化","like_count":0},{"had_liked":false,"id":314494,"user_name":"开到荼蘼","can_delete":false,"product_type":"c1","uid":2063945,"ip_address":"","ucode":"EB5C016D0AA830","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7e/49/2efce374.jpg","comment_is_top":false,"comment_ctime":1633143288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633143288","product_id":100017301,"comment_content":"时间复杂度和空间复杂度分析有利于自己对代码性能的掌控，复杂度低的也便于代码的阅读。毕竟性能分析是事后分析，如果提前就能分析出来，也能减少事后的修改。","like_count":0},{"had_liked":false,"id":314111,"user_name":"GXZ","can_delete":false,"product_type":"c1","uid":2764993,"ip_address":"","ucode":"4919B061F83923","user_header":"https://static001.geekbang.org/account/avatar/00/2a/30/c1/a3f63232.jpg","comment_is_top":false,"comment_ctime":1632842695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632842695","product_id":100017301,"comment_content":"性能测试受环境，数据规模影响。时间复杂度和空间复杂度分析的是，运行时间、空间和数据规模的关系，是一种趋势。习惯了时间复杂度，空间复杂度的分析，会让我们写出更优秀的代码，思路也更清晰。","like_count":0},{"had_liked":false,"id":313406,"user_name":"Geek_e182a1","can_delete":false,"product_type":"c1","uid":2765717,"ip_address":"","ucode":"7A3769BDF48EE0","user_header":"","comment_is_top":false,"comment_ctime":1632411004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632411004","product_id":100017301,"comment_content":"个人认为不会多次一举，渐进时间，空间复杂度分析提供一个理论分析，和实际情况不一定一致，故需要进行性能测试。但是大概率上低阶的时间复杂度会优于高阶的时间复杂度，我们在写代码要注意时间复杂度和空间复杂度的分析，这样才能写出高质量的代码","like_count":0},{"had_liked":false,"id":313320,"user_name":"恒星","can_delete":false,"product_type":"c1","uid":2715095,"ip_address":"","ucode":"C17DD00239780D","user_header":"","comment_is_top":false,"comment_ctime":1632376274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632376274","product_id":100017301,"comment_content":"性能测试的结果受机器的配置、数据的质量影响，所以产生的结果具有多变性；而使用时间复杂度、空间复杂度测试的结果反映的是算法执行效率和占用空间随着数据量的增长的一种趋势，不受机器配置的影响，不运行代码就可以评估代码的质量。","like_count":0},{"had_liked":false,"id":312766,"user_name":"平安","can_delete":false,"product_type":"c1","uid":1563344,"ip_address":"","ucode":"DBB656A939052A","user_header":"https://static001.geekbang.org/account/avatar/00/17/da/d0/75462190.jpg","comment_is_top":false,"comment_ctime":1631976329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631976329","product_id":100017301,"comment_content":"数学底子不好 仔细研究了几遍 竟然看明白了 真棒👍","like_count":0},{"had_liked":false,"id":312453,"user_name":"lyt","can_delete":false,"product_type":"c1","uid":1526706,"ip_address":"","ucode":"8C179F339C2A27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwolYO3ppfrxTcX81cswxNkD4tIlHM7vrnfroMzoTx878mDCnfJ3esicvbhm7ricUAbR7T9DjEDstVklh9z6uzjQ/132","comment_is_top":false,"comment_ctime":1631806511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631806511","product_id":100017301,"comment_content":"写代码的过程中就注意保证时间和空间复杂度较小，在之后的性能测试也会提高效率，避免重复返工","like_count":0},{"had_liked":false,"id":311881,"user_name":"Geek_61ee3f","can_delete":false,"product_type":"c1","uid":2759466,"ip_address":"","ucode":"3C4A47740E4A61","user_header":"","comment_is_top":false,"comment_ctime":1631520422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631520422","product_id":100017301,"comment_content":"感觉O(m*n)的例子没显示出来啊","like_count":0},{"had_liked":false,"id":311749,"user_name":"体面","can_delete":false,"product_type":"c1","uid":2721059,"ip_address":"","ucode":"777E3F096FF576","user_header":"https://static001.geekbang.org/account/avatar/00/29/85/23/4e2cd24f.jpg","comment_is_top":false,"comment_ctime":1631441502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631441502","product_id":100017301,"comment_content":"老师好，什么是多项式量级和非多项式量级，能解释一下吗，看笔记的评论不太清楚","like_count":0},{"had_liked":false,"id":311457,"user_name":"Nature","can_delete":false,"product_type":"c1","uid":1530615,"ip_address":"","ucode":"4CFAA8E32C25C2","user_header":"https://static001.geekbang.org/account/avatar/00/17/5a/f7/94a86823.jpg","comment_is_top":false,"comment_ctime":1631242438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631242438","product_id":100017301,"comment_content":"这种分析不能一概而论，不同的项目需要做的东西不一样。需要看项目的量级和时间紧迫度。当然养成每写一段代码就思考给这段代码做复杂度分析这个习惯是好的，长久养成，就编程了自然，而不是刻意花时间去做。","like_count":0},{"had_liked":false,"id":311168,"user_name":"梦窝享","can_delete":false,"product_type":"c1","uid":2295024,"ip_address":"","ucode":"A8C365006C552B","user_header":"https://static001.geekbang.org/account/avatar/00/23/04/f0/bddeeafc.jpg","comment_is_top":false,"comment_ctime":1631092877,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631092877","product_id":100017301,"comment_content":"先进行性能测试, 对于性能测试不通过的API,再去看具体代码分析复杂度, 进行优化. 这样节省时间","like_count":0},{"had_liked":false,"id":310955,"user_name":"等","can_delete":false,"product_type":"c1","uid":2416579,"ip_address":"","ucode":"780CE2BA412193","user_header":"https://static001.geekbang.org/account/avatar/00/24/df/c3/c01ec21b.jpg","comment_is_top":false,"comment_ctime":1630999540,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1630999540","product_id":100017301,"comment_content":"T1(n)=O(f(n)), T2(n)=O(g(n))<br>第一个f(n),f代表频率<br>第二个的g是什么意思呢","like_count":0,"discussions":[{"author":{"id":1514723,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1c/e3/c399ab50.jpg","nickname":"木木","note":"","ucode":"47C34DD829649F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565139,"discussion_content":"同问，第二个g是什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650412258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310952,"user_name":"等","can_delete":false,"product_type":"c1","uid":2416579,"ip_address":"","ucode":"780CE2BA412193","user_header":"https://static001.geekbang.org/account/avatar/00/24/df/c3/c01ec21b.jpg","comment_is_top":false,"comment_ctime":1630999321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630999321","product_id":100017301,"comment_content":"let i = 1<br>for(;i &lt; 100; ++i) {<br>  console.log(1)<br>}<br>总共执行了99次，为啥老师说100次呢","like_count":0},{"had_liked":false,"id":310403,"user_name":"续命咖啡","can_delete":false,"product_type":"c1","uid":2646191,"ip_address":"","ucode":"52872D7A0A761F","user_header":"https://static001.geekbang.org/account/avatar/00/28/60/af/cacd740a.jpg","comment_is_top":false,"comment_ctime":1630640315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630640315","product_id":100017301,"comment_content":"我不认为这是多此一举，首先性能测试确实能给我们一个准确的值，但是它受环境，数据规模的影响，可能这个测试往往只能代表这个项目，而分析时间和空间复杂度，虽然它是一个大概的模型，但是这个模型却能给我们一个大致的思考空间，准确的性能测试值其实也就是这个渐进模型的某个准确值，所以说这两者其实相辅相成，前者给予我们运行的准确，后者培养我们算法的思维。","like_count":0},{"had_liked":false,"id":310021,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":2403766,"ip_address":"","ucode":"37D99CF8535CDE","user_header":"https://static001.geekbang.org/account/avatar/00/24/ad/b6/a8caa2c7.jpg","comment_is_top":false,"comment_ctime":1630459841,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1630459841","product_id":100017301,"comment_content":"应该不是多此一举，先做性能测试是对整个项目做个评估。再依次对代码做分析，是优化。满足了首先在保证业务功能正常运转，在对局部做优化的理念。","like_count":0},{"had_liked":false,"id":309986,"user_name":"lighten","can_delete":false,"product_type":"c1","uid":2752158,"ip_address":"","ucode":"84193D77BEA91D","user_header":"https://static001.geekbang.org/account/avatar/00/29/fe/9e/1b3b98d1.jpg","comment_is_top":false,"comment_ctime":1630425446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630425446","product_id":100017301,"comment_content":"测试是现在的情况，做复杂度分析是为了把控随数据规模变换而产生的变化。<br>会出现函数调用情况。嵌套后会复杂度乘法。所有为了理解复杂度变化的情况，对每段代码都做分析是很有必要的<br>","like_count":0},{"had_liked":false,"id":309289,"user_name":"陈启航","can_delete":false,"product_type":"c1","uid":2177436,"ip_address":"","ucode":"89246B9BFD3269","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLC4IhKmJDYdWhQms3dmZqJ5YMDGTlPa1o52DnKSErYjsqfc6iaRJrBDZpx0RqQx7eZAED797kiaV6aw/132","comment_is_top":false,"comment_ctime":1630032116,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630032116","product_id":100017301,"comment_content":"我觉得性能测试不是多余的, 甚至算法也是为性能测试而服务的.<br>用户更多体验到的是使用了算法后的软件的体验, 而不是直接体验算法. <br>所以同样复杂度的算法在不同机器上跑, 可以为用户提供非常明确的机器的性能差.<br>这个可以影响用户选择机器.<br>所以通过算法复杂度的理论分析, 控制住变量. 也就是算法本身.<br>在不同的机型上跑, 可能跑的最快的机器价格也非常昂贵, 而跑的最慢的机器速度又非常慢.<br>这样帮助用户选择平衡自己价格和性能的机器, 会非常地有参考价值.","like_count":0},{"had_liked":false,"id":309057,"user_name":"Geek_9c29d8","can_delete":false,"product_type":"c1","uid":2742857,"ip_address":"","ucode":"D69FE6A93010CB","user_header":"","comment_is_top":false,"comment_ctime":1629906568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629906568","product_id":100017301,"comment_content":"时间复杂度，空间复杂度很有必要分析，只有尽可能地覆盖代码分析，才能心里有底，对系统了解得更透彻！","like_count":0},{"had_liked":false,"id":308855,"user_name":"🌴林子洛","can_delete":false,"product_type":"c1","uid":2744724,"ip_address":"","ucode":"DE0C88D16AADF8","user_header":"https://static001.geekbang.org/account/avatar/00/29/e1/94/2c5e62d1.jpg","comment_is_top":false,"comment_ctime":1629824109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629824109","product_id":100017301,"comment_content":"精选留言启发很大！","like_count":0},{"had_liked":false,"id":308813,"user_name":"15652825355","can_delete":false,"product_type":"c1","uid":2280639,"ip_address":"","ucode":"4186B4AEB101DB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqs5jaG6dMPpYCeZAbiawyMPe4ib1xCiccdbdOeox1OeJqUVbnOul5TVBibFWR8eibRW2R6T4amibeOTVuw/132","comment_is_top":false,"comment_ctime":1629807833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629807833","product_id":100017301,"comment_content":"T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。m+n和m*n区别很大吧?20+30=50;20*30=600;为啥说乘法继续有效?","like_count":0},{"had_liked":false,"id":308479,"user_name":"zhukaisjtu","can_delete":false,"product_type":"c1","uid":1507353,"ip_address":"","ucode":"C26CA02BD6894C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ6z39qJN1OILJBvh4XEwoY1ogORGPPpk9uR2f85Q0ia8wZhcCoaqISX22IEsf1oaTk782hdFKty9Q/132","comment_is_top":false,"comment_ctime":1629639427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629639427","product_id":100017301,"comment_content":"对第一个例子“求 1,2,3...n 的累加和”的时间复杂度有点不同看法。<br>第四行“for (; i &lt;= n; ++i)”，这是一行，但是不应该算作是一个unit time吧。其实这里执行了三步，第一步是对i初始化为0，然后每一次循环都会进行比较和自加1，所以总过应该是2n+1 unit time。<br>请老师指教。谢谢<br>","like_count":0},{"had_liked":false,"id":308469,"user_name":"Bonaparte","can_delete":false,"product_type":"c1","uid":1021741,"ip_address":"","ucode":"27E9CEE38A30C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/2d/8e4836f3.jpg","comment_is_top":false,"comment_ctime":1629634617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629634617","product_id":100017301,"comment_content":"这是 C？还是 Java...","like_count":0},{"had_liked":false,"id":306792,"user_name":"Geek_a7c6e6","can_delete":false,"product_type":"c1","uid":2733606,"ip_address":"","ucode":"C87DD8793D3E64","user_header":"","comment_is_top":false,"comment_ctime":1628726578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628726578","product_id":100017301,"comment_content":"王争老师求救🆘<br>我理工科大学本科毕业<br>参加工作后想转行计算机行业<br>但是没有基础  我应该怎么规划自己的学习才能快速进入这个行业并找到一份工作呢","like_count":0},{"had_liked":false,"id":305854,"user_name":"托马斯赵四","can_delete":false,"product_type":"c1","uid":2712653,"ip_address":"","ucode":"F9FA980A9F8A1C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/kBKTRyV4wnhV4YN9iaFgKYIJ4451n0zIiazFumcSpCXdEDhdexgc8PQdrDEmy4BCOUgsUlibicEwQlGo6K5Nibv7SEg/132","comment_is_top":false,"comment_ctime":1628210896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628210896","product_id":100017301,"comment_content":"具备性能调优，评估性能写出更加高质量的代码是难能可贵的","like_count":0},{"had_liked":false,"id":305210,"user_name":"Geek_aef4be","can_delete":false,"product_type":"c1","uid":2723576,"ip_address":"","ucode":"F1C3F2AE3CCA0F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqepI5hGHjU3fP8yVIicUq7gYRZfR3PoDCMQqd2ia8CmCSa1mIIf6OYGFjbW28RCXmrJQ/132","comment_is_top":false,"comment_ctime":1627880075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627880075","product_id":100017301,"comment_content":"我看上边的代码举例都是以循环为例，是不是时间复杂度分析主要就是分许循环的复杂度吗","like_count":0},{"had_liked":false,"id":304786,"user_name":"大祭司","can_delete":false,"product_type":"c1","uid":1831099,"ip_address":"","ucode":"06479A180B8DED","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f0/bb/f7025f42.jpg","comment_is_top":false,"comment_ctime":1627614049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627614049","product_id":100017301,"comment_content":"复杂多分析是做到心中有数，使用普遍规律推理结论，是理论层面，是指导思想，测试则是实际实践，有理论思想武装测试中才能少走弯路，提升效率。","like_count":0},{"had_liked":false,"id":304587,"user_name":"wpl","can_delete":false,"product_type":"c1","uid":1530594,"ip_address":"","ucode":"2E6E91BC0DD43E","user_header":"https://static001.geekbang.org/account/avatar/00/17/5a/e2/698ec825.jpg","comment_is_top":false,"comment_ctime":1627486582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627486582","product_id":100017301,"comment_content":"以前一直没有理解O(logn)时间复杂度，经讲解之后，瞬间理解了。 还有，评论区的总结时间复杂度的四种情况，总结的很好","like_count":0},{"had_liked":false,"id":304538,"user_name":"夜空中的咸鱼","can_delete":false,"product_type":"c1","uid":2143489,"ip_address":"","ucode":"D6F1EAF082D000","user_header":"https://static001.geekbang.org/account/avatar/00/20/b5/01/9938349b.jpg","comment_is_top":false,"comment_ctime":1627470811,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1627470811","product_id":100017301,"comment_content":"本节课小结:<br>1.我知道了为什么需要复杂度分析的起因?<br>答:起因就是平常我们使用的性能测试来测试代码的运行快慢和占用空间大小,这种方法叫做事后统计法,优点时简单,直观,快速得出结果,缺点是受测试环境影响大,受数据规模影响大<br>2.复杂度分析的种类有哪些<br>答:时间复杂分析和空间复杂度分析<br>3.什么是时间复杂度分析?<br>答:就是指代码根据一定数据规模运行时间快慢的分析<br>4.时间复杂度分析的特点?<br>答:1.永远只用观察循环次数最多的代码执行时间,它运行的时间就是整个代码运行的时间<br>    2.加法法则:多段代码运行时,只需关注循环次数最多的代码段的运行时间,这个就是总的代码运行时间<br>    3.乘法法则:多个嵌套循环运行次数的乘积,就是这段代码的时间复杂度<br>5.常见的时间复杂度有哪些并且根据运算的复杂度进行排序?<br>答:种类:O(1),O(n),O(n^2),O(logn),O(nlogn)<br>    排序:O(1) &gt; O(logn) &gt; O(nlogn) &gt; O(n) &gt; O(n^2)<br>6.如果有两个数据规模不一致时,这个时间复杂度应该怎样分析?<br>答:O(m+n),分析:m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。<br>7.什么是空间复杂度:<br>答:代码在运行时占用的内存空间大小<br>8.常见空间复杂度种类?<br>答:O(1),O(n),O(n^2),O(logn),O(nlogn),注意后面两个种类不常用,所以暂时仅了解就行<br>思考题:<br>有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>答:就像专栏评论去中说的有必要，性能测试更多的是一种实验结果。而复杂度分析，可以帮助我们分析内因(PS:我个人也是这么认为的,嘻嘻^v^)。","like_count":0},{"had_liked":false,"id":304233,"user_name":"Joycesq","can_delete":false,"product_type":"c1","uid":2413385,"ip_address":"","ucode":"A12A597682F3E3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d3/49/2e4dc912.jpg","comment_is_top":false,"comment_ctime":1627300141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627300141","product_id":100017301,"comment_content":"渐进时间复杂度和空间复杂度是宿主平台无关的，能够对我们的算法有一个大致的认识。这在性能测试前是很有必要的。<br>当然，渐进式时间和空间复杂度分析与性能基准测试并不冲突，而且是相辅相成的。","like_count":0},{"had_liked":false,"id":303414,"user_name":"王大红","can_delete":false,"product_type":"c1","uid":1585718,"ip_address":"","ucode":"90C78C0F50738E","user_header":"https://static001.geekbang.org/account/avatar/00/18/32/36/10ad4d3e.jpg","comment_is_top":false,"comment_ctime":1626774167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626774167","product_id":100017301,"comment_content":"性能测试会受到数据规模，硬件资源等影响，它对我们的程序运行的效率给出了一个大概的度量；而时空复杂度分析给我们的程序提供了优化的方向，即高阶往低阶优化，他们2者是相辅相成的。","like_count":0},{"had_liked":false,"id":303115,"user_name":"ChangheZeng","can_delete":false,"product_type":"c1","uid":2705013,"ip_address":"","ucode":"EF1E70751BDF7E","user_header":"https://static001.geekbang.org/account/avatar/00/29/46/75/468ab508.jpg","comment_is_top":false,"comment_ctime":1626598818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626598818","product_id":100017301,"comment_content":"时间复杂度大O 表示程序执行时间随数据规模n增大的速度","like_count":0},{"had_liked":false,"id":303087,"user_name":"余昭","can_delete":false,"product_type":"c1","uid":1055073,"ip_address":"","ucode":"29EEEA1BFFE16B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOvjoV6STk6SYPHRqVOo7DkiajY0KKuKLHSnDNvOKic5lllRNGEQo6W1oE6FrPiaSzUia1vCw9lqmV0vibCOtYtIfHQ/132","comment_is_top":false,"comment_ctime":1626582379,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1626582379","product_id":100017301,"comment_content":"性能测试测的是某个硬件配置下某个数据量下的性能情况。<br>时间复杂度和空间复杂度是数据量变化时预估所需要的资源变化趋势。","like_count":0},{"had_liked":false,"id":302865,"user_name":"WAIT","can_delete":false,"product_type":"c1","uid":2645825,"ip_address":"","ucode":"38EF3305B5F389","user_header":"https://static001.geekbang.org/account/avatar/00/28/5f/41/02280ac8.jpg","comment_is_top":false,"comment_ctime":1626416857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626416857","product_id":100017301,"comment_content":"讲的是真不错","like_count":0},{"had_liked":false,"id":302755,"user_name":"Geek_cd6bbb","can_delete":false,"product_type":"c1","uid":2670329,"ip_address":"","ucode":"9364B927DA35A8","user_header":"","comment_is_top":false,"comment_ctime":1626354825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626354825","product_id":100017301,"comment_content":"对数阶，线性阶，线性对数阶，常数阶为什么不是非多项式量级？？<br><br>对于刚罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)。","like_count":0},{"had_liked":false,"id":302754,"user_name":"Geek_cd6bbb","can_delete":false,"product_type":"c1","uid":2670329,"ip_address":"","ucode":"9364B927DA35A8","user_header":"","comment_is_top":false,"comment_ctime":1626354646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626354646","product_id":100017301,"comment_content":"这怎么能是浪费时间呢，有意识的去算会提高代码质量，机器测试会受很多因素的干扰，导致同一段代码测出来的结果不同。","like_count":0},{"had_liked":false,"id":302737,"user_name":"Geek_cd6bbb","can_delete":false,"product_type":"c1","uid":2670329,"ip_address":"","ucode":"9364B927DA35A8","user_header":"","comment_is_top":false,"comment_ctime":1626350306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626350306","product_id":100017301,"comment_content":"i=1;<br> while (i &lt;= n)  {<br>   i = i * 3;<br> }<br>这段代码时间复杂度为啥说是O（nlogn）不应该是O（logn）吗？","like_count":0},{"had_liked":false,"id":302695,"user_name":"ant","can_delete":false,"product_type":"c1","uid":1556708,"ip_address":"","ucode":"A39A03AF257471","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","comment_is_top":false,"comment_ctime":1626338044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626338044","product_id":100017301,"comment_content":"二刷数据结构与算法之美<br>------------------<br>时间复杂度全程是渐进时间复杂度，表示算法执行时间和数据规模之间的增长关系。<br>常见时间复杂度有O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。<br>常用的时间复杂度分析方法：<br>1.只关注循环执行次数最多的一段代码。<br>2.加发法则：总复杂度等于量级最大的那段代码<br>3.乘法法则：嵌套代码的复杂的等于内外代码的复杂度乘积。<br><br>关于思考题，性能测试以外是否需要进行理论的复杂度分析。答案当然是肯定的，性能测试是基于我们实际的生产环境模拟，针对特定的机器，数据集，确定范围的数量级的压力等等一系列指标下进行的测试，是为了测试系统是否能满足我们的需求。其结果是随着指标的变化而变化的。而理论的时间和空间复杂度是单纯针对系统的实现代码的评级指标，不依赖于机器大致的对系统实现的优劣做出评判。<br><br>空间复杂度类似于时间复杂度，只需要关注占用或申请内存最大的那部分代码就好了。<br><br>","like_count":0},{"had_liked":false,"id":302624,"user_name":"刘同青","can_delete":false,"product_type":"c1","uid":1818343,"ip_address":"","ucode":"84B62DF8BC61FB","user_header":"","comment_is_top":false,"comment_ctime":1626307716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626307716","product_id":100017301,"comment_content":"为什么倒数第二个例子复杂度是O(m+n)最后一个例子不应该是O(2n)么","like_count":0},{"had_liked":false,"id":302106,"user_name":"...","can_delete":false,"product_type":"c1","uid":2693640,"ip_address":"","ucode":"654E8787613EC4","user_header":"https://static001.geekbang.org/account/avatar/00/29/1a/08/0bd416a2.jpg","comment_is_top":false,"comment_ctime":1626083368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626083368","product_id":100017301,"comment_content":"性能测试跟宿主机性能有直接关系，算法的复杂度这可以只分析代码的效率从而抛弃宿主机得到全平台通用的分析结果","like_count":0},{"had_liked":false,"id":301717,"user_name":"data","can_delete":false,"product_type":"c1","uid":1010493,"ip_address":"","ucode":"4EEC3CE11E65F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/3d/ae41c2b3.jpg","comment_is_top":false,"comment_ctime":1625820670,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625820670","product_id":100017301,"comment_content":"复杂度的分析其实能够反应出你的代码质量，好的代码，时间复杂度和空间复杂度肯定做的很好。为了不成为代码的搬运工，要时时注重代码质量","like_count":0},{"had_liked":false,"id":301309,"user_name":"Geek_ymm","can_delete":false,"product_type":"c1","uid":1621619,"ip_address":"","ucode":"C5B645DD3D528D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8vYticoRUGtRSpglcsWvnfcjCkb6jhhOE9gH3QokyJkqx23m2vY4bUibEcu7jILejDJCLyuJBCJJA/132","comment_is_top":false,"comment_ctime":1625626382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625626382","product_id":100017301,"comment_content":"不是多此一举的，程序员是程序的创作者，不能把作品的硬性指标寄希望于后续测试。并且测试其实就是一种后置的评估。<br>代码设计阶段就考虑复杂度：在实际项目中很多的嵌套逻辑是可以通过设计好的数据结构、优化代码结构解决的。后置测试可能会引起代码重构等浪费人力的效果。<br>写出高效执行代码：预先评估好代码的时间及空间复杂度，进行合理设计，力求写出高效代码，是会给业务带来正向收益的","like_count":0},{"had_liked":false,"id":300474,"user_name":"节操何在😳","can_delete":false,"product_type":"c1","uid":2596050,"ip_address":"","ucode":"499C85C218ED84","user_header":"https://static001.geekbang.org/account/avatar/00/27/9c/d2/3c1b05ba.jpg","comment_is_top":false,"comment_ctime":1625189559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625189559","product_id":100017301,"comment_content":"老师的文稿和这个发音，不干工程师，也可以当个电台主播了😂","like_count":0},{"had_liked":false,"id":300447,"user_name":"WDNMD","can_delete":false,"product_type":"c1","uid":2665424,"ip_address":"","ucode":"222B48AEC7B068","user_header":"https://static001.geekbang.org/account/avatar/00/28/ab/d0/2b72354a.jpg","comment_is_top":false,"comment_ctime":1625159688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625159688","product_id":100017301,"comment_content":"空间复杂度--》优化内存等存储结构的存储空间 ; 时间复杂度 --〉优化CPU占用,提高处理效率","like_count":0},{"had_liked":false,"id":300122,"user_name":"JasonOscar","can_delete":false,"product_type":"c1","uid":1743894,"ip_address":"","ucode":"ADEB25FE8A1E96","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epyaDlc83NwyJtqGKh18Uicnvnzk0V1pV5N6puQ5aFqcs8Ljxkcb5p86wcjL0kPTPBIJX5tITbFxicA/132","comment_is_top":false,"comment_ctime":1625015526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625015526","product_id":100017301,"comment_content":"理论书上写的太抽象，当年看了半天似懂非懂。感谢作者的写作和分享。由浅入深受益良多。","like_count":0},{"had_liked":false,"id":299759,"user_name":"红尘","can_delete":false,"product_type":"c1","uid":1445504,"ip_address":"","ucode":"CCCD5736755DF5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/gVfU7icdia3o5ZNaHjaWAdgkSYIpU1rdhIlVYiahYCvRlDZu2K6oPSvVobNjzwZbUaiayQcKjicZ44WjfWJCj5xdlPA/132","comment_is_top":false,"comment_ctime":1624848284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624848284","product_id":100017301,"comment_content":"复杂度分析总结：<br>一、什么是复杂分析度<br>1.数据结构和算法解决的是，如果让计算机用更快的时间，更节省空间的形式解决问题，所以就需要用两个维度来评估出代码的性能，<br>2.两个维度分别是时间复杂度与空间复杂度，二者统称复杂度，面试中一般说的复杂度表示时间复杂度，时间复杂度对比空间复杂度来说更重要一些，<br>3.复杂度描述的是算法执行时间与数据规模的增长关系。<br>二、为什么要用复杂度分析<br>1. 如果通过统计，监控的到的算法执行的时间和占用的内存大小不准确，这种叫做事后分析法，因为测试结果非常依赖测试环境，同时测试结果受数据规模的影响很大<br>2.和性能测试相比，复杂度分析不依赖测试环境，而且成本低，效率高，易操作，指导性强，<br>3. 复杂分析度，将能编写出性能更优的代码，有利于降低系统的开发和维护成本<br>复杂分析是整个算法的精髓，掌握了复杂分析度，数据结构和算法就掌握了一半，<br>三、如何进行复杂度分析？<br>1.大O表示法<br>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。<br>2. 复杂分析度法则<br>1）一段代码，比如循环，只关注循环执行次数最多的一段代码<br>2）多段代码，比如这段代码中有多循环和单循环，那么只关注多重循环的复杂度<br>3）嵌套代码，嵌套代码的话直接取乘机，比如多重循环，递归<br>4）多个模式，比如两个有参数控制的两个循环次数，那么就直接两个复杂度相加<br>四、常用的复杂度级别<br>多项式：随着数据规模的增长，算法的执行时间和空间占比，按照多项式的比例增长，包括，O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式，随着数据规模的增长，数据占用的时间比例和空间比例剧增，这类算法性能极差，如果出现这种形式的话建议优化代码，O(2^n)(指数阶），O(n!)(阶乘阶)","like_count":0},{"had_liked":false,"id":299574,"user_name":"Geek_358199","can_delete":false,"product_type":"c1","uid":2529281,"ip_address":"","ucode":"52D5F115373508","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NGib8v9Lml2JBfP5hIKib85dwFJDP5jqxl6IQOn0W6UGLttZLu2MO6Lb4WqlURZEkoncUrab48LkWXw3vZeEPhbA/132","comment_is_top":false,"comment_ctime":1624718521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624718521","product_id":100017301,"comment_content":"思考题：并不认为复杂度分析是浪费时间，磨刀不误砍柴工。如果写出了垃圾代码，额外投入的资源、重构精力是真正的浪费时间。笔记打卡：https:&#47;&#47;www.yuque.com&#47;docs&#47;share&#47;174bbaee-aee2-4863-afaa-7e466a5e4bda?#（密码：rb1s） 《极客时间-数据结构与算法之美》","like_count":0},{"had_liked":false,"id":299357,"user_name":"小水啊","can_delete":false,"product_type":"c1","uid":1964714,"ip_address":"","ucode":"20E0B094AD355E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKB2930aZlw61jwKTO2Od5wgywz0AIXo577BagLpZtyIUuxN8IQicWrwHBFK8dewBicZYs7LEN0u5HA/132","comment_is_top":false,"comment_ctime":1624592076,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624592076","product_id":100017301,"comment_content":"话说那个低阶是啥意思啊","like_count":0},{"had_liked":false,"id":299258,"user_name":"朱咸利Julie","can_delete":false,"product_type":"c1","uid":1532966,"ip_address":"","ucode":"7B894848C55D42","user_header":"https://static001.geekbang.org/account/avatar/00/17/64/26/67e94eea.jpg","comment_is_top":false,"comment_ctime":1624536996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624536996","product_id":100017301,"comment_content":"答：不是。除了老师说的两点 i、性能测试效果非常依赖测试环境；ii、测试结果受数据规模影响很大（实际场景中dev环境不一定能满足全流量级的数据进行测试），我理解还有一种，就是针对一个问题的不同实现上，可以事前通过比较时间空间负责度来选优，而不是等完全实现一段程度去运行再来做判断。","like_count":0},{"had_liked":false,"id":298484,"user_name":"晨光熹微","can_delete":false,"product_type":"c1","uid":2314397,"ip_address":"","ucode":"874CC3C959980D","user_header":"https://static001.geekbang.org/account/avatar/00/23/50/9d/3469eb6e.jpg","comment_is_top":false,"comment_ctime":1624151796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624151796","product_id":100017301,"comment_content":"第一遍看的时候没什么感觉，但是当我找几段代码自己分析一遍后，再来读这篇文章就有一股豁然开朗的感觉了！","like_count":0},{"had_liked":false,"id":297406,"user_name":"ss","can_delete":false,"product_type":"c1","uid":1438827,"ip_address":"","ucode":"3CEA88D72E5C36","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/6b/b6f6810c.jpg","comment_is_top":false,"comment_ctime":1623505699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623505699","product_id":100017301,"comment_content":"不是多此一举，渐进时间复杂度、渐进空间复杂度为我们提供了一个理论的分析方向，不依赖于硬件环境和数据规模，让我们写代码的时候有一个大致的认识，在写代码的时候会有意识的注意这些问题，写出更快更省的代码","like_count":0},{"had_liked":false,"id":297198,"user_name":"Faded","can_delete":false,"product_type":"c1","uid":2655908,"ip_address":"","ucode":"9BFD018D7FAF7B","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/a4/39115ec9.jpg","comment_is_top":false,"comment_ctime":1623374258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623374258","product_id":100017301,"comment_content":"肯定不是浪费时间，每次分析一下，虽然表面上看起来是浪费时间，但感觉实际上会给后面维护代码，节省很多时间，从而写出高质量的代码","like_count":0},{"had_liked":false,"id":297087,"user_name":"默默且听风","can_delete":false,"product_type":"c1","uid":2539346,"ip_address":"","ucode":"105E5FD2429AE3","user_header":"https://static001.geekbang.org/account/avatar/00/26/bf/52/59304c42.jpg","comment_is_top":false,"comment_ctime":1623304840,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623304840","product_id":100017301,"comment_content":"需要每一个都分析一下，见的多了自然分析的就会更快。对于自身编码能力会有提升。但是一些比较复杂的还是推荐做一下性能测试","like_count":0},{"had_liked":false,"id":296822,"user_name":"PG","can_delete":false,"product_type":"c1","uid":1249747,"ip_address":"","ucode":"722E7668E5F0E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/d3/795d79af.jpg","comment_is_top":false,"comment_ctime":1623169909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623169909","product_id":100017301,"comment_content":"理论指导实践，先预估出复杂度，测试工作再验证和量化，给出直观的数据","like_count":0},{"had_liked":false,"id":296648,"user_name":"三老","can_delete":false,"product_type":"c1","uid":2322179,"ip_address":"","ucode":"EE92194C255DF3","user_header":"https://static001.geekbang.org/account/avatar/00/23/6f/03/32e7331c.jpg","comment_is_top":false,"comment_ctime":1623078781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623078781","product_id":100017301,"comment_content":"你好 我想请问一下  加法法则为什么T2(n)=O(g(n))  而不是等于 T2(n) = O(g(n的平方的))","like_count":0},{"had_liked":false,"id":296591,"user_name":"xss4755","can_delete":false,"product_type":"c1","uid":1003273,"ip_address":"","ucode":"1A80F4F91AA236","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/09/dab54738.jpg","comment_is_top":false,"comment_ctime":1623054465,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623054465","product_id":100017301,"comment_content":"时间、空间复杂度是理论模型，可以帮助我们在理论上确定代码的效率。而性能测试是基于真实的场景、机器进行的测试，正所谓性能优化针对的也是一个中间件、一个系统和实际的场景。两者结合，可以让我们在多方面进行判断和取舍。","like_count":0},{"had_liked":false,"id":296176,"user_name":"艺昊","can_delete":false,"product_type":"c1","uid":2619410,"ip_address":"","ucode":"924D789FD754FC","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/12/6320ea66.jpg","comment_is_top":false,"comment_ctime":1622794281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622794281","product_id":100017301,"comment_content":"渐进时间，空间复杂度分析为我们优化代码提供很好分析理论基础，估算出代码的复杂度，为我们使用哪种数据结构和算法提供了方向","like_count":0},{"had_liked":false,"id":295302,"user_name":"烟火","can_delete":false,"product_type":"c1","uid":2642671,"ip_address":"","ucode":"6F35BB24D1EBB1","user_header":"https://static001.geekbang.org/account/avatar/00/28/52/ef/7d080ca7.jpg","comment_is_top":false,"comment_ctime":1622355493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622355493","product_id":100017301,"comment_content":"不是无用的，时间复杂度，空间复杂度提供给我们写代码时的一种判断思路和判断。我们写代码时可以大致判断当前逻辑的相关性能消耗，提升我们不断思考，使用更优的方式编程","like_count":0},{"had_liked":false,"id":295173,"user_name":"一只小吃吃","can_delete":false,"product_type":"c1","uid":2643217,"ip_address":"","ucode":"6749B92610D383","user_header":"https://static001.geekbang.org/account/avatar/00/28/55/11/0adfc3df.jpg","comment_is_top":false,"comment_ctime":1622280134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622280134","product_id":100017301,"comment_content":"性能分析是事后手段，学会分析时空复杂度，写代码的时候有意识的进行优化可以将性能问题扼杀在摇篮里。","like_count":0},{"had_liked":false,"id":295101,"user_name":"唐尤华","can_delete":false,"product_type":"c1","uid":1077812,"ip_address":"","ucode":"AB86A244ABE4F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/34/f73fa6a8.jpg","comment_is_top":false,"comment_ctime":1622244723,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622244723","product_id":100017301,"comment_content":"性能分析的缺陷：<br><br>- 与具体的机器环境有关<br>- 无法评估当数据增长时，性能开销的增长趋势<br><br>分析代码的时空复杂度有好处：<br><br>- 提升代码质量<br>- 在编写代码的时候，思考如何从复杂度上提升性能<br><br>分析代码的时空复杂度有局限性：<br><br>- 有的情况下不是复杂度越优，实际的表现就越好<br>","like_count":0},{"had_liked":false,"id":295083,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":2641159,"ip_address":"","ucode":"BBA0D6C70288B3","user_header":"https://static001.geekbang.org/account/avatar/00/28/4d/07/3f70e18f.jpg","comment_is_top":false,"comment_ctime":1622212031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622212031","product_id":100017301,"comment_content":"由于计算机知识我属于零基础，我认为性能测试是一个边界（最大饱和性的边界），就像是一块地皮，它其实能建很多栋楼房，因为地皮的面积很大，在范围内绝对不会超出征地红线。时间复杂度分析和空间复杂度分析，就是新建楼房的空间尺寸和施工工期。（相比地皮的边界，房屋的边界范围缩小了），就更精确了。就像a原来小于10，但其实a也小于5","like_count":0},{"had_liked":false,"id":295010,"user_name":"Geek_3c29c3","can_delete":false,"product_type":"c1","uid":2203358,"ip_address":"","ucode":"3D2E73AB1D08FA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLaoiaerNMy7eoSA5yfibPNhta51jkhPTTL1dD1HGlnjaGnFQ6Uzbbce82Kpnic3g1JlD7rtm41Y83PA/132","comment_is_top":false,"comment_ctime":1622182502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622182502","product_id":100017301,"comment_content":"争哥，想问一下，你这里把每行指令执行的时间都简略成unit time，但其实乘除比加减的time要大，如果将这个因素考虑进去，得到的大O的结果，是不是都是一致的，还是有例外","like_count":0},{"had_liked":false,"id":294893,"user_name":"周家辉","can_delete":false,"product_type":"c1","uid":2639660,"ip_address":"","ucode":"19EE3E4CFDE723","user_header":"https://static001.geekbang.org/account/avatar/00/28/47/2c/378b4a43.jpg","comment_is_top":false,"comment_ctime":1622124323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622124323","product_id":100017301,"comment_content":"对于实时性要求较高处理算法，分析时间复杂度有利于帮助估计实际中处理的运算速度。对于空间复杂度，应该跟数据存储大小有关。","like_count":0},{"had_liked":false,"id":294662,"user_name":"配角","can_delete":false,"product_type":"c1","uid":1237945,"ip_address":"","ucode":"2C05E40B61594E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/b9/3298cace.jpg","comment_is_top":false,"comment_ctime":1622036720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622036720","product_id":100017301,"comment_content":"随时分析代码的时间复杂度和空间复杂度，能够养成习惯，渐渐写出的代码时间复杂度和空间复杂度会越来越低，代码就更有效率","like_count":0},{"had_liked":false,"id":294602,"user_name":"Geek_miaomiao","can_delete":false,"product_type":"c1","uid":1646341,"ip_address":"","ucode":"6F39CB04AC73B1","user_header":"","comment_is_top":false,"comment_ctime":1622014807,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1622014807","product_id":100017301,"comment_content":"上文中的，第二个例子，时间复杂度：T(n) = O(2n2+2n+3) 为啥简化成T(n) = O(n2) 而不是T(n) = O(n2 + n)啊，有点懵。","like_count":0,"discussions":[{"author":{"id":1646341,"avatar":"","nickname":"Geek_miaomiao","note":"","ucode":"6F39CB04AC73B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379627,"discussion_content":"是不是因为取最大的量级，n 和 n²比起来，n为100的时候，100:10000。n为1000的时候就是1000:1000000了，增量也就是900:990000。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624022823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294167,"user_name":"Geek_965e9a","can_delete":false,"product_type":"c1","uid":2635643,"ip_address":"","ucode":"10E730A3393261","user_header":"","comment_is_top":false,"comment_ctime":1621815089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621815089","product_id":100017301,"comment_content":"关于“乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。”的例子，为什么可以直接认为cal()和f()复杂度都为O(n)？有点理解不了。<br><br>不过，我有个想法不知道对不对，就是f()中第十二行的执行次数与cal()有关，所以执行次数也就是等差求和公式的1+2+3+4+…+n-1=n×n&#47;2=O(n2)。<br><br>这样子想是对的吗？","like_count":0},{"had_liked":false,"id":293882,"user_name":"dreamcasher","can_delete":false,"product_type":"c1","uid":2046980,"ip_address":"","ucode":"2AE26895FC191A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/04/398d2157.jpg","comment_is_top":false,"comment_ctime":1621586137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621586137","product_id":100017301,"comment_content":"现在会觉得每写一段代码都去分析复杂度，是会觉得麻烦。如果这点儿时间的付出是有回报的话，那就是值得的，目前没有看到，期待后续课程的解答。","like_count":0},{"had_liked":false,"id":293432,"user_name":"林一鸣","can_delete":false,"product_type":"c1","uid":2628079,"ip_address":"","ucode":"1A750113D5EA0C","user_header":"https://static001.geekbang.org/account/avatar/00/28/19/ef/f763f977.jpg","comment_is_top":false,"comment_ctime":1621389013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621389013","product_id":100017301,"comment_content":"老师我只会一些python基础，但是看上面的代码感觉好别扭啊，就是看不懂代码怎么执行了，因为表达方式和python不一样","like_count":0},{"had_liked":false,"id":293400,"user_name":"M.O(∩_∩)O","can_delete":false,"product_type":"c1","uid":1498641,"ip_address":"","ucode":"B245C2BA20DDA8","user_header":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","comment_is_top":false,"comment_ctime":1621384252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621384252","product_id":100017301,"comment_content":"1）压测是基于你现有的测试换将和数据量；时间空间复杂度分析只是个理论趋势模型；进行性能测试是有必要的。<br>2）每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>孰能生巧","like_count":0},{"had_liked":false,"id":292725,"user_name":"小何","can_delete":false,"product_type":"c1","uid":2501246,"ip_address":"","ucode":"0526DEE8F358CA","user_header":"https://static001.geekbang.org/account/avatar/00/26/2a/7e/6d2e703b.jpg","comment_is_top":false,"comment_ctime":1620953089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620953089","product_id":100017301,"comment_content":"我想请教一个问题，多项式和非多项式概念不是很懂","like_count":0},{"had_liked":false,"id":292693,"user_name":"notinservicearea","can_delete":false,"product_type":"c1","uid":2587101,"ip_address":"","ucode":"BDDFEF231E3310","user_header":"https://static001.geekbang.org/account/avatar/00/27/79/dd/3c81d7ae.jpg","comment_is_top":false,"comment_ctime":1620923077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620923077","product_id":100017301,"comment_content":"算法目标：正确性、可使用性、可读性、健壮性、高效率与低存储需求。<br>时间复杂度：程序中某条运算次数最多的与规模n相关的语句的数量级 大O ；分析方法：事后统计法和事前分析估算法。<br>空间复杂度：程序中参数占用空间最多的与规模n相关的数量级 大O 。","like_count":0},{"had_liked":false,"id":292684,"user_name":"刘易宁","can_delete":false,"product_type":"c1","uid":1566569,"ip_address":"","ucode":"EE337683D08B9A","user_header":"https://static001.geekbang.org/account/avatar/00/17/e7/69/0c426b52.jpg","comment_is_top":false,"comment_ctime":1620919231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620919231","product_id":100017301,"comment_content":"1、为什么分析复杂度：执行效率是算法一个非常重要的考量指标，衡量执行效率就是通过复杂度（一般从时间复杂度和空间复杂度两个维度）<br>2、复杂度表示什么：代码执行时间或空间随数据规模增长的变化趋势<br>3、时间复杂度有哪些度量级：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)","like_count":0},{"had_liked":false,"id":291981,"user_name":"Hero Swings","can_delete":false,"product_type":"c1","uid":2277440,"ip_address":"","ucode":"21AC141B794B9F","user_header":"https://static001.geekbang.org/account/avatar/00/22/c0/40/d73240c3.jpg","comment_is_top":false,"comment_ctime":1620636097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620636097","product_id":100017301,"comment_content":"我认为时间复杂度分析和空间复杂度分析的目的在于帮助我们在平时编码的时候能够快速预估一段代码的执行效率，帮助我们产出快和省的代码。针对的是局部的性能分析。<br>而项目的性能测试更多的是对整个项目的性能进行测试，其中可能不仅仅是代码的问题，也有可能涉及到服务之间通信，数据传输效率等相关的问题。和时间&#47;空间复杂度分析根本就不是一个东西。<br>两者应该是相互配合使用的关系。","like_count":0},{"had_liked":false,"id":291711,"user_name":"张锋","can_delete":false,"product_type":"c1","uid":2004633,"ip_address":"","ucode":"A327742387F8E1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/99/cf16d8dd.jpg","comment_is_top":false,"comment_ctime":1620443796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620443796","product_id":100017301,"comment_content":"很好啊  有了系统性的认识","like_count":0},{"had_liked":false,"id":291556,"user_name":"Gearless Joe","can_delete":false,"product_type":"c1","uid":2229437,"ip_address":"","ucode":"A0705B4865517F","user_header":"https://static001.geekbang.org/account/avatar/00/22/04/bd/bb1146ce.jpg","comment_is_top":false,"comment_ctime":1620360229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620360229","product_id":100017301,"comment_content":"分析时间、空间复杂度能够帮助我们思考如何选择算法，性能分析能够帮助我们确定选择的算法是否能够胜任当前的工作。","like_count":0},{"had_liked":false,"id":291547,"user_name":"落","can_delete":false,"product_type":"c1","uid":2275817,"ip_address":"","ucode":"79525752D3A1B1","user_header":"https://static001.geekbang.org/account/avatar/00/22/b9/e9/19cd7d9c.jpg","comment_is_top":false,"comment_ctime":1620357267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620357267","product_id":100017301,"comment_content":"主要内容是分析时间复杂度和空间复杂度 随数据规模的增长的变化关系。","like_count":0},{"had_liked":false,"id":291397,"user_name":"聪明的傻孩子","can_delete":false,"product_type":"c1","uid":1329680,"ip_address":"","ucode":"14AB5B07E18DBC","user_header":"https://static001.geekbang.org/account/avatar/00/14/4a/10/365ea684.jpg","comment_is_top":false,"comment_ctime":1620270196,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1620270196","product_id":100017301,"comment_content":"我觉得很浪费，如果在开发之前就考虑清楚会遇到的问题和需求，然后在设计中使用较好的算法，避免时间和空间的浪费；就算一开始算法不是很完美，后面去改进和演化的方向也是确定的；而完全依赖性能测试，再算时间复杂度和控件复杂度；这本就是浪费了资源","like_count":0},{"had_liked":false,"id":291263,"user_name":"luna","can_delete":false,"product_type":"c1","uid":1085490,"ip_address":"","ucode":"CC6AB36C5A7378","user_header":"https://static001.geekbang.org/account/avatar/00/10/90/32/621a79c0.jpg","comment_is_top":false,"comment_ctime":1620174598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620174598","product_id":100017301,"comment_content":"性能测试是不是相当于事后统计法，局限性文中也说了，依赖于测试环境，且受数据规模影响大。<br>而时间复杂度和空间复杂度的分析，我认为可以成为一种好习惯，习惯之后不会浪费很多时间，即便会花一点时间也是值得的。","like_count":0},{"had_liked":false,"id":291141,"user_name":"Geek_694aed","can_delete":false,"product_type":"c1","uid":2574357,"ip_address":"","ucode":"E8BAE339FC99EC","user_header":"","comment_is_top":false,"comment_ctime":1620046719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620046719","product_id":100017301,"comment_content":"1、项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？<br>答：性能测试可能是定量分析，时间和空间复杂度分析是定性分析<br>2、每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？<br>答：知道每段代码的时间复杂度和空间复杂度可以有效的分析你代码所在的瓶颈","like_count":0},{"had_liked":false,"id":291121,"user_name":"Geek_07d9bd","can_delete":false,"product_type":"c1","uid":2600941,"ip_address":"","ucode":"A9EABD3DE63701","user_header":"","comment_is_top":false,"comment_ctime":1620035728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620035728","product_id":100017301,"comment_content":"卑微的常数:如果与数据规模增长律无关，在计算时间复杂度时就会被忽略，如果有两段代码，一段复杂度为n的平方，一段复杂度是n，复杂度就看最大的，即n的平方。如果两段代码是增长率一样的复杂度函数，如m和n，那么复杂度就是O(m+n)","like_count":0},{"had_liked":false,"id":290859,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1619789257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619789257","product_id":100017301,"comment_content":"当然不是。原因如下：（1）编程时如果程序员有很好的时间、空间复杂度分析的意识，写出垃圾代码的概率就会小很多，这是程序员内功修养的体现，谁能说内功不重要呢？。（2）项目由许许多多的代码组成，在项目完成之后再进行的性能测试很难测到具体的某一的程序的某一段代码会成为效率的瓶颈，就算是可以测出，其时间成本也是巨大的，这样做得不偿失。（3）如作者文中所言，我们不能简单的觉得快排的效率（o(nlog(n))）一定比插入排序(o(n^2))高一样，不同的宿主环境、不同的数据集、不同的数据规模大小在实际应用上面可能会有不同，所以不同的情况需要区别对待。","like_count":0},{"had_liked":false,"id":290807,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1619763796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619763796","product_id":100017301,"comment_content":"for (; i &lt;= n; ++i) {     sum = sum + i;   }这里不写 成这样for (int i =0; i &lt;= n; ++i) {     sum = sum + i;   } 是效率更高嘛？","like_count":0},{"had_liked":false,"id":289870,"user_name":"OOO","can_delete":false,"product_type":"c1","uid":1341031,"ip_address":"","ucode":"60BBF2C3CA7AEE","user_header":"","comment_is_top":false,"comment_ctime":1619239112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619239112","product_id":100017301,"comment_content":"讲的真不错 ","like_count":0},{"had_liked":false,"id":289862,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1102045,"ip_address":"","ucode":"37E663FC4B85E2","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/dd/a4df05d4.jpg","comment_is_top":false,"comment_ctime":1619234194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619234194","product_id":100017301,"comment_content":"在评估一段算法是否很棒的时候，我们需要一个相对客观的评价标准，这时候不能受cpu，硬件等的影响，而复杂度分析就是公认的一套评价标准。但是在实际工程场景中，硬件资源，处理具体业务数据规模等等使用姿势又会极大影响，实际算法的效果，如果忽略工程环境苛求复杂度分析，可能阻碍工程开发。综上，算法的复杂度分析，工程实现的现实资源，使用姿势都是我们需要考虑的因素，有的放矢。","like_count":0},{"had_liked":false,"id":289813,"user_name":"橘子宇橙子","can_delete":false,"product_type":"c1","uid":2530332,"ip_address":"","ucode":"2E75D8428D2FE3","user_header":"https://static001.geekbang.org/account/avatar/00/26/9c/1c/0432228a.jpg","comment_is_top":false,"comment_ctime":1619187452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619187452","product_id":100017301,"comment_content":"有时候性能分析和时间复杂度不一定成正比，时间复杂度能大致预估代码效率，在性能分析前做一个预知","like_count":0},{"had_liked":false,"id":289778,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1619172362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619172362","product_id":100017301,"comment_content":"Q1: 有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？<br>A1: 不是多此一举, 一个是在具体环境做测试(目的找性能瓶颈), 一个是在理论层面选最优(理论层面的分析也可能因为不同场景中的数据规模, 造成低阶复杂度的性能不如高级复杂度算法), 所以, 好的方式是, 写代码尽量选低阶复杂度的算法 --&gt; 性能测试, 找瓶颈 --&gt; 针对具体环境中的性能瓶颈, 优化找合适复杂度的算法.<br>Q2: 而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>A2: 不浪费时间, 复杂度是一种分析代码性能的方法, 也是一种编码意识, 如果没有这种意识, 任意写个代码而不去关注理论复杂度和性能测试结果, 那么随着数据规模的增长, 调优排查问题的时间更是浪费不起.","like_count":0},{"had_liked":false,"id":289756,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1619166690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619166690","product_id":100017301,"comment_content":"第三波：性能分析测试这是测试要干的活，或者是开发要干的。这个不仅仅的是测试代码的性能，还有我们架构的性能，机器的性能。而我们写代码时候的时间复杂度分析是我们对代码的整体一个预算评估，好的时间复杂度分析能够为我们解决很多后患的问题，比如因为数据量导致程序最后出问题这样的情况。我们一开始就要已最优的时间复杂的心态去开发，我觉得一定开发出来的代码错不了。","like_count":0},{"had_liked":false,"id":289612,"user_name":"颜桦","can_delete":false,"product_type":"c1","uid":1099576,"ip_address":"","ucode":"1CD7250E052B32","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/38/d1a50cd6.jpg","comment_is_top":false,"comment_ctime":1619099708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619099708","product_id":100017301,"comment_content":"看完上面本来有疑问，还想为什么会这样，结果下面老师已经想到这个问题了并且做了解答，点个赞","like_count":0},{"had_liked":false,"id":289472,"user_name":"颜桦","can_delete":false,"product_type":"c1","uid":1099576,"ip_address":"","ucode":"1CD7250E052B32","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/38/d1a50cd6.jpg","comment_is_top":false,"comment_ctime":1619043609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619043609","product_id":100017301,"comment_content":"多项式复杂度和非多项式复杂度的划分依据是什么？","like_count":0},{"had_liked":false,"id":289193,"user_name":"Martins-马前卒","can_delete":false,"product_type":"c1","uid":1694557,"ip_address":"","ucode":"04B82203DE37E1","user_header":"https://static001.geekbang.org/account/avatar/00/19/db/5d/d60c15c3.jpg","comment_is_top":false,"comment_ctime":1618910579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618910579","product_id":100017301,"comment_content":"针对老师讲义的第一个例子，我反汇编了变量i的内存地址和arr数组的内存地址：<br>rbp(栈顶)\t                0x7fffffffe4d0\t<br>\t                        0x7fffffffe4cf\t<br>\t                        0x7fffffffe4ce\t<br>arr[3]的内存首地址\t0x7fffffffe4cc\t变量i的内存地址<br>\t                        0x7fffffffe4cb\t<br>\t                        0x7fffffffe4ca\t<br>\t                        0x7fffffffe4c9\t<br>arr[2]的内存首地址\t0x7fffffffe4c8\t<br>\t                        0x7fffffffe4c7\t<br>\t                        0x7fffffffe4c6\t<br>\t                        0x7fffffffe4c5\t<br>arr[1]的内存首地址\t0x7fffffffe4c4\t<br>\t                        0x7fffffffe4c3\t<br>\t                        0x7fffffffe4c2\t<br>\t                        0x7fffffffe4c1\t<br>arr[0]的内存首地址\t0x7fffffffe4c0\t<br>\t\t<br>rsp(栈底)\t                0x7fffffffe4b0\t<br>","like_count":0},{"had_liked":false,"id":288908,"user_name":"Geek_0dda3d","can_delete":false,"product_type":"c1","uid":2570780,"ip_address":"","ucode":"F9A55AACB80EEA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eonMJazpAb9sh0Kw8NicS67BQ2dEBgWcYLxEoQNoHqq22Fr2nPThzRly9QLnIlgmYqics1tHrTvW62w/132","comment_is_top":false,"comment_ctime":1618757800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618757800","product_id":100017301,"comment_content":"我认为并不是浪费时间,因为往往真正的生产环境和我们平时的开发环境不一样,其中包括机器的性能等问题,所以可能同样的代码在不同的环境下有着非常大的区别的表现.此时,我们就可以通过判断代码的时间,空间复杂程度来对代码有一个预先的理性分析","like_count":0},{"had_liked":false,"id":288293,"user_name":"谢涌","can_delete":false,"product_type":"c1","uid":1527490,"ip_address":"","ucode":"84E0C87CE5131D","user_header":"https://static001.geekbang.org/account/avatar/00/17/4e/c2/32754396.jpg","comment_is_top":false,"comment_ctime":1618395957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618395957","product_id":100017301,"comment_content":"时间复杂度是在n也就是数据量很大的情况下才显现重要性的问题。所以对于我们的大数据分析非常关键。","like_count":0},{"had_liked":false,"id":288147,"user_name":"肥猫不开心","can_delete":false,"product_type":"c1","uid":2357566,"ip_address":"","ucode":"FA9204B84913C0","user_header":"https://static001.geekbang.org/account/avatar/00/23/f9/3e/0d5f27c4.jpg","comment_is_top":false,"comment_ctime":1618322183,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618322183","product_id":100017301,"comment_content":"可以","like_count":0},{"had_liked":false,"id":288086,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1618294214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618294214","product_id":100017301,"comment_content":"性能测试必不可少，这就跟基准测试一样，必须熟悉某一个局部或者流程对整体的影响，因为一旦投入使用，某一个局部就有可能成为性能瓶颈，如果这个“点”在后期有可能对系统的稳定性造成不可预估的风险，还不如在前期做足一些准备工作，将风险扼杀在摇篮里","like_count":0},{"had_liked":false,"id":287809,"user_name":"三年","can_delete":false,"product_type":"c1","uid":1610695,"ip_address":"","ucode":"75550514680EEC","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/c7/7e5ab344.jpg","comment_is_top":false,"comment_ctime":1618155338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618155338","product_id":100017301,"comment_content":"nlogn应该可以理解为2层循环，内循环或外循环中有一个i是成*数倍增长？","like_count":0},{"had_liked":false,"id":287434,"user_name":"Geek_bethel","can_delete":false,"product_type":"c1","uid":2541943,"ip_address":"","ucode":"C6313699A95B02","user_header":"https://static001.geekbang.org/account/avatar/00/26/c9/77/bf372419.jpg","comment_is_top":false,"comment_ctime":1617950098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617950098","product_id":100017301,"comment_content":"思考题：<br>性能测试得到的结果准确，同时与测试环境、数据规模相关联，不同的条件下，测试结果可能差异很大；<br>复杂度分析不受测试环境限制，复杂度分析是分析算法执行效率与数据规模之间的增长关系，是理论分析、是估算；<br>两者之间可以互相弥补，都具备重要的参考价值。","like_count":0},{"had_liked":false,"id":287093,"user_name":"孙思强","can_delete":false,"product_type":"c1","uid":1813790,"ip_address":"","ucode":"6E3F01DDFC1310","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ad/1e/aeb8d6f3.jpg","comment_is_top":false,"comment_ctime":1617773612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617773612","product_id":100017301,"comment_content":"首先两个不是同一个问题.。我们项目中做的性能测试哪怕是压测等等一定能覆盖到每一段代码，测试通过他只能代表整体性能被我们系统所接受，或者压根就不会出现这种真实情况场景等等不用考虑，又或者一些逻辑数据量不够导致暂时无法测试出这些问题等一系列情况。但是我们自己对代码进行的复杂度分析，我们就能清晰的知道我们的代码的执行效率以及对系统的上限在哪。两种复杂度的算法在系统中都可以运行，但是在实际场景中我们不一定会选择复杂度地的算发，在不同的业务常常我们需要考虑我们是否需要用时间来换取空间，或使用空间来换取时间。在内存紧缺的场景下空间的使用尤其种下，这时候我们不可避免地需要牺牲部分时间来最大化利用内存，但是在内存充裕的情况下我们就可以牺牲部分空间来换取跟好的用户体验。","like_count":0},{"had_liked":false,"id":286940,"user_name":"呈影","can_delete":false,"product_type":"c1","uid":1541452,"ip_address":"","ucode":"F1D03B82DC330B","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/4c/ebdead47.jpg","comment_is_top":false,"comment_ctime":1617694167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617694167","product_id":100017301,"comment_content":"并非是多此一举<br>1.时间复杂度、空间复杂度分析是与硬件平台无关的，其建立在一个统一的标准之上，对不同算法可以有一个统一的比较。<br>2.性能测试更加趋向的是实际测试，因为O()的分析是理论层面上的，其效率更多是趋向n无穷的时候，所谓具体问题具体分析。","like_count":0},{"had_liked":false,"id":286502,"user_name":"Simon_real","can_delete":false,"product_type":"c1","uid":2067660,"ip_address":"","ucode":"C84A03DCEA885A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8c/cc/f11a17d1.jpg","comment_is_top":false,"comment_ctime":1617349282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617349282","product_id":100017301,"comment_content":"我觉得只有在涉及到到循环嵌套，递归的时候还有使用集合框架的时候需要分析复杂度，而且这种分析应该在coding的时候就应该做。后面做又要重构代码，感觉不太好。","like_count":0},{"had_liked":false,"id":286481,"user_name":"sky","can_delete":false,"product_type":"c1","uid":2325199,"ip_address":"","ucode":"C7BA135845E1FF","user_header":"https://static001.geekbang.org/account/avatar/00/23/7a/cf/c42dd74e.jpg","comment_is_top":false,"comment_ctime":1617336555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617336555","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>----------<br>我理解，复杂度分析（时间、空间），相当于是理论工具，有了这个作为指导，才能发现问题的主要矛盾，有的放矢。没有理论指导，实践效率将大打折扣","like_count":0},{"had_liked":false,"id":286479,"user_name":"sky","can_delete":false,"product_type":"c1","uid":2325199,"ip_address":"","ucode":"C7BA135845E1FF","user_header":"https://static001.geekbang.org/account/avatar/00/23/7a/cf/c42dd74e.jpg","comment_is_top":false,"comment_ctime":1617336283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617336283","product_id":100017301,"comment_content":"请问，在讲O(m+n)复杂度时候，O(m+n)表示的是O(m)+O(n) 这个意思嘛？？","like_count":0},{"had_liked":false,"id":285836,"user_name":"hhk","can_delete":false,"product_type":"c1","uid":1138826,"ip_address":"","ucode":"72EC677FBDC79B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gvfibNc3Bol6DzLMG5ia9wSLVYseoq326iae7TczmgmBj9u3Jwt8c0hl9KSzY4GNTFn0ic9m1ibzicqJ3aGzeQemec2Q/132","comment_is_top":false,"comment_ctime":1617027272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617027272","product_id":100017301,"comment_content":"# 03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？<br><br>数据结构和算法的目的, 是让代码跑的更快, 占用内存更小<br><br>我们需要一种方法, 去衡量这两个维度(时间和空间), 这样才能判断一个算法的好坏<br><br>这种方法叫 big O notation (大 O 复杂度表示法), 它表示随数据规模增长的一个变化趋势<br><br>## 时间复杂度分析<br><br>T(n) = O(f(n))<br><br>T(n)表示代码执行的时间<br><br>n表示数据规模大小<br><br>f(n)表示每行代码执行的次数总和<br><br>假设, f(n) = 2n^2 + 3n + 1, 则T(n) = O(f(n)) = O(n^2), 即去掉所有低阶项、常量、系数, 只要一个最大的量级. 因为我们只是要一个趋势, 最大量级对趋势影响最大<br><br>### 技巧<br><br>1. 只关注循环执行次数最多的一段代码<br>2. 加法法则, 只取最大量级, T(n) = T1(n) + T2(n) = max(T1(n), T2(n))<br>3. 乘法法则, T(n) = T1(n) * T2(n)<br><br>### 常见时间复杂度<br><br>常见的分为多项式量级和非多项式量级<br><br>其中非多项式量级有两个: O(2^n)和O(n!). 时间复杂度为非多项式量级的算法问题叫NP(No-Deterministic Polynomial, 非确定多项式问题), 都很低效<br><br>#### O(1)<br><br>和n没关系的就叫O(1)<br><br>哪怕一个循环执行了上亿次, 但是只要它和数据规模n没关系的就是O(1)<br><br>#### O(logn)、O(nlogn)<br><br>recap, 求时间复杂度就是求代码执行次数<br><br>```js<br>i=1;<br>while (i &lt;= n)  {<br>  i = i * 2;<br>}<br>```<br><br>设while循环里的代码执行了x次, 当循环退出的时候, 2^x=n<br><br>所以x=log2n<br><br>由于对数可以互相转换, 而大O表示法又可以忽略系数, 所以一般都不关心底直接用O(logn)表示<br><br>#### O(m+n)、O(m*n)<br><br>由两个数据规模决定<br><br>## 空间复杂度分析<br><br>方法和时间复杂度分析类似, 只不过衡量的标准, 从受数据规模影响的代码执行次数, 变成了受数据规模影响的存储空间<br><br>https:&#47;&#47;github.com&#47;acfasj&#47;blog&#47;issues&#47;2#issuecomment-809410740","like_count":0},{"had_liked":false,"id":285729,"user_name":"Geek_ecef6d","can_delete":false,"product_type":"c1","uid":2541756,"ip_address":"","ucode":"82F607FDBE110B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/T1yWWsOsVjpw9URXBMv86LnBh0T2BS66P6I1RGiaSe0lLKv2wFXYGaJdTdUXsLuUuoicjABQsP2XfzCia6knAy23g/132","comment_is_top":false,"comment_ctime":1616992809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616992809","product_id":100017301,"comment_content":"我不认为是多此一举的，代码的复杂度分析方法是一个普适性的方法，更具有客观性，她其实可以为性能测试提供一个预判和检验，性能测试只是一个特例而已，带有很大的主观性。","like_count":0},{"had_liked":false,"id":285267,"user_name":"董金杰","can_delete":false,"product_type":"c1","uid":1049869,"ip_address":"","ucode":"5B7E5926627E60","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/0d/cf46ea23.jpg","comment_is_top":false,"comment_ctime":1616718861,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1616718861","product_id":100017301,"comment_content":"看完有个简单的实践想法，在方法注释上标注复杂度，避免由于复用导致方法嵌套带来的复杂度飙升","like_count":0},{"had_liked":false,"id":284810,"user_name":"ha ha","can_delete":false,"product_type":"c1","uid":1585574,"ip_address":"","ucode":"C0788C69060578","user_header":"https://static001.geekbang.org/account/avatar/00/18/31/a6/f77602d2.jpg","comment_is_top":false,"comment_ctime":1616483724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616483724","product_id":100017301,"comment_content":"解決一個問題會有多種方法，用漸進複雜度來取捨不失為一個絕妙的方法。","like_count":0},{"had_liked":false,"id":284272,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":2528491,"ip_address":"","ucode":"F880BC555F5D44","user_header":"https://static001.geekbang.org/account/avatar/00/26/94/eb/7d7de4bf.jpg","comment_is_top":false,"comment_ctime":1616146445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616146445","product_id":100017301,"comment_content":"复杂度更多的是培养一种代码编写思想，对于代码因为数据规模增量一种影响趋势的评估，而且性能测试是在一些特定环境中做测试，有一定的局限性。<br>在实际开发中就拿1+2+....+n中来说，循环相加和公式（n*(n+1)&#47;2）的两种方式，两者的时间复杂度考虑会优先使用公式的方式。","like_count":0},{"had_liked":false,"id":284189,"user_name":"lyng","can_delete":false,"product_type":"c1","uid":2173024,"ip_address":"","ucode":"4FCBDFD59DA3F2","user_header":"https://static001.geekbang.org/account/avatar/00/21/28/60/518d9a42.jpg","comment_is_top":false,"comment_ctime":1616117300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616117300","product_id":100017301,"comment_content":"\t性能测试依赖于实际环境，测需要通过测试才知道算法的使用时间，如果遇到非多项式且数据规模较大时，需要消耗大量的资源测试，甚至无法测试出结果。<br>       复杂度分析是对算法的粗略分析，为算法性能比较提供了桥梁，有助于我们在编程时有复杂度分析的意识，通过建立复杂度的意识可以根据需求编写合适的代码，预测算法性能、测试需要时间<br>       算法的性能受机器以及数据规模的影响，难以在最短的时间内选择合适的算法，复杂度分析只是对算法粗略分析，数据规模不同时各算法的性能无法通过分析比较，将两者结合使用可以在短时间内选择出最合适该场景的算法<br><br>","like_count":0},{"had_liked":false,"id":283913,"user_name":"华子","can_delete":false,"product_type":"c1","uid":1399982,"ip_address":"","ucode":"2E839C28441B36","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/ae/9493229e.jpg","comment_is_top":false,"comment_ctime":1615981433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615981433","product_id":100017301,"comment_content":"渐进时间复杂度、空间复杂度分析是一种数学理论分析。性能压测只是在特定的机器、特定的数据集上展示的一个特定结果。俗话说理论指导实践。如果理论上时间复杂度很高，几乎判定了这个服务不能抗太大的高并发，早晚出大问题。","like_count":0},{"had_liked":false,"id":283654,"user_name":"冷","can_delete":false,"product_type":"c1","uid":1014499,"ip_address":"","ucode":"F3268B9988775C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e3/ccc9f5ee.jpg","comment_is_top":false,"comment_ctime":1615870606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615870606","product_id":100017301,"comment_content":"还好大学的时候算法课没落下✧＼ ٩(눈౪눈)و &#47;／✧加油啊喂","like_count":0},{"had_liked":false,"id":283522,"user_name":"vingo猫","can_delete":false,"product_type":"c1","uid":1067046,"ip_address":"","ucode":"BB0C9CCF3B5114","user_header":"https://static001.geekbang.org/account/avatar/00/10/48/26/f1e003d1.jpg","comment_is_top":false,"comment_ctime":1615806416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615806416","product_id":100017301,"comment_content":"👍、能够跟上、但是需要自己下面多做练习！","like_count":0},{"had_liked":false,"id":283358,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1615726212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615726212","product_id":100017301,"comment_content":"以前没考虑过这种问题，也不知道运行跟硬件平台等有关系。现在才知道通过分析算法的复杂度可以估算<br>运行效率。","like_count":0},{"had_liked":false,"id":283291,"user_name":"gagawxy","can_delete":false,"product_type":"c1","uid":2514767,"ip_address":"","ucode":"D4B1855C88814D","user_header":"https://static001.geekbang.org/account/avatar/00/26/5f/4f/3c520f18.jpg","comment_is_top":false,"comment_ctime":1615693087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615693087","product_id":100017301,"comment_content":"并不是多此一举，时间复杂度分析和空间复杂度分析是为了更优质，执行效率更佳的代码，与测试平台无关。","like_count":0},{"had_liked":false,"id":283251,"user_name":"你好，阳光","can_delete":false,"product_type":"c1","uid":2145095,"ip_address":"","ucode":"1A2F487C57F7D9","user_header":"https://static001.geekbang.org/account/avatar/00/20/bb/47/b60ae3eb.jpg","comment_is_top":false,"comment_ctime":1615645232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615645232","product_id":100017301,"comment_content":"算法的渐进复杂度分析能够帮助我们对代码的执行效率做一个大致的估算，这种估算不像性能测试依赖于数据规模和测试环境，是非常客观的，做起来也非常方便，能够指导我们编写出性能更好的代码。","like_count":0},{"had_liked":false,"id":283213,"user_name":"起风了","can_delete":false,"product_type":"c1","uid":1160219,"ip_address":"","ucode":"4356EDCECC612A","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/1b/5a8c0c11.jpg","comment_is_top":false,"comment_ctime":1615623617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615623617","product_id":100017301,"comment_content":"性能测试提供真实的执行时间，帮助我们缩小可能出现性能瓶颈的位置，而时间、空间复杂度分析提供理论上的支持，是我们努力的方向。<br>开发时&quot;浪费&quot;的时间与空间，最终都会在实际运行时为我们节省时间与空间成本。","like_count":0},{"had_liked":false,"id":283103,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1615547733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615547733","product_id":100017301,"comment_content":"不会，因为需要分析时间和空间算法复杂度，才能评估那种算法适合项目。","like_count":0},{"had_liked":false,"id":283082,"user_name":"Geek_71d8b8","can_delete":false,"product_type":"c1","uid":2237812,"ip_address":"","ucode":"C767E902AE874B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/gGOGcSH4AcC6iaeVcibEsuKdkRMPWia5G1OQY9Bm5n9pR7HFWEmtWeK9S3RhibDf8ePibx7RsCRl2Ng6MOPL0ry9vHA/132","comment_is_top":false,"comment_ctime":1615540752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615540752","product_id":100017301,"comment_content":"个人理解，时间复杂度是在描述一个算法在入参增加时执行耗时的增长趋势。在入参增量相同时，复杂度越高的算法耗时增加的更多。时间复杂度给了我们一个理论分析模型，在编码实现之前我们就可以预估哪一种算法更优。性能测试则是在真实物理条件下测算程序的执行耗时，正如文章所说的，它是事后分析。比如，在数据量小的时候，全表扫描和利用索引在性能测试时查询时间差不多，但是数据量急剧增大后，索引的效率会远大于全表扫描，这背后的本质就是时间复杂度o(n)和o(logn)的区别。","like_count":0},{"had_liked":false,"id":283057,"user_name":"阿尔基斯","can_delete":false,"product_type":"c1","uid":1725363,"ip_address":"","ucode":"033E55C8B062BF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/53/b3/397971bf.jpg","comment_is_top":false,"comment_ctime":1615533316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615533316","product_id":100017301,"comment_content":"<br>int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br>老师  乘法法则里的这一段代码  如果把f(i) 换成f(n), 时间复杂度是一样的么?  这两段代码在n比较大的时候  花费时间的增长趋势应该是不一样的吧","like_count":0},{"had_liked":false,"id":283006,"user_name":"生海","can_delete":false,"product_type":"c1","uid":2510297,"ip_address":"","ucode":"1FFBB0E56CE380","user_header":"https://static001.geekbang.org/account/avatar/00/26/4d/d9/e3cc62f3.jpg","comment_is_top":false,"comment_ctime":1615516643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615516643","product_id":100017301,"comment_content":"我认为分析时间、空间复杂度分析可以帮助我们更好的理解算法本身的执行效率，而性能测试则是针对实际的应用情况而言。<br>提问：您好，老师，如果只考虑时间复杂度的话，那在代码编写的时候就是能不用循环就尽量不用循环吗，因为循环可能会导致复杂度增加。","like_count":0},{"had_liked":false,"id":282935,"user_name":"RoccoLee","can_delete":false,"product_type":"c1","uid":2508667,"ip_address":"","ucode":"C55AD67FF8C2D7","user_header":"https://static001.geekbang.org/account/avatar/00/26/47/7b/c5ec018c.jpg","comment_is_top":false,"comment_ctime":1615470011,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615470011","product_id":100017301,"comment_content":"通过时间复杂度分析和空间复杂度分析，为代码优化做好准备<br>","like_count":0},{"had_liked":false,"id":282767,"user_name":"Geek_e9c887","can_delete":false,"product_type":"c1","uid":2498754,"ip_address":"","ucode":"CD0F56BED45DD7","user_header":"","comment_is_top":false,"comment_ctime":1615390355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615390355","product_id":100017301,"comment_content":"本章内容可在日常编程中多对应思考，比如多重循环是否必要，一定程度上可以避免一些低效率的代码","like_count":0},{"had_liked":false,"id":282743,"user_name":"Geek_56385b","can_delete":false,"product_type":"c1","uid":2475264,"ip_address":"","ucode":"375FF2463E8A60","user_header":"","comment_is_top":false,"comment_ctime":1615384535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615384535","product_id":100017301,"comment_content":"这个问题对我来说有点难解释，主要是在写代码的时候如果逻辑稍微复杂，我很少能提前规划出应该怎么写，也就很难在下手前规划好怎么减少时空复杂度，可能这也是因为我的逻辑思维太差了","like_count":0},{"had_liked":false,"id":282727,"user_name":"Antares","can_delete":false,"product_type":"c1","uid":1372645,"ip_address":"","ucode":"0A14BA70624CB2","user_header":"https://static001.geekbang.org/account/avatar/00/14/f1/e5/d7d3b419.jpg","comment_is_top":false,"comment_ctime":1615379495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615379495","product_id":100017301,"comment_content":"性能测试之后分析代码的时间复杂度、空间复杂度，不是多此一举，反而很有必要，其实相当于从源头去解决问题，尤其在资源有限的情况下，从代码开始优化运行时间和存储，是能够四两拨千斤的","like_count":0},{"had_liked":false,"id":282620,"user_name":"煜熙","can_delete":false,"product_type":"c1","uid":1705739,"ip_address":"","ucode":"ED9A7D7E543D24","user_header":"https://static001.geekbang.org/account/avatar/00/1a/07/0b/88e9518b.jpg","comment_is_top":false,"comment_ctime":1615341684,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615341684","product_id":100017301,"comment_content":"这讲给我最大的感受，就是我们日常生活中也会有复杂度。越复杂，时间占用多，我们就成为工作上的工具人，得优化，就得学习，而掌握的算法，可以让我们择优","like_count":0},{"had_liked":false,"id":282601,"user_name":"Castell","can_delete":false,"product_type":"c1","uid":1082266,"ip_address":"","ucode":"E5F816CBFBACD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/9a/405cb7d7.jpg","comment_is_top":false,"comment_ctime":1615336313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615336313","product_id":100017301,"comment_content":"因为复杂度分析是建立在假设所有简单操作的单位执行时间是相同的，但其实如果一个简单操作调用了底层耗时的操作，或者等待io上时，实际业务需要优化的就不只是算法层面了。所以性能测试也是为了找出程序算法之外的瓶颈。","like_count":0},{"had_liked":false,"id":282557,"user_name":"烟火","can_delete":false,"product_type":"c1","uid":1463336,"ip_address":"","ucode":"26ADFF4DDADD0D","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/28/d1795289.jpg","comment_is_top":false,"comment_ctime":1615300399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615300399","product_id":100017301,"comment_content":"我不认为是多此一举哦，提前分析，可以很好的对自己的代码作一个约束，写出相对优质的代码.","like_count":0},{"had_liked":false,"id":282496,"user_name":"Alun.","can_delete":false,"product_type":"c1","uid":2438158,"ip_address":"","ucode":"ECD0E2DC9C607D","user_header":"https://static001.geekbang.org/account/avatar/00/25/34/0e/018f88b0.jpg","comment_is_top":false,"comment_ctime":1615279242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615279242","product_id":100017301,"comment_content":"我觉得百行千行更多代码看起来的话是挺浪费时间的，但能在后期减少优化时间，何乐而不为呢？","like_count":0},{"had_liked":false,"id":282360,"user_name":"闲闲","can_delete":false,"product_type":"c1","uid":1637571,"ip_address":"","ucode":"B2099BDCFF6191","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/c3/0991edfc.jpg","comment_is_top":false,"comment_ctime":1615206455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615206455","product_id":100017301,"comment_content":"代码的性能分析很有必要，而且写代码的时候也不能盲目的写，否则后续性能问题整改那时候就觉得头大了。","like_count":0},{"had_liked":false,"id":282355,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1088301,"ip_address":"","ucode":"996D0F4B6196E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/9b/2d/8afd979f.jpg","comment_is_top":false,"comment_ctime":1615205392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615205392","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br><br>我觉得，这两者不能说是多此一举，有时候可以认为是互相补充或者互相证明。比如，我们通过性能测试，发现了性能瓶颈，在我们进行性能分析和制定改进计划的时候，用时间复杂度和空间复杂度分析，显然更节省。不可能随便改个一行代码，就去重新做一次性能测试。那样撞大运一样，也不是日常开发中能允许的。<br><br>当我们从时间复杂度分析和空间复杂度分析中找到了解决问题的原理后，实践结束，在用性能分析来证明自己的分析是否正确，以及自己取得的成果是否稳固。<br><br>实践中，我们确实不是每段代码都会进行时间复杂度分析和空间复杂度分析的，那样成本还是太高了。还是倾向于在瓶颈点进行分析。","like_count":0},{"had_liked":false,"id":282315,"user_name":"kayda","can_delete":false,"product_type":"c1","uid":2379980,"ip_address":"","ucode":"BF49E88D05DFA4","user_header":"https://static001.geekbang.org/account/avatar/00/24/50/cc/36b9f0f8.jpg","comment_is_top":false,"comment_ctime":1615195388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615195388","product_id":100017301,"comment_content":"谢谢老师 这节课讲的很好","like_count":0},{"had_liked":false,"id":282281,"user_name":"ilovealt","can_delete":false,"product_type":"c1","uid":1113180,"ip_address":"","ucode":"35CB4FD836135B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/5c/a3d42cdb.jpg","comment_is_top":false,"comment_ctime":1615184942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615184942","product_id":100017301,"comment_content":"1.大 O 时间&#47;空间复杂度表示法：表示代码执行时间&#47;存储空间随数据规模增长的变化趋势<br>（通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了）<br>2.常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )<br>3.关注循环和嵌套（O(logn)、O(n)、O(nlogn)、O(n2 )），其他的该乘乘O(m*n)，该加加O(m+n)","like_count":0},{"had_liked":false,"id":282271,"user_name":"不烦恼的维克","can_delete":false,"product_type":"c1","uid":2162860,"ip_address":"","ucode":"D71E9149841316","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/UTj1B569ungnCoMlcm94Ek2YSX8Ucpcq6XJj2RXKt1KRqU8G4uLMyNDoIXaaV5haKFo6nOJDTjicafMdlrvzBvg/132","comment_is_top":false,"comment_ctime":1615181081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615181081","product_id":100017301,"comment_content":"开篇已经讲解过，性能测试实际是进行事后统计了，而算法复杂度的分析可以降低整个项目的人力成本。<br><br>性能测试后如果发现无法满足性能指标，这时再优化代码，代码修改后甚至可能需要功能测试回归，这些都是需要花费研发和测试的精力。因此，如果事前可以提前分析发现比较明显的可优化的空间并进行优化，对整体项目来讲，可以在一定程度上降低人力成本。","like_count":0},{"had_liked":false,"id":282255,"user_name":"刘永臣","can_delete":false,"product_type":"c1","uid":2033098,"ip_address":"","ucode":"31426CE31CA514","user_header":"https://static001.geekbang.org/account/avatar/00/1f/05/ca/eefef69b.jpg","comment_is_top":false,"comment_ctime":1615174226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615174226","product_id":100017301,"comment_content":"当变量以一定比例迭代并遍历n的时候，时间复杂度为O(long)这么理解感觉有点偏差=，=","like_count":0},{"had_liked":false,"id":282254,"user_name":"Boom clap!!!","can_delete":false,"product_type":"c1","uid":2443427,"ip_address":"","ucode":"E9AF8ECB963239","user_header":"https://static001.geekbang.org/account/avatar/00/25/48/a3/2df11999.jpg","comment_is_top":false,"comment_ctime":1615173956,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615173956","product_id":100017301,"comment_content":"不浪费，时间复杂度和空间复杂度能极大的简化我们的代码执行存储的效率。","like_count":0},{"had_liked":false,"id":282062,"user_name":"luna","can_delete":false,"product_type":"c1","uid":1585812,"ip_address":"","ucode":"2ADC9ACBE0607E","user_header":"https://static001.geekbang.org/account/avatar/00/18/32/94/1b79f043.jpg","comment_is_top":false,"comment_ctime":1615041304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615041304","product_id":100017301,"comment_content":"常见的时间算法复杂度：<br>O(1) O(logn) O(n) O(nlogn) O(n^2) O(n^3) O(n^k) O(2^n) O(n!)<br>常见的空间算法复杂度：<br>O(1) O(n) O(n^2)<br><br>算法复杂度分析 是样本数据不断增大 程序执行时间和空间占用的关系","like_count":0},{"had_liked":false,"id":281870,"user_name":"椰子","can_delete":false,"product_type":"c1","uid":1537505,"ip_address":"","ucode":"55723E3E193D8F","user_header":"https://static001.geekbang.org/account/avatar/00/17/75/e1/1a5e8eb8.jpg","comment_is_top":false,"comment_ctime":1614929975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614929975","product_id":100017301,"comment_content":"感觉说的挺浅显易懂，就是再N可能极大的情况下，估计一个大致的值。因为N极小的情况下，你不用特殊分析。估计数目只要估计最大位数那个数字是多少就好了，其他影响不大的全忽略。不过高中数学有点忘记了","like_count":0},{"had_liked":false,"id":281741,"user_name":"cy","can_delete":false,"product_type":"c1","uid":1806848,"ip_address":"","ucode":"6A618945CD9042","user_header":"","comment_is_top":false,"comment_ctime":1614867283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614867283","product_id":100017301,"comment_content":"坚持坚持，一直都知道数据结构和算法很重要，也在网上买了书看视频，都坚持不下去，因为太枯燥了，这里这么好的学习资料，一定要坚持，为了money，为了成为大佬，为了不被淘汰。","like_count":0},{"had_liked":false,"id":281692,"user_name":"这就是生活","can_delete":false,"product_type":"c1","uid":2378295,"ip_address":"","ucode":"847EE53DA017C8","user_header":"https://static001.geekbang.org/account/avatar/00/24/4a/37/fb06fb79.jpg","comment_is_top":false,"comment_ctime":1614848844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614848844","product_id":100017301,"comment_content":"课后思考：<br>性能测试是让代码跑一边，无非得出的是性能好坏，而且这个好坏并不客观，是与环境有关的。<br>我认为先写算法，再做复杂度分析，进行复杂度优化，最后写代码是一个正确的顺序。<br>如果代码已经存在，每段代码的复杂度分析也是必要的，不做分析如何做优化？<br><br>胡乱瞎记：<br>1、Unit_time决定于执行环境<br>2、与n无关的代码随着n的规模越来越大，对代码执行时间影响越来越小，忽略<br>3、分析时间复杂度时，与n有关且循环最多的部分代码看<br>4、时间复杂度分为多项式量级和非多项式量级(NP)<br>      非多项式量级     2的N次方和n的阶乘    效率非常低<br>      多项式量级         从低阶到高阶   O(1)  O(logn) O(n) O(nlogn) O(n的次方)<br>                                低阶时间短<br>       O(1)   时间复杂度与n无关<br>       O(logn) O(nlogn)  循环出口与n相关 ，且与n相比的参数呈指数变化，任何与n指数函数都可以转化为O(logn)        O(nlogn)的是O(logn)运用乘法后的结果<br>        O(n)   与n线性相关<br>        O(n的次方) 与n成指数相关<br><br>5、O(mn)  O(m+n) 与m和n相关   乘法和加法的应用<br>6、空间复杂度：O(1)   O(n)  O(n平方) ","like_count":0},{"had_liked":false,"id":281461,"user_name":"米饭噗噗","can_delete":false,"product_type":"c1","uid":1902239,"ip_address":"","ucode":"9E7AECF01CE84C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/9f/5a6e5f17.jpg","comment_is_top":false,"comment_ctime":1614756945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614756945","product_id":100017301,"comment_content":"首先我不认为每段代码进行分析时间复杂度和空间复杂度是浪费时间的行为<br><br>1、做项目的时候会进行性能测试，但是往往都是在常规的业务测试结束之后再进行性能测试，意味着大部分的测试工作已经结束，即将进行上线准备；若此时检测出你开发的接口是一个慢服务，功能是用代码山堆积出来的，很有可能就要进行大改，并且大改之后性能若是能保证了，但业务测试又要重新进行，就很有可能延误规定好的上线日期<br><br>2、每次写完代码之后对自己的代码进行总结评估是一个优良的习惯，这种习惯的保持会让你不自觉的去审视自己开发的代码，在平常的开发中提升自己的代码质量","like_count":0},{"had_liked":false,"id":281409,"user_name":"Geek_08cfb9","can_delete":false,"product_type":"c1","uid":2117748,"ip_address":"","ucode":"F3A863AA0B16D7","user_header":"https://static001.geekbang.org/account/avatar/00/20/50/74/67009969.jpg","comment_is_top":false,"comment_ctime":1614741204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614741204","product_id":100017301,"comment_content":"1. 这节的主题是什么?作者从哪几个角度进行阐述<br>答: 本节主要讲述了复杂度分析,作者主要从其&quot;必要性&quot;,&quot;定义&quot;,&quot;常见复杂度举例&quot;,从实例入手,让读者通俗易懂的了解了复杂度相关知识点及如何计算复杂度.<br>2.本节的分论点?<br>  答:1.大O表示法定义 2. 时间复杂度分析 3. 空间复杂度分析<br>3. 本节说的有道理么?是全部有道理还是部分有道理?<br>    答:作者突出了复杂度分析是一种趋势的变化,这个观点对于理解后面的大O表示法的公式很有帮助,以本人目前的能力没有发现不合理的地方 <br>4. 本节与我的关系?在实践中哪些可以用上.<br>    答:通过本节的学习掌握了时间复杂度与空间复杂度的分析方法.在实际编程及代码评审中可以分析下代码的复杂度对程度的性能进行提前预判.<br>   <br>","like_count":0},{"had_liked":false,"id":280590,"user_name":"songYH","can_delete":false,"product_type":"c1","uid":2382651,"ip_address":"","ucode":"ABB2C4D2518840","user_header":"https://static001.geekbang.org/account/avatar/00/24/5b/3b/397214f2.jpg","comment_is_top":false,"comment_ctime":1614257391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614257391","product_id":100017301,"comment_content":"复杂度也叫渐进复杂度，包括时间复杂度与空间复杂度，用来分析算法执行效率与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":280406,"user_name":"微笑的背后","can_delete":false,"product_type":"c1","uid":1978108,"ip_address":"","ucode":"85152E9A54625E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7EakytsosiawSHj6rP7sdWIIysrulWzaTwVYO9uw2nmibQXr7bYYtdYu3zTaqPJZ4TT9wAc2m0F5HUv8xDCFrX0A/132","comment_is_top":false,"comment_ctime":1614180139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614180139","product_id":100017301,"comment_content":"其实文章里面已经有了答案，为了让代码在本身不受外界影响。所以很有必要知道代码算法的复杂度。这算是给代码取一个“度量”吧。。","like_count":0},{"had_liked":false,"id":280092,"user_name":"Zy丶","can_delete":false,"product_type":"c1","uid":1481906,"ip_address":"","ucode":"1AD8A149288A86","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/b2/f8bb1906.jpg","comment_is_top":false,"comment_ctime":1614077981,"is_pvip":false,"replies":[{"id":"101734","content":"是的，我们迭代了这个课的全部音频😄","user_name":"编辑回复","user_name_real":"贾静","uid":"1059377","ctime":1614095905,"ip_address":"","comment_id":280092,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1614077981","product_id":100017301,"comment_content":"准备重新学习一遍，配音好像换了？","like_count":0,"discussions":[{"author":{"id":1059377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2a/31/9edbf8a6.jpg","nickname":"贾静","note":"","ucode":"081E70CC01F6B8","race_medal":0,"user_type":8,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515980,"discussion_content":"是的，我们迭代了这个课的全部音频😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614095905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280013,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614053908,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614053908","product_id":100017301,"comment_content":"茶艺师学编程：<br><br>要刷新的知识点：<br>1、大O, 是指代码执行时间（运行所需空间）随数据规模增大的变化趋势，名为渐进时间（空间）复杂度。<br><br>2、分析复杂度的方法<br>只关注循环执行次数最多的一段代码<br>加法原则：总复杂度就是量级最大的那段代码的复杂度。但如果是涉及两个不同的数据规模来决定，总的复杂度则为O(f(m) + f(n)),不能忽略掉其中一个。<br>乘法原则：嵌套的复杂度为嵌套的代码的复杂度乘积<br><br>3、常见的复杂度量级<br>多项式量级：常量阶O(1)、对数阶O(logn)、线性阶O(n)、线性对数阶O(nlogn)、平方阶O(n^2)、立方阶O(n^3)、、、<br>非多项式量级：指数阶O(2^n)、阶乘阶O(n!)<br><br>4、对数能互相转换。<br><br>5、空间复杂度比时间复杂度简单，常见的就有O(1)、O(n)、O(n^2)<br><br>思考题：<br>我觉得这是必要操作。在算法思想里有一个叫动态规划，随着dp状态的更新，判断目前状态是否为最优，是就继续该分支，不是就放弃。（这种思想极致化就是贪心算法），从而获得在程序运行结束时能获得“最好答案”。在给代码分析复杂度，其实就是动态规划思想的更大应用，从而获得“最优程序”。<br><br><br>","like_count":0},{"had_liked":false,"id":279808,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1613969798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613969798","product_id":100017301,"comment_content":"看到问题，突然想起一句话：项目越到后面越难维护，问题越在前面发现，修复的成本越低！所以呀...","like_count":0},{"had_liked":false,"id":279656,"user_name":"江涛","can_delete":false,"product_type":"c1","uid":1376956,"ip_address":"","ucode":"BA3707E9A7215E","user_header":"https://static001.geekbang.org/account/avatar/00/15/02/bc/2dbfa44c.jpg","comment_is_top":false,"comment_ctime":1613891199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613891199","product_id":100017301,"comment_content":"不多此一举，首先从代码运行的效率受 不同的环境影响，数据规模影响；还有就是团队工作的时候大家 CodeReview，更多的是直观的看代码找问题，学会复杂度的分析可以更好的帮助彼此找出低效代码。","like_count":0},{"had_liked":false,"id":279419,"user_name":"Geek_c6d818","can_delete":false,"product_type":"c1","uid":2447241,"ip_address":"","ucode":"C75D88DD4B6D88","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhKNfTrkGONA9TRs4ibOgPROmdSAf3lwHsPxehgbnrRxiahiaiaCXLzWmF7a0asAueMDDUBkftJAxHzmSXjzJ93ze81c/132","comment_is_top":false,"comment_ctime":1613780628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613780628","product_id":100017301,"comment_content":"时间复杂度：<br>1、只关注循环次数最多的一段代码<br>2、加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码的复杂度的乘积<br>常见时间复杂度：<br>O(1)<br>O(n)<br>O(㎡)<br>O(n!)<br>O(logn)<br>O(nlogn)<br>O(n+m)<br>O(n*m)","like_count":0},{"had_liked":false,"id":279132,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1613633454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613633454","product_id":100017301,"comment_content":"看了本节,就是说算法复杂度有好几个分类,一般要把复杂度降到最少耗费时间,最少利用空间(存储,计算内存)为最佳","like_count":0},{"had_liked":false,"id":278654,"user_name":"张昕","can_delete":false,"product_type":"c1","uid":2206217,"ip_address":"","ucode":"083933257D658A","user_header":"https://static001.geekbang.org/account/avatar/00/21/aa/09/6d6bd5c2.jpg","comment_is_top":false,"comment_ctime":1613181110,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1613181110","product_id":100017301,"comment_content":"问题：项目里都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？<br><br>回答：<br>1）猜测这里的性能测试是在代码开发中或开发完成后，进行的性能测试，潜在意义就是已经实现了代码，属于文稿中说的事后统计法，其发现性能问题后重构的代价非常高。<br>2）开发前进行性能测试的成本比较高，而且测试的数据量比较有限，无法真正发现性能问题，此时，需要程序员对代码进行时间和空间复杂度分析，提前识别代码中的性能问题和内存问题；<br><br>还有个问题想问下：如果一段开源的代码需要多个核并发执行，此时复杂度如何分析呢？","like_count":0},{"had_liked":false,"id":278623,"user_name":"Geek_c311eb","can_delete":false,"product_type":"c1","uid":1906736,"ip_address":"","ucode":"EF4D7C0A9BB89E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/gq1EeEEFPQibTRnCaZKZSEyLmfRpMianfxr5Jib0HW24GcDnE24xEAsiby9N0jPemrSkCulm453I6qiabloqjoOGc7Q/132","comment_is_top":false,"comment_ctime":1613136112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613136112","product_id":100017301,"comment_content":"我认为并不是浪费，分析时间、空间复杂度，可以对代码的优化有一个大致的方向","like_count":0},{"had_liked":false,"id":278528,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1613020519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613020519","product_id":100017301,"comment_content":"个人认为实际的大型项目中不会特意去分析时间复杂度，它只表示一种函数的增长关系，实际项目中不太多这种纯粹的算法。比如解决地理图形求交的算法，肯定是要用用户环境去模拟测试，尽量控制每个变化因素。我们就遇到有个别喜欢刷算法题的同事一顿分析说变成logn了，结果“掐秒表”后还变慢了，实际开发中影响的因素非常多（不是指机器、进程资源、调度这些）。但大O分析法对偏理论、偏纯粹的数据结构和算法的性能分析，还是非常省时省力的。","like_count":0},{"had_liked":false,"id":278495,"user_name":"陈峯","can_delete":false,"product_type":"c1","uid":2414165,"ip_address":"","ucode":"7337EB89B92E99","user_header":"https://static001.geekbang.org/account/avatar/00/24/d6/55/7031ebdc.jpg","comment_is_top":false,"comment_ctime":1612974425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612974425","product_id":100017301,"comment_content":"我的项目是移动端的，性能测试受限于不同设备、不同系统和测试数据量，当性能不过关时，具体还是得去分析测试软件指出的代码或涉及这块业务逻辑代码的时间、空间复杂度。如果每一地方都去分析复杂度应该很费时间，针对性的进行代码性能优化比较合适，且分析复杂度是必不可少的。","like_count":0},{"had_liked":false,"id":278145,"user_name":"八九","can_delete":false,"product_type":"c1","uid":1191617,"ip_address":"","ucode":"B996A884BFA474","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/c1/0fcd29ab.jpg","comment_is_top":false,"comment_ctime":1612774622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612774622","product_id":100017301,"comment_content":"总结：<br>数据结构：一组数据的存储结构，为算法服务。<br>算法：操作数据的一组方法，作用在特定数据结构之上。<br>复杂度分析：时间复杂度分析（又叫渐进时间复杂度，简称时间复杂度）<br>            空间复杂度分析（渐进空间复杂度）<br>1.大O复杂度表示法：不是代码的执行时间，是代码执行时间随数据规模变化的趋势。<br>执行次数越多，代码执行时间越长。所有代码的执行时间T(n)与每行代码的执行次数n成正比。<br>T(n)=O(f(n))<br>\tT:代码执行时间<br>\tn:数据规模的大小，f(n):每行代码执行次数总和<br>\tO:代表T(n)与f(n)成正比<br>2.时间复杂度分析<br>\t只关注执行次数最多的代码,通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级。<br>\t加法法则：总复杂度等于量级最大的那段代码的复杂度<br>\t乘法法则（嵌套代码）：复杂度等于嵌套内外代码复杂度的乘机<br>3.空间复杂度：表示算法的存储空间与数据规模之间的增长关系。<br>4.常见的*：<br>数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie树<br>算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法<br>复杂度：<br>\t多项式量级：<br>\t\t常数阶O(1)<br>\t\t对数阶O(logn)<br>\t\t线性阶O(n)<br>\t\t线性对数阶O(nlogn)<br>\t\t平方阶O(n^2)、立方阶O(n^3)...k次方阶O(n^k)<br>\t\t代码的复杂度由两个数据的规模来决定:O(m+n)、O(m*n)<br>\t非多项式量级：低效<br>\t\t指数阶O(2^n)   <br>\t\t阶乘阶O(n!)\t  <br>谢谢老师！\t","like_count":0},{"had_liked":false,"id":278126,"user_name":"一叶知秋","can_delete":false,"product_type":"c1","uid":2435907,"ip_address":"","ucode":"617B8DC737BE43","user_header":"https://static001.geekbang.org/account/avatar/00/25/2b/43/f168aa47.jpg","comment_is_top":false,"comment_ctime":1612771304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612771304","product_id":100017301,"comment_content":"不需要每段代码都分析复杂度，把常用的代码分析下就可以了。尤其是优化一个软件的时候，先从常用功能优化效果更好。如果对输入的规模有预期，可以采用易实现易理解、复杂度较高的的方式完成功能。","like_count":0},{"had_liked":false,"id":278100,"user_name":"張平","can_delete":false,"product_type":"c1","uid":1236979,"ip_address":"","ucode":"56CB0BE9323123","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/f3/4e42b9b5.jpg","comment_is_top":false,"comment_ctime":1612761500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612761500","product_id":100017301,"comment_content":"logn的关键点等比数列","like_count":0},{"had_liked":false,"id":277836,"user_name":"邹泰然","can_delete":false,"product_type":"c1","uid":1974265,"ip_address":"","ucode":"B6DDD7E5076DAA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/1f/f9/e4ceb37b.jpg","comment_is_top":false,"comment_ctime":1612614437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612614437","product_id":100017301,"comment_content":"并非多此一举, 原因如下: <br>   1. 在写代码, 进行性能测试前就应该进行复杂度分析, 否则写完代码后才发现有问题, 重写的代价太大.<br>   2. 养成分析复杂度, 优化复杂度的习惯才能写出更好的代码","like_count":0},{"had_liked":false,"id":277760,"user_name":"程同学","can_delete":false,"product_type":"c1","uid":2418763,"ip_address":"","ucode":"622B71D5A2DA5E","user_header":"https://static001.geekbang.org/account/avatar/00/24/e8/4b/8ddf36b0.jpg","comment_is_top":false,"comment_ctime":1612573690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612573690","product_id":100017301,"comment_content":"颗粒度很大.这是一条野蛮之路。不过我想走走，这野蛮之路，经历一次野蛮成长","like_count":0},{"had_liked":false,"id":277393,"user_name":"底层小学生","can_delete":false,"product_type":"c1","uid":2434549,"ip_address":"","ucode":"5EAAB052D8AC5C","user_header":"https://static001.geekbang.org/account/avatar/00/25/25/f5/be0e0c92.jpg","comment_is_top":false,"comment_ctime":1612404044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612404044","product_id":100017301,"comment_content":"分析时间和空间复杂度是判断算法优劣的重要因素之一，所以不只是为了项目的优化，更重要的是对你大脑结构的优化<br>","like_count":0},{"had_liked":false,"id":277075,"user_name":"西瓜👑 이 붕","can_delete":false,"product_type":"c1","uid":2284896,"ip_address":"","ucode":"78625262EF2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/22/dd/60/6551e734.jpg","comment_is_top":false,"comment_ctime":1612253765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612253765","product_id":100017301,"comment_content":"复杂度计算：<br>1、看执行次数最多的代码<br>2、加法原则：哪个循环执行最多<br>3、乘法原则：哪个循环套循环执行最多<br>-----<br>常见的时间复杂度：<br>O(n)、O(nlogn)、O(logn)、O(n^2)<br>------<br>常见空间复杂度：<br>O(1)、O(n)、O(n^2)<br>-------<br>其实做多了，一眼就看出来了","like_count":0},{"had_liked":false,"id":276958,"user_name":"雪眼冰眉","can_delete":false,"product_type":"c1","uid":1546210,"ip_address":"","ucode":"60C62376BD241E","user_header":"https://static001.geekbang.org/account/avatar/00/17/97/e2/c8e015b3.jpg","comment_is_top":false,"comment_ctime":1612191634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612191634","product_id":100017301,"comment_content":"老师，程序例子1第4行，for循环的i &lt;= n; ++i，判断和自增为什么只占1个unit_time,为什么不是2个？","like_count":0},{"had_liked":false,"id":276759,"user_name":"Lion耿","can_delete":false,"product_type":"c1","uid":1008130,"ip_address":"","ucode":"45F67979D78936","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/02/2476b038.jpg","comment_is_top":false,"comment_ctime":1612102285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612102285","product_id":100017301,"comment_content":"我觉得这种复杂度分析可以做成一个插件，各种IDE或者编辑器都应该有。<br>分析复杂度，关注比较耗时的操作，然后用加法法则和乘法法则。","like_count":0},{"had_liked":false,"id":276541,"user_name":"Geek_5ef2ce","can_delete":false,"product_type":"c1","uid":2430857,"ip_address":"","ucode":"3C09FF24D5FD17","user_header":"","comment_is_top":false,"comment_ctime":1611994510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611994510","product_id":100017301,"comment_content":"项目是为了解决问题，而项目运行的环境也应该是问题的一部分，复杂度是衡量的一个很好的标准","like_count":0},{"had_liked":false,"id":276388,"user_name":"Geek_2582c0","can_delete":false,"product_type":"c1","uid":2421046,"ip_address":"","ucode":"EB06D3EB5BED73","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Hh8WLAAQCzCUIMuicPsrAYqsZ1LpNt5ia2yia5gicnm3tGH3WKee1re05sogUh8cTb2OcDyb8NMzEHw3icJ1hic53EXA/132","comment_is_top":false,"comment_ctime":1611908525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611908525","product_id":100017301,"comment_content":"这么多基础知识的专栏,  终于有到了第三篇还能看懂的了 [手动狗头]","like_count":0},{"had_liked":false,"id":275808,"user_name":"Geek_8e623a","can_delete":false,"product_type":"c1","uid":2426101,"ip_address":"","ucode":"F3BEDE117DF4D8","user_header":"","comment_is_top":false,"comment_ctime":1611673044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611673044","product_id":100017301,"comment_content":"1、时间复杂度，通俗的说就是，一段代码里，是否有一个循环，要依据外部的变量执行多少次<br>2、空间复杂度，表示算法的存储空间与数据规模之间的增长关系","like_count":0},{"had_liked":false,"id":275398,"user_name":"简单","can_delete":false,"product_type":"c1","uid":2411905,"ip_address":"","ucode":"DED576BB48C604","user_header":"https://static001.geekbang.org/account/avatar/00/24/cd/81/6d8b770e.jpg","comment_is_top":false,"comment_ctime":1611501422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611501422","product_id":100017301,"comment_content":"1.时间，空间复杂度分析是事前分析，是事前准备，先指明路的方向，纲举目张。<br>2.性能测试是事后测试，是对这条路的测试。<br>3.一个是理论，一个是实践，理论是实践的抽象，实践会受至于环境。","like_count":0},{"had_liked":false,"id":275032,"user_name":"Calvino","can_delete":false,"product_type":"c1","uid":2420675,"ip_address":"","ucode":"9412B460FF3CD7","user_header":"https://static001.geekbang.org/account/avatar/00/24/ef/c3/bd245c22.jpg","comment_is_top":false,"comment_ctime":1611282458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611282458","product_id":100017301,"comment_content":"时间空间复杂度还是比较容易看出来的<br>课程里面print函数是java的 我用C实现了一下<br>中间search了一下malloc用法<br>type *a=(type*) malloc(n*sizeof (int)) <br>额外收货<br>yeah<br>","like_count":0},{"had_liked":false,"id":274885,"user_name":"蔡泽卿","can_delete":false,"product_type":"c1","uid":2412363,"ip_address":"","ucode":"7A4C1D48AC4D73","user_header":"https://static001.geekbang.org/account/avatar/00/24/cf/4b/217d1bd7.jpg","comment_is_top":false,"comment_ctime":1611209217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611209217","product_id":100017301,"comment_content":"肯定不多此一举啊，因为测试用例，只能涵盖所有我们已知，或者基本上已经想到的所有可能，对于一些用不到的极端情况的考虑，以及一些不可预见情况的可能很难做到都涵盖或者都测试到位，通过分析代码的时间和空间复杂度可以很好的发现代码是否存在一种或者多种情况是否会导致异常情况等。尤其是机器的内存占用情况和cpu占用情况，能够提前计算发现异常的可能性，早做预防和处理","like_count":0},{"had_liked":false,"id":274848,"user_name":"喜爱和憎恶","can_delete":false,"product_type":"c1","uid":1325119,"ip_address":"","ucode":"C6687FA1067FAD","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/3f/a6654841.jpg","comment_is_top":false,"comment_ctime":1611194939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611194939","product_id":100017301,"comment_content":"总结（www）：<br>1. 复杂度分析是什么？<br>算法执行效率的重要指标<br>2. 为什么需要复杂度分析？<br>2.1 测试结果（事后统计法）受环境影响大<br>2.1 测试结果（事后统计法）受数据规模影响大<br>3. 如何进行复杂度分析<br>3.1 复杂度分析分类<br>时间复杂度分析和空间复杂度分析<br>3.1.1 时间复杂度（重点）<br>3.1.1.1 表示方法 O<br>3.1.1.1.1 依据：算法的执行时间和每行代码的执行次数成正比<br>3.1.1.1.2 含义：代码执行时间随数据规模增长的变化趋势<br>3.1.1.1.3 集中分析方法：<br>只关注循环执行次数最多的那行代码<br>加法原则 ：非嵌套，循环次数最多的那个<br>乘法原则 ：嵌套<br>3.1.1.2 实例分析<br>复杂度量级 ：<br>多项式 O(1), O(logn), O(n), O(nlogn), O(n^2)<br>非多项式 O(2^n), O(n!)<br>实例：<br>O(1) 没有循环，递归<br>O(logn) O(nlogn) <br>O(m+n) O(m*n) 两个数据规模<br>3.1.2 空间复杂度分析<br>3.1.2.1 什么是空间复杂度分析<br>空间复杂度分析也称渐进空间复杂度，算法存储空间和数据规模的关系<br>3.1.2.2 如何进行空间复杂度分析<br>关注资源分配","like_count":0},{"had_liked":false,"id":274697,"user_name":"Ting.","can_delete":false,"product_type":"c1","uid":1016882,"ip_address":"","ucode":"9C424A538F7B56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/32/f84d9ca5.jpg","comment_is_top":false,"comment_ctime":1611128082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611128082","product_id":100017301,"comment_content":"熟练了以后，写代码的时候就会选择时间和空间复杂度低的来了，不觉得浪费时间。<br>总结：用大O表示法来分析时间和空间复杂度。","like_count":0},{"had_liked":false,"id":274379,"user_name":"Geek_lasia","can_delete":false,"product_type":"c1","uid":1675982,"ip_address":"","ucode":"559EF2A622BCD1","user_header":"https://static001.geekbang.org/account/avatar/00/19/92/ce/39c27198.jpg","comment_is_top":false,"comment_ctime":1610984970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610984970","product_id":100017301,"comment_content":"logn那一段代码。假设运行次数是x，执行次数与n的关系是：2的（x-1）次=n，即总次数x=Log2 n+1。 跟老师算出来的不太一样，是不是哪里理解的有问题，能否请老师指导下？谢谢🙏<br>","like_count":0},{"had_liked":false,"id":274276,"user_name":"小龙","can_delete":false,"product_type":"c1","uid":1161254,"ip_address":"","ucode":"521B8CF8F7D9F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/26/f1eca57b.jpg","comment_is_top":false,"comment_ctime":1610951779,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610951779","product_id":100017301,"comment_content":"个人认为这个绝不是多次一举，提前分析可以规避大部分后续可能的风险，而且这个与测试也并不冲突啊","like_count":0},{"had_liked":false,"id":273806,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1610683507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610683507","product_id":100017301,"comment_content":"们可以说，算法1的时间复杂度是O(n)，算法2的时间复杂度是O(logN)，这样我们立刻就对不同的算法有了一个“效率”上的感性认识","like_count":0},{"had_liked":false,"id":273393,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1351348,"ip_address":"","ucode":"43641465A5582B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL8AP4vaWEiaZbBgRDRwRaGyaOUVAzLibwsM4KkrPYRQicoETK6licTzWju2yDkSC6KSibJd1eDQIiaxjSQ/132","comment_is_top":false,"comment_ctime":1610584496,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610584496","product_id":100017301,"comment_content":"疑问：<br>“所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比”这句话中的n是数据规模，不是执行次数。<br><br>“乘法法则”这一节中的cal函数没有返回。<br><br>课后思考：<br>性能测试关注的是程序的性能，如程序在高并发或高业务量情况下的响应时间和可靠性等表现。影响性能的因素有很多，如硬件环境配置，操作系统和中间件配置，测试数据的特性和规模，等等。性能测试也可以在一定程度上检验代码的质量，定位代码级别的问题。<br><br>代码的时间复杂度、空间复杂度分析衡量的是代码本身的质量，不受代码之外其他因素（如硬件条件）的影响。质量良好的代码是程序性能优越的基础，在同等的条件下，质量更好的代码会带来性能更优的程序。","like_count":0},{"had_liked":false,"id":273366,"user_name":"CQ","can_delete":false,"product_type":"c1","uid":2067365,"ip_address":"","ucode":"F4899EEBE3CD8D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8b/a5/4598dc7b.jpg","comment_is_top":false,"comment_ctime":1610552482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610552482","product_id":100017301,"comment_content":"性能测试只是抽样测试（测试环境、测试数据规模等），无法做到穷举。因此，再在做时间复杂度、空间复杂度分析是有必要的，这样可以比较准确预估代码的效率。并不是每一段代码都需要做复杂度分析，只执行一遍的代码没必要，核心代码或者循环重复执行的代码，才关注复杂度和分析复杂度。","like_count":0},{"had_liked":false,"id":273357,"user_name":"猴精鸭","can_delete":false,"product_type":"c1","uid":1514660,"ip_address":"","ucode":"7513DC4138E031","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/a4/202dde43.jpg","comment_is_top":false,"comment_ctime":1610549413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610549413","product_id":100017301,"comment_content":"熟练掌握复杂度的分析，可以在一开始就避免写性能很差的代码，提高开发效率。而且性能分析的目的还是找出性能差的代码加以优化，掌握这个才有优化方向。","like_count":0},{"had_liked":false,"id":272906,"user_name":"小高","can_delete":false,"product_type":"c1","uid":1283052,"ip_address":"","ucode":"FCD422249F7355","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/ec/985675c8.jpg","comment_is_top":false,"comment_ctime":1610352863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610352863","product_id":100017301,"comment_content":"不是多次一举，进行性能测试之后，再分析时间复杂度、空间复杂度会为后面的优化指出一个方向。","like_count":0},{"had_liked":false,"id":272760,"user_name":"李兴振","can_delete":false,"product_type":"c1","uid":2004552,"ip_address":"","ucode":"78E54478F38DC1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/48/a0c6a06c.jpg","comment_is_top":false,"comment_ctime":1610266910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610266910","product_id":100017301,"comment_content":"小厂工作 ，数据结构和算法原来没有在工作中有过刻意的练习或应用，现在觉知了；我理解的是项目开始时，有对项目的一个性能的需求或约束，代码实现过程中，对代码进行复杂度分析，满足项目的要求。最后验证时，通过事后分析，性能测试比对结果。是这样的流程吗？  不理解项目之前做性能测试是什么意思？","like_count":0},{"had_liked":false,"id":271872,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1609848349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609848349","product_id":100017301,"comment_content":"时间复杂度和空间复杂度，表示的是算法执行效率和数据规模之间的增长关系。常见的复杂度模型有O(1)、O(logn)、O(n)、O(nlogn)、O(n2)等。","like_count":0},{"had_liked":false,"id":271417,"user_name":"java未知","can_delete":false,"product_type":"c1","uid":2362917,"ip_address":"","ucode":"ACE9E18894F774","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLFGxX5rcqiaavPhP3DSLWNJh4icbyYJUSbFeV0GxlmenXQevzTWNYhoaA6w55qZjY90aTPBgVgtq1w/132","comment_is_top":false,"comment_ctime":1609602583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609602583","product_id":100017301,"comment_content":"一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。如果循环次数是个固定已知的常量，那么其时间复杂度也应该是O(1)?","like_count":0},{"had_liked":false,"id":271057,"user_name":"ll","can_delete":false,"product_type":"c1","uid":1296458,"ip_address":"","ucode":"57C5DAC5B51036","user_header":"https://static001.geekbang.org/account/avatar/00/13/c8/4a/3a322856.jpg","comment_is_top":false,"comment_ctime":1609385176,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609385176","product_id":100017301,"comment_content":"汽车跑的快否，不全由发动机决定。车快，其发动机不定比慢车好，衡量标准不一样。性能测试作为衡量项目整体的指标，不能用来衡量算法的质量。能衡量或是评价算法的指标是复杂度分析。要拎得清，辨的明，这也是学习本的意义所在。","like_count":0},{"had_liked":false,"id":270990,"user_name":"reverse","can_delete":false,"product_type":"c1","uid":2271023,"ip_address":"","ucode":"FF04C9EF0CB292","user_header":"https://static001.geekbang.org/account/avatar/00/22/a7/2f/4b4a70ff.jpg","comment_is_top":false,"comment_ctime":1609340077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609340077","product_id":100017301,"comment_content":"常量阶O(1)：数据规模有确定值<br>对数阶O(logn)：变量以系数乘积的形式接近数据规模<br>线性阶O(n)：变量以加和形式接近数据规模<br>线性对数阶O(nlogn)：线性阶和对数阶的嵌套<br>k次方阶O(n^k)：k层嵌套的线性阶<br>指数阶O(2^n)、阶乘阶O(n!)：非多项式量级","like_count":0},{"had_liked":false,"id":270733,"user_name":"Geek_8c8386","can_delete":false,"product_type":"c1","uid":1802349,"ip_address":"","ucode":"8915FDA02499FC","user_header":"","comment_is_top":false,"comment_ctime":1609231994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609231994","product_id":100017301,"comment_content":"性能测试和时间，空间复杂度的分析并不冲突，在开发过程中我们要有进行时间，空间复杂度分析的意识，大致的估算出代码的复杂度，选择最优的方案，在开发阶段就可以解决一些潜在的效率问题，而不是要等到开发完成，性能测试才发现","like_count":0},{"had_liked":false,"id":270340,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1609075249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609075249","product_id":100017301,"comment_content":"在系统的学习完&lt;设计模式之美&gt;专栏后, 正式开始攻坚&lt;数据结构之美&gt;!<br><br>课后思考: <br>有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br><br>1. 项目做性能测试, 时间复杂度, 空间复杂度分析不是多此一举. 虽然现代云服务器和边缘设备可以忽略算力瓶颈, 但性能测试和复杂度分析意义在于找出严重的性能问题. 例如Android或ios开发中, 一些主线程执行的高时间复杂度代码可能导致UI卡顿, 给用户不好的体验.<br><br>2. 针对每段代码进行复杂度分析相对来说耗费时间. 凡事讲究投入-产出比, 通常我们对复杂核心业务代码进行复杂度分析, 不对简单的边缘业务进行复杂度分析是兼顾性能和效率的做法.","like_count":0},{"had_liked":false,"id":270058,"user_name":"李奇峰","can_delete":false,"product_type":"c1","uid":1563487,"ip_address":"","ucode":"22BC56BA5A5726","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/5f/c5791954.jpg","comment_is_top":false,"comment_ctime":1608888332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608888332","product_id":100017301,"comment_content":"看了那么多优秀的总结，我也来简单谈谈我的看法<br>首先并不是每段代码都需要进行渐进时间、空间复杂度分析，在写代码的时候我们脑海中就会对这段代码进行一个重要性的评估，如果是一些简单的不重要的代码，我觉得在写的过程中就可以直接计算出它的时间、空间复杂度。<br>对于重要的复杂的代码部分，首先我认为在写的过程中要注意避免过多的嵌套，其次在整体完成这部分代码后，要进行一次专门的时间、空间复杂度分析。<br>对于性能测试的看法，因为我是做大数据的，数据量较大，进行一次性能测试花费的代价较大。所以我更倾向于将现有的数据量带入到已经算好的时间、空间复杂度的公式中进行分析。","like_count":0},{"had_liked":false,"id":269225,"user_name":"olivia-byte","can_delete":false,"product_type":"c1","uid":1273891,"ip_address":"","ucode":"D54B3833995923","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/23/92d188aa.jpg","comment_is_top":false,"comment_ctime":1608561333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608561333","product_id":100017301,"comment_content":"复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )","like_count":0},{"had_liked":false,"id":268880,"user_name":"一支小闲鱼","can_delete":false,"product_type":"c1","uid":1618640,"ip_address":"","ucode":"96C6D03E69A716","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJmCRpUZlm5jaNbpHAk50CWkZwymo599zaThKat1y45JIvV2VU4srpZWCWYttBUGcCDLwtiaodOntQ/132","comment_is_top":false,"comment_ctime":1608387364,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608387364","product_id":100017301,"comment_content":"每段代码都分析一下时间复杂度和空间复杂度我觉得没有必要，只需找到那些比较容易出性能问题地方的代码分析即可。","like_count":0},{"had_liked":false,"id":268813,"user_name":"李吉玉","can_delete":false,"product_type":"c1","uid":1973965,"ip_address":"","ucode":"5BA744B972B5EA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIh0pqaia3PpSks7ib6OBORStk9EMuibQSVWmXtwpQHQOcdibmh4VJzrpcvxOuCyG45I0puNHUulVENRQ/132","comment_is_top":false,"comment_ctime":1608359121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608359121","product_id":100017301,"comment_content":"#### 时间复杂度的概念<br>- 随着数据量的增长，同比增长的时间就是时间复杂度，首先常数级别的时间复杂度都统一写O(1)，乘法中的常数去掉，最后留下来的，是随着N的增长，结果增长最快的那个表达式；<br><br>#### 空间复杂度的概念<br>- 随着数据量的增长，同步增长的空间就是空间复杂度，计算方法和上面的一样，主要看新开辟的空间的复杂度<br><br>#### 分析时间复杂度的方法<br>- 只关注复杂度最高的代码<br>- 加法法则：主要针对的是顺序执行的代码，没有互相嵌套的逻辑；将隔离开的代码分别进行复杂度分析，最后加起来，取其中随着N的变大，增长最快的值<br>- 乘法法则：主要针对的是嵌套的代码，从外到内分析每个的复杂度，然后相乘，取其中随着N的变大，增长最快的值<br><br><br>#### 常见的复杂度的值<br>- O(1)：并不是复杂度就是1，是指复杂度为常数级，不随数据量的变化而变化，所以统一是O(1)<br>- O(logN):并不是复杂度就是logN，因为所有的Log计算，都可以转变为CLog2N，去掉常数，我们只取增长最快的<br>- O(N)<br>- O(N)+O(M)<br>- O(NLogN)：这种一般是嵌套的逻辑比较常见<br><br>- O(N平方)：<br><br><br>#### 思考题：<br>    - 首先，性能测试的结果依赖各种硬件设备，结果可比性不大，就算同一个设备，不同的负载下测试的结果也不一样<br>    - 复杂度分析不多此一举，也不浪费时间，一方面，这是对自己写的程序可控的表现，另一方面，当负责度比较高的时候，可以寻求更好的解决方案，这个通过性能测试是解决不了的<br>   ","like_count":0},{"had_liked":false,"id":268798,"user_name":"Geek_f9ea21","can_delete":false,"product_type":"c1","uid":1489767,"ip_address":"","ucode":"9893422FD525F6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erQCmNjzBrZj090AicHB8XCicicavUOrHpibhWOe8VibicSACibAnlHLpcunTCNCwGibFh5vrSgGZlIUqiaVXQ/132","comment_is_top":false,"comment_ctime":1608353404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608353404","product_id":100017301,"comment_content":"要写出好的代码必须要先能够分辨什么是好的代码，当然会有很多的标准，在这里我们暂时把运行速度和占用空间作为一个衡量标准。那么如何利用这两个指标来衡量那种算法是更优的实现呢？<br>这里提出来两个概念，时间渐进复杂度，也就是说随着数据量的增长对执行时间的影响，简称时间复杂度。另外一个概念是空间渐进复杂度，也就是说随着数据量增长对空间占用的影响，也叫空间复杂度。这两个概念就可以判断一个算法在执行效率和空间占用上的优劣。<br>那么应该如何来做呢？其实核心在于理解概念本身，以时间复杂度为例，看的是数据增长对执行时间的影响。如果做一个假设，每行代码执行时间相同，那么对一个算法的执行时间就可以写成一个x的函数。因而，时间复杂度实际上就是比较该函数随着x增长值得变化率，这实际上就是微积分的求导。而我们知道在一个函数中，高阶影响远大于低阶，因此，为了简单的来分析，还可以对变化率简写为最高阶，此外，如果数值很大，那么高阶的常量也可以忽略掉。而空间复杂度类似。<br>最后，性能测试和代码复杂度的分析我觉得并不矛盾，实际的工作环境特殊性，需要进行基准测试。而时间和空间复杂度则是理论上提供了一种思维模型，可以快速分辨什么是更优的算法。此外，也是一种交流语言，提升了程序员之间交流算法复杂度的表达能力。","like_count":0},{"had_liked":false,"id":268686,"user_name":"型火🔥","can_delete":false,"product_type":"c1","uid":1003205,"ip_address":"","ucode":"C2322918B31E60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/c5/78626367.jpg","comment_is_top":false,"comment_ctime":1608293079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608293079","product_id":100017301,"comment_content":"粗估是为了判断趋势和比较，而且成本很低，值得投入","like_count":0},{"had_liked":false,"id":268603,"user_name":"Geek_79ff63","can_delete":false,"product_type":"c1","uid":1515863,"ip_address":"","ucode":"1485F1A8D3EB47","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLNWRTm9x25GTC687cFILsqhHDWpiazib9We24icRjHPGztIq7NiaTf1rgfOjeMibqsFRBAxbrDVUHcvLw/132","comment_is_top":false,"comment_ctime":1608270387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608270387","product_id":100017301,"comment_content":"性能测试的时间复杂度受限于物理环境，不同的机器结果不同，但是代码分析的复杂度可以很直观的给出潜在的性能风险，这个在开发阶段就可以规避掉","like_count":0},{"had_liked":false,"id":268310,"user_name":"想晴的天","can_delete":false,"product_type":"c1","uid":2371810,"ip_address":"","ucode":"6C6584BF55CD75","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxyKrFpzicHoHK5tO1ca14BgpCrmHJ5czZAdN260JdTic5eMnPlt5nGO6yVLfZSy0QKMoe79hhGiaVQ/132","comment_is_top":false,"comment_ctime":1608131303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608131303","product_id":100017301,"comment_content":"课后思考：<br>我个人认为做时间空间复杂度分析是有必要的，熟能生巧，慢慢的在做分析上花不了太多时间。而且熟练后，一些常见的很容易用肉眼看出时间空间复杂度。做分析能时刻提醒自己关注代码的质量，有利于自己写出高性能的代码","like_count":0},{"had_liked":false,"id":268153,"user_name":"Limerence","can_delete":false,"product_type":"c1","uid":1567508,"ip_address":"","ucode":"0F1EACA3F06512","user_header":"https://static001.geekbang.org/account/avatar/00/17/eb/14/c7768531.jpg","comment_is_top":false,"comment_ctime":1608085479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608085479","product_id":100017301,"comment_content":"老师，对于刚罗列的复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2^n) 和 O(n!)。除了这两个别的都是多项式量级吗，O(1)，O(n)看着不像是多项式呀，这里不是很理解","like_count":0},{"had_liked":false,"id":268134,"user_name":"羽","can_delete":false,"product_type":"c1","uid":2369723,"ip_address":"","ucode":"F841D2EF2A016B","user_header":"https://static001.geekbang.org/account/avatar/00/24/28/bb/5fcd8d73.jpg","comment_is_top":false,"comment_ctime":1608082772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608082772","product_id":100017301,"comment_content":"事先的时间和空间复杂度计算有利于选择合适的算法和数据存储结构，性能测试虽然能够在一定程度上还原应用场景需求、对上述复杂度进行更为直观的测试，但是考虑测试的成本，比起反复进行性能测试的摸索不如在纸上先规划好方案，让性能测试的作用从试错变为验证，这样可以极大的节约开发成本和自己的精力消耗。","like_count":0},{"had_liked":false,"id":268039,"user_name":"追梦少年","can_delete":false,"product_type":"c1","uid":2355130,"ip_address":"","ucode":"A9717D1ACC3BE4","user_header":"https://static001.geekbang.org/account/avatar/00/23/ef/ba/3dc5be65.jpg","comment_is_top":false,"comment_ctime":1608036217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608036217","product_id":100017301,"comment_content":"int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br> <br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum;<br> }<br><br><br>争哥，这段代码不是嵌套，就是如果令 n 等于10分析下来复杂度也是2n，所以为什么乘积分析法分析为n²呢，有点疑惑😦","like_count":0},{"had_liked":false,"id":267835,"user_name":"小风子","can_delete":false,"product_type":"c1","uid":1024047,"ip_address":"","ucode":"06E8E8F6CFFC16","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/2f/72f19fcd.jpg","comment_is_top":false,"comment_ctime":1607949375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607949375","product_id":100017301,"comment_content":"进行复杂度分析，可以有效的进行性能的预判，从开发层面就可以预知到代码的性能问题。也节省了后续测试的工作量。","like_count":0},{"had_liked":false,"id":267618,"user_name":"Jason.li","can_delete":false,"product_type":"c1","uid":2353767,"ip_address":"","ucode":"A7C99173BC1C06","user_header":"https://static001.geekbang.org/account/avatar/00/23/ea/67/9f3ca37c.jpg","comment_is_top":false,"comment_ctime":1607847097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607847097","product_id":100017301,"comment_content":"我写代码还是会先思考性能的，先要写出有追求的代码， 再配套给力的性能测试","like_count":0},{"had_liked":false,"id":267534,"user_name":"取悦","can_delete":false,"product_type":"c1","uid":1327864,"ip_address":"","ucode":"53BA6AB79C3CED","user_header":"https://static001.geekbang.org/account/avatar/00/14/42/f8/9a22b3aa.jpg","comment_is_top":false,"comment_ctime":1607793252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607793252","product_id":100017301,"comment_content":"我个人理解，时间复杂度和空间复杂度是代码质量的基础衡量标准，我们review别人的代码，最直接看到的也就是这两点，然后才会分析代码结构什么的。","like_count":0},{"had_liked":false,"id":267362,"user_name":"AtlantisGex","can_delete":false,"product_type":"c1","uid":2046934,"ip_address":"","ucode":"05952153BE165D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3b/d6/4e1c05a4.jpg","comment_is_top":false,"comment_ctime":1607694399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607694399","product_id":100017301,"comment_content":"首先我不认为性能测试和复杂度分析是重复工作。复杂度分析可以在编码阶段估算代码的运行效率并且写出高效代码，是对代码本身进行分析。而性能测试，是在程序运行起来之后做的检测，是对已经编写好的代码在特定环境、特定数据量下进行的评估，二者在这方面并不冲突，甚至可以说复杂度分析和性能测试要结合起来使用才能使程序效率更高。<br><br>    而且我也不认为复杂度分析会非常消耗时间。刚刚开始接触复杂度分析确实会出现耗时的情况，熟练了以后反倒不会消耗太多时间。而且如果不做复杂度分析，最后在程序性能测试的时候，性能出现问题，还需要再回来重新修改代码，那还不如开始就养成代码复杂度分析的好习惯，减少不必要的返工，还能帮助节省时间。","like_count":0},{"had_liked":false,"id":266864,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1607507851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607507851","product_id":100017301,"comment_content":"重新看一遍，时间复杂度描述的是工程的发展趋势，好的复杂度设计能够给我们的工程带来很大的性能提升，复杂度的设计也只是在我们理论上的设计，但是充分的性能测试可以为我们提供未知的问题，能够即使让我们的程序更优。","like_count":0},{"had_liked":false,"id":266209,"user_name":"きぃ","can_delete":false,"product_type":"c1","uid":1962416,"ip_address":"","ucode":"770B4CF5E83934","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/b0/d1b545ab.jpg","comment_is_top":false,"comment_ctime":1607242660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607242660","product_id":100017301,"comment_content":"我可不可以这样理解时间为复杂度更在意的是代码运行的时间计算方法，而空间复杂度更在于计算代码运行时数据存储的复杂程度，如常量，为O(1),一维数组O(n)，矩阵则为O(n2)","like_count":0},{"had_liked":false,"id":265489,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1606912980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606912980","product_id":100017301,"comment_content":"总结：<br>1. 为什么需要复杂度分析，而不是直接运行代码就得出结果。<br>由于运行环境的不同，数据的样本和质量的差异等因素，导致结果不一致。从而无法作为一个普适的标准去衡量代码的运行效率和对资源的消耗；而复杂度分析是随着数据规模的增大，在运行效率和资源消耗上的一个变化趋势，可以屏蔽其他因素带来的影响。<br><br>2.如何进行复杂度分析<br>在进行分析复杂度的时候，一般会分为时间复杂度，也就是效率；空间复杂度，也就是资源占用。时间复杂度越高，效率就越低。空间复杂度越高，资源占用就越多。前者一般与每行代码的执行次数之和呈正相关；后者与每行代码（占用空间 * 执行次数 ）之和呈正相关。<br><br>在实际应用中我们一般使用大O来表示复杂度。这个大O代表的意思为：正相关。那么用公式表示复杂度则可以粗略的写为：T(n) = O(f(n))。T(n)表示时间复杂度；f(n) 是一个函数，代表在输入的数据规模为n的情况下，所有代码执行次数之和。<br><br>3.常见的复杂度种类<br>代码千差万别，每个算法计算出的复杂度也就千差万别。我们在进行复杂度分析时，有个前提：假设输入的样本为无限大。有了这个前提，那么一个算法执行的效率如何取决于它的短板，也就是执行次数最多的那行代码。<br>在得出计算次数之和函数式后，这个短板往往反映在高阶函数上，只需要它即可。像常数，系数，低阶函数全都可以忽略不计。<br><br>我们在实战中常见的种类无外乎这几种，执行效率从低到高依次为:O(1) -&gt; O(logN) -&gt; O(N) -&gt;O(NlogN) -&gt; O(N2) -&gt; O(2^n) 和 O(N!)。后两个复杂度又被称为非多项式量级复杂度(NP)，一般不在我们的考虑范围之内，执行真的是太慢了。我们主要关注前几种多项式量级复杂度<br><br>这里有一个比较特殊的复杂度，O(1) 这个为什么是1呢？这是因为整个算法执行的过程中，无论样本变得多大，变化的趋势是恒定的。<br><br>4.分析的小技巧<br>复杂度分析是一个技术活，需要靠日积月累不算的练习，才能达到扫一眼就能看出时间复杂度是多少。当然它也是有规律可循的，我列举几个：<br>（1）优先看循环。一般代码执行次数最多的地方就是循环里<br>（2）如果循环存在嵌套，那么代码的执行次数就是内外循环执行次数之积。如果内循环的代码行是一个函数，那么内循环的执行次数就是函数的执行次数总和。<br>（3）如果存在平级循环，那么复杂度一般是他们之间执行代码次数的较大者<br>（4）存在多个样本，假如为n,x 。我们无法确定样本之间的大小，当出现为平级结构时需要累加；当出现嵌套结构时需要相乘。<br><br>针对于空间复杂度的分析，和时间复杂度类似。在次数的基础上需要考虑占用空间的问题（重复利用的空间除外）。","like_count":0},{"had_liked":false,"id":265165,"user_name":"馒头 张慧峰","can_delete":false,"product_type":"c1","uid":2338413,"ip_address":"","ucode":"6AC80D0B2EE8C4","user_header":"https://static001.geekbang.org/account/avatar/00/23/ae/6d/70801434.jpg","comment_is_top":false,"comment_ctime":1606800734,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1606800734","product_id":100017301,"comment_content":"p=1;for I in range(；p&lt;100；i++)<br>为什么循环是100而不是99呢？","like_count":0,"discussions":[{"author":{"id":1107179,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e4/eb/a6ec4c1e.jpg","nickname":"风中劲草","note":"","ucode":"DF4AAEC3FE95A2","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533155,"discussion_content":"i从0开始啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637804915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318941,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","nickname":"罗辑思维","note":"","ucode":"D257A06EDE928E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384772,"discussion_content":"最后一次循环判断是false，当p=100时，不满足循环条件，就退出了。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626746669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264822,"user_name":"Geek_1ec93e","can_delete":false,"product_type":"c1","uid":2346667,"ip_address":"","ucode":"85933C97A6B191","user_header":"","comment_is_top":false,"comment_ctime":1606662312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606662312","product_id":100017301,"comment_content":"渐近，可以相信成n已经无限大，该函数在坐标轴的曲线，比如n+2n^2+10000与n^2在n无限大的时候曲线是几乎贴合，在无限大的时候，低于最高阶的影响力就没那么大；<br>所以说渐进时间可以让我们知道最坏的情况是如何，知识初略分析，但是具体的情况，不如不同的数据量大小，推出用时可能是不一样的，这里可以想像成是n+2n^2+10000与n^2的如果有交点，也就有分界点，但是在x无限大两条曲线都是几乎贴合","like_count":0},{"had_liked":false,"id":264243,"user_name":"Younger.","can_delete":false,"product_type":"c1","uid":2333415,"ip_address":"","ucode":"E8ED26F6EC0CA2","user_header":"https://static001.geekbang.org/account/avatar/00/23/9a/e7/cec47676.jpg","comment_is_top":false,"comment_ctime":1606388515,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606388515","product_id":100017301,"comment_content":"你好我想问一下，三种不同的分析法分析同一种代码会不会得出三个不同的复杂度？","like_count":0,"discussions":[{"author":{"id":1358045,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","nickname":"小马哥","note":"","ucode":"B2C0FF38F8C9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369844,"discussion_content":"三种分析法则对应不同的三种场景: 常数阶, 求max(), 嵌套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619171856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264205,"user_name":"尘埃空间","can_delete":false,"product_type":"c1","uid":2244983,"ip_address":"","ucode":"5881991156752D","user_header":"https://static001.geekbang.org/account/avatar/00/22/41/77/a89dd880.jpg","comment_is_top":false,"comment_ctime":1606379167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606379167","product_id":100017301,"comment_content":"时间复杂度这块，清华的邓公讲的不错，建议结合起来看","like_count":0},{"had_liked":false,"id":264202,"user_name":"Geek_b49c9b","can_delete":false,"product_type":"c1","uid":2337732,"ip_address":"","ucode":"5C7C27144A4A07","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJt6TyUk2YZXALOqsd3icJuy8stPNZGWDzLkUJJomKwgtgOYm8p9LBUJ7JCxGOtBU97Z5s98OibVwhQ/132","comment_is_top":false,"comment_ctime":1606378689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606378689","product_id":100017301,"comment_content":"不是多此一举，根据实际跑出的性能时间，再分析时间复杂度和空间复杂度，来优化代码，根据实际需求来降低时间复杂度或者空间复杂度。","like_count":0},{"had_liked":false,"id":263708,"user_name":"长弓","can_delete":false,"product_type":"c1","uid":1146502,"ip_address":"","ucode":"E20D9E6DE76EB6","user_header":"https://static001.geekbang.org/account/avatar/00/11/7e/86/b6187c0a.jpg","comment_is_top":false,"comment_ctime":1606227460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606227460","product_id":100017301,"comment_content":"再一次学习数据结构和算法，突然感觉更多的是挺方法论，虽然现在不怎么开发了，但是方法还是很好的","like_count":0},{"had_liked":false,"id":263385,"user_name":"Mamba","can_delete":false,"product_type":"c1","uid":1475049,"ip_address":"","ucode":"8B3EC90736B8EB","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/e9/d131dd81.jpg","comment_is_top":false,"comment_ctime":1606122060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606122060","product_id":100017301,"comment_content":"Q:有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>A:不会，时间复杂度不依赖于环境，且不用数据测试就可以大概估算，可以事前就很快地对于代码质量有感性的认识。当然复杂度分析只是理论，理论不能代替实际，就像在数据规模较小时插入排序也许比快排更快，所以性能测试也是必要的。<br>","like_count":0},{"had_liked":false,"id":263378,"user_name":"c","can_delete":false,"product_type":"c1","uid":2054821,"ip_address":"","ucode":"76D404878E5786","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5a/a5/90bca75e.jpg","comment_is_top":false,"comment_ctime":1606120081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606120081","product_id":100017301,"comment_content":"空间复杂度很有必要，虽然平常没有怎么用，但是细微的差别对代码的速度有深刻的影响。","like_count":0},{"had_liked":false,"id":263154,"user_name":"JH","can_delete":false,"product_type":"c1","uid":2306941,"ip_address":"","ucode":"E0A1A78C077DB8","user_header":"https://static001.geekbang.org/account/avatar/00/23/33/7d/da883aae.jpg","comment_is_top":false,"comment_ctime":1606025592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606025592","product_id":100017301,"comment_content":"多看，多思，多动(画图帮助理解) 肯定有收获. <br>","like_count":0},{"had_liked":false,"id":262264,"user_name":"舍予","can_delete":false,"product_type":"c1","uid":1134618,"ip_address":"","ucode":"F333699D14213A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0wXEfsGnCiarxEUEvZz45bFEpSaWL79eK5DfUUbrNwLv6I6WDkMnmhb2fZvm2MtmIoU2yhBz7iaew/132","comment_is_top":false,"comment_ctime":1605680887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605680887","product_id":100017301,"comment_content":"非常感谢老师，厉害的人总是能把看似复杂的问题，讲得简单明了，这种本事也许要花很长时间的不断精进才能练就出来吧。<br>大O原来是一种随着规模增加的变化趋势。<br>课后思考题：如果有算法和数据结构的意识，那么平时写代码时无意中就会分析空间复杂度和时间复杂度，在写完代码的那一刻应该就是较优的代码，那么这样的代码性能测试自然也不会太差。就像代码的重构一样。<br>所以，分析复杂度不在于是否会浪费时间，因为它已经是编码行为中的一个必不可少的环节，而不是写完代码之后，分析一下复杂度，觉得不好，再去修改。","like_count":0},{"had_liked":false,"id":262213,"user_name":"Geek_98b751","can_delete":false,"product_type":"c1","uid":1563430,"ip_address":"","ucode":"E8D1148D1A2B5E","user_header":"","comment_is_top":false,"comment_ctime":1605666450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605666450","product_id":100017301,"comment_content":"之前一直不明白为什么要有这个复杂度的概念，听了这节课后，才知道复杂度是这么分析。<br> 说说自已的看法：时间复杂度，空间复杂度，相当于一种静态分析。在思路中就能够确定这个代码大概执行的效率，也就在一定程度上知道，代码是有改进的空间，效率是否有操作的空间。是一种事前对代码，对质量的思考。然后会根据各种所学到的数据结构进行比较，进一步加深对计算机代码执行的理解，也就会从一定程度上按照大神的思路在走近。刚开始可能时间 要比较长（还不熟悉），随着熟练程度的增加，惯性思维就会发挥很大作用，那么就会对于一段业务，应该用怎样的数据结构和算法，就会有所认识。再看其他人设计的代码，也会慢慢明白为什么要用这个数据结构来做。 如果是在项目之后做测试，那只是一种事后测试 ，如果测试的不理想，要修正这个算法，最后还是要回到这个原点重新分析。<br>所以，性能测试 是自己写代码的一种辅助和验证，让我们继续深入思考。","like_count":0},{"had_liked":false,"id":261888,"user_name":"赫里内勒多.","can_delete":false,"product_type":"c1","uid":1951650,"ip_address":"","ucode":"7BC31E9835FD29","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c7/a2/b7b898ad.jpg","comment_is_top":false,"comment_ctime":1605571080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605571080","product_id":100017301,"comment_content":"当不停的对写的代码进行时间、空间复杂度分析后，事实上也是在给自己进行一个反馈提醒，当这种反馈足够的多，也就具备了写出更好代码的能力","like_count":0},{"had_liked":false,"id":261876,"user_name":"carl","can_delete":false,"product_type":"c1","uid":1593385,"ip_address":"","ucode":"7C725C7D69855F","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqD7goM3NZGb77qicnUHX8qdrXpIH89Ziaul2475ko5VMpFxiajbQsJhv2aG0HxmX8vgswfz9WkvElBg/132","comment_is_top":false,"comment_ctime":1605546921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605546921","product_id":100017301,"comment_content":"关于O(m+n)，有点没有明白，既然对于两种事先没有办法估计量级的两个数据规模，不能用加法律了，那么又为什么写成O(m + n )的形式?","like_count":0},{"had_liked":false,"id":261841,"user_name":"唐继馀(yú)","can_delete":false,"product_type":"c1","uid":2268524,"ip_address":"","ucode":"1E09BF3B55E49D","user_header":"https://static001.geekbang.org/account/avatar/00/22/9d/6c/e96a9229.jpg","comment_is_top":false,"comment_ctime":1605535466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605535466","product_id":100017301,"comment_content":"大O表示法都是渐进式的，和数据规模有关往往取的极限值，但是某个特定输入范围或者环境下，这时有局限性。此时有些看似复杂的算法可能会有更好的性能，<br>另外通过测试找出性能瓶颈，以便优化基础代码，从指令级上进行优化。<br>","like_count":0},{"had_liked":false,"id":261609,"user_name":"看见猫","can_delete":false,"product_type":"c1","uid":1036317,"ip_address":"","ucode":"39E09C1F765218","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/1d/8041d9a3.jpg","comment_is_top":false,"comment_ctime":1605443486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605443486","product_id":100017301,"comment_content":"性能测试只能覆盖一部分场景，有可能覆盖的场景下性能测试没问题，但是一旦发布到线上，会存在多样的场景，比如模拟的数据和线上真实数据的差异，导致出现未被覆盖到的场景，正好这个场景下性能有缺陷。所以针对比较复杂的代码，有必要提前进行复杂度分析，压测之前有个清晰的认识，才能再压测过程中及时发现问题和解决问题。","like_count":0},{"had_liked":false,"id":261450,"user_name":"Adam","can_delete":false,"product_type":"c1","uid":1517838,"ip_address":"","ucode":"965DCD693E752B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK36t2flfxhzKygfLfdIHbK99M9D9w3v3bwAHUibJSFAs1ibswf7hbhkqL321k5SUjfiaWkkHeRBlibNA/132","comment_is_top":false,"comment_ctime":1605341568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605341568","product_id":100017301,"comment_content":"一个好的系统或者算法肯定在开始编码之前就要考虑和预估清楚时间复杂度空间复杂度。所谓磨刀不误砍柴工，只有方案预想好了编码才能事半功倍，不然说不定编写边改一塌糊涂","like_count":0},{"had_liked":false,"id":261445,"user_name":"湘然","can_delete":false,"product_type":"c1","uid":1373670,"ip_address":"","ucode":"17CC5FD3484974","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/e6/0f6da302.jpg","comment_is_top":false,"comment_ctime":1605339257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605339257","product_id":100017301,"comment_content":"不，性能测试受环境和数据规模影响，不同条件性能有差别，而时间和空间复杂度不依赖于具体环境，可以很客观的反映程序执行效率。对关键代码做时间和空间复杂度分析。","like_count":0},{"had_liked":false,"id":261002,"user_name":"波鲁克","can_delete":false,"product_type":"c1","uid":2207482,"ip_address":"","ucode":"96EA464F8ED83B","user_header":"https://static001.geekbang.org/account/avatar/00/21/ae/fa/5dd3089a.jpg","comment_is_top":false,"comment_ctime":1605170438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605170438","product_id":100017301,"comment_content":"提问，大厂里的测开所做的效能是使用复杂度分析来判断代码的时间空间吗？","like_count":0},{"had_liked":false,"id":260401,"user_name":"InvisibleDes","can_delete":false,"product_type":"c1","uid":1566802,"ip_address":"","ucode":"56908581681771","user_header":"https://static001.geekbang.org/account/avatar/00/17/e8/52/931888d7.jpg","comment_is_top":false,"comment_ctime":1604998372,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604998372","product_id":100017301,"comment_content":"项目性能测试，得到的是具体场景下的性能指标。<br>复杂度分析，得到的是理论上的性能指标。<br>我们选择理论上最优的做法，然后再具体测试下，是否满足我们的性能要求。","like_count":0},{"had_liked":false,"id":259275,"user_name":"观海胸襟阔","can_delete":false,"product_type":"c1","uid":2289781,"ip_address":"","ucode":"B82E4E0BF150AB","user_header":"https://static001.geekbang.org/account/avatar/00/22/f0/75/f60039af.jpg","comment_is_top":false,"comment_ctime":1604668045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604668045","product_id":100017301,"comment_content":"对代码做时间复杂度、空间复杂度分析，能分析代码所用时间、或所用存储空间与数据规模的变化关系处于什么数量级，实际项目性能测试中得到的是具体时间或具体空间，另外，前面几讲也提到过，测试环境差异导致的结果差异较大，如果要得到比较准确的性能情况，可能需要做大量的随机试验。","like_count":0},{"had_liked":false,"id":258778,"user_name":"Geek_11e868","can_delete":false,"product_type":"c1","uid":1270377,"ip_address":"","ucode":"A3589C1DA9DD25","user_header":"https://static001.geekbang.org/account/avatar/00/13/62/69/7c7d754b.jpg","comment_is_top":false,"comment_ctime":1604554721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604554721","product_id":100017301,"comment_content":"专栏真不错，通俗易懂，深入浅出","like_count":0},{"had_liked":false,"id":258335,"user_name":"七","can_delete":false,"product_type":"c1","uid":2285006,"ip_address":"","ucode":"430F9F536EA50A","user_header":"https://static001.geekbang.org/account/avatar/00/22/dd/ce/91aac2e8.jpg","comment_is_top":false,"comment_ctime":1604389907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604389907","product_id":100017301,"comment_content":"当然不是多此一举，与项目的粒度有关，如果每个粒度的代码块，都能尽量的降低复杂度，那么再融合成为一个项目的时候，会极大地增强项目的健壮性、提高项目的执行效率。而性能测试，可能会测试项目整体的性能，或者某个功能的性能，并不能具体的确定到底是哪个代码块的执行效率的低。","like_count":0},{"had_liked":false,"id":258270,"user_name":"hugozhang","can_delete":false,"product_type":"c1","uid":2273801,"ip_address":"","ucode":"3DADDB522B126F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/LicibaBrUGZVYicQcJ3PH0HwKIe7x5gld8MtvoA0wzNyPEEibkLy3V9Wzvic0iaUHSx1Od25u3SHSTepp3Sv7dgfMvicg/132","comment_is_top":false,"comment_ctime":1604366396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604366396","product_id":100017301,"comment_content":"时间复杂度和空间复杂度是事前分析法，它们的做法是抽象了基本代码的执行，将不同环境的差异性进行了统一抽象，理论上隔离了物理层执行的复杂过程，给出了一个基于代码执行次数的规律函数，可以量化大体代码性能。<br>基准测试是事后实验性结果，是一个综合性的，与物理实体环境和代码性能以及业务有着密切的关系，它是一个结果。<br><br>所以说基准测试和复杂度分析法是两个完全不同的东西。","like_count":0},{"had_liked":false,"id":258223,"user_name":"klchang","can_delete":false,"product_type":"c1","uid":2281046,"ip_address":"","ucode":"792355B14607ED","user_header":"","comment_is_top":false,"comment_ctime":1604328705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604328705","product_id":100017301,"comment_content":"不是多次一举，性能测试与代码复杂分析的含义不同，作用不同。性能测试是系统或构件对其及时性要求符合程度的指标。主要包括负载测试、压力测试、并发测试、大数据量测试等技术。而复杂度是渐进复杂度，是衡量具体代码的效率的方法。","like_count":0},{"had_liked":false,"id":258201,"user_name":"YUAN元","can_delete":false,"product_type":"c1","uid":2278571,"ip_address":"","ucode":"3E61E785BAA7AB","user_header":"https://static001.geekbang.org/account/avatar/00/22/c4/ab/49f21c62.jpg","comment_is_top":false,"comment_ctime":1604325252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604325252","product_id":100017301,"comment_content":"写的很精炼，言简意赅，通俗易懂。","like_count":0},{"had_liked":false,"id":257996,"user_name":"超级星AM","can_delete":false,"product_type":"c1","uid":2277598,"ip_address":"","ucode":"2EF503D2BDB3A5","user_header":"https://static001.geekbang.org/account/avatar/00/22/c0/de/b8212616.jpg","comment_is_top":false,"comment_ctime":1604238332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604238332","product_id":100017301,"comment_content":"自己在学数据结构时，关注点更多是在相关的数据结构中。但是今天学了老师的课，我才理解了为什么要数据结构和算法。以往听着同事都在说什么效率，耗时，我不知道他们在说什么，其实更多的是好奇他们到底在想什么，为什么会思考这些，他们怎么会知道这些东西的。那今天这一小节，解决了我的困惑<br>","like_count":0},{"had_liked":false,"id":257792,"user_name":"Enjoe","can_delete":false,"product_type":"c1","uid":1150328,"ip_address":"","ucode":"E0287D967AAC02","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/78/ebdefdbe.jpg","comment_is_top":false,"comment_ctime":1604131751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604131751","product_id":100017301,"comment_content":" 算法是需要解决具体问题的，它的资源限制是CPU和内存(GPU不在此讨论范围 )，对应的是算法时间复杂度，和空间复杂度，人做事也受时间精力和金钱的限制，哈哈 。<br>个人比较受启发的地方是，算法的资源消耗是一个动态，随数据规模增加而变化，如果没有复杂度这个表示法，我们表达这个事情可能很困难，我们可能会说在I7上100个数据运算时间是多少，1000个数据运算时间是多少。但有复杂度的这个概念，我们可以脱离平台， 告诉使用者，我们这个算法是时间复杂度是O(1)、空间复杂度是O(n2)。在实际的性能分析中，当内存占用率非常大时，我们可以留意一下算法处理的数据规模是多少，因为我们使用算法空间复杂度是指数变化， 当1000个数据规模，内存是1000000倍。","like_count":0},{"had_liked":false,"id":256755,"user_name":"小明同学","can_delete":false,"product_type":"c1","uid":2268281,"ip_address":"","ucode":"AEF71EB6509C23","user_header":"","comment_is_top":false,"comment_ctime":1603722411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603722411","product_id":100017301,"comment_content":"我是这么理解的：<br>1.没有for循环就是 O（1）<br>2.for循环 减半（或者其他） 就是 O(logn)<br>3.一个for循环就是O（n)<br>4.一个for循环 循环减半（或者其他） 执行了n次 O(nlogn)<br>5.两个for循环 O（n2)","like_count":0},{"had_liked":false,"id":255487,"user_name":"李开心","can_delete":false,"product_type":"c1","uid":2234616,"ip_address":"","ucode":"26686F1B81955F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwNBKDRXOBicxecpDjflN9GDhGy75WgpWLdAGaibLscK6s2icA3AFibfmicffnhnwCSzNOKuIMgficlajw/132","comment_is_top":false,"comment_ctime":1603355871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603355871","product_id":100017301,"comment_content":"① 事后统计法：通过运行代码，通过统计、监控得到算法执行的时间和占用的内存大小，但是这种方法受运行环境、硬件设备、数据规模等因素的影响。<br>② 大O复杂度表示法 通过代码本身来衡量代码的复杂度，通常会忽略掉公式中的常量、低阶、系数，只记录一个最大阶的量级。<br>大O复杂度特点<br>1.只关注循环执行次数最多的一段代码<br>2.加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>③常见的时间复杂度实例<br>多项式量级<br>O(1)：代码中不包含循环、递归等，代码执行时间不随n的增大而增大<br>O(logn)、O(nlogn)：<br>O(m+n)、O(m*n)<br>非多项式量级<br>O(2^n) 和 O(n!)。<br>总结：当数据规模n越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。<br>④ 时间空间复杂度以多练为主","like_count":0},{"had_liked":false,"id":255357,"user_name":"xiao-lan🌻","can_delete":false,"product_type":"c1","uid":2250376,"ip_address":"","ucode":"763B6D9327BE52","user_header":"https://static001.geekbang.org/account/avatar/00/22/56/88/a131c24d.jpg","comment_is_top":false,"comment_ctime":1603328513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603328513","product_id":100017301,"comment_content":"时间和空间的复杂度分析，主要是针对编码的执行效率一个相对客观的计算，不依赖程序环境去估算，可以对后期程序测试的一个预设和后面测试过程相对的一个印证，对测试出的问题也可以很快找出原因所在","like_count":0},{"had_liked":false,"id":254942,"user_name":"强子","can_delete":false,"product_type":"c1","uid":2245503,"ip_address":"","ucode":"383D6AA09C1682","user_header":"https://static001.geekbang.org/account/avatar/00/22/43/7f/86dfca27.jpg","comment_is_top":false,"comment_ctime":1603238586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603238586","product_id":100017301,"comment_content":"多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)。为什么只有这两个是非多项式量级？","like_count":0},{"had_liked":false,"id":254877,"user_name":"强子","can_delete":false,"product_type":"c1","uid":2245503,"ip_address":"","ucode":"383D6AA09C1682","user_header":"https://static001.geekbang.org/account/avatar/00/22/43/7f/86dfca27.jpg","comment_is_top":false,"comment_ctime":1603204048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603204048","product_id":100017301,"comment_content":"非多项式时间复杂度的算法其实是非常低效的算法","like_count":0},{"had_liked":false,"id":254876,"user_name":"强子","can_delete":false,"product_type":"c1","uid":2245503,"ip_address":"","ucode":"383D6AA09C1682","user_header":"https://static001.geekbang.org/account/avatar/00/22/43/7f/86dfca27.jpg","comment_is_top":false,"comment_ctime":1603203691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603203691","product_id":100017301,"comment_content":"而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了","like_count":0},{"had_liked":false,"id":254337,"user_name":"Kidron","can_delete":false,"product_type":"c1","uid":1818552,"ip_address":"","ucode":"BCBEDF8C7F1A3F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/bf/b8/6980b4e8.jpg","comment_is_top":false,"comment_ctime":1603101761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603101761","product_id":100017301,"comment_content":"重点要养成在写代码时关注程序时间复杂度空间复杂度的习惯。","like_count":0},{"had_liked":false,"id":253942,"user_name":"吉法师","can_delete":false,"product_type":"c1","uid":2232546,"ip_address":"","ucode":"F1E3F4F526CA13","user_header":"https://static001.geekbang.org/account/avatar/00/22/10/e2/35f2fc23.jpg","comment_is_top":false,"comment_ctime":1602981884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602981884","product_id":100017301,"comment_content":"感谢，终于知道为啥时间复杂度会有m+n这种了。。我以前都是当做n来看的","like_count":0},{"had_liked":false,"id":253459,"user_name":"麦兜","can_delete":false,"product_type":"c1","uid":1557873,"ip_address":"","ucode":"A0528A21E4B20C","user_header":"https://static001.geekbang.org/account/avatar/00/17/c5/71/b09c2c26.jpg","comment_is_top":false,"comment_ctime":1602744795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602744795","product_id":100017301,"comment_content":"3.  O(m+n)、O(m*n) 这里的案例中：这段代码用加法算还是乘法算呢？因为加法和乘法算出的结果差异还是很大的","like_count":0},{"had_liked":false,"id":253186,"user_name":"水诺","can_delete":false,"product_type":"c1","uid":1759594,"ip_address":"","ucode":"A4389439690F2F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d9/6a/873dc8c5.jpg","comment_is_top":false,"comment_ctime":1602644823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602644823","product_id":100017301,"comment_content":"第一个算法分享已发布<br>https:&#47;&#47;www.jianshu.com&#47;p&#47;91aea0359be9","like_count":0},{"had_liked":false,"id":253117,"user_name":"水诺","can_delete":false,"product_type":"c1","uid":1759594,"ip_address":"","ucode":"A4389439690F2F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d9/6a/873dc8c5.jpg","comment_is_top":false,"comment_ctime":1602602247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602602247","product_id":100017301,"comment_content":"应该是互为辅助，相辅相成的关系","like_count":0},{"had_liked":false,"id":253109,"user_name":"没有你你你你称","can_delete":false,"product_type":"c1","uid":1178918,"ip_address":"","ucode":"D5DCE19719DE5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/26/409c8a78.jpg","comment_is_top":false,"comment_ctime":1602601017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602601017","product_id":100017301,"comment_content":"有必要吧，通过性能测试才发现问题可能还要推翻设计实现，不如写的时候先分析下有个底吧。","like_count":0},{"had_liked":false,"id":252820,"user_name":"Gabriel","can_delete":false,"product_type":"c1","uid":1437358,"ip_address":"","ucode":"714772A93E93DC","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/ae/855b7e6e.jpg","comment_is_top":false,"comment_ctime":1602493996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602493996","product_id":100017301,"comment_content":"当然有必要。特别是时间复杂度，按照mysql的性能来算。你一段中，有很多个 select all 或者或一个 for 里面还有 select  这样。肯定是需要考虑的，mysql 是多消耗很多时间。这样肯定不适合的，必须得考虑的。","like_count":0},{"had_liked":false,"id":252542,"user_name":"Geek_39a06d","can_delete":false,"product_type":"c1","uid":2109310,"ip_address":"","ucode":"4A6E37BBCE3037","user_header":"","comment_is_top":false,"comment_ctime":1602348713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602348713","product_id":100017301,"comment_content":"思考题，我的理解是：首先，性能测试也是有局限性的，而且构建足够的测试量数据，以及测试的环境，这些受到CPU服务器硬件的影响，无法客观反映问题。所以还是需要做复杂度分析。其次，正是因为每次都分析了复杂度，养成习惯以后，才能提升效率，缩短以后分析问题的思考时间，并非是每次都要每行代码都要分析，刚开始新手阶段可能会分析很慢，经过刻意训练一段时间之后，一目十行，一目百行的能力有了之后，就具备“速读”代码的能力了，能够做到有的放矢，就像阅读能力提升之后，是为以后节省了时间，并非是浪费时间。","like_count":0},{"had_liked":false,"id":252528,"user_name":"Berlin","can_delete":false,"product_type":"c1","uid":2223841,"ip_address":"","ucode":"5980861B844BB5","user_header":"https://static001.geekbang.org/account/avatar/00/21/ee/e1/6978f8ba.jpg","comment_is_top":false,"comment_ctime":1602340541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602340541","product_id":100017301,"comment_content":"疑问：<br>（1）文中的公式T(n)=O(f(n))下面的说明中，是说f(n)为每行执行代码的总次数，但后面内容来看好像是指整段或者总代码执行的次数，不知道是怎样的情况呢<br>（2）代码举例中（比如第一个），第一行函数构造代码和return语句是不算进去复杂度的吗<br>麻烦老师解惑，谢谢","like_count":0},{"had_liked":false,"id":252350,"user_name":"Geek_1d3fdc","can_delete":false,"product_type":"c1","uid":2223198,"ip_address":"","ucode":"A9E79B272B3608","user_header":"","comment_is_top":false,"comment_ctime":1602248020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602248020","product_id":100017301,"comment_content":"个人觉得并不是多次一举的。首先测试是有局限性的，并不能覆盖所有的场景，比如数据量、机器的cpu、内存等更多多维度。<br><br>而复杂度分析可以让我们知道：<br>1、随着数据量的递增，效率和存贮的趋势是如何进行的，可以帮助我们对性能有大概的了解。以数据库检索为例，我们知道随着数据量递增，搜索时间是指数级递增还是线性呢？<br>2、可以衡量不同算法之间哪个是更优的，以便我们做优化设计。","like_count":0},{"had_liked":false,"id":252284,"user_name":"AugusYoung","can_delete":false,"product_type":"c1","uid":2057564,"ip_address":"","ucode":"3955A341082C70","user_header":"https://static001.geekbang.org/account/avatar/00/1f/65/5c/b9ea6ed8.jpg","comment_is_top":false,"comment_ctime":1602223299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602223299","product_id":100017301,"comment_content":"int =1 这一个步骤如果是正常去理解时间复杂度的话应该是O(1)<br>但是又说了常量不左右趋势，那这个还算时间复杂度么","like_count":0},{"had_liked":false,"id":251762,"user_name":"Fy","can_delete":false,"product_type":"c1","uid":2213304,"ip_address":"","ucode":"4F4C0617A79083","user_header":"https://static001.geekbang.org/account/avatar/00/21/c5/b8/481d8a64.jpg","comment_is_top":false,"comment_ctime":1601847445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601847445","product_id":100017301,"comment_content":"时间复杂度补充一点<br><br>如果具体数据过大 跑一遍花费很长时间和资源 监测时间来估算执行效率这样效率很低<br><br>“只要是已知数 即使很大 只要与n无关 就可以忽略 因为我们考虑的是效率与数据规模增长🉐变化趋势”","like_count":0},{"had_liked":false,"id":251180,"user_name":"terryking","can_delete":false,"product_type":"c1","uid":1012371,"ip_address":"","ucode":"39433F06D6BEF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/93/46895883.jpg","comment_is_top":false,"comment_ctime":1601390271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601390271","product_id":100017301,"comment_content":"个人认为时间复杂度分析与性能测试这是两个层次的东西；<br>第一、时间复杂度分析是提供理论支撑的，在开发代码的时候心里要有程序代码执行的预期；而性能测试属于在开发完成后对自己做出来的东西做一个端到端稳定性与符合业务并发要求的测试，保证系统稳定；<br>第二、时间复杂度分析提供理论基础之后，对于后续的性能压测通过提供了很好的基础保障，同时也能够快速闭环性能问题; 如果没有时间复杂度分析，即使后续性能测试报告指标不合格，也是完全无从下手去优化系统;","like_count":0},{"had_liked":false,"id":250375,"user_name":"livy","can_delete":false,"product_type":"c1","uid":2163901,"ip_address":"","ucode":"04D639A75886E0","user_header":"","comment_is_top":false,"comment_ctime":1601041229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601041229","product_id":100017301,"comment_content":"茅塞顿开啊，自从毕业后很少有这个体会了，老师讲的很清楚。时间空间复杂度直到现在才算理解了。<br>分析复杂度很有必要，可以提前排查时间空间复杂度高的代码，节省测试时间。","like_count":0},{"had_liked":false,"id":250139,"user_name":"白夜","can_delete":false,"product_type":"c1","uid":2200851,"ip_address":"","ucode":"1BC0500BE9C1CF","user_header":"https://static001.geekbang.org/account/avatar/00/21/95/13/8a68e5ee.jpg","comment_is_top":false,"comment_ctime":1600949043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600949043","product_id":100017301,"comment_content":"一、为什么需要复杂度分析？<br>1、测试环境非常依赖测试环境，不同的测试环境对代码的执行时间影响很大<br>2、测试结果受数据规模影响很大，所以我们使用O复杂度表示法，大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度<br>二、时间复杂度分析<br>1、只关注循环执行次数最多的一段代码<br>2、加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂的的乘积<br>三、几种常见的时间复杂度实例分析<br>常用的几种时间复杂度O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )<br>四、空间复杂度分析<br>也叫渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系<br>5、思考<br>没有多次一举，分析代码的有利于对性能的优化，写怎么样的代码比较合适，空间复杂度对使用多少内存的机器比较合适<br>来自小白的见解","like_count":0},{"had_liked":false,"id":249963,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1600867889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600867889","product_id":100017301,"comment_content":"复杂度分析可以直观地看出代码随着计算量的增大而呈现出的趋势。复杂的系统是由很多算法组成的，针对每一个算法尽可能写出低复杂度的代码，项目整体才能经得起考验。<br><br>性能测试一方面会受环境的影响，另一方面只能给出一个大致的结果，而无法给出真正导致算法性能差的内因，要找到内因还是要靠复杂度分析的。","like_count":0},{"had_liked":false,"id":249662,"user_name":"顺儿","can_delete":false,"product_type":"c1","uid":1175384,"ip_address":"","ucode":"609ED08F407626","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/58/643c3e44.jpg","comment_is_top":false,"comment_ctime":1600746636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600746636","product_id":100017301,"comment_content":"性能测试属于事后统计法。测试结果依赖于测试环境（硬件条件），同时也受测试数据的规模影响。得到的测试结果只适用于特定环境。<br>时间、空间复杂度分析，和环境、数据无关，通过代码的执行次数粗略分析代码效率趋势，让我们对代码最好、最坏情况下的运行情况有大致认识。评估复杂度只是粗略分析，且只需关注其最复杂的一段代码，耗时不是很高。<br>综上所述，时间复杂度、空间复杂度分析不是多此一举。评估性能时，可以性能测试与时间、空间复杂度分析相结合。性能测试能模拟特定环境下程序性能表现，时间、空间复杂度能对各个环境下的的执行情况形成粗略认识，两者相结合，相辅相成。<br>时间、空间复杂度分析更重要的是一种思维，在编码过程中带入这种思维可帮助我们提高代码质量，减少后期维护代码的成本。优化代码时，也可以通过分析复杂度定位问题。","like_count":0},{"had_liked":false,"id":247701,"user_name":"Belizer","can_delete":false,"product_type":"c1","uid":2175243,"ip_address":"","ucode":"17DA133DC0BDDF","user_header":"https://static001.geekbang.org/account/avatar/00/21/31/0b/91f317a0.jpg","comment_is_top":false,"comment_ctime":1599797893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599797893","product_id":100017301,"comment_content":"针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。<br><br>在O(m+n)这一段中有上面的描述，那段代码不能用乘法法则吧。又没有嵌套代码","like_count":0},{"had_liked":false,"id":247341,"user_name":"Geek_4e44ff","can_delete":false,"product_type":"c1","uid":1263099,"ip_address":"","ucode":"6E00BFD240709D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK5uXibRib32B9zMSBeLG8QBH9LNaAIWs1eECkoYTlhjaIzicrxr9ZJp9iaxzwUa2VBlAooy1X2GUVpPQ/132","comment_is_top":false,"comment_ctime":1599663039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599663039","product_id":100017301,"comment_content":"绝非多此一举，写程序就好比盖一栋大楼，如果设计不花功夫，就去盲目施工，等到所有的问题在项目验收时再暴露，可能再去修补，都难以挽回。","like_count":0},{"had_liked":false,"id":247285,"user_name":"Elvira","can_delete":false,"product_type":"c1","uid":2147840,"ip_address":"","ucode":"E94C546616ED7A","user_header":"https://static001.geekbang.org/account/avatar/00/20/c6/00/ba8a7124.jpg","comment_is_top":false,"comment_ctime":1599648571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599648571","product_id":100017301,"comment_content":"小规模数据上不同算法时间复杂度可能没有很大的差别，但在大数据背景下考虑时间复杂度还是有重要意义的，实际生产环境中会直接提现在用户体验感上","like_count":0},{"had_liked":false,"id":247283,"user_name":"情怀","can_delete":false,"product_type":"c1","uid":2168639,"ip_address":"","ucode":"93B027BE27C5B8","user_header":"https://static001.geekbang.org/account/avatar/00/21/17/3f/2886577a.jpg","comment_is_top":false,"comment_ctime":1599647619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599647619","product_id":100017301,"comment_content":"不会,因为不同的机器,网速,及其他原因得出来的结果都可能截然不同,结论不能依赖环境.而是恒成立的定理","like_count":0},{"had_liked":false,"id":247265,"user_name":"裴一林","can_delete":false,"product_type":"c1","uid":1124119,"ip_address":"","ucode":"CDA4E1E087BE28","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/17/c13a1981.jpg","comment_is_top":false,"comment_ctime":1599643291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599643291","product_id":100017301,"comment_content":"讲的真好，终于有点明白算法得复杂度是如何看出来的了，明天再复习一下","like_count":0},{"had_liked":false,"id":247136,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1599616508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599616508","product_id":100017301,"comment_content":"为什么需要复杂度分析？<br><br>事后统计法的局限性：<br>1. 测试结果依赖于测试环境<br>2. 测试结果依赖于数据规模<br><br>大 O 复杂度表示法：<br>(O = Opacity)<br>所有代码的执行时间 T(n) 与每行代码的执行次数（n）成正比。<br><br>T(n) = O(f(n))<br>T(n): 代码执行的时间<br>n：数据规模的大小<br>f(n)：每行代码执行的次数总和<br><br>大 O 时间复杂度：<br>表示算法执行时间随数据规模增长的变化趋势。<br><br>如何分析时间复杂度？<br>1. 只关注循环执行次数最多的一段代码<br><br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；<br>那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).<br><br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；<br>那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).<br><br>几种常见时间复杂度实例分析<br>1.非多项式量级：<br>O(2^n)<br>O(n!)<br><br>2.多项式量级：<br>O(1)<br>O(logn)<br>O(n)<br>O(nlogn)<br>O(n^2), O(n^3), … O(n^k)<br><br>不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。<br>O(log2n) === O(log3n) === O(logkn) === O(logn)<br><br>3.O(m+n)、O(m*n)<br>T1(m) + T2(n) = O(f(m) + g(n))<br>T1(m)*T2(n) = O(f(m) * f(n))<br><br>如何分析空间复杂度？<br>空间复杂度：<br>表示算法的存储空间与数据规模之间的增长关系<br><br>常见的空间复杂度：<br>O(1)、O(n)、O(n2 )","like_count":0},{"had_liked":false,"id":245855,"user_name":"星朝","can_delete":false,"product_type":"c1","uid":1848539,"ip_address":"","ucode":"DFCF2512D6DAE0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LqGZd83zp1y9fpbliaSgGh5qib5eGzU41xibTzib06ZAlaiaJibkJB89JuVEozCScUsVK90jpq7Na30AHDngQzI7YwiaA/132","comment_is_top":false,"comment_ctime":1599095780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599095780","product_id":100017301,"comment_content":"感觉不是多余的，他给了程序员一个预估模型或者叫预估方法，能在方向上看清代码性能，之前学算法四，感觉翻译不对，其他算法书籍甚至直接让你数循环层数，需要一些梯子掌握推理才能灵活应用","like_count":0},{"had_liked":false,"id":245453,"user_name":"zqwhu","can_delete":false,"product_type":"c1","uid":1525065,"ip_address":"","ucode":"137957AA1DBFEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7XeuUwO4iaATo21t06df4TGRibZfLkr81SqI3c1I8FIYXFvYqqxShcUZRclcuQl6ib85YLul7R2SeQ/132","comment_is_top":false,"comment_ctime":1598948180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598948180","product_id":100017301,"comment_content":"不是多此一举，而且每段代码都分析一下时间复杂度、空间复杂度，不会很浪费时间。反而让我们形成一种时间复杂度和空间复杂度的思维和概念。","like_count":0},{"had_liked":false,"id":244858,"user_name":"陆元春_deman","can_delete":false,"product_type":"c1","uid":1609018,"ip_address":"","ucode":"56484CA282DC2F","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/3a/b5076a06.jpg","comment_is_top":false,"comment_ctime":1598705353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598705353","product_id":100017301,"comment_content":"最早做国内手机，空间要求高（手机空间小），时间也有要求，往往被忽略。<br>现在做android，手机空间要求考虑的少，更多的是时间上的。<br>当然能做到时间和空间都更小的，才是最优秀的算法。<br>复杂度的分析，应该是写出优秀的代码的基础。尤其当客户量很大的时候，比如移动端。<br>app内某段代码写的很烂，浪费了时间和空间，对于几十上百万的用户，整体社会的资源也是一个浪费。","like_count":0},{"had_liked":false,"id":244843,"user_name":"关东燕雀寇关来","can_delete":false,"product_type":"c1","uid":1466455,"ip_address":"","ucode":"34393C584158FC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/57/6a53393a.jpg","comment_is_top":false,"comment_ctime":1598697295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598697295","product_id":100017301,"comment_content":"老师g(n)代表什么?还有你的底数是怎么打出来的","like_count":0},{"had_liked":false,"id":244755,"user_name":"悟者","can_delete":false,"product_type":"c1","uid":2153719,"ip_address":"","ucode":"B50C8FF5CDE045","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/f7/20840937.jpg","comment_is_top":false,"comment_ctime":1598668802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598668802","product_id":100017301,"comment_content":"不会多此一举，因为这个研究好了，以后服务器同样的内存，但是复杂度学的好的人可以极大化的使用服务器内存，而不是花更多的钱去烧内存. 另外如果平时养成这种深度阅读代码的习惯，也能够渐进分析复杂度，这个自己编的. 说白了就是会潜移默化的提高阅读代码的洞察力，处理细节的能力越来越强. 这是代码的美妙处之一. 泡杯咖啡打开电脑，审阅漂亮的代码是一件非常享受的事 ","like_count":0},{"had_liked":false,"id":244677,"user_name":"一步两步","can_delete":false,"product_type":"c1","uid":2151836,"ip_address":"","ucode":"B59D1F5293B5C2","user_header":"https://static001.geekbang.org/account/avatar/00/20/d5/9c/842eda55.jpg","comment_is_top":false,"comment_ctime":1598611307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598611307","product_id":100017301,"comment_content":"作为一名程序，我觉得保证自己的代码高质量一直是一种追求，更是一种素养；","like_count":0},{"had_liked":false,"id":244280,"user_name":"天敌","can_delete":false,"product_type":"c1","uid":1059944,"ip_address":"","ucode":"CD29A622197197","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","comment_is_top":false,"comment_ctime":1598450283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598450283","product_id":100017301,"comment_content":"老师，能讲一下递归时间复杂度分析的主定理吗，我看 算法导论 这块不是很明白。","like_count":0},{"had_liked":false,"id":243756,"user_name":"Geek_1ee684","can_delete":false,"product_type":"c1","uid":2115196,"ip_address":"","ucode":"1BB8791B0D40F5","user_header":"","comment_is_top":false,"comment_ctime":1598267662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598267662","product_id":100017301,"comment_content":"性能测试只是对于特定环境下代码执行过程对资源消耗的监控以获取对应条件下的评价，根据评价来判别代码的语气符合程度，这是时候诸葛亮行为。不可否为性能测试是代码优劣的重要指标，但是其局限性也影响了其适用场景，并且需求实现方式多种，达标的性能测试不一定是一份高质量代码。","like_count":0},{"had_liked":false,"id":243602,"user_name":"snappy","can_delete":false,"product_type":"c1","uid":2125715,"ip_address":"","ucode":"1AEA2F3824C0F2","user_header":"","comment_is_top":false,"comment_ctime":1598227592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598227592","product_id":100017301,"comment_content":"我不认为是多此一举<br>复杂度分析是对代码的系统测试局限性的一种补充，两者相辅相成。<br>复杂度量级低，一方面保证代码的高效，另一方面也可以让程序员对代码运行效率有明确的估计，系统测试可以说是对这种估计的验证，但是验证环境的不确定性还是有误差，相对而言，复杂度分析更能提供一个好的分析方向","like_count":0},{"had_liked":false,"id":243262,"user_name":"空白","can_delete":false,"product_type":"c1","uid":2132869,"ip_address":"","ucode":"C5EA3D1155B786","user_header":"https://static001.geekbang.org/account/avatar/00/20/8b/85/d154e9a6.jpg","comment_is_top":false,"comment_ctime":1598004733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598004733","product_id":100017301,"comment_content":"我觉得做时间复杂度和空间复杂度分析是很有必要的，但是不需要每段代码都需要做复杂度分析。比如我们有个业务是批量插入，插入成功后每行新数据都要写入日志，这种是必要的操作，但是又不是很重要，所以完全不需要做复杂度分析。而且做复杂度分析也可以帮助我们对项目有个大概的了解，总体来说我认为是利大于弊的","like_count":0},{"had_liked":false,"id":243226,"user_name":"念","can_delete":false,"product_type":"c1","uid":2136411,"ip_address":"","ucode":"2B1B5DA9877904","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5b/5173ea22.jpg","comment_is_top":false,"comment_ctime":1597997688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597997688","product_id":100017301,"comment_content":"解决了我一直不知道为啥log2N复杂度是logN，原来是对数函数的换底公式","like_count":0},{"had_liked":false,"id":243225,"user_name":"念","can_delete":false,"product_type":"c1","uid":2136411,"ip_address":"","ucode":"2B1B5DA9877904","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5b/5173ea22.jpg","comment_is_top":false,"comment_ctime":1597997570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597997570","product_id":100017301,"comment_content":"从自身角度来看，相当于多做了一份分析工作，而且自己发现可以更优化的时候，可能需要改动；但是对于系统来说，长久节省的时间和空间会比分析+改代码的时间更优","like_count":0},{"had_liked":false,"id":243054,"user_name":"ダメ","can_delete":false,"product_type":"c1","uid":2136348,"ip_address":"","ucode":"4CBFC5EC118216","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/1c/6307ab8a.jpg","comment_is_top":false,"comment_ctime":1597932783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597932783","product_id":100017301,"comment_content":"一个for循应该是3n²，一次循环=一次判断+方法体中的代码+一个（++i）","like_count":0},{"had_liked":false,"id":242831,"user_name":"算法够了码","can_delete":false,"product_type":"c1","uid":2135228,"ip_address":"","ucode":"EA0F69249A8D56","user_header":"","comment_is_top":false,"comment_ctime":1597850209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597850209","product_id":100017301,"comment_content":"分享一个小问题，一开始我认为在计算O(m + n)时，应该写成O(m)或者O(n)，因为在一开始计算地时候我们只考虑一个变量n，因此当数据规模很大的时候，可以忽略常数项、低级项，那么当数据规模很大的时候也可以认为m,n都是一样的，所以O(m+n)可以写成任意的其中一项。<br>但是，复杂度的定义是考虑的时间和空间成本随着数据规模变化的程度，所以不能只考虑数据规模很大的情况，应该是一个全范围的考虑，那么这时候，我们无法区别m和n的规模，那么就不能人为的省略一项，所以此时加法变成了O(m)+O(n) = O(m,n)。<br>我也不知道自己理解对不对，希望看到的大牛能给个意见","like_count":0},{"had_liked":false,"id":242308,"user_name":"Geek_a814f7","can_delete":false,"product_type":"c1","uid":2129514,"ip_address":"","ucode":"3C0EED9218954B","user_header":"","comment_is_top":false,"comment_ctime":1597666232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597666232","product_id":100017301,"comment_content":"非常有必要，自己分析过后。才能更清楚的了解问题。这是一种态度","like_count":0},{"had_liked":false,"id":242134,"user_name":"冬冬","can_delete":false,"product_type":"c1","uid":1180054,"ip_address":"","ucode":"B673E6482B5C93","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/96/afcb6174.jpg","comment_is_top":false,"comment_ctime":1597619547,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1597619547","product_id":100017301,"comment_content":"听懂了O(logN)的时间复杂度分析，用等比数列知识解释很好理解，学到了新东西。","like_count":0},{"had_liked":false,"id":241918,"user_name":"西风胡杨","can_delete":false,"product_type":"c1","uid":1488212,"ip_address":"","ucode":"7A35856E27F27B","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/54/3f78e3c8.jpg","comment_is_top":false,"comment_ctime":1597500235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597500235","product_id":100017301,"comment_content":"回答下老师的问题，很多同学觉的有必要，但我觉得也要分场景。如果是框架等基础设施代码，很有必要。因为基础设施代码，可能会用到很多项目中，每个项目的复杂度，数据量差异很大，这类代码应该要在性能上有很高要求。但是如果是业务代码，业务逻辑比较复杂的话，有时很难分析，或者业务本身数据量不大，或者分析的结果跟实际测试结果差异较大，一般还是以基线测试为准。不过一般业务代码中，我们要求尽量不用三层循环，两层循环也要少用，其实就是用到时间复杂度概念在考虑问题。","like_count":0},{"had_liked":false,"id":241744,"user_name":"攻城狮","can_delete":false,"product_type":"c1","uid":1197444,"ip_address":"","ucode":"7D2C2836052C4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/84/4b309ba9.jpg","comment_is_top":false,"comment_ctime":1597407403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597407403","product_id":100017301,"comment_content":"最后一个例子计算时间复杂度<br>是因为这行   int[] a = new int[n];   得出时间复杂度是n?","like_count":0},{"had_liked":false,"id":241675,"user_name":"Nocye","can_delete":false,"product_type":"c1","uid":1984005,"ip_address":"","ucode":"C1B64AE17AEDF8","user_header":"https://static001.geekbang.org/account/avatar/00/1e/46/05/ceae38f3.jpg","comment_is_top":false,"comment_ctime":1597388641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597388641","product_id":100017301,"comment_content":"是否进行性能测试,要根据项目实际的应用场景,以及编程者的经验来决定,编程者在编程中就应该对算法可能产生的结果有一个大概的预估,编写每一段代码时分析代码的执行效率并不是浪费时间,而是必须要做的事情","like_count":0},{"had_liked":false,"id":241284,"user_name":"匠心","can_delete":false,"product_type":"c1","uid":1898691,"ip_address":"","ucode":"1778B6EA6BC82A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f8/c3/64e3c953.jpg","comment_is_top":false,"comment_ctime":1597237259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597237259","product_id":100017301,"comment_content":"<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br><br>为什么第二行不是执行次数最多的？","like_count":0},{"had_liked":false,"id":241249,"user_name":"Geek_10c4f8","can_delete":false,"product_type":"c1","uid":2117516,"ip_address":"","ucode":"920B7EEEA68E7C","user_header":"","comment_is_top":false,"comment_ctime":1597223261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597223261","product_id":100017301,"comment_content":"不是多此一举。1.测试依赖于环境，而复杂度分析，试图在程序不同运行环境中达到性能最优  2.时间及空间复杂度分析并不难，尽可能在写代码过程中变进行复杂度分析，避免代码码完后因复杂度太大而又要重构逻辑。","like_count":0},{"had_liked":false,"id":241119,"user_name":"匠心","can_delete":false,"product_type":"c1","uid":1898691,"ip_address":"","ucode":"1778B6EA6BC82A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f8/c3/64e3c953.jpg","comment_is_top":false,"comment_ctime":1597196296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597196296","product_id":100017301,"comment_content":"int i=1 和 int i=100000 对时间复杂度没有影响。可不可以理解为，线性的增长不作为时间复杂度的考量，时间复杂度必须是非线性的增长？","like_count":0},{"had_liked":false,"id":240822,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1597074700,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597074700","product_id":100017301,"comment_content":"不是浪费时间。因为做性能测试的时候也是需要评估一个算法的性能的，比如分析出来算法是O(n*n)的时间复杂度，那么想办法把他降低到o(logn)。那么性能肯定能提升一个档次，使用的机器数量也会减少很多。成本也是一个产品跟别人竞争的优势。","like_count":0},{"had_liked":false,"id":240439,"user_name":"李和桃","can_delete":false,"product_type":"c1","uid":1015877,"ip_address":"","ucode":"97E66953070EE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/45/d719f7df.jpg","comment_is_top":false,"comment_ctime":1596931194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596931194","product_id":100017301,"comment_content":"时间复杂度决定了执行时间，如果是数据规模比较大，那么O(n)和O(n^2)区别会非常大。比如说数据库操作，循环一个集合，挨个插入，时间复杂度为O(n),数据规模稍微大点，方法执行时间就会比较长，这个时候可以通过批量插入来解决问题，一次插入100条，把时间复杂度降为O(logn)。<br>再说空间复杂度，常见像归并排序就是O(n)的空间复杂度，如果数据量比较大，比如几百兆，整个堆可用空间又比较小，这个时候因为排序再申请几百兆的空间，比较容易引发内存阈值告警或者OOM。<br>综上，基本的时间复杂度和空间复杂度需要结合业务有清晰的认知，避免出现线上问题","like_count":0},{"had_liked":false,"id":239642,"user_name":"Im me","can_delete":false,"product_type":"c1","uid":1792714,"ip_address":"","ucode":"FF7DEED4BB4C37","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5a/ca/4d5d23d1.jpg","comment_is_top":false,"comment_ctime":1596603323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596603323","product_id":100017301,"comment_content":"先进行性能测试再做复杂度分析很多情况下是不合理的，做性能测试说明代码写完了，假如达不到性能要求功能要重新分析实现方案重新编码，这有多大的成本消耗？还有复杂度分析没必要每段代码都分析啊，要看与数据量相关的部分，而且在一段代码中计算复杂度的时候重点关注时间复杂度最高的一部分代码，这个分析花费的时间并不会太多，空间复杂度的话就不多说了。其实，在方案设计的时候性能消耗就应该考虑在内。","like_count":0},{"had_liked":false,"id":239287,"user_name":"毛成方","can_delete":false,"product_type":"c1","uid":1459289,"ip_address":"","ucode":"DFBF3D464D8D7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","comment_is_top":false,"comment_ctime":1596495709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596495709","product_id":100017301,"comment_content":"时间复杂度表示的是代码执行需要多少单位时间 <br>空间复杂度表示的是代码执行需要多少存储空间<br>时间和空间复杂度 就已经很直白表示了这段代码的性能<br>而性能测试和代码运行的硬件环境 编译器软件环境有关 不能全方位反应问题 <br>总结如下 不考虑代码空间和时间复杂度 就进行性能测试 就是吃大锅饭","like_count":0},{"had_liked":false,"id":239230,"user_name":"火很大先生","can_delete":false,"product_type":"c1","uid":1242070,"ip_address":"","ucode":"80746AFCEF5FE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/d6/5d55c315.jpg","comment_is_top":false,"comment_ctime":1596462911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596462911","product_id":100017301,"comment_content":"并没有多次一举，这就相当于看病的时候在街道卫生所先看病，预筛查，如果是大病才转给三甲医院，我们也需要有一个自己的判断，哪个是更好的。性能测试是为了验证这样的选择是否真的合适，但是合适的情况还是大多数的，但是为了严谨，也许有些情况的下，理论上最佳的选择，在实际中并不是，所以预先分析的步骤是必不可少的。时间复杂度和空间复杂的度的分析是很快就能出的，刚开始的时候可能不太熟练，需要花费一定的时候，日期月累，熟悉之后，不用刻意的分析，一看就知道各种情况的复杂度，哪种最优，或者稍加判断都可以得出。","like_count":0},{"had_liked":false,"id":238731,"user_name":"Jiantao","can_delete":false,"product_type":"c1","uid":1163504,"ip_address":"","ucode":"444580EC5EF109","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/f0/1aabc056.jpg","comment_is_top":false,"comment_ctime":1596275651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596275651","product_id":100017301,"comment_content":"文章思路清晰，复杂度分析到位，我都轻松理解了","like_count":0},{"had_liked":false,"id":238706,"user_name":"data","can_delete":false,"product_type":"c1","uid":2099037,"ip_address":"","ucode":"12B3F412BA2322","user_header":"https://static001.geekbang.org/account/avatar/00/20/07/5d/f1ed2db2.jpg","comment_is_top":false,"comment_ctime":1596265602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596265602","product_id":100017301,"comment_content":"进行时间&#47;空间复杂度分析是为了了解算法的执行效率以及资源消耗情况，有助于对代码进行优化，让我们的代码变得更快、更省。","like_count":0},{"had_liked":false,"id":238547,"user_name":"Carrie","can_delete":false,"product_type":"c1","uid":2065774,"ip_address":"","ucode":"0D89D47CD47D9A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/85/6e/dac3fb97.jpg","comment_is_top":false,"comment_ctime":1596194615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596194615","product_id":100017301,"comment_content":"不会多此一举，一般到性能测试时间都是代码交付得差不多，功能测试也基本跑通的时候做。如这个时候才发现代码有严重性能问题，改起来会比较麻烦，甚至可能推倒重开。而在写代码是就可以分析到它的时间和空间复杂度，就能预防有严重性能问题的发生。在代码时候就注重复杂度的控制，也可以有效地降低后面调优的难度。我是测试工程师，测试的目标是尽早地尽可能多的发现bug。所以我觉得这个时间和空间复杂度分析方法对我们测试也是一把利剑。","like_count":0},{"had_liked":false,"id":238333,"user_name":"奥佛铎","can_delete":false,"product_type":"c1","uid":1234919,"ip_address":"","ucode":"A1D544E5F22B7F","user_header":"","comment_is_top":false,"comment_ctime":1596124163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596124163","product_id":100017301,"comment_content":"时间空间的复杂度分析当然不是浪费时间，上来就brute force只会让人觉得很傻，先思考，再开码","like_count":0},{"had_liked":false,"id":238255,"user_name":"SandCarving","can_delete":false,"product_type":"c1","uid":2056201,"ip_address":"","ucode":"6B97DB71613A46","user_header":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","comment_is_top":false,"comment_ctime":1596103283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596103283","product_id":100017301,"comment_content":"总结：<br>1.一段代码的执行效率取决于它的时间复杂度和空间复杂度，所以，改善时间复杂度和空间复杂度是提高一段代码效率的主要方法<br>2.时间复杂度是指一段对于可变的数据规模代码在运行过程中所执行的次数，一般情况下，算法的时间复杂度会取最高阶的复杂度作为评判标准，常见的从低到高的时间复杂度为O(1)、O(logn)、O(n)、O(nlogn)、O(n^2)。<br>3.空间复杂度的分析和时间复杂度的分析大体一致，基本上有O(1)、O(n)、O(n^2)这三种复杂度。<br>回答一下问题。我觉得这并不是多此一举，若对项目之前都会进行性能测试，只能说这个这是针对了当前项目的运行环境，而对每段代码都分析一下时间复杂度、空间复杂度，能够很清晰地了解每段代码的执行效率，它并不会依赖于具体的运行环境，如果项目改变了运行环境，之前的性能分析就不一定能起到参考作用。","like_count":0},{"had_liked":false,"id":238210,"user_name":"Jacyn🌟","can_delete":false,"product_type":"c1","uid":2095012,"ip_address":"","ucode":"ADAB925019EB9A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f7/a4/7ed7e052.jpg","comment_is_top":false,"comment_ctime":1596095921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596095921","product_id":100017301,"comment_content":"不是在浪费时间，固然后期的自动测试可以有效的分析出代码会占用多少内存空间，运行需要消耗多撒后时间，但是这极度依赖于硬件设备的性能，测试数据的规模状态以及其他的因素，而对于每段代码的时间复杂度和空间复杂度的分析，有利于开发者对于每一阶段都能选择最佳的算法，从而有助于馋哦最后的运行效率。","like_count":0},{"had_liked":false,"id":238041,"user_name":"hicrystal","can_delete":false,"product_type":"c1","uid":1339281,"ip_address":"","ucode":"559C59248E4AF7","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/91/aed01ddf.jpg","comment_is_top":false,"comment_ctime":1596034127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596034127","product_id":100017301,"comment_content":"课后笔记：<br>时间复杂度：<br>加法原则，循环常量与n 无关 所以当n无限大，不计入在内，但是如果有另一个变量m 且无法确定大小，所以公式为T1(m) + T2(n) = O(f(m) + g(n))；<br>乘法原则： 相当于循环嵌套<br>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)<br>从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )；<br>由于指数换底公式：<br>所以log3n 就等于 log32 * log2n <br>O(log3n) = O(C * log2n)，其中 C=log32 是一个常量 所以所有的指数函数都可以忽略底数 ，统一表示为 O(logn)。<br>空间复杂度：<br>表示算法的存储空间与数据规模之间的增长关系。<br>我们常见的空间复杂度就是 O(1)、O(n)、O(n2）","like_count":0},{"had_liked":false,"id":237679,"user_name":"Geek_7b4330","can_delete":false,"product_type":"c1","uid":1784642,"ip_address":"","ucode":"B13CC6C810A9A4","user_header":"","comment_is_top":false,"comment_ctime":1595922767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595922767","product_id":100017301,"comment_content":"并不认为是多此一举<br>在实际的项目开发中，业务逻辑比课程中代码要复杂的多，在前期开发中为了迅速实现（工期比较紧张等原因），会直接先进行实现功能，并没有去考虑时间和空间的复杂度<br>功能实现后会先进行性能测试，看是否能够达到上线要求，若效果不理想再考虑进行时间或者空间复杂度的分析去进一步的优化  <br>实际开发场景多是从无到有，从有到优的过程","like_count":0},{"had_liked":false,"id":237508,"user_name":"gochange","can_delete":false,"product_type":"c1","uid":1978208,"ip_address":"","ucode":"443C58279EA333","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhIFHy5Xy8oMBbpR6mI90eqtW3GNKj8WRkkttg4TtnfdNibibqobyapfW0WQTUhnZmUyyXwxOnaPLAXuR2tTHxlXeq/132","comment_is_top":false,"comment_ctime":1595849626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595849626","product_id":100017301,"comment_content":"运行时间和n的大小以及unit_time有极大关系，因此O(n!)的代码不一定就比O(n)的代码执行时间要长，也就是说，性能测试不一定能将问题暴露出来；<br><br>时间复杂度&#47;空间复杂度让我对程序资源使用，执行耗时有更清晰的了解，没有人能写出完美的代码，在特定场景下O(2^n)的代码或者也能运行得很好，但是我们必须要知道什么时候就会出现问题。<br><br>一般情况下都不会去非常严谨得去做时间&#47;空间复杂度得分析，这通常是在编码过程中有一个大概的考量，因此并不会耗费太多时间。","like_count":0},{"had_liked":false,"id":237410,"user_name":"杨逸潼","can_delete":false,"product_type":"c1","uid":2084141,"ip_address":"","ucode":"529F44AAFCA717","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cd/2d/5a117045.jpg","comment_is_top":false,"comment_ctime":1595821667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595821667","product_id":100017301,"comment_content":"性能测试只能在当前电脑上进行，不具有普遍性，时间空间复杂度分析是具有普遍性的分析。","like_count":0},{"had_liked":false,"id":237195,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1992627,"ip_address":"","ucode":"7E46A4598BA72C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/67/b3/95383bda.jpg","comment_is_top":false,"comment_ctime":1595733575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595733575","product_id":100017301,"comment_content":"阐述问题三部法则，what why how","like_count":0},{"had_liked":false,"id":236966,"user_name":"Geek_f07d7e","can_delete":false,"product_type":"c1","uid":2062951,"ip_address":"","ucode":"24828F3E289CE1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rbqSDMdZHhaZO8fvhD73EsEyemaICbicb7Ddxymd6ict12UXibtyeH7pDwg4Jj4k0O0yTlEgLrF56W06NUw2YVrrQ/132","comment_is_top":false,"comment_ctime":1595606861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595606861","product_id":100017301,"comment_content":"是一种思考问题的方式，培养的我们编码处理问题思考的放方向，没有浪费可言","like_count":0},{"had_liked":false,"id":236832,"user_name":"Geek_6725b5","can_delete":false,"product_type":"c1","uid":1991426,"ip_address":"","ucode":"379B3DDD67B774","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JuoHr2r7lA9Sh7Phmrw86JVObha0hKsSYraibvicmVHdYe4UibB3htibR3IqdXGbzHYGicViblSseqdzG2hrSMD1OewA/132","comment_is_top":false,"comment_ctime":1595559916,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595559916","product_id":100017301,"comment_content":"算法复杂度提供了统一直观的分析方法，在该方法下可以比较出各个算法在处理大量数据时的时间空间需求，排除了由于程序运行平台差异以及统计方法等带来的测试误差，且为程序员编写程序提供了指导。在整个复杂度计算中，指数增长和阶乘增长没有举例，nlogn的图表画法感觉有误差，只能说明是一种概念性的复杂度表示，这也是复杂度表示不足的地方，但是也应该够用了。阶乘增长应该是用两个循环，内循环的边界为外循环的遍历值构成。指数增长应该和循环递归有关。","like_count":0},{"had_liked":false,"id":236674,"user_name":"吕小灰木有裤子穿","can_delete":false,"product_type":"c1","uid":1121777,"ip_address":"","ucode":"A8C77664A9E0A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/f1/03657475.jpg","comment_is_top":false,"comment_ctime":1595497701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595497701","product_id":100017301,"comment_content":"不知道是不是自己没有完全理解透，感觉老是讲的比我之前看的书要简单的多，自己也可以简单的进行分析了","like_count":0},{"had_liked":false,"id":236562,"user_name":"Cris","can_delete":false,"product_type":"c1","uid":1809369,"ip_address":"","ucode":"754EC94E54DB0B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/9b/d9/74ce7df8.jpg","comment_is_top":false,"comment_ctime":1595468300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595468300","product_id":100017301,"comment_content":"总结：<br>1.为什么需要复杂度分析<br>   不同的环境中，程序测试的结果可能不一致；程序的测试结果也可能受数据规模的影响。<br>2.大O复杂度表示法<br>   所有代码的执行时间T(n)与每行代码的执行次数n成正比<br>   T(n)=O(f(n))<br>3.时间复杂度分析<br>  1).只关注循环执行次数最多的一段代码（代码中只要没有循环、递归等，无论有多少行代码，时间复杂度也是O(1)）<br>  2).加法法则：总复杂度等于量级最大的那段代码的复杂度  O(m+n)根据m、n的大小判断是O(m)还是O(n)<br>  3).乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。循环代码n次，内嵌一个循环代码，循环m次，其时间复杂度为O(mn).<br>4.常见的时间复杂度<br>   O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;...&lt;O(2^n)&lt;O(3^n)&lt;...&lt;O(n!)<br>5.空间复杂度分析<br>   空间复杂度是算法的存储空间与数据规模之间的增长关系。<br>6.学习方法<br>   多练，多思考，看多少都没用，要动手。","like_count":0},{"had_liked":false,"id":236240,"user_name":"半瓶醋","can_delete":false,"product_type":"c1","uid":1282746,"ip_address":"","ucode":"8C898E244D0417","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/ba/9833f06f.jpg","comment_is_top":false,"comment_ctime":1595376079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595376079","product_id":100017301,"comment_content":"渐进时间、空间复杂度分析只是粗略的估计分析，有时会忽略掉一些系数K，同时也会受硬件环境、数据规模影响，所以不能说O(logn)的算法一定优于O(n)的算法，只能说某个特定的情境适合某种算法，毕竟算法是各位老爷子的结晶🤣","like_count":0},{"had_liked":false,"id":236142,"user_name":"joker","can_delete":false,"product_type":"c1","uid":2007345,"ip_address":"","ucode":"59040A9BE79CF5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a1/31/a0a33553.jpg","comment_is_top":false,"comment_ctime":1595327272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595327272","product_id":100017301,"comment_content":"并非多此一举。具体执行代码免不了依赖于执行的硬件和软件环境，得到的实验结果并不等价。复杂度分析是无关与环境的复杂度趋势分析，更具有一般意义。","like_count":0},{"had_liked":false,"id":235982,"user_name":"Itachi","can_delete":false,"product_type":"c1","uid":1784558,"ip_address":"","ucode":"0F9520652D6D43","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3a/ee/5afcf719.jpg","comment_is_top":false,"comment_ctime":1595261685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595261685","product_id":100017301,"comment_content":"做代码的时间空间复杂度分析是为了在写代码时就做出最优选择，避免二次检查更新的造成的浪费","like_count":0},{"had_liked":false,"id":235893,"user_name":"Geek_d21892","can_delete":false,"product_type":"c1","uid":2070129,"ip_address":"","ucode":"8EDB6843CF5909","user_header":"","comment_is_top":false,"comment_ctime":1595237019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595237019","product_id":100017301,"comment_content":"性能测试是在特定的环境下，特定的配置机器和特定的压测工具进行处理的，其结果依赖项很多，只能在项目特定的场景下进行参考。<br>复杂度分析是基于代码本身，通过时间和空间两个维度，来描述数据规模和代码快省效果的关系，可以在没有任何条件的情况下，知道和比较不同算法的执行效率，同时并不耗时，因为得到的是一种趋势和关系。<br>我认为学会复杂度分析非常有用，在大多数情况下反而比性能测试更快，更省。","like_count":0},{"had_liked":false,"id":235247,"user_name":"随心所欲就好","can_delete":false,"product_type":"c1","uid":2066548,"ip_address":"","ucode":"53637F53AA2831","user_header":"https://static001.geekbang.org/account/avatar/00/1f/88/74/d40c26d7.jpg","comment_is_top":false,"comment_ctime":1594951000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594951000","product_id":100017301,"comment_content":"请问多个算法的共同复杂度怎样计算呢？是累加吗？就比如说Python语言中的类，一个类中有多个方法，那这个类的复杂度怎样计算呢？","like_count":0},{"had_liked":false,"id":234241,"user_name":"邵丹丹","can_delete":false,"product_type":"c1","uid":1805565,"ip_address":"","ucode":"54BA126D68ABC5","user_header":"","comment_is_top":false,"comment_ctime":1594626161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594626161","product_id":100017301,"comment_content":"关于O(logn)我搞清楚不用纠结“底”是多少了","like_count":0},{"had_liked":false,"id":233832,"user_name":"白大米","can_delete":false,"product_type":"c1","uid":1001545,"ip_address":"","ucode":"0A4EC07A708406","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/49/32316d12.jpg","comment_is_top":false,"comment_ctime":1594466456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594466456","product_id":100017301,"comment_content":"O(m)+O(n)这里是为啥呢？<br><br>这里本质上不还是 O(n) 么？<br><br>数据规模前面如果已经忽略的话，为啥这里不忽略呢？","like_count":0},{"had_liked":false,"id":233770,"user_name":"Harvey","can_delete":false,"product_type":"c1","uid":1806296,"ip_address":"","ucode":"34B03C370302B2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkkCeRqSibC9qFI0govYb4tT7scTQDIoNwlV229T9BPqFhWUMCFv3OzOoecicmE88khiauJSkcC8WqA/132","comment_is_top":false,"comment_ctime":1594444867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594444867","product_id":100017301,"comment_content":"T1(m) + T2(n) = O(f(m) + g(n))   老师 文中说在这里加法法则失效，但是我觉得没有失效啊 完全可以写成T(n)=T1(m)+T2(n)=max(O(f(m)), O(f(n))) = O(max(f(m), f(n))). 因为不管m和n哪个量级大，我们只要取最大的那个就好了 没失效啊","like_count":0},{"had_liked":false,"id":233755,"user_name":"书到用时方恨少","can_delete":false,"product_type":"c1","uid":2062541,"ip_address":"","ucode":"AB4A5B9FED305F","user_header":"","comment_is_top":false,"comment_ctime":1594437742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594437742","product_id":100017301,"comment_content":"不认为是多此一举，在设计程序之前就想一下时间空间复杂度，会达到事半功倍的效果；","like_count":0},{"had_liked":false,"id":233605,"user_name":"Zail","can_delete":false,"product_type":"c1","uid":1011334,"ip_address":"","ucode":"59F08705F63919","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/86/5766d027.jpg","comment_is_top":false,"comment_ctime":1594365710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594365710","product_id":100017301,"comment_content":"老师，在O(m + n)、O(m*n)这个例子中<br>是不是没有写O(m*n)的例子呀？<br><br>下面写的这段代码是不是O(m*n)的时间、空间复杂度<br>```<br>int cal(int m, int n) {<br>  int sum_1 = 0;<br>  int sum_2 = 0;<br>  for (int i=1; i &lt; m; ++i) {<br>    sum_1 = sum_1 + i;<br><br>    int sum_2 = 0;<br>    for (int j=1; j&lt;n; ++j) {<br>      sum_2 = sum_2 + j;<br>    }<br>  }<br><br>  return sum_1 + sum_2;<br>}<br>```<br><br><br>另外向极客时间提一个需求：回复评论的时候回复框大一点，在加上富文本编辑器和代码展示的功能就更好啦😊","like_count":0},{"had_liked":false,"id":233309,"user_name":"qingmu1105","can_delete":false,"product_type":"c1","uid":2047133,"ip_address":"","ucode":"5813F7F14D2AB7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/9d/6fcf6c26.jpg","comment_is_top":false,"comment_ctime":1594283870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594283870","product_id":100017301,"comment_content":"代码的复杂度由两个数据的规模来决定时，其时间复杂度为什么是O(m+n)而不是O(Max(m,n))？请求解答。PS 留言如果能搜索就好了。。","like_count":0},{"had_liked":false,"id":233307,"user_name":"Geek_92b89e","can_delete":false,"product_type":"c1","uid":2061044,"ip_address":"","ucode":"6ECC4DC862DEAF","user_header":"","comment_is_top":false,"comment_ctime":1594283491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594283491","product_id":100017301,"comment_content":"时间复杂度和空间复杂度运用熟练的话，进行一次计算花时间应该不多，所以不算是浪费时间","like_count":0},{"had_liked":false,"id":233289,"user_name":"dayday","can_delete":false,"product_type":"c1","uid":1478294,"ip_address":"","ucode":"960C08A6618FE2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/glMH9jUOFS96sukOzshKWgYbZNxOB39RCemvsZ9ziciaWhJIN2GbziavvCR3rthicicGVf9AU5yoH1hrV6rVqE1swLA/132","comment_is_top":false,"comment_ctime":1594279988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594279988","product_id":100017301,"comment_content":"其实熟练了后看时间复杂度和空间复杂度就是一眼","like_count":0},{"had_liked":false,"id":232319,"user_name":"David","can_delete":false,"product_type":"c1","uid":2055413,"ip_address":"","ucode":"8AAF93FA3741D2","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5c/f5/4536828a.jpg","comment_is_top":false,"comment_ctime":1593955263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593955263","product_id":100017301,"comment_content":"T(n)=O(f(n))<br>T(n):代码执行时间<br>n:数据规模<br>f(n):代码行运行次数（假设每行代码运行时间相同）<br>O表示代码的执行时间 T(n) 与 f(n) 表达式成正比<br>大 O 时间复杂度表示法表示代码执行时间随数据规模增长的变化趋势","like_count":0},{"had_liked":false,"id":232305,"user_name":"W℡","can_delete":false,"product_type":"c1","uid":1334570,"ip_address":"","ucode":"343AB81883EE3C","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/2a/7e4350bf.jpg","comment_is_top":false,"comment_ctime":1593951225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593951225","product_id":100017301,"comment_content":"int ret = 0;<br>        int i = 0;<br>        for (; i &lt; n; ++i) {<br>            for (int in = i; in &lt; n - i - 1; in++) {<br>                ret = ret + 1;<br>            }<br>        }<br>如果是这种，内层不是简单的循环n遍，这种要怎么分析呢?","like_count":0},{"had_liked":false,"id":232241,"user_name":".","can_delete":false,"product_type":"c1","uid":2055898,"ip_address":"","ucode":"77609EE91386C4","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/da/9064df96.jpg","comment_is_top":false,"comment_ctime":1593933521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593933521","product_id":100017301,"comment_content":"时间复杂度和空间复杂度是最方便快捷的大致衡量一段代码的效率的方法,对算法的优化也有一定的指导意义.","like_count":0},{"had_liked":false,"id":231685,"user_name":"我家老王","can_delete":false,"product_type":"c1","uid":2048513,"ip_address":"","ucode":"9191AB7BA4862A","user_header":"","comment_is_top":false,"comment_ctime":1593747903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593747903","product_id":100017301,"comment_content":"复杂度的全称被称为渐进时间复杂度，渐进连个字很关键，有可能做性能测试时数据集较小，发现性能还ok，可一旦生产环境数据集成倍甚至数十倍的增长时(如微博热搜)，如果不做代码的时间空间复杂度分析，将会出现潜在的性能风险，因为本质上时间空间复杂度述的是执行时间随数据集增长的趋势，而性能测试只是这个趋势中某个节点的具体数据。一个是动态的，一个是静态的。因此无法用静态的东西去代替动态的东西","like_count":0},{"had_liked":false,"id":231669,"user_name":"Kevin~","can_delete":false,"product_type":"c1","uid":1080660,"ip_address":"","ucode":"361EC624BD8F83","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/54/0ae86230.jpg","comment_is_top":false,"comment_ctime":1593745196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593745196","product_id":100017301,"comment_content":"以前以为代码写的好，只需要写的高可用，高复用就是好代码<br>完全没有考虑时间复杂度，空间复杂度","like_count":0},{"had_liked":false,"id":231652,"user_name":"倪祥宇","can_delete":false,"product_type":"c1","uid":1823405,"ip_address":"","ucode":"FA10B79B408031","user_header":"https://static001.geekbang.org/account/avatar/00/1b/d2/ad/cfa512b7.jpg","comment_is_top":false,"comment_ctime":1593743172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593743172","product_id":100017301,"comment_content":"这是对自己的代码性能直观的测试，然后分析之后对自己的逻辑有明确的改观，不浪费时间，这个是对自己成长极为好的方式，可以客观的评定自己的代码能力","like_count":0},{"had_liked":false,"id":231590,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1593734068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593734068","product_id":100017301,"comment_content":"非常有必要，做了时间复杂度之后，可以预测性能瓶颈和系统的负载，为系统的以后的问题定位也有帮助","like_count":0},{"had_liked":false,"id":231183,"user_name":"DarK清","can_delete":false,"product_type":"c1","uid":1458755,"ip_address":"","ucode":"1E13A241C2AA46","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/43/76700c6f.jpg","comment_is_top":false,"comment_ctime":1593603341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593603341","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>1. 不是。在测试时候得到的性能表现，可能是由多个因素造成的。它依赖于设备，数据集，算法复杂度等等。如果在写程序的时候就已经把时间复杂度做到足够好，那就能把精力换到其他的地方去优化。这比反过来根据测试性能表现改算法，再测试，再改算法效率上高很多。此外，时间复杂度是可以相乘的，我们在写代码的时候，有可能单一函数或者功能的算法写的足够优秀，但是在调用过程中无意中嵌套了。测试的结果能帮我们发现这一点。<br>2. 不是浪费。 说到底在日常工作中，考虑时间复杂度和空间复杂度是一个熟练程度的问题。可能一开始花的时间会较多，但是一旦熟练之后，其实就是一种习惯，不会花太多的时间。而且从收益的角度来看，这些开销是完全值得的。","like_count":0},{"had_liked":false,"id":230718,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1593477695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593477695","product_id":100017301,"comment_content":"王老师，计算f(n)的时候，为啥return 不算执行一次？<br>","like_count":0},{"had_liked":false,"id":230265,"user_name":"Gosling⁶先生","can_delete":false,"product_type":"c1","uid":2041090,"ip_address":"","ucode":"CD2A69096A9287","user_header":"https://static001.geekbang.org/account/avatar/00/1f/25/02/0cc143f6.jpg","comment_is_top":false,"comment_ctime":1593330782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593330782","product_id":100017301,"comment_content":"在没看文章之前，听说过O(n)，O(logn)，作为一个非计算机出生的人来说，其实不懂什么是时间复杂度和空间复杂度，但是看了文章后，其实时间复杂度和空间复杂度无非就是效率和大小的分析。<br>而什么是时间复杂度，就是这段代码运行的最大时间。<br>我们只要理解循环里面用了什么样的复杂度，就可以理解这个代码块的最大复杂度是怎么样的。<br>而哪怕做了性能测试，其实还是有必要去做一次时间复杂度的分析，因为性能测试也可能会测不出某些在机器较为低配的情况，最好的方式时间复杂度可以统计出忽略了硬件条件需要的时间，从而去考虑可否优化，和优化的方案。<br>这么晚才学习，也不知道会不会被发现。","like_count":0},{"had_liked":false,"id":229991,"user_name":"村雨遥","can_delete":false,"product_type":"c1","uid":1984060,"ip_address":"","ucode":"BA00666B968527","user_header":"https://static001.geekbang.org/account/avatar/00/1e/46/3c/cd82adba.jpg","comment_is_top":false,"comment_ctime":1593236733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593236733","product_id":100017301,"comment_content":"这是我看了这一节所做的笔记，和大家一起交流学习！<br>https:&#47;&#47;blog.csdn.net&#47;github_39655029&#47;article&#47;details&#47;106970563","like_count":0},{"had_liked":false,"id":229114,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1592899467,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592899467","product_id":100017301,"comment_content":"不是多此一举，因为外部的环境不可控因素太多了，做性能测试也只能说尽量把不可控的因素降价，但无法真实模拟外部环境，而时间复杂度和空间复杂度分析，则可以在理论上给我们性能优化提供一定的思路。理论指导实践。","like_count":0},{"had_liked":false,"id":228824,"user_name":"Stone_zhu","can_delete":false,"product_type":"c1","uid":2041676,"ip_address":"","ucode":"E37BB5426B5A82","user_header":"https://static001.geekbang.org/account/avatar/00/1f/27/4c/dccdaa62.jpg","comment_is_top":false,"comment_ctime":1592818196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592818196","product_id":100017301,"comment_content":"课后思考:<br>先说下我的体会,我是开发,平时我开发任务的时候,对于时间复杂度都会有进行有意识的把控,在使用递归,或者2层以上的循环的时候都会考虑一下是否有必要,尽可能避免O(n^2)的出现.<br>对于空间复杂度上,这方面我不是很敏感,但是也会避免过多的声明变量还有代码的重用也就是代码规范.所以如果按照老师空间复杂度的理解,平时也是控制的还可以的.<br><br>对于老师的课后思考,我有一个新的看法,在性能测试之后,可以按照项目所需要的需求来进行分析.比如如果项目的业务是不追求速度的,并且此时的功能以及时间性能都可以满足项目的业务性能,我觉得这个时候是可以不用进行复杂度的分析,此时去进行分析,我觉得是犯了项目管理上的一个大忌(镀金).如果是项目对于性能上是有要求的,那么我认为复杂度分析是有必要的.可以通过复杂度的分析来进行一遍优化,同时也可以作为自己的项目经验保留记录,供以后参考学习","like_count":0},{"had_liked":false,"id":227762,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1592471436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592471436","product_id":100017301,"comment_content":"自己私下有推导了下换底公式，真是长时间不用，手生，好在还能推出来","like_count":0},{"had_liked":false,"id":226852,"user_name":"Johnny","can_delete":false,"product_type":"c1","uid":1219785,"ip_address":"","ucode":"2F047912201D67","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/c9/4b01f4e2.jpg","comment_is_top":false,"comment_ctime":1592216939,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592216939","product_id":100017301,"comment_content":"简单说性能测试能够发现问题，通过代码的时间复杂度、空间复杂度分析能够解决问题。","like_count":0},{"had_liked":false,"id":226821,"user_name":"游魂客","can_delete":false,"product_type":"c1","uid":2030731,"ip_address":"","ucode":"99289552B9E655","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ19UmygmZsYYNzZCM1luMg7IicBzf8Q0AFZCfIBOwXLcCNjnug6rCSOuhoYGK00HupUzc1GgJcv8g/132","comment_is_top":false,"comment_ctime":1592210508,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592210508","product_id":100017301,"comment_content":"性能测试会有很大的局限性<br>1.  性能测试依赖测试环境<br>2.  新能测试受限于数据量规模. <br>3.  受限于测试用例的编写<br>3.1 如果是根据业务场景的性能的测试, 可以能测试出问题, 但很难排查定位<br>3.2 如果是做单元性能测试, 需要针对模块写很多额外的场景, 这个代价并不小<br>4. 受限于压力规模<br>时间复杂度、空间复杂度分析的好处<br>1. 代价小, 作用大. 一旦掌握复杂度分析的方法, 时间复杂度和空间复杂度分析 简单的代码 是很容易通过经验预估的。 真正复杂的代码其实也是核心的代码, 是值得提前预估瓶颈的<br>2. 由于性能测试的局限, 很多场景是无法穷举 测试到的.  可以降低服务崩溃的风险<br>3.  容易做 资源的预估 和 规划","like_count":0},{"had_liked":false,"id":226449,"user_name":"Mamba","can_delete":false,"product_type":"c1","uid":1475049,"ip_address":"","ucode":"8B3EC90736B8EB","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/e9/d131dd81.jpg","comment_is_top":false,"comment_ctime":1592105791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592105791","product_id":100017301,"comment_content":"我觉得做复杂度分析很有必要，最近在学数学建模，就想到了机理分析和测试分析。<br>对比——<br>性能测试更像是测试分析，可以很快速很准确地判断出代码的运行效率，并得出模拟实际中的最大承受的数据量。~适合得到结果<br>而复杂度分析虽然不能如上做的那么准确，但ta很像是机理分析，可以找出普适的规律，哪段代码比较耗时间，哪段代码占内存，分析即可得出。~适合找出原因<br>而复杂度分析就是我们的内功，分析复杂度是在工程上线前必不可少的环节，事前多检测避免日后维护消耗大量精力。","like_count":0},{"had_liked":false,"id":226440,"user_name":"CoderArthur","can_delete":false,"product_type":"c1","uid":1625233,"ip_address":"","ucode":"5B591914F0F67C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","comment_is_top":false,"comment_ctime":1592103725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592103725","product_id":100017301,"comment_content":"【问题一】复杂度分析是否多次一举<br>老师问的是先做性能测试，再做复杂度分析。这里我有个疑问，现实中应该是先做复杂度分析吧，如果算法性能太差，应该直接抛弃再另选算法；duang~~没代码好像也没办法做复杂度分析吧，代码实现--&gt;测试--&gt;复杂度分析，这才是符合逻辑的流程。（这里是我自言自语，忽略掉）<br>回到老师的问题。做开发，处理边界问题是头等大事。用户量大，又触发边界问题（BUG），形成前有狼后有虎的局面，这时候往往会让开发人员出现失心疯，想找个洞把自己埋了。做复杂度分析可以规避类似问题，不会等到问题出现才来补救。<br><br>浪费时间的问题。如果不分析，往往会有BUG，解决BUG的时候不但要分析，还要解决其他连带问题，更浪费时间。","like_count":0},{"had_liked":false,"id":226174,"user_name":"如风","can_delete":false,"product_type":"c1","uid":1461177,"ip_address":"","ucode":"EC756AD9082A64","user_header":"https://static001.geekbang.org/account/avatar/00/16/4b/b9/ea21af73.jpg","comment_is_top":false,"comment_ctime":1591971421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591971421","product_id":100017301,"comment_content":"复杂度是最基本的评判","like_count":0},{"had_liked":false,"id":226071,"user_name":"Watts","can_delete":false,"product_type":"c1","uid":1145583,"ip_address":"","ucode":"A3D0EBC00D477C","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ef/9168ae82.jpg","comment_is_top":false,"comment_ctime":1591945714,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1591945714","product_id":100017301,"comment_content":"Why<br>\t1. 性能测试因为在测试阶段所以局限性很大；<br>\t2. 性能测试根据测试环境的硬件不同测试结果也相差很大；<br>        3. 测试结果受数据规模的影响很大，比如数据量极小时插入排序可能比快速排序还快。<br>How<br>\t1. 时间时间复杂度分析<br>\t\ta. 只关注循环执行次数最多的一段代码<br>                b. 总复杂度=量级最大的那段代码复杂度<br>问题一：<br>文章开始就讲到性能测试的局限性很大<br>1，性能测试太依赖测试环境，硬件不同测试结果大不同；<br>2，测试数据的规模也影响测试结果，比如数据量极小时插入排序可能比快速排序还快。<br>问题二：<br>关于针对代码分析复杂度的问题，可以重点分析带有循环和递归的代码，而且降低了代码的复杂度对项目是有价值的。","like_count":0},{"had_liked":false,"id":226066,"user_name":"dream7519","can_delete":false,"product_type":"c1","uid":1098624,"ip_address":"","ucode":"55E229FA55E15C","user_header":"","comment_is_top":false,"comment_ctime":1591943277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591943277","product_id":100017301,"comment_content":"不多此一举。<br>时间复杂度是对运行的时间做理论的分析。<br>空间复杂度是对运行内存做理论的分析。<br>通过复杂度分析可以知道性能瓶颈在哪里，那下一步就是对应的优化了。","like_count":0},{"had_liked":false,"id":226064,"user_name":"dream7519","can_delete":false,"product_type":"c1","uid":1098624,"ip_address":"","ucode":"55E229FA55E15C","user_header":"","comment_is_top":false,"comment_ctime":1591942632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591942632","product_id":100017301,"comment_content":"对数换底公式：<br>log_a b = log_c b &#47; log_c a<br>log_a b = 1 &#47; log_b a<br><br>所以有：<br>log_3 n = log_2 n &#47; log_2 3 = log_3 2 * log_2 n","like_count":0},{"had_liked":false,"id":225236,"user_name":"古十四","can_delete":false,"product_type":"c1","uid":1702340,"ip_address":"","ucode":"A076EFFCE2E51E","user_header":"https://static001.geekbang.org/account/avatar/00/19/f9/c4/476b0b9a.jpg","comment_is_top":false,"comment_ctime":1591689320,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1591689320","product_id":100017301,"comment_content":"复杂度不会在测试前才计算。编写代码前的设计阶段就已需要考虑复杂度。测试阶段确认复杂度我理解用作估算程序的使用资源，排除资源负载导致的测试障碍问题。","like_count":0},{"had_liked":false,"id":225033,"user_name":"墨名次","can_delete":false,"product_type":"c1","uid":1330267,"ip_address":"","ucode":"926EDC57291C09","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/5b/5499d6e6.jpg","comment_is_top":false,"comment_ctime":1591621209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591621209","product_id":100017301,"comment_content":"毕业好多年高中数学确实都忘了，一直在纠结：㏒3(n)=㏒3(2)*㏒2(n)，因为看不懂。翻了好多评论看到有同学对这个问题进行解释，看了他的解释我也没看懂。因为这个问题导致昨晚没睡好，上班也感觉心里好像被什么东西压着似的，最后还是老老实实买笔纸回来学习😂。<br><br>首先要知道有换底公式：㏒b(n)=㏒a(n)&#47;㏒a(b)；<br>根据换底公式可以知道：㏒2(n)=㏒a(n)&#47;㏒a(2);<br>设底数a=3；<br>则㏒2(n)=㏒3(n)&#47;㏒3(2)；<br>所以㏒3(n)=㏒3(2)*㏒2(n)。","like_count":0},{"had_liked":false,"id":224972,"user_name":"大熊","can_delete":false,"product_type":"c1","uid":1008951,"ip_address":"","ucode":"D7858E9DA87B5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/37/56c492d3.jpg","comment_is_top":false,"comment_ctime":1591608210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591608210","product_id":100017301,"comment_content":"不是多此一举，在数据量小的时候，代码看不出什么区别。当数据量达到一定级别后，代码写的随意就会出现性能问题了，一般到了这时候代码修改起来很难受，不如在开始就用时间复杂度分析下，不给自己挖坑！","like_count":0},{"had_liked":false,"id":224134,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1591283466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591283466","product_id":100017301,"comment_content":"代码复杂度分析并不是为了分析而分析，而是要思考代码复杂度是否还能优化，或者有没有其它更好的实现方式，评估只是开始，重点是评估之后的思考。性能测试只是考验代码稳定性和执行耗时的手段，并不是说经过了性能测试代码且达标就无法再优化，就像你已经全班第一了，但是依然有必要分析自己试卷中的不足以待下次改进","like_count":0},{"had_liked":false,"id":224132,"user_name":"总会有那么一天","can_delete":false,"product_type":"c1","uid":1741846,"ip_address":"","ucode":"5B1A5ED06E6A78","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLrbyvyBdlQfH4qEuPvALXPxbG4qMrLibibntO4WInf7ViaVYcIUmriblbEosNLKoEdATSBTKmrk1YrXw/132","comment_is_top":false,"comment_ctime":1591282494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591282494","product_id":100017301,"comment_content":"对于这个问题而言，虽然我们的项目每次之前都要做性能测试，但是我想到了大概几点：<br>1. 其实性能测试很多方面也是基于时间复杂度和空间复杂度分析；<br>2.如果我们写的代码我们都不去做时间空间复杂度分析，只是实现功能，性能自然不会太好，对于自己提升也没有什么帮助。<br>再来总结下这节课的学习内容：<br>1.我们需要时空复杂度分析是基于两个方面的因素：测试环境 + 数据规模<br>2.大O复杂度分析表示法，其实就是代码执行的时间随着数据规模增长的趋势；<br>3.时间复杂度分析 循环次数最大的那段代码 + 加法法则 + 乘法法则；<br>4.几种常用的时间复杂度分析 O(1) &lt; O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(2^n)&lt;O(n!)<br>5.空间复杂度分析 类比时间复杂度分析 只需要关注 O(1) O(n) O(n^2)","like_count":0},{"had_liked":false,"id":224009,"user_name":"家兴","can_delete":false,"product_type":"c1","uid":1668014,"ip_address":"","ucode":"605CEA5BB876F5","user_header":"https://static001.geekbang.org/account/avatar/00/19/73/ae/59455894.jpg","comment_is_top":false,"comment_ctime":1591255211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591255211","product_id":100017301,"comment_content":"循环条件随循环体的变化而变化，需要留意","like_count":0},{"had_liked":false,"id":223749,"user_name":"渡边君","can_delete":false,"product_type":"c1","uid":2022204,"ip_address":"","ucode":"79573F4BD802DB","user_header":"","comment_is_top":false,"comment_ctime":1591173204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591173204","product_id":100017301,"comment_content":"为什么T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))而不是T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O²(f(n)*g(n)).","like_count":0},{"had_liked":false,"id":223089,"user_name":"Initiative Thinker","can_delete":false,"product_type":"c1","uid":1736297,"ip_address":"","ucode":"A884396A1581EF","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9zRdkKuXMKh30ibeludlAsztmR4rD9iaiclPicOfIhbC4fWxGPz7iceb3o4hKx7qgX2dKwogYvT6VQ0g/132","comment_is_top":false,"comment_ctime":1590999421,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590999421","product_id":100017301,"comment_content":"理论分析永远给了我们思考的逻辑框架，根据这些粗略的信息可以大致判断那些问题可以做具体的优化，如同指南针一样。<br>还是和争哥开始提到的，算法永远和实际问题挂钩，根据实际问题的要求来确定算法是基本功。一段一段的找的确复杂，但是抓住主要矛盾，分模块的分析，有个模糊的准确即可","like_count":0},{"had_liked":false,"id":222979,"user_name":"正泣少女","can_delete":false,"product_type":"c1","uid":1484213,"ip_address":"","ucode":"122FE531D9CB45","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/b5/49dadcd3.jpg","comment_is_top":false,"comment_ctime":1590976294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590976294","product_id":100017301,"comment_content":"不会浪费时间。做复杂度分析，是粗略统计所花的时间与空间，属于事前统计，提前预判问题，预测趋势。再者，如果掌握这项技术，一眼就知道答案，哪来的浪费。哈哈~","like_count":0},{"had_liked":false,"id":222934,"user_name":"刘胜","can_delete":false,"product_type":"c1","uid":1251625,"ip_address":"","ucode":"487374D72543E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/29/f9490983.jpg","comment_is_top":false,"comment_ctime":1590970577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590970577","product_id":100017301,"comment_content":"先有设计图纸，其后才开始设计是最好的。","like_count":0},{"had_liked":false,"id":222896,"user_name":"鲸鱼少年丶","can_delete":false,"product_type":"c1","uid":2017876,"ip_address":"","ucode":"552898FF528561","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ca/54/fecdc655.jpg","comment_is_top":false,"comment_ctime":1590942300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590942300","product_id":100017301,"comment_content":"课后问题<br>我认为复杂度分析对于性能测试并不多此一举，性能测试依赖于硬件，数据，而复杂度分析则是帮我们在理论环境下进行理论上最优选择<br>课后总结<br>为什么复杂度分析<br>1.复杂度分析可以不依赖硬件，网络提升代码运行速度。<br>2.复杂度分析作为衡量算法的标杆，使得程序员开发中减少不必要的尝试。<br>复杂度分析的方法<br>大O复杂度表示法<br>定义：所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。<br>T(n)=O(f(n))<br>时间复杂度-渐进时间复杂度<br>何为渐进，表示代码执行时间随数据规模增长的变化趋势，因此根据这一特点，在分析时间复杂度时，可以忽略公式中的低阶，常量，系数。<br>分析法则<br>量级最大优先，多模块非嵌套<br>嵌套代码乘积，用于多模块嵌套优先于加法法则<br>常用复杂度级别<br>多项式量级O(1),O(logn),O(n),O(nlogn),O(n^2),O(n^k)---NP问题<br>非多项式量级O(2^n),O(n!)（（非确定多项式）性能极差一般不做考虑）<br><br><br>","like_count":0},{"had_liked":false,"id":221845,"user_name":"Geek_d021a5","can_delete":false,"product_type":"c1","uid":1805985,"ip_address":"","ucode":"E713C9DC72FBF5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erbR2CkXA6ZiaSZibIW7QsibjYMlLiaCRsvibgeEnzWEwUHHw6zX6h6e9DaqLRCX5jqPT6OVWuibhUVZ7mQ/132","comment_is_top":false,"comment_ctime":1590621916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590621916","product_id":100017301,"comment_content":"提问：<br>1：<br>T(n) = O(f(n))<br>T(n)代表 代码运行总耗时<br>n 代表数据规模大小<br>O代表 T(n) 和 fn(成正比)<br>这样理解对吗？<br>2：<br>另外 f(n) 的 f 代表什么？","like_count":0},{"had_liked":false,"id":221655,"user_name":"极爷","can_delete":false,"product_type":"c1","uid":1780383,"ip_address":"","ucode":"24BE33FFA7331F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIEJ8h4x6vRmjYgvdeXle4iazib9cCYR4skiaj6xk17KuquGFXliag266MXZsTx1h2hICloE9EMAbcLIA/132","comment_is_top":false,"comment_ctime":1590559829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590559829","product_id":100017301,"comment_content":"乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。<br>不明白为什么这个表达式不是<br>T1(m)*T2(n) = O(f(m) * g(n))","like_count":0},{"had_liked":false,"id":221612,"user_name":"Geek_01e5a3","can_delete":false,"product_type":"c1","uid":2016650,"ip_address":"","ucode":"503A03B29FC800","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqicfns3FdbrFh75ArRcYFVkyrLNcNVVjs0pAZ8OhznOJqbicZWWkge4IpEtYOy94u5nmLJbAYwBAnw/132","comment_is_top":false,"comment_ctime":1590549025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590549025","product_id":100017301,"comment_content":"性能测试属于事后统计法，其结果受所使用的硬件环境，测试数据大小等所约束，不同环境下得到的结果可能差之千里，不具备较好的可参照性。<br>而时间复杂度和空间复杂度理论，他抽象出来一套可对比的数学公式的标准，统一的衡量代码的性能，并能够帮助开发人员在开发阶段就有意识的去考虑代码性能和质量。","like_count":0},{"had_liked":false,"id":221523,"user_name":"笨小孩","can_delete":false,"product_type":"c1","uid":1759101,"ip_address":"","ucode":"14A4B8D89003BB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d7/7d/b7c66f64.jpg","comment_is_top":false,"comment_ctime":1590533982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590533982","product_id":100017301,"comment_content":"不是多此一举的，在平台上跑代码，受硬件环境的影响，且对数据规模无法分析。复杂度分析可以做到算法执行效率的考量，速度以及空间与数据规模的增长趋势的分析，是十分重要的","like_count":0},{"had_liked":false,"id":221477,"user_name":"trrwxsy","can_delete":false,"product_type":"c1","uid":1524434,"ip_address":"","ucode":"2D072DB540EEE2","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/d2/770edda2.jpg","comment_is_top":false,"comment_ctime":1590504716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590504716","product_id":100017301,"comment_content":"在以往的工作中，往往是蒙头写，很少思考时间与空间复杂度，导致后续需要重复修改，写代码前经常分析时间与空间复杂，找到合适的数据结构与算法来完成工程，可以提升效率","like_count":0},{"had_liked":false,"id":220956,"user_name":"fp_gnaw","can_delete":false,"product_type":"c1","uid":2001113,"ip_address":"","ucode":"F5FA0D262707AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/88/d9/e3583658.jpg","comment_is_top":false,"comment_ctime":1590366637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590366637","product_id":100017301,"comment_content":"时间复杂度分析是为了分析性能，那空间复杂度分析有什么具体作用呢","like_count":0},{"had_liked":false,"id":218872,"user_name":"Bug Killer","can_delete":false,"product_type":"c1","uid":1186089,"ip_address":"","ucode":"2741A206F504E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","comment_is_top":false,"comment_ctime":1589890030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589890030","product_id":100017301,"comment_content":"只要我们熟练掌握了复杂度分析的方法，每次写代码的时候就可以很快的分析出代码的复杂度。这样我们再写代码的时候就会做到心中有数。而且可以写出更高效的代码。","like_count":0},{"had_liked":false,"id":218639,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589849385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589849385","product_id":100017301,"comment_content":"锻炼复杂度分析的思维","like_count":0},{"had_liked":false,"id":218030,"user_name":"Mason","can_delete":false,"product_type":"c1","uid":2007705,"ip_address":"","ucode":"3F37A0905D08D0","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a2/99/61c24fbd.jpg","comment_is_top":false,"comment_ctime":1589699203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589699203","product_id":100017301,"comment_content":"设计的时候就要分析好时间复杂度和空间复杂度","like_count":0},{"had_liked":false,"id":217543,"user_name":"天之草","can_delete":false,"product_type":"c1","uid":1198882,"ip_address":"","ucode":"03864F7CB36E73","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/22/09540b7c.jpg","comment_is_top":false,"comment_ctime":1589531153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589531153","product_id":100017301,"comment_content":"基本记住常用的几个就行了：o(1) &lt; o(logn) &lt; o(n) &lt; o(nlogn) &lt; o(n^2) 。一般就是从时间复杂度和空间复杂度去分析问题，到了后面落地方案的时候基本是考虑折中方案，一般要做到算法复杂度低，执行效率高，很多时候可能需要牺牲一些空间来达到，例如保存一些中间变量值。","like_count":0},{"had_liked":false,"id":217380,"user_name":"犄角旮旯","can_delete":false,"product_type":"c1","uid":1060526,"ip_address":"","ucode":"746D5CD645FE59","user_header":"https://static001.geekbang.org/account/avatar/00/10/2e/ae/f4275434.jpg","comment_is_top":false,"comment_ctime":1589472334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589472334","product_id":100017301,"comment_content":"关于各种性能测试，老师有没有想过出一篇文章呢？","like_count":0},{"had_liked":false,"id":217376,"user_name":"犄角旮旯","can_delete":false,"product_type":"c1","uid":1060526,"ip_address":"","ucode":"746D5CD645FE59","user_header":"https://static001.geekbang.org/account/avatar/00/10/2e/ae/f4275434.jpg","comment_is_top":false,"comment_ctime":1589472240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589472240","product_id":100017301,"comment_content":"关键还是要经常建议， 形成大脑反射， 一看到循环，递归就要考虑其时间损耗，空间损耗，空间损耗除了分析渐近空间复杂度， 也要分析字节码占的空间大小，计算大概的空间占用，以及数据规模，有利于在部署服务运行时给出一个初始对内部分配值，避免GC回收频繁造成STW。思考归思考，平时多注意运用才是真","like_count":0},{"had_liked":false,"id":216356,"user_name":"JackLei","can_delete":false,"product_type":"c1","uid":1099989,"ip_address":"","ucode":"01128A61A9E80F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/d5/e88c1805.jpg","comment_is_top":false,"comment_ctime":1589246198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589246198","product_id":100017301,"comment_content":"递归的复杂度是怎么分析的，比如菲波拉挈数列，用递归实现","like_count":0},{"had_liked":false,"id":216283,"user_name":"Yasha","can_delete":false,"product_type":"c1","uid":1803481,"ip_address":"","ucode":"CE9FC0773DD846","user_header":"https://static001.geekbang.org/account/avatar/00/1b/84/d9/55b3eb37.jpg","comment_is_top":false,"comment_ctime":1589214689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589214689","product_id":100017301,"comment_content":"第一个问题，不多此一举，这可以说一种思路，低阶复杂度会比高阶有更好的表现。同时在实际开发中，具体条件不同，也不一定是高阶复杂度就比低阶复杂度好。比如，unittime 可能就未必是一样的。<br>第二个问题，不浪费时间，解决这个问题，写代码的时候就需要去考虑了","like_count":0},{"had_liked":false,"id":216259,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1589210677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589210677","product_id":100017301,"comment_content":"渐变复杂度: 描述的是代码随规模变化执行时间的变化。 分为时间复杂度和空间复杂度，描述代码时间效率和内存占用的理论方法。<br><br>而代码性能测试受限于环境和硬件的影响，会有偏差。而渐变复杂度则完全跟这些无关，可以作为前期的理论指导，而且低阶复杂度一般优于高阶算法。<br><br>O(1)  O(logn)  O(n)  O(nlogn)  O(n2)","like_count":0},{"had_liked":false,"id":216160,"user_name":"fxlego","can_delete":false,"product_type":"c1","uid":1634260,"ip_address":"","ucode":"32B09E5B542BBA","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","comment_is_top":false,"comment_ctime":1589198098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589198098","product_id":100017301,"comment_content":"大家是直接看文本，还是听语音啊，好像没有视频<br>","like_count":0},{"had_liked":false,"id":215886,"user_name":"王瑞强","can_delete":false,"product_type":"c1","uid":1829090,"ip_address":"","ucode":"DEE4EB5E23433F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e8/e2/2bcaef68.jpg","comment_is_top":false,"comment_ctime":1589124904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589124904","product_id":100017301,"comment_content":"复杂度分析是对时间和空间消耗的大致趋势，而性能测试可以精确到具体的耗时和Gps等","like_count":0},{"had_liked":false,"id":215437,"user_name":"改变就是好事","can_delete":false,"product_type":"c1","uid":1768206,"ip_address":"","ucode":"12179F324E7DB5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/fb/0e/8109b839.jpg","comment_is_top":false,"comment_ctime":1588992119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588992119","product_id":100017301,"comment_content":"1、先做性能测试，再做复杂度分析，是不是多此一举？<br>性能测试更多的是得出一个结果，而复杂度分析得出的则是导致这个结果的原因<br>2、每段代码都分析复杂度，是不是很浪费时间？<br>我觉得并不需要每段代码都分析其复杂度。<br>首先，在开发过程中就需要注意不要写复杂度过高的代码。<br>其次，重点分析关键业务代码或者风险较高的代码即可","like_count":0},{"had_liked":false,"id":215124,"user_name":"开满花的树","can_delete":false,"product_type":"c1","uid":1983420,"ip_address":"","ucode":"E527AD06A40014","user_header":"https://static001.geekbang.org/account/avatar/00/1e/43/bc/61b06eab.jpg","comment_is_top":false,"comment_ctime":1588908954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588908954","product_id":100017301,"comment_content":"int n = 8,count = 0<br>for(int i = 1;i&lt;=n;i++)<br>   for(int j = 1;j&lt;=i; j++)<br>      count++<br>请教下，这个时间复杂度应该怎么算呢？<br>我的想法是：外层是执行n次，内层执行i次，按照嵌套循环取内外层之积的选择，那么就应该是n*i,但是感觉不对呢。<br>盼回复，谢谢。","like_count":0},{"had_liked":false,"id":214814,"user_name":"LiRun","can_delete":false,"product_type":"c1","uid":1461279,"ip_address":"","ucode":"90AF7F00AD69E5","user_header":"https://static001.geekbang.org/account/avatar/00/16/4c/1f/15cfd818.jpg","comment_is_top":false,"comment_ctime":1588823293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588823293","product_id":100017301,"comment_content":"针对性能测试与代码的时间复杂度、空间复杂度分析是否冲突这个问题，我觉得这两个不是一个维度上的事，性能测试是整个软件加硬件环境的情况下，我个人理解是更偏向于宏观方面，时间、空间复杂度更像是微观上的事，它关注的是执行效率跟数据规模也就是数据量方面的，如果抛开硬件环境软件环境等各方面因素影响不讲，同样的逻辑代码在相同的平台上运行，那么时间复杂度和空间复杂度都低的代码一定是优于时间复杂度高的代码，也就是同等数据量的情况下，花费的时间更少，占用的空间也更少，这不就是效率高性能优异的表现吗，也就是我们一直在追求的高性能，从企业角度上讲，处理同等规模的数据，花费的时间更少，占用的机器资源也更少，这不就是降本增效了，所以从这个方面上讲，时间空间复杂度的分析还会帮助提高性能测试的效率，减少性能测试所花费的时间，不但不是多此一举，还是对性能测试有很大的帮助。ps ~ ~ 个人理解，纯属拙见，不对之处，欢迎指正。","like_count":0},{"had_liked":false,"id":214569,"user_name":"tjxcoding","can_delete":false,"product_type":"c1","uid":1317640,"ip_address":"","ucode":"7DEA9ECAF4A75B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWXs9ibD6uTSK6bFXbibNibMibUIMyKxUtl8KP9zDHgFyPa2w2icLxLKGOmibpuA2qqDMMkGABa0PJicUiaA/132","comment_is_top":false,"comment_ctime":1588766546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588766546","product_id":100017301,"comment_content":"时间复杂度、空间复杂度：耗费时间、空间随数量量的增长趋势","like_count":0},{"had_liked":false,"id":214025,"user_name":"Amos_AI","can_delete":false,"product_type":"c1","uid":1986142,"ip_address":"","ucode":"0A016FCAAAFF4A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4e/5e/14233719.jpg","comment_is_top":false,"comment_ctime":1588638125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588638125","product_id":100017301,"comment_content":"并不是多此一举，事前分析每段代码的复杂度，可以养成良好的编程习惯，让你自己更加谨慎地审视自己的代码，是不是有更好的实现，当前的方法是不是太效率太低？在进行性能测试之前心中就会有个大致的估算，提前把一些影响性能的问题解决掉，这样可以节省很多时间。","like_count":0},{"had_liked":false,"id":213768,"user_name":"TiAmo_lyj","can_delete":false,"product_type":"c1","uid":1987923,"ip_address":"","ucode":"6E58CF70A955D1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/55/53/29b4e373.jpg","comment_is_top":false,"comment_ctime":1588557076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588557076","product_id":100017301,"comment_content":"我认为并不多此一举，因为目前在业务场景中我需要分析代码复杂度的情况，基本上是在构思怎样完成一个功能后，进行逻辑代码编写的时候才会做这样一个分析，这点分析的时间并不影响你整体代码的编写，甚至还能保证你能够写出好的代码，而不仅仅是为了完成功能需求而写的代码。<br><br>其次，在经常性保持这样的状态之后，你会自主的养成一个良好的习惯，使写代码不在局限于完成功能，可以很快的提高代码编写能力。<br><br>需要改进：我仅仅只是做了简单的时间复杂度分析，从来没考虑过空间复杂度，且分析时间复杂度时也只是很浅的分析，在实在编写不出质量更好的代码时，最后还是选择的以完成功能为主，还需要改进。","like_count":0},{"had_liked":false,"id":213610,"user_name":"东边日出西边雨","can_delete":false,"product_type":"c1","uid":1900825,"ip_address":"","ucode":"FB373232AC152A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/5Cd5DiaVksY0szIkygsbKYwHKP6AObuqZ7J6TAD3KZaZ0WWQ9k0Byr6pl3EzyxuCTb85NJkt20icQ7zJaFwYa1zQ/132","comment_is_top":false,"comment_ctime":1588490555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588490555","product_id":100017301,"comment_content":"个人觉得，不是多此一举，理由如下：<br>我们的时间复杂度和空间复杂度使用最多的地方其实是在算法设计阶段使用，这个时候面对一个实际问题，我们也许有3~5种解法，可以构建链表，数组，或者字典，此时还没有写代码，只有想法或者伪代码，那么我们不需要把这个问题的所有代码写出来，运行一遍再挑选一个时间最高，效率最好的代码作为交付件，只需要简单的进行一下时间复杂度和空间复杂度，根据我们的问题使用场景挑选一个最好的算法实现即可；<br><br>时间复杂度和空间复杂度为何重要呢？用自动化的角度来讲，我们的代码实现的就是一个输入-&gt;处理-&gt;输出的过程，输入和输出都是确定，那么我们的算法好坏==处理过程是否是最精简的==占用最少的时间+使用最少的内存；如果处理过程已经存在，已经可以在计算机上跑，那么直接使用性能基准测试也可以，但是一般意义上的性能基本测试主要跑的已经不是单纯的一个算法一个代码，往往跑的是一个整个APP或者exe的运行情况了（比如算n!，单纯测试一个算法的性能跑程序其实意义不大）；一个是针对一个具体的问题设计最好的算法，一个是针对一个我们开发交付具体产品的性能；","like_count":0},{"had_liked":false,"id":213529,"user_name":"七月","can_delete":false,"product_type":"c1","uid":1988043,"ip_address":"","ucode":"876EE5EAEC9DC4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/55/cb/9c23f47d.jpg","comment_is_top":false,"comment_ctime":1588463902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588463902","product_id":100017301,"comment_content":"项目上也是分模块化，大部分代码是常量级，对于现实项目多少会有时间上要求，比如嵌入式行业要求的空间复杂度需要低，时间复杂度也是越低越好，可以提高性能:有些项目不好有可能就是其中一个模块时间或者空间复杂度特别高，就会导致整个项目性能效率低下。所以分析时间，空间复杂度可以提高性能，分模块，找关键代码。","like_count":0},{"had_liked":false,"id":213505,"user_name":"唐高为","can_delete":false,"product_type":"c1","uid":1757658,"ip_address":"","ucode":"15655BE4928C9D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d1/da/7faf18a0.jpg","comment_is_top":false,"comment_ctime":1588435159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588435159","product_id":100017301,"comment_content":"这个问题就好像在问，我们既然已经有面试，为什么还要看学历、看专业呢？这当然是为了增加我们招聘的效率。如果不看学历专业，我们可能在一百个人里才能挑出一个合适的。但是如果经过学历和专业的筛选过后，我们可能只需要面试10个人，就能找到一个满意的人才。渐进复杂度就是代码的学历和专业。","like_count":0},{"had_liked":false,"id":213364,"user_name":"Programmer","can_delete":false,"product_type":"c1","uid":1114500,"ip_address":"","ucode":"1C4015C9F5AF2E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIro8BKyich3jMOTRFibsbYeX9oWfNUa6dAcNDia5EH7VVHbibiaZavnDX1VlZ8NbQGrtJuYz0oKkfgSNA/132","comment_is_top":false,"comment_ctime":1588395712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588395712","product_id":100017301,"comment_content":"老师 红字“所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比” 这样描述是否有歧义？ 正比表示y&#47;x=k(一定)(k≠ 0) 例子代码不符合这种描述吧","like_count":0},{"had_liked":false,"id":213123,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1588307035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588307035","product_id":100017301,"comment_content":"不是浪费时间。时间复杂度表示代码执行执行效率的渐进趋势，并不是表示代码具体的执行时间。而性能测试，是在特定系统特定条件下，系统代码运行情况的展示。","like_count":0},{"had_liked":false,"id":212991,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1588256929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588256929","product_id":100017301,"comment_content":"看了这文章，感觉算找一个方向了，以前看课本的时间复杂度，根本不知道讲的什么。不认为多此一举，可以在性能测试之前，简单分析，在于实测进行比对，是否符合预期","like_count":0},{"had_liked":false,"id":212973,"user_name":"垚","can_delete":false,"product_type":"c1","uid":1333944,"ip_address":"","ucode":"5597C459E2D55B","user_header":"https://static001.geekbang.org/account/avatar/00/14/5a/b8/d1847e19.jpg","comment_is_top":false,"comment_ctime":1588253214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588253214","product_id":100017301,"comment_content":"时间空间复杂度分析可以在算法选型，代码设计方面提供一些指导，在开发之前已经做到心里有数；而性能测试则是对这些理论分析的具体量化，在开发完成后进行。两者并不冲突，相辅相成","like_count":0},{"had_liked":false,"id":212939,"user_name":"slamml","can_delete":false,"product_type":"c1","uid":1987329,"ip_address":"","ucode":"48DAE7271DBDEC","user_header":"https://static001.geekbang.org/account/avatar/00/1e/53/01/b2915120.jpg","comment_is_top":false,"comment_ctime":1588240760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588240760","product_id":100017301,"comment_content":"性能测试和代码分析本质上就不同，这和本科机械设计中的受力分析一个道理，依赖实验是很难测到从分析中得到的承受极限。","like_count":0},{"had_liked":false,"id":212929,"user_name":"メ子羽う","can_delete":false,"product_type":"c1","uid":1495135,"ip_address":"","ucode":"BBCA9EC9B6D582","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/5f/cd991207.jpg","comment_is_top":false,"comment_ctime":1588239127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588239127","product_id":100017301,"comment_content":"这是我第二轮学这一章，我在学完时间复杂度和空间复杂度的时候，编码过程中会潜意识的就去避免那种高复杂度的代码，我觉得深刻记忆这个知识点是很有必要的，能够写出复杂度较低的代码会比性能测试过后再去做优化节省太多时间。","like_count":0},{"had_liked":false,"id":212867,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1985277,"ip_address":"","ucode":"DEA53A41A9EBDD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4a/fd/5b68efe5.jpg","comment_is_top":false,"comment_ctime":1588228846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588228846","product_id":100017301,"comment_content":"最大的收获：从理论和实践中真正理解了算法渐进复杂度分析的方法。<br>理论上来讲：算法渐进时间复杂度是指代码执行时间随数据规模增长的趋势，简称时间复杂度。<br>实践来说：不再以笼统和模糊的概念去得出一个算法不确定的时间复杂度，能够通过老师教的两种方法，一步一步给出自己言之有理的计算结果。","like_count":0},{"had_liked":false,"id":212825,"user_name":"严丹","can_delete":false,"product_type":"c1","uid":1798204,"ip_address":"","ucode":"96FA634D06C3FD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/3c/a002615b.jpg","comment_is_top":false,"comment_ctime":1588216954,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588216954","product_id":100017301,"comment_content":"终于能理解为什么log2N，log3N用大O表示全部记为lgN的理由了","like_count":0},{"had_liked":false,"id":212667,"user_name":"江大德","can_delete":false,"product_type":"c1","uid":1988060,"ip_address":"","ucode":"BBE8860E846294","user_header":"https://static001.geekbang.org/account/avatar/00/1e/55/dc/440efe37.jpg","comment_is_top":false,"comment_ctime":1588172056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588172056","product_id":100017301,"comment_content":"并不是多此一举。以数据搜索为例，如果在写完数据搜索代码后，能事先进行算法的时空复杂度进行分析，那么就能预估服务器载重等等，这些实际应用都有好处","like_count":0},{"had_liked":false,"id":212552,"user_name":"张志俊","can_delete":false,"product_type":"c1","uid":1986457,"ip_address":"","ucode":"12101ECC147AFB","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4f/99/c7a2c91d.jpg","comment_is_top":false,"comment_ctime":1588146851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588146851","product_id":100017301,"comment_content":"老师讲的内容挺不错的，就是不知道我要是坚持把整个课程全部学完后，算法这方面的思维会不会得到提升","like_count":0},{"had_liked":false,"id":212492,"user_name":"风，大风","can_delete":false,"product_type":"c1","uid":1811611,"ip_address":"","ucode":"1A0F4D461BBC77","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/9b/0967f397.jpg","comment_is_top":false,"comment_ctime":1588133660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588133660","product_id":100017301,"comment_content":"看了一下发现连log是啥都忘记了，赶紧去复习了一下。然后才发现原来以前高中学的数据是真的有用的。","like_count":0},{"had_liked":false,"id":212422,"user_name":"Kenneth。🌞","can_delete":false,"product_type":"c1","uid":1786752,"ip_address":"","ucode":"299ADF236395CC","user_header":"https://static001.geekbang.org/account/avatar/00/1b/43/80/b1ae32cd.jpg","comment_is_top":false,"comment_ctime":1588122162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588122162","product_id":100017301,"comment_content":"<br>关于我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举问题？ <br>我的理解是 首先存在局限行，不同机器配置可能得出不同结果， 最关键是如果不懂复杂度分析，<br>如果评定自己或者别人写的代码效率的高低，不可能每次代码的执行效率很差，然后再去改，理解复杂度分析<br>也能帮助我们对开源框架的理解，比如之间看netty，关于chunk 这块处理一脸懵逼<br><br>该篇学下来，从简单的每行代码分析到大O公式的推进，在到时间复杂度分析3个实用方法。<br>1.关于循环执行最多的一段代码<br>2.加法原则<br>3.乘法原则 <br><br>介绍常见时间复杂度O（1）， O（n） ,O(log n) ,O(n log n) , 粗略提及了非多项式量级的时间复杂度<br>对log n 以对数角度分析，从求解2^x = n 问题到 x = log2^n   ，在根据上面提及忽略常数，变成log n. <br><br>最后提及空间复杂度。","like_count":0},{"had_liked":false,"id":212139,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588064969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588064969","product_id":100017301,"comment_content":"学习收货：<br>不严谨的简写: 时间复杂度的分析先默认每一行代码执行速度一样为u_t，则时间复杂度分析就是数代码的每条运行次数，最后乘以u_t就行了。除了循环的，复杂度都是1，循环一遍就是n，循环套循环就n方.如果循环终止条件跟内部代码有关，则要考虑nlogn 和log n。两条法则：加法法则和乘法法则。加法法则好理解。乘法法则是将循环套循环这种情况抽象出来。np是非多项式时间复杂度，性能太低，一般不会用到这样的算法。空间复杂度有1 n n方，比较简单。<br><br>思考题: 首先复杂度高的代码容易写，如果测试能满足需求就不用花力气去优化代码。其次，复杂度分析是渐进时间复杂度，在问题规模小的时候，甚至复杂度高的更快，比如归并排序和选择排序。","like_count":0},{"had_liked":false,"id":211861,"user_name":"J Boss","can_delete":false,"product_type":"c1","uid":1981143,"ip_address":"","ucode":"E0D8EA4DE2433F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/3a/d7/9e7e15d6.jpg","comment_is_top":false,"comment_ctime":1588032566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588032566","product_id":100017301,"comment_content":"第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n2遍，所以需要 2n2* unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n2+2n+3)*unit_time。<br><br>不理解这里的 2n  哪里来的，我理解的只有 O( 2n2次方＋3 )","like_count":0},{"had_liked":false,"id":210778,"user_name":"z","can_delete":false,"product_type":"c1","uid":1046048,"ip_address":"","ucode":"C3094D32263D1B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/20/1987e0ac.jpg","comment_is_top":false,"comment_ctime":1587824427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587824427","product_id":100017301,"comment_content":"课后思考<br>1.在一个理论空间，容易更客观的评估多种算法的优劣<br>2.在方案设计阶段即可比较出多种算法的优劣","like_count":0},{"had_liked":false,"id":209660,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1587596478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587596478","product_id":100017301,"comment_content":"重学算法第二天，时间复杂度和空间复杂度都是理论分析，用大O表示法表示渐进值，掌握常用的几种类型，平时多看多练。","like_count":0},{"had_liked":false,"id":209037,"user_name":"Ki徐得中","can_delete":false,"product_type":"c1","uid":1974752,"ip_address":"","ucode":"EFF100A4F83C07","user_header":"https://static001.geekbang.org/account/avatar/00/1e/21/e0/b43519b1.jpg","comment_is_top":false,"comment_ctime":1587481894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587481894","product_id":100017301,"comment_content":"老师，我只会python...是不是还要去学习一下c语言...","like_count":0},{"had_liked":false,"id":207842,"user_name":"胡皓","can_delete":false,"product_type":"c1","uid":1965051,"ip_address":"","ucode":"ECF5C14420899E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fb/fb/6db8d51e.jpg","comment_is_top":false,"comment_ctime":1587195836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587195836","product_id":100017301,"comment_content":"我觉得并不是多此一举，进行复杂度分析能让我们对代码和算法有个初步的认识。在让我们认识的现有的算法与程序，在多大程度上改善了现有情况，以及开发新的算法和程序的可能性。","like_count":0},{"had_liked":false,"id":207760,"user_name":"水到渠成","can_delete":false,"product_type":"c1","uid":1914742,"ip_address":"","ucode":"6767FC5108226E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/37/76/6c85bc5a.jpg","comment_is_top":false,"comment_ctime":1587175523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587175523","product_id":100017301,"comment_content":"指数阶的算法可以迅速耗尽内存，那不是可以作为攻击手段吗！","like_count":0},{"had_liked":false,"id":207684,"user_name":"小树苗","can_delete":false,"product_type":"c1","uid":1644500,"ip_address":"","ucode":"71288176D058E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtnoXPFibFwKdrUibJQWYSCmAlc7FeEH5MbjiawszNgwEXAkuWKGYQMTQbnQbjlR8n9lpDgN4GQHoXQ/132","comment_is_top":false,"comment_ctime":1587136689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587136689","product_id":100017301,"comment_content":"性能测试是对已开发的程序性能进行全方位的测试，这个肯定少不了，毕竟不是每个程序员都对自己的代码负责。<br>作为程序员开发时进行复杂度分析，一是时刻让自己写出高质量代码，二是对功能负责，以免浪费他人时间，对于自己都不肯定的功能又如何让别人测试和使用。","like_count":0},{"had_liked":false,"id":207356,"user_name":"海之蓝","can_delete":false,"product_type":"c1","uid":1257821,"ip_address":"","ucode":"7C994B7797533E","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/5d/a416ac29.jpg","comment_is_top":false,"comment_ctime":1587053690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587053690","product_id":100017301,"comment_content":"之前老师分析过，做性能测试跟项目所在机器硬件、系统和测试数据量不同会有很大差异，而且测试人不同也会有差异，如果为了避免差异就得把所有情况考虑到，这时就很浪费时间和资源了。而时间、空间复杂度分析是在不考虑外部环境下来分析代码的执行时间与代码数量的增长呈现什么样的趋势分析。","like_count":0},{"had_liked":false,"id":207119,"user_name":"静静菩提路","can_delete":false,"product_type":"c1","uid":1433864,"ip_address":"","ucode":"229F35F5E7503A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhx780iaeV1wQxPqKf3SuWUHDiat3HKukI6svYAibX4kftoO17DUErIBXcOVpBTic0xO2cgBN5IyvapQ/132","comment_is_top":false,"comment_ctime":1587009271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587009271","product_id":100017301,"comment_content":"争哥；<br>1. 只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>这两个规律具体有什么区别，我感觉好像都是关注量级最大的那段代码?<br>刚开始学习算法，别见笑哈","like_count":0},{"had_liked":false,"id":207057,"user_name":"₯㎕","can_delete":false,"product_type":"c1","uid":1080182,"ip_address":"","ucode":"6E06492D0FBA54","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/76/69aada7c.jpg","comment_is_top":false,"comment_ctime":1587000810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587000810","product_id":100017301,"comment_content":"复杂度分析可以在事前对代码的性能好坏有一个大概的判断，避免烂代码的产生<br>学习的过程中发现复杂度分析并不太难，但是分析的速度和逻辑思维比较慢，需要通过多练习来巩固","like_count":0},{"had_liked":false,"id":207051,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1587000148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587000148","product_id":100017301,"comment_content":"学习复杂度分析可以在写代码时就能避免写出一些效率很低的代码，而不是等到性能测试才发现问题。","like_count":0},{"had_liked":false,"id":207015,"user_name":"帽子平头","can_delete":false,"product_type":"c1","uid":1694289,"ip_address":"","ucode":"166E08AA718FAE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJ4WUia4xJGjjPLgl5aTE4h9AzszibibibPo6m8mESgo0wIYcXbMicFKc1xB7GVqN7MeZU3EaB4tgu337Q/132","comment_is_top":false,"comment_ctime":1586996679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586996679","product_id":100017301,"comment_content":"多花点时间分析并写出好的代码，总比返工改bug更好","like_count":0},{"had_liked":false,"id":206958,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1586963709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586963709","product_id":100017301,"comment_content":"我认为不会浪费时间。性能测试的最终结果只是从实际代码运行的效果上说明代码的性能；而对代码做时间和空间复杂度的分析有助于了解代码质量的好坏，通过这两个方面的分析可以找出写的不好的代码","like_count":0},{"had_liked":false,"id":206801,"user_name":"蠡小俊","can_delete":false,"product_type":"c1","uid":1241853,"ip_address":"","ucode":"777C81C8291CFD","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/fd/8e038ecd.jpg","comment_is_top":false,"comment_ctime":1586937371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586937371","product_id":100017301,"comment_content":"对非科班出身的同学，关于非确定多项式的问题，还是想做一下补充。在计算机领域，一般可以将问题分为可解问题和不可解问题。不可解问题也可以分为两类：一类如停机问题，的确无解；另一类虽然有解，但时间复杂度很高。可解问题也分为多项式问题(Polynomial Problem，P问题)和非确定性多项式问题(NondeterministicPolynomial Problem，NP问题)。更详细的内容可参照https:&#47;&#47;baike.baidu.com&#47;item&#47;%E9%9D%9E%E7%A1%AE%E5%AE%9A%E6%80%A7%E5%A4%9A%E9%A1%B9%E5%BC%8F%E9%9A%BE%E9%A2%98","like_count":0},{"had_liked":false,"id":206742,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1586925993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586925993","product_id":100017301,"comment_content":"说实话我在每次写代码的时候都没有去分析过复杂度，说的实在点就是自己从来没想过要去做分析，因为自己知道代码怎么写，觉得写完测试没问题就可以了！要去分析复杂度需要占用时间，而领导要求则是你要快速的解决！","like_count":0},{"had_liked":false,"id":206719,"user_name":"Gary_","can_delete":false,"product_type":"c1","uid":1918181,"ip_address":"","ucode":"E65AA3BEEB9916","user_header":"https://static001.geekbang.org/account/avatar/00/1d/44/e5/66a4855c.jpg","comment_is_top":false,"comment_ctime":1586920767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586920767","product_id":100017301,"comment_content":"这并不是多此一举，因为，复杂度分析，主要是在事前能够大致估计运行该算法需要的量级，是在事前对未来可能发生的事的数量级的估计，每个数量级之间所消耗的资源会相差很大，在事前预先判断，预先做好准备非常有必要。","like_count":0},{"had_liked":false,"id":206696,"user_name":"平哥","can_delete":false,"product_type":"c1","uid":1006178,"ip_address":"","ucode":"B4D349FE580F6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/62/81ba2510.jpg","comment_is_top":false,"comment_ctime":1586918078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586918078","product_id":100017301,"comment_content":"开始正式系统学习算法，有没有必要进行复杂度分析还不太有明确见解。自己只接触过很小的系统也没有很大数据量、访问量，实现功能即可，所以代码的写的效率如何不是影响根本看不出来。但是相信如果是海量数据的系统可能差一点复杂度的代码可能就会很影响用户使用，所以……觉得没必要的可能是你的系统太小了，你在的平台太小。","like_count":0},{"had_liked":false,"id":206661,"user_name":"rookie","can_delete":false,"product_type":"c1","uid":1573424,"ip_address":"","ucode":"9E28FA97C01F24","user_header":"","comment_is_top":false,"comment_ctime":1586914504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586914504","product_id":100017301,"comment_content":"学习完，看了这么多评论，也吸收了优秀的评论内容（良师益友啊），然后一个字一个记录，思考。<br>为什么需要进行执行效率分析？<br>执行效率是评估算法和数据结构的重要指标，如何分析执行效率是通过时间和空间的复杂度来进行。<br><br>什么是复杂度分析？<br>1.数据结构和算法解决是&quot;如何让计算机更快时间、更省空间的解决问题&quot;。<br>2.从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度这两个概率来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间或者占用空间与数据规模的增长关系。<br><br>时间复杂度和空间复杂度讲解<br><br>一、时间复杂度<br>概念:代码执行时间随着数据规模增长的变化趋势就叫做渐进时间复杂度，简称时间复杂度。<br><br><br>二、如何进行渐进时间复杂度分析<br>1.只关注循环执行次数最多的一段代码<br>分析一个算法，一段代码时间复杂度的时候，只需要关注循环次数最多的那一段代码就可以了，这段代码执行的次数的n量级，就是整段要分析代码的时间复杂度。<br><br>2.加法法则：总复杂度等于量级最大的那段代码的复杂度<br>只要是一个已知的数，跟n无关，照样也是常亮级的执行时间。当n无限大的时候，就可以忽略。不管常量的执行时间多长，但跟时间复杂度没有一点关系。<br><br>3.乘法法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>三、常见时间复杂度有哪些<br> 复杂度量级，可以粗略分两类，多项式量级和非多项式量级<br>非多项式量级：O(2^n)和O（n!）<br>多项式量级:O(1)、O(logn)、O(nlogn)<br><br>四、空间复杂度<br>概念:表示算法的执行时间与数据规模之间的增长关系，就是渐进空间复杂度。<br><br>空间复杂度表示:O(1)、O(n)、O(n^2）<br><br>常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n^2)","like_count":0},{"had_liked":false,"id":206622,"user_name":"水到渠成","can_delete":false,"product_type":"c1","uid":1914742,"ip_address":"","ucode":"6767FC5108226E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/37/76/6c85bc5a.jpg","comment_is_top":false,"comment_ctime":1586911318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586911318","product_id":100017301,"comment_content":"老师讲的好，在课上模模糊糊的计算老师全给讲明白了","like_count":0},{"had_liked":false,"id":206609,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1586909831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586909831","product_id":100017301,"comment_content":"复杂度分析是写代码时的一种素养，写代码过程中养成复杂度分析的习惯就能逐渐写出高性能的代码。","like_count":0},{"had_liked":false,"id":206523,"user_name":"        ","can_delete":false,"product_type":"c1","uid":1255918,"ip_address":"","ucode":"21028A49D81B06","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/ee/fba11edf.jpg","comment_is_top":false,"comment_ctime":1586873913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586873913","product_id":100017301,"comment_content":"重学算法～算法虽多，算法复杂度却不多。记住常见的五种算法复杂度，O1，Ologn，On，Onlogn，On平方。平时看见算法可以使用复杂度分析法算下，这个是比较容易忽略的，需要刻意练习！","like_count":0},{"had_liked":false,"id":206499,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1586870394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586870394","product_id":100017301,"comment_content":"分析代码时间空间复杂度是为了写出高性能的代码，是在写代码前的行为，而测试是在代码完成之后的动作","like_count":0},{"had_liked":false,"id":206487,"user_name":"ipofss","can_delete":false,"product_type":"c1","uid":1018620,"ip_address":"","ucode":"DE3061C9259F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","comment_is_top":false,"comment_ctime":1586868980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586868980","product_id":100017301,"comment_content":"对于课后思考问题，我觉得要是加入这样的项目组，或者这样的公司，你就偷着乐吧。现在看来，国内的好些公司，还是想着1个月做完的项目，恨不得1个星期让你做完，谁还去分析时间复杂度与空间复杂度，赶紧做完上线。在碰见一个又一个这样的项目，或者一个又一个这样的版本迭代时，你会越来越力不从心。如果一开始项目就整体是回去分析时间、空间复杂度，并且注意版本升级间的代码重构，那代码会越写越顺溜，而且自己不管是从心法上，还是编程技巧上，都会有很大提升","like_count":0},{"had_liked":false,"id":206446,"user_name":"Nordlicht","can_delete":false,"product_type":"c1","uid":1409699,"ip_address":"","ucode":"96A9246B61BD6A","user_header":"https://static001.geekbang.org/account/avatar/00/15/82/a3/44d785f7.jpg","comment_is_top":false,"comment_ctime":1586862529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586862529","product_id":100017301,"comment_content":"##### 事后统计法<br><br>- 测试结果非常依赖测试环境<br>- 测试结果受数据规模的影响很大<br><br><br><br>##### 大O复杂度表示法<br><br>所有代码的执行时间T(n)与每行代码的执行次数成正比<br><br>大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间岁数据规模增长的变化趋势，所以，也叫渐进时间复杂度，简称时间复杂度<br><br><br><br>##### 时间复杂度分析<br><br>1. 只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>##### 几种常见时间复杂度<br><br>1. O(1)：代码的执行时间不随n的增大而增大，或者说，一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1) <br>2. O(logn)、O(nlogn) ：常见的while循环<br>3. O(m+n)、O(m*n) ：比如说有连个for循环，需要循环的次数需要由两个参数决定，这时的时间复杂度就可以用两个变量来表示<br><br>##### 空间复杂度分析<br><br>在算法执行的过程中所占用的空间","like_count":0},{"had_liked":false,"id":206383,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586850787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586850787","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？<br>性能测试可能由于数据量大小的原因可能并不会发现性能的问题，所以复杂度分析还是有必要的，尤其针对重点影响性能的代码。<br>而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>个人觉得不需要每段代码都分析，重点复杂的代码分析一下吧。别太极端了！","like_count":0},{"had_liked":false,"id":206372,"user_name":"韦","can_delete":false,"product_type":"c1","uid":1066380,"ip_address":"","ucode":"97F369619A45C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/8c/f3fa78f0.jpg","comment_is_top":false,"comment_ctime":1586849725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586849725","product_id":100017301,"comment_content":"个人理解：如文章中所说，复杂度表示法是表示代码执行时间随数据量变化的变化趋势，而性能测试仅仅能够测试出固定的数据量下的性能表现，无法应对未来的变化情况。所以，如果对项目的数据量的变化无法确定，应该算出它的时间空间复杂度来应对未来业务增长的需要。","like_count":0},{"had_liked":false,"id":206330,"user_name":"奥沙利锋","can_delete":false,"product_type":"c1","uid":1057971,"ip_address":"","ucode":"4866F88C343ED6","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/b3/d117fba7.jpg","comment_is_top":false,"comment_ctime":1586840705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586840705","product_id":100017301,"comment_content":"看完了。感觉还能理解，时间空间复杂度就是取决于N的数量级，编程来说是不是尽量减少多重嵌套或递归呢。","like_count":0},{"had_liked":false,"id":206298,"user_name":"Robert","can_delete":false,"product_type":"c1","uid":1737112,"ip_address":"","ucode":"8F0611B7DF4A67","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKoiaQjaxOgcsPTYtfOB1zmduPianpaVQZgES7icTpNFzWwaPFIIia6aIibib0wJZOAibetoID62Ihzy0nibQ/132","comment_is_top":false,"comment_ctime":1586836315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586836315","product_id":100017301,"comment_content":"课后思考：1.不是多次一举。性能测试是一个大的比较粗的测试，能大体看到问题出在哪里？但是具体的分析还是需要从时间和空间复杂度去进行。2.每一段代码都是构成整体的一部分，每一段都做好了，整体才能更好。同时大的问题也是由小的问题积累来的，为了避免大的问题出现，就要从小处着手，所以每段代码都分析是有必要的。","like_count":0},{"had_liked":false,"id":206237,"user_name":"Geek_1082e6","can_delete":false,"product_type":"c1","uid":1264738,"ip_address":"","ucode":"60278AC85D593B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKV03icibEjdnG5MtibXV7V7wNmWLicJ2zZpqATeZM1fqicPw7iaZ6JBtS98dospFGsDzib2BTtiaBLuFBnSw/132","comment_is_top":false,"comment_ctime":1586827285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586827285","product_id":100017301,"comment_content":"讲的非常浅显易懂，感觉有自信了，持续学习下去","like_count":0},{"had_liked":false,"id":206156,"user_name":"Geek_91082c","can_delete":false,"product_type":"c1","uid":1957731,"ip_address":"","ucode":"C2C0A4819B45C3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTInf2hlyl1rtKDIpOyFn7mf6WwqRP3jhmUoGMhx67Jb57cRcXicd6Gj3crS3Hxm1iciaicaJpyoR5h55A/132","comment_is_top":false,"comment_ctime":1586796161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586796161","product_id":100017301,"comment_content":"老师您好，对于03节的第2个代码，有些疑惑，为什么5、6行分别执行了n遍，而7、8行都是n的平方遍呢？老师或者学友能帮我解答，感谢🙏","like_count":0},{"had_liked":false,"id":206039,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1586778034,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586778034","product_id":100017301,"comment_content":"不是多此一举，性能测试可以显示出实际运行时间，但是该时间受机器型号，网络状态影响。时空复杂度的分析，不受实际环境影响，分析得快速，能达成共识，比如在面试时可以一眼看出哪里需要优化算法","like_count":0},{"had_liked":false,"id":206003,"user_name":"Sweety","can_delete":false,"product_type":"c1","uid":1376786,"ip_address":"","ucode":"B2BFC555668685","user_header":"https://static001.geekbang.org/account/avatar/00/15/02/12/200616ff.jpg","comment_is_top":false,"comment_ctime":1586771504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586771504","product_id":100017301,"comment_content":"有个问题啊……就是多项式量级和非多项式量级，文章说1，n^2，logn等都是多项式量级，可是这些都不是数学概念上的多项式吧，为什么叫做多项式量级呢。","like_count":0},{"had_liked":false,"id":205655,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1586696469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586696469","product_id":100017301,"comment_content":"NP（Non-Deterministic Polynomial，非确定多项式）问题中的非确定，指的是无法证明是否为多项式复杂度，而不是确定了是非多项式复杂度吧。数学问题的复杂度跟算法的复杂度还不太一样。比如0-1背包，目前尚未发现多项式复杂度的算法，因此是NP问题。而布尔表达式的可满足性问题，则是已经证明了是非多项式复杂度的，属于NPC问题。","like_count":0},{"had_liked":false,"id":205644,"user_name":"月迷津渡","can_delete":false,"product_type":"c1","uid":1264111,"ip_address":"","ucode":"2B18B2FE3DAC3B","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/ef/02401473.jpg","comment_is_top":false,"comment_ctime":1586694984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586694984","product_id":100017301,"comment_content":"最近碰到一个问题 百词不得其解 就是n(n&gt;1)开根号的时间复杂度需要精度是m(如0.0001）我是用二分法逼近的但是我感觉时间复杂度想不明白。感觉不是O(n),有谁能支个招不。 因为普通的二分法都可以证书逼近，但是这个没有精度m感觉可以一直算。。代码如下：<br>  private static double sqrt(int number, double precision) {<br>    double start = 0.0d;<br>    double end = (double) number;<br>    double mid = start + (end - start) &#47; 2d;<br>    while (meetRange(mid, number, precision)) {<br><br>      if (mid * mid &gt; number) {<br>        end = mid;<br>      } else if (mid * mid &lt; number) {<br>        start = mid;<br>      } else {<br>        return mid;<br>      }<br>      mid = start + (end - start) &#47; 2d;<br>    }<br>    return mid;<br>  }<br><br>  private static boolean meetRange(double target, int number, double precision) {<br>    return Math.abs(target * target - number) &gt; precision;<br>  }","like_count":0},{"had_liked":false,"id":205591,"user_name":"爬行的蜗牛","can_delete":false,"product_type":"c1","uid":1033956,"ip_address":"","ucode":"6623B62DE63CE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","comment_is_top":false,"comment_ctime":1586680313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586680313","product_id":100017301,"comment_content":"王老师，你好， 课程中：加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))，可是如果 m和n 都比较大的情况下， 那么 O(f(m) + g(n)) 和O(f(m) * f(n)) 相差回很大， 怎么理解呢","like_count":0},{"had_liked":false,"id":205217,"user_name":"张雄","can_delete":false,"product_type":"c1","uid":1960845,"ip_address":"","ucode":"422F2786CA4374","user_header":"","comment_is_top":false,"comment_ctime":1586572512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586572512","product_id":100017301,"comment_content":"学习完成之后，只想说一句话，讲的太好了！！！","like_count":0},{"had_liked":false,"id":204827,"user_name":"黄骏","can_delete":false,"product_type":"c1","uid":1849733,"ip_address":"","ucode":"3C41D02F4F712C","user_header":"https://static001.geekbang.org/account/avatar/00/1c/39/85/c6110f83.jpg","comment_is_top":false,"comment_ctime":1586480051,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586480051","product_id":100017301,"comment_content":"觉得做复杂度分析，一个是锻炼程序员自己的意识，每写一段代码，实现一个功能都要考虑这方面的效率。第二个是为后续性能优化打基础，结合一些工具能找到相应的优化方案。","like_count":0},{"had_liked":false,"id":204793,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1586475136,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586475136","product_id":100017301,"comment_content":"1. 只关注执行次数最多的，拿西瓜放弃芝麻<br>2. log 不同底数可以相互转化","like_count":0},{"had_liked":false,"id":204706,"user_name":"从未止步","can_delete":false,"product_type":"c1","uid":1792361,"ip_address":"","ucode":"17F310796CE8D5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI5jr1KfpLoXdoiaLzLswPiazCgCnyPkKhIqrEujPtGA1kryZYaruF8GmUTRRWn1YK71QVSTSVpwkzQ/132","comment_is_top":false,"comment_ctime":1586444459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586444459","product_id":100017301,"comment_content":"根据之前的讲述，并不是多此一举，代码运行环境会变，但是代码本身如果不升级是不会变的，那么代码的时间空间复杂度分析也是及其必要的部分，写代码的同时分析代码的时间空间复杂度，不管是对后续的维护以及现有的运行，都是有帮助的。<br>","like_count":0},{"had_liked":false,"id":204547,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1586419471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586419471","product_id":100017301,"comment_content":"不是多此一举。<br>性能测试测试是针对特定数据量，特定环境的测试。依赖测试的环境和数据规模。分析具有很多的局限性，是一种静态分析。性能测试更多的是给人一个大概的认识，在某种环境下某种数量级下，运行的时间和空间情况。随着环境和数据的改变，当初测量的值会越来越不准确。<br>算法复杂度分析是一种趋势分析，动态分析。不受测试环境的影响，是衡量算法优劣的指标。","like_count":0},{"had_liked":false,"id":204426,"user_name":"晏书","can_delete":false,"product_type":"c1","uid":1749722,"ip_address":"","ucode":"26506509DA1BCA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b2/da/75b3d9f6.jpg","comment_is_top":false,"comment_ctime":1586398318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586398318","product_id":100017301,"comment_content":"我认为这个刚开始应该是一个比较慢的事情，等你真正找我了复杂度分析之后，在实际的编码过程中会自然而然的使用，这样会有意想不到的收获，有可能自己都感觉不到。","like_count":0},{"had_liked":false,"id":204244,"user_name":"BiJim","can_delete":false,"product_type":"c1","uid":1314315,"ip_address":"","ucode":"39D4FB0F5E120B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLUqttGWcsXMIRGNEHedAiavt7q9RSNmTdvSGqmvO8kiaafMo6CXdVMf03FWn0gCS1Bibkumq3gp6g4g/132","comment_is_top":false,"comment_ctime":1586355588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586355588","product_id":100017301,"comment_content":"学到对数阶的时候特意重新学了一遍对数函数的概念和转换。<br>最后一张图精髓了，<br>复杂度其实就是以函数的方式描述了算法消耗的时间（空间） 和 执行次数 直接的线性关系。","like_count":0},{"had_liked":false,"id":204195,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1586349457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586349457","product_id":100017301,"comment_content":"为什么要复杂度分析？<br>数据结构和算法解决的核心问题：快速存取，节省存储空间。<br><br>时间复杂度常见量级：<br>最常见的复杂度为多项式级别复杂度：按从小到大顺序排列： O(1)，O(logn), O(n)，O(nlogn)，O(n^2)。<br>NP (非确定多项式复杂度)：O(2^n) 指数阶，O(n!) 阶乘阶，一般的问题场景不会达到这个复杂度级别，忽略！<br>归并排序、快速排序的时间复杂度都是 O(nlogn) 。","like_count":0},{"had_liked":false,"id":203737,"user_name":"秋天的铁工匠","can_delete":false,"product_type":"c1","uid":1463114,"ip_address":"","ucode":"47D6F9005C3BE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/53/4a/331d6bce.jpg","comment_is_top":false,"comment_ctime":1586260965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586260965","product_id":100017301,"comment_content":"i=1;<br> while (i &lt;= n)<br> { i = i * 2; }  想问一下老师，这个循环的时间复杂度不是应该以第二行的n来判断吗？","like_count":0},{"had_liked":false,"id":203625,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586243201,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586243201","product_id":100017301,"comment_content":"时间、空间复杂度分析，能够训练思维，同时能够提醒我们时刻关注自己的代码质量。时常反思，必有所得。","like_count":0},{"had_liked":false,"id":203616,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586241607,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586241607","product_id":100017301,"comment_content":"i=1; <br>while (i &lt;= n) {<br> i = i * 2;<br>}<br>个人感觉是第二行代码执行次数最多<br>","like_count":0},{"had_liked":false,"id":202960,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1305257,"ip_address":"","ucode":"BB7B274CE0672E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ea/a9/0a917f2c.jpg","comment_is_top":false,"comment_ctime":1586093973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586093973","product_id":100017301,"comment_content":"&quot;可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比&quot;, 此句话是啥意思呀 ? 我真没看出来😂","like_count":0},{"had_liked":false,"id":202795,"user_name":"7","can_delete":false,"product_type":"c1","uid":1114093,"ip_address":"","ucode":"10A6E57A027D42","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","comment_is_top":false,"comment_ctime":1586070202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586070202","product_id":100017301,"comment_content":"关于“傻代码”，如果是java语言，会报错的<br>void print(int n) {<br>  int i = 0;<br>  int[] a = new int[n];<br>  &#47;&#47; 这里该改为 for (; i &lt;n; ++i)<br>  for (i; i &lt;n; ++i) {<br>    a[i] = i * i;<br>  }<br><br>  for (i = n-1; i &gt;= 0; --i) {<br>    print out a[i]<br>  }<br>}","like_count":0},{"had_liked":false,"id":202236,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1585929524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585929524","product_id":100017301,"comment_content":"算法复杂度分析，是在分析问题的本质复杂度，测试依赖环境、数据规模等因素，可能现象不一样，但本质的复杂度可以预见趋势。","like_count":0},{"had_liked":false,"id":202144,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1585909121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585909121","product_id":100017301,"comment_content":"1，进行性能测试好与坏都在 我们每一次的代码写作中。一个是亡羊补牢，一个扎实的盖房子。<br>2，时间复杂度与空间复杂度，这是反过头来看的第二边了。第一次刚刚接触，很懵逼。现在明白了。<br>更清晰的了解的目的。与概念","like_count":0},{"had_liked":false,"id":201834,"user_name":"阿恒","can_delete":false,"product_type":"c1","uid":1100238,"ip_address":"","ucode":"59434AB37236E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/ce/cc85c6c3.jpg","comment_is_top":false,"comment_ctime":1585842892,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585842892","product_id":100017301,"comment_content":"压测的目的，是测试应用在高并发情况下是否会报错，应用的抗压能力，预估应用的承载能力，更多的是一个结果。时间复杂度分析可以帮助我们在代码层面上找到最优解方法。","like_count":0},{"had_liked":false,"id":201808,"user_name":"养鸡专业户","can_delete":false,"product_type":"c1","uid":1202503,"ip_address":"","ucode":"FA081C18DB9D5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/47/337774a9.jpg","comment_is_top":false,"comment_ctime":1585839674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585839674","product_id":100017301,"comment_content":"O(n^2) 是可以归并到 O(n) 中吗?","like_count":0},{"had_liked":false,"id":201510,"user_name":"Geek_6cf199","can_delete":false,"product_type":"c1","uid":1809885,"ip_address":"","ucode":"CDD7D46D3D9FAE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/bcIibiaSu84wkP1kD9iaWpSriaBVmXJDvOFg22jjsy9GBdx9L9eGzHmAA0ZbFnohdLl2c0WYXMvoDiaq99ANxI298Rg/132","comment_is_top":false,"comment_ctime":1585797450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585797450","product_id":100017301,"comment_content":"事后分析法会受到多种因素干扰，比如机器的性能，数据的规模等。时间复杂度分析法基于代码的执行次数，抛开机器性能的影响因素，总结出执行次数和数据量之间的关系，直观表示代码的执行效率。","like_count":0},{"had_liked":false,"id":200554,"user_name":"仲夏","can_delete":false,"product_type":"c1","uid":1690965,"ip_address":"","ucode":"2849869C765CDE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","comment_is_top":false,"comment_ctime":1585618032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585618032","product_id":100017301,"comment_content":"不是多此一举，时间复杂度和空间复杂度是建立在理想条件下的一种大致分析，性能测试是有一定的条件约束的，所以理想的预测可以有一个数","like_count":0},{"had_liked":false,"id":200545,"user_name":"超超不会飞","can_delete":false,"product_type":"c1","uid":1025894,"ip_address":"","ucode":"F30D3E62442954","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/66/d3e151c7.jpg","comment_is_top":false,"comment_ctime":1585617619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585617619","product_id":100017301,"comment_content":"复杂度分析是写代码前的思考和理论分析，有助于我们写出更优的代码。<br>性能测试是代码编写完成后做的测试和模拟，检验程序是否满足真实场景。<br>两者相辅相成，互不冲突，都需要做。","like_count":0},{"had_liked":false,"id":200529,"user_name":"王定坤","can_delete":false,"product_type":"c1","uid":1196179,"ip_address":"","ucode":"B82E3768C1BB77","user_header":"https://static001.geekbang.org/account/avatar/00/12/40/93/386b936c.jpg","comment_is_top":false,"comment_ctime":1585616304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585616304","product_id":100017301,"comment_content":"时间和空间复杂度分析是理论派，它能评估出代码随着数据规模的增长的资源耗费趋势。性能压测是具体的性能测试工程实践，跟具体的机器、测试环境相关。后者可以找出性能瓶颈，前者为后者提供性能预测和优化指导。","like_count":0},{"had_liked":false,"id":200177,"user_name":"ZaiYQ","can_delete":false,"product_type":"c1","uid":1930787,"ip_address":"","ucode":"188764B0A1413E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/76/23/07d19e30.jpg","comment_is_top":false,"comment_ctime":1585552869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585552869","product_id":100017301,"comment_content":"若是这样的代码，时间复杂度为多少？<br>是O（n^2）吗<br>int i,j,k,t=1,f=1,s=1;<br>    for (i=0;i&lt;n;i++)<br>    {<br>        for(j=i;j&lt;i;j++)<br>            t*=x;<br>        for(k=i;k&lt;i;k++)<br>            f*=k;<br>        sum=t&#47;f;            <br>    }","like_count":0},{"had_liked":false,"id":200105,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585544524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585544524","product_id":100017301,"comment_content":"不浪费，因为描述的是一个规律，因为测试的case比较难做全面。通过前面分析一下，可以大概知道耗时大概在哪里。对后面优化有帮助","like_count":0},{"had_liked":false,"id":198937,"user_name":"rexcai","can_delete":false,"product_type":"c1","uid":1595589,"ip_address":"","ucode":"E3AEB9A6D94EE8","user_header":"https://static001.geekbang.org/account/avatar/00/18/58/c5/433de59b.jpg","comment_is_top":false,"comment_ctime":1585473901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585473901","product_id":100017301,"comment_content":"了解了时间复杂度和空间复杂度的知识，以前很混乱的这两个概念，也终于有了较为清楚的认识，但总感觉自己还是没有理解特别透彻，希望下面的课程可以边学习，边深化巩固知识点。此外，一直认为算法和数据结构在编程中很重要，只是自己畏难，不敢克服，希望可以借此次课程，攻克这一难题","like_count":0},{"had_liked":false,"id":198880,"user_name":"麦克斯韦妖","can_delete":false,"product_type":"c1","uid":1938385,"ip_address":"","ucode":"ADAE586302A104","user_header":"https://static001.geekbang.org/account/avatar/00/1d/93/d1/9eb38793.jpg","comment_is_top":false,"comment_ctime":1585471443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585471443","product_id":100017301,"comment_content":"好的代码一定是性能更优，算法更好的代码。如何衡量一个算法是不是够好，就要看他是不是节约时间，是不是节省空间。","like_count":0},{"had_liked":false,"id":198369,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1585448215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585448215","product_id":100017301,"comment_content":"时间复杂度分析的三个实用方法：<br>1. 只关注循环内执行次数最多的代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积","like_count":0},{"had_liked":false,"id":196847,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1585317699,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585317699","product_id":100017301,"comment_content":"应该在写代码之前&amp;代码review进行复杂度分析和评估，首先代码的时间复杂度、空间复杂度分析，是事先对代码性能心中有数，特别是基础组件或中间件代码，每行代码的性能都做事先评估。而性能测试只是进一步验证之前估计是否正确，性能整体和全面评估整体性能（不紧包括代码，而且还包括数据库、操作系统、网络带宽等），","like_count":0},{"had_liked":false,"id":196079,"user_name":"Geek_ab9b5f","can_delete":false,"product_type":"c1","uid":1778076,"ip_address":"","ucode":"080FAE08B0128A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAmpDkIxlMjoRlVbicOmdAmrdr9bnfsCkcCPzo53ibzMeSt8ygtJXQiaTfU4rSe9qHJkOAQcUOQj9s9A/132","comment_is_top":false,"comment_ctime":1585233993,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585233993","product_id":100017301,"comment_content":"用空间换时间","like_count":0},{"had_liked":false,"id":196043,"user_name":"shadow","can_delete":false,"product_type":"c1","uid":1598637,"ip_address":"","ucode":"B5B8018157DA23","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/ad/467b6471.jpg","comment_is_top":false,"comment_ctime":1585232275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585232275","product_id":100017301,"comment_content":"老师讲的真好，学完这一期直接能看考研相关的题目了","like_count":0},{"had_liked":false,"id":195478,"user_name":"yezi","can_delete":false,"product_type":"c1","uid":1935780,"ip_address":"","ucode":"B2E5CC51D37C44","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/AiaYGqeT5oDEUaRq2vVLOIesrnPwJH3VfN8tb3CZlAbxW9QYo6TfPqUS8c4ibAyibsn1955GK3EOJsjFFKXRbSYvA/132","comment_is_top":false,"comment_ctime":1585190665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585190665","product_id":100017301,"comment_content":"分析代码的时间复杂度需要找到代码中执行次数最多的代码段，忽略常量，低阶量，如果找不到执行次数最多的代码段，需要用加法，如果代码中有递归，或嵌套的循环需要用乘法，对数表示复杂度时可以忽略底数，根据对数的运算可得，分析空间复杂度，需要找到存储数据的存储结构。","like_count":0},{"had_liked":false,"id":195355,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1585183185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585183185","product_id":100017301,"comment_content":"看了3次数据结构、都是看着看着找各种借口放弃了....., 这次立个flag: 坚决不能放弃了、要坚持下去~、每天写笔记、心得、打卡~~~","like_count":0},{"had_liked":false,"id":194784,"user_name":"易早","can_delete":false,"product_type":"c1","uid":1227817,"ip_address":"","ucode":"007BF7BC6BCE96","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3KNMHFkH73hWpk4ENqmu2q6KB8Ia9dic8Xsf4PFM4Cu8898BKgKX2KLELbwbIDPMiakshdlQ7w1Zjia5mdRhOo4eA/132","comment_is_top":false,"comment_ctime":1585106292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585106292","product_id":100017301,"comment_content":"看每个人讲解的内容都能get到新点，这一节又对时间复杂度有了新的认识","like_count":0},{"had_liked":false,"id":194769,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1585104315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585104315","product_id":100017301,"comment_content":"怎么计算时间复杂度比严蔚敏的教材讲得清楚，严蔚敏的教材一开始我就没看懂，以前一直不太会复杂度分析","like_count":0},{"had_liked":false,"id":193449,"user_name":"会飞的大象","can_delete":false,"product_type":"c1","uid":1520299,"ip_address":"","ucode":"080A36D971E6CF","user_header":"https://static001.geekbang.org/account/avatar/00/17/32/ab/272af78e.jpg","comment_is_top":false,"comment_ctime":1584893442,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1584893442","product_id":100017301,"comment_content":"不是多次一举，因为回到之前讲的为什么需要复杂度分析：<br>1、不同测试环境的测试结果是有区别的<br>2、测试的数据量是有限的<br>上述解释了为什么需要复杂度分析，另外从开发角度上来讲，我进行复杂度分析可以更好的判断自己写的执行效率，而性能测试可能是从API或者应用功能的层面进行的测试","like_count":0},{"had_liked":false,"id":192863,"user_name":"单色","can_delete":false,"product_type":"c1","uid":1907486,"ip_address":"","ucode":"A1DA6E497FD74C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/1e/f5c16f7e.jpg","comment_is_top":false,"comment_ctime":1584876324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584876324","product_id":100017301,"comment_content":"数据结构与算法，是一直以来转行后记在心里的坎，相关书买了一堆，通俗易通适合小白只看过一本，一直以来，想找一个相关的视频课或专栏，与语言无关的，可以像科班生一样，系统过一遍。终于在极客上遇到了，很开心，赞👍。","like_count":0},{"had_liked":false,"id":192198,"user_name":"是海港呀","can_delete":false,"product_type":"c1","uid":1916654,"ip_address":"","ucode":"32AD09DB7B1F3B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3e/ee/82c2ef12.jpg","comment_is_top":false,"comment_ctime":1584842919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584842919","product_id":100017301,"comment_content":"性能测试和复杂度分析相辅相成，都不浪费时间。<br><br>复杂度分析是对程序员的要求，时刻提醒自己要注意代码的复杂度，提高代码的运行效率，逼着自己写出更优质的代码，这样后期运行才省时省力。否则发现代码时间复杂度过高而“回炉重造”效率更低。<br><br>但是同时，复杂度分析是个粗略的模型，低时间复杂度的代码在真正运行未必比高时间复杂度快，还涉及具体的数据量和需求。所以两者都很重要。","like_count":0},{"had_liked":false,"id":191901,"user_name":"自恒","can_delete":false,"product_type":"c1","uid":1744510,"ip_address":"","ucode":"DB8504D4F8399B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9e/7e/1d81f155.jpg","comment_is_top":false,"comment_ctime":1584802851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584802851","product_id":100017301,"comment_content":"老师，算法在各语言中都是通用的吗，我也在学习大数据，python代码，学这个有用吗","like_count":0},{"had_liked":false,"id":190720,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1584686874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584686874","product_id":100017301,"comment_content":"如果数据集比较小，没必要考虑算法时间复杂度，应该更注重实现难度和维护性上面。<br>如果数据集比较大，涉及到性能瓶颈的时候，那么关键地方的时间复杂度的分析有助于帮我们解决瓶颈问题。总之，一切以实际使用场景为准。","like_count":0},{"had_liked":false,"id":190586,"user_name":"JS","can_delete":false,"product_type":"c1","uid":1868196,"ip_address":"","ucode":"6C9F84EFED2B67","user_header":"https://static001.geekbang.org/account/avatar/00/1c/81/a4/a1906fd6.jpg","comment_is_top":false,"comment_ctime":1584670855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584670855","product_id":100017301,"comment_content":"很深刻的学习，很清晰的学到了怎么去怎么去判断复杂度，感觉会在时时刻刻都影响到以后的代码编写，结合复杂度判断和后期的性能测试，对项目的实际运行起到更好的优化作用","like_count":0},{"had_liked":false,"id":190182,"user_name":"贵贵","can_delete":false,"product_type":"c1","uid":1196359,"ip_address":"","ucode":"97D5F277B5317D","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/47/7e4bdd7b.jpg","comment_is_top":false,"comment_ctime":1584611042,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584611042","product_id":100017301,"comment_content":"1、复杂度都是随着数据量的增长，看时间的增长趋势，看空间的增长趋势<br>2、找到数据量n与计算次数i之间的关系，就能找到采用的是哪个多项式量级<br>3、空间复杂度分析可能更少一些，不过在实际的CRUD中，新建对象的时候，有些多对多的情况会使得占用空间，随着数据的增加，而爆炸性增长。<br>4、空间复杂度分析不仅仅局限于数据库(多对多new对象的时候，查询大量数据的时候要读取到内存中进行数据处理)，还有CPU、内存读取数据，考虑防止内存溢出","like_count":0},{"had_liked":false,"id":190156,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1584607809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584607809","product_id":100017301,"comment_content":"先分析时间和空间复杂度会针对代码的性能进行评分，做出相应的优化，这样子会为后面的性能或者其他测试打下基础","like_count":0},{"had_liked":false,"id":190139,"user_name":"三文鱼","can_delete":false,"product_type":"c1","uid":1698849,"ip_address":"","ucode":"2E16B6874E46C0","user_header":"https://static001.geekbang.org/account/avatar/00/19/ec/21/389214bb.jpg","comment_is_top":false,"comment_ctime":1584606387,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1584606387","product_id":100017301,"comment_content":"读了几遍复杂度分析，有种醍醐灌顶的感觉，最开始进行复杂度分析内心有种恐惧感，在通过 leetcode刷题看解法时，发现读代码比写代码更有收获，代码读懂了，复杂度也就心中有数了，看源代码的信心也有了，所以我的理解，进行复杂度分析是提高代码质量的关键，反而能帮助团队提高效率。","like_count":0},{"had_liked":false,"id":189771,"user_name":"SteelHuaSheng","can_delete":false,"product_type":"c1","uid":1396126,"ip_address":"","ucode":"BC8127FC5207FC","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/9e/04ec08bf.jpg","comment_is_top":false,"comment_ctime":1584547609,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584547609","product_id":100017301,"comment_content":"--1<br>思考过程:T(n) = O(f(n))  <br>代码执行时间 和 每行代码执行次数的总和 是线性关系<br>每行代码执行次数又跟n密切相关。比如：第一个例子中的 T(n) = O(2 + 2n)，第二个例子中的 T(n) = O(3 + 2n + 2n²)。<br><br>所以其实我们关心的是代码执行总次数会因为n的变化导致什么样的变化趋势，是常数级别的，还是线性增长的，还是平方关系？<br>然后我们偷梁换柱，因为是线性关系，就用代码执行时间把代码执行总次数给替换掉。让它直接和n进行对话。就变成了时间复杂度和n的关系。<br>折叠了。<br><br>--2<br>时间复杂度关心的是量级（忽略低阶、常量、系数三部分）<br>当 n 很大时，你可以把它想象成 10000、100000。<br>而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。<br>我们只需要记录一个最大量级就可以了<br><br>比如对于n²来说，n就是低阶，对趋势的影响小。<br>2就是常量，n变化的时候，不影响增长趋势<br>系数关系不大，2n和n都是同样的线性增长趋势。<br><br>--3<br>①不会多此一举。等你发现性能要爆炸的时候，或者没测到，生产一剑封喉的时候就晚了。<br>②还有啊，浪费资源啊。你改几行代码，提高的效率就是几百上千倍，你那垃圾代码搞的速度很慢。","like_count":0},{"had_liked":false,"id":187843,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1565462,"ip_address":"","ucode":"7E783812D2D164","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/16/0e476be6.jpg","comment_is_top":false,"comment_ctime":1584258505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584258505","product_id":100017301,"comment_content":"1). 只关注循环执行次数最多的一段代码<br>2). 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3). 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积","like_count":0},{"had_liked":false,"id":187443,"user_name":"Strive","can_delete":false,"product_type":"c1","uid":1547752,"ip_address":"","ucode":"B78EAEB9F88F07","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/e8/2d105a5f.jpg","comment_is_top":false,"comment_ctime":1584110696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584110696","product_id":100017301,"comment_content":"从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)*unit_time。可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比。<br>为什么要（2n+2）为什么要加2","like_count":0},{"had_liked":false,"id":187150,"user_name":"阡陌","can_delete":false,"product_type":"c1","uid":1141254,"ip_address":"","ucode":"58634836C8E03F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/06/66831563.jpg","comment_is_top":false,"comment_ctime":1584026711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584026711","product_id":100017301,"comment_content":"什么是复杂度？<br>复杂度是用来分析算法执行效率和数据规模之间的增长关系的。<br>复杂度又分为:时间(渐进)复杂度和空间(渐进)复杂度<br><br>为什么要使用复杂度分析？<br>复杂度分析不依赖平台和硬件环境，不受数据规模的影响，能从理论层面上让我们直观的判断出算法的效率。<br><br>如何分析复杂度？<br>大O复杂度<br>执行时间T(n)与代码执行次数成正比:T(n)=O(f(n))<br>大O时间复杂度并不具体代表代码的真正执行时间，而是代表代码执行时间随数据规模增长的变化趋势。<br><br>分析方法<br>1.只关注循环次数最多的一段代码<br>2.加法法则:总复杂度等于量级最大的那段代码复杂度<br>3.乘法法则:嵌套代码复杂度等于嵌套代码内外代码复杂度的乘积<br>(注意:代码循环次数只要是一个已知的数，与n无关，照样也是常量级的执行时间。当n无限大时，就可以忽略。)<br><br>常见时间复杂度<br>常量阶O(1),对数阶(O(logn)),线性阶(O(n)),线性对数阶(O(nlogn)),次方阶(O(n^k)),指数阶(O(2^n)),阶乘阶O(n!)<br><br>空间复杂度<br>表示算法的存储空间与数据规模之间的增长关系。<br><br><br>课后思考<br>个人认为，性能测试和复杂度分析是相辅相成的。性能测试能够反应出真实环境和数据规模下的算法效率，但是实际情况下，在不同的平台和硬件环境下性能测试的结果是不同的，而复杂度分析能在不依赖环境和数据规模的情况下，从理论层面上合理的判断出不同算法在不同数据规模之下的效率，能让我们有效的判断出在不同的数据规模和硬件环境下选择合适的，稳定的算法。","like_count":0},{"had_liked":false,"id":187096,"user_name":"张","can_delete":false,"product_type":"c1","uid":1817040,"ip_address":"","ucode":"90847E1B26F248","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b9/d0/65efa5c6.jpg","comment_is_top":false,"comment_ctime":1584014605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584014605","product_id":100017301,"comment_content":"int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br> <br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum;<br> }<br>关于这段代码如果是 f(i) 改为f(n)的话，那么就是真正的O(n)了。<br>而这个f(i)平均下来的时间复杂度应该是O((1+n)&#47;2)，不过忽略常量的话f(i)的时间复杂度就是O(n)，所以整段代码的时间复杂度就是O(n*n)了。我这样解释对么？","like_count":0},{"had_liked":false,"id":186848,"user_name":"养🐱","can_delete":false,"product_type":"c1","uid":1181248,"ip_address":"","ucode":"3CBBBEFD3945B2","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/40/ff77554d.jpg","comment_is_top":false,"comment_ctime":1583938079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583938079","product_id":100017301,"comment_content":"如果会自己分析代码的执行效率，能在写代码和阅读别人代码时就发现性能问题并及时纠正，依靠性能测试发现性能问题并不会节省时间。","like_count":0},{"had_liked":false,"id":186587,"user_name":"wholly","can_delete":false,"product_type":"c1","uid":1089235,"ip_address":"","ucode":"3CB7D06CC6C670","user_header":"https://static001.geekbang.org/account/avatar/00/10/9e/d3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1583888879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583888879","product_id":100017301,"comment_content":"代码提前分析时间复杂度和空间复杂度，类似把性能优化做到前段，项目也就能可以事半功倍。<br>另外：常见算法的时间复杂度和空间复杂度就那么几种，要么O(n)，O(nlogn)，O(n)等等，结合概念理解时间，空间复杂度，分析代码的逻辑，就能选择更优的算法了。","like_count":0},{"had_liked":false,"id":186439,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1583845290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583845290","product_id":100017301,"comment_content":"并不是多此一举，通过理论上的时间复杂度来进行技术的选型，能够在方案初期规避掉绝大多数的性能风险。而后期的性能测试，只是对理论性能的验证以及评估算法在最差情况下的实际耗时是否能被承受，从而为后期进一步性能优化做铺垫。","like_count":0},{"had_liked":false,"id":186353,"user_name":"谭亮","can_delete":false,"product_type":"c1","uid":1142395,"ip_address":"","ucode":"8BE75B6409548C","user_header":"","comment_is_top":false,"comment_ctime":1583829527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583829527","product_id":100017301,"comment_content":"思考题：不是的，至少可以训练我们分析代码复杂度的能力，写出更效率更高之代码。而且性能测试跟很多外部条件有关，比如机器性能，数据量大小","like_count":0},{"had_liked":false,"id":186069,"user_name":"山鬼谣","can_delete":false,"product_type":"c1","uid":1543162,"ip_address":"","ucode":"E25F498B85A01B","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","comment_is_top":false,"comment_ctime":1583749959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583749959","product_id":100017301,"comment_content":"把换底公式复习了下","like_count":0},{"had_liked":false,"id":185779,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1583678203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583678203","product_id":100017301,"comment_content":"打卡3","like_count":0},{"had_liked":false,"id":185641,"user_name":"201201161","can_delete":false,"product_type":"c1","uid":1901005,"ip_address":"","ucode":"5C1E88301BC3AE","user_header":"","comment_is_top":false,"comment_ctime":1583653263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583653263","product_id":100017301,"comment_content":"我理解如果一个算法的复杂度如果能够从理论上分析出来，更加有说服力。同时，从实验的角度对比性能存在不能枚举所有空间的问题，第二，存在随机误差和硬件误差。<br>还有两个疑问~<br>1. 复杂度为什么叫渐进复杂度，有什么数学上的概念吗？<br>2. O 大O是英文单词缩写（原单词是什么）还是希腊字母？","like_count":0},{"had_liked":false,"id":185603,"user_name":"Sara","can_delete":false,"product_type":"c1","uid":1665609,"ip_address":"","ucode":"E1CEF71ED6FDCE","user_header":"https://static001.geekbang.org/account/avatar/00/19/6a/49/ea826bca.jpg","comment_is_top":false,"comment_ctime":1583642401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583642401","product_id":100017301,"comment_content":"老师，你说的这种傻瓜式代码，我真的写过！深深的感受到自己的菜，好好学习吧！","like_count":0},{"had_liked":false,"id":185485,"user_name":"白大米","can_delete":false,"product_type":"c1","uid":1001545,"ip_address":"","ucode":"0A4EC07A708406","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/49/32316d12.jpg","comment_is_top":false,"comment_ctime":1583590990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583590990","product_id":100017301,"comment_content":"【每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？】<br>并不这么认为，性能测试是针对整个function或者链路的测试，看重的是全链路的承载能力，性能测试往往牵扯到数据层、缓存层，代码的质量有可能在整体测试里面占比不高。所以性能测试针对的能力和验收的评估很少会对每个代码足够「专注」<br><br>针对代码做复杂度预估<br>一：足够专注的评价代码水平，不需要机器编译，大脑过一遍就有一个初步概念，做一层最简单直观的筛查，在上机之前就可以发现低效代码；<br>二：提高个人肉眼看代码的能力，这个能力是一个开发者必须的，而且是挺稀少不需要拼体力的能力，为什么有的资深开发一眼就能看到你的代码什么水平，长此以往，浸淫其中，水平和眼界自然就起来了；","like_count":0},{"had_liked":false,"id":185189,"user_name":"Hoo-Ah","can_delete":false,"product_type":"c1","uid":1306913,"ip_address":"","ucode":"823093A6C7DEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/21/52e8267b.jpg","comment_is_top":false,"comment_ctime":1583509115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583509115","product_id":100017301,"comment_content":"公司做的业务是面向甲方的，只求能用就好。代码的时间复杂度分析没有，我对大O时间复杂度有一定的了解，写代码的时候大概知道效率高低，但由于之前一直没想过优化所以也就放那了。<br>最近主动的想改变这种思想，不想一辈子写垃圾代码。所以觉得分析代码的执行效率是很有必要的。","like_count":0},{"had_liked":false,"id":184726,"user_name":"引力波","can_delete":false,"product_type":"c1","uid":1003740,"ip_address":"","ucode":"228CE050A7E212","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/dc/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1583392072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583392072","product_id":100017301,"comment_content":"文章中说到大O表示法时使用正比说法，严格来说不对，因为大O给出的是一个上界，lim(T(n)&#47;f(n)) = 0 (n趋于∞)","like_count":0},{"had_liked":false,"id":184419,"user_name":"赤云","can_delete":false,"product_type":"c1","uid":1093258,"ip_address":"","ucode":"67476D582D8B6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","comment_is_top":false,"comment_ctime":1583311340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583311340","product_id":100017301,"comment_content":"从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。  这块没搞懂","like_count":0},{"had_liked":false,"id":184394,"user_name":"王先森","can_delete":false,"product_type":"c1","uid":1022267,"ip_address":"","ucode":"1AF1A395107479","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/3b/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1583306867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583306867","product_id":100017301,"comment_content":"i=1; while (i &lt;= n) { i = i * 2; } 时间复杂度O(logn)这个问题,while (i &lt;= n)这个每一步也会去判断吧？不单单判断i = i * 2; 所以时间复杂度应该是O(n+logn),取最大阶,不应该是O(n)吗?求帮忙。。。不理解这里","like_count":0},{"had_liked":false,"id":184191,"user_name":"小小杨","can_delete":false,"product_type":"c1","uid":1105218,"ip_address":"","ucode":"7E4DC9A782FFD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/42/4a82631e.jpg","comment_is_top":false,"comment_ctime":1583245153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583245153","product_id":100017301,"comment_content":"时间，空间复杂度分析必要的，它们是评判算法重要指标。特别是核心的算法及数据量的大算法，执行效率高和低资源的算法将大大节省公司成本。性能测试也是必须的，但它不能反应算法本质，持续优化算法必须要有科学本质分析手段","like_count":0},{"had_liked":false,"id":183699,"user_name":"Geek_04fda1","can_delete":false,"product_type":"c1","uid":1483834,"ip_address":"","ucode":"275970AE0A76AB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibkpYrUHO9pQeM1Uk0NUTkYAnjmB6vJicibIhORDQT7GVcP0yICj0ZS2oAXZcWhXEFLVnFve7oqpA9xVB9v8w7Leg/132","comment_is_top":false,"comment_ctime":1583117773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583117773","product_id":100017301,"comment_content":"老师，你这个写字作图工具是啥，一直没有好的工具使用，只能用笔画，有时候纸笔不在身边就不方便了。","like_count":0},{"had_liked":false,"id":183565,"user_name":"JuneMare","can_delete":false,"product_type":"c1","uid":1891472,"ip_address":"","ucode":"4A3437B3CEF544","user_header":"","comment_is_top":false,"comment_ctime":1583067545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583067545","product_id":100017301,"comment_content":"有需要时分析吧。简单代码或者一般的业务代码就不用了。如果写了一些调用频率比较高的代码，那就有必要分析下了。","like_count":0},{"had_liked":false,"id":183469,"user_name":"宋胖胖","can_delete":false,"product_type":"c1","uid":1857496,"ip_address":"","ucode":"AA828F49CCEABA","user_header":"https://static001.geekbang.org/account/avatar/00/1c/57/d8/e9c8b923.jpg","comment_is_top":false,"comment_ctime":1583047884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583047884","product_id":100017301,"comment_content":"打卡，，<br>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。","like_count":0},{"had_liked":false,"id":182698,"user_name":"Louis","can_delete":false,"product_type":"c1","uid":1710046,"ip_address":"","ucode":"9A8A67FE6A1BF6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/17/de/36000c5a.jpg","comment_is_top":false,"comment_ctime":1582852829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582852829","product_id":100017301,"comment_content":"哈哈哈，这就好比投掷骰子，在没投之前，我们知道会出现6中可能，每种可能的概率是1&#47;6，同样在代码没有在真正的测试之前，我们也是能够计算出他们的条件概率，在算法1 条件下的时间复杂度，在算法2条件下的时间复杂度，能够让我们心底有底，知道和不知道的差别。","like_count":0},{"had_liked":false,"id":182005,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1582690794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582690794","product_id":100017301,"comment_content":"<br>时间复杂度 表示 变量的变化趋势，随着变量的变化，时间复杂度相应的变化情况。<br>所以在不清楚 数据量大小的情况下，需要考虑 时间复杂度，让计算量尽量少，效率尽量高，这就提现了性能 在效率上的优势。<br>空间复杂度 是 尽量让占用的空间少，提现了 性能上 占用的资源少 的优势。","like_count":0},{"had_liked":false,"id":181390,"user_name":"腾讯未来员工","can_delete":false,"product_type":"c1","uid":1881599,"ip_address":"","ucode":"35B25F14A4759E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b5/ff/691bbc19.jpg","comment_is_top":false,"comment_ctime":1582534026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582534026","product_id":100017301,"comment_content":"每段代码都分析时间和空间复杂度我觉得很有必要，就类似贪心算法，局部最优化从而使得整体最优化，对于大量级的数据能够切实提高程序效率，同时也可以让程序员有一个评估代码的标准","like_count":0},{"had_liked":false,"id":181159,"user_name":"华新","can_delete":false,"product_type":"c1","uid":1068724,"ip_address":"","ucode":"B6DB20898F5F99","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/b4/335e58d6.jpg","comment_is_top":false,"comment_ctime":1582508937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582508937","product_id":100017301,"comment_content":"个人理解：<br>时间复杂度分析更多的是的编码前的思路分析吧，选择哪种理论上效率更高。<br>性能测试一般都是在编码后吧，写完了再测试发现性能问题是不是更浪费时间呢。","like_count":0},{"had_liked":false,"id":180804,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1109290,"ip_address":"","ucode":"6ABF229E31BC09","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/2a/9151d888.jpg","comment_is_top":false,"comment_ctime":1582414510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582414510","product_id":100017301,"comment_content":"O(n)表示法从自己一开始了解后就用一句话来概括，那就是“抓大放小”。类似于a*n^2 + b*n + c这种样式的代码执行时间或空间需求，决定性因素是n为最高阶的分项，想象当n无限大时时间或空间需求量的决定性因素是哪一项即可得到O(n)。","like_count":0},{"had_liked":false,"id":180796,"user_name":"JustRunning","can_delete":false,"product_type":"c1","uid":1061157,"ip_address":"","ucode":"2F18DB26500AC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/25/1a55bb52.jpg","comment_is_top":false,"comment_ctime":1582390667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582390667","product_id":100017301,"comment_content":"第一个问题：<br>性能测试结果很大程度依赖于环境以及测试场景数据量，不同环境不同场景和数据量，结果会明显不同，不好抽象化来评估，而时间空间复杂度分析解耦于环境，可对其做抽象化评估。  <br>第二个问题：  <br>没重点全量分析的确性价比低，个人觉得核心功能核心代码做分析，非核心功能及核心代码可选择忽略不分析。","like_count":0},{"had_liked":false,"id":180739,"user_name":"张宗伟","can_delete":false,"product_type":"c1","uid":1374181,"ip_address":"","ucode":"1447A20C7A8982","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/e5/ec543f3b.jpg","comment_is_top":false,"comment_ctime":1582378960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582378960","product_id":100017301,"comment_content":"我想可以做个不太恰当的类比，就好像学生时代写完作业时，你不去主动检查错误，而是等老师批改完再知道错误在哪儿，干嘛非要受后知后觉的批评呢？对于写代码来说，即使有性能测试，但是却限制于测试平台和测试数据，所以在这之前要对代码的性能有一个大致的认识，心中有一个期待范围，在能力范围内将时间复杂度和空间复杂度降低，这样对个人的能力也是锻炼，又能得到高性能的代码。","like_count":0},{"had_liked":false,"id":180371,"user_name":"佳娃","can_delete":false,"product_type":"c1","uid":1806618,"ip_address":"","ucode":"47004C40CBE019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/91/1a/c51b24f4.jpg","comment_is_top":false,"comment_ctime":1582269279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582269279","product_id":100017301,"comment_content":"依赖测试环境，依赖测试环境，依赖测试环境！<br>我们是寻找最优解决方案，不是说为了省眼前这点事儿。","like_count":0},{"had_liked":false,"id":180366,"user_name":"Geek_5bb133","can_delete":false,"product_type":"c1","uid":1796988,"ip_address":"","ucode":"9D7530B1FCEC36","user_header":"","comment_is_top":false,"comment_ctime":1582267853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582267853","product_id":100017301,"comment_content":"## 4.复杂度分析<br>1. 数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。<br>2. 为什么需要复杂度分析？ <br>- 1）测试结果非常依赖测试环境<br>- 2）测试结果受数据规模的影响很大<br>### 4.1时间复杂度<br>大O时间复杂度表示法，渐进时间复杂度(时间复杂度)<br>```<br>T(n)=O(f(n))     注：公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略<br>```<br>### 4.1.1. 时间复杂度分析(3种方法)<br>1. 只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>### 4.1.2. 几种常见时间复杂度实例分析<br>1. 复杂度量级：多项式量级和非多项式量级。<br>- 多项式量级：常量阶O(1)、对数阶O(logn)、线性阶O(n)、线性对数阶O(nlogn)、平方阶O(n2)、立方阶O(n3)、K次方阶O(nk)<br>- 非多项式量级(2个)：指数阶O(2n) 和 阶乘阶O(n!)<br>- 注意：当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。<br>2. 多项式时间复杂度<br>-  O(1)，一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)<br>-  O(logn)和O(nlogn)，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。<br><br>注：我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过2x=n求解x这个问题我们想高中应该就学过了，我就不多说了。x=log2n，所以，这段代码的时间复杂度就是 O(log2n)。<br>- O(m+n)和O(m*n)<br>### 4.2 空间复杂度<br>空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。<br>常见的空间复杂度就是 O(1)、O(n)、O(n2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。<br>### 4.3 小结<br>越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)。","like_count":0},{"had_liked":false,"id":180077,"user_name":"Yifan","can_delete":false,"product_type":"c1","uid":1739220,"ip_address":"","ucode":"EE866C96B3A54A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI1MqK71ITCXdWAJ2W0L24hvYcv64sg1SwYFT6eB3EYnsdBhPymPXibz4ptWljlnrbao3ial5anicKZg/132","comment_is_top":false,"comment_ctime":1582181459,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582181459","product_id":100017301,"comment_content":"学习新领域的知识，概念很重要，在这一节里面，重要的便是渐进时间复杂度和渐进空间复杂度。<br><br>时间复杂度：算法执行时间与数据规模之间的增长关系。<br>空间复杂度：算法存储空间与数据规模之间的增长关系。<br><br>前者较复杂，有加法&#47;乘法两个法则，对于不同大小的数据集也可以用，常见的是多项式量级，非多项式量级有两种：阶乘和指数增长，这被叫做NP问题，很少考虑。<br><br>这两个复杂度对于代码的执行效率、迁移能力等有很重要的指导意义。","like_count":0},{"had_liked":false,"id":179887,"user_name":"ayu","can_delete":false,"product_type":"c1","uid":1640515,"ip_address":"","ucode":"8DB850105E4379","user_header":"https://static001.geekbang.org/account/avatar/00/19/08/43/d2a8d8c8.jpg","comment_is_top":false,"comment_ctime":1582117940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582117940","product_id":100017301,"comment_content":"不是多此一举。<br><br>性能分析依赖于测试环境和测试数据规模，因此，无法准确的比较代码的效率。而渐进复杂度则是根据数据规模来分析算法的效率，通过控制变量法（假设宿主机不干扰运行效率，每行代码的执行效率一致）可以更准确的判断出代码的效率。","like_count":0},{"had_liked":false,"id":179764,"user_name":"D0 N0W","can_delete":false,"product_type":"c1","uid":1602108,"ip_address":"","ucode":"F7A82748E15BAA","user_header":"https://static001.geekbang.org/account/avatar/00/18/72/3c/b5c70806.jpg","comment_is_top":false,"comment_ctime":1582093485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582093485","product_id":100017301,"comment_content":"复杂度分析是一种理论层面的分析，程序的执行可能受宿主的影响，1次，2次运行的结果不能代表什么，所以复杂度分析不是浪费时间，当然还需要结合实际情况来判断。","like_count":0},{"had_liked":false,"id":179742,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1582087662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582087662","product_id":100017301,"comment_content":"并不多此一举。首先，性能测试跟加算机性能、网络、架构有关系，不同的环境对于系统执行的结果不一样。就如i9肯定快于i3,专线肯定快于普通网络。对系统的时间复杂度分析，可以避开客观原因，单纯从过年代码执行效率上面分析，从而找出系统执行效率是否合理、瓶颈在哪里，如何通过时间复杂度更优的算法对系统进行改进。同理空间复杂度。<br><br>空间和时间复杂度分析的确会耗时间，但是只要找出关系业务逻辑代码，对其进行分析。通过分析找出不足并改进，花出去的时间是值得的。","like_count":0},{"had_liked":false,"id":179532,"user_name":"Lone Ranger","can_delete":false,"product_type":"c1","uid":1689707,"ip_address":"","ucode":"B9C3CF4110F9D4","user_header":"https://static001.geekbang.org/account/avatar/00/19/c8/6b/148c7cce.jpg","comment_is_top":false,"comment_ctime":1582024692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582024692","product_id":100017301,"comment_content":"理论上的性能和实际的性能是不一样的，虽然可能进行了性能测试后你对程序效率会有清晰的认识但是这个测试具有特殊性，受电脑设备等影响不具有一般性，但是若加上时间和空间复杂度分析后你将会对设计的程序有大概的认知，所以说这不是多此一举他们是相辅相成的。<br>另外设计程序不单单是实现功能还应该兼顾性能上的优化从而使得程序效率提高。而且只要多加练习这个分析过程花不了多少时间的","like_count":0},{"had_liked":false,"id":178993,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1581867942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581867942","product_id":100017301,"comment_content":"<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> } <br>i等比队列 :<br>2的1次方  2的2次方 到2的循环次次数的次方<br>当运行到最大的循环次数x时，2的x次方=n<br>循环次数x=log2n<br>所以时间复杂度为log2n<br><br>同理nlog2n  上面这个例子 只要在修改代码i*2*复杂度n为嵌套函数  就实现了<br>","like_count":0},{"had_liked":false,"id":178881,"user_name":"yan","can_delete":false,"product_type":"c1","uid":1667264,"ip_address":"","ucode":"BA33B672798AEE","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/c0/b365a317.jpg","comment_is_top":false,"comment_ctime":1581845280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581845280","product_id":100017301,"comment_content":"时间、空间复杂度是可以对代码的执行效率以及资源消耗有一个预先的分析和评估，这是有必要的。相比事后评估而言，可以将一些问题提前预见出来。","like_count":0},{"had_liked":false,"id":178817,"user_name":"柚子","can_delete":false,"product_type":"c1","uid":1248611,"ip_address":"","ucode":"2F8CC2952E3122","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/63/85f471e2.jpg","comment_is_top":false,"comment_ctime":1581834716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581834716","product_id":100017301,"comment_content":"不是多此一举，虽然平时业务代码写的多，虽然平时写的比较低效的代码，也达不到数据库压力瓶颈，对用户的反馈其实也是可以容忍，但是如果对代码有时间复杂度和空间复杂度的一个优化意识，可以O（1）就不O（n），长远来看其实是有很大好处的。至少避免了未来填自己坑的一种可能性。最后大概总结下：<br>时间复杂度：渐变时间复杂度，其实就是看执行时间和数据规模的关系。<br>空间复杂度：渐变空间复杂度，其实就是看算法占用空间和数据规模的关系。<br>至于具体的时间复杂度的分析，文中也说了很清楚了。大学算法虽然没有好好学，但是多多少少还是有了解吸收比较快速。","like_count":0},{"had_liked":false,"id":178810,"user_name":"拾迹","can_delete":false,"product_type":"c1","uid":1025093,"ip_address":"","ucode":"38F367B77FF2D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","comment_is_top":false,"comment_ctime":1581832280,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581832280","product_id":100017301,"comment_content":"“浪费”时间一开始是肯定的，但是如果一直不肯“浪费”这个时间，那写出的代码就只能一直是“低阶”的了。这里是在学习阶段，我认为是应该要花这个时间的，这样我们才能知道好的代码是怎样的，垃圾的代码是怎样的，之间怎么区分开，这里修炼的是内功。但是在实际工程中，很显然是不可能会让你逐行代码去花时间分析的，甚至性能的自动化测试会更加容易被采纳，而在此时，回过头去优化代码就需要考验你前期的内功了。这样相辅相成、螺旋式的迭代，这段时间会越用越少，代码也会越写越好了。<br><br>---<br>另外，“尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，”，这里是不是应该是执行的次数。","like_count":0},{"had_liked":false,"id":178419,"user_name":"小武","can_delete":false,"product_type":"c1","uid":1031888,"ip_address":"","ucode":"F47B5D220161E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/d0/7f37f35f.jpg","comment_is_top":false,"comment_ctime":1581684970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581684970","product_id":100017301,"comment_content":"看了两遍，用力的去理解时间与空间复杂度，虽然现在还不知道具体的用途，但是对大O表示法T(n) = O(f(n))有了一些理解，可以分析出一段简单代码的时间复杂度。还发现了一个问题，高中的数学知识忘记差不多了，还得学起来。还有看评论真涨知识。<br>    课后思考：不是多此一举，项目性能测试是在项目环境固定、数据规模固定的情况下进行的，而时间与空间复杂度执行时间与存储空间和数据规模的增长关系，可以作为对代码质量的一个补充。<br>","like_count":0},{"had_liked":false,"id":178345,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1581665567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581665567","product_id":100017301,"comment_content":"并不是多此一举。就像文章中所说的“事后统计法”，这种方式依赖测试环境、受数据规模的影响。<br>而时间复杂度（渐进时间复杂度）是代码执行时间随数据规模增长的变化趋势，时间、空间复杂度分析，是对性能测试的另外一个视角的补充。<br>","like_count":0},{"had_liked":false,"id":177875,"user_name":"荼靡","can_delete":false,"product_type":"c1","uid":1633814,"ip_address":"","ucode":"1C03781A0E4C65","user_header":"https://static001.geekbang.org/account/avatar/00/18/ee/16/2a234c7c.jpg","comment_is_top":false,"comment_ctime":1581519392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581519392","product_id":100017301,"comment_content":"糟糕，多项式和非多项式我忘了，指数的乘法也不会了。","like_count":0},{"had_liked":false,"id":177504,"user_name":"小蛋糕","can_delete":false,"product_type":"c1","uid":1807662,"ip_address":"","ucode":"335A6F4301CF22","user_header":"https://static001.geekbang.org/account/avatar/00/1b/95/2e/f8575abb.jpg","comment_is_top":false,"comment_ctime":1581407004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581407004","product_id":100017301,"comment_content":"性能测试感觉更倾向于某场景下的结论，而复杂度分析是与场景无关的客观结论。","like_count":0},{"had_liked":false,"id":177312,"user_name":"Valar Morghulis","can_delete":false,"product_type":"c1","uid":1813482,"ip_address":"","ucode":"4BF1EB7E99F596","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ab/ea/4687818c.jpg","comment_is_top":false,"comment_ctime":1581345245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581345245","product_id":100017301,"comment_content":"2. O(logn)、O(nlogn)这里，2的x次方=n怎么得出来的，比如：<br>n=1，x=0<br>n=2，x=1<br>n=3，x=1.58","like_count":0},{"had_liked":false,"id":177302,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1581344376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581344376","product_id":100017301,"comment_content":"我在做项目的时候的确没有涉及到复杂度，但是我想程序加载到内存中，所以空间复杂度会很重要。就比如我在项目中，把代码部署到服务器运行，都是部署可执行的最小文件，比如javascript通过webpackm生成的bundle.js,而不是原始的文件，我想这也是为了空间的节省把","like_count":0},{"had_liked":false,"id":177278,"user_name":"坑坑","can_delete":false,"product_type":"c1","uid":1221707,"ip_address":"","ucode":"CC5A357B21393C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/4b/a522594f.jpg","comment_is_top":false,"comment_ctime":1581340474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581340474","product_id":100017301,"comment_content":"像王哥说的，性能基准测试依赖于环境以及测试的数据，并不能完全反映出不同代码的优劣。而根据三个法则：1. 看执行次数最多的代码的复杂度；2. 总复杂度等于复杂度最高的那一段代码的复杂度；3. 嵌套法则 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。很快就能分析出一段代码的复杂度了，熟练的话一眼看过去就知道了，并不会占用很多时间。每次做代码审查或者编写代码时，如果总是能够带着复杂度的问题去审视代码，写出来的代码效率总不会太差！","like_count":0},{"had_liked":false,"id":176410,"user_name":"Leaflc","can_delete":false,"product_type":"c1","uid":1834079,"ip_address":"","ucode":"7D9C5A6718A33A","user_header":"","comment_is_top":false,"comment_ctime":1581053110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581053110","product_id":100017301,"comment_content":"在 —— 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积 这里<br>代码第五行 ret = ret + f(i);<br>的i改为n，还有其他函数的i的初始化声明改为0。时间复杂度才是n的平方","like_count":0},{"had_liked":false,"id":176408,"user_name":"Leaflc","can_delete":false,"product_type":"c1","uid":1834079,"ip_address":"","ucode":"7D9C5A6718A33A","user_header":"","comment_is_top":false,"comment_ctime":1581052456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581052456","product_id":100017301,"comment_content":"在文章的这段部分——乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br>说下述代码的时间复杂度为n的平方，是错误的吧。<br>n的平方的复杂度代码应该是这个<br>```<br>int n=0<br>  for (int i = 1; i &lt;= 4; ++i)<br>    {<br>        for (int i = 1; i &lt;= 4; ++i)<br>        {<br>            n++;<br>            cout &lt;&lt; n &lt;&lt; endl;<br>        }<br>    }<br>```","like_count":0},{"had_liked":false,"id":176184,"user_name":"志者","can_delete":false,"product_type":"c1","uid":1528455,"ip_address":"","ucode":"1F217598DDE356","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/87/552116de.jpg","comment_is_top":false,"comment_ctime":1580981088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580981088","product_id":100017301,"comment_content":"不会是多此一举，因为对于做这两种分析，提供了不同的代码设计方向。在后面编写代码的过程，有些逻辑问题或者 bug 也是因为没做两种分析得来的。每行其实并不浪费时间，因为在编写的过程就考虑了效率的问题，比后面设计完代码在过后修改的来的精力说，更省事。","like_count":0},{"had_liked":false,"id":175243,"user_name":"Geek_2eb9a7","can_delete":false,"product_type":"c1","uid":1817695,"ip_address":"","ucode":"0E836084C538D5","user_header":"","comment_is_top":false,"comment_ctime":1580627606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580627606","product_id":100017301,"comment_content":"一段代码的时间复杂度和空间复杂度分别用语句的执行次数和内存申请量来近似","like_count":0},{"had_liked":false,"id":175041,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1580535412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580535412","product_id":100017301,"comment_content":"对项目进行性能测试，是一种作事后统计法，这种方法有如下缺点：<br>a.测试结果非常依赖测试环境<br>b.测试结果受数据规模影响很大<br>而对代码进行时间、空间复杂度分析是可以预估代码的执行时间、内存消耗情况随数据规模增长的关系，能大概的预测出代码的执行时间，内存消耗。<br>对代码进行性能测试与分析时间、空间复杂度并不冲突，他们是相辅相成的：<br>性能测试：可以让我们知道在某个环境、某个数据规模下代码的性能；<br>复杂度分析：可以让我们大概预计代码的执行效率，内存消耗情况。","like_count":0},{"had_liked":false,"id":174926,"user_name":"宪成小哥","can_delete":false,"product_type":"c1","uid":1526406,"ip_address":"","ucode":"7C1A4F25ACCB4A","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/86/3cd4144e.jpg","comment_is_top":false,"comment_ctime":1580461837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580461837","product_id":100017301,"comment_content":"时间、空间复杂度分析不受硬件环境和测试数据量的影响，可以项目前期设计和实现过程中有意识的考量，并结合实际的业务进行分析是通过时间复杂度换取空间复杂度，还是利用空间复杂度换取时间复杂度，最后结合基准测试选择最优的方案","like_count":0},{"had_liked":false,"id":174895,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1580450734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580450734","product_id":100017301,"comment_content":"常用的时间复杂度很少，就O(1), O(logn), O(n), O(nlogn)，O(n^2)，O(n^3), O(2^n), O(n!)等，这个规律非常重要。由于NP算法的时间复杂度太高了，不建议使用。当设计算法时，需要检查是哪种时间复杂度，然后按上面的顺序逆序检查，是否可以找出前一个时间复杂度的算法。比如你当前的得法的时间复杂度是O(n^2)，那你就要想一下，如何让算法复杂度降低到O(nlogn)，或O(n)，甚至常数级","like_count":0},{"had_liked":false,"id":174894,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1580450347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580450347","product_id":100017301,"comment_content":"原来空间复杂度常用的更少，只有O(1), O(n), O(n^2)三种，而O(logn)和O(nlogn)极少用到","like_count":0},{"had_liked":false,"id":174858,"user_name":"Geek_ttjjttjj","can_delete":false,"product_type":"c1","uid":1714081,"ip_address":"","ucode":"6FE6FC8BBF0EBC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJu4p8ZheJ4KCLo6gI6VficSp1U4XCicfquprCavib6Xm0iaoXuwlLDgXxcosUSfiawfE1qFZhp9TG86Rg/132","comment_is_top":false,"comment_ctime":1580439071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580439071","product_id":100017301,"comment_content":"大O复杂度讲很清楚，看了很多网络的文章讲不清，谢谢老师！","like_count":0},{"had_liked":false,"id":174398,"user_name":"谢真","can_delete":false,"product_type":"c1","uid":1124650,"ip_address":"","ucode":"8C3402DE107C9F","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/2a/9079f152.jpg","comment_is_top":false,"comment_ctime":1580191667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580191667","product_id":100017301,"comment_content":"讲的非常通俗易懂，受益良多，以前只知道概念，不知道实操","like_count":0},{"had_liked":false,"id":174205,"user_name":"一路向北","can_delete":false,"product_type":"c1","uid":1050287,"ip_address":"","ucode":"19322F21C0235B","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/af/f7e562fb.jpg","comment_is_top":false,"comment_ctime":1580084999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580084999","product_id":100017301,"comment_content":"设计的时候，写代码的时候就考虑时间和空间的复杂度，不要等到测试的时候发现问题改好的多。","like_count":0},{"had_liked":false,"id":173458,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1579567080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579567080","product_id":100017301,"comment_content":"老师讲的通俗易懂，但是有两个问题不懂：<br>（1）什么时候来做这个复杂度分析？<br>（2）如何利用分析出来的复杂度来优化自己的代码？<br>（3）时间复杂度和空间复杂度怎么结合来看？","like_count":0},{"had_liked":false,"id":172631,"user_name":"马志远","can_delete":false,"product_type":"c1","uid":1480892,"ip_address":"","ucode":"AAD8875343E5FC","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/bc/6d5affd3.jpg","comment_is_top":false,"comment_ctime":1579239486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579239486","product_id":100017301,"comment_content":"03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？<br>一.why-为什么需要复杂度分析？<br>1. 测试结果非常依赖测试环境<br>2. 测试结果受数据规模的影响很大<br>我们需要一个不用具体的测试数据来测试(复杂度分析)，就可以粗略地估计算法的执行效率的方法<br><br>二.what-复杂度是什么?<br>1.时间复杂度:大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。(运行耗费时间 与 数据规模N的关系)<br>2.空间复杂度:空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。(存储(内外存) 与 数据规模N的关系)<br><br>三.how-怎样计算复杂度<br>1.时间复杂度分析<br>&lt;1&gt;大 O 时间复杂度表示法<br>T(n) = O(f(n)): T(n):时间 和 数据数据量级N 的关系 O时间表示:我的理解表示方法而已<br>F(n):实际的函数表达式<br>例子:T(n) = O(n)； T(n) = O(n2)<br>&lt;2&gt;时间复杂度分析方法<br>1.只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>Tips：<br>三种复杂度的分析技巧。不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招<br><br>四.应用场景-几种常见的时间复杂度<br><br>常数阶O(1)<br>线性阶O(n)<br>平方阶O(n²)<br>对数阶O(logn)<br>线性对数阶O(nlogn)<br>O(2n) 和 O(n!)<br><br>1.复杂度两级分类:<br>多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2n) 和 O(n!)<br>2.多项式复杂度量级实例<br>O(1) :一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)<br>O(logn)、O(nlogn)<br>O(m+n)、O(m*n):由两个数据的规模 即有两个变量控制<br><br><br>五.summary-个人总结<br>1.复杂度分析：主要是要分析出表达式 --&gt; 记住表达式的函数增长图<br>2.在实际中刻意练习","like_count":0},{"had_liked":false,"id":171227,"user_name":"naku","can_delete":false,"product_type":"c1","uid":1528610,"ip_address":"","ucode":"B49EF5B5B38400","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","comment_is_top":false,"comment_ctime":1578884114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578884114","product_id":100017301,"comment_content":"课后思考：进行性能测试说明项目有性能要求，如果只是弄一批数据进行测试，这样的结果取决于测试环境及数据规模的大小，具有局限性，如果数据规模和测试环境发生变化，可能这个测试就需要重新做。  对代码进行时间和空间复杂度的分析是一种理论分析。如果我们测试的数据规模为n， 那么当数据规模为2n的时候，如果我们没学时间和空间复杂度分析，可能就会想当然的以为时间花费为2t。学之后，如果时间复杂度是O(N^2) ，那么时间花费为4t。如果为O(logn), 时间花费为t+C。另外如果数据规模比较大， 虽然我没有项目经验，但我觉得，公司应当是不允许O(N^2)这样的复杂度的代码的。 ","like_count":0},{"had_liked":false,"id":171226,"user_name":"qf年间","can_delete":false,"product_type":"c1","uid":1463023,"ip_address":"","ucode":"AA08AC984637EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLbchZfeEnshPuUwEsQkn1XbWxjs3rRUpSRUxjW4q7rOcrPvXld0IxEZ1jlpEJdklFeEVERJoOfibg/132","comment_is_top":false,"comment_ctime":1578884067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578884067","product_id":100017301,"comment_content":"老师请问一下第一个例子里面return语句是否算执行了一次呢（虽然我知道这个常数项可以忽略）","like_count":0},{"had_liked":false,"id":170912,"user_name":"花郎世纪","can_delete":false,"product_type":"c1","uid":1800886,"ip_address":"","ucode":"301DF9B6375E08","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/b6/f54bbfaa.jpg","comment_is_top":false,"comment_ctime":1578756596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578756596","product_id":100017301,"comment_content":"俺边看边敲，以下是本节的java实现：（虽然实现没啥难度，但都实现一遍有助理解嘛···）<br>public class chapter3 {<br><br>    public static void main(String[] args){<br>        cal2(10);<br>    }<br>    &#47;&#47;sum_3复杂度 O(2n^2+2n+3) = O(n^2),描述算法执行效率和数据规模增长的变化趋势<br>    &#47;&#47;总的时间复杂度就等于量级最大的那段代码的时间复杂度,O(1)+O(n)+O(n^2)结果为O(n^2)<br>    public static void cal1(int n){<br>        int sum_1 = 0;<br>        int p=1;<br>        for(; p &lt;= 100; p++){<br>            sum_1 += p;<br>        }<br><br>        int sum_2 = 0;<br>        int q = 1;<br>        for(; q &lt;= n; q++){<br>            sum_2 += q;<br>        }<br><br>        int sum_3=0;<br>        int i=1;<br>        int j=1;<br>        for(;i &lt;= n; i++) {<br>            j = 1;<br>            for(;j &lt;= n; j++) {<br>                sum_3 = sum_3 + i*j;<br>            }<br>        }<br>        System.out.println(sum_1 +  sum_2 + sum_3);<br>    }<br><br>    public static void cal2(int n){<br>        int ret = 0;<br>        int i = 1;<br>        for(; i&lt;n; ++i) {&#47;&#47;这里++i和i++无区别<br>            System.out.println(i);<br>            ret += f(i);<br>        }<br>        System.out.println(ret);<br>    }<br>    public static int f(int n) {<br>        int sum = 0;<br>        int i =  0;<br>        for(;i &lt; n; ++i) {<br>            sum += i;<br>        }<br>        return sum;<br>    }<br>    &#47;&#47;时间复杂度 O(log3 n) ,log3n 就等于 log32 * log2n<br>    &#47;&#47;在采用大 O 标记复杂度的时候，可以忽略系数 O(log3 n) = O(log n)<br>    public static void cal3(int n) {<br>        int i = 1;<br>        while (i &lt;= n) {<br>            i = i * 3;<br>        }<br>    }<br>    &#47;&#47;空间复杂度，表示算法的存储空间与数据规模之间的增长关系<br>    &#47;&#47;这段代码空间复杂度为O(n)<br>    public static void cal4(int n) {<br>        int i = 1;<br>        int [] a = new int[n];<br>        for(; i &lt; n; i++) {<br>            a[i] = i * i;<br>        }<br>    }<br>}<br><br>","like_count":0},{"had_liked":false,"id":170227,"user_name":"王££","can_delete":false,"product_type":"c1","uid":1322881,"ip_address":"","ucode":"9DADA7C5218A15","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/81/131ea1e4.jpg","comment_is_top":false,"comment_ctime":1578553334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578553334","product_id":100017301,"comment_content":"维度不同, 性能测试是为了通观全局,看下哪里影响了整个系统,是在整个项目的视角.  而复杂度分析是为了写代码的人对自己的代码有一个数据化的认知","like_count":0},{"had_liked":false,"id":170216,"user_name":"黄宸","can_delete":false,"product_type":"c1","uid":1799585,"ip_address":"","ucode":"C346F5604B8724","user_header":"","comment_is_top":false,"comment_ctime":1578551827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578551827","product_id":100017301,"comment_content":"感觉还是比较容易理解的","like_count":0},{"had_liked":false,"id":169846,"user_name":"黄马","can_delete":false,"product_type":"c1","uid":1019506,"ip_address":"","ucode":"93E391B4678EC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/72/63c94eee.jpg","comment_is_top":false,"comment_ctime":1578455764,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1578455764","product_id":100017301,"comment_content":"从算法的时间复杂度是用来干什么的？<br><br>事前估算算法的执行效率<br><br>张什么样子？<br><br>T(n) = O(f(n))<br><br>从实际的例子出发<br><br>从for循环求和实例，推导时间复杂度；忽略低阶，选取高阶<br><br>推导算法对应的时间复杂<br><br>通过各种典型的程序实例，推导时间复杂度；加法法则，乘法法则等<br><br>对通过算法的复杂度总结","like_count":0},{"had_liked":false,"id":169743,"user_name":"Geek_f93234","can_delete":false,"product_type":"c1","uid":1769504,"ip_address":"","ucode":"1E5DC903A5429E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGXndj5N66z9BL1ic9GibZzWWgoVeWaWTL2XUnCYic7iba2kAEvN9WfjmlXELD5lqt8IJ1P023N5ZWicg/132","comment_is_top":false,"comment_ctime":1578436117,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1578436117","product_id":100017301,"comment_content":"第一个问题：<br><br>1.性能测试结果非常依赖测试环境，不同的测试环境对测试结果有很大的影响，不同的硬件配置和软件配置，性能测试结果都会差别很大性能测试结果反映的是系统整体的性能。代码的时间复杂度表示算法的执行时间与数据规模之间的增长关系，空间复杂度表示算法额存储空间与数据规模之间的增长关系。<br><br>第二个问题：<br><br>每段代码都分析一下时间复杂度和空间复杂度，是不是很浪费时间呢？怎么看待这个问题？<br><br>常见的复杂度并不多，从低阶到高阶有：O(1),O(logn),O(n),O(nlogn),O(n2)，因此，多分析，多练习，熟练之后很快就能分析出时间复杂度和空间复杂度","like_count":0},{"had_liked":false,"id":169459,"user_name":"他山之石","can_delete":false,"product_type":"c1","uid":1167560,"ip_address":"","ucode":"F015490A2E84BD","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/c8/065ee931.jpg","comment_is_top":false,"comment_ctime":1578360120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578360120","product_id":100017301,"comment_content":"老师，unit_time具体的时间单位值是什么？是系统的毫秒数吗?","like_count":0},{"had_liked":false,"id":169176,"user_name":"Anthony","can_delete":false,"product_type":"c1","uid":1309908,"ip_address":"","ucode":"9E0C98A9123365","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","comment_is_top":false,"comment_ctime":1578285586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578285586","product_id":100017301,"comment_content":"有必要，事前分析总比时候补救的要好，至于为什么说可能出现问题，就是可能测试数据量不够，随着线上的数据量越来越大，就可能出现问题","like_count":0},{"had_liked":false,"id":168918,"user_name":"雪山飞狐","can_delete":false,"product_type":"c1","uid":1475485,"ip_address":"","ucode":"66FBC2AB10B77F","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/9d/fe638260.jpg","comment_is_top":false,"comment_ctime":1578216572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578216572","product_id":100017301,"comment_content":"性能测试和代码复杂度分析的目的，侧重点各不相同。<br>代码复杂度分析是排除掉测试环境，测试数据规模的影响干扰，从定性的角度评估代码执行时间随数据规模增长的变化趋势，目的是为了优化代码结构与性能，使其在普适性的环境中具有更强的可用性，可扩展性；性能测试则是在贴近实际的测试环境中，通过逐步加压使系统暴露出可能存在的瓶颈，是定量的分析性能业务指标的过程，涉及面更广，而不是仅代码层面。<br>每段代码都分析一下，其实并不会占有太多时间，因为定性的理论模型分析在自己选择代码如何写的时候就已经可以顺便进行，熟能生巧后就可以知道在特定场景下选用何种数据结构和算法更优，这有助于自身思维的提升和代码质量的提高。","like_count":0},{"had_liked":false,"id":168807,"user_name":"7侠","can_delete":false,"product_type":"c1","uid":1203998,"ip_address":"","ucode":"D75FCA6DF0D497","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/1e/18ef8e84.jpg","comment_is_top":false,"comment_ctime":1578190976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578190976","product_id":100017301,"comment_content":"不是多此一举，复杂度分析事先就可以估算出程序耗消耗的时间、空间，对算法和数据结构的设计有指导作用，特别是关键功能的设计，防止程序写完后在真实机器上执行才发现设计有问题，这样代价太高; 在真实机器上运行分析一是受机器性能影响，二是受数据规模的影响，统计数据不一定反应了事实。感觉最好是二者结合使用，这样应该效果最好。<br>   对每段代码进行复杂度分析也许没必要，但关键功能和常用功能的代码应分析，因为复杂度分析只是估算且常见的复杂度就5种，花费的时间不多，也是值得的。","like_count":0},{"had_liked":false,"id":168201,"user_name":"Geek_7bdc9d","can_delete":false,"product_type":"c1","uid":1464478,"ip_address":"","ucode":"2C2F132A133323","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ3ibJunUcvkA8sic6XWvJKibFWicNPHQCMaKwhhBibGmHz4La71nHUOBDqXu9hgJFXx6ISwzxmUj2oP1Q/132","comment_is_top":false,"comment_ctime":1578032549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578032549","product_id":100017301,"comment_content":"大O表示法，是将代码的实现步骤转化为代数项，然后剔除哪些对问题的整体规模不会有影响的系数，即只关注最重要的影响。<br>常见的时间复杂度。<br>1. O(1)<br>2. O(logn)<br>3. O(n)<br>4.O(nlogn)<br>5.O(n2)","like_count":0},{"had_liked":false,"id":168150,"user_name":"Otoman","can_delete":false,"product_type":"c1","uid":1734421,"ip_address":"","ucode":"7B9B552545D021","user_header":"https://static001.geekbang.org/account/avatar/00/1a/77/15/e474d3cd.jpg","comment_is_top":false,"comment_ctime":1578020167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578020167","product_id":100017301,"comment_content":"我觉的优秀的代码应该是，写代码的时候就在算法层面分析算法的复杂度，代码完成后用压测来测试运行代码的硬件性能然后优化自己的硬件配置来实现性能最优。所以分析算法的复杂度是必不可少的一环。压测只是补充性的优化代码的性能。","like_count":0},{"had_liked":false,"id":167852,"user_name":"未来怎样","can_delete":false,"product_type":"c1","uid":1652085,"ip_address":"","ucode":"4E54EB62595B27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKORTofsU89GYKtywquzKuEiabvZnEOonfMYKuCPlo8GDlXqZuJdBicu0XtlaeodH4BnmHV1kldSAwQ/132","comment_is_top":false,"comment_ctime":1577950919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577950919","product_id":100017301,"comment_content":"压测是依赖环境和数据规模的，只能反映功能是否可用，并不能提现出代码执行效率的优劣。而复杂度分析能够在脱离运行平台只是在代码层面给出一个较量化的运行优劣参考数据。两者之间不冲突。复杂度分析应该是代码自测和评估必须做的工作。","like_count":0},{"had_liked":false,"id":167625,"user_name":"杰瑞的Jerry","can_delete":false,"product_type":"c1","uid":1690017,"ip_address":"","ucode":"5FBF22B528B721","user_header":"https://static001.geekbang.org/account/avatar/00/19/c9/a1/24c2e54e.jpg","comment_is_top":false,"comment_ctime":1577881660,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1577881660","product_id":100017301,"comment_content":"学完本节打卡：<br><br>本节学习了算法复杂度分析：<br>1.把代码实际跑一遍，测得用时和所消耗内存，属于事后统计法。测试结果非常依赖于运行环境，并且受数据规模影响较大，因此不可取。<br>2.用大O复杂度表示。只关心循环次数最多的一段代码，加法法则，乘法法则。<br>3.多项式量级和非多项式量级。非多项式量级主要有O(2^n)和O(n!)，随着数据量增长运算时间增长过快，基本不可取。<br>4.空间复杂度和时间复杂度分析方法类似。<br><br>思考题：大O复杂度分析只是理论上的分析，实际上代码的运算效率还需要在实际的硬件上测试。在leetcode上经常有算法复杂度明明更高的代码运算速度却更快，就是这个原因。","like_count":0},{"had_liked":false,"id":167554,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1577858032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577858032","product_id":100017301,"comment_content":"来复习一下中学数学知识：<br>log表示对数. “log”是“logarithm”的缩写.<br>如果a^n = b（a&gt;0,且a≠1）,那么数n叫做以a为底b的对数,记做n=log(a)b,【a是下标】<br>其中,a叫做“底数”,b叫做“真数”.<br>相应地,函数y=logaX叫做对数函数.对数函数的定义域是（0,+∞）.零和负数没有对数.<br>底数a为常数,其取值范围是（0,1）∪（1,+∞）.<br>当a=10时,写作：y=lgx【常用对数】.<br>当a=e【自然对数的底数】时,写作y=lnx<br>例：2^3 =8<br>那么 log(2) 8 = 3<br>","like_count":0},{"had_liked":false,"id":167449,"user_name":"Coding","can_delete":false,"product_type":"c1","uid":1799518,"ip_address":"","ucode":"1B0443FEBB9413","user_header":"https://static001.geekbang.org/account/avatar/00/1b/75/5e/acb66402.jpg","comment_is_top":false,"comment_ctime":1577803189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577803189","product_id":100017301,"comment_content":"1. 性能测试会受到测试环境的影响，而程序真正在运行的时候，可能会因为硬件性能或者并发数量等等外部条件，与测试环境有极大的出入。而时间复杂度和空间复杂度的分析，都是基于理论上的抽象，只面向要处理的数据量，不收其他杂七杂八的影响，所以有着极高的参考价值。另外，常常思考自己代码的时间和空间复杂度的分析，是一个非常好的习惯，能鞭策自己写出高效优雅的代码。<br>2. 对于简单逻辑的代码，其时间和空间复杂度的分析非常简单，可能只是你喝一口水的时间，捎带着就搞定了。而对于复杂逻辑的代码，时间和空间复杂度的分析是十分必要的，因为本来逻辑就复杂，容易出问题，如果时间和空间复杂度又极大，那可能眼前的测试过去了，未来还会出现问题的积攒爆发，到时再重构维护代码的话，更费时费力。","like_count":0},{"had_liked":false,"id":167349,"user_name":"毛玉娇","can_delete":false,"product_type":"c1","uid":1249192,"ip_address":"","ucode":"BC0F0FEEEAD5DD","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/a8/5bec6811.jpg","comment_is_top":false,"comment_ctime":1577773252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577773252","product_id":100017301,"comment_content":"渐进时间复杂度是一个感性认识，我们可以初略知道用什么算法更适合。性能测试是一个实际依据，通过性能测试来判断是否达到我们的要求，如果不行，如何优化代码，是不是还有更好方案。性能测试重在检测，优化。","like_count":0},{"had_liked":false,"id":167118,"user_name":"liyghting","can_delete":false,"product_type":"c1","uid":1108970,"ip_address":"","ucode":"439794ECEEFD26","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/ea/7d00f657.jpg","comment_is_top":false,"comment_ctime":1577694909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577694909","product_id":100017301,"comment_content":"复杂度分析有时间复杂度和空间复杂度分析，时间复杂度表示执行时间随着数据规模的变大的一种关系，类比，空间复杂度表示存储空间随着数据规模的增大的一种关系。<br>常见的时间复杂度从执行时间由小到大有O(1),O(logn),O(n),O(nlogn),O(n的2次方)，非多项式的时间复杂度，比如O(2的n次方)，O(n!),随着数据规模n的变大，执行时间会急剧增大，所以是一种非常低效的算法。<br>课后思考：性能测试是一种事后统计法，依赖环境和数据规模，不同的环境和数据规模，不同的算法测试出来的性能都是有变化的，所以我们需要一种估计方法来分析算法的执行效率","like_count":0},{"had_liked":false,"id":165840,"user_name":"Geek_342489","can_delete":false,"product_type":"c1","uid":1477359,"ip_address":"","ucode":"40610664021607","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","comment_is_top":false,"comment_ctime":1577330261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577330261","product_id":100017301,"comment_content":"顺便复习了一下高中数学的换底公式🐶","like_count":0},{"had_liked":false,"id":165315,"user_name":"波比小金刚","can_delete":false,"product_type":"c1","uid":1421112,"ip_address":"","ucode":"837C1CE101C75C","user_header":"https://static001.geekbang.org/account/avatar/00/15/af/38/05b7ce28.jpg","comment_is_top":false,"comment_ctime":1577199288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577199288","product_id":100017301,"comment_content":"离散数学还是基础啊","like_count":0},{"had_liked":false,"id":165264,"user_name":"cym","can_delete":false,"product_type":"c1","uid":1162273,"ip_address":"","ucode":"056E06BD2F1913","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/21/3d041d6b.jpg","comment_is_top":false,"comment_ctime":1577190507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577190507","product_id":100017301,"comment_content":"老师您好，关于加法法则，我有一个疑问，课程中这样写道：“分别是求 sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。”这个为什么被称为加法法则，而不被称为“最大法法则”呢？既然是“加法”，那为什么不是将sum_1、sum_2、sum_3相加呢？而后面讲到O(m+n)时，却说“不能简单地利用加法法则，省略掉其中一个。”难道m+n不是加法吗？它不应该被称为加法法则吗？<br>","like_count":0},{"had_liked":false,"id":164756,"user_name":"🌻向阳而生 🍀","can_delete":false,"product_type":"c1","uid":1788687,"ip_address":"","ucode":"D3170D48C24CA9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/0f/f2b59bea.jpg","comment_is_top":false,"comment_ctime":1577086503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577086503","product_id":100017301,"comment_content":"分析代码的时间复杂度还挺重要的，之前刷牛客的编程题，好几次都是因为设计的算法时间复杂度过高，导致没有通过，之前没有注意过logn的底数是可以任意取的，今天了解了，谢谢。","like_count":0},{"had_liked":false,"id":164344,"user_name":"别看我，学习呢","can_delete":false,"product_type":"c1","uid":1792573,"ip_address":"","ucode":"5485C64247766C","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5a/3d/40871fb6.jpg","comment_is_top":false,"comment_ctime":1576941331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576941331","product_id":100017301,"comment_content":"其实，我觉得老师讲的很好<br>时间复杂度，就是算法运行时间和数据规模增长之间的关系。算法执行的时间当然会随着数据变多，而变长的，那么这个这个数据增长一倍，运行运行时间是怎么变化的呢？时间是以倍数增长还是指数增长呢？，你分析你的算法的执行，以一个函数表示，其实能表示执行时间和数据规模的增长关系的就是这个函数。但是我们为了表示执行受到最主要的因数，我们就提出的复杂度的概念，把随着数据增长，最主要的制约变量提取出来其他的次要的不写，如：常量，不变化 不写，幂函数，只写次数最高的，两个分不出高下的，一起写。<br>分析一个算法的时间复杂度，我觉得最主要的就分析他的循环，和递归，因为最主要的就是这两个会随数据增长，执行的次数也会增长。<br>在对一个不认识的算法进行复杂度分析，我觉得可能要一步步分析，把执行的次数写下来（和数据增长有关），合并这些次数（数列求和），得到的函数可能就是我们要的，当然，要想快速的到一个算法的时间复杂度，肯定是有一些技巧的。我需要慢慢总结。","like_count":0},{"had_liked":false,"id":163838,"user_name":"宾克斯","can_delete":false,"product_type":"c1","uid":1712603,"ip_address":"","ucode":"150E98D6657B09","user_header":"https://static001.geekbang.org/account/avatar/00/1a/21/db/4f672f74.jpg","comment_is_top":false,"comment_ctime":1576810006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576810006","product_id":100017301,"comment_content":"性能测试一般在测试阶段的最后执行（功能&#47;兼容&#47;安全等测试之后），此时如果发现性能瓶颈再去优化成本太高。<br>复杂度分析不依赖于测试环境，成本低效率高","like_count":0},{"had_liked":false,"id":163436,"user_name":"艾尔欧唯伊","can_delete":false,"product_type":"c1","uid":1139716,"ip_address":"","ucode":"5BD50691342461","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/04/18875529.jpg","comment_is_top":false,"comment_ctime":1576721244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576721244","product_id":100017301,"comment_content":"性能测试+时间空间复杂度分析不就是理论与实践结合吗……怎么会多此一举。","like_count":0},{"had_liked":false,"id":162539,"user_name":"梨落","can_delete":false,"product_type":"c1","uid":1387237,"ip_address":"","ucode":"2CC84FE37152A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJuMT3ZicYDx7XTWpZu2dD7KljgqjSgynI4awSGrWJwlx0nt9mTqvK9aEdwYICQtX2Af2xOQWM99oQ/132","comment_is_top":false,"comment_ctime":1576551565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576551565","product_id":100017301,"comment_content":"时间复杂度分为多项式阶和非多项式阶，多项式阶O(1),O(logn),O(n),O(nlogn),O(n^2),O(n^3)，非多项式阶O(2^n)和O(n!)，计算复杂度时找代码中的循环、递归、调用，做乘法运算","like_count":0},{"had_liked":false,"id":162502,"user_name":"佛系小姐姐","can_delete":false,"product_type":"c1","uid":1761783,"ip_address":"","ucode":"0F52F9D79B1AB3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e1/f7/97288a0d.jpg","comment_is_top":false,"comment_ctime":1576546152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576546152","product_id":100017301,"comment_content":"int p = 1;   <br>for (; p &lt; 100; ++p) {<br>     sum_1 = sum_1 + p;  <br> }<br>老师，这段代码的时间复杂度是O(1)  还是O(100)  呢？","like_count":0},{"had_liked":false,"id":162277,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1383148,"ip_address":"","ucode":"24401B70B6B40A","user_header":"https://static001.geekbang.org/account/avatar/00/15/1a/ec/4d272448.jpg","comment_is_top":false,"comment_ctime":1576491332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576491332","product_id":100017301,"comment_content":"复杂度原来指定的是资源消耗随数据规模增长的变化趋势呀","like_count":0},{"had_liked":false,"id":161840,"user_name":"bolo","can_delete":false,"product_type":"c1","uid":1357170,"ip_address":"","ucode":"7C91CEA2F1970E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/72/bb10f3d0.jpg","comment_is_top":false,"comment_ctime":1576374864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576374864","product_id":100017301,"comment_content":"12.15 学习笔记：<br>##### 1、为什么要学习复杂度分析？<br><br>1. 比起跑代码，统计与监控，这种事后分析方法，有很大的局限性。（依赖测试环境、收数据规模影响较大）<br>2. 不需要具体数据，来事前粗略估计算法执行效率的方法。<br><br><br><br>##### 2、大O复杂度表示法<br><br>T(n) = O (f(n))<br><br>&gt; 所有代码的执行时间与每行代码的执行次数成正比<br>&gt;<br>&gt; 并不表示真正的代码执行时间，而是表示代码执行时间随数据规模的变化趋势，也称渐进时间复杂度。简称时间复杂度<br><br><br><br>##### 3、如何分析？<br><br>1. 只关注循环执行次数最多的一段代码<br>2. 减法法则  （总复杂度=量级最大那段代码的复杂度）<br>3. 乘法法则  （嵌套代码复杂度=嵌套内外代码复杂度的乘积）<br><br>##### 4、 常见的时间复杂度量级<br><br>- 常量阶 O(1)<br>- 对数阶 O(log n)<br>- 线性阶 O(n)<br>- 线性对数阶 O(nlog n)<br><br>- 平方阶 O(n2)、立方阶(n3)、k次方阶(nk)<br><br>- 指数阶 O(2n)<br>- 阶乘阶 O(n!)<br><br><br><br>O(m) + O(n)   <br><br><br><br>##### 5、空间复杂度分析<br><br>时间复杂度表示：算法的`执行时间`与`数据规模`之间的增长关系。<br><br>空间复杂度表示：算法的`存储空间`与`数据规模`之间的增长关系。<br><br>常见的空间复杂度：<br><br>O(1)、 O(n)、 O（n2）<br><br><br><br>##### 6 学习思路<br><br>&gt; 多练习。看到代码多进行分析","like_count":0},{"had_liked":false,"id":161744,"user_name":"辻目","can_delete":false,"product_type":"c1","uid":1147408,"ip_address":"","ucode":"328FFF06946EC8","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/10/6f744ce0.jpg","comment_is_top":false,"comment_ctime":1576313677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576313677","product_id":100017301,"comment_content":"这一篇文章花了一个小时才读完，但有些知识点没太懂。又花了三四个小时深读了一遍，才读懂了这篇文章，知识就是这样一个反复的过程。","like_count":0},{"had_liked":false,"id":161589,"user_name":"刘智鹏 Leo","can_delete":false,"product_type":"c1","uid":1344274,"ip_address":"","ucode":"FCA328179569F5","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/12/8fb23459.jpg","comment_is_top":false,"comment_ctime":1576240815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576240815","product_id":100017301,"comment_content":"知识点总结<br>1 时间复杂度<br>指数 2^n，对数logN  (这里涉及对数换底，和对数恒等式【https:&#47;&#47;zhidao.baidu.com&#47;question&#47;1733587973570081147.html】)，幂函数n^2<br><br>计算技巧：<br>- 执行次数最多的指令决定 O<br>- 加法法则 （单变量【取值增长最快的代码】和多变量【不可比性】 分情况讨论）<br>- 乘法法则 （单多情况相同），若在函数内调用别的函数<br><br>2 空间复杂度<br>对内存进行操作时才涉及<br><br>3 什么时候O(1)<br>- 无循环 嵌套时 <br><br>4. 关于逻辑运算<br>逻辑运算不影响计算复杂度 ？ <br><br>5. 时间复杂度与运算发生的物理条件（内存）是否有关？<br>只有在开辟空间时，才会对空间复杂度产生影响？<br>再做运算时，数据提取存储的过程与空间复杂度有什么关联，如何影响时间复杂度？<br>","like_count":0},{"had_liked":false,"id":160977,"user_name":"霍","can_delete":false,"product_type":"c1","uid":1123619,"ip_address":"","ucode":"A77B25C124926F","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/23/b9db9e81.jpg","comment_is_top":false,"comment_ctime":1576072658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576072658","product_id":100017301,"comment_content":"性能测试是对环境、数据集、代码等的综合考量。<br>而复杂度分析针对代码中的某些或则某个方法性能的分析，通过分析对比我们可以选择更好的数据结构，写出更高效的代码","like_count":0},{"had_liked":false,"id":160576,"user_name":"immortaliii","can_delete":false,"product_type":"c1","uid":1309441,"ip_address":"","ucode":"ACF57BD721E1B8","user_header":"https://static001.geekbang.org/account/avatar/00/13/fb/01/313be8c8.jpg","comment_is_top":false,"comment_ctime":1575977914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575977914","product_id":100017301,"comment_content":"课后思考：我觉得分析时间、空间复杂度可以帮助我们了解代码的执行效率，发现需要优化的点","like_count":0},{"had_liked":false,"id":160223,"user_name":"简","can_delete":false,"product_type":"c1","uid":1365215,"ip_address":"","ucode":"758C25998E6F55","user_header":"https://static001.geekbang.org/account/avatar/00/14/d4/df/ec5af826.jpg","comment_is_top":false,"comment_ctime":1575893798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575893798","product_id":100017301,"comment_content":"老师， 你在讲【几种常见时间复杂度分析】第3点时提到，T1(m) + T2(n) = O(f(m) + g(n))。请问这个地方为什么是两者时间相加，而不是取时间最大的那个呢？","like_count":0},{"had_liked":false,"id":159857,"user_name":"water","can_delete":false,"product_type":"c1","uid":1113849,"ip_address":"","ucode":"B343B65CC2CDB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/f9/11e8ca3c.jpg","comment_is_top":false,"comment_ctime":1575812084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575812084","product_id":100017301,"comment_content":"（时间、空间）复杂度是一把“尺子”。从宏观上衡量着程序的质量。","like_count":0},{"had_liked":false,"id":159637,"user_name":"呆子","can_delete":false,"product_type":"c1","uid":1768002,"ip_address":"","ucode":"D5024BE48FC4F3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/fa/42/15002bf6.jpg","comment_is_top":false,"comment_ctime":1575710416,"is_pvip":false,"replies":[{"id":"61139","content":"对数换底公式，你搜下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575897469,"ip_address":"","comment_id":159637,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575710416","product_id":100017301,"comment_content":"老师请教一下，那个log3N=Log3,2*Log2N是怎么来的？我没查到","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477129,"discussion_content":"对数换底公式，你搜下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575897469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1768002,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fa/42/15002bf6.jpg","nickname":"呆子","note":"","ucode":"D5024BE48FC4F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75800,"discussion_content":"老师在吗？如何看您有没有回复我？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575780641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159140,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1575546336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575546336","product_id":100017301,"comment_content":"以前 我就死记 一层循环就是O(n)什么的，完全不理解，现在知道了，是通过执行步骤等分析出来的。","like_count":0},{"had_liked":false,"id":158985,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1575511053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575511053","product_id":100017301,"comment_content":"首先我觉得不是浪费时间。代码的使时间复杂度和空间复杂度是一个理论基础，和具体执行平台和运行环境无关的，我们可以通过只观察代码来分析出复杂度；而性能测试需要在特定的环境下执行，即使知道了性能较差之后，我们还是得去代码上找原因，那还是得进行复杂度分析。至于每段代码是否都需要进行复杂度分析，一般一眼看去就够了，经验丰富直接看量级最大的那段代码就行了。总结就是：性能测试是具体数据量具体环境所得出的结果，而复杂度分析则可以根据数据规模大小来判定，不限于环境，对于代码的优化更有指导意义。","like_count":0},{"had_liked":false,"id":158734,"user_name":"InfoQ_f988cad99a0b","can_delete":false,"product_type":"c1","uid":1292736,"ip_address":"","ucode":"D321FF909D8726","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIHonV9RFBP29AkzJIzLSPJrQQE6TBJ03LFeAcGK9F1BzH8ZjxFRIDJibHZUWlo2K8ENpzkocIE0og/132","comment_is_top":false,"comment_ctime":1575443952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575443952","product_id":100017301,"comment_content":"事后分析，当不符合不要求的时候，还是会回过头重新构建代码逻辑，寻找不合理的地方。所以还不如在写代码的时候就直接想好复杂度，对每一行代码都了解其耗时，存储，最终再测试的时候也会更加方便。并且，分析复杂度与空间不会占用太多时间，习惯就会水到渠成。","like_count":0},{"had_liked":false,"id":158027,"user_name":"walkinshadow","can_delete":false,"product_type":"c1","uid":1321643,"ip_address":"","ucode":"1ACF2CCA541A3F","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/ab/1123dc41.jpg","comment_is_top":false,"comment_ctime":1575299487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575299487","product_id":100017301,"comment_content":"老师有点像布道，先把思想告诉大家，然后再志同道合，迈步往前；<br>迈不过去的坎会不断的绊倒自己，阻挡自己的前进，像是自己的妥协卡住了自己；<br>进行时间复杂度分析区别于事后分析，前者像是运筹帷幄，做事心里有数；后者有点像不管过程先有结果，有了结果效率不好再说的感觉，特别契合在第一节中说到的凑合差不多先生，结果就是最终被凑合的结局（非必然，但是大多数都会这样）。<br>大O时间复杂度表示代码执行时间随数据规模增长的变化趋势；<br>当数据规模是一个固定的值，比如1，100，1000或者10000000的时候，数据规模已经固定了，所以时间复杂度是一个不会变的。O(1)<br>当然如果执行次数特别大的时候，执行时间也特别长，但是复杂度没有变化。时间长和复杂不是一回事。<br>单个数据规模的时间复杂度，对于加法O(f(n))+O(g(n)),当然O(g(n))是复杂度量级平方阶，O(f(n))是线性阶的，乘法就是O(f(n))*Og((n))（第一次看的时候以为O(g(n))是对O(n2)的一种约定俗成的指定，其实只是另外一个函数名没啥特殊意思，脑洞太大）<br>常用的时间复杂度，有O(1) 常量阶&#47;对数阶O(logn)&#47;线性阶&#47;线性对数阶O(nlogn)&#47;平方阶直到K方阶。<br>对数的转换，算是解释了自己的迷惑，如果大家数学学得好应该没有这个问题<br>n*O(logn) 和 O(nlogn) 复杂度不一样<br>对复杂度图的印象特别深，好像高中时经常来回考这几个函数，看到平方阶复杂度已经这么高了，难以想象指数阶和对数阶，<br>古印度象棋格放粮食，如果n是定值那么复杂度就是O(1),否则O(logn)<br>最后期望学完全部的数据结构和算法之后，能在工作之中使用最低时间复杂度的算法，CRUD写多了也是会吐的。","like_count":0},{"had_liked":false,"id":157964,"user_name":"到点了上号","can_delete":false,"product_type":"c1","uid":1572164,"ip_address":"","ucode":"A12690AFA3DA27","user_header":"https://static001.geekbang.org/account/avatar/00/17/fd/44/b114ec6a.jpg","comment_is_top":false,"comment_ctime":1575290671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575290671","product_id":100017301,"comment_content":"谁会嫌有用的知识学的太多呢？","like_count":0},{"had_liked":false,"id":157870,"user_name":"月清剑影","can_delete":false,"product_type":"c1","uid":1763843,"ip_address":"","ucode":"FECE876F7A870C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/03/9a1133ab.jpg","comment_is_top":false,"comment_ctime":1575274915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575274915","product_id":100017301,"comment_content":"非常感谢作者，这是我目前阅读过的对复杂度解析最透彻，最简单易懂的文章。复杂度分析是非常有必要的，可以提前让我们对代码性能有个大致认识，提前做好预防，也可以给我们一个比较清晰的认识，方便我们对其进行优化改进。同时也可以很好的锻炼我们分析的思维，分析多了，不需要耗费多少时间，便可知道代码对应的复杂度","like_count":0},{"had_liked":false,"id":157561,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1575194285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575194285","product_id":100017301,"comment_content":"渐进事件复杂度表示 代码执行时间与数据规模大小的变化趋势","like_count":0},{"had_liked":false,"id":157522,"user_name":"Michael  Chen","can_delete":false,"product_type":"c1","uid":1244632,"ip_address":"","ucode":"457C6D50C9BF62","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/d8/8dcb1d84.jpg","comment_is_top":false,"comment_ctime":1575185279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575185279","product_id":100017301,"comment_content":"2^1*2^2*2^3.......2^k*2^x=n<br>为啥不是2^(1+2+3+..x)=n 而是 2^x=n?","like_count":0},{"had_liked":false,"id":157381,"user_name":"Mr.zhao","can_delete":false,"product_type":"c1","uid":1763032,"ip_address":"","ucode":"C48662FBC4A433","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e6/d8/1a584267.jpg","comment_is_top":false,"comment_ctime":1575126708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575126708","product_id":100017301,"comment_content":"最后一张图的O（nlogn）曲线是不是应该随着n的增大而越来越趋于和线性平行？","like_count":0},{"had_liked":false,"id":157283,"user_name":"俗人or诗","can_delete":false,"product_type":"c1","uid":1357122,"ip_address":"","ucode":"C23CCA8B5BE8A8","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/42/21ed2f7b.jpg","comment_is_top":false,"comment_ctime":1575102605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575102605","product_id":100017301,"comment_content":"1、性能测试和算法的时间空间复杂度可以说是两个不同阶段的操作，时间和空间负责度分析是对整个代码执行前执行效率和占用空间的粗估，能很好的反映代码的普适性；而性能测试则是特定环境的一个评估，取决当前的运行环境，两者结合起来能很好的反映代码的执行效率。<br>2、我个人觉得是有必要的，能有助提高自己的写高质量代码的意识和能力。","like_count":0},{"had_liked":false,"id":157180,"user_name":"一条桥","can_delete":false,"product_type":"c1","uid":1472617,"ip_address":"","ucode":"B39AF57E9D792B","user_header":"https://static001.geekbang.org/account/avatar/00/16/78/69/809f9cf1.jpg","comment_is_top":false,"comment_ctime":1575074385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575074385","product_id":100017301,"comment_content":"I &lt; n; n++ 这行本身不应该算2n吗？","like_count":0},{"had_liked":false,"id":156883,"user_name":"laughter","can_delete":false,"product_type":"c1","uid":1123841,"ip_address":"","ucode":"DC57BFCE018D9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/26/01/b2d69332.jpg","comment_is_top":false,"comment_ctime":1574991725,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574991725","product_id":100017301,"comment_content":"所有基于实际场景的测试都是依赖于宿主平台的，而复杂度分析是纯粹的理论模型，与宿主平台无关，可以让我们对算法的性能有一个宏观的了解。","like_count":0},{"had_liked":false,"id":156786,"user_name":"linnchord","can_delete":false,"product_type":"c1","uid":1009939,"ip_address":"","ucode":"E0573F18512276","user_header":"https://static001.geekbang.org/account/avatar/00/0f/69/13/43a2e4ae.jpg","comment_is_top":false,"comment_ctime":1574955913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574955913","product_id":100017301,"comment_content":"性能测试和算法复杂度分析不是一个维度的问题。<br>从程序性能的角度来讲，关联因素很多，算法复杂度只是其中之一，两者不存在冲突或替代。<br>从开发角度来讲，理解算法复杂度的逻辑，思考之、明辨之，在长期实践中培养出敏感直觉，才能高效率的开发出性能优异的程序。这是一个优秀开发者的必由之路。","like_count":0},{"had_liked":false,"id":156782,"user_name":"小遥子","can_delete":false,"product_type":"c1","uid":1754666,"ip_address":"","ucode":"E2CCF654F4F9D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c6/2a/e6281f10.jpg","comment_is_top":false,"comment_ctime":1574954390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574954390","product_id":100017301,"comment_content":"我认为并非多此一举。<br>性能测试和时间复杂度分析可以认为是从不同的维度去看待程序所运行的时间消耗的。性能测试是从实际场景出发，它是具体的，确定的，而时间复杂度分析是抽象的，动态的，不依赖具体平台，同时它又是简洁方便的。","like_count":0},{"had_liked":false,"id":156677,"user_name":"小小光芒","can_delete":false,"product_type":"c1","uid":1153185,"ip_address":"","ucode":"6C5499046BD29D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDeGrMY3icloJ5hKK49NaHfZTeEJJicBh5GNEibRjw2PsYpvUylEmxxXh475ANZicwDtBvRXl3yv1Z9Og/132","comment_is_top":false,"comment_ctime":1574934364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574934364","product_id":100017301,"comment_content":"“渐进” 有逐渐深入的意思。查了下wiki上的英文解释，asymptotic behavior，因此是不是渐近 更合理一些","like_count":0},{"had_liked":false,"id":156668,"user_name":"疯狂的五花肉","can_delete":false,"product_type":"c1","uid":1642465,"ip_address":"","ucode":"B3CE22B3245EB3","user_header":"https://static001.geekbang.org/account/avatar/00/19/0f/e1/26632e59.jpg","comment_is_top":false,"comment_ctime":1574933272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574933272","product_id":100017301,"comment_content":"<br> int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br><br>第一个例子，第四行for循环不是执行了两句代码吗？为啥不是3n+2","like_count":0},{"had_liked":false,"id":156599,"user_name":"王同学","can_delete":false,"product_type":"c1","uid":1336525,"ip_address":"","ucode":"F1D9F19366F1AE","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/cd/59d9fb36.jpg","comment_is_top":false,"comment_ctime":1574920621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574920621","product_id":100017301,"comment_content":"学习新知识的过程：<br><br>看山是山，看水是水。<br>看山不是山，看水不是水。<br>看山依然是山，看水依然是水。<br><br>目前处于第一阶段^_^","like_count":0},{"had_liked":false,"id":156555,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1574911149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574911149","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":156460,"user_name":"traveling","can_delete":false,"product_type":"c1","uid":1238800,"ip_address":"","ucode":"A325458B2934C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/10/3ad7d556.jpg","comment_is_top":false,"comment_ctime":1574893859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574893859","product_id":100017301,"comment_content":"学了这一章，我受益匪浅，一下子明白了常用算法的时间、空间复杂度是怎么来的了。感谢作者的分享！！！我要推荐更多的朋友来学习。","like_count":0},{"had_liked":false,"id":156295,"user_name":"Geek_6d7236","can_delete":false,"product_type":"c1","uid":1690691,"ip_address":"","ucode":"52D9F071E16500","user_header":"","comment_is_top":false,"comment_ctime":1574851975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574851975","product_id":100017301,"comment_content":"受益匪浅，我觉得在写代码时候复杂度分析需要的，这样可以帮助自己对自己的代码有个预先的评估。","like_count":0},{"had_liked":false,"id":156264,"user_name":"乌迪","can_delete":false,"product_type":"c1","uid":1354821,"ip_address":"","ucode":"64285EEF16DE3E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/45/15bf9c2b.jpg","comment_is_top":false,"comment_ctime":1574845383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574845383","product_id":100017301,"comment_content":"第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，<br><br>这里写错了吧 第5行开始才执行n遍","like_count":0},{"had_liked":false,"id":156218,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574838586,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574838586","product_id":100017301,"comment_content":"这里的项目之前，应该指项目上线之前吧，先做性能测试，目的是直观检查预期的数据规模，项目的具体执行时间。<br>相当于完成的第一个测试关卡，可以满足当前数据规模需求。<br>再进行代码的时间复杂度、空间复杂度的分析，为了知道未来能够在什么样的数据规模下，有什么样的性能，一方面给自己<br>一个预期参考，让自己有所准备；另一方面，就是可以知道哪里是最需要优化的地方。<br><br>每行代码都分析一下，我的理解是不浪费时间，像普通的常数阶代码，一眼就能看出来，很容易就分析出来，占用不了太多时间，而如果少分析一条代码，可能就会导致性能问题迟迟找不到。","like_count":0},{"had_liked":false,"id":156062,"user_name":"daydream","can_delete":false,"product_type":"c1","uid":1090891,"ip_address":"","ucode":"E9CA4CD9E6C611","user_header":"https://static001.geekbang.org/account/avatar/00/10/a5/4b/0e2f6910.jpg","comment_is_top":false,"comment_ctime":1574816426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574816426","product_id":100017301,"comment_content":"大O复杂度表示法讲得浅显易懂，笔者功底深厚。我记得大学那会听这课的第一次是一脸懵逼，听完后也是只可意会不可言传那种。赞！","like_count":0},{"had_liked":false,"id":155953,"user_name":"坂田吴奇隆","can_delete":false,"product_type":"c1","uid":1368514,"ip_address":"","ucode":"31C5AC3AA224C3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/OMoibCRFCgbFZicXf1ayvT0l8IOJXmXTosx2xepWSicXwAeHjBHribNHLEVcexLe3P5Os6ImDyHW3seZuxeaSicKAmg/132","comment_is_top":false,"comment_ctime":1574781865,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1574781865","product_id":100017301,"comment_content":"复杂度分析可以不受环境影响，定性的分析一个算法的规模，在做性能测试之前有个大概的摸底，是很有必要的。","like_count":0},{"had_liked":false,"id":155947,"user_name":"zzx010101","can_delete":false,"product_type":"c1","uid":1083468,"ip_address":"","ucode":"7D4F7F218E3CD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/4c/7d35f6d2.jpg","comment_is_top":false,"comment_ctime":1574781303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574781303","product_id":100017301,"comment_content":"时间复杂度看了两遍，第一遍听了一下，看着后面的章节每天都有涉及到复杂度，就又回来学了一遍，没看一遍收获就很多，难道我和大佬们差距太大了😂 ","like_count":0},{"had_liked":false,"id":155936,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1574780233,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1574780233","product_id":100017301,"comment_content":"之前读研究生的时候，接触过复杂度分析，虽然做不到孰能生巧，但是基本的概念还是有的，缺乏的就是更多的练习。<br><br>另外，不得不正视的，就是我自己在对数部分的数学知识还没有完全掌握，所以在时间复杂度涉及到对数的时候，有点不自信。<br><br>我觉得复杂度分析当然不是浪费时间，这个在专栏文章中已经讲得很清楚了。一方面在熟练之后，应该可以很快的识别出来，另一方面，如果真的遇到需要仔细分析的问题，那么一定会有其价值。<br><br>复杂度分析应该是程序员素质养成的一部分。","like_count":0},{"had_liked":false,"id":155927,"user_name":"luwei","can_delete":false,"product_type":"c1","uid":1365541,"ip_address":"","ucode":"0960A09F7B8D59","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/25/a95a2064.jpg","comment_is_top":false,"comment_ctime":1574779622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574779622","product_id":100017301,"comment_content":"工作中一般很少去进行复杂度分析，也没有必要，通常都是出了性能问题才去优化。我觉得复杂度分析最主要的还是提升程序员自身的能力，当非常熟悉复杂度分析之后，就能有效的提升我们的代码质量。","like_count":0},{"had_liked":false,"id":155919,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1574778540,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574778540","product_id":100017301,"comment_content":"1.为什么要进行复杂度分析？<br>1.1 直接代码测试结果容易受测试环境影响，cpu使用高低，内存大小等等。<br>1.2 容易收到数据规模的影响，除非完全相同的数据集，但是那样又反应不了性能。<br>1.3 脱离环境的影响，假设每行代码执行时间一样，用代码执行的次数来代表代码执行时间，他们属于正相关的关系，加上数据规模这个变量，就是我们的大O表示法。这样我们可以它的性能，最差多少，最好多少，有一个更精确的度量标准，而且这个标准对于我们所有人来说是统一的。<br><br>2.时间复杂度的技巧：<br>2.1 常量，常数不用管.<br>2.2 加法原则：总复杂度等于代码中最大的时间复杂度. <br>2.3 乘法法则：嵌套代码的复杂度等于嵌套代码内外的乘积。<br>2.4 多个数据规模，也就是变量变成了多个，加法原则或乘法原则，多个变量加法乘法，跟上面有所区分，上面是一个变量。<br><br>3.空间复杂度：<br>之前有一个认知，我们很大程度上不用考虑空间复杂度，因为现在空间很便宜，不知道这个认知是否正确？<br><br>疑惑点：<br>1.空间复杂度的认知是否正确？<br>2.双层for循环嵌套很好理解，第一层for循环执行一次，第二层for循环执行n次，所以为n的平方，但是老师的例子，for循环内加函数时，就如n=1，第一个for循环执行2次，但是函数里面的for循环里面代码未执行，还是说这个可以像常数一样忽略，这个需要自己琢磨一下。<br>3.讲解logn时，执行代码次数最多的，第二行while判断和第三行i的乘积，他们两个的执行次数不是一样的吗，还是我对while的理解有偏差。<br>4.之前学习数据结构时，也有这样的困惑，感觉脑子里推理不出来全过程，就越来越烦躁，甚至学不进去，特别是递归，而且感觉经常地慢慢地将自己绕进去了，老师，<br>这个有什么办法可以克服一下吗？自己在纸上演算代码执行结果吗？<br><br>课后思考：性能测试只是反应当前的性能，受影响因素较多，复杂度分析可以评估它未来的性能，并不局限于当前。<br>另外，我觉得复杂度分析应在性能测试之前，可以更大程度地保证性能，如果复杂度高，更需要改进。 另对性能测试问题的排查也是一个使用，如性能测试与复杂度分析相悖，可以找一下原因。<br>","like_count":0,"discussions":[{"author":{"id":1713935,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","nickname":"捕风捉影","note":"","ucode":"E7F75B2521C8CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64382,"discussion_content":"疑惑3.跟2的答案基本相似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574946953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1713935,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","nickname":"捕风捉影","note":"","ucode":"E7F75B2521C8CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64377,"discussion_content":"疑惑2.for语句，while语句只是控制循环的开关，不需要在意，另他不属于有效代码，而且，时间复杂度只是一个趋势大致预测，并不代表真正的代码执行时间，所以没必要按照代码每次执行时间详细去算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574946924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155914,"user_name":"Lee Chen","can_delete":false,"product_type":"c1","uid":1220486,"ip_address":"","ucode":"F04F73B6AD656C","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/86/624fd145.jpg","comment_is_top":false,"comment_ctime":1574778142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574778142","product_id":100017301,"comment_content":"我觉得要理解时间复杂度的对比，首先要理解无穷大的概念。我们通常都会认为，无穷大是指一个非常非常大的数，但实际上无穷大指的是向着无穷大的一个增长趋势。<br>因此两个无穷大之间，其实是可以对比“大小”的，它们之间对比的其实是二者向无穷大的增长趋势快慢。<br>也就是专栏末尾的坐标轴图，O(logn)、O(n)、O(nlogn)、O(n2)几个曲线的真正含义。<br><br>请问老师，O(2n) 和 O(n!)，也就是NP（Non-Deterministic Polynomial，非确定多项式）问题的时间复杂度，可以认为是远大于其他的时间复杂度吗？<br>另外，O(2n) 和 O(n!)之间的复杂度对比情况如何呢？","like_count":0},{"had_liked":false,"id":155830,"user_name":"yrion","can_delete":false,"product_type":"c1","uid":1140304,"ip_address":"","ucode":"1236AA1D62E277","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/50/5e319b55.jpg","comment_is_top":false,"comment_ctime":1574763196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574763196","product_id":100017301,"comment_content":"不提前预判性能，写出来的代码像坨屎，留给以后的自己咽么？","like_count":0},{"had_liked":false,"id":155769,"user_name":"小呀嘛小二郎","can_delete":false,"product_type":"c1","uid":1212692,"ip_address":"","ucode":"A6FD82C71D3154","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/14/f5f71b6e.jpg","comment_is_top":false,"comment_ctime":1574753130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574753130","product_id":100017301,"comment_content":"刚刚迈出第一步，理解了时间复杂度跟空间复杂度的作用，能够独立看出自己代码的复杂度，只是具体的一些应用还是不太理解，比如我一段代码写好了，也知道了它的复杂度是多少，那么我如果去优化以及重构呢，继续看下去，下回分解","like_count":0},{"had_liked":false,"id":155620,"user_name":"莫问流年","can_delete":false,"product_type":"c1","uid":1249663,"ip_address":"","ucode":"23140E031AED4B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/7f/80d56c1c.jpg","comment_is_top":false,"comment_ctime":1574729525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574729525","product_id":100017301,"comment_content":"性能测试属于事后分析，测试结果也与当时的硬件环境、数据规模有关，如果测试结果不好即代表造成了一定的编码损失和实际损失。而时间、空间复杂度分析则没有以上问题，此外掌握了这种思维也有助于开发者去编写更加高效的代码。","like_count":0},{"had_liked":false,"id":155606,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1574728276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574728276","product_id":100017301,"comment_content":"时间、空间复杂度分析<br>大o复杂度表示法是时间复杂度分析方法；<br>T(n)代表代码质细腻时间，f(n)代表每行代码执行的次数总和，两者成正比，<br>低阶、常数、系数在无穷大时可以忽略不计；<br>时间复杂度全称是渐进时间复杂度，表示算法的执行时间和数据规模之间的增长关系，空间<br>复杂度全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系；<br>最后有个疑问，多相式量级和非多项式量级两个概念有点不清晰。。","like_count":0},{"had_liked":false,"id":155579,"user_name":"chenhz","can_delete":false,"product_type":"c1","uid":1078160,"ip_address":"","ucode":"485420EA3282D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/90/9118f46d.jpg","comment_is_top":false,"comment_ctime":1574705633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574705633","product_id":100017301,"comment_content":"当然不是多此一举：<br>1.性能测试不能真实模拟生产环境；<br>2.生产环境的数据量可能比性能测试还要大；<br>3.保持做时间和空间复杂度分析有助于提升我们编码能提高我们对数据结构选择的敏感度，提升代码质量","like_count":0},{"had_liked":false,"id":155555,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1574697404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574697404","product_id":100017301,"comment_content":"时间复杂度、空间复杂度的分析是在写代码之前进行的或者是为了优化代码性能进行的，学习了解了复杂度分析，能让我们在写代码时尽可能的使用低复杂度的代码完成开发","like_count":0},{"had_liked":false,"id":155550,"user_name":"W@W","can_delete":false,"product_type":"c1","uid":1027044,"ip_address":"","ucode":"F4FE72AE29B853","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/e4/5e11817f.jpg","comment_is_top":false,"comment_ctime":1574697137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574697137","product_id":100017301,"comment_content":"做代码的时间复杂度、空间复杂度分析，肯定不能说是多此一举，这和性能测试不是同一级别的事情，甚至可以说代码层面的性能优化才是基础，这方面做好了，那么整体的性能测试会更好。每段代码都分析时间复杂度、空间复杂度也不是浪费时间，在硬件性能足够好切不需要考虑时确实可以不去分析，但如果通过分析来优化代码的话是更有意义的提高，可以降低不必要的硬件成本，或者能够提前预知多大数据量会对硬件产生进一步的要求，更加合理地利用资源。而且本身其实也不需要每次都去分析复杂度，因为掌握这些分析方法和代码技巧之后，考虑复杂度应该是一种习惯，而不是一种检查手段。","like_count":0},{"had_liked":false,"id":155495,"user_name":"just do it","can_delete":false,"product_type":"c1","uid":1296938,"ip_address":"","ucode":"003237670B6888","user_header":"https://static001.geekbang.org/account/avatar/00/13/ca/2a/8a6d1ca3.jpg","comment_is_top":false,"comment_ctime":1574692790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574692790","product_id":100017301,"comment_content":"时间复杂度由程序中循环、递归等非常量数决定，一次循环的复杂度为O(n),双重循环为O(n*n)，以此类推，空间复杂度取决于定义的存储空间与数据规模的关系","like_count":0},{"had_liked":false,"id":155464,"user_name":"克","can_delete":false,"product_type":"c1","uid":1069206,"ip_address":"","ucode":"6DDFBB05E0F4E9","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","comment_is_top":false,"comment_ctime":1574691015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574691015","product_id":100017301,"comment_content":"复杂度分析很必要。首先性能测试是事后观测，而复杂度分析是事先衡量，二者有本质区别。复杂度分析对执行的代码效率和空间占用提供了一个科学的量化标准，而且是抛开其他资源因素的，让我们能够直接衡量代码效率的高低，占用空间的优略。第三，有了复杂度分析我们优化程序就能够有的放矢，不至于无从下手。<br>另外，性能测试是提供了在某个资源限定的场景下，执行代码的量化指标。能够让我们了解在模拟场景下，程序的实际执行情况。因此性能测试同样，有用。<br>综上，二者作用场景不同，针对问题不同。而且二者都有意义。","like_count":0},{"had_liked":false,"id":155451,"user_name":"安琪拉的博客","can_delete":false,"product_type":"c1","uid":1075562,"ip_address":"","ucode":"A37AE31D819567","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/6a/50f1c874.jpg","comment_is_top":false,"comment_ctime":1574690186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574690186","product_id":100017301,"comment_content":"时间复杂度和空间复杂度是算法的非常重要的衡量指标，这一课第二次学，温故知新，快速排序时间复杂度还是O(nlogn), O(log3n) 也可以算作O(log2n).","like_count":0},{"had_liked":false,"id":155439,"user_name":"Geek_7d97ca","can_delete":false,"product_type":"c1","uid":1756030,"ip_address":"","ucode":"002170F74F76F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMR8PF1W7ITNbGXU8iaeAribkIfqr7aEj9Jj4m4dhZ4sy5nOEBO8v97uxxtuV1YlBphDw1DmoZicqfw/132","comment_is_top":false,"comment_ctime":1574689174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574689174","product_id":100017301,"comment_content":"day 01 复杂度分析（上）<br>学习了我们为什么要去分析代码的时间空间复杂度，对于文末提出的思考题我认为，即使有性能测试存在，平日对于复杂度的分析有助于代码的优化，即使在硬件环境最差的情况也保证最优的代码，比如在一台高配机器上，我们性能测试的结果可以接受，但是到了低配机器上却不尽人意，如果保持了复杂度的分析优化，那么低配机器上可能会得到最好的性能，可能二者差异不会很大，数据量导致的差异也是如此，所以对代码上的分析也是有益的<br>知识点：<br>1.时间复杂度和代码的运行次数成正比<br>2.关心于最大的量级，低阶，系数，常量在复杂度的公式上可以忽略<br>3.加法法则  总复杂度等于量级最大的那段代码的复杂度<br>但是若是两组数据，则不遵循此法则，总复杂度等于两组数据复杂度相加 例：O(m+n)<br>4. 乘法法则  嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>空间复杂度常见O(1) O(n) O(n^2)","like_count":0},{"had_liked":false,"id":155405,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1143372,"ip_address":"","ucode":"335960F683C23C","user_header":"https://static001.geekbang.org/account/avatar/00/11/72/4c/4d636a23.jpg","comment_is_top":false,"comment_ctime":1574685829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574685829","product_id":100017301,"comment_content":"提前分析出算法的时间和空间复杂度，并不浪费时间，理由有如下三点：<br>1. 性能测试是事后验证，并不能提前预知，若性能有问题，重新返工，耗时更多<br>2. 性能测试只是一个参考，有一定的环境和时间约束，只能做数据量适当的测试，当数据量非常大时，机器资源也无法满足<br>3. 分析一个算法的时间和空间复杂度，更适合对业务的未来的数据增长预期","like_count":0},{"had_liked":false,"id":155404,"user_name":"Geek rick","can_delete":false,"product_type":"c1","uid":1754279,"ip_address":"","ucode":"1A9216B2A47E92","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/QlHaicGZOD7c68A6gHC5dGuukQ4VJtVpGCeHHc8ANvHxQ8K9GibVwLHQVURQeWGed8yOWcMqKDnibaSd7S6Y4WKSQ/132","comment_is_top":false,"comment_ctime":1574685783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574685783","product_id":100017301,"comment_content":"不积硅步无以至千里, 每个小地方的节省, 到最后就会产生质变, 就像每个知名框架, 每个版本的更新, 都会有相应的底层算法优化, 让速度更快, 软件是一个活着的工程, 需要时刻想着怎么优化, 并不是写完就扔在一边不管了.","like_count":0},{"had_liked":false,"id":155403,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1574685629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574685629","product_id":100017301,"comment_content":"打卡Day1：<br>* 日期：2019年11月25日<br>* 是什么：复杂度分析：可以不用测试数据测试，就可以粗略的估计算法执行效率的方法，用大O来表示复杂度<br>* 为什么：<br>    * 指标：执行效率是衡量算法非常重要的考量指标，有一个提前衡量的指标会事半功倍<br>    * 高效：在实际应用场景中，可以提前使用时间和空间复杂度做分析，而且测试的话依赖测试环境、数据规模，复杂度分析能节省很多测试试验的时间； <br>    * 选择：时间和空间的复杂度分析，可以培养在工程场景中的选择能力，是选择时间还是空间。 <br>* 怎么做：<br>    * 时间复杂度分析：<br>        * 关注循环次数最多的一段代码，判断执行的时间 <br>        * 加法法则：代码整理的时间复杂度，由量级最大的确定 <br>        * 乘法法则：嵌套代码的复杂度，为嵌套内外代码复杂度的乘积 <br>    * 空间复杂度分析 <br>        * 由代码申请的内存空间确定 <br>* 与项目管理怎么结合<br>    * 数据：项目管理最终呈现的结果，需要在价值、质量、效率、能力等方面找出适合项目的数据； <br>    * 风险：项目管理通过启动会、评审、规划等环节，提前暴露项目推进的风险点，为项目成功打下基础； <br>    * 范围：在做项目前明确重点是进度还是质量，可以在必要的时候做出牺牲。  <br>项目管理的关注点：暴露风险、合理的选择、透明数据 ","like_count":0},{"had_liked":false,"id":155397,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1574685141,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1574685141","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":155253,"user_name":"陀螺","can_delete":false,"product_type":"c1","uid":1058808,"ip_address":"","ucode":"5016747DD39102","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f8/1388139d.jpg","comment_is_top":false,"comment_ctime":1574671843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574671843","product_id":100017301,"comment_content":"时间复杂度与空间复杂度是对代码性能前置评测，也是对于代码可行性的评估","like_count":0},{"had_liked":false,"id":155240,"user_name":"是梦云小小w呀","can_delete":false,"product_type":"c1","uid":1730423,"ip_address":"","ucode":"E37DC97FA59412","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/77/1ad2ff4b.jpg","comment_is_top":false,"comment_ctime":1574670547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574670547","product_id":100017301,"comment_content":"不觉得多此一举，在日常开发中，我们应该对自己要求严格，而不应该处于“能用就行”、“又不是不能用”的状态，我们也需要写出高质量的代码，这样才会进步！","like_count":0},{"had_liked":false,"id":155108,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1574646843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574646843","product_id":100017301,"comment_content":"性能测试和复杂度分析我认为并不冲突，他们应该是相互独立，相辅相成的，性能测试通过实践环境去分析有助于定位复杂度相对高的具体代码段，复杂度分析通过理论分析有助于针对性测试","like_count":0},{"had_liked":false,"id":155052,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1574641610,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574641610","product_id":100017301,"comment_content":"1，复杂度分析：时间，空间复杂度分析<br><br>2，为什需要复杂度分析<br>\t通过执行代码，分析结果的事后统计法有很多局限，如测试结果非常测试环境，受数据规模的影响很大。所以，需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。<br><br>3，表示方法：大O复杂度表示法<br>\t大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity）简称时间复杂度。<br><br>4，分析规则：<br>\t（1）单段代码看高频：如循环<br>\t（2）多段代码取最大：如代码中有单循环和多重循环，则取多重循环的复杂度。<br>\t（3）嵌套代码求乘积：如递归，多重循环。<br>\t（4）多个规模求加法：如方法有两个参数控制两个循环的次数，则去两者复杂度相加。<br><br>分析方法：有三个比较实用的方法<br>\t（1）只关注循环执行次数最多的那一段代码。<br>\t（2）加法法则：总复杂度等于量级最大的那段代码的复杂度。<br>\t（3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>5，时间复杂度：<br>时间复杂度的全称是渐进时间复杂度，表示算法的执行时间和数据规模之间的增长关系。<br>5.1，分类<br>\t\t（1）常见时间复杂度：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)<br>\t（2）复杂度量级可以分为两类：多项式量级和非多项式量级。其中O(2^n)，O(n!)为多项式量级<br>\t（3）非多项式量级的算法问题叫做NP(Non-Deterministic Polynomial，非确定多项式)问题。<br><br>5.2，多项时间复杂度<br>\t\t（1）O(1)：一般情况下，只要算法中不存在循环语句，递归语句，即使有成千上万行的代码，其时间复杂度也是O(1)<br>\t\t（2）O(logn)，O(nlogn)：不管以什么数为底，所有对数阶的时间复杂度都记为O(logn)。<br>\t\t（3）O(m+n)，O(m*n)：代码的复杂度由两个数据的规模来决定，无法事先<br><br>7，空间复杂度分析<br>\t空间复杂全称是：渐进时间复杂度，表示算法的存储空间与数据规模之间的增长关系。<br>\t常见的空间复杂度就是O(1),O(n),O(n^2)<br>\t<br>","like_count":0},{"had_liked":false,"id":155021,"user_name":"刘丶小备","can_delete":false,"product_type":"c1","uid":1102106,"ip_address":"","ucode":"F4D5EF592B7030","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/1a/3564c9da.jpg","comment_is_top":false,"comment_ctime":1574637301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574637301","product_id":100017301,"comment_content":"这种情况还是要视公司来定，当公司规模较小时，更注重业务的扩展，对于代码的review和代码规范，以及测试规范等，相应的都会降低标准。当公司高速发展了，业务相对稳定了，这时技术的价值就体现了，那项目的性能测试，以及代码的时间复杂度、空间复杂度分析就很必要了。因为这时流量大了，数据也多了。","like_count":0},{"had_liked":false,"id":154987,"user_name":"kings","can_delete":false,"product_type":"c1","uid":1211359,"ip_address":"","ucode":"D478306EBF582E","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","comment_is_top":false,"comment_ctime":1574610497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574610497","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":154949,"user_name":"永光","can_delete":false,"product_type":"c1","uid":1102702,"ip_address":"","ucode":"0C54531ABED1B0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/6e/281b85aa.jpg","comment_is_top":false,"comment_ctime":1574603766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574603766","product_id":100017301,"comment_content":"时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":154943,"user_name":"爱的天空","can_delete":false,"product_type":"c1","uid":1180695,"ip_address":"","ucode":"154231ACD08907","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/17/d49cbc5a.jpg","comment_is_top":false,"comment_ctime":1574601492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574601492","product_id":100017301,"comment_content":"时间复杂度分析挺重要，编写代码的时候不注意，等到产品性能测试的时候，如果性能不达标，再回头找代码中的性能问题反而更麻烦，也不容易定位。以前就在项目中吃过这种亏。感谢老师！ 二刷，对于时间复杂度分析理解又加深了。","like_count":0},{"had_liked":false,"id":154935,"user_name":"happychap","can_delete":false,"product_type":"c1","uid":1388033,"ip_address":"","ucode":"C872B959BF2F3D","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/01/14a478bb.jpg","comment_is_top":false,"comment_ctime":1574599895,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574599895","product_id":100017301,"comment_content":"复杂度分析并不能取代性能测试，因为复杂度分析出来的结果仅代表的复杂度的趋势，并没有与实际的代码运行效率和运行次数绑定的，因此，相同的时间复杂度，其性能测试出来的结果有可能会差异很大。<br>int result = 0;<br>for ( i = 0; i &lt; n; i++ ) <br>{ result = result + i; }<br>与<br>int result = 0;<br>for ( i = 0; i &lt; n; i++ ) <br>{ result = result * i; }<br>虽然他们的时间复杂度都是O(n)，但实际测试的结果，后者消耗的时间会比前者小的。","like_count":0},{"had_liked":false,"id":154918,"user_name":"Geek_1c9f7c","can_delete":false,"product_type":"c1","uid":1110419,"ip_address":"","ucode":"9A5611F231C474","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKic4Sia2vW3FdODLrSLzGEXqq2s6wRywMXSWHNdPY9Ge1ecW57pQ29dXRMSSl6aYLpv2uXH2U3Nliaw/132","comment_is_top":false,"comment_ctime":1574596325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574596325","product_id":100017301,"comment_content":"本质上哈 非复杂系统 或 online serving 。胡乱写也没啥<br><br>时间就是延迟敏感<br>空间就是内存敏感<br><br>时间中的常数 某些情况下更可怕。例如go的hashmap，有一个O(8)的常数","like_count":0},{"had_liked":false,"id":154757,"user_name":"huyang0726","can_delete":false,"product_type":"c1","uid":1096323,"ip_address":"","ucode":"A492E17F4FECED","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7cGkn99Jc25DlKNhuUKDa94hDPbOuPk7lb0Tg4bcjquzOp0pqNR7LHFNhy8YZKOEudpEOl19ibSw/132","comment_is_top":false,"comment_ctime":1574554165,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574554165","product_id":100017301,"comment_content":"不认为多此一举和浪费时间，1、能锻炼我们的思考能力和思维逻辑<br>2、能锻炼我们写出高效、优秀代码<br>3、使我们养成在写代码的过程中时刻性能，程序稳定的良好习惯。","like_count":0},{"had_liked":false,"id":154694,"user_name":"Axx","can_delete":false,"product_type":"c1","uid":1756202,"ip_address":"","ucode":"1B3A879E31EADE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cc/2a/dacb490c.jpg","comment_is_top":false,"comment_ctime":1574513861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574513861","product_id":100017301,"comment_content":"感谢老师，以前学复杂度套着背，比如一层循环是O（n），两层就是O（n∧2），看了老师的讲解知道了为啥要这么算，老师分析的很清楚，一步步看能看懂","like_count":0},{"had_liked":false,"id":154650,"user_name":"枫叶风飞","can_delete":false,"product_type":"c1","uid":1459128,"ip_address":"","ucode":"61EA8DFD16144D","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/b8/7378bb67.jpg","comment_is_top":false,"comment_ctime":1574499605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574499605","product_id":100017301,"comment_content":"工作中的算法都是O(1)的，晕哦","like_count":0},{"had_liked":false,"id":154598,"user_name":"kings","can_delete":false,"product_type":"c1","uid":1211359,"ip_address":"","ucode":"D478306EBF582E","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","comment_is_top":false,"comment_ctime":1574489448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574489448","product_id":100017301,"comment_content":"王争老师的课讲的很生动易理解，立个flag💁‍♂️","like_count":0},{"had_liked":false,"id":154478,"user_name":"啵啵","can_delete":false,"product_type":"c1","uid":1118843,"ip_address":"","ucode":"627A3E72DBFF79","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/7b/5da66a2f.jpg","comment_is_top":false,"comment_ctime":1574438857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574438857","product_id":100017301,"comment_content":"其实复杂度核心是假设数据量无限大的时候对应的消耗。而无限大在数学中其实是对趋势的一种描述。这种趋势其实就是图中的斜率。","like_count":0},{"had_liked":false,"id":154426,"user_name":"Gyro","can_delete":false,"product_type":"c1","uid":1035769,"ip_address":"","ucode":"5E34622D408091","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/f9/64acc113.jpg","comment_is_top":false,"comment_ctime":1574427489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574427489","product_id":100017301,"comment_content":"糟糕！我的高中数学有效期只到高考结束！！！","like_count":0},{"had_liked":false,"id":154395,"user_name":"Rickieslove","can_delete":false,"product_type":"c1","uid":1751095,"ip_address":"","ucode":"47A1A53F2E1FAE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/37/d22456d5.jpg","comment_is_top":false,"comment_ctime":1574422444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574422444","product_id":100017301,"comment_content":"时间&#47;空间复杂度分析，就是在分析数据增长的速度分别对时间&#47;空间带来的影响吧？从时间上来看，实现同一个逻辑的不同代码，在数据规模不断增大的过程中，运行的时间差距可能越来越大，所以这应该是一种趋势的分析，在理论上对代码效率的评估，实践出真知！性能测试是具体问题具体分析，行还是不行，走两步试试~~~但是！提前分析下还是很有必要的，不然做性能测试有可能做到人类灭亡。。。","like_count":0},{"had_liked":false,"id":154335,"user_name":"Hello world","can_delete":false,"product_type":"c1","uid":1037898,"ip_address":"","ucode":"D4C8AEAB9E0A67","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/4a/1281a36d.jpg","comment_is_top":false,"comment_ctime":1574411045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574411045","product_id":100017301,"comment_content":"我第五个例子还是不太能理解，它两个函数不是分开了吗，怎么是嵌套函数了？有大佬能指点一下吗？","like_count":0},{"had_liked":false,"id":154331,"user_name":"along","can_delete":false,"product_type":"c1","uid":1118419,"ip_address":"","ucode":"0F44495219E0BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/d3/157068af.jpg","comment_is_top":false,"comment_ctime":1574410605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574410605","product_id":100017301,"comment_content":"两个不用的维度<br>1.复杂度分析是对于，代码编写的一种最优解题思路，主要目的在于数值增长导致，时间、空间的增长方式。就好比Linux page 内存管理。<br>2.性能测试更多的关注是，当下的架构体系是否合理，物理硬件配置是否合适。<br>以上是我个人的理解。","like_count":0},{"had_liked":false,"id":154303,"user_name":"arronK","can_delete":false,"product_type":"c1","uid":1192961,"ip_address":"","ucode":"58DC6FBF2CF0C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/01/30ca98e6.jpg","comment_is_top":false,"comment_ctime":1574406868,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574406868","product_id":100017301,"comment_content":"回答问题：<br>做了性能测试，也并不能保证所有情况下都正常。毕竟一个算法的执行效率仍然是受到执行环境和数据规模大小的影响的，通过了一次性能测试并不能保证就万事大吉。<br>用时间复杂度和空间复杂的方式来分析，能从理论上去找到一个算法随着数据规模的增长变化的执行“上界“，这个界限才能让我们清楚我们的代码在不确定运行环境和数据规模的时候到底能适应到哪种程度。<br><br>个人总结：<br>关于时间复杂度分析。做好时间复杂度的分析更重要的是明白时间复杂度的本质是什么？那就是代码的执行时间在不考虑执行环境的情况下，随着输入规模的增长而增长的一个 &quot;趋势和上界&quot;。于是低阶、系数和常量这些对这个趋势和上界影响甚微的东西，为了简化问题，拿掉就行。<br>关于大O。维基百科查了一下，大O是渐进符号，表示的是一个数学函数的数量级的渐进上界。在这里就是要描述的就是随着问题规模n的增大，代码执行时间T(n)的渐进上界是f(n)，f(n)在这里就是表示的是这个上界和增长趋势。<br>关于时间复杂度。时间复杂度说白了就是代码的执行时间，只是我们这里并非需要的是具体的时间，而是对于任意的问题规模n，我们想知道随着它的变化，时间消耗会如何变化，这个变化的趋势和界限在哪儿。如果你画一张图以n为横轴，T为纵轴，画出f(n)的曲线，那么你就能对具体的某个n的值做出在那样的问题规模下执行时间的预判。<br><br>如果只能记住一点：复杂度分析是确定趋势和界限<br>","like_count":0},{"had_liked":false,"id":154234,"user_name":"Reina","can_delete":false,"product_type":"c1","uid":1367221,"ip_address":"","ucode":"AFF6C03FF07F4F","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/b5/7fd5f418.jpg","comment_is_top":false,"comment_ctime":1574394461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574394461","product_id":100017301,"comment_content":"分析算法效率要从时间和空间两个维度分析。<br>时间复杂度是看算法的执行时间与数据规模之间的增长关系。一般看最复杂的一段代码的复杂度，常见的只有O(1)、O(logn)、O(n)、O(nlogn)、O(n2)-也称为多项式量级， O(2n) 和 O（n!)为非多项量级，随着规模n的增大，执行时间急剧增加，是很少见的而且应该避开的低效算法。<br>空间复杂度是看算法的存储空间与数据规模之间的增长关系。相对简单，常见的空间复杂度就是 O(1)、O(n)、O(n2)<br>从这两点分析可以对算法的执行效率有个粗略的估算，一般不用做性能测试，其会受环境影响往往并不准确。如果复杂度过于复杂，警惕有坑，需要优化...<br>最后各个时间复杂度对比的图画错了...","like_count":0},{"had_liked":false,"id":154178,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574387892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574387892","product_id":100017301,"comment_content":"说实话上月看的时候还真没看太懂，这回遇到不懂的，暂停下来仔细看看，还是很好理解的，年纪大了，我理解能力不强了吗？听一遍不暂停，居然有些地方一遍听不明白。","like_count":0},{"had_liked":false,"id":153984,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1574342663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574342663","product_id":100017301,"comment_content":"打卡14：今天学习了03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？<br>学习了以下新内容：<br>1.事后统计分析：事后统计分析法不全面，依赖环境（包括机器、操作数据样本），得出的结果不准确。<br>2.大O时间复杂度表示法：表示执行时间随数据规模增长变化的趋势，即渐进时间复杂度。<br>3.时间复杂度分析：A.只关注循环次数最多的这一段代码；B.时间复杂度加法规则；C.时间复杂度乘法法则<br>4.渐进空间复杂度（asymptotic space complexity），表示算法使用的存储空间与数据规模之间的增长关系。<br>","like_count":0},{"had_liked":false,"id":153931,"user_name":"悟灿","can_delete":false,"product_type":"c1","uid":1751097,"ip_address":"","ucode":"B300DCB855F1E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/39/07605f59.jpg","comment_is_top":false,"comment_ctime":1574333677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574333677","product_id":100017301,"comment_content":"时间换空间，空间换时间。这要怎么理解","like_count":0},{"had_liked":false,"id":153921,"user_name":"悟灿","can_delete":false,"product_type":"c1","uid":1751097,"ip_address":"","ucode":"B300DCB855F1E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/39/07605f59.jpg","comment_is_top":false,"comment_ctime":1574330320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574330320","product_id":100017301,"comment_content":"当初为了应付数据结构的考试，还仔细学习了一番数据结构。现在听老师讲课，也轻松了不少","like_count":0},{"had_liked":false,"id":153889,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1574325957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574325957","product_id":100017301,"comment_content":"Q: 我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？<br>A: 不是多此一举，因为测试和宿主环境有很大影响，复杂度分析更加直观和准确<br>Q: 每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br>A: 大部分业务代码复杂度比较低，对于复杂度比较高的部分，编码的时候就要警觉，可以后续重点分析","like_count":0},{"had_liked":false,"id":153856,"user_name":"Geek_Leet","can_delete":false,"product_type":"c1","uid":1667555,"ip_address":"","ucode":"826DCE46D9E1D8","user_header":"https://static001.geekbang.org/account/avatar/00/19/71/e3/48f85e95.jpg","comment_is_top":false,"comment_ctime":1574320044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574320044","product_id":100017301,"comment_content":"知道代码的时间和控件复杂度，可以很粗略的估算到自己写代码需要占用多少的资源，可以根据复杂度来优化自己的代码","like_count":0},{"had_liked":false,"id":153382,"user_name":"蟹肥","can_delete":false,"product_type":"c1","uid":1737493,"ip_address":"","ucode":"382B86651ED909","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rNMTN9E43LZ0dpb4s3ElcRnBYpic5zzrCXGvKdib7rDwSEEWto83gXgFFQWMWXQmUxodcKyNnhDK1yIjeiaR7Mz3A/132","comment_is_top":false,"comment_ctime":1574227049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574227049","product_id":100017301,"comment_content":"时间,空间的复杂度分析有其必要性,但不必过早做得详尽,属于重要但不紧急的工作<br>如果一开始花太多时间将可能错失进场时机<br>但如果永远不做将失去资料量成长超乎预期时的机会","like_count":0},{"had_liked":false,"id":152839,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1574086463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574086463","product_id":100017301,"comment_content":"我认为有用，能不能直接看出效果就和系统量级有关系了。量级大优化一秒都是很大的提升。不过即使维护的是垃圾系统自己也要用心，平时高标准要求自己，才能跳槽去优秀的公司。","like_count":0},{"had_liked":false,"id":152791,"user_name":"breeze","can_delete":false,"product_type":"c1","uid":1747935,"ip_address":"","ucode":"143767E9307ED2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ab/df/7bf49e31.jpg","comment_is_top":false,"comment_ctime":1574080596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574080596","product_id":100017301,"comment_content":"怎么去理解多项式阶和非多项式阶，这个多项式是数学上说的那个多项式吗","like_count":0},{"had_liked":false,"id":152782,"user_name":"夕_夕","can_delete":false,"product_type":"c1","uid":1262237,"ip_address":"","ucode":"DC01246C231965","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/9d/dc645c1a.jpg","comment_is_top":false,"comment_ctime":1574079550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574079550","product_id":100017301,"comment_content":"为什么需要复杂度<br>\t1、大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，简称时间复杂度。<br>时间复杂度分析<br>\t1）单段代码看高频：比如循环。<br>\t2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>\t3）嵌套代码求乘积：比如递归、多重循环等<br>\t4）多个规模求加法：比如方法有两个(m,n)参数控制两个循环的次数，那么这时就取二者复杂度相加。无法评估 m 和 n 的量级大，所以不能利用加法法则，去掉某一个，而是 O(m+n)<br><br>几种常见时间复杂度实例分析<br>\t1、多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>\t2、非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>\tO(2^n)（指数阶）、O(n!)（阶乘阶）<br><br>空间复杂度<br>\t常见的空间复杂度就是 O(1)、O(n)、O(n2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到<br><br>课后思考：<br>二者并不冲突，甚至相辅相成，性能测试是宏观结果的一种表现，而复杂度分析让我们更有意识的写出性能更好的代码。","like_count":0},{"had_liked":false,"id":152762,"user_name":"雨下不停","can_delete":false,"product_type":"c1","uid":1311947,"ip_address":"","ucode":"0893B9C249E48A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","comment_is_top":false,"comment_ctime":1574076544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574076544","product_id":100017301,"comment_content":"思考题：<br>就像老师说的一样，性能测试是依赖于计算机环境的，不同的计算机资源（i3、i9）执行的结果也可能会有很大的不同。而且随着数据规模的变化，多个计算机资源也会有上述的问题存在！","like_count":0},{"had_liked":false,"id":152741,"user_name":"hao-kuai","can_delete":false,"product_type":"c1","uid":1272354,"ip_address":"","ucode":"DFDFDDDBA4503C","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/22/527904b2.jpg","comment_is_top":false,"comment_ctime":1574073377,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574073377","product_id":100017301,"comment_content":"1、不多余。性能测试也好、复杂度分析也好都是工具或者手段，唯一目的就是写出当前环境下的“最优”实现，二者是互补关系。<br>2、 不做详细的每段代码做分析，怎么能获取到相对准确的结果。<br>-----<br>大局观<br>数据结构和算法本身解决的如何让代码运行得更快，让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。时间、空间复杂度分析来衡量你编写的算法代码的执行效率。<br><br>重要性<br><br>复杂度分析是整个算法学习的精髓，只要掌握了它，算法和数据结构内容基本上掌握了一半。<br><br>为什么需要复杂度分析？<br><br>因为事后分析法有2个缺陷：<br><br>测试结果非常依赖测试环境<br>测试结果受数据规模影响非常大<br>所以我们需要一个不用具体数据来测试，就可以粗略估算算法执行效率的方法：大O复杂度表示法<br><br>大O复杂度表示法<br><br>粗略假设每行代码执行时间unit_time都是一样的。所有代码的执行时间T（n）和每行代码执行次数n成正比，<br><br>T（n）= O（f（n））<br><br>T（n）为执行时间<br>f（n）表示所有代码执行次数总和<br>O 表示二者成正比<br>时间复杂度<br><br>例如T(n) = O(2n+2)、T(n) = O(2n²+2n+3)是大O时间复杂度表示法。<br><br>不表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度。<br><br>公式中的低阶、常量、系数不能左右增长趋势，可以忽略。则大O时间复杂度表示为<br><br>T(n) = O(2n+2) -&gt; O（n）<br>T(n) = O(2n²+2n+3) -&gt; O（n²）<br>技巧<br><br>只关注循环次数最多的一段代码<br>加法法则：总复杂度等于量级最大的代码复杂度<br>乘法法则：嵌套代码复杂度等嵌套内外代码复杂度乘积<br>几种常见时间复杂度<br><br>常量阶 O（1）：代码时间不随着n增加而增加。只要算法中不存在递归和循环，时间复杂度即为O(1)。<br>对数阶 O（㏒n）：对数可以相互转换，忽略底，即为O（㏒n）<br>线性阶 O（n）<br>线性对数阶 O（n㏒（n））<br>平方阶O（n²）、三次方阶O(n³)...n次方阶O（n*k）<br>指数阶O（2ⁿ）<br>阶乘阶O(n)<br>多项式量级、非多项式量级<br><br>O(2n) 和 O(n!)为非多项式量级，其余全是多项式量级。<br><br>空间复杂度<br><br>空间复杂度，全称渐进空间复杂度，表示算法的存储空间和数据规模之间的增长关系。简单来说就是申请了多大的空间","like_count":0},{"had_liked":false,"id":152524,"user_name":"sunshine","can_delete":false,"product_type":"c1","uid":1013060,"ip_address":"","ucode":"9E6E85BF71588E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/44/71005991.jpg","comment_is_top":false,"comment_ctime":1574039330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574039330","product_id":100017301,"comment_content":"课后思考：应该先进行时间复杂度、空间复杂度分析，这就相当于code review，然后在进行性能测试。 （PS: 实际上因为工期原因，上述比较奢侈的事情我们从来都不做，呜呜呜呜，平常的练习，只能跟着老师来了）","like_count":0},{"had_liked":false,"id":152339,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1573978378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573978378","product_id":100017301,"comment_content":"复杂度分析得出的是一个“势”，即随着数据规模增长，时间、空间消耗的增长趋势。而压力测试仅仅是某种特定情况下的具体值，不具有普遍性，偏差也可能比较大。<br>试想用2倍、3倍业务量做了测试，实际有N倍，哪个算法表现更好？只有通过复杂度分析来评估了。","like_count":0},{"had_liked":false,"id":152201,"user_name":"余健辉","can_delete":false,"product_type":"c1","uid":1694237,"ip_address":"","ucode":"2150C89CF66ADC","user_header":"https://wx.qlogo.cn/mmopen/vi_32/yBBhL9I6vian2PMOo7xnibKp8EibiaCrqfXibk5YOQSfzyjfZPGnUqHy1x1ibVIVYddMnibFJlpJibutAicXsZibwqskFoibw/132","comment_is_top":false,"comment_ctime":1573912396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573912396","product_id":100017301,"comment_content":"我并不认为这是浪费时间的做法，因为时间、空间复杂度分析是一种基于理论上的模式分析方法，它不依赖于具体的测试环境，能够有较好的客观性；其次，较好的复杂度分析能力能够帮助你写出更好更高性能的代码，提高算法思想能力；而且，如果复杂庞大的代码没有经过复杂度分析就进行性能测试，测试结果效率低下则重构代码要花费更多的时间精力，所以，复杂度分析很有必要，不管是对编程效率能力还是项目工程进度都很有帮助。","like_count":0},{"had_liked":false,"id":151921,"user_name":"我是你刚弟","can_delete":false,"product_type":"c1","uid":1744903,"ip_address":"","ucode":"040557738BD9E4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a0/07/08d972e4.jpg","comment_is_top":false,"comment_ctime":1573813559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573813559","product_id":100017301,"comment_content":"我认为不是多此一举，因为性能测试要对不同的环境，和一定的压力测试，所以要针对代码是否能正常运行或者是有没有压力，所进行的测试，不知道我的理解对不对","like_count":0},{"had_liked":false,"id":151504,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573732278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573732278","product_id":100017301,"comment_content":"复杂度分析是有必要的。<br>首先，是一种意识的养成。<br>其次，一切都靠计算，在数据拓展和效率运算方面，复杂度分析都能给我们提供很好的指南。<br>而且，复杂度分析改善算法更多体现在写的过程，测试在于验证写的结果。","like_count":0},{"had_liked":false,"id":150929,"user_name":"flowerVV","can_delete":false,"product_type":"c1","uid":1135817,"ip_address":"","ucode":"F1CC7D12927A5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1S9IOcib29oLPiaiakAbIJrytAncxno8FvgCMnjUgCmVrehWX2zSqps3elmmIqIZa3rCNibyolgBt46wTnAvvLdLAg/132","comment_is_top":false,"comment_ctime":1573630558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573630558","product_id":100017301,"comment_content":"以前一直不懂的时间复杂度今天感觉有点明白是什么了","like_count":0},{"had_liked":false,"id":150911,"user_name":"Ronnyz","can_delete":false,"product_type":"c1","uid":1488280,"ip_address":"","ucode":"9F34527B1D343D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","comment_is_top":false,"comment_ctime":1573626028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573626028","product_id":100017301,"comment_content":"我认为分析复杂度能够指导在代码编写阶段就能尽量做到优化","like_count":0},{"had_liked":false,"id":150870,"user_name":"G先生","can_delete":false,"product_type":"c1","uid":1200904,"ip_address":"","ucode":"FE482941EC7B2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/08/3b078d61.jpg","comment_is_top":false,"comment_ctime":1573618779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573618779","product_id":100017301,"comment_content":"其实是非常有必要的，最理想的过程是性能测试，性能非常的棒！但是这只是理想，一般都需要调优，这个过程其实就需要时间复杂度，空间复杂度的分析，这才是一个正常的过程；当然如果在写代码的过程中就考虑这些问题，程序的性能一定不会太差","like_count":0},{"had_liked":false,"id":150726,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1573605176,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573605176","product_id":100017301,"comment_content":"写下自己的一直编码和看到此篇文章的总结：<br>1，时间复杂度全名渐进式时间复杂度，是对一行代码或是一块代码执行效率的总结，时间复杂度有两种计算公式，加法和乘法，加法是标识 t(n)=O(f(n)+g(n)) T(n) 代表的是总的时间复杂度，常见的的就是for 循环，多层for 循环，乘法公式 T（n）=O(f(n)*g(n)) ,常见的是嵌套for 循环<br>2、空间复杂度，以前对空间复杂度是没有什么概念，现在知道了是代码申请的内存的大小。 ","like_count":0},{"had_liked":false,"id":150610,"user_name":"三角形小于零","can_delete":false,"product_type":"c1","uid":1026174,"ip_address":"","ucode":"C2F89597662D4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/7e/c9201b20.jpg","comment_is_top":false,"comment_ctime":1573567557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573567557","product_id":100017301,"comment_content":"老师，请教一个问题。  <br><br>var newStr = &quot;&quot;;<br><br>for i=0;i &lt; length(oldStr);i++ {<br>    newStr += oldStr[i];<br>}<br><br>这个空间复杂度算 O(1)，还是算 O(n) (n为 oldStr 长度) ? ","like_count":0},{"had_liked":false,"id":150362,"user_name":"朱润杰","can_delete":false,"product_type":"c1","uid":1738957,"ip_address":"","ucode":"6436C3D58D0FC3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/88/cd/7ee7e9db.jpg","comment_is_top":false,"comment_ctime":1573522924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573522924","product_id":100017301,"comment_content":"思考题：并不会多此一举，学会复杂度分析能帮助我们写出更高效的代码，更好的优化我们的代码。","like_count":0},{"had_liked":false,"id":149769,"user_name":"学明","can_delete":false,"product_type":"c1","uid":1033677,"ip_address":"","ucode":"1A499A2557F74D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/cd/7d3e4355.jpg","comment_is_top":false,"comment_ctime":1573372199,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573372199","product_id":100017301,"comment_content":"时间复杂度结合性能测试的结果，基本可以判定该代码是否合格。<br>","like_count":0},{"had_liked":false,"id":149707,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1573351029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573351029","product_id":100017301,"comment_content":"渐进式时间、空间复杂度的分析，有利于开发者自己主动掌握代码的执行效率和存储效率，方便开发者在开发前期就暴露问题，有预卜先知的功效，然后做一些相应的优化。","like_count":0},{"had_liked":false,"id":149618,"user_name":"Seamar","can_delete":false,"product_type":"c1","uid":1720788,"ip_address":"","ucode":"F36D0C2DBF07E0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLicqNWaoMc7SLKdhMZSQJCpsSAZPamI78ciaTfIGwXF7icsSPNuzCjdkdZa69N5wLzjHEaUiazlea75A/132","comment_is_top":false,"comment_ctime":1573290869,"is_pvip":false,"replies":[{"id":"57634","content":"时间复杂度表示的不是确切值，是一个增长趋势，你可以类比人口增长趋势。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573424745,"ip_address":"","comment_id":149618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573290869","product_id":100017301,"comment_content":"关于加法法则的程序代码例子中，有个疑问，假如for (; p &lt; 100; ++p) 中，将100改成1000000甚至更大，代码在执行时应该会占用一定时间，此时，这个时间消耗难道不算在时间复杂度中吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473915,"discussion_content":"时间复杂度表示的不是确切值，是一个增长趋势，你可以类比人口增长趋势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573424745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149522,"user_name":"匿名","can_delete":false,"product_type":"c1","uid":1738960,"ip_address":"","ucode":"EF944E0E466D4E","user_header":"","comment_is_top":false,"comment_ctime":1573265355,"is_pvip":false,"replies":[{"id":"57635","content":"双层循环，最内部的语句被循环执行了n*n次","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573424867,"ip_address":"","comment_id":149522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573265355","product_id":100017301,"comment_content":"int cal(int n) { int sum = 0; int i = 1; int j = 1; for (; i &lt;= n; ++i) { j = 1; for (; j &lt;= n; ++j) { sum = sum + i * j; } } }    作者你好  第一个循环因为只有2行  每行执行N次  这个倒是理解  里面的循环    n2 次方遍是如何确定的   就是这个值   如果3个呢   4个呢   ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473889,"discussion_content":"双层循环，最内部的语句被循环执行了n*n次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573424867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149439,"user_name":"Wall.E~涛","can_delete":false,"product_type":"c1","uid":1739254,"ip_address":"","ucode":"5A9B9992F32CEF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/f6/0f066340.jpg","comment_is_top":false,"comment_ctime":1573219020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573219020","product_id":100017301,"comment_content":"编程，也称之为程序设计。良好的设计是程序的基石。设计过程是通过需求分析，选择合适的数据结构和实现算法，结合设计模式，制定的编码的大框架，总方针。我们首先就应该在设计阶段对备选算法和数据结构的复杂度做出分析，在此基础上，实现时审视复杂度是否与设计时的预期一致。等到性能测试发现问题在回头修改和优化，一来可能为时晚矣，而来盖好的房子可能得拆了重建。","like_count":0},{"had_liked":false,"id":149308,"user_name":"xdargs","can_delete":false,"product_type":"c1","uid":1063740,"ip_address":"","ucode":"EB8326D3A72DE5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH9Mlw0kLK0p39vhQpdvkbQP5TX96DB9HMJ1POaTVDpMZg4rjlO3WCAqiaWWMc77ffS3vTo8qWdXA/132","comment_is_top":false,"comment_ctime":1573187785,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573187785","product_id":100017301,"comment_content":"回头巩固一下基础，清晰了好多。之前老是不定期弄不清log（n）以哪个为底…这里是10那里是2，其实渐进复杂度趋势是一样的，只不过多乘以一个常量的区别；<br>另外一个这次关注到了非多项式量级O（ 2^n）和O（n!），复杂度是非多项式量级的算法问题，NP问题<br>不同阶段会因为难度和自己的水平程度忽略一些点","like_count":0},{"had_liked":false,"id":149245,"user_name":"york","can_delete":false,"product_type":"c1","uid":1318852,"ip_address":"","ucode":"EE938B81A7FC04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGMibYc0m7cDHMsNRBUur2NPVnlBZFXoNjWomibfjnHeAO3XRt27VaH3WNtdUX11d3uIT1ZHWCxLeg/132","comment_is_top":false,"comment_ctime":1573178275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178275","product_id":100017301,"comment_content":"老师，我有两个问题：<br>1. 最后小结部分，有张二维坐标图，从图中的几根线条看，在数据量n相等的情况下，O(n2)的复杂度最高，而O(logn)的复杂度最低。是不是这样？<br>2. 对于不同的CPU处理器架构，比如ARM、x86，算法复杂度有没有可能产生本质上的改变？比如，在x86架构上，O(n)的复杂度要高于O(logn)，但如果在另一种架构上，可能是相反的？【O(n)和O(logn】只是举个例子啊）","like_count":0},{"had_liked":false,"id":148868,"user_name":"devil","can_delete":false,"product_type":"c1","uid":1350816,"ip_address":"","ucode":"1B0520D1B281CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUXWqIBiadT4HjFz8PQLHyyNUgFuq10unTqCiadOmhsP1rrhoK2ibHq5TOPx7UXDd2cpu8hzS2ERfHA/132","comment_is_top":false,"comment_ctime":1573096891,"is_pvip":false,"replies":[{"id":"57641","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573425170,"ip_address":"","comment_id":148868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573096891","product_id":100017301,"comment_content":"关于第二段代码，两个for循环嵌套，O=n^2。那么三个for循环嵌套，O=n^3吗？n个for循环嵌套，O=n^n次方吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473645,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573425170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148532,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1573026503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573026503","product_id":100017301,"comment_content":"看到老师的“设计模式”，觉得非常好，就立刻追买了这个课程。<br>老师讲得很细，而且很体系。<br>第一次看到有把复杂度讲得这么好的。","like_count":0},{"had_liked":false,"id":148530,"user_name":"星期五","can_delete":false,"product_type":"c1","uid":1676658,"ip_address":"","ucode":"A66B9E7113FB51","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/72/ce90c1c7.jpg","comment_is_top":false,"comment_ctime":1573025863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573025863","product_id":100017301,"comment_content":"个人见解：调试代码性能是需要我们代码完成后在一定运行环境中通过工具测得，而复杂度可以在代码构思完成中分析出来的，学会复杂度分析便可以在源头上输出高质量高性能的代码。","like_count":0},{"had_liked":false,"id":148338,"user_name":"Hua100","can_delete":false,"product_type":"c1","uid":1723325,"ip_address":"","ucode":"4E7A749C343E90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLeKVmTFdR2hQsCaNxxTK8wvnXXBayKLLoITqnbW9yjloAZWU99mOGaf1DkWqM6dol77aER9ickibA/132","comment_is_top":false,"comment_ctime":1572983730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572983730","product_id":100017301,"comment_content":"不多余，而且应该先分析再实施。这样可以将时间花在规划上，而不是写了复杂度高的代码后再删改。","like_count":0},{"had_liked":false,"id":148294,"user_name":"搬砖的极客","can_delete":false,"product_type":"c1","uid":1438527,"ip_address":"","ucode":"CF650650268E0D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITdszl1pr9BCGfbWhOYJiasMkCtibhkjiahrItAOjpssDMj9kudTHcSHwSXd9moHLjS82iaaK5aFuticA/132","comment_is_top":false,"comment_ctime":1572969041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572969041","product_id":100017301,"comment_content":"面对logn和nlogn这种时间复杂度时有点懵，希望后面能在具体例子中理解这种用法","like_count":0},{"had_liked":false,"id":147746,"user_name":"JAMES","can_delete":false,"product_type":"c1","uid":1170796,"ip_address":"","ucode":"63015120144DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/6c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1572882990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572882990","product_id":100017301,"comment_content":"2019&#47;11&#47;04 打卡","like_count":0},{"had_liked":false,"id":147709,"user_name":"三年级2班 陈同学","can_delete":false,"product_type":"c1","uid":1639318,"ip_address":"","ucode":"5242BA5A1AACE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/96/3def6d95.jpg","comment_is_top":false,"comment_ctime":1572880403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572880403","product_id":100017301,"comment_content":"求老师，各位大佬解答一下：<br><br>int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br> <br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum; <br> }<br><br>T(n)=O(n*n); 如果是 ret=ret+f(n) ,我懂啊，但是<br>ret=ret+f(i),我就凌乱了？因为i是有小到大变化的","like_count":0},{"had_liked":false,"id":147659,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572877103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877103","product_id":100017301,"comment_content":"笔记  <br> 1强调复杂度重要性，上一章有讲。<br>2 事后统计法问题（管理依赖，数据规模）<br>3 加法法则，（低维忽略）乘法法则  （嵌套）<br>  注意t (m+n) 问题  无法识别规模，就不要忽略。<br><br>4 空间复杂度，略。<br><br><br>思考题   测试通常在发现设计问题和架构问题上是很无力的。<br>还有就是有些问题小数据不明显，甚至因为用例数据造成错判。<br>大数据量一跑，很浪费时间，而且反复调试，发现周期一不小心又是一个lgN （N行代码）问题。  前期发现代码总比后面发现成本要小的多。<br><br>其它<br>全程叫  渐进时间复杂度。 注意渐进这两个字。","like_count":0},{"had_liked":false,"id":146616,"user_name":"所以然","can_delete":false,"product_type":"c1","uid":1719978,"ip_address":"","ucode":"57BE96CE3AD939","user_header":"https://static001.geekbang.org/account/avatar/00/1a/3e/aa/8c7125c1.jpg","comment_is_top":false,"comment_ctime":1572583944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572583944","product_id":100017301,"comment_content":"复杂度分析可以帮助程序员写出高效代码，性能测试可以帮助程序员找出性能瓶颈；二者互补，复杂度分析提升性能测试的效率；性能测试补充复杂度分析。","like_count":0},{"had_liked":false,"id":146469,"user_name":"酒薄不堪饮","can_delete":false,"product_type":"c1","uid":1612675,"ip_address":"","ucode":"82ECDE075BCA20","user_header":"https://static001.geekbang.org/account/avatar/00/18/9b/83/c56e4e46.jpg","comment_is_top":false,"comment_ctime":1572530413,"is_pvip":false,"replies":[{"id":"56803","content":"暂时可以 不过挺重要的 过几天再回过头看几遍吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572824150,"ip_address":"","comment_id":146469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572530413","product_id":100017301,"comment_content":"看的有点蒙.咋办,这俩章可以跳过码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472874,"discussion_content":"暂时可以 不过挺重要的 过几天再回过头看几遍吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572824150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146404,"user_name":"无言的约定","can_delete":false,"product_type":"c1","uid":1128953,"ip_address":"","ucode":"5E8046EB6B7956","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/f9/acfb9a48.jpg","comment_is_top":false,"comment_ctime":1572514514,"is_pvip":false,"replies":[{"id":"56805","content":"起点不重要的 因为时间复杂度的大o表示法本身就不是精确值","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572824253,"ip_address":"","comment_id":146404,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572514514","product_id":100017301,"comment_content":"王老师，O(logn)、O(nlogn)的图像应该都过（1，0）这个点吧？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472847,"discussion_content":"起点不重要的 因为时间复杂度的大o表示法本身就不是精确值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572824253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146379,"user_name":"无言的约定","can_delete":false,"product_type":"c1","uid":1128953,"ip_address":"","ucode":"5E8046EB6B7956","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/f9/acfb9a48.jpg","comment_is_top":false,"comment_ctime":1572510792,"is_pvip":false,"replies":[{"id":"57071","content":"实际复杂度表示一个增长趋势，或者增长量级，不一定n非得是无穷大","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572949172,"ip_address":"","comment_id":146379,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572510792","product_id":100017301,"comment_content":"这里我要再强调一下，即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。<br><br>王老师，实际开发中 n 不会是无穷大，那么时间复杂度岂不都是O(1)了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472831,"discussion_content":"实际复杂度表示一个增长趋势，或者增长量级，不一定n非得是无穷大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572949172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145962,"user_name":"Monica","can_delete":false,"product_type":"c1","uid":1686257,"ip_address":"","ucode":"B09BC6EEBD81BD","user_header":"https://static001.geekbang.org/account/avatar/00/19/ba/f1/b01034e3.jpg","comment_is_top":false,"comment_ctime":1572408037,"is_pvip":false,"replies":[{"id":"56455","content":"是的，应该是正相关，不是正比。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487363,"ip_address":"","comment_id":145962,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572408037","product_id":100017301,"comment_content":"感觉“所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比“这句话不太正确，应该是和f(n)成正比。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472648,"discussion_content":"是的，应该是正相关，不是正比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145649,"user_name":"mercyeric","can_delete":false,"product_type":"c1","uid":1623957,"ip_address":"","ucode":"F33B9ED09E0795","user_header":"https://static001.geekbang.org/account/avatar/00/18/c7/95/23d1ab3e.jpg","comment_is_top":false,"comment_ctime":1572336827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572336827","product_id":100017301,"comment_content":"1、性能测试受硬件、系统环境等多重因素的影响；<br>2、复杂度分析是平台无关的，从代码的角度对复杂度进行分析，粗略的估计应用程序的执行性能，让我们对所选数据结构和算法的效率有个初步的了解；<br>3、复杂度分析并不复杂，简单的理论分析，粗略估计分析代码的复杂度，可以为性能测试提供一些理论上的依据；<br>4、进行复杂度分析，也有助于开发者自身的提高，为开发者今后能写出更优雅、更高效的代码奠基；","like_count":0},{"had_liked":false,"id":145458,"user_name":"zzh","can_delete":false,"product_type":"c1","uid":1174510,"ip_address":"","ucode":"0FC6BD729E5801","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJmcPTvjtSbhBNic4wb61Pj77nIHcLG64MnAXicsHBrMWvjCQPoiaHTtYmbnlVSkSWZEnN2QlicekqLhg/132","comment_is_top":false,"comment_ctime":1572276253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572276253","product_id":100017301,"comment_content":"2019年10月28日","like_count":0},{"had_liked":false,"id":145411,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":1716933,"ip_address":"","ucode":"CD583272CF1237","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","comment_is_top":false,"comment_ctime":1572268341,"is_pvip":false,"replies":[{"id":"56462","content":"那也不是啊，二分查找不就是O（lgn）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487523,"ip_address":"","comment_id":145411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572268341","product_id":100017301,"comment_content":"大部分算法只能优化到nlogn吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472383,"discussion_content":"那也不是啊，二分查找不就是O（lgn）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145240,"user_name":"Eddie","can_delete":false,"product_type":"c1","uid":1224862,"ip_address":"","ucode":"B653E943B7881C","user_header":"https://static001.geekbang.org/account/avatar/00/12/b0/9e/ff642ba0.jpg","comment_is_top":false,"comment_ctime":1572235201,"is_pvip":false,"replies":[{"id":"56463","content":"太正常不过了，多看几遍，多练练，就好了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487555,"ip_address":"","comment_id":145240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572235201","product_id":100017301,"comment_content":"我看懂了，但是大佬，我过了好久又忘了。怎么破？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472308,"discussion_content":"太正常不过了，多看几遍，多练练，就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145223,"user_name":"元","can_delete":false,"product_type":"c1","uid":1717444,"ip_address":"","ucode":"4576E15018EEA3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/c4/08d9f349.jpg","comment_is_top":false,"comment_ctime":1572232582,"is_pvip":false,"replies":[{"id":"56123","content":"好像是极客时间软件的问题","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572301737,"ip_address":"","comment_id":145223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572232582","product_id":100017301,"comment_content":"学校根本学不进这个，入职四年第一次系统学习，对复杂度也理解了，文章通俗易懂。ps，右上角平方表示法不支持吗？希望开发者支持下，比较直观。或者2^n感觉也比2n来的直观","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472298,"discussion_content":"好像是极客时间软件的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572301737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145095,"user_name":"Mr.Fu","can_delete":false,"product_type":"c1","uid":1613254,"ip_address":"","ucode":"F1E4304C5CDE52","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/c6/a72db706.jpg","comment_is_top":false,"comment_ctime":1572188319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572188319","product_id":100017301,"comment_content":"一Why-为什么要复杂度分析<br>为了知道特定的数据结构和算法具体怎么更快更省的存储和处理数据，特定的数据结构和算法能否应用到当前需求<br>不能用事后统计法-测试结果受测试环境(i9和i4差别大)和数据规模(100条数据和1千万条数据差别大)影响<br>二.时间复杂度分析<br>什么是时间复杂度：算法的执行时间与数据规模之间的增长关系(并不具体表示代码真正的执行时间)，是”渐进时间复杂度“。<br>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比，即T(n)=O(f(n))<br>n表示数据规模大小<br>f(n)每行代码执行次数总和<br>O表示成正比<br>T(n)表示代码执行时间<br>以下代码f(n) = 3+2n+2n^2;T(n) = O(3+2n+2n^2) = O(n^2)，用到了忽略低阶、常量和系数(极限思想)<br><br> int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1;<br>     for (; j &lt;= n; ++j) {<br>       sum = sum +  i * j;<br>     }<br>   }<br> }<br><br>       3.时间复杂度分析规律<br>只关注循环执行次数最多的一段代码<br>加法法则：总复杂度等于量级最大的那段代码的复杂度:如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))；如果代码的复杂度由两个数据的规模来决定可能不适用<br>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积:如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).<br>4.常见时间复杂度<br>常量级：O(1)，一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)<br>对数级：O(logn)、O(nlogn)，以下代码n共执行i次，i的取值是等比数列(2^x=i)，i=log2n(log1以2为底n的对数)，以下代码的时间复杂度就是O(log2n)，记做O(longn)(之所以能记做，是因为任意对数等于一个常量乘以一个另一个对数，计算时间复杂度时又可以忽略常量)<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br>两个数据规模：O(m+n)、O(m*n)，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)<br>三.空间复杂度分析<br>什么是空间复杂度：表示算法的存储空间与数据规模之间的增长关系(并不具体表示代码真正的存储空间大小)，是”渐进空间复杂度“。<br>我们常见的空间复杂度就是 O(1)、O(n)、O(n^2)，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到<br>分析示例：第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。<br><br>void print(int n) {<br>  int i = 0;<br>  int[] a = new int[n];<br>  for (i; i &lt;n; ++i) {<br>    a[i] = i * i;<br>  }<br><br>  for (i = n-1; i &gt;= 0; --i) {<br>    print out a[i]<br>  }<br>}<br><br>","like_count":0},{"had_liked":false,"id":144833,"user_name":"攻城狮Ra","can_delete":false,"product_type":"c1","uid":1681051,"ip_address":"","ucode":"4D6F97A6481166","user_header":"https://static001.geekbang.org/account/avatar/00/19/a6/9b/20b9fce3.jpg","comment_is_top":false,"comment_ctime":1572068323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572068323","product_id":100017301,"comment_content":"  我认为不是多此一举，通过渐进时间复杂度和渐进空间复杂度可以提供很好的理论分析方向，可以对项目有一个更加清晰的认识，有利于对项目进行优化。<br>  时间复杂度，表示算法的执行时间跟数据规模之间的增长关系；空间复杂度，表示算法的存储空间跟数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":144756,"user_name":"3W1H","can_delete":false,"product_type":"c1","uid":1066430,"ip_address":"","ucode":"F6B4864128103C","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/be/c04a40ce.jpg","comment_is_top":false,"comment_ctime":1572050682,"is_pvip":false,"replies":[{"id":"55980","content":"你再研究下😂，没错的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572230280,"ip_address":"","comment_id":144756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572050682","product_id":100017301,"comment_content":"我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C *  log2n)，其中 C=log32 是一个常量。这个貌似不对，换底公式应该是除 不是乘 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472101,"discussion_content":"你再研究下😂，没错的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572230280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144703,"user_name":"kid","can_delete":false,"product_type":"c1","uid":1468801,"ip_address":"","ucode":"CE75F01ECD2632","user_header":"https://static001.geekbang.org/account/avatar/00/16/69/81/01c2bde8.jpg","comment_is_top":false,"comment_ctime":1572001740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572001740","product_id":100017301,"comment_content":"阶乘的写法有点混淆 能不能在 字母后面加上 * 号  或者 ^ 号 ","like_count":0},{"had_liked":false,"id":144642,"user_name":"暝迷魑魅","can_delete":false,"product_type":"c1","uid":1229225,"ip_address":"","ucode":"B276AA2305DCE9","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/a9/9ebc6d1c.jpg","comment_is_top":false,"comment_ctime":1571988451,"is_pvip":true,"replies":[{"id":"55799","content":"好像没问题","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572045371,"ip_address":"","comment_id":144642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571988451","product_id":100017301,"comment_content":"log3n 就等于 log32 * log2n   这个换底公式是不是有问题呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472047,"discussion_content":"好像没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572045371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144444,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1571923172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571923172","product_id":100017301,"comment_content":"为什么需要复杂度分析？<br>1. 测试结果非常依赖测试环境<br>2. 测试结果受数据规模的影响很大<br>需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。<br>大 O 复杂度表示法<br>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比<br>大 O 时间复杂度表示代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度（asymptotic time complexity），简称时间复杂度<br>时间复杂度分析<br>1. 只关注循环执行次数最多的一段代码。通常会忽略公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度。<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br>复杂度量级（按数量级递增）<br>* 常量阶 O(1)：代码的执行时间不随 n 的增大而增大<br>* 对数阶 O(lgn)<br>* 线性阶 O(n)<br>* 线性对数阶 O(nlgn)<br>* 平方阶 O(n2)、立方阶 O(n3) … K 次方阶 O(nk)<br>* 指数阶 O(2n)<br>* 阶乘阶 O(n!)<br>多项式量级<br>非多项式量级：O(2n) 和 O(n!)，相关的算法问题叫作 NP（Non-Deterministic Polynomical，非确定多项式）问题<br>O(lgn)、O(nlgn)<br>i := 1<br>for ;i&lt;=n; {<br>    i = i*2<br>}<br>       <br>通过 2x=n 求解 x，x=lg2n，代码的时间复杂度是 O(lg2n)<br>i := 1<br>for ;i&lt;=n; {<br>    i = i*3<br>}<br>O(lg3n)<br>lg3n = lg32 * lg2n，lg32是常数，忽略系数，均为 O(lgn)<br>O(m+n)、O(m*n)<br>代码的复杂度由两个数据的规模来决定，无法事先评估 m 和 n 谁的量级大时。<br>空间复杂度分析<br>算法的存储空间与数据规模之间的增长关系<br>常见：O(1)、O(n)、O(n2)<br>","like_count":0},{"had_liked":false,"id":144434,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1571921135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571921135","product_id":100017301,"comment_content":"复杂度分析，也就是抓主要矛盾，忽略细节。那平时工作学习中，也应该把主要精力放在重要问题上，在小事上难得糊涂。<br>","like_count":0},{"had_liked":false,"id":144126,"user_name":"李小白","can_delete":false,"product_type":"c1","uid":1322576,"ip_address":"","ucode":"7187646DDEACE6","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/50/240e7beb.jpg","comment_is_top":false,"comment_ctime":1571845806,"is_pvip":false,"replies":[{"id":"55987","content":"为啥是O(n！)呢？你能说说嘛？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572230759,"ip_address":"","comment_id":144126,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571845806","product_id":100017301,"comment_content":"<br>int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br> <br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum;<br> }<br>老师，文章中这段代码的时间复杂度是不是应该为O(n!)，不应该是O(n^2)吧？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471820,"discussion_content":"为啥是O(n！)呢？你能说说嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572230759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143476,"user_name":"C_rown","can_delete":false,"product_type":"c1","uid":1385659,"ip_address":"","ucode":"0E6ED5D1EE4952","user_header":"https://static001.geekbang.org/account/avatar/00/15/24/bb/27684c51.jpg","comment_is_top":false,"comment_ctime":1571714639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571714639","product_id":100017301,"comment_content":" 刚起步做时间、空间复杂度分析可能看起来麻烦、效率不高，随着熟练程度的提高，后面我们只需一眼就知道此段代码的执行效率对我们优化代码以及做性能优化大有裨益的","like_count":0},{"had_liked":false,"id":143296,"user_name":"different7","can_delete":false,"product_type":"c1","uid":1690579,"ip_address":"","ucode":"913E5051F12C51","user_header":"https://static001.geekbang.org/account/avatar/00/19/cb/d3/4e25302f.jpg","comment_is_top":false,"comment_ctime":1571663996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571663996","product_id":100017301,"comment_content":"某段音频想回放的时候还要滑到上面去，能在角落加个进度条会方便很多。","like_count":0},{"had_liked":false,"id":142981,"user_name":"黄振宇","can_delete":false,"product_type":"c1","uid":1686397,"ip_address":"","ucode":"976BC7B46DA419","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/7d/26340713.jpg","comment_is_top":false,"comment_ctime":1571616603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571616603","product_id":100017301,"comment_content":"# 复杂度分析<br><br>复杂度分析时整个算法的学习精髓<br><br>## 1.为什么需要复杂度分析<br><br>事后统计法？？<br><br>- 依赖测试环境，电脑，处理器？<br>- 受数据规模的影响很大<br><br><br><br>大O复杂度表示法<br><br>- 所有代码的执行时间T(n)与每行代码的执行次数成正比<br>- T(n) = O(2n^2 + 2)，大O时间复杂度表示，渐进时间复杂度。<br><br><br><br>时间复杂度分析<br><br>- **只关注循环次数最多的一段代码**<br>- 加法法则，**总复杂度等于量级最大的那段代码的复杂度**<br>- 乘法法则，**嵌套代码的复杂度等于嵌套内外代码复杂度的乘积**<br><br><br><br>几种常见的复杂度<br><br>- 非多项式量级 O(2^n) O(n!)<br><br>- 多项式量级<br><br>  - O(1)，不存在循环、递归、即使成千上万代码也是O(1)<br>  - O(logn) O(nlogn) ，采用大O标记复杂度的时候可以忽略系数<br>  - O(m+n) O(m*n)<br><br>  <br><br>空间复杂度<br><br>- 渐进空间复杂度，表示算法存储空间与数据规模之间的增长关系<br><br>  ","like_count":0},{"had_liked":false,"id":142727,"user_name":"小钱钱","can_delete":false,"product_type":"c1","uid":1705413,"ip_address":"","ucode":"9E5882E6825AF1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/05/c5/efc92d64.jpg","comment_is_top":false,"comment_ctime":1571481129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571481129","product_id":100017301,"comment_content":"看的一头雾水，数学不好我是不是要重学一遍高中数学呀。。","like_count":0},{"had_liked":false,"id":142710,"user_name":"善己及人","can_delete":false,"product_type":"c1","uid":1697349,"ip_address":"","ucode":"725C091C65B324","user_header":"https://static001.geekbang.org/account/avatar/00/19/e6/45/fe3f5d4c.jpg","comment_is_top":false,"comment_ctime":1571470515,"is_pvip":false,"replies":[{"id":"55219","content":"可读性 易维护 跟 性能 没冲突 是两回事","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571618271,"ip_address":"","comment_id":142710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571470515","product_id":100017301,"comment_content":"看完这节课，对时间空间复杂度走了一定了解，但是这些概念对我们实际工作有什么指导性帮助呢？还是不理解。感觉过于理论化，实际工作中时间复杂度低的代码并不一定比时间复杂度高的代码好！还要考虑代码可读性，易维护性等，那么还用的上时间复杂度度么？不太理解","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471236,"discussion_content":"可读性 易维护 跟 性能 没冲突 是两回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571618271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142129,"user_name":"蓝夜星辉","can_delete":false,"product_type":"c1","uid":1687442,"ip_address":"","ucode":"444633E371C3F6","user_header":"https://static001.geekbang.org/account/avatar/00/19/bf/92/d3e9eba5.jpg","comment_is_top":false,"comment_ctime":1571297754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571297754","product_id":100017301,"comment_content":"不是多此一举。直接将代码在测试环境上跑一遍虽可直观看出算法的执行效率和资源消耗，但有局限性：一是测试结果依赖于具体的测试环境；二是测试结果受数据规模影响。故这种评估方式不具有普遍性和客观性。<br>大o表示法又称渐进复杂度分析法，包括时间复杂度分析和空间复杂度分析。两种复杂度分析分别表示算法的执行时间和资源消耗随数据规模增长的变化趋势。分析时常量，低阶和系数忽略，只保留高阶的量级。常见的复杂度阶数由低到高有：O(1),O(logn),O(n),O(nlogn).","like_count":0},{"had_liked":false,"id":141627,"user_name":"春阳","can_delete":false,"product_type":"c1","uid":1236231,"ip_address":"","ucode":"82C9B7D2717C01","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/07/39eaca28.jpg","comment_is_top":false,"comment_ctime":1571203400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571203400","product_id":100017301,"comment_content":"1. 只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系<br>渐进空间复杂度（asymptotic space complexity)<br>表示算法的存储空间与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":141616,"user_name":"风一般的梦幻","can_delete":false,"product_type":"c1","uid":1556304,"ip_address":"","ucode":"7E95425ECF3B89","user_header":"https://static001.geekbang.org/account/avatar/00/17/bf/50/3b370cd5.jpg","comment_is_top":false,"comment_ctime":1571202363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571202363","product_id":100017301,"comment_content":"能够大概估计出复杂度就可以在编写过程中完成性能优化，性能测试只是校验的过程。","like_count":0},{"had_liked":false,"id":141059,"user_name":"Geek_272a2e","can_delete":false,"product_type":"c1","uid":1691776,"ip_address":"","ucode":"C3F82497030D0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibX06ACicicBdkD4hkSTkVm9fIT1xwdXV52GvQahFmTVSFHhxbDWjNOk5mdwE3hRFLO6QjRYIKoffA/132","comment_is_top":false,"comment_ctime":1571108056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571108056","product_id":100017301,"comment_content":"虽然会进行性能测试，但那都是靠后面的事情了，再开发的时候我们就应该考虑时间复杂度和空间复杂度相关的事情了","like_count":0},{"had_liked":false,"id":140726,"user_name":"我喜欢的溜溜梅","can_delete":false,"product_type":"c1","uid":1676758,"ip_address":"","ucode":"44DBB06B091775","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/d6/d0894b2b.jpg","comment_is_top":false,"comment_ctime":1571038751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571038751","product_id":100017301,"comment_content":"自己总结的不太好，要学会总结","like_count":0},{"had_liked":false,"id":140712,"user_name":"imperial","can_delete":false,"product_type":"c1","uid":1465302,"ip_address":"","ucode":"8D0693B3C142B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/d6/d6c26ea2.jpg","comment_is_top":false,"comment_ctime":1571036469,"is_pvip":false,"replies":[{"id":"54531","content":"没太看懂你写的公式😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571094713,"ip_address":"","comment_id":140712,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571036469","product_id":100017301,"comment_content":"不应该是T（n）=log2n + n, T(n）=log2n+log22^n=log2n*2^n吗   ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470521,"discussion_content":"没太看懂你写的公式😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571094713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350823,"discussion_content":"我也是！~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614042251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140500,"user_name":"wait.","can_delete":false,"product_type":"c1","uid":1685234,"ip_address":"","ucode":"640B2E3D09B939","user_header":"https://static001.geekbang.org/account/avatar/00/19/b6/f2/b798d2ea.jpg","comment_is_top":false,"comment_ctime":1570967981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570967981","product_id":100017301,"comment_content":"复杂度分析有必要，性能测试只能分析写好代码的效率，而写代码时就留意时间复杂度可以避免写出一些效率低下的代码，而性能测试时就能对分析过复杂度的代码进行一种验证，不然完全依赖于性能测试也只是知道在当前平台代码的效率，并不能帮助修改提升代码效率","like_count":0},{"had_liked":false,"id":140043,"user_name":"cleanairdoris","can_delete":false,"product_type":"c1","uid":1068583,"ip_address":"","ucode":"D116638A8A32BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/27/5c562ca4.jpg","comment_is_top":false,"comment_ctime":1570794740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570794740","product_id":100017301,"comment_content":"我理解复杂度分析应该是写代码之前做，架构定型，而性能测试是写代码之后做","like_count":0},{"had_liked":false,"id":139719,"user_name":"技术小生","can_delete":false,"product_type":"c1","uid":1692743,"ip_address":"","ucode":"18B7751498029F","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/47/0deb44d6.jpg","comment_is_top":false,"comment_ctime":1570710814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570710814","product_id":100017301,"comment_content":"我觉得性能测试和开发时做复杂度分析进而优化代码，是两个不同的事情。我们不能把系统的性能、接口的响应耗时都压在性能测试上，而要在日常开发中就要注意这些细节，优化代码逻辑。如果在性能测试时，性能不过关，而上线在即，这会是一个更难熬的时刻。","like_count":0},{"had_liked":false,"id":139543,"user_name":"mkii","can_delete":false,"product_type":"c1","uid":1674466,"ip_address":"","ucode":"534914EC7EA304","user_header":"https://static001.geekbang.org/account/avatar/00/19/8c/e2/48f4e4fa.jpg","comment_is_top":false,"comment_ctime":1570675459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570675459","product_id":100017301,"comment_content":"笔记。<br>时间复杂度：关注“代码执行次数”<br>空间复杂度：关注“申请的空间大小”","like_count":0},{"had_liked":false,"id":138704,"user_name":"Geek_949cc1","can_delete":false,"product_type":"c1","uid":1690476,"ip_address":"","ucode":"F8ACDBF2FA8CC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","comment_is_top":false,"comment_ctime":1570427234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570427234","product_id":100017301,"comment_content":"总结：1：首先时间复杂度并不表示代码具体的执行时间，只表示代码执行时间随数据规模增长的变化趋势<br>          2：时间复杂度的表示过程中，对于常数，低阶次项，系数并不会随着数据规模的增长而去左右代码执行时间的增长趋势，所以只需要记录最大量级来表示时间复杂度。<br>          3：加法法则：对于各段代码复杂度已知，即可以判断各段代码中那个复杂度更大的情况下，该代码的时间复杂度即为各段代码时间复杂度中最大的一个。但对于不能判断那个复杂度更大时，即代码时间复杂度用各个段代码时间复杂度之和来表示<br>          4：乘法法则：主要针对具有嵌套的代码，即内层外层时间复杂度的乘积。<br>空间复杂度：<br>          1：主要通过判断申请内存空间的量级来分析<br>课后思考：<br>           我自己未从事过相关的工作，也没切身的去开发过一个项目，但是我感觉一个人这样的理解还是存在一定的问题，对于用户人数很多的这种项目做时间复杂度和空间复杂度的分析是必要的，因为不做这些的分析，可能会存在很多的潜在问题，你自己在测试代码时没毛病，代码跑的很快，但是对于大量用户同时使用时，我感觉可能会造成用户的体验不好，比如软件特别卡之类的（我也不知道有没有理，但感觉还是这样，哈哈哈）。但是对于某些较小的项目，适应人群很少，这样的分析优化了肯定更好（但是如果赶时间之类的，对于这样使用人群少的，不分析或许不是那么的致命）。","like_count":0},{"had_liked":false,"id":138669,"user_name":"范建海","can_delete":false,"product_type":"c1","uid":1690581,"ip_address":"","ucode":"7296B019816FE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/cb/d5/f1340355.jpg","comment_is_top":false,"comment_ctime":1570416894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570416894","product_id":100017301,"comment_content":"# 1. 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗<br>## 1.1. 大 O 复杂度表示法<br>- 代码执行时间随数据规模增长的变化趋势，也叫渐进时间复杂度，简称时间复杂度<br>```<br>T(n) = O(f(n))<br>T(n):   代码执行的时间<br>n：     数据规模的大小<br>f(n)：  每行代码执行的次数总和<br>O：     表示代码的执行时间 T(n) 与 f(n) 表达式成正比<br>```<br><br>## 1.2. 时间复杂度分析方法<br>- 只关注循环执行次数最多的一段代码（通常忽略公式中的常量、低阶、系数， 只需要记录一个最大阶的量级就可以了）<br>- 加法法则： 总复杂度等于量级最大的那段代码的复杂度<br>```<br>如果T1(n) = O(f(n))，T2(n) = O(g(n))，那么 T(n) = T1(n) + T2(n) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))<br>```<br>- 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>```<br>如果T1(n) = O(f(n))，T2(n) = O(g(n))，那么 T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))<br>```<br><br>## 1.3. 几种常见时间复杂度实例分析<br>- 多项式量级<br>    - O(1)： 常量阶 只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是O(1)<br>    - O(logn)：对数阶<br>        - 链接：https:&#47;&#47;www.cnblogs.com&#47;chenxi188&#47;p&#47;11050016.html<br>    ``` <br>    i=1;<br>    while (i &lt;= n)  {<br>        i = i * 2;<br>    }<br>    ```<br>    - O(n): 线性阶<br>    - O(nlogn)：线性对数阶 (比如：归并排序、快速排序)<br>    - O(n2): 平方阶<br>    - O(n3): 立方阶<br>    - O(m+n)、O(m*n)<br>    ``` <br>    int cal(int m, int n) {<br>    int sum_1 = 0;<br>    int i = 1;<br>    for (; i &lt; m; ++i) {<br>        sum_1 = sum_1 + i;<br>    }<br>    <br>    int sum_2 = 0;<br>    int j = 1;<br>    for (; j &lt; n; ++j) {<br>        sum_2 = sum_2 + j;<br>    }<br>    <br>    return sum_1 + sum_2;<br>    }<br>    &#47;&#47; 注意：针对这种情况， 加法法则就不适用了，乘法法则依然适用<br><br>    ```<br>    <br><br>- 非多项式量级<br>    - O(2n)：指数阶<br>    - O(n!)：阶乘阶<br><br><br>## 1.4. 空间复杂度<br>- 算法的存储空间与数据规模之间的增长关系<br><br>## 1.5. 常见的空间复杂度<br>- O(1)<br>- O(n)<br>- O(n2)","like_count":0},{"had_liked":false,"id":138663,"user_name":"Sfixy","can_delete":false,"product_type":"c1","uid":1690686,"ip_address":"","ucode":"76553F45870359","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2W9wzKElsgDLLNQPxWpGonwpL9dIeVRnCBJicKXjSksRicLukcxGDQDGOHQjnH754nicnwib7bwQSRdS8rvib1W4YCw/132","comment_is_top":false,"comment_ctime":1570413641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570413641","product_id":100017301,"comment_content":"对于O（m+n）我有个通俗的理解<br>当不确定量级的参数个数为2个及以上<br>比如，<br>void f（int n，int m）{<br>       for（；n；）{}；<br>       for（；m；）{}；<br>}<br>是时间复杂度为O（m+n）<br>对于只有一个参数<br>比如：void f（int n）{}<br>时间复杂度只与n有关<br><br>故根据未知量级的参数个数，就可以判断出加法规则是否可用","like_count":0},{"had_liked":false,"id":138282,"user_name":"给我一片海","can_delete":false,"product_type":"c1","uid":1339296,"ip_address":"","ucode":"9E6875283F3D34","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/a0/f9cede41.jpg","comment_is_top":false,"comment_ctime":1570153298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570153298","product_id":100017301,"comment_content":"就慢慢来慢慢来 学会一点是一点 时间复杂度要烂熟于心","like_count":0},{"had_liked":false,"id":138233,"user_name":"ai随心动","can_delete":false,"product_type":"c1","uid":1661009,"ip_address":"","ucode":"2FF37AF60F1187","user_header":"https://static001.geekbang.org/account/avatar/00/19/58/51/dc7ae8e7.jpg","comment_is_top":false,"comment_ctime":1570110469,"is_pvip":false,"replies":[{"id":"53629","content":"理解成2n也可以，不影响最后的结果呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570582659,"ip_address":"","comment_id":138233,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570110469","product_id":100017301,"comment_content":"为什么for里面的判断和++i不是需要2n的时间","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469446,"discussion_content":"理解成2n也可以，不影响最后的结果呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570582659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1711947,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1f/4b/1a69f5a3.jpg","nickname":"p6","note":"","ucode":"C68E4753112103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39360,"discussion_content":" 我也觉得\nfor (; i <= n; ++i) {\n     sum = sum + i;\n}\n是(2+1)*n unit_time","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571917484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138087,"user_name":"mier","can_delete":false,"product_type":"c1","uid":1661411,"ip_address":"","ucode":"2EDF4D982DD956","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erD0FZP5UKVMGgkjounHpFEkAaLVicEQ9yGF3icELTp61yREDISQfwpBebyE2S5sHIcWyjjhKo1pWQQ/132","comment_is_top":false,"comment_ctime":1570017147,"is_pvip":false,"replies":[{"id":"53607","content":"没有直接关系，不过，有点关系，数据规模n影响代码的循环次数。一般代码的执行次数会表示成数据规模n的表达式。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580689,"ip_address":"","comment_id":138087,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570017147","product_id":100017301,"comment_content":"文章里的n先表示了代码循环次数，然后又表示了数据规模。请问作者这两个是一样的吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469377,"discussion_content":"没有直接关系，不过，有点关系，数据规模n影响代码的循环次数。一般代码的执行次数会表示成数据规模n的表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661411,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erD0FZP5UKVMGgkjounHpFEkAaLVicEQ9yGF3icELTp61yREDISQfwpBebyE2S5sHIcWyjjhKo1pWQQ/132","nickname":"mier","note":"","ucode":"2EDF4D982DD956","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24248,"discussion_content":"我懂了。循环次数为n是数据规模为n造成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570069981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137970,"user_name":"Lance","can_delete":false,"product_type":"c1","uid":1686840,"ip_address":"","ucode":"CCE52F86EEBBED","user_header":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","comment_is_top":false,"comment_ctime":1569945256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569945256","product_id":100017301,"comment_content":"渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。<br>渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。<br>相比性能测试分析，复杂度分析不依赖测试环境，通过掌握复杂度分析能编写出执行效率更优的算法。<br><br>三种时间复杂度分析方法：<br>1.关注循环次数最多的一段代码；<br>2.加法法则(单数据规模)，取量级最大的复杂度；<br>3.乘法法则(单数据规模)：取嵌套代码内外复杂度乘积；<br><br>非多项式量级 NP(Non_Deterministic Polynomial)： O(2^n)、O(n!)<br>其表现为当数据规模n越来越大时，算法的执行时间会急剧增加，求解问题的执行时间会无限增长。<br><br>O(logn)复杂度示例：<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br>通过2^x=n求解x可以得出时间复杂度，x=log2n，故时间复杂度为O(log2n)，由于对数可以相互转化，并且低阶、常量、系数三部分并不左右增长趋势，可以忽略，所以O(log2n)=O(logn)<br><br>另外，空间复杂度分析是否遵循时间复杂度分析三种原则呢？","like_count":0},{"had_liked":false,"id":137955,"user_name":"许智鸿","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","comment_is_top":false,"comment_ctime":1569937009,"is_pvip":false,"replies":[{"id":"53093","content":"会的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570026867,"ip_address":"","comment_id":137955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569937009","product_id":100017301,"comment_content":"老师，现在提出疑问的话，您以后还会给回复吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469323,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570026867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137954,"user_name":"许智鸿","can_delete":false,"product_type":"c1","uid":1655563,"ip_address":"","ucode":"18E41503CC43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/43/0b/25ff73e0.jpg","comment_is_top":false,"comment_ctime":1569936909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569936909","product_id":100017301,"comment_content":"性能测试只是算法在当下环境下的运算性能。但复杂度分析指的却是，算法的执行效率与数据规模之间的关系。","like_count":0},{"had_liked":false,"id":137427,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1569739289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569739289","product_id":100017301,"comment_content":"肯定有同学百度： log2为底数的算法是: LOG2(N) 相当于2的多少次方(立方)等于N 例:LOG2(8)=3 相当于,2的3次方等于8","like_count":0},{"had_liked":false,"id":137271,"user_name":"长大了","can_delete":false,"product_type":"c1","uid":1453898,"ip_address":"","ucode":"066412BC980EED","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/4a/af54bde7.jpg","comment_is_top":false,"comment_ctime":1569674022,"is_pvip":false,"replies":[{"id":"52760","content":"嵌套循环用乘法法则","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569709833,"ip_address":"","comment_id":137271,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569674022","product_id":100017301,"comment_content":"<br>奇怪。依据第三点 乘法规律<br> 为什么不是M*N 而是M+N。换句话都什么时候用乘 什么时候用加呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469010,"discussion_content":"嵌套循环用乘法法则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569709833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137077,"user_name":"為之一","can_delete":false,"product_type":"c1","uid":1674350,"ip_address":"","ucode":"20F89A8B9810D1","user_header":"https://static001.geekbang.org/account/avatar/00/19/8c/6e/8ecea194.jpg","comment_is_top":false,"comment_ctime":1569591659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569591659","product_id":100017301,"comment_content":"性能测试——实践；复杂度分析——理论；<br>二者相辅相成，能便于我们更好地分析代码。","like_count":0},{"had_liked":false,"id":136228,"user_name":"薀渘の說脕鮟","can_delete":false,"product_type":"c1","uid":1257600,"ip_address":"","ucode":"6E1978D1002392","user_header":"https://static001.geekbang.org/account/avatar/00/13/30/80/4541f805.jpg","comment_is_top":false,"comment_ctime":1569391274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569391274","product_id":100017301,"comment_content":"打卡 O(1)&lt;O(nlogn)&lt;O(n)&lt;O(nlogn)&lt;O(n平方）&lt;O(2的n次方)&lt;O(n的阶乘）","like_count":0},{"had_liked":false,"id":136218,"user_name":"王興亮","can_delete":false,"product_type":"c1","uid":1019522,"ip_address":"","ucode":"FAFC68A3FFC3BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/82/ca714b4f.jpg","comment_is_top":false,"comment_ctime":1569387954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569387954","product_id":100017301,"comment_content":"复杂度分析只是一种评估手段，用来在多种可能的情况下做出一个相对比较好的选择。","like_count":0},{"had_liked":false,"id":135802,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1590085,"ip_address":"","ucode":"EAE3B94B57832A","user_header":"https://static001.geekbang.org/account/avatar/00/18/43/45/422ca0dd.jpg","comment_is_top":false,"comment_ctime":1569283317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569283317","product_id":100017301,"comment_content":"f(n)可以理解为编程中的函数","like_count":0},{"had_liked":false,"id":135198,"user_name":"北顾-岛城","can_delete":false,"product_type":"c1","uid":1433568,"ip_address":"","ucode":"54ECB3E5E4073A","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/e0/ce671992.jpg","comment_is_top":false,"comment_ctime":1569058401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569058401","product_id":100017301,"comment_content":"不是多此一举吧，虽然目前没有实战项目经验，但是感觉项目性能测试涉及的测试内容过于广，而算法的复杂度分析好像更针对于某一段代码的性能。而且对代码进行复杂度分析也不需要对每段代码都进行吧，感觉只需要对关键业务和算法部分进行分析优化即可。","like_count":0},{"had_liked":false,"id":134697,"user_name":"junjun","can_delete":false,"product_type":"c1","uid":1547322,"ip_address":"","ucode":"1F7EE146B9BE04","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/3a/bfd73920.jpg","comment_is_top":false,"comment_ctime":1568897441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568897441","product_id":100017301,"comment_content":"应该是O（max（m，n））吧，不应该是O(m + n)","like_count":0},{"had_liked":false,"id":134676,"user_name":"Become a architect","can_delete":false,"product_type":"c1","uid":1248265,"ip_address":"","ucode":"6F1C9B183095E4","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/09/a46ad0a6.jpg","comment_is_top":false,"comment_ctime":1568891289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568891289","product_id":100017301,"comment_content":"还记得第四个学习技巧吗？知识需要沉淀，不要试图一次就掌握。看第二遍的时候懂了空间复杂度，懂了时间复杂度logn。思考题也能够回答上来了（参考留言区的答案）。这些都是看第一遍（去年看的）没有理解的。","like_count":0},{"had_liked":false,"id":134223,"user_name":"院长。","can_delete":false,"product_type":"c1","uid":1153546,"ip_address":"","ucode":"DF56871F42A868","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/0a/da55228e.jpg","comment_is_top":false,"comment_ctime":1568777509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568777509","product_id":100017301,"comment_content":"“所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比”<br>第二个例子后的这句话是错误的，第一个例子是成正比，第二个例子刻意说是与n方成正比或与n正相关，而不能说是与n成正比。","like_count":0},{"had_liked":false,"id":134044,"user_name":"don","can_delete":false,"product_type":"c1","uid":1340128,"ip_address":"","ucode":"82BACA83063B57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8m96uYNX9WcJLXJGic3F9StzdjPyZhKW0RzpvYkVfgsuM9q4GuCSvJ5rslJgClEJg3ImXUEHXkbmNxmrAOiaxKtw/132","comment_is_top":false,"comment_ctime":1568728560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568728560","product_id":100017301,"comment_content":"讲得挺好的，就是对数那里卡了半天，又复习了遍高中数学的公式","like_count":0},{"had_liked":false,"id":133961,"user_name":"Geek_Bin","can_delete":false,"product_type":"c1","uid":1666251,"ip_address":"","ucode":"D8AFDBB1155299","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rIFgFBXjOuUkkMM9T0In0c6lFGb1KG18gUgaFzJAlFFrQA0KqyqLOmHUycmGgSb4z1RGK2waw3Msf21lWRI4WA/132","comment_is_top":false,"comment_ctime":1568708004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568708004","product_id":100017301,"comment_content":"时间复杂度分析，只是在写代码的时候有个理性的感知，这样就可以大概估计代码的性能。","like_count":0},{"had_liked":false,"id":133709,"user_name":"proletariat","can_delete":false,"product_type":"c1","uid":1538976,"ip_address":"","ucode":"7F0D30F849A104","user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/a0/cd6d6966.jpg","comment_is_top":false,"comment_ctime":1568639889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568639889","product_id":100017301,"comment_content":"写得真好","like_count":0},{"had_liked":false,"id":133265,"user_name":"SKY","can_delete":false,"product_type":"c1","uid":1664720,"ip_address":"","ucode":"62112C63C06A35","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/d0/726cbac6.jpg","comment_is_top":false,"comment_ctime":1568471226,"is_pvip":false,"replies":[{"id":"51225","content":"嗯嗯，你说的没错，第2、3行一样。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568589009,"ip_address":"","comment_id":133265,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568471226","product_id":100017301,"comment_content":" i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br>老师，这段代码为什么是第三行循环最多，不是应该第二行和第三行是一样的吗不都循环了n次吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467324,"discussion_content":"嗯嗯，你说的没错，第2、3行一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568589009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133260,"user_name":"java爱好进阶者","can_delete":false,"product_type":"c1","uid":1661665,"ip_address":"","ucode":"A2B13BC3DDD2A1","user_header":"","comment_is_top":false,"comment_ctime":1568468978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568468978","product_id":100017301,"comment_content":"总结:<br>时间复杂度分析法则<br>1.只关注循环执行次数最多的一段代码<br>2.加法法则:总复杂度等于量级最高的那段代码的复杂度乘法法则:嵌套代码的复杂度等于嵌套内外复杂度的乘乘积<br>时间复杂度主要分为两大类:<br>1.多项式量级<br>O（1），O（logn），O（n），O（nlogn），O（n2）<br>2.非多项式量级<br>O（2n），O（n!），这是非常低效的算法。<br>时间空间复杂度分析的方法需要多练。","like_count":0},{"had_liked":false,"id":132468,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1568128909,"is_pvip":false,"replies":[{"id":"51232","content":"自己研究下吧：）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568589781,"ip_address":"","comment_id":132468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568128909","product_id":100017301,"comment_content":"老师 我想问下, jdk8 的 stream 的搜集操作  比如 collectors.tolist 时间复杂度是 O(n) 吗 两个 collectors.tolist 嵌套 是 O(n^2) 吗<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466955,"discussion_content":"自己研究下吧：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568589781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132089,"user_name":"Alee","can_delete":false,"product_type":"c1","uid":1435886,"ip_address":"","ucode":"44E9EF8A9AC18E","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/ee/a807d959.jpg","comment_is_top":false,"comment_ctime":1568021387,"is_pvip":false,"replies":[{"id":"51233","content":"你理解的没错。不过，你也可以把i=1、2、。。。n带入到f(i)中，然后展开看下。总的时间应该是T(f(1))+T(f(2)) +...T(f(n))=1+2+..n=O(n^2)","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568590036,"ip_address":"","comment_id":132089,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568021387","product_id":100017301,"comment_content":"不知道老师还能不能看见，我有一个问题想问一下：<br>int cal(int n) {<br>  int ret = 0;<br>  int i = 1;<br>  for(: i &lt; n: ++i) {<br>    ret = ret + f(i);<br>  }<br>  return ret;<br>}<br><br>int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (;  i &lt; n; ++i) {<br>    sum =sum + i;<br>  }<br>  return sum;<br>}<br><br>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n2)。<br><br>问题是：**T(n) = T1(n) * T2(n) = O(n*n) 是不是不该等于 O(n2)。因为此时n不是同一个数，比如f()函数参数是m，那时间复杂度应该是 O(n*m)吧？**<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466756,"discussion_content":"你理解的没错。不过，你也可以把i=1、2、。。。n带入到f(i)中，然后展开看下。总的时间应该是T(f(1))+T(f(2)) +...T(f(n))=1+2+..n=O(n^2)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568590036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132072,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1568018608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568018608","product_id":100017301,"comment_content":"多个变量的复杂度是因为复杂度的驱动变量不只一个，而且变量的相对大小未知，如果知道变量的相对大小，复杂度往往可以合并，例如图算法深度优先算法的复杂度O(e+v),如果事先知道是稠密图，e&gt;v,可以简化为O(e)。","like_count":0},{"had_liked":false,"id":131054,"user_name":"warriorup","can_delete":false,"product_type":"c1","uid":1583229,"ip_address":"","ucode":"5FD681A309B700","user_header":"","comment_is_top":false,"comment_ctime":1567610942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567610942","product_id":100017301,"comment_content":"我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度，是应该这样做，因为复杂度分析不依赖执行环境，易于操作。对于每一段代码分析时间和空间复杂度，可以提高自己的分析能力并且编写出性能更加优良的代码，提升程序的性能，降低系统维护成本。<br><br>","like_count":0},{"had_liked":false,"id":130949,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1567582498,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567582498","product_id":100017301,"comment_content":"不是多此一举：就像作者所讲的，每次性能测试只能针对具体的配置环境，换一个配置环境，测试的结果会差很多；每次测试的数据的不同也会影响测试结果。而计算程序的时间复杂度和空间复杂度，则是纯粹且不受配置环境和数据的不同影响的。","like_count":0},{"had_liked":false,"id":130834,"user_name":"A米fans1111","can_delete":false,"product_type":"c1","uid":1239504,"ip_address":"","ucode":"99BE48333DD919","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/d0/af96c86a.jpg","comment_is_top":false,"comment_ctime":1567558252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567558252","product_id":100017301,"comment_content":"我优化旧系统时的思路。<br>先干掉和转化掉，无意义的递归，再优化循环内的计算。多用merge  归并。<br>然后和产品trade off  少做无聊的事。<br>","like_count":0},{"had_liked":false,"id":130452,"user_name":"conan","can_delete":false,"product_type":"c1","uid":1457315,"ip_address":"","ucode":"059982F1AEE0BB","user_header":"https://static001.geekbang.org/account/avatar/00/16/3c/a3/050f7ac9.jpg","comment_is_top":false,"comment_ctime":1567469260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567469260","product_id":100017301,"comment_content":"老师好，对数函数必过(1,0)点，时间复杂度曲线图nlogn也过那个点","like_count":0},{"had_liked":false,"id":130047,"user_name":"刘畅","can_delete":false,"product_type":"c1","uid":1272231,"ip_address":"","ucode":"6D9F1795FD8A52","user_header":"https://static001.geekbang.org/account/avatar/00/13/69/a7/06b75b24.jpg","comment_is_top":false,"comment_ctime":1567368542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567368542","product_id":100017301,"comment_content":"时间空间复杂度绝对不是浪费时间。<br>举一个例子，即使是为了测试，工程师也应该在测试前对代码的复杂度心里有数。不然如果一段有问题的时间或空间复杂度极高的代码隐藏在要测试代码块里，这段代码一旦被运行起来就可能吃掉机器上所有的内存资源或完全占用某个cpu core. 这有直接会导致其他在本机运行的程序受到影响。所以懂得基本的时间复杂度是必备的能力。<br>老师讲的很清楚，赞！！<br>如果有一些关键名词配上英文翻译就更好了，例如“加法法则”这种对应到英文不知道是否有专有的名字对应，自己按意思翻译还是感觉不准确。","like_count":0},{"had_liked":false,"id":130023,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1640973,"ip_address":"","ucode":"2C0D1D26853DB3","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","comment_is_top":false,"comment_ctime":1567353164,"is_pvip":false,"replies":[{"id":"48475","content":"没有的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567377424,"ip_address":"","comment_id":130023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567353164","product_id":100017301,"comment_content":"老师，这个课程有没有pdf版的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465767,"discussion_content":"没有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567377424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129916,"user_name":"丶诸葛","can_delete":false,"product_type":"c1","uid":1647699,"ip_address":"","ucode":"8D350377BA8E4C","user_header":"https://static001.geekbang.org/account/avatar/00/19/24/53/e9965fe1.jpg","comment_is_top":false,"comment_ctime":1567325770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567325770","product_id":100017301,"comment_content":"### 为什么需要复杂度分析<br><br>数据结构与算法试图达成的目的是：以尽可能省空间、时间的方式解决一个问题。<br><br>如何评价空间和时间的开销就是复杂度分析要解决的问题，这是复杂度分析所存在的意义。<br><br>另外，尽管现在已经有不少“马后炮”式的性能分析程序了，甚至实时查看系统运行的效率、开销等等。复杂度分析还有存在的必要性吗？为什么不写完程序以后上机测试？<br><br>- 上机测试受测试机器性能影响<br><br>  不同机器由于性能不同，执行同一程序时所耗费的时间不一，一个低效算法在一台超级计算机上的运行时间很可能会比在高效算法在一台低级计算机上运行的时间短，这也达不到比较算法效率的目的。从统计学原理来看，测试的机器就是混淆变量，我们的目的是探讨算法本身的效率差异，而机器的性能会混淆视听，导致我们无法明确解释是否是算法本身的优劣导致了程序在测试机器上的表现。<br><br>- 上机测试受数据影响较大<br><br>  对于排序算法而言，如果测试数据本身本身就极具有顺序性，上机测试时间肯定短，不能真实反映算法的优劣。同样，数据也就像是混淆变量。当然，也许用采样的概念更为重要，除非能够保证对测试数据的采样具有代表性，否则要想测试出算法的效率，总会存在偏颇。然而，这种对于测试数据的要求会加大算法测试成本<br><br>综上所属，人为地根据代码进行算法复杂度分析仍然是必要的，我们需要一种不需要具体测试数据来测试就可以粗略估计算法 执行效率的方法，即时间复杂度、空间复杂度分析方法。<br><br><br><br>### 目前流行的复杂度分析方法<br><br>分析复杂度主要从时间、空间上考虑。时间复杂度就是考虑算法执行时间与数据规模的关系，空间复杂度即考虑程序所占用存储空间资源与数据规模的关系，一般来说，时间复杂度和空间复杂度是一个矛盾，要减少一个算法的时间复杂度就很有可能要牺牲空间复杂度。（是否必然要以牺牲其一为代价来优化其二？）<br><br><br><br>#### 时间复杂度分析<br><br>假设每行代码的执行时间一样。那么所有代码的执行时间与每行代码的执行次数成正比。当采用大O表示法表示算法的时间复杂度时，只需要考虑最高阶（类似泰勒公式的主部），忽略低阶、常数阶、系数；本质上就是只考虑能够反映执行时间整体变化趋势的部分（最高阶复杂度）。<br><br>对于时间复杂度分析有一些技巧：<br><br>1. 只关注循环次数最多的代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br><br><br>通常来说，时间复杂度会有$O(1)$、$O(logn)$、$O(n)$、$O(nlogn)$、$O(n^2)$、$O(2^n)$、$O(n!)$<br><br>#### 空间复杂度分析<br><br>空间复杂度表示算法的存储空间与数据规模之间的增长关系，其分析相对比较简单，主要看申请的存储空间与数据规模是否有关系，关系如何。","like_count":0},{"had_liked":false,"id":127936,"user_name":"皮蛋蛋","can_delete":false,"product_type":"c1","uid":1025495,"ip_address":"","ucode":"679A447D0B9A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/d7/ce5bea6f.jpg","comment_is_top":false,"comment_ctime":1566811627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566811627","product_id":100017301,"comment_content":"任何算法都是针对场景的，并不是复杂度越低最后的执行时间就越少，和数据量的大小还有单位代码的执行时间都有关系，当要实际解决一个问题时一定要根据具体的业务场景进行分享，并采用了最优的算法，<br>性能测试和具体的代码分析其实并不冲突，而是相辅相成的，代码分析是可以在开发的同时进行的，具有灵活性和且比较快速，在分析的时候也是对代码的review,可能会有意外之喜（发现bug），同时也能学习别人的编程思路，且不会浪费太多的时间，所以平时coding时要有这样复杂度分析的思维","like_count":0},{"had_liked":false,"id":127604,"user_name":"vvvvvvvv","can_delete":false,"product_type":"c1","uid":1639972,"ip_address":"","ucode":"9DD8DA3DFFB744","user_header":"https://static001.geekbang.org/account/avatar/00/19/06/24/742bd9e8.jpg","comment_is_top":false,"comment_ctime":1566747732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566747732","product_id":100017301,"comment_content":"可以给我们一个感性的认识","like_count":0},{"had_liked":false,"id":127169,"user_name":"巫山老妖","can_delete":false,"product_type":"c1","uid":1056037,"ip_address":"","ucode":"B35E2CF1B3B04E","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/25/c4cc1e9f.jpg","comment_is_top":false,"comment_ctime":1566574856,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1566574856","product_id":100017301,"comment_content":"并不是多此一举，有意思的去分析自己写的代码的时间复杂度和空间复杂度会更容易评估代码执行效率，做性能优化的时候也有办法着手，最终才能达到可量化。","like_count":0},{"had_liked":false,"id":127124,"user_name":"听雨轩","can_delete":false,"product_type":"c1","uid":1109204,"ip_address":"","ucode":"A96D5CFCF784CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/d4/1e628174.jpg","comment_is_top":false,"comment_ctime":1566561086,"is_pvip":false,"replies":[{"id":"47236","content":"复杂度表示一个笼统的量级，常量可以忽略，你再看下文章","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566773231,"ip_address":"","comment_id":127124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566561086","product_id":100017301,"comment_content":"在for循环的时候，i&lt;n 与 i&lt;=n 的复杂度为什么都是n啊，&lt;n的不是n-1嘛","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464330,"discussion_content":"复杂度表示一个笼统的量级，常量可以忽略，你再看下文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566773231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126246,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566352640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566352640","product_id":100017301,"comment_content":"10个数据结构\t10个算法<br>数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树\t递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、溯算法、动态规划、字符串匹配算法<br>","like_count":0},{"had_liked":false,"id":126245,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566352628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566352628","product_id":100017301,"comment_content":"算法的五大特性<br>\t1. 输入: 算法具有0个或多个输入<br>\t2. 输出: 算法至少有1个或多个输出<br>\t3. 有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成<br>\t4. 确定性：算法中的每一步都有确定的含义，不会出现二义性<br>\t5. 可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成<br>","like_count":0},{"had_liked":false,"id":126244,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566352622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566352622","product_id":100017301,"comment_content":"所消耗的时间从小到大：O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(n^n)","like_count":0},{"had_liked":false,"id":126243,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566352605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566352605","product_id":100017301,"comment_content":"常见时间复杂度<br>执行次数函数举例\t阶\t非正式术语<br>12\tO(1)\t常数阶<br>5log2n+20\tO(logn)\t对数阶<br>2n+3\tO(n)\t线性阶<br>2n+3nlog2n+19\tO(nlogn)\tnlogn阶(归并排序&#47;快排)<br>3n2+2n+1\tO(n2)\t平方阶<br>6n3+2n2+3n+4\tO(n3)\t立方阶<br>2^n\tO(2^n)\t指数阶<br>5!\tO(n!)\t阶乘<br>5^5\tO(n^n)\t<br>","like_count":0},{"had_liked":false,"id":126242,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1566352594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566352594","product_id":100017301,"comment_content":"时间复杂度分析：<br>\t1. 只关注循环次数最多的一段代码<br>\t2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>\t3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>渐进时间复杂度：表示算法的执行时间与数据规模之间的增长关系<br>渐进空间复杂度：表示算法的存储空间与数据规模之间的关系<br>","like_count":0},{"had_liked":false,"id":125759,"user_name":"wrzgeek","can_delete":false,"product_type":"c1","uid":1031589,"ip_address":"","ucode":"69C4980053E388","user_header":"","comment_is_top":false,"comment_ctime":1566259293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566259293","product_id":100017301,"comment_content":"笔记：<br>(1)计算时间复杂度的两个基本原则，并列的用加法，嵌套的用乘法。在有多个不确定变量的时候m,n，要把多个变量都考虑在内<br>(2)常见的时间复杂度，依次递增。O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^x) &lt; O(2^n) &lt; O(n!)<br>O(2^n),O(n!)是非多项式量级，要尽量避免使用这个量级的算法--NP难问题<br>思考：<br>进行复杂度分析，可以对代码的运行效率有一个整体的把握，也就是对其运行效率属于哪一个数量级上我们是心中有数的，这样即使环境不一致，整体性能如何是可控的。<br>还有就是即使进行性能测试，也无法把所有场景都考虑在内，特别是最坏的情况无法事先预知，这样如果对代码的性能没有一个整体把握的话，直接上线风险是很高的，会导致一些不可控的事故发生。","like_count":0},{"had_liked":false,"id":124921,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1236917,"ip_address":"","ucode":"451A1036809F1F","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/b5/962e47a5.jpg","comment_is_top":false,"comment_ctime":1566015621,"is_pvip":false,"replies":[{"id":"46785","content":"后面章节有书单推荐","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566422561,"ip_address":"","comment_id":124921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566015621","product_id":100017301,"comment_content":"我最近在学怎么分析算法的时间复杂度。请问您还有什么比较好的书可以学","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463359,"discussion_content":"后面章节有书单推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566422561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124608,"user_name":"Gasink","can_delete":false,"product_type":"c1","uid":1632732,"ip_address":"","ucode":"128B032A793E42","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/dc/aa600641.jpg","comment_is_top":false,"comment_ctime":1565926874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565926874","product_id":100017301,"comment_content":"课后思考：<br>1. 如果是先做性能测试再做复杂度分析的话，复杂度分析有必要，因为性能测试依赖测试环境并且受数据规模影响很大，复杂度分析可以得到一个通用的结果。如果是先做复杂度分析再做性能测试，也有必要，因为实践是检验真理的唯一标准，并且项目最终的目的都是为了落地。<br><br>2. 经过老师这堂课的讲解，复杂度分析并不需要大规模的计算，很多时候瞄一眼就看出来了。即便是代码量很大，也可以通过「分治」的思想，将多段代码结合到一起分析，求出总的时间复杂度。因此并不是浪费时间。","like_count":0},{"had_liked":false,"id":124597,"user_name":"Gasink","can_delete":false,"product_type":"c1","uid":1632732,"ip_address":"","ucode":"128B032A793E42","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/dc/aa600641.jpg","comment_is_top":false,"comment_ctime":1565925924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565925924","product_id":100017301,"comment_content":"这里的「加法法则」改为「取最大法则」会不会更贴合","like_count":0},{"had_liked":false,"id":124364,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1565867045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565867045","product_id":100017301,"comment_content":"这个不浪费时间，和磨刀不误砍菜工有异曲同工之效。在撸码之前考虑复杂度，以后就会在性能问题上少填点坑","like_count":0},{"had_liked":false,"id":124101,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1565826347,"is_pvip":false,"replies":[{"id":"45683","content":"看到后面会有讲到的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565907285,"ip_address":"","comment_id":124101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565826347","product_id":100017301,"comment_content":"数据规模不是很大时，算法之间的差异很小，算法该如何选择","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463012,"discussion_content":"看到后面会有讲到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565907285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123972,"user_name":"isea_you","can_delete":false,"product_type":"c1","uid":1015440,"ip_address":"","ucode":"8D6CBABACED5FE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/90/21db58fd.jpg","comment_is_top":false,"comment_ctime":1565786217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565786217","product_id":100017301,"comment_content":"2019.8.14阅","like_count":0},{"had_liked":false,"id":123365,"user_name":"looper","can_delete":false,"product_type":"c1","uid":1238396,"ip_address":"","ucode":"DA4BCE83836C04","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/7c/2a5a418b.jpg","comment_is_top":false,"comment_ctime":1565661946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565661946","product_id":100017301,"comment_content":"性能测试是查漏补缺，时间、空间复杂度分析是为了写出效率更高更简洁代码","like_count":0},{"had_liked":false,"id":122375,"user_name":"刘学习来学习","can_delete":false,"product_type":"c1","uid":1464013,"ip_address":"","ucode":"5078B1EC8D8A66","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/cd/0add8290.jpg","comment_is_top":false,"comment_ctime":1565352548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565352548","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":122320,"user_name":"超🌱🐏","can_delete":false,"product_type":"c1","uid":1607835,"ip_address":"","ucode":"2F27250E801DEB","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/9b/32df8d51.jpg","comment_is_top":false,"comment_ctime":1565338353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565338353","product_id":100017301,"comment_content":"有人说，我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？<br>而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？你怎么看待这个问题呢？<br><br>答: 認為不是多此一舉，恰句是考量到時間成本，一些代碼在現今計算機裡面執行效率往往超乎你的預期（死循環除外），至少我這些許年裡面寫的代碼，就算是再爛也不至於加載個３，４秒才能加載完。所以小的初始項目沒必要一開始就來做分析，等有需要才來做分析還差不多。<br><br>另外每一行代碼都分析確實有浪費時間之嫌，前提是我們有學習算法的情況下。畢竟當你學習過複雜度分析以後，一些常量，系統，低階和最大量級的代碼你一眼就能看的出來了，何必每段分析。","like_count":0},{"had_liked":false,"id":121626,"user_name":"Geek_38298d","can_delete":false,"product_type":"c1","uid":1623660,"ip_address":"","ucode":"D925B1ED7A1449","user_header":"","comment_is_top":false,"comment_ctime":1565170430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565170430","product_id":100017301,"comment_content":"幸好学过邓俊辉老师的数据结构。。这块扫一眼就明白","like_count":0},{"had_liked":false,"id":120786,"user_name":"三硝基甲苯","can_delete":false,"product_type":"c1","uid":1141929,"ip_address":"","ucode":"C492B058C2A5C0","user_header":"","comment_is_top":false,"comment_ctime":1564995479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564995479","product_id":100017301,"comment_content":"个人认为，算法在不同测试数据数量是不一样的，所以还是需要做好空间和时间复杂度分析","like_count":0},{"had_liked":false,"id":120577,"user_name":"杨舒杰","can_delete":false,"product_type":"c1","uid":1248195,"ip_address":"","ucode":"EDEC611B6AFFF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/c3/dc571165.jpg","comment_is_top":false,"comment_ctime":1564931911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564931911","product_id":100017301,"comment_content":"1、不是多此一举。<br>      性能测试有缺陷：<br>          ① 性能测试与硬件的关系很大<br>          ② 性能测试对数据量，数据规模并不能穷尽所有<br>      算法的时间复杂度，空间复杂度，关注点是趋势，和性能测试关注点并不一样，两者并不冲突。<br><br>2、凡事都要注意一个量，毒药与解药之间向差的就是量。对算法复杂的代码做复杂度分析的是有必要的，对简单的代码，并不需要做复杂度分析。至于怎么区分什么是算法复杂的代码，就需要编程经验告诉你了<br>     ","like_count":0},{"had_liked":false,"id":120548,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1564927475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564927475","product_id":100017301,"comment_content":"做时间复杂度分析，不是为了代码后修改，而是在写代码的时候就确定用什么数据结构，而且时间复杂度在数据量小的时候是测试不出数据结构差距的","like_count":0},{"had_liked":false,"id":120435,"user_name":"Joiner","can_delete":false,"product_type":"c1","uid":1071941,"ip_address":"","ucode":"7F67D4C325E71F","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/45/5dc5437e.jpg","comment_is_top":false,"comment_ctime":1564892496,"is_pvip":false,"replies":[{"id":"44222","content":"haha，是的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564959874,"ip_address":"","comment_id":120435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564892496","product_id":100017301,"comment_content":"老师，我钻个牛角尖，for (; i &lt;= n; ++i) 这个for循环，是不是也可以说执行了2n次？i&lt;=n和++i各执行了n次","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461333,"discussion_content":"haha，是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564959874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119818,"user_name":"here45","can_delete":false,"product_type":"c1","uid":1356814,"ip_address":"","ucode":"364939030D10F3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ic9yic7IAQNFMWdncBVNtZIiaCiaZQ65LYrD6ZrCOyAiabtsibq8Q0BmI3uXicGfVSQUQ8UqwbPUFn7N5VxIHO5hmEEdg/132","comment_is_top":false,"comment_ctime":1564708031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564708031","product_id":100017301,"comment_content":"很有必要，因为常常一个问题可以有多种解法，那么哪种方法更好，这就需要一把衡量的&quot;尺子&quot;，而时间复杂度、空间复杂度分析就是这样一把尺子。","like_count":0},{"had_liked":false,"id":119667,"user_name":"JJj","can_delete":false,"product_type":"c1","uid":1196463,"ip_address":"","ucode":"EA53F2CEAFCFF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/af/4307867a.jpg","comment_is_top":false,"comment_ctime":1564649271,"is_pvip":false,"replies":[{"id":"44225","content":"不，复杂度分析也包含栈上的消耗的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564960027,"ip_address":"","comment_id":119667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564649271","product_id":100017301,"comment_content":"请问下空间复杂度讨论的空间是不是非栈上空间？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461006,"discussion_content":"不，复杂度分析也包含栈上的消耗的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564960027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119664,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1564648628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564648628","product_id":100017301,"comment_content":"各种语言内置函数的空间复杂度咋算","like_count":0},{"had_liked":false,"id":119544,"user_name":"沙","can_delete":false,"product_type":"c1","uid":1377412,"ip_address":"","ucode":"131A5114452DE5","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/84/cb0a009b.jpg","comment_is_top":false,"comment_ctime":1564624155,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564624155","product_id":100017301,"comment_content":"大o时间复杂度并不是真正表示代码执行的时间，而是表示代码执行时间随着数据规模增长的变化趋势，即渐进时间复杂度。一语惊醒梦中人，常棒！","like_count":0},{"had_liked":false,"id":118975,"user_name":"Geek_26bedb","can_delete":false,"product_type":"c1","uid":1619375,"ip_address":"","ucode":"B7389175247C2D","user_header":"","comment_is_top":false,"comment_ctime":1564477848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564477848","product_id":100017301,"comment_content":"思考第一个问题：既然要做性能测试，为什么需要再写代码的时候计算代码的复杂度？<br>我理解的性能测试，是在设计多种情况下，检验代码的各种性能。而代码本身的复杂度考虑，在理论基础上可以初步判断出代码最坏情况下所需耗费时间以及空间容量，这可以为某些特别场景下，提前思考耗费时间过大或空间占量过大，是否存在其他解决方案。例如，并行计算或者分布式方式，提高运行速度；多台资源共同分担内存等方式。<br>问题二：而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间？<br>在项目测试之前，计算了每段代码的时间复杂度、空间复杂度，可以就不同段的代码进行修改，优化性能。并思考整体性如何降低代码的时间复杂度。从方便后续修改或者优化的角度出发，个人偏向于对每段代码及整体的复杂度有一定的了解，便于阶段性优化代码。<br><br>本节总结：<br>1）算法复杂度包含时间复杂度和空间复杂度。<br>2）时间复杂度，是指一段代码执行到结束所需时间。时间复杂度计算，可以从一句代码所需执行的最大次数进行计算，因此，含有循环结构的代码下，一般与n直接相关。换句话，即一段代码的基础代码行所需执行的最大次数即为所需的时间复杂度。举例：若含有一个循环，循环内执行语句需要n次，复杂度为O(n)。<br>3）空间复杂度，是指执行一段代码，在运行过程中所需耗费的内存空间。空间复杂度计算，可根据代码中设计的变量所需最大空间而定。举例:设计数组a的大小为n，但未有其他的变量占用空间大于n，则此段代码的空间复杂度为O(n);设计变量a = 3，类似这样的代码，空间复杂度为常量，即为O(1).","like_count":0},{"had_liked":false,"id":118647,"user_name":"Huiwang","can_delete":false,"product_type":"c1","uid":1041005,"ip_address":"","ucode":"13AA893713C65E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/6d/7604b872.jpg","comment_is_top":false,"comment_ctime":1564406004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564406004","product_id":100017301,"comment_content":"心中有数，编码有神","like_count":0},{"had_liked":false,"id":117383,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1564036507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564036507","product_id":100017301,"comment_content":"计算复杂度时，n趋向无穷大，但其实，平时用到的，只有大数据部门感觉才会有n很大的情况吧","like_count":0},{"had_liked":false,"id":117267,"user_name":"Galen Bao","can_delete":false,"product_type":"c1","uid":1557082,"ip_address":"","ucode":"31A58BA43DD80E","user_header":"https://static001.geekbang.org/account/avatar/00/17/c2/5a/8051e7f6.jpg","comment_is_top":false,"comment_ctime":1564017417,"is_pvip":false,"replies":[{"id":"43286","content":"自己研究吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564266964,"ip_address":"","comment_id":117267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564017417","product_id":100017301,"comment_content":"在js中map()   filter()方法的时间复杂度是O(N)吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459889,"discussion_content":"自己研究吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116073,"user_name":"海魂","can_delete":false,"product_type":"c1","uid":1126307,"ip_address":"","ucode":"850CB4FFA5C026","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/a3/6aadcde7.jpg","comment_is_top":false,"comment_ctime":1563781992,"is_pvip":false,"replies":[{"id":"42887","content":"拆了之后复杂度也是一样的。拆语句并不会减少或者增加复杂度的。复杂度跟n有关系，只是表示一个增长趋势，而不是具体的值。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564008946,"ip_address":"","comment_id":116073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563781992","product_id":100017301,"comment_content":" int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1;<br>     for (; j &lt;= n; ++j) {<br>       sum = sum +  i * j;<br>     }<br>   }<br> }<br>这段代码中，sum=sum+i*j  等价于int x=i*j;  sum=sum+x;<br>如果拆开写 复杂度是不是不一样呢 ，那平时写代码我们要怎么拆分，怎么断句从减少复杂度上考虑。请老师分析下  算法复杂度里  一个语句要怎么拆分","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459373,"discussion_content":"拆了之后复杂度也是一样的。拆语句并不会减少或者增加复杂度的。复杂度跟n有关系，只是表示一个增长趋势，而不是具体的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564008946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115754,"user_name":"ffflag","can_delete":false,"product_type":"c1","uid":1610605,"ip_address":"","ucode":"CE8180ED7BDDAE","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/6d/04c4dd7b.jpg","comment_is_top":false,"comment_ctime":1563718830,"is_pvip":false,"replies":[{"id":"42294","content":"两层for循环，i从1-n，j从1-n，所以最里面语句执行了n*n","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746717,"ip_address":"","comment_id":115754,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563718830","product_id":100017301,"comment_content":"为什么 在第二个案列中  sum=sum+i*j 这里出现了乘号，也没有按照O(logn)案例中出现的方法来分析呢，是因为这里使用的for吗。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459271,"discussion_content":"两层for循环，i从1-n，j从1-n，所以最里面语句执行了n*n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115319,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1607766,"ip_address":"","ucode":"B700673A43E9F2","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/56/089f7923.jpg","comment_is_top":false,"comment_ctime":1563531370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563531370","product_id":100017301,"comment_content":"感觉自己是有复杂度分析的概念的，但是就是常常没有其他方式来替代复杂度的代码，可能学习算法可以优化这种复杂度高的代码","like_count":0},{"had_liked":false,"id":115260,"user_name":"行走着的宋公子","can_delete":false,"product_type":"c1","uid":1002416,"ip_address":"","ucode":"3FA47B1580A327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b0/2ae78627.jpg","comment_is_top":false,"comment_ctime":1563519944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563519944","product_id":100017301,"comment_content":"2019年07月19日15:05:34 重读","like_count":0},{"had_liked":false,"id":115231,"user_name":"go at it again","can_delete":false,"product_type":"c1","uid":1607750,"ip_address":"","ucode":"008C4AF29236C4","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/46/deab14db.jpg","comment_is_top":false,"comment_ctime":1563514269,"is_pvip":false,"replies":[{"id":"42203","content":"对的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563575331,"ip_address":"","comment_id":115231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563514269","product_id":100017301,"comment_content":"n……是……规模？公式是求的次数，假设为x。其实也就是用一个有x的公式表示n。理解的对吧。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459020,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563575331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115017,"user_name":"超🌱🐏","can_delete":false,"product_type":"c1","uid":1607835,"ip_address":"","ucode":"2F27250E801DEB","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/9b/32df8d51.jpg","comment_is_top":false,"comment_ctime":1563453916,"is_pvip":false,"replies":[{"id":"42200","content":"你可以理解为执行的语句频度","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563575246,"ip_address":"","comment_id":115017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563453916","product_id":100017301,"comment_content":"老師，想了很久T(n)成正比是什麼概念和意思，沒想明白。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458929,"discussion_content":"你可以理解为执行的语句频度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563575246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114867,"user_name":"科科","can_delete":false,"product_type":"c1","uid":1396235,"ip_address":"","ucode":"12E340284D7D03","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJfibSnWiaHrSsLlhvXNrb2WKKiaOBciajkQGYEIxkk4U0fFGbefjTUq1ckp0REhvbQSyMZP6GrQdPPEg/132","comment_is_top":false,"comment_ctime":1563420330,"is_pvip":false,"replies":[{"id":"42296","content":"这个好难，我一时半会想不到：（等我好好想想","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563746858,"ip_address":"","comment_id":114867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563420330","product_id":100017301,"comment_content":"i = 2<br>while( i＜=n){<br>i=i²<br>}<br>请问老师，这个时间复杂度是多少","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458852,"discussion_content":"这个好难，我一时半会想不到：（等我好好想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563746858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114128,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1563240421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563240421","product_id":100017301,"comment_content":"复杂度分析可以在不依赖宿主环境的条件下测试在规模增长时的算法执行效率的变化程度，而事后统计法有两点缺陷，一是测量结果与宿主环境绑定，二是无法测量或预估规模增长的非常大时的性能。<br>此外，结合之前所学，有两点认识。<br>1. 粗调与精调。我将事前分析法即复杂度分析作为程序性能的粗调方法，而将事后分析法作为程序性能的精调方法，粗调让我们成千上万倍地接近目标，比如在超大规模时从o(n2)降到o(logn)，精调让我们几倍几倍地接近目标，比如我们通过调整哈希函数将时间复杂度常数的3降到了2，对比我们调整显微镜的操作，从来都是先粗调后精调。也就像我们制定计划时，必须现有长远目标再有短期目标，否则轻则绕路而至，重则越偏越远。<br>2. 阿姆达尔定律。阿姆达尔定律告诉我们，对系统的优化应当放在最能改善系统性能的地方，而复杂度分析就是这样一个工具，让我们能找到这样的地方。","like_count":0},{"had_liked":false,"id":113911,"user_name":"itsxun","can_delete":false,"product_type":"c1","uid":1599454,"ip_address":"","ucode":"69E6CEA3FCB4F3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOKzDVXse2WibsBGOR27GVYOlv8WRtFBfQe4ekNia2S5986QibD6Wv17gyDpZqmQt3kJcAcbhl3rroQ/132","comment_is_top":false,"comment_ctime":1563184266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563184266","product_id":100017301,"comment_content":"讲的真好！","like_count":0},{"had_liked":false,"id":113831,"user_name":"师恩磊","can_delete":false,"product_type":"c1","uid":1216657,"ip_address":"","ucode":"237A2B7D19E0A5","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/91/aebfb724.jpg","comment_is_top":false,"comment_ctime":1563166578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563166578","product_id":100017301,"comment_content":"都分析一下时间复杂度和空间复杂度，不浪费时间，因为，可以把程序运行时间做到心中有数。","like_count":0},{"had_liked":false,"id":113768,"user_name":"KAKAROTS","can_delete":false,"product_type":"c1","uid":1495938,"ip_address":"","ucode":"34DEC1B8FC44CD","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/82/5c54e368.jpg","comment_is_top":false,"comment_ctime":1563153578,"is_pvip":false,"replies":[{"id":"41570","content":"那应该是多少呢：）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563232975,"ip_address":"","comment_id":113768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563153578","product_id":100017301,"comment_content":"这里有一个表达不对的地方吧，T(n)=O(f(n)),文中说f(n)是每行代码执行次数的总和，但是却用到了T(n)=O(2n+2),2n+2并不是每行代码执行次数总和","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458376,"discussion_content":"那应该是多少呢：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563232975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113683,"user_name":"Geek_c42505","can_delete":false,"product_type":"c1","uid":1232899,"ip_address":"","ucode":"6421EB85640C44","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/03/2e632d36.jpg","comment_is_top":false,"comment_ctime":1563117407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563117407","product_id":100017301,"comment_content":"我认为时间复杂度和空间复杂度分析优势在于在程序员在设计初期就能选择执行效率或者空间效率更优秀的算法，从而有助于通过性能测试，而不是事先不考虑而等性能测试不达标再回头优化。","like_count":0},{"had_liked":false,"id":113381,"user_name":"王彬成","can_delete":false,"product_type":"c1","uid":1015045,"ip_address":"","ucode":"386803B8FC2DD5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/05/4bad0c7c.jpg","comment_is_top":false,"comment_ctime":1562989141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562989141","product_id":100017301,"comment_content":"我不认为多此一举。我在用乐扣刷题时，经常遇到计算时间过长，原因是时间复杂度或空间复杂度过大。那么如果按照那样的代码进行到生产环境中，将会给系统带来不可预测的负载。<br>学习了时间复杂度和空间复杂度，会让我们更加精进自己的代码","like_count":0},{"had_liked":false,"id":113290,"user_name":"huanyehappy","can_delete":false,"product_type":"c1","uid":1603969,"ip_address":"","ucode":"0A5372104B7EBE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLiaWKn5ibqO92ic7tzWrXEoZUuduaoRIiaf2icT7E1ia9ViaE2U8Tas9IgFhkpFXicKUHTdqVUPmHauS7XRg/132","comment_is_top":false,"comment_ctime":1562936633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562936633","product_id":100017301,"comment_content":"问题思考：<br>性能测试是结果，性能测试能通过需要保证时间复杂度和空间复杂度优化到一定程度。<br>本课收获：<br>1. 理解并明确了各个场景的时间复杂度计算 O(n), O(n^2),O(nlogn),O(logn),O(1)<br>2.第一次开始写课后留言啦","like_count":0},{"had_liked":false,"id":113110,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1217896,"ip_address":"","ucode":"947C5785A7EDF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/68/41546e8a.jpg","comment_is_top":false,"comment_ctime":1562898006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562898006","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":112064,"user_name":"Boy","can_delete":false,"product_type":"c1","uid":1598054,"ip_address":"","ucode":"4439504EF622DD","user_header":"https://static001.geekbang.org/account/avatar/00/18/62/66/1b95a010.jpg","comment_is_top":false,"comment_ctime":1562662886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562662886","product_id":100017301,"comment_content":" 抱歉代码粘贴，点了一下保存就留言了<br>int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br>","like_count":0},{"had_liked":false,"id":112063,"user_name":"Boy","can_delete":false,"product_type":"c1","uid":1598054,"ip_address":"","ucode":"4439504EF622DD","user_header":"https://static001.geekbang.org/account/avatar/00/18/62/66/1b95a010.jpg","comment_is_top":false,"comment_ctime":1562662816,"is_pvip":false,"replies":[{"id":"40813","content":"也可以理解为2*n，系数不影响时间复杂度的统计。因为我们也无法精确的度量单位语句的执行时间，都是粗略计算的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562712195,"ip_address":"","comment_id":112063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562662816","product_id":100017301,"comment_content":" 各位大神，为啥以下代码，第五行是n，不是2n个单位执行时间，明明一个判断又一个加法运算","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457556,"discussion_content":"也可以理解为2*n，系数不影响时间复杂度的统计。因为我们也无法精确的度量单位语句的执行时间，都是粗略计算的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562712195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111376,"user_name":"不会爬树的熊","can_delete":false,"product_type":"c1","uid":1499380,"ip_address":"","ucode":"E417D8D9D5FED2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6vz8MgZia6Xwdhayv9Jdnee7HfDYSAMTUtMAAVORMhiaN8bIM0QJibrQ5EDqB8o5pWE6FRuaqguwG86o5Gh90ruDw/132","comment_is_top":false,"comment_ctime":1562549103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562549103","product_id":100017301,"comment_content":"<br><br>又找到一句有用的:<br><br>非多项式量级只有两个：O(2n) 和 O(n!)。<br><br>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。","like_count":0},{"had_liked":false,"id":111182,"user_name":"Hxd","can_delete":false,"product_type":"c1","uid":1357303,"ip_address":"","ucode":"B8B04AA5738CC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","comment_is_top":false,"comment_ctime":1562500315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562500315","product_id":100017301,"comment_content":"分析复杂度的目的就是为了投入生产前进行算法调优。","like_count":0},{"had_liked":false,"id":111080,"user_name":"一颗大白菜","can_delete":false,"product_type":"c1","uid":1321226,"ip_address":"","ucode":"4A15D1CECD1853","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/0a/0ba09c68.jpg","comment_is_top":false,"comment_ctime":1562467426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562467426","product_id":100017301,"comment_content":"老师这里讲的NP时间复杂度，其实正确说法应该是NPC时间复杂度，是一个概念误解","like_count":0},{"had_liked":false,"id":111078,"user_name":"Skrpy","can_delete":false,"product_type":"c1","uid":1524904,"ip_address":"","ucode":"BB6CB4E9AA1712","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/a8/0ce75c8c.jpg","comment_is_top":false,"comment_ctime":1562467063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562467063","product_id":100017301,"comment_content":"我有个疑问：下面这段代码是文案里的3.O(m+n)、O(m*n)部分的。<br>int cal(int m, int n) {<br>  int sum_1 = 0;<br>  int i = 1;<br>  for (; i &lt; m; ++i) {<br>    sum_1 = sum_1 + i;<br>  }<br><br>  int sum_2 = 0;<br>  int j = 1;<br>  for (; j &lt; n; ++j) {<br>    sum_2 = sum_2 + j;<br>  }<br><br>  return sum_1 + sum_2;<br>}<br>老师说这里不可以用加法法则算时间复杂度","like_count":0},{"had_liked":false,"id":110564,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1562294702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562294702","product_id":100017301,"comment_content":"复杂度的分析是对IT从业者来说一个思维习惯，在以后的开发过程中养成了这个习惯，每次写代码时候都会考虑到代码复杂度的问题，是一个很好的提升代码质量的方法","like_count":0},{"had_liked":false,"id":110312,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1562228210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562228210","product_id":100017301,"comment_content":"大O表示执行时间与执行次数的正比关系<br>时间复杂度：<br>多项式：<br>O(1)<br>O(logn)<br>O(n)<br>O(nlogn)<br>O(n²)<br>非多项式：（性能非常差）<br>O(2ⁿ)<br>O(n!)<br>加法法则：<br>T(n)=O(max(f(n),g(n)))<br>或<br>T(m)+T(n)=O(f(m)+f(n))<br>乘法法则：<br>T(n)=O(f(n)*g(n))<br>或<br>T(m)*T(n)=O(f(m)*f(n))<br><br>空间复杂度：<br>O(1)<br>O(n)<br>O(n²)<br><br>","like_count":0},{"had_liked":false,"id":108910,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1561931907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561931907","product_id":100017301,"comment_content":"复杂度，另外的有些书里叫量级，本质上是一种极限思维，所有的这些公式和大学里学的微积分书里的极限公式完全一致。非常感谢老师总结出加法和乘法定理，我以前没有主动去用这些公式测量复杂度，用这两条定理确实可以极大的简化计算。","like_count":0},{"had_liked":false,"id":108909,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1561931504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561931504","product_id":100017301,"comment_content":"写代码的时候最好不要用选择量级高的方法（例如指数和阶乘），把量级限制在最低级别的多项式里。不得已选择指数级的，要严格控制输入，早点出错，避免无限制的等待。总体验收的时候测试量级高的，输入可能最大的部分。","like_count":0},{"had_liked":false,"id":108579,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1561810432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561810432","product_id":100017301,"comment_content":"算法的复杂度就是理论上程序的执行时间和数据规模之间的关联，不做精细的运算，只做大概的评估","like_count":0},{"had_liked":false,"id":108045,"user_name":"小时候可逗了","can_delete":false,"product_type":"c1","uid":1320668,"ip_address":"","ucode":"F48148EDD7428C","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/dc/fb7e7b6b.jpg","comment_is_top":false,"comment_ctime":1561653403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561653403","product_id":100017301,"comment_content":"渐进时间复杂度，简称时间复杂度，表示执行时间与数据规模之间的增长关系；渐进空间复杂度，简称空间复杂度，表示存储空间与数据规模之间的增长关系","like_count":0},{"had_liked":false,"id":107978,"user_name":"Geek_2000f5","can_delete":false,"product_type":"c1","uid":1590937,"ip_address":"","ucode":"91CB11D4C45642","user_header":"","comment_is_top":false,"comment_ctime":1561642952,"is_pvip":false,"replies":[{"id":"39119","content":"众口难调啊 而且专栏已经更新完了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561676774,"ip_address":"","comment_id":107978,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561642952","product_id":100017301,"comment_content":"老师可以用伪代码举例吗，没学过语言的小白看不懂例子有点难受","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455771,"discussion_content":"众口难调啊 而且专栏已经更新完了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561676774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107855,"user_name":"Geek_2000f5","can_delete":false,"product_type":"c1","uid":1590937,"ip_address":"","ucode":"91CB11D4C45642","user_header":"","comment_is_top":false,"comment_ctime":1561623520,"is_pvip":false,"replies":[{"id":"39118","content":"f表示操作，如果两个数据规模对应的操作相同，就用一个f表示","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561676740,"ip_address":"","comment_id":107855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561623520","product_id":100017301,"comment_content":"老师，我问个小白问题。。不同数据规模那段 ，乘法法则，为啥是O（f（m）* f （n））而不是O（f（m）*g （n））呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455707,"discussion_content":"f表示操作，如果两个数据规模对应的操作相同，就用一个f表示","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561676740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107064,"user_name":"x","can_delete":false,"product_type":"c1","uid":1472233,"ip_address":"","ucode":"75FA829EA820AB","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/e9/73ed6cc1.jpg","comment_is_top":false,"comment_ctime":1561452018,"is_pvip":true,"replies":[{"id":"38953","content":"时间复杂度是n的一段代码，被循环执行n次，就是n*n=n^2","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1561598392,"ip_address":"","comment_id":107064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561452018","product_id":100017301,"comment_content":"乘法法则有点懵，为什么不是2n而是n2","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455350,"discussion_content":"时间复杂度是n的一段代码，被循环执行n次，就是n*n=n^2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561598392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106014,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1561127090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561127090","product_id":100017301,"comment_content":"老师讲的很清楚，之前没看过对于基础部分这么细致的分析，这次更有了然于心的感觉","like_count":0},{"had_liked":false,"id":104426,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1560751743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560751743","product_id":100017301,"comment_content":"时间复杂度分析，前提是数据结构和算法。如果没有这两个，想必，时间复杂度的概念也不会出现。数据结构和算法的概念要搞清楚。","like_count":0},{"had_liked":false,"id":102935,"user_name":"Charley Choi 🎃","can_delete":false,"product_type":"c1","uid":1235154,"ip_address":"","ucode":"E43371C6B2BBDA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d2/8bc05ccf.jpg","comment_is_top":false,"comment_ctime":1560331060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560331060","product_id":100017301,"comment_content":"【课后思考】在做项目时先进行性能测试，再做代码的时间复杂度、空间复杂度分析，就会有如同文章所讲的事后统计法问题。进行性能测试的代码严重依赖于测试环境，如果开发过程中不注重复杂度分析，在部署时的环境性能没有测试环境好，这时就会出现问题。至于是否浪费时间在复杂度分析上，这个应该视具体情况而定。在对性能要求比较高的业务上，对代码的质量应该精益求精，保障业务的高可用性，这时对其复杂度分析所用的时间是值得的。","like_count":0},{"had_liked":false,"id":102817,"user_name":"克里斯","can_delete":false,"product_type":"c1","uid":1327103,"ip_address":"","ucode":"86DA0F356E2ACD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8UYbedASKg0kicuQFQpnRuq71eKhw2Lwycaaxhnora0ibMucGNwQh4WFxJFhkWSsmjnPvTBzajWwA/132","comment_is_top":false,"comment_ctime":1560308571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560308571","product_id":100017301,"comment_content":"时间和空间复杂度只能粗略的对代码的性能进行估计和分析；在实际开发中性能测试是必须要有的，它是项目实际情况的一个说明，两者缺一不可。","like_count":0},{"had_liked":false,"id":102568,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1560253594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560253594","product_id":100017301,"comment_content":"做性能测试其实是事后统计法，有局限性：受测试环境和测试数据的影响较大。而复杂度分析是研究程序算法的执行效率与数据规模之间的增长关系，有一定的普适性","like_count":0},{"had_liked":false,"id":102537,"user_name":"Geek_lls","can_delete":false,"product_type":"c1","uid":1574751,"ip_address":"","ucode":"7E429A0031CA74","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUMp5g21eMibL2RSEFTWezJVhdx3AYTyy9hNTSAxWIcVMiavfqNvAy8gHEficYQ8svmTIn9lS35z83A/132","comment_is_top":false,"comment_ctime":1560246747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560246747","product_id":100017301,"comment_content":"时间复杂度：代码的执行次数；与数据规模相关<br>空间复杂度：执行代码所占空间；与数据规模相关","like_count":0},{"had_liked":false,"id":102409,"user_name":"程序员班吉","can_delete":false,"product_type":"c1","uid":1478098,"ip_address":"","ucode":"BD48CF7649609A","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/d2/8a6be8d8.jpg","comment_is_top":false,"comment_ctime":1560217197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560217197","product_id":100017301,"comment_content":"对于黑盒测试来讲，只关注程序性能，并以性能指标来判断代码质量并没有什么问题，而且似乎也是唯一的办法，一般做到这一步也能解决大部分的性能问题。<br>但是，对于程序员或者白盒测试来讲，分析代码的时间和空间复杂度就很有必要了。首先，可以快速找到代码瓶颈，快速定位性能测试中发现的问题。其次，对于程序员来讲掌握时间和空间复杂度分析可以从一开始就避免写出低率的代码。最后，我认为最重要的，时间和空间复杂度分析给代码提供一套可以依靠的编码原则，在平时的开发当中如果没有时间和空间复杂度分析便没法判断代码的质量，以致出现问题也无从下手，等到下次出现问题还是不得要领不知道如何解决。","like_count":0},{"had_liked":false,"id":102384,"user_name":"程序员班吉","can_delete":false,"product_type":"c1","uid":1478098,"ip_address":"","ucode":"BD48CF7649609A","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/d2/8a6be8d8.jpg","comment_is_top":false,"comment_ctime":1560214793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560214793","product_id":100017301,"comment_content":"第一和第二个例子中的2n 中的2是怎么来的？","like_count":0},{"had_liked":false,"id":102240,"user_name":"Lament","can_delete":false,"product_type":"c1","uid":1019169,"ip_address":"","ucode":"BF2ACF59A1A3B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/21/ca81fd5d.jpg","comment_is_top":false,"comment_ctime":1560167912,"is_pvip":false,"replies":[{"id":"36898","content":"也可以关注我的微信公众号：小争哥","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560209477,"ip_address":"","comment_id":102240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560167912","product_id":100017301,"comment_content":"我个人观点的核心是两类手段相辅相成，可以互相验证，绝大部分情况下我会偏向先进行复杂度分析保证大体思路没错（通常不会花费太多时间），然后再性能测试起到监控和验证的目的。 <br><br>答案写完之后觉得，大概可能maybe只是我自己强迫症发作了，下面都是关于这俩问题如何不合理，以及如何提问的回答，可忽略。<br>---<br><br>但是先性能测试，再复杂度分析是否多此一举，复杂度分析是否浪费时间，这两个问题其实准确的来说不算问题，或者说不算一个好问题。<br><br>无论是那种方式或方法，首先要明确定义目的，才可以谈采用某种方法&#47;方式用来达成这个目的是否合理or合适。<br><br>就比如假设你并不了解时间复杂度分析是如何一步一步进行的，那你学习本课内容的时候一定是每段代码甚至每行代码去跟着讲解逐步分析，肯定不算浪费时间。<br><br>假如是本课作者自己去读，那他的重点肯定在查漏补缺上，当他阅读自己的例子时出于对读者负责（万一手一抖写错了呢）的目的肯定也要认真复查一遍（I believe so），恰好本篇就是讲复杂度分析的，那他肯定也每段代码进行了一遍分析，对读者负责也不算浪费时间。<br><br>当然这类“坏”问题就跟萌新们在刚接触一样新事物时提出的五花八门的问题们一样，通常都有自己的&quot;默认条件&quot;，具体到这俩问题，我猜测可能包含一种情况，比如我天天写几乎一摸一样的CRUD的时候，需不需要每段代码都进行分析？<br><br>这种时候就要对自己进行灵魂拷问，我的目的是什么？我真正想问的是什么？我应该如何描述自己的疑问以便他人不会产生误解？<br><br>具体展开可阅读大神-左耳听风的免费blog中关于[x-y问题](https:&#47;&#47;coolshell.cn&#47;articles&#47;10804.html)的描述，或者订阅左耳听风专栏，第72篇 | 程序员练级攻略：程序员修养 中有所涉及。<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453307,"discussion_content":"也可以关注我的微信公众号：小争哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560209477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101971,"user_name":"wolfog","can_delete":false,"product_type":"c1","uid":1005815,"ip_address":"","ucode":"89BFEBE2E00B18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/f7/22ea9761.jpg","comment_is_top":false,"comment_ctime":1560079507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560079507","product_id":100017301,"comment_content":"对于争哥提出的思考问题，我是这样理解的：性能测试在确定的测试环境条件和负载量和压力在某个确定的范围下得出的结果，这样的好处是可以模拟出代码在大多数常见条件下（或者说人可以思考到的环境条件）的性能结果，但缺点是受人的经验影响大，对于某些异常条件无法得到结果；而时间空间复杂度是一种类似于透过现象看本质的方法，得出的结果是将所有的代码都处于一种标准条件下得出的结果。","like_count":0},{"had_liked":false,"id":101581,"user_name":"新哥","can_delete":false,"product_type":"c1","uid":1510368,"ip_address":"","ucode":"D6E5DB6494AE1A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5FcvGCNgctPq46RxMExy3oZXkdZFqobX1QXNBbmTicvrZeuulWQLzvI4c36DQKLsbIGyANDyY0VA/132","comment_is_top":false,"comment_ctime":1559875162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559875162","product_id":100017301,"comment_content":"时间复杂度，是算法执行效率与数据规模增长变化之间的趋势。空间复杂度，是算法的存储空间与数据规模增长变化之间的关系。","like_count":0},{"had_liked":false,"id":101576,"user_name":"新哥","can_delete":false,"product_type":"c1","uid":1510368,"ip_address":"","ucode":"D6E5DB6494AE1A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5FcvGCNgctPq46RxMExy3oZXkdZFqobX1QXNBbmTicvrZeuulWQLzvI4c36DQKLsbIGyANDyY0VA/132","comment_is_top":false,"comment_ctime":1559874695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559874695","product_id":100017301,"comment_content":"代码做是复杂度分析，在有条件的情况下是必须要做的，好比自行车和汽车都能到目的地。走10米的时候，用时差不多。但走一万米的时候，差距就出来了。要走到北极，估计骑自行车的就要打人了。所以高并发的时候，时间复杂度太高，用户就要打你了。","like_count":0},{"had_liked":false,"id":101508,"user_name":"潘腾","can_delete":false,"product_type":"c1","uid":1566689,"ip_address":"","ucode":"04FEC6FFD62F43","user_header":"","comment_is_top":false,"comment_ctime":1559832206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559832206","product_id":100017301,"comment_content":"代码的复杂度分析应该是编码阶段或者review代码的时候做，如果经验丰富的话应该是分分钟就能知道复杂度时多少，并不需要花费时间。也就谈不上多此一举。<br>另外有些问题并不是测试就可以测出来的，代码复杂度并不是最优，但性能没有问题的情况也是大概率会发生的，但如果提前预防，将代码复杂度调到最优，会是更好的选择。","like_count":0},{"had_liked":false,"id":100747,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1559631715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559631715","product_id":100017301,"comment_content":"性能测试是整体的测试，可以通过性能测试逐渐找到高耗能的代码片段对其进行单独的分析。每一段都做分析确实不符合其项目开发的原则。这本来就是一个取舍的过程。","like_count":0},{"had_liked":false,"id":100450,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1559557486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559557486","product_id":100017301,"comment_content":"时间复杂度与空间复杂度是对代码理论上的效率评估，其设定较为理想的假设，得出的结论可以不受环境变化地(除了数据规模)迁移运用，且可预估数据规模不断扩大增长后的算法效率。而性能基准测试也是针对特定一些场景下的算法评估，在可预估的数据规模范围内在业务场景下得到更为精确的测定结果。两者应当是相辅相成的。<br>非常感谢高德纳大佬为我们留下复杂度分钟这样强大的工具，一定意义上，就像牛顿设定理想环境的三大定律一样，其理论上的价值与应用中的价值无法估量！","like_count":0},{"had_liked":false,"id":100440,"user_name":"申鹏飞","can_delete":false,"product_type":"c1","uid":1331464,"ip_address":"","ucode":"429211A63F6314","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/08/0460f6eb.jpg","comment_is_top":false,"comment_ctime":1559556327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559556327","product_id":100017301,"comment_content":"复杂度用来衡量代码执行效率，分为时间复杂度和空间复杂度。<br>时间复杂度用时间维度来衡量代码执行效率。<br>空间复杂度用空间维度来衡量代码执行效率。<br>时间复杂度 可以通过1.循环方法2.相加方法。3嵌套循环 相乘法 来判断，常见的有<br>O(logn) <br>O(n) <br>O(nlogn) <br>O(n2 )等<br>底数最不熟悉，底数由 对数而来。<br>注意：当n无穷大时，忽略不重要因素。 <br>空间复杂度 为O(1)、O(n)、O(n2 )<br>","like_count":0},{"had_liked":false,"id":100385,"user_name":"wang jl","can_delete":false,"product_type":"c1","uid":1328098,"ip_address":"","ucode":"F32E4921EAECC1","user_header":"https://static001.geekbang.org/account/avatar/00/14/43/e2/a1ff289c.jpg","comment_is_top":false,"comment_ctime":1559543667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559543667","product_id":100017301,"comment_content":"其实我倒是经常接手一些写成O(n2)的项目，所谓骗客户一时爽，真正上线火葬场。就算性能测试发现了问题，也是根本没有时间去做大的改动的，往往最后不计成本的拼命加设备也hold不住。","like_count":0},{"had_liked":false,"id":99735,"user_name":"阿拉丁灯","can_delete":false,"product_type":"c1","uid":1277094,"ip_address":"","ucode":"59664187E74917","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/a6/93a0f6f8.jpg","comment_is_top":false,"comment_ctime":1559288570,"is_pvip":false,"replies":[{"id":"36029","content":"嗯嗯 画的有点不精确 实际上我们看的是趋势 起始那段根本没意义","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559514817,"ip_address":"","comment_id":99735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559288570","product_id":100017301,"comment_content":"王老师好，请问内容小节的那张图里，nlogn的曲线在（0，1）的区间不应该是小于0的么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452243,"discussion_content":"嗯嗯 画的有点不精确 实际上我们看的是趋势 起始那段根本没意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559514817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99680,"user_name":"Monroe  He","can_delete":false,"product_type":"c1","uid":1348219,"ip_address":"","ucode":"D04ECB2EF2E0DA","user_header":"https://static001.geekbang.org/account/avatar/00/14/92/7b/8c7e3e61.jpg","comment_is_top":false,"comment_ctime":1559278075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559278075","product_id":100017301,"comment_content":"时间复杂度是数据执行时间与数据规模之间的趋势关系，空间复杂度是数据存储与数据规模之间的关系","like_count":0},{"had_liked":false,"id":99452,"user_name":"sunsray","can_delete":false,"product_type":"c1","uid":1201663,"ip_address":"","ucode":"FB2F62C2B14690","user_header":"https://static001.geekbang.org/account/avatar/00/12/55/ff/32cb4a25.jpg","comment_is_top":false,"comment_ctime":1559218123,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559218123","product_id":100017301,"comment_content":"性能测试测出性能差的代码，然后结合算法复杂度分析，以后能在写代码时避免性写出性能差的代码。 老师的课太好了，通俗易懂！ 希望跟着老师学完所有内容！加油大家！","like_count":0},{"had_liked":false,"id":99408,"user_name":"大秦岭","can_delete":false,"product_type":"c1","uid":1515916,"ip_address":"","ucode":"3F7591A279AD93","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJman25D8Jlr6P6AIhumWr2CNqZPvXl8JJLc3yOvvTlWFDVuKbYpNXgKib6y1Sa0HApwvz1xM6MBjw/132","comment_is_top":false,"comment_ctime":1559208389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559208389","product_id":100017301,"comment_content":"对于条件判断语句，总的时间复杂度等于最大的时间复杂度<br>void aFunc(int n) {<br>    if (n &gt;= 0) {<br>        &#47;&#47; 第一条路径时间复杂度为 O(n^2)<br>        for(int i = 0; i &lt; n; i++) {<br>            for(int j = 0; j &lt; n; j++) {<br>                printf(&quot;输入数据大于等于零\\n&quot;);<br>            }<br>        }<br>    } else {<br>        &#47;&#47; 第二条路径时间复杂度为 O(n)<br>        for(int j = 0; j &lt; n; j++) {<br>            printf(&quot;输入数据小于零\\n&quot;);<br>        }<br>    }<br>}<br><br>此时间复杂度为max(O(n^2),O(n))，即O(n^2)<br><br>时间复杂度分析的基本策略：从内向外分析，从最深层开始分析。如果遇到函数调用，要深入函数进行分析。","like_count":0},{"had_liked":false,"id":99404,"user_name":"大秦岭","can_delete":false,"product_type":"c1","uid":1515916,"ip_address":"","ucode":"3F7591A279AD93","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJman25D8Jlr6P6AIhumWr2CNqZPvXl8JJLc3yOvvTlWFDVuKbYpNXgKib6y1Sa0HApwvz1xM6MBjw/132","comment_is_top":false,"comment_ctime":1559207905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559207905","product_id":100017301,"comment_content":"int func(void){<br>       printf(&quot;hello,world~\\n&quot;);  &#47;&#47;需要执行一次<br>       return 0;                             &#47;&#47;需要执行一次<br>}<br>————共两次<br>int func(int n){<br>        for(int i=0;i&lt;n;i++){          &#47;&#47;需要执行n+1<br>              printf(&quot;Hello,world~\\n&quot;);&#47;&#47;需要执行n<br>       }<br>   return 0;<br>}<br>------------这个方法需要(n+1+n+1)=2n+2次运算<br><br>以下用复杂度表示：<br>void func(in n){<br>        for(int i=0;i&lt;n;i++){   &#47;&#47;循环次数n<br>           printf(&quot;hello, World~\\n&quot;);<br>           &#47;&#47;循环体时间复杂度O(1)<br>     }<br>}<br>—————此时间复杂度为O(n*1)，即O(n)<br>void aFunc(int n) {<br>    for(int i = 0; i &lt; n; i++) {         &#47;&#47; 循环次数为 n<br>        for(int j = 0; j &lt; n; j++) {       &#47;&#47; 循环次数为 n<br>            printf(&quot;Hello, World!\\n&quot;);      &#47;&#47; 循环体时间复杂度为 O(1)<br>        }<br>    }<br>}<br><br>此时时间复杂度为 O(n × n × 1)，即 O(n^2)。","like_count":0},{"had_liked":false,"id":99374,"user_name":"朱龙凯","can_delete":false,"product_type":"c1","uid":1554935,"ip_address":"","ucode":"C43E968179521B","user_header":"https://static001.geekbang.org/account/avatar/00/17/b9/f7/43311858.jpg","comment_is_top":false,"comment_ctime":1559201581,"is_pvip":false,"replies":[{"id":"35860","content":"是不是一个时间单位是自己定义的，因为这个没法精确的度量的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559352663,"ip_address":"","comment_id":99374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559201581","product_id":100017301,"comment_content":"请问作者，一个for循环里面有条件判断是否继续循环和++i两个操作，为什么只是一个单位时间呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452086,"discussion_content":"是不是一个时间单位是自己定义的，因为这个没法精确的度量的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559352663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99368,"user_name":"四阿哥萌萌哒","can_delete":false,"product_type":"c1","uid":1547767,"ip_address":"","ucode":"62F91EF0C87398","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/f7/26d82e48.jpg","comment_is_top":false,"comment_ctime":1559200444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559200444","product_id":100017301,"comment_content":"我觉得最后得到的log（n）一类的是取极限后的结果","like_count":0},{"had_liked":false,"id":98522,"user_name":"有点意思","can_delete":false,"product_type":"c1","uid":1399454,"ip_address":"","ucode":"67F55604E8A548","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/9e/8f2ccc1d.jpg","comment_is_top":false,"comment_ctime":1559017203,"is_pvip":true,"replies":[{"id":"35337","content":" while (i &lt;= n)  {<br>   i = i * 2;<br> }<br>这个不是执行n次啊，你看i变成n需要多少次计算i=i*2的计算呢，应该是logn次的<br><br>另一个问题：假如n=3，这种假设就不对了。时间复杂度表示的是当n无穷大的时候，整体的变化趋势。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559088515,"ip_address":"","comment_id":98522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559017203","product_id":100017301,"comment_content":"王老师 好！有一个疑惑：<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>上面这段代码的复杂度是O(n), 而下面这段复杂度却变成了O(nlogn)<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br><br>这个实在是有些不懂啊,同样都是在循环里面，假如都循环了n次，<br>那么复杂度都应该是O(n)啊<br><br>sum = sum + i 与 i = i * 2<br>这两行代码的执行次数，从文本上面来看应该都是一样的啊<br>难道执行次数指的是对应的汇编代码或者机器码的执行次数<br><br><br>另外还有个疑惑，<br>代码1如下：<br>\t假如下面的n=3,复杂度是O(n)<br>\ti = 0;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>代码1等价于下面的代码2<br>\tsum = sum + 0;<br>\tsum = sum + 1;<br>\tsum = sum + 2;<br>\tsum = sum + 3;<br>按照课程里面讲的，上面代码2的复杂度应该是O(1)<br>这种情况下两者的复杂度应该是一样的啊，但是课程里面讲到O(n)比O(1)复杂度高<br>复杂度分析看第一遍的时候感觉挺简单的，但是看第二遍的时候，感觉有好多都不懂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451719,"discussion_content":" while (i &amp;lt;= n)  {\n   i = i * 2;\n }\n这个不是执行n次啊，你看i变成n需要多少次计算i=i*2的计算呢，应该是logn次的\n\n另一个问题：假如n=3，这种假设就不对了。时间复杂度表示的是当n无穷大的时候，整体的变化趋势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559088515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98450,"user_name":"女巫在寒江","can_delete":false,"product_type":"c1","uid":1013180,"ip_address":"","ucode":"B3707072224C1C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/bc/664bbdf7.jpg","comment_is_top":false,"comment_ctime":1559005716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559005716","product_id":100017301,"comment_content":"回答一下本节课的问题：复杂度分析更多是对一段代码运行复杂度的提前预估，有了这些预估，我们不必等到写完代码后才知道优劣","like_count":0},{"had_liked":false,"id":98418,"user_name":"干将莫邪","can_delete":false,"product_type":"c1","uid":1515019,"ip_address":"","ucode":"4C66EBD11E4B85","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/0b/a1d1e9f5.jpg","comment_is_top":false,"comment_ctime":1559002505,"is_pvip":false,"replies":[{"id":"35201","content":"与n相关的时间复杂度表达式","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559006027,"ip_address":"","comment_id":98418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559002505","product_id":100017301,"comment_content":"如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).<br><br>请问g代表什么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451678,"discussion_content":"与n相关的时间复杂度表达式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559006027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98233,"user_name":"Issac","can_delete":false,"product_type":"c1","uid":1514963,"ip_address":"","ucode":"5F79C3D4C292E7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1d/d3/cc3c4df0.jpg","comment_is_top":false,"comment_ctime":1558938165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558938165","product_id":100017301,"comment_content":"这一节主要有以下几个知识点：<br>1.复杂度分析方法<br>   执行最多的代码、加法法则、乘法法则<br>2.复杂度量级<br>   o(1)、o(logn)、o(n)、o(nlogn)、o(n^2) <br>   o(2^n)、o(n!)<br>3.掌握复杂度分析有利于写出高性能的代码<br>   ","like_count":0},{"had_liked":false,"id":97989,"user_name":"强小","can_delete":false,"product_type":"c1","uid":1535528,"ip_address":"","ucode":"63D770AB7C52EF","user_header":"https://static001.geekbang.org/account/avatar/00/17/6e/28/44a124df.jpg","comment_is_top":false,"comment_ctime":1558861653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558861653","product_id":100017301,"comment_content":"复杂度分析是内功心法，要培养这样的分析意识","like_count":0},{"had_liked":false,"id":97988,"user_name":"强小","can_delete":false,"product_type":"c1","uid":1535528,"ip_address":"","ucode":"63D770AB7C52EF","user_header":"https://static001.geekbang.org/account/avatar/00/17/6e/28/44a124df.jpg","comment_is_top":false,"comment_ctime":1558861474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558861474","product_id":100017301,"comment_content":"1、时间复杂度<br>     代码执行时间随数据规模增长的变化趋势（关注循环执行次数最多的那段代码，加法原则-并列循环量级最大，乘法原则-嵌套循环）<br>2、空间复杂度<br>     表示算法的存储空间与数据规模之间的增长关系<br>3、事后统计法的局限<br>      测试结果非常依赖测试环境、测试结果受数据规模的影响很大<br>4、复杂度分析的必要性<br>     通过统计、监控确实能够观察到代码的运行情况，但是这里考虑的只是代码性能是否会出现问题，如执行慢，占用空间多。而这种直观的表现其实没有理论的支撑，如果想要预估未来的情况，依旧需要从理论方面进行估算，也就是需要使用复杂度分析。<br>     如果事前进行复杂度分析，然后再进行事后统计直观的体现和反映，从而使复杂度分析有了具体的表现，加深对于复杂度的理解和认识，同时也对数量级有了具体的观念，相互促进，相互发展","like_count":0},{"had_liked":false,"id":97926,"user_name":"了无痕","can_delete":false,"product_type":"c1","uid":1284279,"ip_address":"","ucode":"E066E72F0CB4B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/b7/2c725922.jpg","comment_is_top":false,"comment_ctime":1558842253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558842253","product_id":100017301,"comment_content":"不错，一下子概念清晰了","like_count":0},{"had_liked":false,"id":97786,"user_name":"今夜秋风和","can_delete":false,"product_type":"c1","uid":1434066,"ip_address":"","ucode":"453C8197FFC81D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e1/d2/42ad2c87.jpg","comment_is_top":false,"comment_ctime":1558773765,"is_pvip":false,"replies":[{"id":"35212","content":"你理解的没错！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559006839,"ip_address":"","comment_id":97786,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558773765","product_id":100017301,"comment_content":"老师，第二个例子中内层的for 循环我觉得执行时间2n2,当i=1 时，内层j和下面的一行代码需要执行n 次，执行时间是2n,外层循环n次，里面执行为2n 个n 相加，为2n2, 不知道我的理解对不？ 恳请老师解答","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451419,"discussion_content":"你理解的没错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559006839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97155,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1558598713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558598713","product_id":100017301,"comment_content":"1.形成代码复杂度分析思维 写代码时能对代码的一个好坏有个基本的判断 还能推动写出复杂度更低性能更好的代码 <br>2.分析主要代码的复杂度 能对现有代码满足的业务量做一个预估 帮助判断业务量达到多少时需要进行重构","like_count":0},{"had_liked":false,"id":96976,"user_name":"Geek_fengchen","can_delete":false,"product_type":"c1","uid":1544896,"ip_address":"","ucode":"87CD06306CEC5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotaMCDHogj3lQ9SQic8P9BxPtaMC4rYfmulupeuAECicmTJDJz1Rff0nzYiatbC6wKEqF59oS8yJiciag/132","comment_is_top":false,"comment_ctime":1558569117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558569117","product_id":100017301,"comment_content":"我记得学的时候都是读大欧，就是大写字母O","like_count":0},{"had_liked":false,"id":96911,"user_name":"待时而发","can_delete":false,"product_type":"c1","uid":1158705,"ip_address":"","ucode":"92104F88D537F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/31/2c8a3a66.jpg","comment_is_top":false,"comment_ctime":1558534446,"is_pvip":false,"replies":[{"id":"34667","content":"O(1)","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1558568314,"ip_address":"","comment_id":96911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558534446","product_id":100017301,"comment_content":"像时间复杂度例子中的O（logn）的代码的空间复杂度是什么呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451059,"discussion_content":"O(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558568314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96739,"user_name":"因缺思厅","can_delete":false,"product_type":"c1","uid":1517365,"ip_address":"","ucode":"2B1D9E9CD8784A","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/35/ba972e11.jpg","comment_is_top":false,"comment_ctime":1558495276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558495276","product_id":100017301,"comment_content":"重刷+1","like_count":0},{"had_liked":false,"id":95884,"user_name":"李坤","can_delete":false,"product_type":"c1","uid":1203140,"ip_address":"","ucode":"A9F82C6EFDDA39","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/c4/40cc1989.jpg","comment_is_top":false,"comment_ctime":1558241049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558241049","product_id":100017301,"comment_content":"复杂度：数据规模与处理数据的关系<br>时间复杂度：由循环次数的最多次决定处理时间，常见：o（n），o（n次方）o（logn），o（nlogn），o（2的n）<br>空间复杂度：有数据占用内存单位最多的决定 基本为o（n）","like_count":0},{"had_liked":false,"id":95311,"user_name":"Geek_544e36","can_delete":false,"product_type":"c1","uid":1450625,"ip_address":"","ucode":"AE7D01F2BA3D65","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/81/3115e3eb.jpg","comment_is_top":false,"comment_ctime":1558016967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558016967","product_id":100017301,"comment_content":"养成复杂度分析习惯 可以方便快速定位性能问题 也有利于编写高效代码 ","like_count":0},{"had_liked":false,"id":94960,"user_name":"一只疯了的熊(^.*)","can_delete":false,"product_type":"c1","uid":1187939,"ip_address":"","ucode":"1C25F550C5E456","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/63/1a3a35a5.jpg","comment_is_top":false,"comment_ctime":1557930383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557930383","product_id":100017301,"comment_content":"每段代码的确没必要都去分析它的时间复杂度以及空间复杂度，但是对于核心代码还是很有必要的。另外写代码之前，伪代码分析也是非常有必要的","like_count":0},{"had_liked":false,"id":94955,"user_name":"HSLM.","can_delete":false,"product_type":"c1","uid":1339600,"ip_address":"","ucode":"BC951D2FC40271","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/d0/79eedf41.jpg","comment_is_top":false,"comment_ctime":1557929823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557929823","product_id":100017301,"comment_content":"1.数组实现LRU缓存删除<br>最近使用排在数组第一位，最不常使用排在数组最后一位，当访问新数据时，遍历数组，如果有该数据，将其插入第一位并覆盖其原来位置，如果没有该数据，就将其插入第一位。<br>2.判断回文，利用两个指针，一个从开头遍历到中间，一个从中间遍历到结尾，同步遍历。使遍历所得字符按顺序成字符串，将第二个字符串转置，看两字符串是否相等。时间复杂度为O(n)","like_count":0},{"had_liked":false,"id":94678,"user_name":"Geek_63ad86","can_delete":false,"product_type":"c1","uid":1528671,"ip_address":"","ucode":"E758532B1169D6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","comment_is_top":false,"comment_ctime":1557881773,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557881773","product_id":100017301,"comment_content":"我并不认为是多此一举。性能测试的结果依赖于计算机硬件本身和数据规模的大小，在不同条件下性能测试的结果也不同。那对于不同的算法，我们就需要找到一个通用的准则来衡量它的效率，从而才能解决“快”和“省”的问题。时间和空间的复杂度分析虽然不是一个精确值，但是它们给出了算法在最坏的情况下的运行时间的一个估计，对于不同的算法，该分析不依赖于硬件的选取，是一个可靠的衡量标准。利用这样的分析方法可以帮我们更好地挑选该使用什么样的算法，从而提升代码效率，节省很多时间，因此这并不是浪费时间。","like_count":0},{"had_liked":false,"id":93867,"user_name":"puhan","can_delete":false,"product_type":"c1","uid":1529235,"ip_address":"","ucode":"50746E9A4990A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icniaGmw8xiboxib5xa1RSNvRDX1yVQTrcSqVOlJPibt0A6SM7EnFTHa6ib0YQKSUPqtx7wVksxZZXK4huUpCqrKjT1w/132","comment_is_top":false,"comment_ctime":1557644731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557644731","product_id":100017301,"comment_content":"   问题思考：<br>    我觉得不多此一举，时间、空间复杂度的理论分析能够使我们在脱离运行平台的基础上分析算法的性能。<br>    当然O(n)的复杂度并不一定高于O(logn)。但是如果考虑算法的鲁棒性和延展性的话，比如数据规模徒然增大，优先考虑时间、空间复杂度低的算法。<br>   针对不同的平台环境，不同的数据集，不同的数据规模，先进行一定的性能测试，选择该条件下的最有模型。<br>   课程总结：<br>    why+what+how<br>why:为什么要进行时间、空间复杂度分析？<br>      直接用代码实现代码执行时间的计算就好啦？<br>      答案是不行！<br>       可能计算的只是特定情况下的值，比如对于快要排好的数据集和很混乱的数据集肯定不一样啊。<br>       针对不同计算能力的代码运行平台，计算的结果可能并不一样，不具有参考意义。<br>what:什么是时间、空间复杂度分析？<br>       算法的执行时间（存储空间）随数据规模n之间的增长关系。<br>       常见的时间复杂度分析：O(n)、O(logn)、O(1)、O（nlongn)、O(n*n)<br>How:如何进行时间（空间）复杂度分析？<br>       ①加法法则：等于量级复杂度最大的那段代码的时间复杂度<br>       ②乘法法则：内外嵌套的代码的时间复杂度等于内外代码段的时间复杂度的乘积<br><br>  ","like_count":0},{"had_liked":false,"id":93786,"user_name":"Bing","can_delete":false,"product_type":"c1","uid":1528969,"ip_address":"","ucode":"03F19C70FE9D75","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/89/f24056e1.jpg","comment_is_top":false,"comment_ctime":1557589466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557589466","product_id":100017301,"comment_content":"通俗易懂，容易上手，复杂度计算不依赖于硬件和软件环境。通过去除低阶，常量，系数的因素，找到最大量，从而计算出复杂度。普通的性能测试，无法反应这一点","like_count":0},{"had_liked":false,"id":93638,"user_name":"do it","can_delete":false,"product_type":"c1","uid":1309911,"ip_address":"","ucode":"E0753912E8F2AF","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d7/b102034a.jpg","comment_is_top":false,"comment_ctime":1557541990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557541990","product_id":100017301,"comment_content":"个人小结<br>一、什么是复杂度分析<br>1、复杂度分析的是算法执行时间（或算法先用空间）与数据规模之间的增长关系。<br>2、数据结构和算法解决“如何让计算机更快时间，更省空间的解决问题”<br>3、复杂度分析包含时间复杂度分析和空间复杂度分析<br>二、为什么进行复杂度分析<br>1、和性能测试相对比，复杂度分析具有不依赖执行环境、成本低、效率高、易操作、指导性强等特点。<br>2、掌握复杂度分析，能够写出性能更优的代码，有利于降低系统的开发好的维护成本。<br>三、怎么进行复杂度分析<br>1、大O复杂度表示法<br>时间复杂度分析方法<br>.只关注循环执行次数最多的一段代码。<br>.加法法则:总复杂度等于量级最大的那段代码的复杂度。<br>.乘发法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br>四、几种常见的复杂度量级<br>.常量阶 O(1)<br>.对数阶 O(logn),O(nlogn)<br>.线性阶 O(n)<br>.平方阶 O(n²)<br>.立方阶 O(n³)<br>.k次方阶 O(n^k)<br>.指数阶 O(2^n)<br>.阶乘阶 O(n!)<br><br>复杂度分析难度不大，主要在于要多练。","like_count":0},{"had_liked":false,"id":93628,"user_name":"naku","can_delete":false,"product_type":"c1","uid":1528610,"ip_address":"","ucode":"B49EF5B5B38400","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","comment_is_top":false,"comment_ctime":1557539598,"is_pvip":false,"replies":[{"id":"33706","content":"服务器大部分是linux，windows的也有的。不过你说的问题跟服务器类型关系不大哈。<br><br>还有就是不一定要升级硬件，还可以通过改进算法、数据结构的方式，提高存储、执行性能。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557792068,"ip_address":"","comment_id":93628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557539598","product_id":100017301,"comment_content":"看了老师的文章后感觉时间复杂度和空间复杂度可以当做一个来看待的——数据规模【常数个，单个数据规模、多个数据规模】的增长对程序运行时间和内存开销的占用的变化。 通过这个可以知道用某种算法对某种数据进行某种运算时的时间和空间的理论上的开销获得一个量级的指标。 但也只是理论上的，实际上跟硬件设备也有关系。  这个问题就不懂了，如果真测试发现是硬件的问题没有达到理论上的效果，那是不是就得升级下硬件了。 服务器不都是linux吗？ 有用windows做服务器处理数据的吗。。。 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449708,"discussion_content":"服务器大部分是linux，windows的也有的。不过你说的问题跟服务器类型关系不大哈。\n\n还有就是不一定要升级硬件，还可以通过改进算法、数据结构的方式，提高存储、执行性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557792068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93601,"user_name":"若弦","can_delete":false,"product_type":"c1","uid":1186555,"ip_address":"","ucode":"94E5CBECD0E1E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/1a/fb/ee2203aa.jpg","comment_is_top":false,"comment_ctime":1557531529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557531529","product_id":100017301,"comment_content":"做复杂度分析是很有必要的。<br>1. 既然你们项目在做性能测试，那么可以推断该项目对性能还是有所要求的；<br>2. 而复杂度分析原则上可以看出性能瓶颈在哪里（也许有其他一些复杂度无法分析的瓶颈：网络延时等）；<br>所以 在性能测试后再做复杂度分析还是很推荐的","like_count":0},{"had_liked":false,"id":93257,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1557448308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557448308","product_id":100017301,"comment_content":"时间复杂度要看代码的复杂度，一般平时代码只要不在循环里面套循环，不会超过n方的复杂度，如果出现循环套循环的代码，就要考虑用设计模式或者优化代码了，但是对于复杂的场景，比如算法，出现高阶复杂度情况比较大，这个时候需要更多分析时间复杂度。对于空间复杂度，不管是多高级别的数据量，多复杂的代码，都是需要考虑空间复杂度的，熟练使用各种数据结构，不同场景使用不同的数据结构，会在节省空间存储的同时，简化代码。","like_count":0},{"had_liked":false,"id":93059,"user_name":"echo","can_delete":false,"product_type":"c1","uid":1336844,"ip_address":"","ucode":"2E81A04AAA6D73","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL0iaUNGFzP3licHkCVibjd61N3SxzGyqeglbNVIQvuZPGGdoicicr9u9hm7qmSCCj3Fq7UJfMkh3AicQZQ/132","comment_is_top":false,"comment_ctime":1557386489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557386489","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":92757,"user_name":"oilzhang","can_delete":false,"product_type":"c1","uid":1523420,"ip_address":"","ucode":"2D64F9B0229C6A","user_header":"","comment_is_top":false,"comment_ctime":1557322135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557322135","product_id":100017301,"comment_content":"时间复杂度分析总结：<br>个人认为熟练掌握上面提到的三个准则 + 数学分析计算 即可<br>准则1 ：只看复杂度高的那段代码；（整体看）<br>准则2：在准则1的基础上，将复杂度高的代码复杂度相加，并只取量级高的作为这段代码的时间复杂度，但如果量级相同，这保持不变还是相加后的复杂度；（整体加）<br>准则3：对于有嵌套的代码，则时间复杂度是内外循环的复杂度乘积；（局部乘）<br><br>对于数学分析计算，我想是要学会怎么算一段具体的代码的时间复杂度，循环应该不难计算，难的应该是O（logn）的计算，真正的代码肯定不会是像案例这样简单<br>","like_count":0},{"had_liked":false,"id":92736,"user_name":"Jeason Lee","can_delete":false,"product_type":"c1","uid":1523070,"ip_address":"","ucode":"CCF0BB264EAF49","user_header":"https://static001.geekbang.org/account/avatar/00/17/3d/7e/1b92d463.jpg","comment_is_top":false,"comment_ctime":1557318637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557318637","product_id":100017301,"comment_content":"如老师所言，复杂度分析是写出优秀代码的第一步，也是基本功。复杂度分析给我们的算法或者代码实现提供了参考，同样的需求，我们实现的时间复杂度就是比别人的高，那怎么评估出来高，这个复杂度分析就是参考就是指标","like_count":0},{"had_liked":false,"id":91872,"user_name":"Mercury","can_delete":false,"product_type":"c1","uid":1520865,"ip_address":"","ucode":"692A544486F83D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/j0gBKF8EKfRMTnBOqXR3xTViaUrvAbt9RvIZlt7aVpIJ82HxKMJ7D6rQ463T5885DFhMlP0h9FVQz3NQJHicgl4g/132","comment_is_top":false,"comment_ctime":1557124451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557124451","product_id":100017301,"comment_content":"个人认为，可以在项目开发过程中就对每个开发出来的函数或是模块进行时间空间复杂度优化。另外在项目完成后的性能测试阶段，只对项目中重要性较高的模块进行优化即可，这样会不会更节省资源一些","like_count":0},{"had_liked":false,"id":91683,"user_name":"某小浩","can_delete":false,"product_type":"c1","uid":1511556,"ip_address":"","ucode":"F0A65F516B17BB","user_header":"","comment_is_top":false,"comment_ctime":1557072931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557072931","product_id":100017301,"comment_content":"1. 看了好几遍关于平均时间复杂度的计算方法，一直没有搞明白求平均中的最后项n和加上概率后最后的n*（1&#47;2）是怎么来的，<br>反复看了几遍，最后发现文章中是说包含了两部分，在n-1中满足和不满足，所以最后一项就是不满足条件时候需要执行的次数，所以在求平均和概率的时候需要对最后一项做特殊处理<br>2. 关于最后练习的复杂度分析，自己陷入了怪圈，以为一定要是n不确定的复杂度才是O(n)，最后练习循环次数给定len是10，所以以为最坏复杂度是O(1)，实际上这里的复杂度并不看循环次数是否有限，而是看复杂度是否和一个变量有关，这个复杂度是和len有关，所以复杂度也是O(n)<br>","like_count":0},{"had_liked":false,"id":91667,"user_name":"失聪的仙妖","can_delete":false,"product_type":"c1","uid":1514025,"ip_address":"","ucode":"795FA20BF91949","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/29/374713f9.jpg","comment_is_top":false,"comment_ctime":1557069475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557069475","product_id":100017301,"comment_content":"思考题：<br>1、做完性能测试再做时间复杂度和空间复杂度分析，我觉得不是多此一举，比如有的在做性能测试的时候，条件有限，无法实现更深入的性能测试，可以通过时间复杂度和空间复杂度分析来预判，未来是否会超过机器的负载。<br><br>2、当开发者对时间复杂度和空间复杂度分析方法使用熟练了以后，每次编写代码时，就能一眼便知，会下意识的改进代码，以避免将来遇到更严重的性能问题，不得不重构代码。这样做的好处是减轻后期代码维护的工作量，少走冤枉路，相对之下节省了时间，而且这个方法比较方便，成本低。","like_count":0},{"had_liked":false,"id":91407,"user_name":"郑佳宇","can_delete":false,"product_type":"c1","uid":1239639,"ip_address":"","ucode":"538EE8AA8EA375","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/57/5d4bc563.jpg","comment_is_top":false,"comment_ctime":1557027681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557027681","product_id":100017301,"comment_content":"大o复杂表示法，也是时间复杂度，一般预估时间复杂度的时候可以观察代码中循环，迭代最多的部分。基本的时间复杂度有常量，指数，对数，线性，平方。（这是我看完本章后的理解）","like_count":0},{"had_liked":false,"id":91260,"user_name":"OUO","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1556956551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556956551","product_id":100017301,"comment_content":"我认为不是多此一举，看时间复杂度和空间复杂度是为了优化算法的，小工程不是很需要 但是大工程真的特别重要","like_count":0},{"had_liked":false,"id":91236,"user_name":"林松","can_delete":false,"product_type":"c1","uid":1164127,"ip_address":"","ucode":"9A48F890D74252","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erwib5whv3NLYeAicibgceC0eC7J3pkqEKf4DUEUh8xcnDhv4djAZTbSIoh7WEIuJTqNsjbtaribde5ag/132","comment_is_top":false,"comment_ctime":1556941982,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556941982","product_id":100017301,"comment_content":"不是多此一举，性能测试就像老师说的，属于事后统计法，到后面再去分析代码，会给项目造成很大的风险，这些工作应该在设计时就需要考虑的。","like_count":0},{"had_liked":false,"id":91210,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1194572,"ip_address":"","ucode":"FBFAE23E8E48B7","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/4c/b6200773.jpg","comment_is_top":false,"comment_ctime":1556930691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556930691","product_id":100017301,"comment_content":"我们为什么要关注数据规模的增长趋势而忽略常量？因为解决一个问题时，常量部分在各个算法之间基本一样？是必须执行时间，不影响算法效率？所以只需要关注数据规模来选择好的算法？🤔🤔","like_count":0},{"had_liked":false,"id":91004,"user_name":"莫小鹏","can_delete":false,"product_type":"c1","uid":1158881,"ip_address":"","ucode":"0EE0654FD0FB85","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/e1/78701ecf.jpg","comment_is_top":false,"comment_ctime":1556781665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556781665","product_id":100017301,"comment_content":"作性能测试是为了找到性能的瓶颈。把瓶颈找到，再进行复杂度的分析。每一段代码都作分析的话，时间上通常是不允许的，也没有必要。20%的代码占用了80%的运行时间，集中精力优化这段代码就可以了","like_count":0},{"had_liked":false,"id":90978,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1556765443,"is_pvip":false,"replies":[{"id":"33065","content":"用大o复杂度表示的话，粗略计算就可以了。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557279497,"ip_address":"","comment_id":90978,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556765443","product_id":100017301,"comment_content":"你好，看到评论里面说那个对数时间复杂度的，如果n为20的时候，i的取值次数应该是5次而不是4次吧，1,2,4,8,16啊，这样log20的结果是4点几，那是要四舍五入的吗？另外如果恰好n是2的次方，例如为8的时候，i的取值不应该就是1,2,4,8四次了吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448749,"discussion_content":"用大o复杂度表示的话，粗略计算就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557279497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90749,"user_name":"昵称未设置","can_delete":false,"product_type":"c1","uid":1518112,"ip_address":"","ucode":"D63EE848EEE595","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/kdpmEjEzib1JZomcwSBg55uOGvibP1SMFdENxMB3W5GdS0atIicUNXMGVmiae9s6RT7L5qQRvYVm0zNCicMNCqIMtWQ/132","comment_is_top":false,"comment_ctime":1556625732,"is_pvip":false,"replies":[{"id":"32579","content":"大o表示法只保留最高阶","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556701919,"ip_address":"","comment_id":90749,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556625732","product_id":100017301,"comment_content":"int cal(int n) {<br>   int sum_1 = 0;<br>   int p = 1;<br>   for (; p &lt; 100; ++p) {<br>     sum_1 = sum_1 + p;<br>   }<br><br>   int sum_2 = 0;<br>   int q = 1;<br>   for (; q &lt; n; ++q) {<br>     sum_2 = sum_2 + q;<br>   }<br> <br>   int sum_3 = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1; <br>     for (; j &lt;= n; ++j) {<br>       sum_3 = sum_3 +  i * j;<br>     }<br>   }<br> <br>   return sum_1 + sum_2 + sum_3;<br> }<br><br>老师，这第三段代码的时间复杂度不应该是T(n)=O(n+n²)吗，怎么是T(n)=O(n²)呢，这里嵌套循环了呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448637,"discussion_content":"大o表示法只保留最高阶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556701919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90717,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1556616030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556616030","product_id":100017301,"comment_content":"惭愧开发这么多年来，测试也只是功能测试，自己也没有做过时间复杂度空间复杂度的分析，更多做的只是封装，如何让代码写的更少。要分析这些时间复杂度一开始我想很困难吧，时间久了自然会形成习惯并且在写的时候已经考虑好了","like_count":0},{"had_liked":false,"id":90657,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1556602174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556602174","product_id":100017301,"comment_content":"代码的时间、空间复杂度也是项目性能的优化方向之一。你提前去做这些工作，项目优化的时候，就会游刃有余。","like_count":0},{"had_liked":false,"id":90474,"user_name":"10^100个邱怡霖","can_delete":false,"product_type":"c1","uid":1517246,"ip_address":"","ucode":"414414618FA93A","user_header":"https://static001.geekbang.org/account/avatar/00/17/26/be/c7249aea.jpg","comment_is_top":false,"comment_ctime":1556529867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556529867","product_id":100017301,"comment_content":"查了一下，“int[] a = new int[n];”是java的语法，C++的写法是int* a = new int[n], 这样可以不用将n声明成常量","like_count":0},{"had_liked":false,"id":90313,"user_name":"姜明","can_delete":false,"product_type":"c1","uid":1297552,"ip_address":"","ucode":"AFA9291ADCF910","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/90/c5fbb623.jpg","comment_is_top":false,"comment_ctime":1556491852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556491852","product_id":100017301,"comment_content":"很棒，讲解很清晰","like_count":0},{"had_liked":false,"id":90286,"user_name":"伊言","can_delete":false,"product_type":"c1","uid":1515463,"ip_address":"","ucode":"6ABF4D0BEA0FD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/1f/c7/bfb0a2fc.jpg","comment_is_top":false,"comment_ctime":1556466449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556466449","product_id":100017301,"comment_content":"之前一直想不通复杂度里的log没底，如今一看，豁然开朗，妙啊","like_count":0},{"had_liked":false,"id":90261,"user_name":"雷小歪","can_delete":false,"product_type":"c1","uid":1515631,"ip_address":"","ucode":"77C65CC960CD2A","user_header":"https://static001.geekbang.org/account/avatar/00/17/20/6f/dca760c1.jpg","comment_is_top":false,"comment_ctime":1556462407,"is_pvip":false,"replies":[{"id":"32370","content":"换底公式你搜下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556502574,"ip_address":"","comment_id":90261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556462407","product_id":100017301,"comment_content":"log3n= log32 * log2n 这个公式怎么推到出来的，迷惑为什么省去底数部分","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448446,"discussion_content":"换底公式你搜下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556502574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90053,"user_name":"生锈的刀","can_delete":false,"product_type":"c1","uid":1134507,"ip_address":"","ucode":"5BFAA921863A15","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/ab/e89265d1.jpg","comment_is_top":false,"comment_ctime":1556380406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556380406","product_id":100017301,"comment_content":" i=1;<br> while (i &lt;= n)  {<br>   i = i * 3;<br> }<br><br>对于这块代码，我的理解就是先假设n固定，计算i的时间复杂度。然后再假设i固定，计算n的时间复杂度。最后总的时间复杂度就是这2个时间复杂度的乘积。不知道这样理解对吗","like_count":0},{"had_liked":false,"id":89612,"user_name":"肉墩儿快跑","can_delete":false,"product_type":"c1","uid":1388656,"ip_address":"","ucode":"C8AB21845DFEFC","user_header":"https://static001.geekbang.org/account/avatar/00/15/30/70/f9eab394.jpg","comment_is_top":false,"comment_ctime":1556236895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556236895","product_id":100017301,"comment_content":"算法<br>让笨笨的计算机跑的高效运算<br>算法时间复杂度 <br>也叫时间渐进复杂度，程序执行随着数据量大了所需时间。<br>学习时间时间复杂度<br>知识随着数据量的增长到your brain到你理解、记住、熟练、创新等个个层次阶段所需时间","like_count":0},{"had_liked":false,"id":89426,"user_name":"noobcoder","can_delete":false,"product_type":"c1","uid":1513545,"ip_address":"","ucode":"B956F4C23671BB","user_header":"https://static001.geekbang.org/account/avatar/00/17/18/49/05544d79.jpg","comment_is_top":false,"comment_ctime":1556172662,"is_pvip":false,"replies":[{"id":"32105","content":"粗略统计 有估算地成分在里面","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556236492,"ip_address":"","comment_id":89426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556172662","product_id":100017301,"comment_content":"我就问一句，复杂度中N表示循环次数，但是循环内部的操作也会影响时间吧，但是没有见过任何统计算书对其统计，为什么呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448127,"discussion_content":"粗略统计 有估算地成分在里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556236492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89313,"user_name":"余先声","can_delete":false,"product_type":"c1","uid":1509678,"ip_address":"","ucode":"1CCABE478259EF","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/2e/4badf056.jpg","comment_is_top":false,"comment_ctime":1556153642,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556153642","product_id":100017301,"comment_content":"只有懂得分析各种算法的时间复杂度和空间复杂度，才知道具体业务场景下应该采取何种算法才是最优的。","like_count":0},{"had_liked":false,"id":88950,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1556031511,"is_pvip":false,"replies":[{"id":"31846","content":"你也可以看作三个unit time 看你如何定义了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1556061971,"ip_address":"","comment_id":88950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1556031511","product_id":100017301,"comment_content":"为何CPU的读-运算-写，看似3步，却被称为一个unit_time?<br>由于事后统计有依赖测试环境和数据规模等弊端，所以我们需要复杂度分析。<br>硬件环境一致的前提下，复杂度就是数据规模增长和时间消耗、空间消耗之间的关系，分为时间复杂度和空间复杂度。<br>时间复杂度反映的是性能问题，空间复杂度反映的是资源问题。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447959,"discussion_content":"你也可以看作三个unit time 看你如何定义了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556061971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88759,"user_name":"Maverick~","can_delete":false,"product_type":"c1","uid":1239495,"ip_address":"","ucode":"346B670DC02148","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/c7/a492ee8c.jpg","comment_is_top":false,"comment_ctime":1555994338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555994338","product_id":100017301,"comment_content":"复杂度分析这里已经三刷啦，虽然课程结束了但菜鸡的我从二十多节的时候就已经跟不上了，这段时间一直在忙一些竞赛没有好好的学习，这次看终于觉得前面的知识很多都能够更深刻地理解了，也希望自己能够坚持住。看到老师在课程最后面发的课程学习指导手册，感觉简直是为我这样的菜鸟量身定制，希望自己不忘初心，坚持学习","like_count":0},{"had_liked":false,"id":88571,"user_name":"zws","can_delete":false,"product_type":"c1","uid":1240091,"ip_address":"","ucode":"18EC6E85F3431E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/1b/650e3dbe.jpg","comment_is_top":false,"comment_ctime":1555944294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555944294","product_id":100017301,"comment_content":"过来二刷一遍， 温故而知新。 稍微理解透一点，后面在看书深入","like_count":0},{"had_liked":false,"id":88001,"user_name":"LorraineLiu","can_delete":false,"product_type":"c1","uid":1507990,"ip_address":"","ucode":"28204A24749B69","user_header":"https://static001.geekbang.org/account/avatar/00/17/02/96/a7cc7944.jpg","comment_is_top":false,"comment_ctime":1555807614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555807614","product_id":100017301,"comment_content":"性能测试分析通常是是对包含环境配置的整个服务程序的测试分析过程。而程序的渐进式复杂度分析是发现数据规模增长与时间，空间复杂度的正比关系，表示了当数据规模增大时，代码本身效率的表现，与环境配置无关。","like_count":0},{"had_liked":false,"id":87955,"user_name":"张浩","can_delete":false,"product_type":"c1","uid":1001225,"ip_address":"","ucode":"DBEAFFB7660813","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/09/316b0aa1.jpg","comment_is_top":false,"comment_ctime":1555766952,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1555766952","product_id":100017301,"comment_content":"在短期内来看，进行复杂度分析是要浪费时间的，仅仅进行性能测试就可以了；但把时间拉的长一些，为了避免以后出现花很多时间填坑的情况，进行复杂度分析是非常有必要的。","like_count":0},{"had_liked":false,"id":87342,"user_name":"陛下","can_delete":false,"product_type":"c1","uid":1502609,"ip_address":"","ucode":"0EE22B4A1904F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/ed/91/5dece756.jpg","comment_is_top":false,"comment_ctime":1555572368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555572368","product_id":100017301,"comment_content":"性能测试都是事后操作的了，能在事前做复杂度分析，能事先发现一些问题及时修补。性能测试可以验证你做的分析，或者发现未发现的问题；都是好的<br>","like_count":0},{"had_liked":false,"id":87054,"user_name":"A.Lyuweigh","can_delete":false,"product_type":"c1","uid":1443305,"ip_address":"","ucode":"0CCFA05639A9D1","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/e9/91273c29.jpg","comment_is_top":false,"comment_ctime":1555504148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555504148","product_id":100017301,"comment_content":"f（n）  g（n）  max<br>这都是谁和谁啊，救我一下 我还能学","like_count":0},{"had_liked":false,"id":86619,"user_name":"Geek_46cdcd","can_delete":false,"product_type":"c1","uid":1484198,"ip_address":"","ucode":"F67F8709F63A2C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQyP4WVaRJVV3OQ6icPfjicf2JqHjNGw0PhhOMnibicoMzLC3xzibHuibd9s2c3uWa1Y9Gg721L4cO2MUQ/132","comment_is_top":false,"comment_ctime":1555413242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555413242","product_id":100017301,"comment_content":"8用3个二进制表示是认真的吗...","like_count":0},{"had_liked":false,"id":86589,"user_name":"安和桥","can_delete":false,"product_type":"c1","uid":1500797,"ip_address":"","ucode":"651EA841964526","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/7d/dc03e762.jpg","comment_is_top":false,"comment_ctime":1555404654,"is_pvip":false,"replies":[{"id":"31223","content":"看后面的章节，有很多空间复杂度的分析，入门篇比较简单，别着急。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555469090,"ip_address":"","comment_id":86589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555404654","product_id":100017301,"comment_content":"还有就是以前都只会分析时间复杂度，对于空间复杂度的分析一直都是比较懵的，现在看来其实差不多，可能是自己在以前陷入一个误区。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447085,"discussion_content":"看后面的章节，有很多空间复杂度的分析，入门篇比较简单，别着急。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555469090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86587,"user_name":"安和桥","can_delete":false,"product_type":"c1","uid":1500797,"ip_address":"","ucode":"651EA841964526","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/7d/dc03e762.jpg","comment_is_top":false,"comment_ctime":1555404569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555404569","product_id":100017301,"comment_content":"终于明白为什么用2为底的对数表示了，之前一直不理解。","like_count":0},{"had_liked":false,"id":86530,"user_name":"Poppy","can_delete":false,"product_type":"c1","uid":1501505,"ip_address":"","ucode":"AF656A00521037","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/41/7cb2cf64.jpg","comment_is_top":false,"comment_ctime":1555391963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555391963","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":86196,"user_name":"不麻烦","can_delete":false,"product_type":"c1","uid":1454748,"ip_address":"","ucode":"D8B8C86D554082","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/9c/255c673c.jpg","comment_is_top":false,"comment_ctime":1555322304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555322304","product_id":100017301,"comment_content":"为什么指数阶和阶乘阶是“非多项式”，其他的是多项式？","like_count":0},{"had_liked":false,"id":85510,"user_name":"枯荣","can_delete":false,"product_type":"c1","uid":1020684,"ip_address":"","ucode":"171E48E85D17B2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ervibq6rGbag7xQuiaBUMaSwThic1bCr2AIDVQvRwYbBhhhOdpNq9HZQiaSfKejRTkoN1NWpee9MYXoRQ/132","comment_is_top":false,"comment_ctime":1555083582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555083582","product_id":100017301,"comment_content":"思考题：时间复杂度和空间复杂度检查，属于对代码review的非功能性、可用性检查，是保证代码质量的另一种手段，如果强制执行下来（形成个人开发习惯更好），对个人、对项目都大有裨益。","like_count":0},{"had_liked":false,"id":85471,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1555069560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555069560","product_id":100017301,"comment_content":"总是有一种感受，想弄清楚算法复杂度背后的故事，它的由来。维基百科上，1960年代年两位科学家提出了计算复杂度概念，追溯到了源头，可是他们的论文看不懂。不如先学习完老师文章之后，再回去挖掘更深的故事会更好。","like_count":0},{"had_liked":false,"id":85212,"user_name":"红色迷宫","can_delete":false,"product_type":"c1","uid":1286006,"ip_address":"","ucode":"F7256CBD879063","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImLVUl8Gn1pc2iahEQ8C5yUCq0u76d15AP6hgmnqYweE3xmXmGFgRiaBgic2dP2t6RvrzsjOCzfUWlA/132","comment_is_top":false,"comment_ctime":1555003186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555003186","product_id":100017301,"comment_content":"没想到看评论能收获这么多东西 赞","like_count":0},{"had_liked":false,"id":84395,"user_name":"wxj","can_delete":false,"product_type":"c1","uid":1487456,"ip_address":"","ucode":"B9BFE650BC4A39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzSRrK59sydq3k5uTE9SzPYShHo3PqGh8GTk3be0pHjS7eGTdw27cUyI0M4UEiaicoV2PJpiajWGTtQ/132","comment_is_top":false,"comment_ctime":1554857370,"is_pvip":false,"replies":[{"id":"30466","content":"好像也有","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554938837,"ip_address":"","comment_id":84395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554857370","product_id":100017301,"comment_content":"时间复杂度有开根号的吗？开根号的的怎么算呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446343,"discussion_content":"好像也有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554938837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83861,"user_name":"yshnb!","can_delete":false,"product_type":"c1","uid":1488301,"ip_address":"","ucode":"E93A9132532492","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/ad/587a45dc.jpg","comment_is_top":false,"comment_ctime":1554725466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554725466","product_id":100017301,"comment_content":"性能分析只能比较算法在当前场景下的好坏，可能在此处被认为是坏的算法，实际上的时间复杂度更低，适用于别的场景","like_count":0},{"had_liked":false,"id":83622,"user_name":"Geek_f003e6","can_delete":false,"product_type":"c1","uid":1485229,"ip_address":"","ucode":"4C9E188ABE3129","user_header":"","comment_is_top":false,"comment_ctime":1554686169,"is_pvip":false,"replies":[{"id":"31229","content":"看你怎么定义“语句”频度了。你说2n也对。这个不影响理解和结果，你自己心里明白就好了。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555469515,"ip_address":"","comment_id":83622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554686169","product_id":100017301,"comment_content":"老师 在for中，为什么只有n次执行呢？不应该是判断n次 i++ n次吗 ？也就是2n。虽然最后结果一样，但是为什么不考虑i++呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446101,"discussion_content":"看你怎么定义“语句”频度了。你说2n也对。这个不影响理解和结果，你自己心里明白就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555469515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83116,"user_name":"hk","can_delete":false,"product_type":"c1","uid":1057377,"ip_address":"","ucode":"92996CA0BCDD66","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/61/580bb3c3.jpg","comment_is_top":false,"comment_ctime":1554429378,"is_pvip":false,"replies":[{"id":"30233","content":"自己网上搜下吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554679906,"ip_address":"","comment_id":83116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554429378","product_id":100017301,"comment_content":"对数之间是可以互相转换的，log3n 就等于 log32 * log2n，老师这个换底公式推导不是很明白，能抽空回复下吗，谢谢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445868,"discussion_content":"自己网上搜下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554679906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82495,"user_name":"头发茂密","can_delete":false,"product_type":"c1","uid":1474084,"ip_address":"","ucode":"263C8B685F19A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/24/afb15de3.jpg","comment_is_top":false,"comment_ctime":1554223824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554223824","product_id":100017301,"comment_content":"我认为，时间和空间复杂度的分析思维，对于我们编写程序，会带来更多的掌控感。在编写程序的时候自己就能大概估算运行时长和内存占用情况这绝对是一级棒的体验。另外，空间和时间复杂度的思维当时也有利于我们思考用户加载时间和程序占用用户内存情况，会多一种产品思维下意识的提高用户体验。🤔","like_count":0},{"had_liked":false,"id":82165,"user_name":"hj_zack","can_delete":false,"product_type":"c1","uid":1181113,"ip_address":"","ucode":"53A11BAE0CEA2B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NAcDfnQjZMSXE1ib2sAviaQFQHMsf7IJjTH73CaOic37R9QibdXNCNvzUGdqkIJYI05u3LnKmQRomqRRmMAhg9B1HQ/132","comment_is_top":false,"comment_ctime":1554132923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554132923","product_id":100017301,"comment_content":"1.复杂度分析，更多是一种思想，能让自己在编写程序的时候潜移默化的思考着什么算法是最优的。<br>2.能清楚分析复杂度，能让我们在一些数据量较大的操作或者问题出现的时候，选择更优的方案和分析问题！<br>这是我认为的最大作用<br>至于性能测试，更多的算法适合度的检验和问题的检测，两者并没有冲突<br>","like_count":0},{"had_liked":false,"id":82089,"user_name":"小邓","can_delete":false,"product_type":"c1","uid":1474505,"ip_address":"","ucode":"1E903D5622D39F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7f/c9/40c609ee.jpg","comment_is_top":false,"comment_ctime":1554116490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554116490","product_id":100017301,"comment_content":"我觉得分析代码所用的时间、空间复杂度可以算是程序员出于尽善尽美的要求去做的，不过未来，可能时间、空间复杂度不会是考虑的第一重点。","like_count":0},{"had_liked":false,"id":81913,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1122544,"ip_address":"","ucode":"42D2C732E3E6EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/f0/84f3cbe0.jpg","comment_is_top":false,"comment_ctime":1554082230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554082230","product_id":100017301,"comment_content":"个人总结。1.和监控等事后统计不同时间和空间复杂度分析是事前预测，可以对决策有指导作用，可以规避一些不必要的问题。2.分析复杂度时关注循环内的执行情况再加上加法乘法等法则就可以获得绝大部分的分析结果。3.其实时间空间复杂度的种类也很少甚至可以枚举出来以供记忆，比如O（1）,O（logn）,O（n）,O（nlogn）,O（n2）等。4.复杂度分析应应用在平常的编码工作中，作为约束条件进行评估，决策等。总之，唯有不断正确的使用，才能让复杂度分析更好的服务我们和我们的编程。","like_count":0},{"had_liked":false,"id":81604,"user_name":"小耿","can_delete":false,"product_type":"c1","uid":1153707,"ip_address":"","ucode":"1C8B66C738D33B","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","comment_is_top":false,"comment_ctime":1553959019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553959019","product_id":100017301,"comment_content":"为啥2的n次方和n的阶层叫做非多项式量级？什么是非多项式？","like_count":0},{"had_liked":false,"id":81519,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1553933814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553933814","product_id":100017301,"comment_content":"<br>复杂度包括时间复杂度和空间复杂度。<br>时间复杂度，表示随着数据规模的增大，执行时间的变化趋势。<br>时间复杂度O(1),O(logn),O(n),O(n*logn),O(n²),O(n³)<br><br>T(n)=O(f(n))<br>大O表示法，T(n)表示执行时间，f(n)表示执行次数，O表示T(n)和f(n)的比值。<br><br>法则：<br>1 没有循环，递归等，时间复杂度都是O(1),因为不随着n的增大而增大<br>2 相加法则，取阶数高的时间复杂度","like_count":0},{"had_liked":false,"id":81439,"user_name":"苏味来","can_delete":false,"product_type":"c1","uid":1481991,"ip_address":"","ucode":"388A063094D0E4","user_header":"https://static001.geekbang.org/account/avatar/00/16/9d/07/0bf6f39a.jpg","comment_is_top":false,"comment_ctime":1553914142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553914142","product_id":100017301,"comment_content":"亲们能否帮个忙把上述代码 用python 写出来啊 上述 用c语言写的看不明白额","like_count":0},{"had_liked":false,"id":81336,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1411645,"ip_address":"","ucode":"BF590964828F8C","user_header":"https://static001.geekbang.org/account/avatar/00/15/8a/3d/5f29e927.jpg","comment_is_top":false,"comment_ctime":1553865328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553865328","product_id":100017301,"comment_content":"3.29<br>写的是真好，大家留言也写的很好，新人入门，一起加油","like_count":0},{"had_liked":false,"id":81258,"user_name":"梦违背","can_delete":false,"product_type":"c1","uid":1396649,"ip_address":"","ucode":"9B8023D469F444","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/a9/7ce612fb.jpg","comment_is_top":false,"comment_ctime":1553843479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553843479","product_id":100017301,"comment_content":"分析代码自然不会多此一举。一般分析之后心里会有个底，大概知道哪里会是性能瓶颈。拿到 压测报告也会有所着重看待。","like_count":0},{"had_liked":false,"id":81008,"user_name":"笔下文研","can_delete":false,"product_type":"c1","uid":1340242,"ip_address":"","ucode":"BE19C6816F293E","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/52/d66ce1c6.jpg","comment_is_top":false,"comment_ctime":1553774838,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553774838","product_id":100017301,"comment_content":"王老师，您好！<br>把多项式量级比作n规模的数据，分为m个机器处理，这样理解对吗？","like_count":0},{"had_liked":false,"id":80992,"user_name":"火狼王","can_delete":false,"product_type":"c1","uid":1152184,"ip_address":"","ucode":"76919311EA41A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/b8/09d86400.jpg","comment_is_top":false,"comment_ctime":1553770821,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553770821","product_id":100017301,"comment_content":"可以对设计的方案提供一种分析角度，大众都比较认可的一种方式。","like_count":0},{"had_liked":false,"id":79722,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1553525912,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553525912","product_id":100017301,"comment_content":"这里的项目之前，应该指项目上线之前吧，先做性能测试，目的是直观检查预期的数据规模，项目的具体执行时间。<br>相当于完成的第一个测试关卡，可以满足当前数据规模需求。<br>再进行代码的时间复杂度、空间复杂度的分析，为了知道未来能够在什么样的数据规模下，有什么样的性能，一方面给自己<br>一个预期参考，让自己不会迷茫；另一方面，就是可以知道哪里是最需要优化的地方。<br><br>每行代码都分析一下，我的理解是不浪费时间，像普通的常数阶代码，一眼就能看出来，很容易就分析出来，占用不了太多时间，而如果少分析一条代码，可能就会导致性能问题迟迟找不到。","like_count":0},{"had_liked":false,"id":79265,"user_name":"耿斌","can_delete":false,"product_type":"c1","uid":1237588,"ip_address":"","ucode":"6535D0B012D78E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/54/f836054a.jpg","comment_is_top":false,"comment_ctime":1553419800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553419800","product_id":100017301,"comment_content":"课后思考：实际编写代码时要有时间复杂度、空间复杂度分析的思想，这样对于性能测试来说可以更快发现和定位代码问题与瓶颈在什么地方，同样对于后期项目维护可以做到降低维护成本。","like_count":0},{"had_liked":false,"id":78986,"user_name":"Morey","can_delete":false,"product_type":"c1","uid":1396684,"ip_address":"","ucode":"8B82D47FE0FFF2","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/cc/bd924c18.jpg","comment_is_top":false,"comment_ctime":1553313283,"is_pvip":false,"replies":[{"id":"28848","content":"你可以继续看后面的章节 后面章节的讲解中有案例","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553386557,"ip_address":"","comment_id":78986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553313283","product_id":100017301,"comment_content":"在学习的时候经常听到老师说以空间换时间，请问有用时间换空间的吗？具体什么时候适合用空间换时间，或者时间换空间呢？自己还处于学习阶段，没有工作，所有不明白具体的使用场景，希望有人能总结一下......","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444312,"discussion_content":"你可以继续看后面的章节 后面章节的讲解中有案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553386557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78622,"user_name":"Tomcat","can_delete":false,"product_type":"c1","uid":1346364,"ip_address":"","ucode":"B270CEED693256","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/3c/0462eca7.jpg","comment_is_top":false,"comment_ctime":1553184224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553184224","product_id":100017301,"comment_content":"学习计算机，不关注量级的概念，是一个不入流的程序员，根本不能算是合格。<br>计算机的诞生就是为了解决海量数据规模而诞生的，如果我们对量级毫无概念，怎么可能把自己的程序设计好？比如说PB级别的无序数据给你排列，你竟然使用冒泡排序算法，而快速排序算法竟然视而不见，因为没有量级的概念这两个算法是等价的！可实际上，处理大量数据，可能得结果就是一辈子和分分钟的区别，就是那么惊人！","like_count":0},{"had_liked":false,"id":78528,"user_name":"林墨染","can_delete":false,"product_type":"c1","uid":1002945,"ip_address":"","ucode":"C90D508ABB9962","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/c1/d1337337.jpg","comment_is_top":false,"comment_ctime":1553168135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553168135","product_id":100017301,"comment_content":"性能测试是事后的一个结果，而分析复杂度，应该是基于已有结果做更好的优化。有时候机器很好，性能测试看上去数据很漂亮，但是我们要做到更好的利用性能还是要分析代码复杂度。","like_count":0},{"had_liked":false,"id":78431,"user_name":"Scorpio","can_delete":false,"product_type":"c1","uid":1310855,"ip_address":"","ucode":"CB8672DA73FA88","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/87/bcd6fb00.jpg","comment_is_top":false,"comment_ctime":1553146074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553146074","product_id":100017301,"comment_content":"之前有看过《数据结构和算法》一书的部分内容，捡起来倒也很快，加油，坚持看下去✊","like_count":0},{"had_liked":false,"id":78414,"user_name":"鱼竿","can_delete":false,"product_type":"c1","uid":1398016,"ip_address":"","ucode":"C2E851511CED05","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/00/245bf3cb.jpg","comment_is_top":false,"comment_ctime":1553142472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553142472","product_id":100017301,"comment_content":"顺便看了一眼对数的换底公式","like_count":0},{"had_liked":false,"id":78170,"user_name":"陈柏林","can_delete":false,"product_type":"c1","uid":1282562,"ip_address":"","ucode":"2636649821FAB9","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/02/288a6b8c.jpg","comment_is_top":false,"comment_ctime":1553084680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553084680","product_id":100017301,"comment_content":"时间复杂度就是为一次执行确定一个时间，而每一行代码执行过多少次就相对应的与预定时间想乘，来模拟确认对比代码的性能损耗，而空间复杂度就是当代码的操作需要对内存空间进行开辟时才算进去，大概是这个意思吗。","like_count":0},{"had_liked":false,"id":78075,"user_name":"立冬","can_delete":false,"product_type":"c1","uid":1467313,"ip_address":"","ucode":"287FA88D933FD5","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/b1/a6103703.jpg","comment_is_top":false,"comment_ctime":1553067374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553067374","product_id":100017301,"comment_content":"有必要  1不同的方法 unit_time  可能不一样 2更加直观","like_count":0},{"had_liked":false,"id":77742,"user_name":"文培","can_delete":false,"product_type":"c1","uid":1450462,"ip_address":"","ucode":"D8BC9BD6F2B261","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/de/c935d3bd.jpg","comment_is_top":false,"comment_ctime":1552990708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552990708","product_id":100017301,"comment_content":"现在才开始学习第一课，不是本专业的，底子不好，但谁不是从0到1呢。路漫漫其修远兮，希望从这一课开始能扎实进步，一步一个脚印，锻炼自己分析问题解决问题的能力，更多的具备计算机思想。。。","like_count":0},{"had_liked":false,"id":77715,"user_name":"Geek_7dbb95","can_delete":false,"product_type":"c1","uid":1452640,"ip_address":"","ucode":"1C746D46F63F1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Dx4iarWnict5O2NkZtBxpgiaznahetewm5L8bwVJ5z0HslrrMuBZP4vDY4EHbKSTUh6ZjicibtNuPf1gXuZKviaibUibjg/132","comment_is_top":false,"comment_ctime":1552986139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552986139","product_id":100017301,"comment_content":"项目的性能测试和代码的时间空间复杂度分析不是同一个概念，只有较少的时间空间复杂度的代码才能以更小的资源占用和运行时间更好的满足项目的性能。","like_count":0},{"had_liked":false,"id":77706,"user_name":"二哥不再迷茫","can_delete":false,"product_type":"c1","uid":1043199,"ip_address":"","ucode":"D02D489F546A09","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/ff/d1eb00e3.jpg","comment_is_top":false,"comment_ctime":1552985459,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552985459","product_id":100017301,"comment_content":"囫囵吐糟的读了一半多，发现前面的又都模糊了！重新来过！","like_count":0},{"had_liked":false,"id":77576,"user_name":"Geek_309d4b","can_delete":false,"product_type":"c1","uid":1461713,"ip_address":"","ucode":"628634CDE651D4","user_header":"","comment_is_top":false,"comment_ctime":1552964353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552964353","product_id":100017301,"comment_content":"多听几遍，确实效果不一样。第一遍一脸萌比，第二遍就好很多了。慢慢理解","like_count":0},{"had_liked":false,"id":77521,"user_name":"小沫","can_delete":false,"product_type":"c1","uid":1000977,"ip_address":"","ucode":"52341656210E0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/11/1cf8c174.jpg","comment_is_top":false,"comment_ctime":1552959140,"is_pvip":false,"replies":[{"id":"28519","content":"当n=3时，为啥内存循环是2+4+6呢？这个不对啊，应该是2+4吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553133420,"ip_address":"","comment_id":77521,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552959140","product_id":100017301,"comment_content":"老师好， 看到有人提问 “第二个例子中，第6.7行为什么是2n平方遍而不是n平方遍呢” ，您的回答是 第一个循环执行N次， 内部的循环就是 N * N次。 您还举例了一个 N=5的假定。 但是这样的计算 似乎也是不对的。<br><br>如下：<br><br>当 N = 1时 ，外层循环执行 1次 ， 内层循环执行 1次 。 等同于 2N<br>当 N = 2时， 外层循环执行 2次， 内存循环执行 2 + 4 <br>当 N = 3时， 外层循环执行3次， 内层循环执行 2 + 4 + 6次<br>当 N = 4时， 外层循环执行4次， 内层循环执行 2 + 4 + 6 + 8次<br>当 N = 5时， 外层循环执行5次， 内层循环执行 2+ 4 +6 +8 +10次","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443758,"discussion_content":"当n=3时，为啥内存循环是2+4+6呢？这个不对啊，应该是2+4吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553133420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77250,"user_name":"松间明月","can_delete":false,"product_type":"c1","uid":1457259,"ip_address":"","ucode":"C86ACBE74FEC1A","user_header":"https://static001.geekbang.org/account/avatar/00/16/3c/6b/27f7577d.jpg","comment_is_top":false,"comment_ctime":1552897441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552897441","product_id":100017301,"comment_content":"我认为主要是养好习惯，每次写完一段代码，就检查下代码的复杂度，并不一定要累积到项目完成再去检查，那样当然会觉得很浪费时间。","like_count":0},{"had_liked":false,"id":77198,"user_name":"李健","can_delete":false,"product_type":"c1","uid":1326948,"ip_address":"","ucode":"AC5469BF734B90","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/64/3f161fff.jpg","comment_is_top":false,"comment_ctime":1552882614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552882614","product_id":100017301,"comment_content":"进行复杂度分析，并不会太长的影响开发效率。反而，通过复杂度分析，能够感性的了解代码开发的难度，帮助优化代码！","like_count":0},{"had_liked":false,"id":77155,"user_name":"莫问流年","can_delete":false,"product_type":"c1","uid":1249663,"ip_address":"","ucode":"23140E031AED4B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/7f/80d56c1c.jpg","comment_is_top":false,"comment_ctime":1552872634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552872634","product_id":100017301,"comment_content":"并非多此一举，事后统计法有很多缺点：<br>1.依赖测试环境<br>2.受数据规模影响<br><br>不算浪费时间：<br>1.花些时间改进算法执行效率是值得的<br>2.当熟练掌握分析方法后分析就不会消耗太多时间","like_count":0},{"had_liked":false,"id":77066,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1552824158,"is_pvip":false,"replies":[{"id":"28117","content":"不行呢。比如，假设输入规模可能是n，但代码两层for（1..n）循环，所以，每条语句执行次数和应该是跟n^2成正比，而不是跟n成正比。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552875460,"ip_address":"","comment_id":77066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552824158","product_id":100017301,"comment_content":"所有代码的执行时间 T(n) 与每行代码的执行次数成正比，王老师，这句话表达含义让人费解，是不是换成<br>所有代码的执行时间 T(n) 与程序的输入规模成正比好一些呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443568,"discussion_content":"不行呢。比如，假设输入规模可能是n，但代码两层for（1..n）循环，所以，每条语句执行次数和应该是跟n^2成正比，而不是跟n成正比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552875460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76911,"user_name":"andavid","can_delete":false,"product_type":"c1","uid":1018739,"ip_address":"","ucode":"4CA32B155A682F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/73/5d4dca26.jpg","comment_is_top":false,"comment_ctime":1552748031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552748031","product_id":100017301,"comment_content":"「空间复杂度，表示算法的存储空间与数据规模之间的增长关系」<br><br>我觉得这个有点不太准确，容易被误导为实际存储所需的空间。<br><br>我的理解是，空间复杂度，表示的是算法在运行过程中临时占用的存储空间与数据规模之间的增长关系。<br><br>正如老师在链表那节课给我的回复：「空间复杂度的计算要看额外的内存消耗，而不是看数据本身存储需要多少空间」","like_count":0},{"had_liked":false,"id":76672,"user_name":"Geek_2b7365","can_delete":false,"product_type":"c1","uid":1069981,"ip_address":"","ucode":"935596EB48A2EA","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/9d/aca63ec1.jpg","comment_is_top":false,"comment_ctime":1552662134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552662134","product_id":100017301,"comment_content":"我认为项目的性能测试和我代码需要分析空间&#47;时间复杂度关系不大！作为程序员，应该有逼格或者有洁癖努力让自己的代码运行得更快更好，所以所谓的空间&#47;时间复杂度只是我们必须的基础。有了这些基础，再谈项目性能，个人觉得效果会更好。","like_count":0},{"had_liked":false,"id":76308,"user_name":"第一印象","can_delete":false,"product_type":"c1","uid":1460200,"ip_address":"","ucode":"952AF3AFEC9CA3","user_header":"https://static001.geekbang.org/account/avatar/00/16/47/e8/e117c43d.jpg","comment_is_top":false,"comment_ctime":1552570146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552570146","product_id":100017301,"comment_content":"我的观点是：做完性能测试后， 我们肯定能找到系统的瓶颈， 这时候就该对有瓶颈的代码和模块进行复杂度分析了， 如果是一个非常大的系统， 从头到尾对每行代码都做时间复杂度分析确实是停费时间的，针对压测的结果去做，是不是就方便很多了","like_count":0},{"had_liked":false,"id":76036,"user_name":"陆凌枫","can_delete":false,"product_type":"c1","uid":1349513,"ip_address":"","ucode":"622DEFC9DACDBA","user_header":"https://static001.geekbang.org/account/avatar/00/14/97/89/51f532f8.jpg","comment_is_top":false,"comment_ctime":1552525451,"is_pvip":false,"replies":[{"id":"27706","content":"因为时间复杂度是一个增长趋势，我们只需要看最高阶就可以了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552531413,"ip_address":"","comment_id":76036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552525451","product_id":100017301,"comment_content":"为什么时间复杂度里，加法法则是取最大的时间复杂度的，而不是各断代码时间复杂度想加，这个要怎么理解？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443145,"discussion_content":"因为时间复杂度是一个增长趋势，我们只需要看最高阶就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552531413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75603,"user_name":"Z7k","can_delete":false,"product_type":"c1","uid":1238680,"ip_address":"","ucode":"39373D7A6E6EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/98/5853eb73.jpg","comment_is_top":false,"comment_ctime":1552439287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552439287","product_id":100017301,"comment_content":"课后思考：好的代码与差的代码，正是体现在这复杂度上面，分析每段代码很重要。如果每段代码都很高效，则一个系统实现完也必定会相对高效。","like_count":0},{"had_liked":false,"id":75601,"user_name":"琳","can_delete":false,"product_type":"c1","uid":1281093,"ip_address":"","ucode":"8674EFD9E31354","user_header":"https://static001.geekbang.org/account/avatar/00/13/8c/45/fb573de7.jpg","comment_is_top":false,"comment_ctime":1552439199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552439199","product_id":100017301,"comment_content":"性能测试受到环境的一定影响，而且如果性能测试不达标，还是需要分析代码。<br>做时间复杂度空间复杂度分析，简单些的不需要花费多少时间，还有利于我们在写代码时写出复杂度低的代码。<br>","like_count":0},{"had_liked":false,"id":75580,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1552437486,"is_pvip":true,"replies":[{"id":"27717","content":"这个可能跟复杂度没啥关系了。内存泄漏可能是代码写的不够好，导致对象没释放。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552532397,"ip_address":"","comment_id":75580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552437486","product_id":100017301,"comment_content":"老师，想到一个问题，内存泄漏分析属于空间复杂度分析么？这个只牵扯了内存的分配，没有释放，如果不是空间复杂度问题，那是个什么问题。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442952,"discussion_content":"这个可能跟复杂度没啥关系了。内存泄漏可能是代码写的不够好，导致对象没释放。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552532397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75575,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1552437254,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552437254","product_id":100017301,"comment_content":"<br>性能测试根本跑不起来，没有测试数据，或者测试数据的获取就需要特别长时间。<br><br>比如 发射火箭的算法，不可能拿个火箭做性能测试吧<br><br>时间复杂度，空间复杂度可以对性能测试做理论预测。在某些性能测试不可达的情况下非常适用。这应该也是这门课的魔力","like_count":0},{"had_liked":false,"id":74864,"user_name":"鑫","can_delete":false,"product_type":"c1","uid":1453181,"ip_address":"","ucode":"0D6BA29A453EE2","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/7d/9aeeda40.jpg","comment_is_top":false,"comment_ctime":1552305897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552305897","product_id":100017301,"comment_content":"如果没记错的话，这应该是一个希腊字母","like_count":0},{"had_liked":false,"id":74839,"user_name":"鑫","can_delete":false,"product_type":"c1","uid":1453181,"ip_address":"","ucode":"0D6BA29A453EE2","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/7d/9aeeda40.jpg","comment_is_top":false,"comment_ctime":1552303308,"is_pvip":false,"replies":[{"id":"27362","content":"可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552356813,"ip_address":"","comment_id":74839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552303308","product_id":100017301,"comment_content":"时间复杂度公式可否理解为同阶无穷大量？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442701,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552356813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74719,"user_name":"大於一","can_delete":false,"product_type":"c1","uid":1366453,"ip_address":"","ucode":"E28D79126F9684","user_header":"https://static001.geekbang.org/account/avatar/00/14/d9/b5/47ca1f17.jpg","comment_is_top":false,"comment_ctime":1552286335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552286335","product_id":100017301,"comment_content":"看了好像有5遍了吧，顺便补补高中的知识才算看懂大概","like_count":0},{"had_liked":false,"id":74423,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1011634,"ip_address":"","ucode":"3EF2F5AE260644","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6f/b2/4c010d46.jpg","comment_is_top":false,"comment_ctime":1552222768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552222768","product_id":100017301,"comment_content":"算法复杂度，就是算法的效率，和平时所说的效率意思一样：用多少资源和时间完成工作。对于算法来说，就是它所消耗的内存和时间。<br>时间复杂度 可以简单的理解为代码的执行行数....","like_count":0},{"had_liked":false,"id":74372,"user_name":"Geek_68a3d8","can_delete":false,"product_type":"c1","uid":1244905,"ip_address":"","ucode":"A8D4DF5460F50B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/e9/8fc7a875.jpg","comment_is_top":false,"comment_ctime":1552205485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552205485","product_id":100017301,"comment_content":" i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br><br>n取值    执行次数    用对数表示（取整）<br> 0          0                -<br> 1           1               log(2)1 + 1<br> 2          2              log(2)2 + 1<br> 3          2              log(2)3 + 1<br> 4          3              log(2)4 + 1<br> 5          3              log(2)5 + 1<br> 6          3              log(2)6 + 1<br> 7          3              log(2)7 + 1<br> 8          4              log(2)8 + 1<br> ...<br> n          ?               log(2)n + 1<br><br>忽略掉低阶、常量、系数等与n无关的部分<br>这里与n相关的时间复杂度可表示为 O(logn)","like_count":0},{"had_liked":false,"id":74202,"user_name":"阴鸦","can_delete":false,"product_type":"c1","uid":1451891,"ip_address":"","ucode":"4455F9CAF3E8B9","user_header":"","comment_is_top":false,"comment_ctime":1552142182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552142182","product_id":100017301,"comment_content":"   &#47;**<br>     * 实现了一时间复杂度为O(n)的算法求i的值<br>     *&#47;<br>    public void O(int n){<br>        int i = 0; &#47;&#47; 耗时1<br><br>        &#47;&#47; 耗时2n*t<br>        for ( ; i&lt;= n; i++) {<br>            i += 1;<br>        }<br><br>        System.out.println(i);<br>    }<br><br>    &#47;**<br>     * 实现了一时间复杂度为O(n2)的算法求i的值<br>     *&#47;<br>    public void O_2(int n){<br>        int i = 0; &#47;&#47; 耗时1<br><br>        &#47;&#47; 耗时2n*t<br>        for ( ; i&lt;= n; i++) {<br>            i += 1;<br>            for (int j = 0; j &lt;= n; j++) {<br>                j += n;<br>            }<br>        }<br><br>        System.out.println(i);<br>    }<br><br>    &#47;**<br>     * 实现一个时间复杂度为O(1)的算法求i的值<br>     *&#47;<br>    public void O1(int n) {<br>        int i = 0;<br>        System.out.println(i+n);<br>    }<br><br>    &#47;**<br>     * 实现一个时间复杂度为O(logn)的算法求的值<br>     *&#47;<br>    public void O2(int n) {<br>        int i = 0;<br>        for (; i &lt;= n; i++) {<br>            i *= 2;<br>        }<br>    }<br><br>    &#47;**<br>     * 实现一个时间复杂度为O(nlogn)的算法求i的值<br>     *&#47;<br>    public void O3(int n) {<br>        int i = 0;<br>        for (; i &lt;= n; i++) {<br>            i *= 2;<br>            for (int j = 0; j &lt;= n; j++) {<br>                j*=2;<br>            }<br>        }<br>    }<br><br><br>麻烦大家指出一下这些算式的时间复杂度理解有没有问题","like_count":0},{"had_liked":false,"id":74058,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1451555,"ip_address":"","ucode":"63D5760B253A59","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/23/e99ff49f.jpg","comment_is_top":false,"comment_ctime":1552096023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552096023","product_id":100017301,"comment_content":"时间复杂度没问题，以一行代码为基本运算的话，就看基本运算运行的次数，以最大次为准。<br>但是空间复杂度分析的时候难道不分数据类型吗，如果同时定义了m个int型数据和n个String型数据，结果也是简单的O（m+n）吗？","like_count":0},{"had_liked":false,"id":73884,"user_name":"刘桂良","can_delete":false,"product_type":"c1","uid":1283108,"ip_address":"","ucode":"387EDB698A4BFA","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/24/cf2bb679.jpg","comment_is_top":false,"comment_ctime":1552024306,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1552024306","product_id":100017301,"comment_content":"目标：<br>1. 复杂度是什么<br>2. 怎么来分析一个算法的复杂度<br>3.如何衡量算法的效率和资源消耗？<br><br>复杂度，根据每行代码运行的时间（次数）来估算程序的总运行时间，并通过函数来表示这么一种趋势<br>分析方法：基础版本，一行行的加起来，然后去掉不影响大局的；进阶版：加法和乘法法则<br>衡量算法的效率和资源消耗：复杂度 大 O 函数表示<br><br>其实，分析复杂度只是第一步，目的是去如何优化程序，降低复杂度。虽然分析复杂度很重要，但是这不是我们的目的，我们是为了程序运行的高效率和低消耗。<br><br>疑问：在实际开发中会用到别人的一些方法或者函数，如果自己的函数中调用了这个函数，而且又没有太多的时间去看这个函数的时间和空间复杂度，那自己写的程序的复杂度岂不是没办法估算了，老师针对这种情况是如何去做的呢？","like_count":0},{"had_liked":false,"id":73811,"user_name":"阿仁","can_delete":false,"product_type":"c1","uid":1101024,"ip_address":"","ucode":"972237E993F738","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/e0/5d85f93c.jpg","comment_is_top":false,"comment_ctime":1552006788,"is_pvip":false,"replies":[{"id":"27363","content":"😄， 你的代码太奇怪了，真不好分析。粗略点算的话, (2*2)^(2*k) = n  =》 2^k = n =》复杂度是O(logn)。建议不要分析这个代码的复杂度了，太奇葩了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552357299,"ip_address":"","comment_id":73811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552006788","product_id":100017301,"comment_content":"如果把最后一道空间复杂度的题稍微改一下<br>for (int i = 0; i&lt;n; i++){<br>     i = i * i;<br>}<br>请问时间复杂度是多少？我感觉还是O(logn)，不知道怎么推算。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442289,"discussion_content":"😄， 你的代码太奇怪了，真不好分析。粗略点算的话, (2*2)^(2*k) = n  =》 2^k = n =》复杂度是O(logn)。建议不要分析这个代码的复杂度了，太奇葩了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552357299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73264,"user_name":"弘毅","can_delete":false,"product_type":"c1","uid":1109305,"ip_address":"","ucode":"2EF8604D8795DB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/39/d9706a1a.jpg","comment_is_top":false,"comment_ctime":1551846638,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551846638","product_id":100017301,"comment_content":"上学那会只是记住了时间复杂度和空间复杂度的公式和计算方法，不知道推导关系，所以没法记忆牢固。现在再来看，有这推导关系，瞬间记住了","like_count":0},{"had_liked":false,"id":73048,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1551785336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551785336","product_id":100017301,"comment_content":"时间复杂度又叫时间渐进复杂度，它是显示一个程序的数据处理随时间的变化规律。T(n)=O*F(n)，t代表时间复杂度，f代表程序执行次数，o为一个常亮，因此时间复杂度可以直接表示为F(n)的大小，又由于f(n)里面可能有多阶或者多项甚至常数项，当n比较大时，可以直接取最高阶，忽略其他项。时间复杂度有加法和乘法规则，但遇到不能分别最高阶的时候，加法法则不适用。<br>空间复杂度又称空间渐进复杂度。描述内存空间随程序运行的变化，空间复杂度很好分析，直接把所有new出来的对象空间相加即可。","like_count":0},{"had_liked":false,"id":72742,"user_name":"绝影","can_delete":false,"product_type":"c1","uid":1437760,"ip_address":"","ucode":"EA3C85D21DE210","user_header":"https://static001.geekbang.org/account/avatar/00/15/f0/40/219be32a.jpg","comment_is_top":false,"comment_ctime":1551708693,"is_pvip":false,"replies":[{"id":"26410","content":"嗯嗯 不影响最后结果的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551753028,"ip_address":"","comment_id":72742,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551708693","product_id":100017301,"comment_content":" int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br>这段代码第四行不应该是执行n+1次<br>第五行才是n次吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441720,"discussion_content":"嗯嗯 不影响最后结果的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551753028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72678,"user_name":"ykk","can_delete":false,"product_type":"c1","uid":1256535,"ip_address":"","ucode":"1C12BE1A3CF2AB","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/57/dc515bcc.jpg","comment_is_top":false,"comment_ctime":1551691284,"is_pvip":false,"replies":[{"id":"26408","content":"😄 你想多了，是java或者伪代码呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551752883,"ip_address":"","comment_id":72678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551691284","product_id":100017301,"comment_content":"作者大大，所有的示例代码都是用C#写的吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441683,"discussion_content":"😄 你想多了，是java或者伪代码呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551752883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72630,"user_name":"JD_Ahoi","can_delete":false,"product_type":"c1","uid":1445281,"ip_address":"","ucode":"2188A07A5FF7A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/a1/a6e16f9e.jpg","comment_is_top":false,"comment_ctime":1551682445,"is_pvip":false,"replies":[{"id":"26799","content":"实际上，课程里涉及到的公式中，最难的也就这个了：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551924624,"ip_address":"","comment_id":72630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551682445","product_id":100017301,"comment_content":"看到这一段：2º，2¹，2²， 2³，...  2x =n的时候，我还在笔记本上运算了一遍，感觉高中数学都快忘完了o(╥﹏╥)o很多公式都忘记怎么求值的了。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441667,"discussion_content":"实际上，课程里涉及到的公式中，最难的也就这个了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551924624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72379,"user_name":"lpf32","can_delete":false,"product_type":"c1","uid":1039717,"ip_address":"","ucode":"E1B127FDFF74BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/65/3b4a2930.jpg","comment_is_top":false,"comment_ctime":1551603317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551603317","product_id":100017301,"comment_content":"1. 为什么需要复杂度分析<br>因为在不同的情况下，相同的代码跑出来的时间也是不一样的，需要用一种统一的方法来表示代码的运行效率。<br>2. O表示法的意思。<br>T=O(f(n)) 运行时间与每行代码的运行次数成正比，f(n)表示的是每行代码的运行次数总和。只有高阶对运行时间的影响是最大的，所以可以把参数，低阶，参数取消掉。常用的时间复杂度有，O(1), O(logn), O(n), O(nlogn), O(n^2)","like_count":0},{"had_liked":false,"id":72334,"user_name":"小小杨","can_delete":false,"product_type":"c1","uid":1105218,"ip_address":"","ucode":"7E4DC9A782FFD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/42/4a82631e.jpg","comment_is_top":false,"comment_ctime":1551589426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551589426","product_id":100017301,"comment_content":"有必要进行时间和空间复杂度分析，通过分析，我们对编写的代码有深刻认识，做到心中有数。做为和同事进行讨论代码性能的通用标准，也可以作为算法不断调优的理论指导，和数据规模等因数影响由于事后分析的局限性，受环境大，不可能在编码和设计阶段对所有的可能进行测试，有很大的局限性，不能做不到通用。当然事后的测试分析也是必需要做的。","like_count":0},{"had_liked":false,"id":72214,"user_name":"【行者无疆】","can_delete":false,"product_type":"c1","uid":1030369,"ip_address":"","ucode":"1D153BD432EA60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/e1/51379737.jpg","comment_is_top":false,"comment_ctime":1551535109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551535109","product_id":100017301,"comment_content":"一般业务量级没有达到的时候，还真不知道。最近体会到多个客户同时访问的时候，算法能节约不少时间。以前一直想学但一直没有契机，我觉得现在是时候了，写的真不错。","like_count":0},{"had_liked":false,"id":71563,"user_name":"st","can_delete":false,"product_type":"c1","uid":1293030,"ip_address":"","ucode":"CF847917034C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/ba/e6/74cf4934.jpg","comment_is_top":false,"comment_ctime":1551370115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551370115","product_id":100017301,"comment_content":"底子比较薄，今天刚加入，老师讲的O(logN)之前一直很迷茫，看了老师给的例子，和等比数列的分析，今天终于知道什么情况下会产生logn这种时间复杂度，以及明白logn的底数是几这个问题，路还很远，我的flag是坚持看完十种数据结构和算法，以后面试再也不会被问成傻子了，大家一起加油！","like_count":0},{"had_liked":false,"id":70480,"user_name":"冷颜〆","can_delete":false,"product_type":"c1","uid":1237101,"ip_address":"","ucode":"8FE0FB27AFA31C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/6d/a55c6ec4.jpg","comment_is_top":false,"comment_ctime":1551105106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551105106","product_id":100017301,"comment_content":"终于解决了我对时间复杂度的误区 在n无限大的情况下 其余操作都可以忽略 所以每段代码的时间复杂度看最复杂的那段逻辑的值就对了 而并不是所有操作相加 （m，n除外","like_count":0},{"had_liked":false,"id":70439,"user_name":"宫志鹏","can_delete":false,"product_type":"c1","uid":1434268,"ip_address":"","ucode":"697661BB60912A","user_header":"https://static001.geekbang.org/account/avatar/00/15/e2/9c/1dc6ea03.jpg","comment_is_top":false,"comment_ctime":1551097933,"is_pvip":false,"replies":[{"id":"25192","content":"😄，抱歉。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551147276,"ip_address":"","comment_id":70439,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551097933","product_id":100017301,"comment_content":"看似是c但不是c写的，c的return 加main函数让人有点强迫症","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440635,"discussion_content":"😄，抱歉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551147276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70104,"user_name":"一万小时","can_delete":false,"product_type":"c1","uid":1297927,"ip_address":"","ucode":"D2D443595BB1ED","user_header":"","comment_is_top":false,"comment_ctime":1550996373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550996373","product_id":100017301,"comment_content":"每个项目规模不一样，对于新手来说，架构方面的性能无法参与，所以对于自己手头的分支项目进行时间复杂度分析和空间复杂度分析很有必要，这是高楼大厦的一部分！","like_count":0},{"had_liked":false,"id":70064,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1550980328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550980328","product_id":100017301,"comment_content":"复杂度分析是一种不基于平台，不基于硬件资源的通用的代码性能分析方法，当我们掌握它以后，简单的代码一眼就能分析出来，复杂的代码虽然需要花费时间去分析，但，这是值得的，因为它日后很可能会成为产品的的性能瓶颈，这时候我们就需要花费大量的时间，重构，测试，改bug。<br><br>复杂度是指，代码执行所需要的时间or空间随数据规模增长而变化的趋势，所以，我们在分析的时候，考虑变量、忽略常量，变量中选择变化最大的作为结果。","like_count":0},{"had_liked":false,"id":70049,"user_name":"浮生","can_delete":false,"product_type":"c1","uid":1439626,"ip_address":"","ucode":"95E23BE6D194FE","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/8a/46d634dd.jpg","comment_is_top":false,"comment_ctime":1550976646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550976646","product_id":100017301,"comment_content":"讲解的确实挺棒，看过几遍时间复杂度这块，这遍算是彻底理解了，通俗易懂，很赞","like_count":0},{"had_liked":false,"id":69964,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1550918442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550918442","product_id":100017301,"comment_content":"有必要的，理论结合实践。复杂度分析从数学层面上对代码进行分析，这个过程中进行了一些假设，较为理想化。但代码在实际运行中会涉及到物理硬件等其他因素，性能不会如理论分析得到的结果那么理想，所以需要进行实际性能测试，再与理论分析得到的结果进行对比，依次进行进一步改进","like_count":0},{"had_liked":false,"id":69857,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1550890502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550890502","product_id":100017301,"comment_content":"发现学了这一节觉得分析空间复杂度和时间复杂度很有必要，因为谁都不知道以后咱们的业务是否是会扩大规模，身为程序员的我们要有先见之明，尽量避免挖坑填坑的那些操作","like_count":0},{"had_liked":false,"id":69304,"user_name":"spec_gun","can_delete":false,"product_type":"c1","uid":1436060,"ip_address":"","ucode":"A70CE79E8189F5","user_header":"https://static001.geekbang.org/account/avatar/00/15/e9/9c/833729dc.jpg","comment_is_top":false,"comment_ctime":1550714332,"is_pvip":false,"replies":[{"id":"24822","content":"也可以计算进去，但并不影响最后的结果。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550832121,"ip_address":"","comment_id":69304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550714332","product_id":100017301,"comment_content":"有一个问题不是太理解， 第一个求时间复杂度的代码段， 应该是(2n+3)  定义sum变量 i变量，时间复杂度是1, for循环语句根据n的值来判断执行的次数，所以时间复杂度为n,而循环体语句根据循环头来判断执行的速度,所以时间复杂度为n，  (为什么不计算return语句的时间复杂度？) return语句包含在函数中应该也算执行, 时间复杂度应该为1","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440051,"discussion_content":"也可以计算进去，但并不影响最后的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550832121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69218,"user_name":"Geek_8cf9dd","can_delete":false,"product_type":"c1","uid":1333611,"ip_address":"","ucode":"F64BB2A317017C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKicUXKVXIQAmToH3CkpQGjjDHRGSh0RjBpUf82r9WibfrrJMHxZXcuNVgCy8icpI9Mo4He8umCspDDA/132","comment_is_top":false,"comment_ctime":1550678739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550678739","product_id":100017301,"comment_content":"看第二遍很有感觉","like_count":0},{"had_liked":false,"id":69152,"user_name":"尘陌","can_delete":false,"product_type":"c1","uid":1437507,"ip_address":"","ucode":"27D6E188273968","user_header":"https://static001.geekbang.org/account/avatar/00/15/ef/43/962e020f.jpg","comment_is_top":false,"comment_ctime":1550670344,"is_pvip":false,"replies":[{"id":"24611","content":"可以利用乘法法则O(logn*logn)","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550717044,"ip_address":"","comment_id":69152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550670344","product_id":100017301,"comment_content":"您好，老师，我想请问一下，在你讲的对数复杂度的外层如果嵌套一层n次循环那么时间复杂度是O(nlogn)，如果在外层嵌套的循环也是对数级别的呢，那么这时时间复杂度应该是什么，例如：<br>int  i=1;<br>for (int j = 1; j &lt;= n; j *= 2) {<br> \twhile (i &lt;= n)  {<br>   \t\ti = i * 2;<br> \t}<br>}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439974,"discussion_content":"可以利用乘法法则O(logn*logn)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550717044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68990,"user_name":"sun1117","can_delete":false,"product_type":"c1","uid":1435287,"ip_address":"","ucode":"6D16C136AB8DC4","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/97/c93e992a.jpg","comment_is_top":false,"comment_ctime":1550639929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550639929","product_id":100017301,"comment_content":"时间复杂度表示一段代码执行效率与时间的关系，表示一种粗略关系，安装循环相乘，平级叠加的方式去最大的复杂度，有时如果不知道两段平行代码复杂度，n和m哪个最大，用m+n的式子表示。<br><br>空间复杂度就是数据存储所占用的空间，分析方式如时间复杂度","like_count":0},{"had_liked":false,"id":68724,"user_name":"lee","can_delete":false,"product_type":"c1","uid":1116493,"ip_address":"","ucode":"25975721019E9D","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/4d/72b0bca7.jpg","comment_is_top":false,"comment_ctime":1550586935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550586935","product_id":100017301,"comment_content":"如果能做到每段代码都做时间复杂度和空间复杂度分析，那么线上运行的程序如果出现了性能问题  应该可以快进行定位，所以不会是多此一举！当然现实中恐怕也会很难做到，这跟个人编码时是否会深入思考有很大关系","like_count":0},{"had_liked":false,"id":68643,"user_name":"Y.Guo","can_delete":false,"product_type":"c1","uid":1237256,"ip_address":"","ucode":"40503988020920","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/08/79e5c9cc.jpg","comment_is_top":false,"comment_ctime":1550564402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550564402","product_id":100017301,"comment_content":"文中&quot;第一段的时间复杂度是多少呢？这段代码循环执行了 100 次，...&quot;<br>应该是99次，因为是p&lt;100，第100次不回执行到","like_count":0},{"had_liked":false,"id":68503,"user_name":"陈园","can_delete":false,"product_type":"c1","uid":1353753,"ip_address":"","ucode":"21BC5886297707","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJnguccGyM8nvOb0N9B0kCnBV6OwNjvG9trYdiakmgYWVyfJkpD1vJBfnicmaQseupa7A7ic1rian0NlA/132","comment_is_top":false,"comment_ctime":1550535616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550535616","product_id":100017301,"comment_content":"之前对于复杂度的分析一知半解，概念很模糊，老师化繁为简讲的很深刻，也很容易理解，我现在不仅知其然，也知其所以然。","like_count":0},{"had_liked":false,"id":68427,"user_name":"YL,","can_delete":false,"product_type":"c1","uid":1415687,"ip_address":"","ucode":"832A5293493A6A","user_header":"https://static001.geekbang.org/account/avatar/00/15/9a/07/1f63421c.jpg","comment_is_top":false,"comment_ctime":1550499208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550499208","product_id":100017301,"comment_content":"int fun(int n)<br>{<br>\tint i=0,sum=0;<br>\twhile(sum &lt; n)<br>\t\tsum += ++i;<br>\treturn i;<br>}<br><br>看到这道题目,结合学的应该是O(logN)吧！","like_count":0},{"had_liked":false,"id":68364,"user_name":"慕容小白","can_delete":false,"product_type":"c1","uid":1414302,"ip_address":"","ucode":"CFDFB28B99FD4D","user_header":"https://static001.geekbang.org/account/avatar/00/15/94/9e/e39e6227.jpg","comment_is_top":false,"comment_ctime":1550489079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550489079","product_id":100017301,"comment_content":"测试只为了检查你的功能有没有及格，不及格再改。算法分析能帮助我们不光能一次及格，还能考 80 分。","like_count":0},{"had_liked":false,"id":68282,"user_name":"沃野伏地","can_delete":false,"product_type":"c1","uid":1256735,"ip_address":"","ucode":"E681344BBE441F","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/1f/8d53c785.jpg","comment_is_top":false,"comment_ctime":1550477269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550477269","product_id":100017301,"comment_content":"有时候测试的数据，就像是采集的样本一样，只是测试数据处理的结果正确与否，可能随着软件的运行，数据量会越来越大，这时候就不是测试就能分析出问题来了，后期数据量的大小就决定了你必须考虑复杂度","like_count":0},{"had_liked":false,"id":67739,"user_name":"常银玲","can_delete":false,"product_type":"c1","uid":1252109,"ip_address":"","ucode":"894A34D9AD8942","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/0d/9c3e2241.jpg","comment_is_top":false,"comment_ctime":1550236908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550236908","product_id":100017301,"comment_content":"看了老师的文章，有一定的基础学习起来不是很吃力，但是在这之前我之前不知道什么情况才会出现时间复杂度为O(logn),看了老师的文章，自己也去思考了一下，其中n代表是数据的规模，logn代码执行的次数，这样将我们设x次可以达到n，这样就会有2的x阶乘等于n，所有fn=n的开方，就是logn。感谢老师","like_count":0},{"had_liked":false,"id":67297,"user_name":"键盘钢琴手","can_delete":false,"product_type":"c1","uid":1229116,"ip_address":"","ucode":"40E21E41D0AF25","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/3c/5b381d6b.jpg","comment_is_top":false,"comment_ctime":1550126239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550126239","product_id":100017301,"comment_content":"举个栗子：<br>有个程序猿对模块做算法分析以后发现里面的算法复杂度为 O(n2 )，可以优化为O(logn)，但是无论优不优化测试时候性能没问题（感觉上都是一瞬间出结果），于是在市场压力下就上线了。上线以后用户量一上来，数据量是测试时候的1000倍，CPU撑爆，由于是分布式部署，一个CPU撑爆瞬间加大其他服务器的压力，集群开始“雪崩”。<br>算法复杂度，是个数学意义上的计量方法，它展示的是算法在数学上的效率，跟硬件没关系。<br>预估算法复杂度就是预估算法在数学上的效率，不是预估算法在实际服务器上玩不玩得转。<br>你服务器性能牛逼O(n2 )的复杂度也能玩，但并不能说明算法就一定合理。<br>你肌肉发达徒手能举起100公斤，我肌肉也发达设计一个杠杆能抬起200公斤，旁边过来一个大神设计一套组合滑轮系统轻松吊起1000公斤，实际上客户只需要一个能搬起50公斤的人。","like_count":0},{"had_liked":false,"id":67169,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1389604,"ip_address":"","ucode":"50616ED68A5B40","user_header":"https://static001.geekbang.org/account/avatar/00/15/34/24/34ca1d23.jpg","comment_is_top":false,"comment_ctime":1550107370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550107370","product_id":100017301,"comment_content":"性能测试依赖海量测试数据，性能分析不需要。每行分析一个是能清晰知道性能瓶颈在哪部分代码，好针对性优化，遇到函数调用地方也需要进一步分析该函数的复杂度。","like_count":0},{"had_liked":false,"id":66986,"user_name":"slim_czf","can_delete":false,"product_type":"c1","uid":1309368,"ip_address":"","ucode":"0907F7F3A13A4F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1LvJFRCIdEE97nggX6b8p8dWvYiaxF8V6sJUibyEmwXcKicwrYNPicNicO7T3icm3e2836OvZzEjn8oLLM1lkNuPjGLw/132","comment_is_top":false,"comment_ctime":1550051525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550051525","product_id":100017301,"comment_content":"1.性能测试只是反应一定规模的数据在确定的宿主环境中的运行效率和存储空间，具有一定的局限性，测试结果会随条件改变而改变。<br>2.渐进复杂度分析可以反应代码运行效率和空间存储的变化趋势，具有一般性，高拓展性。<br>3.性能测试可在复杂度理论分析后，作为实验验证。","like_count":0},{"had_liked":false,"id":66585,"user_name":"夜小七","can_delete":false,"product_type":"c1","uid":1313258,"ip_address":"","ucode":"7E41320E1155F4","user_header":"https://static001.geekbang.org/account/avatar/00/14/09/ea/52394bf3.jpg","comment_is_top":false,"comment_ctime":1549962506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549962506","product_id":100017301,"comment_content":"之前概念一直很模糊，现在清晰了很多","like_count":0},{"had_liked":false,"id":66077,"user_name":"晶晶","can_delete":false,"product_type":"c1","uid":1239323,"ip_address":"","ucode":"2D7F03BB73717C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/1b/1a6938ec.jpg","comment_is_top":false,"comment_ctime":1549871605,"is_pvip":false,"replies":[{"id":"23408","content":"《程序员的数学基础课》了解一下😄","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1549874116,"ip_address":"","comment_id":66077,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549871605","product_id":100017301,"comment_content":"用了三个小时看懂的，发现高中的数学全还给学校了。","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438693,"discussion_content":"《程序员的数学基础课》了解一下😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549874116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66005,"user_name":"阳春面","can_delete":false,"product_type":"c1","uid":1175670,"ip_address":"","ucode":"59DF8AD1AA0154","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/76/5b37ae02.jpg","comment_is_top":false,"comment_ctime":1549849629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549849629","product_id":100017301,"comment_content":"如果对所有代码都进行分析，项目时间上不允许，这样就需要做取舍，判别出核心模块，做空间和时间复杂度的分析。","like_count":0},{"had_liked":false,"id":65963,"user_name":"奋斗的小鸟","can_delete":false,"product_type":"c1","uid":1033333,"ip_address":"","ucode":"8DB0026AF7B54C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/75/9c6bb96d.jpg","comment_is_top":false,"comment_ctime":1549804743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549804743","product_id":100017301,"comment_content":" int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br>第45行，为什么是2n呢？实在想不明白。","like_count":0},{"had_liked":false,"id":65773,"user_name":"诺","can_delete":false,"product_type":"c1","uid":1347824,"ip_address":"","ucode":"DA8CF6A0B706C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/90/f0/45de3582.jpg","comment_is_top":false,"comment_ctime":1549633140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549633140","product_id":100017301,"comment_content":"重新了解了很多细节，比我之前自己看深刻多了！","like_count":0},{"had_liked":false,"id":65384,"user_name":"璇玑鱼","can_delete":false,"product_type":"c1","uid":1110707,"ip_address":"","ucode":"C1963AEECAD052","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/b3/8f4fa854.jpg","comment_is_top":false,"comment_ctime":1549326437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549326437","product_id":100017301,"comment_content":"这课程很费神，我要一边听音频一边看图文，有时候想划线，划线只是单纯想划线，不是要做笔记。谁能够一边划线一边听课一边写笔记呢？做笔记又要暂停音频。。。。但是我在图文界面上又不能直接暂停，说了那么多，意思就是要么纯划线不要跳走，要么让我阅读图文时可以一键暂停音频","like_count":0},{"had_liked":false,"id":65305,"user_name":"奋斗的小鸟","can_delete":false,"product_type":"c1","uid":1033333,"ip_address":"","ucode":"8DB0026AF7B54C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/75/9c6bb96d.jpg","comment_is_top":false,"comment_ctime":1549236944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549236944","product_id":100017301,"comment_content":"运行了n遍，为什么会是2n呢？想不明白。","like_count":0},{"had_liked":false,"id":65304,"user_name":"奋斗的小鸟","can_delete":false,"product_type":"c1","uid":1033333,"ip_address":"","ucode":"8DB0026AF7B54C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/75/9c6bb96d.jpg","comment_is_top":false,"comment_ctime":1549236740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549236740","product_id":100017301,"comment_content":"第一段代码，循环的位置为什么是2n*unit_time呢？","like_count":0},{"had_liked":false,"id":65204,"user_name":"是剑雄啊~","can_delete":false,"product_type":"c1","uid":1397245,"ip_address":"","ucode":"F4A46B6288EB61","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/fd/6ebb7efb.jpg","comment_is_top":false,"comment_ctime":1549103543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549103543","product_id":100017301,"comment_content":"纸上得来终觉浅，绝知此事要躬行! 学习数据结构的目的是为了提高代码质量和效率，以及合理的计算思维，接下来的每一课在消化吸收后务必输出自己的想法和实现其中的原理，GitHub，博客是主要平台，还有和讨论区的伙伴一起交流，加油！期待遇见更好的自己，做一个专业的程序员!","like_count":0},{"had_liked":false,"id":65132,"user_name":"Pre-Y","can_delete":false,"product_type":"c1","uid":1396900,"ip_address":"","ucode":"A13D13A37F3ABC","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/a4/8d2e454b.jpg","comment_is_top":false,"comment_ctime":1549071570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549071570","product_id":100017301,"comment_content":"对课后思考题只有些模糊的感觉，看过评论区大佬们的观点后有了些初步的认识。站在巨人的肩膀上领略风景真是件幸福的事情😁","like_count":0},{"had_liked":false,"id":65074,"user_name":"third","can_delete":false,"product_type":"c1","uid":1025114,"ip_address":"","ucode":"9A37408A834F0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/5a/e708e423.jpg","comment_is_top":false,"comment_ctime":1549024025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549024025","product_id":100017301,"comment_content":"有点像两种飞机造法。<br>事前小心，每一个零件都好好做，预防问题，最后再测<br>事后小心，快速造完飞机，慢慢测，找问题，再解决问题。（成本不一样，而且工程越大，后一种解决问题成本越高）","like_count":0},{"had_liked":false,"id":64948,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1548983345,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548983345","product_id":100017301,"comment_content":"对代码分析时间复杂度、空间复杂度是必要的。<br>因为随着数据规模的增长，低效的代码实现可能会影响程序的运行效率<br>现实场景中处理的数据规模可能巨大，程序出现问题可能会出现无法挽回的后果。<br>提前做复杂度分析，可以保证程序运行的效率。消除未知的风险。","like_count":0},{"had_liked":false,"id":64715,"user_name":"Teng","can_delete":false,"product_type":"c1","uid":1263838,"ip_address":"","ucode":"9175FB20EFCA46","user_header":"https://static001.geekbang.org/account/avatar/00/13/48/de/40f56fdc.jpg","comment_is_top":false,"comment_ctime":1548866998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548866998","product_id":100017301,"comment_content":"感谢!非常清楚讲解!","like_count":0},{"had_liked":false,"id":63520,"user_name":"学无止境","can_delete":false,"product_type":"c1","uid":1350473,"ip_address":"","ucode":"FC13803A5A3E9E","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/49/33b2da58.jpg","comment_is_top":false,"comment_ctime":1548388784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548388784","product_id":100017301,"comment_content":"订阅好久了没好好学，趁着放假要一口气学完。上学学的算法都还给老师了，立个flag。","like_count":0},{"had_liked":false,"id":62820,"user_name":"Murphy","can_delete":false,"product_type":"c1","uid":1147233,"ip_address":"","ucode":"79DA803FD6CFCF","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/61/41ae63f7.jpg","comment_is_top":false,"comment_ctime":1548165934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548165934","product_id":100017301,"comment_content":"老师怎么可以讲的这么有趣！<br>对数据结构与算法一向恐惧的我竟对此着迷。<br>思考题：<br>既然大家都说的很明白了，我就另外说个：<br>比如在学某个技术或某个算法自己实现一遍的时候，先不考虑太多，放开胆先把代码实现，然后在进行分析，自己对其进行进一步优化，也是对自己的一种锻炼。","like_count":0},{"had_liked":false,"id":62519,"user_name":"周小成","can_delete":false,"product_type":"c1","uid":1229260,"ip_address":"","ucode":"5B47835DE09E1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/cc/6b6bbd41.jpg","comment_is_top":false,"comment_ctime":1548079983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548079983","product_id":100017301,"comment_content":"简单地说，掌握复杂度的分析应该是最基本的能力，作为程序员要自己心里明白自己写的代码水平怎么样，怎样写出好的代码，而不是也不可能每次都不明不白地写完代码自己又在机器上跑一遍检查效果，让机器来完成本来你自己该掌握的东西。","like_count":0},{"had_liked":false,"id":62212,"user_name":"D","can_delete":false,"product_type":"c1","uid":1270464,"ip_address":"","ucode":"237DCD176851A9","user_header":"https://static001.geekbang.org/account/avatar/00/13/62/c0/6a208bd5.jpg","comment_is_top":false,"comment_ctime":1547984763,"is_pvip":false,"replies":[{"id":"24174","content":"建议订阅我的公众号：小争哥","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550479737,"ip_address":"","comment_id":62212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547984763","product_id":100017301,"comment_content":"大神，对于我这种大专学历又是半路出家学习编程的人你有什么好的建议吗？我感觉我现在好挣扎，感觉比别人低一等，学习什么的都没动力！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437138,"discussion_content":"建议订阅我的公众号：小争哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550479737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62167,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1547966904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547966904","product_id":100017301,"comment_content":"其实不需要每段代码都分析时间和空间复杂度， 为什么要分析？肯定是凭经验和直觉无法判断代码优劣的情况.   所以一定是重要的复杂的代码，需要做分析，套用幂律分布的说法，20%的代码需要分析.  另外这个分析是很有必要的，就像单元测试一定要写一样，问题暴露的越早，成本是越低的.  凡事预则立、不预则废.","like_count":0},{"had_liked":false,"id":62007,"user_name":"snapshot","can_delete":false,"product_type":"c1","uid":1222151,"ip_address":"","ucode":"49D64E8CAB871F","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/07/8580137c.jpg","comment_is_top":false,"comment_ctime":1547878943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547878943","product_id":100017301,"comment_content":"普通的业务代码应该真的用不到，但是很多源码中还是有很多设计的，可以考虑别人为什么用这个算法。","like_count":0},{"had_liked":false,"id":61656,"user_name":"米霍克","can_delete":false,"product_type":"c1","uid":1172533,"ip_address":"","ucode":"EF075EA816B433","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/35/a28ec63b.jpg","comment_is_top":false,"comment_ctime":1547768824,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547768824","product_id":100017301,"comment_content":"感谢感谢，追本溯源又把数据结构拿起来了，","like_count":0},{"had_liked":false,"id":61605,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1547733449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547733449","product_id":100017301,"comment_content":"课后思考题：<br>视情况而定，有时候产品急着上线抢占市场，只要性能满足要求，直接就可以上线，如果再进行复杂度分析，然后进行优化是多余的，因为这些工作可以到后面再做。先上线，抢占市场。","like_count":0},{"had_liked":false,"id":61604,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1547733448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547733448","product_id":100017301,"comment_content":"课后思考题：<br>视情况而定，有时候产品急着上线抢占市场，只要性能满足要求，直接就可以上线，如果再进行复杂度分析，然后进行优化是多余的，因为这些工作可以到后面再做。先上线，抢占市场。","like_count":0},{"had_liked":false,"id":61242,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1547644975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547644975","product_id":100017301,"comment_content":"没学这个专栏之前，我写代码只是实现功能了就行了。也许跟目前我在做的项目没什么大的体量有些关系，程序不需要调优。但是通过学习此专栏逐渐意识到什么是优雅的代码。我觉得对代码做复杂度分析并不是多此一举，通过做分析可能优化代码，提高自己的水平，知道下次要这样写才好。同样做这些分析的时间是值得的。","like_count":0},{"had_liked":false,"id":61172,"user_name":"二牛จุ๊บ","can_delete":false,"product_type":"c1","uid":1241476,"ip_address":"","ucode":"CEB5CECCD0C10C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/84/e5a652d4.jpg","comment_is_top":false,"comment_ctime":1547631444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547631444","product_id":100017301,"comment_content":"之前上学的时候，死记硬背每个排序算法的复杂度应付考试。现在回过头来看了老师的文章，发现没有那么难，一看就懂了。。","like_count":0},{"had_liked":false,"id":60403,"user_name":"小小杨","can_delete":false,"product_type":"c1","uid":1105218,"ip_address":"","ucode":"7E4DC9A782FFD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/42/4a82631e.jpg","comment_is_top":false,"comment_ctime":1547468992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547468992","product_id":100017301,"comment_content":"很有必要，因为这样才能从根本上反映设计的算法性能的优劣，执行时间的变化趋势，才是算法执行时的最重要指标。","like_count":0},{"had_liked":false,"id":59474,"user_name":"萨拉热窝的棒小伙儿","can_delete":false,"product_type":"c1","uid":1338869,"ip_address":"","ucode":"D691CBAC4BC17A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIU2IArYKPQ6l7DtsNERJW9NCiaHJ0uG89JRcV4M1QAiaSDPUVr6KVPbEvA24TPn1EwpRUGI7diarLFg/132","comment_is_top":false,"comment_ctime":1547376512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547376512","product_id":100017301,"comment_content":"老师，在做性能测试的时候，经常会遇到测试环境资源不充分的问题，不能完全模拟生产环境，是不是利用老师教的这种分析方法，可以很好的解决这个问题？先提前代码分析就大概知道效率如何了","like_count":0},{"had_liked":false,"id":59127,"user_name":"Lorgine","can_delete":false,"product_type":"c1","uid":1046552,"ip_address":"","ucode":"DB64E85327A252","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/18/3e5e7db3.jpg","comment_is_top":false,"comment_ctime":1547303274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547303274","product_id":100017301,"comment_content":"终于理解了","like_count":0},{"had_liked":false,"id":58844,"user_name":"双子座的马克思","can_delete":false,"product_type":"c1","uid":1150663,"ip_address":"","ucode":"4D43FB644E9870","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/c7/6d08d502.jpg","comment_is_top":false,"comment_ctime":1547211728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547211728","product_id":100017301,"comment_content":"我觉得这是开篇最重要的文章，文章清楚的讲述了时间复杂度的概念，对时间复杂度进行了非常详细的讲解，也清楚的讲解了空间复杂度的概念，让我第一次对复杂度有了清楚和全面的认识，对复杂度概念的强调让我加深了必须要学会复杂度的必要性，这一张我看了很长时间，但我觉得很有必要，学会了核心概念，文章真的真好，大写的赞！<br>工作中目前没有对复杂度的review，但我觉得复杂度review对项目性能了解是非常有效的手段，以性能、复杂度为切入点能更好的维护产品运行，也是提高自我水平的有效手段。<br>这一张学到了很多，感谢作者的用心，学习是一个持续的过程，非常期待跟随作者从专栏学到更多的算法知识。","like_count":0},{"had_liked":false,"id":58761,"user_name":"daniel","can_delete":false,"product_type":"c1","uid":1370456,"ip_address":"","ucode":"3516AF7F9A4DEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","comment_is_top":false,"comment_ctime":1547189611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547189611","product_id":100017301,"comment_content":"多项式量级和非多项式怎么区分","like_count":0},{"had_liked":false,"id":58759,"user_name":"daniel","can_delete":false,"product_type":"c1","uid":1370456,"ip_address":"","ucode":"3516AF7F9A4DEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","comment_is_top":false,"comment_ctime":1547189573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547189573","product_id":100017301,"comment_content":"多项式量级和非多项量级怎么区别","like_count":0},{"had_liked":false,"id":58053,"user_name":"周振","can_delete":false,"product_type":"c1","uid":1134208,"ip_address":"","ucode":"4F729F9C8FA7DE","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/80/faa89499.jpg","comment_is_top":false,"comment_ctime":1546970004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546970004","product_id":100017301,"comment_content":"写得真好，拨云见日，以前看算法复杂度和听别人解释总是一知半解，这次看前面觉得很有娶，看到一半几次想中断，硬着头皮看下来，居然发现没那么难读难懂，原来是这样，单这一章就收获很大。","like_count":0},{"had_liked":false,"id":57982,"user_name":"J1yoNgSwaggEr","can_delete":false,"product_type":"c1","uid":1193533,"ip_address":"","ucode":"0CC15DA740D0E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/3d/0fdb00b1.jpg","comment_is_top":false,"comment_ctime":1546956186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546956186","product_id":100017301,"comment_content":"说实话，今天的课有点云里雾里了，感觉这么多年程序员白干了，明早再刷一遍。<br>课后题：<br>并不冲突<br>分析是避免开发写出效率低下的代码<br>测试是为服务根据实际使用情况或者是预期，<br>选择一个更好的环境（服务器配置），<br>了解服务的能力封值（系统性能）","like_count":0},{"had_liked":false,"id":57816,"user_name":"坚白石","can_delete":false,"product_type":"c1","uid":1069137,"ip_address":"","ucode":"B7C2FB3AAF5DB1","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/51/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1546917037,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546917037","product_id":100017301,"comment_content":"首先应该区分项目类型，再去谈论是不是多此一举。<br>比如很多业务系统的开发，大部分情况下，没有太多的循环遍历，对数据结构和算法知识的要求其实不高，这类系统，如果真较真去看时间和空间复杂度，基本也都是O(n)的，因为本身逻辑简单。所以这类系统真的去做这个分析，也做不出什么东西来。倒不如简单性能压测下，看看没问题就行了。<br>但是也有一些系统，计算的内容比较多，这种情况下就必须需要进行复杂度分析了。<br><br>在项目开始的时候就要问自己，这个项目的算法复杂度是多少，根据项目的复杂度，去决定要不要对其中的代码进行复杂度分析。","like_count":0},{"had_liked":false,"id":57748,"user_name":"张哲","can_delete":false,"product_type":"c1","uid":1368159,"ip_address":"","ucode":"7C326E426969ED","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/5f/7d5bf3ec.jpg","comment_is_top":false,"comment_ctime":1546882812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546882812","product_id":100017301,"comment_content":"对于性能测试, 我想如果你能确定你的程序有非常精确的输入值的范围, 并且在输入值的范围内, 你的程序的时间复杂度是在你的可控范围内, 那么时间复杂度可能必要性不大. <br><br>但是也有很多情况我们无法提前预知程序的输入值的范围.<br><br>当你的性能测试无法覆盖到所有你的输入值时, 并且在算法内部有比较复杂的运算逻辑时(比如当你无法一眼就能确定一段逻辑的运行时间会不会超出预算), 就需要进行时间复杂度和空间复杂度的分析了, 这也就是之前讲过的, 某些程序运行的状态无法通过事后统计法进行预测, 此时我们就只能靠对复杂度的分析来确保我们程序的正常运行了.","like_count":0},{"had_liked":false,"id":57385,"user_name":"子非","can_delete":false,"product_type":"c1","uid":1161190,"ip_address":"","ucode":"795787FD64B035","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/e6/83bdccda.jpg","comment_is_top":false,"comment_ctime":1546773593,"is_pvip":false,"replies":[{"id":"20709","content":"应该没错 你觉得错在哪里呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546825277,"ip_address":"","comment_id":57385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546773593","product_id":100017301,"comment_content":"换底公式那一段,不对吧，没有这样换的，好像","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435552,"discussion_content":"应该没错 你觉得错在哪里呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546825277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55700,"user_name":"南林_","can_delete":false,"product_type":"c1","uid":1347736,"ip_address":"","ucode":"0F5B80900498AC","user_header":"https://static001.geekbang.org/account/avatar/00/14/90/98/be719262.jpg","comment_is_top":false,"comment_ctime":1546264976,"is_pvip":false,"replies":[{"id":"20180","content":"这跟语言没关系吧 如果会c c++ java其中一种的话 看懂就容易了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546393951,"ip_address":"","comment_id":55700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546264976","product_id":100017301,"comment_content":"老师，这个代码实在看不懂，也不知道是什么语言写的，需要学习什么语言吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434828,"discussion_content":"这跟语言没关系吧 如果会c c++ java其中一种的话 看懂就容易了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546393951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55694,"user_name":"石涛大侠。","can_delete":false,"product_type":"c1","uid":1365284,"ip_address":"","ucode":"78AAB2C03A3592","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/24/d36d2c24.jpg","comment_is_top":false,"comment_ctime":1546263901,"is_pvip":false,"replies":[{"id":"20125","content":"往后看 有一篇书单推荐","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1546342480,"ip_address":"","comment_id":55694,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1546263901","product_id":100017301,"comment_content":"提问：<br>您文章的代码都是使用C语言写的，但是我目前C语言的水平并不高，属于转行人士，只在大学时学过C语言，请问您有推荐的学习书籍或者其他资料吗？","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434826,"discussion_content":"往后看 有一篇书单推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546342480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55691,"user_name":"石涛大侠。","can_delete":false,"product_type":"c1","uid":1365284,"ip_address":"","ucode":"78AAB2C03A3592","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/24/d36d2c24.jpg","comment_is_top":false,"comment_ctime":1546263737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546263737","product_id":100017301,"comment_content":"03 复杂度分析（上）如何分析、统计算法的执行效率和资源消耗<br>（1）\t数据结构和算法解决的是“快” 和“省”的问题。如何让代码运行得更快，如何让代码更省存储空间，即执行效率（时间、空间复杂度分析）作为重要的考量指标。<br>（2）\t事后统计法：通过统计、监控得到算法执行的时间和占用的内存大小。<br>局限性：<br>1.\t测试结果依赖测试环境<br>2.\t测试结果受数据规模的影响很大<br>因此，需要一个不用具体的测试数据来测试，就可以估计算法的执行效率的方法。<br>（3）\t大O复杂度表示法<br> <br>T(n) 代码执行时间；n: 数据规模大小；f(n): 每行代码执行的次数总和。<br>O：代码的执行时间T（n） 与f(n)表达式成正比<br><br>表示：代码执行时间随数据规模增长的变化趋势，渐进时间复杂度<br>通常，当n很大时，公式中的低阶、常量和系数三部分并不左右增长趋势，可以忽略。<br>因此，只需记录最大量级即可。<br><br>（4）\t时间复杂度分析<br>1.\t分析算法、一段代码的时间复杂度时，只关注循环执行次数最多的那一段代码，只需要记录最大阶的量级。<br>2.\t加法法则：总复杂度等于量级最大的那段代码的复杂度<br> <br>3.\t乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br> <br>复杂度度量级分类：<br>对于以下罗列的复杂度度量级，分为两类，多项式量级和非多项式量级。其中非多项式量级只有两个 O(2^n) O(n!)。非多项式时间复杂度的算法时非常低效的算法。<br><br> <br><br>（5）\t常见多项式时间复杂度分析<br>1.\tO(1)<br>常量级时间复杂度的表示方法，即代码的执行时间不随n的增大而增长。<br>算法中不会存在循环语句和递归语句，<br>2.\tO（logn）、O(n*logn)<br>不论以2、3或10为底，把所有对数阶时间复杂度都记位O(logn)<br>因为对数之间可以相互转换(换底公式)<br> <br><br>如果一段代码的复杂度时O(logn)，循环执行n遍，则是O（n*logn）<br>如归并排序、快速排序的时间复杂度<br><br>3.\tO（m+n）、O(m * n)<br>当代码复杂度由两个数据的规模确定，但无法事先评估m 和 n 哪一个量级大，因此在表示复杂度的时候，不能简单地利用加法法则，省略其中一个。以O（m+n）为准<br><br>加法法则改为：T1(m) + T2(n) = O(f(m) + g(n))<br>乘法法则继续有效： T1(m) * T2(n) = O(f(m)*f(n)) <br><br>(6) 空间复杂度分析<br>  <br>时间复杂度：渐进时间复杂度，表示算法的执行时间和数据规模之间的增长桂系<br>空间复杂度：渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系<br><br>常见的空间复杂度 O(1) O(n) O(n^2)。O（logn）、O(n*logn)的对数阶复杂度平时基本用不到<br><br>(7) 常见复杂度对比<br>-----------------<br>课后思考题<br>并非多此一举<br>渐进式时间，空间复杂度分析与性能基准测试并不冲突，而是相辅相成的，但是一个低阶的时间复杂度程序有极大的可能性会优于一个高阶的时间复杂度程序，所以在实际编程中，时刻关心理论时间，空间度模型是有助于产出效率高的程序的，同时，因为渐进式时间，空间复杂度分析只是提供一个粗略的分析模型，因此也不会浪费太多时间，重点在于在编程时，要具有这种复杂度分析的思维。","like_count":0},{"had_liked":false,"id":55356,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1546145771,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1546145771","product_id":100017301,"comment_content":"复杂度分析<br><br>why：为什么需要复杂度分析。<br><br>事后统计法。<br><br>1、测试结果非常依赖测试环境<br><br>2、测试结果受数据规模和样例影响很大<br><br>so:我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法<br><br>大O复杂度表示法:<br><br>时间复杂度<br><br>代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度<br><br>空间复杂度<br><br>空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br><br>","like_count":0},{"had_liked":false,"id":55227,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1546070196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546070196","product_id":100017301,"comment_content":"本篇主要了解了复杂度分析的方法：大 O 复杂度分析；<br><br>代码的执行时间与每行代码的执行次数成正比，所以这里就引出了渐进时间复杂度，因为数据规模越大，那么执行代码所需时间就会越多；<br><br>如果一段代码中只有一个循环，那么这段代码的复杂度就是执行次数最多的那行代码执行所用的时间；<br><br>但是如果一段代码中有多个循环（非嵌套循环），那么依然找出循环次数最多的那行代码就好，它的时间复杂度就是这段代码的时间复杂度，而不是将循环进行累加；<br><br>当然还可能存在循环嵌套的情况，那么此时就会用到乘法法则了，那么此段代码的复杂度就是嵌套内外循环的复杂度的乘积了；<br><br>多项式时间复杂度里面包含常量时间复杂度，对数阶时间复杂度等","like_count":0},{"had_liked":false,"id":55220,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1546068393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546068393","product_id":100017301,"comment_content":"肯定不是浪费时间。因为性能测试可以认为是提测后的，也就是代码写完时候的操作，但是如果在提交测试之前，就分析所写代码的时间复杂度以及空间复杂度，然后再看是否能够降低复杂度，那么再提交测试去做性能测试不是更好吗？如果本身写的代码的复杂度就很高，那么拿去做性能测试也会浪费资源，最终还要再改。所以可以认为一个是事前操作，一个是事后操作。","like_count":0},{"had_liked":false,"id":54965,"user_name":"smile","can_delete":false,"product_type":"c1","uid":1237224,"ip_address":"","ucode":"7296CD9F1FA7E9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/e8/652de8e4.jpg","comment_is_top":false,"comment_ctime":1545989485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545989485","product_id":100017301,"comment_content":"我认为不多此一举，事后统计法非常依赖测试环境，并受数据规模的影响，大O复杂度可以运行前大致分析出，执行效率随数据规模增长的变化，复杂度分为时间复杂度和空间复杂度，时间复杂度有三个方法,<br>1.只关注循环次数最多的一段代码<br>2.加法法则 总复杂度等于量级最大的那段代码的复杂度<br>3.乘法法则<br>对于非多项式量级 效率很低 因为当n增长变化很大时，执行时间也会急剧增加<br>多项式量级有常量级O(1)  只要代码执行时间不随n的变化而变化 都可以表示为O(1)<br>对数阶 应用大 <br>空间复杂度表示算法的存储空间与数据规模之间的关系  O(1)  O(n)  O(n^2)常用<br>","like_count":0},{"had_liked":false,"id":54740,"user_name":"一木成舟🌊","can_delete":false,"product_type":"c1","uid":1315344,"ip_address":"","ucode":"610EA312D3AAFE","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/10/8ef02bff.jpg","comment_is_top":false,"comment_ctime":1545958555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545958555","product_id":100017301,"comment_content":"<br>可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等<br><br><br>为何说O(long)比O(n)？我看列子，一个做乘法运算，一个做加减运算？求解","like_count":0},{"had_liked":false,"id":54680,"user_name":"Tygc","can_delete":false,"product_type":"c1","uid":1183448,"ip_address":"","ucode":"1D7924CA188069","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DClzbJLPUqYzqhZOYLys4jjYSWNibx91w20moB4y2ASOTnmJrkGVekoMfysicicz277ZHa78wm0XrTsxbsmicriaLEA/132","comment_is_top":false,"comment_ctime":1545933488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545933488","product_id":100017301,"comment_content":"老师好，想问一下文中说到空间复杂度Ologn很少用到，暂不考虑。但是比如一颗完全二叉树递归遍历空间复杂度就是Ologn. 是否这个Ologn不应该被排除在课程内容，尤其树的递归遍历也是算法题中常碰到的一类？谢谢先","like_count":0},{"had_liked":false,"id":54573,"user_name":"晴天-芳","can_delete":false,"product_type":"c1","uid":1349050,"ip_address":"","ucode":"C903B362B9E545","user_header":"https://static001.geekbang.org/account/avatar/00/14/95/ba/6e61bb40.jpg","comment_is_top":false,"comment_ctime":1545902963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545902963","product_id":100017301,"comment_content":"我们公司没有做过时间复杂度和空间复杂度的分析，但是会做代码评审。学习了算法后，我觉得我对代码的要求更高了，每写一个功能都要想想他的性能问题。","like_count":0},{"had_liked":false,"id":54519,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1336966,"ip_address":"","ucode":"A54227DD997643","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/86/47184fdf.jpg","comment_is_top":false,"comment_ctime":1545887696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545887696","product_id":100017301,"comment_content":"log3n 就等于 log32 * log2n      之前一直看不懂这块，log3n = log32 * log2n ，从新复习了指数和对数的数学知识，现在给大家推导下，其实也很简单<br><br>1. 换底公式：    logab = logca &#47; logca       <br><br>   log3n =  log2n &#47; log23   = log32 * log2n ","like_count":0},{"had_liked":false,"id":53832,"user_name":"逍遥一叹","can_delete":false,"product_type":"c1","uid":1358759,"ip_address":"","ucode":"9FCAEB2E57DB70","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/a7/03f90dc4.jpg","comment_is_top":false,"comment_ctime":1545738559,"is_pvip":false,"replies":[{"id":"19660","content":"后面一个for循环不对吧 应该是j=i吧。那就是o（n^2）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545826507,"ip_address":"","comment_id":53832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545738559","product_id":100017301,"comment_content":"下面代码的复杂度如何分析？<br> int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1;<br>     for (i=j; j &lt;= n; ++j) {<br>       sum = sum +  i * j;<br>     }<br>   }<br> }<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434257,"discussion_content":"后面一个for循环不对吧 应该是j=i吧。那就是o（n^2）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545826507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52808,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1545534239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545534239","product_id":100017301,"comment_content":"老师，你好，我想问一下，你写for循环的时候是这样的：<br>int i = 1<br>for( ; i &lt; length; ++i)<br>为什么不这样写：<br>for(int i = 1 ; i &lt; length; i++)<br>把i的定义写在for的外面有什么好处么? 还是只是习惯问题，还有为什么要++i而不是i++ ?<br>还有，我的留言好像没有被回复过，被回复的留言极客时间会提醒么😂😂😂","like_count":0},{"had_liked":false,"id":52698,"user_name":"米乐乐果","can_delete":false,"product_type":"c1","uid":1005191,"ip_address":"","ucode":"4EB9AED3A50AE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/87/97541441.jpg","comment_is_top":false,"comment_ctime":1545479145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545479145","product_id":100017301,"comment_content":"「log3n 就等于 log32 * log2n」看到这儿的时候又查了下对数换底公式和对数倒数，顺便把高中数学捡起了，哈哈","like_count":0},{"had_liked":false,"id":52602,"user_name":"寻觅","can_delete":false,"product_type":"c1","uid":1046308,"ip_address":"","ucode":"A1D2A3D26133AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/24/65947606.jpg","comment_is_top":false,"comment_ctime":1545450752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545450752","product_id":100017301,"comment_content":"问题回答补充：<br>1、设计开发时，进行复杂度分析，这是理论上保证时间和空间的效率<br>2、性能测试是从实践中验证和校验，因为在不同的数量级下和情景下，低阶的不一定总是比高阶更高效","like_count":0},{"had_liked":false,"id":52601,"user_name":"寻觅","can_delete":false,"product_type":"c1","uid":1046308,"ip_address":"","ucode":"A1D2A3D26133AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/24/65947606.jpg","comment_is_top":false,"comment_ctime":1545450429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545450429","product_id":100017301,"comment_content":"课后总结：<br>1、复杂度表示随着数据规模增加，时间和空间的变化趋势，近视的估算，而不是准确的<br>2、复杂度的表示方法，大O表示法<br>3、时间复杂度估算方法：只考虑循环次数最多的那行；加法法则、乘法法则<br>4、空间复杂度估算方法：一般比较简单，根据数据规模来估算<br>问题回答：<br>1、还是需要，因为性能测试一般纬度更高，一个接口的性能往往多方面原因，里面的算法只是一个方面<br>2、而且一般是在方案设计的时候就需要考虑需要的空间复杂度和时间复杂度，而性能测试更多是一种验证和保证","like_count":0},{"had_liked":false,"id":52584,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1545445258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545445258","product_id":100017301,"comment_content":"多么切合实际的思考题，时间紧迫，能用就好，改善后说，硬生生被你们套死在课本里了，，，，，，","like_count":0},{"had_liked":false,"id":52583,"user_name":"不专注的linuxer","can_delete":false,"product_type":"c1","uid":1050191,"ip_address":"","ucode":"28ED11C1E2942C","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","comment_is_top":false,"comment_ctime":1545445161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545445161","product_id":100017301,"comment_content":"感觉思考题提现的是有总比没有好，，，，，，先测试，满足性能要求了，好，接下来看看能不能改进，分析一下时间复杂度这些烂遭的东西，什么，，，什么，，分析过后发现算法效率很低，还有很大的改善空间，接下来改善代码分析，，what   the  f**k，改善和提高代码有难度，至少一个月，，，垃圾吧倒吧，还分析改善啥呀，先上线，反正用户感觉不出来，改善什么的，后面再说吧，，，","like_count":0},{"had_liked":false,"id":52252,"user_name":"她の他","can_delete":false,"product_type":"c1","uid":1312694,"ip_address":"","ucode":"A61CEC365D782F","user_header":"https://static001.geekbang.org/account/avatar/00/14/07/b6/e213fc11.jpg","comment_is_top":false,"comment_ctime":1545354781,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545354781","product_id":100017301,"comment_content":"其实这两个问题的核心还是想说，代码写完需不需要分析时间复杂度和空间复杂度，我的答案是有必要的。第一，代码写完分析时间和空间复杂度可以让你更了解你的代码结构是否合理。第二，当你分析完你的代码的复杂度之后你就会大概了解他们性能，如果明显复杂度很高，那肯定性能比较差，可以随时优化代码的结构，也不需要等到性能测试不通过后再修改，这样极大的提高了工作效率。第三，只有分析这些复杂度，才能让自己养成写出优质代码的习惯。","like_count":0},{"had_liked":false,"id":52009,"user_name":"拉马库斯阿尔德里奇","can_delete":false,"product_type":"c1","uid":1175519,"ip_address":"","ucode":"40BAA2A64485F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/df/c9240302.jpg","comment_is_top":false,"comment_ctime":1545293186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545293186","product_id":100017301,"comment_content":"来的晚了点儿，没看懂对数转换的可以看我的学习笔记，互相交流：<br>https:&#47;&#47;www.jianshu.com&#47;p&#47;49c067b4de5e<br>正好访问量能给我增长动力~<br>还有老师，循环判断会比循环体多执行一次吧~","like_count":0},{"had_liked":false,"id":52004,"user_name":"sherry","can_delete":false,"product_type":"c1","uid":1120604,"ip_address":"","ucode":"B065118C5A7820","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/5c/04912a35.jpg","comment_is_top":false,"comment_ctime":1545292347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545292347","product_id":100017301,"comment_content":"我认为时间复杂度分析和性能测试都是不可缺少的。<br>对于时间复杂度和空间复杂度的理解，有助于在代码编写的阶段就减少程序执行的复杂度。从源头避免部分程序性能的问题。虽然和实际运行相比还是比较理想化，结果也不一定就是最好的，但至少可以省去一些功夫。<br>性能测试我个人认为其的主要目的是面向实际的应用。所需要考虑到的因素，场景将不止是代码的本身，网络，用户体验，产品需求，后期运维等等都会或多或少影响着性能测试的各个方面，两者所覆盖的领域不同，缺一不可。","like_count":0},{"had_liked":false,"id":51932,"user_name":"sherry","can_delete":false,"product_type":"c1","uid":1120604,"ip_address":"","ucode":"B065118C5A7820","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/5c/04912a35.jpg","comment_is_top":false,"comment_ctime":1545278032,"is_pvip":false,"replies":[{"id":"18989","content":"for循环也算一句","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545357970,"ip_address":"","comment_id":51932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545278032","product_id":100017301,"comment_content":"for( ; i&lt;= n ; ++i) {<br>    sum = sum + i ;<br>}<br>为什么这段代码的时间复杂度是2n*unit_time而不是n*unit_time呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433674,"discussion_content":"for循环也算一句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545357970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51756,"user_name":"新","can_delete":false,"product_type":"c1","uid":1087172,"ip_address":"","ucode":"FEB1BFBEACC23B","user_header":"https://static001.geekbang.org/account/avatar/00/10/96/c4/43e6f7f3.jpg","comment_is_top":false,"comment_ctime":1545231947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545231947","product_id":100017301,"comment_content":"会这个分析的话可以在怎么写代码时注意这些东西，避免多余的for循环 ，层级嵌套。创建多余的数组 集合，map等，也可以作为代码优化的一段参考，知道主要优化的点是哪些，其余是哪些，分清主次吧","like_count":0},{"had_liked":false,"id":51681,"user_name":"monster","can_delete":false,"product_type":"c1","uid":1065979,"ip_address":"","ucode":"710DAA865E4324","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/fb/d26d3fa1.jpg","comment_is_top":false,"comment_ctime":1545222521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545222521","product_id":100017301,"comment_content":"复杂度的分析作为数据结构的重点，必须要掌握。要有意识的思考复杂度，这样写的代码才会越来越优质。","like_count":0},{"had_liked":false,"id":51359,"user_name":"瘦马","can_delete":false,"product_type":"c1","uid":1344216,"ip_address":"","ucode":"D1D6E62DD23652","user_header":"https://static001.geekbang.org/account/avatar/00/14/82/d8/1df27da4.jpg","comment_is_top":false,"comment_ctime":1545178312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545178312","product_id":100017301,"comment_content":"第一次学习复杂度分析，明白了复杂度并不是代码行越多就越复杂。<br>复杂度是指随着数据规模的增长，代码执行时间和内存占用空间的增长情况","like_count":0},{"had_liked":false,"id":50788,"user_name":"achenbj","can_delete":false,"product_type":"c1","uid":1178990,"ip_address":"","ucode":"E5A4F7EB173C2F","user_header":"","comment_is_top":false,"comment_ctime":1545046224,"is_pvip":false,"replies":[{"id":"18329","content":"看看我后面的周末福利","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097607,"ip_address":"","comment_id":50788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545046224","product_id":100017301,"comment_content":"看不懂，我是不是不适合做程序","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433102,"discussion_content":"看看我后面的周末福利","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50586,"user_name":"AllenLife","can_delete":false,"product_type":"c1","uid":1189570,"ip_address":"","ucode":"00968476B34568","user_header":"https://static001.geekbang.org/account/avatar/00/12/26/c2/96d1a0c7.jpg","comment_is_top":false,"comment_ctime":1545012907,"is_pvip":false,"replies":[{"id":"18571","content":"cal调用了f的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185965,"ip_address":"","comment_id":50586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545012907","product_id":100017301,"comment_content":"看到嵌套代码的复杂度（乘法法则）时候，我有个疑问想请教一下前辈。我把这段代码复制了过来：<br>int cal(int n) { int ret = 0...<br>极客时间版权所有: https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;40036<br><br>在这段内容中，你给出了一段代码，但是这段代码的两个函数不是嵌套的，它们是不同的两个函数，一个是cal(),另一个是f()。按我的理解他们的复杂度都是O(n),为什么是O(n*n)。如果它们是嵌套在一块的，复杂度是O(n*n)还好理解。<br><br>我查了一下，网上都是摘抄的你的文章，千篇一律。所以在这里向你请教一下，是不是我对复杂度计算的理解有偏差。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433031,"discussion_content":"cal调用了f的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50508,"user_name":"Monster","can_delete":false,"product_type":"c1","uid":1257029,"ip_address":"","ucode":"31F7F86DD50A1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/45/d4039dd3.jpg","comment_is_top":false,"comment_ctime":1545004200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545004200","product_id":100017301,"comment_content":"一、算法考量指标：执行效率<br>二、如何衡量算法的执行效率：<br>时间复杂度：算法的执行时间与数据规模之间的增长关系<br>空间复杂度：算法的存储空间与数据规模之间的增长关系<br>三、时间复杂度的分析方法：<br>1、只关心循环执行次数最多的代码；<br>2、加法法则：总的时间复杂度就=量级最大的那段代码的时间复杂度<br>3、乘法法则：嵌套代码复杂度=嵌套内外复杂度的乘积 T(n)=O(f(n)*g(n));<br>四、常见的复杂度<br>从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2)","like_count":0},{"had_liked":false,"id":50268,"user_name":"此间的少年","can_delete":false,"product_type":"c1","uid":1150546,"ip_address":"","ucode":"3D6F5371FD271F","user_header":"https://static001.geekbang.org/account/avatar/00/11/8e/52/7d211488.jpg","comment_is_top":false,"comment_ctime":1544938420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544938420","product_id":100017301,"comment_content":"性能分析和时间，空间复杂度分析应该是相辅相成的。空间，时间复杂度分析，为我们提供了理论依据。比如O(1)的复杂度比O(n)的复杂度低。但是实际代码运行的时候，在不同硬件，不同网络环境等各种条件下，得到的结果可能不尽相同。性能分析得到的是我们运行这段代码真实花费了多长时间，消耗了多少内存。有了理论依据，可以更进一步优化性能。文中也提到，时间空间复杂度分析在于熟练，熟练后针对简单代码，我们可以很快分析出其时间和空间复杂度，复杂代码拆分开看，也是有简单代码组成的，也可以推导出时间和空间复杂度。<br>p.s 与这个文章无关，可否提供一个功能，针对文章内容，提供一些专业符号，因为手机上输入logn底数对数或者其他专业符号很不方便。要是AI相关，提问或者留言可能会用到更多<br>谢谢","like_count":0},{"had_liked":false,"id":50175,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1544885455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544885455","product_id":100017301,"comment_content":"请问“渐进时间复杂度“中渐进是随着数据规模的增长时间复杂度算出来的值和实际的值逐渐接近么?","like_count":0},{"had_liked":false,"id":50172,"user_name":"肖玉哲","can_delete":false,"product_type":"c1","uid":1350969,"ip_address":"","ucode":"E211AFA01EC2C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/39/20525541.jpg","comment_is_top":false,"comment_ctime":1544884801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544884801","product_id":100017301,"comment_content":"并不浪费，因为目的倒是并不真正的只是在做测试工作，而是自我养成的良好的编码习惯，在每次的开发任务中预估时间复杂度后，更好的进行改动与优化，潜移默化的改变着自己，提高自己。","like_count":0},{"had_liked":false,"id":50039,"user_name":"鱼子酱","can_delete":false,"product_type":"c1","uid":1074872,"ip_address":"","ucode":"9D9B33A7B78142","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJic27dia65Z8OdictLLDOWic2fjFtiaQNQ1ou4icQ7AOjic4gK2iaOlYAUkNX7OoFnLs1hr1u5ib4Khcjib4DA/132","comment_is_top":false,"comment_ctime":1544847474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544847474","product_id":100017301,"comment_content":"1. 什么是时间和空间复杂度？<br>时间复杂度是指算法的执行时间与数据规模之间的增长关系；<br>空间复杂度是算法的数据存储与数据规模之间的增长关系。<br><br>2.时间复杂度分析方法：<br>本质上就是计算循环次数。<br>方法一：加法法则，总复杂度等于执行循环次数最多的那段代码的时间复杂度。<br>方法二：乘法运算，一般用于循环嵌套的情况，总复杂度等于嵌套内外循环复杂度的乘积。<br><br>3.按照执行时间递增排序，列出常见的几种复杂度：<br>第一种：O(1)，代表函数执行时间与数据规模的递增没有关系，表示一个常量。<br>第二种：O(logn)<br>第三种：O(n)<br>第四种：O(nlogn)<br>第五种：O(2的n次方）","like_count":0},{"had_liked":false,"id":49791,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1544769805,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544769805","product_id":100017301,"comment_content":"f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以...<br><br>我觉的这个地方应该改成是一个函数的关系，是执行次数f(n) 关于执行规模n的函数。。。不知道我理解的对不对，我觉得这样比较清晰一点。","like_count":0},{"had_liked":false,"id":49646,"user_name":"慧鑫coming","can_delete":false,"product_type":"c1","uid":1324385,"ip_address":"","ucode":"7BAC9CA255630E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLE4LYb3jrH63ZV98Zpc8DompwDgb1O3nffMoZCmiaibauRyEFv6NDNsST9RWxZExvMLMWb50zaanoQ/132","comment_is_top":false,"comment_ctime":1544749627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544749627","product_id":100017301,"comment_content":"王争老师，最后一个空间复杂度的案例中存在两个时间复杂度，上面的是O(logn),下面的是O(n)，根据本节课说的时间复杂度分析规则一，我是不是只取O(n)，就可以了，也就是认为这段代码的时间复杂度是O(n)","like_count":0},{"had_liked":false,"id":49416,"user_name":"NearJC","can_delete":false,"product_type":"c1","uid":1056556,"ip_address":"","ucode":"0E0CB5CEDCE77D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1f/2c/3719b616.jpg","comment_is_top":false,"comment_ctime":1544684191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544684191","product_id":100017301,"comment_content":"老师讲的太好了，给了我很大的帮助。这是第二次复习这篇文章了，每次都有更深入的理解。","like_count":0},{"had_liked":false,"id":49326,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1325974,"ip_address":"","ucode":"7C9F98DF3DFCA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/96/60fcf28d.jpg","comment_is_top":false,"comment_ctime":1544666137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544666137","product_id":100017301,"comment_content":"表示工作三年了，第一次对理解大O复杂度描述。老师讲的很透彻！","like_count":0},{"had_liked":false,"id":49291,"user_name":"heiman","can_delete":false,"product_type":"c1","uid":1314947,"ip_address":"","ucode":"C1184B13706001","user_header":"https://static001.geekbang.org/account/avatar/00/14/10/83/b3145b4d.jpg","comment_is_top":false,"comment_ctime":1544661523,"is_pvip":false,"replies":[{"id":"17725","content":"是的 只有这里的“多个”是确定的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544665842,"ip_address":"","comment_id":49291,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544661523","product_id":100017301,"comment_content":"考虑空间复杂度的时候，如果连续申请两个或多个大小为n的存储空间，那也表示为O(n)么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432561,"discussion_content":"是的 只有这里的“多个”是确定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544665842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49040,"user_name":"krauser","can_delete":false,"product_type":"c1","uid":1219733,"ip_address":"","ucode":"13E5CB0ECF1613","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/95/edbb01ae.jpg","comment_is_top":false,"comment_ctime":1544593584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544593584","product_id":100017301,"comment_content":"复杂度也叫做渐进复杂度<br>分为空间复杂度、时间复杂度<br><br>一个是数据规模随算法执行时间增长的关系<br>一个是算法执行时间随数据规模增长的关系<br><br>复杂度分析的必要性：与运行环境无关<br><br>复杂度的分析：<br>取最能表示关系的表达式，忽略常量","like_count":0},{"had_liked":false,"id":48603,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1544494500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544494500","product_id":100017301,"comment_content":"大神，我想问下，如果分析的两个算法都是对数阶的情况下，怎么办，是不是要具体的看底数","like_count":0},{"had_liked":false,"id":48369,"user_name":"isobelar","can_delete":false,"product_type":"c1","uid":1318394,"ip_address":"","ucode":"58CE4061984B43","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/fa/b81c89c3.jpg","comment_is_top":false,"comment_ctime":1544429526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544429526","product_id":100017301,"comment_content":"针对 3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>中例举的cal()函数时间复杂度推导的例子：“f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n2)。”我按照老师前面的方法就算之后有不同意见：<br>   int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } <br><br> int f(int n) {<br>  int sum = 0;<br>  int i = 1;<br>  for (; i &lt; n; ++i) {<br>    sum = sum + i;<br>  } <br>  return sum;<br> }<br><br>时间复杂度推导如下，如果不对麻烦老师指正：<br>T1(n) -&gt; cal(n) = O(cal(n)) = 2 + 2*(n-1) = 2*n<br>T2(n) -&gt;f(n) = O(f(n)) = 2*1 + 2*2 + ... + 2*(n-1) = 2 * 1&#47;2 * (1+n-1) * (n-1) = n^2 -n<br>T(n) = T1(n) + T2(n) = O(2*n + n^2 - n) = O(n^2)<br>","like_count":0},{"had_liked":false,"id":47796,"user_name":"wsw","can_delete":false,"product_type":"c1","uid":1117874,"ip_address":"","ucode":"68885262052BCD","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/b2/7cf7e91c.jpg","comment_is_top":false,"comment_ctime":1544198941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544198941","product_id":100017301,"comment_content":"不同于要依赖测试环境来获得算法的执行效率及消耗资源的情况，复杂度分析的优势在于不用依赖，它可以随时估算，而消耗的可能仅仅一点笔水和纸，要是心算很厉害的话，甚至都不用动手了<br><br>而每段代码进行复杂度分析，也不同消耗多少时间来做这件事，就当算个数。可以换来我们对代码的执行效率的认识，进而实时优化，并且长此以往下去，我们自己的代码水平会随之增高，这种产出比很划算","like_count":0},{"had_liked":false,"id":47623,"user_name":"寻找大卫","can_delete":false,"product_type":"c1","uid":1336941,"ip_address":"","ucode":"9F80960AA9E51C","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/6d/71d98c9f.jpg","comment_is_top":false,"comment_ctime":1544166407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544166407","product_id":100017301,"comment_content":"学习了写一篇我似乎体会到对数函数的用处。","like_count":0},{"had_liked":false,"id":47616,"user_name":"寻找大卫","can_delete":false,"product_type":"c1","uid":1336941,"ip_address":"","ucode":"9F80960AA9E51C","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/6d/71d98c9f.jpg","comment_is_top":false,"comment_ctime":1544165700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544165700","product_id":100017301,"comment_content":"看到logn复杂度的讲解时我哭了，总算是懂了","like_count":0},{"had_liked":false,"id":47305,"user_name":"eason","can_delete":false,"product_type":"c1","uid":1340823,"ip_address":"","ucode":"0B4D5627AAE4CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlSe5wRWM6EnVpVOkmJ9HoBpBaqgQK7ZYlAsVl40CVs0picrma5Aq90ffiaAUBHra1Idag4KyBSCXA/132","comment_is_top":false,"comment_ctime":1544103909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544103909","product_id":100017301,"comment_content":"时间复杂度和空间复杂度分析，和性能测试并不冲突，相反还是相辅相成。<br><br>我们在编码时，会进行时间复杂度和空间复杂度分析时，使我们带着一种高效思维在编码。这两者的分析，只是一个大致思路，具体成品还是需要做性能测试的。而且性能测试还需要在多台设备上做，和硬件也有关系。<br><br>所以时间复杂度和空间复杂度分析，不但不冲突，还相辅相成，他们二者有机统一。","like_count":0},{"had_liked":false,"id":47212,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544078023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544078023","product_id":100017301,"comment_content":"03 | 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？------算法性能评价标准（终极目标------多快好省+优雅）<br><br>前提是假设每一条代码执行的时间一样<br>代码执行时间随数据规模增长的变化趋势------ 渐进时间复杂度<br><br>关注执行次数最多的那段代码<br>加法法则+乘法法则<br><br>O(n) O(n2) O(n*logn) O(log n)<br><br>思考题：<br>一般不进行性能分析，除非是阶段性功能完成了，有时间，需要代码重构，或者出现了问题才会去性能分析；总之为了达到什么样的一个性能目标；一定是要一个驱动力去完成这个动作，不然应该不会考虑进行什么时间空间复杂度分析","like_count":0},{"had_liked":false,"id":47075,"user_name":"Shannon","can_delete":false,"product_type":"c1","uid":1340631,"ip_address":"","ucode":"25669ACA689A40","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLXvcR5z8WLKkISW9pDkxPHsYUibSqaWiaz5Ff0yxeyMPvE7AGf3XC0SP1JHhzpH391x3sbCo77qPHw/132","comment_is_top":false,"comment_ctime":1544033137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544033137","product_id":100017301,"comment_content":"讲的真好，提纲挈领，很清楚。<br>要是能把一些关键概念的英文在文档里体现出来就更好了。对把大部分听众来说，肯定是基于中文学起来更快，但以后总归要用上英文概念的，一开始就了解熟悉更好，也方面英文面试。<br>谢谢！","like_count":0},{"had_liked":false,"id":46972,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1544012732,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544012732","product_id":100017301,"comment_content":"算法复杂度分析是为了了解代码在环境，数据量等因素之外的执行效率。一般用大O表示法。<br>时间复杂度主要符合最大运行次数，加法规则，乘法规则。","like_count":0},{"had_liked":false,"id":46316,"user_name":"Bryan","can_delete":false,"product_type":"c1","uid":1037208,"ip_address":"","ucode":"BA9D6A278609F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/98/60d13550.jpg","comment_is_top":false,"comment_ctime":1543899194,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543899194","product_id":100017301,"comment_content":"第一个示例中 for 循环是不是实际执行了三条语句呢？判断、块和自增？所以最终似乎应该是 3n+2 吧（如果for的初始化没给就不算一条语句的话）","like_count":0},{"had_liked":false,"id":46013,"user_name":"、、cryAllen","can_delete":false,"product_type":"c1","uid":1017204,"ip_address":"","ucode":"50032F6E2DDB4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/74/e70862a2.jpg","comment_is_top":false,"comment_ctime":1543833035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543833035","product_id":100017301,"comment_content":"我觉得有必要分析一下，相当于每次写个方法或者一段代码之后，可以check一下，分析时间或空间复杂度，可以明显的把一些比较耗时的代码指出来，避免一开始就出现有很大问题的代码。","like_count":0},{"had_liked":false,"id":45934,"user_name":"chilion","can_delete":false,"product_type":"c1","uid":1325600,"ip_address":"","ucode":"6E24757952BD5B","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/20/eefeb0e3.jpg","comment_is_top":false,"comment_ctime":1543821873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543821873","product_id":100017301,"comment_content":"刚开始看，大致看会了一点，也仅限于微观上。宏观上着手估计还是会不知所措","like_count":0},{"had_liked":false,"id":45903,"user_name":"桃子妈妈","can_delete":false,"product_type":"c1","uid":1141504,"ip_address":"","ucode":"16E7D2FBAE452F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yy4cUibeUfPHPkXXZQnQwjXY7m5rXY5ib6a7pC1vkupj1icibF305N4pJSdqw0fO1ibvyfKCQ7HWggLhwiaNbbRPBsKg/132","comment_is_top":false,"comment_ctime":1543815930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543815930","product_id":100017301,"comment_content":"复杂度这个概念，感觉生活中也是可以用到的。收纳，怎么收纳既节约空间，又能快速找到地方，方便使用。所以复杂度其实是一种通用的思维方式，帮助到我们很多生活方方面面。","like_count":0},{"had_liked":false,"id":45426,"user_name":"敬艺","can_delete":false,"product_type":"c1","uid":1109680,"ip_address":"","ucode":"08B559B123A1BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/b0/fb5bad5c.jpg","comment_is_top":false,"comment_ctime":1543638402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543638402","product_id":100017301,"comment_content":"一边跟进度，一边回头复习，唯一目的就是要拿下数据结构和算法这个硬骨头。<br>压测和复杂度分析只会互相印证，不会矛盾。压测的数据是有限的，而复杂度分析则是一个趋势分析（类似数学的极限），想象极大规模的数据情况下，程序是否还能跑得起来？有助程序员提前思考并做好处理数据的技术选型（包括算法）。","like_count":0},{"had_liked":false,"id":45027,"user_name":"better man","can_delete":false,"product_type":"c1","uid":1314538,"ip_address":"","ucode":"89E50F6762822F","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/ea/16291abc.jpg","comment_is_top":false,"comment_ctime":1543540606,"is_pvip":false,"replies":[{"id":"16021","content":"加法法则 ➕的意思是说两段代码合起来的时间复杂度 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542208,"ip_address":"","comment_id":45027,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543540606","product_id":100017301,"comment_content":"刚买的老师这门课，不是计算机专业出生，自学进入前端开发行业。好多朋友都说想走得远，数据结构和算法是基础，会坚持学完这门课的。<br>文中加法法则T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))这个是不是应该改成T(n)=max(T1(n),T2(n))=......<br><br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430899,"discussion_content":"加法法则 ➕的意思是说两段代码合起来的时间复杂度 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44804,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1543495266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543495266","product_id":100017301,"comment_content":"时间复杂度分析?它的对象是谁，是代码的执行次数。时间复杂度越高，它的次数越多。","like_count":0},{"had_liked":false,"id":44682,"user_name":"取悦","can_delete":false,"product_type":"c1","uid":1327864,"ip_address":"","ucode":"53BA6AB79C3CED","user_header":"https://static001.geekbang.org/account/avatar/00/14/42/f8/9a22b3aa.jpg","comment_is_top":false,"comment_ctime":1543475821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543475821","product_id":100017301,"comment_content":"1.时间复杂度，按照大小分别为 O(logn) O(n) O(nlogn) O(n^2)。<br>2.空间复杂度 O(1)、O(n)、O(n<br>^2)","like_count":0},{"had_liked":false,"id":44287,"user_name":"天二","can_delete":false,"product_type":"c1","uid":1100092,"ip_address":"","ucode":"F03EF223F2A4AE","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/3c/7d9b3baa.jpg","comment_is_top":false,"comment_ctime":1543400569,"is_pvip":false,"replies":[{"id":"15766","content":"后面会讲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543403394,"ip_address":"","comment_id":44287,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543400569","product_id":100017301,"comment_content":"老师 我一直有一个疑问 递归的代码 如何计算时间复杂度和空间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430712,"discussion_content":"后面会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543403394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44168,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1543377233,"is_pvip":false,"replies":[{"id":"15775","content":"自己搜下 换底公式吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543403874,"ip_address":"","comment_id":44168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543377233","product_id":100017301,"comment_content":"文中写到的：<br>log3n = log3 2 * log2 n <br>是怎么转换的 能不能写下过程。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430661,"discussion_content":"自己搜下 换底公式吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543403874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44060,"user_name":"黄宇婷","can_delete":false,"product_type":"c1","uid":1160249,"ip_address":"","ucode":"8A89AC1A43FB57","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/39/d9429b27.jpg","comment_is_top":false,"comment_ctime":1543366886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543366886","product_id":100017301,"comment_content":"性能测试与环境以及数据量息息相关，并不能用于准确的用于性能评估，时间复杂度，空间复杂度的分析可以在代码层面找到性能评估的标准，也是能够发现性能优化的一种方式。看到优秀答案对测试的理解更加深刻了，性能测试就是一种对算法和数据结构的实际验证","like_count":0},{"had_liked":false,"id":43926,"user_name":"ageeklet","can_delete":false,"product_type":"c1","uid":1237638,"ip_address":"","ucode":"3A717CF59AE04A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/86/53ae8868.jpg","comment_is_top":false,"comment_ctime":1543326840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543326840","product_id":100017301,"comment_content":"作者在总结O(1)的这句话：一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是O(1)。  <br><br>应该是不存在有带n的循环语句、递归语句，才算是时间复杂度为O(1)吧。<br><br>循环语句、递归语句也有常量级的啊 。。。。","like_count":0},{"had_liked":false,"id":43921,"user_name":"Thinker","can_delete":false,"product_type":"c1","uid":1250414,"ip_address":"","ucode":"11C7F293F09E81","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/6e/feadbf74.jpg","comment_is_top":false,"comment_ctime":1543325315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543325315","product_id":100017301,"comment_content":"感觉这种分析应该是在性能测试之前。在初期建设框架时，对具体一些算法模块的选择时候可以以时间和空间复杂度为基准。","like_count":0},{"had_liked":false,"id":43824,"user_name":"王一平","can_delete":false,"product_type":"c1","uid":1266166,"ip_address":"","ucode":"4F35C5AD5783DC","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/f6/55d60f2c.jpg","comment_is_top":false,"comment_ctime":1543304422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543304422","product_id":100017301,"comment_content":"当分析成为习惯以后，你在写每一段逻辑时会不自觉的考虑时间复杂度、空间复杂度的问题，久而久之她就会像呼吸一样自然。","like_count":0},{"had_liked":false,"id":43821,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1543304320,"is_pvip":false,"replies":[{"id":"15784","content":"f（n）是表达式 f（n）=n","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543404587,"ip_address":"","comment_id":43821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543304320","product_id":100017301,"comment_content":"T1(n)=O(f(n))<br>T1(n) = O(n)<br>这俩是如何转换的。函数f是怎么省略的呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430511,"discussion_content":"f（n）是表达式 f（n）=n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543404587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43742,"user_name":"钻天鹞子","can_delete":false,"product_type":"c1","uid":1081568,"ip_address":"","ucode":"55286FF8CD295B","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/e0/0f18a1a7.jpg","comment_is_top":false,"comment_ctime":1543286294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543286294","product_id":100017301,"comment_content":"n既代表每行代码的执行次数,又表示数据规模的大小.<br>不是很理解这两个有什么区别","like_count":0},{"had_liked":false,"id":43709,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1543282741,"is_pvip":false,"replies":[{"id":"15583","content":"g(n)表示n的一个表达式","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543284323,"ip_address":"","comment_id":43709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543282741","product_id":100017301,"comment_content":"文中的 T2(n)=O(g(n))<br>g是什么东西","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430468,"discussion_content":"g(n)表示n的一个表达式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543284323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43378,"user_name":"毛瑞文","can_delete":false,"product_type":"c1","uid":1073645,"ip_address":"","ucode":"0202323421F6C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/ed/d59e5ea1.jpg","comment_is_top":false,"comment_ctime":1543221045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543221045","product_id":100017301,"comment_content":"复杂度分析是一个理论模型，粗略估计。帮助我们写出优秀的代码。企业应用性能测试并不能因为你复杂度最低就能达到性能要求。涉及到需求变更，业务拆分等等达到最优的响应时间。","like_count":0},{"had_liked":false,"id":43360,"user_name":"charles","can_delete":false,"product_type":"c1","uid":1326337,"ip_address":"","ucode":"152B82D8B8891D","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/01/e9374237.jpg","comment_is_top":false,"comment_ctime":1543219181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543219181","product_id":100017301,"comment_content":"绝对不是多此一举，也绝对不是浪费时间。<br>今年7月份，在学校做了一个简单的课题，当时刚刚大一还没有学数据结构，不知道分析时间复杂度的重要性，当时我们第一次写出来的程序运行一次要15分钟，然后我们就改一改，没有计划性，没有每段代码都分析时间复杂度，就是觉得哪里改了会变快就改哪，改好以后就用电脑跑一遍，用电脑测算时间，当时基本上时间全浪费在跑程序上了，最后课题最后一步没有按时完成，要是现在我绝对会分析好再跑程序。<br>","like_count":0},{"had_liked":false,"id":43291,"user_name":"pandas","can_delete":false,"product_type":"c1","uid":1188824,"ip_address":"","ucode":"5E9177270CDBC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/d8/d2a48664.jpg","comment_is_top":false,"comment_ctime":1543207678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543207678","product_id":100017301,"comment_content":"看完老师再看看评论区写的还有老师的解答，很多不太明白的地方就明白了。","like_count":0},{"had_liked":false,"id":43263,"user_name":"roc","can_delete":false,"product_type":"c1","uid":1324850,"ip_address":"","ucode":"F9F4DE66465E1F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvhcoaVtdGaQnJHUfaRohp7Nj1wV5tnZpNnNPP9GFOXcvfZe9Z6aIaEos2XFLoDGfpD5dF3qiaDJw/132","comment_is_top":false,"comment_ctime":1543201700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543201700","product_id":100017301,"comment_content":"加油，自己一定要坚持！！","like_count":0},{"had_liked":false,"id":43242,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1122284,"ip_address":"","ucode":"92BD46245FB5B6","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/ec/d611ce6c.jpg","comment_is_top":false,"comment_ctime":1543198866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543198866","product_id":100017301,"comment_content":"之前每次看算法相关的书籍，开头基本都是时间复杂度和空间复杂度，直到看到老师的这篇文章，算是真的掌握了这个点，谢谢老师!","like_count":0},{"had_liked":false,"id":43048,"user_name":"AdmaBoy","can_delete":false,"product_type":"c1","uid":1192626,"ip_address":"","ucode":"7B5A1901FB082E","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/b2/e22bb496.jpg","comment_is_top":false,"comment_ctime":1543149587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543149587","product_id":100017301,"comment_content":"我不认为会多此一举，因为即便做了性能分析，一旦达不到要求，就必须要根据时间空间复杂度分析，去优化自己的算法。而且去做时间空间复杂度分析又是自己对代码进一次做code review 加深了自己对代码的理解，对算法的理解，并适当做出部分优化。","like_count":0},{"had_liked":false,"id":42968,"user_name":"茴香根","can_delete":false,"product_type":"c1","uid":1316111,"ip_address":"","ucode":"B91C00B72077F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/15/0f/954be2db.jpg","comment_is_top":false,"comment_ctime":1543120739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543120739","product_id":100017301,"comment_content":"第一天学习打卡，立flag，发现的太晚！","like_count":0},{"had_liked":false,"id":42916,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543108345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543108345","product_id":100017301,"comment_content":"把该讲内容总结为几个问题, 大家复习的时候可以先尝试回答这些问题检查自己的掌握程度:<br><br>\t1. <br>写代码前做复杂度分析的意义是什么, 事后统计法的局限在哪里?<br>\t2. <br>大O复杂度表示法的依赖的规律是什么, 大O复杂度的概念是什么?<br>\t3. <br>时间复杂度分析的三个实用方法各是什么?<br>\t4. <br>有哪几种常见的多项式复杂度量级, 有哪些非多项式的复杂度量级?<br>\t5. <br>分别举出O(1), O(logn), O(logm*n)三种复杂度的例子.<br>\t6. <br>空间复杂度的概念是什么?<br><br>","like_count":0},{"had_liked":false,"id":42913,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1543107709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543107709","product_id":100017301,"comment_content":"思考题: 事先分析时间空间复杂度并不是多此一举, 相反的, 这种方法看似多了一个环节, 但反而是提高了工作的效率, 避免了后续可能出现的代码返工, 同时也是为代码更稳定的运行做了更长远的打算. 同时, 事先做复杂度分析可以让大家在讨论代码效率的时候有一个统一的评判标准, 在有了标准基础上去讨论好与不好才有意义, 以后在我自己写代码的时候也要在考虑业务逻辑之外多尝试从时间空间复杂度的方向去思考如何写出更高效的代码.","like_count":0},{"had_liked":false,"id":42566,"user_name":"一颗菜","can_delete":false,"product_type":"c1","uid":1242396,"ip_address":"","ucode":"5458554E264FB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/1c/20090248.jpg","comment_is_top":false,"comment_ctime":1542971452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542971452","product_id":100017301,"comment_content":"这节代码是java写的？","like_count":0},{"had_liked":false,"id":41896,"user_name":"beiliu","can_delete":false,"product_type":"c1","uid":1292128,"ip_address":"","ucode":"06E1EC1244A52B","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLmBgic9UlGySyG377pCVzNnbgsGttrKTCFztunJlBTDS32oTyHsJjAFJJsYJyhk9cNE5OZeGKWJ6Q/132","comment_is_top":false,"comment_ctime":1542868816,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1542868816","product_id":100017301,"comment_content":"老师，我想请教一下，是如何区分多项式量级和非多项式量级的我，如果有会的小伙伴看到了，希望可以留言帮忙解答一下，谢谢","like_count":0},{"had_liked":false,"id":41894,"user_name":"beiliu","can_delete":false,"product_type":"c1","uid":1292128,"ip_address":"","ucode":"06E1EC1244A52B","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLmBgic9UlGySyG377pCVzNnbgsGttrKTCFztunJlBTDS32oTyHsJjAFJJsYJyhk9cNE5OZeGKWJ6Q/132","comment_is_top":false,"comment_ctime":1542868658,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1542868658","product_id":100017301,"comment_content":"复杂度分析可以做到去本地化","like_count":0},{"had_liked":false,"id":41892,"user_name":"没时间了ngu","can_delete":false,"product_type":"c1","uid":1311334,"ip_address":"","ucode":"9629BB85E8BB5D","user_header":"https://static001.geekbang.org/account/avatar/00/14/02/66/4ab9225e.jpg","comment_is_top":false,"comment_ctime":1542868264,"is_pvip":false,"replies":[{"id":"15061","content":"因为是两个循环 一个循环是n 两个是n^2","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542885054,"ip_address":"","comment_id":41892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542868264","product_id":100017301,"comment_content":"1        for(;  i&lt;=n; ++i){<br>2         j=1;<br>3             for(;  j&lt;=n; ++j){<br>4           sum = sum + i * j ;<br>5         }       <br>6      }<br>小白请教下，1、2行循环n遍，复杂度为2n，   3、4行 不是应该为 n+n2吗，为什么3、4行是2n2呀，这里感觉有点想不通。求指教！！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429935,"discussion_content":"因为是两个循环 一个循环是n 两个是n^2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542885054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41825,"user_name":"Anthony","can_delete":false,"product_type":"c1","uid":1309908,"ip_address":"","ucode":"9E0C98A9123365","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","comment_is_top":false,"comment_ctime":1542855533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542855533","product_id":100017301,"comment_content":"课后问题：个人认为不是浪费时间；文章中已经提及到性能测试收到测试环境以及数据大小还有网络等因素的影响很大，如果不进行时间，空间复杂度的分析，只是简单的满足当下的要求，当日后数据量增大时，可能性能会变得很差，代码不够健壮；再者说，其实熟练的掌握了时间、空间复杂度分析，真正的对代码分析其实也不用花太多时间，如果日后因为没有进行时间、空间复杂度分析而影响代码质量，日后需要重构，则花费的人力物力成本更高；综上所诉，我认为对代码进行时间空间复杂度分析很有必要。","like_count":0},{"had_liked":false,"id":41503,"user_name":"川辣孙悟空","can_delete":false,"product_type":"c1","uid":1010367,"ip_address":"","ucode":"7A0878622ADF73","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/bf/66b407c5.jpg","comment_is_top":false,"comment_ctime":1542795217,"is_pvip":true,"replies":[{"id":"15063","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542885460,"ip_address":"","comment_id":41503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542795217","product_id":100017301,"comment_content":"感谢老师，以前对复杂度分析的意义和方法（由其是方法）一直不太熟练，分析得多了几乎看着for循环样式就背出结果了，今天把这个缺口补上了 :-)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429824,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542885460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41498,"user_name":"叮er咚咚","can_delete":false,"product_type":"c1","uid":1042223,"ip_address":"","ucode":"9543CDD305A734","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/2f/5f1f74f9.jpg","comment_is_top":false,"comment_ctime":1542794849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542794849","product_id":100017301,"comment_content":"终于 理解了 时间复杂度和空间复杂度 的分析和计算，还需要多练习<br>时间复杂度总结：<br>1.只关注循环执行次数最多的一段代码的时间复杂度<br>2.加法法则： 总复杂度等于量级最大代码的复杂度<br>3.乘法法则：嵌套代码负责度 等于 嵌套内外代码复杂度的乘积<br><br>空间复杂度：<br>相对简单 常见的几种空间复杂度：O(1), O(n),O(n2)","like_count":0},{"had_liked":false,"id":41475,"user_name":"wuxbeyond","can_delete":false,"product_type":"c1","uid":1318668,"ip_address":"","ucode":"F665896CF1DC3D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fC4DvPtDPjJjWsMkrRTk4oC9aXnmH7PfBpL3YXichibuib7BXmqteiaQ09jWb7jOFPI5omZCXSmicnmoKXiacYZhqibxg/132","comment_is_top":false,"comment_ctime":1542789623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542789623","product_id":100017301,"comment_content":"x=log2n，所以，这段代码的时间复杂度就是O(log2n)<br> <br>如果底数不是 大于1的 而是   大于0且小于1的呢，那么时间复杂度是多少？","like_count":0},{"had_liked":false,"id":41447,"user_name":"3z","can_delete":false,"product_type":"c1","uid":1313037,"ip_address":"","ucode":"75C86F50FBD48D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lvTuNlVnt6PgI2D9msEXLdsgTjXerj1ic89DIuJxqIKgibBp0RNdTV5rnUfDtuoiaTy1dBl2MpkuSAFCDTkJzrSsw/132","comment_is_top":false,"comment_ctime":1542783508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542783508","product_id":100017301,"comment_content":"第 4、5 行都运行了 n 遍所以需要 2n*unit_time 的执行时间，这个2n是怎么来的？是以内循环体里有2个子语句执行所以是2n？<br><br><br>","like_count":0},{"had_liked":false,"id":41152,"user_name":"恻隐","can_delete":false,"product_type":"c1","uid":1238691,"ip_address":"","ucode":"B8311D1DF65412","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/a3/22417469.jpg","comment_is_top":false,"comment_ctime":1542733925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542733925","product_id":100017301,"comment_content":"还有  项目前的性能测试是怎么测试的","like_count":0},{"had_liked":false,"id":41151,"user_name":"恻隐","can_delete":false,"product_type":"c1","uid":1238691,"ip_address":"","ucode":"B8311D1DF65412","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/a3/22417469.jpg","comment_is_top":false,"comment_ctime":1542733856,"is_pvip":false,"replies":[{"id":"14784","content":"一般都是写的时候随手就看了 没必要刻意的去分析","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542764881,"ip_address":"","comment_id":41151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542733856","product_id":100017301,"comment_content":"我想问王争老师  分析复杂度是在写程序前还是后呢  还是边写边看呢   如果是一个很大的项目 在写之前  分析起来不是很困难吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429713,"discussion_content":"一般都是写的时候随手就看了 没必要刻意的去分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542764881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41101,"user_name":"fish","can_delete":false,"product_type":"c1","uid":1228992,"ip_address":"","ucode":"7E240F5660BC4B","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/c0/62614eee.jpg","comment_is_top":false,"comment_ctime":1542725939,"is_pvip":false,"replies":[{"id":"14787","content":"O（n）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542765064,"ip_address":"","comment_id":41101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542725939","product_id":100017301,"comment_content":"求帮助：<br> 如果在一个函数中出现两个for循环但是他们的循环参数都是n，那么最后的时间复杂度是O(n)还是O(n+n)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429698,"discussion_content":"O（n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542765064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40381,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1542609985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542609985","product_id":100017301,"comment_content":"复杂度分析在理论层面上提供了一个衡量所设计的算法的方法论，在实际的场景中，可以根据我们面对问题的具体的数据规模，应用复杂度分析理论来初步评价我们设计的算法，看是否可行。","like_count":0},{"had_liked":false,"id":40208,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1542552567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542552567","product_id":100017301,"comment_content":"我认为O(m+n）应该还是适用加法法则，max(O(n),O(m)),只是可能我们无法直接判定O(n)和O(m)到底是哪个大，但最终的确定方法应该还是max方法吧，并且如果m和n对应的计算方法都是一致的，那这时加法肯定也是适用的。所以心存疑惑，还请老师指教","like_count":0},{"had_liked":false,"id":40204,"user_name":"yc1884","can_delete":false,"product_type":"c1","uid":1006254,"ip_address":"","ucode":"9B3227C20E251C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aI2evyrWYJG2wMEJ4poBNedHOahH2QEwFx4Bjp9cak5eZWLHD34MvFt92RE9DEgqciaibV8hu2n4kyx0bVWyiaTiag/132","comment_is_top":false,"comment_ctime":1542550595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542550595","product_id":100017301,"comment_content":"个人觉得现在一般都是在项目中先进行性能测试，尤其是在上线之后会发现一些瓶颈的地方，然后会针对一些可能造成瓶颈的地方进行时间和空间复杂度分析，然后通过优化算法进行性能提升，个人觉得在现实的项目中这种比较实际可行，所有代码都进行这方面分析不太现实也不太大必要。","like_count":0},{"had_liked":false,"id":40202,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1542549953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542549953","product_id":100017301,"comment_content":"大O复杂度分析既然表示的是一种趋势，那应该就是斜率，就是f(n)求导的结果，但求导后的表示大O(n)应该是大O(1),大O(n²)表示应该为大O(2n)，所以这个地方感觉疑惑？还请指教","like_count":0},{"had_liked":false,"id":40178,"user_name":"Ying","can_delete":false,"product_type":"c1","uid":1307466,"ip_address":"","ucode":"FAE36C852765F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/4a/4874b350.jpg","comment_is_top":false,"comment_ctime":1542538731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542538731","product_id":100017301,"comment_content":"时间复杂度 空间复杂度 一个解决效率，一个解决存储。两个都彻底弄明白了 对编程的帮助一定是非常大的.<br>常量阶<br>线性阶 <br>对数阶<br>线性对数阶<br>指数阶<br>阶乘阶<br>平方阶<br><br>","like_count":0},{"had_liked":false,"id":39889,"user_name":"野马","can_delete":false,"product_type":"c1","uid":1065176,"ip_address":"","ucode":"CC58CBF541D34A","user_header":"https://static001.geekbang.org/account/avatar/00/10/40/d8/69722032.jpg","comment_is_top":false,"comment_ctime":1542375780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542375780","product_id":100017301,"comment_content":"老师，我听了好多遍，卡在这儿了。","like_count":0},{"had_liked":false,"id":39440,"user_name":"向风","can_delete":false,"product_type":"c1","uid":1117906,"ip_address":"","ucode":"6646095B976B20","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/d2/5fa23ec0.jpg","comment_is_top":false,"comment_ctime":1542276449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542276449","product_id":100017301,"comment_content":"讲得很好，我竟然看懂了","like_count":0},{"had_liked":false,"id":39083,"user_name":"一木","can_delete":false,"product_type":"c1","uid":1298226,"ip_address":"","ucode":"549053948E2334","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/32/99fcc47f.jpg","comment_is_top":false,"comment_ctime":1542185194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542185194","product_id":100017301,"comment_content":"性能测试会告诉我们一个基于具体物理环境而得出的具体结果，而复杂度分析会让我们对代码的效率和消耗有一个粗略的、感性的的认识，告诉我们内因。","like_count":0},{"had_liked":false,"id":38825,"user_name":"阿尔伯特","can_delete":false,"product_type":"c1","uid":1300012,"ip_address":"","ucode":"70B8EA81FAD7BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/d6/2c/9aa0ae40.jpg","comment_is_top":false,"comment_ctime":1542152113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542152113","product_id":100017301,"comment_content":"关于冯剑关于m+n的提问。首先就是不论时间复杂度还是空间复杂度，都是在探讨跟输入规模的关系。并不是在探讨具体的数值。在这里有点像极限的概念。就是说m和n在这里是不同输入规模的代词，但是假定它们都会越来越大，以至于不可救药的大时，算法的最坏复杂度是多少。你从数学角度所做的推论是正确的，它的意思等同于在O1和On都在时，O1实际上不起作用，因为它会在确定的时间内做完。最后一句话，m和n都是输入规模就对了。","like_count":0},{"had_liked":false,"id":38769,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1542124039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542124039","product_id":100017301,"comment_content":"复杂度分析为什么重要?它对于计算机的好处是什么?它跟数据结构和算法是怎么样的关系?","like_count":0},{"had_liked":false,"id":38768,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1542123905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542123905","product_id":100017301,"comment_content":"算法的执行效率，大概是代码执行的时间和次数。","like_count":0},{"had_liked":false,"id":38727,"user_name":"free","can_delete":false,"product_type":"c1","uid":1306702,"ip_address":"","ucode":"C864D4A34D1094","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/TFGax71X8Iw0icOobWRIIicp1BQK3XBH4tViccSETYrWowiaibfY7QPaBjXY1RMp6wegdqNyOB2YTzwQgoicuZomr0Pw/132","comment_is_top":false,"comment_ctime":1542115647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542115647","product_id":100017301,"comment_content":"老师，如果在应用层使用Thread去测试，这种时间复杂度怎样去计算？而且还是多线程","like_count":0},{"had_liked":false,"id":38604,"user_name":"Qin","can_delete":false,"product_type":"c1","uid":1285030,"ip_address":"","ucode":"037B6EF3122303","user_header":"","comment_is_top":false,"comment_ctime":1542082911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542082911","product_id":100017301,"comment_content":"清晰明了","like_count":0},{"had_liked":false,"id":38516,"user_name":"Masetti","can_delete":false,"product_type":"c1","uid":1276058,"ip_address":"","ucode":"6934485993DFD3","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/9a/55a24efa.jpg","comment_is_top":false,"comment_ctime":1542070632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542070632","product_id":100017301,"comment_content":"在实现项目需求的前会做一个有用的方案设计，有时候针对同一个需求可以提出很多种方案设计，此时可以通过时间空间复杂度进行筛选。","like_count":0},{"had_liked":false,"id":38455,"user_name":"微尘众","can_delete":false,"product_type":"c1","uid":1298271,"ip_address":"","ucode":"C8ADC1C0AF2DC8","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/5f/319faaa3.jpg","comment_is_top":false,"comment_ctime":1542038550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542038550","product_id":100017301,"comment_content":"我居然看懂了","like_count":0},{"had_liked":false,"id":38342,"user_name":"向科","can_delete":false,"product_type":"c1","uid":1294797,"ip_address":"","ucode":"6EFC2C4FB11A24","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/cd/cdb510ae.jpg","comment_is_top":false,"comment_ctime":1542024502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542024502","product_id":100017301,"comment_content":"算法时间复杂度和空间复杂度并不能总是达到最优，这取决于系统的实际需求，只就时间复杂度而言，它直接度量了设计的程序解决问题的效率，是与平台无关的，比起在写完程序后集成到系统里面，在产品里工作时，通过制造最坏情况测试来评价算法性能，事先在编码和设计算法时就对性能进行了评估，在我看来，这能提前预估风险，减少项目开发成本，","like_count":0},{"had_liked":false,"id":38256,"user_name":"开心麻花","can_delete":false,"product_type":"c1","uid":1243782,"ip_address":"","ucode":"5A735BCD913DA3","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/86/3d485072.jpg","comment_is_top":false,"comment_ctime":1542003697,"is_pvip":false,"replies":[{"id":"13813","content":"好像没有吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542074247,"ip_address":"","comment_id":38256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542003697","product_id":100017301,"comment_content":"你好，乘法法则 的案例与公式并不对应，代码的复杂度并非是平方，请求查证。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428657,"discussion_content":"好像没有吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542074247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38225,"user_name":"[Stranger,Lover)","can_delete":false,"product_type":"c1","uid":1284863,"ip_address":"","ucode":"D1D024803BD767","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/ff/c8f9a6e2.jpg","comment_is_top":false,"comment_ctime":1541992647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541992647","product_id":100017301,"comment_content":"这节课让我对logn算法有了确切认知，之前都是靠排除法确认是不是logn算法复杂度，感谢老师","like_count":0},{"had_liked":false,"id":38113,"user_name":"liw","can_delete":false,"product_type":"c1","uid":1299864,"ip_address":"","ucode":"569F70A14A351C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/98/ca30e756.jpg","comment_is_top":false,"comment_ctime":1541943037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541943037","product_id":100017301,"comment_content":"有必要分析代码的时间复杂度和空间复杂度，原因有以下几个：<br>1.性能测试不一定能将每个方法都测试到；<br>2.即使花了很大力气在性能测试上，也覆盖几乎趋近于全部代码，但由于性能测试数据不一定能够正确回放生产环境的场景；<br>3.检查自己写的代码模块的时间和空间复杂度，对于自己的编写代码的能力，思考问题的能力还是有很大的提升","like_count":0},{"had_liked":false,"id":38095,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1541934166,"is_pvip":false,"replies":[{"id":"13707","content":"我懂你的意思 有个误区你要避免 那就是空间复杂度并跟内存消耗多少划等号。它指的是一种随数据规模n的增长趋势。这是我反复强调的 你要自己悟一下。跟单位值是8个字节 还是128个字节都没关系","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541986569,"ip_address":"","comment_id":38095,"utype":1}],"discussion_count":0,"race_medal":0,"score":"1541934166","product_id":100017301,"comment_content":"老师，对于空间复杂度请教个问题：<br>对于一个int我们认为是一个空间，一个byte是一个空间，那么对于对象类型，例如一个Object,也直接认为是一个空间吗？例如for循环n次创建了n个Object对象，又定义了n个int类型变量，则空间复杂度为n+n=2n=O(n)吗？","like_count":0},{"had_liked":false,"id":37920,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1541810492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541810492","product_id":100017301,"comment_content":"什么是时间复杂度：全称是渐进时间复杂度（asymptotic time complexity），简称时间复杂度。称代码运行时间与N的渐进关系。不受运行平台硬件影响。","like_count":0},{"had_liked":false,"id":37919,"user_name":"继林","can_delete":false,"product_type":"c1","uid":1012316,"ip_address":"","ucode":"856D2D95FCB327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/5c/fb55173b.jpg","comment_is_top":false,"comment_ctime":1541810088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541810088","product_id":100017301,"comment_content":"性能测试评估系统当前运行情况，随系统的运行，所面临的数据量级逐渐增大，而这个时候采取事后统计的方式就有点亡羊补牢了，全面分析代码的算法效率就很有必要了。","like_count":0},{"had_liked":false,"id":37909,"user_name":"xunlei1221","can_delete":false,"product_type":"c1","uid":1079219,"ip_address":"","ucode":"02A59B3AF7FDB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep5kj3SLkkQQEmibISftq5J7AAzHdgPHlBLVMQLwt98GQ6JiaSZEPOD2FVBjJzhss7AXYCic5AG5VwUA/132","comment_is_top":false,"comment_ctime":1541803762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541803762","product_id":100017301,"comment_content":"收获太大了，梳理的很清楚，谢谢","like_count":0},{"had_liked":false,"id":37883,"user_name":"LAMBO","can_delete":false,"product_type":"c1","uid":1214041,"ip_address":"","ucode":"10EDE0FC134FA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/59/e8f58a2a.jpg","comment_is_top":false,"comment_ctime":1541765352,"is_pvip":false,"replies":[{"id":"13721","content":"是的 👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987683,"ip_address":"","comment_id":37883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541765352","product_id":100017301,"comment_content":"在讨论指数和对数时，底数是很关键的。<br>底数要满足＞0且≠1。<br>一般会根据底数划分成两块来分析：<br>1、底数为(0,1)时；<br>2、底数为(1,+∞)时。<br>讨论算法的时间复杂度中，底数应该是(1,+∞)。<br>王大神，是吧？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428510,"discussion_content":"是的 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37735,"user_name":"sensitivemix","can_delete":false,"product_type":"c1","uid":1058510,"ip_address":"","ucode":"F1E374DD4BE177","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/ce/db5405e7.jpg","comment_is_top":false,"comment_ctime":1541721595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541721595","product_id":100017301,"comment_content":"通俗易懂，事后分析法以及时间复杂度和空间复杂度分析透彻👍 ","like_count":0},{"had_liked":false,"id":37685,"user_name":"LAMBO","can_delete":false,"product_type":"c1","uid":1214041,"ip_address":"","ucode":"10EDE0FC134FA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/59/e8f58a2a.jpg","comment_is_top":false,"comment_ctime":1541678905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541678905","product_id":100017301,"comment_content":"同样是讲解数据结构和算法，王争大神的专栏为什么比覃超的视频课好n的平方倍呢？！","like_count":0},{"had_liked":false,"id":37642,"user_name":"Kevin.zhang🌏","can_delete":false,"product_type":"c1","uid":1247039,"ip_address":"","ucode":"5C52AE51538906","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","comment_is_top":false,"comment_ctime":1541663796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541663796","product_id":100017301,"comment_content":"我觉得分析代码复杂度是必须的，因为现实世界中影响代码执行速度的因素太多了！分析代码复杂度是我们能比较公平的看到，程序执行的主观效果！","like_count":0},{"had_liked":false,"id":36902,"user_name":"LAMBO","can_delete":false,"product_type":"c1","uid":1214041,"ip_address":"","ucode":"10EDE0FC134FA8","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/59/e8f58a2a.jpg","comment_is_top":false,"comment_ctime":1541383846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541383846","product_id":100017301,"comment_content":"大神，<br>for(int i=1;i&lt;3;i++){<br>  System.out.println(i);<br>}<br>for()里面不是有3个语句吗？<br>这段代码的执行时间是：<br>i=1;执行一次，<br>i&lt;3;执行两次，<br>i++;执行一次，<br>System.out.println(i);执行一次。<br>一共5个unit_time，对吗？","like_count":0},{"had_liked":false,"id":36535,"user_name":"一个程序员的成长","can_delete":false,"product_type":"c1","uid":1008900,"ip_address":"","ucode":"168CDADD41B65F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/04/bf12d036.jpg","comment_is_top":false,"comment_ctime":1541143846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541143846","product_id":100017301,"comment_content":"1、大O复杂度表示法<br><br>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比；<br><br>大 O 时间复杂度其实表示的并不是代码的执行时间，而是随着数据规模的增长代码执行时间的不同变化；<br><br>大 O 表示法中低阶、常量、系数三部分并不能左右时间复杂度的结果，所以都可以忽略；<br><br>2、如何分析时间复杂度<br><br>只关注循环执行次数最多的<br>加法法则：总复杂度等于量级最大的那段代码的复杂度；<br>乘法法则：嵌套代码的复杂度等于嵌套内代码复杂度的乘积；<br>3、常见时间复杂度分析<br><br>O(1) <br><br>O(1) 并不是指只执行一次的代码，而是常量级时间复杂度的一种表示方法。只要代码的执行时间不随着n的增大而增大，那么这样的代码的时间复杂度都可以记为O(1);<br>O(logn)、O(nlogn)<br><br>我们把所有的对数阶的时间复杂度都记为 O(logn) ，因为对数之间是可以相互转换的；<br>如果一段代码的时间复杂度是 O(logn) ，那么我们循环n遍，时间复杂度就是 O(nlogn)；<br>O(m+n) 、O(m * n)<br><br>m和n表示的是两个数据规模，事先无法评估m和n谁的量级大，所以这里的时间复杂度就不能单纯的使用加法法则，那么相应的加法法则在这里也就不实用了；<br>4、空间复杂度分析<br><br>常见的空间复杂度：O(1)、O(n)、O(n2)<br>5、总结<br><br>复杂度是为了分析算法的执行效率与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":36521,"user_name":"#! 月","can_delete":false,"product_type":"c1","uid":1065810,"ip_address":"","ucode":"C8D4D6D4E1CEFB","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/52/f26fd9ea.jpg","comment_is_top":false,"comment_ctime":1541141129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541141129","product_id":100017301,"comment_content":"之前自己也数次想把算法导论看完，每次都从开头开始看，算法的那个公开课也是。所以复杂度这块看过多次。这次看完作者的分享，感觉都捡起来了，之前的也没有白看。<br>课后思考：<br>感觉是针对不同情境。理论指导实践，实践反过来验证理论。<br>之前很多书里都看到过：过早优化是复杂度的重要来源之一。我们的代码不仅仅要高效还要易读，易维护。<br>项目先做性能测试，再做复杂度分析是不是就是为了避免过早优化呢？找到瓶颈处再分析优化，避免过早优化引入代码复杂度？<br>对于每段代码分析复杂度方式，感觉更像是用于专门优化算法的情景。例如排序这种算法优化，要对自己的算法有一个底。或者是学术研究。<br>实际项目本来就是时间成本，人力成本，代码成本的平衡，怎样取舍就仁者见仁了。","like_count":0},{"had_liked":false,"id":36499,"user_name":"搬砖的孟达","can_delete":false,"product_type":"c1","uid":1201067,"ip_address":"","ucode":"8F280479C2C83D","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/ab/20f1f4e8.jpg","comment_is_top":false,"comment_ctime":1541130590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541130590","product_id":100017301,"comment_content":"时间复杂度算法：简单看一眼就知道了；加法：参数相同取最大；参数不同要相加。乘法：只相乘。其他找关系式推到。<br>空间复杂度：计算申请空间的大小。","like_count":0},{"had_liked":false,"id":36369,"user_name":"旭风","can_delete":false,"product_type":"c1","uid":1137835,"ip_address":"","ucode":"DC5D10308F8C0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4AyMqvLia5xW0d1CxlPYoHJk2LQhaDzAialczCIuRKibiczWHkJIra0DpmtxREwibtPiajk3NhQVSicXMKxB0Oyb5GEsg/132","comment_is_top":false,"comment_ctime":1541061100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541061100","product_id":100017301,"comment_content":"做代码的时间复杂度、空间复杂度分析是很有必要，像在一些实时系统中，所有要对某些算法的运算规模做一个评估，也就是时间复杂度，然后再根据用户的需求指标，提出优化算法的方向，例如算法的改进，以空间换时间等等，分析是为了更好完成任务，分析是为了取得更好的性能做准备","like_count":0},{"had_liked":false,"id":36156,"user_name":"ppj","can_delete":false,"product_type":"c1","uid":1074173,"ip_address":"","ucode":"E77A3E3197B925","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/fd/d5a20f89.jpg","comment_is_top":false,"comment_ctime":1540957402,"is_pvip":false,"replies":[{"id":"12899","content":"python不怎么了解 不过递归复杂度的分析 在排序那一节有讲到","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541037348,"ip_address":"","comment_id":36156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540957402","product_id":100017301,"comment_content":"请问老师，python数据结构的嵌套字典的递归遍历时间复杂度是n的k阶方吗？与递归深度有关吗？迭代遍历比较好分析，递归有点不是很清楚。可以举一些递归时间复杂度的例子吗？谢谢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427763,"discussion_content":"python不怎么了解 不过递归复杂度的分析 在排序那一节有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541037348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36130,"user_name":"张闯","can_delete":false,"product_type":"c1","uid":1090513,"ip_address":"","ucode":"D5AD46A8DD6FB7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/d1/a30a4d06.jpg","comment_is_top":false,"comment_ctime":1540950325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540950325","product_id":100017301,"comment_content":"复杂度分析是自己做的，性能测试是团队做的。有意识的思考自己代码的复杂度，就能避免在性能测试后背锅丢脸。","like_count":0},{"had_liked":false,"id":35721,"user_name":"逾清风","can_delete":false,"product_type":"c1","uid":1275452,"ip_address":"","ucode":"B23D93E57C916D","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/3c/c65912b7.jpg","comment_is_top":false,"comment_ctime":1540776217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540776217","product_id":100017301,"comment_content":"复杂度分析，不仅可以用在代码完成以后，在写代码的同时低复杂度的算法选择使得我们的代码较为优化，在写代码的时候要形成一个自动分析时间复杂度的思维，而性能测试只能在代码段完成之后，如果代码时间复杂度太大，即使代码正确，最后也可能会在运行上出问题。因此，时间复杂度分析尤为重要，更重要的是在写代码的时候要形成自动分析复杂度的思维。","like_count":0},{"had_liked":false,"id":35615,"user_name":"TinyDolphin","can_delete":false,"product_type":"c1","uid":1245253,"ip_address":"","ucode":"3EB44788F2A87F","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/45/c7fd19ae.jpg","comment_is_top":false,"comment_ctime":1540711466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540711466","product_id":100017301,"comment_content":"# 复杂度分析<br>## 什么是复杂度分析？<br>### 从执行时间和占用空间两个维度来评估数据结构和算法的性能<br>## 为什么需要复杂度分析？<br>### ①、不依赖测试环境、成本低、效率高、易操作、指导性强<br>### ②、不受数据规模的影响<br>### ③、有利于编写出性能更优的代码，降低系统开发和运维的成本<br>## 怎么去复杂度分析？<br>### 大 O 表示法<br>* 公式： T(n) = O(f(n))<br>    * T(n)：代码总的执行时间、n：数据规模的大小、f(n) 每行代码执行的次数总和、O ：代码的执行时间 T(n) 与 f(n) 表达式成正比<br>* 特点<br>    * 并不具体表示代码的真正执行时间，而是表示代码执行时间随着数据规模增长的变化趋势。也叫 渐进时间复杂度，简称时间复杂度<br>### 分析方法<br>* ①、只关注循环执行次数最大的一段代码<br>    * 可以忽略掉公式中的常量、低阶、系数<br>* ②、加法规则<br>    * 总复杂度等于量级最大的那段代码的复杂度<br>    * 公式<br>        * T(n) = T1(n) + T2(n) = Max(O(f(n), g(n)))<br>* ③、乘法规则<br>    * 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>    * 公式<br>        * T(n) = T1(n) * T2(n) = O(f(n) * g(n))<br>### 常见的时间复杂度实例分析<br>* 多项式量级<br>    * ①、O(1)<br>        * 一般情况下，只要算法中不存在循环语句，递归语句，就算有成千上万行代码，其时间复杂度依然是 O(1)<br>    * ②、O(logn、nlogn)<br>        * 在使用大O标记复杂度的时候，可以忽略系数<br>    * ③、O(n+m)、O(n*m)<br>        * 加法法则无效，但乘法法则依然有效<br>            * T1(n) * T2(m) = O(f(n) * g(m)) = O(n * m)<br>* 非多项式量级<br>    * O(2^n)<br>    * O(n!) <br>    * 概要: 非常低效，会随着数据规模的增长，算法的执行时间会急剧增加<br>","like_count":0},{"had_liked":false,"id":35611,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1540706287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540706287","product_id":100017301,"comment_content":"性能分析应该成为写代码时的潜意识，或者自己的代码规范。","like_count":0},{"had_liked":false,"id":35539,"user_name":"Coco🐯","can_delete":false,"product_type":"c1","uid":1235891,"ip_address":"","ucode":"80AD769302FD94","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/b3/f0f362af.jpg","comment_is_top":false,"comment_ctime":1540645661,"is_pvip":false,"replies":[{"id":"12683","content":"后面章节中有详细的分析","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540740485,"ip_address":"","comment_id":35539,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540645661","product_id":100017301,"comment_content":"hi,老师能否再分析一下快速排序复杂度为啥是nlogn","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427569,"discussion_content":"后面章节中有详细的分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540740485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35449,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1540595099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540595099","product_id":100017301,"comment_content":"后面的一些典型的排序算法的时间复杂度和空间复杂度推导过程吗","like_count":0},{"had_liked":false,"id":35433,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1540561923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540561923","product_id":100017301,"comment_content":"怎么说呢，项目的性能测试，自认为算是最后的保证。保证最后的项目性能能达到要求。<br>但是，并不一定能做到代码最优化。并且做性能测试需要一定的时间和成本。所以最好还是在性能测试之前，确保高效的代码。","like_count":0},{"had_liked":false,"id":35264,"user_name":"AnT—路","can_delete":false,"product_type":"c1","uid":1274018,"ip_address":"","ucode":"1F09BB7BED0539","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/a2/e7921fa8.jpg","comment_is_top":false,"comment_ctime":1540480877,"is_pvip":false,"replies":[{"id":"12569","content":"嗯 是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540515866,"ip_address":"","comment_id":35264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540480877","product_id":100017301,"comment_content":"看完此节，有一点考虑：应该说复杂度不是程序编写完成后才考虑的细节，当然也不排除对程序中某些环节的修改，对时间、空间复杂度的考虑是在程序编写过程中，甚至是程序架构过程中就应该考虑的问题，对于一项业务（或者一套软件），通常是需要考虑系统冗余的，这就更需要在程序编写过程中将复杂度纳入考虑范畴，这是不是从侧面展示了计算复杂度的必要性？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427493,"discussion_content":"嗯 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540515866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34919,"user_name":"果粒橙","can_delete":false,"product_type":"c1","uid":1272730,"ip_address":"","ucode":"000B15E28C68B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/9a/786b1ed8.jpg","comment_is_top":false,"comment_ctime":1540353660,"is_pvip":false,"replies":[{"id":"12498","content":"也还是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394494,"ip_address":"","comment_id":34919,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1540353660","product_id":100017301,"comment_content":"老师，logn和n的区别，是不是可以理解为logn的n是指数增加的，因为循环中n=n*i,n的n是线性增加的，循环中n=n+1？如果循环中n=n+一个很大的数字，也还是复杂度n吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427389,"discussion_content":"也还是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34858,"user_name":"ONLY","can_delete":false,"product_type":"c1","uid":1049147,"ip_address":"","ucode":"180990E586D060","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","comment_is_top":false,"comment_ctime":1540341943,"is_pvip":false,"replies":[{"id":"12503","content":"乘法法则是 n是100s 运行m=10次。总共花1000s","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394742,"ip_address":"","comment_id":34858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540341943","product_id":100017301,"comment_content":"老师你好，一直没理解乘法法则，好比m是10s n是100s 怎么也是110s 也不会是1000s呀","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427364,"discussion_content":"乘法法则是 n是100s 运行m=10次。总共花1000s","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34834,"user_name":"ONLY","can_delete":false,"product_type":"c1","uid":1049147,"ip_address":"","ucode":"180990E586D060","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","comment_is_top":false,"comment_ctime":1540336632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540336632","product_id":100017301,"comment_content":"int cal(int n) {<br><br><br>\t<br>   int ret = 0; <br><br><br>\t<br>   int i = 1;<br><br><br>\t<br>   for (; i &lt; n; ++i) {<br><br><br>\t<br>     ret = ret + f(i);<br><br><br>\t<br>   } <br><br><br>\t<br> } <br><br><br>\t<br> <br><br><br>\t<br> int f(int n) {<br><br><br>\t<br>  int sum = 0;<br><br><br>\t<br>  int i = 1;<br><br><br>\t<br>  for (; i &lt; n; ++i) {<br><br><br>\t<br>    sum = sum + i;<br><br><br>\t<br>  } <br><br><br>\t<br>  return sum;<br><br><br>\t<br> }<br><br>这个代码的时间复杂度分析是不是编辑写错了，这个是两个平行的代码，没有嵌套，为何要用相乘算复杂度","like_count":0},{"had_liked":false,"id":34828,"user_name":"森晨","can_delete":false,"product_type":"c1","uid":1262940,"ip_address":"","ucode":"A23BE6B9762275","user_header":"https://static001.geekbang.org/account/avatar/00/13/45/5c/fc32c3de.jpg","comment_is_top":false,"comment_ctime":1540315430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540315430","product_id":100017301,"comment_content":"讲的很透彻 for循环的那个地方我还蒙了一会 虽然循环体内部的累加只执行了99次 但是for循环的判断确是判断了100次 所以T(n)=100*unit_time","like_count":0},{"had_liked":false,"id":34719,"user_name":"尹锋","can_delete":false,"product_type":"c1","uid":1014594,"ip_address":"","ucode":"59028C51A98F61","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/42/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1540267805,"is_pvip":false,"replies":[{"id":"12511","content":"业务开发的话 如果你写代码不是核心代码 直接调api就好了 如果直接调api不能满足性能要求了 那再考虑自己写 如果调api的话 时间复杂度分析的时候要看api的复杂度高不高 高的话要综合考虑 不高的话直接当做o（1）行了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540395301,"ip_address":"","comment_id":34719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540267805","product_id":100017301,"comment_content":"王老师好，这里有一个例子，是实现字符串反转，有基础的 for 循环实现的版本，也有一些实现涉及到系统 API 的调用。<br>我有两个问题，当涉及到系统 API 调用的时候，我们怎么来计算时间复杂度呢，以及在实际开发中，当还涉及到代码可读性时，怎么去权衡。<br>const reverse1 = str =&gt;<br>  str<br>    .split(&#39;&#39;)<br>    .reverse()<br>    .join(&#39;&#39;)<br><br>const reverse2 = str =&gt; str.split(&#39;&#39;).reduce((acc, value) =&gt; value + acc)<br><br>const reverse3 = str =&gt;<br>  str.length === 1 ? str : str.slice(-1) + reverse3(str.slice(0, -1))<br><br>const reverse4 = (str) =&gt; {<br>  let newStr = &#39;&#39;<br>  let size = str.length<br>  let middle = Math.floor(size &#47; 2)<br>  let up = middle<br>  let down = size % 2 === 0 ? middle - 1 : middle<br>  <br>  for (; up &lt; size &amp;&amp; down &gt;= 0; down--, up++) {<br>    if (up != down) {<br>      newStr = str[up] + newStr + str[down]<br>    } else {<br>      newStr = str[up]<br>    }<br>  }<br>  return newStr<br>}<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427308,"discussion_content":"业务开发的话 如果你写代码不是核心代码 直接调api就好了 如果直接调api不能满足性能要求了 那再考虑自己写 如果调api的话 时间复杂度分析的时候要看api的复杂度高不高 高的话要综合考虑 不高的话直接当做o（1）行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540395301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34469,"user_name":"皮蛋","can_delete":false,"product_type":"c1","uid":1202619,"ip_address":"","ucode":"8384CC338549EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/bb/caf2b06c.jpg","comment_is_top":false,"comment_ctime":1540181879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540181879","product_id":100017301,"comment_content":"不浪费时间，因为可以用更快的速度和更少的空间完成功能的设计","like_count":0},{"had_liked":false,"id":34323,"user_name":"Geek_05dfd7","can_delete":false,"product_type":"c1","uid":1247705,"ip_address":"","ucode":"4FFAE1E5B62920","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QoPAicbDv67THuhggkTqSXY1QhvjsM7dicb2yceiaMn1q6jDsD5GsIk1O7jYucxLZiaONQlmpAkAbiavX8MhUIZj73w/132","comment_is_top":false,"comment_ctime":1540108664,"is_pvip":false,"replies":[{"id":"12268","content":"不能的 两个的和","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540173703,"ip_address":"","comment_id":34323,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540108664","product_id":100017301,"comment_content":"请问如果是O(m*m)和O(n)的话，怎么计算时间复杂度？能忽略O(n)么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427176,"discussion_content":"不能的 两个的和","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540173703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34264,"user_name":"一魄","can_delete":false,"product_type":"c1","uid":1134574,"ip_address":"","ucode":"71541125D4AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","comment_is_top":false,"comment_ctime":1540052788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540052788","product_id":100017301,"comment_content":"我对思考问题的解答：<br>事后统计法能得到算法在某环境下的确切的执行效率和内存占用大小，为实际测试环境验证算法性能方面提供有力的数据体现。而大O复杂度表示法，是从分析算法复杂度的过程，来粗略得出算法的性能指标。二者一个从实际得到的性能结果出发，一个从分析过程出发，并不冲突，而是相辅相成的关系。大O复杂度表示法提供了一种可分析、可描述的方法，让我们提前预知代码的性能好坏。","like_count":0},{"had_liked":false,"id":34263,"user_name":"帮主","can_delete":false,"product_type":"c1","uid":1235675,"ip_address":"","ucode":"CF35859311F3D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/db/b6129439.jpg","comment_is_top":false,"comment_ctime":1540051943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540051943","product_id":100017301,"comment_content":"大O时间复杂度<br>大O时间复杂度表示法，表示了代码执行时间随数据规模增长的变化趋势，也叫做渐进时间复杂度，简称时间复杂度：T(n) = O(f(n))<br><br>如何分析：<br>1.只有一段代码的时，只关注循环执行次数最多的那一段代码就行了<br>2.加法法则：多段代码时，总的时间复杂度就等于量级最大的那段代码的时间复杂度<br>3.乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>4.如果多段代码复杂度由两个数据规模n和m共同决定，那(2)加法法则就不成立啦，需改成：T1(m)+T2(n)=O(f(m)+g(n))，但(3)乘法法则还是成立：T1(m)*T2(n)=O(f(m)*g(n))<br><br>几种常见实例：<br>O(i) , O(logn) , O(n) , O(nlogn) , O(n^2) , O(2^n) , O(n!)<br>如上可以分两类：多项式量级和非多项式量级（底数不为n阶，指数为n阶）。其中，非多项式量级只有两个:指数阶O(2^n)和阶乘阶O(n! )。非多项式量级求解时间随着n增大而急剧增加，所以大多数情况下应尽量选择多项式量级。<br><br>大O空间复杂度<br>大O空间复杂度表示法，表示算法的存储空间与数据规模之间的增长关系。如new int[n]的复杂度就是O(n)<br><br>复杂度排名：<br>越高阶复杂度的算法，执行效率越低，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n^2 )","like_count":0},{"had_liked":false,"id":34072,"user_name":"小龙哥","can_delete":false,"product_type":"c1","uid":1233900,"ip_address":"","ucode":"4A5314AC759D89","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/ec/8635ab38.jpg","comment_is_top":false,"comment_ctime":1539984419,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539984419","product_id":100017301,"comment_content":"（转）<br>总结<br>一、什么是复杂度分析？<br>1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。<br>二、为什么要进行复杂度分析？<br>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。<br>三、如何进行复杂度分析？<br>1.大O表示法<br>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。<br>2.复杂度分析法则<br>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。<br>四、常用的复杂度级别？<br>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）<br>五、如何掌握好复杂度分析方法？<br>复杂度分析关键在于多练，所谓孰能生巧。","like_count":0},{"had_liked":false,"id":33989,"user_name":"yh","can_delete":false,"product_type":"c1","uid":1234284,"ip_address":"","ucode":"5F1AAF47E4AB03","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/6c/17346931.jpg","comment_is_top":false,"comment_ctime":1539939658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539939658","product_id":100017301,"comment_content":"所谓的复杂度O(n)其实就是一种研究当输入规模趋近于无穷大的一种表达方式；<br>就像大学数学学得泰勒公式里面的高阶无穷小一样，不同的是高阶无穷小的表达方式是o(n),小o，而n也不是趋近于无穷大，而是趋近于0，当n无限趋近于0的时候，任何比n更高阶的函数都远远小于n，所以当n和比n更高阶的函数同时存在，并且n趋近于0的时候，他等价于n（因为所以比n更高阶的函数相加在n趋于0的时候会远远小于n，可以忽略不计）；<br>而O(n)恰恰相反，是讨论当输入规模n趋于无穷大时的一种状态，与高阶无穷小对应的，当n趋于无穷大时，比n更高阶的函数会远远大于低阶的函数，也就是当规模无限大的时候，只有n最高阶的会发挥主导作用。<br>但是复杂度分析毕竟只是一种理论分析，抛开现实单纯的讨论复杂度只是数学问题，因为现实不可能存在无穷大的输入，可能A方法的时间复杂度小于B方法的时间复杂度，但是对于特定规模的输入，很有可能反而B方法的执行效率优于A方法。也有可能对于输入基本有序的情况，B方法也优于理论分析更高效的A方法。甚至即使A方法优于B方法，但是A方法需要写一万行代码，写一个星期，并且代码难以理解，而B只需要短短三行，十分钟搞定；我觉得此时可能B方法也是一个不错的选择。<br>编程的艺术是一门综合了数学（比如我们讨论的复杂度分析）、工程学（考虑恰当的输入规模，输入的内容）、人文（代码可读性，复杂性，需要的人工）等不同学科，我们需要在这些因素里找到一个微妙的平衡。<br>所以我觉得所有的方法全部分析复杂度是不是有点矫枉过正，可能我们只需要关注某些耗时接口的复杂度是不是需要优化即可。","like_count":0},{"had_liked":false,"id":33972,"user_name":"汲长娟","can_delete":false,"product_type":"c1","uid":1255967,"ip_address":"","ucode":"05870B18657C07","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/1f/4e2597f9.jpg","comment_is_top":false,"comment_ctime":1539933589,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1539933589","product_id":100017301,"comment_content":"不是浪费时间。我们需要一个不用具体的测试数据来测试，不依赖于外部环境的，就可以估计算法执行效率的方法，这就是渐进时间，空间复杂度分析。进而让自己写出执行效率相对高的代码，还可以培养自己的复杂度分析思维认知。","like_count":0},{"had_liked":false,"id":33966,"user_name":"贵的向往","can_delete":false,"product_type":"c1","uid":1243205,"ip_address":"","ucode":"17B48773ADD050","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/45/b7f8c95f.jpg","comment_is_top":false,"comment_ctime":1539931934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539931934","product_id":100017301,"comment_content":"看完了第一遍后基本懂了概念，把自己的python代码拿出来试着评估时间复杂度：1.@file_data(&#39;.&#47;testdata&#47;src_data.json&#39;)<br>2    def test_post_data(self,**src_data):<br>3       error_str = [&#39;无效的玩法id &#39;,&quot;ReqContent参数校验失败&quot;,&#39;ReqContent参数格式出错&#39;,&#39;暂无新期&#39;]<br>4        url = &#39;http:&#47;&#47;10.10.37.148:8188&#47;api&#47;access&#47;do?5cmd=queryTerm&amp;partnerId=20002&amp;hashType=md5&amp;hash=&#39;<br>6        en_src_data,hash_code = java_encrypt_url.Encrypt_url.set_md5(src_data)<br>7        print(hash_code)<br>8        res = requests.post(url+hash_code, en_src_data)<br>9        print(res.status_code)<br>10        res_post = java_encrypt_url.Encrypt_url.convert_java_byte_arrary(res)<br>11        self.assertIn(res_post[&quot;BackMsg&quot;],error_str,res_post[&quot;BackMsg&quot;] + &#39; 不符合定义的错误信息&#39;)<br>有几个疑问：<br>1.第1行是读文件操作，不管文件多大，复杂度都可以认为是O(1)吗？<br>2.第6、8、10行调用了其他模块的函数，所以是要应用加法法则对吧<br>3.假设问题1中的时间复杂度O(1),问题2中调用的函数复杂度都是O(1),则这个函数的时间复杂度是o(1)<br>4.对于python语言，一个函数中可能存在很多处函数调用，评估时间复杂度时，必须每个函数去评估然后再算总的吗？有没有比较简便的方法？<br>","like_count":0},{"had_liked":false,"id":33856,"user_name":"哈希碰撞","can_delete":false,"product_type":"c1","uid":1244496,"ip_address":"","ucode":"DF82678E60095D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM49ONuR097wB6LqR8nn5kWiaQiaPic1y8UznibDOScQergTj5qeL6zQ4bIicYEkqlMiash3CUCAYmSt9tQA/132","comment_is_top":false,"comment_ctime":1539911427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539911427","product_id":100017301,"comment_content":"怎么区分时间复杂度是O(n)还是O(logn)呢？<br>sum = sum + i; 和 i = i * 2; 仅仅是因为+号和*号的区别，就导致时间复杂度不同吗？<br><br>T(n)=O(n)时间复杂度：<br> int cal(int n) {<br>   int sum = 0;<br>   int i = 1;<br>   for (; i &lt;= n; ++i) {<br>     sum = sum + i;<br>   }<br>   return sum;<br> }<br><br>T(n)=O(logn)时间复杂度：<br> i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }<br><br><br><br><br>","like_count":0},{"had_liked":false,"id":33699,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1156724,"ip_address":"","ucode":"C0B627721FABF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a6/74/1c86b1f8.jpg","comment_is_top":false,"comment_ctime":1539855657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539855657","product_id":100017301,"comment_content":"到位！！！<br>看到对数懵了，好在老师说用到不多，不过也去补下课","like_count":0},{"had_liked":false,"id":33682,"user_name":"1024","can_delete":false,"product_type":"c1","uid":1086407,"ip_address":"","ucode":"DCC31F6EC54F43","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/c7/86352ccc.jpg","comment_is_top":false,"comment_ctime":1539852198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539852198","product_id":100017301,"comment_content":"今天所学：<br>时间复杂度、空间复杂度<br>用来衡量代码的执行时间、存储空间的使用<br>时间复杂度：渐进时间复杂度。随着输入n的增加，代码段执行的次数（取高阶）。循环内有循环就乘，循环后面有循环就加<br>特殊情况：不随n变化而变化的代码段，例如循环的上限是常数，则为O(1)<br>空间复杂度：申请的内存空间","like_count":0},{"had_liked":false,"id":33676,"user_name":"1024","can_delete":false,"product_type":"c1","uid":1086407,"ip_address":"","ucode":"DCC31F6EC54F43","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/c7/86352ccc.jpg","comment_is_top":false,"comment_ctime":1539851597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539851597","product_id":100017301,"comment_content":"文中提到log(3)n=log(3)2*log(2)n. 多年的知识早还给老师了，现在把它捡起来，只为记住为什么都用O(logn)<br>即证：log(2)n=log(3)n&#47;log(3)2 <br>换底公式推导过程：<br>log(a)n=log(b)n&#47;log(b)a<br>注：括号代表「底」<br>解：设log(a)n=M，log(b)n=N，log(b)a=R<br>则a^M=n,<br> b^N=n,<br> b^R=a<br>由b^R=a有 b^RM=a^M，由b^N=n及a^M=n 有 b^RM=b^N<br>所以RM=N<br>即log(b)a * log(a)n = log(b)n<br>即log(a)n=log(b)n&#47;log(b)a<br>","like_count":0},{"had_liked":false,"id":33637,"user_name":"liwenbo","can_delete":false,"product_type":"c1","uid":1267368,"ip_address":"","ucode":"C82C37D17E1260","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIo14HXkvGiasArSeu4SpuQCYqGaWLRueek9Cx50GUNmwAfX3miczcg3ibWQhBGAtagpvVHl9fWlegPw/132","comment_is_top":false,"comment_ctime":1539840927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539840927","product_id":100017301,"comment_content":"我们对时间复杂度和空间复杂度的分析是在运行之前，可以提前发现自己代码的不足，做下一步优化","like_count":0},{"had_liked":false,"id":33598,"user_name":"Ｓｉｌｅｎｃｅ","can_delete":false,"product_type":"c1","uid":1246560,"ip_address":"","ucode":"F815913ABCBCDC","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/60/5c6e7a46.jpg","comment_is_top":false,"comment_ctime":1539831200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539831200","product_id":100017301,"comment_content":"我认为不是多此一举，养成时间、空间复杂度分析的习惯其实是让程序员在写代码的时候就考虑到写出来的这段代码的执行效率问题，性能测试更多的是在项目做完以后，总体的看下整个项目的性能如何，写代码的时候就考虑到时间、空间复杂度的问题一方面有助于提升项目性能，另一方面也避免了事后分析出性能不好再回头来修改。","like_count":0},{"had_liked":false,"id":33503,"user_name":"灰机","can_delete":false,"product_type":"c1","uid":1179580,"ip_address":"","ucode":"46F6CFC2DFAA2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/bc/368b9f80.jpg","comment_is_top":false,"comment_ctime":1539799255,"is_pvip":false,"replies":[{"id":"12097","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539856694,"ip_address":"","comment_id":33503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539799255","product_id":100017301,"comment_content":"老师您好，乘法法则里面的代码复杂度是不是就是时间复杂度？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426977,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539856694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33487,"user_name":"Promise","can_delete":false,"product_type":"c1","uid":1038646,"ip_address":"","ucode":"3E07E270EED2E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/36/92d8eb91.jpg","comment_is_top":false,"comment_ctime":1539792690,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539792690","product_id":100017301,"comment_content":"我认为并不是多此一举，有效的时间复杂度和空间复杂度的分析有助于我们查看代码是否存在效率问题","like_count":0},{"had_liked":false,"id":32774,"user_name":"85785586686","can_delete":false,"product_type":"c1","uid":1265680,"ip_address":"","ucode":"B0B3E301D165F8","user_header":"https://wx.qlogo.cn/mmopen/vi_32/HASjPUlmoqnggbh2pLjvORmEN4cHqcjDuPs52rAmhYhn5jibmLXG2qHx2rzgAy9RAmsGAGWZHA2ia2R8A6iaRzJPQ/132","comment_is_top":false,"comment_ctime":1539695389,"is_pvip":false,"replies":[{"id":"11938","content":"跟硬件无关吧 单纯平均代码执行效率的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539701547,"ip_address":"","comment_id":32774,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539695389","product_id":100017301,"comment_content":"老师算法复杂度是针对CPU的吗，TPU、GPU的算法复杂度测算也是这种方法吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426888,"discussion_content":"跟硬件无关吧 单纯平均代码执行效率的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539701547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32701,"user_name":"Novapath ☀","can_delete":false,"product_type":"c1","uid":1256605,"ip_address":"","ucode":"A65E5AB8B58E1C","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/9d/e5af3fd4.jpg","comment_is_top":false,"comment_ctime":1539671822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539671822","product_id":100017301,"comment_content":"03 复杂度分析（上）<br><br>一、what复杂度分析<br><br>数据结构和算法解决是怎么让计算机代码运行的更快，更省存储空间的问题。<br><br>分别用时间复杂度和空间复杂度两个概念来度量算法的性能问题，二者统称为复杂度。<br><br>二、why复杂度分析<br><br>一般人习惯于用事后统计法，即将代码跑一遍，得到执行时间和占用内存的方法。不过这种做法非常具有局限性：<br><br>不同的机器环境测试的结果会有差异<br>数据本身规模会影响结果<br><br>三、how复杂度分析<br><br>1.大O复杂度表示法:算法的执行时间T(n)和每行代码的执行次数n成正比：<br>T(n) = O(f(n))T(n)=O(f(n))<br>T(n) 它表示代码执行的时间；f(n)表示这是一个公式；n表示数据规模的大小。<br><br>2.时间复杂度分析法则：<br>只关注执行次数最多的那一段代码；<br>加法法则：总复杂度取量级最大的那段代码；<br>T(n)=O(max(f(n),g(n)))<br>乘法法则：代码之间有嵌套（递归，循环等），将嵌套内外的复杂度相乘；<br>T(n)=O(f(n)*g(n))<br><br>3.常见时间复杂度<br>多项式量级<br>O（1）：常量阶，不受n影响（无循环，递归等）<br>O（n）：线性阶<br>O（logn），O（nlogn）：对数阶时间复杂度，最难分析<br>O（n^k）：次方阶<br>非多项式量级:n越大，执行效率越低<br>O(2^n)<br>O(n!)<br><br>4.空间复杂度<br>表示算法的存储空间与数据规模之间的增加关系。<br><br>四、思考<br>进行复杂度分析一步骤并不多余，在完成复杂代码的时候需要分析其整体逻辑解构，可以估算出执行效率，有助于我们写出效率更高的代码，是有助于提升自己思维能力和认知的过程。","like_count":0},{"had_liked":false,"id":32613,"user_name":"文哲","can_delete":false,"product_type":"c1","uid":1230050,"ip_address":"","ucode":"F443EEDF0567AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/e2/ca5932e1.jpg","comment_is_top":false,"comment_ctime":1539647354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539647354","product_id":100017301,"comment_content":"O(m+n) O(m*n)那里还不是很明白，所以那个例子最后结果是O(m+n)么？","like_count":0},{"had_liked":false,"id":32590,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1539617330,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1539617330","product_id":100017301,"comment_content":"我觉得不冲突，性能问题的解决本身就是一个抠细节的过程。不能说是浪费时间。","like_count":0},{"had_liked":false,"id":32440,"user_name":"CrazyGoMan","can_delete":false,"product_type":"c1","uid":1114035,"ip_address":"","ucode":"6B6FA4612B91C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/b3/a236be3c.jpg","comment_is_top":false,"comment_ctime":1539573630,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539573630","product_id":100017301,"comment_content":"我的理解是：代码的复杂度分析是一种隔绝运行环境、不同数据集、不同数据规模的执行效率评估，而性能测试是在特定运行环境、特定数据集和特定数据规模下的执行效率评估。前者是众多具体场景中的抽象分析，后者是某一具体场景中的具体分析。前者更具一般、统一的意义，后者只具备特定场景下的意义。","like_count":0},{"had_liked":false,"id":32395,"user_name":"Grey","can_delete":false,"product_type":"c1","uid":1235869,"ip_address":"","ucode":"E99B5D556524E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/9d/edf1575b.jpg","comment_is_top":false,"comment_ctime":1539564637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539564637","product_id":100017301,"comment_content":"复杂度在小规模的代码和 现在cpu性能日益渐强的形势下确实没什么关系去计较，毕竟0.1s和0.01s对于人来说都可以接受，但在大规模和硬件开发上确实大问题，在嵌入式芯片上计算速度和都和电脑的cpu相差甚远，而且内存也少的可怜，对于硬件开发真的每一点算力和内存都得省着用，这个时候计算复杂度就显得格外重要了","like_count":0},{"had_liked":false,"id":32254,"user_name":"哈哈哈哈希","can_delete":false,"product_type":"c1","uid":1156362,"ip_address":"","ucode":"8DAC2F7D9DBDD6","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/0a/3f568917.jpg","comment_is_top":false,"comment_ctime":1539500109,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539500109","product_id":100017301,"comment_content":"时间复杂度分析的几种方法：<br>    1）只关注循环次数执行得最多的一段代码<br>    2）加法法则：总复杂度 = 量级最大的那段代码的复杂度<br>    3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>总结起来就是一句话：时间复杂度就是最深层次代码的执行次数。","like_count":0},{"had_liked":false,"id":32209,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1239731,"ip_address":"","ucode":"CDE5DF80E6CDB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/b3/a7600706.jpg","comment_is_top":false,"comment_ctime":1539484866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539484866","product_id":100017301,"comment_content":"感觉不错，讲的比我看到的视频要好很多。我觉得花的值了","like_count":0},{"had_liked":false,"id":32123,"user_name":"久九酒","can_delete":false,"product_type":"c1","uid":1263742,"ip_address":"","ucode":"C600611CD5D5A0","user_header":"https://static001.geekbang.org/account/avatar/00/13/48/7e/1a680120.jpg","comment_is_top":false,"comment_ctime":1539423391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539423391","product_id":100017301,"comment_content":"我觉得，学习时间复杂度，空间复杂度的分析。并不是让我们每行代码都进行一次分析。而是学会之后，在我们写代码的过程中，就能有意识地避开复杂度太高的写法。使写出来的代码更省，更快。","like_count":0},{"had_liked":false,"id":32063,"user_name":"nick.lee","can_delete":false,"product_type":"c1","uid":1256639,"ip_address":"","ucode":"9FECCA7E546909","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/bf/f0daeae7.jpg","comment_is_top":false,"comment_ctime":1539399880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539399880","product_id":100017301,"comment_content":"以前网上看了几篇复杂度的分析，还是这次才看懂了。","like_count":0},{"had_liked":false,"id":31991,"user_name":"gesanri","can_delete":false,"product_type":"c1","uid":1121174,"ip_address":"","ucode":"AE3B97DC3ED668","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELtOO0HKrj5SI5JSlmwiaCvaF6GLiaTmf5NX88OZaO3HymTAGTeIoicBUjqzmMF6sF5raPFjuqLFibrrw/132","comment_is_top":false,"comment_ctime":1539351292,"is_pvip":false,"replies":[{"id":"11594","content":"哦哦哦 那就是logn+1哈哈 我分析的有点问题","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539401616,"ip_address":"","comment_id":31991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539351292","product_id":100017301,"comment_content":"留言里讲到存储一个二进制数，输入规模（空间复杂度）是O(logn) bit。解释是8用二进制表示是3bits，16用二进制表示是4bits，这里没太理解，8的二进制不是1000吗？8应该是4bits，16是5bits吧？当然空间复杂度确实是logn","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426600,"discussion_content":"哦哦哦 那就是logn+1哈哈 我分析的有点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539401616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31923,"user_name":"嘿哥","can_delete":false,"product_type":"c1","uid":1235766,"ip_address":"","ucode":"700EE74E62256C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIm5rlbJ4HdXPxRicS0ojotNicuplpHrMz6wHuHwrib2hKcIjC9g2qIdKIA49IehUjibwftahbJI4KDDw/132","comment_is_top":false,"comment_ctime":1539330635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539330635","product_id":100017301,"comment_content":"糟糕，高中数学音乐老师交的","like_count":0},{"had_liked":false,"id":31883,"user_name":"陈达","can_delete":false,"product_type":"c1","uid":1038901,"ip_address":"","ucode":"0BD7DA412405B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/35/c541fe8d.jpg","comment_is_top":false,"comment_ctime":1539319940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539319940","product_id":100017301,"comment_content":"我觉性能测试是最后一道大闸，我们不能因为有了性能测试就不去关注代码的复杂度。打个比方，我们不能因为现在医学发达了，就可以胡吃海喝，疯狂熬夜，让自己的身体垮掉，然后再去看病。身体是自己的，代码也是我们自己的，所以我们需要自己负责。","like_count":0},{"had_liked":false,"id":31809,"user_name":"海军上校","can_delete":false,"product_type":"c1","uid":1104290,"ip_address":"","ucode":"7B0D9EC01A3F36","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/a2/afbc447c.jpg","comment_is_top":false,"comment_ctime":1539306056,"is_pvip":false,"replies":[{"id":"11471","content":"n条语句？那要是实现确定好的 不如没法写啊 如果确定了n的大小 那时间复杂度就是O（1）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539310052,"ip_address":"","comment_id":31809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539306056","product_id":100017301,"comment_content":"请问: 假设我有一条语句～不是循环执行～而是写了n个单条语句～请问是O(1) 还是O(n) 为什么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426516,"discussion_content":"n条语句？那要是实现确定好的 不如没法写啊 如果确定了n的大小 那时间复杂度就是O（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539310052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31624,"user_name":"txsjava","can_delete":false,"product_type":"c1","uid":1182416,"ip_address":"","ucode":"B43926A31813E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/d0/ae2ea419.jpg","comment_is_top":false,"comment_ctime":1539247774,"is_pvip":false,"replies":[{"id":"11376","content":"快排就是O（nlogn）等到讲那一节课的时候再看吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539255754,"ip_address":"","comment_id":31624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539247774","product_id":100017301,"comment_content":"O(logn)能理解就是阶乘循环，但是O(nlogn)不是很理解，是不是要用代码举个例子更好。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426435,"discussion_content":"快排就是O（nlogn）等到讲那一节课的时候再看吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539255754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31582,"user_name":"abners","can_delete":false,"product_type":"c1","uid":1028463,"ip_address":"","ucode":"8819620EA699C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/6f/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1539237123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539237123","product_id":100017301,"comment_content":"从经验来看，对代码的实际性能测试无论测试用例考虑多么细致，总是会出现某些场景无法覆盖到，如果这个场景正好是生产环境上出现的，那就等于本次性能测试是很失败的；而对代码的时间、空间复杂度分析可以让我们在整体上对其有一个判断，外部环境相同的条件下，O(n)的复杂度就是会比O(m+n)要好；复杂度分析思维可以带给我们一个全新的设计视角。","like_count":0},{"had_liked":false,"id":31570,"user_name":"Felix.Wong😈 ིོ༽","can_delete":false,"product_type":"c1","uid":1241420,"ip_address":"","ucode":"033F90CE6E8AF4","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/4c/8db65c40.jpg","comment_is_top":false,"comment_ctime":1539233774,"is_pvip":false,"replies":[{"id":"11384","content":"😄 你就当不傻吧 没必要钻牛角尖","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539256516,"ip_address":"","comment_id":31570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539233774","product_id":100017301,"comment_content":"大大，先告诉我，那段代码，&quot;傻&quot;在哪里，了纠结死我了，看不出来","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426407,"discussion_content":"😄 你就当不傻吧 没必要钻牛角尖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539256516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31511,"user_name":"昵称C","can_delete":false,"product_type":"c1","uid":1234963,"ip_address":"","ucode":"1BB2D537942DC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","comment_is_top":false,"comment_ctime":1539221034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539221034","product_id":100017301,"comment_content":"评论区真是卧虎藏龙！先赞为敬！<br><br>一楼在复杂度分析和性能测试的区别上总结的很好了。<br><br>从开发中角度来看。<br><br>首先复杂度分析方法的掌握在写代码过程中会有意无意的影响自己对代码性能的思考，更容易写出良好性能代码。<br><br>其次，在性能测试之后，针对性能低效的代码优化仍然需要针对性的复杂度分析，明白底线代码复杂度高在哪里，之后才能做出针对性的优化方案。<br><br>","like_count":0},{"had_liked":false,"id":31492,"user_name":"ruwin","can_delete":false,"product_type":"c1","uid":1070024,"ip_address":"","ucode":"485A009611CCA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/c8/4dd9182a.jpg","comment_is_top":false,"comment_ctime":1539218522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539218522","product_id":100017301,"comment_content":"很棒，学习完，出来一段代码最起码从时间复杂度可以分析一下了。😉","like_count":0},{"had_liked":false,"id":31449,"user_name":"羽翼清风","can_delete":false,"product_type":"c1","uid":1240403,"ip_address":"","ucode":"F086AD7098D354","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/53/7fa3ab84.jpg","comment_is_top":false,"comment_ctime":1539182754,"is_pvip":false,"replies":[{"id":"11428","content":"加油💪","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539269891,"ip_address":"","comment_id":31449,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539182754","product_id":100017301,"comment_content":"早上看了一遍，晚上再看一遍，貌似我懂了，再看看后面的留言，收获满满啊！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426346,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539269891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31429,"user_name":"Fisher","can_delete":false,"product_type":"c1","uid":1089543,"ip_address":"","ucode":"49C0EB546971ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/07/8d91021c.jpg","comment_is_top":false,"comment_ctime":1539177991,"is_pvip":false,"replies":[{"id":"11433","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539269988,"ip_address":"","comment_id":31429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539177991","product_id":100017301,"comment_content":"    我的理解并非多次一举。<br>    如老师所讲。系统性能的评估可分为两种，一种是事前统计法，一种是事后统计法。性能测试就是事后统计法。其缺点有如下几种：<br>1、测试结果非常依赖测试环境。测试环境中服务器硬件的不同会对测试结果有很大的影响。<br>2、测试结果受数据规模的影响很大。对于同一种排序算法，有序度不同，数据规模不同，执行时间就会有很大的差别。<br>3、出现重大性能问题可重塑性较弱。性能测试是在基本架构和功能逻辑代码基本成型后对系统所做的性能分析评估，如果发现了重大的架构设计缺陷，系统重新改造的成本较大。<br>所以，我们需要一个不用依赖于环境，不用依赖于数据规模，就可以粗略估计算法执行效率的方法。或者说事前统计法---时间、空间算法复杂度分析。<br>    对于任意给定的一个问题，设计出复杂度最低的算法是在设计算法时追求的重要目标之一；而当给定的问题存在多种算法时，选择其中复杂度最低的算法是选用算法时遵循的重要准则。因此，算法的复杂度分析对算法的设计或选用具有重要的指导意义和实用价值。<br>    基于低复杂度算法的系统，对于整个系统后续的性能提升必是利在千秋。我们都应该走上追求完美算法之路。同时这也是进行自我逻辑思维训练，成就自我的好途径。<br>    同时我觉得，也不能一味追求完美低复杂度算法，应根据实际情况而论。算法服务于实际需求，一切还应以实际需求为主。在满足实际需求的情况下，对算法的复杂度应做好取舍，做好平衡。<br><br>课程笔记：<br>时间复杂度分析<br>1. 只关注循环执行次数最多的一段代码<br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>几种常见时间复杂度<br>常量阶 O(1)   指数阶 O(2^n)   对数阶 O(logn)   阶乘阶 O(n!)   线性阶 O(n)<br>线性对数阶 O(nlogn)   平方阶 O(n^2)   立方阶 O(n^3)   K次方阶 O(n^k)<br><br>复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级。其中，非多项式量级只有两个：O(2^n) 和 O(n!)。<br>时间复杂度为非多项式量级的算法问题叫作NP（Non-Deterministic Polynomial，非确定多项式）问题...<br>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。<br>常见的时间复杂度，从低阶到高阶：<br>O(1)  O(logn) O(n) O(m+n) O(m*n) O(nlogn) O(n^2)<br><br>一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。<br>空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426333,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539269988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31377,"user_name":"王楚然","can_delete":false,"product_type":"c1","uid":1238608,"ip_address":"","ucode":"E0C8184C34908E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/50/656a0012.jpg","comment_is_top":false,"comment_ctime":1539166286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539166286","product_id":100017301,"comment_content":"对数变换那里自己推导了半天才出来看来高中数学也喂了狗了。<br>不过每次看到自己答案正确的时候好友成就感。很遗憾大学时候没有看到这么通俗易懂的文章","like_count":0},{"had_liked":false,"id":31187,"user_name":"金hb.Ryan 冷空氣駕到","can_delete":false,"product_type":"c1","uid":1222233,"ip_address":"","ucode":"CAD363576696E4","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/59/1689ea0c.jpg","comment_is_top":false,"comment_ctime":1539130863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539130863","product_id":100017301,"comment_content":"性能测试和复杂度分析都有必要，两者关注的维度也有区别，一个是关注线上实际场景下的性能问题也更关注业务纬度，一个是关注理论和极端数据量下的性能问题.","like_count":0},{"had_liked":false,"id":31110,"user_name":"沃尔夫冈","can_delete":false,"product_type":"c1","uid":1239327,"ip_address":"","ucode":"F57E41C607063F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/1f/46931aef.jpg","comment_is_top":false,"comment_ctime":1539092887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539092887","product_id":100017301,"comment_content":"第一个代码最后的return句不算一个unit_time?","like_count":0},{"had_liked":false,"id":31107,"user_name":"沃尔夫冈","can_delete":false,"product_type":"c1","uid":1239327,"ip_address":"","ucode":"F57E41C607063F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/1f/46931aef.jpg","comment_is_top":false,"comment_ctime":1539092372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539092372","product_id":100017301,"comment_content":"c语言的执行速度不应该看编译器吗？","like_count":0},{"had_liked":false,"id":31089,"user_name":"随心而动","can_delete":false,"product_type":"c1","uid":1187160,"ip_address":"","ucode":"3A59D3EC728265","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/58/fb740847.jpg","comment_is_top":false,"comment_ctime":1539085898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539085898","product_id":100017301,"comment_content":"对于假设某一行代码是相同时间的这个条件，n每加1，unit_time便加1。这就是时间复杂度为O(n)的代码。其他的如O(logn)不好描述，大意就是n每增加一部分，unit_time的值才加1。执行效率就像坐标系中的斜率，要通过变化的n来看而不是具体的某一个数，还有小的数量级会被大的数量级忽略，就是这样啦！","like_count":0},{"had_liked":false,"id":31085,"user_name":"(Jet)黄仲平","can_delete":false,"product_type":"c1","uid":1244363,"ip_address":"","ucode":"2AF4F9B460795C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/cb/5e79c6ed.jpg","comment_is_top":false,"comment_ctime":1539085796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539085796","product_id":100017301,"comment_content":"<br><br>一. 引入衡量标准<br>原则：“快，省”<br>方法：数据结构和算法的核心目的是“让代码更省存储空间”，更快的执行是算法的一个非常重要的考量指标；<br>例子：事后统计法<br>事后统计法的局限性：（什么叫事后统计法？就是通过统计，监控执行结果就能求出算法执行时间与占用内存大小 ）<br>1. 依赖环境<br>2.数据规模<br>二. 衡量方法<br>原则：消除事后统计法局限性,<br>方法：使用大O复杂度表示法<br>例子：T（n）=O(f(n))<br>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比<br>f(n)是一个函数，可以为 n, n^2, ,log2(n)等<br><br><br><br>规则：<br>1. O(1)<br><br>2. O(nlogn)与O(logn) 该如何理解？<br>int f(int n) {<br>i=1;<br> while (i &lt;= n)  {<br>   i = i * 2;<br> }  <br>} --O(log2)<br><br>O(logn)的来源： O(Cf(n)) = O(f(n)) C是常量<br>----<br>i=1;<br> while (i &lt;= n)  {<br>   i = i * 3;<br> }<br>这段代码的时间复杂度为 O(log3n)。<br><br>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？<br><br>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C * log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。<br>————<br><br>如何理解O(nlogn)<br>int cal(int n) {<br>   int ret = 0; <br>   int i = 1;<br>   for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br>   } <br> } ---O(n * log2N) 嵌套调用 <br><br>3. O(m+n)、O(m*n) 因为m与n都很大，无法忽略所以用加法关系。<br><br><br><br>小结：<br>先从事后统计法的缺陷，引入复杂度分析。然后指定了三个复杂度的计算规则，分别是Max法，加法及乘法(嵌套时用到)三个规则。<br>再对时间复杂度的四个常用公式进行了针对性说明。其中要注意O(nlogn)与O(logn)的由来<br><br><br>四个函数变化率关系<br><br>还有对数的换底公式推导 loga B=logc B&#47;logc a","like_count":0},{"had_liked":false,"id":31066,"user_name":"幽幽小鬼","can_delete":false,"product_type":"c1","uid":1235784,"ip_address":"","ucode":"694104F6BEAFD7","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/48/7724eddc.jpg","comment_is_top":false,"comment_ctime":1539079187,"is_pvip":false,"replies":[{"id":"11163","content":"加油💪","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539082100,"ip_address":"","comment_id":31066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539079187","product_id":100017301,"comment_content":"国庆假期没有来上课，今天过来看看已经更新了10节课，看了时间复杂度分析第一节，老程序员表示受益匪浅","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426210,"discussion_content":"加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539082100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31057,"user_name":"Pineleen","can_delete":false,"product_type":"c1","uid":1257829,"ip_address":"","ucode":"0758FC9C7F0771","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/65/15199a06.jpg","comment_is_top":false,"comment_ctime":1539077397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539077397","product_id":100017301,"comment_content":"时间复杂度：渐进时间复杂度，表示代码执行时间随数据规模增长的变化趋势。<br>所有常熟级别的复杂度，都是O(1)<br>对于一个循环次数未知的循环，复杂度是根据数据量大小线性增长，是O(n)<br>对于同一个变量，一个循环以后，又来一个循环，代码执行了 2n次，还是线性，是O(n)<br>不同的变量，执行两次循环，因为两个变量的数量级都是未知的，所以是O(m+n)<br><br>对于嵌套的代码，代码实体的执行次数是前一层和后一层的乘积，如果两层代码有一个同样的变量n, 为O(n平方)， 如果两层取决于不同的变量，是O(m*n)<br><br>对于复杂度的表示，只取决于量级最大的那段代码的复杂度，对一个执行次数为n平方+n+10000的代码，复杂度为O(n平方)<br><br>对于while (i &lt;= n) { i = i * 2；} 这样的代码，代码执行次数为x, 则2^x = n, x= log2n， 在计算复杂度时，常熟忽略，记为O(logn)<br><br>如果一个n复杂度的代码与O(logn)进行嵌套， 则为O(nlogn)<br><br>同样的，空间复杂度全称就是渐进空间复杂度，表示数据存储空间随数据量的增长而增长。<br>复杂度从低阶到高阶：O(1)、O(logn)、O(n)、O(nlogn)、O(n^2)","like_count":0},{"had_liked":false,"id":31050,"user_name":"Lin","can_delete":false,"product_type":"c1","uid":1250742,"ip_address":"","ucode":"3F55DA9887FF89","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/b6/0e2bb711.jpg","comment_is_top":false,"comment_ctime":1539076301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539076301","product_id":100017301,"comment_content":"有必要，做时间和空间复杂度分析可以结合项目测试结果对代码进行时间和空间复杂度的优化。","like_count":0},{"had_liked":false,"id":31033,"user_name":"心雨","can_delete":false,"product_type":"c1","uid":1235461,"ip_address":"","ucode":"77E3F4FA4FBBC5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/unEFibEDYUniaAt4ekd9kIibmDWzic1kvM8OAsZEnrxYdpiamPHibJiaLyibDFsXdJqJHsM0bQaT7LxTJXaibuyxv94q1kA/132","comment_is_top":false,"comment_ctime":1539073475,"is_pvip":false,"replies":[{"id":"11169","content":"多看几遍呢？是一点都看不懂呢 还是怎样","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539082471,"ip_address":"","comment_id":31033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539073475","product_id":100017301,"comment_content":"感觉代码好抽象，看不下去怎么办","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426193,"discussion_content":"多看几遍呢？是一点都看不懂呢 还是怎样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539082471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31006,"user_name":"o°cboy","can_delete":false,"product_type":"c1","uid":1200086,"ip_address":"","ucode":"D9F18B4B16CBB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/d6/fd4794e0.jpg","comment_is_top":false,"comment_ctime":1539064051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539064051","product_id":100017301,"comment_content":"听了一遍之后，让我对前段时间看的一本数据结构的书中提到的复杂度有了一个更加感性的认识。<br>时间复杂度：衡量代码的执行效率是块还是慢。<br>空间复杂度：衡量代码在执行的过程中所占用的内存空间是大还是小。（这里让我想到我在写代码的时候，定义变量的时候，要放在循环体的外部，而不是循环内部。当然有些特殊的需求需要每次重新开辟新的的空间除外）","like_count":0},{"had_liked":false,"id":30976,"user_name":"liyghting","can_delete":false,"product_type":"c1","uid":1108970,"ip_address":"","ucode":"439794ECEEFD26","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/ea/7d00f657.jpg","comment_is_top":false,"comment_ctime":1539055707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539055707","product_id":100017301,"comment_content":"高中数学还给老师了，只能多看多思考了","like_count":0},{"had_liked":false,"id":30932,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1539049042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539049042","product_id":100017301,"comment_content":"   大O复杂度表示法 ： T(n)=O(f(n))<br><br>   T(n)表示代码执行的时间，n表示数据规模大小，f(n)表示每行代码执行的次数总和。<br>   大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模<br>   增长的变化趋势，所以也叫做渐进时间复杂度。<br>   <br>   因为大O复杂度表示法只表示一种变化趋势，所以我们只关注循环执行次数最多的一段代码，总的<br>   时间复杂度就等于量级最大的那段代码的时间复杂度，嵌套代码的复杂度等于嵌套内外代码复杂度<br>   的乘积。<br>   <br>   复杂度量级，我们可以粗略地分为两类，多项式量级和非多项式量级，非多项式量级只有两个：<br>    O(2n) 和 O(n!)，非多项式时间复杂度的算法其实是非常低效的算法。<br><br>    常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn）,O(n^2),越高阶复杂度<br>    的算法，执行效率越低。因为对数之间是可以互相转换的，我们可以把所有对数阶的时间复杂度都<br>    记为 O(logn)。<br><br>  <br><br>","like_count":0},{"had_liked":false,"id":30862,"user_name":"李很皮丶","can_delete":false,"product_type":"c1","uid":1244061,"ip_address":"","ucode":"12EE15980FC7AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/9d/f91698c9.jpg","comment_is_top":false,"comment_ctime":1539014719,"is_pvip":false,"replies":[{"id":"11107","content":"嗯嗯 学习方法值得推荐","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1539050120,"ip_address":"","comment_id":30862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539014719","product_id":100017301,"comment_content":"读一遍以后，带着疑问看大家的留言以后，再去读几遍老师的文章，收货更大！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426120,"discussion_content":"嗯嗯 学习方法值得推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539050120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30859,"user_name":"meijing0114","can_delete":false,"product_type":"c1","uid":1012416,"ip_address":"","ucode":"B349D33E2F3ECC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/c0/b09911a0.jpg","comment_is_top":false,"comment_ctime":1539013775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539013775","product_id":100017301,"comment_content":"我认为对于一些关键算法的代码 还是有必要做一些时间和空间复杂度的检查的。这个检查的目的主要是为了确定瓶颈在哪里。如果说你的瓶颈在于网络io那么对于本地算法的时间和空间复杂度的检查 其实没有太大的意义.","like_count":0},{"had_liked":false,"id":30851,"user_name":"西二旗清流","can_delete":false,"product_type":"c1","uid":1005017,"ip_address":"","ucode":"07B94F378387C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/d9/20eb9809.jpg","comment_is_top":false,"comment_ctime":1539010744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539010744","product_id":100017301,"comment_content":"在写代码的时候关注时间复杂度和空间复杂度是必须的","like_count":0},{"had_liked":false,"id":30799,"user_name":"Triple Z 💤","can_delete":false,"product_type":"c1","uid":1233998,"ip_address":"","ucode":"A6DB7C91B903CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/4e/5813df2f.jpg","comment_is_top":false,"comment_ctime":1538999788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538999788","product_id":100017301,"comment_content":"我认为，在对程序进行时间空间复杂度的分析，其实是非常必要的。因为这种分析，能够让我们粗略判断出任务规模在变大时代码运行效率的走势，使程序员能够写出更加健壮可靠的代码。而 test bench 则是对业务处理速度的一个直接评测，要真正提高处理能力，不仅仅是优化代码的时间空间复杂度，甚至还要依托体系架构进行深层次的优化才能够真正提高业务处理水平。","like_count":0},{"had_liked":false,"id":30747,"user_name":"astronaut","can_delete":false,"product_type":"c1","uid":1240839,"ip_address":"","ucode":"49B4A2E5CFD148","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/07/d7eb974f.jpg","comment_is_top":false,"comment_ctime":1538987711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538987711","product_id":100017301,"comment_content":"有个小白问题想请教，T(n)代表代码执行时间，其中n代表数据规模，那么若T(n)=O(n^2)，表示代码执行时间与代码执行次数n^2成正比，是否可以说明数据规模也与n^2成正比呢？","like_count":0},{"had_liked":false,"id":30717,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1538982246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538982246","product_id":100017301,"comment_content":"一码归一码，复杂度分析是抛开硬件层面来谈代码的执行效率，让程序猿对代码执行效率有一个感性认识，也可作性能优化的依据。而性能优化是在特定场合需要去做的一件事件，依据特定是硬件软件环境，所以二者不冲突。","like_count":0},{"had_liked":false,"id":30659,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1538966994,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538966994","product_id":100017301,"comment_content":"并不认为是多次一举，反而觉得是必不可少的一个环节。<br>我们分析的复杂度只是理论的分析，而我们进行性能测试的时候就是对我们的理论进行验证的过程。<br>因为现实中又很多不确定因素的影响。<br>理论和实践都是必不可少的一个环节。毕竟实践出真知嘛。<br>理论其实也是一种假设，假设所有的事情的其他条件完全一样。更加方便只管的看出来我们代码的复杂度。<br>总之，复杂度分析和性能测试都是必不可少的，他们是相辅相成的。而且经常进行这种分析，也会增强我们自己的编码能力，让我们的代码更加的优秀。<br>","like_count":0},{"had_liked":false,"id":30631,"user_name":"Bupt_daydayup","can_delete":false,"product_type":"c1","uid":1248375,"ip_address":"","ucode":"5E2BBE695288B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/77/d855bfb2.jpg","comment_is_top":false,"comment_ctime":1538962507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538962507","product_id":100017301,"comment_content":"其实只要在自己写代码的时候，时刻注意一下自己写的代码的复杂度，形成习惯后无所谓浪费时间了，毕竟只是粗略地估算","like_count":0},{"had_liked":false,"id":30566,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1538926741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538926741","product_id":100017301,"comment_content":"复杂度分析让我们在无需实际编码就对算法执行时间有一个感性的认识，但它描述的是一个随着数据规模增长的趋势，有时候实际场景无法相应的建模对等出来，需要实际测试，比如确定典型测试环境，测试集等","like_count":0},{"had_liked":false,"id":30532,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1538910603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538910603","product_id":100017301,"comment_content":"03 复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗<br><br>一、事后统计法的局限性<br><br>概念：在具体环境执行代码，通过统计、监控，得到算法执行的时间和占用的内存大小。<br><br>局限性、缺点：受测试环境硬件的不同、测试数据集规模的大小的影响很大。<br><br>复杂度分析不受以上因素的影响，可以粗略的估计算法的执行效率。<br><br>二、大 O 复杂度表示法<br><br>算法的执行效率：算法代码的执行时间<br><br>假设每行代码的执行时间一样，都为 unit_time，所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。大 O 表示法：<br><br>T(n) = O(f(n))<br><br>T(n) 代码执行时间，n 数据规模，f(n) 每行代码执行的次数总和。O 代码的执行时间 T(n) 与 代码执行的次数总和 f(n) 成正比。<br><br>大 O 表示法的含义：不是代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，也称为渐进时间复杂度（asymptotic time complexity），简称时间复杂度。<br><br>公式 T(n) 中只需记录一个最大量级，低阶、常量、系数三个部分不影响 T(n) 的增长趋势，所以忽略。如：<br><br>T(n) = O(2n + 2) 记录为 T(n) = O(n)，T(n) = O(2n2+2n+3) 记录为 T(n) = O(n2)  。<br><br>三、时间复杂度分析<br><br>1、只需关注循环代码执行次数最多的一段代码<br><br>2、加法法则：总复杂度等于量级最大的那段代码的复杂度<br><br>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>四、常见的复杂度分实例析<br><br>复杂度量级（按数量级递增）：多项式量级、非多项式量级<br><br>常量阶 O(1) <br><br>对数阶 O(log n)<br><br>线性阶 O(n)<br><br>线性对数阶 O(n log n)<br><br>平方阶 O(n)<br><br>指数阶 O(2n)<br><br>阶乘阶 O(n!)<br><br>NP （Non-Deterministic Polynomial）非确定多项式问题：时间复杂度为非多项式的算法问题。执行时间随数据规模 n 的增长而急剧增加，非常低效。<br><br>1、O(1)<br><br>只要代码的执行时间不随 n 的增大而增长，时间复杂度均记作 O(1)。O(1) 是常量级时间复杂度的一种表示方法，不是指只执行了一行代码。<br><br>2、O(log n)、O(n log n)<br><br>O(log n) 对数阶复杂度，与对数的底数无关（因为不同底数的对数之间可以相互转换）。<br><br>O(n log n) 线性对数阶复杂度，可以理解为 复杂度为 O(log n) 的一段代码循环执行了 n 遍。<br><br>3、O(m+n)、O(m*n)<br><br>代码复杂度由两个数据规模 m 和 n 来决定。<br><br>在事先无法评估 m 和 n 哪一个量级更大的情况下，不能简单地利用加法法则，省略其中一个。而乘法法则继续有效。<br><br>五、空间复杂度分析<br><br>渐进空间复杂度（asymptotic space complexity），表示算法的存储空间和数据规模之间的增长关系。<br><br>常见的空间复杂度 O(1)、O(n)、O(n2)，基本用不上 O(log n)、O(n log n) 对数阶复杂度。<br><br>六、课后思考<br><br>针对一段代码或者多种算法，在理论上对时间复杂度和空间复杂度分别作出分析，初步评估代码的执行效率和消耗的资源，哪种代码、算法更能满足实际应用的需要、是否有改进提升的空间；<br><br>性能测试能更好地监控、统计代码实际的执行时间和所需的存储空间，测试结果是否与时间复杂度分析、空间复杂度分析的趋势一致，综合考虑在实际场景下选择哪种算法更省更快。同时反过来也促进写出质量高的代码。","like_count":0},{"had_liked":false,"id":30410,"user_name":"毛玉娇","can_delete":false,"product_type":"c1","uid":1249192,"ip_address":"","ucode":"BC0F0FEEEAD5DD","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/a8/5bec6811.jpg","comment_is_top":false,"comment_ctime":1538831543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538831543","product_id":100017301,"comment_content":"性能分析是和机器有关，算定量分析，而算法时间空间只和数据规模有关，定性分析","like_count":0},{"had_liked":false,"id":30306,"user_name":"周平","can_delete":false,"product_type":"c1","uid":1259488,"ip_address":"","ucode":"4954DC474C4FDF","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/e0/23f288ae.jpg","comment_is_top":false,"comment_ctime":1538786879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538786879","product_id":100017301,"comment_content":"我终于懂了 O(nlogn) ，O(logn) 是怎么算出来的。<br>之前看到 树结构的查找算法，提到时间复杂度是O(logn)级别的，不知道为什么是这样。 我想，我再看到 红黑树 之类的，我就可以理解了。","like_count":0},{"had_liked":false,"id":30281,"user_name":"glbfor.gtw","can_delete":false,"product_type":"c1","uid":1225344,"ip_address":"","ucode":"20BAD3CB52366F","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/80/e9223398.jpg","comment_is_top":false,"comment_ctime":1538754215,"is_pvip":false,"replies":[{"id":"10965","content":"复杂度只是性能评估的一个手段，脱离具体的运行环境。很多留言也说了，是一种预判。代码写好之后还是要进行性能测试的，这个时候就要考虑具体的运行环境了，比如你说的多核、多线程。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838922,"ip_address":"","comment_id":30281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538754215","product_id":100017301,"comment_content":"老师晚上好，学习您的这个课程对我重新认知复杂度问题有了很大的帮助。<br>我有一个问题。单纯算法时间空间复杂度不涉及到架构，但如果把硬件架构考虑进来，把cpu核心数，算法是都是多线程的时候。这个时候，时间空间复杂度的估算会有另外一个角度的考虑吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425926,"discussion_content":"复杂度只是性能评估的一个手段，脱离具体的运行环境。很多留言也说了，是一种预判。代码写好之后还是要进行性能测试的，这个时候就要考虑具体的运行环境了，比如你说的多核、多线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30280,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1538753713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538753713","product_id":100017301,"comment_content":"复杂度: 算法执行效率和数据规模的增长关系。<br><br>时间复杂度: 取一段代码中循环次数最多的作为复杂度; 一般有<br>O（1） O（logn）O（n）O（nlogn）O（n^2）<br><br>空间复杂度: 一般有O（1）O（n）O（n^2）<br><br>思考题: 复杂度分析可能在一开始会比较耗时，可一旦熟悉后很容易能看出来，这个时候就能很快对代码进行修正。而性能测试要在编码完成后耗费一定的测试时间并且要重新构思代码逻辑，耗费的时间更多。","like_count":0},{"had_liked":false,"id":30279,"user_name":"wyq","can_delete":false,"product_type":"c1","uid":1232405,"ip_address":"","ucode":"C74995EC706AC8","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/15/fb807630.jpg","comment_is_top":false,"comment_ctime":1538753111,"is_pvip":false,"replies":[{"id":"10966","content":"哈哈，问题不笨。你说都没错。2n相对于n^2是的低阶，可以省略，表示起来就简洁多了。可以直接用O(n^2)来表示。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538838998,"ip_address":"","comment_id":30279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538753111","product_id":100017301,"comment_content":"老师低阶这个位置这么理解对么？比如为2n^2+2n+3.  相对于2n^2而言，2n就是低阶。可以忽略么。可能问题比较笨，希望老师别介意","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425925,"discussion_content":"哈哈，问题不笨。你说都没错。2n相对于n^2是的低阶，可以省略，表示起来就简洁多了。可以直接用O(n^2)来表示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538838998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30268,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1235207,"ip_address":"","ucode":"CB3D55B4011C8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/07/f477e85a.jpg","comment_is_top":false,"comment_ctime":1538750151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538750151","product_id":100017301,"comment_content":"老师写的太好了，言简意赅，本来已经忘记的东西又帮我捡了起来哈哈","like_count":0},{"had_liked":false,"id":30261,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1538746687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538746687","product_id":100017301,"comment_content":"检验问题：<br><br>思考下这段的复杂度：<br>i=2; <br>while (i &lt;= n) <br>{ <br>    i = i * i<br>}<br><br>答案 O(log(log(n))<br><br><br><br>","like_count":0},{"had_liked":false,"id":30217,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1538728833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538728833","product_id":100017301,"comment_content":"性能测试 是一个质量验证过程, 复杂度分析是一个思维和技能.  就像你盖房子 如果没点技巧 盖烂七八糟的, 验收的时候不过关, 那不是得推到重来?  浪费的时间和资源何止一星半点.    如果每个人敲代码 都没有 复杂度分析的思维. 性能测试的时候 过关的能有多少. 那你还不是得 浪费大把的事件 检查,分析重构.<br>最好的节约成本是  一次做好!","like_count":0},{"had_liked":false,"id":30214,"user_name":"oo0oo","can_delete":false,"product_type":"c1","uid":1122992,"ip_address":"","ucode":"A4DB2025E8051C","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/b0/5d96b50e.jpg","comment_is_top":false,"comment_ctime":1538727734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538727734","product_id":100017301,"comment_content":"前几天刚看完《算法》的时间复杂度分析那节，再来听这课发现老师您讲的是真的好，简洁明了","like_count":0},{"had_liked":false,"id":30187,"user_name":"sksun","can_delete":false,"product_type":"c1","uid":1112895,"ip_address":"","ucode":"6CD6B11C5184CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/3f/8c875c91.jpg","comment_is_top":false,"comment_ctime":1538718588,"is_pvip":false,"replies":[{"id":"10864","content":"不是omega。omega对应另一个符号","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538729844,"ip_address":"","comment_id":30187,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538718588","product_id":100017301,"comment_content":"刚刚看到评论说O是什么的缩写，个人更倾向于希腊文Omega的缩写！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425886,"discussion_content":"不是omega。omega对应另一个符号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538729844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30112,"user_name":"阿良","can_delete":false,"product_type":"c1","uid":1070874,"ip_address":"","ucode":"79F993EE9E2C0C","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/1a/57e13b4d.jpg","comment_is_top":false,"comment_ctime":1538667582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538667582","product_id":100017301,"comment_content":"时间复杂度，全称渐进时间复杂度，描述代码执行时间随着数据规模增长的变化趋势。因为描述的是趋势，低阶，系数，常量并不左右数据的增长规模，所以都可以忽略。<br>在分析的时候，可以用三个方法<br>- 关注执行次数最多的一段代码<br>- 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>- 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>空间复杂度<br>全称渐进空间复杂度，表示算法的存储空间和数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":30110,"user_name":"1110001","can_delete":false,"product_type":"c1","uid":1077581,"ip_address":"","ucode":"302BBE18D5C483","user_header":"","comment_is_top":false,"comment_ctime":1538666023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538666023","product_id":100017301,"comment_content":"主要知识点 <br>介绍了两种复杂度概念及计算方法<br>介绍并比较常见复杂度优劣<br>复杂度的计算方法<br><br>问题<br>不浪费<br>提供理论依据 <br>平台无关性（普遍性","like_count":0},{"had_liked":false,"id":30013,"user_name":"文哲","can_delete":false,"product_type":"c1","uid":1230050,"ip_address":"","ucode":"F443EEDF0567AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/e2/ca5932e1.jpg","comment_is_top":false,"comment_ctime":1538624113,"is_pvip":false,"replies":[{"id":"10816","content":"空间复杂度不ok吗？如果是文章说的事后分析的方法，做性能测试，应该也有一些工作做性能测试吧。我对这块也不懂，但是我百度了一篇文章，应该能解答你的问题。https:&#47;&#47;segmentfault.com&#47;q&#47;1010000005135252","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538657707,"ip_address":"","comment_id":30013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538624113","product_id":100017301,"comment_content":"js执行的时候可以统计运行的时间，但是占用的内存怎么去统计呢？求解答","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425815,"discussion_content":"空间复杂度不ok吗？如果是文章说的事后分析的方法，做性能测试，应该也有一些工作做性能测试吧。我对这块也不懂，但是我百度了一篇文章，应该能解答你的问题。https://segmentfault.com/q/1010000005135252","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538657707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30010,"user_name":"夜下凝月","can_delete":false,"product_type":"c1","uid":1256730,"ip_address":"","ucode":"247824573D25B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/1a/fcfd9872.jpg","comment_is_top":false,"comment_ctime":1538623653,"is_pvip":false,"replies":[{"id":"10819","content":"1. 第一个不是，应该是O(n)吧<br>2. 第二没看懂，跟第一个有区别吗？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538657959,"ip_address":"","comment_id":30010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538623653","product_id":100017301,"comment_content":"对于python中的迭代器，最简单的如                        a= (x for X in range(n))<br>它的时间和空间复杂度都是0(1)吗?<br>       <br>      <br>a=[ X for X in range(n) ]<br>它的空间复杂度与时间复杂度都是O(n)吗<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425812,"discussion_content":"1. 第一个不是，应该是O(n)吧\n2. 第二没看懂，跟第一个有区别吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538657959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30006,"user_name":"蠡小俊","can_delete":false,"product_type":"c1","uid":1241853,"ip_address":"","ucode":"777C81C8291CFD","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/fd/8e038ecd.jpg","comment_is_top":false,"comment_ctime":1538623002,"is_pvip":false,"replies":[{"id":"10820","content":"你说的不确定性，我还是头一次听说。不过，你非常用心，值得赞扬！你可以看看其他数据结构和算法书籍，或者自己百度一下，是否有助于你理解。或者看看跟你理解的是否相似呢！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538658110,"ip_address":"","comment_id":30006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538623002","product_id":100017301,"comment_content":"我听了两边总算开窍了，试着说一下我的想法，如果不对还请老师指正。我觉得老师您引入的一个核心概念有问题，拿时间复杂度来说，复杂度分析的其实不是随着数据规模的增长，代码执行时间的增长，而是「代码执行时间不确定性」的增长！因为就具体的执行时间而言，可能数据量小的时候一个循环的执行时长还比不过几十行常量级的时常，但是当数据量增大的时候，我们都知道循环结构的时间会变长，但是我们需要分析的是这种增长的复杂性。按照复杂度量级的分类，当数据规模逐渐增大的时候，越高量级的代码，我们越难确定它所需的执行时间，就越难分配管理资源。我认为这种随着数据规模带给系统不确定性的冲击大小才是定义和分析复杂度的核心，而不是单纯的时间或者空间占用。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425810,"discussion_content":"你说的不确定性，我还是头一次听说。不过，你非常用心，值得赞扬！你可以看看其他数据结构和算法书籍，或者自己百度一下，是否有助于你理解。或者看看跟你理解的是否相似呢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538658110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29895,"user_name":"Brighton王","can_delete":false,"product_type":"c1","uid":1235657,"ip_address":"","ucode":"4C6DF7C0191C3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/c9/ed1ac545.jpg","comment_is_top":false,"comment_ctime":1538582787,"is_pvip":false,"replies":[{"id":"10834","content":"说的没错！👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538659559,"ip_address":"","comment_id":29895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538582787","product_id":100017301,"comment_content":"不会多此一举，这样可以对代码性能做一个初步的预判，扫除一些低效代码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425764,"discussion_content":"说的没错！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538659559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29848,"user_name":"Zhaoyang","can_delete":false,"product_type":"c1","uid":1037190,"ip_address":"","ucode":"131D83AC2566D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/86/b5d72c87.jpg","comment_is_top":false,"comment_ctime":1538560876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538560876","product_id":100017301,"comment_content":"写的时候，就应该潜意识里，去选最优的策略。","like_count":0},{"had_liked":false,"id":29847,"user_name":"Zhaoyang","can_delete":false,"product_type":"c1","uid":1037190,"ip_address":"","ucode":"131D83AC2566D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/86/b5d72c87.jpg","comment_is_top":false,"comment_ctime":1538560875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538560875","product_id":100017301,"comment_content":"写的时候，就应该潜意识里，去选最优的策略。","like_count":0},{"had_liked":false,"id":29841,"user_name":"李扬","can_delete":false,"product_type":"c1","uid":1240316,"ip_address":"","ucode":"8721C20D7AB487","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/fc/4859f340.jpg","comment_is_top":false,"comment_ctime":1538558164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538558164","product_id":100017301,"comment_content":"首先根据自己的感悟回答老师提出的问题：<br>我并不觉得是复杂度分析是多此一举的事情，在我看来，程序的运行效率是果，因分多种，有硬件区别，业务数据量不同等这些不确定性因素。而复杂度分析就像是一组确定的公式，结果是效率，针对不同的场景我们可以根据复杂度做出最优选择。性能测评工具可以针对某一场景直接给出我们具体的结果，而复杂度则是控制着结果的源头，这就是区别。当然两者并不矛盾，是相辅相成的关系。<br><br>再是我对文章提炼的部分：<br>一、数据结构和算法的衡量标准(时间、空间复杂度)，掌握了分析复杂度的方法，就可以对某一算法进行评价甚至改进。<br><br>二、复杂度分析的必要性：1、硬件决定程序的运行效率，不可客观分析出算法的优劣性；2、不同数据规模，对于算法的评价不一致；<br>复杂度分析：脱离环境、业务量的限制，只针对算法本身进行分析。<br><br>三、大O复杂度表示法<br>概念：数据规模和执行时间的变化趋势。<br><br>分析方法：<br>(1)加法法则：总复杂度等于量级最大那段代码的复杂度<br>(2)乘法法则：如果嵌套，总嵌套层的变量乘积就是最终复杂度<br><br>四、常见时间复杂度<br>O(1):不与规模有关系，无论有多少代码，站在分析复杂度的角度上来说，复杂度始终为1<br>O(logn):忽略系数，只要存在对数关系的，统称为O(logn)复杂度。<br>O(m+n):当最大量级系数无法确定时，加法法则无法适用，记为O(m+n)<br><br>","like_count":0},{"had_liked":false,"id":29791,"user_name":"王三三","can_delete":false,"product_type":"c1","uid":1247243,"ip_address":"","ucode":"CB751A562D8BBA","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/0b/96d27824.jpg","comment_is_top":false,"comment_ctime":1538542708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538542708","product_id":100017301,"comment_content":"就C语言来说，单行多个三目运算，是否优于多个if判断？","like_count":0},{"had_liked":false,"id":29710,"user_name":"Air","can_delete":false,"product_type":"c1","uid":1237127,"ip_address":"","ucode":"B57C87F217F46E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/87/ba0f3889.jpg","comment_is_top":false,"comment_ctime":1538497178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538497178","product_id":100017301,"comment_content":"只会js的前端小菜一枚，这些代码勉强能看懂，老师讲的很明白，就是觉得音频语速略快，特别是用代码讲复杂度的时候，老是跟不上音频的速度来看代码和理解，希望老师这些部分稍慢些~","like_count":0},{"had_liked":false,"id":29690,"user_name":"雨中漫步","can_delete":false,"product_type":"c1","uid":1130927,"ip_address":"","ucode":"022AFC716E3CAA","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/af/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538488744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538488744","product_id":100017301,"comment_content":"时间复杂度，是代码执行效率随着数据增加的变化趋势，感觉理解这一点特别重要","like_count":0},{"had_liked":false,"id":29662,"user_name":"~记得微笑∩﹏∩","can_delete":false,"product_type":"c1","uid":1216715,"ip_address":"","ucode":"EBC383F0FB54BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/cb/72063354.jpg","comment_is_top":false,"comment_ctime":1538474577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538474577","product_id":100017301,"comment_content":"不是浪费时间，做完项目后进行性能测试，如果没有达到预期的要求，需要重新返工，而时间复杂度和空间复杂度的分析可以帮我们减少这种情况","like_count":0},{"had_liked":false,"id":29644,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1538467145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538467145","product_id":100017301,"comment_content":"应该有必要，如果 资源无限 不考虑成本，是不用 考虑 复杂度分析的，但是现实项目中 往往是 用最低的成本做好更多的事情，虽然 我很少会 评估 时间、空间 复杂度，看过 吴军老师的专栏 说 做工程项目 需要考虑 现实成本的 ，期待 老师和 同学们不同的解释。","like_count":0},{"had_liked":false,"id":29590,"user_name":"Abner S.","can_delete":false,"product_type":"c1","uid":1067876,"ip_address":"","ucode":"08D86ECD910879","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/64/77d78bd2.jpg","comment_is_top":false,"comment_ctime":1538448674,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538448674","product_id":100017301,"comment_content":"大学时头疼的课程，现在竟然能慢慢看懂了。我觉得分析复杂度很有必要，这一点和常见的数据库查询几乎差不多，数据库查询，我们除了考虑实现，更重要的是考虑它的执行效率。不同的执行计划很可能是成千上万倍的消耗甚至更多。代码考虑时间空间复杂度也是如此","like_count":0},{"had_liked":false,"id":29569,"user_name":"　　　　　　　　","can_delete":false,"product_type":"c1","uid":1131305,"ip_address":"","ucode":"F914EA5C2FDEDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/29/30a132f8.jpg","comment_is_top":false,"comment_ctime":1538444822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538444822","product_id":100017301,"comment_content":"那些符号表示有点懵啊 怎么才可以加深理解呀","like_count":0},{"had_liked":false,"id":29568,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1538444786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538444786","product_id":100017301,"comment_content":"时间复杂度的分析是不可缺少的。在码字前对选型技术或实现方法的大概对比，对比的就是效率，实现难度，可维护性。效率问题是针对该业务的数据规模来考虑的，复杂度分析可以先定性的分析哪些数据结构和算法更适用，缩小考虑范围后才代码实现需求和定量分析。<br>同时，掌握好时间复杂度分析和运用自然，会帮助我们在写代码的时候时刻考虑写的是不是垃圾代码。<br>综上，时间、空间复杂度分析是不可缺少的","like_count":0},{"had_liked":false,"id":29544,"user_name":"heliang","can_delete":false,"product_type":"c1","uid":1204188,"ip_address":"","ucode":"DEA624EF88B4C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/dc/d16e0923.jpg","comment_is_top":false,"comment_ctime":1538409819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538409819","product_id":100017301,"comment_content":"老师，时间复杂度计算公式中的g(n)应该怎么理解？谢谢","like_count":0},{"had_liked":false,"id":29525,"user_name":"健卜","can_delete":false,"product_type":"c1","uid":1026382,"ip_address":"","ucode":"C97AAE2C2B18A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/4e/866ace23.jpg","comment_is_top":false,"comment_ctime":1538403232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538403232","product_id":100017301,"comment_content":"尝试从QA的角度来分析课后的思考题：<br>1. 一般来说由QA负责的性能测试，其执行的过程会包括“建模-&gt;指标设定-&gt;数据准备-&gt;测试执行-&gt;回收数据-&gt;校验数据-&gt;计算结果”这一套完整流程，其投入成本，要远大于研发人员直接在代码中展开的性能分析和走查<br>2. 如果代码中的一个性能缺陷，可以通过代码审查的方式发现并修复。那么相比QA在性能测试中“发现-&gt;研发修复-&gt;再次重复验证”的过程，能非常有效地节省双方的工作量投入<br><br>虽然一些重要模块的性能测试，现在已经能通过“持续集成+自动化”的方式来完成，人工投入比重越来越小，但对于QA而言，我们仍然是非常建议研发人员在编码过程中能更多关注代码性能的。<br><br>本节课程对测试工作也有更多启发：<br>1. 可以从代码审计的角度触发，结合成熟框架，对研发代码的复杂度展开分析，从而更早的发现性能隐患<br>2. 可以考虑将一系列常用的性能测试方案服务化，当开发完成一个代码块的编码之后，就能方便的调用服务完成性能测试，让研发能够更加全面的展开性能评估。<br><br>","like_count":0},{"had_liked":false,"id":29517,"user_name":"张文俊","can_delete":false,"product_type":"c1","uid":1066642,"ip_address":"","ucode":"DF742759D68B0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/92/96f6cf40.jpg","comment_is_top":false,"comment_ctime":1538401444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538401444","product_id":100017301,"comment_content":"所谓磨刀不误砍柴工，如果说我们本身在写代码的时候，具有良好的算法思维，或者算法意识，那么我们的代码是经得起测试的，所以说，我们在对代码进行复杂度分析的时候，是一种事半功倍的做法，不能把所有的宝都压到性能测试上。","like_count":0},{"had_liked":false,"id":29512,"user_name":"Mr.Robot","can_delete":false,"product_type":"c1","uid":1239701,"ip_address":"","ucode":"2E1E98D109141A","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/95/fac9432e.jpg","comment_is_top":false,"comment_ctime":1538400191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538400191","product_id":100017301,"comment_content":"总结<br>一.复杂度分析：脱离现实的限制，通过计算输入规模n与执行的语句数量T的关系来推断算法的执行效率，也就是所谓的函数T(n)！例如，T(n)=3n+3，同时也可以表示成T(n)=O(n)，其中O(n)表示数量级为n的多项式族。易知，n+1,2n+3等这些多项式也可以表示成O(n)，因为它们的图形具有相似的特征！<br>二.性能分析：通过一定手段统计程序(算法的实现)的执行时间，这个时间受到很多因素影响，例如计算机的硬件，输入规模和系统环境等因素！<br>三.两者的比较：<br>1.在分析算法好坏方面，复杂度分析更加客观地衡量了一个算法的效率，忽略掉其他因素的影响；性能分析需要考虑很多客观因素的影响，如果需要得到不同算法很明显的性能差别则需要模拟足够大的输入规模，而且得到的结果不一定准确。<br>2.在时间管理方面，复杂度分析发生在编码前，能够分析出采用的最优算法，从分析到实现一步走完，从而时间成本相对较低；性能分析发生在编码后，如果一开始的算法就不是最优，最后可能需要反复重新编码从而选出最优实现，浪费了很多时间。所以，性能分析通常用在算法实现后统计执行时间，用来印证一开始的复杂度分析！","like_count":0},{"had_liked":false,"id":29498,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1538395628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538395628","product_id":100017301,"comment_content":"还是需要的，复杂度分析是不依托于平台的。对自己的代码进行复杂度分析可以使自己写出更好的代码，同时对自己的代码质量心里有数   顺便想要问下，我也自学过算法，那些思想也都懂，但是明白思想却写不出书本中的代码   应该怎样吧思想转化为代码呢","like_count":0},{"had_liked":false,"id":29493,"user_name":"目人可分😁","can_delete":false,"product_type":"c1","uid":1155558,"ip_address":"","ucode":"37487B09CCDEB8","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/e6/c0577a54.jpg","comment_is_top":false,"comment_ctime":1538394375,"is_pvip":true,"replies":[{"id":"10598","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400866,"ip_address":"","comment_id":29493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538394375","product_id":100017301,"comment_content":"时间和空间复杂度，我可以类比为古代的各派武功，怎么样评判它们的优劣呢，必须要有事实上的标准，那么在时间来看，就是天下武功为快不破，直白说就是速度快效率高的范畴了，空间复杂度犹如武功的阵法，并不是人多或者少就能简单判定好坏，其中还是要结合问题规模去审视，                           <br><br>课后问题，我看同志们答的都非常好，不外乎是一种悲观的的决策，凡事都要有一种整体的把握感。谁都不敢空口说好与坏，其实从另外一个角度讲，我认为高级人员写的代码有着一定的普适性了，在代码逻辑的实现上，都会考虑并且实现了在复杂度上有很大效率的代码，当然这是建立在团队的高度配合度和负责的态度，总体讲为了项目的稳定性，健壮性都会进行复杂度的再分析，毕竟谁都不希望项目失败","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425640,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29485,"user_name":"清风慕白云","can_delete":false,"product_type":"c1","uid":1237866,"ip_address":"","ucode":"2584AE5A07C258","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/6a/c6408b71.jpg","comment_is_top":false,"comment_ctime":1538391143,"is_pvip":false,"replies":[{"id":"10587","content":"可以这么理解","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400349,"ip_address":"","comment_id":29485,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538391143","product_id":100017301,"comment_content":"关于常量阶O(1)和线性阶O(n)的本质差别，看文中的定义，n是数据的规模，是否可以直观地理解为关于代码运行次数的变量？<br>O(1)表示只要语句块的代码执行次数是一个已知的常量，无论语句块的构成，复杂度应该都是常量阶<br>；而如果代码的执行次数是一个一元一次的表达式，那代码的复杂度就是O(n)线性阶","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425636,"discussion_content":"可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29471,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1538383951,"is_pvip":false,"replies":[{"id":"10596","content":"嗯嗯 性能测试还是有必要的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400828,"ip_address":"","comment_id":29471,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538383951","product_id":100017301,"comment_content":"最后肯定是要跑一下来看看和估算的有多少差距。。。我自己写的代码matlab和python跑出来速度都不咋一样呢。。。还有可能调用的包合不合适的问题，嘿嘿","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425625,"discussion_content":"嗯嗯 性能测试还是有必要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29469,"user_name":"devilyaos","can_delete":false,"product_type":"c1","uid":1064902,"ip_address":"","ucode":"5FE075608F03F7","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/c6/c2bf55bd.jpg","comment_is_top":false,"comment_ctime":1538383528,"is_pvip":true,"replies":[{"id":"10599","content":"哈哈 这个也是可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400905,"ip_address":"","comment_id":29469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538383528","product_id":100017301,"comment_content":"其实复杂度是评价代码性能和质量的一个标准，比如俩程序员的同一段逻辑怎么相互比较性能优劣？总不能都写好上服务器跑一下吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425624,"discussion_content":"哈哈 这个也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29460,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1538380956,"is_pvip":false,"replies":[{"id":"10601","content":"1. 不包括，IO很耗时，要单独来看了<br>2. 我表述都有点不准确，应该是正相关，不是正比，你理解没错！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538401087,"ip_address":"","comment_id":29460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538380956","product_id":100017301,"comment_content":"Q1：“从 CPU 的角度来看，每一行都执行着类似的操作：读数据－运算－写数据。”，问“运算”是指I&#47;O运算吗，还是包括它及其它的运算？<br>Q2：标红的这段话“所有代码的执行时间T(n)与每行代码的执行次数n成正比”的理解是？<br>大伙和老师帮忙看下对不对：<br>每行代码可以执行1次，也可以嵌入一个循环，这行代码就执行n次了，也可以多次嵌入循环，这行代码执行n^2 次了。所以T(n)与可以与n成正比，n^2 、n^3 、... 、n^20等成正比。有点类似n可以是n^2 or n^m or n!<br><br>Tips：各位伙伴们，Big O的书写，最好还是用大写的O来表示，输入的时候，要留意哦！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425619,"discussion_content":"1. 不包括，IO很耗时，要单独来看了\n2. 我表述都有点不准确，应该是正相关，不是正比，你理解没错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538401087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29455,"user_name":"龙恨","can_delete":false,"product_type":"c1","uid":1036107,"ip_address":"","ucode":"03F29A4BEA0072","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/4b/20e400e7.jpg","comment_is_top":false,"comment_ctime":1538378862,"is_pvip":false,"replies":[{"id":"10595","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538400772,"ip_address":"","comment_id":29455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538378862","product_id":100017301,"comment_content":"课后笔记：<br>1、影响程序执行效率的两个指标：渐进时间复杂度和渐进空间复杂度<br>2、事后统计法的缺陷：依赖执行环境、受数据规模的影响。<br>3、分析时间复杂度的方法：关注循环次数最多的指令、加法法则、乘法法则、多个规模求加法<br>4、非多项式量级的算法问题NP是非常低效的算法，有O(2n) 和 O(n!)。<br>5、渐进空间复杂度：表示算法存储空间与数据规模之间的增长关系。<br>6、时间复杂度排序：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2 )","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425616,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538400772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29438,"user_name":"Mr.钧👻","can_delete":false,"product_type":"c1","uid":1249939,"ip_address":"","ucode":"D781E030E79245","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg","comment_is_top":false,"comment_ctime":1538373311,"is_pvip":false,"replies":[{"id":"10605","content":"嗯嗯 赞","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538401372,"ip_address":"","comment_id":29438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538373311","product_id":100017301,"comment_content":"渐进式时间复杂度，空间复杂度分析，和性能测试并不冲突，而是相辅相成的。<br>复杂度分析，更多的是一种思路，能提高代码质量，提高性能的思路。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425604,"discussion_content":"嗯嗯 赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538401372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29423,"user_name":"最摇摆的鱼","can_delete":false,"product_type":"c1","uid":1255574,"ip_address":"","ucode":"DA19F4C4224719","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqgVXa8DyW0YsrdYtPNMOdGH6hfdwfjwyBPRyoc9yuS4Ml18l0kApOoOKwYkF6NlDPYpX1bVEWomw/132","comment_is_top":false,"comment_ctime":1538367179,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538367179","product_id":100017301,"comment_content":"能解释一下为什么分成多项式量级和非多项式量级吗？这两个词更具体的隐含特征是什么？查了一下没找到比较清楚的解释。","like_count":0},{"had_liked":false,"id":29422,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1538367128,"is_pvip":false,"replies":[{"id":"10610","content":"当然不是，这几个复杂度是从不同面来评价的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538401709,"ip_address":"","comment_id":29422,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538367128","product_id":100017301,"comment_content":"判断一个代码好坏，从时间复杂度来说是不是仅考虑均滩复杂度即可","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425594,"discussion_content":"当然不是，这几个复杂度是从不同面来评价的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538401709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29385,"user_name":"Ceoi Wingsam","can_delete":false,"product_type":"c1","uid":1246220,"ip_address":"","ucode":"B6426FDB4F7B28","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/0c/69c7bee2.jpg","comment_is_top":false,"comment_ctime":1538361868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538361868","product_id":100017301,"comment_content":"我觉得是做分析是有必要的 我认为身为程序员最大的成就感在于 能以少的语句描写出更为复杂的情形 在这一点上 我觉得能写出JDK的人真的很了不起 每个语句都如此精简 希望跟着老师学之后 能向他们靠近","like_count":0},{"had_liked":false,"id":29379,"user_name":"Snail","can_delete":false,"product_type":"c1","uid":1242674,"ip_address":"","ucode":"58346C4D80AA94","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/32/c9d8fd60.jpg","comment_is_top":false,"comment_ctime":1538361193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538361193","product_id":100017301,"comment_content":"文章中间那段代码:<br>for (; i &lt; n; ++i) {<br>     ret = ret + f(i);<br> }<br>的时间复杂度不是n^2吧？因为随着i的不断增大，f(i)这个函数中的循环并不是每次都是执行n次。求解答","like_count":0},{"had_liked":false,"id":29295,"user_name":"米花姐","can_delete":false,"product_type":"c1","uid":1209439,"ip_address":"","ucode":"A81A98E051C2CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/74/5f/b1655c78.jpg","comment_is_top":false,"comment_ctime":1538327824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538327824","product_id":100017301,"comment_content":"【极客时间：数据结构与算法之美】<br>【20180930】<br>同意老师观点——复杂度分析是整个算法学习的精髓。<br><br>【是什么】<br>$时间复杂度：判断代码执行效率<br>$空间复杂度：判断代码占用空间<br><br>【为什么】<br>复杂度分析思维的养成更像是珠算里的“心脑算”，这种内化能力的培养是有必要的。熟练掌握后会下意识去判断代码的复杂度，避免写出效率和空间占用不佳的代码，会逐渐的变成一种本能。因为不懂代码，此刻脑中也无法体会代码之美、之优雅如何震撼，想必懂的人感觉是不一样。<br><br>【怎么做】学习收获<br>1⃣️如何估算算法执行效率<br>大O时间复杂度表示法：T(n) = O(f(n))<br>T(n)：代码执行时间<br>n：数据规模大小<br>f(n)：每行代码执行的次数总和<br><br>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。<br><br>2⃣️如何分析时间复杂度<br>1. 只关注循环执行次数最多的一段代码<br><br>我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。<br><br>2. 加法法则：总复杂度等于量级最大的那段代码的复杂度<br><br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))). <br><br>3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)).<br><br>也就是说，<br>假设 T1(n) = O(n)，T2(n) = O(n2)，<br>则 T1(n) * T2(n) = O(n3)。<br>落实到具体的代码上，我们可以把乘法法则看成是嵌套循环。<br><br>3⃣️复杂度量级——多项式量级<br>常量阶 O(1)<br>对数阶 O(logn)<br>线性阶 O(n)<br>线性对数阶 O(nlogn)<br>平方阶 O(n^2)<br>立方阶 O(n^3)<br>K次方阶 O(n^k)<br><br>4⃣️复杂度量级——非多项式量级<br>也称为NP(Non-Deterministic Polynomial，非确定多项式)<br>指数阶 O(2^n)<br>阶乘阶 O(n!)<br><br>5⃣️空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br><br>6⃣️复杂度分析与事后统计法对比：后者非常依赖测试环境、且受数据影响很大（如：数据规模、有序度等）、标准难把控；而复杂度分析可以不利用测试数据，粗略估算代码的执行效率。<br><br>7⃣️从没有看过关于算法的书籍，工作中也鲜有涉及，真诚感谢王争老师的授课逻辑，以及留言区同学们的精彩分析。<br><br>8⃣️自己还要去回捡一下“换底公式”。","like_count":0},{"had_liked":false,"id":29279,"user_name":"冯朋举","can_delete":false,"product_type":"c1","uid":1235216,"ip_address":"","ucode":"1AA0111E68BD9E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/10/a76eee9f.jpg","comment_is_top":false,"comment_ctime":1538320779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538320779","product_id":100017301,"comment_content":"我的总结分析，写在jupyter notebook上，太长了，留言上无法全部写上。<br><br>因此，我把它们整理一下，放在我刚建没多久的个人网站上了。<br>请查看，有任何意见，欢迎批评指教！<br><br>1、数据结构与算法学习_01.数据结构与算法_基本概念+学习重点<br>      http:&#47;&#47;fengpj.top&#47;2018&#47;09&#47;30&#47;01&#47;<br>2、数据结构与算法学习_02.复杂度分析-上篇<br>     http:&#47;&#47;fengpj.top&#47;2018&#47;09&#47;30&#47;02&#47;<br>","like_count":0},{"had_liked":false,"id":29276,"user_name":"冯朋举","can_delete":false,"product_type":"c1","uid":1235216,"ip_address":"","ucode":"1AA0111E68BD9E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/10/a76eee9f.jpg","comment_is_top":false,"comment_ctime":1538318116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538318116","product_id":100017301,"comment_content":"4. 时间复杂度分析<br><br>    如何分析一段代码的时间复杂度？<br>    <br>      方法1. 只关注循环执行次数最多的一段代码。<br>             <br>                 大O这种复杂度表示方法只是表示一种变化趋势，通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可；<br>              <br>                 在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可；<br>                   <br>                 这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。<br>            <br>          举例说明<br>               <br>            1 int cal(int n) {<br>            2   int sum = 0;<br>            3   int i = 1;<br>            4   for (; i &lt;= n; ++i) {<br>            5     sum = sum + i;<br>            6   }<br>            7   return sum;<br>            8 }<br><br>             其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以，对于复杂度并没有影响。<br>             循环执行次数最多的是第 4、5 行代码，所以，这块代码要重点分析。<br>             这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n) 。<br>             <br>                <br>      方法2. 加法法则：总复杂度等于量级最大的那段代码的复杂度。<br>               <br>         <br>          这个代码分为三部分，分别是求 sum_1、sum_2、sum_3.<br>          分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。<br>          sum_1 循环了 100 次，这段代码循环执行了 100 次，一个常量的执行时间，跟 n 的规模无关。<br>                  注：即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。<br><br>          sum_2 循环了 n  次，记为  O(n)  。<br>          sum_3 循环了 n2 次，记为  O(n2) 。<br><br>          综合这三段代码的时间复杂度，取其中最大的量级，整段代码的时间复杂度就为 O(n2)。<br>          总的时间复杂度 等于 量级最大的那段代码的时间复杂度。<br><br>          如果 T1(n) = O(f(n))，T2(n) = O(g(n))，那么 T(n) = T1(n)+T2(n) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n))).<br><br><br>        <br>      方法3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br><br>            <br>             如果 T1(n) = O(f(n))，T2(n) = O(g(n))，那么 T(n) = T1(n)*T2(n) = O(f(n))*O(g(n)) = O(f(n)*g(n)).<br>             假设 T1(n) = O(n)，T2(n) = O(n2)，则 T1(n) * T2(n) = O(n3)。<br>                落实到具体的代码上，把乘法法则看成是嵌套循环。<br><br>     代码分析：单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)；<br>               但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)；<br>               所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n2)。<br><br><br>     复杂度分析，关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。<br><br>","like_count":0},{"had_liked":false,"id":29235,"user_name":"未来已来","can_delete":false,"product_type":"c1","uid":1187130,"ip_address":"","ucode":"3A21ACFD53CB9C","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/3a/cdf9c55f.jpg","comment_is_top":false,"comment_ctime":1538296209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538296209","product_id":100017301,"comment_content":"课程里面老师举的一个 “一般人” 不用这么做的例子，恰恰是我们大学一开始学编程写的最多的😂","like_count":0},{"had_liked":false,"id":29233,"user_name":"Marco","can_delete":false,"product_type":"c1","uid":1100706,"ip_address":"","ucode":"56832AA804EF10","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/a2/e21abfee.jpg","comment_is_top":false,"comment_ctime":1538295793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538295793","product_id":100017301,"comment_content":"终于明白怎么算O了！！！","like_count":0},{"had_liked":false,"id":29219,"user_name":"陈利津","can_delete":false,"product_type":"c1","uid":1131495,"ip_address":"","ucode":"E96420B068EDFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/e7/c4b97eb7.jpg","comment_is_top":false,"comment_ctime":1538291374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538291374","product_id":100017301,"comment_content":"讲的很透彻，系统。终于搞明白了时间复杂度，谢谢老师。继续加油。","like_count":0},{"had_liked":false,"id":29209,"user_name":"Andy_gqjiang","can_delete":false,"product_type":"c1","uid":1127537,"ip_address":"","ucode":"43BE2D5266BEAA","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/71/554e5f64.jpg","comment_is_top":false,"comment_ctime":1538289772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538289772","product_id":100017301,"comment_content":"关于 O(m+n)与O(m*n)有点不理解，请老师释义：<br>代码：<br>int cal(int m,int n) {<br>    int sum1 = 0;<br>    int i = 1;<br>    for (; i&lt;m, ++i) {<br>        sum1 = sum1 + i;<br>    }<br>    int sum2 = 0;<br>    int j = 1;<br>    for (; j&lt;n; ++j) {<br>        for (; j &lt; m; ++j) {<br>            sum2 = sum2 + j;<br>        }<br>    }<br>    return sum1 + sum2;<br>}<br><br>对于上面代码的时间复杂度是  O(m*n) 还是  O(m*n) 还是 O(m+m*n) ？","like_count":0},{"had_liked":false,"id":29192,"user_name":"韩蓄 Josh","can_delete":false,"product_type":"c1","uid":1003135,"ip_address":"","ucode":"760982304A2A7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/7f/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538280669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538280669","product_id":100017301,"comment_content":"我们之所以进行复杂度分析的练习，不是对每个代码都进行分析，而是在大量练习实践之后，在设计代码结构的时候就把复杂度考虑上，实现算法思想的内化","like_count":0},{"had_liked":false,"id":29191,"user_name":"youngyang","can_delete":false,"product_type":"c1","uid":1234578,"ip_address":"","ucode":"2125E9B4FEA59D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/92/efaab489.jpg","comment_is_top":false,"comment_ctime":1538280440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538280440","product_id":100017301,"comment_content":"代码时间复杂度，空间复杂度是在写代码阶段的一种分析，在写代码阶段就避免一部分在测试时性能不足的问题，也为后来提升性能提前做一个铺垫。我要从现在开始培养这种习惯，深入到编程中，为写出更优秀的代码努力，加油！","like_count":0},{"had_liked":false,"id":29183,"user_name":"fine","can_delete":false,"product_type":"c1","uid":1235314,"ip_address":"","ucode":"112722453A2630","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/72/7846b462.jpg","comment_is_top":false,"comment_ctime":1538278156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538278156","product_id":100017301,"comment_content":"第二个例题起初我也没搞明白为什么是2n^2+2n+3，不是n^2+2n+3？<br>后来想明白了，原来一直没get到for循环中的自增运算也算在执行次数中，把自增式稍微换下位置可能更容易理解啦。<br>--------------------------------------<br>1    int cat(int n) {<br>2        int sum = 0;<br>3        int i = 1;<br>4        int j = 1;<br>5        for(;i &lt;= n;) {<br>6            j = 1;<br>7            i += 1;<br>8            for(;j &lt;= n;) {<br>9                sum = sum + i * j;<br>10               j += 1;<br>11           }<br>12        }<br>13    }<br>--------------------------------------<br>2~4行：执行 3 次<br>5~12行：执行次数为 n 乘以 (6~11)行执行次数，<br>              即执行 n * (1 + 1 + n * 2) 次<br><br>所以，总的执行次数应为 2n^2+2n+3 次。<br>","like_count":0},{"had_liked":false,"id":29170,"user_name":"AsuraL","can_delete":false,"product_type":"c1","uid":1026977,"ip_address":"","ucode":"F62A9DC095DEB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/a1/1032b70e.jpg","comment_is_top":false,"comment_ctime":1538276809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538276809","product_id":100017301,"comment_content":"课后思考：<br>性能测试在我理解是建立在实际运行环境上的测试，更多的是为了测试出来当前系统的瓶颈在哪里，从全局考虑，更多的性能优化优先是从项目结构和硬件配合来解决的。作为coder，空间复杂度，时间复杂度检查是为了检查自己所编写的代码在性能上瓶颈范围在哪里？是否可优化，是从代码层次或者说从内部一点点来解决，是个漫长的过程，其次与其他模块或者业务关联后会产生怎样的复杂度提升？是否会产生1+1&gt;2的性能损耗？这也许才是为什么作为开发者者需要自测自检的原因。","like_count":0},{"had_liked":false,"id":29163,"user_name":"MJ","can_delete":false,"product_type":"c1","uid":1252474,"ip_address":"","ucode":"531BB1F9F25555","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/7a/85c059d9.jpg","comment_is_top":false,"comment_ctime":1538276472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538276472","product_id":100017301,"comment_content":"前两天笔试的时候考到这样一种题，写出了以下这种代码，如何去分析它的复杂度呢？从数据结构与算法解决程序执行效率的角度，想问一下有没有别的更好更快的方法来实现？<br>        int num = 1;\r<br>        boolean flag = true;\r<br>        while(flag){\r<br>            int num2 = 7 * num;\r<br>            if(num2 % 2 == 1 &amp;&amp; num2 % 3 == 2 &amp;&amp; num2 % 4 == 3 &amp;&amp; num2 % 5 == 4\r<br>                    &amp;&amp; num2 % 6 == 5){\r<br>                System.out.println(num2);\r<br>                flag = false;\r<br>            }\r<br>            num++;\r<br>        }<br>","like_count":0},{"had_liked":false,"id":29156,"user_name":"春水碧于天","can_delete":false,"product_type":"c1","uid":1142043,"ip_address":"","ucode":"82D3294C6261BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/1b/17709fe1.jpg","comment_is_top":false,"comment_ctime":1538275986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538275986","product_id":100017301,"comment_content":"&quot;这里我要再强调一下，即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。当 n 无限大的时候，就可以忽略。&quot;<br><br>“当n无限大的时候就可以忽略”。老师，我对这段话不是太理解，是不是在表述，尽管n是一个无限大的数，但只要是一个具体的数时，就可以将其忽略？","like_count":0},{"had_liked":false,"id":29143,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":1004481,"ip_address":"","ucode":"F56D9D1DE892D8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/c1/34bb9b24.jpg","comment_is_top":false,"comment_ctime":1538275003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538275003","product_id":100017301,"comment_content":"疑问：在编程的时候，根据复杂度分析的思维，考虑进行编程，在实际运行过程中，可能效率没有那么快，此时是不是需要进行程序逻辑上的变动？","like_count":0},{"had_liked":false,"id":29135,"user_name":"心灵捕手","can_delete":false,"product_type":"c1","uid":1232527,"ip_address":"","ucode":"6D0BC463A000C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/8f/6daf02db.jpg","comment_is_top":false,"comment_ctime":1538273117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538273117","product_id":100017301,"comment_content":"先看上十遍再去总结，这次必须啃下去，加油小伙伴!","like_count":0},{"had_liked":false,"id":29127,"user_name":"1‰","can_delete":false,"product_type":"c1","uid":1237086,"ip_address":"","ucode":"220A9F2CDCF697","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/5e/87b47b4a.jpg","comment_is_top":false,"comment_ctime":1538272037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538272037","product_id":100017301,"comment_content":"时间复杂度。空间复杂度，都是为了查看代码的性能，代码执行时间久，画面出来缓慢，给用户的体验感就越不好","like_count":0},{"had_liked":false,"id":29091,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1538267179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538267179","product_id":100017301,"comment_content":"老师写的真好，每个细节都交代清楚，不会出现中间环节模糊跳过的情况，期待后续文章","like_count":0},{"had_liked":false,"id":29089,"user_name":"nuo-promise","can_delete":false,"product_type":"c1","uid":1116668,"ip_address":"","ucode":"39C48245330A35","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fc/6f53d426.jpg","comment_is_top":false,"comment_ctime":1538266771,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1538266771","product_id":100017301,"comment_content":"我觉得渐进式 时间空间复杂度分析是有必要的，在一个项目上线之前 分析完时间空间复杂度之后 我们可以很清晰的知道 在什么的硬件环境下 和数据量达到什么的水平时候 我们的软件 就达到了瓶颈，能给我们一个参考性的理论基础，只有对你的软件了解的很透彻 那么它的运行状态才能被我们掌控，那么复杂度分析便是我们一个把控对系统要求的基础","like_count":0},{"had_liked":false,"id":29080,"user_name":"Bolin","can_delete":false,"product_type":"c1","uid":1206489,"ip_address":"","ucode":"6A0AC519030215","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/d9/7e5ca3ca.jpg","comment_is_top":false,"comment_ctime":1538265286,"is_pvip":true,"replies":[{"id":"10465","content":"时间 空间复杂度 一个评价的是执行时间 一个评价的空间占用 没有直接的关系的 也不存在比较 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538271166,"ip_address":"","comment_id":29080,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538265286","product_id":100017301,"comment_content":"老师假设一段代码的时间复杂度&gt;空间复杂度，优化后，空间复杂度上升&gt;时间复杂度。这个时候通过是否就应该提升硬件，比如加内存这样。想问下老师，实际情况下时间复杂度和空间复杂度是对于效率是否有一个比例关系。例如效率=时间复杂度*2+空间复杂度*1。还请老师帮忙解答下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425486,"discussion_content":"时间 空间复杂度 一个评价的是执行时间 一个评价的空间占用 没有直接的关系的 也不存在比较 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538271166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29076,"user_name":"Nirvanaliu","can_delete":false,"product_type":"c1","uid":1255092,"ip_address":"","ucode":"A2576845D5A18E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELVTictrUd4I3icvCtoibG2WibaiaILSxj0TAXvk27evBR6nfnYuEqIfmfW6pRl42IibcZyiaoqrXqDnzymw/132","comment_is_top":false,"comment_ctime":1538264215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538264215","product_id":100017301,"comment_content":"文章结构:<br>1．复杂度：时间+空间复杂度分析，复杂度分析是整个算法的精髓，千万不要忽视<br>2．为什么需要复杂度分析<br>\t1）测试结果依赖测试环境<br>\t2）测试结果受数据规模影响较大<br>3．大O复杂度表示法<br>\t引入求1.2.3.4…n的累加和。估算代码的执行时间：（2n+2）* unit_time<br>\t引入嵌套循环代码: 估算代码的执行时间: (3+2n+2n^2) * unit_time<br>\t得出:所有代码的执行时间T（n）与每行代码的执行次数n成正比<br>T(n) = O(f(n))<br>\t大O时间复杂度表示法，表示的是代码执行时间随数据规模增长的变化趋势，所以也叫做渐进时间复杂度。<br>4．时间复杂度分析三种方法<br>\t1）只管柱循环执行次数最多的一段代码<br>\t2）加法法则:总复杂度等于量级最大的那段代码复杂度<br>\t\tI．代码中只要涉及循环，虽然次数是10000次、100000次，只要是一个已知数，就与n无关，因为时间复杂度表示法，是代码执行时间随数据规模增长的变化趋势。<br>\t\tII．T1(n) =O(f(n)) T2(n) = O(g(n)) 那么 T(n) = T1(n)+T2(n) = max(O(f(n))，O(g(n))) = O(max(f(n),g(n)))<br>\t3) 乘法法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>5. 几种常见时间复杂度分析实例<br>\t1）O(1) → O(logn) → O(n) → O(nlogn) → O(n^k) → O(2^n) → O(n^k) →O(n!)<br>\t\t复杂度量级：多项式阶 和 非多项式阶 O(2^n) O(n！) 非多项式阶，不展开讲<br> \t2）O(1) 常量级复杂度，只要代码的执行时间不随n的增大而增大，就是常量级复杂度<br>\t3）O(logn) O(nlogn)<br>\t\t通过介绍 2^x = n 介绍 得到x = log2 N 所以复杂度为O(log2n)，实际上可以忽略底数，直接记为 O(logn)<br>\t\t原因：对数公式 log3 n = log3 2 * log2 n → O(log3 n) = O(C*log2 n) 所以在对数时间复杂度表示方法里，我们忽略底，统一表示为O（logn）。同理可理解O(nlogn)。<br>\t4) O(m+n)、O(m*n)<br>\t\t引入代码中 有两个 m级 n级 的代码进行介绍<br>6. 空间复杂度<br>\t对比时间复杂度。时间复杂度：算法的执行时间与数据规模之间的增长关系。<br>\t\t\t\t\t空间复杂度：算法的存储空间与数据规模之间的增长关系。<br>","like_count":0},{"had_liked":false,"id":29068,"user_name":"ybw","can_delete":false,"product_type":"c1","uid":1256960,"ip_address":"","ucode":"EFB47D00F5CF33","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/00/dbe74eec.jpg","comment_is_top":false,"comment_ctime":1538257090,"is_pvip":false,"replies":[{"id":"10470","content":"如果理解不了 也不着急 等到讲到字符串匹配那一节我们会讲到","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538271641,"ip_address":"","comment_id":29068,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538257090","product_id":100017301,"comment_content":"O m+n 那里为什么说m.n的量级不确定？有点理解不了，望举具体事例","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425483,"discussion_content":"如果理解不了 也不着急 等到讲到字符串匹配那一节我们会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538271641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29046,"user_name":"卖藥郎","can_delete":false,"product_type":"c1","uid":1231829,"ip_address":"","ucode":"0539EF1D335918","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/d5/fab32cf7.jpg","comment_is_top":false,"comment_ctime":1538235238,"is_pvip":false,"replies":[{"id":"10476","content":"这个要具体分析啊 没法很笼统的讲哦","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538272110,"ip_address":"","comment_id":29046,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538235238","product_id":100017301,"comment_content":"所以递归n个i&lt;=n的循环时间复杂度是O(n的n次幂)?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425474,"discussion_content":"这个要具体分析啊 没法很笼统的讲哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538272110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29038,"user_name":"攻城狮","can_delete":false,"product_type":"c1","uid":1236428,"ip_address":"","ucode":"D65B007E428CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/cc/4d1c1a77.jpg","comment_is_top":false,"comment_ctime":1538232983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538232983","product_id":100017301,"comment_content":"我是初学者，上面的代码都能用Python跑吗？","like_count":0},{"had_liked":false,"id":29037,"user_name":"灰机。","can_delete":false,"product_type":"c1","uid":1168534,"ip_address":"","ucode":"E4CF629C836901","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/96/b257de7f.jpg","comment_is_top":false,"comment_ctime":1538232835,"is_pvip":false,"replies":[{"id":"10477","content":"不适合 如果非得要套用公式的话 快排的时间复杂度是通过加法法则计算来的。我们在排序那节会讲到。如何计算快排的时间复杂度。到时候你不理解再留言吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538272339,"ip_address":"","comment_id":29037,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538232835","product_id":100017301,"comment_content":"争哥，您好，我是个小菜，我有个问题是这样的，快速排序的时间复杂度是O（nlogn），这种如果使用递归，也适用您说的乘法法则么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425469,"discussion_content":"不适合 如果非得要套用公式的话 快排的时间复杂度是通过加法法则计算来的。我们在排序那节会讲到。如何计算快排的时间复杂度。到时候你不理解再留言吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538272339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29036,"user_name":"攻城狮","can_delete":false,"product_type":"c1","uid":1236428,"ip_address":"","ucode":"D65B007E428CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/cc/4d1c1a77.jpg","comment_is_top":false,"comment_ctime":1538232748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538232748","product_id":100017301,"comment_content":"1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。<br>二、为什么要进行复杂度分析？<br>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。<br>三、如何进行复杂度分析？<br>1.大O表示法<br>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。<br>2.复杂度分析法则<br>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。<br>四、常用的复杂度级别？<br>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）<br>五、如何掌握好复杂度分析方法？<br>复杂度分析关键在于多练，所谓孰能生巧。","like_count":0},{"had_liked":false,"id":29032,"user_name":"Action","can_delete":false,"product_type":"c1","uid":1075875,"ip_address":"","ucode":"8C2B0F35A0347E","user_header":"https://static001.geekbang.org/account/avatar/00/10/6a/a3/befb775f.jpg","comment_is_top":false,"comment_ctime":1538230757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538230757","product_id":100017301,"comment_content":"第三章<br>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n2)。<br><br>问题：为什么说2n不影响增长趋势啊，n越大 5、6行的代码不就是执行得越多此次吗？为什么可以忽略","like_count":0},{"had_liked":false,"id":29027,"user_name":"苏上","can_delete":false,"product_type":"c1","uid":1078021,"ip_address":"","ucode":"1BF95E16FE3EFD","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/05/84d50eb1.jpg","comment_is_top":false,"comment_ctime":1538229058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538229058","product_id":100017301,"comment_content":"总结：<br>一、时间复杂度（又称渐进时间复杂度）<br>1、 定义：算法的执行时间与数据规模之间的增长关系<br>2、表示：大 O 表示法 <br>                T(n) = O(f(n)）<br>                所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比<br>3、三个分析方法：<br>     （1）只关注循环执行次数最多的一段代码<br>       (2)  加法法则：总复杂度等于量级最大的那段代码的复杂度<br>                如果 T1(n)=O(f(n))，T2(n)=O(g(n))<br>                那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))<br>       (3) 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>               如果 T1(n)=O(f(n))，T2(n)=O(g(n))<br>              那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))<br>4、常见时间复杂度量级（按数量级递增）<br>   （1） 多项式时间复杂度量级：<br>        常量阶 O(1)<br>        线性阶 O(n)<br>        对数阶 O(logn)<br>        线性对数阶 O(nlogn)<br>        平方阶 O(n2 )、立方阶O(n3 )......K次方阶O(nK )<br>    （2）非多项式时间复杂度量级：<br>          O(2n) <br>          O(n!)<br>    （3）几种常见多项式时间复杂度：<br>            O(1)<br>            O(logn)、O(nlogn)<br>            O(m+n)、O(m*n)（m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n谁的量级大）<br>二、空间复杂度（又称渐进空间复杂度）<br>1、 定义：表示算法的存储空间与数据规模之间的增长关系。<br>2、常见的空间复杂度就是 O(1)、O(n)、O(n2 )<br><br>PS:在实际项目开发时，常会忽略算法复杂度分析，或许因为电脑配置高，又或许因为性能要求不高，或许因为开发时间赶。如果要成为合格程序员，就必须要求自己，扎实基本功。不积跬步,无以至千里。<br><br><br><br>","like_count":0},{"had_liked":false,"id":29026,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1538228973,"is_pvip":false,"replies":[{"id":"10478","content":"1.为啥啊<br>2. 这个后面会讲到 先别急<br>3.这个硬要分析的话 就是O（n）n表示块的个数","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538272714,"ip_address":"","comment_id":29026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538228973","product_id":100017301,"comment_content":"1, 则 T1(n) * T2(n) = O(n3)。应该为则 T1(n) * T2(n) = O(n2）吧？<br>2，如何理解时间换空间，空间换时间？<br>3，如果循环的是一个非结构化数据，如何计算O呢？比如：<br>i = getTheFirstBlock(v);<br>while(i ){<br>       play(i);<br>       i = getTheNextBlock(v);<br>}<br>v ：视频文件对象<br>getTheFirstBlock：获得v中的第一个文件块<br>getTheNextBlock：获得v中的下一个文件块<br>while(i ):判断i不是结尾文件块","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425467,"discussion_content":"1.为啥啊\n2. 这个后面会讲到 先别急\n3.这个硬要分析的话 就是O（n）n表示块的个数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538272714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29002,"user_name":"shibor_","can_delete":false,"product_type":"c1","uid":1230159,"ip_address":"","ucode":"55E39A0FB9008F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/4f/e7c29642.jpg","comment_is_top":false,"comment_ctime":1538220919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538220919","product_id":100017301,"comment_content":"多项式和非多项式的概念都忘了...果然毕业太久了，都还给老师了","like_count":0},{"had_liked":false,"id":28973,"user_name":"意无尽","can_delete":false,"product_type":"c1","uid":1234489,"ip_address":"","ucode":"DA179626C46B81","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/39/6b45878d.jpg","comment_is_top":false,"comment_ctime":1538211820,"is_pvip":false,"replies":[{"id":"10428","content":"总结的很用心 赞","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538216123,"ip_address":"","comment_id":28973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538211820","product_id":100017301,"comment_content":"我去~竟然能看懂，之前担心看不懂的，哈哈，看来是我多虑了，希望后面也能依旧如此！<br>来个总结：<br>1、什么是复杂度分析？<br>复杂度分析分为时间复杂度分析和空间复杂度分析，都用于分析所编写算法代码的执行效率。<br><br>2、为什么要进行复杂度分析？<br>尽管有事后统计法，但是该方法具有很大的局限性，即：测试结果非常依赖测试环境；测试结果受数据规模的影响很大。因此，需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法，该方法就是复杂度分析方法。<br><br>3、怎么用复杂度方法进行分析？<br>（1）大 O 复杂度表示法<br>T(n) = O( f(n) )<br>T(n) 表示代码执行的时间，f(n) 表示每行代码执行的次数总和。<br>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势。<br>（2）时间复杂度分析<br>1) 只关注循环执行次数最多的一段代码<br>忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级。<br>2) 加法法则：总复杂度等于量级最大的那段代码的复杂度<br>总的时间复杂度就等于量级最大的那段代码的时间复杂度。<br>3) 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>可以把乘法法则看成是嵌套循环。<br>4) 几种常见时间复杂度<br>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。如：O(1)（常量级）、O(logn)、O(nlogn)（对数阶）、O(n)（线性阶）、O(n^k)（k次方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。如：O(2^n)（指数阶）、O(n ! )（阶乘阶）<br>（3）空间复杂度分析<br>算法的存储空间与数据规模之间的增长关系。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425450,"discussion_content":"总结的很用心 赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538216123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28972,"user_name":"真宰","can_delete":false,"product_type":"c1","uid":1244204,"ip_address":"","ucode":"A0B01ED64A36CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/2c/a3b38f8e.jpg","comment_is_top":false,"comment_ctime":1538211811,"is_pvip":false,"replies":[{"id":"10429","content":"我可以单独再写篇文章讲递归复杂度分析。稍等一段时间","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538216169,"ip_address":"","comment_id":28972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538211811","product_id":100017301,"comment_content":"老师，您好，循环的复杂度比价好计算，但是很多算法有迭代实现，同时也有递归实现，递归实现怎么评估算法复杂度呢？~~","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425449,"discussion_content":"我可以单独再写篇文章讲递归复杂度分析。稍等一段时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538216169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28956,"user_name":"Quan","can_delete":false,"product_type":"c1","uid":1100503,"ip_address":"","ucode":"1DA6D8A5FCE363","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/d7/ee885390.jpg","comment_is_top":false,"comment_ctime":1538206121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538206121","product_id":100017301,"comment_content":"前面老师讲了，做了性能测试也不一定准确，会有局限性。<br>至于需不需要每段代码都分析其时间、空间复杂度，我觉得需要。可能前期因为不熟练需要花费的时间多一点，但是熟练后用不了多长时间了，花这点时间上线一段靠谱的代码，值得～","like_count":0},{"had_liked":false,"id":28954,"user_name":"霸王龙","can_delete":false,"product_type":"c1","uid":1240386,"ip_address":"","ucode":"CFA3FECED111CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/42/94d45ca8.jpg","comment_is_top":false,"comment_ctime":1538205900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538205900","product_id":100017301,"comment_content":"并不是多此一举的，事前分析一下复杂度不光能锻炼我自己的代码水平，对于事后返工的影响也会减少","like_count":0},{"had_liked":false,"id":28947,"user_name":"小小","can_delete":false,"product_type":"c1","uid":1245786,"ip_address":"","ucode":"0122EC95A8AC69","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/5a/3a0daac2.jpg","comment_is_top":false,"comment_ctime":1538204491,"is_pvip":false,"replies":[{"id":"10432","content":"复杂度分析都是写代码的时候顺便做了 很多时候都是无意识的 就像打字一样 你也不会感觉到a键在哪里 b键在哪里","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538218003,"ip_address":"","comment_id":28947,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538204491","product_id":100017301,"comment_content":"为啥我公司项目开发结束后，只对性能进行测试，从来没有对时间复杂度和空间复杂度进行分析。另外，老师讲的真的太好了，我竟然都看懂了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425439,"discussion_content":"复杂度分析都是写代码的时候顺便做了 很多时候都是无意识的 就像打字一样 你也不会感觉到a键在哪里 b键在哪里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538218003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28914,"user_name":"Yuki","can_delete":false,"product_type":"c1","uid":1236951,"ip_address":"","ucode":"77215655E0A584","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/d7/ee3da208.jpg","comment_is_top":false,"comment_ctime":1538194017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538194017","product_id":100017301,"comment_content":"2n2+2n+3正解。因为每次循环都要执行++i和++j,每次循环执行的语句个数×循环次数＝执行时间<br>","like_count":0},{"had_liked":false,"id":28911,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1538193403,"is_pvip":false,"replies":[{"id":"10441","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219193,"ip_address":"","comment_id":28911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538193403","product_id":100017301,"comment_content":"学习反馈：<br># 为什么需要复杂度分析<br>数据结构与算法解决的问题是**如何让代码执行得更快和更省空间**。<br>事后统计法可以描述一个算法的效率，但非常有局限性。测试结果受当时的测试环境以及数据规模影响较大。而复杂度分析可以可以对一个算法的执行效率有一个粗略的认识。对自己的编码有指导作用。<br># 怎么分析复杂度<br>大O表示法<br>大O复杂度是指代码执行的时间或者空间随着数据规模增长的变化趋势。因此它有两个重要的点：<br>1、数据规模<br>2、变化趋势<br>大O复杂度跟这两个因素有关，因为数据规模的增长引起执行时间或者空间的变化趋势。<br>## 时间复杂度分析方法<br>1、关注循环次数最多的代码<br>2、加法法则。有多个循环，则把各个循环的复杂度相加，取复杂度最大的量级<br>3、乘法法则。嵌套循环、递归等用乘法把各个复杂度相乘。<br>### 常见的时间复杂度<br>常量阶O(1)<br>对数阶O(logn)<br>线性阶O(n)<br>线性对数阶(nlogn)<br>平方阶(logn^2)<br>立方阶(logn^3)<br>k次方阶(logn^k)<br>指数阶(2^n)<br>阶乘阶(n!)<br>### 空间复杂度<br>空间复杂度分析比较简单，表示算法的存储空间随数据规模增长的变化趋势。常见的空间复杂度有：<br>O(1)、O(n)、O(n^2)<br># 平时要注重多训练，才能掌握算法复杂度的分析<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425418,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28908,"user_name":"翰蓝云天","can_delete":false,"product_type":"c1","uid":1140127,"ip_address":"","ucode":"EED91F9D33137D","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/9f/61dfb8f1.jpg","comment_is_top":false,"comment_ctime":1538192058,"is_pvip":false,"replies":[{"id":"10442","content":"1. 这个成立的前提是针对同一个问题，不同的算法，一个是O(m+n)，一个是O(m)，这个时候成立。否则就么有比较的意义。<br>2. 可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219312,"ip_address":"","comment_id":28908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538192058","product_id":100017301,"comment_content":"常见复杂度量级<br>\t多项式量级：O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^k) <br>\t非多项式量级：O(2^n)&lt;O(n!) ,效率低、不常用<br>\t<br>时间复杂度：执行时间与数据规模的增长关系<br>空间复杂度：占用存储空间与数据规模的增长关系，常见的就是（O(1)&#47;O(n)&#47;O(n^2)）<br>O(logn):i的取值为等比数列时<br>O(m+n):有2个数据规模，不能省略其中一个 <br><br>请问老师  O(m+n)&gt;O(m) 一定成立吗<br>\t如果确定 n&gt;m， 多项式 2n+3m 的复杂度 O(m+n) 可否转换为 O(n)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425416,"discussion_content":"1. 这个成立的前提是针对同一个问题，不同的算法，一个是O(m+n)，一个是O(m)，这个时候成立。否则就么有比较的意义。\n2. 可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28890,"user_name":"🌟 我係冬阳 🐑","can_delete":false,"product_type":"c1","uid":1236337,"ip_address":"","ucode":"F811DB35BE4109","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/71/806bd4a8.jpg","comment_is_top":false,"comment_ctime":1538188003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538188003","product_id":100017301,"comment_content":"这个思考题，答案肯定是要进行分析啦，肯定有必要啦。就好像造一个房子，地基都不打好就往上盖，盖完之后再分析。如果房子不会倒还好，如果分析后发现很快就倒，或者几年就倒，那难道要重新炸了房子，再建吗。类比过来代码就是，你要解决一个问题的时候，想到办法就去实现代码了，且不说能不能实现吧，实现出来就未必是最好的方案。等你实现了，再去分析复杂度或者直接运行来测试，发现问题再改成本就好大了。事先分析，可以帮助我们快速判断这个算法的性能，以及可以做估算，根据实际业务来判断这个算法的数据规模会达到何种量级，再结合时间空间复杂度就能大致判断出这个算法的性能优劣了。判断完后再去实现，性能差就再去思考能否优化。","like_count":0},{"had_liked":false,"id":28883,"user_name":"🌟 我係冬阳 🐑","can_delete":false,"product_type":"c1","uid":1236337,"ip_address":"","ucode":"F811DB35BE4109","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/71/806bd4a8.jpg","comment_is_top":false,"comment_ctime":1538185924,"is_pvip":false,"replies":[{"id":"10444","content":"哈哈 我们记下来了 建议很好","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538219365,"ip_address":"","comment_id":28883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538185924","product_id":100017301,"comment_content":"你好，因为这个课程是听，看结合的课。跟传统的视频教程不太一样。能否在每段文字阅读的段落前，加上录音的时间戳。这样方便读者定位语音和阅读内容，也方便事后复习再听的时候，能快速精准定位","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425407,"discussion_content":"哈哈 我们记下来了 建议很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538219365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28876,"user_name":"星辰","can_delete":false,"product_type":"c1","uid":1235245,"ip_address":"","ucode":"E682007180DA4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/2d/90336860.jpg","comment_is_top":false,"comment_ctime":1538184823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538184823","product_id":100017301,"comment_content":"分析时间空间复杂度有助于自己写出优质代码，而不是渣渣","like_count":0},{"had_liked":false,"id":28875,"user_name":"Yezhiwei","can_delete":false,"product_type":"c1","uid":1005157,"ip_address":"","ucode":"31E8E33688CBEC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/65/22a37a8e.jpg","comment_is_top":false,"comment_ctime":1538184764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538184764","product_id":100017301,"comment_content":"看来是时候补补数学，好尴尬😳","like_count":0},{"had_liked":false,"id":28853,"user_name":"Geek_f98956","can_delete":false,"product_type":"c1","uid":1256938,"ip_address":"","ucode":"E5BBA8A64FE741","user_header":"","comment_is_top":false,"comment_ctime":1538181612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538181612","product_id":100017301,"comment_content":"测试的时候的数据 不一定 是合适的数据 导致结果不够客观 而我们做开发 必须考虑到最坏的情况 否则用户出问题了 就麻烦了","like_count":0},{"had_liked":false,"id":28851,"user_name":"三个石头","can_delete":false,"product_type":"c1","uid":1110384,"ip_address":"","ucode":"A863A416D65217","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/70/a64d9498.jpg","comment_is_top":false,"comment_ctime":1538181318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538181318","product_id":100017301,"comment_content":"我认为复杂度分析，往往是做在写代码自己调试阶段的工作，而项目测试之类的主要是指代码通过公司测试人员测试之后才会去做的工作，就是二者阶段不一样","like_count":0},{"had_liked":false,"id":28847,"user_name":"Terence","can_delete":false,"product_type":"c1","uid":1002689,"ip_address":"","ucode":"665CC758A8D7B8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/c1/72a5e7c2.jpg","comment_is_top":false,"comment_ctime":1538180320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538180320","product_id":100017301,"comment_content":"第一个代码片段，文中的结论是“第4、5行运行了n次”。<br><br>但实际应该是，第4行运行了n+1次，第5行运行了n次。<br><br>当初看《算法导论》，这个细节印象特别深刻。","like_count":0},{"had_liked":false,"id":28839,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1538178474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538178474","product_id":100017301,"comment_content":"不是多此一举。性能测试和所使用的机器，原始数据的有序程度都有很大的关系。<br>将复杂度分析联系熟练后，并不会花多少时间，而且这种内化的能力能够直接体现在我们的代码里","like_count":0},{"had_liked":false,"id":28838,"user_name":"victor","can_delete":false,"product_type":"c1","uid":1117573,"ip_address":"","ucode":"AA73E72DB39B7E","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/85/99f23927.jpg","comment_is_top":false,"comment_ctime":1538178409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538178409","product_id":100017301,"comment_content":"用代入法和归纳法求一波<br>T(n)=if(n&gt;1,(8T(n&#47;2)+cn),1)<br>复杂度的感觉就来了","like_count":0},{"had_liked":false,"id":28833,"user_name":"A_阿海","can_delete":false,"product_type":"c1","uid":1239200,"ip_address":"","ucode":"5594C992D7E6E9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/a0/c2daafdb.jpg","comment_is_top":false,"comment_ctime":1538173636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538173636","product_id":100017301,"comment_content":"理论提前知道代码效率。不用等实际跑起来 测试的时候才发现性能问题，再去优化代码。","like_count":0},{"had_liked":false,"id":28817,"user_name":"xdargs","can_delete":false,"product_type":"c1","uid":1063740,"ip_address":"","ucode":"EB8326D3A72DE5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH9Mlw0kLK0p39vhQpdvkbQP5TX96DB9HMJ1POaTVDpMZg4rjlO3WCAqiaWWMc77ffS3vTo8qWdXA/132","comment_is_top":false,"comment_ctime":1538150536,"is_pvip":true,"replies":[{"id":"10419","content":"这个丢的有点多了 不过很快就能补上","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538209421,"ip_address":"","comment_id":28817,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538150536","product_id":100017301,"comment_content":"作为一个工科生为自己丢了好多年的数学汗颜，查多项式概念，换底公式，回想等差等比数列，微分积分还没敢查…","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425381,"discussion_content":"这个丢的有点多了 不过很快就能补上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538209421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28810,"user_name":"sea","can_delete":false,"product_type":"c1","uid":1219713,"ip_address":"","ucode":"599730A093D356","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/81/78107cf1.jpg","comment_is_top":false,"comment_ctime":1538148597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538148597","product_id":100017301,"comment_content":"复杂度分析更像是提供了一种代码效率的“心算”，如果熟练掌握了对写代码的帮助是巨大的，自己写的时候就能大概知道代码的复杂度，从而避免写出效率和内存占用不佳的代码。","like_count":0},{"had_liked":false,"id":28799,"user_name":"徐","can_delete":false,"product_type":"c1","uid":1149095,"ip_address":"","ucode":"04D99F991ECE2D","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/a7/cd469379.jpg","comment_is_top":false,"comment_ctime":1538146809,"is_pvip":false,"replies":[{"id":"10379","content":"大o标记法省略了系数 常数 低阶。所以这张图 你要关注的是增长趋势的不同。至于起点是几不好说 关注也没意义","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538183394,"ip_address":"","comment_id":28799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538146809","product_id":100017301,"comment_content":"老师， 最后一张图里， O(nlogn)在n等于1的时候应该等于0吧， nlogn跟n的线应该有个交叉点。 <br><br>PS：最后的问题，我认为，复杂度分析其实就是定性分析， 性能测试是定量分析。 这两种方式在各行各业各种问题上都有各自的价值和意义。 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425378,"discussion_content":"大o标记法省略了系数 常数 低阶。所以这张图 你要关注的是增长趋势的不同。至于起点是几不好说 关注也没意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538183394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28792,"user_name":"王阳","can_delete":false,"product_type":"c1","uid":1175502,"ip_address":"","ucode":"F584810FFD12CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/ce/d53edf66.jpg","comment_is_top":false,"comment_ctime":1538145897,"is_pvip":false,"replies":[{"id":"10392","content":"说的没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538186478,"ip_address":"","comment_id":28792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538145897","product_id":100017301,"comment_content":"我认为两者是相辅相成的，比如针对某个项目要做算法或者数据结构的选型，前期可能是通过时间或空间复杂度的分析，可以从理论上就排除了一些选型，但是最终的确定可能确实需要编写对应的demo,通过实际的测试结果来确定最终的方案","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425375,"discussion_content":"说的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538186478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28790,"user_name":"天方夜谭","can_delete":false,"product_type":"c1","uid":1256829,"ip_address":"","ucode":"39EFE0919005A1","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/7d/5ad6063e.jpg","comment_is_top":false,"comment_ctime":1538145400,"is_pvip":false,"replies":[{"id":"10394","content":"那就多看几遍吧 自己动脑子多思考一下。再结合其他书籍资料 看看。还有可以网上多搜搜。既然基础比比人差 就要多下点功夫了 同学。毕竟这门课确实不简单。我这里也没葵花宝典 还是要自己下苦工夫的呢 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538187012,"ip_address":"","comment_id":28790,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538145400","product_id":100017301,"comment_content":"我怎么没听明白😂😂","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425373,"discussion_content":"那就多看几遍吧 自己动脑子多思考一下。再结合其他书籍资料 看看。还有可以网上多搜搜。既然基础比比人差 就要多下点功夫了 同学。毕竟这门课确实不简单。我这里也没葵花宝典 还是要自己下苦工夫的呢 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538187012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28789,"user_name":"绪扬IS未知数","can_delete":false,"product_type":"c1","uid":1111493,"ip_address":"","ucode":"D808563CC6DB07","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/c5/f963d791.jpg","comment_is_top":false,"comment_ctime":1538145343,"is_pvip":false,"replies":[{"id":"10451","content":"后面讲完排序你再看看能不能回答上来吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538225499,"ip_address":"","comment_id":28789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538145343","product_id":100017301,"comment_content":"我遇到一个百思不得姐的问题：将n个不定长度的数组转换成一个有序的数组，使用两种方式，分别实现空间复杂度和时间复杂度最低。<br>在回答这个问题的时候，我无论怎么试时间复杂度都是O(n∧2)，空间复杂度都是O(n)。请老师讲解一下这道题，具体如何分析。谢谢！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425372,"discussion_content":"后面讲完排序你再看看能不能回答上来吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538225499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28777,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538143657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538143657","product_id":100017301,"comment_content":"其实关于理解这个每行代码都要去斟酌其性能这种问题，大家可能觉得似乎特别耗时间。但我理解是这样的。这就像写字一样，若开始小的时候，我们把字都写工整了，好好的花了大力气大时间把它练好了，那我们未来在写字的时候就是写的又快又好。真正的顶尖的优秀的程序员，他们其实写代码的时候，就是写得又快又好。他们的直觉已经考虑到了一些性能的问题。他们的习惯不允许他们写出劣质的代码。所以我们还是好好的打好基础，好好的把字练好。有句俗话说，从一个人写字就能看出一个人的为人，我现在来思考还是有几分道理的，如果这个人很踏实很用心，沉得住心，那么他的字应该是练得好的。同样的，我们也可以用一个人的代码的质量来判断一个程序员的品质。如果是一个有耐心，有责任心，有沉得住心的程序员，他肯定是能把他的代码写好。","like_count":0},{"had_liked":false,"id":28773,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538143228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538143228","product_id":100017301,"comment_content":"我在面试程序员的时候，我会进行深度和广度的挖掘，我会引导面试者一层一层的往深度的回答问题。他回答到哪个层次，我就认为这个程序员的基础在什么层次。一般来说，如果一个程序员的深度比较深，那广度应该一般不会太差。很多东西都是触类旁通的。","like_count":0},{"had_liked":false,"id":28771,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538143039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538143039","product_id":100017301,"comment_content":"据说微软，谷歌等顶级公司对程序员的基本功的要求是最顶级的要求。只有基本功越扎实的程序员，才能写出世界上最优秀的产品，我觉得我们需要对我们的软件知识进入更深度的挖掘是有必要的。","like_count":0},{"had_liked":false,"id":28767,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538142555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538142555","product_id":100017301,"comment_content":"我认为是有必要的，因为软件代码这些东西很奇妙。性能越高的软件，也许用的人会更多。比如操作系统或是搜索服务。你的用户可能是上千万，上亿几十亿人。所以你的代码每一部分如果都能优化出那么一点点时间，这个加起来这么多人会节省多少时间？所以我们对代码都要无止境的去打磨。他会带给你应有的回报的。","like_count":0},{"had_liked":false,"id":28757,"user_name":"PerWchs","can_delete":false,"product_type":"c1","uid":1235632,"ip_address":"","ucode":"6FDECDA677CA5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/b0/4df83a5e.jpg","comment_is_top":false,"comment_ctime":1538140858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538140858","product_id":100017301,"comment_content":"在计算时间复杂度时，忽略公式中的常量和低阶尚可理解，把系数也忽略掉不是太能理解。举个例子，O(2n)，若n=10亿，那么系数对最后结果影响还是很大的。","like_count":0},{"had_liked":false,"id":28746,"user_name":"Nuko","can_delete":false,"product_type":"c1","uid":1236899,"ip_address":"","ucode":"2C258BBA17B20E","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/a3/7b36b257.jpg","comment_is_top":false,"comment_ctime":1538139042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538139042","product_id":100017301,"comment_content":"++i好评⊙▽⊙","like_count":0},{"had_liked":false,"id":28739,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1538137649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538137649","product_id":100017301,"comment_content":"立个FLAG,每周完成更新的内容。加油~<br>","like_count":0},{"had_liked":false,"id":28732,"user_name":"pc","can_delete":false,"product_type":"c1","uid":1214987,"ip_address":"","ucode":"627824A79A72FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wgkMgnDkBQgxpFNDhXr03gRMF1CFsuVAXp8uO2O5tgPRjYJicKqPSRiar9ibxBJ3K7pNeJX8dq6FyQF0Mq2SzuoUg/132","comment_is_top":false,"comment_ctime":1538135262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538135262","product_id":100017301,"comment_content":"大O表示法实际上是表示随着数据规模扩大所耗费时间的增长率，因此和性能测试的时间应该是两回事。通过时间复杂度分析，可以在一定程度上了解到代码的“好坏”，因为在实际环境中往往数据的规模是未知的，因此时间复杂度低的算法，大概率是在各种数据规模中表现的更好的算法；性能测试则可以让我们了解到代码在实际环境的具体时长，从而可以进行进一步优化。","like_count":0},{"had_liked":false,"id":28730,"user_name":"王虹凯","can_delete":false,"product_type":"c1","uid":1018862,"ip_address":"","ucode":"CA01E64E125CFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/ee/56823fd7.jpg","comment_is_top":false,"comment_ctime":1538135094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538135094","product_id":100017301,"comment_content":"我经历的开发过程，真的没有专门分析复杂度。压测，一般也是针对qps高的功能会做，一般会做些代码review和缓存策略，很少深入到复杂度分析的细节上，我想这也是大部分业务为重头的团队的通病吧，如果是技术出身或者中间件团队，我认为可以好好玩一玩，只有好处不会有坏处。较真的时候，确实有用。","like_count":0},{"had_liked":false,"id":28729,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1538134988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134988","product_id":100017301,"comment_content":"性能也和机器本身的性能有关，做完性能测试，再做时间复杂度和空间复杂度分析，能够从理论到实践对一个模块有一个认识，这个是必须的。","like_count":0},{"had_liked":false,"id":28725,"user_name":"Mission","can_delete":false,"product_type":"c1","uid":1255735,"ip_address":"","ucode":"682ED6CDE93138","user_header":"","comment_is_top":false,"comment_ctime":1538134636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538134636","product_id":100017301,"comment_content":"性能的影响是多方面因素的。进行复杂度分析能在一定程度上优化代码的执行效率，从而在一定程度上有意识的写出更加优化的代码，也会让自己在写代码的时候养成一种注重代码执行效率的好习惯。","like_count":0},{"had_liked":false,"id":28710,"user_name":"Mr.Lee","can_delete":false,"product_type":"c1","uid":1240758,"ip_address":"","ucode":"F732D98D262703","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/b6/f99db3e7.jpg","comment_is_top":false,"comment_ctime":1538130989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538130989","product_id":100017301,"comment_content":"1.复杂度是用来分析算法的执行效率与数据规模之间的关系。<br>  数据结构和算法解决的是让代码执行的更快，更节省内存<br>2.复杂度分为时间复杂度和空间复杂度<br>   时间复杂度指的是算法的运行时间随着代码的规模增长的变化趋势<br>  空间复杂度指的是算法所占用的内存随着代码规模增长的变化趋势<br>  大O表示法；<br>  表示的是代码执行的时间随着代码规模增长的变化趋势<br>3.公式中的低阶，常量，系数不影响增长趋势，可以忽略。<br>  分析时间复杂度的方法：<br>_1.只关注循环执行次数最多的一段代码<br>_2.加法法则:总的复杂度就等于量级最大的那段代码的复杂度<br>_3.乘法法则：嵌套代码的复杂度就等于嵌套内外代码复杂度的乘积<br>4.几种常见复杂度分析的量级：<br>多项式量级                 非多项式量级<br>常量阶 O（1）           指数阶 O（2n）<br>线性阶 O（n）           阶乘阶 O（N！）<br>对数阶 O（logN）     <br>线性对数阶  O（NlogN）<br>平方阶 O（N2）<br>立方阶  O（N3）<br>K方阶  O（Nk）<br>5.非多项式量级代码执行的时间会随着代码的规模增长急剧增长，是非常低效的算法，在此不讨论。<br>6.只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂都记作O（1）<br>  还有一种情况是无法看出来两段代码的谁的量级比较大时，就不能采用加法法则，省略其中一个。此时使用0（m+n）来表示此段代码的时间复杂度，而乘法法则依然有效。<br>7.常用的算法复杂度有O（1），O（n），O（N2），<br>  越高阶的复杂度其效率越低，常见的算法复杂度从低阶到高阶，O（1），O（logN），      O（n），O（NlogN），O（N2）<br>8.作业：正如作者所说的那样，对代码做的性能测试会受到本地环境的影响，其测出来的结果并不准确。做时间，空间复杂度分析并不会依赖于测试环境，<br>相反，得到的结果会更精确一些。另外，做复杂度的分析固然消耗时间，可也是我们对复杂度的一个练习的过程，所谓孰能生巧，巧能生精。<br>久而久之，也能提高我们对复杂度分析的效率。同时也能让我们在平时敲代码时潜意识的考虑到复杂度。更能提升自己。<br>9.课后疑虑:n表示的是代码的规模，这里有个疑问就是当n为10000,100000，无限大时为啥就忽略了？<br>按照我的理解就是代码执行的时间随着规模增长而增长，难道我的理解是错误的吗？<br>关于O我可以把它理解为数学中方程上的一个系数吗？希望老师看到后解答一下，谢谢。<br><br><br><br><br><br>","like_count":0},{"had_liked":false,"id":28682,"user_name":"雨天","can_delete":false,"product_type":"c1","uid":1056406,"ip_address":"","ucode":"FD9FB404ECA463","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/96/3162d51f.jpg","comment_is_top":false,"comment_ctime":1538126588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538126588","product_id":100017301,"comment_content":"老师,复杂度O(2n) 和 O(n!)的算法有哪些?","like_count":0},{"had_liked":false,"id":28680,"user_name":"Terry","can_delete":false,"product_type":"c1","uid":1079635,"ip_address":"","ucode":"92BDC3AF7855B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/53/3a824aed.jpg","comment_is_top":false,"comment_ctime":1538126363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538126363","product_id":100017301,"comment_content":"理论指导实践，实践验证真理。不能说是多此一举。","like_count":0},{"had_liked":false,"id":28669,"user_name":"coulson","can_delete":false,"product_type":"c1","uid":1125035,"ip_address":"","ucode":"ADBC6AEED866FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/ab/6b2475e9.jpg","comment_is_top":false,"comment_ctime":1538123566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538123566","product_id":100017301,"comment_content":"先把高中时候学的对数和阶乘相关知识温习一遍，都快忘记完了！头疼","like_count":0},{"had_liked":false,"id":28666,"user_name":"可可西里王炸","can_delete":false,"product_type":"c1","uid":1237727,"ip_address":"","ucode":"FB7B1AF303B21F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/df/c53145da.jpg","comment_is_top":false,"comment_ctime":1538123083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538123083","product_id":100017301,"comment_content":"一、时间复杂度<br>1.时间复杂度：指的是代码执行时间随数据规模增长的变化趋势<br>2.大O复杂度表示法：T(n) = O(f(n)) 其实T(n)代码执行的时间，n表示数据规模大小，f(n)表示每行代码执行的次数总和<br>3.时间复杂度分析：<br>    (1)只关注循环执行次数最多的一段代码<br>    (2)加法法则：总负责度等于 量级最大  的那段代码的复杂度，常量级的执行时间当n无限大的时候就可以忽略   但如果无法估计谁的量级大，则都需要加起来<br>    (3)乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的  乘积<br>4.复杂度量级： 常量级O(1)  指数阶O(2的n次方)  阶成阶O(n!)  对数阶O(logn)  线性阶O(n)   线性对数阶O(nlogn)  平方阶O(n*n)   立方阶O(n*n*n)   k次方阶O(n)<br>二、空间复杂度<br>1. 概念：算法的存储空间与数据规模之间的增长关系<br>2. 常见的空间复杂度：O(1)   O(n)   O(n的平方)   像O(logn)  O(nlogn)这样的对数阶复杂度平时都用不到<br>","like_count":0},{"had_liked":false,"id":28662,"user_name":"日月星","can_delete":false,"product_type":"c1","uid":1249386,"ip_address":"","ucode":"9FBA615B9C58F6","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/6a/d15adb86.jpg","comment_is_top":false,"comment_ctime":1538122017,"is_pvip":false,"replies":[{"id":"10344","content":"堆栈爆掉了 递归那节会讲的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538131819,"ip_address":"","comment_id":28662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538122017","product_id":100017301,"comment_content":"老师，那递归死循环是时间复杂度太大导致cpu爆了而不是空间复杂度导致内存炸了么？还是两者复杂度引起的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425341,"discussion_content":"堆栈爆掉了 递归那节会讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538131819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28661,"user_name":"钟衍辉","can_delete":false,"product_type":"c1","uid":1030229,"ip_address":"","ucode":"EF807515E86D37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/55/3c220676.jpg","comment_is_top":false,"comment_ctime":1538121955,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1538121955","product_id":100017301,"comment_content":"课后思考：这个问题应该根据项目目标区别对待。如果是商业级项目，提供稳定高性能的服务，那么这些测试都是必须的；但如果是一个Demo项目，必须快速实现用来验证设想的，就可以考虑放宽性能要求了","like_count":0},{"had_liked":false,"id":28652,"user_name":"syzhou","can_delete":false,"product_type":"c1","uid":1135977,"ip_address":"","ucode":"650E3EE2A9A53D","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/69/4c41b026.jpg","comment_is_top":false,"comment_ctime":1538120156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538120156","product_id":100017301,"comment_content":"老师你好，有一个疑问，你文章里说O(nlogn)是基于乘法法则循环执行O(logn)的代码n次得来的，但是归并排序从形式上来说更像用加法法则的示例，如果用加法法则就是:<br>O(logn)+O(logn)+O(n)=2O(logn)+O(n)=O(n)<br>&#47;&#47;两个2分的递归加一个合并<br>但是归并排序的时间复杂度确实O(nlogn),不细究这个算法的原理，单从代码上来分析，我用的加法法则为什么是错的？","like_count":0},{"had_liked":false,"id":28642,"user_name":"张辽","can_delete":false,"product_type":"c1","uid":1046023,"ip_address":"","ucode":"E9EEE3FF95712F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGOW1Crcle7icMQsck7JsmZ8sFianWNkJQan9ubmQnnU611OG4wjfmnR8vwMsEDkC1emPJHzA9S2Sg/132","comment_is_top":false,"comment_ctime":1538118435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538118435","product_id":100017301,"comment_content":"性能测试有局限，尤其是数据规模，很难说明复杂度，而且一定规模下的测试数据样本量有限，比较个例，不能说明普遍性能指标。","like_count":0},{"had_liked":false,"id":28629,"user_name":"学无止境","can_delete":false,"product_type":"c1","uid":1252601,"ip_address":"","ucode":"7A9173A9007462","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/f9/1df93684.jpg","comment_is_top":false,"comment_ctime":1538116744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538116744","product_id":100017301,"comment_content":"老师讲的系统性好，结构清楚，分类真是个好方法。","like_count":0},{"had_liked":false,"id":28627,"user_name":"New Yorker","can_delete":false,"product_type":"c1","uid":1237979,"ip_address":"","ucode":"D46B1C472ED793","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/db/24d7eb6f.jpg","comment_is_top":false,"comment_ctime":1538116397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538116397","product_id":100017301,"comment_content":"总结一下<br>1.复杂度表示一种渐趋势，所以可以做以下分析方法<br>    寻找循环最里层的循环<br>    针对加法，可使用最大的复杂度<br>    针对乘法，使用嵌套相乘<br>2.复杂度量级多项式量级，非多项式量级<br>3.最好的练习方法是不断分析，最终达到五招胜有招","like_count":0},{"had_liked":false,"id":28610,"user_name":"我想静静","can_delete":false,"product_type":"c1","uid":1253201,"ip_address":"","ucode":"B3489140591AA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/51/5e2c484e.jpg","comment_is_top":false,"comment_ctime":1538112238,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538112238","product_id":100017301,"comment_content":"对于复杂度分析：在写代码的时候分析一下时间空间复杂度，总好过出现问题再去修改代码甚至重构来的爽。君不见，多少公司的程序猿都是被前人乱七八糟的代码逼走的；或者直接重构，浪费大量的人力物力财力。<br>对于性能测试：不管怎样，分析只是一种理论上的操作，是一种理想情况的推论。像物理实验一样，很多物理定律的前提都是理想情况下，并不会实际发生的（可能这个例子不是很恰当）。还是要落实到自己的机器上进行性能测试，毕竟环境不一样，不同的硬件配置，也许出现的结果就不太一样，需要优化的点也不一样。","like_count":0},{"had_liked":false,"id":28585,"user_name":"贤良","can_delete":false,"product_type":"c1","uid":1174982,"ip_address":"","ucode":"E674159DF27556","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/c6/86acf36a.jpg","comment_is_top":false,"comment_ctime":1538104557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538104557","product_id":100017301,"comment_content":"公式中的O，表示代码的执行时间T(n)与f(n)表达式成正比。这个说法略不严格。\rAlgorithm（4th Edition）课程中认为把大O作为approximate model是common mistake。\r（他认为大theta才是asymptotic growth rate，而在课程中更多使用波浪记号：~）<br><br>继续看留言中！耶。","like_count":0},{"had_liked":false,"id":28574,"user_name":"尘墨","can_delete":false,"product_type":"c1","uid":1239472,"ip_address":"","ucode":"2B46B4E5ECDF83","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/b0/7be55531.jpg","comment_is_top":false,"comment_ctime":1538103451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103451","product_id":100017301,"comment_content":"问题1：<br>\tpython实现,没有i=1的赋值是不是会少一个unit_time啊：<br>\tdef cal(n):<br>\t_sum = 0  # 1个unit_time<br>\tfor i in range(n):  # 2n*unit_time,还有加法计算的时间没有算<br>\t\t_sum = _sum + i<br>\treturn _sum<br>问题2：<br>\t_sum = _sum + i 换成 _sum += i 是不是少了个赋值操作<br><br>基础不是很扎实，所以问题比较多","like_count":0},{"had_liked":false,"id":28570,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1538103302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538103302","product_id":100017301,"comment_content":"我觉得复杂度分析确实能够提供一个理论的潜在的程序运行结果，项目开发前进行性能测试能够帮助分析实际情况下不同数据规模和数据特点在不同平台的性能差异，从而有助于选择比较合适的平台，之后再进行复杂度分析则可以优化程序结构，提供程序运行效率，此外考虑到不同平台对系统输入的情侣，其实也会考虑时间复杂度和空间复杂度二者对系统的影响程度，如果系统的实时性比较高，那么可能会采用牺牲空间复杂度来提升时间复杂度……","like_count":0},{"had_liked":false,"id":28560,"user_name":"SHANE","can_delete":false,"product_type":"c1","uid":1230381,"ip_address":"","ucode":"3FCB61AFBA0EC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c6/2d/bb1adcde.jpg","comment_is_top":false,"comment_ctime":1538102799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538102799","product_id":100017301,"comment_content":"我觉得复杂度有一个可以量化的标准 就是机器执行了多少代码 当我们遇到 for while等关键字 或者列表 map等 就要思考 机器走的代码不止眼前看到的这些 ","like_count":0},{"had_liked":false,"id":28557,"user_name":"快乐E调","can_delete":false,"product_type":"c1","uid":1220886,"ip_address":"","ucode":"332A7ECC110AED","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/16/000e5394.jpg","comment_is_top":false,"comment_ctime":1538102337,"is_pvip":false,"replies":[{"id":"10268","content":"也可以算 算不算都不影响复杂度","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107224,"ip_address":"","comment_id":28557,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538102337","product_id":100017301,"comment_content":"有个疑问，既然赋值都算单位时间，循环里面的i++，j++为什么都不算单位时间","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425309,"discussion_content":"也可以算 算不算都不影响复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28536,"user_name":"Flying","can_delete":false,"product_type":"c1","uid":1239009,"ip_address":"","ucode":"2E9D9813E329E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/e1/2e27eabf.jpg","comment_is_top":false,"comment_ctime":1538100155,"is_pvip":false,"replies":[{"id":"10273","content":"👍 理解的不错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538107889,"ip_address":"","comment_id":28536,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538100155","product_id":100017301,"comment_content":"个人理解，学习数据结构与算法，就是避免写出“烂代码”，复杂度分析可以让我们在编写程序之前，对整个系统或者函数的效率有一定的了解。最近在学习Python，深有体会。Python估计是一门运用数据结构较完美的语言了（c  c++  Python对比），比如它的切片运用，能避免很多不必要的循环操作。还有一个更深刻的了解是:网盘对数据结构要求更高，因为这个决定了你如何能充分利用你的服务器存储。<br>复杂度分析和性能分析各有优缺点，都只是工具，熟练掌握它们，提升你的代码质量。<br> 如有错误，欢迎指正。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425299,"discussion_content":"👍 理解的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538107889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28529,"user_name":"段磊","can_delete":false,"product_type":"c1","uid":1123800,"ip_address":"","ucode":"8C4B422FD88B0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/d8/35aad27f.jpg","comment_is_top":false,"comment_ctime":1538099314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538099314","product_id":100017301,"comment_content":"事后统计法有非常大的局限性 1.测试结果非常依赖测试环境，2.测试结果受数据规模的影响很大。<br>所以，我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法，这就是时间、空间复杂度分析方法。<br>越高阶复杂度的算法，执行效率越低。<br>","like_count":0},{"had_liked":false,"id":28515,"user_name":"喵大大~","can_delete":false,"product_type":"c1","uid":1100052,"ip_address":"","ucode":"4B9ED33A86383D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/14/73d81ec9.jpg","comment_is_top":false,"comment_ctime":1538098086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538098086","product_id":100017301,"comment_content":"这种计算时间复杂度的方法，可以计算java的lambda流处理么，比如说list.stream().filter(s-&gt;s&gt;10).collect(Collectors.toList())，list的大小为n。这是不是就是O(n)。","like_count":0},{"had_liked":false,"id":28512,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1244044,"ip_address":"","ucode":"92992252FE98A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/8c/8e62d229.jpg","comment_is_top":false,"comment_ctime":1538097632,"is_pvip":false,"replies":[{"id":"10250","content":"实际上 复杂度只能用来做相同问题不用解决算法之间的性能对比。注意这里的相同问题 这个背景。如果这个问题的解决不管什么算法都要调rpc。那我们就可以将rpc调用看作一个固定的时间单位。不过你的问题更接近实战。单纯复杂度分析可能并不能评价代码的性能。还有结合具体情况具体分析","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538099962,"ip_address":"","comment_id":28512,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538097632","product_id":100017301,"comment_content":"作者写的好通俗易懂~只是我有个疑问，假设代码里有调用别人的rpc或者http接口，这样算时间的复杂度应该有误差吧？调用接口的复杂度是怎么算呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425289,"discussion_content":"实际上 复杂度只能用来做相同问题不用解决算法之间的性能对比。注意这里的相同问题 这个背景。如果这个问题的解决不管什么算法都要调rpc。那我们就可以将rpc调用看作一个固定的时间单位。不过你的问题更接近实战。单纯复杂度分析可能并不能评价代码的性能。还有结合具体情况具体分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538099962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28493,"user_name":"草长莺飞","can_delete":false,"product_type":"c1","uid":1243108,"ip_address":"","ucode":"7A281E8DB11BBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/e4/c8cfca11.jpg","comment_is_top":false,"comment_ctime":1538096851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538096851","product_id":100017301,"comment_content":"老师，提个建议呗。就是留言的时候不小心退出了，下次在登录的时候接着写，但是全没了。需要重新写，很烦。体验很不好呢！！","like_count":0},{"had_liked":false,"id":28483,"user_name":"陈蒙","can_delete":false,"product_type":"c1","uid":1250013,"ip_address":"","ucode":"9E8303709AFAF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/dd/74fca186.jpg","comment_is_top":false,"comment_ctime":1538096420,"is_pvip":false,"replies":[{"id":"10368","content":"可以粗略的这么认为","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538143543,"ip_address":"","comment_id":28483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538096420","product_id":100017301,"comment_content":"空间复杂度的空间是内存空间吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425279,"discussion_content":"可以粗略的这么认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28477,"user_name":"看着时光渐渐苍老","can_delete":false,"product_type":"c1","uid":1237854,"ip_address":"","ucode":"09D78EE4999E3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/5e/73202bea.jpg","comment_is_top":false,"comment_ctime":1538095869,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538095869","product_id":100017301,"comment_content":"希望能有更多拔高的地方，这些感觉都有些太基础了","like_count":0},{"had_liked":false,"id":28460,"user_name":"Marnie","can_delete":false,"product_type":"c1","uid":1001912,"ip_address":"","ucode":"ECF9B22574F868","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/b8/fb19aa6a.jpg","comment_is_top":false,"comment_ctime":1538095173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538095173","product_id":100017301,"comment_content":"时间复杂度：渐进时间复杂度，表示用时与数量规模增长的渐进关系<br>空间复杂度：渐进空间复杂度，表示存储空间与数量规模增长的渐进关系","like_count":0},{"had_liked":false,"id":28435,"user_name":"好吃二师兄","can_delete":false,"product_type":"c1","uid":1242173,"ip_address":"","ucode":"A367B52BC79199","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/3d/ec3d6348.jpg","comment_is_top":false,"comment_ctime":1538093576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538093576","product_id":100017301,"comment_content":"总的来说会用时间与空间复杂度来分析问题对我这种渣渣程序员有两种好处，一是写代码的时候就不会写出效率很低的代码，二是分析别人的代码的时候容易找出拖累执行效率的代码。。。","like_count":0},{"had_liked":false,"id":28428,"user_name":"Slow life","can_delete":false,"product_type":"c1","uid":1234717,"ip_address":"","ucode":"D8D9AF69E72636","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/1d/58e6f05d.jpg","comment_is_top":false,"comment_ctime":1538093068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538093068","product_id":100017301,"comment_content":"通俗易懂，大学的数据结构的基础理论，期待后续精彩的时空复杂度分析","like_count":0},{"had_liked":false,"id":28417,"user_name":"确认过眼神","can_delete":false,"product_type":"c1","uid":1245530,"ip_address":"","ucode":"E6D73A9D27A279","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/5a/f7c989e4.jpg","comment_is_top":false,"comment_ctime":1538092108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538092108","product_id":100017301,"comment_content":"性能测试会与代码所属环境有关，复杂度分析只与代码本身有关，可否这么理解？","like_count":0},{"had_liked":false,"id":28412,"user_name":"铭","can_delete":false,"product_type":"c1","uid":1073145,"ip_address":"","ucode":"9A48183C1A7E85","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/f9/cb8ff81b.jpg","comment_is_top":false,"comment_ctime":1538091809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538091809","product_id":100017301,"comment_content":"时间复杂度和空间复杂度事一个理论上的推理值，但是对于算法的优劣有一个比较具体的比较。","like_count":0},{"had_liked":false,"id":28392,"user_name":"落叶🍂建良","can_delete":false,"product_type":"c1","uid":1238358,"ip_address":"","ucode":"4015FADD0EFD61","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/56/3bee284c.jpg","comment_is_top":false,"comment_ctime":1538068577,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538068577","product_id":100017301,"comment_content":"前端页面布局使用的都是标签语言(html+css)是不是可以认为是O(1)的复杂度呢?","like_count":0},{"had_liked":false,"id":28391,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1538068282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538068282","product_id":100017301,"comment_content":"性能测试和大O分析可以类比成：实践和理论的差异。如文章所说，实践基于理论，但是效果也受限于很多其他的实际条件，大O分析得到的公式，会从理论上解释算法的趋势边界，对测试的结果或者日常设计算法都是由指导意义的，两者并不会冲突。<br>重新推导了一下指数的一些公式和函数图，理解log(n)部分更加有益：）","like_count":0},{"had_liked":false,"id":28388,"user_name":"Wayne","can_delete":false,"product_type":"c1","uid":1244227,"ip_address":"","ucode":"EF482BB711AD63","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/43/3438409b.jpg","comment_is_top":false,"comment_ctime":1538066934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538066934","product_id":100017301,"comment_content":"一直对这个O，不是很理解，我尝试理解了一下！理论上，代码执行总时间=总代码行总运行次数*每次运行时间，而每次运行时间由于与CPU架构和负荷有关，该值无法确定，但可以确定的是每个时间点上都是一个正数常量，引入数学上的大O表示法来描述随着时间推移，代码总时间理论上是总代码总运行次数的特定倍数关系，即正比关系！","like_count":0},{"had_liked":false,"id":28386,"user_name":"Puran","can_delete":false,"product_type":"c1","uid":1079925,"ip_address":"","ucode":"AF2D22AE361177","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/75/60b5a501.jpg","comment_is_top":false,"comment_ctime":1538065494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538065494","product_id":100017301,"comment_content":"写的字很漂亮呀…图也画的很好，有心啦。^_^","like_count":0},{"had_liked":false,"id":28372,"user_name":"崇拜","can_delete":false,"product_type":"c1","uid":1254953,"ip_address":"","ucode":"8EC2C04ACB638B","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/29/352d1ce6.jpg","comment_is_top":false,"comment_ctime":1538062599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538062599","product_id":100017301,"comment_content":"所以最后一段代码的时间复杂度是O(n)，嘻嘻快夸我！","like_count":0},{"had_liked":false,"id":28371,"user_name":"崇拜","can_delete":false,"product_type":"c1","uid":1254953,"ip_address":"","ucode":"8EC2C04ACB638B","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/29/352d1ce6.jpg","comment_is_top":false,"comment_ctime":1538062555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538062555","product_id":100017301,"comment_content":"所以最后一段代码的时间复杂度是O(n)🤪🤪🤪","like_count":0},{"had_liked":false,"id":28361,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538061097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538061097","product_id":100017301,"comment_content":"老师，有这么个题目，若f(n)=O(n^2)且g(n)=O(n)。为什么g(n)不想等O(f(n))。但是O(n^2)却跟O(n^3)相等","like_count":0},{"had_liked":false,"id":28338,"user_name":"敲键盘的人","can_delete":false,"product_type":"c1","uid":1232210,"ip_address":"","ucode":"59AFFFE9DA5B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/52/a2478536.jpg","comment_is_top":false,"comment_ctime":1538055617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538055617","product_id":100017301,"comment_content":"感觉现在很多算法实现啊都封装成库了 python程序员表示我只是一个代码包调用者","like_count":0},{"had_liked":false,"id":28337,"user_name":"顾言","can_delete":false,"product_type":"c1","uid":1184481,"ip_address":"","ucode":"79DDEDCADD1F49","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/e1/6d0114fe.jpg","comment_is_top":false,"comment_ctime":1538055474,"is_pvip":true,"replies":[{"id":"10202","content":"有道理！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062697,"ip_address":"","comment_id":28337,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538055474","product_id":100017301,"comment_content":"代码上线之后，做性能测试。我觉得是必须的一个环节，特别是直接面向大量用户的系统。但是在性能不影响使用的环境下，可以不用考虑时间，空间复杂度。除非是在性能测试不合格的情况下，我们再回来做这件事情，如果是代码的问题，再加以改进。每段代码都做时间复杂度分析，很有可能浪费了很多时间在那些不是经常使用的代码上。而且复杂度分析也是我们估算代码执行的时间，真正的执行时间还要考虑很多因素。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425238,"discussion_content":"有道理！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28335,"user_name":"普通的一天","can_delete":false,"product_type":"c1","uid":1007445,"ip_address":"","ucode":"9F1A81DFA7005A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/55/8cfeb42e.jpg","comment_is_top":false,"comment_ctime":1538055276,"is_pvip":false,"replies":[{"id":"10203","content":"多谢认可！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062715,"ip_address":"","comment_id":28335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538055276","product_id":100017301,"comment_content":"写的好好","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425236,"discussion_content":"多谢认可！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28331,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1103597,"ip_address":"","ucode":"3CA477F2DE7C7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/ed/e518b5f2.jpg","comment_is_top":false,"comment_ctime":1538053427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538053427","product_id":100017301,"comment_content":"以前真没有想过代码时间复杂度","like_count":0},{"had_liked":false,"id":28330,"user_name":"『LHCY』","can_delete":false,"product_type":"c1","uid":1188449,"ip_address":"","ucode":"A8B5E0467B5F25","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/61/bbfb2d4a.jpg","comment_is_top":false,"comment_ctime":1538053243,"is_pvip":false,"replies":[{"id":"10205","content":"写的很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062827,"ip_address":"","comment_id":28330,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538053243","product_id":100017301,"comment_content":"如果需要对一个长度为n的数组过滤并赋值，第一种方法过滤和赋值一起做，第二种是先过滤出来在遍历一次赋值，分为两个方法来操作数组，时间复杂度二者都一样O(n)，第二种多取一遍值，平均速度肯定会较慢，但是后期改变过滤方法或赋值方法好维护也好复用，这个时候是选择快，还是好维护，还是看这块逻辑是否对性能有够高的要求来决定。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425234,"discussion_content":"写的很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28329,"user_name":"每天学英语的小沈","can_delete":false,"product_type":"c1","uid":1024179,"ip_address":"","ucode":"C58FA38D8272FA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/b3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1538053103,"is_pvip":false,"replies":[{"id":"10206","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062857,"ip_address":"","comment_id":28329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538053103","product_id":100017301,"comment_content":"性能测试测出问题来，还是需要时间复杂度、空间复杂度分析来找到问题代码以及问题在哪里，而且，不要把问题留到性能测试，万一性能测试测不出来呢？而且与其写脏代码，等待性能测试有问题再改，为什么不一次性改好呢？查找问题，解决问题更浪费时间，尤其是问题代码不是你写的时候","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425233,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28324,"user_name":"bro.","can_delete":false,"product_type":"c1","uid":1124948,"ip_address":"","ucode":"D65283CD869804","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/54/c9990105.jpg","comment_is_top":false,"comment_ctime":1538051144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538051144","product_id":100017301,"comment_content":"空间复杂度就是给程序分配的空间嘛","like_count":0},{"had_liked":false,"id":28321,"user_name":"彩瓷菜","can_delete":false,"product_type":"c1","uid":1241843,"ip_address":"","ucode":"93A826B6D96618","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/f3/8fe906da.jpg","comment_is_top":false,"comment_ctime":1538050449,"is_pvip":false,"replies":[{"id":"10207","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062875,"ip_address":"","comment_id":28321,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538050449","product_id":100017301,"comment_content":"并非多此一举，因为性能测试是很费时间的，有些问题如果通过复杂度分析就能明确的发现有更好的方案，当然会节省很多时间，而且性能测试也未必能够做的足够全面，难免会有遗漏，测试数据也难保证理想。所以估算复杂度是有意义的。<br>另外代码虽然很多，但是数据增长量级很大的情况其实并不多，是可以抓住重点作分析的，而且加法法则和乘法法则也可在估算的时候使用。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425230,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28316,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1538049438,"is_pvip":false,"replies":[{"id":"10184","content":"你理解的完全没问题啊 唯一有一点要说的就是 在10万的平方面前 10万即便是忽略掉 也没关系 我们复杂度表示法本身就不是精确的执行时间的度量。他只表示一个执行时间随数据规模n变化的趋势。而这个趋势只会被最高阶左右。为了表达上简洁 我们忽略低阶","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538053291,"ip_address":"","comment_id":28316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538049438","product_id":100017301,"comment_content":"老师，关于这个加法法则，我有点不是太理解，以加法法则的示例代码为例，例如当前n为十万，循环2需要执行十万次，循环3则执行十万次的平方次，这样直接以最大的时间复杂度作为整段的时间复杂度，我有点没有太理解，为什么是O(n的平方)，不是O(n的平方+n)? ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425227,"discussion_content":"你理解的完全没问题啊 唯一有一点要说的就是 在10万的平方面前 10万即便是忽略掉 也没关系 我们复杂度表示法本身就不是精确的执行时间的度量。他只表示一个执行时间随数据规模n变化的趋势。而这个趋势只会被最高阶左右。为了表达上简洁 我们忽略低阶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538053291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28313,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1538048400,"is_pvip":false,"replies":[{"id":"10208","content":"是的 熟练之后几乎一眼就能看出来","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538062925,"ip_address":"","comment_id":28313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538048400","product_id":100017301,"comment_content":"事后分析法有局限性，不同测试机器的配置以及测试数据规模对测试结果都有很大影响，无法体现算法的普遍规律。渐进式的复杂度分析在熟练之后，也是容易进行操作的，不会占用太多时间就能分析出算法的时间、复杂度。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425226,"discussion_content":"是的 熟练之后几乎一眼就能看出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538062925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28307,"user_name":"Sandy","can_delete":false,"product_type":"c1","uid":1239815,"ip_address":"","ucode":"3097343BDAB831","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkpApOjdIb81ZHxeAup1IGH97eaD8oiawlCtUJdvct1AP6UfmmpYlE6r25tNM5cgOCgM3oAzpic5Aw/132","comment_is_top":false,"comment_ctime":1538047698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538047698","product_id":100017301,"comment_content":"上学时印象最深的就是NP难问题，完全听不懂","like_count":0},{"had_liked":false,"id":28306,"user_name":"Zherlock","can_delete":false,"product_type":"c1","uid":1248208,"ip_address":"","ucode":"02D321D434E72C","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/d0/a5eacd8c.jpg","comment_is_top":false,"comment_ctime":1538047466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538047466","product_id":100017301,"comment_content":"刚刚把思考题理解反了，，算时间复杂度肯定好啊，避免一开始就从一个时间消耗角度不可用的算法进行开发","like_count":0},{"had_liked":false,"id":28304,"user_name":"广进","can_delete":false,"product_type":"c1","uid":1235504,"ip_address":"","ucode":"A9A3FA76024577","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/30/f636914e.jpg","comment_is_top":false,"comment_ctime":1538047412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538047412","product_id":100017301,"comment_content":"前排总结得都好棒，因为时间关系，看了两天终于看完了，赞。突然有个想法，要是有个群让我们分享各自的理解或者互相答疑会更好。","like_count":0},{"had_liked":false,"id":28303,"user_name":"Zherlock","can_delete":false,"product_type":"c1","uid":1248208,"ip_address":"","ucode":"02D321D434E72C","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/d0/a5eacd8c.jpg","comment_is_top":false,"comment_ctime":1538047373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538047373","product_id":100017301,"comment_content":"Emmm,时间复杂度的概念，原本就觉得反常识，为什么常数低阶都可以忽略。后来自己开始编程了才出现一点感觉。<br>空间复杂度反而看起来更难了。而且这些个数据结构在不同语言里是同一种性质吗？C的列表和python一样吗？<br>至于用实际程序测时间消耗，我觉得是必不可少的环节，所有实际的系统都要经过这个步骤。","like_count":0},{"had_liked":false,"id":28288,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538043225,"is_pvip":false,"replies":[{"id":"10155","content":"不需要的 常用的就是大O","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044139,"ip_address":"","comment_id":28288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538043225","product_id":100017301,"comment_content":"老师，文章介绍了算法的上限O，那么需要了解下限吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425216,"discussion_content":"不需要的 常用的就是大O","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28287,"user_name":"赵捌玖","can_delete":false,"product_type":"c1","uid":1149424,"ip_address":"","ucode":"2DFD73F90609C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/f0/678e6643.jpg","comment_is_top":false,"comment_ctime":1538043170,"is_pvip":false,"replies":[{"id":"10156","content":"多谢认可！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044153,"ip_address":"","comment_id":28287,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538043170","product_id":100017301,"comment_content":"讲的很明白，期待下一期。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425215,"discussion_content":"多谢认可！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28279,"user_name":"sunson","can_delete":false,"product_type":"c1","uid":1198065,"ip_address":"","ucode":"F5729117B0ABA2","user_header":"","comment_is_top":false,"comment_ctime":1538040412,"is_pvip":false,"replies":[{"id":"10159","content":"感谢认可！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044199,"ip_address":"","comment_id":28279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538040412","product_id":100017301,"comment_content":"老师写的很棒！赞","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425209,"discussion_content":"感谢认可！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28278,"user_name":"刘浩","can_delete":false,"product_type":"c1","uid":1240624,"ip_address":"","ucode":"81F5D6E62751C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/30/cfdd1b86.jpg","comment_is_top":false,"comment_ctime":1538040387,"is_pvip":false,"replies":[{"id":"10160","content":"理解透彻","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044240,"ip_address":"","comment_id":28278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538040387","product_id":100017301,"comment_content":"哈哈，其实这个问题很好回答，性能测试工程师这种职位依旧存在自然说明不可替代。另外理论和实践是两码事，理论是实践的基础，并不能代替实践，退一万步讲，假设性能测试可被复杂度算法代替，但是作为风控的最后一关存在都是意义非凡的。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425208,"discussion_content":"理解透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28277,"user_name":"吕宁","can_delete":false,"product_type":"c1","uid":1248542,"ip_address":"","ucode":"5C36EFF6961E63","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/1e/7f2d5872.jpg","comment_is_top":false,"comment_ctime":1538039767,"is_pvip":false,"replies":[{"id":"10161","content":"算法导论并不适合当教材。建议买本其他书配合着看","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044285,"ip_address":"","comment_id":28277,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538039767","product_id":100017301,"comment_content":"今天研一开算法课，老师直接讲算法导论，刚讲到复杂度分析就蒙圈了，上出了数学课的感觉。递归式求解复杂度，各种级数求和，证明，主定理等等。看周围同学都很理解的样子，深深怀疑自己的智商。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425207,"discussion_content":"算法导论并不适合当教材。建议买本其他书配合着看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28275,"user_name":"王高兴","can_delete":false,"product_type":"c1","uid":1241245,"ip_address":"","ucode":"798526B0F076D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/9d/01158850.jpg","comment_is_top":false,"comment_ctime":1538039111,"is_pvip":false,"replies":[{"id":"10162","content":"嗯嗯 网上多搜搜 再看看书","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044302,"ip_address":"","comment_id":28275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538039111","product_id":100017301,"comment_content":"还要再看几遍","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425206,"discussion_content":"嗯嗯 网上多搜搜 再看看书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28257,"user_name":"youngshi","can_delete":false,"product_type":"c1","uid":1241326,"ip_address":"","ucode":"063478BDA53AB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/ee/ff6ec4f6.jpg","comment_is_top":false,"comment_ctime":1538034903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538034903","product_id":100017301,"comment_content":"大学都学过，一下子全记起来了，自从搞嵌入式就没有涉及这些理论了，全忘了，还好我决定转型，往互联网探索一番。","like_count":0},{"had_liked":false,"id":28254,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1538033817,"is_pvip":false,"replies":[{"id":"10169","content":"理解的正确👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538048250,"ip_address":"","comment_id":28254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538033817","product_id":100017301,"comment_content":"感觉老师讲的很清晰易懂。对于T(n) = O( f(n) )这个公式我有一些自己的理解，请老师帮我看下我的理解是否有误。谢谢！<br>1.它的概念是执行时间与每行代码总的执行次数成正比。<br>2.总的执行次数就相当于执行时间。<br>3.因为时间复杂度表示执行时间与数据规模之前的关系。所以每个推导出来的大O时间复杂度中都应该包含数据规模n。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425199,"discussion_content":"理解的正确👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538048250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28248,"user_name":"凉爽兄","can_delete":false,"product_type":"c1","uid":1245314,"ip_address":"","ucode":"6248378B5944B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/82/95528a96.jpg","comment_is_top":false,"comment_ctime":1538032553,"is_pvip":false,"replies":[{"id":"10170","content":"哈哈 是的 看来你数学很棒啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538048361,"ip_address":"","comment_id":28248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538032553","product_id":100017301,"comment_content":"我觉得O(f(n))就是f(n)的同阶无穷大","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425195,"discussion_content":"哈哈 是的 看来你数学很棒啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538048361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28246,"user_name":"D","can_delete":false,"product_type":"c1","uid":1173226,"ip_address":"","ucode":"C15C6649109A75","user_header":"https://static001.geekbang.org/account/avatar/00/11/e6/ea/43645f33.jpg","comment_is_top":false,"comment_ctime":1538032518,"is_pvip":false,"replies":[{"id":"10165","content":"对！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538044375,"ip_address":"","comment_id":28246,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538032518","product_id":100017301,"comment_content":"log(3,n)=log(2,n)&#47;log(2,3)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425194,"discussion_content":"对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538044375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28244,"user_name":"Reiser","can_delete":false,"product_type":"c1","uid":1078669,"ip_address":"","ucode":"E5DBBBA2F86FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/8d/c6a2a048.jpg","comment_is_top":false,"comment_ctime":1538031270,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538031270","product_id":100017301,"comment_content":"即便是测试也会存在测试用例不全的问题，我觉得 TDD 的精髓就在于每次写代码前就考虑到何种意外情况。写出低复杂度的代码应该是一种意识，而不是被动的改变。<br>想问一下，我总听到：“要不用时间换空间，要不用空间换时间”。时间复杂度和空间复杂度一定是呈反相关的吗？","like_count":0},{"had_liked":false,"id":28236,"user_name":"凉爽兄","can_delete":false,"product_type":"c1","uid":1245314,"ip_address":"","ucode":"6248378B5944B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/82/95528a96.jpg","comment_is_top":false,"comment_ctime":1538027741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538027741","product_id":100017301,"comment_content":"想问两个问题<br>1.对数也不是多项式，为什么被分作多项式量级？<br>2.做矩阵乘法，不同大小的矩阵运算时间不同，但是反映在代码上都是执行一次(比如用matlab矩阵运算)，能说时间复杂度都是O(1)吗？","like_count":0},{"had_liked":false,"id":28229,"user_name":"k","can_delete":false,"product_type":"c1","uid":1220662,"ip_address":"","ucode":"8462BE2B3B2797","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/36/8c2d98d0.jpg","comment_is_top":false,"comment_ctime":1538027032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538027032","product_id":100017301,"comment_content":"1 复杂度分析就是衡量数据结构和算法效率的方式之一。<br>2 分析的效率主要指标就是“多快好省”，多快对应时间复杂度分析，好省对应空间复杂度分析。3 复杂度分析主要反应代码执行时间和占用空间随着数据规模增大的一个趋势。","like_count":0},{"had_liked":false,"id":28226,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1538026448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538026448","product_id":100017301,"comment_content":"看了资料明白了，O(n^2)=O(n^3)，它们其实不是两边对称，只是O(n^2)属于O(n^3)的子集。所以上面的例子使用加法法则与乘法法则结果都是一样的。","like_count":0},{"had_liked":false,"id":28225,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1538026061,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1538026061","product_id":100017301,"comment_content":"我感觉性能测试和实际测试是两种标准，两头抓。一种实际一种理论，理论更直接成本低，性能测试更实际但成本高","like_count":0},{"had_liked":false,"id":28213,"user_name":"日月星","can_delete":false,"product_type":"c1","uid":1249386,"ip_address":"","ucode":"9FBA615B9C58F6","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/6a/d15adb86.jpg","comment_is_top":false,"comment_ctime":1538023560,"is_pvip":false,"replies":[{"id":"10146","content":"cpu的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538027360,"ip_address":"","comment_id":28213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538023560","product_id":100017301,"comment_content":"空间复杂度影响内存是肯定的了，但时间复杂度只是影响cpu么，还是说他们都影响cpu和内存。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425182,"discussion_content":"cpu的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538027360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28209,"user_name":"镇嘉","can_delete":false,"product_type":"c1","uid":1240991,"ip_address":"","ucode":"D1D6367EFF3402","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/9f/388c5654.jpg","comment_is_top":false,"comment_ctime":1538023112,"is_pvip":false,"replies":[{"id":"10212","content":"i不放在前面也可以。没区别的<br>比较傻是因为那段代码纯粹是为了讲复杂度分析编出来的。也没啥好优化的了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538063306,"ip_address":"","comment_id":28209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538023112","product_id":100017301,"comment_content":"老师，我想问一下举例的代码中为什么 for 循环中 i的初始值赋值为什么要放在前面先赋值，而不是放在 for 循环赋值？ 还有就是你举例的那个空间复杂度相关的代码为什么说有点傻，是那个代码可以做改进吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425179,"discussion_content":"i不放在前面也可以。没区别的\n比较傻是因为那段代码纯粹是为了讲复杂度分析编出来的。也没啥好优化的了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538063306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28197,"user_name":"GradleX","can_delete":false,"product_type":"c1","uid":1252635,"ip_address":"","ucode":"B4BD3DA2F728AA","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/1b/5f26dcfd.jpg","comment_is_top":false,"comment_ctime":1538019635,"is_pvip":false,"replies":[{"id":"10213","content":"👍👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538063352,"ip_address":"","comment_id":28197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538019635","product_id":100017301,"comment_content":"事后分析法缺点：①依赖测试环境（如不同机器的运行速度不同） ②受数据规模影响（如数据规模小则难以比较）  <br>大O复杂度表示法：由O()表示算法执行时间&#47;占用空间与数据规模的增长关系（参数忽略低阶&#47;常量&#47;系数的最高阶的执行次数&#47;存储数量）<br>复杂度分析：低阶&#47;常量&#47;系数不影响增长趋势（增长曲线斜率的变化趋势），都可忽略（以代码中最大复杂度为主）<br><br>①时间复杂度<br>将每行代码的单次执行过程（读数据-运算-写数据）粗略当作时间相同的基本操作则代码执行总时间T(n)与代码执的总次数f(n)成正比（T(n)=Of(n)，O表示T(n)与f(n)成正比）<br>int cal(int n) {<br>\tint sum = 0;<br>\tint i = 0;<br>\tfor (; i &lt;n;i++) {<br>\t\tint j=0;<br>\t\tfor(;j&lt;n;j++){<br>\t\t\tsum = sum + i*j;<br>\t\t}<br>\t}<br>\treturn sum;<br>}<br>代码执行总时间：T(n)=(2n^2+2n+2)*unit_time<br>时间复杂度：O(n^2)<br><br>②常见复杂度量级：<br>多项式量级<br>常数阶O(1)<br>\t\t\t线性阶O(n)<br>\t\t\t对数阶O(logn)<br>\t\t\t线性对线O(nlogn)<br>\t\t\tK方阶级O(n^k) :\t平方阶O(n^2)&#47;立方阶O(n^3)<br>非多项式量级<br>指数阶O(2^n) <br>\t\t\t阶乘阶O(n!) <br><br>   <br><br>非多项式量级的复杂度会随数据规模增大而暴增，为低效率算法<br><br>O(logn)<br>int i=1;<br>while (i&lt;=n){<br>\ti=i*2;<br>}<br><br>2^x=n<br>执行次数：f(n)=x=log2(n)<br>时间复杂度：O(logn) （对数忽略系数即形式上忽略底数）<br><br>O(nlogn)<br>int j=1;<br>int i=1;<br>for(;j&lt;=n;j++){<br>\twhile (i&lt;=n){<br>\t\ti=i*2;<br>\t}<br>}<br>时间复杂度：O(nlogn)<br><br>int cal(){<br>\tint sum=0<br>\tfor(int i=0;i&lt;m;i++){<br>\t\tsum=sum+i;<br>\t}<br><br>\tfor(int j=0;j&lt;n;j++){<br>\t\tsum=sum+j;<br>\t}<br>}<br>时间复杂度：O(n+m) 对于无法确定的数量规模的最大阶复杂度都不可忽略<br><br>空间复杂度<br>void print(int n){<br><br>\tint []a=new int[n];<br>\tfor(int i=0;i&lt;n;i++){<br>\t\ta[i]=i*i;<br>\t}<br>\tfor(i=0;i&lt;n;i-++){<br>\t\tprint out a[i];<br>\t}<br>} <br>空间复杂度：O(n)<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425174,"discussion_content":"👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538063352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28190,"user_name":"韦爷","can_delete":false,"product_type":"c1","uid":1077583,"ip_address":"","ucode":"A94354C1BDB30F","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/4f/cb764658.jpg","comment_is_top":false,"comment_ctime":1538018260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538018260","product_id":100017301,"comment_content":"非程序员也看得懂，但还是觉得没有练习检验的话，无法确认是否真的懂了。毕竟工程类的知识和得到那边的通识内容是不一样的","like_count":0},{"had_liked":false,"id":28188,"user_name":"对呀👾","can_delete":false,"product_type":"c1","uid":1239225,"ip_address":"","ucode":"C2C6D7AD8020CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/b9/bfa75e2c.jpg","comment_is_top":false,"comment_ctime":1538017886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538017886","product_id":100017301,"comment_content":"如果就业务而言，可以针对利用率高的功能做复杂度分析优化","like_count":0},{"had_liked":false,"id":28182,"user_name":"何领","can_delete":false,"product_type":"c1","uid":1240298,"ip_address":"","ucode":"F0F2B11CF5C9FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/ea/c33e5a3d.jpg","comment_is_top":false,"comment_ctime":1538016644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538016644","product_id":100017301,"comment_content":"感觉都看懂了，但一想不应该这么简单吧，等明天的下篇看看还有啥","like_count":0},{"had_liked":false,"id":28177,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1538016016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538016016","product_id":100017301,"comment_content":"老师讲的很棒！么么哒爱你呦","like_count":0},{"had_liked":false,"id":28176,"user_name":"宋意","can_delete":false,"product_type":"c1","uid":1229043,"ip_address":"","ucode":"2CCFDB02BA8ADF","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/f3/281ccb06.jpg","comment_is_top":false,"comment_ctime":1538015897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538015897","product_id":100017301,"comment_content":"时间复杂度有高中数学基础就可以学会，关键是看循环执行的次数。空间复杂度就看申请了多少内存，很多情况下会使用空间换时间，比如缓存机制","like_count":0},{"had_liked":false,"id":28172,"user_name":"爱Python","can_delete":false,"product_type":"c1","uid":1252214,"ip_address":"","ucode":"6B428B7B75DE41","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/76/e9057a30.jpg","comment_is_top":false,"comment_ctime":1538015046,"is_pvip":false,"replies":[{"id":"10135","content":"1. 你看的很仔细 不过是n还是n+1都不影响最后的时间复杂度<br>2. 这个你可以先不去深究 等讲到后面字符串那一节就会详细的讲 也有例子","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538021260,"ip_address":"","comment_id":28172,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538015046","product_id":100017301,"comment_content":"老师，累加求和的代码第四行的执行次数为什么是n?我认为是n+1，还有O(m+n)和O(m*n)这两个我有点迷，m,n量级不确定时应该用O(m+n)?O(m*n)是哪种情况？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425166,"discussion_content":"1. 你看的很仔细 不过是n还是n+1都不影响最后的时间复杂度\n2. 这个你可以先不去深究 等讲到后面字符串那一节就会详细的讲 也有例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538021260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28162,"user_name":"Kyle Liu","can_delete":false,"product_type":"c1","uid":1109324,"ip_address":"","ucode":"21EBDE63DE30A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/4c/4f645bda.jpg","comment_is_top":false,"comment_ctime":1538013749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538013749","product_id":100017301,"comment_content":"仔细研读了，有喝多模糊的地方都清晰明了。有很大提升，非常感谢大佬","like_count":0},{"had_liked":false,"id":28158,"user_name":"Geek_c42505","can_delete":false,"product_type":"c1","uid":1232899,"ip_address":"","ucode":"6421EB85640C44","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/03/2e632d36.jpg","comment_is_top":false,"comment_ctime":1538013059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538013059","product_id":100017301,"comment_content":"在开发之前，技术选型之前，考虑时间空间的复杂度，选择复杂度低的技术实现，要比时候测试然后修改的效率高很多。还有在codeing的时候养成关注时间空间复杂度的习惯，非常有利于写出高效的代码。","like_count":0},{"had_liked":false,"id":28154,"user_name":"tedyhy","can_delete":false,"product_type":"c1","uid":1013480,"ip_address":"","ucode":"D391471755E4CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/e8/ead34564.jpg","comment_is_top":false,"comment_ctime":1538012671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538012671","product_id":100017301,"comment_content":"不太理解多项式和非多项式的概念，比如为什么叫多项式？","like_count":0},{"had_liked":false,"id":28153,"user_name":"Leo Wang","can_delete":false,"product_type":"c1","uid":1238316,"ip_address":"","ucode":"FFF039FB1970DB","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/2c/a0f19579.jpg","comment_is_top":false,"comment_ctime":1538012644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538012644","product_id":100017301,"comment_content":"只学过C++的我看这些竟然不会很吃力ψ(｀∇´)ψ不过n！复杂度的会是什么样的代码啊","like_count":0},{"had_liked":false,"id":28144,"user_name":"Ivan","can_delete":false,"product_type":"c1","uid":1050799,"ip_address":"","ucode":"3DB2644ACCFBE5","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/af/9841214e.jpg","comment_is_top":false,"comment_ctime":1538012227,"is_pvip":false,"replies":[{"id":"10136","content":"可以作为有力的证据。都是考量程序的性能 只是方法不一样 一个是理论上 一个是真实情况下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538021367,"ip_address":"","comment_id":28144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538012227","product_id":100017301,"comment_content":"先听一遍，再看一遍，再练一遍，再留言，再看留言，我就不信了别人都能学好算法数据结构，我就不行吗✋<br><br>有个问题，压力测试可以作为复杂度分析的有力佐证吗？还是他们二者的目的本质上就是不同的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425155,"discussion_content":"可以作为有力的证据。都是考量程序的性能 只是方法不一样 一个是理论上 一个是真实情况下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538021367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28142,"user_name":"小陌","can_delete":false,"product_type":"c1","uid":1241634,"ip_address":"","ucode":"8F40534C6C37D5","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/22/07839a28.jpg","comment_is_top":false,"comment_ctime":1538012091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538012091","product_id":100017301,"comment_content":"更新速度要能再快一些就好了","like_count":0},{"had_liked":false,"id":28141,"user_name":"吐司是只猫","can_delete":false,"product_type":"c1","uid":1142077,"ip_address":"","ucode":"24C4C66B5A9056","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/3d/01663ab7.jpg","comment_is_top":false,"comment_ctime":1538012029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538012029","product_id":100017301,"comment_content":"整了5年都没整明白，今天终于明白了","like_count":0},{"had_liked":false,"id":28137,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1538011802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538011802","product_id":100017301,"comment_content":"我竟然都看懂了，我只能想到一个原因就是老师的功力太深厚了","like_count":0},{"had_liked":false,"id":28135,"user_name":"andi轩","can_delete":false,"product_type":"c1","uid":1214649,"ip_address":"","ucode":"3AE241BE60A3E0","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/b9/af5db174.jpg","comment_is_top":false,"comment_ctime":1538011621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538011621","product_id":100017301,"comment_content":"老师，下面这段代码<br>int i=2;<br>while(i &lt;=n) {<br>    i=i*i;<br>}<br>我理解，时间复杂度是O(根号n)，对吗？","like_count":0},{"had_liked":false,"id":28134,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1538011508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538011508","product_id":100017301,"comment_content":"先跟着语音听一遍，再自己回顾一遍。讲真可能现在的工作用到的复杂度分析很少，但学习作为自己的知识储备是很好的。关于作者讲的分析方法，无论哪一种方法，我们需要找到执行次数最多的那段代码，判断次数，使用该代码执行的量级，便是这一段代码的时间复杂度。","like_count":0},{"had_liked":false,"id":28130,"user_name":"1.","can_delete":false,"product_type":"c1","uid":1236370,"ip_address":"","ucode":"F6F74F35D95F6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/92/0b7d5da9.jpg","comment_is_top":false,"comment_ctime":1538011217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538011217","product_id":100017301,"comment_content":"前面说n表示每行代码的执行次数，后面说n表示代码的体量，小白一个，求老师解惑！","like_count":0},{"had_liked":false,"id":28125,"user_name":"James Scott","can_delete":false,"product_type":"c1","uid":1255048,"ip_address":"","ucode":"E673BD69503693","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/88/e8098480.jpg","comment_is_top":false,"comment_ctime":1538010573,"is_pvip":false,"replies":[{"id":"10137","content":"哈哈 没太大区别 理解就好 不要可以区别","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538021476,"ip_address":"","comment_id":28125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538010573","product_id":100017301,"comment_content":"您好，王老师。我想问您一个问题，就是您上面提到的时间复杂度分析的第一种和第二种方法好像都是只关注代码执行次数最多的一段代码的执行效率，请问这两种有什么区别吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425150,"discussion_content":"哈哈 没太大区别 理解就好 不要可以区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538021476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28118,"user_name":"零维","can_delete":false,"product_type":"c1","uid":1235055,"ip_address":"","ucode":"D783CB1D59D1BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/6f/22e5ec55.jpg","comment_is_top":false,"comment_ctime":1538010052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538010052","product_id":100017301,"comment_content":"我也不认为多此一举。计算机的进化速度远远超出人的进化速度，我们无法想象在短短的几年后我们的应用会变成多少量级的，所以写出复杂度低的代码就尤为关键。<br>再者，事后测试的方式受不确定性影响太多了，所以分析复杂度的意义就更大了。","like_count":0},{"had_liked":false,"id":28109,"user_name":"Atlas","can_delete":false,"product_type":"c1","uid":1121831,"ip_address":"","ucode":"C41D8AFE815004","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/27/b5b7a2b7.jpg","comment_is_top":false,"comment_ctime":1538009484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538009484","product_id":100017301,"comment_content":"理论联系实际 事半功倍<br>","like_count":0},{"had_liked":false,"id":28107,"user_name":"ftutor","can_delete":false,"product_type":"c1","uid":1029301,"ip_address":"","ucode":"D4FBD897B4EE72","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b4/b5/1c177be2.jpg","comment_is_top":false,"comment_ctime":1538009363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538009363","product_id":100017301,"comment_content":"性能测试覆盖大部分case，保险程序在大部分场景不出问题，不一定能覆盖最坏的情况，而复杂度分析可以极端情况考虑在内，对程序执行速度有个预期","like_count":0},{"had_liked":false,"id":28104,"user_name":"yasin","can_delete":false,"product_type":"c1","uid":1248702,"ip_address":"","ucode":"129D6B1B0A9A10","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Ltu4XZ6MHlbeVk4Kt8aU4kPH7KK6FlTPwK5K6S1zX4y2wTF7J86SzFrfj6dDYkk1icgyPKiacUw0rcJvXucwPSKw/132","comment_is_top":false,"comment_ctime":1538009175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538009175","product_id":100017301,"comment_content":"关于代码的复杂度分析，应该是在编写代码的过程中，程序员自身去分析优化。<br>性能测试是帮助排解一些在开发过程中被忽略掉的性能问题。<br>这就像功能测试的道理一样，反正都要功能测试，难道就不需要认真开发功能了吗😅","like_count":0},{"had_liked":false,"id":28100,"user_name":"CH.en","can_delete":false,"product_type":"c1","uid":1142436,"ip_address":"","ucode":"F7035EBA519E48","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/a4/e3bb31e0.jpg","comment_is_top":false,"comment_ctime":1538008627,"is_pvip":false,"replies":[{"id":"10107","content":"哈哈 多谢理解","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538010386,"ip_address":"","comment_id":28100,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538008627","product_id":100017301,"comment_content":"首先对于老师的更正错误的速度点赞。昨天看到的错误，没来的及留言指出。结果今天一看的时候还以为昨天我看错了。已经全部更正了点赞。<br><br>对于算法复杂度分析和性能测试，一楼说的很到位，我认为算法复杂度分析和性能测试都是非常有必要的，前者对让我们自己对代码的运行时间效率提前有一个自己的预期，而性能测试是代码的实际运行情况，如果性能测试与之前我们算法分析的预期有较大差异，我们也能快速的定位到问题所在。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425143,"discussion_content":"哈哈 多谢理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538010386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28099,"user_name":"止","can_delete":false,"product_type":"c1","uid":1249640,"ip_address":"","ucode":"799F3A95B962FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/68/35f0b6d0.jpg","comment_is_top":false,"comment_ctime":1538008526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538008526","product_id":100017301,"comment_content":"时刻对时间复杂度和空间复杂度的关心可以写出质量更好的算法","like_count":0},{"had_liked":false,"id":28093,"user_name":"一颗菜","can_delete":false,"product_type":"c1","uid":1242396,"ip_address":"","ucode":"5458554E264FB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/1c/20090248.jpg","comment_is_top":false,"comment_ctime":1538008197,"is_pvip":false,"replies":[{"id":"10108","content":"cal函数调用了f函数的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538010788,"ip_address":"","comment_id":28093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538008197","product_id":100017301,"comment_content":"1int cal(int n) {<br>2   int ret = 0; <br>3   int i = 1;<br>4   for (; i &lt; n; ++i) {<br>5     ret = ret + f(i);<br>6   } <br>7 } <br>8 <br>9 int f(int n) {<br>10  int sum = 0;<br>11  int i = 1;<br>12  for (; i &lt; n; ++i) {<br>13    sum = sum + i;<br>14  } <br>15  return sum;<br>16 }<br>这不是两个独立的方法吗，f()不归属上面一个方法，怎么会是乘法法则？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425140,"discussion_content":"cal函数调用了f函数的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538010788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28083,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1123243,"ip_address":"","ucode":"E050E14BA0D115","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/ab/dca51819.jpg","comment_is_top":false,"comment_ctime":1538006969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538006969","product_id":100017301,"comment_content":"有个小问题，就是乘方和相乘的符号，看上去是一样的？","like_count":0},{"had_liked":false,"id":28082,"user_name":"龙腾18","can_delete":false,"product_type":"c1","uid":1236736,"ip_address":"","ucode":"33BD39B0DD605F","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/00/5828ca86.jpg","comment_is_top":false,"comment_ctime":1538006851,"is_pvip":false,"replies":[{"id":"10109","content":"嗯嗯 看的好仔细啊 严格从数学公式上讲 确实是的。不过我们这是只是表示一个增长趋势的差别。实际上起点并不重要","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538010908,"ip_address":"","comment_id":28082,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538006851","product_id":100017301,"comment_content":"老师，nlogn在坐标系第一象限的图不对的吧在n=1的时候为0的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425136,"discussion_content":"嗯嗯 看的好仔细啊 严格从数学公式上讲 确实是的。不过我们这是只是表示一个增长趋势的差别。实际上起点并不重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538010908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28075,"user_name":"YYT","can_delete":false,"product_type":"c1","uid":1249912,"ip_address":"","ucode":"48EFC70726B9C5","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/78/c80b7133.jpg","comment_is_top":false,"comment_ctime":1538006343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538006343","product_id":100017301,"comment_content":"代码的时间复杂度空间复杂度是我们在运行程序前的对代码的直观理解，有助于我们预判程序和改进程序，所以这不是一个多余的步骤，同时由于预判，之前便能很好的了解程序，选择更优化的程序，对后面的工作可以节省不少的时间，所以这也并不浪费时间。但是最好是在编程的时候就具有这种复杂度的大榄，进而编写出复杂度比较小的，运行比较高效的程序。<br>同时不同的测试环境对同一个算法，执行效果也不近相同，这就需要我们先做性能测试，再做代码复杂度分析。","like_count":0},{"had_liked":false,"id":28067,"user_name":"木子风吹","can_delete":false,"product_type":"c1","uid":1254105,"ip_address":"","ucode":"F0897E110898C0","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d9/003730a3.jpg","comment_is_top":false,"comment_ctime":1538004142,"is_pvip":false,"replies":[{"id":"10111","content":"for i =0；i《 m；++i<br>    for j = 0；j 《 n；++j<br>        ......<br><br><br>这个样子就是O（m*n）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538011116,"ip_address":"","comment_id":28067,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538004142","product_id":100017301,"comment_content":"3.O(m+n)，O(m*n)这节有点明白，那段代码的时间复杂度因为m 和n不确定，所以是O(m)+O(n)，这个理解，但后面又说O(M*N)不太懂什么意思，请老师和各位大佬解答解答","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425134,"discussion_content":"for i =0；i《 m；++i\n    for j = 0；j 《 n；++j\n        ......\n\n\n这个样子就是O（m*n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538011116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28063,"user_name":"windliang","can_delete":false,"product_type":"c1","uid":1234620,"ip_address":"","ucode":"D31E26BFB09DE6","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/bc/026ac6b1.jpg","comment_is_top":false,"comment_ctime":1538003793,"is_pvip":false,"replies":[{"id":"10112","content":"下节课已经定稿了 改不了了 我后面抽时间再讲吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538011159,"ip_address":"","comment_id":28063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1538003793","product_id":100017301,"comment_content":"老师，麻烦您下节课可以讲几个递归的时间复杂的分析。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425132,"discussion_content":"下节课已经定稿了 改不了了 我后面抽时间再讲吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538011159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28057,"user_name":"zero_","can_delete":false,"product_type":"c1","uid":1075267,"ip_address":"","ucode":"14D3AD3D997112","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/43/1fe64086.jpg","comment_is_top":false,"comment_ctime":1537997828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537997828","product_id":100017301,"comment_content":"时间复杂度，空间复杂度","like_count":0},{"had_liked":false,"id":28044,"user_name":"学渣！！！","can_delete":false,"product_type":"c1","uid":1224654,"ip_address":"","ucode":"A224265D9E7CCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/ce/d7ae8da9.jpg","comment_is_top":false,"comment_ctime":1537981107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537981107","product_id":100017301,"comment_content":"性能测试是建立在开发基本完成的，我们可以在开发过程中先确定好时间，空间复杂度岂不是更好。并且性能测试可能根据我们机器不同，数据量不同可能得出的结果也不一样，虽然时间，空间复杂度的分析会浪费点时间，可熟悉了也还好😀","like_count":0},{"had_liked":false,"id":28043,"user_name":"🙃","can_delete":false,"product_type":"c1","uid":1251431,"ip_address":"","ucode":"2F5A34A693901F","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/67/14839170.jpg","comment_is_top":false,"comment_ctime":1537980770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537980770","product_id":100017301,"comment_content":"对两种复杂度的分析是很有必要的，我们的存储空间都是有限的如果做一个项目用去了很多的空间，那么这个利用率就不高，而对于时间复杂度，如果时间复杂度过高，我们在完成某一项大型任务时就会用去很多时间，这不仅会浪费了电脑资源，还会浪费了人的时间，另外如果某个软件程序时间复杂度过高，那么用户体验就会很差，这样就会失去很多忠实用户，不利于公司的发展","like_count":0},{"had_liked":false,"id":28042,"user_name":"虚拟边缘","can_delete":false,"product_type":"c1","uid":1204302,"ip_address":"","ucode":"C255A56C73D0AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/4e/56e392ce.jpg","comment_is_top":false,"comment_ctime":1537980658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537980658","product_id":100017301,"comment_content":"王老师讲的太好了，我要重新拾起信心，在算法学习的道路上越走越远。","like_count":0},{"had_liked":false,"id":28040,"user_name":"Feng","can_delete":false,"product_type":"c1","uid":1019678,"ip_address":"","ucode":"4328C3CE24A8E3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/1e/c7e77731.jpg","comment_is_top":false,"comment_ctime":1537980423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537980423","product_id":100017301,"comment_content":"复杂度分析【很重要】<br><br>事后统计法的局限性<br>- 测试结果依赖测试环境；<br>   不同的处理器，不同的代码不同机器的不同结果。<br>- 结果受数据规模影响大；<br>   待处理的数据有序度，影响不同排序方式的效率。<br><br>所以需要无需具体数据测试即可粗略估算执行效率的方法，即时间，空间复杂度分析方法。<br>-------<br>大O复杂度表示法<br>执行时间与每行代码执行次数成正比，公式。<br>表示代码执行时间随数据规模增长的变化趋势。<br>全称渐进时间复杂度，简称时间复杂度。<br> 如何分析:<br>- 只关注执行次数最多的一段代码。记录复杂度取最大阶的量级，<br>- 加法法则:总复杂度等于量级最大的那段代码的复杂度，【ps:常量级执行，只要是已知数就和n无关，常量本身对增长趋势无影响，不管执行时间多大，暂忽略】<br>- 乘法法则:嵌套代码复杂度等于内外代码复杂度的乘积，【具体比如，代码中的嵌套循环】<br><br>几种常见时间复杂度实例分析:<br>粗略分为     多项式量级 + 非多项式量级<br><br>主要看多项式量级:<br>- O(1)  常量级 一般不存在循环或递归语句。<br>- O(logn).O(nlogn)  对数阶时间复杂度 常见也最难分析;另采用大O标记复杂度时，可忽略系数，在此忽略对数的&quot;底&quot;。<br>- O(m+n).O(m*n)  当代码复杂度由两个数据规模来决定。<br>-------<br>空间复杂度<br>全称渐进空间复杂度，表示算法的存储空间与数据规模之间的关系。<br>空间复杂度常用仅O(1)、O(n)、O(n²)，分析也较时间复杂度分析简单。<br>-------<br>课后思考<br>关于复杂度的分析，个人并不觉得多此一举，格外重要，反而会有乐趣，目标是写有美感的代码，找到时间和空间上的和谐，不过分追求低阶或高阶，趁手好用就好，有时候看身边伙伴们的代码，会有惊喜的感觉，互相捉虫，互相学习成长。<br>","like_count":0},{"had_liked":false,"id":28036,"user_name":"一马行千里","can_delete":false,"product_type":"c1","uid":1188090,"ip_address":"","ucode":"7725D8629B0265","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/fa/6ebaacb0.jpg","comment_is_top":false,"comment_ctime":1537978904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537978904","product_id":100017301,"comment_content":"脑子里有清晰的复杂度概念和分析方法，更能写出高效的代码","like_count":0},{"had_liked":false,"id":28035,"user_name":"李斯大炮","can_delete":false,"product_type":"c1","uid":1191464,"ip_address":"","ucode":"8CB9C681634784","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/28/9c3adea2.jpg","comment_is_top":false,"comment_ctime":1537978542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537978542","product_id":100017301,"comment_content":"滴~今日打卡，似有所得慢慢消化","like_count":0},{"had_liked":false,"id":28029,"user_name":"缓哟","can_delete":false,"product_type":"c1","uid":1241391,"ip_address":"","ucode":"0D560AFCA6BECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/2f/3ec9fcfb.jpg","comment_is_top":false,"comment_ctime":1537977414,"is_pvip":false,"replies":[{"id":"10115","content":"😄 性能测试不是项目之前。是开发完成之后 测一测开发出来的系统的性能。你可以自己搜索一下 了解一下基本概念","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1538011352,"ip_address":"","comment_id":28029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537977414","product_id":100017301,"comment_content":"糟糕 不知道做项目之前的性能测试是什么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425123,"discussion_content":"😄 性能测试不是项目之前。是开发完成之后 测一测开发出来的系统的性能。你可以自己搜索一下 了解一下基本概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538011352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28028,"user_name":"流浪猫","can_delete":false,"product_type":"c1","uid":1250376,"ip_address":"","ucode":"E13E2A6E618160","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/48/a93361d2.jpg","comment_is_top":false,"comment_ctime":1537977327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537977327","product_id":100017301,"comment_content":"讲的很好，看懂了以前没看懂的对数复杂度的解释。<br>性能测试不能代替时间复杂度分析，性能测试受限于所选测试数据量，例如一万次或十万次，但其实可能十万次的时间是可以接受的，而百万次的时间已慢的绝不可接受。而且有时受限于数据大小，小数据量对于糟糕的算法，运行时间也是可以接受的，但是生产上是大数据量，糟糕的算法性能就急剧下降了。","like_count":0},{"had_liked":false,"id":28022,"user_name":"Rancood","can_delete":false,"product_type":"c1","uid":1204333,"ip_address":"","ucode":"052BDF2221F480","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/6d/e2576fda.jpg","comment_is_top":false,"comment_ctime":1537976329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537976329","product_id":100017301,"comment_content":"大O复杂度表示法，执行时间随数据规模增长的变化趋势（渐进式时间复杂度），从低阶到高阶：O(1)-O(logn)-O(n)-O(nlogn)-O(n2)。n表示数据规模大小。<br>时间复杂度分析：1只关注循环执行次数最多的一段代码，2加法法则：选择最大量级的那段代码的复杂度，3乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘机","like_count":0},{"had_liked":false,"id":28021,"user_name":"Fisher","can_delete":false,"product_type":"c1","uid":1138887,"ip_address":"","ucode":"F3063BCEBC9F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/c7/a147b71b.jpg","comment_is_top":false,"comment_ctime":1537976327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537976327","product_id":100017301,"comment_content":"这篇文章最大的收获是：时间复杂度是表示代码执行时间随数据规模增长的变化趋势，这句话从本质上讲清楚了时间复杂度是干什么的，一直以来对时间复杂度感觉畏惧，就是因为没有从原理上弄清楚他到底是干嘛的，所以排序算法的时间复杂度都是死记硬背，时间一久就忘记，对于时间复杂度的分析为什么去掉常量也做了说明，掌握了方法剩下的确实就是练习了","like_count":0},{"had_liked":false,"id":28014,"user_name":"Never too late","can_delete":false,"product_type":"c1","uid":1250748,"ip_address":"","ucode":"A6ECC0D3907181","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/bc/20ffd8d1.jpg","comment_is_top":false,"comment_ctime":1537975457,"is_pvip":false,"replies":[{"id":"10084","content":"是的 我故意没讲 一块讲更容易混 而且一般都用大O表示","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976444,"ip_address":"","comment_id":28014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537975457","product_id":100017301,"comment_content":"算法导论里面还讲解了小o和w标记法，也就是渐进上届和渐进下届","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425116,"discussion_content":"是的 我故意没讲 一块讲更容易混 而且一般都用大O表示","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28012,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1537975175,"is_pvip":false,"replies":[{"id":"10085","content":"暂时不需要 常用的就是大O 感兴趣的话可以去了解下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976498,"ip_address":"","comment_id":28012,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537975175","product_id":100017301,"comment_content":"渐进分析的其他符号是否需要理解？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425115,"discussion_content":"暂时不需要 常用的就是大O 感兴趣的话可以去了解下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28009,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1537974728,"is_pvip":false,"replies":[{"id":"10083","content":"应该是O S我没听说过啊 你哪本书里看到的呀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537975228,"ip_address":"","comment_id":28009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537974728","product_id":100017301,"comment_content":"还有空间复杂度不是一般使用S来进行标记的吗？为什么文章里还是用O来表示？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425114,"discussion_content":"应该是O S我没听说过啊 你哪本书里看到的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537975228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28005,"user_name":"范柏柏","can_delete":false,"product_type":"c1","uid":1130596,"ip_address":"","ucode":"942D1784D42349","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/64/a4058693.jpg","comment_is_top":false,"comment_ctime":1537974456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537974456","product_id":100017301,"comment_content":"由现在开始就应该培养自己一种思维。<br>不是写完程序事后去优化。<br>而是在敲之前就清晰的把握最优的复杂度。<br>期待老师后续的课程。","like_count":0},{"had_liked":false,"id":28003,"user_name":"守着云开","can_delete":false,"product_type":"c1","uid":1183885,"ip_address":"","ucode":"22220485396D0D","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/8d/43edb2dd.jpg","comment_is_top":false,"comment_ctime":1537974445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537974445","product_id":100017301,"comment_content":"看懂啦 老师带我飞","like_count":0},{"had_liked":false,"id":28002,"user_name":"黑桃K","can_delete":false,"product_type":"c1","uid":1234939,"ip_address":"","ucode":"1439F7F46B4982","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/fb/384ef0a1.jpg","comment_is_top":false,"comment_ctime":1537974357,"is_pvip":false,"replies":[{"id":"10088","content":"理解的到位！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976622,"ip_address":"","comment_id":28002,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537974357","product_id":100017301,"comment_content":"思考题回答：从复杂度分析上，理论角度可以简单辅助判别数据量极大的情况下的效率。但是性能测试作为开篇讲到的事后测试，往往在特定的平台和基准下有特定的表现，两者都很重要。如果在编码时结合利用复杂度分析，择优选择算法，对后面性能测试会起到良性结果。当然，不排除特定情况下o（n）的算法比o（logn）好。<br>总结：高阶优先，加法法则，乘法法则，非多项式复杂度，多数据规模复杂度，空间复杂度","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425111,"discussion_content":"理解的到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27990,"user_name":"斗米担米","can_delete":false,"product_type":"c1","uid":1199203,"ip_address":"","ucode":"35BA47EF3B0C2E","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/63/f5988a98.jpg","comment_is_top":false,"comment_ctime":1537973595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537973595","product_id":100017301,"comment_content":"性能测试应该不能检测到具体耗时耗内存的位置，复杂度分析还是很有意义的","like_count":0},{"had_liked":false,"id":27986,"user_name":"万利","can_delete":false,"product_type":"c1","uid":1243194,"ip_address":"","ucode":"F06D7ED8CA60B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/3a/45a21606.jpg","comment_is_top":false,"comment_ctime":1537973114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537973114","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":27983,"user_name":"蔷薇骑士","can_delete":false,"product_type":"c1","uid":1246743,"ip_address":"","ucode":"09F0F8AF71C75C","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/17/9e6ec02e.jpg","comment_is_top":false,"comment_ctime":1537972932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972932","product_id":100017301,"comment_content":"性能测试是实践检验，是很有必要的，但它像文中所说受限于测试环境，数据规模，测试场景，也是有局限性的。而复杂性分析偏向于理论，是一种很好的补充。至于说是否要对每段代码做复杂度分析，就取决于成本和收益了，现实中应该不太可能，个人感觉对核心算法和代码做分析，另外对出现性能问题的代码针对性分析比较有可行性。","like_count":0},{"had_liked":false,"id":27981,"user_name":"拂衣袖","can_delete":false,"product_type":"c1","uid":1151928,"ip_address":"","ucode":"A038FE9153AC56","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BKcPgF06htVxIib2rIZuMiaeoAxWHBYUC13aQQytTcFfMCyvWx6VPqiag3iaicnVOicmROZ3krcIalYupiafrcS5qKSzw/132","comment_is_top":false,"comment_ctime":1537972837,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1537972837","product_id":100017301,"comment_content":"像追剧一般的等你更新啊","like_count":0},{"had_liked":false,"id":27978,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1537972686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972686","product_id":100017301,"comment_content":"不错，都看懂了","like_count":0},{"had_liked":false,"id":27977,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1537972593,"is_pvip":false,"replies":[{"id":"10089","content":"怎么会不一样呢 能具体举一个例子吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976716,"ip_address":"","comment_id":27977,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537972593","product_id":100017301,"comment_content":"加法法则与乘法法则，对于同一个代码所得出的时间复杂度结果不一样，会不会真实的结果被覆盖。一个是n的平方，一个是n的立方。这个怎么解释","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425104,"discussion_content":"怎么会不一样呢 能具体举一个例子吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27974,"user_name":"90飞","can_delete":false,"product_type":"c1","uid":1241944,"ip_address":"","ucode":"9F360D766FB606","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/58/1ef2fa55.jpg","comment_is_top":false,"comment_ctime":1537972512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972512","product_id":100017301,"comment_content":"1、这是我看过和听过的对复杂度讲解的最能适合我理解的了。<br>2、关于课后思考题，小公司没做过这方面的测试，不是很了解。但是看了好多人的留言，觉得都好有道理，学到了，真是厉害！","like_count":0},{"had_liked":false,"id":27973,"user_name":"林展翔","can_delete":false,"product_type":"c1","uid":1254011,"ip_address":"","ucode":"F1EA834AB9E758","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/7b/f8736786.jpg","comment_is_top":false,"comment_ctime":1537972500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972500","product_id":100017301,"comment_content":"如果我在循环的判断是以宏（值已知）来进行判断的，在这种情况下，时间复杂度是O(n) 还是 O(1)呢？","like_count":0},{"had_liked":false,"id":27972,"user_name":"我在妳身后","can_delete":false,"product_type":"c1","uid":1241690,"ip_address":"","ucode":"DE19242056C025","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/5a/50e1b560.jpg","comment_is_top":false,"comment_ctime":1537972477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972477","product_id":100017301,"comment_content":"不好意思老师，，我的问题，整体是立方阶，这个函数是平方阶，，我看错了，，不好意思了老师","like_count":0},{"had_liked":false,"id":27970,"user_name":"小康","can_delete":false,"product_type":"c1","uid":1129743,"ip_address":"","ucode":"C178094056F8F8","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/0f/89db40b7.jpg","comment_is_top":false,"comment_ctime":1537972079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537972079","product_id":100017301,"comment_content":"时间复杂度表示算法的执行时间与数据规模之间的增长关系。<br>空间复杂度表示算法存储空间的与数据规模之间的增长关系。","like_count":0},{"had_liked":false,"id":27967,"user_name":"无疆","can_delete":false,"product_type":"c1","uid":1185150,"ip_address":"","ucode":"03AA6B560B7EFE","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/7e/2c26a123.jpg","comment_is_top":false,"comment_ctime":1537971842,"is_pvip":false,"replies":[{"id":"10090","content":"别急 后面每种数据结构和算法 都会分析相应的时间 空间复杂度。你可以拿来当作练习","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976841,"ip_address":"","comment_id":27967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537971842","product_id":100017301,"comment_content":"多谢老师的讲解,感觉听懂是听懂了,就是需要多多练习吧, 而且不知道去哪练习,离开了老师怎么开始?  呵呵","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425101,"discussion_content":"别急 后面每种数据结构和算法 都会分析相应的时间 空间复杂度。你可以拿来当作练习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27965,"user_name":"张秧","can_delete":false,"product_type":"c1","uid":1248118,"ip_address":"","ucode":"1BFE8562C36661","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/76/03c6d55d.jpg","comment_is_top":false,"comment_ctime":1537971510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537971510","product_id":100017301,"comment_content":"经过老师的讲解，对复杂度理解的更透彻","like_count":0},{"had_liked":false,"id":27961,"user_name":"程序媛小喵喵","can_delete":false,"product_type":"c1","uid":1248464,"ip_address":"","ucode":"27412533EF0FA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/d0/6e0243dc.jpg","comment_is_top":false,"comment_ctime":1537971225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537971225","product_id":100017301,"comment_content":"我不认为是多此一举，一个从事实出发一个从用理论分析，即能互相补充，又能验证测试数据的正确性。不过不是先分析下时间空间复杂度再进行性能测试吗？","like_count":0},{"had_liked":false,"id":27958,"user_name":"wanter","can_delete":false,"product_type":"c1","uid":1235456,"ip_address":"","ucode":"F94BF1EB8DC12C","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/00/225b9b33.jpg","comment_is_top":false,"comment_ctime":1537971142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537971142","product_id":100017301,"comment_content":"各位大佬们的总结我收下了，那么问题来了，谁能推荐个好用的笔记软件呢？win + Android +Mac","like_count":0},{"had_liked":false,"id":27953,"user_name":"lovelykooo","can_delete":false,"product_type":"c1","uid":1009369,"ip_address":"","ucode":"B8B9DF2C05E123","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/d9/b81be44b.jpg","comment_is_top":false,"comment_ctime":1537970432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537970432","product_id":100017301,"comment_content":"打卡1","like_count":0},{"had_liked":false,"id":27952,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1537970376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537970376","product_id":100017301,"comment_content":"做好代码的复杂度分析，可以确认性能测试的正确性，以及性能测试覆盖度。<br>我觉得先分析整体代码结构，然后在分析具体关键代码复杂度。这样更加高效","like_count":0},{"had_liked":false,"id":27951,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1537969906,"is_pvip":false,"replies":[{"id":"10060","content":"不管fn还是gn都是n的表达式。为了区别两个不同的表达式 就一个叫fn 一个叫gn了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971145,"ip_address":"","comment_id":27951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537969906","product_id":100017301,"comment_content":"加法法则里面交代了f(n),但是冒出的g(n)，是n平方的缩写？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425099,"discussion_content":"不管fn还是gn都是n的表达式。为了区别两个不同的表达式 就一个叫fn 一个叫gn了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27946,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1025510,"ip_address":"","ucode":"29F76B2898340C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/e6/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1537969238,"is_pvip":false,"replies":[{"id":"10091","content":"你说的没错 是忘记了 不过不加也不影响结论哈","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537976921,"ip_address":"","comment_id":27946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537969238","product_id":100017301,"comment_content":"int cal(int n) {<br>   int sum_1 = 0;<br>   int p = 1;<br>   for (; p &lt; 100; ++p) {<br>     sum_1 = sum_1 + p;<br>   }<br><br>   int sum_2 = 0;<br>   int q = 1;<br>   for (; q &lt; n; ++q) {<br>     sum_2 = sum_2 + q;<br>   }<br> <br>   int sum_3 = 0;<br>   int i = 1;<br>   int j = 1;<br>   for (; i &lt;= n; ++i) {<br>     j = 1; <br>     for (; j &lt;= n; ++j) {<br>       sum_3 = sum_3 +  i * j;<br>     }<br>   }<br> <br>   return sum_1 + sum_2 + sum_3;<br> }<br><br>老师，我很好奇 前面的两个for循环，里面的p不应该是&lt;=100或者是q&gt;=n 这样才满足循环了100次或者n次 是忘记添加=了吗<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425097,"discussion_content":"你说的没错 是忘记了 不过不加也不影响结论哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537976921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27944,"user_name":"三金ฅฅ*","can_delete":false,"product_type":"c1","uid":1238672,"ip_address":"","ucode":"BAE2BC013590D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/90/a4fb7dca.jpg","comment_is_top":false,"comment_ctime":1537969067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537969067","product_id":100017301,"comment_content":"谢谢老师，学数据结构时当时老师讲到复杂度分析没怎么觉得这个重要，没怎么用心！现在全明白啦！不过还需要多看几遍！","like_count":0},{"had_liked":false,"id":27943,"user_name":"Viola","can_delete":false,"product_type":"c1","uid":1248698,"ip_address":"","ucode":"F79138DF4BB28A","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/ba/57a6f28b.jpg","comment_is_top":false,"comment_ctime":1537969022,"is_pvip":false,"replies":[{"id":"10061","content":"下一节会有一个题目 让你们分析复杂度","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971200,"ip_address":"","comment_id":27943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537969022","product_id":100017301,"comment_content":"请问老师是否可以多给点类似于上边的代码，让我们练习一下分析过程。没有从事过开发，大学学的也都还给老师了，或者老师给个作业链接也行，谢谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425096,"discussion_content":"下一节会有一个题目 让你们分析复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27935,"user_name":"流水花开","can_delete":false,"product_type":"c1","uid":1249170,"ip_address":"","ucode":"2A70181AC1E443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/92/35f70582.jpg","comment_is_top":false,"comment_ctime":1537967809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537967809","product_id":100017301,"comment_content":"之前买了本，数据结构与算法，自己看起来还是比较费力的，听老师的讲解，感觉理解起来轻松多了！很高兴，老师带我们学习数据结构与算法！","like_count":0},{"had_liked":false,"id":27934,"user_name":"谷晨霞","can_delete":false,"product_type":"c1","uid":1252357,"ip_address":"","ucode":"9DC9FFF6AA1E91","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/05/ff8cdc5a.jpg","comment_is_top":false,"comment_ctime":1537967617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537967617","product_id":100017301,"comment_content":"这位哥哥适合去大学当老师啊，我当时的数据结构课到底是怎么学的，感觉当时完全理解不了，这么一讲就很明白。性能测试跟运行环境，数据体量，软硬件都有关系，算法复杂度是算法层面的初步估计，性能测试是应用层面的实测，意义不同。主要业务处理模块还是要关注算法复杂度。","like_count":0},{"had_liked":false,"id":27933,"user_name":"石树","can_delete":false,"product_type":"c1","uid":1243187,"ip_address":"","ucode":"43FB4D4A947B53","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/33/599465f6.jpg","comment_is_top":false,"comment_ctime":1537967612,"is_pvip":false,"replies":[{"id":"10064","content":"受教！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971345,"ip_address":"","comment_id":27933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537967612","product_id":100017301,"comment_content":"学习是一场修行，引用胡适的一句话:怕什么真理无穷，进一寸有一寸的欢喜","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425090,"discussion_content":"受教！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27932,"user_name":"Haoz","can_delete":false,"product_type":"c1","uid":1022665,"ip_address":"","ucode":"DBDBF78877A7B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/c9/08852337.jpg","comment_is_top":false,"comment_ctime":1537967432,"is_pvip":false,"replies":[{"id":"10065","content":"总结的不错！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971402,"ip_address":"","comment_id":27932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537967432","product_id":100017301,"comment_content":"一、为什么需要复杂度分析?<br><br>事后统计法（通过统计、监控得到算法执行的时间和占用的内存）有着非常大的局限性<br>- 测试结果非常依赖测试环境<br>- 测试结果受数据规模的影响很大<br><br>二、大 O 复杂度表示法<br><br>公式：T(n) = O(f(n))<br><br>Ps：公式中的 O 表示代码的执行时间 T(n) 与 f(n) 表达式成正比<br><br>1、时间复杂度分析<br>时间复杂度的全称是「渐进时间复杂度」，表示算法的「执行时间」与「数据规模」之间的增长关系<br><br>- 只关注循环执行次数最多的一段代码<br>- 加法法则：总复杂度等于量级最多的那段代码的复杂度<br>- 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>2、复杂度量级的分类<br>- 多项式量级(O(1)、O(logn)、O(n)、O(nlogn)、O(n^k))<br>- 非多项式量级（ O(2^n)、O(n!) ）<br><br>3、空间复杂度分析<br>空间复杂度全称是渐进空间复杂度，表示算法的「存储空间」和「数据规模」之间的增长关系<br><br>三、思考<br><br>按照自己的理解，性能分析只能大概计算出项目的某些性能指标，以 App 为例，性能分析包括 App 的冷启动时间、热启动时间、Crash 率等，这些指标一般是为了衡量新旧版本之间是否有所优化、以及跟竞品之间进行比较。<br><br>但无法准确的衡量当前项目中某些算法或者模块的性能，而如果进行时间复杂度和空间复杂度的分析，能让我们计算出项目处于哪个数量级，更有利于我们进行针对性的优化，以及更好的衡量时间复杂度和空间复杂度之间的取舍。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425089,"discussion_content":"总结的不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27931,"user_name":"南瓜马车","can_delete":false,"product_type":"c1","uid":1037879,"ip_address":"","ucode":"1392C37930EF21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/37/1eb9e981.jpg","comment_is_top":false,"comment_ctime":1537967358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537967358","product_id":100017301,"comment_content":"小白打卡，转行学习中，比看书容易理解","like_count":0},{"had_liked":false,"id":27930,"user_name":"海洋","can_delete":false,"product_type":"c1","uid":1187437,"ip_address":"","ucode":"53CA929946403C","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/6d/c2ad76a6.jpg","comment_is_top":false,"comment_ctime":1537967177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537967177","product_id":100017301,"comment_content":"很不错，以后写代码拿这个心里估算一下，对效率有个大致的估计。也是代码调优的重要参考。","like_count":0},{"had_liked":false,"id":27927,"user_name":"可苦可乐","can_delete":false,"product_type":"c1","uid":1254889,"ip_address":"","ucode":"F1BE5EDACB7D4E","user_header":"","comment_is_top":false,"comment_ctime":1537967045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537967045","product_id":100017301,"comment_content":"终于知道对数阶的时间复杂度怎么来的,写的很清楚","like_count":0},{"had_liked":false,"id":27924,"user_name":"CodeLiar","can_delete":false,"product_type":"c1","uid":1055392,"ip_address":"","ucode":"C38D8681247B42","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/a0/e3090cc6.jpg","comment_is_top":false,"comment_ctime":1537966518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537966518","product_id":100017301,"comment_content":"nlogn的曲线？","like_count":0},{"had_liked":false,"id":27923,"user_name":"小学徒","can_delete":false,"product_type":"c1","uid":1246024,"ip_address":"","ucode":"2AD07ECB1EAAC3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIkkg9icSGleYPOn7BKy7BCUVJogXaE3Fg33hdvv8QZh1icSYlouVPNtmMx9QVLQVKdKCrjd3ibdV7FQ/132","comment_is_top":false,"comment_ctime":1537966265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537966265","product_id":100017301,"comment_content":"这个分两方面来说，如果单单是开发时来花时间去分析复杂度的话确实明面上是浪费时间，<br>但如果从整个项目的角度来说，如果你花2个小时，让这个项目效率提升1秒钟，当100万个用户使用的时候，节省的时间却是比2小时多很多","like_count":0},{"had_liked":false,"id":27920,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":false,"comment_ctime":1537965965,"is_pvip":false,"replies":[{"id":"10068","content":"总结的不错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971606,"ip_address":"","comment_id":27920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537965965","product_id":100017301,"comment_content":"时间复杂度用来衡量程序所需要的时间, 空间复杂度用来衡量程序所消耗的储存大小, 通常情况下时间复杂度更能直观反映算法的好坏, 甚至还有空间换时间的说法.<br><br>为什么不使用实际运行代码的时间和内存大小来衡量?<br><br>1 运行代码的环境不一样, i9 和 i3的速度肯定有所不同<br><br>2 测试数据的规模, 100个数据和100的100次方个数据所花的时间肯定不一样, 某些算法在小规模数据上具有优势(比如插入排序之与快排), 而实实在在的跑100的100次方个数据不够现实.<br><br>3 不可能先把各种复杂度都写出来测试后再修改, 这样十分的耗费时间,且低效, 需要一个可以在设计代码阶段就让你知道你的算法好不好的衡量指标","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425085,"discussion_content":"总结的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27919,"user_name":"木心","can_delete":false,"product_type":"c1","uid":1236483,"ip_address":"","ucode":"742CED0E7F1B15","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKLZWeLLn4WxrMen2icfJVXL86tlicJIe7DqIdpFvCTvr9mUY6WwmnINzlu6yrfe3rK1cicg3sL6ibDxw/132","comment_is_top":false,"comment_ctime":1537965810,"is_pvip":false,"replies":[{"id":"10070","content":"他俩没直接的关系 理解的有点不对哦","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971846,"ip_address":"","comment_id":27919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537965810","product_id":100017301,"comment_content":"我理解的是不是时间复杂度高了，空间复杂度就低了，此消彼长。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425084,"discussion_content":"他俩没直接的关系 理解的有点不对哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27912,"user_name":"Light Lin","can_delete":false,"product_type":"c1","uid":1234625,"ip_address":"","ucode":"C0AA9AA608F395","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/c1/aa9cde77.jpg","comment_is_top":false,"comment_ctime":1537964976,"is_pvip":false,"replies":[{"id":"10069","content":"是的。不过前提是能改成常数","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971734,"ip_address":"","comment_id":27912,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537964976","product_id":100017301,"comment_content":"空间复杂度那里有点懵，如果把那行申请数组空间中的 n 改为常数，那空间复杂度是不是O(1)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425081,"discussion_content":"是的。不过前提是能改成常数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27909,"user_name":"我在妳身后","can_delete":false,"product_type":"c1","uid":1241690,"ip_address":"","ucode":"DE19242056C025","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/5a/50e1b560.jpg","comment_is_top":false,"comment_ctime":1537964457,"is_pvip":false,"replies":[{"id":"10071","content":"为啥是3呢 能说说你的推理吗","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971875,"ip_address":"","comment_id":27909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537964457","product_id":100017301,"comment_content":"但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n∧2)，，后面这个2应该是3吧，应该是立方阶吧，，还请老师指导","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425080,"discussion_content":"为啥是3呢 能说说你的推理吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27907,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1537964209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537964209","product_id":100017301,"comment_content":"就拿我现在的工作，大数据开发来讲，因为集群资源有限，同一时间段内运行的job会很多，这个时候就要优化自己的程序，让应用在使用更少的cpu、更少的内存的情况下很快的跑完。<br>","like_count":0},{"had_liked":false,"id":27906,"user_name":"Fighting","can_delete":false,"product_type":"c1","uid":1241806,"ip_address":"","ucode":"B1B76119EB6EC4","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/ce/797e9c7f.jpg","comment_is_top":false,"comment_ctime":1537964159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537964159","product_id":100017301,"comment_content":"时间复杂度的分析方法：<br>（1）关注循环次数最多的一段代码<br>（2）加法原则，总复杂度等于级数最大的那段代码<br>（3）乘法选择，同加法原则","like_count":0},{"had_liked":false,"id":27904,"user_name":"枕之雪","can_delete":false,"product_type":"c1","uid":1242225,"ip_address":"","ucode":"A9792BEC1CDD99","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/71/f7d10a23.jpg","comment_is_top":false,"comment_ctime":1537963791,"is_pvip":false,"replies":[{"id":"10072","content":"这个要具体问题具体分析了 你说的嵌套循环 复杂度是定的 那确实有可能没法再优化了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971987,"ip_address":"","comment_id":27904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537963791","product_id":100017301,"comment_content":"我和其中一位同学的观点挺像的，进行复杂度分析是为了在编程中应用，一般我们在实现某项功能的时候，比如说需要用到嵌套循环，复杂度基本就定下来了，我们在这个基础上要降低时间复杂度的话，用什么办法呢？阶数越高，一般复杂度越高，如何去分解。不知道这种理解是否正确，希望老师讲一些降低复杂度的方法","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425079,"discussion_content":"这个要具体问题具体分析了 你说的嵌套循环 复杂度是定的 那确实有可能没法再优化了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27901,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":false,"comment_ctime":1537963472,"is_pvip":false,"replies":[{"id":"10073","content":"说明你认真看看 认真思考了。确实不够准确 但是简单啊 更准确的度量可能也有 但统计起来就没那么简单了。我们只是粗略估计 就可以用一个粗略的度量标准","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972142,"ip_address":"","comment_id":27901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537963472","product_id":100017301,"comment_content":"老师，按照某一行的运行时间来定unit time是不是不够准确？因为sum=0的这一行和for循环里又有判断，还有加一操作的这一行，时间应该是不一样的，直观感觉应该后者为前者的两倍<br><br>所以对于这个界定是不是用基本运算的时间来定更确切？比如加减乘除等。<br><br>只是一种猜测，我也不知道这个应该用什么去准确衡量这个单位时间","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425077,"discussion_content":"说明你认真看看 认真思考了。确实不够准确 但是简单啊 更准确的度量可能也有 但统计起来就没那么简单了。我们只是粗略估计 就可以用一个粗略的度量标准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27900,"user_name":"太空土豆","can_delete":false,"product_type":"c1","uid":1247622,"ip_address":"","ucode":"636253D0DE1384","user_header":"","comment_is_top":false,"comment_ctime":1537963331,"is_pvip":false,"replies":[{"id":"10074","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972213,"ip_address":"","comment_id":27900,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537963331","product_id":100017301,"comment_content":"第一个例子里面5，6行中，第6行执行n次，而第5行for里面的执行需要分解。判断语句和后面++语句要分解成两个简单语句。这样计算出的表达式才是语句执行频度与问题规模n相关的一个表达式。虽然与最终复杂度结果不冲突，遇到了，尽量避免误导。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425076,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27898,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1537962960,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537962960","product_id":100017301,"comment_content":"感谢老师， 从零学起，自己做了一份笔记，加油！","like_count":0},{"had_liked":false,"id":27897,"user_name":"空白","can_delete":false,"product_type":"c1","uid":1234555,"ip_address":"","ucode":"675643BCCA7F32","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/7b/7035a4f7.jpg","comment_is_top":false,"comment_ctime":1537962920,"is_pvip":false,"replies":[{"id":"10053","content":"严格的推导过程没有呢 专栏里讲的就是粗略的大o的由来","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537970626,"ip_address":"","comment_id":27897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537962920","product_id":100017301,"comment_content":"老师有这个大O公式的推导过程么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425075,"discussion_content":"严格的推导过程没有呢 专栏里讲的就是粗略的大o的由来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537970626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27895,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1537962917,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537962917","product_id":100017301,"comment_content":"感谢老师！","like_count":0},{"had_liked":false,"id":27892,"user_name":"太空土豆","can_delete":false,"product_type":"c1","uid":1247622,"ip_address":"","ucode":"636253D0DE1384","user_header":"","comment_is_top":false,"comment_ctime":1537962557,"is_pvip":false,"replies":[{"id":"10075","content":"👍 说的很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972338,"ip_address":"","comment_id":27892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537962557","product_id":100017301,"comment_content":"这一讲比较难讲。<br>复杂度实质是反应算法执行时间与输入数据规模n的变化趋势。O(1)为常量，即该算法时间与输入数据规模无关。O(n)表示该算法时间与输入数据规模n呈线性增长变化……。<br>当然，这里算法运行时间与具体的运行环境无关，它是在一种假设的“计算模型机”下考虑的。这种模型机有这几种假设:有一套标准的简单指令系统；任何一项简单的工作都在一个时间单元内完成；内存无限。<br>要真正弄清时间复杂度，要学会简单情况下计算语句执行频度，一般情况下可以用多项式表示。计算语句频度某些情况很复杂，特别涉及一些递归调用。但如果涉及到考试或者面试，也就那几种情况，可以归纳总结一下。讲义中那个对数级例子很好。<br>谢谢老师。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425073,"discussion_content":"👍 说的很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27891,"user_name":"啦啦的小猪","can_delete":false,"product_type":"c1","uid":1134766,"ip_address":"","ucode":"13352B41450925","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/ae/11dad6f3.jpg","comment_is_top":false,"comment_ctime":1537962543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537962543","product_id":100017301,"comment_content":"老师讲得很好！看完后现在脑子对这特别清晰！谢谢老师～","like_count":0},{"had_liked":false,"id":27890,"user_name":"Piggy","can_delete":false,"product_type":"c1","uid":1179416,"ip_address":"","ucode":"B683D81AEF99F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/18/9bcae398.jpg","comment_is_top":false,"comment_ctime":1537962531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537962531","product_id":100017301,"comment_content":"分析时间复杂度，把代码拆开来一块一块、一层一层分析，嵌套是相乘、并列是相加。<br>按照控制流图拆块、拆层🤪🤪","like_count":0},{"had_liked":false,"id":27886,"user_name":"Hy","can_delete":false,"product_type":"c1","uid":1239531,"ip_address":"","ucode":"BF6AC9AA9B26A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/eb/2394e520.jpg","comment_is_top":false,"comment_ctime":1537961840,"is_pvip":false,"replies":[{"id":"10054","content":"哈哈 对于复杂度分析来说 多一两次 少一两次都不影响结果","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537970715,"ip_address":"","comment_id":27886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537961840","product_id":100017301,"comment_content":"1 i=1;<br>2 while (i &lt;= n)  {<br>3   i = i * 2;<br>4 }<br>第三行为何执行次数最多呢，感觉第二行会多执行吧，因为最后一次判断超出后不再进入代码块","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425071,"discussion_content":"哈哈 对于复杂度分析来说 多一两次 少一两次都不影响结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537970715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27880,"user_name":"言止于心","can_delete":false,"product_type":"c1","uid":1234408,"ip_address":"","ucode":"F98096A8AF830E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/e8/4a234d22.jpg","comment_is_top":false,"comment_ctime":1537960620,"is_pvip":false,"replies":[{"id":"10056","content":"是没有实际的作用 因为执行时间随n的增大增长速度太快了 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537970927,"ip_address":"","comment_id":27880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537960620","product_id":100017301,"comment_content":"老师，请问非多项式的时间复杂度都会用在哪些地方？是没有什么实际使用作用吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425069,"discussion_content":"是没有实际的作用 因为执行时间随n的增大增长速度太快了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537970927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27873,"user_name":"水果刀","can_delete":false,"product_type":"c1","uid":1236586,"ip_address":"","ucode":"CA787A086DAB70","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/6a/4db4a75e.jpg","comment_is_top":false,"comment_ctime":1537959385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537959385","product_id":100017301,"comment_content":"手动点赞","like_count":0},{"had_liked":false,"id":27872,"user_name":"ivan","can_delete":false,"product_type":"c1","uid":1012597,"ip_address":"","ucode":"D760A60E219957","user_header":"https://static001.geekbang.org/account/avatar/00/0f/73/75/21af98ff.jpg","comment_is_top":false,"comment_ctime":1537959321,"is_pvip":false,"replies":[{"id":"10058","content":"亲 没怎么看懂你说的呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971057,"ip_address":"","comment_id":27872,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537959321","product_id":100017301,"comment_content":"针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。<br><br><br><br>请问下老大，这种情况下，加和乘计算都可以是吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425065,"discussion_content":"亲 没怎么看懂你说的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27871,"user_name":"长安","can_delete":false,"product_type":"c1","uid":1235228,"ip_address":"","ucode":"149EE6E7472CE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/1c/aa08ae6b.jpg","comment_is_top":false,"comment_ctime":1537958626,"is_pvip":false,"replies":[{"id":"10059","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537971072,"ip_address":"","comment_id":27871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537958626","product_id":100017301,"comment_content":"这节课所学总结:<br>时间复杂度T(n)=O(f(n)) 即用大O法来近似估算算法的操作次数 老师讲了三种情况 <br>一段代码时 看循环语句里的操作次数<br>两段代码时 取操作次数最大的为时间复杂度 如例子中的双重循环 <br>两段代码且问题规模不同时 将两段代码的时间复杂度相加为整个算法的时间复杂度<br>常用的时间复杂度可分为两大类 多项式阶和非多项式阶 通过热评第二条了解到两类的不同特点 <br>最后知道了空间复杂度也是用大O法来表示","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425064,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537971072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27868,"user_name":"流星雨","can_delete":false,"product_type":"c1","uid":1233834,"ip_address":"","ucode":"8F55C8FE834C51","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/aa/ba6cb677.jpg","comment_is_top":false,"comment_ctime":1537958315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537958315","product_id":100017301,"comment_content":"做个标记，这次一定要学好数据结构与算法，感觉这一篇解决了我以前的疑难杂症！！！","like_count":0},{"had_liked":false,"id":27866,"user_name":"李奇","can_delete":false,"product_type":"c1","uid":1251720,"ip_address":"","ucode":"71406A298DE398","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/88/77bba747.jpg","comment_is_top":false,"comment_ctime":1537958162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537958162","product_id":100017301,"comment_content":"对项目进行性能测试更多是获得这个系统的执行效率，那这个系统中各个部分对效率的影响和贡献率是多少呢，这就需要我们去分析代码的时间和空间复杂度，这样就能知道哪个部分是最拖后腿的，那就能集中对这部分代码进行优化，提高开发效率。","like_count":0},{"had_liked":false,"id":27862,"user_name":"肖观腾","can_delete":false,"product_type":"c1","uid":1234917,"ip_address":"","ucode":"71CBF0F31E2AA3","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/e5/e1d0b18e.jpg","comment_is_top":false,"comment_ctime":1537957464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537957464","product_id":100017301,"comment_content":"听不过瘾啊，每天都能更新就好啦啦啦","like_count":0},{"had_liked":false,"id":27859,"user_name":"大老李","can_delete":false,"product_type":"c1","uid":1001670,"ip_address":"","ucode":"AE7487EB3A3302","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/c6/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1537957015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537957015","product_id":100017301,"comment_content":"大学的学完了就忘，现在再听老师讲一遍，感觉理解的更到位了","like_count":0},{"had_liked":false,"id":27856,"user_name":"scarlett","can_delete":false,"product_type":"c1","uid":1104937,"ip_address":"","ucode":"F30414146C709F","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/29/33d0d7ff.jpg","comment_is_top":false,"comment_ctime":1537955845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537955845","product_id":100017301,"comment_content":"通俗易懂，以前看书怎么也学不会 时间空间复杂度，看了老师的这一篇完全理解了，期待期待。","like_count":0},{"had_liked":false,"id":27851,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1537955482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537955482","product_id":100017301,"comment_content":"第一发送的在线图片有误<br>http:&#47;&#47;on-img.com&#47;chart_image&#47;5baaeffde4b015327aefce96.png","like_count":0},{"had_liked":false,"id":27847,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1537954956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537954956","product_id":100017301,"comment_content":"从这里开始文科生基本就读不懂了😂","like_count":0},{"had_liked":false,"id":27846,"user_name":"~记得微笑∩﹏∩","can_delete":false,"product_type":"c1","uid":1216715,"ip_address":"","ucode":"EBC383F0FB54BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/cb/72063354.jpg","comment_is_top":false,"comment_ctime":1537954487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537954487","product_id":100017301,"comment_content":"老师讲的很好，点赞","like_count":0},{"had_liked":false,"id":27845,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1537954273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537954273","product_id":100017301,"comment_content":"我觉得复杂度分析放在代码设计时，和性能测试并不冲突。设计时通过多个方案的复杂度分析可以找到最优的方案，而性能测试则是去验证自己的猜想，找出设计时未考虑到的情况","like_count":0},{"had_liked":false,"id":27844,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1537954272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537954272","product_id":100017301,"comment_content":"我觉得复杂度分析放在代码设计时，和性能测试并不冲突。设计时通过多个方案的复杂度分析可以找到最优的方案，而性能测试则是去验证自己的猜想，找出设计时未考虑到的情况","like_count":0},{"had_liked":false,"id":27840,"user_name":"桃子公举","can_delete":false,"product_type":"c1","uid":1235700,"ip_address":"","ucode":"DF529DB07ABA45","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/f4/5e6a072c.jpg","comment_is_top":false,"comment_ctime":1537953462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537953462","product_id":100017301,"comment_content":"作为前端  出来没有参与过性能测试  也用不到很复杂的算法  用到最多的就是for循环了吧   不过理解之后自己还是会在实际项目中尽量注意的","like_count":0},{"had_liked":false,"id":27836,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1537952831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537952831","product_id":100017301,"comment_content":"我认为复杂度分析不是多此一举，性能测试能够测试到是否满足项目的需要，但是复杂度分析有可能让自己写出更加节省时间和空间的程序。<br><br>我认为每段代码都分析时间和空间复杂度并非浪费时间，因为代码的时间和空间上面小的浪费累计起来就可能是大的问题。","like_count":0},{"had_liked":false,"id":27831,"user_name":"Starbug","can_delete":false,"product_type":"c1","uid":1197000,"ip_address":"","ucode":"81C7B6D7BD1B5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/c8/03604677.jpg","comment_is_top":false,"comment_ctime":1537951695,"is_pvip":false,"replies":[{"id":"10081","content":"总结的到位","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537972724,"ip_address":"","comment_id":27831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537951695","product_id":100017301,"comment_content":"课程总结：<br>\t1. 时间、空间复杂度分析，提供了一种抽象的、行业内共通的评价标准，比如查看某个库的文档，一看提供的某个接口的时间、空间复杂度是O(n)，你就可以估摸一下这个库的质量，效率是否满足你的需求<br>\t2. 大O分析法，分析的是程序运行时随着问题规模扩大时(n增加）的时间、空间增加趋势，可以快速估算出时间、空间成本，并思考是否有更优的解决方案。比如初版算法用暴力法时间复杂度为O(n^2)，那就可以根据大O分析法去思考，是否能优化到O(nlogn)或者O(n)，甚至有些magic方法能达到O(1)<br>\t3. 加法法则、乘法法则、NP问题（Non-Deterministic Polynomial），这些概念非常亲切，想起来大学时代的算法课<br>课后问题：<br>\t1. 性能测试是很必要的，一方面不同的运行环境下软件的运行效率不一样，需要通过性能测试来得到具体数据；另一方面性能测试可以模拟随机的输入来测试代码在不同情况（边界条件）下的运行情况，甚至能查出一些逻辑问题<br>\t2. 时间、空间复杂度分析也很重要，因为性能测试是有成本的，一个设计使用规模为几亿甚至更高量级的算法，要完全模拟真实环境成本很高，往往会在不同的问题规模下进行性能测试采样数据，再通过分析采样数据是否符合复杂度分析的结果，并推理更大规模时代码的运行情况如何。<br>\t3. 是否需要每段代码都分析时间、空间复杂度呢？我觉得不需要，具体情况需要具体分析，线上环境不会用到甚至只会在初始化时运行一次的算法，就没有必要太执着于分析复杂度，而系统的核心模块，线上环境需要频繁调用的，那么就需要进行仔细的复杂度分析并且进行性能测试，避免成为系统的瓶颈。<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425049,"discussion_content":"总结的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537972724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27827,"user_name":"碘酒","can_delete":false,"product_type":"c1","uid":1243266,"ip_address":"","ucode":"01067008CE56A1","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/82/f3ff449f.jpg","comment_is_top":false,"comment_ctime":1537950983,"is_pvip":false,"replies":[{"id":"10027","content":"对的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537952541,"ip_address":"","comment_id":27827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537950983","product_id":100017301,"comment_content":"还有一个n！，n！是耗时最长的函数。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425046,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537952541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27826,"user_name":"北天魔狼","can_delete":false,"product_type":"c1","uid":1188144,"ip_address":"","ucode":"C22623ECEB8DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","comment_is_top":false,"comment_ctime":1537950838,"is_pvip":true,"replies":[{"id":"10029","content":"是的 理解的没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537952610,"ip_address":"","comment_id":27826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537950838","product_id":100017301,"comment_content":"我认为空间复杂度分析可以合理预测计算量大时产生的影响，测试只能测试得出当前的性能。<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425045,"discussion_content":"是的 理解的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537952610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27821,"user_name":"XXYang","can_delete":false,"product_type":"c1","uid":1236045,"ip_address":"","ucode":"6D8E41D5464541","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/4d/dbb9a69b.jpg","comment_is_top":false,"comment_ctime":1537949061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537949061","product_id":100017301,"comment_content":"所以为了节约时间，少写循环。。","like_count":0},{"had_liked":false,"id":27819,"user_name":"Regular","can_delete":false,"product_type":"c1","uid":1025998,"ip_address":"","ucode":"80B3EA083534CA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/ce/7ee0d672.jpg","comment_is_top":false,"comment_ctime":1537948990,"is_pvip":false,"replies":[{"id":"10030","content":"我百度了篇文章 <br>https:&#47;&#47;blog.csdn.net&#47;qq_38250032&#47;article&#47;details&#47;81586329","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537952955,"ip_address":"","comment_id":27819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537948990","product_id":100017301,"comment_content":"请问，多项式量级非多项式量级是如何区分的？为什么只有O(2n) 和 O(n!)才是非多项式量级？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425041,"discussion_content":"我百度了篇文章 \nhttps://blog.csdn.net/qq_38250032/article/details/81586329","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537952955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27818,"user_name":"New Yorker","can_delete":false,"product_type":"c1","uid":1237979,"ip_address":"","ucode":"D46B1C472ED793","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/db/24d7eb6f.jpg","comment_is_top":false,"comment_ctime":1537948855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537948855","product_id":100017301,"comment_content":"几点感悟，<br>1.复杂度分析是一种很灵活的方法，根据程序的执行次数等会有不同的最佳方案<br><br>2.复杂度分析主要有n n*n logn nlogn 几种，寻找复杂度的入手点其实是最里层的循环<br><br><br>","like_count":0},{"had_liked":false,"id":27808,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1210879,"ip_address":"","ucode":"60283758AECCF7","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/ff/c0e40eb4.jpg","comment_is_top":false,"comment_ctime":1537947443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537947443","product_id":100017301,"comment_content":"总算弄明白这个时间复杂度的大O计算方法了，讲得很透彻！<br><br>性能分析和时间复杂度相辅相成","like_count":0},{"had_liked":false,"id":27807,"user_name":"小兔子乖乖别开门","can_delete":false,"product_type":"c1","uid":1242765,"ip_address":"","ucode":"A2483FDC7ECA68","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/8d/e52bde43.jpg","comment_is_top":false,"comment_ctime":1537947181,"is_pvip":false,"replies":[{"id":"10031","content":"复杂度表示的是一种增长趋势 并不是实际的内存占用量","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537953336,"ip_address":"","comment_id":27807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537947181","product_id":100017301,"comment_content":"老师，空间复杂度的对数的底数也忽略吗？空间复杂度不是表示内存占用吗？占用的空间，底数不同空间就应该不同吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425038,"discussion_content":"复杂度表示的是一种增长趋势 并不是实际的内存占用量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537953336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27806,"user_name":"djane","can_delete":false,"product_type":"c1","uid":1249032,"ip_address":"","ucode":"5315AA246AFDD8","user_header":"","comment_is_top":false,"comment_ctime":1537946800,"is_pvip":false,"replies":[{"id":"10032","content":"写的很好👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537953381,"ip_address":"","comment_id":27806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537946800","product_id":100017301,"comment_content":"【笔记】<br>一、为什么需要复杂度分析？<br>事后统计法有非常大的局限性。<br>1、测试结果非常依赖测试环境。<br>2、测试结果受数据规模的影响很大。<br>所以，我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。<br><br>二、大 O 复杂度表示法<br>所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正。<br>表达式：T(n) = O(f(n))<br>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度。<br>（当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了。）<br><br>三、时间复杂度分析<br>1、只关注循环执行次数最多的一段代码。<br>在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。<br>2、加法法则：总复杂度等于量级最大的那段代码的复杂度。<br>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积。<br><br>四、几种常见时间复杂度实例分析<br>常用的的复杂度量级，粗略地分为两类，多项式量级和非多项式量级。<br>1、非多项式量级：O(2^n)（指数阶）、O(n!)（阶乘阶）。<br>把时间复杂度为非多项式量级的算法问题叫作（Non-Deterministic Polynomial，非确定多项式）问题。<br>（当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。）<br>2、多项式时间复杂度：O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）、O(n^k)（k次方阶）、O(m+n)、O(m*n)。<br><br>五、空间复杂度分析<br>空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br>常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425037,"discussion_content":"写的很好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537953381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27805,"user_name":"Valar Morghulis","can_delete":false,"product_type":"c1","uid":1002068,"ip_address":"","ucode":"720AAB094C618E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/54/4ec75c6b.jpg","comment_is_top":false,"comment_ctime":1537946780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537946780","product_id":100017301,"comment_content":"算法复杂度分析的关键是 看随着数据规模的变化，算法执行次数的变化。<br>","like_count":0},{"had_liked":false,"id":27801,"user_name":"万象","can_delete":false,"product_type":"c1","uid":1222046,"ip_address":"","ucode":"E81A16870C211E","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/9e/e78e11d7.jpg","comment_is_top":false,"comment_ctime":1537946323,"is_pvip":false,"replies":[{"id":"10033","content":"理解到位","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537953409,"ip_address":"","comment_id":27801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537946323","product_id":100017301,"comment_content":"不应该在程序开始写的时候过度考虑复杂度，而是让我们对复杂度有意识，最起码要避免低级的复杂度问题，久而久之自然而然就写出高质量的代码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425036,"discussion_content":"理解到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537953409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27798,"user_name":"shupian418","can_delete":false,"product_type":"c1","uid":1147915,"ip_address":"","ucode":"2B5A9574AA0C6F","user_header":"","comment_is_top":false,"comment_ctime":1537945795,"is_pvip":false,"replies":[{"id":"10012","content":"是的 👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537950807,"ip_address":"","comment_id":27798,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537945795","product_id":100017301,"comment_content":"for (i=0;i&lt;n;i++) {<br>    for (j=0;j&lt;3;j++ ){<br>...<br>    }<br>}<br>老师这种复杂度时O(n)吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425035,"discussion_content":"是的 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537950807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27797,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1537945720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537945720","product_id":100017301,"comment_content":"认认真真地看完了一遍，看懂了！但是，手应该不熟！","like_count":0},{"had_liked":false,"id":27796,"user_name":"Wm.","can_delete":false,"product_type":"c1","uid":1249520,"ip_address":"","ucode":"A3A1CF83C11EFC","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/f0/aeecb49c.jpg","comment_is_top":false,"comment_ctime":1537945640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537945640","product_id":100017301,"comment_content":"看完之后，立马对时间复杂度和空间复杂度有了更深的理解。针对第二个例子，<br>for (; j &lt;= n; ++j) {<br>   sum = sum +  i * j;<br>     }<br>如作者所言，for循环是个判断，因此要进行n次，所以最后结果为2*n方，但这并不影响大O的最后的结果。所","like_count":0},{"had_liked":false,"id":27793,"user_name":"Spark_Shade","can_delete":false,"product_type":"c1","uid":1242267,"ip_address":"","ucode":"2D50BA07CF905A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/9b/1eccbb4a.jpg","comment_is_top":false,"comment_ctime":1537944919,"is_pvip":false,"replies":[{"id":"10034","content":"两行代码 所以是2呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537953472,"ip_address":"","comment_id":27793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537944919","product_id":100017301,"comment_content":"第二个例子中，7,8行代码，执行时间里的系数2是怎么来的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425033,"discussion_content":"两行代码 所以是2呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537953472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27792,"user_name":"子青","can_delete":false,"product_type":"c1","uid":1200029,"ip_address":"","ucode":"F6D22EB15325FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/9d/72461b25.jpg","comment_is_top":false,"comment_ctime":1537944753,"is_pvip":true,"replies":[{"id":"10035","content":"开头简单点 要照顾一下其他同学","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537953507,"ip_address":"","comment_id":27792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537944753","product_id":100017301,"comment_content":"对于科班来说有点过于基础，期待后面的实战","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425032,"discussion_content":"开头简单点 要照顾一下其他同学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537953507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27791,"user_name":"少凯","can_delete":false,"product_type":"c1","uid":1130779,"ip_address":"","ucode":"8AF65D4ABC8615","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/1b/35f6b2c7.jpg","comment_is_top":false,"comment_ctime":1537944387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537944387","product_id":100017301,"comment_content":"在进行复杂度分析时，如果调用库函数，需要了解这些库函数的复杂度，否则分析容易出现偏差。","like_count":0},{"had_liked":false,"id":27790,"user_name":"秋风","can_delete":false,"product_type":"c1","uid":1112613,"ip_address":"","ucode":"4D47EC97F56864","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/25/9f7bbf63.jpg","comment_is_top":false,"comment_ctime":1537944361,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1537944361","product_id":100017301,"comment_content":"相对于时间复杂度的分析，老师我记得算法导论里花了一章的篇幅去讨论摊还分析，那么这个摊还分析的意义我有点不理解","like_count":0},{"had_liked":false,"id":27788,"user_name":"择动","can_delete":false,"product_type":"c1","uid":1038386,"ip_address":"","ucode":"09FB38D0F89E49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/32/fab70236.jpg","comment_is_top":false,"comment_ctime":1537943913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537943913","product_id":100017301,"comment_content":"当然得分析，写代码总不能靠猜的。不然自己都虚。无凭无据的，怎么能证明自己的算法好，项目好呢。所以还是得分析，为的就是有理有据，我老师是这么教育我的：靠瞎撞太挫了。","like_count":0},{"had_liked":false,"id":27787,"user_name":"mobo","can_delete":false,"product_type":"c1","uid":1243630,"ip_address":"","ucode":"195170E57B471B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ee/1bbc2676.jpg","comment_is_top":false,"comment_ctime":1537943864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537943864","product_id":100017301,"comment_content":"老师好，我没上过高中，有几处疑问：<br>1.加法法则公式抽象成T1(n)=O(f(n))，T2(n)=O(g(n))那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).<br>这里的O(max(f(n), g(n))). 取的是f(n)和g(n)中的最大的吗？<br>2.多项式量级里的对数阶O(logn)<br>为什么x=log2n,是怎么算的<br>为什么对数之间可以互相转换 log3n 等于 log32 * log2n<br>3.因为没读过高中，有些函数看起来比较吃力，怕后面会掉队，有什么可以推荐下学习的吗","like_count":0},{"had_liked":false,"id":27783,"user_name":"木头衣服","can_delete":false,"product_type":"c1","uid":1244414,"ip_address":"","ucode":"E049FC32B68D23","user_header":"","comment_is_top":false,"comment_ctime":1537943434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537943434","product_id":100017301,"comment_content":"学过高数就会觉得很简单呀。其实就像老师在前面所讲的，在大规模的运用中重要性逐步凸显。换句话说，复制度低的代码，能有更广泛的适用性和可迁移性，从最开始就注意这点，积累下来，越往高处走就越轻松，如修炼内功。","like_count":0},{"had_liked":false,"id":27779,"user_name":"JStFs","can_delete":false,"product_type":"c1","uid":1241121,"ip_address":"","ucode":"636E85653555DD","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/21/7168f973.jpg","comment_is_top":false,"comment_ctime":1537942694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537942694","product_id":100017301,"comment_content":"乘法法则举的例子中，嵌套的内层方法中的入参虽然是“n”，但其实n的变化是从1，2，3，…，n<br>显然这个n是变化的，与外层方法的入参n根本不是一个意义。王老师降两者的复杂度直接相乘得到n平方是否有些不严格？<br><br>我的拙见是，复杂度应该是1+2+3+…+n=n*（n+1）&#47;2<br>虽然最后也是接近于n平方，但逻辑是否更强一点？","like_count":0},{"had_liked":false,"id":27774,"user_name":"落叶秋_风隐忧🍂","can_delete":false,"product_type":"c1","uid":1241485,"ip_address":"","ucode":"2F56DE34271758","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/8d/9fa4808d.jpg","comment_is_top":false,"comment_ctime":1537941321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537941321","product_id":100017301,"comment_content":"for (; i &lt;= n; ++i)  对这一行算作执行n次有点不理解。<br>这一行for里面有两条语句（i&lt;=n和++i），不应该算是执行了2*n次操作吗，还请老师解惑","like_count":0},{"had_liked":false,"id":27772,"user_name":"Joshua 兆甲","can_delete":false,"product_type":"c1","uid":1244179,"ip_address":"","ucode":"473223055AC083","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/13/11f8062e.jpg","comment_is_top":false,"comment_ctime":1537941242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537941242","product_id":100017301,"comment_content":"如果可以，希望老师讲一讲sql查询语句的复杂度分析。<br>crud boy的单纯想法。","like_count":0},{"had_liked":false,"id":27770,"user_name":"MJ","can_delete":false,"product_type":"c1","uid":1237145,"ip_address":"","ucode":"FCEC0C21444D2A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/99/5d603697.jpg","comment_is_top":false,"comment_ctime":1537940772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537940772","product_id":100017301,"comment_content":"代码规模巨大，分析复杂度会不会很麻烦，有没有自动化的工具呢？","like_count":0},{"had_liked":false,"id":27769,"user_name":"陈振荣","can_delete":false,"product_type":"c1","uid":1235321,"ip_address":"","ucode":"9059B33A6FCD22","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/79/297275ed.jpg","comment_is_top":false,"comment_ctime":1537940564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537940564","product_id":100017301,"comment_content":"1.大O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度<br><br>2. 只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。<br><br>3. 时间复杂度分析方法<br>   只关注循环执行次数最多的一段代码<br>   加法法则：总复杂度等于量级最大的      那段代码的复杂度<br>   乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br><br>4. 问题：文中分析空间复杂度那段代码为什么有点傻呢？for循环语句中＋＋i和i＋＋只是个人习惯问题吗？","like_count":0},{"had_liked":false,"id":27765,"user_name":"小泰","can_delete":false,"product_type":"c1","uid":1238167,"ip_address":"","ucode":"D9B321901CB9E4","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/97/5681f32d.jpg","comment_is_top":false,"comment_ctime":1537940059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537940059","product_id":100017301,"comment_content":"看第一个例子的时候看到2n^2的时候，没太注意，继续看，发现第二个例子还是2n^2这样，看留言发现很多同学都有这个疑问，作者也给了回复说“因为两层循环 一层是n 两层是n*n。不信你自己令n=5 自己算算”，其实疑惑点在2上面，仔细看下代码才发现是两行代码执行了n次，所以是2n^2。还是要仔细呀<br>","like_count":0},{"had_liked":false,"id":27764,"user_name":"秋风","can_delete":false,"product_type":"c1","uid":1112613,"ip_address":"","ucode":"4D47EC97F56864","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/25/9f7bbf63.jpg","comment_is_top":false,"comment_ctime":1537939602,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1537939602","product_id":100017301,"comment_content":"我也粗浅的看了算法导论，第二第三章里对算法执行效率和函数增长率的分析，我理解是，其实就是函数极限，有一个夹逼定理，好像叫做洛必达法则是吗，当n趋近于无穷大时，表示算法执行时间的函数f(x)会有一直不大于的函数cg(x)，这个g(x)的n最高次，就认为是算法的执行效率，因为当n趋近于无穷大时低阶的项对于函数的走向的影响会趋向于无穷小。<br>还有小o、w什么的","like_count":0},{"had_liked":false,"id":27761,"user_name":"E","can_delete":false,"product_type":"c1","uid":1075666,"ip_address":"","ucode":"80B68506B590EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/d2/8a53f0a3.jpg","comment_is_top":false,"comment_ctime":1537938309,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537938309","product_id":100017301,"comment_content":"早上看的时候没有行号，中午重新打开看居然就有了！！！","like_count":0},{"had_liked":false,"id":27758,"user_name":"AI","can_delete":false,"product_type":"c1","uid":1252398,"ip_address":"","ucode":"CF9C6771792E29","user_header":"","comment_is_top":false,"comment_ctime":1537937076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537937076","product_id":100017301,"comment_content":"Python也可以使用吗？","like_count":0},{"had_liked":false,"id":27757,"user_name":"代码之美","can_delete":false,"product_type":"c1","uid":1242326,"ip_address":"","ucode":"7086778359AE92","user_header":"","comment_is_top":false,"comment_ctime":1537936830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537936830","product_id":100017301,"comment_content":"我有个疑问，for循环语句里，每次循环的时间都是相等的吗？还有，如果在循环里加一个栈，每次来个数据放栈里，时间是相等的吗？如果不是，那这个公司还适用吗？","like_count":0},{"had_liked":false,"id":27750,"user_name":"yeStwind","can_delete":false,"product_type":"c1","uid":1246608,"ip_address":"","ucode":"D228FF739310D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/90/ba14b40a.jpg","comment_is_top":false,"comment_ctime":1537936157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537936157","product_id":100017301,"comment_content":"更新还可以再快一点:-)","like_count":0},{"had_liked":false,"id":27748,"user_name":"steventang","can_delete":false,"product_type":"c1","uid":1251638,"ip_address":"","ucode":"E3D89FDFC3499D","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/36/95246ba9.jpg","comment_is_top":false,"comment_ctime":1537936051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537936051","product_id":100017301,"comment_content":"性能测试和算法时空复杂度分析两者并不矛盾，只是定义前提和使用场景不同。<br>第一，时空分析强调分析效率和规模（单一因素）的关系。这让我们开发人员能够在设计数据结构和算法前能在心里有个预估，知道瓶颈可能出现在哪里。实际开发中特别是规模上来后设计优劣就显现了。<br>第二，性能测试是从众多的因素中找出影响性能的调优过程。它可以反向验证算法。","like_count":0},{"had_liked":false,"id":27745,"user_name":"lynxcat","can_delete":false,"product_type":"c1","uid":1162895,"ip_address":"","ucode":"6BB30C1440DF54","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/8f/958225af.jpg","comment_is_top":false,"comment_ctime":1537935716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537935716","product_id":100017301,"comment_content":"你好，请教一下如果一段代码中涉及到多个未知数据量，如以下代码片段<br>        for i := 0; i &lt; len(stores.List); i++ {<br>\t\tsid := stores.List[i].Sid<br>\t\torders := getStoreOrders(sid, token)  &#47;&#47;通过sid循环找到Order列表，并循环处理<br>\t\tmembers := getStoreMembers(sid, token) &#47;&#47;通过sid找到members列表，并循环处理<br>\t\tstatistics := getStoreStatistics(orders, members, sid) &#47;&#47;嵌套循环order 与members得出最终结果 <br>\t}<br>f(n)为stores， m(n)为循环orders, g(n)为循环members<br>最终的复杂度是否是 T(n) = O( O(f(n)*m(n)) + O(f(n) * g(n)) + O(f(n) * m(n) * g(n))) <br>化简为 T(n) = O(f(n)*m(n)*g(n))<br><br>如果是这样的话，那么在计算复杂度的时候能不能不对所有代码进行分析，通过对程序的理解直接找到循环层次最深的那段代码分析之后作为最终的复杂度呢","like_count":0},{"had_liked":false,"id":27744,"user_name":"A漩","can_delete":false,"product_type":"c1","uid":1104060,"ip_address":"","ucode":"6E087D15CFE09B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/bc/a20dc219.jpg","comment_is_top":false,"comment_ctime":1537935608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537935608","product_id":100017301,"comment_content":"性能测试是被动的测试，发现问题再解决问题。<br>学习算法养成良好的编码习惯是主动的避免问题。两者兼得才是最佳之选，所以不存在浪费时间的场景。<br>入行将近5年了，愈发感觉数据结构和算法的重要性。尤其是看源码，了解思想看起来才游刃有余。","like_count":0},{"had_liked":false,"id":27743,"user_name":"hemmmapart","can_delete":false,"product_type":"c1","uid":1244240,"ip_address":"","ucode":"0BC6CEE6F0F68F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjLoRwtxERaEMDCo87Vc450zrnAMm0RUQ8K8Yde4SGuEQLYeAiaKA5d6gQKXSQKyRJxeOiaVvX1vYA/132","comment_is_top":false,"comment_ctime":1537935524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537935524","product_id":100017301,"comment_content":"感谢老师很用心😁😁","like_count":0},{"had_liked":false,"id":27741,"user_name":"Alvin","can_delete":false,"product_type":"c1","uid":1026960,"ip_address":"","ucode":"BAC5FDAF1E3E5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/90/52d85edf.jpg","comment_is_top":false,"comment_ctime":1537935378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537935378","product_id":100017301,"comment_content":"讲的非常好！ <br>加法、乘法规则，O(logn) 和O(nlogn) 的讲解让我理解的更透彻了！<br>有一种终于看清楚的感觉！！！","like_count":0},{"had_liked":false,"id":27729,"user_name":"15221031154","can_delete":false,"product_type":"c1","uid":1250537,"ip_address":"","ucode":"0EE6255716517A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epx4KyvThXw7Sm1y7p2Mt0KAwADcU0tynbK58Ik6xTibN2dId4PrLfbhpHZ0DIDhVVxJXvTzeSDEicw/132","comment_is_top":false,"comment_ctime":1537933458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537933458","product_id":100017301,"comment_content":"事后统计法也是有必要的，通常时间复杂度在针对于执行次数越多的情况才会体现出来，比如同样是O（1）复杂度的代码，一个是循环调用远程服务执行10次(次数是固定的)，一个是只调用1次（批量操作），虽然从时间复杂度来讲都是O(1)。<br><br>但是从代码优化层面来讲，感觉时间复杂度只是一方面的评判标准。理论上越省时间，越省空间越好，能少一行代码就少一行代码，能少创建一个变量就少创建一个变量","like_count":0},{"had_liked":false,"id":27726,"user_name":"Crystal","can_delete":false,"product_type":"c1","uid":1247231,"ip_address":"","ucode":"EF548F665DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/ff/24f6f14c.jpg","comment_is_top":false,"comment_ctime":1537933273,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537933273","product_id":100017301,"comment_content":"多项式量级和非多项式量级的区别定义是什么呢？","like_count":0},{"had_liked":false,"id":27723,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1537932864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537932864","product_id":100017301,"comment_content":"新鲜出炉，当日刷完啦~<br>刚刚码了好多字，提交的时候要求登录，不知道有没有提交上 :(","like_count":0},{"had_liked":false,"id":27722,"user_name":"Jan","can_delete":false,"product_type":"c1","uid":1120199,"ip_address":"","ucode":"9F419A04E7AED8","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/c7/15d37f6d.jpg","comment_is_top":false,"comment_ctime":1537932739,"is_pvip":false,"replies":[{"id":"9959","content":"啊 我没看到这么写呀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537934960,"ip_address":"","comment_id":27722,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537932739","product_id":100017301,"comment_content":"总的时间复杂度就等于量级最大的那段代码的时间复杂度,即：T2(n)，為什麼T(n)等於兩個相加：<br>T(n)=T1(n)+T2(n)=O(max(f(n)+g(n))).<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425019,"discussion_content":"啊 我没看到这么写呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537934960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27719,"user_name":"白了少年头","can_delete":false,"product_type":"c1","uid":1053084,"ip_address":"","ucode":"A65E00E05B23BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/9c/4fd6ebe0.jpg","comment_is_top":false,"comment_ctime":1537932601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537932601","product_id":100017301,"comment_content":"借助老师的教程，终于有信息把数据结构与算法这块硬骨头啃掉了","like_count":0},{"had_liked":false,"id":27716,"user_name":"灯火可亲","can_delete":false,"product_type":"c1","uid":1241170,"ip_address":"","ucode":"BBC0FBD8BD4FA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/52/2afffb1f.jpg","comment_is_top":false,"comment_ctime":1537932167,"is_pvip":false,"replies":[{"id":"9969","content":"这个想法太好了 我思考一下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937596,"ip_address":"","comment_id":27716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537932167","product_id":100017301,"comment_content":"想知道有没有工具可以帮助我们算出算法复杂度","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425017,"discussion_content":"这个想法太好了 我思考一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27714,"user_name":"lilithinker","can_delete":false,"product_type":"c1","uid":1026159,"ip_address":"","ucode":"CE0682BFA1FB01","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/6f/00bdc332.jpg","comment_is_top":false,"comment_ctime":1537931956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537931956","product_id":100017301,"comment_content":"我操！通俗易懂，太牛逼了…","like_count":0},{"had_liked":false,"id":27713,"user_name":"Tensor","can_delete":false,"product_type":"c1","uid":1249504,"ip_address":"","ucode":"DA4395DF66DF72","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/e0/a1b10acb.jpg","comment_is_top":false,"comment_ctime":1537931912,"is_pvip":false,"replies":[{"id":"9957","content":"就是打印a【i】的值。我没写成代码 怕跟打印函数跟语言太相关 容易看不懂","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537934298,"ip_address":"","comment_id":27713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537931912","product_id":100017301,"comment_content":"老师，请问最后一段中的print out a[i]什么意思啊 ，没看懂<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425015,"discussion_content":"就是打印a【i】的值。我没写成代码 怕跟打印函数跟语言太相关 容易看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537934298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27707,"user_name":"ppingfann","can_delete":false,"product_type":"c1","uid":1242999,"ip_address":"","ucode":"38DE7D2F6D22E4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo435IStLENgI45dWOow9gPDh8RcqvuCOLp30XqLJK3wqmwO7QKRLx8sMg9eucMKnJdjwickrAQMBw/132","comment_is_top":false,"comment_ctime":1537931535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537931535","product_id":100017301,"comment_content":"讲的浅显易懂，我一直没明白O(1)和O(n)的区别，这下终于明白了。<br>不知道后面会不会讲到大O的由来，因为大O应该是来自于高数中的知识，如果能讲透就更便于记忆了。","like_count":0},{"had_liked":false,"id":27702,"user_name":"hope","can_delete":false,"product_type":"c1","uid":1250784,"ip_address":"","ucode":"468A802184AB32","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/e0/bc9f556c.jpg","comment_is_top":false,"comment_ctime":1537930999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537930999","product_id":100017301,"comment_content":"看完了，先打卡，稍后做总结","like_count":0},{"had_liked":false,"id":27698,"user_name":"BD","can_delete":false,"product_type":"c1","uid":1228560,"ip_address":"","ucode":"A95CF8C3EDC228","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","comment_is_top":false,"comment_ctime":1537930311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537930311","product_id":100017301,"comment_content":"1.算法的时间复杂度公式从小到大有O(1) O(logn) O(n)  <br>O(nlogn) O(n²) O(n!) 。<br><br>2.时间复杂度T(n)与规模n成正比与常数没关系","like_count":0},{"had_liked":false,"id":27694,"user_name":"Charles | 姜海龙","can_delete":false,"product_type":"c1","uid":1178235,"ip_address":"","ucode":"17BA74D1684184","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/7b/f89a398b.jpg","comment_is_top":false,"comment_ctime":1537929839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537929839","product_id":100017301,"comment_content":"听了老的课，学习到了很多，明白了以前不明白的东西！","like_count":0},{"had_liked":false,"id":27689,"user_name":"Nov.","can_delete":false,"product_type":"c1","uid":1241077,"ip_address":"","ucode":"354AE5AC1B28AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/f5/627a5b3a.jpg","comment_is_top":false,"comment_ctime":1537929590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537929590","product_id":100017301,"comment_content":"边听音频边看文字，必要的时候，暂停，自己画一画。多思考。","like_count":0},{"had_liked":false,"id":27687,"user_name":"行走着的宋公子","can_delete":false,"product_type":"c1","uid":1002416,"ip_address":"","ucode":"3FA47B1580A327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b0/2ae78627.jpg","comment_is_top":false,"comment_ctime":1537929306,"is_pvip":false,"replies":[{"id":"9975","content":"是的 潜移默化这个词用的到位","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937839,"ip_address":"","comment_id":27687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537929306","product_id":100017301,"comment_content":"复杂度分析是理论评判标准，带着标准写代码，这种潜移默化的影响，是对程序员很大的帮助。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425005,"discussion_content":"是的 潜移默化这个词用的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27684,"user_name":"大智若愚","can_delete":false,"product_type":"c1","uid":1020494,"ip_address":"","ucode":"4AFE3E53B77E86","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/4e/795d1ab1.jpg","comment_is_top":false,"comment_ctime":1537929140,"is_pvip":false,"replies":[{"id":"9977","content":"别急 慢慢来","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937866,"ip_address":"","comment_id":27684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537929140","product_id":100017301,"comment_content":"下一节有对递归算法的时间复杂度分析嘛？对递归算法的分析老是掌握不了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425003,"discussion_content":"别急 慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27681,"user_name":"UpToSky","can_delete":false,"product_type":"c1","uid":1243174,"ip_address":"","ucode":"138684CBDB0058","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/26/2ec4c4b1.jpg","comment_is_top":false,"comment_ctime":1537928682,"is_pvip":false,"replies":[{"id":"9980","content":"1. 写到里面也可以 没啥区别<br>2. 也没啥区别：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537937905,"ip_address":"","comment_id":27681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537928682","product_id":100017301,"comment_content":"老师好！两个小疑问。<br>1. 为什么要把循环变量的初始化写在循环外面，这样做有什么优点？<br>2. 循环变量使用 ++i 和使用 i++ 有什么区别？<br>谢谢！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425000,"discussion_content":"1. 写到里面也可以 没啥区别\n2. 也没啥区别：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537937905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27680,"user_name":"Tensor","can_delete":false,"product_type":"c1","uid":1249504,"ip_address":"","ucode":"DA4395DF66DF72","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/e0/a1b10acb.jpg","comment_is_top":false,"comment_ctime":1537928614,"is_pvip":false,"replies":[{"id":"9985","content":"其实不用纠结这个的 n次 还是n+1次 复杂度只是一个增长趋势的度量 一两个常量是左右不了复杂度的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938063,"ip_address":"","comment_id":27680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537928614","product_id":100017301,"comment_content":"老师，请问您写的for (; i &lt;= n; ++i)是执行了n次，<br>我看大话数据结构的for(i=1;1&lt;=n,i++)是执行了n+1次，<br>这是为什么啊？是因为i++和++i的原因吗？<br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424999,"discussion_content":"其实不用纠结这个的 n次 还是n+1次 复杂度只是一个增长趋势的度量 一两个常量是左右不了复杂度的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27677,"user_name":"caidy","can_delete":false,"product_type":"c1","uid":1188783,"ip_address":"","ucode":"AEFB529C32C7EE","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/af/84f4714e.jpg","comment_is_top":false,"comment_ctime":1537928424,"is_pvip":false,"replies":[{"id":"9987","content":"嗯嗯 对的！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938087,"ip_address":"","comment_id":27677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537928424","product_id":100017301,"comment_content":"我不认为提前做时间复杂度和空间复杂度分析是浪费时间，而且老师最后也说了，熟悉了之后，渐变复杂度分析也是很快的，关键在于提前分析，我们能够知道最坏的情况下，系统性能是什么样子的，能投提前选择方案，做到知己，如果等到发生问题，再来分析，最快情况有可能出现重新设计算法，那这样更加不划算，所以提前做好预测不失为一个好的方法。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424997,"discussion_content":"嗯嗯 对的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27676,"user_name":"deemoprobe","can_delete":false,"product_type":"c1","uid":1137760,"ip_address":"","ucode":"FF52713DCE8ECF","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/60/982ea6e2.jpg","comment_is_top":false,"comment_ctime":1537928329,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537928329","product_id":100017301,"comment_content":"文章很好，很方便理解","like_count":0},{"had_liked":false,"id":27674,"user_name":"Yannnn","can_delete":false,"product_type":"c1","uid":1236151,"ip_address":"","ucode":"55297F6B1710F5","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/b7/7da8fc46.jpg","comment_is_top":false,"comment_ctime":1537928296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537928296","product_id":100017301,"comment_content":"终于理解对数时间复杂度的含义了！！当初在学习时就有些困惑，一直未解决。","like_count":0},{"had_liked":false,"id":27673,"user_name":"黄国华","can_delete":false,"product_type":"c1","uid":1223113,"ip_address":"","ucode":"B35F1D329514D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/c9/f8116c89.jpg","comment_is_top":false,"comment_ctime":1537928283,"is_pvip":false,"replies":[{"id":"9989","content":"第10讲会讲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938127,"ip_address":"","comment_id":27673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537928283","product_id":100017301,"comment_content":"递归式求解什么时候讲呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424996,"discussion_content":"第10讲会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27672,"user_name":"惟新","can_delete":false,"product_type":"c1","uid":1037553,"ip_address":"","ucode":"93D07C4D97F7AD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/f1/c06aa702.jpg","comment_is_top":false,"comment_ctime":1537928055,"is_pvip":false,"replies":[{"id":"9990","content":"理解的正确！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938168,"ip_address":"","comment_id":27672,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537928055","product_id":100017301,"comment_content":"复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。<br><br>时间复杂度度量：常量阶、对数阶、线性阶、线性对数阶、平方阶、立方阶...k次方阶、指数阶、阶乘阶。<br><br>时间复杂度 粗略分为 多项式量级 和 非多式量级（指数阶和阶乘阶）。<br><br>指数阶和阶乘阶为NP问题（非确定多项式）,随数据规模增长而急剧增长，通常要避免。<br>--------------------------------------------<br>通过阅读其他朋友的留言，项目性能测试之后，在做复杂度分析，其中印象最深的是 这样和同事交流的时候，一说这个项目的时间复杂度和空间复杂度，内心就会有一个直观的认识。<br>其他的好处，比如说，和性能测试相比，复杂度分析有成本低，效率高，易操作，指导性强。还可以养成随时考虑代码复杂度的习惯，提高编程质量。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424995,"discussion_content":"理解的正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27670,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1537927901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537927901","product_id":100017301,"comment_content":"终于等到你！加油，坚持！","like_count":0},{"had_liked":false,"id":27669,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1537927895,"is_pvip":false,"replies":[{"id":"9993","content":"因为是一个估计值 表示一个增长趋势。前面的系数没啥用 所以就省略了 统一表示成o（n）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938266,"ip_address":"","comment_id":27669,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537927895","product_id":100017301,"comment_content":"1. 只关注循环执行次数最多的一段代码    是一段代码 不是一行代码    为何不O(2n)  O(3n)等等   而都用O(n)表示   写法上的规定吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424993,"discussion_content":"因为是一个估计值 表示一个增长趋势。前面的系数没啥用 所以就省略了 统一表示成o（n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27667,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1537927861,"is_pvip":false,"replies":[{"id":"9996","content":"你理解的没错啊 假设数据规模是n。然后看代码执行时间。n并不是每行代码执行的次数和。每行代码执行的次数和有可能是n平方 n立方等","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537938402,"ip_address":"","comment_id":27667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537927861","product_id":100017301,"comment_content":"老师你好，看了今天你写的文章。我有一个问题，数据规模n到底指的是什么呢？因为你这里说n是每行代码的执行次数，但是遍观全文，感觉貌似是由于数据量才导致了代码执行次数。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424992,"discussion_content":"你理解的没错啊 假设数据规模是n。然后看代码执行时间。n并不是每行代码执行的次数和。每行代码执行的次数和有可能是n平方 n立方等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537938402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27666,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1537927861,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1537927861","product_id":100017301,"comment_content":"最后一道题的时间复杂度应该是 √n吧","like_count":0},{"had_liked":false,"id":27664,"user_name":"luffy","can_delete":false,"product_type":"c1","uid":1244950,"ip_address":"","ucode":"702034E116A99F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/16/b0ab9a73.jpg","comment_is_top":false,"comment_ctime":1537927773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537927773","product_id":100017301,"comment_content":"看完第一个代码片段，豁然开朗，原来困惑我的是不知道计算规则。","like_count":0},{"had_liked":false,"id":27659,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1537927431,"is_pvip":false,"replies":[{"id":"9929","content":"实际上 2n 还是 3n 甚至是4n都没区别的。因为本身就是估算。在大o复杂度表示里面 n前面的系数都会被省略的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928129,"ip_address":"","comment_id":27659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537927431","product_id":100017301,"comment_content":"for (; i &lt;= n; ++i) <br>{<br>    sum = sum + i;<br>}<br>4,5行是2*N我还是没弄懂，希望懂了的，告诉我下<br>照我的理解，i&lt;=n,++i，sum=sum+i 都是需要CPU参与运算的，按照前面说的，都为unit_time<br>那么就不应该是2*N而是3*N<br>为什么要说是两行就是2*N，那循环体内，我改成int ret = sum+i; sum = ret; 是不是就变成了3*N？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424990,"discussion_content":"实际上 2n 还是 3n 甚至是4n都没区别的。因为本身就是估算。在大o复杂度表示里面 n前面的系数都会被省略的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27657,"user_name":"zwh","can_delete":false,"product_type":"c1","uid":1118134,"ip_address":"","ucode":"0E5690C0773C2D","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/b6/a8bbc3c6.jpg","comment_is_top":false,"comment_ctime":1537927358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537927358","product_id":100017301,"comment_content":"这个专栏早点出来就好了。。那会看算法书真的一度怀疑自己智商是否属于正常。。然后果断放弃了","like_count":0},{"had_liked":false,"id":27655,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1537927306,"is_pvip":false,"replies":[{"id":"9930","content":"你写的没错啊 就是你写的这样子","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928199,"ip_address":"","comment_id":27655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537927306","product_id":100017301,"comment_content":"您好，大部分内容我都能看懂，但是O（nlog（n））这个复杂度您能否给一个例子，我自己感觉嵌套调用<br>f(int i){<br>   ...<br>}<br><br>for（int i=0;i&lt;n;i++）{<br>     f(i)<br>}<br>是这样吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424989,"discussion_content":"你写的没错啊 就是你写的这样子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27650,"user_name":"A 凡","can_delete":false,"product_type":"c1","uid":1197361,"ip_address":"","ucode":"BDC8DB599B8284","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/31/53910b61.jpg","comment_is_top":false,"comment_ctime":1537926926,"is_pvip":false,"replies":[{"id":"9927","content":"因为空间复杂度要比时间复杂度简单很多 也好分析很多 所以重点就放在了时间复杂度上","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537927110,"ip_address":"","comment_id":27650,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537926926","product_id":100017301,"comment_content":"关于时间复杂度看了之后认识清晰了很多，但是感觉关于空间复杂度被一笔带过了，认识还有点模糊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424985,"discussion_content":"因为空间复杂度要比时间复杂度简单很多 也好分析很多 所以重点就放在了时间复杂度上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537927110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27648,"user_name":"leopard","can_delete":false,"product_type":"c1","uid":1233820,"ip_address":"","ucode":"F38A066F16C9F4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/9c/1b9ce090.jpg","comment_is_top":false,"comment_ctime":1537926728,"is_pvip":false,"replies":[{"id":"9932","content":"理解的正确！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928259,"ip_address":"","comment_id":27648,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537926728","product_id":100017301,"comment_content":"算法的复杂度分析能够不依赖程序的语言、运行环境，能根据数据的规模对程序的运行效率进行估算。这样在写程度时我们就有了理论依据，知道什么样的算法的效率高，朝这个方向努力。而单纯的性能测试太依赖运行环境具有很大的随机性。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424983,"discussion_content":"理解的正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27645,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1537926415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537926415","product_id":100017301,"comment_content":"看了这篇文章，终于搞懂时间复杂度了，先前看java数据结构与算法这本书，看了几次都没看懂，这次终于看懂了，给老师一个大赞！👍","like_count":0},{"had_liked":false,"id":27644,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1537926345,"is_pvip":false,"replies":[{"id":"9936","content":"2n 前面的2就是系数<br>n^2 + n 其中n就是低阶","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928462,"ip_address":"","comment_id":27644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537926345","product_id":100017301,"comment_content":"而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。     请问什么是低阶和系数 能举个具体例子吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424981,"discussion_content":"2n 前面的2就是系数\nn^2 + n 其中n就是低阶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27641,"user_name":"","can_delete":false,"product_type":"c1","uid":1119000,"ip_address":"","ucode":"B440EC07B93B7E","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/18/029a8804.jpg","comment_is_top":false,"comment_ctime":1537926255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537926255","product_id":100017301,"comment_content":"时间和空间复杂度分析的是随数据规模的增大，算法执行时间和内存空间占用的增长趋势！","like_count":0},{"had_liked":false,"id":27637,"user_name":"Aruen","can_delete":false,"product_type":"c1","uid":1235654,"ip_address":"","ucode":"BCEECC5684EE36","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/c6/e1b2797b.jpg","comment_is_top":false,"comment_ctime":1537925991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537925991","product_id":100017301,"comment_content":"讲的非常透彻，对时间、空间复杂度有了重新的认识，理解的更透彻了！","like_count":0},{"had_liked":false,"id":27626,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1537925550,"is_pvip":false,"replies":[{"id":"9939","content":"编辑给画的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928615,"ip_address":"","comment_id":27626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537925550","product_id":100017301,"comment_content":"老师的图是什么软件画的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424972,"discussion_content":"编辑给画的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27623,"user_name":"zyiz","can_delete":false,"product_type":"c1","uid":1241458,"ip_address":"","ucode":"85C840EF9F9CB5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJFoVHjvQ1v9zCMmYk8aYJDdX1B7kFsibibJ1PKbvvyrjqrkzFPiaU0Gicv029fRUib22fBniccmCmecYPA/132","comment_is_top":false,"comment_ctime":1537925348,"is_pvip":false,"replies":[{"id":"9941","content":"是o（n）。你再想想","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928806,"ip_address":"","comment_id":27623,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537925348","product_id":100017301,"comment_content":"老师 最后一段代码的时间复杂度是多少呢？ 是O(logN)吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424970,"discussion_content":"是o（n）。你再想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27618,"user_name":"老王","can_delete":false,"product_type":"c1","uid":1236457,"ip_address":"","ucode":"79B81C8F6179CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/e9/c939283c.jpg","comment_is_top":false,"comment_ctime":1537924940,"is_pvip":false,"replies":[{"id":"9940","content":"哈哈 不好意思 让你误解了 我改成print out了 跟函数没关系","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928664,"ip_address":"","comment_id":27618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537924940","product_id":100017301,"comment_content":"空间复杂度那个代码不是有个递归？print ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424967,"discussion_content":"哈哈 不好意思 让你误解了 我改成print out了 跟函数没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27615,"user_name":"longer","can_delete":false,"product_type":"c1","uid":1105881,"ip_address":"","ucode":"5D275DE2034E4D","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/d9/d99c871d.jpg","comment_is_top":false,"comment_ctime":1537924769,"is_pvip":false,"replies":[{"id":"9942","content":"理解的没错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928835,"ip_address":"","comment_id":27615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537924769","product_id":100017301,"comment_content":"性能测试我理解是必须要有实现代码之后才能进行的，已经花了很多时间和精力去实现了，然后性能测试不过，不是很浪费时间？<br><br>但是也并不是说做了时间空间复杂度分析之后就可以保证性能测试能过，但是可以降低这样的概率，减少返工可能性。况且掌握了方法之后，时间复杂度分析并不是那么难的事情。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424965,"discussion_content":"理解的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27613,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1537924375,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537924375","product_id":100017301,"comment_content":"看完了，立个Flag,文章出的当天一定看完。","like_count":0},{"had_liked":false,"id":27611,"user_name":"yeStwind","can_delete":false,"product_type":"c1","uid":1246608,"ip_address":"","ucode":"D228FF739310D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/90/ba14b40a.jpg","comment_is_top":false,"comment_ctime":1537924340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537924340","product_id":100017301,"comment_content":"王老师，第二个例子，第 6、7 行代码循环执行了 n2遍，所以需要 2n2 * unit_time 的执行时间，这句没看懂。我理解5、6、7行分别执行了n次，时间复杂度应该是n的立方。<br><br>极客时间版权所有: https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;40036","like_count":0},{"had_liked":false,"id":27609,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1001791,"ip_address":"","ucode":"17EB44A983C7C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/3f/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1537924278,"is_pvip":false,"replies":[{"id":"9943","content":"看起来似乎有道理 不过我得再想想你这个有没有规律","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1537928951,"ip_address":"","comment_id":27609,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537924278","product_id":100017301,"comment_content":"在不考虑i业务意义，只从分析和理解对数阶时间复杂度的角度出发，个人觉得将原函数进行如下转换更容易理解为什么该算法的时间复杂度为O(log2(n))。<br>i=1;                               i=0;<br>while (i &lt;= n)  {      =&gt;          while (i &lt;= log2(n))  {<br>   i = i * 2;                         i++;<br>}                                 }<br>个人愚见，不对之处请老师同学们指正。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424964,"discussion_content":"看起来似乎有道理 不过我得再想想你这个有没有规律","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537928951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27608,"user_name":"thinkings","can_delete":false,"product_type":"c1","uid":1050132,"ip_address":"","ucode":"2E28A5D96ABB54","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/14/4430835a.jpg","comment_is_top":false,"comment_ctime":1537924252,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1537924252","product_id":100017301,"comment_content":"i=1; <br>while (i &lt;= n) {<br>i = i * 2<br>}<br>按照文章中的分析方法，每行代码的执行时间是uint_time，代码中执行次数最多的是<br>while (i &lt;= n) {<br>i = i * 2<br>}；而这个代码每次循环的复杂度是2，即N次循环是2n，即最后复杂度是O(n);<br>是不是应该这样理解更准确呢？<br>即<br>i=1; <br>while (i &lt;= n) {<br>i = i * 2<br>}<br>和<br>i=1; <br>while (i &lt;= n) {<br>i = i + 2<br>}<br>复杂度是否应该是一样的？","like_count":0},{"had_liked":false,"id":27606,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1537924200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537924200","product_id":100017301,"comment_content":"复杂度分析是分析算法效率的关键","like_count":0},{"had_liked":false,"id":27605,"user_name":"LeonZ","can_delete":false,"product_type":"c1","uid":1235471,"ip_address":"","ucode":"0C35A3817B47E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/0f/2f7d635c.jpg","comment_is_top":false,"comment_ctime":1537924084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537924084","product_id":100017301,"comment_content":"谢谢！讲得比我老师清楚，开心","like_count":0},{"had_liked":false,"id":27588,"user_name":"爱学习","can_delete":false,"product_type":"c1","uid":1182718,"ip_address":"","ucode":"9E5BDA4C8E95F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/fe/d738d7cf.jpg","comment_is_top":false,"comment_ctime":1537922683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537922683","product_id":100017301,"comment_content":"前几天看复杂度分析，一头雾水，今天看老师写的，领悟很多，再看几遍，争取拿下","like_count":0},{"had_liked":false,"id":27581,"user_name":"by","can_delete":false,"product_type":"c1","uid":1242524,"ip_address":"","ucode":"B35FB69EB23E3A","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/9c/8c14d4bd.jpg","comment_is_top":false,"comment_ctime":1537922414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537922414","product_id":100017301,"comment_content":"老师，开发中可能会遇到集合里是对象，对象里有集合的情况，需要获取每个对象里的集合的每个值做判断，这样得需要2层for，时间复杂度也就是n的2次方，知道复杂度很大，但是不得不这么做，岂不是很纠结？还有一个问题就是，如果知道这个集合里的对象大小很小循环次数少，这样的情况呢？","like_count":0},{"had_liked":false,"id":27553,"user_name":"火山飘雪","can_delete":false,"product_type":"c1","uid":1135988,"ip_address":"","ucode":"8EA1CE2DA06DF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/74/04e95bd8.jpg","comment_is_top":false,"comment_ctime":1537921452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537921452","product_id":100017301,"comment_content":"性能测试和时间复杂度并不冲突，性能测试是对项目做整体的耗时监测，而时间复杂度的分析是对具体代码端的执行效率分析，再者文中也提到了性能测试是跟平台有关的，而时间复杂度分析是跟平台无关的。学会并掌握了时间复杂度的分析方法，形成一种思想，在编写代码时就会把执行效率考虑进去了。 ","like_count":0},{"had_liked":false,"id":27543,"user_name":"撒旦CC","can_delete":false,"product_type":"c1","uid":1031718,"ip_address":"","ucode":"BC8BCA0D051752","user_header":"","comment_is_top":false,"comment_ctime":1537920612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537920612","product_id":100017301,"comment_content":"为什么用O来表示时间复杂度呢，而不是其他符号？","like_count":0},{"had_liked":false,"id":27533,"user_name":"code047","can_delete":false,"product_type":"c1","uid":1241330,"ip_address":"","ucode":"7223DB00BC8016","user_header":"","comment_is_top":false,"comment_ctime":1537920013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537920013","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":27528,"user_name":"李简单","can_delete":false,"product_type":"c1","uid":1167138,"ip_address":"","ucode":"0FEA07F1B19F13","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/22/2091d425.jpg","comment_is_top":false,"comment_ctime":1537919568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537919568","product_id":100017301,"comment_content":"老师，如果时间复杂度只考虑最大变化量的话，像T(n)=O(2n),T(n)=O(2n^2)。n前面的2需要考虑吗？","like_count":0},{"had_liked":false,"id":27526,"user_name":"…","can_delete":false,"product_type":"c1","uid":1234613,"ip_address":"","ucode":"D3CB940E8C8E91","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/b5/a549f1dd.jpg","comment_is_top":false,"comment_ctime":1537919064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537919064","product_id":100017301,"comment_content":"我们知道，对数之间是可以互相转换的，log3n 就等于 后面这块有个小错。","like_count":0},{"had_liked":false,"id":27521,"user_name":"ACE~洛洛","can_delete":false,"product_type":"c1","uid":1234738,"ip_address":"","ucode":"39F558FF2E45B7","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/32/ee606730.jpg","comment_is_top":false,"comment_ctime":1537918535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537918535","product_id":100017301,"comment_content":"首先，计算机的资源是有限的；我们要尽可能的节约计算机的资源但是同时也要在性能上得到最大的优化，项目做出来的实际性能测试和我们分析的性能有着不可分割的关系，因为性能测试这工作是要从每一段代码进行出发考虑，才能达到整体的优化，如果光靠后期测试来评估，那么在后期提升性能上就会很艰巨，所有在写代码的时候进行时间空间复杂度分析，有助于我们实时的把控资源效率，降低后期维护的工作量","like_count":0},{"had_liked":false,"id":27520,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1245815,"ip_address":"","ucode":"555B9877F6AA4D","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/77/f307372e.jpg","comment_is_top":false,"comment_ctime":1537918512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537918512","product_id":100017301,"comment_content":"讲的非常好，下面说老师讲的有问题的，请私下给老师说，不要误导别的同学。","like_count":0},{"had_liked":false,"id":27518,"user_name":"不许联想","can_delete":false,"product_type":"c1","uid":1017236,"ip_address":"","ucode":"9EEA5669D091F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/94/96f28fa0.jpg","comment_is_top":false,"comment_ctime":1537918465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537918465","product_id":100017301,"comment_content":"这才是我要的，这才是科学方法论","like_count":0},{"had_liked":false,"id":27511,"user_name":"linhaixiaohuo","can_delete":false,"product_type":"c1","uid":1050836,"ip_address":"","ucode":"B02E7793AD3B00","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/d4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1537917090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537917090","product_id":100017301,"comment_content":"买了本算法导论看，里面公式多，少例子，老师的更通俗易懂的讲解刚好能够相辅相成的学懂。","like_count":0},{"had_liked":false,"id":27510,"user_name":"亢龙有悔","can_delete":false,"product_type":"c1","uid":1122165,"ip_address":"","ucode":"0EF00D3A3A6AB2","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/75/40e9ce4e.jpg","comment_is_top":false,"comment_ctime":1537917010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537917010","product_id":100017301,"comment_content":"内容细致入微，比书上写的浅显易懂多了。","like_count":0},{"had_liked":false,"id":27493,"user_name":"Northern","can_delete":false,"product_type":"c1","uid":1060908,"ip_address":"","ucode":"6B8DB4CF385029","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/2c/333d7080.jpg","comment_is_top":false,"comment_ctime":1537895656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537895656","product_id":100017301,"comment_content":"渐进时间复杂度","like_count":0}]}