{"id":741016,"title":"术语表","content":"\n<p> <strong>Abstract 抽象</strong>：隐藏细节。编程语言越抽象，你写出程序所需的运算步骤就越少，每一步的功能就越强。</p>\n<p> <strong>Ada</strong>：一种面向对象编程语言，20世纪70年代末由一个委员会为美国国防部设计。它的下场与你猜想的一样。</p>\n<p> <strong>AI/Artificial Intelligence 人工智能</strong>：一个概括性术语，用来描述几种尝试让机器学会思考的技术，其中偏重数学的方法已经取得了一些进展（计算机视觉就是一个例子）。</p>\n<p> <strong>Algol</strong>：一种编程语言，最初在1958年由一个委员会设计（不利因素），这个委员会的成员非常聪明（有利因素）。它很少用于编程，但是对于后来的编程语言有着巨大影响。</p>\n<p> <strong>Algorithm 算法</strong>：完成任务的方法。菜谱也算是算法。</p>\n<p> <strong>Alphanumeric Character 字母数字字符</strong>：26个英文字母和10个阿拉伯数字的总称。</p>\n<p> <strong>API/Application Program Interface 应用程序编程接口</strong>：操作系统或函数库提供的一系列命令，供应用程序与其对话。</p>\n<p> <strong>APL</strong>：一种极其简洁的语言，20世纪60年代初由肯尼斯·艾佛森（Ken Iverson）设计，常用于数值应用（numerical application）。它在现代编程语言中的继承者是J语言。</p>\n<p> <strong>Application 应用程序</strong>：不属于系统软件的程序，比如文字处理器。操作系统不属于应用程序。这个词的含义不是很精确。</p>\n<p> <strong>Arc</strong>：一种炒作已久却始终没有亮相的Lisp方言<span class=\"comment-number\">1</span>。</p>\n\n<p> <strong>Array 数组</strong>：一种存储数据的方式，教材中又称矩阵（matrix），即多个用数字编号的存储空间，排列成一个<em>n</em>维的集合。</p><!-- [[[read_end]]] -->\n<p> <strong>ASP/Application Service Provider 应用服务提供商</strong>：这种软件公司允许用户通过网络使用存放在服务器上的软件，而不是采用传统的方式让用户在自己的计算机上安装软件后使用。</p>\n<p> <strong>Assembly Language 汇编语言</strong>：机器语言的一种改进版，对程序员更友好一些。它与机器语言使用同样的命令，但是你可以用更简单方便的名称调用这些命令。</p>\n<p> <strong>Bandwidth 带宽</strong>：网络连接时传送数据的速度。</p>\n<p> <strong>Bayesian 贝叶斯定理</strong>：一种统计推断的方法，又称贝叶斯算法。</p>\n<p> <strong>Binary 二进制</strong>：如果这个词前面有冠词（比如a binary），指的是软件的目标码。如果没有冠词，指的是采用二进制（而不是日常使用的十进制）作为表示数字的方法，即从最右面一位开始，每一位都代表以2为底的乘方（而不是以10为底的乘方）。所以，二进制的101就相当于十进制的5。大多数计算机内部采用二进制表示数据，因为两种状态（打开和关闭）的电路比十种状态的电路更容易设计。</p>\n<p> <strong>Bit Manipulation 位操作</strong>：对某个内存区域的一些简单的转换操作，比如在屏幕上移动窗口就可以通过位操作实现。</p>\n<p> <strong>Block-Structured 块结构</strong>：某些语言支持的子区域结构。有了这种语法，就可以实现结构化编程，而不是简单地一条条按顺序执行命令。</p>\n<p> <strong>Blub Paradox Blub困境</strong>：程序员的思想往往会受到自己正在使用的语言的束缚，不相信还存在更强大的语言。</p>\n<p> <strong>Bondage &amp; Discipline Language B&amp;D语言</strong>：编程规则极其严格的语言，对程序员的纪律性要求很高，好像被枷锁束缚一样。</p>\n<p> <strong>Bottom-Up Programming 自下而上编程</strong>：一种编程的风格，与早期的“自上而下编程”（top-down programming）正好相反。“自上而下编程”要求你把编程任务分解成一个个更小的单元，“自下而上编程法” 要求你先开发最底下的层，然后用底层所定义的“语言”开发上一层，这样直到最高层。这两种编程法可以结合使用。</p>\n<p> <strong>Bound 限制</strong>：受到某种资源的约束，比如I/O限制、内存限制和CPU限制等。</p>\n<p> <strong>Branch 分支</strong>：机器语言的<code>goto</code>命令。</p>\n<p> <strong>Brooks's Hypothesis 布鲁克斯假说</strong>：程序员一天写出的代码行数是一个常量，与他使用什么语言无关。</p>\n<p> <strong>Buffer Overflow Attack 缓冲区溢出攻击</strong>：参见第10章的相关注解。</p>\n<p> <strong>Buffer 缓冲区</strong>：一个内存区域，用来保存程序需要的输入数据，或者将程序的输出数据累积起来，到一定数量后再输出。</p>\n<p> <strong>Bug</strong>：程序包含的错误。它的历史甚至比计算机还要悠久。20世纪早期的百老汇舞台剧就经常说“把bug处理了”。</p>\n<p> <strong>Byte Code 字节码</strong>：类似于机器语言的计算机语言，但是不局限于特定的计算机。由于字节码与机器语言很类似，所以很容易开发出字节码解释器，让它把字节码转换成相应的机器语言命令。</p>\n<p> <strong>C++</strong>：一种为C语言加入面向对象编程能力的语言，由本贾尼·斯特劳斯特卢普（Bjarne Stroustrup）在1983年设计。它流行起来的原因是它的语法与C语言很相似，而且用它开发的程序能够与C语言程序混合在一起。</p>\n<p> <strong>Checksum 校验和</strong>：一种用特征值验证文件的方法。特征值通过对文件的所有信息进行某种计算而产生。比如，文件包含的字符数量就是一种特征值（这种方法的效果并不好）。</p>\n<p> <strong>Circular Definition 循环定义</strong>：参见“无限循环”（Infinite Loop）。</p>\n<p> <strong>Class 类</strong>：面向对象编程语言的一种数据类型。</p>\n<p> <strong>Click Trail 点击轨迹</strong>：同一个用户向网络服务器发出的一系列http请求，基本等同于他浏览的网页顺序。</p>\n<p> <strong>Client 客户端</strong>：一台向服务器发出请求的计算机或其他设备。</p>\n<p> <strong>Cobol</strong>：一种较原始的编程语言，20世纪60年代初诞生，供商务性应用程序使用。它一度是最流行的语言，直到最近才被Java语言取代。</p>\n<p> <strong>Code Bloat 代码膨胀</strong>：程序过于冗长，大大超过合理的长度。</p>\n<p> <strong>Code 代码</strong>：一般情况下指的就是源代码（source code）。</p>\n<p> <strong>Collocated 托管</strong>：通常指放在ISP处。</p>\n<p> <strong>Comment 注释</strong>：程序中不被计算机执行的部分，通常是为了向人类读者做说明而插在源码中。</p>\n<p> <strong>Common Gateway Interface Script CGI脚本/通用网关接口脚本</strong>：当网络服务器需要进行某种运算（比如数据库搜索）而不是直接传输现有文件时所运行的一种程序。CGI脚本的主要缺点是，每次运行只能生成一个页面，无法像桌面软件那样将数据保存在内存中从而实现与用户不间断的对话。</p>\n<p> <strong>Common Lisp</strong>：Lisp语言的一种流行的方言，20世纪80年代由一个委员会设计。</p>\n<p> <strong>Compiler 编译器</strong>：一种程序，将更强大、更流行的语言（高级语言）写的程序翻译成计算机硬件能够理解的命令（机器语言）。参见“解释器”（Interpreter）。</p>\n<p> <strong>Complexity 复杂度</strong>：算法的“时间复杂度”（time complexity）指的是，当输入的数据量不断增加时，计算机完成这种算法所消耗的时间。比如，你要在一间屋子中寻找某一个人，方法是看每个人的脸，那么找到这个人所需要的时间与屋中的人数成正比。这样一种算法的时间复杂度就是<em>O</em>(<em>n</em>)，意为所需的时间与<em>n</em>成比例（<em>n</em>代表数据量）。现在进一步假设你要在屋子中寻找看上去长得很像的两兄弟（或两姐妹），那么你所需要的时间可能与人数的平方成正比，因为你也许不得不每两个人就比较一次，而所有可能的两人组合是人数的平方，时间复杂度就是<em>O</em>(<em>n</em><sup>2</sup>)。</p>\n<p> <strong>Conditional Structure 条件结构</strong>：高级语言的一种表达式（或语句），通过判断条件是否为真而执行不同的代码。比如，判断是否出太阳，如果是的就去散步，否则就待在屋里读书。</p>\n<p> <strong>Content-Based Filtering 基于内容的过滤</strong>：根据电子邮件的内容而不是它的外部特征（比如发件人邮箱地址）进行过滤。</p>\n<p> <strong>CPU/Central Processing Unit 中央处理器</strong>：计算机的一部分，如今通常是一块芯片，负责执行运算。这个概念正在变得模糊，因为处理器现在广泛用于各种各样的设备，比如显卡和硬盘。</p>\n<p> <strong>Crash 崩溃</strong>：bug引起的操作系统或应用程序停止正常工作。用在硬盘上面也指硬件失灵。</p>\n<p> <strong>Cruft 冗余</strong>：多余的不适用的信息（尤其指代码），也可用来指硬件。</p>\n<p> <strong>Cycle 周期</strong>：执行一个机器指令的最少时间。一台内部时钟频率为1 GHz的计算机可以在1秒内完成10亿个周期，即每秒执行10亿条机器指令。</p>\n<p> <strong>C语言</strong>：一种简洁优美的计算机语言，由丹尼斯·里奇（Dennis Ritchie）在20世纪70年代初设计。广泛用于操作系统和路由器的编程。</p>\n<p> <strong>DARPA/Defense Advanced Research Projects Agency 美国国防部高级研究计划局</strong>：一个赞助美国国内很多计算机研究项目的机构。</p>\n<p> <strong>Data Structure 数据结构</strong>：一种由多个部分组成的数据格式。比如，一对数据可以组成一个数据结构，表示图形上的一个点。</p>\n<p> <strong>Data Type 数据类型</strong>：编程语言处理的数据种类。典型的数据类型包括整数（比如1）、浮点数（教材中也称十进制小数，比如1.234）和字符串（比如monster）。</p>\n<p> <strong>Debugging 排错</strong>：发现和纠正程序的错误。</p>\n<p> <strong>Declaration 声明</strong>：程序的要素之一，描述的成分多于命令的成分。最常见的声明是变量类型声明，用于说明一个变量包含哪一类数据。</p>\n<p> <strong>Deprecated 废弃</strong>：原来属于标准的某种做法，现在它的设计者后悔做出了这样的设计。</p>\n<p> <strong>Design War 设计战争</strong>：一种竞争规则，只要是最好的设计就能获胜，而不是其他因素（比如广告宣传、销售渠道的控制）主导竞争。</p>\n<p> <strong>Device Driver 设备驱动程序</strong>：操作系统的一部分，使操作系统可以与硬件设备（比如打印机）对话。</p>\n<p> <strong>Diff</strong>：对某件东西的两个版本进行客观的、精细的比较。这个词源自Unix操作系统的一个用来比较文件的应用程序。</p>\n<p> <strong>Dynamic Typing 动态类型</strong>：参见“静态类型”（Static Typing）。</p>\n<p> <strong>Embedded Language 嵌入式语言</strong>：在一种语言内部定义的另一种语言，常用于解决某些特殊的问题。如果你定义了一系列操作图像的命令，你就可以把它们视为一种操作图像的语言，参见“自下而上编程”（Bottom-Up Programming）。</p>\n<p> <strong>End User 最终用户</strong>：需求很简单的用户的婉转说法。</p>\n<p> <strong>Environment 编程环境</strong>：帮助编程的软件，比如编辑器和性能分析器。</p>\n<p> <strong>Expression 表达式</strong>：运行后生成一个值的一串代码，比如表达式2+3将生成5。</p>\n<p> <strong>Field 字段</strong>：一种数据结构的组成部分。</p>\n<p> <strong>File 文件</strong>：一串字符或者二进制位，通常存储在硬盘上。</p>\n<p> <strong>Fortran</strong>：一种广泛用于数值应用的编程语言。1956年，IBM的一个开发小组设计了这种语言，此后它有了巨大的变化。</p>\n<p> <strong>Freebsd</strong>：一种Unix的开源版本。</p>\n<p> <strong>Freeware 自由软件</strong>：自由传播的软件。</p>\n<p> <strong>Function 函数</strong>：一个子程序，调用后生成一个值返回。在一些语言中，函数也是一种数据类型。</p>\n<p> <strong>Garbage Collection 垃圾回收</strong>：程序自动判断哪些内存不再需要，并予以回收，而不是要求程序员在使用完毕后明确声明（这样的声明经常是错的）。</p>\n<p> <strong>Glue Program 胶水程序</strong>：在应用程序之间整理或者转移数据的程序。</p>\n<p> <strong>Goto</strong>：将程序的运行顺序从一部分改向另一部分的命令。<code>Goto</code>与子程序调用最大的不同在于它使用后没有办法再回到原处，所以如果用了<code>goto</code>，程序往往会乱成一团。现在已经很少使用这个命令了。</p>\n<p> <strong>Greenspun's Tenth Rule 格林斯潘第十定律</strong>：“任何C或Fortran程序复杂到一定程度之后，都会包含一个临时开发的、只有一半功能的、不完全符合规格的、到处都是bug的、运行速度很慢的Common Lisp实现。”</p>\n<p> <strong>Hack 破解</strong>：一种破坏规则的解决方法，可能有益，也可能有害。</p>\n<p> <strong>Hacker 黑客</strong>：解释一，优秀程序员；解释二，侵入他人电脑的人。</p>\n<p> <strong>Hash Table 散列表</strong>：一种类似数据库的数据结构，存储在里面的每一段数据都有一个对应的键，使用时可以按照键取出对应的数据。</p>\n<p> <strong>Header 邮件头</strong>：电子邮件最前面的那部分，包含了邮件本身的相关信息。普通用户只会看到发件人（from）、收件人（to）、日期（date）、主题（subject）和抄送（CC）等信息，但是邮件还包含其他信息（比如邮件的传送路径）。</p>\n<p> <strong>Heuristic 启发</strong>：从经验法则中得到灵感。</p>\n<p> <strong>High-Level Programming Language 高级编程语言</strong>：比机器语言抽象得多的语言。</p>\n<p> <strong>HTML/HyperText Markup Language 超文本标记语言</strong>：用来撰写网页的一套书写法。</p>\n<p> <strong>HTTP/HyperText Transfer Protocol 超文本传输协议</strong>：网络服务器与浏览器之间的通信协议。</p>\n<p> <strong>I/O 输入（Input）和输出（Output）</strong>：通常是指读取和显示（或打印）字符或二进制数据。</p>\n<p> <strong>Indented 缩进</strong>：源代码就像一篇文章的大纲一样，用缩进显示自身的结构。比如，代码的某个部分需要重复n次，那么这部分代码往往就缩进，表示它们处在一个循环之中。对于大多数语言来说，缩进只是让代码可读性更好。但是，对于另一些语言（比如Python），缩进有着特别重大的意义，会影响程序的行为。</p>\n<p> <strong>Infinite Loop 无限循环</strong>：参见“循环定义”（Circular Definition）。</p>\n<p> <strong>Inner Loop 内循环</strong>：一个程序中执行次数最频繁的部分。</p>\n<p> <strong>Instrument 记录仪</strong>：修改程序使得它的每一步结果都得到记录，这样的话，如果程序运行速度缓慢或者占用太多内存，你就能找到原因。</p>\n<p> <strong>Intel Box Intel机</strong>：装备Intel处理器的计算机。</p>\n<p> <strong>Interpreter 解释器</strong>：解释器类似于编译器，处理使用高级语言写出的程序。但是，它不是将整个程序转为机器语言再运行，而是每次读入一行代码，然后执行相应的机器语言命令，之后再去读下一行代码。</p>\n<p> <strong>IT/Information Technology 信息技术</strong>：计算机的基础设施以及那些负责维护它们的人。这个词主要是大公司或者非技术行业的公司在用。</p>\n<p> <strong>Java</strong>：由詹姆斯·高斯林（James Gosling）设计，原意是对C++进行改进。一开始它的名字叫作Oak，后来被Sun公司改成Java。Sun公司采用Java的目的是，希望在操作系统和应用程序之间加入一个由自己控制的层。这个目的没有实现，但是Java最终还是流行起来了，一部分原因是Sun公司巨大的市场推广投入，另一部分原因是市场确实需要一种比C++更好的语言。</p>\n<p> <strong>JavaScript</strong>：一种针对浏览器的脚本语言，由布兰登·艾奇（Brendan Eich）设计。它与Java语言并没有内在联系，而且本身在很多方面都有设计缺陷。它的名声也不太好，因为许多网站用它干见不得人的勾当。</p>\n<p> <strong>Kludg 蹩脚</strong>：水平很差的破解。（这个词与表示“丑角”之意的stooge是押韵的！）</p>\n<p> <strong>Larval Startup 雏形创业公司</strong>：创业公司最早期、还未成形的阶段。此时，潜在的创业者还不确定是否应该成立一家公司创业。</p>\n<p> <strong>Legacy Software 历史遗留软件</strong>：这些软件虽然还有人使用，但是并不符合使用者的要求。他们继续使用只是因为无钱购买新软件，或者不敢改变现状。</p>\n<p> <strong>Lexical Closure 闭包</strong>：一个函数，通过它可以引用由包含这个函数的代码所定义的变量。第13章附录中的累加器生成就用到了闭包。</p>\n<p> <strong>LFSP/Language for Smart People 聪明人的语言</strong>：设计目标主要是追求功能强大而不是保证安全性的编程语言。</p>\n<p> <strong>Library 函数库</strong>：已经写好的代码片段，可以用来执行特定任务。</p>\n<p> <strong>Linux</strong>：Unix操作系统的一个开源版本。讲究一点的话，它应该被称为GNU Iinux，因为它的内核部分是由林纳斯·托瓦兹（linus Torvalds）编写的，但是其他更大量的代码来自理查德·斯托曼（Richard Stallman）的GNU项目。</p>\n<p> <strong>Lisp</strong>：一种编程语言的分支，由约翰·麦卡锡（John McCarthy）在20世纪50年代末的研究成果衍生而来。它的两种最著名的方言是Common Iisp和Scheme。如今的开源编程语言越来越多地借鉴Lisp的设计。</p>\n<p> <strong>List 列表</strong>：一连串的数据块，各个数据块的类型通常是不一样的。不同的列表可以像火车车厢一样连接在一起，组成更大的列表。</p>\n<p> <strong>Literal Representation 字面量</strong>：一种直接在高级语言中表示数据的方法。大多数语言中，五的字面量是5。（表达式2+3也能得到这个值，但是2+3属于表达式，不是字面量。）</p>\n<p> <strong>Low-Level Programming Language 低层次编程语言</strong>：抽象程度较低的编程语言。它允许使用一些直接控制硬件的简单命令，比如机器语言就是一种低层次编程语言。</p>\n<p> <strong>Machine Instruction 机器指令</strong>：机器语言的一条命令。</p>\n<p> <strong>Machine Language 机器语言</strong>：机器指令的一个列表，其中的每个指令都能直接被处理器理解。它也可以理解成机器指令的一个执行序列。</p>\n<p> <strong>Macro 宏</strong>：一个能够生成其他程序的程序。要在不同语言中实现这一点，就意味着不同语言的宏差异很大，一种语言的宏可能比另一种语言的宏强大得多。</p>\n<p> <strong>Mainframe 大型机</strong>：根据20世纪六七十年代的设计而建造的大型计算机。</p>\n<p> <strong>Math Envy 对数学家的妒忌</strong>：担心自己不如数学家聪明。这种焦虑的一个重要体现就是让自己的工作成果带有一种完全不必要的数学味。</p>\n<p> <strong>Metacircular 元循环</strong>：当一种语言的解释器用这种语言本身开发时，就会出现这种情况。与其说这是为了做出这种语言的一种实现，还不如说这是描述语言的一种技巧。</p>\n<p> <strong>Method 方法</strong>：面向对象编程中充当某个类的属性的一个子程序。比如，“圆形”类的一个面积计算方法可能就是计算圆这类图形的面积的一个子程序。</p>\n<p> <strong>Module 模块</strong>：一组子程序和变量，它们可以被视为是一个整体。在通常情况下，模块外部的代码只能访问模块内部一部分专门对外公开的子程序和变量。</p>\n<p> <strong>Moore's Law 摩尔定律</strong>：摩尔定律的正式版本是指，一块芯片上的晶体管数量每2年就会翻一番。但是，大多数人提到这个术语时，指的却是处理器的运算速度每18个月就会翻一番。很多人认为摩尔定律更像是商业计划，而不是产业发展的规律，毕竟它的提出者戈登·摩尔（Gordon Moore）是英特尔公司的创始人之一。</p>\n<p> <strong>Number Crunching 数字密集运算</strong>：对巨量的数值资料进行直接处理。</p>\n<p> <strong>Object Code 目标码</strong>：编译器产生的机器语言。</p>\n<p> <strong>Object 对象</strong>：这个词有很多意思，最常见的涵义是指某种数据类型的一个实例，比如某个特定的字符串或者某个特定的整数。</p>\n<p> <strong>Occam's Razor “奥卡姆剃刀”原则</strong>：简单的解释就是较好的解释。</p>\n<p> <strong>OO/Object-Oriented 面向对象</strong>：一种组织程序的方式。假定不同的类代表不同类型的数据，那么针对这些数据执行某种特定任务的代码，可以根据数据的不同被分别写进不同的类，成为这些类的方法。参见第10章的介绍。</p>\n<p> <strong>Open Source Software 开源软件</strong>：源代码可以被任何人自由传播和修改的软件，前提条件往往是修改后的软件源代码也必须保持自由状态。Linux和Freebsd操作系统就是著名的开源软件的例子。</p>\n<p> <strong>Optimization 优化</strong>：调整程序，使得它的效率更高。</p>\n<p> <strong>Orthogonal 正交的</strong>：彼此独立、能够以多种方式组合在一起的一组东西。经典的乐高积木就比普通的塑料模型玩具更有正交性。</p>\n<p> <strong>OS/Operating System 操作系统</strong>：控制其他程序运行的程序。Unix、FreeBSD、Linux、Mac OS X和Windows系列都是操作系统。</p>\n<p> <strong>Parallel Computer 并行计算机</strong>：能够同时执行多个计算任务的计算机。这样的分类并不是很清晰，因为所有的现代处理器为了提高运行速度或多或少都用到了并行处理。</p>\n<p> <strong>Parkinson's Law 帕金森定律</strong>：完成一项任务所需要的资源会不断扩展，直至把这种资源消耗光为止。</p>\n<p> <strong>Parser Tree 解析树</strong>：解析器读取源码后生成的数据结构。它是将源码翻译成机器语言的第一步。</p>\n<p> <strong>Parser 解析器</strong>：读取输入的数据然后生成解析树的程序。</p>\n<p> <strong>Pascal</strong>：从Algol语言衍生而来，20世纪70年代初由尼古拉斯·沃斯（Niklaus Wirth）设计。</p>\n<p> <strong>Patch 补丁</strong>：为了修正较早版本的错误而发布的代码。</p>\n<p> <strong>PDA/Personal Digital Assistant 个人数字助理</strong>：一种可以随身携带的小型计算机。它的操作界面通常比正规计算机更简单，限制也更多。</p>\n<p> <strong>Perl</strong>：拉里·沃尔开发的一种开源编程语言。最初的设计目的是处理字符串，由于这是程序员日常工作的重头戏，所以Perl就流行起来了。它的语法复杂（但简炼），它的版本进化快速（但混乱），这两个方面都很出名。</p>\n<p> <strong>Pipe 管道</strong>：将操作系统的各种命令连接起来的一种方式，使得一个命令的输出变成另一个命令的输入。</p>\n<p> <strong>Pointer Arithmetic 指针运算</strong>：通过对已知地址进行加法运算在内存中找到目标对象。这是低层次语言的一种技巧。</p>\n<p> <strong>Pointer 指针</strong>：一块数据，它的值是另一块数据的内存地址。</p>\n<p> <strong>Pointy-Haired Boss 头发高耸的经理</strong>：斯科特·亚当斯（Scott Adams）的连环漫画《呆伯特》中的人物。他象征了那些无能而专横的中层管理人员。</p>\n<p> <strong>Polynomial 多项式的</strong>：在用于增长模式时，它表示<em>y</em> 的增长速度是<em>x</em> 的乘方，比如<em>x</em> 的平方或立方。在图形上，乘方越大，<em>y</em> 的增长曲线就越陡峭。</p>\n<p> <strong>Portable 可移植性</strong>：（软件）能够被移植到新的硬件上。高级语言程序比机器语言程序更具备可移植性，因为前者的代码（几乎）与硬件无关。</p>\n<p> <strong>Portal 门户</strong>：网站。</p>\n<p> <strong>Premature Design 过早设计</strong>：过早决定一个程序的行为。</p>\n<p> <strong>Premature Optimization 过早优化</strong>：还没有写完程序，你就开始考虑它的性能问题。这样的软件好比姑娘还没有成年却已经嫁人了。</p>\n<p> <strong>Process 进程</strong>：在同时运行多个程序的操作系统（现代操作系统都具备这种能力）中，同时被运行的程序之一。</p>\n<p> <strong>Profiler 性能分析器</strong>：一种观察运行中的目标程序的程序，它会告诉你目标程序的哪一个部分最消耗资源。参见“内循环”。</p>\n<p> <strong>Programming Language 编程语言</strong>：（高级语言就是）编译器的输入，然后被转成目标码的东西。（这是开玩笑的说法，详细解释参见第10章。）</p>\n<p> <strong>Pseudocode 伪代码</strong>：一种不在计算机里而在“纸上”表达算法的语言。有人认为这个概念不过是美化了使用低层次语言时的手工副产品。</p>\n<p> <strong>Python</strong>：一种由吉多·范罗苏姆（Guido van Rossum）开发的开源编程语言。带有强烈的面向对象风格，被爱好者看作是Perl语言的一种较为简洁的替代品。</p>\n<p> <strong>QA/Quality Assurance 质量保证</strong>：软件行业中负责找出和登记bug的人。</p>\n<p> <strong>RAID/Redundant Array of Independent Disks 独立磁盘冗余阵列</strong>：一种硬件，将多个硬盘模拟成单硬盘，（理论上）避免了硬盘崩溃。</p>\n<p> <strong>Read-Eval-Print Loop “读取—求值—打印”循环</strong>：一种顶层解释器。</p>\n<p> <strong>Recursive 递归</strong>：一种调用自身的算法。警察审讯犯人时就会用到递归。警察先问犯人是否知道案件的情况，或者是否知道谁干的，如果犯人回答知道，那么继续这样问下去。</p>\n<p> <strong>Regular Expression 正则表达式</strong>：一种分解字符串的模式，就像筛子一样从字符串中取出想要的部分。</p>\n<p> <strong>Risc/Reduced Instruction Set Computer 精简指令集计算机</strong>：这种计算机的机器语言功能有限，但是运行速度较快。它的目标是更好地适应编译器的需要，就像粒度细的胶卷能够拍出更锐利的影像一样。</p>\n<p> <strong>Ruby</strong>：一种较新的开源编程语言，由松本行弘<span class=\"comment-number\">2</span>（Yukihiro Matsumoto，又称Matz）开发，是Perl和Python的竞争者。</p>\n\n<p> <strong>S-Expression S-表达式</strong>：一种语义单位（token），用括号表示，内部可以再包含0到多个s-表达式。</p>\n<p> <strong>Scan 扫描</strong>：读取一串字符，将其分解成一个个的语义单位（token）。</p>\n<p> <strong>Scheme</strong>：一种优雅但呆板的Lisp方言，由盖·斯蒂尔（Guy Steele）和格里·苏斯曼（Gerry Sussman）在1975年设计。</p>\n<p> <strong>Scripting Language 脚本语言</strong>：一种编程语言，用来对某个程序进行定制。有时，开源编程语言（比如Perl和Python）也被称为脚本语言，但是这种叫法意义不大。</p>\n<p> <strong>Server 服务器</strong>：网络上的一台计算机，用来回应其他计算机的请求。</p>\n<p> <strong>SETI@home</strong>：一个搜寻地外文明（Search for Extra-Terrestrial Intelligence，SETI）的科研项目，使用互联网上桌面电脑的空闲计算能力搜索宇宙中其他生命发出的电磁波。</p>\n<p> <strong>Smalltalk</strong>：经典的面向对象编程语言，由艾伦·凯（Alan Kay）在1972年设计。</p>\n<p> <strong>Socket 套接字</strong>：Unix操作系统的一种内部渠道，不同计算机的进程通过它可以在网络上交换信息。</p>\n<p> <strong>Software Engineer 软件工程师</strong>：程序员的一种正式名称。</p>\n<p> <strong>Spaghetti Code 面条式代码</strong>：扭曲缠绕在一起的代码，没有人能够读懂，包括作者本人。</p>\n<p> <strong>Spam</strong>：无缘无故收到的数量庞大的垃圾邮件，通常是广告。这个词来自Monty Python剧团的喜剧小品，每当餐厅服务员打开一听Spam牌罐装肉，一群维京海盗打扮的演员就齐声高唱“Spam，Spam，Spam”，将主人公的对话声都淹没了，因此Spam就有了“外界强加的大量打扰”的含义。</p>\n<p> <strong>Spec 规格</strong>：软件的规格说明书，是对程序功能的一种非正式描述。</p>\n<p> <strong>SSH/Secure Shell 安全外壳</strong>：可以安全连接远程计算机的一种程序。</p>\n<p> <strong>SSL/Secure Sockets Layer 安全套接字层</strong>：一种在网络上安全传输数据的协议。</p>\n<p> <strong>State Machine 状态机</strong>：一种理论上的机器，它的所有可能状态是一个集合。当满足某些条件时，状态之间就会发生转换。</p>\n<p> <strong>Statement 语句</strong>：一串不产生值的代码。为了使得自己有用，它必须能够产生一些实际效果，比如显示内容。有人认为这个概念本身就是错的，在一些语言中根本没有语句，只有表达式。</p>\n<p> <strong>Static Typing 静态类型</strong>：这一类编程语言的所有变量的类型在开始编写程序的时候就必须知道。</p>\n<p> <strong>String 字符串</strong>：一个字符的序列，常常用like this来表示。</p>\n<p> <strong>Subroutine 子程序</strong>：一块独立于其他代码的代码。当程序运行到某个时候，你想使用这块代码，那么直接调用它就可以了。子程序运行结束后，整个程序的控制权会回到调用处。一本食谱中，糖衣的制作方法就可以被看作蛋糕食谱的一个子程序，调用可能是这样表示的：“请按照第<em>x</em>页上的方法制作糖衣。”</p>\n<p> <strong>Subset 子集</strong>：一个被其他概念所包含的概念。烘培就是烹饪的一个子集。</p>\n<p> <strong>Suits 西装革履的人士</strong>：非技术人员，尤其指管理层。这个词最早来自他们都穿西装，可是到了20世纪90年代，他们也开始穿得像黑客一样了。</p>\n<p> <strong>Symbol 符号</strong>：一种数据类型，语义单位（token）就是符号的实例。符号与字符串很类似，只有两点区别：a）一个符号就是一个独立的单位，而不仅仅是一串字符；b）一个符号通常只有一个对应的名称，而包含同样字符的字符串却可能有好几种。</p>\n<p> <strong>Syntax 句法</strong>：表达程序目的的形式。比如，为<code>x</code>赋值10，不同语言有不同的写法：<code>x=10</code>、<code>x&lt;-10</code>，或者<code>(=x10)</code>。</p>\n<p> <strong>System Administrator Disease 系统管理员综合征</strong>：系统管理员心底里总是认为，他们管理的那些设备只是独立的设备，而不是用户的工具。更概括性地说，他们的态度就是将客户视为一种麻烦，而不是自己能够有这个饭碗的原因。这种心理是感受不到竞争压力的工作职位所特有的。</p>\n<p> <strong>System Administrator 系统管理员</strong>：安装计算机硬件和软件并保证网络正常运行的人。</p>\n<p> <strong>Throwaway Program 一次性程序</strong>：为了满足暂时性需求而编写的程序。</p>\n<p> <strong>Token 语义单位</strong>：一串同属于一个单位的字符。更通用的叫法是“词”（word）。</p>\n<p> <strong>Toplevel Interpreter 顶层解释器</strong>：编程语言的一种界面，你可以在其中用这种语言与计算机进行不间断的对话，正如你在Unix的Shell界面中所做的那样，而不是简单地编译程序，然后运行，对话就结束了。</p>\n<p> <strong>Tree 树</strong>：一种数据结构，它包含的每一个实例都可以指向两个或更多的实例，比如家谱树。</p>\n<p> <strong>Turing Machine 图灵机</strong>：一种完全虚构的计算机，作用是证明计算理论。由于所有计算机的程序都可以被转换成图灵机程序，所以在这个意义上，你不可能做出比图灵机更强大的计算机。但是没有人能保证这一点，因为“计算机”这个词并没有被正式定义过。</p>\n<p> <strong>Turing-Complete 图灵完备</strong>：如果一种编程语言写出的所有程序都能被转换成图灵机程序，并且反之也成立，那么这种编程语言就是图灵完备的。所有当代编程语言都是图灵完备的，这意味着（在理论上）它们的功能都是一样强大的。图灵完备又称图灵等价（Turing-Equivalent）。</p>\n<p> <strong>Type 类型</strong>：即数据类型（Data Type）。</p>\n<p> <strong>UDP/User Datagram Protocol 用户数据报协议</strong>：一种网络传播信息的协议。</p>\n<p> <strong>UI/User Interface</strong>：用户界面。</p>\n<p> <strong>Unix</strong>：一种操作系统，当前的大多数操作系统发源于它。这个词既是一个通用名词，又是一个商标，持有人是一家取得某个早期unix版本所有权的公司。20世纪70年代初，这种操作系统诞生于贝尔实验室，开发者是肯·汤普森（Ken Thompson）和丹尼斯·里奇（Dennis Ritchie）。</p>\n<p> <strong>Uptime 正常运行时间</strong>：一台计算机（特别指一台服务器）正常工作的时间百分比。它的另一个意思一指某台计算机从上次宕机到现在的时间长度。</p>\n<p> <strong>URL/Uniform Resource Locator 统一资源定位符</strong>：网页的地址。更精确地说，是一个指向网络服务器的请求，目标通常是一个网页，但是也可能是要求某种操作（比如网络搜索）。</p>\n<p> <strong>Vaporware 朦胧件</strong>：谈论已久但是迟迟不亮相的软件。</p>\n<p> <strong>VC/Venture Capitalist 风险投资人</strong>：为他人创业或再融资提供金钱的人，他们要求创业者用股份来交换投资。</p>\n<p> <strong>Vector 向量</strong>：一个一维数组，或者一个序列（sequence）。</p>\n<p> <strong>Version 1.0 1.0版</strong>：某样东西的第一个版本，暗示不完整、不好用。</p>\n<p> <strong>VT100</strong>：20世纪80年代流行的一种计算机终端。</p>\n<p> <strong>Web Server 网络服务器</strong>：一台响应HTTP请求的服务器。</p>\n<p> <strong>Wedged 楔住</strong>：表示无回应状态，尤其是指服务器。</p>\n<p> <strong>Wysiwyg</strong>：What you see is what you get（所见即所得）的缩写（发音为whizzy wig）。比如文字处理器中，你在屏幕上看到的页面与打印机的输出是一样的。</p>\n<p> <strong>XML/Extensible Markup Language 可扩展标记语言</strong>：一种组织数据的格式。</p>\n\n<br style=\"page-break-after:always\" />","neighbors":{"left":{"article_title":"致谢","id":741015},"right":{"article_title":"图片授权说明","id":741017}},"comments":[]}