{"id":535141,"title":"09｜技术选型：如何选择微服务框架和注册中心？","content":"<p>你好，我是丁威。</p><p>从这节课开始，我们正式进入微服务领域中间件的学习。我们会从微服务框架的诞生背景、服务注册中心的演变历程还有Dubbo微服务框架的实现原理出发，夯实基础。然后，我会结合自己在微服务领域的实践经验，详细介绍Dubbo网关的设计与落地方案，以及蓝绿发布的落地过程。</p><p>这节课，我们先从基础学起。</p><h2>微服务框架的诞生背景</h2><p>分布式架构体系是伴随着互联网的发展而发展的，它经历了单体应用和分布式应用两个阶段。记得我在2010年入职了一家经营传统行业的公司，公司主要负责政府采购和招投标系统的开发与维护工作，那是我第一次真正见识了庞大的单体应用架构的样子。</p><p>当时公司的架构体系是下面这个样子：</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/e5/c2f1caba8c14fc536d16yyd9ac8098e5.jpg?wh=1920x1037\" alt=\"图片\"></p><p>所有的业务组件、业务模块都耦合在一个工程里，最终部署的时候会打成一个统一的War包然后部署在一台Web容器中，所有的业务模块都访问同一个数据库。</p><p>在传统行业，这种架构的优势也很明显。因为部署结构单一，所以管理非常方便，而且一般情况下，政府采购等行为的流量变化不大，不会像互联网那样，随着平台的搭建造成业务体量的指数型增长。</p><p>我们设想一下，如果某一天国家发布政策，想要做一个全国的统一的政府采购平台，假设这家公司中标了，他们会怎么改造系统呢？通常的做法就是对系统进行拆分，单独部署和扩展各个子系统，拆分后的系统架构如下图所示：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/2e/77/2eeb61d5100167e899ee88ecc13ee377.jpg?wh=1600x1100\" alt=\"图片\"></p><p>由于单个子系统只部署一个节点已经无法满足要求了，所以他们需要部署多个进程，并且需要根据业务的体量进行动态的增加与减少，这样维护调用关系就会变得非常复杂而且容易出错。</p><p>在上面这张架构图中，基础资料子系统被其他所有模块调用，如果我们想要增加新的部署节点，或者由于一些机器老化需要更换设备，导致服务对应的IP地址发生变化，这时候应该怎么维护信息呢？</p><p>你可能会说这不就是负载均衡吗。我们可以通过Nginx来实现负载均衡，而调用方不需要维护调用者列表。它的架构是下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/e6/2f9df5a39137212fc4cd28835d8238e6.jpg?wh=1886x1038\" alt=\"图片\"></p><p>没错，通过引入Nginx可以实现负载均衡，并且在节点发生变化时，只需要修改Nginx的配置，不需要去修改调用方的代码。但是一旦部署了新的节点，我们还是需要<strong>手动</strong>在Nginx中添加路由信息，也就是说，这个操作只能是人工完成的。随着系统的膨胀，路由配置会变得越来越不可维护，容易出错甚至引发严重的故障。</p><p>这个问题代表着一系列与微服务相关的共性需求，如服务注册与自动发现机制、高性能RPC调用、服务治理等。</p><p>为了解决这些共性需求，很多微服务中间件如雨后春笋般涌现出来，其中要数Dubbo和Spring Cloud最为突出。</p><h2>如何选择微服务框架？</h2><p>Dubbo和Spring Cloud是什么？怎么在Dubbo和SpringCloud之间进行选择呢？</p><p>Dubbo是阿里巴巴开源的优秀的微服务框架，它开源之后迅速成为了互联网程序员们的首选微服务框架，我认为Dubbo有下面几个核心优势。</p><ul>\n<li>易用性</li>\n</ul><p>微服务框架通常包含服务注册与自动发现、高性能的RPC远程调用、服务治理等众多复杂的功能需求，框架内部非常复杂。但用户操作这种框架却非常简单，不需要太多专业知识，仅仅是通过Dubbo提供的dubbo:service、dubbo:reference、dubbo:registry等几个配置命令就可以轻松构建自己的微服务体系。</p><p>而且，这些配置命令拥有众多配置参数（涵盖服务发现、服务治理、性能调优等维度），而且都根据经验提供了默认值，用户几乎不需要对任何参数进行调优，就能保证项目的稳定运行。</p><ul>\n<li>可扩展机制</li>\n</ul><p>Dubbo通过SPI提供了高度灵活的扩展机制，Dubbo内部几乎所有的核心特性都提供了扩展点，Dubbo官方文档中给出的SPI扩展点有下面这些：</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/17/8cefeabf2ea34936da2891b989531717.jpg?wh=1920x961\" alt=\"图片\"></p><ul>\n<li>高性能</li>\n</ul><p>Dubbo RPC协议运行在传输层，并基于TCP协议实现了私有协议栈，支持多种序列化协议，包含protocuf、kryo等高性能序列化协议。</p><p>Dubbo的易用性、可扩展机制和高性能让它在一段时间内备受拥护，但也许是Dubbo发展得已经非常成熟了，又或者是阿里巴巴在部署其他的战略，Dubbo竟然“断更了”。我们知道持续迭代、持续创新是开源项目的生命源泉，停止更新的Dubbo也就无法继续高歌猛进了。这也给了其他微服务框架更多的生存空间，SpringCloud技术栈就在这个时候崛起了。</p><p>Spring Cloud技术栈由各个不同的子项目构成，每一个项目解决微服务架构领域的一个问题，我把SpringCloud和微服务架构相关的技术组件列了个表格：<br>\n<img src=\"https://static001.geekbang.org/resource/image/40/7e/40dyydc1c4d366f13abf0a1bc07d367e.jpg?wh=1920x1019\" alt=\"图片\"></p><p>SpringCloud技术栈和Dubbo都是非常优秀的微服务框架，并且随着互联网分布式架构正式拥抱云原生，Dubbo也顺应云原生发展浪潮，重新开始维护。那这两个框架我们该如何选择呢？</p><p>技术选项要考虑框架本身的特性，同时也需要结合公司的技术栈、使用的开发语言等因素综合考虑，这节课我们重点从框架本身这个维度来考量，也会顺便提一提如何结合公司自身的情况去进行选型。</p><p>从<strong>功能的丰富程度上讲，SpringCloud体系更占优势</strong>，但并不是说使用Dubbo来构建微服务体系就无法实现链路监控、服务网关这些功能。Dubbo的设计理念是职责分明，链路跟踪功能完全可以选择业界主流的链路跟踪开源项目，所以从功能维度我也给你列了一张表格，分别对比了用Spring Cloud和Dubbo搭建的微服务架构体系采用的技术栈：<br>\n<img src=\"https://static001.geekbang.org/resource/image/15/10/158bf9a472c27d1f4b6c27cc3ce71410.jpg?wh=1920x1046\" alt=\"图片\"></p><p>从表格中我们也能看出，在微服务架构必备的注册中心、服务调用、负载均衡、熔断等基础功能上，Dubbo都是内置的，不需要用户关注太多技术细节，而Spring Cloud需要单独进行学习，入门成本偏高。</p><p>Dubbo的设计理念是提供对应的扩展点，供用户根据需要自行扩展。而Spring Cloud中各个技术组件都是单独发展的，最终SpringBoot体系将第三方的开源项目进行了整合，省去了用户的整合成本。</p><p><strong>从性能的角度，Dubbo要明显优于SpringCloud。</strong></p><p>Spring Cloud的RPC调用是基于HTTP协议开发的，它处于网络模型的应用层，而Dubbo的RPC调用的底层是TCP协议，它处于网络模型的传输层。所以说，在底层网络通讯方面，Dubbo就天然地占据了优势。</p><p>由于Dubbo是基于TCP编程的，这就比直接使用HTTP进行数据传输具有更大的灵活度。直接基于TCP网络进行编程，对网络通讯中各个环节可以灵活进行定制化开发，例如Dubbo在序列化、反序列化、IO线程、业务线程等方面的设置具有高度配置化，性能的提升非常明显，而Spring Cloud在这方面显得就有些吃力了。阿里、腾讯、美团、拼多多等一线互联网企业的微服务框架都是基于TCP来构建的。</p><p><strong>Dubbo、SpringCloud都是主流的微服务，你可以根据实际情况加以选择。不过，结合目前我所处的行业和公司的技术栈，我倾向于采用Dubbo来构建微服务架构体系。</strong></p><h2>如何选择微服务注册中心？</h2><p>在这节课的最后，我想结合生产中遇到的一个故障，和你聊聊注册中心的选型问题。</p><p>在微服务架构体系相当长的一段发展时间里，ZooKeeper都占领着微服务注册中心的头把交椅，几乎成为注册中心唯一的选择。这是为什么呢？接下来我们就重点解读一下ZooKeeper的CP设计理念。下节课，我们还会对微服务注册中心的设计理念做详细介绍。</p><p>ZooKeeper是一个分布式协调组件，符合CAP分布式理论中的CP。</p><p>CAP理论指的是，在一个分布式集群中存储同一份数据，无法同时实现C（一致性）、A(可用性)和P(持久性)，只能同时满足其中两个。由于P在数据存储领域是必须要满足的，所以通常需要在C与A之间做权衡。ZooKeeper是保住了一致性和持久性，选择性地牺牲了可用性。</p><p>ZooKeeper的数据写入流程如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/df/71/df93f105f11a5ec67f0d601a63d94d71.jpg?wh=1920x1040\" alt=\"图片\"></p><p>在ZooKeeper集群中，首先会进行Leader选举，根据ZAB协议选举出一个Leader节点用来处理写请求，然后将数据复制给从节点：</p><ul>\n<li>当集群内超过半数节点写入成功，则返回“数据写入成功”；</li>\n<li>如果集群内还没有成功选举出Leader，则ZooKeeper集群无法向外提供数据写入与读取服务。</li>\n</ul><p>在Leader选举期间，集群是不可用的（牺牲了可用性）。但在正常生产实践过程中，ZooKeeper集群内部选举Leader节点的耗时在毫秒级别，并不会影响使用。然而，一旦遇到异常情况就很难说了。</p><p>我在生产过程中就出现了由于ZooKeeper集群内存溢出导致频繁Full GC的情况。当时的情况是，公司内部的Dubbo专用ZooKeeper地址被业务方用做分布式锁，但他们在使用过程中频繁创建节点，加上遇到Bug，节点数据没有及时删除，这就导致占用的内存越来越大，最终频繁Full GC，使得ZooKeeper会话超时，所有注册在ZooKeeper注册中心的服务全部被删除，所有客户端服务调用都出现“No Provider”警告，酿成一场严重的生产级故障。</p><p>经过这次故障，我也开始重新审视ZooKeeper和CP模式的合理性。注册中心是微服务体系的大脑，一旦出现问题会带来不可估量的损失，其可用性尤为重要。</p><p>也正是因为CP模型存在严重的可用性问题，以AP为设计思想的注册中心开始逐渐涌现出来。AP的核心指导思想是容忍分布式集群中多个节点之间的数据短暂不一致，但最终能达到一致性。<strong>EureKa就是典型的基于AP的注册中心。</strong></p><p>由于基于AP的注册中心不需要保证强一致性，所以集群内节点的地位通常都是平等的。客户端在同一时间与集群中一个节点保持长连接，当出现错误后，客户端再从注册中心集群中选择另外一个节点，并且客户端可以向集群中任何一个节点写入数据后立即返回“写入成功”，然后让数据异步在集群内部复制，最终实现数据的一致性。EureKa集群的写入流程如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/b4/4af7853855931ed33ce204eecafbecb4.jpg?wh=1723x1168\" alt=\"图片\"></p><p>由于集群内部节点的地位是平等的，客户端在其中一个节点不可用时，可以快速切换到另外的节点，这样可用性就得到了保障。那么问题来了，节点之间路由信息不一致会带来什么问题呢？这些问题我们可不可以接受？</p><p>在回答这个问题之前我们不妨来看看一个注册中心各个节点数据不一致的例子，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/10/d9/107e5e0a0c67d58fe3452efeacb40bd9.jpg?wh=1920x809\" alt=\"图片\"></p><p>在这里，由于某种异常，Eureka集群中各个节点存储的数据并不一致，在节点1和2中关于/user/saveUser接口有三个服务提供者，但在节点3中只有两个服务提供者。但无论是三个服务提供者也好，还是两个服务提供者也好，<strong>都会造成负载不均衡</strong>，如果节点出现类似Full GC的问题，节点无法对外提供服务，这时候客户端会从集群中选择其他节点重试，<strong>并不会对系统带来致命影响</strong>。</p><p><strong>综合来看，服务注册中心这种场景，AP模式显然比CP模式更佳。</strong>这也是为什么现在很多原先使用CP模式的注册中心都开始尝试向AP转化，而像Eureka、Nacos这种注册中心基本都同时提供了AP和CP两种工作模式，用户可以按照场景进行选择。</p><h2>总结</h2><p>好了，这节课就讲到这里。这节课我们主要从微服务框架诞生背景、微服务框架选型和注册中心框架的演变三个方面介绍了微服务。</p><p>微服务框架的基本诉求主要包括：服务注册与自动发现机制、高性能RPC调用和服务治理，它致力于让分布式架构中的服务治理变得简单高效。</p><p>我们还分析了市面上两种最主流的微服务研发框架：Dubbo和Spring Cloud，Dubbo具有易用性、灵活的扩展机制和更好的性能，Spring Cloud则具有更加丰富的功能。你<strong>可以根据实际情况加以选择，结合目前我所处的行业，公司的技术栈，我倾向于采用Dubbo来构建微服务架构体系。</strong></p><p>最后，我还结合自己在实践过程中发生的一起故障，介绍了注册中心从CP向AP架构演进的原因。总的来说，以Eureka和Nacos为代表的注册中心，正在逐渐取代采用CP模式的ZooKeeper，成为注册中心的优先选项。</p><h2>思考题</h2><p>最后，我也给你留一道思考题。</p><p>我们刚才讲了一个我在生产实践中经历的一次事故。基于Zookeeper搭建的Dubbo服务注册中心，由于ZooKeeper节点的内存使用不当导致频繁触发Full GC，最终导致ZooKeeper会话超时，在注册中心的服务提供者会全部被删除，所有的消费者调用都感知不到服务提供者，进而导致服务调用雪崩。这时候我们应该怎么做呢？难道要重启所有服务提供者，让他们重新注册吗？你有什么快速恢复的方法？</p><p>欢迎你在评论区留下自己的看法，我们下节课见！</p>","neighbors":{"left":{"article_title":"加餐 | 中间件底层的通用设计理念","id":534434},"right":{"article_title":"10｜设计原理：Dubbo核心设计原理剖析","id":535851}},"comments":[{"had_liked":false,"id":350399,"user_name":"麻婆豆腐","can_delete":false,"product_type":"c1","uid":1731885,"ip_address":"","ucode":"F371FE05D081D6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6d/2d/de41f9cf.jpg","comment_is_top":false,"comment_ctime":1656894870,"is_pvip":true,"replies":[{"id":"127689","content":"嗯，犀利，容器化是目前的趋势与主流","user_name":"作者回复","comment_id":350399,"uid":"2348391","ip_address":"","utype":1,"ctime":1657468145,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5951862166","product_id":100114001,"comment_content":"老师好，K8S也提供了微服务能力如服务发现，api网关，容错限流等，微服务的架构可以是可以k8s+springboot吗","like_count":1,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579469,"discussion_content":"嗯，犀利，容器化是目前的趋势与主流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657468146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352663,"user_name":"james","can_delete":false,"product_type":"c1","uid":1049208,"ip_address":"上海","ucode":"5701899403917C","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/78/23c56bce.jpg","comment_is_top":false,"comment_ctime":1658845849,"is_pvip":false,"replies":[{"id":"129406","content":"对的，dubbo会缓存在本地，但只在启动时有用，但基于zk这种实时感知能力，zk通知消费者将一个空集合推给消费者，消费者会清空内存，导致运行时就感知不到真实的生产者了。<br>","user_name":"作者回复","comment_id":352663,"uid":"2348391","ip_address":"上海","utype":1,"ctime":1661575385,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1658845849","product_id":100114001,"comment_content":"dubbo是可以配置本地缓存信息的，就算注册中心全部完蛋也没事<br>dubbo.meta.cache.filePath 和 dubbo.mapping.cache.filePath 这俩配置可以设置缓存位置","like_count":0,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585452,"discussion_content":"对的，dubbo会缓存在本地，但只在启动时有用，但基于zk这种实时感知能力，zk通知消费者将一个空集合推给消费者，消费者会清空内存，导致运行时就感知不到真实的生产者了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661575385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352254,"user_name":"Y a n g","can_delete":false,"product_type":"c1","uid":2106016,"ip_address":"上海","ucode":"A59C5958750550","user_header":"https://static001.geekbang.org/account/avatar/00/20/22/a0/d8631910.jpg","comment_is_top":false,"comment_ctime":1658482821,"is_pvip":true,"replies":[{"id":"129425","content":"快照应该只保留持久节点，处理这个问题其实非常简单，我们只需要将zookeeper中的数据全部清除，然后重启zookeeper,dubbo会自动重新注册，即可快速恢复。","user_name":"作者回复","comment_id":352254,"uid":"2348391","ip_address":"上海","utype":1,"ctime":1661613945,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1658482821","product_id":100114001,"comment_content":"[思考题]ZooKeeper貌似有快照机制，发生故障之后是不是可以利用快照文件来快速恢复？","like_count":0,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585508,"discussion_content":"快照应该只保留持久节点，处理这个问题其实非常简单，我们只需要将zookeeper中的数据全部清除，然后重启zookeeper,dubbo会自动重新注册，即可快速恢复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661613945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352017,"user_name":"凉","can_delete":false,"product_type":"c1","uid":1327691,"ip_address":"上海","ucode":"0CCAD78D10E723","user_header":"https://static001.geekbang.org/account/avatar/00/14/42/4b/ad058c3f.jpg","comment_is_top":false,"comment_ctime":1658327166,"is_pvip":false,"replies":[{"id":"129426","content":"你好，这种方式也是可以的，不过修改起来也是很麻烦，不能快速止血，我这边想到的一个方案：就是清除zookeeper的数据，然后重新启动zookeeper,这样zookeeper就能快速恢复正常，此时dubbo 服务提供者会自动向zookeeperh中注册，消费端就可以动态感知，问题能得到快速恢复。","user_name":"作者回复","comment_id":352017,"uid":"2348391","ip_address":"上海","utype":1,"ctime":1661614133,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1658327166","product_id":100114001,"comment_content":"修改dubbo的配置，改成消费者直连服务提供者的模式","like_count":0,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585509,"discussion_content":"你好，这种方式也是可以的，不过修改起来也是很麻烦，不能快速止血，我这边想到的一个方案：就是清除zookeeper的数据，然后重新启动zookeeper,这样zookeeper就能快速恢复正常，此时dubbo 服务提供者会自动向zookeeperh中注册，消费端就可以动态感知，问题能得到快速恢复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661614134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350776,"user_name":"客舟听雨来coding","can_delete":false,"product_type":"c1","uid":1026219,"ip_address":"","ucode":"753F4B779CC416","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/ab/5d25cd32.jpg","comment_is_top":false,"comment_ctime":1657186221,"is_pvip":true,"replies":[{"id":"127680","content":"你好，A是可用性，C一致性，P分区容忍性（也可以理解为持久性）","user_name":"作者回复","comment_id":350776,"uid":"2348391","ip_address":"","utype":1,"ctime":1657466366,"user_name_real":"编辑"}],"discussion_count":4,"race_medal":0,"score":"1657186221","product_id":100114001,"comment_content":"CAP的P是可用性？不是分区容忍性吗？","like_count":0,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579458,"discussion_content":"你好，A是可用性，C一致性，P分区容忍性（也可以理解为持久性）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657466366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1026219,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/ab/5d25cd32.jpg","nickname":"客舟听雨来coding","note":"","ucode":"753F4B779CC416","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":581097,"discussion_content":"分区容忍性是指对网络分区后的容忍。和持久性有什么关系呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658491172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":579458,"ip_address":""},"score":581097,"extra":""}]},{"author":{"id":1105991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/47/66cb8ac9.jpg","nickname":"","note":"","ucode":"6AF6FCD4431814","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592046,"discussion_content":"这个点确实值得商榷，作者的解释不知道是基于什么信息得出P是持久性的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667044669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063805,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/7d/6376926b.jpg","nickname":"吟游雪人","note":"","ucode":"C432C9577B420C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583218,"discussion_content":"cap是指集群在发生网络分区的情况下，自己的这个分区还能和外接通信，但是不能与集群中的其他分区通信。由于和集群其他分区无法通信，不知道完整的数据，这时候就面临两个选择，一个是保持可用，返回我已知的数据，这时候就有可能和其他分区返回的数据不一致，产生了一致性问题。另一个是返回报错，对外说我出问题了，暂时没法用，等我确定我的数据是完整的再告诉调用方结果，这就是选择了一致性，放弃了可用性。简单来说就是p发生的时候，是选择cp，还是ap的问题。这个应该是毕业2年都知道的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659956500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350387,"user_name":"雨落～紫竹","can_delete":false,"product_type":"c1","uid":1666025,"ip_address":"","ucode":"33CED2F34E708F","user_header":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","comment_is_top":false,"comment_ctime":1656865220,"is_pvip":true,"replies":[{"id":"127688","content":"嗯，降级是必要的。是要进行隔离，微服务体系的注册中心必须独占，并且要做好监控告警，目前主要是zookeeper的acl感觉对用户使用不太友好，授权比较麻烦，别人只要知道地址就可以用，我们后面也加强了zookeeper的监控。","user_name":"作者回复","comment_id":350387,"uid":"2348391","ip_address":"","utype":1,"ctime":1657468101,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":1,"score":"1656865220","product_id":100114001,"comment_content":"必须保证业务的可用 可以采用降级 本地存储一份   什么组件干什么活 对于核心业务 应该采用独立集群 让他们自己玩去","like_count":0,"discussions":[{"author":{"id":2348391,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d5/67/54efabd8.jpg","nickname":"中间件兴趣圈","note":"","ucode":"EFC2384D08600E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579468,"discussion_content":"嗯，降级是必要的。是要进行隔离，微服务体系的注册中心必须独占，并且要做好监控告警，目前主要是zookeeper的acl感觉对用户使用不太友好，授权比较麻烦，别人只要知道地址就可以用，我们后面也加强了zookeeper的监控。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657468101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}