{"id":13178,"title":"04 | 程序实体的那些事儿（上）","content":"<p>我已经为你打开了Go语言编程之门，并向你展示了“程序从初建到拆分，再到模块化”的基本演化路径。</p><p>一个编程老手让程序完成基本演化，可能也就需要几十分钟甚至十几分钟，因为他们一开始就会把车开到模块化编程的道路上。我相信，等你真正理解了这个过程之后，也会驾轻就熟的。</p><p>上述套路是通用的，不是只适用于Go语言。但从本篇开始，我会开始向你介绍Go语言中的各种特性以及相应的编程方法和思想。</p><hr><p>我在讲解那两种源码文件基本编写方法的时候，声明和使用了一些程序实体。你也许已经若有所觉，也许还在云里雾里。没关系，我现在就与你一起梳理这方面的重点。</p><p>还记得吗？<strong>Go语言中的程序实体包括变量、常量、函数、结构体和接口。</strong> Go语言是静态类型的编程语言，所以我们在声明变量或常量的时候，都需要指定它们的类型，或者给予足够的信息，这样才可以让Go语言能够推导出它们的类型。</p><blockquote>\n<p><span class=\"reference\">在Go语言中，变量的类型可以是其预定义的那些类型，也可以是程序自定义的函数、结构体或接口。常量的合法类型不多，只能是那些Go语言预定义的基本类型。它的声明方式也更简单一些。</span></p>\n</blockquote><p>好了，下面这个简单的问题你需要了解一下。</p><h2><strong><span class=\"orange\">问题：声明变量有几种方式？</span></strong></h2><p>先看段代码。</p><pre><code>package main\n\nimport (\n\t&quot;flag&quot;\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tvar name string // [1]\n\tflag.StringVar(&amp;name, &quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;) // [2]\n\tflag.Parse()\n\tfmt.Printf(&quot;Hello, %v!\\n&quot;, name)\n}\n</code></pre><!-- [[[read_end]]] --><p>这是一个很简单的命令源码文件，我把它命名为demo7.go。它是demo2.go的微调版。我只是把变量<code>name</code>的声明和对<code>flag.StringVar</code>函数的调用，都移动到了<code>main</code>函数中，这分别对应代码中的注释<code>[1]</code>和<code>[2]</code>。</p><p>具体的问题是，除了<code>var name string</code>这种声明变量<code>name</code>的方式，还有其他方式吗？你可以选择性地改动注释<code>[1]</code>和<code>[2]</code>处的代码。</p><h2><strong>典型回答</strong></h2><p>这有几种做法，我在这里只说最典型的两种。</p><p><strong>第一种方式</strong>需要先对注释<code>[2]</code>处的代码稍作改动，把被调用的函数由<code>flag.StringVar</code>改为<code>flag.String</code>，传参的列表也需要随之修改，这是为了<code>[1]</code>和<code>[2]</code>处代码合并的准备工作。</p><pre><code>var name = flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)\n</code></pre><p>合并后的代码看起来更简洁一些。我把注释<code>[1]</code>处的代码中的<code>string</code>去掉了，右边添加了一个<code>=</code>，然后再拼接上经过修改的<code>[2]</code>处代码。</p><p>注意，<code>flag.String</code>函数返回的结果值的类型是<code>*string</code>而不是<code>string</code>。类型<code>*string</code>代表的是字符串的指针类型，而不是字符串类型。因此，这里的变量<code>name</code>代表的是一个指向字符串值的指针。</p><p>关于Go语言中的指针，我在后面会有专门的介绍。你在这里只需要知道，我们可以通过操作符<code>*</code>把这个指针指向的字符串值取出来了。因此，在这种情况下，那个被用来打印内容的函数调用就需要微调一下，把其中的参数<code>name</code>改为<code>*name</code>，即：<code>fmt.Printf(\"Hello, %v!\\n\", *name)</code>。</p><p>好了，我想你已经基本理解了这行代码中的每一个部分。</p><p><strong>下面我接着说第二种方式。</strong>第二种方式与第一种方式非常类似，它基于第一种方式的代码，赋值符号<code>=</code>右边的代码不动，左边只留下<code>name</code>，再把<code>=</code>变成<code>:=</code>。</p><pre><code>name := flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)\n</code></pre><h2><strong>问题解析</strong></h2><p>这个问题的基本考点有两个。<strong>一个是你要知道Go语言中的类型推断，以及它在代码中的基本体现，另一个是短变量声明的用法。</strong></p><p>第一种方式中的代码在声明变量<code>name</code>的同时，还为它赋了值，而这时声明中并没有显式指定<code>name</code>的类型。</p><p>还记得吗？之前的变量声明语句是<code>var name string</code>。这里利用了Go语言自身的类型推断，而省去了对该变量的类型的声明。</p><blockquote>\n<p><span class=\"reference\">简单地说，类型推断是一种编程语言在编译期自动解释表达式类型的能力。什么是表达式？详细的解释你可以参看Go语言规范中的<a href=\"https://golang.google.cn/ref/spec#Expressions\">表达式</a>和<a href=\"https://golang.google.cn/ref/spec#Expression_statements\">表达式语句</a>章节。我在这里就不赘述了。</span></p>\n</blockquote><p>你可以认为，表达式类型就是对表达式进行求值后得到结果的类型。Go语言中的类型推断是很简约的，这也是Go语言整体的风格。</p><p>它只能用于对变量或常量的初始化，就像上述回答中描述的那样。对<code>flag.String</code>函数的调用其实就是一个调用表达式，而这个表达式的类型是<code>*string</code>，即字符串的指针类型。</p><p>这也是调用<code>flag.String</code>函数后得到结果的类型。随后，Go语言把这个调用了<code>flag.String</code>函数的表达式类型，直接作为了变量<code>name</code>的类型，这就是“推断”一词所指代的操作了。</p><p>至于第二种方式所用的短变量声明，实际上就是Go语言的类型推断再加上一点点语法糖。</p><p>我们只能在函数体内部使用短变量声明。在编写<code>if</code>、<code>for</code>或<code>switch</code>语句的时候，我们经常把它安插在初始化子句中，并用来声明一些临时的变量。而相比之下，第一种方式更加通用，它可以被用在任何地方。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/bc/b7d73fdce13a3a5f2d56d0b95f2c8cbc.png?wh=1485*529\" alt=\"\"></p><p>（变量的多种声明方式）</p><p>短变量声明还有其他的玩法，我稍后就会讲到。</p><h2><strong>知识扩展</strong></h2><h3><strong><span class=\"orange\">1. Go语言的类型推断可以带来哪些好处？</span></strong></h3><p>如果面试官问你这个问题，你应该怎样回答？</p><p>当然，在写代码时，我们通过使用Go语言的类型推断，而节省下来的键盘敲击次数几乎可以忽略不计。但它真正的好处，往往会体现在我们写代码之后的那些事情上，比如代码重构。</p><p>为了更好的演示，我们先要做一点准备工作。我们依然通过调用一个函数在声明<code>name</code>变量的同时为它赋值，但是这个函数不是<code>flag.String</code>，而是由我们自己定义的某个函数，比如叫<code>getTheFlag</code>。</p><pre><code>package main\n\nimport (\n\t&quot;flag&quot;\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\tvar name = getTheFlag()\n\tflag.Parse()\n\tfmt.Printf(&quot;Hello, %v!\\n&quot;, *name)\n}\n\nfunc getTheFlag() *string {\n\treturn flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)\n}\n</code></pre><p>我们可以用<code>getTheFlag</code>函数包裹（或者说包装）那个对<code>flag.String</code>函数的调用，并把其结果直接作为<code>getTheFlag</code>函数的结果，结果的类型是<code>*string</code>。</p><p>这样一来，<code>var name =</code>右边的表达式，可以变为针对<code>getTheFlag</code>函数的调用表达式了。这实际上是对“声明并赋值<code>name</code>变量的那行代码”的重构。</p><blockquote>\n<p><span class=\"reference\">我们通常把不改变某个程序与外界的任何交互方式和规则，而只改变其内部实现”的代码修改方式，叫做对该程序的重构。重构的对象可以是一行代码、一个函数、一个功能模块，甚至一个软件系统。</span></p>\n</blockquote><p>好了，在准备工作做完之后，你会发现，你可以随意改变<code>getTheFlag</code>函数的内部实现，及其返回结果的类型，而不用修改<code>main</code>函数中的任何代码。</p><p>这个命令源码文件依然可以通过编译，并且构建和运行也都不会有问题。也许你能感觉得到，这是一个关于程序灵活性的质变。</p><p>我们不显式地指定变量<code>name</code>的类型，使得它可以被赋予任何类型的值。也就是说，变量<code>name</code>的类型可以在其初始化时，由其他程序动态地确定。</p><p>在你改变<code>getTheFlag</code>函数的结果类型之后，Go语言的编译器会在你再次构建该程序的时候，自动地更新变量<code>name</code>的类型。如果你使用过<code>Python</code>或<code>Ruby</code>这种动态类型的编程语言的话，一定会觉得这情景似曾相识。</p><p>没错，通过这种类型推断，你可以体验到动态类型编程语言所带来的一部分优势，即程序灵活性的明显提升。但在那些编程语言中，这种提升可以说是用程序的可维护性和运行效率换来的。</p><p>Go语言是静态类型的，所以一旦在初始化变量时确定了它的类型，之后就不可能再改变。这就避免了在后面维护程序时的一些问题。另外，请记住，这种类型的确定是在编译期完成的，因此不会对程序的运行效率产生任何影响。</p><p>现在，你应该已经对这个问题有一个比较深刻的理解了。</p><p>如果只用一两句话回答这个问题的话，我想可以是这样的：Go语言的类型推断可以明显提升程序的灵活性，使得代码重构变得更加容易，同时又不会给代码的维护带来额外负担（实际上，它恰恰可以避免散弹式的代码修改），更不会损失程序的运行效率。</p><h3><strong><span class=\"orange\">2. 变量的重声明是什么意思？</span></strong></h3><p>这涉及了短变量声明。通过使用它，我们可以对同一个代码块中的变量进行重声明。</p><blockquote>\n<p><span class=\"reference\">既然说到了代码块，我先来解释一下它。在Go语言中，代码块一般就是一个由花括号括起来的区域，里面可以包含表达式和语句。Go语言本身以及我们编写的代码共同形成了一个非常大的代码块，也叫全域代码块。</span></p>\n<p><span class=\"reference\">这主要体现在，只要是公开的全局变量，都可以被任何代码所使用。相对小一些的代码块是代码包，一个代码包可以包含许多子代码包，所以这样的代码块也可以很大。</span></p>\n<p><span class=\"reference\">接下来，每个源码文件也都是一个代码块，每个函数也是一个代码块，每个<code>if</code>语句、<code>for</code>语句、<code>switch</code>语句和<code>select</code>语句都是一个代码块。甚至，<code>switch</code>或<code>select</code>语句中的<code>case</code>子句也都是独立的代码块。</span></p>\n<p><span class=\"reference\">走个极端，我就在<code>main</code>函数中写一对紧挨着的花括号算不算一个代码块？当然也算，这甚至还有个名词，叫“空代码块”。</span></p>\n</blockquote><p>回到变量重声明的问题上。其含义是对已经声明过的变量再次声明。变量重声明的前提条件如下。</p><ol>\n<li>\n<p>由于变量的类型在其初始化时就已经确定了，所以对它再次声明时赋予的类型必须与其原本的类型相同，否则会产生编译错误。</p>\n</li>\n<li>\n<p>变量的重声明只可能发生在某一个代码块中。如果与当前的变量重名的是外层代码块中的变量，那么就是另外一种含义了，我在下一篇文章中会讲到。</p>\n</li>\n<li>\n<p>变量的重声明只有在使用短变量声明时才会发生，否则也无法通过编译。如果要在此处声明全新的变量，那么就应该使用包含关键字<code>var</code>的声明语句，但是这时就不能与同一个代码块中的任何变量有重名了。</p>\n</li>\n<li>\n<p>被“声明并赋值”的变量必须是多个，并且其中至少有一个是新的变量。这时我们才可以说对其中的旧变量进行了重声明。</p>\n</li>\n</ol><p>这样来看，变量重声明其实算是一个语法糖（或者叫便利措施）。它允许我们在使用短变量声明时不用理会被赋值的多个变量中是否包含旧变量。可以想象，如果不这样会多写不少代码。</p><p>我把一个简单的例子写在了“Golang_Puzzlers”项目的<code>puzzlers/article4/q3</code>包中的demo9.go文件中，你可以去看一下。</p><p>这其中最重要的两行代码如下：</p><pre><code>var err error\nn, err := io.WriteString(os.Stdout, &quot;Hello, everyone!\\n&quot;)\n</code></pre><p>我使用短变量声明对新变量<code>n</code>和旧变量<code>err</code>进行了“声明并赋值”，这时也是对后者的重声明。</p><h2><strong>总结</strong></h2><p>在本篇中，我们聚焦于最基本的Go语言程序实体：变量。并详细解说了变量声明和赋值的基本方法，及其背后的重要概念和知识。我们使用关键字<code>var</code>和短变量声明，都可以实现对变量的“声明并赋值”。</p><p>这两种方式各有千秋，有着各自的特点和适用场景。前者可以被用在任何地方，而后者只能被用在函数或者其他更小的代码块中。</p><p>不过，通过前者我们无法对已有的变量进行重声明，也就是说它无法处理新旧变量混在一起的情况。不过它们也有一个很重要的共同点，即：基于类型推断，Go语言的类型推断只应用在了对变量或常量的初始化方面。</p><h2><strong>思考题</strong></h2><p>本次的思考题只有一个：如果与当前的变量重名的是外层代码块中的变量，那么这意味着什么？</p><p>这道题对于你来说可能有些难，不过我鼓励你多做几次试验试试，你可以在代码中多写一些打印语句，然后运行它，并记录下每次试验的结果。如果有疑问也一定要写下来，答案将在下篇文章中揭晓。</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p>","comments":[{"had_liked":false,"id":20433,"user_name":"Shawn","can_delete":false,"product_type":"c1","uid":1198804,"ip_address":"","ucode":"8CCF006786999B","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d4/a3231668.jpg","comment_is_top":true,"comment_ctime":1534436547,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233723046771999e+18","product_id":100013101,"comment_content":"当前变量覆盖外层变量","like_count":63,"discussions":[{"author":{"id":1142265,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/f9/7431e82e.jpg","nickname":"24小菜鸟","note":"","ucode":"02D6127A2DE3C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369032,"discussion_content":"类型推断带来的好处，例子举得真的是太牵强了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618908571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30323,"user_name":"陈悬高","can_delete":false,"product_type":"c1","uid":1065981,"ip_address":"","ucode":"457213A8351202","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/fd/908706cc.jpg","comment_is_top":false,"comment_ctime":1538793337,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"800402710393","product_id":100013101,"comment_content":"所谓“变量的重声明”容易引发歧义，而且也不容易理解。如果没有为变量分配一块新的内存区域，那么用声明是不恰当的。在《Go 语言圣经》一书中将短声明的这种特性称为赋值。个人总结如下：<br><br>在使用短变量声明的时候，你可能想要同时对一个已有的变量赋值，类似使用 `=` 进行多重赋值那样（如 `i, j = 2, 3`）。所以，Go 为短声明语法提供了一个语法糖（或者叫便利措施）：短变量声明不需要声明所有在左边的变量。如果多个变量在同一个词法块中声明，那么对于这些变量，短声明的行为等同于*赋值*。<br><br>比如，在下面的代码中，第一条语句声明了 `in` 和 `err`。第二条语句仅声明了 `out`，但向已有的 `err` 变量进行赋值。<br><br>```<br>in, err := os.Open(infile)<br>&#47;&#47; ...<br>out, err := os.Create(outfile)<br>```<br><br>但是这种行为需要一些前提条件：<br><br>*   要赋值的变量必须声明在同一个词法块中。<br><br>\t如果两个变量位于不同的词法块中，短声明语法表示的仍然是“声明”而非“赋值”。此时它们就是重名的变量了，而且内层变量会“覆盖”外部变量。<br><br>*   必须至少声明一个新变量，否则代码将不能编译通过。<br><br>\t原因很简单，如果不用声明新变量而仅仅是为了赋值，那么直接使用赋值符 `=` 即可：<br><br>\t```<br>\tf, err := os.Open(infile)<br>\t&#47;&#47; ...<br>\t&#47;&#47; f, err := os.Create(outfile) &#47;&#47; 编译错误：没有新变量<br>\tf, err = os.Create(outfile)    &#47;&#47; 使用普通的赋值语句即可<br>\t```","like_count":187,"discussions":[{"author":{"id":1018200,"avatar":"","nickname":"一眼万年","note":"","ucode":"7B0823E39AE809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180084,"discussion_content":"的确，比较清楚，感觉作者描述太依赖英文翻译了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582275779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350226,"discussion_content":"讲的比作者清楚多了，看了几章糊里糊涂的，我还是去买本书吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613751176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060126,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2d/1e/c6359873.jpg","nickname":"qx","note":"","ucode":"5681418A3D99CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582769,"discussion_content":"确实讲课方式让我觉得不太好懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659666827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380362,"discussion_content":"点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624454185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/4c/2cefec07.jpg","nickname":"静水流深","note":"","ucode":"644F05EFBD2E7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198323,"discussion_content":"《go语言圣经》确实不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583499993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":127144,"discussion_content":"这个讲的比较清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578568317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134724,"user_name":"sun🍏🍌🍒🍅🌶🍎","can_delete":false,"product_type":"c1","uid":1372663,"ip_address":"","ucode":"4FA58BDE587E65","user_header":"https://static001.geekbang.org/account/avatar/00/14/f1/f7/fda283ee.jpg","comment_is_top":false,"comment_ctime":1568904251,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"164777661499","product_id":100013101,"comment_content":"简单事情说的复杂化 讲解的时候能不能举例 ","like_count":39,"discussions":[{"author":{"id":1667500,"avatar":"https://static001.geekbang.org/account/avatar/00/19/71/ac/9f50d312.jpg","nickname":"Geek_0cf6ae","note":"","ucode":"B54B3B4289A3CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549668,"discussion_content":"冒犯说一下，老师有点故作高深的感觉，实际上并没有新鲜的见解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644199000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142377,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/69/8ed686c7.jpg","nickname":"摩羯行僧","note":"","ucode":"4B481F8B1ED7B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319228,"discussion_content":"同感，反而被绕进去了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603966913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121459,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1c/b3/6d10ba4f.jpg","nickname":"Running Man","note":"","ucode":"4DD2F6AF71327E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293208,"discussion_content":"同感","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595480264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1657948,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/5c/9ea0f752.jpg","nickname":"程序猿不圆","note":"","ucode":"BC8926A84A07C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377011,"discussion_content":"讲的有点晦涩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622463870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20442,"user_name":"Andy Chen","can_delete":false,"product_type":"c1","uid":1199215,"ip_address":"","ucode":"6FCB80F06EF512","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6f/c2649c60.jpg","comment_is_top":false,"comment_ctime":1534444782,"is_pvip":false,"replies":[{"id":"7186","content":"重构有很多种，有大有小啊。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534507262,"ip_address":"","comment_id":20442,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100318692590","product_id":100013101,"comment_content":"“你可以随意改变getTheFlag函数的内部实现及其返回结果的类型，而不用修改main函数中的任何代码。”这个说法只在你给定的例子下面成立，事实上main函数的代码已经假设getTheFlag会返回字符串，因为它在用返回值，如果getTheFlag一开始是返回某种结构体指针，main使用了这个指针指向的一系列成员，然后你再改getTheFlag返回类型看看。类型推断已经深入大多数语言，包括c++，C#，等等，但它没办法解决所谓的使用者不需要改变任何代码就能进行重构","like_count":24,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422248,"discussion_content":"重构有很多种，有大有小啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534507262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20472,"user_name":"玉明","can_delete":false,"product_type":"c1","uid":1085700,"ip_address":"","ucode":"90B89E17A03FB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/04/065b82b4.jpg","comment_is_top":false,"comment_ctime":1534467308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61664009452","product_id":100013101,"comment_content":"应该是没影响的，不同栈上的变量","like_count":14},{"had_liked":false,"id":20488,"user_name":"xiaolonghuster","can_delete":false,"product_type":"c1","uid":1205115,"ip_address":"","ucode":"6D91FC39D11252","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/7b/0eb34db9.jpg","comment_is_top":false,"comment_ctime":1534477942,"is_pvip":false,"replies":[{"id":"7181","content":"这里确实是写错了，你改的很对，谢谢指正！我想邀请你进入本专栏的微信讨论群。你知道入群方法吗？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534505816,"ip_address":"","comment_id":20488,"utype":1}],"discussion_count":9,"race_medal":0,"score":"53074085494","product_id":100013101,"comment_content":"按照老师的demo，不能获取命令参数，只能得到默认值，改成下面这样可以:我用的是1.10.3版本，是不是版本问题<br><br>func main() {<br><br>\tvar name = getTheFlag()<br>\t<br>\tflag.Parse()<br>\tfmt.Printf(&quot;Hello, %v!\\n&quot;, *name)<br>}<br><br>func getTheFlag() *string {<br><br>\treturn flag.String(&quot;name&quot;, &quot;everybody&quot;, &quot;The greeting object.&quot;)<br>}","like_count":13,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422272,"discussion_content":"这里确实是写错了，你改的很对，谢谢指正！我想邀请你进入本专栏的微信讨论群。你知道入群方法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534505816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2012992,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V1Af82fG1XWgLduic37Abv40HibFUV5cZNtT6ib4A1ja0wdR5voo4QypdkWtUWfOhTeYhiaXopYRVL1X5VNPwUOExw/132","nickname":"Geek_e381e0","note":"","ucode":"E115D6FB2DBED8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327057,"discussion_content":"看着和上面的代码一样呀，没看出来你改了哪里","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605737746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2035042,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errBkbTrzNyvC5SqOicwHoibjUqib7t5D4icsclbDYfpHoicjy6uhgJuuEl0ZzgCMDA03m3mIHARX2xV9g/132","nickname":"张道隆","note":"","ucode":"26CA75C2AAAC36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2012992,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/V1Af82fG1XWgLduic37Abv40HibFUV5cZNtT6ib4A1ja0wdR5voo4QypdkWtUWfOhTeYhiaXopYRVL1X5VNPwUOExw/132","nickname":"Geek_e381e0","note":"","ucode":"E115D6FB2DBED8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376025,"discussion_content":"其实我也没看出来，哪里不一样啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621929750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327057,"ip_address":""},"score":376025,"extra":""}]},{"author":{"id":1605632,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/9R3tfc8xP1lOmW0HU5ocEfUuH4bBng1d2EX7RHO8DJ1xcHibrV6rbMDic8N9PjyUyUcIaWcCibCAIqQQk0ozuvFbg/132","nickname":"Geek_2020","note":"","ucode":"266FC3E04FEE52","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557735,"discussion_content":"老师，怎么入群，我想加入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647947148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2035042,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errBkbTrzNyvC5SqOicwHoibjUqib7t5D4icsclbDYfpHoicjy6uhgJuuEl0ZzgCMDA03m3mIHARX2xV9g/132","nickname":"张道隆","note":"","ucode":"26CA75C2AAAC36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376024,"discussion_content":"看着和上面的代码一样呀，没看出来你改了哪里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621929732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2421235,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/8x1V2gzQgXticqbYw6jhpicIPBqfsEQXqa60q9YqvxB9qM3xZtzaGW0WeuS8L59jmNKu936z9iar6QrPqJ2Bhj4xA/132","nickname":"全衡","note":"","ucode":"3335F6D7DF493E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368996,"discussion_content":"怎么入群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618899047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317887,"discussion_content":"怎么入群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603611107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041640,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/e8/a1703783.jpg","nickname":"mrlay","note":"","ucode":"385A1954ED3317","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5914,"discussion_content":"go1.12.7  都无法获取命令行参数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566536059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4186,"discussion_content":"老师，怎么入群，我想加入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565196304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42038,"user_name":"Jevade","can_delete":false,"product_type":"c1","uid":1040003,"ip_address":"","ucode":"5C3B3177DF3943","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/83/d8df2dd8.jpg","comment_is_top":false,"comment_ctime":1542895920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35902634288","product_id":100013101,"comment_content":"string 是值传递，所以调用flag.String函数的时候，本身会构造一个string <br>var name = *flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>传递给name的是一个string的副本，和原本的string只是值一样，地址并不同，后面采用flag.Parse也就不会改变name，因此name还是默认值。<br>不知道这样理解对不对？","like_count":8},{"had_liked":false,"id":20435,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1534438470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35894176838","product_id":100013101,"comment_content":"go支持类型推断；<br>两种变量定义方式：var完整方式、:=短变量定义；<br>重声明只可以在短变量定义中出现，并且是在多个变量声明中出现（给新变量赋值，给旧变量赋新值）","like_count":8},{"had_liked":false,"id":20616,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1534597362,"is_pvip":false,"replies":[{"id":"7244","content":"已经修正了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534660112,"ip_address":"","comment_id":20616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31599368434","product_id":100013101,"comment_content":"var name = *flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>这一句是不是导致name是个副本，parse后也不会变？请郝老师确认一下","like_count":8,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422333,"discussion_content":"已经修正了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534660112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290029,"user_name":"墨明棋妙","can_delete":false,"product_type":"c1","uid":1133853,"ip_address":"","ucode":"17FFA4D00F1B6D","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/1d/ff301b04.jpg","comment_is_top":false,"comment_ctime":1619330186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23094166666","product_id":100013101,"comment_content":"对于没有go语音基础的初学者，看了几节后真的是云里雾里，学习效率不高...","like_count":6},{"had_liked":false,"id":150761,"user_name":"钟鑫","can_delete":false,"product_type":"c1","uid":1595553,"ip_address":"","ucode":"F44E0BDADF2244","user_header":"https://static001.geekbang.org/account/avatar/00/18/58/a1/e53fe44d.jpg","comment_is_top":false,"comment_ctime":1573607936,"is_pvip":true,"replies":[{"id":"57993","content":"当然算，这是两码事。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1573615227,"ip_address":"","comment_id":150761,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18753477120","product_id":100013101,"comment_content":"对于变量重声明我有一点疑问，我程序中尝试了，对于重声明的变量其地址是一样的，这个还算重声明吗？","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474264,"discussion_content":"当然算，这是两码事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573615227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224854,"user_name":"loser","can_delete":false,"product_type":"c1","uid":1259571,"ip_address":"","ucode":"94C8EB5761CE7A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/T7sFX0O4Tdwic8RUolZVe4hNPDiaiaxsfGD4qCBsmac8Iqcibe23Y3jEOQyTic7hsYn46ETeC56jhJ4nFOdOsEZxchw/132","comment_is_top":false,"comment_ctime":1591577296,"is_pvip":false,"replies":[{"id":"82771","content":"名称中带有 _&lt;操作系统代号&gt; 都属于根据操作系统定制的源码文件。你在 win 下面当然应该查看  cpu_windows.go 。另外，这种点击的跳转逻辑应该是代码编辑器插件或者IDE的行为，不关Go语言本身的事。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1591589431,"ip_address":"","comment_id":224854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14476479184","product_id":100013101,"comment_content":"你好，不知道还能看到这个评论不。我在学习gopsutil时遇到一个问题。cpu包下有cpu_linux.go，cpu_windows.go等文件,这两个文件中都有Times()函数，在windows平台我有鼠标点击Times查看引用时，他自动跳转到cpu_windows.go中去了，这是什么原因，为啥没跳入cpu_linux中去。如果看到了，请帮我解惑下，万分感谢","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497631,"discussion_content":"名称中带有 _&amp;lt;操作系统代号&amp;gt; 都属于根据操作系统定制的源码文件。你在 win 下面当然应该查看  cpu_windows.go 。另外，这种点击的跳转逻辑应该是代码编辑器插件或者IDE的行为，不关Go语言本身的事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591589431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91293,"user_name":"小苹果","can_delete":false,"product_type":"c1","uid":1204164,"ip_address":"","ucode":"719AF8C4FD2E48","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/c4/ea2acdb9.jpg","comment_is_top":false,"comment_ctime":1556966356,"is_pvip":false,"replies":[{"id":"32693","content":"嗯，看到了，这确实是个问题，当初是为了不改动其他代码。我想想怎么调整一下。谢谢。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1556981390,"ip_address":"","comment_id":91293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441868244","product_id":100013101,"comment_content":"老师，puzzlers\\article4\\q1\\demo7.go里面有个隐式错误。<br>var name = *flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>这种方法输出的结果永远是 Hello, everyone!，不论 -name 后面是什么。<br>正确的应该是：<br>func main() {<br>\t&#47;&#47; 方式1。<br>\tvar name = flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>\tflag.Parse()<br>\tfmt.Printf(&quot;Hello, %v!\\n&quot;, *name)<br>}","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448871,"discussion_content":"嗯，看到了，这确实是个问题，当初是为了不改动其他代码。我想想怎么调整一下。谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556981390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20441,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1534444005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14419345893","product_id":100013101,"comment_content":"变量解析由内向外，内层找不到才回去外层找。","like_count":3},{"had_liked":false,"id":156586,"user_name":"dlili","can_delete":false,"product_type":"c1","uid":1495000,"ip_address":"","ucode":"8FE18AFE92B0CB","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/d8/a0c0ecb4.jpg","comment_is_top":false,"comment_ctime":1574917859,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164852451","product_id":100013101,"comment_content":":=短变量声明可以理解成var声明后再赋值，可以运行下边的程序理解<br><br>```<br><br>func main() {<br>\terr := test() &#47;&#47;声明并赋值一个error类型的变量<br>\tfmt.Printf(&quot;%v:%s\\n&quot;,&amp;err,err.Error())<br>\tif true{<br>\t\terr := test() &#47;&#47;在if代码块中声明并赋值一个error类型的变量，与if外的不同，这是一个新的变量<br>\t\tfmt.Printf(&quot;%v:%s\\n&quot;,&amp;err,err.Error())<br>\t}<br>\tif true{<br>\t\terr := &quot;error&quot; &#47;&#47;在if代码块中声明并赋值一个error类型的变量，与if外的不同，这是一个新的变量<br>\t\tfmt.Printf(&quot;%v:%s\\n&quot;,&amp;err,err)<br>\t}<br>\t&#47;&#47;err := errors.New(&quot;error&quot;) &#47;&#47; 编译错误,此变量已经声明过<br>\terr = errors.New(&quot;error&quot;) &#47;&#47; 重新赋值<br>\tfmt.Printf(&quot;%v:%s\\n&quot;,&amp;err,err.Error())<br>}<br><br>func test() (err error) {<br>\treturn errors.New(&quot;error&quot;)<br>}<br>```","like_count":2,"discussions":[{"author":{"id":1118938,"avatar":"https://static001.geekbang.org/account/avatar/00/11/12/da/a3ea305f.jpg","nickname":"jiaobuchongจุ๊บ","note":"","ucode":"0AEE4E579DC3A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587277,"discussion_content":"因为没有分配新的内存，所以不能叫声明，而且使用声明容易引发歧义。文章里说的“重声明”是不太正确的。\n这里为什么有问题：\n//err := errors.New(&#34;error&#34;) // 编译错误,此变量已经声明过\n这篇文章给了我答案：\nhttps://www.modb.pro/db/381988","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662954968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122059,"user_name":"🐶","can_delete":false,"product_type":"c1","uid":1459980,"ip_address":"","ucode":"D9E46DDB64BA77","user_header":"https://static001.geekbang.org/account/avatar/00/16/47/0c/f2f0245e.jpg","comment_is_top":false,"comment_ctime":1565276839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155211431","product_id":100013101,"comment_content":"作用域不同，当前变量会覆盖外层作用域的变量","like_count":2},{"had_liked":false,"id":22833,"user_name":"charlesgogo01","can_delete":false,"product_type":"c1","uid":1223633,"ip_address":"","ucode":"8667B4492DAD87","user_header":"","comment_is_top":false,"comment_ctime":1535989810,"is_pvip":false,"replies":[{"id":"8285","content":"Go里面没有传递地址这种说法。*在这里是取值操作符。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536061681,"ip_address":"","comment_id":22833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10125924402","product_id":100013101,"comment_content":"name := *flag.string（）这儿为啥会有*，本来返回应该是个变量值，这样是传递地址吗？","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423288,"discussion_content":"Go里面没有传递地址这种说法。*在这里是取值操作符。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536061681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20462,"user_name":"小小笑儿","can_delete":false,"product_type":"c1","uid":1040354,"ip_address":"","ucode":"CA63CC50DC2091","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/e2/823a04b4.jpg","comment_is_top":false,"comment_ctime":1534465703,"is_pvip":false,"replies":[{"id":"7185","content":"vet会提示有隐患，重声明和可重名变量都容易让人产生迷惑，这也是也讲到它们的原因。哦，对了，课重名变量会在下一篇讲。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534507201,"ip_address":"","comment_id":20462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124400295","product_id":100013101,"comment_content":"思考题:<br>内部作用域的变量会覆盖外部作用域的变量，是声明一个新的变量而不是重声明，重声明只在同一个作用域生效。<br>可以使用go vet -shadow显示这一类错误。","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422256,"discussion_content":"vet会提示有隐患，重声明和可重名变量都容易让人产生迷惑，这也是也讲到它们的原因。哦，对了，课重名变量会在下一篇讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534507201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291108,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1620030562,"is_pvip":true,"replies":[{"id":"105499","content":"可以说，同一个代码块中的变量就是“不可重名变量”。（“同一个代码块中的重名变量”在Go语言中是不合法的）","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1620143186,"ip_address":"","comment_id":291108,"utype":1}],"discussion_count":1,"race_medal":2,"score":"5914997858","product_id":100013101,"comment_content":"类型推断（编程语言在编译期自动解释表达类型）最早是在 C# 里面看到的，作为一种语法糖，用起来感觉很好。<br><br>表达式类型就是对表达式进行求值后得到结果的类型<br><br>An expression specifies the computation of a value by applying operators and functions to operands.<br><br>Go 语言的类型推断提升了程序的灵活性，便于重构，同时没有损失程序的性能（在编译期确定类型）。<br><br>Go 语言的类型推断只用于变量或常量的初始化。<br><br>对于思考题，如果与当前变量重名的是外层代码块中的变量，那么相当于是在内层代码块中的一个新的变量，可以与外层同名变量不同类型。<br><br>a short variable declaration may redeclare variables provided they were originally declared earlier in the same block (or the parameter lists if the block is the function body) with the same type, and at least one of the non-blank variables is new.<br><br>看到答案中提到“可重名变量”，那么还有“不可重名变量”么？","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519375,"discussion_content":"可以说，同一个代码块中的变量就是“不可重名变量”。（“同一个代码块中的重名变量”在Go语言中是不合法的）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620143186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225123,"user_name":"张立春","can_delete":false,"product_type":"c1","uid":1124382,"ip_address":"","ucode":"D8B4523B95D839","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/1e/76e19bd3.jpg","comment_is_top":false,"comment_ctime":1591663524,"is_pvip":false,"replies":[{"id":"82913","content":"请联系上下文阅读。<br><br>“这里”指的是这句话上面的那两段代码：<br><br>1. <br>var name = flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>2. <br>name := flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1591690038,"ip_address":"","comment_id":225123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886630820","product_id":100013101,"comment_content":"“”还记得吗？之前的变量声明语句是var name string。这里利用了 Go 语言自身的类型推断，而省去了对该变量的类型的声明。””<br>这里有明确的类型定义“string”，哪有用类型判断？<br>目前感觉很晦涩，简单的东西讲的复杂！<br>","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497740,"discussion_content":"请联系上下文阅读。\n\n“这里”指的是这句话上面的那两段代码：\n\n1. \nvar name = flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)\n2. \nname := flag.String(&amp;quot;name&amp;quot;, &amp;quot;everyone&amp;quot;, &amp;quot;The greeting object.&amp;quot;)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591690038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65279,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1549187570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844154866","product_id":100013101,"comment_content":"Unlike regular variable declarations, a short variable declaration may redeclare variables provided they were originally declared earlier in the same block (or the parameter lists if the block is the function body) with the same type, and at least one of the non-blank variables is new. <br><br>https:&#47;&#47;golang.org&#47;ref&#47;spec#Short_variable_declarations<br><br>上面是 Go 语言规范中对于重声明的描述，重声明的英文关键字是 redeclare variables ，可以使用这个关键字在 Google 上搜索。","like_count":1},{"had_liked":false,"id":23361,"user_name":"liyinda0000","can_delete":false,"product_type":"c1","uid":1198421,"ip_address":"","ucode":"12D5C62716DAB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/55/b6c9c0f4.jpg","comment_is_top":false,"comment_ctime":1536305678,"is_pvip":false,"replies":[{"id":"8487","content":"微信学习群已经满了，不过可以去开发者头条App搜索GoHackers并加入组织。这个组织是我个人在几年前发起的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536386045,"ip_address":"","comment_id":23361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5831272974","product_id":100013101,"comment_content":"    在article4&#47;q1&#47;demo7.go中在使用{方式1}中，发现name传参未能正常打印，我使用的go版本1.9.4<br>    解决办法： 13行 *flag.String改成flag.String；19行 fmt.Printf(&quot;Hello, %v!\\n&quot;, name) 将name改成*name<br>    问题思考：应该是文中未深入探讨‘指针变量’的问题，flag.String()得到的是指针变量，*代表取值符，*name将指针变量中的值取出（运行&amp;name发现为内存地址，&amp;代表取地址符），上述问题的出现原因请您指点？另如何加入微信学习群，望早日加入组织，哈哈","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423530,"discussion_content":"微信学习群已经满了，不过可以去开发者头条App搜索GoHackers并加入组织。这个组织是我个人在几年前发起的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536386045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20625,"user_name":"慢熊胖胖跑","can_delete":false,"product_type":"c1","uid":1065065,"ip_address":"","ucode":"58523B53D45C7F","user_header":"https://static001.geekbang.org/account/avatar/00/10/40/69/f86a1526.jpg","comment_is_top":false,"comment_ctime":1534607323,"is_pvip":false,"replies":[{"id":"7246","content":"你这一堆❀是啥？：）","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534660243,"ip_address":"","comment_id":20625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829574619","product_id":100013101,"comment_content":"由于go是值传递，因此即使传入重名变量，一般在代码块中变量可以正常使用，但是值得改变不会引起变化，因为变量传入后，代码块中赋予了新的地址。 除非如同case3一样中传入变量的指针，然后才会使用相同的变量地址，修改变量的值。func reusevarnam1(var1 int) {    var1 = 3 + var1    fmt.Printf(&quot;Inside reusevarnam1,var1 is %d, address is %s\\n&quot;, var1, &amp;var1)}<br>func reusevarnam2(var2 int) {    for var2 := 1; var2 &lt; 3; var2++ {        fmt.Println(&quot;reusevarnam2 ...&quot;)        fmt.Printf(&quot;Inside reusevarnam2,var2 is %d, address is %s\\n&quot;, var2, &amp;var2)    }    fmt.Println(&quot;reusevarnam2&quot;)}<br>func reusevarnam3(var3 *int) {    *var3 = *var3 + 100    fmt.Printf(&quot;Inside reusevarnam2,var3 is %d, address is %s\\n&quot;, *var3, var3)}","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422336,"discussion_content":"你这一堆❀是啥？：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534660243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20436,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1534440666,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5829407962","product_id":100013101,"comment_content":"类型推断只能在局部生效，相当于Java的局部变量，而在函数体外的声明变量相当于Java的实例变量","like_count":1,"discussions":[{"author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":188248,"discussion_content":"同学我试了一下 类型推断全局也可以代码如下\n  7 var a = &#34;hello world&#34;\n  8 var b int = 1\n  9 \n 10 func main() {\n 11     fmt.Println( a )\n 12     fmt.Println( b )\n 13 } ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582805895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1109041,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ec/31/644fc4cd.jpg","nickname":"有课学","note":"","ucode":"9A8D5E9B9FDA62","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272941,"discussion_content":"感觉 后端进阶 应该是说错了，他应该想说的是变量重声明，不是类型推断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590379878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":188248,"ip_address":""},"score":272941,"extra":""}]}]},{"had_liked":false,"id":336365,"user_name":"Geek_e25109","can_delete":false,"product_type":"c1","uid":1486172,"ip_address":"","ucode":"6AB6B92BDD01B8","user_header":"","comment_is_top":false,"comment_ctime":1646114325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646114325","product_id":100013101,"comment_content":"当编译器遇到变量名引用时，会查找该名称的定义，查找过程从最内层词法域向全局的作用域进行。所以引用的是当前变量名。","like_count":0},{"had_liked":false,"id":333285,"user_name":"Geek_f62433","can_delete":false,"product_type":"c1","uid":2897824,"ip_address":"","ucode":"227F8013345AD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJYJ74BKhY0ibtDEsWs0eBcWERTSOcsibQ6ke5ibhicibWYRmeyuQOoCN0t7mw0pf9o3lWmtU7ZPY2Azg/132","comment_is_top":false,"comment_ctime":1644245537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644245537","product_id":100013101,"comment_content":"这里还是用赋值比较好理解，也就没有其他几个约束了。","like_count":0},{"had_liked":false,"id":328549,"user_name":"nut","can_delete":false,"product_type":"c1","uid":1097164,"ip_address":"","ucode":"C7F484AF275F09","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/cc/f25b9524.jpg","comment_is_top":false,"comment_ctime":1640768409,"is_pvip":false,"replies":[{"id":"119758","content":"这里是就事论事而已。如果真要做到动态化就用接口了。当然了，明年还可以用上泛型。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1640832966,"ip_address":"","comment_id":328549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640768409","product_id":100013101,"comment_content":"你会发现，你可以随意改变getTheFlag函数的内部实现，及其返回结果的类型，而不用修改main函数中的任何代码。<br><br>这句话不太同意，demo里简单打印一下说得过去。生产环境下，拿到返回值往往是来用的，不仅仅打印一下，必然会关心类型，类型的变化调用方肯定会有感知，需要修改代码。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542744,"discussion_content":"这里是就事论事而已。如果真要做到动态化就用接口了。当然了，明年还可以用上泛型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640832966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326018,"user_name":"江湖过客","can_delete":false,"product_type":"c1","uid":1910572,"ip_address":"","ucode":"3DDB346D675139","user_header":"https://static001.geekbang.org/account/avatar/00/1d/27/2c/b62f9743.jpg","comment_is_top":false,"comment_ctime":1639311678,"is_pvip":false,"replies":[{"id":"118277","content":"也对也不对，因为这虽然不会使编译器报错，但却会产生遮蔽现象，对于后面阅读代码的人（包括你自己）来说，很可能就是个“坑”。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1639363749,"ip_address":"","comment_id":326018,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639311678","product_id":100013101,"comment_content":"func aaa() error {<br>\ta := 1<br><br>\tfor i := 0; i &lt; 2; i++ {<br>\t\ta := 2<br>\t\tfmt.Printf(&quot;内部a is %v&quot;, a)<br>\t}<br>\tfmt.Printf(&quot;a is %v&quot;, a)<br><br>\treturn nil<br>}<br><br>意味着内外两个变量只是单纯的重名了，相互之间没有影响","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538191,"discussion_content":"也对也不对，因为这虽然不会使编译器报错，但却会产生遮蔽现象，对于后面阅读代码的人（包括你自己）来说，很可能就是个“坑”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639363749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311373,"user_name":"FMD_hy","can_delete":false,"product_type":"c1","uid":1638345,"ip_address":"","ucode":"F55D39973EF42B","user_header":"https://static001.geekbang.org/account/avatar/00/18/ff/c9/3d3a0555.jpg","comment_is_top":false,"comment_ctime":1631192047,"is_pvip":false,"replies":[{"id":"112981","content":"这其实是一套Go编程面试题，涉及到了很多Go语言的核心知识。所谓“核心技术”就是这样啦，不是零基础入门的。<br><br>专栏里有一篇文章专门为大家规划了入门路径，你可以参看一下。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1631512275,"ip_address":"","comment_id":311373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631192047","product_id":100013101,"comment_content":"作者这个不适合入门，只适合有经验的go来复习下。上来就直接flag？为什么不直接简单的说明go支持的数据类型，云里雾里，看不见雨","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526574,"discussion_content":"这其实是一套Go编程面试题，涉及到了很多Go语言的核心知识。所谓“核心技术”就是这样啦，不是零基础入门的。\n\n专栏里有一篇文章专门为大家规划了入门路径，你可以参看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631512275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302869,"user_name":"井雨姗🐳","can_delete":false,"product_type":"c1","uid":2383018,"ip_address":"","ucode":"9ABBE140B789A9","user_header":"https://static001.geekbang.org/account/avatar/00/24/5c/aa/f032e8e2.jpg","comment_is_top":false,"comment_ctime":1626418196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626418196","product_id":100013101,"comment_content":"1. Go语言的类型推断可以带来哪些好处？<br>真正的好处，往往会体现在我们写代码之后的那些事情上，比如代码重构。<br><br>提高程序的灵活性，使代码重构变的更加容易。同时又不会给代码的维护带来额外负担（实际上，它恰恰可以避免散弹式的代码修改），更不会损失程序的运行效率。<br><br>1.1 什么是类型推断<br>类型推断：<br>是指编程语言中能够自动推导出值的类型的能力，它是一些强静态类型语言中出现的特性。<br>go是静态编程语言。<br><br><br>1.2 什么是代码重构？好处是什么？<br>我们通常把不改变某个程序与外界的任何交互方式和规则，而只改变其内部实现”的代码修改方式，叫做对该程序的重构。重构的对象可以是一行代码、一个函数、一个功能模块，甚至一个软件系统。<br><br>使用代码重构可以在不改变程序与外界的交互方式和规则的条件下，只改变内部实现，使程序灵活性得到质变。我们不显示指定变量的类型，使他可以动态的确定。<br><br>1.3 散弹式是什么？优缺点是什么？怎么解决？<br>散弹式修改shotgun surgery<br><br>是什么：指的是“一个变化引发多个类的修改”，完成某个需求的时候，A&#47;B&#47;C&#47;D……多个类都需要修改。<br><br>造成原因：多个类之间的耦合太严重。很可能是类没有规划好，没有把变化封装得足够令人满意。可扩展性差，某个类干的事过多。<br><br>怎么解决：把这些经常变化的类独立出来，提取成单一类，专门负责此种类型的修改,考虑使用 Extract Class(提取类)，降低不同的代码修改和扩展时造成同一个类不断的被修改。","like_count":0},{"had_liked":false,"id":296766,"user_name":"Shen","can_delete":false,"product_type":"c1","uid":1182167,"ip_address":"","ucode":"CFF7609A754392","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/d7/ffe7b0bf.jpg","comment_is_top":false,"comment_ctime":1623152950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623152950","product_id":100013101,"comment_content":"个人理解短变量重声明：<br>正常一个变量只能被声明一次，好比Java里int a之后可以直接赋值（或者修改值），但是不能在int a一次，这样就成了两个变量重名，直接报错了。<br>go里面一个方法","like_count":0},{"had_liked":false,"id":291776,"user_name":"lvvp","can_delete":false,"product_type":"c1","uid":1097298,"ip_address":"","ucode":"D36C7B186C56DC","user_header":"https://static001.geekbang.org/account/avatar/00/10/be/52/568e8c06.jpg","comment_is_top":false,"comment_ctime":1620472062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620472062","product_id":100013101,"comment_content":"地址不同，互不影响，只作用于自己的代码块","like_count":0},{"had_liked":false,"id":279428,"user_name":"Han_Q","can_delete":false,"product_type":"c1","uid":1112366,"ip_address":"","ucode":"6E0CD2D31786C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/2e/204ce4ea.jpg","comment_is_top":false,"comment_ctime":1613784736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613784736","product_id":100013101,"comment_content":"内层会覆盖外层变量，但是如用相同变量名，则会是两个不同的变量。","like_count":0},{"had_liked":false,"id":203408,"user_name":"moonfox","can_delete":false,"product_type":"c1","uid":1526355,"ip_address":"","ucode":"902BFF40EFA9FA","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","comment_is_top":false,"comment_ctime":1586185157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586185157","product_id":100013101,"comment_content":"看了评论发现很多人对flag.Parse方法的原理都不知道，都没有想过程序是怎样找到你的flag 并把对应 flag的值修改，所以才会迷惑为什么name 的值没有改变，为什么flag.String 返回的是指针型string","like_count":0},{"had_liked":false,"id":190787,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1584692436,"is_pvip":false,"replies":[{"id":"73384","content":"重复的普通新变量声明是不行的，除非用短变量声明的方式。后者是一种特殊处理。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1584779819,"ip_address":"","comment_id":190787,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584692436","product_id":100013101,"comment_content":"当前变量会在自己的作用域内覆盖外围的同名变量，但是有个疑问是在if语句里声明的同名变量在if的内部又可以被覆盖，难道他们不是同一个作用域？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488053,"discussion_content":"重复的普通新变量声明是不行的，除非用短变量声明的方式。后者是一种特殊处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584779819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217554,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","nickname":"Jason","note":"","ucode":"C5A540BC5A60B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210838,"discussion_content":"我通过程序调试发现\nif a:＝1；a>0 {\n    a：=2\n}中\n两个a并不是同个地址，所以说明他们不属于一个作用域吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584780710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182536,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1582805807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582805807","product_id":100013101,"comment_content":"关于思考题 动手测试了几次 都是屏蔽了全局的a,b变量<br>package main<br>  2 <br>  3 import(<br>  4     &quot;fmt&quot;<br>  5 )<br>  6 <br>  7 var a int  = 100<br>  8 var b int = 1<br>  9 <br> 10 func main() {<br> 11     a := 10<br> 12     b := 2<br> 13     fmt.Println( a )<br> 14     fmt.Println( b )<br> 15 }","like_count":0},{"had_liked":false,"id":182533,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1582805378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582805378","product_id":100013101,"comment_content":"总结一下今天的学习内容:<br>主要学习了变量的两种声明方式和类型的自动推断<br>1. var 方式<br>2. 短变量 冒号 方式<br>局限性 var方式 可以用在任何地方， 而短变量 冒号 方式 却只能用在函数内部或者流程控制语句 if for while switch 的条件变量初始化<br>而类型推断的好处 在于 如果我们修改了表达式的类型或者表达式返回值类型（一般在重构情况下）我们不用去修改函数或者表达式调用的地方 利用代码的重构<br>对于思考题 应该是内部屏蔽外部 他不算重声明(重声明应该在一个代码块中)<br>对于变量重声明的乌龟的屁股-龟定还真的有点多<br>但是仔细一想 其实还是为了代码的整洁吧或者是为了对一个变量的重复使用的同时声明一个新的变量举个栗子<br>io, err := io.open()<br>n,err := io.read()<br>不晓得这个io用得对不对 反正大概就是这个意思!<br>其实就是想重复使用这个err 但是呢 又声明一个新的变量n ","like_count":0},{"had_liked":false,"id":131264,"user_name":"先听","can_delete":false,"product_type":"c1","uid":1151409,"ip_address":"","ucode":"82D8DA7A2FEB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/91/b1/fb117c21.jpg","comment_is_top":false,"comment_ctime":1567684803,"is_pvip":false,"replies":[{"id":"49825","content":"在这个小例子里没有接口的事啊。当然你要说接口有利于重构，话也没错。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1567740023,"ip_address":"","comment_id":131264,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567684803","product_id":100013101,"comment_content":"那个方便重构的例子，与其说是类型推断带来的方便，感觉更像是接口给带来的。不知道是不是我自己的错觉。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466357,"discussion_content":"在这个小例子里没有接口的事啊。当然你要说接口有利于重构，话也没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567740023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1151409,"avatar":"https://static001.geekbang.org/account/avatar/00/11/91/b1/fb117c21.jpg","nickname":"先听","note":"","ucode":"82D8DA7A2FEB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7987,"discussion_content":"谢谢作者回复啊。 上面只是我隐隐的感觉，我自己也不是很确定（我提到的“接口”，是说的fmt.printxx的参数有的是“接口”类型的）。 我把话题好像给扯远了，不好意思啊。我很喜欢您的这个课程，上下班路上在反复听🙏","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567748670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100679,"user_name":"Sky","can_delete":false,"product_type":"c1","uid":1392585,"ip_address":"","ucode":"4C5A5AB73E8B90","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/c9/1ccefb9a.jpg","comment_is_top":false,"comment_ctime":1559615166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559615166","product_id":100013101,"comment_content":"对变量的重声明的解释有点难以理解","like_count":0},{"had_liked":false,"id":76592,"user_name":"ruiaylin","can_delete":false,"product_type":"c1","uid":1006683,"ip_address":"","ucode":"301EFACD01C737","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/5b/82ba0c00.jpg","comment_is_top":false,"comment_ctime":1552636565,"is_pvip":false,"replies":[{"id":"28880","content":"https:&#47;&#47;github.com&#47;hyper0x&#47;Golang_Puzzlers","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1553399200,"ip_address":"","comment_id":76592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552636565","product_id":100013101,"comment_content":"如何下载 演示代码? ","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443367,"discussion_content":"https://github.com/hyper0x/Golang_Puzzlers","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553399200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71734,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1551423350,"is_pvip":false,"replies":[{"id":"26220","content":"你需要贴完整代码，否则我没法帮你解决问题。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551612087,"ip_address":"","comment_id":71734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551423350","product_id":100013101,"comment_content":"var name = *flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;)<br>这种方法输出的结果永远是 Hello, everyone!，不论 -name 后面是什么，请大佬指教。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441304,"discussion_content":"你需要贴完整代码，否则我没法帮你解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551612087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31354,"user_name":"小木","can_delete":false,"product_type":"c1","uid":1198087,"ip_address":"","ucode":"655F6D794848CB","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/07/af4919df.jpg","comment_is_top":false,"comment_ctime":1539156841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539156841","product_id":100013101,"comment_content":"var name = *flag.String(&quot;name&quot;, &quot;everyone&quot;, &quot;The greeting object.&quot;) <br>这句代码不能正确打印 name 是为什么呢？","like_count":0},{"had_liked":false,"id":29674,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1538480347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538480347","product_id":100013101,"comment_content":"重声明的目的是什么？可以带来什么好处呢？<br>是不是说只有在多个变量声明并赋初值的场景才有用？这样把已经声明过的变量重新利用，而不用再引入一个新的变量？<br>就比如你举的例子中，n, err := ... , 如果不可以重声明，那么err写在 :=前面就不合适了。是这个目的吗？","like_count":0},{"had_liked":false,"id":20796,"user_name":"$侯","can_delete":false,"product_type":"c1","uid":1019939,"ip_address":"","ucode":"488B1BD3924E7E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/23/5c74e9b7.jpg","comment_is_top":false,"comment_ctime":1534760761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534760761","product_id":100013101,"comment_content":"内层和外层变量的作用域不一样，修改了内层的不会对外层重名的变量产生影响","like_count":0},{"had_liked":false,"id":20768,"user_name":"codewu","can_delete":false,"product_type":"c1","uid":1060861,"ip_address":"","ucode":"BAA2B1CB48FD00","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/fd/dead7549.jpg","comment_is_top":false,"comment_ctime":1534740711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534740711","product_id":100013101,"comment_content":"思考题:<br>进入到一个代码块后，就进入了一个新的作用域。不会发生合法的重声明，也不会报错不合法的重声明。","like_count":0},{"had_liked":false,"id":20707,"user_name":"MKing","can_delete":false,"product_type":"c1","uid":1074763,"ip_address":"","ucode":"DBC4C6FF30CD95","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/4b/44f62fbe.jpg","comment_is_top":false,"comment_ctime":1534685866,"is_pvip":false,"replies":[{"id":"7300","content":"对的，但是内层的赋值用=的时候不能加var，加了var还是新变量。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534747546,"ip_address":"","comment_id":20707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534685866","product_id":100013101,"comment_content":"思考题: 如果内层变量使用:=去定义 会产生内部变量 但不影响外部变量  如果使用= 则会直接使用外部变量操作 会对外部变量造成修改 不知道对不对","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422371,"discussion_content":"对的，但是内层的赋值用=的时候不能加var，加了var还是新变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534747546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20665,"user_name":"张玉锡","can_delete":false,"product_type":"c1","uid":1199720,"ip_address":"","ucode":"831E0F31DC25FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/68/5e3b5b90.jpg","comment_is_top":false,"comment_ctime":1534651575,"is_pvip":false,"replies":[{"id":"7302","content":"这就是本篇文章所以说的变量重声明。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534747669,"ip_address":"","comment_id":20665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534651575","product_id":100013101,"comment_content":"demo9.go里的赋值，左边是两个变量n和err，一个是短变量，一个是声明变量，为啥都可以用:=的方式赋值？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422356,"discussion_content":"这就是本篇文章所以说的变量重声明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534747669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20629,"user_name":"张震","can_delete":false,"product_type":"c1","uid":1198715,"ip_address":"","ucode":"9CC2C74AE2B4BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/7b/e97b26a4.jpg","comment_is_top":false,"comment_ctime":1534608287,"is_pvip":false,"replies":[{"id":"7243","content":"var是没法参与变量重声明的，但是可以参与可重名变量的声明。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534660094,"ip_address":"","comment_id":20629,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534608287","product_id":100013101,"comment_content":"这个redefine跟用var声明后赋值没啥区别吧","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422337,"discussion_content":"var是没法参与变量重声明的，但是可以参与可重名变量的声明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534660094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20474,"user_name":"runner","can_delete":false,"product_type":"c1","uid":1200107,"ip_address":"","ucode":"6037BEDDF7AA48","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/eb/b5bb4227.jpg","comment_is_top":false,"comment_ctime":1534468190,"is_pvip":false,"replies":[{"id":"7184","content":"所以我是说对这一行的重构。重点是getTheFlag的结果类型改了之后，这段代码其他地方就不用改了。实际开发过程中这种便利是可以利用的，少改写代码。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1534507055,"ip_address":"","comment_id":20474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534468190","product_id":100013101,"comment_content":"重构，赋值处是不用改，后面对变量处理还是要修改啊。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422261,"discussion_content":"所以我是说对这一行的重构。重点是getTheFlag的结果类型改了之后，这段代码其他地方就不用改了。实际开发过程中这种便利是可以利用的，少改写代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534507055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}