{"id":79539,"title":"JavaScript对象：我们真的需要模拟类吗？","content":"<p>早期的JavaScript程序员一般都有过使用JavaScript“模拟面向对象”的经历。</p><p>在上一篇文章我们已经讲到，JavaScript本身就是面向对象的，它并不需要模拟，只是它实现面向对象的方式和主流的流派不太一样，所以才让很多人产生了误会。</p><p>那么，随着我们理解的思路继续深入，这些“模拟面向对象”，实际上做的事情就是“模拟基于类的面向对象”。</p><p>尽管我认为，“类”并非面向对象的全部，但我们不应该责备社区出现这样的方案，事实上，因为一些公司的政治原因，JavaScript推出之时，管理层就要求它去模仿Java。</p><p>所以，JavaScript创始人Brendan Eich在“原型运行时”的基础上引入了new、this等语言特性，使之“看起来语法更像Java”，而Java正是基于类的面向对象的代表语言之一。</p><p>但是JavaScript这样的半吊子模拟，缺少了继承等关键特性，导致大家试图对它进行修补，进而产生了种种互不相容的解决方案。</p><p>庆幸的是，从ES6开始，JavaScript提供了class关键字来定义类，尽管，这样的方案仍然是基于原型运行时系统的模拟，但是它修正了之前的一些常见的“坑”，统一了社区的方案，这对语言的发展有着非常大的好处。</p><!-- [[[read_end]]] --><p>实际上，我认为“基于类”并非面向对象的唯一形态，如果我们把视线从“类”移开，Brendan当年选择的原型系统，就是一个非常优秀的抽象对象的形式。</p><p>我们从头讲起。</p><h2>什么是原型？</h2><p>原型是顺应人类自然思维的产物。中文中有个成语叫做“照猫画虎”，这里的猫看起来就是虎的原型，所以，由此我们可以看出，用原型来描述对象的方法可以说是古已有之。</p><p>我们在上一节讲解面向对象的时候提到了：在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象。</p><p>最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java等流行的编程语言。这个流派叫做基于类的编程语言。</p><p>还有一种就是基于原型的编程语言，它们利用原型来描述对象。我们的JavaScript就是其中代表。</p><p>“基于类”的编程提倡使用一个关注分类和类之间关系开发模型。在这类语言中，总是先有类，再从类去实例化一个对象。类与类之间又可能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。</p><p>与此相对，“基于原型”的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。</p><p>基于原型的面向对象系统通过“复制”的方式来创建新对象。一些语言的实现中，还允许复制一个空对象。这实际上就是创建一个全新的对象。</p><p>基于原型和基于类都能够满足基本的复用和抽象需求，但是适用的场景不太相同。</p><p>这就像专业人士可能喜欢在看到老虎的时候，喜欢用猫科豹属豹亚种来描述它，但是对一些不那么正式的场合，“大猫”可能更为接近直观的感受一些（插播一个冷知识：比起老虎来，美洲狮在历史上相当长时间都被划分为猫科猫属，所以性格也跟猫更相似，比较亲人）。</p><p>我们的JavaScript 并非第一个使用原型的语言，在它之前，self、kevo等语言已经开始使用原型来描述对象了。</p><p>事实上，Brendan更是曾透露过，他最初的构想是一个拥有基于原型的面向对象能力的scheme语言（但是函数式的部分是另外的故事，这篇文章里，我暂时不做详细讲述）。</p><p>在JavaScript之前，原型系统就更多与高动态性语言配合，并且多数基于原型的语言提倡运行时的原型修改，我想，这应该是Brendan选择原型系统很重要的理由。</p><p>原型系统的“复制操作”有两种实现思路：</p><ul>\n<li>\n<p>一个是并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；</p>\n</li>\n<li>\n<p>另一个是切实地复制对象，从此两个对象再无关联。</p>\n</li>\n</ul><p>历史上的基于原型语言因此产生了两个流派，显然，JavaScript显然选择了前一种方式。</p><h2>JavaScript的原型</h2><p>如果我们抛开JavaScript用于模拟Java类的复杂语法设施（如new、Function Object、函数的prototype属性等），原型系统可以说相当简单，我可以用两条概括：</p><ul>\n<li>如果所有对象都有私有字段[[prototype]]，就是对象的原型；</li>\n<li>读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</li>\n</ul><p>这个模型在ES的各个历史版本中并没有很大改变，但从 ES6 以来，JavaScript提供了一系列内置函数，以便更为直接地访问操纵原型。三个方法分别为：</p><ul>\n<li>Object.create 根据指定的原型创建新对象，原型可以是null；</li>\n<li>Object.getPrototypeOf 获得一个对象的原型；</li>\n<li>Object.setPrototypeOf 设置一个对象的原型。</li>\n</ul><p>利用这三个方法，我们可以完全抛开类的思维，利用原型来实现抽象和复用。我用下面的代码展示了用原型来抽象猫和虎的例子。</p><pre><code>var cat = {\n    say(){\n        console.log(&quot;meow~&quot;);\n    },\n    jump(){\n        console.log(&quot;jump&quot;);\n    }\n}\n\nvar tiger = Object.create(cat,  {\n    say:{\n        writable:true,\n        configurable:true,\n        enumerable:true,\n        value:function(){\n            console.log(&quot;roar!&quot;);\n        }\n    }\n})\n\n\nvar anotherCat = Object.create(cat);\n\nanotherCat.say();\n\nvar anotherTiger = Object.create(tiger);\n\nanotherTiger.say();\n\n</code></pre><p>这段代码创建了一个“猫”对象，又根据猫做了一些修改创建了虎，之后我们完全可以用Object.create来创建另外的猫和虎对象，我们可以通过“原始猫对象”和“原始虎对象”来控制所有猫和虎的行为。</p><p>但是，在更早的版本中，程序员只能通过Java风格的类接口来操纵原型运行时，可以说非常别扭。</p><p>考虑到new和prototype属性等基础设施今天仍然有效，而且被很多代码使用，学习这些知识也有助于我们理解运行时的原型工作原理，下面我们试着回到过去，追溯一下早年的JavaScript中的原型和类。</p><h2>早期版本中的类与原型</h2><p>在早期版本的JavaScript中，“类”的定义是一个私有属性 [[class]]，语言标准为内置类型诸如Number、String、Date等指定了[[class]]属性，以表示它们的类。语言使用者唯一可以访问[[class]]属性的方式是Object.prototype.toString。</p><p>以下代码展示了所有具有内置class属性的对象：</p><pre><code>    var o = new Object;\n    var n = new Number;\n    var s = new String;\n    var b = new Boolean;\n    var d = new Date;\n    var arg = function(){ return arguments }();\n    var r = new RegExp;\n    var f = new Function;\n    var arr = new Array;\n    var e = new Error;\n    console.log([o, n, s, b, d, arg, r, f, arr, e].map(v =&gt; Object.prototype.toString.call(v))); \n</code></pre><p>因此，在ES3和之前的版本，JS中类的概念是相当弱的，它仅仅是运行时的一个字符串属性。</p><p>在ES5开始，[[class]] 私有属性被 Symbol.toStringTag 代替，Object.prototype.toString 的意义从命名上不再跟 class 相关。我们甚至可以自定义 Object.prototype.toString 的行为，以下代码展示了使用Symbol.toStringTag来自定义 Object.prototype.toString 的行为：</p><pre><code>    var o = { [Symbol.toStringTag]: &quot;MyObject&quot; }\n    console.log(o + &quot;&quot;);\n</code></pre><p>这里创建了一个新对象，并且给它唯一的一个属性 Symbol.toStringTag，我们用字符串加法触发了Object.prototype.toString的调用，发现这个属性最终对Object.prototype.toString 的结果产生了影响。</p><p>但是，考虑到JavaScript语法中跟Java相似的部分，我们对类的讨论不能用“new运算是针对构造器对象，而不是类”来试图回避。</p><p>所以，我们仍然要把new理解成JavaScript面向对象的一部分，下面我就来讲一下new操作具体做了哪些事情。</p><p>new 运算接受一个构造器和一组调用参数，实际上做了几件事：</p><ul>\n<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>\n<li>将 this 和调用参数传给构造器，执行；</li>\n<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>\n</ul><p>new 这样的行为，试图让函数对象在语法上跟类变得相似，但是，它客观上提供了两种方式，一是在构造器中添加属性，二是在构造器的 prototype 属性上添加属性。</p><p>下面代码展示了用构造器模拟类的两种方法:</p><pre><code>\nfunction c1(){\n    this.p1 = 1;\n    this.p2 = function(){\n        console.log(this.p1);\n    }\n} \nvar o1 = new c1;\no1.p2();\n\n\n\nfunction c2(){\n}\nc2.prototype.p1 = 1;\nc2.prototype.p2 = function(){\n    console.log(this.p1);\n}\n\nvar o2 = new c2;\no2.p2();\n</code></pre><p>第一种方法是直接在构造器中修改this，给this添加属性。</p><p>第二种方法是修改构造器的prototype属性指向的对象，它是从这个构造器构造出来的所有对象的原型。</p><p>没有Object.create、Object.setPrototypeOf 的早期版本中，new 运算是唯一一个可以指定[[prototype]]的方法（当时的mozilla提供了私有属性__proto__，但是多数环境并不支持），所以，当时已经有人试图用它来代替后来的 Object.create，我们甚至可以用它来实现一个Object.create的不完整的polyfill，见以下代码：</p><pre><code>Object.create = function(prototype){\n    var cls = function(){}\n    cls.prototype = prototype;\n    return new cls;\n}\n</code></pre><p>这段代码创建了一个空函数作为类，并把传入的原型挂在了它的prototype，最后创建了一个它的实例，根据new的行为，这将产生一个以传入的第一个参数为原型的对象。</p><p>这个函数无法做到与原生的Object.create一致，一个是不支持第二个参数，另一个是不支持null作为原型，所以放到今天意义已经不大了。</p><h2>ES6 中的类</h2><p>好在ES6中加入了新特性class，new跟function搭配的怪异行为终于可以退休了（虽然运行时没有改变），在任何场景，我都推荐使用ES6的语法来定义类，而令function回归原本的函数语义。下面我们就来看一下ES6中的类。</p><p>ES6中引入了class关键字，并且在标准中删除了所有[[class]]相关的私有属性描述，类的概念正式从属性升级成语言的基础设施，从此，基于类的编程方式成为了JavaScript的官方编程范式。</p><p>我们先看下类的基本写法：</p><pre><code>class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n</code></pre><p>在现有的类语法中，getter/setter和method是兼容性最好的。</p><p>我们通过get/set关键字来创建getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。</p><p>类的写法实际上也是由原型运行时来承载的，逻辑上JavaScript认为每个类是有共同原型的一组对象，类中定义的方法和属性则会被写在原型对象之上。</p><p>此外，最重要的是，类提供了继承能力。我们来看一下下面的代码。</p><pre><code>class Animal { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(this.name + ' barks.');\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n</code></pre><p>以上代码创造了Animal类，并且通过extends关键字让Dog继承了它，展示了最终调用子类的speak方法获取了父类的name。</p><p>比起早期的原型模拟方式，使用extends关键字自动设置了constructor，并且会自动调用父类的构造函数，这是一种更少坑的设计。</p><p>所以当我们使用类的思想来设计代码时，应该尽量使用class来声明类，而不是用旧语法，拿函数来模拟对象。</p><p>一些激进的观点认为，class关键字和箭头运算符可以完全替代旧的function关键字，它更明确地区分了定义函数和定义类两种意图，我认为这是有一定道理的。</p><h2>总结</h2><p>在新的ES版本中，我们不再需要模拟类了：我们有了光明正大的新语法。而原型体系同时作为一种编程范式和运行时机制存在。</p><p>我们可以自由选择原型或者类作为代码的抽象风格，但是无论我们选择哪种，理解运行时的原型系统都是很有必要的一件事。</p><p>在你的工作中，是使用class还是仍然在用function来定义“类”？为什么这么做？如何把使用function定义类的代码改造到class的新语法？</p><p>欢迎给我留言，我们一起讨论。</p><p></p>","comments":[{"had_liked":false,"id":64764,"user_name":"浩明啦","can_delete":false,"product_type":"c1","uid":1377422,"ip_address":"","ucode":"120ED8FC45B992","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/8e/e75ecc5e.jpg","comment_is_top":true,"comment_ctime":1548902679,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"9.2233726697638994e+18","product_id":100023201,"comment_content":" 这些知识真的不止这个价格了， 感谢老师  ","like_count":147,"discussions":[{"author":{"id":1898195,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f6/d3/ed7e9d0b.jpg","nickname":"埃尼阿克","note":"","ucode":"528E340B3131BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212881,"discussion_content":"都在ES6手册上呢","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1585028210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997806,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7b/ee/53124b75.jpg","nickname":"东坡芝士","note":"","ucode":"FF267B7E865AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318850,"discussion_content":"知识没有专属，所以不是这么算的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603866383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385772,"avatar":"https://static001.geekbang.org/account/avatar/00/15/25/2c/8f61089f.jpg","nickname":"宗麒麟","note":"","ucode":"AC15E3AFAECE3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284692,"discussion_content":"个人觉得你们两人的说法很有意思","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592585694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100750,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/ce/d9e00eb5.jpg","nickname":"undefined","note":"","ucode":"768098DBDBE333","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363378,"discussion_content":"😂 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617183797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608236,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8a/2c/c8e2f986.jpg","nickname":"星梦","note":"","ucode":"B2534D22F4417D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2343,"discussion_content":"3万多人买就价值100多万啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563502694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64803,"user_name":"Youngwell","can_delete":false,"product_type":"c1","uid":1392641,"ip_address":"","ucode":"D6F5C344E9DFA1","user_header":"","comment_is_top":false,"comment_ctime":1548914136,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"710218517976","product_id":100023201,"comment_content":"感觉是像在听天书，前端工作快三年了，悲催了","like_count":166,"discussions":[{"author":{"id":1701765,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/85/c987fc22.jpg","nickname":"BGgbg","note":"","ucode":"EFEA3A598D72EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76857,"discussion_content":"你确定不是美工工作快三年了？","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1575861490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365578,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/4a/159db001.jpg","nickname":"。。。","note":"","ucode":"7F943EEB55560C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311490,"discussion_content":"看到你们的评论，我的心里有点平衡了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1602373816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623365,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/45/9db8e975.jpg","nickname":"七米海岸","note":"","ucode":"2B2C14C7444C37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205169,"discussion_content":"我觉得也是，我前端两年了吧，可能因为学校的时候也没有学这些，工作后又是基于工作任务学习的前端，所以对于这些基础的东西真的就像听天书一样","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1584275628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803393,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/81/7b5c8f5f.jpg","nickname":"木头","note":"","ucode":"11F971E79EA76E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565778,"discussion_content":"看一周《JS高级程序设计》和《ES6新特性》就能听懂了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1650542162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2579688,"avatar":"","nickname":"Geek_7c46c4","note":"","ucode":"672FFBEE0E5FB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369257,"discussion_content":"确定不是美工工作快三年了？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618989275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2133390,"avatar":"https://static001.geekbang.org/account/avatar/00/20/8d/8e/f5b98f85.jpg","nickname":"Summer小榕榕","note":"","ucode":"240B988CF6B253","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308905,"discussion_content":"学过计算机或者学习过任何一门其他面对对象语言的编程听这个应该还好吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601118324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477902,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","nickname":"半橙汁","note":"","ucode":"BB93BB9CCB7FA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315852,"discussion_content":"应了那句话，出来混，总是要还的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603331957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1747502,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/aa/2e/3c7cb95d.jpg","nickname":"小斧","note":"","ucode":"E50115CCCA1E80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1477902,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","nickname":"半橙汁","note":"","ucode":"BB93BB9CCB7FA2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351377,"discussion_content":"也太悲催了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614254739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315852,"ip_address":""},"score":351377,"extra":""},{"author":{"id":1747502,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/aa/2e/3c7cb95d.jpg","nickname":"小斧","note":"","ucode":"E50115CCCA1E80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1477902,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","nickname":"半橙汁","note":"","ucode":"BB93BB9CCB7FA2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351378,"discussion_content":"悲催！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614254752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315852,"ip_address":""},"score":351378,"extra":""}]},{"author":{"id":1059944,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","nickname":"天敌","note":"","ucode":"CD29A622197197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314653,"discussion_content":"后端表示emm???","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603183149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016394,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYg80llu8nzJn5x394p9WsKuac5qgCU506tBXIqUvTbe19YYMLEzo46rf2FQJvNLzcx9lnmYjDeg/132","nickname":"ssaylo","note":"","ucode":"3CBDC64385BEE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298368,"discussion_content":"你确定不是美工工作快三年了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597281899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1382358,"avatar":"https://static001.geekbang.org/account/avatar/00/15/17/d6/f225456c.jpg","nickname":"萱","note":"","ucode":"CE7A24818F0929","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278711,"discussion_content":"同三年","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591230017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64983,"user_name":"ashen1129","can_delete":false,"product_type":"c1","uid":1379303,"ip_address":"","ucode":"F2E58986489E02","user_header":"https://static001.geekbang.org/account/avatar/00/15/0b/e7/1b79a53c.jpg","comment_is_top":false,"comment_ctime":1548991555,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"499765197891","product_id":100023201,"comment_content":"本篇厘清了一些我对面向对象的理解误区，说明了“基于类”和“基于原型”作为两种编程范式的区别，感谢。<br><br>不过感觉本篇在写的时候有一些地方讲的不够严谨：<br><br>1. [[class]]和Symbol.toStringTag实质上是控制的“ the creation of the default string description of an object”，但举例中使用了一个o.toString()来讲述，感觉容易造成误解。<br><br>2.在讲解ES6中的类时，文中指出“类中定义的方法和属性则会被写在原型对象之上”，事实上一般数据属性写在对象上，而访问器属性和方法才是写在原型对象之上的。<br><br>3.class和extends实质上是作为语法糖，统一了JS程序员对基于类的面向对象的模拟，但感觉文中讲的不是很清楚。<br><br>以上是一些个人看法，如有不对的地方欢迎winter老师指正。","like_count":116,"discussions":[{"author":{"id":1384797,"avatar":"https://static001.geekbang.org/account/avatar/00/15/21/5d/38811b1c.jpg","nickname":"enforceway","note":"","ucode":"767E20852057D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350031,"discussion_content":"看到该部分章节一半的时候，我感觉特别迷糊，尤其看到“早期版本的 JavaScript 中，类的定义是一个私有属性 [[class]]”这部分，看到你的评论，我才觉得自己迷糊在哪里。我同意你的观点1，我引用的这段应该是说，可以获取类名，表示实现了类一部分特性。\n无论构造器还是class语法糖都是实现类的范式。但是Symbol的一系列方法说明的问题，我不太明确，文中没有太延伸。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613664735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67482,"user_name":"简单","can_delete":false,"product_type":"c1","uid":1289322,"ip_address":"","ucode":"322D891459DCD4","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/6a/b6f6810c.jpg","comment_is_top":false,"comment_ctime":1550156108,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"207708586316","product_id":100023201,"comment_content":"老师，我听了几遍为什么觉得什么都不懂，越听越复杂，不理解也记不住😂","like_count":48,"discussions":[{"author":{"id":1146279,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7d/a7/99229d2e.jpg","nickname":"Geek_963ec5","note":"","ucode":"A67CAD5B570D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335453,"discussion_content":"实际上，整篇内容就像一个历史回顾而已，总结一句话，你创建类就用ES6的class关键字就得了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1608197208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1519200,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/60/4fa1f3bd.jpg","nickname":"rs勿忘初心","note":"","ucode":"557D1ECD757195","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1146279,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7d/a7/99229d2e.jpg","nickname":"Geek_963ec5","note":"","ucode":"A67CAD5B570D19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363738,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617271406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335453,"ip_address":""},"score":363738,"extra":""}]},{"author":{"id":1301767,"avatar":"https://static001.geekbang.org/account/avatar/00/13/dd/07/d9d9a72c.jpg","nickname":"abnormal","note":"","ucode":"41EF736F9ADF16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538065,"discussion_content":"感觉更像是老师，自己在总结自己已有的知识，只有跟老师同样的知识储备量，才能听得懂，像是说给自己听得，感觉一篇的内容完全可以扩展成一本小册子。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639319940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","nickname":"烈鸟","note":"","ucode":"F568728E862D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558970,"discussion_content":"对，像上面朋友说的，当成是历史回顾，老师说了下ES6之前类是如何模拟的，当下只推荐用class来创建类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648535275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2283110,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d6/66/2ad4fab2.jpg","nickname":"图层编组师","note":"","ucode":"F98E89FCC2FE58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320277,"discussion_content":"我是会swift oc 做iOS的 这个是前端涉及原理之类的吧 我也听不太懂。大概有个印象吧,在开发过程中,再慢慢领悟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604306763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70928,"user_name":"乐亦栗","can_delete":false,"product_type":"c1","uid":1373269,"ip_address":"","ucode":"FE74C9293829FF","user_header":"https://static001.geekbang.org/account/avatar/00/14/f4/55/0025dfcb.jpg","comment_is_top":false,"comment_ctime":1551228935,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"181939855367","product_id":100023201,"comment_content":"有像我一样平常根本不用面向对象写代码的吗……","like_count":42,"discussions":[{"author":{"id":1955477,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/d6/95/bb5e4ea1.jpg","nickname":"小只Linxiaozi","note":"","ucode":"A3A0505F3BE048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236830,"discussion_content":"函数式编程，举手","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1587125847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1450109,"avatar":"https://static001.geekbang.org/account/avatar/00/16/20/7d/e4f2aad1.jpg","nickname":"陈坤","note":"","ucode":"0C8A6CEC8DFBB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270516,"discussion_content":"胡乱式编程，想起来啥写啥😂","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1590022844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391888,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3d/10/ec31e6ac.jpg","nickname":"小胡子618","note":"","ucode":"B8354B3F467E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303217,"discussion_content":"vue api编程","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599188460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744499,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9e/73/edd5724f.jpg","nickname":"anruoyefan","note":"","ucode":"22544CBDF1DBCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203123,"discussion_content":"+1，我一直觉得自己不像个所谓的“工程师”，就是每次代码都是片段式叠加，没有系统的整理和总结","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584001889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131070,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/3e/c1f76202.jpg","nickname":"青山","note":"","ucode":"749BAD1834AC0F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52516,"discussion_content":"现在比较靠前的语言,并不再是面向对象","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574059960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1374715,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/fb/04faa152.jpg","nickname":"上海彭鱼晏","note":"","ucode":"F21C391263DA23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131070,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/3e/c1f76202.jpg","nickname":"青山","note":"","ucode":"749BAD1834AC0F","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":209120,"discussion_content":"函数式编程吗还是啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584611960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52516,"ip_address":""},"score":209120,"extra":""},{"author":{"id":1997806,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7b/ee/53124b75.jpg","nickname":"东坡芝士","note":"","ucode":"FF267B7E865AD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1374715,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/fb/04faa152.jpg","nickname":"上海彭鱼晏","note":"","ucode":"F21C391263DA23","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318849,"discussion_content":"函数式不影响面向对象的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603866001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209120,"ip_address":""},"score":318849,"extra":""}]},{"author":{"id":1462789,"avatar":"https://static001.geekbang.org/account/avatar/00/16/52/05/acacddb6.jpg","nickname":"violet","note":"","ucode":"BF120A579BFA63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3947,"discussion_content":"举手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564999804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1383410,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1b/f2/a2a2e58d.jpg","nickname":"🍓爱阳光的小菇凉🍓","note":"","ucode":"A58C160119548A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1020,"discussion_content":"举手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562238291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242122,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","nickname":"YourSweetHeart","note":"","ucode":"38843F447B03F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387,"discussion_content":"举手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561519935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95591,"user_name":"Nina.","can_delete":false,"product_type":"c1","uid":1382896,"ip_address":"","ucode":"42B1BDF6B5D2E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/19/f0/4f73dba3.jpg","comment_is_top":false,"comment_ctime":1558093760,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"138997047232","product_id":100023201,"comment_content":"winter的文章很适合反复去听，每次都有新的领悟。<br>今年毕业啦，选择了前端，去实习时有接触到winter所说的知识，但是我只能略懂，单词我懂，哈哈。<br>虽然现在还是前端渣渣，但是我相信，通过自己的努力，一定可以成为大神级的程序媛，相信我嘛~哈哈哈","like_count":32,"discussions":[{"author":{"id":1379474,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0c/92/aab2706b.jpg","nickname":"选我。。。","note":"","ucode":"E8093FE5CFCD9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214371,"discussion_content":"会秃头妹的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585186129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1379474,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0c/92/aab2706b.jpg","nickname":"选我。。。","note":"","ucode":"E8093FE5CFCD9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252538,"discussion_content":"秃头秀请坐下","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1588170221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214371,"ip_address":""},"score":252538,"extra":""},{"author":{"id":1365578,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/4a/159db001.jpg","nickname":"。。。","note":"","ucode":"7F943EEB55560C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1379474,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0c/92/aab2706b.jpg","nickname":"选我。。。","note":"","ucode":"E8093FE5CFCD9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311491,"discussion_content":"我丢，你这评论～～～实属妙哉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602374042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214371,"ip_address":""},"score":311491,"extra":""}]},{"author":{"id":2054910,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5a/fe/3fada2bb.jpg","nickname":"permit","note":"","ucode":"081DE5CA35C98A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415259,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637040290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65004,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1548998076,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"134692984252","product_id":100023201,"comment_content":"如果说运行时还是基于prototype的，那是不是可以理解为class其实是个语法糖，它最终还是被翻译成功prototype形式来执行？或者说prototype形式写的代码执行起来更高效。","like_count":31,"discussions":[{"author":{"id":2632198,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/06/da417908.jpg","nickname":"清风月明","note":"","ucode":"54C98300A9F4DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413639,"discussion_content":"用babel编辑后，其实还是咱们原来的那种写法，语法糖语法糖就是一层外衣，里面核心是没有变得，winter也说了，运行时是没有改变的，还是原理的样子，但是带来的改变是前端写法的改变和对一个事物思维的改变","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636532367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1750628,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUaOs097vUd4wh5GCqnPkHM6oR2TMIOI0xQEooL2EH6DpzdjsQbyRhsJuD0AyG3QkFcWq5icZlgmA/132","nickname":"rl58xz","note":"","ucode":"3409114D447098","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274271,"discussion_content":"是语法糖，但是既然原生支持这种关键字，那么引擎实现这种语法糖肯定比我们模拟更为高效。但是引擎实现是黑盒的，肯定不如自己实现更能清楚地知道它运行的实际情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590560336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898195,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f6/d3/ed7e9d0b.jpg","nickname":"埃尼阿克","note":"","ucode":"528E340B3131BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212882,"discussion_content":"Class的本质就是function","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585028267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295806,"discussion_content":"你使用babel把es6的语法转译为es3看看，可能就清楚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596350978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64821,"user_name":"拾迹","can_delete":false,"product_type":"c1","uid":1025093,"ip_address":"","ucode":"38F367B77FF2D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","comment_is_top":false,"comment_ctime":1548918884,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"65973428324","product_id":100023201,"comment_content":"老师对贺老反对&#39;class fileds&#39;持什么看法？虽然听了两次贺老的演讲，仍然还是有点没搞明白。链接：https:&#47;&#47;github.com&#47;hax&#47;js-class-fields-chinese-discussion","like_count":15},{"had_liked":false,"id":113463,"user_name":"zj坚果","can_delete":false,"product_type":"c1","uid":1070601,"ip_address":"","ucode":"D6E787FF032D7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/09/4a9d4a35.jpg","comment_is_top":false,"comment_ctime":1563023158,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"40217728822","product_id":100023201,"comment_content":"看完这一章的内容，忍不住想推荐Michael S.Mikowski和Josh C. Powell 的《单页Web应用-JavaScript从前端到后端》，这里面的第二章就是专门介绍 JavaScript 基础的，其中就有对基于原型和基于类的两种方式进行比较，个人觉得讲得听清楚的。","like_count":9,"discussions":[{"author":{"id":1232601,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ce/d9/e6c2e0d1.jpg","nickname":"零启拾落","note":"","ucode":"58EA1063A9F383","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296013,"discussion_content":"附议，现在来看感觉是全书最有价值的一章","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596426971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1070601,"avatar":"https://static001.geekbang.org/account/avatar/00/10/56/09/4a9d4a35.jpg","nickname":"zj坚果","note":"","ucode":"D6E787FF032D7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1232601,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ce/d9/e6c2e0d1.jpg","nickname":"零启拾落","note":"","ucode":"58EA1063A9F383","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313317,"discussion_content":"是哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603030709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296013,"ip_address":""},"score":313317,"extra":""}]},{"author":{"id":1202896,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/d0/5be738e0.jpg","nickname":"jin","note":"","ucode":"DCA0E9C1F7838F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562708,"discussion_content":"谢谢建议，看了，好看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649864103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037324,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d4/0c/0d531ef0.jpg","nickname":"Leo","note":"","ucode":"778EF6B49AE4A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548749,"discussion_content":"听了你的建议看了，确实清楚，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643355618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64729,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1548893640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35908632008","product_id":100023201,"comment_content":"讲得很好，今天是不是因为放假了，人好像有点少...平时写代码，基本上没写过class，都是function，体积大了就拆成小的...可能还是没遇到复杂的场景吧...而且vue等框架本身就解决了一定的复杂度","like_count":8},{"had_liked":false,"id":89359,"user_name":"Jasmin","can_delete":false,"product_type":"c1","uid":1450881,"ip_address":"","ucode":"A2F7ED99146A1B","user_header":"","comment_is_top":false,"comment_ctime":1556158766,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31620929838","product_id":100023201,"comment_content":"java工程师转过来的前端 很容易理解class extends 相反 基于原型的继承 function神马的 一直不能很好的理解....","like_count":7,"discussions":[{"author":{"id":1054238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/16/1e/96441651.jpg","nickname":"tison","note":"","ucode":"56F3AC56B6434F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271382,"discussion_content":"感觉用先从function去理解，才能更好的知道运行时的执行原理，感觉class实际上是个语法糖，当时一直从java的类的角度来理解，死活不知道基于原型是啥","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590125359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1679587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a0/e3/5fcb8f13.jpg","nickname":"米老鼠","note":"","ucode":"0A832475572F2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22467,"discussion_content":"我也是跟你一样的想法，js的学习快成为我的阻塞了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569642550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66797,"user_name":"羲","can_delete":false,"product_type":"c1","uid":1102306,"ip_address":"","ucode":"934DB3496C61F5","user_header":"","comment_is_top":false,"comment_ctime":1550022862,"is_pvip":false,"replies":[{"id":"23828","content":"我比较支持这个做法，尽早使用新语法，可以享受它们带来的好处，也可以让团队始终保持技术领先。<br><br>当然了，少数情况下，没法完美翻译，我就不建议急着用了。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550142988,"ip_address":"","comment_id":66797,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31614793934","product_id":100023201,"comment_content":"winter老师，有一些浏览器对es6语法部分不兼容，一般开发中依旧用新的es6语法，然后找插件转换成浏览器支持的语法，想问下，你对这种做法怎么看？这样做是不是有点兜圈子了，直接用旧语法也可以写，但又有些想尝试用新的语法","like_count":7,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438915,"discussion_content":"我比较支持这个做法，尽早使用新语法，可以享受它们带来的好处，也可以让团队始终保持技术领先。\n\n当然了，少数情况下，没法完美翻译，我就不建议急着用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550142988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97962,"user_name":"焦糖大瓜子","can_delete":false,"product_type":"c1","uid":1378319,"ip_address":"","ucode":"03E6DA621DFD5F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxhkqxtWKQeYrYlVYphlicHXW5KmHAvibx6hmice4NTvmn60ZEfTpLp3480umVEquqPdMfwOnecj6Aw/132","comment_is_top":false,"comment_ctime":1558854889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27328658665","product_id":100023201,"comment_content":"私有属性prototype与私有字段 [[prototype]] 的如何区分?<br>","like_count":6},{"had_liked":false,"id":68509,"user_name":"胡永","can_delete":false,"product_type":"c1","uid":1200543,"ip_address":"","ucode":"6C8BA1E0BED9C0","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/9f/1840385e.jpg","comment_is_top":false,"comment_ctime":1550536471,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27320340247","product_id":100023201,"comment_content":"这篇文章读一遍有一遍新的体会，厉害了","like_count":6,"discussions":[{"author":{"id":1160192,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b4/00/661fb98d.jpg","nickname":"追忆似水年华","note":"","ucode":"C1D7C0DD7E7411","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305056,"discussion_content":"看见了熟悉的面孔，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599750885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64854,"user_name":"Rickyshin","can_delete":false,"product_type":"c1","uid":1384785,"ip_address":"","ucode":"160B052A4B2718","user_header":"https://static001.geekbang.org/account/avatar/00/15/21/51/12568118.jpg","comment_is_top":false,"comment_ctime":1548925020,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"27318728796","product_id":100023201,"comment_content":"平时用react的话，class还是比较多的，那么想问一下，现在的react不推荐写constructer，而是推荐使用箭头函数直接写方法，是不是constructer会在未来变的不是那么重要呢","like_count":6,"discussions":[{"author":{"id":1390464,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/80/fad2b8be.jpg","nickname":"张琦","note":"","ucode":"D5FCBF51A94AB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2384,"discussion_content":"不对，react推荐用纯函数是基于性能考虑的，和构造函数重不重要没有直接关系。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1563529254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170443,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dc/0b/0baff83d.jpg","nickname":"拒绝第十七次🤤","note":"","ucode":"B75CE9C1D29D30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79901,"discussion_content":"构造函数在类定义，初始化角度上是必要的，并不是说react不用，就没有用，比如继承的时候，没有构造函数，无法通过super将值传递给父类","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576121532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/e4/fb47bfcd.jpg","nickname":"dellyoung","note":"","ucode":"3672FF1D1F8EFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7954,"discussion_content":"不考虑hooks，通过class来定义react组件的话，constructer是重要的一部分，因为在react17.X版本中，官网不再推荐使用componentWillMount生命周期，因为constructer完全可以替代componentWillMount","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567739449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085109,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d0/f5/87986d27.jpg","nickname":"王仁文","note":"","ucode":"2A89FC29BCE59E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298542,"discussion_content":"纯函数组件也叫无状态组件，虽然写起来很简洁，但也去掉了生命周期的钩子方法，这样一是为了性能，二是减少冗余代码编写量。但在一些复杂的组件逻辑里，还是需要传统方式构造组件的，只能说看使用场景吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597322058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647604,"avatar":"https://static001.geekbang.org/account/avatar/00/19/23/f4/95ae3dda.jpg","nickname":"Chousen","note":"","ucode":"F6E7B26F9A0544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567369,"discussion_content":"箭头函数不是方便你绑定this么。不是箭头函数，你结构的时候会丢失this","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650896650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67313,"user_name":"雪中抱猪行","can_delete":false,"product_type":"c1","uid":1381769,"ip_address":"","ucode":"DA83B6F6E22B68","user_header":"https://static001.geekbang.org/account/avatar/00/15/15/89/84e6495d.jpg","comment_is_top":false,"comment_ctime":1550128660,"is_pvip":false,"replies":[{"id":"23839","content":"我持反对观点。<br><br>这个$的问题不仅仅在于兼具了三种角色，而且还把若干种毫不相干的功能放到了一个函数上，这几乎完全违反了程序设计的基本原则。<br><br>因此这个东西几乎已经完全脱离了几十年间计算机编程发展的理论支持，这样的设计注定了没法编写复杂应用。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550148121,"ip_address":"","comment_id":67313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23024965140","product_id":100023201,"comment_content":"JQ的‘$’兼具，对象，类(构造函数)，函数三种角色。老师多这种用法持什么观点。","like_count":5,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439140,"discussion_content":"我持反对观点。\n\n这个$的问题不仅仅在于兼具了三种角色，而且还把若干种毫不相干的功能放到了一个函数上，这几乎完全违反了程序设计的基本原则。\n\n因此这个东西几乎已经完全脱离了几十年间计算机编程发展的理论支持，这样的设计注定了没法编写复杂应用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550148121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65217,"user_name":"辉子","can_delete":false,"product_type":"c1","uid":1162768,"ip_address":"","ucode":"C351ABEDC66B19","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/10/ef6fe900.jpg","comment_is_top":false,"comment_ctime":1549117067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23023953547","product_id":100023201,"comment_content":"所以为什么typescript火起来了，是ES6的超集，也对Java后端开发者更友好了。","like_count":5},{"had_liked":false,"id":78045,"user_name":"王小宏music","can_delete":false,"product_type":"c1","uid":1378199,"ip_address":"","ucode":"4A892415C41291","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/97/68388d28.jpg","comment_is_top":false,"comment_ctime":1553061629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18732930813","product_id":100023201,"comment_content":"有些东西，真的是，工作好几年可能都摸不透的，高手跟大牛之间，差距就是在于理解的通透性！ ","like_count":4,"discussions":[{"author":{"id":1375156,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fb/b4/afbaab2f.jpg","nickname":"徐三响","note":"","ucode":"6B30D451EBD60D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83988,"discussion_content":"还有实战和场景落地，理论和实战是相辅相成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576478624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65176,"user_name":"dearfat","can_delete":false,"product_type":"c1","uid":1140882,"ip_address":"","ucode":"81840E1C5BE897","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/92/a8d58030.jpg","comment_is_top":false,"comment_ctime":1549089225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18728958409","product_id":100023201,"comment_content":"感谢winter，总之就是通透，这个境界太难了","like_count":4},{"had_liked":false,"id":64746,"user_name":"lt-零度","can_delete":false,"product_type":"c1","uid":1381146,"ip_address":"","ucode":"BDDA09BF0B2E32","user_header":"https://static001.geekbang.org/account/avatar/00/15/13/1a/b725629b.jpg","comment_is_top":false,"comment_ctime":1548899020,"is_pvip":false,"replies":[{"id":"22902","content":"别伤心，给你安排","user_name":"编辑回复","user_name_real":"马越","uid":"1003953","ctime":1548899263,"ip_address":"","comment_id":64746,"utype":2}],"discussion_count":1,"race_medal":0,"score":"18728768204","product_id":100023201,"comment_content":"老师，我的留言都没回复过我，伤心","like_count":4,"discussions":[{"author":{"id":1003953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/51/b1/7d6879dc.jpg","nickname":"未设置","note":"","ucode":"9DFC368CA29EDC","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438158,"discussion_content":"别伤心，给你安排","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548899263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66586,"user_name":"study","can_delete":false,"product_type":"c1","uid":1378133,"ip_address":"","ucode":"078517D3EF2413","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIEODRricvc32UpO3PxoPrFBDgmoGXdiagcibNh0outmZicXFg1icV4c5ibSknc4be3PWUPsIa3OjdMmlwA/132","comment_is_top":false,"comment_ctime":1549962945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14434864833","product_id":100023201,"comment_content":"组合使用构造函数模式和原型模式应该可以模拟class。具体来说就是，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。<br>function Person(name){<br>  this.name = name;<br>  this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];<br>}<br>Person.prototype = {<br>  constructor : Person,<br>  sayName : function(){}<br>}","like_count":3},{"had_liked":false,"id":64986,"user_name":"米斯特菠萝","can_delete":false,"product_type":"c1","uid":1259824,"ip_address":"","ucode":"8AFB7F59F9014A","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/30/f7df6ba7.jpg","comment_is_top":false,"comment_ctime":1548992025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14433893913","product_id":100023201,"comment_content":"写class多，抽象化以后，用class 看着更规整得多，易读性也更好<br><br>给微信小程序写的第一个拖拽排序的插件就是class写的，new Sortable就完事了","like_count":3},{"had_liked":false,"id":64831,"user_name":"37°C^boy","can_delete":false,"product_type":"c1","uid":1377346,"ip_address":"","ucode":"2194633443AED6","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/42/c0be8d43.jpg","comment_is_top":false,"comment_ctime":1548920571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14433822459","product_id":100023201,"comment_content":"mvvm，class<br>utils ， function","like_count":3},{"had_liked":false,"id":64763,"user_name":"石","can_delete":false,"product_type":"c1","uid":1374490,"ip_address":"","ucode":"432D0DE1E4DD7A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/1a/60707b32.jpg","comment_is_top":false,"comment_ctime":1548902356,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14433804244","product_id":100023201,"comment_content":"let和var的应用场景区分，老师可以提炼下本质吗，各位朋友平时let用的多吗","like_count":3,"discussions":[{"author":{"id":1156074,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","nickname":"HoSalt","note":"","ucode":"610B03E2A002D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231835,"discussion_content":"var 只适合在控制台写","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586831222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647604,"avatar":"https://static001.geekbang.org/account/avatar/00/19/23/f4/95ae3dda.jpg","nickname":"Chousen","note":"","ucode":"F6E7B26F9A0544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567372,"discussion_content":"一般定义变量脑子不过先用const，需要变更编辑器会提示就用let","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650896888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2515456,"avatar":"","nickname":"Geek_beeaa2","note":"","ucode":"69E64DBB674C79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356519,"discussion_content":"我来公司，组长第一次开会就只说了一句话，只准用let,const，不许用var,谁用骂谁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615615896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237786,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e3/1a/7d571c39.jpg","nickname":"LiuJY","note":"","ucode":"EE5176AD2C23BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110873,"discussion_content":"不是说 直接用let代替 var就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577761676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1381834,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epLdWbztjssWulaNnFTaC4lJd12vZZgsz5cROnFrERY8YlBA4dW3QGHd6wU8HgC6IPwnIFcTo1lgA/132","nickname":"gresen","note":"","ucode":"F050CE6ED526EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71994,"discussion_content":"一个是全局执行变量，一个是代码块，建议同学看一下js的执行环境和作用域。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575467791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64730,"user_name":"Scorpio","can_delete":false,"product_type":"c1","uid":1374652,"ip_address":"","ucode":"2DF4DEC831D4C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/bc/cbc0207b.jpg","comment_is_top":false,"comment_ctime":1548893715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14433795603","product_id":100023201,"comment_content":"很早就开始使用class了，主要是我以前是写java的，用的习惯","like_count":3},{"had_liked":false,"id":125706,"user_name":"劳码识途","can_delete":false,"product_type":"c1","uid":1598564,"ip_address":"","ucode":"7AEF4D9407F097","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","comment_is_top":false,"comment_ctime":1566229088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10156163680","product_id":100023201,"comment_content":"文中在讲解new 运算符的执行过程的时候说道：`将 this 和调用参数传给构造器，执行`；<br>是不是应该是将以构造器的 prototype 属性创建的对象作为this传递给构造器进行执行？<br>","like_count":2},{"had_liked":false,"id":66074,"user_name":"让时间说真话","can_delete":false,"product_type":"c1","uid":1387656,"ip_address":"","ucode":"5C86450864189F","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/88/2a7fe1a9.jpg","comment_is_top":false,"comment_ctime":1549870837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139805429","product_id":100023201,"comment_content":"在es6里面使用class，extends关键字实现面向对象编程，使开发者更容易理解类的继承。本篇从es5之前版本讲起过度到es6总体逻辑很清楚。","like_count":2},{"had_liked":false,"id":257156,"user_name":"东坡芝士","can_delete":false,"product_type":"c1","uid":1997806,"ip_address":"","ucode":"FF267B7E865AD2","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7b/ee/53124b75.jpg","comment_is_top":false,"comment_ctime":1603866827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898834123","product_id":100023201,"comment_content":"extends是扩展的意思，主流上是用来扩展类的属性方法等。JS用它来表示继承，这好容易弄混了","like_count":1},{"had_liked":false,"id":241321,"user_name":"benjen","can_delete":false,"product_type":"c1","uid":1622988,"ip_address":"","ucode":"929A339619118D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Z33ehvC6SVWZBbcxjiaKDdJuTUDia8FNicTLuqS8FdMdDEreKR5OTlvDa1uOuB0ibOKoKuHXEVDTJwX0bMoB42pRJA/132","comment_is_top":false,"comment_ctime":1597246237,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892213533","product_id":100023201,"comment_content":"看了这篇文章之后觉得脑子里都搅到了一起，随即去MDN又去找JavaScript中的原型去看看更基础的描述，突然发现有一段写的特别好，其中写道，<br><br>就像上面看到的, doSomeInstancing 的 __proto__ 属性就是doSomething.prototype. 但是这又有什么用呢? 好吧,当你访问 doSomeInstancing 的一个属性, 浏览器首先查找 doSomeInstancing 是否有这个属性. 如果 doSomeInstancing 没有这个属性, 然后浏览器就会在 doSomeInstancing 的 __proto__ 中查找这个属性(也就是 doSomething.prototype). 如果 doSomeInstancing 的 __proto__ 有这个属性, 那么 doSomeInstancing 的 __proto__ 上的这个属性就会被使用. 否则, 如果 doSomeInstancing 的 __proto__ 没有这个属性, 浏览器就会去查找 doSomeInstancing 的 __proto__ 的 __proto__ ，看它是否有这个属性. 默认情况下, 所有函数的原型属性的 __proto__ 就是 window.Object.prototype. 所以 doSomeInstancing 的 __proto__ 的 __proto__ (也就是 doSomething.prototype 的 __proto__ (也就是 Object.prototype)) 会被查找是否有这个属性. 如果没有在它里面找到这个属性, 然后就会在 doSomeInstancing 的 __proto__ 的 __proto__ 的 __proto__ 里面查找. 然而这有一个问题: doSomeInstancing 的 __proto__ 的 __proto__ 的 __proto__ 不存在. 最后, 原型链上面的所有的 __proto__ 都被找完了, 浏览器所有已经声明了的 __proto__ 上都不存在这个属性，然后就得出结论，这个属性是 undefined.<br><br>有兴趣或者和我一样蒙圈的朋友可以去翻翻。加深一下印象。<br>https:&#47;&#47;developer.mozilla.org&#47;zh-CN&#47;docs&#47;Learn&#47;JavaScript&#47;Objects&#47;Object_prototypes","like_count":1,"discussions":[{"author":{"id":2029706,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f8/8a/f7e7fd54.jpg","nickname":"君自兰芳","note":"","ucode":"780F3AFEEB9B73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329385,"discussion_content":"这就是，中国新说唱","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606376875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195500,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1644811,"ip_address":"","ucode":"16D61FB3591234","user_header":"https://static001.geekbang.org/account/avatar/00/19/19/0b/13329677.jpg","comment_is_top":false,"comment_ctime":1585191575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880158871","product_id":100023201,"comment_content":"老师是猫奴叭，基本都是猫猫的图","like_count":1},{"had_liked":false,"id":188984,"user_name":"Geek_666","can_delete":false,"product_type":"c1","uid":1580314,"ip_address":"","ucode":"C9882F35C0ACF5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqYLIk6CAiaQQN9NVQUFuWyMz5ZsEvLcbWgibXSBXPiaYrqpggVgIRHMtoa8qCmoe4oSvico6sriaT4iaMg/132","comment_is_top":false,"comment_ctime":1584441801,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"5879409097","product_id":100023201,"comment_content":"能解释一下为什么 Function.__proto__ === Function.prototype 结果是true吗?","like_count":1,"discussions":[{"author":{"id":1701925,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5zYwcmyicWJYl9ztB5picuicoXKjgial4oU4TRggOLHg3TWoGjVTMxSCKdEDCYIv9HNua8CdXY0gRxXA/132","nickname":"王益","note":"","ucode":"AE11A048B69A73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271378,"discussion_content":"哈哈，终于有人问这个了，我也疑惑过，其实不用想太复杂，就记住“对象的原型指向其构造函数的 prototype 属性”。Function 是一个函数，函数也是一个对象，只是这个函数“恰好”本身就是构造函数而已，解释通了。至于底层怎么实现的，不深究了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590124830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378535,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","nickname":"拿来吧","note":"","ucode":"7F4B64285D2AA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369831,"discussion_content":"Object.create 创造出来的对象的__proto__指向传的参数\nnew fn() 创建出来的对象的__proto__指向fn.proto\n\nfunction human () {}\nman = new human()\nwoman = Object.create(human)\nman.__proto__.constructor === woman.__proto__ // true\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619168504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2101638,"avatar":"","nickname":"Geek_5335a6","note":"","ucode":"AB753389E79858","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299106,"discussion_content":"__proto__和[prototype]都是指向父级的原型对象，js中所有原型都是基于object的，所以Function.__proto__和Function.prototype最终都会指向object。其中object的原型会指向Function,Function的原型为Null","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597565816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2030688,"avatar":"","nickname":"guibw","note":"","ucode":"35EF1AD61C8B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281651,"discussion_content":"Number.__proto__ === Function.prototype; //true\nNumber.__proto__.__proto__ === Object.prototype; //true\nString.__proto__ === Function.prototype; //true\nString.__proto__.__proto__ === Object.prototype; //true\nObject.__proto__ === Function.prototype; //true\nObject.__proto__.__proto__ === Object.prototype; //true\nFunction.__proto__ === Function.prototype; //true\nFunction.__proto__.__proto__ === Object.prototype; //true\nSymbol.__proto__ === Function.prototype; //true\nSymbol.__proto__.__proto__ === Object.prototype; //true\n\n上面调用的这些构造方法都是继承于 Function，js 里只要是调用的函数，应该都是继承于Function，调用Function本身也是。而Function继承于Object；\n感觉这就像js维护的一个统一的范式；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591785180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071909,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/25/d78cc1fe.jpg","nickname":"都市夜归人","note":"","ucode":"DFF59BE3D80B42","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275040,"discussion_content":"感觉像指针的指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590652202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156074,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","nickname":"HoSalt","note":"","ucode":"610B03E2A002D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231838,"discussion_content":"应该初始化的时候完成的吧，一种规定，Function 本身就是一种 function\nFunction.__proto__ === Function.prototype // true\n\nfunction a () {}\n\na.__proto__ === Function.prototype // true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586831399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162586,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1576560697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871527993","product_id":100023201,"comment_content":"现在基本上都是使用ES6语法，使用class来实现类；function来改造成类其实也很简单，构造函数即为类名，this操作即constructor里面的操作，prototype扩展方法即class里面的方法。继承用extends。","like_count":1},{"had_liked":false,"id":156237,"user_name":"💢Hennessey•Wu✨","can_delete":false,"product_type":"c1","uid":1381667,"ip_address":"","ucode":"B087D9E6B3614B","user_header":"https://static001.geekbang.org/account/avatar/00/15/15/23/9dca55cf.jpg","comment_is_top":false,"comment_ctime":1574841045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869808341","product_id":100023201,"comment_content":"据我了解，很多公司面试都需要了解es6之前如何实现模拟类的","like_count":1},{"had_liked":false,"id":146860,"user_name":"流花","can_delete":false,"product_type":"c1","uid":1607721,"ip_address":"","ucode":"E1B3C07536BB05","user_header":"https://static001.geekbang.org/account/avatar/00/18/88/29/90d9ba80.jpg","comment_is_top":false,"comment_ctime":1572679740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867647036","product_id":100023201,"comment_content":"读一遍有一遍的理解。。。。","like_count":1},{"had_liked":false,"id":69471,"user_name":"凌烟阁里君臣义","can_delete":false,"product_type":"c1","uid":1032414,"ip_address":"","ucode":"9AA82D3A361828","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/de/f5b0a0f9.jpg","comment_is_top":false,"comment_ctime":1550752535,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5845719831","product_id":100023201,"comment_content":"如果所有对象都有私有字段 [[prototype]]，就是对象的原型。<br>这句话具体怎么理解呢？对象私有字段[[prototype]]指向原型？","like_count":1,"discussions":[{"author":{"id":2030688,"avatar":"","nickname":"guibw","note":"","ucode":"35EF1AD61C8B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281724,"discussion_content":"我理解就是 __proto__，不过以前浏览器没有暴露[[prototype]]，Mozilla 通过这个字段把 [[prototype]] 暴露出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591798036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67213,"user_name":"宋文杰","can_delete":false,"product_type":"c1","uid":1034773,"ip_address":"","ucode":"2F5425B179F471","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ca/15/e3f9fb4e.jpg","comment_is_top":false,"comment_ctime":1550111691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845078987","product_id":100023201,"comment_content":"谢谢老师  写的真棒  深入浅出  收获很大","like_count":1},{"had_liked":false,"id":64749,"user_name":"signilisnce","can_delete":false,"product_type":"c1","uid":1380278,"ip_address":"","ucode":"8A9F9244C1A4CE","user_header":"https://static001.geekbang.org/account/avatar/00/15/0f/b6/e3f2fd49.jpg","comment_is_top":false,"comment_ctime":1548899540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5843866836","product_id":100023201,"comment_content":"class和function都写过，class更有面向对象的风格，写起来很爽，看代码也比较清晰。function更多是在写函数式编程风格的项目时写。两种风格各有各的好处吧，主要看个人与团队风格","like_count":1},{"had_liked":false,"id":360246,"user_name":"katalya","can_delete":false,"product_type":"c1","uid":1367464,"ip_address":"广东","ucode":"CCD1FE6C4F8C1E","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/a8/a2c910b6.jpg","comment_is_top":false,"comment_ctime":1666335353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666335353","product_id":100023201,"comment_content":"这个作为教学类的文章，是很不负责任的文章，晦涩难懂，并不高级。","like_count":0},{"had_liked":false,"id":347884,"user_name":"heytoo","can_delete":false,"product_type":"c1","uid":1374277,"ip_address":"","ucode":"2FA916EB3E8B50","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/45/3753456c.jpg","comment_is_top":false,"comment_ctime":1654537774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654537774","product_id":100023201,"comment_content":"开始二刷<br>这次带着问题来学习<br>希望又更多的收获","like_count":0},{"had_liked":false,"id":341527,"user_name":"news","can_delete":false,"product_type":"c1","uid":2541940,"ip_address":"","ucode":"6F7D5D421244D0","user_header":"https://static001.geekbang.org/account/avatar/00/26/c9/74/1eb4cfe2.jpg","comment_is_top":false,"comment_ctime":1649676828,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649676828","product_id":100023201,"comment_content":"js对象继承两种方式实现模拟类和原型","like_count":0},{"had_liked":false,"id":337033,"user_name":"周胜","can_delete":false,"product_type":"c1","uid":1974266,"ip_address":"","ucode":"BAE27CC6F67BB9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erw3icVIkgTwYx5H9gwOSHdVibjxvzrmSe8G3Cg7kOicjibkHaDeibkntE4kdhibj4KHM0zCzM07YlbbteA/132","comment_is_top":false,"comment_ctime":1646559840,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646559840","product_id":100023201,"comment_content":"基于类的面向对象和基于原型的面向对象都实现了对对象的抽象和复用，JavaScript是基于原型的模拟实现的，因此ES6中新增了Class，弥补了这一缺陷，统一了社区方案，区分Class和Function的含义，也是目前官方推荐的写法。<br>另外，new关键字创建对象做了以下几点事<br>1、创建一个新对象，将对象的原型指针指向构造函数的原型<br>2、执行构造函数，将this指向新对象<br>3、返回新对象","like_count":0},{"had_liked":false,"id":310448,"user_name":"Geek_9302f6","can_delete":false,"product_type":"c1","uid":2020837,"ip_address":"","ucode":"66B1CE6B4BB369","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKXNF8pWkXiadPr9oLdiaE1zfcYjTGxmZ2nJbDyf1RYunaApy26daxACLJPyOLwp7OcjG0SdoFd9nWA/132","comment_is_top":false,"comment_ctime":1630657502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630657502","product_id":100023201,"comment_content":"感觉有点笼统，我去额外看了好多__proto__  prototype  constructor 再来看这个，还是一头雾水。还有symbol 完全不知道说了个啥。 这是进阶 还是重学啊。。学不会啊。。","like_count":0},{"had_liked":false,"id":309218,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1629988604,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1629988604","product_id":100023201,"comment_content":"<br>日常工作中，都是直接 import 或者 export 别人写好的模块，自己很少有机会去写一个类。那么这些模块是否也是一种类的形式呢？<br>","like_count":0,"discussions":[{"author":{"id":2632198,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/06/da417908.jpg","nickname":"清风月明","note":"","ucode":"54C98300A9F4DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413650,"discussion_content":"export的不一定是类啊，有可能进进是一个变量呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636534672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305885,"user_name":"Geek_216fd5","can_delete":false,"product_type":"c1","uid":1602049,"ip_address":"","ucode":"EA6804E9E974B3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLb5UK2u6RyS48ia8H2lUSlUyQEaBiclDlqpbQUWqTWeuf3Djl3ruHRN3U37GXYuWAfAW5d1xkm6F7w/132","comment_is_top":false,"comment_ctime":1628218259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628218259","product_id":100023201,"comment_content":"因为先学习的 java ，所以习惯使用 class 来定义类。感觉有了 class，使用 javascript 终于符合我的思维逻辑了，原来的 new function() 的方式感觉思维上太反人类了。<br><br>关于如何把使用 function 定义类的代码改造到 class 的新语法，我感觉只要按照Java对于属性和方法的定义把原来 function 里面的属性和方法区分开来直接放到 class 里就行了","like_count":0},{"had_liked":false,"id":298956,"user_name":"默默且听风","can_delete":false,"product_type":"c1","uid":2539346,"ip_address":"","ucode":"105E5FD2429AE3","user_header":"https://static001.geekbang.org/account/avatar/00/26/bf/52/59304c42.jpg","comment_is_top":false,"comment_ctime":1624408261,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624408261","product_id":100023201,"comment_content":"之前从网上抄的请求拦截，我都调不明白。于是我就想到了我自己封装一个全局的类，然后在每一个用到的地方new一个😂","like_count":0},{"had_liked":false,"id":298248,"user_name":"路人丁","can_delete":false,"product_type":"c1","uid":1640477,"ip_address":"","ucode":"078F0235DAFCA5","user_header":"https://static001.geekbang.org/account/avatar/00/19/08/1d/30b32c93.jpg","comment_is_top":false,"comment_ctime":1623981187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623981187","product_id":100023201,"comment_content":"看看评论，就知道 js 的原始设计是有问题的，一个能简单方式解决的问题，非要复杂化解决。孔乙己还会茴字的四种写法，多牛逼！虽然不想承认，但是默默的改变自己。","like_count":0},{"had_liked":false,"id":294759,"user_name":"可颂","can_delete":false,"product_type":"c1","uid":2444532,"ip_address":"","ucode":"1C930AB9EA5DBE","user_header":"https://static001.geekbang.org/account/avatar/00/25/4c/f4/77a7ee43.jpg","comment_is_top":false,"comment_ctime":1622082948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622082948","product_id":100023201,"comment_content":"反复听winter老师讲，代码一句一句的读还是能理清楚，但是在实际项目中我总用不上，可能自己还是没真正理解到","like_count":0},{"had_liked":false,"id":289766,"user_name":"拿来吧","can_delete":false,"product_type":"c1","uid":2378535,"ip_address":"","ucode":"7F4B64285D2AA5","user_header":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","comment_is_top":false,"comment_ctime":1619169110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619169110","product_id":100023201,"comment_content":"大佬都比较关注技术的发展流程、趋势<br>也正是这种追本求源的态度才能达到一定的高度<br><br>这种态度我得学 但不适合现在的我 我原理都不是太懂<br>就我而言 开发人的状态有三个大的阶段 写业务 抓原理 关注技术的发展历程对发展趋势有自己的判断<br><br>当然这不适合别人 不管是学习还是工作我遇到过优秀的人 他们都是极其自律 这三个阶段他们或许时同时抓的<br>而我极其懒散 所以水平有限 水平有限所以急需提升自己做一个合格的前端开发 急需提升所以只侧重一点","like_count":0},{"had_liked":false,"id":289762,"user_name":"拿来吧","can_delete":false,"product_type":"c1","uid":2378535,"ip_address":"","ucode":"7F4B64285D2AA5","user_header":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","comment_is_top":false,"comment_ctime":1619168548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619168548","product_id":100023201,"comment_content":"Object.create 创建出来的对象的__proto__指向传的参数<br>new fn() 创建出来的对象的__proto__指向fn.proto<br><br>function human () {}<br>man = new human()<br>woman = Object.create(human)<br>man.__proto__.constructor === woman.__proto__ &#47;&#47; true<br>","like_count":0},{"had_liked":false,"id":289753,"user_name":"拿来吧","can_delete":false,"product_type":"c1","uid":2378535,"ip_address":"","ucode":"7F4B64285D2AA5","user_header":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","comment_is_top":false,"comment_ctime":1619166248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619166248","product_id":100023201,"comment_content":"new Number和new Number() 是否有区别, <br>是new操作符做了什么让不加()也能执行函数  是在执行Number内部的代码 给新对象添加属性 这一步本身就是会执行函数吗<br>还是代码执行会自动补全","like_count":0},{"had_liked":false,"id":280731,"user_name":"伊宇落","can_delete":false,"product_type":"c1","uid":1673505,"ip_address":"","ucode":"EEF0A916EC50F1","user_header":"https://static001.geekbang.org/account/avatar/00/19/89/21/a50cbcf7.jpg","comment_is_top":false,"comment_ctime":1614328998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614328998","product_id":100023201,"comment_content":"听了几节老师的课后，我个人觉得老师的用语有时候太过书面语导致我听不懂是什么意思，边听边去百度一些名词，是只有我一个人这样觉得吗？","like_count":0},{"had_liked":false,"id":280729,"user_name":"伊宇落","can_delete":false,"product_type":"c1","uid":1673505,"ip_address":"","ucode":"EEF0A916EC50F1","user_header":"https://static001.geekbang.org/account/avatar/00/19/89/21/a50cbcf7.jpg","comment_is_top":false,"comment_ctime":1614328759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614328759","product_id":100023201,"comment_content":"感觉自己这些年工作都还是只是表面，这些东西我竟然都是第一次听到","like_count":0},{"had_liked":false,"id":272050,"user_name":"Geek_216d30","can_delete":false,"product_type":"c1","uid":2285727,"ip_address":"","ucode":"7156013D072ED8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ACyukd6bJzibZvicbqN4y5yLic0gV2ibwicLqvGiaqob5RlNpdSL4CIa6icD5fZCoDjLRxShE7oknBxg0VlYiceeicbYYrw/132","comment_is_top":false,"comment_ctime":1609917899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609917899","product_id":100023201,"comment_content":"不管怎么说，JavaScript总算是把函数和对象分开了，让程序清晰了不少。","like_count":0},{"had_liked":false,"id":267147,"user_name":"Geek_e6f5a9","can_delete":false,"product_type":"c1","uid":2360854,"ip_address":"","ucode":"028C9559ACC63D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BWDhMILusuficY2zo10KiaetDPjW08aBJ5sn7cLy2VV91hicacriaibDoqDAexLc0Mr4fnwpbllOLZ0BEFib3tic5WtHA/132","comment_is_top":false,"comment_ctime":1607608616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607608616","product_id":100023201,"comment_content":"工作中基本没怎么用到过js面向对象的知识，只从MDN和红宝书上了解到js采用的继承机制是寄生式组合继承（或者说原型链继承，也就是“new 构造器函数”的实现原理），这个和基于class的继承不同之处个人认为主要是原型链继承不会拷贝父对象而是通过prototype直接访问父对象，而基于class的继承会对父类的属性和方法进行拷贝。在JS中使用ES6语法采用class和extends的书写方式方便对基于class继承比较熟悉的学习者的理解和使用，以后我也会尽量采用这种方式","like_count":0},{"had_liked":false,"id":263957,"user_name":"arronK","can_delete":false,"product_type":"c1","uid":1192961,"ip_address":"","ucode":"58DC6FBF2CF0C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/01/30ca98e6.jpg","comment_is_top":false,"comment_ctime":1606303822,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1606303822","product_id":100023201,"comment_content":"我们真的需要模拟类么？<br>现在来说，已经不需要了。因为ES6已经提供了 Class 语法糖，用类的方式来对象更加明确和方便。不需要像以前一样，构造函数和函数混为一谈；需要自己去手动操作原型等等。<br>需要注意的是，class 底层的本质仍然是基于原型的","like_count":0,"discussions":[{"author":{"id":2515456,"avatar":"","nickname":"Geek_beeaa2","note":"","ucode":"69E64DBB674C79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356522,"discussion_content":"那我们直接说js是面向原型的语言多好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615616147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1192961,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/01/30ca98e6.jpg","nickname":"arronK","note":"","ucode":"58DC6FBF2CF0C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2515456,"avatar":"","nickname":"Geek_beeaa2","note":"","ucode":"69E64DBB674C79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357022,"discussion_content":"当初起名叫 javascript 是为了蹭java热度，面向对象也是要蹭个热度，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615727132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":356522,"ip_address":""},"score":357022,"extra":""}]}]},{"had_liked":false,"id":258906,"user_name":"River","can_delete":false,"product_type":"c1","uid":1610800,"ip_address":"","ucode":"214AD65EE2CB23","user_header":"https://static001.geekbang.org/account/avatar/00/18/94/30/1a95a1d8.jpg","comment_is_top":false,"comment_ctime":1604579055,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1604579055","product_id":100023201,"comment_content":"美洲狮就是划分的猫科啊，但是我还是觉得狮子像犬科多一些。","like_count":0},{"had_liked":false,"id":258406,"user_name":"安石","can_delete":false,"product_type":"c1","uid":1508755,"ip_address":"","ucode":"185AD0046CF1C2","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/93/3c3f2a6d.jpg","comment_is_top":false,"comment_ctime":1604414481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604414481","product_id":100023201,"comment_content":"-function 定义类的代码改造到 class 的新语法？<br>一般情况下,class比function更有优势，但是function的prototype可以分模块拓展,参考vue 2.0。<br>改造就粗略的改造，一一对应构造函数对应constructor","like_count":0},{"had_liked":false,"id":255746,"user_name":"Ace","can_delete":false,"product_type":"c1","uid":1564786,"ip_address":"","ucode":"C77191A6B18845","user_header":"https://static001.geekbang.org/account/avatar/00/17/e0/72/6e0314e7.jpg","comment_is_top":false,"comment_ctime":1603420902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603420902","product_id":100023201,"comment_content":"ES6 新增 class 特性语义化更好是好事，但是在理解了 js 的原型系统后还是觉得写函数的 prototype 更舒服，更清晰的知道发生了什么，也可能是写惯了函数一下子不习惯 class 吧。<br><br>最后还是面向版本编程啊，一切都是向新看齐。","like_count":0},{"had_liked":false,"id":255375,"user_name":"半橙汁","can_delete":false,"product_type":"c1","uid":1477902,"ip_address":"","ucode":"BB93BB9CCB7FA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","comment_is_top":false,"comment_ctime":1603332034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603332034","product_id":100023201,"comment_content":"没有一门后端语言的支撑，真的很难理解诸多思想。","like_count":0},{"had_liked":false,"id":254427,"user_name":"若如","can_delete":false,"product_type":"c1","uid":1069772,"ip_address":"","ucode":"315D1560046129","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/cc/15e57326.jpg","comment_is_top":false,"comment_ctime":1603115242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603115242","product_id":100023201,"comment_content":"对象都有私有字段[[prototype]] 和 __prop__ 还有函数的prototype 区别是什么？","like_count":0},{"had_liked":false,"id":237322,"user_name":"K","can_delete":false,"product_type":"c1","uid":1179273,"ip_address":"","ucode":"74A783491F6E95","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/89/ef7b5fe3.jpg","comment_is_top":false,"comment_ctime":1595779026,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595779026","product_id":100023201,"comment_content":"老师好，这段话的意思还是不太明白：“如果所有对象都有私有字段[[prototype]]，就是对象的原型。”<br>另外，这段“以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）”，prototype属性和[[prototype]]区别在哪个方面？","like_count":0},{"had_liked":false,"id":233425,"user_name":"独行者","can_delete":false,"product_type":"c1","uid":1154368,"ip_address":"","ucode":"14974895C6EFFD","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/40/3c193671.jpg","comment_is_top":false,"comment_ctime":1594312338,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594312338","product_id":100023201,"comment_content":"看基于原型的部分时, 在思考和 Objective-C 之间的差别: Objective-C 中查找方法也是在 NSObject 的继承链中查找;<br>能不能说现在的 ES6 在将&quot;基于原型&quot;淡化, 将他抹平在 运行时中, 在表皮中, 慢慢规范为&quot;基于类&quot;的方式.","like_count":0,"discussions":[{"author":{"id":2632198,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/06/da417908.jpg","nickname":"清风月明","note":"","ucode":"54C98300A9F4DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413658,"discussion_content":"我感觉你说的是对的，虽然class仅仅是个语法糖，但是对我们思考一个事物的方式已经改变了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636536206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230783,"user_name":"Mirror","can_delete":false,"product_type":"c1","uid":1395814,"ip_address":"","ucode":"DC2BB0778BA657","user_header":"https://static001.geekbang.org/account/avatar/00/15/4c/66/925c3289.jpg","comment_is_top":false,"comment_ctime":1593491372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593491372","product_id":100023201,"comment_content":"说一下理解，不对的地方同学们给指正下。 1. ES6之前，js中没有类的概念，习惯用类来抽象解决问题的同学常使用 new Function + Function.prototype={ ... }（构造函数）的方式来模拟类的实现。 2. ES6开始，官方正式有了 class extends super等关键字来支持基于类的编程。  3.不论是ES6之前的 new Function 还是ES6+ 的class 实质都是基于原型 [[prototype]] 来实现，因为在运行时对象的所有属性查找都是基于原型和原型链。","like_count":0},{"had_liked":false,"id":211457,"user_name":"李灵天","can_delete":false,"product_type":"c1","uid":1968886,"ip_address":"","ucode":"C67534EA902FB7","user_header":"","comment_is_top":false,"comment_ctime":1587967078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587967078","product_id":100023201,"comment_content":"理解对于面向对象来说，不管是类还是原型都不属于其规范。面向对象思想仅要求对象要有状态和行为，类与原型更多是工程提出来一种代码管理方案。使用类方案类型更加强，更不容易出错，使用原型方案类型更弱，代码可以更灵活。","like_count":0},{"had_liked":false,"id":205996,"user_name":"Yully","can_delete":false,"product_type":"c1","uid":1254946,"ip_address":"","ucode":"66034995A6282F","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/22/dd505e6d.jpg","comment_is_top":false,"comment_ctime":1586770567,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586770567","product_id":100023201,"comment_content":"因为技术栈是React，在之前的时候用class，但是现在已经过渡到了reactHook的写法即function定义类。主要的原因还是因为react官方的原因，react官方认为hook的写法更好。在工作中算是经历了从function定义类到class定义类，然后又从class定义类再回到function定义类<br>---------------------<br>把function定义类的代码改造到class的方式：把function中的参数抽象成class对象属性，function内部的函数改为class的function属性","like_count":0,"discussions":[{"author":{"id":2632198,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/06/da417908.jpg","nickname":"清风月明","note":"","ucode":"54C98300A9F4DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413665,"discussion_content":"我感觉得纠正个错误啊，现在的react hooks的函数式组件不是类吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636537962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200273,"user_name":"小玲子ida","can_delete":false,"product_type":"c1","uid":1177005,"ip_address":"","ucode":"A447EF847D375E","user_header":"https://static001.geekbang.org/account/avatar/00/11/f5/ad/2f7d5e50.jpg","comment_is_top":false,"comment_ctime":1585567319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585567319","product_id":100023201,"comment_content":"🈶️C#的经验，使用class定义类，可以说没多大差别了，也使用到了继承，就是原型概念比较难理解，需要回看几次","like_count":0},{"had_liked":false,"id":198750,"user_name":"Geek_fuwenzi","can_delete":false,"product_type":"c1","uid":1597580,"ip_address":"","ucode":"964D348EAEA909","user_header":"https://static001.geekbang.org/account/avatar/00/18/60/8c/00b865d9.jpg","comment_is_top":false,"comment_ctime":1585466564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585466564","product_id":100023201,"comment_content":"早先采用jquery来定义类的写法，其弊端也特别明显。包装的语法糖看似融合了原型、function易于编程，实际也是在不断堆砌重复代码，不求甚解。","like_count":0},{"had_liked":false,"id":194394,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1585057537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585057537","product_id":100023201,"comment_content":"在构造器中修改this，是修改了构造器本身吗","like_count":0},{"had_liked":false,"id":194257,"user_name":"schnappi","can_delete":false,"product_type":"c1","uid":1765771,"ip_address":"","ucode":"9510884E297F00","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f1/8b/e759f6bb.jpg","comment_is_top":false,"comment_ctime":1585042353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585042353","product_id":100023201,"comment_content":"“ 如果所有对象都有私有字段[[prototype]]，就是对象的原型 ”<br>不太理解这句话，求解<br>","like_count":0},{"had_liked":false,"id":193138,"user_name":"樊琳琪","can_delete":false,"product_type":"c1","uid":1538988,"ip_address":"","ucode":"990C0F8027FC5E","user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/ac/13eaecf5.jpg","comment_is_top":false,"comment_ctime":1584884666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584884666","product_id":100023201,"comment_content":"用function 感觉主要是比较顺手，ˆ😊ˆ，但是class直接用它的继承性也挺好，以后试试看","like_count":0},{"had_liked":false,"id":193136,"user_name":"樊琳琪","can_delete":false,"product_type":"c1","uid":1538988,"ip_address":"","ucode":"990C0F8027FC5E","user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/ac/13eaecf5.jpg","comment_is_top":false,"comment_ctime":1584884600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584884600","product_id":100023201,"comment_content":"听第二遍感觉有新的收货","like_count":0},{"had_liked":false,"id":193062,"user_name":"樊琳琪","can_delete":false,"product_type":"c1","uid":1538988,"ip_address":"","ucode":"990C0F8027FC5E","user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/ac/13eaecf5.jpg","comment_is_top":false,"comment_ctime":1584883317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584883317","product_id":100023201,"comment_content":"let 还一直以为是其他语言的，平时一直用的var😂","like_count":0},{"had_liked":false,"id":193047,"user_name":"樊琳琪","can_delete":false,"product_type":"c1","uid":1538988,"ip_address":"","ucode":"990C0F8027FC5E","user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/ac/13eaecf5.jpg","comment_is_top":false,"comment_ctime":1584883051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584883051","product_id":100023201,"comment_content":"用的function ，js里面没有用过class","like_count":0},{"had_liked":false,"id":192709,"user_name":"LeeJ","can_delete":false,"product_type":"c1","uid":1519071,"ip_address":"","ucode":"0BEE26520D1181","user_header":"https://static001.geekbang.org/account/avatar/00/17/2d/df/db24bfca.jpg","comment_is_top":false,"comment_ctime":1584869159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584869159","product_id":100023201,"comment_content":"值得好好看几遍，基础太弱鸡了","like_count":0},{"had_liked":false,"id":176546,"user_name":"blueBean","can_delete":false,"product_type":"c1","uid":1816697,"ip_address":"","ucode":"6A68D2414BD904","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/79/a4dbe9ee.jpg","comment_is_top":false,"comment_ctime":1581084187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581084187","product_id":100023201,"comment_content":"基于原型就是基于原有对象进行改造","like_count":0},{"had_liked":false,"id":176209,"user_name":"quaeast","can_delete":false,"product_type":"c1","uid":1291207,"ip_address":"","ucode":"E28AD41FBE89B7","user_header":"https://static001.geekbang.org/account/avatar/00/13/b3/c7/57e789fe.jpg","comment_is_top":false,"comment_ctime":1580989398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580989398","product_id":100023201,"comment_content":"本来很简单的东西饶了一圈终于回归了初心，这算不上算是一场设计悲剧呢。","like_count":0},{"had_liked":false,"id":169907,"user_name":"王方园","can_delete":false,"product_type":"c1","uid":1384028,"ip_address":"","ucode":"1E07EA4453B702","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eplmzz3iccOAekzibWpSkMDlCE8oTujvy8aBMv0wANjTzuyyNXtfuiauGHMtfHtia9T0bd7w0B3lvg3zw/132","comment_is_top":false,"comment_ctime":1578470644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578470644","product_id":100023201,"comment_content":"适合多看几遍","like_count":0},{"had_liked":false,"id":169904,"user_name":"王方园","can_delete":false,"product_type":"c1","uid":1384028,"ip_address":"","ucode":"1E07EA4453B702","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eplmzz3iccOAekzibWpSkMDlCE8oTujvy8aBMv0wANjTzuyyNXtfuiauGHMtfHtia9T0bd7w0B3lvg3zw/132","comment_is_top":false,"comment_ctime":1578470504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578470504","product_id":100023201,"comment_content":"文字虽然不多  但要是把老师所说的知识点串起来弄明白也是很耗时间的（还是不深究情况） 可能是我的基础太差了","like_count":0},{"had_liked":false,"id":164174,"user_name":"Sun 🙃","can_delete":false,"product_type":"c1","uid":1396293,"ip_address":"","ucode":"342590FE20F231","user_header":"https://static001.geekbang.org/account/avatar/00/15/4e/45/1e463459.jpg","comment_is_top":false,"comment_ctime":1576900982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576900982","product_id":100023201,"comment_content":"MVVM框架下面向对象在实际运用场景中感觉用得不多","like_count":0},{"had_liked":false,"id":162546,"user_name":"戚霸","can_delete":false,"product_type":"c1","uid":1068089,"ip_address":"","ucode":"AD54A7A6E2591D","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/39/e554b38a.jpg","comment_is_top":false,"comment_ctime":1576552474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576552474","product_id":100023201,"comment_content":"先学了java 现在搞了半年的前端 一接触的就是class，没有明白这一节要讲清楚什么问题","like_count":0},{"had_liked":false,"id":154938,"user_name":"tyro","can_delete":false,"product_type":"c1","uid":1682654,"ip_address":"","ucode":"84F12141BD7158","user_header":"https://static001.geekbang.org/account/avatar/00/19/ac/de/e0837063.jpg","comment_is_top":false,"comment_ctime":1574600101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574600101","product_id":100023201,"comment_content":"虽然es6 提供了class的新语法来定义类，但还是得分场景使用。像vue的源码里就是使用function来定义类Vue，也是为了对类进行各种扩展才没有选择class。","like_count":0},{"had_liked":false,"id":148993,"user_name":"看啥看看不懂","can_delete":false,"product_type":"c1","uid":1577400,"ip_address":"","ucode":"408AF9B8B72A76","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtaHMciakwNRfMqLRIDvOBhjYZllqXDYjXnGJibF7vCtiauUwvDA6F90RQ7TojgyWrgVvT0DfqhRScw/132","comment_is_top":false,"comment_ctime":1573123760,"is_pvip":false,"replies":[{"id":"58889","content":"其实没有所谓的“真正类”这个说法，在面向对象概念复杂的演进历史中，并没有明确地形成这个共识。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1574218859,"ip_address":"","comment_id":148993,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573123760","product_id":100023201,"comment_content":"我感觉不是我们需要模拟类，而是我们需要真正类的形式。我认为单纯的原型形式去做项目，在复用，扩展方面不是很适合，比如 每次生成的对象没有办法判断是否从属一类；使用Object.create方法，会将对象的属性放在原型链上，这样该对象的私有属性就成了公共的，违背了属性最好私有化的开发概念。在开发中也容易出现bug。我感觉，类的想法很适合扩展，复用。原型链变为了它的内在实现方式。如果手动用原型链写，也可以实现，但就是麻烦些。","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473699,"discussion_content":"其实没有所谓的“真正类”这个说法，在面向对象概念复杂的演进历史中，并没有明确地形成这个共识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574218859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140744,"user_name":"LaMer","can_delete":false,"product_type":"c1","uid":1632979,"ip_address":"","ucode":"584028E951837E","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/d3/42566a75.jpg","comment_is_top":false,"comment_ctime":1571040499,"is_pvip":false,"replies":[{"id":"58908","content":"既然是私有字段，你当然访问不到了。<br>__proto__确实是[[prototype]]的映射，但是这是早期浏览器违背标准提供的，现在已经没有必要，请用setPrototypeOf和getPrototypeOf","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1574220189,"ip_address":"","comment_id":140744,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571040499","product_id":100023201,"comment_content":"“所有对象都有私有字段[[prototype]]” 这句不是很理解 我发现 现在chrome普通对象都是有_proto_字段 ，没发现[[prototype]]字段 望老师解答！！！！","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470535,"discussion_content":"既然是私有字段，你当然访问不到了。\n__proto__确实是[[prototype]]的映射，但是这是早期浏览器违背标准提供的，现在已经没有必要，请用setPrototypeOf和getPrototypeOf","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574220189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442963,"avatar":"https://static001.geekbang.org/account/avatar/00/16/04/93/d1e9312f.jpg","nickname":"非同凡想","note":"","ucode":"9D1D498339A892","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43063,"discussion_content":"他说的其实是内置[[prototype]]字段，不会暴露出来的。看https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572849380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140662,"user_name":"奋奋","can_delete":false,"product_type":"c1","uid":1379169,"ip_address":"","ucode":"6E262FCC910BA1","user_header":"https://static001.geekbang.org/account/avatar/00/15/0b/61/882eb821.jpg","comment_is_top":false,"comment_ctime":1571023664,"is_pvip":false,"replies":[{"id":"58909","content":"额......“私有字段[[prototype]]，就是对象的原型” 这俩是同位语。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1574220246,"ip_address":"","comment_id":140662,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571023664","product_id":100023201,"comment_content":"老师好，关于原型系统两条概括的第一条，“如果所有对象都有私有字段[[prototype]]，就是对象的原型”，这句话我反复阅读，也不能理解，所有对象是什么？怎么就成对象的原型了？望能再细说一下","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470500,"discussion_content":"额......“私有字段[[prototype]]，就是对象的原型” 这俩是同位语。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574220246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442963,"avatar":"https://static001.geekbang.org/account/avatar/00/16/04/93/d1e9312f.jpg","nickname":"非同凡想","note":"","ucode":"9D1D498339A892","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43065,"discussion_content":"建议配合规范、MDN一起看，只看文章可能会有不少懵逼点，这也说明我们基础较为薄弱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572849454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133742,"user_name":"稚鸿同学","can_delete":false,"product_type":"c1","uid":1212581,"ip_address":"","ucode":"989804DB990385","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/a5/83b424bc.jpg","comment_is_top":false,"comment_ctime":1568644268,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568644268","product_id":100023201,"comment_content":"要直接学习好使用，class的语法应用好类，尽量将function回归到真正函数；","like_count":0},{"had_liked":false,"id":123448,"user_name":"KingSwim","can_delete":false,"product_type":"c1","uid":1024043,"ip_address":"","ucode":"84DE14B7EB2580","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/2b/efa6dc2e.jpg","comment_is_top":false,"comment_ctime":1565678512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565678512","product_id":100023201,"comment_content":"听不懂的估计都没有 Java经验吧","like_count":0},{"had_liked":false,"id":120298,"user_name":"Gavin 峰","can_delete":false,"product_type":"c1","uid":1100401,"ip_address":"","ucode":"6045F85B962AFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/71/b5ac045e.jpg","comment_is_top":false,"comment_ctime":1564822433,"is_pvip":false,"replies":[{"id":"54067","content":"这整篇不都在讲这个么","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1570774692,"ip_address":"","comment_id":120298,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564822433","product_id":100023201,"comment_content":"“类”并非面向对象的全部，如何理解？","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461277,"discussion_content":"这整篇不都在讲这个么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570774692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442963,"avatar":"https://static001.geekbang.org/account/avatar/00/16/04/93/d1e9312f.jpg","nickname":"非同凡想","note":"","ucode":"9D1D498339A892","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43066,"discussion_content":"类只是面向对象编程的一种方式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572849489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118966,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1564475336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564475336","product_id":100023201,"comment_content":"之前研究solidity里就有set get方法，可见solidity就是个js","like_count":0},{"had_liked":false,"id":118919,"user_name":"我五岁了呀","can_delete":false,"product_type":"c1","uid":1234802,"ip_address":"","ucode":"8B45200F1C65E0","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/72/deec1d6b.jpg","comment_is_top":false,"comment_ctime":1564468048,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564468048","product_id":100023201,"comment_content":"“基于原型”的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。<br>-----<br>这句有点不太明白<br>","like_count":0},{"had_liked":false,"id":104210,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1560682048,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1560682048","product_id":100023201,"comment_content":"问：<br>ES6底层对类的实例化其实也是new一个function(constructor)?","like_count":0,"discussions":[{"author":{"id":1470104,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6e/98/44e278ff.jpg","nickname":"dennisleung","note":"","ucode":"607B8F14A0545D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3893,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564933947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103414,"user_name":"Jaykey","can_delete":false,"product_type":"c1","uid":1167992,"ip_address":"","ucode":"535FEA1292D290","user_header":"https://static001.geekbang.org/account/avatar/00/11/d2/78/1f1b45f9.jpg","comment_is_top":false,"comment_ctime":1560430494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560430494","product_id":100023201,"comment_content":"extends，和super的方法来调用类，是ES6的里方法，这个方法对于初学者更容易理解类的继承，而不用再去通过定义函数的方式来新建类","like_count":0},{"had_liked":false,"id":103255,"user_name":"大Q","can_delete":false,"product_type":"c1","uid":1338092,"ip_address":"","ucode":"8447B04FE64F79","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLD0fSWnqtlAN4oJkdoVCgpo0cBLuyxrFibIU1nYrRtS9HHAxtn1ka1dXgkpTxAy6DZz1v7AkQRDMPg/132","comment_is_top":false,"comment_ctime":1560404937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560404937","product_id":100023201,"comment_content":"“javascript选择了一个冷门的方言”，读到这句，醍醐灌顶。","like_count":0},{"had_liked":false,"id":102679,"user_name":"奔跑的蜗牛","can_delete":false,"product_type":"c1","uid":1481833,"ip_address":"","ucode":"FD283F2E751AC0","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/69/f2d4aac9.jpg","comment_is_top":false,"comment_ctime":1560296301,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1560296301","product_id":100023201,"comment_content":"我们现在依然是使用new关键字来模拟类。主要是企业主流推荐浏览器是IE，虽然已经升级到IE最高版本11，但是Es6的很多语法仍然不支持，所以领导很顾虑，不让使用Es6。老是有什么好的建议没？","like_count":0,"discussions":[{"author":{"id":1520355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/32/e3/20676888.jpg","nickname":"涂涂","note":"","ucode":"A36AE853DD0A30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5712,"discussion_content":"我建议不要盲目使用一些新技术，还是要根据公司业务实际需要来，稳定才是老板想要的，如果用了新技术反而BUG不断，问题多多，那就得不偿失了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566444184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1520355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/32/e3/20676888.jpg","nickname":"涂涂","note":"","ucode":"A36AE853DD0A30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5711,"discussion_content":"我猜你们公司应该是事业国企单位把，如果不是，现在还主流IE，我觉得你如果是做前端可以跑路了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566444083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2006936,"avatar":"http://thirdwx.qlogo.cn/mmopen/ibxcyEpkUnt01g86jRQDQg8QJZibm5m5akHibeu0YG1TSYczsnSLkamG5LvRm3kGPYS21u6zu2h4KpY5KQS2BWjxviaJtcibI3ZzA/132","nickname":"非要我换名字","note":"","ucode":"C0299798D0E429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1520355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/32/e3/20676888.jpg","nickname":"涂涂","note":"","ucode":"A36AE853DD0A30","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269193,"discussion_content":"我们还有一个项目是需要兼容ie9的呢，什么都不敢用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589877081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5711,"ip_address":""},"score":269193,"extra":""}]}]},{"had_liked":false,"id":100396,"user_name":"天青","can_delete":false,"product_type":"c1","uid":1508357,"ip_address":"","ucode":"08C0C56367BFDD","user_header":"https://static001.geekbang.org/account/avatar/00/17/04/05/ceb2fd56.jpg","comment_is_top":false,"comment_ctime":1559545478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559545478","product_id":100023201,"comment_content":"文章很有深度，读起来很费脑子","like_count":0},{"had_liked":false,"id":99037,"user_name":"紫葳仙子","can_delete":false,"product_type":"c1","uid":1550141,"ip_address":"","ucode":"727746CFCDF1A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/a7/3d/dbf269c1.jpg","comment_is_top":false,"comment_ctime":1559133894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559133894","product_id":100023201,"comment_content":"个人感觉之前又是函数，又是类的写法，蛮有意思的，就是容易被混淆","like_count":0},{"had_liked":false,"id":95463,"user_name":"Ashley🔖","can_delete":false,"product_type":"c1","uid":1510493,"ip_address":"","ucode":"0E6906A9649BE5","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5d/ee601172.jpg","comment_is_top":false,"comment_ctime":1558059923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558059923","product_id":100023201,"comment_content":"我听JS像听天书，怎么办，是不是要从0重新学起呀？","like_count":0},{"had_liked":false,"id":93769,"user_name":"辛宝Otto","can_delete":false,"product_type":"c1","uid":1385311,"ip_address":"","ucode":"8EFDD974A7304B","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/5f/2dd2cb53.jpg","comment_is_top":false,"comment_ctime":1557585203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557585203","product_id":100023201,"comment_content":"受益匪浅！拨云见天日！","like_count":0},{"had_liked":false,"id":92731,"user_name":"summer","can_delete":false,"product_type":"c1","uid":1164932,"ip_address":"","ucode":"44288B3B70DA57","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/84/ad33305a.jpg","comment_is_top":false,"comment_ctime":1557317893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557317893","product_id":100023201,"comment_content":"老师被喵喵统治了","like_count":0},{"had_liked":false,"id":90206,"user_name":"忍冬","can_delete":false,"product_type":"c1","uid":1466004,"ip_address":"","ucode":"98FFE2E670EE47","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/94/63092f6f.jpg","comment_is_top":false,"comment_ctime":1556447898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556447898","product_id":100023201,"comment_content":"nice 要不是之前看过些设计模式 根本看不懂了","like_count":0},{"had_liked":false,"id":85068,"user_name":"Geek_0bb537","can_delete":false,"product_type":"c1","uid":1488361,"ip_address":"","ucode":"BE1A16372FC814","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDSY5xBJ2PH4lqNtWJqhe1HcYkP7S9ibAXChONgCBX5pJ2gaU3icXhltQgqhzDyML3EzFicxPeE4Tiag/132","comment_is_top":false,"comment_ctime":1554970561,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1554970561","product_id":100023201,"comment_content":"半路出家的 一开始就是用了ES5，用原型链来实现类和类的继承，其它都还好，除了繁琐一点就是看着挺别扭，有个java和c++情节！后来看到ES6 果断弃用原型链方式，但是让人郁闷的是很多引擎居然还是要把它转成ES5执行！winter老师 你提倡多继承吗？还是说尽量用聚合来解决问题？我看着ES6里面要实现多继承的方式也挺别扭的","like_count":0,"discussions":[{"author":{"id":1126631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","nickname":"wingsico","note":"","ucode":"A91CB7B0497708","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221306,"discussion_content":"组合 > 继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586001686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81670,"user_name":"K4SHIFZ","can_delete":false,"product_type":"c1","uid":1293057,"ip_address":"","ucode":"BFB49AAC0E4C74","user_header":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","comment_is_top":false,"comment_ctime":1554002275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554002275","product_id":100023201,"comment_content":"@ashen1129 第二条作者说的是对的。类中定义的方法和属性确实全部写到类的原型上，只不过，类的原型的constructor属性又指向类，也就是原对象，所以看起来似乎this.xxx定义在了对象上","like_count":0},{"had_liked":false,"id":78085,"user_name":"麦冬","can_delete":false,"product_type":"c1","uid":1463049,"ip_address":"","ucode":"C89D5EAECF3B02","user_header":"https://static001.geekbang.org/account/avatar/00/16/53/09/b270c0ab.jpg","comment_is_top":false,"comment_ctime":1553068541,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553068541","product_id":100023201,"comment_content":"老师讲课的思路很清晰，但是有点小可惜，没有讲完extends继承和原型链继承的根本区别，extends不仅仅只是语法糖，还能找到父类，而ES5的继承没有办法做到，<br>function Super(){}<br>function Sub(){}<br>Sub.prototype = New Super()<br>Sub.prototype.constructor = Sub;<br>var sub = New Sub()<br>sub.＿prototype＿=== Function.prototype<br>(一本正经的胡说八道。。)","like_count":0,"discussions":[{"author":{"id":1126631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","nickname":"wingsico","note":"","ucode":"A91CB7B0497708","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221308,"discussion_content":"建议看看es5实现继承的集中方法，你这个只是基于原型链的继承，还有组合式继承以及寄生组合式继承等等，es6的extends采用寄生组合式继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586001802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77860,"user_name":"all","can_delete":false,"product_type":"c1","uid":1038916,"ip_address":"","ucode":"FA4B924B8AB43F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/44/ac972c98.jpg","comment_is_top":false,"comment_ctime":1553008259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553008259","product_id":100023201,"comment_content":"不错👍老师讲的很细节","like_count":0},{"had_liked":false,"id":77778,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1552997299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552997299","product_id":100023201,"comment_content":"从java，oc，swift过来的，学了前几期，原型什么的学起来真吃力，实在头大，终于看到了es6，那熟悉的味道，真香","like_count":0},{"had_liked":false,"id":77362,"user_name":"不知火喵","can_delete":false,"product_type":"c1","uid":1343423,"ip_address":"","ucode":"A51F80B633FF2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/7f/bf/b160585f.jpg","comment_is_top":false,"comment_ctime":1552912061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552912061","product_id":100023201,"comment_content":"老师真是太厉害了，语言设计层面的思考，让人茅塞顿开。","like_count":0},{"had_liked":false,"id":73771,"user_name":"贤","can_delete":false,"product_type":"c1","uid":1378826,"ip_address":"","ucode":"C1B08B2490BA8C","user_header":"https://static001.geekbang.org/account/avatar/00/15/0a/0a/22194210.jpg","comment_is_top":false,"comment_ctime":1551975185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551975185","product_id":100023201,"comment_content":"这里所说的”编程范式“应该统一为 面向对象编程吧。 JavaScript 的两种编程范式是 面向对象编程和函数式编程。。","like_count":0},{"had_liked":false,"id":73730,"user_name":"长江","can_delete":false,"product_type":"c1","uid":1436091,"ip_address":"","ucode":"4391EBCF4DE448","user_header":"https://static001.geekbang.org/account/avatar/00/15/e9/bb/58135c8e.jpg","comment_is_top":false,"comment_ctime":1551965210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551965210","product_id":100023201,"comment_content":"以前不理解原型，听完后感觉，原型是引用方式，就是可以无限继承，动态继承，这个让类更加动态，灵活。相对java有这个大的语言好处是吗？","like_count":0},{"had_liked":false,"id":73177,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1551835471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551835471","product_id":100023201,"comment_content":"以前只知道用，看了老师的课知道所以然了","like_count":0},{"had_liked":false,"id":71435,"user_name":"拾迹","can_delete":false,"product_type":"c1","uid":1025093,"ip_address":"","ucode":"38F367B77FF2D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/45/3cb5cdc6.jpg","comment_is_top":false,"comment_ctime":1551342371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551342371","product_id":100023201,"comment_content":"@ashen1129 <br>关于你说的第2点<br>&gt; 2.在讲解ES6中的类时，文中指出“类中定义的方法和属性则会被写在原型对象之上”，事实上一般数据属性写在对象上，而访问器属性和方法才是写在原型对象之上的。<br>虽然前面和后面都是对的，但是应该是你误解了老师的意思，对于类语法中除了构造器以外的属性，的确都会写在原型对象上，难道不是吗？只有构造器中 this.x 的属性才会写在对象上","like_count":0},{"had_liked":false,"id":70371,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1551086853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551086853","product_id":100023201,"comment_content":"果真是站在不同的高度去解释一个问题时，答案让人出乎意料，为老师的点赞","like_count":0},{"had_liked":false,"id":69625,"user_name":"八脚","can_delete":false,"product_type":"c1","uid":1376992,"ip_address":"","ucode":"83A039B8E880D0","user_header":"https://static001.geekbang.org/account/avatar/00/15/02/e0/3baadd39.jpg","comment_is_top":false,"comment_ctime":1550798595,"is_pvip":false,"replies":[{"id":"25824","content":"不合理，你需要考虑下花斑虎的花斑是否真的有必要放到类里面，它可能只是个属性而已。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1551424727,"ip_address":"","comment_id":69625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550798595","product_id":100023201,"comment_content":"老师：听您课程受益匪浅，想问个问题我设计继承类的时候会经常在super前面对父类参数做加工，这样的做法是否合理，或者有更合适的做法？<br>class 猫{<br>    constroct({skin: 黑色, ...other}){<br>         this.skin = skin;<br>    }<br>    ......<br>}; <br><br>class 花斑虎 extends 猫 {<br>    constroct(config){<br>        config.skin = 花斑;<br>        super(config);<br>    }<br>     ......<br>}<br>","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440193,"discussion_content":"不合理，你需要考虑下花斑虎的花斑是否真的有必要放到类里面，它可能只是个属性而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551424727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68546,"user_name":"火云邪神0007","can_delete":false,"product_type":"c1","uid":1390886,"ip_address":"","ucode":"158014211134B1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9YqiaybDPpZMr3ecHDv8P3chyr3dETz5Ljft8s3F47JDN93yOKeOyysxxhaN7MJmXt7ib5X6EgMGQ/132","comment_is_top":false,"comment_ctime":1550541721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550541721","product_id":100023201,"comment_content":"真的是抽丝剥茧，由浅及深，鞭辟入里，暮鼓晨钟啊","like_count":0},{"had_liked":false,"id":68525,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1550539020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550539020","product_id":100023201,"comment_content":"后端会一点js 拨云见日……","like_count":0},{"had_liked":false,"id":68453,"user_name":"易林林","can_delete":false,"product_type":"c1","uid":1049836,"ip_address":"","ucode":"27F84A3FCBBCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/ec/0539c89d.jpg","comment_is_top":false,"comment_ctime":1550501647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550501647","product_id":100023201,"comment_content":"直透本质，谢谢winter。","like_count":0},{"had_liked":false,"id":67914,"user_name":"F.","can_delete":false,"product_type":"c1","uid":1186891,"ip_address":"","ucode":"2463F19CAE3FC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/4b/7ccd2499.jpg","comment_is_top":false,"comment_ctime":1550322989,"is_pvip":false,"replies":[{"id":"24333","content":"因为v的原型链上先有别的toString了呗","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550552290,"ip_address":"","comment_id":67914,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1550322989","product_id":100023201,"comment_content":"老师，为什么直接输出 v.toString() 的结果和  Object.prototype.toString.call(v) 不一样","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439425,"discussion_content":"因为v的原型链上先有别的toString了呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550552290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226692,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b7/c4/422813bf.jpg","nickname":"蒲公英","note":"","ucode":"076183447A1D9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1998,"discussion_content":"v 的构造函数重写了toString（）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563173871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67012,"user_name":"RJHJZTNL","can_delete":false,"product_type":"c1","uid":1022187,"ip_address":"","ucode":"B9A2866ADE8635","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/eb/57a6713c.jpg","comment_is_top":false,"comment_ctime":1550055464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550055464","product_id":100023201,"comment_content":"166","like_count":0},{"had_liked":false,"id":66845,"user_name":"Ewet","can_delete":false,"product_type":"c1","uid":1377775,"ip_address":"","ucode":"CDBC3E308FD7E3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7IdBDXwAHfj7fV3oddk4DKibUBEiaictJtGm0AgQbAlh6ublw0aoUrJ7icsve4Azib31R1UBJb3YyU6A/132","comment_is_top":false,"comment_ctime":1550028743,"is_pvip":false,"replies":[{"id":"23833","content":"看了我那个猫和虎的例子了么，操作原型也是一种描述业务的方式。","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1550143335,"ip_address":"","comment_id":66845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550028743","product_id":100023201,"comment_content":"想问下操作原型有什么作用，感觉看得不是很明白，来自小白的提问，哈哈哈","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438941,"discussion_content":"看了我那个猫和虎的例子了么，操作原型也是一种描述业务的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550143335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66692,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1549981740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549981740","product_id":100023201,"comment_content":"请教老师一个问题，我们系统需要填写好多form,我们想是否这些前台的表单可以通过后台数据库的表自动生成那？有什么合适的技术吗？指点下，谢谢","like_count":0},{"had_liked":false,"id":65994,"user_name":"脉不语","can_delete":false,"product_type":"c1","uid":1385226,"ip_address":"","ucode":"F57B96F74A3232","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/0a/b8400ee1.jpg","comment_is_top":false,"comment_ctime":1549844786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549844786","product_id":100023201,"comment_content":"大神爱撸猫！鉴定完毕～","like_count":0},{"had_liked":false,"id":65993,"user_name":"胡永","can_delete":false,"product_type":"c1","uid":1200543,"ip_address":"","ucode":"6C8BA1E0BED9C0","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/9f/1840385e.jpg","comment_is_top":false,"comment_ctime":1549844516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549844516","product_id":100023201,"comment_content":"厉害了，从更本质的角度来解读类和原型","like_count":0},{"had_liked":false,"id":65951,"user_name":"达达","can_delete":false,"product_type":"c1","uid":1103097,"ip_address":"","ucode":"19A236D444817B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f9/48da7701.jpg","comment_is_top":false,"comment_ctime":1549793953,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1549793953","product_id":100023201,"comment_content":"终于明白了new和Object.create的区别！","like_count":0,"discussions":[{"author":{"id":2378535,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","nickname":"拿来吧","note":"","ucode":"7F4B64285D2AA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369825,"discussion_content":"看评论是蛮有必要的 我之前一直没有细想过 没有有过这方面的问题和思考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619168321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65646,"user_name":"yansj","can_delete":false,"product_type":"c1","uid":1373798,"ip_address":"","ucode":"696CF632AF24F0","user_header":"","comment_is_top":false,"comment_ctime":1549533758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549533758","product_id":100023201,"comment_content":"写react用class 写vue用function","like_count":0},{"had_liked":false,"id":65431,"user_name":"Artyhacker","can_delete":false,"product_type":"c1","uid":1026392,"ip_address":"","ucode":"1C4BCA763297F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/58/9324f5cc.jpg","comment_is_top":false,"comment_ctime":1549353604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549353604","product_id":100023201,"comment_content":"以前一直觉得js是个假的面向对象，关于类的东西乱七八糟，什么都是模拟的，以前看《你不知道的JavaScript》也是反对用新的class关键字。如今才理解js的设计是基于原型的，与类是不同的思路，并且具有自己的一些独特优势。实际开发一般用react，所以还是class居多。","like_count":0},{"had_liked":false,"id":65256,"user_name":"jackson","can_delete":false,"product_type":"c1","uid":1301678,"ip_address":"","ucode":"D3A6B55BDA14DF","user_header":"https://static001.geekbang.org/account/avatar/00/13/dc/ae/afb663de.jpg","comment_is_top":false,"comment_ctime":1549164287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549164287","product_id":100023201,"comment_content":"优秀框架的源码有很多能讲的优秀代码，老师能结合它们一起讲概念吗","like_count":0},{"had_liked":false,"id":65098,"user_name":"joker","can_delete":false,"product_type":"c1","uid":1390963,"ip_address":"","ucode":"71122911AFD37D","user_header":"https://static001.geekbang.org/account/avatar/00/15/39/73/317ea03c.jpg","comment_is_top":false,"comment_ctime":1549040628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549040628","product_id":100023201,"comment_content":"es6真得多点推广。小程序出来的时候就想吐槽这年头还不支持 class 写法，创建组件的api 对编辑器的解释和ts的支持及其不友好。vue 都懂得提供 class 的方式。还有异步api 全都是回调，Promise 都出来多久了。","like_count":0},{"had_liked":false,"id":65078,"user_name":"王鹏飞","can_delete":false,"product_type":"c1","uid":1346654,"ip_address":"","ucode":"1CC6DCCF449AFC","user_header":"https://static001.geekbang.org/account/avatar/00/14/8c/5e/eeaada1d.jpg","comment_is_top":false,"comment_ctime":1549027180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549027180","product_id":100023201,"comment_content":"老师很厉害，不是一般的水平","like_count":0},{"had_liked":false,"id":64891,"user_name":"张汉桂-东莞","can_delete":false,"product_type":"c1","uid":1116277,"ip_address":"","ucode":"38657ABA59382A","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/75/512b9f26.jpg","comment_is_top":false,"comment_ctime":1548942615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548942615","product_id":100023201,"comment_content":"我现在写原型还是用Funtion,两方面原因。<br>1.es6还没深入研究。<br>2.客户使用的浏览器兼容，很恼人吧","like_count":0},{"had_liked":false,"id":64882,"user_name":"Amipei","can_delete":false,"product_type":"c1","uid":1114712,"ip_address":"","ucode":"FCB7B1D37E8BDC","user_header":"","comment_is_top":false,"comment_ctime":1548938777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548938777","product_id":100023201,"comment_content":"那么基于原型   适合什么样的应用场景。<br>一直很喜欢js的基于原型编程。","like_count":0},{"had_liked":false,"id":64879,"user_name":"n千万分之一","can_delete":false,"product_type":"c1","uid":1061879,"ip_address":"","ucode":"36DB205CCD19A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/f7/8374fe7a.jpg","comment_is_top":false,"comment_ctime":1548937703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548937703","product_id":100023201,"comment_content":"老师，ts好用还是js好用？","like_count":0},{"had_liked":false,"id":64869,"user_name":"蜗牛上高速","can_delete":false,"product_type":"c1","uid":1393256,"ip_address":"","ucode":"EAE1D71250B437","user_header":"https://static001.geekbang.org/account/avatar/00/15/42/68/8622ca33.jpg","comment_is_top":false,"comment_ctime":1548931348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548931348","product_id":100023201,"comment_content":"目前vue项目中也是用的类，但是内部没有写构造函数。<br>关键是extends Vue后，也没有调用super，但是this还是能调用Vue类的方法，之前没想那么多，现在反而搞不懂了...","like_count":0},{"had_liked":false,"id":64816,"user_name":"Vince","can_delete":false,"product_type":"c1","uid":1238517,"ip_address":"","ucode":"605080BBAC8623","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/f5/cc28d517.jpg","comment_is_top":false,"comment_ctime":1548917701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548917701","product_id":100023201,"comment_content":"最重要的还是得先把构造函数和原型的方式理解透彻再去学习新的class方式，如果直接学习class的用法就接受不了原型的方式","like_count":0},{"had_liked":false,"id":64815,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1136797,"ip_address":"","ucode":"4F9A006DA78074","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/9d/91d795cf.jpg","comment_is_top":false,"comment_ctime":1548917623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548917623","product_id":100023201,"comment_content":"目前还是用function来构造函数，看完这篇文章感觉用class定义会更简洁方便，直接定义一个类名","like_count":0},{"had_liked":false,"id":64757,"user_name":"🐽  🍀 🐥","can_delete":false,"product_type":"c1","uid":1379499,"ip_address":"","ucode":"FEDE08EBEB2ED9","user_header":"https://static001.geekbang.org/account/avatar/00/15/0c/ab/5b85ab27.jpg","comment_is_top":false,"comment_ctime":1548900870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548900870","product_id":100023201,"comment_content":"现在主要用框架多，大多都是ES6的语法，所以都是class来完成的","like_count":0},{"had_liked":false,"id":64750,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1021014,"ip_address":"","ucode":"2B732860C4231B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/56/4b8395f6.jpg","comment_is_top":false,"comment_ctime":1548899557,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548899557","product_id":100023201,"comment_content":"已经开始使用 class。<br><br>可能因为使用的还不多，现在最大的体会是 class 的语法方便阅读，更容易理解。<br><br>constructor 内部就是该 class 固有属性，比如一个方形的长宽。method 就不需要再有累赘的 this 出现。<br><br>不确定在不同场景下，二者是否有更显著的差异。","like_count":0},{"had_liked":false,"id":64741,"user_name":"🐍","can_delete":false,"product_type":"c1","uid":1213611,"ip_address":"","ucode":"42B11C20DD3CB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/ab/1842a785.jpg","comment_is_top":false,"comment_ctime":1548897716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548897716","product_id":100023201,"comment_content":"老师能科普一下  es版本吗 es6又是什么时候出现的版本 能否让我们有一个概念","like_count":0},{"had_liked":false,"id":64724,"user_name":"张张张小烦","can_delete":false,"product_type":"c1","uid":1077472,"ip_address":"","ucode":"DFC8CAD637A541","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/e0/cc542398.jpg","comment_is_top":false,"comment_ctime":1548892833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548892833","product_id":100023201,"comment_content":"一直想拥抱class，只是现在公司项目全是function，前后端不分离，用的VS2013。。。","like_count":0},{"had_liked":false,"id":64723,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1548891779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548891779","product_id":100023201,"comment_content":"1. ES6提供class的实现，不过最终还是通过构造函数和原型实现类的继承，相当于通过语法糖简化了概念和刚入门人的学习成本。<br>2.私有[[class]]属性，new 一个函数的或者一个类的内部过程。","like_count":0}]}