{"id":2017,"title":"32 | 编程范式游记（3） - 类型系统和泛型的本质","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>前面，我们讨论了从C到C++的泛型编程方法，并且初探了更为抽象的函数式编程。正如在上一讲中所说的，泛型编程的方式并不只有C++这一种类型，我们只是通过这个过程了解一下，底层静态类型语言的泛型编程原理。这样能够方便我们继续后面的历程。</p><p>是的，除了C++那样的泛型，如果你了解其它编程语言一定会发现，在动态类型语言或是某些有语法糖支持的语言中，那个<code>swap()</code> 或 <code>search()</code> 函数的泛型其实可以很简单地就实现了。</p><p>比如，你甚至可以把<code>swap()</code>函数简单地写成下面这个样子（包括Go语言也有这样的语法）：</p><pre><code>b, a = a, b;\n</code></pre><p>在上一讲后面的Reduce函数中，可以看到，在编程世界中，我们需要处理好两件事：</p><ul>\n<li>第一件事是编程语言中的类型问题。</li>\n<li>第二件事是对真实世界中业务代码的抽象、重用和拼装。</li>\n</ul><p>所以，在这一讲中，我们还是继续深入地讨论上面这两个问题，着重讨论一下编程语言中的类型系统和泛型编程的本质。</p><h1>类型系统</h1><p>在计算机科学中，类型系统用于定义如何将编程语言中的数值和表达式归类为许多不同的类型，以及如何操作这些类型，还有这些类型如何互相作用。类型可以确认一个值或者一组值，具有特定的意义和目的。</p><!-- [[[read_end]]] --><p>一般来说，编程语言会有两种类型，一种是内建类型，如int、float和char等，一种是抽象类型，如struct、class和function等。抽象类型在程序运行中，可能不表示为值。类型系统在各种语言之间有非常大的不同，也许，最主要的差异存在于编译时期的语法，以及运行时期的操作实现方式。</p><p>编译器可能使用值的静态类型以最优化所需的存储区，并选取对数值运算时的最佳算法。例如，在许多C编译器中，“浮点数”数据类型是以32比特表示，与IEEE 754规格一致的单精度浮点数。因此，在数值运算上，C应用了浮点数规范（浮点数加法、乘法等）。</p><p>类型的约束程度以及评估方法，影响了语言的类型。更进一步讲，编程语言可能就类型多态性部分，对每一个类型都对应了一个针对于这个类型的算法运算。类型理论研究类型系统，尽管实际的编程语言类型系统，起源于计算机架构的实际问题、编译器实现，以及语言设计。</p><p>程序语言的类型系统主要提供如下的功能。</p><ul>\n<li>\n<p><strong>程序语言的安全性</strong>。使用类型可以让编译器侦测一些代码的错误，例如：可以识别出一个错误无效的表达式，如<code>“Hello, World” + 3</code>这样的不同数据类型间操作的问题。强类型语言提供更多的安全性，但是并不能保证绝对的安全。</p>\n</li>\n<li>\n<p><strong>利于编译器的优化</strong>。 静态类型语言的类型声明，可以让编译器明确地知道程序员的意图。因此，编译器就可以利用这一信息做很多代码优化工作。例如：如果我们指定一个类型是 <code>int</code> ，那么编译就知道，这个类型会以4个字节的倍数进行对齐，编译器就可以非常有效地利用更有效率的机器指令。</p>\n</li>\n<li>\n<p><strong>代码的可读性</strong>。有类型的编程语言，可以让代码更易读和更易维护，代码的语义也更清楚，代码模块的接口（如函数）也更丰富和清楚。</p>\n</li>\n<li>\n<p><strong>抽象化</strong>。类型允许程序设计者对程序以较高层次的方式思考，而不是烦人的低层次实现。例如，我们使用整型或是浮点型来取代底层的字节实现，我们可以将字符串设计成一个值，而不是底层字节的数组。从高层上来说，类型可以用来定义不同模块间的交互协议，比如函数的入参类型和返回类型，从而可以让接口更有语义，而且不同的模块数据交换更为直观和易懂。</p>\n</li>\n</ul><p>但是，正如前面说的，<strong>类型带来的问题就是我们作用于不同类型的代码，虽然长得非常相似，但是由于类型的问题需要根据不同版本写出不同的算法，如果要做到泛型，就需要涉及比较底层的玩法</strong>。</p><p>对此，这个世界出现了两类语言，一类是静态类型语言，如C、C++、Java，一种是动态类型语言，如Python、PHP、JavaScript等。</p><p>我们来看一下，一段动态类型语言的代码：</p><pre><code>x = 5;\nx = &quot;hello&quot;;\n</code></pre><p>在这个示例中，我们可以看到变量 <code>x</code> 一开始好像是整型，然后又成了字符串型。如果在静态类型的语言中写出这样的代码，那么就会在编译期出错。而在动态类型的语言中，会以类型标记维持程序所有数值的“标记”，并在运算任何数值之前检查标记。所以，一个变量的类型是由运行时的解释器来动态标记的，这样就可以动态地和底层的计算机指令或内存布局对应起来。</p><p>我们再来看一个示例，对于JavaScript这样的动态语言来说可以定义出下面这样的数据结构（一个数组的元素可以是各式各样的类型），这在静态类型的语言中是很难做到的。</p><pre><code class=\"language-javascript\">var a = new Array()\na[0] = 2017;\na[1] = \"Hello\";\na[2] = {name: \"Hao Chen\"};\n</code></pre><blockquote>\n<p>注：其实，这并不是一个数组，而是一个 <code>key:value</code>。因为动态语言的类型是动态的，所以，key 和 value 的类型都可以随意。比如，对于 <code>a</code> 这个数据结构，还可以写成：<code>a[\"key\"] = \"value\"</code> 这样的方式。</p>\n</blockquote><p>在弱类型或是动态类型的语言中，下面代码的执行会有不确定的结果。</p><pre><code>x = 5;\ny = &quot;37&quot;;\nz = x + y;\n</code></pre><ul>\n<li>\n<p>有的像Visual Basic语言，给出的结果是42：系统将字符串\"37\"转换成数字37，以匹配运算上的直觉。</p>\n</li>\n<li>\n<p>而有的像JavaScript语言，给出的结果是\"537\"：系统将数字5转换成字符串\"5\"并把两者串接起来。</p>\n</li>\n<li>\n<p>像Python这样的语言，则会产生一个运行时错误。</p>\n</li>\n</ul><p>但是，<strong>我们需要清楚地知道，无论哪种程序语言，都避免不了一个特定的类型系统</strong>。哪怕是可随意改变变量类型的动态类型的语言，我们在读代码的过程中也需要脑补某个变量在运行时的类型。</p><p>所以，每个语言都需要一个类型检查系统。</p><ul>\n<li>\n<p>静态类型检查是在编译器进行语义分析时进行的。如果一个语言强制实行类型规则（即通常只允许以不丢失信息为前提的自动类型转换），那么称此处理为强类型，反之称为弱类型。</p>\n</li>\n<li>\n<p>动态类型检查系统更多的是在运行时期做动态类型标记和相关检查。所以，动态类型的语言必然要给出一堆诸如：<code>is_array()</code>, <code>is_int()</code>, <code>is_string()</code> 或是 <code>typeof()</code> 这样的运行时类型检查函数。</p>\n</li>\n</ul><p>总之，“类型”有时候是一个有用的事，有时候又是一件很讨厌的事情。因为类型是对底层内存布局的一个抽象，会让我们的代码要关注于这些非业务逻辑上的东西。而且，我们的代码需要在不同类型的数据间做处理。但是如果程序语言类型检查得过于严格，那么，我们写出来的代码就不能那么随意。</p><p>所以，对于静态类型的语言也开了些“小后门”：比如，类型转换，还有C++、Java运行时期的类型测试。</p><p>这些小后门也会带来相当讨厌的问题，比如下面这个C语言的示例。</p><pre><code>int x = 5;\nchar y[] = &quot;37&quot;;\nchar* z = x + y;\n</code></pre><p>在上面这个例子中，结果可能和你想的完全不一样。由于C语言的底层特性，这个例子中的 <code>z</code> 会指向一个超过 <code>y</code> 地址 5个字节的内存地址，相当于指向y字符串的指针之后的两个空字符处。</p><p>静态类型语言的支持者和动态类型自由形式的支持者，经常发生争执。前者主张，在编译的时候就可以较早发现错误，而且还可增进运行时期的性能。</p><p>后者主张，使用更加动态的类型系统，分析代码更为简单，减少出错机会，才能更加轻松快速地编写程序。与此相关的是，后者还主张，考虑到在类型推断的编程语言中，通常不需要手动宣告类型，这部分的额外开销也就自动降低了。</p><p>在本系列内容的前两篇文章中，我们用C/C++语言来做泛型编程的示例，似乎动态类型语言能够比较好地规避类型导致需要出现多个版本代码的问题，这样可以让我们更好地关注于业务。</p><p>但是，我们需要清楚地明白，<strong>任何语言都有类型系统</strong>，只是动态类型语言在运行时做类型检查。动态语言的代码复杂度比较低，并可以更容易地关注业务，在某些场景下是对的，但有些情况下却并不见得。</p><p>比如：在JavaScript中，我们需要做一个变量转型的函数，可能会是下面这个样子：</p><pre><code>function ToNumber(x) {\n    switch(typeof x) {\n        case &quot;number&quot;: return x;\n        case &quot;undefined&quot;: return NaN;\n        case &quot;boolean&quot;: return x ? 1 : 0;\n        case &quot;string&quot;: return Number(x); \n        case &quot;object&quot;: return NaN;\n        case &quot;function&quot;: return NaN;    \n    }\n}\n</code></pre><p>我相信，你在动态类型语言的代码中可以看到大量类似 <code>typeof</code> 这样的类型检查代码。是的，这是动态类型带来的另一个问题，就是运行时识别（这个是比较耗性能的）。</p><p>如果你用过一段时间的动态类型语言，一旦代码量比较大了，我们就会发现，代码中出现“类型问题”而引发整个程序出错的情况实在是太多太多了。而且，这样的出错会让整个程序崩溃掉，太恐怖了。这个时候，我们就很希望提前发现这些类型的问题。</p><p>静态语言的支持者会说编译器能帮我们找到这些问题，而动态语言的支持者则认为，静态语言的编译器也无法找到所有的问题，想真正提前找到问题只能通过测试来解决。其实他们都对。</p><h1>泛型的本质</h1><p>要了解泛型的本质，就需要了解类型的本质。</p><ul>\n<li>\n<p>类型是对内存的一种抽象。不同的类型，会有不同的内存布局和内存分配的策略。</p>\n</li>\n<li>\n<p>不同的类型，有不同的操作。所以，对于特定的类型，也有特定的一组操作。</p>\n</li>\n</ul><p>所以，要做到泛型，我们需要做下面的事情：</p><ul>\n<li>\n<p>标准化掉类型的内存分配、释放和访问。</p>\n</li>\n<li>\n<p>标准化掉类型的操作。比如：比较操作，I/O操作，复制操作……</p>\n</li>\n<li>\n<p>标准化掉数据容器的操作。比如：查找算法、过滤算法、聚合算法……</p>\n</li>\n<li>\n<p>标准化掉类型上特有的操作。需要有标准化的接口来回调不同类型的具体操作……</p>\n</li>\n</ul><p>所以，C++动用了非常繁多和复杂的技术来达到泛型编程的目标。</p><ul>\n<li>\n<p>通过类中的构造、析构、拷贝构造，重载赋值操作符，标准化（隐藏）了类型的内存分配、释放和复制的操作。</p>\n</li>\n<li>\n<p>通过重载操作符，可以标准化类型的比较等操作。</p>\n</li>\n<li>\n<p>通过iostream，标准化了类型的输入、输出控制。</p>\n</li>\n<li>\n<p>通过模板技术（包括模板的特化），来为不同的类型生成类型专属的代码。</p>\n</li>\n<li>\n<p>通过迭代器来标准化数据容器的遍历操作。</p>\n</li>\n<li>\n<p>通过面向对象的接口依赖（虚函数技术），来标准化了特定类型在特定算法上的操作。</p>\n</li>\n<li>\n<p>通过函数式（函数对象），来标准化对于不同类型的特定操作。</p>\n</li>\n</ul><p>通过学习C++，我们可以看到一个比较完整的泛型编程里所涉及的编程范式，这些编程泛式在其它语言中都会或多或少地体现着。比如，JDK 5 引入的泛型类型，就源自C++的模板。</p><p>泛型编程于1985年在论文 <a href=\"http://stepanovpapers.com/genprog.pdf\">Generic Programming</a> 中被这样定义：</p><blockquote>\n<p>Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.</p>\n<p>— Musser, David R.; Stepanov, Alexander A., Generic Programming</p>\n</blockquote><p>我理解其本质就是 —— <strong>屏蔽掉数据和操作数据的细节，让算法更为通用，让编程者更多地关注算法的结构，而不是在算法中处理不同的数据类型。</strong></p><h1>小结</h1><p>在编程语言中，类型系统的出现主要是对容许混乱的操作加上了严格的限制，以避免代码以无效的数据使用方式编译或运行。例如，整数运算不可用于字符串；指针的操作不可用于整数上，等等。但是，类型的产生和限制，虽然对底层代码来说是安全的，但是对于更高层次的抽象产生了些负面因素。比如在C++语言里，为了同时满足静态类型和抽象，就导致了模板技术的出现，带来了语言的复杂性。</p><p>我们需要清楚地明白，编程语言本质上帮助程序员屏蔽底层机器代码的实现，而让我们可以更为关注于业务逻辑代码。但是因为，编程语言作为机器代码和业务逻辑的粘合层，是在让程序员可以控制更多底层的灵活性，还是屏蔽底层细节，让程序员可以更多地关注于业务逻辑，这是很难两全需要trade-off的事。</p><p>所以，不同的语言在设计上都会做相应的取舍，比如：C语言偏向于让程序员可以控制更多的底层细节，而Java和Python则让程序员更多地关注业务功能的实现。而C++则是两者都想要，导致语言在设计上非常复杂。</p><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。<strong>这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。</strong></p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/301\">01 | 编程范式游记：起源</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/303\">02 | 编程范式游记：泛型编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2017\">03 | 编程范式游记：类型系统和泛型的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2711\">04 | 编程范式游记：函数式编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2723\">05 | 编程范式游记：修饰器模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2729\">06 | 编程范式游记：面向对象编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2741\">07 | 编程范式游记：基于原型的编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2748\">08 | 编程范式游记：Go 语言的委托模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2751\">09 | 编程范式游记：编程的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2752\">10 | 编程范式游记：逻辑编程范式</a></li>\n</ul>","neighbors":{"left":{"article_title":"31 | 编程范式游记（2）- 泛型编程","id":303},"right":{"article_title":"33 | 编程范式游记（4）- 函数式编程","id":2711}},"comments":[{"had_liked":false,"id":2223,"user_name":"shougao","can_delete":false,"product_type":"c1","uid":1019500,"ip_address":"","ucode":"17A3DD3B973787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6Zbo7ZIOYjnon52ONvWYicicxmwfg8xOqcEn0HtQ3UfE3UkpWv1ibJMoLLqmqIzjdoWmLqcgyNBAaw/132","comment_is_top":false,"comment_ctime":1516356862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"293574132990","product_id":100002201,"comment_content":"“类型是对内存的抽象，不同的类型会有不同的内存分布和内配策略”，见识了，用范型这么多年真是白用了。","like_count":68},{"had_liked":false,"id":2065,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1515718061,"is_pvip":false,"replies":[{"id":"406","content":"哈哈","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1515731701,"ip_address":"","comment_id":2065,"utype":1}],"discussion_count":3,"race_medal":0,"score":"160429508013","product_id":100002201,"comment_content":"意犹未尽啊，比追剧还痛苦","like_count":37,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415631,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1515731701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1411096,"avatar":"https://static001.geekbang.org/account/avatar/00/15/88/18/9744d5ec.jpg","nickname":"小超人","note":"","ucode":"0D8A433F3E3737","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392255,"discussion_content":"导演对剧情的把控程度很高啊^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630922677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209987,"discussion_content":"感觉这集可以加时长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584697953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10993,"user_name":"saiyn","can_delete":false,"product_type":"c1","uid":1135770,"ip_address":"","ucode":"99D61992C3FF7D","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/9a/5d8c349e.jpg","comment_is_top":false,"comment_ctime":1527778420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91722091636","product_id":100002201,"comment_content":"“C 语言偏向于让程序员可以控制更多的底层细节，而 Java 和 Python 则让程序员更多地关注业务功能的实现。而 C++ 则是两者都想要，导致语言在设计上非常复杂” —多么简单而又深刻的诠释，大赞","like_count":21},{"had_liked":false,"id":2532,"user_name":"W_T","can_delete":false,"product_type":"c1","uid":1044071,"ip_address":"","ucode":"1A78F28537E138","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/67/c146c144.jpg","comment_is_top":false,"comment_ctime":1517643698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91711956914","product_id":100002201,"comment_content":"类型是对内存的一种抽象。这是我在这篇文章中最大的收获","like_count":21},{"had_liked":false,"id":128287,"user_name":"易轻尘","can_delete":false,"product_type":"c1","uid":1136684,"ip_address":"","ucode":"0D0CB9D6D45A70","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/2c/92c7ce3b.jpg","comment_is_top":false,"comment_ctime":1566868784,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"48811509040","product_id":100002201,"comment_content":"自己的总结：任何编程语言都有类型系统，因为它们都需要在内存中表示数据，不同类型可能具有不同的内存布局和内存分配问题。特别是计算机底层还区分大小端、浮点数、整型等等，再加上用户自定类型，如何处理不同类型间的运算、判断不同类型间的运算是否合法就更为复杂。<br>有的语言将这个任务放在编译时进行（静态类型系统），有的语言放在运行时进行（动态类型系统）。<br>而泛型的主要目的就是提高代码的复用性，能够使某个算法能在不同的类型上正确运行，而无需程序员为每个类型都写出相应的算法。怎么做呢，加中间层呗，这个中间层的作用还是自己根据具体不同类型选择内存的操作方式以及进行必要的数据类型转换。","like_count":11},{"had_liked":false,"id":2053,"user_name":"OutOfMemory1024","can_delete":false,"product_type":"c1","uid":1016390,"ip_address":"","ucode":"127A6BF63033F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/82/46/f3bd0802.jpg","comment_is_top":false,"comment_ctime":1515652985,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44465325945","product_id":100002201,"comment_content":"本来说就看10分钟，一不小心就从一看到三了，耗哥快更新^_^。<br>这个系列除了了解不同的编程范式，最关注的是不同的编程范式如何设计，解决了什么问题。这些皓哥都点到了。我个人喜欢Scala这门语言，觉得它的设计非常优美，函数式编程和类型系统都是它的特点，希望皓哥这个系列或者答疑中能写写您的看法。<br>对于皓哥掌握那么多不同的编程范式，每种起源发展娓娓道来，我也是钦佩不已，不知道皓哥能不能介绍下是怎么学习和了解的，谢谢！","like_count":10,"discussions":[{"author":{"id":1485562,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/fa/3ad0a689.jpg","nickname":"廖师虎","note":"","ucode":"1297068AE141DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219178,"discussion_content":"同好Scala","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585742022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211757,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1588001433,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31652772505","product_id":100002201,"comment_content":"有时候，人们就喜欢将动态语言变成静态，将静态语言变成动态。如 JavaScript 中的 TypeScript，Java 中的 Scala Groovy Kotlin","like_count":7,"discussions":[{"author":{"id":1110194,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/b2/0d324d41.jpg","nickname":"山巅最小的费马质数颗松","note":"","ucode":"42D93BD9C371DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566921,"discussion_content":"scala是静态强类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650799779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314858,"avatar":"","nickname":"InfoQ_a2e2d7112e84","note":"","ucode":"78B40946E7B747","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368012,"discussion_content":"kotlin是静态的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618539091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65014,"user_name":"沙漠之鹰","can_delete":false,"product_type":"c1","uid":1222887,"ip_address":"","ucode":"9FB290B874317F","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/e7/b86938a1.jpg","comment_is_top":false,"comment_ctime":1549002231,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23023838711","product_id":100002201,"comment_content":"说出了语言的本质，如果大学能看到这样高质量的文章，学生会更有创造力","like_count":5,"discussions":[{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404860,"discussion_content":"不写几年代码，看了也未必懂哦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634438411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548303,"discussion_content":"我也是这个观点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643120554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404860,"ip_address":""},"score":548303,"extra":""}]}]},{"had_liked":false,"id":104994,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1560904161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18740773345","product_id":100002201,"comment_content":"所有编程语言都需要解决两个件事情：<br>第一件事是编程语言中的类型问题。<br>第二件事是对真实世界中业务代码的抽象、重用和拼装。<br>使用数据类型，可以帮助程序员忽略掉底层系统对资源的操作，但同时也带来代码和类型的绑定。因此泛型就是采用合适的策略，解决掉对底层系统资源访问，内存的分配和释放问题。解决数据的移位变换问题，解决数据容器的访问问题。<br>可以看到，由于程序语言是业余系统和计算机底层硬件之间的粘合剂，因此任何程序语言都不可能避免数据类型，区别只在于类型是编译时指定，还是运行时检查。通过泛型可以带来代码的重用，同时保证类型的安全","like_count":4},{"had_liked":false,"id":4459,"user_name":"lostsquirrel","can_delete":false,"product_type":"c1","uid":1046400,"ip_address":"","ucode":"5C217918BF351A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/80/e48f401f.jpg","comment_is_top":false,"comment_ctime":1522116225,"is_pvip":false,"replies":[{"id":"1120","content":"当然可以。强类型和动态类型是两码事，前者是判断不同的类型是否可以互转，后者是变量的类型可以动态调整。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1522160896,"ip_address":"","comment_id":4459,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18701985409","product_id":100002201,"comment_content":"python 不能这样用吧， x=5,x=&quot;hello&quot;, python 可以说是强类型吧","like_count":4,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416370,"discussion_content":"当然可以。强类型和动态类型是两码事，前者是判断不同的类型是否可以互转，后者是变量的类型可以动态调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1522160896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99483,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1559226814,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"14444128702","product_id":100002201,"comment_content":"看到这一篇的时候，有点后悔当年没有仔细看一遍斯坦福的那个编程范式公开课了，似乎当时听了个开头，感觉比较简单，后来就放弃了。<br><br>如果能早点梳理一下编程范式方面的内容，应该会对编程有很大的好处。即使经验不足的时候，能够有个大致的概念和方向，也会有相当大的方向。<br><br>“类型是对内存的抽象”，这个可以算是本课金句了，让我能够更好的理解为什么会有类型系统这样的东西。以前可能更多的是隐隐约约的感性认识，这节课的内容算是捅破了窗户纸。<br><br>“编程语言的本质是帮助程序员屏蔽机器代码的实现，而让我们可以更为关注于业务逻辑代码。” 这句我也很认可。从另一个角度讲，因为不够熟悉编程语言，代码写的不够多，所以影响了我对于业务逻辑的实现。","like_count":3},{"had_liked":false,"id":234546,"user_name":"余巍","can_delete":false,"product_type":"c1","uid":1995082,"ip_address":"","ucode":"B0819C42A82371","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","comment_is_top":false,"comment_ctime":1594717707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10184652299","product_id":100002201,"comment_content":"今天看见皓哥文章，想起自己当初想对c语言实现的算法进行范型化，尝试各种办法和查资料，得出结论：太复杂和不优雅。这几天看了范型系列，感觉走了好多弯路！对于范型本质，已经隐约快透了，看了这篇，真是醍醐灌顶！了解一件东西的背景和目的，真的很重要，会导致完全不一样的思维模式！","like_count":2},{"had_liked":false,"id":231119,"user_name":"刘文印@登录易","can_delete":false,"product_type":"c1","uid":1898243,"ip_address":"","ucode":"601854E2BB16D3","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f7/03/f67ef964.jpg","comment_is_top":false,"comment_ctime":1593588555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183523147","product_id":100002201,"comment_content":"确实，编程的目的就是对真实世界中业务的用计算机自动化，所以对其过程（代码）的抽象，建模都是为了编程实现，当然对其代码的重用和拼装可以进一步提高编程效率。","like_count":2},{"had_liked":false,"id":190843,"user_name":"ipofss","can_delete":false,"product_type":"c1","uid":1018620,"ip_address":"","ucode":"DE3061C9259F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","comment_is_top":false,"comment_ctime":1584698095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174632687","product_id":100002201,"comment_content":"类型是对内存的一种抽象。不同的类型，会有不同的内存布局和内存分配的策略。精妙","like_count":2},{"had_liked":false,"id":32766,"user_name":"章炎","can_delete":false,"product_type":"c1","uid":1172691,"ip_address":"","ucode":"DBF716C225617B","user_header":"https://static001.geekbang.org/account/avatar/00/11/e4/d3/c39f6b1b.jpg","comment_is_top":false,"comment_ctime":1539692093,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10129626685","product_id":100002201,"comment_content":"“C++两者都想要&quot;. 感觉这就给了Go可乘之机了。泛型做的不如Go彻底，性能和简单的C相比没有绝对优势，到现在C++14不断地扩充和简化语法，感觉到头来两边都做不好。这个和做事情一样，二鸟在林不如一鸟在手。","like_count":2,"discussions":[{"author":{"id":1055569,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/51/3625d8b0.jpg","nickname":"泽","note":"","ucode":"C6B0806E475A3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372507,"discussion_content":"Go没有泛型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620357831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269110,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1608527895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903495191","product_id":100002201,"comment_content":"笔记：类型是对内存的抽象；任何语言都有类型检查系统；类型允许程序设计者从更高层次的思考方式来思考；C更专注于底层操作，从而对类型检查的设计要求更高；C++想实现二者的权衡，引入了很多泛型的类型检查，如模板技术，导致语言在设计上更加复杂；Java等动态语言侧重于业务，设计方面对类型检查要求没有那么高。编程语言本质上帮助程序员屏蔽底层机器代码的实现，而让我们可以更为关注于业务逻辑代码。但是因为，编程语言作为机器代码和业务逻辑的粘合层，是在让程序员可以控制更多底层的灵活性，还是屏蔽底层细节，让程序员可以更多地关注于业务逻辑，这是很难两全需要 trade-off 的事","like_count":1},{"had_liked":false,"id":229600,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1593072330,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"5888039626","product_id":100002201,"comment_content":"任何语言都有类型系统，静态语言的类型检查是在编译器进行语义分析时进行，而动态语言是在运行时做类型检查。<br><br>如果从帮助程序员屏蔽底层机器代码实现的角度，我比较倾向于动态类型语言，但是程序员自己要清楚在用的是什么类型。<br><br>很久很久以前，可能是因为还需要考虑机器的性能，所以静态语言和底层操作有用武之地，那么，现在计算资源比较充盈的时候，动态语言的接受度也就更高一些了。<br><br>如果 C++ 是两者都想要，那么估计很难平衡。<br><br>C# 中使用 var 关键字声明的类型，算是动态类型么？<br><br>重复一下本课金句：类型是对内存的抽象。","like_count":1,"discussions":[{"author":{"id":1086568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/94/68/56794ea3.jpg","nickname":"Kian.Lee","note":"","ucode":"3FB08A00F2DFD7","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367997,"discussion_content":"C# 中使用 var 关键字声明的类型，算是动态类型么？\n不算，只是编译期的类型推导，只是语法糖而已，编译后的中间代码是有确定类型的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618535658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166840,"user_name":"聂旋","can_delete":false,"product_type":"c1","uid":1193784,"ip_address":"","ucode":"40061E5AFDA99C","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","comment_is_top":false,"comment_ctime":1577611423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872578719","product_id":100002201,"comment_content":"“类型是对内存的抽象，不同的类型会有不同的内存分布和内配策略”， 我理解应该是，类型是对内存的具体化，不同的类型会有不同的内存分布和内配策略。泛型是为了达到抽象化的操作。<br>作者从另一个角度告诉我们，编程这门学科不是冷冰冰的，是有血，有肉，是鲜活的，有趣味的。思考、讨论比知识本身更重要。虽然我们可能永远达不到作者的高度，但是能和作者一起学习探讨，获得真知，也是一件有趣有意义的事!","like_count":1},{"had_liked":false,"id":119212,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1564538213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859505509","product_id":100002201,"comment_content":"通了，通了。","like_count":1},{"had_liked":false,"id":102146,"user_name":"桃子妈妈","can_delete":false,"product_type":"c1","uid":1141504,"ip_address":"","ucode":"16E7D2FBAE452F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yy4cUibeUfPHPkXXZQnQwjXY7m5rXY5ib6a7pC1vkupj1icibF305N4pJSdqw0fO1ibvyfKCQ7HWggLhwiaNbbRPBsKg/132","comment_is_top":false,"comment_ctime":1560150868,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5855118164","product_id":100002201,"comment_content":"如果当时大学的课程是这样讲解语言该多好！看到这里才知道自己死记硬背的那些复杂设计背后是这么简单的背景。","like_count":1,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160465,"discussion_content":"大学老师没这高深的一线经验，以后会有更多的职位或者技能不是教师这个职业可以给予的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580806483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84449,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1554865024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849832320","product_id":100002201,"comment_content":"之前看泛型这一块，什么类型系统，类型检查系统听起来模糊不理解，看了一下JS的相关文章，而且在项目中看到一个声明的变量，在由null变为function的一个操作过程中。<br>结合动态语言，变量类型可以转换，而静态语言，声明了变量类型少了个类型检查系统，整个语言代码可以简洁不少。","like_count":1},{"had_liked":false,"id":53278,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1545621540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840588836","product_id":100002201,"comment_content":"之前对强类型语言和弱类型语言，有点理解不清，现在貌似理解了。","like_count":1},{"had_liked":false,"id":49331,"user_name":"wessonwang","can_delete":false,"product_type":"c1","uid":1000441,"ip_address":"","ucode":"A9BA5E3A3F278E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","comment_is_top":false,"comment_ctime":1544667371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5839634667","product_id":100002201,"comment_content":"“内存操作”-类型-数据结构（容器）-算法，分层思想。","like_count":1},{"had_liked":false,"id":18240,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1533207985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5828175281","product_id":100002201,"comment_content":"泛型编程：将类型泛化的一种编程方式","like_count":1},{"had_liked":false,"id":4518,"user_name":"lostsquirrel","can_delete":false,"product_type":"c1","uid":1046400,"ip_address":"","ucode":"5C217918BF351A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/80/e48f401f.jpg","comment_is_top":false,"comment_ctime":1522161384,"is_pvip":false,"replies":[{"id":"1269","content":"<br>我帮你转答池建强","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1522501207,"ip_address":"","comment_id":4518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5817128680","product_id":100002201,"comment_content":"谢谢指正，是我记错了，是 x = 5, y = &quot;hello&quot;, x + y 会报错，随便吐槽下这app到处坑，留言不能回复，昨天在小程序听音频，不知道在哪停止。。。","like_count":1,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416400,"discussion_content":"\n我帮你转答池建强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1522501207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2087,"user_name":"JK.Ryan","can_delete":false,"product_type":"c1","uid":1014467,"ip_address":"","ucode":"D1E533F3DEC481","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/c3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1515818725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5810786021","product_id":100002201,"comment_content":"最后的总结高屋建瓴，针对不同的业务场景和需求选择才是更好的方式，每个语言都有其擅长点和解决问题的方式。","like_count":1},{"had_liked":false,"id":2081,"user_name":"RZ_diversity","can_delete":false,"product_type":"c1","uid":1007035,"ip_address":"","ucode":"C1F39517927DE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/bb/1c579a50.jpg","comment_is_top":false,"comment_ctime":1515791989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5810759285","product_id":100002201,"comment_content":"依照皓哥的讲解，再结合我目前的情况来说，我更侧重业务逻辑，我还是首先选择Python和Java","like_count":1},{"had_liked":false,"id":359176,"user_name":"晓峰Ontheway","can_delete":false,"product_type":"c1","uid":1782484,"ip_address":"陕西","ucode":"7A39F2237B8D54","user_header":"https://static001.geekbang.org/account/avatar/00/1b/32/d4/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1665306429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665306429","product_id":100002201,"comment_content":"类型是对内存的抽象，不同的类型有不同的内存布局和内存分配策略，这会导致我们需要为各种类型编写通用的函数，而泛型是为了对类型进行抽象，能够写出更加通用的函数，屏蔽掉数据和操作数据的细节，让算法更为通用，让编程者更多地关注算法的结构，而不是在算法中处理不同的数据类型。","like_count":0},{"had_liked":false,"id":352082,"user_name":"jedi","can_delete":false,"product_type":"c1","uid":2969201,"ip_address":"","ucode":"E9B92E19DC9E45","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Wjsc175urqxxBcCsxSDG5hvSvLtvNtX9OvBa5ebHy9KZ8FszGH2AaEzKtLvoiabCnpTB8Kb7XSVlD2z2h9CViajQ/132","comment_is_top":false,"comment_ctime":1658375996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658375996","product_id":100002201,"comment_content":"醍醐灌顶，以前从没有认真想过","like_count":0},{"had_liked":false,"id":283357,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1205777,"ip_address":"","ucode":"EB19F80070FE23","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/11/f7408e3e.jpg","comment_is_top":false,"comment_ctime":1615726148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615726148","product_id":100002201,"comment_content":"从范型编程角度看，动态语言，静态语言之争往下一层看是类型系统之争，再看是内存布局和策略之争。要做到范型编程范式的良好设计，需要标准化类型系统！","like_count":0},{"had_liked":false,"id":269054,"user_name":"sirius","can_delete":false,"product_type":"c1","uid":1613721,"ip_address":"","ucode":"B3AEA5D15FB086","user_header":"https://static001.geekbang.org/account/avatar/00/18/9f/99/b5e52fd2.jpg","comment_is_top":false,"comment_ctime":1608511635,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608511635","product_id":100002201,"comment_content":"类型是对内存的抽象。<br>类型系统是抽象出特定数据结构上的操作，并做一些安全检查<br>范型是对算法的抽象<br>类型系统和范型在某种程度需要抉择。一个是个性，一个是共性。","like_count":0},{"had_liked":false,"id":268205,"user_name":"多多学习","can_delete":false,"product_type":"c1","uid":2362704,"ip_address":"","ucode":"8149297EC0C5B9","user_header":"","comment_is_top":false,"comment_ctime":1608100887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608100887","product_id":100002201,"comment_content":"博闻强记，怎么知道这么多，写文章前专门查资料了吧","like_count":0},{"had_liked":false,"id":245396,"user_name":"永不搬砖","can_delete":false,"product_type":"c1","uid":2008271,"ip_address":"","ucode":"A1FAAE5BA13ED4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yMBibUly5goiaID6GdX2dOzv8tUSW8771jeJz7mf2nfYnictOOt9oYMiaWojaZ2rMeGsXia9D1qvmLibIztlZ4n156gw/132","comment_is_top":false,"comment_ctime":1598931876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598931876","product_id":100002201,"comment_content":"当初学数据结构和汇编没有注意老师说的int4个字节在内存你可以抽象的想成是这样这样排列的，现在看见“类型是对内存的抽象，不同的类型会有不同的内存分布和内配策略”这句话恍然大悟。","like_count":0},{"had_liked":false,"id":245372,"user_name":"genius","can_delete":false,"product_type":"c1","uid":1646874,"ip_address":"","ucode":"855F08FB7A2C0B","user_header":"https://static001.geekbang.org/account/avatar/00/19/21/1a/9635c172.jpg","comment_is_top":false,"comment_ctime":1598926617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598926617","product_id":100002201,"comment_content":"c++难就难在这里了","like_count":0},{"had_liked":false,"id":227958,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1592530157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592530157","product_id":100002201,"comment_content":"范型的本质，我感觉是屏蔽数据类型的差异。在多种数据类型中抽象了一层。","like_count":0},{"had_liked":false,"id":225226,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1591687937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591687937","product_id":100002201,"comment_content":"泛型编程的“二八”，感觉突然开窍<br>         类型的本质<br>\t\t类型是对内存的一种抽象。不同的类型，会有不同的内存布局和内存分配的策略。<br>\t\t不同的类型，有不同的操作。所以，对于特定的类型，也有特定的一组操作。<br>\t\t泛型的实质是在标准化类型<br>\t\t\t标准化掉类型的内存分配、释放和访问。<br>\t\t\t标准化掉类型的操作。比如：比较操作，I&#47;O 操作，复制操作……<br>\t\t\t标准化掉数据容器的操作。比如：查找算法、过滤算法、聚合算法……<br>                        标准化掉类型上特有的操作。需要有标准化的接口来回调不同类型的具体操作……","like_count":0},{"had_liked":false,"id":183093,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1582951530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582951530","product_id":100002201,"comment_content":"分而治之，是人处理复杂事务的普遍思路。<br>数字是复杂的，所以，数字分成了许多的类型，不同的类型有不同的范围和操作。<br>数据在计算机中依赖内存而存在。<br>类型是对内存的抽象，所以，类型本身具有自己独特的范围属性和操作集合。<br>编程语言表达程序时需要用到类型，有各种类型的特性，导致程序的编写不仅要考虑算法的逻辑还需要考虑类型间的转换逻辑以及操作逻辑，所以，这增加了编程的复杂性，新的语言通过泛型这种方式把类型转换逻辑和类型操作逻辑给屏蔽掉了，这样编程会变得简单一些，效率也会更高一下，对于业务企业社会的发展推动也会更高效一些。<br>钱驱动效率，效率驱动高效的算法，高效的算法需要挖掘更多可重用的逻辑，然后抽象掉，减少业务开发的工作量，来提高效率，来获取更多的价值。","like_count":0},{"had_liked":false,"id":167748,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1577927262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577927262","product_id":100002201,"comment_content":"Generic programming centers around the idea of abstracting from concrete, efficient algorithms to obtain generic algorithms that can be combined with different data representations to produce a wide variety of useful software.<br>每一门编程语言都存在类型，类型是底层数据结构在内存中的体现。不同的类型，会有不同的操作和特性，范型就是为了应对不同类型的差异，达到抽象和通用的能力。让程序员可以更聚焦到业务中，更容易实现大的价值。","like_count":0},{"had_liked":false,"id":167353,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":false,"comment_ctime":1577774091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577774091","product_id":100002201,"comment_content":"类型就是对内存的抽象，内存本质上是一个超长的数组，比如编译器看到int类型，就知道一次要读取4个字节的数据，如果是float类型，读取4个自己后，还要根据IEEE 754规范转换。","like_count":0},{"had_liked":false,"id":113435,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1563009147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563009147","product_id":100002201,"comment_content":"原来typescript是为了解决javascript在写大型项目时容易出现类型错误而诞生的~","like_count":0},{"had_liked":false,"id":2181,"user_name":"allwmh","can_delete":false,"product_type":"c1","uid":1031572,"ip_address":"","ucode":"8B596EEFE9083A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bd/94/d4499319.jpg","comment_is_top":false,"comment_ctime":1516189451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1516189451","product_id":100002201,"comment_content":"期待后续","like_count":0},{"had_liked":false,"id":2117,"user_name":"茎待佳阴","can_delete":false,"product_type":"c1","uid":1042464,"ip_address":"","ucode":"21A7DC2C3EA389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/20/3374ea9e.jpg","comment_is_top":false,"comment_ctime":1515947896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515947896","product_id":100002201,"comment_content":"期待函数式编程，希望多讲讲装饰器这种东西的运用场景，以及滥用的一些例子","like_count":0},{"had_liked":false,"id":2064,"user_name":"蔬菜饼","can_delete":false,"product_type":"c1","uid":1016419,"ip_address":"","ucode":"DD3C06D378EACA","user_header":"","comment_is_top":false,"comment_ctime":1515717345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515717345","product_id":100002201,"comment_content":"您怎么看待近期热门的区块链，深度学习等技术，程序员应该追热吗？","like_count":0}]}