{"id":64879,"title":"38 | bytes包与字节串操作（上）","content":"<p>我相信，经过上一次的学习，你已经对<code>strings.Builder</code>和<code>strings.Reader</code>这两个类型足够熟悉了。</p><p>我上次还建议你去自行查阅<code>strings</code>代码包中的其他程序实体。如果你认真去看了，那么肯定会对我们今天要讨论的<code>bytes</code>代码包，有种似曾相识的感觉。</p><h2>前导内容： <code>bytes.Buffer</code>基础知识</h2><p><code>strings</code>包和<code>bytes</code>包可以说是一对孪生兄弟，它们在API方面非常的相似。单从它们提供的函数的数量和功能上讲，差别可以说是微乎其微。</p><p><strong>只不过，<code>strings</code>包主要面向的是Unicode字符和经过UTF-8编码的字符串，而<code>bytes</code>包面对的则主要是字节和字节切片。</strong></p><p>我今天会主要讲<code>bytes</code>包中最有特色的类型<code>Buffer</code>。顾名思义，<code>bytes.Buffer</code>类型的用途主要是作为字节序列的缓冲区。</p><p>与<code>strings.Builder</code>类型一样，<code>bytes.Buffer</code>也是开箱即用的。</p><p>但不同的是，<code>strings.Builder</code>只能拼接和导出字符串，而<code>bytes.Buffer</code>不但可以拼接、截断其中的字节序列，以各种形式导出其中的内容，还可以顺序地读取其中的子序列。</p><p>可以说，<code>bytes.Buffer</code>是集读、写功能于一身的数据类型。当然了，这些也基本上都是作为一个缓冲区应该拥有的功能。</p><!-- [[[read_end]]] --><p>在内部，<code>bytes.Buffer</code>类型同样是使用字节切片作为内容容器的。并且，与<code>strings.Reader</code>类型类似，<code>bytes.Buffer</code>有一个<code>int</code>类型的字段，用于代表已读字节的计数，可以简称为已读计数。</p><p>不过，这里的已读计数就无法通过<code>bytes.Buffer</code>提供的方法计算出来了。</p><p>我们先来看下面的代码：</p><pre><code>var buffer1 bytes.Buffer\ncontents := &quot;Simple byte buffer for marshaling data.&quot;\nfmt.Printf(&quot;Writing contents %q ...\\n&quot;, contents)\nbuffer1.WriteString(contents)\nfmt.Printf(&quot;The length of buffer: %d\\n&quot;, buffer1.Len())\nfmt.Printf(&quot;The capacity of buffer: %d\\n&quot;, buffer1.Cap())\n</code></pre><p>我先声明了一个<code>bytes.Buffer</code>类型的变量<code>buffer1</code>，并写入了一个字符串。然后，我想打印出这个<code>bytes.Buffer</code>类型的值（以下简称<code>Buffer</code>值）的长度和容量。在运行这段代码之后，我们将会看到如下的输出：</p><pre><code>Writing contents &quot;Simple byte buffer for marshaling data.&quot; ...\nThe length of buffer: 39\nThe capacity of buffer: 64\n</code></pre><p>乍一看这没什么问题。长度<code>39</code>和容量<code>64</code>的含义看起来与我们已知的概念是一致的。我向缓冲区中写入了一个长度为<code>39</code>的字符串，所以<code>buffer1</code>的长度就是<code>39</code>。</p><p>根据切片的自动扩容策略，<code>64</code>这个数字也是合理的。另外，可以想象，这时的已读计数的值应该是<code>0</code>，这是因为我还没有调用任何用于读取其中内容的方法。</p><p>可实际上，与<code>strings.Reader</code>类型的<code>Len</code>方法一样，<code>buffer1</code>的<code>Len</code>方法返回的也是内容容器中未被读取部分的长度，而不是其中已存内容的总长度（以下简称内容长度）。示例如下：</p><pre><code>p1 := make([]byte, 7)\nn, _ := buffer1.Read(p1)\nfmt.Printf(&quot;%d bytes were read. (call Read)\\n&quot;, n)\nfmt.Printf(&quot;The length of buffer: %d\\n&quot;, buffer1.Len())\nfmt.Printf(&quot;The capacity of buffer: %d\\n&quot;, buffer1.Cap())\n</code></pre><p>当我从<code>buffer1</code>中读取一部分内容，并用它们填满长度为<code>7</code>的字节切片<code>p1</code>之后，<code>buffer1</code>的<code>Len</code>方法返回的结果值也会随即发生变化。如果运行这段代码，我们会发现，这个缓冲区的长度已经变为了<code>32</code>。</p><p>另外，因为我们并没有再向该缓冲区中写入任何内容，所以它的容量会保持不变，仍是<code>64</code>。</p><p><strong>总之，在这里，你需要记住的是，<code>Buffer</code>值的长度是未读内容的长度，而不是已存内容的总长度。</strong> 它与在当前值之上的读操作和写操作都有关系，并会随着这两种操作的进行而改变，它可能会变得更小，也可能会变得更大。</p><p>而<code>Buffer</code>值的容量指的是它的内容容器（也就是那个字节切片）的容量，它只与在当前值之上的写操作有关，并会随着内容的写入而不断增长。</p><p>再说已读计数。由于<code>strings.Reader</code>还有一个<code>Size</code>方法可以给出内容长度的值，所以我们用内容长度减去未读部分的长度，就可以很方便地得到它的已读计数。</p><p>然而，<code>bytes.Buffer</code>类型却没有这样一个方法，它只有<code>Cap</code>方法。可是<code>Cap</code>方法提供的是内容容器的容量，也不是内容长度。</p><p>并且，这里的内容容器容量在很多时候都与内容长度不相同。因此，没有了现成的计算公式，只要遇到稍微复杂些的情况，我们就很难估算出<code>Buffer</code>值的已读计数。</p><p>一旦理解了已读计数这个概念，并且能够在读写的过程中，实时地获得已读计数和内容长度的值，我们就可以很直观地了解到当前<code>Buffer</code>值各种方法的行为了。不过，很可惜，这两个数字我们都无法直接拿到。</p><p>虽然，我们无法直接得到一个<code>Buffer</code>值的已读计数，并且有时候也很难估算它，但是我们绝对不能就此作罢，而应该通过研读<code>bytes.Buffer</code>和文档和源码，去探究已读计数在其中起到的关键作用。</p><p>否则，我们想用好<code>bytes.Buffer</code>的意愿，恐怕就不会那么容易实现了。</p><p>下面的这个问题，如果你认真地阅读了<code>bytes.Buffer</code>的源码之后，就可以很好地回答出来。</p><p><strong>我们今天的问题是：<code>bytes.Buffer</code>类型的值记录的已读计数，在其中起到了怎样的作用？</strong></p><p>这道题的典型回答是这样的。</p><p><code>bytes.Buffer</code>中的已读计数的大致功用如下所示。</p><ol>\n<li>读取内容时，相应方法会依据已读计数找到未读部分，并在读取后更新计数。</li>\n<li>写入内容时，如需扩容，相应方法会根据已读计数实现扩容策略。</li>\n<li>截断内容时，相应方法截掉的是已读计数代表索引之后的未读部分。</li>\n<li>读回退时，相应方法需要用已读计数记录回退点。</li>\n<li>重置内容时，相应方法会把已读计数置为<code>0</code>。</li>\n<li>导出内容时，相应方法只会导出已读计数代表的索引之后的未读部分。</li>\n<li>获取长度时，相应方法会依据已读计数和内容容器的长度，计算未读部分的长度并返回。</li>\n</ol><h2>问题解析</h2><p>通过上面的典型回答，我们已经能够体会到已读计数在<code>bytes.Buffer</code>类型，及其方法中的重要性了。没错，<code>bytes.Buffer</code>的绝大多数方法都用到了已读计数，而且都是非用不可。</p><p><strong>在读取内容的时候</strong>，相应方法会先根据已读计数，判断一下内容容器中是否还有未读的内容。如果有，那么它就会从已读计数代表的索引处开始读取。</p><p><strong>在读取完成后</strong>，它还会及时地更新已读计数。也就是说，它会记录一下又有多少个字节被读取了。<strong>这里所说的相应方法包括了所有名称以<code>Read</code>开头的方法，以及<code>Next</code>方法和<code>WriteTo</code>方法。</strong></p><p><strong>在写入内容的时候</strong>，绝大多数的相应方法都会先检查当前的内容容器，是否有足够的容量容纳新的内容。如果没有，那么它们就会对内容容器进行扩容。</p><p><strong>在扩容的时候</strong>，方法会在必要时，依据已读计数找到未读部分，并把其中的内容拷贝到扩容后内容容器的头部位置。</p><p>然后，方法将会把已读计数的值置为<code>0</code>，以表示下一次读取需要从内容容器的第一个字节开始。<strong>用于写入内容的相应方法，包括了所有名称以<code>Write</code>开头的方法，以及<code>ReadFrom</code>方法。</strong></p><p><strong>用于截断内容的方法<code>Truncate</code>，会让很多对<code>bytes.Buffer</code>不太了解的程序开发者迷惑。</strong> 它会接受一个<code>int</code>类型的参数，这个参数的值代表了：在截断时需要保留头部的多少个字节。</p><p>不过，需要注意的是，这里说的头部指的并不是内容容器的头部，而是其中的未读部分的头部。头部的起始索引正是由已读计数的值表示的。因此，在这种情况下，已读计数的值再加上参数值后得到的和，就是内容容器新的总长度。</p><p><strong>在<code>bytes.Buffer</code>中，用于读回退的方法有<code>UnreadByte</code>和<code>UnreadRune</code>。</strong> 这两个方法分别用于回退一个字节和回退一个Unicode字符。调用它们一般都是为了退回在上一次被读取内容末尾的那个分隔符，或者为重新读取前一个字节或字符做准备。</p><p>不过，退回的前提是，在调用它们之前的那一个操作必须是“读取”，并且是成功的读取，否则这些方法就只能忽略后续操作并返回一个非<code>nil</code>的错误值。</p><p><code>UnreadByte</code>方法的做法比较简单，把已读计数的值减<code>1</code>就好了。而<code>UnreadRune</code>方法需要从已读计数中减去的，是上一次被读取的Unicode字符所占用的字节数。</p><p>这个字节数由<code>bytes.Buffer</code>的另一个字段负责存储，它在这里的有效取值范围是[1, 4]。只有<code>ReadRune</code>方法才会把这个字段的值设定在此范围之内。</p><p>由此可见，只有紧接在调用<code>ReadRune</code>方法之后，对<code>UnreadRune</code>方法的调用才能够成功完成。该方法明显比<code>UnreadByte</code>方法的适用面更窄。</p><p>我在前面说过，<code>bytes.Buffer</code>的<code>Len</code>方法返回的是内容容器中未读部分的长度，而不是其中已存内容的总长度（即：内容长度）。</p><p>而该类型的<code>Bytes</code>方法和<code>String</code>方法的行为，与<code>Len</code>方法是保持一致的。前两个方法只会去访问未读部分中的内容，并返回相应的结果值。</p><p>在我们剖析了所有的相关方法之后，可以这样来总结：在已读计数代表的索引之前的那些内容，永远都是已经被读过的，它们几乎没有机会再次被读取。</p><p>不过，这些已读内容所在的内存空间可能会被存入新的内容。这一般都是由于重置或者扩充内容容器导致的。这时，已读计数一定会被置为<code>0</code>，从而再次指向内容容器中的第一个字节。这有时候也是为了避免内存分配和重用内存空间。</p><h2>总结</h2><p>总结一下，<code>bytes.Buffer</code>是一个集读、写功能于一身的数据类型。它非常适合作为字节序列的缓冲区。我们会在下一篇文章中继续对bytes.Buffer的知识进行延展。如果你对于这部分内容有什么样问题，欢迎给我留言，我们一起讨论。</p><p>感谢你的收听，我们下次再见。</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","neighbors":{"left":{"article_title":"37 | strings包与字符串操作","id":64877},"right":{"article_title":"39 | bytes包与字节串操作（下）","id":64881}},"comments":[{"had_liked":false,"id":121401,"user_name":"静水流深","can_delete":false,"product_type":"c1","uid":1339724,"ip_address":"","ucode":"644F05EFBD2E7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/4c/2cefec07.jpg","comment_is_top":false,"comment_ctime":1565134915,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"91759448131","product_id":100013101,"comment_content":"一图胜千言","like_count":22,"discussions":[{"author":{"id":2997610,"avatar":"","nickname":"Geek_superkai","note":"","ucode":"11BD59E867CEF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586188,"discussion_content":"看吐了 觉得这个老师想到哪里讲到哪里 全篇文字 没有一个流程图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662024870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065849,"avatar":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","nickname":"test","note":"","ucode":"9A4973E591DD12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374693,"discussion_content":"哎。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621318947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369734,"discussion_content":"习惯吧，这个课程一直都是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619144182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280233,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1614138567,"is_pvip":false,"replies":[{"id":"101813","content":"如果想了解标准库中某个包的功能，可以从应用程序调用的函数看起，一步步深入。标准库是一张网，所以你在看的时候也需要织一张网，也就是说需要记好笔记，并且在必要的时候把那些点联结起来。这样才看得明白。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1614226582,"ip_address":"","comment_id":280233,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23088975047","product_id":100013101,"comment_content":"赫老師多次闡明源碼的重要性，但源碼內容的量確實不小。<br>不知道老師能不能給個閱讀源碼的路徑？","like_count":6,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516030,"discussion_content":"如果想了解标准库中某个包的功能，可以从应用程序调用的函数看起，一步步深入。标准库是一张网，所以你在看的时候也需要织一张网，也就是说需要记好笔记，并且在必要的时候把那些点联结起来。这样才看得明白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614226582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1650748,"avatar":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","nickname":"盘胧","note":"","ucode":"5386CC4C92ECC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407338,"discussion_content":"学习源码以及使用的过程，按照作者写这个标准库的时候的思路：库函数 > 结构定义 > 结构函数\n举例学习strings包：\n1. 先熟悉外部库函数：go doc strings|grep &#34;^func&#34;\n2. 熟悉对应的结构定义：go doc strings|grep &#34;^type&#34;|grep &#34;struct&#34;\n3. 接下来就应该学习对应的内部结构的函数了 go doc strings.Builder|grep &#34;^func&#34;\n可以使用思维导图，顺着函数的调用去看，把过程记录下来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634985227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364739,"discussion_content":"系郝（hao）老师，唔系赫老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617590766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58474,"user_name":"sket","can_delete":false,"product_type":"c1","uid":1197729,"ip_address":"","ucode":"C7E24300D794F7","user_header":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnSjjGClCeqmKYJsSOQo40BMHRTtNYrWyQP9WypAjTToplVND944one2pkEyH5Oib4m4wUOJ9xBEIZQ/132","comment_is_top":false,"comment_ctime":1547088133,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18726957317","product_id":100013101,"comment_content":"原来read把从缓冲区读的字节放到p1里面了，让我这个小白纠结了好半天","like_count":4,"discussions":[{"author":{"id":1099379,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","nickname":"疯琴","note":"","ucode":"82ACAA4A27753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121322,"discussion_content":"你说完我就不纠结了😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578317029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317832,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1634984806,"is_pvip":false,"replies":[{"id":"115334","content":"👍","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1635177591,"ip_address":"","comment_id":317832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10224919398","product_id":100013101,"comment_content":"花了2小时，一遍啃源码，一遍对照文章,一边自己写测试用例，一边搞官方包自己实现的用例。。。绝了，啃津津有味，不知不觉都天黑了","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528997,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635177591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129667,"user_name":"NoTryNoSuccess","can_delete":false,"product_type":"c1","uid":1372735,"ip_address":"","ucode":"89EE8B4CEECC1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOM6tVLSiciaQeQst0g3iboWO74ibicicVAia9qno0X6cf65pEKLgdKkUdcpCWpjAB5e6semrFrruiaGQWhg/132","comment_is_top":false,"comment_ctime":1567212808,"is_pvip":false,"replies":[{"id":"48536","content":"👍","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1567392557,"ip_address":"","comment_id":129667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157147400","product_id":100013101,"comment_content":"坚持到这里了，给自己点赞！","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465591,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567392557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216395,"user_name":"L.","can_delete":false,"product_type":"c1","uid":1543396,"ip_address":"","ucode":"9803C2EDC799DC","user_header":"https://static001.geekbang.org/account/avatar/00/17/8c/e4/ad3e7c39.jpg","comment_is_top":false,"comment_ctime":1589251049,"is_pvip":false,"replies":[{"id":"80091","content":"可以进入我的知识星球“GoHackers VIP”然后向我提问（知识星球是一款App），当然也可以在这里向我提问。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1589260960,"ip_address":"","comment_id":216395,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5884218345","product_id":100013101,"comment_content":"老师同学们好，请问一下大家手头有能够辅助阅读源码的书籍或者资料吗，有的包下边的源码实在是理解不了，有的是不理解整体逻辑，有的是不理解某一行的写法等等(小白求助","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494801,"discussion_content":"可以进入我的知识星球“GoHackers VIP”然后向我提问（知识星球是一款App），当然也可以在这里向我提问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589260960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212533,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1588142769,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5883110065","product_id":100013101,"comment_content":"我去阅读了源码 发现重要的不止是 off 我暂且叫他偏移量 还有一个重要的字段lastRead 标识上一次是否是成功读取 和读了多少个字节 所以UnreadRune方法应该还是可以正常使用吧(不包含ReadRune的情况) 毕竟底层是b.off -= int(b.lastRead) ","like_count":1,"discussions":[{"author":{"id":1505155,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f7/83/7fa4bd45.jpg","nickname":"趣学车","note":"","ucode":"5279A6BF4C67A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326911,"discussion_content":"使用UnreadRune是， 会判断 b.lastRead <= opInvalid时会直接报错， 只有在ReadRune后，b.lastRead才会大于opInvalid","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605698334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342839,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1650503194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650503194","product_id":100013101,"comment_content":"每天坚持刷，讲的很不错","like_count":0},{"had_liked":false,"id":319267,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1635727988,"is_pvip":false,"replies":[{"id":"115811","content":"不要自己认为，要去看Go的源码。源码面前无秘密！<br><br>而且咱们专栏的代码例子中也有相应的说明：<br><br>https:&#47;&#47;github.com&#47;hyper0x&#47;Golang_Puzzlers&#47;tree&#47;master&#47;src&#47;puzzlers&#47;article31<br><br>再多说一点吧，Read() 方法返回的 n 只是当次读取的字节数。另外 Len 方法的源码是这样的：<br><br>func (b *Buffer) Len() int { return len(b.buf) - b.off }<br><br>这里的 b.off 代表的是读偏移量（相当于“读指针”），而 len(b.buf) 代表的是写偏移量（相当于“写指针”）。<br><br>另外，已读的那些字节并不会被马上删除掉，那样的话操作会太频繁（读时成本过高），它们是在写时发现需要增长缓存容量的时候才被删除掉的。<br><br>** 编程工作第一大忌讳：只自己想象，不看源码。切记切记！！**<br><br>最后，对所有本专栏的读者说一句：读这个专栏，越往后越需要随看随查源码。这样才能够有深刻的理解和认识。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1635839693,"ip_address":"","comment_id":319267,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635727988","product_id":100013101,"comment_content":"无法直接得到一个Buffer值的已读计数？？<br>\tn, _ := buffer1.Read(p1)<br>这个 n 不就是已读取的字节数吗？<br><br>老师还说 buffer1的Len方法返回的也是内容容器中未被读取部分的长度，我认为是错的，buffer1的Len方法返回就是 buffer1 内的长度，只要读取了，就不会存在 buffer1 里面了，难道不是吗？ 难道 buffer1 中还保留有已读取的字节吗？如果我错了，请老师给段代码证明下，buffer1 已读取的字节仍然可再次读取。 ","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529565,"discussion_content":"不要自己认为，要去看Go的源码。源码面前无秘密！\n\n而且咱们专栏的代码例子中也有相应的说明：\n\nhttps://github.com/hyper0x/Golang_Puzzlers/tree/master/src/puzzlers/article31\n\n再多说一点吧，Read() 方法返回的 n 只是当次读取的字节数。另外 Len 方法的源码是这样的：\n\nfunc (b *Buffer) Len() int { return len(b.buf) - b.off }\n\n这里的 b.off 代表的是读偏移量（相当于“读指针”），而 len(b.buf) 代表的是写偏移量（相当于“写指针”）。\n\n另外，已读的那些字节并不会被马上删除掉，那样的话操作会太频繁（读时成本过高），它们是在写时发现需要增长缓存容量的时候才被删除掉的。\n\n** 编程工作第一大忌讳：只自己想象，不看源码。切记切记！！**\n\n最后，对所有本专栏的读者说一句：读这个专栏，越往后越需要随看随查源码。这样才能够有深刻的理解和认识。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635839693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","nickname":"somenzz","note":"","ucode":"EA59A170DF8910","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411081,"discussion_content":"那个off是私有的对外不可见，buffer.Len返回的就是buffer 里面还能读到的字节数，那些不可读的虽然还存在，但是已经无法取到了，老师非讲这么复杂，搞得有办法读到已读的字节数据一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635844596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317833,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1634985238,"is_pvip":false,"replies":[{"id":"115333","content":"很好：）","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1635177568,"ip_address":"","comment_id":317833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634985238","product_id":100013101,"comment_content":"学习源码以及使用的过程，按照作者写这个标准库的时候的思路：库函数 &gt; 结构定义 &gt; 结构函数<br>举例学习strings包：<br>1. 先熟悉外部库函数：go doc strings|grep &quot;^func&quot;<br>2. 熟悉对应的结构定义：go doc strings|grep &quot;^type&quot;|grep &quot;struct&quot;<br>3. 接下来就应该学习对应的内部结构的函数了 go doc strings.Builder|grep &quot;^func&quot;<br>可以使用思维导图，顺着函数的调用去看，把过程记录下来","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528998,"discussion_content":"很好：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635177568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308844,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1629820376,"is_pvip":false,"replies":[{"id":"111910","content":"1. 已读计数值属于内部状态，外界不需要知道啊。你想拿这个东西做什么用呢？该封装的就得封装起来，充分解耦。<br><br>2. 对的。<br><br>3. Buffer 在扩充自己时有可能会对数据进行压缩，也就是把未读的数据迁移到已读的那些元素槽位上。在这种情况下，如果经压缩后那些之前的“已读空间”中还有空位，那么新数据就可以存到那里。<br><br>另外，会导致“已读计数”变化的那些“读方法”读出去的是一个个数据元素（通过 copy 函数做的），而不是基于Buffer的切片。所以压缩数据并不会对已经读出去的那些数据造成影响。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1629974295,"ip_address":"","comment_id":308844,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1629820376","product_id":100013101,"comment_content":"郝林老师，以下问题，麻烦回答一下：<br><br>1.  「bytes.Buffer」 为什么不提供一个 Buffer值的已读计数值的获取方法呢？<br><br>2.  文中说： “在我们剖析了所有的相关方法之后，可以这样来总结：在已读计数代表的索引之前的那些内容，永远都是已经被读过的，它们几乎没有机会再次被读取”。我理解的是： 唯一有机会获取到这些内容的机会是 「UnreadByte」和 「UnreadRune」这两个方法吗？<br><br>3. 文中说：“这些已读内容所在的内存空间可能会被存入新的内容。这一般都是由于重置或者扩充内容容器导致的”。 已读的内容不是已经 复制给另外的变量返回给调用方了吗？为什么还会被被存入新的内容呢？没理解这句话的想表达的意思。","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525643,"discussion_content":"1. 已读计数值属于内部状态，外界不需要知道啊。你想拿这个东西做什么用呢？该封装的就得封装起来，充分解耦。\n\n2. 对的。\n\n3. Buffer 在扩充自己时有可能会对数据进行压缩，也就是把未读的数据迁移到已读的那些元素槽位上。在这种情况下，如果经压缩后那些之前的“已读空间”中还有空位，那么新数据就可以存到那里。\n\n另外，会导致“已读计数”变化的那些“读方法”读出去的是一个个数据元素（通过 copy 函数做的），而不是基于Buffer的切片。所以压缩数据并不会对已经读出去的那些数据造成影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629974295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206849,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/41/74e3d86c.jpg","nickname":"kyle","note":"","ucode":"B67440A90E02F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390544,"discussion_content":"1.因为没必要，几乎用不上\n2.可以这么认为\n3.对啊，它是个值复制。它本身还在原处，可能被存入新的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629882813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304438,"user_name":"南雁","can_delete":false,"product_type":"c1","uid":2159290,"ip_address":"","ucode":"F6AE8B6820C312","user_header":"https://static001.geekbang.org/account/avatar/00/20/f2/ba/aad606a6.jpg","comment_is_top":false,"comment_ctime":1627423566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627423566","product_id":100013101,"comment_content":"我个人觉得老师讲的内容很不错，融入了他的经验和精华，但你觉得这种叙事方式我个人觉得还是不太适合新手的。","like_count":0},{"had_liked":false,"id":160441,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1575951654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575951654","product_id":100013101,"comment_content":"二刷<br>注意点：<br>String和Bytes方法不会更新内部计数器off","like_count":0,"discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390423,"discussion_content":"因为这两个的方法的目的只是仅仅返回缓冲区的未读部分内容而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629820655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37645,"user_name":"勇.Max","can_delete":false,"product_type":"c1","uid":1248128,"ip_address":"","ucode":"AE5DBC10805A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/80/a0533acb.jpg","comment_is_top":false,"comment_ctime":1541665017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541665017","product_id":100013101,"comment_content":"老师 请教下👇<br>golang如何实验solidity中的require和assert函数功能啊 试着写了下 没啥思路 求老师指点 谢谢","like_count":0},{"had_liked":false,"id":37644,"user_name":"勇.Max","can_delete":false,"product_type":"c1","uid":1248128,"ip_address":"","ucode":"AE5DBC10805A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/80/a0533acb.jpg","comment_is_top":false,"comment_ctime":1541664886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541664886","product_id":100013101,"comment_content":"老师，请教下👇<br>golang中如何实现类似solidity中的require(用来判断输入的参数是否符合某些条件)和assert(不只是对类型的断言)呢？<br>试着写了下，没思路，求老师指教。非常感谢","like_count":0}]}