{"id":831211,"title":"02｜工具使用：三大利器帮你迅速优化性能瓶颈","content":"<p>你好，我是徐逸。</p><p>在上节课中，我提到了刚开始做性能优化工作常见的3个痛点。</p><p>现在我们对于性能优化的流程已经心中有数了。今天我就来带你消除另一个痛点，掌握常见的Golang性能优化工具。它也是服务性能优化流程第三步——分析瓶颈原因的基础。只要能够灵活运用这些工具，我们就能更快地定位到代码优化点进行优化。</p><p>在介绍工具之前，我们先想一想，当发现CPU和内存占用过高时，你会怎么排查资源占用高的问题呢？</p><h2>pprof工具：是什么导致了高CPU和内存占用?</h2><p>为了分析CPU和内存资源占用高的原因，我们的首要任务便是精准找出那些<strong>消耗大量 CPU 资源以及频繁进行内存分配的热点代码</strong>。在锁定这些热点代码之后，我们才能紧密结合代码的上下文，找到消耗资源的原因。值得庆幸的是，Golang 的生态体系为我们提供了快速定位热点代码的工具——pprof。</p><p>pprof 具有强大的功能，它能够定时针对正在运行的 Go 程序展开采样操作。在这个过程中，它会全面搜集程序运行时的各类堆栈信息，像是那些消耗大量 CPU 资源的代码片段所在位置，以及内存分配的具体情况等。随后，pprof 会依据所搜集到的这些丰富信息，经过一系列细致的统计分析，生成可视化的性能报告供我们查看。</p><!-- [[[read_end]]] --><p>如此强大的 pprof，我们又该如何去使用它呢？</p><p>首先你需要触发pprof采集性能数据并生成性能报告。pprof支持多种采集触发方式。在实践中的大多数场景，我们会引入net/http/pprof包，并在main函数中开放http端口。你可以参考后面的代码。</p><pre><code class=\"language-go\">import (\n    \"net/http\"\n    _ \"net/http/pprof\"\n)\n\nfunc main() {\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        panic(err)\n    }\n}\n</code></pre><p>程序跑起来后，访问下面的url，我们就能得到一个触发采集的页面。然后在采集页面点击具体的采样类型，就能触发采样并生成性能报告。</p><pre><code class=\"language-shell\">http://127.0.0.1:8888/debug/pprof/\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/a1/12/a1d2947031d1de31e0cd102b45246112.jpg?wh=6200x3184\" alt=\"\" title=\"图1 pprof 触发采集页面\"></p><p>当然，我们也可以不通过上面的页面触发性能数据采集，而是直接访问url并添加参数来控制采集的时长，就像下面这样。</p><pre><code class=\"language-plain\"> curl \"http://127.0.0.1:8888/debug/pprof/profile?seconds=30\" &gt; profile.pprof\n</code></pre><p>在这些采样类型里，常用的有下面两类：</p><ul>\n<li>\n<p>profile采样，也就是cpu采样，用于确定程序中哪些函数或代码片段在运行时消耗了大量的 CPU 时间，帮助定位 CPU 性能瓶颈。</p>\n</li>\n<li>\n<p>内存分配采样，具体包括allocs采样和heap采样。其中，allocs 采样侧重于定位那些频繁进行内存分配的函数，而 heap 采样用于查看存活对象的内存分配情况，侧重于定位内存泄漏问题。</p>\n</li>\n</ul><p>对于不能采用开放http端口触发性能数据采集的场景，比如在程序启动初始化时，http端口还未开放，无法通过url触发采集性能数据。Golang提供了runtime/pprof包，像下面的代码一样，我们可以显式地触发和结束性能数据采集。</p><pre><code class=\"language-go\">import (\n    \"runtime/pprof\"\n)\n\nfunc main() {\n    // cpu采样\n    f, err := os.Create(\"profile.pprof\")\n    if err != nil {\n        panic(err)\n    }\n    defer f.Close()\n\n    if err := pprof.StartCPUProfile(f); err != nil {\n        panic(err)\n    }\n    defer pprof.StopCPUProfile()\n    // 运行业务逻辑\n    expensiveCPU()\n}\n\nfunc main() {\n    // 堆内存分配采样\n    f, err := os.Create(\"heap.pprof\")\n    if err != nil {\n        panic(err)\n    }\n    defer f.Close()\n\n    runtime.GC()\n    // 业务逻辑\n    expensiveMem()\n\n    if err := pprof.WriteHeapProfile(f); err != nil {\n        panic(err)\n    }\n}\n</code></pre><p>接下来就是将性能报告可视化的环节。Golang提供了可视化展示工具pprof，我们可以通过下面的命令，启动一个Web界面查看（<strong>可视化界面需要提前安装graphviz</strong>）。</p><pre><code class=\"language-plain\">go tool pprof -http :8889 profile.pprof\n</code></pre><p>我们进入到可视化页面后，会发现存在多个展示形式各异的视图。在实际应用当中，火焰图（Flame Graph）因为比较直观，所以用得最广泛。火焰图是按照自顶向下的方式来呈现的，这种排列方式能够清晰地展示出函数之间的调用关系。此外，在火焰图中，每一个横条的长度也有意义，横条越长，就意味着其所对应的资源消耗或者占用的情况越严重。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/d2/92c04a0300284f95cd99d6b1cfbcd0d2.jpg?wh=2898x942\" alt=\"\" title=\"图2 可视化视图\"></p><p>不过这里需要特别注意，尽管你可能会看到某个函数对应的横条很长，但实际上这有可能是<strong>由其下层的 “子调用” 所耗费的资源累加导致的</strong>。所以，在分析的时候，务必要着重关注 “下一层子调用” 各自的资源消耗分布情况。</p><p>比如下面的CPU火焰图，虽然我们直接看到的是expensiveCPU函数消耗比较高，但这主要是下层函数rand.Float32导致的。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/b1/3c982b5dc68f983f9def9a0a8f562cb1.jpg?wh=2898x828\" alt=\"\" title=\"图3 CPU 火焰图\"></p><p>又比如下面的内存火焰图，虽然表面是main.main函数的内存分配比较高，但主要也是下层函数expensiveMem导致的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/79/b8eb6efefb2a1218f6a0yy80cdfe0c79.jpg?wh=2898x770\" alt=\"\" title=\"图4 内存火焰图\"></p><p>利用火焰图定位到消耗CPU和内存资源的热点函数，我们可以通过右键点击，定位到具体的代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/8b/bf305eb004e53ed229dc3884bd67478b.jpg?wh=2888x768\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/bd/10/bd8bef435b64962faab3fe3d14d35510.jpg?wh=1544x1072\" alt=\"\" title=\"图5 内存分配热点代码\"></p><p>运用 pprof 工具，我们能够精准定位到那些消耗 CPU 以及内存资源的热点代码区域。在此基础上，还可以结合相关代码的上下文环境来深入分析出现这种情况的具体原因。</p><h2>benchmark功能：如何判断你的方案是可行的?</h2><p>然而，当我们已经成功找出问题产生的原因，并且着手去调研各种优化方案的时候，又该如何判断我们所制定的优化方案是否可行，尤其是它比起原来的方案究竟能够带来多大程度的性能提升呢？</p><p>在进行方案调研的过程中，我们需要针对各个优化点开展优化前后的性能对比测试工作。而 Golang 的测试框架为我们提供了一项十分有用的基准测试功能，它就是 benchmark。</p><p><strong>benchmark 能够协助我们对代码的性能状况进行评估，它主要的操作方式是在规定的一段时间内，不断地重复运行待测试的代码，随后输出代码的执行次数、单次运行的时间和内存分配的相关结果。</strong></p><p>接下来，我们利用一个简单的示例来对此进行验证，看看将字节切片转换为字符串的两种不同实现方式，究竟哪一种速度会更快一些。首先，我们需要编写一段用于基准测试的代码，具体内容如下：</p><pre><code class=\"language-go\">func BenchmarkBytes2StrRaw(b *testing.B) {\n    aa := []byte(\"abcdefg\")\n    for n := 0; n &lt; b.N; n++ {\n        Bytes2StrRaw(aa)\n    }\n}\nfunc BenchmarkBytes2StrUnsafe(b *testing.B) {\n    aa := []byte(\"abcdefg\")\n    for n := 0; n &lt; b.N; n++ {\n        Bytes2StrUnsafe(aa)\n    }\n}\n\nfunc Bytes2StrRaw(b []byte) string {\n    return string(b)\n}\n\nfunc Bytes2StrUnsafe(b []byte) string {\n    return *(*string)(unsafe.Pointer(&amp;b))\n}\n</code></pre><p>运行下面的go test命令，即可触发benchmark运行。</p><pre><code class=\"language-shell\"># -bench 表示需要benchmark运行的方法,.表示运行本目录所有Benchmark开头的方法\n# -benchmem 显示与内存分配相关的详细信息\n# -benchtime 设定每个基准测试用例的运行时间\n# -cpuprofile 生成 CPU 性能分析文件\n# -memprofile 生成内存性能分析文件\ngo test -bench='.' -benchmem -benchtime=10s -cpuprofile='cpu.prof' -memprofile='mem.prof'\n</code></pre><p>下面是benchmark输出的结果，通过单次运行消耗的时间，我们发现，下面这种字节切片转字符串的方式比上面那种更快。</p><pre><code class=\"language-shell\">#从左到右分别表示benchmark函数、运行次数、单次运行消耗的时间、单次运行内存分配的字节数和次数\nBenchmarkBytes2StrRaw-4         442384430               26.62 ns/op            8 B/op          1 allocs/op\nBenchmarkBytes2StrUnsafe-4      1000000000               1.524 ns/op           0 B/op          0 allocs/op\n</code></pre><h2>trace工具：是什么导致了接口响应延时高?</h2><p>尽管我们拥有 pprof 这样堪称神器的工具，然而它所呈现的仅仅是<strong>基于采样后得到的聚合信息，并不包含协程运行的详细情况</strong>。因此面对后面这类需求时，它就爱莫能助了，比如说，当我们遇到接口延时明显偏高的情况，此时若想要深入了解协程具体是如何运行的详细信息，像是究竟哪个协程的运行时长比较长，又或者是什么原因导致了协程的运行受到阻塞等等。</p><p>不过好在 Golang 还为我们提供了另外一款十分有用的工具——trace。</p><p>当我们开启 trace 功能之后，程序便会<strong>对下面的一系列事件进行详细记录，并且会依据所搜集到的这些信息，生成能够以可视化方式查看的 trace 视图</strong>。具体记录的事件如下：</p><ol>\n<li><strong>协程的创建过程、开始运行的时刻以及结束运行的时间点。</strong></li>\n<li><strong>协程由于系统调用、通道操作、锁的使用等情况而出现被阻塞的现象。</strong></li>\n<li><strong>网络 IO 相关的操作情况。</strong></li>\n<li><strong>垃圾收集的相关活动情况。</strong></li>\n</ol><p>那么trace该如何使用呢？</p><p>首先，和pprof一样，我们需要触发采集trace数据并生成trace报告。trace也支持多种采集触发方式。</p><p>通常对于线上应用，我们会引入net/http/pprof包，并在main函数中开放http端口。后面是示例代码。</p><pre><code class=\"language-go\">import (\n    \"net/http\"\n    _ \"net/http/pprof\"\n)\n\nfunc main() {\n    err := http.ListenAndServe(\":8888\", nil)\n    if err != nil {\n        panic(err)\n    }\n}\n</code></pre><p>程序跑起来后，我们可以通过直接访问url并加参数控制触发采集，就像下面这样。</p><pre><code class=\"language-shell\">curl \"http://localhost:8888/debug/pprof/trace?seconds=30\" &gt; trace.out\n</code></pre><p>对于不能采用开放http端口采集trace数据的场景，Golang提供了runtime/trace包，像下面的代码一样，我们可以通过在代码中显式的触发和结束trace，来生成trace报告。</p><pre><code class=\"language-go\">import (\n    \"runtime/trace\"\n)\n\n// 埋点触发的方式\nfunc main() {\n    // 创建trace性能分析文件\n    f, err := os.Create(\"trace.out\")\n    if err != nil {\n        panic(err)\n    }\n    defer f.Close()\n\n    if err := trace.Start(f); err != nil {\n        log.Fatalf(\"failed to start trace: %v\", err)\n    }\n    defer trace.Stop()\n\n    // your program here\n    RunMyProgram()\n}\n</code></pre><p>生成了报告以后，我们用trace工具打开文件，首页包含了多个链接。我们一般重点关注下面两个内容，它们会分别从处理器视角和协程视角分析程序的运行情况。</p><pre><code class=\"language-plain\">go tool trace trace.out\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/d2/30/d269d7350fe89b171e55d70210ce9230.jpg?wh=3713x2863\" alt=\"\" title=\"图6 trace 报告首页\"></p><p>有了trace报告，我们就可以分析协程阻塞情况和处理器是否得到充分使用。</p><p>比如我们想<strong>排查协程阻塞情况</strong>，就可以看协程分析（Goroutine analysis）视图。就像下面的图展示的一样，协程分析视图会将trace期间的所有协程，按运行时间降序排序。<br>\n<img src=\"https://static001.geekbang.org/resource/image/00/c7/00e830d8637340d94df2aa9b806e8ec7.jpg?wh=1746x832\" alt=\"\" title=\"图7 协程分析视图\"></p><p>点击单个协程，会进入下图单个协程的统计页面。在这个页面里，我们可以看到协程运行时间、同步阻塞时间、系统调用阻塞时间、调度延迟时间等。</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/c7/2a904d580174621542f320c81d950ec7.jpg?wh=2280x1418\" alt=\"\" title=\"图8 单个协程运行情况统计\"></p><p>当我们发现协程阻塞时间比较长时，可以通过点击Summary区的链接，就可以定位到具体的阻塞代码了。比如上图中的同步阻塞，我们点击Sync block profile可以定位到造成阻塞的代码，会发现存在通道读等待。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/9f/9cae43fc0a003cd448582aae6369959f.jpg?wh=1910x1166\" alt=\"\" title=\"图9 同步阻塞\"></p><p>再比如，当我们想要<strong>查看处理器的使用状况</strong>时，便可以使用处理器分析视图（View trace by Proc）。后面就是这个视图的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/c9/b6818ed151ceff4973db606aaa4d8ac9.jpg?wh=2882x1320\" alt=\"\" title=\"图10 处理器视图-协程状态统计\"></p><p>借助处理器视图，我们既能了解到多核是否处于被充分使用的状态，也能够知晓在某一特定时刻，处于不同状态的协程数量分别是多少。假如处于可调度（Runnable）状态的协程数量较多，这可能意味着创建的协程数量过多，导致无法得到 CPU 的有效调度。</p><p>此外，我们还能够查看在那些占用处理器时间的各类事件当中，究竟哪些是由垃圾回收（GC）所占用的。倘若垃圾回收占用 CPU 的时间过多，这同样也意味着程序处于一种不健康的运行状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/b1/d2f6d88e2a1c9eabf42e1c1d6f95cdb1.jpg?wh=2266x1482\" alt=\"\" title=\"图11 处理器视图-事件详情\"></p><h2>小结</h2><p>这节课的内容就到这里了，今天我们一共学习了三款 Golang 性能优化工具，并且了解了每个工具在分析各类问题时的具体用法。现在，我们再来一起回顾一下这几款工具的应用场景。</p><ul>\n<li>\n<p>首先是 pprof 工具。当我们发现CPU 或者内存资源的占用率过高时，借助 pprof 工具能够精准快速定位到消耗资源的热点代码。</p>\n</li>\n<li>\n<p>接着是 benchmark 工具。当我们有对不同方案进行性能对比的需求时，通过使用 benchmark 工具，可以获取到不同方案在耗时和内存消耗方面的对比详细情况。</p>\n</li>\n<li>\n<p>最后是 trace 工具。当我们发现接口的延时比较高，想要深入了解程序内部具体的运行状况的时候，比如说想知道协程是否存在阻塞、处理器有没有被充分地利用起来等等，这时候就可以运用 trace 工具来精准定位到那些导致协程运行受阻的相关代码。</p>\n</li>\n</ul><p>希望你能够好好体会在面对不同的性能场景时，应该如何去应用这几款性能工具。这样下次再碰到类似这些场景的时候，你就能很快找到趁手工具，更快找到出现瓶颈的原因，进而制定出有效的优化方案。</p><h2>思考题</h2><p>为什么有些公司会选择在 QPS 高峰期对线上进行 pprof 定时采样，而较少在此时进行 trace 操作呢？</p><p>欢迎你把你的答案分享在评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"01｜性能优化流程：刚开始做性能优化从何入手？","id":830657},"right":{"article_title":"03｜单机吞吐优化（一）：无需硬件升级也能提升吞吐","id":832423}},"comments":[{"had_liked":false,"id":396396,"user_name":"快叫我小白","can_delete":false,"product_type":"c1","uid":3571201,"ip_address":"上海","ucode":"7CAD65E36601A2","user_header":"https://static001.geekbang.org/account/avatar/00/36/7e/01/1660e1e8.jpg","comment_is_top":false,"comment_ctime":1734276878,"is_pvip":false,"replies":[{"id":143913,"content":"runtime包函数，属于Golang底层函数了，除了gc相关的函数是绝大多数以gc开头，其它没什么特别规则。我们可以熟悉下Golang底层常见的runtime函数大概是在做什么，分析火焰图时，遇到不认识的再去查。\n\n协程调度相关函数：\nruntime.mcall：用于从用户态代码切换到调度器。它通常被runtime.gosched调用，后者让出CPU，允许其他goroutine运行\nruntime.schedule：这是调度器的核心函数，负责选择下一个要运行的goroutine\nruntime.findrunnable：寻找可运行的goroutine\nruntime.runqget：从运行队列中获取goroutine\n\n内存分配函数：\nruntime.mallocgc：内存分配函数\n\n\n内存回收函数(GC)：\nruntime.gcDrain：执行GC的标记工作。这个函数尝试从缓冲池获取可追踪的指针，并调用runtime.scanobject函数继续执行扫描任务。\nruntime.gcAssistAlloc(*g)：辅助GC分配。这个函数在高负载情况下，帮助GC进行标记工作，以平衡内存分配的速度和GC标记的速度。\nruntime.gcMarkDone：完成标记阶段的GC工作\nruntime.gcSweep：执行GC的清理阶段","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1734359908,"ip_address":"广东","comment_id":396396,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100843701,"comment_content":"在公司的报警系统中我也常看到类似图9这样的调用图，但是图中每个方块的函数名都非常陌生，甚至从未见过，请教一下老师这些函数名有什么解读规则吗？","like_count":1,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655196,"discussion_content":"runtime包函数，属于Golang底层函数了，除了gc相关的函数是绝大多数以gc开头，其它没什么特别规则。我们可以熟悉下Golang底层常见的runtime函数大概是在做什么，分析火焰图时，遇到不认识的再去查。\n\n协程调度相关函数：\nruntime.mcall：用于从用户态代码切换到调度器。它通常被runtime.gosched调用，后者让出CPU，允许其他goroutine运行\nruntime.schedule：这是调度器的核心函数，负责选择下一个要运行的goroutine\nruntime.findrunnable：寻找可运行的goroutine\nruntime.runqget：从运行队列中获取goroutine\n\n内存分配函数：\nruntime.mallocgc：内存分配函数\n\n\n内存回收函数(GC)：\nruntime.gcDrain：执行GC的标记工作。这个函数尝试从缓冲池获取可追踪的指针，并调用runtime.scanobject函数继续执行扫描任务。\nruntime.gcAssistAlloc(*g)：辅助GC分配。这个函数在高负载情况下，帮助GC进行标记工作，以平衡内存分配的速度和GC标记的速度。\nruntime.gcMarkDone：完成标记阶段的GC工作\nruntime.gcSweep：执行GC的清理阶段","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1734359909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396536,"user_name":"我好像一点都不像程序员","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"广东","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/63189817.jpg","comment_is_top":false,"comment_ctime":1734860935,"is_pvip":false,"replies":[{"id":143948,"content":"这个提示还好，不影响trace视图正常功能，可以忽略的~","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1734878454,"ip_address":"广东","comment_id":396536,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100843701,"comment_content":"Trace Viewer is running with WebComponentsV0 polyfill, and some features may be broken. As a workaround, you may try running chrome with &quot;--enable-blink-features=ShadowDOMV0,CustomElementsV0,HTMLImports&quot; flag. See crbug.com&#47;1036492.\nhow to do?","like_count":0,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655413,"discussion_content":"这个提示还好，不影响trace视图正常功能，可以忽略的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734878454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396535,"user_name":"我好像一点都不像程序员","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"广东","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/63189817.jpg","comment_is_top":false,"comment_ctime":1734859900,"is_pvip":false,"replies":[{"id":143947,"content":"是用的这里的代码跑的么？https:&#47;&#47;github.com&#47;xuyi19921216&#47;server-go&#47;blob&#47;master&#47;2&#47;trace&#47;runtime&#47;main.go，我重新跑出来了下，goroutines分析视图还是这样的。\nStart location\tCount\tTotal execution time\nmain.main\t1\t81.217µs\nruntime.traceStartReadCPU.func1\t1\t44.545µs\nruntime.(*traceAdvancerState).start.func1\t1\t25.665µs\nmain.RunMyProgram1.func1\t1\t960ns\nruntime&#47;trace.Start.func1\t1\t0s\n(Inactive, no stack trace sampled)\t4\t0s","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1734878243,"ip_address":"广东","comment_id":396535,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100843701,"comment_content":"是版本问题吗，trace 我搞出来的。和老师的图不一样。长这个样子：\nGoroutines:\nruntime.main N=1\nruntime&#47;trace.Start.func1 N=1\nN=4","like_count":0,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655412,"discussion_content":"是用的这里的代码跑的么？https://github.com/xuyi19921216/server-go/blob/master/2/trace/runtime/main.go，我重新跑出来了下，goroutines分析视图还是这样的。\nStart location\tCount\tTotal execution time\nmain.main\t1\t81.217µs\nruntime.traceStartReadCPU.func1\t1\t44.545µs\nruntime.(*traceAdvancerState).start.func1\t1\t25.665µs\nmain.RunMyProgram1.func1\t1\t960ns\nruntime/trace.Start.func1\t1\t0s\n(Inactive, no stack trace sampled)\t4\t0s","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734878244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396374,"user_name":"巅","can_delete":false,"product_type":"c1","uid":1363244,"ip_address":"中国香港","ucode":"18239CFA501049","user_header":"https://static001.geekbang.org/account/avatar/00/14/cd/2c/a02a8372.jpg","comment_is_top":false,"comment_ctime":1734159215,"is_pvip":false,"replies":[{"id":143911,"content":"这个其实需要对Golang的底层runtime包有一定的了解。\n\nruntime是Golang底层内部的一些函数，CPU火焰图一般能看到的是下面几类：\n\n1. 协程调度相关函数：\n   runtime.mcall：用于进行goroutine的调度。\n   runtime.schedule：调度器的主要调度函数，负责选择和执行下一个goroutine。\n   runtime.findrunnable：寻找可运行的goroutine。\n\n2. 内存管理分配：\n   runtime.mallocgc：栈上做内存分配。\n\n3.内存回收(GC)相关：\n   runtime.gcDrain：执行GC的标记工作。这个函数尝试从缓冲池获取可追踪的指针，并调用runtime.scanobject函数继续执行扫描任务。\n   runtime.gcMarkDone：完成GC的标记。这个函数在所有可达的灰色对象都被染黑后被调用，负责完成标记阶段的收尾工作。\n   runtime.gcBgMarkStartWorkers：启动GC标记工作。\n   runtime.gcAssistAlloc：辅助GC分配。这个函数在高负载情况下，帮助GC进行标记工作，以平衡内存分配的速度和GC标记的速度。\n\n我们可以看下是哪类函数，然后针对性做分析。\n1.如果是协程调度相关的函数，需要考虑下是不是协程创建多了，导致频繁的做协程调度。\n2.如果是内存分配相关的函数，就需要考虑下代码里是不是在频繁的创建对象。\n3.如果是GC相关的函数，需要考虑是不是存在大量的小对象，比如说本地缓存了大量对象，GC在做扫描标记。\n   \n针对你说的“定时任务以及携程，最终pprof的结果打头都是runtime包的函数\n看不到调用链，堆栈第一个都是runtime.mcall之类”，可以考虑下代码里是不是在频繁创建协程，能不能用协程池之类的做优化。","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1734358918,"ip_address":"广东","comment_id":396374,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100843701,"comment_content":"程序里多个定时任务以及携程，最终pprof的结果打头都是runtime包的函数\n看不到调用链，堆栈第一个都是runtime.mcall之类，这种则怎么分析呢","like_count":0,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655194,"discussion_content":"这个其实需要对Golang的底层runtime包有一定的了解。\n\nruntime是Golang底层内部的一些函数，CPU火焰图一般能看到的是下面几类：\n\n1. 协程调度相关函数：\n   runtime.mcall：用于进行goroutine的调度。\n   runtime.schedule：调度器的主要调度函数，负责选择和执行下一个goroutine。\n   runtime.findrunnable：寻找可运行的goroutine。\n\n2. 内存管理分配：\n   runtime.mallocgc：栈上做内存分配。\n\n3.内存回收(GC)相关：\n   runtime.gcDrain：执行GC的标记工作。这个函数尝试从缓冲池获取可追踪的指针，并调用runtime.scanobject函数继续执行扫描任务。\n   runtime.gcMarkDone：完成GC的标记。这个函数在所有可达的灰色对象都被染黑后被调用，负责完成标记阶段的收尾工作。\n   runtime.gcBgMarkStartWorkers：启动GC标记工作。\n   runtime.gcAssistAlloc：辅助GC分配。这个函数在高负载情况下，帮助GC进行标记工作，以平衡内存分配的速度和GC标记的速度。\n\n我们可以看下是哪类函数，然后针对性做分析。\n1.如果是协程调度相关的函数，需要考虑下是不是协程创建多了，导致频繁的做协程调度。\n2.如果是内存分配相关的函数，就需要考虑下代码里是不是在频繁的创建对象。\n3.如果是GC相关的函数，需要考虑是不是存在大量的小对象，比如说本地缓存了大量对象，GC在做扫描标记。\n   \n针对你说的“定时任务以及携程，最终pprof的结果打头都是runtime包的函数\n看不到调用链，堆栈第一个都是runtime.mcall之类”，可以考虑下代码里是不是在频繁创建协程，能不能用协程池之类的做优化。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1734358918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363244,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cd/2c/a02a8372.jpg","nickname":"巅","note":"","ucode":"18239CFA501049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655355,"discussion_content":"多谢老师\n另外关于runtime包的，想系统性学习下，有没有推荐的书籍或者博客","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734677769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396360,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1478117,"ip_address":"河南","ucode":"6DD7DEECF39AF8","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/e5/f3df7b02.jpg","comment_is_top":false,"comment_ctime":1734077150,"is_pvip":false,"replies":[{"id":143891,"content":"是用github上的trace.out文件么？你可以用里面的代码本地重新生成一个，跟Go的版本有关系。","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1734326285,"ip_address":"广东","comment_id":396360,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100843701,"comment_content":" go tool trace trace.out\n2024&#47;12&#47;13 16:03:34 Preparing trace for viewer...\nfailed to create trace reader: bad file format: not a Go execution trace?是版本的问题吗，我的版本go version go1.23.2 windows&#47;amd64","like_count":0,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655144,"discussion_content":"是用github上的trace.out文件么？你可以用里面的代码本地重新生成一个，跟Go的版本有关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734326285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396285,"user_name":"onemao","can_delete":false,"product_type":"c1","uid":1969439,"ip_address":"上海","ucode":"1CB4101525C2D1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rURvBicplInVqwb9rX21a4IkcKkITIGIo7GE1Tcp3WWU49QtwV53qY8qCKAIpS6x68UmH4STfEcFDJddffGC7lw/132","comment_is_top":false,"comment_ctime":1733878552,"is_pvip":false,"replies":[{"id":143863,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1313417,"ctime":1733933358,"ip_address":"广东","comment_id":396285,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100843701,"comment_content":"高峰期pprof采样容易获得&quot;极限值&quot;,较少时trace是因为样本少容易获取，分析trace也更方便","like_count":0,"discussions":[{"author":{"id":1313417,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/89/eb8c28a4.jpg","nickname":"徐逸","note":"","ucode":"DCFDEE08FD263A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654991,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733933358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}