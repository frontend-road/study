{"id":803362,"title":"25｜技术解析：HTTPS跟踪详解（下）","content":"<p>你好，我是倪朋飞。</p><p>上一讲我带你一起回顾了 HTTP 和 HTTPS 协议的工作原理，并以套接字 eBPF 程序为例带你学习了如何使用 eBPF 程序跟踪 HTTP 网络包。由于 HTTP 网络包传输的数据是明文的，所以我们可以直接从套接字中读取到 HTTP 请求和响应的具体内容。而 HTTPS 则不同，由于 TLS 加密的过程发生在用户态，从内核态看到的总是加密后的数据。所以，要跟踪 HTTPS 网络包，就必须要从用户态跟踪入手了。</p><p>那么， 该如何使用 eBPF 用户态程序跟踪 HTTPS 呢，今天，我就带你一起去看看这个问题。</p><h2>如何确定用户态跟踪点</h2><p>既然要使用用户态程序跟踪 HTTPS，那么我想进入你脑海的第一个问题就是有哪些用户态跟踪点可以使用呢？没错，这正是我们需要解决的第一个问题。</p><p>用户态不同于内核，每个应用程序的源码、编程语言、运行时等都不同，所以在选择跟踪点时需要考察它们有哪些共同的部分，这样跟踪共同的模块才可以涵盖更广的应用场景，避免为每一个应用再去做适配（当然，通用性也是 eBPF 的一个目标）。</p><p>对于我们今天的主题 HTTPS 来说，跟踪的主要难点在于 TLS 加密，而你一定听说过 TLS 加密协议最流行的开源库——<a href=\"https://www.openssl.org/\">OpenSSL</a>。OpenSSL 是一个功能强大的开源加密库，广泛应用于加密通信、证书管理和数据安全中。</p><!-- [[[read_end]]] --><p>应用程序开发者通常以动态链接的方式借助 OpenSSL 库来实现加密通信。你可以使用 <code>ldd</code> 命令查看程序依赖库的列表，从而确认应用程序是否使用了 OpenSSL。比如，<code>curl</code>、<code>nginx</code> 等都是使用 OpenSSL 的典型应用。</p><pre><code class=\"language-plain\">$ ldd /usr/sbin/nginx | grep ssl\n\tlibssl.so.3 =&gt; /lib/x86_64-linux-gnu/libssl.so.3 (0x000079ffab4f7000)\n \n$ ldd /usr/bin/curl | grep ssl\n\tlibssl.so.3 =&gt; /lib/x86_64-linux-gnu/libssl.so.3 (0x00007574d135c000)\n</code></pre><p>当然了，只知道应用使用了 OpenSSL 库还不够，用户态跟踪还需要知道具体的挂载点，也就是应用中所调用的函数。参考 <a href=\"https://docs.openssl.org/master/man7/ossl-guide-tls-client-block/\">OpenSSL 文档</a>，典型的 TLS 通信过程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/92/a40acdea3ff6dc233d890a5dyy175692.jpg?wh=1834x3202\" alt=\"图片\"></p><p>从上图中你可以发现，典型的 TLS 通信过程包括 TCP 握手、TLS 握手、数据传输以及连接终止等过程。我们课程的主题是跟踪 HTTPS 网络包，所以需要特别关注数据传输部分，也就是对应的 SSL_read/SSL_write 系列函数，它们也将是我们 eBPF 程序所需要的跟踪点。</p><p>参考 <a href=\"https://docs.openssl.org/master/man3/SSL_read/\">SSL_read</a> 和 <a href=\"https://docs.openssl.org/master/man3/SSL_write/\">SSL_write</a> 的开发文档，它们的定义格式如下所示：</p><pre><code class=\"language-cpp\">int SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);\nint SSL_read(SSL *ssl, void *buf, int num);\n\n\nint SSL_write_ex(SSL *ssl, const void *buf, size_t num, size_t *written);\nint SSL_write(SSL *ssl, const void *buf, int num);\n</code></pre><p>这其中：</p><ul>\n<li><code>ssl</code> 表示已经建立的 SSL 连接；</li>\n<li><code>buf</code> 表示读取或者写入数据的缓冲区，这也正是我们想要的数据；</li>\n<li><code>num</code> 表示要读取或者写入数据的最大长度（单位是字节）；</li>\n<li>带 ex 后缀的函数还额外支持 <code>readbytes</code> 和 <code>written</code> 指针参数，分别表示操作完成后实际读取的字节数和实际写入的字节数。</li>\n</ul><p>到这里，用户态应用的跟踪点就非常清楚了，接下来我们就可以开始正式的 eBPF 程序开发了。</p><h2>如何用 eBPF 跟踪 HTTPS 网络包</h2><p>同上篇中的 HTTP 网络包跟踪一样，我们这节课继续使用 libbpf 来构造 HTTPS 的网络跟踪 eBPF 程序，这包括内核态 eBPF 程序和用户态的前端程序。</p><p>还记得用户态 eBPF 程序详细的开发步骤吗？不记得也没关系，你可以查看我们课程<a href=\"https://time.geekbang.org/column/article/484458\">第 09 讲</a>的内容，回顾如何使用 eBPF 用户态跟踪排查应用程序。</p><h3>内核态 eBPF 程序</h3><p>先来看内核态 eBPF 程序的开发。</p><p>用户态函数的跟踪包括 uprobe 和 uretprobe 两类，分别用于跟踪函数入口（比如跟踪入口参数）和函数返回（比如跟踪返回值）的场景。对于我们要跟踪的 SSL_read/SSL_write 函数，都带有一个 <code>void *buf</code> 参数，那是不是只用 uprobe 就可以直接从 <code>buf</code> 中读取我们想要的数据了呢？</p><p>答案是否定的，只有在 <code>SSL_read()</code> 函数的内部才会从 SSL 连接读取数据并保存到 <code>buf</code> 中，而在函数调用的入口处是无法读到 <code>buf</code> 未来的数据的。所以，我们需要在 uretprobe 中读取数据。但是，uretprobe 能直接读取的只有返回值，那怎么读到入口参数呢？我想你一定想到了，那就是借助一个 BPF 映射，在 uprobe 中把入口参数存入 BPF 映射中，再到 uretprobe 中读出来。</p><p>为了方便用户态跟踪程序的开发，Libbpf 提供了 <a href=\"https://github.com/libbpf/libbpf/blob/b07dfe3b2a6cb0905e883510f22f9f7c0bb66d0d/src/bpf_tracing.h#L915\">BPF_UPROBE</a> 和 <a href=\"https://github.com/libbpf/libbpf/blob/b07dfe3b2a6cb0905e883510f22f9f7c0bb66d0d/src/bpf_tracing.h#L915\">BPF_URETPROBE</a> 这两个宏，可以很方便地用来定义 uprobe 和 uretprobe 处理函数。BPF_UPROBE/BPF_URETPROBE 的使用方法跟 BPF_KPROBE/BPF_KRETPROBE 是完全一样的，它们的签名格式如下所示：</p><pre><code class=\"language-cpp\">/* BPF_UPROBE and BPF_URETPROBE are identical to BPF_KPROBE and BPF_KRETPROBE,\n * but are named way less confusingly for SEC(\"uprobe\") and SEC(\"uretprobe\")\n * use cases.\n */\n#define BPF_UPROBE(name, args...)  BPF_KPROBE(name, ##args)\n#define BPF_URETPROBE(name, args...)  BPF_KRETPROBE(name, ##args)\n/*\n * BPF_KPROBE serves the same purpose for kprobes as BPF_PROG for\n * tp_btf/fentry/fexit BPF programs. It hides the underlying platform-specific\n * low-level way of getting kprobe input arguments from struct pt_regs, and\n * provides a familiar typed and named function arguments syntax and\n * semantics of accessing kprobe input paremeters.\n *\n * Original struct pt_regs* context is preserved as 'ctx' argument. This might\n * be necessary when using BPF helpers like bpf_perf_event_output().\n */\n#define BPF_KPROBE(name, args...)\t\t\t\t\t    \\\nname(struct pt_regs *ctx);\t\t\t\t\t\t    \\\nstatic __always_inline typeof(name(0))\t\t\t\t\t    \\\n____##name(struct pt_regs *ctx, ##args);\t\t\t\t    \\\ntypeof(name(0)) name(struct pt_regs *ctx)\t\t\t\t    \\\n{\t\t\t\t\t\t\t\t\t    \\\n\t_Pragma(\"GCC diagnostic push\")\t\t\t\t\t    \\\n\t_Pragma(\"GCC diagnostic ignored \\\"-Wint-conversion\\\"\")\t\t    \\\n\treturn ____##name(___bpf_kprobe_args(args));\t\t\t    \\\n\t_Pragma(\"GCC diagnostic pop\")\t\t\t\t\t    \\\n}\t\t\t\t\t\t\t\t\t    \\\nstatic __always_inline typeof(name(0))\t\t\t\t\t    \\\n____##name(struct pt_regs *ctx, ##args)\n/*\n * BPF_KRETPROBE is similar to BPF_KPROBE, except, it only provides optional\n * return value (in addition to `struct pt_regs *ctx`), but no input\n * arguments, because they will be clobbered by the time probed function\n * returns.\n */\n#define BPF_KRETPROBE(name, args...)\t\t\t\t\t    \\\nname(struct pt_regs *ctx);\t\t\t\t\t\t    \\\nstatic __always_inline typeof(name(0))\t\t\t\t\t    \\\n____##name(struct pt_regs *ctx, ##args);\t\t\t\t    \\\ntypeof(name(0)) name(struct pt_regs *ctx)\t\t\t\t    \\\n{\t\t\t\t\t\t\t\t\t    \\\n\t_Pragma(\"GCC diagnostic push\")\t\t\t\t\t    \\\n\t_Pragma(\"GCC diagnostic ignored \\\"-Wint-conversion\\\"\")\t\t    \\\n\treturn ____##name(___bpf_kretprobe_args(args));\t\t\t    \\\n\t_Pragma(\"GCC diagnostic pop\")\t\t\t\t\t    \\\n}\t\t\t\t\t\t\t\t\t    \\\nstatic __always_inline typeof(name(0)) ____##name(struct pt_regs *ctx, ##args)\n</code></pre><p>由于 SSL_read/SSL_write 函数的前面三个参数和返回值定义格式都是一样的，所以它们的跟踪程序逻辑可以共享，比如可以为它们定义公共的处理函数，具体的代码如下：</p><pre><code class=\"language-cpp\">SEC(\"uprobe/SSL_read\")\nint BPF_UPROBE(probe_SSL_read_entry, void *ssl, void *buf, int num)\n{\n    return SSL_rw_entry(ctx, ssl, buf, num);\n}\n\n\nSEC(\"uprobe/SSL_write\")\nint BPF_UPROBE(probe_SSL_write_entry, void *ssl, void *buf, int num)\n{\n    return SSL_rw_entry(ctx, ssl, buf, num);\n}\n\n\nSEC(\"uretprobe/SSL_read\")\nint BPF_URETPROBE(probe_SSL_read_exit)\n{\n    return SSL_rw_exit(ctx, 0); // 0表示读\n}\n\n\nSEC(\"uretprobe/SSL_write\")\nint BPF_URETPROBE(probe_SSL_write_exit)\n{\n    return SSL_rw_exit(ctx, 1); // 1表示写\n}\n</code></pre><p><code>SSL_rw_entry()</code> 要做的事情比较简单，就是把入口参数存入 BPF 映射中（比如使用哈希映射），具体代码如下：</p><pre><code class=\"language-cpp\">// 用于存储SSL读写缓冲区的哈希映射\nstruct {\n  __uint(type, BPF_MAP_TYPE_HASH);\n  __uint(max_entries, 1024);\n  __type(key, __u32);   // tid\n  __type(value, __u64); // buf地址\n} bufs SEC(\".maps\");\n\n\n// 存储SSL读写缓冲区的地址到哈希映射\nstatic int SSL_rw_entry(struct pt_regs *ctx, void *ssl, void *buf, int num)\n{\n  u64 pid_tgid = bpf_get_current_pid_tgid();\n  u32 tid = (u32) pid_tgid;\n  bpf_map_update_elem(&amp;bufs, &amp;tid, (u64 *) &amp; buf, BPF_ANY);\n  return 0;\n}\n</code></pre><p>把 SSL 读取和写入数据的缓冲区地址存入哈希映射后，<code>SSL_rw_exit()</code> 要做的事情自然就是从哈希映射中拿出缓冲区地址、读取缓冲区数据，最后再通过 perf event 把数据传输给用户态，具体的代码如下：</p><pre><code class=\"language-cpp\">static int SSL_rw_exit(struct pt_regs *ctx, int rw)\n{\n\tu64 pid_tgid = bpf_get_current_pid_tgid();\n\tu32 pid = pid_tgid &gt;&gt; 32;\n\tu32 tid = (u32) pid_tgid;\n\n\n\t// 从哈希映射中读取SSL读写缓冲区的地址\n\tu64 *bufp = bpf_map_lookup_elem(&amp;bufs, &amp;tid);\n\tif (!bufp) {\n\t\treturn 0;\n\t}\n\n\n\t// 从寄存器中读取函数调用的返回值\n\tint len = PT_REGS_RC(ctx);\n\tif (len &lt;= 0) {\n\t\treturn 0;\n\t}\n\n\n\t// 分配一个数据缓冲区\n\t__u32 zero = 0;\n\tstruct event_t *event = bpf_map_lookup_elem(&amp;data_buffer_heap, &amp;zero);\n\tif (!event) {\n\t\treturn 0;\n\t}\n\n\n\t// 元数据填充\n\tevent-&gt;rw = rw;\n\tevent-&gt;pid = pid;\n\tevent-&gt;uid = bpf_get_current_uid_gid();\n\tbpf_get_current_comm(&amp;event-&gt;comm, sizeof(event-&gt;comm));\n\n\n\t// 读取SSL读写缓冲区的数据\n\tevent-&gt;len = (size_t)MAX_BUF_LENGTH &lt; (size_t)len ? (size_t) MAX_BUF_LENGTH : (size_t) len;\n\tif (bufp != NULL) {\n\t\tbpf_probe_read_user(event-&gt;buf, event-&gt;len,\n\t\t\t\t&nbsp; &nbsp; (const char *)*bufp);\n\t}\n\tbpf_map_delete_elem(&amp;bufs, &amp;tid);\n&nbsp;&nbsp;\n\t// 将数据缓冲区的数据发送到perf event\n\tbpf_perf_event_output(ctx, &amp;events, BPF_F_CURRENT_CPU, event,\n\t\t\t&nbsp; &nbsp; &nbsp; sizeof(struct event_t));\n\treturn 0;\n}\n</code></pre><p>将上述代码保存到 <code>https_trace.bpf.c</code> 文件中，执行下面的 clang 和 bpftool 命令，编译 eBPF 字节码并生成对应的脚手架头文件。</p><pre><code class=\"language-cpp\">clang -g -O2 -target bpf -c https_trace.bpf.c -D__TARGET_ARCH_x86_64 -I/usr/include/x86_64-linux-gnu -I. -o https_trace.bpf.o\nbpftool gen skeleton https_trace.bpf.o &gt; https_trace.skel.h\n</code></pre><blockquote>\n<p>完整的 eBPF 代码请参考 GitHub <a href=\"https://github.com/feiskyer/ebpf-apps/blob/main/bpf-apps/https_trace.bpf.c\">https_trace.bpf.c</a></p>\n</blockquote><h3>用户态前端程序</h3><p>有了 eBPF 程序生成的脚手架头文件之后，用户态程序的开发也就比较直观了。忽略异常处理和通用 eBPF 程序都需要的公共代码外，主要的代码如下所示：</p><pre><code class=\"language-cpp\">\t// 查找OpenSSL库的路径\n\tchar *libssl_path = find_library_path(\"libssl.so\");\n\tif (!libssl_path) {\n\t\tfprintf(stderr, \"Failed to find libssl.so\\n\");\n\t\treturn 1;\n\t}\n\n\n\t// 加载BPF程序\n\tskel = https_trace_bpf__open_and_load();\n\tif (!skel) {\n\t\tfprintf(stderr, \"Failed to open and load BPF skeleton\\n\");\n\t\treturn 1;\n\t}\n\n\n\t// 创建buffer并绑定事件处理回调\n\tpb = perf_buffer__new(bpf_map__fd(skel-&gt;maps.events), 16,\n\t\t\t&nbsp; &nbsp; &nbsp; handle_event, NULL, NULL, NULL);\n\tif (!pb) {\n\t\tfprintf(stderr, \"Failed to create perf buffer\\n\");\n\t\tgoto cleanup;\n\t}\n\n\n\t// 挂载uprobe到OpenSSL库\n\tprintf(\"Attaching uprobe to %s\\n\", libssl_path);\n\t// SSL_read\n\tLIBBPF_OPTS(bpf_uprobe_opts, uprobe_ropts,.func_name = \"SSL_read\");\n\tskel-&gt;links.probe_SSL_read_entry =\n\t&nbsp; &nbsp; bpf_program__attach_uprobe_opts(skel-&gt;progs.probe_SSL_read_entry,\n\t\t\t\t\t&nbsp; &nbsp; -1, libssl_path, 0, &amp;uprobe_ropts);\n\tLIBBPF_OPTS(bpf_uprobe_opts, uprobe_ropts_ret,.func_name =\n\t\t&nbsp; &nbsp; \"SSL_read\",.retprobe = true);\n\tskel-&gt;links.probe_SSL_read_exit =\n\t&nbsp; &nbsp; bpf_program__attach_uprobe_opts(skel-&gt;progs.probe_SSL_read_exit, -1,\n\t\t\t\t\t&nbsp; &nbsp; libssl_path, 0, &amp;uprobe_ropts_ret);\n\t// SSL_write\n\tLIBBPF_OPTS(bpf_uprobe_opts, uprobe_wopts,.func_name = \"SSL_write\");\n\tskel-&gt;links.probe_SSL_write_entry =\n\t&nbsp; &nbsp; bpf_program__attach_uprobe_opts(skel-&gt;progs.probe_SSL_write_entry,\n\t\t\t\t\t&nbsp; &nbsp; -1, libssl_path, 0, &amp;uprobe_wopts);\n\tLIBBPF_OPTS(bpf_uprobe_opts, uprobe_wopts_ret,.func_name =\n\t\t&nbsp; &nbsp; \"SSL_write\",.retprobe = true);\n\tskel-&gt;links.probe_SSL_write_exit =\n\t&nbsp; &nbsp; bpf_program__attach_uprobe_opts(skel-&gt;progs.probe_SSL_write_exit,\n\t\t\t\t\t&nbsp; &nbsp; -1, libssl_path, 0,\n\t\t\t\t\t&nbsp; &nbsp; &amp;uprobe_wopts_ret);\n\n\n\t// 从Buffer中读取数据\n\tprintf(\"Tracing HTTPS traffic... Hit Ctrl-C to end.\\n\");\n\twhile (!exiting) {\n\t\terr = perf_buffer__poll(pb, 100);\n\t\tif (err == -EINTR) {\n\t\t\terr = 0;\n\t\t\tbreak;\n\t\t}\n\t\tif (err &lt; 0) {\n\t\t\tfprintf(stderr, \"Error polling perf buffer: %d\\n\", err);\n\t\t\tbreak;\n\t\t}\n\t}\n</code></pre><p>从这段代码可以看出用户态的前端程序跟上一讲的 HTTP 跟踪步骤是类似的，需要注意的有两点：</p><ul>\n<li>第一，eBPF 程序的挂载方式不同，上一讲是挂载到原始套接字，而这儿是挂载到动态链接库 libssl.so。</li>\n<li>第二，用户态跟踪需要挂载到具体的动态链接库或者可执行文件上，这些文件的路径可能不是唯一的，所以可以在程序中动态查找它们的路径。<code>find_library_path()</code> 的实现如下所示：</li>\n</ul><pre><code class=\"language-cpp\">// 查找库的路径\nchar *find_library_path(const char *libname)\n{\n    char cmd[256];\n    static char path[256];\n    snprintf(cmd, sizeof(cmd), \"ldconfig -p | grep %s\", libname);\n    FILE *fp = popen(cmd, \"r\");\n    if (!fp) {\n        fprintf(stderr, \"Failed to run command: %s\\n\", cmd);\n        return NULL;\n    }\n\n\n    // 格式: libssl3.so (libc6,x86-64) =&gt; /lib/x86_64-linux-gnu/libssl3.so\n    if (fgets(path, sizeof(path) - 1, fp) != NULL) {\n        char *p = strrchr(path, '&gt;');\n        if (p &amp;&amp; *(p + 1) == ' ') {\n            memmove(path, p + 2, strlen(p + 2) + 1);\n            char *end = strchr(path, '\\n');\n            if (end) {\n                *end = '\\0';\n            }\n            pclose(fp);\n            return path;\n        }\n    }\n\n\n    pclose(fp);\n    return NULL;\n}\n</code></pre><blockquote>\n<p>完整的用户态代码请参考 GitHub <a href=\"https://github.com/feiskyer/ebpf-apps/blob/main/bpf-apps/https_trace.c\">https_trace.c</a></p>\n</blockquote><p>将用户态程序保存到 <code>https_trace.c</code>，并将其编译之后以 root 用户运行。打开另外一个终端，并运行 <code>curl https://baidu.com</code> 命令，回到 eBPF 程序终端，你将看到如下的输出：</p><pre><code class=\"language-plain\">====================================\ncurl    write\n\n\nGET / HTTP/1.1\nHost: baidu.com\nUser-Agent: curl/7.81.0\nAccept: */*\n\n\n\n\n====================================\ncurl    read\n\n\nHTTP/1.1 302 Moved Temporarily\nServer: bfe/1.0.8.18\nDate: Sun, 11 Aug 2024 12:51:57 GMT\nContent-Type: text/html\nContent-Length: 161\nConnection: keep-alive\nLocation: http://www.baidu.com/\n\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;\n&lt;body bgcolor=\"white\"&gt;\n&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;\n&lt;hr&gt;&lt;center&gt;bfe/1.0.8.18&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>恭喜你，你已经成功跟踪到了 HTTPS 请求的详细内容。有了这个跟踪程序，以后你再也不用担心无法对 HTTPS 进行抓包的问题了。</p><h2>小结</h2><p>今天，我带你一起梳理了 OpenSSL 的基本工作原理，并以用户态 eBPF 程序为例带你学习了如何跟踪 HTTPS 网络包。由于应用程序对 HTTPS 数据的加解密都会调用 SSL_read/SSL_write 函数，所以只需要跟踪这两个函数就可以获取我们想要的明文数据。</p><p>当然，OpenSSL 虽然是最流行的开源加密库，却也并非唯一的选择。LibreSSL、BoringSSL、GnuTLS、NSS 等开源库也有许多用户。因此，要完整跟踪所有应用的 HTTPS 请求，还需要跟踪和支持其他主流的加密库。把这些加密库都实现起来也还是有一定的困难的，好在 eBPF 技术还有庞大的开源社区，你所需要的功能已经有开源项目帮你实现了。<a href=\"https://github.com/gojue/ecapture\">eCapture</a> 就是这样一个项目，你可以在需要时直接拿过来使用。</p><h2>思考</h2><p>在前面的例子中，我们访问百度网站，可以看到完美跟踪了请求和响应数据，但在访问其他网站的时候却不是。比如，访问谷歌网站可以看到如下的输出：</p><pre><code class=\"language-plain\">====================================\ncurl    write\nPRI * HTTP/2.0\nSM\n====================================\ncurl    write\nd\n====================================\ncurl    write\n�\n====================================\ncurl    write\n��A��皂�C�z�%�Pë��S*/*\n====================================\ncurl    read\nd\n====================================\ncurl    write\n====================================\ncurl    read\n====================================\ncurl    read\n�dn��)�cǏ\n         �s�AW!�c_�I|���Mjq؂��@�!�IjJ�)-����g�������%c�G��&lt;}\nD������}�4kl2���_���XjҲ,\"���B�&gt;�����r���)��~��J�&amp;�+I��b�?Յ��%d��/�S�[R)V/q����Vԁ�U�U���IҚ�qIҚ�}�Z�bV��):SZ.0�Z�\n                                                                                                              ��9栫���DV����9lZz���m_J*Cli@�p\"��Jbѿd��i~�Z�ҁf�Eq��ţX����1&gt;��~VŀM� vgws\\��@��!j�:JD��0@����z�cԏ�����œO@�      Yɤ��?��4����#�M� S�������L�?jR8��\n====================================\ncurl    read\n�&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\n&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;\n&lt;H1&gt;301 Moved&lt;/H1&gt;\nThe document has moved\n&lt;A HREF=\"https://www.google.com/\"&gt;here&lt;/A&gt;.\n&lt;/BODY&gt;&lt;/HTML&gt;\n====================================\ncurl    read\n====================================\ncurl    read\n�\n</code></pre><p>我想邀请你来聊一聊：</p><ol>\n<li>同样都是访问 HTTPS 网站，为什么这次的输出变多了，还有很多的乱码？</li>\n<li>如何改进跟踪程序，让它更好支持这类访问请求？</li>\n</ol><p>期待你在留言区和我讨论，也欢迎把这节课分享给你的同事、朋友。让我们一起在实战中演练，在交流中进步。</p>","neighbors":{"left":{"article_title":"24｜技术解析：HTTPS跟踪详解（上）","id":803357},"right":[]},"comments":[]}