{"id":387602,"title":"13 | API 风格（下）：RPC API介绍","content":"<p>你好，我是孔令飞。这一讲，我们继续来看下如何设计应用的API风格。</p><p>上一讲，我介绍了REST API风格，这一讲我来介绍下另外一种常用的API风格，RPC。在Go项目开发中，如果业务对性能要求比较高，并且需要提供给多种编程语言调用，这时候就可以考虑使用RPC API接口。RPC在Go项目开发中用得也非常多，需要我们认真掌握。</p><h2>RPC介绍</h2><p>根据维基百科的定义，RPC（Remote Procedure Call），即远程过程调用，是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员不用额外地为这个交互作用编程。</p><p>通俗来讲，就是服务端实现了一个函数，客户端使用RPC框架提供的接口，像调用本地函数一样调用这个函数，并获取返回值。RPC屏蔽了底层的网络通信细节，使得开发人员无需关注网络编程的细节，可以将更多的时间和精力放在业务逻辑本身的实现上，从而提高开发效率。</p><p>RPC的调用过程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/98/1d/984yy094616b9b24193b22a1f2f2271d.png?wh=2521x1671\" alt=\"\"></p><p>RPC调用具体流程如下：</p><ol>\n<li>Client通过本地调用，调用Client Stub。</li>\n<li>Client Stub将参数打包（也叫Marshalling）成一个消息，然后发送这个消息。</li>\n<li>Client所在的OS将消息发送给Server。</li>\n<li>Server端接收到消息后，将消息传递给Server Stub。</li>\n<li>Server Stub将消息解包（也叫 Unmarshalling）得到参数。</li>\n<li>Server Stub调用服务端的子程序（函数），处理完后，将最终结果按照相反的步骤返回给 Client。</li>\n</ol><!-- [[[read_end]]] --><p>这里需要注意，Stub负责调用参数和返回值的流化（serialization）、参数的打包和解包，以及网络层的通信。Client端一般叫Stub，Server端一般叫Skeleton。</p><p>目前，业界有很多优秀的RPC协议，例如腾讯的Tars、阿里的Dubbo、微博的Motan、Facebook的Thrift、RPCX，等等。但使用最多的还是<a href=\"https://github.com/grpc/grpc-go\">gRPC</a>，这也是本专栏所采用的RPC框架，所以接下来我会重点介绍gRPC框架。</p><h2>gRPC介绍</h2><p>gRPC是由Google开发的高性能、开源、跨多种编程语言的通用RPC框架，基于HTTP 2.0协议开发，默认采用Protocol Buffers数据序列化协议。gRPC具有如下特性：</p><ul>\n<li>支持多种语言，例如 Go、Java、C、C++、C#、Node.js、PHP、Python、Ruby等。</li>\n<li>基于IDL（Interface Definition Language）文件定义服务，通过proto3工具生成指定语言的数据结构、服务端接口以及客户端Stub。通过这种方式，也可以将服务端和客户端解耦，使客户端和服务端可以并行开发。</li>\n<li>通信协议基于标准的HTTP/2设计，支持双向流、消息头压缩、单TCP的多路复用、服务端推送等特性。</li>\n<li>支持Protobuf和JSON序列化数据格式。Protobuf是一种语言无关的高性能序列化框架，可以减少网络传输流量，提高通信效率。</li>\n</ul><p>这里要注意的是，gRPC的全称不是golang Remote Procedure Call，而是google Remote Procedure Call。</p><p>gRPC的调用如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/01/09/01ac424c7c1d64f678e1218827bc0109.png?wh=2079x1025\" alt=\"\"></p><p>在gRPC中，客户端可以直接调用部署在不同机器上的gRPC服务所提供的方法，调用远端的gRPC方法就像调用本地的方法一样，非常简单方便，通过gRPC调用<strong>，我们可以非常容易地构建出一个分布式应用。</strong></p><p>像很多其他的RPC服务一样，gRPC也是通过IDL语言，预先定义好接口（接口的名字、传入参数和返回参数等）。在服务端，gRPC服务实现我们所定义的接口。在客户端，gRPC存根提供了跟服务端相同的方法。</p><p>gRPC支持多种语言，比如我们可以用Go语言实现gRPC服务，并通过Java语言客户端调用gRPC服务所提供的方法。通过多语言支持，我们编写的gRPC服务能满足客户端多语言的需求。</p><p>gRPC API接口通常使用的数据传输格式是Protocol Buffers。接下来，我们就一起了解下Protocol Buffers。</p><h2>Protocol Buffers介绍</h2><p>Protocol Buffers（ProtocolBuffer/ protobuf）是Google开发的一套对数据结构进行序列化的方法，可用作（数据）通信协议、数据存储格式等，也是一种更加灵活、高效的数据格式，与XML、JSON类似。它的传输性能非常好，所以常被用在一些对数据传输性能要求比较高的系统中，作为数据传输格式。Protocol Buffers的主要特性有下面这几个。</p><ul>\n<li>更快的数据传输速度：protobuf在传输时，会将数据序列化为二进制数据，和XML、JSON的文本传输格式相比，这可以节省大量的IO操作，从而提高数据传输速度。</li>\n<li>跨平台多语言：protobuf自带的编译工具 protoc 可以基于protobuf定义文件，编译出不同语言的客户端或者服务端，供程序直接调用，因此可以满足多语言需求的场景。</li>\n<li>具有非常好的扩展性和兼容性，可以更新已有的数据结构，而不破坏和影响原有的程序。</li>\n<li>基于IDL文件定义服务，通过proto3工具生成指定语言的数据结构、服务端和客户端接口。</li>\n</ul><p>在gRPC的框架中，Protocol Buffers主要有三个作用。</p><p><strong>第一，可以用来定义数据结构。</strong>举个例子，下面的代码定义了一个SecretInfo数据结构：</p><pre><code>// SecretInfo contains secret details.\nmessage SecretInfo {\n    string name = 1;\n    string secret_id  = 2;\n    string username   = 3;\n    string secret_key = 4;\n    int64 expires = 5;\n    string description = 6;\n    string created_at = 7;\n    string updated_at = 8;\n}\n</code></pre><p><strong>第二，可以用来定义服务接口。</strong>下面的代码定义了一个Cache服务，服务包含了ListSecrets和ListPolicies 两个API接口。</p><pre><code>// Cache implements a cache rpc service.\nservice Cache{\n  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {}\n  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse) {}\n}\n</code></pre><p><strong>第三，可以通过protobuf序列化和反序列化，提升传输效率。</strong></p><h2>gRPC示例</h2><p>我们已经对gRPC这一通用RPC框架有了一定的了解，但是你可能还不清楚怎么使用gRPC编写API接口。接下来，我就通过gRPC官方的一个示例来快速给大家展示下。运行本示例需要在Linux服务器上安装Go编译器、Protocol buffer编译器（protoc，v3）和 protoc 的Go语言插件，在 <a href=\"https://time.geekbang.org/column/article/378076\"><strong>02讲</strong></a> 中我们已经安装过，这里不再讲具体的安装方法。</p><p>这个示例分为下面几个步骤：</p><ol>\n<li>定义gRPC服务。</li>\n<li>生成客户端和服务器代码。</li>\n<li>实现gRPC服务。</li>\n<li>实现gRPC客户端。</li>\n</ol><p>示例代码存放在<a href=\"https://github.com/marmotedu/gopractise-demo/tree/main/apistyle/greeter\">gopractise-demo/apistyle/greeter</a>目录下。代码结构如下：</p><pre><code>$ tree\n├── client\n│   └── main.go\n├── helloworld\n│   ├── helloworld.pb.go\n│   └── helloworld.proto\n└── server\n    └── main.go\n</code></pre><p>client目录存放Client端的代码，helloworld目录用来存放服务的IDL定义，server目录用来存放Server端的代码。</p><p>下面我具体介绍下这个示例的四个步骤。</p><ol>\n<li>定义gRPC服务。</li>\n</ol><p>首先，需要定义我们的服务。进入helloworld目录，新建文件helloworld.proto：</p><pre><code>$ cd helloworld\n$ vi helloworld.proto\n</code></pre><p>内容如下：</p><pre><code>syntax = &quot;proto3&quot;;\n\noption go_package = &quot;github.com/marmotedu/gopractise-demo/apistyle/greeter/helloworld&quot;;\n\npackage helloworld;\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n</code></pre><p>在helloworld.proto定义文件中，option关键字用来对.proto文件进行一些设置，其中go_package是必需的设置，而且go_package的值必须是包导入的路径。package关键字指定生成的.pb.go文件所在的包名。我们通过service关键字定义服务，然后再指定该服务拥有的RPC方法，并定义方法的请求和返回的结构体类型：</p><pre><code>service Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n</code></pre><p>gRPC支持定义4种类型的服务方法，分别是简单模式、服务端数据流模式、客户端数据流模式和双向数据流模式。</p><ul>\n<li>\n<p>简单模式（Simple RPC）：是最简单的gRPC模式。客户端发起一次请求，服务端响应一个数据。定义格式为rpc SayHello (HelloRequest) returns (HelloReply) {}。</p>\n</li>\n<li>\n<p>服务端数据流模式（Server-side streaming RPC）：客户端发送一个请求，服务器返回数据流响应，客户端从流中读取数据直到为空。定义格式为rpc SayHello (HelloRequest) returns (stream HelloReply) {}。</p>\n</li>\n<li>\n<p>客户端数据流模式（Client-side streaming RPC）：客户端将消息以流的方式发送给服务器，服务器全部处理完成之后返回一次响应。定义格式为rpc SayHello (stream HelloRequest) returns (HelloReply) {}。</p>\n</li>\n<li>\n<p>双向数据流模式（Bidirectional streaming RPC）：客户端和服务端都可以向对方发送数据流，这个时候双方的数据可以同时互相发送，也就是可以实现实时交互RPC框架原理。定义格式为rpc SayHello (stream HelloRequest) returns (stream HelloReply) {}。</p>\n</li>\n</ul><p>本示例使用了简单模式。.proto文件也包含了Protocol Buffers 消息的定义，包括请求消息和返回消息。例如请求消息：</p><pre><code>// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n</code></pre><ol start=\"2\">\n<li>生成客户端和服务器代码。</li>\n</ol><p>接下来，我们需要根据.proto服务定义生成gRPC客户端和服务器接口。我们可以使用protoc编译工具，并指定使用其Go语言插件来生成：</p><pre><code>$ protoc -I. --go_out=plugins=grpc:$GOPATH/src helloworld.proto\n$ ls\nhelloworld.pb.go  helloworld.proto\n</code></pre><p>你可以看到，新增了一个helloworld.pb.go文件。</p><ol start=\"3\">\n<li>实现gRPC服务。</li>\n</ol><p>接着，我们就可以实现gRPC服务了。进入server目录，新建main.go文件：</p><pre><code>$ cd ../server\n$ vi main.go\n</code></pre><p>main.go内容如下：</p><pre><code>// Package main implements a server for Greeter service.\npackage main\n\nimport (\n\t&quot;context&quot;\n\t&quot;log&quot;\n\t&quot;net&quot;\n\n\tpb &quot;github.com/marmotedu/gopractise-demo/apistyle/greeter/helloworld&quot;\n\t&quot;google.golang.org/grpc&quot;\n)\n\nconst (\n\tport = &quot;:50051&quot;\n)\n\n// server is used to implement helloworld.GreeterServer.\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(&quot;Received: %v&quot;, in.GetName())\n\treturn &amp;pb.HelloReply{Message: &quot;Hello &quot; + in.GetName()}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(&quot;tcp&quot;, port)\n\tif err != nil {\n\t\tlog.Fatalf(&quot;failed to listen: %v&quot;, err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &amp;server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(&quot;failed to serve: %v&quot;, err)\n\t}\n}\n</code></pre><p>上面的代码实现了我们上一步根据服务定义生成的Go接口。</p><p>我们先定义了一个Go结构体server，并为server结构体添加<code>SayHello(context.Context, pb.HelloRequest) (pb.HelloReply, error)</code>方法，也就是说server是GreeterServer接口（位于helloworld.pb.go文件中）的一个实现。</p><p>在我们实现了gRPC服务所定义的方法之后，就可以通过 <code>net.Listen(...)</code> 指定监听客户端请求的端口；接着，通过 <code>grpc.NewServer()</code> 创建一个gRPC Server实例，并通过 <code>pb.RegisterGreeterServer(s, &amp;server{})</code> 将该服务注册到gRPC框架中；最后，通过 <code>s.Serve(lis)</code> 启动gRPC服务。</p><p>创建完main.go文件后，在当前目录下执行 <code>go run main.go</code> ，启动gRPC服务。</p><ol start=\"4\">\n<li>实现gRPC客户端。</li>\n</ol><p>打开一个新的Linux终端，进入client目录，新建main.go文件：</p><pre><code>$ cd ../client\n$ vi main.go\n</code></pre><p>main.go内容如下：</p><pre><code>// Package main implements a client for Greeter service.\npackage main\n\nimport (\n\t&quot;context&quot;\n\t&quot;log&quot;\n\t&quot;os&quot;\n\t&quot;time&quot;\n\n\tpb &quot;github.com/marmotedu/gopractise-demo/apistyle/greeter/helloworld&quot;\n\t&quot;google.golang.org/grpc&quot;\n)\n\nconst (\n\taddress     = &quot;localhost:50051&quot;\n\tdefaultName = &quot;world&quot;\n)\n\nfunc main() {\n\t// Set up a connection to the server.\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(&quot;did not connect: %v&quot;, err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\t// Contact the server and print out its response.\n\tname := defaultName\n\tif len(os.Args) &gt; 1 {\n\t\tname = os.Args[1]\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(&quot;could not greet: %v&quot;, err)\n\t}\n\tlog.Printf(&quot;Greeting: %s&quot;, r.Message)\n}\n</code></pre><p>在上面的代码中，我们通过如下代码创建了一个gRPC连接，用来跟服务端进行通信：</p><pre><code>// Set up a connection to the server.\nconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\nif err != nil {\n    log.Fatalf(&quot;did not connect: %v&quot;, err)\n}\ndefer conn.Close()\n</code></pre><p>在创建连接时，我们可以指定不同的选项，用来控制创建连接的方式，例如grpc.WithInsecure()、grpc.WithBlock()等。gRPC支持很多选项，更多的选项可以参考grpc仓库下<a href=\"https://github.com/grpc/grpc-go/blob/v1.37.0/dialoptions.go\">dialoptions.go</a>文件中以With开头的函数。</p><p>连接建立起来之后，我们需要创建一个客户端stub，用来执行RPC请求<code>c := pb.NewGreeterClient(conn)</code>。创建完成之后，我们就可以像调用本地函数一样，调用远程的方法了。例如，下面一段代码通过 <code>c.SayHello</code> 这种本地式调用方式调用了远端的SayHello接口：</p><pre><code>r, err := c.SayHello(ctx, &amp;pb.HelloRequest{Name: name})\nif err != nil {\n    log.Fatalf(&quot;could not greet: %v&quot;, err)\n}\nlog.Printf(&quot;Greeting: %s&quot;, r.Message)\n</code></pre><p>从上面的调用格式中，我们可以看到RPC调用具有下面两个特点。</p><ul>\n<li>调用方便：RPC屏蔽了底层的网络通信细节，使得调用RPC就像调用本地方法一样方便，调用方式跟大家所熟知的调用类的方法一致：<code>ClassName.ClassFuc(params)</code>。</li>\n<li>不需要打包和解包：RPC调用的入参和返回的结果都是Go的结构体，不需要对传入参数进行打包操作，也不需要对返回参数进行解包操作，简化了调用步骤。</li>\n</ul><p>最后，创建完main.go文件后，在当前目录下，执行go run main.go发起RPC调用：</p><pre><code>$ go run main.go\n2020/10/17 07:55:00 Greeting: Hello world\n</code></pre><p>至此，我们用四个步骤，创建并调用了一个gRPC服务。接下来我再给大家讲解一个在具体场景中的注意事项。</p><p>在做服务开发时，我们经常会遇到一种场景：定义一个接口，接口会通过判断是否传入某个参数，决定接口行为。例如，我们想提供一个GetUser接口，期望GetUser接口在传入username参数时，根据username查询用户的信息，如果没有传入username，则默认根据userId查询用户信息。</p><p>这时候，我们需要判断客户端有没有传入username参数。我们不能根据username是否为空值来判断，因为我们不能区分客户端传的是空值，还是没有传username参数。这是由Go语言的语法特性决定的：如果客户端没有传入username参数，Go会默认赋值为所在类型的零值，而字符串类型的零值就是空字符串。</p><p>那我们怎么判断客户端有没有传入username参数呢？最好的方法是通过指针来判断，如果是nil指针就说明没有传入，非nil指针就说明传入，具体实现步骤如下：</p><ol>\n<li>编写protobuf定义文件。</li>\n</ol><p>新建user.proto文件，内容如下:</p><pre><code>syntax = &quot;proto3&quot;;\n\npackage proto;\noption go_package = &quot;github.com/marmotedu/gopractise-demo/protobuf/user&quot;;\n\n//go:generate protoc -I. --experimental_allow_proto3_optional --go_out=plugins=grpc:.\n\nservice User {\n  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}\n}\n\nmessage GetUserRequest {\n  string class = 1;\n  optional string username = 2;\n  optional string user_id = 3;\n}\n\nmessage GetUserResponse {\n  string class = 1;\n  string user_id = 2;\n  string username = 3;\n  string address = 4;\n  string sex = 5;\n  string phone = 6;\n}\n</code></pre><p>你需要注意，这里我们在需要设置为可选字段的前面添加了<strong>optional</strong>标识。</p><ol start=\"2\">\n<li>使用protoc工具编译protobuf文件。</li>\n</ol><p>在执行protoc命令时，需要传入<code>--experimental_allow_proto3_optional</code>参数以打开<strong>optional</strong>选项，编译命令如下：</p><pre><code>$ protoc --experimental_allow_proto3_optional --go_out=plugins=grpc:. user.proto\n</code></pre><p>上述编译命令会生成user.pb.go文件，其中的GetUserRequest结构体定义如下：</p><pre><code>type GetUserRequest struct {\n    state         protoimpl.MessageState\n    sizeCache     protoimpl.SizeCache\n    unknownFields protoimpl.UnknownFields\n\n    Class    string  `protobuf:&quot;bytes,1,opt,name=class,proto3&quot; json:&quot;class,omitempty&quot;`\n    Username *string `protobuf:&quot;bytes,2,opt,name=username,proto3,oneof&quot; json:&quot;username,omitempty&quot;`\n    UserId   *string `protobuf:&quot;bytes,3,opt,name=user_id,json=userId,proto3,oneof&quot; json:&quot;user_id,omitempty&quot;`\n}\n</code></pre><p>通过 <code>optional</code> + <code>--experimental_allow_proto3_optional</code> 组合，我们可以将一个字段编译为指针类型。</p><ol start=\"3\">\n<li>编写gRPC接口实现。</li>\n</ol><p>新建一个user.go文件，内容如下：</p><pre><code>package user\n\nimport (\n    &quot;context&quot;\n\n    pb &quot;github.com/marmotedu/api/proto/apiserver/v1&quot;\n\n    &quot;github.com/marmotedu/iam/internal/apiserver/store&quot;\n)\n\ntype User struct {\n}\n\nfunc (c *User) GetUser(ctx context.Context, r *pb.GetUserRequest) (*pb.GetUserResponse, error) {\n    if r.Username != nil {\n        return store.Client().Users().GetUserByName(r.Class, r.Username)\n    }\n\n    return store.Client().Users().GetUserByID(r.Class, r.UserId)\n}\n</code></pre><p>总之，在GetUser方法中，我们可以通过判断r.Username是否为nil，来判断客户端是否传入了Username参数。</p><h2>RESTful VS gRPC</h2><p>到这里，今天我们已经介绍完了gRPC API。回想一下我们昨天学习的RESTful API，你可能想问：这两种API风格分别有什么优缺点，适用于什么场景呢？我把这个问题的答案放在了下面这张表中，你可以对照着它，根据自己的需求在实际应用时进行选择。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/ab/e6ae61fc4b0fc821f94d257239f332ab.png?wh=1483x1026\" alt=\"\"></p><p>当然，更多的时候，RESTful API 和gRPC API是一种合作的关系，对内业务使用gRPC API，对外业务使用RESTful API，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/47/18/471ac923d2eaeca8fe13cb74731c1318.png?wh=1606x1144\" alt=\"\"></p><h2>总结</h2><p>在Go项目开发中，我们可以选择使用 RESTful API 风格和 RPC API 风格，这两种服务都用得很多。其中，RESTful API风格因为规范、易理解、易用，所以<strong>适合用在需要对外提供API接口的场景中</strong>。而RPC API因为性能比较高、调用方便，<strong>更适合用在内部业务中</strong>。</p><p>RESTful API使用的是HTTP协议，而RPC API使用的是RPC协议。目前，有很多RPC协议可供你选择，而我推荐你使用gRPC，因为它很轻量，同时性能很高、很稳定，是一个优秀的RPC框架。所以目前业界用的最多的还是gRPC协议，腾讯、阿里等大厂内部很多核心的线上服务用的就是gRPC。</p><p>除了使用gRPC协议，在进行Go项目开发前，你也可以了解业界一些其他的优秀Go RPC框架，比如腾讯的tars-go、阿里的dubbo-go、Facebook的thrift、rpcx等，你可以在项目开发之前一并调研，根据实际情况进行选择。</p><h2>课后练习</h2><ol>\n<li>使用gRPC包，快速实现一个RPC API服务，并实现PrintHello接口，该接口会返回“Hello World”字符串。</li>\n<li>请你思考这个场景：你有一个gRPC服务，但是却希望该服务同时也能提供RESTful API接口，这该如何实现？</li>\n</ol><p>期待在留言区看到你的思考和答案，也欢迎和我一起探讨关于RPC API相关的问题，我们下一讲见！</p>","comments":[{"had_liked":false,"id":299141,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1624491736,"is_pvip":false,"replies":[{"id":"108634","content":"正解","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624708817,"ip_address":"","comment_id":299141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"250732594904","product_id":100079601,"comment_content":"假定希望用RPC作为内部API的通讯，同时也想对外提供RESTful API，又不想写两套，可以使用gRPC Gateway 插件，在生成RPC的同时也生成RESTful web  server。","like_count":58,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522345,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624708817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331768,"user_name":"Geek_e7af5e","can_delete":false,"product_type":"c1","uid":2886894,"ip_address":"","ucode":"C3ADEC3F8DC65B","user_header":"","comment_is_top":false,"comment_ctime":1642753964,"is_pvip":false,"replies":[{"id":"121266","content":"感谢分享！","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642867786,"ip_address":"","comment_id":331768,"utype":1}],"discussion_count":2,"race_medal":0,"score":"109016936364","product_id":100079601,"comment_content":"这里提供一些更新说明（刚踩过的坑）<br>github.com&#47;golang&#47;protobuf&#47;protoc-gen-go和google.golang.org&#47;protobuf&#47;cmd&#47;protoc-gen-go是不同的。区别在于前者是旧版本（操作类似于作者大大的），后者是google接管后的新版本，他们之间的API是不同的，也就是说用于生成的命令，以及生成的文件都是不一样的。因为目前的gRPC-go源码中的example用的是后者的生成方式，所以这里提供后者说明：<br>1. 首先需要安装两个库：<br>go install google.golang.org&#47;protobuf&#47;cmd&#47;protoc-gen-go<br>go install google.golang.org&#47;grpc&#47;cmd&#47;protoc-gen-go-grpc<br>2. 然后.proto文件保持一致，输入两个生成代码命令：<br>protoc -I. --go_out=$GOPATH&#47;src helloworld.proto<br>protoc -I. --go-grpc_out=$GOPATH&#47;src helloworld.proto<br>3. 上述两个命令会生成两个文件：<br>helloworld.pb.go      helloworld_grpc.pb.go<br>这两个文件分别生成message和service的代码，合起来就是老版本的代码<br><br>这是排查了两小时的坑，希望大家注意！","like_count":26,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547827,"discussion_content":"感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642867787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1651032,"avatar":"https://static001.geekbang.org/account/avatar/00/19/31/58/5384ee72.jpg","nickname":"低调d低调","note":"","ucode":"06674CDE1B2BA7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574191,"discussion_content":"也遇到这个坑了。 感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653893524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299388,"user_name":"柠柠","can_delete":false,"product_type":"c1","uid":1185179,"ip_address":"","ucode":"B3442C29FDE624","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/9b/9ce9f374.jpg","comment_is_top":false,"comment_ctime":1624607740,"is_pvip":false,"replies":[{"id":"108625","content":"对的！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624707446,"ip_address":"","comment_id":299388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53164215292","product_id":100079601,"comment_content":"RPC 与 RESTful 共通逻辑抽象出来 Service 层，RPC server 和 RESTful server 初始化or 启动时时都需要指定 service，真正提供服务的是 Service 层","like_count":12,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522429,"discussion_content":"对的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624707446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299320,"user_name":"💎A","can_delete":false,"product_type":"c1","uid":1075412,"ip_address":"","ucode":"914FFA92CA2713","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/d4/c9b5d3f9.jpg","comment_is_top":false,"comment_ctime":1624581537,"is_pvip":false,"replies":[{"id":"108626","content":"感谢分享，文章非常棒！已收藏！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624707519,"ip_address":"","comment_id":299320,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40279287201","product_id":100079601,"comment_content":"https:&#47;&#47;www.bookstack.cn&#47;read&#47;API-design-guide&#47;API-design-guide-04-%E6%A0%87%E5%87%86%E6%96%B9%E6%B3%95.md  我又来做贡献了","like_count":9,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522404,"discussion_content":"感谢分享，文章非常棒！已收藏！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624707519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299216,"user_name":"不明真相的群众","can_delete":false,"product_type":"c1","uid":2267730,"ip_address":"","ucode":"046A7D345171B8","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/52/93416b65.jpg","comment_is_top":false,"comment_ctime":1624515886,"is_pvip":true,"replies":[{"id":"108631","content":"用这个：https:&#47;&#47;github.com&#47;grpc-ecosystem&#47;grpc-gateway","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624708651,"ip_address":"","comment_id":299216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27394319662","product_id":100079601,"comment_content":"你有一个 gRPC 服务，但是却希望该服务同时也能提供 RESTful API 接口，这该如何实现？<br>---------------------------<br>在封装一层？","like_count":6,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522366,"discussion_content":"用这个：https://github.com/grpc-ecosystem/grpc-gateway","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624708651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330163,"user_name":"陈晓涛","can_delete":false,"product_type":"c1","uid":1588873,"ip_address":"","ucode":"E80D318348CA47","user_header":"https://static001.geekbang.org/account/avatar/00/18/3e/89/ccc2ebd9.jpg","comment_is_top":false,"comment_ctime":1641822756,"is_pvip":false,"replies":[{"id":"120945","content":"感谢分享！","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642434014,"ip_address":"","comment_id":330163,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18821691940","product_id":100079601,"comment_content":"想方便调用grpc，可以使用grpcurl和grpcui，基于反射的方式使用","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546846,"discussion_content":"感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642434014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302376,"user_name":"张名哲","can_delete":false,"product_type":"c1","uid":1260121,"ip_address":"","ucode":"0476910BC2FE81","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/59/d0f326e7.jpg","comment_is_top":false,"comment_ctime":1626183282,"is_pvip":false,"replies":[{"id":"109487","content":"简单模式用的比较多","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1626280205,"ip_address":"","comment_id":302376,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18806052466","product_id":100079601,"comment_content":"老师，文章中有四种模式，平时用的最多的是哪一种模式？","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523282,"discussion_content":"简单模式用的比较多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626280205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306889,"user_name":"wei 丶","can_delete":false,"product_type":"c1","uid":1234929,"ip_address":"","ucode":"331DE893F75B95","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/f1/ce10759d.jpg","comment_is_top":false,"comment_ctime":1628764122,"is_pvip":false,"replies":[{"id":"111398","content":"第二个指定了grpc plugin","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1629243535,"ip_address":"","comment_id":306889,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14513666010","product_id":100079601,"comment_content":"老师有个疑问<br>protoc --go_out=. *.proto<br>protoc --go_out=plugins=grpc:. *.proto<br>这俩有啥啥区别  😵","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524963,"discussion_content":"第二个指定了grpc plugin","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629243535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674992,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8e/f0/18720510.jpg","nickname":"50%","note":"","ucode":"3E4247B5844B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537659,"discussion_content":"后面的生成了service相关的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639131637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314479,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1633104156,"is_pvip":false,"replies":[{"id":"114079","content":"我试了，后面的版本去掉了--experimental_allow_proto3_optional参数的限制。那就可以不用加这个选项了，代码我也更新了。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1633664625,"ip_address":"","comment_id":314479,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10223038748","product_id":100079601,"comment_content":"查了下文档，optional是protoco 3.12版本加入的，如果参数设置成optional，执行时必须要带--experimental_allow_proto3_optional。但是我是3.15.8版本，执行时没有加上--experimental_allow_proto3_optional也没有报错","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527694,"discussion_content":"我试了，后面的版本去掉了--experimental_allow_proto3_optional参数的限制。那就可以不用加这个选项了，代码我也更新了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633664625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1017289,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDe7Ep3YW87sWJLc9GzgA2z1CSyHI3iaZQpCLzM2O1e30CQywGsMj5cQyh6pTGybvFgN0bTuWE8nA/132","nickname":"风骑","note":"","ucode":"D96526F7F37442","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537313,"discussion_content":"这个应该是在3.15后的版本取消的,我用3.14版本试了下,还是会提示这个参数没有设置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639030922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":527694,"ip_address":""},"score":537313,"extra":""}]}]},{"had_liked":false,"id":352898,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"北京","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1658999553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5953966849","product_id":100079601,"comment_content":"建议作者的命令行，多点pwd，方便我们定位","like_count":1},{"had_liked":false,"id":317685,"user_name":"江湖夜雨十年灯","can_delete":false,"product_type":"c1","uid":1520772,"ip_address":"","ucode":"0CCFCA6F855AC8","user_header":"https://static001.geekbang.org/account/avatar/00/17/34/84/27ecfcab.jpg","comment_is_top":false,"comment_ctime":1634889876,"is_pvip":false,"replies":[{"id":"116904","content":"protoc编译器的设定哈，遵循就是了。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637104878,"ip_address":"","comment_id":317685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5929857172","product_id":100079601,"comment_content":"老师，我的proto文件是这样写的，go_package用的是我本地项目的目录：<br>option go_package = &quot;whw_scripts_stroage&#47;a_grpc_tests&#47;helloworld&quot;;<br>在helloworld目录中执行下面命令：<br>sudo protoc -I. --go_out=. .&#47;helloworld.proto <br>但是最后在helloworld目录中，与helloworld.proto文件同一个级别生成的不是helloworld.pb.go，而是：whw_scripts_stroage&#47;a_grpc_tests&#47;helloworld.pb.go<br>请问为什么生成的是目录加go文件呢？<br><br><br><br>","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530557,"discussion_content":"protoc编译器的设定哈，遵循就是了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637104878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316175,"user_name":"andox","can_delete":false,"product_type":"c1","uid":1312987,"ip_address":"","ucode":"28C037A0F82E7D","user_header":"","comment_is_top":false,"comment_ctime":1634192232,"is_pvip":false,"replies":[{"id":"114926","content":"istio试试？","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634737892,"ip_address":"","comment_id":316175,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5929159528","product_id":100079601,"comment_content":"grpc有推荐的服务治理方案吗","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528294,"discussion_content":"istio试试？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634737892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306004,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628268757,"is_pvip":false,"replies":[{"id":"110903","content":"强！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1628524888,"ip_address":"","comment_id":306004,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5923236053","product_id":100079601,"comment_content":"一文搞懂rpc，这个周末写一下demo。周日晚上再来打卡。","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524592,"discussion_content":"强！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628524888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145554,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","nickname":"Sch0ng","note":"","ucode":"73F6113931B1AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387836,"discussion_content":"没写。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628440724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303487,"user_name":"漂泊的小飘","can_delete":false,"product_type":"c1","uid":1222578,"ip_address":"","ucode":"25C0CA4887D8AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/a7/b2/274a4192.jpg","comment_is_top":false,"comment_ctime":1626828757,"is_pvip":false,"replies":[{"id":"110234","content":"1. 好像没有太固定的场景，具体根据需要选择就行了。<br><br>2. 生成的文件需要放在Git中。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627600087,"ip_address":"","comment_id":303487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5921796053","product_id":100079601,"comment_content":"老师，有两个问题请教下：<br>1，能否讲下四种模式的应用场景？<br>2，一般生成的文件需要放进git里面吗","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523702,"discussion_content":"1. 好像没有太固定的场景，具体根据需要选择就行了。\n\n2. 生成的文件需要放在Git中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627600087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299298,"user_name":"learner2021","can_delete":false,"product_type":"c1","uid":1223059,"ip_address":"","ucode":"2568862DB4ABC5","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/93/2a26fe6e.jpg","comment_is_top":false,"comment_ctime":1624550052,"is_pvip":false,"replies":[{"id":"108627","content":"看看github.com&#47;marmotedu&#47;gopractise-demo目录下，有没有go.mod。<br><br>如果有建议执行下：go mod tidy","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624707658,"ip_address":"","comment_id":299298,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5919517348","product_id":100079601,"comment_content":"哪里设置错误了？<br>[going@dev server]$ pwd<br>&#47;home&#47;going&#47;workspace&#47;golang&#47;src&#47;github.com&#47;marmotedu&#47;gopractise-demo&#47;apistyle&#47;greeter&#47;server<br>[going@dev server]$ go run main.go<br>main.go:8:2: no required module provides package github.com&#47;marmotedu&#47;gopractise-demo&#47;apistyle&#47;greeter&#47;helloworld: go.mod file not found in current directory or any parent directory; see &#39;go help modules&#39;<br>main.go:9:2: no required module provides package google.golang.org&#47;grpc: go.mod file not found in current directory or any parent directory; see &#39;go help modules&#39;","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522392,"discussion_content":"看看github.com/marmotedu/gopractise-demo目录下，有没有go.mod。\n\n如果有建议执行下：go mod tidy","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624707658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2737221,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c4/45/88287ede.jpg","nickname":"chinandy","note":"","ucode":"396E8478BB0393","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389941,"discussion_content":"我也遇到了相同的问题，我是个新手，以前没有使用过go语言，我分析了一下原因，不对勿喷。\n1. 由于第二章配置了GO111MODULE为  on。在使用模块的时候，$GOPATH 是无意义的，不过它还是会把下载的依赖储存在 $GOPATH/pkg/mod 目录中，也会把 go install 的二进制文件存放在 $GOPATH/bin 目录中。\n2. 所以如果是自己手动写的代码，应该在gopractise-demo下执行go mod init，这个时候你们只是给你初始化了一个go.mod,里面内容只是指明了go的版本这样的基本信息，此时再使用go mod tidy命令，这样他会自动把项目的依赖安装好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629529657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2654999,"avatar":"https://static001.geekbang.org/account/avatar/00/28/83/17/df99b53d.jpg","nickname":"随风而过","note":"","ucode":"FFD17BAA3B2312","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2737221,"avatar":"https://static001.geekbang.org/account/avatar/00/29/c4/45/88287ede.jpg","nickname":"chinandy","note":"","ucode":"396E8478BB0393","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390334,"discussion_content":"可以补下go依赖这块的基础","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629786626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389941,"ip_address":""},"score":390334,"extra":""}]},{"author":{"id":1223059,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a9/93/2a26fe6e.jpg","nickname":"learner2021","note":"","ucode":"2568862DB4ABC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380847,"discussion_content":"自己手工创建目录和代码文件，没有go.mod，从git仓库下载go.mod后正常了，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624723124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299295,"user_name":"kkgo","can_delete":false,"product_type":"c1","uid":1199356,"ip_address":"","ucode":"AFCCBFD96CFA21","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/fc/0e887697.jpg","comment_is_top":false,"comment_ctime":1624547940,"is_pvip":false,"replies":[{"id":"108628","content":"没对比过，老哥可以对比下性能，分享出来","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624707676,"ip_address":"","comment_id":299295,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5919515236","product_id":100079601,"comment_content":"老师有对比过grpc和rpcx之间的性能，稳定性方面不? 看官方说明rpcx性能是grpc的2倍","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522391,"discussion_content":"没对比过，老哥可以对比下性能，分享出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624707676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299285,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1624543647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5919510943","product_id":100079601,"comment_content":"优秀👍","like_count":1},{"had_liked":false,"id":360689,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"北京","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1666761661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666761661","product_id":100079601,"comment_content":"不错，grpcgateway","like_count":0},{"had_liked":false,"id":355198,"user_name":"朱元彬🗿","can_delete":false,"product_type":"c1","uid":2725689,"ip_address":"广东","ucode":"9CBD43225EE65B","user_header":"https://static001.geekbang.org/account/avatar/00/29/97/39/1f5c6350.jpg","comment_is_top":false,"comment_ctime":1661165647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661165647","product_id":100079601,"comment_content":"生产环境中，使用服务提供者的接口，如果遇到接口更新的情况，要怎么跟服务提供者沟通更新协议呢？","like_count":0},{"had_liked":false,"id":353004,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"陕西","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1659074212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659074212","product_id":100079601,"comment_content":"对protoc为什么生成.pb.go的函数，不是很理解。","like_count":0},{"had_liked":false,"id":353003,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"陕西","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1659073806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659073806","product_id":100079601,"comment_content":"protoc --experimental_allow_proto3_optional --go_out=plugins=grpc:. user.proto<br><br>当你的golang版本是1.8的，这个命令应该采用下方的<br>protoc --experimental_allow_proto3_optional --go_out=plugins=grpc:$GOPATH&#47;src user.proto<br><br>或者采取 cd $GOPATH&#47;src 然后 执行go use work .","like_count":0},{"had_liked":false,"id":351075,"user_name":"Jack","can_delete":false,"product_type":"c1","uid":1529319,"ip_address":"","ucode":"DB7A509E726220","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/e7/86ae89f0.jpg","comment_is_top":false,"comment_ctime":1657512873,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657512873","product_id":100079601,"comment_content":"目前主要用的是go-zero脚手架，还算是比较方便的","like_count":0},{"had_liked":false,"id":349402,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1655948722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655948722","product_id":100079601,"comment_content":"请问老师怎么看待tars？什么情况下用tars会比用grpc好一点？","like_count":0},{"had_liked":false,"id":342728,"user_name":"Bradford","can_delete":false,"product_type":"c1","uid":2958009,"ip_address":"","ucode":"FE781D4874778E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJl2cs8X08aK8GiaUYcH0V2L7QJ14Y1YCfjT42Ta3CwnJEczVvwsAOA1InCNg5PqUuCCTEda287PYg/132","comment_is_top":false,"comment_ctime":1650436244,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650436244","product_id":100079601,"comment_content":"postman现在也支持grpc啦","like_count":0},{"had_liked":false,"id":332516,"user_name":"Struggle~honor","can_delete":false,"product_type":"c1","uid":1975831,"ip_address":"","ucode":"EBC6DFC6CF0973","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rSzzqGwHcvhwPejiaPsCY9XBX7ib7zTxJ6cUDORdhGIakX8dTPVsz6ibud5ec1FeWQGTseF2TPRECCjky5JMlHvDg/132","comment_is_top":false,"comment_ctime":1643287470,"is_pvip":false,"replies":[{"id":"121559","content":"不太明白你的问题。是指如何建立指定URL的grpc客户端吗？<br>conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock()) <br>if err != nil { <br>  log.Fatalf(&quot;did not connect: %v&quot;, err) <br>} <br>defer conn.Close()<br><br>不知道这个能不能回答你","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1643455301,"ip_address":"","comment_id":332516,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643287470","product_id":100079601,"comment_content":"老师，看代码是使用了grpc中的invoke函数，指定URL，请问这个是怎样用的呢","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548953,"discussion_content":"不太明白你的问题。是指如何建立指定URL的grpc客户端吗？\nconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock()) \nif err != nil { \n  log.Fatalf(&#34;did not connect: %v&#34;, err) \n} \ndefer conn.Close()\n\n不知道这个能不能回答你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643455301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328351,"user_name":"左耳朵东","can_delete":false,"product_type":"c1","uid":1160678,"ip_address":"","ucode":"60134ACF12BB52","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","comment_is_top":false,"comment_ctime":1640681336,"is_pvip":false,"replies":[{"id":"119705","content":"protoc版本的问题","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1640825678,"ip_address":"","comment_id":328351,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640681336","product_id":100079601,"comment_content":"为什么我执行这个命令的时候 protoc --go_out=plugins=grpc:. helloworld.proto 报错：<br>--go_out: protoc-gen-go: plugins are not supported; use &#39;protoc --go-grpc_out=...&#39; to generate gRPC","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542649,"discussion_content":"protoc版本的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640825678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326023,"user_name":"圆滚滚","can_delete":false,"product_type":"c1","uid":1351012,"ip_address":"","ucode":"E4D81822A87D50","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/64/272dc1b7.jpg","comment_is_top":false,"comment_ctime":1639313066,"is_pvip":false,"replies":[{"id":"118331","content":"protoc-gen-go没有安装。可以参考第 02 讲中：ProtoBuf 编译环境安装 部分 安装命令如下：<br><br>go get -u github.com&#47;golang&#47;protobuf&#47;protoc-gen-go","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639398527,"ip_address":"","comment_id":326023,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639313066","product_id":100079601,"comment_content":"protoc-gen-go: program not found or is not executable<br>Please specify a program using absolute path or make sure the program is available in your PATH system variable<br>--go_out: protoc-gen-go: Plugin failed with status code ","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538320,"discussion_content":"protoc-gen-go没有安装。可以参考第 02 讲中：ProtoBuf 编译环境安装 部分 安装命令如下：\n\ngo get -u github.com/golang/protobuf/protoc-gen-go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351012,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/64/272dc1b7.jpg","nickname":"圆滚滚","note":"","ucode":"E4D81822A87D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538120,"discussion_content":"已解决：https://grpc.io/docs/languages/go/quickstart/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639325637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325364,"user_name":"Struggle~honor","can_delete":false,"product_type":"c1","uid":1975831,"ip_address":"","ucode":"EBC6DFC6CF0973","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rSzzqGwHcvhwPejiaPsCY9XBX7ib7zTxJ6cUDORdhGIakX8dTPVsz6ibud5ec1FeWQGTseF2TPRECCjky5JMlHvDg/132","comment_is_top":false,"comment_ctime":1638932098,"is_pvip":false,"replies":[{"id":"118475","content":"表示字段标号。<br>在ProtoBuf中，每个字段都有一个独一无二的编号。这些编号用来标识消息中的字段，这个可以类比一些通信协议中的编码格式。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639454929,"ip_address":"","comment_id":325364,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638932098","product_id":100079601,"comment_content":"老师，请问grpc数据结构中的 1 2 3 4 这些定义分别代表什么意思呢","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538614,"discussion_content":"表示字段标号。\n在ProtoBuf中，每个字段都有一个独一无二的编号。这些编号用来标识消息中的字段，这个可以类比一些通信协议中的编码格式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639454929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323011,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1637690464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637690464","product_id":100079601,"comment_content":"总结：<br>    1. gRPC 是什么？它是 RPC 协议的一种。<br>    2. protobuf 和 Json 的区别？都可以承载消息进行传递，但是gRPC使用二进制对消息进行编码；protobuf 可以用来描述数据结构和服务，通过 protoc 生成数据结构、服务端接口、客户端代码。<br>    3. 基于 HTTP 2 协议，可以实现多种通信模式。","like_count":0},{"had_liked":false,"id":318675,"user_name":"yss","can_delete":false,"product_type":"c1","uid":1922488,"ip_address":"","ucode":"793E8448355F3F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkOj8VUxLjDKp6jRWJrABnnsg7U1sMSkM8FO6ULPwrqNpicZvTQ7kwctmu38iaJYHybXrmbusd8trg/132","comment_is_top":false,"comment_ctime":1635387271,"is_pvip":false,"replies":[{"id":"115968","content":"看下，go build的参数GOOS=linux GOARCH=amd64，能否满足你的需求","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636004507,"ip_address":"","comment_id":318675,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635387271","product_id":100079601,"comment_content":"不知道老师有没有跨语言，跨处理器平台做 gRPC 开发的经验。<br><br>开发机是 windows + x86 <br>目标机是 Linux + arm<br><br>希望实现 golang 与 QT 的 gRPC 通讯。并想在开发机直接构建完成后到目标机执行。这个思路对于 c++ 程序是不是不可行，编译还是必须在对应的平台？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529340,"discussion_content":"看下，go build的参数GOOS=linux GOARCH=amd64，能否满足你的需求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636004507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922488,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkOj8VUxLjDKp6jRWJrABnnsg7U1sMSkM8FO6ULPwrqNpicZvTQ7kwctmu38iaJYHybXrmbusd8trg/132","nickname":"yss","note":"","ucode":"793E8448355F3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411783,"discussion_content":"这个只是golang的处理，目前c++的grpc我还不能很好的自己编译。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636005142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316779,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1634549213,"is_pvip":true,"replies":[{"id":"114915","content":"gRPC吧，用的比较多，比较广","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634737058,"ip_address":"","comment_id":316779,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1634549213","product_id":100079601,"comment_content":"以前用过Thrift，当时选用它的原因是与gRPC相比支持的编程语言比较多。不知道现在两者哪个更强一些？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528496,"discussion_content":"gRPC吧，用的比较多，比较广","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634737058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316054,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1634116779,"is_pvip":true,"replies":[{"id":"114948","content":"不是的哈。<br><br>JSON这种格式在传输的时候是字符串的格式。占用的字节多。但Protobuf在传输时直接是二进制格式，占用的字节少。","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634743844,"ip_address":"","comment_id":316054,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1634116779","product_id":100079601,"comment_content":"孔老师，请问：「在描述 Protocol Buffer 时，谈到的第一个特征相对于 JSON&#47;XML “节省了大量的 IO 操作”，这一点不理解！」我的理解是这样的：JSON&#47;XML，或者是 Protobuf 都是需要转化为二进制数据，但后者数据量小。正因为数据量小，减少了底层网络数据传输的 IO。我可以这样理解吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528249,"discussion_content":"不是的哈。\n\nJSON这种格式在传输的时候是字符串的格式。占用的字节多。但Protobuf在传输时直接是二进制格式，占用的字节少。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634743844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311158,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/b6/e2184e3c.jpg","nickname":"Vokey","note":"","ucode":"6F248223FF0885","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404032,"discussion_content":"还减少了不必要的请求头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634212763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305733,"user_name":"wfatec","can_delete":false,"product_type":"c1","uid":1300686,"ip_address":"","ucode":"AB86F73A12E59C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoeNMibYsgHBsbhIwf9YR4Shy6psfqiblneVHA5CYrBRoqJwkw1ZUbVAPRGAfFfWjia7MZlDZzddeE2w/132","comment_is_top":false,"comment_ctime":1628136175,"is_pvip":false,"replies":[{"id":"110912","content":"protoc工具的特性。看下option go_package是否指定对了","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1628525905,"ip_address":"","comment_id":305733,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1628136175","product_id":100079601,"comment_content":"我这里遇到个问题，我在&#47;workspace&#47;greeter&#47;helloworld&#47;下新建了一个helloworld.proto文件，并cd到当前目录执行：<br>protoc --go_out=plugins=grpc:$GOPATH&#47;src helloworld.proto<br>之后，helloworld.pb.go 并不会在当前目录生成，查看:$GOPATH&#47;src之后，发现多了个 home 文件夹，最终发现，helloworld.pb.go 生成的位置是$GOPATH&#47;src&#47;home&#47;username&#47;workspace&#47;greeter&#47;helloworld&#47;helloworld.pb.go下，请问这个是为什么呢？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524496,"discussion_content":"protoc工具的特性。看下option go_package是否指定对了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628525905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2757858,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","nickname":"顺势而为","note":"","ucode":"FE7D688D24823E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581927,"discussion_content":"因为你是1.8版本，先cd $GOPATH/src , 然后执行 go work use .","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659074074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304207,"user_name":"oneWalker","can_delete":false,"product_type":"c1","uid":1368775,"ip_address":"","ucode":"0FC573E3243760","user_header":"https://static001.geekbang.org/account/avatar/00/14/e2/c7/3e1d396e.jpg","comment_is_top":false,"comment_ctime":1627292706,"is_pvip":false,"replies":[{"id":"110222","content":"腾讯文档被删除了","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627597906,"ip_address":"","comment_id":304207,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627292706","product_id":100079601,"comment_content":"为何我用protoc自动生成的文件和作者的完全不一样：<br>自动生成的代码如链接：【腾讯文档】13  API 风格（下）RPC API介绍-protobuf自动生成文件<br>https:&#47;&#47;docs.qq.com&#47;doc&#47;DS3Nmc1dqRmFkSVZT<br>","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523979,"discussion_content":"腾讯文档被删除了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627597906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299283,"user_name":"Star°时光℡","can_delete":false,"product_type":"c1","uid":2670980,"ip_address":"","ucode":"DF9CCE8D715C0B","user_header":"https://static001.geekbang.org/account/avatar/00/28/c1/84/c4ddaddd.jpg","comment_is_top":false,"comment_ctime":1624543393,"is_pvip":false,"replies":[{"id":"108639","content":"输入信息有点少，不清楚为啥你的命令没有生成文件，可能跟环境有关。<br><br>也可以试试这篇教程：https:&#47;&#47;developers.google.com&#47;protocol-buffers&#47;docs&#47;gotutorial。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624709837,"ip_address":"","comment_id":299283,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1624543393","product_id":100079601,"comment_content":"protoc -I. --go_out=plugins=grpc:$GOPATH&#47;src helloworld.proto<br>执行命令后无任何输出，也没有产生helloworld.pb.go文件","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522386,"discussion_content":"输入信息有点少，不清楚为啥你的命令没有生成文件，可能跟环境有关。\n\n也可以试试这篇教程：https://developers.google.com/protocol-buffers/docs/gotutorial。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624709837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368775,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c7/3e1d396e.jpg","nickname":"oneWalker","note":"","ucode":"0FC573E3243760","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385837,"discussion_content":"另外去掉原来有的：$GOPATH/src，直接protoc -I. --go_out=plugins=grpc helloworld.proto","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627294152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368775,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c7/3e1d396e.jpg","nickname":"oneWalker","note":"","ucode":"0FC573E3243760","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385822,"discussion_content":"是用的macos吗？macos的话，go get会默认安装到gopath而不是goroot中，需要将目录protoc-gen-go复制到goroot下，另外,原代码中使用的option路径需要调整为当前项目目录的路径","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627288017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299281,"user_name":"Star°时光℡","can_delete":false,"product_type":"c1","uid":2670980,"ip_address":"","ucode":"DF9CCE8D715C0B","user_header":"https://static001.geekbang.org/account/avatar/00/28/c1/84/c4ddaddd.jpg","comment_is_top":false,"comment_ctime":1624543327,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1624543327","product_id":100079601,"comment_content":"protoc -I. --go_out=plugins=grpc:$GOPATH&#47;src helloworld.proto<br>```<br>[root@dev helloword]# ls<br>helloworld.proto<br>[root@dev helloword]# cat helloworld.proto <br>syntax = &quot;proto3&quot;;<br><br>option go_package = &quot;github.com&#47;marmotedu&#47;gopractise-demo&#47;apistyle&#47;greeter&#47;helloworld&quot;;<br><br>package helloworld;<br><br>&#47;&#47; the greeting service definition<br>service Greeter {<br>    &#47;&#47; sends a greeting<br>    rpc SayHello (HelloRequest) returns (HelloReply) {}<br>}<br><br>&#47;&#47; the request message containing the user&#39;s name.<br>message HelloRequest {<br>    string name = 1;<br>}<br><br>&#47;&#47; the response message containing the greetings<br>message HelloReply {<br>    string message = 1;<br>}[root@dev helloword]# protoc -I. --go_out=plugins=grpc:$GOPATH&#47;src helloworld.proto<br>[root@dev helloword]# ls<br>helloworld.proto<br>```","like_count":0,"discussions":[{"author":{"id":1657948,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/5c/9ea0f752.jpg","nickname":"程序猿不圆","note":"","ucode":"BC8926A84A07C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581413,"discussion_content":"可以去掉$GOPATH/src，直接protoc -I. --go_out=plugins=grpc:. helloworld.proto，当前目录下应该会有变化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658762856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1657948,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/5c/9ea0f752.jpg","nickname":"程序猿不圆","note":"","ucode":"BC8926A84A07C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581411,"discussion_content":"在$GOPATH/src/github.com/marmotedu/gopractise-demo/apistyle/greeter/helloworld找找看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658762487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299237,"user_name":"夏夜星语","can_delete":false,"product_type":"c1","uid":1017644,"ip_address":"","ucode":"586BF3149A9D1D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/2c/013afd74.jpg","comment_is_top":false,"comment_ctime":1624523328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624523328","product_id":100079601,"comment_content":"之前自己还用jsonrpc 写rpc, 现在用这个感觉完全接口更规范，更简单","like_count":0}]}