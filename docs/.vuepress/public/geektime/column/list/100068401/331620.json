{"id":331620,"title":"06 | 长参数列表：如何处理不同类型的长参数？","content":"<p>你好，我是郑晔。</p><p>前面两讲，我们分别讲了长函数和大类，它们都是那种“我一说，你就知道是怎么回事”的坏味道，而且都让我们深恶痛绝，唯恐避之不及。这样典型的坏味道还有一个，就是长参数列表。</p><p>好吧，我知道你的脑子里已经出现了一个长长的参数列表了。每个程序员只要想到，一个函数拥有几十甚至上百个参数，内心就难以平静下来。</p><p>那么，函数为什么要有参数呢？我们知道，不同函数之间需要共享信息，于是才有了参数传递。</p><p>其实，函数间共享信息的方式不止一种，除了参数列表，最常见的一种方式是全局变量。但全局变量会带给我们太多意想不到的问题，所以，在初学编程的时候，老师就会告诉我们，不要使用全局变量。从程序设计语言发展的过程中，我们也可以看到，取消全局变量已经成为了大势所趋。</p><p>但函数之间还是要传递信息的，既然不能用全局变量，参数就成了最好的选择，于是乎，只要你想到有什么信息要传给一个函数，就自然而然地把它加到参数列表中，参数列表也就越来越长了。</p><p>那么，长参数列表有啥问题呢？这个问题其实我在上一讲已经说过了，人脑能够掌握的内容有限，一旦参数列表变得很长，作为普通人，我们就很难对这些内容进行把控了。</p><p>既然长参数列表的问题是数量多，秉承我们一以贯之的思路，解决这个问题的关键就在于，减少参数的数量。</p><!-- [[[read_end]]] --><p>既然知道了解决方案的方向，那我们接下来就具体看看，有哪些方法可以减少参数的数量。</p><h2>聚沙成塔</h2><p>我们来看一段代码：</p><pre><code>public void createBook(final String title, \n                       final String introduction,\n                       final URL coverUrl,\n                       final BookType type,\n                       final BookChannel channel,\n                       final String protagonists,\n                       final String tags,\n                       final boolean completed) {\n  ...\n  Book book = Book.builder\n    .title(title) \n    .introduction(introduction)\n    .coverUrl(coverUrl)\n    .type(type)\n    .channel(channel)\n    .protagonists(protagonists)\n    .tags(tags)\n    .completed(completed)\n    .build();\n    \n  this.repository.save(book);\n}\n</code></pre><p>这是一个创建作品的函数，我们可以看到，这个函数的参数列表里，包含了一部作品所要拥有的各种信息，比如：作品标题、作品简介、封面 URL、作品类型、作品归属的频道、主角姓名、作品标签、作品是否已经完结等等。</p><p>如果你阅读这段代码，只是想理解它的逻辑，你或许会觉得这个函数的参数列表还挺合理，它把创建一部作品所需的各种信息都传给了函数，这是大部分人面对一段代码时理解问题的角度。不过，虽然这样写代码容易让人理解，但这不足以让你发现问题。</p><p>比如，如果你现在要在作品里增加一项信息，表明这部作品是否是签约作品，也就是这部作品是否可以收费，那你该怎么办？</p><p>顺着前面的思路，我们很自然地就会想到给这个函数增加一个参数。但正如我在讲“<a href=\"https://time.geekbang.org/column/article/327424?utm_term=pc_interstitial_805\">长函数</a>”那节课里说到的，很多问题都是这样，每次只增加一点点，累积起来，便不忍直视了。</p><p>如果我们有了“坏味道”的视角，我们就会看到这里面的问题：这个函数的参数列表太长了。</p><p>怎么解决这个问题呢？</p><p>这里所有的参数其实都是和作品相关的，也就是说，所有的参数都是创建作品所必需的。所以，我们可以做的就是将这些参数封装成一个类，一个创建作品的参数类：</p><pre><code>public class NewBookParamters {\n  private String title;\n  private String introduction;\n  private URL coverUrl;\n  private BookType type;\n  private BookChannel channel;\n  private String protagonists;\n  private String tags;\n  private boolean completed;\n  ...\n}\n</code></pre><p>这样一来，这个函数参数列表就只剩下一个参数了，一个长参数列表就消除了：</p><pre><code>public void createBook(final NewBookParamters parameters) {\n  ...\n}\n</code></pre><p>这里你看到了一个典型的消除长参数列表的重构手法：<strong>将参数列表封装成对象</strong>。</p><p>或许你还有个疑问，只是把一个参数列表封装成一个类，然后，用到这些参数的时候，还需要把它们一个个取出来，这会不会是多此一举呢？就像这样：</p><pre><code>public void createBook(final NewBookParamters parameters) {\n  ...\n  Book book = Book.builder\n    .title(parameters.getTitle()) \n    .introduction(parameters.getIntroduction())\n    .coverUrl(parameters.getCoverUrl())\n    .type(parameters.getType())\n    .channel(parameters.getChannel())\n    .protagonists(parameters.getProtagonists())\n    .tags(parameters.getTags())\n    .completed(parameters.isCompleted())\n    .build();\n    \n  this.repository.save(book);\n}\n</code></pre><p>如果你也有这样的想法，那说明一件事：你还没有形成对软件设计的理解。我们并不是简单地把参数封装成类，站在设计的角度，我们这里引入的是一个新的模型。我在《软件设计之美》讨论<a href=\"https://time.geekbang.org/column/article/252598\">模型封装</a>的时候曾经说过，<strong>一个模型的封装应该是以行为为基础的。</strong></p><p>之前没有这个模型，所以，我们想不到它应该有什么行为，现在模型产生了，它就应该有自己配套的行为，那这个模型的行为是什么呢？从上面的代码我们不难看出，它的行为应该是构建一个作品对象出来。你理解了这一点，我们的代码就可以进一步调整了：</p><pre><code>public class NewBookParamters {\n  private String title;\n  private String introduction;\n  private URL coverUrl;\n  private BookType type;\n  private BookChannel channel;\n  private String protagonists;\n  private String tags;\n  private boolean completed;\n  \n  public Book newBook() {\n    return Book.builder\n      .title(title) \n      .introduction(introduction)\n      .coverUrl(coverUrl)\n      .type(type)\n      .channel(channel)\n      .protagonists(protagonists)\n      .tags(tags)\n      .completed(completed)\n      .build();\n  }\n}\n</code></pre><p>创建作品的函数就得到了极大的简化：</p><pre><code>public void createBook(final NewBookParamters parameters) {\n  ...\n  Book book = parameters.newBook();\n    \n  this.repository.save(book);\n}\n</code></pre><p>好，这里我们讨论消除长参数列表的一种方法，将参数列表封装成类。还记得我们前面提到的“如何扩展需求”这个问题吗？如果需求扩展，需要增加创建作品所需的内容，那这个参数列表就是不变的，相对来说，它就是稳定的。</p><p>或许你会问，那这个类就会不断膨胀，变成一个大类，那该怎么办呢？关于这一点，你可以回顾一下我们的<a href=\"https://time.geekbang.org/column/article/327483?utm_term=pc_interstitial_805\">前一讲</a>，看看怎么解决大类的问题。</p><h2>动静分离</h2><p>把长参数列表封装成一个类，这能解决大部分的长参数列表，但并不等于所有的长参数列表都应该用这种方式解决，因为不是所有情况下，参数都属于一个类。</p><p>我们再来看一段代码：</p><pre><code>public void getChapters(final long bookId, \n                        final HttpClient httpClient,\n                        final ChapterProcessor processor) {\n  HttpUriRequest request = createChapterRequest(bookId);\n  HttpResponse response = httpClient.execute(request);\n  List&lt;Chapter&gt; chapters = toChapters(response);\n  processor.process(chapters);\n}\n</code></pre><p>这个函数的作用是根据作品 ID 获取其对应的章节信息。如果，单纯以参数个数论，这个函数的参数数量并不算多。</p><p>如果你只是看这个函数，可能很难发现直接的问题。即便我们认为有问题，也可以用一个类把这个函数的参数都封装起来。不过，秉承我在这个专栏里讨论的一贯原则，绝对的数量并不是关键点，参数列表也应该是越少越好。针对这个函数，我们需要稍微分析一下这几个参数。</p><p>在这几个参数里面，每次传进来的 bookId 都是不一样的，是随着请求的不同而改变的。但 httpClient 和 processor 两个参数都是一样的，因为它们都有相同的逻辑，没有什么变化。</p><p>换言之，bookId 的变化频率同 httpClient 和 processor 这两个参数的变化频率是不同的。一边是每次都变，另一边是不变的。</p><p>我在《软件设计之美》中讲<a href=\"https://time.geekbang.org/column/article/240749\">分离关注点</a>时曾经讲到过，不同的数据变动方向也是不同的关注点。这里表现出来的就是典型的动数据（bookId）和静数据（httpClient 和 processor），它们是不同的关注点，应该分离开来。</p><p>具体到这个场景下，静态不变的数据完全可以成为这个函数所在类的一个字段，而只将每次变动的东西作为参数传递就可以了。按照这个思路，代码可以改成这个样子：</p><pre><code>public void getChapters(final long bookId) {\n  HttpUriRequest request = createChapterRequest(bookId);\n  HttpResponse response = this.httpClient.execute(request);\n  List&lt;Chapter&gt; chapters = toChapters(response);\n  this.processor.process(chapters);\n}\n</code></pre><p>这个坏味道其实是一个软件设计问题，代码缺乏应有的结构，所以，原本应该属于静态结构的部分却以动态参数的方式传来传去，无形之中拉长了参数列表。</p><p>这个例子也给了我们一个提示，长参数列表固然可以用一个类进行封装，但能够封装出这个类的前提条件是：<strong>这些参数属于一个类，有相同的变化原因。</strong></p><p>如果函数的参数有不同的变化频率，就要视情况而定了。对于静态的部分，我们前面已经看到了，它可以成为软件结构的一部分，而如果有多个变化频率，我们还可以封装出多个参数类来。</p><h2>告别标记</h2><p>我们再来看一个例子：</p><pre><code>public void editChapter(final long chapterId, \n                        final String title, \n                        final String content, \n                        final boolean apporved) {\n  ...\n}\n</code></pre><p>这是我们在前面课程“<a href=\"https://time.geekbang.org/column/article/325794?utm_term=pc_interstitial_805\">重复代码</a>”那一讲里提到过的一个函数，我们稍微复习一下，这几个参数分别表示，待修改章节的ID、标题和内容，最后一个参数表示这次修改是否直接审核通过。</p><p>前面几个参数是修改一个章节的必要信息，而这里的重点就在最后这个参数上。</p><p>之所以要有这么个参数，从业务上说，如果是作者进行编辑，之后要经过审核，而如果编辑来编辑的，那审核就直接通过，因为编辑本身扮演了审核人的角色。所以，你发现了，这个参数实际上是一个标记，标志着接下来的处理流程会有不同。</p><p>使用标记参数，是程序员初学编程时常用的一种手法，不过，正是因为这种手法实在是太好用了，造成的结果就是代码里面彩旗（flag）飘飘，各种标记满天飞。不仅变量里有标记，参数里也有。很多长参数列表其中就包含了各种标记参数。这也是很多代码产生混乱的一个重要原因。</p><p>在实际的代码中，我们必须小心翼翼地判断各个标记当前的值，才能做好处理。</p><p>解决标记参数，一种简单的方式就是，将标记参数代表的不同路径拆分出来。回到这段代码上，这里的一个函数可以拆分成两个函数，一个函数负责“普通的编辑”，另一个负责“可以直接审核通过的编辑”。</p><pre><code>// 普通的编辑，需要审核\npublic void editChapter(final long chapterId, \n                        final String title, \n                        final String content) {\n  ...\n}\n\n\n// 直接审核通过的编辑\npublic void editChapterWithApproval(final long chapterId,\n                                    final String title,\n                                    final String content) {\n ...\n}\n</code></pre><p>标记参数在代码中存在的形式很多，有的是布尔值的形式，有的是以枚举值的形式，还有的就是直接的字符串或者整数。无论哪种形式，我们都可以通过拆分函数的方式将它们拆开。<strong>在重构中，这种手法叫做移除标记参数（Remove Flag Argument）。</strong></p><p>最近这三节课，我们讲了长函数、大类和长参数列表三种不同的坏味道，但在我们阐述了对于这些坏味道的理解之后，仔细想想这些坏味道，其实背后都是一件事：<strong>我们应该编写“短小”的代码。</strong></p><p>这是由人类理解复杂问题的能力决定的，只有短小的代码，我们才能有更好地把握，而要写出短小的代码，需要我们能够“分离关注点”。</p><h2>总结时刻</h2><p>今天我们讲解的坏味道是长参数列表，它同样是一个“我一说，你就知道是怎么回事”的坏味道。</p><p>应对长参数列表主要的方式就是减少参数的数量，一种最直接的方式就是将参数列表封装成一个类。但并不是说所有的情况都能封装成类来解决，我们还要分析是否所有的参数都有相同的变动频率。</p><ul>\n<li>变化频率相同，则封装成一个类。</li>\n<li>变化频率不同的话：\n<ul>\n<li>静态不变的，可以成为软件结构的一部分；</li>\n<li>多个变化频率的，可以封装成几个类。</li>\n</ul>\n</li>\n</ul><p>除此之外，参数列表中经常会出现标记参数，这是参数列表变长的另一个重要原因。对于这种标记参数，一种解决方案就是根据这些标记参数，将函数拆分成多个函数。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>减小参数列表，越小越好</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/6d/9e1ce13379855142f535f999feaa5e6d.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>你曾经遇到的长参数列表有多长呢？你是怎样解决它的呢？欢迎在留言区分享你的经历。</p><p>也建议你“在教中学”，充分吸收理解这一讲的内容，并讲给自己的团队听。</p><p>感谢阅读，我们下一讲再见。</p><p><span class=\"reference\">参考资料：</span><br>\n<a href=\"https://time.geekbang.org/column/article/240749\">02 | 分离关注点：软件设计至关重要的第一步</a></p><p><a href=\"https://time.geekbang.org/column/article/252598\">14 | 面向对象之封装：怎样的封装才算是高内聚？</a></p>","comments":[{"had_liked":false,"id":273000,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1610395195,"is_pvip":true,"replies":[{"id":"100410","content":"如果只有一处地方传递标记，其实还好。如果标记是一路传递，透过多个函数，也许说明，这是另外一条路径，可以完全拆分出来。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612091638,"ip_address":"","comment_id":273000,"utype":1}],"discussion_count":2,"race_medal":0,"score":"104689610299","product_id":100068401,"comment_content":"关于通过拆分函数的方式来移除标记有一点疑问：<br><br>这种方式不是意味着，外部调用函数的时候需要标记去判断调用哪个函数吗？<br><br>这是不是说，这种方式变化过后，标记判断逻辑从当前函数转移到了调用函数部分，但是由于该标记是由调用函数产生，所以总的来说相当于减少了标记作为参数传递的部分。<br><br>请老师解答！谢谢","like_count":25,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513453,"discussion_content":"如果只有一处地方传递标记，其实还好。如果标记是一路传递，透过多个函数，也许说明，这是另外一条路径，可以完全拆分出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612091638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342056,"discussion_content":"我理解函数名代表着不同的业务操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610587853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273040,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1610418742,"is_pvip":false,"replies":[{"id":"99054","content":"这是要努力追求的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610583329,"ip_address":"","comment_id":273040,"utype":1}],"discussion_count":4,"race_medal":0,"score":"35970157110","product_id":100068401,"comment_content":"一个方法第一选择是没有参数。<br>第二选择是一个参数。<br>稍次之是两个参数。<br>三个以上参数简直无法忍受。<br><br>   ----代码整洁之道","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513470,"discussion_content":"这是要努力追求的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610583329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567440,"discussion_content":"OOP 中，这些函数参数都用其他方式代替。比如 this.xxx 等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650924522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378156,"discussion_content":"没有参数的方法是纯函数。返回结果永远一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623072025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898023,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f6/27/c27599ae.jpg","nickname":"术子米德","note":"","ucode":"382EA7E2AF0B56","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344206,"discussion_content":"没有参数的方法，能干啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611326565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273039,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1610418611,"is_pvip":true,"replies":[{"id":"99062","content":"很好的角度，是这样的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610586310,"ip_address":"","comment_id":273039,"utype":1}],"discussion_count":2,"race_medal":1,"score":"35970156979","product_id":100068401,"comment_content":"get&#47;set 的普及，很容易让人先入为主的把 get 开头的方法当做是“轻量级访问器”这样的用法：它只是简单地返回一个内部成员变量。文中的 getChapters，使用 fetch 或者 query 可能更合适？它们看起来更像是有一些代价的操作。","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513469,"discussion_content":"很好的角度，是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610586310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341956,"discussion_content":"你等于把业务语言数据库化了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610548255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298634,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":2377147,"ip_address":"","ucode":"C6C17173BFD68F","user_header":"https://static001.geekbang.org/account/avatar/00/24/45/bb/f5632a11.jpg","comment_is_top":false,"comment_ctime":1624244421,"is_pvip":false,"replies":[{"id":"108353","content":"如果标记过多，说明缺少了一个模型，应该考虑构建一个类。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1624277999,"ip_address":"","comment_id":298634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31689015493","product_id":100068401,"comment_content":"有一个疑问，添加标记参数有的时候是为了减少函数之间的重复，但如果移除标记参数而构建了多个函数，可能导致重复率提高，这时候如何抉择","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522196,"discussion_content":"如果标记过多，说明缺少了一个模型，应该考虑构建一个类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624277999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274399,"user_name":"一言尔莫笑","can_delete":false,"product_type":"c1","uid":1181502,"ip_address":"","ucode":"5BDC164EC980CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/3e/3128da2f.jpg","comment_is_top":false,"comment_ctime":1610997330,"is_pvip":false,"replies":[{"id":"99704","content":"构造一个对象的方法有很多，比如，builder 模式。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611185951,"ip_address":"","comment_id":274399,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18790866514","product_id":100068401,"comment_content":"有个疑问，如果方法A的参数列表原先就需要八九个参数，重构以后把参数放一个类B里面。<br>调方法A之前不一样要有一个参数很多的构造方法？","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514007,"discussion_content":"构造一个对象的方法有很多，比如，builder 模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611185951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274144,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1610872421,"is_pvip":false,"replies":[{"id":"99890","content":"对，比一个函数本身有标记更可怕的是，把标记传来传去。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611450459,"ip_address":"","comment_id":274144,"utype":1}],"discussion_count":2,"race_medal":1,"score":"18790741605","product_id":100068401,"comment_content":"告别标记：被调用者将业务进行拆分，移除了标记参数。但有这样一种情况：函数B调用函数C时，给C传了一个flag标志位，但B的这个flag不是B定义的，而是A传给B的，所以，我理解B也要进行业务拆分，这样层层拆分，业务就明确了。请老师指正。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513922,"discussion_content":"对，比一个函数本身有标记更可怕的是，把标记传来传去。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611450459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821728,"avatar":"","nickname":"600988292","note":"","ucode":"24BAE2B7A7B1E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409905,"discussion_content":"B没有用到标记位，为什么B要拆分业务？C用到了标记位，是不是只要把C的业务拆分就好？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635527738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283170,"user_name":"李文彬","can_delete":false,"product_type":"c1","uid":2251534,"ip_address":"","ucode":"4CD326DC443028","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia4qBUs5bFs5tU3yVCcBapIcnVftM60nrJ73eu30YDMbDNvjhvnibct3pMYlj62G1c7nH8jSBaiaLw/132","comment_is_top":false,"comment_ctime":1615606077,"is_pvip":false,"replies":[{"id":"102858","content":"这种做法没有封装","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1615815403,"ip_address":"","comment_id":283170,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14500507965","product_id":100068401,"comment_content":"前端往往是直接传一个json对象，看起来就只有一个参数，但往往也是一个偷懒的做法，因为啥时候想加字段就加字段","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516951,"discussion_content":"这种做法没有封装","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615815403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567441,"discussion_content":"这种做法也有优点，灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650925020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274567,"user_name":"里子的忧伤","can_delete":false,"product_type":"c1","uid":1587392,"ip_address":"","ucode":"CB4C529635D434","user_header":"https://static001.geekbang.org/account/avatar/00/18/38/c0/04decf07.jpg","comment_is_top":false,"comment_ctime":1611065833,"is_pvip":false,"replies":[{"id":"99700","content":"这种情况其实可能需要多态","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611156882,"ip_address":"","comment_id":274567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14495967721","product_id":100068401,"comment_content":"枚举作为参数时，函数里就得根据枚举做不同处理；如果把枚举参数去掉改为多个对应的函数，那根据枚举做不同的处理就提前到调用的地方了。除非用其它一些设计模式","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514055,"discussion_content":"这种情况其实可能需要多态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611156882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273304,"user_name":"adang","can_delete":false,"product_type":"c1","uid":1143712,"ip_address":"","ucode":"0F2ECF8B92D46B","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/a0/7dcc9212.jpg","comment_is_top":false,"comment_ctime":1610529841,"is_pvip":false,"replies":[{"id":"99044","content":"恭喜脱离苦海。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610552041,"ip_address":"","comment_id":273304,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14495431729","product_id":100068401,"comment_content":"在前一家公司，因为项目里几个相同的逻辑散落在各处，维护起来很不方便，所以做了一次重构，将逻辑放在一个方法里，根据标记参数处理特性化的地方。那次重构的结果就是其中一个方法的参数巨多，大约有十几个，其中好几个参数就是标记参数。看完今天这节课的内容，知道了，原来这也是一种坏味道。已经离开上家公司很久了，期望后面维护业务的小伙伴一切安好。:)","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513560,"discussion_content":"恭喜脱离苦海。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610552041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360828,"discussion_content":"给后面的埋坑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616546635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273390,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1610582125,"is_pvip":true,"replies":[{"id":"99149","content":"是的，你这个思路是对的，真正应该思考的是，到底哪些信息是必要的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610672302,"ip_address":"","comment_id":273390,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10200516717","product_id":100068401,"comment_content":"通过封装类形式上缩短了参数列表，但是传递的信息量其实还是那么多，本质上我们是不是应该减少非必要的信息传递呢？一个函数传递多少信息量较为合适呢？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513589,"discussion_content":"是的，你这个思路是对的，真正应该思考的是，到底哪些信息是必要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610672302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567442,"discussion_content":"再提供一个角度：信息传递和共享，是否有更合适的方式？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650925232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273118,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1610444178,"is_pvip":false,"replies":[{"id":"99057","content":"本质上来说，这和标记参数是一回事，可以参考标记参数的处理。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610583754,"ip_address":"","comment_id":273118,"utype":1}],"discussion_count":5,"race_medal":0,"score":"10200378770","product_id":100068401,"comment_content":"我们项目中，因为方法职责不够单一，一个方法可能被很多地方调用。当某个类需要增加参数的时候，其他被调用者都需要传该参数，有些用不到这个参数的地方，则直接传null，或者空字符串。然后在方法里面判断该参数不等于空，就走后面的指定逻辑，想请教一下 这种应该怎么重构。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513499,"discussion_content":"本质上来说，这和标记参数是一回事，可以参考标记参数的处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610583754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1362235,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c9/3b/ead87c38.jpg","nickname":"Seed2009","note":"","ucode":"E21E429D3D1F8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346216,"discussion_content":"重载一下方法可以吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611888147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341955,"discussion_content":"十六字方针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610548196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342094,"discussion_content":"额，邓老师说的十六字方针是啥哇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610592994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341955,"ip_address":""},"score":342094,"extra":""},{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043844,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","nickname":"邓志国","note":"","ucode":"380AE67ED7B9D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343342,"discussion_content":"找到了。旧的不变，新的创建，一步切换，旧的再见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611016426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341955,"ip_address":""},"score":343342,"extra":""}]}]},{"had_liked":false,"id":307652,"user_name":"阿姆斯壮","can_delete":false,"product_type":"c1","uid":1265599,"ip_address":"","ucode":"87D5923D639CD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/bf/6584bdeb.jpg","comment_is_top":false,"comment_ctime":1629190341,"is_pvip":false,"replies":[{"id":"111371","content":"手艺是要不断打磨的","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629212136,"ip_address":"","comment_id":307652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5924157637","product_id":100068401,"comment_content":"现在处于只要开车就听校长的音频。<br>在写代码的时候，不断实践。每次实践都会产生新的感悟。校长的文章是属于不是听过，看过就完成了的课程。而是需要结合实际工作项目，在项目中不断体会才能做到逐步打磨自己的编程手艺。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525229,"discussion_content":"手艺是要不断打磨的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629212136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290309,"user_name":"润豪","can_delete":false,"product_type":"c1","uid":1125122,"ip_address":"","ucode":"0946575790EFAF","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/02/7ef138a0.jpg","comment_is_top":false,"comment_ctime":1619493135,"is_pvip":false,"replies":[{"id":"105269","content":"可以，也可以使用Builder模式","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1619580114,"ip_address":"","comment_id":290309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5914460431","product_id":100068401,"comment_content":"那怎么去构建 NewBookParamters 嗯, 是不是也得把全部属性在构造函数里面传进去? 特别是每个字段都没有默认值, 需要设置.","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519167,"discussion_content":"可以，也可以使用Builder模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619580114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286204,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1617189276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912156572","product_id":100068401,"comment_content":"封装为对象，动静分离以及移除标记","like_count":1},{"had_liked":false,"id":273279,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1610522442,"is_pvip":true,"replies":[{"id":"99056","content":"确实有笔误，多谢提出。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610583710,"ip_address":"","comment_id":273279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905489738","product_id":100068401,"comment_content":"NewBookParameter类中newBook方法中:<br>      .title(parameters.getTitle())<br>      .completed(completed)<br>有问题应该改为.title(title)和.completed(complete)","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513553,"discussion_content":"确实有笔误，多谢提出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610583710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354183,"user_name":"天空提提","can_delete":false,"product_type":"c1","uid":1566421,"ip_address":"山东","ucode":"055EB8E1966E34","user_header":"https://static001.geekbang.org/account/avatar/00/17/e6/d5/20c2fb6b.jpg","comment_is_top":false,"comment_ctime":1660147763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660147763","product_id":100068401,"comment_content":"调用方法的地方还是要new NewBookParamters然后set值，为什么不直接new book赋值传递进去呢","like_count":1},{"had_liked":false,"id":351235,"user_name":"逗逼师父","can_delete":false,"product_type":"c1","uid":1017863,"ip_address":"陕西","ucode":"ECC2D82F83CBE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/07/7804f4cc.jpg","comment_is_top":false,"comment_ctime":1657634131,"is_pvip":true,"replies":[{"id":"128405","content":"DTO不是一个基础概念，而对象是。我们应该从根本的地方进行思考。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1659254512,"ip_address":"陕西","comment_id":351235,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1657634131","product_id":100068401,"comment_content":"老师您好，我感觉NewBookParameters这个类其实就是一个DTO，但是DTO又要求不能有行为，我自己想到的是通过一个适配器类来把NewBookParameter转成Book，但是又感觉搞复杂了。类基于行为来封装，但是DTO这个概念又要求不能有行为，我感觉整个人都要裂开了。。。不知道该怎么考虑问题了","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582131,"discussion_content":"DTO不是一个基础概念，而对象是。我们应该从根本的地方进行思考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659254512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580526,"discussion_content":"newBook()很直观啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658230733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347139,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653739417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653739417","product_id":100068401,"comment_content":"减小参数列表，越小越好--记下来","like_count":0},{"had_liked":false,"id":346980,"user_name":"smilekaka","can_delete":false,"product_type":"c1","uid":1501593,"ip_address":"","ucode":"C01D8020019FDC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ5Hnw1tL9EWGdzhibCw89hibKjibwcyUBCSJsQWaxxfGu5AkBibibV0anaKqw3nf3ZP0UWy5BaEYyw2Q/132","comment_is_top":false,"comment_ctime":1653575349,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653575349","product_id":100068401,"comment_content":"我激动地拍打着轮椅~~~","like_count":0},{"had_liked":false,"id":345350,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1652225792,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1652225792","product_id":100068401,"comment_content":"分离分离关注点，参数列表越小越好。","like_count":0},{"had_liked":false,"id":344198,"user_name":"远逝的栀子花","can_delete":false,"product_type":"c1","uid":1608615,"ip_address":"","ucode":"77DCF684BABEEF","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/a7/b6471f02.jpg","comment_is_top":false,"comment_ctime":1651362021,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651362021","product_id":100068401,"comment_content":"open stack的虚拟机的各种生命周期中函数你参数都是十几个参数，团队开发过程中也是不断增长参数列表，里面有各种flag判断，各种if判断，一个长函数能有几百行，一个for循环里面各种if for嵌套，看懂for循环得有十几个场景，极其平铺直叙。","like_count":0},{"had_liked":false,"id":340241,"user_name":"離殇81441","can_delete":false,"product_type":"c1","uid":2033418,"ip_address":"","ucode":"BCD5B9C22BA452","user_header":"https://static001.geekbang.org/account/avatar/00/1f/07/0a/0ffd9c40.jpg","comment_is_top":false,"comment_ctime":1648694077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648694077","product_id":100068401,"comment_content":"把过长的参数封装成类，是不是意味着调用的时候又要使用set构建这个参数对象","like_count":0},{"had_liked":false,"id":277545,"user_name":"tarjan","can_delete":false,"product_type":"c1","uid":2025938,"ip_address":"","ucode":"AEE1B8DF951774","user_header":"","comment_is_top":false,"comment_ctime":1612450106,"is_pvip":false,"replies":[{"id":"100678","content":"加油哦！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612482457,"ip_address":"","comment_id":277545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612450106","product_id":100068401,"comment_content":"类里面去builder另一个类型的对象。正是我最近在思考的东西😂谢谢老师，明天继续重构","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515090,"discussion_content":"加油哦！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612482457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}