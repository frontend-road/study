{"id":276545,"title":"09 | 切片集群：数据增多了，是该加内存还是加实例？","content":"<p>你好，我是蒋德钧。今天我们来学习切片集群。</p><p>我曾遇到过这么一个需求：要用Redis保存5000万个键值对，每个键值对大约是512B，为了能快速部署并对外提供服务，我们采用云主机来运行Redis实例，那么，该如何选择云主机的内存容量呢？</p><p>我粗略地计算了一下，这些键值对所占的内存空间大约是25GB（5000万*512B）。所以，当时，我想到的第一个方案就是：选择一台32GB内存的云主机来部署Redis。因为32GB的内存能保存所有数据，而且还留有7GB，可以保证系统的正常运行。同时，我还采用RDB对数据做持久化，以确保Redis实例故障后，还能从RDB恢复数据。</p><p>但是，在使用的过程中，我发现，Redis的响应有时会非常慢。后来，我们使用INFO命令查看Redis的latest_fork_usec指标值（表示最近一次fork的耗时），结果显示这个指标值特别高，快到秒级别了。</p><p>这跟Redis的持久化机制有关系。在使用RDB进行持久化时，Redis会fork子进程来完成，fork操作的用时和Redis的数据量是正相关的，而fork在执行时会阻塞主线程。数据量越大，fork操作造成的主线程阻塞的时间越长。所以，在使用RDB对25GB的数据进行持久化时，数据量较大，后台运行的子进程在fork创建时阻塞了主线程，于是就导致Redis响应变慢了。</p><!-- [[[read_end]]] --><p>看来，第一个方案显然是不可行的，我们必须要寻找其他的方案。这个时候，我们注意到了Redis的切片集群。虽然组建切片集群比较麻烦，但是它可以保存大量数据，而且对Redis主线程的阻塞影响较小。</p><p>切片集群，也叫分片集群，就是指启动多个Redis实例组成一个集群，然后按照一定的规则，把收到的数据划分成多份，每一份用一个实例来保存。回到我们刚刚的场景中，如果把25GB的数据平均分成5份（当然，也可以不做均分），使用5个实例来保存，每个实例只需要保存5GB数据。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/26/793251ca784yyf6ac37fe46389094b26.jpg?wh=2501*1342\" alt=\"\" title=\"切片集群架构图\"></p><p>那么，在切片集群中，实例在为5GB数据生成RDB时，数据量就小了很多，fork子进程一般不会给主线程带来较长时间的阻塞。采用多个实例保存数据切片后，我们既能保存25GB数据，又避免了fork子进程阻塞主线程而导致的响应突然变慢。</p><p>在实际应用Redis时，随着用户或业务规模的扩展，保存大量数据的情况通常是无法避免的。而切片集群，就是一个非常好的解决方案。这节课，我们就来学习一下。</p><h2>如何保存更多数据？</h2><p>在刚刚的案例里，为了保存大量数据，我们使用了大内存云主机和切片集群两种方法。实际上，这两种方法分别对应着Redis应对数据量增多的两种方案：纵向扩展（scale up）和横向扩展（scale out）。</p><ul>\n<li><strong>纵向扩展</strong>：升级单个Redis实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的CPU。就像下图中，原来的实例内存是8GB，硬盘是50GB，纵向扩展后，内存增加到24GB，磁盘增加到150GB。</li>\n<li><strong>横向扩展</strong>：横向增加当前Redis实例的个数，就像下图中，原来使用1个8GB内存、50GB磁盘的实例，现在使用三个相同配置的实例。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7a/1a/7a512fec7eba789c6d098b834929701a.jpg?wh=2745*1365\" alt=\"\" title=\"纵向扩展和横向扩展对比图\"></p><p>那么，这两种方式的优缺点分别是什么呢？</p><p>首先，纵向扩展的好处是，<strong>实施起来简单、直接</strong>。不过，这个方案也面临两个潜在的问题。</p><p>第一个问题是，当使用RDB对数据进行持久化时，如果数据量增加，需要的内存也会增加，主线程fork子进程时就可能会阻塞（比如刚刚的例子中的情况）。不过，如果你不要求持久化保存Redis数据，那么，纵向扩展会是一个不错的选择。</p><p>不过，这时，你还要面对第二个问题：<strong>纵向扩展会受到硬件和成本的限制</strong>。这很容易理解，毕竟，把内存从32GB扩展到64GB还算容易，但是，要想扩充到1TB，就会面临硬件容量和成本上的限制了。</p><p>与纵向扩展相比，横向扩展是一个扩展性更好的方案。这是因为，要想保存更多的数据，采用这种方案的话，只用增加Redis的实例个数就行了，不用担心单个实例的硬件和成本限制。<strong>在面向百万、千万级别的用户规模时，横向扩展的Redis切片集群会是一个非常好的选择</strong>。</p><p>不过，在只使用单个实例的时候，数据存在哪儿，客户端访问哪儿，都是非常明确的，但是，切片集群不可避免地涉及到多个实例的分布式管理问题。要想把切片集群用起来，我们就需要解决两大问题：</p><ul>\n<li>数据切片后，在多个实例之间如何分布？</li>\n<li>客户端怎么确定想要访问的数据在哪个实例上？</li>\n</ul><p>接下来，我们就一个个地解决。</p><h2>数据切片和实例的对应分布关系</h2><p>在切片集群中，数据需要分布在不同实例上，那么，数据和实例之间如何对应呢？这就和接下来我要讲的Redis Cluster方案有关了。不过，我们要先弄明白切片集群和Redis Cluster的联系与区别。</p><p>实际上，切片集群是一种保存大量数据的通用机制，这个机制可以有不同的实现方案。在Redis 3.0之前，官方并没有针对切片集群提供具体的方案。从3.0开始，官方提供了一个名为Redis Cluster的方案，用于实现切片集群。Redis Cluster方案中就规定了数据和实例的对应规则。</p><p>具体来说，Redis Cluster方案采用哈希槽（Hash Slot，接下来我会直接称之为Slot），来处理数据和实例之间的映射关系。在Redis Cluster方案中，一个切片集群共有16384个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的key，被映射到一个哈希槽中。</p><p>具体的映射过程分为两大步：首先根据键值对的key，按照<a href=\"https://en.wikipedia.org/wiki/Cyclic_redundancy_check\">CRC16算法</a>计算一个16 bit的值；然后，再用这个16bit值对16384取模，得到0~16383范围内的模数，每个模数代表一个相应编号的哈希槽。关于CRC16算法，不是这节课的重点，你简单看下链接中的资料就可以了。</p><p>那么，这些哈希槽又是如何被映射到具体的Redis实例上的呢？</p><p>我们在部署Redis Cluster方案时，可以使用cluster create命令创建集群，此时，Redis会自动把这些槽平均分布在集群实例上。例如，如果集群中有N个实例，那么，每个实例上的槽个数为16384/N个。</p><p>当然， 我们也可以使用cluster meet命令手动建立实例间的连接，形成集群，再使用cluster addslots命令，指定每个实例上的哈希槽个数。</p><p>举个例子，假设集群中不同Redis实例的内存大小配置不一，如果把哈希槽均分在各个实例上，在保存相同数量的键值对时，和内存大的实例相比，内存小的实例就会有更大的容量压力。遇到这种情况时，你可以根据不同实例的资源配置情况，使用cluster addslots命令手动分配哈希槽。</p><p>为了便于你理解，我画一张示意图来解释一下，数据、哈希槽、实例这三者的映射分布情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/ab/7d070c8b19730b308bfaabbe82c2f1ab.jpg?wh=2486*1266\" alt=\"\"></p><p>示意图中的切片集群一共有3个实例，同时假设有5个哈希槽，我们首先可以通过下面的命令手动分配哈希槽：实例1保存哈希槽0和1，实例2保存哈希槽2和3，实例3保存哈希槽4。</p><pre><code>redis-cli -h 172.16.19.3 –p 6379 cluster addslots 0,1\nredis-cli -h 172.16.19.4 –p 6379 cluster addslots 2,3\nredis-cli -h 172.16.19.5 –p 6379 cluster addslots 4\n</code></pre><p>在集群运行的过程中，key1和key2计算完CRC16值后，对哈希槽总个数5取模，再根据各自的模数结果，就可以被映射到对应的实例1和实例3上了。</p><p>另外，我再给你一个小提醒，<strong>在手动分配哈希槽时，需要把16384个槽都分配完，否则Redis集群无法正常工作</strong>。</p><p>好了，通过哈希槽，切片集群就实现了数据到哈希槽、哈希槽再到实例的分配。但是，即使实例有了哈希槽的映射信息，客户端又是怎么知道要访问的数据在哪个实例上呢？接下来，我就来和你聊聊。</p><h2>客户端如何定位数据？</h2><p>在定位键值对数据时，它所处的哈希槽是可以通过计算得到的，这个计算可以在客户端发送请求时来执行。但是，要进一步定位到实例，还需要知道哈希槽分布在哪个实例上。</p><p>一般来说，客户端和集群实例建立连接后，实例就会把哈希槽的分配信息发给客户端。但是，在集群刚刚创建的时候，每个实例只知道自己被分配了哪些哈希槽，是不知道其他实例拥有的哈希槽信息的。</p><p>那么，客户端为什么可以在访问任何一个实例时，都能获得所有的哈希槽信息呢？这是因为，Redis实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散。当实例之间相互连接后，每个实例就有所有哈希槽的映射关系了。</p><p>客户端收到哈希槽信息后，会把哈希槽信息缓存在本地。当客户端请求键值对时，会先计算键所对应的哈希槽，然后就可以给相应的实例发送请求了。</p><p>但是，在集群中，实例和哈希槽的对应关系并不是一成不变的，最常见的变化有两个：</p><ul>\n<li>在集群中，实例有新增或删除，Redis需要重新分配哈希槽；</li>\n<li>为了负载均衡，Redis需要把哈希槽在所有实例上重新分布一遍。</li>\n</ul><p>此时，实例之间还可以通过相互传递消息，获得最新的哈希槽分配信息，但是，客户端是无法主动感知这些变化的。这就会导致，它缓存的分配信息和最新的分配信息就不一致了，那该怎么办呢？</p><p>Redis Cluster方案提供了一种<strong>重定向机制，</strong>所谓的“重定向”，就是指，客户端给一个实例发送数据读写操作时，这个实例上并没有相应的数据，客户端要再给一个新实例发送操作命令。</p><p>那客户端又是怎么知道重定向时的新实例的访问地址呢？当客户端把一个键值对的操作请求发给一个实例时，如果这个实例上并没有这个键值对映射的哈希槽，那么，这个实例就会给客户端返回下面的MOVED命令响应结果，这个结果中就包含了新实例的访问地址。</p><pre><code>GET hello:key\n(error) MOVED 13320 172.16.19.5:6379\n</code></pre><p>其中，MOVED命令表示，客户端请求的键值对所在的哈希槽13320，实际是在172.16.19.5这个实例上。通过返回的MOVED命令，就相当于把哈希槽所在的新实例的信息告诉给客户端了。这样一来，客户端就可以直接和172.16.19.5连接，并发送操作请求了。</p><p>我画一张图来说明一下，MOVED重定向命令的使用方法。可以看到，由于负载均衡，Slot  2中的数据已经从实例2迁移到了实例3，但是，客户端缓存仍然记录着“Slot 2在实例2”的信息，所以会给实例2发送命令。实例2给客户端返回一条MOVED命令，把Slot  2的最新位置（也就是在实例3上），返回给客户端，客户端就会再次向实例3发送请求，同时还会更新本地缓存，把Slot  2与实例的对应关系更新过来。</p><p><img src=\"https://static001.geekbang.org/resource/image/35/09/350abedefcdbc39d6a8a8f1874eb0809.jpg?wh=2818*2250\" alt=\"\" title=\"客户端MOVED重定向命令\"></p><p>需要注意的是，在上图中，当客户端给实例2发送命令时，Slot 2中的数据已经全部迁移到了实例3。在实际应用时，如果Slot 2中的数据比较多，就可能会出现一种情况：客户端向实例2发送请求，但此时，Slot 2中的数据只有一部分迁移到了实例3，还有部分数据没有迁移。在这种迁移部分完成的情况下，客户端就会收到一条ASK报错信息，如下所示：</p><pre><code>GET hello:key\n(error) ASK 13320 172.16.19.5:6379\n</code></pre><p>这个结果中的ASK命令就表示，客户端请求的键值对所在的哈希槽13320，在172.16.19.5这个实例上，但是这个哈希槽正在迁移。此时，客户端需要先给172.16.19.5这个实例发送一个ASKING命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送GET命令，以读取数据。</p><p>看起来好像有点复杂，我再借助图片来解释一下。</p><p>在下图中，Slot 2正在从实例2往实例3迁移，key1和key2已经迁移过去，key3和key4还在实例2。客户端向实例2请求key2后，就会收到实例2返回的ASK命令。</p><p>ASK命令表示两层含义：第一，表明Slot数据还在迁移中；第二，ASK命令把客户端所请求数据的最新实例地址返回给客户端，此时，客户端需要给实例3发送ASKING命令，然后再发送操作命令。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/b0/e93ae7f4edf30724d58bf68yy714eeb0.jpg?wh=3000*2250\" alt=\"\" title=\"客户端ASK重定向命令\"></p><p>和MOVED命令不同，<strong>ASK命令并不会更新客户端缓存的哈希槽分配信息</strong>。所以，在上图中，如果客户端再次请求Slot 2中的数据，它还是会给实例2发送请求。这也就是说，ASK命令的作用只是让客户端能给新实例发送一次请求，而不像MOVED命令那样，会更改本地缓存，让后续所有命令都发往新实例。</p><h2>小结</h2><p>这节课，我们学习了切片集群在保存大量数据方面的优势，以及基于哈希槽的数据分布机制和客户端定位键值对的方法。</p><p>在应对数据量扩容时，虽然增加内存这种纵向扩展的方法简单直接，但是会造成数据库的内存过大，导致性能变慢。Redis切片集群提供了横向扩展的模式，也就是使用多个实例，并给每个实例配置一定数量的哈希槽，数据可以通过键的哈希值映射到哈希槽，再通过哈希槽分散保存到不同的实例上。这样做的好处是扩展性好，不管有多少数据，切片集群都能应对。</p><p>另外，集群的实例增减，或者是为了实现负载均衡而进行的数据重新分布，会导致哈希槽和实例的映射关系发生变化，客户端发送请求时，会收到命令执行报错信息。了解了MOVED和ASK命令，你就不会为这类报错而头疼了。</p><p>我刚刚说过，在Redis 3.0 之前，Redis官方并没有提供切片集群方案，但是，其实当时业界已经有了一些切片集群的方案，例如基于客户端分区的ShardedJedis，基于代理的Codis、Twemproxy等。这些方案的应用早于Redis Cluster方案，在支撑的集群实例规模、集群稳定性、客户端友好性方面也都有着各自的优势，我会在后面的课程中，专门和你聊聊这些方案的实现机制，以及实践经验。这样一来，当你再碰到业务发展带来的数据量巨大的难题时，就可以根据这些方案的特点，选择合适的方案实现切片集群，以应对业务需求了。</p><h2>每课一问</h2><p>按照惯例，给你提一个小问题：Redis Cluster方案通过哈希槽的方式把键值对分配到不同的实例上，这个过程需要对键值对的key做CRC计算，然后再和哈希槽做映射，这样做有什么好处吗？如果用一个表直接把键值对和实例的对应关系记录下来（例如键值对1在实例2上，键值对2在实例1上），这样就不用计算key和哈希槽的对应关系了，只用查表就行了，Redis为什么不这么做呢？</p><p>欢迎你在留言区畅所欲言，如果你觉得有收获，也希望你能帮我把今天的内容分享给你的朋友，帮助更多人解决切片集群的问题。</p>","comments":[{"had_liked":false,"id":243679,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1598248609,"is_pvip":true,"discussion_count":92,"race_medal":0,"score":"3579306006177","product_id":100056701,"comment_content":"Redis Cluster不采用把key直接映射到实例的方式，而采用哈希槽的方式原因：<br><br>1、整个集群存储key的数量是无法预估的，key的数量非常多时，直接记录每个key对应的实例映射关系，这个映射表会非常庞大，这个映射表无论是存储在服务端还是客户端都占用了非常大的内存空间。<br><br>2、Redis Cluster采用无中心化的模式（无proxy，客户端与服务端直连），客户端在某个节点访问一个key，如果这个key不在这个节点上，这个节点需要有纠正客户端路由到正确节点的能力（MOVED响应），这就需要节点之间互相交换路由表，每个节点拥有整个集群完整的路由关系。如果存储的都是key与实例的对应关系，节点之间交换信息也会变得非常庞大，消耗过多的网络资源，而且就算交换完成，相当于每个节点都需要额外存储其他节点的路由表，内存占用过大造成资源浪费。<br><br>3、当集群在扩容、缩容、数据均衡时，节点之间会发生数据迁移，迁移时需要修改每个key的映射关系，维护成本高。<br><br>4、而在中间增加一层哈希槽，可以把数据和节点解耦，key通过Hash计算，只需要关心映射到了哪个哈希槽，然后再通过哈希槽和节点的映射表找到节点，相当于消耗了很少的CPU资源，不但让数据分布更均匀，还可以让这个映射表变得很小，利于客户端和服务端保存，节点之间交换信息时也变得轻量。<br><br>5、当集群在扩容、缩容、数据均衡时，节点之间的操作例如数据迁移，都以哈希槽为基本单位进行操作，简化了节点扩容、缩容的难度，便于集群的维护和管理。<br><br>另外，我想补充一下Redis集群相关的知识，以及我的理解：<br><br>Redis使用集群方案就是为了解决单个节点数据量大、写入量大产生的性能瓶颈的问题。多个节点组成一个集群，可以提高集群的性能和可靠性，但随之而来的就是集群的管理问题，最核心问题有2个：请求路由、数据迁移（扩容&#47;缩容&#47;数据平衡）。<br><br>1、请求路由：一般都是采用哈希槽的映射关系表找到指定节点，然后在这个节点上操作的方案。<br><br>Redis Cluster在每个节点记录完整的映射关系(便于纠正客户端的错误路由请求)，同时也发给客户端让客户端缓存一份，便于客户端直接找到指定节点，客户端与服务端配合完成数据的路由，这需要业务在使用Redis Cluster时，必须升级为集群版的SDK才支持客户端和服务端的协议交互。<br><br>其他Redis集群化方案例如Twemproxy、Codis都是中心化模式（增加Proxy层），客户端通过Proxy对整个集群进行操作，Proxy后面可以挂N多个Redis实例，Proxy层维护了路由的转发逻辑。操作Proxy就像是操作一个普通Redis一样，客户端也不需要更换SDK，而Redis Cluster是把这些路由逻辑做在了SDK中。当然，增加一层Proxy也会带来一定的性能损耗。<br><br>2、数据迁移：当集群节点不足以支撑业务需求时，就需要扩容节点，扩容就意味着节点之间的数据需要做迁移，而迁移过程中是否会影响到业务，这也是判定一个集群方案是否成熟的标准。<br><br>Twemproxy不支持在线扩容，它只解决了请求路由的问题，扩容时需要停机做数据重新分配。而Redis Cluster和Codis都做到了在线扩容（不影响业务或对业务的影响非常小），重点就是在数据迁移过程中，客户端对于正在迁移的key进行操作时，集群如何处理？还要保证响应正确的结果？<br><br>Redis Cluster和Codis都需要服务端和客户端&#47;Proxy层互相配合，迁移过程中，服务端针对正在迁移的key，需要让客户端或Proxy去新节点访问（重定向），这个过程就是为了保证业务在访问这些key时依旧不受影响，而且可以得到正确的结果。由于重定向的存在，所以这个期间的访问延迟会变大。等迁移完成之后，Redis Cluster每个节点会更新路由映射表，同时也会让客户端感知到，更新客户端缓存。Codis会在Proxy层更新路由表，客户端在整个过程中无感知。<br><br>除了访问正确的节点之外，数据迁移过程中还需要解决异常情况（迁移超时、迁移失败）、性能问题（如何让数据迁移更快、bigkey如何处理），这个过程中的细节也很多。<br><br>Redis Cluster的数据迁移是同步的，迁移一个key会同时阻塞源节点和目标节点，迁移过程中会有性能问题。而Codis提供了异步迁移数据的方案，迁移速度更快，对性能影响最小，当然，实现方案也比较复杂。","like_count":834,"discussions":[{"author":{"id":1529249,"avatar":"https://static001.geekbang.org/account/avatar/00/17/55/a1/e77b9612.jpg","nickname":"峪五","note":"","ucode":"DCF2DC959D0CD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340667,"discussion_content":"作者说：要不你来讲吧","likes_number":48,"is_delete":false,"is_hidden":false,"ctime":1610091771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1111032,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoGNavHX8buPVrwfPnrCuz57NbKynXF6ZtHkX4icpgQ3R2LdXussnJgO1Kic3G4aFLPvDaRfFia00Sjg/132","nickname":"dennis","note":"","ucode":"8E82B8257A1A20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1529249,"avatar":"https://static001.geekbang.org/account/avatar/00/17/55/a1/e77b9612.jpg","nickname":"峪五","note":"","ucode":"DCF2DC959D0CD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377380,"discussion_content":"上学时，我没少听这句话","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1622622280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340667,"ip_address":""},"score":377380,"extra":""}]},{"author":{"id":1635531,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f4/cb/0028f467.jpg","nickname":"小太阳","note":"","ucode":"82FD62E147CD7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337325,"discussion_content":"课代表，请问下redis集群模式为什么不采用一致性hash，而是用这种槽的方式？\nRedis Cluster does not use consistent hashing, but a different form of sharding where every key is conceptually part of what we call a hash slot.","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1608875397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1434196,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e2/54/ccd36eda.jpg","nickname":"我爱学习","note":"","ucode":"8B850B794272C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1635531,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f4/cb/0028f467.jpg","nickname":"小太阳","note":"","ucode":"82FD62E147CD7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337889,"discussion_content":"我试着回答一下。\n一致性hash通常用来解决当集群节点数变化时，大量缓存无法命中的情况，因为hashcode/节点数，节点数的变化使得大部分计算结果都发生了变化。一致性hash可以保证同一个key在节点数变化的时候，大部分“hashcode/节点数”仍然能计算出相同结果。\n而redis的槽设计，将节点数设定为16384，每个节点分配一定的槽数，客户端也可以缓存槽与节点的对应关系，节点与节点之间也知道槽与节点的对应关系。槽的设计就像是客户端与redis集群的一个中间层，它将集群中存储空间的分配具象化了。你可以让节点A多分配几个槽，以增大节点A承受的压力，也可以对节点B少分配几个槽，以降低节点B承受的压力，当然，一致性hash也可以实现，但没有槽来得这么具体。\n想象一下没有槽的设计，客户端需要去服务器获取一个key，首先需要计算key的hash值，然后获取hash环，定位key所在的redis节点（如果需要增加平衡度，可能还需要引入虚拟节点，根据虚拟节点再找真实节点）。在这个过程中，槽比hash环的设计，性能是更高的，同时在压力分配问题上也更加灵活。\n\n我的结论是：都可以，但槽更加合适。不管是性能上，还是可维护性，灵活性都更高。","likes_number":37,"is_delete":false,"is_hidden":false,"ctime":1609117894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337325,"ip_address":""},"score":337889,"extra":""},{"author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1434196,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e2/54/ccd36eda.jpg","nickname":"我爱学习","note":"","ucode":"8B850B794272C5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368085,"discussion_content":"redis是16384个槽，一致性hash是2^32-1个槽，感觉没什么区别。用一致性hash实现的话，每个节点同样保存整个集群槽与节点的对应关系，也没有区别。但2^32-1数量太多，对应关系应该用范围表示更合适","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1618562465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337889,"ip_address":""},"score":368085,"extra":""},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1635531,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f4/cb/0028f467.jpg","nickname":"小太阳","note":"","ucode":"82FD62E147CD7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375790,"discussion_content":"可以推演一下 划定16384个槽 但这些槽必须要绑定到特定的实例a b c上。那么就意味着槽和实例是有状态的 否则当槽迁移或丢失时就需要解决往哪个槽漂移的问题。而redis集群的方案槽和实例是弱绑定的 你可以使用lua脚本均分 也可以自己addcluster","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621850071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337325,"ip_address":""},"score":375790,"extra":""}]},{"author":{"id":1738493,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qn1PDx7xA7jKFZr4vHibmsvoZ7bwUCzHTg3uywiaESCgFTTMibPpKdZOfrqTXtdQXxUJqFqmLAj5NoIFMJpYibbcOQ/132","nickname":"happy learn","note":"","ucode":"BCE08C8E64A23E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306026,"discussion_content":"请问课代表，在重定向的机制中，像例子里的情况key1 key2已经迁移到新的实例3，key3 key4还在实例2的时候，如果客户端请求的是key3的话，它是会得到实例2直接返回key3的value还是得到ASK？如果是ASK那么客户端去ASKING 实例3的时候会不会阻塞到key3迁移完成？谢谢","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1600150514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1134895,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/2f/7b04140c.jpg","nickname":"孫やさん","note":"","ucode":"C60877C1C71685","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1738493,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qn1PDx7xA7jKFZr4vHibmsvoZ7bwUCzHTg3uywiaESCgFTTMibPpKdZOfrqTXtdQXxUJqFqmLAj5NoIFMJpYibbcOQ/132","nickname":"happy learn","note":"","ucode":"BCE08C8E64A23E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537129,"discussion_content":"这还用问吗哥哥，肯定是直接返回结果啦，让你设计的话你难道不直接返回吗？另外作者老师也说了，每次都会访问实例2，这就足够说明问题了，要学会思考🧐","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1638964797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306026,"ip_address":""},"score":537129,"extra":""},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134895,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/2f/7b04140c.jpg","nickname":"孫やさん","note":"","ucode":"C60877C1C71685","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":570635,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651843393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537129,"ip_address":""},"score":570635,"extra":""}]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384216,"discussion_content":"在集群模式下，哨兵是如何工作的？","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1626428893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2757673,"avatar":"","nickname":"伊甸","note":"","ucode":"E2BE2411619DBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409250,"discussion_content":"两种模式吧？集群中没有哨兵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635402443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384216,"ip_address":""},"score":409250,"extra":""},{"author":{"id":2729003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a4/2b/0e1bab59.jpg","nickname":"senda","note":"","ucode":"74541011088AFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541538,"discussion_content":"哨兵是有主从库的模式下使用的吧，当然集群模式下的每个分片都是可以做主从库的，这时候哨兵就出来配合工作了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1640438884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384216,"ip_address":""},"score":541538,"extra":""},{"author":{"id":1252813,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1d/cd/3819726f.jpg","nickname":"徐同学呀","note":"","ucode":"03383EE820514D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558261,"discussion_content":"如果redis cluster 中的主节点有从节点，那么其他主节点就当充当sentinel，互相检测其他主节点是否在线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648179997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384216,"ip_address":""},"score":558261,"extra":""}]},{"author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374976,"discussion_content":"请教大佬，redis为什么有16库，但集群又支持，这16个库使用场景是什么呢？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1621426740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2239839,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/u1Zr9yTrTibSWicFFophCK9KvSkt5ETLfxoL4eejFoPOZJTYorjibK3y0s4odHmUphHwcrHtDfYiag4bId4Cr6zfuw/132","nickname":"solk","note":"","ucode":"7246DBAED4ABB5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542528,"discussion_content":"集群是为了解决数据量大、并发量大的问题。多个库是解决不同业务复用同一个redis服务，数据之间冲突的问题。没有必然的联系。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1640775378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374976,"ip_address":""},"score":542528,"extra":""}]},{"author":{"id":1235106,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/a2/68ff5bca.jpg","nickname":"哦哦","note":"","ucode":"0E72B89C30522B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331888,"discussion_content":"这是个巨佬","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1607001463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361903,"discussion_content":"还一个原因，用映射表可能会导致数据分布不均匀。\n因为如果要分布均匀，有三种方案：\n一个是取余放入，一个是先哈希hash再取余放入（目前redis用此方案），还一个是随机放入，\n因为字符串的存在，无法直接取余，而随机放入的效果不如hash取余稳定。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616777048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283052,"avatar":"https://static001.geekbang.org/account/avatar/00/13/93/ec/985675c8.jpg","nickname":"小高","note":"","ucode":"FCD422249F7355","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335953,"discussion_content":"学习委员","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608425361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2056201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","nickname":"SandCarving","note":"","ucode":"6B97DB71613A46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323588,"discussion_content":"课代表，我想问一下Redis会在什么情况下进行负载均衡和数据迁移？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604971252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2056201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","nickname":"SandCarving","note":"","ucode":"6B97DB71613A46","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323601,"discussion_content":"不是自动的，运维需手动触发。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1604973438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323588,"ip_address":""},"score":323601,"extra":""}]},{"author":{"id":2056201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","nickname":"SandCarving","note":"","ucode":"6B97DB71613A46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323573,"discussion_content":"巨佬","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604970394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1175329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/21/69c181b8.jpg","nickname":"Rain","note":"","ucode":"603DFFAC6A3755","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302701,"discussion_content":"一入集群深似海啊，了解ceph 的话，redis这个设计机制跟ceph挺像的，去中心化，客户端直连，自动数据均衡，不过ceph 要成熟的多。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599011664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214893,"avatar":"https://static001.geekbang.org/account/avatar/00/12/89/ad/4efd929a.jpg","nickname":"老荀","note":"","ucode":"C32E743518DECD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379076,"discussion_content":"课代表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623664495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353771,"discussion_content":"实在是太强悍了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615203635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229254,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/c6/1456274a.jpg","nickname":"麦呆小石头","note":"","ucode":"1F21C9FBE2057C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330150,"discussion_content":"这才像一个真正懂redis的互联网老司机。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606538974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097042,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bd/52/5994ad51.jpg","nickname":"哈姆","note":"","ucode":"B40EFE58BD2D20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329665,"discussion_content":"你好，课代表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606445617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1300285,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d7/3d/a076faf1.jpg","nickname":"蜗牛","note":"","ucode":"A99C9C890F95E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329368,"discussion_content":"现在每次做笔记，也会把课代表的 记进去！ 哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606372678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300741,"discussion_content":"关于Redis集群的细节非常多，期待老师后续带来更多这方面的讲解。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598252211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1411281,"avatar":"https://static001.geekbang.org/account/avatar/00/15/88/d1/43ebb68c.jpg","nickname":"一条有梦想的咸鱼","note":"","ucode":"15BA7CA2C08EFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300819,"discussion_content":"我看《redis设计与实现》中说，如果集群中某个节点下线了，这个节点负责槽会给它的从节点。如果它没有从节点，这些槽会怎么办呢？自动顺时针迁移给下一个节点吗？\n还有如果在集群中新增一个节点，是要手动全部重写分配槽，还是怎么样呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598271294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300741,"ip_address":""},"score":300819,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1411281,"avatar":"https://static001.geekbang.org/account/avatar/00/15/88/d1/43ebb68c.jpg","nickname":"一条有梦想的咸鱼","note":"","ucode":"15BA7CA2C08EFF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300866,"discussion_content":"没有从节点，那这个节点就相当于故障了，内存数据会丢失，只能从RDB或AOF文件中恢复数据，不会自动转移到下一个节点。\n\n新增节点，可以选择只迁移某一个节点的数据，也可以选择自动平衡数据，每个节点都迁移一部分到新节点，这是可配置的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598283718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300819,"ip_address":""},"score":300866,"extra":""},{"author":{"id":1103091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","nickname":"李二木","note":"","ucode":"30E03BB84ADB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301100,"discussion_content":"假如多个redis实列配置的内存大小不一致，会对计算槽位有影响吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598407409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300866,"ip_address":""},"score":301100,"extra":""}]},{"author":{"id":1021825,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","nickname":"David","note":"","ucode":"22CBBC13FC97A9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587947,"discussion_content":"真强 通透","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663399266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/ef/f7e29b0f.jpg","nickname":"baohao","note":"","ucode":"0CCC4AAF07650A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579588,"discussion_content":"想请教一下，如果cluster其中一个节点的主从全都挂了，那这个集群还可用么？是会由于缺少slot导致整体集群都不可用，还是挂掉的节点负责的slot处理的请求部分不可用？会不会触发自动rebalance呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657538577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1792714,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5a/ca/4d5d23d1.jpg","nickname":"Im me","note":"","ucode":"FF7DEED4BB4C37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556985,"discussion_content":"再次向课代表致敬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647594627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553362,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645861856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551696,"discussion_content":"陈独秀同学，你坐下！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645085712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1891334,"avatar":"","nickname":"ispark","note":"","ucode":"4676C45E485117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534615,"discussion_content":"为什么要用slot呢,直接以节点去做key的路由好像也可以,而且集群小的的时候映射关系简单,集群多的时候也不会有16384的限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638242624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2617418,"avatar":"","nickname":"DCtest3","note":"","ucode":"E86369E784A52F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411153,"discussion_content":"可以通过程序配置，将所有的集群IP配置在程序里面，就不需要move的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635858966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2804690,"avatar":"","nickname":"呵呵哒","note":"","ucode":"C08AA79F71D193","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403651,"discussion_content":"假设主动下线了一个节点，把槽迁移到其他节点了。客户端不知道变更，查询就报错了，不会重定向，所以下线时怎么让客户端知道？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634125691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2105175,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/40ab8h1zbSUZmzxARyicDuXECYwtQNDd9jxAbys5LMnVLJMmibTCHd1icrRZMnMSvTJ27UdITA0439hAaVIxcOkGQ/132","nickname":"Geek_72b9a7","note":"","ucode":"4C26B79F9F15A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386521,"discussion_content":"codis集群中为啥要引入zk，没看懂。 有朋友可以解释一下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627626344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","nickname":"密码123456","note":"","ucode":"9889463CC0EA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382194,"discussion_content":"问下大佬，redis切片只针对key吗？比如数组数据，hash数据支持切片吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625469862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2293155,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKug7j7FSiaWwGzQKWXPbHA9teGtx4TncVUyxbSUTgxVXH1jESD44FRQJZspF5CrvU7ib0tNJ7Stoag/132","nickname":"Geek_de5d8e","note":"","ucode":"A9D7017CA8E7E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1126593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","nickname":"密码123456","note":"","ucode":"9889463CC0EA71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392060,"discussion_content":"还不是有个key","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630808873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":382194,"ip_address":""},"score":392060,"extra":""}]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381919,"discussion_content":"🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625295908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063920,"avatar":"","nickname":"Geek_7bb784","note":"","ucode":"5DF4B955A266F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376803,"discussion_content":"假如一个集群有三个实例，现在数据量增长，新增了一个实例，这时候有些槽中的数据正在迁移。\n\n但发现此时数据量又涨了，需要再增加一个实例，这时候该怎么办？等槽中数据迁移完再增加实例？还是可以直接增加实例？\n\n如果等槽中数据迁移完，那么当前4个实例无法支撑新增数据量。但直接新增实例，正在迁移的槽又面临重新分配。有合适的解决方式吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622358502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1234273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/61/8ad99e09.jpg","nickname":"刘百万","note":"","ucode":"692E23D070641A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2063920,"avatar":"","nickname":"Geek_7bb784","note":"","ucode":"5DF4B955A266F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376839,"discussion_content":"只能等迁移完了再搞。 另外 迁移之前要预判能不能撑得住。 你说的这种情况leader 不行啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622374632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376803,"ip_address":""},"score":376839,"extra":""},{"author":{"id":1116403,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/f3/35773693.jpg","nickname":"非常非常非常非常的普通中下","note":"","ucode":"4D15549F5055D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2063920,"avatar":"","nickname":"Geek_7bb784","note":"","ucode":"5DF4B955A266F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381312,"discussion_content":"没听说扩容一个的一般都是扩容一倍把，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625011651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376803,"ip_address":""},"score":381312,"extra":""}]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375791,"discussion_content":"这里还漏了一个点 就是tryagain。因为我们再迁移时候有一部分key还留在老实例上 但如果接收到批量key 此时redis怎么办呢？答案是用tryagain报错处理。当然redis内部都是按照addReplySds()来处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621850199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003205,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4e/c5/78626367.jpg","nickname":"型火🔥","note":"","ucode":"C2322918B31E60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375209,"discussion_content":"问下大佬, redis cluster 集群中, 客户端是与每一个节点建立连接还是只连接某一个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621515504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2737140,"avatar":"","nickname":"Geek_0d08a4","note":"","ucode":"9B7675CF3FE9E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1003205,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4e/c5/78626367.jpg","nickname":"型火🔥","note":"","ucode":"C2322918B31E60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":388797,"discussion_content":"所有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628959136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375209,"ip_address":""},"score":388797,"extra":""}]},{"author":{"id":1246664,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg","nickname":"山顶的洞","note":"","ucode":"D3E9E928A3FA62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367537,"discussion_content":"🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618389110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252612,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1d/04/377b3f79.jpg","nickname":"高威","note":"","ucode":"CFAD8818E5ACEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351808,"discussion_content":"这是大佬中的大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614450961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330291,"discussion_content":"切片集群有主从吗？如果有的话，那是不是又成了哨兵集群那一套了？如果没有的话，那岂不是一个节点挂了，数据都丢失了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606557586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330301,"discussion_content":"有主从，关于故障恢复你看看文档。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606561159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330291,"ip_address":""},"score":330301,"extra":""},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334758,"discussion_content":"一般是三主三从","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607960639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":330291,"ip_address":""},"score":334758,"extra":""}]},{"author":{"id":2308831,"avatar":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","nickname":"周天航","note":"","ucode":"B28D84594679A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325337,"discussion_content":"课代表你好，如果集群模式新增节点，重新分配hash槽位的时候，原来槽位里面有数据是不是重新分配后，数据一起分配过去了？我以前以为有数据是不可以分配槽位的，必须要清空redis集群才能新增节点分配槽位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605275144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2308831,"avatar":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","nickname":"周天航","note":"","ucode":"B28D84594679A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325350,"discussion_content":"没看懂你描述的问题。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605276972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325337,"ip_address":""},"score":325350,"extra":""},{"author":{"id":2308831,"avatar":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","nickname":"周天航","note":"","ucode":"B28D84594679A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":325777,"discussion_content":"就是一个3主3从的集群，里面已经有数据了。此时可以不删除数据，直接扩容到4主4从吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605429051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325350,"ip_address":""},"score":325777,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2308831,"avatar":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","nickname":"周天航","note":"","ucode":"B28D84594679A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325785,"discussion_content":"当然可以，扩容不会删数据，但需要迁移数据。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605430751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325777,"ip_address":""},"score":325785,"extra":""}]},{"author":{"id":1479923,"avatar":"https://static001.geekbang.org/account/avatar/00/16/94/f3/4f88b0e6.jpg","nickname":"Hardy","note":"","ucode":"A4599A50D2573F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316705,"discussion_content":"@Kaito 课代表, ask我理解是临时的，但是move永久的，但是一个节点一般对应一段solt值，我看move只会返回一个映射，客户端什么时候去更新ip和solt段值映射呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603443222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397058,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/42/47808b22.jpg","nickname":"HALOXIAO","note":"","ucode":"8EC17EC85EF2D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308620,"discussion_content":"如果一个主节点和它的从节点全挂了，整个集群好像会不可用，为什么是整个集群不可以，而不是其他节点视它为下线，我对于这点很不明白，希望Kaito大佬能指点指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601010724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1397058,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/42/47808b22.jpg","nickname":"HALOXIAO","note":"","ucode":"8EC17EC85EF2D4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308852,"discussion_content":"一个节点主从都挂了，意味着这个节点数据丢失了。集群是否继续可用，是有配置可以控制的，可以继续提供服务也可以停止服务，你看下配置文件。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1601096434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308620,"ip_address":""},"score":308852,"extra":""}]},{"author":{"id":1024128,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/80/2349287c.jpg","nickname":"简约风丶","note":"","ucode":"4F1541223C7ED5","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303276,"discussion_content":"课代表，你知道hash槽里面会存储什么吗，比如说会存keys吗，移动槽的时候怎么知道有哪些数据要迁移呢？或者说每个slot在内存中有一个固定区域吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599207421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1024128,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/80/2349287c.jpg","nickname":"简约风丶","note":"","ucode":"4F1541223C7ED5","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":303326,"discussion_content":"每个哈希槽会记录自己处理（占有）哪些槽 slots，还有一个 slots_to_keys 跳跃表记录了槽和键之间的关系（score是槽号，member是键），这样就能找到这个槽/数据库对应的所有数据","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1599212042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303276,"ip_address":""},"score":303326,"extra":""}]},{"author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301824,"discussion_content":"16384个槽是固定不变的吗？客户端求模取余计算slot用16384，这个参数是客户端SDK写死了，还是服务器告诉客户端的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598672611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301837,"discussion_content":"固定不变，客户端和服务端都是写死的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598675957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301824,"ip_address":""},"score":301837,"extra":""},{"author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301849,"discussion_content":"这么说一个Redis集群，最多只能有16384个实例，达到这个上限后就不能水平扩容了。16384这个数字是怎么定出来的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598683969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301837,"ip_address":""},"score":301849,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301853,"discussion_content":"因为集群中每个节点需要交换各自的路由信息，也就是槽位信息，Redis也需要考虑交换的成本，占用的网络资源。\n\n过多的槽位在交换信息时也会变得很重，所以Redis作者在设计时做了权衡，尽量使用少的内存完成信息交换，在设计内存存储时定的16384，作者预估一个集群不会超过1000个实例。github上作者有解释，你可以查一下。","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1598685811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301849,"ip_address":""},"score":301853,"extra":""}]},{"author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301217,"discussion_content":"新增节点是不会重新分配hash槽的吗？例如老师上面讲的16384个hash槽除实例个数，就是每个实例上分配的hash槽，但是增加了怎么重新分配hash槽呢。这样不会涉及到之前数据映射得hash槽的位置吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598442892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2120879,"avatar":"https://static001.geekbang.org/account/avatar/00/20/5c/af/2215f3b6.jpg","nickname":"徐小熊","note":"","ucode":"673D3C055AE5B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301248,"discussion_content":"新增实例会重新映射哈希槽到新的实例上，这也意味着要迁移数据到新实例上。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598451389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301217,"ip_address":""},"score":301248,"extra":""},{"author":{"id":2370506,"avatar":"","nickname":"Geek_774ef4","note":"","ucode":"9838717F36D085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":335093,"discussion_content":"重新映射槽位这个过程应该是手动操作，需要运维操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608090271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301248,"ip_address":""},"score":335093,"extra":""}]},{"author":{"id":1315517,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/bd/19d31e64.jpg","nickname":"Leslie_Lamport","note":"","ucode":"62997381D754A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301200,"discussion_content":"这个hash的方案 跟consistent hashing很像（cassandra也在用）不过感觉老师没有把这个讲出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598437202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1315517,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/bd/19d31e64.jpg","nickname":"Leslie_Lamport","note":"","ucode":"62997381D754A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301249,"discussion_content":"这个并不是一致性哈希。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598451405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301200,"ip_address":""},"score":301249,"extra":""},{"author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315517,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/bd/19d31e64.jpg","nickname":"Leslie_Lamport","note":"","ucode":"62997381D754A9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304371,"discussion_content":"https://www.cnblogs.com/abc-begin/p/8203613.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599555775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301200,"ip_address":""},"score":304371,"extra":""}]},{"author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300911,"discussion_content":"还有如果单个proxy的话，IO会不会成为瓶颈？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598318258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300914,"discussion_content":"一般proxy只是做路由转发，使用IO多路复用机制性能非常高，当然也可以部署多个proxy分担压力。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598319051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300911,"ip_address":""},"score":300914,"extra":""}]},{"author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300908,"discussion_content":"proxy层会存在单点问题吧？这样一来整体架构就会更复杂了对团队要求也更高了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598318166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300910,"discussion_content":"可以部署多个proxy提高可靠性的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598318248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300908,"ip_address":""},"score":300910,"extra":""},{"author":{"id":1797883,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6e/fb/d7c9814d.jpg","nickname":"peng_gy","note":"","ucode":"4F34793B7FF04F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":340534,"discussion_content":"像成熟的sdk都会提供这层的转换，在具体业务的初始化建立连接即可，也可以认为是无感知的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610030836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300910,"ip_address":""},"score":340534,"extra":""}]},{"author":{"id":1525225,"avatar":"https://static001.geekbang.org/account/avatar/00/17/45/e9/9bc2f2da.jpg","nickname":"王钟原","note":"","ucode":"828AFD04AEB8B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300768,"discussion_content":"课代表来了,大神对redis都理解这么透彻了,为啥还要学...咱们都是小白来学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598260011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1525225,"avatar":"https://static001.geekbang.org/account/avatar/00/17/45/e9/9bc2f2da.jpg","nickname":"王钟原","note":"","ucode":"828AFD04AEB8B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300780,"discussion_content":"不是大神啊...也有很多知识盲区需要研究。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598262879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300768,"ip_address":""},"score":300780,"extra":""},{"author":{"id":1062070,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","nickname":"我的黄金时代","note":"","ucode":"D7825B45B372F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301215,"discussion_content":"你这知识盲区明显不在Redis这里啊 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598441631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300780,"ip_address":""},"score":301215,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1062070,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","nickname":"我的黄金时代","note":"","ucode":"D7825B45B372F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301246,"discussion_content":"下周就开始难了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598451273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301215,"ip_address":""},"score":301246,"extra":""}]}]},{"had_liked":false,"id":246662,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1599448290,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"370966635746","product_id":100056701,"comment_content":"1，作者讲了什么？<br>    切片集群<br><br>2，作者是怎么把事给讲明白的？<br>        从一个案例入手，讲到单实例内存过大在数据备份时会导致Redis性能下降，<br>        引出redis分片集群来解决大数据量，高性能的设计<br>        提出两个关键问题：数据分片与实例间如何建立对应关系，2，客户端如何知晓去哪个实例中获取数据<br><br>3，为了讲明白，作者讲了哪些要点？有哪些亮点？<br>       1，亮点1：这一课我更加清晰的明白了之前别人聊Redis扩容中的纵向扩容和横向扩容的真实含义和区别<br>       2，要点1：数据分片和实例的对应关系建立：按照CRC16算法计算一个key的16bit的值，在将这值对16384取模<br>       3，要点2：一个切片集群的槽位是固定的16384个，可手动分配每个实例的槽位，但必须将槽位全部分完<br>       4，要点3：客户端如何确定要访问那个实例获取数据：1从任意个实例获取并缓存在自己本地，2，重定向机制<br>        5，要点4：重定向机制：客户端访问的实例没有数据，被访问实例响应move命令，告诉客户端指向新的实例地址<br>         6，要点5：ASK命令：1，表明数据正在迁移 2，告知客户端数据所在的实例<br>          7，要点6：ASK命令和MOVE命令的区别：<br>                    move命令是在数据迁移完毕后被响应，客户端会更新本地缓存。<br>                    ASK命令是在数据迁移中被响应，不会让客户端更新缓存<br><br>4，对作者所讲，我有哪些发散性思考？<br>      对于CRC16算法，应该可以用到我们系统当中，对所有手机的设备号进行计算取模，用于分表存储数据<br>    在系统设计时，可以通过分层或增加一层来提升系统设计的弹性<br><br>5，在将来的那些场景中，我能够使用它？<br>    <br>6，留言区的收获（来自 @Kaito 大神）<br>      1，Redis Cluster不采用直接把key映射到实例，而采用哈希槽的方式原因：可用使Redis集群设计：简洁，高效，有弹性<br>              不使用的劣势<br>                ①：集群中的key无法预估，直接存key对应实例的映射关系，需占用的内存空间不可控<br>                ②：Cluster是去中心化设计，所有实例都需保存完整的映射关系，<br>                            采用直接的映射，会导致节点间信息交换成本高昂<br>                ③：key与实例直接映射，在集群扩缩容时，需要数据迁移，所有的key都需要重新映射<br>              使用的好处<br>                ①：在中间增加一层哈希槽，可以将数据与节点解耦，使数据分配均匀<br>                        key通过hsah计算在取模，可以把数据打的更散，<br>                        只需要关心映射到了哪个哈希槽，通过哈希槽映射表找到对应的实例<br>                ②：增加哈希槽可以使得映射表比较小，有利于客户端和服务端保存，节点间信息交换<br>                ③：集群扩缩容，数据均衡时，操作单位是哈希槽，可以简化操作难度<br>    <br>    2，Redis集群方案的两个关键问题：<br>        ①：请求路由<br>        ②：数据迁移","like_count":87,"discussions":[{"author":{"id":2561782,"avatar":"https://static001.geekbang.org/account/avatar/00/27/16/f6/97a2d38f.jpg","nickname":"平常心","note":"","ucode":"22DBB6661AAD1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367648,"discussion_content":"两大学习委员之一","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618412597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1524285,"avatar":"https://static001.geekbang.org/account/avatar/00/17/42/3d/c58c776e.jpg","nickname":"Devin","note":"","ucode":"B0E62321365240","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304587,"discussion_content":"每篇必看非凡哥的总结","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599620629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1113597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","nickname":"注定非凡","note":"","ucode":"80673056E131B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1524285,"avatar":"https://static001.geekbang.org/account/avatar/00/17/42/3d/c58c776e.jpg","nickname":"Devin","note":"","ucode":"B0E62321365240","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304621,"discussion_content":"谢谢你的夸赞，很开心，一起努力学习进步","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599630067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304587,"ip_address":""},"score":304621,"extra":""}]},{"author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389301,"discussion_content":"程序员最需要看的一本书，估计就是金字塔原理了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629209395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2144915,"avatar":"https://static001.geekbang.org/account/avatar/00/20/ba/93/7d58263a.jpg","nickname":"梦之光","note":"","ucode":"2E808240409BDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578216,"discussion_content":"为啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656581714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389301,"ip_address":""},"score":578216,"extra":""}]},{"author":{"id":1253310,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/be/551454e0.jpg","nickname":"zxy","note":"","ucode":"FFAA3F6667305D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364925,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617666303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304372,"discussion_content":"非凡哥来的有点晚啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599555912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1113597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","nickname":"注定非凡","note":"","ucode":"80673056E131B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304619,"discussion_content":"最近加班加到吐","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599629928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304372,"ip_address":""},"score":304619,"extra":""}]}]},{"had_liked":false,"id":243791,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598277320,"is_pvip":false,"replies":[{"id":"89802","content":"如果是根据某个字段的取值范围进行range-based分片，有可能的一个问题是：某个range内的记录数量很多，这就会导致相应的数据分片比较大，一般也叫做数据倾斜。对这个数据分片的访问量也可能大，导致负载不均衡。<br><br>基于记录key进行哈希后再取模，好处是能把数据打得比较散，不太容易引起数据倾斜，还是为了访问时请求负载能在不同数据分片分布地均衡些，提高访问性能。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598282913,"ip_address":"","comment_id":243791,"utype":1}],"discussion_count":9,"race_medal":0,"score":"220641609416","product_id":100056701,"comment_content":"隔壁分布式数据库也讲到了分片，但是它里面提到现代的分布式数据库实现分片基本都是Range-based的，能够实现分片的动态调度，适合互联网的场景。那为什么Redis依旧要用Hash-based的设计方式呢？是为了更高并发的写入性能吗？","like_count":51,"discussions":[{"author":{"id":1012839,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/67/46bb05de.jpg","nickname":"怀刚","note":"","ucode":"F778DDE910918E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340745,"discussion_content":"个人认为redis几乎是按照key的点查更适合哈希，分布式数据库要综合考虑点查和范围扫描，range分区存在写入热点弊端，但能够更好的支持动态调度来平衡访问负载","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1610115644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1012839,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/67/46bb05de.jpg","nickname":"怀刚","note":"","ucode":"F778DDE910918E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539983,"discussion_content":"range + hash 的方法可以既解决数据不断新增，和在范围内的热点数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639909726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340745,"ip_address":""},"score":539983,"extra":""}]},{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504397,"discussion_content":"如果是根据某个字段的取值范围进行range-based分片，有可能的一个问题是：某个range内的记录数量很多，这就会导致相应的数据分片比较大，一般也叫做数据倾斜。对这个数据分片的访问量也可能大，导致负载不均衡。\n\n基于记录key进行哈希后再取模，好处是能把数据打得比较散，不太容易引起数据倾斜，还是为了访问时请求负载能在不同数据分片分布地均衡些，提高访问性能。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598282913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1381384,"avatar":"https://static001.geekbang.org/account/avatar/00/15/14/08/ac323169.jpg","nickname":"Forsaken","note":"","ucode":"F69EB2FBE48A37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366347,"discussion_content":"个人观点：range-based分片适合条件查询场景，比如电商中，把订单数据分片，查询某个商家，某个地区的出货量，通过range-based分片（把身份证号比作订单编号 ，身份证的一位都是有含义的），海量数据查询性能上更好。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618040665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1395913,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4c/c9/ae464069.jpg","nickname":"小白","note":"","ucode":"31371AF6336B9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310359,"discussion_content":"我觉得采用slot其实就是一致性hash的虚拟节点，除了可以解决数据倾斜问题之外，还可以让集群减少节点的时候，可以让所有剩余节点均摊压力！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601797643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1905171,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","nickname":"扩散性百万咸面包","note":"","ucode":"6D703D51553B42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1395913,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4c/c9/ae464069.jpg","nickname":"小白","note":"","ucode":"31371AF6336B9F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310436,"discussion_content":"这是一致性哈希的优化方式。但是不能解释为什么不用range based","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601827123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310359,"ip_address":""},"score":310436,"extra":""}]},{"author":{"id":1197455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","nickname":"innocent","note":"","ucode":"368659A0DDE7E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347479,"discussion_content":"因为Redis key不需要Scan","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612240022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246664,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg","nickname":"山顶的洞","note":"","ucode":"D3E9E928A3FA62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301429,"discussion_content":"哪个隔壁？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598523043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1012839,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/67/46bb05de.jpg","nickname":"怀刚","note":"","ucode":"F778DDE910918E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1246664,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg","nickname":"山顶的洞","note":"","ucode":"D3E9E928A3FA62","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340746,"discussion_content":"王磊老师的《分布式数据库30讲》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610116298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301429,"ip_address":""},"score":340746,"extra":""}]}]},{"had_liked":false,"id":243730,"user_name":"流浪地球","can_delete":false,"product_type":"c1","uid":1498137,"ip_address":"","ucode":"25210DCD353F97","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/19/c058bcbf.jpg","comment_is_top":false,"comment_ctime":1598259736,"is_pvip":false,"replies":[{"id":"89805","content":"切片集群中每个切片可以配置从库，也可以不配置。不过一般生产环境中还是建议对每个切片做主从配置。<br><br>可以使用cluster replicate命令进行配置。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598284187,"ip_address":"","comment_id":243730,"utype":1}],"discussion_count":6,"race_medal":0,"score":"104677474840","product_id":100056701,"comment_content":"请问老师，集群中的每个切片都是主从配置的吗？","like_count":24,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504375,"discussion_content":"切片集群中每个切片可以配置从库，也可以不配置。不过一般生产环境中还是建议对每个切片做主从配置。\n\n可以使用cluster replicate命令进行配置。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598284187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2295880,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SYxHx9k1fVAZGanCk5cFVdzFyhx2pkNk45RdH1Yo3ITBH7dCWjwzEzibAnZaXayqF1TibW6ynBkCqIOd6p1Yhlew/132","nickname":"建锋","note":"","ucode":"50E4AF68BE4488","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576883,"discussion_content":"主要是为了每个分片的高可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655824275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365359,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d5/6f/2d47868a.jpg","nickname":"旋风","note":"","ucode":"E1EE2EC4159326","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382057,"discussion_content":"如果切片也配置主从， 如何将读请求路由到从节点呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625391807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2721944,"avatar":"","nickname":"zhu_zhu","note":"","ucode":"ABBCC7F05AFA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1365359,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d5/6f/2d47868a.jpg","nickname":"旋风","note":"","ucode":"E1EE2EC4159326","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390642,"discussion_content":"不用啊，从节点平时也不用，当主出问题的时候才当主节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629948882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":382057,"ip_address":""},"score":390642,"extra":""},{"author":{"id":2924014,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/9d/ee/a58e330a.jpg","nickname":"刘越阳","note":"","ucode":"FC3EE6E01D8C92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2721944,"avatar":"","nickname":"zhu_zhu","note":"","ucode":"ABBCC7F05AFA5B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553298,"discussion_content":"你的说法不对呀，主从也是为了分摊读写压力，读请求当然可以去从读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645836816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390642,"ip_address":""},"score":553298,"extra":""},{"author":{"id":2982554,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/82/9a/930e343e.jpg","nickname":"nowinkey","note":"","ucode":"80388CD3C919B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2924014,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/9d/ee/a58e330a.jpg","nickname":"刘越阳","note":"","ucode":"FC3EE6E01D8C92","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567535,"discussion_content":"我觉得分担读压力也可以，不过切片的主从应该也是为了主宕机，从能直接继承哈希槽，而不需要数据迁移操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650937748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553298,"ip_address":""},"score":567535,"extra":""}]}]},{"had_liked":false,"id":243625,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1598233860,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"66022743300","product_id":100056701,"comment_content":"我认为有以下几点：<br>1、存在表的话，存在单点问题，即使部署多份，存在数据一致性问题，提高了复杂度；<br>2、即使解决了第一个问题，但是Redis主打的是快，表的读写并发问题处理；<br>3、key对应的是实例，对应关系粒度太大；<br><br>4、用key做hash避免依赖别的功能或者服务，提供了整体的内聚性；<br>5、在做Redis集群，为了数据分配均匀，进行一致性哈希的时候，虚拟节点和真实节点之间还有对应关系，存在多级映射关系，增加了耗时，影响Redis主线程的执行速度。","like_count":15,"discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314341,"discussion_content":"对于1，分片和备份是两码事；\n对于5，redis这个不叫一致性hash","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603152557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246430,"user_name":"天敌","can_delete":false,"product_type":"c1","uid":1059944,"ip_address":"","ucode":"CD29A622197197","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","comment_is_top":false,"comment_ctime":1599323219,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57433898067","product_id":100056701,"comment_content":"在手动分配哈希槽时，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作。 老师，您手动分配的例子也只分配了5个哈希槽，这只是为了教学方便吗？<br>我用的时候是不是应该 从0写到16383, 就像下面这样？<br>redis-cli -h 172.16.19.3 –p 6379 cluster addslots 0,1<br>redis-cli -h 172.16.19.4 –p 6379 cluster addslots 2,3<br>redis-cli -h 172.16.19.5 –p 6379 cluster addslots 4,5,6,7,8,...,16383","like_count":13,"discussions":[{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534402,"discussion_content":"是的, 上面只是举例","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638180398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926222,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/64/4e/83c61c7f.jpg","nickname":"靓仔","note":"","ucode":"077A290A2DCF42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579037,"discussion_content":"redis-cli -h 172.16.19.3 –p 6379 cluster addslots 0-1000\nredis-cli -h 172.16.19.3 –p 6379 cluster addslots 1001-2000\n好像是可以这样的 范围的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657156678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243929,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1598329690,"is_pvip":false,"replies":[{"id":"89866","content":"回答的挺好，对hash算法可用于打散键值对分布的理解到位！","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598403533,"ip_address":"","comment_id":243929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57432904538","product_id":100056701,"comment_content":"解答：<br>1. 引入哈希槽，将key的分布与具体的Redis实例解耦，有利于Redis数据的均衡分布。<br>2. 不采用哈希槽的话，Redis实例的扩容和缩容，需要针对无规则的key进行处理，实现数据迁移。此外，需要引入负载均衡中间件来协调各个Redis实例的均衡响应，确保数据的均匀分布；中间件需要保存key的分布状态，保证key的查询能够得到响应。<br>增加了Redis系统的复杂性 与 可维护性。<br><br>看到问题后的第一反应，理解不够深刻，讲述不够清楚。贵在思考啦😜","like_count":13,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504435,"discussion_content":"回答的挺好，对hash算法可用于打散键值对分布的理解到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598403533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245867,"user_name":"Geek1560","can_delete":false,"product_type":"c1","uid":2028949,"ip_address":"","ucode":"5F27A28B8002E6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","comment_is_top":false,"comment_ctime":1599098640,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"40253804304","product_id":100056701,"comment_content":"当Redis Cluster 分片上规模后，比如上百、几百后，gossip的通信开销就是集群的瓶颈，老师这块有很好的方案吗？","like_count":10,"discussions":[{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384091,"discussion_content":"官方推荐不超过 1000 个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626359228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109527,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/17/32183260.jpg","nickname":"逍遥魔君","note":"","ucode":"6EDD906634D7CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367782,"discussion_content":"业务拆分控制集群规模","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618468773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331699,"discussion_content":"所以 一般 采用 redis 原生集群的一般不超过1 200个。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606956494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274792,"user_name":"CityAnimal","can_delete":false,"product_type":"c1","uid":1139902,"ip_address":"","ucode":"206491F70572AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/be/12c37d15.jpg","comment_is_top":false,"comment_ctime":1611157396,"is_pvip":true,"replies":[{"id":"100462","content":"这个笔记整理得不错，层次分明！","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1612144017,"ip_address":"","comment_id":274792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31675928468","product_id":100056701,"comment_content":"笔记打卡<br>    * [ ] 多个 Redis 实例组成一个集群<br>    * [ ] 扩展<br>        * [ ] 纵向扩展（scale up）<br>            * [ ] 优势<br>                * [ ] 简单<br>                * [ ] 直接<br>            * [ ] 问题<br>                * [ ] 当使用RDB时，内存越大，主线程fork就越有可能阻塞<br>                * [ ] 受到硬件和成本的限制<br>        * [ ] 横向扩展（scale out）<br>    * [ ] 数据切片和实例的对应分布关系<br>        * [ ] Redis Cluster 方案：无中心化<br>            * [ ] 采用哈希槽（Hash Slot）来处理数据和实例之间的映射关系<br>            * [ ] 一个切片集群共有 16384 个哈希槽<br>            * [ ] 具体的映射过程<br>                * [ ] 1. 根据键值对的 key，按照CRC16 算法计算一个 16 bit 的值；<br>                * [ ] 2. 再用这个 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽<br>            * [ ] 哈希槽映射到具体的 Redis 实例上<br>                * [ ] 1. 用 cluster create 命令创建集群<br>                    * [ ] Redis 会自动把这些槽平均分布在集群实例上<br>                * [ ] 2. 使用 cluster meet 命令手动建立实例间的连接，形成集群，再使用 cluster addslots 命令，指定每个实例上的哈希槽个数<br>                    * [ ] 小提醒，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作<br>        * [ ] ShardedJedis：基于客户端分区<br>        * [ ] Codis、Twemproxy ：基于代理<br>    * [ ] 客户端如何定位数据<br>        * [ ] Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散<br>        * [ ] 客户端和集群实例建立连接后，实例就会把哈希槽的分配信息发给客户端<br>        * [ ] 客户端会把哈希槽信息缓存在本地。当请求键值对时，会先计算键所对应的哈希槽<br>        * [ ] 但集群中，实例和哈希槽的对应关系并不是一成不变的<br>            * [ ] 实例新增或删除<br>            * [ ] 负载均衡<br>        * [ ] 实例之间可以通过相互传递消息，获得最新的哈希槽分配信息，但客户端是无法主动感知这些变化<br>        * [ ] **重定向机制**<br>            * [ ] 1. 如果实例上没有该键值对映射的哈希槽，就会返回 MOVED 命令<br>                * [ ] 客户端会更新本地缓存<br>            * [ ] 2. 在**迁移部分完成**情况下，返回ASK<br>                * [ ] 表明 Slot 数据还在迁移中<br>                * [ ] ASK 命令把客户端所请求数据的最新实例地址返回给客户端<br>                * [ ] 并不会更新客户端缓存的哈希槽分配信息","like_count":7,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514126,"discussion_content":"这个笔记整理得不错，层次分明！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612144017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243601,"user_name":"小宇子2B","can_delete":false,"product_type":"c1","uid":1254615,"ip_address":"","ucode":"E360188C65EAEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","comment_is_top":false,"comment_ctime":1598227053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31662998125","product_id":100056701,"comment_content":"1.让key在多个实例上分布更均匀<br>2.需要rehash的时候，还要去修改这个对应关系表，代价有点大<br>3.存在表里，key的数量太大，表的维护是个问题","like_count":7},{"had_liked":false,"id":243621,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1598233227,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"23073069707","product_id":100056701,"comment_content":"请问老师，在重定向的机制中，像例子里的情况key1 key2已经迁移到新的实例3，key3 key4还在实例2的时候，如果客户端请求的是key3的话，它是会得到实例2直接返回key3的value还是得到ASK？如果是ASK那么客户端去ASKING 实例3的时候会不会阻塞到key3迁移完成？谢谢","like_count":5,"discussions":[{"author":{"id":1357937,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","nickname":"next station","note":"","ucode":"ABF39067778FD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313875,"discussion_content":"1. 源节点会先在自己的数据库里面查找指定的键，如果找到的话，就直接执行客户端发送的命令\n2. 如果源节点没能在自己的数据库里面找到指定的键，那么这个键有可能已经被迁移到了目标节点，源节点将向客户端返回一个ASK错误","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1603101360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226196,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b5/d4/3bd5b77b.jpg","nickname":"佑儿","note":"","ucode":"0629888E7A5E16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312709,"discussion_content":"同问同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602775613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738493,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qn1PDx7xA7jKFZr4vHibmsvoZ7bwUCzHTg3uywiaESCgFTTMibPpKdZOfrqTXtdQXxUJqFqmLAj5NoIFMJpYibbcOQ/132","nickname":"happy learn","note":"","ucode":"BCE08C8E64A23E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306025,"discussion_content":"同问啊！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600150488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276010,"user_name":"马听","can_delete":false,"product_type":"c1","uid":1430132,"ip_address":"","ucode":"93D83CB5FAE5AD","user_header":"https://static001.geekbang.org/account/avatar/00/15/d2/74/7861f504.jpg","comment_is_top":false,"comment_ctime":1611744026,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18791613210","product_id":100056701,"comment_content":"总结<br>1 key 和槽具体的映射过程分为两大步：<br>首先根据键值对的 key，按照CRC16 算法计算一个 16 bit 的值；再用这个 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽。<br><br>2 定位到键值对的槽，也是通过CRC16 算法计算一个值，再对16384 取模计算出来的。<br><br>3 而哈希槽具体在哪个实例上，是缓存在客户端本地<br><br>4 但是实例和哈希槽的对应关系可能会因为以下原因发送变化：<br>a、增删实例<br>b、负载均衡<br><br>5 当实例和哈希槽对应关系发送变化是，就会使用重定向机制<br><br>6 重定向机制：客户端把操作请求发给某个实例，如果这个实例上并没有这个键值对映射的哈希槽，则会给客户端返回 MOVED 命令，这个命令包含了新实例的访问地址，客户端会再次发起请求，同时还会更新本地缓存。<br><br>7 如果 slot 正在迁移，则客户端会收到一条 ASK 报错信息，告诉客户端正在迁移（ASK 命令并不会更新客户端缓存的哈希槽分配信息），此时，客户端需要先给 slot 所在的实例发送一个 ASKING 命令，表示让这个实例运行执行客户端接下来发送的命令，然后客户端再向这个实例发送对应的操作命令","like_count":4},{"had_liked":false,"id":301918,"user_name":"Inno","can_delete":false,"product_type":"c1","uid":2142543,"ip_address":"","ucode":"8CB14D9A54CC9B","user_header":"https://static001.geekbang.org/account/avatar/00/20/b1/4f/f0b9b11d.jpg","comment_is_top":false,"comment_ctime":1625974987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14510876875","product_id":100056701,"comment_content":"如果切片集群中的一个实例从集群移除，客户端访问时，得不到MOVED信息，重定向无法进行，怎么进行数据访问呢？","like_count":3},{"had_liked":false,"id":243612,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1598230951,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14483132839","product_id":100056701,"comment_content":"槽相当于虚拟节点，这样可以灵活的扩缩容，因为是按槽数分的key，这是主要的优点，而且只需要存槽与机器实例的对应关系，不用每个实例都存一份所有的键对应的实例，节省内存","like_count":3},{"had_liked":false,"id":261922,"user_name":"Geek_be0aff","can_delete":false,"product_type":"c1","uid":1902223,"ip_address":"","ucode":"C14ABF4146A2CF","user_header":"","comment_is_top":false,"comment_ctime":1605579813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10195514405","product_id":100056701,"comment_content":"redis cluster的副本机制是怎样的，如何保障可靠性的，仍然需要依赖redis sentinel吗？","like_count":2},{"had_liked":false,"id":243824,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1598283278,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10188217870","product_id":100056701,"comment_content":"思考题：<br>1、使用CRC这个hash函数原因<br>1）hash从查询slot的时间复杂度上讲，CRC为O(1)；存表（理解为有序数组或跳表），再快也就是O(Log n)<br>2）hash从存储映射关系的空间复杂度上讲，CRC为O(1)；存表，至少也得O(n)，若是跳表还得存额外的索引<br><br>另外我有两个问题咨询下老师，望答复，谢谢！<br>1、Redis切片集群使用CRC这个hash函数先获取到具体的slot，然后在具体的slot中，是不是再通过另一个hash函数访问Key对应的值？类似于Java结构：HashMap&lt;String, HashMap&lt;String,Object&gt;&gt;<br>2、Redis的slot数量为什么是16384=2^14个，如果用2B来存长度也是2^16=65536个啊？<br><br>","like_count":2,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377381,"discussion_content":"第二问，因为2.14是情人节，作者想浪漫一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622622692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926642,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/f2/24e48aae.jpg","nickname":"飞白","note":"","ucode":"2586407256F3B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353160,"discussion_content":"redis集群实例交换slot信息，会占用网络带宽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615039007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2068684,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","nickname":"taku","note":"","ucode":"B22DA9A4A9DC91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341651,"discussion_content":"第二问redis作者有回答过，他觉得2@14够用，仅此而已，你可以查一下原文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610496156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243667,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1598244082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188178674","product_id":100056701,"comment_content":"如果按照键值存储的话，数据量很大，导致该映射占用空间会很大，进而影响查询速度，采用映射卡擦的方式有些与多级目录有异曲同工之妙","like_count":2},{"had_liked":false,"id":352198,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1658452761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5953420057","product_id":100056701,"comment_content":"我感觉之所以不采用直接映射的原因，是因为内存限制。老师我有一个问题，为什么在槽再分配的时候，不会将客户端的槽分布缓存一次更新或者直接向客户端push，如果槽改动比较大，岂不是每次都需要进行重定向。当然也要考虑到槽再分配的频繁程度会影响更新效率，毕竟更新一条要比全部更新效率高。","like_count":1},{"had_liked":false,"id":344468,"user_name":"寥若晨星","can_delete":false,"product_type":"c1","uid":1447739,"ip_address":"","ucode":"2E87E43687DE72","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","comment_is_top":false,"comment_ctime":1651571990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5946539286","product_id":100056701,"comment_content":"为啥要先给新实例发送一次ASKING命令呢，感觉这一步有点多余","like_count":1},{"had_liked":false,"id":305579,"user_name":"意琦行","can_delete":false,"product_type":"c1","uid":1637619,"ip_address":"","ucode":"B940AA60B5CCEE","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/f3/28fe16cf.jpg","comment_is_top":false,"comment_ctime":1628057642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923024938","product_id":100056701,"comment_content":"感觉 slot 和一致性哈希里虚拟节点有点像，可以防止节点太少导致hash结果分布不均的问题。然后重定向和HTTP的重定向基本一致，MOVED=301 永久重定向 ASK=302 临时重定向。","like_count":1},{"had_liked":false,"id":302403,"user_name":"redo","can_delete":false,"product_type":"c1","uid":1722762,"ip_address":"","ucode":"88661F4DE68373","user_header":"https://static001.geekbang.org/account/avatar/00/1a/49/8a/315c9ca3.jpg","comment_is_top":false,"comment_ctime":1626192268,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5921159564","product_id":100056701,"comment_content":"有一个问题想请假下各位大佬，当集群中发生Slot重新分配时，为什么没有办法告知客户端呢，我记得在哨兵模式中，哨兵可以通知客户端主节点已经切换，意味着服务端是能够通知到客户端的，在重新分配后马上通知给客户端，不是可以减少重定向产生的损耗了吗","like_count":1,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389240,"discussion_content":"通知应该可以通知，但是重新分配是要有个过程的，事前事中事后都不太合适，不如这种重定向来的实际","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629188365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301664,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":2665674,"ip_address":"","ucode":"D0DA57BC2783AC","user_header":"https://static001.geekbang.org/account/avatar/00/28/ac/ca/70eceba3.jpg","comment_is_top":false,"comment_ctime":1625803939,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5920771235","product_id":100056701,"comment_content":"Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，这个怎么发给其他的实例呢？通过pub&#47;sub吗","like_count":1,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553732,"discussion_content":"发送PING命令，基于gossip协议达到最终一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646043290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297983,"user_name":"Geek_a4a442","can_delete":false,"product_type":"c1","uid":2647928,"ip_address":"","ucode":"05E9CF00EE2666","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/wHrIiaTTLw3HuciaHIQJNZZk3Tlj8eljoSHd3Ctt7Zka7SeuGA8WkQ91to4Bmm8t6RKl5hoUWIS7icwOoQWmI8tBg/132","comment_is_top":false,"comment_ctime":1623859034,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5918826330","product_id":100056701,"comment_content":"fork的时候复制的是进程页表，而25GB内存所需要的进程页表并不大，为什么需要接近秒级的时间呢？","like_count":1,"discussions":[{"author":{"id":1186048,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/00/82d6bb18.jpg","nickname":"娄","note":"","ucode":"8B7909A1E78604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552005,"discussion_content":"同问这个，这里的讲解是有问题的，fork并不会产生打的阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645232040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":1186048,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/00/82d6bb18.jpg","nickname":"娄","note":"","ucode":"8B7909A1E78604","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553733,"discussion_content":"线上生产环境实测，15G内存fork耗时800ms，这期间是阻塞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646043398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552005,"ip_address":""},"score":553733,"extra":""}]}]},{"had_liked":false,"id":287921,"user_name":"acupple","can_delete":false,"product_type":"c1","uid":1086927,"ip_address":"","ucode":"D3E908E2EB59B1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJByKiaE1TUInTDdemFvJib3s1iahmYWGddf4R9bFRlPRI5hPP70DhqhNN2gJEKj2njIX7g0ULHg8Ojw/132","comment_is_top":false,"comment_ctime":1618216212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913183508","product_id":100056701,"comment_content":"为了解决读写新能，和数据高可用，前文提到了主从模式和哨兵模式，以及哨兵集群，而解决数据量和扩容问题，采用数据分片，那每个分片实例，是不是也要配置主从和哨兵集群，来保证高可用呢","like_count":1},{"had_liked":false,"id":277257,"user_name":"Pisces","can_delete":false,"product_type":"c1","uid":1504705,"ip_address":"","ucode":"B1E98AC36BDD0C","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/c1/b92153c6.jpg","comment_is_top":false,"comment_ctime":1612336778,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5907304074","product_id":100056701,"comment_content":"槽的个数为什么是16384？","like_count":1,"discussions":[{"author":{"id":1004727,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/b7/abb7bfe3.jpg","nickname":"Elon","note":"","ucode":"DB5BE4DA9A1690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372618,"discussion_content":"可以参考这个：https://zhuanlan.zhihu.com/p/80335611","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620393787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276209,"user_name":"python","can_delete":false,"product_type":"c1","uid":1870014,"ip_address":"","ucode":"2226125EBC99A5","user_header":"https://static001.geekbang.org/account/avatar/00/1c/88/be/cc6a7c11.jpg","comment_is_top":false,"comment_ctime":1611832958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906800254","product_id":100056701,"comment_content":"老师，请问redis里面切片集群如果做了主从，它的主从是基于主从复制的，那么它的故障恢复是如何做的？也加了哨兵吗？","like_count":1},{"had_liked":false,"id":270005,"user_name":"小太阳","can_delete":false,"product_type":"c1","uid":1635531,"ip_address":"","ucode":"82FD62E147CD7B","user_header":"https://static001.geekbang.org/account/avatar/00/18/f4/cb/0028f467.jpg","comment_is_top":false,"comment_ctime":1608872605,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5903839901","product_id":100056701,"comment_content":"redis为什么没有使用一致性hash来实现数据的数据的分布式部署，而是用hash槽？官网说节点变动容易，真的容易吗？<br>Redis Cluster does not use consistent hashing, but a different form of sharding where every key is conceptually part of what we call a hash slot.<br><br>There are 16384 hash slots in Redis Cluster, and to compute what is the hash slot of a given key, we simply take the CRC16 of the key modulo 16384.<br><br>Every node in a Redis Cluster is responsible for a subset of the hash slots, so for example you may have a cluster with 3 nodes, where:<br><br>Node A contains hash slots from 0 to 5500.<br>Node B contains hash slots from 5501 to 11000.<br>Node C contains hash slots from 11001 to 16383.<br>This allows to add and remove nodes in the cluster easily. For example if I want to add a new node D, I need to move some hash slot from nodes A, B, C to D. Similarly if I want to remove node A from the cluster I can just move the hash slots served by A to B and C. When the node A will be empty I can remove it from the cluster completely.","like_count":1,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389248,"discussion_content":"key值crc16以后得到的最大值也就65536，用一致性hash是不是有点超纲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629192093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257961,"user_name":"石小天","can_delete":false,"product_type":"c1","uid":1484861,"ip_address":"","ucode":"BB965629AD7BB3","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzvM4MKTUJULLl6LESKLun90dPx33OZiaNJ3U5QvAicjDLib6akk52dMHgLwmRTBJ1VicSeKobSeopJA/132","comment_is_top":false,"comment_ctime":1604225229,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5899192525","product_id":100056701,"comment_content":"老师，<br>1 集群存在高可用的问题吗，还需要哨兵吗？<br>2 重定向机制，由redis节点自动完成不更好吗？<br>","like_count":1,"discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356996,"discussion_content":"由节点来完成的话，每个节点都要去处理不在这个节点上的请求，性能上有极大的开销","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615722696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1904021,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/95/a04bf5c4.jpg","nickname":"花里湖，湖里韶","note":"","ucode":"795CB158E0FE4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349056,"discussion_content":"集群的每个节点上都会给他配一个从节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612863073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248756,"user_name":"凯文1985","can_delete":false,"product_type":"c1","uid":1036921,"ip_address":"","ucode":"9A42344649072B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/79/0a432fde.jpg","comment_is_top":false,"comment_ctime":1600304619,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5895271915","product_id":100056701,"comment_content":"在水平扩容时，数据是怎么在不同redis分片间进行迁移的？","like_count":1},{"had_liked":false,"id":244158,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1598413346,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5893380642","product_id":100056701,"comment_content":"对于Redis而言，切片管理有两种方式<br>1.中心化方式，典型的Codis.Codis是首先对key进行crc32的计算,然后对于1024求模(这个值可配置)得到槽位所在Redis实例信息,然后进行处理~~所有的槽位信息都是保存在zookeeper&#47;etcd的中间件，发生变更的时候会同步到proxy中. 另外对于数据迁移而言，会有migrating的状态做管理, codis本身建议的key的value大小小于1M,这样可以加速数据迁移~~大key会有阻塞情况<br>2.去中心化方式，典型的Redis Cluster.redis cluster由Node组成，Node中会保存槽位的实例信息。如果请求不在当前Node中，会出现Moved响应，告诉客户端应该去请求key所在的节点。slot = crc16(key)%16384.<br>","like_count":1,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301521,"discussion_content":"1、Codis的slot是固定1024个，不可以修改。\n\n2、Codis针对bigkey的迁移做了优化，采用异步迁移的方式进行，很大程度降低了阻塞风险。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598543643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301553,"discussion_content":"这两点我确认下，codis看的比较久了。感觉老哥在db这块经验丰富啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598575182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301521,"ip_address":""},"score":301553,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301561,"discussion_content":"我现在负责公司内的Codis定制开发，所以了解的比较多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598575988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301553,"ip_address":""},"score":301561,"extra":""}]}]},{"had_liked":false,"id":243628,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1598233998,"is_pvip":false,"replies":[{"id":"89807","content":"其实，如果用表来记录映射关系的话，就不用计算哈希值了，所以这个时候倒没有hash冲突了。不过，如果有实例下线，的确会涉及大量数据迁移，和映射关系变化，如果用表记录的话，对表的修改就会比较麻烦。<br><br>感觉你说的hash冲突，是不是和Redis Cluster里的哈希槽使用有些混淆了？ :)","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598286348,"ip_address":"","comment_id":243628,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5893201294","product_id":100056701,"comment_content":"Redis本身是基于内存操作的，如果数据量大，基于查表法来做，会消耗太多的内存空间，成本上不允许。还有再有hash冲突的时候，会有大量数据迁移，维护起来困难多了。","like_count":1,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504340,"discussion_content":"其实，如果用表来记录映射关系的话，就不用计算哈希值了，所以这个时候倒没有hash冲突了。不过，如果有实例下线，的确会涉及大量数据迁移，和映射关系变化，如果用表记录的话，对表的修改就会比较麻烦。\n\n感觉你说的hash冲突，是不是和Redis Cluster里的哈希槽使用有些混淆了？ :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598286348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062444,"avatar":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","nickname":"小喵喵","note":"","ucode":"FDBBB2A59DB8B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301298,"discussion_content":"谢谢老师的解惑！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598486342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243611,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1598230497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893197793","product_id":100056701,"comment_content":"用表保存key和实例对应关系的话表数据量太大了，而且不灵活。","like_count":1},{"had_liked":false,"id":355097,"user_name":"蔡欧","can_delete":false,"product_type":"c1","uid":1317604,"ip_address":"广东","ucode":"39470A1DCAA7A9","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/e4/5e2a8190.jpg","comment_is_top":false,"comment_ctime":1661076289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661076289","product_id":100056701,"comment_content":"Redis Cluster 实现原理：中间使用hash槽，保存key与实例的映射关系进行路由<br>集群实例增删或者集群重新分配hash槽，客户端是如何准确定位的，原理是什么：集群对hash槽的重新分配，服务端会重新生成hash槽，但是客户端无法感应更新，如果客户端请求hash槽实例没有命中，则返回key所在新实例地址并更新本地hash槽，如果集群hash槽正在迁移过程中，则相应ask，需要继续请求则使用asking命令，本地hash槽不会更新<br>为什么不使用key直接映射实例：路由表过大，维护、成本过大<br>","like_count":0},{"had_liked":false,"id":354334,"user_name":"林蓝","can_delete":false,"product_type":"c1","uid":2340552,"ip_address":"北京","ucode":"36E4445613E1C3","user_header":"https://static001.geekbang.org/account/avatar/00/23/b6/c8/35948bf5.jpg","comment_is_top":false,"comment_ctime":1660288978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660288978","product_id":100056701,"comment_content":"学到这里，基本篇就学完了。最大的疑问是，不懂如何部署主从、切片集群以及文中的知识点是具体怎么实现的。","like_count":0},{"had_liked":false,"id":351089,"user_name":"baohao","can_delete":false,"product_type":"c1","uid":1019375,"ip_address":"","ucode":"0CCC4AAF07650A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/ef/f7e29b0f.jpg","comment_is_top":false,"comment_ctime":1657519386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1657519386","product_id":100056701,"comment_content":"想请教一下，如果cluster其中一个节点的主从全都挂了，那这个集群还可用么？是会由于缺少slot导致整体集群都不可用，还是挂掉的节点负责的slot处理的请求部分不可用？会不会触发自动rebalance呢？","like_count":0,"discussions":[{"author":{"id":2012750,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b6/4e/1172776e.jpg","nickname":"chump","note":"","ucode":"62A618CFF3D266","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580014,"discussion_content":"大佬，我也有这个困惑，我感觉就没办法用了，value都没了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657807207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350350,"user_name":"Kepler","can_delete":false,"product_type":"c1","uid":1214303,"ip_address":"","ucode":"0C9CA3DB8B3CF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","comment_is_top":false,"comment_ctime":1656841550,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656841550","product_id":100056701,"comment_content":"获取键值对和哈希槽的映射关系，采用crc16 + mod 16384相比直接存储在redis键值对字典，前者是O(1)的时间复杂度和O(1)的空间复杂度，后者是O(n)的空间复杂度。","like_count":0},{"had_liked":false,"id":348703,"user_name":"。。","can_delete":false,"product_type":"c1","uid":2853618,"ip_address":"","ucode":"A52A6043D27D87","user_header":"https://static001.geekbang.org/account/avatar/00/2b/8a/f2/6c6f7886.jpg","comment_is_top":false,"comment_ctime":1655313341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655313341","product_id":100056701,"comment_content":"1.切片集群对于数据倾斜问题如何解决呢？<br><br>2.集群的扩容、缩容问题必然会带来数据迁移，如何能保证效率，这期间还能对外提供服务吗？假设要对实例A中的数据进行迁移，A下面还有子节点，子节点中的数据如何处理呢？ <br><br>3.切片集群不需要哨兵吗？当主库宕机后，从库会补上（我试过，没有哨兵集群，它会自动把从库升级成主库）没有哨兵是如果做到故障迁移的呢？<br><br>4.为什么采用的是哈希槽呢？感觉一致性hash更好一些呢？","like_count":0},{"had_liked":false,"id":348280,"user_name":"走路顺拐","can_delete":false,"product_type":"c1","uid":1987040,"ip_address":"","ucode":"82D19A53DCB14E","user_header":"","comment_is_top":false,"comment_ctime":1654930017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654930017","product_id":100056701,"comment_content":"切片集群，如果有台机器挂了，此时客户端是怎么跟redis<br>交互的？","like_count":0},{"had_liked":false,"id":347719,"user_name":"樱桃汁。","can_delete":false,"product_type":"c1","uid":2907715,"ip_address":"","ucode":"36EE9D8B9C5122","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5e/43/004a52fa.jpg","comment_is_top":false,"comment_ctime":1654345965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654345965","product_id":100056701,"comment_content":"哈希槽起一个目录作用，同时给键值对做了一个分配规则来映射，可以按槽分装数据。直接记录实例和键值对无法控制实例里面应该放哪些放多少键值对","like_count":0},{"had_liked":false,"id":343734,"user_name":"张R","can_delete":false,"product_type":"c1","uid":2268019,"ip_address":"","ucode":"7ECD7101EB4818","user_header":"https://static001.geekbang.org/account/avatar/00/22/9b/73/67844995.jpg","comment_is_top":false,"comment_ctime":1651029114,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651029114","product_id":100056701,"comment_content":"数据分片，迁移槽位时发生故障，如何处理？<br>","like_count":0},{"had_liked":false,"id":343512,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1650884945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650884945","product_id":100056701,"comment_content":"有个问题： 如果 在 cluster  中 “实例1”宕机了，那之前分配到“实例1”上面的 槽位变化如何通知给客户端？","like_count":0},{"had_liked":false,"id":342289,"user_name":"Tattoo","can_delete":false,"product_type":"c1","uid":1036503,"ip_address":"","ucode":"CE926AC8582C96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/d7/a09ef784.jpg","comment_is_top":false,"comment_ctime":1650172719,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650172719","product_id":100056701,"comment_content":"老师，请教一下，Redis 集群的模式是属于CP系统还是AP系统？","like_count":0},{"had_liked":false,"id":341375,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649570881,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649570881","product_id":100056701,"comment_content":"直接CRC计算效率更高，无需存储成本，以及解决数据一致性等问题","like_count":0},{"had_liked":false,"id":339765,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1648368558,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648368558","product_id":100056701,"comment_content":"用槽的好处是：<br>减少空间存储key与结点的关系，增加性能(含减少网络交互key与结点关系的数据传输量)<br>key如果用于维护与结点的关系，key是无穷的，这时在扩容，负载等情况下，性能较差。比如现在有5000万个key，增加2台redis实例，那么就需要将5000万个key抽取一部分移到这2台。这个量是比较大的，如果是采用槽则会比较少。<br>","like_count":0},{"had_liked":false,"id":334729,"user_name":"薛定谔的疯兔子","can_delete":false,"product_type":"c1","uid":1904140,"ip_address":"","ucode":"BEF678D50400F5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0e/0c/4ec2075f.jpg","comment_is_top":false,"comment_ctime":1645091910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645091910","product_id":100056701,"comment_content":"分配的哈希槽有可能会冲突吗","like_count":0},{"had_liked":false,"id":332666,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1643445237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643445237","product_id":100056701,"comment_content":"cluster 配置说明：<br><br># 是否开启 cluster，yes 表示开启，no 表示普通的 redis 实例<br>cluster-enabled yes<br># 该文件列出了集群中的其他节点，它们的状态、持久变量等内容。由于某些消息接收，此文件通常会被重写并刷新到磁盘上。<br># 保存集群中其他节点信息的文件，默认为 nodes.conf ，需要为每个节点设置单独的文件名。<br># 该文件无需手动配置，Redis Cluster 自动维护<br>cluster-config-file nodes.conf<br># 节点互连超时时间，毫秒为单位。如果超时，则认为此节点不可用，将由其从节点进行故障转移，也就是由其从节点成为主节点。<br># 这个参数控制 Redis Cluster 中的其他重要内容。<br># 如果主节点超时，则主节点对查询服务也不再响应。<br>cluster-node-timeout 5000<br># 当前节点是从节点且在故障转移时使用<br># 如果设置为零，则副本将始终认为自己有效，因此将始终尝试对主节点进行故障转移，无论主节点和副本节点之间断开连接有多久。<br># 如果设置为正数，Redis 会计算当前从节点是否可以进行故障转移。计算公式为：(cluster-node-timeout 配置的毫秒数 * cluster-slave-validity-factor)<br># 例如 cluster-node-timeout 配置为 5000，cluster-slave-validity-factor 配置为 10，如果当前从节点和主节点断开时间超过 50 秒，则不可用于故障转移。<br># 请注意，如果没有能够对主节点进行故障转移的从节点，则任何非零值都可能导致当前 Redis Cluster 示例不可用。<br># 在这种情况下，只有当原始主节点重新加入集群时，集群才会恢复可用。<br>cluster-slave-validity-factor 10<br># 从节点自动迁移时使用<br># 当一个主节点有多个从节点，而另外一个主节点没有从节点时，Cluster 会自动进行从节点迁移。<br># 这个配置就是用来设置当一个主节点最少有多少个从节点时，其余的从节点可以迁移到别的主节点。<br>cluster-migration-barrier 1<br># 设置为 yes 表示有一个主节点不可用且没有对应的从节点进行故障转移时，则整个集群不可用。<br># 设置为 no 表示有一个主节点不可用且没有对应的从节点进行故障转移时，整个集群仍然可用，此时由其他主节点提供服务，当然下线主节点对应的哈希槽是不可用的<br># 默认为 yes，建议设置为 no<br>cluster-require-full-coverage yes<br># 默认是no，当集群认为有节点出现故障时，该故障可能是因为网络分区导致该节点与集群隔离开，或者该节点无法得到集群大多数节点的认同时，<br># 此时该故障节点将会拒绝任何读写请求，这样的好处是将阻止客户端从该节点读取到不一致的数据。<br># 该参数也可以被配置为yes，即使该节点故障也允许读操作，这在应用要求优先进行读取操作但是可以阻止不一致性写入的情况下比较有用，<br># 当Redis集群仅有少量切片情况下且没有从节点执行故障转移时可以考虑使用。<br>cluster-allow-reads-when-down no","like_count":0},{"had_liked":false,"id":326723,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1639646339,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1639646339","product_id":100056701,"comment_content":"Redis cluster  的 16384 个slot 和 redis 对key的全局hash表，有什么区别和联系呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553692,"discussion_content":"两个层面的东西，Redis cluster的slot用于定位key属于哪个节点，而全局哈希表则是单机Redis存储key的基本数据结构。可以简单这么缕，查询一个key时的逻辑是：key -&gt; slot -&gt; 节点 -&gt; 全局哈希表 -&gt; 数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646031145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326573,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1639568153,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"1639568153","product_id":100056701,"comment_content":"主从集群和切片集群的关系是什么？是无论是主库还是备库都可以是切片集群吗？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553691,"discussion_content":"应该反过来说，切片集群中的每个节点都能各自配成主备","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646030789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325432,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1638956104,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1638956104","product_id":100056701,"comment_content":"第6-9小节讲解了如何通过减少服务中断提高redis可靠性。<br>首先是通过主从库模式（第6节），增加从库冗余备份，主从之间可以增量备份。<br>但是主库可能会挂掉，那么就需要主从切换，这时需要哨兵（第7节）判断主库下线、选出新主库并通知从库。<br>架构演进到这一步发现哨兵也可能会挂掉，那么提供哨兵集群机制（第8节）。哨兵与哨兵之间、哨兵和从库之间、哨兵和客户端之间通过pub&#47;sub机制建立连接。确定哪个哨兵执行主从切换也是一个“投票仲裁”的过程。最后，老师分享了一个经验：要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds。<br>集群还涉及扩展问题（第9节），redis采用了水平（横向）扩展方案-Redis Cluster（切片集群 &#47; 分片集群）。此方案实现基于哈希槽，客户端定位节点涉及MOVED和ASK命令的使用。<br>另外，我觉得可以默写Kaito课代表的答案了，灰常全面👨🏻‍💻","like_count":0},{"had_liked":false,"id":324648,"user_name":"Geek_368c5a","can_delete":false,"product_type":"c1","uid":2105937,"ip_address":"","ucode":"0F45D022AF611E","user_header":"","comment_is_top":false,"comment_ctime":1638525596,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1638525596","product_id":100056701,"comment_content":"请问下老师，redis cluster 模式，一个实例 突然宕机了，如何保证这个实例所拥有的槽位数据不丢呢","like_count":0,"discussions":[{"author":{"id":1183380,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/94/67fffed1.jpg","nickname":"杜超","note":"","ucode":"8123F1E13D6A68","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555076,"discussion_content":"那如何完成主从切换呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646733853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553690,"discussion_content":"每个分片节点再配置主从","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646030695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324490,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1638455697,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1638455697","product_id":100056701,"comment_content":"我觉得主要是因为hash槽的个数只有16384个 而key的个数不确定。维护起来内存占用不好预估。","like_count":0},{"had_liked":false,"id":320757,"user_name":"李强","can_delete":false,"product_type":"c1","uid":1276652,"ip_address":"","ucode":"EE1F99E12D212E","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/ec/19104a37.jpg","comment_is_top":false,"comment_ctime":1636505884,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1636505884","product_id":100056701,"comment_content":"如果客户端访问的实例挂了，redis怎样处理呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553693,"discussion_content":"每个分片配置主从，如果没有或者主从都挂了，那么集群故障","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646031205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318868,"user_name":"受超凡","can_delete":false,"product_type":"c1","uid":2678558,"ip_address":"","ucode":"A2A160D483BBB0","user_header":"","comment_is_top":false,"comment_ctime":1635471564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635471564","product_id":100056701,"comment_content":"客户端会缓存每个key和实例间的关系，如果key特别多的情况下，会不会消耗比较多的内存呢？","like_count":0},{"had_liked":false,"id":316081,"user_name":"呵呵哒","can_delete":false,"product_type":"c1","uid":2804690,"ip_address":"","ucode":"C08AA79F71D193","user_header":"","comment_is_top":false,"comment_ctime":1634125709,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1634125709","product_id":100056701,"comment_content":"假设主动下线了一个节点，把槽迁移到其他节点了。客户端不知道变更，查询就报错了，不会重定向，所以下线时怎么让客户端知道？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553734,"discussion_content":"客户端自行处理，正常来说，查询报错触发重试之前会更新一下缓存。实现细节不同客户端略有不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646043556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314567,"user_name":"leo.li","can_delete":false,"product_type":"c1","uid":2169337,"ip_address":"","ucode":"916204A614FDD4","user_header":"","comment_is_top":false,"comment_ctime":1633230681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633230681","product_id":100056701,"comment_content":"使用hash槽查找快，记录映射表怎么查找","like_count":0},{"had_liked":false,"id":314026,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632811723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632811723","product_id":100056701,"comment_content":"随着Redis 实例中存储的数据量不断增大，单实例的Redis性能瓶颈越来越大，主要表现在：<br>  1、随着单实例数据量增大，增删改查的效率都会降低<br>  2、RDB文件也会不断增大，造成fork子进程的开销变大<br><br>而采用切片集群的方式，扩展性好，并且没有单实例数据量过大产生的性能问题，不管有多少数据，切片集群都能应对。<br><br>不过引入切片集群的解决方案的同时，也引入集群的管理问题，问题的核心：<br>  1、请求路由<br>  2、数据迁移<br><br>Redis 的切片集群方案是通过抽象层(哈希槽)来支持实例的扩容缩容的，随着集群的实例增减，数据会重新分布，哈希槽和实例的映射关系会发生变化。<br><br>客户端发送请求时，会收到命令执行报错信息。其中MOVED 的命令表示数据已完成迁移，客户端会更新请求路由的缓存；而 ASK 命令表示数据正在迁移中，会返回哈希槽当下所在的实例地址，客户端不会请求路由的缓存。<br><br>当实例进行扩容缩容时，Redis为了负载均衡，需要重新分配哈希槽，会把哈希槽在所有实例上重新分布一遍。","like_count":0},{"had_liked":false,"id":313720,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":2775773,"ip_address":"","ucode":"118FD2D69BE2F2","user_header":"https://static001.geekbang.org/account/avatar/00/2a/5a/dd/11405c87.jpg","comment_is_top":false,"comment_ctime":1632633472,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1632633472","product_id":100056701,"comment_content":"有一点不太懂希望可以得到解答，文中一开始的例子中无论是横向扩展还是和纵向扩展，数据的实际存储量都是25G+RDB快照大小，虽然横向拓展解决了性能问题，但是如果不纵向拓展的话，是不是还是会面临内存不足的问题？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553698,"discussion_content":"分成5个分片以后，每个节点就只有5G了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646032784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309355,"user_name":"tonytan","can_delete":false,"product_type":"c1","uid":1239843,"ip_address":"","ucode":"DF567668CEA540","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/23/1f16f906.jpg","comment_is_top":false,"comment_ctime":1630060514,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1630060514","product_id":100056701,"comment_content":"为什么说 fork 会阻塞主线程？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553695,"discussion_content":"因为fork子进程需要拷贝主进程的内存页表，这步操作是阻塞的，主进程内存越大内存页表越大，fork时间越长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646031590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306641,"user_name":"王九荣","can_delete":false,"product_type":"c1","uid":1110189,"ip_address":"","ucode":"3C87DF4F7CEE10","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/ad/653db0f4.jpg","comment_is_top":false,"comment_ctime":1628654726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628654726","product_id":100056701,"comment_content":"这样当redis实例减少或者增加发生了变化，这张表就需要重新维护","like_count":0},{"had_liked":false,"id":306611,"user_name":"Geek_51f7f1","can_delete":false,"product_type":"c1","uid":1750221,"ip_address":"","ucode":"C055C2BEF78BCB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3vGFse0gcpic1tkmYkrzJSW0p8VqBiaZUREwkCicysrk5n4T0omg3DoTZe2rHiaDNibtJOd0L6hakY4zDOvs4fyWJA/132","comment_is_top":false,"comment_ctime":1628645310,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628645310","product_id":100056701,"comment_content":"这跟 Redis 的持久化机制有关系。在使用 RDB 进行持久化时，Redis 会 fork 子进程来完成，fork 操作的用时和 Redis 的数据量是正相关的，而 fork 在执行时会阻塞主线程。数据量越大，fork 操作造成的主线程阻塞的时间越长。所以，在使用 RDB 对 25GB 的数据进行持久化时，数据量较大，后台运行的子进程在 fork 创建时阻塞了主线程，于是就导致 Redis 响应变慢了<br>请教下老师, 这里只是预先创建一个子进程, 怎么会与数据量有关系呢. 数据量大, 子进程在进行RDB快照时即便速度很慢, 理论上也不影响主进程吧.","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553694,"discussion_content":"fork慢的点就是你说的“预先创建一个子进程”，主进程内存越大创建子进程就越慢，因为需要拷贝更多的内存页表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646031511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306162,"user_name":"Geek_f71330","can_delete":false,"product_type":"c1","uid":1617615,"ip_address":"","ucode":"40F8CD661E8F59","user_header":"https://static001.geekbang.org/account/avatar/00/18/ae/cf/6186d936.jpg","comment_is_top":false,"comment_ctime":1628413213,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628413213","product_id":100056701,"comment_content":"“这些键值对所占的内存空间大约是 25GB（5000 万 *512B）。所以，当时，我想到的第一个方案就是：选择一台 32GB 内存的云主机来部署 Redis。因为 32GB 的内存能保存所有数据，而且还留有 7GB”<br><br>请问老师，在这种情况下，服务器仅剩7GB的内存，还可以fork 子进程对25GB的内存进行持久化吗？子进程难道不需要占用25GB吗？ 这一点很困扰我。 如果服务器没有开启swap空间，那么内存足够进行fork子进程吗？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389249,"discussion_content":"可以看看前面两章介绍的rdb和aof，fork子线程是拷贝的内存表而不是数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629192304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305834,"user_name":"silence","can_delete":false,"product_type":"c1","uid":2461058,"ip_address":"","ucode":"D22041E776C238","user_header":"https://static001.geekbang.org/account/avatar/00/25/8d/82/55be8390.jpg","comment_is_top":false,"comment_ctime":1628184827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628184827","product_id":100056701,"comment_content":"每篇都能及时看到两大学习委员的精彩解答与总结，是真的强","like_count":0},{"had_liked":false,"id":305520,"user_name":"茶没喝完","can_delete":false,"product_type":"c1","uid":1644104,"ip_address":"","ucode":"D72D88C42A1258","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/48/09493874.jpg","comment_is_top":false,"comment_ctime":1628008008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628008008","product_id":100056701,"comment_content":"课后问题：使用了hash slot，redis cluster就是一致性hash算法了，增减实例会自动分配slot，对集群造成的影响最小","like_count":0},{"had_liked":false,"id":305199,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1627874315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627874315","product_id":100056701,"comment_content":"别忘了,如果使用哈希表作为映射关系的维护方式,那么这个哈希表的维护将是一个非常庞大的工作量,一个实例的上下线,都将修改大量的hash表内数据,这一步可以利用反熵等机制来实现维护,但是反熵带来的额外耗时,都是新出现的问题","like_count":0},{"had_liked":false,"id":304377,"user_name":"Geek_60e402","can_delete":false,"product_type":"c1","uid":2685772,"ip_address":"","ucode":"2BA18B57249600","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MRPyUwu5UQohFRm505mO9KEh4rhmhCABwhVgYDFg9XnoiaUlvmqoQyzsWNdPEd8JHSK8NErN066RdFOyeINK04A/132","comment_is_top":false,"comment_ctime":1627376112,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1627376112","product_id":100056701,"comment_content":"我感觉这种方案也是有缺点的，要是我的key经过hash以后全部打到一个槽位上呢？","like_count":0,"discussions":[{"author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389299,"discussion_content":"基本上使用了算法就不用担心这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629209207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389250,"discussion_content":"hash就是为了打散数据的，量越大越均衡。如果量很少即使打到一个槽上也没啥关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629192451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304373,"user_name":"Geek_60e402","can_delete":false,"product_type":"c1","uid":2685772,"ip_address":"","ucode":"2BA18B57249600","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MRPyUwu5UQohFRm505mO9KEh4rhmhCABwhVgYDFg9XnoiaUlvmqoQyzsWNdPEd8JHSK8NErN066RdFOyeINK04A/132","comment_is_top":false,"comment_ctime":1627375826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627375826","product_id":100056701,"comment_content":"如果槽位在迁移过程中，突然断网了，槽位上的数据会丢失吗？","like_count":0},{"had_liked":false,"id":303693,"user_name":"快乐就好","can_delete":false,"product_type":"c1","uid":1205376,"ip_address":"","ucode":"5F4806B050FA46","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/80/61107e24.jpg","comment_is_top":false,"comment_ctime":1626934884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626934884","product_id":100056701,"comment_content":"请问一下redis 4.0.14版本，部署集群模式3主3从，主节点故障，主从切换不了，下线节点一直处于handshake状态，每15s node—id变化一次，在15s之内手动forget node—id也变化一次。","like_count":0},{"had_liked":false,"id":303551,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1626852762,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1626852762","product_id":100056701,"comment_content":"如果返回了ask，重定向到新地址后依然没有读取到怎么办？（因为迁移毕竟需要时间，重定向后，想访问的数据没有迁移完怎么办？是一直在新地址阻塞等待么？）<br><br><br>“这个结果中的 ASK 命令就表示，客户端请求的键值对所在的哈希槽 13320，在 172.16.19.5 这个实例上，但是这个哈希槽正在迁移。此时，客户端需要先给 172.16.19.5 这个实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送 GET 命令，以读取数据。”","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553867,"discussion_content":"首先，key迁移是阻塞的或者说是原子的，也就是说一个key要么存在于源节点要么存在于目标节点\n所以如果存在于源节点会直接返回，不存在于源节点ask到目标节点必定能查到。如果查询的时候正好在迁移则会在源节点阻塞，阻塞结束后再ask到目标节点，因此一次迁移的key不要太多太大 否则迁移时会造成长时间阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646121722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302905,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1626428746,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1626428746","product_id":100056701,"comment_content":"在这种集群模式下，哨兵是如何工作的？","like_count":0,"discussions":[{"author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389300,"discussion_content":"切片集群就没哨兵了，图都没画了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629209255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300392,"user_name":"zachary","can_delete":false,"product_type":"c1","uid":2640551,"ip_address":"","ucode":"B22B95FCECD6E7","user_header":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","comment_is_top":false,"comment_ctime":1625137831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625137831","product_id":100056701,"comment_content":"看了下评论，有读者提出一个问题我比较感兴趣。就是redis分片集群的官方解决方案redis cluster为什么不采用一致性哈希算法。记得memcached的集群就是用一致性哈希算法，而redis cluster采用哈希槽的解决方案。使用哈希槽方案可以实现键值对与分片节点间弱耦合。还有每次扩容的时候，键值对的迁移可以做到人为可控，因为哈希槽可以人为去分配。比如说，某一个分片有个热点键值对，在扩容的时候，我想把它迁移到新的分片节点上，如果采用哈希槽的方式，就很容易做到。除此之外，哈希槽方式还有哪些优点，期待老师给个全面的总结？","like_count":0},{"had_liked":false,"id":299151,"user_name":"JaneWu5","can_delete":false,"product_type":"c1","uid":1388757,"ip_address":"","ucode":"6D77C09911FAF6","user_header":"https://static001.geekbang.org/account/avatar/00/15/30/d5/e25d2d32.jpg","comment_is_top":false,"comment_ctime":1624493846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624493846","product_id":100056701,"comment_content":"分槽备份的时候咋办？ 分片的情况下怎么确定master- slave？还是就没有了？？","like_count":0},{"had_liked":false,"id":298772,"user_name":"jisilu","can_delete":false,"product_type":"c1","uid":2266671,"ip_address":"","ucode":"DF4907D2FF23FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erND96otTr4MA09mOXdFwHaXcicjnAPfmRfbUr2gZ5qFV1KfYBoSQmwibIWG1GgYsYiaWhCL9qe1GCuQ/132","comment_is_top":false,"comment_ctime":1624323820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624323820","product_id":100056701,"comment_content":"应用中如何像访问单一Redis实例一样访问集群呢？","like_count":0},{"had_liked":false,"id":292274,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620748695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620748695","product_id":100056701,"comment_content":"因为CRC16(key) ％ 16384，<br>所以不管是新增或删除实例，又或者 rebalance 实例的数据，key-slot 的映射始终不变。变的是 slot-instance 的映射关系，是么？<br>谢谢老师！","like_count":0},{"had_liked":false,"id":291961,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1620626723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620626723","product_id":100056701,"comment_content":"1. 在重定向的机制中，像例子里的情况key1 key2已经迁移到新的实例3，<br>key3key4还在实例2的时候，如果客户端请求的是key3的话，它是会到实例2直接返回key3的value还是先得到ASK？<br><br>2. 如果是ASK那么客户端去ASKING 实例3的时候会不会阻塞到key3迁移时间片？<br><br>3. Redis Cluster集群，每个实例都保存一份所有槽位和实例的对应关系，如果实例1主从节点都异常或者宕机了，那么这块槽位数据应该是会丢失的么？<br> 客户端访问实例上的数据应该是报错状态？<br><br>4. 对于正在迁移的槽位数据访问，如何处理？等待迁移完还是报错？<br><br> <br>5. redis集群分片后，分片后的从节点可以支持读操作吗？","like_count":0},{"had_liked":false,"id":291910,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1620603181,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620603181","product_id":100056701,"comment_content":"slot和节点的映射可以考虑用一致性hash，另外通过虚拟节点映射达到最小化迁移。<br>另外路由表信息的传播是不是采用的Gossip传播协议呢？","like_count":0},{"had_liked":false,"id":288939,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1618794262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618794262","product_id":100056701,"comment_content":"老师讲的真细，不愧是教授。","like_count":0},{"had_liked":false,"id":288825,"user_name":"一粒","can_delete":false,"product_type":"c1","uid":1582813,"ip_address":"","ucode":"FB5F583CC6AE3C","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/dd/d58156b1.jpg","comment_is_top":false,"comment_ctime":1618718166,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618718166","product_id":100056701,"comment_content":"老师，想问一下数据迁移的细节，切片A从实例1迁移到实例2，是先读取键值对再写入实例2中吗，还是文件级的拷贝？已经迁移的数据就不存在实例1中了吗？为什么不采用“复制”的方式，即迁移过程中实例1中的数据均可访问，待迁移完成再将实例1中的切片A标记为不可用，然后清理掉？","like_count":0},{"had_liked":false,"id":288446,"user_name":"del","can_delete":false,"product_type":"c1","uid":1198870,"ip_address":"","ucode":"96C732A55B3837","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/16/e78d527e.jpg","comment_is_top":false,"comment_ctime":1618471355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618471355","product_id":100056701,"comment_content":"如果我原本有5个分片实例  这个时候我要加5台机器。这时候原5台机器上的数据  需要从新分配到10台机器上么？如果是这样的话 那时候一旦涉及到 分片实例发生改变的时候，那集群里所有的数据都需要从新分配加载么 这种如果遇到高并发访问的时候 会不会存在较长时间的ASK错误？","like_count":0},{"had_liked":false,"id":287490,"user_name":"Geek_e74c15","can_delete":false,"product_type":"c1","uid":2544946,"ip_address":"","ucode":"DC678F5A987D9A","user_header":"","comment_is_top":false,"comment_ctime":1617975479,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617975479","product_id":100056701,"comment_content":"分片集群跟主从哨兵模式有啥关系区别","like_count":0,"discussions":[{"author":{"id":2295880,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SYxHx9k1fVAZGanCk5cFVdzFyhx2pkNk45RdH1Yo3ITBH7dCWjwzEzibAnZaXayqF1TibW6ynBkCqIOd6p1Yhlew/132","nickname":"建锋","note":"","ucode":"50E4AF68BE4488","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577624,"discussion_content":"哨兵模式中，每个redis存储的是全量的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656237556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286526,"user_name":"Saitama","can_delete":false,"product_type":"c1","uid":2419770,"ip_address":"","ucode":"94735DA32C22B1","user_header":"https://static001.geekbang.org/account/avatar/00/24/ec/3a/75bc138d.jpg","comment_is_top":false,"comment_ctime":1617356650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617356650","product_id":100056701,"comment_content":"添加节点，数据迁移这里有点懵。我理解是，例如有三个节点，12个槽，每个节点负责4个槽。那么再添加一个节点，每个节点负责4个槽，那么只需要将部分槽分配给新节点，以减少数据迁移代价？","like_count":0},{"had_liked":false,"id":286385,"user_name":"木头人","can_delete":false,"product_type":"c1","uid":1550296,"ip_address":"","ucode":"AB40DDCACE986B","user_header":"https://static001.geekbang.org/account/avatar/00/17/a7/d8/9cdb4896.jpg","comment_is_top":false,"comment_ctime":1617275870,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617275870","product_id":100056701,"comment_content":"对“客户端ASK重定向命令”这个例子有点迷糊，对于这个例子，我的理解是client请求key2，由于slot2在迁移中，实例2给客户端ASK命令，ASK命令带了key2所在的实例3的地址，client给实例3发送ASKING，然后再给实例3发送Get请求，且在下一次client请求key2时，依然会向实例2发请求。疑惑在于，也就是说slot2在迁移过程中，redis实例依然能提供服务？如果client请求的是key3，它会依据内存中的缓存，依旧访问实例2，此时slot2在迁移中，实例2会返回客户端ASK命令？还是直接把key3返给客户端？返回ASK命令的条件是什么？是某个slot发生迁移，且请求的数据不在本实例吗？感谢蒋老师帮忙回答一下。","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553855,"discussion_content":"1、也就是说slot2在迁移过程中，redis实例依然能提供服务？是的，迁移并不是一步操作\n2、如果client请求的是key3，它会依据内存中的缓存，依旧访问实例2，此时slot2在迁移中，实例2会返回客户端ASK命令？key3还没迁移，会直接返回\n3、返回ASK命令的条件是什么？key在本节点找不到，且slot正在迁移","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646118316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285898,"user_name":"sgl","can_delete":false,"product_type":"c1","uid":1252243,"ip_address":"","ucode":"D73875BA22954F","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/93/e3b44969.jpg","comment_is_top":false,"comment_ctime":1617068227,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617068227","product_id":100056701,"comment_content":"使用pipeline的时候，切片集群还能用吗","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553728,"discussion_content":"能，前提是你用的客户端支持，因为pipeline主要是客户端实现的。如果是Java，springboot 2.0默认客户端lettuce是支持的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646041937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285124,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1616635449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616635449","product_id":100056701,"comment_content":"老师请问切片集群的每个实例都是主库吗，上节课讲到主从模式，如果切片集群想弄成主从，是不是每个实例各自为一个主库，在每个实例下面设置各自对应的从库，然后各自备份自己实例的数据，主库挂了后，只要从对应的实例里面重新选举主库就行了，请问是这样子的吗 : )","like_count":0},{"had_liked":false,"id":283985,"user_name":"苏格拉没底","can_delete":false,"product_type":"c1","uid":1476300,"ip_address":"","ucode":"282B56405AE1B9","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/cc/d63bb0f2.jpg","comment_is_top":false,"comment_ctime":1616030199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616030199","product_id":100056701,"comment_content":"蒋老师,您好,有两个问题想请教一下:<br>1.您说当有写删命令操作时,集群实例的存储要相对应的扩缩容,那么它的触发条件是什么呢?<br>2.进行扩缩时是在主线程中进行,还是fork出子进程?其中有哪些细节点?过程中是否会有阻塞呢?<br>希望老师看到到,在有时间的情况下,答疑一下,谢谢!","like_count":0},{"had_liked":false,"id":283190,"user_name":"Geek_0727b3","can_delete":false,"product_type":"c1","uid":1244919,"ip_address":"","ucode":"7ABDB7E5CC9469","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/f7/75dee350.jpg","comment_is_top":false,"comment_ctime":1615612511,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1615612511","product_id":100056701,"comment_content":"主线程 fork 子进程时就可能会阻塞这个问题 <br>1.写时拷贝机制 为什么 对fork子进程影响那么大<br>我理解 主线程 做两个事情 <br>1.fork 2.拷贝写操作内存<br>","like_count":0},{"had_liked":false,"id":281810,"user_name":"暮雨","can_delete":false,"product_type":"c1","uid":1176426,"ip_address":"","ucode":"4B7F4932446EF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/6a/6d82e7a3.jpg","comment_is_top":false,"comment_ctime":1614910724,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614910724","product_id":100056701,"comment_content":"在数据迁移未完成时，为什么客户端先发送asking，在发送请求命令，这个asking的作用是什么，不能直接发送请求命令么？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553854,"discussion_content":"设置个标记，允许查一次，否则就会返回MOVED错误，又回到原来那个节点了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646117907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277261,"user_name":"Pisces","can_delete":false,"product_type":"c1","uid":1504705,"ip_address":"","ucode":"B1E98AC36BDD0C","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/c1/b92153c6.jpg","comment_is_top":false,"comment_ctime":1612337302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612337302","product_id":100056701,"comment_content":"槽位重新分配后，数据如何迁移的？比如实例2上分配了槽位3 4，重新分配后，3 4 槽位分配到了实倒1上，但实例2上的保存的数据人如何移动到实例1上？","like_count":0},{"had_liked":false,"id":275905,"user_name":"python","can_delete":false,"product_type":"c1","uid":1870014,"ip_address":"","ucode":"2226125EBC99A5","user_header":"https://static001.geekbang.org/account/avatar/00/1c/88/be/cc6a7c11.jpg","comment_is_top":false,"comment_ctime":1611715544,"is_pvip":false,"replies":[{"id":"100449","content":"对于复杂类型的value来说，key也一样会做分片的。这个key是指复杂类型本身的key，并不是value集合内部的key（例如Hash集合内部的key）。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1612143087,"ip_address":"","comment_id":275905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611715544","product_id":100056701,"comment_content":"老师，请问redis对key做分片存储在不通的哈希槽，这是全局key-value。那么对于hash这种复杂类型的value的key也会做分片存储吗？","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514523,"discussion_content":"对于复杂类型的value来说，key也一样会做分片的。这个key是指复杂类型本身的key，并不是value集合内部的key（例如Hash集合内部的key）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612143087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271673,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1609752896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609752896","product_id":100056701,"comment_content":"为什么槽点数是16383","like_count":0,"discussions":[{"author":{"id":1109527,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/17/32183260.jpg","nickname":"逍遥魔君","note":"","ucode":"6EDD906634D7CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370229,"discussion_content":"2^16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619339498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271443,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1609642289,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1609642289","product_id":100056701,"comment_content":"在文中提到，增删分片节点，或者负载均衡的时候，会有数据迁徙.1.负载均衡什么时候发生？2.考虑上述的情况，每个分片节点的内存，磁盘需要考虑增加容量，老师，规划redis容量多少比较合适？","like_count":0},{"had_liked":false,"id":261579,"user_name":"袁东昊的电信手机","can_delete":false,"product_type":"c1","uid":2300724,"ip_address":"","ucode":"938393B2C47702","user_header":"","comment_is_top":false,"comment_ctime":1605428419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605428419","product_id":100056701,"comment_content":"节省内存空间","like_count":0},{"had_liked":false,"id":261335,"user_name":"周天航","can_delete":false,"product_type":"c1","uid":2308831,"ip_address":"","ucode":"B28D84594679A6","user_header":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","comment_is_top":false,"comment_ctime":1605274953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605274953","product_id":100056701,"comment_content":"老师您好，如果对集群进行在线扩列点，重新分配hash槽位后，原来槽位的数据咋办？也会自动过来吗？我以前记得在重新分配槽位的时候，要保证槽位没有数据才行，估计我弄错了。","like_count":0},{"had_liked":false,"id":260681,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1796510,"ip_address":"","ucode":"C23E3390995D95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKo5jCPQW87sFySwXiaLxibak0qQYuFRTyy8RlNsO9JDyxBk1AYDrsphRskxzXPLPOW8ibWicWlRAnzwg/132","comment_is_top":false,"comment_ctime":1605082355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605082355","product_id":100056701,"comment_content":"采用直接映射，相当于时间复杂度O(n)，采用CRC取模，相当于将时间复杂度调整为O(log N) ","like_count":0},{"had_liked":false,"id":260406,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604999158,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604999158","product_id":100056701,"comment_content":"Redis Cluster不采用直接把key映射到实例，而采用哈希槽的方式原因：可用使Redis集群设计：简洁，高效，有弹性<br>","like_count":0},{"had_liked":false,"id":260405,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604999074,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604999074","product_id":100056701,"comment_content":"在 Redis 3.0 之前，Redis 官方并没有提供切片集群方案，但是，其实当时业界已经有了一些切片集群的方案，例如基于客户端分区的 ShardedJedis，基于代理的 Codis、Twemproxy 等。这些方案的应用早于 Redis Cluster 方案，在支撑的集群实例规模、集群稳定性、客户端友好性方面也都有着各自的优势，我会在后面的课程中，专门和你聊聊这些方案的实现机制，以及实践经验。这样一来，当你再碰到业务发展带来的数据量巨大的难题时，就可以根据这些方案的特点，选择合适的方案实现切片集群，以应对业务需求了。","like_count":0},{"had_liked":false,"id":260306,"user_name":"duckman","can_delete":false,"product_type":"c1","uid":2184325,"ip_address":"","ucode":"0184C26C4B6C1B","user_header":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","comment_is_top":false,"comment_ctime":1604980798,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1604980798","product_id":100056701,"comment_content":"哈希槽数据迁移这里没有搞懂:<br>key1, key2, key3, key4 从  node2 迁至 node3, 此时 key1, key2 已迁至 node3.<br><br>此时，node2收到一个请求 get key3, 该如何处理?<br><br>我的理解: 因为 key3 还在 node2上, 所以返回 val3. 如果不在 node2 上， 返回 ASKING slot_val node3.<br><br>简单说就是，我有这个值，就直接返回给你；没有，就返回 ASKING ... 让你去这个节点上找，但是因为还没有迁移完，不要修改你本地的路由表。<br><br>请教大家，我的理解对不？<br><br><br>","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553851,"discussion_content":"理解的没错，纠正个小错误，是返回ASK不是ASKING，ASKING是客户端发送的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646117636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452799,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","nickname":"BertGeek","note":"","ucode":"8E1D72C9F9778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373126,"discussion_content":"请作者给于权威解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620625822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028947,"avatar":"","nickname":"Geek5350","note":"","ucode":"6EB4553707C357","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372292,"discussion_content":"我也是这样理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620273266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259813,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604845624,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604845624","product_id":100056701,"comment_content":"在 Redis 3.0 之前，Redis 官方并没有提供切片集群方案，但是，其实当时业界已经有了一些切片集群的方案，例如基于客户端分区的 ShardedJedis，基于代理的 Codis、Twemproxy 等。这些方案的应用早于 Redis Cluster 方案，在支撑的集群实例规模、集群稳定性、客户端友好性方面也都有着各自的优势。这样一来，当再碰到业务发展带来的数据量巨大的难题时，就可以根据这些方案的特点，选择合适的方案实现切片集群，以应对业务需求了。","like_count":0},{"had_liked":false,"id":259812,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604845580,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604845580","product_id":100056701,"comment_content":"学习了切片集群在保存大量数据方面的优势，以及基于哈希槽的数据分布机制和客户端定位键值对的方法。","like_count":0},{"had_liked":false,"id":256117,"user_name":"wei","can_delete":false,"product_type":"c1","uid":1032000,"ip_address":"","ucode":"8B14D27AE7C54E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/40/94eaca1b.jpg","comment_is_top":false,"comment_ctime":1603531068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603531068","product_id":100056701,"comment_content":"希望老师或者课代表@Kaito 翻牌回答～  蟹蟹～","like_count":0},{"had_liked":false,"id":256115,"user_name":"wei","can_delete":false,"product_type":"c1","uid":1032000,"ip_address":"","ucode":"8B14D27AE7C54E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/40/94eaca1b.jpg","comment_is_top":false,"comment_ctime":1603531027,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603531027","product_id":100056701,"comment_content":"问题一：Redis Cluster 没有对于 批量处理命令 和 事务处理的详细介绍；老师可以补充下么？<br>像mget 这样的命令是不是只能支持分配在同一个槽中的？ 还是干脆不支持？<br>问题二：上面介绍在数据迁移过程中，访问正在迁移的槽的时候，可以通过ASK命令 告知客户端进行重定向；我看只举例了访问已经迁移完成key2, 那如果访问还没有迁移到的key3呢？或者访问的key正在迁移中呢？还有这个数据迁移属于迁移一个删除一个么？","like_count":0,"discussions":[{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348421,"discussion_content":"mget命令只支持分配在同一个槽中的\n如果访问的key没有被迁移，则就节点正常处理，如果旧节点中没有这个key，这会发起asking的重定向\n算是迁移一个删除一个吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612540287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253064,"user_name":"上神梵修","can_delete":false,"product_type":"c1","uid":1324307,"ip_address":"","ucode":"77A5BED0911A87","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoU91kd8RZO5hg2w9cpnL4yTcfemDFJH3GfiaNRgOe7nQyQF7xBDc5Yq2Aue5KuHaEGOCMM9RUkUpQ/132","comment_is_top":false,"comment_ctime":1602582757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602582757","product_id":100056701,"comment_content":"哈喽 一直有个问题请教一下：redis的哈希槽是16384个 那为什么是这个数字呢  仅仅是因为这么多够用吗","like_count":0},{"had_liked":false,"id":252345,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1602246910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602246910","product_id":100056701,"comment_content":"哈希槽的好处在于可以让缓存不集中在某个节点上。避免造成热点key集中和上线下线造成的服务波动","like_count":0},{"had_liked":false,"id":251411,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1601535535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601535535","product_id":100056701,"comment_content":"老师，redis cluster如何做保证数据不丢失？","like_count":0},{"had_liked":false,"id":251215,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1601426249,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601426249","product_id":100056701,"comment_content":"（1）key的数量是无法预估的，如果放置在一张表中可能将占用大量内存；<br>（2）Redis的实例的增删会变得更加困难，实例的增删一定会产生数据迁移，会产生大量的key与实例关系的重新映射；","like_count":0},{"had_liked":false,"id":250746,"user_name":"小西几","can_delete":false,"product_type":"c1","uid":1286375,"ip_address":"","ucode":"ED1DDE17534508","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjzTQ6HPGw2LWLiaiciaibfdMMlmxEwBkBjxOPxeYynZlBKCf6U1b0ezM9IZYibB6yKR7HpRuAOdtj29Q/132","comment_is_top":false,"comment_ctime":1601208047,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601208047","product_id":100056701,"comment_content":"老师，你好，碰到一个问题，当java 客户端（jedis）连接redis cluster 集群端时候。如果有一个节点挂了，当程序再来查询存在这个节点上的数据时，提示无法连接，客户端并不能智能的连接到其他到节点上。这样会一直不可用（app页面上大量图片因使用redis导致无法显示）。目前找到的办法是重启java服务或者把挂掉的节点起来，但这显然不够智能，并且没有高可用了。。老师，您有没有好的办法去解决这个问题。感谢您的回复","like_count":0,"discussions":[{"author":{"id":1286375,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjzTQ6HPGw2LWLiaiciaibfdMMlmxEwBkBjxOPxeYynZlBKCf6U1b0ezM9IZYibB6yKR7HpRuAOdtj29Q/132","nickname":"小西几","note":"","ucode":"ED1DDE17534508","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309297,"discussion_content":"也就是文中说的move，ask，但是当连接的节点已经挂掉了，该去哪个节点move和ask..因为客户端已经缓存了这个节点的信息，还是会来这个已经挂掉的节点上操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601255067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249704,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1600764622,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1600764622","product_id":100056701,"comment_content":"### Redis切片集群<br>根据CRC16算法的值对16384取模，得到0~16383范围内的模数，每个模数代表一个哈希槽，创建集群后默认平均分配到各个示例上<br><br>redis实例会对自己的哈希槽信息进广播，则所有实例都有槽和实例的对应关系<br>客户端会缓存哈希槽信息<br>新增和删除；负载均衡；都会导致哈希槽重新分配<br><br>重定向：<br>- MOVED：返回数据存放地址，并更新客户端缓存<br>- ASK：返回数据存放地址，但不更新客户端缓存","like_count":0},{"had_liked":false,"id":249600,"user_name":"Geek_383ffd","can_delete":false,"product_type":"c1","uid":1834097,"ip_address":"","ucode":"C3E15ED58CB6DB","user_header":"","comment_is_top":false,"comment_ctime":1600700896,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600700896","product_id":100056701,"comment_content":"<br>请问下老师，在重定向的机制中，像例子里的情况key1 key2已经迁移到新的实例3，key3 key4还在实例2的时候，如果客户端请求的是key3的话，它是会得到实例2直接返回key3的value还是得到ASK？如果是ASK那么客户端去ASKING 实例3的时候会不会阻塞到key3迁移完成？谢谢","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553852,"discussion_content":"直接返回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646117668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248975,"user_name":"崔刚","can_delete":false,"product_type":"c1","uid":1701963,"ip_address":"","ucode":"EC9ADF0C53ADF4","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/4b/4f7ccc25.jpg","comment_is_top":false,"comment_ctime":1600393570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600393570","product_id":100056701,"comment_content":"Twemproxy下配置的多个redis实例，数据在这些redis中是分片存储还是全部的存储？","like_count":0},{"had_liked":false,"id":248070,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1600000221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600000221","product_id":100056701,"comment_content":"当key非常大的时候,这个表也随之增大,指标不治本, redis这样子做的目的是性能,同时对外提供更好的扩展性,当新的机器加入进来的时候,直接重新分配新的hash槽以及数据; 如果用表来保存的话,一方面读取数据也要经过这个表,并发比较大,可能会出现阻塞情况;","like_count":0},{"had_liked":false,"id":247173,"user_name":"念影","can_delete":false,"product_type":"c1","uid":1222742,"ip_address":"","ucode":"E8688E06B033C4","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/56/9e9594d5.jpg","comment_is_top":false,"comment_ctime":1599624203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599624203","product_id":100056701,"comment_content":"老师，问一下redis集群分片后，分片后的从节点可以支持读操作吗？","like_count":0},{"had_liked":false,"id":246318,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1599276384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599276384","product_id":100056701,"comment_content":"1. 通过对key执行CRC计算，再对16384取模，使得key在哈希槽分配更加均匀；<br>2. 使用查表法：<br>1）数据量大，消耗内存；使用CRC计算时间换空间；<br>2）表大小不易确定，增加数据，表需要随之扩大；<br>3）数据在实例间均衡，也需要修改表，需要对表加锁；<br>4）表数据变更都需要实时更新到各个客户端，需要表和实例保持强一致；","like_count":0},{"had_liked":false,"id":246070,"user_name":"浪里个狼","can_delete":false,"product_type":"c1","uid":1107772,"ip_address":"","ucode":"2085BB3632DCAF","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/3c/366c15ca.jpg","comment_is_top":false,"comment_ctime":1599151724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599151724","product_id":100056701,"comment_content":"老师，在Redis Cluster中的某个节点发生故障，怎么进行故障转移的？或者说集群怎么处理？","like_count":0},{"had_liked":false,"id":245355,"user_name":"Jusfly","can_delete":false,"product_type":"c1","uid":1474065,"ip_address":"","ucode":"ABF1590CFA38A4","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/11/ffe4db7d.jpg","comment_is_top":false,"comment_ctime":1598922862,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1598922862","product_id":100056701,"comment_content":"请问Redis容量大时，使用aof持久化是否能避免rdb持久化fork导致的延迟变高的问题","like_count":0,"discussions":[{"author":{"id":1221953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/41/f480323c.jpg","nickname":"齐哥哥","note":"","ucode":"867D3EBB5BD608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310405,"discussion_content":"但是又会导致数据恢复时载入时间变长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601817679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244915,"user_name":"silverhawk","can_delete":false,"product_type":"c1","uid":1018649,"ip_address":"","ucode":"BFBC8AF32868DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/19/a15d060d.jpg","comment_is_top":false,"comment_ctime":1598750869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598750869","product_id":100056701,"comment_content":"对于这种增加实例的策略的repartition，学术上很多都认为是consistent hash，但是在多个replication的实践中，很多都不采用consistent hash，能否分析一下？","like_count":0},{"had_liked":false,"id":244801,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1598684584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598684584","product_id":100056701,"comment_content":"集群实例本身是可能会变化的，而关系表当集群中的实例数量改变或者slot分布发生变化的时候关系表无法准确映射数据的真实位置，因为客户端可以直接访问不同的Redis实例<br><br><br>此外增加一点，Redis集群的每个实例是可以搭建哨兵的，其中还涉及分片集群的副本漂移策略，欢迎老师讲解一下","like_count":0},{"had_liked":false,"id":244652,"user_name":"叶子。","can_delete":false,"product_type":"c1","uid":1393004,"ip_address":"","ucode":"3EF2CC36F0D09A","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/6c/687c5dfb.jpg","comment_is_top":false,"comment_ctime":1598604814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598604814","product_id":100056701,"comment_content":"老师请教个问题，为什么Redis Cluster集群要至少3主3从呢？","like_count":0},{"had_liked":false,"id":244541,"user_name":"小贤","can_delete":false,"product_type":"c1","uid":1045642,"ip_address":"","ucode":"BF81E83E5CCEF2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/8a/ab9e3028.jpg","comment_is_top":false,"comment_ctime":1598574801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598574801","product_id":100056701,"comment_content":"请问切片集群与哨兵集群的关系是？切片集群可以由哨兵模式的集群演变？还是说需要redis集群模式来演变切片集群","like_count":0},{"had_liked":false,"id":244500,"user_name":"Geek_e0ee48","can_delete":false,"product_type":"c1","uid":1904256,"ip_address":"","ucode":"11D10A0F5892AB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgDicRj9LAvWSejVc6v34R6dR1yRHzqBgEpABeRwDvNcpoFW6zmiavwV5cP1fCKJiaQPiafP9E7Puqnw/132","comment_is_top":false,"comment_ctime":1598540055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598540055","product_id":100056701,"comment_content":"老师，您好：<br>  有些疑问想请教下：<br>  1、redis cluster 数据分片存储以后，跟以前的哨兵是怎么配合管理的？架构是怎样的？<br>  2、每个分片的redis实例之间是什么关系？都是主节点？ 我觉得他们不应该是从节点的关系。<br>   3、 每个分片的redis, 应该也是可以挂多个从节点进行读写分离吧？","like_count":0},{"had_liked":false,"id":244296,"user_name":"个大大","can_delete":false,"product_type":"c1","uid":2107122,"ip_address":"","ucode":"A7AC95E950BD97","user_header":"https://static001.geekbang.org/account/avatar/00/20/26/f2/27e8a33a.jpg","comment_is_top":false,"comment_ctime":1598452668,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598452668","product_id":100056701,"comment_content":"咨询老师一个问题，我的理解16384个槽，每个槽相当于哈希表的一个桶，如果当切片集群的键值对达到几十万甚至更多的时候，哈希碰撞是不是无法避免，导致链式存储数据过长，单机还可以通过扩容rehash解决，切片集群有没有什么解决方式呢？希望老师可以解决一下疑惑，谢谢。","like_count":0,"discussions":[{"author":{"id":1235894,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/b6/695882c7.jpg","nickname":"凯","note":"","ucode":"48D8A93B1BFC0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301332,"discussion_content":"这个哈希槽只是判断key是在哪个redis实例上面，不会有什么链式结构呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598491291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244151,"user_name":"riryoutexi","can_delete":false,"product_type":"c1","uid":2112144,"ip_address":"","ucode":"2A3C7060F4D677","user_header":"https://static001.geekbang.org/account/avatar/00/20/3a/90/2ab62cd9.jpg","comment_is_top":false,"comment_ctime":1598412073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598412073","product_id":100056701,"comment_content":"请问 redis Cluster，扩容的时候，迁移的策略是什么？迁移的过程中怎么访问这些正在迁移中的key ？","like_count":0},{"had_liked":false,"id":244134,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1598407648,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598407648","product_id":100056701,"comment_content":"如果用一个表直接把键值对和实例的对应关系记录下来，这样就会消耗一定的空间存放。","like_count":0},{"had_liked":false,"id":244066,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1598370073,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598370073","product_id":100056701,"comment_content":"key的数量并不固定，所以key表的维护、集群间的key表同步都会比较复杂，增加了key与整个集群的耦合度，无用开销也太大。<br>同时有个问题想请教老师，为什么slot是16384个？<br>","like_count":0,"discussions":[{"author":{"id":2108046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLoAicus6PVAO7SJzBmPMsQ4AISV0IZTvFkQ5fzicA3VJ8GZbAFhtqZZkOCrnSiaPkYgTianK5gvmLsuQ/132","nickname":"Geek_dac7ff","note":"","ucode":"CA90CDD5AA0077","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301786,"discussion_content":"https://github.com/antirez/redis/issues/2576","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598637169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243821,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1241581,"ip_address":"","ucode":"9B70BE6908EB3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/ed/4e249c6b.jpg","comment_is_top":false,"comment_ctime":1598282233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598282233","product_id":100056701,"comment_content":"请问老师两个问题<br>1.为什么要采用crc16<br>2.各个节点的ping&#47;pong消息大小大概会有多大呢，怎么来计算呢","like_count":0},{"had_liked":false,"id":243737,"user_name":"MrPolo","can_delete":false,"product_type":"c1","uid":1449101,"ip_address":"","ucode":"1B08F61A7099F8","user_header":"","comment_is_top":false,"comment_ctime":1598261316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598261316","product_id":100056701,"comment_content":"先前在研究 redis cluster 時有注意到,若改為 cluster mode 後有些 command 會無法使用,這部分請問老師會在後面課程講解嗎?","like_count":0},{"had_liked":false,"id":243729,"user_name":"篮球不是这么打的","can_delete":false,"product_type":"c1","uid":1749078,"ip_address":"","ucode":"5DC354E8541C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/56/fc077ef8.jpg","comment_is_top":false,"comment_ctime":1598259725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598259725","product_id":100056701,"comment_content":"你好老师，请问下如何算的Redis中每个键值对的大小","like_count":0},{"had_liked":false,"id":243719,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1598256214,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1598256214","product_id":100056701,"comment_content":"老师，请问一个Redis延迟的问题。<br><br>Redis情况：<br>单实例Redis，内存10G，最大吞吐量在25000ops&#47;second。数据持久化方式：AOF - 每秒fsync一次。<br>高峰期的ops是每秒8000，key的数量是4万，内存占用量是2.5G。<br><br>遇到的问题：<br>低峰期Redis延迟0.125ms左右，但是在高峰期的时候，延迟比较大，有1ms左右。<br><br>通过INFO命令，看到latest_fork_usec是0。INFO命令其它的信息，我也看了下，感觉都还正常。<br><br>我能想到的是通过增加Redis分片机制，来缓解压力。<br><br>请问老师，针对这种情况，其一，如何来诊断Redis延迟高的情况呢？其二，如何来缓解Redis延迟高？","like_count":0},{"had_liked":false,"id":243645,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1598239108,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598239108","product_id":100056701,"comment_content":"请教小老师，我对ASKING命令不太理解，我觉得会返回一个包含bool值的信息，告诉客户端是否可以从这个实例中获取数据，若可以，然后客户端重新发送请求来获取数据，不知道这么理解对不对，请老师解惑。谢谢。","like_count":0,"discussions":[{"author":{"id":2108046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLoAicus6PVAO7SJzBmPMsQ4AISV0IZTvFkQ5fzicA3VJ8GZbAFhtqZZkOCrnSiaPkYgTianK5gvmLsuQ/132","nickname":"Geek_dac7ff","note":"","ucode":"CA90CDD5AA0077","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301656,"discussion_content":"快递小哥A拉了一车快递正在往蜂巢里放，B找A取自己的快递，快递小哥说刚放进去，你去快递箱看看吧。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598599748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553849,"discussion_content":"并不会，ASKING只是设置个标识，不会判断是否有这个数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646117121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243636,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1065310,"ip_address":"","ucode":"E5D21F2A3359CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/5e/9d2953a3.jpg","comment_is_top":false,"comment_ctime":1598235492,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598235492","product_id":100056701,"comment_content":"如果在客户端计算好 CRC 值，REDIS 集群是不是就不用做计算了","like_count":0,"discussions":[{"author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304377,"discussion_content":"有可能有伪造请求的风险","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599556740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243629,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1598234106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598234106","product_id":100056701,"comment_content":"关于ASKING的一点想法：在迁移过程中，已迁移的slot也还没有真正归新的实例管理，如果不加ASKING，那么目标实例还会返回MOVED错误。就会出现循环请求的情况","like_count":0},{"had_liked":false,"id":243619,"user_name":"Hugh","can_delete":false,"product_type":"c1","uid":1444656,"ip_address":"","ucode":"72CEF669801F26","user_header":"https://static001.geekbang.org/account/avatar/00/16/0b/30/08dfab98.jpg","comment_is_top":false,"comment_ctime":1598233087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598233087","product_id":100056701,"comment_content":"为什么不保存键值对的主要关键点在于，当要扩容或时，需要改变键值对的关系，这里就需要额外的记录哪些值在哪个实例上，相当于要记录两份数据，造成额外的开销。不知道我这样理解对不对。。","like_count":0},{"had_liked":false,"id":243605,"user_name":"等风来🎧","can_delete":false,"product_type":"c1","uid":1804087,"ip_address":"","ucode":"B6BB8714A0B019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","comment_is_top":false,"comment_ctime":1598228968,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598228968","product_id":100056701,"comment_content":"老师，对于slot槽位发生变化，数据迁移这个动作，是fork子进程来做的吗？迁移的过程中需要对键值重新再做CRC16的哈希运算，再计算出槽位吗","like_count":0,"discussions":[{"author":{"id":1622109,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erPMtAfnQdpx1yOZQ2ic7icqUs3tvibEjUXQMUXKiaakyuIho6k6vmdl46nrdWjXIjPIRg9Pmco00tR5w/132","nickname":"小氘","note":"","ucode":"DA55B9A02D9EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300670,"discussion_content":"一个确定的键经过CRC16后得到一个确定的16位数，然后对16384取模得到固定的槽位，所以我认为一个键对应某个槽位是确定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598230692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336009,"avatar":"https://static001.geekbang.org/account/avatar/00/14/62/c9/7da27891.jpg","nickname":"DKSky","note":"","ucode":"69371A81033949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1622109,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erPMtAfnQdpx1yOZQ2ic7icqUs3tvibEjUXQMUXKiaakyuIho6k6vmdl46nrdWjXIjPIRg9Pmco00tR5w/132","nickname":"小氘","note":"","ucode":"DA55B9A02D9EE0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300834,"discussion_content":"key和slot的映射是确定的，只需要缓存slot和实例的映射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598277936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300670,"ip_address":""},"score":300834,"extra":""}]}]},{"had_liked":false,"id":243597,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1598223773,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598223773","product_id":100056701,"comment_content":"问题: 当分片集群非常大，例如 1000 个实例，集群之前同步会比较困难，假如客户端访问的某个 key，请求到实例1时，实例1并不知道该 key 所在的位置，那么此时该如何响应 moved 指令了？","like_count":0,"discussions":[{"author":{"id":1304565,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f5/77d2c9b8.jpg","nickname":"QQ|AUTO","note":"","ucode":"B7D31D03DA1EAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300699,"discussion_content":"集群启动了，各个实例就知道槽位分布在那个实例上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598235701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243594,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1598219394,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598219394","product_id":100056701,"comment_content":"感觉如果存一个表的话 如果键值对数目太多 这个表的开销也会非常大 如果同样是对键值对取模的话 那么相似的键值对会大概率分配到一个实例上面 造成分配不均","like_count":0},{"had_liked":false,"id":243590,"user_name":"刀斧手何在","can_delete":false,"product_type":"c1","uid":1202572,"ip_address":"","ucode":"B99D7ECC3EE954","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/8c/ba81a832.jpg","comment_is_top":false,"comment_ctime":1598201793,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1598201793","product_id":100056701,"comment_content":"好处是方便后续扩展。这种方式实际上是一致性哈希。方便节点增加修改 重新调整分配的数据量尽可能少","like_count":0,"discussions":[{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336815,"discussion_content":"cluster不是一致性hash吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608708407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111974,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/a6/c863c65b.jpg","nickname":"西瓜刀","note":"","ucode":"3978348547499D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300744,"discussion_content":"我怎么感觉今天的课程里面，少了增加节点和删除节点slot如何分布的操作啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598253518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111974,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/a6/c863c65b.jpg","nickname":"西瓜刀","note":"","ucode":"3978348547499D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304378,"discussion_content":"先关注面，在深入点，点可以自己去深入，老师在第一节课讲过这个学习方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599556817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300744,"ip_address":""},"score":304378,"extra":""}]}]}]}