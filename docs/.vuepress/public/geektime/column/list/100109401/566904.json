{"id":566904,"title":"81｜结束语：掌握TDD的那天，我才成为了可靠高效的职业程序员","content":"<p>你好，我是徐昊。今天要对线段编辑器这个项目做一个收尾，同时也是我们整门课程的一个收尾。</p><h2>线段编辑器最终的结果</h2><p>目前，线段编辑器的代码是这样的：</p><pre><code class=\"language-plain\">import Konva from \"konva\";\nexport class LineEditor extends Konva.Group {\n    private line?: Konva.Line\n    private pointsCount: number = 0\n    attach(line: Konva.Line) {\n        this.line = line\n        line.on('pointsChange', () =&gt; {\n            this.update()\n        })\n        this.update()\n    }\n    update() {\n        let points = this.line!.points()\n        let previous = -1\n        for (let i = 0; i &lt; points.length / 2; i++) {\n            this.get(i, 'anchor').setAttrs({x: points[i * 2], y: points[i * 2 + 1]})\n            if (previous !== -1)\n                this.get(i, 'control').setAttrs({\n                    x: points[previous * 2] + (points[i * 2] - points[previous * 2]) / 2,\n                    y: points[previous * 2 + 1] + (points[i * 2 + 1] - points[previous * 2 + 1]) / 2\n                })\n            previous = i\n        }\n        for (let i = points.length / 2; i &lt; this.pointsCount; i++) {\n            this.findOne(`.${i}-anchor`).destroy()\n            this.findOne(`.${i}-control`).destroy()\n        }\n        this.pointsCount = points.length / 2\n    }\n    private get(index: number, type: string) {\n        return this.findOne(`.${index}-${type}`) || this.create(index, type)\n    }\n    private create(index: number, type: string) {\n        let point = new Konva.Circle({name: `${index}-${type}`, radius: 10, draggable: true})\n        if (type === 'anchor') {\n            point.on('dragmove', (e) =&gt; {\n                let points = this.line!.points()\n                points[index * 2] = e.target.x()\n                points[index * 2 + 1] = e.target.y()\n                this.line!.points(points)\n            }).on('dblclick', (e: Konva.KonvaEventObject&lt;MouseEvent&gt;) =&gt; {\n                let points = this.line!.points()\n                points.splice(index * 2, 2)\n                this.line!.points(points)\n            })\n        } else {\n            point.on('dragmove', (e) =&gt; {\n                let points = this.line!.points()\n                points.splice(index * 2, 0, e.target.x(), e.target.y())\n                this.line!.points(points)\n            })\n        }\n        this.add(point)\n        return point\n    }\n}\n\n</code></pre><!-- [[[read_end]]] --><p>从始至终，我们都没有调试过这个编辑器实际的行为是什么样子。现在是时候了，让我们来看看它最终的结果是什么样：</p><p><video poster=\"https://media001.geekbang.org/7db0b9a0a9b849a0a2b3d16e9f02e9a2/snapshots/366e07f5a089403f96b6f684d9ff5fd3-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/6f08535-18331038a40-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/9c0106ab1e074346a35abe7906522132/453975f7a2bf4319a666671664cd8e1e-9f6024f0467158d23115743cb9f17529-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>结束语</h2><p>到此为止，我们的课程就要结束了，一共是81节课，包含50+小时的视频演示。学习不易，坚持也不易，大家辛苦了！</p><p>回顾整个课程，我们从经典学派入手，以参数解析为例，讲解了测试驱动的整体流程。然后在项目一依赖注入容器中，使用经典学派完成了一个具有相当规模的依赖注入框架。</p><p>从项目二开始，我们介绍了伦敦学派的做法，也就是在具有明确架构愿景的情况下，如何使用二层分解方式，在保证架构愿景的前提下，以测试驱动的方式完成复杂的功能。</p><p>最后的项目四，我们把目光投向了具有更多不确定性的强交互性系统，一个以HTML Canvas为基础的线段编辑器。也正是在项目四中，我们更多地跳出了自动化测试先行（Test First）的测试驱动框架，以<strong>可测试性</strong>先行等更基础的原则为指引，做出了稍显“离经叛道“的测试驱动开发。</p><p>然而只要铭记两点：<strong>测试驱动开发是从软件的可测试性入手，驱动软件开发的模式</strong>；测试驱动开发的任务分解<strong>是以如何测试软件而不是如何实现软件</strong>为切入点的任务分解。那么，看起来“离经叛道”的新手，反而又是非常传统的技法。</p><p>让我们回看一下课程的开篇词，我曾经说过，对于测试驱动开发，稍有了解而全无实践的人，会认为是天方夜谭，甚至无法想象为什么需要这样的方式来开发：</p><ol>\n<li>为什么要开发人员来写测试？这难道不是测试人员的工作吗？难道开发写了测试，测试人员就不用再测了嘛？</li>\n<li>又要写测试，又要写生产代码，效率是不是太低了？只写生产代码效率应该更高吧？</li>\n<li>不写测试我也能写出可以工作的软件，那么写测试能给我带来什么额外的好处呢？</li>\n</ol><p>相信学完整个课程，这些对于测试驱动开发的常见质疑，已经不再成为你的困惑。那么我也希望你能以具有自己风格的方式，应用测试驱动开发方式，成为更加可靠、高效的职业程序员。</p><p>最后，我准备了一份<a href=\"https://jinshuju.net/f/LOxsRi\">毕业问卷</a>，希望你能花一两分钟填写一下。</p><p>我在开篇词曾经说过，测试驱动开发伴随了我职业生涯的每一个阶段。我相信，我掌握了测试驱动开发那天，我才成为了可靠、高效的职业程序员。</p><p>当然，它也是难以掌握的。在近二十年里，我一直尝试通过引入一些实践来降低TDD的学习门槛，以及帮助我们在团队中更有效地推行TDD，包括课程中介绍的任务分解、架构愿景等。</p><p>所以这个课是我最新尝试的一个总结，希望你能为我提供一些反馈和建议，这也是我开设这门课的一个初心。就到这里了，我们再会！</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/fa/1f49dd0ca82ab7a4c8ea2c3f1102c3fa.jpg?wh=1142x801\" alt=\"\"></p>","neighbors":{"left":{"article_title":"80｜Line Editor （2）：如何重构生成与更新锚点控制点的逻辑？","id":564811},"right":{"article_title":"期末测试｜赴一场100分之约！","id":566865}},"comments":[{"had_liked":false,"id":357237,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1663081482,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"原来真实的 TDD 开发中是首选简单快速的方法实现，见机行事","like_count":5},{"had_liked":false,"id":386048,"user_name":"王鸿轩","can_delete":false,"product_type":"c1","uid":2089044,"ip_address":"浙江","ucode":"737FE2D0185643","user_header":"https://static001.geekbang.org/account/avatar/00/1f/e0/54/c2a1abbc.jpg","comment_is_top":false,"comment_ctime":1703920340,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"期待与徐昊老师再会，听徐昊老师分享和写代码是一种非常愉悦的享受。","like_count":1}]}