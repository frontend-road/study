{"id":407452,"title":"05 | 一个好的自动化测试长什么样？","content":"<p>你好，我是郑晔！</p><p>在上一讲里我们讲了测试的一个关键点是自动化测试，而自动化刚好是程序员的强项。自从有了自动化测试框架，自动化测试就从业余走向了专业，但这并不是说，有了测试框架你就能把测试写好了，我们来看几个典型的问题：</p><ul>\n<li>测试不够稳定，一次运行通过，下次就不能通过了；</li>\n<li>要测的东西很简单，但是为了测这个东西，光是周边配套的准备就要写很多的代码；</li>\n<li>一个测试必须在另一个测试之后运行；</li>\n<li>……</li>\n</ul><p>这是让很多团队在测试中挣扎的原因，也是很多人放弃测试的理由。之所以测试会出现这样那样的问题，一个重要的原因是这些测试不够好。这一讲，我们就来讲讲好的测试应该长什么样。</p><h2>测试的样子</h2><p>关于自动化测试，其实有一个关键的问题我们一直还没有讨论。我们用测试来保证代码的正确性，然而，测试的正确性如何保证呢？</p><p>这是一个会问懵很多人的问题：测试保证代码的正确性，那测试代码的正确性也用测试保证？但你见过有人给测试写测试吗？没有。因为这是一个循环的问题，你给测试写了测试，那新的测试怎么保证正确性呢？难不成要递归地写下去？是不是有种大脑要堆栈溢出的感觉了。</p><p>既然给测试写测试不是一个行得通的做法，那唯一可行的方案就是，<strong>把测试写简单，简单到一目了然，不需要证明它的正确性</strong>。由此，我们可以知道，一个复杂的测试肯定不是一个好的测试。</p><!-- [[[read_end]]] --><p>简单的测试应该长什么样呢？我们一起来看一个例子，这就是我们在实战环节中给出的第一个测试。</p><pre><code>@Test\npublic void should_add_todo_item() {\n  // 准备\n  TodoItemRepository repository = mock(TodoItemRepository.class);\n  when(repository.save(any())).then(returnsFirstArg());\n  TodoItemService service = new TodoItemService(repository);\n  \n  // 执行  \n  TodoItem item = service.addTodoItem(new TodoParameter(&quot;foo&quot;));\n  \n  // 断言  \n  assertThat(item.getContent()).isEqualTo(&quot;foo&quot;);\n  \n  // 清理(可选)\n  \n}\n</code></pre><p>我把这个测试分成了四段，分别是准备、执行、断言和清理，这也是一般测试都会具备的四个阶段，我们分别来看一下。</p><p><strong>准备。</strong>这个阶段是为了测试所做的一些准备，比如启动外部依赖的服务，存储一些预置的数据。在我们这个例子里面就是设置所需组件的行为，然后将这些组件组装了起来。</p><p><strong>执行。</strong>这个阶段是整个测试中最核心的部分，触发被测目标的行为。通常来说，它就是一个测试点，在大多数情况下，执行应该就是一个函数调用。如果是测试外部系统，就是发出一个请求。在我们这段代码里，它就是调用了一个函数。</p><p><strong>断言。</strong>断言是我们的预期，它负责验证执行的结果是否正确。比如，被测系统是否返回了正确的应答。在这个例子，我们验证的是 Todo 项的内容是否是我们添加进去的内容。</p><p><strong>清理。</strong>清理是一个可能会有的部分。如果在测试中使到了外部资源，在这个部分要及时地释放掉，保证测试环境被还原到一个最初的状态，就像什么都没发生过一样。比如，我们在测试过程中向数据库插入了数据，执行之后，要删除测试过程中插入的数据。一些测试框架对一些通用的情况已经提供支持，比如之前我们用到的临时文件。</p><p>如果准备和清理的部分是在几个测试用例间通用的，它们就有可能被放到 setUp 和 tearDown 里去完成，这一点我们在上一讲已经讲过了。</p><p>这四个阶段中，必须存在的是执行和断言。想想也是，<strong>不执行，目标都没有，还测什么？不断言，预期都没有，跑了也是白跑。</strong>如果不涉及到一些资源释放，清理部分很可能就没有了。而对一些简单的测试来说，也不需要做特别的准备。</p><p>从结构上来看，测试用例应该就是这么简单。你去看一下我们在实战中的代码，大部分测试都是可以这样划分的。</p><p>理解了测试的结构，有一些测试存在的问题你一眼就能看出来了。比如对于没有断言的测试来说，看上去测试从来不会出错，但这样的测试几乎是没有价值的。</p><p>再比如，一个测试里有多个执行目标，可能是需要在一个测试里要测多个不同的函数。这就是一个坏味道了。为什么说这是一个坏味道呢？因为测试的根基是简单，一旦复杂了，我们就很难保证测试本身的正确性。如果你有多个目标怎么办？分成多个测试就好了。</p><p>如果测试本身简单到令人发指的程度，出于节省代码篇幅的角度，你可以考虑在一个测试里面写。比如测试字符串为空的函数，我要分别传入空对象和空字符串，每种情况执行和断言一行代码就写完了，那我可能就在一个测试里面写了。</p><h2>一段旅程（A-TRIP）</h2><p>有了对测试结构的基本认知，我们再进一步，看看如何衡量一个测试有没有做好？有人把好测试的特点总结成一个说法：<strong>A-TRIP</strong>。这其实是五个单词的缩写，分别是：</p><ul>\n<li>Automatic，自动化；</li>\n<li>Thorough，全面的；</li>\n<li>Repeatable，可重复的；</li>\n<li>Independent，独立的；</li>\n<li>Professional，专业的。</li>\n</ul><p>这是什么意思呢？我们分别来解释一下。</p><p><strong>Automatic，自动化。</strong>经过上一讲的讲解，这一点你应该已经很容易理解了。自动化测试相比传统测试，核心增强就在自动化上。这也是为什么测试一定要有断言，因为只有在有断言的情况下，机器才能够帮我们判断测试是否成功。</p><p><strong>Thorough，全面的。</strong>这一点其实是测试的要求，应该尽可能用测试覆盖各种场景。不管什么样的自动化测试，它的本质还是测试，前面我们讲了向测试人员学习，关键点就在于这有助于我们写出更全面的测试。理解全面还有一个角度，就是测试覆盖率。我们在实战环节中已经见识了如何通过测试覆盖率工具，帮我们去发现代码中测试中没有覆盖到地方。</p><p><strong>Repeatable，可重复的。</strong>它要求测试能够反复运行，并且结果都应该是一样的。这是保证测试简单可靠的前提。如果一个测试不是可重复的，我们就没法相信它的运行结果，测试的价值也就荡然无存了。一旦测试报错，我们没法确定是我们程序出错了，还是其它什么地方出错了。</p><p>在内存中执行的测试一般都是可重复的。影响一个测试可重复性的主要因素是外部资源，常见的外部资源包括文件、数据库、中间件、第三方服务等等。如果在测试中遇到这些外部资源，我们就要想办法让这些资源在测试结束后，恢复原来的样子。你在实战中已经见识过如何处理文件，在后面的应用篇，我们还会讲到如何处理数据库。简单说就是在测试执行之后，能够把数据回滚掉。</p><p>如果你遇到中间件，最好有一个独立可控的中间件。而遇到第三方服务，则可以采用模拟服务，我的开源项目 Moco 主要就是为了解决这种外部依赖而生的。</p><p>理解可重复性还有一个角度，那就是一批测试也要可重复。这就需要测试之间彼此没有依赖，这也是我们接下来要讨论的测试的另外一个特点。</p><p><strong>Independent，独立的。</strong>测试和测试之间不应该有任何依赖。什么叫有依赖？就是一个测试要依赖于另外一个测试运行的结果。比如两个测试都要依赖于数据库，第一个测试运行时往数据库里写了一些数据，而第二个测试在执行时要用到这些数据。也就是说，第二个测试必须在第一个测试执行之后再执行，这就叫做有依赖。</p><p>我知道，有很多人有很多的理由让测试之间有依赖。比如说为了提高执行效率，但这种做法属于特定的优化。对于其他绝大多数情况而言，一旦你开始这么做了，测试就走上了歧途。比如，一些框架支持多个测试并行运行，一旦测试有依赖，测试就无法并行执行，因为这两个测试之间是有顺序的。再比如，一旦有人破坏了测试的独立性，紧接着就会有更多的人破坏独立性，这就像代码的坏味道一样，很容易传播。</p><p>可重复性和独立性关联非常紧密。因为我们通常认为，可重复是测试按照随机的顺序执行，其结果也是一样的，这就要依赖于测试是独立的。而一旦测试不独立，有了依赖，从单个测试上来看，它也违反了可重复性。</p><p><strong>Professional，专业的。</strong>这一点是很多人观念中缺失的，测试代码也是代码，也要按照代码的标准去维护。这就意味着你的测试代码也要写得清晰，比如良好的命名、把函数写小、要重构甚至要抽象出测试的基础库、测试的模式。在 Web 测试中常见的 <a href=\"https://martinfowler.com/bliki/PageObject.html\">PageObject 模式</a>，就是这种理念的延伸。</p><p>有一点我准备多说几句，就是测试的命名。很多人写代码时，知道要取一个有意义的命名，但在测试上常常忽略这一点，我们经常可以看到 test1、test2这样的测试命名。那测试应该怎么命名呢？</p><p>我不知道你是否注意到了，我在实战中写的测试，其命名与传统的 Java 函数有着很大的区别。首先，我用了下划线区隔单词，而没有采用驼峰命名；其次，名字都很长；再有，所有的测试都是以 should 开头。</p><p>我为什么要这么写呢？其实，我是希望在测试名中把测试用例的场景给描述出来。换言之，这个测试名不是一个简单的名字，而是一句话，这样测试的名字就会很长。而一旦名字太长，用驼峰阅读起来就不那么舒服了，所以，我采用了下划线区隔。</p><p>我对测试的命名主要有两种：</p><ul>\n<li>should_测试场景；</li>\n<li>should_测试效果_while_测试条件。</li>\n</ul><p>第一种命名表示应该做成什么样子，比如，should_add_todo_item，一般来说，对于一个正常情况的测试用例，我会这么命名。第二种情况则表示在什么条件下，应该出现什么效果，比如，should_throw_exception_while_parameter_is_empty，可以用来描述各种异常的情况。你会看到这两种命名方法其实都是写了一句话，而之所以会用 should 开头，它表示这个测试“应该”是什么样的。</p><p>有一些测试框架在测试描述上做得更加进一步，看上去就更像一句话了，下面是一个例子。</p><pre><code>it.should(&quot;throw exception while parameter is empty&quot;, () -&gt; {\n  ...\n});\n</code></pre><p>经过这一讲的介绍，相信你对一个好的测试应该长成什么样已经有了一个初步的认识，但知道了好测试长什么样，只能帮助你发现测试中存在的问题。下一讲，我们接着来讨论一个影响写好测试的关键因素：软件设计。</p><h2>总结时刻</h2><p>这一讲，我们讨论了一个好的测试应该是什么样子的。一个好的测试首先应该是简单的，否则，我们无法保证测试的正确性。</p><p>我们还谈到了测试的基本结构：准备、执行、断言和清理。其中，核心的部分是执行和断言。一个测试既不能执行太多的东西，也不能没有断言。</p><p>怎么衡量测试是否做好了呢？有一个标准：A-TRIP，这是五个单词的缩写，分别是 Automatic（自动化）、Thorough（全面的）、Repeatable（可重复的）、Independent（独立的）和 Professional（专业的）。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>编写简单的测试</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/f0/773b081cc5f73803bfd472be2bf57cf0.jpg?wh=2000x1193\" alt=\"\"></p><h2>思考题</h2><p>用今天讲到好测试的原则去对比一下你的测试，你会发现哪些问题呢？欢迎在留言区分享你的发现。</p>","neighbors":{"left":{"article_title":"04 | 自动化测试：为什么程序员做测试其实是有优势的？","id":406711},"right":{"article_title":"06 | 测试不好做，为什么会和设计有关系？","id":408187}},"comments":[{"had_liked":false,"id":308892,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1629854113,"is_pvip":false,"replies":[{"id":"111811","content":"这个总结很漂亮","user_name":"作者回复","comment_id":308892,"uid":"1258861","ip_address":"","utype":1,"ctime":1629856485,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"27399657889","product_id":100085101,"comment_content":"测试四步走：准备、执行、 断言、清理<br>测试五标准：自动化、全面的、可重复的、独立的、专业的<br>测试起名：应该怎么怎么样，应该怎么怎么样 当什么条件出现的时候","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525669,"discussion_content":"这个总结很漂亮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629856485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005290,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","nickname":"giteebravo","note":"","ucode":"C087E8D6B5A98B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549930,"discussion_content":"\n到位！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644301393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307232,"user_name":"إ并向你招手إ祥子","can_delete":false,"product_type":"c1","uid":1075814,"ip_address":"","ucode":"8932581792DF15","user_header":"https://static001.geekbang.org/account/avatar/00/10/6a/66/da6024e4.jpg","comment_is_top":false,"comment_ctime":1628955403,"is_pvip":false,"replies":[{"id":"111290","content":"多谢分享","user_name":"作者回复","comment_id":307232,"uid":"1258861","ip_address":"","utype":1,"ctime":1629076503,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"27398759179","product_id":100085101,"comment_content":"Junit5  的@DisplayName 注解，可以文档化测试的内容，用它说明测试的内容和条件可以让测试更友好一些","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525087,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629076503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307776,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1629252551,"is_pvip":false,"replies":[{"id":"111893","content":"很好的总结","user_name":"作者回复","comment_id":307776,"uid":"1258861","ip_address":"","utype":1,"ctime":1629940566,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14514154439","product_id":100085101,"comment_content":"郑老师对测试理解的很到位，提到的几个理念都非常的准确，而且还做了很精炼的总结，真给力。<br><br>1、每一条测试的测试目的必须非常准确，比如我之前推荐的测试用例写法就是「验证XXXX」，测试目的一目了然；<br><br>2、每一条测试的测试目的必须唯一，越简单越好，这对于测试执行和测试维护都大有裨益；<br><br>3、一般测试会包含 4 个阶段：准备、执行、断言、清理，这是从自动化测试的角度做的总结，也一样适用于手工测试；<br><br>4、一个好的自动化测试用例的 5 个特点：Automatic（自动化）、Thorough（全面的）、Repeatable（可重复的）、Independent（独立的）和 Professional（专业的）；<br><br>5、重点说一下 Independent，每条测试用例之间，尽量降低耦合性，这样对于测试用例的理解和执行，都大有裨益；<br><br>以上，期待老师后续的精彩分享。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525284,"discussion_content":"很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307443,"user_name":"大茄子实验室","can_delete":false,"product_type":"c1","uid":1853219,"ip_address":"","ucode":"D0BCB5AB51863A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/47/23/c471aace.jpg","comment_is_top":false,"comment_ctime":1629105320,"is_pvip":false,"replies":[{"id":"111374","content":"多谢分享","user_name":"作者回复","comment_id":307443,"uid":"1258861","ip_address":"","utype":1,"ctime":1629240781,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"14514007208","product_id":100085101,"comment_content":"背景：从事数仓开发，没有对应的测试人员，也没有使用过测试框架。一般都是自己写测试脚本进行比对<br>测试后，清理会延迟做，因为一天的数据对，不代表每天的数据对，备份数据会保留一段时间。<br>问题：<br>1.命名比较随意。<br>2.测试有时候不是独立的<br>3.全面性比较难做到，第一，有可能是开发人员对所有的业务场景没有全面了解。<br>第二呢，是用户本身对业务场景没有做到全面了解","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525150,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629240781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307032,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1628834304,"is_pvip":false,"replies":[{"id":"111198","content":"把业务和技术实现隔离开，单独测业务，再单独测通信。","user_name":"作者回复","comment_id":307032,"uid":"1258861","ip_address":"","utype":1,"ctime":1628855147,"user_name_real":"郑晔"}],"discussion_count":2,"race_medal":0,"score":"14513736192","product_id":100085101,"comment_content":"請問那種協議交互的場景：來回幾個消息的ㄧ系列過程，用什麼結構好？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525025,"discussion_content":"把业务和技术实现隔离开，单独测业务，再单独测通信。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628855147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074465,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","nickname":"davix","note":"","ucode":"CBFB39BAD7938B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388641,"discussion_content":"如果協議就是業務呢？比如實現一個openid client 或 tcp協議","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628864637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320616,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1636422461,"is_pvip":false,"replies":[{"id":"116448","content":"TestNG 是 JUnit 没升级到 Java 5 语法之前的产物，后来，JUnit 5 升级了，TestNg 也没有太多本质性的创新，路就难走了。","user_name":"作者回复","comment_id":320616,"uid":"1258861","ip_address":"","utype":1,"ctime":1636599412,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10226357053","product_id":100085101,"comment_content":"TestNG有提供按测试方法顺序执行的注解，开始觉得好厉害，后来发现这样依赖执行顺序的测试耦合性太强了，前面的测试没通过，后面的就无法执行了，现在的测试代码都是像老师说的这样可以独立运行，也回归到了JUnit5，TestNG文档还停留在2000年","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530064,"discussion_content":"TestNG 是 JUnit 没升级到 Java 5 语法之前的产物，后来，JUnit 5 升级了，TestNg 也没有太多本质性的创新，路就难走了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636599412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312046,"user_name":"就叫Hugo也行","can_delete":false,"product_type":"c1","uid":1118448,"ip_address":"","ucode":"73B41EDDA45D24","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/f0/12f043cb.jpg","comment_is_top":false,"comment_ctime":1631604488,"is_pvip":false,"replies":[{"id":"113093","content":"这个联想很漂亮，是这么回事。","user_name":"作者回复","comment_id":312046,"uid":"1258861","ip_address":"","utype":1,"ctime":1631661843,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"10221539080","product_id":100085101,"comment_content":"测试的基本结构：我联想到戴明PDCA质量环","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526840,"discussion_content":"这个联想很漂亮，是这么回事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631661843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307528,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1629131297,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10219065889","product_id":100085101,"comment_content":"举例：一个对象有如下两个方法<br><br>write(p []byte)(n int, err error) 将byte数组p写入对象，返回写入的byte个数n及在此过程中可能出现的错误err<br>read(q []byte)(n int, err error)将对象内容写入byte数组q，返回写入的byte个数n及在此过程中可能出现的错误<br><br>对于这对“互逆”操作如何测试？是否可以写在同一测试用例中？<br><br>方案一:<br>对write返回的err写一个测试，<br>对read返回的err写一个测试，<br>将write和read写在同一个测试中验证正常情况，同时验证p.length == n&amp;&amp;err==nil，q.length == n&amp;&amp;err==nil，p的内容与q的内容相同。<br>共三个测试<br><br>方案二:<br>对write返回的err写一个测试，<br>对read返回的err写一个测试，<br>对write返回的n写一个测试，只验证p.length == n&amp;&amp;err==nil<br>对read返回的n写一个测试，只验证q.length == n&amp;&amp;err==nil<br>共四个测试<br><br>方案三:<br>方案二的全部测试，<br>及方案一的最后测试。<br>共五个测试<br><br>我通常选方案一，但将两个测试目标写在了同一个用例中。","like_count":3},{"had_liked":false,"id":307128,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1628901060,"is_pvip":false,"replies":[{"id":"111323","content":"这取决于团队对于英文水平的要求","user_name":"作者回复","comment_id":307128,"uid":"1258861","ip_address":"","utype":1,"ctime":1629113601,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"5923868356","product_id":100085101,"comment_content":"我喜欢有时候用中文命名测试方法，感觉更容易阅读理解","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525053,"discussion_content":"这取决于团队对于英文水平的要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629113601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306954,"user_name":"腾挪","can_delete":false,"product_type":"c1","uid":1003853,"ip_address":"","ucode":"E80661F2235344","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/4d/0aceadde.jpg","comment_is_top":false,"comment_ctime":1628788516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923755812","product_id":100085101,"comment_content":"👍","like_count":1},{"had_liked":false,"id":347949,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1654597110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654597110","product_id":100085101,"comment_content":"编写简单的测试--记下来","like_count":0},{"had_liked":false,"id":325457,"user_name":"晴天了","can_delete":false,"product_type":"c1","uid":1359669,"ip_address":"","ucode":"5310E02F8DF1F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg","comment_is_top":false,"comment_ctime":1638961758,"is_pvip":false,"replies":[{"id":"118170","content":"最直截了当的就是Mock B的方法。","user_name":"作者回复","comment_id":325457,"uid":"1258861","ip_address":"","utype":1,"ctime":1639127253,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638961758","product_id":100085101,"comment_content":"有个问题问下郑大<br><br>new a(new b(new c)) <br><br>背景逻辑: a类的aa方法, 调用外部依赖b类的bb方法, b类的bb方法, 调用外部依赖c类的cc方法.<br><br>问题: 当测试 a类的aa方法时, 应该mock b的bb方法, 还是mock c类的cc方法??","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537638,"discussion_content":"最直截了当的就是Mock B的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639127253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309494,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1630168372,"is_pvip":false,"replies":[{"id":"112159","content":"好样的","user_name":"作者回复","comment_id":309494,"uid":"1258861","ip_address":"","utype":1,"ctime":1630304509,"user_name_real":"郑晔"}],"discussion_count":1,"race_medal":0,"score":"1630168372","product_id":100085101,"comment_content":"周末来学习","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525899,"discussion_content":"好样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630304509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}