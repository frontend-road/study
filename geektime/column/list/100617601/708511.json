{"id":708511,"title":"13｜代理（下）：结构化工具对话、Self-Ask with Search以及Plan and execute代理","content":"<p>你好，我是黄佳，欢迎来到LangChain实战课！</p><p>在上一讲中，我们深入LangChain程序内部机制，探索了AgentExecutor究竟是如何思考（Thought）、执行（Execute/Act）和观察（Observe）的，这些步骤之间的紧密联系就是代理在推理（Reasoning）和工具调用过程中的“生死因果”。</p><p>现在我们趁热打铁，再学习几种更为复杂的代理：Structured Tool Chat（结构化工具对话）代理、Self-Ask with Search（自主询问搜索）代理、Plan and execute（计划与执行） 代理。</p><h2>什么是结构化工具</h2><p>LangChain的第一个版本是在 2022 年 11 月推出的，当时的设计是基于 ReAct 论文构建的，主要围绕着代理和工具的使用，并将二者集成到提示模板的框架中。</p><p>早期的工具使用十分简单，AgentExecutor引导模型经过推理调用工具时，仅仅能够生成两部分内容：一是工具的名称，二是输入工具的内容。而且，在每一轮中，代理只被允许使用一个工具，并且输入内容只能是一个简单的字符串。这种简化的设计方式是为了让模型的任务变得更简单，因为进行复杂的操作可能会使得执行过程变得不太稳定。</p><!-- [[[read_end]]] --><p>不过，随着语言模型的发展，尤其是出现了如 gpt-3.5-turbo 和 GPT-4 这样的模型，推理能力逐渐增强，也为代理提供了更高的稳定性和可行性。这就使得 LangChain 开始考虑放宽工具使用的限制。</p><p>2023年初，LangChain 引入了“多操作”代理框架，允许代理计划执行多个操作。在此基础上，LangChain 推出了结构化工具对话代理，允许更复杂、多方面的交互。通过指定AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION 这个代理类型，代理能够调用包含一系列复杂工具的“<strong>结构化工具箱</strong>”，组合调用其中的多个工具，完成批次相关的任务集合。</p><p>举例来说，结构化工具的示例包括：</p><ol>\n<li>文件管理工具集：支持所有文件系统操作，如写入、搜索、移动、复制、列目录和查找。</li>\n<li>Web 浏览器工具集：官方的 PlayWright 浏览器工具包，允许代理访问网站、点击、提交表单和查询数据。</li>\n</ol><p>下面，我们就以 PlayWright 工具包为例，来实现一个结构化工具对话代理。</p><p>先来看一看什么是 PlayWright 工具包。</p><h2>什么是 Playwright</h2><p>Playwright是一个开源的自动化框架，它可以让你模拟真实用户操作网页，帮助开发者和测试者自动化网页交互和测试。用简单的话说，它就像一个“机器人”，可以按照你给的指令去浏览网页、点击按钮、填写表单、读取页面内容等等，就像一个真实的用户在使用浏览器一样。</p><p>Playwright支持多种浏览器，比如Chrome、Firefox、Safari等，这意味着你可以用它来测试你的网站或测试应用在不同的浏览器上的表现是否一致。</p><p>下面我们先用 <code>pip install playwright</code> 安装Playwright工具。</p><p>不过，如果只用pip安装Playwright工具安装包，就使用它，还不行，会得到下面的信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/c7/5cb10de270599b427a4efa9655ceb1c7.jpg?wh=465x134\" alt=\"\"></p><p>因此我们还需要通过 <code>playwright install</code> 命令来安装三种常用的浏览器工具。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/6d/335f98d28232d1a7160f1d48f334d56d.jpg?wh=1822x359\" alt=\"\"></p><p>现在，一切就绪，我们可以通过Playwright浏览器工具来访问一个测试网页。</p><pre><code class=\"language-plain\">from playwright.sync_api import sync_playwright\n\ndef run():\n&nbsp; &nbsp; # 使用Playwright上下文管理器\n&nbsp; &nbsp; with sync_playwright() as p:\n&nbsp; &nbsp; &nbsp; &nbsp; # 使用Chromium，但你也可以选择firefox或webkit\n&nbsp; &nbsp; &nbsp; &nbsp; browser = p.chromium.launch()\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 创建一个新的页面\n&nbsp; &nbsp; &nbsp; &nbsp; page = browser.new_page()\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 导航到指定的URL\n&nbsp; &nbsp; &nbsp; &nbsp; page.goto('https://langchain.com/')\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 获取并打印页面标题\n&nbsp; &nbsp; &nbsp; &nbsp; title = page.title()\n&nbsp; &nbsp; &nbsp; &nbsp; print(f\"Page title is: {title}\")\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; # 关闭浏览器\n&nbsp; &nbsp; &nbsp; &nbsp; browser.close()\n\nif __name__ == \"__main__\":\n&nbsp; &nbsp; run()\n</code></pre><p>这个简单的Playwright脚本，它打开了一个新的浏览器实例。过程是：导航到指定的URL；获取页面标题并打印页面的标题；最后关闭浏览器。</p><p>输出如下：</p><pre><code class=\"language-plain\">Page title is: LangChain\n</code></pre><p>这个脚本展示了Playwright的工作方式，一切都是在命令行里面直接完成。它不需要我们真的去打开Chome网页，然后手工去点击菜单栏、拉动进度条等。</p><p>下面这个表，我列出了使用命令行进行自动化网页测试的优势。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/20/0a5909f879b043b5f17d7c8ea5a88a20.jpg?wh=1130x955\" alt=\"\"></p><p>现在你了解了Playwright这个工具包的基本思路，下面我们就开始使用它来作为工具集，来实现结构化工具对话代理。</p><h2>使用结构化工具对话代理</h2><p>在这里，我们要使用的Agent类型是STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION。要使用的工具则是PlayWrightBrowserToolkit，这是LangChain中基于PlayWrightBrowser包封装的工具箱，它继承自 BaseToolkit类。</p><p>PlayWrightBrowserToolkit 为 PlayWright 浏览器提供了一系列交互的工具，可以在同步或异步模式下操作。</p><p>其中具体的工具就包括：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/46/ce51ayya392733c6b55ec3568caaac46.jpg?wh=1666x725\" alt=\"\"></p><p>下面，我们就来看看结构化工具对话代理是怎样通过组合调用PlayWrightBrowserToolkit中的各种工具，自动完成我们交给它的任务。</p><pre><code class=\"language-plain\">from langchain.agents.agent_toolkits import PlayWrightBrowserToolkit\nfrom langchain.tools.playwright.utils import create_async_playwright_browser\n\nasync_browser = create_async_playwright_browser()\ntoolkit = PlayWrightBrowserToolkit.from_browser(async_browser=async_browser)\ntools = toolkit.get_tools()\nprint(tools)\n\nfrom langchain.agents import initialize_agent, AgentType\nfrom langchain.chat_models import ChatAnthropic, ChatOpenAI\n\n# LLM不稳定，对于这个任务，可能要多跑几次才能得到正确结果\nllm = ChatOpenAI(temperature=0.5)  \n\nagent_chain = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n\nasync def main():\n    response = await agent_chain.arun(\"What are the headers on python.langchain.com?\")\n    print(response)\n\nimport asyncio\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n</code></pre><p>在这个示例中，我们询问大模型，网页python.langchain.com中有哪些标题目录？</p><p>很明显，大模型不可能包含这个网页的内部信息，因为ChatGPT完成训练的那一年（2021年9月），LangChain还不存在。因此，大模型不可避免地需要通过PlayWrightBrowser工具来解决问题。</p><h3>第一轮思考</h3><p>代理进入AgentExecutor Chain之后的第一轮思考如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/02/6a5718eef084ac988a23e5488e967302.jpg?wh=1465x162\" alt=\"\"></p><p>这里，我对上述思考做一个具体说明。</p><blockquote>\n<p>I can use the “navigate_browser” tool to visit the website and then use the “get_elements” tool to retrieve the headers. Let me do that.</p>\n</blockquote><p><span class=\"orange\">这是第一轮思考，大模型知道自己没有相关信息，决定使用PlayWrightBrowserToolkit工具箱中的 navigate_browser 工具。</span></p><blockquote>\n<p>Action:```{“action”: “navigate_browser”, “action_input”: {“url”:  “<a href=\"https://python.langchain.com\">https://python.langchain.com</a>”}}```</p>\n</blockquote><p><span class=\"orange\">行动：通过Playwright浏览器访问这个网站。</span></p><blockquote>\n<p>Observation: Navigating to <a href=\"https://python.langchain.com\">https://python.langchain.com</a> returned status code 200</p>\n</blockquote><p><span class=\"orange\">观察：成功得到浏览器访问的返回结果。</span></p><p>在第一轮思考过程中，模型决定使用PlayWrightBrowserToolkit中的navigate_browser工具。</p><h3>第二轮思考</h3><p>下面是大模型的第二轮思考。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/e5/663de1fda23de782af9233328ca5c2e5.jpg?wh=1473x298\" alt=\"\"></p><p>还是对上述思考做一个具体说明。</p><blockquote>\n<p>Thought:Now that I have successfully navigated to the website, I can use the “get_elements” tool to retrieve the headers. I will specify the CSS selector for the headers and retrieve their text.</p>\n</blockquote><p><span class=\"orange\">第二轮思考：模型决定使用PlayWrightBrowserToolkit工具箱中的另一个工具 get_elements，并且指定CSS selector只拿标题的文字。</span></p><blockquote>\n<p>Action: ```{“action”: “get_elements”, “action_input”: {“selector”: “h1, h2, h3, h4, h5, h6”, “attributes”: [“innerText”]}}```</p>\n</blockquote><p><span class=\"orange\">行动：用Playwright的 get_elements 工具去拿网页中各级标题的文字。</span></p><blockquote>\n<p>Observation: [{“innerText”: “Introduction”}, {“innerText”: “Get started​”}, {“innerText”: “Modules​”}, {“innerText”: “Model I/O​”}, {“innerText”: “Data connection​”}, {“innerText”: “Chains​”}, {“innerText”: “Agents​”}, {“innerText”: “Memory​”}, {“innerText”: “Callbacks​”}, {“innerText”: “Examples, ecosystem, and resources​”}, {“innerText”: “Use cases​”}, {“innerText”: “Guides​”}, {“innerText”: “Ecosystem​”}, {“innerText”: “Additional resources​”}, {“innerText”: “Support”}, {“innerText”: “API reference​”}]</p>\n</blockquote><p><span class=\"orange\">观察：成功地拿到了标题文本。</span></p><p>在第二轮思考过程中，模型决定使用PlayWrightBrowserToolkit中的get_elements工具。</p><h3>第三轮思考</h3><p>下面是大模型的第三轮思考。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/6d/01e427d582973da438c67940f132166d.jpg?wh=1456x906\" alt=\"\"></p><p>对上述思考做一个具体说明。</p><blockquote>\n<p>Thought:The headers on python.langchain.com are:<br>\n&nbsp;</p>\n<ol>\n<li>Introduction<br>\n… …</li>\n<li>API reference</li>\n</ol>\n</blockquote><p><span class=\"orange\">第三轮思考：模型已经找到了网页中的所有标题。</span></p><blockquote>\n<p>Action:</p>\n<pre><code>{\n  &quot;action&quot;: &quot;Final Answer&quot;,\n  &quot;action_input&quot;: &quot;The headers on python.langchain.com are: 1. Introduction 2. Get started 3. Modules 4. Model I/O 5. Data connection 6. Chains 7. Agents 8. Memory 9. Callbacks 10. Examples, ecosystem, and resources 11. Use cases 12. Guides 13. Ecosystem 14. Additional resources 15. Support 16. API reference&quot;\n}\n</code></pre>\n</blockquote><p><span class=\"orange\">行动：给出最终答案。</span></p><p>AgentExecutor Chain结束之后，成功输出python.langchain.com这个页面中各级标题的具体内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/63/961a5c0cc2b9c19d7147b2120608a663.jpg?wh=1462x126\" alt=\"\"></p><p>在这个过程中，结构化工具代理组合调用了Playwright工具包中的两种不同工具，自主完成了任务。</p><h2>使用 Self-Ask with Search 代理</h2><p>讲完了Structured Tool Chat代理，我们再来看看Self-Ask with Search代理。</p><p>Self-Ask with Search 也是LangChain中的一个有用的代理类型（SELF_ASK_WITH_SEARCH）。它利用一种叫做 “Follow-up Question（追问）”加“Intermediate Answer（中间答案）”的技巧，来辅助大模型寻找事实性问题的过渡性答案，从而引出最终答案。</p><p>这是什么意思？让我通过示例来给你演示一下，你就明白了。在这个示例中，我们使用SerpAPIWrapper作为工具，用OpenAI作为语言模型，创建Self-Ask with Search代理。</p><pre><code class=\"language-plain\">from langchain import OpenAI, SerpAPIWrapper \nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\n\nllm = OpenAI(temperature=0)\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Intermediate Answer\", \n        func=search.run,\n        description=\"useful for when you need to ask with search\",\n    )\n]\n\nself_ask_with_search = initialize_agent(\n    tools, llm, agent=AgentType.SELF_ASK_WITH_SEARCH, verbose=True\n)\nself_ask_with_search.run(\n    \"使用玫瑰作为国花的国家的首都是哪里?\"  \n)\n</code></pre><p>该代理对于这个问题的输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/0d/dd6dcfa6c90384abc80640fe5ea1850d.jpg?wh=1413x418\" alt=\"\"></p><p>其实，细心的你可能会发现，“<strong>使用玫瑰作为国花的国家的首都是哪里?</strong>”这个问题不是一个简单的问题，它其实是一个多跳问题——<strong>在问题和最终答案之间，存在中间过程</strong>。</p><p>多跳问题（Multi-hop question）是指为了得到最终答案，需要进行多步推理或多次查询。这种问题不能直接通过单一的查询或信息源得到答案，而是需要跨越多个信息点，或者从多个数据来源进行组合和整合。</p><p>也就是说，问题的答案依赖于另一个子问题的答案，这个子问题的答案可能又依赖于另一个问题的答案。这就像是一连串的问题跳跃，对于人类来说，解答这类问题可能需要从不同的信息源中寻找一系列中间答案，然后结合这些中间答案得出最终结论。</p><p>“使用玫瑰作为国花的国家的首都是哪里？”这个问题并不直接询问哪个国家使用玫瑰作为国花，也不是直接询问英国的首都是什么。而是先要推知使用玫瑰作为国花的国家（英国）之后，进一步询问这个国家的首都。这就需要多跳查询。</p><p>为什么 Self-Ask with Search 代理适合解决多跳问题呢？有下面几个原因。</p><ol>\n<li><strong>工具集合</strong>：代理包含解决问题所必须的搜索工具，可以用来查询和验证多个信息点。这里我们在程序中为代理武装了SerpAPIWrapper工具。</li>\n<li><strong>逐步逼近</strong>：代理可以根据第一个问题的答案，提出进一步的问题，直到得到最终答案。这种逐步逼近的方式可以确保答案的准确性。</li>\n<li><strong>自我提问与搜索</strong>：代理可以自己提问并搜索答案。例如，首先确定哪个国家使用玫瑰作为国花，然后确定该国家的首都是什么。</li>\n<li><strong>决策链</strong>：代理通过一个决策链来执行任务，使其可以跟踪和处理复杂的多跳问题，这对于解决需要多步推理的问题尤为重要。</li>\n</ol><p>在上面的例子中，通过大模型的两次follow-up追问，搜索工具给出了两个中间答案，最后给出了问题的最终答案——伦敦。</p><h2>使用 Plan and execute 代理</h2><p>在这节课的最后，我再给你介绍一种比较新的代理类型：Plan and execute 代理。</p><p>计划和执行代理通过首先计划要做什么，然后执行子任务来实现目标。这个想法是受到 <a href=\"https://arxiv.org/abs/2305.04091\">Plan-and-Solve</a> 论文的启发。论文中提出了计划与解决（Plan-and-Solve）提示。它由两部分组成：首先，制定一个计划，并将整个任务划分为更小的子任务；然后按照该计划执行子任务。</p><p>这种代理的独特之处在于，它的计划和执行不再是由同一个代理所完成，而是：</p><ul>\n<li>计划由一个大语言模型代理（负责推理）完成。</li>\n<li>执行由另一个大语言模型代理（负责调用工具）完成。</li>\n</ul><p>因为这个代理比较新，它隶属于LangChain的实验包langchain_experimental，所以你需要先安装langchain_experimental这个包。</p><pre><code class=\"language-plain\">pip install -U langchain langchain_experimental\n</code></pre><p>下面我们来使用一下这个代理。在这里，我们创建了Plan and execute代理，这个代理和之前看到的代理不同，它有一个Planner，有一个Executor，它们可以是不同的模型。</p><p>当然，在这个示例中，我们都使用了ChatOpenAI模型。</p><pre><code class=\"language-plain\">from langchain.chat_models import ChatOpenAI\nfrom langchain_experimental.plan_and_execute import PlanAndExecute, load_agent_executor, load_chat_planner\nfrom langchain.llms import OpenAI\nfrom langchain import SerpAPIWrapper\nfrom langchain.agents.tools import Tool\nfrom langchain import LLMMathChain\n\nsearch = SerpAPIWrapper()\nllm = OpenAI(temperature=0)\nllm_math_chain = LLMMathChain.from_llm(llm=llm, verbose=True)\ntools = [\n    Tool(\n        name = \"Search\",\n        func=search.run,\n        description=\"useful for when you need to answer questions about current events\"\n    ),\n    Tool(\n        name=\"Calculator\",\n        func=llm_math_chain.run,\n        description=\"useful for when you need to answer questions about math\"\n    ),\n]\nmodel = ChatOpenAI(temperature=0)\nplanner = load_chat_planner(model)\nexecutor = load_agent_executor(model, tools, verbose=True)\nagent = PlanAndExecute(planner=planner, executor=executor, verbose=True)\n\nagent.run(\"在纽约，100美元能买几束玫瑰?\")\n</code></pre><p>输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/38/fd28e5f19a6a8b8ef9c4d68b3e5c0d38.jpg?wh=1526x1345\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/8e/b2/8ea16266717acf88a2fedb72283744b2.jpg?wh=1516x1618\" alt=\"\"></p><p>在上面输出中，PlanAndExecute 链的调用流程以及代理的思考过程，我就留给你来做分析了，相信你可以把握住Plan and execute代理解决问题的基本脉络。</p><h2>总结时刻</h2><p>这节课是Agent的最后一课，也是LangChain所有基础知识的最后一课。我给你总结了两张的表。</p><p>第一个表，是LangChain中常见的代理类型和它们的介绍。在这些代理中，有很多我们已经一起使用过了，有些则需要你自己去阅读相关文档，自己去探索它的使用方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/ae/ee248367eef96616690831498519eeae.jpg?wh=1672x724\" alt=\"\"></p><p>第二个表，是我对LangChain各个组件的一个简明总结。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/de/e26993dd3957bfd2947424abb9de7cde.png?wh=1965x1363\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/57/d9/577333985abb70b890d94bf99fe58ed9.jpg?wh=1101x628\" alt=\"\"></p><p>上面这个图片，相信此时你已经不再陌生了，也掌握了它们的精髓所在。</p><p>最后还有一个问题值得讲一讲，就是图中的 Indexes，到底是什么，其实这个Indexes是LangChang早期版本的一个组件，现在已经被整合到Retrieval（数据检索）这个单元中了。而Retrieval（包括Indexes），讲的其实就是如何把离散的文档及其他信息做嵌入，存储到向量数据库中，然后再提取的过程。这个过程我们在<a href=\"https://time.geekbang.org/column/article/699451\">第3课</a>已经讲过，在后面的课程中还会再深入介绍。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/90/e3yyf61d8ccc0b2ba47a76dfc1fdf190.jpg?wh=767x646\" alt=\"\" title=\"LangChain 的 6 大组件（新）\"></p><p>此外，在LangChain文档中，新的6大组件中其实还有一个模块——Callbacks，目前我们尚未涉及，在后续的课程中也会介绍。</p><p>好了，LangChain的基础知识就讲到这里，从下节课起，我们将整合以前学过的各个组件的内容，为你讲解更多偏重具体应用的内容。</p><h2>思考题</h2><ol>\n<li>在结构化工具对话代理的示例中，请你打印出PlayWrightBrowserToolkit中的所有具体工具名称的列表。</li>\n</ol><p><span class=\"orange\">提示：</span></p><pre><code class=\"language-plain\">tools = toolkit.get_tools()\nprint(tools)\n</code></pre><ol start=\"2\">\n<li>在Plan and execute代理的示例中，请你分析PlanAndExecute、AgentExecutor和LLMMathChain链的调用流程以及代理的思考过程。</li>\n</ol><p>期待在留言区看到你的分享，如果你觉得内容对你有帮助，也欢迎分享给有需要的朋友！最后如果你学有余力，可以进一步学习下面的延伸阅读。</p><h2>延伸阅读</h2><ol>\n<li>代码 Github <a href=\"https://github.com/microsoft/playwright\">Playwright</a> 工具包</li>\n<li>论文<a href=\"https://arxiv.org/abs/2305.04091\">\"计划与解决\"提示：通过大型语言模型改进Zero-Shot链式思考推理</a> Wang, L., Xu, W., Lan, Y., Hu, Z., Lan, Y., Lee, R. K.-W., &amp; Lim, E.-P. (2023). Plan-and-Solve Prompting: Improving Zero-Shot Chain-of-Thought Reasoning by Large Language Models. arXiv preprint arXiv:2305.04091.</li>\n</ol><h2>放假通知</h2><p>相信细心的同学已经发现了，我们这个专栏的更新节奏还是很快的，前面的内容基本接近工作日日更。从内容的重要程度来说，基础篇其实相当重要，值此中秋&amp;国庆双节长假来临之际，希望大家能好好休息，也能空出一段时间好好复习前面所学，所以我们的专栏计划停更一周，10月9日恢复正常更新，也期待你能把前面的思考题都做一做，我会在留言区等你的分享，与你交流探讨。最后祝大家小长假愉快，中秋阖家团圆！</p>","comments":[{"had_liked":false,"id":381856,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"重庆","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1696034132,"is_pvip":true,"replies":[{"id":139086,"content":"中秋快乐！🏮","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696057017,"ip_address":"新加坡","comment_id":381856,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师节日快乐。","like_count":4,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628865,"discussion_content":"中秋快乐！🏮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696057018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384022,"user_name":"Geek_617b3f","can_delete":false,"product_type":"c1","uid":3781845,"ip_address":"广东","ucode":"31EF9E8859EA1B","user_header":"","comment_is_top":false,"comment_ctime":1700115826,"is_pvip":false,"replies":[{"id":140176,"content":"对了对了，同学正解。\nReAct 更注重过程中的动态调整和信息接收，适用于那些需要根据不断变化的信息来调整策略的任务。\nPlan and Execute 则更注重一开始的全面规划，适用于那些一开始就能获得所有必要信息，并需要一次性制定完整计划的任务。\n无论是ReAct框架还是Plan and Execute策略，都可以被视为思维链的一部分。它们只是思维链在不同任务中的具体表现形式。\n没说Plan and execute是一个更灵活的，更好的。新倒是新，所以在LangChain实验库里面，我写文章时候，还没有正式发布。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1700579739,"ip_address":"瑞士","comment_id":384022,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师请问下，ReAct框架的原理是：”大语言模型可以通过生成推理痕迹和任务特定行动来实现更大的协同作用。引导模型生成一个任务解决轨迹：观察环境 - 进行思考 - 采取行动，也就是观察 - 思考 - 行动。那么，再进一步进行简化，就变成了推理 - 行动，也就是 Reasoning-Acting 框架。“ \n那么Plan and execute的方式对做Plan的那个大模型的要求不是更高么？因为做计划的那个大模型，直接就根据问题做计划了，过程中没有接收任何反馈，不像ReAct方式那样，中间是接收一些信息的。\n另外这个做计划的过程，不是思维链的过程么，还是有什么区别呢？\n所以…… 不是很理解为何Plan and execute是一个更灵活、更新的一种方式。还请老师答疑解惑，谢谢！","like_count":3,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632220,"discussion_content":"对了对了，同学正解。\nReAct 更注重过程中的动态调整和信息接收，适用于那些需要根据不断变化的信息来调整策略的任务。\nPlan and Execute 则更注重一开始的全面规划，适用于那些一开始就能获得所有必要信息，并需要一次性制定完整计划的任务。\n无论是ReAct框架还是Plan and Execute策略，都可以被视为思维链的一部分。它们只是思维链在不同任务中的具体表现形式。\n没说Plan and execute是一个更灵活的，更好的。新倒是新，所以在LangChain实验库里面，我写文章时候，还没有正式发布。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700579739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052038,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0d/86/84984798.jpg","nickname":"唐明","note":"","ucode":"D6848B63EE2764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":643194,"discussion_content":"我认为Plan and execute适合这样一种场景。大模型擅长于推理与规划，但是成本高，性能差。一些专有任务可以通过对小模型进行微调的方式来训练出一些专有小模型(在hugging face上有大量专有小模型)，这类专有小模型在专有任务方面相对于大模型的成本要低，性能也更好。基于以上考虑，使用大模型来规划，专有小模型来执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714119356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381810,"user_name":"抽象派","can_delete":false,"product_type":"c1","uid":2599971,"ip_address":"广东","ucode":"6879F90CB702FC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/YflLdCdbUAkfr9LPzF50EibDrMxBibPicQ5NNAETaPP0ytTmuR3h6QNichDMhDbR2XelSIXpOrPwbiaHgBkMJYOeULA/132","comment_is_top":false,"comment_ctime":1695890121,"is_pvip":false,"replies":[{"id":139088,"content":"同学我在Github上更新了代码，你用我的代码跑一遍，看看是否仍出错。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696059048,"ip_address":"新加坡","comment_id":381810,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"使用结构化工具对话代理的实例代码报错，请问怎么改？。具体输出如下：\nTraceback (most recent call last):\n  File &quot;&#47;Users&#47;abc&#47;project&#47;python&#47;learnlangchain&#47;struct_tool.py&quot;, line 17, in &lt;module&gt;\n    agent_chain = initialize_agent(\n                  ^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;agents&#47;initialize.py&quot;, line 57, in initialize_agent\n    agent_obj = agent_cls.from_llm_and_tools(\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;agents&#47;structured_chat&#47;base.py&quot;, line 132, in from_llm_and_tools\n    _output_parser = output_parser or cls._get_default_output_parser(llm=llm)\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;agents&#47;structured_chat&#47;base.py&quot;, line 65, in _get_default_output_parser\n    return StructuredChatOutputParserWithRetries.from_llm(llm=llm)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;agents&#47;structured_chat&#47;output_parser.py&quot;, line 82, in from_llm\n    output_fixing_parser = OutputFixingParser.from_llm(\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;output_parsers&#47;fix.py&quot;, line 45, in from_llm\n    return cls(parser=parser, retry_chain=chain)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;&#47;opt&#47;homebrew&#47;lib&#47;python3.11&#47;site-packages&#47;langchain&#47;load&#47;serializable.py&quot;, line 74, in __init__\n    super().__init__(**kwargs)\n  File &quot;pydantic&#47;main.py&quot;, line 339, in pydantic.main.BaseModel.__init__\n  File &quot;pydantic&#47;main.py&quot;, line 1076, in pydantic.main.validate_model\n  File &quot;pydantic&#47;fields.py&quot;, line 860, in pydantic.fields.ModelField.validate\npydantic.errors.ConfigError: field &quot;retry_chain&quot; not yet prepared so type is still a ForwardRef, you might need to call OutputFixingParser.update_forward_refs().\n","like_count":2,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628867,"discussion_content":"同学我在Github上更新了代码，你用我的代码跑一遍，看看是否仍出错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696059049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2759297,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/1a/81/a14ba165.jpg","nickname":"雷宁","note":"","ucode":"BDBF21C76CE8CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628902,"discussion_content":"黄老师，用您Github最新的代码还是报错的，有进一步提示吗？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696216401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2759297,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/1a/81/a14ba165.jpg","nickname":"雷宁","note":"","ucode":"BDBF21C76CE8CB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628982,"discussion_content":"我这边跑了一遍，的确是没有出错，我目前的版本是langchain 0.0.305。如果同学的版本一直报错的话，可以去langchain的repo上面log一个issue，因为看错误应该是langchain内部代码的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696483120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":628902,"ip_address":"瑞士","group_id":0},"score":628982,"extra":""},{"author":{"id":2599971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/YflLdCdbUAkfr9LPzF50EibDrMxBibPicQ5NNAETaPP0ytTmuR3h6QNichDMhDbR2XelSIXpOrPwbiaHgBkMJYOeULA/132","nickname":"抽象派","note":"","ucode":"6879F90CB702FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":629332,"discussion_content":"升级到0.0.311就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696933889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":628982,"ip_address":"广东","group_id":0},"score":629332,"extra":""}]}]},{"had_liked":false,"id":383514,"user_name":"SH","can_delete":false,"product_type":"c1","uid":1013132,"ip_address":"浙江","ucode":"0A3202CE56C118","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/8c/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1699193080,"is_pvip":false,"replies":[{"id":140088,"content":"调用API当然会。但是，OpenAI应该不会使用别人的商用数据来搞事情。如果有一些concern，请使用自己的模型或者下载开源模型到本地。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1699978926,"ip_address":"瑞士","comment_id":383514,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师， 把离散的文档及其他信息做嵌入，存储到向量数据库中，然后再提取的过程。 这类利用大模型的时候（比如：openai 的 api） 这类的数据是否会被大模型 获取到？  导致信息泄露～","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631805,"discussion_content":"调用API当然会。但是，OpenAI应该不会使用别人的商用数据来搞事情。如果有一些concern，请使用自己的模型或者下载开源模型到本地。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699978927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382287,"user_name":"抽象派","can_delete":false,"product_type":"c1","uid":2599971,"ip_address":"广东","ucode":"6879F90CB702FC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/YflLdCdbUAkfr9LPzF50EibDrMxBibPicQ5NNAETaPP0ytTmuR3h6QNichDMhDbR2XelSIXpOrPwbiaHgBkMJYOeULA/132","comment_is_top":false,"comment_ctime":1697006915,"is_pvip":false,"replies":[{"id":139271,"content":"使用plan and execute代理在处理大量上下文时确实有其局限性，因为GPT的输入令牌限制可能导致上下文被截断。为了更好地处理大型项目或源文件，我觉得可能需要把程序分片，只提供摘要或具体的上下文，而不是发送整个源代码文件，只发送与任务直接相关的代码段。提供具体的修改请求，让每一步都可以在较小的上下文中完成。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1697159654,"ip_address":"瑞士","comment_id":382287,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，在使用plan and execute代理时，推理的上下文比较大的时候，结果就不太如意了。例如：一个go项目，我要求给指定的方法增加一个日志输出的代码逻辑，然后代理读取了整个源代码文件，最后代码是加了，但是只有那个方法还保留着是完整的，其他的代码就没了。请问这种情况有什么手段可以优化吗？","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629508,"discussion_content":"使用plan and execute代理在处理大量上下文时确实有其局限性，因为GPT的输入令牌限制可能导致上下文被截断。为了更好地处理大型项目或源文件，我觉得可能需要把程序分片，只提供摘要或具体的上下文，而不是发送整个源代码文件，只发送与任务直接相关的代码段。提供具体的修改请求，让每一步都可以在较小的上下文中完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697159654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382210,"user_name":"抽象派","can_delete":false,"product_type":"c1","uid":2599971,"ip_address":"广东","ucode":"6879F90CB702FC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/YflLdCdbUAkfr9LPzF50EibDrMxBibPicQ5NNAETaPP0ytTmuR3h6QNichDMhDbR2XelSIXpOrPwbiaHgBkMJYOeULA/132","comment_is_top":false,"comment_ctime":1696908696,"is_pvip":false,"replies":[{"id":139249,"content":"Agent本身就是结合着Chain来用的呀。Agent一跑，就进入了AgentExecutorChain对吧，你要把几个不同功能的Agent组合成一个顺序的Chain，依次的处理一系列功能，也没问题。这两者不矛盾。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696988946,"ip_address":"瑞士","comment_id":382210,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，agent可以结合chain来用吗？有示例吗？","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629367,"discussion_content":"Agent本身就是结合着Chain来用的呀。Agent一跑，就进入了AgentExecutorChain对吧，你要把几个不同功能的Agent组合成一个顺序的Chain，依次的处理一系列功能，也没问题。这两者不矛盾。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696988946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381872,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"广西","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1696075254,"is_pvip":true,"replies":[{"id":139092,"content":"我之前在咨询公司（埃森哲），目前在研究机构。都没有一个固定的业务和工作流。项目和合作方需要什么，我们就提供什么解决方案。也就是说，今年做项目A，是一个东西，明年做项目B，可能是完全不同的东西。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696150706,"ip_address":"新加坡","comment_id":381872,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师好。您平时的工作业务和业务流是什么？","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628889,"discussion_content":"我之前在咨询公司（埃森哲），目前在研究机构。都没有一个固定的业务和工作流。项目和合作方需要什么，我们就提供什么解决方案。也就是说，今年做项目A，是一个东西，明年做项目B，可能是完全不同的东西。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696150706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381848,"user_name":"Final","can_delete":false,"product_type":"c1","uid":1329565,"ip_address":"北京","ucode":"DD8D8E796BC6CF","user_header":"https://static001.geekbang.org/account/avatar/00/14/49/9d/3b40bd68.jpg","comment_is_top":false,"comment_ctime":1695984714,"is_pvip":false,"replies":[{"id":139084,"content":"中秋快乐！🏮","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696057008,"ip_address":"新加坡","comment_id":381848,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"中秋快乐 ~","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628863,"discussion_content":"中秋快乐！🏮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696057008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381831,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"湖北","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1695913152,"is_pvip":false,"replies":[{"id":139083,"content":"代码已更！","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696056895,"ip_address":"新加坡","comment_id":381831,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师提下代码","like_count":1,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628862,"discussion_content":"代码已更！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696056896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386391,"user_name":"Geek2808","can_delete":false,"product_type":"c1","uid":2028948,"ip_address":"加拿大","ucode":"835C9691723163","user_header":"","comment_is_top":false,"comment_ctime":1704762059,"is_pvip":false,"replies":[{"id":140852,"content":"好的，谢谢同学的分享！","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1704817490,"ip_address":"瑞士","comment_id":386391,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"对于StructedToolChat部分，异步总是有问题，可能是VPN网络的问题，改成同步方式跑起来就可以了：\nimport os\nos.environ[&quot;OPENAI_API_KEY&quot;] = &#39;xxxx&#39;\n\nfrom langchain.agents.agent_toolkits import PlayWrightBrowserToolkit\nfrom langchain.tools.playwright.utils import create_sync_playwright_browser\n\nsync_browser = create_sync_playwright_browser()\ntoolkit = PlayWrightBrowserToolkit.from_browser(sync_browser=sync_browser)\ntools = toolkit.get_tools()\nprint(tools)\n\nfrom langchain.agents import initialize_agent, AgentType\nfrom langchain.chat_models import ChatOpenAI\n\n# LLM不稳定，异步方式总是得不到结果。尝试使用同步方式\nllm = ChatOpenAI(temperature=0.5)\n\nagent_chain = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n\n\ndef main():\n    response = agent_chain.run(&quot;What are the headers on python.langchain.com?&quot;)\n    print(response)\n\nmain()\n","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635435,"discussion_content":"好的，谢谢同学的分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704817490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384069,"user_name":"shatu","can_delete":false,"product_type":"c1","uid":2760732,"ip_address":"北京","ucode":"27077AA35B8C22","user_header":"https://static001.geekbang.org/account/avatar/00/2a/20/1c/de379ed1.jpg","comment_is_top":false,"comment_ctime":1700215164,"is_pvip":false,"replies":[{"id":140177,"content":"是啊，因此这个类型的代理目前仅仅是个实验项目。\nPlan and Execute策略的一个潜在弱点：一旦初始计划有误，整个解决方案可能都会出错。\n对于这样的挑战，有几种可能的解决方案：\n1. 增强错误检测和修正能力，使其能够在执行计划过程中更好地识别和修正错误。\n2. 结合动态反馈：尽管Plan and Execute策略强调一次性计划，但也可以考虑在执行过程中引入某种形式的反馈机制，允许模型根据新信息进行调整。\n3. 分阶段执行和验证：将复杂任务分解为多个阶段，每完成一个阶段就进行验证，确保每一步都正确无误再进行下一步。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1700580907,"ip_address":"瑞士","comment_id":384069,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"Plan and execute受限于大模型的不稳定性，还是可能出错，而且一步错步步错，这对于复杂多步骤流程还是很有挑战性【Thought:To calculate the number of bouquets that can be purchased, you need to divide 100 by the average price of a bouquet of roses in New York.\n\nAction:\n```\n{\n  &quot;action&quot;: &quot;Calculator&quot;,\n  &quot;action_input&quot;: &quot;100 &#47; (63.98 + 56.99 + 18.70)&quot;\n}\n```\n\n\n&gt; Entering new LLMMathChain chain...\n100 &#47; (63.98 + 56.99 + 18.70)```text\n100 &#47; (63.98 + 56.99 + 18.70)\n```\n...numexpr.evaluate(&quot;100 &#47; (63.98 + 56.99 + 18.70)&quot;)...\n\nAnswer: 0.7159733657907926】","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632224,"discussion_content":"是啊，因此这个类型的代理目前仅仅是个实验项目。\nPlan and Execute策略的一个潜在弱点：一旦初始计划有误，整个解决方案可能都会出错。\n对于这样的挑战，有几种可能的解决方案：\n1. 增强错误检测和修正能力，使其能够在执行计划过程中更好地识别和修正错误。\n2. 结合动态反馈：尽管Plan and Execute策略强调一次性计划，但也可以考虑在执行过程中引入某种形式的反馈机制，允许模型根据新信息进行调整。\n3. 分阶段执行和验证：将复杂任务分解为多个阶段，每完成一个阶段就进行验证，确保每一步都正确无误再进行下一步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700580907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383238,"user_name":"Geek_995b81","can_delete":false,"product_type":"c1","uid":3733604,"ip_address":"新加坡","ucode":"D99E0838B97C0B","user_header":"","comment_is_top":false,"comment_ctime":1698736128,"is_pvip":false,"replies":[{"id":139629,"content":"Playwright Browser工具包包含多种工具来与浏览器交互,包括点击元素、导航网页、提取文本、提取超链接等。\n对于如何选择合适的工具,模型可能是基于问题的语义来推断应该使用哪个工具。例如,如果问题涉及提取网页元素,模型可能会推断应该使用 get_elements 工具。\n另外,Playwright Browser 工具包还包含其他工具,比如:\nclick_element: 点击指定 CSS 选择器的元素\nnavigate_browser: 导航浏览器到指定网址\nnavigate_back: 返回到浏览器历史中的上一页\nextract_text: 提取当前网页的所有文本\nextract_hyperlinks: 提取当前网页的所有超链接\ncurrent_webpage: 返回当前页面的 URL\n结构化工具应该还有很多，我在后面课中给出了列表，你可以查阅LangChain的相关文档。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698818821,"ip_address":"瑞士","comment_id":383238,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"老师，结构化工具那一个demo，比如模型决定使用 PlayWrightBrowserToolkit 中的 get_elements 工具。这里我们没有给他提示，他是怎么知道用get_elements工具的呢？另外，结构化工具还有其他工具吗？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630728,"discussion_content":"Playwright Browser工具包包含多种工具来与浏览器交互,包括点击元素、导航网页、提取文本、提取超链接等。\n对于如何选择合适的工具,模型可能是基于问题的语义来推断应该使用哪个工具。例如,如果问题涉及提取网页元素,模型可能会推断应该使用 get_elements 工具。\n另外,Playwright Browser 工具包还包含其他工具,比如:\nclick_element: 点击指定 CSS 选择器的元素\nnavigate_browser: 导航浏览器到指定网址\nnavigate_back: 返回到浏览器历史中的上一页\nextract_text: 提取当前网页的所有文本\nextract_hyperlinks: 提取当前网页的所有超链接\ncurrent_webpage: 返回当前页面的 URL\n结构化工具应该还有很多，我在后面课中给出了列表，你可以查阅LangChain的相关文档。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698818821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382917,"user_name":"Monin","can_delete":false,"product_type":"c1","uid":3144503,"ip_address":"上海","ucode":"AA6C4C4F19FA14","user_header":"https://static001.geekbang.org/account/avatar/00/2f/fb/37/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1698201695,"is_pvip":false,"replies":[{"id":139524,"content":"Plan and execute和ReAct在概念上确实很相似,都涉及到智能体进行推理并采取行动来完成任务。\nPlan and execute和ReAct都包含推理和行动,主要区别在于前者模块化设计,可以并行提升效率;后者由单模型串行完成,简单直接但效率较低。Plan and execute方式更加灵活,可以融合各种算法;ReAct方式依赖语言模型能力。\n两者的主要区别在于:\n1. Plan and execute通常由多个模块或代理协同完成,一个模块负责规划和决策,另一个模块执行行动。而ReAct通常由单个大型语言模型完成整个过程。2. Plan and execute可以实现模块化设计,推理和行动并行执行,利用fork-join等方式提升效率。ReAct由单个模型串行完成,效率可能较低。\n\nPlan and execute中的规划模块可以利用各种规划算法,ReAct完全依赖语言模型的能力。\n3. Plan and execute可以更灵活地融合规划与执行,允许动态调整;ReAct一次只能完成一个行动,灵活性较差。\n4. Plan and execute中的执行模块可以利用各种控制算法,而ReAct只能依赖语言模型控制。\n总体来说,Plan and execute方式更加模块化和灵活,可以充分利用现有算法,并行提升效率。但ReAct方式简单直接,能够利用大模型强大的联合推理与控制能力。两种方式各有优势,可以根据具体场景和要求进行选择。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1698379937,"ip_address":"瑞士","comment_id":382917,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"老师 请教下  Plan and execute和之前说的ReAct感觉很相似  都可以概括为推理+行动？  那两者的区别是啥？  我个人理解是\n①Plan and execute可以由两个LLM代理完成   ReAct一般由一个LLM完成整个推理+行动    \n②Plan and execute由多个LLM  可以让推理+行动并行操作   实现fork-join操作  缩短执行时间","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630386,"discussion_content":"Plan and execute和ReAct在概念上确实很相似,都涉及到智能体进行推理并采取行动来完成任务。\nPlan and execute和ReAct都包含推理和行动,主要区别在于前者模块化设计,可以并行提升效率;后者由单模型串行完成,简单直接但效率较低。Plan and execute方式更加灵活,可以融合各种算法;ReAct方式依赖语言模型能力。\n两者的主要区别在于:\n1. Plan and execute通常由多个模块或代理协同完成,一个模块负责规划和决策,另一个模块执行行动。而ReAct通常由单个大型语言模型完成整个过程。2. Plan and execute可以实现模块化设计,推理和行动并行执行,利用fork-join等方式提升效率。ReAct由单个模型串行完成,效率可能较低。\n\nPlan and execute中的规划模块可以利用各种规划算法,ReAct完全依赖语言模型的能力。\n3. Plan and execute可以更灵活地融合规划与执行,允许动态调整;ReAct一次只能完成一个行动,灵活性较差。\n4. Plan and execute中的执行模块可以利用各种控制算法,而ReAct只能依赖语言模型控制。\n总体来说,Plan and execute方式更加模块化和灵活,可以充分利用现有算法,并行提升效率。但ReAct方式简单直接,能够利用大模型强大的联合推理与控制能力。两种方式各有优势,可以根据具体场景和要求进行选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698379937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2642907,"avatar":"https://static001.geekbang.org/account/avatar/00/28/53/db/244953c6.jpg","nickname":"蓝色天空  好萌啊","note":"","ucode":"2D4620E82BC4A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630887,"discussion_content":"老师，你说的这个并行怎么理解，我理解在同一时间依然是只有一个大语言模型在工作吧，并且仍然是先推理再执行，只是这两件事情交给了不同的模型去做，但顺序仍然是串行的，或者严格来说是交叉串行执行？我觉得最大的好处似乎是节省了单一语言模型的token用量，您觉得我说的是否正确呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699004047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1366402,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFicK7Bn88Lqte7rURlw3Lf53oAu1jhiciaVlKLib48dlIAOAF03L7tjQcx1ia5AJI26S7HIxwx780Qzw/132","nickname":"操盘手爱德华","note":"","ucode":"CAAF3E6DC9D5FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2642907,"avatar":"https://static001.geekbang.org/account/avatar/00/28/53/db/244953c6.jpg","nickname":"蓝色天空  好萌啊","note":"","ucode":"2D4620E82BC4A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647602,"discussion_content":"我觉得理论上来说，可能存在某些场景能允许某几个步骤是并行的，但我觉得这不重要。老师的回复看起来不是本人回复的，而是大模型回复的，老师简单过了一遍没有大问题就直接发了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720263098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630887,"ip_address":"美国","group_id":0},"score":647602,"extra":""}]}]},{"had_liked":false,"id":381956,"user_name":"旅梦开发团","can_delete":false,"product_type":"c1","uid":1622373,"ip_address":"江西","ucode":"B8A284C955B8CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/65/2fb5c4ce.jpg","comment_is_top":false,"comment_ctime":1696320192,"is_pvip":false,"replies":[{"id":139184,"content":"看起来是网络问题。\nhttps:&#47;&#47;stackoverflow.com&#47;questions&#47;76611076&#47;failed-to-install-the-browsers-playwright-automation-tool","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696687927,"ip_address":"瑞士","comment_id":381956,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"我这里执行 playwright install  报了以下错误：\nDownloading Chromium 117.0.5938.62 (playwright build v1080) from https:&#47;&#47;playwright.azureedge.net&#47;builds&#47;chromium&#47;1080&#47;chromium-win64.zip\nError: read ECONNRESET  大家怎么解决的","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629125,"discussion_content":"看起来是网络问题。\nhttps://stackoverflow.com/questions/76611076/failed-to-install-the-browsers-playwright-automation-tool","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696687927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1157627,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a9/fb/7cd1a23e.jpg","nickname":"YH","note":"","ucode":"82D2340F62EFED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629085,"discussion_content":"根据提供的信息，您尝试从 https://playwright.azureedge.net/builds/chromium/1080/chromium-win64.zip 下载 Chromium 117.0.5938.62（playwright build v1080）时遇到了 &#34;Error: read ECONNRESET&#34; 错误。\n\n&#34;Error: read ECONNRESET&#34; 错误通常表示在建立与服务器的连接时出现了问题。可能有几种原因导致此错误：\n\n1. 服务器连接问题：可能是服务器上的连接问题，或者与服务器之间的网络连接中断导致下载过程中断。\n\n2. 防火墙或代理问题：如果您在使用防火墙或代理服务器，可能会出现配置问题或阻止了与服务器的连接。\n\n3. 客户端配置问题：可能是您的本地网络或计算机配置问题导致无法建立稳定的连接。\n\n为了解决这个问题，您可以尝试以下步骤：\n\n1. 检查网络连接：确保您的网络连接正常工作，并且没有任何网络中断或阻止连接的问题。\n\n2. 检查防火墙和代理设置：如果您使用防火墙或代理服务器，请确保其配置正确，并且允许与目标 URL 的连接。\n\n3. 尝试使用其他网络或设备：如果可能的话，尝试在不同的网络环境或设备上进行下载，以排除特定网络或设备配置问题。\n\n4. 检查下载源的可用性：确认下载源（https://playwright.azureedge.net）是否正常运行，并且提供的下载链接是否仍然有效。\n\n如果问题仍然存在，您可能需要进一步调查或联系相关技术支持部门以获取更多帮助和指导。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696656952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393251,"user_name":"yanyu-xin","can_delete":false,"product_type":"c1","uid":1899757,"ip_address":"中国香港","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1723282999,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"***** 修订课程中“使用结构化工具对话代理”部分的代码，改为通义千问，将旧版 langchain的改为新版本\n## 旧代码1：\nfrom langchain.agents.agent_toolkits import PlayWrightBrowserToolkit\nfrom langchain.tools.playwright.utils import create_async_playwright_browser\nfrom langchain.chat_models import ChatAnthropic, ChatOpenAI\n## 新代码1：（ 新版本用 langchain_community 代替 旧版本的 langchain ）\nfrom langchain_community.agent_toolkits import PlayWrightBrowserToolkit\nfrom langchain_community.tools.playwright.utils import create_async_playwright_browser\nfrom langchain_openai import ChatOpenAI\n----\n## 旧代码2：\nllm = ChatOpenAI(temperature=0.5)\n## 新代码2：（用千问模型代替 OpenAI )\nllm = ChatOpenAI(\n    api_key=&quot;KEY&quot;, # 用你的DASHSCOPE_API_KEY\n    base_url=&quot;https:&#47;&#47;dashscope.aliyuncs.com&#47;compatible-mode&#47;v1&quot;, \n    model=&quot;qwen-plus&quot;\n    )\n----\n## 旧代码3：\nresponse = await agent_chain.arun(&quot;What are the headers on python.langchain.com?&quot;)\n## 新代码3：（Chain.arun&#39; 方法已弃用，改用 ainvoke ）\n response = await agent_chain.ainvoke(&quot;What are the headers on python.langchain.com?&quot;)\n\n****  修订课程中“使用 Self-Ask with Search 代理”部分的中代码，用通义千问 和Perplexity\n## 旧代码4\nfrom langchain import OpenAI, SerpAPIWrapper \n## 新代码4\nfrom langchain_openai import ChatOpenAI\nfrom langchain_community.chat_models import ChatPerplexity\n----\n## 旧代码5\nllm = OpenAI(temperature=0)\nsearch = SerpAPIWrapper()\n## 新代码5 \n# 用千问大模型初始化 \nllm = ChatOpenAI(   \n    api_key= &quot;key&quot;,  # 你的DASHSCOPE_API_KEY\n    base_url=&quot;https:&#47;&#47;dashscope.aliyuncs.com&#47;compatible-mode&#47;v1&quot;,  \n    model=&quot;qwen-long&quot;)\n\n# 新用Perplexity 初始化网络搜索工具\nsearch = ChatPerplexity(    \n    temperature=0.3, \n    pplx_api_key= ”key“,  # 你的PPLX_API_KEY\n    model=&quot;llama-3-sonar-small-32k-online&quot;)\n---\n## 旧代码6\nfunc=search.run,\nself_ask_with_search.run( &quot;使用玫瑰作为国花的国家的首都是哪里?&quot;  )\n## 新代码6 ，将run方法改为invote\nfunc=search.invoke,  \nself_ask_with_search_agent.invoke(&quot;使用玫瑰作为国花的国家的首都是哪里?&quot;) ","like_count":1},{"had_liked":false,"id":386806,"user_name":"Geek_eeff0f","can_delete":false,"product_type":"c1","uid":3721721,"ip_address":"上海","ucode":"3D1172AB666CD4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUNibJ7oSRw2jrKPFh9wxY1xt5Z5bbRu6PO9cgrJXDKHKAo6u7737icrp0r2kiab77ib4H8Q/132","comment_is_top":false,"comment_ctime":1705598152,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"老师，请教下使用SerpAPIWrapper运行提示：\n    raise ValueError(\nValueError: An output parsing error occurred. In order to pass this error back to the agent and have it try again, pass `handle_parsing_errors=True` to the AgentExecutor. This is the error: Could not parse output:  No.\n是什么原因呢？我在self_ask_with_search = initialize_agent(\n    tools, llm, agent=AgentType.SELF_ASK_WITH_SEARCH, verbose=True\n)添加了参数handle_parsing_errors=True，尽管不报错，但是得不到结果","like_count":1,"discussions":[{"author":{"id":1032464,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c1/10/28d5a686.jpg","nickname":"Longerian","note":"","ucode":"0B74EE70D09A2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":639270,"discussion_content":"我也是专业，debug看提示词根本是答非所问：\n{\n  &#34;prompts&#34;: [\n    &#34;Question: Who lived longer, Muhammad Ali or Alan Turing?\\nAre follow up questions needed here: Yes.\\nFollow up: How old was Muhammad Ali when he died?\\nIntermediate answer: Muhammad Ali was 74 years old when he died.\\nFollow up: How old was Alan Turing when he died?\\nIntermediate answer: Alan Turing was 41 years old when he died.\\nSo the final answer is: Muhammad Ali\\n\\nQuestion: When was the founder of craigslist born?\\nAre follow up questions needed here: Yes.\\nFollow up: Who was the founder of craigslist?\\nIntermediate answer: Craigslist was founded by Craig Newmark.\\nFollow up: When was Craig Newmark born?\\nIntermediate answer: Craig Newmark was born on December 6, 1952.\\nSo the final answer is: December 6, 1952\\n\\nQuestion: Who was the maternal grandfather of George Washington?\\nAre follow up questions needed here: Yes.\\nFollow up: Who was the mother of George Washington?\\nIntermediate answer: The mother of George Washington was Mary Ball Washington.\\nFollow up: Who was the father of Mary Ball Washington?\\nIntermediate answer: The father of Mary Ball Washington was Joseph Ball.\\nSo the final answer is: Joseph Ball\\n\\nQuestion: Are both the directors of Jaws and Casino Royale from the same country?\\nAre follow up questions needed here: Yes.\\nFollow up: Who is the director of Jaws?\\nIntermediate answer: The director of Jaws is Steven Spielberg.\\nFollow up: Where is Steven Spielberg from?\\nIntermediate answer: The United States.\\nFollow up: Who is the director of Casino Royale?\\nIntermediate answer: The director of Casino Royale is Martin Campbell.\\nFollow up: Where is Martin Campbell from?\\nIntermediate answer: New Zealand.\\nSo the final answer is: No\\n\\nQuestion: 使用玫瑰作为国花的国家的首都是哪里?\\nAre followup questions needed here:&#34;\n  ]\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710426817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393395,"user_name":"温泉","can_delete":false,"product_type":"c1","uid":1697124,"ip_address":"北京","ucode":"DC0FD712BB9A66","user_header":"https://static001.geekbang.org/account/avatar/00/19/e5/64/ac338f9c.jpg","comment_is_top":false,"comment_ctime":1723686508,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"SELF_ASK_WITH_SEARCH  这个在0.2版本如何使用，我的一直在报错msg: parameter check failed, stop word range is [1, 20]","like_count":0},{"had_liked":false,"id":392525,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1721187722,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":2,"score":3,"product_id":100617601,"comment_content":"第13讲打卡~\nAgent真的很强大~","like_count":0},{"had_liked":false,"id":389552,"user_name":"海是蓝天的倒影","can_delete":false,"product_type":"c1","uid":2300783,"ip_address":"美国","ucode":"18355BB7DC364D","user_header":"https://static001.geekbang.org/account/avatar/00/23/1b/6f/ee41e363.jpg","comment_is_top":false,"comment_ctime":1712853515,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":3,"product_id":100617601,"comment_content":"我理解agentType在不同的代理类型中包装了不同的代理思维方式和代理工具调用的提示词。通过对问题任务的思考分析，调用有用的工具，得出答案结果。我这么理解对吗？","like_count":0},{"had_liked":false,"id":388589,"user_name":"Longerian","can_delete":false,"product_type":"c1","uid":1032464,"ip_address":"浙江","ucode":"0B74EE70D09A2A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/10/28d5a686.jpg","comment_is_top":false,"comment_ctime":1710427168,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"Plan and execute 代理也没跑通，没计算出平均价格，很奇怪。\n\n","like_count":0},{"had_liked":false,"id":387983,"user_name":"ManerFan","can_delete":false,"product_type":"c1","uid":1055586,"ip_address":"北京","ucode":"9C7164E19E0284","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/62/81a5a17d.jpg","comment_is_top":false,"comment_ctime":1709099567,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100617601,"comment_content":"老师好，在构建agent executor时，具体应该如何选择AgentType呢？","like_count":0},{"had_liked":false,"id":386804,"user_name":"Geek_eeff0f","can_delete":false,"product_type":"c1","uid":3721721,"ip_address":"上海","ucode":"3D1172AB666CD4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUNibJ7oSRw2jrKPFh9wxY1xt5Z5bbRu6PO9cgrJXDKHKAo6u7737icrp0r2kiab77ib4H8Q/132","comment_is_top":false,"comment_ctime":1705594320,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100617601,"comment_content":"from langchain.tools.playwright.utils import create_async_playwright_browser\n我安装的是langchain是0.1.0\n但是提示我找不到utils 这个包是怎么回事呢？\n","like_count":0,"discussions":[{"author":{"id":1423699,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b9/53/a72bebcc.jpg","nickname":"赵欣","note":"","ucode":"6066BD20C6123E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636846,"discussion_content":"要改成这个from langchain_community.tools.playwright.utils import create_async_playwright_browser","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1707113075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}