{"id":376532,"title":"01｜认识 React：如何创建你的第一个 React 应用？","content":"<p>你好，我是王沛。欢迎来到我们的第一节课：认识 React ，并创建你的第一个 React 应用。</p><p>在这一讲，我会先带你了解React的创新之处，从而理解为什么它能成为最为主流的前端框架。然后再来学习和理解React的基本概念，帮助你了解 React 。最后，我会通过一个实战项目，带着你创建你的第一个React应用。</p><h1>React的颠覆式创新</h1><p>React 的中文含义是“反应”或“响应”，它描述了 React 这样一个前端框架的核心原理：<strong>当数据发生变化时，UI 能够自动把变化反映出来</strong>。这在 React 当时出现的背景之下，可以说是<strong>一个颠覆式的创新</strong>。</p><p>我之所以用“颠覆”这个词，是因为它不仅提供了一个框架，而且彻底改变了前端的开发思路，甚至电脑桌面、手机应用的开发也受到了 React 开发思路的影响。</p><p>在2013年 React 出现之时，主流的开发 UI 的方式仍然是基于浏览器 DOM 的 API，去精细地控制 DOM 节点的创建、修改和删除。为了保证 UI 上的一致性，我们需要非常小心地处理因各种数据的变化而导致的 UI 的变化。</p><p>举个例子。对于一个聊天应用，当来了一条新消息时，我们一方面需要在聊天框内添加一条新消息，同时也要在显示消息数量的地方让数字加1，这样才能保证 UI 的一致性。</p><!-- [[[read_end]]] --><p>在 React 之前，我们需要调用 DOM 的 API 来修改 DOM 树的结构，从而改变 UI 的展现。而在有了 React 之后，我们只需要在业务状态和 UI 状态之间建立一个绑定的关系就行了。绑定完成后，我们就不需要再关心怎么去精细控制 UI 的变化，因为React 会在数据发生变化时，帮助我们完成 UI 的变化。</p><p>下面这张图就展示了这样的一个机制：<br>\n<img src=\"https://static001.geekbang.org/resource/image/16/51/16cd47a89b804fa19f172c4d5074b151.png?wh=2116*502\" alt=\"\"></p><p>可以看到，我们可以通过 JSX 语法，用声明式的方式来描述数据和 UI 之间的关系，那么数据在发生变化时，UI 也会自动发生变化。这样的话，无论是收到一条还是多条消息，React 都会自动完成 UI 的展现，我们也就不再需要去关心怎么产生变化的细节。那么基于同一个数据，比如我们需要在通知栏里显示消息的数量，那么显示消息数量的组件，只需要绑定到消息的长度上，它也会自动更新，这样很容易就保证 UI 上的一致性了。</p><p>通过我刚才对这张图的解释，你可能还会有些不理解，主要是出现了一些比较陌生的概念。别着急，接下来我就带你理解React的基本概念，学完之后，你会对 React 是如何工作的有更全面的认识。</p><h1>理解 React 的基本概念</h1><p>React 本身其实是一个非常简单的框架，要理解它的用法，无外乎就是理解下面三个概念：组件、状态和 JSX。下面我们分别来看。</p><h2>使用组件的方式描述 UI</h2><p>在 React 中，所有的 UI 都是通过<strong>组件</strong>去描述和组织的。可以认为，React 中所有的元素都是组件，具体而言分为两种。</p><ol>\n<li>内置组件。内置组件其实就是<strong>映射到 HTML 节点的组件</strong>，例如 div、input、table 等等，作为一种约定，它们都是小写字母。</li>\n<li>自定义组件。自定义组件其实就是<strong>自己创建的组件</strong>，使用时必须以大写字母开头，例如TopicList、TopicDetail。</li>\n</ol><p>和 DOM 的节点定义类似，React 组件是以<strong>树状结构</strong>组织到一起的，一个 React 的应用通常只有一个根组件。此外，在实际开发时，我们会把 UI 划分成不同的组件，然后组织到一起，例如对于下面这样一个评论框的 UI：</p><p><img src=\"https://static001.geekbang.org/resource/image/90/c5/9014a72ce4cb007cc43dff678a4648c5.png?wh=1390*906\" alt=\"\"></p><p>我们可以用基于组件的方式去描述：</p><pre><code>function CommentBox() {\n  return (\n    &lt;div&gt;\n      &lt;CommentHeader /&gt;\n      &lt;CommentList /&gt;\n      &lt;CommentForm /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>比如说评论框可以分为三个部分，包括头部、评论的列表和一个用于提交新的评论的表单，这样我们就可以把这三个部分分别定义成组件，让我们可以根据实际的场景把复杂的 UI 模块化为独立的组件。这样代码不仅看起来更加直观，而且也更容易维护。</p><h2>使用 state 和 props 管理状态</h2><p>正如我刚才提到的，React 的核心机制是能够在数据发生变化的时候自动重新渲染 UI，那么势必要有一个让我们保存状态的地方，这个保存状态的机制就是 state。而 props 就是类似于 Html 标记上属性的概念，是为了在父子组件之间传递状态。</p><p>在函数组件中，我们可以使用 useState 这样一个 Hook来保存状态，那么状态在发生变化时，也会让 UI 自动发生变化。比如下面这段代码，展示了一个简单计数器的实现的例子：</p><pre><code>import React from &quot;react&quot;;\n\nexport default function Counter() {\n  const [count, setCount] = React.useState(0);\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>可以看到，通过 useState 定义这样一个状态，让这个状态来保持计数器的数值，那么在值发生变化时，组件就会自动重新刷新。这里我们先不用太关心 useState 这个 API 的细节，我在第4讲会有一个详细的介绍。</p><p>那么，现在使用了 state 来维护组件的状态，接下来要关心的就是组件之间的交互，这正是props 提供的作用。</p><p>无论是 div、span 这样的内置组件，还是自定义组件，都可以在使用时把接收属性作为参数。而当这个参数发生变化时，组件也就会自动重新渲染。</p><p>例如，我们在计数器这个例子中使用一个组件来渲染 count 这个值，要求在值大于10的时候显示为红色，否则就为蓝色：</p><pre><code>import React from &quot;react&quot;;\n\nfunction CountLabel({ count }) {\n  // 子组件用于显示颜色\n  const color = count &gt; 10 ? &quot;red&quot; : &quot;blue&quot;;\n  return &lt;span style={{ color }}&gt;{count}&lt;/span&gt;;\n}\n\nexport default function Counter() {\n  // 定义了 count 这个 state\n  const [count, setCount] = React.useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        &lt;CountLabel count={count} /&gt;\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>可以看到，我们定义了一个新的组件 CountLabel，在值大于10的时候显示红色，否则为蓝色。并且，我们还要在Counter 组件里使用 CountLabel 这个子组件，这样的话我们就可以通过 props 把 count 这个值从父组件传递到子组件，那么在 count 发生变化时，CountLabel 也会重新渲染。此外，所有通过属性定义在 <countlabel> 这个 Tag 上的参数，都会作为一个对象传递给函数组件，这样在函数组件内部就可以使用这些参数了。</countlabel></p><h2>理解 JSX 语法的本质</h2><p>我们刚刚通过一个简单的例子对 React 组件有了一个比较直观的印象，但如果你之前没有接触过 React，也许会觉得在代码中同时包含 JavaScript 和 HTML 标记的写法很别扭。但这种写法其实正是 React 中的“模板语言”：JSX。</p><p>注意，这里的“模板语言”是加了引号的，因为从本质上来说，JSX 并不是一个新的模板语言，而可以认为是一个<strong>语法糖</strong>。也就是说，不用 JSX 的写法，其实也是能够写 React 的。这是什么意思呢？我们不妨再看一下上面计数器的例子，如果不用 JSX 应该如何写代码：</p><pre><code>React.createElement(\n  &quot;div&quot;,\n  null,\n  React.createElement(\n    &quot;button&quot;,\n    { onClick: function onClick() {\n        return setCount(count + 1);\n      } },\n    React.createElement(CountLabel, { count: count })\n  )\n);\n</code></pre><p>在这段代码中，JSX 的部分我们是用 JavaScript 的方式去实现的，并且用到了 React.createElement 这样一个 API，它的作用就是创建一个组件的实例。此外，这个 API 会接收一组参数：</p><ul>\n<li>第一个参数表示组件的类型；</li>\n<li>第二个参数是传给组件的属性，也就是props；</li>\n<li>第三个以及后续所有的参数则是子组件。</li>\n</ul><p>所以呢，通过 createElement 这个 API，我们可以构建出需要的组件树，而 JSX 只是让这种描述变得更加直观和高效。所以我们说JSX其实是一种语法糖。理解这一点非常重要，因为它意味着两点：</p><ol>\n<li>JSX 的表达能力等价于 JavaScript 的表达能力，那么所有我们可能需要的机制，比如循环、条件语句等等，JSX 其实都能灵活表达。</li>\n<li>JSX 几乎不需要学习，只要你会用 JavaScript，就也会用 JSX。</li>\n</ol><p>所以这也是 React 的“模板语言”区别于 Angluar 和 Vue 的地方，JSX不是一个新的概念，而只是原生 JavaScript 的另一种写法。但是换成这种写法，就会大大降低你上手 React 的难度。</p><h1>使用脚手架工具创建 React 应用</h1><p>经过刚才的学习，我们已经对 React 有了一个基本的了解，那么现在我们就来创建一个应用，试用一下React。</p><p>在实际的项目开发中，我们其实不仅需要把 React 作为UI层，还可能需要路由管理、状态管理等框架。与此同时，我们还需要使用最新的 JavaScript 语言特性、CSS 的预处理框架等等。所以一般需要结合Webpack 等打包工具来使用React。</p><p>完成这些配置本身就是一个比较繁琐的步骤，因此我们通常都不会从头开始创建一个项目，而是使用<strong>脚手架工具</strong>来创建一个项目。我在这里跟你介绍两个工具：</p><ul>\n<li>一个是 codesandbox.io，主要用于学习React，能够快速试验一些React的特性。</li>\n<li>另一个则是Facebook 官方提供的 create-react-app 命令行工具，用来创建一个基础的 React 项目。</li>\n</ul><p>首先看 Codesandbox，它是一个在线的工具，可以通过 <a href=\"https://codesandbox.io\">https://codesandbox.io</a> 访问使用。例如今天这节课所有可运行的示例代码就都是放在 Codesandbox 上的，用浏览器打开即可。你可以在线写代码，并实时查看运行的效果。使用起来其实也非常简单，打开主页后就可以看到如下页面：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/e0/cff27cd3585d44cfe6d789405419a1e0.png?wh=2388*1866\" alt=\"\"></p><p>点击 Create Sandbox，就可以创建一个前端的应用。需要说明的是，它不仅支持 React，还能够创建 Angular、Vue 等前端框架的应用。</p><p>第二个 create-react-app 则是我们做正式项目开发时会使用的基本工具。它会提供一个完善的 Webpack 配置，让我们能够立刻开始使用 React、JavaScript 语言的最新特性和 CSS Module 等主流的技术方案。</p><p>这里要特别注意一点，create-react-app的使用需要 Node.js 的环境，具体版本是 Node &gt;= 10.16 版本以及 npm &gt;=5.6 版本。安装好 Node.js 之后，你就可以用如下命令行来创建一个 React 应用：</p><pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre><p>创建的项目结构非常简单：</p><pre><code>- public\n- src\n  - App.css\n  - App.js\n  - index.js\n  - index.css\n- package.json\n</code></pre><p>这里的 src/index.js 是程序的入口，App.js 则是整个应用程序的根组件，主要做一些配置的事情。create-react-app 创建的项目作为一个基本的模板，为我们提供的便利主要是配置好开发环境、Webpack 等等，但是它不包含 Redux 或者 Router 等非必须的功能。那么基于这个模板，我们后面的几节课会在 App.js 中添加 Redux、React Router 等配置。</p><h1>实战：在组件中发送请求并显示数据</h1><p>好了，我们已经对 React 有了一个大概的了解，并能够创建项目，试验代码执行的效果。现在我们来通过一个异步请求的例子，以强化对 React 的理解，这个例子也是日常开发中最为常见的需求。</p><p>设想这样一个场景：页面上有一个按钮，点击后，我们可以发起一个请求获取一个用户列表，并要求显示在页面上。在这个过程中，我们需要考虑数据状态，Loading 的状态，以及请求出错的处理。那么可以用下面的代码实现：</p><pre><code>import React from &quot;react&quot;;\n\nexport default function UserList() {\n  // 使用三个 state 分别保存用户列表，loading 状态和错误状态\n  const [users, setUsers] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  // 定义获取用户的回调函数\n  const fetchUsers = async () =&gt; {\n    setLoading(true);\n    try {\n      const res = await fetch(&quot;https://reqres.in/api/users/&quot;);\n      const json = await res.json();\n      // 请求成功后将用户数据放入 state\n      setUsers(json.data);\n    } catch (err) {\n      // 请求失败将错误状态放入 state\n      setError(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    &lt;div className=&quot;user-list&quot;&gt;\n      &lt;button onClick={fetchUsers} disabled={loading}&gt;\n        {loading ? &quot;Loading...&quot; : &quot;Show Users&quot;}\n      &lt;/button&gt;\n      {error &amp;&amp; \n        &lt;div style={{ color: &quot;red&quot; }}&gt;Failed: {String(error)}&lt;/div&gt;\n      }\n      &lt;br /&gt;\n      &lt;ul&gt;\n        {users.length &gt; 0 &amp;&amp;\n          users.map((user) =&gt; {\n            return &lt;li key={user.id}&gt;{user.first_name}&lt;/li&gt;;\n          })}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\n</code></pre><p>程序的运行结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/63/7c/637339ce773a45398a097ec19176647c.png?wh=254*320\" alt=\"\"></p><p>当点击 Show Users 按钮时，会显示 Loading 的文本，并将 button 设为 disabled。请求成功后，则显示获取的用户列表。如果请求失败，则显示一段错误信息的文本。</p><p>在 React 组件中，任何一个 state 发生变化时，整个函数组件其实是被完全执行一遍的，而且除了 state，多次的执行之间没有任何关系。所以在考虑这样一个场景的实现时，我们的思考方式就是要首先考虑这个组件有哪些状态（state），这些状态的变化是由什么触发的，从而将整个功能串联起来。</p><p>当然，这个例子只是一个最简单的实现，但如果你细究一下，应该还会提出下面的问题：</p><ol>\n<li>函数中定义了回调函数 fetchUsers，但函数每次都是全部重新执行，那会不会重复定义很多次呢？</li>\n<li>如果另外一个组件可能也需要使用到 Users 这个数据，比如一个下拉框，那么是不是每次都要重复这个发起请求的逻辑呢？</li>\n</ol><p>这其实正是后面的课程会解决的问题，我在这里先简单回答下：</p><ol>\n<li>是的，这种写法会重复定义很多函数。不过为了避免这样的问题，React 提供了 useCallback 这样一个Hook来缓存回调函数，关于这一问题，我在第4讲会有详细的讲解。</li>\n<li>对于异步请求逻辑的重用，这其实也意味着跨组件状态的重用，我会在第7讲利用 Redux 这样一个全局状态管理框架来实现异步逻辑的复用。</li>\n</ol><h1>小结</h1><p>React 本身其实是一个上手非常简单的 UI 框架，它的核心 API 在这节课我们基本都已经用到了，比如函数组件，JSX，useState，等等。但是 React 本身毕竟只是解决了UI的问题，在真正开发时，我们还需要路由、需要状态管理等等，这也正是后续课程中会介绍的。</p><p>不过也正是因为 React 本身的这种纯粹和简单，让它的整个生态圈变得非常繁荣。针对每一个具体的问题，可能都存在特定的解决方案。所以在实际使用中，我们需要根据具体的需求，来寻求最合适的方案。</p><p>最后，我把这节课用到的例子链接放在这里，供你参考。</p><p>计数器的例子：<a href=\"https://codesandbox.io/s/admiring-christian-20vzg?file=/src/01/Counter.js\">https://codesandbox.io/s/admiring-christian-20vzg?file=/src/01/Counter.js</a></p><p>异步请求的例子： <a href=\"https://codesandbox.io/s/admiring-christian-20vzg?file=/src/01/UserList.js\">https://codesandbox.io/s/admiring-christian-20vzg?file=/src/01/UserList.js</a></p><h1>思考题</h1><p>作为第一讲的思考题，我先来提一个开放式的问题。在你看来，React 最打动你的特性是什么？或者说你认为它的最大优点有哪些？</p><p>欢迎在留言区写下你的思考和想法，我们一起交流讨论。如果今天的内容让你有所收获，也欢迎你把课程分享给你的同事、朋友，我们一起共同进步！</p>","neighbors":{"left":{"article_title":"开篇词 | 全面拥抱 Hooks，掌握最新 React 开发方式","id":376577},"right":{"article_title":"02｜理解 Hooks：React 为什么要发明 Hooks？","id":378311}},"comments":[{"had_liked":false,"id":294285,"user_name":"༺程༻","can_delete":false,"product_type":"c1","uid":1442199,"ip_address":"","ucode":"05B0370E629E60","user_header":"https://static001.geekbang.org/account/avatar/00/16/01/97/16badf02.jpg","comment_is_top":true,"comment_ctime":1621864423,"is_pvip":false,"replies":[{"id":"106807","content":"JSX 确实是 React 最亮眼的创新之一，似模板语言而本质是 JavaScript，所以特别灵活是正常的。JSX 写的太长确实容易看着比较凌乱，所以要尽量把组件进行拆分成子组件各司其职。JSX 也就自然看着简洁了。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1621907753,"ip_address":"","comment_id":294285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720771313009e+18","product_id":100079901,"comment_content":"应该是jsx吧，灵活，随心所欲。但是就是太灵活，缺少一些最佳实践","like_count":9,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520589,"discussion_content":"JSX 确实是 React 最亮眼的创新之一，似模板语言而本质是 JavaScript，所以特别灵活是正常的。JSX 写的太长确实容易看着比较凌乱，所以要尽量把组件进行拆分成子组件各司其职。JSX 也就自然看着简洁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621907753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294874,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":true,"comment_ctime":1622119020,"is_pvip":false,"replies":[{"id":"107105","content":"说的很好~ JSX 同时满足了模板语言的直观和 JS 的灵活性。虚拟 DOM 的存在让业务逻辑和展现逻辑的分离可以更彻底，拆分了复杂度也更容易去测试。至于 FP，并不是刻意追求的目标，也和 React 没有太大的关系。更多算是一种巧合吧，因为 immutable 的缘故，很多就看上去很像了。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622185863,"ip_address":"","comment_id":294874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720728365998e+18","product_id":100079901,"comment_content":"我大概从2015年左右开始关注过这个前端框架，对我来说react比较打动人的地方主要有3点：<br>1 jsx 的业务代码形态 使得xml 和 js很好地结合，低成本复用很多js的生态 <br>2 在当时 react给了一批较为资深的jser一种“希望”，能够让自己写的业务逻辑 脱离dom，为什么要脱离dom呢？因为2015年正是移动端开发较为火热的时候，react的这种机制给了人更多的“想象力”可以把js业务代码移植到其他平台去，reactnative也就自然而然地应孕而生。 这一条是在我看来react能够流行起来的挺关键的一个因素，倘若这个框架早10年 或者 晚 10年出现，恐怕都不一定能流行的起来。<br>3 react还适时地拥抱了 近年来前端圈子里另一股coding流行风潮，那就是FP 或者 FRP。FP其实本质上并没有比OOP 提高多少开发效率，OOP诞生于工业界土壤，而FP最初是学术界喜欢把玩的一种编程范式，因此FP可玩性强，资深jser们在那几年 都喜欢赶FP的时髦 一头扎进函数编程里不亦乐乎（尽管写出的代码可能只有自己看得懂但却依然乐在其中）于是乎react也凭借这一点 笼络了更多高阶前端的心，于是乎也就会有更多资深jser为react站台背书，再之后就会有更多新人愿意学这个框架 …. 如此往复 形成了一个正向反馈～<br>一点拙见 欢迎讨论。","like_count":8,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520850,"discussion_content":"说的很好~ JSX 同时满足了模板语言的直观和 JS 的灵活性。虚拟 DOM 的存在让业务逻辑和展现逻辑的分离可以更彻底，拆分了复杂度也更容易去测试。至于 FP，并不是刻意追求的目标，也和 React 没有太大的关系。更多算是一种巧合吧，因为 immutable 的缘故，很多就看上去很像了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622185863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294364,"user_name":"刘大夫","can_delete":false,"product_type":"c1","uid":1707726,"ip_address":"","ucode":"B03DCF41E50ADF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/ce/1e02a513.jpg","comment_is_top":false,"comment_ctime":1621916889,"is_pvip":false,"replies":[{"id":"106824","content":"好的，谢谢提议，有些内容确实可以通过加餐形式去补充。课程中的思路主要是面向实战，因此各个知识点主要讲清楚来龙去脉和要解决的问题。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1621927200,"ip_address":"","comment_id":294364,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48866557145","product_id":100079901,"comment_content":"React让我感觉最惊艳的地方在于它的设计哲学，以及对于技术场景不断地深入探索，尤其fiber这一点太厉害了。在这门课中希望老师多讲点 hooks 原理的知识，最好能深入点，正课中可能照顾到大多数读者还是需要以应用实践为主，但可不可以用加餐或者答疑的形式来啊，万分感谢","like_count":11,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520623,"discussion_content":"好的，谢谢提议，有些内容确实可以通过加餐形式去补充。课程中的思路主要是面向实战，因此各个知识点主要讲清楚来龙去脉和要解决的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621927200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294443,"user_name":"Geek_9878c1","can_delete":false,"product_type":"c1","uid":1667697,"ip_address":"","ucode":"647183DE9376CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcOPgba5hadxiawicnLjSpRjlskQ22hnLEw1iayU5xibQ2YoqngJ2r6Sjp8RcoW6ODuLBr6dibiascz0vA/132","comment_is_top":false,"comment_ctime":1621944437,"is_pvip":false,"replies":[{"id":"106893","content":"没错。技术上很容易上手，然后就是面对复杂问题时寻求最优解了 🙂","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622015636,"ip_address":"","comment_id":294443,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31686715509","product_id":100079901,"comment_content":"React初看复杂，真的上手了就会发现就是三板斧jsx，状态管理，组件；三板斧能学完的，第一步就成功了","like_count":7,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520657,"discussion_content":"没错。技术上很容易上手，然后就是面对复杂问题时寻求最优解了 🙂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622015636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2798300,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/b2/dc/465ef595.jpg","nickname":"Geek_adab2dfsg","note":"","ucode":"F0D58460BBE5DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580247,"discussion_content":"1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658040170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296502,"user_name":"Jerryz","can_delete":false,"product_type":"c1","uid":1232276,"ip_address":"","ucode":"9DAEEAAE70FA00","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/94/0d44361e.jpg","comment_is_top":false,"comment_ctime":1623024119,"is_pvip":false,"replies":[{"id":"107749","content":"👍🏻","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1623082189,"ip_address":"","comment_id":296502,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27392827895","product_id":100079901,"comment_content":"React 哲学：<br>UI = render(state)","like_count":7,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521466,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623082189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001556,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/54/710626c2.jpg","nickname":"Jinjing Wu","note":"","ucode":"0848B436C64D87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577545,"discussion_content":"haha, UI = f(x)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656170223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294322,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1203490,"ip_address":"","ucode":"05B21694762045","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/22/5aed3202.jpg","comment_is_top":false,"comment_ctime":1621899817,"is_pvip":true,"replies":[{"id":"106808","content":"回答的很到位！React 核心功能的完备和至简让其上手很简单，同时也促成了整个生态的形成。所以可以说简单和生态是 React 最强力的武器。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1621907901,"ip_address":"","comment_id":294322,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18801769001","product_id":100079901,"comment_content":"生态强大可靠，应用广泛<br>核心概念简单，写法灵活<br>通过RN可开发移动app","like_count":4,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520605,"discussion_content":"回答的很到位！React 核心功能的完备和至简让其上手很简单，同时也促成了整个生态的形成。所以可以说简单和生态是 React 最强力的武器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621907901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297083,"user_name":"ru","can_delete":false,"product_type":"c1","uid":1379466,"ip_address":"","ucode":"BE3DCCDD56BA8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK40RCxCdCaKQx0VjSv2WHPasvAYBLfAbFo2Fia4AauwRibt1xh8nbvDITwCnQbnfnlQz48Dj1muAsQ/132","comment_is_top":false,"comment_ctime":1623303383,"is_pvip":false,"replies":[{"id":"107951","content":"👍","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1623388904,"ip_address":"","comment_id":297083,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14508205271","product_id":100079901,"comment_content":"如果说最，我觉得是数据驱动页面渲染，减少dom的操作，其次是jsx语法，页面整体逻辑看起来会很清晰","like_count":3,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521711,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623388904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294376,"user_name":"Ran","can_delete":false,"product_type":"c1","uid":1337147,"ip_address":"","ucode":"9DC94DACBA0765","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3b/d567e79a.jpg","comment_is_top":false,"comment_ctime":1621919605,"is_pvip":true,"replies":[{"id":"106825","content":"框架确实没有绝对的优劣，更多的是技术团队自身的技术积累决定的。通常来说生态更加繁荣的会更有生命力，选它就对了 🙂","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1621927500,"ip_address":"","comment_id":294376,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14506821493","product_id":100079901,"comment_content":"老师，日常遇到的选型问题，像现在大一些的公司都是偏向React技术栈，小规模团队快速开发好像更倾向于Vue，具体项目的技术选型有更多其他的因素吗？","like_count":3,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520630,"discussion_content":"框架确实没有绝对的优劣，更多的是技术团队自身的技术积累决定的。通常来说生态更加繁荣的会更有生命力，选它就对了 🙂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621927500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630502,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e1/26/a5bae6c3.jpg","nickname":"。丑","note":"","ucode":"F1006EBF13E95F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378280,"discussion_content":"我毕业一年 实习是React, 现在是Vue, Vue写项目确实块， 但是React给人一种说不出来的喜欢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623145579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/3b/d567e79a.jpg","nickname":"Ran","note":"","ucode":"9DC94DACBA0765","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376011,"discussion_content":"好的 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621927969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296794,"user_name":"qiutian00","can_delete":false,"product_type":"c1","uid":1495002,"ip_address":"","ucode":"DAACFB60B2D213","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/da/d2865df0.jpg","comment_is_top":false,"comment_ctime":1623162224,"is_pvip":false,"replies":[{"id":"107982","content":"第18课会讲测试哦~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1623470973,"ip_address":"","comment_id":296794,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10213096816","product_id":100079901,"comment_content":"老师， 请教在项目需求多变情况下，怎样进行单元测试之类，来保证项目的质量？","like_count":2,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521583,"discussion_content":"第18课会讲测试哦~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623470973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1495002,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cf/da/d2865df0.jpg","nickname":"qiutian00","note":"","ucode":"DAACFB60B2D213","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381460,"discussion_content":"期待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625064532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294274,"user_name":"傻子来了快跑丶","can_delete":false,"product_type":"c1","uid":1282777,"ip_address":"","ucode":"662624121A1DFA","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/d9/84c1de45.jpg","comment_is_top":false,"comment_ctime":1621860277,"is_pvip":false,"replies":[{"id":"106801","content":"保证每周至少三篇哈，能快会尽量快 😅","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1621907071,"ip_address":"","comment_id":294274,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10211794869","product_id":100079901,"comment_content":"老师，能更新快点嘛","like_count":2,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520584,"discussion_content":"保证每周至少三篇哈，能快会尽量快 😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621907071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2311402,"avatar":"https://static001.geekbang.org/account/avatar/00/23/44/ea/8a9b868d.jpg","nickname":"琼斯基亚","note":"","ucode":"24892258DF0CC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376049,"discussion_content":"慢工出细活！不要着急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621941453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322537,"user_name":"meiyy","can_delete":false,"product_type":"c1","uid":1432942,"ip_address":"","ucode":"3414EE40061183","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/CCf2FKMh1bUTvpVpakXHG0GvJToWoclTyHs3MibR2ax7QM5PibCmHqlo7nsHNgE5yOQ1mWj47Cou3riaQfsqlFjsw/132","comment_is_top":false,"comment_ctime":1637473893,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5932441189","product_id":100079901,"comment_content":"最开始接触的是vue，后面接触react时感觉没有vue那么方便，因为视图不能自动收集依赖。但是有了hooks之后感觉找到了拆分复杂逻辑的神器。","like_count":1},{"had_liked":false,"id":300706,"user_name":"咚门","can_delete":false,"product_type":"c1","uid":1448473,"ip_address":"","ucode":"DD4E8734370BBF","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/19/5e4ca139.jpg","comment_is_top":false,"comment_ctime":1625318210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920285506","product_id":100079901,"comment_content":"当然是jsx了，直接让公用ui库写起来通俗易懂。","like_count":1},{"had_liked":false,"id":294581,"user_name":"Bug般的存在","can_delete":false,"product_type":"c1","uid":1573766,"ip_address":"","ucode":"7A61F7AA3B49A3","user_header":"https://static001.geekbang.org/account/avatar/00/18/03/86/c9051c6a.jpg","comment_is_top":false,"comment_ctime":1622006315,"is_pvip":false,"replies":[{"id":"106898","content":"call~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622017029,"ip_address":"","comment_id":294581,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5916973611","product_id":100079901,"comment_content":"all in js","like_count":1,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520725,"discussion_content":"call~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622017029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2798300,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/b2/dc/465ef595.jpg","nickname":"Geek_adab2dfsg","note":"","ucode":"F0D58460BBE5DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580203,"discussion_content":"不用记那么多语法，会js就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657973921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294438,"user_name":"琼斯基亚","can_delete":false,"product_type":"c1","uid":2311402,"ip_address":"","ucode":"24892258DF0CC2","user_header":"https://static001.geekbang.org/account/avatar/00/23/44/ea/8a9b868d.jpg","comment_is_top":false,"comment_ctime":1621941547,"is_pvip":false,"replies":[{"id":"106891","content":"一年前就支持啦~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622015528,"ip_address":"","comment_id":294438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916908843","product_id":100079901,"comment_content":"王老师什么时候Rekit也支持Hooks？","like_count":1,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520655,"discussion_content":"一年前就支持啦~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622015528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357592,"user_name":"秦广东","can_delete":false,"product_type":"c1","uid":1085370,"ip_address":"北京","ucode":"059EEAD8A7BDCF","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/ba/3450267b.jpg","comment_is_top":false,"comment_ctime":1663456292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663456292","product_id":100079901,"comment_content":"react的re-render机制让人不太爽啊","like_count":0},{"had_liked":false,"id":351650,"user_name":"Geek_adab2dfsg","can_delete":false,"product_type":"c1","uid":2798300,"ip_address":"","ucode":"F0D58460BBE5DE","user_header":"https://static001.geekbang.org/account/avatar/00/2a/b2/dc/465ef595.jpg","comment_is_top":false,"comment_ctime":1658048900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658048900","product_id":100079901,"comment_content":"sss","like_count":0},{"had_liked":false,"id":337518,"user_name":"Listart","can_delete":false,"product_type":"c1","uid":1260411,"ip_address":"","ucode":"684D424C5110B7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epvJ348UuHZDr5MTzIcIvNo4XCVazDUdr41eEGYWQqjqwQHN5SXl94dBhibTtbFfL9o21bzcWMq7Hg/132","comment_is_top":false,"comment_ctime":1646879019,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646879019","product_id":100079901,"comment_content":"最打动我的是React做到了在快速迭代的过程中保持了API的稳定。<br>这需要非常高超的抽象以确保核心足够支撑后续发展的很长一段时间。<br>同时也需要后续版本迭代过程，保持定力。<br>总之，这么广的用户规模下，还能做到API这么长时间的稳定，相当难得！","like_count":0},{"had_liked":false,"id":327955,"user_name":"Light 胖虎","can_delete":false,"product_type":"c1","uid":2876591,"ip_address":"","ucode":"D5FCFE14172D31","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e4/af/f8cf4bc2.jpg","comment_is_top":false,"comment_ctime":1640420664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640420664","product_id":100079901,"comment_content":"与vue对比，我认为最直观的不同的是hooks更注重的是状态的更新，就好像vuex的状态管理+watch，感觉这样使用更加直观更加好理解，充分体现了mvvm模式数据与视图的绑定（个人理解有问题欢迎指正）","like_count":0},{"had_liked":false,"id":326538,"user_name":"鱼腩","can_delete":false,"product_type":"c1","uid":2279433,"ip_address":"","ucode":"54C97E73A75854","user_header":"https://static001.geekbang.org/account/avatar/00/22/c8/09/b34b1473.jpg","comment_is_top":false,"comment_ctime":1639556079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639556079","product_id":100079901,"comment_content":"学了vue3，再看react，JSX很清新的感觉，在线预览代码很赞！","like_count":0},{"had_liked":false,"id":325676,"user_name":"MarkTang","can_delete":false,"product_type":"c1","uid":1165689,"ip_address":"","ucode":"58F3439A070B7E","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/79/68a73484.jpg","comment_is_top":false,"comment_ctime":1639096716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639096716","product_id":100079901,"comment_content":"之前买过老师的视频课，这次hooks果断支持","like_count":1},{"had_liked":false,"id":315208,"user_name":"gggso","can_delete":false,"product_type":"c1","uid":2789066,"ip_address":"","ucode":"B75C74CFBCA904","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8e/ca/d1ae3c65.jpg","comment_is_top":false,"comment_ctime":1633750108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633750108","product_id":100079901,"comment_content":"通俗易懂，点个赞，可以替换react官方的教程文档了","like_count":0},{"had_liked":false,"id":315053,"user_name":"我又不赶时间。","can_delete":false,"product_type":"c1","uid":1200690,"ip_address":"","ucode":"04501E6078421D","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/32/e908d277.jpg","comment_is_top":false,"comment_ctime":1633672457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633672457","product_id":100079901,"comment_content":"1. 轻量级，相比较angular JS<br>2. 接触React的时候，vue还在使用模板标签","like_count":0},{"had_liked":false,"id":315052,"user_name":"我又不赶时间。","can_delete":false,"product_type":"c1","uid":1200690,"ip_address":"","ucode":"04501E6078421D","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/32/e908d277.jpg","comment_is_top":false,"comment_ctime":1633672392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633672392","product_id":100079901,"comment_content":"1. 轻量级，相比较 angular JS","like_count":0},{"had_liked":false,"id":314796,"user_name":"ggbdpq","can_delete":false,"product_type":"c1","uid":2585019,"ip_address":"","ucode":"70BCCBA6245B8D","user_header":"https://static001.geekbang.org/account/avatar/00/27/71/bb/d219f46b.jpg","comment_is_top":false,"comment_ctime":1633438297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633438297","product_id":100079901,"comment_content":"React 最能打动我的地方概括就是简单易学。<br>一，JSX。混合JS与HTML的写法。<br>二，虚拟DOM机制。不需要手动操作DOM。<br>三，满足工作需求，迎合市场发展，激发兴趣与培养好奇心。","like_count":0},{"had_liked":false,"id":311879,"user_name":"李克勤","can_delete":false,"product_type":"c1","uid":2660079,"ip_address":"","ucode":"78917017E984FB","user_header":"","comment_is_top":false,"comment_ctime":1631520027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631520027","product_id":100079901,"comment_content":"熟悉js语法和H5的一些基本知识上手还是比较快的，以jsx这种方式，更直接处理数据，逻辑和渲染的关系。","like_count":0},{"had_liked":false,"id":306955,"user_name":"Geek_bing","can_delete":false,"product_type":"c1","uid":2064266,"ip_address":"","ucode":"4000A30EDAF71C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vkqibkINia6dxVOv5zia2zbkmQbrJUsQw8vDfiauib2DfyvJQ4PDUC7M8p4vqFiaQj70yYwIO8JlHFA450KPmgpsXlsw/132","comment_is_top":false,"comment_ctime":1628802723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628802723","product_id":100079901,"comment_content":"jsx，写法上更灵活；还有react背后优秀团队的背书；优秀丰富的周边生态。","like_count":0},{"had_liked":false,"id":303134,"user_name":"Geek_12f953","can_delete":false,"product_type":"c1","uid":2686412,"ip_address":"","ucode":"13C8FDB4617450","user_header":"","comment_is_top":false,"comment_ctime":1626605996,"is_pvip":false,"replies":[{"id":"109865","content":"👍🏻","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1626854262,"ip_address":"","comment_id":303134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626605996","product_id":100079901,"comment_content":"从vue转过来，觉得自定义hooks提取逻辑复用是我比较期待的","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523559,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626854262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298140,"user_name":"重生","can_delete":false,"product_type":"c1","uid":1173049,"ip_address":"","ucode":"8ABFEAD785184A","user_header":"https://static001.geekbang.org/account/avatar/00/11/e6/39/16208644.jpg","comment_is_top":false,"comment_ctime":1623922163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623922163","product_id":100079901,"comment_content":"function is No1","like_count":0},{"had_liked":false,"id":297537,"user_name":"健牌哥.","can_delete":false,"product_type":"c1","uid":1374132,"ip_address":"","ucode":"671B0247FFF223","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/b4/d0a6c7d2.jpg","comment_is_top":false,"comment_ctime":1623604008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623604008","product_id":100079901,"comment_content":"hook特性可以抽离绝大部分逻辑，让用户在大多数时间可以忘记HOC这个晦涩的用法；搭配jsx让代码逻辑变得更简洁直观。","like_count":0},{"had_liked":false,"id":296259,"user_name":"陶佳佳","can_delete":false,"product_type":"c1","uid":2649341,"ip_address":"","ucode":"650FA8DE051B1C","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/fd/0c5c254e.jpg","comment_is_top":false,"comment_ctime":1622865456,"is_pvip":false,"replies":[{"id":"107745","content":"跨域是需要服务器端提供 Access-Control-Allow-Origin 这个 header 来允许跨域请求的。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1623081631,"ip_address":"","comment_id":296259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622865456","product_id":100079901,"comment_content":"老师，进行异步请求的例子，出现跨域问题， 请问如何解决??","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521377,"discussion_content":"跨域是需要服务器端提供 Access-Control-Allow-Origin 这个 header 来允许跨域请求的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623081631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296224,"user_name":"守望","can_delete":false,"product_type":"c1","uid":1560187,"ip_address":"","ucode":"09FD14D30F26CB","user_header":"https://static001.geekbang.org/account/avatar/00/17/ce/7b/f9b418d8.jpg","comment_is_top":false,"comment_ctime":1622817437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622817437","product_id":100079901,"comment_content":"我怎么觉得react会用的和不会用写出来的是一个天一个地","like_count":0},{"had_liked":false,"id":296189,"user_name":"寇云","can_delete":false,"product_type":"c1","uid":1001332,"ip_address":"","ucode":"87181F16F83543","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/74/5e292ded.jpg","comment_is_top":false,"comment_ctime":1622798149,"is_pvip":false,"replies":[{"id":"107740","content":"赞！React 的颠覆式创新，和专注于 View 的方案优化，带来了繁荣的生态圈~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1623081264,"ip_address":"","comment_id":296189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622798149","product_id":100079901,"comment_content":"编程风格思想和繁荣的生态圈：<br>接触到Remotion(Write videos in React) &#47;React 3D&#47; react-pdf 这样的库之后是用react 组件的编程风格和思想去构建各种应用。当react-dom 可以被替换，让软件开发的方式有了很大的想象空间。<br>随着 TS + react的成熟，也让组件的使用者无需关注组件的内部实现，通过熟悉接口。就可以封装更复杂的应用。 繁荣的生态圈，可以不断的降低开发难度。软件开发越来越有想象力。 ","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521356,"discussion_content":"赞！React 的颠覆式创新，和专注于 View 的方案优化，带来了繁荣的生态圈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623081264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295931,"user_name":"腾挪","can_delete":false,"product_type":"c1","uid":1003853,"ip_address":"","ucode":"E80661F2235344","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/4d/0aceadde.jpg","comment_is_top":false,"comment_ctime":1622651087,"is_pvip":false,"replies":[{"id":"107460","content":"哈哈，咱要说点具体的~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622727574,"ip_address":"","comment_id":295931,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622651087","product_id":100079901,"comment_content":"React 简洁高效！","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521268,"discussion_content":"哈哈，咱要说点具体的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622727574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295718,"user_name":"小馋猫","can_delete":false,"product_type":"c1","uid":1387206,"ip_address":"","ucode":"9A4AF648E9D60E","user_header":"https://static001.geekbang.org/account/avatar/00/15/2a/c6/fab94c55.jpg","comment_is_top":false,"comment_ctime":1622556647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622556647","product_id":100079901,"comment_content":"JSX的本质是使用React.createElement方法创建组件实例，参数分别为组件名称，组件的属性，子组件","like_count":0},{"had_liked":false,"id":295332,"user_name":"珍惜眼前人","can_delete":false,"product_type":"c1","uid":1387988,"ip_address":"","ucode":"7443DA4F24E35B","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/d4/76ffbdfc.jpg","comment_is_top":false,"comment_ctime":1622370944,"is_pvip":false,"replies":[{"id":"107196","content":"React 和 JSX 最早是由 Facebook 的 Jordan Walke 发明的。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622388349,"ip_address":"","comment_id":295332,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622370944","product_id":100079901,"comment_content":"老师，想和您求证一下，jsx是早就出现的，只是被 react 发扬光大了，是吗？","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521037,"discussion_content":"React 和 JSX 最早是由 Facebook 的 Jordan Walke 发明的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622388349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295329,"user_name":"珍惜眼前人","can_delete":false,"product_type":"c1","uid":1387988,"ip_address":"","ucode":"7443DA4F24E35B","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/d4/76ffbdfc.jpg","comment_is_top":false,"comment_ctime":1622367903,"is_pvip":false,"replies":[{"id":"107195","content":"是的，JSX 是 React 的发明。因为确实方便，所以一些其它框架也开始采用。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622388221,"ip_address":"","comment_id":295329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622367903","product_id":100079901,"comment_content":"说到jsx, 请教下jsx是react 的一项发明么，说 jsx 是React.createElement 语法糖，但是现在vue3也有了jsx , 那是不是可以理解为jsx 已经是js的一种规范了","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521035,"discussion_content":"是的，JSX 是 React 的发明。因为确实方便，所以一些其它框架也开始采用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622388221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294860,"user_name":"不若吃茶去","can_delete":false,"product_type":"c1","uid":1308306,"ip_address":"","ucode":"1BD16C7B2F0DBE","user_header":"https://static001.geekbang.org/account/avatar/00/13/f6/92/68143a6a.jpg","comment_is_top":false,"comment_ctime":1622114072,"is_pvip":false,"replies":[{"id":"107049","content":"活到老学到老~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622118813,"ip_address":"","comment_id":294860,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1622114072","product_id":100079901,"comment_content":"为了生存，公司用这个，不会用就要失业","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520846,"discussion_content":"活到老学到老~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622118813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308306,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f6/92/68143a6a.jpg","nickname":"不若吃茶去","note":"","ucode":"1BD16C7B2F0DBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376532,"discussion_content":"冲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622178302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294851,"user_name":"尽兴🎉","can_delete":false,"product_type":"c1","uid":1567419,"ip_address":"","ucode":"A8ECF43E8AC38A","user_header":"https://static001.geekbang.org/account/avatar/00/17/ea/bb/eae3e123.jpg","comment_is_top":false,"comment_ctime":1622110148,"is_pvip":true,"replies":[{"id":"107047","content":"其实这个模式对开发和用户暂时都没有太多的感知 🙂","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622118679,"ip_address":"","comment_id":294851,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622110148","product_id":100079901,"comment_content":"react的 Concurrent 模式可帮助应用保持响应，并根据用户的设备性能和网速进行适当的调整。<br>官网看到这句话真的惊的一批 这才是前端吗","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520840,"discussion_content":"其实这个模式对开发和用户暂时都没有太多的感知 🙂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622118679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294756,"user_name":"独白","can_delete":false,"product_type":"c1","uid":1700211,"ip_address":"","ucode":"EDC477BD20B032","user_header":"https://static001.geekbang.org/account/avatar/00/19/f1/73/6f7e3b35.jpg","comment_is_top":false,"comment_ctime":1622082649,"is_pvip":false,"replies":[{"id":"107041","content":"多谢支持~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622116670,"ip_address":"","comment_id":294756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622082649","product_id":100079901,"comment_content":"从rekit认识大佬的，看到您的课，果断下手了。希望老师能多布置一些作业。哈哈哈","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520792,"discussion_content":"多谢支持~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622116670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294524,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1621990508,"is_pvip":false,"replies":[{"id":"106896","content":"感谢支持~","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1622015757,"ip_address":"","comment_id":294524,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1621990508","product_id":100079901,"comment_content":"<br>学了这节课后，感觉自己入门了。<br>异步请求的例子又非常贴近实战，于是果断下单。<br>","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520695,"discussion_content":"感谢支持~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622015757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}