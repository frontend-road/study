{"id":42520,"title":"15 | 二分查找（上）：如何用最省内存的方式实现快速查找功能？","content":"<p>今天我们讲一种针对有序数据集合的查找算法：二分查找（Binary Search）算法，也叫折半查找算法。二分查找的思想非常简单，很多非计算机专业的同学很容易就能理解，但是看似越简单的东西往往越难掌握好，想要灵活应用就更加困难。</p><p>老规矩，我们还是来看一道思考题。</p><p>假设我们有1000万个整数数据，每个数据占8个字节，<strong><span class=\"orange\">如何设计数据结构和算法，快速判断某个整数是否出现在这1000万数据中？</span></strong> 我们希望这个功能不要占用太多的内存空间，最多不要超过100MB，你会怎么做呢？带着这个问题，让我们进入今天的内容吧！</p><h2>无处不在的二分思想</h2><p>二分查找是一种非常简单易懂的快速查找算法，生活中到处可见。比如说，我们现在来做一个猜字游戏。我随机写一个0到99之间的数字，然后你来猜我写的是什么。猜的过程中，你每猜一次，我就会告诉你猜的大了还是小了，直到猜中为止。你来想想，如何快速猜中我写的数字呢？</p><p>假设我写的数字是23，你可以按照下面的步骤来试一试。（如果猜测范围的数字有偶数个，中间数有两个，就选择较小的那个。）</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/9b/9dadf04cdfa7b3724e0df91da7cacd9b.jpg?wh=1142*846\" alt=\"\"></p><p>7次就猜出来了，是不是很快？这个例子用的就是二分思想，按照这个思想，即便我让你猜的是0到999的数字，最多也只要10次就能猜中。不信的话，你可以试一试。</p><!-- [[[read_end]]] --><p>这是一个生活中的例子，我们现在回到实际的开发场景中。假设有1000条订单数据，已经按照订单金额从小到大排序，每个订单金额都不同，并且最小单位是元。我们现在想知道是否存在金额等于19元的订单。如果存在，则返回订单数据，如果不存在则返回null。</p><p>最简单的办法当然是从第一个订单开始，一个一个遍历这1000个订单，直到找到金额等于19元的订单为止。但这样查找会比较慢，最坏情况下，可能要遍历完这1000条记录才能找到。那用二分查找能不能更快速地解决呢？</p><p>为了方便讲解，我们假设只有10个订单，订单金额分别是：8，11，19，23，27，33，45，55，67，98。</p><p>还是利用二分思想，每次都与区间的中间数据比对大小，缩小查找区间的范围。为了更加直观，我画了一张查找过程的图。其中，low和high表示待查找区间的下标，mid表示待查找区间的中间元素下标。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/29/8bce81259abf0e9a06f115e22586b829.jpg?wh=1142*819\" alt=\"\"></p><p>看懂这两个例子，你现在对二分的思想应该掌握得妥妥的了。我这里稍微总结升华一下，<strong>二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为0</strong>。</p><h2>O(logn)惊人的查找速度</h2><p>二分查找是一种非常高效的查找算法，高效到什么程度呢？我们来分析一下它的时间复杂度。</p><p>我们假设数据大小是n，每次查找后数据都会缩小为原来的一半，也就是会除以2。最坏情况下，直到查找区间被缩小为空，才停止。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/94/d1e4fa1542e187184c87c545c2fe4794.jpg?wh=1142*337\" alt=\"\"></p><p>可以看出来，这是一个等比数列。其中n/2<sup>k</sup>=1时，k的值就是总共缩小的次数。而每一次缩小操作只涉及两个数据的大小比较，所以，经过了k次区间缩小操作，时间复杂度就是O(k)。通过n/2<sup>k</sup>=1，我们可以求得k=log<sub>2</sub>n，所以时间复杂度就是O(logn)。</p><p>二分查找是我们目前为止遇到的第一个时间复杂度为O(logn)的算法。后面章节我们还会讲堆、二叉树的操作等等，它们的时间复杂度也是O(logn)。我这里就再深入地讲讲O(logn)这种<strong>对数时间复杂度</strong>。这是一种极其高效的时间复杂度，有的时候甚至比时间复杂度是常量级O(1)的算法还要高效。为什么这么说呢？</p><p>因为logn是一个非常“恐怖”的数量级，即便n非常非常大，对应的logn也很小。比如n等于2的32次方，这个数很大了吧？大约是42亿。也就是说，如果我们在42亿个数据中用二分查找一个数据，最多需要比较32次。</p><p>我们前面讲过，用大O标记法表示时间复杂度的时候，会省略掉常数、系数和低阶。对于常量级时间复杂度的算法来说，O(1)有可能表示的是一个非常大的常量值，比如O(1000)、O(10000)。所以，常量级时间复杂度的算法有时候可能还没有O(logn)的算法执行效率高。</p><p>反过来，对数对应的就是指数。有一个非常著名的“阿基米德与国王下棋的故事”，你可以自行搜索一下，感受一下指数的“恐怖”。这也是为什么我们说，指数时间复杂度的算法在大规模数据面前是无效的。</p><h2>二分查找的递归与非递归实现</h2><p>实际上，简单的二分查找并不难写，注意我这里的“简单”二字。下一节，我们会讲到二分查找的变体问题，那才是真正烧脑的。今天，我们来看如何来写最简单的二分查找。</p><p><strong>最简单的情况</strong>就是<strong>有序数组中不存在重复元素</strong>，我们在其中用二分查找值等于给定值的数据。我用Java代码实现了一个最简单的二分查找算法。</p><pre><code>public int bsearch(int[] a, int n, int value) {\n  int low = 0;\n  int high = n - 1;\n\n  while (low &lt;= high) {\n    int mid = (low + high) / 2;\n    if (a[mid] == value) {\n      return mid;\n    } else if (a[mid] &lt; value) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  return -1;\n}\n</code></pre><p>这个代码我稍微解释一下，low、high、mid都是指数组下标，其中low和high表示当前查找的区间范围，初始low=0， high=n-1。mid表示[low, high]的中间位置。我们通过对比a[mid]与value的大小，来更新接下来要查找的区间范围，直到找到或者区间缩小为0，就退出。如果你有一些编程基础，看懂这些应该不成问题。现在，我就着重强调一下<strong>容易出错的3个地方</strong>。</p><h3>1.循环退出条件</h3><p>注意是low&lt;=high，而不是low&lt;high。</p><h3>2.mid的取值</h3><p>实际上，mid=(low+high)/2这种写法是有问题的。因为如果low和high比较大的话，两者之和就有可能会溢出。改进的方法是将mid的计算方式写成low+(high-low)/2。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以2操作转化成位运算low+((high-low)&gt;&gt;1)。因为相比除法运算来说，计算机处理位运算要快得多。</p><h3>3.low和high的更新</h3><p>low=mid+1，high=mid-1。注意这里的+1和-1，如果直接写成low=mid或者high=mid，就可能会发生死循环。比如，当high=3，low=3时，如果a[3]不等于value，就会导致一直循环不退出。</p><p>如果你留意我刚讲的这三点，我想一个简单的二分查找你已经可以实现了。<strong>实际上，二分查找除了用循环来实现，还可以<strong><strong>用</strong></strong>递归来实现</strong>，过程也非常简单。</p><p>我用Java语言实现了一下这个过程，正好你可以借此机会回顾一下写递归代码的技巧。</p><pre><code>// 二分查找的递归实现\npublic int bsearch(int[] a, int n, int val) {\n  return bsearchInternally(a, 0, n - 1, val);\n}\n\nprivate int bsearchInternally(int[] a, int low, int high, int value) {\n  if (low &gt; high) return -1;\n\n  int mid =  low + ((high - low) &gt;&gt; 1);\n  if (a[mid] == value) {\n    return mid;\n  } else if (a[mid] &lt; value) {\n    return bsearchInternally(a, mid+1, high, value);\n  } else {\n    return bsearchInternally(a, low, mid-1, value);\n  }\n}\n</code></pre><h2>二分查找应用场景的局限性</h2><p>前面我们分析过，二分查找的时间复杂度是O(logn)，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，它的应用场景是有很大局限性的。那什么情况下适合用二分查找，什么情况下不适合呢？</p><p><strong>首先，二分查找依赖的是顺序表结构，简单点说就是数组。</strong></p><p>那二分查找能否依赖其他数据结构呢？比如链表。答案是不可以的，主要原因是二分查找算法需要按照下标随机访问元素。我们在数组和链表那两节讲过，数组按照下标随机访问数据的时间复杂度是O(1)，而链表随机访问的时间复杂度是O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。</p><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。</p><p><strong>其次，二分查找针对的是有序数据。</strong></p><p>二分查找对这一点的要求比较苛刻，数据必须是有序的。如果数据没有序，我们需要先排序。前面章节里我们讲到，排序的时间复杂度最低是O(nlogn)。所以，如果我们针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p><p>但是，如果我们的数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p><p>所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。那针对动态数据集合，如何在其中快速查找某个数据呢？别急，等到二叉树那一节我会详细讲。</p><p><strong>再次，数据量太小不适合二分查找。</strong></p><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如我们在一个大小为10的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，我都推荐使用二分查找。比如，数组中存储的都是长度超过300的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p><p><strong>最后，数据量太大也不适合二分查找。</strong></p><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，我们有1GB大小的数据，如果希望用数组来存储，那就需要1GB的连续内存空间。</p><p>注意这里的“连续”二字，也就是说，即便有2GB的内存空间剩余，但是如果这剩余的2GB内存空间都是零散的，没有连续的1GB大小的内存空间，那照样无法申请一个1GB大小的数组。而我们的二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><h2>解答开篇</h2><p>二分查找的理论知识你应该已经掌握了。我们来看下开篇的思考题：如何在1000万个整数中快速查找某个整数？</p><p>这个问题并不难。我们的内存限制是100MB，每个数据大小是8字节，最简单的办法就是将数据存储在数组中，内存占用差不多是80MB，符合内存的限制。借助今天讲的内容，我们可以先对这1000万数据从小到大排序，然后再利用二分查找算法，就可以快速地查找想要的数据了。</p><p>看起来这个问题并不难，很轻松就能解决。实际上，它暗藏了“玄机”。如果你对数据结构和算法有一定了解，知道散列表、二叉树这些支持快速查找的动态数据结构。你可能会觉得，用散列表和二叉树也可以解决这个问题。实际上是不行的。</p><p>虽然大部分情况下，用二分查找可以解决的问题，用散列表、二叉树都可以解决。但是，我们后面会讲，不管是散列表还是二叉树，都会需要比较多的额外的内存空间。如果用散列表或者二叉树来存储这1000万的数据，用100MB的内存肯定是存不下的。而二分查找底层依赖的是数组，除了数据本身之外，不需要额外存储其他信息，是最省内存空间的存储方式，所以刚好能在限定的内存大小下解决这个问题。</p><h2>内容小结</h2><p>今天我们学习了一种针对有序数据的高效查找算法，二分查找，它的时间复杂度是O(logn)。</p><p>二分查找的核心思想理解起来非常简单，有点类似分治思想。即每次都通过跟区间中的中间元素对比，将待查找的区间缩小为一半，直到找到要查找的元素，或者区间被缩小为0。但是二分查找的代码实现比较容易写错。你需要着重掌握它的三个容易出错的地方：循环退出条件、mid的取值，low和high的更新。</p><p>二分查找虽然性能比较优秀，但应用场景也比较有限。底层必须依赖数组，并且还要求数据是有序的。对于较小规模的数据查找，我们直接使用顺序遍历就可以了，二分查找的优势并不明显。二分查找更适合处理静态数据，也就是没有频繁的数据插入、删除操作。</p><h2>课后思考</h2><ol>\n<li>\n<p>如何编程实现“求一个数的平方根”？要求精确到小数点后6位。</p>\n</li>\n<li>\n<p>我刚才说了，如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？如果你自己推导一下，你就会深刻地认识到，为何我们会选择用数组而不是链表来实现二分查找了。</p>\n</li>\n</ol><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","comments":[{"had_liked":false,"id":35140,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":true,"comment_ctime":1540434998,"is_pvip":false,"replies":[{"id":"12579","content":"分析的很好 👍 同学们可以把这条顶上去了","user_name":"作者回复","comment_id":35140,"uid":"1190123","ip_address":"","utype":1,"ctime":1540516804,"user_name_real":"gg"}],"discussion_count":33,"race_medal":0,"score":"9.2233767671542006e+18","product_id":100017301,"comment_content":"说说第二题吧，感觉争议比较大:<br>假设链表长度为n，二分查找每次都要找到中间点(计算中忽略奇偶数差异): <br>第一次查找中间点，需要移动指针n&#47;2次；<br>第二次，需要移动指针n&#47;4次；<br>第三次需要移动指针n&#47;8次；<br>......<br>以此类推，一直到1次为值<br><br>总共指针移动次数(查找次数) = n&#47;2 + n&#47;4 + n&#47;8  + ...+ 1，这显然是个等比数列，根据等比数列求和公式：Sum = n - 1.  <br><br>最后算法时间复杂度是：O(n-1)，忽略常数，记为O(n)，时间复杂度和顺序查找时间复杂度相同<br><br>但是稍微思考下，在二分查找的时候，由于要进行多余的运算，严格来说，会比顺序查找时间慢<br><br><br>-----------------<br>以上分析，不知道是否准确，还请老师解答","like_count":1102,"discussions":[{"author":{"id":1012690,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/73/d2/1ed5d6bc.jpg","nickname":"浅吟且行的未来","note":"","ucode":"029FE508EDDF70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204325,"discussion_content":"O(n)只是链表移动指针的复杂度，为什么不算上迭代的O(logn)呢？这样就成了O(nlogn，求解)","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1584154734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1390375,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","nickname":"kaiser","note":"","ucode":"F9438786E9A57B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1012690,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/73/d2/1ed5d6bc.jpg","nickname":"浅吟且行的未来","note":"","ucode":"029FE508EDDF70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219818,"discussion_content":"其实是查找中点的次数，数组查找中点只需要一次就可以搞定，链表需要移动 n 个元素，数组最后找到了中点，就执行了 k 次，k =logn 时间复杂度是 O(logn)，而链表找找到中点需要移动指针（n+n/2+n/4+...+n/2^k）= n-1 次, 时间复杂度是 O(n)","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1585812897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204325,"ip_address":""},"score":219818,"extra":""},{"author":{"id":1512634,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/ba/2a832c9d.jpg","nickname":"婉球儿","note":"","ucode":"E9FAAB0A842F07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1012690,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/73/d2/1ed5d6bc.jpg","nickname":"浅吟且行的未来","note":"","ucode":"029FE508EDDF70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248911,"discussion_content":"链表中寻找中点的过程本身就是一种迭代的过程","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587902736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204325,"ip_address":""},"score":248911,"extra":""},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390375,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","nickname":"kaiser","note":"","ucode":"F9438786E9A57B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581075,"discussion_content":"看了你的讲解，豁然开朗。不然我还以为是两者的乘法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658485711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219818,"ip_address":""},"score":581075,"extra":""}]},{"author":{"id":1751242,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b8/ca/93b716f7.jpg","nickname":"洪兴掌管一代","note":"","ucode":"4B22C0B99A60F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309152,"discussion_content":"我不认同这位同学说的 我感觉 每一次从链表中查取数据都是从索引为0的位置开始往后找  所以第一次查找是指针移动n/2没问题  但是之后第二次有两种可能啊 有可能是n/4 也有可能是3n/4啊    除非说自己写一个链表 否则我们是不可以操纵指针从上一次的middle位置开始向后遍历的啊？欢迎大家给我指正","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1601198636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1940931,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9d/c3/54dd433b.jpg","nickname":"彩虹雨·闲一","note":"","ucode":"A9B4A7DB7B78DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1751242,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b8/ca/93b716f7.jpg","nickname":"洪兴掌管一代","note":"","ucode":"4B22C0B99A60F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315446,"discussion_content":"使用middle记录n/2的位置，所以3n/4也只是在n/2内","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1603275919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309152,"ip_address":""},"score":315446,"extra":""},{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":1751242,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b8/ca/93b716f7.jpg","nickname":"洪兴掌管一代","note":"","ucode":"4B22C0B99A60F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571682,"discussion_content":"如果在后半区间直接移动mid就行了，还是n/4。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652344279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309152,"ip_address":""},"score":571682,"extra":""}]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70307,"discussion_content":"是， O(logn) 退化到 O(n) ,和直接顺序遍历差不多了 甚至更慢，所以 链表不适合二分查找","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575344185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459413,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","nickname":"爱吃胡萝卜","note":"","ucode":"35FCF84D1E04C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243144,"discussion_content":"但是你这个是双链表结构才能做到，如果是单向链表的话，你这个就不成立了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587524101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1220566,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9f/d6/f66133b4.jpg","nickname":"吴贤龙","note":"","ucode":"45085FE86D6030","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1459413,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","nickname":"爱吃胡萝卜","note":"","ucode":"35FCF84D1E04C5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301798,"discussion_content":"单链表也可以","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598663927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":243144,"ip_address":""},"score":301798,"extra":""},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1220566,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9f/d6/f66133b4.jpg","nickname":"吴贤龙","note":"","ucode":"45085FE86D6030","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557450,"discussion_content":"当结果在前半区时，high=mid-1，对于链表来说得知道mid的前驱节点。要再遍历一次吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647825787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301798,"ip_address":""},"score":557450,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427460,"discussion_content":"分析的很好 👍 同学们可以把这条顶上去了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1540516804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2272953,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ae/b9/12a8ec62.jpg","nickname":"松","note":"","ucode":"59BB9AAC7863B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353332,"discussion_content":"g","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615129562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","nickname":"朱雯","note":"","ucode":"064C45FBF6B51F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299645,"discussion_content":"哪里需要什么快慢链表，只需要多几个指针，每次查都记录一堆的快慢指针就行了，只是代码写起来非常麻烦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597757932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590454,"avatar":"https://static001.geekbang.org/account/avatar/00/18/44/b6/5b3061af.jpg","nickname":"禾沐","note":"","ucode":"7DE46C75777437","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380668,"discussion_content":"第一，如你所分析基于链表的二分查找时间复杂度是O（n），基于数组的二分查找时间复杂度是O（logn），当然后者更优\n第二，链表需要额外存储指针，空间复杂度更高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624621724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2611431,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/guTSzEA3CV4YicMQlZEW4POWiaKtlDljrPzLY8dIESpicQBs9XfTu7dicz9THUm7InBf4NZNeLI3X4WHRxDKyjCkKw/132","nickname":"GeekTerry","note":"","ucode":"7C05FA14D90FC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380400,"discussion_content":"等比級數的公式：a_0*（1－r^k）/（1－r）。(r=1/2; k = log n; a_0=n/2 )","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624468894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162862,"avatar":"https://static001.geekbang.org/account/avatar/00/11/be/6e/46a5da10.jpg","nickname":"Hong","note":"","ucode":"2E7FB03BFEC8F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359441,"discussion_content":"第一次n/2怎么做到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616202348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1023272,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9d/28/bcaf070d.jpg","nickname":"壹","note":"","ucode":"335D34216066E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1162862,"avatar":"https://static001.geekbang.org/account/avatar/00/11/be/6e/46a5da10.jpg","nickname":"Hong","note":"","ucode":"2E7FB03BFEC8F9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363478,"discussion_content":"快慢指针？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617202421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359441,"ip_address":""},"score":363478,"extra":""},{"author":{"id":1547466,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9c/ca/1b01098e.jpg","nickname":"Lee","note":"","ucode":"45CDD6604732AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1023272,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9d/28/bcaf070d.jpg","nickname":"壹","note":"","ucode":"335D34216066E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366960,"discussion_content":"链表的长度\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618225045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":363478,"ip_address":""},"score":366960,"extra":""}]},{"author":{"id":1073657,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/1mQHJjAyFjypbiaheQ9hDWRoictrVn2VggIZiaPLm50UiatHu9NqExMicScs9f7zYicbTQPliatTT18hr4csibRh4ARYbA/132","nickname":"leo","note":"","ucode":"614A2F77A6B553","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352469,"discussion_content":"这个n如果很大或者比较的函数耗时长，那二分就快呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614747418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2333067,"avatar":"https://static001.geekbang.org/account/avatar/00/23/99/8b/0f15f4aa.jpg","nickname":"SFWL0","note":"","ucode":"A8DB56B2D8A87F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332171,"discussion_content":"等比数列求和是2n-2吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607082040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294925,"discussion_content":"太棒了，这才是正确答案！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596030871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583499,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/8b/3629c0f8.jpg","nickname":"游山行人","note":"","ucode":"E559BD0A3C6484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218994,"discussion_content":"第一次是n/2说明你不是用快慢指针做的对吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585721385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397351,"avatar":"https://static001.geekbang.org/account/avatar/00/15/52/67/fcba0967.jpg","nickname":"zapup","note":"","ucode":"388D6BB5D7B137","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213560,"discussion_content":"请问使用主定理推导的话，是不是 T(n) = T(n/2) + O(n) ？（双向链表+快慢指针）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585105473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80019,"discussion_content":"请教一下第二题.\n有一个疑问, 如果链表进行二分查询, 查询链表后半段,是不是已找到的中间链表继续往后查找 , 所以是 n/2 对不对? \n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576138144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":80205,"discussion_content":"建议你再想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576155358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":80019,"ip_address":""},"score":80205,"extra":""},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80934,"discussion_content":"第一次找到之后中间节点知道了 n/2 , \n也就是知道了前半段和后半段, 然后分别从各自段(前半段/后半段)从头开始又是n/2 ? 是这个意思?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576205159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":80205,"ip_address":""},"score":80934,"extra":""},{"author":{"id":2016786,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c6/12/7c36aa3a.jpg","nickname":"Black船长","note":"","ucode":"B0B73E8DEB56C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":285336,"discussion_content":"用快慢指针去搜索链表的中点。第一次查找中点需要n/2次（总共是n个元素）， 第二次需要 n/4次 (因为是对第一次剩余的n/2个元素做中点查找)，后面以此类推","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592812182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":80934,"ip_address":""},"score":285336,"extra":""}]},{"author":{"id":1010957,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6d/0d/e3fa096f.jpg","nickname":"拓","note":"","ucode":"AC1940ECC25436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78174,"discussion_content":"等比数列求和 不是 Sum = n - 2吗 ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575982304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183424,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/c0/95fa2666.jpg","nickname":"山楂树","note":"","ucode":"1D59FC0C560BCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39782,"discussion_content":"这得是双向链表才可以吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571985268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251016,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/c8/980776fc.jpg","nickname":"走马","note":"","ucode":"EEFE8F7590FFA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5070,"discussion_content":"顺序查找会挨个比较，和二分查找相比这部分怎么考虑的 ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565923688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1258401,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a1/f3835f01.jpg","nickname":"社会猪","note":"","ucode":"CFF5EA7F247373","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251016,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/c8/980776fc.jpg","nickname":"走马","note":"","ucode":"EEFE8F7590FFA4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14705,"discussion_content":"aaaa","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568777563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5070,"ip_address":""},"score":14705,"extra":""},{"author":{"id":1473900,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7d/6c/e7163342.jpg","nickname":"邓海涵","note":"","ucode":"DCCA91C3B4CBAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251016,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/c8/980776fc.jpg","nickname":"走马","note":"","ucode":"EEFE8F7590FFA4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68290,"discussion_content":"二分查找的核心想法就是找中点，每次过滤掉一半数据，减少比较的次数。但是链表为了找到中点需要移动指针，时间复杂度分析就是层主回复的那样。而顺序查找是移动指针挨个比较，从时间复杂度考虑都是花在了移动指针上都是O(n)。二分查找用在链表上没有优势。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575208172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5070,"ip_address":""},"score":68290,"extra":""}]}]},{"had_liked":false,"id":34879,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":true,"comment_ctime":1540344565,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"9.2233725366112993e+18","product_id":100017301,"comment_content":"因为要精确到后六位，可以先用二分查找出整数位，然后再二分查找小数第一位，第二位，到第六位。<br><br>整数查找很简单，判断当前数小于+1后大于即可找到，<br><br>小数查找举查找小数后第一位来说，从x.0到(x+1).0，查找终止条件与整数一样，当前数小于，加0.1大于，<br><br>后面的位数以此类推，可以用x*10^(-i)通项来循环或者递归，终止条件是i&gt;6，<br><br>想了一下复杂度，每次二分是logn，包括整数位会查找7次，所以时间复杂度为7logn。空间复杂度没有开辟新的储存空间，空间复杂度为1。<br><br>没有具体用代码实现，只是思路，还请多多指正。之后会用js去实际实现。","like_count":117,"discussions":[{"author":{"id":1212912,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","nickname":"Ifdevil","note":"","ucode":"79DB0ADE9AD082","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266952,"discussion_content":"Java实现：\npublic static double square(int target){\n        double base = 0;\n        int l = 0,r = 9;\n        double step = 10;\n        for (int i = 0;i < 7 ;i++){\n            step *= 0.1;\n            while (l <= r){\n                int middle = l + (r - l)/2;\n                if(Math.pow((base+middle*step),2) == target){\n                    return middle;\n                }\n                if(Math.pow((base+middle*step),2) < target){\n                    l = middle + 1;\n                }\n                if(Math.pow((base+middle*step),2) > target){\n                    r = middle - 1;\n                }\n            }\n            base += (r)*step;\n            l = 0;\n            r = 9;\n        }\n        return base;\n    }","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1589563192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1600599,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6c/57/bb5885d1.jpg","nickname":"foree","note":"","ucode":"D1F053C369D656","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1212912,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","nickname":"Ifdevil","note":"","ucode":"79DB0ADE9AD082","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295669,"discussion_content":"只能处理10平方的值的平方根，超了就是9.999...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596282466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":266952,"ip_address":""},"score":295669,"extra":""},{"author":{"id":1442882,"avatar":"https://static001.geekbang.org/account/avatar/00/16/04/42/8e41c126.jpg","nickname":"Easltr","note":"","ucode":"DC6E6F76280549","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1212912,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","nickname":"Ifdevil","note":"","ucode":"79DB0ADE9AD082","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307789,"discussion_content":"你试试目标值是1000的时候。。。结果是9.999","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600760340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":266952,"ip_address":""},"score":307789,"extra":""},{"author":{"id":2372063,"avatar":"https://static001.geekbang.org/account/avatar/00/24/31/df/2988f356.jpg","nickname":"better~","note":"","ucode":"A8243C5D4F935D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1212912,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","nickname":"Ifdevil","note":"","ucode":"79DB0ADE9AD082","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376915,"discussion_content":"其实针对评论下所说的问题，因为他这里设置的整数部分的 l 和 r 是0～9导致的，这个设置对于小数部分是合理的，整数部分的话，可以优化下，比如先取出整数部分 d，然后将 r 取值为Math.sqrt(d)就行（这里不能用sqrt的话，就用其他方法xxx），只是提供一个大概思路，整体上来说Ifdevil写的挺不错的，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622424756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":266952,"ip_address":""},"score":376915,"extra":""}]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316168,"discussion_content":"这个思路愣是没看懂。是不是省略表达法？","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1603370322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259123,"discussion_content":"// Java 实现\n/**\n     * 求一个数的平方根，并保留指定精度\n     *\n     * @param n         给定数字，支持任意正数\n     * @param precision 保留精度\n     * @return 计算结果\n     */\n    public double sqrt(double n, int precision) {\n        if (n < 0) return Double.NaN;\n\n        double low = 0;\n        double high = n;\n        double ret = 0;\n\n        // 保留 precision 位小数\n        StringBuilder sb = new StringBuilder(&#34;0.&#34;);\n        for (int i = 0; i < precision; i++) sb.append(&#34;0&#34;);\n        DecimalFormat df = new DecimalFormat(sb.toString());\n\n        // 计算整数位和小数位，并考虑到四舍五入\n        for (int i = 0; i < precision + 2; i++) {\n            if (i > 0) {\n                low = 1;\n                high = 9;\n            }\n            while (low <= high) {\n                double mid = (low + high) / 2;\n                double tmp = BigDecimal.valueOf(ret).add(BigDecimal.valueOf(mid * Math.pow(10, -i))).doubleValue();\n                if (Math.pow(tmp, 2) == n) {\n                    return Double.parseDouble(df.format(tmp));\n                } else if (Math.pow(tmp, 2) < n) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            ret += high * Math.pow(10, -i);\n        }\n\n        return Double.parseDouble(df.format(ret));\n    }","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1588762194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452093,"avatar":"https://static001.geekbang.org/account/avatar/00/16/28/3d/36bed83a.jpg","nickname":"傻蛋黄握鱼","note":"","ucode":"591C78EDBEF9ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48814,"discussion_content":"cpp实现，支持小于1的计算，没写负数检查\n整数和小数部分求解分开，暂时没想到好的方法合并\n显示六位小数需要包含 <iomanip> 头文件调整一下输出格式\n另外精确到第六位需要计算到第七位，看第六位是否需要四舍五入+1，我没记错精确到第六位的意思吧？\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\ndouble mySqrt(double val)\n{\t\t\n\tint low=0, high=val, mid = 0;\n\tif (val > 1)\n\t{\n\t\twhile (low < high)\n\t\t{\n\t\t\tmid = (low + high) /2;\n\t\t\tif (mid*mid == val) return mid;\t\t\t\n\t\t\telse if (mid*mid < val)\n\t\t\t{\n\t\t\t\tif ((mid + 1)*(mid + 1) == val) return mid + 1;\n\t\t\t\telse if ((mid + 1)*(mid + 1) > val) break;\n\t\t\t\tlow = mid;\n\t\t\t}\n\t\t\telse high = mid;\n\t\t}\n\t}\n\telse mid = 0;\n\n\tdouble sMid, sLow, sHigh;\n\tdouble pos = 1;\n\tsLow = mid, sHigh = mid + pos;\n\tsMid = (sLow + sHigh) / 2;\n\n\tfor (int i = 0; i < 7; i++)\n\t{\t\t\n\t\tpos /= 10;\n\t\twhile (sLow < sHigh)\n\t\t{\n\t\t\tsMid = (sLow + sHigh) / 2;\n\t\t\tif (sMid*sMid < val)\n\t\t\t{\n\t\t\t\tif ((sMid + pos)*(sMid + pos) > val) break;\n\t\t\t\telse if ((sMid + pos)*(sMid + pos) == val) return sMid + pos;\n\t\t\t\tsLow = sMid;\n\t\t\t}\n\t\t\telse if (sMid*sMid > val) sHigh = sMid;\n\t\t\telse return sMid;\n\t\t}\n\t\tsLow = sMid, sHigh = sMid + pos; \n\t}\n\treturn sMid;\n}\n// 输出格式调整\ncout << fixed << setprecision(6) << mySqrt(0.5) << endl;","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573529635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1742323,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/95/f3/2fcbeb0a.jpg","nickname":"大禾","note":"","ucode":"841369DDF985A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221635,"discussion_content":"多谢提供思路，参考实现了golang循环版本，\n func squareRoot(num ,precision uint) float64 {\n      lo:=0.0\n      hi,v:= float64(num),float64(num)\n       t:=-1.0\n       for i:=1.0;i<=float64(precision);i++{\n           ii:=0\n           loop: for lo<=hi{//===方式1===\n           //loop: for lo<hi{ //===方式2===\n                mid := lo + float64(int64(hi-lo) >> 1) //===1===\n                //mid := lo + (hi-lo) /2 //===2===\n                tLo :=math.Pow(mid,2)\n                l := math.Pow(0.1, i)\n                tHi := math.Pow(mid+l,2)\n                compare := tLo - v\n                compareHi := tHi - v\n                if compare > 0 {//mid过大\n                     hi = mid-l//===1===\n                    //hi=mid//===2===\n                } else if compare<=0 &amp;&amp; compareHi>0{\n                     t = mid\n                     break loop\n                }else{//mid过小\n                      lo = mid+l//===1===\n                     //lo =mid//===2===\n                }\n                ii++\n                fmt.Println(&#34;获取精度第&#34;,i,&#34;位的第&#34;,ii,&#34;次,得到mid为&#34;,mid)\n          }\n                fmt.Println(v,&#34;的平方根小数点&#34;,i,&#34;位=&#34;,t,t*t)\n                lo = t\n         }\n         float := strconv.FormatFloat(t, &#39;f&#39;, int(precision), 64)//会四舍五入\n        parseFloat, _ := strconv.ParseFloat(float, 64)\n        return parseFloat\n }\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586016863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1347740,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/9c/53d0f906.jpg","nickname":"黄豆豆","note":"","ucode":"5D47A4E3BAD3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1742323,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/95/f3/2fcbeb0a.jpg","nickname":"大禾","note":"","ucode":"841369DDF985A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566122,"discussion_content":"golang是go语言官网的名字，这个语言真正的名字其实就叫做go","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650606502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221635,"ip_address":""},"score":566122,"extra":""}]},{"author":{"id":2668694,"avatar":"https://static001.geekbang.org/account/avatar/00/28/b8/96/716ba431.jpg","nickname":"苏成","note":"","ucode":"80A8E7B243DD73","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566125,"discussion_content":"//java 求某个数的平方根，精确到小数点后6位\n    public static double sqrt(int n){\n        double ret = 0;\n        double step = 10;\n       for( int i  = 0; i &lt; 7; ++i ){\n           step *= 0.1;\n           while( ret * ret &lt; n ){\n               if( (ret + step) * (ret + step) &gt; n )\n                   break;\n               ret += step;\n               if( ret * ret == n )\n                   return ret;\n           }\n       }\n\n       return ret;\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650607512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1489525,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9X140JXPuaDB8PibXpwFWds6mZvg1w7THkyB6NjBkP7x4HqSk2wuUvcmDb9O2l0fCkxvB3ibL0L2A/132","nickname":"科学养牛","note":"","ucode":"B205209A814AC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366384,"discussion_content":"根本没必要这么复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618047050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205132,"avatar":"https://static001.geekbang.org/account/avatar/00/12/63/8c/fd0509dc.jpg","nickname":"智忠恕仁","note":"","ucode":"444703AC878861","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304974,"discussion_content":"Swift版本，\n\n// 如何编程实现“求一个数的平方根”？要求精确到小数点后6位？\n    func sqrt(_ num: Float, dot: Int) -> Float {\n        return sqrtC(num, low: 0, high: (Int)(num), pre: 0, offset: 0, dot: dot)\n    }\n    \n    private func sqrtC(_ num: Float, low: Int, high: Int, pre: Float, offset: Int, dot: Int) -> Float {\n        \n        let mid = low + (high-low)/2\n        var lowC = low, highC = high, preC = pre, offsetC = offset\n        \n        var devie = 1\n        for _ in 0..<offsetC {\n            devie *= 10\n        }\n        \n        var result0 = (pre+(Float)(mid)/(Float)(devie))\n        let result = result0\n        result0 = result0*result0\n        \n        var result1 = (pre+(Float)(mid+1)/(Float)(devie))\n        result1 = result1*result1\n        \n        if result0 <= num &amp;&amp; result1 > num {\n            if offset == dot {\n                return result\n            } else {\n                // 下一位\n                preC = result\n                offsetC += 1\n                lowC = 0\n                highC = 9\n            }\n        } else if result0 < num {\n            lowC = mid+1\n        } else if result0 > num {\n            highC = mid-1\n        }\n        \n        return sqrtC(num, low: lowC, high: highC, pre: preC, offset: offsetC, dot: dot)\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599728100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1740855,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq2R3h56amhDco3bSK4DzPdwghHb3jwRERQUXKMuZjM2iaeQmMxbw6VT94adOIsMmutpwulUBSZYWA/132","nickname":"Geek_f83a3c","note":"","ucode":"F6301A7D9AA730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205132,"avatar":"https://static001.geekbang.org/account/avatar/00/12/63/8c/fd0509dc.jpg","nickname":"智忠恕仁","note":"","ucode":"444703AC878861","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333612,"discussion_content":"你这个代码有两个问题，一个是没有考虑负数边界值，还有一个就是Num用Float接收的话精确不到小数点后6位，要用double接收","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607578083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304974,"ip_address":""},"score":333612,"extra":""}]},{"author":{"id":1936370,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8b/f2/a7253cb0.jpg","nickname":"hpp","note":"","ucode":"3536E2B370ACBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249958,"discussion_content":"感觉你这个思路是能找到平方根，但是没利用到二分法的核心思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587978874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386665,"avatar":"https://static001.geekbang.org/account/avatar/00/15/28/a9/99b74f3e.jpg","nickname":"欣欣向荣的万七七","note":"","ucode":"ED6BB1BF8C29B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160388,"discussion_content":"//js求解 整数和小数可以一起来：\nfunction squareRoot(targetNum: number, precision: number) {\n  let low = 0;\n  let high = targetNum;\n  \n  function match(precision: number = 0):number {\n    const num: number = +((low + high) / 2).toFixed(precision);\n    const num1 = Math.pow(num, 2);\n    const num2 = Math.pow(num + Math.pow(0.1, precision), 2); \n    if (num1 <= targetNum &amp;&amp; num2 > targetNum) {\n      return num;\n    } else if (num2 <= targetNum) {\n      low = num;\n      return match(precision);\n    } else {\n      high = num;\n      return match(precision);\n    }\n  }\n\n  let result: string;\n  for (let i = 0; i <= precision; i++) {\n    result = match(i).toFixed(precision); //再次补充小数点\n  }\n  return result;\n}\n\nsquareRoot(42, 6);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580798320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35421,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1540554890,"is_pvip":false,"replies":[{"id":"12688","content":"👍","user_name":"作者回复","comment_id":35421,"uid":"1190123","ip_address":"","utype":1,"ctime":1540740704,"user_name_real":"gg"}],"discussion_count":15,"race_medal":0,"score":"1294325710986","product_id":100017301,"comment_content":"个人觉得二分查找进行优化时，还个细节注意：<br>将mid = lo + (hi - lo) &#47;2，将除法优化成移位运算时，得注意运算符的优先级，千万不能写成这样：mid = lo + (hi - lo) &gt;&gt; 1 ","like_count":301,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427531,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540740704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211178,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/2a/7d8b5943.jpg","nickname":"LH","note":"","ucode":"819B9B2409E834","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75116,"discussion_content":"Java是+-*/高于位运算，但是go是位运算高于+-*/，所以还得看具体语言","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1575723593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1211178,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/2a/7d8b5943.jpg","nickname":"LH","note":"","ucode":"819B9B2409E834","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75687,"discussion_content":"谢谢提醒","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575767768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":75116,"ip_address":""},"score":75687,"extra":""}]},{"author":{"id":1208981,"avatar":"https://static001.geekbang.org/account/avatar/00/12/72/95/5f83598c.jpg","nickname":"Hello World","note":"","ucode":"368D87D53DC58F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211531,"discussion_content":"Java官方的JDK实现，(low + high) >>> 1，无符号右移，即使总和溢出也没关系。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1584862070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3271,"discussion_content":"哈哈，我就中招了，没想到移位的优先级比+还低，确实要屑层mid = lo + ((hi-lo) >> 1)","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1564369063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1137727,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/3f/34e5c750.jpg","nickname":"看，有只猪","note":"","ucode":"F9BB302BC71CE8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3610,"discussion_content":"我今天也在这里中招了，判断一个不在数组中的大数时会死循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564631750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3271,"ip_address":""},"score":3610,"extra":""},{"author":{"id":1107289,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e5/59/ad185a6c.jpg","nickname":"万有引力","note":"","ucode":"82C15A427EAD42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1137727,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/3f/34e5c750.jpg","nickname":"看，有只猪","note":"","ucode":"F9BB302BC71CE8","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":246209,"discussion_content":"只有high为负数才会死循环吧？正数的话，高位补0，high>>2，一直右移会变为0才对。求解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587733648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3610,"ip_address":""},"score":246209,"extra":""},{"author":{"id":1747163,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/db/99c95736.jpg","nickname":"御风","note":"","ucode":"60304D17F8511A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584900,"discussion_content":"哈哈, 中过招的来报个道,直接死循环!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661216509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3271,"ip_address":"广东"},"score":584900,"extra":""}]},{"author":{"id":1646965,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLQl2kFWIJlknTH3mB2qib6kibiagp7g9g9TVCPP4QsMTegEmib8N2B1mxvVE5snjun3MNwONJGtaazqw/132","nickname":"单源最长路","note":"","ucode":"5CF27DC752D98A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13925,"discussion_content":"许多编程语言（比如java），会自动把除2优化为位移运算","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1568714616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1162159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/af/2624cc07.jpg","nickname":"looper","note":"","ucode":"899D50A315BCAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1646965,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLQl2kFWIJlknTH3mB2qib6kibiagp7g9g9TVCPP4QsMTegEmib8N2B1mxvVE5snjun3MNwONJGtaazqw/132","nickname":"单源最长路","note":"","ucode":"5CF27DC752D98A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297682,"discussion_content":"自写代码手动测试Java编译器是否会把/2优化为位运算（以及是否会把对2的取模/取余操作优化为位运算）_JAVA_调试吧\nhttps://www.debug8.com/java/t_56081.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597023771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":13925,"ip_address":""},"score":297682,"extra":""}]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305659,"discussion_content":"对于乘法和常量的除法以及%运算，JVM一定会优化，这些是不需要程序员去考虑的，直接去用*/%即可。对于被除数是变量的情况下，并不会优化。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600050501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1209986,"avatar":"https://static001.geekbang.org/account/avatar/00/12/76/82/76286281.jpg","nickname":"Mirana","note":"","ucode":"994E675E410C69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202905,"discussion_content":"右移一位和除2在很多编译器优化完了是一样的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583974370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165892,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ca/44/c2d77269.jpg","nickname":"hi ！girl","note":"","ucode":"0DB69C86E361C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29838,"discussion_content":"我中过这个坑，死循环","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570786563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3075464,"avatar":"","nickname":"Geek_c6e17b","note":"","ucode":"2FB4D6DEA7510D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591219,"discussion_content":"我用Go语言写实现是正常的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666405335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2223791,"avatar":"https://static001.geekbang.org/account/avatar/00/21/ee/af/bb84441d.jpg","nickname":"旗袍不开、怎么得胜？","note":"","ucode":"27351FE057C9A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397381,"discussion_content":"不提醒就错系列。感谢提醒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632616291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38147,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1541956224,"is_pvip":false,"replies":[{"id":"13697","content":"读cmu 太厉害了 仰慕","user_name":"作者回复","comment_id":38147,"uid":"1190123","ip_address":"","utype":1,"ctime":1541983545,"user_name_real":"gg"}],"discussion_count":24,"race_medal":0,"score":"882010251904","product_id":100017301,"comment_content":"现在在cmu读研，正在上terry lee的data structure，惊喜的发现不少他讲的点你都涵盖了，个别他没讲到的你也涵盖了.... （当然可能因为那门课只有6学时，时间不足，但还是给这个专栏赞一个！）","like_count":206,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428622,"discussion_content":"读cmu 太厉害了 仰慕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541983545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1717444,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/34/c4/08d9f349.jpg","nickname":"元","note":"","ucode":"4576E15018EEA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72687,"discussion_content":"截至2019年3月，CMU共培养出了13个图灵奖、20个诺贝尔奖、9个奥斯卡金像奖、114个艾美奖、44个托尼奖得主。","likes_number":24,"is_delete":false,"is_hidden":false,"ctime":1575515824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451837,"avatar":"https://static001.geekbang.org/account/avatar/00/16/27/3d/48340c0b.jpg","nickname":"闲着也是贤者","note":"","ucode":"DFADE250BA8E16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89638,"discussion_content":"今年初三，信息竞赛准备中。看到中文夹杂着英文着实有趣","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1576759454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2449,"discussion_content":"查了下，才知道cmu是卡耐基梅陇，仰慕","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1563632899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388093,"discussion_content":"严格点 兄弟打错字了是“卡内基梅隆大学”不过不影响理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628586166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2449,"ip_address":""},"score":388093,"extra":""},{"author":{"id":2731048,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ac/28/ff075ccd.jpg","nickname":"🍭🍭🍭","note":"","ucode":"27AC685057A532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390424,"discussion_content":"严格来说，都是音译的罢了，不存在中国字对错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629821024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388093,"ip_address":""},"score":390424,"extra":""}]},{"author":{"id":1050830,"avatar":"https://static001.geekbang.org/account/avatar/00/10/08/ce/f7d637fb.jpg","nickname":"枫晴 andy","note":"","ucode":"10ABBD7E7561A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70172,"discussion_content":"这是赤裸裸的炫耀啊哈哈","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1575334680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1050830,"avatar":"https://static001.geekbang.org/account/avatar/00/10/08/ce/f7d637fb.jpg","nickname":"枫晴 andy","note":"","ucode":"10ABBD7E7561A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334201,"discussion_content":"老凡尔赛了~","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1607763306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70172,"ip_address":""},"score":334201,"extra":""}]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39626,"discussion_content":"仰慕，比不上的跟自己比，每天都有进步就好","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1571969213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2450,"discussion_content":"cmu的cs牛的不行，这不用解释了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1563632939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2466389,"avatar":"https://static001.geekbang.org/account/avatar/00/25/a2/55/ec6b990a.jpg","nickname":"JC","note":"","ucode":"0FB3C53427DF98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384202,"discussion_content":"好好学习，别老把自己什么CMU挂嘴边","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1626423498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158349,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/cd/fda6374f.jpg","nickname":"Louis","note":"","ucode":"BC667839F17937","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38731,"discussion_content":"属实仰慕，想了解楼主的求学经历","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571825775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281118,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8c/5e/750ef462.jpg","nickname":"飞翔神话","note":"","ucode":"ADBBF299C3CD04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17136,"discussion_content":"真是厉害","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568949928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178426,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/3a/3dc7c61c.jpg","nickname":"꧁༺༻꧂","note":"","ucode":"8BFD5C1F6ED235","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547028,"discussion_content":"cs跟berkeley相比如何？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642499949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264679,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","nickname":"陈威洋","note":"","ucode":"DCF84B4D3A7354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387958,"discussion_content":"中密歇根大学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628508969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206787,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","nickname":"远心","note":"","ucode":"1157202C315655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350345,"discussion_content":"所以是在极客时间上CMU系列？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613817101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052718,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/2e/1a0e7c59.jpg","nickname":"熊孩子马洛伊","note":"","ucode":"C907D62052FB4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349744,"discussion_content":"cmu。。。。。。吓尿中。。。。。。膜拜！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613488523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2289781,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f0/75/f60039af.jpg","nickname":"观海胸襟阔","note":"","ucode":"B82E4E0BF150AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322780,"discussion_content":"大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604816006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321082,"discussion_content":"厉害厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604539572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301958,"discussion_content":"nb","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598717518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301268,"discussion_content":"活捉神仙。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598454969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744053,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/b5/c936c54b.jpg","nickname":"💣","note":"","ucode":"F3B82CEB6B6934","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226601,"discussion_content":"哇捕捉一只大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586436978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146734,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7f/6e/863e4b2a.jpg","nickname":"云计算小菜鸟","note":"","ucode":"D32CA551ACCF56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201182,"discussion_content":"围观大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583764553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620186,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/da/1db53e48.jpg","nickname":"cyl","note":"","ucode":"6075FFED2111C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96815,"discussion_content":"CMU，牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577094971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35127,"user_name":"朱凯","can_delete":false,"product_type":"c1","uid":1253253,"ip_address":"","ucode":"D18B53E4B92A96","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/85/639f3653.jpg","comment_is_top":false,"comment_ctime":1540432280,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"688735199640","product_id":100017301,"comment_content":"二分法求一个数x的平方根y？<br>解答：根据x的值，判断求解值y的取值范围。假设求解值范围min &lt; y &lt; max。若0&lt;x&lt;1，则min=x，max=1；若x=1，则y=1；x&gt;1，则min=1，max=x；在确定了求解范围之后，利用二分法在求解值的范围中取一个中间值middle=(min+max)÷2，判断middle是否是x的平方根？若(middle+0.000001)*(middle+0.000001)＞x且(middle-0.000001)*(middle-0.000001)&lt;x，根据介值定理，可知middle既是求解值;若middle*middle &gt; x，表示middle＞实际求解值，max=middle; 若middle*middle ＜ x，表示middle＜实际求解值，min =middle;之后递归求解！<br>备注：因为是保留6位小数，所以middle上下浮动0.000001用于介值定理的判断","like_count":160,"discussions":[{"author":{"id":1350275,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9a/83/0802f4e7.jpg","nickname":"Geek_lucky_brian","note":"","ucode":"4949713DBF99A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303911,"discussion_content":"不考虑第7个小数位的四舍五入吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599405838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803259,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","nickname":"linker","note":"","ucode":"6C5799F2FC2C82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":241906,"discussion_content":"用牛顿逼近","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587447572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1599768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/69/18/ca8a5c22.jpg","nickname":"收","note":"","ucode":"EC3338DB7AEF34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239190,"discussion_content":"遇到100就凉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587283162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1786352,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/41/f0/59878085.jpg","nickname":"猫吃小怪兽","note":"","ucode":"C87596298B08C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1599768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/69/18/ca8a5c22.jpg","nickname":"收","note":"","ucode":"EC3338DB7AEF34","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270202,"discussion_content":"为啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589985679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":239190,"ip_address":""},"score":270202,"extra":""},{"author":{"id":1599768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/69/18/ca8a5c22.jpg","nickname":"收","note":"","ucode":"EC3338DB7AEF34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1786352,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/41/f0/59878085.jpg","nickname":"猫吃小怪兽","note":"","ucode":"C87596298B08C4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297058,"discussion_content":"可以自己跑个case试一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596763407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270202,"ip_address":""},"score":297058,"extra":""}]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70708,"discussion_content":"好像第一题 没标准答案？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575377498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52315,"user_name":"Dwyane","can_delete":false,"product_type":"c1","uid":1110081,"ip_address":"","ucode":"FD5B9DF96A5BDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/41/f6153c7a.jpg","comment_is_top":false,"comment_ctime":1545361748,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"628610586964","product_id":100017301,"comment_content":"1、low=mid+1，high=mid-1    学习了比较严谨条件<br><br><br>2、二分法求根号5<br><br>a:折半：       5&#47;2=2.5<br><br>b:平方校验:  2.5*2.5=6.25&gt;5，并且得到当前上限2.5<br><br>c:再次向下折半:2.5&#47;2=1.25<br><br>d:平方校验：1.25*1.25=1.5625&lt;5,得到当前下限1.25<br><br>e:再次折半:2.5-(2.5-1.25)&#47;2=1.875<br><br>f:平方校验：1.875*1.875=3.515625&lt;5,得到当前下限1.875<br><br>每次得到当前值和5进行比较，并且记下下下限和上限，依次迭代，逐渐逼近平方根：<br>","like_count":147,"discussions":[{"author":{"id":1510819,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/a3/fc6b3520.jpg","nickname":"YTeasyman","note":"","ucode":"2EAA0D6BBC202F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238016,"discussion_content":"考虑一下小于1的情况","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587205550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046152,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f6/88/ee32fde9.jpg","nickname":"章光辉","note":"","ucode":"49ACA750CAF19E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102556,"discussion_content":"用这种算法，求根号9，得不到正确解。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577353461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218405,"discussion_content":"两种方法：1是中间值mid的平方mid*mid和初始值比较，求他们的插值offset，如果offset >= 0.000001则继续折半查找，否则跳出循环，则就是精确到第六位小数；2. 是和前一次的mid值进行比较，也是求offset，然后判断offset >= 0.0000001则继续。注意的是：mid*mid较原始值是忽大忽小的，所以offset一定要算对哦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585655335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330056,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","nickname":"毛启圣","note":"","ucode":"233DA95ED28C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78157,"discussion_content":"请问你知道几次之后精确到了几位小数了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575980938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34913,"user_name":"三忌","can_delete":false,"product_type":"c1","uid":1235739,"ip_address":"","ucode":"3533C304CB8A6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/1b/999ae851.jpg","comment_is_top":false,"comment_ctime":1540352542,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"250648455710","product_id":100017301,"comment_content":"def sqrt(x):<br>    &#39;&#39;&#39;<br>    求平方根，精确到小数点后6位<br>    &#39;&#39;&#39;<br>    low = 0<br>    mid = x &#47; 2<br>    high = x<br>    while abs(mid ** 2 - x) &gt; 0.000001:<br>        if mid ** 2 &lt; x:<br>            low = mid<br>        else:<br>            high = mid<br>        mid = (low + high) &#47; 2<br>    return mid","like_count":58,"discussions":[{"author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10168,"discussion_content":"def sqrt_binary(num):\n    if num > 1:\n        low = 1\n        high = num\n    else:\n        low = num\n        high = 1\n    mid = float(low) + float((high - low) / 2)\n    while abs(mid ** 2 - num) > 0.000001:\n        if mid ** 2 < num:\n            low = mid\n        else:\n            high = mid\n        mid = (low + high) / 2\n    return round(mid, 6)","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1568269316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1712572,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/21/bc/a50e08d4.jpg","nickname":"Geek_favorer","note":"","ucode":"0DB47C634568E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49714,"discussion_content":"请问下，你这个算法不需要检测low<=high吗，会不会存在low>high的情况呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573623076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":10168,"ip_address":""},"score":49714,"extra":""},{"author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1712572,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/21/bc/a50e08d4.jpg","nickname":"Geek_favorer","note":"","ucode":"0DB47C634568E5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49874,"discussion_content":"不会的，mid是中间值，你可以顺着程序演示一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573646131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49714,"ip_address":""},"score":49874,"extra":""},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218408,"discussion_content":"mid*mid吧，和初始值是忽大忽小的关系啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585655442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49874,"ip_address":""},"score":218408,"extra":""}]},{"author":{"id":1008809,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/64/a9/27d63f2e.jpg","nickname":"佳楠","note":"","ucode":"A1698AE91992AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42520,"discussion_content":"小数要注意。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572688166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205627,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","nickname":"Hwan","note":"","ucode":"A728C6790511BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10165,"discussion_content":"这个函数在x为小数的时候不对，无限循环了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568268891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2695483,"avatar":"https://static001.geekbang.org/account/avatar/00/29/21/3b/7f01e158.jpg","nickname":"陈志男","note":"","ucode":"4831554F6AC2C7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586382,"discussion_content":"本次的判断最好不用mid * mid== x而是用mid== x / mid来避免数据溢出\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662176708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302542,"discussion_content":"# 这个暂时没发现有什么问题\ndef sqrt(n, s):\n    low = 0\n    hight = n\n    f = 1/pow(10, s)\n    while low <= hight:\n        mid = (low + hight) / 2\n        t = mid * mid \n        if abs(t-n) <= f:\n            return round(mid, s)\n        elif t < n:\n            low = mid \n        else:\n            hight = mid","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598949173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301438,"discussion_content":"写好代码起码跑个测试吧，你这个只要不是2的倍数都死循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598526878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100141,"user_name":"刘伟、","can_delete":false,"product_type":"c1","uid":1547082,"ip_address":"","ucode":"BDFE9F8460C8C0","user_header":"","comment_is_top":false,"comment_ctime":1559457221,"is_pvip":false,"replies":[{"id":"36275","content":"赞 不错！","user_name":"作者回复","comment_id":100141,"uid":"1190123","ip_address":"","utype":1,"ctime":1559612993,"user_name_real":"王争"}],"discussion_count":12,"race_medal":0,"score":"173358149061","product_id":100017301,"comment_content":"关于1000万数中快速查找某个整数，我有个想法。考虑用数组下标来存储数据，一个bit位来存储标记。第一次排序的时候能得到这组数的最大值和最小值。 假如最小是5，最大是2000万。那我们定义一个字节数组Byte arr[2000万]，因为我只需要打标记，所以一个bit能存下标记，一个byte能存8个数。只需要2MB多一点就能存2000万个数的状态（存在还是不存在）<br>先把这1000万个数存进去，用数x&#47;8得到下标。用数x%8得到余数，因为每8个数一组得到的数组下标相同，所以还需要通过余数来确定具体是哪一个数。之后开始设置状态，从低位到高位，每一位代表一个数的状态，case0到7，每一次设置当下号码的状态时，先用按位于计算把其他不相关位置为1，当前位置为0，然后按位或对当前位置设置状态。存在就设置位1 ，不存在就设置位0<br>上述操作执行完之后，就支持任意查找了。只需要输入一个数x，我就能立刻通过x&#47;8和x%8得到当前这个数的位置，然后把这个位置的状态位数字取出来。如果是1表示存在，如果是0表示不存在。<br>不知道这个想法有没有什么漏洞。希望老师或者一起学习的同学能帮忙一起想想","like_count":40,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452425,"discussion_content":"赞 不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559612993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141173,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","nickname":"zs阿帅","note":"","ucode":"07A54AE7F1CAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130098,"discussion_content":"这个不是就是位图点实现思路吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578750955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645413,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/OWO43KiahibaWnZWkEzXfNQCAqAvVNia44HLxzaNbPKZxiaic3ameJ72dLros26ibxuCL1B5pl7MRlOVrqutNsTOXegQ/132","nickname":"JY","note":"","ucode":"54DF39E40C0F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240430,"discussion_content":"余数是多少，就左移多少位，然后和数组原来的元素做或运算就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587363024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235099,"discussion_content":"思路不错。描述的不太好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587018905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053783,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/57/5e2f846f.jpg","nickname":"幻影飞狐","note":"","ucode":"528A549B5B41D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371480,"discussion_content":"参考了布隆过滤器的思路？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619787130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351012,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/64/272dc1b7.jpg","nickname":"圆滚滚","note":"","ucode":"E4D81822A87D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369747,"discussion_content":"这给思想在《编程珠玑》这本书中有详细的介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619147237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2221397,"avatar":"https://static001.geekbang.org/account/avatar/00/21/e5/55/ae64df9d.jpg","nickname":"cloudy","note":"","ucode":"8D3AA12C499F1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325468,"discussion_content":"听起来很像redis中的setbit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605325696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1746872,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a7/b8/33fc6e01.jpg","nickname":"jiamei","note":"","ucode":"9FC4C1D41C062E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261551,"discussion_content":"x/8可能远远超过1000万，题目中没有说明1000万个数的单位，还可能是浮点数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588983490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b0/eb/112e7d16.jpg","nickname":"我是一根葱","note":"","ucode":"6208D18E65DB2F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261513,"discussion_content":"不明觉厉～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588978997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235057,"discussion_content":"得看min和max来判断是否适合用bit做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587015348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1866485,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","nickname":"简单猫","note":"","ucode":"EA027D4C344E25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234145,"discussion_content":"有问题喔 这前提是数字不能重复吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586959342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1866485,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","nickname":"简单猫","note":"","ucode":"EA027D4C344E25","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239117,"discussion_content":"也可以重复，如果重复的话，那个位就被覆盖一次。想想布隆过滤器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587274982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":234145,"ip_address":""},"score":239117,"extra":""}]}]},{"had_liked":false,"id":34960,"user_name":"锐雨","can_delete":false,"product_type":"c1","uid":1123139,"ip_address":"","ucode":"1B332E35C6A16D","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/43/0fa84f5c.jpg","comment_is_top":false,"comment_ctime":1540370381,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"173339062221","product_id":100017301,"comment_content":"求平方根，可以参考0到99之间猜数字的思路，99换成x, 循环到误差允许内即可，注意1这个分界线。欢迎交流，Java如下<br>\tpublic static double sqrt(double x, double precision) {<br>\t\tif (x &lt; 0) {<br>\t\t\treturn Double.NaN;<br>\t\t}<br>\t\tdouble low = 0;<br>\t\tdouble up = x;<br>\t\tif (x &lt; 1 &amp;&amp; x &gt; 0) {<br>\t\t\t&#47;** 小于1的时候*&#47;<br>\t\t\tlow = x;<br>\t\t\tup = 1;<br>\t\t}<br>\t\tdouble mid = low + (up - low)&#47;2;<br>\t\twhile(up - low &gt; precision) {<br>\t\t\tif (mid * mid &gt; x ) {&#47;&#47;TODO mid可能会溢出<br>\t\t\t\tup = mid;<br>\t\t\t} else if (mid * mid &lt; x) {<br>\t\t\t\tlow = mid;<br>\t\t\t} else {<br>\t\t\t\treturn mid;<br>\t\t\t}<br>\t\t\tmid = low + (up - low)&#47;2;<br>\t\t}<br>\t\treturn mid;<br>\t}","like_count":40,"discussions":[{"author":{"id":1154827,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9f/0b/a31d1b8f.jpg","nickname":"twjLL","note":"","ucode":"59C42A89B78E5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17860,"discussion_content":"为了避免溢出，mid * mid> x 改成 mid > x / mid 比较好","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1568985808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1614285,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a1/cd/bc74741c.jpg","nickname":"~patience","note":"","ucode":"8D9BC78A241CEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585960,"discussion_content":"用BigDecimal是不是更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661919636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107742,"avatar":"https://static001.geekbang.org/account/avatar/00/20/29/5e/b2f1faff.jpg","nickname":"Geek_adog","note":"","ucode":"C76B16FEED7ED0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401416,"discussion_content":"运行之后结果不对，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633662794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299179,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597587549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80039,"discussion_content":"为什么不是这样了  up = mid -1 , low = mid+1 ?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576140241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36245,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1540992515,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"151864847875","product_id":100017301,"comment_content":"总结：二分查找（上）<br>一、什么是二分查找？<br>二分查找针对的是一个有序的数据集合，每次通过跟区间中间的元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间缩小为0。<br>二、时间复杂度分析？<br>1.时间复杂度<br>假设数据大小是n，每次查找后数据都会缩小为原来的一半，最坏的情况下，直到查找区间被缩小为空，才停止。所以，每次查找的数据大小是：n，n&#47;2，n&#47;4，…，n&#47;(2^k)，…，这是一个等比数列。当n&#47;(2^k)=1时，k的值就是总共缩小的次数，也是查找的总次数。而每次缩小操作只涉及两个数据的大小比较，所以，经过k次区间缩小操作，时间复杂度就是O(k)。通过n&#47;(2^k)=1，可求得k=log2n，所以时间复杂度是O(logn)。<br>2.认识O(logn)<br>①这是一种极其高效的时间复杂度，有时甚至比O(1)的算法还要高效。为什么？<br>②因为logn是一个非常“恐怖“的数量级，即便n非常大，对应的logn也很小。比如n等于2的32次方，也就是42亿，而logn才32。<br>③由此可见，O(logn)有时就是比O(1000)，O(10000)快很多。<br>三、如何实现二分查找？<br>1.循环实现<br>代码实现：<br>public int binarySearch1(int[] a, int val){<br>\tint start = 0;<br>\tint end = a.length - 1;<br>\twhile(start &lt;= end){<br>\t\tint mid = start + (end - start) &#47; 2;<br>\t\tif(a[mid] &gt; val) end = mid - 1;<br>\t\telse if(a[mid] &lt; val) start = mid + 1;<br>\t\telse return mid;<br>\t}<br>\treturn -1;<br>}<br>注意事项：<br>①循环退出条件是：start&lt;=end，而不是start&lt;end。<br>②mid的取值，使用mid=start + (end - start) &#47; 2，而不用mid=(start + end)&#47;2，因为如果start和end比较大的话，求和可能会发生int类型的值超出最大范围。为了把性能优化到极致，可以将除以2转换成位运算，即start + ((end - start) &gt;&gt; 1)，因为相比除法运算来说，计算机处理位运算要快得多。<br>③start和end的更新：start = mid - 1，end = mid + 1，若直接写成start = mid，end=mid，就可能会发生死循环。<br>2.递归实现<br>public int binarySearch(int[] a, int val){<br>\treturn bSear(a, val, 0, a.length-1);<br>}<br>private int bSear(int[] a, int val, int start, int end) {<br>\tif(start &gt; end) return -1;<br>\tint mid = start + (end - start) &#47; 2;<br>\tif(a[mid] == val) return mid;<br>\telse if(a[mid] &gt; val) end = mid - 1;<br>\telse start = mid + 1;<br>\treturn bSear(a, val, start, end);<br>}<br>四、使用条件（应用场景的局限性）<br>1.二分查找依赖的是顺序表结构，即数组。<br>2.二分查找针对的是有序数据，因此只能用在插入、删除操作不频繁，一次排序多次查找的场景中。<br>3.数据量太小不适合二分查找，与直接遍历相比效率提升不明显。但有一个例外，就是数据之间的比较操作非常费时，比如数组中存储的都是长度超过300的字符串，那这是还是尽量减少比较操作使用二分查找吧。<br>4.数据量太大也不是适合用二分查找，因为数组需要连续的空间，若数据量太大，往往找不到存储如此大规模数据的连续内存空间。<br>五、思考<br>1.如何在1000万个整数中快速查找某个整数？<br>①1000万个整数占用存储空间为40MB，占用空间不大，所以可以全部加载到内存中进行处理；<br>②用一个1000万个元素的数组存储，然后使用快排进行升序排序，时间复杂度为O(nlogn)<br>③在有序数组中使用二分查找算法进行查找，时间复杂度为O(logn)<br>2.如何编程实现“求一个数的平方根”？要求精确到小数点后6位？","like_count":35,"discussions":[{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356096,"discussion_content":"③写错了 。start = mid + 1，end = mid - 1；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615531496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1598728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/65/08/c3d8c115.jpg","nickname":"浮生若梦[玫瑰][玫瑰]","note":"","ucode":"0AE753E08665F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350827,"discussion_content":"对于我这种caiji来说，课代表的作业必须先抄过来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614044110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301959,"discussion_content":"课代表~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598717601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2045997,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/38/2d/f3c6493e.jpg","nickname":"罗樱罂","note":"","ucode":"9072E79E625ED1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288059,"discussion_content":"请问一下为啥是40mb？1000千万 *8 = 8000千万字节  -> 8000千万byte / 1024 / 1024 = 80MB。 我想问一下是哪里错了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593634456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2656312,"avatar":"https://static001.geekbang.org/account/avatar/00/28/88/38/7ac0e804.jpg","nickname":"赵恒柱","note":"","ucode":"C56A5E9CEA91A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2045997,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/38/2d/f3c6493e.jpg","nickname":"罗樱罂","note":"","ucode":"9072E79E625ED1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559696,"discussion_content":"看你数据类型和系统位数，如果是32位系统中int就是4个字节\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648884860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288059,"ip_address":""},"score":559696,"extra":""}]},{"author":{"id":1651618,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/a2/585be249.jpg","nickname":"草原上的骆驼🐫","note":"","ucode":"F0B12CB1FEED84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271410,"discussion_content":"道友，那个递归实现的部分中int mid = start + (end - start) / 2;我感觉不对，应该是int mid = end + (end - start) / 2;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590131573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1909732,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","nickname":"Geek_99ae14","note":"","ucode":"268852986A6B69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1651618,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/a2/585be249.jpg","nickname":"草原上的骆驼🐫","note":"","ucode":"F0B12CB1FEED84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300505,"discussion_content":" end + (end - start) / 2 肯定不对都大于 end了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598152144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":271410,"ip_address":""},"score":300505,"extra":""},{"author":{"id":1675882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/6a/dd37a054.jpg","nickname":"张y .","note":"","ucode":"85918469492F4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1651618,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/a2/585be249.jpg","nickname":"草原上的骆驼🐫","note":"","ucode":"F0B12CB1FEED84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306109,"discussion_content":"正常(end+start)/2   =  end/2+start/2     所以应该是  start + (end-start)/2  这样两个值时一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600172051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":271410,"ip_address":""},"score":306109,"extra":""}]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4560,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565547556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34876,"user_name":"THROW","can_delete":false,"product_type":"c1","uid":1112141,"ip_address":"","ucode":"A3C089A8F5F941","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/4d/4b748ff1.jpg","comment_is_top":false,"comment_ctime":1540344426,"is_pvip":false,"replies":[{"id":"12501","content":"如果是多次查找操作呢","user_name":"作者回复","comment_id":34876,"uid":"1190123","ip_address":"","utype":1,"ctime":1540394618,"user_name_real":"gg"}],"discussion_count":6,"race_medal":0,"score":"134684330602","product_id":100017301,"comment_content":"1000w数据查找这个，在排序的时候不就可以找到了么？","like_count":32,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427372,"discussion_content":"如果是多次查找操作呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1848362,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/34/2a/e1788b94.jpg","nickname":"Hbbdqy","note":"","ucode":"DF328086C9E887","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312488,"discussion_content":"优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602720833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301960,"discussion_content":"比如数据库主键查找.....  根据主键多次查找...存的时候只存一次","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598717638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036317,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d0/1d/8041d9a3.jpg","nickname":"看见猫","note":"","ucode":"39E09C1F765218","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347160,"discussion_content":"单次查找可以，多次查找排序只需要一次，后续无论多少次查找，都可以基于排好序的数据进行查找。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612167670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547667,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/93/4159edaa.jpg","nickname":"朴素柠檬c","note":"","ucode":"2D4CBB70D801B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294213,"discussion_content":"回答的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595831120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258401,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a1/f3835f01.jpg","nickname":"社会猪","note":"","ucode":"CFF5EA7F247373","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14868,"discussion_content":"l","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568785179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34878,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1540344556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108914526956","product_id":100017301,"comment_content":"1. 求平方根可以用二分查找或牛顿迭代法;<br>2. 有序链表的二分查找时间复杂度为 O(n)。","like_count":25},{"had_liked":false,"id":41301,"user_name":"Garwen","can_delete":false,"product_type":"c1","uid":1045062,"ip_address":"","ucode":"C76346E1734AB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","comment_is_top":false,"comment_ctime":1542764862,"is_pvip":false,"replies":[{"id":"15069","content":"👍","user_name":"作者回复","comment_id":41301,"uid":"1190123","ip_address":"","utype":1,"ctime":1542885653,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"91737078078","product_id":100017301,"comment_content":"第一题虽说是在二分查找的这一章，还是推荐大家用牛顿弦切法求解平方根，代码如下供大家参考：<br>double number = 15; &#47;&#47;待求平方根的数<br>double xini = 10;&#47;&#47;初始点<br>while(xini*xini - number &gt; 1e-6) {<br>\txini = (number + xini*xini)&#47;2&#47;xini;<br>}","like_count":21,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429754,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542885653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663781,"avatar":"","nickname":"叶成勇","note":"","ucode":"8D359ED202BE87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384751,"discussion_content":"大于100的数不再适用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626741471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303692,"discussion_content":"这个初始点的值怎么定？因为会影响整个结果，简单的说，这段代码只对100以内的有效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599355675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302545,"discussion_content":"这个的确厉害，多大数都很快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598950125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34883,"user_name":"王小李","can_delete":false,"product_type":"c1","uid":1108833,"ip_address":"","ucode":"64B703781E0A0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/61/45c3a047.jpg","comment_is_top":false,"comment_ctime":1540345104,"is_pvip":false,"replies":[{"id":"12500","content":"哈哈 同学的回答超纲了 👍","user_name":"作者回复","comment_id":34883,"uid":"1190123","ip_address":"","utype":1,"ctime":1540394586,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"83144723728","product_id":100017301,"comment_content":"平方根可以用牛顿迭代实现。","like_count":19,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427374,"discussion_content":"哈哈 同学的回答超纲了 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2417281,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e2/81/da8dc5aa.jpg","nickname":"MEYELLA","note":"","ucode":"AB69D01DF95D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393764,"discussion_content":"数学好学计算机就是牛逼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631589043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81406,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1553905731,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61683447875","product_id":100017301,"comment_content":"看了留言，求平方根那题，同学的答案可能都不对。因为题目没有要求必须返回正整数，所以将有两个答案：正的和负的！所以，算法的输出应该是一个数组。😝","like_count":14,"discussions":[{"author":{"id":1700504,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f2/98/150f51db.jpg","nickname":"LostGeneration","note":"","ucode":"3DC1536ACCE985","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301665,"discussion_content":"哈哈....其他人都做错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598602704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1639136,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibtg0NaSLe8rRuNqkMRPOD6osS6HYhWhvRy0jvxeFDfF2Aaw6g4HtWZL3F9qxib7JYHaP5yJNnBNg/132","nickname":"nimui","note":"","ucode":"5A6AF12A914D8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77016,"discussion_content":"很严谨啊，少年","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575879684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35537,"user_name":"Victor","can_delete":false,"product_type":"c1","uid":1003903,"ip_address":"","ucode":"801413B2B5C7B5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/7f/c74e3543.jpg","comment_is_top":false,"comment_ctime":1540645420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57375220268","product_id":100017301,"comment_content":"开篇的问题：1000w 个 8字节整数的中查找某个整数是否存在，且内存占用不超过100M ？ 我尝试延伸了一些解决方案：<br>1、由于内存限制，存储一个整数需要8字节，也就是 64 bit。此时是否可以考虑bitmap这样的数据结构，也就是每个整数就是一个索引下标，对于每一个索引bit，1 表示存在，0 表示不存在。同时考虑到整数的数据范围，8字节整数的范围太大，这是需要考虑压缩的问题，压缩方案可以参考 RoaringBitmap 的压缩方式。<br>2、我们要解决的问题，也就是判断某个元素是否属于某个集合的问题。这里是否可以和出题方探讨是否严格要求100%判断正确。在允许很小误差概率的情景下（比如判断是否在垃圾邮件地址黑名单中），可以考虑 BloomFilter 。<br>BloomFilter 存储空间更加高效。1000w数据、0.1%的误差下需要的内存仅为 17.14M <br>时间复杂度上，上面两种都是 hashmap的变种，因此为 o(1)。","like_count":13},{"had_liked":false,"id":35788,"user_name":"kaka","can_delete":false,"product_type":"c1","uid":1182770,"ip_address":"","ucode":"AD6741BE18D832","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/32/dff3eb37.jpg","comment_is_top":false,"comment_ctime":1540801022,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53080408574","product_id":100017301,"comment_content":"关于求平方根的题，我知道一种比较巧妙的方法，那就是利用魔数，时间复杂度是 O(1)，根据我测试，精度大概能精确到 5 位小数，也还不错。下面是 c 语言代码<br><br>float q_rsqrt(float number) {<br>    int i;<br>    float x2, y;<br>    const float threehalfs = 1.5;<br>    x2 = number * 0.5;<br>    y = number;<br>    i = *(int*)&amp;y;<br>    i = 0x5f3759df - (i &gt;&gt; 1);<br>    y = *(float*)&amp;i;<br>    y = y * (threehalfs - (x2 * y * y));<br>    y = y * (threehalfs - (x2 * y * y));<br>    y = y * (threehalfs - (x2 * y * y));<br><br>    return 1.0 &#47; y;<br>}","like_count":12,"discussions":[{"author":{"id":2035271,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0e/47/cb39bcb1.jpg","nickname":"Json","note":"","ucode":"2C28E0CBEB2FBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402513,"discussion_content":"没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633911125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162301,"user_name":"慧","can_delete":false,"product_type":"c1","uid":1658778,"ip_address":"","ucode":"E0FC2EF7AE33B2","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/9a/e71af464.jpg","comment_is_top":false,"comment_ctime":1576496449,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48821136705","product_id":100017301,"comment_content":"1.求一个数的平方根<br>问题咋一看与二分查找并无联系 细想思路正是利用二分查找的思路求解<br>public static Double squareRoot(int a){<br>        double x = 0;<br>        double low = 0;<br>        double high = a;<br>        while(low&lt;=high){<br>             x = (low+high)&#47;2;<br>             if(x*x&gt;a){<br>                 high = x-0.000001;<br>             }<br>             if(x*x&lt;a){<br>                 low = x+0.000001;<br>             }<br>        }<br>        return new BigDecimal(x).setScale(6, BigDecimal.ROUND_HALF_UP).doubleValue();<br>    }","like_count":11,"discussions":[{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574127,"discussion_content":"while循环中，为什么不用x*x == a做为跳出循环的条件呢？我试了试也是可以的，x-0.000001的方式不太好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653839491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56583,"user_name":"yu🐟","can_delete":false,"product_type":"c1","uid":1181583,"ip_address":"","ucode":"E988567C46539E","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/8f/3ef096f3.jpg","comment_is_top":false,"comment_ctime":1546499867,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27316303643","product_id":100017301,"comment_content":"&#47;**<br>     * 求一个数的平方根<br>     *<br>     * @param n：待求的数<br>     * @param deltaThreshold 误差的阈值<br>     * @return<br>     *&#47;<br>    public static double getSqureRoot(int n, double deltaThreshold) {<br>        double low = 1.0;<br>        double high = (double) n;<br>        while (low &lt;= high) {<br>            double mid = low + ((high - low) &#47; 2);<br>            double square = mid * mid;<br>            double delta = Math.abs(square &#47; n - 1);<br>            if (delta &lt; deltaThreshold) {<br>                return mid;<br>            } else if (square &lt; n) {<br>                low = mid;<br>            } else {<br>                high = mid;<br>            }<br>        }<br>        return -1.0;<br>    }","like_count":6,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36365,"discussion_content":"这个算法得出的结果不准确\n比如4的平方根","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571368558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4563,"discussion_content":"square / n - 1 这个是啥意思呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565549115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35786,"user_name":"啊波次的额佛哥～","can_delete":false,"product_type":"c1","uid":1201998,"ip_address":"","ucode":"6F31255207CB17","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/4e/302bfe22.jpg","comment_is_top":false,"comment_ctime":1540799978,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27310603754","product_id":100017301,"comment_content":"平方根C代码，precision位数，小数点后6位是0.000001<br>double squareRoot(double a , double precision){<br>    double low,high,mid,tmp;<br>    if (a&gt;1){<br>        low = 1;<br>        high = a;<br>    }else{<br>        low = 1;<br>        high = a;<br>    }<br>    while (low&lt;=high) {<br>        mid = (low+high)&#47;2.000;<br>        tmp = mid*mid;<br>        if (tmp-a &lt;= precision &amp;&amp; tmp-a &gt;= precision*-1){<br>            return mid;<br>        }else if (tmp&gt;a){<br>            high = mid;<br>        }else{<br>            low = mid;<br>        }<br>    }<br>    return -1.000;<br>}<br>int main(int argc, const char * argv[]) {<br>    double num = squareRoot(2, 0.000001);<br>    printf(&quot;%f&quot;,num);<br>    return 0;<br>}","like_count":6,"discussions":[{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4565,"discussion_content":"写反了吧～～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565550232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4562,"discussion_content":"    if (a>1){\n        low = 1;\n        high = a;\n    }else{\n        low = 1;\n        high = a;\n    }\n\n你这里不对吧～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565548800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35322,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1540517308,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27310321084","product_id":100017301,"comment_content":"链表的二分查找，每次查找的时间复杂度都为当前数据规模的一半，所以最坏情况下：<br>查找次数f(n) = n + n&#47;2 + n&#47;4  + n&#47;8 + ... + 1 = n(1 + 1&#47;2 + 1&#47;4 + ... 1&#47;n)<br><br>情况1： n = 2^k, 根据等比数列公式 f(n) = 2^k * ( 1 - (1&#47;2) ^k) &#47; (1 - 1&#47;2) = 2n - 1<br>情况2：n != 2^k, 假设k无穷大，则limf(n) = n ( 1 &#47; (1 - 1&#47;2)) = 2n, 实际上k &lt; +∞， 所以<br>f(n) &lt; lim f(n) = 2n  =&gt; f(n) = 2n-1<br><br>综上所述，f(n) = 2n - 1, 时间复杂度为O(n)<br>","like_count":6,"discussions":[{"author":{"id":2543096,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/HnBaia1K1icyKyuWvYfYRLsVjycf3clLV53GhibnSqlzprOibxJJSF8MuSqfz422KpV1buKia0rDLuGSYFib3SoZS8Lg/132","nickname":"邓志渊","note":"","ucode":"C71C0A3AFC7FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559200,"discussion_content":"除非第一次是循环一下这个链表多长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648644536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2543096,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/HnBaia1K1icyKyuWvYfYRLsVjycf3clLV53GhibnSqlzprOibxJJSF8MuSqfz422KpV1buKia0rDLuGSYFib3SoZS8Lg/132","nickname":"邓志渊","note":"","ucode":"C71C0A3AFC7FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559199,"discussion_content":"你一开始就是错误的，这个链表（双向链表）默认和数组一样有序的，第一次n/2就可以比较了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648644441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052749,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/4d/efe9e272.jpg","nickname":"易水","note":"","ucode":"B677F978CE054E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369808,"discussion_content":"这个求解赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619161865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35083,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1540398029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23015234509","product_id":100017301,"comment_content":"思考题2：二分查找使用在链表上实现起来很麻烦，最坏情况下的查询和比较次数之和是：<br>f(n)=n+(n&#47;2+n&#47;4+...+n&#47;2^k)+k  <br>其中第一个n是获取链表长度，圆括号里为根据low获取middle元素比较次数，k为循环次数且2^k=n<br>f(n)=n(2 - 1&#47;2^k)+k       其中2^k=n<br>f(n)=2n-1+log2n<br>所以时间复杂T(n)=O(2n-1+log2n)=O(n)<br>在代码实现的过程已经深刻的认识到，链表上使用二分查找非常不妥，实际上在获取链表长度n时就已经扫描了全表，此操作就已经可以判断给定元素是否在链表内了。并且顺序扫描还不需要链表有序。。。<br>以上是我的思考，望纠错，谢谢老师！<br>","like_count":5},{"had_liked":false,"id":236659,"user_name":"丛星星","can_delete":false,"product_type":"c1","uid":2054148,"ip_address":"","ucode":"56C8CC5E6BA0C2","user_header":"https://static001.geekbang.org/account/avatar/00/1f/58/04/44e27791.jpg","comment_is_top":false,"comment_ctime":1595493213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18775362397","product_id":100017301,"comment_content":"public static Double squareRoot(int a){<br>        double x = 0;<br>        double low = 0;<br>        double high = a;<br>        while(low&lt;=high){<br>            x = (low+high)&#47;2;<br>            if(x&gt;a&#47;x){<br>                high = x-0.000001;<br>            }<br>            &#47;&#47;防止溢出<br>            if(x&lt;a&#47;x){<br>                low = x+0.000001;<br>            }<br>            if(x==a&#47;x){<br>                &#47;&#47;刚好整除<br>                return x+0.000001;<br>            }<br>        }<br>        &#47;&#47;精确到六位小数<br>        return new BigDecimal(x).setScale(6, BigDecimal.ROUND_HALF_UP).doubleValue();<br>    }<br>","like_count":4},{"had_liked":false,"id":69949,"user_name":"王博","can_delete":false,"product_type":"c1","uid":1364095,"ip_address":"","ucode":"3D463574542A11","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/7f/1ad28cd3.jpg","comment_is_top":false,"comment_ctime":1550914424,"is_pvip":false,"replies":[{"id":"25052","content":"这个跟计算机硬件、编程语言都有关系的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551060862,"ip_address":"","comment_id":69949,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18730783608","product_id":100017301,"comment_content":"一个整数占八个字节吗？？？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440372,"discussion_content":"这个跟计算机硬件、编程语言都有关系的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551060862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34954,"user_name":"追风者","can_delete":false,"product_type":"c1","uid":1055092,"ip_address":"","ucode":"879BC372A6B605","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRiciax3Wo78c5rVjuWDiaw4ibcCiby8xiaMXJh5ibjU5242vfCGOK4ehibe1IKyxex2A4IX4XSA/132","comment_is_top":false,"comment_ctime":1540368508,"is_pvip":false,"replies":[{"id":"12496","content":"概念知识应该全了 考研的话还要看看考纲吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394358,"ip_address":"","comment_id":34954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18720237692","product_id":100017301,"comment_content":"王老师，考研的话可以以这个课程作为数据结构第一轮的基础复习吗。如果可以，还需要补充其他概念知识吗","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427398,"discussion_content":"概念知识应该全了 考研的话还要看看考纲吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35129,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1540432517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425334405","product_id":100017301,"comment_content":"二分查找Python实现：<br>1、非递归方式<br>def bsearch(ls, value):<br>    low, high = 0, len(ls)-1<br>    while low &lt;= high:<br>        mid = low + (high - low) &#47;&#47; 2<br>        if ls[mid] == value:<br>            return mid<br>        elif ls[mid] &lt; value:<br>            low = mid + 1<br>        else:<br>            high = mid - 1<br>    return -1<br><br>2、递归方式<br>def bsearch(ls, value):<br>    return bsearch_recursively(ls, 0, len(ls)-1, value)<br>    <br>def bsearch_recursively(ls, low, high, value):<br>    if low &gt; high:<br>        return -1<br>    mid = low + (high - low) &#47;&#47; 2<br>    if ls[mid] == value:<br>        return mid<br>    elif ls[mid] &lt; value:<br>        return bsearch_recursively(ls, mid+1, high, value)<br>    else:<br>        return bsearch_recursively(ls, low, mid-1, value)","like_count":3},{"had_liked":false,"id":34968,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1540372203,"is_pvip":false,"replies":[{"id":"12587","content":"😄 我们马上就要讲跳表","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540517366,"ip_address":"","comment_id":34968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14425274091","product_id":100017301,"comment_content":"简单的链表不能用于二分查找，但是多级链表，比如跳表应该挺适合的","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427401,"discussion_content":"😄 我们马上就要讲跳表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540517366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34826,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1540314056,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14425215944","product_id":100017301,"comment_content":"算了下,链表如果使用二分查找法的话,应该是O(n)的时间复杂度.","like_count":3},{"had_liked":false,"id":34824,"user_name":"十三","can_delete":false,"product_type":"c1","uid":1196791,"ip_address":"","ucode":"D3EFE8729DDE8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/42/f7/9dce9a7b.jpg","comment_is_top":false,"comment_ctime":1540312913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425214801","product_id":100017301,"comment_content":"二分法一直在用，知道太小的、非数组、非有序的确实不适合用，不过确实没有注意到太大的局限性！get√了~","like_count":3},{"had_liked":false,"id":297121,"user_name":"niss","can_delete":false,"product_type":"c1","uid":2064501,"ip_address":"","ucode":"7449D8B30EE0E1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/80/75/c00e3116.jpg","comment_is_top":false,"comment_ctime":1623317965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10213252557","product_id":100017301,"comment_content":"第一题实现，欢迎指正<br>public float pfg(float n) {<br>        float l = 0;<br>        float r = n;<br>        while (r - l &gt; 0.000001) {<br>            float mid = l + (r - l) &#47; 2;<br>            if (mid * mid &gt; n) {<br>                r = mid;<br>            } else {<br>                l = mid;<br>            }<br>        }<br>        return l;<br>    }","like_count":2},{"had_liked":false,"id":170204,"user_name":"魏","can_delete":false,"product_type":"c1","uid":1663571,"ip_address":"","ucode":"6B167E159CA82C","user_header":"https://static001.geekbang.org/account/avatar/00/19/62/53/f740a188.jpg","comment_is_top":false,"comment_ctime":1578549805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168484397","product_id":100017301,"comment_content":"C语言实现求一个数的平方根<br>double findSquareRoot(int value ,double precision)<br>{<br>    if(value&lt;0)<br>    {<br>        printf(&quot;you must input positive integer&quot;);<br>        return -1;<br>    }<br>    double low;<br>    double high;<br>    if(value&lt;=1)<br>    {<br>         low=value;<br>         high=1.;<br>    }<br>    else<br>    {<br>         low=1.;<br>         high=value;<br>    }<br> <br>  <br>    while(1)<br>    {<br>        double mid=(low+high)&#47;2;<br>        double squaredValue=mid*mid;<br>        if(value-squaredValue&lt;=precision&amp;&amp;value-squaredValue&gt;=-1*precision)<br>        {<br>            return mid;<br>        }<br>        else if(value-squaredValue&gt;precision)<br>        {<br>            low=mid;<br>        }<br>        else<br>        {<br>            high=mid;<br>        }<br>    }<br><br>}","like_count":2},{"had_liked":false,"id":120567,"user_name":"Geek_86533a","can_delete":false,"product_type":"c1","uid":1610333,"ip_address":"","ucode":"6961C429E8953A","user_header":"","comment_is_top":false,"comment_ctime":1564930017,"is_pvip":false,"replies":[{"id":"44268","content":"😅 你可以看看下一篇文章。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564966724,"ip_address":"","comment_id":120567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154864609","product_id":100017301,"comment_content":"老师，您好，感觉二分查找在实际不同问题的应用中，边界条件十分复杂，很容易产生死循环，应该怎么分析？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461389,"discussion_content":"😅 你可以看看下一篇文章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564966724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107716,"user_name":"cjxz","can_delete":false,"product_type":"c1","uid":1588610,"ip_address":"","ucode":"9735F51D4721E9","user_header":"","comment_is_top":false,"comment_ctime":1561599169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151533761","product_id":100017301,"comment_content":"第二题：如果使用链表存储顺序值，二分查找都是取中间值。这样最耗时的就是定位中间元素。根据链表的特征：<br>第一次查找中间值：n&#47;2<br>第二次查找中间值：n&#47;2&#47;2=n&#47;4<br>第三次查找中间值：n&#47;4&#47;2=n&#47;8<br>知道找到最后一个元素：1<br>这样将前面的数据累加起来：n&#47;2+n&#47;4+n&#47;8+....+1<br>这就是等比数列求和。所以最终时间复杂度为O(n)<br>","like_count":2},{"had_liked":false,"id":69297,"user_name":"Cocoaleeo","can_delete":false,"product_type":"c1","uid":1241024,"ip_address":"","ucode":"C17515927FA9C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/c0/0c690636.jpg","comment_is_top":false,"comment_ctime":1550713750,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10140648342","product_id":100017301,"comment_content":"第一题：把要求对数乘10^6得到A，使用二分查找1-A之间的数的平方最接近A的数，得到后再除以10^6，得到结果。","like_count":2,"discussions":[{"author":{"id":2036705,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/13/e1/6939ae4f.jpg","nickname":"knight劉先生","note":"","ucode":"CEE9BFC8D3D969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287835,"discussion_content":"10的平方根是3.333,100的平方根是10.000，思路不对，少年","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593566476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67026,"user_name":"Pre-Y","can_delete":false,"product_type":"c1","uid":1396900,"ip_address":"","ucode":"A13D13A37F3ABC","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/a4/8d2e454b.jpg","comment_is_top":false,"comment_ctime":1550057669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139992261","product_id":100017301,"comment_content":"今日份的打卡。<br>评论区好多大佬，学到了<br>😄","like_count":2},{"had_liked":false,"id":35075,"user_name":"彬","can_delete":false,"product_type":"c1","uid":1243302,"ip_address":"","ucode":"3AFFFABEFE0264","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/a6/84539fc1.jpg","comment_is_top":false,"comment_ctime":1540395187,"is_pvip":false,"replies":[{"id":"12583","content":"👍 考虑的很细致 不过二分只需要10次最多","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540517165,"ip_address":"","comment_id":35075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10130329779","product_id":100017301,"comment_content":"1000条订单记录，无重复的从小到大排列，在不用二分查找的情况下，从左至右查找，只要一个数大于19，其后面位置的数也就不用遍历了，所以找到19的订单最坏情况需要19次。之前我可能没描述清楚～","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427436,"discussion_content":"👍 考虑的很细致 不过二分只需要10次最多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540517165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270576,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1609164013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5904131309","product_id":100017301,"comment_content":"1.什么是二分查找<br><br>在一个有序的数组中，要查找指定的元素，可以先找到数组的中点，判断这个中点是不是给定元素；如果不是，再根据中点进行大小比较，判断要查找的元素是出现在中点的哪一侧，从而缩短查找范围；在目标范围内继续执行上述操作，直到找到元素或范围内没有元素为止。<br><br>2.二分查找的代码实现方式<br><br>二分查找的代码实现方式主要有两种：第一种是循环；第二种是递归；<br><br>在使用循环的时候，需要注意以下几点内容，从而降低代码出错的概率：<br><br>2.1 找准终止条件，当 low &lt;= height 时退出循环<br>2.2 确定好每次循环的 low 和 height 的赋值<br>2.3 在计算中点时，建议使用 mid = low + ( height - low ) &gt;&gt; 1  这种计算方式。如果使用 mid =( low + height ) &#47; 2 的方式，当low 和 height 都很大时，会导致计算失效<br><br>3. 二分查找的时间复杂度<br><br>当数组中有 n 个元素时，每一次查找都会使查找范围缩小一半； 查找k次之后得到结果。 那么表达式为 n &#47; 2^k = 1 ; k = log(n) ； 所以时间复杂度为O(logN)<br><br>4.二分查找的局限性：<br><br>4.1 前提必须是数组，因为只有数组支持下标的随机访问，时间复杂度为O(1)<br>4.2 数组内的元素必须是有序的。如果需要进行频繁的插入或删除的动态数据，要先排序才能进行二分查找，但是最快的排序方法，时间复杂度也为O(NlogN)。所以二分查找针对于静态数据进行一次排序多次查找的场景更加适用，这种场景下（均摊=最好）时间复杂度仍为O(logN)<br>4.3 受数组内存结构的影响，数据量不宜过大。当数据量过大时，即使内存空间足够也会因为不连续，导致分配内存不成功。<br>4.4 当元素个数很少时，使用二分查找和直接进行遍历的时间复杂度时差不多的，但如果元素的比较操作耗时时，不管数据量大小都推荐使用二分查找。<br><br><br>在大部分可以使用二分查找的场景中，都可以用哈希表和二叉树解决。但当内存有限制时，二分查找更有优势，因为后两种数据结构占用额外的内存空间。","like_count":1},{"had_liked":false,"id":251838,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1601900995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896868291","product_id":100017301,"comment_content":"用二分法求平方根需要注意根据差值大小调整步进大小，如果一开始就用精度0.000001作为步进的话，当所求的值很大时，消耗的时间会非常久，这也是二分法的局限所在。牛顿逼近法每次可以选取最合适的步进，因此效率相比二分法要高很多","like_count":1},{"had_liked":false,"id":236753,"user_name":"exception","can_delete":false,"product_type":"c1","uid":1180979,"ip_address":"","ucode":"F35ACB5B921353","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/33/c33c0e8a.jpg","comment_is_top":false,"comment_ctime":1595517293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890484589","product_id":100017301,"comment_content":"第一题其实很简单，两边同时做平方操作，接下来就是个等值查询，用二分即可。","like_count":1},{"had_liked":false,"id":210744,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1587818888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882786184","product_id":100017301,"comment_content":"60天攻克算法打卡行动第12-13天<br><br>学习内容 :排序优化：如何实现一个通用的、高性能的排序函数？<br><br>大部分排序函数都是采用 O(nlogn) 排序算法来实现，掌握这3个方面，就能实现一个工业级的通用的、高效的排序函数<br><br>1.如何选择合适的排序算法<br>时间复杂 ，是否稳定排序（相同值前后顺序不变），是否原地排序（空间复杂O（1））。<br>2.如何用优化快速排序<br>-&gt;三数取中 首尾中，取三个数然后3个数中的中间值作为分区点可根据数组长度来进行三数取中，五数取中。。。。<br>-&gt;随机法 就是随机从数组总随取一个数作为分区点<br>3.分析qsort() 函数的底层实现原理<br>归并，快速，插入排序都用到；选择分区应用了 三数取中法 ，内部自己实现一个堆上的栈，手动模拟递归来解决的。<br><br>学习内容 : 二分查找（上）：如何用最省内存的方式实现快速查找功能？<br><br>二分查找是一种针对有序数据的高效查找算法，思想非常简单，理解了它的核心思想和适用场景，就能实现灵活应用。<br><br>1.无处不在的二分思想<br>前提条件必须是有序的，折半查找，每次跟一般做对比。<br>2.O(logn) 惊人的查找速度<br>二分法的复杂度是logn，因为是一个等比数列，n n&#47;2 n&#47;4 n&#47;8 .... n&#47;2^k = 1 k = log2n<br>3.二分查找的递归与非递归实现<br>-&gt;low&lt;=high not low&lt;high <br>-&gt; mid = (low+high)&#47;2 low+high 数据大了容易溢出，所以优化 mid=low + （high-low）&#47;2 再进行更加细致的优化 mid = low + (（high - low）&gt;&gt;1 ) 计算机处理位运算要比除法运算更快。<br>-&gt;low = mid + 1， high = mid-1 <br>同样可以用递归实现只要记住这三点。<br>4.二分查找应用场景的局限性<br>-&gt;二分查找必须是有序的数组<br>-&gt;插入、删除操作不频繁，一次排序多次查找场景。针对动态变化的数据集合，二分查找将不再适用。<br>-&gt;数据量太小，不适合二分。<br>-&gt;二分底层依赖数组这种数据结构，对于太大的数据来说也不适合。","like_count":1},{"had_liked":false,"id":208497,"user_name":"傅盛磊","can_delete":false,"product_type":"c1","uid":1807972,"ip_address":"","ucode":"30224FACE1337B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/64/96b272d2.jpg","comment_is_top":false,"comment_ctime":1587371490,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5882338786","product_id":100017301,"comment_content":"我有个问题，在1000万数据中快速找一个数据，如果只要找一个数据的话，直接放在数组里遍历一遍不是比较快吗，只要O(n)。先排序再二分查找至少要O(nlogn)，求解答","like_count":1,"discussions":[{"author":{"id":2169775,"avatar":"https://static001.geekbang.org/account/avatar/00/21/1b/af/f766fef7.jpg","nickname":"赵文帅","note":"","ucode":"B36E8BD8136B02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565732,"discussion_content":"我也是这么想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650530941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178222,"user_name":"Pocket","can_delete":false,"product_type":"c1","uid":1738320,"ip_address":"","ucode":"9D73C888484B33","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/50/dac6cb0f.jpg","comment_is_top":false,"comment_ctime":1581617595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876584891","product_id":100017301,"comment_content":"自行用python实现了一下（多多大家指点）：<br>def sqrt_search(value, n=6):<br>    &#39;&#39;&#39;<br>    求一个数的平方根(利用二分法查找的思想，慢慢查出最符合精确值的数值即可)<br>    :param value: 需要求的数值<br>    :param n: 保留几位小数(默认6位小数)<br>    :return: 返回数值的平方根（一般结果是分正数和负数，这里只返回正数）<br>    &#39;&#39;&#39;<br>    if value &lt; 0: raise Exception(&#39;不能小于0&#39;)<br>    if value == 0 or value == 1: return value<br><br>    # 确定初始区间<br>    low = 0<br>    hight = 1<br>    if value &gt;= 4 :  # 任何大于等于4的数的平方根都不会大于这个数的一半<br>        hight = value &#47; 2.0<br>    elif value &lt; 4:<br>        hight = value<br>    mid = hight<br>    bit = 0.1 ** n<br>    # 如果用mid * mid 判断的话有溢出的风险<br>    while abs(hight - low) &gt; bit:  # 判断条件为mid平方减去value的绝对值&lt;=需要保留的精度时推出查找<br>        tmp = mid * mid<br>        if tmp == value:<br>            return mid<br>        elif (tmp - value) &gt; bit:<br>            hight = mid<br>        elif (tmp - value) &lt; bit:<br>            low = mid<br>        mid = low + ((hight - low)) &#47; 2.0<br>    return round(mid, n)<br>    <br>if __name__ == &#39;__main__&#39;:<br>    print(sqrt_search(58,10))<br>    <br>    # 可使用自带的求平方根函数验证<br>    from math import sqrt<br>    print(sqrt(58))","like_count":1},{"had_liked":false,"id":64191,"user_name":"演","can_delete":false,"product_type":"c1","uid":1207869,"ip_address":"","ucode":"D2130DF72E2352","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/3d/f88891e3.jpg","comment_is_top":false,"comment_ctime":1548689518,"is_pvip":false,"replies":[{"id":"24189","content":"800MB放内存问题不大。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550480717,"ip_address":"","comment_id":64191,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5843656814","product_id":100017301,"comment_content":"老师，你好！1000万*8字节远远大于800M啊，理解不了为什么可以同时放进数组中。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437900,"discussion_content":"800MB放内存问题不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550480717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":118859,"discussion_content":"1M = 2^20，约等于 100万。1000万*8字节的数组应该是80M。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578195420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45213,"user_name":"KlausZ","can_delete":false,"product_type":"c1","uid":1186012,"ip_address":"","ucode":"A58FD513E7765C","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/dc/cbe32782.jpg","comment_is_top":false,"comment_ctime":1543561314,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5838528610","product_id":100017301,"comment_content":"老师，求题1的正解，留言区貌似没看到指定的答案呢。","like_count":1,"discussions":[{"author":{"id":1708223,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/10/bf/45ad6573.jpg","nickname":"vvvvv呀","note":"","ucode":"D1239EC975670D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48193,"discussion_content":"我自己写的，希望对你有帮助\n#二分法求平方根\ndef square_root(x):\n    if x < 0:\n        return -1\n    if x == 0:\n        return 0\n    low, high = 1, x\n    while low < high:\n        # mid = float(low)+float((high-low)/2)\n        mid = low + (high-low)/2\n        val = mid ** 2\n        if abs(val-x) < 1e-12:\n            print(mid)\n            return round(mid,6)\n        if val == x:\n            return mid\n        elif val < x:\n            low = mid\n        else:\n            high = mid\nfrom math import sqrt\nprint(sqrt(5.3))\nprint(square_root(5.3))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573460180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40287,"user_name":"庞庞庞","can_delete":false,"product_type":"c1","uid":1255553,"ip_address":"","ucode":"0F16BCB75E3BF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/81/be7aba0e.jpg","comment_is_top":false,"comment_ctime":1542589713,"is_pvip":false,"replies":[{"id":"14679","content":"看下一节课","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542679393,"ip_address":"","comment_id":40287,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837557009","product_id":100017301,"comment_content":"如果数组里值里有相同元素的话，二分是没办法的吧！","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429458,"discussion_content":"看下一节课","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542679393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36893,"user_name":"蓝天","can_delete":false,"product_type":"c1","uid":1239788,"ip_address":"","ucode":"25760853BC1C01","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBzcWHFreCY9PJzANxSKrGTB01oicic2OO1w5CYSIMUGhZyzFia6R93fTSdKrNuiaZT0SUXx4O7Qkgww/132","comment_is_top":false,"comment_ctime":1541381906,"is_pvip":false,"replies":[{"id":"13270","content":"也可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541468580,"ip_address":"","comment_id":36893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5836349202","product_id":100017301,"comment_content":"请问老师第一个二分查找代码，int n参数是干嘛的，不能在方法内部直接用数组的长度吗","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428078,"discussion_content":"也可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541468580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35368,"user_name":"oldman","can_delete":false,"product_type":"c1","uid":1133711,"ip_address":"","ucode":"6BACE2832B4429","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","comment_is_top":false,"comment_ctime":1540525956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835493252","product_id":100017301,"comment_content":"用python写了一下二分查找的两种简单实现<br>https:&#47;&#47;github.com&#47;lipeng1991&#47;testdemo&#47;blob&#47;master&#47;48_simple_binary_search_01.py<br>大家一起交流","like_count":1},{"had_liked":false,"id":35202,"user_name":"追风者","can_delete":false,"product_type":"c1","uid":1055092,"ip_address":"","ucode":"879BC372A6B605","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRiciax3Wo78c5rVjuWDiaw4ibcCiby8xiaMXJh5ibjU5242vfCGOK4ehibe1IKyxex2A4IX4XSA/132","comment_is_top":false,"comment_ctime":1540458428,"is_pvip":false,"replies":[{"id":"12573","content":"可以 不过 还是要看看你们的考试大纲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540516108,"ip_address":"","comment_id":35202,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835425724","product_id":100017301,"comment_content":"王老师，考研可以以这个专栏作为数据结构的第一轮基础复习么？如果可以，还需要完善哪些知识？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427475,"discussion_content":"可以 不过 还是要看看你们的考试大纲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540516108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35181,"user_name":"qzq","can_delete":false,"product_type":"c1","uid":1130407,"ip_address":"","ucode":"334B5E522EBF1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/a7/a378347f.jpg","comment_is_top":false,"comment_ctime":1540449484,"is_pvip":false,"replies":[{"id":"12574","content":"可以构建散列表 红黑树。如果是单纯的无序数组 只能遍历查找。当然你也可以随机查找","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540516191,"ip_address":"","comment_id":35181,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835416780","product_id":100017301,"comment_content":"二分查找的基础是数据要有序吧？我就想，如果无序怎么办？只能O(n)，挨个找？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427470,"discussion_content":"可以构建散列表 红黑树。如果是单纯的无序数组 只能遍历查找。当然你也可以随机查找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540516191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34972,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1540372999,"is_pvip":false,"replies":[{"id":"12586","content":"不对 不够紧确","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540517310,"ip_address":"","comment_id":34972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835340295","product_id":100017301,"comment_content":"链表二分查找法 我通过写代码 分析得出 首先每次要平分成两半 大概就是大概需要就是logn次 在每一次里面 要对每个结点进行遍历 应该据说n 所以总得来说 应该是O(nlogn)的复杂度对不？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427402,"discussion_content":"不对 不够紧确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540517310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34971,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1540372914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835340210","product_id":100017301,"comment_content":"1. 假设所给数为x,则取[0,x]区间的中点m，检查中点m的平方是否大于x,若大于，则区间取为[0,m]，如果不是，则取为[m,x]。重复该过程，直到区间长度小于10^(-6)。<br>2. 链表最优情况时间复杂度是O(n&#47;2)=O(n)，最差情况时间复杂度是O(n&#47;2+n&#47;4+n&#47;8+...+1)=O(n),平均情况时间复杂度是O(n)","like_count":1},{"had_liked":false,"id":34862,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1540342556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835309852","product_id":100017301,"comment_content":"课后思考题：可以用二分法计算一个数的平方根。对于整数部分和6位小数位分别使用二分查找。","like_count":1},{"had_liked":false,"id":34849,"user_name":"彬","can_delete":false,"product_type":"c1","uid":1243302,"ip_address":"","ucode":"3AFFFABEFE0264","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/a6/84539fc1.jpg","comment_is_top":false,"comment_ctime":1540340646,"is_pvip":false,"replies":[{"id":"12504","content":"不对吧 最多是logn+1吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394769,"ip_address":"","comment_id":34849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835307942","product_id":100017301,"comment_content":"1000条订单记录，无重复的从小到大排列，找到19的订单最多需要19次吧？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427362,"discussion_content":"不对吧 最多是logn+1吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34831,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1540335590,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5835302886","product_id":100017301,"comment_content":"1.最主要的问题是怎么精确第6位停止吧，我觉得首先折半的时候，只计算到第6位，然后和上一次比较，如果相等就可以结束了。当然鉴于浮点数计算不精确，先把原数乘1000000，但这样很容易就溢出了吧，还是用高精度的实现吧2.如果用单链表实现，先遍历一遍知道长度，每次折半都需要定位当前部分链表的中间元素，查询次数不变，总得算起来n+n&#47;2+n&#47;4....+1,所以是O(n)的复杂度。","like_count":1},{"had_liked":false,"id":358530,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1664414569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664414569","product_id":100017301,"comment_content":"总结：<br>1. 二分法时间复杂度为O(logn)<br>2. 使用场景：静态有序数组<br>关于第一题，看了很多回答都是将left或者right=mid，但是文中说这样可能会导致有死循环。所以改成了mid+1或者mid-1。但是这样一来就导致了left可能大于right，但是这题的判断条件并不是left和right的位置，所以没有影响。<br>func main() {<br>\ttarget := 6.0<br>\tmid := 3.0<br>\tleft := 0.0<br>\tright := 6.0<br>\tfor absolute(mid*mid-target) &gt; 0.001 {<br>\t\ttmp := mid * mid<br>\t\tif tmp == target {<br>\t\t\tbreak<br>\t\t}<br>\t\tif tmp &lt; target {<br>\t\t\tleft = mid + 1<br>\t\t} else if tmp &gt; target {<br>\t\t\tright = mid - 1<br>\t\t}<br>\t\tmid = left + (right - left)&#47;2<br>\t}<br>\tfmt.Println(mid)<br>}<br><br>func absolute(i float64) float64 {<br>\tif i &lt; 0 {<br>\t\treturn -i<br>\t}<br>\treturn i<br>}","like_count":0},{"had_liked":false,"id":356016,"user_name":"~patience","can_delete":false,"product_type":"c1","uid":1614285,"ip_address":"四川","ucode":"8D9BC78A241CEA","user_header":"https://static001.geekbang.org/account/avatar/00/18/a1/cd/bc74741c.jpg","comment_is_top":false,"comment_ctime":1661919896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661919896","product_id":100017301,"comment_content":"java写的,这样应该是对的了<br><br> &#47;**<br>     * 实现“求一个数的平方根”？要求精确到小数点后 6 位<br>     *<br>     * @param a<br>     * @return<br>     *&#47;<br>    public static BigDecimal squareRoot(BigDecimal a) {<br>        a = a.setScale(6,BigDecimal.ROUND_DOWN);<br>        BigDecimal mid = a.divide(BigDecimal.valueOf(2));<br>        BigDecimal low = BigDecimal.valueOf(0);<br>        BigDecimal high = a;<br>        &#47;&#47; 如果a&lt;1,则平方根比a要大,所以high初始值=1<br>        if (a.compareTo(new BigDecimal(1)) &lt; 0) {<br>            high = new BigDecimal(1);<br>        }<br>        while (high.compareTo(low) &gt;= 0) {<br>            BigDecimal multiply = mid.multiply(mid).setScale(6, BigDecimal.ROUND_DOWN);<br>            if (multiply.equals(a)) {<br>                break;<br>            } else if (multiply.compareTo(a) &gt; 0) {<br>                &#47;&#47; mid的平方大于a,平方根肯定是在low和mid之间 则更新high=mid<br>                high = mid;<br>                mid = low.add(high).divide(BigDecimal.valueOf(2));<br>            } else {<br>                &#47;&#47; mid的平方小于a,说明平方根肯定在mid和high之间,则更新low=mid<br>                low = mid;<br>                mid = low.add(high).divide(BigDecimal.valueOf(2));<br>            }<br>        }<br>        return mid.setScale(6, BigDecimal.ROUND_DOWN);<br>    }","like_count":0},{"had_liked":false,"id":356014,"user_name":"~patience","can_delete":false,"product_type":"c1","uid":1614285,"ip_address":"四川","ucode":"8D9BC78A241CEA","user_header":"https://static001.geekbang.org/account/avatar/00/18/a1/cd/bc74741c.jpg","comment_is_top":false,"comment_ctime":1661919203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661919203","product_id":100017301,"comment_content":"用java实现的,测试了一下,应该是对的吧    <br>&#47;**<br>     * 实现“求一个数的平方根”？要求精确到小数点后 6 位<br>     *<br>     * @param a<br>     * @return<br>     *&#47;<br>    public static BigDecimal squareRoot(BigDecimal a) {<br>        a = a.setScale(6);<br>        BigDecimal mid = a.divide(BigDecimal.valueOf(2));<br>        BigDecimal low = BigDecimal.valueOf(0);<br>        BigDecimal high = a;<br>        while (high.compareTo(low) &gt;= 0) {<br>            BigDecimal multiply = mid.multiply(mid).setScale(6, BigDecimal.ROUND_DOWN);<br>            if (multiply.equals(a)) {<br>                break;<br>            } else if (multiply.compareTo(a) &gt; 0) {<br>                &#47;&#47; mid的平方大于a,平方根肯定是在low和mid之间 则更新high=mid<br>                high = mid;<br>                mid = low.add(high).divide(BigDecimal.valueOf(2));<br>            } else {<br>                &#47;&#47; mid的平方小于a,说明平方根肯定在mid和high之间,则更新low=mid<br>                low = mid;<br>                mid = low.add(high).divide(BigDecimal.valueOf(2));<br>            }<br>        }<br>        return mid.setScale(6, BigDecimal.ROUND_DOWN);<br>    }","like_count":0},{"had_liked":false,"id":355714,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661681179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661681179","product_id":100017301,"comment_content":"1. 分冶思想、要求有序、静态数据<br>2.实现注意<br>- 循环退出条件<br>- mid的取值<br>- low 和high更新<br>3.局限性<br>- 必须是顺序表结构，一次申请数组<br>- 有序列","like_count":0},{"had_liked":false,"id":353192,"user_name":"Finder","can_delete":false,"product_type":"c1","uid":2084305,"ip_address":"重庆","ucode":"B217658454B62D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cd/d1/81bede76.jpg","comment_is_top":false,"comment_ctime":1659249553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659249553","product_id":100017301,"comment_content":"&#47;&#47; JavaScript求一个数值的算数平方根，精确到小数点6位<br>function sqrtRoot(n){<br>  let isDecimal = n &gt; 0 &amp;&amp; n &lt; 1;<br>  let left = isDecimal ? n : 0;<br>  &#47;&#47; 特别的，当输入的值是小数的时候，mid往边界靠拢时，永远得到的是小数值，这样只会无限往right值靠近，最终只会跳出循环也找不到，因为根本就不在它的左边，这个时候可以使用以下办法<br>  &#47;&#47; 设置left为n值，right为1，在n-1之间找<br>  let right = isDecimal ? 1 : n;<br>  let mid = 0;<br>  while(left &lt;= right){<br>    mid = parseFloat(((left + right) &#47; 2).toFixed(6));<br>    if(mid ** 2 &gt; n){<br>      right = mid - 0.000001;<br>    } else if(mid ** 2 &lt; n){<br>      left = mid + 0.000001;<br>    } else {<br>      return parseFloat(mid.toFixed(6));<br>    }<br>  }<br>  return parseFloat(mid.toFixed(6));<br>}","like_count":0},{"had_liked":false,"id":346207,"user_name":"w","can_delete":false,"product_type":"c1","uid":2706487,"ip_address":"","ucode":"CE4230DB2C4398","user_header":"https://static001.geekbang.org/account/avatar/00/29/4c/37/b6626a2d.jpg","comment_is_top":false,"comment_ctime":1652893995,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652893995","product_id":100017301,"comment_content":"贴一个问题1的go代码，上面大神写的太复杂看不懂啊。<br>func mySqrt(x int) float64 {<br>\tright := float64(x)<br>\tleft := 0.0<br>\tres := -1.0<br>\tfor right-left &gt;= 0 {<br>\t\tsqrt := left + ((right - left) &#47; 2)<br>\t\tif sqrt*sqrt &gt; float64(x) {<br>\t\t\tright = sqrt<br>\t\t} else {<br>\t\t\tleft = sqrt<br>\t\t}<br>\t\tif right-left &lt; 0.000001 {<br>\t\t\tres = sqrt<br>\t\t\tbreak<br>\t\t}<br>\t}<br>\treturn res<br>}","like_count":0},{"had_liked":false,"id":345547,"user_name":"Return to zero","can_delete":false,"product_type":"c1","uid":2895981,"ip_address":"","ucode":"074C9B1B4CBF18","user_header":"https://static001.geekbang.org/account/avatar/00/2c/30/6d/a678c9a2.jpg","comment_is_top":false,"comment_ctime":1652370545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652370545","product_id":100017301,"comment_content":"写一个不要求精度的<br>class Solution {<br>    public int mySqrt(int x) {<br>        int left = 0, right = x;<br>        while(left &lt;= right){<br>            int mid = (right - left) &#47; 2 + left;<br>            if((long)mid * mid == x){<br>                return mid;<br>            }else if((long)mid * mid &gt; x){<br>                right = mid - 1;<br>            }else{<br>                left = mid + 1;<br>            }<br>        }<br><br>        &#47;&#47; 因为有可能永远都不会出现相等的情况，所以返回右边界<br>        return right;<br>    }<br>}","like_count":0},{"had_liked":false,"id":344441,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1802022,"ip_address":"","ucode":"5AC8CBCC0AD48B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7f/26/c5127e9a.jpg","comment_is_top":false,"comment_ctime":1651559664,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651559664","product_id":100017301,"comment_content":"1000w的整数，直接遍历查找：时间复杂读最好是O(1)，最坏是O(n)<br>如先排序，快排的时间复杂度：O(nlogn), 二分查找：O(logn)，那时间复杂度 ： O(nlogn) + O(logn)","like_count":0},{"had_liked":false,"id":344001,"user_name":"晨遥","can_delete":false,"product_type":"c1","uid":2971870,"ip_address":"","ucode":"C3972A1FE5E021","user_header":"https://static001.geekbang.org/account/avatar/00/2d/58/de/dad844b1.jpg","comment_is_top":false,"comment_ctime":1651163114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651163114","product_id":100017301,"comment_content":"先把求小数问题转换成求整数问题, 精度为1, 再除以10^6, 转换成小数<br><br>1. 先把要求的数 n * 10^12<br>2. 二分法求出这个数 n * 10^12 的平方根整数x, 要求x^2&lt;= n * 10^12, (x+1)^2&gt; n * 10^12<br>3. 将 x &#47; 10^6 得到精确到小数点后6位的平方根<br><br>\t&#47;**<br>     * 求一个数的平方根<br>     * @param value 数<br>     * @param accuracy 小数位数<br>     * @return<br>     *&#47;<br>    public static double square(double value, int accuracy){<br>        &#47;&#47;把它转换成求整数问题, 精度为1, 再转换为小数<br>        double bigValue = value * Math.pow(10, accuracy * 2);<br>        int low = 0;<br>        int high = (int) Math.ceil(bigValue);<br><br>        &#47;&#47;二分法查找i i^2&lt;bigValue&amp;&amp;(i+1)^2&gt;bigValue<br>        while(low &lt;= high){<br>            int mid = ((high - low) &gt;&gt; 1) + low;<br>            if (Math.pow(mid, 2) &lt;= bigValue &amp;&amp; Math.pow(mid + 1, 2) &gt; bigValue) {<br>                return mid &#47; Math.pow(10, accuracy);<br>            }else if(Math.pow(mid, 2) &gt; bigValue){<br>                high = mid - 1;<br>            }else{<br>                low = mid + 1;<br>            }<br>        }<br>        return -1D;<br>    }","like_count":0},{"had_liked":false,"id":343887,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1651113164,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1651113164","product_id":100017301,"comment_content":"求平方根的c++代码:<br>#include &lt;iostream&gt;<br>using namespace std;<br><br>double mysqrt(double n) {<br>    double l = 0, r = n + 1;<br>    while(r - l &gt;= 1e-9) {<br>        double mid = (r + l) &#47; 2;<br>        if(mid * mid &lt; n) l = mid;<br>        else r = mid;<br>    }<br><br>    return r;<br>}<br><br>int main() {<br>    double n;<br>    while(true) {<br>        cout&lt;&lt;&quot;please input calc number:&quot;;<br>        cin &gt;&gt; n;<br>        cout&lt;&lt;mysqrt(n) &lt;&lt; endl;<br>    }<br>    return 0;<br>}","like_count":0},{"had_liked":false,"id":342909,"user_name":"赵文帅","can_delete":false,"product_type":"c1","uid":2169775,"ip_address":"","ucode":"B36E8BD8136B02","user_header":"https://static001.geekbang.org/account/avatar/00/21/1b/af/f766fef7.jpg","comment_is_top":false,"comment_ctime":1650530887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650530887","product_id":100017301,"comment_content":"先排序在二分查找时间复杂度是O(nlogn)，而直接挨个遍历查找时间复杂度O(n)，为什么要前者呐","like_count":0},{"had_liked":false,"id":340586,"user_name":"曹明路","can_delete":false,"product_type":"c1","uid":1336804,"ip_address":"","ucode":"BE4328CBB0466F","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/e4/187e539e.jpg","comment_is_top":false,"comment_ctime":1648956334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648956334","product_id":100017301,"comment_content":"我们可以将这里的除以 2 操作转化成位运算 low+((high-low)&gt;&gt;1)。因为相比除法运算来说，计算机处理位运算要快得多。  老师好啊，位运算是不是很耗内存啊？","like_count":0},{"had_liked":false,"id":336857,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646403216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646403216","product_id":100017301,"comment_content":"学习小结：<br>1. 二分查找使用顺序表查找数据， 本质上就是二分思想， 时间复杂度是 O(logn), 有递归和非递归两种实现方式<br>2. 二分查找也有局限性： 第一必须是数组才可以使用；第二针对的是有序数据；第三数据太小或太大不适用二分查找<br>3. 二分查找更适合处理静态数据，当遇到数据频繁插入，删除操作时， 可以使用散列表、二叉树这些支持快速查找的动态数据结构<br>思考题：<br>链表不适合二分，中间点需要 O(n) 的时间复杂来查找；<br>平方根没想到精度误差处理，看了评论要分 0， 0~1，大于1 三段处理，思想还是不断二分","like_count":0},{"had_liked":false,"id":336650,"user_name":"廖冬阳","can_delete":false,"product_type":"c1","uid":1885611,"ip_address":"","ucode":"2581128E44DBA6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c5/ab/b8654c27.jpg","comment_is_top":false,"comment_ctime":1646275389,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646275389","product_id":100017301,"comment_content":"附上javascript平方根：<br>&#47;**<br> * 二分法求平方根<br> * @param n<br> *&#47;<br>function sqrt(n) {<br>    const error = 0.000001;<br>    let lowerLimit = 0;<br>    let upperLimit = n;<br>    while (error &lt; upperLimit - lowerLimit) {<br>        let mid = (upperLimit + lowerLimit) &#47; 2<br>        if (mid * mid == n) {<br>            return mid;<br>        } else if (mid * mid &gt; n) {<br>            upperLimit = mid<br>        } else {<br>            lowerLimit = mid;<br>        }<br>    }<br>    return (upperLimit + lowerLimit) &#47; 2;<br>}","like_count":0},{"had_liked":false,"id":334573,"user_name":"孙梦华🙄🙄","can_delete":false,"product_type":"c1","uid":1037070,"ip_address":"","ucode":"2017F0E865416C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/0e/d2f9dd72.jpg","comment_is_top":false,"comment_ctime":1645003529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645003529","product_id":100017301,"comment_content":"写一个go的版本<br><br>func format(cnt, tag int, x float64) string {<br>\ts := fmt.Sprintf(&quot;%6f&quot;, x)<br>\t&#47;&#47; 去除右侧的0，如果右侧没有小数，只有小数点时，也去除小数点<br>\ts = strings.TrimSuffix(strings.TrimRight(s, &quot;0&quot;), &quot;.&quot;)<br>\t&#47;&#47; 看看是哪种情况return的<br>\treturn fmt.Sprintf(&quot;cnt[%d]-tag[%d]-%s&quot;, cnt, tag, s)<br>}<br><br>func sqrt(x int) string {<br>\tif x &lt;= 1 {<br>\t\treturn format(0, 0, float64(x))<br>\t}<br>\tflX := float64(x)<br>\thigh := flX<br>\tlow := flX &#47; 2.0<br>\t&#47;&#47; 4,16等刚好是2的偶次幂，不必多走二分；并且让low&lt;sqrt(x)<br>\tfor {<br>\t\tif int(low*low) == x {<br>\t\t\treturn format(0, 0, low)<br>\t\t} else if low*low &gt; flX {<br>\t\t\thigh = low<br>\t\t\tlow &#47;= 2.0<br>\t\t} else {<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\t&#47;&#47; 保留6位小数，需要到第7位<br>\tdelta := 0.0000001<br>\tfor i := 1; ; i++ {<br>\t\tmid := (low + high) &#47; 2.0<br>\t\tpowMid := mid * mid<br>\t\tif powMid == flX {<br>\t\t\treturn format(i, 1, mid)<br>\t\t} else if powMid &gt; flX {<br>\t\t\tpowMidMinus := (mid - delta) * (mid - delta)<br>\t\t\tif powMidMinus &lt;= flX {<br>\t\t\t\treturn format(i, 2, mid-delta)<br>\t\t\t}<br>\t\t\thigh = mid<br>\t\t} else {<br>\t\t\tpowMidPlus := (mid + delta) * (mid + delta)<br>\t\t\tif powMidPlus == flX {<br>\t\t\t\treturn format(i, 3, mid+delta)<br>\t\t\t} else if powMidPlus &gt; flX {<br>\t\t\t\treturn format(i, 4, mid)<br>\t\t\t}<br>\t\t\tlow = mid<br>\t\t}<br>\t}<br>\treturn format(0, 0, -1.0)<br>}","like_count":0},{"had_liked":false,"id":332751,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":2464909,"ip_address":"","ucode":"C731B734562C5A","user_header":"https://static001.geekbang.org/account/avatar/00/25/9c/8d/07514b58.jpg","comment_is_top":false,"comment_ctime":1643547470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643547470","product_id":100017301,"comment_content":"话说，用15×10∧12，然后用二分法计算是不是也行","like_count":0},{"had_liked":false,"id":329053,"user_name":"。","can_delete":false,"product_type":"c1","uid":2629502,"ip_address":"","ucode":"B5178E399631EE","user_header":"https://static001.geekbang.org/account/avatar/00/28/1f/7e/fc13fcaf.jpg","comment_is_top":false,"comment_ctime":1641086891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641086891","product_id":100017301,"comment_content":"您好，请问 Sum = n - 1 是怎么计算的呢？","like_count":0},{"had_liked":false,"id":328012,"user_name":"xupengrun","can_delete":false,"product_type":"c1","uid":1029498,"ip_address":"","ucode":"D6BEEF05C31D45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/7a/ff98d190.jpg","comment_is_top":false,"comment_ctime":1640451122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640451122","product_id":100017301,"comment_content":"1000w整数查找整数是否在其中，使用bitmap来做，时间空间复杂度都是O（1），效率最高。","like_count":0},{"had_liked":false,"id":321011,"user_name":"Janus_lee","can_delete":false,"product_type":"c1","uid":2719198,"ip_address":"","ucode":"C023E91FEC6E9A","user_header":"https://static001.geekbang.org/account/avatar/00/29/7d/de/aa0ec171.jpg","comment_is_top":false,"comment_ctime":1636619233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636619233","product_id":100017301,"comment_content":"&#47;**<br> * 求一个数的平方根（要求精确到小数点后 6 位）<br> * @param {Number} number <br> *&#47;<br>function square(number) {<br>  let low = 0;<br>  let height = number;<br>  let mid = number &#47; 2<br>  &#47;&#47; 此处需要判断精确位数<br>  while (Math.abs(Math.pow(mid, 2) - number) &gt; 0.000001) {<br>    let result = Math.pow(mid, 2)<br>    if (result &gt; number) {<br>      height = mid<br>    }<br>    if (result &lt; number) {<br>      low = mid<br>    }<br>    mid = (height + low) &#47; 2<br>  }<br>  console.log(&#39;[求根结果]&#39;, mid)<br>  return mid<br>}","like_count":0},{"had_liked":false,"id":318201,"user_name":"WSZ","can_delete":false,"product_type":"c1","uid":2103542,"ip_address":"","ucode":"AB092B48C52D47","user_header":"https://static001.geekbang.org/account/avatar/00/20/18/f6/db57fef1.jpg","comment_is_top":false,"comment_ctime":1635188490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635188490","product_id":100017301,"comment_content":"东抄西抄，结合自己的一点理解<br>double sqrt(double num)<br>{<br>    &#47;&#47;是自己，直接返回<br>    if (num == 0 || num == 1)<br>        return num;<br><br>    double start = 0;<br>    double end = num;<br><br>    &#47;&#47;小于1的情况<br>    if (num &lt; 1)<br>    {<br>        start = num;<br>        end = 1;<br>    }<br><br>    double seq = 0.000001;                  &#47;&#47;精度<br>    double mid = start + (end - start) &#47; 2; &#47;&#47;中间位置<br>    &#47;&#47; auto midValue = mid * mid;              &#47;&#47;在中间位置时的值<br><br>    &#47;&#47;没有达到要求的精度，继续二分迭代<br>    while (end - start &gt; seq)<br>    {<br>        auto x = num &#47; mid; &#47;&#47;避免 mid*mid值过大，导致溢出<br>        if (mid == x)       &#47;&#47;有整数根，直接返回中间值<br>            return mid;<br>        if (mid &gt; x) &#47;&#47;大了，区域边界向左<br>            end = mid;<br>        else &#47;&#47;小了，区域边界向右，累加精度值，不断试探<br>            start = mid + seq;<br><br>        &#47;&#47;做好下一次二分迭代的准备工作<br>        mid = start + (end - start) &#47; 2;<br>    }<br><br>    return mid;<br>}","like_count":0},{"had_liked":false,"id":311381,"user_name":"T------T","can_delete":false,"product_type":"c1","uid":2270365,"ip_address":"","ucode":"AC68D88893FAD7","user_header":"https://static001.geekbang.org/account/avatar/00/22/a4/9d/95900f70.jpg","comment_is_top":false,"comment_ctime":1631194790,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631194790","product_id":100017301,"comment_content":"1.  二分查找需要注意文章中的区间范围是闭区间<br>2. 自己理解: 本质上二分查找是查找区间的缩小,low和high表示区间的边界<br> 循环退出: 两个边界之间没有数据了<br> low和high的更新: mid已经判断过了，所以缩小后的区间没有mid,只能是low =mid+1     high=mid-1<br> 如上，如果查找范围是左闭右开区间[0,n)  那么循环退出条件就是low&lt;high了","like_count":0},{"had_liked":false,"id":310380,"user_name":"哈","can_delete":false,"product_type":"c1","uid":1386084,"ip_address":"","ucode":"911AF435797571","user_header":"https://static001.geekbang.org/account/avatar/00/15/26/64/b58779db.jpg","comment_is_top":false,"comment_ctime":1630635895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630635895","product_id":100017301,"comment_content":"function squareRoot(num, start = 0, end = num &#47; 2) {<br>    if (num === 1 || num === 0) return num;<br><br>    if (((start + end) &#47; 2) ** 2 &gt; num) {<br>        return result(num, start, (start + end) &#47; 2);<br>    }<br>    if (((start + end) &#47; 2) ** 2 &lt; num) {<br>        return result(num, (start + end) &#47; 2, end);<br>    }<br><br>    return (start + end) &#47; 2;<br>}<br>这样写应该不会存在栈溢出情况吧","like_count":0},{"had_liked":false,"id":309799,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1630335851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630335851","product_id":100017301,"comment_content":"学习总结<br>1. 二分查找利用了分置的原理，可以O(logN)时间复杂度实现快速查询<br>2. 二分查询的限制条件<br> 2.1 依赖有序表结构<br> 2.2 数据必须有序<br> 2.3 数据太小不适合<br> 2.4 数据太大也不适合<br>思考题<br>1. 1和X之间二分查找，精度作为退出条件<br>2. 时间复杂度未O(nlog2n)<br>","like_count":0},{"had_liked":false,"id":304419,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1627396115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627396115","product_id":100017301,"comment_content":"double MySqrt(double x) {<br>    assert(x &gt; 0);<br>    double low = 0;<br>    double high = x;<br>    double p = 1e-6;<br>    while (1) {<br>        double mid = low + (high - low) &#47; 2;<br>        if ((mid+p)*(mid+p) &gt; x &amp;&amp; (mid-p)*(mid-p) &lt; x) return mid;<br>        if (mid * mid &gt; x) high = mid - p;<br>        else low = mid + p;<br>    }<br>}","like_count":0},{"had_liked":false,"id":299215,"user_name":"musa","can_delete":false,"product_type":"c1","uid":1471463,"ip_address":"","ucode":"3336AB85F798C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoQGZYUTo6UaPp8dicxG96lEtwichvUoPQJ27HTIRJP9TqbIyFuwoaqRYN6bdxMwxCiaUvxOfymnAXQA/132","comment_is_top":false,"comment_ctime":1624515753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624515753","product_id":100017301,"comment_content":"js求数的平方根：<br>function sqrt(v) {<br>    if (v &lt; 0) {<br>        return NaN<br>    }<br>    let low = v &lt; 1 ? v : 0<br>    let high = v &lt; 1 ? 1 : v<br>    let middle = (low + high) &#47; 2<br>    while(Math.abs(middle * middle - v) &gt; 0.000001) {<br>        if (middle * middle &gt; v) {<br>            high = middle<br>            middle = (low + middle) &#47; 2<br>        } else if (middle * middle &lt; v) {<br>            low = middle<br>            middle = (high + middle) &#47; 2<br>        } else {<br>            break<br>        }<br>    }<br>    return Number(middle.toFixed(6))<br>}<br>递归解法：<br>function r_sqrt(v) {<br>    if (v &lt; 0) {<br>        return NaN<br>    }<br>    if (v &lt; 1) {<br>        return recursionSqrt(v, v, 1)<br>    }<br>    return recursionSqrt(v, 1, v)<br>}<br><br>const precision = 0.000001<br>function recursionSqrt(v, low, high) {<br>    const middle = (low + high) &#47; 2<br>    const absDiff = Math.abs(middle * middle - v)<br>    if (absDiff &lt;= precision) return Number(middle.toFixed(6))<br>    if (middle * middle &gt; v) {<br>        return recursionSqrt(v, low, middle)<br>    } else {<br>        return recursionSqrt(v, middle, high)<br>    }<br>}","like_count":0},{"had_liked":false,"id":296645,"user_name":"溜溜球","can_delete":false,"product_type":"c1","uid":2631573,"ip_address":"","ucode":"BBA5E4405D9902","user_header":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","comment_is_top":false,"comment_ctime":1623077717,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623077717","product_id":100017301,"comment_content":"C++:<br>float square_root(float num)<br>{<br>    float low = 0;<br>    float high = num;<br>    float mid = low + (high - low) &#47; 2.0;<br>    float bound = 1 * pow(10, -6);<br>    while (abs(num &#47; pow(mid, 2) -1) &gt;= bound)<br>    {<br>        if (num &gt; pow(mid, 2))<br>        {<br>            low = mid;<br>        }<br>        else<br>        {<br>            high = mid;<br>        }<br>        mid = low + (high - low) &#47; 2.0;<br>    }<br>    return mid;<br>}","like_count":0},{"had_liked":false,"id":295706,"user_name":"王立学","can_delete":false,"product_type":"c1","uid":1328947,"ip_address":"","ucode":"D79C0DEA4C9E58","user_header":"https://static001.geekbang.org/account/avatar/00/14/47/33/c2a5b820.jpg","comment_is_top":false,"comment_ctime":1622553257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622553257","product_id":100017301,"comment_content":"Java Collections类内的二分查找源码  mid取值更巧妙 int mid = (low + high) &gt;&gt;&gt; 1; <br> private static &lt;T&gt;<br>    int indexedBinarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) {<br>        int low = 0;<br>        int high = list.size()-1;<br><br>        while (low &lt;= high) {<br>            int mid = (low + high) &gt;&gt;&gt; 1; <br>            Comparable&lt;? super T&gt; midVal = list.get(mid);<br>            int cmp = midVal.compareTo(key);<br><br>            if (cmp &lt; 0)<br>                low = mid + 1;<br>            else if (cmp &gt; 0)<br>                high = mid - 1;<br>            else<br>                return mid; &#47;&#47; key found<br>        }<br>        return -(low + 1);  &#47;&#47; key not found<br>    }","like_count":0},{"had_liked":false,"id":295440,"user_name":"default","can_delete":false,"product_type":"c1","uid":1116322,"ip_address":"","ucode":"58B278A7F206F8","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/a2/4fea8433.jpg","comment_is_top":false,"comment_ctime":1622431246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622431246","product_id":100017301,"comment_content":"java版本，已经和Math.sqrt()测试对比过，暂时没发现啥问题<br>public static double sqrt(double num) {<br>        if (num &lt; 0) return Double.NaN;<br>        double high = num;<br>        double low = 0;<br>        double mid = 0;<br>        while (high - low &gt; 0.000001) {<br>            mid = low + (high-low)&#47;2;<br>            if (mid * mid &gt; num) {<br>                high = mid;<br>            } else if (mid * mid &lt; num) {<br>                low = mid;<br>            } else {<br>                return mid;<br>            }<br>        }<br>        return mid;<br>    }","like_count":0},{"had_liked":false,"id":291958,"user_name":"青阳","can_delete":false,"product_type":"c1","uid":2139807,"ip_address":"","ucode":"3591D366BAB0B9","user_header":"https://static001.geekbang.org/account/avatar/00/20/a6/9f/3c60fffd.jpg","comment_is_top":false,"comment_ctime":1620625522,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620625522","product_id":100017301,"comment_content":"题一用牛顿迭代法<br>public static double sqrt(int a) {<br>        double x1 = a &#47; 2;<br>        double x2 = (x1 + a &#47; x1) &#47; 2;<br>        while (Math.abs(x1 - x2) &gt; 0.000001) {<br>            x1 = x2;<br>            x2 = (x2 + a &#47; x2) &#47; 2;<br>        }<br>        return x2;<br>    }<br>不过这个方法小数点的位数没有控制","like_count":0},{"had_liked":false,"id":287633,"user_name":"Mmi223","can_delete":false,"product_type":"c1","uid":1150430,"ip_address":"","ucode":"A49A024333C01C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/HOIjvMJfj8Qg9EdLyvLXEldpo3qEhHOpsibFaAb7kc4wc6xoHQqKX7gUO3YHhnAJHFdibdI7Mef0cZ9zLsRlpQ2Q/132","comment_is_top":false,"comment_ctime":1618060066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618060066","product_id":100017301,"comment_content":"第一题，二分查找：n除以2，终止条件：一个abs（数的平方减去n）&lt;E-7","like_count":0},{"had_liked":false,"id":287148,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1617796059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617796059","product_id":100017301,"comment_content":"想到一个极端情况.如果要查找的数据在链表的开头.那么链表在找中间值的时候.是根据一个找另一个的.所以.可以在往中间走的过程中顺便对比一下.这样第一个值就是结果了.这应该算是最好情况了吧.","like_count":0},{"had_liked":false,"id":287080,"user_name":"少游","can_delete":false,"product_type":"c1","uid":1241406,"ip_address":"","ucode":"AB3658091ED061","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/3e/75b05b81.jpg","comment_is_top":false,"comment_ctime":1617766393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617766393","product_id":100017301,"comment_content":"function sqrt (n) {<br>\tif (isNaN(n)) return NaN<br>\tif (n === 0 || n === 1) return n<br>\tlet low = 0;<br>\tlet hight = n<br>\tlet povid = n&#47;2<br>\tlet lastPovid = povid<br>\tif (n&gt;0 &amp;&amp; n&lt;1) {<br>\t\tlow = n<br>\t\thight = 1<br>\t}<br>\tdo {<br>\t\tif (povid * povid &gt; n){<br>\t\t\thight = povid<br>\t\t} else if (povid * povid &lt; n) {<br>\t\t\tlow = povid<br>\t\t} else {<br>\t\t\treturn povid.toFixed(6)<br>\t\t}<br>\t\tlastPovid = povid<br>\t\tpovid = (low + hight)&#47;2<br>\t} while(Math.abs(povid - lastPovid) &gt;= Number.EPSILON)<br>\treturn povid.toFixed(6)<br>}","like_count":0},{"had_liked":false,"id":287072,"user_name":"少游","can_delete":false,"product_type":"c1","uid":1241406,"ip_address":"","ucode":"AB3658091ED061","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/3e/75b05b81.jpg","comment_is_top":false,"comment_ctime":1617765430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617765430","product_id":100017301,"comment_content":"function sqr (n) {<br>\tif (isNaN(n)) return NaN<br>\tif (n === 0 || n === 1) return n<br>\tlet low = 0;<br>\tlet hight = n<br>\tlet povid = n&#47;2<br>\tlet lastPovid = povid<br>\tdo {<br>\t\tif (povid * povid &gt; n){<br>\t\t\thight = povid<br>\t\t} else if (povid * povid &lt; n) {<br>\t\t\tlow = povid<br>\t\t} else {<br>\t\t\treturn povid.toFixed(6)<br>\t\t}<br>\t\tlastPovid = povid<br>\t\tpovid = (low + hight)&#47;2<br>\t} while(Math.abs(povid - lastPovid) &gt;= Number.EPSILON)<br>\treturn povid.toFixed(6)<br>}","like_count":0},{"had_liked":false,"id":284847,"user_name":"付寒宇Bazinga","can_delete":false,"product_type":"c1","uid":1676937,"ip_address":"","ucode":"D24D7185447A33","user_header":"https://static001.geekbang.org/account/avatar/00/19/96/89/3876a4b8.jpg","comment_is_top":false,"comment_ctime":1616496557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616496557","product_id":100017301,"comment_content":"课后问题 ① 用 python 假设四舍五入实现<br><br><br>def sqrt(num):<br>    if num &lt; 0: num = -num<br>    low = 0<br>    high = num<br>    while low &lt;= high:<br>        mid = (low + high) &#47; 2<br>        ret = mid * mid<br>        if ret == mid * mid == num or (ret &gt; num - 0.0000004 and ret &lt; num + 0.0000005):<br>            return mid<br>        elif ret &lt; num:<br>            low = mid<br>        else:<br>            high = mid<br>    return None<br>num = 9<br>print(&quot;result = %f&quot; % sqrt(num))","like_count":0},{"had_liked":false,"id":283506,"user_name":"Geek_1ac70f","can_delete":false,"product_type":"c1","uid":1701797,"ip_address":"","ucode":"AFBAFBD6EDAFFD","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/a5/2008aa8c.jpg","comment_is_top":false,"comment_ctime":1615801108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615801108","product_id":100017301,"comment_content":"用js写：<br>function fn(data){<br>      let min = 0;<br>      let max = 0;<br>      let mid = 0;<br>      if(data &lt; 1){<br>        min = 0;<br>        max = data;<br>      } if (data === 1){<br>        return 0;<br>      } if (data &gt;1){<br>        min = 1;<br>        max = data;<br>      }<br>      while (min &lt;= max){<br>        mid = min + (max - min)&#47;2;<br>        if ((mid+0.000001) * (mid+0.000001) &lt;= data){<br>          min = mid + 0.000001;<br>        } else if ((mid-0.000001) * (mid-0.000001) &gt;= data){<br>          max = mid-0.000001;<br>        } else {<br>          return parseInt(mid*1000000)&#47;1000000;<br>        }<br>      }<br>    }<br>    let a = fn(6);<br>    console.log(&#39;1111&#39;, a)","like_count":0},{"had_liked":false,"id":281890,"user_name":"（ . ）","can_delete":false,"product_type":"c1","uid":2321902,"ip_address":"","ucode":"DF767A19084E4A","user_header":"https://static001.geekbang.org/account/avatar/00/23/6d/ee/68d1faf3.jpg","comment_is_top":false,"comment_ctime":1614936534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614936534","product_id":100017301,"comment_content":"&#47;&#47;&#47; 计算大于1的正整数之平方根<br>&#47;&#47;&#47; - Parameters:<br>&#47;&#47;&#47;   - n: 待求的数<br>&#47;&#47;&#47;   - deltaThreshold: 误差的阈值<br>&#47;&#47;&#47;   - maxTry: 二分查找的最大次数<br>&#47;&#47;&#47; - Returns: 平方根的解<br>func getSquareRoot(n :Int, deltaThreshold: Double, maxTry: Int) -&gt; Double? {<br>    if n &lt;= 1 {<br>        return nil;<br>    }<br>    <br>    var min = 1.0, max = Double(n)<br>    var middle, square, delta: Double<br>    for _ in 0..&lt;maxTry {<br>        middle = min + (max - min) &#47; 2<br>        square = middle * middle<br>        delta = fabs((square - Double(n)) &#47; Double(n))<br>        if delta &lt;= deltaThreshold {<br>            return middle<br>        } else {<br>            if square &gt; Double(n) {<br>                max = middle<br>            } else {<br>                min = middle<br>            }<br>        }<br>    }<br>    <br>    return nil;<br>}","like_count":0},{"had_liked":false,"id":281015,"user_name":"终身学习者","can_delete":false,"product_type":"c1","uid":1311705,"ip_address":"","ucode":"48552F59867E87","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/d9/7538e630.jpg","comment_is_top":false,"comment_ctime":1614525775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614525775","product_id":100017301,"comment_content":"思考题：<br>1、求平方根，每个精确位数都是一次二分查找。但是这里二分查找的终止条件不是两数相等了，而是value位于mid*mid 和 (mid+x)*(mid+x) 之间，其中x是当前精确度的单位数值 (1，0.1， ......)。对于python，可以使用 round(value, precision) 函数对low、high、mid值进行精确位数进行控制。<br>2、链表使用二分查找的时间复杂度为O(n)。链表可以使用快慢指针找到中间值mid，分别要用n，n&#47;2，n&#47;4，......，1，加起来是2n-1。所以时间复杂度为O(n)。考虑系数，这个比遍历一遍的时间复杂度还高，所以二分查找还是要用数组。","like_count":0},{"had_liked":false,"id":280694,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614321216,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614321216","product_id":100017301,"comment_content":"茶艺师学编程<br><br>要刷新的知识点<br>写好二分查找的3个要点，其中第一和第二<br>＊退出条件是low ≤high<br>＊mid = low + （（high - low）&gt;&gt; 1）<br><br>思考题：<br>第二题，如果是使用了链表，我感觉时间花销全在遍历上了，要O（n＾2）","like_count":0},{"had_liked":false,"id":278768,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1613309115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613309115","product_id":100017301,"comment_content":"float CarmackSqrt(float x)<br>{<br>\tfloat xhalf = 0.5f * x;<br><br>\tint i = *(int*)&amp;x;\t\t\t\t&#47;&#47; get bits for floating VALUE <br>\ti = 0x5f3759df - (i &gt;&gt; 1);\t\t&#47;&#47; gives initial guess y0<br>\tx = *(float*)&amp;i;\t\t\t\t&#47;&#47; convert bits BACK to float<br>\tx = x * (1.5f - xhalf * x*x);\t&#47;&#47; Newton step, repeating increases accuracy<br>\tx = x * (1.5f - xhalf * x*x);\t&#47;&#47; Newton step, repeating increases accuracy<br>\tx = x * (1.5f - xhalf * x*x);\t&#47;&#47; Newton step, repeating increases accuracy<br>\treturn (1 &#47; x);<br>}","like_count":0},{"had_liked":false,"id":274869,"user_name":"柯尊铖","can_delete":false,"product_type":"c1","uid":1851031,"ip_address":"","ucode":"8C3E35A76EED61","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5GIMGQPRu31calIBicDXTNJQFCgTwgaiaQJniaw8jYrPxwpxNd0nAiapYgD6OK1LrSLuSerOuURG1sQ/132","comment_is_top":false,"comment_ctime":1611200604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611200604","product_id":100017301,"comment_content":"js 版本，精确到后六位，试了一下 sqrt(99)，前六位小数是对的，后面就不一样了<br>function sqrt(num) {<br>  let ret<br>  let lo = 1<br>  let hi = num<br>  while (hi - lo &gt;= 0.000001) {<br>    ret = (lo + hi) &#47; 2<br>    const t = ret * ret<br>    if (t === num) {<br>      return ret<br>    }<br>    if (t &gt; num) {<br>      hi = ret<br>    } else {<br>      lo = ret<br>    }<br>  }<br>  return ret<br>}<br>","like_count":0},{"had_liked":false,"id":265010,"user_name":"大西几吃小兔兔","can_delete":false,"product_type":"c1","uid":2282960,"ip_address":"","ucode":"44D75626C6DB57","user_header":"https://static001.geekbang.org/account/avatar/00/22/d5/d0/97c8dc32.jpg","comment_is_top":false,"comment_ctime":1606733127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606733127","product_id":100017301,"comment_content":"参考锐雨的代码，写了Go版本的<br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;math&quot;<br>\t&quot;strconv&quot;<br>)<br><br>func main() {<br>\tfmt.Println(sqrt(11, 15))<br>}<br><br>func sqrt(num float64, precision int) float64 {<br>\tif num &lt; 0 || precision &gt; 15 {<br>\t\treturn math.NaN()<br>\t}<br>\tvar low float64 = 0<br>\tvar high = num<br>\tif num &lt; 1 {<br>\t\tlow = num<br>\t\thigh = 1<br>\t}<br>\tvar mid float64<br>\tvar precisionDecimal float64 = 1<br>\tfor i := 0; i &lt; precision; i++ {<br>\t\tprecisionDecimal = precisionDecimal &#47; 10<br>\t}<br>\tfor high-low &gt; precisionDecimal {<br>\t\t&#47;&#47;避免low+high溢出<br>\t\tmid = low + ((high - low) &#47; 2)<br>\t\t&#47;&#47;避免mid*mid溢出<br>\t\tdivide := num &#47; mid<br>\t\tif mid == divide {<br>\t\t\treturn mid<br>\t\t}<br>\t\tif mid &lt; divide {<br>\t\t\tlow = mid<br>\t\t}<br>\t\tif mid &gt; divide {<br>\t\t\thigh = mid<br>\t\t}<br>\t}<br>\tmid = low + ((high - low) &#47; 2)<br>\tformat := &quot;%.&quot; + strconv.Itoa(precision) + &quot;f&quot;<br>\tmid, _ = strconv.ParseFloat(fmt.Sprintf(format, mid), 64)<br>\treturn mid<br>}<br>","like_count":0},{"had_liked":false,"id":264416,"user_name":"Rookie-Red","can_delete":false,"product_type":"c1","uid":1627358,"ip_address":"","ucode":"A2CC287D3442D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia5Ax51D8Nyap5xcPkaveicguf5Nm4715fXKT4TfccvBYKiabWVJTeHtrejmDNtdmM12JYLzxiaUVEQ/132","comment_is_top":false,"comment_ctime":1606461079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606461079","product_id":100017301,"comment_content":"第二题：<br><br>第一次查找中间点，需要移动指针n&#47;2次；<br>第二次，需要移动指针n&#47;4次；<br>第三次需要移动指针n&#47;8次；<br>....<br>以此类推，一直到1次为止。<br><br>n&#47;2 + n&#47;4 + n&#47;8 +... 1 = O(n-1)  ，近似于 O(n)","like_count":0},{"had_liked":false,"id":252572,"user_name":"Fy","can_delete":false,"product_type":"c1","uid":2213304,"ip_address":"","ucode":"4F4C0617A79083","user_header":"https://static001.geekbang.org/account/avatar/00/21/c5/b8/481d8a64.jpg","comment_is_top":false,"comment_ctime":1602386773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602386773","product_id":100017301,"comment_content":"    public double sqrt(double num) {<br>      \t  double left = 0.0;<br>          double right = num &#47; 1.0;<br>          if (num &lt; 1)<br>            right = 1.0;<br>          &#47;&#47; l: 0, r: 0.04<br>          double precision = 0.0001;<br>          &#47;&#47; binary search<br>          while (right - left &gt; precision) {<br>              double mid = left + (right - left)&#47;2.0;<br>              if (mid - num&#47;mid &gt; precision) {<br>                  right = mid;<br>              } else if (num&#47;mid - mid &gt; precision){<br>                  left = mid;<br>              } else if (Math.abs(mid * mid - num) &lt;= precision)<br>                  return mid;<br>          }<br>          return left;<br>    }","like_count":0},{"had_liked":false,"id":251915,"user_name":"腾飞","can_delete":false,"product_type":"c1","uid":1778083,"ip_address":"","ucode":"55F3DABAEC2173","user_header":"https://static001.geekbang.org/account/avatar/00/1b/21/a3/ac5367c1.jpg","comment_is_top":false,"comment_ctime":1601972229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601972229","product_id":100017301,"comment_content":"笔记：<br>二分法，是在有序数据上进行二分比较查找的方法<br><br>要求数据有序，且是在数组中更好，因为数组查找的复杂的为1<br><br>二分法复杂度 logn<br><br>注意点：<br>1.判断条件，low〈=high<br>2.mid为 (low+high)&#47;2<br>3.high和low更新<br><br>不适合动态数据(排序复杂度高)和小数据(直接暴力法)","like_count":0},{"had_liked":false,"id":250541,"user_name":"恩佐","can_delete":false,"product_type":"c1","uid":1509370,"ip_address":"","ucode":"955C45137073EE","user_header":"https://static001.geekbang.org/account/avatar/00/17/07/fa/62186c97.jpg","comment_is_top":false,"comment_ctime":1601124973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601124973","product_id":100017301,"comment_content":"public static double rightFind(int x){<br>        double left = 0;<br>        double right = x;<br>        double mid = x&#47;2;<br>        while(Math.abs(mid*mid-x)&gt;=1e-6){<br>            double square = mid * mid;<br>            if(square == x)<br>                break;<br>            else if(square &lt; x)<br>                left = mid ;<br>            else<br>                right = mid;<br>            mid = left + (right-left)&#47;2;<br>        }<br>        return mid;<br>    }","like_count":0},{"had_liked":false,"id":247920,"user_name":"dpjin","can_delete":false,"product_type":"c1","uid":1539183,"ip_address":"","ucode":"0383D8003E6C14","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/pHPfugzib71JdXkKxRITCzdD46DYcDYHImoYeibHdyu4hLWOBXh7OLllx247vKJvWIcu18dxWOTAtv8AaRB8opvQ/132","comment_is_top":false,"comment_ctime":1599917748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599917748","product_id":100017301,"comment_content":"golang实现二分查找<br>func bSearch(a []int, value int) int {<br>\tlow := 0<br>\thigh := len(a) - 1<br>\tfor low &lt;= high {<br>\t\tmid := (high - low) + low&gt;&gt;1<br>\t\tif a[mid] == value {<br>\t\t\treturn mid<br>\t\t} else if a[mid] &lt; value {<br>\t\t\tlow = mid + 1<br>\t\t} else {<br>\t\t\thigh = mid - 1<br>\t\t}<br>\t}<br>\treturn -1<br>}<br><br>func bSearch2(a []int, value int) int {<br>\treturn bSearchInternally(a, 0, len(a)-1, value)<br>}<br><br>func bSearchInternally(a []int, head, tail, value int) int {<br>\tmid := head + (tail-head)&gt;&gt;1<br>\tif a[mid] == value {<br>\t\treturn mid<br>\t} else if a[mid] &lt; value {<br>\t\treturn bSearchInternally(a, mid+1, tail, value)<br>\t} else {<br>\t\treturn bSearchInternally(a, head, mid-1, value)<br>\t}<br>}","like_count":0},{"had_liked":false,"id":247313,"user_name":"智忠恕仁","can_delete":false,"product_type":"c1","uid":1205132,"ip_address":"","ucode":"444703AC878861","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/8c/fd0509dc.jpg","comment_is_top":false,"comment_ctime":1599655948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599655948","product_id":100017301,"comment_content":"等式两侧同时扩大10的12次方倍再用二分查找可以吧","like_count":0},{"had_liked":false,"id":246323,"user_name":"小时候可鲜啦","can_delete":false,"product_type":"c1","uid":1050777,"ip_address":"","ucode":"C88B3EDF758230","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/99/6ab45a2f.jpg","comment_is_top":false,"comment_ctime":1599277528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599277528","product_id":100017301,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>string square(double n, int precision) {<br>    int low = 0;<br>    int high = n;<br>    double res = 0;<br>    for (int i = 0; i &lt; precision + 1; ++i) {<br>        if (i &gt; 0) {<br>            low = 0;<br>            high = 9;<br>        }<br>        while (low &lt;= high) {<br>            int mid = low + ((high - low) &gt;&gt; 1);<br>            double tmp = res + mid * pow(10, -i);<br>            if (pow(tmp, 2) == n) {<br>                return to_string(tmp);<br>            } else if (pow(tmp, 2) &lt; n) {<br>                low = mid + 1;<br>            } else {<br>                high = mid - 1;<br>            }<br>        }<br>        res += high * pow(10, -i);<br>    }<br>    return to_string(res);<br>}","like_count":0},{"had_liked":false,"id":245461,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1476862,"ip_address":"","ucode":"037CE3554D8AB9","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","comment_is_top":false,"comment_ctime":1598949042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598949042","product_id":100017301,"comment_content":"def sqrt(n, s):<br>    low = 0<br>    hight = n<br>    f = 1&#47;pow(10, s)<br>    while low &lt;= hight:<br>        mid = (low + hight) &#47; 2<br>        t = mid * mid <br>        if abs(t-n) &lt;= f:<br>            return round(mid, s)<br>        elif t &lt; n:<br>            low = mid <br>        else:<br>            hight = mid","like_count":0},{"had_liked":false,"id":244309,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598455110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598455110","product_id":100017301,"comment_content":"老师可否告知一下 第一题是如何解决的？ 实在是想不到","like_count":0},{"had_liked":false,"id":244307,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598454825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598454825","product_id":100017301,"comment_content":"链表变跳表能让链表实现二分查找吗？","like_count":0},{"had_liked":false,"id":242478,"user_name":"卫俊","can_delete":false,"product_type":"c1","uid":1163913,"ip_address":"","ucode":"97501D78246EF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/89/9c92f1d1.jpg","comment_is_top":false,"comment_ctime":1597738442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597738442","product_id":100017301,"comment_content":"&#47;&#47;java<br>double positiveSquareRoot(double num, double precision) {<br>        Preconditions.checkArgument(num &gt; 0);<br><br>        double low = 0;<br>        double hi = num;<br>        if (num &lt; 1) {<br>            hi = 1;<br>            low = num;<br>        }<br>        if (num &gt; 1) {<br>            low = 1;<br>        }<br>        double mid = 0;<br><br>        while (low &lt; hi) {<br>            mid = low + (hi - low) &#47; 2;<br>            &#47;&#47;mid*mid溢出的结果为 无限大，此处可以不额外处理<br>            double a = mid * mid - num;<br>            double v = Math.abs(a);<br>            if (v &lt; precision) {<br>                return mid;<br>            } else if (a &gt; 0) {<br>                hi = mid;<br>            } else if (a &lt; 0) {<br>                low = mid;<br>            }<br>        }<br>        return mid;<br>    }","like_count":0},{"had_liked":false,"id":240546,"user_name":"aHelloKitty","can_delete":false,"product_type":"c1","uid":1481881,"ip_address":"","ucode":"0EF1480B42E985","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/99/5e6e4b44.jpg","comment_is_top":false,"comment_ctime":1596969679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596969679","product_id":100017301,"comment_content":"&#47;**<br>     * 求一个数的平方根<br>     *&#47;<br>    public static double getSqureRoot2(double n, double deltaThreshold, int maxTry) {<br>        if (n &lt;= 0) return -1.0;<br><br>        double min = 0, max = n;<br><br>        while (min &lt;= max) {<br>            double mid = min + ((max - min) &#47; 2);<br>            double rMax = (mid + deltaThreshold) * (mid + deltaThreshold);<br>            double rMin = (mid - deltaThreshold) * (mid - deltaThreshold);<br>            if (rMin &lt; n &amp;&amp;  rMax &gt; n) {<br>                return mid;<br>            } else if (rMin &gt; n) {<br>                max = mid;<br>            } else {<br>                min = mid;<br>            }<br>        }<br><br>        return -2.0;<br>    }","like_count":0},{"had_liked":false,"id":238831,"user_name":"foree","can_delete":false,"product_type":"c1","uid":1600599,"ip_address":"","ucode":"D1F053C369D656","user_header":"https://static001.geekbang.org/account/avatar/00/18/6c/57/bb5885d1.jpg","comment_is_top":false,"comment_ctime":1596336602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596336602","product_id":100017301,"comment_content":"分为求整数部分和小数部分<br>&#47;**<br>     * 计算给定的一个数的平方根，精确到小数点后 6 位<br>     * @param x<br>     * @return<br>     *&#47;<br>    private static double binaryGetSquare(double x, int precision){<br>        double base = binaryGetBase(x);<br>        return binaryGetFloat(x, base, precision);<br>    }<br><br>    &#47;**<br>     * 计算给定的一个数的平方根，返回整数部分<br>     * @param x<br>     * @return<br>     *&#47;<br>    private static int binaryGetBase(double x){<br>        int start = (int) x;<br>        int base = start;<br>        while(start * start &gt; x){<br>            base = start;<br>            start = start &#47; 2;<br>        }<br><br>        if(base * base == x) return base;<br><br>        &#47;&#47; 按中位步进<br>        int end = base;<br>        while(start &lt;= end){<br>            int mid = (start + end) &#47;2;<br>            if(mid * mid == x){<br>                return mid;<br>            }else if (mid * mid &lt; x){<br>                base = start;<br>                start = mid + 1;<br>            }else{<br>                end = mid - 1;<br>                base = end;<br>            }<br>        }<br><br>        return base;<br><br>    }<br><br>    &#47;**<br>     * 给定一个数以及他的平方根的整数部分，计算小数部分，精确到 precision<br>     * @param x<br>     * @param base<br>     * @return<br>     *&#47;<br>    private static double binaryGetFloat(double x, double base, int precision){<br>        if(precision == 0){<br>            return base;<br>        }<br>        double float_base = base;<br>        double step = 0.1f;<br>        for (int i = 1; i &lt;= precision; i++) {<br>            &#47;&#47; 从 0 - 9 开始步进<br>            int l = 0;<br>            int r = 9;<br>            int cur = 0;<br>            while(l &lt;= r){<br>                int mid = (l + r)&#47;2;<br>                double result = Math.pow(float_base + mid * step, 2);<br>                if(result &gt; x){<br>                    r = mid - 1;<br>                    cur = r;<br>                }else if (result &lt; x){<br>                    cur = l;<br>                    l = mid + 1;<br>                }else{<br>                    return float_base + mid * step;<br>                }<br>            }<br><br>            float_base += cur * step;<br>            step *= step;<br>        }<br><br>        return float_base;<br>    }","like_count":0},{"had_liked":false,"id":238698,"user_name":"谭亮","can_delete":false,"product_type":"c1","uid":1142395,"ip_address":"","ucode":"8BE75B6409548C","user_header":"","comment_is_top":false,"comment_ctime":1596264400,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596264400","product_id":100017301,"comment_content":"这个《计算机程序的构造和解释》第一章节有实现","like_count":0,"discussions":[{"author":{"id":1665297,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/11/1def252c.jpg","nickname":"都城门外","note":"","ucode":"76E90647FC0032","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366161,"discussion_content":"优酷上这个视频第一个4:30秒有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617973302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238001,"user_name":"一号","can_delete":false,"product_type":"c1","uid":1272320,"ip_address":"","ucode":"6E5DCC48AB5D07","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dB3AyEjSZicicr7yFEIOMiaLKes6rQan0ZHYHmM6zib9EUDB2zbwYR2icDPLrBoCXFuS3LicfyhWA4EKpP5EbGzQXzcQ/132","comment_is_top":false,"comment_ctime":1596024763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596024763","product_id":100017301,"comment_content":"在文中题“如何在 1000 万个整数中快速查找某个整数”的解答里提到，每个数据大小是 8 字节。我查阅UTF-8编码，它一个字符占用1~4个字节。<br><br>所以请问老师是基于什么考虑设定一个数据占8个字节？","like_count":0},{"had_liked":false,"id":236669,"user_name":"pearl刘东洋","can_delete":false,"product_type":"c1","uid":2027794,"ip_address":"","ucode":"EB50A5726285C5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f1/12/c40d07bc.jpg","comment_is_top":false,"comment_ctime":1595496928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595496928","product_id":100017301,"comment_content":"&#47;2的位操作已经很快了，之前忘了在哪里的一个帖子上看到，也可以这样做，分享一下，mid = (lo &amp; hi) + ((lo ^ hi) &gt;&gt; 1)","like_count":0},{"had_liked":false,"id":236564,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1595468579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595468579","product_id":100017301,"comment_content":"<br>链表二分查找的时间复杂度分析<br><br>每轮很可能都需要从头往后遍历到中点（当目标数总在大于中点时）<br><br>n&#47;2+n&#47;4+n&#47;8+...+n&#47;(2^k)<br><br>因为n&#47;(2^k)最小是1，所以最多有㏒₂ⁿ个加数<br><br>加数实际是a1=n&#47;2 ,等比q为1&#47;2的等级数列，<br><br>根据等比数列求和公式： Sm = a1 *((1-q^m)&#47;(1-q)) , m是数列个数<br><br>因此遍历总次数等于 n&#47;2 * ((1-(1&#47;2)^(㏒₂ⁿ))&#47;(1-q)) = (1-(1&#47;2)^(㏒₂ⁿ))n<br><br>因为(1&#47;2)^(㏒₂ⁿ)太小，可忽略不计，所以时间复杂度是O(n)<br><br>所以还不如直接遍历来的方便","like_count":0},{"had_liked":false,"id":236367,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1595400400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595400400","product_id":100017301,"comment_content":"查了下，数学上是可以用“十分逼近法”，把根号2所在的范围（上限-下限）逐次缩小10倍，每次求得的近似值的小数位就增加一位。","like_count":0},{"had_liked":false,"id":235123,"user_name":"故乡的原风景","can_delete":false,"product_type":"c1","uid":1906441,"ip_address":"","ucode":"0EFD95E75DD09C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/17/09/828ac7e6.jpg","comment_is_top":false,"comment_ctime":1594899178,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594899178","product_id":100017301,"comment_content":"class Solution {<br>    public double sqrt(int x, double precision) {<br>        double low = 0;<br>        double hi = (x &gt;&gt; 1) + 1;<br>        double pre;<br>        double mid = (low + hi) &#47; 2;<br>        do {<br>            double result = mid * mid;<br>            if (result == x) return mid;<br>            else if (result &gt; x) hi = mid - 1;<br>            else low = mid + 1;<br>            pre = mid;<br>            mid = (low + hi) &#47; 2;<br>        } while (Math.abs(pre - mid) &gt; precision);<br>        BigDecimal bg = new BigDecimal(mid);<br>        double res = bg.setScale(6, BigDecimal.ROUND_HALF_UP).doubleValue();<br>        return res;<br>    }<br>}<br><br>调用方式：<br>        Solution obj = new Solution();<br>        System.out.println(obj.sqrt(3, 0.000001));","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292332,"discussion_content":"你这个精度不对，你自己去试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595178699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234717,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1594778734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594778734","product_id":100017301,"comment_content":"对于求开方，还可以使用梯度下降的方法或者牛顿法迭代求解","like_count":0},{"had_liked":false,"id":231181,"user_name":"魔法光影","can_delete":false,"product_type":"c1","uid":1641035,"ip_address":"","ucode":"2EE4BA7D33485A","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/4b/fde54598.jpg","comment_is_top":false,"comment_ctime":1593603009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593603009","product_id":100017301,"comment_content":"python二分查找的实现<br>def bi_sqrt(x,precision):<br>    if x&lt;0:<br>        return None<br>    low=0<br>    high=x<br>    if x&lt;1 and x&gt;0:<br>        low=x<br>        high=1<br>    mid=low+(high-low)&#47;2<br>    while(low&lt;=high):<br>        compare=mid*mid-x<br>        if abs(compare)&lt;=precision:<br>            return mid<br>        if compare&gt;0:<br>            high=mid<br>        elif compare&lt;0:<br>            low=mid<br>        mid=low+(high-low)&#47;2","like_count":0},{"had_liked":false,"id":230041,"user_name":"今夜秋风和","can_delete":false,"product_type":"c1","uid":1434066,"ip_address":"","ucode":"453C8197FFC81D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e1/d2/42ad2c87.jpg","comment_is_top":false,"comment_ctime":1593246715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593246715","product_id":100017301,"comment_content":"递归的代码块里面改成这样试了下也可以，    private   int binarySearchDiGui(int[] array,int n,int low,int high){<br>        int  mid=low+((high-low)&gt;&gt;&gt;1);<br>        if (array[mid] ==n) {<br>            return mid;<br>        }<br>        if (low&gt;=high) {<br>            return -1;<br>        }<br>        if (n&lt;array[mid]) {<br>            return binarySearchDiGui( array, n, low,mid-1);<br>        }else{<br>            return binarySearchDiGui(array,n,mid+1,high);<br>        }<br>    }","like_count":0},{"had_liked":false,"id":229455,"user_name":"Geek_dd8b2b","can_delete":false,"product_type":"c1","uid":1988075,"ip_address":"","ucode":"CBEF7C39075A96","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJX4ZU53F8hBHicctluqK6Ef3U0ib40bq1vFyAvqV0wu3GaPuWbj967OdMT7k0gl3OMxsfopvbk9veQ/132","comment_is_top":false,"comment_ctime":1593001028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593001028","product_id":100017301,"comment_content":" low+(high-low)&#47;2 优化为low+((high-low)&gt;&gt;1)这个，编译器不会优化吗？","like_count":0},{"had_liked":false,"id":229449,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1592998477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592998477","product_id":100017301,"comment_content":"1.先用二分查找找到平方根的整数位，然后每个小数点位数依次查找；<br>2.如果数据使用链表存储，最好复杂度是1，最坏是n,平均是n，就跟遍历链表查找某个数差不多，时间复杂度是O(n)","like_count":0},{"had_liked":false,"id":227618,"user_name":"杨冬","can_delete":false,"product_type":"c1","uid":1956611,"ip_address":"","ucode":"317607AAA75F85","user_header":"https://static001.geekbang.org/account/avatar/00/1d/db/03/67fbb09d.jpg","comment_is_top":false,"comment_ctime":1592443525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592443525","product_id":100017301,"comment_content":"老师，为什么“如果 low 和 high 比较大的话，两者之和就有可能会溢出”？","like_count":0},{"had_liked":false,"id":217795,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1589615167,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1589615167","product_id":100017301,"comment_content":"第一题，要求精确到小数点后 6 位，可以先把这个数乘以 1000000（1000000 * 1000000 的平方根），然后二分查找到整数颗粒为 1 停止，然后把算出的数除以 1000000 即可。不过还要考虑是否溢出的问题。","like_count":0},{"had_liked":false,"id":217275,"user_name":"渊จุ๊บ","can_delete":false,"product_type":"c1","uid":1530295,"ip_address":"","ucode":"E3A2C1E89EB576","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/b7/9db9c657.jpg","comment_is_top":false,"comment_ctime":1589452847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589452847","product_id":100017301,"comment_content":"第一题由于我还没有找到golang较好的保留6位小数的方法，暂时用float64自保留的位数来做的。效果还是可以，代码如下（未写注释^_^）：<br>var n = 0<br><br>func TestSearch(t *testing.T) {<br>\tx := 24725.0<br>\ty := rooting(x)<br>\tt.Log(y, n)<br><br>}<br><br>func rooting(x float64) float64 {<br>\treturn rootingInternally(x, x&#47;2, x)<br>}<br><br>func rootingInternally(val, low, high float64) float64 {<br>\tn++<br>\tmid := low + (high-low)&#47;2<br>\tif low &gt;= mid {<br>\t\treturn mid<br>\t}<br><br>\tif math.Pow(low, 2) &gt; val {<br>        return rootingInternally(val, low&#47;2, high)<br>\t}<br><br>\tif math.Pow(mid, 2) == val {<br>\t\treturn mid<br>\t}<br><br>\tif math.Pow(mid, 2) &gt; val {<br>\t\treturn rootingInternally(val, low, mid)<br>\t} else {<br>\t\treturn rootingInternally(val, mid, high)<br>\t}<br>}<br><br><br>测试效果如下：<br>API server listening at: 127.0.0.1:62770<br>=== RUN   TestSearch<br>--- PASS: TestSearch (0.00s)<br>    search_test.go:13: 157.24185193516388 66<br>PASS<br>","like_count":0},{"had_liked":false,"id":216579,"user_name":"ym","can_delete":false,"product_type":"c1","uid":1986914,"ip_address":"","ucode":"4C2DBB83731ACA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/51/62/770c1f72.jpg","comment_is_top":false,"comment_ctime":1589289314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589289314","product_id":100017301,"comment_content":"问题1，首先判断数是否大于1，然后再二分查找，满足精度时return<br>double sqrt(double x) {<br>    double low;<br>    double high;<br>    double mid;<br>    if (x &gt;= 1) {<br>        low = 1;<br>        high = x;<br>    } else {<br>        low = x; <br>        high = 1;<br>    }<br>    while (low&lt;=high) {<br>        mid = low + (high - low)&#47;2;<br>        if (fabs(mid * mid - x) &lt; 1e-6)<br>            return mid;<br>        else if (mid * mid &lt; x)<br>            low = mid;<br>        else {<br>            high = mid;<br>        }<br>    }<br>    return -1;<br>}<br><br>","like_count":0},{"had_liked":false,"id":215528,"user_name":"风，大风","can_delete":false,"product_type":"c1","uid":1811611,"ip_address":"","ucode":"1A0F4D461BBC77","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/9b/0967f397.jpg","comment_is_top":false,"comment_ctime":1589011334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589011334","product_id":100017301,"comment_content":"计算一个数的平方根这个问题中涉及到浮点数精度的问题，如何解决浮点数精度带来的影响，不知道有没有什么好的处理方法。","like_count":0},{"had_liked":false,"id":215480,"user_name":"Geek_ae8b43","can_delete":false,"product_type":"c1","uid":1811458,"ip_address":"","ucode":"4CA9136486684B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGicA7oewUtCibKMibM68NtqlR4gSekpicwXMcqx7fzUJOaMiaeGbbbSc27hvicQXrf5v5peUWGh95RAzQ/132","comment_is_top":false,"comment_ctime":1588999159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588999159","product_id":100017301,"comment_content":"先求出整数部分，再求小数部分。代码实现如下：<br>double sqrt(int x, int left, int right) {<br>&#47;&#47; 求出整数部分<br>    while (left &lt; right) {<br>        int mid = left+((right-left)&gt;&gt;1);<br>        if (mid*mid == x) return mid;<br>        else if (mid*mid &gt; x) right = mid-1;<br>        else if (mid*mid &lt; x) left = mid+1;<br>    }<br>&#47;&#47; 求小数部分<br>    double l = left, r = l+1, step = 1;<br>    for (int i = 0; i &lt; 6; ++i) {<br>        step *= 0.1;<br>        while (l*l &lt; x &amp;&amp; (l+step)*(l+step) &lt; x) l += step;<br>        while (r*r &gt; x &amp;&amp; (r-step)*(r-step) &gt; x) r -= step;<br>    }<br>    return r-step;<br>}","like_count":0},{"had_liked":false,"id":214453,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588752264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588752264","product_id":100017301,"comment_content":"二叉树理解起来比较容易：<br>一、 写出简单的二分查找算法：<br>    1. 注意循环终止条件low &gt;= high<br>    2. 注意low、high的更新，跳过mid<br>    3. 注意注意mid 的计算，避免计算low+high和移位优化<br>二、应用场景<br>    1. 有序数组：没序要先排序。所以应用于多次查询，一次排序的场景<br>    2. 数据量太大：没有连续内存<br>    3. 太短的数组可以遍历，但是比较操作麻烦的话，还是得二分<br>三、思考题<br>    1. 第一个不说了<br>    2. 链表的二分查找关键在于找中点，其他几乎一样。找中点的时间复杂度为O(n-),评论中通过等比数列和来求出的。所以时间复杂度为O(log(n) + n-1),凭空多出了一个线性复杂度。","like_count":0},{"had_liked":false,"id":212541,"user_name":"CJJ","can_delete":false,"product_type":"c1","uid":1194060,"ip_address":"","ucode":"7E02A6A8547559","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","comment_is_top":false,"comment_ctime":1588144808,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1588144808","product_id":100017301,"comment_content":"老师，其实我有个疑问，就是说如果找中点mid=(low+high)&#47;2，(low+high)过大可能会溢出，那么如果写成mid=low&#47;2+high&#47;2，那这样会不会有问题呢？后面我自己亲测了一下，发现low&#47;2+high&#47;2这样写是不会有溢出问题的，但是却有精度问题，当两数右边最后相邻或者不存在的时候，会造成死循环，难怪不用这样的写法找中点。😂😂","like_count":0},{"had_liked":false,"id":211171,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1587909331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587909331","product_id":100017301,"comment_content":"问题1：选取初始区间[0,n]，取中间值mid=n&#47;2，比较(n&#47;2)^2与n的大小，如果(n&#47;2)^2 = n，返回(n&#47;2)，<br>如果(n&#47;2)^2&gt;n，在[0, n&#47;2]区间重复上取mid=n&#47;4，如果(n&#47;4)^2&gt;n，则在[0, n&#47;4]取mid=n&#47;8，否则在[n&#47;4, n&#47;2]取mid=n*3&#47;8，按上述操作继续分区取mid值，直到区间大小小于10^(-6)<br>如果(n&#47;2)^2&lt;n，在[ n&#47;2, n]区间重复上取mid=n*3&#47;4，如果(n*3&#47;4)^2&lt;n，则在[n*3&#47;4,n]取mid=n*7&#47;8，否则在[n&#47;2,n*3&#47;4]取mid=n*5&#47;8，按上述操作继续分区取mid值，直到区间大小小于10^(-6)","like_count":0},{"had_liked":false,"id":210785,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1587825083,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587825083","product_id":100017301,"comment_content":"总结：学习对分查找，着重学习对分查找的局限性。第一，对分查找要求随机访问元素，所以要求使用顺序表数据结构，如果使用链表的话，时间复杂度会退化成O(n)，这引出另一个问题，那就是如果数据太大的话，要求的连续内存空间比较大，也不太适合。第二，对分查找要求数据是有序的。第三，如果数据太小，可以直接使用遍历查找。第四，对分查找不太适合那种动态的数据，因为如果每次有新的数据进来，都要进行排序的话，排序的时间复杂度较高。","like_count":0},{"had_liked":false,"id":210060,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1587659074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587659074","product_id":100017301,"comment_content":"第一题要分小于1和大于1两种情况确定二分查找的边界。如果是立方根等奇数，还要根据符号再做一个分支。","like_count":0},{"had_liked":false,"id":209254,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1587525034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587525034","product_id":100017301,"comment_content":"对于二分查找的游标，我习惯用 左闭右开的区间， 循环条件： lower &lt; upper<br>缩小上限时 upper = middle<br>缩小下限时 lower = middle + 1<br>这样的好处在于不需要检测特殊情况，比如数组长度为0","like_count":0},{"had_liked":false,"id":208967,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1587475323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587475323","product_id":100017301,"comment_content":"数据量太小不适合二分查找，数据量太大也不适合二分查找，老师把各种情况都考虑到了，这才是专家，不放过每个细节。学习！","like_count":0},{"had_liked":false,"id":206451,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586863202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586863202","product_id":100017301,"comment_content":"二分查找的思想和实现已经掌握，但老师问的几个问题，我之前都没有思考过，多多思考才能进步，加油。","like_count":0},{"had_liked":false,"id":205987,"user_name":"kevincang","can_delete":false,"product_type":"c1","uid":1349911,"ip_address":"","ucode":"656BA039440142","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqt4XrHAv9gvg5ia6a7QQjw5TNXqhibRauKjiayS8bPRWewutzVIlamEvBlpiaWaY9RLoXGxzqQuib4L1w/132","comment_is_top":false,"comment_ctime":1586768982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586768982","product_id":100017301,"comment_content":"第一题取平方根，精确到小数点后 6 位，可以理解成 大小为n每位相差0.000001的数组，二分查找满足条件的数。考虑到结果是约数，终止条件可以选取0.000001^2为误差，即|x^2-n|&lt;0.000001^2 为终止条件。这个思路不知道是否可行。<br>","like_count":0},{"had_liked":false,"id":205239,"user_name":"伦","can_delete":false,"product_type":"c1","uid":1146123,"ip_address":"","ucode":"5F29CDE14C30EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/7d/0b/7b48382a.jpg","comment_is_top":false,"comment_ctime":1586575424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586575424","product_id":100017301,"comment_content":"因为比较害怕边界情况的处理，分享一个自己想的方法，最后通过比较l和r，简化边界情况的处理。如果有问题还请各位不吝赐教<br><br>float squareRoot(float n) {<br>                float l = 0, r = n;<br>                while (l + 0.000001 &lt; r) {<br>                        float mid = l + (r - l) &#47; 2;<br>                        float midSquare = mid * mid;<br>                        if (midSquare &gt; n) {<br>                                r = mid;<br>                        } else if (midSquare &lt; n) {<br>                                l = mid;<br>                        } else {<br>                                return mid;<br>                        }<br>                }<br>                float lCut = ((int)(l * 1000000)) &#47; 1000000.0f;<br>                float rCut = ((int)(r * 1000000)) &#47; 1000000.0f;<br>                float lSquare = lCut * lCut, rSquare = rCut * rCut;<br>                return Math.abs(lSquare - (float)n) &lt; Math.abs(rSquare - (float)n) ? lCut : rCut;<br>        }","like_count":0},{"had_liked":false,"id":201545,"user_name":"Damo","can_delete":false,"product_type":"c1","uid":1599197,"ip_address":"","ucode":"F332EA67F5A40C","user_header":"https://static001.geekbang.org/account/avatar/00/18/66/dd/c9f17139.jpg","comment_is_top":false,"comment_ctime":1585802215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585802215","product_id":100017301,"comment_content":"func GSqrt1(n float32) float32 {<br>\tvar low, high float32<br>\tif n &gt; 1 {<br>\t\tlow = 0<br>\t\thigh = n<br>\t} else {<br>\t\tlow = n<br>\t\thigh = 1<br>\t}<br>\tfor low &lt;= high {<br>\t\tmid := low + ((high - low) &#47; 2)<br>\t\ttemp := mid * mid<br>\t\tif temp-n &lt;= 0.000001 &amp;&amp; temp-n &gt;= -0.000001 {<br>\t\t\treturn mid<br>\t\t} else if temp &gt; n {<br>\t\t\thigh = mid<br>\t\t} else {<br>\t\t\tlow = mid<br>\t\t}<br>\t}<br>\treturn 1.000000<br>}","like_count":0},{"had_liked":false,"id":200777,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585649667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585649667","product_id":100017301,"comment_content":"第二题主要问题应该是寻找重点比较耗时。每次为一半 也就是n&#47;2+n&#47;4...<br>最后去除掉各种就是O(n)","like_count":0},{"had_liked":false,"id":197634,"user_name":"naku","can_delete":false,"product_type":"c1","uid":1528610,"ip_address":"","ucode":"B49EF5B5B38400","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","comment_is_top":false,"comment_ctime":1585388905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585388905","product_id":100017301,"comment_content":"觉得老师对二叉查找的解释里： =不加有问题。 比如 数组（1,3），查找3.  =不加是找不到3的。 或者循环体外判断下等号相等的情况也可以。<br>int binarySearch_noReapeat2(vector&lt;int&gt; &amp;v, int val) {<br>    int left = 0;<br>    int right = v.size() - 1;<br>    while (left &lt;= right) { <br>        int mid = left + ((right - left) &gt;&gt; 1);  &#47;&#47;这里注意&gt;&gt;运算符优先级比+低， 需加上括号<br>        if (val == v[mid]) {<br>            return mid;<br>        } else if (val &gt; v[mid]) {<br>            left = mid + 1;<br>        } else {<br>            right = mid - 1;<br>        }<br>    }<br><br>    return -1;<br>}","like_count":0},{"had_liked":false,"id":191065,"user_name":"1110001","can_delete":false,"product_type":"c1","uid":1077581,"ip_address":"","ucode":"302BBE18D5C483","user_header":"","comment_is_top":false,"comment_ctime":1584721371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584721371","product_id":100017301,"comment_content":"用链表进行查找的时候，指针移动总次数是n-1次，与此同时没找到一个mid都需要与要找的数据进行比对，比较所需要的次数为logn，最后的时间复杂度是O(n+logn),而顺序遍历是O(n).不应该是这样吗？","like_count":0},{"had_liked":false,"id":184967,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1583460128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583460128","product_id":100017301,"comment_content":"关于链表二分法查找的时间复杂度，1 楼总结的非常到位，二分查找法每次都获取链表的中间结点，采用快慢指针算法获取链表的中间节点时，快慢指针都要移动链表长度的一半次，也就是 n &#47; 2 次，总共要移动 n 次指针才行。<br> - 第一次，链表长度为 n，需要移动指针 n 次；<br> - 第二次，链表长度为 n &#47; 2，需要移动指针 n &#47; 2 次；<br> - 第三次，链表长度为 n &#47; 4，需要移动指针 n &#47; 4 次；<br> - ......<br> - 以此类推，一直到 1 次为值<br> - 指针移动的总次数 n + n &#47; 2 + n &#47; 4 + n &#47; 8 + ... + 1 = n(1 - 0.52) &#47; (1 - 0.5) = 2n<br>也就是说，如果采用链表的数据结构，仅获取中间结点的时间复杂度是 O(2n)，不仅远远大于数组二分查找 O(logn)，也要大于顺序查找的时间复杂度 O(n)。","like_count":0},{"had_liked":false,"id":183755,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583127673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583127673","product_id":100017301,"comment_content":"private static int binarySearch0(int[] a, int fromIndex, int toIndex,<br>                                     int key) {<br>        int low = fromIndex;<br>        int high = toIndex - 1;<br><br>        while (low &lt;= high) {<br>            int mid = (low + high) &gt;&gt;&gt; 1;<br>            int midVal = a[mid];<br><br>            if (midVal &lt; key)<br>                low = mid + 1;<br>            else if (midVal &gt; key)<br>                high = mid - 1;<br>            else<br>                return mid; &#47;&#47; key found<br>        }<br>        return -(low + 1);  &#47;&#47; key not found.<br>    }","like_count":0},{"had_liked":false,"id":182812,"user_name":"肖大妞","can_delete":false,"product_type":"c1","uid":1426644,"ip_address":"","ucode":"2AD2F8684FDCF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/c4/d4/5c8fb1cb.jpg","comment_is_top":false,"comment_ctime":1582869431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582869431","product_id":100017301,"comment_content":"1000万数据找一个整数，感觉也没说这1000万个数据就是有序的，那假如无序的话是不是排序的时间复杂度也得考虑进去，要是有序的话，是不是考虑之前的桶排序啥的速度会更快吗","like_count":0},{"had_liked":false,"id":182240,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1582732019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582732019","product_id":100017301,"comment_content":"对于第一题 之前在某某面试题中看到过 其实用二分查找这个很容易想出来，然而如果是面试中 只说了二分查找的思路显然不够脱颖而出。对于高数比较好的人来说都知道泰勒展开---对于一切函数都可以用幂级数的形式表示 俗称统一美 这里我们可以令f(x)=√x 根据泰勒公式我们可以得到f(x)=f(x0)+f一阶导(x0)&#47;1!*(x-x0)+f二阶导(x0)&#47;2!*(x-x0)平方+...... 这里我们假设要算的是根号2 那么x0我们自然想到用1 因为√1=1 根号x的一阶导数是1&#47;2√x 根号x的二级导数是-1&#47;(4x的3&#47;2次方).....(这里只能打文字 不能手写所以很多东西不太好说) 最后我们可以算出 √2=1+1&#47;2-1&#47;8+1&#47;48-...... 这里很容易得出规律 当然要想用这个方法实现肯定比二分查找要复杂的多 但是如果实现的好的话 不光能算平方根 sin cos tan函数都能算 对于题目要求取6位数 理论上 平方根是一个无理数 那么显然幂级数是收敛的 换句话说 一定存在一个数N 当n（幂级数项数)&gt;=N时 函数值的前六位数就已经固定不变了 但是问题是这个N具体是多少呢 可以粗略估计一下 当我们计算到第n项时 如果此时这一项的值已经存在7位0那么我们可以认为这个N就是这一项","like_count":0},{"had_liked":false,"id":180469,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1582291019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582291019","product_id":100017301,"comment_content":"总的来说，二分查找很优秀，查找一个给定数据在数组中的位置，时间复杂度为O(logn)。但是它有很大的局限性，只适合数组，数据的有序的，数据量太大太小都不适合二分查找算法。","like_count":0},{"had_liked":false,"id":179531,"user_name":"进击的小明","can_delete":false,"product_type":"c1","uid":1737846,"ip_address":"","ucode":"7C9A774C504177","user_header":"https://static001.geekbang.org/account/avatar/00/1a/84/76/6091523d.jpg","comment_is_top":false,"comment_ctime":1582024687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582024687","product_id":100017301,"comment_content":"n&#47;2k=1 时，k 的值就是总共缩小的次数 为什么 = 1 呢？","like_count":0},{"had_liked":false,"id":177729,"user_name":"谢真","can_delete":false,"product_type":"c1","uid":1124650,"ip_address":"","ucode":"8C3402DE107C9F","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/2a/9079f152.jpg","comment_is_top":false,"comment_ctime":1581483732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581483732","product_id":100017301,"comment_content":"1.000000和6.000000之间用二分查找","like_count":0},{"had_liked":false,"id":177617,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1581435038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581435038","product_id":100017301,"comment_content":"求任意正整数的平方根到小数后6位<br>import org.junit.Assert;<br>import org.junit.Test;<br><br>import java.math.BigDecimal;<br><br>public class SqrTest {<br>    public static long sqr(float n, int bit) {<br>        StringBuilder sb = new StringBuilder();<br>        for (int i=0;i&lt;bit*2;i++) {<br>            sb.append(&quot;0&quot;);<br>        }<br>        BigDecimal m = new BigDecimal((long)n+sb.toString());<br>        BigDecimal l = new BigDecimal(0);<br>        BigDecimal r = m;<br>        BigDecimal two = new BigDecimal(2);<br>        BigDecimal one = new BigDecimal(1);<br>        BigDecimal mid = m.divide(two);<br>        BigDecimal tmp = new BigDecimal(1);<br>        int count = 0;<br>        while (l.compareTo(r)&lt;0) {<br>           tmp = mid.multiply(mid);<br>           if (tmp.compareTo(m)&lt;0) {<br>               l = mid.add(one);<br>           } else {<br>               r = mid;<br>           }<br>           mid = (l.add(r)).divide(two);<br>           count++;<br>           if (count&gt;1000) {<br>               break;<br>           }<br>        }<br>        return l.longValue();<br>    }<br><br>    @Test<br>    public void test() {<br>        &#47;&#47;Given<br>        float n = 999999999999.0f;<br><br>        &#47;&#47;When<br>        long result = SqrTest.sqr(n, 6);<br><br>        &#47;&#47;Then<br>        long y = Math.round(Math.sqrt(n)*1000000);<br>        Assert.assertTrue(Math.abs(y-result)&lt;2);<br>    }<br>}","like_count":0},{"had_liked":false,"id":177392,"user_name":"CDz","can_delete":false,"product_type":"c1","uid":1114779,"ip_address":"","ucode":"A23BEE1C4A5922","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/9b/b1a3c60d.jpg","comment_is_top":false,"comment_ctime":1581386891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581386891","product_id":100017301,"comment_content":"二分查找适用场景：<br>- 数组（可随机访问）<br>- 插入、删除操作不频繁（一次排序，多次查找）<br>- 有序<br>- 数组容量不易过小<br>    例外*比较*操作耗时时，二分查找比较次数最低<br>- 数据量过大也不适合<br>    因为数组需要一篇连续的内存在存储，多大的话可能内存不够。<br>","like_count":0},{"had_liked":false,"id":171768,"user_name":"pikachu122","can_delete":false,"product_type":"c1","uid":1689365,"ip_address":"","ucode":"43FE4DBC872FFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/15/24bf166a.jpg","comment_is_top":false,"comment_ctime":1579009292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579009292","product_id":100017301,"comment_content":"总结：<br>1、二分查找是一种针对有序数据的查找算法。每次都与查找区间的中间元素对比，将查找区间缩小为原来的一半，直至找到或查找空间为0（找不到）。<br>2、时间复杂度为O(logn)。O(logn)是一类非常高效的算法，它的时间复杂度有时甚至比一些O(1)级别的算法还要高。<br>3、二分查找的原理比较容易理解，但代码实现容易出现问题。主要是（1）循环条件是low&lt;=high而不是low&lt;high（2）mid的计算不能直接写成(low+high)&#47;2，因为low+high有可能溢出。正确的写法是mid=low+(high-low)&#47;2或mid=low+((high-low)&gt;&gt;1)（3）low和high的更新low=mid+1，high=mid-1，不能直接写成low=mid或者high=mid，可能会出现死循环。<br>4、二分查找除了用循环外，也可以用递归实现。<br>5、二分查找的使用条件：（1）必须依赖于数组才能达到O(logn)，因为需要按照下标随机访问。链表用二分查找的时间复杂度是O(n)，与直接遍历无异。（2）必须是有序数据。无序数据必须先排序。因此只适用于一次排序多次查找的静态数组情形（3）数据量太小或太大都不适用。太小相比直接遍历优势不明显。太大难以存放在数组里，因为数组需要申请连续的内存空间。但有一种例外情况，如果比较操作非常耗时的时候，即使数据量很小也推荐使用二分查找，因为这样可以减少比较次数。<br><br>LeetCode二分查找相关练习：https:&#47;&#47;leetcode-cn.com&#47;tag&#47;binary-search&#47;","like_count":0},{"had_liked":false,"id":170714,"user_name":"学写代码的猪","can_delete":false,"product_type":"c1","uid":1064616,"ip_address":"","ucode":"4EBA2329450B53","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/a8/66088c47.jpg","comment_is_top":false,"comment_ctime":1578671293,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578671293","product_id":100017301,"comment_content":"1. 循环退出条件注意是 low&lt;=high，而不是 low&lt;high。 老师这里是不是口误或笔误？不是退出条件，是循环继续的条件吧？","like_count":0},{"had_liked":false,"id":169767,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1578444447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578444447","product_id":100017301,"comment_content":"如何在 1000 万个整数中快速查找某个整数<br>直接遍历一次查找的时间复杂度是O(n)，<br>先排序，假如是快速排序，时间复杂度是O(nlogn)，花费时间不是变大了吗？","like_count":0},{"had_liked":false,"id":162103,"user_name":"是茜茜啊","can_delete":false,"product_type":"c1","uid":1685428,"ip_address":"","ucode":"7A5EBB87C8FBFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/b7/b4/f870dc5f.jpg","comment_is_top":false,"comment_ctime":1576461903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576461903","product_id":100017301,"comment_content":"容易出错的三个地方那里并不绝对，要根据变量的定义来做具体的取舍。如果全部定义为左开右闭区间的话，那么循环条件改为low &lt; high并没有问题","like_count":0},{"had_liked":false,"id":161738,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1576312561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576312561","product_id":100017301,"comment_content":"二分查找（Binary Search）<br>\t1，二分查找是一种针对有序集合的查找算法，也叫折半查找算法。<br>\t2，二分查找思想类似于分治思想，每次都通过跟区间的中间元素，将待查找的区间缩小为之前的一半，直到要查找的元素，或者被缩小为0。<br>\t3，二分查找的时间复杂度为O(logn)，是一种极其高效的时间复杂度，有时甚至比时间复杂度是O(1)的算法还要高效。<br>\t<br>\t4，二分查找的递归与非递归实现<br>\t\t最简单的二分查找是：有序数组中不存在重复元素。<br>\t\t二分查找关键点是：<br>\t\t\tA，循环退出条件<br>\t\t\tB，mid的取值<br>\t\t\tC，low和high的更新<br>\t5，二分查找应用场景的局限性<br>\t\t二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，对内存的要求比较苛刻，要求内存空间连续。<br>","like_count":0},{"had_liked":false,"id":161631,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1576253838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576253838","product_id":100017301,"comment_content":"Day9<br>二分查找：每次与区间的中间元素作比较，将待查找的区间缩小为之前的一半，直到找到要找的元素或者区间被缩小为0为止。<br>适用场景：依赖顺序表结构：数组，数据必须是有序；数据量不能太小，体现不出二分查找的优势，顺序遍历即可；也不能太大，因为数组需要连续的内存空间，意味着数据太大需要很大的连续内存空间。时间复杂度：O(logn)；<br>其算法应注意三点：<br>1、中间点不宜采用mid = (high + low)&#47;2，应用low + (high-low) &gt;&gt; 1；<br>2、low和high的更新，low = mid + 1, high = mid - 1<br>3、退出循环的条件：low &lt;= high","like_count":0},{"had_liked":false,"id":161483,"user_name":"Allen_","can_delete":false,"product_type":"c1","uid":1677187,"ip_address":"","ucode":"CA5E00E4644CD5","user_header":"https://static001.geekbang.org/account/avatar/00/19/97/83/845b48e2.jpg","comment_is_top":false,"comment_ctime":1576216003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576216003","product_id":100017301,"comment_content":"不懂的同学可以拿去慢慢研究<br>const getSqaureRoot = (num, decimal = 1) =&gt; {<br>    let high, low;<br>    if (num &gt; 1) {<br>        high = num<br>        low = 1<br>    }else {<br>        high = 1<br>        low = num<br>    }<br>    let currValue = low + (high - low) &#47; 2<br>    while (Math.abs(currValue ** 2 - num) &gt; (1 &#47; decimal)) {<br><br>        if (currValue ** 2 &lt; num) {<br>            low = currValue<br>        } else {<br>            high = currValue<br>        }<br><br>        currValue = low + (high - low) &#47; 2<br>    }<br><br>    return Math.round(currValue * decimal) &#47; decimal<br><br>}<br><br><br>console.log(getSqaureRoot(1.44, 10000));","like_count":0},{"had_liked":false,"id":160417,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1575947623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575947623","product_id":100017301,"comment_content":"1.求开方，先用二分查找确定整数部分，再使用二分查找确定逐个小数位<br>2.二分查找采用链表由于每次都要移动指针到中间点，所以时间复杂度O(n)","like_count":0},{"had_liked":false,"id":159835,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1575806223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575806223","product_id":100017301,"comment_content":"超过 300 的字符串比较操作，如何实现二分查找呢？ 字符串比较是从头开始，一个一个字符顺序比较，如何二分查找再比较？","like_count":0},{"had_liked":false,"id":159602,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1575702129,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1575702129","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":159566,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1575687029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575687029","product_id":100017301,"comment_content":"第一题：在1与这个数组成的区间之中使用二分查找，直到区间长度小于10^(-6)<br>第二题：长度为n的链表找到中间节点的时间复杂度为O(n)，递推公式为T(n)=T(n&#47;2)+O(n)，根据主定理，时间复杂度为O(n)。","like_count":0},{"had_liked":false,"id":159551,"user_name":"刘丶小备","can_delete":false,"product_type":"c1","uid":1102106,"ip_address":"","ucode":"F4D5EF592B7030","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/1a/3564c9da.jpg","comment_is_top":false,"comment_ctime":1575681879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575681879","product_id":100017301,"comment_content":"第一题：假设要求平方根的数为x，low=1，那么high=x，然后找到该区间的中间值mid，那么只要找到mid*mid-x&lt;=0.000001的mid值就可以了，否则就改变区间，继续二分查找，直到满足条件。","like_count":0},{"had_liked":false,"id":159016,"user_name":"元","can_delete":false,"product_type":"c1","uid":1717444,"ip_address":"","ucode":"4576E15018EEA3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/c4/08d9f349.jpg","comment_is_top":false,"comment_ctime":1575515436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575515436","product_id":100017301,"comment_content":"题外话了，JS的数组实现不是连续内存空间，老师能讲解下吗？","like_count":0},{"had_liked":false,"id":158015,"user_name":"尛鬼","can_delete":false,"product_type":"c1","uid":1264344,"ip_address":"","ucode":"D68CA7345C9726","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/d8/b43734f8.jpg","comment_is_top":false,"comment_ctime":1575297921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575297921","product_id":100017301,"comment_content":"第一题:<br>double hight = 8;<br>double mid = hight&#47;2;<br>while(true){<br>       if(mid &gt; hight&#47;mid &amp;&amp; mid*mid -high &gt; 0.000001){<br>               mid = (mid + high&#47;mid)&#47;2;<br>       }else if(high - mid*mid&lt;= 0.000001){<br>               &#47;&#47;mid就是结果<br>               break;<br>       }else {<br>               mid =(mid + hight)&#47;2;<br>       }<br>}","like_count":0},{"had_liked":false,"id":157741,"user_name":"Flynn","can_delete":false,"product_type":"c1","uid":1174517,"ip_address":"","ucode":"293321CC198C0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aY5QA2COoiaGy7P3MJzUIam3GG94GpA0fTx8yJN3OyBiaP3eNL65ia99H4RbaqC4fypg7JhBOujlJs7bBTdJKdMUQ/132","comment_is_top":false,"comment_ctime":1575253056,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575253056","product_id":100017301,"comment_content":"老师，为什么传参都要带个数组的个数n呢","like_count":0,"discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74678,"discussion_content":"因为你要指定数组中的元素有几个，因为数组中可能会有剩余的空间并没有存数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575652188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157621,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1575213928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575213928","product_id":100017301,"comment_content":"1. 二分法，确定整数，然后同理是小数点的后一位、后两位、后三位","like_count":0},{"had_liked":false,"id":156890,"user_name":"冷峰","can_delete":false,"product_type":"c1","uid":1266052,"ip_address":"","ucode":"E6B7DA545E7961","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/84/5b7d4d95.jpg","comment_is_top":false,"comment_ctime":1574992323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574992323","product_id":100017301,"comment_content":"function msqrt($num, $digits = 6)<br>{<br>    if ($num &lt; 0) {<br>        return NAN;<br>    }<br><br>    $low            = 0;<br>    $high           = $num;<br>    $deltaThreshold = pow(10, $digits * -1);<br>    while ($low &lt;= $high) {<br>        $mid    = $low + (($high - $low) &#47; 2);<br>        $square = $mid * $mid;<br>        $delta  = abs($square &#47; $num - 1);<br>        if ($delta &lt; $deltaThreshold) {<br>            return $mid;<br>        }<br>        if ($square &gt;= $num) {<br>            $high = $mid;<br>        } else {<br>            $low = $mid;<br>        }<br>    }<br>    return -1;<br>}","like_count":0},{"had_liked":false,"id":150086,"user_name":"vvvvv呀","can_delete":false,"product_type":"c1","uid":1708223,"ip_address":"","ucode":"D1239EC975670D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/bf/45ad6573.jpg","comment_is_top":false,"comment_ctime":1573460416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573460416","product_id":100017301,"comment_content":"我用Python3写了下求平方根的问题，个人感觉底下代码在判断小数后六位的时候用得出来的数的平方与原数比较这块是否应该是判断小数后12位，因为对得出来的数平方的同时小数后六位也进行了平方，以下是代码<br>#二分法求平方根<br>def square_root(x):<br>    if x &lt; 0:<br>        return -1<br>    if x == 0:<br>        return 0<br>    low, high = 1, x<br>    while low &lt; high:<br>        # mid = float(low)+float((high-low)&#47;2)<br>        mid = low + (high-low)&#47;2<br>        val = mid ** 2<br>        if abs(val-x) &lt; 1e-12: #平方根要求小数后六位，因此这里判断应该是小数后12位<br>            print(mid)<br>            return round(mid,6)<br>        if val == x:<br>            return mid<br>        elif val &lt; x:<br>            low = mid<br>        else:<br>            high = mid<br>from math import sqrt<br>print(sqrt(5.3))<br>print(square_root(5.3))","like_count":0},{"had_liked":false,"id":148876,"user_name":"stargoood","can_delete":false,"product_type":"c1","uid":1235371,"ip_address":"","ucode":"18417CEBB04A36","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/ab/828080eb.jpg","comment_is_top":false,"comment_ctime":1573098405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573098405","product_id":100017301,"comment_content":"开篇的题目可以用布隆过滤器","like_count":0},{"had_liked":false,"id":145781,"user_name":"时光之刃","can_delete":false,"product_type":"c1","uid":1083381,"ip_address":"","ucode":"0F15CAD70BDDC3","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/f5/c6d1ffed.jpg","comment_is_top":false,"comment_ctime":1572364344,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572364344","product_id":100017301,"comment_content":"授之以渔，支持老师出书，估计会很畅销","like_count":0},{"had_liked":false,"id":145158,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1572224880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572224880","product_id":100017301,"comment_content":"根号2求值<br>1:1-2之间取1.5<br>2:1-1.5之间取1.25<br>3:1.25-1.5之间取1.75逐步类推","like_count":0},{"had_liked":false,"id":137333,"user_name":"骨感小白9527","can_delete":false,"product_type":"c1","uid":1476780,"ip_address":"","ucode":"BB1B68B40FE8AB","user_header":"","comment_is_top":false,"comment_ctime":1569717258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569717258","product_id":100017301,"comment_content":"如果10000000万个数字中最大值减去最小值的区间不是非常大的话，用计数排序后，利用数组下表查找会很快。","like_count":0},{"had_liked":false,"id":133977,"user_name":"モブ","can_delete":false,"product_type":"c1","uid":1645302,"ip_address":"","ucode":"01BE64E20DEF7C","user_header":"https://static001.geekbang.org/account/avatar/00/19/1a/f6/19e67bea.jpg","comment_is_top":false,"comment_ctime":1568710205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568710205","product_id":100017301,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;math.h&gt;<br><br><br>float round(float a, int d)<br>{<br>\tint b = (a + 5 &#47; pow(10, d + 1)) * pow(10, d);<br>\tfloat c = b &#47; pow(10, d);<br>\treturn c;<br>}<br><br>float mySqrt(int a, int detail = 6)<br>{<br>\tint i = 0;<br>\tfloat low = 0;<br>\tfloat high = a;<br>\tfloat mid = int((0 + a) &#47; 2);<br>\tfor (;i&lt;=detail;i++)<br>\t{<br>\t\twhile (low &lt;= high)<br>\t\t{<br>\t\t\tmid = round((low + high) &#47; 2, i);<br>\t\t\tif (mid * mid &lt; a)<br>\t\t\t\tlow = mid + 1.0 &#47; pow(10, i);<br>\t\t\telse if (mid * mid &gt; a)<br>\t\t\t\thigh = mid - 1.0 &#47; pow(10, i);<br>\t\t\telse<br>\t\t\t\treturn mid;<br>\t\t}<br>\t\tif (mid * mid &lt; a)<br>\t\t{<br>\t\t\tlow = mid;<br>\t\t\thigh = mid + 1 &#47; pow(10, i);<br>\t\t}<br>\t\telse<br>\t\t{<br>\t\t\tlow = mid - 1 &#47; pow(10, i);<br>\t\t\thigh = mid;<br>\t\t}<br>\t}<br>\treturn mid;<br>}","like_count":0},{"had_liked":false,"id":133882,"user_name":"少刷票圈多读书","can_delete":false,"product_type":"c1","uid":1514673,"ip_address":"","ucode":"98147AEA7B61DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/b1/12edee24.jpg","comment_is_top":false,"comment_ctime":1568690334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568690334","product_id":100017301,"comment_content":"二分查找求平方根，Python实现，逐位查找<br>def sqrt(num, n=6):<br>    &quot;&quot;&quot;求一个数的平方根，精确到小数点后n位<br>    先确定整数部分，再确定小数部分，小数部分每次确定一位，最后四舍五入<br>    :param num:<br>    :param n:<br>    :return:<br>    &quot;&quot;&quot;<br>    # 保留小数点后n+1位<br>    for i in range(0, n+2):<br>        if i == 0:<br>            low, high = 0, num<br>        else:<br>            low, high = round(res+0.0&#47;(10**i),i), round(res+10.0&#47;(10**i),i)<br>        res= round(_sqrt(num, low, high, i),i)<br>    # 对最后一位四舍五入<br>    return round(res, n)<br><br><br>def _sqrt(num, low, high, i):<br>    &quot;&quot;&quot;对[low, high]范围内的i位数二分查找确定num的平方根<br>    :param num: 目标数<br>    :param low: 二分查找下界<br>    :param high: 二分查找上界<br>    :param i: 查找位数，为0时表示整数部分<br>    :return:<br>    &quot;&quot;&quot;<br>    while low &lt;= high:<br>        if i == 0:<br>            mid = low + ((high - low) &gt;&gt; 1)<br>        else:<br>            mid = round(low + ((high - low)&#47;2), i)<br>        if mid ** 2 == num:<br>            return mid<br>        elif mid**2 &lt; num and (mid+1&#47;(10**i))**2 &gt; num:<br>            return mid<br>        elif mid**2 &lt; num:<br>            low = round(mid+1&#47;(10**i),i)<br>        elif mid**2 &gt;num and (mid-1&#47;(10**i))**2 &lt; num:<br>            return mid-1&#47;(10**i)<br>        else:<br>            high = round(mid-1&#47;(10**i),i)","like_count":0},{"had_liked":false,"id":132558,"user_name":"蒋旺Foo","can_delete":false,"product_type":"c1","uid":1265741,"ip_address":"","ucode":"4325AB9674975C","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/4d/392f969b.jpg","comment_is_top":false,"comment_ctime":1568165921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568165921","product_id":100017301,"comment_content":"关于二分查找容易出错的「2.mid 的取值」，jdk中解决方案是：(low + high) &gt;&gt;&gt; 1。这样就可以避免溢出","like_count":0},{"had_liked":false,"id":122531,"user_name":"yaomon","can_delete":false,"product_type":"c1","uid":1121557,"ip_address":"","ucode":"4742547EB92BCE","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/15/8ad4e24a.jpg","comment_is_top":false,"comment_ctime":1565418855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565418855","product_id":100017301,"comment_content":"“我们可以将这里的除以 2 操作转化成位运算 low+((high-low)&gt;&gt;1)”<br>-------------------------------------------------------------------<br>在 Java 中区分逻辑右移 &gt;&gt; 和算术右移 &gt;&gt;&gt; ，因为下标是自然数，所以哪个右移都可以<br>","like_count":0},{"had_liked":false,"id":118537,"user_name":"Hxd","can_delete":false,"product_type":"c1","uid":1357303,"ip_address":"","ucode":"B8B04AA5738CC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","comment_is_top":false,"comment_ctime":1564383104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564383104","product_id":100017301,"comment_content":"求两数平均值还有一种方法可以避免数据溢出，处理很巧妙：<br>(x&amp;y)+((x^y)&gt;&gt;1)","like_count":0},{"had_liked":false,"id":118243,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1564300150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564300150","product_id":100017301,"comment_content":"数据量太大可以进行数据分拆读取到内存，然后每一个分组进行二分查找，多一步操作","like_count":0},{"had_liked":false,"id":116810,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1563929106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563929106","product_id":100017301,"comment_content":"强化了分治算法，再回头来看看二分，才知道它就是分治思想的体现。","like_count":0},{"had_liked":false,"id":116184,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1563799576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563799576","product_id":100017301,"comment_content":"今晚准备学这一篇，我觉得到目前为止感觉还不错，刚开始的时候有一周多又不想继续了，拖延了一周多之后又继续了，最近会在下班后留在公司写几个算法，我觉得有进步，希望自己能继续下去。","like_count":0},{"had_liked":false,"id":111684,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1562583364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562583364","product_id":100017301,"comment_content":"打卡跟进！","like_count":0},{"had_liked":false,"id":106631,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561360039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561360039","product_id":100017301,"comment_content":"建立起对数字的敏感性，logn是个非常恐怖的数量级（对比指数增长可以感知）<br>在实际工程的一些场景下，o(logn)的时间复杂度可能比o(n)的时间复杂度要好（系数）<br>二分查找算法的注意点：<br><br>1. 循环退出条件（low &lt;= high）<br>2. mid写法（mid = low+((high-low)&gt;&gt;1)）<br>3. low和high的更新防止死循环<br><br>二分查找算法的适用场景：顺序表结构存储；有序数据（少插入和删除）；","like_count":0},{"had_liked":false,"id":102034,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1560123916,"is_pvip":false,"replies":[{"id":"36904","content":"文中好像没有讲到你说的这个呀","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560210322,"ip_address":"","comment_id":102034,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560123916","product_id":100017301,"comment_content":"使用链表如何记住每次的索引地址 需要额外保存地址？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453227,"discussion_content":"文中好像没有讲到你说的这个呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560210322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101207,"user_name":"goodxwp","can_delete":false,"product_type":"c1","uid":1245398,"ip_address":"","ucode":"B705DAC523B2ED","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDY9bVLK3oyLmF6X2OnUZAzwSNVpS7XPxOQg84XJdvhr6SfvPe5uhYvzSf8ycIokfiapAJ8lvPxHA/132","comment_is_top":false,"comment_ctime":1559741477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559741477","product_id":100017301,"comment_content":"比较次数呢，不考虑了？","like_count":0},{"had_liked":false,"id":101131,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1559723193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559723193","product_id":100017301,"comment_content":" private static BigDecimal square(BigDecimal item){<br>        BigDecimal min = BigDecimal.valueOf(0);<br>        BigDecimal max = item;<br>        BigDecimal half = BigDecimal.valueOf(-1);<br>        while (min.compareTo(max)&lt;=0){<br>            half = (max.add(min)).divide(BigDecimal.valueOf(2),6, RoundingMode.HALF_UP);<br>            if (half.multiply(half).compareTo(item)&lt;0){<br>                min = half.add(BigDecimal.valueOf(0.000001));<br>            }else {<br>                max = half.subtract(BigDecimal.valueOf(0.000001));<br>            }<br>        }<br>        return half;<br>    }<br>第一题答案","like_count":0},{"had_liked":false,"id":100629,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1559608012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559608012","product_id":100017301,"comment_content":"第一题<br>public static double sqrtByBinary(double x){<br>        double low = 0;<br>        double high = x;<br>        double power = low;<br>        double answer = low;<br>        while(Math.abs(power-x)&gt;0.000001){<br>            double mid = (low+high)&#47;2;<br>            power = mid*mid;<br>            if(power&gt;x){<br>                high = mid-1;<br>            }else if(power&lt;=x){<br>                low = mid+1;<br>                answer = mid;<br>            }<br>        }<br>        return answer;<br>    }<br>第二题：学习了第一个留言，很棒。","like_count":0},{"had_liked":false,"id":100095,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1559443370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559443370","product_id":100017301,"comment_content":"第二个问题，如果是链表，就需要通过遍历查找中间节点，步骤：1.遍历查找中间节点，时间复杂度o(n&#47;2)   2.将中间节点值与给定值比较，确定范围，首指针、尾指针重新赋值  3.重复步骤1、2，依次类推   <br>按照以上操作，最终复杂度o(n&#47;2)+o(n&#47;4)+...+o(1)~~o(n)","like_count":0},{"had_liked":false,"id":94523,"user_name":"子夜天不在","can_delete":false,"product_type":"c1","uid":1301289,"ip_address":"","ucode":"FDB6DF0AA733A4","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/29/8ef0b74b.jpg","comment_is_top":false,"comment_ctime":1557832495,"is_pvip":false,"replies":[{"id":"33860","content":"那不是终止条件啊，那是循环执行条件！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557881549,"ip_address":"","comment_id":94523,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557832495","product_id":100017301,"comment_content":"low &lt;= high ，不懂循环终止条件为什么要加上 low &lt; high ，我自己测试时无论数组长度奇偶 ， low === high 作为条件也能得到准确的结果啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450093,"discussion_content":"那不是终止条件啊，那是循环执行条件！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557881549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94512,"user_name":"lhgdy","can_delete":false,"product_type":"c1","uid":1301502,"ip_address":"","ucode":"92140E9AB7659A","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/fe/90446b61.jpg","comment_is_top":false,"comment_ctime":1557829472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557829472","product_id":100017301,"comment_content":"求平方根的话更高效的还是用牛顿迭代法","like_count":0},{"had_liked":false,"id":92606,"user_name":"ggsk","can_delete":false,"product_type":"c1","uid":1450435,"ip_address":"","ucode":"83D63303FEF7EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/c3/98708266.jpg","comment_is_top":false,"comment_ctime":1557305890,"is_pvip":false,"replies":[{"id":"33705","content":"实际上，初始值并不重要，除以2是可以的。因为二分的时间复杂度是logn，很快速的，初始值是多少，对此都影响不大。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1557791986,"ip_address":"","comment_id":92606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557305890","product_id":100017301,"comment_content":"老师这是我做的找平方根的方法，不知道算不算是利用二分法？<br>&#47;**<br>     * 练习：求一个数的平方根，精确到小数点后6位<br>     *&#47;<br>    public static BigDecimal squareRoot(BigDecimal number){<br>        BigDecimal min = BigDecimal.ZERO;<br>        BigDecimal max = number;<br>        BigDecimal targetTemp = number;<br>        while (min.compareTo(max) &lt;= 0) {<br>            BigDecimal half = min.add(max).divide(BigDecimal.valueOf(2),6,BigDecimal.ROUND_HALF_UP);<br>            BigDecimal temp = half.multiply(half).setScale(6,BigDecimal.ROUND_HALF_UP);<br>            int compare = number.compareTo(temp);<br>            if (compare == 0) {<br>                return half;<br>            } else if (compare &lt; 0) {<br>                max = half;<br>            } else {<br>                min = half;<br>            }<br>            if (targetTemp.compareTo(temp) == 0) {<br>                return half;<br>            } else {<br>                targetTemp = temp;<br>            }<br>        }<br>        return null;<br>    }<br>问题是：第一次进来我应该如何确定那个mid值比较合适呢，因为我测试用的是5（求5的平方根），所以一上来直接将传入的数除于2；但是想想如果是50呢，我如果还是上来除于2的话，得到的是25，比较其平方就是625与50比，感觉这样范围就好大，有没有更好的方式在第一次就确定较为接近的mid呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449332,"discussion_content":"实际上，初始值并不重要，除以2是可以的。因为二分的时间复杂度是logn，很快速的，初始值是多少，对此都影响不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557791986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90220,"user_name":"🐷","can_delete":false,"product_type":"c1","uid":1508736,"ip_address":"","ucode":"D489239F4F7279","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/80/9fdb4947.jpg","comment_is_top":false,"comment_ctime":1556451580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556451580","product_id":100017301,"comment_content":"二分查找适用于静态，有序的数据集合。<br>要求随机访问，底层依赖数组。","like_count":0},{"had_liked":false,"id":89216,"user_name":"actionMove","can_delete":false,"product_type":"c1","uid":1003119,"ip_address":"","ucode":"C302338A22E854","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/6f/f66fd6dd.jpg","comment_is_top":false,"comment_ctime":1556109158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556109158","product_id":100017301,"comment_content":"1.依赖有序的线性表结构，需要支持按照下标随机访问<br>       由于二分查找仅支持的有序的数据上执行，所以在插入和删除比较少，一次排序后，可供多次查找的 <br>       场景下，比较适合使用二分查找，动态变化频繁的数据，排序后查询的成本太高<br>2.数据量特别小，不适合使用二分查找，考虑直接遍历查找<br>       特例情况：数据之间的比较很耗时（字符串比较），这种不管数据大小，都可以使用二分查找<br>3.数据量特别大，不适合使用二分查找，无法一次加载进内存，无法分配足够的连续的内存空间","like_count":0},{"had_liked":false,"id":88877,"user_name":"家庭电工手册","can_delete":false,"product_type":"c1","uid":1074445,"ip_address":"","ucode":"4982D9A6A23916","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Hxv1bx8X5J2iaXJkkltb0w8O24MibtPlRQUZZLwaYk8e8oVNbT6HerV1jDibWWldn2yCxQBibiaQPCTY43picw2evdvQ/0","comment_is_top":false,"comment_ctime":1556019761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556019761","product_id":100017301,"comment_content":"看过红黑树、二叉堆、哈希表再回来看，对作者文末说的“二分查找最省内存”豁然开朗，这是一般想不到的角度👍","like_count":0},{"had_liked":false,"id":83011,"user_name":"立冬","can_delete":false,"product_type":"c1","uid":1467313,"ip_address":"","ucode":"287FA88D933FD5","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/b1/a6103703.jpg","comment_is_top":false,"comment_ctime":1554372170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554372170","product_id":100017301,"comment_content":"思考1 二分查找 (middle+0.000001)*(middle+0.000001)＞x且(middle-0.000001)*(middle-0.000001)&lt;x是结束条件","like_count":0},{"had_liked":false,"id":76234,"user_name":"嘿嘿啊","can_delete":false,"product_type":"c1","uid":1248655,"ip_address":"","ucode":"6CCD7A0AF000A0","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/8f/a0232945.jpg","comment_is_top":false,"comment_ctime":1552554947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552554947","product_id":100017301,"comment_content":"老师，我是这样想的。<br>假设有序链表的数据是n，第一次要找到中间结点的时间复杂度是O(n)，第二次是O(n&#47;2)，直到1为止，<br>那么时间复杂度应该是T{n} = (n + n&#47;2 + n&#47;4 + ... + 1)，其中的次数k = log2n，等比数列求和就可以得到T(n) = 2(n+1)，因此时间复杂度应该是O(n)。","like_count":0},{"had_liked":false,"id":75110,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1552355973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552355973","product_id":100017301,"comment_content":"1 0.000001  -&gt; 9.99999 查找一个数:k    k的平方&lt;m and k+0.000001的平方&gt;m<br>2 等比数列: n + n&#47;2 + n&#47;4 +... +1 O(n)","like_count":0},{"had_liked":false,"id":72331,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551588951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551588951","product_id":100017301,"comment_content":"二分法的用法还是不错的，但是有时候限制太多","like_count":0},{"had_liked":false,"id":69932,"user_name":"letcode8","can_delete":false,"product_type":"c1","uid":1317687,"ip_address":"","ucode":"5A5365B9D757AC","user_header":"https://static001.geekbang.org/account/avatar/00/14/1b/37/fdd2efea.jpg","comment_is_top":false,"comment_ctime":1550910481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550910481","product_id":100017301,"comment_content":"数组为[1,2,3,4,5]时候,如果直接查找10,感觉也会进入程序进入查找.","like_count":0},{"had_liked":false,"id":65382,"user_name":"LRG-","can_delete":false,"product_type":"c1","uid":1090110,"ip_address":"","ucode":"497C983B36A4A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/3e/7d9812f2.jpg","comment_is_top":false,"comment_ctime":1549310621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549310621","product_id":100017301,"comment_content":"在java, (high+low)&gt;&gt;&gt;1 就好，不会溢出","like_count":0},{"had_liked":false,"id":60181,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1547447128,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547447128","product_id":100017301,"comment_content":"二分查找:1.终止条件low&lt;= high,2. mid= low+( high-low)&#47;2,3. low= mid+1, high= mid-1","like_count":0},{"had_liked":false,"id":58012,"user_name":"halo","can_delete":false,"product_type":"c1","uid":1138057,"ip_address":"","ucode":"782892605CC855","user_header":"https://static001.geekbang.org/account/avatar/00/11/5d/89/93b837d6.jpg","comment_is_top":false,"comment_ctime":1546960528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546960528","product_id":100017301,"comment_content":"二分法  针对有序数组","like_count":0},{"had_liked":false,"id":55076,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1546029250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546029250","product_id":100017301,"comment_content":"今天又看了一遍第一名的留言，突然意识到自己昨天的想法有问题。怎么就多算了 logn 呢？明明链表和数组的差异就是在查找上面，所以只需要计算链表指针移动的次数就好啦！所以按照排名第一所说的，就是一个等比数列，然后最后的时间复杂度是 O(n)！","like_count":0},{"had_liked":false,"id":54684,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1545949650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545949650","product_id":100017301,"comment_content":"思考题：<br>1）求一个数的平方根。例如 f(x) = x^2 = 2，那么我们可以估算出 x 应该在 [1,2] 这个区间内。然后在这个区间内函数是递增的，所以我们可以在这个区间内进行二分求解这个函数的平方根。然后如果 right-left&lt;1e-6 的话，就停止，返回 mid 作为答案。<br><br>2）我有点不太同意第一名的答案，为什么二分所需要的时间不考虑进去呢？二分所需要的时间老师在课程里面说的是 O(logn)，然后在链表中遍历找到中间点所需要的时间是 O(n)，那总体的时间复杂度不应该是 O(nlogn) 吗？如果我说错了还请老师指教！谢谢！","like_count":0},{"had_liked":false,"id":54425,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1545869687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545869687","product_id":100017301,"comment_content":"既然求平方根是用二分法实现的，牛逼了","like_count":0},{"had_liked":false,"id":52261,"user_name":"冉小龙@wolf4j","can_delete":false,"product_type":"c1","uid":1154479,"ip_address":"","ucode":"92AECA3982C668","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/af/52f7ea78.jpg","comment_is_top":false,"comment_ctime":1545355641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545355641","product_id":100017301,"comment_content":"二分查找中low和heigh的限定条件，包括mid的移动，需要分情况来讨论，看是找第一个位置的元素，还是最后一个位置的元素，这个是有区别的","like_count":0},{"had_liked":false,"id":52260,"user_name":"冉小龙@wolf4j","can_delete":false,"product_type":"c1","uid":1154479,"ip_address":"","ucode":"92AECA3982C668","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/af/52f7ea78.jpg","comment_is_top":false,"comment_ctime":1545355429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545355429","product_id":100017301,"comment_content":"取中值的判定条件可以继续优化已选 改为： mid=low + （heigh - low）&#47;2，防止在low和heigh都处于int的临界值时，越界的问题","like_count":0},{"had_liked":false,"id":50953,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1545093191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545093191","product_id":100017301,"comment_content":"思考题: 1. 假设求n的平方根可以用二分查找, 不断的用每次二分查找结果k去平方, 然后与n比较去趋近于n.<br>2. 链表实现的话时间复杂度应该是O(n), 基本相当于顺序查找.","like_count":0},{"had_liked":false,"id":50055,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1544852261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544852261","product_id":100017301,"comment_content":"二分查找<br><br>思路：每次折半查找目标数据，每次都可以缩小一般的查找范围，最终范围只有1时即为结果。<br><br>局限：想要在恐怖的O(logn)内找到，1、只能用数组，2、且得是排好序的。3、数据量太大不适合，因为数组是连续的内存，如果要1GB数据，可能没有1GB连续内存。4、数据量太小不适合，因为数据太小遍历就可以了，也很快，数据大时二分查找优势才明显。<br><br>实现：可以递归，也可以用循环。（注意循环退出条件，mid的取值，low和high的更新）","like_count":0},{"had_liked":false,"id":48698,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544517743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544517743","product_id":100017301,"comment_content":"二分查找必需支持下标访问才行<br>针对有序数组，最好是静态不变的，如果要变也期望变化尽可能的小<br>小数据量，如果比较成本不高的情况下，普通遍历也是无妨的<br>数据量太大，如2G，要分配这样的一个数组本身也是麻烦的，即便分配成功也肯能导致内存不够用，系统响应慢等问题，<br><br>用二分查找解决的问题，基本上散列表和二叉树都能解决<br><br>思考题中，<br>第一个应该就是凑数的问题，<br>第二个应该就是每次找中间那个数时会比较耗时","like_count":0},{"had_liked":false,"id":46580,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1543939328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543939328","product_id":100017301,"comment_content":"总结下：使用二分查找，在对于思考问题的角度而言，还是推荐递归写法。因为使用递归，我们每次只需要考虑问题的一个子问题情况，大大降低了问题的复杂度，对于代码而言也非常简洁。况且二分查找的depth也不会出现函数栈溢出，因为4亿多的数据也就是32层。所以优先递归写法。","like_count":0},{"had_liked":false,"id":45981,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1543827519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543827519","product_id":100017301,"comment_content":"思考题<br>1、目前还没有思路<br>2、链表二分查找，要考虑访问a[mid]时的时间复杂度，因为链表不支持随机访问，所以要找到第mid个元素，那么只能从第low个开始遍历链表，直到第mid个结点，假设链表长度为n，那么访问第mid个结点的时间复杂度是O(n&#47;2)，依次类推，查找到时间复杂度为O(1+2+4+6+8....+n&#47;2)+O(logn)，可以简化为O(n^2)+O(logn)","like_count":0},{"had_liked":false,"id":44449,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1543450487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543450487","product_id":100017301,"comment_content":"是不是应该在一开始就说明二分搜索的数据是有序的？","like_count":0},{"had_liked":false,"id":42089,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1542907964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542907964","product_id":100017301,"comment_content":"求问老师，第一题是指平方根精度为6位，还是平方值和原数值相差精度为6位呢？<br>我只会java代码，看了两个问答，如果理解为平方根的精度为6位，那这些答案也都不对。好像都精确到七位了。<br>我理解为平方后相差精度为6位，代码如下，不过这样得到的平方根结果却是16位（用了double类型）。。<br><br>&#47;**<br>\t * 求解一个数的平方根，精确到小数六位<br>\t * <br>\t * @return<br>\t *&#47;<br>\tpublic static double square(double n) {<br>\t\tif (n == 0 || n == 1) {<br>\t\t\treturn 1;<br>\t\t}<br>\t\tdouble low = 0, high = n;<br>\t\tdouble middle = low + (high - low) &#47; 2;<br>\t\twhile (Math.abs(middle * middle - n) &gt; 0.000001) {<br>\t\t\tif (middle * middle &gt; n) {<br>\t\t\t\thigh = middle;<br>\t\t\t} else if (middle * middle &lt; n) {<br>\t\t\t\tlow = middle;<br>\t\t\t} else {<br>\t\t\t\treturn middle;<br>\t\t\t}<br>\t\t\tmiddle = low + (high - low) &#47; 2;<br>\t\t}<br>\t\treturn middle;<br>\t}","like_count":0},{"had_liked":false,"id":40805,"user_name":"🍪","can_delete":false,"product_type":"c1","uid":1299829,"ip_address":"","ucode":"2B6D01EA82DE97","user_header":"https://static001.geekbang.org/account/avatar/00/13/d5/75/d93f9648.jpg","comment_is_top":false,"comment_ctime":1542678407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542678407","product_id":100017301,"comment_content":"开篇的题目用位操作应该更快。一个字节对应八个整数，相当于一次遍历已经排序好了。接着用二分来查找就行。似乎在编程珠玑上看过类似的","like_count":0},{"had_liked":false,"id":37563,"user_name":"睡不着的史先生","can_delete":false,"product_type":"c1","uid":1192542,"ip_address":"","ucode":"E00E6C43F340D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/5e/4827557b.jpg","comment_is_top":false,"comment_ctime":1541640810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541640810","product_id":100017301,"comment_content":"老师，比如我想给数值最大为2^128次方的数据进行排序以及查找，我应该用什么样的排序算法和查找算法比较好，我本来想着用基数排序，但是前半部分和后半部分是分开存的，二分查找的时候就会很费劲，老师可以给我指点一下吗","like_count":0},{"had_liked":false,"id":37276,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1541515021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541515021","product_id":100017301,"comment_content":"二分查找: 对一个有序数组取中间数与目标值作比较，小于就往左区间做同样处理，大于在右区间二分。时间复杂度o(logn)。<br>二分查找局限性: <br>1. 必须是有序的数组，如果是链表的数据结构时间复杂度就会提高；<br>2. 数据规模不能太小，否则顺序查找就够了，数据规模也不能太大，数组是内存连续的，可能内存中没有这么大的连续空间了；<br>3. 动态集合不适合二分查找，即经常插入删除需要重新排序，如果是静态数据，一次排序多次二分查找可以均摊下时间。","like_count":0},{"had_liked":false,"id":36551,"user_name":"头晕的小骚年","can_delete":false,"product_type":"c1","uid":1234200,"ip_address":"","ucode":"EDA4B89BAA33F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/18/7f3b1af2.jpg","comment_is_top":false,"comment_ctime":1541148759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541148759","product_id":100017301,"comment_content":"我也贴一下代码。^_^<br>&#47;***<br>\t * 返回data的平方根，精确到小数点6位<br>\t * @param data<br>\t * @return<br>\t *&#47;<br>\tpublic static double getSquareRoot(int data){<br>\t\tif(data &lt; 0){<br>\t\t\treturn -1;<br>\t\t}<br>\t\tdouble low = 0.0;<br>\t\tdouble high = data;<br>\t\tdouble mid = 0.0;<br>\t\twhile(isNumOfDigLessThenInput(mid, 6) ){<br>\t\t\tmid = low + ((high - low) &#47; 2); <br>\t\t\tif(data == mid*mid){<br>\t\t\t\treturn mid;<br>\t\t\t}else if(data &lt; mid*mid){<br>\t\t\t\thigh = mid;<br>\t\t\t}else{<br>\t\t\t\tlow = mid;<br>\t\t\t}<br>\t\t}<br>\t\treturn mid;<br>\t}<br>\t<br>\tprivate static boolean isNumOfDigLessThenInput(double data,int num){<br>\t\tString dataStr = String.valueOf(data);<br>\t\tint index = dataStr.indexOf(&quot;.&quot;);<br>\t\tif(index == -1){<br>\t\t\treturn true;<br>\t\t}<br>\t\tint numofDig = dataStr.length() - index;<br>\t\treturn numofDig &lt;= 6;<br>\t}","like_count":0},{"had_liked":false,"id":36506,"user_name":"seriousty","can_delete":false,"product_type":"c1","uid":1193803,"ip_address":"","ucode":"E32B1724BFAC5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/4b/54c565b2.jpg","comment_is_top":false,"comment_ctime":1541135353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541135353","product_id":100017301,"comment_content":"老师您好，学生有个小问题比较困惑：<br>在第12课时，如何查找数组n中的第k大元素，根据每次遍历的元素和（等比求和）相加，求得时间复杂度为2n+1。<br>现在在二分查找时，时间复杂度却是按照k次来计算，为logn？<br>学生的疑问就是，为什么同样是求时间复杂度，计算公式也一样，一个是取元素和，一个是去k？","like_count":0},{"had_liked":false,"id":36252,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1540996242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540996242","product_id":100017301,"comment_content":"# Python 实现，二分思想求解 a 的平方根，误差 1e-6<br>a = 19990.0<br>low = 0.0<br>high = a<br><br>i=0;<br>while low&lt;=high:<br>    mid = low + (high - low)&#47;2.0<br>    i = i+1<br>    print(&quot;次数%s %s %s&quot; % (i, mid, pow(mid,2)))<br>    if abs(a - pow(mid,2)) &lt;= 1e-6:<br>        break<br>    elif a - pow(mid,2) &gt; 1e-6:<br>        low = mid + 1e-6<br>    else:<br>        high = mid - 1e-6","like_count":0},{"had_liked":false,"id":36076,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1540919838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540919838","product_id":100017301,"comment_content":"二分查找，依赖顺序表结构，要求数据有序，数据量不能过大也不宜过小。这种折半查找的方式，时间复杂度为 O(logn) 。<br><br>二分思想求解某个数 a 的平方根<br><br>low = 0;<br>high = a;<br><br>mid = low + ((high - low)&gt;&gt;1);<br>if ( abs(10 - mid^2) &lt;= e-6 ) {<br>    return mid;<br>} else if (  10 - mid^2 &gt; e-6 ) {<br>    low = mid + e-6;<br>} else {<br>    high = mid - e-6;<br>}","like_count":0},{"had_liked":false,"id":35842,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1540820982,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540820982","product_id":100017301,"comment_content":"关于第一个问题 <br>假设 要求的数为 n  创建一个数组 长度 为n*100k   放的值 从 0.000001 ~ n.000000<br>然后从数组中通过二分查找的方式找值  如果  arr[i]*arr[i] 保存六位小数 的积 四舍五入 ==n<br>这个数就是 n的开平方  大于  小于就是按照二分查找来查询了","like_count":0},{"had_liked":false,"id":35734,"user_name":"yswang","can_delete":false,"product_type":"c1","uid":1023688,"ip_address":"","ucode":"B9CB98838B215C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/c8/d261f700.jpg","comment_is_top":false,"comment_ctime":1540778506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540778506","product_id":100017301,"comment_content":"对于mid计算溢出风险，jdk的二分查找使用 (low + high) &gt;&gt;&gt; 1 来计算的，其实jdk的 low + high 也是会溢出的，只是它采用强制无符号右移来纠正。感觉还是老师的 low + ((high-low)&gt;&gt;1) 更好，呵呵。","like_count":0},{"had_liked":false,"id":35657,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1540732063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540732063","product_id":100017301,"comment_content":"求平方根，每次除2保留六位有效数字，如果它的平方大于该数则折半小的一部分，否则折半大的一部分","like_count":0},{"had_liked":false,"id":35178,"user_name":"maple","can_delete":false,"product_type":"c1","uid":1247040,"ip_address":"","ucode":"D9D2E4B36E9DD2","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/40/ef190cf2.jpg","comment_is_top":false,"comment_ctime":1540448126,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540448126","product_id":100017301,"comment_content":"    public static void main(String[] args) {<br>        int n = 3;<br>        System.out.println(sq(n, 1, (n + 1f) &#47; 2));<br>    }<br><br>    &#47;&#47; 求平方根<br>    public static float sq(int n, float l, float r) {<br>        if (l &gt; r) {<br>            return r;<br>        }<br><br>        float m = l + ((r - l) &#47; 2);<br>        if (m * m &gt; n) {<br>            return sq(n, l, m - 0.0000001f);<br>        } else if (m * m &lt; n) {<br>            return sq(n, m + 0.0000001f, r);<br>        } else {<br>            return m;<br>        }<br>    }<br>","like_count":0},{"had_liked":false,"id":35117,"user_name":"Pan^yu","can_delete":false,"product_type":"c1","uid":1235771,"ip_address":"","ucode":"28F983B58A9EC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/3b/e56ff0a9.jpg","comment_is_top":false,"comment_ctime":1540430260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540430260","product_id":100017301,"comment_content":"链表的时间负责度为<br>O(logn)","like_count":0},{"had_liked":false,"id":35078,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1540395773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540395773","product_id":100017301,"comment_content":"我觉得还是使用while start + 1 &lt; end这样作为循环条件比较好，直接就可以避免死循环。只不过在循环后还要判断[start, end]这个两端点哪个与target相同","like_count":0},{"had_liked":false,"id":35061,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1540392304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540392304","product_id":100017301,"comment_content":"二分法查找 随机访问 顺序表 连续存储空间  节省内存","like_count":0},{"had_liked":false,"id":35033,"user_name":"牵手约定","can_delete":false,"product_type":"c1","uid":1249461,"ip_address":"","ucode":"01AF328FDDD38C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/b5/0813608c.jpg","comment_is_top":false,"comment_ctime":1540385523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540385523","product_id":100017301,"comment_content":"这一节比较好理解一点","like_count":0},{"had_liked":false,"id":35006,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1540380337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540380337","product_id":100017301,"comment_content":"二分查找使用特点:<br>1.数据规模够大，且不能过大。因为使用数组连续内存的方式存储数据。会造成需要的连续内存过大，可能会造成申请内存不足。<br>2.待查找数据已排序。因为是通过类似二分法那样折半对比，不是有序会出错。<br>3.退出条件是 low&lt;=high , 求mid是 low+( high-low)&#47;2，防止(low+ high)&#47;2溢出。","like_count":0},{"had_liked":false,"id":34962,"user_name":"Harry","can_delete":false,"product_type":"c1","uid":1238524,"ip_address":"","ucode":"EA6550F9EE0B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/fc/28b51788.jpg","comment_is_top":false,"comment_ctime":1540370748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540370748","product_id":100017301,"comment_content":"二分查找mid = (low+high)&#47;2<br>由于low+high可能越界，建议优化<br>&gt;&gt; mid = low+(high-low)&#47;2<br>&gt;&gt; mid = low+((high-low)&gt;&gt;1)","like_count":0},{"had_liked":false,"id":34947,"user_name":"一点点","can_delete":false,"product_type":"c1","uid":1251656,"ip_address":"","ucode":"8CA17A9404662D","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/48/dca1789f.jpg","comment_is_top":false,"comment_ctime":1540366526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540366526","product_id":100017301,"comment_content":"有序链表时间复杂度我是这么算的，等于查找的次数+每次查找需要遍历的链表长度&#47;2<br>即k+n&#47;2+n&#47;4+..+n&#47;2^k（k=logn，为查找的次数） 推算后为logn+n-1所以时间复杂度为O(n)","like_count":0},{"had_liked":false,"id":34945,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1540365105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540365105","product_id":100017301,"comment_content":"用 (a+b)的平方展开公式把数字分为前4位和后3位，然后再分别用2分查找。","like_count":0},{"had_liked":false,"id":34911,"user_name":"三忌","can_delete":false,"product_type":"c1","uid":1235739,"ip_address":"","ucode":"3533C304CB8A6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/1b/999ae851.jpg","comment_is_top":false,"comment_ctime":1540352005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540352005","product_id":100017301,"comment_content":"def bin_search(arrs, val):<br>    &#39;&#39;&#39;<br>    二分查找<br>    &#39;&#39;&#39;<br>    return bin_serach_inner(arrs, 0, len(arrs) - 1, val)<br><br><br>def bin_serach_inner(arrs, low, high, value):<br>    if low &gt; high: return -1<br>    mid = low + ((high - low) &gt;&gt; 1)<br>    if arrs[mid] == value:<br>        return mid<br>    elif arrs[mid] &lt; value:<br>        return bin_serach_inner(arrs, mid + 1, high, value)<br>    else:<br>        return bin_serach_inner(arrs, low, mid - 1, value)","like_count":0},{"had_liked":false,"id":34904,"user_name":"冯剑","can_delete":false,"product_type":"c1","uid":1180833,"ip_address":"","ucode":"C22CAC2021A485","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/a1/99aca569.jpg","comment_is_top":false,"comment_ctime":1540350191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540350191","product_id":100017301,"comment_content":"public class Main {<br><br>    public static void main(String[] args) {<br><br>        int value = 120;<br>        float low = 1f;<br>        float high = (1.000000f * value) &#47; 2;<br>        System.out.println(getSquaerRoot(value, low, high));<br>    }<br><br>    &#47;&#47;如何编程实现“求一个数的平方根”？要求精确到小数点后 6 位<br><br>    public static float getSquaerRoot(int value, float low, float high) {<br>        float mid = low + ((high - low) &#47; 2);<br>        if (Math.abs(value - mid * mid) &lt; 0.00001F) {<br>            return mid;<br>        } else if (mid * mid &lt; value) {<br>            return getSquaerRoot(value, mid, high);<br>        } else {<br>            return getSquaerRoot(value, low, mid);<br>        }<br>    }<br><br>}","like_count":0},{"had_liked":false,"id":34903,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1540350028,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540350028","product_id":100017301,"comment_content":"第二题nlogn，需要logn次二分查找但每次遍历low和high的时候需要n次，所以是nlogn","like_count":0},{"had_liked":false,"id":34891,"user_name":"一念逍遥、","can_delete":false,"product_type":"c1","uid":1136890,"ip_address":"","ucode":"827A4447D70798","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/fa/6f221fbc.jpg","comment_is_top":false,"comment_ctime":1540346046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540346046","product_id":100017301,"comment_content":"2.时间复杂度是O(（1&#47;2+1&#47;4+1&#47;8+...1&#47;2∧n）N)=O(N)，主要操作浪费在移动指针上，比较中点元素大小倒无所谓了。","like_count":0},{"had_liked":false,"id":34885,"user_name":"yaya","can_delete":false,"product_type":"c1","uid":1233856,"ip_address":"","ucode":"8C7FAC8F828BA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/c0/d38daa2d.jpg","comment_is_top":false,"comment_ctime":1540345362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540345362","product_id":100017301,"comment_content":"1.不考虑浮点数计算复杂度的话，在0到 n&#47;2的区间上用二分<br>2.时间复杂度为 ologn，虽然顺序访问的复杂度是o(n)，但是没有二分必须比顺序小的规则啊","like_count":0},{"had_liked":false,"id":34881,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":false,"comment_ctime":1540344891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540344891","product_id":100017301,"comment_content":"想了一下，空间复杂度不为1，因为需要开辟遍历数组，n小于等于6位时，最大的应该是小数后六位那个连续数组，n大于6位时最大遍历的为n","like_count":0},{"had_liked":false,"id":34880,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1540344749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540344749","product_id":100017301,"comment_content":"有序链表逐个查找复杂度也就 O(n)，二分查找怎么可能算出来 nlog(n)……","like_count":0},{"had_liked":false,"id":34868,"user_name":"有朋自远方来","can_delete":false,"product_type":"c1","uid":1083600,"ip_address":"","ucode":"23A12829DEB119","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/d0/6e75f766.jpg","comment_is_top":false,"comment_ctime":1540343175,"is_pvip":false,"replies":[{"id":"12502","content":"leetcode","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394636,"ip_address":"","comment_id":34868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540343175","product_id":100017301,"comment_content":"需要面试<br>准备从头看到尾<br>那么问题来了，算法耍题选哪家？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427368,"discussion_content":"leetcode","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34866,"user_name":"管理员","can_delete":false,"product_type":"c1","uid":1123560,"ip_address":"","ucode":"16F8E4941A2A4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/e8/3d3bdcc8.jpg","comment_is_top":false,"comment_ctime":1540342983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540342983","product_id":100017301,"comment_content":"求平方根，将所有可能的值增量0.000001存数组里，用2分法查找。比较条件修改为该数的的2次方==需要开平方的数。","like_count":0},{"had_liked":false,"id":34864,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1540342810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540342810","product_id":100017301,"comment_content":"1.才用二分法，在选定上下界时需要考虑这个数大于0和小于0两种情况。<br>2.nlogn","like_count":0}]}