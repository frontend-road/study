{"id":252605,"title":"15 | 面向对象之继承：继承是代码复用的合理方式吗？","content":"<p>你好！我是郑晔。</p><p>上一讲，我们讨论了面向对象的第一个特点：封装。这一讲，我们继续来看面向对象的第二个特点：继承。首先，你对继承的第一印象是什么呢？</p><p>说到继承，很多讲面向对象的教材一般会这么讲，给你画一棵树，父类是根节点，而子类是叶子节点，显然，一个父类可以有许多个子类。</p><p>父类是干什么用的呢？就是把一些公共代码放进去，之后在实现其他子类时，可以少写一些代码。讲程序库的时候，我们说过，设计的职责之一就是消除重复，代码复用。所以，在很多人的印象中，继承就是一种代码复用的方式。</p><p>如果我们把继承理解成一种代码复用方式，更多地是站在子类的角度向上看。在客户端代码使用的时候，面对的是子类，这种继承叫实现继承：</p><pre><code>Child object = new Child();\n</code></pre><p>其实，还有一种看待继承的角度，就是从父类的角度往下看，客户端使用的时候，面对的是父类，这种继承叫接口继承：</p><pre><code>Parent object = new Child();\n</code></pre><p>不过，接口继承更多是与多态相关，我们暂且放一放，留到下一讲再来讨论。这一讲，我们还是主要来说说实现继承。其实，实现继承并不是一种好的做法。</p><p>也就是说，<strong>把实现继承当作一种代码复用的方式，并不是一种值得鼓励的做法</strong>。一方面，继承是很宝贵的，尤其是Java这种单继承的程序设计语言。每个类只能有一个父类，一旦继承的位置被实现继承占据了，再想做接口继承就很难了。</p><!-- [[[read_end]]] --><p>另一方面，实现继承通常也是一种受程序设计语言局限的思维方式，有很多程序设计语言，即使不使用继承，也有自己的代码复用方式。</p><p>可能这么说你还不太理解，接下来，我就用一个例子来帮你更好地理解继承。</p><h2>代码复用</h2><p>假设，我要做一个产品报表服务，其中有个服务是要查询产品信息，这个查询过程是通用的，别的服务也可以用，所以，我把它放到父类里面。这就是代码复用的做法，代码用Java写出来是这样的：</p><pre><code>class BaseService {\n  // 获取相应的产品信息\n  protected List&lt;Product&gt; getProducts(List&lt;String&gt; product) {\n    ...\n  }\n}\n\n// 生成报表服务\nclass ReportService extends BaseService {\n  public void report() {\n    List&lt;Product&gt; product = getProduct(...);\n    // 生成报表\n    ...\n  }\n}\n</code></pre><p>如果采用Ruby的mixin机制，我们还可以这样实现，先定义一个模块（module）：</p><pre><code>module ProductFetcher\n  # 获取相应的产品信息\n  def getProducts(products)\n    ...\n  end \nend\n</code></pre><p>然后，在自己的类定义中，将它包含（include）进来：</p><pre><code># 生成报表服务\nclass ReportService\n  include ProductFetcher\n  \n  def report\n    products = getProducts(...)\n    # 生成报表\n    ..\n  end\nend\n</code></pre><p>在这个例子中，ReportService并没有继承任何类，获取产品信息的代码也是可以复用的，也就是这里的ProductFetcher这个模块。这样一来，如果我需要有一个获取产品信息的地方，它不必非得是一个什么服务，无需继承任何类。</p><p>这是Ruby的做法，类似的语言特性还有Scala里的trait。</p><p>在C++中，虽然语法并没有严格地区分实现继承，但《Effective C++》这本行业的名著，给出了一个实用的建议：实现继承采用私有继承的方式实现：</p><pre><code>class ReportService: private ProductFetcher {\n  ...\n}\n</code></pre><p>请注意，在这个实现里，我的私有继承类名是ProductFetcher。是的，它并不需要和这个报表服务有什么直接的关系，使用私有继承，就是为了复用它的代码。</p><p>从前面的分析中，我们也不难看出，获取产品信息和生成报表其实是两件事，只是因为在生成报表的过程中，需要获取产品信息，所以，它有了一个基类。</p><p>其实，在Java里面，我们不用继承的方式也能实现，也许你已经想到了，代码可以写成这样：</p><pre><code>class ProductFetcher {\n  // 获取相应的产品信息\n  public List&lt;Product&gt; getProducts(List&lt;String&gt; product) {\n    ...\n  }\n}\n\n// 生成报表服务\nclass ReportService {\n  private ProductFetcher fetcher;\n  \n  public void report() {\n    List&lt;Product&gt; product = fetcher.getProducts(...);\n    // 生成报表\n    ...\n  }\n}\n</code></pre><p>这种实现方案叫作组合，也就是说ReportService里组合进一个ProductFetcher。在设计上，有一个通用的原则叫做：<strong>组合优于继承</strong>。也就是说，如果一个方案既能用组合实现，也能用继承实现，那就选择用组合实现。</p><p>好，到这里你已经清楚了，代码复用并不是使用继承的好场景。所以，<strong>要写继承的代码时，先问自己，这是接口继承，还是实现继承？如果是实现继承，那是不是可以写成组合？</strong></p><h2>面向组合编程</h2><p>之所以可以用组合的方式实现，本质的原因是，获取产品信息和生成报表服务本来就是两件事。还记得我们在<a href=\"https://time.geekbang.org/column/article/241094\">第3讲</a>里讲过的“分离关注点”吗？如果你能看出它们是两件事，就不会把它们放到一起了。</p><p>我还讲过，分解是设计的第一步，而且分解的粒度越小越好。当你可以分解出来多个关注点，每一个关注点就应该是一个独立的模块。最终的<strong>类是由这些一个一个的小模块组合而成，这种编程的方式就是面向组合编程</strong>。它相当于换了一个视角：类是由多个小模块组合而成。</p><p>还以前面的报表服务为例，如果使用Java，按照面向组合的思路写出来，大概是下面这样的。其中，为了增加复杂度，我增加了一个报表生成器（ReportGenerator），在获取产品信息之后，还要生成报表：</p><pre><code>class ReportService {\n  private ProductFetcher fetcher;\n  private ReportGenerator generator;\n  \n  public void report() {\n    List&lt;Product&gt; product = fetcher.getProducts(...);\n    // 生成报表\n    generator.generate(product);\n  }\n}\n</code></pre><p>请注意，我在前面的表述中，故意用了模块这个词，而不是类。因为ProductFetcher和ReportGenerator只是因为我们用的是Java，才写成了类；如果用Ruby，它们的表现形式就会是一个module；而在Scala里，就会成为一个trait。我们再用Ruby 示意一下：</p><pre><code>class ReportService\n  include ProductFetcher\n  include ReportGenerator\n  \n  def report\n    products = getProducts(...)\n    # 生成报表\n    generateReport(products)\n  end\nend\n</code></pre><p>而使用C++的话，表现形式则会是私有继承：</p><pre><code>class ReportService: private ProductFetcher, private ReportGenerator {\n  ... \n}\n</code></pre><p>C++本身支持宏定义，所以，我们可以自定义一些宏，将这些不同的概念区分开来：</p><pre><code>#define MODULE(module) class module\n#define INCLUDE(module) private module\n</code></pre><p>上面的类定义就可以变成更有表达性的写法：</p><pre><code>MODULE(ProductFetcher) {\n  ...\n}\n\nMODULE(ReportGenerator) {\n  ...\n}\n\nclass ReportService: \n  INCLUDE(ProductFetcher), \n  INCLUDE(ReportGenerator) {\n  ...\n}\n</code></pre><p>我有一个C++的高手朋友，把这种做法称之为“<a href=\"https://www.jianshu.com/p/a830d2261392\">小类大对象</a>”，这里面的小类就是一个一个的模块，而最终的大对象是最终组合出来的类生成的对象。</p><p>关于面向对象，有一点我们还没有说，就是<strong>面向对象面向的是“对象”，不是类</strong>。很多程序员习惯把对象理解成类的附属品，但在Alan Kay的理解中，对象本身就是一个独立的个体。所以，有些程序设计语言可以直接支持在对象上进行操作。</p><p>还是前面的例子，我想给报表服务增加一个接口，对产品信息做一下处理。用Ruby写出来会是这样：</p><pre><code>module ProductEnhancer\n  def enhance\n    # 处理一下产品信息\n  end\nend\n\nservice = ReportService.new\n# 增加了 ProductEnhancer\nservice.extend(ProductEnhancer)\n\n# 可以调用 enhance 方法\nservice.enhance\n</code></pre><p>这样的处理只会影响这里的一个对象，而同样是这个ReportService的其他实例，则完全不受影响。这样做的好处是，我们不必写那么多类，而是根据需要在程序运行时组合出不同的对象。</p><p>在这里，相信你再一次意识到了要学习多种程序设计语言的重要性。Java只有类这种组织方式，所以，很多有差异的概念只能用类这一个概念表示出来，思维就会受到限制，而不同的语言则提供了不同的表现形式，让概念更加清晰。</p><p>前面只是讲了面向组合编程在思考方式的转变，下面我们再来看设计上的差异。举个例子，我们有个字体类（Font），现在的需求是，字体能够加粗（Bold）、能够有下划线（Underline）、还要支持斜体（Italic），而且这些能力之间是任意组合的。</p><p>如果采用继承的方式，那就要有8 个类：</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/0a/a3cf4c150e4fcbb98d4d7b6212e2700a.jpg?wh=2284*1285\" alt=\"\"></p><p>而采用组合的方式，我们的字体类（Font）只要有三个独立的维度，也就是是否加粗（Bold）、是否有下划线（Underline）、是否是斜体（Italic）。这还不是终局，如果再来一种其他的要求，由3种要求变成4种，采用继承的方式，类的数量就会膨胀到16个类，而组合的方式只需要再增加一个维度就好。我们把一个M*N的问题，通过设计转变成了M+N的问题，复杂度的差别一望便知。</p><p>虽然我们一直在说，Java在面向组合编程方面能力比较弱，但Java社区也在尝试不同的方式。早期的尝试有<a href=\"https://www.infoq.cn/article/2007/11/qi4j-intro\">Qi4j</a>，后来Java 8加入了default method，在一定程度上也可以支持面向组合的编程。这里我们只是讲了面向对象社区在组合方面的探索，后面讲函数式编程时，还会讲到函数式编程在这方面的探索。</p><h2>总结时刻</h2><p>今天，我们学习了面向对象的第二个特点：继承。继承分为两种，实现继承和接口继承。实现继承是站在子类的视角看问题，接口继承则是站在父类的视角。</p><p>很多程序员把实现继承当作了一种代码复用的方式，但实际上，实现继承并不是一个好的代码复用的方式，之所以这种方式很常见，很大程度上是受了语言的局限。</p><p>Ruby的mixin机制，Scala提供的trait以及C++提供的私有继承都是代码复用的方式。即便只使用Java，也可以通过组合而非继承的方式进行代码复用。</p><p>今天我们还讲到这些复用方式背后的编程思想：面向组合编程。它给我们提供了一个不同的视角，但支撑面向组合编程的是分离关注点。将不同的关注点分离出来，每一个关注点成为一个模块，在需要的时候组装起来。面向组合编程，在设计本身上有很多优秀的地方，可以降低程序的复杂度，更是思维上的转变。</p><p>现在你已经知道了，在继承树上从下往上看，并不是一个好的思考方式，那从上往下看呢？下一讲，我们就来讲讲继承的另外一个方向，接口继承，也就是面向对象的第三个特点：多态。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>组合优于继承</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/a0/67e0cbd436dd50a8933b251e4c97a4a0.jpg?wh=2284*972\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你去了解一下一种叫<a href=\"https://en.wikipedia.org/wiki/Data,_context_and_interaction\">DCI （Data，Context和 Interaction）</a><br>\n的编程思想，结合今天的课程，分享一下你对DCI的理解。欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"14 | 面向对象之封装：怎样的封装才算是高内聚？","id":252598},"right":{"article_title":"16 | 面向对象之多态：为什么“稀疏平常”的多态，是软件设计的大杀器？","id":252612}},"comments":[{"had_liked":false,"id":230495,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1593400392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44543073352","product_id":100052601,"comment_content":"1.链接打不开，应该要翻墙，回家再看。<br>2.DCI和小类大对象的理念，在实现手法上很像。<br>3.先说看好的点,DCI模式在单一职责上能做到更好（ddd的充血模型很容易肿成上帝对象）。一个data在不同的context具有不同的interface方法，这样的划分，在隔离变化（调用方依赖抽象接口实现功能）和复杂性隔离（只关心当前context需要关心的行为）都又不错的效果。<br>4.再说不看好的，DCI的数据和行为分离不敢苟同。是先有行为再有数据还是先有数据再有行为，这是一个问题。但可以确定的是，行为和数据的关联是密切的，以至于傻傻分不清楚。所以我还是偏向于，抽象模型时，行为和数据应该是一个整体。<br><br>5.总结，DCI还是扩展了我的认知。DDD在封装充血模型时有一个很蛋疼的点，为了复用部分属性和行为，而为充血模型加入了新的属性和行为。多次迭代后，充血模型就很容易肿大，边界模糊（涵盖的面广了也就模糊了）。而DCI和小类大对象的思考方式很好的做了补充。大致都是在特定的context里，用不同的小类组成特定的领域对象，既能做到复用也能隔离复杂性。<br>6.C++有多继承的方式来实现这种组合模式。但java语法特性上就不支持。那么无论是小类大对象还是DCI都无法用合适的代码结构来描述（我认为，哪怕用回调函数+接口实现的写法，也不能很好描述这个语义）。栏主觉得java该怎么办?","like_count":10},{"had_liked":false,"id":230953,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1593530132,"is_pvip":false,"replies":[{"id":"85298","content":"你的理解是对的，因为在 Java&#47;C++这类语言中只有类这一个概念，所以，我们不得不用类表示所有的东西，之所以，要讲不同语言的做法，就是希望大家知道，自己写代码时，这个“类”扮演了什么角色。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593559593,"ip_address":"","comment_id":230953,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40248235796","product_id":100052601,"comment_content":"老师，我有个概念上的疑惑，分离的关注点是一个个独立的模块，然后由一个个小模块组合出类，这个类就指的是“大对象”吗？<br>上面的一个个小模块，其实也是类，只不过是小类，对于C++就是class的实现手法，Ruby可以是module的实现手法，是这样的吗？<br><br>DCI关注的是数据在context中的交互行为，我的理解大概就是数据在不同的context，扮演不同的角色，这些角色的属性，是数据内组合上下文需要的特性实现的。","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500089,"discussion_content":"你的理解是对的，因为在 Java/C++这类语言中只有类这一个概念，所以，我们不得不用类表示所有的东西，之所以，要讲不同语言的做法，就是希望大家知道，自己写代码时，这个“类”扮演了什么角色。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593559593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238253,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1596103028,"is_pvip":false,"replies":[{"id":"88921","content":"很好的补充。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597056533,"ip_address":"","comment_id":238253,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23070939508","product_id":100052601,"comment_content":"DCI是对象的Data数据, 对象使用的Context场景, 对象的Interaction交互行为三者简称， DCI是一种特别关注行为的模式(可以对应GoF行为模式)，而MVC模式是一种结构性模式，DCI可以使用演员场景表演来解释，某个实体在某个场景中扮演包公，实施包公升堂行为；典型事例是银行帐户转帐，转帐这个行为按照DDD很难划分到帐号对象中，它是跨两个帐号实例之间的行为，我们可以看成是帐号这个实体(PPT，见四色原型)在转帐这个场景，实施了钞票划转行为，这种新的角度更加贴近需求和自然，结合四色原型 DDD和DCI可以一步到位将需求更快地分解落实为可运行的代码，是国际上软件领域的一场革命。  摘自 https:&#47;&#47;www.jdon.com&#47;dci.html","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502686,"discussion_content":"很好的补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597056533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409565,"discussion_content":"四色原型～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635469673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230421,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1593383494,"is_pvip":false,"replies":[{"id":"85055","content":"Java 的类引用可以表达很多概念，属性和组合都是通过同样的概念表示出来的。好处就是简单，坏处就不清楚。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593403176,"ip_address":"","comment_id":230421,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23068219974","product_id":100052601,"comment_content":"所谓组合就是类的引用吧，面向对象编程时，如果不是继承关系，那大概率就是引用类来实现功能的组合吧","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499881,"discussion_content":"Java 的类引用可以表达很多概念，属性和组合都是通过同样的概念表示出来的。好处就是简单，坏处就不清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593403176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287136,"discussion_content":"组合肯定要引用，引用不一定是组合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593388522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232299,"user_name":"jg4igianshu","can_delete":false,"product_type":"c1","uid":1059873,"ip_address":"","ucode":"DE1001BF2D383E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsia5hqVlTLn17lUBwSpSUzraib7MSH3gOUNWOx8qUwpz3Lp6gFtkIibOMUAouyMGj5RIeTcePUfNkw/132","comment_is_top":false,"comment_ctime":1593948556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18773817740","product_id":100052601,"comment_content":"dci和mvc的模式是从看问题的角度来做系统组合。<br>mvc是从数据传播角度来做组合，基于controller来组合model和view<br>dci是从使用场景角度来做组合，基于context行为来操作data","like_count":4},{"had_liked":false,"id":232092,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1593853311,"is_pvip":true,"replies":[{"id":"85705","content":"先看看现代程序设计语言的设计，比如，Go和Rust。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593935281,"ip_address":"","comment_id":232092,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18773722495","product_id":100052601,"comment_content":"组合优于继承，可以使用继承的地方几乎都可以用组合替换的，那是不是说继承这个特性在现代编程语言中没有什么作用了(接口继承实力上就是多态)","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500507,"discussion_content":"先看看现代程序设计语言的设计，比如，Go和Rust。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593935281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254792,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603187479,"is_pvip":false,"replies":[{"id":"100657","content":"属性就是一个类固有的性质，就像一个人的身高体重；组合讲的是与其它部分的关系，比如，车有两个轮胎。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612431825,"ip_address":"","comment_id":254792,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14488089367","product_id":100052601,"comment_content":"看到老师的回复：Java 的类引用可以表达很多概念，属性和组合都是通过同样的概念表示出来的。好处就是简单，坏处就不清楚。<br><br>请问老师，属性和组合有什么区别呢，后面的文章中会有提到吗","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507513,"discussion_content":"属性就是一个类固有的性质，就像一个人的身高体重；组合讲的是与其它部分的关系，比如，车有两个轮胎。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612431825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2357458,"avatar":"https://static001.geekbang.org/account/avatar/00/23/f8/d2/494c182a.jpg","nickname":"愿凌飞","note":"","ucode":"E80CC09C7D528D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571242,"discussion_content":"属性用于描述，组合用于拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652152882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234666,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1594770136,"is_pvip":false,"replies":[{"id":"86720","content":"这里的小类大对象是用 C++的方式描述的，每个类是小的，简言之代码都不多，最终形成的对象是个大的，因为它把所有的小类组合了起来。在运行时，用到的是对象，而设计中，你用到的是接口，是类层面的东西。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594864170,"ip_address":"","comment_id":234666,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479672024","product_id":100052601,"comment_content":"请问老师，组合我是理解的了。但文中提到的“小类大对象”中的大对象为什么强调是对象呢？为什么不是大类呢？还有说到这里时，又强调了面向对象而不是面向类，这又怎么理解其中在设计思想上的差异呢？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501455,"discussion_content":"这里的小类大对象是用 C++的方式描述的，每个类是小的，简言之代码都不多，最终形成的对象是个大的，因为它把所有的小类组合了起来。在运行时，用到的是对象，而设计中，你用到的是接口，是类层面的东西。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594864170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231026,"user_name":"Reason","can_delete":false,"product_type":"c1","uid":1512618,"ip_address":"","ucode":"719EA4D5E5BC5A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epuvKVmiaiaYDRFVRX3rGwSS4T1jibEKibqZYQjxob03ibdmguKzRsftAssCTDVWrdXL7ojNagaIdjIvzA/132","comment_is_top":false,"comment_ctime":1593567777,"is_pvip":false,"replies":[{"id":"85341","content":"是否能够快速学习一个新东西，就是程序员之间体现出差异的地方。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593574817,"ip_address":"","comment_id":231026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14478469665","product_id":100052601,"comment_content":"关于dci可参阅的代码案例太少了。了解起来找不到门。。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500124,"discussion_content":"是否能够快速学习一个新东西，就是程序员之间体现出差异的地方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593574817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230455,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1593393195,"is_pvip":false,"replies":[{"id":"85084","content":"很好的理解！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593409717,"ip_address":"","comment_id":230455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14478295083","product_id":100052601,"comment_content":"继承是面向对象的基本原则之一，但在编码实践中能用组合来实现尽量使用组合。<br>DCI也是一种编码规范，它是对面向对象编程的一种补充，其实核心思想也是关注点分离","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499899,"discussion_content":"很好的理解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593409717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308676,"user_name":"lanlyhs","can_delete":false,"product_type":"c1","uid":1002731,"ip_address":"","ucode":"C7FDAECE5A8494","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/eb/73b45431.jpg","comment_is_top":false,"comment_ctime":1629730105,"is_pvip":true,"replies":[{"id":"111753","content":"多谢分享","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629767455,"ip_address":"","comment_id":308676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10219664697","product_id":100052601,"comment_content":"这个高手的这一系列文章，我在刚入行的时候拜读过，看的云里雾里。上面这一篇文章「小类，大对象<br>」目前打不开了，我在 web.archive.org 中找到了一个历史，分享给大家，<br> https:&#47;&#47;web.archive.org&#47;web&#47;20200813165817if_&#47;https:&#47;&#47;www.jianshu.com&#47;p&#47;a830d2261392<br>","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525586,"discussion_content":"多谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629767455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276128,"user_name":"Geek_0315ca","can_delete":false,"product_type":"c1","uid":1810532,"ip_address":"","ucode":"675254A9FC25A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVAVOYIoohh3bCdgErne0VHtoPorcrtmOAR45rsWPmJsLkzlvqMulbRyv0Skj8JHajrA9bPia3Lxw/132","comment_is_top":false,"comment_ctime":1611803542,"is_pvip":false,"replies":[{"id":"100405","content":"这个总结的角度很好。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612090830,"ip_address":"","comment_id":276128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10201738134","product_id":100052601,"comment_content":"做设计最难的两点:1.是作抽象(找共性，文档中的系统模型，代码详细设计的接口);2是作分解(找特性，实现)。分解的目的就是将处理逻辑和数据的不同点突出出来，根据不同的差异将各种实现进行相应的组合，支持接口功能。分解做好了，代码重复性就降低了。关于分解可以从两个方面着手:1.数据角度;2.数据处理角度。至于这两个角度如何去在开发中落实，我目前还没有行成具体的解决模式，跟着课程继续往下走，看看有什么启发吧。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514608,"discussion_content":"这个总结的角度很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612090830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230450,"user_name":"Cc°°","can_delete":false,"product_type":"c1","uid":1149143,"ip_address":"","ucode":"6C88E8D2C4622D","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/d7/43cf7b60.jpg","comment_is_top":false,"comment_ctime":1593392688,"is_pvip":true,"replies":[{"id":"85083","content":"换了一个角度看，也是。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593409698,"ip_address":"","comment_id":230450,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183327280","product_id":100052601,"comment_content":"把一个 M*N 的问题，通过设计转变成了 M+N 的问题。<br>这个应该是把2^N问题变为了N的问题吧？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499896,"discussion_content":"换了一个角度看，也是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593409698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230422,"user_name":"Julien","can_delete":false,"product_type":"c1","uid":1204568,"ip_address":"","ucode":"2A3F0CF46B4034","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/58/7b078879.jpg","comment_is_top":false,"comment_ctime":1593385216,"is_pvip":false,"replies":[{"id":"85050","content":"你说的字段的组合方式吧，可以用。但如果有更有语义的表示方式，选择更好的表示方式是一个更好的选择。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593399697,"ip_address":"","comment_id":230422,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10183319808","product_id":100052601,"comment_content":"<br>MODULE(ProductFetcher) {<br>  ...<br>}<br><br>MODULE(ReportGenerator) {<br>  ...<br>}<br><br>class ReportService: <br>  INCLUDE(ProductFetcher), <br>  INCLUDE(ReportGenerator) {<br>  ...<br>}<br>这段代码，为什么不用组合呢？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499882,"discussion_content":"你说的字段的组合方式吧，可以用。但如果有更有语义的表示方式，选择更好的表示方式是一个更好的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593399697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287137,"discussion_content":"这只是C++的表现形式，道理是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593388678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278558,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1613056613,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5908023909","product_id":100052601,"comment_content":"设计模式中的桥接模式就是用组合的方式来解决一个类里多个维度都有变化，导致需要继承类的数量为笛卡尔积的问题吧","like_count":1,"discussions":[{"author":{"id":1024994,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/e2/5cb4f43f.jpg","nickname":"laolinshi","note":"","ucode":"269B879389D7D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559457,"discussion_content":"装饰器模式更加适用这个需要任意组合多个纬度实现不同功能的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648782843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358041,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1179432,"ip_address":"广东","ucode":"952AA9B2CD91CE","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/28/040f6f01.jpg","comment_is_top":false,"comment_ctime":1663842612,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663842612","product_id":100052601,"comment_content":"组合编程并不神奇，Service层调用Dao层时，多个dao组合完成一个功能。组合编程其实时普遍存在的，只是没有给他一个明确的名字而已。","like_count":0},{"had_liked":false,"id":356850,"user_name":"Tomie","can_delete":false,"product_type":"c1","uid":2370779,"ip_address":"上海","ucode":"3531EBA88C1EAB","user_header":"","comment_is_top":false,"comment_ctime":1662641466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662641466","product_id":100052601,"comment_content":"从父类角度，子类应该是会用他的属性和方法，方法是您说的接口吧，那属性子类不也会用？不是很理解","like_count":0},{"had_liked":false,"id":356849,"user_name":"Tomie","can_delete":false,"product_type":"c1","uid":2370779,"ip_address":"上海","ucode":"3531EBA88C1EAB","user_header":"","comment_is_top":false,"comment_ctime":1662641283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662641283","product_id":100052601,"comment_content":"老师，从父类角度出发，面向接口继承不是很懂？测试一枚，底子薄勿怪","like_count":0},{"had_liked":false,"id":345677,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652504386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652504386","product_id":100052601,"comment_content":"组合优于继承--记下来","like_count":0},{"had_liked":false,"id":344648,"user_name":"ubuntuMax","can_delete":false,"product_type":"c1","uid":2438569,"ip_address":"","ucode":"242CAEC0FD9C77","user_header":"https://static001.geekbang.org/account/avatar/00/25/35/a9/5f309b81.jpg","comment_is_top":false,"comment_ctime":1651709973,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651709973","product_id":100052601,"comment_content":"php里面也有trait，类似Ruby的mixin","like_count":0},{"had_liked":false,"id":299211,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1624514397,"is_pvip":false,"replies":[{"id":"109199","content":"当然不是😂","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1625810379,"ip_address":"","comment_id":299211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624514397","product_id":100052601,"comment_content":"这个c++高手朋友是不是你自己(斜眼笑)","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522365,"discussion_content":"当然不是😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625810379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296266,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1205777,"ip_address":"","ucode":"EB19F80070FE23","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/11/f7408e3e.jpg","comment_is_top":false,"comment_ctime":1622868495,"is_pvip":false,"replies":[{"id":"107557","content":"有一点启发就没白学","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1622975312,"ip_address":"","comment_id":296266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622868495","product_id":100052601,"comment_content":" 把一个 M*N 的问题，通过设计转变成了 M+N 的问题这个有启发","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521380,"discussion_content":"有一点启发就没白学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622975312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}