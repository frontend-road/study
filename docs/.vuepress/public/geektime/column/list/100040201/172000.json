{"id":172000,"title":"06丨数据库原理：为什么PrepareStatement性能更好更安全？","content":"<p>做应用开发的同学常常觉得数据库由DBA运维，自己会写SQL就可以了，数据库原理不需要学习。其实即使是写SQL也需要了解数据库原理，比如我们都知道，SQL的查询条件尽量包含索引字段，但是为什么呢？这样做有什么好处呢？你也许会说，使用索引进行查询速度快，但是为什么速度快呢？</p><p>此外，我们在Java程序中访问数据库的时候，有两种提交SQL语句的方式，一种是通过Statement直接提交SQL；另一种是先通过PrepareStatement预编译SQL，然后设置可变参数再提交执行。</p><p>Statement直接提交的方式如下：</p><pre><code>statement.executeUpdate(&quot;UPDATE Users SET stateus = 2 WHERE userID=233&quot;);\n</code></pre><p>PrepareStatement预编译的方式如下：</p><pre><code>PreparedStatement updateUser = con.prepareStatement(&quot;UPDATE Users SET stateus = ? WHERE userID = ?&quot;); \nupdateUser.setInt(1, 2); \nupdateUser.setInt(2,233); \nupdateUser.executeUpdate();\n</code></pre><p>看代码，似乎第一种方式更加简单，但是编程实践中，主要用第二种。使用MyBatis等ORM框架时，这些框架内部也是用第二种方式提交SQL。那为什么要舍简单而求复杂呢？</p><p>要回答上面这些问题，都需要了解数据库的原理，包括数据库的架构原理与数据库文件的存储原理。</p><h2>数据库架构与SQL执行过程</h2><p>我们先看看数据库架构原理与SQL执行过程。</p><p>关系数据库系统RDBMS有很多种，但是这些关系数据库的架构基本上差不多，包括支持SQL语法的Hadoop大数据仓库，也基本上都是相似的架构。一个SQL提交到数据库，经过连接器将SQL语句交给语法分析器，生成一个抽象语法树AST；AST经过语义分析与优化器，进行语义优化，使计算过程和需要获取的中间数据尽可能少，然后得到数据库执行计划；执行计划提交给具体的执行引擎进行计算，将结果通过连接器再返回给应用程序。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/fa/17/faec977f77e80f6d116e40735cf21e17.png?wh=1502*176\" alt=\"\"><br>\n应用程序提交SQL到数据库执行，首先需要建立与数据库的连接，数据库<strong>连接器</strong>会为每个连接请求分配一块专用的内存空间用于会话上下文管理。建立连接对数据库而言相对比较重，需要花费一定的时间，因此应用程序启动的时候，通常会初始化建立一些数据库连接放在连接池里，这样当处理外部请求执行SQL操作的时候，就不需要花费时间建立连接了。</p><p>这些连接一旦建立，不管是否有SQL执行，都会消耗一定的数据库内存资源，所以对于一个大规模互联网应用集群来说，如果启动了很多应用程序实例，这些程序每个都会和数据库建立若干个连接，即使不提交SQL到数据库执行，也就会对数据库产生很大的压力。</p><p>所以应用程序需要对数据库连接进行管理，一方面通过连接池对连接进行管理，空闲连接会被及时释放；另一方面微服务架构可以大大减少数据库连接，比如对于用户数据库来说，所有应用都需要连接到用户数据库，而如果划分一个用户微服务并独立部署一个比较小的集群，那么就只有这几个用户微服务实例需要连接用户数据库，需要建立的连接数量大大减少。</p><p>连接器收到SQL以后，会将SQL交给<strong>语法分析器</strong>进行处理，语法分析器工作比较简单机械，就是根据SQL语法规则生成对应的抽象语法树。</p><p>如果SQL语句中存在语法错误，那么在生成语法树的时候就会报错，比如，下面这个例子中SQL语句里的where拼写错误，MySQL就会报错。</p><pre><code>mysql&gt; explain select * from users whee id = 1;\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'id = 1' at line 1\n</code></pre><p>因为语法错误是在构建抽象语法树的时候发现的，所以能够知道，错误是发生在哪里。上面例子中，虽然语法分析器不能知道whee是一个语法拼写错误，因为这个whee可能是表名users的别名，但是语法分析器在构建语法树到了<code>id=1</code>这里的时候就出错了，所以返回的报错信息可以提示，在<code>'id = 1'</code>附近有语法错误。</p><p>语法分析器生成的抽象语法树并不仅仅可以用来做语法校验，它也是下一步处理的基础。语义分析与优化器会对抽象语法树进一步做语义优化，也就是在保证SQL语义不变的前提下，进行语义等价转换，使最后的计算量和中间过程数据量尽可能小。</p><p>比如对于这样一个SQL语句，其语义是表示从users表中取出每一个id和order表当前记录比较，是否相等。</p><pre><code>select f.id from orders f where f.user_id = (select id from users);\n</code></pre><p>事实上，这个SQL语句在语义上等价于下面这条SQL语句，表间计算关系更加清晰。</p><pre><code>select f.id from orders f join users u on f.user_id = u.id;\n</code></pre><p>SQL语义分析与优化器就是要将各种复杂嵌套的SQL进行语义等价转化，得到有限几种关系代数计算结构，并利用索引等信息进一步进行优化。可以说，各个数据库最黑科技的部分就是在优化这里了。</p><p>语义分析与优化器最后会输出一个执行计划，由执行引擎完成数据查询或者更新。MySQL执行计划的例子如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/55/f8dd0ab58f327832485bb412b2ca1b55.png?wh=1698*166\" alt=\"\"><br>\n执行引擎是可替换的，只要能够执行这个执行计划就可以了。所以MySQL有多种执行引擎（也叫存储引擎）可以选择，缺省的是InnoDB，此外还有MyISAM、Memory等，我们可以在创建表的时候指定存储引擎。大数据仓库Hive也是这样的架构，Hive输出的执行计划可以在Hadoop上执行。</p><h2>使用PrepareStatement执行SQL的好处</h2><p>好了，了解了数据库架构与SQL执行过程之后，让我们回到开头的问题，应用程序为什么应该使用PrepareStatement执行SQL？</p><p>这样做主要有两个好处。</p><p>一个是PrepareStatement会预先提交带占位符的SQL到数据库进行预处理，提前生成执行计划，当给定占位符参数，真正执行SQL的时候，执行引擎可以直接执行，效率更好一点。</p><p>另一个好处则更为重要，PrepareStatement可以防止SQL注入攻击。假设我们允许用户通过App输入一个名字到数据中心查找用户信息，如果用户输入的字符串是Frank，那么生成的SQL是这样的：</p><pre><code>select * from users where username = 'Frank';\n</code></pre><p>但是如果用户输入的是这样一个字符串：</p><pre><code>Frank';drop table users;--\n</code></pre><p>那么生成的SQL就是这样的：</p><pre><code>select * from users where username = 'Frank';drop table users;--';\n</code></pre><p>这条SQL提交到数据库以后，会被当做两条SQL执行，一条是正常的select查询SQL，一条是删除users表的SQL。黑客提交一个请求然后users表被删除了，系统崩溃了，这就是SQL注入攻击。</p><p>如果用Statement提交SQL就会出现这种情况。</p><p>但如果用PrepareStatement则可以避免SQL被注入攻击。因为一开始构造PrepareStatement的时候就已经提交了查询SQL，并被数据库预先生成好了执行计划，后面黑客不管提交什么样的字符串，都只能交给这个执行计划去执行，不可能再生成一个新的SQL了，也就不会被攻击了。</p><pre><code>select * from users where username = ?;\n</code></pre><h2>数据库文件存储原理</h2><p>回到文章开头提出的另一个问题，数据库通过索引进行查询能加快查询速度，那么，为什么索引能加快查询速度呢？</p><p>数据库索引使用B+树，我们先看下B+树这种数据结构。B+树是一种N叉排序树，树的每个节点包含N个数据，这些数据按顺序排好，两个数据之间是一个指向子节点的指针，而子节点的数据则在这两个数据大小之间。</p><p>如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/56/f45e421a8e5172b9bc9fd1709fc98456.png?wh=896*506\" alt=\"\"><br>\nB+树的节点存储在磁盘上，每个节点存储1000多个数据，这样树的深度最多只要4层，就可存储数亿的数据。如果将树的根节点缓存在内存中，则最多只需要三次磁盘访问就可以检索到需要的索引数据。</p><p>B+树只是加快了索引的检索速度，如何通过索引加快数据库记录的查询速度呢？</p><p>数据库索引有两种，一种是聚簇索引，聚簇索引的数据库记录和索引存储在一起，上面这张图就是聚簇索引的示意图，在叶子节点，索引1和记录行r1存储在一起，查找到索引就是查找到数据库记录。像MySQL数据库的主键就是聚簇索引，主键ID和所在的记录行存储在一起。MySQL的数据库文件实际上是以主键作为中间节点，行记录作为叶子节点的一颗B+树。</p><p>另一种数据库索引是非聚簇索引，非聚簇索引在叶子节点记录的就不是数据行记录，而是聚簇索引，也就是主键，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/58/51/580f1aa37880751f81e89d4a53ae3f51.png?wh=894*506\" alt=\"\"><br>\n通过B+树在叶子节点找到非聚簇索引a，和索引a在一起存储的是主键1，再根据主键1通过主键（聚簇）索引就可以找到对应的记录r1，这种通过非聚簇索引找到主键索引，再通过主键索引找到行记录的过程也被称作回表。</p><p>所以通过索引，可以快速查询到需要的记录，而如果要查询的字段上没有建索引，就只能扫描整张表了，查询速度就会慢很多。</p><p>数据库除了索引的B+树文件，还有一些比较重要的文件，比如事务日志文件。</p><p>数据库可以支持事务，一个事务对多条记录进行更新，要么全部更新，要么全部不更新，不能部分更新，否则像转账这样的操作就会出现严重的数据不一致，可能会造成巨大的经济损失。数据库实现事务主要就是依靠事务日志文件。</p><p>在进行事务操作时，事务日志文件会记录更新前的数据记录，然后再更新数据库中的记录，如果全部记录都更新成功，那么事务正常结束，如果过程中某条记录更新失败，那么整个事务全部回滚，已经更新的记录根据事务日志中记录的数据进行恢复，这样全部数据都恢复到事务提交前的状态，仍然保持数据一致性。</p><p>此外，像MySQL数据库还有binlog日志文件，记录全部的数据更新操作记录，这样只要有了binlog就可以完整复现数据库的历史变更，还可以实现数据库的主从复制，构建高性能、高可用的数据库系统，我将会在架构模块进一步为你讲述。</p><h2>小结</h2><p>做应用开发需要了解RDBMS的架构原理，但是关系数据库系统非常庞大复杂，对于一般的应用开发者而言，全面掌握关系数据库的各种实现细节，代价高昂，也没有必要。我们只需要掌握数据库的架构原理与执行过程，数据库文件的存储原理与索引的实现方式，以及数据库事务与数据库复制的基本原理就可以了。然后，在开发工作中针对各种数据库问题去思考，其背后的原理是什么，应该如何处理。通过这样不断地思考学习，不但能够让使用数据库方面的能力不断提高，也能对数据库软件的设计理念也会有更深刻的认识，自己软件设计与架构的能力也会得到加强。</p><h2>思考题</h2><p>索引可以提高数据库的查询性能，那么是不是应该尽量多的使用索引呢？如果不是，为什么？你还了解哪些改善数据库访问性能的技巧方法？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步。</p>","neighbors":{"left":{"article_title":"05丨文件系统原理：如何用1分钟遍历一个100TB的文件？","id":169533},"right":{"article_title":"07丨编程语言原理：面向对象编程是编程的终极形态吗？","id":172492}},"comments":[{"had_liked":false,"id":156896,"user_name":"⛽️🦆","can_delete":false,"product_type":"c1","uid":1674059,"ip_address":"","ucode":"7D952CAFDBBD99","user_header":"https://static001.geekbang.org/account/avatar/00/19/8b/4b/9e0d334f.jpg","comment_is_top":false,"comment_ctime":1574992850,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"448251591634","product_id":100040201,"comment_content":"您好，老师：<br>回答上述问题<br>1.创建多的索引，会占用更多磁盘空间。如果有一张很大的表，索引文件的大小可能达到操作系统允许的最大文件限制；<br>2.对于DML操作的时候，索引会降低他们的速度。因为MySQL不仅要把搞定的数据写入数据文件，而且它还要把这些改动写入索引文件;<br>改善数据库性能：<br>1.索引优化，选择合适的索引列，选择在where、group by、order by、on 从句中出现的列作为索引项，对于离散度不大的列没有必要创建索引。<br>2.索引字段越小越好。<br>3.SQL语句的优化、数据表结构的优化。<br>    3.1：选择可存数据最小的数据类型，选择最合适的字段类型，进行数据的存储;<br>    3.2：数据量很大的一张表，应该考虑水平分表或垂直分表；<br>    3.3：尽量不要使用text字段，如果非要用，那么应考虑将它存放另一张表中；<br>4.数据库配置的优化：<br>    4.1：连接数的配置，因为大量的连接，不进行操作，那样也会占用内存。<br>    4.2：查询缓存的配置，但在MySQL 8.0就删除了此功能。<br>5.硬件的配置;<br> 额外加说一下，常见性能的问题：<br>1.条件字段函数的操作，给索引字段做了函数计算，就会破坏索引值，因此优化器就放弃了走树搜索能够;<br>2.隐式类型转换，比如数据库字段是varchar类型，创建的索引，但是使用的时候传入的是int类型，那么会走全表扫面;<br>3.隐式字符编码转换，如果join 两表的时候，两表的字符集不同，也不能用上索引；<br>","like_count":105,"discussions":[{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296607,"discussion_content":"什么时候适合垂直分表 ？什么时候水平分表？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596599392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2288362,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ea/ea/77a59153.jpg","nickname":"耶马","note":"","ucode":"3A3CF67B016CDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":378398,"discussion_content":"看你们的业务场景,比如日频率或者月的适合水平拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623206434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296607,"ip_address":""},"score":378398,"extra":""}]},{"author":{"id":1205697,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/c1/afcd981b.jpg","nickname":"程序员二师兄","note":"","ucode":"C9E3B5B3358BDF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289363,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594081754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66629,"discussion_content":"问个问题 索引字段 越小越好 \n\n这个索引字段 指的是什么? \n\n是索引的名称要小吗？ \n还是索引对应的字段个数要小? \n还是索引对应字段的类型 要小?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575091785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1674059,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/4b/9e0d334f.jpg","nickname":"⛽️🦆","note":"","ucode":"7D952CAFDBBD99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67827,"discussion_content":"索引的字段类型，比如INT 类型占用4个字节，如果这个字段类型能满足你存储的需求，那么就不必给它设置成BIGNT 占用8个字节的字段。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575180900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66629,"ip_address":""},"score":67827,"extra":""},{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1674059,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8b/4b/9e0d334f.jpg","nickname":"⛽️🦆","note":"","ucode":"7D952CAFDBBD99","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68014,"discussion_content":"哦哦 明白你说的意思了 当必须使用联合索引的时候 就没办法避免了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575195662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":67827,"ip_address":""},"score":68014,"extra":""}]}]},{"had_liked":false,"id":157625,"user_name":"无形","can_delete":false,"product_type":"c1","uid":1016889,"ip_address":"","ucode":"B740E2A68A17A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","comment_is_top":false,"comment_ctime":1575215115,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31639986187","product_id":100040201,"comment_content":"最近在广告检索中接入了用户画像标签，实现了把一大串嵌套json格式的标签数据表达式，类似dnf表达式，解析为可计算的广告匹配模型，其中就有类似sql一样，对表达式进行格式分析、数据、比较符检验、复杂的逻辑关系转换为容易处理的计算单元，最后生成一个树状匹配模型，通过对模型输入用户数据，进行匹配，并返回符合的用户。<br>这有点像用户画像标签就是一条SQL，对SQL进行语法分析，生成匹配模型（类比SQL的执行计划），当下次输入用户数据的时候用生成好的匹配模型直接处理数据，不必再重复解析画像标签","like_count":8},{"had_liked":false,"id":156911,"user_name":"尹宗昌","can_delete":false,"product_type":"c1","uid":1215099,"ip_address":"","ucode":"C409D28F324193","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/7b/c8123a88.jpg","comment_is_top":false,"comment_ctime":1574994777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27344798553","product_id":100040201,"comment_content":"索引可以提高查询性能，但是一定要考虑维护索引的成本。空间占用、插入修改的性能影响都要衡量","like_count":7},{"had_liked":false,"id":241211,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1597216919,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14482118807","product_id":100040201,"comment_content":"看到预编译这个概念就想到Mybites的变量占位符$和#，前者没有预编译直接以字符串的方式被append到sql语句中，以至于有sql注入被黑客攻击的可能。而#会被预编译成一个符号，在使用的时候再把参数值填进来，这样就避免了sql注入风险。至于原理还要去看源码。","like_count":4},{"had_liked":false,"id":157470,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1575170667,"is_pvip":false,"replies":[{"id":"60428","content":"会","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1575207385,"ip_address":"","comment_id":157470,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14460072555","product_id":100040201,"comment_content":"请问一下老师PreparedStatement经过语法分析生成的抽象语法树，再经过语义分析和优化器处理后生成的执行计划，会有缓存吗？","like_count":4,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476435,"discussion_content":"会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575207385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298636,"discussion_content":"应该会缓存起来，不然执行引擎执行的时候去哪儿找它。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597368171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157467,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1575170303,"is_pvip":false,"replies":[{"id":"60429","content":"是的，更新数据本来就会先执行查询操作。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1575207445,"ip_address":"","comment_id":157467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14460072191","product_id":100040201,"comment_content":"请问老师，在进行事务操作时，事务日志文件会记录更新前的数据记录，这个记录更新前的数据记录是 什么意思，是把更新之前的数据都查询出来，记录到事务日志文件嘛","like_count":4,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476433,"discussion_content":"是的，更新数据本来就会先执行查询操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575207445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198517,"user_name":"陈衎","can_delete":false,"product_type":"c1","uid":1810649,"ip_address":"","ucode":"8A6535DDB4B611","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a0/d9/49578be1.jpg","comment_is_top":false,"comment_ctime":1585454713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175389305","product_id":100040201,"comment_content":"索引不是越多越好，索引多了对磁盘容量产生代价。增删改，存储过程等都会涉及到索引的修改，导致效率下降。还有比如字段查询量少，重复多，比如性别等，是没必要建立索引的。觉得索引还是要看使用场景吧，比如数据仓库。<br><br>优化性能和提高查询效率，个人觉得是一种编码习惯和思想过程，比如小表驱动大表，根据实际合理创建表结构范式，建立联合查询一次到位避免回表，清楚select ，join，group by，having，where，order by这些执行顺序。设计健壮灵活的数据表结构。","like_count":2},{"had_liked":false,"id":231159,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1593595373,"is_pvip":false,"replies":[{"id":"85785","content":"主键索引就是聚簇索引，非主键索引就是非聚簇索引","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1594002403,"ip_address":"","comment_id":231159,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888562669","product_id":100040201,"comment_content":"看文章讲解，聚簇索引，不止备份了整个表数据，增删改查开销也大，所以应减少不必要的聚簇索引，除主键外其他可考虑使用非聚簇索引。<br>那如何指定索引为非聚簇索引呢？","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500180,"discussion_content":"主键索引就是聚簇索引，非主键索引就是非聚簇索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594002403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178492,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1581705629,"is_pvip":false,"replies":[{"id":"69443","content":"建立数据库连接会很耗时，每次建立连接会更消耗数据库的资源。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1581853212,"ip_address":"","comment_id":178492,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5876672925","product_id":100040201,"comment_content":"请问李老师，既然数据库连接会占用内存，那么传统web应用为什么不干脆在每一次接受http请求时建立数据库连接，然后再在http访问结束后断开数据库连接？<br>建立数据库连接会耗CPU吗？（假设数据库服务自身已经有线程池等待被连接，web应用也缓存了地址密码等配置信息）","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483847,"discussion_content":"建立数据库连接会很耗时，每次建立连接会更消耗数据库的资源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581853212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413835,"discussion_content":"建立连接的时候要验证身份。我是这么想的。。。呵呵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636567604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qq6oLfOTgKzjiculoUDicdv7WoY1iabPfOTumibWeInVP2Mnod9XVPrNSClvIiaLbvtDlIjRnWUNaXcYwREGzlcaDog/132","nickname":"Geek_在下蟑螂王","note":"","ucode":"E1F5BBB5BC5962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287930,"discussion_content":"小毛哥可真异想天开啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593592783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157484,"user_name":"无形","can_delete":false,"product_type":"c1","uid":1016889,"ip_address":"","ucode":"B740E2A68A17A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","comment_is_top":false,"comment_ctime":1575173670,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5870140966","product_id":100040201,"comment_content":"数据变动的时候同时需要更新索引，索引多了，数据变动的效率就会降低，索引也是文件，会占用更多的磁盘空间<br>。<br>另外，我之前提到的要动手实现的高性能检索系统，在数据的存储部分，用文件存储，为了提高文档的检索效率，为文件创建了索引，索引是这种格式id:start:length，<br>文档id:在文件中的起始位置:文档的长度，索引文件是排序过得，例如下面这种格式<br>0000000001:0000000000:0000000100<br>0000000002:0000000100:0000000300<br>0000000007:0000000400:0000001000<br>在不加载完整索引文件的情况下，这样可以通过offset快速读取每个索引数据，因为是排序过的，二分查找快速查找到文档的起始位置和大小，就可以迅速在文件中找到文档，测试了下，文档数据量160w，最多20次就可以查找到文档，耗时200-300微妙，如果对索引文件进行分片存储还会更快","like_count":2},{"had_liked":false,"id":157228,"user_name":"乘坐Tornado的线程魔法师","can_delete":false,"product_type":"c1","uid":1132661,"ip_address":"","ucode":"C4C9915866E769","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","comment_is_top":false,"comment_ctime":1575089835,"is_pvip":false,"replies":[{"id":"60306","content":"是的，图中只是示意，没有画出全部节点。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1575099124,"ip_address":"","comment_id":157228,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5870057131","product_id":100040201,"comment_content":"请问下，文中的第一个B+树示意图的第一层中间节点，8和34中间的部分是不是也应该指向一个子节点？","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476368,"discussion_content":"是的，图中只是示意，没有画出全部节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575099124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169474,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/42/d4e7a136.jpg","nickname":"有思想的芦苇","note":"","ucode":"AA0B96363B1587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586758,"discussion_content":"并没有，B+树中间节点的子树数量和其元素数量相同，而且所有B+树的非叶子节点元素，都包括在叶子节点中，而且B+树根节点的最大元素，应该是整棵树的最大元素，所以我认为B+树的示意图有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662476250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157172,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1575068167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870035463","product_id":100040201,"comment_content":"李老师，堪比百科全书啊！非常接地气！给老师提个建议，文章中有些是针对MySQL说的，有些不是，希望老师能区分一下。<br>索引么，也是一种空间换时间的思路，细思极恐。改善数据库访问性能的手段也不应该仅限于索引这种手段。","like_count":1},{"had_liked":false,"id":157050,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1575018458,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5869985754","product_id":100040201,"comment_content":"1.索引较多，插入删除的时候会有额外的开销。<br>2.索引字段尽量小，因为索引字段的大小会影响每一个b+树节点数据块中的数据项的个数。<br>3.多了解业务，有些地方可以使用索引有些则不用。<br>4.可以综合利用联合索引和单独索引","like_count":2},{"had_liked":false,"id":299451,"user_name":"米兰的小铁匠","can_delete":false,"product_type":"c1","uid":1146923,"ip_address":"","ucode":"E52E05954BF39D","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/2b/ef1581b5.jpg","comment_is_top":false,"comment_ctime":1624631125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624631125","product_id":100040201,"comment_content":"思考总结：PrepareStatement预编译、然后设置可变参数再执行提交。<br>1、介绍了Sql执行流程：<br>查询：连接器-查询缓存-分析器-优化器-执行器<br>更新：获取数据（数据页内存中判断）-更新（更新到内存中）prepare redolog-完成后binlog-redolog<br>2、PrepareStatement：预处理使效率高、防止Sql注入<br>3、底层结构：B+树<br>多叉树：矮，文件io少<br>节点不存储数据，只是索引<br>链表讲叶子节点串联一起，方便区间查找<br>一般情况，根节点会存储再内存中，其他节点存储再磁盘","like_count":1},{"had_liked":false,"id":291468,"user_name":"Geek_5180b5","can_delete":false,"product_type":"c1","uid":1490031,"ip_address":"","ucode":"26D58A7047DE85","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIeWDmWuCHppRXeQiaCGcSf8gib4Sb0HohDicQ5A4ZtW79wNCLWqyObmkQYibpOydCWNGIu2NK6iaKaMsw/132","comment_is_top":false,"comment_ctime":1620297855,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1620297855","product_id":100040201,"comment_content":"处理中占位符参数的替换，就是在真正执行sql的时候才替换，可以这样理解嘛。。","like_count":0,"discussions":[{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413837,"discussion_content":"对。生成执行计划的时候不代入它","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636567872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279831,"user_name":"pcz","can_delete":false,"product_type":"c1","uid":2367637,"ip_address":"","ucode":"D528F5CFF4A5C9","user_header":"https://static001.geekbang.org/account/avatar/00/24/20/95/89bd2c38.jpg","comment_is_top":false,"comment_ctime":1613978136,"is_pvip":false,"replies":[{"id":"101702","content":"ast优化后，依然是一个ast，赋值的时候，将真实值替换ast的expression节点即可","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1614044314,"ip_address":"","comment_id":279831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613978136","product_id":100040201,"comment_content":"老师：PrepareStatement提交带占位符的sql进行预处理的意思是：执行到语义分析和优化器这一步，但是不执行引擎？那这个sql的赋值过程是什么样的？","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515884,"discussion_content":"ast优化后，依然是一个ast，赋值的时候，将真实值替换ast的expression节点即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614044314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254053,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1603032263,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1603032263","product_id":100040201,"comment_content":"用一篇文章来讲数据库原理，感觉还是有点困难的。如果想要入门，那么推荐《SQL必知必会》专栏；如果想要深入学习 MySQL，那么推荐丁奇的《MySQL实战45讲》。<br><br>PrepareStatement 应该是属于编程语言还是数据库驱动？很久以前，用 C# 连接 Oracle 的时候就接触过 PrepareStatement 的概念，Java 连接 MySQL 或者 Oracle 肯定也有，毫无疑问 SQL Server 也不会缺少这个概念。<br><br>而且有点也都类似，在提高性能的同时避免注入攻击。<br><br>我的印象里隐约有，使用 PrepareStatement 并不利于数据库的 SQL 查询结果缓存，没有找到出处。但是现在新版本的 MySQL 似乎已经弃用了查询缓存。<br><br>能理解数据库存储原理（B+树），能分清楚主键聚簇索引和非聚簇索引，能看懂执行计划的程序员，都是好程序员。","like_count":1},{"had_liked":false,"id":226236,"user_name":"Geek__风雨","can_delete":false,"product_type":"c1","uid":1447977,"ip_address":"","ucode":"A2CA9983A1EAA0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM70nnPpGc2c9vic68lB3ndZxlWLwXakhpkq8ZzZSPRusynorCafpoAYxkicOYhRic9GTEqWjhagDLp6w/132","comment_is_top":false,"comment_ctime":1592012585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592012585","product_id":100040201,"comment_content":"分析器，优化器（待执行的sql），执行器，执行引擎","like_count":0},{"had_liked":false,"id":197765,"user_name":"FreezeSoul","can_delete":false,"product_type":"c1","uid":1015930,"ip_address":"","ucode":"0B67142C4EA3D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","comment_is_top":false,"comment_ctime":1585397566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585397566","product_id":100040201,"comment_content":"感谢，之前只是知道preparestatement会生成语法树避免的注入，现在才明白是生成执行计划，避免的注入","like_count":0},{"had_liked":false,"id":183988,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1583197452,"is_pvip":false,"replies":[{"id":"71299","content":"树要有个根节点，算一层~","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1583284729,"ip_address":"","comment_id":183988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583197452","product_id":100040201,"comment_content":"老师您好，文中提到“每个节点存储 1000 多个数据，这样树的深度最多只要 4 层，就可存储数亿的数据”，严谨来说应该是三层即可，1000*1000*1000，我是这么计算的","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485843,"discussion_content":"树要有个根节点，算一层~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583284729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162558,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1122397,"ip_address":"","ucode":"907A2FD339E158","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/5d/69170b96.jpg","comment_is_top":false,"comment_ctime":1576554449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576554449","product_id":100040201,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":159121,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575542247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575542247","product_id":100040201,"comment_content":"聚簇索引,叶子节点指向了记录。<br>非聚簇索引，叶子节点指向了主键。<br>索引肯定不是越多越好，不然就会默认创建。索引有成本，成本来自于存储成本和插入删除时候的维护成本，如果查询得到的好处不足以抵消维护和存储成本，就是不值得的。","like_count":1},{"had_liked":false,"id":157308,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1575106141,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575106141","product_id":100040201,"comment_content":"SQL 的分析器 包括词法分析器和语法分析器，经过词法分析器生成 AST ，不是语法分析","like_count":0},{"had_liked":false,"id":157229,"user_name":"乘坐Tornado的线程魔法师","can_delete":false,"product_type":"c1","uid":1132661,"ip_address":"","ucode":"C4C9915866E769","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","comment_is_top":false,"comment_ctime":1575089915,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"1575089915","product_id":100040201,"comment_content":"印象中丁奇的《MySQL实战45讲》中，也讲到了回表。但是文中提到的MySQL是聚簇索引，不需要回表。是不是这里面有些概念需要根据具体情况再进一步拆分讨论。并不能一概而论？","like_count":0,"discussions":[{"author":{"id":1016889,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","nickname":"无形","note":"","ucode":"B740E2A68A17A5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68770,"discussion_content":"回表是还需要拿到那一条数据，如果在聚簇索引上检索，可以直接查询到数据，如果是在二级索引上检索，在没有索引覆盖的时候还需要根据ID从聚簇索引上查询到数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575215764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016889,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","nickname":"无形","note":"","ucode":"B740E2A68A17A5","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":68856,"discussion_content":"二级索引是否为非聚簇索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575220543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68770,"ip_address":""},"score":68856,"extra":""},{"author":{"id":1016889,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","nickname":"无形","note":"","ucode":"B740E2A68A17A5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68966,"discussion_content":"搜索引擎能解决的问题都不是问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575248503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68856,"ip_address":""},"score":68966,"extra":""}]},{"author":{"id":1450033,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOCkhE6EF8dpnug21uHof7bu6YnM2gwEMDtdTtCPmRibKx4CUiass25UfMSwib8zJ7lwv8beYYXjLCA/132","nickname":"Geek__93441785f6a2","note":"","ucode":"03F5A9C37FF728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221266,"discussion_content":"你应该是记错了，《MySQL实战45讲》中没有说过MySQL是聚簇索引，MySQL里比如说InnoDB，里面肯定是聚簇索引和非聚簇索引都有的，主键索引就是聚簇索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585996830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66787,"discussion_content":"聚簇索引 就是主键索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575107000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":66907,"discussion_content":"除了主键索引之外的其他索引类别，仍然是聚簇索引吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575115313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66787,"ip_address":""},"score":66907,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66948,"discussion_content":"不是，一张表只允许有一个主键索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575117763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66907,"ip_address":""},"score":66948,"extra":""},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":66956,"discussion_content":"所以文中的表述正确但是没有覆盖全面的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575118074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66948,"ip_address":""},"score":66956,"extra":""}]}]},{"had_liked":false,"id":157047,"user_name":"幸福来敲门","can_delete":false,"product_type":"c1","uid":1670147,"ip_address":"","ucode":"A9CF2FDA8315A5","user_header":"https://static001.geekbang.org/account/avatar/00/19/7c/03/2941dea7.jpg","comment_is_top":false,"comment_ctime":1575018134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575018134","product_id":100040201,"comment_content":"哎","like_count":0}]}