{"id":522343,"title":"36｜实战中的TDD：RESTful Web Services","content":"<p>你好，我是徐昊。通过前面的项目练习，我们完成了DI Container的功能。从这节课开始，我们就进入RESTful Web Services的开发。</p><h2>整体功能介绍</h2><p>在DI Container的部分，我们参考了Jakarta Dependency Injection作为功能依据。在RESTful Web Services部分，我们将会参考Jakarta RESTful Web Services。</p><p>Jakarta RESTful Web Services的功能比Jakarta Dependency Injection要庞杂一些，如视频中所演示的，我将从三个部分来讲解说明：</p><p><video poster=\"https://media001.geekbang.org/9deec6681ac24038a675224d98b0ec71/snapshots/549820c28fae49269ca51bffd2057232-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/31a6d78d-18112dc4831-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/639594971e7c49ca8e76790818dfad7c/4a43e220b81143a2bc93f706e7768be4-c00956a43345c90f2edf85cc23005da3-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>经过多年发展，Jakarta RESTful Web Services也变得日渐复杂，其中有些“高级”特性很少应用，在我们的项目中需要做一些取舍：</p><p><video poster=\"https://media001.geekbang.org/3e22a3a8bc7b46f79dd9390703e18830/snapshots/d67c0769103a4b89b3a416855d686a54-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/26894340-18112dc44d6-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/ece1ee47c0a0450284513d7b02d25049/55e1d22b63324d46a6b394e20cfc5e6f-f6941c38140762d39f7786678ab5a17f-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>那么下面这段代码展示了我们需要实现的主要功能，并提供了相应的扩展能力：</p><pre><code>public class UserOrdersResource {\n    private User user;\n    @Context\n    private Orders orders;\n    @Context\n    private Products products;\n    public UserOrdersResource(User user) {\n        this.user = user;\n    }\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public CollectionModel&lt;Order&gt; all() {\n        return CollectionModel.of(orders.findBy(user.getId()))\n                .add(Link.of(&quot;/users/{id}/orders&quot;).expand(user.getId().value()),\n                        Link.of(&quot;/users/{id}&quot;, &quot;owner&quot;).expand(user.getId().value()));\n    }\n    @GET\n    @Path(&quot;/{id}&quot;)\n    @Produces(MediaType.APPLICATION_JSON)\n    public EntityModel&lt;Order&gt; findBy(@PathParam(&quot;id&quot;) long id) {\n        return orders.findBy(user.getId(), new Order.Id(id))\n                .map(o -&gt; EntityModel.of(o)\n                        .add(Link.of(&quot;/users/{id}/orders/{id}&quot;).expand(user.getId().value(), id),\n                                Link.of(&quot;/users/{id}&quot;, &quot;owner&quot;).expand(user.getId().value())))\n                .orElse(null);\n    }\n    @POST\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n    public Response placeOrder(@FormParam(&quot;item&quot;) List&lt;Long&gt; items, @FormParam(&quot;quantity&quot;) List&lt;Double&gt; quantities) {\n        List&lt;Product&gt; products = this.products.find(items.stream().map(Product.Id::new).toList());\n        Map&lt;Product, Double&gt; orderItems = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; products.size(); i++)\n            orderItems.put(products.get(i), quantities.get(i));\n        Order order = orders.create(user, orderItems);\n        return Response.created(Link.of(&quot;/users/{uid}/orders/{oid}&quot;).expand(user.getId().value(), order.getId().value()).toUri()).build();\n    }\n}\n    \npublic class UserResource {\n    private User user;\n    public UserResource(User user) {\n        this.user = user;\n    }\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public EntityModel&lt;User&gt; get() {\n        return EntityModel.of(user).add(Link.of(&quot;/users/{value}&quot;).expand(user.getId().value()));\n    }\n    @Path(&quot;/orders&quot;)\n    public UserOrdersResource orders(@Context ResourceContext context) {\n        return context.initResource(new UserOrdersResource(user));\n    }\n}\n    \n@Path(&quot;/users&quot;)\npublic class UsersResource {\n    @Context\n    private Users users;\n    @Path(&quot;{id}&quot;)\n    public UserResource findById(@PathParam(&quot;id&quot;) User.Id id) {\n        return users.findById(id).map(UserResource::new).orElse(null);\n    }\n    @POST\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n    public Response register(@FormParam(&quot;name&quot;) String name, @FormParam(&quot;email&quot;) String email) {\n        User user = users.create(name, email);\n        return Response.created(Link.of(&quot;/users/{id}&quot;).expand(user.getId().value()).toUri()).build();\n    }\n}\n</code></pre><p>我们很容易可以发现，RESTful Web Services需要多模块协同完成。而不是像DI Container那样，可以从单一模块入手，完成几个功能之后再进行重构。所以对于RESTful Web Services，伦敦学派或许是一种更好的方式。</p><!-- [[[read_end]]] --><p>那么下节课，我们将从伦敦学派入手，开始RESTful Web Services的开发。</p><h2>思考题</h2><p>按照视频中所展示的需求，我们要设计怎样的架构愿景，才能顺利地进入伦敦学派的开发？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"35｜DI Container（23）：项目回顾与总结","id":522342},"right":{"article_title":"37｜RESTful Web Services（1）：明确架构愿景与架构组件间的交互","id":522346}},"comments":[{"had_liked":false,"id":347865,"user_name":"Flynn","can_delete":false,"product_type":"c1","uid":1174517,"ip_address":"","ucode":"293321CC198C0C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aY5QA2COoiaGy7P3MJzUIam3GG94GpA0fTx8yJN3OyBiaP3eNL65ia99H4RbaqC4fypg7JhBOujlJs7bBTdJKdMUQ/132","comment_is_top":false,"comment_ctime":1654521593,"is_pvip":false,"replies":[{"id":"126811","content":"指路《如何落地业务建模》里的10、11节，讲RESTful的","user_name":"编辑回复","comment_id":347865,"uid":"2189689","ip_address":"","utype":2,"ctime":1654614898,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1654521593","product_id":100109401,"comment_content":"老师，科普一下什么是RESTful呗","like_count":0,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575152,"discussion_content":"指路《如何落地业务建模》里的10、11节，讲RESTful的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654614899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]}]}