{"id":235700,"title":"27 | 数据源头：任何客户端的东西都不可信任","content":"<p>你好，我是朱晔。</p><p>从今天开始，我要和你讨论几个有关安全的话题。首先声明，我不是安全专家，但我发现有这么一个问题，那就是许多做业务开发的同学往往一点点安全意识都没有。如果有些公司没有安全部门或专家的话，安全问题就会非常严重。</p><p>如果只是用一些所谓的渗透服务浅层次地做一下扫描和渗透，而不在代码和逻辑层面做进一步分析的话，能够发现的安全问题非常有限。要做好安全，还是要靠一线程序员和产品经理点点滴滴的意识。</p><p>所以接下来的几篇文章，我会从业务开发的角度，和你说说我们应该最应该具备的安全意识。</p><p>对于HTTP请求，我们要在脑子里有一个根深蒂固的概念，那就是<strong>任何客户端传过来的数据都是不能直接信任的</strong>。客户端传给服务端的数据只是信息收集，数据需要经过有效性验证、权限验证等后才能使用，并且这些数据只能认为是用户操作的意图，不能直接代表数据当前的状态。</p><p>举一个简单的例子，我们打游戏的时候，客户端发给服务端的只是用户的操作，比如移动了多少位置，由服务端根据用户当前的状态来设置新的位置再返回给客户端。为了防止作弊，不可能由客户端直接告诉服务端用户当前的位置。</p><p>因此，客户端发给服务端的指令，代表的只是操作指令，并不能直接决定用户的状态，对于状态改变的计算在服务端。而网络不好时，我们往往会遇到走了10步又被服务端拉回来的现象，就是因为有指令丢失，客户端使用服务端计算的实际位置修正了客户端玩家的位置。</p><!-- [[[read_end]]] --><p>今天，我通过四个案例来和你说说，为什么“任何客户端的东西都不可信任”。</p><h2>客户端的计算不可信</h2><p>我们先看一个电商下单操作的案例。</p><p>在这个场景下，可能会暴露这么一个/order的POST接口给客户端，让客户端直接把组装后的订单信息Order传给服务端：</p><pre><code>@PostMapping(&quot;/order&quot;)\npublic void wrong(@RequestBody Order order) {\n    this.createOrder(order);\n}\n</code></pre><p>订单信息Order可能包括商品ID、商品价格、数量、商品总价：</p><pre><code>@Data\npublic class Order {\n    private long itemId; //商品ID\n    private BigDecimal itemPrice; //商品价格\n    private int quantity; //商品数量\n    private BigDecimal itemTotalPrice; //商品总价\n}\n</code></pre><p>虽然用户下单时客户端肯定有商品的价格等信息，也会计算出订单的总价给用户确认，但是这些信息只能用于呈现和核对。即使客户端传给服务端的POJO中包含了这些信息，服务端也一定要重新从数据库来初始化商品的价格，重新计算最终的订单价格。<strong>如果不这么做的话，很可能会被黑客利用，商品总价被恶意修改为比较低的价格。</strong></p><p>因此，我们真正直接使用的、可信赖的只是客户端传过来的商品ID和数量，服务端会根据这些信息重新计算最终的总价。如果服务端计算出来的商品价格和客户端传过来的价格不匹配的话，可以给客户端友好提示，让用户重新下单。修改后的代码如下：</p><pre><code>@PostMapping(&quot;/orderRight&quot;)\npublic void right(@RequestBody Order order) {\n    //根据ID重新查询商品\n    Item item = Db.getItem(order.getItemId());\n    //客户端传入的和服务端查询到的商品单价不匹配的时候，给予友好提示\n    if (!order.getItemPrice().equals(item.getItemPrice())) {\n        throw new RuntimeException(&quot;您选购的商品价格有变化，请重新下单&quot;);\n    }\n    //重新设置商品单价\n    order.setItemPrice(item.getItemPrice());\n    //重新计算商品总价\n    BigDecimal totalPrice = item.getItemPrice().multiply(BigDecimal.valueOf(order.getQuantity()));\n    //客户端传入的和服务端查询到的商品总价不匹配的时候，给予友好提示\n    if (order.getItemTotalPrice().compareTo(totalPrice)!=0) {\n        throw new RuntimeException(&quot;您选购的商品总价有变化，请重新下单&quot;);\n    }\n    //重新设置商品总价\n    order.setItemTotalPrice(totalPrice);\n    createOrder(order);\n}\n</code></pre><p>还有一种可行的做法是，让客户端仅传入需要的数据给服务端，像这样重新定义一个POJO CreateOrderRequest作为接口入参，比直接使用领域模型Order更合理。在设计接口时，我们会思考哪些数据需要客户端提供，而不是把一个大而全的对象作为参数提供给服务端，以避免因为忘记在服务端重置客户端数据而导致的安全问题。</p><p>下单成功后，服务端处理完成后会返回诸如商品单价、总价等信息给客户端。此时，客户端可以进行一次判断，如果和之前客户端的数据不一致的话，给予用户提示，用户确认没问题后再进入支付阶段：</p><pre><code>@Data\npublic class CreateOrderRequest {\n    private long itemId; //商品ID\n    private int quantity;  //商品数量\n}\n\n@PostMapping(&quot;orderRight2&quot;)\npublic Order right2(@RequestBody CreateOrderRequest createOrderRequest) {\n    //商品ID和商品数量是可信的没问题，其他数据需要由服务端计算\n    Item item = Db.getItem(createOrderRequest.getItemId());\n    Order order = new Order();\n    order.setItemPrice(item.getItemPrice());\n   order.setItemTotalPrice(item.getItemPrice().multiply(BigDecimal.valueOf(order.getQuantity())));\n    createOrder(order);\n    return order;\n}\n</code></pre><p>通过这个案例我们可以看到，在处理客户端提交过来的数据时，服务端需要明确区分，哪些数据是需要客户端提供的，哪些数据是客户端从服务端获取后在客户端计算的。其中，前者可以信任；而后者不可信任，服务端需要重新计算，如果客户端和服务端计算结果不一致的话，可以给予友好提示。</p><h2>客户端提交的参数需要校验</h2><p>对于客户端的数据，我们还容易忽略的一点是，<strong>误以为客户端的数据来源是服务端，客户端就不可能提交异常数据</strong>。我们看一个案例。</p><p>有一个用户注册页面要让用户选择所在国家，我们会把服务端支持的国家列表返回给页面，供用户选择。如下代码所示，我们的注册只支持中国、美国和英国三个国家，并不对其他国家开放，因此从数据库中筛选了id&lt;4的国家返回给页面进行填充：</p><pre><code>@Slf4j\n@RequestMapping(&quot;trustclientdata&quot;)\n@Controller\npublic class TrustClientDataController {\n    //所有支持的国家\n    private HashMap&lt;Integer, Country&gt; allCountries = new HashMap&lt;&gt;();\n\n    public TrustClientDataController() {\n        allCountries.put(1, new Country(1, &quot;China&quot;));\n        allCountries.put(2, new Country(2, &quot;US&quot;));\n        allCountries.put(3, new Country(3, &quot;UK&quot;));\n        allCountries.put(4, new Country(4, &quot;Japan&quot;));\n    }\n\n    @GetMapping(&quot;/&quot;)\n    public String index(ModelMap modelMap) {\n        List&lt;Country&gt; countries = new ArrayList&lt;&gt;();\n        //从数据库查出ID&lt;4的三个国家作为白名单在页面显示\n        countries.addAll(allCountries.values().stream().filter(country -&gt; country.getId()&lt;4).collect(Collectors.toList()));\n        modelMap.addAttribute(&quot;countries&quot;, countries);\n        return &quot;index&quot;;\n    }\n} \n</code></pre><p>我们通过服务端返回的数据来渲染模板：</p><pre><code>...\n&lt;form id=&quot;myForm&quot; method=&quot;post&quot; th:action=&quot;@{/trustclientdata/wrong}&quot;&gt;\n\n\n    &lt;select id=&quot;countryId&quot; name=&quot;countryId&quot;&gt;\n        &lt;option value=&quot;0&quot;&gt;Select country&lt;/option&gt;\n        &lt;option th:each=&quot;country : ${countries}&quot; th:text=&quot;${country.name}&quot; th:value=&quot;${country.id}&quot;&gt;&lt;/option&gt;\n    &lt;/select&gt;\n\n\n    &lt;button th:text=&quot;Register&quot; type=&quot;submit&quot;/&gt;\n&lt;/form&gt;\n...\n</code></pre><p>在页面上，的确也只有这三个国家的可选项：<br>\n<img src=\"https://static001.geekbang.org/resource/image/cc/eb/cc68781b3806c45cbd8aeb3c62bdb8eb.png?wh=848*302\" alt=\"\"></p><p>但我们要知道的是，页面是给普通用户使用的，而黑客不会在乎页面显示什么，完全有可能尝试给服务端返回页面上没显示的其他国家ID。如果像这样直接信任客户端传来的国家ID的话，很可能会把用户注册功能开放给其他国家的人：</p><pre><code>@PostMapping(&quot;/wrong&quot;)\n@ResponseBody\npublic String wrong(@RequestParam(&quot;countryId&quot;) int countryId) {\n    return allCountries.get(countryId).getName();\n}\n</code></pre><p>即使我们知道参数的范围来自下拉框，而下拉框的内容也来自服务端，也需要对参数进行校验。因为接口不一定要通过浏览器请求，只要知道接口定义完全可以通过其他工具提交：</p><pre><code>curl http://localhost:45678/trustclientdata/wrong\\?countryId=4 -X POST\n</code></pre><p>修改方式是，在使用客户端传过来的参数之前，对参数进行有效性校验：</p><pre><code>@PostMapping(&quot;/right&quot;)\n@ResponseBody\npublic String right(@RequestParam(&quot;countryId&quot;) int countryId) {\n    if (countryId &lt; 1 || countryId &gt; 3)\n        throw new RuntimeException(&quot;非法参数&quot;);\n    return allCountries.get(countryId).getName();\n}\n</code></pre><p>或者是，使用Spring Validation采用注解的方式进行参数校验，更优雅：</p><pre><code>@Validated\npublic class TrustClientParameterController {\n\t@PostMapping(&quot;/better&quot;)\n    @ResponseBody\n    public String better(\n            @RequestParam(&quot;countryId&quot;)\n            @Min(value = 1, message = &quot;非法参数&quot;)\n            @Max(value = 3, message = &quot;非法参数&quot;) int countryId) {\n        return allCountries.get(countryId).getName();\n    }\n}\n</code></pre><p>客户端提交的参数需要校验的问题，可以引申出一个更容易忽略的点是，我们可能会把一些服务端的数据暂存在网页的隐藏域中，这样下次页面提交的时候可以把相关数据再传给服务端。虽然用户通过网页界面的操作无法修改这些数据，但这些数据对于HTTP请求来说就是普通数据，完全可以随时修改为任意值。所以，服务端在使用这些数据的时候，也同样要特别小心。</p><h2>不能信任请求头里的任何内容</h2><p>刚才我们介绍了，不能直接信任客户端的传参，也就是通过GET或POST方法传过来的数据，此外请求头的内容也不能信任。</p><p>一个比较常见的需求是，为了防刷，我们需要判断用户的唯一性。比如，针对未注册的新用户发送一些小奖品，我们不希望相同用户多次获得奖品。考虑到未注册的用户因为没有登录过所以没有用户标识，我们可能会想到根据请求的IP地址，来判断用户是否已经领过奖品。</p><p>比如，下面的这段测试代码。我们通过一个HashSet模拟已发放过奖品的IP名单，每次领取奖品后把IP地址加入这个名单中。IP地址的获取方式是：优先通过X-Forwarded-For请求头来获取，如果没有的话再通过HttpServletRequest的getRemoteAddr方法来获取。</p><pre><code>@Slf4j\n@RequestMapping(&quot;trustclientip&quot;)\n@RestController\npublic class TrustClientIpController {\n\n    HashSet&lt;String&gt; activityLimit = new HashSet&lt;&gt;();\n\n    @GetMapping(&quot;test&quot;)\n    public String test(HttpServletRequest request) {\n        String ip = getClientIp(request);\n        if (activityLimit.contains(ip)) {\n            return &quot;您已经领取过奖品&quot;;\n        } else {\n            activityLimit.add(ip);\n            return &quot;奖品领取成功&quot;;\n        }\n    }\n\n    private String getClientIp(HttpServletRequest request) {\n        String xff = request.getHeader(&quot;X-Forwarded-For&quot;);\n        if (xff == null) {\n            return request.getRemoteAddr();\n        } else {\n            return xff.contains(&quot;,&quot;) ? xff.split(&quot;,&quot;)[0] : xff;\n        }\n    }\n}\n</code></pre><p>之所以这么做是因为，通常我们的应用之前都部署了反向代理或负载均衡器，remoteAddr获得的只能是代理的IP地址，而不是访问用户实际的IP。这不符合我们的需求，因为反向代理在转发请求时，通常会把用户真实IP放入X-Forwarded-For这个请求头中。</p><p><strong>这种过于依赖X-Forwarded-For请求头来判断用户唯一性的实现方式，是有问题的</strong>：</p><ul>\n<li>完全可以通过cURL类似的工具来模拟请求，随意篡改头的内容：</li>\n</ul><pre><code>curl http://localhost:45678/trustclientip/test -H &quot;X-Forwarded-For:183.84.18.71, 10.253.15.1&quot;\n</code></pre><ul>\n<li>网吧、学校等机构的出口IP往往是同一个，在这个场景下，可能只有最先打开这个页面的用户才能领取到奖品，而其他用户会被阻拦。</li>\n</ul><p>因此，IP地址或者说请求头里的任何信息，包括Cookie中的信息、Referer，只能用作参考，不能用作重要逻辑判断的依据。而对于类似这个案例唯一性的判断需求，更好的做法是，让用户进行登录或三方授权登录（比如微信），拿到用户标识来做唯一性判断。</p><h2>用户标识不能从客户端获取</h2><p>聊到用户登录，业务代码非常容易犯错的一个地方是，使用了客户端传给服务端的用户ID，类似这样：</p><pre><code>@GetMapping(&quot;wrong&quot;)\npublic String wrong(@RequestParam(&quot;userId&quot;) Long userId) {\n    return &quot;当前用户Id：&quot; + userId;\n}\n</code></pre><p>你可能觉得没人会这么干，但我就真实遇到过：<strong>一个大项目因为服务端直接使用了客户端传过来的用户标识，导致了安全问题</strong>。</p><p>犯类似低级错误的原因，有三个：</p><ul>\n<li>开发同学没有正确认识接口或服务面向的用户。如果接口面向内部服务，由服务调用方传入用户ID没什么不合理，但是这样的接口不能直接开放给客户端或H5使用。</li>\n<li>在测试阶段为了方便测试调试，我们通常会实现一些无需登录即可使用的接口，直接使用客户端传过来的用户标识，却在上线之前忘记删除类似的超级接口。</li>\n<li>一个大型网站前端可能由不同的模块构成，不一定是一个系统，而用户登录状态可能也没有打通。有些时候，我们图简单可能会在URL中直接传用户ID，以实现通过前端传值来打通用户登录状态。</li>\n</ul><p>如果你的接口直面用户（比如给客户端或H5页面调用），那么一定需要用户先登录才能使用。登录后用户标识保存在服务端，接口需要从服务端（比如Session中）获取。这里有段代码演示了一个最简单的登录操作，登录后在Session中设置了当前用户的标识：</p><pre><code>@GetMapping(&quot;login&quot;)\npublic long login(@RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password, HttpSession session) {\n    if (username.equals(&quot;admin&quot;) &amp;&amp; password.equals(&quot;admin&quot;)) {\n        session.setAttribute(&quot;currentUser&quot;, 1L);\n        return 1L;\n    }\n    return 0L;\n}\n</code></pre><p>这里，我再分享一个Spring Web的小技巧。</p><p>如果希望每一个需要登录的方法，都从Session中获得当前用户标识，并进行一些后续处理的话，我们没有必要在每一个方法内都复制粘贴相同的获取用户身份的逻辑，可以定义一个自定义注解@LoginRequired到userId参数上，然后通过HandlerMethodArgumentResolver自动实现参数的组装：</p><pre><code>@GetMapping(&quot;right&quot;)\npublic String right(@LoginRequired Long userId) {\n    return &quot;当前用户Id：&quot; + userId;\n}\n</code></pre><p>@LoginRequired本身并无特殊，只是一个自定义注解：</p><pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.PARAMETER)\n@Documented\npublic @interface LoginRequired {\n    String sessionKey() default &quot;currentUser&quot;;\n}\n</code></pre><p>魔法来自HandlerMethodArgumentResolver。我们自定义了一个实现类LoginRequiredArgumentResolver，实现了HandlerMethodArgumentResolver接口的2个方法：</p><ul>\n<li>supportsParameter方法判断当参数上有@LoginRequired注解时，再做自定义参数解析的处理；</li>\n<li>resolveArgument方法用来实现解析逻辑本身。在这里，我们尝试从Session中获取当前用户的标识，如果无法获取到的话提示非法调用的错误，如果获取到则返回userId。这样一来，Controller中的userId参数就可以自动赋值了。</li>\n</ul><pre><code>@Slf4j\npublic class LoginRequiredArgumentResolver implements HandlerMethodArgumentResolver {\n    //解析哪些参数\n    @Override\n    public boolean supportsParameter(MethodParameter methodParameter) {\n        //匹配参数上具有@LoginRequired注解的参数\n        return methodParameter.hasParameterAnnotation(LoginRequired.class);\n    }\n\n\n    @Override\n    public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {\n        //从参数上获得注解\n        LoginRequired loginRequired = methodParameter.getParameterAnnotation(LoginRequired.class);\n        //根据注解中的Session Key，从Session中查询用户信息\n        Object object = nativeWebRequest.getAttribute(loginRequired.sessionKey(), NativeWebRequest.SCOPE_SESSION);\n        if (object == null) {\n            log.error(&quot;接口 {} 非法调用！&quot;, methodParameter.getMethod().toString());\n            throw new RuntimeException(&quot;请先登录！&quot;);\n        }\n        return object;\n    }\n}\n</code></pre><p>当然，我们要实现WebMvcConfigurer接口的addArgumentResolvers方法，来增加这个自定义的处理器LoginRequiredArgumentResolver：</p><pre><code>SpringBootApplication\npublic class CommonMistakesApplication implements WebMvcConfigurer {\n...\n    @Override\n    public void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; resolvers) {\n        resolvers.add(new LoginRequiredArgumentResolver());\n    }\n}\n</code></pre><p>测试发现，经过这样的实现，登录后所有需要登录的方法都可以一键通过加@LoginRequired注解来拿到用户标识，方便且安全：<br>\n<img src=\"https://static001.geekbang.org/resource/image/44/1e/444b314beb2be68c6574e12d65463b1e.png?wh=930*206\" alt=\"\"></p><h2>重点回顾</h2><p>今天，我就“任何客户端的东西都不可信任”这个结论，和你讲解了一些有代表性的错误。</p><p>第一，客户端的计算不可信。虽然目前很多项目的前端都是富前端，会做大量的逻辑计算，无需访问服务端接口就可以顺畅完成各种功能，但来自客户端的计算结果不能直接信任。最终在进行业务操作时，客户端只能扮演信息收集的角色，虽然可以将诸如价格等信息传给服务端，但只能用于校对比较，最终要以服务端的计算结果为准。</p><p>第二，所有来自客户端的参数都需要校验判断合法性。即使我们知道用户是在一个下拉列表选择数据，即使我们知道用户通过网页正常操作不可能提交不合法的值，服务端也应该进行参数校验，防止非法用户绕过浏览器UI页面通过工具直接向服务端提交参数。</p><p>第三，除了请求Body中的信息，请求头里的任何信息同样不能信任。我们要知道，来自请求头的IP、Referer和Cookie都有被篡改的可能性，相关数据只能用来参考和记录，不能用作重要业务逻辑。</p><p>第四，如果接口面向外部用户，那么一定不能出现用户标识这样的参数，当前用户的标识一定来自服务端，只有经过身份认证后的用户才会在服务端留下标识。如果你的接口现在面向内部其他服务，那么也要千万小心这样的接口只能内部使用，还可能需要进一步考虑服务端调用方的授权问题。</p><p>安全问题是木桶效应，整个系统的安全等级取决于安全性最薄弱的那个模块。在写业务代码的时候，要从我做起，建立最基本的安全意识，从源头杜绝低级安全问题。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li>在讲述用户标识不能从客户端获取这个要点的时候，我提到开发同学可能会因为用户信息未打通而通过前端来传用户ID。那我们有什么好办法，来打通不同的系统甚至不同网站的用户标识吗？</li>\n<li>还有一类和客户端数据相关的漏洞非常重要，那就是URL地址中的数据。在把匿名用户重定向到登录页面的时候，我们一般会带上redirectUrl，这样用户登录后可以快速返回之前的页面。黑客可能会伪造一个活动链接，由真实的网站+钓鱼的redirectUrl构成，发邮件诱导用户进行登录。用户登录时访问的其实是真的网站，所以不容易察觉到redirectUrl是钓鱼网站，登录后却来到了钓鱼网站，用户可能会不知不觉就把重要信息泄露了。这种安全问题，我们叫做开放重定向问题。你觉得，从代码层面应该怎么预防开放重定向问题呢？</li>\n</ol><p>你还遇到过因为信任HTTP请求中客户端传给服务端的信息导致的安全问题吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把今天的内容分享给你的朋友或同事，一起交流。</p>","comments":[{"had_liked":false,"id":229981,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1593232671,"is_pvip":false,"replies":[{"id":"84894","content":"在把匿名用户重定向到登录页面的时候，我们一般会带上redirectUrl，这样用户登录后可以快速返回之前的页面。黑客可能会伪造一个链接，替换了其中的redirectUrl为钓鱼网站，那么用户登录后就会直接不知不觉来到钓鱼网站。<br><br>有几种解决做法可以参考：<br>第一种，固定重定向的目标URL。<br>第二种，可采用编号方式指定重定向的目标URL，也就是重定向的目标URL只能是在我们的白名单内的。<br>第三种，合理充分的校验校验跳转的目标地址，非己方地址时告知用户跳转风险，小心钓鱼网站的威胁。","user_name":"作者回复","comment_id":229981,"uid":"1001470","ip_address":"","utype":1,"ctime":1593253251,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"66017742111","product_id":100047701,"comment_content":"不太理解老师说到的”真实的网站 + 钓鱼的 redirectUrl“是什么样的情况。为什么在真实的网站中会有黑客的钓鱼连接呢？","like_count":16,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499725,"discussion_content":"在把匿名用户重定向到登录页面的时候，我们一般会带上redirectUrl，这样用户登录后可以快速返回之前的页面。黑客可能会伪造一个链接，替换了其中的redirectUrl为钓鱼网站，那么用户登录后就会直接不知不觉来到钓鱼网站。\n\n有几种解决做法可以参考：\n第一种，固定重定向的目标URL。\n第二种，可采用编号方式指定重定向的目标URL，也就是重定向的目标URL只能是在我们的白名单内的。\n第三种，合理充分的校验校验跳转的目标地址，非己方地址时告知用户跳转风险，小心钓鱼网站的威胁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593253251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372972,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620548544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219199,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1589965421,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23064801901","product_id":100047701,"comment_content":"1. 就是用面试中经常问的单点登录实现。说白了就是把token专门放在一个地方存着，再给客户端个凭证，等客户端需要校验是否登录的时候就用这个凭证去存token的服务器校验下，通过了就直接登录，不通过就跳转到登录页。<br>2. 可以校验下redirectUrl吧","like_count":5,"discussions":[{"author":{"id":1628136,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d7/e8/3b5ad3f6.jpg","nickname":"一行","note":"","ucode":"DB314928FB3E5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312876,"discussion_content":"是的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602841388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2403622,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ad/26/d46f4394.jpg","nickname":"Owen","note":"","ucode":"FDE0D574B8ED5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397584,"discussion_content":"俗称 单登","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632645805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218859,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1589887888,"is_pvip":true,"replies":[{"id":"80873","content":"嗯是jwt 笔误","user_name":"作者回复","comment_id":218859,"uid":"1001470","ip_address":"","utype":1,"ctime":1589889547,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"18769757072","product_id":100047701,"comment_content":"第一个问题：统一登陆获取x-toekn（jwt）  统一鉴权（解析x-toekn），前端请求过网关，网关处理x-toekn，根据x-toekn解析用户ID，用户名等，存放到header中，同时也保留x-toekn，后面的微服务直接获取即可。全局base包，里面定义header中的userid，username，x-toekn等信息，这样既是该服务调用别的服务，别的服务也涉及x-toekn也是可以的。<br><br>第二个问题不知道。<br><br>另外老师给Demon.Lee童鞋写错了  应该是jwt  java web token  不是jtw<br>","like_count":4,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495606,"discussion_content":"嗯是jwt 笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589889547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1163455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/bf/9d6f3645.jpg","nickname":"Single","note":"","ucode":"0FF03512CE2F27","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277578,"discussion_content":"jwt不是json web token吗","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591074098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1163455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/bf/9d6f3645.jpg","nickname":"Single","note":"","ucode":"0FF03512CE2F27","race_medal":4,"user_type":1,"is_pvip":false},"discussion":{"id":278018,"discussion_content":"是的，是的，JSON Web Token","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591144619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277578,"ip_address":""},"score":278018,"extra":""}]}]},{"had_liked":false,"id":218691,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1589855169,"is_pvip":false,"replies":[{"id":"80821","content":"如果网关做了正确的身份认证那么可以相信，一般把用户Token转换为用户ID的这个工作就是由网关来做的，网关后面的微服务无需再处理身份认证的工作","user_name":"作者回复","comment_id":218691,"uid":"1001470","ip_address":"","utype":1,"ctime":1589859976,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"18769724353","product_id":100047701,"comment_content":"1.是统一登录<br>2.老师介绍的这些是说端上的内容不可信，那后层服务呢？假如我问有一个统一的网关，可以确认用户登录，那么我们应该相信网关吗？如果相信，是不是强依赖网关了，网关有问题，服务就有问题。但是如果不相信，网关就起不到作用了","like_count":5,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495544,"discussion_content":"如果网关做了正确的身份认证那么可以相信，一般把用户Token转换为用户ID的这个工作就是由网关来做的，网关后面的微服务无需再处理身份认证的工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589859976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536334,"discussion_content":"网关出问题，降级到本地鉴权","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638761665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220513,"user_name":"ddosyang","can_delete":false,"product_type":"c1","uid":1903226,"ip_address":"","ucode":"DE0FBAB888AA7F","user_header":"","comment_is_top":false,"comment_ctime":1590257057,"is_pvip":false,"replies":[{"id":"81373","content":"是的，我改一下","user_name":"作者回复","comment_id":220513,"uid":"1001470","ip_address":"","utype":1,"ctime":1590281971,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14475158945","product_id":100047701,"comment_content":"第一个订单例子的right方法，第六行是不是应该改为if (!order.getItemPrice().equals(item.getItemPrice()))? 因为是想判断不等于的情况，所以这里是不是漏了一个叹号？","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496160,"discussion_content":"是的，我改一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590281971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218682,"user_name":"fly12580","can_delete":false,"product_type":"c1","uid":1345444,"ip_address":"","ucode":"62F5D0B9776FDF","user_header":"https://static001.geekbang.org/account/avatar/00/14/87/a4/bd373a4a.jpg","comment_is_top":false,"comment_ctime":1589853880,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10179788472","product_id":100047701,"comment_content":"还可以对请求参数进行加密，在服务端进行解析判断。加强安全性。","like_count":1,"discussions":[{"author":{"id":1053532,"avatar":"","nickname":"亮灯","note":"","ucode":"C06505ED58A0E5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274325,"discussion_content":"请求加密的规则在哪里设置？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590568304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218663,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1589851696,"is_pvip":false,"replies":[{"id":"80820","content":"1、可以使用JWT Token进行打通，或走SSO体系<br><br>2、抛砖引玉：<br><br>1）、固定重定向的目标URL；<br>2）、可采用编号方式指定重定向的目标URL；<br>3）、合理充分的校验校验跳转的目标地址，非己方地址时告知用户跳转风险；","user_name":"作者回复","comment_id":218663,"uid":"1001470","ip_address":"","utype":1,"ctime":1589859812,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":1,"score":"10179786288","product_id":100047701,"comment_content":"1. 未想到特别方便的方法，很快就能打通<br>2. 查询资料，一般对redirectUrl进行域名校验，并先跳转到一个统一的页面，并提示用户会离开当前网站，类似的“知乎”，“简书”都是这么设计的。","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495536,"discussion_content":"1、可以使用JWT Token进行打通，或走SSO体系\n\n2、抛砖引玉：\n\n1）、固定重定向的目标URL；\n2）、可采用编号方式指定重定向的目标URL；\n3）、合理充分的校验校验跳转的目标地址，非己方地址时告知用户跳转风险；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589859812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103456,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","nickname":"jacy","note":"","ucode":"0022A8759DDCE6","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409180,"discussion_content":"不能禁止redirect么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635388855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269051,"discussion_content":"我们现在就用到了JWT Token，为啥我就没想到呢，思维举一反三好难啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589860751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218690,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1589855095,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5884822391","product_id":100047701,"comment_content":"讨论题，谈谈我的不成熟想法。<br>1.不同系统用户标示，可以采用设备ID。或者采用统一的登陆系统来标示用户。<br>2.开放重定向问题，首先，不能采用传来的url作为redirect的base url。其次，redirect url写全包含host。不知还有没有其它防御手段？<br>","like_count":1},{"had_liked":false,"id":314953,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1633611135,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1633611135","product_id":100047701,"comment_content":"1.第一个问题，可以使用JWT Token，但是要做好Token的签名、验签工作。原始的JWT，貌似是Base64编码就完事了。<br>2.第二个问题，前司主要是开发OAuth2的。redirectUrl由用户提供，然后由我方运维人员进行录入。其实就是白名单方式。","like_count":0},{"had_liked":false,"id":269952,"user_name":"鹏程万里","can_delete":false,"product_type":"c1","uid":1114675,"ip_address":"","ucode":"5E23BBEC9E8209","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/33/57678ea3.jpg","comment_is_top":false,"comment_ctime":1608862693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608862693","product_id":100047701,"comment_content":"第二个demo，如果request里没有设置商品价格非空，用前段传进来的商品价格.equals有可能空指针的，对于业务字段是不是都应该判空后再使用？","like_count":1},{"had_liked":false,"id":262631,"user_name":"Hex","can_delete":false,"product_type":"c1","uid":1140780,"ip_address":"","ucode":"55F29EEF937D09","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/2c/ec17f23b.jpg","comment_is_top":false,"comment_ctime":1605787475,"is_pvip":false,"replies":[{"id":"95316","content":"检验还是要做","user_name":"作者回复","comment_id":262631,"uid":"1001470","ip_address":"","utype":1,"ctime":1605829204,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"1605787475","product_id":100047701,"comment_content":"一般客户端参数都会进行加密传输到服务端，如果选择安全性高的加密方案，是不是可以解决大部分参数不可信的问题？","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509906,"discussion_content":"检验还是要做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605829204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255390,"user_name":"Geek_6d1afa","can_delete":false,"product_type":"c1","uid":2015373,"ip_address":"","ucode":"982CC3EC8683BF","user_header":"","comment_is_top":false,"comment_ctime":1603334216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603334216","product_id":100047701,"comment_content":"第一个问题可以对用户标识做非对称加密处理","like_count":0}]}