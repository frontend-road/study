{"id":18119,"title":"08 | 白话容器基础（四）：重新认识Docker容器","content":"<p>你好，我是张磊。今天我和你分享的主题是：白话容器基础之重新认识Docker容器。</p><p>在前面的三次分享中，我分别从Linux Namespace的隔离能力、Linux Cgroups的限制能力，以及基于rootfs的文件系统三个角度，为你剖析了一个Linux容器的核心实现原理。</p><blockquote>\n<p>备注：之所以要强调Linux容器，是因为比如Docker on Mac，以及Windows Docker（Hyper-V实现），实际上是基于虚拟化技术实现的，跟我们这个专栏着重介绍的Linux容器完全不同。</p>\n</blockquote><p>而在今天的分享中，我会通过一个实际案例，对“白话容器基础”系列的所有内容做一次深入的总结和扩展。希望通过这次的讲解，能够让你更透彻地理解Docker容器的本质。</p><p>在开始实践之前，你需要准备一台Linux机器，并安装Docker。这个流程我就不再赘述了。</p><p>这一次，<span class=\"orange\">我要用Docker部署一个用Python编写的Web应用</span>。这个应用的代码部分（<code>app.py</code>）非常简单：</p><pre><code>from flask import Flask\nimport socket\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    html = &quot;&lt;h3&gt;Hello {name}!&lt;/h3&gt;&quot; \\\n           &quot;&lt;b&gt;Hostname:&lt;/b&gt; {hostname}&lt;br/&gt;&quot;           \n    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname())\n    \nif __name__ == &quot;__main__&quot;:\n    app.run(host='0.0.0.0', port=80)\n</code></pre><p>在这段代码中，我使用Flask框架启动了一个Web服务器，而它唯一的功能是：如果当前环境中有“NAME”这个环境变量，就把它打印在“Hello”之后，否则就打印“Hello world”，最后再打印出当前环境的hostname。</p><!-- [[[read_end]]] --><p>这个应用的依赖，则被定义在了同目录下的requirements.txt文件里，内容如下所示：</p><pre><code>$ cat requirements.txt\nFlask\n</code></pre><p><strong>而将这样一个应用容器化的第一步，是制作容器镜像。</strong></p><p>不过，相较于我之前介绍的制作rootfs的过程，Docker为你提供了一种更便捷的方式，叫作Dockerfile，如下所示。</p><pre><code># 使用官方提供的Python开发镜像作为基础镜像\nFROM python:2.7-slim\n\n# 将工作目录切换为/app\nWORKDIR /app\n\n# 将当前目录下的所有内容复制到/app下\nADD . /app\n\n# 使用pip命令安装这个应用所需要的依赖\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# 允许外界访问容器的80端口\nEXPOSE 80\n\n# 设置环境变量\nENV NAME World\n\n# 设置容器进程为：python app.py，即：这个Python应用的启动命令\nCMD [&quot;python&quot;, &quot;app.py&quot;]\n</code></pre><p>通过这个文件的内容，你可以看到<strong>Dockerfile的设计思想，是使用一些标准的原语（即大写高亮的词语），描述我们所要构建的Docker镜像。并且这些原语，都是按顺序处理的。</strong></p><p>比如FROM原语，指定了“python:2.7-slim”这个官方维护的基础镜像，从而免去了安装Python等语言环境的操作。否则，这一段我们就得这么写了：</p><pre><code>FROM ubuntu:latest\nRUN apt-get update -yRUN apt-get install -y python-pip python-dev build-essential\n...\n</code></pre><p>其中，RUN原语就是在容器里执行shell命令的意思。</p><p>而WORKDIR，意思是在这一句之后，Dockerfile后面的操作都以这一句指定的/app目录作为当前目录。</p><p>所以，到了最后的CMD，意思是Dockerfile指定python app.py为这个容器的进程。这里，app.py的实际路径是/app/app.py。所以，<code>CMD [\"python\", \"app.py\"]</code>等价于\"<code>docker run &lt;image&gt; python app.py</code>\"。</p><p>另外，在使用Dockerfile时，你可能还会看到一个叫作ENTRYPOINT的原语。实际上，它和CMD都是Docker容器进程启动所必需的参数，完整执行格式是：“ENTRYPOINT CMD”。</p><p>但是，默认情况下，Docker会为你提供一个隐含的ENTRYPOINT，即：/bin/sh -c。所以，在不指定ENTRYPOINT时，比如在我们这个例子里，实际上运行在容器里的完整进程是：<code>/bin/sh -c \"python app.py\"</code>，即CMD的内容就是ENTRYPOINT的参数。</p><blockquote>\n<p>备注：基于以上原因，<strong>我们后面会统一称Docker容器的启动进程为ENTRYPOINT，而不是CMD。</strong></p>\n</blockquote><p>需要注意的是，Dockerfile里的原语并不都是指对容器内部的操作。就比如ADD，它指的是把当前目录（即Dockerfile所在的目录）里的文件，复制到指定容器内的目录当中。</p><p>读懂这个Dockerfile之后，我再把上述内容，保存到当前目录里一个名叫“Dockerfile”的文件中：</p><pre><code>$ ls\nDockerfile  app.py   requirements.txt\n</code></pre><p>接下来，我就可以让Docker制作这个镜像了，在当前目录执行：</p><pre><code>$ docker build -t helloworld .\n</code></pre><p>其中，-t的作用是给这个镜像加一个Tag，即：起一个好听的名字。docker build会自动加载当前目录下的Dockerfile文件，然后按照顺序，执行文件中的原语。而这个过程，实际上可以等同于Docker使用基础镜像启动了一个容器，然后在容器中依次执行Dockerfile中的原语。</p><p><strong>需要注意的是，Dockerfile中的每个原语执行后，都会生成一个对应的镜像层</strong>。即使原语本身并没有明显地修改文件的操作（比如，ENV原语），它对应的层也会存在。只不过在外界看来，这个层是空的。</p><p>docker build操作完成后，我可以通过docker images命令查看结果：</p><pre><code>$ docker image ls\n\nREPOSITORY            TAG                 IMAGE ID\nhelloworld         latest              653287cdf998\n</code></pre><p>通过这个镜像ID，你就可以使用在<a href=\"https://time.geekbang.org/column/article/17921\">《白话容器基础（三）：深入理解容器镜像》</a>中讲过的方法，查看这些新增的层在AuFS路径下对应的文件和目录了。</p><p><strong>接下来，我使用这个镜像，通过docker run命令启动容器：</strong></p><pre><code>$ docker run -p 4000:80 helloworld\n</code></pre><p>在这一句命令中，镜像名helloworld后面，我什么都不用写，因为在Dockerfile中已经指定了CMD。否则，我就得把进程的启动命令加在后面：</p><pre><code>$ docker run -p 4000:80 helloworld python app.py\n</code></pre><p>容器启动之后，我可以使用docker ps命令看到：</p><pre><code>$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED\n4ddf4638572d        helloworld       &quot;python app.py&quot;     10 seconds ago\n</code></pre><p>同时，我已经通过-p 4000:80告诉了Docker，请把容器内的80端口映射在宿主机的4000端口上。</p><p>这样做的目的是，只要访问宿主机的4000端口，我就可以看到容器里应用返回的结果：</p><pre><code>$ curl http://localhost:4000\n&lt;h3&gt;Hello World!&lt;/h3&gt;&lt;b&gt;Hostname:&lt;/b&gt; 4ddf4638572d&lt;br/&gt;\n</code></pre><p>否则，我就得先用docker inspect命令查看容器的IP地址，然后访问“http://&lt;容器IP地址&gt;:80”才可以看到容器内应用的返回。</p><p>至此，我已经使用容器完成了一个应用的开发与测试，如果现在想要把这个容器的镜像上传到DockerHub上分享给更多的人，我要怎么做呢？</p><p>为了能够上传镜像，<strong>我首先需要注册一个Docker Hub账号，然后使用docker login命令登录</strong>。</p><p>接下来，我要<strong>用docker tag命令给容器镜像起一个完整的名字</strong>：</p><pre><code>$ docker tag helloworld geektime/helloworld:v1\n</code></pre><blockquote>\n<p>注意：你自己做实验时，请将\"geektime\"替换成你自己的Docker Hub账户名称，比如zhangsan/helloworld:v1</p>\n</blockquote><p>其中，geektime是我在Docker Hub上的用户名，它的“学名”叫镜像仓库（Repository）；“/”后面的helloworld是这个镜像的名字，而“v1”则是我给这个镜像分配的版本号。</p><p><strong>然后，我执行docker push：</strong></p><pre><code>$ docker push geektime/helloworld:v1\n</code></pre><p>这样，我就可以把这个镜像上传到Docker Hub上了。</p><p>此外，我还可以使用docker commit指令，把一个正在运行的容器，直接提交为一个镜像。一般来说，需要这么操作原因是：这个容器运行起来后，我又在里面做了一些操作，并且要把操作结果保存到镜像里，比如：</p><pre><code>$ docker exec -it 4ddf4638572d /bin/sh\n# 在容器内部新建了一个文件\nroot@4ddf4638572d:/app# touch test.txt\nroot@4ddf4638572d:/app# exit\n\n#将这个新建的文件提交到镜像中保存\n$ docker commit 4ddf4638572d geektime/helloworld:v2\n</code></pre><p>这里，我使用了docker exec命令进入到了容器当中。在了解了Linux Namespace的隔离机制后，你应该会很自然地想到一个问题：<span class=\"orange\">docker exec是怎么做到进入容器里的呢？</span></p><p>实际上，Linux Namespace创建的隔离空间虽然看不见摸不着，但一个进程的Namespace信息在宿主机上是确确实实存在的，并且是以一个文件的方式存在。</p><p>比如，通过如下指令，你可以看到当前正在运行的Docker容器的进程号（PID）是25686：</p><pre><code>$ docker inspect --format '{{ .State.Pid }}'  4ddf4638572d\n25686\n</code></pre><p>这时，你可以通过查看宿主机的proc文件，看到这个25686进程的所有Namespace对应的文件：</p><pre><code>$ ls -l  /proc/25686/ns\ntotal 0\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 cgroup -&gt; cgroup:[4026531835]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 ipc -&gt; ipc:[4026532278]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 mnt -&gt; mnt:[4026532276]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 net -&gt; net:[4026532281]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 pid -&gt; pid:[4026532279]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 pid_for_children -&gt; pid:[4026532279]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 user -&gt; user:[4026531837]\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 uts -&gt; uts:[4026532277]\n</code></pre><p>可以看到，一个进程的每种Linux Namespace，都在它对应的/proc/[进程号]/ns下有一个对应的虚拟文件，并且链接到一个真实的Namespace文件上。</p><p>有了这样一个可以“hold住”所有Linux Namespace的文件，我们就可以对Namespace做一些很有意义事情了，比如：加入到一个已经存在的Namespace当中。</p><p><strong>这也就意味着：一个进程，可以选择加入到某个进程已有的Namespace当中，从而达到“进入”这个进程所在容器的目的，这正是docker exec的实现原理。</strong></p><p>而这个操作所依赖的，乃是一个名叫setns()的Linux系统调用。它的调用方法，我可以用如下一段小程序为你说明：</p><pre><code>#define _GNU_SOURCE\n#include &lt;fcntl.h&gt;\n#include &lt;sched.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\n#define errExit(msg) do { perror(msg); exit(EXIT_FAILURE);} while (0)\n\nint main(int argc, char *argv[]) {\n    int fd;\n    \n    fd = open(argv[1], O_RDONLY);\n    if (setns(fd, 0) == -1) {\n        errExit(&quot;setns&quot;);\n    }\n    execvp(argv[2], &amp;argv[2]); \n    errExit(&quot;execvp&quot;);\n}\n</code></pre><p>这段代码功能非常简单：它一共接收两个参数，第一个参数是argv[1]，即当前进程要加入的Namespace文件的路径，比如/proc/25686/ns/net；而第二个参数，则是你要在这个Namespace里运行的进程，比如/bin/bash。</p><p>这段代码的核心操作，则是通过open()系统调用打开了指定的Namespace文件，并把这个文件的描述符fd交给setns()使用。在setns()执行后，当前进程就加入了这个文件对应的Linux Namespace当中了。</p><p>现在，你可以编译执行一下这个程序，加入到容器进程（PID=25686）的Network Namespace中：</p><pre><code>$ gcc -o set_ns set_ns.c \n$ ./set_ns /proc/25686/ns/net /bin/bash \n$ ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:12 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:10 errors:0 dropped:0 overruns:0 carrier:0\n\t   collisions:0 txqueuelen:0 \n          RX bytes:976 (976.0 B)  TX bytes:796 (796.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n\t  collisions:0 txqueuelen:1000 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n</code></pre><p>正如上所示，当我们执行ifconfig命令查看网络设备时，我会发现能看到的网卡“变少”了：只有两个。而我的宿主机则至少有四个网卡。这是怎么回事呢？</p><p>实际上，在setns()之后我看到的这两个网卡，正是我在前面启动的Docker容器里的网卡。也就是说，我新创建的这个/bin/bash进程，由于加入了该容器进程（PID=25686）的Network Namepace，它看到的网络设备与这个容器里是一样的，即：/bin/bash进程的网络设备视图，也被修改了。</p><p>而一旦一个进程加入到了另一个Namespace当中，在宿主机的Namespace文件上，也会有所体现。</p><p>在宿主机上，你可以用ps指令找到这个set_ns程序执行的/bin/bash进程，其真实的PID是28499：</p><pre><code># 在宿主机上\nps aux | grep /bin/bash\nroot     28499  0.0  0.0 19944  3612 pts/0    S    14:15   0:00 /bin/bash\n</code></pre><p>这时，如果按照前面介绍过的方法，查看一下这个PID=28499的进程的Namespace，你就会发现这样一个事实：</p><pre><code>$ ls -l /proc/28499/ns/net\nlrwxrwxrwx 1 root root 0 Aug 13 14:18 /proc/28499/ns/net -&gt; net:[4026532281]\n\n$ ls -l  /proc/25686/ns/net\nlrwxrwxrwx 1 root root 0 Aug 13 14:05 /proc/25686/ns/net -&gt; net:[4026532281]\n</code></pre><p>在/proc/[PID]/ns/net目录下，这个PID=28499进程，与我们前面的Docker容器进程（PID=25686）指向的Network Namespace文件完全一样。这说明这两个进程，共享了这个名叫net:[4026532281]的Network Namespace。</p><p>此外，Docker还专门提供了一个参数，可以让你启动一个容器并“加入”到另一个容器的Network Namespace里，这个参数就是-net，比如:</p><pre><code>$ docker run -it --net container:4ddf4638572d busybox ifconfig\n</code></pre><p>这样，我们新启动的这个容器，就会直接加入到ID=4ddf4638572d的容器，也就是我们前面的创建的Python应用容器（PID=25686）的Network Namespace中。所以，这里ifconfig返回的网卡信息，跟我前面那个小程序返回的结果一模一样，你也可以尝试一下。</p><p>而如果我指定–net=host，就意味着这个容器不会为进程启用Network Namespace。这就意味着，这个容器拆除了Network Namespace的“隔离墙”，所以，它会和宿主机上的其他普通进程一样，直接共享宿主机的网络栈。这就为容器直接操作和使用宿主机网络提供了一个渠道。</p><p><strong>转了一个大圈子，我其实是为你详细解读了docker exec这个操作背后，Linux Namespace更具体的工作原理。</strong></p><p><strong>这种通过操作系统进程相关的知识，逐步剖析Docker容器的方法，是理解容器的一个关键思路，希望你一定要掌握。</strong></p><p>现在，我们再一起回到前面提交镜像的操作docker commit上来吧。</p><p>docker commit，实际上就是在容器运行起来后，把最上层的“可读写层”，加上原先容器镜像的只读层，打包组成了一个新的镜像。当然，下面这些只读层在宿主机上是共享的，不会占用额外的空间。</p><p>而由于使用了联合文件系统，你在容器里对镜像rootfs所做的任何修改，都会被操作系统先复制到这个可读写层，然后再修改。这就是所谓的：Copy-on-Write。</p><p>而正如前所说，Init层的存在，就是为了避免你执行docker commit时，把Docker自己对/etc/hosts等文件做的修改，也一起提交掉。</p><p>有了新的镜像，我们就可以把它推送到Docker Hub上了：</p><pre><code>$ docker push geektime/helloworld:v2\n</code></pre><p>你可能还会有这样的问题：我在企业内部，能不能也搭建一个跟Docker Hub类似的镜像上传系统呢？</p><p>当然可以，这个统一存放镜像的系统，就叫作Docker Registry。感兴趣的话，你可以查看<a href=\"https://docs.docker.com/registry/\">Docker的官方文档</a>，以及<a href=\"https://github.com/goharbor/harbor\">VMware的Harbor项目</a>。</p><p><span class=\"orange\">最后，我再来讲解一下Docker项目另一个重要的内容：Volume（数据卷）。</span></p><p>前面我已经介绍过，容器技术使用了rootfs机制和Mount Namespace，构建出了一个同宿主机完全隔离开的文件系统环境。这时候，我们就需要考虑这样两个问题：</p><ol>\n<li>\n<p>容器里进程新建的文件，怎么才能让宿主机获取到？</p>\n</li>\n<li>\n<p>宿主机上的文件和目录，怎么才能让容器里的进程访问到？</p>\n</li>\n</ol><p>这正是Docker Volume要解决的问题：<strong>Volume机制，允许你将宿主机上指定的目录或者文件，挂载到容器里面进行读取和修改操作。</strong></p><p>在Docker项目里，它支持两种Volume声明方式，可以把宿主机目录挂载进容器的/test目录当中：</p><pre><code>$ docker run -v /test ...\n$ docker run -v /home:/test ...\n</code></pre><p>而这两种声明方式的本质，实际上是相同的：都是把一个宿主机的目录挂载进了容器的/test目录。</p><p>只不过，在第一种情况下，由于你并没有显示声明宿主机目录，那么Docker就会默认在宿主机上创建一个临时目录 /var/lib/docker/volumes/[VOLUME_ID]/_data，然后把它挂载到容器的/test目录上。而在第二种情况下，Docker就直接把宿主机的/home目录挂载到容器的/test目录上。</p><p>那么，Docker又是如何做到把一个宿主机上的目录或者文件，挂载到容器里面去呢？难道又是Mount Namespace的黑科技吗？</p><p>实际上，并不需要这么麻烦。</p><p>在《白话容器基础（三）：深入理解容器镜像》的分享中，我已经介绍过，当容器进程被创建之后，尽管开启了Mount Namespace，但是在它执行chroot（或者pivot_root）之前，容器进程一直可以看到宿主机上的整个文件系统。</p><p>而宿主机上的文件系统，也自然包括了我们要使用的容器镜像。这个镜像的各个层，保存在/var/lib/docker/aufs/diff目录下，在容器进程启动后，它们会被联合挂载在/var/lib/docker/aufs/mnt/目录中，这样容器所需的rootfs就准备好了。</p><p>所以，我们只需要在rootfs准备好之后，在执行chroot之前，把Volume指定的宿主机目录（比如/home目录），挂载到指定的容器目录（比如/test目录）在宿主机上对应的目录（即/var/lib/docker/aufs/mnt/[可读写层ID]/test）上，这个Volume的挂载工作就完成了。</p><p>更重要的是，由于执行这个挂载操作时，“容器进程”已经创建了，也就意味着此时Mount Namespace已经开启了。所以，这个挂载事件只在这个容器里可见。你在宿主机上，是看不见容器内部的这个挂载点的。这就<strong>保证了容器的隔离性不会被Volume打破</strong>。</p><blockquote>\n<p>注意：这里提到的\"容器进程\"，是Docker创建的一个容器初始化进程(dockerinit)，而不是应用进程(ENTRYPOINT + CMD)。dockerinit会负责完成根目录的准备、挂载设备和目录、配置hostname等一系列需要在容器内进行的初始化操作。最后，它通过execv()系统调用，让应用进程取代自己，成为容器里的PID=1的进程。</p>\n</blockquote><p>而这里要使用到的挂载技术，就是Linux的<strong>绑定挂载（bind mount）机制</strong>。它的主要作用就是，允许你将一个目录或者文件，而不是整个设备，挂载到一个指定的目录上。并且，这时你在该挂载点上进行的任何操作，只是发生在被挂载的目录或者文件上，而原挂载点的内容则会被隐藏起来且不受影响。</p><p>其实，如果你了解Linux 内核的话，就会明白，绑定挂载实际上是一个inode替换的过程。在Linux操作系统中，inode可以理解为存放文件内容的“对象”，而dentry，也叫目录项，就是访问这个inode所使用的“指针”。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/c6/95c957b3c2813bb70eb784b8d1daedc6.png?wh=1497*342\" alt=\"\"><br>\n正如上图所示，mount --bind /home /test，会将/home挂载到/test上。其实相当于将/test的dentry，重定向到了/home的inode。这样当我们修改/test目录时，实际修改的是/home目录的inode。这也就是为何，一旦执行umount命令，/test目录原先的内容就会恢复：因为修改真正发生在的，是/home目录里。</p><p><strong>所以，在一个正确的时机，进行一次绑定挂载，Docker就可以成功地将一个宿主机上的目录或文件，不动声色地挂载到容器中。</strong></p><p>这样，进程在容器里对这个/test目录进行的所有操作，都实际发生在宿主机的对应目录（比如，/home，或者/var/lib/docker/volumes/[VOLUME_ID]/_data）里，而不会影响容器镜像的内容。</p><p>那么，这个/test目录里的内容，既然挂载在容器rootfs的可读写层，它会不会被docker commit提交掉呢？</p><p>也不会。</p><p>这个原因其实我们前面已经提到过。容器的镜像操作，比如docker commit，都是发生在宿主机空间的。而由于Mount Namespace的隔离作用，宿主机并不知道这个绑定挂载的存在。所以，在宿主机看来，容器中可读写层的/test目录（/var/lib/docker/aufs/mnt/[可读写层ID]/test），<strong>始终是空的。</strong></p><p>不过，由于Docker一开始还是要创建/test这个目录作为挂载点，所以执行了docker commit之后，你会发现新产生的镜像里，会多出来一个空的/test目录。毕竟，新建目录操作，又不是挂载操作，Mount Namespace对它可起不到“障眼法”的作用。</p><p>结合以上的讲解，我们现在来亲自验证一下：</p><p>首先，启动一个helloworld容器，给它声明一个Volume，挂载在容器里的/test目录上：</p><pre><code>$ docker run -d -v /test helloworld\ncf53b766fa6f\n</code></pre><p>容器启动之后，我们来查看一下这个Volume的ID：</p><pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               cb1c2f7221fa9b0971cc35f68aa1034824755ac44a034c0c0a1dd318838d3a6d\n</code></pre><p>然后，使用这个ID，可以找到它在Docker工作目录下的volumes路径：</p><pre><code>$ ls /var/lib/docker/volumes/cb1c2f7221fa/_data/\n</code></pre><p>这个_data文件夹，就是这个容器的Volume在宿主机上对应的临时目录了。</p><p>接下来，我们在容器的Volume里，添加一个文件text.txt：</p><pre><code>$ docker exec -it cf53b766fa6f /bin/sh\ncd test/\ntouch text.txt\n</code></pre><p>这时，我们再回到宿主机，就会发现text.txt已经出现在了宿主机上对应的临时目录里：</p><pre><code>$ ls /var/lib/docker/volumes/cb1c2f7221fa/_data/\ntext.txt\n</code></pre><p>可是，如果你在宿主机上查看该容器的可读写层，虽然可以看到这个/test目录，但其内容是空的（关于如何找到这个AuFS文件系统的路径，请参考我上一次分享的内容）：</p><pre><code>$ ls /var/lib/docker/aufs/mnt/6780d0778b8a/test\n</code></pre><p>可以确认，容器Volume里的信息，并不会被docker commit提交掉；但这个挂载点目录/test本身，则会出现在新的镜像当中。</p><p>以上内容，就是Docker Volume的核心原理了。</p><h2>总结</h2><p>在今天的这次分享中，我用了一个非常经典的Python应用作为案例，讲解了Docke容器使用的主要场景。熟悉了这些操作，你也就基本上摸清了Docker容器的核心功能。</p><p>更重要的是，我着重介绍了如何使用Linux Namespace、Cgroups，以及rootfs的知识，对容器进行了一次庖丁解牛似的解读。</p><p>借助这种思考问题的方法，最后的Docker容器，我们实际上就可以用下面这个“全景图”描述出来：</p><p><img src=\"https://static001.geekbang.org/resource/image/31/e5/3116751445d182687ce496f2825117e5.jpg?wh=2398*1419\" alt=\"\"></p><p>这个容器进程<code>“python app.py”</code>，运行在由Linux Namespace和Cgroups构成的隔离环境里；而它运行所需要的各种文件，比如python，<code>app.py</code>，以及整个操作系统文件，则由多个联合挂载在一起的rootfs层提供。</p><p>这些rootfs层的最下层，是来自Docker镜像的只读层。</p><p>在只读层之上，是Docker自己添加的Init层，用来存放被临时修改过的/etc/hosts等文件。</p><p>而rootfs的最上层是一个可读写层，它以Copy-on-Write的方式存放任何对只读层的修改，容器声明的Volume的挂载点，也出现在这一层。</p><p>通过这样的剖析，对于曾经“神秘莫测”的容器技术，你是不是感觉清晰了很多呢？</p><h2>思考题</h2><ol>\n<li>\n<p>你在查看Docker容器的Namespace时，是否注意到有一个叫cgroup的Namespace？它是Linux 4.6之后新增加的一个Namespace，你知道它的作用吗？</p>\n</li>\n<li>\n<p>如果你执行docker run -v /home:/test的时候，容器镜像里的/test目录下本来就有内容的话，你会发现，在宿主机的/home目录下，也会出现这些内容。这是怎么回事？为什么它们没有被绑定挂载隐藏起来呢？（提示：Docker的“copyData”功能）</p>\n</li>\n<li>\n<p>请尝试给这个Python应用加上CPU和Memory限制，然后启动它。根据我们前面介绍的Cgroups的知识，请你查看一下这个容器的Cgroups文件系统的设置，是不是跟我前面的讲解一致。</p>\n</li>\n</ol><p>感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。</p>","neighbors":{"left":{"article_title":"07 | 白话容器基础（三）：深入理解容器镜像","id":17921},"right":{"article_title":"09 | 从容器到容器云：谈谈Kubernetes的本质","id":23132}},"comments":[{"had_liked":false,"id":23599,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1536541183,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"727386014207","product_id":100015201,"comment_content":"这样把原理刨根究底的讲解出来，很好，理解的很透彻","like_count":169,"discussions":[{"author":{"id":1085180,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/fc/69c6687a.jpg","nickname":"前行","note":"","ucode":"DB33413371FAED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562899,"discussion_content":"有种豁然开朗的感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649905306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24129,"user_name":"兽医","can_delete":false,"product_type":"c1","uid":1182170,"ip_address":"","ucode":"F6C3ADAA409245","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/da/2fbd0760.jpg","comment_is_top":false,"comment_ctime":1536816591,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"607127205327","product_id":100015201,"comment_content":"讲得非常不错，曾经翻遍了几乎所有Docker官方文档，都没教程中来得深刻，谢谢。。","like_count":142,"discussions":[{"author":{"id":1053535,"avatar":"","nickname":"草泥马的兄贵","note":"","ucode":"50A4592BD942AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3332,"discussion_content":"老哥。。。人家是docker贡献者之一。。。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1564401230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2057451,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/64/eb/732e9707.jpg","nickname":"青苹果","note":"","ucode":"D85EE1743F9CC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376350,"discussion_content":"确实在文档里读不到教程这么循序渐进讲解的内容，这也是我们买教程的核心价值吧，在短时间内能读到整理好的文档里不容易读到或者需要自己摸索很久才能学到的东西","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1622088635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396503,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4f/17/2185685f.jpg","nickname":"Zhangxuesong","note":"","ucode":"F5C4C3AC9429AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295674,"discussion_content":"片面了 兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596283725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242213,"user_name":"ch_ort","can_delete":false,"product_type":"c1","uid":1580926,"ip_address":"","ucode":"B79746E687F29E","user_header":"","comment_is_top":false,"comment_ctime":1597634850,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"439684299042","product_id":100015201,"comment_content":"容器的本质是一个进程，只不过这个进程加上了视图上的隔离和资源上的限制。 就容器本质而言，它并没有在宿主机上启动一个“容器进程”，它启动的还是用户原来要启动的应用程序，只不过这个应用程序上加了视图隔离和资源限制。虚拟机也能实现视图隔离和资源限制，但它底层的技术实现与容器不同，在宿主机上你能看到这样一个“虚拟机进程”。因此，与容器相比，虚拟机会带来更多的性能损耗，主要在（1）虚拟机本身的进程需要占用一部分资源 （2）与底层硬件交互的时候（网络、磁盘I&#47;O）都需要经过虚拟化软件拦截，会有损耗。但是它比容器有更好的隔离性和安全性。<br><br>容器使用的底层技术：（1）视图隔离：Namespace （2）资源限制：cgropus<br><br>对于Docker项目来说，它最核心的原理实际就是为待创建的用户进程：<br>1、启用Linux Namespace配置：视图隔离<br>2、设置指定的Cgroups参数：资源限制<br>3、切换进程的根目录（Change Root）：容器镜像生效，以实现环境一致性。所谓容器镜像，本质就是容器的根文件系统(rootfs)。<br><br>Docker容器的增量rootfs：即下层已经生成的永远不会改变，所有的修改都通过在上层叠加。比如，删除A文件，就是在上层添加一个“白障”，让系统无法读取到下层A文件。修改则是先copy一个备份到新的层（新老的文件可能都在可读写层），然后读取的时候直接读取新的层。<br><br>Docker通过Volume来实现将宿主机的文件挂载到容器中<br>","like_count":103,"discussions":[{"author":{"id":2857352,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/99/88/9235342e.jpg","nickname":"康英杰","note":"","ucode":"B06A00CACB0D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535702,"discussion_content":"“容器进程”的确是在宿主机上启动了，但在完成了容器的初始化后，通过execv将用户应用程序注入了“容器进程”，“容器进程”跑的代码就从容器初始化代码替换为了用户代码，所以这个过程从始至终只有这一个进程，只是进程里面执行的内容发生了一次变化，容器的本质就是这个进程。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1638520786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23638,"user_name":"黄文刚 ","can_delete":false,"product_type":"c1","uid":1059335,"ip_address":"","ucode":"ABB06219AF5F8A","user_header":"https://static001.geekbang.org/account/avatar/00/10/2a/07/74b3c14a.jpg","comment_is_top":false,"comment_ctime":1536561852,"is_pvip":false,"replies":[{"id":"8611","content":"单靠容器，在隔离开的情况下是拿不到的。但是有了kubernetes之后这些系统信息都可以从环境变量里拿到。这个功能叫downwardapi","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536582582,"ip_address":"","comment_id":23638,"utype":1}],"discussion_count":4,"race_medal":0,"score":"297889305276","product_id":100015201,"comment_content":"收货很大，感谢张磊！请教一个问题，请问在容器内部如何获取宿主机的IP? 谢谢。","like_count":69,"discussions":[{"author":{"id":1068843,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/2b/da7efc7e.jpg","nickname":"cloudy","note":"","ucode":"60A0731E442024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333927,"discussion_content":"docker run --env参数手动设置宿主机的ip，程序中用getenv()获取","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1607674601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423654,"discussion_content":"单靠容器，在隔离开的情况下是拿不到的。但是有了kubernetes之后这些系统信息都可以从环境变量里拿到。这个功能叫downwardapi","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1536582582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2546738,"avatar":"https://static001.geekbang.org/account/avatar/00/26/dc/32/696228c6.jpg","nickname":"韩晓峰","note":"","ucode":"4FDF56E1D11B86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364175,"discussion_content":"讲的挺好，原理解释的非常详细","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617376980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1546001,"avatar":"https://static001.geekbang.org/account/avatar/00/17/97/11/deed3e39.jpg","nickname":"木可","note":"","ucode":"C3E82838AFA7F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5990,"discussion_content":"这个可以在docker里面通过路由的方式拿到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566569164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24695,"user_name":"多肉","can_delete":false,"product_type":"c1","uid":1228219,"ip_address":"","ucode":"EF0805E34339D6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicBibF1UEOAhicickjCRXzVBDDyAMTw5C7EP3IPSKyTqWjvtmicB4AFu0B72BVyxFAVnNHrbx672p2Ow/132","comment_is_top":false,"comment_ctime":1537186464,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"246350322336","product_id":100015201,"comment_content":"一切从问题出发，根据问题理解答案，总结问题如下:<br>一、docker镜像如何制作的两种方式是什么？<br>二、容器既然是一个封闭的进程，那么外接程序是如何进入容器这个进程的呢？<br>三、docker commit对挂载点volume内容修改的影响是什么？<br>四、容器与宿主机如何进行文件读写？或volume是为了解决什么题？<br>五、Docker的copyData功能是什么？解决了什么问题？<br>六、bind mount机制是什么？<br>七、cgroup Namespace的作用是什么？","like_count":57,"discussions":[{"author":{"id":1906866,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/18/b2/a3d557fd.jpg","nickname":"流年似水。","note":"","ucode":"C4E1021A325699","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288796,"discussion_content":"关于第四个问题我是这样理解的,首先我们需要知道Docker的文件系统是如何工作的.Docker镜像是由多个文件系统(只读层)叠加而成.当我们启动一个容器的时候,\n\nDocker会加载镜像层并在其上添加一个读写层.如果运行中的容器修改了现有的一个已存在的文件,那该文件将会从读写层下的只读层复制到读写层,\n\n该文件的只读版本仍然存在,只是已经被读写层中该文件的副本所隐藏.当删除Docker容器,并通过该镜像重新启动时,之前的更改将会丢失.在Docker中,\n\n只读层以及在顶部的读写层的组合被称为Union FIle System(联合文件系统).为了能够保存(持久化)数据以及共享容器间的数据,Docker提出了Volume的概念.\n\n简单来说,Volume就是目录或者文件,它可以绕过默认的联合文件系统,而以正常的文件或者目录的形式存在于宿主机上","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1593873511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226761,"avatar":"https://static001.geekbang.org/account/avatar/00/21/fa/49/df55e63f.jpg","nickname":"꯭淡꯭青꯭","note":"","ucode":"83612DFBBD8E63","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565279,"discussion_content":"第二个问题我试了一下, docker entry point 和之后的exec 执行的命令的pid都是0 , 也就是说这是两个平级且互不相干的进程,  我理解这两个就是在同一个namespace下, 并且rootfs也一样,","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650425334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1580926,"avatar":"","nickname":"ch_ort","note":"","ucode":"B79746E687F29E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299267,"discussion_content":"有问题的，按照你的描述：\n“如果运行中的容器修改了现有的一个已存在的文件,那该文件将会从读写层下的只读层复制到读写层” -> 文件只会在只读层复制到读写层吗？ 不能从读写层复制到读写层？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597635034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23658,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1536576205,"is_pvip":true,"discussion_count":11,"race_medal":0,"score":"173335268045","product_id":100015201,"comment_content":"有预感专栏会破2万","like_count":40,"discussions":[{"author":{"id":1203834,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5e/7a/028dc1a9.jpg","nickname":"修罗","note":"","ucode":"9C25F94C40285F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":99660,"discussion_content":"可能不止哦，kubernetes 发展起来后，可能更多","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577201847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/2e/abb7bfe3.jpg","nickname":"凉凉","note":"","ucode":"EC16C8D70D2AB8","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7050,"discussion_content":"兄弟你的预测很准哦","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1567323747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1751859,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/bb/33/5545b42e.jpg","nickname":"Bobo","note":"","ucode":"23102FBE943515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344423,"discussion_content":"预感要破4w了，老师的读者群有了么","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611460305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024416,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/a0/7687413f.jpg","nickname":"Zopen","note":"","ucode":"3EA97C79523FD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292492,"discussion_content":"已破三万","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1595244079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033169,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/d1/bdf895bf.jpg","nickname":"penng","note":"","ucode":"6087CFCB0AC434","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580901,"discussion_content":"已经10W","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658396984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413935,"discussion_content":"快破5w了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636614249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352626,"discussion_content":"已经4W了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614782597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1974551,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/21/17/0a681bd6.jpg","nickname":"丁丁","note":"","ucode":"D58B1BA292CDAA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578153,"discussion_content":"9w了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656548460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1824294,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/d6/26/cb8fe233.jpg","nickname":"FOCUS","note":"","ucode":"3D8CEEAFC22E65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563171,"discussion_content":"已经8W了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649948228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2290962,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f5/12/d7552b93.jpg","nickname":"老高","note":"","ucode":"47B9F235A13D35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361368,"discussion_content":"已经4W了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616653159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203794,"discussion_content":"预测有效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584082917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26121,"user_name":"robin","can_delete":false,"product_type":"c1","uid":1072810,"ip_address":"","ucode":"34E675ECE244BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/aa/b29ee77d.jpg","comment_is_top":false,"comment_ctime":1537502133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"126091553717","product_id":100015201,"comment_content":"只会最后这个。<br>docker run -p 8000:80 --cpuset-cpus=&quot;1&quot; -m 500M helloworld   限制只能在cpu1上运行，内存限制为500M","like_count":29},{"had_liked":false,"id":23617,"user_name":"silver","can_delete":false,"product_type":"c1","uid":1186740,"ip_address":"","ucode":"908E3C8560D6E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/1b/b4/a6db1c1e.jpg","comment_is_top":false,"comment_ctime":1536547889,"is_pvip":false,"replies":[{"id":"8574","content":"可以这么理解，i.e. spawn a new process in existing namespace","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536561278,"ip_address":"","comment_id":23617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"108910730289","product_id":100015201,"comment_content":"所以说 docker exec 每次都会创建一个和容器共享namespace的新进程？","like_count":25,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423639,"discussion_content":"可以这么理解，i.e. spawn a new process in existing namespace","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1536561278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57371,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1546768828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104625983932","product_id":100015201,"comment_content":"cgroupns作用<br>(1)可以限制容器的cgroup filesytem视图，使得在容器中也可以安全的使用cgroup；<br>(2)此外，会使容器迁移更加容易；在迁移时，&#47;proc&#47;self&#47;cgroup需要复制到目标机器，这要求容器的cgroup路径是唯一的，否则可能会与目标机器冲突。有了cgroupns，每个容器都有自己的cgroup filesystem视图，不用担心这种冲突。","like_count":24},{"had_liked":false,"id":24124,"user_name":"long904","can_delete":false,"product_type":"c1","uid":1000033,"ip_address":"","ucode":"88BD5116816722","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/61/78d5d09a.jpg","comment_is_top":false,"comment_ctime":1536809439,"is_pvip":false,"replies":[{"id":"8823","content":"任何镜像里的内容，都属于只读层。commit之后的东西当然也属于只读层。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536821251,"ip_address":"","comment_id":24124,"utype":1}],"discussion_count":4,"race_medal":0,"score":"78846220767","product_id":100015201,"comment_content":"图中不太明白为什么&#39;CMD&#39;属于只读层，那如果 dockfile 里面 yum install 并且 commit 的话，这些 CMD 执行的 yum 命令修改的内容还属于只读层？","like_count":18,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423850,"discussion_content":"任何镜像里的内容，都属于只读层。commit之后的东西当然也属于只读层。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536821251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2100644,"avatar":"","nickname":"Geek_8e2759","note":"","ucode":"EBDBA4D92B5C50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311485,"discussion_content":"我理解的是只读层、读写层是属于容器运行时的概念；当然这些 yum install 对于镜像来说是可读写的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602366058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604191,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","nickname":"Ronnie","note":"","ucode":"D7DEA7A4D13963","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555227,"discussion_content":"可以把镜像和容器的关系我感觉可以用 java里类和对象的关系来简单类比的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646815075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1333523,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/13/ff6f3ed5.jpg","nickname":"王章涛","note":"","ucode":"6EC55EC116A58D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303569,"discussion_content":"我的理解是只读层， 这么理解的，CMD 只是命令，而不像其他层一样，在做镜像的时候已经执行了，他是在容器启动的时候才会执行的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599299789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26090,"user_name":"Geek_9ca34e","can_delete":false,"product_type":"c1","uid":1222861,"ip_address":"","ucode":"9A9FDBBCCBE19B","user_header":"","comment_is_top":false,"comment_ctime":1537498156,"is_pvip":false,"replies":[{"id":"9576","content":"是。替换当然就是为了保证pid不变。注意，容器里的其他进程都是1号进程的子进程，不存在独立的说法。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537545732,"ip_address":"","comment_id":26090,"utype":1}],"discussion_count":3,"race_medal":0,"score":"65962007596","product_id":100015201,"comment_content":"；老师，有个地方还是不太明白,以下是你些的原文：<br>注意：这里提到的 &quot; 容器进程 &quot;，是 Docker 创建的一个容器初始化进程(dockerinit)，而不是应用进程 (ENTRYPOINT + CMD) dockerinit 会负责完成根目录的准备、挂载设备和目录、配置 hostname 等一系列需要在容器内进行的初始化操作。 最后，它通过 execv() 系统调用，让应用进程取代自己，成为容器里的 PID=1的进程。<br>我有以下疑问：<br> 1、dockerinit 是一个进程，完成初始化之后 ，让应用进程取代自己，那么dockerinit 进程会自动销毁么？<br>2、这里的dockerinit和应用进程在宿主机中是两个不同的进程id么？<br>3、执行 docker exec -it container bin&#47;sh   命令后，bin&#47;sh 命令创建的进程只是加入了container的namespace，但是从宿主机的角度它是一个独立的进程，只是共享了namespace信息么？<br>4、一个容器内部是否只有一个进程？，或者说容器只是一个房间（由namespace和cgroup组成），而其他的进程都是走进了这个房间，让大家以为这个房间就是一个系统，里面包含了这么多进程，其实在宿主机的角度他们都是一个个进程，只是共享了namespace和cgroup 而已，这样理解对么？","like_count":15,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424523,"discussion_content":"是。替换当然就是为了保证pid不变。注意，容器里的其他进程都是1号进程的子进程，不存在独立的说法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1537545732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406671,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634819104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1837179,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/08/7b/7f086546.jpg","nickname":"Alex","note":"","ucode":"70806CEA9AB15E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380745,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624680726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57007,"user_name":"大卫","can_delete":false,"product_type":"c1","uid":1019127,"ip_address":"","ucode":"D861709E483793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/f7/a4de6f64.jpg","comment_is_top":false,"comment_ctime":1546598711,"is_pvip":false,"replies":[{"id":"20979","content":"trap sig term kill很标准的做法","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1547019392,"ip_address":"","comment_id":57007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61676140855","product_id":100015201,"comment_content":"张老师，当Dockerfile中使用sh脚本启动，而不是exec启动java应用时，若通过docker stop不能优雅的停掉Java进程。查资料说可用trap接受信号处理，这个有什么其他好的解决办法没？","like_count":14,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435357,"discussion_content":"trap sig term kill很标准的做法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1547019392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23615,"user_name":"陶希阳","can_delete":false,"product_type":"c1","uid":1131314,"ip_address":"","ucode":"3BED65B051924C","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/32/0b81fc39.jpg","comment_is_top":false,"comment_ctime":1536547411,"is_pvip":false,"replies":[{"id":"8578","content":"当然不是，那可是正儿八经的虚拟化技术","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536561946,"ip_address":"","comment_id":23615,"utype":1}],"discussion_count":3,"race_medal":0,"score":"61666089555","product_id":100015201,"comment_content":"想知道云服务器等技术是不是也是通过namespace + cgroup实习的？","like_count":14,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423638,"discussion_content":"当然不是，那可是正儿八经的虚拟化技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536561946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181192,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/08/855abb02.jpg","nickname":"Seven.Lin澤耿","note":"","ucode":"4CAB732CD6F149","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274587,"discussion_content":"云服务的CAAS可能是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590592841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604191,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","nickname":"Ronnie","note":"","ucode":"D7DEA7A4D13963","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555229,"discussion_content":"有些云服务器是共享实例，不知道是怎么搞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646815133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91977,"user_name":"Han","can_delete":false,"product_type":"c1","uid":1450610,"ip_address":"","ucode":"9EACABB8599A14","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/72/bebffb62.jpg","comment_is_top":false,"comment_ctime":1557147229,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"57391722077","product_id":100015201,"comment_content":"有两个问题不是很清楚：<br>1）推荐一个docker运行一个进程，多出来的进程会变成“野”进程。那么如何理解这个野？是说不再受docker设置的namespace以及Cgroup约束了么？<br>2）docker exec是在相同的namespace下创建的新进程。那么这个进程是不是也是“野”的？相比与docker attach来讲。attach是不是没有新建进程，只是attach到docker中的主进程去？","like_count":13,"discussions":[{"author":{"id":2179383,"avatar":"https://static001.geekbang.org/account/avatar/00/21/41/37/b89f3d67.jpg","nickname":"我在睡觉","note":"","ucode":"6503B611151D3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334448,"discussion_content":"上面的回答不是那么贴切，我来试着回答一下。\n1，这个野进程不是说主进程挂了，这个子进程就不在受到约束，主进程挂了子进程也会直接挂掉。这里的意思应该是如果在一个容器里运行两个进程分别提供不同的服务，那么那个子进程就不受到k8s管理了，如果它挂掉k8s不能很好的感知，也不能及时的恢复服务。\n\n2，问题二我理解的也不是很深刻，根据张老师的文章，exec是一个外部宿主机上的进程，并不属于docker管辖，也就不存在什么野不野的问题了。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1607850747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2360842,"avatar":"https://static001.geekbang.org/account/avatar/00/24/06/0a/ccc17c80.jpg","nickname":"g-force","note":"","ucode":"8B3044021A30CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380896,"discussion_content":"这个问题一搜就有 https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/ 对于这种野进程，容器一退，里面的进程全部接收到了SIGKILL 的信号，被强制退出，这里就有问题，如果你的子进程正在写磁盘，假设是P上的db，那么就出现会不一致。\n\nWhen bash terminates(这里是pid=1的进程), the kernel terminates the entire container with all processes inside. These processes are terminated uncleanly through the SIGKILL signal.  SIGKILL cannot be trapped, so there is no way for processes to terminate cleanly. ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624782229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1333523,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/13/ff6f3ed5.jpg","nickname":"王章涛","note":"","ucode":"6EC55EC116A58D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303567,"discussion_content":"我的推测：1. “野”进程受docker设置的namespace以及Cgroup约束了，但是docker主进程一旦挂了，容器不存在了，“野”进程也就不存在了。\n2.docker exec是在相同的namespace下创建的新进程也是“野”进程，因为init号不为1，docker只关注为1的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599299641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543711,"discussion_content":"其实可以这样理解，首先docker不是容器，它是容器的管理者。容器是一种状态，通过namespace、cgroups、镜像，这些技术形成一种沙箱的环境。容器进程，就是docker能够管理的那个进程，例如容器里PID=1的进程。其他“野进程”，就是不受docker管理的进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641278231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24034,"user_name":"蔡鹏飞","can_delete":false,"product_type":"c1","uid":1199843,"ip_address":"","ucode":"64B86B24D3A2CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/e3/1a2e379f.jpg","comment_is_top":false,"comment_ctime":1536764435,"is_pvip":false,"replies":[{"id":"8898","content":"这个行为其实是可配置的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536899366,"ip_address":"","comment_id":24034,"utype":1}],"discussion_count":5,"race_medal":0,"score":"53076371987","product_id":100015201,"comment_content":"docker run 时指定-v挂载宿主机目录到容器目录，即使容器原有目录内有数据，也会被我宿主机目录数据替代的呀。难道是和我使用的storage-driver有关？我用的是overlay存储。","like_count":12,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423813,"discussion_content":"这个行为其实是可配置的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536899366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512517,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/45/adf079ae.jpg","nickname":"杨松","note":"","ucode":"FB3C73BC44C94D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318042,"discussion_content":"还是没有回答这个问题，我现在都是把容器起来后，进入容器，手动拷贝一份出来，然后再重新docker run，不知道还有没有别的好方法？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603632415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604191,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","nickname":"Ronnie","note":"","ucode":"D7DEA7A4D13963","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555230,"discussion_content":"可以在dockerfile里配置数据卷的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646815214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809457,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9c/31/e4677275.jpg","nickname":"潜光隐耀","note":"","ucode":"8A2FDDEFCB1863","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394500,"discussion_content":"同问这个的解决方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631925817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217712,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/b0/b073fe8b.jpg","nickname":"aMaMiMoU","note":"","ucode":"AF1E6CA541E482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106578,"discussion_content":"这个问题现在有结论了么？我查了docker官网的文档没翻到这方面的配置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577540103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33688,"user_name":"帅","can_delete":false,"product_type":"c1","uid":1207367,"ip_address":"","ucode":"DB792F56C26429","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/47/57b6c4e8.jpg","comment_is_top":false,"comment_ctime":1539853588,"is_pvip":false,"replies":[{"id":"12102","content":"harbor啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539868293,"ip_address":"","comment_id":33688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44489526548","product_id":100015201,"comment_content":"老师好，又来问您问题了。生产中有没有什么好的工具管理本地的docker registry，比如磁盘满了想清理等等的操作。期待老师的回复，谢谢！","like_count":10,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427028,"discussion_content":"harbor啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539868293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23709,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1536599481,"is_pvip":false,"replies":[{"id":"8707","content":"无限制。至于用户权限，是有user namespace可以做一定的限制。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536669002,"ip_address":"","comment_id":23709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40191305145","product_id":100015201,"comment_content":"请问docker挂载有何限制没，是否随便一个目录都可以挂载？在容器里应该是root用户，岂不是可以对目录无节制地操作，哪怕原本主机目录中有些文件并不允许当前用户访问？是否可以相应限制","like_count":9,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423688,"discussion_content":"无限制。至于用户权限，是有user namespace可以做一定的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536669002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23649,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1536571704,"is_pvip":true,"replies":[{"id":"8610","content":"如果你用的是katacontainers这种基于虚拟化的容器，才可以实现。但原生其实也不提供这个功能。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536582425,"ip_address":"","comment_id":23649,"utype":1}],"discussion_count":2,"race_medal":5,"score":"40191277368","product_id":100015201,"comment_content":"对于linux大部分容器做不到在运行容器中动态添加宿主机目录，那在什么特定场合下可以做到呢？给个大致思路即可，谢谢。","like_count":9,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423660,"discussion_content":"如果你用的是katacontainers这种基于虚拟化的容器，才可以实现。但原生其实也不提供这个功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536582425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359396,"avatar":"https://static001.geekbang.org/account/avatar/00/14/be/24/4f2f5a2c.jpg","nickname":"米酱","note":"","ucode":"B072BDC1162AEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585820,"discussion_content":"纯小白在线学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661842592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23593,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1536540208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40191245872","product_id":100015201,"comment_content":"这节干货满满啊","like_count":9},{"had_liked":false,"id":23677,"user_name":"manatee","can_delete":false,"product_type":"c1","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1536585245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35896323613","product_id":100015201,"comment_content":"非常感谢老师的讲解，咱们这个有群可以互相交流吗？","like_count":8},{"had_liked":false,"id":286458,"user_name":"Geek_84025d","can_delete":false,"product_type":"c1","uid":2420731,"ip_address":"","ucode":"D01E97134E49FF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/AYCIZYjDO4UAMhqNYNElcNiczfuD2qU6VkcEmSugImsq5bjicRNTQE1dJhPIuUDunzxSLexDoYazK7QadT3AekJw/132","comment_is_top":false,"comment_ctime":1617329537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31682100609","product_id":100015201,"comment_content":"思考题的第二题是不是讲的有误啊，实验了一下并不会复制容器文件。<br>上网查到的：docker容器持久化数据有两种方式，一种是bind volume，一种是volume。bind volume就是如文章讲到的，会发生inode替换，无论宿主机目录是否为空，此方法都会隐藏容器中的挂载点的内容；volume的方式，容器中已有目录，则会将目录中的文件copy到volume中。<br><br>","like_count":7},{"had_liked":false,"id":40675,"user_name":"线条","can_delete":false,"product_type":"c1","uid":1125120,"ip_address":"","ucode":"E447F22B8FD4F9","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/00/d568d9d1.jpg","comment_is_top":false,"comment_ctime":1542640814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31607411886","product_id":100015201,"comment_content":"有推荐的linux书籍补补基础的吗？浅显易懂又要有一定深度的？","like_count":7},{"had_liked":false,"id":24690,"user_name":"多肉","can_delete":false,"product_type":"c1","uid":1228219,"ip_address":"","ucode":"EF0805E34339D6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicBibF1UEOAhicickjCRXzVBDDyAMTw5C7EP3IPSKyTqWjvtmicB4AFu0B72BVyxFAVnNHrbx672p2Ow/132","comment_is_top":false,"comment_ctime":1537185995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31601957067","product_id":100015201,"comment_content":"课程干货满满，一堂课下来不听上几遍根本无法掌握课中的知识点，一切从问题出发，能明白课中解决了什么问题或提出了什么问题，从这个角度出发，更正理清课中讲的知识点，总结内容如下:<br>一、docker镜像如何制作的两种方式是什么？<br>二、容器既然是一个封闭的进程，那么外接程序是如何进入容器这个进程的呢？<br>三、docker commit对挂载点volume内容修改的影响是什么？<br>四、容器与宿主机如何进行文件读写？或volume是为了解决什么题？<br>五、Docker的copyData功能是什么？解决了什么问题？<br>六、bind mount机制是什么？<br>七、cgroup Namespace的作用是什么？","like_count":7},{"had_liked":false,"id":23714,"user_name":"Geek_zz","can_delete":false,"product_type":"c1","uid":1130682,"ip_address":"","ucode":"A3AC7C2991B50D","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/ba/2c8af305.jpg","comment_is_top":false,"comment_ctime":1536623945,"is_pvip":false,"replies":[{"id":"8684","content":"所有的层都保存在diff目录下","user_name":"作者回复","comment_id":23714,"uid":"1218095","ip_address":"","utype":1,"ctime":1536652447,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"31601395017","product_id":100015201,"comment_content":"你好，可读写层的修改数据保存的话，会保存到哪里","like_count":7,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423691,"discussion_content":"所有的层都保存在diff目录下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536652447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24637,"user_name":"ShJin、Cheng","can_delete":false,"product_type":"c1","uid":1227642,"ip_address":"","ucode":"2AB939D3C5D423","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/7a/ee21df2d.jpg","comment_is_top":false,"comment_ctime":1537176690,"is_pvip":false,"replies":[{"id":"9047","content":"权限控制的办法很多，但这也啥意义呢？我手写一个20行的C语言代码就可以加入容器的namespace 啊。所以不随便给人root权限比较重要吧。","user_name":"作者回复","comment_id":24637,"uid":"1218095","ip_address":"","utype":1,"ctime":1537187497,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"27306980466","product_id":100015201,"comment_content":"那么老师，请问有没有办法禁止通过exec -it的方式进入容器？","like_count":6,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424069,"discussion_content":"权限控制的办法很多，但这也啥意义呢？我手写一个20行的C语言代码就可以加入容器的namespace 啊。所以不随便给人root权限比较重要吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537187497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23606,"user_name":"蓝色天际","can_delete":false,"product_type":"c1","uid":1111815,"ip_address":"","ucode":"DF78FBAF92B6F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/07/6e1ff111.jpg","comment_is_top":false,"comment_ctime":1536543299,"is_pvip":true,"replies":[{"id":"8579","content":"不太理解的地方，可以提出来","user_name":"作者回复","comment_id":23606,"uid":"1218095","ip_address":"","utype":1,"ctime":1536561962,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"23011379779","product_id":100015201,"comment_content":"Linux基础薄弱，理解起来有点吃力","like_count":5,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423634,"discussion_content":"不太理解的地方，可以提出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536561962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23581,"user_name":"假装乐","can_delete":false,"product_type":"c1","uid":1093437,"ip_address":"","ucode":"97A7D0A6D93865","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/3d/28b61e6b.jpg","comment_is_top":false,"comment_ctime":1536531273,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23011367753","product_id":100015201,"comment_content":"听来清晰易懂，省去不少学习时间","like_count":5,"discussions":[{"author":{"id":1203834,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5e/7a/028dc1a9.jpg","nickname":"修罗","note":"","ucode":"9C25F94C40285F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":99680,"discussion_content":"越学越无知啊，知识是无尽的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577201955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55508,"user_name":"losuika","can_delete":false,"product_type":"c1","uid":1218666,"ip_address":"","ucode":"19685B1B00A4F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/6a/3ddeca6e.jpg","comment_is_top":false,"comment_ctime":1546221554,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18726090738","product_id":100015201,"comment_content":"什么时候能像大佬这么厉害就好啦","like_count":4,"discussions":[{"author":{"id":1227336,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/48/c892a35b.jpg","nickname":"csoulsi","note":"","ucode":"96C9BBE9097FB3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79003,"discussion_content":"和我想一起去了。我在想这些知识他怎么知道的，去哪里找的，官网？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576044221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23622,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1536550462,"is_pvip":false,"replies":[{"id":"8577","content":"新创建的这个容器，不就是个进程嘛。也正因为如此，新容器里的所有进程，不只是ifconfig，看到的都是这个已经存在的network namespace。","user_name":"作者回复","comment_id":23622,"uid":"1218095","ip_address":"","utype":1,"ctime":1536561924,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"18716419646","product_id":100015201,"comment_content":"这样，我们新启动的这个容器，就会直接加入到 ID=4ddf4638572d 的容器，也就是我们前面的创建的 Python 应用容器（PID=25686）的 Network Namespace 中。所以，这里 ifconfig 返回的网卡信息，跟我前面那个小程序返回的结果一模一样，你也可以尝试一下。<br>---------------<br>容器加入容器？不是把ifconfig 这个进程加入到ID=4ddf4638572d 的容器里吗？","like_count":4,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423641,"discussion_content":"新创建的这个容器，不就是个进程嘛。也正因为如此，新容器里的所有进程，不只是ifconfig，看到的都是这个已经存在的network namespace。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536561924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245926,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1599112160,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"14484014048","product_id":100015201,"comment_content":"说实话，特别喜欢张老师的这个课程，有趣且循序渐进，知识体系扎实，从原理到实践清晰明了，解析透彻，正好可以弥补我在docker容器知识方面的不足。比停留在只学一些皮毛的docker工具命令强百倍，刚看了几集，就感觉受益良多。感谢老谢的付出，希望极客多出一些这样的好课程。","like_count":3},{"had_liked":false,"id":27695,"user_name":"Leon廖","can_delete":false,"product_type":"c1","uid":1018550,"ip_address":"","ucode":"3BB340F2C8F00D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pftx8PrTibZqu39dxkicUdrXbaMe6v4rcoTzOoF9Z04OibIIDgbpRIrDS9lYBYc97QAscGp77vU6nN5uxRiceRER3Q/132","comment_is_top":false,"comment_ctime":1537929876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422831764","product_id":100015201,"comment_content":"谢谢老师！前4节高屋建瓴地介绍了Docker和K8S的演进历史，接着4节Docker基础深入浅出地介绍了重要的基础知识，受益匪浅，这4节Docker基础再次让我体会到了醍醐灌顶的感觉。","like_count":3},{"had_liked":false,"id":23918,"user_name":"jason_liew","can_delete":false,"product_type":"c1","uid":1062819,"ip_address":"","ucode":"7933547EC3354E","user_header":"","comment_is_top":false,"comment_ctime":1536718175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14421620063","product_id":100015201,"comment_content":"精彩精彩！有些地方自己折腾狠难理解到！多谢老师高维指点。","like_count":3},{"had_liked":false,"id":23802,"user_name":"王雅光","can_delete":false,"product_type":"c1","uid":1225757,"ip_address":"","ucode":"E1F3E81FA3C4C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/1d/7d8115ec.jpg","comment_is_top":false,"comment_ctime":1536664963,"is_pvip":false,"replies":[{"id":"8706","content":"volume本质是宿主机上的一个独立目录！不属于rootfs的一部分！","user_name":"作者回复","comment_id":23802,"uid":"1218095","ip_address":"","utype":1,"ctime":1536668890,"user_name_real":"Geek_6ef93d"}],"discussion_count":2,"race_medal":0,"score":"14421566851","product_id":100015201,"comment_content":"老师，如果在docker运行的服务上，修改其配置文件，比如tomcat配置文件，或者webapp下面spring-mvc.xml等配置文件，是否都是以volumn绑定挂载的形式做修改！这个跟init层的区别在哪里！","like_count":3,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423735,"discussion_content":"volume本质是宿主机上的一个独立目录！不属于rootfs的一部分！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536668890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243352,"discussion_content":"哈哈！老师在模仿学员的风格！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587535644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92820,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1365388,"ip_address":"","ucode":"FF0C60EC5F6679","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/8c/1a6cc556.jpg","comment_is_top":false,"comment_ctime":1557330534,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10147265126","product_id":100015201,"comment_content":"如果删了容器，volume里的数据还在吗？volume里写入的数据会不会也丢了","like_count":2,"discussions":[{"author":{"id":1617925,"avatar":"","nickname":"Geek_53fe7f","note":"","ucode":"C38EE8F458E141","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3536,"discussion_content":"docker rm -v 会删除","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1564557727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85389,"user_name":"昀溪","can_delete":false,"product_type":"c1","uid":1493286,"ip_address":"","ucode":"BFAF31542BC24A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoCl6Nxf9oW9sDOoibA7p8lKf0jqjPeDszqI4e7iavicQHtbtyibHIhLibyXYAaT02l7GRQvM9BJUxh6yQ/132","comment_is_top":false,"comment_ctime":1555050485,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10144985077","product_id":100015201,"comment_content":"CMD [&quot;python&quot;, &quot;app.py&quot;]<br>Docker 会为你提供一个隐含的 ENTRYPOINT，上面会解释为 &#47;bin&#47;sh -c &quot;python app.py&quot;<br><br>只有ENTRYPOINT的默认值是 [&quot;&#47;bin&#47;sh&quot;, &quot;-c&quot;] 才会有上面的结论<br><br>但是按照https:&#47;&#47;docs.docker.com&#47;engine&#47;reference&#47;builder&#47;#entrypoint中ENTRYPOINT和CMD不同的组合里的定义，<br>不定义ENTRYPOINT而定义CMD CMD [“p1_cmd”, “p2_cmd”] 其结果是 p1_cmd p2_cmd，对应到例子中应该是python app.py才对，请问老师这里是不是您没说清楚还是我理解的不准确","like_count":2,"discussions":[{"author":{"id":1227336,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/48/c892a35b.jpg","nickname":"csoulsi","note":"","ucode":"96C9BBE9097FB3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79001,"discussion_content":"&#34;python app.py&#34; 就是 /bin/sh -c &#34;python app.py&#34;，只不过 /bin/sh -c 隐藏了而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576044180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36687,"user_name":"Goteswille","can_delete":false,"product_type":"c1","uid":1273814,"ip_address":"","ucode":"7FE7EA19E865F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLyfjHfjulibFGPTewSZZHm2M8yfI7BZmO9vLUFoagveCw3DWYDss7y1CecKia7lT5yb9KoAmsya2zg/132","comment_is_top":false,"comment_ctime":1541236407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10131170999","product_id":100015201,"comment_content":"磊哥好，有个小疑问 容器启动初始化容器进程与容器启动够英勇进程之间关系？谢谢","like_count":2},{"had_liked":false,"id":35269,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1540481563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10130416155","product_id":100015201,"comment_content":"Docker build 时指明-t后是否在push阶段不用再打标签了？如果打了会覆盖原有的吗？","like_count":2},{"had_liked":false,"id":34185,"user_name":"阳雨杭","can_delete":false,"product_type":"c1","uid":1218839,"ip_address":"","ucode":"3128B25A98DC7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/17/f67e0d3a.jpg","comment_is_top":false,"comment_ctime":1540035648,"is_pvip":false,"replies":[{"id":"12251","content":"当然不是。文章里说的很清楚了，你怎么可能在容器里看见你要挂载的宿主机目录(volume)呢？","user_name":"作者回复","comment_id":34185,"uid":"1218095","ip_address":"","utype":1,"ctime":1540104523,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"10129970240","product_id":100015201,"comment_content":"张磊老师好，对于Volume机制，您说：Docker又是如何做到把一个宿主机上的目录或者文件，挂载到容器里面去呢？难道又是 Mount Namespace的黑科技吗？实际上，并不需要这么麻烦。<br>但是我觉得，Volume机制实质上也是使用的Mount Namespace技术啊，只是在mount操作时，加上了mount-bind机制，可以绑定挂载一个目录到另外一个目录。<br>Mount Namespace技术就是新建一个子进程时，加上CLONE_NEWNS的参数，再运行一个一个的mount（）函数，重新挂载容器进程的mount点（包括Volume和rootfs）。<br>以上是我的理解，有错误还请指正，谢谢。","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427146,"discussion_content":"当然不是。文章里说的很清楚了，你怎么可能在容器里看见你要挂载的宿主机目录(volume)呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540104523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32748,"user_name":"孙磊","can_delete":false,"product_type":"c1","uid":1256741,"ip_address":"","ucode":"F88E2322D51E2F","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/25/6ac2f111.jpg","comment_is_top":false,"comment_ctime":1539686298,"is_pvip":false,"replies":[{"id":"11930","content":"2. docker对这个行为其实可配置","user_name":"作者回复","comment_id":32748,"uid":"1218095","ip_address":"","utype":1,"ctime":1539691924,"user_name_real":"Geek_6ef93d"}],"discussion_count":3,"race_medal":0,"score":"10129620890","product_id":100015201,"comment_content":"1. 4.6内核之前，查看&#47;proc&#47;$PID&#47;cgroup，或者挂载cgroup时，在容器中会看到整个系统的cgroup，存在安全隐患，4.6内核之后新增cgroup namespace ，每个namespace中的进程都有自己的cgroup了；<br>2. 这个问题感觉像陷阱，挂载后改变的是home目录的inode值（&#47;test的inode），有数据就很正常了；","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426881,"discussion_content":"2. docker对这个行为其实可配置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539691924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2479476,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep69HH6GUu0Bv9dlf9jqmbOKhsKhwM0SqwuI8WpQKOb15RcNcSwhwXyzhtb7famBPfsxZGCmVXdpQ/132","nickname":"顺子","note":"","ucode":"E6FC92F9203BE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550994,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644841171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/08/7c18d8a4.jpg","nickname":"团","note":"","ucode":"D56ABBCE4E4D90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406677,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634820032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31353,"user_name":"豆沙包","can_delete":false,"product_type":"c1","uid":1262727,"ip_address":"","ucode":"D4F2908B4A1FE2","user_header":"","comment_is_top":false,"comment_ctime":1539156674,"is_pvip":false,"replies":[{"id":"11286","content":"你没分清楚mnt目录和diff目录的区别……","user_name":"作者回复","comment_id":31353,"uid":"1218095","ip_address":"","utype":1,"ctime":1539173624,"user_name_real":"Geek_6ef93d"}],"discussion_count":1,"race_medal":0,"score":"10129091266","product_id":100015201,"comment_content":"你好 我用docker run起了app这个容器之后，查看aufs里层的信息，读写层为什么会和init层是同一个层呢？不是一个会被打包 一个不会被打包么？<br># cat &#47;sys&#47;fs&#47;aufs&#47;si_cc04a4d4a9a38631&#47;br[0-9]*<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;fcacef659a1dee2d16c584979fddcd584971507cd7845316e7fca768069e9295=rw<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;fcacef659a1dee2d16c584979fddcd584971507cd7845316e7fca768069e9295-init=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;d2a9b0eca68f7bcd061648edace2f0f5e7e50ba8bb556cae0ab408681cb4ea02=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;6d5cd3d3a45e40517745c86e363756021286100ae0fb5db7a1cb6a7ec8cd4411=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;684b4a4ca733a7b66b46e8c1e5fe841a36af14f237a3fa82724832a335279122=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;d5e965276684d42d69c3f12bb0bfeeaa3c79f2b95cf6251e6779014a73430a86=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;ce080aadd734de0ddcd0cce2f65a6b79e4d41c736ddde97e48dc923fd6c5d067=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;d4672d8b1865d99adebeb807a5b161fb4558d8ff8b0164747a6dc22f2f09c428=ro+wh<br>&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff&#47;b651ff0b03fec7f0f69669473589d4ed8c3ffd84d5a509b41f71b19f687425c8=ro+wh","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426302,"discussion_content":"你没分清楚mnt目录和diff目录的区别……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539173624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25498,"user_name":"Genius","can_delete":false,"product_type":"c1","uid":1042240,"ip_address":"","ucode":"425F2925BB1C27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/40/e592d386.jpg","comment_is_top":false,"comment_ctime":1537345063,"is_pvip":false,"replies":[{"id":"9278","content":"因为dockerfile顺序build啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537363573,"ip_address":"","comment_id":25498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10127279655","product_id":100015201,"comment_content":"我想请教一个问题，为啥子镜像的entrypoint会覆盖母镜像的entrypoint的呢？","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424325,"discussion_content":"因为dockerfile顺序build啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537363573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24103,"user_name":"一叶","can_delete":false,"product_type":"c1","uid":1115608,"ip_address":"","ucode":"EB018BDA606A33","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/d8/cd269378.jpg","comment_is_top":false,"comment_ctime":1536803108,"is_pvip":false,"replies":[{"id":"8824","content":"对的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536821264,"ip_address":"","comment_id":24103,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126737700","product_id":100015201,"comment_content":"你好，磊哥，谢谢你讲得这么详细，我有一点不是很清楚：<br>容器中的主进程在系统调用或调用一些lib时，调用到的和容器只读层提供的lib吗？","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423842,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536821264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24030,"user_name":"leo","can_delete":false,"product_type":"c1","uid":1156643,"ip_address":"","ucode":"73E8917E5156FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/a6/23/91e74c43.jpg","comment_is_top":false,"comment_ctime":1536762684,"is_pvip":true,"replies":[{"id":"8830","content":"遗憾的是，这个ID没有对应关系，最方便的做法是查看mnt的目录变化。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536821590,"ip_address":"","comment_id":24030,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10126697276","product_id":100015201,"comment_content":"第三章并没有说明&#47;var&#47;lib&#47;docker&#47;aufs&#47;mnt&#47;6e3be5d2ecccae7cc0fcfa2a2f5c89dc21ee30e166be823ceaeba15dce645b3e的来源，而是直接告知ubuntu:latest就是挂载在这个目录。<br>如果我想查看alpine:latest的挂载目录，应该如何查找？<br>换句话说就是如何通过docker image的唯一id来查找出内部id(si_xxx)？<br>感谢解答！","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423812,"discussion_content":"遗憾的是，这个ID没有对应关系，最方便的做法是查看mnt的目录变化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536821590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042532,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/64/5c9eeb29.jpg","nickname":"天影之刃","note":"","ucode":"DBC3B8DD48EDCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93670,"discussion_content":"可在镜像运行后通过 docker inspect [container_id] | grep -A10 GraphDriver 查看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576934640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23955,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1536732630,"is_pvip":false,"replies":[{"id":"8835","content":"kubernetes 肯定不挑操作系统啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536821709,"ip_address":"","comment_id":23955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126667222","product_id":100015201,"comment_content":"1. 如果使用user namespace的话，容器里的root是否还是对文件有权限？<br>2. centos 7貌似目前还不支持 user namespace<br>3. 现在部署k8s会考虑用centos吗？特别是对gpu有需求的场景","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423793,"discussion_content":"kubernetes 肯定不挑操作系统啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536821709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23674,"user_name":"netwyh","can_delete":false,"product_type":"c1","uid":1027321,"ip_address":"","ucode":"B50C093F69BAA9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAzAafWa09GD4vDS1IVWIxV2zVHH1TjicYhtlibO8teGibCwWsl2tQKRqgHulnfXxneFULib9mY0icvfQ/132","comment_is_top":false,"comment_ctime":1536584929,"is_pvip":true,"replies":[{"id":"8685","content":"好像oracle自己就有个方案？","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536652482,"ip_address":"","comment_id":23674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126519521","product_id":100015201,"comment_content":"如果在docker容器中部署oracle，实际生产环境有没有人这么干？","like_count":2,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423672,"discussion_content":"好像oracle自己就有个方案？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536652482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23574,"user_name":"择动","can_delete":false,"product_type":"c1","uid":1038386,"ip_address":"","ucode":"09FB38D0F89E49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/32/fab70236.jpg","comment_is_top":false,"comment_ctime":1536508860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10126443452","product_id":100015201,"comment_content":"在等更新，沙发!","like_count":2},{"had_liked":false,"id":316859,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1634570781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5929538077","product_id":100015201,"comment_content":"文中的 Dockerfile 不能正常构建（不确定是不是网络问题拉取 Flask 失败，明天用公司的网络开了 VPN 再试一次）<br><br>1、Dockerfile 的设计思想：使用标准的原语来描述定义镜像的构建<br><br>2、docker inspect &lt;containerName or UUID&gt; 可以查看容器的所有详细信息（返回的是 JSON 格式文本）。<br>可以通过 docker inspect --format &#39;{{ .XX.XX }}&#39;&lt;containerName or UUID&gt; 的方式查看固定JSON节点的值<br><br>3、docker exec的原理：使用系统调用setns，让新启动的进程与容器共享多种namespace<br><br>4、通过 docker run -v &lt;宿主机目录&gt;:&lt;容器目录&gt; 进行数据卷挂载。docker commit 打包容器成为镜像时，挂载的数据卷是不会被打包的<br><br>5、文中用到的 docker 命令<br>构建镜像：docker build -t NAME[:TAG] .<br>查看镜像：docker image ls 或 docker images<br>实例化容器：docker run -p SOURCE_PORT:TARGET_PORT NAME[:TAG]  &lt;command&gt;<br>查看活动容器：docker ps （查看所有容器 -a 参数）<br>给镜像打tag：docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br>上传镜像：docker push  NAME[:TAG]<br>打包容器为镜像：docker commit &lt;container uuid&gt; NAME[:TAG]<br>在容器内部运行命令：docker exec CONTAINER COMMAND<br>进入容器内部：docker exec -it CONTAINER sh或bash","like_count":1},{"had_liked":false,"id":300126,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":1667987,"ip_address":"","ucode":"95BBBEE5B23878","user_header":"https://static001.geekbang.org/account/avatar/00/19/73/93/0a3a1e5b.jpg","comment_is_top":false,"comment_ctime":1625016752,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5919984048","product_id":100015201,"comment_content":"老师，我装的docker是 20.10.7版本的，为什么在&#47;var&#47;lib&#47;docker目录下没有 aufs目录？<br>","like_count":1,"discussions":[{"author":{"id":1745775,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a3/6f/250520f2.jpg","nickname":"马建伟","note":"","ucode":"EC4F32B8E3A2D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582035,"discussion_content":"是不是使用了overlay格式的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659151856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590957,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/ad/bc7626c4.jpg","nickname":"sundang","note":"","ucode":"74D951345EE676","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408814,"discussion_content":"和操作系统支持的文件系统有关系, Centos7 默认不支持 aufs ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635326860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274471,"user_name":"李振铎","can_delete":false,"product_type":"c1","uid":2308762,"ip_address":"","ucode":"BE7CB21AD946A1","user_header":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnT0EXnh02VHqP6dCgtZAuTghluCWOHcQhuAkSUP3F1YdibxbicEBLnU1kgWRa5yjlImvSz8uKn14x2rprAh2Hliafv/132","comment_is_top":false,"comment_ctime":1611031135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905998431","product_id":100015201,"comment_content":"您好，本节中讲解了如何使用setns进入容器内的某一个Namespace，那我想问的是如何进入整个容器的所有Namespace呢？ ","like_count":1},{"had_liked":false,"id":270040,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1608885148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903852444","product_id":100015201,"comment_content":"docker-init是containerd-shim的子进程么？整个流程是否是这样的：<br>1）containerd创建子进程containerd-shim<br>2）containerd-shim创建docker-init（以namespace参数创建）<br>3）docker-init准备好rootfs、volume、hostname之后，创建runC，docker_init退出、runC取代1号进程<br>4）runC创建应用进程，runC退出、应用进程取代1号进程","like_count":1},{"had_liked":false,"id":236496,"user_name":"CoolPanda","can_delete":false,"product_type":"c1","uid":1156121,"ip_address":"","ucode":"8EABAF97BE952A","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/19/e09d3529.jpg","comment_is_top":false,"comment_ctime":1595428743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890396039","product_id":100015201,"comment_content":"老师好，不知道您是否还更新这个教程。<br>目前Python 2.7已经停止支持了，例子中的代码会更新成Python3.* 版本吗？<br>谢谢。","like_count":1},{"had_liked":false,"id":165650,"user_name":"阿里斯托芬","can_delete":false,"product_type":"c1","uid":1228350,"ip_address":"","ucode":"5FB99020992974","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/3e/1de66fbc.jpg","comment_is_top":false,"comment_ctime":1577277081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872244377","product_id":100015201,"comment_content":"关于问题2 ，好像没看到有课代表回答 老师可以帮我们讲解一下吗","like_count":1},{"had_liked":false,"id":106190,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1561198933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856166229","product_id":100015201,"comment_content":"挂载只是一个mount bind 这样磁盘读写的性能损失会很大吗？为什么很多数据库，特别大数据在docker里的性能会降低不少","like_count":1},{"had_liked":false,"id":55001,"user_name":"jdreal","can_delete":false,"product_type":"c1","uid":1356767,"ip_address":"","ucode":"FE5EFA78F34E16","user_header":"","comment_is_top":false,"comment_ctime":1545999184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840966480","product_id":100015201,"comment_content":"老师好，文章内容很精彩实用，谢谢！发现一个点：在“接下来，我们在容器的 Volume 里，添加一个文件 text.txt”这个地方，代码第二行 ”cd test&#47;“ 应该是 &quot;cd  &#47;test&quot; 吧？进入容器后默认目录是 &#47;app，而要进入的目录是 &#47;test ，不是&#47;app&#47;test。我是ubuntu18.04.1 + docker  18.09.0。不知道是不是版本不同造成的。。。","like_count":1},{"had_liked":false,"id":53826,"user_name":"ZYecho","can_delete":false,"product_type":"c1","uid":1356589,"ip_address":"","ucode":"9D156DD30C581E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","comment_is_top":false,"comment_ctime":1545737292,"is_pvip":false,"replies":[{"id":"19523","content":"容器的一切都是对宿主机可见的……","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1545751478,"ip_address":"","comment_id":53826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840704588","product_id":100015201,"comment_content":"rootfs通过chroot（等同于mount根目录的过程？）也是发生在mnt namespace产生之后，为什么容器rw层在commit的时候就对宿主机可见呢？和挂数据卷不一样么？都是在mnt namespace产生后？","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434252,"discussion_content":"容器的一切都是对宿主机可见的……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545751478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42528,"user_name":"聪小弟","can_delete":false,"product_type":"c1","uid":1203273,"ip_address":"","ucode":"86008046B1E4FF","user_header":"https://static001.geekbang.org/account/avatar/00/12/5c/49/4e7f0bb4.jpg","comment_is_top":false,"comment_ctime":1542965579,"is_pvip":false,"replies":[{"id":"15266","content":"理解错了哦……你这volume都变成镜像的一部分了","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1542986661,"ip_address":"","comment_id":42528,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837932875","product_id":100015201,"comment_content":"其实可以根据container找到其需要挂载的rootfs目录的，<br><br>根据container pid，查看其mountinfo，cat &#47;proc&#47;{PID}&#47;mountinfo  | grep -w si可以获取到si<br><br>然后cat &#47;proc&#47;mounts | grep {SID ID}，这样就能找到其rootfs挂载点拉，&#47;var&#47;lib&#47;docker&#47;aufs&#47;mnt&#47;{ID}<br><br>还有-v额外挂载时候，其实也说得不算很清楚，按我的理解是挂载了的这个目录是在&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff这一层，且被作为&quot;可读写&quot;层 union 到&#47;var&#47;lib&#47;docker&#47;aufs&#47;mnt&#47;{ID}的rootfs里面，这样container就能通过rootfs看到额外挂载的目录啦","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430117,"discussion_content":"理解错了哦……你这volume都变成镜像的一部分了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542986661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40769,"user_name":"StayLet","can_delete":false,"product_type":"c1","uid":1249652,"ip_address":"","ucode":"6B748CA3AF3C5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/74/72ffa6d6.jpg","comment_is_top":false,"comment_ctime":1542675742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837643038","product_id":100015201,"comment_content":"老师，这一行 helloworld 是不是应该放到最后？<br>$ docker run -p 4000:80 helloworld python app.py","like_count":1},{"had_liked":false,"id":36715,"user_name":"黄明辉","can_delete":false,"product_type":"c1","uid":1283293,"ip_address":"","ucode":"8ED67A534CBC47","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/dd/c8cf5e3c.jpg","comment_is_top":false,"comment_ctime":1541256168,"is_pvip":false,"replies":[{"id":"13036","content":"不是前台后台的问题，容器本身就是那个进程。","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1541338752,"ip_address":"","comment_id":36715,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5836223464","product_id":100015201,"comment_content":"请问老师，容器的进程为什么需要在前台运行呢？","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427981,"discussion_content":"不是前台后台的问题，容器本身就是那个进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541338752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31787,"user_name":"帅","can_delete":false,"product_type":"c1","uid":1207367,"ip_address":"","ucode":"DB792F56C26429","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/47/57b6c4e8.jpg","comment_is_top":false,"comment_ctime":1539304478,"is_pvip":false,"replies":[{"id":"11453","content":"不需要啊，文件和目录都不需要事先存在啊","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539308051,"ip_address":"","comment_id":31787,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5834271774","product_id":100015201,"comment_content":"挂载文件夹能理解，但是如果挂载宿主机的某一文件到容器，为什么需要容器事先存在同名的这个文件呢？","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426507,"discussion_content":"不需要啊，文件和目录都不需要事先存在啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539308051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30221,"user_name":"alanzx","can_delete":false,"product_type":"c1","uid":1223038,"ip_address":"","ucode":"E96EDAAC1505C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/7e/5add6789.jpg","comment_is_top":false,"comment_ctime":1538729720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833697016","product_id":100015201,"comment_content":"慢慢学","like_count":1},{"had_liked":false,"id":28088,"user_name":"追寻云的痕迹","can_delete":false,"product_type":"c1","uid":1081114,"ip_address":"","ucode":"2B782C85CF0F67","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/1a/eb8021c3.jpg","comment_is_top":false,"comment_ctime":1538007719,"is_pvip":false,"replies":[{"id":"10121","content":"在windows 上一共就两种方案hyperv和win container ，它必然得支持","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1538018071,"ip_address":"","comment_id":28088,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832975015","product_id":100015201,"comment_content":"docker-ee的实现不是基于Hyper-V吧","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425139,"discussion_content":"在windows 上一共就两种方案hyperv和win container ，它必然得支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538018071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24514,"user_name":"gao","can_delete":false,"product_type":"c1","uid":1159945,"ip_address":"","ucode":"34D8304E68FECC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/09/5acaeb40.jpg","comment_is_top":false,"comment_ctime":1537100533,"is_pvip":false,"replies":[{"id":"8994","content":"因为volume除非删除掉它还是在那台主机上，你在别的机器上拉镜像试试","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537152478,"ip_address":"","comment_id":24514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5832067829","product_id":100015201,"comment_content":"docker容器挂载目录在commit后再次进入image，还是能看到之前挂载目录下的文件的，有点奇怪。<br>抱歉：再次进入image 还是docker run image，但没有指定volumn。","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424015,"discussion_content":"因为volume除非删除掉它还是在那台主机上，你在别的机器上拉镜像试试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1537152478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24163,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1536827352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5831794648","product_id":100015201,"comment_content":"centos7都是版本3的内核，针对k8s，你们到目前为止有遇到过因为内核bug的问题必须从3切换到版本4的内核的场景吗，比如切换到ubuntu？篇幅问题具体问题不方便在这里描述。主要是想了解下，你们是否有遇到过centos有些比较棘手的问题，而不得不试图切换到其它os的场景呢","like_count":1},{"had_liked":false,"id":23776,"user_name":"Tank","can_delete":false,"product_type":"c1","uid":1007106,"ip_address":"","ucode":"652A770CD3908B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/02/b50560ac.jpg","comment_is_top":false,"comment_ctime":1536648137,"is_pvip":false,"replies":[{"id":"8709","content":"感谢指出，已联系编辑修正","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536669225,"ip_address":"","comment_id":23776,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5831615433","product_id":100015201,"comment_content":"你好，你提供的python 脚本似乎存在问题。没有引入 os 但是下面却有用os.getenv 这时会报 global name &#39;os&#39; is not defined   当我在文件开始的地方加入 import os  运行镜像请求即可成功","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423721,"discussion_content":"感谢指出，已联系编辑修正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536669225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23629,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1536552864,"is_pvip":true,"replies":[{"id":"8575","content":"对于大部分linux容器实现来说，都是做不到的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536561318,"ip_address":"","comment_id":23629,"utype":1}],"discussion_count":1,"race_medal":5,"score":"5831520160","product_id":100015201,"comment_content":"我遇到一个问题，如何才能在运行的容器中动态挂载宿主机上的目录呢？","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423647,"discussion_content":"对于大部分linux容器实现来说，都是做不到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536561318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23595,"user_name":"微leng","can_delete":false,"product_type":"c1","uid":1026375,"ip_address":"","ucode":"DFF074789DDD7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/47/3718cf90.jpg","comment_is_top":false,"comment_ctime":1536540462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5831507758","product_id":100015201,"comment_content":"很清晰 👍","like_count":1},{"had_liked":false,"id":23587,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1536538497,"is_pvip":false,"replies":[{"id":"8581","content":"可以提出来讨论","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536562400,"ip_address":"","comment_id":23587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5831505793","product_id":100015201,"comment_content":"确实清晰了很多了 不过还是有不清楚的点","like_count":1,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423624,"discussion_content":"可以提出来讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536562400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359446,"user_name":"与梦远航","can_delete":false,"product_type":"c1","uid":2736611,"ip_address":"福建","ucode":"A2D7B72817D82F","user_header":"https://static001.geekbang.org/account/avatar/00/29/c1/e3/53c2066f.jpg","comment_is_top":false,"comment_ctime":1665546523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665546523","product_id":100015201,"comment_content":"docker exec还不是非常明白，我尝试了demo，加入到net的命名空间，但是除了网卡信息和主机不同外，其他信息和主机的貌似没什么区别（我尝试加入他们的命名空间但是好像和物理机没什么区别），而docker exec进人容器，内部查看的信息都是容器内部的东西，是因为docker exec命令内部还有其他的封装嘛","like_count":0},{"had_liked":false,"id":358926,"user_name":"Geek_c926a3","can_delete":false,"product_type":"c1","uid":2957398,"ip_address":"北京","ucode":"C64E00267F05F7","user_header":"","comment_is_top":false,"comment_ctime":1665032733,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1665032733","product_id":100015201,"comment_content":"对于第二个思考题，我测试除了不同的结果。docker engine Version:  20.10.18<br>test-volume:v1镜像的&#47;dir目录下有a.txt文件，挂载目录下有b.txt文件。测试结果显示挂载目录下的文件是最终的挂载点下的文件，并不会显示镜像原本的目录下的文件。<br>$docker run -it --rm test-volume:v1 ls &#47;dir<br>a.txt<br>$docker run -it --rm -v &#47;tmp&#47;dir:&#47;dir test-volume:v1 ls &#47;dir<br>b.txt<br>$ls &#47;tmp&#47;dir&#47;<br>b.txt","like_count":0},{"had_liked":false,"id":356187,"user_name":"Xinxin.J","can_delete":false,"product_type":"c1","uid":2939174,"ip_address":"陕西","ucode":"CF9A6A2939A3EE","user_header":"https://static001.geekbang.org/account/avatar/00/2c/d9/26/ac2c69a8.jpg","comment_is_top":false,"comment_ctime":1662029643,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662029643","product_id":100015201,"comment_content":"这个课程的源码再哪里呢？","like_count":0},{"had_liked":false,"id":354164,"user_name":"街角","can_delete":false,"product_type":"c1","uid":1045711,"ip_address":"安徽","ucode":"F1085900AF9504","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/cf/001c5728.jpg","comment_is_top":false,"comment_ctime":1660138470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660138470","product_id":100015201,"comment_content":"mount namespace 在容器里面的隔离 是不是因为  宿主机上的主进程 看着挂载都是 shared，但是容器进程里面都是 private 以及 slave，所以容器内部的挂载没法传递到外部？可以这么理解吗？","like_count":0},{"had_liked":false,"id":350989,"user_name":"魏波","can_delete":false,"product_type":"c1","uid":2614189,"ip_address":"","ucode":"621CC49578811D","user_header":"https://static001.geekbang.org/account/avatar/00/27/e3/ad/d8342e69.jpg","comment_is_top":false,"comment_ctime":1657440093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657440093","product_id":100015201,"comment_content":"评级也很精彩","like_count":0},{"had_liked":false,"id":348679,"user_name":"xiong","can_delete":false,"product_type":"c1","uid":1099375,"ip_address":"","ucode":"C1BFD9EF96372F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/6f/ac3003fa.jpg","comment_is_top":false,"comment_ctime":1655298600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655298600","product_id":100015201,"comment_content":"已经晕了","like_count":0},{"had_liked":false,"id":342658,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650385398,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1650385398","product_id":100015201,"comment_content":"循序渐进又深入浅出，讲的很好<br>看来核心还是Linux","like_count":0},{"had_liked":false,"id":340256,"user_name":"pmj","can_delete":false,"product_type":"c1","uid":2744632,"ip_address":"","ucode":"D36355C13E30A7","user_header":"https://static001.geekbang.org/account/avatar/00/29/e1/38/c299a6f0.jpg","comment_is_top":false,"comment_ctime":1648703201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648703201","product_id":100015201,"comment_content":"绑定挂载和软链接的主要区别在哪里啊？","like_count":0},{"had_liked":false,"id":339601,"user_name":"勤奋的辣牛肉","can_delete":false,"product_type":"c1","uid":1676412,"ip_address":"","ucode":"D48CC31A8D44FC","user_header":"https://static001.geekbang.org/account/avatar/00/19/94/7c/70bf584f.jpg","comment_is_top":false,"comment_ctime":1648216461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648216461","product_id":100015201,"comment_content":"Docker copydata功能是什么? 有没有啥文章的呢?","like_count":0},{"had_liked":false,"id":335605,"user_name":"Geek_145846","can_delete":false,"product_type":"c1","uid":2530478,"ip_address":"","ucode":"1DA77D13A8F19E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoAlkIjytYG8MqOtDf7n7pF3rXJnoMNL9ebRXluPvGh2e2A9TxyMoQxPyYQ1dInAFIeltwo8zuvhg/132","comment_is_top":false,"comment_ctime":1645602095,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645602095","product_id":100015201,"comment_content":"已经 2022 年了，相见恨晚！","like_count":0},{"had_liked":false,"id":334018,"user_name":"sunEditor","can_delete":false,"product_type":"c1","uid":2640119,"ip_address":"","ucode":"B640A13401901B","user_header":"https://static001.geekbang.org/account/avatar/00/28/48/f7/0a207b41.jpg","comment_is_top":false,"comment_ctime":1644673718,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644673718","product_id":100015201,"comment_content":"copy on write和删除文件在联合文件系统中都有特殊的处理方式。联合文件系统只能修改第一个挂载的目录，所以这个第一个目录就是可读写层。https:&#47;&#47;blog.csdn.net&#47;qq_28829081&#47;article&#47;details&#47;111669611","like_count":0},{"had_liked":false,"id":331876,"user_name":"Geek_lucas","can_delete":false,"product_type":"c1","uid":2497779,"ip_address":"","ucode":"AF728FA8C856F7","user_header":"https://static001.geekbang.org/account/avatar/00/26/1c/f3/833ad47e.jpg","comment_is_top":false,"comment_ctime":1642846865,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642846865","product_id":100015201,"comment_content":"今天色内容难度很大啊，因为设计很多os的底层了，特别是volume这块，一直是我很难理解的，今天终于有点懂了，其实挂载volumn就是将容器目录的指针从原来的inode指向宿主机的inode","like_count":0},{"had_liked":false,"id":321789,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1637047977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637047977","product_id":100015201,"comment_content":"set_ns.c 程序open之后，不需要close吗？","like_count":0},{"had_liked":false,"id":320997,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1636614087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636614087","product_id":100015201,"comment_content":"老师讲明白了   厉害<br>这个容器进程“python app.py”，运行在由 Linux Namespace 和 Cgroups 构成的隔离环境里；而它运行所需要的各种文件，比如 python，app.py，以及整个操作系统文件，则由多个联合挂载在一起的 rootfs 层提供。这些 rootfs 层的最下层，是来自 Docker 镜像的只读层。在只读层之上，是 Docker 自己添加的 Init 层，用来存放被临时修改过的 &#47;etc&#47;hosts 等文件。而 rootfs 的最上层是一个可读写层，它以 Copy-on-Write 的方式存放任何对只读层的修改，容器声明的 Volume 的挂载点，也出现在这一层。通过这样的剖析，对于曾经“神秘莫测”的容器技术，你是不是感觉清晰了很多呢？","like_count":0},{"had_liked":false,"id":320202,"user_name":"lunyelancha","can_delete":false,"product_type":"c1","uid":1368299,"ip_address":"","ucode":"11FF47258043F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/eb/64e1a99c.jpg","comment_is_top":false,"comment_ctime":1636119573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636119573","product_id":100015201,"comment_content":"如果你执行 docker run -v &#47;home:&#47;test 的时候，容器镜像里的 &#47;test 目录下本来就有内容的话，你会发现，在宿主机的 &#47;home 目录下，也会出现这些内容。<br>这个情况是不会出现的，<br>-v &#47;home:&#47;test 不会copy data<br>-v &#47;test 会copy和创建目录","like_count":0},{"had_liked":false,"id":317442,"user_name":"文若钝","can_delete":false,"product_type":"c1","uid":2699967,"ip_address":"","ucode":"B3BC21AA19168F","user_header":"https://static001.geekbang.org/account/avatar/00/29/32/bf/fd6a1c99.jpg","comment_is_top":false,"comment_ctime":1634799810,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634799810","product_id":100015201,"comment_content":"把原理掰开了揉碎了，然后讲解出来，很深刻，谢谢。","like_count":0},{"had_liked":false,"id":307062,"user_name":"qiushye","can_delete":false,"product_type":"c1","uid":1322164,"ip_address":"","ucode":"D005A152F8BEDC","user_header":"","comment_is_top":false,"comment_ctime":1628844990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628844990","product_id":100015201,"comment_content":"&lt;我就得先用 docker inspect 命令查看容器的 IP 地址，然后访问“http:&#47;&#47;&lt; 容器 IP 地址 &gt;:80”才可以看到容器内应用的返回。&gt; 我试了，docker inspect查到的IP 地址，ping不通","like_count":0},{"had_liked":false,"id":302206,"user_name":"yanyi","can_delete":false,"product_type":"c1","uid":1206731,"ip_address":"","ucode":"B3CCA9638BCA37","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/cb/b3d2d943.jpg","comment_is_top":false,"comment_ctime":1626137766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626137766","product_id":100015201,"comment_content":"感谢张老师，讲解得很清晰明了。","like_count":0},{"had_liked":false,"id":301721,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1316025,"ip_address":"","ucode":"06640157207187","user_header":"https://static001.geekbang.org/account/avatar/00/14/14/b9/47377590.jpg","comment_is_top":false,"comment_ctime":1625821904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625821904","product_id":100015201,"comment_content":"讲的实在太好了，值回票价","like_count":0},{"had_liked":false,"id":301524,"user_name":"千回百转无劫山","can_delete":false,"product_type":"c1","uid":1456256,"ip_address":"","ucode":"2C249889C00929","user_header":"","comment_is_top":false,"comment_ctime":1625727929,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625727929","product_id":100015201,"comment_content":"想请教一下老师，一个java项目打包的docker容器，他运行的时候依赖的java虚拟机是由谁提供呢？宿主机还是容器本身？宿主机的可能性很低，因为docker容器最大的优化就是解决了依赖问题。但如果是容器本身提供，又让我对单进程模式理解比较模糊了。虽然说，java虚拟机不受控……","like_count":0},{"had_liked":false,"id":299955,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1624936501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624936501","product_id":100015201,"comment_content":"磊哥的linux功底端的太厚了。","like_count":0},{"had_liked":false,"id":296828,"user_name":"致良知","can_delete":false,"product_type":"c1","uid":2113915,"ip_address":"","ucode":"73C722E31B726A","user_header":"https://static001.geekbang.org/account/avatar/00/20/41/7b/cda2e622.jpg","comment_is_top":false,"comment_ctime":1623173532,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1623173532","product_id":100015201,"comment_content":"docker commit，实际上就是在容器运行起来后，把最上层的“可读写层”，加上原先容器镜像的只读层，打包组成了一个新的镜像。当然，下面这些只读层在宿主机上是共享的，不会占用额外的空间。<br>这句话 什么鬼 作者不觉得矛盾吗。怎么加上原先的容器镜像的只读层打包组成一个新的镜像，又说不会占用额外的空间 什么鬼？？？","like_count":0,"discussions":[{"author":{"id":1590957,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/ad/bc7626c4.jpg","nickname":"sundang","note":"","ucode":"74D951345EE676","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408816,"discussion_content":"是你功底不够，实践不够多。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635326961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404063,"discussion_content":"对于同一个只读层，即使打包100次，该只读层所占用的空间还是1份。可以想象成是对只读层的引用。\n如果其它机器要用这100个镜像，docker run时会依赖判断“只读层”在本机是否存在，不存在则从hub下载。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634218612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296403,"user_name":"Cantevenl","can_delete":false,"product_type":"c1","uid":2651519,"ip_address":"","ucode":"F5A62BA4355F6A","user_header":"https://static001.geekbang.org/account/avatar/00/28/75/7f/ff5dd565.jpg","comment_is_top":false,"comment_ctime":1622957194,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622957194","product_id":100015201,"comment_content":"老师讲的特别好，通俗易懂，而且还有很多细节<br>真的可惜没能早点看老师的课程","like_count":0},{"had_liked":false,"id":292831,"user_name":"大懒虫","can_delete":false,"product_type":"c1","uid":1440873,"ip_address":"","ucode":"51014C4A7074DA","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/69/02953435.jpg","comment_is_top":false,"comment_ctime":1620999455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620999455","product_id":100015201,"comment_content":"请问下老师，一个多组件依赖，多进程的系统，全部打包到一个容器中，性能比部署在ecs中差多少呢？","like_count":0},{"had_liked":false,"id":291521,"user_name":"咖啡猫","can_delete":false,"product_type":"c1","uid":1085089,"ip_address":"","ucode":"64F4CB55DD11B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/a1/c05ab3b3.jpg","comment_is_top":false,"comment_ctime":1620344725,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620344725","product_id":100015201,"comment_content":"如果你执行 docker run -v &#47;home:&#47;test 的时候，容器镜像里的 &#47;test 目录下本来就有内容的话，你会发现，在宿主机的 &#47;home 目录下，也会出现这些内容。这是怎么回事？为什么它们没有被绑定挂载隐藏起来呢？（提示：Docker 的“copyData”功能）<br><br><br>这个是不是说错了，默认会以宿主机&#47;home目录内容为准啊，有点不太理解张磊老师说的话","like_count":0,"discussions":[{"author":{"id":2346108,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiahQmojanAht9heYDSJsqwB9zwpa7kfGrSRaHC1ia1sQShfgWO9ibb1wMr9efUpDhpFrbQB3LIqxbg/132","nickname":"莱斯","note":"","ucode":"19DBE8EFAE7C70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376888,"discussion_content":"这里应该是：容器内看到的应该是宿主机的文件目录中的内容，隐藏了容器目录中的内容。因为目录项已经被指向宿主机挂载目录了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622391281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287464,"user_name":"Arris","can_delete":false,"product_type":"c1","uid":2057888,"ip_address":"","ucode":"DCD803397C274E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/66/a0/df6b170f.jpg","comment_is_top":false,"comment_ctime":1617960868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617960868","product_id":100015201,"comment_content":"这章太有用了，加深了我对Dockerfile的理解","like_count":0},{"had_liked":false,"id":284303,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1049994,"ip_address":"","ucode":"C0859057592720","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/8a/e7c5a7e2.jpg","comment_is_top":false,"comment_ctime":1616156289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616156289","product_id":100015201,"comment_content":"好有深度，赞","like_count":0},{"had_liked":false,"id":284166,"user_name":"燚蠡","can_delete":false,"product_type":"c1","uid":2077420,"ip_address":"","ucode":"4F1BDD86E0728E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b2/ec/20727753.jpg","comment_is_top":false,"comment_ctime":1616106310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616106310","product_id":100015201,"comment_content":"容器所使用的网络是nat主机网络，是为了不直接暴露。那在某种情况下，如果因为需要，其实也是可以使用桥接来使用和主机同样网络吧？","like_count":0},{"had_liked":false,"id":282825,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1615429577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615429577","product_id":100015201,"comment_content":"学习还得看高质量的资源，思路清晰，豁然开朗，感谢张磊。","like_count":0},{"had_liked":false,"id":282822,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1615429500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615429500","product_id":100015201,"comment_content":" [root@k8s dockerTest]# docker run -p 8000:80 --cpuset-cpus=&quot;1&quot; -m 500M freesocean&#47;helloworld:v1<br> <br> [root@k8s appDemo]# cat &#47;sys&#47;fs&#47;cgroup&#47;cpuset&#47;docker&#47;2ba0d83e40a84bdaa1f03d910048da1bfa88b9f28d1b06bf61df873264568381&#47;cpuset.cpus<br>1<br><br>[root@k8s appDemo]# cat &#47;sys&#47;fs&#47;cgroup&#47;memory&#47;docker&#47;2ba0d83e40a84bdaa1f03d910048da1bfa88b9f28d1b06bf61df873264568381&#47;memory.limit_in_bytes<br>524288000","like_count":0},{"had_liked":false,"id":282520,"user_name":"我","can_delete":false,"product_type":"c1","uid":1228448,"ip_address":"","ucode":"CEB9CAA8A65930","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/a0/af1725e1.jpg","comment_is_top":false,"comment_ctime":1615290327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615290327","product_id":100015201,"comment_content":"这个aufs 会不会增加了文件读写的io路径？","like_count":0},{"had_liked":false,"id":269042,"user_name":"Md3zed","can_delete":false,"product_type":"c1","uid":1717785,"ip_address":"","ucode":"83EAD89468ED7B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CccT5NgKlZRlTL8f4BsIDqfJ8tRkHPyaR3SXnfgU7acxo2OO7vGzNWjfQBuFnbPPzVYH8Lh49f1jyicuuRSndcA/132","comment_is_top":false,"comment_ctime":1608488877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608488877","product_id":100015201,"comment_content":"老师Copydata这个能讲讲吗？主要讲的太好了，就想知道像端口映射的实现原理啥的？","like_count":0},{"had_liked":false,"id":260859,"user_name":"懂幸福","can_delete":false,"product_type":"c1","uid":1167350,"ip_address":"","ucode":"EBBCFD54680EBF","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/f6/791fff93.jpg","comment_is_top":false,"comment_ctime":1605145310,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605145310","product_id":100015201,"comment_content":"老师，我们经常会有一些私有化部署的需求，这个时候客户是有宿主机登录权限的，我们不想代码泄露，有没有什么方法能避免这个问题，比如给容器设置个密码啥的","like_count":0,"discussions":[{"author":{"id":1617171,"avatar":"","nickname":"也曾少年","note":"","ucode":"62A8C26B689198","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332859,"discussion_content":"禁止对方使用root才是关键。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607355767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258916,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1604580789,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1604580789","product_id":100015201,"comment_content":"很好的课程","like_count":0},{"had_liked":false,"id":253947,"user_name":"高远","can_delete":false,"product_type":"c1","uid":1022886,"ip_address":"","ucode":"BC84D5A3EA37A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a6/1f485c48.jpg","comment_is_top":false,"comment_ctime":1602987447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602987447","product_id":100015201,"comment_content":"init层里面的东西是Docker镜像定义的呢还是Docker本身定义的呢？","like_count":0},{"had_liked":false,"id":251151,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1601381389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601381389","product_id":100015201,"comment_content":"最近准备想换到容器这边做些工作，就很喜欢老师的这种深入讲解。一直停留在使用层面是真的不太好理解。另外，大牛讲解的感觉是真的不一样。","like_count":0},{"had_liked":false,"id":248996,"user_name":"小美","can_delete":false,"product_type":"c1","uid":1117278,"ip_address":"","ucode":"2DEBD834AD1D89","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIZTw0bzR4licIo8eSdibsNSS4Zq3sZRehVDBHbBnol2W3iaRtGkpdBZIibuMiaBhGwhNGFaGZ2GoD2flg/132","comment_is_top":false,"comment_ctime":1600398779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600398779","product_id":100015201,"comment_content":"为什么运行时生成镜像可以保存文件，但是volumes不能呢？","like_count":0},{"had_liked":false,"id":245984,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1599125388,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1599125388","product_id":100015201,"comment_content":"docker inspect后，获取到mount目录如下：<br><br>        &quot;Mounts&quot;: [<br>            {<br>                &quot;Type&quot;: &quot;volume&quot;,<br>                &quot;Name&quot;: &quot;2a8b95226453593ca69fa8b45f72603b59f02623f3ed11658ff78e96b371b03c&quot;,<br>                &quot;Source&quot;: &quot;&#47;var&#47;lib&#47;docker&#47;volumes&#47;2a8b95226453593ca69fa8b45f72603b59f02623f3ed11658ff78e96b371b03c&#47;_data&quot;,<br>                &quot;Destination&quot;: &quot;&#47;test&quot;,<br>                &quot;Driver&quot;: &quot;local&quot;,<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;&quot;<br>            }<br>        ],<br><br>进入到容器命令控制台，切换目录至&#47;test，并touch了一个test.txt文件。<br>但找不到&#47;var&#47;lib&#47;docker&#47;volumes&#47;2a8b95226453593ca69fa8b45f72603b59f02623f3ed11658ff78e96b371b03c&#47;_data目录。<br><br>请教老师为什么？<br>我使用的是MacOS的系统。<br>Docker version 19.03.8, build afacb8b","like_count":0},{"had_liked":false,"id":235061,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1594881583,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1594881583","product_id":100015201,"comment_content":"老师，请教一个问题。<br>1. 环境：<br>OS: <br>   CentOS Linux release 7.2.1511 (Core) <br>docker: <br>   Version:           19.03.5<br>   API version:       1.40<br>   Go version:        go1.12.12<br><br>2. 宿主机上&#47;data&#47;disk目录下有a,b两个子目录<br>   运行一个容器，把宿主机上的&#47;data&#47;disk目录映射到容器中<br>   容器内的程序运行时，需要把 &#47;data&#47;disk&#47;a mount到 &#47;data&#47;disk&#47;b 下面（是一个GO程序通过一行代码处理的：syscall.Mount(src, dst, gStorageModel.FsType, flags, &quot;&quot;)），<br>   容器中通过mount -l命令可以看到mount成功了, 此时在&#47;data&#47;disk&#47;b下可以看到&#47;data&#47;disk&#47;a中有的内容:<br><br>    [root@host12 ~]# mount -l<br>    ...<br>    ...<br>    shm on &#47;dev&#47;shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)<br>    &#47;dev&#47;mapper&#47;centos-root on &#47;data&#47;disk&#47;b type xfs (rw,relatime,attr2,inode64,noquota)<br>    [root@host12 ~]#<br><br>    但我回到宿主机上，&#47;data&#47;disk&#47;b下确看不到&#47;data&#47;disk&#47;a下的内容，也就是说容器内的mount，对宿主机没有影响。<br>    老师，我该如何解决这个问题，我想让宿主机和容器内一样，也能看到mount后的结果。谢谢！","like_count":0},{"had_liked":false,"id":234510,"user_name":"拾月霜寒","can_delete":false,"product_type":"c1","uid":2056785,"ip_address":"","ucode":"65E00BD4F14E97","user_header":"https://static001.geekbang.org/account/avatar/00/1f/62/51/8db5cad4.jpg","comment_is_top":false,"comment_ctime":1594709850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594709850","product_id":100015201,"comment_content":" 干货满满啊","like_count":0},{"had_liked":false,"id":232116,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1593858855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593858855","product_id":100015201,"comment_content":"好像明白这个 目录了：&#47;var&#47;lib&#47;docker&#47;aufs&#47;mnt&#47;[可读写层ID]&#47;test","like_count":0},{"had_liked":false,"id":232104,"user_name":"John5","can_delete":false,"product_type":"c1","uid":1902889,"ip_address":"","ucode":"61188D1D626107","user_header":"https://static001.geekbang.org/account/avatar/00/1d/09/29/b170a88f.jpg","comment_is_top":false,"comment_ctime":1593855275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593855275","product_id":100015201,"comment_content":"老师，刚才提问的问题，解决了，我没有复制xxx.txt文件过去<br>","like_count":0},{"had_liked":false,"id":232101,"user_name":"John5","can_delete":false,"product_type":"c1","uid":1902889,"ip_address":"","ucode":"61188D1D626107","user_header":"https://static001.geekbang.org/account/avatar/00/1d/09/29/b170a88f.jpg","comment_is_top":false,"comment_ctime":1593854791,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1593854791","product_id":100015201,"comment_content":"请问老师，我在构建镜像时出现了这个问题，怎么弄呀<br>Step 4&#47;7 : RUN pip install --trusted-host pypi.python.org -r requirements.txt<br> ---&gt; Running in bfbda49f1aab<br>DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will dro<br>p support for Python 2.7. More details about Python 2 support in pip, can be found at https:&#47;&#47;pip.pypa.io&#47;en&#47;latest&#47;development&#47;release-process&#47;#python-2-supportERROR: Could not open requirements file: [Errno 2] No such file or directory: &#39;requirements.txt&#39;<br>WARNING: You are using pip version 20.0.2; however, version 20.1.1 is available.<br>You should consider upgrading via the &#39;&#47;usr&#47;local&#47;bin&#47;python -m pip install --upgrade pip&#39; command.<br>","like_count":0,"discussions":[{"author":{"id":2058258,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/68/12/031a05c3.jpg","nickname":"A免帅叫哥","note":"","ucode":"76D2522E602AEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301147,"discussion_content":"问题不是很明显吗?找不到requierements.txt","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598424235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227987,"user_name":"LiYanbin","can_delete":false,"product_type":"c1","uid":1129976,"ip_address":"","ucode":"2F50493F818909","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/f8/b13674e6.jpg","comment_is_top":false,"comment_ctime":1592532514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592532514","product_id":100015201,"comment_content":"磊哥，docker 端口映射的原理有相关文章可以学习下吗","like_count":0},{"had_liked":false,"id":225673,"user_name":"于潇豫","can_delete":false,"product_type":"c1","uid":1856552,"ip_address":"","ucode":"8D2E96CC2CC5C2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJXHtbzIPXCHfwiciaKiaOdWwiar2UeNt5PMrP56po3HiaYUsIicAGibIJXQCKK9aNnZZHaiaHnVFYCoWZdfw/132","comment_is_top":false,"comment_ctime":1591830313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591830313","product_id":100015201,"comment_content":"对于Dockerfile内ADD命令的注释有点疑问，ADD源文件的路径是否应该为context 路径而非 dockerfile 所在文件夹？","like_count":0},{"had_liked":false,"id":215530,"user_name":"杨松","can_delete":false,"product_type":"c1","uid":1512517,"ip_address":"","ucode":"FB3C73BC44C94D","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/45/adf079ae.jpg","comment_is_top":false,"comment_ctime":1589011639,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589011639","product_id":100015201,"comment_content":"老师，想请教下，如果我下载了一个docker image(例如：nginx的镜像)，怎么查看该镜像的dockerfile的内容，尤其是cmd，如果不查询使用教程，也不看到dockerfile中的cmd命令是否开启了nginx","like_count":0,"discussions":[{"author":{"id":2100644,"avatar":"","nickname":"Geek_8e2759","note":"","ucode":"EBDBA4D92B5C50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311487,"discussion_content":"docker image inspect 可以看到 entrypoint 和 cmd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602367708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213312,"user_name":"陈英锋","can_delete":false,"product_type":"c1","uid":1103110,"ip_address":"","ucode":"22F59E84A70401","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/06/7105225e.jpg","comment_is_top":false,"comment_ctime":1588383292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588383292","product_id":100015201,"comment_content":"```docker run -d -v &#47;text helloworld<br># cd text&#47;<br>&#47;bin&#47;sh: 4: cd: can&#39;t cd to text&#47;<br>```<br>这是为什么呢?","like_count":0},{"had_liked":false,"id":207947,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1587220351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587220351","product_id":100015201,"comment_content":"学习了，还没动手练，用的是mbp...","like_count":0},{"had_liked":false,"id":205675,"user_name":"单朋荣","can_delete":false,"product_type":"c1","uid":1272662,"ip_address":"","ucode":"8AD121BEDD9675","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/56/37a4cea7.jpg","comment_is_top":false,"comment_ctime":1586700213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586700213","product_id":100015201,"comment_content":"宿主机挂载到容器不会commit，修改发生在宿主机的inode上，容器只有一个临时的文件夹“&#47;test&quot;; 只有发生在容器中的操作，即可读写+可读层才会被提交，这就是volume的本质特点吗？？","like_count":0},{"had_liked":false,"id":195985,"user_name":"墟","can_delete":false,"product_type":"c1","uid":1519087,"ip_address":"","ucode":"5E33E9FE51CE88","user_header":"https://static001.geekbang.org/account/avatar/00/17/2d/ef/2f18b76f.jpg","comment_is_top":false,"comment_ctime":1585227762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585227762","product_id":100015201,"comment_content":"目前读过的最深刻的k8s教材，能透彻理解每个概念的来龙去脉","like_count":0},{"had_liked":false,"id":195596,"user_name":"Cybertrunk","can_delete":false,"product_type":"c1","uid":1011174,"ip_address":"","ucode":"D557A710E1835F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/e6/57bfae83.jpg","comment_is_top":false,"comment_ctime":1585202274,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585202274","product_id":100015201,"comment_content":"感觉容器这技术远没有其名称所表达的那么优美。","like_count":0,"discussions":[{"author":{"id":1856845,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/55/4d/2b2834a9.jpg","nickname":"郭行知","note":"","ucode":"082C7E34FE6847","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411985,"discussion_content":"同感。容器本质是 Linux 各种特性的组合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636039055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195509,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1119133,"ip_address":"","ucode":"4BCA899B8E4E85","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/9d/0ff43179.jpg","comment_is_top":false,"comment_ctime":1585192382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585192382","product_id":100015201,"comment_content":"&#47;var&#47;lib&#47;docker&#47;aufs&#47;diff 目录下，在容器进程启动后，它们会被联合挂载在 &#47;var&#47;lib&#47;docker&#47;aufs&#47;mnt&#47; 目录中，这样容器所需的 rootfs 就准备好了。<br><br>本人还是停留在应用阶段。看完就忘，哈哈哈。","like_count":0},{"had_liked":false,"id":195256,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1585150521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585150521","product_id":100015201,"comment_content":"老师讲得太好了，需要多看几遍才能理解，感谢！！！","like_count":0},{"had_liked":false,"id":193934,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1584994282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584994282","product_id":100015201,"comment_content":"在windows里嘗試用docker run -v 掛載一個本地目錄，結果報錯提示掛載的路徑不能跟hyper v共享🤷‍♂️","like_count":0},{"had_liked":false,"id":181831,"user_name":"Stxguy","can_delete":false,"product_type":"c1","uid":1879340,"ip_address":"","ucode":"263C4FA3DBC4D4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOjBYuaLu0YiaItQF2f8M2K5BDdPUibwO3fAfpsqHePCL5JH5lSE4P7DLXxgiaLUaGXmVLRckbdjpEw/132","comment_is_top":false,"comment_ctime":1582640906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582640906","product_id":100015201,"comment_content":"讲解的很清楚，👍，我的环境是ubuntu 16.04,docker 18.03.1-ce,没有&#47;var&#47;lib&#47;docker&#47;aufs 目录","like_count":0},{"had_liked":false,"id":174208,"user_name":"lulu","can_delete":false,"product_type":"c1","uid":1184651,"ip_address":"","ucode":"E2F5B9C2D36A7D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/5XxiaGg3QRVLcQNw3jfzlVtXE6MbFD4nEQkIibEuM2ekic23qN1aGOZP58NhBeibHd8XN4x626icFSlw0VI5tMiauNWA/132","comment_is_top":false,"comment_ctime":1580089328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580089328","product_id":100015201,"comment_content":"这篇内容好多啊，得多看几遍","like_count":0},{"had_liked":false,"id":172758,"user_name":"lesliexlxiao","can_delete":false,"product_type":"c1","uid":1004807,"ip_address":"","ucode":"0416E5B05661C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/07/6ac856d9.jpg","comment_is_top":false,"comment_ctime":1579274565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579274565","product_id":100015201,"comment_content":"执行 docker exec -it 432d25b09241 &#47;bin&#47;bash，在宿主机会产生如下两个进程，请问下是什么原因呢？<br><br>root      6669 25573  0 23:04   pts&#47;0    00:00:00  docker exec -it 432d25b09241 &#47;bin&#47;bash<br>root      6684  4797   0 23:04   pts&#47;0    00:00:00  &#47;bin&#47;bash<br><br>个人理解：6669 是当前 bash 环境生成的前台进程，而 6684 是由 docker-containerd-shim 生成的一个新的 &#47;bin&#47;bash 进程，并使得该进程加入到了 432d25b09241 容器进程的 Namespace 中了。","like_count":0},{"had_liked":false,"id":166939,"user_name":"bleacha","can_delete":false,"product_type":"c1","uid":1636341,"ip_address":"","ucode":"70807BC84FFC66","user_header":"https://static001.geekbang.org/account/avatar/00/18/f7/f5/799c64ef.jpg","comment_is_top":false,"comment_ctime":1577633799,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577633799","product_id":100015201,"comment_content":"有很多地方看不明白，需要补下linux知识","like_count":0},{"had_liked":false,"id":162562,"user_name":"陈文聪","can_delete":false,"product_type":"c1","uid":1364399,"ip_address":"","ucode":"BE050112F6FD87","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/af/08bdf688.jpg","comment_is_top":false,"comment_ctime":1576555070,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576555070","product_id":100015201,"comment_content":"老师您好，我在实际编写dockerfile过程中需要修改init层中的host等文件，应该如何操作呢，我直接在dockerfile中去copy并不生效","like_count":0,"discussions":[{"author":{"id":1248307,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/33/c5026169.jpg","nickname":"hiyang","note":"","ucode":"E521EE72C0F247","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286309,"discussion_content":"https://www.cnblogs.com/mrnx2004/p/11767354.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593131355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150101,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1573462074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573462074","product_id":100015201,"comment_content":"老哥们，想问一下这个我在windows或者mac上制作这个镜像可以吗？","like_count":0},{"had_liked":false,"id":140713,"user_name":"hughieyu","can_delete":false,"product_type":"c1","uid":1206690,"ip_address":"","ucode":"FC1A64B2BAB784","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","comment_is_top":false,"comment_ctime":1571036854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571036854","product_id":100015201,"comment_content":"overlay2的宿主机挂载点是什么目录呢","like_count":0},{"had_liked":false,"id":137488,"user_name":"随源而恒之","can_delete":false,"product_type":"c1","uid":1637538,"ip_address":"","ucode":"04762414C12687","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/a2/d4607ab6.jpg","comment_is_top":false,"comment_ctime":1569752345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569752345","product_id":100015201,"comment_content":"0.0.0.0:4000-&gt;80&#47;tcp ,这个做了映射本地浏览器,可以连接docker 容器 ,当我试下用容器启动mongo镜像的时候 0.0.0.0:27017-&gt;27017&#47;tcp , 为什么外部怎么都没有办法连接","like_count":0},{"had_liked":false,"id":130150,"user_name":"乔克","can_delete":false,"product_type":"c1","uid":1315273,"ip_address":"","ucode":"28A797A4235B78","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/c9/c3eae895.jpg","comment_is_top":false,"comment_ctime":1567391681,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567391681","product_id":100015201,"comment_content":"你好，我是centos 7.4的系统 ，然后启动了一个ubuntu，查到的Pid和ns如下:<br>[root@hjkj ~]# docker inspect new_web --format &#39;{{ .State.Pid }}&#39;<br>6644<br>[root@hjkj ~]# ll &#47;proc&#47;6644&#47;ns&#47;<br>total 0<br>lrwxrwxrwx 1 root root 0 Jul 28 14:42 ipc -&gt; ipc:[4026532345]<br>lrwxrwxrwx 1 root root 0 Jul 28 14:42 mnt -&gt; mnt:[4026532343]<br>lrwxrwxrwx 1 root root 0 Jul 28 14:42 net -&gt; net:[4026532274]<br>lrwxrwxrwx 1 root root 0 Jul 28 14:42 pid -&gt; pid:[4026532346]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:27 user -&gt; user:[4026531837]<br>lrwxrwxrwx 1 root root 0 Jul 28 14:42 uts -&gt; uts:[4026532344]<br><br>然后我通过docker exec -it new_web &#47;bin&#47;bash进入容器，查到pid如下<br>root     24346 23838  0 10:30 pts&#47;1    00:00:00 docker exec -it new_web &#47;bin&#47;bash<br><br>我发现两个的ns不一致<br>[root@hjkj ~]# ll &#47;proc&#47;24346&#47;ns&#47;<br>total 0<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 ipc -&gt; ipc:[4026531839]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 mnt -&gt; mnt:[4026531840]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 net -&gt; net:[4026531956]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 pid -&gt; pid:[4026531836]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 user -&gt; user:[4026531837]<br>lrwxrwxrwx 1 root root 0 Sep  2 10:31 uts -&gt; uts:[4026531838]<br><br>是什么原因呢","like_count":0,"discussions":[{"author":{"id":2640738,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4b/62/b060f4b5.jpg","nickname":"Nightwish","note":"","ucode":"FC4C213C4063E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390633,"discussion_content":"docker exec -it new_web /bin/bash之后 系统会产生两个进程。一个是你上面的，还有一个是/bin/bash 的,后面这个进程id看到的和 容器的的 ns 才是同一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629947099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129154,"user_name":"随源而恒之","can_delete":false,"product_type":"c1","uid":1637538,"ip_address":"","ucode":"04762414C12687","user_header":"https://static001.geekbang.org/account/avatar/00/18/fc/a2/d4607ab6.jpg","comment_is_top":false,"comment_ctime":1567051039,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1567051039","product_id":100015201,"comment_content":"docker run -d -v &#47;test helloworld<br> docker exec -it 2c7fc5823b63 &#47;bin&#47;sh<br>ls 的时候看不到test 的文件夹,改成显式挂载绝对路径,在docker 里面也看不到 test 的文件夹,<br>这个为什么呢?","like_count":0,"discussions":[{"author":{"id":1177960,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqdk6dCTOkDnK2Gfr2t9gZtpfMiamOGwboqV1YZV9D49xs1vu8aRr9RJo1dtvPHlqFDJIsAVkC8xLw/132","nickname":"Geek_3e7bb8","note":"","ucode":"69B87AC5037B12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287031,"discussion_content":"cd /test","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593351066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8235,"discussion_content":"我也看不到，sad","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567847672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119842,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1564711471,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564711471","product_id":100015201,"comment_content":"看了前面几篇文章，老师的讲解通俗易懂！先赞一个！但是有个问题一直困扰我：通过同一个镜像启动的10个容器，这10个容器共享这个镜像的只读层吗？先提前感谢老师啦！祝老师工作顺利！","like_count":0,"discussions":[{"author":{"id":1248307,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/33/c5026169.jpg","nickname":"hiyang","note":"","ucode":"E521EE72C0F247","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286308,"discussion_content":"只读层都是共享的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593131053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113064,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c1","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1562892685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562892685","product_id":100015201,"comment_content":"我现在好奇虚拟化 hypervisor的工作原理了。 哈哈哈","like_count":0},{"had_liked":false,"id":99421,"user_name":"海绵家的猫","can_delete":false,"product_type":"c1","uid":1546322,"ip_address":"","ucode":"3513BFC251AD81","user_header":"https://static001.geekbang.org/account/avatar/00/17/98/52/45c3197e.jpg","comment_is_top":false,"comment_ctime":1559211060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559211060","product_id":100015201,"comment_content":"收获很大 由linux原理 讲解过来 看完之后 更透彻了些 感谢","like_count":0},{"had_liked":false,"id":98008,"user_name":"东方翔","can_delete":false,"product_type":"c1","uid":1112689,"ip_address":"","ucode":"AB40F11ACD4880","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/71/940942eb.jpg","comment_is_top":false,"comment_ctime":1558871164,"is_pvip":false,"replies":[{"id":"36293","content":"后续有答疑文章","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1559619035,"ip_address":"","comment_id":98008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558871164","product_id":100015201,"comment_content":"张老师，思考题的答案考虑贴一下哈？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451511,"discussion_content":"后续有答疑文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559619035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79082,"user_name":"senekis","can_delete":false,"product_type":"c1","uid":1446025,"ip_address":"","ucode":"CD88681F0278FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erTlRJ6skf7iawAeqNfIT1PPgjD7swUdRIRkX1iczjj97GNrxnsnn3QuOhkVbCLgFYAm7sMZficNTSbA/132","comment_is_top":false,"comment_ctime":1553346797,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553346797","product_id":100015201,"comment_content":"感谢老师！之前学习过docker，但是一直对docker volumn理解不清楚，这下终于明白了","like_count":0},{"had_liked":false,"id":72033,"user_name":"一品凡心","can_delete":false,"product_type":"c1","uid":1396394,"ip_address":"","ucode":"B672B214E09B88","user_header":"https://static001.geekbang.org/account/avatar/00/15/4e/aa/fa635174.jpg","comment_is_top":false,"comment_ctime":1551502633,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551502633","product_id":100015201,"comment_content":"另外，像日志文件，这种是不是也必须依靠volume扔到外面来？在里面会把镜像撑死了吧？","like_count":0},{"had_liked":false,"id":72032,"user_name":"一品凡心","can_delete":false,"product_type":"c1","uid":1396394,"ip_address":"","ucode":"B672B214E09B88","user_header":"https://static001.geekbang.org/account/avatar/00/15/4e/aa/fa635174.jpg","comment_is_top":false,"comment_ctime":1551502401,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551502401","product_id":100015201,"comment_content":"生产环境的数据库配置、Redis配置、各种其他配置，都是在Init层呢？还是使用Volume在宿主机里进行配置呢？显然不能放到镜像里吧？","like_count":0},{"had_liked":false,"id":64877,"user_name":"Somnus","can_delete":false,"product_type":"c1","uid":1311859,"ip_address":"","ucode":"B7ED552E699257","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/73/c5aa3114.jpg","comment_is_top":false,"comment_ctime":1548936736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548936736","product_id":100015201,"comment_content":"既然容器是一个进程 使用命令 ulimit 可以看到Linux系统默认句柄是65536，如果修改了句柄的数量，比如改成100万，运行一个tomcat的容器，那是不是可以支持100万个连接呢？","like_count":0},{"had_liked":false,"id":61687,"user_name":"吴小蓝","can_delete":false,"product_type":"c1","uid":1360683,"ip_address":"","ucode":"7BEC83EB492A67","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eor3yhoBAvuFFusCESsZ4raU3jSyeic9Cm9kib7DpaXt6hLBo0fp9YZBY15KicUgRTicSKXCVLMfJ6U4w/132","comment_is_top":false,"comment_ctime":1547774793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547774793","product_id":100015201,"comment_content":"在使用那些半懂的疑惑在这都有了解答，作者很棒","like_count":0},{"had_liked":false,"id":61515,"user_name":"noodles","can_delete":false,"product_type":"c1","uid":1131321,"ip_address":"","ucode":"A0FAF6BDF8E9CB","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/39/7642af93.jpg","comment_is_top":false,"comment_ctime":1547711358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547711358","product_id":100015201,"comment_content":"写的好赞 ","like_count":0},{"had_liked":false,"id":54518,"user_name":"jerrywjl","can_delete":false,"product_type":"c1","uid":1358780,"ip_address":"","ucode":"EDFBD13309BBBF","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/bc/03b14f36.jpg","comment_is_top":false,"comment_ctime":1545887656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545887656","product_id":100015201,"comment_content":"你好！<br><br>很多代码段在手机app上都显示不完整怎么办啊？<br><br>多谢！","like_count":0},{"had_liked":false,"id":54297,"user_name":"淸曉","can_delete":false,"product_type":"c1","uid":1332899,"ip_address":"","ucode":"6E63DA4E29FE09","user_header":"https://static001.geekbang.org/account/avatar/00/14/56/a3/649d861c.jpg","comment_is_top":false,"comment_ctime":1545822665,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1545822665","product_id":100015201,"comment_content":"#docker run -p 4000:80 helloworld<br><br> * Serving Flask app &quot;app&quot; (lazy loading)<br> * Environment: production<br>   WARNING: Do not use the development server in a production environment.<br>   Use a production WSGI server instead.<br> * Debug mode: off<br> * Running on http:&#47;&#47;0.0.0.0:80&#47; (Press CTRL+C to quit)<br>当我运行时，报这种错误。请问老师改如何解决？","like_count":0,"discussions":[{"author":{"id":1227336,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/48/c892a35b.jpg","nickname":"csoulsi","note":"","ucode":"96C9BBE9097FB3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79025,"discussion_content":"华佗在世也不行，这个是正常的日志输出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576047651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45982,"user_name":"平方","can_delete":false,"product_type":"c1","uid":1200755,"ip_address":"","ucode":"72D407F25FCA37","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/73/5aed1da6.jpg","comment_is_top":false,"comment_ctime":1543827842,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1543827842","product_id":100015201,"comment_content":"[root@localhost docker]# docker build -t helloworld1 .<br>Sending build context to Docker daemon 4.608 kB<br>Step 1&#47;7 : FROM python:2.7-slim<br> ---&gt; 0dc3d8d47241<br>Step 2&#47;7 : WORKDIR &#47;app<br> ---&gt; Using cache<br> ---&gt; 74a40db0034a<br>Step 3&#47;7 : ADD . &#47;app<br> ---&gt; 2f282dfd22d6<br>Removing intermediate container 6515bcf2a5a6<br>Step 4&#47;7 : RUN pip install --trusted-host pypi.python.org -r requirements.txt<br> ---&gt; Running in 098f83bb9d8c<br><br>Collecting Flask (from -r requirements.txt (line 1))<br>  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;NewConnectionError(&#39;&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7ffa79111190&gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution&#39;,)&#39;: &#47;simple&#47;flask&#47;<br>构建镜像时这个错误是什么","like_count":0,"discussions":[{"author":{"id":1275385,"avatar":"https://static001.geekbang.org/account/avatar/00/13/75/f9/feb5c318.jpg","nickname":"拉姆","note":"","ucode":"3EACB722BEF8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546497,"discussion_content":"可以这样子解决你的问题：\ndocker build -t helloworld --network=host .","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642321767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025518,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","nickname":"再见孙悟空","note":"","ucode":"57E12A2F9CD915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8236,"discussion_content":"重启下 docker 即可\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567847754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45974,"user_name":"平方","can_delete":false,"product_type":"c1","uid":1200755,"ip_address":"","ucode":"72D407F25FCA37","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/73/5aed1da6.jpg","comment_is_top":false,"comment_ctime":1543826938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543826938","product_id":100015201,"comment_content":"我启动镜像是报这个错是怎么回事<br>[root@localhost docker]# docker run -p 4000:80 helloworld<br>Traceback (most recent call last):<br>  File &quot;app.py&quot;, line 1, in &lt;module&gt;<br>    from flask import Flask<br>ImportError: No module named flask","like_count":0},{"had_liked":false,"id":43699,"user_name":"CXZ","can_delete":false,"product_type":"c1","uid":1227734,"ip_address":"","ucode":"F1C06BEDD8A654","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/d6/b76b5e51.jpg","comment_is_top":false,"comment_ctime":1543281976,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1543281976","product_id":100015201,"comment_content":"干活满满啊，请教一下，&#47;etc&#47;hosts文件中所做的修改，是不是可以被docker commit提交到新的镜像中的呢？","like_count":0,"discussions":[{"author":{"id":1229769,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c3/c9/a8e03342.jpg","nickname":"x","note":"","ucode":"96C5BFB1449FFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1931,"discussion_content":"上一节不是有讲吗，是不可以的，仔细看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563103079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42584,"user_name":"Kenng","can_delete":false,"product_type":"c1","uid":1013613,"ip_address":"","ucode":"0B3774179976F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/6d/30da1d9d.jpg","comment_is_top":false,"comment_ctime":1542974606,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1542974606","product_id":100015201,"comment_content":"把以前学过的东西又温习了一遍","like_count":0},{"had_liked":false,"id":41422,"user_name":"iris poon","can_delete":false,"product_type":"c1","uid":1302535,"ip_address":"","ucode":"6BCEDD4A473BAC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EYEGqfURVzkicr2iaVKTiakibwOFe1FapOZpR5a9uBWTngJia0qRNKjefJlDBuZ7tqV85mJyZj8gjcUkMlls04SibOeg/132","comment_is_top":false,"comment_ctime":1542778416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542778416","product_id":100015201,"comment_content":"当一个新的docker container被创建的时候，是会创建包括network namespace, mount namespace, pid namespace 等等所有的linux namespace吗？","like_count":0},{"had_liked":false,"id":39498,"user_name":"balancer","can_delete":false,"product_type":"c1","uid":1145758,"ip_address":"","ucode":"A865FAFF2FE1FA","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/9e/37d69ff0.jpg","comment_is_top":false,"comment_ctime":1542290940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542290940","product_id":100015201,"comment_content":"老师，docker 容器要配置自己独立的tcp收发缓存在哪里配置？不能改变主机的配置项","like_count":0},{"had_liked":false,"id":39309,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1542245657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542245657","product_id":100015201,"comment_content":"请问docker挂载有何限制没，是否随便一个目录都可以挂载？在容器里应该是root用户，岂不是可以对目录无节制地操作，哪怕原本主机目录中有些文件并不允许当前用户访问？是否可以相应限制<br><br>2018-09-11<br><br> 作者回复<br><br>无限制。至于用户权限，是有user namespace可以做一定的限制。<br><br>问一下如果给docker进程本身就不是宿主机的root权限，那他怎么无限制的目录权限呢？<br>","like_count":0},{"had_liked":false,"id":38990,"user_name":"垣齐","can_delete":false,"product_type":"c1","uid":1126653,"ip_address":"","ucode":"0911099B4B1F1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/fd/dec6e141.jpg","comment_is_top":false,"comment_ctime":1542167484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542167484","product_id":100015201,"comment_content":"centos下的联合文件系统不是aufs吧，请问怎么查看层信息？","like_count":0},{"had_liked":false,"id":38980,"user_name":"垣齐","can_delete":false,"product_type":"c1","uid":1126653,"ip_address":"","ucode":"0911099B4B1F1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/fd/dec6e141.jpg","comment_is_top":false,"comment_ctime":1542166404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542166404","product_id":100015201,"comment_content":"希望老师讲解一下思考题 ^_^","like_count":0},{"had_liked":false,"id":38394,"user_name":"宋旭","can_delete":false,"product_type":"c1","uid":1225428,"ip_address":"","ucode":"6A45D9104F8860","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/d4/f5152b18.jpg","comment_is_top":false,"comment_ctime":1542030104,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542030104","product_id":100015201,"comment_content":"请问overlay 文件系统下 如何查看各个层呢？ ","like_count":0},{"had_liked":false,"id":38250,"user_name":"韩大","can_delete":false,"product_type":"c1","uid":1198440,"ip_address":"","ucode":"998B64DD552C8D","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/68/a05fb728.jpg","comment_is_top":false,"comment_ctime":1542001818,"is_pvip":false,"replies":[{"id":"13794","content":"随便来的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1542070732,"ip_address":"","comment_id":38250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542001818","product_id":100015201,"comment_content":"请问张老师，您的dockerfile为啥不是from centos 用系统作为基础镜像？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428654,"discussion_content":"随便来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542070732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37881,"user_name":"东风","can_delete":false,"product_type":"c1","uid":1083454,"ip_address":"","ucode":"EB0214A64B28E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/3e/5a91d9f3.jpg","comment_is_top":false,"comment_ctime":1541764944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541764944","product_id":100015201,"comment_content":"写的很好，很有帮助","like_count":0},{"had_liked":false,"id":35990,"user_name":"朱晔","can_delete":false,"product_type":"c1","uid":1257126,"ip_address":"","ucode":"67671B0082F4BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/a6/96b2d10a.jpg","comment_is_top":false,"comment_ctime":1540884994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540884994","product_id":100015201,"comment_content":"第一个课后题，有童鞋或者老师帮忙解释一下么","like_count":0},{"had_liked":false,"id":33756,"user_name":"NBB","can_delete":false,"product_type":"c1","uid":1226767,"ip_address":"","ucode":"47B9BF4AAFECAE","user_header":"https://static001.geekbang.org/account/avatar/00/12/b8/0f/8edee986.jpg","comment_is_top":false,"comment_ctime":1539873200,"is_pvip":false,"replies":[{"id":"12111","content":"不了解harbor……","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1539875939,"ip_address":"","comment_id":33756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539873200","product_id":100015201,"comment_content":"老师您好！我想请问，我自己搭建的Harbor服务器，在项目管理页面的右上角会显示我有50GB的空间，请问这个空间是取决于我的服务器硬盘容量还是harbor的配置？我有没有办法把空间弄大一点？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427041,"discussion_content":"不了解harbor……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539875939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31623,"user_name":"Yiliu","can_delete":false,"product_type":"c1","uid":1068884,"ip_address":"","ucode":"2CF20B138244B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/54/552bde40.jpg","comment_is_top":false,"comment_ctime":1539247769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539247769","product_id":100015201,"comment_content":"很好的课程，从docker开始讲了来龙去脉。<br>边听语音边看文字往下学，效率很高。<br>repository读错了😏","like_count":0},{"had_liked":false,"id":29547,"user_name":"yyarrow","can_delete":false,"product_type":"c1","uid":1259054,"ip_address":"","ucode":"69EEF030AFB517","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEYbNElGIxYx8WCwo8RW6AJZibdGbETckBQER1ktTE1bFcRp4GNpmzXTIGm9DSiaU305tCkwONOW3Q/132","comment_is_top":false,"comment_ctime":1538410812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538410812","product_id":100015201,"comment_content":"干货很多，要反复琢磨一下了！","like_count":0},{"had_liked":false,"id":26113,"user_name":"木 易","can_delete":false,"product_type":"c1","uid":1033212,"ip_address":"","ucode":"5C3BBB5958A4B5","user_header":"","comment_is_top":false,"comment_ctime":1537500157,"is_pvip":false,"replies":[{"id":"9516","content":"看部署那篇","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537513915,"ip_address":"","comment_id":26113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537500157","product_id":100015201,"comment_content":"张老师，能把搭建docker k8s的环境简要说一下吗，比如使用ubuntu还是centos、rhel，什么版本。我们可以参考教程，自己搭建模拟环境。","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424530,"discussion_content":"看部署那篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537513915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25872,"user_name":"仓颉jk","can_delete":false,"product_type":"c1","uid":1015387,"ip_address":"","ucode":"D1C3620779B4C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/5b/35005438.jpg","comment_is_top":false,"comment_ctime":1537458392,"is_pvip":false,"replies":[{"id":"9405","content":"因为被隔离到单独的net ns里了呀","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537460381,"ip_address":"","comment_id":25872,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537458392","product_id":100015201,"comment_content":"为什么容器内只能看到两个网卡信息呢？","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424437,"discussion_content":"因为被隔离到单独的net ns里了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537460381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25710,"user_name":"Young","can_delete":false,"product_type":"c1","uid":1130374,"ip_address":"","ucode":"D38F17998E2D3C","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/86/1b02c298.jpg","comment_is_top":false,"comment_ctime":1537419689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537419689","product_id":100015201,"comment_content":"赞","like_count":0},{"had_liked":false,"id":24501,"user_name":"江宇霆","can_delete":false,"product_type":"c1","uid":1232848,"ip_address":"","ucode":"D38A92CFD4D611","user_header":"https://static001.geekbang.org/account/avatar/00/12/cf/d0/15d7c285.jpg","comment_is_top":false,"comment_ctime":1537089349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537089349","product_id":100015201,"comment_content":"写的不错     点赞","like_count":0},{"had_liked":false,"id":24458,"user_name":"gao","can_delete":false,"product_type":"c1","uid":1159945,"ip_address":"","ucode":"34D8304E68FECC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/09/5acaeb40.jpg","comment_is_top":false,"comment_ctime":1537024408,"is_pvip":false,"replies":[{"id":"8965","content":"再次进入image是什么操作……","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537086776,"ip_address":"","comment_id":24458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1537024408","product_id":100015201,"comment_content":"docker容器挂载目录在commit后再次进入image，还是能看到之前挂载目录下的文件的，有点奇怪。","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423993,"discussion_content":"再次进入image是什么操作……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537086776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24372,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1198001,"ip_address":"","ucode":"261C1321DB7DC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/b1/290cd99d.jpg","comment_is_top":false,"comment_ctime":1536932765,"is_pvip":false,"replies":[{"id":"8972","content":"默念三遍 内核共享","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1537087124,"ip_address":"","comment_id":24372,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536932765","product_id":100015201,"comment_content":"请问老师，镜像只提供文件系统，系统调用使用的宿主机的内核？这个感觉很模糊，不是很理解","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423958,"discussion_content":"默念三遍 内核共享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537087124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24266,"user_name":"格瑞图","can_delete":false,"product_type":"c1","uid":1221271,"ip_address":"","ucode":"57CC0F830BE1EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/97/fb8c01fd.jpg","comment_is_top":false,"comment_ctime":1536886796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536886796","product_id":100015201,"comment_content":"公司研发环境用的 oracle 官方的 12c 容器","like_count":0},{"had_liked":false,"id":24088,"user_name":"vasks","can_delete":false,"product_type":"c1","uid":1055105,"ip_address":"","ucode":"8DF1E11B9CE054","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/81/55de3b27.jpg","comment_is_top":false,"comment_ctime":1536800756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536800756","product_id":100015201,"comment_content":"docket里面的用户和真实系统的会冲突吗 docker启动用户用root好不好","like_count":0},{"had_liked":false,"id":24023,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1536759734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536759734","product_id":100015201,"comment_content":"老师分享的太清晰明了了！Linux不是很懂。有几个问题困扰很久了，想请教下。我安装了docker for window，启用了Linux容器，虚拟机是hv。<br>1、如何进入docker所在的linux宿主<br>2、即使进入了，安装命令都没有如何安装。如，rpm，yum，apt，make 这些命令都没有<br>3、如果用curl安装，下载下来，没有make命令也安装不了<br><br>老师，这些有什么办法解决呢？只是想在window机器上直接可以用docker<br><br>","like_count":0},{"had_liked":false,"id":23995,"user_name":"hepr1989","can_delete":false,"product_type":"c1","uid":1017728,"ip_address":"","ucode":"42166F82907E15","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/80/5712e981.jpg","comment_is_top":false,"comment_ctime":1536744395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536744395","product_id":100015201,"comment_content":"干货满满，终于把之前的一些疑惑弄清楚了","like_count":0},{"had_liked":false,"id":23922,"user_name":"明珠","can_delete":false,"product_type":"c1","uid":1218179,"ip_address":"","ucode":"F55F64691BD31E","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/83/747d4431.jpg","comment_is_top":false,"comment_ctime":1536720021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536720021","product_id":100015201,"comment_content":"容器init层的文件是容器独享的，还是和操作系统共享的?  不是很明白init层是怎么实现的?","like_count":0},{"had_liked":false,"id":23858,"user_name":"笑忘日月星辰","can_delete":false,"product_type":"c1","uid":1093857,"ip_address":"","ucode":"79B6F429C78D8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/e1/3aeb2d2d.jpg","comment_is_top":false,"comment_ctime":1536710140,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1536710140","product_id":100015201,"comment_content":"庖丁解牛","like_count":0},{"had_liked":false,"id":23836,"user_name":"恋敌","can_delete":false,"product_type":"c1","uid":1173585,"ip_address":"","ucode":"09F0F09BB11D3F","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/51/801343ab.jpg","comment_is_top":false,"comment_ctime":1536679185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536679185","product_id":100015201,"comment_content":"一条条留言看过去，并逐一解答 赞","like_count":0},{"had_liked":false,"id":23801,"user_name":"王雅光","can_delete":false,"product_type":"c1","uid":1225757,"ip_address":"","ucode":"E1F3E81FA3C4C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/1d/7d8115ec.jpg","comment_is_top":false,"comment_ctime":1536664678,"is_pvip":false,"replies":[{"id":"8711","content":"可以的","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536669379,"ip_address":"","comment_id":23801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536664678","product_id":100015201,"comment_content":"老师，如果在docker容器里跑的服务里面做一些配置的修改，比如tomcat里面的配置，或者webapp里面的spring-mvc.xml等类似的配置文件，都是以volumn这样的绑定挂载形式做修改吧！不知是否正确！","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423734,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536669379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23785,"user_name":"Gordon_luo","can_delete":false,"product_type":"c1","uid":1227504,"ip_address":"","ucode":"A97C816C038E22","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTISptnPUp4qEdJOOeAu4ic5qiayEtIrmaTTdhIMaZMjuolsajYAXicXTQBLOfbwryajShCTr23xAxOAw/132","comment_is_top":false,"comment_ctime":1536653113,"is_pvip":false,"replies":[{"id":"8710","content":"商业产品，不做评价","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1536669251,"ip_address":"","comment_id":23785,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536653113","product_id":100015201,"comment_content":"您好，rancher好用吗","like_count":0,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423726,"discussion_content":"商业产品，不做评价","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536669251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23675,"user_name":"天下","can_delete":false,"product_type":"c1","uid":1139564,"ip_address":"","ucode":"B7A23205108AFF","user_header":"","comment_is_top":false,"comment_ctime":1536585071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536585071","product_id":100015201,"comment_content":"非常好，在结合容器云的书。之前不懂得清晰多了。辛苦了","like_count":0},{"had_liked":false,"id":23668,"user_name":"咕噜男爵-Tony","can_delete":false,"product_type":"c1","uid":1219258,"ip_address":"","ucode":"8C841851AC767F","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/ba/f5eb2a66.jpg","comment_is_top":false,"comment_ctime":1536581030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536581030","product_id":100015201,"comment_content":"Cgroup namespace 推测是用来&quot;容器&quot;内的资源管理的，不知对不对","like_count":0}]}