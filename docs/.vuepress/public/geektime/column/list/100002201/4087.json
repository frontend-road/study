{"id":4087,"title":"46 | 弹力设计篇之“补偿事务”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>前面，我们说过，分布式系统有一个比较明显的问题就是，一个业务流程需要组合一组服务。这样的事情在微服务下就更为明显了，因为这需要业务上一致性的保证。也就是说，如果一个步骤失败了，那么要么回滚到以前的服务调用，要么不断重试保证所有的步骤都成功。</p><p>这里，如果需要强一致性，那在业务层上就需要使用“两阶段提交”这样的方式。但是好在我们的很多情况下并不需要这么强的一致性，而且强一致性的最佳保证基本都是在底层完成的，或是像之前说的那样Stateful的Sticky Session那样在一台机器上完成。在我们接触到的大多数业务中，其实只需要最终一致性就够了。</p><h1>ACID 和 BASE</h1><p>谈到这里，有必要先说一下ACID和BASE的差别。传统关系型数据库系统的事务都有ACID属性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。下面我逐一做下解释：</p><ul>\n<li>\n<p><strong>原子性</strong>：整个事务中的所有操作，要么全部完成，要么全部失败，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>\n</li>\n<li>\n<p><strong>一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p>\n</li>\n<li>\n<p><strong>隔离性</strong>：两个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时中间某一时刻的数据。两个事务不会发生交互。</p>\n</li>\n<li>\n<p><strong>持久性</strong>：在事务完成以后，该事务对数据库所做的更改便持久地保存在数据库之中，并不会被回滚。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>事务的ACID属性保证了数据库的一致性，比如银行系统中，转账就是一个事务，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和构成一个完整的逻辑过程，是不可拆分的原子操作，从而保证了整个系统中的总金额没有变化。</p><p>然而，这对于我们的分布式系统来说，尤其是微服务来说，这样的方式是很难满足高性能要求的。我们都很熟悉CAP理论——在分布式的服务架构中，一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance），在现实中不能都满足，最多只能满足其中两个。</p><p>所以，为了提高性能，出现了ACID的一个变种BASE。</p><ul>\n<li>\n<p><strong>Basic Availability</strong>：基本可用。这意味着，系统可以出现暂时不可用的状态，而后面会快速恢复。</p>\n</li>\n<li>\n<p><strong>Soft-state</strong>：软状态。它是我们前面的“有状态”和“无状态”的服务的一种中间状态。也就是说，为了提高性能，我们可以让服务暂时保存一些状态或数据，这些状态和数据不是强一致性的。</p>\n</li>\n<li>\n<p><strong>Eventual Consistency</strong>：最终一致性，系统在一个短暂的时间段内是不一致的，但最终整个系统看到的数据是一致的。</p>\n</li>\n</ul><p>可以看到，BASE系统是允许或是容忍系统出现暂时性问题的，这样一来，我们的系统就能更有弹力。因为我们知道，在分布式系统的世界里，故障是不可避免的，我们能做的就是把故障处理当成功能写入代码中，这就是Design for Failure。</p><p>BASE的系统倾向于设计出更加有弹力的系统，这种系统的设计特点是，要保证在短时间内，就算是有数据不同步的风险，我们也应该允许新的交易可以发生，而后面我们在业务上将可能出现问题的事务给处理掉，以保证最终的一致性。</p><p>举个例子，网上卖书的场景。</p><p>ACID的玩法就是，大家在买同一本书的过程中，每个用户的购买请求都需要把库存锁住，等减完库存后，把锁释放出来，后续的人才能进行购买。于是，在ACID的玩法下，我们在同一时间不可能有多个用户下单，我们的订单流程需要有排队的情况，这样一来，我们就不可能做出性能比较高的系统来。</p><p>BASE的玩法是，大家都可以同时下单，这个时候不需要去真正地分配库存，然后系统异步地处理订单，而且是批量的处理。因为下单的时候没有真正去扣减库存，所以，有可能会有超卖的情况。而后台的系统会异步地处理订单时，发现库存没有了，于是才会告诉用户你没有购买成功。</p><p>BASE这种玩法，其实就是亚马逊的玩法，因为要根据用户的地址去不同的仓库查看库存，这个操作非常耗时，所以，不想做成异步的都不行。</p><p>在亚马逊上买东西，你会收到一封邮件说，系统收到你的订单了，然后过一会儿你会收到你的订单被确认的邮件，这时候才是真正地分配了库存。所以，有某些时候，你会遇到你先收到了下单的邮件，过一会又收到了没有库存的之前的邮件。</p><p>有趣的是，ACID的意思是酸，而BASE却是碱的意思，因此这是一个对立的东西。其实，从本质上来讲，酸（ACID）强调的是一致性（CAP中的C），而碱（BASE）强调的是可用性（CAP中的A）。</p><h1>业务补偿</h1><p>有了上面对ACID和BASE的分析，我们知道，在很多情况下，我们是无法做到强一致的ACID的。特别是我们需要跨多个系统的时候，而且这些系统还不是由一个公司所提供的。比如，在我们的日常生活中，我们经常会遇到这样的情况，就是要找很多方协调很多事，而且要保证我们每一件事都成功，否则整件事就做不到。</p><p>比如，要出门旅游， 我们需要干这么几件事。第一，向公司请假，拿到相应的假期；第二，订飞机票或是火车票；第三，订酒店；第四，租车。这四件事中，前三件必需完全成功，我们才能出行，而第四件事只是一个锦上添花的事，但第四件事一旦确定，那么也会成为整个事务的一部分。这些事都是要向不同的组织或系统请求。我们可以并行地做这些事，而如果某个事有变化，其它的事都会跟着出现一些变化。</p><p>设想下面的几种情况。</p><ol>\n<li>\n<p>我没有订到返程机票，那么我就去不了了。我需要把订到的去程机票，酒店、租到的车都给取消了，并且把请的假也取消了。</p>\n</li>\n<li>\n<p>如果我假也请好了，机票，酒店也订好了，只是车没租到，那么并不影响我出行这个事，整个事还是可以继续的。</p>\n</li>\n<li>\n<p>如果我的飞机因为天气原因取消或是晚点了，那么我被迫要去调整和修改我的酒店预订和租车的预订。</p>\n</li>\n</ol><p>从人类的实际生活当中，我们可以看出，上述的这些情况都是天天在发生的事情。所以，我们的分布式系统也是一样的，也是需要处理这样的事情——就是当条件不满足，或是有变化的时候，需要从业务上做相应的整体事务的补偿。</p><p>一般来说，业务的事务补偿都是需要一个工作流引擎的。亚马逊是一个超级喜欢工作流引擎的公司，这个工作流引擎把各式各样的服务给串联在一起，并在工作流上做相应的业务补偿，整个过程设计成为最终一致性的。</p><p>对于业务补偿来说，首先需要将服务做成幂等性的，如果一个事务失败了或是超时了，我们需要不断地重试，努力地达到最终我们想要的状态。然后，如果我们不能达到这个我们想要的状态，我们需要把整个状态恢复到之前的状态。另外，如果有变化的请求，我们需要启动整个事务的业务更新机制。</p><p>所以，一个好的业务补偿机制需要做到下面这几点。</p><ol>\n<li>\n<p>要能清楚地描述出要达到什么样的状态（比如：请假、机票、酒店这三个都必须成功，租车是可选的），以及如果其中的条件不满足，那么，我们要回退到哪一个状态。这就是所谓的整个业务的起始状态定义。</p>\n</li>\n<li>\n<p>当整条业务跑起来的时候，我们可以串行或并行地做这些事。对于旅游订票是可以并行的，但是对于网购流程（下单、支付、送货）是不能并行的。总之，我们的系统需要努力地通过一系列的操作达到一个我们想要的状态。如果达不到，就需要通过补偿机制回滚到之前的状态。<strong>这就是所谓的状态拟合</strong>。</p>\n</li>\n<li>\n<p>对于已经完成的事务进行整体修改，可以考虑成一个修改事务。</p>\n</li>\n</ol><p>其实，在纯技术的世界里也有这样的事。比如，线上运维系统需要发布一个新的服务或是对一个已有的服务进行水平扩展，我们需要先找到相应的机器，然后初始化环境，再部署上应用，再做相应的健康检查，最后接入流量。这一系列的动作都要完全成功，所以，我们的部署系统就需要管理好整个过程和相关的运行状态。</p><h1>业务补偿的设计重点</h1><p>业务补偿主要做两件事。</p><ol>\n<li>努力地把一个业务流程执行完成。</li>\n<li>如果执行不下去，需要启动补偿机制，回滚业务流程。</li>\n</ol><p>所以，下面是几个重点。</p><ul>\n<li>\n<p>因为要把一个业务流程执行完成，需要这个流程中所涉及的服务方支持幂等性。并且在上游有重试机制。</p>\n</li>\n<li>\n<p>我们需要小心维护和监控整个过程的状态，所以，千万不要把这些状态放到不同的组件中，最好是一个业务流程的控制方来做这个事，也就是一个工作流引擎。所以，这个工作流引擎是需要高可用和稳定的。这就好像旅行代理机构一样，我们把需求告诉它，它会帮我们搞定所有的事。如果有问题，也会帮我们回滚和补偿的。</p>\n</li>\n<li>\n<p>补偿的业务逻辑和流程不一定非得是严格反向操作。有时候可以并行，有时候可以串行，可能会更简单。总之，设计业务正向流程的时候，也需要设计业务的反向补偿流程。</p>\n</li>\n<li>\n<p>我们要清楚地知道，业务补偿的业务逻辑是强业务相关的，很难做成通用的。</p>\n</li>\n<li>\n<p>下层的业务方最好提供短期的资源预留机制。就像电商中的把货品的库存预先占住等待用户在15分钟内支付。如果没有收到用户的支付，则释放库存。然后回滚到之前的下单操作，等待用户重新下单。</p>\n</li>\n</ul><h1>小结</h1><p>好了，我们来总结一下今天分享的主要内容。首先，我介绍了ACID和BASE两种不同级别的一致性。在分布式系统中，ACID有更强的一致性，但可伸缩性非常差，仅在必要时使用；BASE的一致性较弱，但有很好的可伸缩性，还可以异步批量处理；大多数分布式事务适合BASE。</p><p>要实现BASE事务，需要实现补偿逻辑，因为事务可能失败，此时需要协调各方进行撤销。补偿的各个步骤可以根据具体业务来确定是串行还是并行。由于补偿事务是和业务强相关的，所以必须实现在业务逻辑里。下节课，我们讲述重试设计。希望对你有帮助。</p><p>也欢迎你分享一下你的分布式服务用到了怎样的一致性？你是怎么实现补偿事务的？</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","comments":[{"had_liked":false,"id":3955,"user_name":"林超","can_delete":false,"product_type":"c1","uid":1014423,"ip_address":"","ucode":"E0C87AE892C4B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/97/2b71ab43.jpg","comment_is_top":false,"comment_ctime":1521073712,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"117485190704","product_id":100002201,"comment_content":"期待讲解下工作流引擎的实现","like_count":27,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196,"discussion_content":"希望有些微服务 工作量引擎 编排实践讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561271945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9776,"user_name":"mingshun","can_delete":false,"product_type":"c1","uid":1096508,"ip_address":"","ucode":"731C2DCEEBB655","user_header":"","comment_is_top":false,"comment_ctime":1527082263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35886820631","product_id":100002201,"comment_content":"一直觉得补偿事务很烦琐，日常实现也是尽量避免。看了这篇后，发现是没有很好地记录起始状态，总是想着通过目标状态来反推，所以总感觉实现起来很烦琐，逻辑错踪复杂。也许是重度精神洁癖导致吧！总觉得对正向目标没意义的数据都没有记录的必要甚至认为是浪费，然而顾着正向目标却忘了反向目标，而两个方向的目标都同等重要。","like_count":9},{"had_liked":false,"id":4821,"user_name":"刘勇","can_delete":false,"product_type":"c1","uid":1056069,"ip_address":"","ucode":"F8FBB6D96F18D1","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/45/825d285c.jpg","comment_is_top":false,"comment_ctime":1522509317,"is_pvip":true,"replies":[{"id":"1407","content":"回滚是补偿的子集","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1522979859,"ip_address":"","comment_id":4821,"utype":1}],"discussion_count":3,"race_medal":0,"score":"35882247685","product_id":100002201,"comment_content":"补偿一词不是很理解，为什么回滚叫补偿？","like_count":8,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416549,"discussion_content":"回滚是补偿的子集","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1522979859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2941058,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/e0/82/17d214df.jpg","nickname":"李海洋","note":"","ucode":"5D642B3F9BF09B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559037,"discussion_content":"比如一笔交易我先扣钱了，但是后面发货失败了，这时需要回滚，但这个回滚不是回到扣钱之前的状态，而是做一个加钱的反操作，所以叫“补偿”。之所以不能直接回滚到扣钱前的状态，是因为在扣钱到发货的过程中，可能存在其他交易，我们直接回滚会把其他交易扣的钱也回滚掉","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648571581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1855461,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqeDhtia1hn5zFEuWfLc5MTBJlicic9FVF87qcpK3z0AhaXVgKEkgWoS2gplHtFPqhIicviaRISK67PXIg/132","nickname":"fesine","note":"","ucode":"CD1B4F52E04B14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271489,"discussion_content":"重做也是一种补偿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590147573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209608,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1587570522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31652341594","product_id":100002201,"comment_content":"事物补偿机制TCC（Try、Confirm、Cancel），是由2PC演变而来在业务层面去解决一致性问题的一种方案。其精髓在于定于业务执行逻辑的时候，同时实现一个抵消（补偿）正向逻辑的cancel操作，以便在异常情况下对原有操作进行回滚。其主要操作如下：<br>*Try操作做业务检查及资源预留--一般用户框架对外暴露服务<br>*Confirm做业务确认操作--真正执行的逻辑操作，一般认为Try成功Confirm一定成功<br>*Cancel实现一个与Try相反的操作既回滚操作--TCC的精髓，为业务操作定义一个补偿的操作<br>（对于不了解TCC的同学可以参考下，了解大致背景后再看晧哥的文章会有更深的体会。基本可以当做TCC的最佳实践去读。）<br>","like_count":8},{"had_liked":false,"id":235578,"user_name":"罗杰.菲の樂","can_delete":false,"product_type":"c1","uid":2016408,"ip_address":"","ucode":"63590706846EEA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","comment_is_top":false,"comment_ctime":1595100033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23069936513","product_id":100002201,"comment_content":"这里有一篇介绍工作流和状态机差别的文章：<br><br>https:&#47;&#47;workflowengine.io&#47;blog&#47;workflow-engine-vs-state-machine&#47;<br><br>When companies decide to implement a system that will help them manage business processes, their choice will probably lie between a workflow engine and a state machine. Though the behavior of the two systems seems to be quite similar, they both have a number of distinct features. Accordingly, it is necessary to analyze the pros and cons of both to decide which of the systems suits most company’s needs.<br><br>In general, the major difference between a workflow engine and a state machine lies in focus. In a workflow engine, transition to the next step occurs when a previous action is completed, whilst a state machine needs an external event that will cause branching to the next activity. In other words, state machine is event driven and workflow engine is not.","like_count":6},{"had_liked":false,"id":13391,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1529579670,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23004416150","product_id":100002201,"comment_content":"皓哥， 您好！我们业务上会面临一种情况，就是跨厂商跨系统保持系统间数据同步，无论是通过代码直接操作多个数据库进行同步，还是通过让厂商提供服务来进行同步，最终要么实现效果很差，要么就同步机制弄的略复杂（比如订阅发布，厂商不配合），让计划没法推进。您这边后续有计划说一下类似情况如何处理吗？<br><br>说到库存的话，我们行业这边还有一种神奇的操作。这种操作的要求是，“你没货我理解，但是你说有货、我要了、你再说没有那就不行”。所以在我们行业，通常把库存分为实库存和用户库存。用户看到的库存永远小于实库存，由于并发量并不大，只需要用简单的事务控制，也能在很大程度上可以避免超卖。但当库存很低的情况下，代码就要用严格的事务控制，来避免超卖了，执行效率就很低，好在这样的情况很少。","like_count":5,"discussions":[{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379593,"discussion_content":"这种场景很奇特","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624004447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292139,"discussion_content":"这种解决方案很神奇哦，谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595102320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1855461,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqeDhtia1hn5zFEuWfLc5MTBJlicic9FVF87qcpK3z0AhaXVgKEkgWoS2gplHtFPqhIicviaRISK67PXIg/132","nickname":"fesine","note":"","ucode":"CD1B4F52E04B14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271491,"discussion_content":"机票都可以超卖的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590147669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018494,"avatar":"","nickname":"whhbbq","note":"","ucode":"4A93F3E375CB44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147923,"discussion_content":"用户看到的库存永远小于实库存 ，就是安全库存。比如透出60%的实物库存给用户。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579681412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":3777,"user_name":"李达","can_delete":false,"product_type":"c1","uid":1004218,"ip_address":"","ucode":"9EB4E9490CDFB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/ba/dd0dfe33.jpg","comment_is_top":false,"comment_ctime":1520557419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"22995393899","product_id":100002201,"comment_content":"陈老师好，有个疑问想请教: 衡量高可用一般用几个9来衡量，例如4个9的高可用是指一年的服务不可用时间不能超过53分钟，我的疑问有两个: 第一，到底怎么样定义服务不可用？例如返回业务的系统忙算不算可用？第二，直观理解，可用性应该是针对单个接口定义的，一个系统有很多接口，那么一个系统的可用性又应该怎么计算呢？<br>非常感谢！","like_count":5},{"had_liked":false,"id":73952,"user_name":"Tim Zhang","can_delete":false,"product_type":"c1","uid":1214499,"ip_address":"","ucode":"4956AC5FE45EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/23/a0966b4d.jpg","comment_is_top":false,"comment_ctime":1552042994,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18731912178","product_id":100002201,"comment_content":"workflow用过两种 jbpmn的activiti5以及netflix的conductor。<br>workflow与task是两个重点<br>","like_count":5,"discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292138,"discussion_content":"学习了，谢谢\n\nhttps://netflixtechblog.com/evolution-of-netflix-conductor-16600be36bca\n\n现在 airflow 貌似也挺火","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595101281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13094,"user_name":"二康","can_delete":false,"product_type":"c1","uid":1097497,"ip_address":"","ucode":"45E85D80DE4544","user_header":"https://static001.geekbang.org/account/avatar/00/10/bf/19/24cc3e7c.jpg","comment_is_top":false,"comment_ctime":1529370638,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18709239822","product_id":100002201,"comment_content":"期待耗子叔可以讲讲如何设计一个补偿框架，可以讲讲具体地实现过程和相关技术和难点。谢谢","like_count":4},{"had_liked":false,"id":17931,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1073400,"ip_address":"","ucode":"74279BE011BEA4","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/f8/3f0ba76d.jpg","comment_is_top":false,"comment_ctime":1533032701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14417934589","product_id":100002201,"comment_content":"期待举例讲解补偿工作流引擎","like_count":3},{"had_liked":false,"id":5090,"user_name":"阿拖","can_delete":false,"product_type":"c1","uid":1080051,"ip_address":"","ucode":"6B940D3A4A3C6D","user_header":"","comment_is_top":false,"comment_ctime":1522723379,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14407625267","product_id":100002201,"comment_content":"感觉有点像2pc，工作流引擎是cooradinator。","like_count":3,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197,"discussion_content":"Coordinator？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561272081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86672,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1555422853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145357445","product_id":100002201,"comment_content":"最近做的订单业务，分为两步，第一步下单到本地，第二步下单到订单服务，两个数据库都有相同的订单数据，用到的方式感觉跟BASE的理念差不多，第一步直接入库，第二步加入重试和异步通知，订单服务做了幂等。<br>订单服务还做了查询接口，如果所有的重试都超时并且没有收到通知，一段时间过后可以调用查询接口去查订单的状态。<br>这样基本能达到三个9","like_count":2},{"had_liked":false,"id":12962,"user_name":"jackwoo","can_delete":false,"product_type":"c1","uid":1158114,"ip_address":"","ucode":"24B793B4CE6F57","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/e2/9301850e.jpg","comment_is_top":false,"comment_ctime":1529211146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10119145738","product_id":100002201,"comment_content":"希望可以出个工作流引擎介绍","like_count":2},{"had_liked":false,"id":12353,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1528775736,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10118710328","product_id":100002201,"comment_content":"在分布式的服务架构中，一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance），在现实中不能都满足，最多只能满足其中两个。<br>我觉得这句话有点歧义，我理解的是在不发生网络分区的情况下，CAP都能满足，当发生网络分区的时候，只能在CA中选一个。","like_count":2,"discussions":[{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376642,"discussion_content":"在分布式的服务架构中，一致性（Consistency）、可用性（Availability）、分区容忍性（Partition Tolerance），在现实中不能都满足，最多只能满足其中两个。\n——个人见解，这句话的表达，很清晰，没有歧义。首先，第一句，在分布式的服务架构中，这就是大前提了，也就是说，从严格意义上来说，这个分布式的服务架构100%的存在网络分区（严格意义上，100%存在网络延时），P不可避免。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622250128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102831,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/ef/9c5e695b.jpg","nickname":"oops","note":"","ucode":"1DEC23A503F8A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299467,"discussion_content":"前提是，p分区不可避免","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597711658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009375,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/df/501ba989.jpg","nickname":"面试官问","note":"","ucode":"F9CE89589772F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26535,"discussion_content":"你这个逻辑有问题，你假设P能满足的情况下，CAP都能满足，本质上还不是只能有两个可以满足？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570606778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12189,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1528678100,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10118612692","product_id":100002201,"comment_content":"我的理解是分布式事务为了提高性能，将要做的若干事情记录下来(属于本地事务)，然后再异步去执行这些若干事情(并行或串行)，尽量使其成功(重试)，如果的确不能成功，则需要回滚。这些若干事情中对于占用资源的事情，需要增加一个占用时间的限制，如果超过此时间但整个事务还没有提交，则释放资源，如如果没有在30分钟内支付，则释放库存。","like_count":3,"discussions":[{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379594,"discussion_content":"是的，的确如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624004568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223349,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1591068171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886035467","product_id":100002201,"comment_content":"强一致性的系统是什么样的？<br>举个例子：银行系统中，转账就是一个事务，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和构成一个完整的逻辑过程，是不可拆分的原子操作，从而保证了整个系统中的总金额没有变化。<br><br>强一致性会出现什么问题？<br>不能支持并发的场景，从而使得系统性能较低<br><br>但很多情况并不需要那么强的一致性，为此有什么改进方案？<br>最终一致性，允许或是容忍系统出现暂时性问题的，而后恢复，保证最终的一致性。<br><br>为了实现最终一致性应该要怎么做？<br>业务补偿。<br><br>如何设计业务补偿？<br>1.重试；2.重试不行回滚业务；3.请求变化，启动业务更新机制","like_count":1},{"had_liked":false,"id":95939,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1558263875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853231171","product_id":100002201,"comment_content":"请问下，self-stablization的理念是否跟补偿是一致的吗？他们有区别吗？","like_count":1},{"had_liked":false,"id":50974,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1545095122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840062418","product_id":100002201,"comment_content":"分布式事务的一些理论经验，以后工作落地具体的二阶段，Tcc事务等强一致性事务再来看","like_count":1},{"had_liked":false,"id":40189,"user_name":"Geek_fb3db2","can_delete":false,"product_type":"c1","uid":1218254,"ip_address":"","ucode":"8089B8311B6C80","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/ce/8c3bdbe5.jpg","comment_is_top":false,"comment_ctime":1542545139,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5837512435","product_id":100002201,"comment_content":"分布式事物感觉很复杂，特别在需要补偿情况下更应该有完善的机制，想问下，补偿是不是需要针对不同业务场景写不同代码。","like_count":1,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198,"discussion_content":"跟业务强相关应该是需要写。结合工作流引擎编排处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561272396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4854,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1522601049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5817568345","product_id":100002201,"comment_content":"亚马逊的工作流是如何实现呢？","like_count":1},{"had_liked":false,"id":3839,"user_name":"流畅","can_delete":false,"product_type":"c1","uid":1045600,"ip_address":"","ucode":"DEAED4FAF432BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/60/25fd2461.jpg","comment_is_top":false,"comment_ctime":1520817396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5815784692","product_id":100002201,"comment_content":"想再了解下工作流的实现，希望能讲解下","like_count":1},{"had_liked":false,"id":3791,"user_name":"阿凡达","can_delete":false,"product_type":"c1","uid":1046176,"ip_address":"","ucode":"50024BD54114E2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fatmttfXtP3XJ9dpbk4FblGJCnjwUynibe58xDGxv15kdOFLH7K1ol88QtUojEiaMdzlcHSLR7UbFNZHA84tr3Tw/132","comment_is_top":false,"comment_ctime":1520595492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5815562788","product_id":100002201,"comment_content":"期待深入讲解文中提到的工作流。","like_count":1},{"had_liked":false,"id":343715,"user_name":"Geek1691","can_delete":false,"product_type":"c1","uid":2811447,"ip_address":"","ucode":"70A6984847DB94","user_header":"","comment_is_top":false,"comment_ctime":1651021284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651021284","product_id":100002201,"comment_content":"补偿如果失败了呢？ 一般怎么处理","like_count":0},{"had_liked":false,"id":337079,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1646613624,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646613624","product_id":100002201,"comment_content":"工作流引擎可以讲解吗？","like_count":0},{"had_liked":false,"id":307969,"user_name":"林铭铭","can_delete":false,"product_type":"c1","uid":1068499,"ip_address":"","ucode":"AB392BEE7CD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/d3/67bdcca9.jpg","comment_is_top":false,"comment_ctime":1629343696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629343696","product_id":100002201,"comment_content":"最终一致性就是靠补偿来的。","like_count":0},{"had_liked":false,"id":275494,"user_name":"prepared","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","comment_is_top":false,"comment_ctime":1611562036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611562036","product_id":100002201,"comment_content":"补偿 失败怎么办","like_count":0},{"had_liked":false,"id":195103,"user_name":"墨灵","can_delete":false,"product_type":"c1","uid":1409700,"ip_address":"","ucode":"185D70CA20BEEE","user_header":"https://static001.geekbang.org/account/avatar/00/15/82/a4/a92c6eca.jpg","comment_is_top":false,"comment_ctime":1585136776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585136776","product_id":100002201,"comment_content":"讲得非常深入浅出，前端也能听得懂🤣","like_count":0},{"had_liked":false,"id":173772,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1579682393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579682393","product_id":100002201,"comment_content":"『BASE 这种玩法，其实就是亚马逊的玩法，因为要根据用户的地址去不同的仓库查看库存，这个操作非常耗时，所以，不想做成异步的都不行』<br>我们也是使用这种BASE这种玩法。在一段时间内不同系统的库存可用数是不一致的。","like_count":0},{"had_liked":false,"id":168495,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1578100134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578100134","product_id":100002201,"comment_content":"用工作流引擎来串连微服务这个还是比较新颖的，国内有这种案例吗？一般也就只做到了调用远程服务失败时，回滚本地事物，期待老师讲解补偿机制","like_count":0},{"had_liked":false,"id":164888,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1577105996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577105996","product_id":100002201,"comment_content":"学习笔记 https:&#47;&#47;mubu.com&#47;colla&#47;1ykqc_5rfAM","like_count":0},{"had_liked":false,"id":111330,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1562546070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562546070","product_id":100002201,"comment_content":"分布式系统中保证事务一致性有两种方式，一种是ACID，另一种是BASE，前者是酸，保证强一致性，后者是碱，保证系统高可用","like_count":0},{"had_liked":false,"id":29566,"user_name":"蒙奇D路飞","can_delete":false,"product_type":"c1","uid":1099618,"ip_address":"","ucode":"3A6F82688C2711","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/62/f93c4b0f.jpg","comment_is_top":false,"comment_ctime":1538443599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538443599","product_id":100002201,"comment_content":"理论只是了解 更多的希望 show the code~","like_count":0},{"had_liked":false,"id":12986,"user_name":"加多","can_delete":false,"product_type":"c1","uid":1101824,"ip_address":"","ucode":"B2192A2D58C444","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/00/9d05af66.jpg","comment_is_top":false,"comment_ctime":1529245560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529245560","product_id":100002201,"comment_content":"求，耗子叔，讲解分布式事务原理🤓","like_count":0}]}