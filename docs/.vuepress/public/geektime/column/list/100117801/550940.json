{"id":550940,"title":"09｜手写CPU（四）：如何实现CPU流水线的访存阶段？","content":"<p>你好，我是LMOS。</p><p>先简单回顾一下上一节课，我们设计了MiniCPU流水线的执行相关模块。其中包括执行控制模块、通用寄存器模块，以及可以进行加减法运算、大小比较、移位操作的ALU模块。</p><p>指令执行之后就到了流水线的下一级——访存。这节课我们就重点聊聊怎么设计实现访存的相关模块。在你的设想里，访存模块必要的组成部分有哪些呢？</p><p>如果你的第一反应是访存控制模块，我只能说你只答对了一部分。访存控制模块虽然是流水线的主线，但你可能忽略了流水线中的数据相关性问题。因此，今天我们先想办法解决流水线的数据冒险问题，然后再完成流水线访存阶段相关模块的设计。</p><p>这节课的代码你可以从<a href=\"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson06~11/mini_cpu\">这里</a>获取。</p><h2>流水线数据冒险</h2><p>在开始设计访存模块之前，我们得先解决一个问题，即流水线的数据冒险。</p><p>在CPU流水线里，执行不同的指令时会发生这样的情况：一条指令B，它依赖于前面还在流水线中的指令A的执行结果。当指令B到达执行阶段时，因为指令A还在访存阶段，所以这时候就无法提供指令B执行所需要的数据。这就导致指令B无法在预期的时钟周期内执行。</p><p><strong>当指令在流水线中重叠执行时，后面的指令需要用到前面的指令的执行结果，而前面的指令结果尚未写回，由此导致的冲突就叫数据冒险</strong>。</p><!-- [[[read_end]]] --><p>我再举个更具体些的例子。比如，有一条减法指令，它需要用到前面一条加法指令的运算结果作为被减数：</p><pre><code class=\"language-plain\">add\tx2,x0,x1\nsub x6,x2,x3\n</code></pre><p>结合下面的示意图，我们可以看到，在不做任何干预的情况下，sub依赖于add的执行结果，这导致sub指令要等到add指令走到流水线的第五个阶段，把结果写回之后才能执行，这就浪费了三个时钟周期。</p><p><img src=\"https://static001.geekbang.org/resource/image/72/5f/727431ce8a824f12541ea00a6863355f.jpg?wh=1920x624\" alt=\"图片\"></p><p>这种数据冒险将会严重地阻碍CPU的流水线，设置流水线目的就是为了提升效率，让某个时间点上有多条指令可以同时执行，这种让指令“干等”的状态显然不是最佳选项。那我们怎么解决这样的问题呢？方法其实不止一种，让我带你分析分析。</p><p>结合前的例子，我们最直接的处理办法就是通过编译器调整一些指令顺序。不过指令存在依赖关系的情况经常发生，用编译器调整的方式会导致延迟太长，处理的结果无法让我们满意。</p><p>别灰心，我们再另寻出路。把前面的加法指令add放到流水线中，通过观察整个运算过程，我们不难发现，其实add加法运算的结果，经过流水线的执行阶段（也就是第三个模块EX）之后就已经出来了，只是还没把结果写回到x2寄存器而已。</p><p><img src=\"https://static001.geekbang.org/resource/image/85/0d/856yy7f373d45a5de8e5881b46bc030d.jpg?wh=1920x624\" alt=\"图片\"></p><p>所以，另一种解决办法也就有了头绪，能不能通过向内部资源添加额外的硬件，来尽快找到缺少的运算项呢？</p><p>这当然可以。对于上述的指令序列，一旦ALU计算出加法指令的结果，就可以将其作为减法指令执行的数据输入，不需要等待指令完成，就可以解决数据冒险的问题。</p><p>如上图所示，将add指令执行阶段运算的结果x2中的值，直接传递给sub指令作为执行阶段的输入，替换sub指令在译码阶段读出的寄存器x2的值。这种硬件上解决数据冒险的方法称为前递（forwarding）。</p><p>好，思路既然理清楚了，我们就把它落地到实际设计里。</p><h2>数据前递模块的设计</h2><p>通过上节课执行模块的设计，我们知道了ALU的逻辑运算需要两个操作数，一个来自于通用寄存器，另一个来自于通用寄存器或者指令自带的立即数。</p><p>但是当需要读取的通用寄存器的值，依赖于前面第一条或者第二条指令的运算结果时，就出现了刚才我们提到的数据冒险问题。为了解决这个问题，就需要我们专门设计一个数据前递模块（forwarding），它在流水线中的位置如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/86/ab/867b43606a4e52777003f20cbcb61cab.jpg?wh=1920x624\" alt=\"图片\"></p><p><strong>所谓前递，顾名思义，就是把流水线中后面阶段产生的数据向前传递的过程。</strong></p><p>正如上图中的forwarding模块，可以看到它的数据来自于流水线中的执行模块EX、访存模块MEM、写回模块WB的输出，经过forwarding模块处理后，把数据传递到执行模块的输入。</p><p>然后，流水线根据当前指令的译码信号，选择读取通用寄存器的数据作为执行模块的操作数，或者选择来自前递模块的数据作为执行模块的操作数。</p><p>那么具体是如何选择前递数据作为执行模块的操作数呢？让我们结合下面forwarding模块的代码来寻找答案：</p><pre><code class=\"language-verilog\">module forwarding (\n  input [4:0] rs1,\n  input [4:0] rs2,\n  input [4:0] exMemRd,\n  input       exMemRw,\n  input [4:0] memWBRd,\n  input       memWBRw,\n  input        mem_wb_ctrl_data_toReg,\n  input [31:0] mem_wb_readData,\n  input [31:0] mem_wb_data_result,\n  input [31:0] id_ex_data_regRData1,\n  input [31:0] id_ex_data_regRData2,\n  input [31:0] ex_mem_data_result,\n\n  output [31:0] forward_rs1_data,\n  output [31:0] forward_rs2_data\n);\n  //检查是否发生数据冒险\n  wire [1:0] forward_rs1_sel = (exMemRw &amp; (rs1 == exMemRd) &amp; (exMemRd != 5'b0)) ? 2'b01\n                              :(memWBRw &amp; (rs1 == memWBRd) &amp; (memWBRd != 5'b0)) ? 2'b10\n                              : 2'b00;\n                  \n  wire [1:0] forward_rs2_sel = (exMemRw &amp; (rs2 == exMemRd) &amp; (exMemRd != 5'b0)) ? 2'b01\n                              :(memWBRw &amp; (rs2 == memWBRd) &amp; (memWBRd != 5'b0)) ? 2'b10\n                              : 2'b00;\n\n  wire [31:0] regWData = mem_wb_ctrl_data_toReg ? mem_wb_readData : mem_wb_data_result; \n\n  //根据数据冒险的类型选择前递的数据\n  assign forward_rs1_data = (forward_rs1_sel == 2'b00) ? id_ex_data_regRData1 :\n                            (forward_rs1_sel == 2'b01) ? ex_mem_data_result   :\n                            (forward_rs1_sel == 2'b10) ? regWData : 32'h0; \n\n  assign forward_rs2_data = (forward_rs2_sel == 2'b00) ? id_ex_data_regRData2 :\n                            (forward_rs2_sel == 2'b01) ? ex_mem_data_result   :\n                            (forward_rs2_sel == 2'b10) ? regWData : 32'h0; \nendmodule\n</code></pre><p>我们分别看看代码中的各种信号。前递模块输入的端口信号rs1和rs2，来自于指令译码后得到的两个通用寄存器索引。exMemRd信号是来自访存模块的对通用寄存器的访问地址。exMemRw是流水线访存阶段对通用寄存器的写使能控制信号。memWBRd 和 memWBRw分别是写回模块对通用寄存器的地址和写使能控制信号。</p><p>利用这些信号就可以判断是否发生数据冒险，我们结合下面这段代码继续分析分析：</p><pre><code class=\"language-verilog\">  //检查是否发生数据冒险\n  wire [1:0] forward_rs1_sel = (exMemRw &amp; (rs1 == exMemRd) &amp; (exMemRd != 5'b0)) ? 2'b01\n                              :(memWBRw &amp; (rs1 == memWBRd) &amp; (memWBRd != 5'b0)) ? 2'b10\n                              : 2'b00;\n                  \n  wire [1:0] forward_rs2_sel = (exMemRw &amp; (rs2 == exMemRd) &amp; (exMemRd != 5'b0)) ? 2'b01\n                              :(memWBRw &amp; (rs2 == memWBRd) &amp; (memWBRd != 5'b0)) ? 2'b10\n                              : 2'b00;\n</code></pre><p><strong>当需要读取的通用寄存器的地址等于访存，或者写回阶段要访问通用寄存器地址时（也就是rs1 == exMemRd和rs1 == memWBRd），就判断为将要发生数据冒险。</strong></p><p>当然，由于通用寄存器中的零寄存器的值永远为“0”，所以不会发生数据冒险，需要排除掉这种特殊情况（也就是exMemRd != 5’b0 和 memWBRd != 5’b0）。根据这样的判断结果，就会产生前递数据的两个选择信号forward_rs1_sel和forward_rs2_sel。</p><p>发生数据冒险的情况就是这样，那不发生数据冒险又是什么情况呢？下面是选择前递的数据对应的代码段，我们结合这段代码继续分析。</p><pre><code class=\"language-verilog\">  //根据数据冒险的类型选择前递的数据\n  assign forward_rs1_data = (forward_rs1_sel == 2'b00) ? id_ex_data_regRData1 :\n                            (forward_rs1_sel == 2'b01) ? ex_mem_data_result   :\n                            (forward_rs1_sel == 2'b10) ? regWData : 32'h0; \n\n  assign forward_rs2_data = (forward_rs2_sel == 2'b00) ? id_ex_data_regRData2 :\n                            (forward_rs2_sel == 2'b01) ? ex_mem_data_result   :\n                            (forward_rs2_sel == 2'b10) ? regWData : 32'h0; \n</code></pre><p>我们先把目光聚焦到id_ex_data_regRData1和id_ex_data_regRData2这两个信号上。它们来自于指令译码之后读出通用寄存器的两个操作数，这是流水线不发生数据冒险时，流水线正常选择的数据通路。</p><p>而ex_mem_data_result 信号是访存阶段需要写到通用寄存器的数据，regWData是回写阶段需要更新到通用寄存器的数据。这样，通过判断将要发生数据冒险的位置，前递模块选择性地把处于流水线中的数据前递，就可以巧妙地解决流水线中的数据冒险问题了。</p><h2>访存控制模块设计</h2><p>好了，解决了流水线的数据冒险问题，让我们回到流水线设计的主线来，继续完成流水线的第四级——访存相关模块的设计。</p><p>在<a href=\"https://time.geekbang.org/column/article/54792\">第六节课</a>讲CPU流水线的时候我们提到过，流水线中一条指令的生命周期分为五个阶段。流水线的访存阶段就是指，将数据从存储器中读出或写入存储器的过程。这个阶段会出现由 LOAD / STORE 指令产生的内存访问。</p><p>因为访存阶段的功能就是对存储器读写，所以访存控制信号中，最重要的两个信号就是<strong>存储器读控制信号memRead</strong> 和<strong>写控制信号memWrite</strong>。当然，访存的控制信号通路也会受流水线冲刷等流水线管理信号的控制，具体的代码如下：</p><pre><code class=\"language-verilog\">module ex_mem_ctrl(\n  input        clk,\n  input        reset,\n  input        in_mem_ctrl_memRead,   //memory读控制信号\n  input        in_mem_ctrl_memWrite,  //memory写控制信号\n  input  [1:0] in_mem_ctrl_maskMode,  //mask模式选择\n  input        in_mem_ctrl_sext,      //符合扩展\n  input        in_wb_ctrl_toReg,      //写回寄存器的数据选择，“1”时为mem读取的数据\n  input        in_wb_ctrl_regWrite,   //寄存器写控制信号\n  input        flush,                 //流水线数据冲刷信号\n  output       out_mem_ctrl_memRead,\n  output       out_mem_ctrl_memWrite,\n  output [1:0] out_mem_ctrl_maskMode,\n  output       out_mem_ctrl_sext,\n  output       out_wb_ctrl_toReg,\n  output       out_wb_ctrl_regWrite\n);\n\n  reg  reg_mem_ctrl_memRead; \n  reg  reg_mem_ctrl_memWrite; \n  reg [1:0] reg_mem_ctrl_maskMode; \n  reg  reg_mem_ctrl_sext; \n  reg  reg_wb_ctrl_toReg; \n  reg  reg_wb_ctrl_regWrite; \n\n  assign out_mem_ctrl_memRead = reg_mem_ctrl_memRead; \n  assign out_mem_ctrl_memWrite = reg_mem_ctrl_memWrite; \n  assign out_mem_ctrl_maskMode = reg_mem_ctrl_maskMode; \n  assign out_mem_ctrl_sext = reg_mem_ctrl_sext; \n  assign out_wb_ctrl_toReg = reg_wb_ctrl_toReg; \n  assign out_wb_ctrl_regWrite = reg_wb_ctrl_regWrite; \n  \n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_mem_ctrl_memRead &lt;= 1'h0; \n    end else if (flush) begin \n      reg_mem_ctrl_memRead &lt;= 1'h0; \n    end else begin \n      reg_mem_ctrl_memRead &lt;= in_mem_ctrl_memRead; \n    end\n  end\n\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_mem_ctrl_memWrite &lt;= 1'h0; \n    end else if (flush) begin \n      reg_mem_ctrl_memWrite &lt;= 1'h0; \n    end else begin \n      reg_mem_ctrl_memWrite &lt;= in_mem_ctrl_memWrite; \n    end\n  end\n  \n  …………  //由于代码较长，结构相似，这里省略了一部分，完整代码你可以从Gitee上获取\n  \nendmodule\n</code></pre><p>虽然代码有几十行，但过程还是很容易理解的。首先要根据流水线的冲刷控制信号flush，判断访存阶段的控制信号是否需要清零。</p><p>如果flush等于“0”，就把上一阶段送过来的控制信号（比如存储器读控制信号memRead、存储器写控制信号memWrite……等），通过寄存器保存下来，然后发送给存储器读写控制模块（dmem_rw.v）或者流水线的下一级使用。</p><h2>访存数据通路模块设计</h2><p>接下来，我们继续完成访存数据通路模块的设计。访存数据通路就是把访存阶段读取到的存储器数据，或者是指令执行产生的结果发送流水线的下一级处理。</p><p>由于下一级也就是流水线的最后一级——写回，所以访存的数据通路主要包括要写回的通用寄存器地址regWAddr、访问存储器读取的数据regRData2、指令运算的结果result等。</p><p>访存的数据通路也会受流水线冲刷等流水线管理信号的控制，具体代码如下：</p><pre><code class=\"language-verilog\">module ex_mem(\n  input         clk,\n  input         reset,\n  input  [4:0]  in_regWAddr,    //写回寄存器的地址\n  input  [31:0] in_regRData2,   //读存储器的数据\n  input  [1:0]  ex_result_sel,  //执行结果选择\n  input  [31:0] id_ex_data_imm, //指令立即数\n  input  [31:0] alu_result,     //ALU运算结果\n  input  [31:0] in_pc,          //当前PC值\n  input         flush,          //流水线数据冲刷控制信号\n  output [4:0]  data_regWAddr,\n  output [31:0] data_regRData2,\n  output [31:0] data_result,\n  output [31:0] data_pc\n);\n  reg [4:0] reg_regWAddr; \n  reg [31:0] reg_regRData2; \n  reg [31:0] reg_result; \n  reg [31:0] reg_pc; \n\n  wire [31:0] resulet_w = (ex_result_sel == 2'h0) ? alu_result :\n                          (ex_result_sel == 2'h1) ? id_ex_data_imm :\n                          (ex_result_sel == 2'h2) ? (in_pc +32'h4) : 32'h0;\n  assign data_regWAddr = reg_regWAddr; \n  assign data_regRData2 = reg_regRData2; \n  assign data_result = reg_result; \n  assign data_pc = reg_pc; \n\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_regWAddr &lt;= 5'h0; \n    end else if (flush) begin \n      reg_regWAddr &lt;= 5'h0; \n    end else begin \n      reg_regWAddr &lt;= in_regWAddr; \n    end\n  end\n\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_regRData2 &lt;= 32'h0; \n    end else if (flush) begin \n      reg_regRData2 &lt;= 32'h0; \n    end else begin \n      reg_regRData2 &lt;= in_regRData2; \n    end\n  end\n\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_result &lt;= 32'h0; \n    end else if (flush) begin \n      reg_result &lt;= 32'h0; \n    end else begin \n      reg_result &lt;= resulet_w; \n    end\n  end\n  \n  always @(posedge clk or posedge reset) begin\n    if (reset) begin \n      reg_pc &lt;= 32'h0; \n    end else if (flush) begin \n      reg_pc &lt;= 32'h0; \n    end else begin \n      reg_pc &lt;= in_pc; \n    end\n  end\nendmodule\n</code></pre><p>和上面的访存控制模块类似，访存数据通路模块也是根据流水线的冲刷控制信号flush，判断访存阶段的数据是否需要清零。如果不需要清零，就把上一阶段送过来的数据通过寄存器保存下来。</p><p>对于代码的第21到第23行代码，我为你单独解释一下。</p><p>ex_result_sel就是对流水线执行阶段的结果进行选择。当（ex_result_sel == 2’h0）时，就选择ALU的运算结果；当（ex_result_sel == 2’h1）时，就会选择指令解码得到的立即数（其实就是对应LUI指令）；当（ex_result_sel == 2’h2）时，选择PC加4的值，也就是下一个PC的值。</p><pre><code class=\"language-verilog\">  wire [31:0] resulet_w = (ex_result_sel == 2'h0) ? alu_result :\n                          (ex_result_sel == 2'h1) ? id_ex_data_imm :\n                          (ex_result_sel == 2'h2) ? (in_pc +32'h4) : 32'h0;\n</code></pre><h2>重点回顾</h2><p>这节课的内容到这里就告一段落了，我给你做个总结吧。</p><p>今天我们在设计访存模块之前，先探讨了流水线中的数据冒险问题。在执行指令时，如果发生了数据冒险，就可能使流水线停顿，等待前面的指令执行完成后才能继续执行后续的指令，严重影响了指令在CPU流水线中并行执行。因此，我们设计了<strong>数据前递模块</strong>来解决数据冒险的问题。</p><p>但是，添加前递模块并不能避免所有的流水线停顿。比如，当一条读存储器指令（LOAD）之后紧跟一条需要使用其结果的R型指令时，就算使用前递也需要流水线停顿。因为读存储器的数据必须要在访存之后才能用，但load指令正在访存时，后一条指令已经在执行。所以，在这种情况下，流水线必须停顿，通常的说法是<strong>在两条指令之间插入气泡</strong>。</p><p>最后，我们根据流水线的控制信号，完成了访存控制信号通路和访存数据通路的模块设计。这节课的要点你可以参考下面的导图。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/53/9407395b0d8dc0eef24878c1a9978353.jpg?wh=1920x1763\" alt=\"图片\"></p><p>通过课程的讲解，CPU流水线中访存阶段的设计实现的思路，相信你已经心中有数了，别忘了课后结合配套代码再找找“手感”。下节课，我们将会介绍流水线的最后一级——写回模块的设计，敬请期待。</p><h2>思考题</h2><p>除了数据冒险，我们的CPU流水线是否还存在其它的冲突问题，你想到解决方法了么？</p><p>欢迎你在留言区和我交流，踊跃提问或者记录笔记对我们加深理解有很大的帮助。如果你觉得这节课还不错，别忘了分享给更多朋友，和他一起手写CPU。</p>","neighbors":{"left":{"article_title":"08｜手写CPU（三）：如何实现指令执行模块？","id":550393},"right":{"article_title":"10｜手写CPU（五）：CPU流水线的写回模块如何实现？","id":552136}},"comments":[{"had_liked":false,"id":354584,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"湖北","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1660565118,"is_pvip":false,"replies":[{"id":129182,"content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661052694,"ip_address":"湖北","comment_id":354584,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"在硬件层面，为提高流水线效率。按照同时钟周期原则，假如ac为一组指令，c的运算必须依赖a的结果，那可以把同样周期的bd插入ac中组为abcd指令，a指令下去运算，紧接着b指令也下去运算，这样表面上c需要a的等待时间，但等待时间途中b指令也忙着，相当于cpu核没有空闲，利用指令b指令的时间间隙，a指令完成执行，结果返回给c，c执行差不多，b指令完成执行结果就可以立马返回给d指令执行了\ncpu核执行指令没有空闲时间，乱序执行，这是通过增加晶体管来完成的！\n这可以和今天的流水线执行方式进行互补的啊","like_count":8,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584702,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661052695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354579,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"湖北","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1660561878,"is_pvip":false,"replies":[{"id":129183,"content":"是的 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661052725,"ip_address":"湖北","comment_id":354579,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"cpu流水线下，软硬件中断导致须停下手头工作来处理中断问题，频繁的软硬件中断会降低cpu工作效率（比如正在运行的数据需要来回存取读写），在明面上如用户一下打开多个app容易卡住，或者浏览器打开多个网页……\n解决方法，如浏览器给定同时允许打开网页的最大数，或者app中也设软件cache，减少因网络即时数据存储问题导致的中断量加大，比如，优化软件结构。能就近找到的数据不要让cpu遍历去找！\n在cpu层面，尽量将宽度一致的数据&#47;指令列为一组，减少内存不该有的缺页异常（该有的还得有）！","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584703,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661052725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356439,"user_name":"枫落","can_delete":false,"product_type":"c1","uid":1058138,"ip_address":"湖北","ucode":"6A4914860788E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/5a/750924af.jpg","comment_is_top":false,"comment_ctime":1662305498,"is_pvip":false,"replies":[{"id":129933,"content":"是的 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662885285,"ip_address":"湖北","comment_id":356439,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"空泡是什么指令呢？这个时候流水线是也处于忙状态吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587217,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662885285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355090,"user_name":"+1","can_delete":false,"product_type":"c1","uid":2062412,"ip_address":"湖北","ucode":"9CE97442D75966","user_header":"","comment_is_top":false,"comment_ctime":1661072017,"is_pvip":false,"replies":[{"id":129454,"content":"外存储器一般 是内存","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661678452,"ip_address":"湖北","comment_id":355090,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"不太理解在什么情况下需要在访存这个阶段从存储器中读取数据，不是能在执行阶段通过寄存器地址完成么？另外存储器和寄存器有什么区别呢？然后为何还有给pc地址加4的情况，不是在预读取的时候就完成了么","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585574,"discussion_content":"外存储器一般 是内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661678452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2618440,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f4/48/2242bed9.jpg","nickname":"吴建平","note":"","ucode":"C6E578FB8627A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585012,"discussion_content":"第一个问题本来我也有，往回翻了下第5课内容，其中说“在 RISC-V 指令集中，对内存的读写只能通过 LOAD 指令和 STORE 指令实现。而其他的指令，都只能以寄存器为操作对象。”，所以如果代码需要对内存某个数据做运算，要先load到寄存器，再以寄存器为操作数计算，所以必然出现load在第四阶段，而计算在前几个阶段（此时发生数据冒险）。第二个问题存储器是内存，寄存器是芯片内缓存。第三个问题我估计要在后续订课程找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661270492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354750,"user_name":"青玉白露","can_delete":false,"product_type":"c1","uid":2619436,"ip_address":"湖北","ucode":"96FE2D4D2B94A0","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","comment_is_top":false,"comment_ctime":1660744001,"is_pvip":false,"replies":[{"id":129173,"content":"哈哈","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661051728,"ip_address":"湖北","comment_id":354750,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"精彩！锁、内存屏障等概念其实说到底就是基于访存阶段进行的特性化操作，还有很多的东西需要妈那美女消化。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584690,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661051728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384591,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"上海","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1701217305,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"数据冒险，下一条指令的源寄存器地址等于当前执行的目标寄存器地址，下一条指令的执行必须等待上一条指令完成访存和写回才能进行下去。解决方案是访存模块会把输入寄存器地址和操作数发给执行前的forwarding模块，如果该地址执行所需的源操作数地址一致，就可以用操作数替换前面从通用寄存器中读出的值，这样流水线就不需要暂停。","like_count":0}]}