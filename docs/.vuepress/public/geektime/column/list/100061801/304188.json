{"id":304188,"title":"13 | Channel：另辟蹊径，解决并发问题","content":"<p>你好，我是鸟窝。</p><p>Channel是Go语言内建的first-class类型，也是Go语言与众不同的特性之一。Go语言的Channel设计精巧简单，以至于也有人用其它语言编写了类似Go风格的Channel库，比如<a href=\"https://github.com/docker/libchan\">docker/libchan</a>、<a href=\"https://github.com/tylertreat/chan\">tylertreat/chan</a>，但是并不像Go语言一样把Channel内置到了语言规范中。从这一点，你也可以看出来，Channel的地位在编程语言中的地位之高，比较罕见。</p><p>所以，这节课，我们就来学习下Channel。</p><h1>Channel的发展</h1><p>要想了解Channel这种Go编程语言中的特有的数据结构，我们要追溯到CSP模型，学习一下它的历史，以及它对Go创始人设计Channel类型的影响。</p><p>CSP是Communicating Sequential Process 的简称，中文直译为通信顺序进程，或者叫做交换信息的循序进程，是用来描述并发系统中进行交互的一种模式。</p><p>CSP最早出现于计算机科学家Tony Hoare 在1978年发表的<a href=\"https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf\">论文</a>中（你可能不熟悉Tony Hoare这个名字，但是你一定很熟悉排序算法中的Quicksort算法，他就是Quicksort算法的作者，图灵奖的获得者）。最初，论文中提出的CSP版本在本质上不是一种进程演算，而是一种并发编程语言，但之后又经过了一系列的改进，最终发展并精炼出CSP的理论。<strong>CSP允许使用进程组件来描述系统，它们独立运行，并且只通过消息传递的方式通信。</strong></p><!-- [[[read_end]]] --><p>就像Go的创始人之一Rob Pike所说的：“每一个计算机程序员都应该读一读Tony Hoare 1978年的关于CSP的论文。”他和Ken Thompson在设计Go语言的时候也深受此论文的影响，并将CSP理论真正应用于语言本身（Russ Cox专门写了一篇文章记录这个<a href=\"https://swtch.com/~rsc/thread/\">历史</a>），通过引入Channel这个新的类型，来实现CSP的思想。</p><p><strong>Channel类型是Go语言内置的类型，你无需引入某个包，就能使用它</strong>。虽然Go也提供了传统的并发原语，但是它们都是通过库的方式提供的，你必须要引入sync包或者atomic包才能使用它们，而Channel就不一样了，它是内置类型，使用起来非常方便。</p><p>Channel和Go的另一个独特的特性goroutine一起为并发编程提供了优雅的、便利的、与传统并发控制不同的方案，并演化出很多并发模式。接下来，我们就来看一看Channel的应用场景。</p><h1>Channel的应用场景</h1><p>首先，我想先带你看一条Go语言中流传很广的谚语：</p><blockquote>\n<p>Don’t communicate by sharing memory, share memory by communicating.</p>\n</blockquote><blockquote>\n<p>Go Proverbs by Rob Pike</p>\n</blockquote><p>这是Rob Pike在2015年的一次Gopher会议中提到的一句话，虽然有一点绕，但也指出了使用Go语言的哲学，我尝试着来翻译一下：“<strong>执行业务处理的goroutine不要通过共享内存的方式通信，而是要通过Channel通信的方式分享数据。</strong>”</p><p>“communicate by sharing memory”和“share memory by communicating”是两种不同的并发处理模式。“communicate by sharing memory”是传统的并发编程处理方式，就是指，共享的数据需要用锁进行保护，goroutine需要获取到锁，才能并发访问数据。</p><p>“share memory by communicating”则是类似于CSP模型的方式，通过通信的方式，一个goroutine可以把数据的“所有权”交给另外一个goroutine（虽然Go中没有“所有权”的概念，但是从逻辑上说，你可以把它理解为是所有权的转移）。</p><p>从Channel的历史和设计哲学上，我们就可以了解到，Channel类型和基本并发原语是有竞争关系的，它应用于并发场景，涉及到goroutine之间的通讯，可以提供并发的保护，等等。</p><p>综合起来，我把Channel的应用场景分为五种类型。这里你先有个印象，这样你可以有目的地去学习Channel的基本原理。下节课我会借助具体的例子，来带你掌握这几种类型。</p><ol>\n<li><strong>数据交流</strong>：当作并发的buffer或者queue，解决生产者-消费者问题。多个goroutine可以并发当作生产者（Producer）和消费者（Consumer）。</li>\n<li><strong>数据传递</strong>：一个goroutine将数据交给另一个goroutine，相当于把数据的拥有权(引用)托付出去。</li>\n<li><strong>信号通知</strong>：一个goroutine可以将信号(closing、closed、data ready等)传递给另一个或者另一组goroutine 。</li>\n<li><strong>任务编排</strong>：可以让一组goroutine按照一定的顺序并发或者串行的执行，这就是编排的功能。</li>\n<li><strong>锁</strong>：利用Channel也可以实现互斥锁的机制。</li>\n</ol><p>下面，我们来具体学习下Channel的基本用法。</p><h1>Channel基本用法</h1><p>你可以往Channel中发送数据，也可以从Channel中接收数据，所以，Channel类型（为了说起来方便，我们下面都把Channel叫做chan）分为<strong>只能接收</strong>、<strong>只能发送</strong>、<strong>既可以接收又可以发送</strong>三种类型。下面是它的语法定义：</p><pre><code>ChannelType = ( &quot;chan&quot; | &quot;chan&quot; &quot;&lt;-&quot; | &quot;&lt;-&quot; &quot;chan&quot; ) ElementType .\n</code></pre><p>相应地，Channel的正确语法如下：</p><pre><code>chan string          // 可以发送接收string\nchan&lt;- struct{}      // 只能发送struct{}\n&lt;-chan int           // 只能从chan接收int\n</code></pre><p>我们把既能接收又能发送的chan叫做双向的chan，把只能发送和只能接收的chan叫做单向的chan。其中，“&lt;-”表示单向的chan，如果你记不住，我告诉你一个简便的方法：<strong>这个箭头总是射向左边的，元素类型总在最右边。如果箭头指向chan，就表示可以往chan中塞数据；如果箭头远离chan，就表示chan会往外吐数据</strong>。</p><p>chan中的元素是任意的类型，所以也可能是chan类型，我来举个例子，比如下面的chan类型也是合法的：</p><pre><code>chan&lt;- chan int   \nchan&lt;- &lt;-chan int  \n&lt;-chan &lt;-chan int\nchan (&lt;-chan int)\n</code></pre><p>可是，怎么判定箭头符号属于哪个chan呢？其实，“&lt;-”有个规则，总是尽量和左边的chan结合（The <code>&lt;-</code> operator associates with the leftmost <code>chan</code> possible:），因此，上面的定义和下面的使用括号的划分是一样的：</p><pre><code>chan&lt;- （chan int） // &lt;- 和第一个chan结合\nchan&lt;- （&lt;-chan int） // 第一个&lt;-和最左边的chan结合，第二个&lt;-和左边第二个chan结合\n&lt;-chan （&lt;-chan int） // 第一个&lt;-和最左边的chan结合，第二个&lt;-和左边第二个chan结合 \nchan (&lt;-chan int) // 因为括号的原因，&lt;-和括号内第一个chan结合\n</code></pre><p>通过make，我们可以初始化一个chan，未初始化的chan的零值是nil。你可以设置它的容量，比如下面的chan的容量是9527，我们把这样的chan叫做buffered chan；如果没有设置，它的容量是0，我们把这样的chan叫做unbuffered chan。</p><pre><code>make(chan int, 9527)\n</code></pre><p>如果chan中还有数据，那么，从这个chan接收数据的时候就不会阻塞，如果chan还未满（“满”指达到其容量），给它发送数据也不会阻塞，否则就会阻塞。unbuffered chan只有读写都准备好之后才不会阻塞，这也是很多使用unbuffered chan时的常见Bug。</p><p>还有一个知识点需要你记住：nil是chan的零值，是一种特殊的chan，对值是nil的chan的发送接收调用者总是会阻塞。</p><p>下面，我来具体给你介绍几种基本操作，分别是发送数据、接收数据，以及一些其它操作。学会了这几种操作，你就能真正地掌握Channel的用法了。</p><p><strong>1.发送数据</strong></p><p>往chan中发送一个数据使用“ch&lt;-”，发送数据是一条语句:</p><pre><code>ch &lt;- 2000\n</code></pre><p>这里的ch是chan int类型或者是chan &lt;-int。</p><p><strong>2.接收数据</strong></p><p>从chan中接收一条数据使用“&lt;-ch”，接收数据也是一条语句：</p><pre><code>  x := &lt;-ch // 把接收的一条数据赋值给变量x\n  foo(&lt;-ch) // 把接收的一个的数据作为参数传给函数\n  &lt;-ch // 丢弃接收的一条数据\n</code></pre><p>这里的ch类型是chan T或者&lt;-chan T。</p><p>接收数据时，还可以返回两个值。第一个值是返回的chan中的元素，很多人不太熟悉的是第二个值。第二个值是bool类型，代表是否成功地从chan中读取到一个值，如果第二个参数是false，chan已经被close而且chan中没有缓存的数据，这个时候，第一个值是零值。所以，如果从chan读取到一个零值，可能是sender真正发送的零值，也可能是closed的并且没有缓存元素产生的零值。</p><p><strong>3.其它操作</strong></p><p>Go内建的函数close、cap、len都可以操作chan类型：close会把chan关闭掉，cap返回chan的容量，len返回chan中缓存的还未被取走的元素数量。</p><p>send和recv都可以作为select语句的case clause，如下面的例子：</p><pre><code>func main() {\n    var ch = make(chan int, 10)\n    for i := 0; i &lt; 10; i++ {\n        select {\n        case ch &lt;- i:\n        case v := &lt;-ch:\n            fmt.Println(v)\n        }\n    }\n}\n</code></pre><p>chan还可以应用于for-range语句中，比如：</p><pre><code>    for v := range ch {\n        fmt.Println(v)\n    }\n</code></pre><p>或者是忽略读取的值，只是清空chan：</p><pre><code>    for range ch {\n    }\n</code></pre><p>好了，到这里，Channel的基本用法，我们就学完了。下面我从代码实现的角度分析chan类型的实现。毕竟，只有掌握了原理，你才能真正地用好它。</p><h1>Channel的实现原理</h1><p>接下来，我会给你介绍chan的数据结构、初始化的方法以及三个重要的操作方法，分别是send、recv和close。通过学习Channel的底层实现，你会对Channel的功能和异常情况有更深的理解。</p><h2>chan数据结构</h2><p>chan类型的数据结构如下图所示，它的数据类型是<a href=\"https://github.com/golang/go/blob/master/src/runtime/chan.go#L32\">runtime.hchan</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/dd/81304c1f1845d21c66195798b6ba48dd.jpg?wh=2334*2250\" alt=\"\"></p><p>下面我来具体解释各个字段的意义。</p><ul>\n<li>qcount：代表chan中已经接收但还没被取走的元素的个数。内建函数len可以返回这个字段的值。</li>\n<li>dataqsiz：队列的大小。chan使用一个循环队列来存放元素，循环队列很适合这种生产者-消费者的场景（我很好奇为什么这个字段省略size中的e）。</li>\n<li>buf：存放元素的循环队列的buffer。</li>\n<li>elemtype和elemsize：chan中元素的类型和size。因为chan一旦声明，它的元素类型是固定的，即普通类型或者指针类型，所以元素大小也是固定的。</li>\n<li>sendx：处理发送数据的指针在buf中的位置。一旦接收了新的数据，指针就会加上elemsize，移向下一个位置。buf的总大小是elemsize的整数倍，而且buf是一个循环列表。</li>\n<li>recvx：处理接收请求时的指针在buf中的位置。一旦取出数据，此指针会移动到下一个位置。</li>\n<li>recvq：chan是多生产者多消费者的模式，如果消费者因为没有数据可读而被阻塞了，就会被加入到recvq队列中。</li>\n<li>sendq：如果生产者因为buf满了而阻塞，会被加入到sendq队列中。</li>\n</ul><h2>初始化</h2><p>Go在编译的时候，会根据容量的大小选择调用makechan64，还是makechan。</p><p>下面的代码是处理make chan的逻辑，它会决定是使用makechan还是makechan64来实现chan的初始化：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/d7/e96f2fee0633c8157a88b8b725f702d7.png?wh=1137*489\" alt=\"\"></p><p><strong>我们只关注makechan就好了，因为makechan64只是做了size检查，底层还是调用makechan实现的</strong>。makechan的目标就是生成hchan对象。</p><p>那么，接下来，就让我们来看一下makechan的主要逻辑。主要的逻辑我都加上了注释，它会根据chan的容量的大小和元素的类型不同，初始化不同的存储空间：</p><pre><code>func makechan(t *chantype, size int) *hchan {\n\t\telem := t.elem\n\t\n        // 略去检查代码\n        mem, overflow := math.MulUintptr(elem.size, uintptr(size))\n        \n\t\t//\n\t\tvar c *hchan\n\t\tswitch {\n\t\tcase mem == 0:\n\t\t\t// chan的size或者元素的size是0，不必创建buf\n\t\t\tc = (*hchan)(mallocgc(hchanSize, nil, true))\n\t\t\tc.buf = c.raceaddr()\n\t\tcase elem.ptrdata == 0:\n\t\t\t// 元素不是指针，分配一块连续的内存给hchan数据结构和buf\n\t\t\tc = (*hchan)(mallocgc(hchanSize+mem, nil, true))\n            // hchan数据结构后面紧接着就是buf\n\t\t\tc.buf = add(unsafe.Pointer(c), hchanSize)\n\t\tdefault:\n\t\t\t// 元素包含指针，那么单独分配buf\n\t\t\tc = new(hchan)\n\t\t\tc.buf = mallocgc(mem, elem, true)\n\t\t}\n\t\n        // 元素大小、类型、容量都记录下来\n\t\tc.elemsize = uint16(elem.size)\n\t\tc.elemtype = elem\n\t\tc.dataqsiz = uint(size)\n\t\tlockInit(&amp;c.lock, lockRankHchan)\n\n\t\treturn c\n\t}\n</code></pre><p>最终，针对不同的容量和元素类型，这段代码分配了不同的对象来初始化hchan对象的字段，返回hchan对象。</p><h2>send</h2><p>Go在编译发送数据给chan的时候，会把send语句转换成chansend1函数，chansend1函数会调用chansend，我们分段学习它的逻辑：</p><pre><code>func chansend1(c *hchan, elem unsafe.Pointer) {\n\t\tchansend(c, elem, true, getcallerpc())\n}\nfunc chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool {\n        // 第一部分\n\t\tif c == nil {\n\t\t\tif !block {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tgopark(nil, nil, waitReasonChanSendNilChan, traceEvGoStop, 2)\n\t\t\tthrow(&quot;unreachable&quot;)\n\t\t}\n\t    ......\n\t}\n</code></pre><p>最开始，第一部分是进行判断：如果chan是nil的话，就把调用者goroutine park（阻塞休眠）， 调用者就永远被阻塞住了，所以，第11行是不可能执行到的代码。</p><pre><code>\t// 第二部分，如果chan没有被close,并且chan满了，直接返回\n    if !block &amp;&amp; c.closed == 0 &amp;&amp; full(c) {\n\t\t\treturn false\n\t}\n</code></pre><p>第二部分的逻辑是当你往一个已经满了的chan实例发送数据时，并且想不阻塞当前调用，那么这里的逻辑是直接返回。chansend1方法在调用chansend的时候设置了阻塞参数，所以不会执行到第二部分的分支里。</p><pre><code>\t// 第三部分，chan已经被close的情景\n    lock(&amp;c.lock) // 开始加锁\n    if c.closed != 0 {\n\t\t\tunlock(&amp;c.lock)\n\t\t\tpanic(plainError(&quot;send on closed channel&quot;))\n\t}\n</code></pre><p>第三部分显示的是，如果chan已经被close了，再往里面发送数据的话会panic。</p><pre><code>\t    // 第四部分，从接收队列中出队一个等待的receiver\n        if sg := c.recvq.dequeue(); sg != nil {\n\t\t\t// \n\t\t\tsend(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)\n\t\t\treturn true\n\t\t}\n</code></pre><p>第四部分，如果等待队列中有等待的receiver，那么这段代码就把它从队列中弹出，然后直接把数据交给它（通过memmove(dst, src, t.size)），而不需要放入到buf中，速度可以更快一些。</p><pre><code>\t  // 第五部分，buf还没满\n      if c.qcount &lt; c.dataqsiz {\n\t\t\tqp := chanbuf(c, c.sendx)\n\t\t\tif raceenabled {\n\t\t\t\traceacquire(qp)\n\t\t\t\tracerelease(qp)\n\t\t\t}\n\t\t\ttypedmemmove(c.elemtype, qp, ep)\n\t\t\tc.sendx++\n\t\t\tif c.sendx == c.dataqsiz {\n\t\t\t\tc.sendx = 0\n\t\t\t}\n\t\t\tc.qcount++\n\t\t\tunlock(&amp;c.lock)\n\t\t\treturn true\n\t\t}\n</code></pre><p>第五部分说明当前没有receiver，需要把数据放入到buf中，放入之后，就成功返回了。</p><pre><code>\t    // 第六部分，buf满。\n        // chansend1不会进入if块里，因为chansend1的block=true\n        if !block {\n\t\t\tunlock(&amp;c.lock)\n\t\t\treturn false\n\t\t}\n        ......\n</code></pre><p>第六部分是处理buf满的情况。如果buf满了，发送者的goroutine就会加入到发送者的等待队列中，直到被唤醒。这个时候，数据或者被取走了，或者chan被close了。</p><h2>recv</h2><p>在处理从chan中接收数据时，Go会把代码转换成chanrecv1函数，如果要返回两个返回值，会转换成chanrecv2，chanrecv1函数和chanrecv2会调用chanrecv。我们分段学习它的逻辑：</p><pre><code>    func chanrecv1(c *hchan, elem unsafe.Pointer) {\n\t\tchanrecv(c, elem, true)\n\t}\n\tfunc chanrecv2(c *hchan, elem unsafe.Pointer) (received bool) {\n\t\t_, received = chanrecv(c, elem, true)\n\t\treturn\n\t}\n\n    func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) {\n        // 第一部分，chan为nil\n\t\tif c == nil {\n\t\t\tif !block {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgopark(nil, nil, waitReasonChanReceiveNilChan, traceEvGoStop, 2)\n\t\t\tthrow(&quot;unreachable&quot;)\n\t\t}\n</code></pre><p>chanrecv1和chanrecv2传入的block参数的值是true，都是阻塞方式，所以我们分析chanrecv的实现的时候，不考虑block=false的情况。</p><p>第一部分是chan为nil的情况。和send一样，从nil chan中接收（读取、获取）数据时，调用者会被永远阻塞。</p><pre><code>\t// 第二部分, block=false且c为空\n    if !block &amp;&amp; empty(c) {\n      ......\n    }\n</code></pre><p>第二部分你可以直接忽略，因为不是我们这次要分析的场景。</p><pre><code>        // 加锁，返回时释放锁\n\t    lock(&amp;c.lock)\n\t    // 第三部分，c已经被close,且chan为空empty\n\t\tif c.closed != 0 &amp;&amp; c.qcount == 0 {\n\t\t\tunlock(&amp;c.lock)\n\t\t\tif ep != nil {\n\t\t\t\ttypedmemclr(c.elemtype, ep)\n\t\t\t}\n\t\t\treturn true, false\n\t\t}\n</code></pre><p>第三部分是chan已经被close的情况。如果chan已经被close了，并且队列中没有缓存的元素，那么返回true、false。</p><pre><code>\t    // 第四部分，如果sendq队列中有等待发送的sender\n        if sg := c.sendq.dequeue(); sg != nil {\n\t\t\trecv(c, sg, ep, func() { unlock(&amp;c.lock) }, 3)\n\t\t\treturn true, true\n\t\t}\n</code></pre><p>第四部分是处理buf满的情况。这个时候，如果是unbuffer的chan，就直接将sender的数据复制给receiver，否则就从队列头部读取一个值，并把这个sender的值加入到队列尾部。</p><pre><code>      // 第五部分, 没有等待的sender, buf中有数据\n\t  if c.qcount &gt; 0 {\n\t\t\tqp := chanbuf(c, c.recvx)\n\t\t\tif ep != nil {\n\t\t\t\ttypedmemmove(c.elemtype, ep, qp)\n\t\t\t}\n\t\t\ttypedmemclr(c.elemtype, qp)\n\t\t\tc.recvx++\n\t\t\tif c.recvx == c.dataqsiz {\n\t\t\t\tc.recvx = 0\n\t\t\t}\n\t\t\tc.qcount--\n\t\t\tunlock(&amp;c.lock)\n\t\t\treturn true, true\n\t\t}\n\n\t\tif !block {\n\t\t\tunlock(&amp;c.lock)\n\t\t\treturn false, false\n\t\t}\n\n        // 第六部分， buf中没有元素，阻塞\n        ......\n</code></pre><p>第五部分是处理没有等待的sender的情况。这个是和chansend共用一把大锁，所以不会有并发的问题。如果buf有元素，就取出一个元素给receiver。</p><p>第六部分是处理buf中没有元素的情况。如果没有元素，那么当前的receiver就会被阻塞，直到它从sender中接收了数据，或者是chan被close，才返回。</p><h2>close</h2><p>通过close函数，可以把chan关闭，编译器会替换成closechan方法的调用。</p><p>下面的代码是close chan的主要逻辑。如果chan为nil，close会panic；如果chan已经closed，再次close也会panic。否则的话，如果chan不为nil，chan也没有closed，就把等待队列中的sender（writer）和receiver（reader）从队列中全部移除并唤醒。</p><p>下面的代码就是close chan的逻辑:</p><pre><code>    func closechan(c *hchan) {\n\t\tif c == nil { // chan为nil, panic\n\t\t\tpanic(plainError(&quot;close of nil channel&quot;))\n\t\t}\n\t\n\t\tlock(&amp;c.lock)\n\t\tif c.closed != 0 {// chan已经closed, panic\n\t\t\tunlock(&amp;c.lock)\n\t\t\tpanic(plainError(&quot;close of closed channel&quot;))\n\t\t}\n\n\t\tc.closed = 1\t\n\n\t\tvar glist gList\n\n\t\t// 释放所有的reader\n\t\tfor {\n\t\t\tsg := c.recvq.dequeue()\n\t\t\t......\n\t\t\tgp := sg.g\n\t\t\t......\n\t\t\tglist.push(gp)\n\t\t}\n\t\n\t\t// 释放所有的writer (它们会panic)\n\t\tfor {\n\t\t\tsg := c.sendq.dequeue()\n\t\t\t......\n\t\t\tgp := sg.g\n\t\t\t......\n\t\t\tglist.push(gp)\n\t\t}\n\t\tunlock(&amp;c.lock)\n\t\n\t\tfor !glist.empty() {\n\t\t\tgp := glist.pop()\n\t\t\tgp.schedlink = 0\n\t\t\tgoready(gp, 3)\n\t\t}\n\t}\n</code></pre><p>掌握了Channel的基本用法和实现原理，下面我再来给你讲一讲容易犯的错误。你一定要认真看，毕竟，这些可都是帮助你避坑的。</p><h1>使用Channel容易犯的错误</h1><p>根据2019年第一篇全面分析Go并发Bug的<a href=\"https://songlh.github.io/paper/go-study.pdf\">论文</a>，那些知名的Go项目中使用Channel所犯的Bug反而比传统的并发原语的Bug还要多。主要有两个原因：一个是，Channel的概念还比较新，程序员还不能很好地掌握相应的使用方法和最佳实践；第二个是，Channel有时候比传统的并发原语更复杂，使用起来很容易顾此失彼。</p><p><strong>使用Channel最常见的错误是panic和goroutine泄漏</strong>。</p><p>首先，我们来总结下会panic的情况，总共有3种：</p><ol>\n<li>close为nil的chan；</li>\n<li>send已经close的chan；</li>\n<li>close已经close的chan。</li>\n</ol><p>goroutine泄漏的问题也很常见，下面的代码也是一个实际项目中的例子：</p><pre><code>func process(timeout time.Duration) bool {\n    ch := make(chan bool)\n\n    go func() {\n        // 模拟处理耗时的业务\n        time.Sleep((timeout + time.Second))\n        ch &lt;- true // block\n        fmt.Println(&quot;exit goroutine&quot;)\n    }()\n    select {\n    case result := &lt;-ch:\n        return result\n    case &lt;-time.After(timeout):\n        return false\n    }\n}\n</code></pre><p>在这个例子中，process函数会启动一个goroutine，去处理需要长时间处理的业务，处理完之后，会发送true到chan中，目的是通知其它等待的goroutine，可以继续处理了。</p><p>我们来看一下第10行到第15行，主goroutine接收到任务处理完成的通知，或者超时后就返回了。这段代码有问题吗？</p><p>如果发生超时，process函数就返回了，这就会导致unbuffered的chan从来就没有被读取。我们知道，unbuffered chan必须等reader和writer都准备好了才能交流，否则就会阻塞。超时导致未读，结果就是子goroutine就阻塞在第7行永远结束不了，进而导致goroutine泄漏。</p><p>解决这个Bug的办法很简单，就是将unbuffered chan改成容量为1的chan，这样第7行就不会被阻塞了。</p><p>Go的开发者极力推荐使用Channel，不过，这两年，大家意识到，Channel并不是处理并发问题的“银弹”，有时候使用并发原语更简单，而且不容易出错。所以，我给你提供一套选择的方法:</p><ol>\n<li>共享资源的并发访问使用传统并发原语；</li>\n<li>复杂的任务编排和消息传递使用Channel；</li>\n<li>消息通知机制使用Channel，除非只想signal一个goroutine，才使用Cond；</li>\n<li>简单等待所有任务的完成用WaitGroup，也有Channel的推崇者用Channel，都可以；</li>\n<li>需要和Select语句结合，使用Channel；</li>\n<li>需要和超时配合时，使用Channel和Context。</li>\n</ol><h1>它们踩过的坑</h1><p>接下来，我带你围观下知名Go项目的Channel相关的Bug。</p><p><a href=\"https://github.com/etcd-io/etcd/pull/6857\">etcd issue 6857</a>是一个程序hang住的问题：在异常情况下，没有往chan实例中填充所需的元素，导致等待者永远等待。具体来说，Status方法的逻辑是生成一个chan Status，然后把这个chan交给其它的goroutine去处理和写入数据，最后，Status返回获取的状态信息。</p><p>不幸的是，如果正好节点停止了，没有goroutine去填充这个chan，会导致方法hang在返回的那一行上（下面的截图中的第466行）。解决办法就是，在等待status chan返回元素的同时，也检查节点是不是已经停止了（done这个chan是不是close了）。</p><p>当前的etcd的代码就是修复后的代码，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/da/5f3c15c110077714be81be8eb1fd3fda.png?wh=920*481\" alt=\"\"></p><p>其实，我感觉这个修改还是有问题的。问题就在于，如果程序执行了466行，成功地把c写入到Status待处理队列后，执行到第467行时，如果停止了这个节点，那么，这个Status方法还是会阻塞在第467行。你可以自己研究研究，看看是不是这样。</p><p><a href=\"https://github.com/etcd-io/etcd/issues/5505\">etcd issue 5505</a> 虽然没有任何的Bug描述，但是从修复内容上看，它是一个往已经close的chan写数据导致panic的问题。</p><p><a href=\"https://github.com/etcd-io/etcd/issues/11256\">etcd issue 11256</a>  是因为unbuffered chan goroutine泄漏的问题。TestNodeProposeAddLearnerNode方法中一开始定义了一个unbuffered的chan，也就是applyConfChan，然后启动一个子goroutine，这个子goroutine会在循环中执行业务逻辑，并且不断地往这个chan中添加一个元素。TestNodeProposeAddLearnerNode方法的末尾处会从这个chan中读取一个元素。</p><p>这段代码在for循环中就往此chan中写入了一个元素，结果导致TestNodeProposeAddLearnerNode从这个chan中读取到元素就返回了。悲剧的是，子goroutine的for循环还在执行，阻塞在下图中红色的第851行，并且一直hang在那里。</p><p>这个Bug的修复也很简单，只要改动一下applyConfChan的处理逻辑就可以了：只有子goroutine的for循环中的主要逻辑完成之后，才往applyConfChan发送一个元素，这样，TestNodeProposeAddLearnerNode收到通知继续执行，子goroutine也不会被阻塞住了。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/9f/d53573c8fc515f78ea590bf73396969f.png?wh=1521*614\" alt=\"\"></p><p><a href=\"https://github.com/etcd-io/etcd/issues/9956\">etcd issue 9956</a> 是往一个已close的chan发送数据，其实它是grpc的一个bug（<a href=\"https://github.com/grpc/grpc-go/pull/2695\">grpc issue 2695</a>），修复办法就是不close这个chan就好了：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/21/650f0911b1c7278cc0438c85bbc4yy21.png?wh=1052*185\" alt=\"\"></p><h1>总结</h1><p>chan的值和状态有多种情况，而不同的操作（send、recv、close）又可能得到不同的结果，这是使用chan类型时经常让人困惑的地方。</p><p>为了帮助你快速地了解不同状态下各种操作的结果，我总结了一个表格，你一定要特别关注下那些panic的情况，另外还要掌握那些会block的场景，它们是导致死锁或者goroutine泄露的罪魁祸首。</p><p>还有一个值得注意的点是，只要一个chan还有未读的数据，即使把它close掉，你还是可以继续把这些未读的数据消费完，之后才是读取零值数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/98/5108954ea36559860e5e5aaa42b2f998.jpg?wh=3601*1075\" alt=\"\"></p><h1>思考题</h1><ol>\n<li>\n<p>有一道经典的使用Channel进行任务编排的题，你可以尝试做一下：有四个goroutine，编号为1、2、3、4。每秒钟会有一个goroutine打印出它自己的编号，要求你编写一个程序，让输出的编号总是按照1、2、3、4、1、2、3、4、……的顺序打印出来。</p>\n</li>\n<li>\n<p>chan T 是否可以给&lt;- chan T和chan&lt;- T类型的变量赋值？反过来呢？</p>\n</li>\n</ol><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得有所收获，也欢迎你把今天的内容分享给你的朋友或同事。</p>","neighbors":{"left":{"article_title":"12 | atomic：要保证原子操作，一定要使用这几种方法","id":304127},"right":{"article_title":"14 | Channel：透过代码看典型的应用模式","id":306614}},"comments":[{"had_liked":false,"id":260008,"user_name":"坚白同异","can_delete":false,"product_type":"c1","uid":1375143,"ip_address":"","ucode":"4030C4B64068A6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajZWFgjupJHhmSN3jJ5o9ibecnOQQmJBTxvjwm5ssJjmG1iaNic8XNR6DvZNwIJdjpjkBibicnJYyZUIAnOkw2wwv8w/132","comment_is_top":false,"comment_ctime":1604907309,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"130453926189","product_id":100061801,"comment_content":"思考题<br>1.<br>func main() {<br>\tch1 := make(chan int)<br>\tch2 := make(chan int)<br>\tch3 := make(chan int)<br>\tch4 := make(chan int)<br>\tgo func() {<br>\t\tfor {<br>\t\t\tfmt.Println(&quot;I&#39;m goroutine 1&quot;)<br>\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\tch2 &lt;-1 &#47;&#47;I&#39;m done, you turn<br>\t\t\t&lt;-ch1<br>\t\t}<br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch2<br>\t\t\tfmt.Println(&quot;I&#39;m goroutine 2&quot;)<br>\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\tch3 &lt;-1<br>\t\t}<br><br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch3<br>\t\t\tfmt.Println(&quot;I&#39;m goroutine 3&quot;)<br>\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\tch4 &lt;-1<br>\t\t}<br><br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch4<br>\t\t\tfmt.Println(&quot;I&#39;m goroutine 4&quot;)<br>\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\tch1 &lt;-1<br>\t\t}<br><br>\t}()<br><br><br><br>\tselect {}<br>}<br>2.双向通道可以赋值给单向,反过来不可以.","like_count":30,"discussions":[{"author":{"id":1121588,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/34/8201baab.jpg","nickname":"端贺","note":"","ucode":"80F1400B138055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325511,"discussion_content":"可以把后面3个time#sleep去掉。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605334942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261079,"user_name":"Junes","can_delete":false,"product_type":"c1","uid":1354665,"ip_address":"","ucode":"CD2E829C868970","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/a9/590d6f02.jpg","comment_is_top":false,"comment_ctime":1605191295,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"57439766143","product_id":100061801,"comment_content":"第一个问题实现的方法有很多，最常规的是用4个channel，我这边分享一个用单channel实现的思路：<br>因为channel的等待队列是先入先出的，所以我这边取巧地在goroutine前加一个等待时间，保证1~4的goroutine，他们在同个chan阻塞时是有序的<br><br>func main() {<br>\tch := make(chan struct{})<br>\tfor i := 1; i &lt;= 4; i++ {<br>\t\tgo func(index int) {<br>\t\t\ttime.Sleep(time.Duration(index*10) * time.Millisecond)<br>\t\t\tfor {<br>\t\t\t\t&lt;-ch<br>\t\t\t\tfmt.Printf(&quot;I am No %d Goroutine\\n&quot;, index)<br>\t\t\t\ttime.Sleep(time.Second)<br>\t\t\t\tch &lt;- struct{}{}<br>\t\t\t}<br>\t\t}(i)<br>\t}<br>\tch &lt;- struct{}{}<br>\ttime.Sleep(time.Minute)<br>}","like_count":13,"discussions":[{"author":{"id":2251514,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5a/fa/7ef26657.jpg","nickname":"🐥","note":"","ucode":"789FEBA6F97E86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335825,"discussion_content":"这得保证四个goroutine按顺序执行才可以吧。这段代码保证不了goroutine按1234执行","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608346107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1199805,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4e/bd/4b19cda0.jpg","nickname":"大力","note":"","ucode":"29785E3575761C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2251514,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5a/fa/7ef26657.jpg","nickname":"🐥","note":"","ucode":"789FEBA6F97E86","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336434,"discussion_content":"主要他在每次循环迭代后都sleep 了，不然确实是无序的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608595496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335825,"ip_address":""},"score":336434,"extra":""}]},{"author":{"id":1600340,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6b/54/04866f2e.jpg","nickname":"蕃了个茄","note":"","ucode":"90393ECFF5F0F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363716,"discussion_content":"sleep的时间是跟着index走的，如果都是sleep一样的时间，结果应该随机的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617268511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226920,"avatar":"https://static001.geekbang.org/account/avatar/00/21/fa/e8/45211b5a.jpg","nickname":"假期","note":"","ucode":"CF6464E859E1F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331558,"discussion_content":"巧妙地用到了receiver中的等待队列，给你点个赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606899814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261543,"user_name":"罗帮奎","can_delete":false,"product_type":"c1","uid":1271773,"ip_address":"","ucode":"8598D116E1FC3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/67/dd/55aa6e07.jpg","comment_is_top":false,"comment_ctime":1605412898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44555085858","product_id":100061801,"comment_content":"之前使用go-micro时候就遇到过，unbufferd chan导致的goroutine泄露的bug，当时情况是并发压力大导致rpc调用超时，超时退出当前函数导致了goroutine泄露，go-micro有一段类似的使用unbuffered chan的代码，后来改成了buffer=1","like_count":10},{"had_liked":false,"id":260764,"user_name":"fhs","can_delete":false,"product_type":"c1","uid":1640934,"ip_address":"","ucode":"941734CC64A296","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJWFdKjyLOXtCzowmdCUFHezNlnux4NPWmYsqETjiaHNbnmb7xdzibDncZqP06nNbpN4AhmD76cpicfw/132","comment_is_top":false,"comment_ctime":1605100607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40259806271","product_id":100061801,"comment_content":"func f(i int, input &lt;-chan int, output chan&lt;- int) {<br>\tfor {<br>\t\t&lt;-input<br>\t\tfmt.Println(i)<br>\t\ttime.Sleep(time.Second)<br>\t\toutput &lt;- 1<br>\t}<br>}<br>func TestChannelPlan(t *testing.T) {<br>\tc := [4]chan int{}<br>\tfor i := range []int{1, 2, 3, 4} {<br>\t\tc[i] = make(chan int)<br>\t}<br>\tgo f(1, c[3], c[0])<br>\tgo f(2, c[0], c[1])<br>\tgo f(3, c[1], c[2])<br>\tgo f(4, c[2], c[3])<br>\tc[3] &lt;- 1<br>\tselect {}<br>}<br>","like_count":9},{"had_liked":false,"id":327089,"user_name":"Noir","can_delete":false,"product_type":"c1","uid":1186981,"ip_address":"","ucode":"985D4C4A5E1E85","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/a5/226ce8a7.jpg","comment_is_top":false,"comment_ctime":1639910265,"is_pvip":false,"replies":[{"id":"119068","content":"对","user_name":"作者回复","comment_id":327089,"uid":"1066613","ip_address":"","utype":1,"ctime":1640046075,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"31704681337","product_id":100061801,"comment_content":"package main<br><br>import &quot;fmt&quot;<br>import &quot;time&quot;<br><br>func main() {<br>\tchArr := [4]chan struct{} {<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t}<br><br>\tfor i := 0; i &lt; 4; i++ {<br>\t\tgo func(i int) {<br>\t\t\tfor {<br>\t\t\t\t&lt;- chArr[i % 4]<br>\t\t\t\tfmt.Printf(&quot;i am %d\\n&quot;, i)<br>\t<br>\t\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\t\tchArr[(i + 1) % 4] &lt;- struct{}{}<br>\t\t\t}<br>\t\t}(i)<br>\t}<br><br>\tchArr[0] &lt;- struct{}{}<br>\tselect{}<br>}","like_count":7,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540357,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640046075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1239066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/1a/bd8fbac0.jpg","nickname":".","note":"","ucode":"423949857434E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":577335,"discussion_content":"最后的select有什么用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656040430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540357,"ip_address":""},"score":577335,"extra":""},{"author":{"id":2255648,"avatar":"https://static001.geekbang.org/account/avatar/00/22/6b/20/5c8d2d42.jpg","nickname":"刘小圆","note":"","ucode":"B131E008C42864","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1239066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/1a/bd8fbac0.jpg","nickname":".","note":"","ucode":"423949857434E9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591223,"discussion_content":"卡住不让main结束，不然主goroutine 一结束就全部结束，不会有任何输出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666409703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577335,"ip_address":"广西"},"score":591223,"extra":""}]}]},{"had_liked":false,"id":266056,"user_name":"星星之火","can_delete":false,"product_type":"c1","uid":1157566,"ip_address":"","ucode":"98B2A10373A2DE","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/be/f0b43691.jpg","comment_is_top":false,"comment_ctime":1607152345,"is_pvip":false,"replies":[{"id":"96649","content":"不是同一个，只是类似。channel中这个是运行时内部使用的mutex","user_name":"作者回复","comment_id":266056,"uid":"1066613","ip_address":"","utype":1,"ctime":1607160105,"user_name_real":"鸟窝"}],"discussion_count":2,"race_medal":0,"score":"18787021529","product_id":100061801,"comment_content":"channel 中包含的 mutex 是什么呢，和课程最开始的 sync.mutex 是同一个东西吗？<br>因为 sync.mutex 是依赖 channel 实现的，感觉应该不是同一个 mutex？","like_count":4,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511134,"discussion_content":"不是同一个，只是类似。channel中这个是运行时内部使用的mutex","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607160105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411847,"discussion_content":"sync.Mutex 是依赖 channel 实现的？没看到 sync.Mutex 的实现中有 channel 呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636017358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260504,"user_name":"Stony.修行僧","can_delete":false,"product_type":"c1","uid":1061277,"ip_address":"","ucode":"0F2368F7D93E4A","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/9d/daad92d2.jpg","comment_is_top":false,"comment_ctime":1605042045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14489943933","product_id":100061801,"comment_content":"一个 goroutine 可以把数据的“所有权”交给另外一个 goroutine（虽然 Go 中没有“所有权”的概念，但是从逻辑上说，你可以把它理解为是所有权的转移）<br>这是要推广 Rust啊","like_count":3},{"had_liked":false,"id":342611,"user_name":"Geek_43dc82","can_delete":false,"product_type":"c1","uid":2753124,"ip_address":"","ucode":"B79FA1C1E94E5A","user_header":"","comment_is_top":false,"comment_ctime":1650363659,"is_pvip":false,"replies":[{"id":"125223","content":"写的不错，简单直接","user_name":"作者回复","comment_id":342611,"uid":"1066613","ip_address":"","utype":1,"ctime":1650469801,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10240298251","product_id":100061801,"comment_content":"我实在是太蠢了，只能写出这样的代码了<br>package main<br><br>import &quot;fmt&quot;<br><br>func main() {<br>\tsignChan1 := make(chan struct{})<br>\tsignChan2 := make(chan struct{})<br>\tsignChan3 := make(chan struct{})<br>\tsignChan4 := make(chan struct{})<br>\tmainSignChan := make(chan struct{})<br><br>\tfor i := 1; i &lt;= 4; i++ {<br>\t\tgo func(i int) {<br>\t\t\tfor {<br>\t\t\t\tselect {<br>\t\t\t\tcase &lt;-signChan1:<br>\t\t\t\t\tfmt.Println(1)<br>\t\t\t\t\tsignChan2 &lt;- struct{}{}<br>\t\t\t\tcase &lt;-signChan2:<br>\t\t\t\t\tfmt.Println(2)<br>\t\t\t\t\tsignChan3 &lt;- struct{}{}<br>\t\t\t\tcase &lt;-signChan3:<br>\t\t\t\t\tfmt.Println(3)<br>\t\t\t\t\tsignChan4 &lt;- struct{}{}<br>\t\t\t\tcase &lt;-signChan4:<br>\t\t\t\t\tfmt.Println(4)<br>\t\t\t\t\tsignChan1 &lt;- struct{}{}<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}(i)<br>\t}<br>\tsignChan1 &lt;- struct{}{}<br>\t&lt;-mainSignChan<br>}<br>","like_count":2,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565508,"discussion_content":"写的不错，简单直接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650469801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290334,"user_name":"陌","can_delete":false,"product_type":"c1","uid":1152678,"ip_address":"","ucode":"13FF1D4B3181F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/96/a6/aac2a550.jpg","comment_is_top":false,"comment_ctime":1619507686,"is_pvip":true,"replies":[{"id":"105295","content":"会","user_name":"作者回复","comment_id":290334,"uid":"1066613","ip_address":"","utype":1,"ctime":1619623098,"user_name_real":"鸟窝"}],"discussion_count":1,"race_medal":0,"score":"10209442278","product_id":100061801,"comment_content":"Goroutine 泄漏的那个例子，如果把 unbuffered chan 改成容量为 1 的 buffered chan，那么假如函数超时了，子 goroutine 也能够往 channel 中发送数据。那么 GC 会把这个 channel 回收吗?","like_count":2,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519176,"discussion_content":"会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619623098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276399,"user_name":"蜗牛🐌","can_delete":false,"product_type":"c1","uid":2226557,"ip_address":"","ucode":"F83F22CEB67124","user_header":"https://static001.geekbang.org/account/avatar/00/21/f9/7d/aafe382c.jpg","comment_is_top":false,"comment_ctime":1611910429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10201845021","product_id":100061801,"comment_content":"channl1 := make(chan int, 0)<br>\tgo func() {<br>\t\tc := time.NewTicker(1 * time.Second)<br>\t\ti := 0<br>\t\tfor {<br>\t\t\tselect {<br>\t\t\tcase &lt;-c.C:<br>\t\t\t\ti++<br>\t\t\t\tchannl1 &lt;- i<br>\t\t\t\tif i == 4 {<br>\t\t\t\t\ti = 0<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}()<br>\tfor {<br>\t\tselect {<br>\t\tcase i := &lt;-channl1:<br>\t\t\tfmt.Println(i)<br>\t\t}<br>\t}","like_count":2},{"had_liked":false,"id":265428,"user_name":"ldeng 7","can_delete":false,"product_type":"c1","uid":1890726,"ip_address":"","ucode":"66B5AA215E57E9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d9/a6/c97ecf7d.jpg","comment_is_top":false,"comment_ctime":1606895346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10196829938","product_id":100061801,"comment_content":"对于 select 相关实现的源码个人认为还应该讲一下","like_count":2},{"had_liked":false,"id":331985,"user_name":"老猫","can_delete":false,"product_type":"c1","uid":1008270,"ip_address":"","ucode":"7F23297709749A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/8e/985cbc25.jpg","comment_is_top":false,"comment_ctime":1642942557,"is_pvip":false,"replies":[{"id":"121326","content":"😃","user_name":"作者回复","comment_id":331985,"uid":"1066613","ip_address":"","utype":1,"ctime":1643030203,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5937909853","product_id":100061801,"comment_content":"func chgoroutine(in,out,stop chan struct{},n int) {<br>\tfor{<br>\t\tselect{<br>\t\t\tcase  &lt;-in:<br>\t\t\t\tfmt.Println(n)<br>\t\t\t\ttime.Sleep(time.Second)<br>\t\t\t\tout &lt;-struct{}{}<br>\t\t\tcase &lt;-stop:<br>\t\t\t\treturn<br>\t\t}<br>\t}<br>}<br><br>func main() {<br>\tch1 := make(chan struct{}, 0)<br>\tch2 := make(chan struct{},0)<br>\tch3 := make(chan struct{},0)<br>\tch4 := make(chan struct{},0)<br>\tstop := make(chan struct{},0)<br><br>\tgo chgoroutine(ch1,ch2,stop,1)<br>\tgo chgoroutine(ch2,ch3,stop,2)<br>\tgo chgoroutine(ch3,ch4,stop,3)<br>\tgo chgoroutine(ch4,ch1,stop,4) <br><br>\tch1 &lt;-struct{}{}<br><br>\ttime.Sleep(time.Second * 20)<br><br>\tstop &lt;-struct{}{}<br>}","like_count":1,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548102,"discussion_content":"😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643030203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294416,"user_name":"50%","can_delete":false,"product_type":"c1","uid":1674992,"ip_address":"","ucode":"3E4247B5844B5B","user_header":"https://static001.geekbang.org/account/avatar/00/19/8e/f0/18720510.jpg","comment_is_top":false,"comment_ctime":1621935175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5916902471","product_id":100061801,"comment_content":"func main() {<br>\tconst n int = 4<br>\tconst maxNum int = 100<br>\tch := make([]chan struct{}, n)<br>\tfor i := range ch {<br>\t\tch[i] = make(chan struct{})<br>\t}<br>\twg := sync.WaitGroup{}<br>\twg.Add(n)<br>\ti := 0<br>\tgo func() {<br>\t\tch[0] &lt;- struct{}{}&#47;&#47;一个开始的信号<br>\t}()<br>\tfor j := 0; j &lt; n; j++ {<br>\t\tchanNum := (j + 1) % n<br>\t\tgo func() {<br>\t\t\tdefer wg.Done()<br>\t\t\tfor {<br>\t\t\t\t&lt;-ch[chanNum]<br>\t\t\t\tfmt.Printf(&quot;i am goroutine %d\\n&quot;, chanNum+1)<br>\t\t\t\tfmt.Println(i) &#47;&#47;顺带练习n个goroutine交替打印 0 ~ n<br>\t\t\t\tif i &gt;= math.MaxInt64-1 {<br>\t\t\t\t\treturn<br>\t\t\t\t}<br>\t\t\t\ti++<br>\t\t\t\ttime.Sleep(time.Second) &#47;&#47;控制打印速率<br>\t\t\t\tch[(chanNum+1)%n] &lt;- struct{}{}<br><br>\t\t\t}<br>\t\t}()<br>\t}<br>\twg.Wait()<br>}<br>","like_count":1},{"had_liked":false,"id":280090,"user_name":"butterfly","can_delete":false,"product_type":"c1","uid":1392924,"ip_address":"","ucode":"1B724973303FB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWcW6U8DO9xL55ictNPlbQ38VAcaBNgibqaAhcH7mn1W9ddxIJLlMiaA5sngBicMX02w2HP5pAWpBAJsag/132","comment_is_top":false,"comment_ctime":1614077020,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5909044316","product_id":100061801,"comment_content":"一直有一个疑问： channel底层也是通过一个mutex保护一个环形队列，这种方式和自己通过mutex方式实现的共享资源访问有什么不一样， 好处是什么，性能有多大差异？","like_count":1,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350973,"discussion_content":"最后你会发现，你实现了一个类似的channel","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614086504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381349,"discussion_content":"隐约记得 channel 的实现里有 goroutine 调度相关的逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625020450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269126,"user_name":"Atong","can_delete":false,"product_type":"c1","uid":1061005,"ip_address":"","ucode":"7E9D4B8D108E4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/8d/a2a4e97e.jpg","comment_is_top":false,"comment_ctime":1608533601,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5903500897","product_id":100061801,"comment_content":"<br>type NumChan struct {<br>\tjobs []*Job<br>}<br><br>func (n *NumChan) JobNum(m int) {<br>\tfor i := 1; i &lt;= m; i++ {<br>\t\tjob := &amp;Job{<br>\t\t\tID:   i,<br>\t\t\tJobc: make(chan int, 1),<br>\t\t}<br>\t\tgo job.run()<br>\t\tn.jobs = append(n.jobs, job)<br>\t}<br>\tn.run()<br>}<br>func (n *NumChan) run() {<br>\tfor {<br>\t\tn.seq()<br>\t}<br>}<br>func (n *NumChan) seq() {<br>\tfor _, j := range n.jobs {<br>\t\tj.Jobc &lt;- 1<br>\t\ttime.Sleep(time.Second * 1)<br>\t}<br>}<br><br>type Job struct {<br>\tID   int<br>\tJobc chan int<br>}<br><br>func (j *Job) run() {<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;-j.Jobc:<br>\t\t\tfmt.Printf(&quot;id %d\\n&quot;, j.ID)<br>\t\t}<br>\t}<br>}<br><br>func main() {<br>\tn := &amp;NumChan{}<br>\tn.JobNum(4)<br>}<br>","like_count":1},{"had_liked":false,"id":260969,"user_name":"虫子樱桃","can_delete":false,"product_type":"c1","uid":1226331,"ip_address":"","ucode":"F8244A9E9BC5A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/b6/5b/4486e4f9.jpg","comment_is_top":false,"comment_ctime":1605163592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900130888","product_id":100061801,"comment_content":"&#47;*<br> * Permission is hereby granted, free of charge, to any person obtaining a copy<br> * of this software and associated documentation files (the &quot;Software&quot;), to deal<br> * in the Software without restriction, including without limitation the rights<br> * to use, copy, modify, merge, publish, distribute, sublicense, and&#47;or sell<br> * copies of the Software, and to permit persons to whom the Software is<br> * furnished to do so, subject to the following conditions:<br> * The above copyright notice and this permission notice shall be included in<br> * all copies or substantial portions of the Software.<br> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THEq<br> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br> * THE SOFTWARE.<br> *&#47;<br><br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>type NumberChan struct {<br>\tCh            chan int<br>\tChannelNumber int<br>}<br><br>func (nch *NumberChan) SendNotify() {<br>\tgo func() {<br>\t\tnch.Ch &lt;- nch.ChannelNumber<br>\t}()<br>}<br><br>func (nch *NumberChan) PrintInfo() {<br>\tfmt.Println(nch.ChannelNumber)<br>\ttime.Sleep(time.Second)<br>}<br><br>func NewNumberChan(seq int) *NumberChan {<br>\tnch := NumberChan{<br>\t\tCh:            make(chan int),<br>\t\tChannelNumber: seq,<br>\t}<br>\treturn &amp;nch<br>}<br><br>func main() {<br>\tvar (<br>\t\tnch1 = NewNumberChan(1)<br>\t\tnch2 = NewNumberChan(2)<br>\t\tnch3 = NewNumberChan(3)<br>\t\tnch4 = NewNumberChan(4)<br>\t)<br>\tgo func() {<br>\t\tnch1.SendNotify()<br>\t}()<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;-nch1.Ch:<br>\t\t\tnch1.PrintInfo()<br>\t\t\tnch2.SendNotify()<br>\t\tcase &lt;-nch2.Ch:<br>\t\t\tnch2.PrintInfo()<br>\t\t\tnch3.SendNotify()<br>\t\tcase &lt;-nch3.Ch:<br>\t\t\tnch3.PrintInfo()<br>\t\t\tnch4.SendNotify()<br>\t\tcase &lt;-nch4.Ch:<br>\t\t\tnch4.PrintInfo()<br>\t\t\tnch1.SendNotify()<br>\t\t}<br>\t}<br><br>}<br>","like_count":1},{"had_liked":false,"id":260202,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1604940074,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5899907370","product_id":100061801,"comment_content":"思考题1.<br><br>const chanNum int = 4<br>func taskSchedule() {<br>\tchanArr := make([]chan int, chanNum)<br>\tfor i := 0; i &lt; chanNum; i++ {<br>\t\tch := make(chan int, 1)<br>\t\tchanArr[i] = ch<br>\t}<br><br>\tchanArr[0] &lt;- 1<br>\tfor i := 0; i &lt; chanNum; i++ {<br>\t\tnextChanIdx := ( i + 1 ) % chanNum<br>\t\tgo func(cur, next chan int, idx int) {<br>\t\t\tfor {<br>\t\t\t\t&lt;- cur<br>\t\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\t\tfmt.Printf(&quot;%d\\n&quot;, idx + 1)<br>\t\t\t\tnext &lt;- 1<br>\t\t\t}<br>\t\t}(chanArr[i], chanArr[nextChanIdx], i)<br>\t}<br>}","like_count":1},{"had_liked":false,"id":259962,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604897613,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"5899864909","product_id":100061801,"comment_content":"一般来说，单向通道有什么用呢？","like_count":1,"discussions":[{"author":{"id":1069042,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/f2/6ac3bdcf.jpg","nickname":"qingtama","note":"","ucode":"765040243ECE01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552475,"discussion_content":"如果只是写又不能读，这有什么用呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645491737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4b/69/c02eac91.jpg","nickname":"大漠胡萝卜","note":"","ucode":"FBE51E4A13EF4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326594,"discussion_content":"我觉得真还不如没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605622500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323779,"discussion_content":"限制使用者的使用方式，只能读或者只能写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604995192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360198,"user_name":"林钟一","can_delete":false,"product_type":"c1","uid":3200216,"ip_address":"浙江","ucode":"46755D5FC3099A","user_header":"https://static001.geekbang.org/account/avatar/00/30/d4/d8/ee096d57.jpg","comment_is_top":false,"comment_ctime":1666267414,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666267414","product_id":100061801,"comment_content":"package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>func main() {<br>\tnum := make(chan int, 4)<br>\tgo func() {<br>\t\tfor {<br>\t\t\tfor i := 1; i &lt;= 4; i++ {<br>\t\t\t\tnum &lt;- i<br>\t\t\t\ttime.Sleep(time.Second * 1)<br>\t\t\t}<br>\t\t}<br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\tfmt.Println(&lt;-num)<br>\t\t}<br>\t}()<br><br>\tselect {}<br>}<br>无限打印1、2、3、4","like_count":0},{"had_liked":false,"id":360027,"user_name":"清风","can_delete":false,"product_type":"c1","uid":3199008,"ip_address":"北京","ucode":"97CC1F43A7EA61","user_header":"https://static001.geekbang.org/account/avatar/00/30/d0/20/dc51f8e7.jpg","comment_is_top":false,"comment_ctime":1666144993,"is_pvip":false,"replies":[{"id":"131005","content":"OK","user_name":"作者回复","comment_id":360027,"uid":"1066613","ip_address":"北京","utype":1,"ctime":1666274554,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1666144993","product_id":100061801,"comment_content":"func main() {<br>\tchArr := []chan struct{}{<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t\tmake(chan struct{}),<br>\t}<br>\tfor k, _ := range chArr {<br>\t\tif k == len(chArr)-1 {<br>\t\t\tgo goon(chArr[k], chArr[0], k+1)<br>\t\t} else {<br>\t\t\tgo goon(chArr[k], chArr[k+1], k+1)<br>\t\t}<br>\t}<br><br>\tchArr[0] &lt;- struct{}{}<br>\tselect {}<br><br>}<br><br>func goon(ch chan struct{}, ch2 chan struct{}, index int) {<br>\ttime.Sleep(time.Duration(index*10) * time.Millisecond)<br>\tfor {<br>\t\t&lt;-ch<br>\t\tfmt.Printf(&quot;I am No %d Goroutine\\n&quot;, index)<br>\t\ttime.Sleep(time.Second)<br>\t\tch2 &lt;- struct{}{}<br>\t}<br>}<br>","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591094,"discussion_content":"OK","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666274554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359974,"user_name":"张觥","can_delete":false,"product_type":"c1","uid":1341821,"ip_address":"北京","ucode":"6784E44838EBCA","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/7d/b573c6d9.jpg","comment_is_top":false,"comment_ctime":1666093499,"is_pvip":false,"replies":[{"id":"131006","content":"你这样并不是每个goroutine打印自己的id","user_name":"作者回复","user_name_real":"编辑","uid":"1066613","ctime":1666274748,"ip_address":"北京","comment_id":359974,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666093499","product_id":100061801,"comment_content":"func TestChannel1Practice(t *testing.T) {<br>\tvar ch = make(chan struct{})<br>\twg := sync.WaitGroup{}<br>\twg.Add(4)<br><br>\tgo func() {<br>\t\tch &lt;- struct{}{}<br>\t}()<br><br>\tfor thread := 1; thread &lt;= 4; thread++ {<br>\t\tgo func(thead int) {<br>\t\t\t_, ok := &lt;-ch<br>\t\t\tif ok {<br>\t\t\t\tfor i := 1; i &lt;= 4; i++ {<br>\t\t\t\t\tt.Logf(&quot;%d: %d&quot;, thead, i)<br>\t\t\t\t\ttime.Sleep(1 * time.Second)<br>\t\t\t\t}<br>\t\t\t\twg.Done()<br>\t\t\t\tch &lt;- struct{}{}<br>\t\t\t}<br>\t\t}(thread)<br>\t}<br><br>\twg.Wait()<br>\tt.Log(&quot;finished&quot;)<br>}","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591095,"discussion_content":"你这样并不是每个goroutine打印自己的id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666274748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357605,"user_name":"草色青青","can_delete":false,"product_type":"c1","uid":1145809,"ip_address":"北京","ucode":"F346CF962ED330","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/d1/7eb3b4a4.jpg","comment_is_top":false,"comment_ctime":1663472454,"is_pvip":false,"replies":[{"id":"130220","content":"👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"1066613","ctime":1663598379,"ip_address":"北京","comment_id":357605,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1663472454","product_id":100061801,"comment_content":"func tt(ctx context.Context, c1, c2 *chan int) {<br>\tfor {<br>\t\tselect {<br>\t\tcase n := &lt;-*c1:<br>\t\t\tfmt.Println(n)<br>\t\t\tnn := n + 1<br>\t\t\tif n == 4 {<br>\t\t\t\tnn = 1<br>\t\t\t}<br>\t\t\t*c2 &lt;- nn<br>\t\t\t&#47;&#47;fmt.Printf(&quot;c1:%p,c2:%p\\n&quot;, c1, c2)<br>\t\tcase &lt;-ctx.Done():<br>\t\t\treturn<br><br>\t\t}<br>\t}<br>}<br>func PrintInfo() {<br>\tctx, cancel := context.WithCancel(context.Background())<br>\tc1, c2, c3, c4 := make(chan int, 2), make(chan int, 2), make(chan int, 2), make(chan int, 2)<br>\tfmt.Printf(&quot;c1:%p,c2:%p,c3:%p,c4:%p\\n&quot;, &amp;c1, &amp;c2, &amp;c3, &amp;c4)<br>\tgo tt(ctx, &amp;c1, &amp;c2)<br>\tgo tt(ctx, &amp;c2, &amp;c3)<br>\tgo tt(ctx, &amp;c3, &amp;c4)<br>\tgo tt(ctx, &amp;c4, &amp;c1)<br>\tc1 &lt;- 1<br><br>\tfmt.Println(&quot;Hello, 世界&quot;)<br>\ttime.Sleep(time.Millisecond * 70)<br>\tcancel()<br><br>\tfmt.Println(&quot;Hello, 世界&quot;)<br>}","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588223,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663598379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338441,"user_name":"Geek_lanehex","can_delete":false,"product_type":"c1","uid":1635941,"ip_address":"","ucode":"4BC1A851F252CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bm90iavKdLVLOzM2rOlYpNCJYylRPGLL4QgJicp5gc3cHNQS98eKfchTkJicLQjn8Ke1uvZPgZtwQslBicUAUsYIYQ/132","comment_is_top":false,"comment_ctime":1647504830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647504830","product_id":100061801,"comment_content":"1、package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>const n = 4<br><br>func main() {<br>\tvar chanArray = [n]chan int{}<br>\tfor i := 0; i &lt; n; i++ {<br>\t\tchanArray[i] = make(chan int)<br>\t}<br>\tfor i := 0; i &lt; n; i++ {<br>\t\tgo func(ix int) {<br>\t\t\tfor v := range chanArray[ix] {<br>\t\t\t\tfmt.Println(v + 1)<br>\t\t\t}<br>\t\t}(i)<br>\t}<br><br>\tgo func() {<br>\t\tfor i := 0; ; i++ {<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tchanArray[i%n] &lt;- i % n<br>\t\t}<br>\t}()<br><br>\tfor {<br>\t}<br>}<br>2、双向通道可以赋值给单向通道，反之则不行","like_count":0},{"had_liked":false,"id":337060,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1646577491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646577491","product_id":100061801,"comment_content":"```<br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;os&quot;<br>\t&quot;sync&quot;<br>\t&quot;time&quot;<br>)<br><br>func helper(signal chan int, i int) {<br>\tfor {<br>\t\tsignal &lt;- i<br>\t}<br>}<br>func main() {<br>\tN := 4<br>\tsignals := make([]chan int, N)<br>\tfor i := range signals {<br>\t\tsignals[i] = make(chan int)<br>\t}<br>\tsw := sync.WaitGroup{}<br><br>\tfor i := 0; i &lt; N; i++ {<br>\t\tsw.Add(1)<br>\t\tgo func(i int) {<br>\t\t\tdefer sw.Done()<br>\t\t\thelper(signals[i], i)<br>\t\t}(i)<br><br>\t}<br>\tfor {<br>\t\tfor i := 0; i &lt; N; i++ {<br>\t\t\tfmt.Println(&lt;-signals[i] + 1)<br>\t\t\ttime.Sleep(1 * time.Second)<br>\t\t}<br>\t}<br>\tdefer sw.Wait()<br>\tos.Exit(0)<br>}<br><br>```","like_count":0},{"had_liked":false,"id":333685,"user_name":"xl666","can_delete":false,"product_type":"c1","uid":2046604,"ip_address":"","ucode":"CF9A8086F91053","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3a/8c/fc2c3e5c.jpg","comment_is_top":false,"comment_ctime":1644474254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644474254","product_id":100061801,"comment_content":"package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;sync&quot;<br>\t&quot;time&quot;<br>)<br><br>func chanHadle(first bool, num int, send chan bool, recv chan bool) {<br>\tif first {<br>\t\ttime.Sleep(time.Second)<br>\t\tfmt.Printf(&quot;输出%d \\n&quot;,num)<br>\t\tsend &lt;- true<br>\t}<br>\tfor {<br>\t\t&lt;-recv<br>\t\ttime.Sleep(time.Second)<br>\t\tfmt.Printf(&quot;输出%d \\n&quot;,num)<br>\t\tsend &lt;- true<br>\t}<br><br>}<br><br>func main() {<br>\tvar chan1 chan bool = make(chan bool)<br>\tvar chan2 chan bool = make(chan bool)<br>\tvar chan3 chan bool = make(chan bool)<br>\tvar chan4 chan bool = make(chan bool)<br>\tvar wg sync.WaitGroup<br><br>\twg.Add(4)<br><br>\tgo chanHadle(true,1,chan1,chan4)<br>\tgo chanHadle(false,2,chan2,chan1)<br>\tgo chanHadle(false,3,chan3,chan2)<br>\tgo chanHadle(false,4,chan4,chan3)<br><br>\twg.Wait()<br>}<br>","like_count":0},{"had_liked":false,"id":330866,"user_name":"成长比成功更重要","can_delete":false,"product_type":"c1","uid":2049063,"ip_address":"","ucode":"090BE5A97E7A8A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/44/27/71bed926.jpg","comment_is_top":false,"comment_ctime":1642234709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642234709","product_id":100061801,"comment_content":"第一题解题方法很多，以下其中参考答案<br>var ch1 = make(chan bool,1)<br>var ch2 = make(chan bool)<br>func fun1() {<br>\tch1 &lt;- true<br>\tfor i:=1;i&lt;=10;i += 2{<br>\t\t&lt;- ch1<br>\t\tfmt.Print(i)<br>\t\tfmt.Print(i+1,&quot; &quot;)<br>\t\tch2 &lt;- true<br>\t}<br>}<br>func fun2() {<br>\tfor i:=&#39;A&#39;;i&lt;=&#39;J&#39;;i+=2{<br>\t\t&lt;- ch2<br>\t\tfmt.Print(string(i))<br>\t\tfmt.Print(string(i+1),&quot; &quot;)<br>\t\tch1 &lt;- true<br>\t}<br>}<br><br>func main() {<br>\tgo fun1()<br>\tgo fun2()<br>\ttime.Sleep(time.Second)<br>}","like_count":0},{"had_liked":false,"id":327415,"user_name":"Penn","can_delete":false,"product_type":"c1","uid":1107879,"ip_address":"","ucode":"2D73D9C2AED26F","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/a7/9825371e.jpg","comment_is_top":false,"comment_ctime":1640111145,"is_pvip":false,"replies":[{"id":"119218","content":"可以。代码有重复，还可以优化下","user_name":"作者回复","user_name_real":"编辑","uid":"1066613","ctime":1640185194,"ip_address":"","comment_id":327415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640111145","product_id":100061801,"comment_content":"&#47;&#47; 4个goroutine<br>\tch1 := make(chan struct{})<br>\tch2 := make(chan struct{})<br>\tch3 := make(chan struct{})<br>\tch4 := make(chan struct{})<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch1<br>\t\t\tfmt.Println(&quot;1&quot;)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tch2 &lt;- struct{}{}<br>\t\t\t&#47;&#47; &lt;-ch1<br>\t\t}<br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch2<br>\t\t\tfmt.Println(&quot;2&quot;)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tch3 &lt;- struct{}{}<br>\t\t}<br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch3<br>\t\t\tfmt.Println(&quot;3&quot;)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tch4 &lt;- struct{}{}<br>\t\t}<br>\t}()<br><br>\tgo func() {<br>\t\tfor {<br>\t\t\t&lt;-ch4<br>\t\t\tfmt.Println(&quot;4&quot;)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tch1 &lt;- struct{}{}<br>\t\t}<br>\t}()<br><br>\tch1 &lt;- struct{}{}<br>\tselect {}","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540860,"discussion_content":"可以。代码有重复，还可以优化下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640185194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322213,"user_name":"jostan","can_delete":false,"product_type":"c1","uid":1045720,"ip_address":"","ucode":"0A46739F079DFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/d8/f01a9c2b.jpg","comment_is_top":false,"comment_ctime":1637239012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637239012","product_id":100061801,"comment_content":"1. 用四个 chan, 每个 gorountine 完成之后通知下一个<br>```golang<br>func main() {<br>    chans := [4]chan struct{}{}<br>    for i := range chans {<br>        chans[i] = make(chan struct{})<br>    }<br>    task := func(id int) {<br>        c := chans[id-1]<br>        nextC := chans[id%len(chans)]<br>        for {<br>            &lt;-c<br>            fmt.Println(id)<br>            time.Sleep(time.Second)<br>            nextC &lt;- struct{}{}<br>        }<br>    }<br><br>    for i := 1; i &lt;= 4; i++ {<br>        go task(i)<br>    }<br>    chans[0] &lt;- struct{}{}<br>    time.Sleep(100 * time.Second)<br>}<br>```<br>2. 双向通道可以赋值给单向（相当于关闭一个方向），反之不可以","like_count":0},{"had_liked":false,"id":320667,"user_name":"Geek_53efb8","can_delete":false,"product_type":"c1","uid":2598872,"ip_address":"","ucode":"ADC8CFD7C8D16E","user_header":"","comment_is_top":false,"comment_ctime":1636445499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636445499","product_id":100061801,"comment_content":"思考题1 写完后发现看评论好像跟第一个同学写的差不多。。。<br>func main () {<br>\tch1 := make(chan int)<br>\tch2 := make(chan int)<br>\tch3 := make(chan int)<br>\tch4 := make(chan int)<br><br>\tgo func() {<br>\t\tfor  {<br>\t\t\t&lt;-ch1<br>\t\t\tfmt.Println(1)<br>\t\t\tch2 &lt;-1<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor  {<br>\t\t\t&lt;-ch2<br>\t\t\tfmt.Println(2)<br>\t\t\tch3 &lt;-1<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor  {<br>\t\t\t&lt;-ch3<br>\t\t\tfmt.Println(3)<br>\t\t\tch4 &lt;- 1<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor  {<br>\t\t\t&lt;-ch4<br>\t\t\tfmt.Println(4)<br>\t\t}<br>\t}()<br><br>\tfor  {<br>\t\ttime.Sleep(1 * time.Second)<br>\t\tch1 &lt;- 1<br>\t}<br><br>}<br>","like_count":0},{"had_liked":false,"id":318464,"user_name":"秦黎","can_delete":false,"product_type":"c1","uid":2234369,"ip_address":"","ucode":"EC20F60CEBF6A5","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/01/d7b23bf8.jpg","comment_is_top":false,"comment_ctime":1635303365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635303365","product_id":100061801,"comment_content":"package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>type Worker struct{}<br><br>&#47;&#47; 把channel1的例子重新用另外一种方式来写，需求：打印1，2，3，4 周而复始<br><br>func startWorker(workerId int, startWorkChan, nextWorkChan chan Worker) {<br>\tfor {<br>\t\t&#47;&#47; 工人接到了工作<br>\t\tneedDoWork := &lt;-startWorkChan<br>\t\tfmt.Println(&quot;打印---&gt;&quot;, workerId+1)<br>\t\ttime.Sleep(time.Second)<br>\t\t&#47;&#47; 当前工人累了，把工作交给下一个工人<br>\t\tnextWorkChan &lt;- needDoWork<br>\t}<br>}<br><br>func main() {<br>\tchs := []chan Worker{make(chan Worker), make(chan Worker), make(chan Worker), make(chan Worker)}<br>\t&#47;&#47; 创建四个工人<br>\tvar myWorkerNum = 4<br><br>\t&#47;&#47; 给四个工人分配工作<br>\tfor i := 0; i &lt; myWorkerNum; i++ {<br>\t\tgo startWorker(i, chs[i], chs[(i+1)%myWorkerNum])<br>\t}<br><br>\t&#47;&#47; 首先给第一个工人工作去做事<br>\tchs[0] &lt;- struct{}{}<br>\tselect {}<br>}<br>","like_count":0},{"had_liked":false,"id":314256,"user_name":"i-neojos","can_delete":false,"product_type":"c1","uid":1702997,"ip_address":"","ucode":"1808C25269948A","user_header":"https://static001.geekbang.org/account/avatar/00/19/fc/55/e03bb6db.jpg","comment_is_top":false,"comment_ctime":1632916190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632916190","product_id":100061801,"comment_content":"package main<br><br>import (<br>    &quot;fmt&quot;<br>    &quot;time&quot;<br>)<br><br>func main() {<br>    ch1 := make(chan struct{})<br>    ch2 := make(chan struct{})<br>    ch3 := make(chan struct{})<br>    ch4 := make(chan struct{})<br><br>    go func() {<br>        for {<br>            &lt;-ch1<br>            time.Sleep(time.Second)<br>            fmt.Println(&quot;No.1&quot;)<br>            ch2 &lt;- struct{}{}<br>        }<br>    }()<br><br>    go func() {<br>        for {<br>            &lt;-ch2<br>            time.Sleep(time.Second)<br>            fmt.Println(&quot;No.2&quot;)<br>            ch3 &lt;- struct{}{}<br>        }<br>    }()<br><br>    go func() {<br>        for {<br>            &lt;-ch3<br>            time.Sleep(time.Second)<br>            fmt.Println(&quot;No.3&quot;)<br>            ch4 &lt;- struct{}{}<br>        }<br>    }()<br><br>    go func() {<br>        for {<br>            &lt;-ch4<br>            time.Sleep(time.Second)<br>            fmt.Println(&quot;No.4&quot;)<br>            ch1 &lt;- struct{}{}<br>        }<br>    }()<br><br>    ch1 &lt;- struct{}{}<br>    select {}<br>}<br>","like_count":0},{"had_liked":false,"id":313218,"user_name":"Geek9772","can_delete":false,"product_type":"c1","uid":2689623,"ip_address":"","ucode":"A5E059C92D9950","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2Iw3M4Myq6G3TO1BQExJP9JKtazBEfptXhG1WcMsnZSWRyiaXCeq0NibsWmmerJVRSpybhfezib8pBGlowlR2wg2A/132","comment_is_top":false,"comment_ctime":1632313106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632313106","product_id":100061801,"comment_content":"用条件变量吧","like_count":0},{"had_liked":false,"id":307634,"user_name":"ChuanBing จุ๊บ","can_delete":false,"product_type":"c1","uid":1628736,"ip_address":"","ucode":"4482E852FC147A","user_header":"https://static001.geekbang.org/account/avatar/00/18/da/40/bda5ad2b.jpg","comment_is_top":false,"comment_ctime":1629185815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629185815","product_id":100061801,"comment_content":"func main() {<br>\tch := make(chan interface{}, 0)<br>\tch0 := ch<br>\tmax := 20<br>\tfor i := 0; i &lt; max; i++ {<br>\t\ti := i<br>\t\tif i == max-1 {<br>\t\t\tgo fn(i, ch, ch0)<br>\t\t\tcontinue<br>\t\t}<br>\t\tchNext := make(chan interface{}, 0)<br>\t\tgo fn(i, ch, chNext)<br>\t\tch = chNext<br>\t}<br>\tch0 &lt;- 0<br>\ttime.Sleep(time.Minute)<br>}<br><br>func fn(i int, ch &lt;-chan interface{}, chNext chan&lt;- interface{}) {<br>\tfor {<br>\t\tif i == 0 {<br>\t\t\ttime.Sleep(time.Second)<br>\t\t}<br>\t\t&lt;-ch<br>\t\tfmt.Printf(&quot;ch:%p, chNext:%p, i:%v \\n&quot;, ch, chNext, i)<br>\t\tchNext &lt;- 0<br>\t}<br>}","like_count":0},{"had_liked":false,"id":291207,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1620117264,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620117264","product_id":100061801,"comment_content":"func main() {<br><br>\twg := sync.WaitGroup{}<br><br>\tchans := []chan int{make(chan int, 1), make(chan int, 1), make(chan int, 1), make(chan int, 1)}<br><br>\tn := len(chans)<br><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second*10)<br>\tdefer cancel()<br><br>\tproc := func(i int) {<br>\t\tj := i + 1<br>\t\tdefer wg.Done()<br>\t\tfor {<br>\t\t\tselect {<br>\t\t\tcase &lt;-chans[i%n]:<br>\t\t\t\tfmt.Printf(&quot;%d -&gt; &quot;, j)<br>\t\t\t\ttime.After(time.Second)<br><br>\t\t\t\tif ctx.Err() != nil {<br>\t\t\t\t\treturn<br>\t\t\t\t}<br><br>\t\t\t\tchans[j%n] &lt;- j % n<br>\t\t\tcase &lt;-ctx.Done():<br>\t\t\t\treturn<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\tfor i := 0; i &lt; n; i++ {<br>\t\twg.Add(1)<br>\t\tgo proc(i)<br>\t}<br><br>\tchans[0] &lt;- 0<br><br>\twg.Wait()<br>}","like_count":0},{"had_liked":false,"id":287456,"user_name":"飞鱼ོ","can_delete":false,"product_type":"c1","uid":1293492,"ip_address":"","ucode":"E64EFABF74A2FC","user_header":"https://static001.geekbang.org/account/avatar/00/13/bc/b4/2ce124d1.jpg","comment_is_top":false,"comment_ctime":1617957519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617957519","product_id":100061801,"comment_content":"func main() {<br>\tvar chs[4]chan bool<br>\tfor i := 0; i &lt; 4; i++ {<br>\t\tchs[i] = make(chan bool)<br>\t\tgo printID(i,chs[i])<br>\t}<br>\t<br>\tc := 0<br>\tfor {<br>\t\tid := c%4<br>\t\tchs[id]&lt;-true<br>\t\ttime.Sleep(time.Second)<br>\t\tc++<br>\t}<br>}<br><br>func printID(id int,ch chan bool) {<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;-ch:<br>\t\t\tfmt.Println(id)<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":286863,"user_name":"取一个长长长长的名字","can_delete":false,"product_type":"c1","uid":1387521,"ip_address":"","ucode":"8C39641B6EBCA1","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/01/636452b4.jpg","comment_is_top":false,"comment_ctime":1617638150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617638150","product_id":100061801,"comment_content":"很奇怪为什么chan中的closed字段没有用uint8来表示，感觉uint32没有啥必要的","like_count":0},{"had_liked":false,"id":284213,"user_name":"schwarzeni","can_delete":false,"product_type":"c1","uid":1112540,"ip_address":"","ucode":"C1969191F334BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/dc/0a1eeb4c.jpg","comment_is_top":false,"comment_ctime":1616123852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616123852","product_id":100061801,"comment_content":"package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>func main() {<br>\tsize := 4<br>\tsignChans := make([]chan struct{}, size)<br>\tfor i := range signChans {<br>\t\tsignChans[i] = make(chan struct{})<br>\t}<br><br>\tfor i := 1; i &lt;= size; i++ {<br>\t\tgo func(id int, sign chan struct{}) {<br>\t\t\tfor {<br>\t\t\t\t&lt;-sign<br>\t\t\t\tfmt.Println(id)<br>\t\t\t}<br>\t\t}(i, signChans[i-1])<br>\t}<br><br>\t&#47;&#47; controller<br>\tgo func() {<br>\t\tticker := time.NewTicker(time.Second)<br>\t\tid := 1<br>\t\tfor {<br>\t\t\t&lt;-ticker.C<br>\t\t\tsignChans[id-1] &lt;- struct{}{}<br>\t\t\tid++<br>\t\t\tif id &gt; size {<br>\t\t\t\tid = 1<br>\t\t\t}<br>\t\t}<br>\t}()<br><br>\tselect {}<br>}<br>","like_count":0},{"had_liked":false,"id":281527,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1614774814,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614774814","product_id":100061801,"comment_content":"1. 题目1，用四个channel的思路解决<br>2. 题目2，通过编译器验证<br>--------<br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>func main()  {<br>\t&#47;&#47; chan T可以给 &lt;-chan T 和 chan&lt;- T赋值<br>\tch := make(chan int)<br>\tvar a chan&lt;- int = ch<br>\tvar b &lt;-chan int = ch<br>\tfmt.Printf(&quot;%v, %v\\n&quot;, a, b)<br><br>\t&#47;&#47; &lt;-chan T 和 chan&lt;- T不可以给 chan T赋值<br>\t&#47;&#47; 下述语句会报错<br>\t&#47;&#47; var chNew chan int<br>\t&#47;&#47; chNew = a<br>\t&#47;&#47; chNew = b<br><br>\t&#47;&#47; goroutine 1<br>\tvar channels [4]chan int<br>\tfor i := 1; i &lt;= 4; i++ {<br>\t\tchannels[i-1] = make(chan int)<br>\t\tgo func(i int, ch chan int) {<br>\t\t\tfor {<br>\t\t\t\t&lt;- ch<br>\t\t\t\tfmt.Println(i)<br>\t\t\t}<br>\t\t}(i, channels[i-1])<br>\t}<br><br>\tvar tick int<br>\tfor {<br>\t\ttime.Sleep(time.Second)<br>\t\tchannels[tick % 4] &lt;- 1<br>\t\ttick ++<br>\t\tif tick == 40 {  &#47;&#47; 防止tick过大<br>\t\t\ttick = 0<br>\t\t}<br>\t}<br>}<br>","like_count":0},{"had_liked":false,"id":281419,"user_name":"BadNine","can_delete":false,"product_type":"c1","uid":1137621,"ip_address":"","ucode":"69965D3E117D8E","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/d5/5c2aa991.jpg","comment_is_top":false,"comment_ctime":1614743231,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614743231","product_id":100061801,"comment_content":"func Test_orderPrint(t *testing.T) {<br>\tc := make(chan int)<br>\tgo func() {<br>\t\tc &lt;- 1<br>\t}()<br>\t<br>\tgo orderPrint(c, 1)<br>\tgo orderPrint(c, 2)<br>\tgo orderPrint(c, 3)<br>\tgo orderPrint(c, 4)<br><br>\tselect {}<br>}<br><br>func orderPrint(c chan int, i int) {<br>\tfor {<br>\t\ttime.Sleep(time.Second)<br>\t\tcur := &lt;-c<br>\t\tif cur == i {<br>\t\t\tfmt.Println(i)<br>\t\t\tif i%4 == 0 {<br>\t\t\t\tc &lt;- 1<br>\t\t\t} else {<br>\t\t\t\tc &lt;- i + 1<br>\t\t\t}<br>\t\t} else {<br>\t\t\tc &lt;- cur<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":275318,"user_name":"( ･᷄ὢ･᷅ )","can_delete":false,"product_type":"c1","uid":2234129,"ip_address":"","ucode":"E5F5EDEBB74C46","user_header":"https://static001.geekbang.org/account/avatar/00/22/17/11/a63acc6a.jpg","comment_is_top":false,"comment_ctime":1611469601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611469601","product_id":100061801,"comment_content":"1.func Print(recv chan int) {<br>\tfor {<br>\t\tindex, ok := &lt;-recv<br>\t\tif !ok {<br>\t\t\treturn<br>\t\t}<br>\t\tfmt.Println(index)<br>\t\tindex++<br>\t\tif index == 5 {<br>\t\t\tindex = 1<br>\t\t}<br><br>\t\ttime.Sleep(1 * time.Second)<br>\t\trecv &lt;- index<br>\t}<br>}<br><br>func main() {<br>\tc := make(chan int)<br>\tgo Print(c)<br>\tgo Print(c)<br>\tgo Print(c)<br>\tgo Print(c)<br>\tc &lt;- 1<br>\ttime.Sleep(20 * time.Second)<br>\tclose(c)<br>}<br>2.不可以","like_count":0},{"had_liked":false,"id":269177,"user_name":"练习时长两年半","can_delete":false,"product_type":"c1","uid":2272150,"ip_address":"","ucode":"CDA8E435A8C243","user_header":"https://static001.geekbang.org/account/avatar/00/22/ab/96/227aff6b.jpg","comment_is_top":false,"comment_ctime":1608548202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608548202","product_id":100061801,"comment_content":"send 第6部分没有代码吗？<br>还有 buf 是循环队列空闲空间的指针吗？第6部分判断 buf 满和第2部分判断队列满什么区别啊？","like_count":0},{"had_liked":false,"id":264466,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1606471734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606471734","product_id":100061801,"comment_content":"延伸阅读：https:&#47;&#47;github.com&#47;developer-learning&#47;reading-go&#47;issues&#47;450#issuecomment-524663059<br>这里对channel的分析更详细些","like_count":0},{"had_liked":false,"id":263701,"user_name":"孟凡浩","can_delete":false,"product_type":"c1","uid":1134774,"ip_address":"","ucode":"77522A196C31D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/b6/a60efa42.jpg","comment_is_top":false,"comment_ctime":1606222974,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606222974","product_id":100061801,"comment_content":"第一题：<br>func TestFourGo(t *testing.T) {<br>\tcount := 6<br>\tch := make([]chan bool, 0)<br>\tfor i := 0; i &lt; count; i++ {<br>\t\tch = append(ch, make(chan bool))<br>\t}<br><br>\tgor := func(ch1 chan bool, ch2 chan bool, num int8) {<br>\t\tfor {<br>\t\t\t&lt;-ch1<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\tfmt.Println(num)<br>\t\t\tch2 &lt;- true<br>\t\t}<br>\t}<br>\tfor i := 0; i &lt; count; i++ {<br>\t\tn := i + 1<br>\t\tif i == count-1 {<br>\t\t\tn = 0<br>\t\t}<br>\t\tgo gor(ch[i], ch[n], int8(i+1))<br>\t}<br>\tch[0] &lt;- true<br><br>\ttime.Sleep(time.Hour)<br>}<br>","like_count":0},{"had_liked":false,"id":263446,"user_name":"JYZ1024","can_delete":false,"product_type":"c1","uid":1678716,"ip_address":"","ucode":"3F56C3A6327A08","user_header":"https://static001.geekbang.org/account/avatar/00/19/9d/7c/b3bfc1bf.jpg","comment_is_top":false,"comment_ctime":1606135848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606135848","product_id":100061801,"comment_content":"&#47;******* 四个协程，循环输出1，2，3，4 ***********&#47;<br>&#47;*有四个 goroutine，编号为 1、2、3、4。每秒钟会有一个 goroutine 打印出它自己的编号，<br>要求你编写一个程序，让输出的编号总是按照 1、2、3、4、1、2、3、4、……的顺序打印出来。<br>*&#47;<br>type Tasker struct {<br>\tId int<br>\tSignalCh chan struct{}<br>\tBroadcastChan chan struct{}<br>}<br><br>func NewTask(id int, ch chan struct{},bch chan struct{}) *Tasker {<br>\treturn &amp;Tasker{<br>\t\tId: id,<br>\t\tSignalCh: ch,<br>\t\tBroadcastChan: bch,<br>\t}<br>}<br><br>func (t *Tasker) say() {<br>\tfor {<br>\t\t&lt;-t.SignalCh<br>\t\tfmt.Println(t.Id)<br>\t\ttime.Sleep(time.Second*1)<br>\t\tt.BroadcastChan &lt;- struct{}{}<br>\t}<br>}<br><br>func ChannelArrange(rNum int) {<br>\tchanArray := make([]chan struct{},0,rNum)<br>\tfor i:=0;i&lt;rNum;i++ {<br>\t\tchanArray = append(chanArray,make(chan struct{}))<br>\t}<br>\tworker := make([]*Tasker,0,rNum)<br>\tfor i:=0;i&lt;rNum;i++ {<br>\t\tworker = append(worker,NewTask(i+1,chanArray[(i-1+rNum)%rNum],chanArray[(i + rNum)%rNum]))<br>\t}<br><br>\tfor i:=0;i&lt;rNum;i++ {<br>\t\tcurIndex := i<br>\t\tgo func() {<br>\t\t\tworker[curIndex].say()<br>\t\t}()<br>\t}<br>\tchanArray[rNum-1] &lt;- struct{}{}<br><br>\tselect {<br><br>\t}<br>}<br>","like_count":0},{"had_liked":false,"id":262612,"user_name":"石头娃","can_delete":false,"product_type":"c1","uid":1004982,"ip_address":"","ucode":"F8FDE640574C79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/b6/15cf60cb.jpg","comment_is_top":false,"comment_ctime":1605779981,"is_pvip":false,"replies":[{"id":"95289","content":"逻辑没问题，符合答案。如果代码可以抽象更好，减少重复代码","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605787407,"ip_address":"","comment_id":262612,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605779981","product_id":100061801,"comment_content":"思考题：<br><br>func main() {<br>\tvar a = make(chan int, 1)<br>\tvar b = make(chan int, 1)<br>\tvar c = make(chan int, 1)<br>\tvar d = make(chan int, 1)<br>\tvar e = make(chan string)<br>\tgo func() {<br>\t\tfor {<br>\t\t\tflag := &lt;-d<br>\t\t\tlog.Println(1)<br>\t\t\ta &lt;- flag<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor {<br>\t\t\tflag := &lt;-a<br>\t\t\tlog.Println(2)<br>\t\t\tb &lt;- flag<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor {<br>\t\t\tflag := &lt;-b<br>\t\t\tlog.Println(3)<br>\t\t\tc &lt;- flag<br>\t\t}<br>\t}()<br>\tgo func() {<br>\t\tfor {<br>\t\t\tflag := &lt;-c<br>\t\t\tlog.Println(4)<br>\t\t\ttime.Sleep(time.Second)<br>\t\t\td &lt;- flag<br>\t\t}<br>\t}()<br>\td &lt;- 1<br>\t&lt;-e<br>}","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509897,"discussion_content":"逻辑没问题，符合答案。如果代码可以抽象更好，减少重复代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605787407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113744,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/90/19ef108d.jpg","nickname":"techwro","note":"","ucode":"7AF2B319F0AE1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364874,"discussion_content":"答案不合题意吧。题目中说，每秒钟会有一个 goroutine 打印出它自己的编号，但是运行这段代码是每隔一秒钟会有四个 goroutine 打印出它自己的编号，应该在每个 goroutine 中都加上 time.Sleep。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617633468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261567,"user_name":"峪五","can_delete":false,"product_type":"c1","uid":1529249,"ip_address":"","ucode":"DCF2DC959D0CD7","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/a1/e77b9612.jpg","comment_is_top":false,"comment_ctime":1605423915,"is_pvip":false,"replies":[{"id":"94916","content":"因为队列中的这些reader&#47;sender都被阻塞住了，close chan唤醒它们，让它们继续工作，否则就永远阻塞了","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605438068,"ip_address":"","comment_id":261567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605423915","product_id":100061801,"comment_content":"[close通过 close 函数，<br>可以把 chan 关闭，编译器会替换成 closechan 方法的调用。下面的代码是 close chan 的主要逻辑。如果 chan 为 nil，close 会 panic；如果 chan 已经 closed，再次 close 也会 panic。<br>否则的话，如果 chan 不为 nil，chan 也没有 closed，就把等待队列中的 sender（writer）和 receiver（reader）从队列中全部移除并唤醒。]<br>疑问：老师你好，全部移除能明白，为什么要唤醒的？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509522,"discussion_content":"因为队列中的这些reader/sender都被阻塞住了，close chan唤醒它们，让它们继续工作，否则就永远阻塞了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605438068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261410,"user_name":"朱伟","can_delete":false,"product_type":"c1","uid":1515720,"ip_address":"","ucode":"A35BB027DC1D97","user_header":"https://static001.geekbang.org/account/avatar/00/17/20/c8/427476db.jpg","comment_is_top":false,"comment_ctime":1605324912,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605324912","product_id":100061801,"comment_content":"我的场景是一个生产者消费者模型，生产者和消费者是并发执行，生产者把数据生产完之后会关闭channel，消费者改如何退出<br>for {<br>\t\tqv, ok := &lt;-qvCh<br>\t\tif !ok {<br>\t\t\t&#47;&#47;消费者退出<br><br>\t\t}<br>\t\tif qv == nil || len(qv) == 0 {<br>\t\t\tcontinue<br>\t\t} else {<br>\t\t\t&#47;&#47;消费者业务逻辑<br>\t\t}<br>\t}<br>我发现有时候生产者还没生产数据消费者就退出结束了，这个写法有问题吗","like_count":0,"discussions":[{"author":{"id":1105098,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dc/ca/de844ac9.jpg","nickname":"Anker_张","note":"","ucode":"21BCF54C371BB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326209,"discussion_content":"写法没问题，应该不存在你的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605542506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261408,"user_name":"Panmax","can_delete":false,"product_type":"c1","uid":1004871,"ip_address":"","ucode":"9D65E3B84C5519","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/47/d217c45f.jpg","comment_is_top":false,"comment_ctime":1605323993,"is_pvip":false,"replies":[{"id":"95015","content":"是的，描述错误，已通知编辑修改，谢谢","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605536490,"ip_address":"","comment_id":261408,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605323993","product_id":100061801,"comment_content":"recv 的第四部分的描述是不是不太对，这里并没有检查 buf，而是直接检查 sender队列，优先把sender队列中的数据给出去。<br><br>原文中写的是「第四部分是处理 sendq 队列中有等待者的情况。这个时候，如果 buf 中有数据，优先从 buf 中读取数据，否则直接从等待队列中弹出一个 sender，把它的数据复制给这个 receiver。」","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509477,"discussion_content":"是的，描述错误，已通知编辑修改，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605536490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260964,"user_name":"暴怒侠（有牙齿的IT妞）","can_delete":false,"product_type":"c1","uid":1129991,"ip_address":"","ucode":"C75253B6F41D9D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/07/2208868d.jpg","comment_is_top":false,"comment_ctime":1605162639,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605162639","product_id":100061801,"comment_content":"func process(timeout time.Duration) bool { ch := make(chan bool) go func() { &#47;&#47; 模拟处理耗时的业务 time.Sleep((timeout + time.Second)) ch &lt;- true &#47;&#47; block fmt.Println(&quot;exit goroutine&quot;) }() select { case result := &lt;-ch: return result case &lt;-time.After(timeout): return false }}<br><br>这段代码，即使设容量为1，也还是没有解决问题？ 请老师帮分析一下","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324828,"discussion_content":"你得说明你的这段代码要干什么 有什么问题？否则也没办法回答你啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605177758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260917,"user_name":"🍀柠檬鱼也是鱼","can_delete":false,"product_type":"c1","uid":2178501,"ip_address":"","ucode":"DCF033636465F3","user_header":"https://static001.geekbang.org/account/avatar/00/21/3d/c5/f43fa619.jpg","comment_is_top":false,"comment_ctime":1605151825,"is_pvip":false,"replies":[{"id":"94808","content":"csp目的不是实现mytex,而是csp模式，只不过lock是它的一个副产品而已","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605257710,"ip_address":"","comment_id":260917,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605151825","product_id":100061801,"comment_content":"channel底层也使用到了lock，在处理并发写的场景中，这和直接使用mutex.Lock有什么区别呢","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509325,"discussion_content":"csp目的不是实现mytex,而是csp模式，只不过lock是它的一个副产品而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605257710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260630,"user_name":"田佳伟","can_delete":false,"product_type":"c1","uid":1034087,"ip_address":"","ucode":"D31C9799F383D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/67/0077314b.jpg","comment_is_top":false,"comment_ctime":1605074295,"is_pvip":false,"replies":[{"id":"94679","content":".你这只打印了一次，题目要求一直打印下去","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1605099254,"ip_address":"","comment_id":260630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605074295","product_id":100061801,"comment_content":"func main() {<br>\tch := make(chan int, 4)<br>\twg := sync.WaitGroup{}<br>\tfor i := 1; i &lt;= 4; i++ {<br>\t\twg.Add(1)<br>\t\tch&lt;-i<br>\t}<br>\tfor i := 1; i &lt;= 4; i++ {<br>\t\tgo func(wg *sync.WaitGroup) {<br>\t\t\ta := &lt;-ch<br>\t\t\ttime.Sleep(time.Second*time.Duration(a))<br>\t\t\tfmt.Println(a)<br>\t\t\twg.Done()<br>\t\t}(&amp;wg)<br>\t}<br>\twg.Wait()<br>\tclose(ch)<br>\tfmt.Println(&quot;finish&quot;)<br>}","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509250,"discussion_content":".你这只打印了一次，题目要求一直打印下去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605099254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260423,"user_name":"方块睡衣","can_delete":false,"product_type":"c1","uid":1074569,"ip_address":"","ucode":"1D355D7FEE5F8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/89/e2ceca70.jpg","comment_is_top":false,"comment_ctime":1605001914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605001914","product_id":100061801,"comment_content":"2.双向通道可以赋值给单向,反过来不可以.","like_count":0},{"had_liked":false,"id":260422,"user_name":"方块睡衣","can_delete":false,"product_type":"c1","uid":1074569,"ip_address":"","ucode":"1D355D7FEE5F8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/89/e2ceca70.jpg","comment_is_top":false,"comment_ctime":1605001756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605001756","product_id":100061801,"comment_content":"func testChannelTaskSchedule() {<br>\tconst chanNum int = 4<br>\tchanArry := make([]chan int, chanNum)<br>\tfor i := 0; i &lt; chanNum; i++ {<br>\t\tchanArry[i] = make(chan int, 1)<br>\t}<br><br>\telapseSec := 10<br><br>\twg := new(sync.WaitGroup)<br>\twg.Add(chanNum)<br><br>\tquitCh := make(chan struct{})<br>\tchanArry[0] &lt;- 1<br>\tfor i := 0; i &lt; chanNum; i++ {<br>\t\tnextIdx := (i + 1) % chanNum<br>\t\tgo func(curCh, nextCh chan int, idx int, quitCh chan struct{}, wg *sync.WaitGroup) {<br>\t\tLoop:<br>\t\t\tfor {<br>\t\t\t\tselect {<br>\t\t\t\tcase val := &lt;-curCh:<br>\t\t\t\t\tfmt.Printf(&quot;I am goroutine:%d,val:%d\\n&quot;, idx, val)<br>\t\t\t\t\ttime.Sleep(time.Second)<br>\t\t\t\t\tnextCh &lt;- (val + 1)<br>\t\t\t\tcase &lt;-quitCh:<br>\t\t\t\t\tfmt.Printf(&quot;--&gt;goroutine:%d exit!\\n&quot;,idx)<br>\t\t\t\t\tbreak Loop<br>\t\t\t\t}<br>\t\t\t}<br>\t\t\twg.Done()<br>\t\t}(chanArry[i], chanArry[nextIdx], i+1, quitCh, wg)<br>\t}<br><br>\tselect {<br>\tcase &lt;-time.After(time.Second * time.Duration(elapseSec)):<br>\t\tfmt.Println(&quot;--&gt;begin close goroutine....&quot;)<br>\t\tclose(quitCh)<br>\t}<br>\twg.Wait()<br>\tfmt.Println(&quot;all goroutine exit!,will be exit!&quot;)<br>}","like_count":0},{"had_liked":false,"id":260418,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1605001338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605001338","product_id":100061801,"comment_content":"“执行业务处理的 goroutine 不要通过共享内存的方式通信，而是要通过 Channel 通信的方式分享数据。”让我想起了，在业务中主线程开了一个子线程处理一个任务，主线程怎么取消正在处理任务的线程呢？共享内存中的变量(分布式中使用分布式锁之类的变量)，好一点的做法是让子线程去for循环检查，差一点是在子线程中的某些操作之前进行判断。而go的chan的通信方式在这里就处理的很妙，传给go程单独一个用来控制取消的done通道，使用通道的一些特性完成了不需要共享内存的处理方式。要知道共享内存在并发中带来的问题是繁杂的。而使用chan的方式，只要控制好chan的所有权，不存在共享内存的杂糅问题，并且可以在done上来做一些动作，比如超时取消，重试机制。","like_count":0},{"had_liked":false,"id":260204,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1604940623,"is_pvip":false,"replies":[{"id":"94509","content":"lock保护的不仅仅buf,还有其他字段比如sendx,qcount,不方便lockfree的实现","user_name":"作者回复","user_name_real":"鸟窝","uid":"1066613","ctime":1604985042,"ip_address":"","comment_id":260204,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1604940623","product_id":100061801,"comment_content":"老师，请问在hchan结构中lock是hchan所有字段中的大锁。是否可以把buf指向的循环队列采用lock free方式，这样lock不需要锁住循环队列相关的变量呢？","like_count":0,"discussions":[{"author":{"id":1066613,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/75/d35c7623.jpg","nickname":"鸟窝","note":"","ucode":"E49D44F9613F17","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509132,"discussion_content":"lock保护的不仅仅buf,还有其他字段比如sendx,qcount,不方便lockfree的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604985042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}