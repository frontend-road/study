{"id":465228,"title":"02｜程序基石：数据与量值是如何被组织的？","content":"<p>你好，我是于航。</p><p>从这一讲开始，我们就进入到了“C 核心语法实现篇”的学习。在这一模块中，我们将围绕 C 语言的七大类核心语法，深入探寻隐藏在语法背后，程序代码的实际执行细节。</p><p>C 语言让我们能够用一种可移植、结构化，且具有人类可理解语义的方式，构建我们的程序。C 标准中详细描述了 C 语言在语法和语义两个层面的基本内容，但对于实现者，比如编译器来说，如何将这些语法和语义体现在具体的<strong>机器指令</strong>（汇编代码）上，标准并未给出详细规定。</p><p>所以问题来了：<strong>在这层抽象背后，一个 C 程序中的各类语法结构，究竟是如何映射到机器能够识别的不同指令上的？</strong>相信学完这一模块，你就能找到这个问题的答案，从而对程序的运行有更细粒度的把控。</p><p>今天，我们就从最基本的数据和量值开始。相信你在第一次接触编程这个概念时就会了解到，一个完整的程序是由“算法”与“数据结构”两部分组成的。其中，算法代表程序会以怎样的具体逻辑来运行；数据结构代表程序运行过程中涉及数据的具体组织方式。而在一门编程语言中，数据便是以不同类型“量值”的形式被组织在一起，并交由算法进行处理的。所以我们可以说，<strong>数据和量值是程序运行的基石。</strong></p><p>今天，我们先从日常使用 C 语言时最直观的编码方式开始，介绍 C 语言中的量值和数据。然后，由源代码的“表象”到计算机内部，我们来看看数据在计算机中存储时是如何被编码的。最后，我们再来一起看下，程序中的各类数据究竟被存放在哪里。</p><!-- [[[read_end]]] --><h2>C 语言中的量值与数据</h2><p>量值可以被粗略地分为变量（variable）与常量（constant），其中变量是指值可以在整个应用程序的生命周期中被多次改变的量；而常量则与之相反，在被定义后便无法被再次修改。作为一种高级语言，C 语言为我们提供了可用于定义常量与变量的语法。那么，首先我们就来看看不同的量值在 C 语言中是怎样体现的。</p><h3>变量</h3><p>C 语言为我们提供了众多的语言关键字（keyword）以用来定义相应类型的数据。比如在下面这个例子中，我们通过以下几步成功定义了多个变量：</p><ol>\n<li>使用 <code>int</code> 等关键字，来指定数据的具体类型；</li>\n<li>为该数据设置一个名称；</li>\n<li>通过 “=” 赋值运算符为该数据设定具体的值。</li>\n</ol><pre><code class=\"language-c++\">int x = -10;&nbsp; // 定义一个整型变量；\nchar y = 'c';&nbsp; // 定义一个字符变量；\ndouble z = 2.0;&nbsp; // 定义一个双精度浮点变量；\n</code></pre><p>这里的变量具有三部分信息，即变量对应的名称、所表示数据的具体类型，以及当前的数据值。接下来，我们围绕着 C 变量的类型、大小及符号性三个方面来详细地看一看。</p><p>C 语言提供了众多的关键字，可用来指定变量的类型，这些类型均以字节作为单位，来表示变量可容纳数据的最大宽度。例如，<code>char</code> 类型的数据仅占用 1 个字节，而 <code>long long</code> 类型则至少占用 8 个字节。除了最常见的用于表示数值的类型外，C90 与 C99 标准还提供了 <code>void</code>（空类型）、<code>_Bool</code>（布尔型）、<code>_Complex</code>（复数类型）等类型关键字，以用于指定其他非数值类型。</p><p>当然，<strong>C 语言中变量类型占用的具体字节大小</strong><strong>，</strong><strong>还与程序运行所在的硬件体系结构紧密相关</strong>，这也是 C 语言与其他高级编程语言有所不同的地方。</p><p>C 语言最初被设计时，高效性就是设计者考虑的一个主要因素。因此 C 标准委员会在考虑语言设计时，会参考来自于底层硬件体系的某些因素。比如，C 标准中规定，<code>int</code> 类型的大小为执行环境架构体系所建议的自然大小。所谓自然大小，可以简单理解为：对于该大小的数据，硬件体系能够以最高的效率进行处理。因此，硬件体系不同，对应的自然大小便也不同，这也就意味着同一种 C 变量类型在不同硬件体系上可能会有着不同的大小。</p><p>而对于 Rust 和 Java 这些语言来说，它们的语言标准中直接规定了各类型的具体大小。编译器作为编程语言与硬件体系之间的抽象层，它可以确保上层类型在被编译到机器指令时，不会给程序的实际运行带来可观测的差异。当然，保持完全不变的类型大小的代价是一定的性能开销，只是在大多数情况下，这部分开销并不可观。</p><p>除了可以为变量指定不同的数据类型外，同大多数其他静态类型语言类似，在 C 语言中，整型变量本身还需区分它们的“符号性（signedness）”。简单来说，其实就是两种情况：若类型仅可以存放正数，则为无符号（unsigned）类型；若正负数都可以存储，则为有符号（signed）类型。</p><p>比如下面这行代码中，我们定义了一个无符号整型变量：</p><pre><code class=\"language-plain\">unsigned int ux = 10;\n</code></pre><p>符号性上的区别有利于程序对某些特定的场景需求进行优化。比如，在编写一个票务系统时，每张票对应的编号只可能为正整数，因此在使用 C 语言编写程序时，便可将票编号对应的变量定义为无符号类型。这样，对于同样的整数类型，由于不用存储对应的符号位，便可以存放更多的正整数，其可表示的正整数范围会更大。</p><h3>常量</h3><p>说完了变量在 C 语言中的体现，我们再来看看常量。在 C 语言中，通过内联方式直接写到源代码中的字面量值一般被称为“常量”。</p><p>我们在前面提到过常量的一个性质，即“它们被定义后无法被再次修改”。这也就意味着，这些常量数据无法灵活地被开发者操控，它们只能在程序最开始出现的地方发挥作用。比如在前面定义变量的一系列代码中，出现的 “-10”、“2.0” 等数字值便是常量。这些值在被拷贝并赋值给相应的变量后便结束了使命。</p><p>这个时候可能有同学想问：用 <code>const</code> 关键字按照与定义变量相同语法定义的量，不也是常量吗？它与字面量常量有什么区别呢？</p><p>这是一个非常棒的问题。一般来说，我们会按照下面的方式使用 <code>const</code> 关键字：</p><pre><code class=\"language-plain\">const int vx = 10;\nconst int* px = &amp;vx;\n</code></pre><p>通常来说，在 C 语言中，使用 <code>const</code> 关键字修饰的变量定义语句，表示对于这些变量，我们无法在后续的程序中修改其对应或指针指向的值。因此，我们更倾向于称它们为“只读变量”，而非常量。当然，在程序的外在表现上，二者有一点是相同的：其值在第一次出现时便被确定，且无法在后续程序中被修改。</p><p>只读变量与字面量常量的一个最重要的不同点是，使用 <code>const</code> 修饰的只读变量不具有“常量表达式”的属性，因此无法用来表示定长数组大小，或使用在 <code>case</code> 语句中。常量表达式本身会在程序编译时被求值，而只读变量的值只能够在程序实际运行时才被得知。并且，编译器通常不会对只读变量进行内联处理，因此其求值不符合常量表达式的特征。</p><p>误用只读变量和常量会导致编译错误，下面这段代码展示了这类错误：</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; const int vx = 10;\n&nbsp; const int vy = 10;\n&nbsp; int arr[vx] = {1, 2, 3};  // [错误1] 使用非常量表达式定义定长数组；\n&nbsp; switch(vy) {\n&nbsp; &nbsp; case vx: {  // [错误2] 非常量表达式应用于 case 语句；\n&nbsp; &nbsp; &nbsp; printf(\"Value matched!\");\n&nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; }\n&nbsp; }\n}\n</code></pre><h2>数据的存储形式</h2><p>上面，我们介绍了数据在编程语言中的体现方式，这是程序员能够接触到数据的最初位置。随着源代码被编译，数据的实际使用形式开始变得不透明起来。接下来我们就一起看看，在计算机内部，数据是以怎样的形式被存放的。</p><p>对于大多数计算机而言，通常其内部会使用补码（Two’s-complement）的格式来存放有符号整数，使用直接对应的二进制位格式来存放无符号整数，使用 IEEE-754 标准编码格式来存放浮点数，也就是小数。<strong>实际上，计算机在看待数据时，并不会区分其符号性，而符号性的差异仅体现在计算机指令操作数据时的具体使用方式上。</strong></p><p>在接下来的内容中，我不会过多讲解这三种编码方式的基本概念，而是会带你看看它们都有哪些值得关注的特征。因为无符号整数的存储格式较为直接和简单，因此我们主要来看下补码和 IEEE-754 这两种编码方式。</p><h3>补码</h3><p>我们先来看补码的几个特点。使用补码来存放有符号整数的一个优点是，CPU 在针对有符号数进行加减法计算时，不需要由于加数的符号性不同而采用多个底层加法电路，这样便可减轻电路设计的负担，另一方面也可以降低 CPU 的物理尺寸。</p><p>一个补码所表示的实际数值，由其负权重位的值与正权重位的值求和而来，其中负权重位对应于最高有效位（MSB）的符号位，即该位的二进制值在计算时按负值累加。其余各位一起对应正权重位，即这些位对应的二进制值在计算时按正值累加。那具体该怎样计算呢？我们来看一个简单的例子。</p><p>假设我们有一组补码 “1101”，那么应该如何得到它对应的有符号整数值呢？按照顺序，我们首先计算得到该补码对应负权重位的值为 -8，而正权重位的值为 5，因此该补码对应的实际值为 -3（-8+5）。具体计算步骤可以参考下图（图中的 B2T 表示 “Binary to Two’s-complement”，即“二进制转补码”）：</p><p><img src=\"https://static001.geekbang.org/resource/image/54/00/545317f11850fc7e757937b4b6531400.jpg?wh=1920x884\" alt=\"图片\"></p><p>在计算负权重位时，其权重应取负值，正权重位取正值。通过上面的计算过程，你可以清楚地看到，对于一个 4 位补码，它可以表示的最大值与最小值分别是多少。计算最大值时，符号位置 0，其他位均置 1，可以得到能表示的最大值 7。计算最小值时，符号位置 1，其他位均置 0，可以得到最小值 -8。负整数的值可表示范围比正整数多 1 个，这也是所有有符号整数的一个重要特征。</p><p>到这里，我们了解了补码的基本计算方式。那我要向你提出一个小问题：补码的英文名称是 Two’s-complement ，可直译为“对数字 2 的补充”，那为什么会叫这个名字呢？你可以先停下来思考一下，然后再来看看我的理解：</p><p>首先，我们来计算一下有符号整数 3 对应的四位补码，可以得到一个二进制序列 “0011”。将该二进制序列与上述 -3 对应的二进制序列相加，通过进位可以得到序列 “10000”，该序列可以表示无符号正整数 16。</p><p>因此，我们可以得到这样一个结论：对于非负数 x，我们可以用 $2^{w} - x$ 来计算 $-x$ 的 $w$ 位表示。套用在上述的例子中，可以得到“在四位补码的情况下，对于非负数 3，可以用无符号数 13 (即 $16 - 3$) 的位模式来表示有符号数 -3 的位模式”这个结论，即两者位模式相同。而补码的英文名称正是对 $x$、$-x$ 和 $2^{w}$ 三者之间的关系进行的总结。</p><p>我们在前面提到过，计算机不会区分数据的符号性，符号性的差异仅由计算机指令如何使用数据而定。比如在 C 语言中，当对某类型变量进行强制类型转换时，其底层存储的数据并不会发生实质的变化，而仅是程序对如何解读这部分数据的方式发生了改变。比如下面这个例子：</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; signed char x = -10;\n&nbsp; unsigned char y = (unsigned char)x;\n&nbsp; printf(\"%d\\n\", y);&nbsp; // output: 246.\n&nbsp; return 0;\n}\n</code></pre><p>其中，有符号整型变量 <code>x</code> 会按照位模式 <code>1111 0110</code> 的补码形式存放有符号数 -10，而如果将该序列按照无符号整数的位模式进行解读，则可得到如程序运行输出一样的结果，即无符号整数值 246。 总之，程序在进行强制类型转换时，不会影响其底层数据的实际存储方式。</p><p>在 C 语言中，关于数据使用还有一个值得注意的问题：<strong>变量类型的隐式转换</strong>（Implicit Type Conversion）。C 语言作为一种相对而言的“弱类型”语言，其一大特征就是在某些特殊情况下，变量的实际类型会发生隐式转换。</p><p>在下面这个例子中，定义的两个变量 <code>x</code> 与 <code>y</code> 分别为有符号整数和无符号整数，且变量 <code>x</code> 的值明显小于变量 <code>y</code>，但程序在实际运行时却会进入到 <code>x &gt;= y</code> 的分支中，这就是因为发生了变量类型的隐式转换。</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; int x = -10;\n&nbsp; unsigned int y = 1;\n&nbsp; if (x &lt; y) {\n&nbsp; &nbsp; printf(\"x is smaller than y.\");\n&nbsp; } else {\n&nbsp; &nbsp; printf(\"x is bigger than y.\");&nbsp; &nbsp;// this branch is picked!\n&nbsp; }\n&nbsp; return 0;\n}\n</code></pre><p>实际上，在上面的代码中，程序逻辑在真正进入到条件语句之前，变量 <code>x</code> 的类型会首先被隐式转换为 <code>unsigned int</code> ，即无符号整型。而根据数据类型的解释规则，原先存放有 -10 补码的位模式会被解释为一个十分庞大的正整数，而这个数则远远大于 1。</p><h3>IEEE-754</h3><p>我们上面主要介绍了有符号整数的补码，以及它在和无符号整数交互时的一些特性。而对于浮点数类型，大多数计算机体系会选择使用 IEEE-754 标准，作为其编码格式。</p><p>IEEE-754 是一个被众多硬件浮点计算单元（FPU）采用的浮点数标准，这个标准解决了浮点数在硬件实现上的很多问题，使其更具可移植性。</p><p>对于 IEEE-754，一个值得介绍的特点是它对浮点数的存储格式设计，使得计算机可以简单地使用对于整数的排序函数，来对浮点数进行排序。</p><p>举个例子，对于无符号数的二进制序列来说，<code>0010</code> 的值肯定要小于<code>1000</code> （2 &lt; 8）。这对计算机来说很好判断。而对基于 IEEE-754 编码的 8 位浮点数（4 位阶码位，3 位小数位）二进制序列  <code>0 0001 001</code> 和  <code>0 1110 111</code> 来说，判断其大小也同样十分简单。除去最左侧的符号位外，直接将其余各位当作无符号整数序列值进行比较，所得结果同样适用于对应的浮点数序列。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/52/4837d03602cbb86accc0c1c2a1ac3152.jpg?wh=1920x859\" alt=\"图片\"></p><p>当然，同整数一样，C 语言在对浮点数进行类型转换时（无论隐式还是显式），也都不会对底层存放的浮点数据进行改动，而只是将对应位序列的解释方式从浮点数改为了其他方式。在 C 语言中，双精度浮点类型 <code>double</code> 具有作为隐式类型转换的最高优先级。当在一个表达式中存在该类型的变量时，计算机会首先将其他参与变量均转换为该类型，然后再进行表达式求值。</p><h2>数据的存储位置</h2><p>了解了数据的基本存储形式，我们再来看看数据会被存放在哪里。</p><p>在 C 语言中，通过不同的语法形式，我们可以定义具有不同数据类型的变量，这些变量按照其定义所在位置，可以被划分为局部变量、全局变量。进一步地，通过添加 <code>static</code> 关键字，可以将变量标记为静态类型，以延长变量的生存期，并限定其可见范围为当前编译单元，即当前所在源文件；通过添加 <code>register</code> 关键字，还可以建议编译器将变量值存放到寄存器中，以提升其读写性能。</p><p>对于上面提到的这些变量形式，其可能的数据存放位置均不尽相同。根据变量定义时使用的不同语法形式，我总结了变量数据的可能存放位置，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/0c/e9bbce8219b8dd12992da0bcc9499e0c.jpg?wh=1920x805\" alt=\"图片\"></p><p>需要注意的是，表格里和这一讲后面提到的以 “.” 作为开头的标识，都指代对应的 Section 结构。这些结构，我会在第四个模块中为你详细介绍，这里你可以先有个整体感知。</p><p>接下来我将具体介绍这些变量数据的可能存放位置。先来看初始化的全局变量和静态变量，这类变量的值具有与应用程序同样长的生命周期，其值通常会被存放到进程 VAS（Virtual Address Space，虚拟地址空间）内的 .data 中。</p><p>VAS 我同样会在第四个模块中详细介绍，这里先不展开了。你可以先这样简单理解：应用程序在被正常加载和运行前，需要首先将应用程序代码，及其相关依赖项的数据映射到内存中的某个位置，这段包含有应用程序正常运行所必备数据的内存段即进程的 VAS。像 .data 等以 “.” 开头作为标记的 Section 结构，都代表着该内存段中的某个具体位置，这些 Section 结构都为应用的正常运行提供了各方面支持。</p><p>局部变量是我们在编写程序时最常使用的一种变量形式。一般来说，这些变量将被存放在寄存器或应用程序 VAS 的栈内存中，具体使用哪种方式则依赖于编译器的选择。</p><p>除此之外，未初始化的全局变量和静态变量，以及直接通过 <code>malloc</code>、<code>calloc</code> 等标准库函数创建的内存块中所包含的数据，其存放位置也有所不同。它们被分别存放到进程 VAS 的 .bss 以及堆内存中。这部分内容我也会在第四个模块中详细介绍。</p><p>最后，不同类型常量数据的存储方式也会有所不同。如下表所示，由于常量本身的不可变特征，它们会按照数据的大小和类型被选择性存放到进程 VAS 的 .rodata 以及 .text 中。其中，.rodata 用于存放只读（Read-only Data）数据，而 .text 通常用于存放程序本身的代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/70/e4d6f1acffe0ace77ae5993f17e59a70.jpg?wh=1920x532\" alt=\"图片\"></p><p>一般的规律是，若内联的常量值较大，则会被单独存放到 .rodata 中保存，否则会直接内联到应用程序代码中，作为机器指令（比如最常见的 <code>mov</code> 指令）的字面量参数。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>这一讲，我主要介绍了 C 语言中与量值和数据相关的基本语法形式、数据实际存储时的具体编码方式，以及数据在程序运行过程中的实际存储位置等相关知识。</p><p>在 C 语言中，我们可以通过多种语法形式来控制一个变量的属性，比如变量的类型、生存期、值存储位置等。数值类型变量所具有的符号性为我们进一步精细化程序逻辑提供了可能。</p><p>在计算机内部，数据以二进制比特位的形式进行存放和使用。根据类型，它们会被选择性地特殊编码为相应的补码或 IEEE-754 格式，C 语言仅决定了如何从程序逻辑方面解释和使用这些数据，而不会对数据怎样存储产生影响。</p><p>走入底层，不同的 C 变量定义语法形式决定了数据不同的存放位置，而寄存器、栈、堆，以及各类存在于进程 VAS 中的 Section 结构都可能成为数据的存放地点。</p><p>和变量相比，常量则显得“轻巧”很多，它们无法在程序运行过程中被灵活修改，其数据存放位置也失去了更多的可能性。</p><h2>思考题</h2><p>最后，我们来一起做个思考题吧。</p><p>C 语言中的一个常用类型 <code>size_t</code> 通常被用在哪些地方？它是整数类型吗？是有符号数还是无符号数？欢迎在评论区留下你的答案。</p><p>今天的课程就结束了，希望可以帮助到你，也欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","comments":[{"had_liked":false,"id":327022,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":true,"comment_ctime":1639842119,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233721286889001e+18","product_id":100100701,"comment_content":"挺有意思～ 我记得在本科学计算机体系结构时，教科书上对补码的定义是先取反码然后+1。于是当我见到一个int在内存中的布局时我会用上述计算步骤进行逆向操作得到原码再算出人类习惯的十进制数。 在这篇专栏里我才知道原来还有 负权重位 这么一说 是完全另外一种计算方式 得到的结果是一样的 哈哈 是个有趣的数学现象","like_count":21,"discussions":[{"author":{"id":2505409,"avatar":"https://static001.geekbang.org/account/avatar/00/26/3a/c1/16fc5963.jpg","nickname":"LJG","note":"","ucode":"CEAFE33E619628","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576368,"discussion_content":"csapp上就是这样定义的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655472582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325450,"user_name":"jack123","can_delete":false,"product_type":"c1","uid":2718510,"ip_address":"","ucode":"873D0046EF39D6","user_header":"","comment_is_top":true,"comment_ctime":1638959992,"is_pvip":false,"replies":[{"id":"118081","content":"这个回答很棒！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1638977980,"ip_address":"","comment_id":325450,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233720857383997e+18","product_id":100100701,"comment_content":"typedef unsigned int size_t;<br>具体类型还要看目标机器上的定义，<br>不过在一般机器上，size_t被定义成无符号整型<br>在一些常见C语言的函数的返回值是size_t<br>比如strlen，sizeof，<br>值得注意的是，在STL容器做遍历的时候，它里面size()方法返回值也是size_t类型的","like_count":11,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537184,"discussion_content":"这个回答很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638977980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539245,"discussion_content":"我在我的vscode中点进去看了下 typedef unsigned long __darwin_size_t  然后size_t 引用了这个定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639647224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325509,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":true,"comment_ctime":1639011327,"is_pvip":true,"replies":[{"id":"118115","content":"这是一个很好的发现！<br>你可以试着在编译指令中添加 “-pedantic -Werror” 这两个选项，然后看看结果会有什么不同？实际上 Clang 在某些情况下会采用名为 “gnu-folding-constant” 的 GNU 扩展来编译 C 代码，但这并不是 C 标准中的内容。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639031209,"ip_address":"","comment_id":325509,"utype":1}],"discussion_count":4,"race_medal":0,"score":"9.2233720814435e+18","product_id":100100701,"comment_content":"我在 mac 环境下  可以使用 const 修饰的只读变量来指定数组长度和 switch case 的值，正常运行了<br>Apple clang version 13.0.0 (clang-1300.0.29.3)<br>Target: arm64-apple-darwin21.1.0<br>Thread model: posix","like_count":10,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537314,"discussion_content":"这是一个很好的发现！\n你可以试着在编译指令中添加 “-pedantic -Werror” 这两个选项，然后看看结果会有什么不同？实际上 Clang 在某些情况下会采用名为 “gnu-folding-constant” 的 GNU 扩展来编译 C 代码，但这并不是 C 标准中的内容。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639031210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568607,"discussion_content":"变长数组我有时候也用，特定场合很好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651188429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1370959,"avatar":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","nickname":"猪小擎","note":"","ucode":"D9552746AE3327","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557641,"discussion_content":"const不是常量，可以认为属于vla，变长数组，变长数组符合c标准，但是会导致低质量汇编，即使符合标准也不推荐使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647915952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542259,"discussion_content":"或者直接使用 “-pedantic-errors” 选项，也是一样的效果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640693207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327612,"user_name":"Pushsadfc","can_delete":false,"product_type":"c1","uid":2866661,"ip_address":"","ucode":"219034B7AA6E6F","user_header":"https://static001.geekbang.org/account/avatar/00/2b/bd/e5/e671a9f1.jpg","comment_is_top":true,"comment_ctime":1640188828,"is_pvip":false,"replies":[{"id":"119357","content":"关于函数调用细节，我们在第 5 和 6 两讲中有介绍的。<br>相关的书其实有很多哈，比如：<br>《CSAPP》<br>《Low Level Programming》<br>《Modern C》<br>《X86&#47;64 体系探索与编程》<br>其他的也可以在比如 Oreilly 上搜一搜哈，它们虽然不是专门讲 C 语言底层的内容，但都是有一定关系的。推荐多参考几本，然后就能找到共通点了。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640321495,"ip_address":"","comment_id":327612,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720513799004e+18","product_id":100100701,"comment_content":"作者大大，你关于函数是如何被调用的，我想了解更多，应该去看哪些书籍嘞。还有您有哪些好的c语言底层书可以推荐嘞","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541292,"discussion_content":"关于函数调用细节，我们在第 5 和 6 两讲中有介绍的。\n相关的书其实有很多哈，比如：\n《CSAPP》\n《Low Level Programming》\n《Modern C》\n《X86/64 体系探索与编程》\n其他的也可以在比如 Oreilly 上搜一搜哈，它们虽然不是专门讲 C 语言底层的内容，但都是有一定关系的。推荐多参考几本，然后就能找到共通点了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640321495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340933,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1649234131,"is_pvip":true,"replies":[{"id":"124678","content":"这个按照 IEEE-754 的组成结构来计算就可以。这里符号位 0 表示正数；指数位为 1，偏置量为 7，对应的阶码为 1 - 7 = -6；尾数为 0.125。所以对应的浮点数为：1.125 * 2 ^ (-6) = 0.01757812。这里 Rounding 了一下，所以变成了 0.017578。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1649306999,"ip_address":"","comment_id":340933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14534136019","product_id":100100701,"comment_content":"老师您好 有一个问题请教一下<br>0 0001 001 为什么表示 0.017578 (图中)","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560381,"discussion_content":"这个按照 IEEE-754 的组成结构来计算就可以。这里符号位 0 表示正数；指数位为 1，偏置量为 7，对应的阶码为 1 - 7 = -6；尾数为 0.125。所以对应的浮点数为：1.125 * 2 ^ (-6) = 0.01757812。这里 Rounding 了一下，所以变成了 0.017578。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649306999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325377,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1638936244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14523838132","product_id":100100701,"comment_content":"讲的好，拍案叫绝！","like_count":3},{"had_liked":false,"id":343393,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1650813717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10240748309","product_id":100100701,"comment_content":"负数反码= 补码+1，计算反码更简单的方法，从右向左数，数的过程中，右边到达第一个1的数，都不变，1左边的数，统一取反。 例如  补码1110 1000，反码是0001 1000。如果是取反再加一，需要0001 0111 ，再加1，也是0001 1000 ","like_count":2},{"had_liked":false,"id":329560,"user_name":"石天兰爱学习","can_delete":false,"product_type":"c1","uid":1451826,"ip_address":"","ucode":"0D95CDA7463516","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","comment_is_top":false,"comment_ctime":1641428515,"is_pvip":true,"replies":[{"id":"120097","content":"因为位模式不变，但这里 printf 中的格式占位符应该用 “%u” 哈。%d 对应的是 signed decimal integer。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1641521689,"ip_address":"","comment_id":329560,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10231363107","product_id":100100701,"comment_content":"#include&lt;stdio.h&gt;<br><br>int main(int argc, char *argv[])<br>{<br>\tint test_num1 = -10;<br>\tunsigned int test_num2 = test_num1;<br><br>\tprintf(&quot;%d\\n&quot;,test_num2);<br>}<br>请问老师，我这个程序的结果为啥是-10，而不是一个正值呢？<br>（Windows下VS编译环境）","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544434,"discussion_content":"因为位模式不变，但这里 printf 中的格式占位符应该用 “%u” 哈。%d 对应的是 signed decimal integer。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641521689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1451826,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","nickname":"石天兰爱学习","note":"","ucode":"0D95CDA7463516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":544441,"discussion_content":"好的，谢谢老师，突然发现自己这个问题好low.\n野路子果然还需好好努力😭","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641523336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544434,"ip_address":""},"score":544441,"extra":""}]}]},{"had_liked":false,"id":336168,"user_name":"龍蝦","can_delete":false,"product_type":"c1","uid":1000076,"ip_address":"","ucode":"BE1D500833F070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","comment_is_top":false,"comment_ctime":1645965783,"is_pvip":true,"replies":[{"id":"122856","content":"是一样的哈，你可以按照同样的方式理解。就是把值、函数体，直接放到之前通过变量，或函数调用间接引用的地方。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645977087,"ip_address":"","comment_id":336168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940933079","product_id":100100701,"comment_content":"老师，这节提到几次内联，这里的内联跟内联函数的内联是否相同？","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553607,"discussion_content":"是一样的哈，你可以按照同样的方式理解。就是把值、函数体，直接放到之前通过变量，或函数调用间接引用的地方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645977087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327143,"user_name":"Geek_fbce70","can_delete":false,"product_type":"c1","uid":2864735,"ip_address":"","ucode":"4428B185541952","user_header":"","comment_is_top":false,"comment_ctime":1639958088,"is_pvip":false,"replies":[{"id":"119003","content":"实际上，在代码中用到的字面值就是常量哈。在 C 语言中，常量并没有其他的定义方式。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639971802,"ip_address":"","comment_id":327143,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5934925384","product_id":100100701,"comment_content":"常量如何定义，这节里没有介绍啊","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540150,"discussion_content":"实际上，在代码中用到的字面值就是常量哈。在 C 语言中，常量并没有其他的定义方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639971802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2440338,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3c/92/81fa306d.jpg","nickname":"张Dave","note":"","ucode":"0E8B6FDEB7505B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557592,"discussion_content":"字符串内容，yes字面常量吧？\n比如 char *str = &#34;ABCD&#34;里面的ABCD","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647874050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2864735,"avatar":"","nickname":"Geek_fbce70","note":"","ucode":"4428B185541952","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540394,"discussion_content":"除了直接用数字写得字面常量，枚举类型算是常量吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640052855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2864735,"avatar":"","nickname":"Geek_fbce70","note":"","ucode":"4428B185541952","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542255,"discussion_content":"类型并不是量值哈，不要弄混。可以定义枚举类型的只读变量，意味着这个量只能取固定的值，但也并不属于常量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640691794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540394,"ip_address":""},"score":542255,"extra":""}]}]},{"had_liked":false,"id":325472,"user_name":"柴","can_delete":false,"product_type":"c1","uid":2862943,"ip_address":"","ucode":"33B15B7A7D26D6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/af/5f/19da4c77.jpg","comment_is_top":false,"comment_ctime":1638968913,"is_pvip":false,"replies":[{"id":"118079","content":"正解！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1638977949,"ip_address":"","comment_id":325472,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5933936209","product_id":100100701,"comment_content":"size_t：一般用于指示数据类型的大小，无符号整型","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537182,"discussion_content":"正解！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638977949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550034,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e9/12/a1d173fe.jpg","nickname":"ppm","note":"","ucode":"A52733E4654270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537233,"discussion_content":"哪个文档指出了是无符号的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639009057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325451,"user_name":"I","can_delete":false,"product_type":"c1","uid":2456502,"ip_address":"","ucode":"6828DD20BA208E","user_header":"https://static001.geekbang.org/account/avatar/00/25/7b/b6/6139258e.jpg","comment_is_top":false,"comment_ctime":1638960433,"is_pvip":true,"replies":[{"id":"118080","content":"没错的。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1638977958,"ip_address":"","comment_id":325451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5933927729","product_id":100100701,"comment_content":"size_t 是无符号整型，常用于计数","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537183,"discussion_content":"没错的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638977958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358641,"user_name":"无","can_delete":false,"product_type":"c1","uid":1015918,"ip_address":"广东","ucode":"CF9F79815606F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/6e/7f78292e.jpg","comment_is_top":false,"comment_ctime":1664507689,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664507689","product_id":100100701,"comment_content":"隐式转换有些什么规则或特殊情况么?能否列以下? 感觉这块很坑阿","like_count":0},{"had_liked":false,"id":357629,"user_name":"x","can_delete":false,"product_type":"c1","uid":3039249,"ip_address":"广东","ucode":"F67BCCFB611824","user_header":"https://static001.geekbang.org/account/avatar/00/2e/60/11/0980d268.jpg","comment_is_top":false,"comment_ctime":1663501190,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663501190","product_id":100100701,"comment_content":"typedef unsigned int size_t;<br>这个在C++里边用的比较多，返回数据类型或者循环中比较常见 ","like_count":0},{"had_liked":false,"id":334396,"user_name":"我亦无他，惟手熟尔","can_delete":false,"product_type":"c1","uid":2653751,"ip_address":"","ucode":"A4921752C5FEB8","user_header":"https://static001.geekbang.org/account/avatar/00/28/7e/37/e38497f7.jpg","comment_is_top":false,"comment_ctime":1644916833,"is_pvip":false,"replies":[{"id":"122162","content":"可以试着在编译指令中添加 “-pedantic-errors” 这个选项，然后看看结果会不会有不同？","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1644936269,"ip_address":"","comment_id":334396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644916833","product_id":100100701,"comment_content":"const变量定义定长数组时未显示有错误，编译运行都通过了，怎么回事？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551233,"discussion_content":"可以试着在编译指令中添加 “-pedantic-errors” 这个选项，然后看看结果会不会有不同？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644936269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327964,"user_name":"不穿格子衬衫的程序员","can_delete":false,"product_type":"c1","uid":1512442,"ip_address":"","ucode":"28DA72B8E476A4","user_header":"https://static001.geekbang.org/account/avatar/00/17/13/fa/e0c26373.jpg","comment_is_top":false,"comment_ctime":1640422933,"is_pvip":false,"replies":[{"id":"119422","content":"这里的原意是没错的，我想突出的是 “C 变量的实际类型会发生隐式转换”这个点。但实际上，强弱类型这个评判标准本来就是模糊的，或者是不推荐使用的。因为强弱是相对的，因此我们可以说 C 的类型是比 JavaScript 强，但比 Ada 弱的。因为 JavaScript 不要求变量具有类型，但 Ada 却要求所有变量都需要有类型，并且仅支持显式的类型转换。这样一比较的话，C 只能处在两者之间。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640449883,"ip_address":"","comment_id":327964,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640422933","product_id":100100701,"comment_content":"“补码”这一节中：“C 语言作为一种弱类型语言，其一大特征就是在某些特殊情况下，变量的实际类型会发生隐式转换。”这句话是笔误了吧？C 语言是强类型语言吧？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541579,"discussion_content":"这里的原意是没错的，我想突出的是 “C 变量的实际类型会发生隐式转换”这个点。但实际上，强弱类型这个评判标准本来就是模糊的，或者是不推荐使用的。因为强弱是相对的，因此我们可以说 C 的类型是比 JavaScript 强，但比 Ada 弱的。因为 JavaScript 不要求变量具有类型，但 Ada 却要求所有变量都需要有类型，并且仅支持显式的类型转换。这样一比较的话，C 只能处在两者之间。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640449883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545845,"discussion_content":"有隐式转换的特性， 可以说是弱类型语言的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642065511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326724,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639646562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639646562","product_id":100100701,"comment_content":"确实 有符号类型和无符号类型去操作的时候会被转成无符号类型 这块以前在书上也看过 <br>","like_count":0},{"had_liked":false,"id":325740,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1639112616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639112616","product_id":100100701,"comment_content":"#include &lt;stdio.h&gt;<br><br>int main(int argc, char *argv[]) {<br>        const float f = 16777214;<br>        for (int i = 0; i &lt; 10; i++) {<br>                printf(&quot;%f\\n&quot;, f + i);<br>        }<br><br>        const double d = 9007199254740989;<br>        for (int i = 0; i &lt; 10; i++) {<br>                printf(&quot;%lf\\n&quot;, d + i);<br>        }<br><br>        return 0;<br>}","like_count":0},{"had_liked":false,"id":325730,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1639108046,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639108046","product_id":100100701,"comment_content":"#include &lt;stdio.h&gt;<br><br>int main(int argc, char* argv[]) {<br>        const int a[] = { 1, 2, 3 };<br><br>        for (size_t i = 2; i &gt;= 0; i--) {<br>                printf(&quot;%d&quot;, a[i]);<br>        }<br><br>        return 0;<br>}","like_count":0},{"had_liked":false,"id":325591,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1639033903,"is_pvip":false,"replies":[{"id":"118123","content":"哪里没有看懂呢？","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639036280,"ip_address":"","comment_id":325591,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1639033903","product_id":100100701,"comment_content":"补码那一段表示看不懂~","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537339,"discussion_content":"哪里没有看懂呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639036280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537418,"discussion_content":"那块整个都是懵圈的，我再理解理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639057340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537339,"ip_address":""},"score":537418,"extra":""},{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537420,"discussion_content":"顺便说一下，长发更帅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639057395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537339,"ip_address":""},"score":537420,"extra":""},{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539248,"discussion_content":"补码这块 你就 8位补码 如果是有符号的 那么范围就是 10000000（-128）~ 01111111(127)\n如果是无符号的 那么就是 0 - 11111111(255)\n\n如果你现在是 -1 你转换成无符号  -1的编码应该是  11111111 对应的就是\n-128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = -1 当你转换成了 无符号的时候\n那么你的 -128 就是+128  那么就是 255 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639647420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537418,"ip_address":""},"score":539248,"extra":""}]}]},{"had_liked":false,"id":325556,"user_name":"石天兰爱学习","can_delete":false,"product_type":"c1","uid":1451826,"ip_address":"","ucode":"0D95CDA7463516","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","comment_is_top":false,"comment_ctime":1639020407,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639020407","product_id":100100701,"comment_content":"老师讲的很好，努力学习中，打卡","like_count":0},{"had_liked":false,"id":325536,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1639017403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639017403","product_id":100100701,"comment_content":"size_t是无符号整型。<br>它通常被用于循环中的变量声明、sizeof()的返回值类型、return返回值类型、malloc()分配空间大小的表示、数组大小的表示等。","like_count":0},{"had_liked":false,"id":325502,"user_name":"ppm","can_delete":false,"product_type":"c1","uid":2550034,"ip_address":"","ucode":"A52733E4654270","user_header":"https://static001.geekbang.org/account/avatar/00/26/e9/12/a1d173fe.jpg","comment_is_top":false,"comment_ctime":1639008989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639008989","product_id":100100701,"comment_content":"第一次了解到rodata数据段？","like_count":0},{"had_liked":false,"id":325459,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1638963662,"is_pvip":true,"replies":[{"id":"118078","content":"Bingo！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1638977936,"ip_address":"","comment_id":325459,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638963662","product_id":100100701,"comment_content":"思考题答案<br>同样用于下标和大小，是无符号整数类型。","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537181,"discussion_content":"Bingo！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638977936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}