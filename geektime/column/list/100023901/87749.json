{"id":87749,"title":"13 | 理论基础模块热点问题答疑","content":"<p>到这里，专栏的第一模块——并发编程的理论基础，我们已经讲解完了，总共12篇，不算少，但“跳出来，看全景”你会发现这12篇的内容基本上是一个“串行的故事”。所以，在学习过程中，建议你从一个个单一的知识和技术中“跳出来”，看全局，搭建自己的并发编程知识体系。</p><p>为了便于你更好地学习和理解，下面我会先将这些知识点再简单地为你“串”一下，咱们一起复习下；然后就每篇文章的课后思考题、留言区的热门评论，我也集中总结和回复一下。</p><p><strong>那这个“串行的故事”是怎样的呢？</strong></p><p>起源是一个硬件的核心矛盾：CPU与内存、I/O的速度差异，系统软件（操作系统、编译器）在解决这个核心矛盾的同时，引入了可见性、原子性和有序性问题，这三个问题就是很多并发程序的Bug之源。这，就是<a href=\"https://time.geekbang.org/column/article/83682\">01</a>的内容。</p><p>那如何解决这三个问题呢？Java语言自然有招儿，它提供了Java内存模型和互斥锁方案。所以，在<a href=\"https://time.geekbang.org/column/article/84017\">02</a>我们介绍了Java内存模型，以应对可见性和有序性问题；那另一个原子性问题该如何解决？多方考量用好互斥锁才是关键，这就是<a href=\"https://time.geekbang.org/column/article/84344\">03</a>和<a href=\"https://time.geekbang.org/column/article/84601\">04</a>的内容。</p><p>虽说互斥锁是解决并发问题的核心工具，但它也可能会带来死锁问题，所以<a href=\"https://time.geekbang.org/column/article/85001\">05</a>就介绍了死锁的产生原因以及解决方案；同时还引出一个线程间协作的问题，这也就引出了<a href=\"https://time.geekbang.org/column/article/85241\">06</a>这篇文章的内容，介绍线程间的协作机制：等待-通知。</p><!-- [[[read_end]]] --><p>你应该也看出来了，前六篇文章，我们更多地是站在微观的角度看待并发问题。而<a href=\"https://time.geekbang.org/column/article/85702\">07</a>则是换一个角度，站在宏观的角度重新审视并发编程相关的概念和理论，同时也是对前六篇文章的查漏补缺。</p><p><a href=\"https://time.geekbang.org/column/article/86089\">08</a>介绍的管程，是Java并发编程技术的基础，是解决并发问题的万能钥匙。并发编程里两大核心问题——互斥和同步，都是可以由管程来解决的。所以，学好管程，就相当于掌握了一把并发编程的万能钥匙。</p><p>至此，并发编程相关的问题，理论上你都应该能找到问题所在，并能给出理论上的解决方案了。</p><p>而后在<a href=\"https://time.geekbang.org/column/article/86366\">09</a>、<a href=\"https://time.geekbang.org/column/article/86666\">10</a>和<a href=\"https://time.geekbang.org/column/article/86695\">11</a>我们又介绍了线程相关的知识，毕竟Java并发编程是要靠多线程来实现的，所以有针对性地学习这部分知识也是很有必要的，包括线程的生命周期、如何计算合适的线程数以及线程内部是如何执行的。</p><p>最后，在<a href=\"https://time.geekbang.org/column/article/87365\">12</a>我们还介绍了如何用面向对象思想写好并发程序，因为在Java语言里，面向对象思想能够让并发编程变得更简单。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/8e/7fed6a485a694c794ee205c346b5338e.png?wh=2820*1178\" alt=\"\"></p><center><span class=\"reference\">并发编程理论基础模块思维导图</span></center><p>经过这样一个简要的总结，相信你此时对于并发编程相关的概念、理论、产生的背景以及它们背后的关系已经都有了一个相对全面的认识。至于更深刻的认识和应用体验，还是需要你“钻进去，看本质”，加深对技术本身的认识，拓展知识深度和广度。</p><p>另外，在每篇文章的最后，我都附上了一个思考题，这些思考题虽然大部分都很简单，但是隐藏的问题却很容易让人忽略，从而不经意间就引发了Bug；再加上留言区的一些热门评论，所以我想着<strong>将这些隐藏的问题或者易混淆的问题，做一个总结也是很有必要的</strong>。</p><h2>1. 用锁的最佳实践</h2><p>例如，在<a href=\"https://time.geekbang.org/column/article/84344\">《03 | 互斥锁（上）：解决原子性问题》</a>和<a href=\"https://time.geekbang.org/column/article/84601\">《04 | 互斥锁（下）：如何用一把锁保护多个资源？》</a>这两篇文章中，我们的思考题都是关于如何创建正确的锁，而思考题里的做法都是错误的。</p><p><a href=\"https://time.geekbang.org/column/article/84344\">03</a>的思考题的示例代码如下，<code>synchronized (new Object())</code> 这行代码很多同学已经分析出来了，每次调用方法get()、addOne()都创建了不同的锁，相当于无锁。这里需要你再次加深一下记忆，“<strong>一个合理的受保护资源与锁之间的关联关系应该是N:1</strong>”。只有共享一把锁才能起到互斥的作用。</p><p>另外，很多同学也提到，JVM开启逃逸分析之后，<code>synchronized (new Object())</code> 这行代码在实际执行的时候会被优化掉，也就是说在真实执行的时候，这行代码压根就不存在。不过无论你是否懂“逃逸分析”都不影响你学好并发编程，如果你对“逃逸分析”感兴趣，可以参考一些JVM相关的资料。</p><pre><code>class SafeCalc {\n  long value = 0L;\n  long get() {\n    synchronized (new Object()) {\n      return value;\n    }\n  }\n  void addOne() {\n    synchronized (new Object()) {\n      value += 1;\n    }\n  }\n}\n</code></pre><p><a href=\"https://time.geekbang.org/column/article/84601\">04</a>的思考题转换成代码，是下面这个样子。它的核心问题有两点：一个是锁有可能会变化，另一个是 Integer 和 String 类型的对象不适合做锁。如果锁发生变化，就意味着失去了互斥功能。 Integer 和 String 类型的对象在JVM里面是可能被重用的，除此之外，JVM里可能被重用的对象还有Boolean，那重用意味着什么呢？意味着你的锁可能被其他代码使用，如果其他代码 <code>synchronized(你的锁)</code>，而且不释放，那你的程序就永远拿不到锁，这是隐藏的风险。</p><pre><code>class Account {\n  // 账户余额  \n  private Integer balance;\n  // 账户密码\n  private String password;\n  // 取款\n  void withdraw(Integer amt) {\n    synchronized(balance) {\n      if (this.balance &gt; amt){\n        this.balance -= amt;\n      }\n    }\n  } \n  // 更改密码\n  void updatePassword(String pw){\n    synchronized(password) {\n      this.password = pw;\n    }\n  } \n}\n</code></pre><p>通过这两个反例，我们可以总结出这样一个基本的原则：<strong>锁，应是私有的、不可变的、不可重用的</strong>。我们经常看到别人家的锁，都长成下面示例代码这样，这种写法貌不惊人，却能避免各种意想不到的坑，这个其实就是最佳实践。最佳实践这方面的资料推荐你看《Java安全编码标准》这本书，研读里面的每一条规则都会让你受益匪浅。</p><pre><code>// 普通对象锁\nprivate final Object \n  lock = new Object();\n// 静态对象锁\nprivate static final Object\n  lock = new Object(); \n</code></pre><h2>2. 锁的性能要看场景</h2><p><a href=\"https://time.geekbang.org/column/article/85001\">《05 | 一不小心就死锁了，怎么办？》</a>的思考题是比较<code>while(!actr.apply(this, target));</code>这个方法和<code>synchronized(Account.class)</code>的性能哪个更好。</p><p>这个要看具体的应用场景，不同应用场景它们的性能表现是不同的。在这个思考题里面，如果转账操作非常费时，那么前者的性能优势就显示出来了，因为前者允许A-&gt;B、C-&gt;D这种转账业务的并行。不同的并发场景用不同的方案，这是并发编程里面的一项基本原则；没有通吃的技术和方案，因为每种技术和方案都是优缺点和适用场景的。</p><h2>3. 竞态条件需要格外关注</h2><p><a href=\"https://time.geekbang.org/column/article/85702\">《07 | 安全性、活跃性以及性能问题》</a>里的思考题是一种典型的竞态条件问题（如下所示）。竞态条件问题非常容易被忽略，contains()和add()方法虽然都是线程安全的，但是组合在一起却不是线程安全的。所以你的程序里如果存在类似的组合操作，一定要小心。</p><pre><code>void addIfNotExist(Vector v, \n    Object o){\n  if(!v.contains(o)) {\n    v.add(o);\n  }\n}\n</code></pre><p>这道思考题的解决方法，可以参考<a href=\"https://time.geekbang.org/column/article/87365\">《12 | 如何用面向对象思想写好并发程序？》</a>，你需要将共享变量v封装在对象的内部，而后控制并发访问的路径，这样就能有效防止对Vector v变量的滥用，从而导致并发问题。你可以参考下面的示例代码来加深理解。</p><pre><code>class SafeVector{\n  private Vector v; \n  // 所有公共方法增加同步控制\n  synchronized \n  void addIfNotExist(Object o){\n    if(!v.contains(o)) {\n      v.add(o);\n    }\n  }\n}\n</code></pre><h2>4. 方法调用是先计算参数</h2><p>不过，还有同学对<a href=\"https://time.geekbang.org/column/article/85702\">07</a>文中所举的例子有疑议，认为<code>set(get()+1);</code>这条语句是进入set()方法之后才执行get()方法，其实并不是这样的。方法的调用，是先计算参数，然后将参数压入调用栈之后才会执行方法体，方法调用的过程在<a href=\"https://time.geekbang.org/column/article/86695\">11</a>这篇文章中我们已经做了详细的介绍，你可以再次重温一下。</p><pre><code>while(idx++ &lt; 10000) {\n  set(get()+1);   \n}\n</code></pre><p>先计算参数这个事情也是容易被忽视的细节。例如，下面写日志的代码，如果日志级别设置为INFO，虽然这行代码不会写日志，但是会计算<code>\"The var1：\" + var1 + \", var2:\" + var2</code>的值，因为方法调用前会先计算参数。</p><pre><code>logger.debug(&quot;The var1：&quot; + \n  var1 + &quot;, var2:&quot; + var2);\n</code></pre><p>更好地写法应该是下面这样，这种写法仅仅是讲参数压栈，而没有参数的计算。使用{}占位符是写日志的一个良好习惯。</p><pre><code>logger.debug(&quot;The var1：{}, var2:{}&quot;, \n  var1, var2);\n</code></pre><h2>5. InterruptedException异常处理需小心</h2><p><a href=\"https://time.geekbang.org/column/article/86366\">《 09 | Java线程（上）：Java线程的生命周期》</a>的思考题主要是希望你能够注意InterruptedException的处理方式。当你调用Java对象的wait()方法或者线程的sleep()方法时，需要捕获并处理InterruptedException异常，在思考题里面（如下所示），本意是通过isInterrupted()检查线程是否被中断了，如果中断了就退出while循环。当其他线程通过调用<code>th.interrupt().</code>来中断th线程时，会设置th线程的中断标志位，从而使<code>th.isInterrupted()</code>返回true，这样就能退出while循环了。</p><pre><code>Thread th = Thread.currentThread();\nwhile(true) {\n  if(th.isInterrupted()) {\n    break;\n  }\n  // 省略业务代码无数\n  try {\n    Thread.sleep(100);\n  }catch (InterruptedException e){\n    e.printStackTrace();\n  }\n}\n</code></pre><p>这看上去一点问题没有，实际上却是几乎起不了作用。原因是这段代码在执行的时候，大部分时间都是阻塞在sleep(100)上，当其他线程通过调用<code>th.interrupt().</code>来中断th线程时，大概率地会触发InterruptedException 异常，<strong>在触发InterruptedException 异常的同时，JVM会同时把线程的中断标志位清除</strong>，所以这个时候<code>th.isInterrupted()</code>返回的是false。</p><p>正确的处理方式应该是捕获异常之后重新设置中断标志位，也就是下面这样：</p><pre><code>try {\n  Thread.sleep(100);\n}catch(InterruptedException e){\n  // 重新设置中断标志位\n  th.interrupt();\n}\n</code></pre><h2>6. 理论值 or 经验值</h2><p><a href=\"https://time.geekbang.org/column/article/86666\">《10 | Java线程（中）：创建多少线程才是合适的？》</a>的思考题是：经验值为“最佳线程=2 * CPU的核数 + 1”，是否合理？</p><p>从理论上来讲，这个经验值一定是靠不住的。但是经验值对于很多“I/O耗时 / CPU耗时”不太容易确定的系统来说，却是一个很好到初始值。</p><p>我们曾讲到最佳线程数最终还是靠压测来确定的，实际工作中大家面临的系统，“I/O耗时 / CPU耗时”往往都大于1，所以基本上都是在这个<strong>初始值的基础上增加</strong>。增加的过程中，应关注线程数是如何影响吞吐量和延迟的。一般来讲，随着线程数的增加，吞吐量会增加，延迟也会缓慢增加；但是当线程数增加到一定程度，吞吐量就会开始下降，延迟会迅速增加。这个时候基本上就是线程能够设置的最大值了。</p><p>实际工作中，不同的I/O模型对最佳线程数的影响非常大，例如大名鼎鼎的Nginx用的是非阻塞I/O，采用的是多进程单线程结构，Nginx本来是一个I/O密集型系统，但是最佳进程数设置的却是CPU的核数，完全参考的是CPU密集型的算法。所以，理论我们还是要活学活用。</p><h2>总结</h2><p>这个模块，内容主要聚焦在并发编程相关的理论上，但是思考题则是聚焦在细节上，我们经常说细节决定成败，在并发编程领域尤其如此。理论主要用来给我们提供解决问题的思路和方法，但在具体实践的时候，还必须重点关注每一个细节，哪怕有一个细节没有处理好，都会导致并发问题。这方面推荐你认真阅读《Java安全编码标准》这本书，如果你英文足够好，也可以参考<a href=\"https://wiki.sei.cmu.edu/confluence/display/java/2+Rules\">这份文档</a>。</p><p>最后总结一句，学好理论有思路，关注细节定成败。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":80729,"user_name":"binary","can_delete":false,"product_type":"c1","uid":1365147,"ip_address":"","ucode":"084B71B8695727","user_header":"https://static001.geekbang.org/account/avatar/00/14/d4/9b/5d69d4d3.jpg","comment_is_top":false,"comment_ctime":1553704354,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"555604485538","product_id":100023901,"comment_content":"这个专栏内容值得反复阅读！","like_count":130,"discussions":[{"author":{"id":1099706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/ba/4c449be2.jpg","nickname":"zhaozp","note":"","ucode":"BF390F5ED762CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300373,"discussion_content":"至少要刷5遍~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598067125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80820,"user_name":"Jialin","can_delete":false,"product_type":"c1","uid":1112955,"ip_address":"","ucode":"12583269732A75","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","comment_is_top":false,"comment_ctime":1553738148,"is_pvip":false,"replies":[{"id":"29416","content":"感谢帮忙回复！","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553776673,"ip_address":"","comment_id":80820,"utype":1}],"discussion_count":2,"race_medal":0,"score":"276431645092","product_id":100023901,"comment_content":"建议iamNigel同学去搜索下Integer String Boolean相关的知识，Integer会缓存-128～127这个范围内的数值，String对象同样会缓存字符串常量到字符串常量池，可供重复使用，所以不能用来用作锁对象，网上有相关的知识讲解和面试问题<br>老师讲解的非常不错，单看每一节，觉得自己已略一二，学完这节才发现要自己的知识点要串起来，整体了解并发","like_count":65,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444989,"discussion_content":"感谢帮忙回复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553776673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fb/98/6f238b8e.jpg","nickname":"半个柚子","note":"","ucode":"CF5D1190D970A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71830,"discussion_content":"Integer对象作为锁应该分为缓存范围内和范围外两部分来说吧，缓存范围内的可能会和意料之外的线程竞争锁，缓存范围外的可能会导致锁的变化","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575460892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81444,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1553915258,"is_pvip":false,"replies":[{"id":"29511","content":"很全面了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553926063,"ip_address":"","comment_id":81444,"utype":1}],"discussion_count":3,"race_medal":0,"score":"259251953018","product_id":100023901,"comment_content":"学完这模块，自己理下，老师帮忙看下哦<br>1、产生并发的原因：cpu、内存、磁盘速度的差异，在硬件和软件方面解决速度差异引发的并发问题，cpu缓存-&gt;可见性，线程切换-&gt;原子性，编译优化-&gt;重排序，引发并发问题的根源。<br>2、并发的解决：可见性解决方法-&gt;volatile、synchronized,原子性的解决方法-&gt;互斥锁，重排序-&gt;volatile,禁掉编译优化<br>3、解决并发原子性产生的问题：死锁，死锁产生的所有条件-&gt;①资源互斥②不能抢占③占有且等待④循环等待，死锁的解决办法-&gt;①按锁的顺序获取②增加锁的分配器。<br>4、宏观角度分析，以上都是从微观角度进行分析并发问题，宏观，即安全问题，性能问题，活跃性问题<br>5、本质看问题，管程<br>6、实际看问题，java生命周期，线程数的分配，线程的执行<br>7、以子之矛攻子之盾，面向对象解决并发问题， 属性final、私有、只有getter方法没有setter方法，属性的赋值，深复制再进行操作等等","like_count":61,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445200,"discussion_content":"很全面了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553926063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2708370,"avatar":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","nickname":"小黄鸭","note":"","ucode":"2800E3A723AEBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537896,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639235821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253310,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/be/551454e0.jpg","nickname":"zxy","note":"","ucode":"FFAA3F6667305D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251759,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588118422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95532,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1558077036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"242076245612","product_id":100023901,"comment_content":"学了专栏之后，在项目里面写并发的BUG更有信心了","like_count":57},{"had_liked":false,"id":80876,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1553747239,"is_pvip":false,"replies":[{"id":"29419","content":"这个建议可以多提😃","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553780360,"ip_address":"","comment_id":80876,"utype":1}],"discussion_count":7,"race_medal":1,"score":"134697733415","product_id":100023901,"comment_content":"这个课程99便宜了，建议涨价，一定要反复多看几遍","like_count":31,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445007,"discussion_content":"这个建议可以多提😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553780360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2011501,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoEcoSRAWRtibKK8RHPc7XibzcyGEfDsUFOXRJWtfd2u549Qa4KpicFNpeq16IqK2KSp9rkF2hrMXDLg/132","nickname":"小小米","note":"","ucode":"D2928A29154FBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277031,"discussion_content":"我是新客19.9买的，感觉赚了一个亿。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590986431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1987202,"avatar":"","nickname":"Geek_783cc7","note":"","ucode":"C43F76B1978FA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409274,"discussion_content":"你是魔鬼吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635407096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179224,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/58/2cddaca4.jpg","nickname":"FH","note":"","ucode":"E47F6765CF1EEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370480,"discussion_content":"极客穷B喜迎课价上涨🤡🤡🤡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619430165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2137652,"avatar":"https://static001.geekbang.org/account/avatar/00/20/9e/34/5db691f2.jpg","nickname":"张展平","note":"","ucode":"562B22DDA51D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328647,"discussion_content":"我已经买了，对涨价不反对哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606202388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634978,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/a2/f68ebec2.jpg","nickname":"疯子","note":"","ucode":"18E6740317A96A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324888,"discussion_content":"我学生，半价买的，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605186296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277109,"discussion_content":"我去，这么便宜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591002459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127677,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1566778399,"is_pvip":false,"replies":[{"id":"47358","content":"正确，nginx里一般都是设置成worker进程和CPU一一对应的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1566793929,"ip_address":"","comment_id":127677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65991287839","product_id":100023901,"comment_content":"对于Nginx为什么属于IO密集型的？我的理解是这样，这个也要看场景，Nginx作为反向代理服务器，那么它会通过负载均衡策略调用后端的服务器，而远程调用属于IO操作，所以此处Nginx作为IO密集型的操作。但因为它 采用的是非阻塞IO模型，所以工作的方式又类似于CPU密集型，所以设置的最佳线程数为CPU的核数。不知道这样的理解是否正确？请老师指正","like_count":15,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464604,"discussion_content":"正确，nginx里一般都是设置成worker进程和CPU一一对应的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566793929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80751,"user_name":"zhangtnty","can_delete":false,"product_type":"c1","uid":1180553,"ip_address":"","ucode":"3C9A14BD7CF432","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/89/e1621a01.jpg","comment_is_top":false,"comment_ctime":1553730691,"is_pvip":false,"replies":[{"id":"29421","content":"线程也是个对象，对象的引用在栈里，对象在堆里<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553780559,"ip_address":"","comment_id":80751,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61683272835","product_id":100023901,"comment_content":"王老师好，在第11讲中，new出的对象放入堆，局部变量放入栈桢。那么new出的线程会放到哪里？麻烦老师这块能否展开讲一下，谢谢😊","like_count":14,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444963,"discussion_content":"线程也是个对象，对象的引用在栈里，对象在堆里\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553780559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80811,"user_name":"皮卡皮卡丘","can_delete":false,"product_type":"c1","uid":1106062,"ip_address":"","ucode":"6764F465FF975B","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/8e/0e4bc2a9.jpg","comment_is_top":false,"comment_ctime":1553737110,"is_pvip":false,"replies":[{"id":"29417","content":"感谢帮忙回复！","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553776692,"ip_address":"","comment_id":80811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53093344662","product_id":100023901,"comment_content":"看下源码就知道了，Integer里有个内部类，会缓存一定范围的整数","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444985,"discussion_content":"感谢帮忙回复！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553776692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118312,"user_name":"江湖夜雨","can_delete":false,"product_type":"c1","uid":1282575,"ip_address":"","ucode":"C64913C7000899","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/0f/cff30522.jpg","comment_is_top":false,"comment_ctime":1564319103,"is_pvip":false,"replies":[{"id":"43338","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1564358508,"ip_address":"","comment_id":118312,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44513992063","product_id":100023901,"comment_content":"redis是不是也是IO密集型，所以设置为单线程？","like_count":10,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460354,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564358508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549098,"discussion_content":"redis的确是io密集型，但是成单线程主要原因是不想引入锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643551276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362784,"discussion_content":"为啥redis是IO密集型，所以设置为单线程呢？之前讲的io密集型场景 最佳线程数 =CPU 核数 * [ 1 +（I/O 耗时 / CPU 耗时）]，这个结果算出来肯定是多个线程的，不太懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617027048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80829,"user_name":"彭锐","can_delete":false,"product_type":"c1","uid":1179669,"ip_address":"","ucode":"F2CB53DE42026D","user_header":"https://static001.geekbang.org/account/avatar/00/12/00/15/6e399ec7.jpg","comment_is_top":false,"comment_ctime":1553739376,"is_pvip":false,"replies":[{"id":"29393","content":"这个例子好<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553746872,"ip_address":"","comment_id":80829,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35913477744","product_id":100023901,"comment_content":"String s1 = &quot;lock&quot;; <br>String s2 = &quot;lock&quot;;<br>这两个是一个对象，即重用了。代码上看起来是操作了一个，其实是操作了两个。","like_count":8,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444993,"discussion_content":"这个例子好\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553746872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380385,"discussion_content":"lock变量被字符串常亮池缓存了，不会创建s2，其实是一个对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624462149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161186,"user_name":"Carpoor奇","can_delete":false,"product_type":"c1","uid":1668276,"ip_address":"","ucode":"8E87A9836B5C63","user_header":"https://static001.geekbang.org/account/avatar/00/19/74/b4/5b8ac2a9.jpg","comment_is_top":false,"comment_ctime":1576140162,"is_pvip":false,"replies":[{"id":"62409","content":"对","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1576911229,"ip_address":"","comment_id":161186,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27345943938","product_id":100023901,"comment_content":"老师，因为String ，Integer，Boolean有缓存之后，虽然我们代码定义了两个对象，但是实际上这两个引用都指向堆里的同个对象，（值相同的情况）所以选择其中一个对象加锁了，实际上另一个对象也被加锁了<br><br>如果两个引用指向的值不同就没有问题，当两个引用指向的值相同就有问题了<br><br>这样理解对吗？","like_count":6,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477631,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576911229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326825,"discussion_content":"Integer 的重用只限于 调用valueOf方法，如果是new 两个Integer则是不一样的。\n\n比如 Integer lock1 = new Integer(123);\n        Integer lock2 = new Integer(123); 这两个是不一样的，\n如果是 \n        Integer lock1 = Integer.valueOf(123););\n        Integer lock2 = Integer.valueOf(123);; 这两个则是一样的，","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605683581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83540,"user_name":"红衣闪闪亮晶晶","can_delete":false,"product_type":"c1","uid":1442879,"ip_address":"","ucode":"34DE6E9D94CA18","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIZTw0bzR4licHwZW59AoJNzwN0oANiaYUWdTfmib9nfhMw6ubxEMDibwAeOWXkiad4FoALb5TOGTstYVw/132","comment_is_top":false,"comment_ctime":1554643506,"is_pvip":false,"replies":[{"id":"30259","content":"如果100个人的项目都用这个缓存的对象做锁，还有人一直不释放，那整个系统都不了用了，锁也要隔离的<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554697267,"ip_address":"","comment_id":83540,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27324447282","product_id":100023901,"comment_content":"老师，我有一点不明白，我看到其他大佬的评论去搜了关于integer的知识，我明白integer内部有缓存，比如超过127会重新新建一个类，这样的sync锁的就是不同的对象了，可是如果是-128 - 127之间，会重用缓存，那他们不就是同一个对象了吗，为什么还会锁不住呢？","like_count":6,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446064,"discussion_content":"如果100个人的项目都用这个缓存的对象做锁，还有人一直不释放，那整个系统都不了用了，锁也要隔离的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554697267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1743868,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9b/fc/a3abbe53.jpg","nickname":"白杨","note":"","ucode":"B56DD94706F80B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339808,"discussion_content":"我也是看了前面课程里很多人的回复后很混乱，我自己的理解，Integer因为可重用，导致用它做锁对象，会出现明明你是第一次手动显式加锁却可能获取不到锁的情况，因为在别的地方也可能有程序在对Integer对象加锁，这里的问题不是锁不锁的上的问题，而是获取不到锁的问题。问题的根源也是对一个可重用的对象加锁，而不是对可变的对象加锁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609812170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202443,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/0b/27420fd7.jpg","nickname":"@说了再见","note":"","ucode":"FA8EE493F4553F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20898,"discussion_content":"老师想强调的应该是锁粒度的问题， integer 对象由于内部有缓存机制，因此这个锁的影响范围是全局的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569390408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81127,"user_name":"zws","can_delete":false,"product_type":"c1","uid":1240091,"ip_address":"","ucode":"18EC6E85F3431E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/1b/650e3dbe.jpg","comment_is_top":false,"comment_ctime":1553821015,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27323624791","product_id":100023901,"comment_content":"推荐 java 并发编程实战 加深理解。","like_count":6,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2945,"discussion_content":"估计是由于整形-127到128这个范围的常量池的原因？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564055450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80828,"user_name":"刘得淼","can_delete":false,"product_type":"c1","uid":1030555,"ip_address":"","ucode":"2C76F394266D97","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b9/9b/a842776c.jpg","comment_is_top":false,"comment_ctime":1553739317,"is_pvip":false,"replies":[{"id":"29394","content":"看来学的很好😃<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553746954,"ip_address":"","comment_id":80828,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27323543093","product_id":100023901,"comment_content":"“学好理论有思路，关注细节定成败。”通过学前几章，帮助项目组里解决个并发的bug。现学现卖。","like_count":7,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444992,"discussion_content":"看来学的很好😃\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553746954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80755,"user_name":"IamNigel","can_delete":false,"product_type":"c1","uid":1435709,"ip_address":"","ucode":"388064ADD5A38C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS0jwYKhjm1pRfCu5X6U0VyVS4ibgdhoAkEyV7FNdIMlXoibCyticb0kGYfDUibGcNrHtmkd8SWJekAA/132","comment_is_top":false,"comment_ctime":1553730965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27323534741","product_id":100023901,"comment_content":"Integer string Boolean的可重用没太明白，希望老师讲解下","like_count":6},{"had_liked":false,"id":249815,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1600822391,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"18780691575","product_id":100023901,"comment_content":"1、产生并发问题的根源：<br>\ta、cpu缓存导致可见性问题。cpu、内存、i&#47;o设备速度差异，cpu增加了缓存来平衡速度差异，就是cpu会使用缓存，多核情况下就会产生可见性问题。<br>\tb、多线程切换导致原子性问题。cpu能保证的原子性操作是一条指令，而不是编程语言的一条语句。往往编程语言的一条指令包含多条cpu指令，这点往往产生误导性。<br>\tc、编译优化带来有序性问题。为了更好的使用cpu缓存，编译器会优化指令执行顺序，指令重排序导致了顺序性问题。<br><br>2、java引入内存模型解决并发问题（可见性、原子性、有序性），实际上就是按需禁用缓存和编译优化，具体就是synchronized、final、volatile，以及happens-before规则。<br>    a、程序顺序性规则。按照程序顺序，happens-before后续的操作。<br>\tb、volatile规则。对volatile变量的写操作happens-before后续对这个volatile变量的读操作。<br>\tc、传递性规则。a happens-before b，b happens-before c，那么a happens-before c。<br>\td、管程中锁的规则。一个锁的解锁操作happens-before后续这个锁的加锁操作。<br>\te、线程start规则。A启动子线程B，B能看到启动前主线程的操作。<br>\tf、线程join规则。A线程调用B线程的join方法，B线程完成后，A线程能看到B线程的操作。<br><br>3、解决方法原子性问题，保证中间状态对外可见。使用互斥锁可以保证原子性。锁和受保护资源一定要对应，切不可出现用自家锁保护他家财产的可笑用法。解决可见性问题，使用volatile、synchronized都能保证可见性。volatile可以保证<br><br>4、a、死锁产生的4个条件：1、互斥，X、Y资源只能同时被一个线程占有。2、不可抢占，A线程不可强行抢夺B线程占有的资源。3、占有且等待。A线程占用资源X，再去获取Y资源的时候不释放X。4、循环等待。A线程占用资源X，等待资源Y，线程B占用资源Y，等待资源X。<br>   b、破环2、3、4这三个条件中的任何一个，都可以防止死锁。对于条件3，可以一次性获取全部的资源，这样就不存在等待了。对于条件2，可以尝试如果再去获取资源而得不到的时候释放自身占有的资源。对于条件4，可以按照统一的资源顺序获取锁。<br>   <br>5、a、宏观看问题，并发问题主要解决三大问题，安全性（原子性、可见性、有序性）、活跃性问题（死锁、活锁、线程饥饿）、性能问题（使用锁过度导致串行范围过大）。<br>   b、解决安全性问题：可以使用使用互斥锁。<br>   c、解决活跃性问题：死锁：打破死锁的三个必要条件中的一个。活锁：可以让线程随机等待一个时间后再执行。线程饥饿：引发线程饥饿的问题可能是线程优先级比较低，如果cpu比较繁忙，那么低优先级的线程获得执行的机会很小。或者获取锁的线程执行时间过长。<br>   d、解决性能问题：锁的细粒度尽量减少，减少串行度。<br> ","like_count":4},{"had_liked":false,"id":228102,"user_name":"放空","can_delete":false,"product_type":"c1","uid":1249827,"ip_address":"","ucode":"A52C3B5D3A872D","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/23/d024dbdf.jpg","comment_is_top":false,"comment_ctime":1592556191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182490783","product_id":100023901,"comment_content":"看了老师的这篇，受益匪浅！立马键入王宝令搜索课程，发现这篇是独苗，有点小失望。希望老师之后发布更多课程！！！","like_count":2},{"had_liked":false,"id":226809,"user_name":"设计模式并发编程","can_delete":false,"product_type":"c1","uid":2020762,"ip_address":"","ucode":"9EB371149F19EF","user_header":"https://static001.geekbang.org/account/avatar/00/1e/d5/9a/515fd6f2.jpg","comment_is_top":false,"comment_ctime":1592208243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182142835","product_id":100023901,"comment_content":"订阅了4个专栏, 就这个专栏讲得最好, 其它几个专栏的代码例子一行写的非常长, 要左右来回滑动阅读非常低效. <br>再就是文章写的逻辑非常绕, 讲得好乏味,  比看康德, 黑格尔 休谟的哲学书籍还难懂 . . .","like_count":2},{"had_liked":false,"id":123368,"user_name":"凌尘","can_delete":false,"product_type":"c1","uid":1487541,"ip_address":"","ucode":"972B8CEF3C9C20","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/b5/b1b42785.jpg","comment_is_top":false,"comment_ctime":1565662437,"is_pvip":false,"replies":[{"id":"50599","content":"😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1568085484,"ip_address":"","comment_id":123368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155597029","product_id":100023901,"comment_content":"真的不错，让人受益匪浅～","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462639,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568085484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81053,"user_name":"李湘河","can_delete":false,"product_type":"c1","uid":1349528,"ip_address":"","ucode":"DB078B5DAAE82E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoViaN0hP07cXOl7vOIvHPu7DZ3wxHBz4iaLVEqG1TFfiagm1wUaiczbCyicwib7oDWw0vD4cXg9eZ0Okqg/132","comment_is_top":false,"comment_ctime":1553786285,"is_pvip":false,"replies":[{"id":"29457","content":"能解决有序性，会禁止重排的<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553833784,"ip_address":"","comment_id":81053,"utype":1}],"discussion_count":8,"race_medal":0,"score":"10143720877","product_id":100023901,"comment_content":"复习了一遍想问老师一个问题，我对java中synchronized理解是只能解决可见性和原子性问题，不能解决有续性问题，但是java中synchronized是管程模型的实现，而管程模型可以解决并发编程里的所有问题(同步和互斥)，这个意思是也可以解决java内存模型中的有续性问题吗？不知道我的理解对不对，还请老师解答一下？","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445061,"discussion_content":"能解决有序性，会禁止重排的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553833784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095136,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b5/e0/fc3ac264.jpg","nickname":"stronger.","note":"","ucode":"AD0F2BE338824C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533193,"discussion_content":"我觉得这个有序性有误导，以下是我的理解\n根据happens-before原则，对一个锁的解锁，happens-before于随后对这个锁的加锁\n所以synchronized的解锁happens-before加锁，也就是说有序性保证的是解锁之后的动作不会重排序到加锁之前的动作，但是在synchronized同步的过程中，指令还是会重排序的。例以下同步代码：\n\n//指令1\nsynchronized(this){\n//指令2\n//指令3\n}\n//指令4\n\n根据happens-before原则，synchronized只保证指令4不会排到指令123之前，指令1不会重排序到指令234之后，但是synchronized同步中的指令2和指令3还是会重排序的，可能是先执行指令3再执行指令2\n\n所以也就解释了@ZHAO.为什么还需要加volatile关键字，因为防止同步中代码块中的指令2和指令3重排序\n\n以上是我的理解，如果不对，请指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637811650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":1594508,"avatar":"https://static001.geekbang.org/account/avatar/00/18/54/8c/a3b98f6c.jpg","nickname":"denofiend","note":"","ucode":"FC9A750C96E01C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095136,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b5/e0/fc3ac264.jpg","nickname":"stronger.","note":"","ucode":"AD0F2BE338824C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533982,"discussion_content":"有实际跑代码验证过吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638055202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533193,"ip_address":""},"score":533982,"extra":""}]},{"author":{"id":1234462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/1e/859c1baa.jpg","nickname":"pngyul","note":"","ucode":"E3A7949DB08438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408686,"discussion_content":"0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635303228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2307954,"avatar":"https://static001.geekbang.org/account/avatar/00/23/37/72/bce6a15b.jpg","nickname":"ZHAO.","note":"","ucode":"2325D5E896735C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393417,"discussion_content":"既然synchronized可以解决有序性，会禁止重排，那为什么用双重检查锁实现单例需要加volatile禁止重排？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631424522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1580185,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1c/99/5e1a2118.jpg","nickname":"mylife","note":"","ucode":"D802160BFB29FC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2307954,"avatar":"https://static001.geekbang.org/account/avatar/00/23/37/72/bce6a15b.jpg","nickname":"ZHAO.","note":"","ucode":"2325D5E896735C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591181,"discussion_content":"个人理解：这是因为锁外面有个判断。它只是保证了锁相关内容的有序性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666342353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":393417,"ip_address":"广东"},"score":591181,"extra":""}]},{"author":{"id":2343086,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","nickname":"徐志超-Klaus","note":"","ucode":"CF26B39965F2A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389595,"discussion_content":"总算翻到一个和我有同样疑问的同学了，基础篇都学完了，竟然发现有序性的知识还是空白的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629352041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046055,"avatar":"","nickname":"杜总","note":"","ucode":"C6600875A265E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286456,"discussion_content":"hb","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593179527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325925,"user_name":"小黄鸭","can_delete":false,"product_type":"c1","uid":2708370,"ip_address":"","ucode":"2800E3A723AEBD","user_header":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","comment_is_top":false,"comment_ctime":1639235749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5934203045","product_id":100023901,"comment_content":"非常非常感谢老师！！","like_count":1},{"had_liked":false,"id":225315,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1591713846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886681142","product_id":100023901,"comment_content":"这个专栏，看前面13节就够了，其中13节是学习地图，值得反复琢磨","like_count":1},{"had_liked":false,"id":192636,"user_name":"wkq2786130","can_delete":false,"product_type":"c1","uid":1256821,"ip_address":"","ucode":"0F3A9DF9928C67","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/75/e7c29de4.jpg","comment_is_top":false,"comment_ctime":1584864633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879831929","product_id":100023901,"comment_content":"并发编程的理论这部分讲的很好，有种醍醐灌顶的感觉。","like_count":1},{"had_liked":false,"id":147217,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1572842138,"is_pvip":false,"replies":[{"id":"57080","content":"不差指南针了吧😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1572955417,"ip_address":"","comment_id":147217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867809434","product_id":100023901,"comment_content":"谢谢老师，老师不仅提供了地图，还教我们怎么看地图，实属难能可贵，谢谢老师。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473203,"discussion_content":"不差指南针了吧😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572955417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139676,"user_name":"MindController","can_delete":false,"product_type":"c1","uid":1159113,"ip_address":"","ucode":"3B9CECCD12CF6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/c9/d9c72c60.jpg","comment_is_top":false,"comment_ctime":1570702979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865670275","product_id":100023901,"comment_content":"讲的实在太好了，这才是精通并发编程","like_count":1},{"had_liked":false,"id":115571,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1022568,"ip_address":"","ucode":"C8C617B87C63C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","comment_is_top":false,"comment_ctime":1563631971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858599267","product_id":100023901,"comment_content":"老师讲得深入浅出","like_count":1},{"had_liked":false,"id":113201,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1562914546,"is_pvip":false,"replies":[{"id":"41241","content":"您客气啦😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1562940715,"ip_address":"","comment_id":113201,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857881842","product_id":100023901,"comment_content":"中间暂停了有1周，总算把第一部分学习完了。收益匪浅，编写游戏代码的时候对并发的要求比较高，之前积累了不少的小经验。这部分的理论虽然没实际指导我写并发代码的技巧，但自己总算能顺着的文章收拾了之前零零碎碎的小经验和知识。期待剩下的内容，最后感谢宝令老师编写的专栏。","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458109,"discussion_content":"您客气啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562940715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81114,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":1443765,"ip_address":"","ucode":"8EDD856C6FA7D2","user_header":"https://static001.geekbang.org/account/avatar/00/16/07/b5/b8a73cfa.jpg","comment_is_top":false,"comment_ctime":1553818969,"is_pvip":false,"replies":[{"id":"29460","content":"周六出","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553834847,"ip_address":"","comment_id":81114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848786265","product_id":100023901,"comment_content":"第二模块出了么？老师","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445085,"discussion_content":"周六出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553834847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81007,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1553774107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848741403","product_id":100023901,"comment_content":"总结的真好","like_count":1},{"had_liked":false,"id":80759,"user_name":"wypsmall","can_delete":false,"product_type":"c1","uid":1317144,"ip_address":"","ucode":"5E46543D47F2C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/19/18/33b7e63b.jpg","comment_is_top":false,"comment_ctime":1553731836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848699132","product_id":100023901,"comment_content":"看来要重读前12章啦","like_count":1},{"had_liked":false,"id":349702,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1656235775,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656235775","product_id":100023901,"comment_content":"确实,总结的很到位!","like_count":0},{"had_liked":false,"id":348758,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1655370598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655370598","product_id":100023901,"comment_content":"Java的包装类型都有缓存，包括Integer, Long ,Boolean 等等。<br>具体可以看：<br>https:&#47;&#47;howtodoinjava.com&#47;java-examples&#47;internal-cache-wrapper-classes&#47;","like_count":0},{"had_liked":false,"id":346507,"user_name":"EnjoyCode","can_delete":false,"product_type":"c1","uid":1680772,"ip_address":"","ucode":"B1EF6D28E3051D","user_header":"https://static001.geekbang.org/account/avatar/00/19/a5/84/fcab6626.jpg","comment_is_top":false,"comment_ctime":1653206444,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1653206444","product_id":100023901,"comment_content":"真的可以说是深入浅出了","like_count":0},{"had_liked":false,"id":346039,"user_name":"wont","can_delete":false,"product_type":"c1","uid":2956657,"ip_address":"","ucode":"F9CBCC8410084B","user_header":"https://static001.geekbang.org/account/avatar/00/2d/1d/71/86c54fb7.jpg","comment_is_top":false,"comment_ctime":1652782080,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652782080","product_id":100023901,"comment_content":"这13节课是内功心法，后面讲的是武功招式！真正的高手都是无招胜有招！","like_count":0},{"had_liked":false,"id":335471,"user_name":"helloWorld","can_delete":false,"product_type":"c1","uid":2793822,"ip_address":"","ucode":"E7D28A9F456959","user_header":"https://static001.geekbang.org/account/avatar/00/2a/a1/5e/4c53cb49.jpg","comment_is_top":false,"comment_ctime":1645530081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645530081","product_id":100023901,"comment_content":"nice，第二篇看到这个总结真是绝了，一下子就串起来了 ","like_count":0},{"had_liked":false,"id":332775,"user_name":"李林发","can_delete":false,"product_type":"c1","uid":2337950,"ip_address":"","ucode":"9B5DF0E2687C44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fmhWQeJqq0iaTZOl06HfkowAsQIU08vccCNLUH1thib7GSFJAm2WKgjmI3OMXMNQQbchHAy403KgicGLzMDKD1Kyw/132","comment_is_top":false,"comment_ctime":1643596175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643596175","product_id":100023901,"comment_content":"想问下，100个线程同时抢一个锁，1个成功，剩下99个进入阻塞等待对列。<br>那么，99个线程进入阻塞等待对列的过程是怎么保证线程安全的？","like_count":0},{"had_liked":false,"id":324548,"user_name":"Geek_ee0dec","can_delete":false,"product_type":"c1","uid":2856565,"ip_address":"","ucode":"00C5F07A421F29","user_header":"","comment_is_top":false,"comment_ctime":1638497634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638497634","product_id":100023901,"comment_content":"指出俩个小错误吧<br>1. while(!actr.apply(this, target));这个方法和synchronized(Account.class)的性能哪个更好 如果转账操作非常费时，那么前者的性能优势就显示出来了<br>如果非常耗时 那while(!actr.apply(this, target)); 会一直自旋消耗cpu 连jdk都把sync搞成所升级了 就是因为自旋消耗cpu 适合较短时间内能获取到锁的场景<br>2.如果日志级别设置为 INFO，虽然这行代码不会写日志 logger.debug(&quot;The var1：&quot; + var1 + &quot;, var2:&quot; + var2);<br>info级别会打印debug debug级别不会打印info 说反了吧 ","like_count":0},{"had_liked":false,"id":305570,"user_name":"苏彧","can_delete":false,"product_type":"c1","uid":1622448,"ip_address":"","ucode":"C016B28DF7449C","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","comment_is_top":false,"comment_ctime":1628050561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628050561","product_id":100023901,"comment_content":"老师，普通对象锁和静态对象锁的作用域是和synchronized锁普通方法和静态方法一样么<br>","like_count":0},{"had_liked":false,"id":289498,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1619054798,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1619054798","product_id":100023901,"comment_content":"set(get()+1);这条语句是进入 set() 方法之后才执行 get() 方法，其实并不是这样的。方法的调用，是先计算参数，然后将参数压入调用栈之后才会执行方法体  <br><br><br>老师，这句话我有个疑问，<br>假设是先计算参数，那么在执行set(get()+1)时，get方法在栈中创建一个栈帧，然后入栈，然后再把set方法对应的栈帧也压入栈中，由于栈是先进后出的结构，那么，set方法是比get方法先出栈的，就没法得到get方法的结果了。       反正set方法先入栈，get方法后入栈，刚好get方法计算完结果，出栈把结果返回给set方法       <br><br>老师，这个要怎么理解呢？","like_count":0,"discussions":[{"author":{"id":2904498,"avatar":"","nickname":"李亮亮","note":"","ucode":"8A5E08520DF6D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554693,"discussion_content":"set方法和get方法是顺序关系，不是调用关系，也就是get方法压栈出栈执行完了才将set压栈，我是这么理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646554534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289495,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1619053475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619053475","product_id":100023901,"comment_content":"<br>void addIfNotExist(Vector v, <br>    Object o){<br>  if(!v.contains(o)) {<br>    v.add(o);<br>  }<br>}  <br><br>老师，直接在void前面加上sy也行吧，为什么非要把v拆出来封装呢？","like_count":0},{"had_liked":false,"id":285834,"user_name":"时光守护者-基兰","can_delete":false,"product_type":"c1","uid":1554995,"ip_address":"","ucode":"F0B0887B1979D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","comment_is_top":false,"comment_ctime":1617026996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617026996","product_id":100023901,"comment_content":"老师看到你的回复redis是IO密集型，所以设置为单线程呢？之前讲的io密集型场景 最佳线程数 =CPU 核数 * [ 1 +（I&#47;O 耗时 &#47; CPU 耗时）]，这个结果算出来肯定是多个线程的，请老师解惑","like_count":0},{"had_liked":false,"id":282906,"user_name":"Geek_aq","can_delete":false,"product_type":"c1","uid":2033256,"ip_address":"","ucode":"6FFE7A9D746964","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHxicHW07jz5vB9I8QAonrDXrcFmOS9CtqufVexs0wY1YxH7picctcTMOiaibgVvwkQX3UcicqqUXWTYQ/132","comment_is_top":false,"comment_ctime":1615459350,"is_pvip":false,"replies":[{"id":"102725","content":"客气😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1615619705,"ip_address":"","comment_id":282906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615459350","product_id":100023901,"comment_content":"感谢老师","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516876,"discussion_content":"客气😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615619705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272847,"user_name":"Insomnia","can_delete":false,"product_type":"c1","uid":1751214,"ip_address":"","ucode":"5986A48988D6E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/ae/085484e7.jpg","comment_is_top":false,"comment_ctime":1610331355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610331355","product_id":100023901,"comment_content":"这个专栏的质量真的太高了, 唯一不足的一点: 理论基础篇中没有加入 AQS 的讲解.","like_count":0},{"had_liked":false,"id":249816,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1600822397,"is_pvip":false,"replies":[{"id":"91643","content":"������","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1600956082,"ip_address":"","comment_id":249816,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1600822397","product_id":100023901,"comment_content":"   <br>6、管程模型解决并发问题（互斥：同一个时刻只允许一个线程访问共享资源。同步：线程间通信、协作）。java管程模型是mesa模型。管程模型发展历史：<br>   a、henson模型：要求notify必须放在代码的最后，这样T2通知完T1后，T2马上结束，T1再执行，这样保证同一个时刻只有一个线程执行。<br>   b、hoare模型，要求T2通知T1后，T2马上阻塞，T1开始执行，然后T1执行完后唤醒T2。这样也保证了同一时刻只有一个线程执行。不过相比henson模型，多了一次唤醒操作。<br>   c、mesa模型，T2执行notify T1后T2还是接着执行，T1并不会马上执行。而T1仅仅是从条件变量等待队列转移到了入口等待队列里面。这样notify就不必放到代码的最后，最后T2也不必有多余的唤醒操作。但是有个副作用，就是T1真正获得锁执行的时候，可能条件变量已经不满足了，这时候T1又得继续等待。所以mesa模型必须在循环中判断条件是否满足。<br><br>7、a、操作系统线程生命周期：初始状态、可运行状态、运行状态、休眠状态、终止状态。休眠状态是不可能获得cpu分配的。<br>   b、java线程生命周期：初始状态（New）、可运行状态&#47;运行状态（Running）、休眠状态(Blocked：阻塞状态、waitting：无时限等待状态、timed_watting：有时限等待状态)、终止状态(Terminal）。<br>   c、初始状态（New）：线程刚创建（通过继承Thread、实现Runnable）<br>   d、可运行&#47;运行状态：执行了线程的start方法。<br>   e、休眠状态-Blocked：线程抢夺不到synchronized隐式锁而阻塞。<br>   f、休眠状态-waitting：线程获取到了锁而调用了无参数的wait、join、park方法。<br>   g、休眠状态-timed_watting:线程获取到了锁而调用了有参数的wait、join、parkNano、parkUntil、sleep方法。<br>   h、终止状态：线程执行完或者发生了异常。<br>   <br>8、线程数如何苹果初始值：<br>   a、cpu密集型：线程数=cpu核数+1<br>   b、i&#47;o密集型：线程数=cpu核数*（1 + io耗时&#47;cpu耗时）<br><br>9、局部变量是线程安全的：局部变量是存在栈帧中、栈帧是方法调用而创建的结构、栈帧是存在调用栈中、而调用栈是每个线程独享的。<br><br>10、如何编写好多线程程序：1、封装好共享变量，防止逃逸。2、识别共享变量的约束关系。3、设计访问控制策略。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506024,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600956082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237981,"user_name":"冰河时代","can_delete":false,"product_type":"c1","uid":1098504,"ip_address":"","ucode":"F4375FB7CE4FD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/08/28c327d0.jpg","comment_is_top":false,"comment_ctime":1596021178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596021178","product_id":100023901,"comment_content":" 锁，应是私有的、不可变的、不可重用的<br>理解了private Object lock = new Obect();<br>看完老师的总结,有可能别人会使用你的锁，你也不知道别人干嘛了。理解了， 并且之前Spring源码里大量这样的写法，当时不是很理解","like_count":0},{"had_liked":false,"id":209895,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1587632963,"is_pvip":false,"replies":[{"id":"78694","content":"可以","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1588032890,"ip_address":"","comment_id":209895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587632963","product_id":100023901,"comment_content":"关于“竞态条件3”这个思考题，应该可以直接加synchronized关键字,这样把contains方法和add方法放入一个临界区内互斥。老师这样也可以吧？<br><br>synchronized void addIfNotExist(Vector v, <br>    Object o){<br>  if(!v.contains(o)) {<br>    v.add(o);<br>  }<br>}","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492891,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588032890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207873,"user_name":"王丰","can_delete":false,"product_type":"c1","uid":1084423,"ip_address":"","ucode":"E4A668D873A32A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8c/07/b4ea8f10.jpg","comment_is_top":false,"comment_ctime":1587201653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587201653","product_id":100023901,"comment_content":"第一性原理 就是掌握基础和理论是 万丈高楼平地起的开始","like_count":0},{"had_liked":false,"id":196788,"user_name":"冬风向左吹","can_delete":false,"product_type":"c1","uid":1066928,"ip_address":"","ucode":"376C45C5134F93","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/b0/a9b77a1e.jpg","comment_is_top":false,"comment_ctime":1585313612,"is_pvip":false,"replies":[{"id":"75067","content":"感动😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1585631075,"ip_address":"","comment_id":196788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585313612","product_id":100023901,"comment_content":"这是我看的第四遍！！！非常棒！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489387,"discussion_content":"感动😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585631075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191639,"user_name":"zhangchao","can_delete":false,"product_type":"c1","uid":1508339,"ip_address":"","ucode":"E665D153A85DE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/03/f3/0bd094ad.jpg","comment_is_top":false,"comment_ctime":1584786317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584786317","product_id":100023901,"comment_content":"nio也关联上了，牛","like_count":0},{"had_liked":false,"id":185786,"user_name":"torres","can_delete":false,"product_type":"c1","uid":1108761,"ip_address":"","ucode":"34DABCFC7B74EA","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/19/76b0b98c.jpg","comment_is_top":false,"comment_ctime":1583678723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583678723","product_id":100023901,"comment_content":"老师的解释太赞了！！！  受益匪浅","like_count":0},{"had_liked":false,"id":182739,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1629537,"ip_address":"","ucode":"8A0F58E2723893","user_header":"https://static001.geekbang.org/account/avatar/00/18/dd/61/544c2838.jpg","comment_is_top":false,"comment_ctime":1582858119,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1582858119","product_id":100023901,"comment_content":"string不能用作锁对象，为什么string.intern()可以作为锁对象？","like_count":0,"discussions":[{"author":{"id":1256821,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2d/75/e7c29de4.jpg","nickname":"wkq2786130","note":"","ucode":"0F3A9DF9928C67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211555,"discussion_content":"String s1 = &#34;lock&#34;;\nString s2 = &#34;lock&#34;;\n这两个是一个对象，即重用了。代码上看起来是操作了一个，其实是操作了两个。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584864819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182659,"user_name":"Kevin⚡️Zhou","can_delete":false,"product_type":"c1","uid":1440772,"ip_address":"","ucode":"C0FC2673705212","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/04/d83a555e.jpg","comment_is_top":false,"comment_ctime":1582845084,"is_pvip":false,"replies":[{"id":"71265","content":"主要还是理解原理，推断出知识，反复地看就能记住","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1583235099,"ip_address":"","comment_id":182659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582845084","product_id":100023901,"comment_content":"老师, 有个疑惑, 很多基础知识, 如果记不住的话是不是不一定要死记硬背, 重在掌握?","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485400,"discussion_content":"主要还是理解原理，推断出知识，反复地看就能记住","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583235099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180079,"user_name":"茶没喝完","can_delete":false,"product_type":"c1","uid":1644104,"ip_address":"","ucode":"D72D88C42A1258","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/48/09493874.jpg","comment_is_top":false,"comment_ctime":1582182499,"is_pvip":false,"replies":[{"id":"70316","content":"您客气啦😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1582553919,"ip_address":"","comment_id":180079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582182499","product_id":100023901,"comment_content":"我真的太佩服老师了，思路清晰，描述简洁明了。<br>能读到这个专栏真的幸运。<br>之前看书积累的疑问好多都解开了。<br>谢谢老师。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484511,"discussion_content":"您客气啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582553919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148154,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1572950839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572950839","product_id":100023901,"comment_content":"nginx采用多进程单线程就可以实现高并发访问的处理，具体是怎么实现的呢？","like_count":0},{"had_liked":false,"id":130644,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1567501121,"is_pvip":false,"replies":[{"id":"48964","content":"😄","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1567554585,"ip_address":"","comment_id":130644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567501121","product_id":100023901,"comment_content":"赞，写得真好","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466047,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567554585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114915,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1563432761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563432761","product_id":100023901,"comment_content":"老师，任何采用封装共享变量在类里，需要保证该类是单例，不然无法保证互斥，不知道我理解的对不对老师","like_count":0},{"had_liked":false,"id":106709,"user_name":"风起时","can_delete":false,"product_type":"c1","uid":1125840,"ip_address":"","ucode":"41E3E457F1E970","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/d0/1fe7144e.jpg","comment_is_top":false,"comment_ctime":1561375831,"is_pvip":false,"replies":[{"id":"53894","content":"contains方法执行完，锁就释放了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570709353,"ip_address":"","comment_id":106709,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1561375831","product_id":100023901,"comment_content":"老师，我很疑惑这个addIfNotExist为啥不安全，我理解contains和add都是线程安全，且锁是当前vector，是可重入锁，contains执行完再执行add不要竞争，那么一个线程必然是一次性执行完contains和add，请老师给我解答下","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455188,"discussion_content":"contains方法执行完，锁就释放了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570709353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380391,"discussion_content":" contains是一把锁，add也是一把锁，有可能catains指望释放了锁，但是add才刚刚开始","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624464009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102267,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1560172844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560172844","product_id":100023901,"comment_content":"基础模块看到这前面忘得差不多了，还好回头复习了一遍","like_count":0},{"had_liked":false,"id":101743,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1559955797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559955797","product_id":100023901,"comment_content":"老师会讲协程么","like_count":0},{"had_liked":false,"id":99302,"user_name":"lantianqiongfeng","can_delete":false,"product_type":"c1","uid":1171486,"ip_address":"","ucode":"72E675F2BDDC79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLPRrWeonJqRzw89DTy9gcsUj50hoP27tauQP0qlsDMmHdo00aHz9mpfBJ5IciafDhia5v4nr97O0YA/132","comment_is_top":false,"comment_ctime":1559188592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559188592","product_id":100023901,"comment_content":"这叫享元模式","like_count":0},{"had_liked":false,"id":93354,"user_name":"刘鹏","can_delete":false,"product_type":"c1","uid":1524765,"ip_address":"","ucode":"48A831C5D2031C","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/1d/833b3890.jpg","comment_is_top":false,"comment_ctime":1557455557,"is_pvip":false,"replies":[{"id":"33507","content":"线程不会阻塞，都是纯cpu计算","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557643861,"ip_address":"","comment_id":93354,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557455557","product_id":100023901,"comment_content":"nginx为什么完全参考的是 CPU 密集型的算法？？？？log日志哪里说的是什么意思<br>","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449595,"discussion_content":"线程不会阻塞，都是纯cpu计算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557643861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88450,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1555920644,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1555920644","product_id":100023901,"comment_content":"跳出来，看全局；针对全局的每一点钻进去，深入思考","like_count":0},{"had_liked":false,"id":85692,"user_name":"罗琦","can_delete":false,"product_type":"c1","uid":1033161,"ip_address":"","ucode":"C4A7AE3A04DA23","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/c9/f83b0109.jpg","comment_is_top":false,"comment_ctime":1555201857,"is_pvip":true,"replies":[{"id":"30816","content":"要看rpc的网络模型是什么样的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1555211639,"ip_address":"","comment_id":85692,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1555201857","product_id":100023901,"comment_content":"如果多线程中的IO操作是网络IO，比如RPC调用，会对线程数的设定有什么影响？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446768,"discussion_content":"要看rpc的网络模型是什么样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555211639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85311,"user_name":"kk","can_delete":false,"product_type":"c1","uid":1001181,"ip_address":"","ucode":"4C96F29C822E1D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/dd/8281f351.jpg","comment_is_top":false,"comment_ctime":1555033936,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555033936","product_id":100023901,"comment_content":"这个专栏好","like_count":0},{"had_liked":false,"id":83680,"user_name":"红衣闪闪亮晶晶","can_delete":false,"product_type":"c1","uid":1442879,"ip_address":"","ucode":"34DE6E9D94CA18","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIZTw0bzR4licHwZW59AoJNzwN0oANiaYUWdTfmib9nfhMw6ubxEMDibwAeOWXkiad4FoALb5TOGTstYVw/132","comment_is_top":false,"comment_ctime":1554697940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554697940","product_id":100023901,"comment_content":"谢谢老师回复我的留言，真是豁然开朗","like_count":0},{"had_liked":false,"id":82212,"user_name":"on the way","can_delete":false,"product_type":"c1","uid":1323807,"ip_address":"","ucode":"77B29D60168D7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/1f/35b68f47.jpg","comment_is_top":false,"comment_ctime":1554164566,"is_pvip":false,"replies":[{"id":"29861","content":"intern内部是共享的，你看过的代码要么是写错了，要么是炫技，总之都不推荐<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1554217458,"ip_address":"","comment_id":82212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554164566","product_id":100023901,"comment_content":"我看过一个代码，用string.intern（）做锁的。有点不太明白和string有什么区别…","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445509,"discussion_content":"intern内部是共享的，你看过的代码要么是写错了，要么是炫技，总之都不推荐\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554217458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81724,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1554020555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554020555","product_id":100023901,"comment_content":"这个面试会经常被问到","like_count":0},{"had_liked":false,"id":81145,"user_name":"siouty","can_delete":false,"product_type":"c1","uid":1260799,"ip_address":"","ucode":"915D2C65662318","user_header":"https://static001.geekbang.org/account/avatar/00/13/3c/ff/cbc0ee37.jpg","comment_is_top":false,"comment_ctime":1553822239,"is_pvip":false,"replies":[{"id":"29454","content":"建议先去看看java编程基础吧，他们讲的比我专业<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553833352,"ip_address":"","comment_id":81145,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1553822239","product_id":100023901,"comment_content":"建议有一个完整的代码链接贴出来<br>单个片段就像老师前面说的以点看面绕晕了<br><br>还有本人小白对计算机和JAVA程序是怎么交互的不太懂，还望老师能细心解答一下。<br><br>JAVA虚拟机内存和计算机内存是是什么区别？<br><br>以前理解的内存是一个内存卡和移动硬盘等可以存储东西的实体，可是看了文章又觉得计算机内存是个虚拟的东西，搞得好乱。","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445094,"discussion_content":"建议先去看看java编程基础吧，他们讲的比我专业\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553833352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210016,"avatar":"https://static001.geekbang.org/account/avatar/00/12/76/a0/1a6db8ac.jpg","nickname":"无心水","note":"","ucode":"0890F6617D8462","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573223,"discussion_content":"你理解的没错，内存卡和移动硬盘等可以存储东西的实体。Java里面的内存模型，是个逻辑结构，不是真正的物理结构，毕竟是要编译一次到处运行的，不可能依赖具体的物理结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653277154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81060,"user_name":"小呆娃","can_delete":false,"product_type":"c1","uid":1252131,"ip_address":"","ucode":"ECAB1883E1C701","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/UPGlgUiaSPVEhqiboDqkTMY1oGAImROZRfyrCvnVfvDKrpaaQ15qBZsEn3Q83mKYYyiaUDib3qsyV31VlRqUibpjUmQ/132","comment_is_top":false,"comment_ctime":1553787846,"is_pvip":false,"replies":[{"id":"29458","content":"恭喜找到适合自己的专栏！<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553833833,"ip_address":"","comment_id":81060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553787846","product_id":100023901,"comment_content":"哈哈第一次留言，是真心觉得老师的这些文章讲得很通俗易懂，特别好，等新电脑到了就重学一边，记笔记，多思考。期待后面的内容……PS：这是我买的8个专栏里面最喜欢也是觉得讲得最后好的一个😄","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445064,"discussion_content":"恭喜找到适合自己的专栏！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553833833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81058,"user_name":"Z听风逝夜","can_delete":false,"product_type":"c1","uid":1401040,"ip_address":"","ucode":"5DB8E0766D590E","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/d0/76dd7348.jpg","comment_is_top":false,"comment_ctime":1553787263,"is_pvip":false,"replies":[{"id":"29459","content":"感谢信任，我继续保持😂<br>","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553833876,"ip_address":"","comment_id":81058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553787263","product_id":100023901,"comment_content":"由浅入深，讲的很到位，希望老师可以继续保持。每章都跟，受益匪浅","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445063,"discussion_content":"感谢信任，我继续保持😂\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553833876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81045,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1553784085,"is_pvip":false,"replies":[{"id":"29494","content":"计算出执行io的时间，总时间减去io的时间，就是cpu时间了。最简单的就是打日志","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1553907407,"ip_address":"","comment_id":81045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553784085","product_id":100023901,"comment_content":"老师您好，问的问题可能有些小白。就是程序io耗时跟cpu耗时，如何统计出来？能概括的说一下吗？或者给出相应的博客参考","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445058,"discussion_content":"计算出执行io的时间，总时间减去io的时间，就是cpu时间了。最简单的就是打日志","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553907407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80870,"user_name":"萧一狼","can_delete":false,"product_type":"c1","uid":1266160,"ip_address":"","ucode":"35CC9C8FC8DDD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/f0/9b7d40fc.jpg","comment_is_top":false,"comment_ctime":1553745196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553745196","product_id":100023901,"comment_content":"赞，前面的问题很多都不确定，现在一起梳理一边就清晰很多","like_count":0},{"had_liked":false,"id":80806,"user_name":"忠艾一生","can_delete":false,"product_type":"c1","uid":1445386,"ip_address":"","ucode":"DE8DF66F379054","user_header":"https://static001.geekbang.org/account/avatar/00/16/0e/0a/1564a5e1.jpg","comment_is_top":false,"comment_ctime":1553736673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553736673","product_id":100023901,"comment_content":"前面学的忘得差不多了","like_count":0},{"had_liked":false,"id":80753,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1553730872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553730872","product_id":100023901,"comment_content":"我要反复琢磨琢磨","like_count":0}]}