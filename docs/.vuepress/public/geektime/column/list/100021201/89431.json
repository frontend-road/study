{"id":89431,"title":"49 | 推荐系统（上）：如何实现基于相似度的协同过滤？","content":"<p>你好，我是黄申。</p><p>个性化推荐这种技术在各大互联网站点已经普遍使用了，系统会根据用户的使用习惯，主动提出一些建议，帮助他们发现一些可能感兴趣的电影、书籍或者是商品等等。在这方面，最经典的案例应该是美国的亚马逊电子商务网站，它是全球最大的B2C电商网站之一。在公司创立之初，最为出名的就是其丰富的图书品类，以及相应的推荐技术。亚马逊的推荐销售占比可以达到整体销售的30%左右。可见，对于公司来说，推荐系统也是销售的绝好机会。因此，接下来的两节，我会使用一个经典的数据集，带你进行推荐系统核心模块的设计和实现。</p><h2>MovieLens数据集</h2><p>在开始之前，我们先来认识一个知名的数据集，MovieLens。你可以在它的<a href=\"http://files.grouplens.org/datasets/movielens/\">主页</a>查看详细的信息。这个数据集最核心的内容是多位用户对不同电影的评分，此外，它也包括了一些电影和用户的属性信息，便于我们研究推荐结果是不是合理。因此，这个数据集经常用来做推荐系统、或者其他机器学习算法的测试集。</p><p>时至今日，这个数据集已经延伸出几个不同的版本，有不同的数据规模和更新日期。我这里使用的是一个最新的小规模数据集，包含了600位用户对于9000部电影的约10万条评分，最后更新于2018年9月。你可以在这里下载：<a href=\"http://files.grouplens.org/datasets/movielens/ml-latest-small.zip\">http://files.grouplens.org/datasets/movielens/ml-latest-small.zip</a>。</p><!-- [[[read_end]]] --><p>解压了这个zip压缩包之后，你会看到readme文件和四个csv文件（ratings、movies、links和tags）。其中最重要的是ratings，它包含了10万条评分，每条记录有4个字段，包括userId、movieId、rating、timestamp。userId表示每位用户的id，movieId是每部电影的ID，rating是这位用户对这部电影的评分，取值为0-5分。timestamp是时间戳。而movies包含了电影的主要属性信息，title和genres分别表示电影的标题和类型，一部电影可以属于多种类型。links和tags则包含了电影的其他属性信息。我们的实验主要使用ratings和movies里的数据。</p><h2>设计的整体思路</h2><p>有了用于实验的数据，接下来就要开始考虑如何设计这个推荐系统。我在第38期讲解了什么是协同过滤推荐算法、基于用户的协同过滤和基于物品的协同过滤。这一节我们就以协同过滤为基础，分别实现基于用户和物品的过滤。</p><p>根据协同过滤算法的核心思想，整个系统可以分为三个大的步骤。</p><p>第一步，用户评分的标准化。因为有些用户的打分比较宽松，而有些用户打分则比较挑剔。所以，我们需要使用标准化或者归一化，让不同用户的打分具有可比性，这里我会使用<strong>z分数</strong>标准化。</p><p>第二步，衡量和其他用户或者物品之间的相似度。我们这里的物品就是电影。在基于用户的过滤中，我们要找到相似的用户。在基于物品的过滤中，我们要找到相似的电影。我这里列出计算用户之间相似度$us$和物品之间相似度$is$的公式。之前我们讲过，这些都可以通过矩阵操作来实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/ec/8e002cc0e287f675221e42df5c249fec.png?wh=794*158\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/3c/2b/3c04082d6f87f9268eceb65cb624892b.png?wh=812*154\" alt=\"\"></p><p>我们以基于用户的过滤为例。假设我们使用夹角余弦来衡量相似度，那么我们就可以采用用户评分的矩阵点乘自身的转置来计算余弦夹角。用户评分的矩阵$X$中，每一行是某位用户的行向量，每个分量表示这位用户对某部电影的打分。而矩阵$X’$的每一列是某个用户的列向量，每个分量表示用户对某部电影的打分。</p><p>我们假设$XX’$的结果为矩阵$Y$，那么$y_{i,j}$就表示用户$i$和用户$j$这两者喜好度向量的点乘结果，它就是夹角余弦公式中的分子。如果$i$等于$j$，那么这个计算值也是夹角余弦公式分母的一部分。从矩阵的角度来看，$Y$中任何一个元素都可能用于夹角余弦公式的分子，而对角线上的值会用于夹角余弦公式的分母。因此，我们可以利用$Y$来计算任何两个用户之间的相似度。</p><p>之前我们使用了一个示例讲解过对于基于用户的协同过滤，如何计算矩阵$Y$，以及如何使用$Y$来计算余弦夹角，我这里列出来给你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/79/2b/79e7065dade1b1a4d38639bb9d2cea2b.png?wh=984*964\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/9d/42/9ddfe8b7874d9d708fa367ccca967942.png?wh=1768*1028\" alt=\"\"></p><p>第三步，根据相似的用户或物品，给出预测的得分p。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/29/0ace6bd5295a83ab6da8f5357a755929.png?wh=306*210\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/8e/23/8e170042ec88bdf48908ea0bdc2d7423.png?wh=282*200\" alt=\"\"></p><p>之前我们也解释过如何使用矩阵操作来实现这一步。还是以基于用户的过滤为例。假设通过第二步，我们已经得到用户相似度矩阵$US$，$US$和评分矩阵$X$的点乘结果为矩阵$USP$。沿用前面的示例，结果就是下面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/1f/65ff214ce18ccc12193bf17cd1ec201f.png?wh=1108*468\" alt=\"\"></p><p>然后对$US$按行求和，获得矩阵$USR$。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/0e/28c5469d3fcacda96604f66dfc883a0e.png?wh=852*330\" alt=\"\"></p><p>最终，我们使用$USP$和$USR$的元素对应除法，就可以求得任意用户对任意电影的评分矩阵$P$。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/c8/eba06795db612c7be96118b9fa93cfc8.png?wh=1452*592\" alt=\"\"></p><p>有了这个设计的思路，下面我们就可以使用Python进行实践了。</p><h2>核心Python代码</h2><p>在实现上述设计的三个主要步骤之前，我们还需要把解压后的csv文件加载到数组，并转为矩阵。下面我列出了主要的步骤和注释。需要注意的是，由于这个数据集中的用户和电影ID都是从1开始而不是从0开始，所以需要减去1，才能和Python数组中的索引一致。</p><pre><code>import pandas as pd\nfrom numpy import *\n\n\n# 加载用户对电影的评分数据\ndf = pd.read_csv(&quot;/Users/shenhuang/Data/ml-latest-small/ratings.csv&quot;)\n\n\n# 获取用户的数量和电影的数量\nuser_num = df[&quot;userId&quot;].max()\nmovie_num = df[&quot;movieId&quot;].max()\n\n\n# 构造用户对电影的二元关系矩阵\nuser_rating = [[0.0] * movie_num for i in range(user_num)]\n\n\ni = 0\nfor index, row in df.iterrows():   # 获取每行的index、row\n\n\n  # 由于用户和电影的ID都是从1开始，为了和Python的索引一致，减去1\n  userId = int(row[&quot;userId&quot;]) - 1\n  movieId = int(row[&quot;movieId&quot;]) - 1\n\n\n  # 设置用户对电影的评分\n  user_rating[userId][movieId] = row[&quot;rating&quot;]\n\n\n  # 显示进度\n  i += 1\n  if i % 10000 == 0:\n    print(i)\n\n\n# 把二维数组转化为矩阵\nx = mat(user_rating)\nprint(x)\n</code></pre><p>加载了数据之后，第一步就是对矩阵中的数据，以行为维度，进行标准化。</p><pre><code># 标准化每位用户的评分数据\nfrom sklearn.preprocessing import scale\n\n\n# 对每一行的数据，进行标准化\nx_s = scale(x, with_mean=True, with_std=True, axis=1)\nprint(&quot;标准化后的矩阵：&quot;, x_s)\n</code></pre><p>第二步是计算表示用户之间相似度的矩阵US。其中，y变量保存了矩阵X左乘转置矩阵X’的结果。而利用y变量中的元素，我们很容易就可以得到不同向量之间的夹角余弦。</p><pre><code># 获取XX'\ny = x_s.dot(x_s.transpose())\nprint(&quot;XX'的结果是'：&quot;, y)\n\n\n# 获得用户相似度矩阵US\nus = [[0.0] * user_num for i in range(user_num)]\nfor userId1 in range(user_num):\n    for userId2 in range(user_num):\n        # 通过矩阵Y中的元素，计算夹角余弦\n        us[userId1][userId2] = y[userId1][userId2] / sqrt((y[userId1][userId1] * y[userId2][userId2]))\n\n</code></pre><p>在最后一步中，我们就可以进行基于用户的协同过滤推荐了。需要注意的是，我们还需要使用元素对应的除法来实现归一化。</p><pre><code># 通过用户之间的相似度，计算USP矩阵\nusp = mat(us).dot(x_s)\n\n\n# 求用于归一化的分母\nusr = [0.0] * user_num\nfor userId in range(user_num):\n    usr[userId] = sum(us[userId])\n\n\n# 进行元素对应的除法，完成归一化\np = divide(usp, mat(usr).transpose())\n</code></pre><p>我们可以来看一个展示推荐效果的例子。在原始的评分数据中，我们看到ID为1的用户并没有对ID为2的电影进行评分。而在最终的矩阵P中，我们可以看出系统对用户1给电影2的评分做出了较高的预测，换句话说，系统认为用户1很可能会喜好电影2。进一步研究电影的标题和类型，我们会发现用户1对《玩具总动员》（1995年）这类冒险类和动作类的题材更感兴趣，所以推荐电影2《勇敢者的游戏》（1995年）也是合理的。</p><h2>总结</h2><p>在今天的内容中，我通过一个常用的实验数据，设计并实现了最简单的基于用户的协同过滤。我们最关心的是这个数据中，用户对电影的评分。有了这种二元关系，我们就能构建矩阵，并通过矩阵的操作来发现用户或物品之间的相似度，并进行基于用户或者物品的协同过滤。对于最终的计算结果，你可以尝试分析针对不同用户的推荐，看看协同过滤推荐的效果是不是合理。</p><p>在你分析推荐结果的时候，可能会参考movie.csv这个文件中所描述的电影类型。这些电影类型都是一开始人工标注好的。那么，有没有可能在没有这种标注数据的情况下，在一定程度上自动分析哪些电影属于同一个或者近似的类型呢？如果可以，有没有可能在这种自动划分电影类型的基础之上，给出电影的推荐呢？下一节，我会通过SVD奇异值分解，来进行这个方向的尝试。</p><h2>思考题</h2><p>今天我使用Python代码实现了基于用户的协同过滤。类似地，我们也可以采用矩阵操作来实现基于物品的协同过滤，请使用你擅长的语言来实现试试。</p><p>欢迎留言和我分享，也欢迎你在留言区写下今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</p>","comments":[{"had_liked":false,"id":88065,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1555832925,"is_pvip":false,"replies":[{"id":"31699","content":"感谢代码的优化🙏","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555885616,"ip_address":"","comment_id":88065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35915571293","product_id":100021201,"comment_content":"# 优化了一下，运行时间减少一半以上<br># https:&#47;&#47;github.com&#47;qinggeouye&#47;GeekTime&#47;blob&#47;master&#47;MathematicProgrammer&#47;49_recommendSystem&#47;lesson49_2.py<br><br>import numpy as np<br>import pandas as pd<br>from sklearn.preprocessing import scale<br>import time<br><br>&quot;&quot;&quot;<br>对 lesson49_1.py 优化：矩阵操作<br>&quot;&quot;&quot;<br># 运行开始时间<br>time_start = time.time()<br><br># 加载用户对电影对评分数据<br>df = pd.read_csv(&quot;ml-latest-small&#47;ratings.csv&quot;)<br><br># 获取用户对数量和电影对数量<br>user_num = df[&quot;userId&quot;].max()<br>movie_num = df[&quot;movieId&quot;].max()<br><br># 构造用户对电影的二元关系矩阵<br>user_rating = np.zeros((user_num, movie_num))<br># 由于用户和电影的 ID 都是从 1 开始，为了和 Python 的索引一致，减去 1<br>df[&quot;userId&quot;] = df[&quot;userId&quot;] - 1<br>df[&quot;movieId&quot;] = df[&quot;movieId&quot;] - 1<br>for index in range(user_num):<br>    user_rating[index][df[df[&quot;userId&quot;] == index][&quot;movieId&quot;]] = df[df[&quot;userId&quot;] == index][&quot;rating&quot;]<br><br># 把二维数组转化为矩阵<br>x = np.mat(user_rating)<br># 对每一行对数据，进行标准化<br>x_s = scale(x, with_mean=True, with_std=True, axis=1)<br><br># 获取 XX&#39;<br>y = x_s.dot(x_s.transpose())<br># 夹角余弦的分母<br>v = np.zeros((np.shape(y)[0], np.shape(y)[1]))<br>v[:] = np.diag(y)<br># 获用户相似度矩阵 US , 对应位置上元素相除<br>us = y&#47;v<br><br># 通过用户之间的相似度，计算 USP 矩阵<br>usp = np.mat(us).dot(x_s)<br><br># 求用于归一化的分母 按行求和<br>usr = np.sum(us, axis=1)<br><br># 进行元素对应的除法 归一化<br>p = np.divide(usp, np.mat(usr).transpose())<br><br># 运行结束时间<br>time_end = time.time()<br><br>print(p)<br>print(np.shape(p))<br><br>print(&quot;程序运行耗时：&quot;, time_end - time_start)<br>","like_count":8,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447709,"discussion_content":"感谢代码的优化🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555885616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358088,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663903942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663903942","product_id":100021201,"comment_content":"推荐系统1学习","like_count":0},{"had_liked":false,"id":317454,"user_name":"呵呵","can_delete":false,"product_type":"c1","uid":1009759,"ip_address":"","ucode":"AB503E8DCA0752","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erIBYBQl9STN6IENoMFcMibp9cP4PeeRjIzO3J45rXoTfWor9NwmicC075mut1gVe47Wic0JScNY54Qg/132","comment_is_top":false,"comment_ctime":1634801824,"is_pvip":false,"replies":[{"id":"115686","content":"US矩阵表示用户和用户之间的相似程度，对于给定某个用户a，我们认为他&#47;她和其他用户b,c,d...n的相似度分别是0.1, 0.05, 0.3, 0.01...，这样用它左乘原始的评分矩阵X，就能得到基于这些权重，以及b,c,d...n这些人对物品评分的一个加权平均，而用这个加权平均作为给定用户a对该物品的综合评分。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1635638276,"ip_address":"","comment_id":317454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634801824","product_id":100021201,"comment_content":"不太理解USP这个矩阵的具体意义是什么，黄老师能不能给解释一下","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528822,"discussion_content":"US矩阵表示用户和用户之间的相似程度，对于给定某个用户a，我们认为他/她和其他用户b,c,d...n的相似度分别是0.1, 0.05, 0.3, 0.01...，这样用它左乘原始的评分矩阵X，就能得到基于这些权重，以及b,c,d...n这些人对物品评分的一个加权平均，而用这个加权平均作为给定用户a对该物品的综合评分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635638276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271494,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1609666122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609666122","product_id":100021201,"comment_content":"思考题：<br>基于物品的协同过滤的代码实现：<br><br># 前面的初始化步骤和评分标准化步骤和老师写的基于用户的协同过滤一致，不再重复<br># 第一步：计算表示物品之间相似度的矩阵 IS<br># 由于内存不够，这里取所有用户对前100部电影的评价信息<br>x2_s = x_s[:,0:100]<br>x2_s<br># 获取X&#39;X<br>y = (x2_s.transpose()).dot(x2_s)<br>print(&quot;X&#39;X的结果是&#39;：&quot;, y)<br><br><br># 获得物品相似度矩阵IS<br>IS = [[0.0] * movie_num for i in range(movie_num)]<br>for movieId1 in range(movie_num):<br>    for movieId2 in range(movie_num):<br>        # 通过矩阵Y中的元素，计算夹角余弦<br>        IS[movieId1][movieId2] = y[movieId1][movieId2] &#47; sqrt((y[movieId1][movieId1] * y[movieId2][movieId2]))<br><br># 第二步：基于物品的协同过滤推荐<br><br># 通过物品之间的相似度，计算ISP矩阵<br>ISP = x2_s.dot(mat(IS))<br><br># 求用于归一化的分母<br>ISR = [0.0] * movie_num<br>for movieId in range(movie_num):<br>    ISR[movieId] = sum(IS[movieId])<br><br># 进行元素对应的除法，完成归一化<br>p = divide(ISP, mat(ISR))<br>print(p)","like_count":0},{"had_liked":false,"id":142318,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1571349665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571349665","product_id":100021201,"comment_content":"原始推荐数据可以找出用户之间的相似度，再求出所有用户对任意电影的评价，进而补上那些原始推荐数据中没有的配对。","like_count":0},{"had_liked":false,"id":90226,"user_name":"冄～","can_delete":false,"product_type":"c1","uid":1342639,"ip_address":"","ucode":"10CE4BC3E22890","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/af/52643b27.jpg","comment_is_top":false,"comment_ctime":1556453295,"is_pvip":false,"replies":[{"id":"32345","content":"我回头仔细看一下，可能是个笔误","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1556472145,"ip_address":"","comment_id":90226,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1556453295","product_id":100021201,"comment_content":"老师好，感觉按照公式来看，USR作为分母，第一行应该是US的第一行元素求和（1+0.482+0.671＋0＝2.153），而不是USP的第一行求和（0.500+0.790+0.496=1.786）。否则会像文中一样，p矩阵每行求和为1也是因为USR这样计算导致的。代码部分usr[userId] = sum(us[userId])应该是对的。不知我理解得对不对？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448428,"discussion_content":"我回头仔细看一下，可能是个笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556472145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1364656,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/b0/adfe237b.jpg","nickname":"洋~simon","note":"","ucode":"EEE0B25962C097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5527,"discussion_content":"笔误有没有都修正，很影响学习信心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566346905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}