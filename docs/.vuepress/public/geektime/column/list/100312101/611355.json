{"id":611355,"title":"01｜温故知新：Dubbo基础知识你掌握得如何？","content":"<p>你好，我是何辉。</p><p>任何一门学科都有它基本的知识结构，而Dubbo作为一款优秀的微服务框架，自然也有着其领域的基础知识。所谓万丈高楼平地起，想把Dubbo用得游刃有余，对基础知识的深刻理解就尤为重要了。</p><p>举一个最基础的问题：Dubbo的总体架构是什么样？一定有初学者或者面试官问过你吧，但常年忙着写业务代码逻辑，对于这样的提问，想必你是既熟悉又陌生，有种欲言又止的感觉，心里清楚却又无法一气呵成地向他人讲清楚。</p><p>没关系，今天，我们就一起来回顾Dubbo的基础知识体系，温故知新，之后我们碰到的一些异常或者问题时，就能快速定位问题归属于Dubbo的哪个角色，找准方向力求解决。</p><h2>总体架构</h2><p>我们知道，Dubbo的主要节点角色有五个：</p><ul>\n<li>Container：服务运行容器，为服务的稳定运行提供运行环境。</li>\n<li>Provider：提供方，暴露接口提供服务。</li>\n<li>Consumer：消费方，调用已暴露的接口。</li>\n<li>Registry：注册中心，管理注册的服务与接口。</li>\n<li>Monitor：监控中心，统计服务调用次数和调用时间。</li>\n</ul><p>我们画一张Dubbo的总体架构示意图，你可以清楚地看到每个角色大致的交互方式：</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/80/3ce4ae4685e533094598a4608aa6dd80.jpg?wh=1920x1136\" alt=\"图片\"></p><p>对于一个Dubbo项目来说，我们首先会从提供方进行工程创建（第 ① 步），并启动工程（第 ② 步）来进行服务注册（第 ③ 步），接着会进行消费方的工程创建（第 ④ 步）并启动订阅服务（第 ⑤ 步）来发起调用（第 ⑥ 步），到这里，消费方就能顺利调用提供方了。</p><!-- [[[read_end]]] --><p>消费方在运行的过程中，会感知注册中心的服务节点变更（第 ⑦ 步），最后消费方和提供方将调用的结果指标同步至监控中心（第 ⑧⑨ 步）。</p><p>在这样的完整流程中，<strong>每个角色在Dubbo架构体系中具体起到了什么样的作用？每一步我们有哪些操作注意点呢？</strong>带着问题，我们通过实操来仔细分析。</p><h3>1. Container 服务运行容器</h3><p>首先，提供方、消费方的正常运转，离不开一个大前提——运行的环境。</p><p>我们需要一个容器来承载应用的运行，可以是 Tomcat 容器，也可以是 Jetty 容器，还可以是 Undertow 容器等等，只要能负责启动、加载，并运行服务提供者来提供服务就可以了。</p><h3>2. Provider 提供方</h3><p>有了Container为服务的稳定运行提供环境后，我们就可以开始新建工程了。</p><p><strong>第 ① 步</strong>，先自己新建一个提供方的工程，引用一个 facade.jar 包来对外暴露服务，编写的关键代码如下：</p><pre><code class=\"language-java\">///////////////////////////////////////////////////\n// 提供方应用工程的启动类\n///////////////////////////////////////////////////\n// 导入启动提供方所需要的Dubbo XML配置文件\n@ImportResource(\"classpath:dubbo-04-xml-boot-provider.xml\")\n// SpringBoot应用的一键式启动注解\n@SpringBootApplication\npublic class Dubbo04XmlBootProviderApplication {\n    public static void main(String[] args) {\n        // 调用最为普通常见的应用启动API\n        SpringApplication.run(Dubbo04XmlBootProviderApplication.class, args);\n        // 启动成功后打印一条日志\n        System.out.println(\"【【【【【【 Dubbo04XmlBootProviderApplication 】】】】】】已启动.\");\n    }\n}\n\n///////////////////////////////////////////////////\n// 提供方应用工程的Dubbo XML配置文件内容：dubbo-04-xml-boot-provider.xml\n///////////////////////////////////////////////////\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo\n       http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"&gt;\n    &lt;!-- 注册中心的地址，通过 address 填写的地址提供方就可以联系上 zk 服务 --&gt;\n    &lt;dubbo:registry address=\"zookeeper://127.0.0.1:2181\"&gt;&lt;/dubbo:registry&gt;\n    &lt;!-- 提供者的应用服务名称 --&gt;\n    &lt;dubbo:application name=\"dubbo-04-xml-boot-provider\"&gt;&lt;/dubbo:application&gt;\n    &lt;!-- 提供者需要暴露服务的协议，提供者需要暴露服务的端口 --&gt;\n    &lt;dubbo:protocol name=\"dubbo\" port=\"28040\"&gt;&lt;/dubbo:protocol&gt;\n    &lt;!-- 提供者暴露服务的全路径为 interface 里面的内容 --&gt;\n    &lt;dubbo:service interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"\n                   ref=\"demoFacade\"&gt;&lt;/dubbo:service&gt;\n    &lt;!-- 提供者暴露服务的业务实现逻辑的承载体 --&gt;\n    &lt;bean id=\"demoFacade\" class=\"com.hmilyylimh.cloud.xml.demo.DemoFacadeImpl\"&gt;&lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre><p>将提供方应用启动的代码、Dubbo配置文件内容编写好后，就准备<strong>第 ② 步</strong>启动了。</p><p>如果你现在运行 Dubbo04XmlBootProviderApplication&nbsp;启动类，会直接遇到非法状态异常：</p><pre><code class=\"language-xml\">java.lang.IllegalStateException: java.lang.IllegalStateException: zookeeper not connected\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.prepareEnvironment(DefaultApplicationDeployer.java:678) ~[dubbo-3.0.7.jar:3.0.7]\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.startConfigCenter(DefaultApplicationDeployer.java:261) ~[dubbo-3.0.7.jar:3.0.7]\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.initialize(DefaultApplicationDeployer.java:185) ~[dubbo-3.0.7.jar:3.0.7]\n</code></pre><p>这是因为不做任何超时时间设置时，ConfigCenterConfig#checkDefault 方法中会默认超时时间为<strong>30秒</strong>，然后将“30秒”传给 CuratorFramework 让它在有限的时间内连接上注册中心，若30秒还没有连接上的话，就抛出了这里你看到的非法状态异常，提示 <code>zookeeper not connected</code>，表示注册中心没有连接上。</p><p>所以接下来我们需要做的就是，自己启动一个 ZooKeeper 注册中心，然后再次运行启动类，就能看到启动成功的打印信息：</p><pre><code class=\"language-markdown\">2022-11-11 23:57:27.261&nbsp; INFO 12208 --- [&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;main] .h.c.x.Dubbo04XmlBootProviderApplication : Started Dubbo04XmlBootProviderApplication in 5.137 seconds (JVM running for 6.358)\n2022-11-11 23:57:27.267&nbsp; INFO 12208 --- [pool-1-thread-1] .b.c.e.AwaitingNonWebApplicationListener :&nbsp; [Dubbo] Current Spring Boot Application is await...\n【【【【【【 Dubbo04XmlBootProviderApplication 】】】】】】已启动.\n</code></pre><p>接下来的<strong>第 ③ 步</strong>是在提供方启动的过程中进行的。启动成功后，你可以通过 ZooKeeper 中自带的 zkCli.cmd 或 zkCli.sh 连上注册中心，查看提供方在注册中心留下了哪些痕迹，如图：</p><p><img src=\"https://static001.geekbang.org/resource/image/66/94/669e2bdb93b579498fc5547168698194.png?wh=1920x1038\" alt=\"图片\"></p><p>通过 <code>ls /</code> 查看根目录，我们发现 Dubbo 注册了两个目录，/dubbo 和 /services 目录：</p><p><img src=\"https://static001.geekbang.org/resource/image/03/10/03e12e64bb379302175e35dfae696310.jpg?wh=1920x1053\" alt=\"图片\"></p><p>这是 Dubbo 3.x 推崇的一个应用级注册新特性，在不改变任何 Dubbo 配置的情况下，可以兼容一个应用从 2.x 版本平滑升级到 3.x 版本，这个新特性主要是为了将来能支持十万甚至百万的集群实例地址发现，并且可以与不同的微服务体系实现地址发现互联互通。</p><p>但这里有个小问题了，控制提供方应用到底应该接口级注册，还是应用级注册，还是两个都注册呢？</p><p>你可以通过在提供方设置 <strong>dubbo.application.register-mode</strong> 属性来自由控制，设置的值有3 种：</p><ul>\n<li>interface：只接口级注册。</li>\n<li>instance：只应用级注册。</li>\n<li>all：接口级注册、应用级注册都会存在，同时也是默认值。</li>\n</ul><h3>3. Consumer 消费方</h3><p>提供方启动完成后，我们就可以接着新建消费方的工程了。</p><p><strong>第 ④ 步</strong>，在新建的消费方工程中，同样需要引用 facade.jar 来进行后续的远程调用，你可以参考要编写的关键代码：</p><pre><code class=\"language-java\">///////////////////////////////////////////////////\n// 消费方应用工程的启动类\n///////////////////////////////////////////////////\n// 导入启动消费方所需要的Dubbo XML配置文件\n@ImportResource(\"classpath:dubbo-04-xml-boot-consumer.xml\")\n// SpringBoot应用的一键式启动注解\n@SpringBootApplication\npublic class Dubbo04XmlBootConsumerApplication {\n    public static void main(String[] args) {\n        // 调用最为普通常见的应用启动API\n        ConfigurableApplicationContext ctx =\n                SpringApplication.run(Dubbo04XmlBootConsumerApplication.class, args);\n        // 启动成功后打印一条日志\n        System.out.println(\"【【【【【【 Dubbo04XmlBootConsumerApplication 】】】】】】已启动.\");\n        // 然后向提供方暴露的 DemoFacade 服务进行远程RPC调用\n        DemoFacade demoFacade = ctx.getBean(DemoFacade.class);\n        // 将远程调用返回的结果进行打印输出\n        System.out.println(demoFacade.sayHello(\"Geek\"));\n    }\n}\n\n///////////////////////////////////////////////////\n// 消费方应用工程的Dubbo XML配置文件内容：dubbo-04-xml-boot-consumer.xml\n///////////////////////////////////////////////////\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        \n       http://dubbo.apache.org/schema/dubbo        \n       http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"&gt;\n    &lt;!-- 消费者的应用服务名称，最好是大家当前应用归属的系统名称 --&gt;\n    &lt;dubbo:application name=\"dubbo-04-xml-boot-consumer\"&gt;&lt;/dubbo:application&gt;\n    &lt;!-- 注册中心的地址，通过 address 填写的地址提供方就可以联系上 zk 服务 --&gt;\n    &lt;dubbo:registry address=\"zookeeper://127.0.0.1:2181\"&gt;&lt;/dubbo:registry&gt;\n    &lt;!-- 引用远程服务 --&gt;\n    &lt;dubbo:reference id=\"demoFacade\"\n            interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n    &lt;/dubbo:reference&gt;\n&lt;/beans&gt;\n</code></pre><p>把消费方应用启动的代码、Dubbo配置文件内容编写好后，我们就准备启动了。</p><p>不过在启动之前，如果提供方还没有启动，也就是说提供方还没有发布 DemoFacade 服务，这个时候，我们启动消费方会看到这样的报错信息：</p><pre><code class=\"language-markdown\">java.lang.IllegalStateException: Failed to check the status of the service com.hmilyylimh.cloud.facade.demo.DemoFacade. No provider available for the service com.hmilyylimh.cloud.facade.demo.DemoFacade from the url consumer://192.168.100.183/com.hmilyylimh.cloud.facade.demo.DemoFacade?application=dubbo-04-xml-boot-consumer&amp;background=false&amp;dubbo=2.0.2&amp;interface=com.hmilyylimh.cloud.facade.demo.DemoFacade&amp;methods=sayHello,say&amp;pid=11876&amp;qos.enable=false&amp;register.ip=192.168.100.183&amp;release=3.0.7&amp;side=consumer&amp;sticky=false&amp;timestamp=1668219196431 to the consumer 192.168.100.183 use dubbo version 3.0.7\n\tat org.apache.dubbo.config.ReferenceConfig.checkInvokerAvailable(ReferenceConfig.java:545) ~[dubbo-3.0.7.jar:3.0.7]\n\tat org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:293) ~[dubbo-3.0.7.jar:3.0.7]\n\tat org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:219) ~[dubbo-3.0.7.jar:3.0.7]\n</code></pre><p>又看到了非法状态异常的类，告诉我们检查 DemoFacade 的状态失败了，并提示 <code>No provider available</code> 说明还暂时没有提供者，导致消费方无法启动成功。</p><p>怎么解决这个问题呢？我们可以考虑 3 种方案：</p><ul>\n<li>方案1：将提供方应用正常启动起来即可。</li>\n<li>方案2：可以考虑在消费方的Dubbo XML配置文件中，为 DemoFacade 服务添加 <code>check=\"false\"</code> 的属性，来达到启动不检查服务的目的，即：</li>\n</ul><pre><code class=\"language-markdown\">&lt;!-- 引用远程服务 --&gt;\n&lt;dubbo:reference id=\"demoFacade\" check=\"false\"\n        interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n&lt;/dubbo:reference&gt;\n</code></pre><ul>\n<li>方案3：也可以考虑在消费方的Dubbo XML配置文件中，为整个消费方添加 <code>check=\"false\"</code> 的属性，来达到启动不检查服务的目的，即：</li>\n</ul><pre><code class=\"language-markdown\">&lt;!-- 为整个消费方添加启动不检查提供方服务是否正常 --&gt;\n&lt;dubbo:consumer check=\"false\"&gt;&lt;/dubbo:consumer&gt;\n</code></pre><p>这 3 种方法，我们结合实际日常开发过程分析一下。</p><p>方案1，耦合性太强，因为提供方没有发布服务而导致消费方无法启动，有点说不过去。</p><p>方案2，需要针对指定的服务级别设置“启动不检查”，但一个消费方工程，会有几十上百甚至上千个提供方服务配置，一个个设置起来特别麻烦，而且一般我们也很少会逐个设置。</p><p>方案3，是我们比较常用的一种设置方式，保证不论提供方的服务处于何种状态，都不能影响消费方的启动，而且只需要一条配置，没有方案2需要给很多个提供方服务挨个配置的困扰。</p><p>不过这里为了正常演示，我们还是按照方案1中规中矩的方式来，先把提供方应用启动起来，再启动消费方，接下来你就能看到消费方启动成功的日志打印信息，并且也成功调用了提供方的服务，日志信息就是这样：</p><pre><code class=\"language-markdown\">2022-11-12 10:38:18.758&nbsp; INFO 11132 --- [pool-1-thread-1] .b.c.e.AwaitingNonWebApplicationListener :&nbsp; [Dubbo] Current Spring Boot Application is await...\n【【【【【【 Dubbo04XmlBootConsumerApplication 】】】】】】已启动.\nHello Geek, I'm in 'dubbo-04-xml-boot-provider' project.\n</code></pre><p>现在，消费方能成功启动了，接下来就要去注册中心订阅服务了，也就是<strong>第 ⑤ 步</strong>，这一步也是在消费方启动的过程中进行的。启动成功后，你可以通过 ZooKeeper 中自带的 zkCli.cmd 或 zkCli.sh 连上注册中心，查看消费方在注册中心留下了哪些痕迹：</p><p><img src=\"https://static001.geekbang.org/resource/image/85/b3/85e9d1b4d506c3379250c0cf1420c4b3.png?wh=1920x1043\" alt=\"图片\"></p><p>我们发现消费方也会向注册中心写数据，通过 <code>ls /dubbo/metadata/com.hmilyylimh.cloud.facade.demo.DemoFacade</code> 可以看到，有 consumer 目录，还有对应的消费方 URL 注册信息，<strong>所以通过一个 interface，我们就能从注册中心查看有哪些提供方应用节点、哪些消费方应用节点</strong>。</p><p>而前面提到 Dubbo 3.x 推崇的一个应用级注册新特性，在消费方侧也存在如何抉择的问题，到底是订阅接口级注册信息，还是订阅应用级注册信息呢，还是说有兼容方案？</p><p><img src=\"https://static001.geekbang.org/resource/image/22/b0/2215cc5288f326853f77c3aabc9c23b0.jpg?wh=1920x1053\" alt=\"图片\"></p><p>其实Dubbo也为我们提供了过渡的兼容方案，你可以通过在消费方设置 <strong>dubbo.application.service-discovery.migration</strong> 属性来兼容新老订阅方案，设置的值同样有 3 种：</p><ul>\n<li>FORCE_INTERFACE：只订阅消费接口级信息。</li>\n<li>APPLICATION_FIRST：注册中心有应用级注册信息则订阅应用级信息，否则订阅接口级信息，起到了智能决策来兼容过渡方案。</li>\n<li>FORCE_APPLICATION：只订阅应用级信息。</li>\n</ul><p>到现在提供方完成了启动和注册，消费方完成了启动和订阅，接下来消费方就可以向提供方发起调用了，也就是<strong>第 ⑥ 步</strong>。</p><p>消费方向提供方发起远程调用的环节，调用的代码也非常简单：</p><pre><code class=\"language-java\">// 然后向提供方暴露的 DemoFacade 服务进行远程RPC调用\nDemoFacade demoFacade = ctx.getBean(DemoFacade.class);\n// 将远程调用返回的结果进行打印输出\nSystem.out.println(demoFacade.sayHello(\"Geek\"));\n</code></pre><p>区区两行代码，就跨越了网络从提供方那边拿到了结果，非常方便简单。</p><p>不过总有调用不顺畅的时候，尤其是在提供方服务有点耗时的情况下，你可能会遇到这样的异常信息：</p><pre><code class=\"language-java\">Exception in thread \"main\" org.apache.dubbo.rpc.RpcException: Failed to invoke the method sayHello in the service com.hmilyylimh.cloud.facade.demo.DemoFacade. Tried 3 times of the providers [192.168.100.183:28040] (1/1) from the registry 127.0.0.1:2181 on the consumer 192.168.100.183 using the dubbo version 3.0.7. Last error is: Invoke remote method timeout. method: sayHello, provider: DefaultServiceInstance{serviceName='dubbo-04-xml-boot-provider', host='192.168.100.183', port=28040, enabled=true, healthy=true, metadata={dubbo.endpoints=[{\"port\":28040,\"protocol\":\"dubbo\"}], dubbo.metadata-service.url-params={\"connections\":\"1\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.0.7\",\"side\":\"provider\",\"port\":\"28040\",\"protocol\":\"dubbo\"}, dubbo.metadata.revision=7c65b86f6f680876cbb333cb7c92c6f6, dubbo.metadata.storage-type=local}}, service{name='com.hmilyylimh.cloud.facade.demo.DemoFacade',group='null',version='null',protocol='dubbo',params={side=provider, application=dubbo-04-xml-boot-provider, release=3.0.7, methods=sayHello,say, background=false, deprecated=false, dubbo=2.0.2, dynamic=true, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, service-name-mapping=true, generic=false, anyhost=true},}, cause: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:114)\n\tat org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:340)\n\t... 36 more\nCaused by: java.util.concurrent.ExecutionException: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)\n\tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2093)\n\t... 24 more\nCaused by: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.doReceived(DefaultFuture.java:212)\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.received(DefaultFuture.java:176)\n\t... 29 more\n</code></pre><p>首先是 RpcException 远程调用异常，发现 <code>Tried 3 times</code> 尝试了 3 次调用仍然拿不到结果。再看 TimeoutException 异常类，<code>client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms</code>，提示消费方在有限的 1000ms 时间内未拿到提供方的响应而超时了。</p><p>源码中默认的超时时间，可以从这段代码中查看，是 1000ms：</p><pre><code class=\"language-java\">private DefaultFuture(Channel channel, Request request, int timeout) {\n    // 省略了其他逻辑代码\n    // 源码中 int DEFAULT_TIMEOUT = 1000 是这样的默认值\n    // 重点看这里，这里当任何超时时间未设置时，就采用源码中默认的 1000ms 为超时时效\n    this.timeout = timeout &gt; 0 ? timeout : channel.getUrl().getPositiveParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);\n    // 省略了其他逻辑代码\n}\n</code></pre><p>对于这种情况，如果你预估可以稍微把超时时间设置长一点，可以在消费方的Dubbo XML配置文件中，为 DemoFacade 服务添加 <code>timeout=\"5000\"</code> 的属性，来达到设置超时时间为5000ms 的目的，即：</p><pre><code class=\"language-xml\">&lt;!-- 引用远程服务 --&gt;\n&lt;dubbo:reference id=\"demoFacade\" timeout=\"5000\"\n        interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n&lt;/dubbo:reference&gt;\n</code></pre><p>正常情况下5000ms足够了，但有些时候网络抖动延时增大，需要稍微重试几次，你可以继续设置 <code>retries=\"3\"</code> 来多重试3次，即：</p><pre><code class=\"language-xml\">&lt;!-- 引用远程服务 --&gt;\n&lt;dubbo:reference id=\"demoFacade\" timeout=\"5100\" retries=\"3\"\n        interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n&lt;/dubbo:reference&gt;\n</code></pre><p>除了网络抖动影响调用，更多时候可能因为有些服务器故障了，比如消费方调着调着，提供方突然就挂了，消费方如果换台提供方，继续重试调用一下也许就正常了，所以你可以继续设置 <code>cluster=\"failover\"</code> 来进行故障转移，比如：</p><pre><code class=\"language-xml\">&lt;!-- 引用远程服务 --&gt;\n&lt;dubbo:reference id=\"demoFacade\" cluster=\"failover\" timeout=\"5000\" retries=\"3\"\n        interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n&lt;/dubbo:reference&gt;\n</code></pre><p>当然故障转移只是一种手段，目的是当调用环节遇到一些不可预估的故障时，尽可能保证服务的正常运行，就好比这样的调用形式：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/8f/793b5bc7f73ebf15682ef13c3a98e08f.png?wh=1920x1085\" alt=\"图片\"></p><p>Dubbo 框架为了尽可能保障运行，除了有 failover 故障转移策略，还有许多的容错策略，我们常用的比如：</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/4c/ae256185d0af78127a45eda3b0279d4c.jpg?wh=1920x1469\" alt=\"图片\"></p><p>容错设置帮我们尽可能保障服务稳定调用，但调用也有流量高低之分，流量低的时候可能你发现不了什么特殊情况，一旦流量比较高，你可能会发现提供方总是有那么几台服务器流量特别高，另外几个服务器流量特别低。</p><p>这是因为Dubbo默认使用的是 <code>loadbalance=\"random\"</code> 随机类型的负载均衡策略，为了尽可能雨露均沾调用到提供方各个节点，你可以继续设置 <code>loadbalance=\"roundrobin\"</code> 来进行轮询调用，比如：</p><pre><code class=\"language-xml\">&lt;!-- 引用远程服务 --&gt;\n&lt;dubbo:reference id=\"demoFacade\" loadbalance=\"roundrobin\"\n        interface=\"com.hmilyylimh.cloud.facade.demo.DemoFacade\"&gt;\n&lt;/dubbo:reference&gt;\n</code></pre><p>你发现了吗，一个简单的远程RPC调用，我们在梳理的过程中联想到了各式各样的考量因素。感兴趣的话，你可以研究 &lt;dubbo:reference/&gt;、&lt;dubbo:method/&gt; 这 2 个标签，能发现很多让你意想不到的有趣属性。</p><p>到这里调用就完成了，很多人会认为，当消费方能调用提供方就没其他角色什么事了。如果这样想，可就大错特错。我们继续看最后两个关键节点：Registry 注册中心、Monitor 监控中心。</p><h3>4. Registry 注册中心</h3><p>前面我们只是新增并注册了一个提供方，当我们逐渐增加节点的时候：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/b0/cd66e36fdb6e3196bcd581c400c59bb0.png?wh=1920x842\" alt=\"图片\"></p><p>提供方节点在增加，/dubbo 和 /services 目录的信息也会随之增多，那消费方怎么知道提供方有新节点增加了呢？</p><p>这就需要注册中心出场了。注册中心之所以成为一个注册的集中地带，有着它不可或缺的责任。当服务新增或减少，其实，Dubbo默认的注册中心ZooKeeper有另外一层通知机制，也就是<strong>第 ⑦ 步。</strong></p><p>比如 DemoFacade 有新的提供方节点启动了，那么 <code>/dubbo/com.hmilyylimh.cloud.facade.demo.DemoFacade/providers</code> 目录下会留下新节点的 URL 痕迹，也就相当于 <code>/dubbo/com.hmilyylimh.cloud.facade.demo.DemoFacade</code> 目录节点有变更。</p><p>ZooKeeper 会将目录节点变更的事件通知给到消费方，然后消费方去 ZooKeeper 中拉取 DemoFacade 最新的所有提供方的节点信息放到消费方的本地，这样消费方就能自动感知新的提供方节点的存在了。</p><h3>5. Monitor 监控中心</h3><p>服务调用失败不可避免，当服务的调用成功或者失败时，机器本身或者使用功能的用户是能感知到的，那我们怎么在第一时间察觉某些服务是否出了问题了呢？<br>\n<img src=\"https://static001.geekbang.org/resource/image/49/fa/4960177e503aaa4f434a0fdf182d7bfa.png?wh=2872x1263\" alt=\"\"></p><p>不管是提供方服务，还是消费方服务，如果在处理调用过程中发生了异常，可以将服务的调用成功数、失败数、服务调用的耗时时间上送给监控中心，也就是<strong>第 ⑧⑨ 步</strong>。</p><p>这样一来，我们通过在监控中心设置不同的告警策略，就能在第一时间感知到一些异常问题的存在，争取在用户上报问题之前尽可能最快解决异常现象。</p><h2>总结</h2><p>我们通过新建一个Dubbo项目回顾了Dubbo的总体架构，主要有五个角色，Provider 暴露接口提供服务，Consumer 调用已暴露的接口，Registry 管理注册的服务与接口，Monitor 统计服务调用次数和调用时间，Container 为服务的稳定运行提供运行环境。</p><p>今天只是把各个环节涉及的基础知识点粗略过了一遍，如果你对每个环节的细节存有疑问，也不用担心，后面我们会深入学习。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3c/80/3ce4ae4685e533094598a4608aa6dd80.jpg?wh=1920x1136\" alt=\"\"></p><p>这里也总结一下今天涉及的基础知识点，你可以边看边回顾：<br>\n<img src=\"https://static001.geekbang.org/resource/image/02/01/021e0ae73b79665719fb1419410ef501.jpg?wh=4000x4379\" alt=\"\"></p><h3>思考题</h3><p>现在再有人问你Dubbo的总体架构是怎样的，相信你一定能从容回答。还记得今天有一段调用超时的异常信息吗？</p><pre><code class=\"language-java\">Exception in thread \"main\" org.apache.dubbo.rpc.RpcException: Failed to invoke the method sayHello in the service com.hmilyylimh.cloud.facade.demo.DemoFacade. Tried 3 times of the providers [192.168.100.183:28040] (1/1) from the registry 127.0.0.1:2181 on the consumer 192.168.100.183 using the dubbo version 3.0.7. Last error is: Invoke remote method timeout. method: sayHello, provider: DefaultServiceInstance{serviceName='dubbo-04-xml-boot-provider', host='192.168.100.183', port=28040, enabled=true, healthy=true, metadata={dubbo.endpoints=[{\"port\":28040,\"protocol\":\"dubbo\"}], dubbo.metadata-service.url-params={\"connections\":\"1\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.0.7\",\"side\":\"provider\",\"port\":\"28040\",\"protocol\":\"dubbo\"}, dubbo.metadata.revision=7c65b86f6f680876cbb333cb7c92c6f6, dubbo.metadata.storage-type=local}}, service{name='com.hmilyylimh.cloud.facade.demo.DemoFacade',group='null',version='null',protocol='dubbo',params={side=provider, application=dubbo-04-xml-boot-provider, release=3.0.7, methods=sayHello,say, background=false, deprecated=false, dubbo=2.0.2, dynamic=true, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, service-name-mapping=true, generic=false, anyhost=true},}, cause: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:114)\n\tat org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:340)\n\t... 36 more\nCaused by: java.util.concurrent.ExecutionException: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)\n\tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2093)\n\t... 24 more\nCaused by: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.doReceived(DefaultFuture.java:212)\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.received(DefaultFuture.java:176)\n\t... 29 more\n</code></pre><p>你能从异常信息中搜集出哪些有用的信息？</p><p>期待在留言区见到你，02讲文末我会给出今天思考题的参考。如果觉得今天的内容对你有帮助，也欢迎分享给身边的朋友一起讨论。我们下一讲见。</p><p>课程的代码仓库 <a href=\"https://gitee.com/ylimhhmily/GeekDubbo3Tutorial\">https://gitee.com/ylimhhmily/GeekDubbo3Tutorial</a> 。</p>","neighbors":{"left":{"article_title":"开篇词｜带你玩转Dubbo微服务框架","id":611301},"right":{"article_title":"特别放送｜Dubbo基础特性：视频带学，助你巩固基础","id":611376}},"comments":[{"had_liked":false,"id":364751,"user_name":"熊猫","can_delete":false,"product_type":"c1","uid":1080238,"ip_address":"广东","ucode":"23C85117A16BEF","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","comment_is_top":false,"comment_ctime":1671447612,"is_pvip":false,"replies":[{"id":132820,"content":"你好，熊猫：顺着你的意思，在客户端就知道有哪几种实现，是不是可以再继续抽象一层，通过 “路由标识” 到不同的实现（甚至都可以不用关心是哪个实现，只要路由标识能找到就行）。至于这个 “路由标识” 可以通过查找存储媒介形式（比如：数据库、配置中心等）来寻找对应的 “接口中具体的方法”，这样应该就可以做成一套通用的分发调用框架了（比如：智能网关）。详细的话可以去看看 “泛化调用”、“点点直连” 章节。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671451460,"ip_address":"广东","comment_id":364751,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，你好，dubbo有没有这样的功能，一个接口多种实现，根据参数(标识渠道不同)来区分最终路由到哪个实现？再或者有没有在客户端可以知道有哪几种实现？","like_count":6,"discussions":[{"author":{"id":1188220,"avatar":"https://static001.geekbang.org/account/avatar/00/12/21/7c/17f0189c.jpg","nickname":"凝成","note":"","ucode":"C4A0B725C8A009","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608403,"discussion_content":"这题我会，使用group，同一个服务的不同版本使用version隔离，同一个服务的不同实现，使用group隔离。\n例如：有一个Service，目前是通过查mysql向外提供服务的，比如叫mysqlService。\n现在因为查询性能问题，需要进行ES改造，为了避免改动业务代码，我们可以提供一个esService，与原mysqlSql同时提供服务，只不过通过group区分。\nconsumer端可以同时注入这2个provider，加一个开关，是查es还是查mysql，或者es异常的情况下去查询mysql","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678429965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597125,"discussion_content":"你好，熊猫：顺着你的意思，在客户端就知道有哪几种实现，是不是可以再继续抽象一层，通过 “路由标识” 到不同的实现（甚至都可以不用关心是哪个实现，只要路由标识能找到就行）。至于这个 “路由标识” 可以通过查找存储媒介形式（比如：数据库、配置中心等）来寻找对应的 “接口中具体的方法”，这样应该就可以做成一套通用的分发调用框架了（比如：智能网关）。详细的话可以去看看 “泛化调用”、“点点直连” 章节。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1671451460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2210082,"avatar":"https://static001.geekbang.org/account/avatar/00/21/b9/22/a1feb7e2.jpg","nickname":"有借必有贷","note":"","ucode":"B3F5F142AD71DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618709,"discussion_content":"net.sf.dubtool:dubtool 也许适合你的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684472084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2922573,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/98/4d/e67671c9.jpg","nickname":"鱼","note":"","ucode":"EC8E8665290B5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598223,"discussion_content":"好像有个注解的version属性可以做到一个接口多个实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672687404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1080238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7b/ae/66ae403d.jpg","nickname":"熊猫","note":"","ucode":"23C85117A16BEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2922573,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/98/4d/e67671c9.jpg","nickname":"鱼","note":"","ucode":"EC8E8665290B5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598224,"discussion_content":"问题的关注点是怎么自主路由到多个不同实现，不在于如何声明多版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672701395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598223,"ip_address":"四川","group_id":0},"score":598224,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597273,"discussion_content":"之前我也奇怪为什么 Dubbo 的服务不能一个接口有多个实现，原来是要放在调用方自己实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671599287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364948,"user_name":"Geek_895efd","can_delete":false,"product_type":"c1","uid":1567905,"ip_address":"湖南","ucode":"F72CF7D056C572","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL2N4mhzsvvUG8Wew1uvTHs531fsW5LfgWkv4782VtwRuMf0qicRPxWtKgIzxyFSNVKJ09FN5vcVjg/132","comment_is_top":false,"comment_ctime":1671772910,"is_pvip":false,"replies":[{"id":132892,"content":"你好，Geek_895efd：可以参考我之前对etcd的一些理解，没有更好，只有适合自己当前项目的才是最好的。\n\n比如etcd是一个年轻的go项目，同样是解决分布式协调问题，并且吸收zookeeper实现上的经验，在api的使用、实例的动态增减、数据体量的存储，且对外部语言的支持也更加友好。但是他的年轻和高速的迭代开发不免在稳定性上会使得一些大项目望而却步的考量因素。\n\n其次还得看公司的运维能力，如果运维擅长zookeeper的话那大概率就使用zookeeper了，如果运维擅长etcd的话那正好可以借此机会狠狠与真实业务实战一把。两者都擅长的话，项目求稳还是可以考虑使用传统的zookeeper的，激进的话可以考虑etcd。不过大多数项目对于好多新特性都用不着，基本的增删改查和灵活的通知机制就非常够用了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671775260,"ip_address":"湖南","comment_id":364948,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，关于注册中心部分，确实有很多选择，相对于zookeeper等，用阿里自家孵化出的nacos来做注册中心是不是更好","like_count":4,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597395,"discussion_content":"你好，Geek_895efd：可以参考我之前对etcd的一些理解，没有更好，只有适合自己当前项目的才是最好的。\n\n比如etcd是一个年轻的go项目，同样是解决分布式协调问题，并且吸收zookeeper实现上的经验，在api的使用、实例的动态增减、数据体量的存储，且对外部语言的支持也更加友好。但是他的年轻和高速的迭代开发不免在稳定性上会使得一些大项目望而却步的考量因素。\n\n其次还得看公司的运维能力，如果运维擅长zookeeper的话那大概率就使用zookeeper了，如果运维擅长etcd的话那正好可以借此机会狠狠与真实业务实战一把。两者都擅长的话，项目求稳还是可以考虑使用传统的zookeeper的，激进的话可以考虑etcd。不过大多数项目对于好多新特性都用不着，基本的增删改查和灵活的通知机制就非常够用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671775260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621507,"discussion_content":"老师etcd 的文章在哪里呀\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687274962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374919,"user_name":"Geek_327f7f","can_delete":false,"product_type":"c1","uid":2971988,"ip_address":"中国香港","ucode":"066533AC7D7927","user_header":"","comment_is_top":false,"comment_ctime":1684656654,"is_pvip":false,"replies":[{"id":137075,"content":"你好，Geek_327f7f：侧重在提供方，主要是消费方也可以不是 dubbo 服务，比如消费方直接用 Socket 请求模拟 dubbo 协议发送请求，同样可以拿到数据的。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1685617930,"ip_address":"广东","comment_id":374919,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，我觉得您这里的dubbo架构图跟dubbo官网的出入挺大的，感觉您这个架构图应该是在dubbo框架下的微服务架构而不是dubbo的架构图，不知道我的理解是否正确。而且provider和consumer都是需要一个container提供dubbo的运行环境的吧，我看您的架构图中只有provider有container而consumer并没有。","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619927,"discussion_content":"你好，Geek_327f7f：侧重在提供方，主要是消费方也可以不是 dubbo 服务，比如消费方直接用 Socket 请求模拟 dubbo 协议发送请求，同样可以拿到数据的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685617930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366666,"user_name":"Geek_244b79","can_delete":false,"product_type":"c1","uid":3293994,"ip_address":"北京","ucode":"64BC5F04D71C29","user_header":"","comment_is_top":false,"comment_ctime":1674028197,"is_pvip":false,"replies":[{"id":133604,"content":"你好，Geek_244b79：\n1.监控中心，是一个模块，可以是和应用运行在同一个进程的模块，也可以是和应用隔离开的另外一个进程(或另外一台服务器)。而监控中心，是针对数据监控的，那就势必有数据上报，既然需要上报数据，那就得分为监控中心客户端模块(负责收集监控数据上报至监控中心服务端)，监控中心服务端模块(负责分析处理监控中心客户端上报的数据)。\n\n2.注册中心的消息推送是zk服务端主动推送至zk客户端，主要是基于zk客户端与zk服务端建立了长连接机制。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1674102567,"ip_address":"湖南","comment_id":366666,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，您好，看完课程有两个疑问，1.监控中心是存在于哪里 2.注册中心的消息推送是主动推送的吗？希望老师看到可以帮忙解答，谢谢！","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600196,"discussion_content":"你好，Geek_244b79：\n1.监控中心，是一个模块，可以是和应用运行在同一个进程的模块，也可以是和应用隔离开的另外一个进程(或另外一台服务器)。而监控中心，是针对数据监控的，那就势必有数据上报，既然需要上报数据，那就得分为监控中心客户端模块(负责收集监控数据上报至监控中心服务端)，监控中心服务端模块(负责分析处理监控中心客户端上报的数据)。\n\n2.注册中心的消息推送是zk服务端主动推送至zk客户端，主要是基于zk客户端与zk服务端建立了长连接机制。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1674102567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1131268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/04/9680dade.jpg","nickname":"AcelXiao","note":"","ucode":"52AAC5D3151D82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":601164,"discussion_content":"所有信息都是服务端推送的吗，还是说服务端只推送个通知，然后让客户端主动去拉具体的详细信息","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675094164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600196,"ip_address":"广东","group_id":0},"score":601164,"extra":""},{"author":{"id":2530361,"avatar":"https://static001.geekbang.org/account/avatar/00/26/9c/39/027a87d3.jpg","nickname":"chenj","note":"","ucode":"5B9B2E63795BC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/04/9680dade.jpg","nickname":"AcelXiao","note":"","ucode":"52AAC5D3151D82","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620497,"discussion_content":"服务端发送Watch事件给客户端（推），客户端接收到通知后再去读（拉）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686216693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":601164,"ip_address":"广东","group_id":0},"score":620497,"extra":""}]}]},{"had_liked":false,"id":365084,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"广东","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1672080213,"is_pvip":false,"replies":[{"id":132931,"content":"你好，java小霸王：你的眼睛很犀利，看出了两个具有代表性的特征，非常好，为你的认真仔细点赞。\n\n异常信息中，还有蛮多的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672110876,"ip_address":"广东","comment_id":365084,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"异常信息可以看出\n1 超时机制是通过completeFutrue\n2 failover策略","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597630,"discussion_content":"你好，java小霸王：你的眼睛很犀利，看出了两个具有代表性的特征，非常好，为你的认真仔细点赞。\n\n异常信息中，还有蛮多的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672110876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364836,"user_name":"null","can_delete":false,"product_type":"c1","uid":1707648,"ip_address":"湖南","ucode":"349D599741AB88","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/80/f8f91bae.jpg","comment_is_top":false,"comment_ctime":1671590565,"is_pvip":false,"replies":[{"id":132864,"content":"你好，特别的 null 标识朋友：etcd是一个年轻的go项目，同样是解决分布式协调问题，并且吸收zookeeper实现上的经验，在api的使用、实例的动态增减、数据体量的存储，且对外部语言的支持也更加友好。但是他的年轻和高速的迭代开发不免在稳定性上会使得一些大项目望而却步的考量因素。\n\n其次还得看公司的运维能力，如果运维擅长zookeeper的话那大概率就使用zookeeper了，如果运维擅长etcd的话那正好可以借此机会狠狠与真实业务实战一把。两者都擅长的话，项目求稳还是可以考虑使用传统的zookeeper的，激进的话可以考虑etcd。不过大多数项目对于好多新特性都用不着，基本的增删改查和灵活的通知机制就非常够用了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671610002,"ip_address":"湖南","comment_id":364836,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，注册中心使用zookeeper和etcd哪个好？","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597281,"discussion_content":"你好，特别的 null 标识朋友：etcd是一个年轻的go项目，同样是解决分布式协调问题，并且吸收zookeeper实现上的经验，在api的使用、实例的动态增减、数据体量的存储，且对外部语言的支持也更加友好。但是他的年轻和高速的迭代开发不免在稳定性上会使得一些大项目望而却步的考量因素。\n\n其次还得看公司的运维能力，如果运维擅长zookeeper的话那大概率就使用zookeeper了，如果运维擅长etcd的话那正好可以借此机会狠狠与真实业务实战一把。两者都擅长的话，项目求稳还是可以考虑使用传统的zookeeper的，激进的话可以考虑etcd。不过大多数项目对于好多新特性都用不着，基本的增删改查和灵活的通知机制就非常够用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671610002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364774,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"广东","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1671465388,"is_pvip":false,"replies":[{"id":132831,"content":"慎独明强，你好：补充的非常棒，补充了我遗漏的一个，为你的细心点赞，细心是好事，可以抠出很多自己未知的细节因素，很好很棒。\n\n异常信息中，还有蛮多的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671503895,"ip_address":"广东","comment_id":364774,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"补充一点：负载均衡策略，源码里面还有ShorestResponseLoadBalance\n异常信息获取: 1) 重试次数为3，取的默认值 正常调用+重试2次  \n2） providers [192.168.100.183:28040] (1&#47;1)  providers列表为1，第一次调用就失败了\n3）集群容错策略为failOver故障转移\n4）超时时间为1000ms\n5）调用DemoFacade的sayHello方法超时\n","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597162,"discussion_content":"慎独明强，你好：补充的非常棒，补充了我遗漏的一个，为你的细心点赞，细心是好事，可以抠出很多自己未知的细节因素，很好很棒。\n\n异常信息中，还有蛮多的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671503895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373681,"user_name":"simuso","can_delete":false,"product_type":"c1","uid":1101938,"ip_address":"四川","ucode":"BF0B5C99B3B5D2","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/72/28d07654.jpg","comment_is_top":false,"comment_ctime":1683010281,"is_pvip":false,"replies":[{"id":137072,"content":"你好，simoso：能描述再具体点么？是遇到墙不通的问题呢？还是需要做下域名啥的还是啥啥啥呀？","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1685617753,"ip_address":"广东","comment_id":373681,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"为什么本地的zk连接没问题，如何连接其他服务器的zk就不行呢","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619923,"discussion_content":"你好，simoso：能描述再具体点么？是遇到墙不通的问题呢？还是需要做下域名啥的还是啥啥啥呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685617753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373525,"user_name":"天天学习","can_delete":false,"product_type":"c1","uid":1320191,"ip_address":"福建","ucode":"E62D99C6C6B29D","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/ff/c93a66ab.jpg","comment_is_top":false,"comment_ctime":1682598354,"is_pvip":false,"replies":[{"id":137071,"content":"你好，天天学习：我用的不是社区版，所以可以点进去看的～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1685617672,"ip_address":"广东","comment_id":373525,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，dubbo.application.service-discovery.migration在yml文件配置的时候为什么没有提示选项呢，也点不进这个配置，我用的dubbo是3.1.8版本的","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619922,"discussion_content":"你好，天天学习：我用的不是社区版，所以可以点进去看的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685617672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370982,"user_name":"Geek_forMySelf","can_delete":false,"product_type":"c1","uid":1571779,"ip_address":"广东","ucode":"08A13C250762DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/fb/c3/5ec01038.jpg","comment_is_top":false,"comment_ctime":1679421089,"is_pvip":false,"replies":[{"id":135820,"content":"你好，Geek_forMySelf：很 nice 的一个经典场景回答，不过也得看具体业务，如果是那种查询请求的话，幂等性与否意义不是很大；但是对于写请求的话，如果业务逻辑容忍重复数据，也做幂等性处理也无关痛痒；反而对于那种不允许重复请求导致生成重复数据的功能业务，幂等性就显得至关重要了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680792127,"ip_address":"广东","comment_id":370982,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"发生了TimeoutException应该需要provider方实现接口的幂等吧","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612591,"discussion_content":"你好，Geek_forMySelf：很 nice 的一个经典场景回答，不过也得看具体业务，如果是那种查询请求的话，幂等性与否意义不是很大；但是对于写请求的话，如果业务逻辑容忍重复数据，也做幂等性处理也无关痛痒；反而对于那种不允许重复请求导致生成重复数据的功能业务，幂等性就显得至关重要了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680792128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370167,"user_name":"Geek_698227","can_delete":false,"product_type":"c1","uid":1798484,"ip_address":"重庆","ucode":"38BCCDC6FA9BF1","user_header":"","comment_is_top":false,"comment_ctime":1678444703,"is_pvip":false,"replies":[{"id":134984,"content":"你好，Geek_698227：可以去看下 dubbo-05-stream-provider 有关的代码~","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678618749,"ip_address":"广东","comment_id":370167,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"请问有triple的内容吗","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608705,"discussion_content":"你好，Geek_698227：可以去看下 dubbo-05-stream-provider 有关的代码~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678618749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370143,"user_name":"杨老师","can_delete":false,"product_type":"c1","uid":1734888,"ip_address":"北京","ucode":"669564E5A757E0","user_header":"","comment_is_top":false,"comment_ctime":1678426659,"is_pvip":false,"replies":[{"id":134987,"content":"你好，杨老师：2.x 主要是基于【接口】粒度的服务发现机制，而 3.x 主要是基于【应用】粒度的服务发现机制，而这个【应用】粒度恰好为 Dubbo 连通其他微服务体系（SpringCloud、Kubernetes Service 等）提供了一个友好的扩展方案，打通不同微服务体系之间应用与应用注册发现机制的互联互通。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678620034,"ip_address":"广东","comment_id":370143,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"Dubbo 3.x 推崇的一个应用级注册新特性，主要是为了将来能支持十万甚至百万的集群实例地址发现，并且可以与不同的微服务体系实现地址发现互联互通。\n\n这段话该怎么理解呢？\n\n","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608712,"discussion_content":"你好，杨老师：2.x 主要是基于【接口】粒度的服务发现机制，而 3.x 主要是基于【应用】粒度的服务发现机制，而这个【应用】粒度恰好为 Dubbo 连通其他微服务体系（SpringCloud、Kubernetes Service 等）提供了一个友好的扩展方案，打通不同微服务体系之间应用与应用注册发现机制的互联互通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678620034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370010,"user_name":"Geek_221364","can_delete":false,"product_type":"c1","uid":3050805,"ip_address":"北京","ucode":"0DDE9CF628BED9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/agpX9PDdhZsps8iaMREEgpiafV0Z0KpvT4JWcghibMz0z8ct7secPeEEsClc6t1ycHdRJOWbBETUcNp1Xa6h9urEg/132","comment_is_top":false,"comment_ctime":1678251703,"is_pvip":false,"replies":[{"id":134922,"content":"你好，Geek_221364：用 chatGPT 来扯扯皮还是可以的，哈哈~","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678375492,"ip_address":"广东","comment_id":370010,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"\nchatGPT告诉我的，不知道是否正确\ndubbo.registry.register 和 dubbo.application.register 是 Dubbo 配置中的两个参数，它们分别用于控制服务提供者在注册中心上的注册行为和服务提供者在启动时将自己的地址信息注册到注册中心上的方式。\n\ndubbo.registry.register 参数用于控制服务提供者在注册中心上的注册行为。它的取值可以是 interface、instance 或 all，分别表示只注册服务接口、只注册服务实例或同时注册服务接口和服务实例。使用这个参数可以控制服务提供者在注册中心上的注册行为，让服务提供者只注册必要的接口或实例，避免不必要的服务暴露。\n\ndubbo.application.register 参数用于控制服务提供者在启动时将自己的地址信息注册到注册中心上的方式。它的取值可以是 provider 或 manual，分别表示服务提供者在启动时自动将自己的地址信息注册到注册中心上或需要手动将自己的地址信息注册到注册中心上。使用这个参数可以让服务提供者更灵活地控制自己在注册中心上的注册行为，避免一些不必要的服务注册，比如在测试环境中为了避免服务提供者过多的注册到注册中心上，可以设置 manual，然后手动将需要测试的服务提供者注册到注册中心上，这样可以控制测试服务提供者的数量。","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608329,"discussion_content":"你好，Geek_221364：用 chatGPT 来扯扯皮还是可以的，哈哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678375492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369285,"user_name":"Lum","can_delete":false,"product_type":"c1","uid":3231352,"ip_address":"北京","ucode":"7EF828425E685A","user_header":"https://static001.geekbang.org/account/avatar/00/31/4e/78/ee4e12cc.jpg","comment_is_top":false,"comment_ctime":1677329848,"is_pvip":false,"replies":[{"id":134868,"content":"你好，Lum：嗯嗯，挺不错的，把第一段观察的挺仔细的，然而我也补充了不少，可以在 02 章节的【思考题答案】去细细回味下详细的~","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678192914,"ip_address":"广东","comment_id":369285,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"先远程调用超时了，然后又启用了failover策略，结果注册中心就一个节点就报错了","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607935,"discussion_content":"你好，Lum：嗯嗯，挺不错的，把第一段观察的挺仔细的，然而我也补充了不少，可以在 02 章节的【思考题答案】去细细回味下详细的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678192914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367152,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1674976773,"is_pvip":false,"replies":[{"id":133804,"content":"你好，张申傲：你理解是正确的，facade 含义是外观，外表的意思，在系统接口定义层面，就可以理解为系统对外暴露的 Dubbo 接口。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1675148349,"ip_address":"广东","comment_id":367152,"utype":1}],"discussion_count":1,"race_medal":2,"score":3,"product_id":100312101,"comment_content":"请问下老师 ，代码中的 Facade 可以理解为一些公用的接口和实体类声明吗？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601215,"discussion_content":"你好，张申傲：你理解是正确的，facade 含义是外观，外表的意思，在系统接口定义层面，就可以理解为系统对外暴露的 Dubbo 接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675148349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367037,"user_name":"小明～","can_delete":false,"product_type":"c1","uid":2140562,"ip_address":"广东","ucode":"816F639452D2BF","user_header":"https://static001.geekbang.org/account/avatar/00/20/a9/92/d9ab26d2.jpg","comment_is_top":false,"comment_ctime":1674832683,"is_pvip":false,"replies":[{"id":133741,"content":"你好，小明：简单搞定的话，可以考虑借鉴下“05 点点直连”；如果想系统的通用解决的话，可以考虑借鉴下“25 注册扩展”。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1674875602,"ip_address":"湖南","comment_id":367037,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"老师，您好。最近有一个关于dubbo 需求是这样的: 平常在开发的时候，同一个服务，我本机的电脑，部署在开发环境服务器上的服务，同事电脑上启动的服务都有，经常出现调试的时候路由到了同事电脑上或者服务器的服务，我有个想法是按照优先级来调用：本机 优先于 服务器 优先于 同事电脑，如果想实现这个需求，我要准备哪一块的知识呢？学完本课程能解决这个问题吗？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600780,"discussion_content":"你好，小明：简单搞定的话，可以考虑借鉴下“05 点点直连”；如果想系统的通用解决的话，可以考虑借鉴下“25 注册扩展”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674875602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2140562,"avatar":"https://static001.geekbang.org/account/avatar/00/20/a9/92/d9ab26d2.jpg","nickname":"小明～","note":"","ucode":"816F639452D2BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":602536,"discussion_content":"老师, 我又有一个疑问, 今天在测试的时候,配置dubbo.registry.check=false不生效(springboot和xml配置都不生效),ConfigCenterConfig类中读取不到设置的check值,都是取的默认值true. 经过测试, 在dubbo3.1.5中会出现这个问题, Dubbo 2.7.8中设置值可以生效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675821391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600780,"ip_address":"广东","group_id":0},"score":602536,"extra":""}]}]},{"had_liked":false,"id":366185,"user_name":"YueShi","can_delete":false,"product_type":"c1","uid":1625530,"ip_address":"上海","ucode":"8F7AFAE4641A7D","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/ba/3a348f2d.jpg","comment_is_top":false,"comment_ctime":1673444947,"is_pvip":true,"replies":[{"id":133427,"content":"你好，YueShi：消费方优先级高于提供方优先级，以消费方为准。具体其实还有蛮多层级的配置的，详细的话，你可以去看看第11章节《配置加载顺序》章节，里面有根据源码进行详细的分析与解释。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1673451740,"ip_address":"广东","comment_id":366185,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"老师您好，一直有一个关于dubbo的疑问，就是如果provider和consumer分别设置了超时时间，那么实际上以谁为准？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599348,"discussion_content":"你好，YueShi：消费方优先级高于提供方优先级，以消费方为准。具体其实还有蛮多层级的配置的，详细的话，你可以去看看第11章节《配置加载顺序》章节，里面有根据源码进行详细的分析与解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673451740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365274,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"广东","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1672307456,"is_pvip":false,"replies":[{"id":133050,"content":"你好，阿昕：回答的非常漂亮，想当齐全了。\n\n我也在“02 异步化实践”章节的解答中写了答案，可以参考以下。熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672312643,"ip_address":"广东","comment_id":365274,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"  1.调用信息，生产者、消费者的地址，重试次数，超时时间；\n  2.dubbo的信息，版本号、协议、端口号，调用的接口；\n  3.异常信息，具体的异常、出现异常的代码行；","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597906,"discussion_content":"你好，阿昕：回答的非常漂亮，想当齐全了。\n\n我也在“02 异步化实践”章节的解答中写了答案，可以参考以下。熟悉这个异常是基本，灵活根据异常分析出问题是关键，可以多多体会一下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672312643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365211,"user_name":"Cha","can_delete":false,"product_type":"c1","uid":1080389,"ip_address":"广东","ucode":"BE28533F67F0F5","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/45/416fe519.jpg","comment_is_top":false,"comment_ctime":1672274936,"is_pvip":false,"replies":[{"id":133049,"content":"你好，Cha：嗯，你理解的没错。这里你别误解了，容器只是借用Tomcat或者Jetty来举例，以此来说明 Dubbo 也是运行在一个环境容器下的，并不是说 Dubbo 运行在 Tomcat 或者 Jetty 容器下的。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672312485,"ip_address":"广东","comment_id":365211,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"dubbo rpc应该是不依赖tomcat或者jetty容器","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597905,"discussion_content":"你好，Cha：嗯，你理解的没错。这里你别误解了，容器只是借用Tomcat或者Jetty来举例，以此来说明 Dubbo 也是运行在一个环境容器下的，并不是说 Dubbo 运行在 Tomcat 或者 Jetty 容器下的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672312486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364804,"user_name":"云韵","can_delete":false,"product_type":"c1","uid":1025622,"ip_address":"湖南","ucode":"3DE26DBAAAEDE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/56/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1671516513,"is_pvip":false,"replies":[{"id":132839,"content":"你好，云韵：现在还在调整，放心，后续会统一放出来的。\n案例代码地址：https:&#47;&#47;gitee.com&#47;ylimhhmily&#47;GeekDubbo3Tutorial","user_name":"作者回复","user_name_real":"作者","uid":1364525,"ctime":1671523936,"ip_address":"湖南","comment_id":364804,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"老师，文中的代码有源码吗","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597199,"discussion_content":"你好，云韵：现在还在调整，放心，后续会统一放出来的。\n案例代码地址：https://gitee.com/ylimhhmily/GeekDubbo3Tutorial","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671523936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364803,"user_name":"熊悟空的凶","can_delete":false,"product_type":"c1","uid":1933459,"ip_address":"湖南","ucode":"5FA9498BDA92C0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/80/93/dde3d5f0.jpg","comment_is_top":false,"comment_ctime":1671515874,"is_pvip":false,"replies":[{"id":132842,"content":"你好，熊悟空的凶：挺棒的，回答的非常好，我也还补充了一堆的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本技能，灵活根据异常分析出问题是关键因素，可以多多体会一下～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671532251,"ip_address":"湖南","comment_id":364803,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"sayHello 调用超时  dubbo 重试3次  并给出超时时间和具体的调用信息 是么","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597215,"discussion_content":"你好，熊悟空的凶：挺棒的，回答的非常好，我也还补充了一堆的，详细可以见“02 异步化实践”章节的解答，熟悉这个异常是基本技能，灵活根据异常分析出问题是关键因素，可以多多体会一下～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1671532251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364802,"user_name":"熊悟空的凶","can_delete":false,"product_type":"c1","uid":1933459,"ip_address":"湖南","ucode":"5FA9498BDA92C0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/80/93/dde3d5f0.jpg","comment_is_top":false,"comment_ctime":1671515586,"is_pvip":false,"replies":[{"id":132840,"content":"你好，熊悟空的凶：现在项目代码还在调整，放心，后续会统一放出来的。\n案例代码地址：https:&#47;&#47;gitee.com&#47;ylimhhmily&#47;GeekDubbo3Tutorial","user_name":"作者回复","user_name_real":"作者","uid":1364525,"ctime":1671523992,"ip_address":"湖南","comment_id":364802,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"老师，您好  演示项目代码git地址能方便贴下不","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597200,"discussion_content":"你好，熊悟空的凶：现在项目代码还在调整，放心，后续会统一放出来的。\n案例代码地址：https://gitee.com/ylimhhmily/GeekDubbo3Tutorial","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1671523992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}