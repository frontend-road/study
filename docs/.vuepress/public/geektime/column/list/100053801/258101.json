{"id":258101,"title":"08 | 如何利用三角剖分和向量操作描述并处理多边形？","content":"<p>你好，我是月影。</p><p>在图形系统中，我们最终看到的丰富多彩的图像，都是由多边形构成的。换句话说，不论是2D图形还是3D图形，经过投影变换后，在屏幕上输出的都是多边形。因此，理解多边形的基本性质，了解用数学语言描述并且处理多边形的方法，是我们在可视化中必须要掌握的内容。</p><p>那今天，我们就来说说，不同的图形系统是如何用数学语言描述并处理多边形。首先，我们来说说图形学中的多边形是什么。</p><h2>图形学中的多边形是什么？</h2><p>多边形可以定义为由三条或三条以上的线段首尾连接构成的平面图形，其中，每条线段的端点就是多边形的顶点，线段就是多边形的边。</p><p>多边形又可以分为<strong>简单多边形</strong>和<strong>复杂多边形</strong>。我们该怎么区分它们呢？如果一个多边形的每条边除了相邻的边以外，不和其他边相交，那它就是简单多边形，否则就是复杂多边形。一般来说，我们在绘图时，要尽量构建简单多边形，因为简单多边形的图形性质比较简单，绘制起来比较方便。</p><p>而简单多边形又分为凸多边形和凹多边形，我们主要是看简单多边形的内角来区分的。如果一个多边形中的每个内角都不超过180°，那它就是凸多边形，否则就是凹多边形。</p><p><img src=\"https://static001.geekbang.org/resource/image/74/4a/74c812ef3a15f5f20d7a5bbaff30794a.jpg?wh=859*334\" alt=\"\"></p><p>在图形系统中绘制多边形的时候，最常用的功能是填充多边形，也就是用一种颜色将多边形的内部填满。除此之外，在可视化中用户经常要用鼠标与多边形进行交互，这就要涉及多边形的边界判定。所以今天，我们就来重点讨论<strong>多边形的填充和边界判定</strong>。首先，我们来看多边形的填充。</p><!-- [[[read_end]]] --><h2>不同的图形系统如何填充多边形？</h2><p>不同的图形系统会用不同的方法来填充多边形。比如说，在SVG和Canvas2D中，就都内置了填充多边形的API。在SVG中，我们可以直接给元素设置fill属性来填充，那在Canvas2D中，我们可以在绘图指令结束时调用fill()方法进行填充。而在WebGL中，我们是用三角形图元来快速填充的。由于SVG和Canvas2D中的填充方法类似，因此今天，我们就主要说说Canvas2D和WebGL是怎么填充多边形的。</p><h3>1. Canvas2D如何填充多边形？</h3><p>我们先来说说Canvas2D填充多边形的具体方法，可以总结为五步。</p><p>第一步，构建多边形的顶点。这里我们直接构造5个顶点，代码如下：</p><pre><code>const points = [new Vector2D(0, 100)];\nfor(let i = 1; i &lt;= 4; i++) {\n  const p = points[0].copy().rotate(i * Math.PI * 0.4);\n  points.push(p);\n}\n</code></pre><p>第二步，绘制多边形。我们要用这5个顶点分别绘制正五边形和正五角星。显然前者是简单多边形，后者是复杂多边形。那在Canvas中，只需将顶点构造出来，我们就可以通过API绘制出多边形了。具体绘制代码如下：</p><pre><code>const polygon = [\n  ...points,\n];\n\n// 绘制正五边形\nctx.save();\nctx.translate(-128, 0);\ndraw(ctx, polygon);\nctx.restore();\n\nconst stars = [\n  points[0],\n  points[2],\n  points[4],\n  points[1],\n  points[3],\n];\n\n// 绘制正五角星\nctx.save();\nctx.translate(128, 0);\ndraw(ctx, stars);\nctx.restore();\n</code></pre><p>如上面代码所示，我们用计算出的5个顶点创建polygon数组和stars数组。其中，polygon数组是正五边形的顶点数组。stars数组是我们把正五边形的顶点顺序交换之后，构成的五角星的顶点数组。</p><p>接着，我们将这些点传给draw函数，在draw函数中完成具体的绘制。在draw函数中绘制过程的时候，我们是调用context.fill来完成填充的。</p><p>这里，我要补充一点，不管是简单多边形还是复杂多边形，Canvas2D的fill都能正常填充。并且，Canvas2D的fill还支持两种填充规则。其中，默认的规则是“nonzero”，也就是说 不管有没有相交的边，只要是由边围起来的区域都一律填充。在下面的代码中，我们就是用“nonzero”规则来填充的。</p><pre><code>function draw(context, points, {\n  fillStyle = 'black',\n  close = false,\n  rule = 'nonzero',\n} = {}) {\n  context.beginPath();\n  context.moveTo(...points[0]);\n  for(let i = 1; i &lt; points.length; i++) {\n    context.lineTo(...points[i]);\n  }\n  if(close) context.closePath();\n  context.fillStyle = fillStyle;\n  context.fill(rule);\n}\n</code></pre><p>我们最终绘制出的效果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/96/371e3b8d3f484b13aa13f6e8ce60ec96.jpeg?wh=1920*1080\" alt=\"\" title=\"简单多边形a和b\"></p><p>除了“nonzero”，还有一种规则叫做“evenodd”，它是根据重叠区域是奇数还是偶数来判断是否填充的。那当我们增加了draw方法的参数，将五角星的填充规则改成“evenodd”之后，简单多边形没有变化，而复杂多边形由于绘制区域存在重叠，就出导致图形中心有了空洞的特殊效果。</p><pre><code>draw(ctx, stars, {rule: 'evenodd'});\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/81/44/81e56244233ebec7e0cc50a661d2cf44.jpeg?wh=1920*1080\" alt=\"\" title=\"使用evenodd之后得到的填充图形a和b\"></p><p>总之，Canvas2D的fill非常实用，它可以自动填充多边形内部的区域，并且对于任何多边形都能判定和填充，你可以自己去尝试一下。</p><h3>2. WebGL如何填充多边形？</h3><p>在WebGL中，虽然没有提供自动填充多边形的方法，但是我们可以用三角形这种基本图元来快速地填充多边形。因此，在WebGL中填充多边形的第一步，就是将多边形分割成多个三角形。</p><p>这种将多边形分割成若干个三角形的操作，在图形学中叫做<strong>三角剖分</strong>（Triangulation）。</p><p><a href=\"http://wikipedia.org\"><img src=\"https://static001.geekbang.org/resource/image/61/dd/619872b8789bfaeb5fc2c1f0381d52dd.jpeg?wh=1920*1080\" alt=\"\" title=\"同一个多边形的两种三角剖分方法\"></a></p><p>三角剖分是图形学和代数拓扑学中一个非常重要的基本操作，也有很多不同的实现算法。对简单多边形尤其是凸多边形的三角剖分比较简单，而复杂多边形由于有边的相交和面积重叠区域，所以相对困难许多。</p><p>那因为这些算法讲解起来比较复杂，还会涉及很多图形学的底层数学知识，你可能很难理解，所以我就不详细说三角剖分的具体算法了。如果你有兴趣学习，可以自己花一点时间去看一些<a href=\"http://www.ae.metu.edu.tr/tuncer/ae546/prj/delaunay/\">参考资料</a>。</p><p>这里，我们就直接利用GitHub上的一些成熟的库（常用的如<a href=\"https://github.com/mapbox/earcut\">Earcut</a>、<a href=\"https://github.com/memononen/tess2.js\">Tess2.js</a>以及<a href=\"https://github.com/mikolalysenko/cdt2d\">cdt2d</a>），来对多边形进行三角剖分就可以了。具体怎么做呢？接下来，我们就以最简单的Earcut库为例，来说一说WebGL填充多边形的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/9c/28716416aa8c00743843ae208089c99c.jpeg?wh=1920*1080\" alt=\"\" title=\"简单多边形c\"></p><p>假设，我们要填充一个如上图所示的不规则多边形，它的顶点数据如下：</p><pre><code>const vertices = [\n  [-0.7, 0.5],\n  [-0.4, 0.3],\n  [-0.25, 0.71],\n  [-0.1, 0.56],\n  [-0.1, 0.13],\n  [0.4, 0.21],\n  [0, -0.6],\n  [-0.3, -0.3],\n  [-0.6, -0.3],\n  [-0.45, 0.0],\n];\n</code></pre><p>首先，我们要对它进行三角剖分。使用Earcut库的操作很简单，我们直接调用它的API就可以完成对多边形的三角剖分，具体代码如下：</p><pre><code>import {earcut} from '../common/lib/earcut.js';\n\nconst points = vertices.flat();\nconst triangles = earcut(points);\n</code></pre><p>因为Earcut库只接受扁平化的定点数据，所以我们先用了数组的flat方法将顶点扁平化，然后将它传给Earcut进行三角剖分。这样返回的结果是一个数组，这个数组的值是顶点数据的index，结果如下：</p><pre><code> [1, 0, 9, 9, 8, 7, 7, 6, 5, 4, 3, 2, 2, 1, 9, 9, 7, 5, 4, 2, 9, 9, 5, 4]\n</code></pre><p>这里的值，比如1表示vertices中下标为1的顶点，即点(-0.4, 0.3)，每三个值可以构成一个三角形，所以1、0、9表示由(-0.4, 0.3)、(-0.7, 0.5)和(-0.45, 0.0) 构成的三角形。</p><p>然后，我们将顶点和index下标数据都输入到缓冲区，通过gl.drawElements方法就可以把图形显示出来。具体的代码如下：</p><pre><code>const position = new Float32Array(points);\nconst cells = new Uint16Array(triangles);\n\n\nconst pointBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);\n\n\nconst vPosition = gl.getAttribLocation(program, 'position');\ngl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(vPosition);\n\n\nconst cellsBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cellsBuffer);\ngl.bufferData(gl.ELEMENT_ARRAY_BUFFER, cells, gl.STATIC_DRAW);\n\n\ngl.clear(gl.COLOR_BUFFER_BIT);\ngl.drawElements(gl.TRIANGLES, cells.length, gl.UNSIGNED_SHORT, 0);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/61/26/614e29911f76757a56159ca2d080a526.jpeg?wh=1920*1080\" alt=\"\"></p><p>你会发现，通过上面的步骤，整个多边形都被WebGL渲染并填充为了红色。这么一看，好像三角剖分并没有什么作用。但实际上，WebGL是对这个多边形三角剖分后的每个三角形分别进行填充的。为了让你看得更清楚，我们用描边代替填充，具体操作就是，修改一下gl.drawElements的渲染模式，将gl.TRIANGLES改成gl.LINE_STRIP。这样，我们就可以清晰地看出，经过Earcut处理的这个多边形被分割成了8个三角形。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/72/549f33d96886fa2bf04f92d30f9ea972.jpeg?wh=1920*1080\" alt=\"\"></p><p>到这里，我们就讲完了2D图形的三角剖分。那针对3D模型，WebGL在绘制的时候，也需要使用三角剖分，而3D的三角剖分又被称为<strong>网格化</strong>（Meshing）。</p><p>不过，因为3D模型比2D模型更加复杂，顶点的数量更多，所以针对复杂的3D模型，我们一般不在运行的时候进行三角剖分，而是通过设计工具把图形的三角剖分结果直接导出进行使用。也就是说，在3D渲染的时候，我们一般使用的模型数据都是已经经过三角剖分以后的顶点数据。</p><p>那如果必须要在可视化项目中实时创建一些几何体的时候，我们该怎么办呢？这部分内容，我们会在视觉篇详细来讲，不过在那之前呢，你也可以自己先想想。</p><p>总的来说，无论是绘制2D还是3D图形，WebGL都需要先把它们进行三角剖分，然后才能绘制。因此，三角剖分是WebGL绘图的基础。</p><h2>如何判断点在多边形内部？</h2><p>接下来，我们通过一个简单的例子来说说多边形的交互。这个例子要实现的效果其实就是，当用户的鼠标移动到某一个图形上时，我们要让这个图形变色。在这个例子中，我们要解决的核心问题是：判定鼠标所在位置是否在多边形的内部。</p><p>那么问题来了，不同的图形系统都是如何判断点在多边形内部的呢？</p><p>在SVG这样的图形系统里，由于多边形本身就是一个元素节点，因此我们直接通过DOM API就可以判定鼠标是否在该元素上。而对于Canvas2D，我们不能直接通过DOM API判定，而是要通过Canvas2D提供的isPointInPath方法来判定。所以下面，我们就以多边形c为例，来详细说说这个过程。</p><h3>1.  Canvas2D如何判断点在多边形内部？</h3><p>首先，我们先改用Canvas2D来绘制并填充这个多边形。</p><p>然后，我们在canvas上添加mousemove事件，在事件中计算鼠标相对于canvas的位置，再将这个位置传给isPointInPath方法，isPointInPath方法就会自动判断这个位置是否位于图形内部。代码如下：</p><pre><code>const {left, top} = canvas.getBoundingClientRect();\n\ncanvas.addEventListener('mousemove', (evt) =&gt; {\n  const {x, y} = evt;\n  // 坐标转换\n  const offsetX = x - left;\n  const offsetY = y - top;\n\n  ctx.clearRect(-256, -256, 512, 512);\n\n  if(ctx.isPointInPath(offsetX, offsetY)) {\n    draw(ctx, poitions, 'transparent', 'green');\n  } else {\n    draw(ctx, poitions, 'transparent', 'red');\n  }\n});\n</code></pre><p>最后，上面代码运行效果如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/97/4f370d3187e964efc733294a3ed2de97.gif?wh=632*421\" alt=\"\"></p><p>这个运行结果是没有问题的，但isPointInPath这个方法实际上并不好用。因为isPointInPath方法只能对当前绘制的图形生效。这是什么意思呢？我来举个例子。</p><p>假设，我们要在Canvas中绘制多边形c和小三角形。那我们先绘制多边形c，再绘制小三角形。绘制代码如下：</p><pre><code>draw(ctx, poitions, 'transparent', 'red');\ndraw(ctx, [[100, 100], [100, 200], [150, 200]], 'transparent', 'blue');\n\nconst {left, top} = canvas.getBoundingClientRect();\n\ncanvas.addEventListener('mousemove', (evt) =&gt; {\n  const {x, y} = evt;\n  // 坐标转换\n  const offsetX = x - left;\n  const offsetY = y - top;\n  \n  ctx.clearRect(-256, -256, 512, 512);\n  \n  // 判断 offsetX、offsetY 的坐标是否在多边形内部\n  if(ctx.isPointInPath(offsetX, offsetY)) {\n    draw(ctx, poitions, 'transparent', 'green');\n    draw(ctx, [[100, 100], [100, 200], [150, 200]], 'transparent', 'orange');\n  } else {\n    draw(ctx, poitions, 'transparent', 'red');\n    draw(ctx, [[100, 100], [100, 200], [150, 200]], 'transparent', 'blue');\n  }\n});\n</code></pre><p>这里，我们还通过isPointInPath方法判断点的位置，这样得到的结果如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/3e/5e566597db9519bcb0fdc09ce6390e3e.gif?wh=637*422\" alt=\"\"></p><p>你会看到，当我们将鼠标移动到中间大图时，它的颜色并没有发生变化，只有移动到右上角的小三角形时，这两个图形才会同时变色。这就是因为，isPointInPath仅能判断鼠标是否在最后一次绘制的小三角形内，所以大多边形就没有被识别出来。</p><p>要解决这个问题，一个最简单的办法就是，我们自己实现一个isPointInPath方法。然后在这个方法里，重新创建一个Canvas对象，并且再绘制一遍多边形c和小三角形。这个方法的核心，其实就是在绘制的过程中获取每个图形的isPointInPath结果。代码如下：</p><pre><code>function isPointInPath(ctx, x, y) {\n  // 我们根据ctx重新clone一个新的canvas对象出来\n  const cloned = ctx.canvas.cloneNode().getContext('2d');\n  cloned.translate(0.5 * width, 0.5 * height);\n  cloned.scale(1, -1);\n  let ret = false;\n  // 绘制多边形c，然后判断点是否在图形内部\n  draw(cloned, poitions, 'transparent', 'red');\n  ret |= cloned.isPointInPath(x, y);\n  if(!ret) {\n    // 如果不在，在绘制小三角形，然后判断点是否在图形内部\n    draw(cloned, [[100, 100], [100, 200], [150, 200]], 'transparent', 'blue');\n    ret |= cloned.isPointInPath(x, y);\n  }\n  return ret;\n}\n</code></pre><p>但是，这个方法并不通用。因为一旦我们修改了绘图过程，也就是增加或者减少了绘制的图形，isPointInPath方法也要跟着改变。当然，我们也有办法进行优化，比如将每一个几何图形的绘制封装起来，针对每个图形提供单独的isPointInPath判断，但是这样也很麻烦，而且有很多无谓的Canvas绘图操作，性能会很差。</p><h3>2. 实现通用的isPointInPath方法</h3><p>那一个更好的办法是，我们不使用Canvas的isPointInPath方法，而是直接通过点与几何图形的数学关系来判断点是否在图形内。但是，直接判断一个点是不是在一个几何图形内还是比较困难的，因为这个几何图形可能是简单多边形，也可能是复杂多边形。</p><p>这个时候，我们完全可以把视线放在最简单的多边形，也就是三角形上。因为对于三角形来说，我们有一个非常简单的方法可以判断点是否在其中。</p><p>这个方法就是，已知一个三角形的三条边分别是向量a、b、c，平面上一点u连接三角形三个顶点的向量分别为u<sub>1</sub>、u<sub>2</sub>、u<sub>3</sub>，那么u点在三角形内部的充分必要条件是：u<sub>1</sub> X a、u<sub>2</sub> X b、u<sub>3</sub> X c 的符号相同。</p><p>你也可以看我下面给出的示意图，当点u在三角形a、b、c内时，因为u<sub>1</sub>到a、u<sub>2</sub>到b、u<sub>3</sub>到c的小角旋转方向是相同的（这里都为顺时针），所以u<sub>1</sub> X a、u<sub>2</sub> X b、u<sub>3</sub> X c要么同正，要么同负。当点v在三角形外时，v<sub>1</sub>到a方向是顺时针，v<sub>2</sub>到b方向是逆时针，v<sub>3</sub>到c方向又是顺时针，所以它们叉乘的结果符号并不相同。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/c3/3402b08454dbc39f9543cb4c597419c3.jpg?wh=1920*1080\" alt=\"\"></p><p>根据这个原理，我们就可以写一个简单的判定函数了，代码如下：</p><pre><code>function inTriangle(p1, p2, p3, point) {\n  const a = p2.copy().sub(p1);\n  const b = p3.copy().sub(p2);\n  const c = p1.copy().sub(p3);\n\n  const u1 = point.copy().sub(p1);\n  const u2 = point.copy().sub(p2);\n  const u3 = point.copy().sub(p3);\n\n  const s1 = Math.sign(a.cross(u1));\n  const s2 = Math.sign(b.cross(u2));\n  const s3 = Math.sign(c.cross(u3));\n\n  return s1 === s2 &amp;&amp; s2 === s3;\n}\n</code></pre><p>你以为到这里就结束了吗？还没有。上面的代码还有个Bug，它虽然可以判定点在三角形内部，但却不能判定点恰好在三角形某条边上的情况。这又该如何优化呢？</p><p>在学习了向量乘法之后，我们知道。如果一个点u在三角形的一条边a上，那就会需要满足以下2个条件：</p><ol>\n<li>a.cross(u1) === 0</li>\n<li>0 &lt;= a.dot(u1) / a.length ** 2 &lt;= 1</li>\n</ol><p>第一个条件很容易理解，我就不细说了，我们重点来看第二个条件。下面，我就分别讨论一下点u和a在一条直线上和不在一条直线上这两种情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/ca/8e/ca37834a201b3d704fe40ef3955b608e.jpg?wh=1920*1080\" alt=\"\" title=\"左图是点u和a不在一条直线上，右图是点u和a在一条直线上\n\"></p><p>当向量u<sub>1</sub>与a不在一条直线上时，u<sub>1</sub>与a的叉乘结果不为0，而u<sub>1</sub>与a的点乘的值除以a的长度，相当于u<sub>1</sub>在a上的投影。</p><p>当向量u<sub>1</sub>与a在一条直线上时，u<sub>1</sub>与a的叉乘结果为0，u<sub>1</sub>与a的点乘结果除以a的长度的平方，正好是u<sub>1</sub>与a的比值。</p><p>u<sub>1</sub>与a的比值也有三种情况：当u<sub>1</sub>在a上时，u<sub>1</sub>和a比值是介于0到1之间的；当u<sub>1</sub>在a的左边时，这个比值是小于0的；当u1在a的右边时，这个比值是大于1的。</p><p>因此，只有当u1和a的比值在0到1之间时，才能说明点在三角形的边上。</p><p>好了，那接下来，我们可以根据得到的结果修改一下代码。我们最终的判断逻辑如下：</p><pre><code>function inTriangle(p1, p2, p3, point) {\n  const a = p2.copy().sub(p1);\n  const b = p3.copy().sub(p2);\n  const c = p1.copy().sub(p3);\n\n  const u1 = point.copy().sub(p1);\n  const u2 = point.copy().sub(p2);\n  const u3 = point.copy().sub(p3);\n\n  const s1 = Math.sign(a.cross(u1));\n  let p = a.dot(u1) / a.length ** 2;\n  if(s1 === 0 &amp;&amp; p &gt;= 0 &amp;&amp; p &lt;= 1) return true;\n\n  const s2 = Math.sign(b.cross(u2));\n  p = b.dot(u2) / b.length ** 2;\n  if(s2 === 0 &amp;&amp; p &gt;= 0 &amp;&amp; p &lt;= 1) return true;\n\n  const s3 = Math.sign(c.cross(u3));\n  p = c.dot(u3) / c.length ** 2;\n  if(s3 === 0 &amp;&amp; p &gt;= 0 &amp;&amp; p &lt;= 1) return true;\n\n  return s1 === s2 &amp;&amp; s2 === s3;\n}\n</code></pre><p>这样我们就判断了一个点是否在某个三角形内部。那如果要判断一个点是否在任意多边形的内部，我们只需要在判断之前将它进行三角剖分就可以了。代码如下：</p><pre><code>function isPointInPath({vertices, cells}, point) {\n  let ret = false;\n  for(let i = 0; i &lt; cells.length; i += 3) {\n    const p1 = new Vector2D(...vertices[cells[i]]);\n    const p2 = new Vector2D(...vertices[cells[i + 1]]);\n    const p3 = new Vector2D(...vertices[cells[i + 2]]);\n    if(inTriangle(p1, p2, p3, point)) {\n      ret = true;\n      break;\n    }\n  }\n  return ret;\n}\n</code></pre><h2>要点总结</h2><p>本节课，我们学习了使用三角剖分来填充多边形以及判断点是否在多边形内部。</p><p>不同的图形系统有着不同的处理方法，Canvas2D的处理很简单，它可以使用原生的fill来填充任意多边形，使用isPointInPath来判断点是否在多边形内部。但是，三角剖分是更加通用的方式，WebGL就是使用三角剖分来处理多边形的，所以我们要牢记它的操作。</p><p>首先，在使用三角剖分填充多边形时，我们直接调用一些成熟库的API就可以完成，这并不难。而当我们要实现图形和用户的交互时，也就是要判断一个点是否在多边形内部时，也需要先对多边形进行三角剖分，然后判断该点是否在其中一个三角形内部。</p><h2>小试牛刀</h2><ol>\n<li>\n<p>在课程中，我们使用了Earcut对多边形进行三角剖分。但是tess2.js是一个比Earcut更强大的三角剖分库，使用tess2.js可以像原生的Canvas2D的fill方法那样，实现evenodd的填充规则。你能试着把代码中的earcut换成tess2.js，从而实现evenodd填充规则吗？动手之前，你可以先去读一下tess2.js的项目文档。</p>\n</li>\n<li>\n<p>今天我们用三角剖分实现了不规则多边形。那你能试着利用三角剖分的原理，通过WebGL画出椭圆图案、菱形的星星图案（✦），以及正五角星吗？</p>\n</li>\n</ol><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\"><a href=\"https://github.com/akira-cn/graphics/tree/master/triangluations\">使用三角剖分填充多边形、判断点在多边形内部的完整代码</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\"> <a href=\"https://github.com/memononen/tess2.js\">tess2.js官方文档</a></span></p>","comments":[{"had_liked":false,"id":233250,"user_name":"gltjk","can_delete":false,"product_type":"c1","uid":1341515,"ip_address":"","ucode":"A2ACFE7D8A32C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","comment_is_top":false,"comment_ctime":1594270987,"is_pvip":false,"replies":[{"id":"86302","content":"赞👍能动手自己做非常棒，多实践可以快速学习成长。webgl上手不太容易，不过掌握了学习诀窍，打好基础，后面就越来越容易了，而且会觉得越来越有趣","user_name":"作者回复","comment_id":233250,"uid":"1159792","ip_address":"","utype":1,"ctime":1594452984,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"40248976651","product_id":100053801,"comment_content":"在之前代码的基础上封装了 Canvas 类和自己的 Vector2D 类，同时增加简单的 WebGL 类（其中封装了用 Tesser2 三角剖分实现的画多边形方法），然后试了试小试牛刀里要求的椭圆、正五角星和菱形星星。因为文件比较多，不用 Codepen 了，改用 Github 放代码。<br>之后有时间再把判断点在多边形内部做出来，同时把之前 Codepen 的例子迁移过来。<br>话说感觉 WebGL 好深奥啊，可能我连门都没算入吧……<br><br>在线预览：https:&#47;&#47;g.gltjk.com&#47;learn-visualization&#47;canvas-webgl-polygon&#47;<br><br>代码仓库：https:&#47;&#47;github.com&#47;gltjk&#47;learn-visualization","like_count":9,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500959,"discussion_content":"赞👍能动手自己做非常棒，多实践可以快速学习成长。webgl上手不太容易，不过掌握了学习诀窍，打好基础，后面就越来越容易了，而且会觉得越来越有趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594452984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1384326,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1f/86/3a7eeac4.jpg","nickname":"leslee","note":"","ucode":"DB1CBF9F8D16BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326507,"discussion_content":"老铁，点到直线的距离哪里，PN下面的N 这个向量有空可以加点注释么。感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605609526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234414,"user_name":"Presbyter🎱","can_delete":false,"product_type":"c1","uid":1244819,"ip_address":"","ucode":"E52F076FE898DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/93/31869247.jpg","comment_is_top":false,"comment_ctime":1594687965,"is_pvip":false,"replies":[{"id":"86496","content":"在第9讲的最后我放了一张图，列出了所有的知识点，你可以看一下","user_name":"作者回复","comment_id":234414,"uid":"1159792","ip_address":"","utype":1,"ctime":1594690181,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"14479589853","product_id":100053801,"comment_content":"老师，没脸的问一句。自己已经要疯了，很多数学概念已经不明白了。现在在恶补线性代数，然后在回来看文章。老师能麻烦一下，给出咱们这个课程所需要的数学知识嘛？我好一次性都看了，然后一点一点的在重新读咱们文章。麻烦老师了。","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501381,"discussion_content":"在第9讲的最后我放了一张图，列出了所有的知识点，你可以看一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594690181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236906,"user_name":"孙华","can_delete":false,"product_type":"c1","uid":2045306,"ip_address":"","ucode":"E3A0FE38CFA4C8","user_header":"https://static001.geekbang.org/account/avatar/00/1f/35/7a/c0498c0b.jpg","comment_is_top":false,"comment_ctime":1595580826,"is_pvip":false,"replies":[{"id":"87568","content":"因为LINE_STRIP是绘制连续线段，所以最终每个点只经过一次，就会出现四边形。不过这里只是大概地显示出三角形形状，所以没关系。如果要严格显示出各个三角形，需要改一下数据，把每个顶点和它的三角形的其他顶点对应的边数据重新存一下然后用LINES绘制","user_name":"作者回复","comment_id":236906,"uid":"1159792","ip_address":"","utype":1,"ctime":1595643217,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"10185515418","product_id":100053801,"comment_content":"月影大佬<br>WebGL fill 的例子中<br>修改一下 gl.drawElements 的渲染模式，将 gl.TRIANGLES 改成 gl.LINE_STRIP。这样，我们就可以清晰地看出，经过 Earcut 处理的这个多边形被分割成了 8 个三角形。<br>但例子展示的结果中只有6个三角形和一个四边形。这是什么原因？","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502249,"discussion_content":"因为LINE_STRIP是绘制连续线段，所以最终每个点只经过一次，就会出现四边形。不过这里只是大概地显示出三角形形状，所以没关系。如果要严格显示出各个三角形，需要改一下数据，把每个顶点和它的三角形的其他顶点对应的边数据重新存一下然后用LINES绘制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595643217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312790,"user_name":"聂士伟","can_delete":false,"product_type":"c1","uid":1102126,"ip_address":"","ucode":"C1624B259BB34E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/2e/ad6315ab.jpg","comment_is_top":false,"comment_ctime":1632021551,"is_pvip":true,"replies":[{"id":"114128","content":"是的，可以优化","user_name":"作者回复","comment_id":312790,"uid":"1159792","ip_address":"","utype":1,"ctime":1633750003,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5926988847","product_id":100053801,"comment_content":"具体实现的算法还需要先判断点是否在多边形外接框矩形内，可以加速","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527113,"discussion_content":"是的，可以优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633750003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253926,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1602948908,"is_pvip":true,"replies":[{"id":"93051","content":"������","user_name":"作者回复","comment_id":253926,"uid":"1159792","ip_address":"","utype":1,"ctime":1603354242,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"5897916204","product_id":100053801,"comment_content":"简单根据老师给的延伸连结解释一下三角剖分<br>1.  任相邻的两个三角形一定是组成一个四边形，不会是五边形，六边形<br>2. 任一三角形的外包圆不可包含其他三角形的顶点<br>3. 跟 Voronoi diagram 是一体两面的概念，三角剖分中的三角形的边的中垂线相连会成为 Voronoi diagram 中的每个多边型，三角剖分中的顶点称为 Voronoi generators ","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507222,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603354242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064214,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7f/56/1ab5931f.jpg","nickname":"Herve","note":"","ucode":"25941E69C75D16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351048,"discussion_content":"不一定是四边形，后面两条没看懂啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614135395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252569,"user_name":"嘻嘻","can_delete":false,"product_type":"c1","uid":1373304,"ip_address":"","ucode":"BE59D46445F568","user_header":"https://static001.geekbang.org/account/avatar/00/14/f4/78/9953da19.jpg","comment_is_top":false,"comment_ctime":1602385984,"is_pvip":false,"replies":[{"id":"92601","content":"具体实现方式要研究浏览器底层实现的源码。我觉得应该是的","user_name":"作者回复","comment_id":252569,"uid":"1159792","ip_address":"","utype":1,"ctime":1602815384,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5897353280","product_id":100053801,"comment_content":"话说浏览器的api判断是否在路径内应该也是用的数学方法吧(｀･ω･´)ゞ","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506807,"discussion_content":"具体实现方式要研究浏览器底层实现的源码。我觉得应该是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602815384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347775,"user_name":"Geek_1c5d1b","can_delete":false,"product_type":"c1","uid":2262803,"ip_address":"","ucode":"F96C738FEB50A9","user_header":"","comment_is_top":false,"comment_ctime":1654417636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654417636","product_id":100053801,"comment_content":"判断是否在一条直线上，行列式 == 0 且 向量点乘与a向量长度的平方 比值在0到1之间 即可","like_count":0},{"had_liked":false,"id":336155,"user_name":"高尔夫","can_delete":false,"product_type":"c1","uid":1137463,"ip_address":"","ucode":"FEE20AD4A57365","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/37/8cf84372.jpg","comment_is_top":false,"comment_ctime":1645958798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645958798","product_id":100053801,"comment_content":"gl.drawElements 是使用索引来渲染，前面04讲的gl.drawArrays是直接读取数组来渲染，抱歉学的太慢了。","like_count":0},{"had_liked":false,"id":329636,"user_name":"Geek_9a30ab","can_delete":false,"product_type":"c1","uid":2068385,"ip_address":"","ucode":"4019658B9BA93F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8f/a1/5482b927.jpg","comment_is_top":false,"comment_ctime":1641453878,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1641453878","product_id":100053801,"comment_content":" const poitions = vertices.map(([x, y]) =&gt; [x * 256, y * 256]);<br>老师，我看你app2d.js 这里要乘以256，请问256是怎么算出来的呢？<br>","like_count":1,"discussions":[{"author":{"id":1994991,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/70/ef/3717a2c6.jpg","nickname":"Tommy","note":"","ucode":"336E7703EAD0A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566159,"discussion_content":"画布宽高的一半吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650615959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329635,"user_name":"Geek_9a30ab","can_delete":false,"product_type":"c1","uid":2068385,"ip_address":"","ucode":"4019658B9BA93F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/8f/a1/5482b927.jpg","comment_is_top":false,"comment_ctime":1641453767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641453767","product_id":100053801,"comment_content":" const poitions = vertices.map(([x, y]) =&gt; [x * 256, y * 256]);","like_count":0},{"had_liked":false,"id":303729,"user_name":"王钰","can_delete":false,"product_type":"c1","uid":2618921,"ip_address":"","ucode":"F4A97F1E0EBB13","user_header":"","comment_is_top":false,"comment_ctime":1626946683,"is_pvip":false,"replies":[{"id":"114133","content":"不可以的，除非a和u1的长度相同","user_name":"作者回复","comment_id":303729,"uid":"1159792","ip_address":"","utype":1,"ctime":1633750512,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1626946683","product_id":100053801,"comment_content":"老师，判断 u1 是否在 a 上，是否可以用 |a - u1| &gt; 0 判断，大于 0 时，u1 不在 a 上，等于 0 时在 a 上。","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523796,"discussion_content":"不可以的，除非a和u1的长度相同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633750512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300961,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1625468287,"is_pvip":false,"replies":[{"id":"114139","content":"因为qhres域名有问题，换成qhres2就可以了","user_name":"作者回复","comment_id":300961,"uid":"1159792","ip_address":"","utype":1,"ctime":1633750818,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1625468287","product_id":100053801,"comment_content":"github上的代码 怎么打开都是大白屏","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522863,"discussion_content":"因为qhres域名有问题，换成qhres2就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633750818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296843,"user_name":"小团","can_delete":false,"product_type":"c1","uid":2028952,"ip_address":"","ucode":"B81FD9742B1F22","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/98/c490d236.jpg","comment_is_top":false,"comment_ctime":1623199724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623199724","product_id":100053801,"comment_content":"const offsetX = 2 * (x - left) &#47; canvas.width - 1.0;<br>const offsetY = 1.0 - 2 * (y - top) &#47; canvas.height;<br>不理解这段代码是如何得到的呢？","like_count":0},{"had_liked":false,"id":290206,"user_name":"Geek_jiang_gdufs","can_delete":false,"product_type":"c1","uid":1907075,"ip_address":"","ucode":"4DF0082F284C64","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3raFU5AA5eEtZSRTiacg0eceh05FFAwSSDwLy48A5TvPVzp3p1oaRnibjP5kIucLHeRb8ocSCcQq3vpe9Ahq0zJw/132","comment_is_top":false,"comment_ctime":1619429667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619429667","product_id":100053801,"comment_content":"注: 若是存在变换坐标轴的方法, 如 context.translate(), context.scale(), 则需要调整相应的判断点","like_count":0},{"had_liked":false,"id":279251,"user_name":"我系小艾","can_delete":false,"product_type":"c1","uid":1356099,"ip_address":"","ucode":"274272105939D4","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/43/5eebf2cd.jpg","comment_is_top":false,"comment_ctime":1613695926,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613695926","product_id":100053801,"comment_content":"看到Vector2D中叉积的实现一开始没明白，一直在想着叉积的几何意义是对应的四边形面积，对照着实现中是x1*y2-x2*y1完全没理解怎么是这样计算的，后面回顾前面课程中的叉乘公式顿时了然，aXb=[y1*z2 - y2*z1, -(x1*z2 - x2*z1, x1*y2 - x2*y1)]，平面上z1,z2都为0 ，代入上面aXb = [0, 0, x1*y2 - x2*y1]，所以a与b的叉积就是 x1*y2 - x2*y1。果然换个角度理解就简单了。。。","like_count":0},{"had_liked":false,"id":238758,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1351248,"ip_address":"","ucode":"3588B62A4F9534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","comment_is_top":false,"comment_ctime":1596285184,"is_pvip":true,"replies":[{"id":"88830","content":"有的，向量abc就是点p和ABC连接的线段表示向量","user_name":"作者回复","comment_id":238758,"uid":"1159792","ip_address":"","utype":1,"ctime":1597022641,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"1596285184","product_id":100053801,"comment_content":"月影老师，您好，请问三角形向量a b c三个点A B C有没有对应关系，而且a b c 的方向在图上也没有，看不明白您说的如何判断一个点在三角形内","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502846,"discussion_content":"有的，向量abc就是点p和ABC连接的线段表示向量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597022641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169110,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d6/d6/c757b62c.jpg","nickname":"白夜","note":"","ucode":"72FAE44C19F592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297773,"discussion_content":"向量a,b,c其实应该是沿一个方向（顺时针或者逆时针），依次对边进行标记的，比如AB，BC，CA；而u是表示从p指向顶点的向量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597053169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237404,"user_name":"Mingzhang","can_delete":false,"product_type":"c1","uid":1332515,"ip_address":"","ucode":"072E18F1458634","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqNxFYmldFiaT0180Po2TEbPuB3l0uZIqKb9sPWO97XicgDlaSIbkggq9yXv1vd1l7DXR4BjuqN76w/132","comment_is_top":false,"comment_ctime":1595820659,"is_pvip":false,"replies":[{"id":"87809","content":"嗯，算atan很消耗性能","user_name":"作者回复","comment_id":237404,"uid":"1159792","ip_address":"","utype":1,"ctime":1595929215,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"1595820659","product_id":100053801,"comment_content":"关于判断一个点是否在三角形内（包括边上）我曾经用代数方法做过：对每一条边而言其对应的顶点必然与要判定的点在同一侧，因此需要进行三组测试。判定函数如下：<br>&#47;**<br> * Determine whether p3 and p4 are on the same side of the segment of p1-p2<br> * @param p1<br> * @param p2<br> * @param p3<br> * @param p4<br> * returns -1 (not on the same side) | 0 (at least one is on the segment) | 1 (on the same side)<br> *&#47;<br>function onSameSide(p1=[0,0], p2=[0,0], p3=[0,0], p4=[0,0]) {<br>  let angle0 = Math.atan2(p2[1] - p1[1], p2[0] - p1[0]);<br>  let angle1 = Math.atan2(p3[1] - p1[1], p3[0] - p1[0]);<br>  let angle2 = Math.atan2(p4[1] - p1[1], p4[0] - p1[0]);<br>  let product = (angle1 - angle0) * (angle2 - angle0);<br>  if (product === 0) {<br>    return 0;<br>  }<br>  return product &gt; 0 ? 1 : -1;<br>}<br>","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502406,"discussion_content":"嗯，算atan很消耗性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595929215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332515,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqNxFYmldFiaT0180Po2TEbPuB3l0uZIqKb9sPWO97XicgDlaSIbkggq9yXv1vd1l7DXR4BjuqN76w/132","nickname":"Mingzhang","note":"","ucode":"072E18F1458634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294416,"discussion_content":"上面的函数有 bug，更新后如下：\n\n/**\n * Determine whether p3 and p4 are on the same side of the segment of p1-p2\n * @param p1\n * @param p2\n * @param p3\n * @param p4\n * returns -1 (not on the same side) | 0 (at least one is on the segment) | 1 (on the same side)\n */\nfunction onSameSide(p1=[0,0], p2=[0,0], p3=[0,0], p4=[0,0]) {\n  if (p1[0] === p2[0]) {\n    let m = p3[0] - p1[0];\n    let n = p4[0] - p1[0];\n    if (m * n === 0) {\n      return 0;\n    }\n    return m * n > 0 ? 1: -1;\n  }\n  let k = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n  let b0 = p2[1] - k * p2[0];\n  let b1 = p3[1] - k * p3[0];\n  let b2 = p4[1] - k * p4[0];\n  let p = b1 - b0;\n  let q = b2 - b0;\n  if (p * q === 0) {\n    return 0;\n  } else {\n    return p * q > 0 ? 1 : -1;\n  }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595870560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}