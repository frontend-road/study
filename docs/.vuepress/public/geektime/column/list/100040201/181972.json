{"id":181972,"title":"15丨软件设计的接口隔离原则：如何对类的调用者隐藏类的公有方法？","content":"<p>我在阿里巴巴工作期间，曾经负责开发一个统一缓存服务。这个服务要求能够根据远程配置中心的配置信息，在运行期动态更改缓存的配置，可能是将本地缓存更改为远程缓存，也可能是更改远程缓存服务器集群的IP地址列表，进而改变应用程序使用的缓存服务。</p><p>这就要求缓存服务的客户端SDK必须支持运行期配置更新，而配置更新又会直接影响缓存数据的操作，于是就设计出这样一个缓存服务Client类。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/15/1a9c02c2cea284dad584de9fd61c1f15.png?wh=462*234\" alt=\"\"></p><p>这个缓存服务Client类的方法主要包含两个部分：一部分是缓存服务方法，get()、put()、delete()这些，这些方法是面向调用者的；另一部分是配置更新方法reBuild()，这个方法主要是给远程配置中心调用的。</p><p>但是问题是，Cache类的调用者如果看到reBuild()方法，并错误地调用了该方法，就可能导致Cache连接被错误重置，导致无法正常使用Cache服务。所以必须要将reBuild()方法向缓存服务的调用者隐藏，而只对远程配置中心的本地代理开放这个方法。</p><p>但是reBuild()方法是一个public方法，<strong>如何对类的调用者隐藏类的公有方法</strong>？</p><h2>接口隔离原则</h2><p>我们可以使用接口隔离原则解决这个问题。接口隔离原则说：<strong>不应该强迫用户依赖他们不需要的方法</strong>。</p><!-- [[[read_end]]] --><p>那么如果强迫用户依赖他们不需要的方法，会导致什么后果呢？</p><p>一来，用户可以看到这些他们不需要，也不理解的方法，这样无疑会增加他们使用的难度，如果错误地调用了这些方法，就会产生bug。二来，当这些方法如果因为某种原因需要更改的时候，虽然不需要但是依赖这些方法的用户程序也必须做出更改，这是一种不必要的耦合。</p><p>但是如果一个类的几个方法之间本来就是互相关联的，就像我开头举的那个缓存Client SDK的例子，reBuild()方法必须要在Cache类里，这种情况下， 如何做到不强迫用户依赖他们不需要的方法呢？</p><p>我们先看一个简单的例子，Modem类定义了4个主要方法，拨号dail()，挂断hangup()，发送send()和接受recv()。这四个方法互相存在关联，需要定义在一个类里。</p><pre><code>class Modem {\n    void dial(String pno);\n    void hangup();\n    void send(char c);\n    void recv();\n}\n\n</code></pre><p>但是对调用者而言，某些方法可能完全不需要，也不应该看到。比如拨号dail()和挂断hangup()，这两个方式是属于专门的网络连接程序的，通过网络连接程序进行拨号上网或者挂断网络。而一般的使用网络的程序，比如网络游戏或者上网浏览器，只需要调用send()和recv()发送和接收数据就可以了。</p><p>强迫只需要上网的程序依赖他们不需要的拨号与挂断方法，只会导致不必要的耦合，带来潜在的系统异常。比如在上网浏览器中不小心调用hangup()方法，就会导致整个机器断网，其他程序都不能连接网络。这显然不是系统想要的。</p><p>这种问题的解决方法就是通过接口进行方法隔离，Modem类实现两个接口，DataChannel接口和Connection接口。</p><p>DataChannel接口对外暴露send()和recv()方法，这个接口只负责网络数据的发送和接收，网络游戏或者网络浏览器只依赖这个接口进行网络数据传输。这些应用程序不需要依赖它们不需要的dail()和hangup()方法，对应用开发者更加友好，也不会导致因错误的调用而引发的程序bug。</p><p>而网络管理程序则可以依赖Connection接口，提供显式的UI让用户拨号上网或者挂断网络，进行网络连接管理。</p><p><img src=\"https://static001.geekbang.org/resource/image/10/61/10abb120ea68d4406276ee24ccecf961.png?wh=454*373\" alt=\"\"></p><p>通过使用<strong>接口隔离原则，我们可以将一个实现类的不同方法包装在不同的接口中对外暴露</strong>。应用程序只需要依赖它们需要的方法，而不会看到不需要的方法。</p><h2>一个使用接口隔离原则优化的例子</h2><p>我们再看一个使用接口隔离原则优化设计的例子。假设我们有个门Door对象，这个Door对象可以锁上，可以解锁，还可以判断门是否打开。</p><pre><code>class Door {\n    void lock();\n    void unlock();\n    boolean isDoorOpen();\n}\n</code></pre><p>现在我们需要一个TimedDoor，一个有定时功能的门，如果门开着的时间超过预定时间，就会自动锁门。</p><p>我们已经有一个类Timer，和一个接口TimerClient：</p><pre><code>class Timer {\n    void register(int timeout, TimerClient client);\n}\n\n\ninterface TimerClient {\n    void timeout();\n}\n</code></pre><p>TimerClient可以向Timer注册，调用register()方法，设置超时时间。当超时时间到，就会调用TimerClient的timeout()方法。</p><p>那么，我们如何利用现有的Timer和TimerClient将Door改造成一个具有超时自动锁门的TimedDoor？</p><p>比较容易，且直观的办法就是，修改Door类，Door实现TimerClient接口，这样Door就有了timeout()方法，直接将Door注册给Timer，当超时的时候，Timer调用Door的timeout()方法，在Door的timeout()方法里调用lock()方法，就可以实现超时自动锁门的操作。</p><pre><code>class Door implements TimerClient {\n    void lock();\n    void unlock();\n    boolean isDoorOpen();\n    void timeout(){\n      lock();\n    }\n}\n</code></pre><p>这个方法简单直接，也能实现需求，但是问题在于使Door多了一个timeout()方法。如果这个Door类想要复用到其他地方，那么所有使用Door的程序都不得不依赖一个它们可能根本用不着的方法。同时，Door的职责也变得复杂，违反了单一职责原则，维护会变得更加困难。这样的设计显然是有问题的。</p><p>要想解决这些问题，就应该遵循接口隔离原则。事实上，这里有两个互相独立的接口，一个接口是TimerClient，用来供Timer进行超时控制；一个接口是Door，用来控制门的操作。虽然超时锁门的操作是一个完整的动作，但是我们依然可以使用接口使其隔离。</p><p>一种方法是通过委托进行接口隔离，具体方式就是增加一个适配器DoorTimerAdapter，这个适配器继承TimerClient接口实现timeout()方法，并将自己注册给Timer。适配器在自己的timeout()方法中，调用Door的方法实现超时锁门的操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/bd/19e4617b2b08eb6f1741274ece852bbd.png?wh=1128*354\" alt=\"\"></p><p>这种场合使用的适配器可能会比较重，业务逻辑比较多，如果超时的时候需要执行较多的逻辑操作，那么适配器的timeout()方法就会包含很多业务逻辑，超出了适配器的职责范围。而如果这些逻辑操作还需要使用Door的内部状态，可能还需要迫使Door做出一些修改。</p><p>接口隔离更典型的做法是使用多重继承，跟前面Modem的例子一样，TimedDoor同时实现TimerClient接口和继承Door类，在TimedDoor中实现timeout()方法，并注册到Timer定时器中。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/26/cc1d170a4be10f3dfb125291faed6126.png?wh=1070*338\" alt=\"\"></p><p>这样，使用Door的程序就不需要被迫依赖timeout()方法，Timer也不会看到Door的方法，程序更加整洁，易于复用。</p><h2>接口隔离原则在迭代器设计模式中的应用</h2><p>Java的数据结构容器类可以通过for循环直接进行遍历，比如：</p><pre><code>List&lt;String&gt; ls = new ArrayList&lt;String&gt;();\nls.add(&quot;a&quot;);\nls.add(&quot;b&quot;);\nfor(String s: ls) {\n\tSystem.out.println(s);\n}\n</code></pre><p>事实上，这种for语法结构并不是标准的Java for语法，标准的for语法在实现上述遍历时应该是这样的：</p><pre><code>for(Iterator&lt;String&gt; itr=ls.iterator();itr.hasNext();) {\n\tSystem.out.println(itr.next());\n}\n</code></pre><p>之所以可以写成上面那种简单的形式，就是因为Java提供的语法糖。Java5以后版本对所有实现了Iterable接口的类都可以使用这种简化的for循环进行遍历。而我们上面例子的ArrayList也实现了这个接口。</p><p>Iterable接口定义如下，主要就是构造Iterator迭代器。</p><pre><code>public interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n</code></pre><p>在Java5以前，每种容器的遍历方法都不相同，在Java5以后，可以统一使用这种简化的遍历语法实现对容器的遍历。而实现这一特性，主要就在于Java5通过Iterable接口，将容器的遍历访问从容器的其他操作中隔离出来，使Java可以针对这个接口进行优化，提供更加便利、简洁、统一的语法。</p><h2>小结</h2><p>我们再回到开头那个例子，如何让缓存类的使用者看不到缓存重构的方法，以避免不必要的依赖和方法的误用。答案就是使用接口隔离原则，通过多重继承的方式进行接口隔离。</p><p>Cache实现类BazaCache（Baza是当时开发的统一缓存服务的产品名）同时实现Cache接口和CacheManageable接口，其中Cache接口提供标准的Cache服务方法，应用程序只需要依赖该接口。而CacheManageable接口则对外暴露reBuild()方法，使远程配置服务可以通过自己的本地代理调用这个方法，在运行期远程调整缓存服务的配置，使系统无需重新部署就可以热更新。</p><p>最后的缓存服务SDK核心类设计如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/63/9f/6318de0ad618153d520adff4959b169f.jpg?wh=742*418\" alt=\"\"></p><p>当一个类比较大的时候，如果该类的不同调用者被迫依赖类的所有方法，就可能产生不必要的耦合。对这个类的改动也可能会影响到它的不同调用者，引起误用，导致对象被破坏，引发bug。</p><p>使用接口隔离原则，就是定义多个接口，不同调用者依赖不同的接口，只看到自己需要的方法。而实现类则实现这些接口，通过多个接口将类内部不同的方法隔离开来。</p><h2>思考题</h2><p>在你的开发实践中，你看到过哪些地方使用了接口隔离原则？你自己开发的代码，哪些地方可以用接口隔离原则优化？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"14 | 软件设计的单一职责原则：为什么说一个类文件打开最好不要超过一屏？","id":180641},"right":{"article_title":"16 | 设计模式基础：不会灵活应用设计模式，你就没有掌握面向对象编程","id":182917}},"comments":[{"had_liked":false,"id":286872,"user_name":"lordrobert","can_delete":false,"product_type":"c1","uid":1056368,"ip_address":"","ucode":"C14B45BCC32F9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/70/35403a95.jpg","comment_is_top":false,"comment_ctime":1617644295,"is_pvip":false,"replies":[{"id":"104165","content":"是冲突的。<br>但是文中举的几个例子，都很难实现单一职责原则，因为类的几组方法（也就是几个职责）之间强耦合，难以拆分。<br><br>原则是指导我们设计的，但是设计的时候又必须面对现实的困难做出权衡选择，所以就会有“冲突”的感觉。<br><br>后面组件设计原则一篇，这种“冲突”感更加强烈。<br><br>这也是有时候称软件设计为“艺术”的原因，因为软件设计师并不能机械地遵循什么原则、方法就能设计出好的软件，软件设计是软件设计师在理想与现实、现在与未来、审美与实用、代价与收益各种冲突中权衡、妥协、选择的产物。<br><br>软件设计是一个非常依赖人的直觉的工作，技术学习与实践的过程就是不断培养、优化自己直觉的过程。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1617676596,"ip_address":"","comment_id":286872,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53157251847","product_id":100040201,"comment_content":"慧哥，请教下，接口隔离原则，和上一节说的单一职责原则是否有点“冲突”。需要进行接口隔离的类，感觉必然是有多个引起变化的原因，如果这样，单一职责运用下，设计成两个类，就不需要接口隔离了。既然有这两个原则，问题出在哪里？","like_count":13,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518115,"discussion_content":"是冲突的。\n但是文中举的几个例子，都很难实现单一职责原则，因为类的几组方法（也就是几个职责）之间强耦合，难以拆分。\n\n原则是指导我们设计的，但是设计的时候又必须面对现实的困难做出权衡选择，所以就会有“冲突”的感觉。\n\n后面组件设计原则一篇，这种“冲突”感更加强烈。\n\n这也是有时候称软件设计为“艺术”的原因，因为软件设计师并不能机械地遵循什么原则、方法就能设计出好的软件，软件设计是软件设计师在理想与现实、现在与未来、审美与实用、代价与收益各种冲突中权衡、妥协、选择的产物。\n\n软件设计是一个非常依赖人的直觉的工作，技术学习与实践的过程就是不断培养、优化自己直觉的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617676596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374161,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f7/d1/830b8563.jpg","nickname":"李勇","note":"","ucode":"241090A4AEE58A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566187,"discussion_content":"很好的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650624785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173703,"user_name":"任鑫","can_delete":false,"product_type":"c1","uid":1142025,"ip_address":"","ucode":"9803EB15B634C3","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/09/ffeabc27.jpg","comment_is_top":false,"comment_ctime":1579664413,"is_pvip":false,"replies":[{"id":"67837","content":"🐂","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580270488,"ip_address":"","comment_id":173703,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35939402781","product_id":100040201,"comment_content":"设计一个类大致和现实中设计一个职能部门差不多，需要考虑两方面需求：<br>        （一）是优化资源调度、使用效率，提高效率，减少重复劳动。<br>        （二）是便于对外提供功能服务，使功能的使用者能够清晰明确的使用到自己所需的功能，而不必纠缠其他不必要的功能。<br>        为了满足第一条，软件设计上要注意代码的“高内聚”，就是将关联密切的功能放在一个类里面，以提高重用性；现实世界中，政府部门和企业内部需要将功能类似的组织合并，具体可以参照建国以来国务院下属部委的调整，当然这些调整的原因是多方面的，但其中有一些部门的合并确实考虑到了第一条，例如卫生健康委员会的设立和农业农村部的设立。<br>        为了满足第二条，我们国家设置了“一个单位，两块牌子”的机构，例如今年频频亮剑的“中纪委国家监委”；在软件设计上，功能的调用者不直接通过依赖实现类的方式完成功能调用，而是依赖功能清晰，调用明确的接口，而多个功能接口可以由一个功能内聚的类提供实现。","like_count":8,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482175,"discussion_content":"🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580270488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165515,"user_name":"alex","can_delete":false,"product_type":"c1","uid":1173753,"ip_address":"","ucode":"C7572007957F1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo435IStLENgDxYPDykxxE9CP6Tye3xPQ584UeNqW21pU62ic6vibrGpNjKVbhulVehVG5IGvicSTaZg/132","comment_is_top":false,"comment_ctime":1577250253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31642021325","product_id":100040201,"comment_content":"老师能加个代码么？自动锁门那块","like_count":7},{"had_liked":false,"id":174649,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1580308140,"is_pvip":false,"replies":[{"id":"67898","content":"每种数据容器实现类的内部都是不同的，但是它们都可以通过Iterable遍历，Client无需关注容器类的实现就能用统一的方式遍历容器。而Iterable接口也看不到容器类的内部实现，所以是一种接口隔离。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580359497,"ip_address":"","comment_id":174649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27350111916","product_id":100040201,"comment_content":"老师 Iterable 为什么是属于接口隔离原则这个没太理解 能再详细讲一下吗","like_count":6,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482476,"discussion_content":"每种数据容器实现类的内部都是不同的，但是它们都可以通过Iterable遍历，Client无需关注容器类的实现就能用统一的方式遍历容器。而Iterable接口也看不到容器类的内部实现，所以是一种接口隔离。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580359497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175090,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1580551536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18760420720","product_id":100040201,"comment_content":"接口隔离和单一职责是一体两面的，一个面向调用者，一个面向实现者","like_count":5},{"had_liked":false,"id":168272,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1578040466,"is_pvip":false,"replies":[{"id":"65458","content":"👍","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1578199221,"ip_address":"","comment_id":168272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18757909650","product_id":100040201,"comment_content":"想起了,宝玉所说的道,术和器的概念<br>感觉&quot;道&quot;就是面向对象的的几个特性,封装,继承和多态<br>&quot;术&quot;就是以道为根基,为理论依据 发展而来的 各种模式, 用来解决软件开发中中的各种违背软件设计原则的方法.<br>所有的变换皆是&quot;道&quot;而引起的,没有道,就没有术比如少了多态这个道,各种设计模式将会减少大半甚至消亡.","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480178,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578199221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254512,"user_name":"编程爱好者","can_delete":false,"product_type":"c1","uid":1565509,"ip_address":"","ucode":"E91C7D604B73AF","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/45/d4d3c265.jpg","comment_is_top":false,"comment_ctime":1603121184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193055776","product_id":100040201,"comment_content":"多思多想，代码设计里面有很多细节，建筑领域设计师与施工人员跟架构师跟码工有很多相似的工作内容，李老师在架构领域真的内功深厚，如果从哲学角度再进行一步抽象，那就是大师了","like_count":2},{"had_liked":false,"id":250297,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601016281,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"10190950873","product_id":100040201,"comment_content":"接口隔离原则看上去比较简单，但是比较依赖 Java 语言 interface 多重继承的特性。<br><br>试着写一下 TimerDoor 的代码，适配器模式：<br><br>class DoorTimerAdapter implements TimerClient {<br>    Door door;<br>    Timer timer;<br>    int timeout;<br>    public DoorTimerAdapter(Door door, Timer timer, int timeout) {<br>       this.door = door;<br>       this.timer = timer;<br>       this.timeout = timeout;<br>       timer.register(timeout, this);<br>    }<br>    public void timeout() {<br>        door.lock();<br>    }<br>}<br><br>多重继承：<br><br><br>class Timer {<br>    public Timer() {<br>    }<br><br>    void register(int timeout, TimerClient client) {<br>    }<br>}<br><br>interface TimerClient {<br>    public void timeout();<br>}<br><br>class Door {<br>    public Door() {<br>    }<br>    void lock() {<br>    }<br>    void unlock() {<br>    }<br>    boolean isDoorOpen() {<br>        return false;<br>    }<br>}<br><br>class TimedDoor extends Door implements TimerClient {<br>    private int timeout;<br>    private Timer timer;<br>    public TimedDoor() {<br>        this.timer = new Timer();<br>        this.timeout = 10;<br>        timer.register(timeout, this);<br>    }<br><br>    public void timeout() {<br>        lock();<br>    }<br>}<br><br>不知道写的对不对，抛砖引玉。<br><br>两次都把 timer.register() 写在了构造函数里面，有点别扭。","like_count":2,"discussions":[{"author":{"id":1007569,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5f/d1/faf32296.jpg","nickname":"pinteressante","note":"","ucode":"C17A89E655CC84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351138,"discussion_content":"你好,我没看懂你的代码里面DoorTimerAdapter的作用可以解释一下吗? 看起来一个timeDoor就已经OK了?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614162289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200481,"user_name":"FreezeSoul","can_delete":false,"product_type":"c1","uid":1015930,"ip_address":"","ucode":"0B67142C4EA3D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/7a/02fdf1a2.jpg","comment_is_top":false,"comment_ctime":1585609476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880576772","product_id":100040201,"comment_content":"timer适配器采用组合，而接口隔离采用集成，在门的这个例子里是不是违背了组合优于继承的原则","like_count":1},{"had_liked":false,"id":174648,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1580308024,"is_pvip":false,"replies":[{"id":"67899","content":"CacheManageable这个接口不对使用者开放，所以无法访问。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580359558,"ip_address":"","comment_id":174648,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5875275320","product_id":100040201,"comment_content":"问一下老师  最后的小结  如果使用者 调用CacheManageable这个接口的reBuild  不还是被访问到了吗 ","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482475,"discussion_content":"CacheManageable这个接口不对使用者开放，所以无法访问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580359558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007569,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5f/d1/faf32296.jpg","nickname":"pinteressante","note":"","ucode":"C17A89E655CC84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351139,"discussion_content":"同问, 老师讲到这里了就差一段代码了, 为啥不加一下啊..  有点欲言又止的感觉.. 让我好几次都觉得: 我马上就懂了, 只要让我看看这个例子的代码....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614162389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167468,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d0/6c/2e7dd298.jpg","nickname":"卓明","note":"","ucode":"6AB57EE1DF3CEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326314,"discussion_content":"打个client 包，不就一起打出去了吗，这个场景怎么做到不对使用者开放的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605578005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173543,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1579592146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874559442","product_id":100040201,"comment_content":"感觉go中的无侵入式的接口方式在这方面更显得自然和简单","like_count":1},{"had_liked":false,"id":166196,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1577414415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872381711","product_id":100040201,"comment_content":"没想过，说实话 在写代码的时候太过于赶进度，没有对代码进行重构，更没有考虑到自己的设计的这个类如果方法都集中在一起不方便同事调用，让同事产生困惑。","like_count":1},{"had_liked":false,"id":165417,"user_name":"niuniu","can_delete":false,"product_type":"c1","uid":1254477,"ip_address":"","ucode":"F63047EB77448A","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/4d/29a93491.jpg","comment_is_top":false,"comment_ctime":1577235668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872202964","product_id":100040201,"comment_content":"我觉得关键是合理的定义接口的粒度，实践中不同的场景可能同时需要用到同一个类的多个接口，还是要进行强转，让调用方很不爽。","like_count":1},{"had_liked":false,"id":349939,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1656464754,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656464754","product_id":100040201,"comment_content":"使用接口隔离最主要得目的还是对调用者友好(一个是暴露的api,一个是，抽取统一方式，相同的行为)，否则优先考虑组合。看到说和单一职责有点违背，这里的理解是，被隔离的接口确实是这个对象的行为，实属无奈之举？","like_count":0},{"had_liked":false,"id":272537,"user_name":"pinteressante","can_delete":false,"product_type":"c1","uid":1007569,"ip_address":"","ucode":"C17A89E655CC84","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/d1/faf32296.jpg","comment_is_top":false,"comment_ctime":1610115167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610115167","product_id":100040201,"comment_content":"请问如何理解 timeDoor 继承了door 但是他没有大于等于door, 也就是正方形继承长方形的问题.","like_count":0},{"had_liked":false,"id":173141,"user_name":"InfoQ_e077cb303519","can_delete":false,"product_type":"c1","uid":1390669,"ip_address":"","ucode":"2CCA309DB2EF46","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLAK6F4BFT5ewhJEeZrjmRx5HxP8tvnNpJcpLlotHiadp0s6aL3d7LfMHEuQP6tibu80wUy8micVu4oQ/132","comment_is_top":false,"comment_ctime":1579435151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579435151","product_id":100040201,"comment_content":"接口隔离原则，一个类中有不同的业务类型的处理方法，有的场景只需要其中一种业务类型的处理方法，为了在调用时隔离其他方法，可以通过接口定义不同业务类型抽象方法，然后调用方通过该接口进行多态引用","like_count":0},{"had_liked":false,"id":167176,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1577707993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577707993","product_id":100040201,"comment_content":"又加深理解了，优秀","like_count":0},{"had_liked":false,"id":166785,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1577594860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577594860","product_id":100040201,"comment_content":"接口隔离原则感觉比较简单，依赖什么就只定义需要的接口，代价是相似的接口被定义好几份，可以用接口间的继承一定程度上消除重复代码。","like_count":0},{"had_liked":false,"id":165371,"user_name":"山猫","can_delete":false,"product_type":"c1","uid":1466682,"ip_address":"","ucode":"004F622AEDA906","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/3a/a259c187.jpg","comment_is_top":false,"comment_ctime":1577231475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577231475","product_id":100040201,"comment_content":"接口隔离原则好是好，就是写着写着就发现接口越来越多，越来越多，甚至会超过本身类的数量，而且每个接口会只使用一次，这样不如直接用外观模式的IDE自动完成了。<br><br>我现在用接口主要用于一些模型的规范性和方法参数规范性。如果需要文章中的功能，会拆开为两个类来写，而不是用两个接口加两个类。<br><br>不知道我这种设计是否更好一些，或者这个真的和使用场景或项目大小吧。","like_count":0}]}