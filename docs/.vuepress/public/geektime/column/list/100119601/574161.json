{"id":574161,"title":"13｜组件表与里（下）：用接口的思路设计开发React组件","content":"<p>你好，我是宋一玮，欢迎回到React应用开发的学习。</p><p>上节课一开始就提到了，我们会用两节课的时间学习组件的“面子”和“里子”。那你可能会问了，上节课讲到的React单向数据流算是“面子”还是“里子”呢？我先卖个关子，学完这节课你就有答案了。</p><p>在面向对象编程实践中，接口就是天然的“面子”，接口实现就是“面子”后面的“里子”。那么这节课，我们就要借鉴面向接口编程的思路，一边探讨在React应用开发中接口会以什么形式存在，一边继续上节课的 <code>oh-my-kanban</code> 大重构。在这节课的后半段，我们还会为 <code>oh-my-kanban</code> 加入基础的管理员功能。</p><p>当学习完这节课，你会对React组件的分工和交互有更深入的理解，同时也会收获一个好用的看板应用。</p><p>下面我们开始这节课的内容。</p><h2>面向接口编程</h2><p>现代软件编程的一大最佳实践是面向接口编程。<strong>所谓软件接口</strong>（Software Interface）<strong>，就是两个或多个模块间用来交换信息的一个共享的边界</strong>。</p><p>前端组件也有接口的概念，不同框架对接口的定义和使用都有所不同。这里举三个例子。</p><p>第一个例子，Angular里的Form，是一个命令式接口，开发者一般不需要自己实现它，因为Angular框架里已经内置了实现：</p><!-- [[[read_end]]] --><pre><code class=\"language-typescript\">interface Form {\n  addControl(dir: NgControl): void\n  removeControl(dir: NgControl): void\n  getControl(dir: NgControl): FormControl\n  addFormGroup(dir: AbstractFormGroupDirective): void\n  removeFormGroup(dir: AbstractFormGroupDirective): void\n  getFormGroup(dir: AbstractFormGroupDirective): FormGroup\n  updateModel(dir: NgControl, value: any): void\n}\n</code></pre><p>第二个例子，Android里的ExpandableListAdapter，用于数据绑定：</p><pre><code class=\"language-java\">public interface ExpandableListAdapter {\n  Object getChild(int groupPosition, int childPosition);\n  View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent);\n  Object getGroup(int groupPosition);\n  View getGroupView(int groupPosition, boolean isExpanded,&nbsp;View&nbsp;convertView,&nbsp;ViewGroup&nbsp;parent);\n  void onGroupCollapsed(int groupPosition);\n  void onGroupExpanded(int groupPosition);\n  void registerDataSetObserver(DataSetObserver observer);\n  void unregisterDataSetObserver(DataSetObserver observer);\n}\n</code></pre><p>第三个例子，Fultter里甚至每个class默认都有一个隐式的interface。</p><p>然而React从编程语言和框架层面都没有接口这个概念，那我们<strong>为什么还要把面向接口编程拉进这节课呢？</strong></p><p>是的，我们不需要继承、多态，不需要去模拟JS语言里本没有的interface语法，也不用去纠结TypeScript的interface只能在编译阶段工作。我们需要的，<strong>只是面向接口的编程思想</strong>。可以用以下三点来概括这种编程思想。</p><p>第一，接口是抽象。《C++程序设计语言（第四版）》开篇就引用了计算机科学家戴维·韦勒（David Wheeler）的名言：“在计算机科学里，所有问题都可以通过引入一个新的抽象层来解决，除了抽象层过多这个问题本身”。从接口的角度，我们可以这样理解这句名言：</p><ul>\n<li>接口用途广泛；</li>\n<li>接口容易被滥用；</li>\n<li>接口即使有被滥用的风险，但它的重要性依然是不可替代的。</li>\n</ul><p>第二，接口是边界。“任何一个优雅的接口后面，都有一堆龌龊的实现。”这个段子多少有点极端，但很好地强调了以下几点：</p><ul>\n<li>接口是为外部设计的；</li>\n<li>接口对外部隐藏了内部实现；</li>\n<li>接口的调用者只需要知道接口的用法，不需要关注内部实现；</li>\n<li>接口的实现者在开发内部实现时，与外部环境的交互应集中体现在接口上。</li>\n</ul><p>第三，接口是契约。现代JS开发很依赖于第三方库，不知道你有没有遇到过一种悲剧，本来用得好好的库，版本更新时引入了破坏性更新，然后你的应用也跟着被破坏了。这就好比，你花了大价钱办了游泳池的年卡，游了半年，有一天它突然改建成健身房了，老板狡辩说一样是强身健体，但现实是，你的自由泳还没学会呢！这就体现了契约的重要性：</p><ul>\n<li>越是广泛使用的接口，它就越是一种契约；</li>\n<li>设计接口时，应考虑哪些功能是不会轻易改变的，哪些是有可能修改的；</li>\n<li>实现者应该在保持接口不变的情况下更新内部实现；</li>\n<li>接口的实现者破坏契约，可能会给调用者带来成倍的风险或损失。</li>\n</ul><p>好吧，抽象、边界、契约，接口确实很重要。但这与React又有什么关系呢？别急，下面马上揭晓。</p><h2>React组件的接口</h2><p>做个问卷调查，当你拿到一个开源组件库中的React组件，你会怎样使用它？现在你有三个选择：</p><ol>\n<li>读文档；</li>\n<li>读源码；</li>\n<li>根据IDE的代码提示直接试写代码。</li>\n</ol><p>据我了解，最常见的方式还是读文档。比如<a href=\"https://ant-design.gitee.io/components/button-cn/#API\">AntD的Button按钮API文档</a>，里面会详细列举组件props的用法，其他开源React组件库也是类似的做法。这正说明了，props就是一个React组件的对外接口。了解了组件的props，就了解了如何使用这个组件。</p><p>另外，子组件children也是一种prop，可以成为接口的一部分。这也包括之前学过的<a href=\"https://time.geekbang.org/column/article/573143\">真·子组件</a>。有许多其他JS前端框架还提供了事件接口，但在React中是没有的，取而代之的是通过props传递事件处理回调函数。</p><p>这里要注意一下context。如果组件内部消费了某个context，那这个context就成为了组件的另一个输入，可以认为它是组件的隐式接口。</p><p>虽然我们大部分时候是在为自己的React应用开发组件，并没有在开发公共React组件库，但依旧可以用接口的概念去指导组件props的设计和使用。</p><h2>React组件的接口实现</h2><p>到这节课为止，我们学习的所有React概念都可以是React组件的接口实现，包括props、state、context、事件处理、Hooks、子组件、组件样式等。</p><p>在设计一个React组件时，开发者需要斟酌外部接口和内部实现的关系，这包括但不限于：</p><ul>\n<li>哪些字段作为props暴露出来？</li>\n<li>哪些抽取为context从全局获取？</li>\n<li>哪些数据实现为组件内部的state？</li>\n</ul><p>这些问题我们在接下来的 <code>oh-my-kanban</code> <strong>大重构第二步</strong>中一一揭晓。</p><h2>重构第二步：将逻辑转移到各组件中</h2><p>这是<a href=\"https://time.geekbang.org/column/article/571276\">上节课</a>大重构第一步的后续。在重构第二步，我们会把KanbanCard逻辑转移到KanbanColumn中，把KanbanColumn逻辑转移到KanbanBoard中。</p><h3>2.1 将KanbanCard逻辑转移到KanbanColumn中</h3><p>首先，我们重新审视一下KanbanColumn的<strong>职责</strong>。</p><p>目前KanbanColumn是一个具有样式的容器，能显示标题和列表，能处理拖拽事件。但有一个尴尬的现实，KanbanColumn自身并没有限定它必须展示KanbanCard的列表，也没有限定拖拽对象必须是KanbanCard。</p><p>这意味着KanbanColumn和KanbanCard是极为松耦合的，将KanbanColumn和KanbanCard组合在一起，就成了它父组件的职责。</p><p>假设我们从产品经理那里拿到了一个《需求文档v11.5.最终.绝对不改.就改两张图.docx》，从目前的产品需求来看，KanbanColumn与KanbanCard是强包含关系，在KanbanColumn中封装KanbanCard的逻辑更有利于降低KanbanColumn父组件的复杂度，父组件甚至并不需要知道KanbanCard的存在，只需要关注KanbanColumn的接口即可。</p><p>那么在重构的这一步，我们就需要把KanbanCard相关的逻辑从App转移到KanbanColumn中。</p><p>VSCode的自动重构功能没有那么智能，因此接下来的步骤要请你手工进行了。手工重构不出错的一个小技巧是<strong>“少吃多餐”，即把一个大的重构任务分解成若干小的步骤，确保每个步骤是可验证的</strong>。重构开始前，建议你提前在命令行中运行 <code>npm start</code> ，每当源码有改动，浏览器中的页面会自动热更新，为你提供实时反馈。</p><p>先来到src/KanbanColumn.js，为KanbanColumn组件增加一个cardList属性，默认值为空数组，用来接收卡片列表数据。</p><p>然后导入KanbanCard组件，从App组件中拷过来与之相关的JSX代码，循环渲染cardList数组中的每条卡片数据。</p><p>注意，KanbanCard用到了setDraggedItem函数，先别急着把拖拽卡片的逻辑移过来，现在把setDraggedItem从KanbanColumn的props传进来就好。添加新卡片的逻辑也不着急，暂时保留children属性。代码如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/33/78/332434453a7e44498c18ffaedeee2578.jpg?wh=692x962\" alt=\"\"></p><p>再来到src/App.js中。KanbanColumn的接口变了，在App中的调用方式当然也要跟着变，记得在这边的JSX中删除todoList循环渲染的代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/52/b1a34fa53e5d9d62937cf3454f691852.jpg?wh=663x525\" alt=\"\"></p><p>看一下浏览器中的页面，一切正常。那我们继续，把src/App.js中另外两个看板列也更新成新的props：</p><pre><code class=\"language-javascript\">return (\n  &lt;KanbanBoard&gt;\n    {/**/}\n    &lt;KanbanColumn\n      bgColor={COLUMN_BG_COLORS.ongoing}\n      title=\"进行中\"\n      setDraggedItem={setDraggedItem}\n      setIsDragSource={(isSrc) =&gt; setDragSource(isSrc ? COLUMN_KEY_ONGOING : null)}\n      setIsDragTarget={(isTgt) =&gt; setDragTarget(isTgt ? COLUMN_KEY_ONGOING : null)}\n      onDrop={handleDrop}\n      cardList={ongoingList}\n    /&gt;\n    &lt;KanbanColumn\n      bgColor={COLUMN_BG_COLORS.done}\n      title=\"已完成\"\n      setDraggedItem={setDraggedItem}\n      setIsDragSource={(isSrc) =&gt; setDragSource(isSrc ? COLUMN_KEY_DONE : null)}\n      setIsDragTarget={(isTgt) =&gt; setDragTarget(isTgt ? COLUMN_KEY_DONE : null)}\n      onDrop={handleDrop}\n      cardList={doneList}\n    /&gt;\n&nbsp; &lt;/KanbanBoard&gt;\n);\n</code></pre><p>这样就把KanbanCard的逻辑都转移到了KanbanColumn中。接下来，还要继续转移添加新卡片的逻辑。我们依旧把各个看板列看作是同一种组件，把“添加新卡片”抽象为KanbanColumn的一个可选功能。</p><p>回到src/KanbanColumn.js，为KanbanColumn添加一个canAddNew属性，默认值为false。</p><p>当canAddNew设为true时，KanbanColumn将展示“添加新卡片”按钮，点击这个按钮的后续操作也由KanbanColumn完成。导入KanbanNewCard组件，这样我们就可以把showAdd这个state，handleAdd、handleSubmit函数，和“添加新卡片”按钮、条件渲染KanbanNewCard的JSX代码都拷过来。</p><p>有一个例外，handleSubmit中需要一段向卡片列表添加数据的逻辑，我们还是希望从外面传进来，为此我们需要再加入一个onAdd属性。这时children属性就没用了，我们可以放心删掉它。代码如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/12/15/12923fa71efe7e1b7532cf2237f5b615.jpg?wh=680x1132\" alt=\"\"></p><p>在src/App.js中删掉刚才已经封装到KanbanColumn中的逻辑，只为“待处理”看板列设置canAddNew为true，并传入所需的onAdd回调函数：</p><p><img src=\"https://static001.geekbang.org/resource/image/06/5a/0640afce20f486a7525b51ca07be305a.jpg?wh=676x986\" alt=\"\"></p><p>好了，目前只有KanbanColumn具有KanbanCard、KanbanNewCard的知识了，App不再关心看板卡片组件，只需要把数据和回调函数通过props传给三个KanbanColumn即可。“读取中”看板列比较特殊，没有数据传入，所以也不会展示卡片列表。</p><h3>2.2 将KanbanColumn逻辑转移到KanbanBoard中</h3><p>在上一步，KanbanColumn与KanbanCard的强包含关系为重构提供了正当的理由。相比之下，KanbanBoard与KanbanColumn之间的关系好像没有那么强，但我们可以换个角度考虑。</p><p>目前一共有四种KanbanColumn，它们之间虽然是平级关系，但互相的逻辑关联还是比较强的，这包括读取状态、代表步骤、拖拽起点和放置目标，这些逻辑比起App，放在KanbanBoard中内聚性更强些。</p><p>说干就干，这一步的重构，我们会把KanbanColumn相关的逻辑从App转移到KanbanBoard中。</p><p>在正式开始这一步重构之前，容我先做一个小改动。把创建单个卡片数据对象的职责从App一路转移到KanbanNewCard中，这样App就只负责更改看板列数组。</p><p>来到src/App.js，为了代码清晰些，姑且给handleSubmit函数改个名：</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/a9/e76934fce232yy6411661acdd03cyya9.jpg?wh=668x570\" alt=\"\"></p><p>再是src/KanbanColumn.js：</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/aa/1a5e84b07e4d63499abd2b16a8388baa.jpg?wh=660x188\" alt=\"\"></p><p>最后来到src/KanbanNewCard.js，在这里创建新卡片数据对象：</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/91/2e62b7fc868e521f50cd7a637c427a91.jpg?wh=664x210\" alt=\"\"></p><p>现在查看浏览器，页面应该依然可以正常工作。</p><p>来到src/KanbanBoard.js，我们对KanbanBoard组件直接做一次大改动，把4个KanbanColumn，以及拖拽的逻辑都拷进来。KanbanBoard的props里删去children，增加isLoading、三个看板列分别的数组数据，onAdd、onDrop直接透传进来：</p><pre><code class=\"language-javascript\">import KanbanColumn from './KanbanColumn';\n\n// ...\n\nconst COLUMN_BG_COLORS = {\n&nbsp; loading: '#E3E3E3',\n&nbsp; todo: '#C9AF97',\n&nbsp; ongoing: '#FFE799',\n&nbsp; done: '#C0E8BA'\n};\nconst COLUMN_KEY_TODO = 'todo';\nconst COLUMN_KEY_ONGOING = 'ongoing';\nconst COLUMN_KEY_DONE = 'done';\n\nexport default function KanbanBoard({\n&nbsp; isLoading = true,\n&nbsp; todoList,\n&nbsp; ongoingList,\n&nbsp; doneList,\n&nbsp; onAdd,\n&nbsp; onDrop\n}) {\n&nbsp; const [draggedItem, setDraggedItem] = useState(null);\n&nbsp; const [dragSource, setDragSource] = useState(null);\n&nbsp; const [dragTarget, setDragTarget] = useState(null);\n\n&nbsp; return (\n&nbsp; &nbsp; &lt;main css={kanbanBoardStyles}&gt;\n&nbsp; &nbsp; &nbsp; {isLoading ? (\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;KanbanColumn title=\"读取中...\" bgColor={COLUMN_BG_COLORS.loading} /&gt;\n&nbsp; &nbsp; &nbsp; ) : (&lt;&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;KanbanColumn\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; canAddNew\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bgColor={COLUMN_BG_COLORS.todo}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title=\"待处理\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setDraggedItem={setDraggedItem}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setIsDragSource={(isSrc) =&gt; setDragSource(isSrc ? COLUMN_KEY_TODO : null)}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setIsDragTarget={(isTgt) =&gt; setDragTarget(isTgt ? COLUMN_KEY_TODO : null)}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onAdd={onAdd}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onDrop={onDrop}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cardList={todoList}\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;KanbanColumn\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bgColor={COLUMN_BG_COLORS.ongoing}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title=\"进行中\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {/**/}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onDrop={onDrop}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cardList={ongoingList}\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;KanbanColumn\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bgColor={COLUMN_BG_COLORS.done}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title=\"已完成\"\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {/**/}\n          onDrop={onDrop}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n          cardList={doneList}\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;\n&nbsp; &nbsp; &nbsp; &lt;/&gt;)}\n&nbsp; &nbsp; &lt;/main&gt;\n&nbsp; );\n}\n</code></pre><p>在src/App.js中移除相关代码，handleDrop函数因为访问不到那三个与拖拽相关的state了，暂时先替换成一个空函数传给onDrop：</p><p><img src=\"https://static001.geekbang.org/resource/image/98/73/9874a0744c05176a0b97dd6775yy8073.jpg?wh=676x1128\" alt=\"\"></p><p>这时查看浏览器，应用除了拖拽卡片不能生效，其他功能依旧正常。</p><p>好，我们继续修复拖拽功能。在src/KanbanBoard.js的KanbanBoard组件上加一个onRemove属性，用来从源看板列中移除卡片数据；再复用onAdd属性，调整一下回调函数的参数个数，用来向目标看板列中添加卡片数据。</p><p>这时就可以把原来的handleDrop函数拿进来了：</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/52/b695f94bb15cyy90b1acaed393285c52.jpg?wh=692x1734\" alt=\"\"></p><p>回到src/App.js，删除KanbanColumn相关的代码。这下App组件只需要把三个看板列的数据，以及修改数据的回调函数传给KanbanBoard，其他就不用管了。KanbanBoard具有所有KanbanColumn的知识，只要拿到props，就能展示KanbanColumn，并提供卡片拖拽功能了。</p><p>目前src/App.js的完整代码如下：</p><pre><code class=\"language-javascript\">/** @jsxImportSource @emotion/react */\nimport React, { useEffect, useState } from 'react';\n// ...\nimport KanbanBoard, {\n&nbsp; COLUMN_KEY_DONE,\n&nbsp; COLUMN_KEY_ONGOING,\n&nbsp; COLUMN_KEY_TODO,\n} from './KanbanBoard';\n\nconst DATA_STORE_KEY = 'kanban-data-store';\n\nfunction App() {\n&nbsp; const [todoList, setTodoList] = useState([/**/]);\n&nbsp; const [ongoingList, setOngoingList ] = useState([/**/]);\n&nbsp; const [doneList, setDoneList ] = useState([/**/]);\n&nbsp; const [isLoading, setIsLoading] = useState(true);\n&nbsp; // ...\n&nbsp; const updaters = {\n&nbsp; &nbsp; [COLUMN_KEY_TODO]: setTodoList,\n&nbsp; &nbsp; [COLUMN_KEY_ONGOING]: setOngoingList,\n&nbsp; &nbsp; [COLUMN_KEY_DONE]: setDoneList\n&nbsp; };\n&nbsp; const handleAdd = (column, newCard) =&gt; {\n&nbsp; &nbsp; updaters[column]((currentStat) =&gt; [newCard, ...currentStat]);\n&nbsp; };\n&nbsp; const handleRemove = (column, cardToRemove) =&gt; {\n&nbsp; &nbsp; updaters[column]((currentStat) =&gt;\n&nbsp; &nbsp; &nbsp; currentStat.filter((item) =&gt; !Object.is(item, cardToRemove))\n&nbsp; &nbsp; );\n&nbsp; };\n\n&nbsp; return (\n&nbsp; &nbsp; &lt;div className=\"App\"&gt;\n&nbsp; &nbsp; &nbsp; &lt;header className=\"App-header\"&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; {/**/}\n&nbsp; &nbsp; &nbsp; &lt;/header&gt;\n&nbsp; &nbsp; &nbsp; &lt;KanbanBoard\n&nbsp; &nbsp; &nbsp; &nbsp; isLoading={isLoading}\n&nbsp; &nbsp; &nbsp; &nbsp; todoList={todoList}\n&nbsp; &nbsp; &nbsp; &nbsp; ongoingList={ongoingList}\n&nbsp; &nbsp; &nbsp; &nbsp; doneList={doneList}\n&nbsp; &nbsp; &nbsp; &nbsp; onAdd={handleAdd}\n&nbsp; &nbsp; &nbsp; &nbsp; onRemove={handleRemove}\n&nbsp; &nbsp; &nbsp; /&gt;\n&nbsp; &nbsp; &lt;/div&gt;\n&nbsp; );\n}\n\nexport default App;\n</code></pre><p>恭喜你！截至目前，oh-my-kanban的各个组件边界清晰、各司其职，已经是合格的接口了！当这些组件在一起工作时，数据流向也更显著了。你可以把<a href=\"https://time.geekbang.org/column/article/571276\">第12节课</a>以前的代码与现在的代码做个对比，回味一下完成重构（折腾）的喜悦。</p><p>重构到这里就告一段落了，接下来我们需要回顾整个过程，看看我们在其中学到的新技巧，以及解决了什么问题。</p><h2>状态提升</h2><p>事实上我们还可以继续重构，但是也应该知道重构其实是没有尽头的，一般而言达到重构目标就该收手了。</p><p>这里罗列一下oh-my-kanban现有组件中的state。</p><pre><code class=\"language-markdown\">App\n - todoList\n - ongoingList\n - doneList\n - isLoading\n\nKanbanBoard\n - draggedItem\n - dragSource\n - dragTarget\n\nKanbanColumn\n - showAdd\n\nKanbanCard\n - displayTime\n\nKanbanNewCard\n - title\n</code></pre><p>前面提到过，state是组件的内部实现。这么一看，KanbanColumn、KanbanCard、KanbanNewCard还挺符合的。KanbanBoard的draggedItem稍有特殊，它的state更新函数setDraggedItem是通过props传递给KanbanColumn调用的。</p><p>App的情况又有不同。它的四个state都通过props传给了KanbanBoard，同时它还把三个看板列数组的state更新函数做了封装，把Add和Remove的回调函数下放给了KanbanBoard和KanbanColumn。</p><p>重构上头的你跃跃欲试：“能把App的四个state转移到KanbanBoard里吗？”</p><p>如果这样做，就意味着你需要把读写localStorage的逻辑也移到KanbanBoard里。这引出了一个问题，“保存所有卡片”的按钮是放在App标题栏的，总不能把标题栏也移到KanbanBoard里吧？毕竟逻辑上太不相关了。</p><p>这时我们就认为，这四个state是App标题栏和KanbanBoard的共享应用状态，需要放在App标题栏和KanbanBoard共同的父组件中（虽然我们没有把App标题栏抽取成独立的组件，但逻辑上是一样的）。</p><p>这个过程被称作<strong>状态提升</strong>（Lifting State Up）<strong>，</strong>也是我们在做React组件设计开发时会经常用到的一个技巧。</p><h2>用context解决属性钻取问题</h2><p>产品经理过来泼冷水了：“目前的看板卡片支持的操作只有添加新卡片，以及在不同看板列中移动；不能修改也就算了，还不能删除。”</p><p>然后我们<s>心如死灰地</s>从他/她手里拿到了新文档《需求文档v13.0.docx》，里面新加入了管理员功能和删除卡片功能：</p><ol>\n<li>用户可以在标题栏中启用管理员模式，默认禁用；</li>\n<li>启用管理员模式时，每张看板卡片显示删除按钮；</li>\n<li>用户点击删除按钮时，卡片从看板列中消失，卡片数据被删除；</li>\n<li>禁用管理员模式时，隐藏看板卡片中的删除按钮。</li>\n</ol><p>我们先看管理员模式，基本上可以认为是一个布尔值，先作为state放在App里，然后：</p><ol>\n<li>App通过props传递给KanbanBoard；</li>\n<li>KanbanBoard通过props传递给KanbanColumn；</li>\n<li>KanbanColumn再通过props传递给KanbanCard。</li>\n</ol><p>这一层一层传有点累吧？也没有什么额外逻辑，就是透传。这个现象就被称作<strong>属性钻取</strong>（Props Drilling）。虽然显式的传递一目了然，但给开发过程还是带来了些许繁琐，我们看看该怎么解决这个问题。</p><p>React为这个场景设计了context上下文，我们在<a href=\"https://time.geekbang.org/column/article/571276\">上节课</a>讲到了context的概念和用法，现在就来实际在oh-my-kanban中使用它。</p><p>新建一个文件，src/context/AdminContext.js，代码如下：</p><pre><code class=\"language-javascript\">import React from 'react';\n\nconst AdminContext = React.createContext(false);\n\nexport default AdminContext;\n</code></pre><p>在src/App.js中使用这个context，顺便微调一下handleRemove的实现，让它只判断卡片标题相等：</p><pre><code class=\"language-javascript\">import AdminContext from './context/AdminContext';\n// ...\nfunction App() {\n  // ...\n  const handleRemove = (column, cardToRemove) =&gt; {\n&nbsp; &nbsp; updaters[column]((currentStat) =&gt;\n&nbsp; &nbsp; &nbsp; currentStat.filter((item) =&gt; item.title !== cardToRemove.title)\n&nbsp; &nbsp; );\n&nbsp; };\n&nbsp; const [isAdmin, setIsAdmin] = useState(false);\n&nbsp; const handleToggleAdmin = (evt) =&gt; {\n&nbsp; &nbsp; setIsAdmin(!isAdmin);\n&nbsp; };\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;header className=\"App-header\"&gt;\n        &lt;h1&gt;\n          我的看板 \n          &lt;button onClick={handleSaveAll}&gt;保存所有卡片&lt;/button&gt;\n          &lt;label&gt;\n            &lt;input type=\"checkbox\" value={isAdmin} onChange={handleToggleAdmin} /&gt;\n            管理员模式\n          &lt;/label&gt;\n        &lt;/h1&gt;\n        &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt;\n      &lt;/header&gt;\n      &lt;AdminContext.Provider value={isAdmin}&gt;\n        &lt;KanbanBoard\n          isLoading={isLoading}\n          todoList={todoList}\n          ongoingList={ongoingList}\n          doneList={doneList}\n          onAdd={handleAdd}\n          onRemove={handleRemove}\n        /&gt;\n      &lt;/AdminContext.Provider&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>样式也微调一下，在src/App.css中加入如下代码：</p><pre><code class=\"language-javascript\">.App-header &gt; h1 &gt; * {\n&nbsp; margin-left: 1rem;\n}\n\n.App-header &gt; h1 &gt; label {\n&nbsp; font-size: initial;\n&nbsp; font-weight: initial;\n}\n</code></pre><p>在src/KanbanCard.js中消费这个context，条件渲染一个删除按钮，按钮点击直接调用onRemove：</p><pre><code class=\"language-javascript\">export default function KanbanCard({ title, status, onDragStart, onRemove }) {\n&nbsp; // ...\n&nbsp; const isAdmin = useContext(AdminContext);\n\n&nbsp; return (\n&nbsp; &nbsp; &lt;li css={kanbanCardStyles} draggable onDragStart={handleDragStart}&gt;\n&nbsp; &nbsp; &nbsp; &lt;div css={kanbanCardTitleStyles}&gt;{title}&lt;/div&gt;\n&nbsp; &nbsp; &nbsp; &lt;div css={css`\n&nbsp; &nbsp; &nbsp; `} title={status}&gt;{displayTime} {isAdmin &amp;&amp; onRemove &amp;&amp; (\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;button onClick={() =&gt; onRemove({title})}&gt;X&lt;/button&gt;\n&nbsp; &nbsp; &nbsp; )}&lt;/div&gt;\n&nbsp; &nbsp; &lt;/li&gt;\n&nbsp; );\n}\n</code></pre><p>最后，记得在 <code>src/KanbanBoard.js</code> 和 <code>src/KanbanColumn.js</code> 中，把 <code>onRemove</code> 通过属性钻取传给 <code>KanbanCard</code>：</p><pre><code class=\"language-javascript\">&lt;KanbanColumn\n&nbsp; bgColor={COLUMN_BG_COLORS.done}\n&nbsp; title=\"已完成\"\n&nbsp; {/**/}\n&nbsp; onDrop={handleDrop}\n&nbsp; onRemove={onRemove.bind(null, COLUMN_KEY_DONE)}\n&nbsp; cardList={doneList}\n/&gt;\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/1f/8c/1fa1f0c7bfb9a42193f3fafe2f457f8c.jpg?wh=667x549\" alt=\"\"></p><p>好了，App的isAdmin和handleRemove分别通过context和props两条路径在KanbanCard顺利会师。</p><p>回到浏览器看看效果。有了，勾选管理员模式，看板卡片就会显示出删除按钮。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/c7/957bd55ffcb12yy8fd1b2533618916c7.png?wh=1312x712\" alt=\"图片\"></p><p>删除功能是可用的：</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/1e/a2271347d750f3219b2852cfc45f5f1e.gif?wh=500x438\" alt=\"图片\"></p><p>需求完成！单从功能看，我们的oh-my-kanban产品已经基本可以上线了。当然距离实际的上线标准，我们还有很多工作要做，在后续课程会陆续展开。</p><p>在实现这个需求的过程中，我们看到了属性钻取的真实场景，也展示了如何用context解决这个痛点。</p><h2>小结</h2><p>这节课我们学习了怎么用面向接口编程的思维来设计开发React组件，也就是把React组件的props和context看作是接口，用state、context、事件处理、Hooks、子组件、组件样式等技术实现组件接口。</p><p>然后我们继续了<a href=\"https://time.geekbang.org/column/article/571276\">上节课</a>开始的oh-my-kanban大重构，把App组件中的大部分逻辑都分散转移到了KanbanBoard、KanbanColumn中。同时也介绍了状态提升这个技巧，并在oh-my-kanban首次加入了context代码，解决了一个属性钻取问题。</p><p>除了收获一个基本可用的oh-my-kanban应用，也借着这次重构验证了面向接口编程的好处，进一步掌握了React组件的“面子”和“里子”。</p><p>下节课，我会带着你扔掉CRA，自己从零搭建一个React项目，把oh-my-kanban的代码迁移进去，并顺带复习从第3节课开始学习到的所有内容。</p><p>最后附上这节课的源码：<a href=\"https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.13.0\">https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.13.0</a></p><h2>思考题</h2><ol>\n<li>上节课和这节课学习了单向数据流，也在oh-my-kanban项目有了实际的应用。你能描述一下oh-my-kanban中都有哪些数据流吗？</li>\n<li>对于现代JS前端框架，一提到组件树，总离不了组件间通信这个概念。已知React的组件间通信是通过单向数据流实现的，你能归纳出父组件与子组件、子组件与子组件之间通信的模式吗？</li>\n</ol><p>好了，这节课的内容就到这里。如果你学完之后有动手实践，可以在留言区回复一个“M”，和我分享这份重构的喜悦。我们下节课再见。</p>","comments":[{"had_liked":false,"id":358306,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"北京","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1664183715,"is_pvip":false,"replies":[{"id":130435,"content":"你好，船长，感谢抓虫，不过我重新跑了一下 https:&#47;&#47;gitee.com&#47;evisong&#47;geektime-column-oh-my-kanban&#47;tree&#47;v0.13.0 的代码，没能复现你提到的问题。\n\n目前代码中AdminContext就是一个布尔值，你提到的“{isAdmin:false}，是个 obj”，我怀疑你是不是在为Provider传值时传了obj？类似这样：\n\n-    &lt;AdminContext.Provider value={isAdmin}&gt;\n+    &lt;AdminContext.Provider value={{isAdmin}}&gt;\n\n如果这么改代码的话，我本地确实能复现始终显示删除按钮的问题。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664363980,"ip_address":"北京","comment_id":358306,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"反馈个 Bug：文章里的 KanbanCard 判断是否展示删除按钮时，isAdmin 会始终为 True，因为从 useContext 引出来后，其值是：{isAdmin:false}，是个 obj，始终为 true，删除按钮会一直显示","like_count":1,"discussions":[{"author":{"id":3170712,"avatar":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","nickname":"船长","note":"","ucode":"EBC0CCDB341E35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589096,"discussion_content":"刚看了下，确实是的，敬佩宋老师的虚化若谷，是一个好榜样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664415990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3170712,"avatar":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","nickname":"船长","note":"","ucode":"EBC0CCDB341E35","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608439,"discussion_content":"大概率写成了 ES 的对象属性简写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678440230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":589096,"ip_address":"北京","group_id":0},"score":608439,"extra":""}]},{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589044,"discussion_content":"你好，船长，感谢抓虫，不过我重新跑了一下 https://gitee.com/evisong/geektime-column-oh-my-kanban/tree/v0.13.0 的代码，没能复现你提到的问题。\n\n目前代码中AdminContext就是一个布尔值，你提到的“{isAdmin:false}，是个 obj”，我怀疑你是不是在为Provider传值时传了obj？类似这样：\n\n-    &lt;AdminContext.Provider value={isAdmin}&gt;\n+    &lt;AdminContext.Provider value={{isAdmin}}&gt;\n\n如果这么改代码的话，我本地确实能复现始终显示删除按钮的问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664363980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380215,"user_name":"Geek_a19712","can_delete":false,"product_type":"c1","uid":3690762,"ip_address":"天津","ucode":"EDFF932827E12D","user_header":"","comment_is_top":false,"comment_ctime":1693216009,"is_pvip":false,"replies":[{"id":139715,"content":"你好，Geek_a19712，感谢你的抓虫。我检查了一下，不是虫。还是这一讲的内容，在“用 context 解决属性钻取问题”小节的代码中，handleRemove函数是作为prop值一路传给KanbanCard的onRemove，看一下KanbanCard是如何调用这个onRemove的：\n\n    &lt;button onClick={() =&gt; onRemove({title})}&gt;X&lt;&#47;button&gt;\n\n可以看到这里传给cardToRemove参数的值是 {title}，等同于 const cardToRemove = { title: title } 是一个object。所以后续做过滤的时候也需要从object里取title属性。这也是为了跟拖拽逻辑里的参数保持一致。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1699157498,"ip_address":"北京","comment_id":380215,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"代码是不是写错了，上边 KanbanCard 删除的方法传的是 title ，但是在 App.js 中的 handleRemove 方法中过滤的条件是 item.title !== cardToRemove.title ，所以是不是应该把 KanbanCard  删除方法改成传 props 或者 App.js 中过滤条件 item.title !== cardToRemove.title 改成 item.title !== cardToRemove","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630965,"discussion_content":"你好，Geek_a19712，感谢你的抓虫。我检查了一下，不是虫。还是这一讲的内容，在“用 context 解决属性钻取问题”小节的代码中，handleRemove函数是作为prop值一路传给KanbanCard的onRemove，看一下KanbanCard是如何调用这个onRemove的：\n\n    &lt;button onClick={() =&gt; onRemove({title})}&gt;X&lt;/button&gt;\n\n可以看到这里传给cardToRemove参数的值是 {title}，等同于 const cardToRemove = { title: title } 是一个object。所以后续做过滤的时候也需要从object里取title属性。这也是为了跟拖拽逻辑里的参数保持一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699157498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3690762,"avatar":"","nickname":"Geek_a19712","note":"","ucode":"EDFF932827E12D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626678,"discussion_content":"大意了，我看onRemove({title})是这样传的，忽略了传的是个省略写法的对象，我直接传的onRemove(title)导致对象.获取不到属性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693273488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378447,"user_name":"网瘾少年","can_delete":false,"product_type":"c1","uid":1600066,"ip_address":"江西","ucode":"800CCCD19CB71F","user_header":"https://static001.geekbang.org/account/avatar/00/18/6a/42/51c5db2b.jpg","comment_is_top":false,"comment_ctime":1690270995,"is_pvip":false,"replies":[{"id":139720,"content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1699158507,"ip_address":"北京","comment_id":378447,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"M\nhttps:&#47;&#47;github.com&#47;xzxldl55&#47;FE-collection&#47;tree&#47;main&#47;task-board","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630970,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699158507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377905,"user_name":"莫比斯","can_delete":false,"product_type":"c1","uid":1039549,"ip_address":"北京","ucode":"FC467871C8CA7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/bd/ea9c16b8.jpg","comment_is_top":false,"comment_ctime":1689500825,"is_pvip":false,"replies":[{"id":139721,"content":"^_^","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1699158528,"ip_address":"北京","comment_id":377905,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"M_M","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630971,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699158528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376196,"user_name":"Geek_b8f92f","can_delete":false,"product_type":"c1","uid":2849300,"ip_address":"上海","ucode":"CFA0D029460AD6","user_header":"","comment_is_top":false,"comment_ctime":1686493280,"is_pvip":false,"replies":[{"id":137280,"content":"你好，Geek_b8f92f，这是个好问题。func &amp;&amp; func(args) 是指func不为空时才会去调用它，这样的写法能提升程序的健壮性，也可以利用ES2020的新语法func?.(args)，效果是相同的。但请注意一点，这里仅判断了是否为空，如果需要进一步提升健壮性，还需要判断func的类型typeof func === &#39;function&#39;。\n\n当然，这也并不意味着我们需要在所有使用参数的地方都去做类似的检查，还是要根据实际需要。如果感兴趣的话，可以了解一下防御性编程。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1687085522,"ip_address":"北京","comment_id":376196,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"请问老师： 代码中有大量的onDragStart &amp;&amp; onDragStart(evt)这种写法\n为什么不是直接写成onDragStart(evt)，\n这么写的好处是什么，谢谢","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621296,"discussion_content":"你好，Geek_b8f92f，这是个好问题。func &amp;&amp; func(args) 是指func不为空时才会去调用它，这样的写法能提升程序的健壮性，也可以利用ES2020的新语法func?.(args)，效果是相同的。但请注意一点，这里仅判断了是否为空，如果需要进一步提升健壮性，还需要判断func的类型typeof func === &#39;function&#39;。\n\n当然，这也并不意味着我们需要在所有使用参数的地方都去做类似的检查，还是要根据实际需要。如果感兴趣的话，可以了解一下防御性编程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687085522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359771,"user_name":"进击的莫莫哒","can_delete":false,"product_type":"c1","uid":2039129,"ip_address":"北京","ucode":"FDFA178F4431A5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/1d/59/8abc559e.jpg","comment_is_top":false,"comment_ctime":1665850476,"is_pvip":false,"replies":[{"id":131084,"content":"你好，进击的莫莫哒，非常高兴看到你对自己写的代码满意。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1666530877,"ip_address":"北京","comment_id":359771,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"M","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591350,"discussion_content":"你好，进击的莫莫哒，非常高兴看到你对自己写的代码满意。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666530877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359377,"user_name":"Geek_8e9c8d","can_delete":false,"product_type":"c1","uid":3073804,"ip_address":"北京","ucode":"40B28FBAE8EDD0","user_header":"","comment_is_top":false,"comment_ctime":1665485518,"is_pvip":false,"replies":[{"id":131083,"content":"你好，Geek_8e9c8d，非常高兴看到你对自己写的代码满意。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1666530865,"ip_address":"北京","comment_id":359377,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"M","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591349,"discussion_content":"你好，Geek_8e9c8d，非常高兴看到你对自己写的代码满意。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666530865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358337,"user_name":"WL","can_delete":false,"product_type":"c1","uid":2926068,"ip_address":"北京","ucode":"945BA0370B9E5C","user_header":"https://static001.geekbang.org/account/avatar/00/2c/a5/f4/9bf287ea.jpg","comment_is_top":false,"comment_ctime":1664206129,"is_pvip":false,"replies":[{"id":130444,"content":"你好，WL，（握手），你说得对，尤其“组件不负责保存上级组件的状态”这一点，是React数据流保持单向性的必要条件。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664371749,"ip_address":"北京","comment_id":358337,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"老师讲得很好，组件也可以看作是接口，我们通过props传入一些内容，组件帮我们实现一些功能，组件不负责保存上级组件的状态","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589058,"discussion_content":"你好，WL，（握手），你说得对，尤其“组件不负责保存上级组件的状态”这一点，是React数据流保持单向性的必要条件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664371749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358310,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"北京","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1664184524,"is_pvip":false,"replies":[{"id":130590,"content":"你好，船长，答案基本正确～ \n\n* 子-父通信：父组件通过props或context传递回调函数给子组件，子组件调用回调来实现；\n* 兄弟通信：如A与B通信，拆分成 子(A)-父通信 加上 父-子(B)通信","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1665244177,"ip_address":"北京","comment_id":358310,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"思考题 2：\n父-子通信：props，context\n子-父通信：props.callback()   --（查课外资料）\n兄弟通信：context","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589697,"discussion_content":"你好，船长，答案基本正确～ \n\n* 子-父通信：父组件通过props或context传递回调函数给子组件，子组件调用回调来实现；\n* 兄弟通信：如A与B通信，拆分成 子(A)-父通信 加上 父-子(B)通信","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1665244177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1590225,"avatar":"https://static001.geekbang.org/account/avatar/00/18/43/d1/b3a8165b.jpg","nickname":"Guan-Ym","note":"","ucode":"1C015C36876A5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":600151,"discussion_content":"你好，老师~\n1. 在 react 中，子组件向父组件通信，请问实际是在维护了两个状态一样的 state 吗？子组件的 state 和 父组件的 state 虽然值是相同的，但却不是同一个；\n2. 当子组件向父组件通信的 state 数量比较多的情况下，父组件需要创建大量的函数进行赋值，子组件需要调用对应的函数，请问有什么办法可以解决这种臃肿的情况吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674034888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":589697,"ip_address":"广东","group_id":0},"score":600151,"extra":""}]}]},{"had_liked":false,"id":358309,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"北京","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1664184243,"is_pvip":false,"replies":[{"id":130591,"content":"你好，船长，很棒的答案。在设计oh-my-kanban这个项目时应该是把有代表性的数据流都做进去了，万一有遗漏的还请指出哈。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1665244327,"ip_address":"北京","comment_id":358309,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"思考题 1：有父子、祖孙之间的 props 传递流，也有组件内部的 state 数据流，也有 context 共享数据流（可以忽略 props 的层层传递，直接一步到位）","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589698,"discussion_content":"你好，船长，很棒的答案。在设计oh-my-kanban这个项目时应该是把有代表性的数据流都做进去了，万一有遗漏的还请指出哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665244327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392056,"user_name":"Geek_0af63d","can_delete":false,"product_type":"c1","uid":3896748,"ip_address":"北京","ucode":"67C6705B74BC74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rE4T58OUZcO6DcnaR4QFLV3FItDQKicHqOyBGvAj9oYDsVuH4y8RbBJ2fgWQAEoic7nW6UjibKOSFehPnQBzDiaB0hJKviafb7LlWRwY4UbkgFM4/132","comment_is_top":false,"comment_ctime":1719837280,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"M","like_count":0},{"had_liked":false,"id":380316,"user_name":"Tanya","can_delete":false,"product_type":"c1","uid":1463340,"ip_address":"广东","ucode":"AC35FC4F591EC9","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/2c/2739427d.jpg","comment_is_top":false,"comment_ctime":1693364831,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"M","like_count":0},{"had_liked":false,"id":376103,"user_name":"奕晨","can_delete":false,"product_type":"c1","uid":3000956,"ip_address":"山东","ucode":"59E240369BC1DC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/ca/7c/98193e9e.jpg","comment_is_top":false,"comment_ctime":1686293663,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"M","like_count":0},{"had_liked":false,"id":372864,"user_name":"secondmax","can_delete":false,"product_type":"c1","uid":1671958,"ip_address":"北京","ucode":"66FD1DFE36396D","user_header":"https://static001.geekbang.org/account/avatar/00/19/83/16/59e5ba00.jpg","comment_is_top":false,"comment_ctime":1681734257,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"不知道是不是我code的有问题 按照流程走的 但是项目报错 然后自己查漏补缺 将KanbanBoard.js文件中 ’done&#39;的KanbanColumn的onRemove事件有原来透传的onRemove改成了onDrop，并且在app.js中改写了筛选 从而解决了报错并删不掉已完成card的事件\n `\n&lt;KanbanColumn\n        bgColor={COLUMN_BG_COLOR.done}\n        title={&#39;已完成&#39;}\n        setDraggedItem={setDraggedItem}\n        setIsDragSource={(isSrc) =&gt; setDragSource(isSrc ? COLUMN_KEY_DONE : null )}\n        setIsDragTarget={(isTgt) =&gt; setDragTarget(isTgt ? COLUMN_KEY_DONE : null )}\n        onDrop={handleDrop}\n        cardList={doneList}\n        onRemove={onDrop.bind(null, COLUMN_KEY_DONE)}\n      &gt;\n      &lt;&#47;KanbanColumn&gt;`\n`const handleRemove = (column, cardToRemove) =&gt; {\n    updaters[column]((currentStat) =&gt; {\n      console.log(currentStat, &#39;展示的东西&#39;, cardToRemove);\n      return currentStat.filter((item) =&gt; item.title !== cardToRemove.title)\n    });\n  };\n`还望能够指正一下","like_count":0,"discussions":[{"author":{"id":3000956,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/ca/7c/98193e9e.jpg","nickname":"奕晨","note":"","ucode":"59E240369BC1DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620568,"discussion_content":"可以看一下 &lt;KanbanBoard /&gt; 这个组件 删除的 属性 是 onDrop吗？  handleRemove 这个删除的对应的 是 组件的 哪个属性？\n传递的属性 要关联起来才可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686293625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370332,"user_name":"杨永安","can_delete":false,"product_type":"c1","uid":1218183,"ip_address":"北京","ucode":"D23013C30D435B","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","comment_is_top":false,"comment_ctime":1678720275,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"初学者请问一下老师，handleRemove这个方法相当于是在爷爷组件中，想在孙子组件中调用，只能通过props一级一级的传递到孙子组件去吗？还有没有其他优雅的做法？\n直接 export 可行否","like_count":0,"discussions":[{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609506,"discussion_content":"学了Redux已经解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678989542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}