{"id":481074,"title":"18 | Sentinel 实战：如何实施流量整形与限流策略？","content":"<p>你好，我是姚秋辰。</p><p>今天我们来学习Sentinel组件最为核心的功能：流量整形（也可以叫流控）。</p><p>在这节课，我会通过项目实战将优惠券系统集成到Sentinel中，对用户领券和查找优惠券两个场景添加流控规则。在这个过程中，我会带你了解Sentinel的三种流控模式，以及对应的流控效果。此外，我还会针对Sentinel框架做一个小扩展，对特定的调用来源做流控。掌握了这些内容之后，你就可以清楚如何用流控手段来降低高并发场景下的系统压力。</p><p>在进行实战项目之前，我需要带你搭建Sentinel控制台。你可以把它看作一个中心化的控制中心，所有的应用程序都会接入这个控制台，我们可以在这里设置各种流控规则，这些规则也会在应用程序中实时生效。</p><h2>运行Sentinel控制台</h2><p>我们可以从<a href=\"https://github.com/alibaba/Sentinel/releases\">Sentinel官方GitHub</a>的Release页面下载可供本地执行的jar文件，为了避免版本不一致导致的兼容性问题，我推荐你下载1.8.2.Release版本。在该版本下的Assets部分，你可以直接下载sentinel-dashboard-1.8.2.jar这个文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/41/e6d555a468cb66cb0c753c84457ee641.png?wh=911x229\" alt=\"图片\"></p><p>下载好文件之后，你可以使用命令行进入到这个jar包所在的目录，然后就可以直接执行下面这行命令启动Sentinel控制台了。</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.2.jar\n</code></pre><p>这行命令以8080为端口启动了Sentinel控制台，启动成功后你可以在浏览器直接访问localhost:8080地址。</p><p>当你看到登录界面，你就可以使用默认账号进行登录了，登录名和密码都是sentinel。登陆成功之后你就可以进入到Sentinel控制台主页面，在左侧的导航栏会列出当前已经接入Sentinel的所有应用，这里默认展示的sentinal-dashboard应用其实就是控制台程序本尊了。</p><p><img src=\"https://static001.geekbang.org/resource/image/90/28/90a75d080f1db801974991d8839e1128.jpg?wh=1920x1259\" alt=\"图片\"></p><p>到这里，我们的Sentinel控制台就已经搭建完成了，是不是非常简单呢？接下来，我带你将实战项目集成到Sentinel控制台中。</p><h2>将微服务接入到Sentinel控制台</h2><p>为了演示Sentinel的多种流控效果，我们需要将两个具有前后调用关系的模块集成到Sentinel控制台，我这里选择的是模板微服务和用户微服务。</p><p>首先，你需要把Sentinel的依赖项引入到项目里。你只用将spring-cloud-starter-alibaba-sentinel组件分别加入到template和customer这两个服务的pom文件中就好了。</p><pre><code class=\"language-plain\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><p>然后，你需要做一些基本的配置，将应用直连到Sentinel控制台。这一步也非常简单，你只需要在项目的application.yml文件中加入下面的sentinel属性就可以了，具体代码在这里：</p><pre><code class=\"language-plain\">spring:\n  cloud:\n    sentinel:\n      transport:\n        # sentinel api端口，默认8719\n        port: 8719\n        # dashboard地址\n        dashboard: localhost:8080\n</code></pre><p>在上面的代码中，port属性是Sentinal API的默认端口，默认值是8719；而dashboard属性则是指向了Sentinel控制台的地址，这里我们填写的是localhost:8080。</p><p>最后，你还需要在代码中使用Sentinel注解对资源进行标记。在上一课里我讲到过，在Sentinel的世界中，一切都是以“资源”的方式存在的。Controller类里面写的API也是资源，这个资源便是Sentinel要守护的对象。</p><p>Sentinel会为Controller中的API生成一个默认的资源名称，这个名称就是URL的路径，如/template/getTemplateInBatch。当然了，你也可以使用特定的注解为资源打上一个你自己指定的名称标记，以CouponTemplateController为例，你可以参考这段代码：</p><pre><code class=\"language-java\">@GetMapping(\"/getTemplate\")\n@SentinelResource(value = \"getTemplate\")\npublic CouponTemplateInfo getTemplate(@RequestParam(\"id\") Long id){\n}\n\n@GetMapping(\"/getBatch\")\n@SentinelResource(value = \"getTemplateInBatch\", blockHandler = \"getTemplateInBatch_block\")\npublic Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch(\n        @RequestParam(\"ids\") Collection&lt;Long&gt; ids) {\n}\npublic Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch_block(\n        Collection&lt;Long&gt; ids, BlockException exception) {\n    log.info(\"接口被限流\");\n    return Maps.newHashMap();\n}\n</code></pre><p>在上面的代码中，我使用SentinelResource注解对模板服务的getTemplate方法和getTemplateInBatch方法做了标记，将它们的资源名称设置为方法名。除此之外，在getTemplateInBatch方法中，我还使用了注解中的blockHandler属性为当前资源指定了限流后的降级方法，如果当前服务抛出了BlockException，那么就会转而执行这段限流方法。</p><p>你同样可以使用SentinelResource注解，为CouponCustoemrController类中的用户领券和查找优惠券的接口做资源标记。你可以参考下面的代码。</p><pre><code class=\"language-java\">@PostMapping(\"findCoupon\")\n@SentinelResource(value = \"customer-findCoupon\")\npublic List&lt;CouponInfo&gt; findCoupon(@Valid @RequestBody SearchCoupon request) {\n}\n\n@PostMapping(\"requestCoupon\")\n@SentinelResource(value = \"requestCoupon\")\npublic Coupon requestCoupon(@Valid @RequestBody RequestCoupon request) {\n}\n</code></pre><p>到这里，我们就成功地把微服务接入到了Sentinel控制台。那么接下来，我们就可以把Template服务和Customer服务都启动起来，到Sentinel控制台去设置流控规则了。</p><h2>设置流控规则</h2><p>登录Sentinel控制台之后，你在左侧的导航栏是看不到我们刚注册的微服务的。这时你只要对Template和Customer服务发起几个调用，触发服务信息的上报，再等上个几秒钟，你就可以在Sentinel里看到自己的微服务啦。</p><p>Sentinel支持三种不同的流控模式，分别是直接流控、关联流控和链路流控。</p><ul>\n<li>直接流控：直接作用于当前资源，如果访问压力大于某个阈值，后续请求将被直接拦下来；</li>\n<li>关联流控：当关联资源的访问量达到某个阈值时，对当前资源进行限流；</li>\n<li>链路流控：当指定链路上的访问量大于某个阈值时，对当前资源进行限流，这里的“指定链路”是细化到API级别的限流维度。</li>\n</ul><p>接下来，我就带你了解这三种流控方式各自的使用场景，并带你上手为微服务添加流控规则。</p><h3>直接流控</h3><p>我们平时最常用的就是“直接流控”，所以我要带你去控制台操作一把，为Template服务添加一个直接流控规则。</p><p>打开Sentinel控制台，在左侧导航栏你会看到所有已经接入Sentinel的应用名称，如果没找到Coupon应用，你只需要在本地Postman发起一个API调用，触发一次信息上报，再等待十几秒后刷新页面，就可以看到自己的应用啦。</p><p>我录了一段设置“直接流控”的截屏，你可以参考一下。</p><p><video poster=\"https://media001.geekbang.org/c9c25f8d2b314997a14b0f54536597da/snapshots/1f47a09a708848da9602a8aec72b10e3-00002.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/2c2da9f7-17e779d1437-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/6ba2be7f85c048ea9f717919af5b9ba4/0f813de2d6594aeabc654f925ab1a76f-fbd163f3d6d5fd8122259b0888c54d1a-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>在这段视频中，我为Template服务的getTemplateInBatch接口指定了一个直接限流规则，这里的资源名就是我在SentinelResource注解中指定的名称。我设置了以QPS为限定条件，如果单机QPS阈值大于1（QPS=1就是每秒一次请求），就触发限流。当然了，你也可以在页面中将阈值类型改为“并发连接数”。</p><p>设置完限流限定条件之后，你就可以尝试在本地直接调用这个接口了。不管你是通过Template服务直接调用，还是通过Customer服务的findCoupon接口间接调用，只要超过了每秒1次的频率，请求就会被Sentinel阻断。这样一来，我们就在Template服务中实现了优惠券模板查找的限流规则。</p><h3>关联流控</h3><p>如果两个资源之间有竞争关系，比如说，它们<strong>共享同一个数据库连接池</strong>，这时候你就可以使用“关联流控”对低优先级的资源进行流控，让高优先级的资源获得竞争优势。</p><p>我们假设Template服务中的getTemplateInBatch接口和getTemplate接口之间就存在了竞争关系，而且前者的优先级低于后者，在这种情况下，我们应该尽可能地对低优先级的接口实施限流规则。</p><p>这里我将“关联流控”应用到了低优先级的getTemplateInBatch接口上。配置细节在下面的图里，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/cf/c153de752b7396f9ab64b1a59dc0e1cf.jpg?wh=1920x1572\" alt=\"图片\"></p><p>在流控规则设置页面里，我在“关联资源”一栏填了getTemplate，写在这里的是高优先级资源的名称。同时，我设置了阈值判断条件为QPS=1，它的意思是，如果高优先级资源的访问频率达到了每秒一次，那么低优先级资源就会被限流。</p><p>所以，这里需要你注意的一点是，<strong>关联限流的阈值判断是作用于高优先级资源之上的，但是流控效果是作用于低优先级资源之上</strong>。</p><h3>链路流控</h3><p>如果在一个应用中，<strong>对同一个资源有多条不同的访问链路</strong>，那么我们就可以应用“链路流控”，实现API级别的精细粒度限流。我画了一张图帮你理解链路流控的作用点。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/23/3c2370a85e2b57abd8278123221dba23.jpg?wh=1920x749\" alt=\"图片\"></p><p>在上面的图里，一个服务应用中有/api/edit和/api/add两个接口，这两个接口都调用了同一个资源resource-1。如果我想只对/api/edit接口流进行限流，那么就可以将“链路流控”应用在resource-1之上，同时指定当前流控规则的“入口资源”是/api/edit。</p><p>现在，你已经了解了Sentinel的三种流控模式。接下来，我们再来看一看如何针对调用源进行限流。这里需要我们对Sentinel源代码做一些改造。</p><h3>实现针对调用源的限流</h3><p>在微服务架构中，一个服务可能被多个服务调用。比如说，Customer服务会调用Template服务的getTemplateInBatch资源，未来我们可能会研发一个新的服务叫coupon-other-serv，它也会调用相同资源。</p><p>如果我想为getTemplateInBatch资源设置一个限流规则，并指定其只对来自Customer服务的调用起作用，应该怎么实现呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/58/f845cda2e61179f0f058223fcf79c858.jpg?wh=1920x749\" alt=\"图片\"></p><p>这个实现过程分为两步。第一步，你要想办法在服务请求中加上一个特殊标记，告诉Template服务是谁调用了你；第二步，你需要在Sentinel控制台设置流控规则的针对来源。</p><p>我们先从第一步开始做起。</p><p>首先，你需要对Customer服务的OpenFeign组件做一点手脚，将调用源的应用名加入到由OpenFeign组件构造的Request中。我们可以借助OpenFeign的RequestInterceptor扩展接口，编写一个自定义的拦截器，在服务请求发送出去之前，往Request的Header里写入一个特殊变量，你可以参考我这段代码。</p><pre><code class=\"language-java\">@Configuration\npublic class OpenfeignSentinelInterceptor implements RequestInterceptor {\n\n    @Override\n    public void apply(RequestTemplate template) {\n        template.header(\"SentinelSource\", \"coupon-customer-serv\");\n    }\n}\n</code></pre><p>在上面的代码中，我在Customer服务中新建了一个OpenfeignSentinelInterceptor的类，继承自RequestInterceptor并实现了其中的apply方法。在这个方法里，我向服务请求的header里加入了一个SentinelSource属性，对应的值是当前服务的名称coupon-customer-serv。这就是我要传递给下游服务的“来源标记”。</p><p>接下来，你需要在Template服务中识别来自上游的标记，并将其加入到Sentinel的链路统计中。我们可以借助Sentinel提供的RequestOriginParser扩展接口，编写一个自定义的解析器。你可以参考我这里的代码实现。</p><pre><code class=\"language-java\">@Component\n@Slf4j\npublic class SentinelOriginParser implements RequestOriginParser {\n\n    @Override\n    public String parseOrigin(HttpServletRequest request) {\n        log.info(\"request {}, header={}\", request.getParameterMap(), request.getHeaderNames());\n        return request.getHeader(\"SentinelSource\");\n    }\n}\n</code></pre><p>在上面的代码中，我在Template服务中新建了一个SentinelOriginParser的类，它实现了RequestOriginParser接口中的parseOrigin方法。在方法中，我们从服务请求的Header中获取SentinelSource变量的值，作为调用源的name。</p><p>到这里第一步“来源标记传递”就完成了，接下来你还需要在Sentinel控制台设置流控规则的针对来源。</p><p>在流控规则的编辑页面，你可以在“针对来源”这一栏填上coupon-customer-serv并保存，这样一来，当前限流规则就只会针对来自Customer服务的请求生效了。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/87/768f22e206a97979ca9c086fd26c5487.jpg?wh=1920x1405\" alt=\"图片\"></p><p>现在，相信你对Sentinel的流控模式都已经比较了解了，接下来我们再去学习一下Sentinel所支持的流控效果吧。</p><h2>Sentinel的流控效果</h2><p>Sentinel总共支持三种流控效果，分别是<strong>快速失败</strong>、<strong>Warm Up</strong>和<strong>排队等待</strong>。</p><p>先来说说<strong>快速失败</strong>，Sentinel默认的流控效果就是快速失败，前面做的实战改造都是采用了这种模式。这种流控效果非常好理解，在快速失败模式下，超过阈值设定的请求将会被立即阻拦住。</p><p>第二种流控效果<strong>Warm Up</strong>则实现了“预热模式的流控效果”，这种方式可以平缓拉高系统水位，避免突发流量对当前处于低水位的系统的可用性造成破坏。</p><p>举个例子，如果我们设置的系统阈值是QPS=10，预热时间=5，那么Sentinel会在这5秒的预热时间内，将限流阈值从3缓慢拉高到10。为什么起始阈值是3呢？因为Sentinel内部有一个冷加载因子，它的值是3，在预热模式下，起始阈值的计算公式是单机阈值/冷加载因子，也就是10/3=3。</p><p>我截了一张图，你可以参考一下，看看Warm Up配置项是如何填写的。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/ca/eb1f487f29964c19c3b19cba85db04ca.jpg?wh=1920x1486\" alt=\"图片\"></p><p>话说回来，为什么我们要使用预热模型呢？我来举一个例子帮你理解好了。</p><p>我开发了一个接口用来查询商品详情信息，它采用了通用的缓存+DB读写的逻辑，即一次请求过来之后，先查询缓存，如果缓存未命中那么再查询DB，同时把查到的数据写入缓存并设置一个缓存过期时间。</p><p>假如这个接口长期处于低水位状态，那么大部分缓存数据已经过期了，如果这时候发生了突发流量，比如双11的0点抢购开始了，由于缓存还未充分构建起来，突发流量就会对数据库形成一个峰值压力，很有可能就把DB层打穿。如果我们可以设置一个预热模型，给系统一段时间的缓冲，在缓慢拉高应用水位的过程中，缓存也逐渐地构建了起来。这样就大大降低了峰值流量对系统的冲击。</p><p>了解了Warm Up之后，我们再来看一下最后一个流控效果，那就是排队等待。</p><p>顾名思义，在<strong>排队等待</strong>模式下，超过阈值的请求不会立即失败，而是会被放入一个队列中，排好队等待被处理。当然了，每个请求的排队时间可不是永恒的，一旦请求在队列中等待的时间超过了我们设置的超时时间，那么请求就会被从队列中移除。</p><p>我截图了一张图，你可以参考一下图中是如何设置排队等待参数的。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/5f/bdd087c4a8224dae0d0d2b224066c75f.jpg?wh=1920x1486\" alt=\"图片\"></p><p>到这里，相信你已经对Sentinel的各种流控效果有了比较全面的了解。现在，我们来回顾一下这节课的重点内容。</p><h2>总结</h2><p>今天我带你了解了Sentinel的三大流控模式，分别是直连流控、关联流控和链路流控。我们还了解了三种流控效果，分别是快速失败、预热和排队等待。如果你想要将流控规则应用到特定来源的服务，一定要记得<strong>在本地服务中做一些小改造，让Sentinel识别调用源</strong>，否则针对来源的限流方式是不会生效的。</p><p>从流控的角度来讲，Sentinel还实现了基于热点规则的限流。热点限流也是互联网场景下的重要稳定性保障手段，比如电商业务的爆款商品、微博系统的明星出轨消息等等，这些都是发生热点数据宕机的常客。我建议你去通过网上的资料了解一下什么是热点数据，然后自己把玩一下Sentinel控制台的“热点规则”页面，尝试配置一个简单的热点规则到实战项目中。</p><p>在后面的课程中，我将带你了解Sentinel的另一个最常用的稳定性保障手段：降级熔断规则。</p><h2>思考题</h2><p>通过这节课的内容，你能深入说说流控效果的底层实现吗？最好能够从<strong>算法</strong>的角度来描述一下Sentinel是如何判断一个请求可否被放行的。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"17 | Sentinel 体系结构：什么是服务容错（降级熔断、流量整形）?","id":479785},"right":{"article_title":"19 | Sentinel 实战：如何为项目添加异常降级方案？","id":481607}},"comments":[{"had_liked":false,"id":331812,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1642782023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91837095239","product_id":100101301,"comment_content":"限流算法：滑动窗口，令牌桶，漏桶<br>Sentinel 的流量控制有三种：<br>快速失败：应该采用滑动窗口算法，当滑动时间窗口内的QPS超过一定的阀值，Sentinel 直接抛出异常<br>排队等待：采用漏桶算法，所有请求数据包进入漏桶进入排队等待，漏桶以一定的速率放行，达到匀速的效果的<br>Warm Up：采用令牌桶算法，动态的调整令牌桶的容量大小，达到预热的效果<br>","like_count":21},{"had_liked":false,"id":333074,"user_name":"海布里王力宏","can_delete":false,"product_type":"c1","uid":1032447,"ip_address":"","ucode":"462830C5F05B3C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/ff/9355810e.jpg","comment_is_top":false,"comment_ctime":1644046817,"is_pvip":true,"replies":[{"id":"122042","content":"同学理解的没错，预热其实就是给系统一段慢慢热身的时间段，不过发生阶段并非是在系统启动的时候，而是在系统长期处于低水位运行下突然接到大并发访问量的时候。","user_name":"作者回复","comment_id":333074,"uid":"2819998","ip_address":"","utype":1,"ctime":1644748589,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5939014113","product_id":100101301,"comment_content":"“第二种流控效果 Warm Up 则实现了“预热模式的流控效果”，这种方式可以平缓拉高系统水位，避免突发流量对当前处于低水位的系统的可用性造成破坏。举个例子，如果我们设置的系统阈值是 QPS=10，预热时间 =5，那么 Sentinel 会在这 5 秒的预热时间内，将限流阈值从 3 缓慢拉高到 10。为什么起始阈值是 3 呢？因为 Sentinel 内部有一个冷加载因子，它的值是 3，在预热模式下，起始阈值的计算公式是单机阈值 &#47; 冷加载因子，也就是 10&#47;3=3。我截了一张图，你可以参考一下，看看 Warm Up 配置项是如何填写的。”<br><br>新年快乐，对预热还是不理解，如果设置了预热，是不是意味着QPS达到阈值的时候，会降为1&#47;3的QPS，然后再拉升。还是这个预热只是针对系统的启动阶段？<br><br>","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550816,"discussion_content":"同学理解的没错，预热其实就是给系统一段慢慢热身的时间段，不过发生阶段并非是在系统启动的时候，而是在系统长期处于低水位运行下突然接到大并发访问量的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644748589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331700,"user_name":"wake","can_delete":false,"product_type":"c1","uid":1222812,"ip_address":"","ucode":"08F77A1144D383","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/9c/643646b9.jpg","comment_is_top":false,"comment_ctime":1642731200,"is_pvip":false,"replies":[{"id":"121190","content":"多谢同学提醒，copy的时候删错了一行","user_name":"作者回复","comment_id":331700,"uid":"2819998","ip_address":"","utype":1,"ctime":1642776935,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5937698496","product_id":100101301,"comment_content":"配置应该是：<br><br>spring:<br>  cloud:<br>    sentinel:<br>      transport:<br>        # sentinel api端口，默认8719<br>        port: 8719<br>        # dashboard地址<br>        dashboard: localhost:8080","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547627,"discussion_content":"多谢同学提醒，copy的时候删错了一行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642776935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400926,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/5e/b9624166.jpg","nickname":"被圣光照黑了","note":"","ucode":"60B4F4F67700E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547558,"discussion_content":"大兄弟眼神真好，不像我百度半天，看了N多文章在不经意间看到了这个cloud","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642748652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355795,"user_name":"Ronnie","can_delete":false,"product_type":"c1","uid":1604191,"ip_address":"上海","ucode":"D7DEA7A4D13963","user_header":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","comment_is_top":false,"comment_ctime":1661756333,"is_pvip":true,"replies":[{"id":"130682","content":"Sentinel的热点规则是入门版，现实场景里更多的挑战来自于不可提前预测的热点，比如重磅微博之类，比较常见的做法是用stream技术，汇总分析链路&#47;网关流量特征，对热点做实时打标之后，运行期创建热点限流规则","user_name":"作者回复","comment_id":355795,"uid":"2819998","ip_address":"上海","utype":1,"ctime":1665410531,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1661756333","product_id":100101301,"comment_content":"热点规则配置怎么存储呢，比如用户id=1的限流20，用户id=2的限流30，这些配置不可能一个一个去控制台配置吧","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589954,"discussion_content":"Sentinel的热点规则是入门版，现实场景里更多的挑战来自于不可提前预测的热点，比如重磅微博之类，比较常见的做法是用stream技术，汇总分析链路/网关流量特征，对热点做实时打标之后，运行期创建热点限流规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665410532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349337,"user_name":"next station","can_delete":false,"product_type":"c1","uid":1357937,"ip_address":"","ucode":"ABF39067778FD6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","comment_is_top":false,"comment_ctime":1655892222,"is_pvip":true,"replies":[{"id":"127582","content":"同学在页面上配置的链路流控策略也截图看一下，我猜想应该是参数的“入口资源”没有指定对，导致sentinel没有识别到上游流量入口","user_name":"作者回复","comment_id":349337,"uid":"2819998","ip_address":"","utype":1,"ctime":1657105359,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1655892222","product_id":100101301,"comment_content":"姚老师，请教个问题：流控规则--链路流控，无效；也百度了一下，配置spring.cloud.sentinel.web-context-unify=false无效。麻烦老师指导一下<br><br>代码如下：<br><br>```<br>    &#47;&#47; 读取优惠券<br>    @GetMapping(&quot;&#47;getTemplate&quot;)<br>&#47;&#47;    @SentinelResource(value = &quot;getTemplate&quot;)<br>    public CouponTemplateInfo getTemplate(@RequestParam(&quot;id&quot;) Long id){<br>        log.info(&quot;Load template, id={}&quot;, id);<br>        return couponTemplateService.loadTemplateInfo(id);<br>    }<br><br>    @GetMapping(&quot;&#47;getTemplate1&quot;)<br>&#47;&#47;    @SentinelResource(value = &quot;getTemplate1&quot;)<br>    public CouponTemplateInfo getTemplate1(@RequestParam(&quot;id&quot;) Long id){<br>        log.info(&quot;Load template, id={}&quot;, id);<br>        return couponTemplateService.loadTemplateInfo(id);<br>    }<br><br><br>资源<br>public interface CouponTemplateService {<br>    &#47;&#47; 通过模板ID查询优惠券模板<br>    @SentinelResource(value = &quot;loadTemplateInfo&quot;)<br>    CouponTemplateInfo loadTemplateInfo(Long id);<br>}<br><br>```","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578981,"discussion_content":"同学在页面上配置的链路流控策略也截图看一下，我猜想应该是参数的“入口资源”没有指定对，导致sentinel没有识别到上游流量入口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657105359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344850,"user_name":"勤奋的樂","can_delete":false,"product_type":"c1","uid":1798640,"ip_address":"","ucode":"BF341C5378097F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/71/f0/07c72ca6.jpg","comment_is_top":false,"comment_ctime":1651823175,"is_pvip":false,"replies":[{"id":"126169","content":"ClientProtocolException是一个通用错误，在很多项目里都会碰到，通常是在url里没有指定protocol (比如http, https)导致的","user_name":"作者回复","comment_id":344850,"uid":"2819998","ip_address":"","utype":1,"ctime":1652584573,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1651823175","product_id":100101301,"comment_content":"请问添加流控规则，sentinel控制台直接弹窗显示失败，报错日志如下，是什么原因呢？<br>2022-05-06 15:37:21.357 ERROR 61049 --- [nio-8081-exec-1] c.a.c.s.d.controller.FlowControllerV1    : Failed to add new flow rule, app=coupon-template-serv, ip=localhost<br><br>com.alibaba.csp.sentinel.dashboard.client.CommandFailedException: <br><br>2022-05-06 15:37:22.724 ERROR 61049 --- [Worker-thread-6] c.a.c.s.dashboard.metric.MetricFetcher   : fetch metric http:&#47;&#47;localhost:8081:8719&#47;metric?startTime=1651822634000&amp;endTime=1651822640000&amp;refetch=false error<br><br>org.apache.http.client.ClientProtocolException: URI does not specify a valid host name: http:&#47;&#47;localhost:8081:8719&#47;metric?startTime=1651822634000&amp;endTime=1651822640000&amp;refetch=false<br>\tat org.apache.http.impl.nio.client.CloseableHttpAsyncClient.determineTarget(CloseableHttpAsyncClient.java:121) [httpasyncclient-4.1.3.jar!&#47;:4.1.3]<br>\tat org.apache.http.impl.nio.client.CloseableHttpAsyncClient.execute(CloseableHttpAsyncClient.java:102) [httpasyncclient-4.1.3.jar!&#47;:4.1.3]<br>\tat org.apache.http.impl.nio.client.CloseableHttpAsyncClient.execute(CloseableHttpAsyncClient.java:92) [httpasyncclient-4.1.3.jar!&#47;:4.1.3]<br>\tat com.alibaba.csp.sentinel.dashboard.metric.MetricFetcher.fetchOnce(MetricFetcher.java:214) [classes!&#47;:na]<br>\tat com.alibaba.csp.sentinel.dashboard.metric.MetricFetcher.lambda$doFetchAppMetric$3(MetricFetcher.java:282) [classes!&#47;:na]<br>\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[na:1.8.0_312]<br>\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_312]<br>\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_312]<br>\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_312]<br>\tat java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_312]<br><br>","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572053,"discussion_content":"ClientProtocolException是一个通用错误，在很多项目里都会碰到，通常是在url里没有指定protocol (比如http, https)导致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652584573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344844,"user_name":"勤奋的樂","can_delete":false,"product_type":"c1","uid":1798640,"ip_address":"","ucode":"BF341C5378097F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/71/f0/07c72ca6.jpg","comment_is_top":false,"comment_ctime":1651821892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651821892","product_id":100101301,"comment_content":"记一个坑，我本地启动sentinel后，控制台接口绑定在8081端口，template模块接口注解@SentinelResource(value=&quot;getTemplate&quot;)后，调用接口，sentinel控制台不显示服务，需要配置clientIp后sentinel才能正确显示刚刚配置的服务：<br>sentinel:<br>      transport:<br>        # sentinel api端口，默认8719<br>        port: 8719<br>        # dashboard地址<br>        dashboard: localhost:8081<br>        clientIp: localhost:8081","like_count":0},{"had_liked":false,"id":335212,"user_name":"Geek_e93c48","can_delete":false,"product_type":"c1","uid":2878664,"ip_address":"","ucode":"4418236B0BF4DE","user_header":"","comment_is_top":false,"comment_ctime":1645412080,"is_pvip":false,"replies":[{"id":"122643","content":"队列是有超时时间的，可以在控制台设置，其实很像我们用MQ时候设置TTL，如果队列中的请求留存时间超出设置，那么就会被限流掉","user_name":"作者回复","comment_id":335212,"uid":"2819998","ip_address":"","utype":1,"ctime":1645631129,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645412080","product_id":100101301,"comment_content":"姚老师请教个问题，Sentinel限流的排队模式下，会将所有QOS都排队吗？还是只是创建一个固定大小的队列存储固定的QPS，超过部分直接抛弃。","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552907,"discussion_content":"队列是有超时时间的，可以在控制台设置，其实很像我们用MQ时候设置TTL，如果队列中的请求留存时间超出设置，那么就会被限流掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645631129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331906,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1642862048,"is_pvip":true,"replies":[{"id":"121286","content":"马总语录这样说（PUA）道：加班是应该的，不加班也是应该的，只有完不成工作是不应该的","user_name":"作者回复","comment_id":331906,"uid":"2819998","ip_address":"","utype":1,"ctime":1642921341,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1642862048","product_id":100101301,"comment_content":"现在天天加班，没法学实践，我先看完","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547887,"discussion_content":"马总语录这样说（PUA）道：加班是应该的，不加班也是应该的，只有完不成工作是不应该的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642921341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032447,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/ff/9355810e.jpg","nickname":"海布里王力宏","note":"","ucode":"462830C5F05B3C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549055,"discussion_content":"我觉得，先要了解一个大概，再理解底层原理。至于具体实操，其实很多都不需要我们动手，实际都是有搭建好的环境让你用，处理问题的时候，看的是你对技术本质的了解深浅。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643534962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331756,"user_name":"一念之间","can_delete":false,"product_type":"c1","uid":1562957,"ip_address":"","ucode":"25C6317C111F93","user_header":"https://static001.geekbang.org/account/avatar/00/17/d9/4d/def385e9.jpg","comment_is_top":false,"comment_ctime":1642751600,"is_pvip":true,"replies":[{"id":"121285","content":"使用官方注解的方式就可以了，不用造轮子，太卷了。不过还是要看公司infra团队的老板是不是阿里来的了，如果阿里的人，肯定得造轮子，能给造出花来","user_name":"作者回复","comment_id":331756,"uid":"2819998","ip_address":"","utype":1,"ctime":1642921279,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1642751600","product_id":100101301,"comment_content":"老师,生产环境中使用时您建议是用注解方式,还是统一封装基于sentinel的starter","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547886,"discussion_content":"使用官方注解的方式就可以了，不用造轮子，太卷了。不过还是要看公司infra团队的老板是不是阿里来的了，如果阿里的人，肯定得造轮子，能给造出花来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642921279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138821,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","nickname":"与路同飞","note":"","ucode":"2985F1440A1962","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547960,"discussion_content":"简直不能太同意了，我们公司infra团队改写spring mvc的组件，到处埋雷。本来我就直接用官方的方式也花不了多长时间，他们埋雷我还要去仔细研究了mvc的源码，发现重写了RequestMappingHandlerAdapter（主要是通过starter去注入进去的，得挨个去看AutoConfiguration配置类。）导致springmvc默认的validation失效。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642952709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032447,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c0/ff/9355810e.jpg","nickname":"海布里王力宏","note":"","ucode":"462830C5F05B3C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549054,"discussion_content":"infra团队不像我们业务开发，等着需求上门，人家要自己找活干，不然没有绩效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643534407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331752,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1642750468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642750468","product_id":100101301,"comment_content":"底层应该是令牌桶算法","like_count":0},{"had_liked":false,"id":331718,"user_name":"黄叶","can_delete":false,"product_type":"c1","uid":2332411,"ip_address":"","ucode":"8D8C566F7772A6","user_header":"https://static001.geekbang.org/account/avatar/00/23/96/fb/af39abb1.jpg","comment_is_top":false,"comment_ctime":1642735074,"is_pvip":true,"replies":[{"id":"121191","content":"对滴，我删错行了","user_name":"作者回复","comment_id":331718,"uid":"2819998","ip_address":"","utype":1,"ctime":1642776967,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1642735074","product_id":100101301,"comment_content":"老师，配置的地址应该是spring.cloud下吧，文章是在application下","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547628,"discussion_content":"对滴，我删错行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642776967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}