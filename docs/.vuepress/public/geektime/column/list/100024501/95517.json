{"id":95517,"title":"29 | 如何在 iOS 中进行面向测试驱动开发和面向行为驱动开发？","content":"<p>你好，我是戴铭。今天，我要和你分享的话题是，如何在 iOS 中进行面向测试驱动开发和面向行为驱动开发。</p><p>每当你编写完代码后，都会编译看看运行结果是否符合预期。如果这段代码的影响范围小，你很容易就能看出结果是否符合预期，而如果验证的结果是不符合预期，那么你就会检查刚才编写的代码是否有问题。</p><p>但是，如果这段代码的影响范围比较大，这时需要检查的地方就会非常多，相应地，人工检查的时间成本也会非常大。特别是团队成员多、工程代码量大时，判断这段代码的影响面都需要耗费很多时间。那么，每次编写完代码，先判断它的影响面，然后再手动编译进行检查的开发方式，效率就非常低了，会浪费大量时间。</p><p>虽说一般公司都会有专门的测试团队对产品进行大量测试，但是如果不能在开发阶段及时发现问题，当各团队代码集成到一起，把所有问题都堆积到测试阶段去发现、解决，就会浪费大量的沟通时间，不光是开发同学和测试同学之间的沟通时间，还有开发团队之间的沟通时间也会呈指数级增加。</p><p>那么，有没有什么好的开发方式，能够提高在编写代码后及时检验结果的效率呢？</p><p>所谓好的开发方式，就是开发、测试同步进行，尽早发现问题。从测试范围和开发模式的角度，我们还可以把这种开发模式细分出更多类型。</p><!-- [[[read_end]]] --><p><strong>从测试范围上来划分的话</strong>，软件测试可以分为单元测试、集成测试、系统测试。测试团队负责的是集成测试以及系统测试，而单元测试则是有开发者负责的。对于开发者来说，通过单元测试就可以有效提高编写代码后快速发现问题的效率。</p><p>概括来说，单元测试，也叫作模块测试，就是对单一的功能代码进行测试。这个功能代码，可能是一个类的方法，也可能是一个模块的某个函数。</p><p>单元测试会使用 Mock 方式模拟外部使用，通过编写的各种测试用例去检验代码的功能是否正常。一个系统都是由各个功能组合而成，功能模块划分得越小，功能职责就越清晰。清晰的功能职责可以确保单个功能的测试不会出现问题，是单元测试的基础。</p><p><strong>从开发模式划分的话，</strong>开发方式可以分为 TDD（Test-driven development，面向测试驱动开发）和 BDD（Behavior-driven development ，面向行为驱动开发）。</p><ul>\n<li>TDD 的开发思路是，先编写测试用例，然后在不考虑代码优化的情况下快速编写功能实现代码，等功能开发完成后，在测试用例的保障下，再进行代码重构，以提高代码质量。</li>\n<li>BDD 是 TDD 的进化，基于行为进行功能测试，使用 DSL（Domain Specific Language，领域特定语言）来描述测试用例，让测试用例看起来和文档一样，更易读、更好维护。</li>\n</ul><p>TDD 编写的测试用例主要针对的是开发中最小单元进行测试，适合单元测试。而 BDD 的测试用例是对行为的描述，测试范围可以更大一些，在集成测试和系统测试时都可以使用。同时，不仅开发者可以使用BDD的测试用例高效地发现问题，测试团队也能够很容易参与编写。这，都得益于 BDD 可以使用易于编写行为功能测试的 DSL 语言。</p><p>接下来，我就和你详细聊聊 TDD 和 BDD。</p><h2>TDD</h2><p>我刚刚也已经提到了，TDD在确定功能需求后，首先就会开始编写测试用例，用来检验每次的代码更新，能够让我们更快地发现问题，并能保正不会漏掉问题。其实，这就是通过测试用例来推动开发。</p><p>在思想上，和拿到功能需求后直接开发功能的区别是，TDD会先考虑如何对功能进行测试，然后再去考虑如何编写代码，这就给优化代码提供了更多的时间和空间，即使几个版本过后再来优化，只要能够通过先前写好的测试用例，就能够保证代码质量。</p><p>所以说，TDD 非常适合快速迭代的节奏，先尽快实现功能，然后再进行重构和优化。如果我们不使用 TDD 来进行快速迭代开发，虽然在最开始的时候开发效率会比 TDD 高，但是过几个版本再进行功能更新时，就需要在功能验证上花费大量的时间，反而得不偿失。</p><p>其实，TDD 这种开发模式和画漫画的工作方式非常类似：草稿就类似 TDD 中的测试用例，漫画家先画草稿，细节由漫画家和助手一起完成，无论助手怎么换，有了草稿的保障，内容都不会有偏差。分镜的草稿没有细节，人物眼睛、鼻子都可能没有，场景也只需要几条透视线就可以。虽然没有细节，但是草稿基本就确定了漫画完成后要表达的所有内容。</p><h2>BDD</h2><p>相比 TDD，BDD更关注的是行为方式的设计，通过对行为的描述来验证功能的可用性。行为描述使用的 DSL，规范、标准而且可读性高，可以当作文档来使用。</p><p>BDD 的 Objective-C 框架有 <a href=\"https://github.com/kiwi-bdd/Kiwi\">Kiwi</a>、<a href=\"https://github.com/specta/specta\">Specta</a>、<a href=\"https://github.com/specta/expecta\">Expecta</a>等，Swift 框架有 <a href=\"https://github.com/Quick/Quick\">Quick</a>。</p><p>Kiwi框架不光有 Specta 的 DSL 模式，Expecta框架的期望语法，还有 Mocks 和 Stubs 这样的模拟存根能力。所以接下来，我就跟你说说这个iOS中非常有名并且好用的BDD框架，以及怎么用它来进行 BDD 开发。</p><h2>Kiwi</h2><p>将Kiwi集成到你的App里，只需要在 Podfile 里添加 pod ‘Kiwi’ 即可。下面这段代码，是 Kiwi 的使用示例：</p><pre><code>// describe 表示要测试的对象\ndescribe(@&quot;RSSListViewController&quot;, ^{\n    // context 表示的是不同场景下的行为\n    context(@&quot;when get RSS data&quot;, ^{\n        // 同一个 context 下每个 it 调用之前会调用一次 beforeEach\n        beforeEach(^{\n            id dataStore = [DataStore new];\n        });\n\n\n        // it 表示测试内容，一个 context 可以有多个 it\n        it(@&quot;load data&quot;, ^{\n            // Kiwi 使用链式调用，should 表示一个期待，用来验证对象行为是否满足期望\n            [[theValue(dataStore.count) shouldNot] beNil];\n        });\n    });\n});\n</code></pre><p>上面这代码描述的是在 RSS 列表页面，当获取 RSS 数据时去读取数据这个行为的测试用例。这段测试用例代码，包含了 Kiwi 的基本元素，也就是describe、context、it。这些元素间的关系可以表述为：</p><ul>\n<li>describe 表示要测试的对象，context 表示的是不同场景下的行为，一个 describe 里可以包含多个 context。</li>\n<li>it表示的是需要测试的内容，同一个场景下的行为会有多个需要测试的内容，也就是说一个 context 下可以有多个 it。</li>\n</ul><p>测试内容使用的是 Kiwi 的 DSL 语法，采用的是链式调用。上面示例代码中 shouldNot 是期望语法，期望是用来验证对象行为是否满足期望。</p><p>期望语法可以是期望数值和数字，也可以是期望字符串的匹配，比如：</p><pre><code>[[string should] containString:@&quot;rss&quot;];\n</code></pre><p>should containString 语法表示的是，期望 string 包含了 rss 字符串。Kiwi 里的期望语法非常丰富，还有正则表达式匹配、数量变化、对象测试、集合、交互和消息、通知、异步调用、异常等。完整的期望语法描述，你可以查看Wiki的 <a href=\"https://github.com/allending/Kiwi/wiki/Expectations\">Expectations 部分</a>。</p><p>除了期望语法外，Kiwi 还支持模拟对象和存根语法。</p><p>模拟对象能够降低对象之间的依赖，可以模拟难以出现的情况。模拟对象包含了模拟 Null 对象、模拟类的实例、模拟协议的实例等。存根可以返回指定选择器或消息模式的请求，可以存根对象和模拟对象。</p><p>模拟对象和存根的详细语法定义，你可以查看Wiki 的 <a href=\"https://github.com/allending/Kiwi/wiki/Mocks-and-Stubs\">Mocks and Stubs 部分</a>。</p><h2>小结</h2><p>按照 TDD 和 BDD 方式开发，有助于更好地进行模块化设计，划清模块边界，让代码更容易维护。TDD 在测试用例的保障下更容易进行代码重构优化，减少 debug 时间。而使用 BDD 编写的测试用例，则更是好的文档，可读性非常强。通过这些测试用例，在修改代码时，我们能够更方便地了解开发 App 的工作状态。同时，修改完代码后还能够快速全面地测试验证问题。</p><p>无论是 TDD 还是 BDD，开发中对于每个实现的方法都要编写测试用例，而且要注意先编写测试用例代码，再编写方法实现代码。测试用例需要考虑到各种异常条件，以及输入输出的边界。编写完测试用例还需要检查如果输入为错时，测试用例是否会显示为错。</p><p>最后需要强调一点，好的模块化架构和 TDD 、BDD 是相辅相成的。TDD 和 BDD 开发方式会让你的代码更加模块化，而模块化的架构更容易使用 TDD 和 BDD 的方式进行开发。</p><p>在团队中推行 TDD 和 BDD 的最大困难，就是业务迭代太快时，没有时间去写测试用例。我的建议是，优先对基础能力的功能开发使用 TDD 和 BDD，保证了基础能力的稳定，业务怎么变，底子还都是稳固的；当有了业务迭代、有了间隙时，再考虑在核心业务上采用 BDD，最大程度的保证 App 核心功能的稳定。</p><h2>课后作业</h2><p>今天我跟你聊了很多 TDD 和 BDD 的优点，但是很多团队并没有使用这样的开发方式，你觉得这其中的原因是什么呢？</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"28 | 怎么应对各种富文本表现需求？","id":95023},"right":{"article_title":"30 | 如何制定一套适合自己团队的 iOS 编码规范？","id":95854}},"comments":[{"had_liked":false,"id":98901,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1559114713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74573558745","product_id":100024501,"comment_content":"看到这个 “正在手淘推动BDD😄” 就放心了，原来大家都不做单元测试的哈","like_count":17},{"had_liked":false,"id":95119,"user_name":"Trust me ҉҉҉҉҉҉҉❀","can_delete":false,"product_type":"c1","uid":1112913,"ip_address":"","ucode":"B576CBDE262A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/51/870a6fcb.jpg","comment_is_top":false,"comment_ctime":1557970544,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"61687512688","product_id":100024501,"comment_content":"正在手淘推动BDD😄","like_count":15,"discussions":[{"author":{"id":1156383,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/OokHAy1fSOhBwwbbzud7seB5MEk4JezcGCS4Tzia7iaLOibCKgrj6PCN2b17bVAb224ygdLgjWVMnZsH18ibNoSTVA/132","nickname":"澜奏","note":"","ucode":"8682168E18B068","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40314,"discussion_content":"手淘的同学，最近更新app后，商品详情页，经常划不动像卡死一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572160886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454525,"avatar":"https://static001.geekbang.org/account/avatar/00/16/31/bd/62c945b4.jpg","nickname":"Link","note":"","ucode":"64849EF2B97975","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2639,"discussion_content":"麻烦手淘的同学看看微淘模块, bug很多, 经常图片加载不出来, 点击新品直接黑屏, 必须杀app","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563809589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/3f/52fa1e72.jpg","nickname":"findU","note":"","ucode":"B3F26ED4E5A29D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1007,"discussion_content":"哈哈哈，也就是说大厂也没做单元测试啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562231143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182669,"user_name":"故胤道长","can_delete":false,"product_type":"c1","uid":1001918,"ip_address":"","ucode":"CC42C4CD543833","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/be/970590a0.jpg","comment_is_top":false,"comment_ctime":1582847410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31647618482","product_id":100024501,"comment_content":"戴老师讲得非常全面。我个人认为TDD最大的问题是只关注单个功能的正确性，却无法保证设计上的性能。从整体设计角度来看TDD并没有促进作用。","like_count":7},{"had_liked":false,"id":95065,"user_name":"小万叔叔","can_delete":false,"product_type":"c1","uid":1448768,"ip_address":"","ucode":"41966A18867C63","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/40/68e59e53.jpg","comment_is_top":false,"comment_ctime":1557965624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31622736696","product_id":100024501,"comment_content":"没有采用TDD或BDD的原因： 一来很多业务迭代的比较快，没有时间是一个原因。 二来，能够TDD是建立在编写TDD的场景足够，也就是能模拟细粒度模块的外围环境，对于小项目而言想要的往往就是快速出产品，一开始就关注细粒度模块化的很少，对于大项目，受历史原因业务之间的强耦合导致很难去构建Mock场景。 挺赞同从基础模块和对外的 SDK 结合业务的发展去编写TDD可能更合适。<br>","like_count":7},{"had_liked":false,"id":98480,"user_name":"赶紧学起来","can_delete":false,"product_type":"c1","uid":1523664,"ip_address":"","ucode":"965392C1C38638","user_header":"https://static001.geekbang.org/account/avatar/00/17/3f/d0/5bd853ea.jpg","comment_is_top":false,"comment_ctime":1559009064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18738878248","product_id":100024501,"comment_content":"大都不用TDD&#47;BDD，觉得原因有三<br>1、 流程不够规范<br>2、迭代快时间紧<br>3、开发完给测试","like_count":4},{"had_liked":false,"id":95237,"user_name":"不知名的iOS网友","can_delete":false,"product_type":"c1","uid":1454387,"ip_address":"","ucode":"8E21A2FD5C9697","user_header":"","comment_is_top":false,"comment_ctime":1557994735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18737863919","product_id":100024501,"comment_content":"课程一些笔记：https:&#47;&#47;github.com&#47;CrusherWu&#47;iOSRoadMap","like_count":4},{"had_liked":false,"id":95138,"user_name":"时间都去哪了","can_delete":false,"product_type":"c1","uid":1002729,"ip_address":"","ucode":"F1A52A55218C0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/e9/6c5191ea.jpg","comment_is_top":false,"comment_ctime":1557973529,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14442875417","product_id":100024501,"comment_content":"TDD,OC有什么好用的推荐框架吗?","like_count":3,"discussions":[{"author":{"id":2382667,"avatar":"","nickname":"文培定","note":"","ucode":"A13E83C4FFDEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375187,"discussion_content":"TDD还用框架？写测试用来不是写代码~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621505186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98170,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1456901,"ip_address":"","ucode":"8C1AD026C1AC84","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/05/b2776d73.jpg","comment_is_top":false,"comment_ctime":1558924087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853891383","product_id":100024501,"comment_content":"感觉内容高大上，和我们小公司不沾边，不过作为了解内容，还是不错的，感谢大神","like_count":1},{"had_liked":false,"id":341329,"user_name":"lucas.liao","can_delete":false,"product_type":"c1","uid":2893420,"ip_address":"","ucode":"9C6F0DB859CE37","user_header":"","comment_is_top":false,"comment_ctime":1649523425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649523425","product_id":100024501,"comment_content":"无论是 TDD、TDD，测试逻辑还是有办法可以做，但是可能需要做好分层，mock数据啥的。但是测试视图目前比较困难，比较好的实践就是 FB 的 iOSSnapshotTest","like_count":0},{"had_liked":false,"id":293720,"user_name":"文培定","can_delete":false,"product_type":"c1","uid":2382667,"ip_address":"","ucode":"A13E83C4FFDEBC","user_header":"","comment_is_top":false,"comment_ctime":1621504772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621504772","product_id":100024501,"comment_content":"一直在小公司待，发现我这TDD都是相反的，一般都是先开发，后写测试用例。而对于BDD，一般涉及到纯逻辑的东西，例如某种算法的实现，才会去写测试code，因为有时候也不确定自己的算法是否写对了。","like_count":0},{"had_liked":false,"id":120803,"user_name":"Tiger Nong","can_delete":false,"product_type":"c1","uid":1456962,"ip_address":"","ucode":"B79F6A54AD8FB0","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/42/2b6313ec.jpg","comment_is_top":false,"comment_ctime":1564998122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564998122","product_id":100024501,"comment_content":"戴老师，如果这个UI是在SDK中的话，好像是获取不到控件的。还有可以将一些mock这块的东西吗？","like_count":0},{"had_liked":false,"id":95050,"user_name":"yuhao0x0628","can_delete":false,"product_type":"c1","uid":1332463,"ip_address":"","ucode":"BFD472974828A5","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/ef/3cdfd916.jpg","comment_is_top":false,"comment_ctime":1557964390,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557964390","product_id":100024501,"comment_content":"很多情況都是一開始都想說先實現幾項功能再補測試，然後就一直補一直寫，要避免這樣的情況最好使用 TDD &#47; BDD 同步測試代碼，確保整體質量，也管理測試用例。也為 CI 做好充足的準備。","like_count":0}]}