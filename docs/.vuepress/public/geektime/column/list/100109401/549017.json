{"id":549017,"title":"66｜RESTful Web Services（30）：什么情况下应该使用行为验证？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethods\n<ul>\n<li>当HEAD方法映射到GET方法时，忽略GET的返回值</li>\n<li>当没有OPTIONS方法时，提供默认实现</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>package geektime.tdd.rest;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.ws.rs.HttpMethod;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.container.ResourceContext;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.HttpHeaders;\nimport jakarta.ws.rs.core.Response;\nimport java.lang.reflect.Method;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\ninterface ResourceRouter {\n    OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext);\n    interface Resource extends UriHandler {\n        Optional&lt;ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n    interface ResourceMethod extends UriHandler {\n        String getHttpMethod();\n        GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder);\n    }\n}\nclass DefaultResourceRouter implements ResourceRouter {\n    private Runtime runtime;\n    private List&lt;Resource&gt; rootResources;\n    public DefaultResourceRouter(Runtime runtime, List&lt;Resource&gt; rootResources) {\n        this.runtime = runtime;\n        this.rootResources = rootResources;\n    }\n    @Override\n    public OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext) {\n        String path = request.getServletPath();\n        UriInfoBuilder uri = runtime.createUriInfoBuilder(request);\n        Optional&lt;ResourceMethod&gt; method = UriHandlers.mapMatched(path, rootResources, (result, resource) -&gt; findResourceMethod(request, resourceContext, uri, result, resource));\n        if (method.isEmpty()) return (OutboundResponse) Response.status(Response.Status.NOT_FOUND).build();\n        return (OutboundResponse) method.map(m -&gt; m.call(resourceContext, uri)).map(entity -&gt; Response.ok(entity).build())\n                .orElseGet(() -&gt; Response.noContent().build());\n    }\n    private Optional&lt;ResourceMethod&gt; findResourceMethod(HttpServletRequest request, ResourceContext resourceContext, UriInfoBuilder uri, Optional&lt;UriTemplate.MatchResult&gt; matched, Resource handler) {\n        return handler.match(matched.get(), request.getMethod(),\n                Collections.list(request.getHeaders(HttpHeaders.ACCEPT)).toArray(String[]::new), resourceContext, uri);\n    }\n}\n    \nclass DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n    private String httpMethod;\n    private UriTemplate uriTemplate;\n    private Method method;\n    public DefaultResourceMethod(Method method) {\n        this.method = method;\n        this.uriTemplate = new PathTemplate(Optional.ofNullable(method.getAnnotation(Path.class)).map(Path::value).orElse(&quot;&quot;));\n        this.httpMethod = Arrays.stream(method.getAnnotations()).filter(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class))\n                .findFirst().get().annotationType().getAnnotation(HttpMethod.class).value();\n    }\n    @Override\n    public String getHttpMethod() {\n        return httpMethod;\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    @Override\n    public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n        return null;\n    }\n    @Override\n    public String toString() {\n        return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n    }\n}\nclass   ResourceMethods {\n    private Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; resourceMethods;\n    public ResourceMethods(Method[] methods) {\n        this.resourceMethods = getResourceMethods(methods);\n    }\n    private static Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; getResourceMethods(Method[] methods) {\n        return Arrays.stream(methods).filter(m -&gt; Arrays.stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(DefaultResourceMethod::new)\n                .collect(Collectors.groupingBy(ResourceRouter.ResourceMethod::getHttpMethod));\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findResourceMethods(String path, String method) {\n        return findMethod(path, method).or(() -&gt; findAlternative(path, method));\n    }\n    private Optional&lt;ResourceRouter.ResourceMethod&gt; findAlternative(String path, String method) {\n        return &quot;HEAD&quot;.equals(method) ? findMethod(path, &quot;GET&quot;) : Optional.empty();\n    }\n    private Optional&lt;ResourceRouter.ResourceMethod&gt; findMethod(String path, String method) {\n        return Optional.ofNullable(resourceMethods.get(method)).flatMap(methods -&gt; UriHandlers.match(path, methods, r -&gt; r.getRemaining() == null));\n    }\n}\nclass SubResourceLocators {\n    private final List&lt;ResourceRouter.Resource&gt; subResourceLocators;\n    public SubResourceLocators(Method[] methods) {\n        subResourceLocators = Arrays.stream(methods).filter(m -&gt; m.isAnnotationPresent(Path.class) &amp;&amp;\n                        Arrays.stream(m.getAnnotations()).noneMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map((Function&lt;Method, ResourceRouter.Resource&gt;) SubResourceLocator::new).toList();\n    }\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; findSubResourceMethods(String path, String method, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        return UriHandlers.mapMatched(path, subResourceLocators, (result, locator) -&gt; locator.match(result.get(), method, mediaTypes, resourceContext, builder));\n    }\n    static class SubResourceLocator implements ResourceRouter.Resource {\n        private PathTemplate uriTemplate;\n        private Method method;\n        public SubResourceLocator(Method method) {\n            this.method = method;\n            this.uriTemplate = new PathTemplate(method.getAnnotation(Path.class).value());\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return uriTemplate;\n        }\n        @Override\n        public String toString() {\n            return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n        }\n        @Override\n        public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n            Object resource = builder.getLastMatchedResource();\n            try {\n                Object subResource = method.invoke(resource);\n                return new ResourceHandler(subResource, uriTemplate).match(result, httpMethod, mediaTypes, resourceContext, builder);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\nclass ResourceHandler implements ResourceRouter.Resource {\n    private UriTemplate uriTemplate;\n    private ResourceMethods resourceMethods;\n    private SubResourceLocators subResourceLocators;\n    private Function&lt;ResourceContext, Object&gt; resource;\n \n    public ResourceHandler(Class&lt;?&gt; resourceClass) {\n        this(resourceClass, new PathTemplate(getTemplate(resourceClass)), rc -&gt; rc.getResource(resourceClass));\n    }\n    private static String getTemplate(Class&lt;?&gt; resourceClass) {\n        if (!resourceClass.isAnnotationPresent(Path.class)) throw new IllegalArgumentException();\n        return resourceClass.getAnnotation(Path.class).value();\n    }\n    public ResourceHandler(Object resource, UriTemplate uriTemplate) {\n        this(resource.getClass(), uriTemplate, rc -&gt; resource);\n    }\n    private ResourceHandler(Class&lt;?&gt; resourceClass, UriTemplate uriTemplate, Function&lt;ResourceContext, Object&gt; resource) {\n        this.uriTemplate = uriTemplate;\n        this.resourceMethods = new ResourceMethods(resourceClass.getMethods());\n        this.subResourceLocators = new SubResourceLocators(resourceClass.getMethods());\n        this.resource = resource;\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String httpMethod, String[] mediaTypes, ResourceContext resourceContext, UriInfoBuilder builder) {\n        builder.addMatchedResource(resource.apply(resourceContext));\n        String remaining = Optional.ofNullable(result.getRemaining()).orElse(&quot;&quot;);\n        return resourceMethods.findResourceMethods(remaining, httpMethod)\n                .or(() -&gt; subResourceLocators.findSubResourceMethods(remaining, httpMethod, mediaTypes, resourceContext, builder));\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/7b766cd5cae34955b6b67e2a007c2ad4/snapshots/430be09017324ddb8a62afe24da329d8-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/274bf641-1827cbdb3ec-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/027bf7480c804b76bcd15f039bc0e966/56617602cd2b4954af2386710874cf07-2236d0a79dee5e34256ef17de1fa566b-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>接下来应该如何构造测试？</p><p>这个项目的内容也接近尾声了，为你的坚持学习和思考点赞，同时也再为你加油鼓劲儿！我们下节课再见！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"65｜RESTful Web Services（29）：后续任务将要如何划分与实现？","id":549015},"right":{"article_title":"67｜RESTful Web Services（31）：对于option的测试策略应该是怎样的？","id":548876}},"comments":[{"had_liked":false,"id":355048,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1661006666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661006666","product_id":100109401,"comment_content":"可以极大简化测试的时候，可以使用行为验证。<br>KISS原则：Keep It Simple, Stupid. 维基百科上说美国军方都在使用！<br>链接：https:&#47;&#47;zh.m.wikipedia.org&#47;zh&#47;KISS%E5%8E%9F%E5%88%99","like_count":0}]}