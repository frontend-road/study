{"id":135865,"title":"34 | 如何理解Flutter的编译模式？","content":"<p>你好，我是陈航。今天，我们来聊聊Flutter的编译模式吧。</p><p>在开发移动应用程序时，一个App的完整生命周期包括开发、测试和上线3个阶段。在每个阶段，开发者的关注点都不一样。</p><p>比如，在开发阶段，我们希望调试尽可能方便、快速，尽可能多地提供错误上下文信息；在测试阶段，我们希望覆盖范围尽可能全面，能够具备不同配置切换能力，可以测试和验证还没有对外发布的新功能；而在发布阶段，我们则希望能够去除一切测试代码，精简调试信息，使运行速度尽可能快，代码足够安全。</p><p>这就要求开发者在构建移动应用时，不仅要在工程内提前准备多份配置环境，还要利用编译器提供的编译选项，打包出符合不同阶段优化需求的App。</p><p>对于Flutter来说，它既支持常见的Debug、Release等工程物理层面的编译模式，也支持在工程内提供多种配置环境入口。今天，我们就来学习一下Flutter提供的编译模式，以及如何在App中引用开发环境和生产环境，使得我们在不破坏任何生产环境代码的情况下，能够测试处于开发期的新功能。</p><h2>Flutter的编译模式</h2><p>Flutter支持3种运行模式，包括Debug、Release和Profile。在编译时，这三种模式是完全独立的。首先，我们先来看看这3种模式的具体含义吧。</p><!-- [[[read_end]]] --><ul>\n<li>Debug模式对应Dart的JIT模式，可以在真机和模拟器上同时运行。该模式会打开所有的断言（assert），以及所有的调试信息、服务扩展和调试辅助（比如Observatory）。此外，该模式为快速开发和运行做了优化，支持亚秒级有状态的Hot reload（热重载），但并没有优化代码执行速度、二进制包大小和部署。flutter run --debug命令，就是以这种模式运行的。</li>\n<li>Release模式对应Dart的AOT模式，只能在真机上运行，不能在模拟器上运行，其编译目标为最终的线上发布，给最终的用户使用。该模式会关闭所有的断言，以及尽可能多的调试信息、服务扩展和调试辅助。此外，该模式优化了应用快速启动、代码快速执行，以及二级制包大小，因此编译时间较长。flutter run --release命令，就是以这种模式运行的。</li>\n<li>Profile模式，基本与Release模式一致，只是多了对Profile模式的服务扩展的支持，包括支持跟踪，以及一些为了最低限度支持所需要的依赖（比如，可以连接Observatory到进程）。该模式用于分析真实设备实际运行性能。flutter run --profile命令，就是以这种模式运行的。</li>\n</ul><p>由于Profile与Release在编译过程上几乎无差异，因此我们今天只讨论Debug和Release模式。</p><p>在开发应用时，为了便于快速发现问题，我们通常会在运行时识别当前的编译模式，去改变代码的部分执行行为：在Debug模式下，我们会打印详细的日志，调用开发环境接口；而在Release模式下，我们会只记录极少的日志，调用生产环境接口。</p><p>在运行时识别应用的编译模式，有两种解决办法：</p><ul>\n<li>通过断言识别；</li>\n<li>通过Dart VM所提供的编译常数识别。</li>\n</ul><p>我们先来看看<strong>如何通过断言识别应用的编译模式</strong>。</p><p>通过Debug与Release模式的介绍，我们可以得出，Release与Debug模式的一个重要区别就是，Release模式关闭了所有的断言。因此，我们可以借助于断言，写出只在Debug模式下生效的代码。</p><p>如下所示，我们在断言里传入了一个始终返回true的匿名函数执行结果，这个匿名函数的函数体只会在Debug模式下生效：</p><pre><code>assert(() {\n  //Do sth for debug\n  return true;\n}());\n</code></pre><p>需要注意的是，匿名函数声明调用结束时追加了小括号（）。 这是因为断言只能检查布尔值，所以我们必须使用括号强制执行这个始终返回true的匿名函数，以确保匿名函数体的代码可以执行。</p><p>接下来，我们再看看<strong>如何通过编译常数识别应用的编译模式</strong>。</p><p>如果说通过断言只能写出在Debug模式下运行的代码，而通过Dart提供的编译常数，我们还可以写出只在Release模式下生效的代码。Dart提供了一个布尔型的常量kReleaseMode，用于反向指示当前App的编译模式。</p><p>如下所示，我们通过判断这个常量，可以准确地识别出当前的编译模式：</p><pre><code>if(kReleaseMode){\n  //Do sth for release \n} else {\n  //Do sth for debug\n}\n</code></pre><h2>分离配置环境</h2><p>通过断言和kReleaseMode常量，我们能够识别出当前App的编译环境，从而可以在运行时对某个代码功能进行局部微调。而如果我们想在整个应用层面，为不同的运行环境提供更为统一的配置（比如，对于同一个接口调用行为，开发环境会使用dev.example.com域名，而生产环境会使用api.example.com域名），则需要在应用启动入口提供可配置的初始化方式，根据特定需求为应用注入配置环境。</p><p>在Flutter构建App时，为应用程序提供不同的配置环境，总体可以分为抽象配置、配置多入口、读配置和编译打包4个步骤：</p><ol>\n<li>抽象出应用程序的可配置部分，并使用InheritedWidget对其进行封装；</li>\n<li>将不同的配置环境拆解为多个应用程序入口（比如，开发环境为main-dev.dart、生产环境为main.dart），把应用程序的可配置部分固化在各个入口处；</li>\n<li>在运行期，通过InheritedWidget提供的数据共享机制，将配置部分应用到其子Widget对应的功能中；</li>\n<li>使用Flutter提供的编译打包选项，构建出不同配置环境的安装包。</li>\n</ol><p><strong>接下来，我将依次为你介绍具体的实现步骤。</strong></p><p>在下面的示例中，我会把应用程序调用的接口和标题进行区分实现，即开发环境使用dev.example.com域名，应用主页标题为dev；而生产环境使用api.example.com域名，主页标题为example。</p><p>首先是<strong>配置抽象</strong>。根据需求可以看出，应用程序中有两个需要配置的部分，即接口apiBaseUrl和标题appName，因此我定义了一个继承自InheritedWidget的类AppConfig，对这两个配置进行封装：</p><pre><code>class AppConfig extends InheritedWidget {\n  AppConfig({\n    @required this.appName,\n    @required this.apiBaseUrl,\n    @required Widget child,\n  }) : super(child: child);\n\n  final String appName;//主页标题\n  final String apiBaseUrl;//接口域名\n\n  //方便其子Widget在Widget树中找到它\n  static AppConfig of(BuildContext context) {\n    return context.inheritFromWidgetOfExactType(AppConfig);\n  }\n  \n  //判断是否需要子Widget更新。由于是应用入口，无需更新\n  @override\n  bool updateShouldNotify(InheritedWidget oldWidget) =&gt; false;\n}\n</code></pre><p>接下来，我们需要<strong>为不同的环境创建不同的应用入口</strong>。</p><p>在这个例子中，由于只有两个环境，即开发环境与生产环境，因此我们将文件分别命名为main_dev.dart和main.dart。在这两个文件中，我们会使用不同的配置数据来对AppConfig进行初始化，同时把应用程序实例MyApp作为其子Widget，这样整个应用内都可以获取到配置数据：</p><pre><code>//main_dev.dart\nvoid main() {\n  var configuredApp = AppConfig(\n    appName: 'dev',//主页标题\n    apiBaseUrl: 'http://dev.example.com/',//接口域名\n    child: MyApp(),\n  );\n  runApp(configuredApp);//启动应用入口\n}\n\n//main.dart\nvoid main() {\n  var configuredApp = AppConfig(\n    appName: 'example',//主页标题\n    apiBaseUrl: 'http://api.example.com/',//接口域名\n    child: MyApp(),\n  );\n  runApp(configuredApp);//启动应用入口\n}\n</code></pre><p>完成配置环境的注入之后，接下来就可以<strong>在应用内获取配置数据</strong>，来实现定制化的功能了。由于AppConfig是整个应用程序的根节点，因此我可以通过调用AppConfig.of方法，来获取到相关的数据配置。</p><p>在下面的代码中，我分别获取到了应用主页的标题，以及接口域名，并显示了出来：</p><pre><code>class MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    var config = AppConfig.of(context);//获取应用配置\n    return MaterialApp(\n      title: config.appName,//应用主页标题\n      home: MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    var config = AppConfig.of(context);//获取应用配置\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(config.appName),//应用主页标题\n      ),\n      body:  Center(\n        child: Text('API host: ${config.apiBaseUrl}'),//接口域名\n      ),\n    );\n  }\n}\n</code></pre><p>现在，我们已经完成了分离配置环境的代码部分。最后，我们可以使用Flutter提供的编译选项，来<strong>构建出不同配置的安装包</strong>了。</p><p>如果想要在模拟器或真机上运行这段代码，我们可以在flutter run命令后面，追加–target或-t参数，来指定应用程序初始化入口：</p><pre><code>//运行开发环境应用程序\nflutter run -t lib/main_dev.dart \n\n//运行生产环境应用程序\nflutter run -t lib/main.dart\n</code></pre><p>如果我们想在Android Studio上为应用程序创建不同的启动配置，则可以<strong>通过Flutter插件为main_dev.dart增加启动入口</strong>。</p><p>首先，点击工具栏上的Config Selector，选择Edit Configurations进入编辑应用程序启动选项：</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/4e/ab9617b62b6fd66ac2a0cc949aeb874e.png?wh=360*164\" alt=\"\"></p><center><span class=\"reference\">图1 Config Selector新增入口</span></center><p>然后，点击位于工具栏面板左侧顶部的“+”按钮，在弹出的菜单中选择Flutter选项，为应用程序新增一项启动入口：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/64/bf7cd1ffc0fc58557672b4420d1f7364.png?wh=646*1260\" alt=\"\"></p><center><span class=\"reference\">图2 选择新增类型</span></center><p>最后，在入口的编辑面板中，为main_dev选择程序的Dart入口，点击OK后，就完成了入口的新增工作：</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/78/7adea7407c99fbb1dfbbdfbb7b247278.png?wh=2154*1356\" alt=\"\"></p><center><span class=\"reference\">图3 编辑启动入口</span></center><p>接下来，我们就可以<strong>在Config Selector中切换不同的启动入口，从而直接在Android Studio中注入不同的配置环境了</strong>：</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/3e/8f38c9d92eda9ab8d6038a7e7611323e.png?wh=372*206\" alt=\"\"></p><center><span class=\"reference\">图4 Config Selector切换启动入口</span></center><p>我们试着在不同的入口中进行切换和运行，可以看到，App已经可以识别出不同的配置环境了：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/26/6a43d7189d9d8a8cb0184cb424c3ef26.png?wh=750*1334\" alt=\"\"></p><center><span class=\"reference\">图5 开发环境运行示例</span></center><p><img src=\"https://static001.geekbang.org/resource/image/6a/45/6afbe85bea6acfe86173085d34192145.png?wh=750*1334\" alt=\"\"></p><center><span class=\"reference\">图6 生产环境运行示例</span></center><p>而如果我们想要打包构建出适用于Android的APK，或是iOS的IPA安装包，则可以在flutter build 命令后面，同样追加–target或-t参数，指定应用程序初始化入口：</p><pre><code>//打包开发环境应用程序\nflutter build apk -t lib/main_dev.dart \nflutter build ios -t lib/main_dev.dart\n\n//打包生产环境应用程序\nflutter build apk -t lib/main.dart\nflutter build ios -t lib/main.dart\n</code></pre><h2>总结</h2><p>好了，今天的分享就到这里。我们来总结一下今天的主要内容吧。</p><p>Flutter支持Debug与Release的编译模式，并且这两种模式在构建时是完全独立的。Debug模式下会打开所有的断言和调试信息，而Release模式下则会关闭这些信息，因此我们可以通过断言，写出只在Debug模式下生效的代码。而如果我们想更精准地识别出当前的编译模式，则可以利用Dart所提供的编译常数kReleaseMode，写出只在Release模式下生效的代码。</p><p>除此之外，Flutter对于常见的分环境配置能力也提供了支持，我们可以使用InheritedWidget为应用中可配置部分进行封装抽象，通过配置多入口的方式为应用的启动注入配置环境。</p><p>需要注意的是，虽然断言和kReleaseMode都能够识别出Debug编译模式，但它们对二进制包的打包构建影响是不同的。</p><p>采用断言的方式，其相关代码会在Release构建中被完全剔除；而如果使用kReleaseMode常量来识别Debug环境，虽然这段代码永远不会在Release环境中执行，但却会被打入到二进制包中，增大包体积。因此，如果没有特殊需求的话，一定要使用断言来实现Debug特有的逻辑，或是在发布期前将使用kReleaseMode判断的Debug逻辑完全删除。</p><p>我把今天分享所涉及到的知识点打包到了<a href=\"https://github.com/cyndibaby905/34_multi_env\">GitHub</a>中，你可以下载下来，反复运行几次，加深理解与记忆。</p><h2>思考题</h2><p>最后，我给你留一道思考题吧。</p><p>在保持生产环境代码不变的情况下，如果想在开发环境中支持不同配置的切换，我们应该如何实现？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":142427,"user_name":"渐醒AINY","can_delete":false,"product_type":"c1","uid":1486783,"ip_address":"","ucode":"4F3AD4B3CD0170","user_header":"https://static001.geekbang.org/account/avatar/00/16/af/bf/06fa89fb.jpg","comment_is_top":false,"comment_ctime":1571367014,"is_pvip":false,"replies":[{"id":"56206","content":"厉害👍","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572322729,"ip_address":"","comment_id":142427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27341170790","product_id":100031001,"comment_content":"老师讲的很棒，帮助了我很多，我的一个Flutter项目也制作完成，并上架发布了","like_count":7,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471122,"discussion_content":"厉害👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572322729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133308,"user_name":"Geek_082580","can_delete":false,"product_type":"c1","uid":1134729,"ip_address":"","ucode":"C32FD726F82080","user_header":"","comment_is_top":false,"comment_ctime":1568510899,"is_pvip":false,"replies":[{"id":"52431","content":"用InheritedWidget配置多入口就可以了吧","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569499685,"ip_address":"","comment_id":133308,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10158445491","product_id":100031001,"comment_content":"对于一个 flutter module 工程， 即需要嵌入到已有 Android 项目，又需要单独运行调试，在这两种状态下需要不同的配置，比如不同的 plugin，请问老师有什么好的办法吗？","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467342,"discussion_content":"用InheritedWidget配置多入口就可以了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569499685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603017,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBsNaictOELd8V5cwPd0IKXiaJe7nzgmq9Ighibkku58rdwT5V1qUSuaULh8SAUou3aXEE3o8MNpeEhQ/132","nickname":"努力为明天","note":"","ucode":"39785D1D09AE37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15898,"discussion_content":"目前没发现，最舒服的方式就是开一个studio，开一个vsCode","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568858330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165795,"user_name":"火腿","can_delete":false,"product_type":"c1","uid":1308116,"ip_address":"","ucode":"40F17DBC18F5D5","user_header":"https://static001.geekbang.org/account/avatar/00/13/f5/d4/5a0a2f8d.jpg","comment_is_top":false,"comment_ctime":1577323679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872290975","product_id":100031001,"comment_content":"配置信息可以写到json或其它格式的本地文件里， 启动时读取配置信息。 或者把配置文件放到远程，可以实现动态加载样式或模块，本地有默认的配置， 以防网络不可用。 ","like_count":2},{"had_liked":false,"id":138721,"user_name":"liyuan","can_delete":false,"product_type":"c1","uid":1596209,"ip_address":"","ucode":"82829DBE2244AA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqUP1oawANUYOmFic40JrcRC4AVp0qVvuoibUFYkKDJtJNP6qXKnibB0nQ9kQibqCiakHkGoYXZbLTcibUw/132","comment_is_top":false,"comment_ctime":1570432999,"is_pvip":false,"replies":[{"id":"53531","content":"之前有讲过，Flutter只能接管引擎初始化以后的行为（运行时），像app名称、图标、启动图这些还是需要原生工程去搞的。按照这个标准解答你的问题：<br>1、dev，qa，uat，prod等多个环境可以在flutter工程里通过指定工程入口搞定<br>2、原生工程相关的配置差异，iOS可以采用多个build target方式实现。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1570519807,"ip_address":"","comment_id":138721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865400295","product_id":100031001,"comment_content":"仅仅通过-t能配置的参数还是太弱了，如果有dev，qa，uat，prod等多个环境，每个环境的app应用名称&#47;图标可能有差别，同时希望手机上多个环境的app共存<br><br>android可以用build flavor实现，ios应该怎么做比较好？","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469628,"discussion_content":"之前有讲过，Flutter只能接管引擎初始化以后的行为（运行时），像app名称、图标、启动图这些还是需要原生工程去搞的。按照这个标准解答你的问题：\n1、dev，qa，uat，prod等多个环境可以在flutter工程里通过指定工程入口搞定\n2、原生工程相关的配置差异，iOS可以采用多个build target方式实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570519807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135650,"user_name":"矮个子先生😝","can_delete":false,"product_type":"c1","uid":1147205,"ip_address":"","ucode":"2242A457B0E10D","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","comment_is_top":false,"comment_ctime":1569235217,"is_pvip":false,"replies":[{"id":"52457","content":"你可以点击kReleaseMode查看其声明，这两种方式是一样的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569501752,"ip_address":"","comment_id":135650,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864202513","product_id":100031001,"comment_content":"看到过另外一种判断方法:bool.fromEnvironment(&#39;dart.vm.product&#39;)","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468289,"discussion_content":"你可以点击kReleaseMode查看其声明，这两种方式是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569501752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147205,"avatar":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","nickname":"矮个子先生😝","note":"","ucode":"2242A457B0E10D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21851,"discussion_content":"😂受教了老师，只会用，还没来得及细看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569547568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133613,"user_name":"hz","can_delete":false,"product_type":"c1","uid":1002250,"ip_address":"","ucode":"8BF6ACDCC7D61C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/0a/4bb137d9.jpg","comment_is_top":false,"comment_ctime":1568621308,"is_pvip":false,"replies":[{"id":"52432","content":"坦白讲以InheritedWidget的方式传递数据，其原理就是基于Widget树的，所以如果获取不到Widget树上下文，就拿不到数据","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569499780,"ip_address":"","comment_id":133613,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5863588604","product_id":100031001,"comment_content":"var config = AppConfig.of(context); 获取配置的时候需要context作为参数，在build方法里面就可以方便获得配置。在其他地方没有context作为参数的时候，需要获取配置应该怎么获取","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467449,"discussion_content":"坦白讲以InheritedWidget的方式传递数据，其原理就是基于Widget树的，所以如果获取不到Widget树上下文，就拿不到数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569499780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071517,"avatar":"https://static001.geekbang.org/account/avatar/00/10/59/9d/2cbbe624.jpg","nickname":"欢欢","note":"","ucode":"EE93B03BC46E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193962,"discussion_content":"这里只是一个栗子，但是，这个有点栗子不恰当，容易让人产生误解。如果脱离上下文的配置就不应该写在inheritedwidget中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583164273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217725,"user_name":"。。。。。。","can_delete":false,"product_type":"c1","uid":1386333,"ip_address":"","ucode":"5E3CDC50A6F780","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MxIKVrOfvGrWibezibHJ376rHJOAtiaVyKtX9j5hZNdY9z1GH6tPJdgu66oE1fuBvc3Jnz9dhwd046xBXQYjia0H2g/132","comment_is_top":false,"comment_ctime":1589597248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589597248","product_id":100031001,"comment_content":"InheritedWidget 麻烦问一下如何能脱离了context 来使用呢？","like_count":0},{"had_liked":false,"id":143937,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1571809953,"is_pvip":false,"replies":[{"id":"58632","content":"恩，加一个开关就好，本质上跟切换主题类似","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574051684,"ip_address":"","comment_id":143937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571809953","product_id":100031001,"comment_content":"思考题：老师我的理解是直接再 new 一个 AppConfig 出来传入不同的参数不就好了吗？只是相当于我们有多种开发的 config，有几种就配置几个 AppConfig 可以吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471749,"discussion_content":"恩，加一个开关就好，本质上跟切换主题类似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574051684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}