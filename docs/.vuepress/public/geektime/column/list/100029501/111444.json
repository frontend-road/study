{"id":111444,"title":"22丨反范式设计：3NF有什么不足，为什么有时候需要反范式设计？","content":"<p>上一篇文章中，我们介绍了数据表设计的三种范式。作为数据库的设计人员，理解范式的设计以及反范式优化是非常有必要的。</p><p>为什么这么说呢？了解以下几个方面的内容之后你就明白了。</p><ol>\n<li>3NF有什么不足？除了3NF，我们为什么还需要BCNF？</li>\n<li>有了范式设计，为什么有时候需要进行反范式设计？</li>\n<li>反范式设计适用的场景是什么？又可能存在哪些问题？</li>\n</ol><h2>BCNF（巴斯范式）</h2><p>如果数据表的关系模式符合3NF的要求，就不存在问题了吗？我们来看下这张仓库管理关系warehouse_keeper表：</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/17/8b543855d7c005b3e1b0ee3fbb308b17.png?wh=987*320\" alt=\"\"><br>\n在这个数据表中，一个仓库只有一个管理员，同时一个管理员也只管理一个仓库。我们先来梳理下这些属性之间的依赖关系。</p><p>仓库名决定了管理员，管理员也决定了仓库名，同时（仓库名，物品名）的属性集合可以决定数量这个属性。</p><p>这样，我们就可以找到数据表的候选键是（管理员，物品名）和（仓库名，物品名），</p><p>然后我们从候选键中选择一个作为主键，比如（仓库名，物品名）。</p><p>在这里，主属性是包含在任一候选键中的属性，也就是仓库名，管理员和物品名。非主属性是数量这个属性。</p><p>如何判断一张表的范式呢？我们需要根据范式的等级，从低到高来进行判断。</p><p>首先，数据表每个属性都是原子性的，符合1NF的要求；其次，数据表中非主属性”数量“都与候选键全部依赖，（仓库名，物品名）决定数量，（管理员，物品名）决定数量，因此，数据表符合2NF的要求；最后，数据表中的非主属性，不传递依赖于候选键。因此符合3NF的要求。</p><!-- [[[read_end]]] --><p>既然数据表已经符合了3NF的要求，是不是就不存在问题了呢？我们来看下下面的情况：</p><ol>\n<li>增加一个仓库，但是还没有存放任何物品。根据数据表实体完整性的要求，主键不能有空值，因此会出现插入异常；</li>\n<li>如果仓库更换了管理员，我们就可能会修改数据表中的多条记录；</li>\n<li>如果仓库里的商品都卖空了，那么此时仓库名称和相应的管理员名称也会随之被删除。</li>\n</ol><p>你能看到，即便数据表符合3NF的要求，同样可能存在插入，更新和删除数据的异常情况。</p><p>这种情况下该怎么解决呢？</p><p>首先我们需要确认造成异常的原因：主属性仓库名对于候选键（管理员，物品名）是部分依赖的关系，这样就有可能导致上面的异常情况。人们在3NF的基础上进行了改进，提出了<strong>BCNF，也叫做巴斯-科德范式，它在3NF的基础上消除了主属性对候选键的部分依赖或者传递依赖关系</strong>。</p><p>根据BCNF的要求，我们需要把仓库管理关系warehouse_keeper表拆分成下面这样：</p><p>仓库表：（仓库名，管理员）</p><p>库存表：（仓库名，物品名，数量）</p><p>这样就不存在主属性对于候选键的部分依赖或传递依赖，上面数据表的设计就符合BCNF。</p><h2>反范式设计</h2><p>尽管围绕着数据表的设计有很多范式，但事实上，我们在设计数据表的时候却不一定要参照这些标准。</p><p>我们在之前已经了解了越高阶的范式得到的数据表越多，数据冗余度越低。但有时候，我们在设计数据表的时候，还需要为了性能和读取效率违反范式化的原则。反范式就是相对范式化而言的，换句话说，就是允许少量的冗余，通过空间来换时间。</p><p>如果我们想对查询效率进行优化，有时候反范式优化也是一种优化思路。</p><p>比如我们想要查询某个商品的前1000条评论，会涉及到两张表。</p><p>商品评论表product_comment，对应的字段名称及含义如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/b1/4c08f4fe07414ef26a48c1c0c52590b1.png?wh=1234*142\" alt=\"\"></p><p>用户表user，对应的字段名称及含义如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/f2/7daa1d6b0f5b42cd79e024d49ecf91f2.png?wh=1115*134\" alt=\"\"><br>\n下面，我们就用这两张表模拟一下反范式优化。</p><h2>实验数据：模拟两张百万量级的数据表</h2><p>为了更好地进行SQL优化实验，我们需要给用户表和商品评论表随机模拟出百万量级的数据。我们可以通过存储过程来实现模拟数据。</p><p>下面是给用户表随机生成100万用户的代码：</p><pre><code>CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_many_user`(IN start INT(10), IN max_num INT(10))\nBEGIN\nDECLARE i INT DEFAULT 0;\nDECLARE date_start DATETIME DEFAULT ('2017-01-01 00:00:00');\nDECLARE date_temp DATETIME;\nSET date_temp = date_start;\nSET autocommit=0;\nREPEAT\nSET i=i+1;\nSET date_temp = date_add(date_temp, interval RAND()*60 second);\nINSERT INTO user(user_id, user_name, create_time)\nVALUES((start+i), CONCAT('user_',i), date_temp);\nUNTIL i = max_num\nEND REPEAT;\nCOMMIT;\nEND\n</code></pre><p>我用date_start变量来定义初始的注册时间，时间为2017年1月1日0点0分0秒，然后用date_temp变量计算每个用户的注册时间，新的注册用户与上一个用户注册的时间间隔为60秒内的随机值。然后使用REPEAT … UNTIL … END REPEAT循环，对max_num个用户的数据进行计算。在循环前，我们将autocommit设置为0，这样等计算完成再统一插入，执行效率更高。</p><p>然后我们来运行call insert_many_user(10000, 1000000);调用存储过程。这里需要通过start和max_num两个参数对初始的user_id和要创建的用户数量进行设置。运行结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/36/e716bfa9153fea2c4bc524946796a036.png?wh=1144*116\" alt=\"\"><br>\n你能看到在MySQL里，创建100万的用户数据用时1分37秒。</p><p>接着我们再来给商品评论表product_comment随机生成100万条商品评论。这里我们设置为给某一款商品评论，比如product_id=10001。评论的内容为随机的20个字母。以下是创建随机的100万条商品评论的存储过程：</p><pre><code>CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_many_product_comments`(IN START INT(10), IN max_num INT(10))\nBEGIN\nDECLARE i INT DEFAULT 0;\nDECLARE date_start DATETIME DEFAULT ('2018-01-01 00:00:00');\nDECLARE date_temp DATETIME;\nDECLARE comment_text VARCHAR(25);\nDECLARE user_id INT;\nSET date_temp = date_start;\nSET autocommit=0;\nREPEAT\nSET i=i+1;\nSET date_temp = date_add(date_temp, INTERVAL RAND()*60 SECOND);\nSET comment_text = substr(MD5(RAND()),1, 20);\nSET user_id = FLOOR(RAND()*1000000);\nINSERT INTO product_comment(comment_id, product_id, comment_text, comment_time, user_id)\nVALUES((START+i), 10001, comment_text, date_temp, user_id);\nUNTIL i = max_num\nEND REPEAT;\nCOMMIT;\nEND\n</code></pre><p>同样的，我用date_start变量来定义初始的评论时间。这里新的评论时间与上一个评论的时间间隔还是60秒内的随机值，商品评论表中的user_id为随机值。我们使用REPEAT … UNTIL … END REPEAT循环，来对max_num个商品评论的数据进行计算。</p><p>然后调用存储过程，运行结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/23/c1/2346454ce5be3e50e1419960b15b60c1.png?wh=1413*113\" alt=\"\"><br>\nMySQL一共花了2分7秒完成了商品评论数据的创建。</p><h2>反范式优化实验对比</h2><p>如果我们想要查询某个商品ID，比如10001的前1000条评论，需要写成下面这样：</p><pre><code>SELECT p.comment_text, p.comment_time, u.user_name FROM product_comment AS p \nLEFT JOIN user AS u \nON p.user_id = u.user_id \nWHERE p.product_id = 10001 \nORDER BY p.comment_id DESC LIMIT 1000\n</code></pre><p>运行结果（1000条数据行）：</p><p><img src=\"https://static001.geekbang.org/resource/image/18/ae/18b242e516e0e9ebd68ca7b7d1e1d9ae.png?wh=1236*355\" alt=\"\"><br>\n运行时长为0.395秒，查询效率并不高。</p><p>这是因为在实际生活中，我们在显示商品评论的时候，通常会显示这个用户的昵称，而不是用户ID，因此我们还需要关联product_comment和user这两张表来进行查询。当表数据量不大的时候，查询效率还好，但如果表数据量都超过了百万量级，查询效率就会变低。这是因为查询会在product_comment表和user表这两个表上进行聚集索引扫描，然后再嵌套循环，这样一来查询所耗费的时间就有几百毫秒甚至更多。对于网站的响应来说，这已经很慢了，用户体验会非常差。</p><p>如果我们想要提升查询的效率，可以允许适当的数据冗余，也就是在商品评论表中增加用户昵称字段，在product_comment数据表的基础上增加user_name字段，就得到了product_comment2数据表。</p><p>你可以在<a href=\"https://pan.baidu.com/s/104t0vIlrA4nypu_PZIXG0w\">百度网盘</a>中下载这三张数据表product_comment、product_comment2和user表，密码为n3l8。</p><p>这样一来，只需单表查询就可以得到数据集结果：</p><pre><code>SELECT comment_text, comment_time, user_name FROM product_comment2 WHERE product_id = 10001 ORDER BY comment_id DESC LIMIT 1000\n</code></pre><p>运行结果（1000条数据）：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/2c/af1be5874a9e20414de1ec48775e392c.png?wh=1238*319\" alt=\"\"><br>\n优化之后只需要扫描一次聚集索引即可，运行时间为0.039秒，查询时间是之前的1/10。  你能看到，在数据量大的情况下，查询效率会有显著的提升。</p><h2>反范式存在的问题&amp;适用场景</h2><p>从上面的例子中可以看出，反范式可以通过空间换时间，提升查询的效率，但是反范式也会带来一些新问题。</p><p>在数据量小的情况下，反范式不能体现性能的优势，可能还会让数据库的设计更加复杂。比如采用存储过程来支持数据的更新、删除等额外操作，很容易增加系统的维护成本。</p><p>比如用户每次更改昵称的时候，都需要执行存储过程来更新，如果昵称更改频繁，会非常消耗系统资源。</p><p>那么反范式优化适用于哪些场景呢？</p><p>在现实生活中，我们经常需要一些冗余信息，比如订单中的收货人信息，包括姓名、电话和地址等。每次发生的订单收货信息都属于历史快照，需要进行保存，但用户可以随时修改自己的信息，这时保存这些冗余信息是非常有必要的。</p><p>当冗余信息有价值或者能大幅度提高查询效率的时候，我们就可以采取反范式的优化。</p><p>此外反范式优化也常用在数据仓库的设计中，因为数据仓库通常存储历史数据，对增删改的实时性要求不强，对历史数据的分析需求强。这时适当允许数据的冗余度，更方便进行数据分析。</p><p>我简单总结下数据仓库和数据库在使用上的区别：</p><ol>\n<li>数据库设计的目的在于捕获数据，而数据仓库设计的目的在于分析数据；</li>\n<li>数据库对数据的增删改实时性要求强，需要存储在线的用户数据，而数据仓库存储的一般是历史数据；</li>\n<li>数据库设计需要尽量避免冗余，但为了提高查询效率也允许一定的冗余度，而数据仓库在设计上更偏向采用反范式设计。</li>\n</ol><h2>总结</h2><p>今天我们讲了BCNF，它是基于3NF进行的改进。你能看到设计范式越高阶，数据表就会越精细，数据的冗余度也就越少，在一定程度上可以让数据库在内部关联上更好地组织数据。但有时候我们也需要采用反范进行优化，通过空间来换取时间。</p><p>范式本身没有优劣之分，只有适用场景不同。没有完美的设计，只有合适的设计，我们在数据表的设计中，还需要根据需求将范式和反范式混合使用。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/fb/acbb07c269c85683cc981c7f677d32fb.jpg?wh=3341*1521\" alt=\"\"><br>\n我们今天举了一个反范式设计的例子，你在工作中是否有做过反范式设计的例子？欢迎你在评论区与我们一起分享，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"21丨范式设计：数据表的范式有哪些，3NF指的是什么？","id":111180},"right":{"article_title":"23丨索引的概览：用还是不用索引，这是一个问题","id":112023}},"comments":[{"had_liked":false,"id":119158,"user_name":"DZ","can_delete":false,"product_type":"c1","uid":1132240,"ip_address":"","ucode":"452555FA0F9E0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","comment_is_top":true,"comment_ctime":1564532733,"is_pvip":false,"replies":[{"id":"63797","content":"总结的不错","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577542163,"ip_address":"","comment_id":119158,"utype":1}],"discussion_count":5,"race_medal":0,"score":"9.2233722402828001e+18","product_id":100029501,"comment_content":"一言以蔽之：反范式无处不在。😃<br><br>最近正在基于Hadoop建设某国企的数据集市项目（地域性非全网），恰如老师所言，我们就是在遵循反范式的设计。<br><br>简要来说，我们把数据加工链路分为四层，从下到上依次为：ODS贴源层、DWD明细层、DWS汇总层和ADS应用层。<br><br>多源异构的业务数据被源源不断ETL到ODS贴源层之后，经过清洗、规范、转换、拼接等，生成各类宽表存储在DWD明细层；再根据业务模型设计，以这些宽表为基础，生成各类标准的指标数据存储在DWS汇总层；ADS层则基于DWS层的汇总指标再度组合，计算得出应用层数据，直接面向业务需求。<br><br>在这样的系统设计中，反范式不仅体现在“宽表”的设计中，更体现在数据加工链路的完整生命周期中——上层都是对下层的冗余。","like_count":48,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460766,"discussion_content":"总结的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577542163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640426,"avatar":"https://static001.geekbang.org/account/avatar/00/19/07/ea/0275a294.jpg","nickname":"傻笑","note":"","ucode":"76B66A87F63A60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74382,"discussion_content":"打错了，基于hive","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575643791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640426,"avatar":"https://static001.geekbang.org/account/avatar/00/19/07/ea/0275a294.jpg","nickname":"傻笑","note":"","ucode":"76B66A87F63A60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74380,"discussion_content":"我们分层和你们一样，同时也是反范式建模，是基于hice的纬度建模","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575643775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032615,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","nickname":"林彦","note":"","ucode":"5094CC6ED7B40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3799,"discussion_content":"请问ODS是Object Data System的缩写吗？都会有哪些类型的数据源，主要用哪些方法写入这层数据系统的数据库和表的？谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564820024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132240,"avatar":"https://static001.geekbang.org/account/avatar/00/11/46/d0/6bafd7d4.jpg","nickname":"DZ","note":"","ucode":"452555FA0F9E0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1032615,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","nickname":"林彦","note":"","ucode":"5094CC6ED7B40C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3959,"discussion_content":"Operation Data Store\n\n操作数据层，又叫贴源层，特点是与源端业务数据保持一致。\n\n多采用ETL工具完成数据采集。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565006444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3799,"ip_address":""},"score":3959,"extra":""}]}]},{"had_liked":false,"id":119120,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1564525670,"is_pvip":false,"replies":[{"id":"47096","content":"总结和阐述的很好，大家都可以看下<br>“没有问题的程序是程序的特殊状态” 这个赞一下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566630600,"ip_address":"","comment_id":119120,"utype":1}],"discussion_count":2,"race_medal":0,"score":"224902825062","product_id":100029501,"comment_content":"       个人对于反范式的理解是：它会造成数据的冗余甚至是表与表之间的冗余；不过它最大的好处是减少了许多跨表查询从而大幅减少了查询时间。早期的设计其实一直强调范式化设计，可是当memcache出现后-其实就反向在揭示范式的不足。<br>       互联网行业和传统行业最大的区别是要求相应时间的短暂：这就造成了效率优先，这其实也是为何互联网行业的技术更新和使用走在最前面。曾经经历过设计表的过程中尽力追求范式，可是最终发现带来的问题就是性能的不足；范式其实就是规范，可是完完全全的规范-碰到特殊场景就不能那样使用。10年前接触到非关系型数据库时就引发了这种思考，sql server和mysql的机制和查询特长的不同更加引发了自己对于范式的反思。<br>      其实不同数据库对于范式的操作应当是不同的不同行业对于效率的要求是不同的：我觉得范式与反范式的关系可能有点像现在关系型数据库和非关系型数据库的使用一样，已经不再是单一化，如何让二者合理结合最大发挥数据库的查询效率才是关键-只有最合适的没有最好的；当我们过度的追求标准化时反而会忽视了产品真实的功能者作用，如何充分合理发挥产品性能其实才是我们所追求的。<br>         老师觉得呢：没有最标准的，任何方式都有缺陷，没有最好的只有最合适的；就像Google 的SRE中有句经典的话“没有问题的程序是程序的特殊状态”。","like_count":53,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460751,"discussion_content":"总结和阐述的很好，大家都可以看下\n“没有问题的程序是程序的特殊状态” 这个赞一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566630600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587337,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662983532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134427,"user_name":"Yuhui","can_delete":false,"product_type":"c1","uid":1110470,"ip_address":"","ucode":"811933B016179F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/c6/6f39a982.jpg","comment_is_top":false,"comment_ctime":1568822686,"is_pvip":false,"replies":[{"id":"75472","content":"赞下Yuhui同学的分享","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876036,"ip_address":"","comment_id":134427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"126122874270","product_id":100029501,"comment_content":"这个数据集都是百万条记录的，如果直接导入MySQL比较慢。如果先做以下设置会大大提高导入的速度：<br>SET GLOBAL unique_checks=0;<br>SET GLOBAL innodb_flush_log_at_trx_commit=0;<br>SET GLOBAL sync_binlog=0;<br><br>当然这不是SQL的问题，是数据库工作方式的问题，不在本课讨论范围内，只是提供大家参考，节省准备的时间。<br><br>导入完成以后记得把所有设置都改回1。","like_count":30,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467742,"discussion_content":"赞下Yuhui同学的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166539,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1577489517,"is_pvip":false,"replies":[{"id":"63470","content":"同意","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577503691,"ip_address":"","comment_id":166539,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31642260589","product_id":100029501,"comment_content":"反范式注意好同步。","like_count":8,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479532,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577503691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150417,"user_name":"董俊俊","can_delete":false,"product_type":"c1","uid":1297887,"ip_address":"","ucode":"732300A779660B","user_header":"https://static001.geekbang.org/account/avatar/00/13/cd/df/c520d418.jpg","comment_is_top":false,"comment_ctime":1573530843,"is_pvip":false,"replies":[{"id":"75470","content":"使用触发器，存储过程，或者自己写脚本自动执行更新都可以","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875845,"ip_address":"","comment_id":150417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27343334619","product_id":100029501,"comment_content":"请问老师，冗余字段的更新有哪些方式啊？文中只是提到存储过程更新冗余字段","like_count":7,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474154,"discussion_content":"使用触发器，存储过程，或者自己写脚本自动执行更新都可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119298,"user_name":"夜路破晓","can_delete":false,"product_type":"c1","uid":1353577,"ip_address":"","ucode":"9B875F94B759B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hZfficKPGCq2kjFBu9SgaMjibJTEl7iaW1ta6pZNyiaWP8XEsNpunlnsiaOtBpWTXfT5BvRP3qNByml6p9rtBvqewg/132","comment_is_top":false,"comment_ctime":1564553443,"is_pvip":false,"replies":[{"id":"47676","content":"是的，很多设计思维都是相通的。不仅是正反两方面，有时候我们还会遇到 Exploit &amp; Explore的问题，这个在探索未知世界，比如深度学习的收敛算法中会应用。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566902131,"ip_address":"","comment_id":119298,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23039389923","product_id":100029501,"comment_content":"范式与反范式，正如传统与解构，规则与务实，稳定与突破，守成与创新，是阴阳动静的矛盾关系，两者一而二，二而一，即和而不同、求同存异，落脚点是务实，也就是应用场景和业务需求。<br>所以说，这已经不单是数据库设计的问题，而中国哲学体系在互联网商业中实践指导。<br>数据库设计提出范式的同时存在反范式的要求，符合否定之否定的螺旋上升轨迹，是数据库也是SQL语言保持强壮生命力而经久不衰的重要原因，是现实生存逻辑的映射。","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460834,"discussion_content":"是的，很多设计思维都是相通的。不仅是正反两方面，有时候我们还会遇到 Exploit &amp;amp; Explore的问题，这个在探索未知世界，比如深度学习的收敛算法中会应用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566902131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119724,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1564665028,"is_pvip":false,"replies":[{"id":"75475","content":"感谢提问，这种情况下会用到事务的隔离级别，MySQL的默认隔离级别是可重复读(Repeatable Read)，数据同时删除，新增是不会有问题的。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876451,"ip_address":"","comment_id":119724,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18744534212","product_id":100029501,"comment_content":"老师您好，想问个问题；假设我在存储过程中，用到了一个临时表（作用就是保存中间数据以便后续做其他操作），先对临时表进行数据删除操作，然后对临时表进行插入操作。假设现在有两个人A,B同时调用该存储过程，是否存在如下风险，即：A执行存储过程时，正在删除数据，同一时刻，B执行存储过程时，新增数据？","like_count":5,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461039,"discussion_content":"感谢提问，这种情况下会用到事务的隔离级别，MySQL的默认隔离级别是可重复读(Repeatable Read)，数据同时删除，新增是不会有问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1693414,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d6/e6/87234c32.jpg","nickname":"木心云影","note":"","ucode":"5F7244D779AD9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49770,"discussion_content":"对，需要看隔离级别，如果是innodb的话，是不用担心那个问题的，即使肉眼看着是并行的，其实在数据库中还是串行执行的，肯定一个在前一个在后。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573634045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234682,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","nickname":"未来的胡先森","note":"","ucode":"AFF193AC0E2E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4736,"discussion_content":"你这不就是「并发」吗，应该要看你事务的隔离级别了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565695195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152865,"user_name":"梁","can_delete":false,"product_type":"c1","uid":1267198,"ip_address":"","ucode":"29A10759821D96","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/fe/e8fb06fb.jpg","comment_is_top":false,"comment_ctime":1574091531,"is_pvip":false,"replies":[{"id":"62770","content":"反范式在OLAP场景比较常见","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577090778,"ip_address":"","comment_id":152865,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10164026123","product_id":100029501,"comment_content":"olap可以用反范式，但oltp就不适合了，实时的交易和数据变化，反范式的空间换时间不适合","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474968,"discussion_content":"反范式在OLAP场景比较常见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577090778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196429,"user_name":"Cookie123456","can_delete":false,"product_type":"c1","uid":1913261,"ip_address":"","ucode":"F9EF63C38F8976","user_header":"","comment_is_top":false,"comment_ctime":1585280520,"is_pvip":false,"replies":[{"id":"75467","content":"感谢提问，不包含在任何一个候选键中的属性称为非主属性，所以管理员还不能算是非主属性，而属于候选键。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875408,"ip_address":"","comment_id":196429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880247816","product_id":100029501,"comment_content":"“”“在这里，主属性是包含在任一候选键中的属性，也就是仓库名，管理员和物品名。非主属性是数量这个属性。”   老师你你说的这句话我有点问题，按理说我们如果默认仓库名和物品名是候选键的话，那管理员就是非主属性， 候选键的一部分，也就是说仓库名可以推导出管理员，这不就存在局部依赖么。","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489296,"discussion_content":"感谢提问，不包含在任何一个候选键中的属性称为非主属性，所以管理员还不能算是非主属性，而属于候选键。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194721,"user_name":"博弈","can_delete":false,"product_type":"c1","uid":1433344,"ip_address":"","ucode":"B1A69837E41972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EcYNib1bnDf5dz6JcrE8AoyZYMdqic2VNmbBtCcVZTO9EoDZZxqlQDEqQKo6klCCmklOtN9m0dTd2AOXqSneJYLw/132","comment_is_top":false,"comment_ctime":1585099743,"is_pvip":false,"replies":[{"id":"75465","content":"哈哈 谢谢博弈同学","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875078,"ip_address":"","comment_id":194721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880067039","product_id":100029501,"comment_content":"老师讲的浅显易懂，学完本章节，又重新温故了一下三范式。","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488879,"discussion_content":"哈哈 谢谢博弈同学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149280,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1573181885,"is_pvip":false,"replies":[{"id":"75471","content":"你说的有一定道理，这种链接的方式，如果不更新，对于原有链接依然有效（链接相当于ID的作用）<br>不过如果是名称的话，他确实已经发生了修改，这种情况下，如果不更新的话，名称就会产生错误","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876006,"ip_address":"","comment_id":149280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868149181","product_id":100029501,"comment_content":"比如用户每次更改昵称的时候，都需要执行存储过程来更新，如果昵称更改频繁，会非常消耗系统资源。<br>&gt; 其实不是不是不去同步更新昵称会比较好，就像微博的设计 ，当初我被人@的是A这个昵称，后续我改了昵称，变成了C，之前@A的这个链接就找不到我的信息了，这样是不是会好一点。","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473803,"discussion_content":"你说的有一定道理，这种链接的方式，如果不更新，对于原有链接依然有效（链接相当于ID的作用）\n不过如果是名称的话，他确实已经发生了修改，这种情况下，如果不更新的话，名称就会产生错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121356,"user_name":"习惯沉淀","can_delete":false,"product_type":"c1","uid":1144692,"ip_address":"","ucode":"9C590226330AD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/74/c1f0aa46.jpg","comment_is_top":false,"comment_ctime":1565105253,"is_pvip":false,"replies":[{"id":"63574","content":"看下delimiter 是否定义了，如果是用的Navicat 可以不用定义","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577518848,"ip_address":"","comment_id":121356,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5860072549","product_id":100029501,"comment_content":"MySQL8.0执行存储过程语句报错？[Err] 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39; at line 3","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461757,"discussion_content":"看下delimiter 是否定义了，如果是用的Navicat 可以不用定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577518848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1868570,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/83/1a/f9d9225f.jpg","nickname":"欧阳啊","note":"","ucode":"CF1D0F0802713B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189370,"discussion_content":"CREATE PROCEDURE `insert_many_user`(IN start INT(10), IN max_num INT(10))\nBEGIN\nDECLARE i INT DEFAULT 0;\nDECLARE date_start DATETIME DEFAULT (&#39;2017-01-01 00:00:00&#39;);\nDECLARE date_temp DATETIME;\nSET date_temp = date_start;\nSET autocommit=0;\nREPEAT\nSET i=i+1;\nSET date_temp = date_add(date_temp, interval RAND()*60 second);\nINSERT INTO user(user_id, user_name, create_time)\nVALUES((start+i), CONCAT(&#39;user_&#39;,i), date_temp);\nUNTIL i = max_num\nEND REPEAT;\nCOMMIT;\nEND","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582873783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070189,"avatar":"https://static001.geekbang.org/account/avatar/00/10/54/6d/c947ef55.jpg","nickname":"Neo","note":"","ucode":"A2B2E2F8780557","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4452,"discussion_content":"定义delimiter试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565429800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288587,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1618552570,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1618552570","product_id":100029501,"comment_content":"“冗余字段的更新有哪些方式啊？文中只是提到存储过程更新冗余字段”。<br>老师的回复是：使用触发器，存储过程，或者自己写脚本自动执行更新都可以。<br><br>这个是从数据库层面给出的回答吧，我理解，平时的业务操作，针对冗余字段的更新，应该通过业务服务的更新接口来处理，否则数据库里面写很多触发器或存储过程，一方面给数据库带来压力，二是业务开发人员可能都不知道这些（主要负责代码开发，不涉及数据库维护），（当然，一个人维护的小项目或数据量很小，这么做也没啥问题），想听听老师的理解。<br>另外，再请教一下，平时我很少用外键了，这也算一个反范式，我把外键约束放在业务层来处理了，我个人觉得这是趋势，想听听老师的看法，谢谢。","like_count":0},{"had_liked":false,"id":258801,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604559797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604559797","product_id":100029501,"comment_content":"很正常，有的业务关系复杂，可能涉及到很多信息，比如说消息，有升级通知，有库存警告，有审批通知，订单通知，你要是真的不整点冗余强行三范式，你回头根据不同的情况回填消息数据，你就别指望效率了，你能把SQL写明白就相当不错了。","like_count":0},{"had_liked":false,"id":240209,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1596788187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596788187","product_id":100029501,"comment_content":"前期范式，后期适当反范式，有点木桶效应的意思。<br>前期受硬件限制，内存、硬盘资源相对稀缺，如何能最大程度减少数据存库空间是第一要务；<br>随着硬件发展，内存、硬盘不再稀缺，而如何提高用户体验、数据实时响应变成了第一要务，（适当）反范式也就自然来了。<br>","like_count":0},{"had_liked":false,"id":225245,"user_name":"Geek_Song","can_delete":false,"product_type":"c1","uid":1535217,"ip_address":"","ucode":"DCC90A6683D024","user_header":"https://static001.geekbang.org/account/avatar/00/17/6c/f1/9ab33f89.jpg","comment_is_top":false,"comment_ctime":1591692849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591692849","product_id":100029501,"comment_content":"老师，巴斯范式中说消除了主属性对于候选键的部分依赖，意思是说主属性和候选键之间要完全依赖是吗？","like_count":0},{"had_liked":false,"id":196421,"user_name":"Cookie123456","can_delete":false,"product_type":"c1","uid":1913261,"ip_address":"","ucode":"F9EF63C38F8976","user_header":"","comment_is_top":false,"comment_ctime":1585280080,"is_pvip":false,"replies":[{"id":"75468","content":"可以这么理解，确实万事万物都有它互补的一面","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875474,"ip_address":"","comment_id":196421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585280080","product_id":100029501,"comment_content":"怎么有一种任何事务都没有自己完美的一面，万事互补，这是中庸之道么","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489293,"discussion_content":"可以这么理解，确实万事万物都有它互补的一面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189490,"user_name":"刘凯","can_delete":false,"product_type":"c1","uid":1350608,"ip_address":"","ucode":"EFDC932CAE61A6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/d0/86aee34c.jpg","comment_is_top":false,"comment_ctime":1584521866,"is_pvip":false,"replies":[{"id":"75466","content":"感谢提问，这种需求下不一定要采用RDBMS，可以使用缓存Redis，尤其是计算时间是否到期这种，redis可以很方便的设置键的生存时间或过期时间<br>","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875217,"ip_address":"","comment_id":189490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584521866","product_id":100029501,"comment_content":"某任务再A时间被指派，要求在B时间完成，任务列表中有一列用于提醒该任务快到期了。条件是距离B时间一个工作日内。计算工作日用的自定义函数加工作日期表。用到计算感觉很耗时间，这样的字段用冗余存储会好些吗？数据量一天1000条","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487708,"discussion_content":"感谢提问，这种需求下不一定要采用RDBMS，可以使用缓存Redis，尤其是计算时间是否到期这种，redis可以很方便的设置键的生存时间或过期时间\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167997,"user_name":"咕咕咕","can_delete":false,"product_type":"c1","uid":1319375,"ip_address":"","ucode":"E939C1FD951235","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/cf/f47e092d.jpg","comment_is_top":false,"comment_ctime":1577973606,"is_pvip":false,"replies":[{"id":"75469","content":"有一定道理，毕竟数据量太大，另外从实用角度来看，这个修改名称对于购物体验帮助不大，毕竟不是社交网站。反而有可能希望会员名称更稳定，方便商家后台管理","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585875640,"ip_address":"","comment_id":167997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577973606","product_id":100029501,"comment_content":"老师，请教个问题：淘宝不让修改会员名称是不是有可能更新特别麻烦？比如采用反范式设计？瞎猜的哈哈。","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480093,"discussion_content":"有一定道理，毕竟数据量太大，另外从实用角度来看，这个修改名称对于购物体验帮助不大，毕竟不是社交网站。反而有可能希望会员名称更稳定，方便商家后台管理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585875640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132215,"user_name":"峻铭","can_delete":false,"product_type":"c1","uid":1106202,"ip_address":"","ucode":"63AB23BADACA88","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/1a/20977779.jpg","comment_is_top":false,"comment_ctime":1568043663,"is_pvip":false,"replies":[{"id":"53403","content":"不同的设备和运行环境 处理的时间不同，只要能证明这种情况下 反范式优化效率更高即可。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570434004,"ip_address":"","comment_id":132215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568043663","product_id":100029501,"comment_content":"反范式优化之前 实验结果是0.038秒，使用反范式添加user_name之后实验结果为0.002秒。怎么和老师的结果差别这么大呢","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466825,"discussion_content":"不同的设备和运行环境 处理的时间不同，只要能证明这种情况下 反范式优化效率更高即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570434004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130306,"user_name":"Back to the original beautiful","can_delete":false,"product_type":"c1","uid":1646545,"ip_address":"","ucode":"E21D65C6BF08E7","user_header":"https://static001.geekbang.org/account/avatar/00/19/1f/d1/a8249800.jpg","comment_is_top":false,"comment_ctime":1567421978,"is_pvip":false,"replies":[{"id":"75473","content":"对的（管理员，物品名）是个候选键, （仓库名，物品名）也是个候选键","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876082,"ip_address":"","comment_id":130306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567421978","product_id":100029501,"comment_content":"选键是（管理员，物品名）和（仓库名，物品名）<br>老师,你这里的意思是:管理员+物品名 组成一个候选键,然后仓库名+物品名 组成一个候选键的意思嘛?<br>","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465896,"discussion_content":"对的（管理员，物品名）是个候选键, （仓库名，物品名）也是个候选键","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119971,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1564741767,"is_pvip":false,"replies":[{"id":"75474","content":"候选键是（管理员，物品名）或者（仓库名，物品名），这两个候选键里面选择一个就好啦","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876214,"ip_address":"","comment_id":119971,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1564741767","product_id":100029501,"comment_content":"问个问题：【我们就可以找到数据表的候选键是（管理员，物品名）和（仓库名，物品名）】这里不太明白，如果我选择【候选键是（仓库名，物品名）和（管理员，物品名）】可不可以？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461155,"discussion_content":"候选键是（管理员，物品名）或者（仓库名，物品名），这两个候选键里面选择一个就好啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234682,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","nickname":"未来的胡先森","note":"","ucode":"AFF193AC0E2E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4738,"discussion_content":"前两者是为了找出能够确定一条数据的候选码，后面选的两个就是第二范式也不满足了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565695324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249564,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/1c/a2867a78.jpg","nickname":"月君","note":"","ucode":"CC95BE88B04551","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3969,"discussion_content":"可以啊，这两个都是候选键，候选键 只是说选一个能代表一组里面唯一的出来，但是同时唯一组合的有可能可以出现很多，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565010204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119443,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1564589149,"is_pvip":false,"replies":[{"id":"75476","content":"对的 违反第一范式，建议还是把两个字段分开来保存。如果是历史原因已经无法修改了，要不就是继续原有方式使用。或者就写个脚本，将字段分离，至少满足第一范式","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876664,"ip_address":"","comment_id":119443,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1564589149","product_id":100029501,"comment_content":"有一个问题，请问老师，如果一个字段内容存的是:<br><br>会员ID@会员名称<br><br>这样是不是算违反第一范式？在工作中遇到过类似方式存储的数据，但由于历史数据和牵涉过多的原因，已经无法修改。。<br><br>在每次做统计类需求的时候，就会用反范式设计，方便查询，而且速度会很快。<br><br><br>","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460906,"discussion_content":"对的 违反第一范式，建议还是把两个字段分开来保存。如果是历史原因已经无法修改了，要不就是继续原有方式使用。或者就写个脚本，将字段分离，至少满足第一范式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012325,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","nickname":"雪飞鸿","note":"","ucode":"65D7B030828809","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14086,"discussion_content":"会员名称发生改动的话就比较麻烦了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568726742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125885,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2d/fd/cfc952f5.jpg","nickname":"大科爱吃肉","note":"","ucode":"4C243A5729A848","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4102,"discussion_content":"违反第一范式。可业务中会遇到需要这么做的情况。但我想不到他的好处——对于产品经理频繁的改动来说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565135842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119382,"user_name":"床头猫🐱","can_delete":false,"product_type":"c1","uid":1117049,"ip_address":"","ucode":"9D8A1DB7D71912","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/79/a300436c.jpg","comment_is_top":false,"comment_ctime":1564575422,"is_pvip":true,"replies":[{"id":"75477","content":"感谢提问，这个和你数据表中字段匹配相关，可以把两种方式都写下来，做下执行对比下就好啦。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876816,"ip_address":"","comment_id":119382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564575422","product_id":100029501,"comment_content":"老师你好，有个问题，就是我这里有四张表都是1对1关联的，数据量大概四千多万，用left join和分四条sql查，哪个更好一点，oracle数据库，两种方式都会命中索引","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460878,"discussion_content":"感谢提问，这个和你数据表中字段匹配相关，可以把两种方式都写下来，做下执行对比下就好啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119295,"user_name":"全有","can_delete":false,"product_type":"c1","uid":1488139,"ip_address":"","ucode":"D16B42B1F71E4E","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/0b/df89c357.jpg","comment_is_top":false,"comment_ctime":1564552836,"is_pvip":false,"replies":[{"id":"75479","content":"感谢提问，如果发现慢查询日志中记录很多commit操作后，那么应该是提交commit时，消耗了很多时间。如果想要查找是对应的哪些DML语句，可以通过binlog进行查找","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585877307,"ip_address":"","comment_id":119295,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564552836","product_id":100029501,"comment_content":"老师你好，抛开本次课程，问一个现象：<br>慢查询日志如下：<br># Query_time: 10.612971  Lock_time: 0.000000 Rows_sent: 0  Rows_examined: 0<br>SET timestamp=1564551836;<br>commit;<br><br>两个问题：<br>1：Commit 是如何发生的，做啦什么事？<br>2:  所耗时长为什么会那么久？ ","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460832,"discussion_content":"感谢提问，如果发现慢查询日志中记录很多commit操作后，那么应该是提交commit时，消耗了很多时间。如果想要查找是对应的哪些DML语句，可以通过binlog进行查找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585877307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119257,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564544526,"is_pvip":false,"replies":[{"id":"75478","content":"这种情况下，是否可以写个脚本定期完成下更新，就是check下用户名称修改的，然后在评论表中进行用户名称的更新","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1585876943,"ip_address":"","comment_id":119257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564544526","product_id":100029501,"comment_content":"老师你好，问个问题。如果用记表国用户名称字段修改了，那评论表中用户名称是否要跟着改呢。这个怎么处理？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460810,"discussion_content":"这种情况下，是否可以写个脚本定期完成下更新，就是check下用户名称修改的，然后在评论表中进行用户名称的更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585876943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}