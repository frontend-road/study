{"id":529910,"title":"44｜RESTful Web Services（8）：如何在现有代码的基础上构造测试？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ay/6b/ayy42af78d776e59ecfb351b86f5ff6b.jpg?wh=8000x4500\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/01/ee/014f16b122d581f0936e236d94dcc4ee.jpeg?wh=8000x4500\" alt=\"\"></p><p>任务列表为：</p><ul>\n<li>\n<p>ResourceServlet</p>\n<ul>\n<li>\n<p>将请求派分给对应的资源（Resource），并根据返回的状态、超媒体类型、内容，响应Http请求</p>\n<ul>\n<li><s>使用OutboundResponse的status作为Http Response的状态</s></li>\n<li><s>使用OutboundResponse的headers作为Http Response的Http Headers</s></li>\n<li><s>通过MessageBodyWriter将OutboundResponse的GenericEntity写回为Body</s></li>\n<li>如果找不到对应的MessageBodyWriter，则返回500族错误</li>\n<li>如果找不到对应的HeaderDelegate，则返回500族错误</li>\n<li>如果找不到对应的ExceptionMapper，则返回500族错误</li>\n<li><s>如果entity为空，则忽略body</s></li>\n</ul>\n</li>\n<li>\n<p><s>当资源方法抛出异常时，根据异常响应Http请求</s></p>\n<ul>\n<li><s>如果抛出WebApplicationException，且response不为null，则使用response响应Http</s></li>\n<li><s>如果抛出的不是WebApplicationException，则通过异常的具体类型查找ExceptionMapper，生产response响应Http请求</s></li>\n</ul>\n</li>\n<li>\n<p>当其他组件抛出异常时，根据异常响应Http请求</p>\n<ul>\n<li>调用ExceptionMapper时</li>\n<li>调用HeaderDelegate时</li>\n<li>调用MessageBodyWriter时</li>\n<li>通过Providers查找ExceptionMapper时</li>\n<li>通过Providers查找MessageBodyWriter时</li>\n<li>通过RuntimeDelegate查找HeaderDelegate时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>RuntimeDelegate</p>\n<ul>\n<li>为MediaType提供HeaderDelegate</li>\n<li>为CacheControl提供HeaderDelegate</li>\n<li>为Cookie提供HeaderDelegates</li>\n<li>为EntityTag提供HeaderDelegate</li>\n<li>为Link提供HeaderDelegate</li>\n<li>为NewCookie提供HeaderDelegate</li>\n<li>为Date提供HeaderDelegate</li>\n<li>提供OutboundResponseBuilder</li>\n</ul>\n</li>\n<li>\n<p>OutboundResponseBuilder</p>\n</li>\n<li>\n<p>OutboundResponse</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>代码为：</p><pre><code>package geektime.tdd.rest;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.ws.rs.WebApplicationException;\nimport jakarta.ws.rs.core.GenericEntity;\nimport jakarta.ws.rs.core.MultivaluedMap;\nimport jakarta.ws.rs.ext.ExceptionMapper;\nimport jakarta.ws.rs.ext.MessageBodyWriter;\nimport jakarta.ws.rs.ext.Providers;\nimport jakarta.ws.rs.ext.RuntimeDelegate;\nimport java.io.IOException;\nimport java.util.function.Supplier;\n\npublic class ResourceServlet extends HttpServlet {\n    private Runtime runtime;\n    private Providers providers;\n    \n    public ResourceServlet(Runtime runtime) {\n        this.runtime = runtime;\n        this.providers = runtime.getProviders();\n    }\n    \n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ResourceRouter router = runtime.getResourceRouter();\n        respond(resp, () -&gt; router.dispatch(req, runtime.createResourceContext(req, resp)));\n    }\n    \n    private void respond(HttpServletResponse resp, Supplier&lt;OutboundResponse&gt; supplier) {\n        try {\n            respond(resp, supplier.get());\n        } catch (WebApplicationException exception) {\n            respond(resp, () -&gt; (OutboundResponse) exception.getResponse());\n        } catch (Throwable throwable) {\n            respond(resp, () -&gt; from(throwable));\n        }\n    }\n    \n    private void respond(HttpServletResponse resp, OutboundResponse response) throws IOException {\n        resp.setStatus(response.getStatus());\n        MultivaluedMap&lt;String, Object&gt; headers = response.getHeaders();\n        for (String name : headers.keySet())\n            for (Object value : headers.get(name)) {\n                RuntimeDelegate.HeaderDelegate headerDelegate = RuntimeDelegate.getInstance().createHeaderDelegate(value.getClass());\n                resp.addHeader(name, headerDelegate.toString(value));\n            }\n        GenericEntity entity = response.getGenericEntity();\n        if (entity != null) {\n            MessageBodyWriter writer = providers.getMessageBodyWriter(entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType());\n            writer.writeTo(entity.getEntity(), entity.getRawType(), entity.getType(), response.getAnnotations(), response.getMediaType(),\n                    response.getHeaders(), resp.getOutputStream());\n        }\n    }\n    \n    private OutboundResponse from(Throwable throwable) {\n        ExceptionMapper mapper = providers.getExceptionMapper(throwable.getClass());\n        return (OutboundResponse) mapper.toResponse(throwable);\n    }\n}\n</code></pre><h2>视频演示</h2><p>下面让我们继续：</p><p><video poster=\"https://media001.geekbang.org/5f3a84e1f0c04e6f9d28dd163ee4e3df/snapshots/871fd3abb22042bdb2e0239bc0c2893b-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/253a1469-1817f405d74-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/a4436d919158407aa461780fa50e2d6b/dcf6e09e50514eed9d4625eb1ccbb769-c3215a7a9e4de6a652e33ba139f3ceae-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题。</p><ol>\n<li>请依据视频演示中的做法，继续对测试代码进行重构。</li>\n<li>我知道不少同学在学习课程的同时，还补习了很多相关知识，那么很欢迎把你的书单分享出来，供其他同学参考。</li>\n</ol><p>也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"43｜RESTful Web Services（7）：剩下两个Sad Path场景该如何处理？","id":526946},"right":{"article_title":"45｜RESTful Web Services（9）：通过伦敦学派得到的测试风格是什么样的？","id":529932}},"comments":[{"had_liked":false,"id":355553,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1004462,"ip_address":"北京","ucode":"8F7DE6E7B3D74F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/ae/a08024b2.jpg","comment_is_top":false,"comment_ctime":1661491762,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1661491762","product_id":100109401,"comment_content":"踩了个坑。如果测试时遇到 StackOverflowError 的，看看 stub 的 OutboundResponse 是否都是默认值。","like_count":0,"discussions":[{"author":{"id":1027207,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","nickname":"大碗","note":"","ucode":"F9CDC0C5BE48AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586958,"discussion_content":"改成 repsonse()，不然会循环调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662626812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350271,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1656740388,"is_pvip":false,"replies":[{"id":"127874","content":"哈哈哈徐老师很多操作都刷新了我的认知！","user_name":"编辑回复","user_name_real":"编辑","uid":"2189689","ctime":1658043050,"ip_address":"","comment_id":350271,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1656740388","product_id":100109401,"comment_content":"@TestFactory + 标签 + 反射刷新了我对自动化测试认知！","like_count":0,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580251,"discussion_content":"哈哈哈徐老师很多操作都刷新了我的认知！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658043051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349953,"user_name":"枫中的刀剑","can_delete":false,"product_type":"c1","uid":1322387,"ip_address":"","ucode":"4B086F538184AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/93/0f1cbf44.jpg","comment_is_top":false,"comment_ctime":1656469788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656469788","product_id":100109401,"comment_content":"看老师重构代码是真的舒服，信手拈来，一气呵成。<br>动态测试配合函数式还能这么用，学到了。","like_count":0}]}