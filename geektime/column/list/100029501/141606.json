{"id":141606,"title":"47丨如何利用SQL对零售数据进行分析？","content":"<p>我们通过OLTP系统实时捕捉到了用户的数据，还需要在OLAP系统中对它们进行分析。之前我们讲解了如何对数据进行清洗，以及如何对分散在不同地方的数据进行集成，今天我们来看下如何使用SQL分析这些数据。</p><p>关于这部分内容，今天我们一起来学习下：</p><ol>\n<li>使用SQL进行数据分析都有哪几种姿势？</li>\n<li>如何通过关联规则挖掘零售数据中的频繁项集？</li>\n<li>如何使用SQL+Python完成零售数据的关联分析？</li>\n</ol><h2>使用SQL进行数据分析的5种姿势</h2><p>在DBMS中，有些数据库管理系统很好地集成了BI工具，可以方便我们对收集的数据进行商业分析。</p><p>SQL Server提供了BI分析工具，我们可以通过使用SQL Server中的Analysis Services完成数据挖掘任务。SQL Server内置了多种数据挖掘算法，比如常用的EM、K-Means聚类算法、决策树、朴素贝叶斯和逻辑回归等分类算法，以及神经网络等模型。我们还可以对这些算法模型进行可视化效果呈现，帮我们优化和评估算法模型的好坏。</p><p>PostgreSQL是免费开源的对象-关系数据库（ORDBMS），它的稳定性非常强，功能强大，在OLTP和OLAP系统上表现都非常出色。同时在机器学习上，配合Madlib项目可以让PostgreSQL如虎添翼。Madlib包括了多种机器学习算法，比如分类、聚类、文本分析、回归分析、关联规则挖掘和验证分析等功能。这样我们可以通过使用SQL，在PostgreSQL中使用各种机器学习算法模型，帮我们进行数据挖掘和分析。</p><!-- [[[read_end]]] --><p>2018年Google将机器学习（Machine Learning）工具集成到了BigQuery中，发布了BigQuery ML，这样开发者就可以在大型的结构化或半结构化的数据集上构建和使用机器学习模型。通过BigQuery控制台，开发者可以像使用SQL语句一样来完成机器学习模型的训练和预测。</p><p>SQLFlow是蚂蚁金服于2019年开源的机器学习工具，我们通过使用SQL就可以完成机器学习算法的调用，你可以将SQLFlow理解为机器学习的翻译器。我们在SELECT之后加上TRAIN从句就可以完成机器学习模型的训练，在SELECT语句之后加上PREDICT就可以使用模型来进行预测。这些算法模型既包括了传统的机器学习模型，也包括了基于Tensorflow、PyTorch等框架的深度学习模型。</p><p>从下图中你也能看出SQLFlow的使用过程，首先我们可以通过Jupyter notebook来完成SQL语句的交互。SQLFlow支持了多种SQL引擎，包括MySQL、Oracle、Hive、SparkSQL和Flink等，这样我们就可以通过SQL语句从这些DBMS中抽取数据，然后选择想要进行的机器学习算法（包括传统机器学习和深度学习模型）进行训练和预测。不过这个工具刚刚上线，工具、文档、社区还有很多需要完善的地方。<br>\n<img src=\"https://static001.geekbang.org/resource/image/e5/fd/e50038152a1b4e7a9940919be9634dfd.jpg?wh=478*742\" alt=\"\"><br>\n最后一个方法是SQL+Python，也是我们今天要讲解的内容。刚才介绍的工具可以说既是SQL查询数据的入口，也是数据分析、机器学习的入口。不过这些模块耦合度高，也可能存在使用的问题。一方面工具会很大，比如在安装SQLFlow的时候，采用Docker方式（下图为使用Docker安装sqlflow的过程）进行安装，整体需要下载的文件会超过2G。同时，在进行机器学习算法调参、优化的时候也存在灵活度差的情况。因此最直接的方式，还是将SQL与机器学习模块分开，采用SQL读取数据，然后通过Python来进行机器学习的处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/c8/38864b57d8d65728439b730d57d841c8.png?wh=1338*663\" alt=\"\"></p><h2>案例：挖掘零售数据中的频繁项集与关联规则</h2><p>刚才我们讲解了如何通过SQL来完成数据分析（机器学习）的5种姿势，下面我们还需要通过一个案例来进行具体的讲解。</p><p>我们要分析的是购物篮问题，采用的技术为关联分析。它可以帮我们在大量的数据集中找到商品之间的关联关系，从而挖掘出经常被人们购买的商品组合，一个经典的例子就是“啤酒和尿布”的例子。</p><p>今天我们的数据集来自于一个面包店的21293笔订单，字段包括了Date（日期）、Time（时间）、Transaction（交易ID）以及Item(商品名称)。其中交易ID的范围是[1,9684]，在这中间也有一些交易ID是空缺的，同一笔交易中存在商品重复的情况。除此以外，有些交易是没有商品的，也就是对应的Item为NONE。具体的数据集你可以从<a href=\"https://github.com/cystanford/SQLApriori\">GitHub</a>上下载。</p><p>我们采用的关联分析算法是Apriori算法，它帮我们查找频繁项集，首先我们需要先明白什么是频繁项集。</p><p>频繁项集就是支持度大于等于最小支持度阈值的项集，小于这个最小值支持度的项目就是非频繁项集，而大于等于最小支持度的项集就是频繁项集。支持度是个百分比，指的是某个商品组合出现的次数与总次数之间的比例。支持度越高，代表这个组合出现的频率越大。</p><p>我们来看个例子理解一下，下面是5笔用户的订单，以及每笔订单购买的商品：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/38/58d7791f7b1fe08f810e9e630b03bf38.png?wh=852*355\" alt=\"\"><br>\n在这个例子中，“牛奶”出现了4次，那么这5笔订单中“牛奶”的支持度就是4/5=0.8。同样“牛奶+面包”出现了3次，那么这5笔订单中“牛奶+面包”的支持度就是3/5=0.6。</p><p>同时，我们还需要理解一个概念叫做“置信度”，它表示的是当你购买了商品A，会有多大的概率购买商品B，在这个例子中，置信度（牛奶→啤酒）=2/4=0.5，代表如果你购买了牛奶，会有50%的概率会购买啤酒；置信度（啤酒→牛奶）=2/3=0.67，代表如果你购买了啤酒，有67%的概率会购买牛奶。</p><p>所以说置信度是个条件概念，指的是在A发生的情况下，B发生的概率是多少。</p><p>我们在计算关联关系的时候，往往需要规定最小支持度和最小置信度，这样才可以寻找大于等于最小支持度的频繁项集，以及在频繁项集的基础上，大于等于最小置信度的关联规则。</p><h2>使用SQL+Python完成零售数据的关联分析</h2><p>针对上面的零售数据关联分析的案例，我们可以使用工具自带的关联规则进行分析，比如使用SQL Server Analysis Services的多维数据分析，或者是在Madlib、BigQuery ML、SQLFlow工具中都可以找到相应的关联规则，通过写SQL的方式就可以完成关联规则的调用。</p><p>除此以外，我们还可以直接使用SQL完成数据的查询，然后通过Python的机器学习工具包完成关联分析。下面我们通过之前讲解的SQLAlchemy来完成SQL查询，使用efficient_apriori工具包的Apriori算法。整个工程一共包括3个部分。</p><p>第一个部分为数据加载，首先我们通过sql.create_engine创建SQL连接，然后从bread_basket数据表中读取全部的数据加载到data中。这里需要配置你的MySQL账户名和密码</p><p>第二步为数据预处理，因为数据中存在无效的数据，比如item为NONE的情况，同时Item的大小写格式不统一，因此我们需要先将Item字段都转换为小写的形式，然后去掉Item字段中数值为none的项。在数据预处理中，我们还需要得到一个transactions数组，里面包括了每笔订单的信息，其中每笔订单是以集合的形式进行存储的，这样相同的订单中item就不存在重复的情况，同时也可以使用Apriori工具包直接进行计算。</p><p>最后一步，使用Apriori工具包进行关联分析，这里我们设定了参数min_support=0.02，min_confidence=0.5，也就是最小支持度为0.02，最小置信度为0.5。根据条件找出transactions中的频繁项集itemsets和关联规则rules。</p><p>具体的代码如下：</p><pre><code>from efficient_apriori import apriori\nimport sqlalchemy as sql\nimport pandas as pd\n# 数据加载\nengine = sql.create_engine('mysql+mysqlconnector://root:passwd@localhost/wucai')\nquery = 'SELECT * FROM bread_basket'\ndata = pd.read_sql_query(query, engine)\n# 统一小写\ndata['Item'] = data['Item'].str.lower()\n# 去掉none项\ndata = data.drop(data[data.Item == 'none'].index)\n \n# 得到一维数组orders_series，并且将Transaction作为index, value为Item取值\norders_series = data.set_index('Transaction')['Item']\n# 将数据集进行格式转换\ntransactions = []\ntemp_index = 0\nfor i, v in orders_series.items():\n    if i != temp_index:\n       temp_set = set()\n       temp_index = i\n       temp_set.add(v)\n       transactions.append(temp_set)\n    else:\n       temp_set.add(v)\n# 挖掘频繁项集和频繁规则\nitemsets, rules = apriori(transactions, min_support=0.02,  min_confidence=0.5)\nprint('频繁项集：', itemsets)\nprint('关联规则：', rules)\n</code></pre><p>运行结果：</p><pre><code>频繁项集： {1: {('alfajores',): 344, ('bread',): 3096, ('brownie',): 379, ('cake',): 983, ('coffee',): 4528, ('cookies',): 515, ('farm house',): 371, ('hot chocolate',): 552, ('juice',): 365, ('medialuna',): 585, ('muffin',): 364, ('pastry',): 815, ('sandwich',): 680, ('scandinavian',): 275, ('scone',): 327, ('soup',): 326, ('tea',): 1350, ('toast',): 318, ('truffles',): 192}, 2: {('bread', 'cake'): 221, ('bread', 'coffee'): 852, ('bread', 'pastry'): 276, ('bread', 'tea'): 266, ('cake', 'coffee'): 518, ('cake', 'tea'): 225, ('coffee', 'cookies'): 267, ('coffee', 'hot chocolate'): 280, ('coffee', 'juice'): 195, ('coffee', 'medialuna'): 333, ('coffee', 'pastry'): 450, ('coffee', 'sandwich'): 362, ('coffee', 'tea'): 472, ('coffee', 'toast'): 224}}\n关联规则： [{cake} -&gt; {coffee}, {cookies} -&gt; {coffee}, {hot chocolate} -&gt; {coffee}, {juice} -&gt; {coffee}, {medialuna} -&gt; {coffee}, {pastry} -&gt; {coffee}, {sandwich} -&gt; {coffee}, {toast} -&gt; {coffee}]\n</code></pre><p>从结果中你能看到购物篮组合中，商品个数为1的频繁项集有19种，分别为面包、蛋糕、咖啡等。商品个数为2的频繁项集有14种，包括（面包，蛋糕），（面包，咖啡）等。其中关联规则有8种，包括了购买蛋糕的人也会购买咖啡，购买曲奇的同时也会购买咖啡等。</p><h2>总结</h2><p>通过SQL完成机器学习往往还是需要使用到Python，因为数据分析是Python的擅长。通过今天的学习你应该能体会到采用SQL工具作为数据查询和分析的入口是一种数据全栈的思路，对于开发人员来说降低了数据分析的技术门槛。</p><p>如果你想要对机器学习或者数据分析算法有更深入的理解，也可以参考我的《数据分析实战45讲》专栏，相信在当今的数据时代，我们的业务增长会越来越依靠于SQL引擎+AI引擎。</p><p><img src=\"\" alt=\"\"></p><p>我在文章中举了一个购物篮分析的例子，如下图所示，其中（牛奶、面包、尿布）的支持度是多少呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/e6/a1767ae691f2c18d02f8009a687ba1e6.png?wh=850*361\" alt=\"\"><br>\n欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":136923,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1569554748,"is_pvip":false,"replies":[{"id":"52996","content":"赞一下，除了自己写，你还可以使用efficient_apriori或者mlxtend工具包<br>from mlxtend.frequent_patterns import apriori<br>使用起来很方便","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1569914479,"ip_address":"","comment_id":136923,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83173933372","product_id":100029501,"comment_content":"import numpy as np<br>import pandas as pd<br>title = [&#39;牛奶&#39;, &#39;面包&#39;, &#39;尿布&#39;, &#39;可乐&#39;, &#39;啤酒&#39;, &#39;鸡蛋&#39;];<br>x = [[1, 1, 1, 0, 0, 0],<br>     [0, 1, 1, 1, 1, 0],<br>     [1, 0, 1, 0, 1, 1],<br>     [1, 1, 1, 0, 1, 0],<br>     [1, 1, 1, 1, 0, 0]]<br>df = pd.DataFrame(x, columns=title)<br><br><br># 创建两个表 分别作为支持度和置信度的准备表<br>df1 = pd.DataFrame(np.zeros([1, 6]), index=[&#39;支持度&#39;], columns=title)<br>df2 = pd.DataFrame(np.zeros([6, 6]), index=title, columns=title)<br>df3 = pd.DataFrame(np.zeros([6, 6]), index=title, columns=title)<br><br><br># 计算支持度<br>for i in x:<br>    for j in range(1):<br>        for k in range(j, 6):<br>           if not i[k] : continue<br>           df1.iloc[j,k] += 1<br><br>support = df1.apply(lambda x: x &#47;5)<br># 返回支持度的结果<br>print(support)<br><br># 计算置信度<br>for i in x:<br>    for j in range(5):<br>        # 如果为0 就跳过<br>        if not i[j] : continue<br>        # 如果不0，继续遍历，如果有购买，便+1<br>        for k in range(j+1,5):<br>            if not i[k] : continue<br>            df2.iloc[j,k] += 1<br>            df2.iloc[k,j] += 1<br>for j in range(6):<br>    df3.iloc[j] = df2.iloc[j] &#47; df.sum()[j]<br>confidence = df3.round(2) # 以3位小数返回置信度表<br># 返回置信度的结果<br>print(confidence)<br><br>      牛奶   面包   尿布   可乐   啤酒   鸡蛋<br>支持度  0.8  0.8  1.0  0.4  0.6  0.2<br>      牛奶    面包   尿布    可乐   啤酒   鸡蛋<br>牛奶  0.00  0.75  1.0  0.25  0.5  0.0<br>面包  0.75  0.00  1.0  0.50  0.5  0.0<br>尿布  0.80  0.80  0.0  0.40  0.6  0.0<br>可乐  0.50  1.00  1.0  0.00  0.5  0.0<br>啤酒  0.67  0.67  1.0  0.33  0.0  0.0<br>鸡蛋  0.00  0.00  0.0  0.00  0.0  0.0<br>","like_count":19,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468864,"discussion_content":"赞一下，除了自己写，你还可以使用efficient_apriori或者mlxtend工具包\nfrom mlxtend.frequent_patterns import apriori\n使用起来很方便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569914479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1880251,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Bp1ndJib7OOAibvm5aeKxmaBF80lw449eLYOhF85alLQ5eNkDdiaFs42YWARhIzv4n1D8X5JJctyb2l690T957j1w/132","nickname":"不讲武德","note":"","ucode":"401B23A4F6EAE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301819,"discussion_content":"看来尿布很畅销，这么多1？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598670888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136886,"user_name":"学习","can_delete":false,"product_type":"c1","uid":1437425,"ip_address":"","ucode":"CDFB71E0D1508B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/f1/16545faf.jpg","comment_is_top":false,"comment_ctime":1569548301,"is_pvip":false,"replies":[{"id":"52997","content":"正确","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1569914547,"ip_address":"","comment_id":136886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10159482893","product_id":100029501,"comment_content":"牛奶，面包，尿布同时出现是3，支持度是3&#47;5=0.6","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468843,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569914547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136917,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1569553443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864520739","product_id":100029501,"comment_content":"遇到错误：NotSupportedError: (mysql.connector.errors.NotSupportedError) Authentication plugin &#39;caching_sha2_password&#39; is not supported (Background on this error at: http:&#47;&#47;sqlalche.me&#47;e&#47;tw8g)<br>解决方法<br>engine = sql.create_engine( &#39;mysql+pymysql:&#47;&#47;{}:{}@{}&#47;{}&#39;.format(user, passwd, host, database))<br>mysql+mysqlconnector 改成 mysql+pymysql 就行了","like_count":2},{"had_liked":false,"id":136910,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1569551886,"is_pvip":false,"replies":[{"id":"53391","content":"正确，同时（牛奶、面包、尿布）的支持度应该是3&#47;5=0.6","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570432732,"ip_address":"","comment_id":136910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864519182","product_id":100029501,"comment_content":"\t支持度<br>牛奶\t0.8<br>面包\t0.8<br>尿布\t1<br>可乐\t0.4<br>啤酒\t0.6<br>鸡蛋\t0.2<br>","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468858,"discussion_content":"正确，同时（牛奶、面包、尿布）的支持度应该是3/5=0.6","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570432732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136893,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1569548731,"is_pvip":false,"replies":[{"id":"53340","content":"感谢分享文档，除了使用efficient-apriori，还可以使用mlxtend.frequent_patterns 这个工具","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570423248,"ip_address":"","comment_id":136893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864516027","product_id":100029501,"comment_content":"efficient-apriori官方文档<br>https:&#47;&#47;efficient-apriori.readthedocs.io&#47;en&#47;stable&#47;","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468848,"discussion_content":"感谢分享文档，除了使用efficient-apriori，还可以使用mlxtend.frequent_patterns 这个工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570423248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301367,"user_name":"邵家伟","can_delete":false,"product_type":"c1","uid":2378165,"ip_address":"","ucode":"08881E4D79A1E1","user_header":"","comment_is_top":false,"comment_ctime":1625647920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625647920","product_id":100029501,"comment_content":"结果：<br>牛奶支持度为0.8<br>面包支持度为0.8<br>尿布支持度为1<br>鸡蛋支持度为0.2<br>啤酒支持度为0.6<br>可乐支持度为0.2<br>置信度    牛奶         面包         尿布         鸡蛋         啤酒         可乐    <br>   牛奶     0.00         0.75         1.00         0.25         0.50         0.25        <br>   面包     0.75         0.00         1.00         0.00         0.50         0.25        <br>   尿布     0.80         0.80         0.00         0.20         0.60         0.20        <br>   鸡蛋     1.00         0.00         1.00         0.00         1.00         0.00        <br>   啤酒     0.67         0.67         1.00         0.33         0.00         0.00        <br>   可乐     1.00         1.00         1.00         0.00         0.00         0.00        ","like_count":0},{"had_liked":false,"id":301366,"user_name":"邵家伟","can_delete":false,"product_type":"c1","uid":2378165,"ip_address":"","ucode":"08881E4D79A1E1","user_header":"","comment_is_top":false,"comment_ctime":1625647904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625647904","product_id":100029501,"comment_content":"C#<br>string[] item = { &quot;牛奶&quot;, &quot;面包&quot;, &quot;尿布&quot;, &quot;鸡蛋&quot;, &quot;啤酒&quot;, &quot;可乐&quot; };<br>            int[,] Record = { { 1, 1, 1, 0, 0, 0 }, { 0, 1, 1, 0, 1, 0 }, { 1, 0, 1, 1, 1, 0 }, { 1, 1, 1, 0, 1, 0 }, { 1, 1, 1, 0, 0, 1 } };<br>            double SupportRate;<br>            for (int a = 0; a &lt; 6; a++)&#47;&#47;列遍历<br>            {\tint Count = 0;int total = 0;<br>                for (int b = 0; b &lt; 5; b++)&#47;&#47;行遍历<br>                {\ttotal += 1;<br>                    if (Record[b, a] == 1)  Count += 1;<br>                }<br>                SupportRate = Convert.ToDouble(Count) &#47; Convert.ToDouble(total);<br>                Context.Response.Write(item[a] + &quot;支持度为&quot; + SupportRate+&quot;&lt;&#47;br&gt;&quot;);<br>            }<br>            double[,] BelieveRate = new double[6, 6];<br>            for (int a = 0; a &lt; 6; a++)&#47;&#47;行<br>            {\tfor (int b = 0; b &lt; 6; b++) &#47;&#47;列<br>                {\tif (a == b)  BelieveRate[a, b] = 0;<br>                    else<br>                    {\tint total = 0;<br>                        int count = 0;<br>                        for (int c = 0; c &lt; 5; c++)<br>                        {\tif(Record[c,a]==1)<br>                            {\ttotal += 1;<br>                                if (Record[c, b] == 1)\tcount += 1;<br>                            }<br>                        }<br>             BelieveRate[a,b]=Convert.ToDouble(count)&#47;Convert.ToDouble(total);<br>                    }    <br>                }<br>            }<br>            for (int a = 0; a &lt; 7; a++)<br>            {\tfor (int b = 0; b &lt; 7; b++)<br>                {\tif (a == 0 &amp;&amp; b == 0)\tContext.Response.Write(&quot;置信度&quot;);<br>                    if(a==0&amp;&amp;b&gt;0)\tContext.Response.Write(&quot;&amp;nbsp; &amp;nbsp; &quot; + item[b-1]+ &quot;&amp;nbsp; &amp;nbsp;&amp;nbsp; &quot;);<br>                    if (a &gt; 0 &amp;&amp; b == 0)\t Context.Response.Write(&quot;&amp;nbsp; &amp;nbsp;&quot; + item[a-1]+ &quot;&amp;nbsp; &amp;nbsp; &amp;nbsp;&quot;);<br>                    if (a &gt; 0 &amp;&amp; b &gt; 0)\tContext.Response.Write(BelieveRate[a - 1, b - 1].ToString(&quot;0.00&quot;) + &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  &quot;);<br>                }<br>                Context.Response.Write(&quot;&lt;&#47;br&gt;&quot;);<br>            } <br>","like_count":1},{"had_liked":false,"id":159472,"user_name":"骑行的掌柜J","can_delete":false,"product_type":"c1","uid":1474214,"ip_address":"","ucode":"3163102651C653","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","comment_is_top":false,"comment_ctime":1575632767,"is_pvip":false,"replies":[{"id":"62603","content":"整理的很好","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577073048,"ip_address":"","comment_id":159472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575632767","product_id":100029501,"comment_content":"评论里朋友ttttt说” <br>遇到错误：mysql.connector.errors.NotSupportedError) Authentication plugin &#39;caching_sha2_password&#39; is not supported “<br>换pymysql就可以，不过我这里有另一种解法，可以到我的博客看看，希望对你有帮助！谢谢<br>https:&#47;&#47;blog.csdn.net&#47;weixin_41013322&#47;article&#47;details&#47;103427293 ","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477071,"discussion_content":"整理的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577073048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136984,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1569570390,"is_pvip":false,"replies":[{"id":"63491","content":"transactions里面是每个订单的商品集合，你可以运行下是work的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577514471,"ip_address":"","comment_id":136984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569570390","product_id":100029501,"comment_content":"transactions = []<br>temp_index = 0<br>for i, v in orders_series.items():<br>    if i != temp_index:<br>        temp_set = set()<br>        temp_index = i<br>        temp_set.add(v)<br>        transactions.append(temp_set)<br>        print(transactions)<br>    else:<br>        temp_set.add(v)<br>老师，这里的transactions = [] 里面的元素，不应该是每个订单所有的商品集合吗？  但是上述代码不是实现这个需求","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468891,"discussion_content":"transactions里面是每个订单的商品集合，你可以运行下是work的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577514471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136924,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1569554936,"is_pvip":false,"replies":[{"id":"63492","content":"Good Job","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577514479,"ip_address":"","comment_id":136924,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1569554936","product_id":100029501,"comment_content":"<br># 一行代码数据集格式转换<br># transactions = list(data.groupby(&#39;Transaction&#39;).agg(lambda x: set(x.Item.values))[&#39;Item&#39;])<br># 完整代码<br>from efficient_apriori import apriori<br>import sqlalchemy as sql<br>import pandas as pd<br><br># 数据加载<br>engine = sql.create_engine(&#39;mysql+pymysql:&#47;&#47;root:passwd@localhost&#47;wucai&#39;)<br>query = &#39;SELECT * FROM bread_basket&#39;<br>data = pd.read_sql_query(query, engine)<br><br># 统一小写<br>data[&#39;Item&#39;] = data[&#39;Item&#39;].str.lower()<br># 去掉none项<br>data = data.drop(data[data.Item == &#39;none&#39;].index)<br><br># 得到一维数组orders_series，并且将Transaction作为index, value为Item取值<br>orders_series = data.set_index(&#39;Transaction&#39;)[&#39;Item&#39;]<br># 将数据集进行格式转换<br>transactions = transactions = list(data.groupby(&#39;Transaction&#39;).agg(lambda x: set(x.Item.values))[&#39;Item&#39;])<br><br># 挖掘频繁项集和频繁规则<br>itemsets, rules = apriori(transactions, min_support=0.02, min_confidence=0.5)<br>print(&#39;频繁项集：&#39;, itemsets)<br>print(&#39;关联规则：&#39;, rules)<br><br># ----------输出结果------------------ #<br>频繁项集： {1: {(&#39;alfajores&#39;,): 344, (&#39;bread&#39;,): 3096, (&#39;brownie&#39;,): 379, (&#39;cake&#39;,): 983, (&#39;coffee&#39;,): 4528, (&#39;cookies&#39;,): 515, (&#39;farm house&#39;,): 371, (&#39;hot chocolate&#39;,): 552, (&#39;juice&#39;,): 365, (&#39;medialuna&#39;,): 585, (&#39;muffin&#39;,): 364, (&#39;pastry&#39;,): 815, (&#39;sandwich&#39;,): 680, (&#39;scandinavian&#39;,): 275, (&#39;scone&#39;,): 327, (&#39;soup&#39;,): 326, (&#39;tea&#39;,): 1350, (&#39;toast&#39;,): 318, (&#39;truffles&#39;,): 192}, 2: {(&#39;bread&#39;, &#39;cake&#39;): 221, (&#39;bread&#39;, &#39;coffee&#39;): 852, (&#39;bread&#39;, &#39;pastry&#39;): 276, (&#39;bread&#39;, &#39;tea&#39;): 266, (&#39;cake&#39;, &#39;coffee&#39;): 518, (&#39;cake&#39;, &#39;tea&#39;): 225, (&#39;coffee&#39;, &#39;cookies&#39;): 267, (&#39;coffee&#39;, &#39;hot chocolate&#39;): 280, (&#39;coffee&#39;, &#39;juice&#39;): 195, (&#39;coffee&#39;, &#39;medialuna&#39;): 333, (&#39;coffee&#39;, &#39;pastry&#39;): 450, (&#39;coffee&#39;, &#39;sandwich&#39;): 362, (&#39;coffee&#39;, &#39;tea&#39;): 472, (&#39;coffee&#39;, &#39;toast&#39;): 224}}<br>关联规则： [{cake} -&gt; {coffee}, {cookies} -&gt; {coffee}, {hot chocolate} -&gt; {coffee}, {juice} -&gt; {coffee}, {medialuna} -&gt; {coffee}, {pastry} -&gt; {coffee}, {sandwich} -&gt; {coffee}, {toast} -&gt; {coffee}]","like_count":0,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468865,"discussion_content":"Good Job","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577514479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21992,"discussion_content":"更正一下错误\n# 将数据集进行格式转换\ntransactions = list(data.groupby(&#39;Transaction&#39;).agg(lambda x: set(x.Item.values))[&#39;Item&#39;])","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569558485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}