{"id":721013,"title":"27｜ThreadLocal（下）：ThreadLocal家族成员及应用指南","content":"<p>你好，我是康杨。</p><p>通过上节课的学习相信你对 ThreadLocal 已经有了深刻的理解，但是在复杂的现实业务场景中，单靠ThreadLocal 所能解决的问题是有限的，我们需要通过了解ThreadLocal家族的其他成员，以及ThreadLocal 在实际场景中的各种应用，来进一步提升ThreadLocal的战斗力，帮你在现实中解决更加棘手的问题。</p><p>接下来就让我们进入ThreadLocal的江湖，首先出场的就是ThreadLocal家族的4个成员。</p><h2>ThreadLocal家族</h2><p>通过上节课的学习，我们知道ThreadLocal是在JDK 1.2中引入的，解决了一个线程中多个方法间信息传递的问题。在生产环境中，为了提升系统的性能，充分发挥多核CPU的优势，我们经常通过增加线程或者异步的方式来更好地发挥底层硬件的性能。</p><h3><strong>InheritableThreadLocal</strong></h3><p>在这种情况下，就自然引出了<strong>父子线程</strong>的问题，也就是如何优雅地把父线程的信息传递给子线程，这显然超出了ThreadLocal的能力范围。所以在JDK 1.3 中，JVM 引入了<strong>InheritableThreadLocal</strong>，在创建子线程时将父线程的变量副本复制到子线程中，实现子线程继承父线程的变量副本，从而有效解决父子线程之间参数传递的问题，实现了跨线程的变量传递。</p><!-- [[[read_end]]] --><p>下面我们通过例子来展示一下。</p><pre><code class=\"language-plain\">private final static ThreadLocal&lt;String&gt; threadLocalVar1 = new ThreadLocal&lt;&gt;();\n&nbsp;\nprivate final static InheritableThreadLocal&lt;String&gt; threadLocalVar2 = new InheritableThreadLocal&lt;&gt;();\n&nbsp;\npublic static void main(String[] args) {\n&nbsp;&nbsp;&nbsp; threadLocalVar1.set(\"GoodBoy\");\n&nbsp;&nbsp;&nbsp; Runnable runnable1 = () -&gt; &nbsp;&nbsp;\n&nbsp; &nbsp; System.out.println(Thread.currentThread().getName()+\"_\"+threadLocalVar1.get());\n&nbsp;&nbsp;&nbsp; new Thread(runnable1).start();\n&nbsp;\n&nbsp;&nbsp;&nbsp; threadLocalVar2.set(\"GoodGirl\");\n&nbsp;&nbsp;&nbsp; Runnable runnable2 = () -&gt;&nbsp;\n&nbsp; &nbsp; System.out.println(Thread.currentThread().getName()+\":\"+threadLocalVar2.get());\n&nbsp;&nbsp;&nbsp; new Thread(runnable2).start();\n}\n&nbsp;\nThread-0_null\nThread-1:GoodGirl\n</code></pre><p>从例子中，你会发现当使用ThreadLocal时，父线程中创建的线程局部变量在子线程中是无法取到的，但是借助InheritableThreadLocal，我们在子线程中实现了获取父线程中设置的线程局部变量。</p><p>InheritableThreadLocal 解决了ThreadLocal 不能跨父子线程进行参数传递的问题，但是当遇到线程池的场景又会触碰到它的能力边界。因为InheritableThreadLocal 在一开始创建子线程时，就对子线程进行所有可继承线程局部变量的赋值，但在通过线程池管理线程的场景下，由于父子线程都是由线程池进行管理，线程在每次使用之前不见得都是需要创建才能使用的，所以会出现即使使用了InheritableThreadLocal，也无法对子线程有效赋值的情况。</p><h3><strong>TransmittableThreadLocal</strong></h3><p>好在这个问题，业内已经有了解决方案，阿里巴巴开源的<strong>TransmittableThreadLocal</strong>实现了在线程池的场景下也能正常访问父线程设置的线程局部变量。从而解决了线程池场景下父子线程间参数传递的问题。</p><p>你可以看一下TransmittableThreadLocal 与其他两个ThreadLocal 的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/88/9e06857f7b7ae3cb914a0fb41c38d388.png?wh=1592x768\" alt=\"图片\" title=\"ThreadLocal 家族成员及应用指南\"></p><p>下面让我们通过一个经典的案例来演示<strong>如何使用&nbsp;TransmittableThreadLocal</strong>。</p><p>首先我们在pom.xml 文件中引入maven依赖。</p><pre><code class=\"language-plain\">&lt;dependency&gt;\n&nbsp;&nbsp;&nbsp; &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n&nbsp;&nbsp;&nbsp; &lt;artifactId&gt;transmittable-thread-local&lt;/artifactId&gt;\n&nbsp;&nbsp;&nbsp; &lt;version&gt;2.14.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><p>然后我们模拟现实中真实的业务场景，用两个线程池来协作完成业务请求的处理。第一个线程池用于和外部请求交互，接收和处理请求，设置相应的上下文环境。第二个线程池用于单纯的业务逻辑处理，借助&nbsp;TransmittableThreadLocal 类型变量&nbsp;contextThreadLocal，我们在逻辑处理线程LogicThread中读取到了ReqThread中设置的上下文信息，从而实现了核心业务逻辑和外部请求之间的解耦。</p><pre><code class=\"language-plain\">public class ReqService {&nbsp; &nbsp;\n&nbsp;   private static final&nbsp; int threadCnt = 3;\n&nbsp;&nbsp;&nbsp; private static TransmittableThreadLocal&lt;Integer&gt; contextThreadLocal = new TransmittableThreadLocal&lt;&gt;();\n&nbsp;\n&nbsp;&nbsp;&nbsp; //接收和处理请求的线程池\n&nbsp;&nbsp;&nbsp; private static ExecutorService mainExecutors = Executors.newFixedThreadPool(threadCnt);\n&nbsp;&nbsp;&nbsp; //真正处理业务逻辑的线程池\n&nbsp;&nbsp;&nbsp; private static ExecutorService execExecutors =\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TtlExecutors.getTtlExecutorService(Executors.newFixedThreadPool(threadCnt));\n&nbsp;\n&nbsp;&nbsp;&nbsp; public static void main(String[] args) {\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntStream.range(0,threadCnt).forEach(i-&gt;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainExecutors.submit(new ReqThread(i));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(600);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch (InterruptedException e) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execExecutors.shutdown();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainExecutors.shutdown();\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 此处模拟接收请求的线程\n&nbsp;&nbsp;&nbsp; static class ReqThread implements Runnable {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int i;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ReqThread(int i) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.i = i;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(Thread.currentThread().getName() + \":\" + i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 此处设置线程的上下文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contextThreadLocal.set(i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; execExecutors.submit(new LogicThread(Thread.currentThread().getName()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 此处模拟实际处理业务逻辑的线程\n&nbsp;&nbsp;&nbsp; static class&nbsp; LogicThread implements Runnable {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private String parentThreadName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public LogicThread(String parentThreadName) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.parentThreadName = parentThreadName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void run() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println( \"parentThreadName:\" + parentThreadName + \":\" + contextThreadLocal.get() );\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; }\n}&nbsp;\n</code></pre><p>为了帮你更好地理解上面这段代码，我画了一张图。结合图片，你会发现这种写法既符合高内聚、低耦合的思想，同时也符合了单一职责原则（Single Responsibility Principle，SRP），你可以仔细体会一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/78/9d/7822b6e69ecbd23e0b734ecc87e06a9d.png?wh=1920x1127\" alt=\"图片\"></p><h3>FastThreadLocal</h3><p>最后一个出场的是<strong>FastThreadLocal</strong>。上节课，我们提到ThreadLocalMap是通过线性探测的开放定址法解决Hash冲突的问题，当Hash冲突严重时该方案会出现性能问题。为此Netty进行了优化，也是运用空间换时间的思想，通过用一个属性保存map的下标位置，用下标直接找到对应的位置，来应对大数据量和大并发的场景。但是FashThreadLocal在使用时有一个需要特别注意的地方，就是<strong>必须与Netty提供的FastThreadLocalThread结合使用</strong>才能发挥作用。</p><p>至此，ThreadLocal家族的成员已经全部给你介绍完了，我们认识了支持在方法间传参的ThreadLocal、为了解决父子线程间传参的InheritableThreadLocal、线程池场景下父子线程 传参的解决方案&nbsp;<a href=\"https://github.com/alibaba/transmittable-thread-local\">TransmittableThreadLocal</a>，以及 Netty 为了追求高性能打造的 <a href=\"https://github.com/netty/netty\">FastThreadLocalThread</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/b4/d15155285427f2accd5a2cc2aea40eb4.jpg?wh=1920x672\" alt=\"图片\" title=\"ThreadLocal家族成员之间的关系\"></p><h2>ThreadLocal家族的应用场景</h2><p>不知道此时你是否有一种感觉，就是<strong>任何一个解决方案都有它的局限性也有它应用的场景。</strong>所以在现实环境中选择哪个解决方案，要根据需求而定，对问题本质的理解远远比用什么工具去解决更加重要，我们既要避免用牛刀去杀鸡，也要避免用杀鸡刀去宰牛。</p><p>下面我来介绍一下现实场景中各个ThreadLocal的实际应用，向你更好地诠释这一点，希望能助你在遇到实际问题时，合理地应用ThreadLocal。</p><h3><strong>非线程安全转化为线程安全</strong></h3><p>在JDK 对外提供的各种类中，并不是所有类都是线程安全的，而ThreadLocal一个非常重要的作用就是能将这些非线程安全的类以线程安全的方式使用。比如 SimpleDateFormat 本不是线程安全的，通过ThreadLocal的改造却可以当成线程安全的类来使用。</p><p>我给出了一段示例代码，我们看看ThreadLocal具体是怎么做的，通过对SimpleDateFormat变量的封装 ，我们把一个非线程安全的SimpleDateFormat变量，变成了线程安全的 ThreadLocal<simpledateformat>，这其实也是一个经典的装饰器模式（Decorator&nbsp;Pattern）的应用。当然如果你用的是JDK 1.8以上版本，也可以直接使用DateTimeFormatter代替SimpleDateFormat ，它直接就是线程安全的。</simpledateformat></p><pre><code class=\"language-plain\">ThreadLocal&lt;SimpleDateFormat&gt; sdf = new ThreadLocal&lt;SimpleDateFormat&gt;() {\n&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp; protected SimpleDateFormat initialValue() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n&nbsp;&nbsp;&nbsp; }\n};\n</code></pre><h3><strong>解决跨层传递变量的问题</strong></h3><p>在复杂的系统中，可能需要在不同的层之间传递变量，例如在Controller层中获取用户信息，然后在Service层中使用用户信息。用ThreadLocal可以<strong>在当前线程中存储变量值，避免跨层传递变量的问题。</strong></p><p>在真实业务场景中，通常HTTP请求是通过网关进行接入，通过网关进行系统的安全防护和请求信息的解析。通过采用<strong>拦截器 +ThreadLocal</strong>的方式，将解析的请求信息存储到threadLocal中，利用其线程隔离特性，把这个请求相关的信息透传给下游。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/0c/2f9aed02ed6189f0fe44975fb75fb90c.png?wh=1920x543\" alt=\"图片\"></p><pre><code class=\"language-plain\">// 在上下文中传递的信息\npublic class&nbsp; Context {\n&nbsp;&nbsp;&nbsp; private String ip;\n&nbsp;&nbsp;&nbsp; public String getIp() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ip;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; public void setIp(String ip) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ip = ip;\n&nbsp;&nbsp;&nbsp; }\n}\n&nbsp;\npublic class ContextHttpInterceptor implements HandlerInterceptor {\n&nbsp;\n&nbsp;&nbsp;&nbsp; private static&nbsp; final ThreadLocal&lt;Context&gt; contextThreadLocal = new ThreadLocal&lt;Context&gt;();\n&nbsp;\n&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp; public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o)&nbsp;&nbsp;throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context context = new Context();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String ip = request.getParameter(\"ip\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (StringUtils.isNotBlank(ip)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context.setIp(ip);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contextThreadLocal.set(context);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch (Exception e){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp; public void postHandle(HttpServletRequest request, HttpServletResponse resposne, Object o,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModelAndView modelAndView) throws Exception {\n&nbsp;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; @Override\n&nbsp;&nbsp;&nbsp; public void afterCompletion(HttpServletRequest request, HttpServletResponse resposne,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o, Exception e) throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; contextThreadLocal.remove();\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><h3>ThreadLocal其他应用场景</h3><p>除此之外，ThreadLocal&nbsp;在以下场景也得到了广泛应用。</p><ul>\n<li>链路追踪场景；</li>\n<li>Spring的事务管理器中；</li>\n<li>全链路流量压测中，压测标记透传；</li>\n<li>流程编排引擎的上下文传递场景；</li>\n<li>多数据源场景下，切换数据源查询数据；</li>\n<li>DDD中六边形架构、菱形架构，通过ThreadLocal实现各层之间的数据传递。</li>\n</ul><p>感兴趣的话，欢迎你在评论区和我一起探索如何更好地使用ThreadLocal。</p><h2>最佳实践</h2><p>ThreadLocal虽然很强大，并且在各种业务场景和中间件解决方案中都得到了广泛地应用 ，但是任何事都是一体两面的，好用的同时也隐藏着风险，稍不留心就容易掉坑。下面我就把我遇到的一些坑点和使用ThreadLocal的一些小技巧分享给你，希望能帮你在日常工作中规避掉这些风险，那接下来就让我们进入到最佳实践环节。</p><h3>小技巧：ThreadLocal变量的初始化</h3><p>JDK8 提供了很多功能，能够使代码更加简洁和优雅 ，比如下面的ThreadLocal的初始化。</p><pre><code class=\"language-plain\">// &nbsp;写法一：通常写法\nprivate static final ThreadLocal&lt;String&gt; THREAD_LOCAL_Common = new ThreadLocal&lt;String&gt;(){\n&nbsp;&nbsp;&nbsp; protected String initialValue() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"Hello World\";\n&nbsp;&nbsp;&nbsp; }\n};\n// 写法二： JDK 1.8 写法\nprivate static final ThreadLocal&lt;String&gt; THREAD_LOCAL_JDK8 = ThreadLocal.withInitial(()-&gt;\"Hello World\");&nbsp;\n</code></pre><p>和一般写法相比，JDK8的写法是不是看起来更加简洁了！</p><h3>小技巧：将ThreadLocal设置为全局变量</h3><p>我们上节课阐述Thread、ThreadLocal、ThreadLocalMap、Entry之间的关系时，曾说到建议将ThreadLocal设置成全局变量，你有没有想过为什么这样做呢？</p><p><strong>将ThreadLocal设置成static，主要是为了提升内存效率。</strong>如果ThreadLocal变量不是static的，针对某一个变量，每个线程都会有一个单独的ThreadLocal变量，假如有100个线程那就需要创建100个ThreadLocal对象，这在内存使用上是相当低效的。如果将ThreadLocal设置为static，那么所有对象就只需要一个ThreadLocal变量，大大节省了内存。</p><p>而且设置成static的话，ThreadLocal会在方法区分配，否则的话就是在堆分配， 这很可能成为触发GC的一个诱因，这在高并发、高性能的系统中是需要格外注意的，避免成为压缩骆驼的最后一根稻草。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/19/ba716ba4ee6ba9e00d7822162bd17f19.png?wh=1920x607\" alt=\"图片\"></p><h3>小技巧：ThreadLocal对象的用后即删</h3><p>这里我先给出推荐写法。</p><pre><code class=\"language-plain\">try {\n&nbsp;&nbsp;// 设置Threadlocal\nobjThreadLocal.set(...);\n// 使用Threadlocal\ndoSomething();\n} finally {\n// 移除Threadlocal\n&nbsp;objThreadLocal.remove();&nbsp;&nbsp; //移除ThreadLocal变量\n}\n</code></pre><p>ThreadLocal如果使用不当，最容易引发的问题就是<strong>内存泄漏和脏数据</strong> ，这些问题日常很难排查，但是在关键时刻往往是致命的。虽然在上节课的源码阐释中，我们讲了ThreadLocal本身是如何规避这些问题的，但这不代表你就可以忽视这个问题，反而更应该重视起来，在使用时格外关注。下面我就来重点阐述下这些问题是如何产生的。</p><p><strong>场景1：仅内存泄露场景</strong></p><p>ThreadLocalMap 中 Entry 的 key 是 ThreadLocal 对象的弱引用，当 ThreadLocal 对象仅被这一个对象引用时，ThreadLocal 对象会在GC时触发回收。当 ThreadLocal 变量被回收后，该 Entry 的键变为null，你可以看一下从 Thread 到 ThreadLocal&nbsp;操作的变量引用关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/6c/3dbd307b37d4f44fc577a618264dcc6c.png?wh=1920x315\" alt=\"图片\"></p><p>由于&nbsp;Thread 对 ThreadLocalMap 是强引用，ThreadLocalMap 对 Entry 是强引用，Entry 针对Value 也是强引用，所以如果Thread一直不销毁，这个Entry就没办法被移除，这样一来被 Entry 引用的变量一直存在于内存中无法被回收，从而导致内存泄漏。但是ThreadLocal 内存泄露的根因是<strong>ThreadLocalMap的生命周期和Thread一样长</strong>，如果没有手动删除对应的key会导致Entry( null,value )的对象越来越多，引发内存泄露。</p><p><span class=\"reference\">注：Entry 对ThreadLocal 类型是弱引用，对变量是强引用。</span></p><p><img src=\"https://static001.geekbang.org/resource/image/e0/3e/e0dbbe8380f8ab44c3da71f0f206b33e.png?wh=1920x1056\" alt=\"图片\"></p><p><strong>场景2：脏数据和内存泄露场景</strong></p><p>在实际的生产环节中，为了提升系统性能，我们一般使用线程池对线程进行管理，来减少线程创建和回收带来的系统性能开销。在这种场景下使用ThreadLocal，很容易因线程复用产生脏数据和内存泄露的问题。</p><p>由于线程池对Thread对象的复用，与Thread绑定的ThreadLocal变量（一般用private &nbsp;static修饰）也会被复用。如果请求结束后没有执行remove()方法，对应的信息会被带到下一次请求中，从而造成脏数据的问题。与此同时，随着请求的持续访问，线程持续复用，历史累计的变量会一直叠加，从而导致内存泄露。所以在这种场景下，<strong>每次请求后需要执行remove操作</strong>。</p><h3>其他注意事项</h3><ul>\n<li>在使用ThreadLocal时 ，需要考虑性能问题 &nbsp;，避免过度使用ThreadLocal导致性能下降。</li>\n<li>ThreadLocal 带来灵活方便的同时也降低了代码的可读性，增加了隐性的潜规则，所以要避免滥用，并写好相关代码注释，避免因组织变动等因素触发线上风险。</li>\n<li>跨线程和线程池场景下，ThreadLocal需要谨慎使用。</li>\n<li>ThreadLocalMap 并不适合存放大量的数据 。ThreadLocalMap采用的是线性探测的Hash冲突解决方案，根据Key计算Hash值，一旦出现冲突就向后探测，到哈希表末尾时再从0开始，直到找到一个合适位置，这种算法决定了 ThreadLocalMap 并不适合存放大量数据。</li>\n</ul><h2>重点回顾</h2><p>好了，这就是今天的主要内容，其实ThreadLocal的应用场景远比我上面阐述的更丰富，很期待能在评论区看到你的留言，和我一起来挖掘ThreadLocal更大的潜力，下面我先总结下今天的一些要点。</p><p>通过今天的学习，我们发现ThreadLocal并不是只有一个类，而是一个家族的代名词，它们不分伯仲地在不同的应用场景发挥着各自的优势，所以在日常的使用中如何正确地选择是非常关键的。</p><p>ThreadLocal在整个java生态已经得到了广泛应用，很多你觉得非常牛的功能背后很可能就隐藏着ThreadLocal的身影，今天我们主要介绍了它在非线程安全变量转化为线程安全以及跨层信息传递领域的应用，后面我也将在实战篇为你揭示Threadlocal在其他领域中发挥的重大作用。最后，希望你一定要重视使用ThreadLocal的潜在风险，前人用血和泪换来的经验还是非常值得借鉴的，尤其是内存泄漏问题，切记！</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/89/f72a77a238ec2a1b9f1a03f9654dff89.jpg?wh=4190x3330\" alt=\"图片\"></p><h2>思考题</h2><p>ThreadLocal四大家族成员的使用场景和各自优劣势有哪些？你能说出几个ThreadLocal的应用场景？使用ThreadLocal的潜在风险有哪些，应该如何避免？</p><p>欢迎你把你对Threadlocal的应用分享到评论区，我们一起交流讨论，也欢迎你把这节课分享给需要的朋友，邀他一起学习。我们下节课再见！</p><h2>💡 点亮你的知识框架图</h2><p><img src=\"https://static001.geekbang.org/resource/image/49/2e/497b4d3e92ce3c2c692516ed4292932e.jpg?wh=5700x4084\" alt=\"图片\"></p>","neighbors":{"left":{"article_title":"26｜ThreadLocal（上）：线程安全的另类实现思路","id":720522},"right":{"article_title":"28｜线程池：不同场景下如何合理地选择线程池？","id":721497}},"comments":[{"had_liked":false,"id":383259,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1698767484,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"那其实threadlocal也没有解决内存泄露的问题，那key设置成弱引用好像也没有太大的作用？请问老师，这么设计可以解决什么问题呢","like_count":0,"discussions":[{"author":{"id":3801077,"avatar":"","nickname":"kuaishou88880041","note":"","ucode":"69147FF1307EF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637481,"discussion_content":"如果key是强引用，因为threadlocal是静态变量，可以认为是gcroot，那么即使线程销毁了，这个变量仍然指向entry，使得entry不能被回收，从而造成内存泄露","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708534907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383207,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1698673578,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"请教老师两个问题：\nQ1：ThreadLocal是用于线程不同方法之间信息传递吗？我感觉这个说法有问题啊。\nQ2：ThreadLocal用于父子线程数据传递，只是创建的时候传递一次吗？创建完毕以后还有数据传递吗？","like_count":0}]}