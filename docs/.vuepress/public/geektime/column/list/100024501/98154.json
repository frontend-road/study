{"id":98154,"title":"35 | libffi：动态调用和定义 C 函数","content":"<p>你好，我是戴铭。</p><p>在 iOS 开发中，我们可以使用 Runtime 接口动态地调用 Objective-C 方法，但是却无法动态调用 C 的函数。那么，我们怎么才能动态地调用 C 语言函数呢？</p><p>C 语言编译后，在可执行文件里会有原函数名信息，我们可以通过函数名字符串来找到函数的地址。现在，我们只要能够通过函数名找到函数地址，就能够实现动态地去调用C 语言函数。</p><p>而在动态链接器中，有一个接口 dlsym() 可以通过函数名字符串拿到函数地址，如果所有 C 函数的参数类型和数量都一样，而且返回类型也一样，那么我们使用 dlsym() 就能实现动态地调用 C 函数。</p><p>但是，在实际项目中，函数的参数定义不可能都一样，返回类型也不会都是 void 或者 int类型。所以， dlsym()这条路走不通。那么，还有什么办法可以实现动态地调用 C 函数呢？</p><h2>如何动态地调用C函数？</h2><p>要想动态地调用 C 函数，你需要先了解函数底层是怎么调用的。</p><p>高级编程语言的函数在调用时，需要约定好参数的传递顺序、传递方式，栈维护的方式，名字修饰。这种函数调用者和被调用者对函数如何调用的约定，就叫作调用惯例（Calling Convention）。高级语言编译时，会生成遵循调用惯例的代码。</p><p>不同 CPU 架构的调用惯例不一样，比如64位机器的寄存器多些、传递参数快些，所以参数传递会优先采用寄存器传递，当参数数量超出寄存器数量后才会使用栈传递。</p><!-- [[[read_end]]] --><p>所以，编译时需要按照调用惯例针对不同 CPU 架构编译，生成汇编代码，确定好栈和寄存器。 如果少了编译过程，直接在运行时去动态地调用函数，就需要先生成动态调用相应寄存器和栈状态的汇编指令。而要达到事先生成相应寄存器和栈的目的，就不能使用遵循调用惯例的高级编程语言，而需要使用汇编语言。</p><p>Objective-C的函数调用采用的是发送消息的方式，使用的是 objc_msgSend 函数。objc_msgSend函数就是使用汇编语言编写的，其结构分为序言准备（Prologue）、函数体（Body）、结束收尾（Epilogue）三部分。</p><p>序言准备部分的作用是会保存之前程序执行的状态，还会将输入的参数保存到寄存器和栈上。这样，objc_msgSend 就能够先将未知的参数保存到寄存器和栈上，然后在函数体执行自身指令或者跳转其他函数，最后在结束收尾部分恢复寄存器，回到调用函数之前的状态。</p><p>得益于序言准备部分可以事先准备好寄存器和栈，objc_msgSend 可以做到函数调用无需通过编译生成汇编代码来遵循调用惯例，进而使得 Objective-C 具备了动态调用函数的能力。</p><p>但是，不同的 CPU 架构，在编译时会执行不同的objc_msgSend 函数，而且 objc_msgSend 函数无法直接调用 C 函数，所以想要实现动态地调用 C 函数就需要使用另一个用汇编语言编写的库 libffi。</p><p>那么，libffi 是什么呢，又怎么使用 libffi 来动态地调用 C 函数？接下来，我就和你分析一下这两个问题应该如何解决。</p><h2>libffi 原理分析</h2><p><a href=\"https://sourceware.org/libffi/\">libffi</a> 中ffi的全称是 Foreign Function Interface（外部函数接口），提供最底层的接口，在不确定参数个数和类型的情况下，根据相应规则，完成所需数据的准备，生成相应汇编指令的代码来完成函数调用。</p><p>libffi 还提供了可移植的高级语言接口，可以不使用函数签名间接调用 C 函数。比如，脚本语言 Python 在运行时会使用 libffi 高级语言的接口去调用 C 函数。libffi的作用类似于一个动态的编译器，在运行时就能够完成编译时所做的调用惯例函数调用代码生成。</p><p>libffi 通过调用 ffi_call（函数调用） 来进行函数调用，ffi_call 的输入是 ffi_cif（模板）、函数指针、参数地址。其中，ffi_cif 由 ffi_type（参数类型） 和 参数个数生成，也可以是 ffi_closure（闭包）。</p><p>libffi 是开源的，代码在 <a href=\"https://github.com/libffi/libffi\">GitHub</a> 上。接下来，我将结合 libffi 中的关键代码，和你详细说下 ffi_call 调用函数的过程。这样，可以帮助你更好地了解 libffi 的原理。</p><p>首先，我们来看看ffi_type。</p><h3>ffi_type（参数类型）</h3><p>ffi_type的作用是，描述 C 语言的基本类型，比如 uint32、void *、struct 等，定义如下：</p><pre><code>typedef struct _ffi_type\n{\n  size_t size; // 所占大小\n  unsigned short alignment; //对齐大小\n  unsigned short type; // 标记类型的数字\n  struct _ffi_type **elements; // 结构体中的元素\n} ffi_type;\n</code></pre><p>其中，size表述该类型所占的大小，alignment表示该类型的对齐大小，type表示标记类型的数字，element表示结构体的元素。</p><p>当类型是 uint32 时，size的值是4，alignment也是4，type 的值是9，elements是空。</p><h3>ffi_cif（模板）</h3><p>ffi_cif由参数类型（ffi_type） 和参数个数生成，定义如下：</p><pre><code>typedef struct {\n  ffi_abi abi; // 不同 CPU 架构下的 ABI，一般设置为 FFI_DEFAULT_ABI\n  unsigned nargs; // 参数个数\n  ffi_type **arg_types; // 参数类型\n  ffi_type *rtype; // 返回值类型\n  unsigned bytes; // 参数所占空间大小，16的倍数\n  unsigned flags; // 返回类型是结构体时要做的标记\n#ifdef FFI_EXTRA_CIF_FIELDS\n  FFI_EXTRA_CIF_FIELDS;\n#endif\n} ffi_cif;\n</code></pre><p>如代码所示，ffi_cif 包含了函数调用时需要的一些信息。</p><p>abi 表示的是不同 CPU 架构下的 ABI，一般设置为 FFI_DEFAULT_ABI：在移动设备上 CPU 架构是 ARM64时，FFI_DEFAULT_ABI 就是 FFI_SYSV；使用苹果公司笔记本CPU 架构是 X86_DARWIN 时，FFI_DEFAULT_ABI 就是 FFI_UNIX64。</p><p>nargs 表示输入参数的个数。arg_types 表示参数的类型，比如 ffi_type_uint32。rtype 表示返回类型，如果返回类型是结构体，字段 flags 需要设置数值作为标记，以便在 ffi_prep_cif_machdep 函数中处理，如果返回的不是结构体，flags 不做标记。</p><p>bytes 表示输入参数所占空间的大小，是16的倍数。</p><p>ffi_cif 是由ffi_prep_cif 函数生成的，而ffi_prep_cif 实际上调用的又是 ffi_prep_cif_core 函数。</p><p>了解 ffi_prep_cif_core 就能够知道 ffi_cif 是怎么生成的。接下来，我继续跟你说说 ffi_prep_cif_core 里是怎么生成 ffi_cif 的。ffi_prep_cif_core 函数会先初始化返回类型，然后对返回类型使用 ffi_type_test 进行完整性检查，为返回类型留出空间。</p><p>接着，使用 initialize_aggregate 函数初始化栈，对参数类型进行完整性检查，对栈进行填充，通过 ffi_prep_cif_machdep 函数执行 ffi_cif 平台相关处理。具体实现代码，你可以点击<a href=\"https://github.com/libffi/libffi/blob/master/src/prep_cif.c\">这个链接</a>查看，其所在文件路径是 libffi/src/prep_cif.c。</p><p>之所以将准备 ffi_cif 和 ffi_call 分开，是因为ffi_call 可能会调用多次参数个数、参数类型、函数指针相同，只有参数地址不同的函数。将它们分开，ffi_call 只需要处理不同参数地址，而其他工作只需要 ffi_cif 做一遍就行了。</p><p>接着，准备好了 ffi_cif 后，我们就可以开始函数调用了。</p><h3>ffi_call（函数调用）</h3><p>ffi_call 函数的主要处理都交给了 ffi_call_SYSV 这个汇编函数。ffi_call_SYSV 的实现代码，你可以点击<a href=\"https://github.com/libffi/libffi/blob/master/src/aarch64/sysv.S\">这个链接</a>，其所在文件路径是 libffi/src/aarch64/sysv.S。</p><p>下面，我来跟你说说 <strong>ffi_call_SYSV 汇编函数做了什么</strong>。</p><p>首先，我们一起看看 ffi_call_SYSV 函数的定义：</p><pre><code>extern void ffi_call_SYSV (void *stack, void *frame,\n                  void (*fn)(void), void *rvalue,\n                  int flags, void *closure);\n</code></pre><p>可以看到，通过 ffi_call_SYSV 函数，我们可以得到 stack、frame、fn、rvalue、flags、closure 参数。</p><p>各参数会依次保存在参数寄存器中，参数栈 stack 在 x0 寄存器中，参数地址 frame 在x1寄存器中，函数指针 fn 在x2寄存器中，用于存放返回值的 rvalue 在 x3 里，结构体标识 flags 在x4寄存器中，闭包 closure 在 x5 寄存器中。</p><p>然后，我们再看看ffi_call_SYSV 处理的核心代码：</p><pre><code>    //分配 stack 和 frame\n    cfi_def_cfa(x1, 32);\n    stp x29, x30, [x1]\n    mov x29, x1\n    mov sp, x0\n    cfi_def_cfa_register(x29)\n    cfi_rel_offset (x29, 0)\n    cfi_rel_offset (x30, 8)\n\n    // 记录函数指针 fn\n    mov x9, x2          /* save fn */\n    \n    // 记录返回值 rvalue\n    mov x8, x3          /* install structure return */\n#ifdef FFI_GO_CLOSURES\n    // 记录闭包 closure\n    mov x18, x5         /* install static chain */\n#endif\n    // 保存 rvalue 和 flags\n    stp x3, x4, [x29, #16]  /* save rvalue and flags */ \n\n    //先将向量参数传到寄存器\n    tbz w4, #AARCH64_FLAG_ARG_V_BIT, 1f\n    ldp     q0, q1, [sp, #0]\n    ldp     q2, q3, [sp, #32]\n    ldp     q4, q5, [sp, #64]\n    ldp     q6, q7, [sp, #96]\n1:\n    // 再将参数传到寄存器\n    ldp     x0, x1, [sp, #16*N_V_ARG_REG + 0]\n    ldp     x2, x3, [sp, #16*N_V_ARG_REG + 16]\n    ldp     x4, x5, [sp, #16*N_V_ARG_REG + 32]\n    ldp     x6, x7, [sp, #16*N_V_ARG_REG + 48]\n\n    //释放上下文，留下栈里参数\n    add sp, sp, #CALL_CONTEXT_SIZE\n    \n    // 调用函数指针 fn\n    blr     x9\n\n    // 重新读取 rvalue 和 flags\n    ldp x3, x4, [x29, #16]\n\n    // 析构部分栈指针\n    mov     sp, x29\n    cfi_def_cfa_register (sp)\n    ldp     x29, x30, [x29]\n\n    // 保存返回值\n    adr x5, 0f\n    and w4, w4, #AARCH64_RET_MASK\n    add x5, x5, x4, lsl #3\n    br  x5\n</code></pre><p>如上面代码所示，<strong>ffi_call_SYSV 处理过程分为下面几步</strong>：</p><p>第一步，ffi_call_SYSV 会先分配 stack 和 frame，保存记录 fn、rvalue、closure、flags。</p><p>第二步，将向量参数传到寄存器，按照参数放置规则，调整 sp 的位置，</p><p>第三步，将参数放入寄存器，存放完毕，就开始释放上下文，留下栈里的参数。</p><p>第四步，通过 blr 指令调用 x9 中的函数指针 fn ，以调用函数。</p><p>第五步，调用完函数指针，就重新读取 rvalue 和 flags，析构部分栈指针。</p><p>第六步，保存返回值。</p><p>可以看出，libffi 调用函数的原理和 objc_msgSend 的实现原理非常类似。objc_msgSend 原理，你可以参考 Mike Ash 的“<a href=\"https://www.mikeash.com/pyblog/friday-qa-2017-06-30-dissecting-objc_msgsend-on-arm64.html\">Dissecting objc_msgSend on ARM64</a>”这篇文章。</p><p>这里我要多说一句，在专栏<a href=\"https://time.geekbang.org/column/article/85331\">第2篇文章</a>中我和你分享App启动速度优化时，用到了些汇编代码，有很多用户反馈看不懂这部分内容。针对这个情况，我特意在<a href=\"https://time.geekbang.org/column/article/88799\">第11篇答疑文章</a>中，和你分享了些汇编语言学习的方法、参考资料。如果你对上述的汇编代码感兴趣，但又感觉读起来有些吃力的话，建议你再看一下第11篇文章中的相关内容。</p><p>了解了 libffi 调用函数的原理后，相信你迫不及待就想在你的 iOS 工程中集成 libffi了吧。</p><h2>如何使用libffi？</h2><p>孙源在 GitHub 上有个 <a href=\"https://github.com/sunnyxx/libffi-iOS\">Demo</a>，已经集成了 iOS 可以用的 libffi 库，你可以将这个库集成到自己的工程中。接下来，我借用孙源这个Demo 中的示例代码，来分别和你说说如何使用 libffi 库来调用 C 函数和定义 C 函数。代码所在文件路径是 libffi-iOS/Demo/ViewController.m。在这里，我也特别感谢孙源的这个Demo。</p><h3>调用 C 函数</h3><p>首先，声明一个函数，实现两个整数相加：</p><pre><code>- (int)fooWithBar:(int)bar baz:(int)baz {\n    return bar + baz;\n}\n</code></pre><p>然后，定义一个函数，使用 libffi 来调用 fooWithBar:baz 函数，也就是刚刚声明的实现两个整数相加的函数。</p><pre><code>void testFFICall() {\n    // ffi_call 调用需要准备的模板 ffi_cif\n    ffi_cif cif;\n    // 参数类型指针数组，根据被调用的函数入参的类型来定\n    ffi_type *argumentTypes[] = {&amp;ffi_type_pointer, &amp;ffi_type_pointer, &amp;ffi_type_sint32, &amp;ffi_type_sint32};\n    // 通过 ffi_prep_cif 内 ffi_prep_cif_core 来设置 ffi_cif 结构体所需要的数据，包括 ABI、参数个数、参数类型等。\n    ffi_prep_cif(&amp;cif, FFI_DEFAULT_ABI, 4, &amp;ffi_type_pointer, argumentTypes);\n    \n    Sark *sark = [Sark new];\n    SEL selector = @selector(fooWithBar:baz:);\n    \n    // 函数参数的设置\n    int bar = 123;\n    int baz = 456;\n    void *arguments[] = {&amp;sark, &amp;selector, &amp;bar, &amp;baz};\n    \n    // 函数指针 fn\n    IMP imp = [sark methodForSelector:selector];\n    // 返回值声明\n    int retValue;\n\n    // ffi_call 所需的 ffi_cif、函数指针、返回值、函数参数都准备好，就可以通过 ffi_call 进行函数调用了\n    ffi_call(&amp;cif, imp, &amp;retValue, arguments);\n    NSLog(@&quot;ffi_call: %d&quot;, retValue);\n}\n</code></pre><p>如上面代码所示，先将 ffi_call 所需要的 ffi_cif 通过 ffi_prep_cif 函数准备好，然后设置好参数，通过 Runtime 接口获取 fooWithBar:baz 方法的函数指针 imp，最后就可以通过 ffi_call 进行函数调用了。</p><p>在这个例子中，函数指针是使用 Objective-C 的 Runtime 得到的。如果是 C 语言函数，你就可以通过 dlsym 函数获得。dlsym 获得函数指针示例如下：</p><pre><code>// 计算矩形面积\nint rectangleArea(int length, int width) {\n    printf(&quot;Rectangle length is %d, and with is %d, so area is %d \\n&quot;, length, width, length * width);\n    return length * width;\n}\n\nvoid run() {\n    // dlsym 返回 rectangleArea 函数指针\n    void *dlsymFuncPtr = dlsym(RTLD_DEFAULT, &quot;rectangleArea&quot;);\n}\n</code></pre><p>如上代码所示，dlsym 根据计算矩形面积的函数 rectangleArea 的函数名，返回 rectangleArea 函数指针给 dlsymFuncPtr。</p><p>无论是 Runtime 获取的函数指针还是 dlsym 获取的函数指针都可以在运行时去完成，接着使用 libffi 在运行时处理好参数。这样，就能够实现运行时动态地调用 C 函数了。</p><p>接下来，我再跟你说下如何使用 libffi 定义 C 函数。</p><h3>定义 C 函数</h3><p>首先，声明一个两数相乘的函数。</p><pre><code>void closureCalled(ffi_cif *cif, void *ret, void **args, void *userdata) {\n    int bar = *((int *)args[2]);\n    int baz = *((int *)args[3]);\n    *((int *)ret) = bar * baz;\n}\n</code></pre><p>然后，再写个函数，用来定义 C 函数。</p><pre><code>void testFFIClosure() {\n    ffi_cif cif;\n    ffi_type *argumentTypes[] = {&amp;ffi_type_pointer, &amp;ffi_type_pointer, &amp;ffi_type_sint32, &amp;ffi_type_sint32};\n    // 准备模板 cif\n    ffi_prep_cif(&amp;cif, FFI_DEFAULT_ABI, 4, &amp;ffi_type_pointer, argumentTypes);\n\n    // 声明一个新的函数指针\n    IMP newIMP;\n    \n    // 分配一个 closure 关联新声明的函数指针\n    ffi_closure *closure = ffi_closure_alloc(sizeof(ffi_closure), (void *)&amp;newIMP);\n\n    // ffi_closure 关联 cif、closure、函数实体 closureCalled\n    ffi_prep_closure_loc(closure, &amp;cif, closureCalled, NULL, NULL);\n    \n    // 使用 Runtime 接口动态地将 fooWithBar:baz 方法绑定到 closureCalled 函数指针上\n    Method method = class_getInstanceMethod([Sark class], @selector(fooWithBar:baz:));\n    method_setImplementation(method, newIMP);\n    \n    // after hook\n    Sark *sark = [Sark new];\n    int ret = [sark fooWithBar:123 baz:456];\n    NSLog(@&quot;ffi_closure: %d&quot;, ret);\n}\n</code></pre><p>如上面代码所示，在 testFFIClosure 函数准备好 cif 后，会声明一个新的函数指针，这个新的函数指针会和分配的 ffi_closure 关联，ffi_closure 还会通过 ffi_prep_closure_loc 函数关联到 cif、closure、函数实体 closureCalled。</p><p>有了这种能力，你就具备了在运行时将一个函数指针和函数实体绑定的能力，也就能够很容易地实现动态地定义一个 C 函数了。</p><h2>小结</h2><p>今天，我和你分享了 libffi 的原理，以及怎么使用 libffi 调用和定义 C 函数。</p><p>当你理解了 libffi 的原理以后，再面对语言之间运行时动态调用的问题，也就做到了心中有数。在方案选择动态调用方式时，也就能够找出更多的方案，更加得心应手。</p><p>比如，使用 Aspect 进行方法替换，如果使用不当，会有较大的风险；再比如，hook已经被hook 过的方法，那么之前的 hook 会失效，新的hook 也会出错，而使用 libffi 进行 hook 不会出现这样的问题。</p><h2>课后作业</h2><p>Block 是一个 Objective-C 对象，表面看类似 C 函数，实际上却有很大不同。你可以点击<a href=\"http://clang.llvm.org/docs/Block-ABI-Apple.html\">这个链接</a>查看Block 的定义，也可以再看看 Mike Ash 的 <a href=\"https://github.com/mikeash/MABlockClosure\">MABlockClosure</a>库。然后，请你在留言区说说如何通过 libffi 调用 Block。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":234743,"user_name":"幻想vs梦想","can_delete":false,"product_type":"c1","uid":1089064,"ip_address":"","ucode":"249DD1EB32B67E","user_header":"https://static001.geekbang.org/account/avatar/00/10/9e/28/d7ac85bd.jpg","comment_is_top":false,"comment_ctime":1594784889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479686777","product_id":100024501,"comment_content":"首先,为啥要调用c函数,什么场景下我们需要去调用c函数,调用c函数有哪些好处或作用,有点不太懂.","like_count":4},{"had_liked":false,"id":102098,"user_name":"开发小能手","can_delete":false,"product_type":"c1","uid":1107899,"ip_address":"","ucode":"3ED813CBE77009","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/bb/18eb89fd.jpg","comment_is_top":false,"comment_ctime":1560135935,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14445037823","product_id":100024501,"comment_content":"&#47;&#47; 有一个问题想要请教老师, 可能与当前文章没有太大的关联.<br>&#47;&#47; 在女神(念茜)的博客(iOS安全攻防（二十二）：static和被裁的符号表)中提到<br>&#47;**<br> 如果函数属性为 static ，那么编译时该函数符号就会被解析为local符号。<br> 在发布release程序时（用Xcode打包编译二进制）默认会strip裁掉这些函数符号，无疑给逆向者加大了工作难度。<br> *&#47;<br><br>&#47;&#47; 但是根据我的测试发现, 实际上并不是女神说的那样.在 iOS 项目中, 一个 C 函数即使是不添加 static 关键字, 在 release 的时候, 也没有具体的符号表.<br>&#47;&#47; 这是因为现在的 Xcode （编译器）做了优化了么?<br><br>@implementation CoderPerson<br><br><br>&#47;&#47; 发现, 即使是不加 static, 在 release 的时候这个函数符号也没有<br>&#47;&#47;  static int coder_func() {<br>int coder_func() {<br>    int a = 10;<br>    int b = 20;<br>    int c = a+b;<br>    return c;<br>}<br><br>- (void)coder_method {<br>    int d = coder_func();<br>    NSLog(@&quot;%d&quot;, d);<br>}<br><br>@end<br><br><br>一摸一样的代码、如果放到终端项目中的话，确实是要加上static才会在release的时候被裁减。 感觉是项目的参数配置导致的、但是一直没有找到。<br><br><br>","like_count":3,"discussions":[{"author":{"id":1473102,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7a/4e/cf6924ab.jpg","nickname":"北方的蓝","note":"","ucode":"F340CE41186050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":179,"discussion_content":"在同一个工程的函数不需要动态调用，所以Release时被优化掉了。可以把这些放到另一个静态库里，就不会被优化了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561254437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99262,"user_name":"mersa","can_delete":false,"product_type":"c1","uid":1330156,"ip_address":"","ucode":"A9F0B2FF9457C9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epzwbJGbUmgEC77J6QY6A5pLPdPbw7sqk4DcsHK8qPw7OiaiaMD7pjzb8uHlkY5uLZRibWVvPDDAgM5A/132","comment_is_top":false,"comment_ctime":1559183102,"is_pvip":false,"replies":[{"id":"38603","content":"可以","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387720,"ip_address":"","comment_id":99262,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10149117694","product_id":100024501,"comment_content":"这个库可以用在线上审核么","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452042,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104919,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1454262,"ip_address":"","ucode":"E2B9DC52645593","user_header":"","comment_is_top":false,"comment_ctime":1560870272,"is_pvip":false,"replies":[{"id":"38598","content":"对","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387313,"ip_address":"","comment_id":104919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855837568","product_id":100024501,"comment_content":"能用libffi hook c函数嘛？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454483,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301315,"user_name":"Space","can_delete":false,"product_type":"c1","uid":1596897,"ip_address":"","ucode":"999C0CB4733AB7","user_header":"","comment_is_top":false,"comment_ctime":1625628074,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625628074","product_id":100024501,"comment_content":"如何hook C函数？没头绪~","like_count":0},{"had_liked":false,"id":275637,"user_name":"forping","can_delete":false,"product_type":"c1","uid":2153689,"ip_address":"","ucode":"7495E250F0A017","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/d9/129f569f.jpg","comment_is_top":false,"comment_ctime":1611627432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611627432","product_id":100024501,"comment_content":"struct BlockDescriptor<br>{<br>    unsigned long reserved;<br>    unsigned long size;<br>    void *rest[1];<br>};<br><br>struct Block<br>{<br>    void *isa;<br>    int flags;<br>    int reserved;<br>    void *invoke;<br>    struct BlockDescriptor *descriptor;<br>};<br><br>static void *BlockImpl(id block)<br>{<br>    return ((__bridge struct Block *)block)-&gt;invoke;<br>}<br><br>void testFFIBlockCall(){<br>    <br>    int(^block)(void) = ^{<br>        NSLog(@&quot;1&quot;);<br>        return 2;<br>    };<br>    <br>    <br>    ffi_cif cif;<br>    ffi_type *argumentTypes[] = {};<br>    <br>    ffi_prep_cif(&amp;cif, FFI_DEFAULT_ABI, 0, &amp;ffi_type_sint32, argumentTypes);<br>    <br>    void *arguments[] = {};<br>    <br>    IMP imp = BlockImpl(block);<br>    <br>    int retValue;<br>    <br>    ffi_call(&amp;cif, imp, &amp;retValue, arguments);<br>    NSLog(@&quot;ffi_call: %d&quot;, retValue);<br>    <br>}","like_count":1},{"had_liked":false,"id":186647,"user_name":"Master","can_delete":false,"product_type":"c1","uid":1454833,"ip_address":"","ucode":"642F865923C98A","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/f1/54575096.jpg","comment_is_top":false,"comment_ctime":1583894710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583894710","product_id":100024501,"comment_content":"没太看明白，好像被调用的函数都是被编译过的啊？","like_count":0},{"had_liked":false,"id":129303,"user_name":"三刀流剑客","can_delete":false,"product_type":"c1","uid":1453977,"ip_address":"","ucode":"B958771DE190BB","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/99/918e9b2a.jpg","comment_is_top":false,"comment_ctime":1567083247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567083247","product_id":100024501,"comment_content":"可以用libffi动态替换系统+load方法吗","like_count":0},{"had_liked":false,"id":104356,"user_name":"林峰峰","can_delete":false,"product_type":"c1","uid":1457609,"ip_address":"","ucode":"83C2093135BBB8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3B5MoC4DfBt00nnVshEBFHHkNVgbcBrXsd3SxFicdN3XX5ILOe7GJxKvtJKCY53xNCuxSV8ABxNulbhkibm1lXIw/132","comment_is_top":false,"comment_ctime":1560736212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560736212","product_id":100024501,"comment_content":"想问下实际应用中，这种动态调用用到了那些方面？","like_count":0},{"had_liked":false,"id":99881,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1559351746,"is_pvip":false,"replies":[{"id":"38600","content":"文中有说。“就需要先生成动态调用相应寄存器和栈状态的汇编指令。而要达到事...”","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1561387541,"ip_address":"","comment_id":99881,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559351746","product_id":100024501,"comment_content":"为啥少了编译过程也能调用","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452309,"discussion_content":"文中有说。“就需要先生成动态调用相应寄存器和栈状态的汇编指令。而要达到事...”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561387541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99400,"user_name":"吹啊吹吹","can_delete":false,"product_type":"c1","uid":1455385,"ip_address":"","ucode":"FFB7D85C26145B","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/19/4f9dc4b5.jpg","comment_is_top":false,"comment_ctime":1559207344,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559207344","product_id":100024501,"comment_content":"没有汇编基础，看起来好痛苦。","like_count":0,"discussions":[{"author":{"id":1165891,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGicLcs9l1WdwrbJcmIyyicO9IcvDMwWk0hYGjODZ8WmyEadEVjfsqa9icaicXZNbNvbuNAOgbgTZhCg/132","nickname":"上官奶奶","note":"","ucode":"0D68B28C96BB9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55391,"discussion_content":"有汇编基础看也痛苦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574354242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}