{"id":97617,"title":"13 | 进程间的同步互斥、资源共享与通讯","content":"<p>你好，我是七牛云许式伟。</p><p>在上一讲，我们介绍了进程内执行体之间的协同机制。今天我们接着聊进程与进程之间的协同。</p><p>这些协同机制大体可分为：互斥、同步、资源共享以及通讯等原语。对于这些协同机制，我们对比了 Linux、Windows、iOS 这三大操作系统的支持情况，整理内容如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/27/e5/276e3874bc64364c10c52371f6b11ce5.png?wh=734*826\" alt=\"\"></p><p>在逐一详细分析它们之前，我们先讨论一个问题：从需求角度来讲，进程内协同与进程间协同有何不同？</p><p>在早期，操作系统还只有进程这个唯一的执行体。而今天，进程内的执行体（线程与协程）被发明出来并蓬勃发展，事情发生了怎样的变化？</p><p>请先思考一下这个问题。我们在这一讲最后总结的时候一起聊聊。</p><h2>启动进程</h2><p>在讨论进程间的协同前，我们先看下怎么在一个进程中启动另一个进程。这通常有两种方法：</p><ul>\n<li>创建子进程；</li>\n<li>让Shell配合执行某个动作。</li>\n</ul><p>前面在 “<a href=\"https://time.geekbang.org/column/article/96324\">11 | 多任务：进程、线程与协程</a>” 一讲中我们已经提到过，创建子进程 UNIX 系的操作系统都用了 fork API，它使用上很简洁，但是从架构角度来说是一个糟糕的设计。Windows 中我们用 CreateProcess，这个函数有很多的参数。</p><p>iOS 很有意思，它并不支持创建子进程。在进程启动这件事情上，它做了两个很重要的变化：</p><ul>\n<li>软件不再创建多个进程实例，永远是单例的；</li>\n<li>一个进程要调用另一个进程的能力，不是去创建它，而是基于 URL Scheme 去打开它。</li>\n</ul><!-- [[[read_end]]] --><p>什么是 URL Scheme ？我们平常看到一个 URL 地址。比如：</p><ul>\n<li><a href=\"https://www.qiniu.com/\">https://www.qiniu.com/</a></li>\n<li><a href=\"ftp://example.com/hello.doc\">ftp://example.com/hello.doc</a></li>\n</ul><p>这里面的 https 和 ftp 就是 URL Scheme，它代表了某种协议规范。在 iOS 下，一个软件可以声明自己实现了某种 URL Scheme，比如微信可能注册了“weixin”这个 URL Scheme，那么调用</p><pre><code> UIApplication.openURL(&quot;weixin://...&quot;) \n</code></pre><p>都会跳转到微信。通过这个机制，我们实现了支付宝和微信支付能力的对接。</p><p>URL Scheme 机制并不是 iOS 的发明，它应该是浏览器出现后形成的一种扩展机制。Windows 和 Linux 的桌面也支持类似的能力，在 Windows 下调用的是 ShellExecute 函数。</p><h2>同步与互斥</h2><p>聊完进程的启动，我们正式开始谈进程间的协同。</p><p>首先我们来看一下同步和互斥体。从上一讲 “<a href=\"https://time.geekbang.org/column/article/96994\">12 | 进程内协同：同步、互斥与通讯</a>”看，同步互斥相关的内容有：</p><ul>\n<li>锁（Mutex）；</li>\n<li>读写锁（RWMutex）；</li>\n<li>信号量（Semaphore）；</li>\n<li>等待组（WaitGroup）；</li>\n<li>条件变量（Cond）。</li>\n</ul><p>进程间协同来说，主流操作系统支持了锁（Mutex）和信号量（Semaphore）。Windows 还额外支持了事件（Event）同步原语，这里我们略过不提。</p><p>进程间的锁（Mutex），语义上和进程内没有什么区别，只不过标识互斥资源的方法不同。Windows 最简单，用名称（Name）标识资源，iOS 用路径（Path），Linux 则用共享内存。</p><p>从使用接口看，Windows 和 iOS 更为合理，虽然大家背后实现上可能都是基于共享内存（对用户进程来说，操作系统内核对象都是共享的），但是没必要把实现机理暴露给用户。</p><p>我们再看信号量。</p><p>信号量（Semaphore）概念是 Dijkstra（学过数据结构可能会立刻回忆起图的最短路径算法，对的，就是他发明的）提出来的。信号量本身是一个整型数值，代表着某种共享资源的数量（简记为 S）。信号量的操作界面为 PV 操作。</p><p>P 操作意味着请求或等待资源。执行 P 操作 P(S) 时，S 的值减 1，如果 S &lt; 0，说明没有资源可用，等待其他执行体释放资源。</p><p>V 操作意味着释放资源并唤醒执行体。执行 V 操作 V(S) 时，S 的值加 1，如果 S &lt;= 0，则意味着有其他执行体在等待中，唤醒其中的一个。</p><p>看到这里，你可能敏锐地意识到，条件变量的设计灵感实际上是从信号量的 PV 操作进一步抽象而来，只不过信号量中的变量是确定的，条件也是确定的。</p><p>进程间的同步与互斥原语并没有进程内那么丰富（比如没有 WaitGroup，也没有 Cond），甚至没那么牢靠。</p><p>为什么？因为进程可能会异常挂掉，这会导致同步和互斥的状态发生异常。比如，进程获得了锁，但是在做任务的时候异常挂掉，这会导致锁没有得到正常的释放，那么另一个等待该锁的进程可能就会永远饥饿。</p><p>信号量同样有类似的问题，甚至更麻烦。对锁来说，进程挂掉还可能可以把释放锁的责任交给操作系统内核。但是信号量做不到这一点，操作系统并不清楚信号量的值（S）应该是多少才是合理的。</p><h2>资源共享</h2><p>两个进程再怎么被隔离，只要有共同的中间人，就可以相互对话（通讯）。中间人可以是谁？共享资源。进程之间都有哪些共享的存储型资源？比较典型的是：</p><ul>\n<li>文件系统；</li>\n<li>剪贴板。</li>\n</ul><p>文件系统本身是因存储设备的管理而来。但因为存储设备本身天然是共享资源，某个进程在存储设备上创建一个文件或目录，其他进程自然可以访问到。</p><p>因此，文件系统天然是一个进程间通讯的中间人。而且，在很多操作系统里面，文件的概念被抽象化，“一切皆文件”。比如，命名管道就只是一种特殊的 “文件” 而已。</p><p>和文件系统相关的进程间协同机制有：</p><ul>\n<li>文件；</li>\n<li>文件锁；</li>\n<li>管道（包括匿名管道和命名管道）；</li>\n<li>共享内存。</li>\n</ul><p>这里我们重点介绍一下共享内存。</p><p>共享内存其实是虚拟内存机制的自然结果。关于虚拟内存的详细介绍，可以参阅 “<a href=\"https://time.geekbang.org/column/article/93802\">07 | 软件运行机制及内存管理</a>” 一讲。虚拟内存本来就需要在内存页与磁盘文件之间进行数据的保存与恢复。</p><p>将虚拟内存的内存页和磁盘文件的内容建立映射关系，在虚拟内存管理机制中原本就存在。</p><p>只需要让两个进程的内存页关联到同一个文件句柄，即可完成进程间的数据共享。这可能是性能最高的进程间数据通讯手段了。</p><p>Linux 的共享内存的使用界面大体是这样的：</p><pre><code>func Map(addr unsafe.Pointer, len int64, prot, flags int, fd int, off int64) unsafe.Pointer\nfunc Unmap(addr unsafe.Pointer, len int64)\n</code></pre><p>其中，Map 是将文件 fd 中的<code>[off, off+len)</code>区间的数据，映射到<code>[addr, addr+len)</code> 这段虚拟内存地址上去。</p><p>addr 可以传入 nil 表示选择一段空闲的虚拟内存地址空间来进行映射。Unmap 则是将<code>[addr, addr+len)</code>这段虚拟内存地址对应的内存页取消映射，此后如果代码中还对这段内存地址进行访问，就会发生缺页异常。</p><p>在 Windows 下共享内存的使用界面和 Linux 略有不同，但语义上大同小异，这里略过不提。</p><p>真正值得注意的是 iOS，你会发现基于文件系统的进程间通讯机制，一律不支持。为什么？因为 iOS 操作系统做了一个极大的改变：软件被装到了一个沙箱（Sandbox）里面，不同进程间的存储完全隔离。</p><p>存储分为内存和外存。内存通过虚拟内存机制实现跨进程的隔离，这个之前我们已经谈到过。现在 iOS 更进一步，外存的文件系统也相互独立。软件 A 创建的文件，软件 B 默认情况下并不能访问。在一个个软件进程看来，自己在独享着整个外存的文件系统。</p><p>文件系统之外，进程间共享的存储型资源，就剩下剪贴板了。</p><p>但剪贴板并不是一个常规的进程间通讯方式。从进程间通讯角度来说它有很大的限制：剪贴板只有一个，有人共享数据上去，就会把别人存放的数据覆盖掉。</p><p>实践中，剪贴板通常作为一种用户实现跨进程交互的手段，而不太会被用来作为进程间的通讯。相反它更可能被恶意程序所利用。比如，写个木马程序来监听剪贴板，以此来窃取其他程序使用过程中留下的痕迹。</p><h2>收发消息</h2><p>那么，不用文件系统和剪贴板这样的共享资源，还有其他的通讯机制么？</p><p><strong>有，基于网络。很重要的一个事实是：这些进程同在一台机器上，同在一个局域网中。</strong></p><p>套接字作为网络通讯的抽象，本身就是最强大的通讯方式，没有之一。进程间基于套接字来进行通讯，也是极其自然的一个选择。</p><p>况且，UNIX 还发明了一个专门用于本地通讯的套接字：UNIX 域。UNIX 域不同于常规套接字的是，它通过一个 name 来作为访问地址，而不是用<code>ip:port</code>来作为访问地址。</p><p>Windows 平台并不支持 UNIX 域。但是有趣的是，Windows 的命名管道（NamedPipe）也不是一个常规意义上的管道那么简单，它更像是一个管道服务器（PipeServer），一个客户端连上来可以分配一个独立的管道给服务器和客户端进行通讯。从这个事实看，Windows 的命名管道和 UNIX 域在能力上是等价的。</p><p>关于套接字更详细的内容，后文在讨论网络设备管理时我们会进一步介绍。</p><h2>架构思维上我们学习到什么？</h2><p>对比不同操作系统的进程间协同机制，差异无疑是非常巨大的。</p><p>总结来说，进程间协同的机制真的很多了，五花八门，我们这里不见得就列全了。但是有趣的是，iOS 把其中绝大部分的协同机制给堵死了。</p><p>创新性的系统往往有其颠覆性，带着批判吸收的精神而来，做的是大大的减法。</p><p>iOS 就是这样的一个操作系统。它告诉我们：</p><ul>\n<li>软件不需要启动多份实例。一个软件只需启动一个进程实例。</li>\n<li>大部分进程间的协同机制都是多余的。你只需要能够调用其他软件的能力（URL Scheme）、能够互斥、能够收发消息就够了。</li>\n</ul><p>这的确是一个让人五体投地的决策。虽然从进程间协同机制的角度，看起来 iOS 少了很多能力。但这恰恰也给了我们一个启示：这么多的进程通讯机制，是否都是必需的？</p><p>至少从桌面操作系统的视角看，进程间协同的机制，大部分都属于过度设计。当然，后面在 “服务端开发” 一章中，我们也会继续站在服务端开发视角来谈论这个话题。</p><p>并不是早期操作系统的设计者们喜欢过度设计。实际上这是因为有了线程和协程这样的进程内多任务设施之后，进程的边界已经发生了极大的变化。</p><p>前面我们讨论架构思维的时候说过，架构的第一步是做需求分析。那么需求分析之后呢？是概要设计。概要设计做什么？是做子系统的划分。它包括这样一些内容：</p><ul>\n<li>子系统职责范围的定义；</li>\n<li>子系统的规格（接口），子系统与子系统之间的边界；</li>\n<li>需求分解与组合的过程，系统如何满足需求、需求适用性（变化点）的应对策略。</li>\n</ul><p>从架构角度来看，进程至少应该是子系统级别的边界。子系统和子系统应该尽可能是规格级别的协同，而不是某种实现框架级别的协同。规格强调的是自然体现需求，所以规格是稳定的，是子系统的契约。而实现框架是技巧，是不稳定的，也许下次重构的时候实现框架就改变了。</p><p>所以站在架构视角，站在子系统的边界看进程边界，我们就很清楚，进程间协同只需要有另一个进程能力的调用，而无需有复杂的高频协作、高度耦合的配合需求。</p><p>不过，为什么 iOS 会如此大刀阔斧地做出改变，除了这些机制的确多余之外，还有一个极其核心的原因，那就是安全。关于这一点，我们在后面探讨操作系统的安全管理时，会进一步进行分析。</p><h2>结语</h2><p>今天我们从进程启动开始入手，介绍了同步与互斥、资源共享、收发消息等进程间的协同机制。通过对比不同操作系统，我们会发现以 “剧烈变动” 来形容进程间协同的需求演进一点也不过分。</p><p>我认为 iOS 是对的。大刀阔斧干掉很多惯例要支持的功能后，进程这个执行体，相比线程和协程就有了更为清晰的分工。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。到这一讲为止，我们单机软件相关的内容就介绍完了。从下一讲开始我们将进入多姿多彩的互联网世界。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":98457,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1559006093,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"400990964621","product_id":100025201,"comment_content":"iOS 可以大刀阔斧的改革的一个重要原因就是，这个操作系统的使用场景极为单一，全部都是直接面向用户的交互式应用。这点和通用操作系统 UNIX 有巨大的区别，例如它连 UNIX 最基本的命令行都没有，也没有 CS&#47;BS 架构需求，大量 UNIX 进程间通讯都是为这些需求而设计的，需求没有了，自然底层机制也就不需要了。由此其实也可以看出来，通用操作系统应该是作为一个底层操作系统来用，只负责硬件抽象，而每一个系统应该根据自己的使用场景去设计一个上层操作系统，而不是直接拿底层操作系统充当上层操作系统用，或者将二者混为一谈，虽然这么多年来，人们已经习惯了这种设计，但这不是正确的。","like_count":93,"discussions":[{"author":{"id":1068843,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/2b/da7efc7e.jpg","nickname":"cloudy","note":"","ucode":"60A0731E442024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252506,"discussion_content":"挺赞同你这个观点，比如说两个进程之间有大块数据的交互，用url或者socket明显没有共享内存方便实用。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588168926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214303,"avatar":"https://static001.geekbang.org/account/avatar/00/12/87/5f/6bf8b74a.jpg","nickname":"Kepler","note":"","ucode":"0C9CA3DB8B3CF0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557254,"discussion_content":"Unix面向工业、军用，涉及复杂的多任务协同、交互，而iOS面向个人，无论是计算规模还是数据规模都很小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647740852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396594,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632459111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2313071,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4b/6f/50be543b.jpg","nickname":"景南鑫 Rock.J","note":"","ucode":"C611E784D391F5","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367852,"discussion_content":"你说的ios还是 Mac OS?你用ios与unix相比是不是比错对象了？如果是Mac OS谁说没有命令行？应用场景不同完成操作系统的差异是正常，但是，操作系统架构本身解决并非是上层应用变化的来变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618486188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512642,"avatar":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","nickname":"侧耳倾听","note":"","ucode":"5BF2A2440B54F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350892,"discussion_content":"你说的不现实，就一点来说，微软绝不会允许自己被其他方扼住喉咙，那他就会自己开发自己的通用系统，那么别的公司也会开发自己的通用系统，在自己的通用系统上再开发应用系统？这有点脱裤子放屁，最终还是回归到现状，各家开发各家的操作系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614066884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207922,"discussion_content":"宏内核 和 微内核 的区别？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584525679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100896,"user_name":"tim","can_delete":false,"product_type":"c1","uid":1065570,"ip_address":"","ucode":"50F90216B4640B","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/62/536aef06.jpg","comment_is_top":false,"comment_ctime":1559665940,"is_pvip":false,"replies":[{"id":"36375","content":"👍，很好的补充","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559690310,"ip_address":"","comment_id":100896,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117523782932","product_id":100025201,"comment_content":"信号量（system V) 有一个属性是un-do,如果进程挂掉，这个进程获得的资源会释放。避免死锁饿死的问题","like_count":27,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452725,"discussion_content":"👍，很好的补充","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559690310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396595,"discussion_content":"Mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632459132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105216,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1560939869,"is_pvip":false,"replies":[{"id":"38109","content":"从客户端软件角度，多进程、多线程甚至多协程的性能差异很小。所以思考不应该是从性能出发，我觉得应该从隔离性出发，多进程的好处是隔离性好，一个出问题不影响别人。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560953211,"ip_address":"","comment_id":105216,"utype":1}],"discussion_count":3,"race_medal":0,"score":"87460285789","product_id":100025201,"comment_content":"非常同意作者观点啊！另外有个疑惑就是Chrome浏览器是多进程设计的，据说是为了追求性能，许总怎么看？","like_count":20,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454596,"discussion_content":"从客户端软件角度，多进程、多线程甚至多协程的性能差异很小。所以思考不应该是从性能出发，我觉得应该从隔离性出发，多进程的好处是隔离性好，一个出问题不影响别人。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1560953211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396596,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632459172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2313071,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4b/6f/50be543b.jpg","nickname":"景南鑫 Rock.J","note":"","ucode":"C611E784D391F5","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367853,"discussion_content":"这么说微软的\nIe是单一进程么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618486295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98694,"user_name":"ljf10000","can_delete":false,"product_type":"c1","uid":1494064,"ip_address":"","ucode":"44957329A61EAE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQ5wib49kcMPqCTRT1aThh6mMAVl6qseLwbVOLhicVLjZCxCoyQd5CrrHHibs2CVPaoK3g/132","comment_is_top":false,"comment_ctime":1559058701,"is_pvip":false,"replies":[{"id":"35327","content":"是的，不过它出现得比docker早好多年。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559083786,"ip_address":"","comment_id":98694,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65983568141","product_id":100025201,"comment_content":"ios有点docker的意思","like_count":15,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451792,"discussion_content":"是的，不过它出现得比docker早好多年。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559083786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98659,"user_name":"L-jiehui","can_delete":false,"product_type":"c1","uid":1218329,"ip_address":"","ucode":"EDDB4683973ADB","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/19/b724ca0a.jpg","comment_is_top":false,"comment_ctime":1559052169,"is_pvip":false,"replies":[{"id":"35313","content":"1、0未必与事实相符，不相符会导致逻辑错乱<br>2、见我们前面 “07 | 软件运行机制及内存管理” 一节","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559058833,"ip_address":"","comment_id":98659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27328855945","product_id":100025201,"comment_content":"老师思维高度很高，再一次收获巨大，谢谢老师<br>有两个问题请教下老师：<br>1、操作系统如果不知道信号量的值多少才合理，不能统一按照自定义默认的值，例如0来处理吗<br>2、虚拟内存实现进程隔离具体如何实现的呢，网上看了一遍资料，还是理解得不够清晰","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451773,"discussion_content":"1、0未必与事实相符，不相符会导致逻辑错乱\n2、见我们前面 “07 | 软件运行机制及内存管理” 一节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559058833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99589,"user_name":"BillyZhang","can_delete":false,"product_type":"c1","uid":1026917,"ip_address":"","ucode":"7DD5F2675915BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/65/a439af12.jpg","comment_is_top":false,"comment_ctime":1559264140,"is_pvip":false,"replies":[{"id":"35796","content":"macos 不是沙箱设计","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559269531,"ip_address":"","comment_id":99589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23034100620","product_id":100025201,"comment_content":"有一点不太理解，IOS 是手机或是移动操作系统，linux和windows 是pc 或是服务器操作系统，虽然安卓也是基于linux 但是 使用场景还是不太一样的吧， 那么同是苹果操作系统 MacOS 是否也是沙箱设计模式呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452179,"discussion_content":"macos 不是沙箱设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559269531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99066,"user_name":"Cordova","can_delete":false,"product_type":"c1","uid":1507212,"ip_address":"","ucode":"CADCB5D4F48F33","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/8c/a6a2b26b.jpg","comment_is_top":false,"comment_ctime":1559138467,"is_pvip":false,"replies":[{"id":"35587","content":"挺有想法的，不过所有的预见都应该建立在逻辑上，需求是怎样演进的，所以技术会怎么变，这才是架构师预见未来的判断法则。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559141087,"ip_address":"","comment_id":99066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18739007651","product_id":100025201,"comment_content":"我觉得iOS这样设计挺好的，本来就该思考这个系统面对的是什么样的使用场景，也许我们以后只需要一个用户进程呢、只不过这个用户进程功能很强大、当系统变得微小化、各种设备被变得多样化、不需要去协调用户进程、需要什么数据问问另外一个微系统设备就好啦、那这样我们的以后的系统就只需要为这一个进程保留一个套接字就好啦！所以iOS我觉得代表了以后的方向和趋势！反正听完许老师的课我是想法很多～不过可能明天早上爬起来又背着电脑，坐着公交去上班了。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451958,"discussion_content":"挺有想法的，不过所有的预见都应该建立在逻辑上，需求是怎样演进的，所以技术会怎么变，这才是架构师预见未来的判断法则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559141087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98426,"user_name":"82","can_delete":false,"product_type":"c1","uid":1494935,"ip_address":"","ucode":"C58365A8A3843D","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/97/fcd8957d.jpg","comment_is_top":false,"comment_ctime":1559003840,"is_pvip":true,"replies":[{"id":"35200","content":"1、是的，架构设计是选择，你没法兼顾<br>2、这个是个理由；简单也可以是理由<br>","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559005933,"ip_address":"","comment_id":98426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18738873024","product_id":100025201,"comment_content":"1，ios进程单实例就没法做到android的应用双开能力吧？<br>2，在使用url scheme进程通讯时，如果存在多进程实例，是否会让系统疑惑跳转到哪个进程？<br>3，一台机器就是一个局域网，每个进程实例都是一个端，这种通讯思想似乎拓宽了网络的边界，无处不网络。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451682,"discussion_content":"1、是的，架构设计是选择，你没法兼顾\n2、这个是个理由；简单也可以是理由\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559005933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99608,"user_name":"麋鹿在泛舟","can_delete":false,"product_type":"c1","uid":1121975,"ip_address":"","ucode":"1379CADA08688E","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","comment_is_top":false,"comment_ctime":1559265857,"is_pvip":true,"replies":[{"id":"35795","content":"线程没法独立挂掉，进程会一起挂。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559269475,"ip_address":"","comment_id":99608,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14444167745","product_id":100025201,"comment_content":"&quot;为什么？因为进程可能会异常挂掉，这会导致同步和互斥的状态发生...&quot;<br>请教个问题，线程难道不会因为挂死而异常么? 如果这时候持有锁，其他线程同样的会持续拿不到锁而阻塞了。","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452188,"discussion_content":"线程没法独立挂掉，进程会一起挂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559269475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572824,"discussion_content":"线程没法独立挂掉，进程会一起挂 -- 线程挂掉，这个线程属于的进程会一起挂。\n线程而言，也就挂一个，就是挂一堆。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652977666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396599,"discussion_content":"Mark， 线程不能独立挂掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632459284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98463,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1559006996,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14443908884","product_id":100025201,"comment_content":"IOS的核心思路就是进程先天级别的隔离。可以认为它自带docker。但是我认为这个代价太大了。说真的如果不是IOS的自带逼格光环，这种隔绝程度的操作系统流行不起来的。并不是理论上先进的系统就一定好。很多时候还是需要现实的妥协","like_count":3,"discussions":[{"author":{"id":1222089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/c9/eb389183.jpg","nickname":"Hungry","note":"","ucode":"EDF8B264F155C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1902,"discussion_content":"就安全来说，iOS的是很好的，因为其他app那些运行中的进程，需要访问其他app进程的资源，都得通过唯一的URL scheme问拥有资源的app要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563076552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98438,"user_name":"zygfengyuwuzu","can_delete":false,"product_type":"c1","uid":1240242,"ip_address":"","ucode":"EAD9B1466998F4","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b2/fd9ba311.jpg","comment_is_top":false,"comment_ctime":1559004742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14443906630","product_id":100025201,"comment_content":"第一次认识到操作系统架构设计","like_count":3},{"had_liked":false,"id":98430,"user_name":"Geek_04e22a","can_delete":false,"product_type":"c1","uid":1184505,"ip_address":"","ucode":"B64FF12EA28BA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","comment_is_top":false,"comment_ctime":1559004079,"is_pvip":false,"replies":[{"id":"35207","content":"1、剪贴板是这里拿来凑数的，它并不是惯常的进程间通信手段；<br>2、Unix 系的操作系统认为所有进程都有一个祖先，进程关系构成一个进程树。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559006338,"ip_address":"","comment_id":98430,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14443905967","product_id":100025201,"comment_content":"老师，读了这篇文章，感觉收货颇丰，以前所有机制只认为是进程间通讯，没有想过重新划分同步互斥，资源共享，收发消息几类。现在有两个问题，iOS共享资源使用的是剪切板吗？Linux创建子进程目的是什么？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451683,"discussion_content":"1、剪贴板是这里拿来凑数的，它并不是惯常的进程间通信手段；\n2、Unix 系的操作系统认为所有进程都有一个祖先，进程关系构成一个进程树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559006338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396600,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632459353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137043,"user_name":"嚆同学","can_delete":false,"product_type":"c1","uid":1018329,"ip_address":"","ucode":"5F5BFE47B3302C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/d9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1569582781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10159517373","product_id":100025201,"comment_content":"从来没想过可以通过分析计算机系统的设计来了解架构知识，老师功力深厚。","like_count":2},{"had_liked":false,"id":100154,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1559462664,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10149397256","product_id":100025201,"comment_content":"一个软件只需启动一个进程实例。<br>如果是多核，单进程不是浪费吗？<br>我看nginx它是1核一个线程…","like_count":2,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275147,"discussion_content":"但iOS会同时运行很多软件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590671529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98478,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1559008836,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10148943428","product_id":100025201,"comment_content":"感恩大佬分享 随喜大佬","like_count":2,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362639,"discussion_content":"随喜是啥意思\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616996705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223239,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1591025950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885993246","product_id":100025201,"comment_content":"做减法表面上是简化了设计，深层次是对事物的认识提高了一个层次，认知升级了。","like_count":1},{"had_liked":false,"id":179304,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1581955785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876923081","product_id":100025201,"comment_content":"赞同，特别是，我也一直认为进程间通讯只要socket就够了，而不应该有那么多为了优化而分离出来的概念。事实上，在我视角里，我一直不把进程看成是在同一台机器上，我认为进程就是一个独立的机器，进程间，就是机器间关系，这样看的好处是，扩展到网络上就是自然而然的。当然实现上人们会认为这有着巨大的性能差异，毕竟一旦引入网络，联通性和时延带来的问题就不可避免。","like_count":1},{"had_liked":false,"id":110846,"user_name":"zhuyc","can_delete":false,"product_type":"c1","uid":1099734,"ip_address":"","ucode":"E021E74AC887BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/d6/32d7bd4e.jpg","comment_is_top":false,"comment_ctime":1562374506,"is_pvip":false,"replies":[{"id":"40337","content":"规格就是指接口","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562409222,"ip_address":"","comment_id":110846,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857341802","product_id":100025201,"comment_content":"&quot;规格强调的是自然体现需求，所以规格是稳定的，是子系统的契约。&quot;关注规格与契约的讨论，后面有没有机会更详细展开看看。<br>我能理解接口与实现的分离，老师提到的规格似乎是更高层的概念","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457087,"discussion_content":"规格就是指接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562409222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104746,"user_name":"Lane","can_delete":false,"product_type":"c1","uid":1008257,"ip_address":"","ucode":"F70459D1BBD9F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","comment_is_top":false,"comment_ctime":1560826420,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5855793716","product_id":100025201,"comment_content":"很好的思考，我认为进程既然是资源隔离的，是没有必要共享内存，这里可以借助go的思想，要靠通信来共享。老师很自然的类比到了子系统的边界，本来UserService是个很单纯的用户信息的代码，有时和用户沾边的需求也放在这里，久而久之导致庞大而不纯粹。","like_count":1},{"had_liked":false,"id":103383,"user_name":"kyle","can_delete":false,"product_type":"c1","uid":1179158,"ip_address":"","ucode":"DB05C0F7D2C472","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/16/0f096793.jpg","comment_is_top":false,"comment_ctime":1560425872,"is_pvip":false,"replies":[{"id":"37427","content":"什么地方觉得需要改善？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560434357,"ip_address":"","comment_id":103383,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855393168","product_id":100025201,"comment_content":"这个层次有点高了，第一遍完全不知道在说啥！任重道远啊~","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453850,"discussion_content":"什么地方觉得需要改善？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560434357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101730,"user_name":"坤亮","can_delete":false,"product_type":"c1","uid":1349035,"ip_address":"","ucode":"674C56E32F4B50","user_header":"https://static001.geekbang.org/account/avatar/00/14/95/ab/7e21a7a6.jpg","comment_is_top":false,"comment_ctime":1559951087,"is_pvip":false,"replies":[{"id":"36667","content":"嗯，使用界面就是指接口","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559966541,"ip_address":"","comment_id":101730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854918383","product_id":100025201,"comment_content":"界面是不是应该叫接口？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453089,"discussion_content":"嗯，使用界面就是指接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559966541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98481,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1559009098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853976394","product_id":100025201,"comment_content":"打卡13 深入操作系统进程架构","like_count":1},{"had_liked":false,"id":360356,"user_name":"刘杰","can_delete":false,"product_type":"c1","uid":1150394,"ip_address":"上海","ucode":"D45873B34FAA90","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/ba/30f502ed.jpg","comment_is_top":false,"comment_ctime":1666494128,"is_pvip":true,"discussion_count":0,"race_medal":3,"score":"1666494128","product_id":100025201,"comment_content":"iOS相当于留了一个URL的api句柄接入和socket，剪贴板很不安全肯定很少用来通信，这个设计思路还是很有用的，666，简单才是硬道理，外部接口统一是很好的思路，往往就是简单困难，堆材料谁不会","like_count":0},{"had_liked":false,"id":337899,"user_name":"Peter Yu","can_delete":false,"product_type":"c1","uid":1077598,"ip_address":"","ucode":"D56786A6E85321","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/5e/5393a76d.jpg","comment_is_top":false,"comment_ctime":1647145273,"is_pvip":true,"replies":[{"id":"123559","content":"可以google一下","user_name":"作者回复","user_name_real":"编辑","uid":"1228022","ctime":1647216291,"ip_address":"","comment_id":337899,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1647145273","product_id":100025201,"comment_content":"老师，PV操作中的P和V英文全称是什么呢，不太好理解","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556090,"discussion_content":"可以google一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647216292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286043,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1617117740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617117740","product_id":100025201,"comment_content":"资源共享在windows操作系统上的体现就是windows端可以同时运行多个软件，他们共享的资源主要是文件系统。<br><br>关于IOS的沙箱设计，主要是看未来的软件在满足用户需求，主要看软件方面是以一个软件整合众众多软件功能提供服务，还是多个软件共同协作来满足需求，如果是前者，那么在IOS系统上用起来就特别别扭，相当于每次切换窗口都需要重新启动软件。","like_count":0},{"had_liked":false,"id":237110,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1595681005,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1595681005","product_id":100025201,"comment_content":"作为一个iOS开发者，从来没想过iOS的系统设计原来有这么多考量。谢谢，学到了很多。","like_count":0},{"had_liked":false,"id":113556,"user_name":"Hungry","can_delete":false,"product_type":"c1","uid":1222089,"ip_address":"","ucode":"EDF8B264F155C2","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/c9/eb389183.jpg","comment_is_top":false,"comment_ctime":1563076741,"is_pvip":false,"replies":[{"id":"41380","content":"进程间可用么？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1563095286,"ip_address":"","comment_id":113556,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1563076741","product_id":100025201,"comment_content":"老师，iOS也是有信号量dispatch_semaphone，pthread 锁，条件变量，以及 mmap 的，毕竟iOS也是BSD的一类，用kqueue的","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458276,"discussion_content":"进程间可用么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563095286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1222089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/c9/eb389183.jpg","nickname":"Hungry","note":"","ucode":"EDF8B264F155C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296634,"discussion_content":"iOS只有一个app进程呀，多进程的场景不会存在频繁交互的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596610541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104461,"user_name":"Delia","can_delete":false,"product_type":"c1","uid":1442969,"ip_address":"","ucode":"C8AB6171FBC3B5","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/99/2d804b8d.jpg","comment_is_top":false,"comment_ctime":1560758666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560758666","product_id":100025201,"comment_content":"我们在Linux上做进程间通信的时候也选择的共享内存机制，速度确实很快。今天学了这节课，感觉思路又拓宽很多尤其是讲IOS的进程间通信，大开眼界。","like_count":0},{"had_liked":false,"id":103354,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1560418845,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560418845","product_id":100025201,"comment_content":"进程间的这个系列紧赶慢赶看完了，消化还不够。同步、互斥里面的东西 还挺多的，虽然之前知道iOS的一些沙箱，没想到这么给力","like_count":0},{"had_liked":false,"id":99148,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1559170789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559170789","product_id":100025201,"comment_content":"很赞啊（从架构的角度看操作系统设计","like_count":0},{"had_liked":false,"id":99040,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1031113,"ip_address":"","ucode":"5948D359734193","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/c9/37924ad4.jpg","comment_is_top":false,"comment_ctime":1559134358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559134358","product_id":100025201,"comment_content":"透彻","like_count":0},{"had_liked":false,"id":98717,"user_name":"涵","can_delete":false,"product_type":"c1","uid":1502742,"ip_address":"","ucode":"BB8575DB13F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/16/742956ac.jpg","comment_is_top":false,"comment_ctime":1559076184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559076184","product_id":100025201,"comment_content":"这节课内容大开眼界，之前没怎么用过iOS系统，原来这么不同。很有收获，谢谢老师。","like_count":0},{"had_liked":false,"id":98685,"user_name":"张百音","can_delete":false,"product_type":"c1","uid":1106368,"ip_address":"","ucode":"66BB2CAD5E6E29","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/c0/32858aa9.jpg","comment_is_top":false,"comment_ctime":1559057532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559057532","product_id":100025201,"comment_content":"一刷感谢大佬！","like_count":0},{"had_liked":false,"id":98416,"user_name":"pawhrmyki","can_delete":false,"product_type":"c1","uid":1480332,"ip_address":"","ucode":"CDCF44F2E43937","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ermRibwXSt1icBvH3IO1JfiaqakIcxxAP4zSkicewogKVWCFicb0NVc7tF3xSVMJwE3lBg2gH4r7u6sGtw/132","comment_is_top":false,"comment_ctime":1559001834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559001834","product_id":100025201,"comment_content":"没用过ios的进程间通信，但是linux的进程间通信真是，唉。前久在设计一个程序的时候，把对外通信的部分单独设置为一个进程，好让两个模块耦合度降低，试了好几种方法，觉得都不太好，最后找到一个叫rcf（远程调用框架）的库，用起来感觉不错，需要自己写的代码也不多，有需要的小伙伴可以试试","like_count":0}]}