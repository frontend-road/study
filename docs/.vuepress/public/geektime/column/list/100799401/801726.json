{"id":801726,"title":"02｜MySQL账号和权限管理","content":"<p>你好，我是俊达。</p><p>在上一讲中，我们学习了安装MySQL的几种方法。MySQL安装好之后，系统默认建好了root@localhost用户，这个用户只能在MySQL服务器上登录本地的数据库。root账号拥有数据库所有的权限，可以执行任何操作，因此我建议应用程序不要使用root账号访问数据库，这存在很大的安全隐患。</p><p>我们需要根据各个业务方的访问需求，分别创建数据库用户，并授予合理的权限。在这一讲中，我们来学习如何创建和管理数据库用户，以及如何给用户授权。</p><h2>用户管理</h2><p>我们使用create user命令创建用户，你可以看一下命令的基本格式。</p><pre><code class=\"language-plain\">create user 'username'@'host' identified by 'complex_password';\n</code></pre><p>在MySQL中，一个用户由两部分组成，username是用户名，host是允许登录数据库的客户端的主机名或IP。host中可以使用通配符，使用百分号 <code>\"%\"</code> 匹配任意字符串，使用下划线 <code>\"_\"</code> 匹配一个字符。比如我们下面创建的这个用户，可以在任何地方登录数据库。</p><pre><code class=\"language-plain\">create user 'u01'@'%' identified by 'somepassword';\n</code></pre><p>创建账号时，也可以使用IP地址段来指定客户端IP范围，比如下面创建的u02用户可以在172.16这个网段内访问数据库。</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">create user 'u02'@'172.16.0.0/16' identified by 'somepassword';\n</code></pre><h3>用户条目的优先级</h3><p>MySQL允许创建username相同，但host不同的用户。</p><pre><code class=\"language-plain\">create user 'u03'@'%' identified by 'somepassword';\ncreate user 'u03'@'172.16.0.0/16' identified by 'somepassword';\ncreate user 'u03'@'mysql02' identified by 'somepassword';\ncreate user 'u03'@'172.16.121.%' identified by 'somepassword';\ncreate user 'u03'@'172.16.121.237' identified by 'somepassword';\n</code></pre><p>我们上面创建了5个用户，虽然用户名都是u03，但这是5个不同的用户，可以分别给这5个用户设置不同的密码、授予不同的权限。你可以在mysql.user表中查询到这些用户。</p><pre><code class=\"language-plain\">mysql&gt; select user,host from mysql.user where user='u03';\n+------+----------------+\n| user | host           |\n+------+----------------+\n| u03  | %              |\n| u03  | 172.16.0.0/16  |\n| u03  | 172.16.121.%   |\n| u03  | 172.16.121.237 |\n| u03  | mysql02        |\n+------+----------------+\n5 rows in set (0.00 sec)\n</code></pre><p>那么问题来了，当使用u03这个用户名登录数据库时，服务端应该使用哪条用户信息来验证用户密码呢？与之相关的还有另外一个问题，使用u03登录数据库后，我怎么知道当前登录的是哪个u03？我们先来回答后面这个问题，登录数据库之后，可以用函数current_user来获取当前的登录用户，或者用show grants命令也能看到当前的登录用户。</p><pre><code class=\"language-plain\"># mysql -u u03 -psomepassword -h172.16.121.234\n\nmysql&gt; select current_user();\n+-------------------+\n| current_user()    |\n+-------------------+\n| u03@172.16.0.0/16 |\n+-------------------+\n1 row in set (0.01 sec)\n\n\nmysql&gt; show grants;\n+---------------------------------------------+\n| Grants for u03@172.16.0.0/16                |\n+---------------------------------------------+\n| GRANT USAGE ON *.* TO `u03`@`172.16.0.0/16` |\n+---------------------------------------------+\n1 row in set (0.00 sec)\n</code></pre><p>至于前面那个问题，用户表中的每一行记录，都有相应的优先级。MySQL会把所有的用户记录按优先级从高到低的顺序排列，缓存到内存里。服务端接收到客户端发起的连接请求后，从请求包中解析出用户名和密码信息，从tcp连接信息中得到客户端的IP，然后依次匹配缓存的用户记录列表中的条目。</p><p>先匹配host字段，如果host匹配，再匹配用户名，用户名也匹配后，再验证密码是否正确。如果匹配不到对应的用户记录，或密码不正确，或存在其它问题，服务端会把错误信息发送给客户端。用户验证成功后，客户端就可以开始执行各类命令或SQL，此时服务端会验证用户是否有权限执行这些命令和SQL。</p><p>mysql.user表中用户条目的优先级如何确定呢？</p><p>基本的规则是这样的：</p><ol>\n<li>IP条目的优先级最高。IP条目中没有通配符，精确的IP和IP地址段都是IP条目。</li>\n<li>精确IP的优先级比IP地址段的优先级高。</li>\n<li>对于2个IP地址段，前缀长的优先级更高。比如172.16.121.0/24优先级比172.16.0.0/16高。</li>\n<li>不使用通配符的条目比使用通配符的条目优先级高。</li>\n<li>对于都使用了通配符的条目，则根据第一个通配符在host字段中出现的位置来判断优先级。通配符出现的位置越靠前，优先级越低。比如 <code>'%'</code> 的优先级最低，<code>'abc%'</code> 的优先级比 <code>'abcd%'</code> 低。</li>\n</ol><p>在我们前面的这个例子中，u03的5条用户条目按优先级从高到低排序后是这样的。</p><pre><code class=\"language-plain\">'u03'@'172.16.121.237'\n'u03'@'172.16.0.0/16'\n'u03'@'mysql02'\n'u03'@'172.16.121.%'\n'u03'@'%'\n</code></pre><p>我们可以通过一些例子来进行验证。</p><ul>\n<li>客户端地址为172.16.121.236，匹配到的用户条目为 <code>'u03'@'172.16.0.0/16'</code>。</li>\n</ul><pre><code class=\"language-plain\">[root@172-16-121-236 ~]# mysql -u u03 -psomepassword -h172.16.121.234 -e 'select current_user()'\n+-------------------+\n| current_user()    |\n+-------------------+\n| u03@172.16.0.0/16 |\n+-------------------+\n</code></pre><ul>\n<li>客户端地址为172.16.121.237，匹配到的用户条目为 <code>'u03'@'172.16.121.237'</code>。</li>\n</ul><pre><code class=\"language-plain\">[root@172-16-121-237 ~]# mysql -u u03 -psomepassword -h172.16.121.234 -e 'select current_user()'\n+--------------------+\n| current_user()     |\n+--------------------+\n| u03@172.16.121.237 |\n+--------------------+\n</code></pre><ul>\n<li>客户端地址为192.168.x.x，匹配到的用户条目为 <code>'u03'@'%'</code>。</li>\n</ul><pre><code class=\"language-plain\">mysql -u u03 -psomepassword -h172.16.121.234 -e 'select current_user()'\nmysql: [Warning] Using a password on the command line interface can be insecure.\n+----------------+\n| current_user() |\n+----------------+\n| u03@%          |\n+----------------+\n</code></pre><p>前面我们提到了，服务端会根据客户端的IP地址来查找用户条目。MySQL怎么判断某个客户端跟某个主机名相匹配呢？服务端需要将客户端的IP反解析成主机名，然后才能进行判断。比如MySQL服务器的/etc/hosts有下面这条信息。</p><pre><code class=\"language-plain\">## /etc/hosts\n172.16.121.236 mysql02\n</code></pre><p>那么从172.16.121.236连接数据库时，客户端主机名就会解析为mysql02，使用下面这个方法就可以清楚地看到这一点。我们故意使用了错误的密码，服务端会将错误消息发送给客户端。请注意下面例子里错误消息中用户名的格式。</p><pre><code class=\"language-plain\">[root@172-16-121-236 ~]#  mysql -u u03 -pwrongpassword -h172.16.121.234\nERROR 1045 (28000): Access denied for user 'u03'@'mysql02' (using password: YES)\n\n\n$ mysql -u u03 -pwrongpassword -h172.16.121.234 -e 'select current_user()'\nERROR 1045 (28000): Access denied for user 'u03'@'192.168.113.13' (using password: YES)\n</code></pre><p>在真实环境中，我们经常会设置skip_name_resolve，这样MySQL就只会根据IP来验证用户，不需要再将IP反解析成主机名。</p><pre><code class=\"language-plain\">## my.cnf\nskip_name_resolve\n</code></pre><p>在MySQL 5.6和更早的版本中，使用mysql_install_db来初始化数据库。初始化脚本执行时，会创建一个用户名为空的无密码用户，这会引起一个问题。我们通过一个例子来说明。我们先创建一个用户名为空的用户，模拟早期MySQL版本的行为。</p><pre><code class=\"language-plain\">mysql&gt; create user ''@'localhost' ;\nQuery OK, 0 rows affected (1.26 sec)\n</code></pre><p>然后在数据库服务器本地使用一个正常的账号登录数据库，你会发现无法登录，报密码错误。</p><pre><code class=\"language-plain\">[root@172-16-121-234 ~]# mysql -u u03 -psomepassword -h 127.0.0.1\nERROR 1045 (28000): Access denied for user 'u03'@'localhost' (using password: YES)\n</code></pre><p>但实际上，这并不是密码问题，而是在本地登录时，使用了 <code>''@'localhost'</code> 这个条目来进行用户认证。下面这个测试案例就能说明这一点。</p><pre><code class=\"language-plain\">[root@172-16-121-234 ~]# mysql -u u03 -h 127.0.0.1 -e 'select current_user()'\n+----------------+\n| current_user() |\n+----------------+\n| @localhost     |\n+----------------+\n</code></pre><p>这个问题的解决方法一般就是<strong>删除用户名为空的用户</strong>。</p><h3>密码验证组件</h3><p>不要给MySQL用户设置过于简单的密码，可以通过密码验证组件来强制密码的复杂度。使用RPM安装的MySQL默认就已经开启了密码验证组件。如果你使用了二进制安装，可以用命令INSTALL COMPONENT来启用密码验证。</p><pre><code class=\"language-plain\">mysql&gt; INSTALL COMPONENT 'file://component_validate_password';\nQuery OK, 0 rows affected (1.03 sec)\n</code></pre><p>开启密码验证组件后，你就无法创建密码过于简单的用户了。</p><pre><code class=\"language-plain\">mysql&gt; create user 'ux'@'%' identified by 'simplepassword';\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n</code></pre><p>需要在密码中使用数字、大小写字母和特殊字符，而且密码要超过一定的长度。</p><pre><code class=\"language-plain\">mysql&gt; create user 'ux'@'%' identified by 'Complex-Password-2024';\nQuery OK, 0 rows affected (1.04 sec)\n</code></pre><p>密码验证组件有几个参数可以配置，你可以根据自己的需求适当调整这些参数。</p><pre><code class=\"language-plain\">mysql&gt; show variables like 'validate_password%';\n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| validate_password.check_user_name    | ON     |\n| validate_password.dictionary_file    |        |\n| validate_password.length             | 8      |\n| validate_password.mixed_case_count   | 1      |\n| validate_password.number_count       | 1      |\n| validate_password.policy             | MEDIUM |\n| validate_password.special_char_count | 1      |\n+--------------------------------------+--------+\n</code></pre><h3>忘记密码处理</h3><p>上一讲结束时，我留了一个思考题，root密码忘记了怎么处理？我们可以使用参数skip-grant-tables来解决这个问题。先停止MySQL，由于已经忘记了管理员密码，无法使用shutdown命令正常关闭MySQL，可以直接kill mysqld进程。</p><p>然后启动MySQL，加上skip-grant-tables选项。</p><pre><code class=\"language-plain\">/usr/local/mysql/bin/mysqld_safe \\\n    --defaults-file=/data/mysql01/my.cnf \\\n    --skip-grant-tables \\\n    --skip-networking  &amp;\n</code></pre><p>加上skip-grant-tables选项后，不需要密码就能登录数据库。此时MySQL也不会验证权限。</p><pre><code class=\"language-plain\"># mysql -uroot -S /data/mysql01/run/mysql.sock\n</code></pre><p>登录后，需要先执行flush privileges命令，加载用户和权限相关的表，再执行alter user命令修改密码，然后重新启动MySQL，就可以正常访问数据库了。</p><pre><code class=\"language-plain\">mysql&gt; flush privileges;\nQuery OK, 0 rows affected (0.55 sec)\n\nmysql&gt; alter user 'root'@'localhost' identified by 'newpassword';\nQuery OK, 0 rows affected (0.93 sec)\n</code></pre><h2>权限管理</h2><p>新创建的用户只有Usage权限，只能执行一些最基本的操作。用户需要授权后，才能执行其他的一些操作，比如建库建表，读写数据。在MySQL中使用grant语句进行授权。grant语句的基本语法如下：</p><pre><code class=\"language-plain\">grant privileges\non something\nto 'user'@'host';\n</code></pre><p>早期版本中，如果被授权的用户不存在，那么在执行grant语句时，会自动创建这个用户。在MySQL 5.7中，SQL_MODE中加入了NO_AUTO_CREATE_USER选项，用来避免这种grant语句自动创建用户的行为。到了MySQL 8.0，已经不再支持NO_AUTO_CREATE_USER选项了。</p><p>执行grant时，被授权的用户必须已经存在，否则会报错。</p><pre><code class=\"language-plain\">mysql&gt; grant select on *.* to 'readonly'@'%';\nERROR 1410 (42000): You are not allowed to create a user with GRANT\n</code></pre><p>在MySQL中，有的权限是全局的，这些权限跟某个具体的数据库没有关系，授权时需要使用 <code>on *.*</code>，比如下面这个例子给用户u03授权了查看process列表的权限。</p><pre><code class=\"language-plain\">grant process on *.* to 'u03'@'%';\n</code></pre><p>有的权限跟数据库或数据库中的对象相关，授权时可以指定具体的数据库或数据库对象。下面这个grant语句给用户u03授权了数据库db01的DDL权限。</p><pre><code class=\"language-plain\">grant create,index,alter,drop on db01.* to 'u03'@'%';\n</code></pre><p>授权后，u03可以创建库名为db01的数据库，并在这个库中创建表、修改表结构、DROP表，但是不能读写表中的数据。</p><pre><code class=\"language-plain\">mysql&gt; show grants;\n+----------------------------------------------------+\n| Grants for u03@%                                   |\n+----------------------------------------------------+\n| GRANT USAGE ON *.* TO `u03`@`%`                    |\n| GRANT CREATE, INDEX, DROP, ALTER ON `db01`.* TO `u03`@`%` |\n+----------------------------------------------------+\n\n## 可以创建库名为db01的数据库\nmysql&gt; create database db01;\nQuery OK, 1 row affected (2.91 sec)\n\n## 但是不能创建其他数据库\nmysql&gt; create database db02;\nERROR 1044 (42000): Access denied for user 'u03'@'%' to database 'db02'\n\n\n## 可以创建表，修改表结构，DROP表，但是不能读写表中的数据\nmysql&gt; create table t1(a int, b int);\nQuery OK, 0 rows affected (11.54 sec)\n\nmysql&gt; alter table t1 add c int;\nQuery OK, 0 rows affected (4.98 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt; insert into t1 values(1,2,3);\nERROR 1142 (42000): INSERT command denied to user 'u03'@'192.168.113.13' for table 't1'\n\nmysql&gt; select * from t1;\nERROR 1142 (42000): SELECT command denied to user 'u03'@'192.168.113.13' for table 't1'\n</code></pre><p>需要给账号添加相应的权限后，才能访问表中的数据。</p><pre><code class=\"language-plain\">mysql&gt; grant select,insert,update,delete on db01.* to 'u03'@'%';\nQuery OK, 0 rows affected (2.31 sec) \n</code></pre><pre><code class=\"language-plain\">mysql&gt; show grants;\n+-------------------------------------------------------------------------------------------+\n| Grants for u03@%                                                                          |\n+-------------------------------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u03`@`%`                                                           |\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db01`.* TO `u03`@`%` |\n+-------------------------------------------------------------------------------------------+\n2 rows in set (0.01 sec)\n\nmysql&gt; insert into t1 values(1,2,3);\nQuery OK, 1 row affected (0.28 sec)\n\nmysql&gt; select * from t1;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    1 |    2 |    3 |\n+------+------+------+\n1 row in set (0.01 sec)\n</code></pre><p>grant语句中，授权对象（库名和对象名）也可以使用通配符，使用 <code>\"%\"</code> 匹配任意字符，使用 <code>\"_\"</code> 匹配一个字符。</p><pre><code class=\"language-plain\">grant create,drop,alter,index on `db__`.* to 'u03'@'%';\n</code></pre><p>授权后，u03用户可以创建库名以db开头，并且库名长度是4个字节的数据库。</p><pre><code class=\"language-plain\">mysql&gt; create database db_1;\nQuery OK, 1 row affected (1.89 sec)\n\nmysql&gt; create database db_2;\nQuery OK, 1 row affected (0.12 sec)\n\nmysql&gt; create database db_10;\nERROR 1044 (42000): Access denied for user 'u03'@'%' to database 'db_10'\n</code></pre><p>如果库名中有下划线 <code>\"_\"</code>，可以在grant时使用转义符对通配符 <code>\"_\"</code> 进行转义。下面的SQL把db_1库的读写权限赋给了u03用户。</p><pre><code class=\"language-plain\">mysql&gt; grant select,insert,update,delete on `db\\_1`.* to 'u03'@'%';\nQuery OK, 0 rows affected (0.91 sec)\n</code></pre><p>我们先使用show grants命令查看u03用户当前的权限。</p><pre><code class=\"language-plain\">mysql&gt; show grants;\n+----------------------------------------------------------------+\n| Grants for u03@%                                               |\n+----------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u03`@`%`                                |\n| GRANT SELECT, INSERT, UPDATE, DELETE ON `db01`.* TO `u03`@`%`  |\n| GRANT SELECT, INSERT, UPDATE, DELETE ON `db\\_1`.* TO `u03`@`%` |\n| GRANT CREATE, DROP, INDEX, ALTER ON `db__`.* TO `u03`@`%`      |\n+----------------------------------------------------------------+\n</code></pre><p>从上面的输出可以看出，u03用户有数据库db01、db_1的DDL权限和数据读写权限，有库名以db开头并且长度为4个字节的数据库的DDL权限。</p><p>但是在下面这个测试中，我们可以看到，在db_1库中执行DDL时，报权限不足。</p><pre><code class=\"language-plain\">mysql&gt; use db_2;\nDatabase changed\n\nmysql&gt; create table t1(a int);\nQuery OK, 0 rows affected (14.64 sec)\n\nmysql&gt; use db_1;\nDatabase changed\n\nmysql&gt; create table t1(a int);\nERROR 1142 (42000): CREATE command denied to user 'u03'@'192.168.113.13' for table 't1'\n</code></pre><p>为什么会出现这样的问题呢？大概是因为MySQL只使用了库名为 <code>'db\\_1'</code> 的这条授权记录。从权限表mysql.db中可以看到，db_1这个库没有create权限。</p><pre><code class=\"language-plain\">mysql&gt; select user,host, db, create_priv from mysql.db where user='u03';\n+------+------+-------+-------------+\n| user | host | db    | create_priv |\n+------+------+-------+-------------+\n| u03  | %    | db01  | N           |\n| u03  | %    | db\\_1 | N           |\n| u03  | %    | db__  | Y           |\n+------+------+-------+-------------+\n3 rows in set (0.00 sec)\n</code></pre><p>为了解决这个问题，可以将数据库db_1的DDL的权限也授予u03。</p><pre><code class=\"language-plain\">mysql&gt; grant create,alter,index,drop on `db\\_1`.* to 'u03'@'%';\nQuery OK, 0 rows affected (0.55 sec)\n</code></pre><p>重新授权后，用户u03就可以在数据库db_1中执行DDL操作了。</p><h3>MySQL中有哪些权限</h3><p>我们使用下面这个表格对MySQL中的一些权限做一个简单的介绍。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/ac/e914049f835f8c8563db560b104d78ac.jpg?wh=1920x2848\" alt=\"图片\"></p><h3>最小权限原则</h3><p>管理数据库用户的权限时，要遵循最小权限原则。root用户要交给少数管理人员管理，其他任何人不能使用root用户。有的公司出于安全考虑，还会删除系统自带的root用户，并单独创建一个超级管理员用户。给不同的业务方分配不同的用户，并按业务的实际需求授予最小的权限。</p><p>举例来说，如果业务方的需求是同步数据库中的数据，只需要对库表授予SELECT权限。对于一般的应用程序，需要读写数据，授予SELECT、INSERT、UPDATE、DELETE、EXECUTE这些权限就可以了。对于DBA或运维人员，需要执行数据库变更，可以授予CREATE、ALTER、DROP、INDEX等DDL权限，以及PROCESS、SUPER等管理权限。</p><p>另外需要注意的一点，给不同环境的数据库创建不同的用户。开发环境和生产环境的用户，不要使用相同的密码。不同的业务方共用同一个用户、授予用户超出需要的权限、开发环境和生产环境使用相同的用户名和密码，都会给数据库安全带来极大的风险。</p><p>有时候为了方便，你可能会把all privileges授予一个用户，然后所有业务方都使用这个用户来访问数据库。这是非常危险的，千万不要这么做。</p><p>我遇到过很多数据库权限设置不当引起的故障。比如开发人员使用图形化管理工具连接到正式环境的数据库，然后在界面上把整个库都删掉了。数据分析人员使用第三方程序库连接生产环境的数据库做数据分析，但是由于配置不当，第三方程序库在关闭数据库连接时将表DROP了。DBA在导入数据时，本来应该到测试环境操作，但是错误地将导入命令贴到了生产环境的终端下执行，而且生产环境和测试环境的用户名和密码还都是一样的，然后在导入数据时将生产环境的表都先DROP掉了。</p><p>这些场景下，如果我们遵循了最小权限原则，至少可以避免一部分重大故障。如果你使用了只读账号，即使错误地执行了DROP命令，但是由于用户权限不足，数据库和表并不会被真正DROP。如果生产环境和开发环境设置了不同的用户名和密码，即使错误地将命令贴到了生产环境，因为密码不对，也不会对生产环境造成影响。</p><h2>总结</h2><p>这一讲我们学习了MySQL用户和权限管理。MySQL的用户由用户名和主机名两部分组成。用户名相同，但主机名不同的多个用户，实际上是完全独立的用户，为了便于管理，要尽量避免创建这样的用户。如果你要限制数据库只允许某些IP访问，可以考虑从网络防火墙层面来限制。用户密码应该要有一定的复杂度，可以启用密码验证组件，防止给数据库用户设置过于简单的密码。授权时，要遵循<strong>最小权限原则</strong>，给用户授予正常业务需求之外的权限会带来额外的安全风险。</p><h2>思考题</h2><p>一般情况下，我们都建议将数据库部署到内网，因为将数据库暴露到公网上有比较大的安全风险。但是你的公司有一个特殊的业务，就是需要通过公网访问MySQL数据库。请你评估下将数据库放到公网有哪些风险？你应使用哪些方法来尽量保证数据库和数据的安全？</p><p>期待你的思考，欢迎在留言区中与我交流。如果今天的课程让你有所收获，也欢迎转发给有需要的朋友。我们下节课再见！</p>","comments":[{"had_liked":false,"id":393564,"user_name":"Geek_0126","can_delete":false,"product_type":"c1","uid":3952196,"ip_address":"浙江","ucode":"2916F7FB3F6D71","user_header":"https://static001.geekbang.org/account/avatar/00/3c/4e/44/49b29792.jpg","comment_is_top":false,"comment_ctime":1724222313,"is_pvip":false,"replies":[{"id":142919,"content":"总结很到位👍👍","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724287504,"ip_address":"浙江","comment_id":393564,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"1.网络防火墙做好端口放行策略。\n2.使用单独的账号，并给予最小权限\n3.传输加密","like_count":3,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650035,"discussion_content":"总结很到位👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724287504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393591,"user_name":"binzhang","can_delete":false,"product_type":"c1","uid":1647189,"ip_address":"美国","ucode":"F2670F2EA24FAD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM59PTNiaDASVicbVaeWBU1WKmOgyHcqVtl85nDwAqDicib1EUKE2RRoU0x0vZctZO4kbPDUTTke8qKfAw/132","comment_is_top":false,"comment_ctime":1724257650,"is_pvip":false,"replies":[{"id":142925,"content":"Thank you","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1724310897,"ip_address":"北京","comment_id":393591,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"This class not only talk about mysql knowledge ,but it also mention lots of best practices in production daily operation job. It&#39;s fantastic. ","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650057,"discussion_content":"Thank you","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724310897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393557,"user_name":"123","can_delete":false,"product_type":"c1","uid":2662872,"ip_address":"浙江","ucode":"5A343B568B9524","user_header":"https://static001.geekbang.org/account/avatar/00/28/a1/d8/42252c48.jpg","comment_is_top":false,"comment_ctime":1724207165,"is_pvip":false,"replies":[{"id":142917,"content":"我想这里面的原理是类似的。在判断用户对某个数据库的权限时，从mysql.db表检查，如果这个表里有多条记录都匹配某个db名，会使用匹配度最高的那条权限记录。所以授权时，授权对象的名称也要尽量保持一致。\n\n比如 用户ut1有这样的权限：\nmysql&gt; show grants;\n+---------------------------------------+\n| Grants for ut1@%                      |\n+---------------------------------------+\n| GRANT USAGE ON *.* TO `ut1`@`%`       |\n| GRANT CREATE ON `dbxx`.* TO `ut1`@`%` |\n| GRANT SELECT ON `db__`.* TO `ut1`@`%` |\n+---------------------------------------+\n\n访问dbxx时，使用dbxx这条权限记录。访问dbyy时，使用`db__`这条权限记录。因此就有这样的情况出现：\n\nmysql&gt; select * from dbxx.t1;\nERROR 1142 (42000): SELECT command denied to user \n &#39;ut1&#39;@&#39;localhost&#39; for table &#39;t1&#39;\n\nmysql&gt; select * from dbzz.t1;\nEmpty set (0.00 sec)","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724287360,"ip_address":"浙江","comment_id":393557,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师，权限赋值哪一块是否和用户登录的逻辑是一致（为什么会出现这样的问题呢？大概是因为 MySQL 只使用了库名为 &#39;db\\_1&#39; 的这条授权记录。），具备一定的优先级，若存在指定表就不会去匹配通配符？\n+-------------------------------------------------------------------------------------------+\n| Grants for u03@%                                                                          |\n+-------------------------------------------------------------------------------------------+\n| GRANT PROCESS ON *.* TO `u03`@`%`                                                         |\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db01`.* TO `u03`@`%` |\n| GRANT SELECT, INSERT, UPDATE, DELETE ON `db\\_1`.* TO `u03`@`%`                            |\n| GRANT CREATE, DROP, INDEX, ALTER ON `db__`.* TO `u03`@`%`                                 |\n+-------------------------------------------------------------------------------------------+\n\n对u03赋权DDL：grant create,alter,index,drop on `db\\_1`.* to &#39;u03&#39;@&#39;%&#39;;\n+--------------------------------------------------------------------------------------------+\n| Grants for u03@%                                                                           |\n+--------------------------------------------------------------------------------------------+\n| GRANT PROCESS ON *.* TO `u03`@`%`                                                          |\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db01`.* TO `u03`@`%`  |\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db\\_1`.* TO `u03`@`%` |\n| GRANT CREATE, DROP, INDEX, ALTER ON `db__`.* TO `u03`@`%`                                  |\n+--------------------------------------------------------------------------------------------+\n\n因为对于同一个表，DDL和DML是在同一行，匹配到对应表的数据项后就直接返回了","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650033,"discussion_content":"我想这里面的原理是类似的。在判断用户对某个数据库的权限时，从mysql.db表检查，如果这个表里有多条记录都匹配某个db名，会使用匹配度最高的那条权限记录。所以授权时，授权对象的名称也要尽量保持一致。\n\n比如 用户ut1有这样的权限：\nmysql&gt; show grants;\n+---------------------------------------+\n| Grants for ut1@%                      |\n+---------------------------------------+\n| GRANT USAGE ON *.* TO `ut1`@`%`       |\n| GRANT CREATE ON `dbxx`.* TO `ut1`@`%` |\n| GRANT SELECT ON `db__`.* TO `ut1`@`%` |\n+---------------------------------------+\n\n访问dbxx时，使用dbxx这条权限记录。访问dbyy时，使用`db__`这条权限记录。因此就有这样的情况出现：\n\nmysql&gt; select * from dbxx.t1;\nERROR 1142 (42000): SELECT command denied to user \n &#39;ut1&#39;@&#39;localhost&#39; for table &#39;t1&#39;\n\nmysql&gt; select * from dbzz.t1;\nEmpty set (0.00 sec)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724287360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393548,"user_name":"Amosヾ","can_delete":false,"product_type":"c1","uid":1567014,"ip_address":"广东","ucode":"833F6FCB4042AD","user_header":"https://static001.geekbang.org/account/avatar/00/17/e9/26/472e16e4.jpg","comment_is_top":false,"comment_ctime":1724171613,"is_pvip":true,"replies":[{"id":142903,"content":"这两点确实是数据库放公网最大的风险。\n不过对于风险一，我个人更倾向用网络访问策略、防火墙等方式来限制。一是如果用mysql内部机制来限制登录主机，如果白名单长了，需要创建和维护很多个用户。二是端口如果在外部能访问，黑客可能会使用你意想不到的各种方式来攻击数据库。\n\n风险二用SSL 加密传输来解决。还可以限制用户必须提供满足条件的证书才能访问数据库。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724205936,"ip_address":"浙江","comment_id":393548,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"非专业回答：\n风险一：任意来源访问，数据库被爆破登录\n规避方案：授权尽量不使用 %，越精确越好\n风险二：数据传输过程中被拦截捕获\n规范方案：SSL 加密传输","like_count":1,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649969,"discussion_content":"这两点确实是数据库放公网最大的风险。\n不过对于风险一，我个人更倾向用网络访问策略、防火墙等方式来限制。一是如果用mysql内部机制来限制登录主机，如果白名单长了，需要创建和维护很多个用户。二是端口如果在外部能访问，黑客可能会使用你意想不到的各种方式来攻击数据库。\n\n风险二用SSL 加密传输来解决。还可以限制用户必须提供满足条件的证书才能访问数据库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724205936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395502,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"湖北","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1730986804,"is_pvip":true,"replies":[{"id":143591,"content":"这个参数，如果不配置，默认就是监听所有地址。\n如果配置成127.0.0.1，就不能远程访问了。\n\n关于权限控制，建议在数据库账号和网络层面一起管控。\n账号层面要遵循最小权限原则，给不同的业务分配不同的账号。\n网络层面，通过防火墙等机制，只允许特定范围的IP访问数据库。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1731313324,"ip_address":"浙江","comment_id":395502,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"老师，请问在配置文件中配置bind-address = 0.0.0.0是必须的吧，否则就无法远程登录数据库？关于权限的控制，要在账号层面以及网络防火墙层面？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653618,"discussion_content":"这个参数，如果不配置，默认就是监听所有地址。\n如果配置成127.0.0.1，就不能远程访问了。\n\n关于权限控制，建议在数据库账号和网络层面一起管控。\n账号层面要遵循最小权限原则，给不同的业务分配不同的账号。\n网络层面，通过防火墙等机制，只允许特定范围的IP访问数据库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731313324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393831,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"湖北","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1725005764,"is_pvip":true,"replies":[{"id":142997,"content":"-e &#39;select current_user()&#39; 就是登陆数据库后执行这个SQL。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1725069434,"ip_address":"浙江","comment_id":393831,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"另外加的这个-e &#39;select current_user()&#39;是由什么特殊意义吗？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650472,"discussion_content":"-e &#39;select current_user()&#39; 就是登陆数据库后执行这个SQL。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725069434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2759242,"avatar":"","nickname":"Geek_8bdefc","note":"","ucode":"2875C7A0432987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650462,"discussion_content":"查看当前的登录用户，相当于用mysql命令登录数据后，执行:select current_user() 查询语句。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725029930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393830,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"湖北","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1725005715,"is_pvip":true,"replies":[{"id":142996,"content":"是的，就是这个意思。服务端如果能反解析出客户端的主机名，就显示username@hostname，不然就显示username@ip。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1725069337,"ip_address":"浙江","comment_id":393830,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"[root@172-16-121-236 ~]# mysql -u u03 -pwrongpassword -h172.16.121.234ERROR 1045 (28000): Access denied for user &#39;u03&#39;@&#39;mysql02&#39; (using password: YES)$ mysql -u u03 -pwrongpassword -h172.16.121.234 -e &#39;select current_user()&#39;ERROR 1045 (28000): Access denied for user &#39;u03&#39;@&#39;192.168.113.13&#39; (using password: YES)\n请问老师这两段SQL的对比是什么意思啊,意思是如果在服务器上存在172.16.121.236 mysql02的映射关系，返回报错信息里面的客户端IP会修改为主机名，当客户端IP是192.168.113.13时，由于映射关系不存在，所以报错信息里面返回客户端IP？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650471,"discussion_content":"是的，就是这个意思。服务端如果能反解析出客户端的主机名，就显示username@hostname，不然就显示username@ip。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725069338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393624,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"北京","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/0829cbdc.jpg","comment_is_top":false,"comment_ctime":1724336418,"is_pvip":false,"replies":[{"id":142933,"content":"问题1：我建议可以两种方式都熟悉一下。docker也是运行数据库的一种方式。\n\n问题2：\na) 云数据库把基础运维都产化了，实例安装配置、备份恢复、高可用、读写分离这些都经过了大量客户的验证。\nb) RDS在底层硬件上一般也会有一些标准要求，性能和稳定性上有保障。\nc) 各个云产商对数据库内核一般都会在开源版本的基础上，做一些功能增强、bug修复。\n\n自己搭建数据库环境的话，有更多的自主性。另外从学习的角度，还是要亲手从0开始，把整套环境搭建起来。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724375805,"ip_address":"浙江","comment_id":393624,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100799401,"comment_content":"俊达老师你好，我有几个问题想请教一下\r\n1. 我自己想搭建一个mysql的实验环境，我是用dokcer的方式来启动好，还是像您这章讲的一样自己去手把手安装一个好？如果未来我想搭建mysql的主从集群，配置读写分离这样的实验环境，用哪个会更方便一点呢？对于学习和实践来说，您更推荐哪种呢。\r\n2. 还有就是现在云数据库很流行了，自己本地部署的库和云数据库除了硬件上，其他方面的差别大概有哪些呢？我的理解是云数据库会把 redolog binlog 各种 buff 的以及其他配置设置的更合理，让客户专注于自己的业务逻辑，除此之外，还有那些其他优势呢？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650106,"discussion_content":"问题1：我建议可以两种方式都熟悉一下。docker也是运行数据库的一种方式。\n\n问题2：\na) 云数据库把基础运维都产化了，实例安装配置、备份恢复、高可用、读写分离这些都经过了大量客户的验证。\nb) RDS在底层硬件上一般也会有一些标准要求，性能和稳定性上有保障。\nc) 各个云产商对数据库内核一般都会在开源版本的基础上，做一些功能增强、bug修复。\n\n自己搭建数据库环境的话，有更多的自主性。另外从学习的角度，还是要亲手从0开始，把整套环境搭建起来。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1724375805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1582134,"avatar":"https://static001.geekbang.org/account/avatar/00/18/24/36/0829cbdc.jpg","nickname":"TheOne","note":"","ucode":"2A359780156A8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":650146,"discussion_content":"好的，感谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724425655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":650106,"ip_address":"北京","group_id":0},"score":650146,"extra":""}]}]},{"had_liked":false,"id":393549,"user_name":"美妙的代码","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"四川","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1724173210,"is_pvip":true,"replies":[{"id":142904,"content":"1. 被攻击。\n2. 数据被窃取。\n如果网络传输没加密，客户端和数据库之间的TCP流量如果被抓取了，可以解析出客户端执行的SQL语句、服务端返回的数据。","user_name":"作者回复","user_name_real":"编辑","uid":3898827,"ctime":1724206204,"ip_address":"浙江","comment_id":393549,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100799401,"comment_content":"在公网容易被攻击。还有其他风险吗？","like_count":0,"discussions":[{"author":{"id":3898827,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/7d/cb/fa3dae58.jpg","nickname":"俊达","note":"","ucode":"F79BF9651AD086","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649970,"discussion_content":"1. 被攻击。\n2. 数据被窃取。\n如果网络传输没加密，客户端和数据库之间的TCP流量如果被抓取了，可以解析出客户端执行的SQL语句、服务端返回的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724206204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}