{"id":185684,"title":"28 | 理论二：为了保证重构不出错，有哪些非常能落地的技术手段？","content":"<p>上一节课中，我们对“为什么要重构、到底重构什么、什么时候重构、该如何重构”，做了概括性介绍，强调了重构的重要性，希望你建立持续重构意识，将重构作为开发的一部分来执行。</p><p>据我了解，很多程序员对重构这种做法还是非常认同的，面对项目中的烂代码，也想重构一下，但又担心重构之后出问题，出力不讨好。确实，如果你要重构的代码是别的同事开发的，你不是特别熟悉，在没有任何保障的情况下，重构引入bug的风险还是很大的。</p><p>那如何保证重构不出错呢？你需要熟练掌握各种设计原则、思想、模式，还需要对所重构的业务和代码有足够的了解。除了这些个人能力因素之外，最可落地执行、最有效的保证重构不出错的手段应该就是<strong>单元测试</strong>（Unit Testing）了。当重构完成之后，如果新的代码仍然能通过单元测试，那就说明代码原有逻辑的正确性未被破坏，原有的外部可见行为未变，符合上一节课中我们对重构的定义。</p><p>那今天我们就来学习一下单元测试。今天的内容主要包含这样几个内容：</p><ul>\n<li>什么是单元测试？</li>\n<li>为什么要写单元测试？</li>\n<li>如何编写单元测试？</li>\n<li>如何在团队中推行单元测试？</li>\n</ul><p>话不多说，让我们现在就开始今天的学习吧！</p><h2>什么是单元测试？</h2><p>单元测试由研发工程师自己来编写，用来测试自己写的代码的正确性。我们常常将它跟集成测试放到一块来对比。单元测试相对于集成测试（Integration Testing）来说，测试的粒度更小一些。集成测试的测试对象是整个系统或者某个功能模块，比如测试用户注册、登录功能是否正常，是一种端到端（end to end）的测试。而单元测试的测试对象是类或者函数，用来测试一个类和函数是否都按照预期的逻辑执行。这是代码层级的测试。</p><!-- [[[read_end]]] --><p>这么说比较理论，我举个例子来解释一下。</p><pre><code>public class Text {\n  private String content;\n\n  public Text(String content) {\n    this.content = content;\n  }\n\n  /**\n   * 将字符串转化成数字，忽略字符串中的首尾空格；\n   * 如果字符串中包含除首尾空格之外的非数字字符，则返回null。\n   */\n  public Integer toNumber() {\n    if (content == null || content.isEmpty()) {\n      return null;\n    }\n    //...省略代码实现...\n    return null;\n  }\n}\n</code></pre><p>如果我们要测试Text类中的toNumber()函数的正确性，应该如何编写单元测试呢？</p><p>实际上，写单元测试本身不需要什么高深技术。它更多的是考验程序员思维的缜密程度，看能否设计出覆盖各种正常及异常情况的测试用例，来保证代码在任何预期或非预期的情况下都能正确运行。</p><p>为了保证测试的全面性，针对toNumber()函数，我们需要设计下面这样几个测试用例。</p><ul>\n<li>如果字符串只包含数字：“123”，toNumber()函数输出对应的整数：123。</li>\n<li>如果字符串是空或者null，toNumber()函数返回：null。</li>\n<li>如果字符串包含首尾空格：“ 123”，“123 ”，“ 123 ”，toNumber()返回对应的整数：123。</li>\n<li>如果字符串包含多个首尾空格：“ 123 ”，toNumber()返回对应的整数：123；</li>\n<li>如果字符串包含非数字字符：“123a4”，“123 4”，toNumber()返回null；</li>\n</ul><p>当我们设计好测试用例之后，剩下的就是将其翻译成代码了。翻译成代码的过程非常简单，我把代码贴在下面了，你可以参考一下（注意，我们这里没有使用任何测试框架）。</p><pre><code>public class Assert {\n  public static void assertEquals(Integer expectedValue, Integer actualValue) {\n    if (actualValue != expectedValue) {\n      String message = String.format(\n              &quot;Test failed, expected: %d, actual: %d.&quot;, expectedValue, actualValue);\n      System.out.println(message);\n    } else {\n      System.out.println(&quot;Test succeeded.&quot;);\n    }\n  }\n\n  public static boolean assertNull(Integer actualValue) {\n    boolean isNull = actualValue == null;\n    if (isNull) {\n      System.out.println(&quot;Test succeeded.&quot;);\n    } else {\n      System.out.println(&quot;Test failed, the value is not null:&quot; + actualValue);\n    }\n    return isNull;\n  }\n}\n\npublic class TestCaseRunner {\n  public static void main(String[] args) {\n    System.out.println(&quot;Run testToNumber()&quot;);\n    new TextTest().testToNumber();\n\n    System.out.println(&quot;Run testToNumber_nullorEmpty()&quot;);\n    new TextTest().testToNumber_nullorEmpty();\n\n    System.out.println(&quot;Run testToNumber_containsLeadingAndTrailingSpaces()&quot;);\n    new TextTest().testToNumber_containsLeadingAndTrailingSpaces();\n\n    System.out.println(&quot;Run testToNumber_containsMultiLeadingAndTrailingSpaces()&quot;);\n    new TextTest().testToNumber_containsMultiLeadingAndTrailingSpaces();\n\n    System.out.println(&quot;Run testToNumber_containsInvalidCharaters()&quot;);\n    new TextTest().testToNumber_containsInvalidCharaters();\n  }\n}\n\npublic class TextTest {\n  public void testToNumber() {\n    Text text = new Text(&quot;123&quot;);\n    Assert.assertEquals(123, text.toNumber());\n  }\n\n  public void testToNumber_nullorEmpty() {\n    Text text1 = new Text(null);\n    Assert.assertNull(text1.toNumber());\n\n    Text text2 = new Text(&quot;&quot;);\n    Assert.assertNull(text2.toNumber());\n  }\n\n  public void testToNumber_containsLeadingAndTrailingSpaces() {\n    Text text1 = new Text(&quot; 123&quot;);\n    Assert.assertEquals(123, text1.toNumber());\n\n    Text text2 = new Text(&quot;123 &quot;);\n    Assert.assertEquals(123, text2.toNumber());\n\n    Text text3 = new Text(&quot; 123 &quot;);\n    Assert.assertEquals(123, text3.toNumber());\n  }\n\n  public void testToNumber_containsMultiLeadingAndTrailingSpaces() {\n    Text text1 = new Text(&quot;  123&quot;);\n    Assert.assertEquals(123, text1.toNumber());\n\n    Text text2 = new Text(&quot;123  &quot;);\n    Assert.assertEquals(123, text2.toNumber());\n\n    Text text3 = new Text(&quot;  123  &quot;);\n    Assert.assertEquals(123, text3.toNumber());\n  }\n\n  public void testToNumber_containsInvalidCharaters() {\n    Text text1 = new Text(&quot;123a4&quot;);\n    Assert.assertNull(text1.toNumber());\n\n    Text text2 = new Text(&quot;123 4&quot;);\n    Assert.assertNull(text2.toNumber());\n  }\n}\n</code></pre><h2>为什么要写单元测试？</h2><p>单元测试除了能有效地为重构保驾护航之外，也是保证代码质量最有效的两个手段之一（另一个是Code Review）。我在Google工作的时候，写了大量的单元测试代码，结合我的这些开发经验，我总结了以下几点单元测试的好处。尽管有些听起来有点“务虚”，但如果你认真写过一些单元测试的话，应该会很有共鸣。</p><h3>1.单元测试能有效地帮你发现代码中的bug</h3><p>能否写出bug free的代码，是判断工程师编码能力的重要标准之一，也是很多大厂面试考察的重点，特别是像FLAG这样的外企。即便像我这样代码写了十几年，逻辑还算缜密、清晰的人，通过单元测试也常常会发现代码中的很多考虑不全面的地方。</p><p>在离开Google之后，尽管我就职的很多公司，其开发模式都是“快、糙、猛”，对单元测试根本没有要求，但我还是坚持为自己提交的每一份代码，都编写完善的单元测试。得益于此，我写的代码几乎是bug free的。这也节省了我很多fix低级bug的时间，能够有时间去做其他更有意义的事情，我也因此在工作上赢得了很多人的认可。可以这么说，坚持写单元测试是保证我的代码质量的一个“杀手锏”，也是帮助我拉开与其他人差距的一个“小秘密”。</p><h3>2.写单元测试能帮你发现代码设计上的问题</h3><p>前面我们提到，代码的可测试性是评判代码质量的一个重要标准。对于一段代码，如果很难为其编写单元测试，或者单元测试写起来很吃力，需要依靠单元测试框架里很高级的特性才能完成，那往往就意味着代码设计得不够合理，比如，没有使用依赖注入、大量使用静态函数、全局变量、代码高度耦合等。</p><h3>3.单元测试是对集成测试的有力补充</h3><p>程序运行的bug往往出现在一些边界条件、异常情况下，比如，除数未判空、网络超时。而大部分异常情况都比较难在测试环境中模拟。而单元测试可以利用下一节课中讲到的mock的方式，控制mock的对象返回我们需要模拟的异常，来测试代码在这些异常情况的表现。</p><p>除此之外，对于一些复杂系统来说，集成测试也无法覆盖得很全面。复杂系统往往有很多模块。每个模块都有各种输入、输出、异常情况，组合起来，整个系统就有无数测试场景需要模拟，无数的测试用例需要设计，再强大的测试团队也无法穷举完备。</p><p>尽管单元测试无法完全替代集成测试，但如果我们能保证每个类、每个函数都能按照我们的预期来执行，底层bug少了，那组装起来的整个系统，出问题的概率也就相应减少了。</p><h3>4.写单元测试的过程本身就是代码重构的过程</h3><p>上一节课中，我们提到，要把持续重构作为开发的一部分来执行，那写单元测试实际上就是落地执行持续重构的一个有效途径。设计和实现代码的时候，我们很难把所有的问题都想清楚。而编写单元测试就相当于对代码的一次自我Code Review，在这个过程中，我们可以发现一些设计上的问题（比如代码设计的不可测试）以及代码编写方面的问题（比如一些边界条件处理不当）等，然后针对性的进行重构。</p><h3>5.阅读单元测试能帮助你快速熟悉代码</h3><p>阅读代码最有效的手段，就是先了解它的业务背景和设计思路，然后再去看代码，这样代码读起来就会轻松很多。但据我了解，程序员都不怎么喜欢写文档和注释，而大部分程序员写的代码又很难做到“不言自明”。在没有文档和注释的情况下，单元测试就起了替代性作用。单元测试用例实际上就是用户用例，反映了代码的功能和如何使用。借助单元测试，我们不需要深入的阅读代码，便能知道代码实现了什么功能，有哪些特殊情况需要考虑，有哪些边界条件需要处理。</p><h3>6.单元测试是TDD可落地执行的改进方案</h3><p>测试驱动开发（Test-Driven Development，简称TDD）是一个经常被提及但很少被执行的开发模式。它的核心指导思想就是测试用例先于代码编写。不过，要让程序员能彻底地接受和习惯这种开发模式还是挺难的，毕竟很多程序员连单元测试都懒得写，更何况在编写代码之前先写好测试用例了。</p><p>我个人觉得，单元测试正好是对TDD的一种改进方案，先写代码，紧接着写单元测试，最后根据单元测试反馈出来问题，再回过头去重构代码。这个开发流程更加容易被接受，更加容易落地执行，而且又兼顾了TDD的优点。</p><h2>如何编写单元测试？</h2><p>前面在讲什么是单元测试的时候，我们举了一个给toNumber()函数写单元测试的例子。根据那个例子，我们可以总结得出，写单元测试就是针对代码设计覆盖各种输入、异常、边界条件的测试用例，并将这些测试用例翻译成代码的过程。</p><p>在把测试用例翻译成代码的时候，我们可以利用单元测试框架，来简化测试代码的编写。比如，Java中比较出名的单元测试框架有Junit、TestNG、Spring Test等。这些框架提供了通用的执行流程（比如执行测试用例的TestCaseRunner）和工具类库（比如各种Assert判断函数）等。借助它们，我们在编写测试代码的时候，只需要关注测试用例本身的编写即可。</p><p>针对toNumber()函数的测试用例，我们利用Junit单元测试框架重新实现一下，具体代码如下所示。你可以拿它跟之前没有利用测试框架的实现方式对比一下，看是否简化了很多呢？</p><pre><code>import org.junit.Assert;\nimport org.junit.Test;\n\npublic class TextTest {\n  @Test\n  public void testToNumber() {\n    Text text = new Text(&quot;123&quot;);\n    Assert.assertEquals(new Integer(123), text.toNumber());\n  }\n\n  @Test\n  public void testToNumber_nullorEmpty() {\n    Text text1 = new Text(null);\n    Assert.assertNull(text1.toNumber());\n\n    Text text2 = new Text(&quot;&quot;);\n    Assert.assertNull(text2.toNumber());\n  }\n\n  @Test\n  public void testToNumber_containsLeadingAndTrailingSpaces() {\n    Text text1 = new Text(&quot; 123&quot;);\n    Assert.assertEquals(new Integer(123), text1.toNumber());\n\n    Text text2 = new Text(&quot;123 &quot;);\n    Assert.assertEquals(new Integer(123), text2.toNumber());\n\n    Text text3 = new Text(&quot; 123 &quot;);\n    Assert.assertEquals(new Integer(123), text3.toNumber());\n  }\n\n  @Test\n  public void testToNumber_containsMultiLeadingAndTrailingSpaces() {\n    Text text1 = new Text(&quot;  123&quot;);\n    Assert.assertEquals(new Integer(123), text1.toNumber());\n\n    Text text2 = new Text(&quot;123  &quot;);\n    Assert.assertEquals(new Integer(123), text2.toNumber());\n\n    Text text3 = new Text(&quot;  123  &quot;);\n    Assert.assertEquals(new Integer(123), text3.toNumber());\n  }\n\n  @Test\n  public void testToNumber_containsInvalidCharaters() {\n    Text text1 = new Text(&quot;123a4&quot;);\n    Assert.assertNull(text1.toNumber());\n\n    Text text2 = new Text(&quot;123 4&quot;);\n    Assert.assertNull(text2.toNumber());\n  }\n}\n</code></pre><p>对于如何使用这些单元测试框架，大部分框架都给出了非常详细的官方文档，你可以自行查阅。这些东西理解和掌握起来没有太大难度，所以这不是专栏要讲解的重点。关于如何编写单元测试，我更希望传达给你一些我的经验总结。具体包括以下几点。</p><h3>1.写单元测试真的是件很耗时的事情吗？</h3><p>尽管单元测试的代码量可能是被测代码本身的1～2倍，写的过程很繁琐，但并不是很耗时。毕竟我们不需要考虑太多代码设计上的问题，测试代码实现起来也比较简单。不同测试用例之间的代码差别可能并不是很大，简单copy-paste改改就行。</p><h3>2.对单元测试的代码质量有什么要求吗？</h3><p>单元测试毕竟不会在产线上运行，而且每个类的测试代码也比较独立，基本不互相依赖。所以，相对于被测代码，我们对单元测试代码的质量可以放低一些要求。命名稍微有些不规范，代码稍微有些重复，也都是没有问题的。</p><h3>3.单元测试只要覆盖率高就够了吗？</h3><p>单元测试覆盖率是比较容易量化的指标，常常作为单元测试写得好坏的评判标准。有很多现成的工具专门用来做覆盖率统计，比如，JaCoCo、Cobertura、Emma、Clover。覆盖率的计算方式有很多种，比较简单的是语句覆盖，稍微高级点的有：条件覆盖、判定覆盖、路径覆盖。</p><p>不管覆盖率的计算方式如何高级，将覆盖率作为衡量单元测试质量的唯一标准是不合理的。实际上，更重要的是要看测试用例是否覆盖了所有可能的情况，特别是一些corner case。我来举个简单的例子解释一下。</p><p>像下面这段代码，我们只需要一个测试用例就可以做到100%覆盖率，比如cal(10.0, 2.0)，但并不代表测试足够全面了，我们还需要考虑，当除数等于０的情况下，代码执行是否符合预期。</p><pre><code>public double cal(double a, double b) {\n  if (b != 0) {\n    return a / b;\n  }\n}\n</code></pre><p>实际上，过度关注单元测试的覆盖率会导致开发人员为了提高覆盖率，写很多没有必要的测试代码，比如get、set方法非常简单，没有必要测试。从过往的经验上来讲，一个项目的单元测试覆盖率在60～70%即可上线。如果项目对代码质量要求比较高，可以适当提高单元测试覆盖率的要求。</p><h3>4.写单元测试需要了解代码的实现逻辑吗？</h3><p>单元测试不要依赖被测试函数的具体实现逻辑，它只关心被测函数实现了什么功能。我们切不可为了追求覆盖率，逐行阅读代码，然后针对实现逻辑编写单元测试。否则，一旦对代码进行重构，在代码的外部行为不变的情况下，对代码的实现逻辑进行了修改，那原本的单元测试都会运行失败，也就起不到为重构保驾护航的作用了，也违背了我们写单元测试的初衷。</p><h3>5.如何选择单元测试框架？</h3><p>写单元测试本身不需要太复杂的技术，大部分单元测试框架都能满足。在公司内部，起码团队内部需要统一单元测试框架。如果自己写的代码用已经选定的单元测试框架无法测试，那多半是代码写得不够好，代码的可测试性不够好。这个时候，我们要重构自己的代码，让其更容易测试，而不是去找另一个更加高级的单元测试框架。</p><h2>单元测试为何难落地执行？</h2><p>虽然很多书籍中都会讲到，单元测试是保证重构不出错的有效手段；也有非常多人已经认识到单元测试的重要性。但是有多少项目有完善的、高质量的单元测试呢？据我了解，真的非常非常少，包括BAT这样级别公司的项目。如果不相信的话，你可以去看一下国内很多大厂开源的项目，有很多项目完全没有单元测试，还有很多项目的单元测试写得非常不完备，仅仅测试了逻辑是否运行正确而已。所以，100%落实执行单元测试是件“知易行难”的事。</p><p>写单元测试确实是一件考验耐心的活儿。一般情况下，单元测试的代码量要大于被测试代码量，甚至是要多出好几倍。很多人往往会觉得写单元测试比较繁琐，并且没有太多挑战，而不愿意去做。有很多团队和项目在刚开始推行单元测试的时候，还比较认真，执行得比较好。但当开发任务紧了之后，就开始放低对单元测试的要求，一旦出现<a href=\"https://wiki.mbalib.com/wiki/%E7%A0%B4%E7%AA%97%E6%95%88%E5%BA%94\">破窗效应</a>，慢慢的，大家就都不写了，这种情况很常见。</p><p>还有一种情况就是，由于历史遗留问题，原来的代码都没有写单元测试，代码已经堆砌了十几万行了，不可能再一个一个去补单元测试。这种情况下，我们首先要保证新写的代码都要有单元测试，其次，每次在改动到某个类时，如果没有单元测试就顺便补上，不过这要求工程师们有足够强的主人翁意识（ownership），毕竟光靠leader督促，很多事情是很难执行到位的。</p><p>除此之外，还有人觉得，有了测试团队，写单元测试就是浪费时间，没有必要。程序员这一行业本该是智力密集型的，但现在很多公司把它搞成劳动密集型的，包括一些大厂，在开发过程中，既没有单元测试，也没有Code Review流程。即便有，做的也是差强人意。写好代码直接提交，然后丢给黑盒测试狠命去测，测出问题就反馈给开发团队再修改，测不出的问题就留在线上出了问题再修复。</p><p>在这样的开发模式下，团队往往觉得没有必要写单元测试，但如果我们把单元测试写好、做好Code Review，重视起代码质量，其实可以很大程度上减少黑盒测试的投入。我在Google的时候，很多项目几乎没有测试团队参与，代码的正确性完全靠开发团队来保障，线上bug反倒非常少。</p><p>以上是我对单元测试的认知和实践心得。现在互联网信息如此的公开透明，网上有很多文章可以参考，对于程序员这个具有很强学习能力的群体来说，学会如何写单元测试并不是一件难事，难的是能够真正感受到它的作用，并且打心底认可、能100%落地执行。这也是我今天的课程特别想传达给你的一点。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们来一块总结回顾一下，你需要掌握的重点内容。</p><p><strong>1.什么是单元测试？</strong></p><p>单元测试是代码层面的测试，由研发自己来编写，用于测试“自己”编写的代码的逻辑的正确性。单元测试顾名思义是测试一个“单元”，有别于集成测试，这个“单元”一般是类或函数，而不是模块或者系统。</p><p><strong>2.为什么要写单元测试？</strong></p><p>写单元测试的过程本身就是代码Code Review和重构的过程，能有效地发现代码中的bug和代码设计上的问题。除此之外，单元测试还是对集成测试的有力补充，还能帮助我们快速熟悉代码，是TDD可落地执行的改进方案。</p><p><strong>3.如何编写单元测试？</strong></p><p>写单元测试就是针对代码设计各种测试用例，以覆盖各种输入、异常、边界情况，并将其翻译成代码。我们可以利用一些测试框架来简化单元测试的编写。除此之外，对于单元测试，我们需要建立以下正确的认知：</p><ul>\n<li>编写单元测试尽管繁琐，但并不是太耗时；</li>\n<li>我们可以稍微放低对单元测试代码质量的要求；</li>\n<li>覆盖率作为衡量单元测试质量的唯一标准是不合理的；</li>\n<li>单元测试不要依赖被测代码的具体实现逻辑；</li>\n<li>单元测试框架无法测试，多半是因为代码的可测试性不好。</li>\n</ul><p><strong>4.单元测试为何难落地执行？</strong></p><p>一方面，写单元测试本身比较繁琐，技术挑战不大，很多程序员不愿意去写；另一方面，国内研发比较偏向“快、糙、猛”，容易因为开发进度紧，导致单元测试的执行虎头蛇尾。最后，关键问题还是团队没有建立对单元测试正确的认识，觉得可有可无，单靠督促很难执行得很好。</p><h2>课堂讨论</h2><p>今天的课堂讨论有以下两个：</p><ol>\n<li>你参与的项目有没有写单元测试？单元测试是否足够完备？贯彻执行写单元测试的过程中，遇到过哪些问题？又是如何解决的？</li>\n<li>在面试中，我经常会让候选人写完代码之后，列举几个测试用例，以此来考察候选人考虑问题是否全面，特别是针对一些边界条件的处理。所以，今天的另一个课堂讨论话题就是：写一个二分查找的变体算法，查找递增数组中第一个大于等于某个给定值的元素，并且为你的代码设计完备的单元测试用例。</li>\n</ol><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"27 | 理论一：什么情况下要重构？到底重构什么？又该如何重构？","id":179679},"right":{"article_title":"29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？","id":186691}},"comments":[{"had_liked":false,"id":172997,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1579404594,"is_pvip":false,"discussion_count":23,"race_medal":0,"score":"791853387058","product_id":100039001,"comment_content":"我就比较喜欢写单元测试，所以基本上是无bug 。身边的同事测基本上都是写完往哪一扔，或者丢给测试，然后bug 一堆，慢慢的我就成了团队的核心负责人。😂","like_count":185},{"had_liked":false,"id":169039,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1128437,"ip_address":"","ucode":"4EBA75DCBF42D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/f5/97c5d1eb.jpg","comment_is_top":false,"comment_ctime":1578250661,"is_pvip":false,"discussion_count":28,"race_medal":0,"score":"684478050725","product_id":100039001,"comment_content":"半年前，因为团队项目太多太乱已经很难维护和协作开发(10人的开发团队，每人负责一些项目，水平参差不齐，各自独立开发)，作为团队中的资深者，我被leader要求开发一套通用的底层框架。<br><br>为保证代码质量，刚开始时对自己要求严格，每个方法都必须要有多种case的单元测试；然后发现有时候写出来的单元测试代码比被测试的方法的代码量多很多，在一定程度上影响了开发速度。另外leader还经常安排我去修复一些仍在艰难运行的旧系统的故障(大多是累积下来的技术债)，导致框架开发进展一再拖延。同时团队其他人很少有写单元测试代码，测试工作完全依赖测试人员完成，对自己也就逐渐放松了要求，单元测试不再追求完备，只在核心的方法中加入常规的实现逻辑测试，其他代码写完多看两遍确认无bug就提交。<br><br>争哥的这节课程我完全理解，单元测试的重要性毋庸置疑，可是在实际开发过程中完全落实存在一定的困难，遇到这种问题我还真没啥解决的办法除了让自己拼命的加班，真的太难了。。。","like_count":159},{"had_liked":false,"id":169542,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1578376004,"is_pvip":false,"replies":[{"id":"65950","content":"可以集成到代码管理仓库git中，强制跑单元测试成功之后才能提交","user_name":"作者回复","comment_id":169542,"uid":"1190123","ip_address":"","utype":1,"ctime":1578489359,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"181967002436","product_id":100039001,"comment_content":"单元测试很重要，但是为什么大多人都会放弃？我个人觉得最主要的原因并不是代码量大，难以编写等，而是跑单元测试的次数少。很多单元测试都是为了写而写，写完一次可能都不去运行或者只偶尔运行一两次。如果是每次改完代码，都跑一遍单元测试，单元测试的效果会越来越显现。如果只是为了运行一两次或者干脆为了写而写，很容易就会放弃继续写单元测试。","like_count":42,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480605,"discussion_content":"可以集成到代码管理仓库git中，强制跑单元测试成功之后才能提交","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578489359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169065,"user_name":"沐","can_delete":false,"product_type":"c1","uid":1326537,"ip_address":"","ucode":"678F6A0C778CDD","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/c9/a1e6a307.jpg","comment_is_top":false,"comment_ctime":1578270344,"is_pvip":false,"replies":[{"id":"65749","content":"哈哈，那就看我的项目啊：https:&#47;&#47;github.com&#47;wangzheng0822<br>下面有个ratelimiter4j","user_name":"作者回复","comment_id":169065,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380582,"user_name_real":"王争"}],"discussion_count":4,"race_medal":3,"score":"156197093000","product_id":100039001,"comment_content":"之前公司要求新研的代码要达到百分之85的覆盖率，导致纯粹为了覆盖率堆砌了一堆单元用例。有没有单元测试写的比较好的开源框架推荐下？","like_count":36,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480416,"discussion_content":"哈哈，那就看我的项目啊：https://github.com/wangzheng0822\n下面有个ratelimiter4j","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578380582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534497,"discussion_content":"收藏小争哥的GitHub+1，https://github.com/wangzheng0822","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638199547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171270,"discussion_content":"收藏了小争哥的GitHub","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581694716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124715,"discussion_content":"spock可以看一下感觉简化了很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578448457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169349,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1578320423,"is_pvip":false,"replies":[{"id":"65739","content":"😂 可以考虑跳槽了","user_name":"作者回复","comment_id":169349,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379456,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"130427339303","product_id":100039001,"comment_content":"说起来真的是难受。整个项目中就我一个人写单元测试。每次做的功能都有单元测试覆盖。而且项目中junit包都是我导入的。更加奇葩的是我的功能单元测试领导还不让我提交。说是你的测试代码为什么要提交，我瞬间无语了。","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480518,"discussion_content":"😂 可以考虑跳槽了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578379456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171303,"discussion_content":"你居然回答不出领导的问题？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581695052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618328,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","nickname":"絆","note":"","ucode":"52D965461314DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531705,"discussion_content":"哈哈哈哈, 编译的时候不是可以设置不运行测试用例, 不编译测试代码么, 又没啥影响.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637392844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623117,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c4/4d/85014aab.jpg","nickname":"一叉树","note":"","ucode":"BFC984403ACD1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387443,"discussion_content":"兄弟现在跳槽了没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628172715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142793,"discussion_content":"“你的测试代码为什么要提交”亮瞎眼。我推测你们push肯定没有pipeline。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142933,"discussion_content":"是啊。没办法。只能把自己的事情先做好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579485241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":142793,"ip_address":""},"score":142933,"extra":""},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143405,"discussion_content":"你可以自己搭个jenkins，ut、auto往上扔，qa测出的bug显著降低，那么就可以拿数据找领导了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579505131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":142933,"ip_address":""},"score":143405,"extra":""},{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143436,"discussion_content":"哈哈。是啊。后面确实准备自己先在测试环境搭建一套，做持续集成和持续交付测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579506635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143405,"ip_address":""},"score":143436,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136534,"discussion_content":"领导天理难容啊，领导都不理解你，哎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579146286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":142931,"discussion_content":"哈哈。习惯了。改变公司代码质量，从我做起。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579485209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":136534,"ip_address":""},"score":142931,"extra":""}]}]},{"had_liked":false,"id":169135,"user_name":"拙言","can_delete":false,"product_type":"c1","uid":1310192,"ip_address":"","ucode":"40179CFED35579","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/f0/67ed878c.jpg","comment_is_top":false,"comment_ctime":1578279015,"is_pvip":false,"replies":[{"id":"65747","content":"涉及到数据库的项目，特别是重度依赖数据库的，确实比较难写单元测试。一种方式使用DBUNIT这样的测试框架来解耦合真正的数据库，另一种方式专门维护一个供单元测试用的数据库。","user_name":"作者回复","comment_id":169135,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380345,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"121837363303","product_id":100039001,"comment_content":"打卡~<br>这里问下王争老师，如果到了具体的业务代码，该怎么写单元测试呢，单元测试正确标准是什么呢，以sql查询到的结果吗？","like_count":28},{"had_liked":false,"id":169245,"user_name":"yaomon","can_delete":false,"product_type":"c1","uid":1121557,"ip_address":"","ucode":"4742547EB92BCE","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/15/8ad4e24a.jpg","comment_is_top":false,"comment_ctime":1578300604,"is_pvip":false,"replies":[{"id":"65613","content":"差强人意是勉强使人满意，不是十分使人满意。所以这里没问题呢～","user_name":"编辑回复","comment_id":169245,"uid":"1058895","ip_address":"","utype":2,"ctime":1578305012,"user_name_real":"王锦"}],"discussion_count":12,"race_medal":0,"score":"61707842748","product_id":100039001,"comment_content":"程序员这一行业本该是智力密集型的，但现在很多公司把它搞成劳动密集型的，包括一些大厂，在开发过程中，既没有单元测试，也没有 Code Review 流程。即便有，做的也是差强人意。<br>----------------------------------------------------------------------------------------<br>差强人意：指尚能使人满意。根据文章上文，明显是不能使人满意的意思。处理为语病。","like_count":14,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480477,"discussion_content":"差强人意是勉强使人满意，不是十分使人满意。所以这里没问题呢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578305012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163644,"discussion_content":"大哥是用的文言文编程吗😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581088059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","nickname":"沐夜星光","note":"","ucode":"22F699E237B179","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138295,"discussion_content":"哈哈哈，差强人意其实是一个褒义词，很多人都被这个词的表面意思误导了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579233690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163656,"discussion_content":"根据 前文“即便”二字，结合语境可知 ，后面应该是“不尽人意”。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581088428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124509,"discussion_content":"yaomon理解是该用不尽人意,都是语言高手啊  赞赞赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578442616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2789067,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/8e/cb/1efcaf20.jpg","nickname":"Justway","note":"","ucode":"75966B5533C872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585461,"discussion_content":"差强人意是扁褒义词，从语境来看这里是想用一个贬义词，所以是有点问题。改成不尽人意就不会有争议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661579999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538620,"discussion_content":"秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639455204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377846,"discussion_content":"都是巨佬，无处不体现汉字的博大精深","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622904726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288896,"discussion_content":"不知道你们这些人，不好好专研技术，专牛角尖是个好手，不是个差手。。这里用差强人意是完全没毛病的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593926865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2093945,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f3/79/a2bedc1e.jpg","nickname":"J6","note":"","ucode":"3F097CE1FFCA05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302226,"discussion_content":"你咋知道人家没好好钻研技术呢。。指出用词不当的地方变成钻牛角尖了吗？我只想说真正认真细致的精神应该是处处都能体现，不要太局限自己了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598851384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288896,"ip_address":""},"score":302226,"extra":""},{"author":{"id":1202160,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/f0/f6155d5f.jpg","nickname":"新生\\","note":"","ucode":"212978C88E242E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577836,"discussion_content":"不尽人意更好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656382937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288896,"ip_address":""},"score":577836,"extra":""}]},{"author":{"id":1242373,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg","nickname":"才才","note":"","ucode":"94D76106261987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204935,"discussion_content":"有文化就是好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584240800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169141,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1578279967,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"48822920223","product_id":100039001,"comment_content":"设计模式_28<br>1. 有过一次失败的单元测试经验：好不容易申请到了2周的预研时间，我开开心心地研究怎么把JUnit引入项目，刚开始了两天，新的开发任务打断了我的计划，然后就再也没有继续了。。。<br><br>2. <br>代码：<br>&#47;**<br> * 查找递增数组中第一个大于等于某个给定值的元素<br> * @return -1: 未找到<br> *&#47;<br>public int findFirstEqualOrLargerIndex(int[] array, int num) {<br>    if (array == null || array.length == 0) return -1;<br><br>    int start = 0;<br>    int end = array.length - 1;<br><br>    while (start != end) {<br>        int middle = start + (end - start) &#47; 2;<br><br>        if (array[middle] &gt;= num) {<br>            if (start == middle) return middle;<br>            else<br>                if (array[middle - 1] &lt; num) return middle;<br>                else end = middle -1;<br><br>        } else {<br>            start = middle + 1;<br>        }<br>    }<br>    &#47;&#47;start == end<br>    if (array[start] &gt;= num) {<br>        return start;<br>    } else {<br>        return -1;<br>    }<br>}<br><br>测试用例:<br>findFirstEqualOrLargerIndex(null, 1)<br>findFirstEqualOrLargerIndex(new int [0], 1)<br>findFirstEqualOrLargerIndex(new int [] {0}, 1)<br>findFirstEqualOrLargerIndex(new int [] {1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 0}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {1, 1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 1, 1, 1, 1, 6, 7, 8, 9}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 10)<br><br>我估计应该有漏洞，请老师和同学们指正~","like_count":11,"discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120602,"discussion_content":"例如非要输入无序数组，还work么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578284622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120735,"discussion_content":"不work，我想过这个问题，我认为不应该加上验证有序的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578291939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120602,"ip_address":""},"score":120735,"extra":""},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304750,"discussion_content":"都规定了二分查找。。 你再扔个无序数组进来那不是搞事情  这个其实是预料之中的题目之外的问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599656421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120602,"ip_address":""},"score":304750,"extra":""}]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120597,"discussion_content":"数组要是有负数呢？例如-3 -2 -1，我输入-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578284463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120734,"discussion_content":"不影响，返回的是index","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578291891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120597,"ip_address":""},"score":120734,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120744,"discussion_content":"题目说找指定元素，貌似和找下标不是一个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578292891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120734,"ip_address":""},"score":120744,"extra":""},{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120755,"discussion_content":"确实是，如果是返回元素，你觉得如何做到找不到时的默认返回与元素值相同的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578293756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120744,"ip_address":""},"score":120755,"extra":""}]}]},{"had_liked":false,"id":169979,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578487141,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35938225509","product_id":100039001,"comment_content":"项目是服务端项目中，使用的是Spring test，立足于能满足自测工具的诉求，能保证用例有资产继承，而不是使用postman。用例主要是以接口层（Cnotrol）为主，services层为补充。<br>好处很多，特别是微重构时，老用例一通过，自己的心就踏实了一半。<br>另外，有一个体会，如果认真写了单元测试，转测后，测试基本测试不出问题。一个月度版本，bug可以控制在1个以内。","like_count":8},{"had_liked":false,"id":169387,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1578325571,"is_pvip":false,"replies":[{"id":"65737","content":"涉及到数据库的确实比较难写单元测试，而且如果重度依赖数据库，业务逻辑又不复杂，单元测试确实没有太大意义。这个时候，集成测试可能更有意义些。","user_name":"作者回复","comment_id":169387,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379305,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"35938063939","product_id":100039001,"comment_content":"       以前在开发中，没有写单元测试的意识。开发完功能后，直接去测试一个完整的流程。即前端发请求，服务端处理，看数据库数据。如果功能正确就过。这是从一个功能宏观去考虑测试。而单元测试是更细粒度的测试，它在保证各个“单元”都测试通过的情况下整个功能模块就测试通过了。这样的方式对于我们自己来说对代码可控粒度更细。更能比较清楚的理解某个“单元”在整个功能模块调用链路上的位置，承担什么职责，以及有什么行为。而不是一开始就站在模块宏观角度来思考。通过一个个单元测试的编写，将整个功能模块串联起来，最终达到整个功能模块的全局认知。 这也体现了任务分解的思想。通过单元测试，可以从另外一方面实现对已编写的代码的CodeReview，重新梳理流程。也为以后有重构需求打下基础。<br>       目前参与的项目中有单元测试，但是不够完备。可能由于某些原因（开发人员意识问题，团队对单元测试的执行落地程度不够等）。在写单元测试的过程中，遇到单元测试依赖数据库查询问题，因为存在多套环境，如开发环境，仿真环境，线上环境。对于依赖数据查询的单元测试，只能自己造假数据来解决。不知道还有什么好的解决办法。","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480535,"discussion_content":"涉及到数据库的确实比较难写单元测试，而且如果重度依赖数据库，业务逻辑又不复杂，单元测试确实没有太大意义。这个时候，集成测试可能更有意义些。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578379305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078280,"avatar":"https://static001.geekbang.org/account/avatar/00/10/74/08/aa2a9f36.jpg","nickname":"tomcat","note":"","ucode":"1929E1028414F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309758,"discussion_content":"这种情况我觉得可以结合mariaDB来实现，在单测之前写入测试数据，单测执行后验证数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601432565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164697,"discussion_content":"感觉ddd把业务和数据层分开，就和数据库依赖没那么大，感觉才容易测试。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581214220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164755,"discussion_content":"有道理，我对DDD认识很浅，等后面多了解一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581218975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164697,"ip_address":""},"score":164755,"extra":""}]},{"author":{"id":2826368,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/20/80/9dfc7a42.jpg","nickname":"乌托邦的托","note":"","ucode":"2832BD58762D9F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413366,"discussion_content":"mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636458095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278778,"discussion_content":"我们工具类上面 单元测试较多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591233534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169215,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578294725,"is_pvip":false,"replies":[{"id":"65741","content":"需要的，这个跟项目大不大没太多关系的。单元测试还是为了保证代码少些低级bug","user_name":"作者回复","comment_id":169215,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379554,"user_name_real":"王争"}],"discussion_count":12,"race_medal":0,"score":"31643065797","product_id":100039001,"comment_content":"独立开发者，项目代码量 10W 行以内，在可以预见的未来不会超过 20W 行<br>以前试过 git 各种最佳实践，最后发现一个分支基本就够用了<br>所以还是忍不住想问问老师，如果项目真没那么大，是否需要单元测试？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480460,"discussion_content":"需要的，这个跟项目大不大没太多关系的。单元测试还是为了保证代码少些低级bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640974,"avatar":"","nickname":"大风","note":"","ucode":"583873CCAA2A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359918,"discussion_content":"独立开发者也需要多个分支。比如这样的情况：主分支已经上线运行，但是这时要开发一个新功能，如果你不创建一个新的分支的情况下又当新功能开发还未完成时，用户报告了一个严重错误需要紧急修修复，这时怎么办？新功能还要几天才能完成，但是修复问题可能也就几分钟的事。窘迫不？ 所以，无论团队还是独立开发者，正确的打开方式是开发新功能时从主分支上创建一个新的功能分支出来，主分支可随时紧急修复bug，同时新功能分支也可以同步进行，互不干扰。团队开发就更不用说了，可能几个小组同步开发不同的功能这时就要在各自分支上独立进行，最后把开发好的功能合并到主分支上就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616328691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032755,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c2/33/ccbf2045.jpg","nickname":"sta","note":"","ucode":"D840070850EA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306037,"discussion_content":"个人感觉分支主要是用来团队间协同开发的，个人开发其实不太需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600153015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288856,"discussion_content":"做的啥app,学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593913056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289099,"discussion_content":"Memory Helper，献丑了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593995078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288856,"ip_address":""},"score":289099,"extra":""}]},{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128515,"discussion_content":"仅用一个分支，如何区分线上和开发的代码呢，如何对线上代码做hotfix和版本回退呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578646423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128559,"discussion_content":"开发完了就上线，如果正在开发遇到bug了就连同开发的一部分上线。\n主要是，我觉得分支之后（一个修bug分支一个开发分支）再合并实在太麻烦了。\n有一次正在开发大功能遇到了bug的确就只能用两个分支。我不是说这个方法有问题，而是大部分情况下我确实没用上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578650326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128515,"ip_address":""},"score":128559,"extra":""}]},{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122926,"discussion_content":"谢谢王争老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578380467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121389,"discussion_content":"还是善于观察和有动手能力！学习了！谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578318385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":122246,"discussion_content":"不客气，你也可以的😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578329224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":121389,"ip_address":""},"score":122246,"extra":""}]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121135,"discussion_content":"这么厉害！想请教一下怎么才能成为一个独立开发者呢？或者你是怎么做到的？我想学一下，看以后是否能多一个选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578312765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":121343,"discussion_content":"我是因为自己有一个需求，当时没有现成的 App，于是就自己做了一个，后来想着上线看看，发现也有不少人有这个需求，于是就一直做下去了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1578317503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":121135,"ip_address":""},"score":121343,"extra":""}]}]},{"had_liked":false,"id":169182,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1578287180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31643058252","product_id":100039001,"comment_content":"1.tdd是以终为始的开发模式。即先确定好验收标准，再根据标准去开发。如此一来设计出来的代码跟验收标准能更好的关联。至于单元测试，单元测试的case与tdd的终并不是直接一一对应的，但也可以算是一个终拆解出来的细力度的子终。但单元测试是实现层面的自检方案，tdd是设计层面的衡量指标，感觉是两个层面的概念，形似而神不同。<br><br>2.我接手的项目，没几行单元测试，且年久失修也基本全部无用。起初也是坚守写单元测试，补充涉及到的业务的单元测试。但坚持补了40%左右后也就放弃了。原因，1.补别人的测试用例太耗时，而且不全面（短时间了解并不透彻，也不该花太多时间都了解透彻）。2.个中价值不被认可（在一个快糙猛的大环境下，逆行总归异类。你可以接受额外的加班，但很难在他人评价上坚守初心）3.事出必有因，快糙猛也没有错，毕竟技术债务这东西是可以不还的（遗憾的是，有利可图时还不知道还债，硬是要债高难还时再推倒重做）。","like_count":7},{"had_liked":false,"id":169080,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1578271859,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31643042931","product_id":100039001,"comment_content":"关于问题2，尝试写了一下单元测试：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u28","like_count":7},{"had_liked":false,"id":169068,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1578270632,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23053107112","product_id":100039001,"comment_content":"确实单元测试只在一开始才写过，后来发现拖慢了开发的进度，就渐渐放弃了，现在我们的开发团队里几乎没什么单元测试，除非一些涉及到优惠券，订单奖励计算等和钱挂钩的业务，我觉得一方面是因为消耗时间，另一方面业务代码没写好，很多时候很不利于进行单测，要造各种数据。我觉得单测最好是在开发一个方法或者函数之后就进行，且要在测试介入之前，否则测试介入以后再补充单元测试，有可能会改动到已写好的业务，那么就又需要回归测试一遍，对开发，测试都是很消耗的。","like_count":5,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278780,"discussion_content":"其实说白了 就是很多curd的业务写单元测试依赖过多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591233632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181647,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/cf/b0d6fe74.jpg","nickname":"L.","note":"","ucode":"46A2F679C094E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239501,"discussion_content":"你这ID让我想起了2009…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587301671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142562,"discussion_content":"除ut外的回归部分要逐渐auto话，这样才能根本解决你说的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579479852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142553,"discussion_content":"单元测试不就是回归的一部分吗？在git merge的pipeline里加上单元测试，每次push都会跑一边，以这样mini回归的方式才能体现ut的价值，否则呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579479686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281681,"user_name":"RD","can_delete":false,"product_type":"c1","uid":1194858,"ip_address":"","ucode":"E3947B6E1681AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","comment_is_top":false,"comment_ctime":1614846831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18794716015","product_id":100039001,"comment_content":"说到测试，让我想起了 leetcode ~ 自己写的算法，自己也写了单元测试，觉得没啥问题，然后 leetcode <br> 上一跑发现，我去对啊，这个边界没考虑到。然后修改，觉得没啥问题了，在跑。。。我去。。对啊。。还有这种情况呢。。。果然，面试考算法没毛病啊~","like_count":4},{"had_liked":false,"id":169660,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1578399436,"is_pvip":false,"replies":[{"id":"65845","content":"春节期间正常发布，惊喜待定😂","user_name":"编辑回复","comment_id":169660,"uid":"1058895","ip_address":"","utype":2,"ctime":1578411035,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"18758268620","product_id":100039001,"comment_content":"争哥。马上过年了，过年期间不知道能否多发表几篇在过年期间学习？","like_count":4,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480660,"discussion_content":"春节期间正常发布，惊喜待定😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578411035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169175,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578285408,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18758154592","product_id":100039001,"comment_content":"个人觉得，对于大多数公司而言，单元测试没有强制要求，对自己有要求的工程师往往加班写单元测试。","like_count":4},{"had_liked":false,"id":169071,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1578270844,"is_pvip":false,"replies":[{"id":"65748","content":"DBunit了解一下~","user_name":"作者回复","comment_id":169071,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380499,"user_name_real":"王争"}],"discussion_count":8,"race_medal":1,"score":"18758140028","product_id":100039001,"comment_content":"参与的项目都有单元测试，不过有些不够完备，缺少了一些corner case的覆盖，感觉后面要注意加上。遇到的一个问题是对于repository层（数据访问层）的测试，用了一个取巧的办法解决的，因为要依赖数据库，可是又没找到对应数据库的mock方式，所以使用了docker镜像的方式来做的，感觉也不错，避免了构造数据的麻烦。不知道还有没有更好的办法？","like_count":4},{"had_liked":false,"id":169062,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1578270024,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18758139208","product_id":100039001,"comment_content":"我感觉我写单测最大的问题在于很难把代码写成那种细粒度可测的模样，而不是要去写。","like_count":4},{"had_liked":false,"id":169804,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1578448614,"is_pvip":false,"replies":[{"id":"65941","content":"解耦依赖目前来看就只能用mock的方式。这是跟集成测试最大的区别。","user_name":"作者回复","comment_id":169804,"uid":"1190123","ip_address":"","utype":1,"ctime":1578488940,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"10168383206","product_id":100039001,"comment_content":"问一下单元测试中的依赖问题只能用mock来模拟吗？这样不会导致对下层方法依赖太强，而且用mock模拟感觉代码量也很多，心里感觉也不一定对。如果加入依赖（先倒入测试数据），那不就变成集成测试了吗？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480725,"discussion_content":"解耦依赖目前来看就只能用mock的方式。这是跟集成测试最大的区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578488940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2025657,"avatar":"","nickname":"Geek_43013d","note":"","ucode":"43742B19B6E407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321908,"discussion_content":"如果需要大量的模拟对象，可以考虑使用mockito或者JMockit这样的隔离测试框架吧，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604649623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142767,"discussion_content":"如果ut需要编写大量外部依赖的mock代码，那说明耦合很严重，建议微重构，把外部依赖都隔离到独立的方法或类，把mock依赖的代码抽成base，这样可以资产化ut代码，就像我们的项目一样。：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169734,"user_name":"varotene","can_delete":false,"product_type":"c1","uid":1004441,"ip_address":"","ucode":"B37E9B6D35090C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/99/56f148bc.jpg","comment_is_top":false,"comment_ctime":1578425413,"is_pvip":false,"replies":[{"id":"65944","content":"是的，你说的大型重构，估计就是代码真的太烂的吧，差不多就是重写了，单元测试都要重新了估计。","user_name":"作者回复","comment_id":169734,"uid":"1190123","ip_address":"","utype":1,"ctime":1578489077,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10168360005","product_id":100039001,"comment_content":"单元测试是不是只对小型、中型重构有用？因为大型重构会导致内部结构变化。大型重构应该通过integration 测试，场景测试来保证正确性？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480697,"discussion_content":"是的，你说的大型重构，估计就是代码真的太烂的吧，差不多就是重写了，单元测试都要重新了估计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578489077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169408,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1578328704,"is_pvip":false,"replies":[{"id":"65734","content":"这个不分的，测试的对象是函数","user_name":"作者回复","comment_id":169408,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379098,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10168263296","product_id":100039001,"comment_content":"单元测试是测试应用层还是领域层？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480543,"discussion_content":"这个不分的，测试的对象是函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169174,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1578285136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168219728","product_id":100039001,"comment_content":"感谢争哥分享，单元测试很重要，除此之外，集成用例和回归用例库同样重要，以及上线后的ab比对切流，这些在大厂其实都是落地了的常规武器。这里争哥没有提到。 <br>大厂之外，能落地的除了单测，还有简单的ab框架，集成平台自动化程度，否则一次重构下来非常耗费精力，而且还是冒着风险。 <br>另外，单测代码本身的质量也要有要求，tl要求单测代码和生产代码一样要遵守规范(视各厂情况定吧)。所以每次迭代开发测试时间比是1比2差不多了。 哭晕","like_count":2,"discussions":[{"author":{"id":1017297,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","nickname":"郭小菜","note":"","ucode":"C4044C80BB331B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129336,"discussion_content":"老哥高估中国的大厂了，腾讯基本木有单元测试的习惯，阿里稍微好些！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578673423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256124,"user_name":"Jupiter","can_delete":false,"product_type":"c1","uid":2125382,"ip_address":"","ucode":"072E5C34CDE8AC","user_header":"https://static001.geekbang.org/account/avatar/00/20/6e/46/a612177a.jpg","comment_is_top":false,"comment_ctime":1603532417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898499713","product_id":100039001,"comment_content":"王争老师说的 `单元测试不要依赖被测代码的具体实现逻辑` 真的被点醒了，现在参与的项目基本上每个都写Unit test，有一次领导让提高单元测试的覆盖率，要90%以上，其实函数都不是什么复杂函数，逻辑也都是比较简单的，所以就不停的针对代码里面的执行逻辑写测试用例。像老师说的 单元测试对于持续重构是一种保障，当时稍微小重构一下 就被之前自己写的单元测试弄的脑袋大。","like_count":1},{"had_liked":false,"id":208220,"user_name":"gtp","can_delete":false,"product_type":"c1","uid":1372089,"ip_address":"","ucode":"12E21307343B3A","user_header":"https://static001.geekbang.org/account/avatar/00/14/ef/b9/c0c12bea.jpg","comment_is_top":false,"comment_ctime":1587303757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882271053","product_id":100039001,"comment_content":"我们也在推行单元测试。赞一个！","like_count":1},{"had_liked":false,"id":190826,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1584696430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879663726","product_id":100039001,"comment_content":"1. 写单元测试就难在 覆盖各种输入、异常、边界情况，往往自己有时候考虑不全呀，这个怎么破？<br>2. 现在公司用的项目的框架都会自动生成一些单测用例，但其实完全没有用，都没有考虑各种情况，大家也都是为了单测覆盖率的指标而写单测，项目紧的时候基本不写，等上线了再补，让指标好看😭","like_count":1},{"had_liked":false,"id":175710,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1580804944,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5875772240","product_id":100039001,"comment_content":"现在在梳理几个水很深的项目，基于spring context的，用spring junit做单测框架，但是由于依赖关系过于复杂，有的类甚至要加载大量数据到内存，导致一个方法的单测要跑很久，请问老师有何良策？","like_count":1},{"had_liked":false,"id":173346,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579508487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874475783","product_id":100039001,"comment_content":"打卡<br>一、什么是单元测试<br>单元测试相对于集成测试（Integration Testing）来说，测试的粒度更小一些。单元测试的测试对象是类或者函数，用来测试一个类和函数是否都按照预期的逻辑执行。这是代码层级的测试。<br><br>二、为什么要进行单元测试<br>(和Code Review一样，是保证代码质量最有效的两个手段之一)<br>1、能帮助发现代码中的bug；<br>2、写单元测试能帮助你发现代码上的设计问题<br>针对一个模块代码，很难写单元测试，可能是代码设计的不合理，比如，没有使用依赖注\t\t\t\t\t\t\t\t\t\t\t\t\t\t入、大量使用静态函数、全局变量、代码高度耦合等。<br>3、是对集成测试的补充<br>4、写单元测试的过程也是代码重构的过程<br>5、阅读单元测试可以快速熟悉代码<br>6、是TDD可落地执行的改进方案<br><br>三、如何写单元测试<br>对单元测试的代码质量要求可以放宽；<br>单元测试的覆盖率不要求100%；<br>单元测试不要依赖被测代码的具体实现逻辑；<br>单元测试框架无法测试，多半是因为代码的可测试性不好。<br>","like_count":1},{"had_liked":false,"id":169406,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1578328217,"is_pvip":false,"replies":[{"id":"65735","content":"可以参看我的例子","user_name":"作者回复","comment_id":169406,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379119,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5873295513","product_id":100039001,"comment_content":"写单元测试就是不知道如何命名单元测试的方法名，有时候这个方法都不知道如何描述好，","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474411,"discussion_content":"大话 写的有点啰嗦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573690454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169077,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578271732,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873239028","product_id":100039001,"comment_content":"打卡✔<br>我觉得写单元测试的难点是覆盖测试用例<br>我们出的bug 不都是没考虑特殊情况吗，如果单元测试可以想到全部的测试用例，代码有bug 的可能性应该不大","like_count":1,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120728,"discussion_content":"测试用例的完备性，确实有一定的技术含量，比较烧脑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578291612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169046,"user_name":"水银","can_delete":false,"product_type":"c1","uid":1045948,"ip_address":"","ucode":"0FD9C79590E484","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/bc/63be02b6.jpg","comment_is_top":false,"comment_ctime":1578265204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873232500","product_id":100039001,"comment_content":"我们部分项目是定制类型，客户变化需求的可怕，加上初期没有良好的接口设计，导致每次需求变化都会导致之前的单元测试不可用。对于定制型项目很难落地单元测试，个人感觉只有按照产品方式去做的项目，单元测试才更有价值。否则单元测试一达不到测试的效果，二增加了研发周期。但单元测试保证代码的正确性我是非常赞同的，如果项目允许及领导支持，我也是很推荐做单元测试！","like_count":1},{"had_liked":false,"id":358939,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1665045754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665045754","product_id":100039001,"comment_content":"单元测试其实提供了一种及时反馈，这给了调整代码一个抓手，是非常有用的。","like_count":0},{"had_liked":false,"id":358938,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1665045559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665045559","product_id":100039001,"comment_content":"我们项目目前没啥单元测试，除了文中提到的3个点，还有个问题。测试链路长，导致有些初始数据就比较难造，最终就没有多少人写单元测试了。","like_count":0},{"had_liked":false,"id":357781,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1663638317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663638317","product_id":100039001,"comment_content":"有一个问题：单元测试的代码是不是也需要持续维护？比如业务逻辑改变了，导致某个方法的逻辑变了，那么与这个方法相关联的单元测试代码也要跟着修改？","like_count":0},{"had_liked":false,"id":354437,"user_name":"少刷票圈多读书","can_delete":false,"product_type":"c1","uid":1514673,"ip_address":"陕西","ucode":"98147AEA7B61DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/b1/12edee24.jpg","comment_is_top":false,"comment_ctime":1660385127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660385127","product_id":100039001,"comment_content":"我觉得我们公司目前来看是做的比较好的，有以下几个方面：（1）本地安装了sonarlint插件，提交代码前瞅一眼（2）代码提交前会跑全部的单元测试和集成测试，要是有测试跑挂了或者代码覆盖率没达到要求是提交不了代码的（基于pmd、jacoco）（3）在CI&#47;CD上需要跑通过了测试才能打包部署代码（4）集成了sonarqube，定期查看sonarqube，修复新的bug和code smell。","like_count":0},{"had_liked":false,"id":350085,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656563616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656563616","product_id":100039001,"comment_content":"以前都是写单元测试，现在都是用postman测一下","like_count":0},{"had_liked":false,"id":347617,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654226618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654226618","product_id":100039001,"comment_content":"1.<br>依赖, 构造测试对象<br>2. <br>(1) 第一个元素, 比如 3,4,5 找比 2 大的元素<br>(2) 最后一个元素, 比如 3,4,6 找比 5 大的元素<br>(3) 没有答案, 比如 3,4,5 找比 5 大的元素<br>(4) 没有答案, 比如 3,4,5 找比 6 大的元素<br>(5) 有重复数字的情况 TODO:<br>(6) 数据长度很大, 考虑二分溢出<br>(7) 正数负数","like_count":0},{"had_liked":false,"id":338202,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1647351975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647351975","product_id":100039001,"comment_content":"单元测试维护起来太难了，有些方法依赖的数据的正确性 这些单元测试 维护数据接很繁琐","like_count":0},{"had_liked":false,"id":331441,"user_name":"李林","can_delete":false,"product_type":"c1","uid":1802703,"ip_address":"","ucode":"FF8678DB1AA39B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/cf/c0593385.jpg","comment_is_top":false,"comment_ctime":1642586189,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642586189","product_id":100039001,"comment_content":"单元测试不要依赖被测代码的具体实现逻辑<br><br>这句话理解不了，不依赖具体逻辑，怎么做内部逻辑的Mock呢，大神们看看这个问题","like_count":0},{"had_liked":false,"id":324190,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638330832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638330832","product_id":100039001,"comment_content":"&#47;&#47;搜索下一个位置<br>&#47;**<br>有哪些情况？ target 5<br>返回-1 表示没有此元素<br>[1,2,3,4,5]  &#47;&#47;最后一个位置 下一个元素为nil<br>[5,6,7,8,9,10] &#47;&#47;元素在第一个位置 6<br>[1,2,3,4,5,6,7] &#47;&#47;中间位置 下一个元素是 6<br>[1,2,3,4,5,5,6,7]  &#47;&#47; 有重复元素 下一个元素是6<br>[1,2,3,4,5,5,5,5]  &#47;&#47; 有重复元素 并且没有下一个元素 并且后续元素也不存在 为nil<br>[1,2,3,4,6,7]  &#47;&#47;没有此元素，nil<br>[1,2,3,4]  &#47;&#47;没有此元素，并且没有比他大的元素 那么为 nil<br>**&#47;<br>func binarySearch(arr []int, target int) int {<br>\tleft, right := 0, len(arr)<br>\tret := -1<br>\tfor left &lt; right {<br>\t\tmid := (left + right) &gt;&gt; 1<br>\t\tif arr[mid] == target {<br>\t\t\tret = mid<br>\t\t\tbreak<br>\t\t} else if arr[mid] &lt; target {<br>\t\t\tleft = mid + 1<br>\t\t} else if arr[mid] &gt; target {<br>\t\t\tright = mid<br>\t\t}<br>\t}<br><br>\tif ret == -1 {<br>\t\tif left &lt; len(arr) &amp;&amp; arr[left] == target {<br>\t\t\tret = left<br>\t\t} else {<br>\t\t\treturn -1<br>\t\t}<br>\t}<br><br>\t&#47;&#47;判断当前元素是否是最后一个位置<br>\tif ret == len(arr)-1 {<br>\t\treturn -1<br>\t}<br><br>\t&#47;&#47;查找是否有重复元素<br>\tfor i := ret; i &lt; len(arr); i++ {<br>\t\tif arr[i] != arr[ret] {<br>\t\t\tret = i<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\tif arr[ret] == target {<br>\t\treturn -1<br>\t}<br><br>\treturn arr[ret]<br><br>}","like_count":0},{"had_liked":false,"id":322446,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1637392741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637392741","product_id":100039001,"comment_content":"虽然我一直写着最low的单元测试, 也不太会用断言, 主要测试方法能不能跑通, 和预期的结果是否一样. 就已经能规避很多问题. ","like_count":0},{"had_liked":false,"id":314504,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1633156847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633156847","product_id":100039001,"comment_content":"测试用例这件事情，小公司确实不注意，大一点的公司才会重视，小公司只注重是否有这个功能，侧面反应出想要让自己的技能更加专业化，争取去大一点的公司还是必须的。<br>测试确实是件知易行难的事情，但是真正做了还是可以发现问题的，有时间可以尝试","like_count":0},{"had_liked":false,"id":285807,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1617017624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617017624","product_id":100039001,"comment_content":"嗯，写单元测试","like_count":0},{"had_liked":false,"id":284545,"user_name":"大风","can_delete":false,"product_type":"c1","uid":1640974,"ip_address":"","ucode":"583873CCAA2A67","user_header":"","comment_is_top":false,"comment_ctime":1616328928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616328928","product_id":100039001,"comment_content":"多谢大师点拨。有追求想上进的开发者还是要为自己的代码写好单元测试，欠下的债会要加倍奉还的，一定要有这样的心态。","like_count":0},{"had_liked":false,"id":281831,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1614917390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614917390","product_id":100039001,"comment_content":"我的观点是，有unittests和经过code review的代码，就像一个极具匠心的高手经受的产品，用着放心，质量有保证；很多人在成为高手之前需要有一颗成为匠人的心，慢慢修炼。很多时候需要和现实平衡，自己把握一个度。","like_count":0},{"had_liked":false,"id":266622,"user_name":"小妖","can_delete":false,"product_type":"c1","uid":1730626,"ip_address":"","ucode":"49C01DBFADF101","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","comment_is_top":false,"comment_ctime":1607418803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607418803","product_id":100039001,"comment_content":"代码重构的两大护航手段：1.单元测试 2.CodeReview","like_count":0},{"had_liked":false,"id":259326,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1604681343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604681343","product_id":100039001,"comment_content":"你说得很多，但我就是不写....<br>也不能这么不讲理，主要有几点吧。<br>1. 像你说的，没有测试参与的项目，你在谷歌写，但是工期给我很紧，测试催我提测，这个时候如果不是经常被测出很多bug，一般就不爱写，让测试去发现，我在修补就好了。。。。会写出很多难看代码。<br><br>2. 单测在大型系统中，其实很难整，工具方法还好，很多是需要调用外部接口的，但开发环境很多接口不一定是能用的，能用也不一定跟线上一直，就得造数据。还是中间调用，没法造。 只能测一小部分，自己当前项目就 形成破窗效应了，直接一键部署到云，集成测试吧。 反正现在集成测试部署接云后快捷方便。<br><br>3. 单元测试的入参往往是一个超大的dto，参数几个的还好，有些几十个，而且还有子类。。。情况很多。 <br><br>久而久之，现在就是写一些测试能不能跑通的用例，然后就直接部署到测试环境，进行测试了。<br>但环境部署成本比单测维护的开发环境更低，我们团队就慢慢不爱写单测了，至少不会考虑覆盖率，只会写可通测试。 ","like_count":0},{"had_liked":false,"id":259173,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604646731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604646731","product_id":100039001,"comment_content":"我一般单元测试很少写，一般就是写接口，自己用postman跑一遍，测几组数据，实际上和单元测试一样，只不过是没有落到代码层面而已。但是没有测试，肯定是不行的，你连能不能跑通，会不会报错都不能保证。但是多端多种情况且还有别的任务，有些实在还是要依赖测试来测。","like_count":0},{"had_liked":false,"id":256840,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1603763589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603763589","product_id":100039001,"comment_content":"保证重构不出错最有效的办法就是单元测试。<br>单元测试重不重要？重要！单元测试有没有用？有用！单元测试写没写？没有！<br>这就是我的现状，从学代码开始就知道单元测试很重要，直到现在，也只在上个月尝试写过一次单元测试。<br>开始肯定要经历痛苦的挣扎，期望后期靠习惯驱动。纵观评论区，放弃单元测试有各种各样的理由，坚持单元测试的却只谈习惯，习惯了写单元测试。<br>起初以为单元测试导致代码量翻倍，会同时导致时间也翻倍，其实设计和编码的时间都是一半的一半，单元测试不需要再有更多的设计，所以会节约一半的时间，它真的没有想象中的那么难，只是因为我从来没有真正的开始。","like_count":0},{"had_liked":false,"id":255891,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603452585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603452585","product_id":100039001,"comment_content":"目前大多公司，特别是中小公司开发人员都不会做单元测试，公司的业务竞争导致项目的预算压缩的很厉害，在开发平台层面，为了能获得最大收益我们使用了模版生成项目的骨架代码，编写开发规范限制开发行为等手段来保证时间进度和代码的正确性。但是上线过程中经历了集成测试，准生产测试后还是会存在很多的bug，综上结合我的经历，还是有必要做代码的单元测试，另外还要提高开发人员的测试案例的思维，如果时间实在不够要有一个或多人经验丰富的人做代码的review把关，确保代码质量。","like_count":0},{"had_liked":false,"id":255566,"user_name":"slyvia_li","can_delete":false,"product_type":"c1","uid":2181110,"ip_address":"","ucode":"97B609140E69FD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Etr1TYTsMiazWFoGnReIVP1EW3RxWPMqIqH3aJ2AziaEuqNhBMtUooWabiaDsciaovXpUwr1K60txjYowWPHEFzpXQ/132","comment_is_top":false,"comment_ctime":1603373837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603373837","product_id":100039001,"comment_content":"public static int findFirstEqualBiggerIdxOfSortedArray(int[] array, int num) {<br>        if (array == null || array.length == 0) return -1;<br>        int left = 0, right = array.length - 1, mid;<br>        if (num &gt; array[right])  return -1;<br>        if (num &lt;= array[left])  return left;         <br>        while (right - left - 1 &gt; 0) {<br>            mid = (left + right) &#47; 2;<br>            if (num &lt;= array[mid]) {<br>                right = mid;<br>            }  else {<br>                left = mid;<br>            }<br>            if (num &lt;= array[left]) {<br>                return left;<br>            }<br>        }<br>        return right;<br>    }","like_count":0},{"had_liked":false,"id":252447,"user_name":"Vivion","can_delete":false,"product_type":"c1","uid":1242310,"ip_address":"","ucode":"C62C4F46B8EB4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c6/aed9e44a.jpg","comment_is_top":false,"comment_ctime":1602302533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602302533","product_id":100039001,"comment_content":"之前我们团队也是不写单元测试，提测前全靠手工功能测试保证质量。很容易过分自信觉得没问题，而且自测的时候用例又不列全，结果一提测一堆 bug。<br>后来上面开始要求单元测试，给所有人安排了一个月的时间补。但是大家的积极性很不高，觉得代码现在也能用，为什么要为了纸面上的覆盖率去做这样的事，于是测试代码就写得比较敷衍。如果想拿这些测试代码来看服务在干什么，还不如看设计文档。<br>我自己呢就走捷径直接写了主要功能的集成测试，纸面上的代码覆盖率有了，加新功能或重构的时候也能测出问题，解放了手动的功能测试时间。<br>所以单元测试还是要早落地，才更易行，也早受惠。","like_count":0},{"had_liked":false,"id":250603,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1601167989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601167989","product_id":100039001,"comment_content":"特别想问下王争老师，测试用户界面应该怎么写单元测试呢？还有就是一个负责curd的数据管理类怎样写单元测试？","like_count":0},{"had_liked":false,"id":246745,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599469335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599469335","product_id":100039001,"comment_content":"问题一：<br>1、有<br>2、不充分<br>3、不好测试，耦合度愿意，<br>4、mock出其他类来解决的","like_count":0},{"had_liked":false,"id":245941,"user_name":"ThinkingQuest","can_delete":false,"product_type":"c1","uid":1118560,"ip_address":"","ucode":"597D0C00DAEFE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0SDRac7XoordnKYgDLhz5wxAOtE6xqcsSywsywEtKQAR7xicBZQ6ceYftfZjl4Ivq3a5dzvRhYkn2GcUWiaQK7ZQ/132","comment_is_top":false,"comment_ctime":1599115814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599115814","product_id":100039001,"comment_content":"单元测试难落地，不是因为大家不愿意写。 是因为很多时候真的不知道怎么写。 <br><br>期待有个能详解单元测试最佳实践的课程。","like_count":0},{"had_liked":false,"id":244745,"user_name":"庄坤","can_delete":false,"product_type":"c1","uid":1610407,"ip_address":"","ucode":"5E1C3E234BB793","user_header":"https://static001.geekbang.org/account/avatar/00/18/92/a7/b16dfff3.jpg","comment_is_top":false,"comment_ctime":1598663278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598663278","product_id":100039001,"comment_content":"公司说要做单元测试，结果压根没有考虑测试需要的时间，导致单元测试就是为了应付要求，跑到够高就完事，","like_count":0},{"had_liked":false,"id":244520,"user_name":"蛀牙","can_delete":false,"product_type":"c1","uid":1153349,"ip_address":"","ucode":"F765A67DFEADFD","user_header":"","comment_is_top":false,"comment_ctime":1598554219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598554219","product_id":100039001,"comment_content":"我们组就要求尽力达到100%的unit test coverage, 我觉太高了，有时候就是为了测试而测试，会出现为了测试而做一些不必要的重构。","like_count":0},{"had_liked":false,"id":244508,"user_name":"蛀牙","can_delete":false,"product_type":"c1","uid":1153349,"ip_address":"","ucode":"F765A67DFEADFD","user_header":"","comment_is_top":false,"comment_ctime":1598542004,"is_pvip":false,"replies":[{"id":"90143","content":"如果静态函数需要mock的话，mock起来比较难","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1598835624,"ip_address":"","comment_id":244508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598542004","product_id":100039001,"comment_content":"老师提到：“2. 写单元测试能帮你发现代码设计上的问题 ... 没有使用依赖注入、大量使用静态函数、全局变量、代码高度耦合等。&quot;<br><br>为何大量使用静态函数不好？是因为难以mock影响测试的细度和性能吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473829,"discussion_content":"可以达到的 不用1000的 就怕你自己不好好学 😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573257270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242742,"user_name":"scarlett","can_delete":false,"product_type":"c1","uid":1104937,"ip_address":"","ucode":"F30414146C709F","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/29/33d0d7ff.jpg","comment_is_top":false,"comment_ctime":1597829129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597829129","product_id":100039001,"comment_content":"真的是一门心法课， 边看就迫不及待想去重构自己的代码","like_count":0},{"had_liked":false,"id":240082,"user_name":"李阳","can_delete":false,"product_type":"c1","uid":1092806,"ip_address":"","ucode":"22492F371F4C84","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/c6/30820fa2.jpg","comment_is_top":false,"comment_ctime":1596759001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596759001","product_id":100039001,"comment_content":"以前写过。后来破窗了就再没写过了，毕竟正经的代码都写不完，工期太紧。","like_count":0},{"had_liked":false,"id":239265,"user_name":"Geek_cde7db","can_delete":false,"product_type":"c1","uid":2096765,"ip_address":"","ucode":"D8A7F8EA700009","user_header":"","comment_is_top":false,"comment_ctime":1596470283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596470283","product_id":100039001,"comment_content":"之前写的代码量不多，基本靠思维测试，费脑子。<br>如果能领略到单元测试的魅力，或许。。。","like_count":0},{"had_liked":false,"id":236237,"user_name":"Geek_jackli","can_delete":false,"product_type":"c1","uid":2052007,"ip_address":"","ucode":"DD6B91E486DE40","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLajLoBBBPgMCl5eibqWpzUSKtJRtNGaYzkKeNTCFY1IeicjpXSxDmEjf0z1JzjtzUR3maJXQzebSWA/132","comment_is_top":false,"comment_ctime":1595375229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595375229","product_id":100039001,"comment_content":"小公司，能用就行，别说单元测试了……","like_count":0},{"had_liked":false,"id":232049,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1593844005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593844005","product_id":100039001,"comment_content":"上一个讨论里本来想写入单元测试的，但是说实话自己实践的不多。unity在后来引入了单元测试功能，小试过一些，但是如文章中所说 整体开发环境是快糙猛。迭代太快根本没时间写 ","like_count":0},{"had_liked":false,"id":231762,"user_name":"Jerry Wu","can_delete":false,"product_type":"c1","uid":1203567,"ip_address":"","ucode":"AD29B6942AAAA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","comment_is_top":false,"comment_ctime":1593766490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593766490","product_id":100039001,"comment_content":"在小公司，单元测试为什么没法推行？<br><br>1. 没有写测试的意识，写好业务代码就行，有那个时间还不如刷知乎；<br>2. 代码质量很难量化，相比之下，没按时完成任务，这个标准就一目了然；<br>3. 缺乏激励，你写了测试，代码质量很高，那又如何？没有奖金，也没晋升，久而久之，就没动力了。","like_count":0},{"had_liked":false,"id":228122,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1592561400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592561400","product_id":100039001,"comment_content":"以前从来没有写过单元测试，前一个月刚刚来到新公司，领导要求学会使用单元测试，默默说一声，现在项目没有测试，全靠开发自测，不写单元测试慌的一笔呀","like_count":0},{"had_liked":false,"id":221123,"user_name":"张晋 🇨🇳","can_delete":false,"product_type":"c1","uid":2002268,"ip_address":"","ucode":"DC20FB284DB730","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8d/5c/a3e67232.jpg","comment_is_top":false,"comment_ctime":1590410552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590410552","product_id":100039001,"comment_content":"正好最近在学习go语言，被go语言的测试性能所吸引，所以用go语言实现一下<br>&#47;&#47;binary_search<br>package binary_search<br><br>import &quot;errors&quot;<br><br>var ArrayCanNotBeEmptyError  = errors.New(&quot;array can not be empty&quot;)<br>var TargetIsNotFoundError  = errors.New(&quot;can not find required target&quot;)<br><br>func binarySearch(array []int ,target int)(index int,err error){<br><br>\tif len(array)==0{<br>\t\terr = ArrayCanNotBeEmptyError<br>\t\treturn<br>\t}<br>\tstart:=0<br>\tend := len(array)-1<br>\tfor true{<br>\t\tif end&lt;start{<br>\t\t\terr = TargetIsNotFoundError<br>\t\t\treturn<br>\t\t}<br>\t\tmid := (start +end) &#47;2<br>\t\tif array[mid] &gt; target{<br>\t\t\tend  = mid-1<br>\t\t}else if array[mid]&lt;target{<br>\t\t\tstart = mid+1<br>\t\t}else{<br>\t\t\tindex = mid<br>\t\t\treturn<br>\t\t}<br>\t}<br>\treturn<br>}<br>&#47;&#47; test<br>package binary_search<br><br>import &quot;testing&quot;<br><br><br>func Test_binarySearch(t *testing.T) {<br>\ttype args struct {<br>\t\tarray  []int<br>\t\ttarget int<br>\t}<br>\ttests := []struct {<br>\t\tname      string<br>\t\targs      args<br>\t\twantIndex int<br>\t\terr   error<br>\t}{<br>\t\t&#47;&#47; TODO: Add test cases.<br>\t\t{<br>\t\t\t&quot;len(array) == 0&quot;,<br>\t\t\targs{[]int{},1},<br>\t\t\t0,<br>\t\t\tArrayCanNotBeEmptyError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) == 1 &amp;&amp; target not found&quot;,<br>\t\t\targs{[]int{2},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) == 1 &amp;&amp; target is found&quot;,<br>\t\t\targs{[]int{1},1},<br>\t\t\t0,<br>\t\t\tnil,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is odd &amp;&amp; target not found &quot;,<br>\t\t\targs{[]int{2,3,4},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is odd &amp;&amp; target  found &quot;,<br>\t\t\targs{[]int{1,3,4},1},<br>\t\t\t0,<br>\t\t\tnil,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is even &amp;&amp; target not found &quot;,<br>\t\t\targs{[]int{2,3,4,5},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is even &amp;&amp; target  found &quot;,<br>\t\t\targs{[]int{2,1,4,5},1},<br>\t\t\t1,<br>\t\t\tnil,<br>\t\t},<br>\t}<br>\tfor _, tt := range tests {<br>\t\tt.Run(tt.name, func(t *testing.T) {<br>\t\t\tgotIndex, err := binarySearch(tt.args.array, tt.args.target)<br>\t\t\tif err != tt.err {<br>\t\t\t\tt.Errorf(&quot;binarySearch() error = %v, wantErr %v&quot;, err, tt.err)<br>\t\t\t\treturn<br>\t\t\t}<br>\t\t\tif gotIndex != tt.wantIndex {<br>\t\t\t\tt.Errorf(&quot;binarySearch() gotIndex = %v, want %v&quot;, gotIndex, tt.wantIndex)<br>\t\t\t}<br>\t\t})<br>\t}<br>}","like_count":0},{"had_liked":false,"id":219858,"user_name":"Jerry.hu","can_delete":false,"product_type":"c1","uid":1004984,"ip_address":"","ucode":"A2A918DEE6FA2F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/b8/a3dbb4f2.jpg","comment_is_top":false,"comment_ctime":1590111123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590111123","product_id":100039001,"comment_content":"1小时写代码0.5小时写注释2小时写单元测试","like_count":0},{"had_liked":false,"id":216918,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1589368995,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589368995","product_id":100039001,"comment_content":"【设计模式笔记28】20200513<br>再想一个问题怎么才算一个合格的单元测试？个人觉得至少要覆盖正常和异常场景，首先把代码当做一个黑盒，进行功能性测试。确保基本功能没问题。然后进行白盒测试，作为开发者知道内部有哪些细节，那么就需要对这些细节单独测试。确保功能和细节都是正确的才是合格的测试。写单元测试有两个极端，只写基本的功能测试以及为了覆盖率写了若干非必要的测试，这两种都是不可取的。在此基础上还可以更进一步，多思考异常的场景，临界条件等。","like_count":0},{"had_liked":false,"id":215495,"user_name":"充满希望的一天","can_delete":false,"product_type":"c1","uid":1907531,"ip_address":"","ucode":"AEBE5B5072F964","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/4b/33f5a948.jpg","comment_is_top":false,"comment_ctime":1589001863,"is_pvip":false,"replies":[{"id":"86261","content":"是的~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594389251,"ip_address":"","comment_id":215495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589001863","product_id":100039001,"comment_content":"单元测试主要是检查service逻辑么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494457,"discussion_content":"是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594389251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213201,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1588329377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588329377","product_id":100039001,"comment_content":"第二个问题：由于是递增数组，测试给定值可以是小于数组下标0、大于数组最后一个数的边界测试，还有给定值是否不是数字","like_count":0},{"had_liked":false,"id":209181,"user_name":"70","can_delete":false,"product_type":"c1","uid":1081899,"ip_address":"","ucode":"A5884B2BDDAB70","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/2b/cf93c499.jpg","comment_is_top":false,"comment_ctime":1587517561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587517561","product_id":100039001,"comment_content":"前两天一个开发任务，我也尝试了一下写单元测试。确实单元测试比较耗时间，但是单元测试，对于代码之间提升很大，只要设计的单元测试用例没问题，代码模块就不太会出现bug。但是由于业务场景的限制可能代码需要伴随业务调整。由于公司框架里面的大量单例模式的使用，但这些实例不是通过依赖注入的方式，所以不得不使用一下反射去修改实例另外mock。整个流程下来感受是：先设计单元测试，再写代码，可以提高代码质量。单元测试可以反向检测代码是否符合高内聚，低耦合","like_count":0},{"had_liked":false,"id":208415,"user_name":"雪吖头","can_delete":false,"product_type":"c1","uid":1910984,"ip_address":"","ucode":"ED6E96979DE27D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/28/c8/13d82fec.jpg","comment_is_top":false,"comment_ctime":1587353691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587353691","product_id":100039001,"comment_content":"最简单的也是最容易忽视的。王老师的这篇文章对单元测试作用的讲解，让我印象深刻。在以后的工作学习中我也要有意识的去写单元测试，同时，不断思考 如何去把单元测试写好。","like_count":0},{"had_liked":false,"id":208139,"user_name":"浮生醉","can_delete":false,"product_type":"c1","uid":1783354,"ip_address":"","ucode":"7549E41BD65511","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/3a/335db90a.jpg","comment_is_top":false,"comment_ctime":1587283385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587283385","product_id":100039001,"comment_content":"公司现在主要就是用DBUnit和Mock来写单测，现在为了补之前代码的单测写的比较泛，后面还是需要针对一些边界条件多写一些，一来清晰的知道自己代码的边界条件在哪，二来也利于重构后验证","like_count":0},{"had_liked":false,"id":206646,"user_name":"...","can_delete":false,"product_type":"c1","uid":1356225,"ip_address":"","ucode":"D2E6EBA5E9B6F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","comment_is_top":false,"comment_ctime":1586913212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586913212","product_id":100039001,"comment_content":"接口测试会不会比单元测试会好一点呢？ 因为单元测试，在重构的过程中很可能会修改 移除一些重复的逻辑，或者是说重命名函数， 或者是重复的代码提到函数中。 这样有的单元测试就会运行失败了。 接口测试相对而言不会涉及到具体的代码层面，但是可以保证接口的逻辑不会发生变化。但是接口测试比较烦的是有的地方没办法测试，或者是说测试会耗费很大的精力。但是好处也是显而易见的。 而且如果接手一个旧项目的话，从接口测试我觉得会更能够了解对应的功能。","like_count":0},{"had_liked":false,"id":206200,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1586822855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586822855","product_id":100039001,"comment_content":"我们的单元测试覆盖率很低，经常是测试发现了bug再写个单元测试验证一下。当然核心的业务逻辑会写，比如资金的增减，并发操作等。单元测试的用例设计确实是个细活，要求程序员熟悉业务才能写出较好的用例。","like_count":0},{"had_liked":false,"id":205857,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586747618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586747618","product_id":100039001,"comment_content":"打卡28","like_count":0},{"had_liked":false,"id":202598,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586012984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586012984","product_id":100039001,"comment_content":"以前公司没有单元测试，也没有 code review ，我以前就觉得单元测试很重要，这次看了王争老师给出的理由，更有必要写了。<br><br>以后尽量写代码都写上单元测试","like_count":0},{"had_liked":false,"id":199912,"user_name":"杜","can_delete":false,"product_type":"c1","uid":1236070,"ip_address":"","ucode":"E372639657C9AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/66/5861451b.jpg","comment_is_top":false,"comment_ctime":1585498345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585498345","product_id":100039001,"comment_content":"比如一个public的接口，重度依赖数据库，此外还需要调用一些private的方法，一些其他微服务模块的接口，这样的情况应该怎么写单测呢？其实就是不明白哪些功能应该被单测测试到哪些不需要被单测测试到？private函数会包括更细粒度的业务处理逻辑，但是单测一般都是真的public方法的。","like_count":0},{"had_liked":false,"id":198225,"user_name":"Sissi.C","can_delete":false,"product_type":"c1","uid":1748046,"ip_address":"","ucode":"689AA6A8BE1687","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ac/4e/08b0644b.jpg","comment_is_top":false,"comment_ctime":1585419554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585419554","product_id":100039001,"comment_content":"我很想知道别人家的技术团队是怎么坚持不懈的写单元测试的，论一个码农的自我修养……","like_count":0},{"had_liked":false,"id":197498,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1585382005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585382005","product_id":100039001,"comment_content":"同作者所说，我们一般任务不紧会写单元测试或集成测试，但是需求一多就实在没办法，代码质量难以确保","like_count":0},{"had_liked":false,"id":197409,"user_name":"秀才","can_delete":false,"product_type":"c1","uid":1748463,"ip_address":"","ucode":"201FE03405A10B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ad/ef/5aae45db.jpg","comment_is_top":false,"comment_ctime":1585374673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585374673","product_id":100039001,"comment_content":"同意","like_count":0},{"had_liked":false,"id":194129,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1585028667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585028667","product_id":100039001,"comment_content":"我所在的团队 要求必须写单元测试用例 覆盖率要求在70%以上 否则代码提交时无法通过CI 也就是硬性规定","like_count":0},{"had_liked":false,"id":190093,"user_name":"悟","can_delete":false,"product_type":"c1","uid":1085006,"ip_address":"","ucode":"9F56AD21CCC7E1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/4e/985caf6b.jpg","comment_is_top":false,"comment_ctime":1584601879,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1584601879","product_id":100039001,"comment_content":"重构前领头人务必有以下能力<br>1、业务必须非常熟悉<br>2、有设计意识<br>3、牛逼的技术能力","like_count":0},{"had_liked":false,"id":189825,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584572978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584572978","product_id":100039001,"comment_content":"单元测试真的是我的一个痛点","like_count":0},{"had_liked":false,"id":188843,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584425079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584425079","product_id":100039001,"comment_content":"老师，如何测试一个单例是线程安全的。并发和异步的单元模式应该是不太好写的。老师有什么经验可以分享吗？","like_count":0},{"had_liked":false,"id":183773,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1583132262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583132262","product_id":100039001,"comment_content":"以前偶尔会有单元测试的习惯，但是后面发现改动一下逻辑单元测试也要跟着改，就很难坚持了。但是我认为单元测试非常有必要的。自己写好了后，写单元测试时就会发现很多遗漏点，或者没考虑到的地方，等于重新梳理一下需求。而且写代码过程中去修改bug，比后面再去修改要快很多。","like_count":0},{"had_liked":false,"id":183463,"user_name":"aderm","can_delete":false,"product_type":"c1","uid":1068825,"ip_address":"","ucode":"1C8FCBA02AEA34","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/19/05834ca2.jpg","comment_is_top":false,"comment_ctime":1583047001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583047001","product_id":100039001,"comment_content":"打卡 写了例子。https:&#47;&#47;github.com&#47;aderm&#47;JavaTest","like_count":0},{"had_liked":false,"id":182822,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582870866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582870866","product_id":100039001,"comment_content":"确实就像老师说的，只有真正写过单元测试的，才会对文章中的很多内容有很强的共鸣。<br>自己亲身体会有两点比较深刻，一个是如果程序设计的不合理，单元测试就会非常难写；二是写单元测试的时候往往会发现程序中很多的细小的逻辑bug","like_count":0},{"had_liked":false,"id":182784,"user_name":"Moyou","can_delete":false,"product_type":"c1","uid":1206789,"ip_address":"","ucode":"9EF86F426D5873","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/05/5154e91e.jpg","comment_is_top":false,"comment_ctime":1582865963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582865963","product_id":100039001,"comment_content":"我在 Google 的时候，很多项目几乎没有测试团队参与，代码的正确性完全靠开发团队来保障，线上 bug 反倒非常少。 这句话我深认同。很多同学还是不敢没有任何测试就上线的。而程序自己测试往往比测试同学测试靠谱(因为现在很多的测试同学也就是功能性测试，点点没有报错就过了).","like_count":0},{"had_liked":false,"id":182585,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582812201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582812201","product_id":100039001,"comment_content":"如果模块解耦，单元测试就比较好写，不然写单元测试就太痛苦了，各种mock。如果是自己的代码，发现单元测试难写，我首先想到的是重构代码，一般都是代码设计有问题，耦合太严重。另外单元测试也没有针对每个类写，有时候是针对整个功能模块写单元测试，尽量覆盖所有的场景，这样的单元测试也很容易读。另外如果之后修复了bug，也可以针对bug写单元测试。","like_count":0},{"had_liked":false,"id":182524,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582802053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582802053","product_id":100039001,"comment_content":"对于问题一,我只能说很抱歉,虽然,一直来说喊着进行书写完成进行单元测试,但是就是一句空话罢了,而实际上,对于国内互联网公司一直要求快糙猛的进度开发,贯彻执行单元测试并不容易<br>","like_count":0},{"had_liked":false,"id":180062,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1582176585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582176585","product_id":100039001,"comment_content":"公司领导对于重构的错误认识，让我们在重构这条路上也越走越远，更不用说自己去做单元测试。","like_count":0},{"had_liked":false,"id":179259,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1581946861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581946861","product_id":100039001,"comment_content":"没有写单元测试","like_count":0},{"had_liked":false,"id":178539,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1581736990,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1581736990","product_id":100039001,"comment_content":"自己小组的项目，是有单元测试，但是个人感觉很多时候都是为了把写的case跑通来写的，不是像软件工程测试方法中写那么多测试样例。","like_count":0},{"had_liked":false,"id":178472,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1581695283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581695283","product_id":100039001,"comment_content":"小争哥也只能孤独的写单元测试……<br>我觉得目前环境下对外API层的单元测试能覆盖了就已经很好了","like_count":0},{"had_liked":false,"id":175534,"user_name":"Geek_ab3d9a","can_delete":false,"product_type":"c1","uid":1550553,"ip_address":"","ucode":"1AFEE5FA59D470","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eol8MiawYVfCtkaFL9DFGoWpuajsKicwyt7IWm07JfrLMDuksEZJqia4Rbicw0biayokhgvSK0rUXIAngQ/132","comment_is_top":false,"comment_ctime":1580740205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580740205","product_id":100039001,"comment_content":"老师  我们的项目都很小，一般10-20人&#47;天就能完成整个项目。后端接口大概几十个。项目时间很紧。现在我们都没有写单元测试，请问这种情况是否需要写单元测试？","like_count":0},{"had_liked":false,"id":174848,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580435019,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580435019","product_id":100039001,"comment_content":"如果是spring的项目，一些对象都是框架自动注入的，怎么写单元测试呢？","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240954,"discussion_content":"Spring-Test  了解一下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587391856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174328,"user_name":"卓璋","can_delete":false,"product_type":"c1","uid":1242280,"ip_address":"","ucode":"D98508121AFE63","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/a8/69b98112.jpg","comment_is_top":false,"comment_ctime":1580143896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580143896","product_id":100039001,"comment_content":"对于前端，页面到了下个版本可能需求变更，写的测试也废了，这些作者怎么看","like_count":0},{"had_liked":false,"id":173004,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1579405219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579405219","product_id":100039001,"comment_content":"对于比较复杂的代码段可以试着写下单元测试，这样可以减少写的代码bug","like_count":0},{"had_liked":false,"id":172883,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1579350396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579350396","product_id":100039001,"comment_content":"当前团队没有写单元测试的习惯，更不会code review。提过建议但不被重视，大家更喜欢做容易被看到的事，比如完成了某个功能，虽然代码shi一样。所以只能自我要求完善单元测试，review项目代码，看到不好的地方，思考是否有更好的设计实现。","like_count":0},{"had_liked":false,"id":172302,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1579146346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579146346","product_id":100039001,"comment_content":"现在的项目，领导强烈要求我写单元测试，而且对于新功能编写，都是一而再再而三地嘱咐写单元测试。看了评论区的很多同学，感觉我好幸福。","like_count":0},{"had_liked":false,"id":171295,"user_name":"睁眼看世界","can_delete":false,"product_type":"c1","uid":1206388,"ip_address":"","ucode":"F94CF34BC5B2AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/74/461b202d.jpg","comment_is_top":false,"comment_ctime":1578895952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578895952","product_id":100039001,"comment_content":"  老师，单元测试一般是初步开发的时候会编写，后续修改或者改动，几乎没有同步。另外想请教一个问题，单元测试的粒度。例如在MVC模型中，是需要每一层都编写单元测试？还是针对controller层即可？","like_count":0},{"had_liked":false,"id":171244,"user_name":"debug","can_delete":false,"product_type":"c1","uid":1746558,"ip_address":"","ucode":"B7B18146BB30DB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a6/7e/83d6b7dd.jpg","comment_is_top":false,"comment_ctime":1578885909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578885909","product_id":100039001,"comment_content":"最近看了下gtest","like_count":0},{"had_liked":false,"id":171155,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1578875183,"is_pvip":false,"replies":[{"id":"67749","content":"能不能给个具体的代码例子呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580122177,"ip_address":"","comment_id":171155,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578875183","product_id":100039001,"comment_content":"请问老师，个人实践中最大的困惑在于对异步逻辑的单元测试要如何写？<br>比如函数A的调用是没有返回值的，返回值在回调函数B中体现","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481251,"discussion_content":"能不能给个具体的代码例子呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142746,"discussion_content":"在哪里体现不重要，重要的是能拿到最终结果。如你的例子。回调函数的结果肯定不会丢掉，要么持久化，要么扔到别的线程再处理。可以mock持久化的逻辑，得到持久化前的结果在assert，不一定要捕获到每个执行线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171098,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1578844213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578844213","product_id":100039001,"comment_content":"作为敏捷开发团队的一员的话，TDD是我们团队非常推崇的一种方式，而保证单元测试的编写覆盖率能够达到标准的前提，是团队给每个人编写代码预留了编写单元测试的时间，以及有讨论的过程中足够清晰的表明了任务的验收条件，可能发生的情况等。当然，这也是在于从零开发原生项目的前提下，如果是接受的旧项目，庞杂的源代码以及老旧的逻辑互相依赖严重，写单元测试是真的难以推行，除非能够选择架构重构，否则也无处下手","like_count":0},{"had_liked":false,"id":171054,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1578834000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578834000","product_id":100039001,"comment_content":"平时主要是做数据处理，也得慢慢把单元测试做起来了","like_count":0},{"had_liked":false,"id":170410,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1578587952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578587952","product_id":100039001,"comment_content":"团队对单测有想法，但是也没有落实下来，发布的时候也不太关注，保证现有单测都要过就行。<br>自己给自己的要求是新增的代码都尽量加上单测。<br>但是现在写业务接口，有点不知道该如何写单测，覆盖率到是上去了，但是觉得自己没有把握到写单测的实质，测试业务。<br>就是有这样一种感觉，业务分散在controler service  dao层，每层都是mock下层的情况，每层的分支也不多，单测覆盖率达到很高，但是觉得还是没有测试到点儿上，该错还是错。<br>这就很让人心累⊙﹏⊙","like_count":0},{"had_liked":false,"id":169987,"user_name":"杨陆伟","can_delete":false,"product_type":"c1","uid":1108457,"ip_address":"","ucode":"3BC968447406EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/e9/1f95e422.jpg","comment_is_top":false,"comment_ctime":1578489291,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578489291","product_id":100039001,"comment_content":"说的太好了，光靠leader督促是没有用的，必须团队成员从心底认可这件事情","like_count":0},{"had_liked":false,"id":169983,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578487642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578487642","product_id":100039001,"comment_content":"单元测试的框架一定要好用，能帮助开发人员，提高自测效率，开发人员可以写用例。<br>一旦习惯养成，用例数量及覆盖率到一定规模。<br>对交付质量，代码重构起到事半功倍的效果。<br>","like_count":0},{"had_liked":false,"id":169718,"user_name":"朋便天下","can_delete":false,"product_type":"c1","uid":1034495,"ip_address":"","ucode":"2940358BA08241","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/ff/374f2c0f.jpg","comment_is_top":false,"comment_ctime":1578412172,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578412172","product_id":100039001,"comment_content":"目前参与的项目要求写单元测试；<br>整个工程要求条件覆盖率达到95%以上，使用了JUnit和mock；<br>在好不容易达到了95以上之后，因为一些人修改了原有的代码之后，没有修改UT，导致覆盖率又下去了，所以又得重新补ut，如此反复多次。<br>而且有些方法真的是可测试性不好（估计是设计问题），内部调用了很多的私有方法，覆盖率很难上去。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142783,"discussion_content":"private方法大部分情况都可以改成protected，如果实在洁癖，改成final protected总可以吧，这样就可以分看写ut了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169690,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1578406868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578406868","product_id":100039001,"comment_content":"和 @刘大明 差不多的情况 我也很无奈😂","like_count":0},{"had_liked":false,"id":169451,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1578359470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578359470","product_id":100039001,"comment_content":"单元测试很重要，之前写某项目的时间足够多，写过场景覆盖率很广的测试案例结果就是0bug上线.<br>最近的项目由于开发时间紧，现在有bug了...","like_count":0},{"had_liked":false,"id":169432,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1578356121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578356121","product_id":100039001,"comment_content":"现在就在写单元测试，感觉这个需要对原程序很懂才行。还有单元测试虽然粒度小，不过有的依赖很多的话，需要各种Mock，感觉也不简单啊…… 不过香是香","like_count":0},{"had_liked":false,"id":169377,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1578323885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578323885","product_id":100039001,"comment_content":"刚开始接触单元测试的时候。会编写完整的单元测试，但是当时接触的是CURD的接口，比如根据条件批量查询符合条件的员工的一个service接口，然后部分数据通过缓存，部分数据通过db组合在一起，比如调用cacheManager + UserMapper,测试这个接口就需要mock cacheManager和UserMapper,导致代码测试起来比较麻烦，大量时间花在编写mock对象，但是其实和这个接口对外的功能又没关系，是内部的实现逻辑有关系。这一点比较疑惑，觉得这样测试已经违背了理解代码内部逻辑的原则，但是不构造这些异常，这个接口又没什么好测试的，对于代码的可测试性的概念，如何提升可测试性，还是模糊的。<br>后面虽然没有坚持写完整的单元测试了，但是程序的正确性流程。还是会编写单元测试走走一遍。","like_count":0},{"had_liked":false,"id":169372,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578323355,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578323355","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;zhangw&#47;misc.java.jimohou.me&#47;blob&#47;master&#47;src&#47;test&#47;java&#47;test&#47;geekbang&#47;design&#47;pattern&#47;beauty&#47;artical28&#47;HomeWorkTest.java","like_count":0},{"had_liked":false,"id":169294,"user_name":"七楼","can_delete":false,"product_type":"c1","uid":1491023,"ip_address":"","ucode":"106856DF5F8F12","user_header":"https://static001.geekbang.org/account/avatar/00/16/c0/4f/db7f2ab2.jpg","comment_is_top":false,"comment_ctime":1578309031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578309031","product_id":100039001,"comment_content":"单元测试  让我的逻辑更缜密了  的确有好处  而且bug也少","like_count":0},{"had_liked":false,"id":169293,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1578308428,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578308428","product_id":100039001,"comment_content":"程序员这一行业本该是智力密集型的，但现在很多公司把它搞成劳动密集型的。<br>——————————————————<br>你这句话道出了现实！哈哈😄","like_count":0,"discussions":[{"author":{"id":1506974,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","nickname":"路伴友行","note":"","ucode":"96B54B7EEAEDAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122232,"discussion_content":"说明老板智商不够😂😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578328472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169292,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1578308392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578308392","product_id":100039001,"comment_content":"项目越来越大，和复杂化，每次新增功能或者改造测试都很麻烦，还容易测试不到。就是单元测试不够，今年目标是把核心功能加上单元测试，估计能节省大量的测试时间。<br>单元测试能检验代码好坏，是不是高耦合，确实，如果不重构，单元测试都没法写了。","like_count":0},{"had_liked":false,"id":169213,"user_name":"JamesPxy","can_delete":false,"product_type":"c1","uid":1320179,"ip_address":"","ucode":"558D707463589D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q2LT8JFWSghiaVbMMOkOkLnuibEqG2YOyEdCA5icEZH3Qpd9pL23mpzic9tWwyiciaBicE4YPMVnITOodulwG2SS75r2w/132","comment_is_top":false,"comment_ctime":1578293620,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578293620","product_id":100039001,"comment_content":"单元测试大法好，知易行难！","like_count":0},{"had_liked":false,"id":169161,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1578282030,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1578282030","product_id":100039001,"comment_content":"我要吐槽下我现在做的项目，代码设计的太烂了，注释太少，而且注释不正确，有的方法名都不正确，误导功能逻辑，因为逻辑耦合在一起，出现了很多bug，这几个月来一直在填坑。在填坑的过程中，体会到这些烂代码是如何违反设计原则（比如整个项目就两个sql.xml文件，啥功能都合并在一个大而全的dao类中），修改bug往里面添加代码时会思考添加的这行代码是不是更让人读不懂，维护性越差。感谢老师的这个专栏，让我对代码设计感受如此之深，更多的深刻体会和实践才能有质量的提升。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142801,"discussion_content":"拆成几个dao应该是第一步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120745,"discussion_content":"是时候重构一波了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578292902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169154,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578281074,"is_pvip":false,"replies":[{"id":"65746","content":"抱歉，我改下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578380172,"ip_address":"","comment_id":169154,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578281074","product_id":100039001,"comment_content":"testToNumber_nullorEmpty()里text1和text2是一样的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480440,"discussion_content":"抱歉，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578380172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169148,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1578280670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578280670","product_id":100039001,"comment_content":"纯函数就非常利于写单元测试，和类静态方法一样。","like_count":0},{"had_liked":false,"id":169096,"user_name":"Zm","can_delete":false,"product_type":"c1","uid":1448893,"ip_address":"","ucode":"831FF80F07E965","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKj4w4lW7ibGEVxPv8wS1CrXKDeBz3RAaAdISxQSD23uUpV3wicsIMepaYZE8GzRcWmSpjet5NDN4MA/132","comment_is_top":false,"comment_ctime":1578273136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578273136","product_id":100039001,"comment_content":"目前要求单元测试覆盖率达到百分之百。就一个set get方法都要写上，简直崩溃。","like_count":0},{"had_liked":false,"id":169081,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1578271875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271875","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":169079,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1578271817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271817","product_id":100039001,"comment_content":"单元测试其实是程序员对自己code后第一道保障，对于修复旧的系统问题，哪怕是小小的修改在单测中也会暴露问题。但对于很多较为复杂的功能，入参比较简单，但是方法中依赖了很多别的函数，对于这样的情况单测真的只能是测试逻辑是否正确，这一点现在在困扰着我，希望大佬们指点~","like_count":0},{"had_liked":false,"id":169078,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1578271782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271782","product_id":100039001,"comment_content":"公司不重视，直属上级也不重视，实行不了，只能换地了！","like_count":0},{"had_liked":false,"id":169055,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1578268702,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578268702","product_id":100039001,"comment_content":"当时刚进入公司实习，我的活就是完善各项目的单元测试😂，感觉对理解业务还是很有帮助的，但是现在业务越来越急了，留给写单元测试的时间真是越来越少了。","like_count":0,"discussions":[{"author":{"id":1716601,"avatar":"","nickname":"Geek_e9b8c4","note":"","ucode":"C29F7344A6EE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120335,"discussion_content":"留给写单元测试的时间不多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578272598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169049,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1578266678,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578266678","product_id":100039001,"comment_content":"原代码如果不适合写单元测试，那就重写吧","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142835,"discussion_content":"重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169048,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1578266653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578266653","product_id":100039001,"comment_content":"业务先行","like_count":0},{"had_liked":false,"id":172997,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1579404594,"is_pvip":false,"discussion_count":23,"race_medal":0,"score":"791853387058","product_id":100039001,"comment_content":"我就比较喜欢写单元测试，所以基本上是无bug 。身边的同事测基本上都是写完往哪一扔，或者丢给测试，然后bug 一堆，慢慢的我就成了团队的核心负责人。😂","like_count":185,"discussions":[{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374444,"discussion_content":"一对多，多对多不知道还搞啥数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621176679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1167233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","nickname":"杨逸林","note":"","ucode":"4BF3CF3E2F1AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374461,"discussion_content":"那我问你，你会写 Spring 插件吗？各个 BeanPostProcessor 含义，在不同生命周期下如何增强 Bean。这个你了解吗？你不了解，那你还用 Spring AOP？还用 Spring Tx?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621190378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374444,"ip_address":""},"score":374461,"extra":""},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","nickname":"杨逸林","note":"","ucode":"4BF3CF3E2F1AC7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374765,"discussion_content":"写spring插件对写业务是必须的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621338632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374461,"ip_address":""},"score":374765,"extra":""},{"author":{"id":1167233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","nickname":"杨逸林","note":"","ucode":"4BF3CF3E2F1AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374812,"discussion_content":"知道一对多，多对多是业务必须的？只会写 SQL 不行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621363372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374765,"ip_address":""},"score":374812,"extra":""}]}]},{"had_liked":false,"id":169039,"user_name":"Aaron","can_delete":false,"product_type":"c1","uid":1128437,"ip_address":"","ucode":"4EBA75DCBF42D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/f5/97c5d1eb.jpg","comment_is_top":false,"comment_ctime":1578250661,"is_pvip":false,"discussion_count":28,"race_medal":0,"score":"684478050725","product_id":100039001,"comment_content":"半年前，因为团队项目太多太乱已经很难维护和协作开发(10人的开发团队，每人负责一些项目，水平参差不齐，各自独立开发)，作为团队中的资深者，我被leader要求开发一套通用的底层框架。<br><br>为保证代码质量，刚开始时对自己要求严格，每个方法都必须要有多种case的单元测试；然后发现有时候写出来的单元测试代码比被测试的方法的代码量多很多，在一定程度上影响了开发速度。另外leader还经常安排我去修复一些仍在艰难运行的旧系统的故障(大多是累积下来的技术债)，导致框架开发进展一再拖延。同时团队其他人很少有写单元测试代码，测试工作完全依赖测试人员完成，对自己也就逐渐放松了要求，单元测试不再追求完备，只在核心的方法中加入常规的实现逻辑测试，其他代码写完多看两遍确认无bug就提交。<br><br>争哥的这节课程我完全理解，单元测试的重要性毋庸置疑，可是在实际开发过程中完全落实存在一定的困难，遇到这种问题我还真没啥解决的办法除了让自己拼命的加班，真的太难了。。。","like_count":159,"discussions":[{"author":{"id":1101017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cc/d9/20d4f7c2.jpg","nickname":"大雁小鱼","note":"","ucode":"44090581E59FDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302677,"discussion_content":"他写的代码很烂却很快，你写的代码好却很慢，老板看到了说：“你看看人家写代码的速度，向人家学学。”老板只看结果不看你做了什么，所以不按规范来的人反而得到了老板的夸赞，这是多么讽刺的一件事","likes_number":24,"is_delete":false,"is_hidden":false,"ctime":1599008279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1364353,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","nickname":"大力","note":"","ucode":"1B2125C519443D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cc/d9/20d4f7c2.jpg","nickname":"大雁小鱼","note":"","ucode":"44090581E59FDA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312771,"discussion_content":"但他的容易出bug, 上线久了就可以看出差距了。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1602812365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302677,"ip_address":""},"score":312771,"extra":""},{"author":{"id":1681459,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","nickname":"锋子","note":"","ucode":"89FFA85BDB1C99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364353,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","nickname":"大力","note":"","ucode":"1B2125C519443D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322177,"discussion_content":"但bug少，你多花一半的时间写的代码出现1个bug或者0个，他快，除了3个bug。。。那么其实就区别不大。 至于出五六个，其实可能性不大","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604681491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312771,"ip_address":""},"score":322177,"extra":""},{"author":{"id":1356918,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b4/76/5ca1718e.jpg","nickname":"天气","note":"","ucode":"6DEB8177703C4F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1681459,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","nickname":"锋子","note":"","ucode":"89FFA85BDB1C99","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331461,"discussion_content":"后期维护可能出现10个bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606878687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322177,"ip_address":""},"score":331461,"extra":""}]},{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352773,"discussion_content":"我都是，对于有挑战感兴趣的项目，通宵我也写单元测试，做重构。一旦项目没啥意思了，就不写了。单元测试写与不写，还得看你的时间花的值与不值了。虽然你天天在公司上班，但不要忘了，用的是你自己的时间。我会把这些高要求，用在更有意义的项目上或者自己的项目上。","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1614846373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1877362,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erDeXaJWUyFkxFQ3PI8icNX2JvbEFMtFNMvFSs50vvhrTyiayodGSPdkXtMQuqFMAiaTppiapjcw3BxibA/132","nickname":"林星宇","note":"","ucode":"621A4126DF10FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290216,"discussion_content":"我连设计文档都没空写完善……别说单元测试了","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1594379274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298279,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cf/67/057e5d93.jpg","nickname":"flying","note":"","ucode":"69AB7872B36B23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270096,"discussion_content":"只需要对核心代码进行单元测试，对于组装代码的部分，是无需进行单元测试的。保证每个单元都是正确的，那么组装起来的代码就是正确的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1589981273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691109,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIocn8OMjfSGqyeSJEV3ID2rquLR0S6xo0ibdNYQgzicib6L6VlqWjhgxOqD2iaicX1KhbWXWCsmBTskA/132","nickname":"虚竹","note":"","ucode":"8D8C96C793724E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222252,"discussion_content":"有时候，别说单元测试，想把开发的代码设计好，也是比较费时间的，写不那么符合规范的代码反而比较快，项目一着急，就需要妥协","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1586104655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120722,"discussion_content":"都怪万恶的资本家","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1578291411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691109,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIocn8OMjfSGqyeSJEV3ID2rquLR0S6xo0ibdNYQgzicib6L6VlqWjhgxOqD2iaicX1KhbWXWCsmBTskA/132","nickname":"虚竹","note":"","ucode":"8D8C96C793724E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222251,"discussion_content":"是这么回事，写完善的单元测试，在现有的开发流程下，会显得格外慢，工作效率低，排期时会直接被鄙视怀疑为啥需要这么久？写测试用例确实很费时间","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1586104427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136530,"discussion_content":"理解你的感受，一开始雄心壮志，抵不过现实","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579146073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022127,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/98/af/3945cea4.jpg","nickname":"一剑","note":"","ucode":"93ADD5B5215D4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121261,"discussion_content":"真的难，领导各种拍脑袋，想到一个点子巴不得马上就上线，哪有时间写单元测试，直接堆功能","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578315812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","nickname":"傲慢与偏执，","note":"","ucode":"E9F81223DFAD24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120280,"discussion_content":"理解你的感受","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578271161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339693,"discussion_content":"还是可以落地的，看公司重视程度，我们的项目如果覆盖率没有达到一定要求，是不能上线的，另外我们也有code review保证开发提交的代码一定要有测试用例，否则代码不让合并到主干分支。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609758748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292633,"discussion_content":"周围人相互影响很要命 哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595291490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204315,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/5b/616dbaa3.jpg","nickname":"爱吃面包的西门吹雪","note":"","ucode":"8CF3AD92617359","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126589,"discussion_content":"类似的场景，我是自己手动模拟了关键分支的调用来检验是否符合预期的:)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578530809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076132,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/a4/6ba9d110.jpg","nickname":"goingao","note":"","ucode":"1A6A20B98F0DD7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125113,"discussion_content":"已经不想吐槽了，一线开发直接对应产品需求就是这样，自己不迷失在急功近利的需求里就好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578474673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514673,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1c/b1/12edee24.jpg","nickname":"少刷票圈多读书","note":"","ucode":"98147AEA7B61DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583791,"discussion_content":"这种情况下就需要自上而下的设定代码质量管理规则，覆盖率不够不能上线，再让对应的人员去补测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660384873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410740,"discussion_content":"996的打工人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635768664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1642286,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0f/2e/467f9fa7.jpg","nickname":"刘寻远","note":"","ucode":"8BDD7E5AAE8297","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379963,"discussion_content":"道友好啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624264384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325456,"discussion_content":"开发这个工种是有门槛的，可现实中除了顶级公司，大部分公司的人员都是参差不齐的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605324010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1163455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/bf/9d6f3645.jpg","nickname":"Single","note":"","ucode":"0FF03512CE2F27","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300489,"discussion_content":"老板关注单测的时候，团队曾经说排期里留30%时间这单测，然后就没有然后了…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598146670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120999,"discussion_content":"根本没人去做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578308356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169542,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1578376004,"is_pvip":false,"replies":[{"id":"65950","content":"可以集成到代码管理仓库git中，强制跑单元测试成功之后才能提交","user_name":"作者回复","comment_id":169542,"uid":"1190123","ip_address":"","utype":1,"ctime":1578489359,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"181967002436","product_id":100039001,"comment_content":"单元测试很重要，但是为什么大多人都会放弃？我个人觉得最主要的原因并不是代码量大，难以编写等，而是跑单元测试的次数少。很多单元测试都是为了写而写，写完一次可能都不去运行或者只偶尔运行一两次。如果是每次改完代码，都跑一遍单元测试，单元测试的效果会越来越显现。如果只是为了运行一两次或者干脆为了写而写，很容易就会放弃继续写单元测试。","like_count":42,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480605,"discussion_content":"可以集成到代码管理仓库git中，强制跑单元测试成功之后才能提交","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578489359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169065,"user_name":"沐","can_delete":false,"product_type":"c1","uid":1326537,"ip_address":"","ucode":"678F6A0C778CDD","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/c9/a1e6a307.jpg","comment_is_top":false,"comment_ctime":1578270344,"is_pvip":false,"replies":[{"id":"65749","content":"哈哈，那就看我的项目啊：https:&#47;&#47;github.com&#47;wangzheng0822<br>下面有个ratelimiter4j","user_name":"作者回复","comment_id":169065,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380582,"user_name_real":"王争"}],"discussion_count":4,"race_medal":3,"score":"156197093000","product_id":100039001,"comment_content":"之前公司要求新研的代码要达到百分之85的覆盖率，导致纯粹为了覆盖率堆砌了一堆单元用例。有没有单元测试写的比较好的开源框架推荐下？","like_count":36,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480416,"discussion_content":"哈哈，那就看我的项目啊：https://github.com/wangzheng0822\n下面有个ratelimiter4j","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578380582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534497,"discussion_content":"收藏小争哥的GitHub+1，https://github.com/wangzheng0822","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638199547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171270,"discussion_content":"收藏了小争哥的GitHub","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581694716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124715,"discussion_content":"spock可以看一下感觉简化了很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578448457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169349,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1578320423,"is_pvip":false,"replies":[{"id":"65739","content":"😂 可以考虑跳槽了","user_name":"作者回复","comment_id":169349,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379456,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"130427339303","product_id":100039001,"comment_content":"说起来真的是难受。整个项目中就我一个人写单元测试。每次做的功能都有单元测试覆盖。而且项目中junit包都是我导入的。更加奇葩的是我的功能单元测试领导还不让我提交。说是你的测试代码为什么要提交，我瞬间无语了。","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480518,"discussion_content":"😂 可以考虑跳槽了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578379456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171303,"discussion_content":"你居然回答不出领导的问题？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581695052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618328,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","nickname":"絆","note":"","ucode":"52D965461314DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531705,"discussion_content":"哈哈哈哈, 编译的时候不是可以设置不运行测试用例, 不编译测试代码么, 又没啥影响.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637392844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623117,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c4/4d/85014aab.jpg","nickname":"一叉树","note":"","ucode":"BFC984403ACD1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387443,"discussion_content":"兄弟现在跳槽了没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628172715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142793,"discussion_content":"“你的测试代码为什么要提交”亮瞎眼。我推测你们push肯定没有pipeline。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142933,"discussion_content":"是啊。没办法。只能把自己的事情先做好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579485241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":142793,"ip_address":""},"score":142933,"extra":""},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143405,"discussion_content":"你可以自己搭个jenkins，ut、auto往上扔，qa测出的bug显著降低，那么就可以拿数据找领导了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579505131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":142933,"ip_address":""},"score":143405,"extra":""},{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143436,"discussion_content":"哈哈。是啊。后面确实准备自己先在测试环境搭建一套，做持续集成和持续交付测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579506635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":143405,"ip_address":""},"score":143436,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136534,"discussion_content":"领导天理难容啊，领导都不理解你，哎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579146286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":142931,"discussion_content":"哈哈。习惯了。改变公司代码质量，从我做起。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579485209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":136534,"ip_address":""},"score":142931,"extra":""}]}]},{"had_liked":false,"id":169135,"user_name":"拙言","can_delete":false,"product_type":"c1","uid":1310192,"ip_address":"","ucode":"40179CFED35579","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/f0/67ed878c.jpg","comment_is_top":false,"comment_ctime":1578279015,"is_pvip":false,"replies":[{"id":"65747","content":"涉及到数据库的项目，特别是重度依赖数据库的，确实比较难写单元测试。一种方式使用DBUNIT这样的测试框架来解耦合真正的数据库，另一种方式专门维护一个供单元测试用的数据库。","user_name":"作者回复","comment_id":169135,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380345,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"121837363303","product_id":100039001,"comment_content":"打卡~<br>这里问下王争老师，如果到了具体的业务代码，该怎么写单元测试呢，单元测试正确标准是什么呢，以sql查询到的结果吗？","like_count":28,"discussions":[{"author":{"id":1055854,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/6e/6c5f5734.jpg","nickname":"终结者999号","note":"","ucode":"33ADE61580B6DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193544,"discussion_content":"可以使用H2这种内存数据库","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583156709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480434,"discussion_content":"涉及到数据库的项目，特别是重度依赖数据库的，确实比较难写单元测试。一种方式使用DBUNIT这样的测试框架来解耦合真正的数据库，另一种方式专门维护一个供单元测试用的数据库。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578380345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475866,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","nickname":"萧潇","note":"","ucode":"1FA83092845507","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394036,"discussion_content":"我们单元测试里涉及到IO都是直接Mock了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631694125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377170,"discussion_content":"直接上测试环境","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622535909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1288001,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/41/9993b112.jpg","nickname":"君子鸿","note":"","ucode":"F81F79D61B0E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376068,"discussion_content":"业务代码都非常依赖数据库，这种情况，可以了解下UTDD即验收测试驱动开发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621948071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194853,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","nickname":"prepared","note":"","ucode":"00E54A5C7CDCBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342170,"discussion_content":"大部分都是这种项目吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610605439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169245,"user_name":"yaomon","can_delete":false,"product_type":"c1","uid":1121557,"ip_address":"","ucode":"4742547EB92BCE","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/15/8ad4e24a.jpg","comment_is_top":false,"comment_ctime":1578300604,"is_pvip":false,"replies":[{"id":"65613","content":"差强人意是勉强使人满意，不是十分使人满意。所以这里没问题呢～","user_name":"编辑回复","comment_id":169245,"uid":"1058895","ip_address":"","utype":2,"ctime":1578305012,"user_name_real":"王锦"}],"discussion_count":12,"race_medal":0,"score":"61707842748","product_id":100039001,"comment_content":"程序员这一行业本该是智力密集型的，但现在很多公司把它搞成劳动密集型的，包括一些大厂，在开发过程中，既没有单元测试，也没有 Code Review 流程。即便有，做的也是差强人意。<br>----------------------------------------------------------------------------------------<br>差强人意：指尚能使人满意。根据文章上文，明显是不能使人满意的意思。处理为语病。","like_count":14,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480477,"discussion_content":"差强人意是勉强使人满意，不是十分使人满意。所以这里没问题呢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578305012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163644,"discussion_content":"大哥是用的文言文编程吗😂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581088059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","nickname":"沐夜星光","note":"","ucode":"22F699E237B179","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138295,"discussion_content":"哈哈哈，差强人意其实是一个褒义词，很多人都被这个词的表面意思误导了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579233690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163656,"discussion_content":"根据 前文“即便”二字，结合语境可知 ，后面应该是“不尽人意”。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581088428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124509,"discussion_content":"yaomon理解是该用不尽人意,都是语言高手啊  赞赞赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578442616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2789067,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/8e/cb/1efcaf20.jpg","nickname":"Justway","note":"","ucode":"75966B5533C872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585461,"discussion_content":"差强人意是扁褒义词，从语境来看这里是想用一个贬义词，所以是有点问题。改成不尽人意就不会有争议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661579999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538620,"discussion_content":"秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639455204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377846,"discussion_content":"都是巨佬，无处不体现汉字的博大精深","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622904726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288896,"discussion_content":"不知道你们这些人，不好好专研技术，专牛角尖是个好手，不是个差手。。这里用差强人意是完全没毛病的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593926865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2093945,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f3/79/a2bedc1e.jpg","nickname":"J6","note":"","ucode":"3F097CE1FFCA05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302226,"discussion_content":"你咋知道人家没好好钻研技术呢。。指出用词不当的地方变成钻牛角尖了吗？我只想说真正认真细致的精神应该是处处都能体现，不要太局限自己了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598851384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288896,"ip_address":""},"score":302226,"extra":""},{"author":{"id":1202160,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/f0/f6155d5f.jpg","nickname":"新生\\","note":"","ucode":"212978C88E242E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577836,"discussion_content":"不尽人意更好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656382937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288896,"ip_address":""},"score":577836,"extra":""}]},{"author":{"id":1242373,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg","nickname":"才才","note":"","ucode":"94D76106261987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204935,"discussion_content":"有文化就是好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584240800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169141,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1578279967,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"48822920223","product_id":100039001,"comment_content":"设计模式_28<br>1. 有过一次失败的单元测试经验：好不容易申请到了2周的预研时间，我开开心心地研究怎么把JUnit引入项目，刚开始了两天，新的开发任务打断了我的计划，然后就再也没有继续了。。。<br><br>2. <br>代码：<br>&#47;**<br> * 查找递增数组中第一个大于等于某个给定值的元素<br> * @return -1: 未找到<br> *&#47;<br>public int findFirstEqualOrLargerIndex(int[] array, int num) {<br>    if (array == null || array.length == 0) return -1;<br><br>    int start = 0;<br>    int end = array.length - 1;<br><br>    while (start != end) {<br>        int middle = start + (end - start) &#47; 2;<br><br>        if (array[middle] &gt;= num) {<br>            if (start == middle) return middle;<br>            else<br>                if (array[middle - 1] &lt; num) return middle;<br>                else end = middle -1;<br><br>        } else {<br>            start = middle + 1;<br>        }<br>    }<br>    &#47;&#47;start == end<br>    if (array[start] &gt;= num) {<br>        return start;<br>    } else {<br>        return -1;<br>    }<br>}<br><br>测试用例:<br>findFirstEqualOrLargerIndex(null, 1)<br>findFirstEqualOrLargerIndex(new int [0], 1)<br>findFirstEqualOrLargerIndex(new int [] {0}, 1)<br>findFirstEqualOrLargerIndex(new int [] {1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 0}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {1, 1}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 1, 1, 1, 1, 6, 7, 8, 9}, 1)<br>findFirstEqualOrLargerIndex(new int [] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 10)<br><br>我估计应该有漏洞，请老师和同学们指正~","like_count":11,"discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120602,"discussion_content":"例如非要输入无序数组，还work么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578284622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120735,"discussion_content":"不work，我想过这个问题，我认为不应该加上验证有序的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578291939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120602,"ip_address":""},"score":120735,"extra":""},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304750,"discussion_content":"都规定了二分查找。。 你再扔个无序数组进来那不是搞事情  这个其实是预料之中的题目之外的问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599656421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120602,"ip_address":""},"score":304750,"extra":""}]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120597,"discussion_content":"数组要是有负数呢？例如-3 -2 -1，我输入-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578284463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120734,"discussion_content":"不影响，返回的是index","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578291891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120597,"ip_address":""},"score":120734,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120744,"discussion_content":"题目说找指定元素，貌似和找下标不是一个意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578292891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120734,"ip_address":""},"score":120744,"extra":""},{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120755,"discussion_content":"确实是，如果是返回元素，你觉得如何做到找不到时的默认返回与元素值相同的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578293756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120744,"ip_address":""},"score":120755,"extra":""}]}]},{"had_liked":false,"id":169979,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578487141,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35938225509","product_id":100039001,"comment_content":"项目是服务端项目中，使用的是Spring test，立足于能满足自测工具的诉求，能保证用例有资产继承，而不是使用postman。用例主要是以接口层（Cnotrol）为主，services层为补充。<br>好处很多，特别是微重构时，老用例一通过，自己的心就踏实了一半。<br>另外，有一个体会，如果认真写了单元测试，转测后，测试基本测试不出问题。一个月度版本，bug可以控制在1个以内。","like_count":8,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142591,"discussion_content":"主要是rest的api测试吧？postman也是不错的api测试工具，自测够了。不过后面要资产化，还是老哥的方法好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579480294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169387,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1578325571,"is_pvip":false,"replies":[{"id":"65737","content":"涉及到数据库的确实比较难写单元测试，而且如果重度依赖数据库，业务逻辑又不复杂，单元测试确实没有太大意义。这个时候，集成测试可能更有意义些。","user_name":"作者回复","comment_id":169387,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379305,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"35938063939","product_id":100039001,"comment_content":"       以前在开发中，没有写单元测试的意识。开发完功能后，直接去测试一个完整的流程。即前端发请求，服务端处理，看数据库数据。如果功能正确就过。这是从一个功能宏观去考虑测试。而单元测试是更细粒度的测试，它在保证各个“单元”都测试通过的情况下整个功能模块就测试通过了。这样的方式对于我们自己来说对代码可控粒度更细。更能比较清楚的理解某个“单元”在整个功能模块调用链路上的位置，承担什么职责，以及有什么行为。而不是一开始就站在模块宏观角度来思考。通过一个个单元测试的编写，将整个功能模块串联起来，最终达到整个功能模块的全局认知。 这也体现了任务分解的思想。通过单元测试，可以从另外一方面实现对已编写的代码的CodeReview，重新梳理流程。也为以后有重构需求打下基础。<br>       目前参与的项目中有单元测试，但是不够完备。可能由于某些原因（开发人员意识问题，团队对单元测试的执行落地程度不够等）。在写单元测试的过程中，遇到单元测试依赖数据库查询问题，因为存在多套环境，如开发环境，仿真环境，线上环境。对于依赖数据查询的单元测试，只能自己造假数据来解决。不知道还有什么好的解决办法。","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480535,"discussion_content":"涉及到数据库的确实比较难写单元测试，而且如果重度依赖数据库，业务逻辑又不复杂，单元测试确实没有太大意义。这个时候，集成测试可能更有意义些。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578379305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078280,"avatar":"https://static001.geekbang.org/account/avatar/00/10/74/08/aa2a9f36.jpg","nickname":"tomcat","note":"","ucode":"1929E1028414F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309758,"discussion_content":"这种情况我觉得可以结合mariaDB来实现，在单测之前写入测试数据，单测执行后验证数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601432565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164697,"discussion_content":"感觉ddd把业务和数据层分开，就和数据库依赖没那么大，感觉才容易测试。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581214220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/70/32534e2d.jpg","nickname":"David Mo","note":"","ucode":"66C30A3CD7EDA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164755,"discussion_content":"有道理，我对DDD认识很浅，等后面多了解一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581218975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":164697,"ip_address":""},"score":164755,"extra":""}]},{"author":{"id":2826368,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/20/80/9dfc7a42.jpg","nickname":"乌托邦的托","note":"","ucode":"2832BD58762D9F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413366,"discussion_content":"mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636458095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278778,"discussion_content":"我们工具类上面 单元测试较多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591233534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169215,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578294725,"is_pvip":false,"replies":[{"id":"65741","content":"需要的，这个跟项目大不大没太多关系的。单元测试还是为了保证代码少些低级bug","user_name":"作者回复","comment_id":169215,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379554,"user_name_real":"王争"}],"discussion_count":12,"race_medal":0,"score":"31643065797","product_id":100039001,"comment_content":"独立开发者，项目代码量 10W 行以内，在可以预见的未来不会超过 20W 行<br>以前试过 git 各种最佳实践，最后发现一个分支基本就够用了<br>所以还是忍不住想问问老师，如果项目真没那么大，是否需要单元测试？","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480460,"discussion_content":"需要的，这个跟项目大不大没太多关系的。单元测试还是为了保证代码少些低级bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640974,"avatar":"","nickname":"大风","note":"","ucode":"583873CCAA2A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359918,"discussion_content":"独立开发者也需要多个分支。比如这样的情况：主分支已经上线运行，但是这时要开发一个新功能，如果你不创建一个新的分支的情况下又当新功能开发还未完成时，用户报告了一个严重错误需要紧急修修复，这时怎么办？新功能还要几天才能完成，但是修复问题可能也就几分钟的事。窘迫不？ 所以，无论团队还是独立开发者，正确的打开方式是开发新功能时从主分支上创建一个新的功能分支出来，主分支可随时紧急修复bug，同时新功能分支也可以同步进行，互不干扰。团队开发就更不用说了，可能几个小组同步开发不同的功能这时就要在各自分支上独立进行，最后把开发好的功能合并到主分支上就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616328691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032755,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c2/33/ccbf2045.jpg","nickname":"sta","note":"","ucode":"D840070850EA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306037,"discussion_content":"个人感觉分支主要是用来团队间协同开发的，个人开发其实不太需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600153015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288856,"discussion_content":"做的啥app,学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593913056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289099,"discussion_content":"Memory Helper，献丑了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593995078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288856,"ip_address":""},"score":289099,"extra":""}]},{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128515,"discussion_content":"仅用一个分支，如何区分线上和开发的代码呢，如何对线上代码做hotfix和版本回退呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578646423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128559,"discussion_content":"开发完了就上线，如果正在开发遇到bug了就连同开发的一部分上线。\n主要是，我觉得分支之后（一个修bug分支一个开发分支）再合并实在太麻烦了。\n有一次正在开发大功能遇到了bug的确就只能用两个分支。我不是说这个方法有问题，而是大部分情况下我确实没用上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578650326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128515,"ip_address":""},"score":128559,"extra":""}]},{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122926,"discussion_content":"谢谢王争老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578380467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121389,"discussion_content":"还是善于观察和有动手能力！学习了！谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578318385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":122246,"discussion_content":"不客气，你也可以的😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578329224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":121389,"ip_address":""},"score":122246,"extra":""}]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121135,"discussion_content":"这么厉害！想请教一下怎么才能成为一个独立开发者呢？或者你是怎么做到的？我想学一下，看以后是否能多一个选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578312765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":121343,"discussion_content":"我是因为自己有一个需求，当时没有现成的 App，于是就自己做了一个，后来想着上线看看，发现也有不少人有这个需求，于是就一直做下去了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1578317503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":121135,"ip_address":""},"score":121343,"extra":""}]}]},{"had_liked":false,"id":169182,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1578287180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31643058252","product_id":100039001,"comment_content":"1.tdd是以终为始的开发模式。即先确定好验收标准，再根据标准去开发。如此一来设计出来的代码跟验收标准能更好的关联。至于单元测试，单元测试的case与tdd的终并不是直接一一对应的，但也可以算是一个终拆解出来的细力度的子终。但单元测试是实现层面的自检方案，tdd是设计层面的衡量指标，感觉是两个层面的概念，形似而神不同。<br><br>2.我接手的项目，没几行单元测试，且年久失修也基本全部无用。起初也是坚守写单元测试，补充涉及到的业务的单元测试。但坚持补了40%左右后也就放弃了。原因，1.补别人的测试用例太耗时，而且不全面（短时间了解并不透彻，也不该花太多时间都了解透彻）。2.个中价值不被认可（在一个快糙猛的大环境下，逆行总归异类。你可以接受额外的加班，但很难在他人评价上坚守初心）3.事出必有因，快糙猛也没有错，毕竟技术债务这东西是可以不还的（遗憾的是，有利可图时还不知道还债，硬是要债高难还时再推倒重做）。","like_count":7},{"had_liked":false,"id":169080,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1578271859,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31643042931","product_id":100039001,"comment_content":"关于问题2，尝试写了一下单元测试：<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u28","like_count":7},{"had_liked":false,"id":169068,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1578270632,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23053107112","product_id":100039001,"comment_content":"确实单元测试只在一开始才写过，后来发现拖慢了开发的进度，就渐渐放弃了，现在我们的开发团队里几乎没什么单元测试，除非一些涉及到优惠券，订单奖励计算等和钱挂钩的业务，我觉得一方面是因为消耗时间，另一方面业务代码没写好，很多时候很不利于进行单测，要造各种数据。我觉得单测最好是在开发一个方法或者函数之后就进行，且要在测试介入之前，否则测试介入以后再补充单元测试，有可能会改动到已写好的业务，那么就又需要回归测试一遍，对开发，测试都是很消耗的。","like_count":5,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278780,"discussion_content":"其实说白了 就是很多curd的业务写单元测试依赖过多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591233632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181647,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/cf/b0d6fe74.jpg","nickname":"L.","note":"","ucode":"46A2F679C094E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239501,"discussion_content":"你这ID让我想起了2009…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587301671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142562,"discussion_content":"除ut外的回归部分要逐渐auto话，这样才能根本解决你说的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579479852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142553,"discussion_content":"单元测试不就是回归的一部分吗？在git merge的pipeline里加上单元测试，每次push都会跑一边，以这样mini回归的方式才能体现ut的价值，否则呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579479686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281681,"user_name":"RD","can_delete":false,"product_type":"c1","uid":1194858,"ip_address":"","ucode":"E3947B6E1681AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","comment_is_top":false,"comment_ctime":1614846831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18794716015","product_id":100039001,"comment_content":"说到测试，让我想起了 leetcode ~ 自己写的算法，自己也写了单元测试，觉得没啥问题，然后 leetcode <br> 上一跑发现，我去对啊，这个边界没考虑到。然后修改，觉得没啥问题了，在跑。。。我去。。对啊。。还有这种情况呢。。。果然，面试考算法没毛病啊~","like_count":4},{"had_liked":false,"id":169660,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1578399436,"is_pvip":false,"replies":[{"id":"65845","content":"春节期间正常发布，惊喜待定😂","user_name":"编辑回复","comment_id":169660,"uid":"1058895","ip_address":"","utype":2,"ctime":1578411035,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"18758268620","product_id":100039001,"comment_content":"争哥。马上过年了，过年期间不知道能否多发表几篇在过年期间学习？","like_count":4,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480660,"discussion_content":"春节期间正常发布，惊喜待定😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578411035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169175,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578285408,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18758154592","product_id":100039001,"comment_content":"个人觉得，对于大多数公司而言，单元测试没有强制要求，对自己有要求的工程师往往加班写单元测试。","like_count":4},{"had_liked":false,"id":169071,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1578270844,"is_pvip":false,"replies":[{"id":"65748","content":"DBunit了解一下~","user_name":"作者回复","comment_id":169071,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380499,"user_name_real":"王争"}],"discussion_count":8,"race_medal":1,"score":"18758140028","product_id":100039001,"comment_content":"参与的项目都有单元测试，不过有些不够完备，缺少了一些corner case的覆盖，感觉后面要注意加上。遇到的一个问题是对于repository层（数据访问层）的测试，用了一个取巧的办法解决的，因为要依赖数据库，可是又没找到对应数据库的mock方式，所以使用了docker镜像的方式来做的，感觉也不错，避免了构造数据的麻烦。不知道还有没有更好的办法？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480418,"discussion_content":"DBunit了解一下~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578380499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012981,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Ieq85mIZlQOujShKNS1j3nJa3KXmxG9ib3CoxHibmBlbLGUs6SURZS5XuOyb9El9McLWs25NNVZo5TUazErUEGVg/132","nickname":"大阿拉伯人","note":"","ucode":"C0FC9D58B7F7D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335395,"discussion_content":"h2我觉得可以\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608182039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078280,"avatar":"https://static001.geekbang.org/account/avatar/00/10/74/08/aa2a9f36.jpg","nickname":"tomcat","note":"","ucode":"1929E1028414F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309760,"discussion_content":"mariaDB内存数据库亲测可用，我们这边就是这么玩的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601432816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142831,"discussion_content":"dbunit可自行管理schema，在多个ut case间保证数据纯洁度，自己的docker、mock server也行，不过都要自己管理，代价大。举例，创建订单事务提交，数据会发生持久型改变，自行回滚逻辑复杂易出错。不用dbunit的简单做法是每次删除schama再新建，数据初始化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122137,"discussion_content":"请问“使用了docker镜像的方式”是什么实现思路？在项目中对于多环境情况下，数据访问层我们是自己造假数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578326200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122340,"discussion_content":"比如用mysql的docker镜像，然后所有的数据操作基于这个镜像。数据肯定都是假的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578354382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":122137,"ip_address":""},"score":122340,"extra":""}]},{"author":{"id":1109844,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ef/54/58a61a50.jpg","nickname":"룡걸이","note":"","ucode":"ACC366BD4E7385","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120709,"discussion_content":"h2内存数据库是否可行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578290664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1109844,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ef/54/58a61a50.jpg","nickname":"룡걸이","note":"","ucode":"ACC366BD4E7385","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":120768,"discussion_content":"没用过这个～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578294655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120709,"ip_address":""},"score":120768,"extra":""}]}]},{"had_liked":false,"id":169062,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1578270024,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18758139208","product_id":100039001,"comment_content":"我感觉我写单测最大的问题在于很难把代码写成那种细粒度可测的模样，而不是要去写。","like_count":4},{"had_liked":false,"id":169804,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1578448614,"is_pvip":false,"replies":[{"id":"65941","content":"解耦依赖目前来看就只能用mock的方式。这是跟集成测试最大的区别。","user_name":"作者回复","comment_id":169804,"uid":"1190123","ip_address":"","utype":1,"ctime":1578488940,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"10168383206","product_id":100039001,"comment_content":"问一下单元测试中的依赖问题只能用mock来模拟吗？这样不会导致对下层方法依赖太强，而且用mock模拟感觉代码量也很多，心里感觉也不一定对。如果加入依赖（先倒入测试数据），那不就变成集成测试了吗？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480725,"discussion_content":"解耦依赖目前来看就只能用mock的方式。这是跟集成测试最大的区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578488940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2025657,"avatar":"","nickname":"Geek_43013d","note":"","ucode":"43742B19B6E407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321908,"discussion_content":"如果需要大量的模拟对象，可以考虑使用mockito或者JMockit这样的隔离测试框架吧，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604649623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142767,"discussion_content":"如果ut需要编写大量外部依赖的mock代码，那说明耦合很严重，建议微重构，把外部依赖都隔离到独立的方法或类，把mock依赖的代码抽成base，这样可以资产化ut代码，就像我们的项目一样。：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169734,"user_name":"varotene","can_delete":false,"product_type":"c1","uid":1004441,"ip_address":"","ucode":"B37E9B6D35090C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/99/56f148bc.jpg","comment_is_top":false,"comment_ctime":1578425413,"is_pvip":false,"replies":[{"id":"65944","content":"是的，你说的大型重构，估计就是代码真的太烂的吧，差不多就是重写了，单元测试都要重新了估计。","user_name":"作者回复","comment_id":169734,"uid":"1190123","ip_address":"","utype":1,"ctime":1578489077,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10168360005","product_id":100039001,"comment_content":"单元测试是不是只对小型、中型重构有用？因为大型重构会导致内部结构变化。大型重构应该通过integration 测试，场景测试来保证正确性？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480697,"discussion_content":"是的，你说的大型重构，估计就是代码真的太烂的吧，差不多就是重写了，单元测试都要重新了估计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578489077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169408,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1578328704,"is_pvip":false,"replies":[{"id":"65734","content":"这个不分的，测试的对象是函数","user_name":"作者回复","comment_id":169408,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379098,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10168263296","product_id":100039001,"comment_content":"单元测试是测试应用层还是领域层？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480543,"discussion_content":"这个不分的，测试的对象是函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169174,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1578285136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168219728","product_id":100039001,"comment_content":"感谢争哥分享，单元测试很重要，除此之外，集成用例和回归用例库同样重要，以及上线后的ab比对切流，这些在大厂其实都是落地了的常规武器。这里争哥没有提到。 <br>大厂之外，能落地的除了单测，还有简单的ab框架，集成平台自动化程度，否则一次重构下来非常耗费精力，而且还是冒着风险。 <br>另外，单测代码本身的质量也要有要求，tl要求单测代码和生产代码一样要遵守规范(视各厂情况定吧)。所以每次迭代开发测试时间比是1比2差不多了。 哭晕","like_count":2,"discussions":[{"author":{"id":1017297,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","nickname":"郭小菜","note":"","ucode":"C4044C80BB331B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129336,"discussion_content":"老哥高估中国的大厂了，腾讯基本木有单元测试的习惯，阿里稍微好些！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578673423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256124,"user_name":"Jupiter","can_delete":false,"product_type":"c1","uid":2125382,"ip_address":"","ucode":"072E5C34CDE8AC","user_header":"https://static001.geekbang.org/account/avatar/00/20/6e/46/a612177a.jpg","comment_is_top":false,"comment_ctime":1603532417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898499713","product_id":100039001,"comment_content":"王争老师说的 `单元测试不要依赖被测代码的具体实现逻辑` 真的被点醒了，现在参与的项目基本上每个都写Unit test，有一次领导让提高单元测试的覆盖率，要90%以上，其实函数都不是什么复杂函数，逻辑也都是比较简单的，所以就不停的针对代码里面的执行逻辑写测试用例。像老师说的 单元测试对于持续重构是一种保障，当时稍微小重构一下 就被之前自己写的单元测试弄的脑袋大。","like_count":1},{"had_liked":false,"id":208220,"user_name":"gtp","can_delete":false,"product_type":"c1","uid":1372089,"ip_address":"","ucode":"12E21307343B3A","user_header":"https://static001.geekbang.org/account/avatar/00/14/ef/b9/c0c12bea.jpg","comment_is_top":false,"comment_ctime":1587303757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882271053","product_id":100039001,"comment_content":"我们也在推行单元测试。赞一个！","like_count":1},{"had_liked":false,"id":190826,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1584696430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879663726","product_id":100039001,"comment_content":"1. 写单元测试就难在 覆盖各种输入、异常、边界情况，往往自己有时候考虑不全呀，这个怎么破？<br>2. 现在公司用的项目的框架都会自动生成一些单测用例，但其实完全没有用，都没有考虑各种情况，大家也都是为了单测覆盖率的指标而写单测，项目紧的时候基本不写，等上线了再补，让指标好看😭","like_count":1},{"had_liked":false,"id":175710,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1580804944,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5875772240","product_id":100039001,"comment_content":"现在在梳理几个水很深的项目，基于spring context的，用spring junit做单测框架，但是由于依赖关系过于复杂，有的类甚至要加载大量数据到内存，导致一个方法的单测要跑很久，请问老师有何良策？","like_count":1,"discussions":[{"author":{"id":1053244,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/3c/abb7bfe3.jpg","nickname":"VINCENT","note":"","ucode":"4DE7B83915E0A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559436,"discussion_content":"这个问题我也遇到过，以前用mock，现在摆烂了，不写了。原因你懂的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648775654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173346,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579508487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874475783","product_id":100039001,"comment_content":"打卡<br>一、什么是单元测试<br>单元测试相对于集成测试（Integration Testing）来说，测试的粒度更小一些。单元测试的测试对象是类或者函数，用来测试一个类和函数是否都按照预期的逻辑执行。这是代码层级的测试。<br><br>二、为什么要进行单元测试<br>(和Code Review一样，是保证代码质量最有效的两个手段之一)<br>1、能帮助发现代码中的bug；<br>2、写单元测试能帮助你发现代码上的设计问题<br>针对一个模块代码，很难写单元测试，可能是代码设计的不合理，比如，没有使用依赖注\t\t\t\t\t\t\t\t\t\t\t\t\t\t入、大量使用静态函数、全局变量、代码高度耦合等。<br>3、是对集成测试的补充<br>4、写单元测试的过程也是代码重构的过程<br>5、阅读单元测试可以快速熟悉代码<br>6、是TDD可落地执行的改进方案<br><br>三、如何写单元测试<br>对单元测试的代码质量要求可以放宽；<br>单元测试的覆盖率不要求100%；<br>单元测试不要依赖被测代码的具体实现逻辑；<br>单元测试框架无法测试，多半是因为代码的可测试性不好。<br>","like_count":1},{"had_liked":false,"id":169406,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1578328217,"is_pvip":false,"replies":[{"id":"65735","content":"可以参看我的例子","user_name":"作者回复","comment_id":169406,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379119,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5873295513","product_id":100039001,"comment_content":"写单元测试就是不知道如何命名单元测试的方法名，有时候这个方法都不知道如何描述好，","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480542,"discussion_content":"可以参看我的例子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169077,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578271732,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873239028","product_id":100039001,"comment_content":"打卡✔<br>我觉得写单元测试的难点是覆盖测试用例<br>我们出的bug 不都是没考虑特殊情况吗，如果单元测试可以想到全部的测试用例，代码有bug 的可能性应该不大","like_count":1,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120728,"discussion_content":"测试用例的完备性，确实有一定的技术含量，比较烧脑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578291612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169046,"user_name":"水银","can_delete":false,"product_type":"c1","uid":1045948,"ip_address":"","ucode":"0FD9C79590E484","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/bc/63be02b6.jpg","comment_is_top":false,"comment_ctime":1578265204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873232500","product_id":100039001,"comment_content":"我们部分项目是定制类型，客户变化需求的可怕，加上初期没有良好的接口设计，导致每次需求变化都会导致之前的单元测试不可用。对于定制型项目很难落地单元测试，个人感觉只有按照产品方式去做的项目，单元测试才更有价值。否则单元测试一达不到测试的效果，二增加了研发周期。但单元测试保证代码的正确性我是非常赞同的，如果项目允许及领导支持，我也是很推荐做单元测试！","like_count":1},{"had_liked":false,"id":358939,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1665045754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665045754","product_id":100039001,"comment_content":"单元测试其实提供了一种及时反馈，这给了调整代码一个抓手，是非常有用的。","like_count":0},{"had_liked":false,"id":358938,"user_name":"怀英","can_delete":false,"product_type":"c1","uid":1394143,"ip_address":"江苏","ucode":"E2838AF06FB300","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/df/97a71dc8.jpg","comment_is_top":false,"comment_ctime":1665045559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665045559","product_id":100039001,"comment_content":"我们项目目前没啥单元测试，除了文中提到的3个点，还有个问题。测试链路长，导致有些初始数据就比较难造，最终就没有多少人写单元测试了。","like_count":0},{"had_liked":false,"id":357781,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1663638317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663638317","product_id":100039001,"comment_content":"有一个问题：单元测试的代码是不是也需要持续维护？比如业务逻辑改变了，导致某个方法的逻辑变了，那么与这个方法相关联的单元测试代码也要跟着修改？","like_count":0},{"had_liked":false,"id":354437,"user_name":"少刷票圈多读书","can_delete":false,"product_type":"c1","uid":1514673,"ip_address":"陕西","ucode":"98147AEA7B61DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/b1/12edee24.jpg","comment_is_top":false,"comment_ctime":1660385127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660385127","product_id":100039001,"comment_content":"我觉得我们公司目前来看是做的比较好的，有以下几个方面：（1）本地安装了sonarlint插件，提交代码前瞅一眼（2）代码提交前会跑全部的单元测试和集成测试，要是有测试跑挂了或者代码覆盖率没达到要求是提交不了代码的（基于pmd、jacoco）（3）在CI&#47;CD上需要跑通过了测试才能打包部署代码（4）集成了sonarqube，定期查看sonarqube，修复新的bug和code smell。","like_count":0},{"had_liked":false,"id":350085,"user_name":"谁都会变","can_delete":false,"product_type":"c1","uid":1195017,"ip_address":"","ucode":"9965748F7EBB57","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","comment_is_top":false,"comment_ctime":1656563616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656563616","product_id":100039001,"comment_content":"以前都是写单元测试，现在都是用postman测一下","like_count":0},{"had_liked":false,"id":347617,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654226618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654226618","product_id":100039001,"comment_content":"1.<br>依赖, 构造测试对象<br>2. <br>(1) 第一个元素, 比如 3,4,5 找比 2 大的元素<br>(2) 最后一个元素, 比如 3,4,6 找比 5 大的元素<br>(3) 没有答案, 比如 3,4,5 找比 5 大的元素<br>(4) 没有答案, 比如 3,4,5 找比 6 大的元素<br>(5) 有重复数字的情况 TODO:<br>(6) 数据长度很大, 考虑二分溢出<br>(7) 正数负数","like_count":0},{"had_liked":false,"id":338202,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1647351975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647351975","product_id":100039001,"comment_content":"单元测试维护起来太难了，有些方法依赖的数据的正确性 这些单元测试 维护数据接很繁琐","like_count":0},{"had_liked":false,"id":331441,"user_name":"李林","can_delete":false,"product_type":"c1","uid":1802703,"ip_address":"","ucode":"FF8678DB1AA39B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/cf/c0593385.jpg","comment_is_top":false,"comment_ctime":1642586189,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642586189","product_id":100039001,"comment_content":"单元测试不要依赖被测代码的具体实现逻辑<br><br>这句话理解不了，不依赖具体逻辑，怎么做内部逻辑的Mock呢，大神们看看这个问题","like_count":0},{"had_liked":false,"id":324190,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638330832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638330832","product_id":100039001,"comment_content":"&#47;&#47;搜索下一个位置<br>&#47;**<br>有哪些情况？ target 5<br>返回-1 表示没有此元素<br>[1,2,3,4,5]  &#47;&#47;最后一个位置 下一个元素为nil<br>[5,6,7,8,9,10] &#47;&#47;元素在第一个位置 6<br>[1,2,3,4,5,6,7] &#47;&#47;中间位置 下一个元素是 6<br>[1,2,3,4,5,5,6,7]  &#47;&#47; 有重复元素 下一个元素是6<br>[1,2,3,4,5,5,5,5]  &#47;&#47; 有重复元素 并且没有下一个元素 并且后续元素也不存在 为nil<br>[1,2,3,4,6,7]  &#47;&#47;没有此元素，nil<br>[1,2,3,4]  &#47;&#47;没有此元素，并且没有比他大的元素 那么为 nil<br>**&#47;<br>func binarySearch(arr []int, target int) int {<br>\tleft, right := 0, len(arr)<br>\tret := -1<br>\tfor left &lt; right {<br>\t\tmid := (left + right) &gt;&gt; 1<br>\t\tif arr[mid] == target {<br>\t\t\tret = mid<br>\t\t\tbreak<br>\t\t} else if arr[mid] &lt; target {<br>\t\t\tleft = mid + 1<br>\t\t} else if arr[mid] &gt; target {<br>\t\t\tright = mid<br>\t\t}<br>\t}<br><br>\tif ret == -1 {<br>\t\tif left &lt; len(arr) &amp;&amp; arr[left] == target {<br>\t\t\tret = left<br>\t\t} else {<br>\t\t\treturn -1<br>\t\t}<br>\t}<br><br>\t&#47;&#47;判断当前元素是否是最后一个位置<br>\tif ret == len(arr)-1 {<br>\t\treturn -1<br>\t}<br><br>\t&#47;&#47;查找是否有重复元素<br>\tfor i := ret; i &lt; len(arr); i++ {<br>\t\tif arr[i] != arr[ret] {<br>\t\t\tret = i<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\tif arr[ret] == target {<br>\t\treturn -1<br>\t}<br><br>\treturn arr[ret]<br><br>}","like_count":0},{"had_liked":false,"id":322446,"user_name":"絆","can_delete":false,"product_type":"c1","uid":1618328,"ip_address":"","ucode":"52D965461314DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","comment_is_top":false,"comment_ctime":1637392741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637392741","product_id":100039001,"comment_content":"虽然我一直写着最low的单元测试, 也不太会用断言, 主要测试方法能不能跑通, 和预期的结果是否一样. 就已经能规避很多问题. ","like_count":0},{"had_liked":false,"id":314504,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1633156847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633156847","product_id":100039001,"comment_content":"测试用例这件事情，小公司确实不注意，大一点的公司才会重视，小公司只注重是否有这个功能，侧面反应出想要让自己的技能更加专业化，争取去大一点的公司还是必须的。<br>测试确实是件知易行难的事情，但是真正做了还是可以发现问题的，有时间可以尝试","like_count":0},{"had_liked":false,"id":285807,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1617017624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617017624","product_id":100039001,"comment_content":"嗯，写单元测试","like_count":0},{"had_liked":false,"id":284545,"user_name":"大风","can_delete":false,"product_type":"c1","uid":1640974,"ip_address":"","ucode":"583873CCAA2A67","user_header":"","comment_is_top":false,"comment_ctime":1616328928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616328928","product_id":100039001,"comment_content":"多谢大师点拨。有追求想上进的开发者还是要为自己的代码写好单元测试，欠下的债会要加倍奉还的，一定要有这样的心态。","like_count":0},{"had_liked":false,"id":281831,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1614917390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614917390","product_id":100039001,"comment_content":"我的观点是，有unittests和经过code review的代码，就像一个极具匠心的高手经受的产品，用着放心，质量有保证；很多人在成为高手之前需要有一颗成为匠人的心，慢慢修炼。很多时候需要和现实平衡，自己把握一个度。","like_count":0},{"had_liked":false,"id":266622,"user_name":"小妖","can_delete":false,"product_type":"c1","uid":1730626,"ip_address":"","ucode":"49C01DBFADF101","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","comment_is_top":false,"comment_ctime":1607418803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607418803","product_id":100039001,"comment_content":"代码重构的两大护航手段：1.单元测试 2.CodeReview","like_count":0},{"had_liked":false,"id":259326,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1604681343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604681343","product_id":100039001,"comment_content":"你说得很多，但我就是不写....<br>也不能这么不讲理，主要有几点吧。<br>1. 像你说的，没有测试参与的项目，你在谷歌写，但是工期给我很紧，测试催我提测，这个时候如果不是经常被测出很多bug，一般就不爱写，让测试去发现，我在修补就好了。。。。会写出很多难看代码。<br><br>2. 单测在大型系统中，其实很难整，工具方法还好，很多是需要调用外部接口的，但开发环境很多接口不一定是能用的，能用也不一定跟线上一直，就得造数据。还是中间调用，没法造。 只能测一小部分，自己当前项目就 形成破窗效应了，直接一键部署到云，集成测试吧。 反正现在集成测试部署接云后快捷方便。<br><br>3. 单元测试的入参往往是一个超大的dto，参数几个的还好，有些几十个，而且还有子类。。。情况很多。 <br><br>久而久之，现在就是写一些测试能不能跑通的用例，然后就直接部署到测试环境，进行测试了。<br>但环境部署成本比单测维护的开发环境更低，我们团队就慢慢不爱写单测了，至少不会考虑覆盖率，只会写可通测试。 ","like_count":0},{"had_liked":false,"id":259173,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604646731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604646731","product_id":100039001,"comment_content":"我一般单元测试很少写，一般就是写接口，自己用postman跑一遍，测几组数据，实际上和单元测试一样，只不过是没有落到代码层面而已。但是没有测试，肯定是不行的，你连能不能跑通，会不会报错都不能保证。但是多端多种情况且还有别的任务，有些实在还是要依赖测试来测。","like_count":0},{"had_liked":false,"id":256840,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1603763589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603763589","product_id":100039001,"comment_content":"保证重构不出错最有效的办法就是单元测试。<br>单元测试重不重要？重要！单元测试有没有用？有用！单元测试写没写？没有！<br>这就是我的现状，从学代码开始就知道单元测试很重要，直到现在，也只在上个月尝试写过一次单元测试。<br>开始肯定要经历痛苦的挣扎，期望后期靠习惯驱动。纵观评论区，放弃单元测试有各种各样的理由，坚持单元测试的却只谈习惯，习惯了写单元测试。<br>起初以为单元测试导致代码量翻倍，会同时导致时间也翻倍，其实设计和编码的时间都是一半的一半，单元测试不需要再有更多的设计，所以会节约一半的时间，它真的没有想象中的那么难，只是因为我从来没有真正的开始。","like_count":0},{"had_liked":false,"id":255891,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603452585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603452585","product_id":100039001,"comment_content":"目前大多公司，特别是中小公司开发人员都不会做单元测试，公司的业务竞争导致项目的预算压缩的很厉害，在开发平台层面，为了能获得最大收益我们使用了模版生成项目的骨架代码，编写开发规范限制开发行为等手段来保证时间进度和代码的正确性。但是上线过程中经历了集成测试，准生产测试后还是会存在很多的bug，综上结合我的经历，还是有必要做代码的单元测试，另外还要提高开发人员的测试案例的思维，如果时间实在不够要有一个或多人经验丰富的人做代码的review把关，确保代码质量。","like_count":0},{"had_liked":false,"id":255566,"user_name":"slyvia_li","can_delete":false,"product_type":"c1","uid":2181110,"ip_address":"","ucode":"97B609140E69FD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Etr1TYTsMiazWFoGnReIVP1EW3RxWPMqIqH3aJ2AziaEuqNhBMtUooWabiaDsciaovXpUwr1K60txjYowWPHEFzpXQ/132","comment_is_top":false,"comment_ctime":1603373837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603373837","product_id":100039001,"comment_content":"public static int findFirstEqualBiggerIdxOfSortedArray(int[] array, int num) {<br>        if (array == null || array.length == 0) return -1;<br>        int left = 0, right = array.length - 1, mid;<br>        if (num &gt; array[right])  return -1;<br>        if (num &lt;= array[left])  return left;         <br>        while (right - left - 1 &gt; 0) {<br>            mid = (left + right) &#47; 2;<br>            if (num &lt;= array[mid]) {<br>                right = mid;<br>            }  else {<br>                left = mid;<br>            }<br>            if (num &lt;= array[left]) {<br>                return left;<br>            }<br>        }<br>        return right;<br>    }","like_count":0},{"had_liked":false,"id":252447,"user_name":"Vivion","can_delete":false,"product_type":"c1","uid":1242310,"ip_address":"","ucode":"C62C4F46B8EB4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c6/aed9e44a.jpg","comment_is_top":false,"comment_ctime":1602302533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602302533","product_id":100039001,"comment_content":"之前我们团队也是不写单元测试，提测前全靠手工功能测试保证质量。很容易过分自信觉得没问题，而且自测的时候用例又不列全，结果一提测一堆 bug。<br>后来上面开始要求单元测试，给所有人安排了一个月的时间补。但是大家的积极性很不高，觉得代码现在也能用，为什么要为了纸面上的覆盖率去做这样的事，于是测试代码就写得比较敷衍。如果想拿这些测试代码来看服务在干什么，还不如看设计文档。<br>我自己呢就走捷径直接写了主要功能的集成测试，纸面上的代码覆盖率有了，加新功能或重构的时候也能测出问题，解放了手动的功能测试时间。<br>所以单元测试还是要早落地，才更易行，也早受惠。","like_count":0},{"had_liked":false,"id":250603,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1601167989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601167989","product_id":100039001,"comment_content":"特别想问下王争老师，测试用户界面应该怎么写单元测试呢？还有就是一个负责curd的数据管理类怎样写单元测试？","like_count":0},{"had_liked":false,"id":246745,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599469335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599469335","product_id":100039001,"comment_content":"问题一：<br>1、有<br>2、不充分<br>3、不好测试，耦合度愿意，<br>4、mock出其他类来解决的","like_count":0},{"had_liked":false,"id":245941,"user_name":"ThinkingQuest","can_delete":false,"product_type":"c1","uid":1118560,"ip_address":"","ucode":"597D0C00DAEFE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0SDRac7XoordnKYgDLhz5wxAOtE6xqcsSywsywEtKQAR7xicBZQ6ceYftfZjl4Ivq3a5dzvRhYkn2GcUWiaQK7ZQ/132","comment_is_top":false,"comment_ctime":1599115814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599115814","product_id":100039001,"comment_content":"单元测试难落地，不是因为大家不愿意写。 是因为很多时候真的不知道怎么写。 <br><br>期待有个能详解单元测试最佳实践的课程。","like_count":0},{"had_liked":false,"id":244745,"user_name":"庄坤","can_delete":false,"product_type":"c1","uid":1610407,"ip_address":"","ucode":"5E1C3E234BB793","user_header":"https://static001.geekbang.org/account/avatar/00/18/92/a7/b16dfff3.jpg","comment_is_top":false,"comment_ctime":1598663278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598663278","product_id":100039001,"comment_content":"公司说要做单元测试，结果压根没有考虑测试需要的时间，导致单元测试就是为了应付要求，跑到够高就完事，","like_count":0},{"had_liked":false,"id":244520,"user_name":"蛀牙","can_delete":false,"product_type":"c1","uid":1153349,"ip_address":"","ucode":"F765A67DFEADFD","user_header":"","comment_is_top":false,"comment_ctime":1598554219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598554219","product_id":100039001,"comment_content":"我们组就要求尽力达到100%的unit test coverage, 我觉太高了，有时候就是为了测试而测试，会出现为了测试而做一些不必要的重构。","like_count":0},{"had_liked":false,"id":244508,"user_name":"蛀牙","can_delete":false,"product_type":"c1","uid":1153349,"ip_address":"","ucode":"F765A67DFEADFD","user_header":"","comment_is_top":false,"comment_ctime":1598542004,"is_pvip":false,"replies":[{"id":"90143","content":"如果静态函数需要mock的话，mock起来比较难","user_name":"作者回复","comment_id":244508,"uid":"1190123","ip_address":"","utype":1,"ctime":1598835624,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1598542004","product_id":100039001,"comment_content":"老师提到：“2. 写单元测试能帮你发现代码设计上的问题 ... 没有使用依赖注入、大量使用静态函数、全局变量、代码高度耦合等。&quot;<br><br>为何大量使用静态函数不好？是因为难以mock影响测试的细度和性能吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504609,"discussion_content":"如果静态函数需要mock的话，mock起来比较难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598835624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242742,"user_name":"scarlett","can_delete":false,"product_type":"c1","uid":1104937,"ip_address":"","ucode":"F30414146C709F","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/29/33d0d7ff.jpg","comment_is_top":false,"comment_ctime":1597829129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597829129","product_id":100039001,"comment_content":"真的是一门心法课， 边看就迫不及待想去重构自己的代码","like_count":0},{"had_liked":false,"id":240082,"user_name":"李阳","can_delete":false,"product_type":"c1","uid":1092806,"ip_address":"","ucode":"22492F371F4C84","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/c6/30820fa2.jpg","comment_is_top":false,"comment_ctime":1596759001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596759001","product_id":100039001,"comment_content":"以前写过。后来破窗了就再没写过了，毕竟正经的代码都写不完，工期太紧。","like_count":0},{"had_liked":false,"id":239265,"user_name":"Geek_cde7db","can_delete":false,"product_type":"c1","uid":2096765,"ip_address":"","ucode":"D8A7F8EA700009","user_header":"","comment_is_top":false,"comment_ctime":1596470283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596470283","product_id":100039001,"comment_content":"之前写的代码量不多，基本靠思维测试，费脑子。<br>如果能领略到单元测试的魅力，或许。。。","like_count":0},{"had_liked":false,"id":236237,"user_name":"Geek_jackli","can_delete":false,"product_type":"c1","uid":2052007,"ip_address":"","ucode":"DD6B91E486DE40","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLajLoBBBPgMCl5eibqWpzUSKtJRtNGaYzkKeNTCFY1IeicjpXSxDmEjf0z1JzjtzUR3maJXQzebSWA/132","comment_is_top":false,"comment_ctime":1595375229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595375229","product_id":100039001,"comment_content":"小公司，能用就行，别说单元测试了……","like_count":0},{"had_liked":false,"id":232049,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1593844005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593844005","product_id":100039001,"comment_content":"上一个讨论里本来想写入单元测试的，但是说实话自己实践的不多。unity在后来引入了单元测试功能，小试过一些，但是如文章中所说 整体开发环境是快糙猛。迭代太快根本没时间写 ","like_count":0},{"had_liked":false,"id":231762,"user_name":"Jerry Wu","can_delete":false,"product_type":"c1","uid":1203567,"ip_address":"","ucode":"AD29B6942AAAA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","comment_is_top":false,"comment_ctime":1593766490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593766490","product_id":100039001,"comment_content":"在小公司，单元测试为什么没法推行？<br><br>1. 没有写测试的意识，写好业务代码就行，有那个时间还不如刷知乎；<br>2. 代码质量很难量化，相比之下，没按时完成任务，这个标准就一目了然；<br>3. 缺乏激励，你写了测试，代码质量很高，那又如何？没有奖金，也没晋升，久而久之，就没动力了。","like_count":0},{"had_liked":false,"id":228122,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1592561400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592561400","product_id":100039001,"comment_content":"以前从来没有写过单元测试，前一个月刚刚来到新公司，领导要求学会使用单元测试，默默说一声，现在项目没有测试，全靠开发自测，不写单元测试慌的一笔呀","like_count":0},{"had_liked":false,"id":221123,"user_name":"张晋 🇨🇳","can_delete":false,"product_type":"c1","uid":2002268,"ip_address":"","ucode":"DC20FB284DB730","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8d/5c/a3e67232.jpg","comment_is_top":false,"comment_ctime":1590410552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590410552","product_id":100039001,"comment_content":"正好最近在学习go语言，被go语言的测试性能所吸引，所以用go语言实现一下<br>&#47;&#47;binary_search<br>package binary_search<br><br>import &quot;errors&quot;<br><br>var ArrayCanNotBeEmptyError  = errors.New(&quot;array can not be empty&quot;)<br>var TargetIsNotFoundError  = errors.New(&quot;can not find required target&quot;)<br><br>func binarySearch(array []int ,target int)(index int,err error){<br><br>\tif len(array)==0{<br>\t\terr = ArrayCanNotBeEmptyError<br>\t\treturn<br>\t}<br>\tstart:=0<br>\tend := len(array)-1<br>\tfor true{<br>\t\tif end&lt;start{<br>\t\t\terr = TargetIsNotFoundError<br>\t\t\treturn<br>\t\t}<br>\t\tmid := (start +end) &#47;2<br>\t\tif array[mid] &gt; target{<br>\t\t\tend  = mid-1<br>\t\t}else if array[mid]&lt;target{<br>\t\t\tstart = mid+1<br>\t\t}else{<br>\t\t\tindex = mid<br>\t\t\treturn<br>\t\t}<br>\t}<br>\treturn<br>}<br>&#47;&#47; test<br>package binary_search<br><br>import &quot;testing&quot;<br><br><br>func Test_binarySearch(t *testing.T) {<br>\ttype args struct {<br>\t\tarray  []int<br>\t\ttarget int<br>\t}<br>\ttests := []struct {<br>\t\tname      string<br>\t\targs      args<br>\t\twantIndex int<br>\t\terr   error<br>\t}{<br>\t\t&#47;&#47; TODO: Add test cases.<br>\t\t{<br>\t\t\t&quot;len(array) == 0&quot;,<br>\t\t\targs{[]int{},1},<br>\t\t\t0,<br>\t\t\tArrayCanNotBeEmptyError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) == 1 &amp;&amp; target not found&quot;,<br>\t\t\targs{[]int{2},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) == 1 &amp;&amp; target is found&quot;,<br>\t\t\targs{[]int{1},1},<br>\t\t\t0,<br>\t\t\tnil,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is odd &amp;&amp; target not found &quot;,<br>\t\t\targs{[]int{2,3,4},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is odd &amp;&amp; target  found &quot;,<br>\t\t\targs{[]int{1,3,4},1},<br>\t\t\t0,<br>\t\t\tnil,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is even &amp;&amp; target not found &quot;,<br>\t\t\targs{[]int{2,3,4,5},1},<br>\t\t\t0,<br>\t\t\tTargetIsNotFoundError,<br>\t\t},<br>\t\t{<br>\t\t\t&quot;len(array) is even &amp;&amp; target  found &quot;,<br>\t\t\targs{[]int{2,1,4,5},1},<br>\t\t\t1,<br>\t\t\tnil,<br>\t\t},<br>\t}<br>\tfor _, tt := range tests {<br>\t\tt.Run(tt.name, func(t *testing.T) {<br>\t\t\tgotIndex, err := binarySearch(tt.args.array, tt.args.target)<br>\t\t\tif err != tt.err {<br>\t\t\t\tt.Errorf(&quot;binarySearch() error = %v, wantErr %v&quot;, err, tt.err)<br>\t\t\t\treturn<br>\t\t\t}<br>\t\t\tif gotIndex != tt.wantIndex {<br>\t\t\t\tt.Errorf(&quot;binarySearch() gotIndex = %v, want %v&quot;, gotIndex, tt.wantIndex)<br>\t\t\t}<br>\t\t})<br>\t}<br>}","like_count":0},{"had_liked":false,"id":219858,"user_name":"Jerry.hu","can_delete":false,"product_type":"c1","uid":1004984,"ip_address":"","ucode":"A2A918DEE6FA2F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/b8/a3dbb4f2.jpg","comment_is_top":false,"comment_ctime":1590111123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590111123","product_id":100039001,"comment_content":"1小时写代码0.5小时写注释2小时写单元测试","like_count":0},{"had_liked":false,"id":216918,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1589368995,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589368995","product_id":100039001,"comment_content":"【设计模式笔记28】20200513<br>再想一个问题怎么才算一个合格的单元测试？个人觉得至少要覆盖正常和异常场景，首先把代码当做一个黑盒，进行功能性测试。确保基本功能没问题。然后进行白盒测试，作为开发者知道内部有哪些细节，那么就需要对这些细节单独测试。确保功能和细节都是正确的才是合格的测试。写单元测试有两个极端，只写基本的功能测试以及为了覆盖率写了若干非必要的测试，这两种都是不可取的。在此基础上还可以更进一步，多思考异常的场景，临界条件等。","like_count":0},{"had_liked":false,"id":215495,"user_name":"充满希望的一天","can_delete":false,"product_type":"c1","uid":1907531,"ip_address":"","ucode":"AEBE5B5072F964","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/4b/33f5a948.jpg","comment_is_top":false,"comment_ctime":1589001863,"is_pvip":false,"replies":[{"id":"86261","content":"是的~","user_name":"作者回复","comment_id":215495,"uid":"1190123","ip_address":"","utype":1,"ctime":1594389251,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1589001863","product_id":100039001,"comment_content":"单元测试主要是检查service逻辑么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494457,"discussion_content":"是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594389251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213201,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1588329377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588329377","product_id":100039001,"comment_content":"第二个问题：由于是递增数组，测试给定值可以是小于数组下标0、大于数组最后一个数的边界测试，还有给定值是否不是数字","like_count":0},{"had_liked":false,"id":209181,"user_name":"70","can_delete":false,"product_type":"c1","uid":1081899,"ip_address":"","ucode":"A5884B2BDDAB70","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/2b/cf93c499.jpg","comment_is_top":false,"comment_ctime":1587517561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587517561","product_id":100039001,"comment_content":"前两天一个开发任务，我也尝试了一下写单元测试。确实单元测试比较耗时间，但是单元测试，对于代码之间提升很大，只要设计的单元测试用例没问题，代码模块就不太会出现bug。但是由于业务场景的限制可能代码需要伴随业务调整。由于公司框架里面的大量单例模式的使用，但这些实例不是通过依赖注入的方式，所以不得不使用一下反射去修改实例另外mock。整个流程下来感受是：先设计单元测试，再写代码，可以提高代码质量。单元测试可以反向检测代码是否符合高内聚，低耦合","like_count":0},{"had_liked":false,"id":208415,"user_name":"雪吖头","can_delete":false,"product_type":"c1","uid":1910984,"ip_address":"","ucode":"ED6E96979DE27D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/28/c8/13d82fec.jpg","comment_is_top":false,"comment_ctime":1587353691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587353691","product_id":100039001,"comment_content":"最简单的也是最容易忽视的。王老师的这篇文章对单元测试作用的讲解，让我印象深刻。在以后的工作学习中我也要有意识的去写单元测试，同时，不断思考 如何去把单元测试写好。","like_count":0},{"had_liked":false,"id":208139,"user_name":"浮生醉","can_delete":false,"product_type":"c1","uid":1783354,"ip_address":"","ucode":"7549E41BD65511","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/3a/335db90a.jpg","comment_is_top":false,"comment_ctime":1587283385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587283385","product_id":100039001,"comment_content":"公司现在主要就是用DBUnit和Mock来写单测，现在为了补之前代码的单测写的比较泛，后面还是需要针对一些边界条件多写一些，一来清晰的知道自己代码的边界条件在哪，二来也利于重构后验证","like_count":0},{"had_liked":false,"id":206646,"user_name":"...","can_delete":false,"product_type":"c1","uid":1356225,"ip_address":"","ucode":"D2E6EBA5E9B6F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","comment_is_top":false,"comment_ctime":1586913212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586913212","product_id":100039001,"comment_content":"接口测试会不会比单元测试会好一点呢？ 因为单元测试，在重构的过程中很可能会修改 移除一些重复的逻辑，或者是说重命名函数， 或者是重复的代码提到函数中。 这样有的单元测试就会运行失败了。 接口测试相对而言不会涉及到具体的代码层面，但是可以保证接口的逻辑不会发生变化。但是接口测试比较烦的是有的地方没办法测试，或者是说测试会耗费很大的精力。但是好处也是显而易见的。 而且如果接手一个旧项目的话，从接口测试我觉得会更能够了解对应的功能。","like_count":0},{"had_liked":false,"id":206200,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1586822855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586822855","product_id":100039001,"comment_content":"我们的单元测试覆盖率很低，经常是测试发现了bug再写个单元测试验证一下。当然核心的业务逻辑会写，比如资金的增减，并发操作等。单元测试的用例设计确实是个细活，要求程序员熟悉业务才能写出较好的用例。","like_count":0},{"had_liked":false,"id":205857,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586747618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586747618","product_id":100039001,"comment_content":"打卡28","like_count":0},{"had_liked":false,"id":202598,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586012984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586012984","product_id":100039001,"comment_content":"以前公司没有单元测试，也没有 code review ，我以前就觉得单元测试很重要，这次看了王争老师给出的理由，更有必要写了。<br><br>以后尽量写代码都写上单元测试","like_count":0},{"had_liked":false,"id":199912,"user_name":"杜","can_delete":false,"product_type":"c1","uid":1236070,"ip_address":"","ucode":"E372639657C9AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/66/5861451b.jpg","comment_is_top":false,"comment_ctime":1585498345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585498345","product_id":100039001,"comment_content":"比如一个public的接口，重度依赖数据库，此外还需要调用一些private的方法，一些其他微服务模块的接口，这样的情况应该怎么写单测呢？其实就是不明白哪些功能应该被单测测试到哪些不需要被单测测试到？private函数会包括更细粒度的业务处理逻辑，但是单测一般都是真的public方法的。","like_count":0},{"had_liked":false,"id":198225,"user_name":"Sissi.C","can_delete":false,"product_type":"c1","uid":1748046,"ip_address":"","ucode":"689AA6A8BE1687","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ac/4e/08b0644b.jpg","comment_is_top":false,"comment_ctime":1585419554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585419554","product_id":100039001,"comment_content":"我很想知道别人家的技术团队是怎么坚持不懈的写单元测试的，论一个码农的自我修养……","like_count":0},{"had_liked":false,"id":197498,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1585382005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585382005","product_id":100039001,"comment_content":"同作者所说，我们一般任务不紧会写单元测试或集成测试，但是需求一多就实在没办法，代码质量难以确保","like_count":0},{"had_liked":false,"id":197409,"user_name":"秀才","can_delete":false,"product_type":"c1","uid":1748463,"ip_address":"","ucode":"201FE03405A10B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ad/ef/5aae45db.jpg","comment_is_top":false,"comment_ctime":1585374673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585374673","product_id":100039001,"comment_content":"同意","like_count":0},{"had_liked":false,"id":194129,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1585028667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585028667","product_id":100039001,"comment_content":"我所在的团队 要求必须写单元测试用例 覆盖率要求在70%以上 否则代码提交时无法通过CI 也就是硬性规定","like_count":0},{"had_liked":false,"id":190093,"user_name":"悟","can_delete":false,"product_type":"c1","uid":1085006,"ip_address":"","ucode":"9F56AD21CCC7E1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/4e/985caf6b.jpg","comment_is_top":false,"comment_ctime":1584601879,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1584601879","product_id":100039001,"comment_content":"重构前领头人务必有以下能力<br>1、业务必须非常熟悉<br>2、有设计意识<br>3、牛逼的技术能力","like_count":0},{"had_liked":false,"id":189825,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584572978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584572978","product_id":100039001,"comment_content":"单元测试真的是我的一个痛点","like_count":0},{"had_liked":false,"id":188843,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584425079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584425079","product_id":100039001,"comment_content":"老师，如何测试一个单例是线程安全的。并发和异步的单元模式应该是不太好写的。老师有什么经验可以分享吗？","like_count":0},{"had_liked":false,"id":183773,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1583132262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583132262","product_id":100039001,"comment_content":"以前偶尔会有单元测试的习惯，但是后面发现改动一下逻辑单元测试也要跟着改，就很难坚持了。但是我认为单元测试非常有必要的。自己写好了后，写单元测试时就会发现很多遗漏点，或者没考虑到的地方，等于重新梳理一下需求。而且写代码过程中去修改bug，比后面再去修改要快很多。","like_count":0},{"had_liked":false,"id":183463,"user_name":"aderm","can_delete":false,"product_type":"c1","uid":1068825,"ip_address":"","ucode":"1C8FCBA02AEA34","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/19/05834ca2.jpg","comment_is_top":false,"comment_ctime":1583047001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583047001","product_id":100039001,"comment_content":"打卡 写了例子。https:&#47;&#47;github.com&#47;aderm&#47;JavaTest","like_count":0},{"had_liked":false,"id":182822,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582870866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582870866","product_id":100039001,"comment_content":"确实就像老师说的，只有真正写过单元测试的，才会对文章中的很多内容有很强的共鸣。<br>自己亲身体会有两点比较深刻，一个是如果程序设计的不合理，单元测试就会非常难写；二是写单元测试的时候往往会发现程序中很多的细小的逻辑bug","like_count":0},{"had_liked":false,"id":182784,"user_name":"Moyou","can_delete":false,"product_type":"c1","uid":1206789,"ip_address":"","ucode":"9EF86F426D5873","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/05/5154e91e.jpg","comment_is_top":false,"comment_ctime":1582865963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582865963","product_id":100039001,"comment_content":"我在 Google 的时候，很多项目几乎没有测试团队参与，代码的正确性完全靠开发团队来保障，线上 bug 反倒非常少。 这句话我深认同。很多同学还是不敢没有任何测试就上线的。而程序自己测试往往比测试同学测试靠谱(因为现在很多的测试同学也就是功能性测试，点点没有报错就过了).","like_count":0},{"had_liked":false,"id":182585,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582812201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582812201","product_id":100039001,"comment_content":"如果模块解耦，单元测试就比较好写，不然写单元测试就太痛苦了，各种mock。如果是自己的代码，发现单元测试难写，我首先想到的是重构代码，一般都是代码设计有问题，耦合太严重。另外单元测试也没有针对每个类写，有时候是针对整个功能模块写单元测试，尽量覆盖所有的场景，这样的单元测试也很容易读。另外如果之后修复了bug，也可以针对bug写单元测试。","like_count":0},{"had_liked":false,"id":182524,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582802053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582802053","product_id":100039001,"comment_content":"对于问题一,我只能说很抱歉,虽然,一直来说喊着进行书写完成进行单元测试,但是就是一句空话罢了,而实际上,对于国内互联网公司一直要求快糙猛的进度开发,贯彻执行单元测试并不容易<br>","like_count":0},{"had_liked":false,"id":180062,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1582176585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582176585","product_id":100039001,"comment_content":"公司领导对于重构的错误认识，让我们在重构这条路上也越走越远，更不用说自己去做单元测试。","like_count":0},{"had_liked":false,"id":179259,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1581946861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581946861","product_id":100039001,"comment_content":"没有写单元测试","like_count":0},{"had_liked":false,"id":178539,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1581736990,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1581736990","product_id":100039001,"comment_content":"自己小组的项目，是有单元测试，但是个人感觉很多时候都是为了把写的case跑通来写的，不是像软件工程测试方法中写那么多测试样例。","like_count":0},{"had_liked":false,"id":178472,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1581695283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581695283","product_id":100039001,"comment_content":"小争哥也只能孤独的写单元测试……<br>我觉得目前环境下对外API层的单元测试能覆盖了就已经很好了","like_count":0},{"had_liked":false,"id":175534,"user_name":"Geek_ab3d9a","can_delete":false,"product_type":"c1","uid":1550553,"ip_address":"","ucode":"1AFEE5FA59D470","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eol8MiawYVfCtkaFL9DFGoWpuajsKicwyt7IWm07JfrLMDuksEZJqia4Rbicw0biayokhgvSK0rUXIAngQ/132","comment_is_top":false,"comment_ctime":1580740205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580740205","product_id":100039001,"comment_content":"老师  我们的项目都很小，一般10-20人&#47;天就能完成整个项目。后端接口大概几十个。项目时间很紧。现在我们都没有写单元测试，请问这种情况是否需要写单元测试？","like_count":0},{"had_liked":false,"id":174848,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580435019,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580435019","product_id":100039001,"comment_content":"如果是spring的项目，一些对象都是框架自动注入的，怎么写单元测试呢？","like_count":0,"discussions":[{"author":{"id":1122034,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/f2/453d5f88.jpg","nickname":"seker","note":"","ucode":"9B705F91355873","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327754,"discussion_content":"哈哈，我觉得这样的评论挺好的，即便是被广泛使用的知名项目，也会存在一些槽点。重要的是作为持续学习者，拥有一颗敢于质疑和探索真理的心，并对众人讨论中出现的不同声音持开放态度。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605934982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803858,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/86/52/b92dc111.jpg","nickname":"Tobias","note":"","ucode":"F3225639EDA193","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295416,"discussion_content":"不能只因为一个命名和实现不符合断言mybatis 代码写的烂，还是多学习mybatis设计和实现上的亮点吧~","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1596188845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309607,"discussion_content":"非也，感觉是设计模式就是无招胜有招, 有规则但都不是强制的，就是没有确定概念的东西，实践起来的方式就是照着葫芦画瓢 ，画成啥样都行,只要好用就有道理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601365521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574143,"discussion_content":"重载用炸了都","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653870421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564936,"discussion_content":"无招胜有招说的好，与其说Mybatis不标准，不如说这趟课教的模式很多模式死板","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650356602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133194,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4a/8a/c1069412.jpg","nickname":"makermade","note":"","ucode":"03386B90CB8F20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557914,"discussion_content":"羡慕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648023134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348548,"discussion_content":"批判继承思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612620659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307815,"discussion_content":"...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600765674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045078,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","nickname":"Jie","note":"","ucode":"AB94041E548FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275505,"discussion_content":"(直言不讳...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590722181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174328,"user_name":"卓璋","can_delete":false,"product_type":"c1","uid":1242280,"ip_address":"","ucode":"D98508121AFE63","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/a8/69b98112.jpg","comment_is_top":false,"comment_ctime":1580143896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580143896","product_id":100039001,"comment_content":"对于前端，页面到了下个版本可能需求变更，写的测试也废了，这些作者怎么看","like_count":0},{"had_liked":false,"id":173004,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1579405219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579405219","product_id":100039001,"comment_content":"对于比较复杂的代码段可以试着写下单元测试，这样可以减少写的代码bug","like_count":0},{"had_liked":false,"id":172883,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1579350396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579350396","product_id":100039001,"comment_content":"当前团队没有写单元测试的习惯，更不会code review。提过建议但不被重视，大家更喜欢做容易被看到的事，比如完成了某个功能，虽然代码shi一样。所以只能自我要求完善单元测试，review项目代码，看到不好的地方，思考是否有更好的设计实现。","like_count":0,"discussions":[{"author":{"id":1985935,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4d/8f/e3f171c1.jpg","nickname":"xgh","note":"","ucode":"3C508E2ED32508","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289828,"discussion_content":"但是要符合语义啊，干的不是工厂的事，就不应以factory结尾啊","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1594221157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172302,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1579146346,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579146346","product_id":100039001,"comment_content":"现在的项目，领导强烈要求我写单元测试，而且对于新功能编写，都是一而再再而三地嘱咐写单元测试。看了评论区的很多同学，感觉我好幸福。","like_count":0},{"had_liked":false,"id":171295,"user_name":"睁眼看世界","can_delete":false,"product_type":"c1","uid":1206388,"ip_address":"","ucode":"F94CF34BC5B2AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/74/461b202d.jpg","comment_is_top":false,"comment_ctime":1578895952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578895952","product_id":100039001,"comment_content":"  老师，单元测试一般是初步开发的时候会编写，后续修改或者改动，几乎没有同步。另外想请教一个问题，单元测试的粒度。例如在MVC模型中，是需要每一层都编写单元测试？还是针对controller层即可？","like_count":0},{"had_liked":false,"id":171244,"user_name":"debug","can_delete":false,"product_type":"c1","uid":1746558,"ip_address":"","ucode":"B7B18146BB30DB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a6/7e/83d6b7dd.jpg","comment_is_top":false,"comment_ctime":1578885909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578885909","product_id":100039001,"comment_content":"最近看了下gtest","like_count":0},{"had_liked":false,"id":171155,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1578875183,"is_pvip":false,"replies":[{"id":"67749","content":"能不能给个具体的代码例子呢","user_name":"作者回复","comment_id":171155,"uid":"1190123","ip_address":"","utype":1,"ctime":1580122177,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1578875183","product_id":100039001,"comment_content":"请问老师，个人实践中最大的困惑在于对异步逻辑的单元测试要如何写？<br>比如函数A的调用是没有返回值的，返回值在回调函数B中体现","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481251,"discussion_content":"能不能给个具体的代码例子呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142746,"discussion_content":"在哪里体现不重要，重要的是能拿到最终结果。如你的例子。回调函数的结果肯定不会丢掉，要么持久化，要么扔到别的线程再处理。可以mock持久化的逻辑，得到持久化前的结果在assert，不一定要捕获到每个执行线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171098,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1578844213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578844213","product_id":100039001,"comment_content":"作为敏捷开发团队的一员的话，TDD是我们团队非常推崇的一种方式，而保证单元测试的编写覆盖率能够达到标准的前提，是团队给每个人编写代码预留了编写单元测试的时间，以及有讨论的过程中足够清晰的表明了任务的验收条件，可能发生的情况等。当然，这也是在于从零开发原生项目的前提下，如果是接受的旧项目，庞杂的源代码以及老旧的逻辑互相依赖严重，写单元测试是真的难以推行，除非能够选择架构重构，否则也无处下手","like_count":0},{"had_liked":false,"id":171054,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1578834000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578834000","product_id":100039001,"comment_content":"平时主要是做数据处理，也得慢慢把单元测试做起来了","like_count":0},{"had_liked":false,"id":170410,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1578587952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578587952","product_id":100039001,"comment_content":"团队对单测有想法，但是也没有落实下来，发布的时候也不太关注，保证现有单测都要过就行。<br>自己给自己的要求是新增的代码都尽量加上单测。<br>但是现在写业务接口，有点不知道该如何写单测，覆盖率到是上去了，但是觉得自己没有把握到写单测的实质，测试业务。<br>就是有这样一种感觉，业务分散在controler service  dao层，每层都是mock下层的情况，每层的分支也不多，单测覆盖率达到很高，但是觉得还是没有测试到点儿上，该错还是错。<br>这就很让人心累⊙﹏⊙","like_count":0},{"had_liked":false,"id":169987,"user_name":"杨陆伟","can_delete":false,"product_type":"c1","uid":1108457,"ip_address":"","ucode":"3BC968447406EB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/e9/1f95e422.jpg","comment_is_top":false,"comment_ctime":1578489291,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578489291","product_id":100039001,"comment_content":"说的太好了，光靠leader督促是没有用的，必须团队成员从心底认可这件事情","like_count":0},{"had_liked":false,"id":169983,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578487642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578487642","product_id":100039001,"comment_content":"单元测试的框架一定要好用，能帮助开发人员，提高自测效率，开发人员可以写用例。<br>一旦习惯养成，用例数量及覆盖率到一定规模。<br>对交付质量，代码重构起到事半功倍的效果。<br>","like_count":0},{"had_liked":false,"id":169718,"user_name":"朋便天下","can_delete":false,"product_type":"c1","uid":1034495,"ip_address":"","ucode":"2940358BA08241","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/ff/374f2c0f.jpg","comment_is_top":false,"comment_ctime":1578412172,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578412172","product_id":100039001,"comment_content":"目前参与的项目要求写单元测试；<br>整个工程要求条件覆盖率达到95%以上，使用了JUnit和mock；<br>在好不容易达到了95以上之后，因为一些人修改了原有的代码之后，没有修改UT，导致覆盖率又下去了，所以又得重新补ut，如此反复多次。<br>而且有些方法真的是可测试性不好（估计是设计问题），内部调用了很多的私有方法，覆盖率很难上去。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142783,"discussion_content":"private方法大部分情况都可以改成protected，如果实在洁癖，改成final protected总可以吧，这样就可以分看写ut了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579482704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169690,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1578406868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578406868","product_id":100039001,"comment_content":"和 @刘大明 差不多的情况 我也很无奈😂","like_count":0},{"had_liked":false,"id":169451,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1578359470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578359470","product_id":100039001,"comment_content":"单元测试很重要，之前写某项目的时间足够多，写过场景覆盖率很广的测试案例结果就是0bug上线.<br>最近的项目由于开发时间紧，现在有bug了...","like_count":0},{"had_liked":false,"id":169432,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1578356121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578356121","product_id":100039001,"comment_content":"现在就在写单元测试，感觉这个需要对原程序很懂才行。还有单元测试虽然粒度小，不过有的依赖很多的话，需要各种Mock，感觉也不简单啊…… 不过香是香","like_count":0},{"had_liked":false,"id":169377,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1578323885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578323885","product_id":100039001,"comment_content":"刚开始接触单元测试的时候。会编写完整的单元测试，但是当时接触的是CURD的接口，比如根据条件批量查询符合条件的员工的一个service接口，然后部分数据通过缓存，部分数据通过db组合在一起，比如调用cacheManager + UserMapper,测试这个接口就需要mock cacheManager和UserMapper,导致代码测试起来比较麻烦，大量时间花在编写mock对象，但是其实和这个接口对外的功能又没关系，是内部的实现逻辑有关系。这一点比较疑惑，觉得这样测试已经违背了理解代码内部逻辑的原则，但是不构造这些异常，这个接口又没什么好测试的，对于代码的可测试性的概念，如何提升可测试性，还是模糊的。<br>后面虽然没有坚持写完整的单元测试了，但是程序的正确性流程。还是会编写单元测试走走一遍。","like_count":0},{"had_liked":false,"id":169372,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578323355,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578323355","product_id":100039001,"comment_content":"https:&#47;&#47;github.com&#47;zhangw&#47;misc.java.jimohou.me&#47;blob&#47;master&#47;src&#47;test&#47;java&#47;test&#47;geekbang&#47;design&#47;pattern&#47;beauty&#47;artical28&#47;HomeWorkTest.java","like_count":0},{"had_liked":false,"id":169294,"user_name":"七楼","can_delete":false,"product_type":"c1","uid":1491023,"ip_address":"","ucode":"106856DF5F8F12","user_header":"https://static001.geekbang.org/account/avatar/00/16/c0/4f/db7f2ab2.jpg","comment_is_top":false,"comment_ctime":1578309031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578309031","product_id":100039001,"comment_content":"单元测试  让我的逻辑更缜密了  的确有好处  而且bug也少","like_count":0},{"had_liked":false,"id":169293,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1578308428,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578308428","product_id":100039001,"comment_content":"程序员这一行业本该是智力密集型的，但现在很多公司把它搞成劳动密集型的。<br>——————————————————<br>你这句话道出了现实！哈哈😄","like_count":0,"discussions":[{"author":{"id":1506974,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","nickname":"路伴友行","note":"","ucode":"96B54B7EEAEDAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":122232,"discussion_content":"说明老板智商不够😂😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578328472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169292,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1578308392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578308392","product_id":100039001,"comment_content":"项目越来越大，和复杂化，每次新增功能或者改造测试都很麻烦，还容易测试不到。就是单元测试不够，今年目标是把核心功能加上单元测试，估计能节省大量的测试时间。<br>单元测试能检验代码好坏，是不是高耦合，确实，如果不重构，单元测试都没法写了。","like_count":0},{"had_liked":false,"id":169213,"user_name":"JamesPxy","can_delete":false,"product_type":"c1","uid":1320179,"ip_address":"","ucode":"558D707463589D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q2LT8JFWSghiaVbMMOkOkLnuibEqG2YOyEdCA5icEZH3Qpd9pL23mpzic9tWwyiciaBicE4YPMVnITOodulwG2SS75r2w/132","comment_is_top":false,"comment_ctime":1578293620,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578293620","product_id":100039001,"comment_content":"单元测试大法好，知易行难！","like_count":0},{"had_liked":false,"id":169161,"user_name":"一道阳光","can_delete":false,"product_type":"c1","uid":1239557,"ip_address":"","ucode":"F35207CCCEC6E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","comment_is_top":false,"comment_ctime":1578282030,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1578282030","product_id":100039001,"comment_content":"我要吐槽下我现在做的项目，代码设计的太烂了，注释太少，而且注释不正确，有的方法名都不正确，误导功能逻辑，因为逻辑耦合在一起，出现了很多bug，这几个月来一直在填坑。在填坑的过程中，体会到这些烂代码是如何违反设计原则（比如整个项目就两个sql.xml文件，啥功能都合并在一个大而全的dao类中），修改bug往里面添加代码时会思考添加的这行代码是不是更让人读不懂，维护性越差。感谢老师的这个专栏，让我对代码设计感受如此之深，更多的深刻体会和实践才能有质量的提升。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142801,"discussion_content":"拆成几个dao应该是第一步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120745,"discussion_content":"是时候重构一波了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578292902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169154,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578281074,"is_pvip":false,"replies":[{"id":"65746","content":"抱歉，我改下","user_name":"作者回复","comment_id":169154,"uid":"1190123","ip_address":"","utype":1,"ctime":1578380172,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1578281074","product_id":100039001,"comment_content":"testToNumber_nullorEmpty()里text1和text2是一样的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480440,"discussion_content":"抱歉，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578380172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169148,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1578280670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578280670","product_id":100039001,"comment_content":"纯函数就非常利于写单元测试，和类静态方法一样。","like_count":0},{"had_liked":false,"id":169096,"user_name":"Zm","can_delete":false,"product_type":"c1","uid":1448893,"ip_address":"","ucode":"831FF80F07E965","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKj4w4lW7ibGEVxPv8wS1CrXKDeBz3RAaAdISxQSD23uUpV3wicsIMepaYZE8GzRcWmSpjet5NDN4MA/132","comment_is_top":false,"comment_ctime":1578273136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578273136","product_id":100039001,"comment_content":"目前要求单元测试覆盖率达到百分之百。就一个set get方法都要写上，简直崩溃。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142809,"discussion_content":"getter/setter 100%coverage的终极大法：序列化/反序列化对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169081,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1578271875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271875","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":169079,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1578271817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271817","product_id":100039001,"comment_content":"单元测试其实是程序员对自己code后第一道保障，对于修复旧的系统问题，哪怕是小小的修改在单测中也会暴露问题。但对于很多较为复杂的功能，入参比较简单，但是方法中依赖了很多别的函数，对于这样的情况单测真的只能是测试逻辑是否正确，这一点现在在困扰着我，希望大佬们指点~","like_count":0},{"had_liked":false,"id":169078,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1578271782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578271782","product_id":100039001,"comment_content":"公司不重视，直属上级也不重视，实行不了，只能换地了！","like_count":0},{"had_liked":false,"id":169055,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1578268702,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578268702","product_id":100039001,"comment_content":"当时刚进入公司实习，我的活就是完善各项目的单元测试😂，感觉对理解业务还是很有帮助的，但是现在业务越来越急了，留给写单元测试的时间真是越来越少了。","like_count":0,"discussions":[{"author":{"id":1716601,"avatar":"","nickname":"Geek_e9b8c4","note":"","ucode":"C29F7344A6EE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120335,"discussion_content":"留给写单元测试的时间不多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578272598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169049,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1578266678,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578266678","product_id":100039001,"comment_content":"原代码如果不适合写单元测试，那就重写吧","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142835,"discussion_content":"重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169048,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1578266653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578266653","product_id":100039001,"comment_content":"业务先行","like_count":0}]}