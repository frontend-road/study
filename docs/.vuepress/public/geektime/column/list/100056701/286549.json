{"id":286549,"title":"18 | 波动的响应延迟：如何应对变慢的Redis？（上）","content":"<p>你好，我是蒋德钧。</p><p>在Redis的实际部署应用中，有一个非常严重的问题，那就是Redis突然变慢了。一旦出现这个问题，不仅会直接影响用户的使用体验，还可能会影响到“旁人”，也就是和Redis在同一个业务系统中的其他系统，比如说数据库。</p><p>举个小例子，在秒杀场景下，一旦Redis变慢了，大量的用户下单请求就会被拖慢，也就是说，用户提交了下单申请，却没有收到任何响应，这会给用户带来非常糟糕的使用体验，甚至可能会导致用户流失。</p><p>而且，在实际生产环境中，Redis往往是业务系统中的一个环节（例如作为缓存或是作为数据库）。一旦Redis上的请求延迟增加，就可能引起业务系统中的一串儿“连锁反应”。</p><p>我借助一个包含了Redis的业务逻辑的小例子，简单地给你解释一下。</p><p>应用服务器（App Server）要完成一个事务性操作，包括在MySQL上执行一个写事务，在Redis上插入一个标记位，并通过一个第三方服务给用户发送一条完成消息。</p><p>这三个操作都需要保证事务原子性，所以，如果此时Redis的延迟增加，就会拖累App Server端整个事务的执行。这个事务一直完成不了，又会导致MySQL上写事务占用的资源无法释放，进而导致访问MySQL的其他请求被阻塞。很明显，Redis变慢会带来严重的连锁反应。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/58/64/58555bc098b518e992136f1128430c64.jpg?wh=2572*1211\" alt=\"\"></p><p>我相信，不少人遇到过这个问题，那具体该怎么解决呢？</p><p>这个时候，切忌“病急乱投医”。如果没有一套行之有效的应对方案，大多数时候我们只能各种尝试，做无用功。在前面的<a href=\"https://time.geekbang.org/column/article/285000\">第16讲</a>、<a href=\"https://time.geekbang.org/column/article/286082\">第17讲</a>中，我们学习了会导致Redis变慢的潜在阻塞点以及相应的解决方案，即异步线程机制和CPU绑核。除此之外，还有一些因素会导致Redis变慢。</p><p>接下来的两节课，我再向你介绍一下如何系统性地应对Redis变慢这个问题。我会从问题认定、系统性排查和应对方案这3个方面给你具体讲解。学完这两节课以后，你一定能够有章法地解决Redis变慢的问题。</p><h2>Redis真的变慢了吗？</h2><p>在实际解决问题之前，我们首先要弄清楚，如何判断Redis是不是真的变慢了。</p><p>一个最直接的方法，就是<strong>查看Redis的响应延迟</strong>。</p><p>大部分时候，Redis延迟很低，但是在某些时刻，有些Redis实例会出现很高的响应延迟，甚至能达到几秒到十几秒，不过持续时间不长，这也叫延迟“毛刺”。当你发现Redis命令的执行时间突然就增长到了几秒，基本就可以认定Redis变慢了。</p><p>这种方法是看Redis延迟的绝对值，但是，在不同的软硬件环境下，Redis本身的绝对性能并不相同。比如，在我的环境中，当延迟为1ms时，我判定Redis变慢了，但是你的硬件配置高，那么，在你的运行环境下，可能延迟是0.2ms的时候，你就可以认定Redis变慢了。</p><p>所以，这里我就要说第二个方法了，也就是基于<strong>当前环境下的Redis基线性能</strong>做判断。所谓的基线性能呢，也就是一个系统在低压力、无干扰下的基本性能，这个性能只由当前的软硬件配置决定。</p><p>你可能会问，具体怎么确定基线性能呢？有什么好方法吗？</p><p>实际上，从2.8.7版本开始，redis-cli命令提供了–intrinsic-latency选项，可以用来监测和统计测试期间内的最大延迟，这个延迟可以作为Redis的基线性能。其中，测试时长可以用–intrinsic-latency选项的参数来指定。</p><p>举个例子，比如说，我们运行下面的命令，该命令会打印120秒内监测到的最大延迟。可以看到，这里的最大延迟是119微秒，也就是基线性能为119微秒。一般情况下，运行120秒就足够监测到最大延迟了，所以，我们可以把参数设置为120。</p><pre><code>./redis-cli --intrinsic-latency 120\nMax latency so far: 17 microseconds.\nMax latency so far: 44 microseconds.\nMax latency so far: 94 microseconds.\nMax latency so far: 110 microseconds.\nMax latency so far: 119 microseconds.\n\n36481658 total runs (avg latency: 3.2893 microseconds / 3289.32 nanoseconds per run).\nWorst run took 36x longer than the average latency.\n</code></pre><p>需要注意的是，基线性能和当前的操作系统、硬件配置相关。因此，我们可以把它和Redis运行时的延迟结合起来，再进一步判断Redis性能是否变慢了。</p><p>一般来说，你要把运行时延迟和基线性能进行对比，如果你观察到的Redis运行时延迟是其基线性能的2倍及以上，就可以认定Redis变慢了。</p><p>判断基线性能这一点，对于在虚拟化环境下运行的Redis来说，非常重要。这是因为，在虚拟化环境（例如虚拟机或容器）中，由于增加了虚拟化软件层，与物理机相比，虚拟机或容器本身就会引入一定的性能开销，所以基线性能会高一些。下面的测试结果，显示的就是某一个虚拟机上运行Redis时测的基线性能。</p><pre><code>$ ./redis-cli --intrinsic-latency 120\nMax latency so far: 692 microseconds.\nMax latency so far: 915 microseconds.\nMax latency so far: 2193 microseconds.\nMax latency so far: 9343 microseconds.\nMax latency so far: 9871 microseconds.\n</code></pre><p>可以看到，由于虚拟化软件本身的开销，此时的基线性能已经达到了9.871ms。如果该Redis实例的运行时延迟为10ms，这并不能算作性能变慢，因为此时，运行时延迟只比基线性能增加了1.3%。如果你不了解基线性能，一看到较高的运行时延迟，就很有可能误判Redis变慢了。</p><p>不过，我们通常是通过客户端和网络访问Redis服务，为了避免网络对基线性能的影响，刚刚说的这个命令需要在服务器端直接运行，这也就是说，<strong>我们只考虑服务器端软硬件环境的影响</strong>。</p><p>如果你想了解网络对Redis性能的影响，一个简单的方法是用iPerf这样的工具，测量从Redis客户端到服务器端的网络延迟。如果这个延迟有几十毫秒甚至是几百毫秒，就说明，Redis运行的网络环境中很可能有大流量的其他应用程序在运行，导致网络拥塞了。这个时候，你就需要协调网络运维，调整网络的流量分配了。</p><h2>如何应对Redis变慢？</h2><p>经过了上一步之后，你已经能够确定Redis是否变慢了。一旦发现变慢了，接下来，就要开始查找原因并解决这个问题了，这其实是一个很有意思的诊断过程。</p><p>此时的你就像一名医生，而Redis则是一位病人。在给病人看病时，你要知道人体的机制，还要知道可能对身体造成影响的外部因素，比如不健康的食物、不好的情绪等，然后要拍CT、心电图等找出病因，最后再确定治疗方案。</p><p>在诊断“Redis变慢”这个病症时，同样也是这样。你要基于自己对Redis本身的工作原理的理解，并且结合和它交互的操作系统、存储以及网络等外部系统关键机制，再借助一些辅助工具来定位原因，并制定行之有效的解决方案。</p><p>医生诊断一般都是有章可循的。同样，Redis的性能诊断也有章可依，这就是影响Redis的关键因素。下面这张图你应该有印象，这是我们在<a href=\"https://time.geekbang.org/column/article/268262\">第一节课</a>画的Redis架构图。你可以重点关注下我在图上新增的红色模块，也就是Redis自身的操作特性、文件系统和操作系统，它们是影响Redis性能的三大要素。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/06/cd026801924e197f5c79828c368cd706.jpg?wh=4242*3039\" alt=\"\"></p><p>接下来，我将从这三大要素入手，结合实际的应用场景，依次给你介绍从不同要素出发排查和解决问题的实践经验。这节课我先给你介绍Redis的自身操作特性的影响，下节课我们再重点研究操作系统和文件系统的影响。</p><h3>Redis自身操作特性的影响</h3><p>首先，我们来学习下Redis提供的键值对命令操作对延迟性能的影响。我重点介绍两类关键操作：慢查询命令和过期key操作。</p><p><strong>1.慢查询命令</strong></p><p>慢查询命令，就是指在Redis中执行速度慢的命令，这会导致Redis延迟增加。Redis提供的命令操作很多，并不是所有命令都慢，这和命令操作的复杂度有关。所以，我们必须要知道Redis的不同命令的复杂度。</p><p>比如说，Value类型为String时，GET/SET操作主要就是操作Redis的哈希表索引。这个操作复杂度基本是固定的，即O(1)。但是，当Value类型为Set时，SORT、SUNION/SMEMBERS操作复杂度分别为O(N+M*log(M))和O(N)。其中，N为Set中的元素个数，M为SORT操作返回的元素个数。这个复杂度就增加了很多。<a href=\"https://redis.io/commands/\">Redis官方文档</a>中对每个命令的复杂度都有介绍，当你需要了解某个命令的复杂度时，可以直接查询。</p><p>那该怎么应对这个问题呢？在这儿，我就要给你排查建议和解决方法了，这也是今天的第一个方法。</p><p>当你发现Redis性能变慢时，可以通过Redis日志，或者是latency monitor工具，查询变慢的请求，根据请求对应的具体命令以及官方文档，确认下是否采用了复杂度高的慢查询命令。</p><p>如果的确有大量的慢查询命令，有两种处理方式：</p><ol>\n<li><strong>用其他高效命令代替</strong>。比如说，如果你需要返回一个SET中的所有成员时，不要使用SMEMBERS命令，而是要使用SSCAN多次迭代返回，避免一次返回大量数据，造成线程阻塞。</li>\n<li><strong>当你需要执行排序、交集、并集操作时，可以在客户端完成，而不要用SORT、SUNION、SINTER这些命令，以免拖慢Redis实例</strong>。</li>\n</ol><p>当然，如果业务逻辑就是要求使用慢查询命令，那你得考虑采用性能更好的CPU，更快地完成查询命令，避免慢查询的影响。</p><p>还有一个比较容易忽略的慢查询命令，就是KEYS。它用于返回和输入模式匹配的所有key，例如，以下命令返回所有包含“name”字符串的keys。</p><pre><code>redis&gt; KEYS *name*\n1) &quot;lastname&quot;\n2) &quot;firstname&quot;\n</code></pre><p><strong>因为KEYS命令需要遍历存储的键值对，所以操作延时高</strong>。如果你不了解它的实现而使用了它，就会导致Redis性能变慢。所以，<strong>KEYS命令一般不被建议用于生产环境中</strong>。</p><p><strong>2.过期key操作</strong></p><p>接下来，我们来看过期key的自动删除机制。它是Redis用来回收内存空间的常用机制，应用广泛，本身就会引起Redis操作阻塞，导致性能变慢，所以，你必须要知道该机制对性能的影响。</p><p>Redis键值对的key可以设置过期时间。默认情况下，Redis每100毫秒会删除一些过期key，具体的算法如下：</p><ol>\n<li>采样ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP个数的key，并将其中过期的key全部删除；</li>\n<li>如果超过25%的key过期了，则重复删除的过程，直到过期key的比例降至25%以下。</li>\n</ol><p>ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP是Redis的一个参数，默认是20，那么，一秒内基本有200个过期key会被删除。这一策略对清除过期key、释放内存空间很有帮助。如果每秒钟删除200个过期key，并不会对Redis造成太大影响。</p><p>但是，如果触发了上面这个算法的第二条，Redis就会一直删除以释放内存空间。注意，<strong>删除操作是阻塞的</strong>（Redis 4.0后可以用异步线程机制来减少阻塞影响）。所以，一旦该条件触发，Redis的线程就会一直执行删除，这样一来，就没办法正常服务其他的键值操作了，就会进一步引起其他键值操作的延迟增加，Redis就会变慢。</p><p>那么，算法的第二条是怎么被触发的呢？其中一个重要来源，就是<strong>频繁使用带有相同时间参数的EXPIREAT命令设置过期key</strong>，这就会导致，在同一秒内有大量的key同时过期。</p><p>现在，我就要给出第二条排查建议和解决方法了。</p><p>你要检查业务代码在使用EXPIREAT命令设置key过期时间时，是否使用了相同的UNIX时间戳，有没有使用EXPIRE命令给批量的key设置相同的过期秒数。因为，这都会造成大量key在同一时间过期，导致性能变慢。</p><p>遇到这种情况时，千万不要嫌麻烦，你首先要根据实际业务的使用需求，决定EXPIREAT和EXPIRE的过期时间参数。其次，如果一批key的确是同时过期，你还可以在EXPIREAT和EXPIRE的过期时间参数上，加上一个一定大小范围内的随机数，这样，既保证了key在一个邻近时间范围内被删除，又避免了同时过期造成的压力。</p><h2>小结</h2><p>这节课，我首先给你介绍了Redis性能变慢带来的重要影响，希望你能充分重视这个问题。我重点介绍了判断Redis变慢的方法，一个是看响应延迟，一个是看基线性能。同时，我还给了你两种排查和解决Redis变慢这个问题的方法：</p><ol>\n<li>从慢查询命令开始排查，并且根据业务需求替换慢查询命令；</li>\n<li>排查过期key的时间设置，并根据实际使用需求，设置不同的过期时间。</li>\n</ol><p>性能诊断通常是一件困难的事，所以我们一定不能毫无目标地“乱找”。这节课给你介绍的内容，就是排查和解决Redis性能变慢的章法，你一定要按照章法逐一排查，这样才可能尽快地找出原因。</p><p>当然，要真正把Redis用好，除了要了解Redis本身的原理，还要了解和Redis交互的各底层系统的关键机制，包括操作系统和文件系统。通常情况下，一些难以排查的问题是Redis的用法或设置和底层系统的工作机制不协调导致的。下节课，我会着重给你介绍文件系统、操作系统对Redis性能的影响，以及相应的排查方法和解决方案。</p><h2>每课一问</h2><p>这节课，我提到了KEYS命令，因为它的复杂度很高，容易引起Redis线程操作阻塞，不适用于生产环境。但是，KEYS命令本身提供的功能是上层业务应用经常需要的，即返回与输入模式匹配的keys。</p><p>请思考一下，在Redis中，还有哪些其他命令可以代替KEYS命令，实现同样的功能呢？这些命令的复杂度会导致Redis变慢吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得有所收获，欢迎你把今天的内容分享给你的朋友。</p>","neighbors":{"left":{"article_title":"17 | 为什么CPU结构也会影响Redis的性能？","id":286082},"right":{"article_title":"19 | 波动的响应延迟：如何应对变慢的Redis？（下）","id":287819}},"comments":[{"had_liked":false,"id":248925,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1600359310,"is_pvip":true,"discussion_count":26,"race_medal":0,"score":"1453299305358","product_id":100056701,"comment_content":"在 Redis 中，还有哪些其他命令可以代替 KEYS 命令，实现同样的功能呢？这些命令的复杂度会导致 Redis 变慢吗？<br><br>如果想要获取整个实例的所有key，建议使用SCAN命令代替。客户端通过执行SCAN $cursor COUNT $count可以得到一批key以及下一个游标$cursor，然后把这个$cursor当作SCAN的参数，再次执行，以此往复，直到返回的$cursor为0时，就把整个实例中的所有key遍历出来了。<br><br>关于SCAN讨论最多的问题就是，Redis在做Rehash时，会不会漏key或返回重复的key。<br><br>在使用SCAN命令时，不会漏key，但可能会得到重复的key，这主要和Redis的Rehash机制有关。Redis的所有key存在一个全局的哈希表中，如果存入的key慢慢变多，在达到一定阈值后，为了避免哈希冲突导致查询效率降低，这个哈希表会进行扩容。与之对应的，key数量逐渐变少时，这个哈希表会缩容以节省空间。<br><br>1、为什么不会漏key？Redis在SCAN遍历全局哈希表时，采用*高位进位法*的方式遍历哈希桶（可网上查询图例，一看就明白），当哈希表扩容后，通过这种算法遍历，旧哈希表中的数据映射到新哈希表，依旧会保留原来的先后顺序，这样就可以保证遍历时不会遗漏也不会重复。<br><br>2、为什么SCAN会得到重复的key？这个情况主要发生在哈希表缩容。已经遍历过的哈希桶在缩容时，会映射到新哈希表没有遍历到的位置，所以继续遍历就会对同一个key返回多次。<br><br>SCAN是遍历整个实例的所有key，另外Redis针对Hash&#47;Set&#47;Sorted Set也提供了HSCAN&#47;SSCAN&#47;ZSCAN命令，用于遍历一个key中的所有元素，建议在获取一个bigkey的所有数据时使用，避免发生阻塞风险。<br><br>但是使用HSCAN&#47;SSCAN&#47;ZSCAN命令，返回的元素数量与执行SCAN逻辑可能不同。执行SCAN $cursor COUNT $count时一次最多返回count个数的key，数量不会超过count。<br><br>但Hash&#47;Set&#47;Sorted Set元素数量比较少时，底层会采用intset&#47;ziplist方式存储，如果以这种方式存储，在执行HSCAN&#47;SSCAN&#47;ZSCAN命令时，会无视count参数，直接把所有元素一次性返回，也就是说，得到的元素数量是会大于count参数的。当底层转为哈希表或跳表存储时，才会真正使用发count参数，最多返回count个元素。","like_count":339,"discussions":[{"author":{"id":1554294,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b7/76/c0f7b705.jpg","nickname":"😛","note":"","ucode":"98D66B91C4E4BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325253,"discussion_content":"Kaito小课堂又开课了，一个课的钱听两节，赚到😏","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1605256984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306936,"discussion_content":"每次下课后都要参加补习班的感觉","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1600422241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306946,"discussion_content":"哈哈，你咋这么优秀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600425467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306936,"ip_address":""},"score":306946,"extra":""},{"author":{"id":1739070,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","nickname":"InfoQ_小汤","note":"","ucode":"E4C30DB7A9B54C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":530753,"discussion_content":"为什么SCAN会得到重复的key？这个情况主要发生在哈希表缩容。已经遍历过的哈希桶在缩容时，会映射到新哈希表没有遍历到的位置，所以继续遍历就会对同一个key返回多次\n-----------------------------------------------------\n想请教下 什么情况下会发生hash表缩容 有阈值或者触发机制么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637140715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306946,"ip_address":""},"score":530753,"extra":"{\"user_type\":1}"},{"author":{"id":1411419,"avatar":"https://static001.geekbang.org/account/avatar/00/15/89/5b/b014ce14.jpg","nickname":"小五","note":"","ucode":"B7B1F121837CD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1739070,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","nickname":"InfoQ_小汤","note":"","ucode":"E4C30DB7A9B54C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542969,"discussion_content":"负载因子为 0.1 时会触发 rehash 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640918772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530753,"ip_address":""},"score":542969,"extra":""}]},{"author":{"id":1178634,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/0a/0c4b9170.jpg","nickname":"泠小墨","note":"","ucode":"73D296D9F42911","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312354,"discussion_content":"执行SCAN $cursor COUNT $count时一次最多返回count个数的key，数量不会超过count。  \n这句话应该有问题，$count 指的是slot的数量，不是key的数量\n\n127.0.0.1:7006> keys *\n(empty list or set)\n127.0.0.1:7006> set a 1\nOK\n127.0.0.1:7006> set aa 2\nOK\n127.0.0.1:7006> set aaa 3\nOK\n127.0.0.1:7006> scan 0 count 1\n1) &#34;1&#34;\n2) 1) &#34;a&#34;\n127.0.0.1:7006> scan 0 count 2\n1) &#34;3&#34;\n2) 1) &#34;a&#34;\n   2) &#34;aaa&#34;\n   3) &#34;aa&#34;\n127.0.0.1:7006>","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1602668874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1178634,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/0a/0c4b9170.jpg","nickname":"泠小墨","note":"","ucode":"73D296D9F42911","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312389,"discussion_content":"看了下源码，结果数量确实有可能会超过count。\n\nscan会一直遍历哈希桶，一个哈希桶会有多个元素，当scan拿到的结果一旦超过count后，就会停止遍历了，所以会有超过count结果集的情况。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1602675548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312354,"ip_address":""},"score":312389,"extra":""}]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348059,"discussion_content":"还有一点是 在分片集群场景下 SCAN 命令是无法跨节点扫描的，只能是一个节点一个节点的进行扫描。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1612418351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376415,"discussion_content":"对的 分片切割必定要自己查询 或者自行聚合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622114796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348059,"ip_address":""},"score":376415,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577430,"discussion_content":"keys可以跨节点吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656094129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348059,"ip_address":""},"score":577430,"extra":""}]},{"author":{"id":1834977,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ff/e1/ea2b6cef.jpg","nickname":"有头发的程序员","note":"","ucode":"48B9B1C5CC4E3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307007,"discussion_content":"并且6.0里面 scan还可以指定类型。 这样减少网络传输的数据。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1600454079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321849,"discussion_content":"看评论感觉课程买赚了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604639266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553507,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645939531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217712,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/b0/b073fe8b.jpg","nickname":"aMaMiMoU","note":"","ucode":"AF1E6CA541E482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364849,"discussion_content":"请教各位，现在很多云厂商的PaaS Redis服务禁用了scan和keys，这种场景下怎么获取所有key呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617628808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2568744,"avatar":"https://static001.geekbang.org/account/avatar/00/27/32/28/078ec46c.jpg","nickname":"top啦它","note":"","ucode":"1F2656293D1B9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1217712,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/b0/b073fe8b.jpg","nickname":"aMaMiMoU","note":"","ucode":"AF1E6CA541E482","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378924,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623512592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":364849,"ip_address":""},"score":378924,"extra":""}]},{"author":{"id":3201606,"avatar":"","nickname":"Geek_c5eb91","note":"","ucode":"650C7D09442F51","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590693,"discussion_content":"大佬，RedisTemplate 渐进式scan 元素兼容redis集群吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666007641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3201606,"avatar":"","nickname":"Geek_c5eb91","note":"","ucode":"650C7D09442F51","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590686,"discussion_content":"太有才了，虽然俺听不懂，但点评的很牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666003746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559708,"discussion_content":"高位进位法：\nhttps://blog.csdn.net/u014439693/article/details/108325632","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648892095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361216,"discussion_content":"ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP 课代表能解释一下这个参数吗？不太懂这个代表啥意思，是删除这个参数中配置的过期key数量吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616609348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369564,"discussion_content":"是的，大兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619082740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":361216,"ip_address":""},"score":369564,"extra":""}]},{"author":{"id":1879262,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ac/de/68f35320.jpg","nickname":"小来子","note":"","ucode":"4EDAF31E43B211","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344576,"discussion_content":"在几万个KV(string类型)的业务场景中, 分段scan操作应该对redis没有什么影响~.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611502944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321850,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604639274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1763046,"avatar":"","nickname":"与君共勉","note":"","ucode":"1FB5EBFCF510A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312105,"discussion_content":"我一直在查资料弄明白这个问题，现在终于找到了，感谢老哥，钦佩不已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602583302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306778,"discussion_content":"研究太深入了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600388215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306786,"discussion_content":"不深入，源码写的清晰，看一下就明白了哈～","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600390130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306778,"ip_address":""},"score":306786,"extra":""},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":336290,"discussion_content":"太谦虚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608545322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306786,"ip_address":""},"score":336290,"extra":""}]}]},{"had_liked":false,"id":248953,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1600391519,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"280773265759","product_id":100056701,"comment_content":"当你发现 Redis 性能变慢时，可以通过 Redis 日志，或者是 latency monitor 工具，查询变慢的请求，根据请求对应的具体命令以及官方文档，确认下是否采用了复杂度高的慢查询命令。<br>其实这个排除过程才是我们最想学习的，却被作者一带而过了。。。。","like_count":66,"discussions":[{"author":{"id":1606581,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIIibocUHNRgafeNUvibW0YI2v1qDaiaZCVQ37FcrMs0ettIDD0snhsy4Ac2ADnLmjM7KGNeznj2hrg/132","nickname":"一十六夜","note":"","ucode":"41D4A6695B2A7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306881,"discussion_content":"我在看es那门课的时候也是，好多重要的过程直接被跳过了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1600410064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","nickname":"melo","note":"","ucode":"BF381B18E75867","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335372,"discussion_content":"slowlog get","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1608175142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589905,"discussion_content":"你想知道如何排查得继续花钱，不花钱就像免费拿到吗？哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665390292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276763,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bd/9b/366bb87b.jpg","nickname":"飞龙","note":"","ucode":"EC83FE73985491","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582341,"discussion_content":"最简单就是先用slowlog查看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659403970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565750,"discussion_content":"青青子衿，悠悠我心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650535000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333669,"discussion_content":"我们是自研的客户端组件 监听客户端的平均速度。。反馈到报警中心。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607589453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033363,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c4/93/9dd4b277.jpg","nickname":"HACK_QC","note":"","ucode":"623FA185569F9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309117,"discussion_content":"我也觉得，也没有具体的举例子怎么来找，不然跟网上教程没区别了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601190919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306937,"discussion_content":"这个应该不复杂吧。我猜跟mysql的慢查询日志一样，网上应该有教程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600422309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1438102,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","nickname":"青青子衿","note":"","ucode":"4A388A3BA70C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307446,"discussion_content":"发现问题找到问题原因往往是比解决问题更重要的能力","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1600653224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306937,"ip_address":""},"score":307446,"extra":""}]}]},{"had_liked":false,"id":252516,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1602325322,"is_pvip":false,"replies":[{"id":"92226","content":"Redis cluster模式下不支持跨节点的SCAN操作，要想得到整个集群的SCAN结果，可以遍历每个节点，分别进行SCAN操作，然后在客户端合并结果。<br><br>另外有一个方法，是可以用Hash Tag，也就是在键值对的key中使用花括号{}，例如{user:}1, {user:}2这样。Redis cluster会针对花括号中的部分进行哈希，这样可以把具有相同前缀的key分配到同一个哈希槽里面。不过，这个方法的潜在风险是：大量相同前缀的key被分配到同一个哈希槽里面了，会导致数据在哈希槽之间分布不均衡。如果要用这个方法，需要评估下key的分布情况。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1602390172,"ip_address":"","comment_id":252516,"utype":1}],"discussion_count":2,"race_medal":0,"score":"91796638538","product_id":100056701,"comment_content":"针对redis-cluster还可以使用scan命令么？","like_count":22,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506795,"discussion_content":"Redis cluster模式下不支持跨节点的SCAN操作，要想得到整个集群的SCAN结果，可以遍历每个节点，分别进行SCAN操作，然后在客户端合并结果。\n\n另外有一个方法，是可以用Hash Tag，也就是在键值对的key中使用花括号{}，例如{user:}1, {user:}2这样。Redis cluster会针对花括号中的部分进行哈希，这样可以把具有相同前缀的key分配到同一个哈希槽里面。不过，这个方法的潜在风险是：大量相同前缀的key被分配到同一个哈希槽里面了，会导致数据在哈希槽之间分布不均衡。如果要用这个方法，需要评估下key的分布情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602390172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559711,"discussion_content":"老师同学好，Redis cluster模式，在代码层，不是提供统一的操作接口吗，也就是对开发人员是透明的，难道还需要在代码层面，对每个节点，执行scan，然后聚合？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648892640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270926,"user_name":"Geek_9b08a5","can_delete":false,"product_type":"c1","uid":2392536,"ip_address":"","ucode":"CF08E141456F24","user_header":"","comment_is_top":false,"comment_ctime":1609320026,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"74623764058","product_id":100056701,"comment_content":"第十八课：<br>1.作者讲了什么？<br>\t当redis查询变慢了怎么办，如何排查，如何进行处理？<br>2.作者是怎么把这件事将明白的？<br>\t1、通过分析redis各组件及硬件，找出问题所在<br>3.为了讲明白，作者讲了哪些要点，哪些亮点？<br>\t1、亮点：通过redis-cli --intrinsic-latency 120可以得知redis的基准线。后续可以根据基准线的响应速度进行判断是否查询慢，这是我之前所不知道的判断方法<br>\t2、要点：基于自己对 Redis 本身的工作原理的理解，并且结合和它交互的操作系统、存储以及网络等外部系统关键机制，再借助一些辅助工具来定位原因，并制定行之有效的解决方案<br>\t3、要点：Redis 自身操作特性的影响<br>\t\t1. 慢查询命令：命令操作的复杂度有关<br>\t\t\t排查方法：通过 Redis 日志，或者是 latency monitor 工具，查询变慢的请求<br>\t\t\t解决方法：1.用其他高效命令代替。如不要使用keys查询所有key，可以使用scan进行查询，不会阻塞线程<br>\t\t\t\t\t  2.当你需要执行排序、交集、并集操作时，可以在客户端完成，而不要用 SORT、SUNION、SINTER 这些命令，以免拖慢 Redis 实例。<br>\t\t2.过期 key 操作：redis本身的内存回收机制会造成redis操作阻塞，导致性能变慢（Redis 4.0 后可以用异步线程机制来减少阻塞影响）<br>\t\t    导致原因：大批量的key同时间内过期，导致删除过期key的机制一直触发，引起redis操作阻塞<br>\t\t\t解决方法：对key设定过期时间时，添加一个删除的时间随机数，能避免key存在同一时间过期<br>\t4、要点：redis删除过期key的机制，每100毫秒对一些key进行删除。算法如下<br>\t\t1.采样 ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP 个数的 key，并将其中过期的 key 全部删除；<br>\t\t2.如果超过 25% 的 key 过期了，则重复删除的过程，直到过期 key 的比例降至 25% 以下。<br><br>4.对于作者所讲的，我有哪些发散性思考？<br><br>5.将来在哪些场景里，我能够使用它？<br><br>6.留言区收获<br>\t1.在生产环境中，可以使用scan替代keys命令（答案来自@kaito 大佬）<br>\t\t当scan在Redis在做Rehash时，会不会漏key或返回重复的key？<br>\t\t\t1.不漏keys：Redis在SCAN遍历全局哈希表时，采用*高位进位法*的方式遍历哈希桶（可网上查询图例，一看就明白），当哈希表扩容后，通过这种算法遍历，旧哈希表中的数据映射到新哈希表，依旧会保留原来的先后顺序，这样就可以保证遍历时不会遗漏也不会重复。<br>\t\t\t2.key重复：这个情况主要发生在哈希表缩容。已经遍历过的哈希桶在缩容时，会映射到新哈希表没有遍历到的位置，所以继续遍历就会对同一个key返回多次。处理方法是在客户端直接做重复过滤<br>\t2.在redis-cluster中，不能使用一次scan在整个集群中获取所有的key，只能通过在每个实例上单独执行scan才可以，再到客户端进行合并\t","like_count":18,"discussions":[{"author":{"id":2829144,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/2b/58/4a67284d.jpg","nickname":"九月清晨柳成荫","note":"","ucode":"431713477304F9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556815,"discussion_content":"非凡哥 后面也没看到评论了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647522419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3190922,"avatar":"","nickname":"Geek_590385","note":"","ucode":"BE5BDD9180FA0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2829144,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/2b/58/4a67284d.jpg","nickname":"九月清晨柳成荫","note":"","ucode":"431713477304F9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":590460,"discussion_content":"o","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665764147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556815,"ip_address":"江西"},"score":590460,"extra":""}]},{"author":{"id":1236156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/bc/3c5a1634.jpg","nickname":"Loyalty","note":"","ucode":"C23EE6878580C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407535,"discussion_content":"哥们儿怎么换ID了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635052406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248950,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1600391203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31665162275","product_id":100056701,"comment_content":"通常线上是不能使用keys的，标准替代方案就是scan。scan不会导致redis变慢，只是如果在scan过程中kv表扩容的话可能会遇到重复key。<br>PS：sort的时间复杂度是O(N+M*log(M)) 是因为需要创建一个新的数字，并且用快排去排序。","like_count":7},{"had_liked":false,"id":265624,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606963754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23081800234","product_id":100056701,"comment_content":"可以利用scan命令。但是scan可能会返回重复key，使用方做个去重即可。","like_count":5},{"had_liked":false,"id":255241,"user_name":"王益新","can_delete":false,"product_type":"c1","uid":1115160,"ip_address":"","ucode":"459CC11CB1DF1F","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/18/d5cb509f.jpg","comment_is_top":false,"comment_ctime":1603288710,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14488190598","product_id":100056701,"comment_content":"&quot;默认情况下，Redis 每 100 毫秒会删除一些过期 key，具体的算法如下：采样 ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP 个数的 key，并将其中过期的 key 全部删除，ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP默认是 20，那么，一秒内基本有 200 个过期 key 会被删除。&quot;<br><br>这里的采样是什么意思？获取ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP个过期的key吗？那为什么说是其中过期的key？<br><br>如果采样得到的不全是过期的key，一秒内怎么还会有 200 个过期 key 会被删除？","like_count":3,"discussions":[{"author":{"id":1961855,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ef/7f/8b69e4aa.jpg","nickname":"二月","note":"","ucode":"0624B1B40CDBF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375558,"discussion_content":"也有这个疑问。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621743386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388469,"discussion_content":"作者写作能力有点差。。看了这么多，已经习惯了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628774595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385540,"discussion_content":"采样的结果中是部分过期，极端情况全部过期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627119537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2105385,"avatar":"","nickname":"Geek_d421ea","note":"","ucode":"A8C2EA51542650","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325781,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605429506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248963,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1600392458,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"14485294346","product_id":100056701,"comment_content":"前段时间时间刚好看了redis里sort的实现，说说的我的理解。sort是基于Bentley &amp; McIlroy&#39;s Engineering a Sort Function。可以认为是partial qsort，只保证指定返回的数据（函数参数里的lrange和rrange）有序即可。在元素个数小于7的时候，采用插入排序，因为元素个数小的时候，快速排序并不高效。元素个数大大于7的时候，采用快速排序，经过这些优化之后，SORT操作复杂度为 O(N+M*log(M))。","like_count":3},{"had_liked":false,"id":254970,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1603243251,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"5898210547","product_id":100056701,"comment_content":"定时删除是个异步流程吧？为啥会是一个阻塞操作？是要删除的key特别多会导致cpu被大量占用，影响了主线程调用？","like_count":1,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339634,"discussion_content":"如果没有配置惰性删除的话 , 释放内存时间复杂度假设为O(1)(最优情况),多个key删除就是O(n)了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609749670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2392536,"avatar":"","nickname":"Geek_9b08a5","note":"","ucode":"CF08E141456F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338594,"discussion_content":"redis 4.0版本后才支持的异步线程删除机制，如果是4.0版本之前，肯定就在redis主线程中，那就会阻塞操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609319752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385541,"discussion_content":"我印象中是同步的，在redis的主线程中执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627119603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738455,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/d7/bfd9e42a.jpg","nickname":"轨迹","note":"","ucode":"6C9619A0B60CDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358313,"discussion_content":"同问，定时删除是后台线程，为什么为产生阻塞？是因为操作系统需要把释放掉的内存块插入一个空闲内存块的链表，这个操作导致的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615963551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/28/8f/f4d14c03.jpg","nickname":"Hm_","note":"","ucode":"24C176E95EEA3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337422,"discussion_content":"同问，我记得看有本书上说的是删除分两种，定时删除和请求触发的惰性删除，定时的应该是个后台任务吧，为什么会阻塞呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608900341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2392536,"avatar":"","nickname":"Geek_9b08a5","note":"","ucode":"CF08E141456F24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1124495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/28/8f/f4d14c03.jpg","nickname":"Hm_","note":"","ucode":"24C176E95EEA3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338596,"discussion_content":"定时删除：默认每秒是10次的过期扫描                                                         惰性删除：当客户端访问key时，对key的过期时间进行检测，如果过期就立即删除。                        异步线程删除机制是在4.0版本后才支持的                                                   ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609319952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337422,"ip_address":""},"score":338596,"extra":""},{"author":{"id":1148174,"avatar":"https://static001.geekbang.org/account/avatar/00/11/85/0e/e6640576.jpg","nickname":"阿声","note":"","ucode":"EEA5F2E9D4FC9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1124495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/28/8f/f4d14c03.jpg","nickname":"Hm_","note":"","ucode":"24C176E95EEA3B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563571,"discussion_content":"定时删除也是在主线程执行的，只不过不是每次执行命令后都进行扫描、删除，而是根据配置的时间间隔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650026090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337422,"ip_address":""},"score":563571,"extra":""}]},{"author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334797,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607994034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252715,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1602464454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897431750","product_id":100056701,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":359879,"user_name":"Geek_c5eb91","can_delete":false,"product_type":"c1","uid":3201606,"ip_address":"江西","ucode":"650C7D09442F51","user_header":"","comment_is_top":false,"comment_ctime":1666007680,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666007680","product_id":100056701,"comment_content":"老师，RedisTemplate 渐进式scan 元素兼容redis集群吗","like_count":0},{"had_liked":false,"id":354397,"user_name":"Geek_b14c55","can_delete":false,"product_type":"c1","uid":2027632,"ip_address":"浙江","ucode":"C98EAEC045F13D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MOuCWWOnoQjOr8KjicQ84R7xu6DRcfDv3VAuHseGJ1gxXicKJboA24vOcrcJickTJPwFAU38VuwCGGkGq7f8WkTIg/132","comment_is_top":false,"comment_ctime":1660359668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660359668","product_id":100056701,"comment_content":"可以使用SCAN来代替keys 命令，SCAN是全表扫","like_count":0},{"had_liked":false,"id":354358,"user_name":"林雪杉","can_delete":false,"product_type":"c1","uid":2997047,"ip_address":"上海","ucode":"9BD26FB9412D63","user_header":"","comment_is_top":false,"comment_ctime":1660297362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660297362","product_id":100056701,"comment_content":"`---ts=2022-08-12 14:39:45;thread_name=DubboServerHandler-10.11.113.168:18001-thread-32;id=2fc;is_daemon=true;priority=5;TCCL=org.springframework.boot.loader.LaunchedURLClassLoader@6aaa5eb0<br>        +---[0.00187ms] io.lettuce.core.internal.AbstractInvocationHandler$MethodTranslator:get() #62<br><br>    `---[16.727451ms] io.lettuce.core.FutureSyncInvocationHandler:handleInvocation()        +---[0.002098ms] io.lettuce.core.FutureSyncInvocationHandler:isTxControlMethod() #69<br><br>        +---[0.00123ms] io.lettuce.core.FutureSyncInvocationHandler:isTransactionActive() #69        +---[0.002434ms] io.lettuce.core.internal.AbstractInvocationHandler$MethodTranslator:get() #62<br><br>        +---[0.002282ms] io.lettuce.core.FutureSyncInvocationHandler:getTimeoutNs() #73        +---[0.007581ms] io.lettuce.core.FutureSyncInvocationHandler:isTxControlMethod() #69<br><br>        `---[15.280161ms] io.lettuce.core.internal.Futures:awaitOrCancel() #75        +---[0.005613ms] io.lettuce.core.FutureSyncInvocationHandler:isTransactionActive() #69<br><br><br>        +---[0.006147ms] io.lettuce.core.FutureSyncInvocationHandler:getTimeoutNs() #73<br>        `---[16.541098ms] io.lettuce.core.internal.Futures:awaitOrCancel() <br>投产前压测，操作redis耗时特别久，老师有什么排查思路吗？","like_count":0},{"had_liked":false,"id":340413,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1648804362,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648804362","product_id":100056701,"comment_content":"本机【Mac M1】运行情况如下：<br>➜  bin .&#47;redis-cli --intrinsic-latency 120<br>Max latency so far: 1 microseconds.<br>Max latency so far: 3 microseconds.<br>Max latency so far: 5 microseconds.<br>Max latency so far: 7 microseconds.<br>Max latency so far: 17 microseconds.<br>Max latency so far: 33 microseconds.<br>Max latency so far: 34 microseconds.<br>Max latency so far: 35 microseconds.<br>Max latency so far: 39 microseconds.<br>Max latency so far: 46 microseconds.<br>Max latency so far: 48 microseconds.<br>Max latency so far: 59 microseconds.<br>Max latency so far: 75 microseconds.<br>Max latency so far: 109 microseconds.<br>Max latency so far: 155 microseconds.<br>Max latency so far: 583 microseconds.<br>Max latency so far: 1073 microseconds.<br>Max latency so far: 1127 microseconds.<br>Max latency so far: 7119 microseconds.<br>Max latency so far: 9128 microseconds.<br><br>2686736240 total runs (avg latency: 0.0447 microseconds &#47; 44.66 nanoseconds per run).<br>Worst run took 204371x longer than the average latency.<br>➜  bin ","like_count":0},{"had_liked":false,"id":338544,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1647567380,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1647567380","product_id":100056701,"comment_content":"看完开透的那篇万字长文再来看这篇，感觉不那么累了😂","like_count":0,"discussions":[{"author":{"id":1242401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/21/17814610.jpg","nickname":"山东哥哥帅","note":"","ucode":"6BBEA84359262F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591627,"discussion_content":"求链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666713490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581879,"discussion_content":"有链接么兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659058037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330408,"user_name":"wedde","can_delete":false,"product_type":"c1","uid":1128756,"ip_address":"","ucode":"A49B1732CBE5DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/34/10fe2b93.jpg","comment_is_top":false,"comment_ctime":1641970328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641970328","product_id":100056701,"comment_content":"scan可以代替keys命令。但是scan使用不当，依然会拖慢整体redis的响应时间。<br>scan每次返回不大于count的key数量，包括0个key。如果命令后面带了模糊匹配的话，可能会连续多次scan都获取到0个元素。而spring使用迭代器封装了scan的实现，当调用hasNext()判断时，就有可能触发连续多次scan调用。","like_count":0},{"had_liked":false,"id":327320,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1640062259,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1640062259","product_id":100056701,"comment_content":"针对课后习题都说用scan解决，还提到如果使用scan时扩容会返回重复key，mark一下待研究。","like_count":0},{"had_liked":false,"id":316567,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1634394604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634394604","product_id":100056701,"comment_content":"老师 我有个问题，按到你整个课程的设计，这上下两篇应该在讲Redis 关键系统配置对Redis的影响，为什么会加个Redis 自身操作特性的影响呢？ ","like_count":0},{"had_liked":false,"id":316359,"user_name":"FelixFly","can_delete":false,"product_type":"c1","uid":1160461,"ip_address":"","ucode":"1D39A7C3D0E31F","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/0d/0e65dee6.jpg","comment_is_top":false,"comment_ctime":1634286613,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634286613","product_id":100056701,"comment_content":"如何能看到key的过期时间分布？响应慢了怎么判断是由于删除key导致的阻塞？","like_count":0},{"had_liked":false,"id":306621,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1628648342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628648342","product_id":100056701,"comment_content":"可以利用SCAN来进行命令,对于其中存在的重复key,上层利用set这种天然去重的数据结构来进行接收","like_count":0},{"had_liked":false,"id":304303,"user_name":"Liujun","can_delete":false,"product_type":"c1","uid":1736462,"ip_address":"","ucode":"3DB1F3CA57B5B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","comment_is_top":false,"comment_ctime":1627347022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627347022","product_id":100056701,"comment_content":"监控客户端评论响应时间","like_count":0},{"had_liked":false,"id":303802,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1627006548,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1627006548","product_id":100056701,"comment_content":"好像说了什么，好像又什么都没说<br>生产系统中出问题哪有时间整这些，赶紧恢复老板都在后面站着呢<br>同时这些命令，keys、集合操作基本都是被禁用的；所以正常情况下，生产系统中Redis变慢一般都是bigkey，同时过期，热点数据等等","like_count":1,"discussions":[{"author":{"id":1132192,"avatar":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","nickname":"张潇赟","note":"","ucode":"1A45B57F9E0723","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558578,"discussion_content":"嗯，这个是实际生产问题的状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648389351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2082118,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/P1y2k6dcoAWtlXkMcKFGeAmykTKCOKEicKsN0TX4eT6icibATfqnlsDyjicfjvo1zAa9lAS4ZGkSEGjeUUUmy9Qofg/132","nickname":"xyy_Li","note":"","ucode":"81A647AB5F757A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543227,"discussion_content":"确实，你说的这些好像才是实际应用中的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641010512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300892,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1625440331,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625440331","product_id":100056701,"comment_content":"删除操作异步化是合适的<br>查询方面的优化是：<br>避免使用集合类操作，避免bigkey，避免使用keys这种遍历全部key的操作","like_count":0},{"had_liked":false,"id":299968,"user_name":"李明轩","can_delete":false,"product_type":"c1","uid":1346388,"ip_address":"","ucode":"B576B19FCF8AD5","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/54/db56a871.jpg","comment_is_top":false,"comment_ctime":1624940133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624940133","product_id":100056701,"comment_content":"请问  redis插入标记位  是什么意思？","like_count":0},{"had_liked":false,"id":299967,"user_name":"李明轩","can_delete":false,"product_type":"c1","uid":1346388,"ip_address":"","ucode":"B576B19FCF8AD5","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/54/db56a871.jpg","comment_is_top":false,"comment_ctime":1624940095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624940095","product_id":100056701,"comment_content":"redis插入标记位","like_count":0},{"had_liked":false,"id":295015,"user_name":"小鱼","can_delete":false,"product_type":"c1","uid":1248115,"ip_address":"","ucode":"022B6D5D69DB68","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/73/44fe2df9.jpg","comment_is_top":false,"comment_ctime":1622183692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622183692","product_id":100056701,"comment_content":"有个疑问真的是把 redis操作 和操作数据库 以及操作消息放在一个事务里面做的吗","like_count":0},{"had_liked":false,"id":294712,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1622070111,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622070111","product_id":100056701,"comment_content":"### 如何应对变慢的 Redis<br><br>**基线性能**：一个系统在低压力、无干扰下的基本性能，只由当前的软硬件配置决定。<br><br>```<br>.&#47;redis-cli --intrinsic-latency &lt;测试时长&gt;<br>```<br><br>该命令会打印 &lt;测试时长&gt; 秒内监测到的最大延迟。<br><br>运行时延迟的时长 2 倍于基准时长，则是 redis 变慢了。<br><br>如果想测试 Redis 客户端道网络端的影响，可以用`iPerf` 工具。<br><br>**影响 Redis 性能的三大要素**：Redis 自身的操作特性、文件系统和操作系统。<br><br>## Redis 自身的操作特性<br><br>### 1.慢查询命令：<br><br>命令的慢操作和操作的复杂度相关。<br><br>操作度复杂度查询：https:&#47;&#47;redis.io&#47;commands&#47;<br><br>当你发现 Redis 性能变慢时，可以通过 Redis 日志，或者是 latency monitor 工具，查询变慢的请求，根据请求对应的具体命令以及官方文档，确认下是否采用了复杂度高的慢查询命令。<br><br>如果的确有大量的慢查询命令，有两种处理方式：用其他高效命令代替。<br><br>- 当需要返回一个 SET 中的所有成员时，不要使用 SMEMBERS 命令，而是要使用 SSCAN 多次迭代返回，避免一次返回大量数据，造成线程阻塞。<br><br>- 需要执行排序、交集、并集操作时，可以在客户端完成，而不要用 SORT、SUNION、SINTER 这些命令，以免拖慢 Redis 实例。<br><br>KEYS 命令需要遍历存储的键值对，所以操作延时高。KEYS 命令一般不被建议用于生产环境中<br><br>### 2. 过期 key 操作<br><br>Redis 会自动删除过期 key，回收内存空间，本身会引起 Redis 变慢。<br><br>默认情况下，Redis 每 100 ms 会删除一些过期 key，算法如下：<br><br>- 采样固定个数的 key，并将其中过期的 key 全部删除；（固定个数：ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP，默认 20）<br><br>- 如果超过 25% 的 key 过期了，则重复删除的过程，直到过期 key 的比例降至 25% 以下。<br><br>第一条的算法，如果每秒钟删除 200 个过期 key，并不会对 Redis 造成太大影响。<br><br>如果触发了第二条算法，可以在 EXPIREAT 和 EXPIRE 命令的过期时间参数上，加上一个一定大小范围内的随机数，这样，既保证了 key 在一个邻近时间范围内被删除，又避免了同时过期造成的压力。<br><br>","like_count":0},{"had_liked":false,"id":285966,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1617089454,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1617089454","product_id":100056701,"comment_content":"老师你好，<br>127.0.0.1:6379&gt; --intrinsic-latency 120<br>(error) ERR unknown command `--intrinsic-latency`, with args beginning with: `120`,<br>执行文档中的指令会出现这个错误，redis版本是6.0.8版本。","like_count":0,"discussions":[{"author":{"id":2308772,"avatar":"","nickname":"高杰","note":"","ucode":"5C36D7B97B8459","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545794,"discussion_content":"你这是登录redis后执行命令。。。。。正确操作是用client端命令加上这个参数来测试的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642052968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124130,"avatar":"https://static001.geekbang.org/account/avatar/00/11/27/22/747289a3.jpg","nickname":"howru","note":"","ucode":"A9F6CE24B14372","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376601,"discussion_content":"这条命令是需要在server端执行的，不是client端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622208541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285958,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1617087471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617087471","product_id":100056701,"comment_content":"突然发现我是来看壁纸的，哈哈哈哈","like_count":0},{"had_liked":false,"id":285295,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1616726995,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1616726995","product_id":100056701,"comment_content":"执行了一下 redis-cli --intrinsic-latency 120 命令，发现结果比较有意思，两次的结果差不多，从一开始 1 ms 的延迟，一直到后来的 8000+ ms。我访问的是 aliyun 上的 Redis。<br><br>```<br>&gt; redis-cli --intrinsic-latency 120<br><br>Max latency so far: 1 microseconds.<br>Max latency so far: 9 microseconds.<br>Max latency so far: 11 microseconds.<br>Max latency so far: 15 microseconds.<br>Max latency so far: 18 microseconds.<br>Max latency so far: 96 microseconds.<br>Max latency so far: 118 microseconds.<br>Max latency so far: 122 microseconds.<br>Max latency so far: 221 microseconds.<br>Max latency so far: 1047 microseconds.<br>Max latency so far: 1677 microseconds.<br>Max latency so far: 3378 microseconds.<br>Max latency so far: 4173 microseconds.<br>Max latency so far: 8509 microseconds.<br>2085259894 total runs (avg latency: 0.0575 microseconds &#47; 57.55 nanoseconds per run).<br>Worst run took 147862x longer than the average latency.<br>```<br><br>Redis 性能诊断的三个关键点：Redis 自身特性、操作系统、文件系统<br><br>Value 类型为 String 时，操作复杂度 O(1)，这个也解释了为什么有一些公司用 Redis 的时候，String 到底。<br><br>Value 类型为 Set 时，Sort、SUNION&#47;SMEMBERS 操作复杂度分别为 O(N+M*log(M)) 和 O(N)，后一个好理解，前面的那个估计得琢磨一下。<br><br>用 SSCAN 多次迭代返回代替 SMEMBERS 返回集合中所有成员。<br>KEYS 命令一般不用于生产环境。<br>不要让一批 key 的过期时间相同，可以加一个随机数<br><br>对于课后题，在生产环境中代替 KEYS 命令，返回与输入模式匹配的 keys，可以使用 SSCAN 分批次返回。<br><br>执行了一下 @泠小墨 留言中的例子，结果稍微有点意外<br><br>```<br>&gt; keys *<br> 1) &quot;1101001&quot;<br> 2) &quot;page1:uv&quot;<br> 3) &quot;aa&quot;<br> 4) &quot;comments&quot;<br> 5) &quot;aaa&quot;<br> 6) &quot;1101000&quot;<br> 7) &quot;zr&quot;<br> 8) &quot;testzset&quot;<br> 9) &quot;mqback&quot;<br>10) &quot;mylist&quot;<br>11) &quot;testkey&quot;<br>12) &quot;mqstream&quot;<br>13) &quot;a&quot;<br>14) &quot;testhash&quot;<br>15) &quot;hell&quot;<br>16) &quot;hello&quot;<br>&gt; scan 0 count 1<br>1) &quot;8&quot;<br>2) 1) &quot;1101001&quot;<br>&gt; scan 0 count 2<br>1) &quot;12&quot;<br>2) 1) &quot;1101001&quot;<br>   2) &quot;comments&quot;<br>```<br><br>在 课代表 @kaito 的提示下，看了一下 Redis 在 SCAN 时采用的 高位进位法，确实浅显易懂。","like_count":0},{"had_liked":false,"id":270921,"user_name":"Geek_9b08a5","can_delete":false,"product_type":"c1","uid":2392536,"ip_address":"","ucode":"CF08E141456F24","user_header":"","comment_is_top":false,"comment_ctime":1609318663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609318663","product_id":100056701,"comment_content":"老师好，我想问一下，在redis对过期key删除的第二个阶段的判断，也就是当CTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP中key达到25%会进行下一轮的删除时，那如果我的场景设置了key过期加上一个一定大小范围内的随机数的，还是达到了25%以上，还能怎么去避免呢，再比如说重复删除是有时间间隔的还是只要上一轮删完就进行下一轮，且当到达下一次过期扫描是中断单前的重复删除还是跳过当时的过期扫描？","like_count":0},{"had_liked":false,"id":265914,"user_name":"Geek9625","can_delete":false,"product_type":"c1","uid":2028943,"ip_address":"","ucode":"8110B0DE0432E1","user_header":"","comment_is_top":false,"comment_ctime":1607067737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607067737","product_id":100056701,"comment_content":"运行时延迟怎么算的呢","like_count":0},{"had_liked":false,"id":261800,"user_name":"鸳鸯戏水蝶双飞","can_delete":false,"product_type":"c1","uid":2178330,"ip_address":"","ucode":"BF0B0DA16E27D5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GicvRPEGZhqFSYn00tgI08hjV10eEkOC12LY7Zxn1EaYNH2icibxyRV1M0H6YqJuIyhajD4bHBluI4Xprq3YAlF5Q/132","comment_is_top":false,"comment_ctime":1605527459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605527459","product_id":100056701,"comment_content":"印象中定期删除key的第二条规则执行也是有一个超时时间的吧？<br>为了保证过期扫描不会出现循环过度，导致线程卡死现象，算法还增加了扫描时<br>间的上限，默认不会超过 25ms","like_count":0},{"had_liked":false,"id":260602,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1605068551,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1605068551","product_id":100056701,"comment_content":"少拿多次","like_count":0,"discussions":[{"author":{"id":1665192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/68/a8/1fa41264.jpg","nickname":"马什么梅","note":"","ucode":"251B100AC229EE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326114,"discussion_content":"吓人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605525561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259950,"user_name":"spoofer","can_delete":false,"product_type":"c1","uid":1768852,"ip_address":"","ucode":"6723F64ACC3F27","user_header":"https://static001.geekbang.org/account/avatar/00/1a/fd/94/8704d2b0.jpg","comment_is_top":false,"comment_ctime":1604894348,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604894348","product_id":100056701,"comment_content":"我想问如何保证这个事务的原子性？","like_count":0,"discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355843,"discussion_content":"TCC","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615479955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}