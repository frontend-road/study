{"id":474775,"title":"10 | 集成 Nacos：如何通过服务发现机制向服务提供者发起调用？","content":"<p>你好，我是姚秋辰。</p><p>在上一课里，我们对coupon-template-serv和coupon-calculation-serv这两个服务做了微服务化改造，通过服务注册流程将它们注册到了Nacos Server。这两个服务是以服务提供者的身份注册的，它们之间不会发生相互调用。为了发起一次完整的服务调用请求，我们还需要构建一个服务消费者去访问Nacos上的已注册服务。</p><p>coupon-customer-serv就扮演了服务消费者的角色，它需要调用coupon-template-serv和coupon-calculation-serv完成自己的业务流程。今天我们就来动手改造coupon-customer-serv服务，借助Nacos的服务发现功能从注册中心获取可供调用的服务列表，并发起一个远程服务调用。</p><p>通过今天的内容，你可以了解如何使用Webflux发起远程调用，并熟练掌握如何搭建一套基于Nacos的服务治理方案。</p><h2>添加Nacos依赖项和配置信息</h2><p>在开始写代码之前，你需要将以下依赖项添加到customer-customer-impl子模块的pom.xml文件中。</p><pre><code>&lt;!-- Nacos服务发现组件 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- 负载均衡组件 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- webflux服务调用 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n&lt;/dependency&gt;    \n</code></pre><p>第一个依赖项你一定很熟悉了，它是Nacos服务治理的组件，我们在上一节课程中也添加了同款依赖项到coupon-template-impl和coupon-calculation-impl两个模块。</p><!-- [[[read_end]]] --><p>后面两个依赖项你应该是第一回见到，我来向你简单介绍一下。</p><ul>\n<li><strong>spring-cloud-starter-loadbalancer</strong>：Spring Cloud御用负载均衡组件Loadbalancer，用来代替已经进入维护状态的Netflix Ribbon组件。我会在下一课带你深入了解Loadbalancer的功能，今天我们只需要简单了解下它的用法就可以了；</li>\n<li><strong>spring-boot-starter-webflux</strong>：Webflux是Spring Boot提供的响应式编程框架，响应式编程是基于异步和事件驱动的非阻塞程序。Webflux实现了Reactive Streams规范，内置了丰富的响应式编程特性。今天我将用Webflux组件中一个叫做WebClient的小工具发起远程服务调用。</li>\n</ul><p>添加好这两个依赖之后，你还需要做一番清理门户的工作，让coupon-customer-serv和另外两个微服务之间划清界限。</p><ol>\n<li><strong>删除实现层依赖</strong>：从coupon-customer-impl的依赖项中删除coupon-template-impl和coupon-calculation-impl；</li>\n<li><strong>添加接口层依赖</strong>：在coupon-customer-impl的依赖项中添加coupon-template-api和coupon-calculation-api。</li>\n</ol><p>这样做的目的是<strong>划清服务之间的依赖关系</strong>，<font color=\"#ff9900\">由于coupon-customer-serv是一个独立的微服务，它不需要将其他服务的“代码逻辑实现层”打包到自己的启动程序中一同启动。如果某个应用场景需要调用其它微服务，我们应该使用远程接口调用的方式对目标服务发起请求。</font>因此，我们需要将对应接口的Impl实现层从coupon-customer-impl的依赖中删除，同时引入API层的依赖，以便构造请求参数和接收服务响应。</p><p>接下来，你还需要在coupon-customer-impl项目的application.yml文件中添加Nacos的配置项，我们直接从coupon-template-impl的配置项里抄作业就好了。将spring.cloud.nacos路径下的配置项copy到coupon-customer-impl项目中，如果你通过spring.cloud.nacos.discovery.service参数指定了服务名称，那你要<strong>记得在抄作业的时候把名字改掉</strong>，改成coupon-customer-impl。</p><p>修改完依赖项和配置信息之后，你的代码一定冒出了不少编译错误。因为尽管我们已经将coupon-template-impl和coupon-calculation-impl依赖项删除，但coupon-customer-impl中的CouponCustomerServiceImpl仍然使用Autowire注入的方式调用本地服务。</p><p>所以接下来，我们就需要对调用层做一番改造，将Autowire注入本地服务的方式，替换为使用WebClient发起远程调用。</p><h2>添加WebClient对象</h2><p>为了可以用WebClient发起远程调用，你还需要在Spring上下文中构造一个WebClient对象。标准的做法是创建一个Configuration类，并在这个类中通过@Bean注解创建需要的对象。</p><p>所以我们在coupon-customer-impl子模块下创建了com.geekbang.coupon.customer.Configuration类，并声明WebClient的Builder对象。</p><pre><code>// Configuration注解声明配置类\n@org.springframework.context.annotation.Configuration\npublic class Configuration {\n\n    // 注册Bean并添加负载均衡功能\n    @Bean\n    @LoadBalanced\n    public WebClient.Builder register() {\n        return WebClient.builder();\n    }\n\n}\n</code></pre><p>虽然上面的代码没几行，但我足足用了三个注解，这些注解各有用途。</p><ul>\n<li>@<strong>Configuration注解</strong>：定义一个配置类。在Configuration类中定义的@Bean注解方法会被AnnotationConfigApplicationContext或者AnnotationConfigWebApplicationContext扫描并在上下文中进行构建；</li>\n<li>@<strong>Bean注解</strong>：声明一个受Spring容器托管的Bean；</li>\n<li>@<strong>LoadBalanced注解</strong>：为WebClient.Build构造器注入特殊的Filter，实现负载均衡功能，我在下一课会详细解释负载均衡的知识点。今天咱就好读书不求甚解就可以了，只需要知道这个注解的作用是在远程调用发起之前选定目标服务器地址。</li>\n</ul><p>WebClient创建好了之后，你就可以在业务类中注入WebClient对象，并发起服务调用了。接下来，我就手把手带你将CouponCustomerServiceImpl里的本地方法调用替换成WebClient远程调用。</p><h2>使用WebClient发起远程方法调用</h2><p>首先，我们将Configuration类中声明的WebClient的Builder对象注入到CouponCustomerServiceImpl类中，两行代码简单搞定：</p><pre><code>@Autowired\nprivate WebClient.Builder webClientBuilder;\n</code></pre><p>接下来，我们开始改造第一个接口requestCoupon。你需要将requestCoupon接口实现的第一行代码中的CouponTemplateService本地调用替换为WebClient远程调用。下面是改造之前的代码。</p><pre><code>CouponTemplateInfo templateInfo = templateService.loadTemplateInfo(request.getCouponTemplateId());\n</code></pre><p>远程接口调用的代码改造可以通过WebClient提供的“链式编程”轻松实现，下面是代码的完整实现。</p><pre><code>CouponTemplateInfo templateInfo = webClientBuilder.build()\n        .get()\n        .uri(&quot;http://coupon-template-serv/template/getTemplate?id=&quot; + request.getCouponTemplateId())\n        .retrieve()\n        .bodyToMono(CouponTemplateInfo.class)\n        .block();\n</code></pre><p>在这段代码中，我们应用了几个关键方法发起远程调用。</p><ul>\n<li>get：指明了Http Method是GET，如果是其他请求类型则使用对应的post、put、patch、delete等方法；</li>\n<li>uri：指定了访问的请求地址；</li>\n<li>retrieve + bodyToMono：指定了Response的返回格式；</li>\n<li>block：发起一个阻塞调用，在远程服务没有响应之前，当前线程处于阻塞状态。</li>\n</ul><p><font color=\"#ff9900\">在使用uri指定调用服务的地址时，你并不需要提供目标服务的IP地址和端口号，只需要将目标服务的服务名称coupon-template-serv告诉WebClient就好了。</font>Nacos在背后会通过服务发现机制，帮你获取到目标服务的所有可用节点列表。然后，WebClient会通过负载均衡过滤器，从列表中选取一个节点进行调用，整个流程对开发人员都是<strong>透明的</strong>、<strong>无感知的</strong>。</p><p>你可以看到，在代码中我使用了retrieve + bodyToMono的方式接收Response响应，并将其转换为CouponTemplateInfo对象。在这个过程中，我只接收了Response返回的Body内容，并没有对Response中包含的其它字段进行处理。</p><p>如果你需要获取完整的Response，包括Http status、headers等额外数据，就可以使用retrieve + toEntity的方式，获取包含完整Response信息的ResponseEntity对象。示例如下，你可以自己在项目中尝试这种调用方式，体验下toEntity和bodyToMono的不同之处。</p><pre><code>Mono&lt;ResponseEntity&lt;CouponTemplateInfo&gt;&gt; entityMono = client.get()\n\t.uri(&quot;http://coupon-template-serv/template/xxxx&quot;)\n\t.accept(MediaType.APPLICATION_JSON)\n\t.retrieve()\n\t.toEntity(CouponTemplateInfo.class);\n</code></pre><p>WebClient使用了一种<strong>链式编程</strong>的风格来构造请求对象，链式编程就是我们熟悉的Builder建造者模式。仔细观察你会发现，大部分开源应用都在使用这种设计模式简化对象的构建。如果你需要在自己的项目中使用Builder模式，你可以借助Lombok组件的@Builder注解来实现。如果你对此感兴趣，可以自行了解Lombok组件的相关用法。</p><p>到这里，我们已经完成了requestCoupon方法的改造，接下来我们趁热打铁，动手去替换findCoupon和placeOrder方法中的本地调用。有了之前的基础，这次替换对你来说已经是小菜一碟了。</p><p>在findCoupon方法中，我们需要调用coupon-template-serv的服务批量查询CouponTemplate。这里的方式和前面一样，我使用WebClient对本地调用进行了替换，你可以参考下面的源码。</p><pre><code>Map&lt;Long, CouponTemplateInfo&gt; templateMap = webClientBuilder.build().get()\n        .uri(&quot;http://coupon-template-serv/template/getBatch?ids=&quot; + templateIds)\n        .retrieve()\n        .bodyToMono(new ParameterizedTypeReference&lt;Map&lt;Long, CouponTemplateInfo&gt;&gt;() {})\n        .block();\n</code></pre><p>由于方法的返回值不是一个标准的Json对象，而是Map&lt;Long, CouponTemplateInfo&gt;类型，因此你需要构造一个ParameterizedTypeReference实例丢给WebClient，告诉它应该将Response转化成什么类型。</p><p>现在，我们还剩下一个关键方法没有改造，那就是placeOrder，它调用了coupon-calculation-serv计算最终的订单价格，你可以参考以下源码。</p><pre><code>ShoppingCart checkoutInfo = webClientBuilder.build()\n        .post()\n        .uri(&quot;http://coupon-calculation-serv/calculator/checkout&quot;)\n        .bodyValue(order)\n        .retrieve()\n        .bodyToMono(ShoppingCart.class)\n        .block();\n</code></pre><p>和前面几处改造不同的是，这是一个POST请求，因此在使用webClient构造器的时候我调用了post方法；除此之外，它还需要接收订单的完整信息作为请求参数，因此我这里调用了bodyValue方法，将封装好的Order对象塞了进去。在coupon-customer-impl中剩下的一些远程调用方法，就留给你来施展拳脚做改造了。</p><p>到这里，我们整个Nacos服务改造就已经完成了。你可以在本地依次启动coupon-template-serv、coupon-calculation-serv和coupon-customer-serv。启动成功后，再到Nacos控制台查看这三个服务是否已经全部注册到了Nacos。</p><p>如果你是以集群模式启动了多台Nacos服务器，那么即便你在实战项目中只配置了一个Nacos URL，并没有使用虚拟IP搭建单独的集群地址，注册信息也会传播到Nacos集群中的所有节点。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/2b/f7ab64d2526106b7734c2608ae01c02b.jpg?wh=2000x903\" alt=\"\"></p><p>现在，动手搭建一套基于Nacos的服务治理方案对你而言一定不是难事儿了。动手能力是有了，但我们也不能仅仅满足于学会使用一套技术，<strong>你必须要深入到技术的具体实现方案，才能从中汲取到养分，为你将来的技术方案设计提供参考</strong>。</p><p>那么接下来，就让我带你去了解一下Nacos服务发现的底层实现，学习一下Client端是通过什么途径从Nacos Server获取服务注册表的。</p><h2>Nacos服务发现底层实现</h2><p>Nacos Client通过一种<strong>主动轮询</strong>的机制从Nacos Server获取服务注册信息，包括地址列表、group分组、cluster名称等一系列数据。简单来说，Nacos Client会开启一个本地的定时任务，每间隔一段时间，就尝试从Nacos Server查询服务注册表，并将最新的注册信息更新到本地。这种方式也被称之为“Pull”模式，即客户端主动从服务端拉取的模式。</p><p>负责拉取服务的任务是UpdateTask类，它实现了Runnable接口。Nacos以开启线程的方式调用UpdateTask类中的run方法，触发本地的服务发现查询请求。</p><p>UpdateTask这个类隐藏得非常深，它是HostReactor<br>\n的一个内部类，我带你看一下经过详细注释的代码走读：</p><pre><code>public class UpdateTask implements Runnable {\n\n    // ....省略部分代码\n    \n    // 获取服务列表\n    @Override\n    public void run() {\n        long delayTime = DEFAULT_DELAY;\n        \n        try {\n            // 根据service name获取到当前服务的信息，包括服务器地址列表\n            ServiceInfo serviceObj = serviceInfoMap\n                .get(ServiceInfo.getKey(serviceName, clusters));\n            \n            // 如果为空，则重新拉取最新的服务列表\n            if (serviceObj == null) {\n                updateService(serviceName, clusters);\n                return;\n            }\n            \n            // 如果时间戳&lt;=上次更新的时间，则进行更新操作\n            if (serviceObj.getLastRefTime() &lt;= lastRefTime) {\n                updateService(serviceName, clusters);\n                serviceObj = serviceInfoMap.get(ServiceInfo.getKey(serviceName, clusters));\n            } else {\n                // 如果serviceObj的refTime更晚，\n                // 则表示服务通过主动push机制已被更新，这时我们只进行刷新操作\n                refreshOnly(serviceName, clusters);\n            }\n            // 刷新服务的更新时间\n            lastRefTime = serviceObj.getLastRefTime();\n            \n            // 如果订阅被取消，则停止更新任务\n            if (!notifier.isSubscribed(serviceName, clusters) &amp;&amp; !futureMap\n                    .containsKey(ServiceInfo.getKey(serviceName, clusters))) {\n                // abort the update task\n                NAMING_LOGGER.info(&quot;update task is stopped, service:&quot; + serviceName + &quot;, clusters:&quot; + clusters);\n                return;\n            }\n            // 如果没有可供调用的服务列表，则统计失败次数+1\n            if (CollectionUtils.isEmpty(serviceObj.getHosts())) {\n                incFailCount();\n                return;\n            }\n            // 设置延迟一段时间后进行查询\n            delayTime = serviceObj.getCacheMillis();\n            // 将失败查询次数重置为0\n            resetFailCount();\n        } catch (Throwable e) {\n            incFailCount();\n            NAMING_LOGGER.warn(&quot;[NA] failed to update serviceName: &quot; + serviceName, e);\n        } finally {\n            // 设置下一次查询任务的触发时间\n            executor.schedule(this, Math.min(delayTime &lt;&lt; failCount, DEFAULT_DELAY * 60), TimeUnit.MILLISECONDS);\n        }\n    }\n}\n</code></pre><p>在UpdateTask的源码中，它通过调用updateService方法实现了服务查询和本地注册表更新，在每次任务执行结束的时候，在结尾处它通过finally代码块设置了下一次executor查询的时间，周而复始循环往复。</p><p>以上，就是Nacos通过UpdateTask来查询服务端注册表的底层原理了。</p><p>那么现在我就要考考你了，你知道UpdateTask是在什么阶段由哪一个类首次触发的吗？我已经把这个藤交到你手上了，希望你能顺藤摸瓜，顺着UpdateTask类，从源码层面找到它的上游调用方，理清整个服务发现链路的流程。</p><h2>总结</h2><p>到这里，我们就完成了geekbang-coupon-center的Nacos服务治理改造。通过这两节课，你完整搭建了整个Nacos服务治理链路。在这条链路中，你通过<strong>服务注册</strong>流程实现了服务提供者的注册，又通过<strong>服务发现</strong>机制让服务消费者获取服务注册信息，还能通过WebClient发起<strong>远程调用</strong>。</p><p>在这段学习过程中，学会如何使用技术是一件很容易的事儿，而学会它背后的原理却需要花上数倍的功夫。在每节实战课里我都会加上一些源码分析，不仅授之以鱼，更要授之以渔，让你学会如何通过深入源码去学习一个框架。</p><p>为什么学习源码这么重要呢？我这么说吧，这就像你学习写作一样，小学刚开始练习写作的时候，我们是从“模仿”开始的。随着阅历、知识和阅读量的增多，你逐渐有了自己的思考和想法，建立了属于你的写作风格。学习技术也是类似的，好的开源框架就像一本佳作，Spring社区孵化的框架更是如此，你从中可以汲取很多营养，进而完善自己的架构理念和技术细节。若干年后当你成为独当一面的架构师，这些平日里的积累终会为你所用。</p><h2>思考题</h2><p>如果某个服务节点碰到了某些异常状况，比如网络故障或者磁盘空间已满，导致无法响应服务请求。你知道Nacos通过什么途径来识别故障服务，并从Nacos Server的服务注册表中将故障服务剔除的吗？</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"09 | 集成 Nacos：如何将服务提供者注册到 Nacos 服务器？","id":473988},"right":{"article_title":"11 | Loadbalancer 实战：通过自定义负载均衡策略实现金丝雀测试","id":475111}},"comments":[{"had_liked":false,"id":330102,"user_name":"~","can_delete":false,"product_type":"c1","uid":2495621,"ip_address":"","ucode":"BE5E3BD6EE3665","user_header":"https://static001.geekbang.org/account/avatar/00/26/14/85/73e55be5.jpg","comment_is_top":false,"comment_ctime":1641797759,"is_pvip":false,"replies":[{"id":"120285","content":"非常棒！","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641821873,"ip_address":"","comment_id":330102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74656241791","product_id":100101301,"comment_content":"回答一下调用链路的问题：<br>首先在 spring.factory 文件中配置了 NacosDiscoveryClientConfiguration 类，用于 springboot 的初始化时的自动装配。在 NacosDiscoveryClientConfiguration 类中会向 spring 容器中添加  NacosWatch 这个 bean。顺着 NacosWatch 的 start 方法一路往下，就能看到：NacosWatch#start -&gt;NacosNamingService#subscribe -&gt; HostReactor#subscribe -&gt; HostReactor#addTask；UpdateTask 就是作为 task 添加到定时执行队列里的。<br>","like_count":18,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545084,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641821873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329527,"user_name":"so long","can_delete":false,"product_type":"c1","uid":1449679,"ip_address":"","ucode":"2A6B47BB32FC18","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/cf/97cd8be1.jpg","comment_is_top":false,"comment_ctime":1641388620,"is_pvip":false,"replies":[{"id":"120024","content":"同学摸瓜水平越来越高了。Nacos在watch机制上有了一个比较大的改变，如果查看nacos老版本的源码你会发现nacosServicesWatch这个方法里简直一顿操作猛如虎，但是新版本里，nacosServicesWatch只做一件事就是发布心跳事件了，所以这个watch机制做了一个比较大的减法，没老版本那么牛逼的服务发现了","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641402129,"ip_address":"","comment_id":329527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231323212","product_id":100101301,"comment_content":"nacos服务发现正向顺藤摸瓜：主要靠NacosWatch实现SmartLifecycle，在spring容器初始化后开始进行服务发现<br>NacosDiscoveryClientConfiguration-&gt;NacosWatch.start()-&gt;NamingService. subscribe(String serviceName, String groupName, List&lt;String&gt; clusters, EventListener listener)-&gt;HostReactor. subscribe(String serviceName, String clusters, EventListener eventListener)","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544138,"discussion_content":"同学摸瓜水平越来越高了。Nacos在watch机制上有了一个比较大的改变，如果查看nacos老版本的源码你会发现nacosServicesWatch这个方法里简直一顿操作猛如虎，但是新版本里，nacosServicesWatch只做一件事就是发布心跳事件了，所以这个watch机制做了一个比较大的减法，没老版本那么牛逼的服务发现了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641402129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329278,"user_name":"Avalon","can_delete":false,"product_type":"c1","uid":1908872,"ip_address":"","ucode":"820523E3C519F0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/20/88/41212eb9.jpg","comment_is_top":false,"comment_ctime":1641265839,"is_pvip":false,"replies":[{"id":"119936","content":"注入builder的一个比较方便的原因是，你在使用webclient的时候就能利用builder的链式构建风格来注入参数。Mono可以理解为一个元素的发布者（publisher），像Mono和Flux都是响应式编程的一个概念，mono表示发布了empty或1个对象，同学也可以通过一些响应式编程的教程了解更多的应用方式。","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641295210,"ip_address":"","comment_id":329278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231200431","product_id":100101301,"comment_content":"老师，我有两个疑问：<br>1、为什么依赖注入的是 WebClient.Builder，而不直接注入 WebClient？<br>2、bodyToMono 的返回值类型 Mono，“Mono”是什么意思？","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543762,"discussion_content":"注入builder的一个比较方便的原因是，你在使用webclient的时候就能利用builder的链式构建风格来注入参数。Mono可以理解为一个元素的发布者（publisher），像Mono和Flux都是响应式编程的一个概念，mono表示发布了empty或1个对象，同学也可以通过一些响应式编程的教程了解更多的应用方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641295210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331739,"user_name":"alex_lai","can_delete":false,"product_type":"c1","uid":1903459,"ip_address":"","ucode":"3057F2A593A6DB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/m7fLWyJrnwEPoIefiaxusQRh6D1Nq7PCXA8RiaxkmzdNEmFARr5q8L4qouKNaziceXia92an8hzYa5MLic6N6cNMEoQ/132","comment_is_top":false,"comment_ctime":1642746348,"is_pvip":true,"replies":[{"id":"121287","content":"customer service可以被任何子项目调用，可以用k8s中的service topo来管理，不过如果做topo的目的单纯为了实现集群优先的策略，直接定制本地负载均衡策略就好了， nacos的cluster属性会在服务发现的过程中封装到metadata节点，client端可以根据这个属性做routing定制<br><br>PP确实有冗长的review process，服务之间相互调用也要通过arch review，但这是一家技术基建很差劲的公司，被国内互联网大厂完爆的渣都不剩，没啥可借鉴的","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1642921713,"ip_address":"","comment_id":331739,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5937713644","product_id":100101301,"comment_content":"根据目前项目里的service discovery setup 所有在一个group里的service都可以互相调用? customer service 也可以被另外两个子项目调用？所以nacos有可以设置service topo的相关设置么？<br>大厂里PP也是有这个专门的architect和team 去review和维护吧","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547888,"discussion_content":"customer service可以被任何子项目调用，可以用k8s中的service topo来管理，不过如果做topo的目的单纯为了实现集群优先的策略，直接定制本地负载均衡策略就好了， nacos的cluster属性会在服务发现的过程中封装到metadata节点，client端可以根据这个属性做routing定制\n\nPP确实有冗长的review process，服务之间相互调用也要通过arch review，但这是一家技术基建很差劲的公司，被国内互联网大厂完爆的渣都不剩，没啥可借鉴的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642921713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1903459,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/m7fLWyJrnwEPoIefiaxusQRh6D1Nq7PCXA8RiaxkmzdNEmFARr5q8L4qouKNaziceXia92an8hzYa5MLic6N6cNMEoQ/132","nickname":"alex_lai","note":"","ucode":"3057F2A593A6DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547892,"discussion_content":"多谢！集群优先👍 学习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642923638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547888,"ip_address":""},"score":547892,"extra":""},{"author":{"id":1903459,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/m7fLWyJrnwEPoIefiaxusQRh6D1Nq7PCXA8RiaxkmzdNEmFARr5q8L4qouKNaziceXia92an8hzYa5MLic6N6cNMEoQ/132","nickname":"alex_lai","note":"","ucode":"3057F2A593A6DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547893,"discussion_content":"如果很多domain组各自开发自己的api 需要被发现 他们都得share同一个group嘛？nacos对这个有没有个limit？\n还是有很好的隔离策略。 能否跨group调用之类的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642924113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547888,"ip_address":""},"score":547893,"extra":""}]}]},{"had_liked":false,"id":329174,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1641196622,"is_pvip":false,"replies":[{"id":"119894","content":"Loadbalancer注解是spring cloud loadbalancer的内容，在Nacos讲完之后紧接着一课里会讲到。如果项目版本和MySQL版本都保持和源码一致的话（在环境准备篇里有版本信息），那么新版里database-platform不用显式配置，默认auto-detect后会自动在日志里打印这一行<br><br>org.hibernate.dialect.Dialect: HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641203546,"ip_address":"","comment_id":329174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936163918","product_id":100101301,"comment_content":"2 个问题：<br>1. 项目 customer 上的注解：@LoadBalancerClient(value = &quot;coupon-template-serv&quot;, configuration = CanaryRuleConfiguration.class)，没有说明是啥作用<br>2. 运行 customer 这个项目的时候会报错，Access to DialectResolutionInfo cannot be null when &#39;hibernate.dialect&#39; not set，<br>Google 解决方式：加入spring:jpa:database-platform: org.hibernate.dialect.MySQLDialect","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543558,"discussion_content":"Loadbalancer注解是spring cloud loadbalancer的内容，在Nacos讲完之后紧接着一课里会讲到。如果项目版本和MySQL版本都保持和源码一致的话（在环境准备篇里有版本信息），那么新版里database-platform不用显式配置，默认auto-detect后会自动在日志里打印这一行\n\norg.hibernate.dialect.Dialect: HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641203546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334374,"user_name":"小王@Note","can_delete":false,"product_type":"c1","uid":2089044,"ip_address":"","ucode":"737FE2D0185643","user_header":"https://static001.geekbang.org/account/avatar/00/1f/e0/54/5a7075fc.jpg","comment_is_top":false,"comment_ctime":1644906690,"is_pvip":false,"replies":[{"id":"122266","content":"templateIds这个参数是拼装好的1,2,3格式","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1645079171,"ip_address":"","comment_id":334374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644906690","product_id":100101301,"comment_content":"老师，以下这段代码似乎有问题（CouponCustomerServiceImpl -&gt; findCoupon）：<br>Map&lt;Long, CouponTemplateInfo&gt; templateMap = webClientBuilder.build().get()<br>                .uri(&quot;http:&#47;&#47;coupon-template-serv&#47;template&#47;getBatch?ids=&quot; + templateIds)<br>                .retrieve()<br>                .bodyToMono(new ParameterizedTypeReference&lt;Map&lt;Long, CouponTemplateInfo&gt;&gt;() {})<br>                .block();<br>好像不能在查询参数上直接拼接一个数组，要转化成xx=1,2,3...这样的形式","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551664,"discussion_content":"templateIds这个参数是拼装好的1,2,3格式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645079171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332973,"user_name":"Lee KouKuKing","can_delete":false,"product_type":"c1","uid":1339404,"ip_address":"","ucode":"73FC2E525DD2BE","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/0c/53f1d461.jpg","comment_is_top":false,"comment_ctime":1643903162,"is_pvip":false,"replies":[{"id":"121684","content":"使用虚拟机或者多网卡的同学可以参考上面的的解决方案哦","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1643953449,"ip_address":"","comment_id":332973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643903162","product_id":100101301,"comment_content":"【分享】nacos的“订阅者列表”中的多块网卡地址问题，以及应用名为unknown的问题：<br>customer服务向nacos注册后，在nacos web的“订阅者列表”菜单中，发现订阅者的地址是我的第二块网卡的地址（我在笔记本上装过virtualbox，有一个虚拟网卡。说明：我是在win10上运行了3个nacos进程组成的集群。），并且应用名是：unknown。这样看着很别扭，我就想修改一下，于是在application.yml添加了spring.cloud.nacos.discovery.ip，但是发现不生效。最后通过源码发现在UpdateTask中请求所有服务器列表时：&#47;instance&#47;list，请求的clientIP是这样获取的：<br>String ip = System.getProperty(&quot;com.alibaba.nacos.client.naming.local.ip&quot;,InetAddress.getLocalHost().getHostAddress()); <br>使用System.getProperty获取系统变量，而不是从application.yml中获取，如过获取不到就查找本机的网卡，由于本机有两块网卡，所有就选中了那块虚拟网卡的ip了。<br>同时&#47;instance&#47;list请求的app参数也是System.getProperty(&quot;project.name&quot;);这样获取的，由于没有获取到&quot;project.name&quot;，所以就默认应用名是：unknown，然后我就在java启动服务加了这俩参数进行解决的。<br>不只为什么这俩参数不在application.yml中配置呢？这俩参数在application.yml中配置这样多方便呀。<br>\t\t\t\t<br><br>java -D&quot;com.alibaba.nacos.client.naming.local.ip&quot;=&quot;192.168.18.8&quot; -D&quot;project.name&quot;=&quot;customer&quot; -jar coupon-customer-impl-1.0-SNAPSHOT.jar","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549409,"discussion_content":"使用虚拟机或者多网卡的同学可以参考上面的的解决方案哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643953449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329299,"user_name":"被圣光照黑了","can_delete":false,"product_type":"c1","uid":1400926,"ip_address":"","ucode":"60B4F4F67700E1","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/5e/b9624166.jpg","comment_is_top":false,"comment_ctime":1641277524,"is_pvip":false,"replies":[{"id":"119933","content":"warning提示不会导致启动失败，如果有Error信息同学可以把log打印出来。没有注册到naocs的话，也要看一下日志里是否打印了注册失败的信息。这里要注意下服务是注册在了dev这个namespace下，不是默认的public namespace","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641294737,"ip_address":"","comment_id":329299,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641277524","product_id":100101301,"comment_content":"启动报错了：Spring Cloud LoadBalancer is currently working with the default cache. You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.的警告。coupon-customer-serv没有注册到nacos里。百度了说引入Caffeine依赖就好，但还是不行","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543757,"discussion_content":"warning提示不会导致启动失败，如果有Error信息同学可以把log打印出来。没有注册到naocs的话，也要看一下日志里是否打印了注册失败的信息。这里要注意下服务是注册在了dev这个namespace下，不是默认的public namespace","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641294737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400926,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/5e/b9624166.jpg","nickname":"被圣光照黑了","note":"","ucode":"60B4F4F67700E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543887,"discussion_content":"原来是register-enabled: true我改成false了，把customer当成消费服务了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641347866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329266,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1641262585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641262585","product_id":100101301,"comment_content":"心跳检测机制","like_count":0},{"had_liked":false,"id":329264,"user_name":"Geek_e93c48","can_delete":false,"product_type":"c1","uid":2878664,"ip_address":"","ucode":"4418236B0BF4DE","user_header":"","comment_is_top":false,"comment_ctime":1641262352,"is_pvip":false,"replies":[{"id":"119938","content":"同学摸到了一个大瓜！非常不错，读源码就这么顺藤摸瓜，从启动入口正着摸，从结果处反着摸，反正一通十八Mo之后就都整明白了","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641295966,"ip_address":"","comment_id":329264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641262352","product_id":100101301,"comment_content":"老师，我发现UpdateTask通过当前类addTask()方法进行任务调度，顺着藤蔓一直摸上去：addTask()-&gt;scheduleUpdateIfAbsent()-&gt;NamingClientProxyDelegate.subscribe()-&gt;NacosNamingService.getAllInstances()-&gt;NamingFactory-&gt;App启动类加载时调用。","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543769,"discussion_content":"同学摸到了一个大瓜！非常不错，读源码就这么顺藤摸瓜，从启动入口正着摸，从结果处反着摸，反正一通十八Mo之后就都整明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641295967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329263,"user_name":"Geek_e93c48","can_delete":false,"product_type":"c1","uid":2878664,"ip_address":"","ucode":"4418236B0BF4DE","user_header":"","comment_is_top":false,"comment_ctime":1641262200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641262200","product_id":100101301,"comment_content":"UpdateTask通过当前类addTask()方法进行任务调度，顺着藤蔓一直摸上去：addTask()-&gt;scheduleUpdateIfAbsent()-&gt;NamingClientProxyDelegate.subscribe()-&gt;NacosNamingService.getAllInstances()-&gt;NamingFactory-&gt;App启动类加载时调用。","like_count":0},{"had_liked":false,"id":329185,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1641198853,"is_pvip":false,"replies":[{"id":"119895","content":"同学看的很仔细，确实是个笔误","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1641203566,"ip_address":"","comment_id":329185,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641198853","product_id":100101301,"comment_content":"再加一个问题，类UpdateTask是在HostReactor中，文中应该写错了不是在HostReactive中","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543559,"discussion_content":"同学看的很仔细，确实是个笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641203566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}