{"id":613319,"title":"05｜点点直连：点对点搭建产线“后门”的万能管控","content":"<p>你好，我是何辉。我们继续探索Dubbo框架的第四道特色风味，点点直连。</p><p>产线问题，一听到这个词，你是不是有一种莫名的紧张和敬畏感，没错，我们今天就来上点强度，聊一聊产线问题如何快速修复的话题。</p><p>情况是这样的，一天，运行良好的订单推送系统突然发生了一点异常情况，经过排查后，你发现有一条记录的状态不对，导致订单迟迟不能推送给外部供应商。订单推送系统的相关调用链路是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/32/dd/3264cdbcea982db8b78dc6d3353d37dd.jpg?wh=1920x1134\" alt=\"图片\"></p><p>供应商系统都是集群部署的，只不过在订单推送系统这边的数据库中，有一条推送记录的状态不对，导致了这笔订单的最新信息无法推送出去，也就阻碍了该笔订单在供应商侧的功能运转。</p><p>为了争取在最短时间内恢复这笔订单的功能运转，我们需要尽快修改这条推送记录在数据库的状态，修复产线数据。对于这样的紧急情况，你会怎么做？</p><p>修复数据，每个公司的流程规范都不一样，有时候得按照正规流程来，有时候得简单粗暴，在稳的情况下怎么快怎么来，时刻以解决用户的紧急诉求为准则。</p><h2>1. 正规流程</h2><p>参考公司平时遇到需要修复数据的情景，你也许会说，这有何难，找到那行记录，编写一个 Update 语句，然后提交一个数据订正的流程。</p><p>可是，<strong>你有想过一个公司有点规范性的数据订正流程有多长么？</strong>我们看一看公司的数据订正流程环节：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/2c/9e/2cfcef49b9fd66dc5df4f7225ccdbb9e.png?wh=1920x754\" alt=\"图片\"></p><p>不看不知道，一看吓一跳，数据订正流程长达12个环节，需要集齐各路人马一一审批，光走流程，怎么着也得半个小时吧。</p><p>平常如果不是很紧急，可以慢慢走流程。可是现在偏偏赶上紧急关头，走正规的数据订正流程的确太慢，这个时候有人就想点子了，正规流程不行，那走邮件审批呢，让各个相关负责人邮件审批一下，后补流程，这总行了吧？</p><p>但如果真这么干，我们这个小小的产线事件可能就变性质了。因为在公司中，走邮件审批加速流程推进，某种程度上其实已经上升到事故性质了，后面各种检讨与善后措施肯定少不了，再说我们这功能好像也没有那么大的迫切性。</p><p>邮件审批不太合适，但按照正规流程修复数据也不可行，可能花儿都谢了，流程还没走完。那怎么办，有什么简单粗暴的方式呢？</p><h2>2. 粗暴流程</h2><p>粗暴流程嘛，有是有，只不过有点麻烦，我们看流程图，从前端切入，重点标出了Web服务器的TOKEN概念：</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/17/yyc35bf2db8222d7ed1a7c5b89012617.jpg?wh=1920x948\" alt=\"图片\"></p><p>可以从Web服务器的后台日志中，弄出用户的TOKEN，然后找到可以更新这条推送记录的URL地址，最后模拟用户的请求，把这条推送记录更新掉就行了。</p><p>这倒确实是一条路，但是细想一下，如果后台没有暴露这样功能的URL地址呢？或者即使暴露了这样的URL地址，它背后的功能实现逻辑根本不是更新推送记录的，怎么办呢？唉，模拟用户操作不但麻烦，还不一定能搞定，不可行。</p><p>我们继续研究流程图，看看还可以从哪里撕开一道口子。前端刚分析了比较难操作，如果从后端操作呢？</p><p>后端有我们的订单推送系统，还有供应商的系统，挨个来看看。</p><h3>订单推送系统</h3><p>如果从订单推送系统下手，目的很明确，就是要更新数据库。平常更新数据库基本上有三种方案：</p><ol>\n<li>调用系统对外暴露的接口，间接通过接口的业务逻辑来更新数据库。</li>\n<li>想办法拿到 Dao 层实例对象，通过 Dao 层来操作 XML 更新数据库。</li>\n<li>想办法拿到 DataSource 数据源，通过最原始的 execSQL 形式更新数据库。</li>\n</ol><p>前两种方案，有则用，无则放弃，因为不可能每次出现产线事件，代码中都有预先准备好的修复方法。而最后一种，我们需要利用最原始的 API 来更新数据库，有一定难度，毕竟修复产线数据，安全、稳定、可靠性因素不容忽视。这三种方案都不是那么乐观，我们再想别的招。</p><p>考虑到订单推送系统是Dubbo服务提供的系统，我们<strong>是否可以像操作 CURL 命令发起 HTTP 请求那样，来调用Dubbo接口呢？</strong>什么命令可以向Dubbo发起请求呢？</p><p>试着翻看Dubbo的参考手册，在Dubbo2.7的文档的 <a href=\"https://dubbo.apache.org/zh/docsv2.7/user/references/telnet/\">文档2.x -&gt; 用户文档 -&gt; 参考手册 -&gt; Telnet手册</a> 路径下，你会找到一个特别显眼的 <strong>telnet</strong> 关键字，发现里面居然可以执行 invoke 命令来调用Dubbo接口，这是重大发现。</p><p>但是这个 invoke 命令也只能调用Dubbo接口，假如我们恰好没有更新推送记录的Dubbo接口，岂不是白搭，而且这个命令不但权限大且操作麻烦，一般在产线上也会被运维禁用。</p><p>在订单推送系统中，我们尝试了所有的可能，都是徒劳而终。那从供应商服务考虑呢？</p><h3>供应商服务</h3><p>看通往供应商服务的HTTP调用接口：</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/17/yyc35bf2db8222d7ed1a7c5b89012617.jpg?wh=1920x948\" alt=\"图片\"></p><p>想要修复数据，需要将报文AES加密，然后在RSA加签，最后将组装好的报文发往供应商，这一段复杂的操作之外，我们还得确认内网环境与供应商之间没有防火墙的阻挠，要能很轻松地拿到AES密钥、RSA私钥，而且还得确认参数字段组装万无一失。</p><p>所以总的来看，粗暴流程，困难和解法层出不穷，但是行之有效且简单的却少之又少。</p><h3>3.万能管控</h3><p>不过经过这些尝试，我们虽然没有解决数据修复的问题，却已经有了很多修复数据的点子，汇总一下：有没有一种万能管控措施，既能调用已有的Dubbo接口、Dao层方法，又能操作 DataSource 数据源进行原始 SQL 操作，还能聚合调用各种方法，来达到期望的修复目的呢？</p><p>对于单一接口，我们可以用一个接口去想办法调用Dubbo接口，一个接口去调用系统各种Dao接口，一个接口去调用DataSource数据源，一共三个接口搞定。</p><p>但是，聚合调用各种方法，相当于三个接口的混合体，有无数种组合，我们不可能提前把各种组合的代码写好，然后等着出产线问题吧，这有点难。</p><p>但仔细想想，<strong>既然提前写好的代码能被调用，但不可能把所有组合都写好，是不是可以考虑动态调用代码呢？</strong></p><p>好像可行。那如何动态编译呢？我们回忆Java代码从编译到执行的流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/68/28/68d43564228595708cc42e6cfb882f28.png?wh=1920x568\" alt=\"图片\"></p><p>开发者编写的“Java源代码”被编译后变成class字节码文件，然后字节码文件被JVM加载，直到变成可使用的类。在这样的开发过程中，动态编译一般有两种方式：</p><ul>\n<li>自主编码实现，比如通过Runtime调用javac，或者通过JavaCompile调用run。</li>\n<li>调用插件实现，比如使用市面上常用的groovy-all.jar插件。</li>\n</ul><p>如果有时间有精力研究，可以考虑自主编码实现，但如果想在短时间比较有质量地完成任务，建议调用插件实现，可以少走很多弯路。</p><p><strong>那接下来该如何发起调用呢？</strong></p><p>参考前面的思路，可以直接在订单推送系统里定义一个Dubbo接口，采用invoke命令调用。话音刚落，相信你也想到了第一个问题——<strong>没有invoke命令执行权限</strong>。</p><p>既然自己登录到服务器不能执行invoke命令，是不是可以绕一绕想办法让别人调用Dubbo接口？由别人调用，也得组装请求参数再调用，如果能把变化的参数做到页面上，别人从页面读取控件值然后发起调用，就更完美了。</p><p>设想还行，不失为一种非常灵活的方式。那第二个问题就来了——<strong>产线的环境问题</strong>，假如产线有UAT1、UAT2、PRD1、PRD2、PRD3多套环境，能随便把请求负载到产线任意环境中的任意一台机器么？</p><p>当然不行。因为产线分了很多环境，验证功能时，我们一般会拿某台机器节点做个小范围验证，否则调用到一台不该调用的节点，引发不必要的产线事件就太划不来了。</p><p>所以我们需要指定机器节点进行接口调用，那怎么指定具体的机器节点调用呢？</p><p>这不就像我们当初学习Socket和HTTP客户端编程一样，知道IP和PORT就可以与服务建立连接，通过IP可以定位到一台唯一的服务器，通过PORT可以在这台服务器定位到一个唯一的进程服务。</p><p>知道了IP和PORT，可是进程服务有那么多的Dubbo接口，要调用哪个接口呢？</p><p>同样地，我们类比Socket和HTTP，Socket编程中通过约定报文中的服务码来表示特定的功能，HTTP编程中通过URL路径来表示特定的功能。Dubbo，也可以考虑采用Dubbo接口的“接口类名 + 接口方法名 + 接口方法入参类名”Dubbo接口路径来表示特定的功能。</p><p>前2个难题都解决了，最后一个问题——<strong>我们怎么通过IP、PORT、Dubbo接口路径，调用Dubbo接口呢？</strong></p><p>这个还真没谱，不过机智的你一定想到上一讲我们学过泛化调用，可以尝试从ReferenceConfig里找找，相信优秀的框架设计者应该能考虑到这种调用方式吧。</p><p>接下来就去ReferenceConfig类中看一看有没有类似设置IP、PORT、URL之类的字段：</p><pre><code class=\"language-java\">public class ReferenceConfig&lt;T&gt; extends ReferenceConfigBase&lt;T&gt; {\n    // 省略了其他内容\n}\n                  ↓\npublic abstract class ReferenceConfigBase&lt;T&gt; extends AbstractReferenceConfig {\n    /**\n     * The url for peer-to-peer invocation\n     */\n    protected String url;\n    \n    // 省略了其他内容\n}\n</code></pre><p>从源码ReferenceConfig中没有找到任何有用字段，接着向上找到父类ReferenceConfigBase，发现了一个与地址有关的巧妙的 url 字段，英文注释还写到“该 url 是为点对点设计的”。</p><p>然而，现在问题又来了，<strong>从源码中找到了 url 字段，怎么才能知道 url 的构成规则呢？</strong></p><p>这里我教你一个小技巧，当我们进入源码后，首先一定要认真看该字段的描述信息，接着要尝试检索该字段是如何被使用或被拆解使用的，然后在被使用的地方，时刻关注周围有没有一些描述信息。</p><p>按照小技巧的思路，果不其然，我们一路找到了答案，过程代码如下：</p><pre><code class=\"language-java\">/**\n * Parse the directly configured url.\n * 解析直连的配置地址。\n */\n // org.apache.dubbo.config.ReferenceConfig#parseUrl\nprivate void parseUrl(Map&lt;String, String&gt; referenceParameters) {\n    // 将配置的url地址按照分号进行切割，得到一个字符串数组\n    String[] us = SEMICOLON_SPLIT_PATTERN.split(url);\n    if (ArrayUtils.isNotEmpty(us)) {\n        // 然后循环url切出来的数组\n        for (String u : us) {\n            // 将切出来的每个元素传入URL的valueOf方法中，得到一个可被识别的对象\n            URL url = URL.valueOf(u);\n            \n            // 省略了其他内容\n        }\n    }\n}\n                  ↓\n/**\n * parse decoded url string, formatted dubbo://host:port/path?param=value, into strutted URL.\n * 解析解码后的url字符串，url的格式后的内容为：dubbo://host:port/path?param=value, into strutted URL.\n *\n * @param url, decoded url string\n * @return\n */\n// org.apache.dubbo.common.URL#valueOf(java.lang.String)\npublic static URL valueOf(String url) {\n    // 紧接着继续调用URL中的另外一个valueOf方法\n    return valueOf(url, false);\n}\n                  ↓\n/**\n * parse normal or encoded url string into strutted URL:\n * 将普通或编码过的url字符串变成可被支持识别的URL\n * - dubbo://host:port/path?param=value\n * - URL.encode(\"dubbo://host:port/path?param=value\")\n *\n * @param url,     url string\n * @param encoded, encoded or decoded\n * @return\n */\n// org.apache.dubbo.common.URL#valueOf(java.lang.String, boolean)\npublic static URL valueOf(String url, boolean encoded) {\n    if (encoded) {\n        return URLStrParser.parseEncodedStr(url);\n    }\n    // 接着又继续调用一个专门解析url规则的URLStrParser类\n    return URLStrParser.parseDecodedStr(url);\n}\n                  ↓\n/**\n * @param decodedURLStr : after {@link URL#decode} string\n *                      decodedURLStr format: protocol://username:password@host:port/path?k1=v1&amp;k2=v2\n *                      [protocol://][username:password@][host:port]/[path][?k1=v1&amp;k2=v2]\n */\n// org.apache.dubbo.common.URLStrParser#parseDecodedStr\npublic static URL parseDecodedStr(String decodedURLStr) {\n    // 省略了其他内容\n}\n</code></pre><p>这段代码，先是通过url找到了parseUrl方法，并在parseUrl方法上看到了“解析直连的配置地址”的描述信息，至少可以确认一点，确实是为直连点对点调用准备的。</p><p>parseUrl方法被分号切割后传入到了URL.valueOf方法中，继续深入valueOf的代码逻辑，你会发现最后专门调用了一个URLStrParser类来解析为可以被识别的URL对象。别忘了看这些方法的描述信息，多处地方都描述着url的构成规则为：<code>[protocol://][username:password@][host:port]/[path][?k1=v1&amp;k2=v2]</code>。</p><p>相信你现在一定恍然大悟了，url的构成规则，居然和http的构成规则如出一辙，那我们试着通过赋值url为<code>dubbo://[机器IP结点]:[机器IP提供Dubbo服务的端口]</code>，应该就大功告成了。</p><p>好，我们整理思绪，设计了一下改造的大致思路：</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/4e/d3940828169b957bd8817d03896ac74e.jpg?wh=1920x948\" alt=\"图片\"></p><p>首先需要准备一个页面，填入5个字段信息，接口类名、接口方法名、接口方法参数类名、指定的URL节点、修复问题的Java代码，然后将这5个字段通过HTTP请求发往Web服务器，Web服务器接收到请求后组装泛化所需对象，最后通过泛化调用的形式完成功能修复。</p><p>最终Web服务器代码和MonsterFacade代码设计如下：</p><pre><code class=\"language-java\">@RestController\npublic class MonsterController {\n    // 响应码为成功时的值\n    public static final String SUCC = \"000000\";\n    \n    // 定义URL地址\n    @PostMapping(\"/gateway/repair/request\")\n    public String repairRequest(@RequestBody RepairRequest repairRequest){\n        // 将入参的req转为下游方法的入参对象，并发起远程调用\n        return commonInvoke(repairRequest);\n    }\n    \n    private String commonInvoke(RepairRequest repairRequest) {\n        // 然后试图通过类信息对象想办法获取到该类对应的实例对象\n        ReferenceConfig&lt;GenericService&gt; referenceConfig =\n                createReferenceConfig(repairRequest.getClassName(), repairRequest.getUrl());\n        \n        // 远程调用\n        GenericService genericService = referenceConfig.get();\n        Object resp = genericService.$invoke(\n                repairRequest.getMtdName(),\n                new String[]{repairRequest.getParameterTypeName()},\n                new Object[]{JSON.parseObject(repairRequest.getParamsMap(), Map.class)});\n        \n        // 判断响应对象的响应码，不是成功的话，则组装失败响应\n        if(!SUCC.equals(OgnlUtils.getValue(resp, \"respCode\"))){\n            return RespUtils.fail(resp);\n        }\n        \n        // 如果响应码为成功的话，则组装成功响应\n        return RespUtils.ok(resp);\n    }\n    \n    private static ReferenceConfig&lt;GenericService&gt; createReferenceConfig(String className, String url) {\n        DubboBootstrap dubboBootstrap = DubboBootstrap.getInstance();\n        // 设置应用服务名称\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(dubboBootstrap.getApplicationModel().getApplicationName());\n        // 设置注册中心的地址\n        String address = dubboBootstrap.getConfigManager().getRegistries().iterator().next().getAddress();\n        RegistryConfig registryConfig = new RegistryConfig(address);\n        ReferenceConfig&lt;GenericService&gt; referenceConfig = new ReferenceConfig&lt;&gt;();\n        referenceConfig.setApplication(applicationConfig);\n        referenceConfig.setRegistry(registryConfig);\n        referenceConfig.setInterface(className);\n        // 设置泛化调用形式\n        referenceConfig.setGeneric(\"true\");\n        // 设置默认超时时间5秒\n        referenceConfig.setTimeout(5 * 1000);\n        // 设置点对点连接的地址\n        referenceConfig.setUrl(url);\n        return referenceConfig;\n    }\n}\n\n@Setter\n@Getter\npublic class RepairRequest {\n    /** &lt;h2&gt;接口类名，例：com.xyz.MonsterFacade&lt;/h2&gt; **/\n    private String className;\n    /** &lt;h2&gt;接口方法名，例：heretical&lt;/h2&gt; **/\n    private String mtdName;\n    /** &lt;h2&gt;接口方法参数类名，例：com.xyz.bean.HereticalReq&lt;/h2&gt; **/\n    private String parameterTypeName;\n    /** &lt;h2&gt;指定的URL节点，例：dubbo://ip:port&lt;/h2&gt; **/\n    private String url;\n    /** &lt;h2&gt;可以是调用具体接口的请求参数，也可以是修复问题的Java代码&lt;/h2&gt; **/\n    private String paramsMap;\n}\n</code></pre><p>这段代码在Web服务器中完成了页面数据的转发，主要步骤是3点：</p><ul>\n<li>首先，定义一个MonsterController控制器专门来接收页面的请求。</li>\n<li>其次，创建泛化调用所需的referenceConfig对象，并将 url 设置到referenceConfig对象中。</li>\n<li>最后，套用之前学过的泛化调用代码，完成页面数据的转发。</li>\n</ul><p>有了Web服务器的代码还不够，缺少了最重要的万能管控MonsterFacade的核心逻辑：</p><pre><code class=\"language-java\">public interface MonsterFacade {\n    // 定义了一个专门处理万能修复逻辑的Dubbo接口\n    AbstractResponse heretical(HereticalReq req);\n}\n\npublic class MonsterFacadeImpl implements MonsterFacade {\n    @Override\n    AbstractResponse heretical(HereticalReq req){\n        // 编译 Java 代码，然后变成 JVM 可识别的 Class 对象信息\n        Class&lt;?&gt; javaClass = compile(req.getJavaCode());\n        \n        // 为 Class 对象信息，自定义一个名称，将来创建 Spring 单例对象要用到\n        String beanName = \"Custom\" + javaClass.getSimpleName();\n        \n        // 通过 Spring 来创建单例对象\n        generateSpringBean(beanName, javaClass);\n        \n        // 获取 beanName 对应的单例对象\n        MonsterInvokeRunnable runnable = (MonsterAction)SpringContextUtils.getBean(beanName);\n        \n        // 执行单例对象的方法即可\n        Object resp = runnable.run(req.getReqParamsMap());\n        \n        // 返回结果\n        return new AbstractResponse(resp);\n    }\n    \n    // 利用 groovy-all.jar 中的 groovyClassLoader 来编译 Java 代码\n    private Class&lt;?&gt; compile(String javaCode){\n        return groovyClassLoader.parseClass(javaCode);\n    }\n    \n    // 生成Spring容器Bean对象\n    private void generateSpringBean(String beanName, Class&lt;?&gt; javaClass){\n        // 构建 Bean 定义对象\n        BeanDefinitionBuilder beanDefinitionBuilder =\n                BeanDefinitionBuilder.genericBeanDefinition(javaClass);\n        AbstractBeanDefinition rawBeanDefinition = beanDefinitionBuilder.getRawBeanDefinition();\n        \n        // 将 bean 移交给 Spring 去管理\n        ConfigurableApplicationContext appCtx =\n                (ConfigurableApplicationContext)SpringContextUtils.getContext();\n        appCtx.getAutowireCapableBeanFactory()\n                .applyBeanPostProcessorsAfterInitialization(rawBeanDefinition, beanName);\n        ((BeanDefinitionRegistry)appCtx.getBeanFactory()).registerBeanDefinition(beanName, rawBeanDefinition);\n    }\n}\n\n</code></pre><p>这段代码使用Groovy和Spring，完成了万能管控代码的最核心逻辑：</p><ul>\n<li>首先，将接收的Java代码利用Groovy插件编译为Class对象。</li>\n<li>其次，将得到的Class对象移交给Spring容器去创建单例Bean对象。</li>\n<li>最后，调用单例Bean对象的run方法，完成最终动态Java代码的逻辑执行，并达到修复功能的目的。</li>\n</ul><h2>点点直连的应用</h2><p>好，点点直连的代码逻辑我们就掌握了，之后如果能应用到自己的项目中，相信你再也不用担心紧急的数据订正事件了。在日常开发中，哪些应用场景可以考虑点点直连呢？</p><p>第一，修复产线事件，通过直连+泛化+动态代码编译执行，可以轻松临时解决产线棘手的问题。</p><p>第二，绕过注册中心直接联调测试，有些公司由于测试环境的复杂性，有时候不得不采用简单的直连方式，来快速联调测试验证功能。</p><p>第三，检查服务存活状态，如果需要针对多台机器进行存活检查，那就需要循环调用所有服务的存活检查接口。</p><h2>总结</h2><p>今天，我们从一个修复产线数据的事件开始，通过正规流程、粗暴流程、万能管控三种方式来尝试快速解决产线问题。</p><p>正规流程需要提交申请或者邮件审批，在时间紧、任务急的情况下，因公司而异，可能并非最快的方式。粗暴流程，通过模拟用户请求、供应商请求、invoke命令调用接口等非主流方式，虽然可以碰巧解决，但是并非每次都有好运气，而且还有各种Linux命令的权限限制，实属不易。</p><p>在万能管控中，通过页面发送HTTP请求、泛化调用、点对点直连、Groovy插件编译、Spring实例化对象等一系列组合方式，我们完成了最简单、最实用修复数据的平台搭建。</p><p>这里总结一下通过直连进行泛化调用的三部曲：</p><ul>\n<li>接口类名、接口方法名、接口方法参数类名、业务请求参数，四个维度的数据不能少。</li>\n<li>根据接口类名创建 ReferenceConfig 对象，设置 generic = true 、url =协议+IP+PORT 两个重要属性，调用 referenceConfig.get 拿到 genericService 泛化对象。</li>\n<li>传入接口方法名、接口方法参数类名、业务请求参数，调用genericService.$invoke 方法拿到响应对象，并通过 Ognl 表达式语言判断响应成功或失败，然后完成数据最终返回。</li>\n</ul><p>最后总结一下Groovy+Spring完成动态编译调用的三部曲：</p><ul>\n<li>首先，将Java代码利用Groovy插件的groovyClassLoader加载器编译为Class对象。</li>\n<li>其次，将Class信息创建Bean定义对象后，移交给Spring容器去创建单例Bean对象。</li>\n<li>最后，调用单例Bean对象的run方法，完成动态代码调用。</li>\n</ul><p>点点直连的应用场景主要有3类，修复产线事件，绕过注册中心直接联调测试，检查服务存活状态。</p><h3>思考题</h3><p>你已经学会了点点直连的精髓用处，运用泛化调用方式搭建一套数据订正的平台能大大提升解决产线问题的效率。那你能否尝试研究一下源码中，点点直连在 ReferenceConfig 中设置的 url 属性，是怎么和提供方建立通信连接的呢？</p><p>期待看到你的思考，如果你对今天的内容还有什么困惑，欢迎在留言区提问，我会第一时间回复。我们下一讲见。</p><h3>参考资料</h3><p>如果你对Groovy的使用还有疑问，我之前录制了<a href=\"https://www.ixigua.com/7024879339757896229?id=7025184796154429991&logTag=1b08b02293068e017085\">如何使用Groovy动态加载Java代码为class并注册Spring</a>可以学习。</p><h3>04思考题参考</h3><p>上一期的问题是 CommonController 这套泛化调用流程的代码，有哪些可以改善。</p><ol>\n<li>createReferenceConfig 方法中，address 注册中心地址的获取，如果是多注册中心，且对注册中心的选择比较敏感，这里可能需要根据一些变量标识来做出相应选择。</li>\n<li>createReferenceConfig 方法中的 referenceConfig 对象，有许多设置接口的类、方法维度的属性，这里我为了演示效果仅设置了 timeout 属性，若有更多参数设置的诉求，可以入参传进来，或者通过配置中心来支持不同接口的个性化参数设置。</li>\n<li>commonInvoke 方法中的 genericService.$invoke 调用参数，目前 parameterTypeName 不支持集合类型的类名。如果需要支持集合类型，还得针对 parameterTypeName、reqParamsStr 两个参数做一定的约定设计。</li>\n<li>commonInvoke 方法中 respCode 响应码的判断，并不是所有下游系统的响应码字段都叫 respCode 这个名字，也可能有 resCode、errCode、errorCode 等等，而且下游系统也并不都是用 000000 表示成功码，也可能是其他形式，总之具有不确定性，这一块可以考虑通过入参形式或者配置中心方式，利用 Ognl 表达式来做简单的动态化处理。</li>\n<li>commonRequest 方法只支持 POST 方式，若需要支持 GET 方式，还得设计一套适合 GET 方式调用的方法逻辑。</li>\n<li>@PostMapping 里面的地址，/gateway/{className}/{mtdName}/request&nbsp;是占位符形式的，将来用户请求时，输入的是这样 <code>/gateway/com.hmily.cloud.QueryUserFacade/queryUserInfo/request</code> 比较 low 的URL地址，会暴露一些“类名”“方法名”“方法参数类名”，相当于把后端的一些本不该让用户感知的代码暴露给了用户。这样的设计在内网比较常见。如果觉得碍眼不规范，可以考虑建立一套“标准URL”与“占位符格式URL”的映射关系，可以存储在配置中心，然后在Web应用启动的时候，利用 RequestMappingHandlerMapping 中的注册方法动态将标准URL注册到Web容器中。</li>\n</ol>","comments":[{"had_liked":false,"id":367478,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1675255899,"is_pvip":false,"replies":[{"id":133846,"content":"你好，张申傲：是的，你理解的是对的，对点点直连和泛化调用理解的很透彻，点赞～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1675305693,"ip_address":"广东","comment_id":367478,"utype":1}],"discussion_count":1,"race_medal":2,"score":2,"product_id":100312101,"comment_content":"点点直连可以理解为泛化调用的一种应用场景，只要掌握了泛化调用，再了解 Dubbo 通用的协议格式，实现点点直连就不在话下了~","like_count":3,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601577,"discussion_content":"你好，张申傲：是的，你理解的是对的，对点点直连和泛化调用理解的很透彻，点赞～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675305693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371423,"user_name":"金鑫","can_delete":false,"product_type":"c1","uid":1116257,"ip_address":"新加坡","ucode":"8AA30E8DD736FB","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/61/9e0f8b8d.jpg","comment_is_top":false,"comment_ctime":1679916784,"is_pvip":false,"replies":[{"id":135822,"content":"你好，金鑫：动动你的发财手，用代码尽情绽放你内心的冲动~","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680792394,"ip_address":"广东","comment_id":371423,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"看完想动手","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612593,"discussion_content":"你好，金鑫：动动你的发财手，用代码尽情绽放你内心的冲动~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680792394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365175,"user_name":"熊悟空的凶","can_delete":false,"product_type":"c1","uid":1933459,"ip_address":"广东","ucode":"5FA9498BDA92C0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/80/93/dde3d5f0.jpg","comment_is_top":false,"comment_ctime":1672214925,"is_pvip":false,"replies":[{"id":132988,"content":"你好，熊悟空的凶：任何技术带来了超级的便利性，也同时存在着一定的不友好性，正所谓有利有弊，就看我们怎么看待怎么来规范约束大家来使用罢了。\n1、修改产线数据，就不应该存在填错的因素，一般填错了就是连带责任，所以要对自己修改的任何数据要抱着严谨认真的态度，经过反复验证没问题后才执行到产线的。\n2、肯定要在测试环境自己充分验证没问题才执行到产线的，至于想使用arthas的话，只要是你们公司认可，适合你们公司的，适合绝大多数开发人员操作习惯的，都是可以的。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672226590,"ip_address":"广东","comment_id":365175,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"1. 这种点点直连的应用是不是也不是安全的，万一参数填错了等可能会有风险；如果线上问题晋级，写代码可能来不及。\n2. 这种是不是在测试环境代码改后 可以用热更新class的方式处理（如arthas等）","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597777,"discussion_content":"你好，熊悟空的凶：任何技术带来了超级的便利性，也同时存在着一定的不友好性，正所谓有利有弊，就看我们怎么看待怎么来规范约束大家来使用罢了。\n1、修改产线数据，就不应该存在填错的因素，一般填错了就是连带责任，所以要对自己修改的任何数据要抱着严谨认真的态度，经过反复验证没问题后才执行到产线的。\n2、肯定要在测试环境自己充分验证没问题才执行到产线的，至于想使用arthas的话，只要是你们公司认可，适合你们公司的，适合绝大多数开发人员操作习惯的，都是可以的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672226590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374069,"user_name":"Geek_9d39c4","can_delete":false,"product_type":"c1","uid":3017885,"ip_address":"上海","ucode":"EAB127762F220B","user_header":"","comment_is_top":false,"comment_ctime":1683552906,"is_pvip":false,"replies":[{"id":137074,"content":"你好，Geek_9d39c4：风险与收益，鱼与熊掌不可兼得，有得必有失嘛～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1685617854,"ip_address":"广东","comment_id":374069,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"这种方式一旦出问题 noc直接gan si 你 还是走流程订正数据吧","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619925,"discussion_content":"你好，Geek_9d39c4：风险与收益，鱼与熊掌不可兼得，有得必有失嘛～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685617854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439564,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f7/4c/9efa9ece.jpg","nickname":"李凯","note":"","ucode":"8414499DAFAEF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632386,"discussion_content":"利用代码模板生成代码，降低风险和不确定性。当然了，模板是系统的一部分需要测试和审核后才能使用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700723508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371252,"user_name":"Geek_2f1f75","can_delete":false,"product_type":"c1","uid":3573202,"ip_address":"广东","ucode":"1C907E52BFE126","user_header":"","comment_is_top":false,"comment_ctime":1679676102,"is_pvip":false,"replies":[{"id":135821,"content":"你好，Geek_2f1f75：动态替换的技术很多，比如阿里强大的 arthas 就可以帮我们替换 class 文件。但是我们要明白一个问题的切入点，为什么需要实现接口，实现接口的目的是让这种特殊的业务能够变得的清晰可追溯，同时还能方便开发人员按照既定的规范编写代码。对于这种“邪门”的替换字节码操作，还是要稳妥可实施性高为前提，把出现问题影响的风险降到最低。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680792344,"ip_address":"广东","comment_id":371252,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，请教下没有实现接口的spring bean怎么运行时动态替换","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612592,"discussion_content":"你好，Geek_2f1f75：动态替换的技术很多，比如阿里强大的 arthas 就可以帮我们替换 class 文件。但是我们要明白一个问题的切入点，为什么需要实现接口，实现接口的目的是让这种特殊的业务能够变得的清晰可追溯，同时还能方便开发人员按照既定的规范编写代码。对于这种“邪门”的替换字节码操作，还是要稳妥可实施性高为前提，把出现问题影响的风险降到最低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680792344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370841,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"北京","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1679313644,"is_pvip":false,"replies":[{"id":135817,"content":"你好，张三丰：在 dubbo-05-monster-consumer 工程代码中有体现，但是也只是代码思路的体现，去看对应的代码，你可能就秒懂了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680791237,"ip_address":"广东","comment_id":370841,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，MonsterInvokeRunnable、MonsterAction这两个类是哪来的呢？文中代码并没有体现啊。","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612585,"discussion_content":"你好，张三丰：在 dubbo-05-monster-consumer 工程代码中有体现，但是也只是代码思路的体现，去看对应的代码，你可能就秒懂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680791237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369611,"user_name":"杨老师","can_delete":false,"product_type":"c1","uid":1734888,"ip_address":"北京","ucode":"669564E5A757E0","user_header":"","comment_is_top":false,"comment_ctime":1677725774,"is_pvip":false,"replies":[{"id":134839,"content":"你好，杨老师：当然有，只不过非个人代码，不能外泄，望理解～其实思想是一样的，把我demo中的样例代码，稍加改造应该就可以了～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678117202,"ip_address":"广东","comment_id":369611,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，有点点直连的实际案例吗？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607797,"discussion_content":"你好，杨老师：当然有，只不过非个人代码，不能外泄，望理解～其实思想是一样的，把我demo中的样例代码，稍加改造应该就可以了～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678117203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198895,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4b/2f/a93ff216.jpg","nickname":"天宇星旋","note":"","ucode":"69D10D5F4EB782","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612804,"discussion_content":"网关➕本地调试🟰点点直连","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680949359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366396,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"浙江","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1673699646,"is_pvip":false,"replies":[{"id":133521,"content":"你好，星期八：泛化调用是调用远程的，即实现消费方调用提供方一种高级代码编写形式。\n\nsetUrl 的目的是想办法在消费方调用到指定IP地址的提供方。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1673831093,"ip_address":"湖南","comment_id":366396,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"有点疑问：泛化调用，MonsterFacade接口在consumer侧有实现MonsterFacadeImpl类，所以泛化调用是调用本地的吗？如果是调用本地的MonsterFacadeImpl类，那么referenceConfig.setUrl(url);这段配置是给谁的用的？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599812,"discussion_content":"你好，星期八：泛化调用是调用远程的，即实现消费方调用提供方一种高级代码编写形式。\n\nsetUrl 的目的是想办法在消费方调用到指定IP地址的提供方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673831093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366355,"user_name":"Six Days","can_delete":false,"product_type":"c1","uid":1322463,"ip_address":"广东","ucode":"8587F2EEFFFD11","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","comment_is_top":false,"comment_ctime":1673603812,"is_pvip":false,"replies":[{"id":133494,"content":"你好，Six Days：特别好，抓住了传输模块，抓住了关键的IP和PORT，列出了这几个重要的信息，大方向是对了，剩下的就是一些细节用什么工具实现的问题了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1673623513,"ip_address":"广东","comment_id":366355,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"思考题：dubbo 框架提供了不同的协议类型，通过dubbo协议直连的话，dubbo 传输模块则通过提供的ip和端口定位到具体服务实例，进行服务调用","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599622,"discussion_content":"你好，Six Days：特别好，抓住了传输模块，抓住了关键的IP和PORT，列出了这几个重要的信息，大方向是对了，剩下的就是一些细节用什么工具实现的问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673623513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365237,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"北京","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1672292496,"is_pvip":false,"replies":[{"id":133046,"content":"已经发出来啦，课程的代码仓库 https:&#47;&#47;gitee.com&#47;ylimhhmily&#47;GeekDubbo3Tutorial","user_name":"编辑回复","user_name_real":"编辑","uid":2547771,"ctime":1672302681,"ip_address":"北京","comment_id":365237,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"完整的git，什么时候会发出来呀","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597892,"discussion_content":"已经发出来啦，课程的代码仓库 https://gitee.com/ylimhhmily/GeekDubbo3Tutorial","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672302681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386777,"user_name":"muscle","can_delete":false,"product_type":"c1","uid":1891373,"ip_address":"上海","ucode":"B5EC7DA8D570D0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WZAp2Y8MSRibN9QN88XT6a58Qq42APErAo3t7XwFztOOcxIqf311NXVic7XjxwfIJj7mdOdnicibBu4egNIysFD4vg/132","comment_is_top":false,"comment_ctime":1705546223,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"有请求示例吗","like_count":0}]}