{"id":385628,"title":"18 | 划分土地（下）：如何实现内存页的分配与释放？","content":"<p>你好，我是LMOS。</p><p>通过前面两节课的学习，我们已经组织好了内存页，也初始化了内存页和内存区。我们前面做了这么多准备工作，就是为了实现分配和释放内存页面，达到内存管理的目的。</p><p>那有了前面的基础，我想你自己也能大概实现这个分配和释放的代码。但是，根据前面我们设计的数据结构和对其初始化的工作，估计你也可以隐约感觉到，我们的内存管理的算法还是有一点点难度的。</p><p>今天这节课，就让我们一起来实现这项富有挑战性的任务吧！这节课的配套代码，你可以通过<a href=\"https://gitee.com/lmos/cosmos/tree/master/lesson16~18/Cosmos\">这里</a>下载。</p><h2>内存页的分配</h2><p>如果让你实现一次只分配一个页面，我相信这个问题很好解决，因为你只需要写一段循环代码，在其中遍历出一个空闲的msadsc_t结构，就可以返回了，这个算法就可以结束了。</p><p>但现实却不容许我们这么简单地处理问题，我们内存管理器要为内核、驱动，还有应用提供服务，它们对请求内存页面的多少、内存页面是不是连续，内存页面所处的物理地址都有要求。</p><p>这样一来，问题就复杂了。不过你也不必担心，我们可以从<strong>内存分配的接口函数</strong>下手。</p><p>下面我们根据上述要求来设计实现内存分配接口函数。我们还是先来建立一个新的C语言代码文件，在cosmos/hal/x86目录中建立一个memdivmer.c文件，在其中写一个内存分配接口函数，代码如下所示。</p><!-- [[[read_end]]] --><pre><code>//内存分配页面框架函数\nmsadsc_t *mm_divpages_fmwk(memmgrob_t *mmobjp, uint_t pages, uint_t *retrelpnr, uint_t mrtype, uint_t flgs)\n{\n    //返回mrtype对应的内存区结构的指针\n    memarea_t *marea = onmrtype_retn_marea(mmobjp, mrtype);\n    if (NULL == marea)\n    {\n        *retrelpnr = 0;\n        return NULL;\n    }\n    uint_t retpnr = 0;\n    //内存分配的核心函数\n    msadsc_t *retmsa = mm_divpages_core(marea, pages, &amp;retpnr, flgs);\n    if (NULL == retmsa)\n    {\n        *retrelpnr = 0;\n        return NULL;\n    }\n    *retrelpnr = retpnr;\n    return retmsa;\n}\n\n//内存分配页面接口\n\n//mmobjp-&gt;内存管理数据结构指针\n//pages-&gt;请求分配的内存页面数\n//retrealpnr-&gt;存放实际分配内存页面数的指针\n//mrtype-&gt;请求的分配内存页面的内存区类型\n//flgs-&gt;请求分配的内存页面的标志位\nmsadsc_t *mm_division_pages(memmgrob_t *mmobjp, uint_t pages, uint_t *retrealpnr, uint_t mrtype, uint_t flgs)\n{\n    if (NULL == mmobjp || NULL == retrealpnr || 0 == mrtype)\n    {\n        return NULL;\n    }\n\n    uint_t retpnr = 0;\n    msadsc_t *retmsa = mm_divpages_fmwk(mmobjp, pages, &amp;retpnr, mrtype, flgs);\n    if (NULL == retmsa)\n    {\n        *retrealpnr = 0;\n        return NULL;\n    }\n    *retrealpnr = retpnr;\n    return retmsa;\n}\n</code></pre><p>我们内存管理代码的结构是：接口函数调用框架函数，框架函数调用核心函数。可以发现，这个接口函数返回的是一个msadsc_t结构的指针，如果是多个页面返回的就是起始页面对应的msadsc_t结构的指针。</p><p>为什么不直接返回内存的物理地址呢？因为我们物理内存管理器是最底层的内存管理器，而上层代码中可能需要页面的相关信息，所以直接返回页面对应msadsc_t结构的指针。</p><p>还有一个参数是用于返回实际分配的页面数的。比如，内核功能代码请求分配三个页面，我们的内存管理器不能分配三个页面，只能分配两个或四个页面，这时内存管理器就会分配四个页面返回，retrealpnr指向的变量中就存放数字4，表示实际分配页面的数量。</p><p>有了内存分配接口、框架函数，下面我们来实现内存分配的核心函数，代码如下所示。</p><pre><code>bool_t onmpgs_retn_bafhlst(memarea_t *malckp, uint_t pages, bafhlst_t **retrelbafh, bafhlst_t **retdivbafh)\n{\n    //获取bafhlst_t结构数组的开始地址\n    bafhlst_t *bafhstat = malckp-&gt;ma_mdmdata.dm_mdmlielst;       \n    //根据分配页面数计算出分配页面在dm_mdmlielst数组中下标\n    sint_t dividx = retn_divoder(pages);\n    //从第dividx个数组元素开始搜索\n    for (sint_t idx = dividx; idx &lt; MDIVMER_ARR_LMAX; idx++)\n    {\n    //如果第idx个数组元素对应的一次可分配连续的页面数大于等于请求的页面数，且其中的可分配对象大于0则返回 \n        if (bafhstat[idx].af_oderpnr &gt;= pages &amp;&amp; 0 &lt; bafhstat[idx].af_fobjnr)\n        {\n            //返回请求分配的bafhlst_t结构指针\n            *retrelbafh = &amp;bafhstat[dividx];\n            //返回实际分配的bafhlst_t结构指针\n            *retdivbafh = &amp;bafhstat[idx];\n            return TRUE;\n        }\n    }\n    *retrelbafh = NULL;\n    *retdivbafh = NULL;\n    return FALSE;\n}\n\nmsadsc_t *mm_reldivpages_onmarea(memarea_t *malckp, uint_t pages, uint_t *retrelpnr)\n{\n    bafhlst_t *retrelbhl = NULL, *retdivbhl = NULL;\n    //根据页面数在内存区的m_mdmlielst数组中找出其中请求分配页面的bafhlst_t结构（retrelbhl）和实际要在其中分配页面的bafhlst_t结构(retdivbhl)\n    bool_t rets = onmpgs_retn_bafhlst(malckp, pages, &amp;retrelbhl, &amp;retdivbhl);\n    if (FALSE == rets)\n    {\n        *retrelpnr = 0;\n        return NULL;\n    }\n    uint_t retpnr = 0;\n    //实际在bafhlst_t结构中分配页面\n    msadsc_t *retmsa = mm_reldpgsdivmsa_bafhl(malckp, pages, &amp;retpnr, retrelbhl, retdivbhl);\n    if (NULL == retmsa)\n    {\n        *retrelpnr = 0;\n        return NULL;\n    }\n    *retrelpnr = retpnr;\n    return retmsa;\n}\n\nmsadsc_t *mm_divpages_core(memarea_t *mareap, uint_t pages, uint_t *retrealpnr, uint_t flgs)\n{\n    uint_t retpnr = 0;\n    msadsc_t *retmsa = NULL; \n    cpuflg_t cpuflg;\n    //内存区加锁\n    knl_spinlock_cli(&amp;mareap-&gt;ma_lock, &amp;cpuflg);\n    if (DMF_RELDIV == flgs)\n    {\n        //分配内存\n        retmsa = mm_reldivpages_onmarea(mareap, pages, &amp;retpnr);\n        goto ret_step;\n    }\n    retmsa = NULL;\n    retpnr = 0;\nret_step:\n    //内存区解锁\n    knl_spinunlock_sti(&amp;mareap-&gt;ma_lock, &amp;cpuflg);\n    *retrealpnr = retpnr;\n    return retmsa;\n}\n</code></pre><p>很明显，上述代码中onmpgs_retn_bafhlst函数返回的两个bafhlst_t结构指针，若是相等的，则在mm_reldpgsdivmsa_bafhl函数中很容易处理，只要取出bafhlst_t结构中对应的msadsc_t结构返回就好了。</p><p>问题是很多时候它们不相等，这就要分隔连续的msadsc_t结构了，下面我们通过mm_reldpgsdivmsa_bafhl这个函数来处理这个问题，代码如下所示。</p><pre><code>bool_t mrdmb_add_msa_bafh(bafhlst_t *bafhp, msadsc_t *msastat, msadsc_t *msaend)\n{\n    //把一段连续的msadsc_t结构加入到它所对应的bafhlst_t结构中\n    msastat-&gt;md_indxflgs.mf_olkty = MF_OLKTY_ODER;\n    msastat-&gt;md_odlink = msaend;\n    msaend-&gt;md_indxflgs.mf_olkty = MF_OLKTY_BAFH;\n    msaend-&gt;md_odlink = bafhp;\n    list_add(&amp;msastat-&gt;md_list, &amp;bafhp-&gt;af_frelst);\n    bafhp-&gt;af_mobjnr++;\n    bafhp-&gt;af_fobjnr++;\n    return TRUE;\n}\n\nmsadsc_t *mm_divpages_opmsadsc(msadsc_t *msastat, uint_t mnr)\n{   //单个msadsc_t结构的情况 \n    if (mend == msastat)\n    {//增加msadsc_t结构中分配计数，分配标志位设置为1\n        msastat-&gt;md_indxflgs.mf_uindx++;\n        msastat-&gt;md_phyadrs.paf_alloc = PAF_ALLOC;\n        msastat-&gt;md_indxflgs.mf_olkty = MF_OLKTY_ODER;\n        msastat-&gt;md_odlink = mend;\n        return msastat;\n    }\n    msastat-&gt;md_indxflgs.mf_uindx++;\n    msastat-&gt;md_phyadrs.paf_alloc = PAF_ALLOC;\n    //多个msadsc_t结构的情况下，末端msadsc_t结构也设置已分配状态\n    mend-&gt;md_indxflgs.mf_uindx++;\n    mend-&gt;md_phyadrs.paf_alloc = PAF_ALLOC;\n    msastat-&gt;md_indxflgs.mf_olkty = MF_OLKTY_ODER;\n    msastat-&gt;md_odlink = mend;\n    return msastat;\n}\n\nbool_t mm_retnmsaob_onbafhlst(bafhlst_t *bafhp, msadsc_t **retmstat, msadsc_t **retmend)\n{\n    //取出一个msadsc_t结构\n    msadsc_t *tmp = list_entry(bafhp-&gt;af_frelst.next, msadsc_t, md_list);\n    //从链表中删除\n    list_del(&amp;tmp-&gt;md_list);\n    //减少bafhlst_t结构中的msadsc_t计数\n    bafhp-&gt;af_mobjnr--;\n    bafhp-&gt;af_fobjnr--;\n    //返回msadsc_t结构\n    *retmstat = tmp;\n    //返回当前msadsc_t结构连续的那个结尾的msadsc_t结构 \n    *retmend = (msadsc_t *)tmp-&gt;md_odlink;\n    if (MF_OLKTY_BAFH == tmp-&gt;md_indxflgs.mf_olkty)\n    {//如果只单个msadsc_t结构，那就是它本身 \n        *retmend = tmp;\n    }\n    return TRUE;\n}\n\nmsadsc_t *mm_reldpgsdivmsa_bafhl(memarea_t *malckp, uint_t pages, uint_t *retrelpnr, bafhlst_t *relbfl, bafhlst_t *divbfl)\n{\n    msadsc_t *retmsa = NULL;\n    bool_t rets = FALSE;\n    msadsc_t *retmstat = NULL, *retmend = NULL;\n    //处理相等的情况\n    if (relbfl == divbfl)\n    {\n    //从bafhlst_t结构中获取msadsc_t结构的开始与结束地址\n        rets = mm_retnmsaob_onbafhlst(relbfl, &amp;retmstat, &amp;retmend);\n        //设置msadsc_t结构的相关信息表示已经删除\n        retmsa = mm_divpages_opmsadsc(retmstat, relbfl-&gt;af_oderpnr);\n        //返回实际的分配页数\n        *retrelpnr = relbfl-&gt;af_oderpnr;\n        return retmsa;\n    }\n    //处理不等的情况\n    //从bafhlst_t结构中获取msadsc_t结构的开始与结束地址\n    rets = mm_retnmsaob_onbafhlst(divbfl, &amp;retmstat, &amp;retmend);\n     uint_t divnr = divbfl-&gt;af_oderpnr;\n     //从高bafhlst_t数组元素中向下遍历\n    for (bafhlst_t *tmpbfl = divbfl - 1; tmpbfl &gt;= relbfl; tmpbfl--)\n    {\n        //开始分割连续的msadsc_t结构，把剩下的一段连续的msadsc_t结构加入到对应该bafhlst_t结构中\n        if (mrdmb_add_msa_bafh(tmpbfl, &amp;retmstat[tmpbfl-&gt;af_oderpnr], (msadsc_t *)retmstat-&gt;md_odlink) == FALSE)\n        {\n            system_error(&quot;mrdmb_add_msa_bafh fail\\n&quot;);\n        }\n        retmstat-&gt;md_odlink = &amp;retmstat[tmpbfl-&gt;af_oderpnr - 1];\n        divnr -= tmpbfl-&gt;af_oderpnr;\n    }\n\n    retmsa = mm_divpages_opmsadsc(retmstat, divnr);\n    if (NULL == retmsa)\n    {\n        *retrelpnr = 0;\n        return NULL;\n    }\n    *retrelpnr = relbfl-&gt;af_oderpnr;\n    return retmsa;\n}\n</code></pre><p>这个代码有点长，我写出了完成这个逻辑的所有函数，好像很难看懂。别怕，难懂很正常，因为这是一个分配算法的核心逻辑。你之所以看不懂只是因为不懂这个算法，之前我们确实也没提过这个算法。</p><p>下面我就举个例子来演绎一下这个算法，帮助你理解它。比如现在我们要分配一个页面，这个算法将执行如下步骤：</p><p>1.根据一个页面的请求，会返回m_mdmlielst数组中的第0个bafhlst_t结构。</p><p>2.如果第0个bafhlst_t结构中有msadsc_t结构就直接返回，若没有msadsc_t结构，就会继续查找m_mdmlielst数组中的第1个bafhlst_t结构。</p><p>3.如果第1个bafhlst_t结构中也没有msadsc_t结构，就会继续查找m_mdmlielst数组中的第2个bafhlst_t结构。</p><p>4.如果第2个bafhlst_t结构中有msadsc_t结构，记住第2个bafhlst_t结构中对应是4个连续的msadsc_t结构。这时让这4个连续的msadsc_t结构从第2个bafhlst_t结构中脱离。</p><p>5.把这4个连续的msadsc_t结构，对半分割成2个双msadsc_t结构，把其中一个双msadsc_t结构挂载到第1个bafhlst_t结构中。</p><p>6.把剩下一个双msadsc_t结构，继续对半分割成两个单msadsc_t结构，把其中一个单msadsc_t结构挂载到第0个bafhlst_t结构中，剩下一个单msadsc_t结构返回给请求者，完成内存分配。</p><p>我画幅图表示这个过程，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/2a/299b8f21c876a2b324da7a2974e8302a.jpg?wh=3976x3118\" alt=\"\" title=\"内存分配算法示意图\"></p><p>代码、文字、图，三管齐下，你一看便明白了。</p><h2>内存页的释放</h2><p>理解了内存页的分配，掌握内存页的释放就是水到渠成的事儿。其实，内存页的释放就是内存页分配的逆向过程。我们从内存页分配过程了解到，可以一次分配一个或者多个页面，那么释放内存页也必须支持一次释放一个或者多个页面。</p><p>我们同样在cosmos/hal/x86/memdivmer.c文件中，写一个内存释放的接口函数和框架函数，代码如下所示。</p><pre><code>//释放内存页面核心\nbool_t mm_merpages_core(memarea_t *marea, msadsc_t *freemsa, uint_t freepgs)\n{\n    bool_t rets = FALSE;\n    cpuflg_t cpuflg;\n    //内存区加锁\n    knl_spinlock_cli(&amp;marea-&gt;ma_lock, &amp;cpuflg);\n    //针对一个内存区进行操作\n    rets = mm_merpages_onmarea(marea, freemsa, freepgs);\n    //内存区解锁\n    knl_spinunlock_sti(&amp;marea-&gt;ma_lock, &amp;cpuflg);\n    return rets;\n}\n//释放内存页面框架函数\nbool_t mm_merpages_fmwk(memmgrob_t *mmobjp, msadsc_t *freemsa, uint_t freepgs)\n{\n    //获取要释放msadsc_t结构所在的内存区\n    memarea_t *marea = onfrmsa_retn_marea(mmobjp, freemsa, freepgs);\n    if (NULL == marea)\n    {\n        return FALSE;\n    }\n    //释放内存页面的核心函数\n    bool_t rets = mm_merpages_core(marea, freemsa, freepgs);\n    if (FALSE == rets)\n    {\n        return FALSE;\n    }\n    return rets;\n}\n\n//释放内存页面接口\n\n//mmobjp-&gt;内存管理数据结构指针\n//freemsa-&gt;释放内存页面对应的首个msadsc_t结构指针\n//freepgs-&gt;请求释放的内存页面数\nbool_t mm_merge_pages(memmgrob_t *mmobjp, msadsc_t *freemsa, uint_t freepgs)\n{\n    if (NULL == mmobjp || NULL == freemsa || 1 &gt; freepgs)\n    {\n        return FALSE;\n    }\n    //调用释放内存页面的框架函数\n    bool_t rets = mm_merpages_fmwk(mmobjp, freemsa, freepgs);\n    if (FALSE == rets)\n    {\n        return FALSE;\n    }\n    return rets;\n}\n</code></pre><p>我们的内存释放页面的代码的结构依然是：接口函数调用框架函数，框架函数调用核心函数，函数的返回值都是bool类型，即TRUE或者FALSE，来表示内存页面释放操作成功与否。</p><p>我们从框架函数中可以发现，内存区是由msadsc_t结构中获取的，因为之前该结构中保留了所在内存区的类型，所以可以查到并返回内存区。</p><p>在释放内存页面的核心mm_merpages_core函数中，会调用mm_merpages_onmarea函数，下面我们来实现这个函数，代码如下。</p><pre><code>sint_t mm_merpages_opmsadsc(bafhlst_t *bafh, msadsc_t *freemsa, uint_t freepgs)\n{\n    msadsc_t *fmend = (msadsc_t *)freemsa-&gt;md_odlink;\n    //处理只有一个单页的情况\n    if (freemsa == fmend)\n    {\n        //页面的分配计数减1\n        freemsa-&gt;md_indxflgs.mf_uindx--;\n        if (0 &lt; freemsa-&gt;md_indxflgs.mf_uindx)\n        {//如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作\n            return 1;\n        }\n        //设置页未分配的标志\n        freemsa-&gt;md_phyadrs.paf_alloc = PAF_NO_ALLOC;\n        freemsa-&gt;md_indxflgs.mf_olkty = MF_OLKTY_BAFH;\n        freemsa-&gt;md_odlink = bafh;//指向所属的bafhlst_t结构\n        //返回2指示需要进行下一步操作\n        return 2;\n    }\n    //多个页面的起始页面和结束页面都要减一\n    freemsa-&gt;md_indxflgs.mf_uindx--;\n    fmend-&gt;md_indxflgs.mf_uindx--;\n    //如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作\n    if (0 &lt; freemsa-&gt;md_indxflgs.mf_uindx)\n    {\n        return 1;\n    }\n    //设置起始、结束页页未分配的标志\n    freemsa-&gt;md_phyadrs.paf_alloc = PAF_NO_ALLOC;\n    fmend-&gt;md_phyadrs.paf_alloc = PAF_NO_ALLOC;\n    freemsa-&gt;md_indxflgs.mf_olkty = MF_OLKTY_ODER;\n    //起始页面指向结束页面\n    freemsa-&gt;md_odlink = fmend;\n    fmend-&gt;md_indxflgs.mf_olkty = MF_OLKTY_BAFH;\n    //结束页面指向所属的bafhlst_t结构\n    fmend-&gt;md_odlink = bafh;\n    //返回2指示需要进行下一步操作\n    return 2;\n}\n\nbool_t onfpgs_retn_bafhlst(memarea_t *malckp, uint_t freepgs, bafhlst_t **retrelbf, bafhlst_t **retmerbf)\n{\n    //获取bafhlst_t结构数组的开始地址\n    bafhlst_t *bafhstat = malckp-&gt;ma_mdmdata.dm_mdmlielst;\n    //根据分配页面数计算出分配页面在dm_mdmlielst数组中下标\n    sint_t dividx = retn_divoder(freepgs);\n    //返回请求释放的bafhlst_t结构指针\n    *retrelbf = &amp;bafhstat[dividx];\n    //返回最大释放的bafhlst_t结构指针\n    *retmerbf = &amp;bafhstat[MDIVMER_ARR_LMAX - 1];\n    return TRUE;\n}\n\nbool_t mm_merpages_onmarea(memarea_t *malckp, msadsc_t *freemsa, uint_t freepgs)\n{\n    bafhlst_t *prcbf = NULL;\n    sint_t pocs = 0;\n    bafhlst_t *retrelbf = NULL, *retmerbf = NULL;\n    bool_t rets = FALSE;\n    //根据freepgs返回请求释放的和最大释放的bafhlst_t结构指针\n    rets = onfpgs_retn_bafhlst(malckp, freepgs, &amp;retrelbf, &amp;retmerbf);\n    //设置msadsc_t结构的信息，完成释放，返回1表示不需要下一步合并操作，返回2表示要进行合并操作\n    sint_t mopms = mm_merpages_opmsadsc(retrelbf, freemsa, freepgs);\n    if (2 == mopms)\n    {\n        //把msadsc_t结构进行合并然后加入对应bafhlst_t结构\n        return mm_merpages_onbafhlst(freemsa, freepgs, retrelbf, retmerbf);\n    }\n    if (1 == mopms)\n    {\n        return TRUE;\n    }\n    return FALSE;\n}\n</code></pre><p>为了节约篇幅，也为了帮你抓住重点，这段代码我删除了很多检查错误的代码，你可以在<a href=\"https://gitee.com/lmos/cosmos/blob/master/lesson16~18/Cosmos/hal/x86/memdivmer.c#L1117\">源代码</a>中查看。</p><p>显然，在经过mm_merpages_opmsadsc函数操作之后，我们并没有将msadsc_t结构加入到对应的bafhlst_t结构中，这其实是在下一个函数完成的，那就是mm_merpages_onbafhlst这个函数。下面我们来实现它，代码如下所示。</p><pre><code>bool_t mpobf_add_msadsc(bafhlst_t *bafhp, msadsc_t *freemstat, msadsc_t *freemend)\n{\n    freemstat-&gt;md_indxflgs.mf_olkty = MF_OLKTY_ODER;\n    //设置起始页面指向结束页\n    freemstat-&gt;md_odlink = freemend;\n    freemend-&gt;md_indxflgs.mf_olkty = MF_OLKTY_BAFH;\n    //结束页面指向所属的bafhlst_t结构\n    freemend-&gt;md_odlink = bafhp;\n    //把起始页面挂载到所属的bafhlst_t结构中\n    list_add(&amp;freemstat-&gt;md_list, &amp;bafhp-&gt;af_frelst);\n    //增加bafhlst_t结构的空闲页面对象和总的页面对象的计数\n    bafhp-&gt;af_fobjnr++;\n    bafhp-&gt;af_mobjnr++;\n    return TRUE;\n}\n\nbool_t mm_merpages_onbafhlst(msadsc_t *freemsa, uint_t freepgs, bafhlst_t *relbf, bafhlst_t *merbf)\n{\n    sint_t rets = 0;\n    msadsc_t *mnxs = freemsa, *mnxe = &amp;freemsa[freepgs - 1];\n    bafhlst_t *tmpbf = relbf;\n    //从实际要开始遍历，直到最高的那个bafhlst_t结构\n    for (; tmpbf &lt; merbf; tmpbf++)\n    {\n        //查看最大地址连续、且空闲msadsc_t结构，如释放的是第0个msadsc_t结构我们就去查找第1个msadsc_t结构是否空闲，且与第0个msadsc_t结构的地址是不是连续的\n        rets = mm_find_cmsa2blk(tmpbf, &amp;mnxs, &amp;mnxe);\n        if (1 == rets)\n        {\n            break;\n        }\n    }\n    //把合并的msadsc_t结构（从mnxs到mnxe）加入到对应的bafhlst_t结构中\n    if (mpobf_add_msadsc(tmpbf, mnxs, mnxe) == FALSE)\n    {\n        return FALSE;\n    }\n    return TRUE;\n}\n</code></pre><p>这段代码的注释，已经写出了整个释放页面逻辑，<strong>最核心的还是要对空闲页面进行合并，合并成更大的连续的内存页面</strong>，这是这个释放算法的核心逻辑。</p><p>还是老规矩，我同样举个例子来演绎一下这个算法。比如，现在我们要释放一个页面，这个算法将执行如下步骤。</p><p>1.释放一个页面，会返回m_mdmlielst数组中的第0个bafhlst_t结构。</p><ol start=\"2\">\n<li>\n<p>设置这个页面对应的msadsc_t结构的相关信息，表示已经执行了释放操作。</p>\n</li>\n<li>\n<p>开始查看第0个bafhlst_t结构中有没有空闲的msadsc_t，并且它和要释放的msadsc_t对应的物理地址是连续的。没有则把这个释放的msadsc_t挂载第0个bafhlst_t结构中，算法结束，否则进入下一步。</p>\n</li>\n<li>\n<p>把第0个bafhlst_t结构中的msadsc_t结构拿出来与释放的msadsc_t结构，合并成2个连续且更大的msadsc_t。</p>\n</li>\n<li>\n<p>继续查看第1个bafhlst_t结构中有没有空闲的msadsc_t，而且这个空闲msadsc_t要和上一步合并的2个msadsc_t对应的物理地址是连续的。没有则把这个合并的2个msadsc_t挂载第1个bafhlst_t结构中，算法结束，否则进入下一步。</p>\n</li>\n<li>\n<p>把第1个bafhlst_t结构中的2个连续的msadsc_t结构，还有合并的2个地址连续的msadsc_t结构拿出来，合并成4个连续且更大的msadsc_t结构。</p>\n</li>\n<li>\n<p>继续查看第2个bafhlst_t结构，有没有空闲的msadsc_t结构，并且它要和上一步合并的4个msadsc_t结构对应的物理地址是连续的。没有则把这个合并的4个msadsc_t挂载第2个bafhlst_t结构中，算法结束。</p>\n</li>\n</ol><p>上述步骤，我们只要在一个循环中执行就行。我用一幅图表示这个过程，如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/34/a280682b0ee533984c4yya14dee67834.jpg?wh=4049x3320\" alt=\"\" title=\"内存释放算法\"></p><p>这个是不是很熟悉，这正是前面的内存分配图反过来了的结果。最终我们验证了，释放内存就是分配内存的逆向过程。</p><p>好了，到这里，一个优秀的物理内存页面管理器就实现了。</p><h2>重点回顾</h2><p>今天我们依赖<a href=\"https://time.geekbang.org/column/article/384772\">上节课</a>设计好的数据结构，实现了内存页面管理算法。下面来回顾一下本课的重点。</p><p>1.我们实现了内存分配接口、框架、核心处理函数，其分配算法是：如果能在dm_mdmlielst数组中找到对应请求页面数的msadsc_t结构就直接返回，如果没有就寻找下一个dm_mdmlielst数组中元素，依次迭代直到最大的dm_mdmlielst数组元素，然后依次对半分割，直到分割到请求的页面数为止。</p><p>2.对应于内存分配过程，我们实现了释放页面的接口、框架、核心处理函数，其释放算法则是<strong>分配算法的逆向过程</strong>，会查找相邻且物理地址连续的msadsc_t结构，进行合并，合并工作也是迭代过程，直到合并到最大的连续msadsc_t结构或者后面不能合并为止，最后把这个合并到最大的连续msadsc_t结构，挂载到对应的dm_mdmlielst数组中。</p><p>你是不是感觉我们的内存管理器还有缺陷，这只能分配页面？是的，只能分配页面是不行的，你有什么更好的方案吗？下一课我们一起讨论。</p><h2>思考题</h2><p>在内存页面分配过程中，是怎样尽可能保证内存页面连续的呢？</p><p>欢迎你在留言区记录你的收获或疑问。如果这节课对你有启发，也欢迎分享给你的同事、朋友。</p><p>好，我是LMOS，我们下节课见！</p>","comments":[{"had_liked":false,"id":298470,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1624122676,"is_pvip":false,"replies":[{"id":"108290","content":"老铁的梳理，我只能大写66666","user_name":"作者回复","comment_id":298470,"uid":"1345199","ip_address":"","utype":1,"ctime":1624181224,"user_name_real":"LMOS"}],"discussion_count":4,"race_medal":0,"score":"156242945332","product_id":100078401,"comment_content":"一、再梳理一下内存结构<br>1、内存memmgrob_t被划分为多个功能分区，每个功能分区用一个memarea_t描述<br>2、每个memarea_t都有一个memdivmer_t ，每个memdivmer_t 都有一个bafhlst_t数组[0-51]<br>3、每个bafhlst_t都有一个链表，用于存放内存段，规则为：<br>bafhlst_t数组中的每个bafhlst_t，会根据其在数组中的序号n，存放全部2的n次方的连续页面，也就是说：<br>第0个bafhlst_t，存放全部长度为1的内存段<br>第1个bafhlst_t，存放全部长度为2的内存段<br>第2个bafhlst_t，存放全部长度为4的内存段<br>......<br>4、在内存段处理时，将开始的msadsc_t指向了最后msadsc_t结构，内存段的起止就都清晰了，而且无论首尾，都记录了分配情况，方便各类操作<br>5、所以从设计层面来讲，页面的分配和释放，也一定只会是2的n次方大小<br><br>二、申请<br>1、根据类型找到内存区，也就是定位到了memarea_t-&gt;memdivmer_t-&gt;bafhlst_t数组<br>2、根据申请内存大小，用二进制1的查找，确定要至少要从bafhlst_t数组中的哪个bafhlst_t申请，才能得到足够大的内存<br>3、从第一个合适的bafhlst_t到最大的bafhlst_t，依次判断链表中有没有可用内存段，一旦有可用的内存段就使用<br>4、如果内存段大于所需，就要把多出来的内存不断除以2挂载到上一个bafhlst_t，直到达到所需长度<br>5、设置内存段状态，起始msadsc_t都标记为已占用<br>6、更新各层结构相关信息，内存申请结束<br>7、代码中还有各种加锁解锁，各种校验，还有从大到小申请的一种方式，可以看下<br><br>三、释放<br>1、根据要释放内存段的msadsc_t，获取属于哪个内存区，也就是定位到了memarea_t-&gt;memdivmer_t-&gt;bafhlst_t数组<br>2、根据释放内存大小，用二进制1的查找，确定最大可以释放到bafhlst_t数组中的哪个bafhlst_t，避免内存碎片化<br>3、设置内存段状态，起始msadsc_t都标记为未使用<br>4、从找到的第一个bafhlst_t到最大的bafhlst_t，依次去看链表中有没有内存段是挨着的，如果有就合并，再去下一个bafhlst_t继续合并<br>一旦某个bafhlst_t中没能合并，就可以退出了，因为我们只存2的n次方大小的内存段<br>而且每次合并内存段后，都要清理多余的标记，而且开始的msadsc_t要指向最后的msadsc_t<br>5、把最终合并后的内存段，加入到对应的bafhlst_t中，重新设置内存段的起始msadsc_t标记<br>6、更新好各层结构相关信息，内存释放结束<br>7、代码中还有各种加锁解锁，各种校验，可以看下<br><br>四、对于最后的问题<br>其实无论采用哪种分配方式，内存的碎片化都是难以彻底避免的。无论是操作系统、虚拟机还是应用，都要面对这个问题。业界有多种思路来解决或缓解此问题：<br>1、把不可移动内存单独管理，系统内存分区其实在一定程度上解决了这些问题<br>2、linux采用了 buddy system来缓解内存碎片问题，本节已经介绍<br>3、linux中为了处理特别小的内存请求，引入了slab技术，来辅助buddy system<br>4、windows有一种LFH技术，在程序启动时，会额外分配一定的连续内存给这个进程备用，从而降低系统层面的内存管理负担<br>5、windows在进程退出后，不会立即释放dll文件相关内存，一方面提速，一方面也缓解了操作系统内存管理负担。其实，看下你手机的APP，切换到后台时，就是这个效果<br>6、无论是linux还是windows都有低优先级进程，在后台默默做着内存规整工作，类似于磁盘碎片清理<br>7、JVM虚拟机，GC时会通过标记-整理（比如CMS）或复制-清除（比如G1）的方法来解决部分碎片问题<br>8、类似与LFH，可以考虑在内存分配时额外预留一部分，下次分配在预留的地方继续分配<br>9、为了内存规整方便，可以考虑靠近应用已分配内存区域进行分配<br>10、还有一种思路，就是将不连续的内存，转换为逻辑上连续的内存，来绕过碎片化问题，但一些情况下性能难以保证<br><br>应用层面也有工作能做：<br>1、比如redis在处理内存的时候，申请时会额外申请一部分先备着【记得是jemalloc】，释放时也不会立即释放，有单独的线程进行处理，在应用层面去降低系统内存管理负担<br>2、同时，redis在数据结构上也做了很多努力<br>3、在写程序的时候，尽量不要零零散散的去申请大量小内存；<br>4、除了标准库以外，可以试一下 jemalloc或Doug Lea&#39;s malloc<br>5、感兴趣可以看下redis内存管理的代码<br>额，好像跑题了。。。","like_count":37,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522150,"discussion_content":"老铁的梳理，我只能大写66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2281296,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/K6v7bVicvYon23rI5bVZvvkCYtB8zial5gvZIFH2oZVdrzr6c0LmiaeQcSUmPWRiceR3bpqYOKFMpqYnQh83XCqvZw/132","nickname":"会喝水的杯子","note":"","ucode":"FA509CB9A40F21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568689,"discussion_content":"neo大佬，强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651200341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1555050,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/6a/5a0bb648.jpg","nickname":"黄光华","note":"","ucode":"66865B43F2D132","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391700,"discussion_content":"neo哥，太强了！！！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630582897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2617162,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ef/4a/88ca7e9f.jpg","nickname":"初一","note":"","ucode":"30490F28547175","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382595,"discussion_content":"服！！！！！！！！！！！！！！！！！！！！！！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625643171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298246,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1623980241,"is_pvip":false,"replies":[{"id":"108305","content":"下节课会讲的 ","user_name":"作者回复","comment_id":298246,"uid":"1345199","ip_address":"","utype":1,"ctime":1624181932,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"23098816721","product_id":100078401,"comment_content":"分配的时候，如果是多个内存页面，优先向数组后面寻找，即多个连续的内存页，这就能保证分配的页面是连续的，释放的释放，组合多个页面，保证下次分配时候的连续性。<br><br>页大小是 4KB，对于小对象的分配，这样是非常浪费的，每开辟一个小对象都要申请一个物理页，这谁受得了啊，所以啊，linux 提出了 slab 分配算法。","like_count":5,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522072,"discussion_content":"下节课会讲的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379581,"discussion_content":"打错字了，不能修改，应该是释放的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623993579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300001,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1624951198,"is_pvip":false,"replies":[{"id":"108793","content":"66666","user_name":"作者回复","comment_id":300001,"uid":"1345199","ip_address":"","utype":1,"ctime":1624958484,"user_name_real":"LMOS"}],"discussion_count":3,"race_medal":0,"score":"14509853086","product_id":100078401,"comment_content":"在内存页面分配过程中，是怎样尽可能保证内存页面连续的呢？<br>1 .先找到能满足的需要的内存 在m_mdmlielst中的位置。<br>2.如果内存段大于所需，就要把多出来的内存不断除以2挂载到上一个bafhlst_t，直到达到所需长度。<br>例如 需要9k内存: 先定位到第 4 个 bafhlst_t 结构中的 4 个连续的 msadsc_t 结构16k(4K*4) 。<br>分出9K 内存，往上一个bafhlst_t挂载，直到把剩余的内存挂载完。<br>16K --&gt; 9K 4K 2K 1K","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522610,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624958484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2435832,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2a/f8/8d483f93.jpg","nickname":"paulpen","note":"","ucode":"330B8F2787E232","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399055,"discussion_content":"我怎么理解的不一样呢，我理解的是，如果在分9页内存，实际上会出16页出来，合并的话，要求pages 是2^n。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632896786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2618440,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f4/48/2242bed9.jpg","nickname":"吴建平","note":"","ucode":"C6E578FB8627A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385122,"discussion_content":"这一章的代码，是以页为单位分配内存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626895687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311423,"user_name":"吕默","can_delete":false,"product_type":"c1","uid":2687428,"ip_address":"","ucode":"E634AD9431DAA5","user_header":"https://static001.geekbang.org/account/avatar/00/29/01/c4/401254c5.jpg","comment_is_top":false,"comment_ctime":1631234196,"is_pvip":true,"replies":[{"id":"112840","content":"哈哈  你写ppt一定很厉害了","user_name":"作者回复","comment_id":311423,"uid":"1345199","ip_address":"","utype":1,"ctime":1631236667,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5926201492","product_id":100078401,"comment_content":"看代码完全看不懂，但是看图马上懂的不行——天生架构师。。。。。。。","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526595,"discussion_content":"哈哈  你写ppt一定很厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631236667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311009,"user_name":"沈畅","can_delete":false,"product_type":"c1","uid":1077953,"ip_address":"","ucode":"7404E41356B36B","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","comment_is_top":false,"comment_ctime":1631014808,"is_pvip":true,"replies":[{"id":"112721","content":"中间和首尾是一个整体 所以不需要设置","user_name":"作者回复","comment_id":311009,"uid":"1345199","ip_address":"","utype":1,"ctime":1631060701,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5925982104","product_id":100078401,"comment_content":"为什么分配pages，只设置链表首尾结构的属性，中间结构不用设置吗？这里不太理解<br>比如分4个页面，只设置msadsc[0] masadsc[3]的属性吗？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526433,"discussion_content":"中间和首尾是一个整体 所以不需要设置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631060701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298321,"user_name":"朱熙","can_delete":false,"product_type":"c1","uid":1039029,"ip_address":"","ucode":"2B9E2B8645A844","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/b5/9d1f2f55.jpg","comment_is_top":false,"comment_ctime":1624015556,"is_pvip":false,"replies":[{"id":"108299","content":"Linux的伙伴系统在后面会讲的","user_name":"作者回复","comment_id":298321,"uid":"1345199","ip_address":"","utype":1,"ctime":1624181655,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5918982852","product_id":100078401,"comment_content":"这节课讲的基本是buddy吧？下面对于小对象就是slab了","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522096,"discussion_content":"Linux的伙伴系统在后面会讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298231,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1623977024,"is_pvip":false,"replies":[{"id":"108207","content":"你好，确实可以 这样做","user_name":"作者回复","comment_id":298231,"uid":"1345199","ip_address":"","utype":1,"ctime":1623980878,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"5918944320","product_id":100078401,"comment_content":"回答一下思考题，是不是有个单独的线程或者每次释放内存后开个守护线程进行碎片整理和移动来实现.  还有这节课的代码真的好硬核，需要好长时间消化","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522064,"discussion_content":"你好，确实可以 这样做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623980878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352117,"user_name":"Han","can_delete":false,"product_type":"c1","uid":2153487,"ip_address":"","ucode":"B7CDE39DC93509","user_header":"https://static001.geekbang.org/account/avatar/00/20/dc/0f/45e915df.jpg","comment_is_top":false,"comment_ctime":1658391191,"is_pvip":true,"replies":[{"id":"128091","content":"666666666","user_name":"作者回复","comment_id":352117,"uid":"1345199","ip_address":"","utype":1,"ctime":1658396276,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1658391191","product_id":100078401,"comment_content":"有个疑问，比如第一次申请9k，第二次申请2k，第三次释放9k<br>第一次：按照文章中的算法，有7k放到前面的bafhlst_t中：16K --&gt; 9K 4K 2K 1K<br>第二次：2k的bafhlst_t被占用<br>第三次：释放至1k位置，2k的bafhlst_t被占用，算法结束，后面的4k就没有被回收了？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580898,"discussion_content":"666666666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658396276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2153487,"avatar":"https://static001.geekbang.org/account/avatar/00/20/dc/0f/45e915df.jpg","nickname":"Han","note":"","ucode":"B7CDE39DC93509","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":581657,"discussion_content":"lmos老师，我是想问一下这块是否真的没回收，还是我理解错误了^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658910432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580898,"ip_address":""},"score":581657,"extra":""}]}]},{"had_liked":false,"id":341985,"user_name":"艾恩凝","can_delete":false,"product_type":"c1","uid":2950704,"ip_address":"","ucode":"F2B81BF4F0106A","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/30/c26ea06a.jpg","comment_is_top":false,"comment_ctime":1649941882,"is_pvip":false,"replies":[{"id":"125074","content":"不是白定义 是算法没完全实施 在课程的代码中 没用到而已","user_name":"作者回复","comment_id":341985,"uid":"1345199","ip_address":"","utype":1,"ctime":1650249333,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1649941882","product_id":100078401,"comment_content":"打卡，代码全部分析完了，分配的时候，我发现并没有把bafhlst_h 中的af_frelst 这个链表中空闲的 转到 af_alclst中去，释放的时候这个af_alclst 也没用到，那这不是白定义了 ，代码解释太粗糙，还是自己慢慢来看代码。用导图再重新梳理一遍，查漏","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564449,"discussion_content":"不是白定义 是算法没完全实施 在课程的代码中 没用到而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650249333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311139,"user_name":"沈畅","can_delete":false,"product_type":"c1","uid":1077953,"ip_address":"","ucode":"7404E41356B36B","user_header":"https://static001.geekbang.org/account/avatar/00/10/72/c1/59509397.jpg","comment_is_top":false,"comment_ctime":1631086241,"is_pvip":true,"replies":[{"id":"112795","content":"不会的 这个数组不会动态增加  也不是全部遍历 ","user_name":"作者回复","comment_id":311139,"uid":"1345199","ip_address":"","utype":1,"ctime":1631151083,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"1631086241","product_id":100078401,"comment_content":"花了三天时间对着代码把物理内存管理内容看完了。收益很大。虽然还有一些字段不明白意思，后续继续研究。这里有个疑问，在释放内存pages时，需要进行page的合并，遍历bafhlst_t数组，这样会不会性能上比较低？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526489,"discussion_content":"不会的 这个数组不会动态增加  也不是全部遍历 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631151083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}