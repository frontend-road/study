{"id":465423,"title":"先导篇｜诶，这个 git diff 好像不是很直观？","content":"<p>你好，我是微扰君。</p><p>相信你每天都会使用Git，作为一款免费、开源的分布式版本控制系统，Git最初是 Linus Torvalds 为了帮助管理 Linux 内核开源协作而开发的，随着GitHub的流行和Git本身的系统优势，它也渐渐成为我们广大研发人员日常工作中必不可少的版本管理利器。</p><p>在使用Git的过程中，你一定会常常用到 git diff 的命令，去查看这次待提交的本地代码和修改前的代码有什么区别，确定没有问题才会进行 commit 操作。像 git diff 这样求解两段文本差异的问题，我们一般称为“文本差分”问题。</p><p>但是不知道你有没有思考过文本差分的算法是怎么实现的呢？</p><p>如果你现在静下心来思考一下，就会发现<strong>写出一个简明的文本差分算法并不是一件非常容易的事情</strong>。因为代码的文本差分展现形式可能有很多，但并不一定都有非常好的可读性。</p><p>而 git diff 给我们展示的，恰恰是比较符合人们阅读习惯且简明的方式，简明到让我们即使天天都在使用这个功能也不会有意识地去思考：“诶，这个difference生成的好像不是很清晰？是怎么做的呢？”。</p><p>就让我们从这样一个“简单”、有趣、常用的文本差分算法开始，探索那些其实就在我们身边却常常被熟视无睹的算法们吧。希望能给你一些启发，而且探索算法思想的过程也会非常有趣（如果你在学习这一讲的过程中觉得有点难，最后我们会揭秘原因）。</p><!-- [[[read_end]]] --><h2>文本差分是什么</h2><p>文本差分算法其实是一个历史悠久的经典算法问题，许多学者都有相关的研究，解决这个问题的思路也是百家争鸣，复杂度相差甚远。</p><p>而在git diff的实现里，其实就内置有多个不同的diff算法，我们今天主要介绍的是git diff的默认算法：Myers 差分算法，这是一个相对简单、效率高且直观的文本差分算法（<a href=\"http://www.xmailserver.org/diff2.pdf\">原论文</a>）。</p><p>在学习这个算法之前，我们得首先来定义一下什么是文本差分(difference)，毕竟这个词本身就不是那么直观。</p><p>我们找原始出处，Myers在论文中，提到了这样一句话：</p><blockquote>\n<p>An edit script for A and B is a set of insertion and deletion commands that transform A into B.</p>\n</blockquote><p>其中有一个概念叫作 edit script，也就是编辑脚本。比如，对于源文本A和目标文本B，我们一定可以通过不断执行删除行和插入行两种操作，使得A转化成B，这样的一系列插入和删除操作的序列就被称作编辑脚本。<strong>所以，文本差分算法，可以定义为用于求出输入源文本和目标文本之间的编辑脚本的算法，</strong>广泛运用于各种需要进行文本对比的地方。</p><p>比如，git diff 就是一个很经典的应用场景，下图是一个真实的例子（具体的commit可以在<a href=\"https://github.com/wfnuser/burrow/commit/4edc0deaec9e83e6d4bf024cf82f0b4f96521e80\">这里</a>找到）。</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/15/1f55ffd9267b652ed3770777d52f8b15.png?wh=1920x740\" alt=\"图片\"></p><p>但是，两个文本之间的差分方式可能远远不止一种。</p><p>比如说，对于任意两个文本A和B，我们总是可以通过将源文本逐行全部删去，再逐行添加目标文本的方式来做变换，也可以通过只修改差异部分的方式，做从A到B的变换，比如上面的例子中所展示的这样。</p><p>那我们如何评价不同编辑脚本之间的优劣呢？</p><h2>评价指标1</h2><p>第一个评价指标，其实也不难想到就是：<strong>编辑脚本的长度</strong>。</p><p>我们举一个论文中的例子来讨论，后面大部分讨论也都会基于这个例子展开：</p><pre><code class=\"language-plain\">源序列 S = ABCABBA   目标序列 T = CBABAC\n</code></pre><p>想要完成从S到T的变换，图中左边的编辑脚本就是前面所说的先删后添的方式，并没有体现出两个文档之间的修改点，显然不是一个很直观的变换表示；而右边的编辑脚本就明显好得多。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3b/63/3b763007f7a7e61ae29159bb88486763.jpg?wh=666x562\" alt=\"图片\"></p><p>直观地来说，右边的编辑脚本要比左边短的多，因为它尽可能保留了更多的原序列中的元素。</p><p>所以，一种符合直觉的文本差分算法的衡量指标，就是其<strong>编辑脚本的长度，长度越短越好</strong>。我们一会要介绍的Myers算法，也是在求一种最短的编辑脚本（也就是SES Shortest Edit Script）的算法。</p><p>但是SES要怎么求呢？原论文中也提到，最短编辑距离问题也就是SES，和最长公共子序列问题也就是LCS其实是一对对偶问题，如果求得其中一个问题的解等同于找到了另一个问题的解。</p><p>而最长公共子序列问题，相信许多准备过面试的同学都有所了解吧。大部分算法面试题中要求的解法复杂度是O(N*LogN)，采用动态规划就可以解决。不过呢，这并不是今天的重点，先不展开具体算法了。</p><p>这里我们简短地说明一下两个问题的关联性，还是用刚才的例子：</p><pre><code class=\"language-plain\">源序列 \nS = ABCABBA length m = 7\n目标序列\nT = CBABAC  length n = 6\n\n最长公共子序列(不唯一)\nC = CBBA    length LC = 4 \n</code></pre><p>我们很容易发现最短的编辑脚本的长度就等于 <em>m + n - 2 * LC</em> 。其中，M和N为原序列S和目标序列T的长度，LC为最长公共子序列的长度。这是因为在从原序列到目标序列的变化过程中，<strong>两者的最长公共子序列中的元素我们都是可以保留的</strong>，只需要在编辑脚本里，按顺序分别删除原序列和插入目标序列里不在公共序列中的元素即可。</p><p>当然，两个序列的最长公共子序列往往也不唯一，不同的最长公共子序列都对应着不同的编辑脚本产生，但这些编辑脚本一定都是最短的。</p><h2>评价指标2</h2><p>那只是找到A到B的最短编辑脚本，我们就能满意了吗？并不能，因为即使编辑脚本长度一样，由于删除和插入的顺序不同，人们理解它的难度也会不同。所以，<strong>这里就需要引入第二个指标：可读性</strong>，毕竟文本的编辑脚本往往最终是要展示给用户看的。</p><p>这当然是一个很笼统的讲法，我们再借用刚才的例子，来直观地比较一下不同方式的区别吧。</p><pre><code class=\"language-go\">源序列 \nS = ABCABBA \n目标序列\nT = CBABAC\n 1.&nbsp;- A&nbsp; &nbsp; &nbsp; &nbsp;2.&nbsp; - A&nbsp; &nbsp; &nbsp; &nbsp;3.&nbsp; + C\n&nbsp; &nbsp; - B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- A\n&nbsp; &nbsp; &nbsp; C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B\n&nbsp; &nbsp; - A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- C\n&nbsp; &nbsp; &nbsp; B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A\n&nbsp; &nbsp; + A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B\n&nbsp; &nbsp; &nbsp; B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- B&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- B\n&nbsp; &nbsp; &nbsp; A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A\n&nbsp; &nbsp; + C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ C\n</code></pre><p>从S变化到T，我们至少可以得到这三种编辑脚本，都是最短的编辑脚本。相信你仔细观察一下之后，可能会有一种感觉，就是第一种比后面两种可读性会好一些，因为删去的行和增加的行并没有彼此交叉，所以可以更清晰地看出修改的代码是哪些。</p><p>下面这个例子感受可能更明显一点：</p><pre><code class=\"language-plain\">Good:   - aaa         Bad:  + ddd\n        - bbb               - aaa\n        - ccc               + eee\n        + ddd               - bbb\n        + eee               - ccc\n        + fff               + fff\n</code></pre><p>对于整段的代码修改来说，左侧对于大部分人来说往往是更清晰的一种展示方式。编辑长度相同的前提下，左侧之所以“更清晰”的直观感受可以总结为两点：</p><ol>\n<li>我们希望尽可能多地保留整段文本，尽可能连续地删除和插入操作，而不是彼此交叉。</li>\n<li>大部分人可能更习惯先看到原文本的删除，再看到目标文本的插入。</li>\n</ol><p>Myers也是这么觉得的，所以他提出了一种贪心的策略，可以让我们大部分时候得到一个最短且“质量高”的编辑脚本。策略的逻辑就是，<strong>在最短的编辑脚本里，尽量找到删除在增加前面，且尽可能多地连续删除更多行的方式</strong>。</p><p>直觉上来说，这就能避免许多交叉的修改，将整段代码的添加更直观地展现给用户；当然这也并不是绝对的，只能说在大部分情况下都更加直观一些。</p><p>到底如何找到最短编辑脚本中比较直观的一个？这就是Myers算法的用武之地啦，下面我们就来看看Myers为了解决这个问题所做的独特抽象和建模，这是理解Myers算法的关键。</p><h2>Myers Diff Algorithm 模型抽象</h2><p>正如前面提到的，从源序列S到目标序列T，有两种操作，分别是删除行和插入行。</p><pre><code class=\"language-plain\">源序列 \nS = ABCABBA length m = 7\n目标序列\nT = CBABAC  length n = 6\n</code></pre><p>现在我们就需要找到一种对这两个操作和相应变换状态的抽象方式，帮助我们更好地将问题转化成可以被编程语言实现的代码。</p><h3>如何抽象-转化为图搜索问题</h3><p>Myers采用了一种非常独特的视角，将这个问题很好地转化为了一个图上的搜索问题。具体做法是这样的：建立一个放在二维平面的网格，网格宽度为m+1，高度为n+1，如下图所示，在坐标系中，X轴向右侧延伸，Y轴则向下延伸。其中横轴代表着源序列，而纵轴代表着目标序列。我们把这张图称为编辑图。</p><p>具体什么意思呢？ 我们还是看之前那个例子的编辑图：<br>\n<img src=\"https://static001.geekbang.org/resource/image/5d/67/5da335962eyy8b324cb8191fe7514067.jpg?wh=4220x3335\" alt=\"\"></p><p>看图上的坐标， (0, 0) 这个点，代表什么操作都没有做的初始状态，而(7, 6)则对应了最终完整的从S到T的编辑脚本。</p><p>我们从(0, 0)出发进行图上的搜索，每次经过网格中所有的<strong>横线代表的是删除操作</strong>，如经过(0,0) -&gt; (1,0) 的横线，代表了将S的第一个字符A删去。与之相对地，经过所有的<strong>竖线则代表着插入操作</strong>，如 (3,3) -&gt; (3,4) 代表着对T中的第4个字符B进行插入操作。</p><p>显然，网格中的这些横线或竖线的权重为1，因为每次删除和插入操作所需要花费的操作数都是一样的，我们就记为1。而二维网格从原点出发到每一个坐标的路径，都对应着一段不完全的编辑脚本，也代表着从原文本到目标文本某种变换的一个中间状态。</p><p>比如下图中从 (0,0) -&gt; (3,4) 的路径就表示着字符串ABC -&gt; CBAB的一种编辑方式，我们先插入CB，然后删除AB再插入AB，最后删除C。这是完整路径中的一部分，也就是完整编辑脚本的一部分。<br>\n<img src=\"https://static001.geekbang.org/resource/image/22/e9/221a74f5fb77a34243684e207dcb04e9.jpg?wh=4220x3335\" alt=\"\"></p><p>就此，文本差分问题成功转化成了，<strong>如何在这样的网格中找到仅允许向下和向右移动的一个从(0,0)出发到(m,n)的路径</strong>，路径的长度就代表了总共需要的操作数。</p><p>比如之前的，先将源序列字符逐一删除，再将目标序列逐一添加的方式，在图中的表现形式就是从(0,0)出发一路往右，走到(m,0)，随后一路向下走到(m,n)，这样的总操作数就是m+n=13，等于路径中所有横线的数量和竖线的数量之和，这对应着众多最长的编辑脚本中的一种。</p><p>前面我们也说过，并不是所有出现在S中的字符都要删除的，可以证明所有出现在最长公共子序列中的字符，都是可以被保留下来的。那可以保留的字符，我们在图中又要如何表现呢？</p><p>比如为了从 (2,0）转移到 (3,1) ，我们当然可以先经过一个竖线，再经过一个横线，对应到脚本上也就是先插入目标序列T中的C，再删除源序列S中的C，这显然是没有意义的操作。所以，我们应该选择跳过这步操作而保留原有字符串中的C。<br>\n<img src=\"https://static001.geekbang.org/resource/image/75/dc/758320094e38f28fcbee976189a3bddc.jpg?wh=4220x3335\" alt=\"\"></p><p>Myers在图上这样描述保留字符的操作：我们在网格里加入一些以相同字符所对应的坐标为起点的斜线，比如图中(2,0) -&gt; (3,1)的斜线，并且经过斜线所需要的操作数应该计为0，因为我们不需要在编辑脚本中进行插入或者删除操作。</p><p>所以，在编辑图中，<strong>所有源序列和目标序列字符相等的坐标，如(2,0)和(3,1)、(4,1)和(5,2)等，我们都会有一条从上一状态(x-1,y-1)到这一状态(x,y)的斜经过，且穿过斜线路径不耗费任何操作数</strong>。</p><p>至此，我们终于可以完美地将两个评价指标在图模型中量化出来。</p><ol>\n<li>寻找一个最短的编辑脚本，等同于在编辑图上找到从(0,0)出发到(m,n)的最短路径。</li>\n<li>而可读性则要求我们通过一定的策略，从最短路径中找到一个更符合人们阅读习惯的增删序列。</li>\n</ol><p>还是用这个例子，你可以直观地理解在编辑图上具体的搜索过程。图中粗箭头所示的路径，即为一条最短的路径，其对编辑脚本操作如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/59/7b/5929587591f6a54c06fd2558f888ce7b.jpg?wh=4220x3335\" alt=\"\"></p><p>由于编辑图是一个有权的图，我们所求的问题可以认为是一种特化的<strong>单源最短路问题（SSSP问题），即求解一个有权图中，从指定源点出发到某个其他点的最短路径问题</strong>。常用的算法包括Dijkstra、SPFA、Bellman Ford等，这些算法复杂度比较高，我们之后会在网络篇展开讲解。</p><p>回到这里的编辑图搜索问题，因为图中的边权只有1和0两种，我们当然可以找到更高效的算法来处理。</p><h3>如何解决图搜索问题</h3><p>Myers 就通过动态规划思想很好地解决了这个问题。下面就让我们来看一下他是怎么做的，使得找到的路径既是最短的，也是在大部分情况下非常可读的。</p><p>为了方便进一步表述和建模，首先学习Myers在论文中定义的几个重要概念。</p><ul>\n<li>D-Path</li>\n</ul><p>在编辑图中，路径长度对应着每一条横线或竖线需要花费的操作数之和，也就对应着编辑脚本中增删的行数。为了方便描述，我们把需要D步操作的路径称为D-Path，一条D-path指向一个经过D次增或删操作的变换过程的中间状态。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ba/59/ba7e9ba04f1608d6bb5a89f4c859f559.jpg?wh=4220x3335\" alt=\"\"></p><ul>\n<li>Snake</li>\n</ul><p>斜线都是不需要操作数的。我们定义一个横线或者竖线之后紧跟着0条或n条斜线所形成的路径称为snake，所以一条snake所需要的操作数为1。而且我们规定，snake结尾坐标后继不能为斜线，也就是如果snake路径中某个坐标后面有斜线，我们就会继续沿着斜线走，直到走不了为止。比如 1,0 -&gt; 2,0 -&gt; 3,1 就是一条snake，而1,0-&gt;2,0 就不是一条snake。</p><ul>\n<li>Line</li>\n</ul><p>每个坐标都在一条从左上到右下45度角的斜线上。我们可以用k=x-y来描述这条斜线，在m*n的网格中，k的取值范围为[m,-n]。比如坐标(2,4)和(1,3)在Line(-2)上，(3,0)和(5,2)在Line(3)上。</p><p>Myers 论文里的这张图就是对这几个概念的一个示意：</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/25/a3ea80fbe67c6086b1d1e1d44353e725.png?wh=1380x1706\" alt=\"图片\"></p><p>有了这些概念的定义之后，我们求解最短编辑脚本的目标就可以定义为要找到<strong>最短的可以抵达 (m,n) 的 D-Path</strong>。</p><p>由于所有的 D-Path 都是由 (D-1)-Path 接上一条 snake 构成 （也就是说，所有的编辑脚本都是由一个更短的、指向某个中间状态的脚本，加上一次增删和若干行保留操作所产生的）。</p><p>所以，很自然产生的一种想法就是从1-Path开始，去搜索所有和1-Path相接的2-Path看看最远能走到哪里，然后以此为基础一直递推到D-Path，当我们在搜索过程中第一次遇到终点，也就是(m, n)时，就找到最短编辑脚本路径了。这样自底向上，通过先解决子问题，逐步递推出问题的解，就是典型的动态规划思想，我们之后也会专门展开讲解。</p><p><strong>第二个指标可读性，就是假设有多条D-Path都可以抵达(m,n)，我们如何从里面选出可读简明的路径呢</strong>？Myers采取的是一种贪心的策略，背后的思想主要就是前面讲过的，Myers认为更简明的Diff操作有以下特征：</p><ol>\n<li>我们希望尽可能多地保留整段文本，尽可能连续删除或插入，而不是彼此交叉。</li>\n<li>大部分人可能更习惯先看到原文本的删除，再看到目标文本的插入。</li>\n</ol><p>这两点其实也非常符合我们的直觉。反映到对编辑图的搜索上也非常直观:</p><ol>\n<li>我们在探索路径时，如果碰到斜线一定要一路沿着斜线一路往下，直到不能继续为止，只有这样我们才能尽量多地保留连续的原始文本，这就是为什么要求 snake 终点不能停留在连续斜线中间的原因。</li>\n<li>在考虑D-Path的时候，我们会优先从许多(D-1)-Path中，<strong>挑选出一条终点的横坐标更大的路径来构建。这就意味着在做选择时倾向于选删除优先于插入的方式</strong>。</li>\n</ol><p>现在你应该明白为什么要引入snake和line这样的概念了吧。核心就是斜线上的路径都是不需要产生编辑脚本长度的，因此我们可以选择在斜线上进行动态规划。</p><p>好了，最后我们来学习Myers的动态规划算法实现细节，理解了前面的概念，算法的思路就不是特别复杂了。</p><h3>代码实现</h3><p>我们用一个二维数dp来记录图上的搜索状态：</p><ul>\n<li>dp的第一个维度代表着操作数，最大范围也就是我们最短编辑脚本的长度 m+n-2*LC。</li>\n<li>第二个维度是k-Lines的行号，在操作数为d时，其取值范围为[-d,d]，范围的左右边界分别代表了d次操作都是只插入不删除，或者只删除不插入。</li>\n<li>dp本身的值记录为当前操作数及行号所对应的x坐标。</li>\n</ul><p>把之前的递推例子过程画到二维表格中大概如下图所示，横轴的数字代表着D-Path的D也就是操作数，纵轴的数字代表k-Lines的行号，树状图中每个节点展示的是网格中的二维坐标也都对应着某个编辑脚本的一部分：</p><pre><code>   \n     |      0     1     2     3     4     5\n----+--------------------------------------\n    |\n 4  |                             7,3\n    |                           /\n 3  |                       5,2\n    |                     /\n 2  |                 [3,1]       [7,5]\n    |               /     \\     /     \\\n 1  |           [1,0]       [5,4]      [7,6]\n    |         /     \\           \\\n 0  |     [0,0]       2,2         5,5\n    |         \\                       \\\n-1  |           0,1         4,5         5,6\n    |               \\     /     \\\n-2  |                 2,4         4,6\n    |                     \\\n-3  |                       3,6\n</code></pre><p>而方括号括起来的路径代表着我们最终选择的路径，也就是之前图里箭头表示的那条路径：<br>\n<img src=\"https://static001.geekbang.org/resource/image/64/fe/645fe54eff53c9bc46d8ebbcc0a294fe.jpg?wh=1920x1330\" alt=\"图片\"></p><p>我们从左到右、从下到上用两层循环依次更新二维表格。外层循环就是从左往右遍历图上的每一列，内层循环就是从下到上遍历树状图每一层的状态，也就是遍历每一条line。操作数为d时，我们从行号为-d开始以步长为2遍历，一直遍历到d。</p><p>整个树的结构是二叉的，奇数步时，必然处于奇数行号，偶数步时必然处于偶数行号。这是因为从k-Line的第k条线进行一步snake，只会有一次删除或者一次插入操作；对应到图上也就是经过一条横线或者一条竖线加若干条斜线，因而只能进入k+1行或者k-1行，所以每一个操作数对应行号的奇偶性是确定的，遍历的时候步长为2也就很好理解了。</p><p>所以总结一下就是，<strong>行号为k、操作数为d的状态，只能从相邻的两行k-1或者k+1，通过横线或者竖线转移过来</strong>。</p><p>写成状态转移方程就是 dp[d][k] = max(dp[d-1][k-1]+1，dp[d-1][k+1])。从k-1行过来的必然走的是横线，所以状态也就是横坐标+1，从k行转移过来的走的是竖线，状态也就是横坐标会保持不变（动态规划状态不变）。这样，有多个选择的时候，我们会将状态更新为不同路径中最远的，也就是横坐标最大的一个。</p><p>思路很清晰，写成伪代码也非常简单啦。</p><p>如果在某次循环的时候找到了终点，就会停止循环，此时也找到了一种“简明”且最短的编辑脚本，直接return就行。由于操作数为D的状态数组的计算，仅依赖了操作数为D-1的一层状态数组，我们可以将状态维度压缩一下，采用一维数组记录状态。</p><pre><code class=\"language-go\">V[1]←0 \nFor D ← 0 to MAX Do\n  For k ← −D to D in steps of 2 \n    Do If k=−D or k≠D and V[k−1] &lt; V[k+1] Then\n      x ← V[k+1] \n    Else\n      x ← V[k−1]+1 y ← x−k\n    While x &lt; N and y &lt; M and a[x+1] = b[y+1] Do \n      (x,y) ← (x+1,y+1) \n      V[k] ← x\n  If x ≥ N and y ≥ M Then\n    Length of an SES is D\n    Stop\n</code></pre><p>最后，我们来计算一下这个算法的时间复杂度，原论文花了许多篇幅在严谨的数学描述上，我们这里就写的简洁些，有兴趣的同学可以自己查阅论文进一步理解。</p><p>在内外两层的循环中，每一层循环都循环了D次，循环次数最多为总操作步数D*D。循环体中，除了第8-10行的while，都是O(1)的复杂度。所以去掉8-10行之后，复杂度为O(D^2)。</p><p>8-10行的代码看似多加了一层复杂度不是常数的循环，但在做的事情就是沿着Line，在不耗费额外操作的时候，一路沿着snake往下拓展，所以整体复杂度加起来不可能超过搜索范围内的所有的长度斜线，而斜线的最大长度为min(M,N)。那么在循环范围内，8-10行的操作带来的总的时间复杂度不会超过O(M+N)。</p><p>所以算法的整体时间复杂度是O(D*(M+N))。大部分情况下，D其实比M或者N要小许多，所以Myers算法在复杂度比O(M<em>M+N</em>N)要小很多。</p><h2>总结</h2><p>我们学习了一种高效求文本差分的方式 Myers 算法，基于动态规划的思想和编辑图的抽象，给出了一种复杂度很低又能求出可读性很高的编辑脚本的方法。这个算法被广泛使用在各种需要求文本差分的场景里，如Git中的git-diff、Android中的DiffUtil等。</p><p>其实，Myers算法并不是一个非常基础的算法。我会把这篇文章作为专栏的第一篇文章，不止因为这个算法确实非常有趣，能让你提前体验一下用算法来解决实际问题的思维乐趣；更是想告诉你，算法离我们的距离比你想的可能还要更近一些。</p><p>算法不只存在于各种高大上的基础设施或者艰深的论文里，而会出现在我们程序员日常开发工作中的每个角落，甚至生活的方方面面。只不过我们太习以为常，才忽略了这些算法。</p><p>所以，很期待在我们并肩探索算法的这段时间里，你能对真实世界中的算法有一个新的认知，并在欣赏它们的过程中提升自己，收获乐趣。</p><h2>课后作业</h2><p>留个小作业，前面有提到<strong>最长公共子序列</strong>的问题，不知道你会不会做呢？你可以试着实现一个朴素的基于动态规划的最长公共子序列算法，看看能不能基于这种实现改造出一个文本差分算法。</p><p>欢迎在留言区留下你的代码参与讨论。我为专栏开设的<a href=\"https://github.com/wfnuser/Algorithms\">GitHub仓库</a>也欢迎你来提issue和pr。</p><h3>拓展阅读</h3><p>感兴趣的话，你也可以自己尝试实现一下Myers算法。如果发现git-diff算出来的结果和你的结果略有不同，也不用担心，这很可能是因为git-diff优化了Myers算法的空间复杂度所导致的，这一点<a href=\"http://www.xmailserver.org/diff2.pdf\">原论文</a>里也有提到。</p>","neighbors":{"left":{"article_title":"开篇词｜真实世界的算法，和你想的不一样","id":465406},"right":{"article_title":"01｜动态数组：按需分配的vector为什么要二倍扩容？","id":466065}},"comments":[{"had_liked":false,"id":326114,"user_name":"Aliliin","can_delete":false,"product_type":"c1","uid":1025239,"ip_address":"","ucode":"61F9A09BB6650F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","comment_is_top":false,"comment_ctime":1639385285,"is_pvip":false,"replies":[{"id":"118552","content":"加油加油 这一篇比较难；只是想告诉大家算法其实到处都有，可以保持好奇心，多多了解。<br>可以找助教加群一起讨论哈 加我也行 V： constant_variation","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639539025,"ip_address":"","comment_id":326114,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27409189061","product_id":100100901,"comment_content":"逐渐听不懂系列...😂","like_count":6,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538843,"discussion_content":"加油加油 这一篇比较难；只是想告诉大家算法其实到处都有，可以保持好奇心，多多了解。\n可以找助教加群一起讨论哈 加我也行 V： constant_variation","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639539025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3024820,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/27/b4/df65c0f7.jpg","nickname":"| ~浑蛋~","note":"","ucode":"B6904B44DFA805","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576370,"discussion_content":"到代码实现这一块就理解不了了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655475591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326019,"user_name":"Daneil","can_delete":false,"product_type":"c1","uid":1812658,"ip_address":"","ucode":"7DA18D5D2E732E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/b2/5acb4806.jpg","comment_is_top":false,"comment_ctime":1639311748,"is_pvip":false,"replies":[{"id":"118556","content":"谢谢指正；说的很对～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639539269,"ip_address":"","comment_id":326019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18819180932","product_id":100100901,"comment_content":"状态方程应该是dp[d][k] = max(dp[d-1][k-1]+1， dp[d-1][k+1])","like_count":4,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538849,"discussion_content":"谢谢指正；说的很对～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639539269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325463,"user_name":"天上星多月不亮","can_delete":false,"product_type":"c1","uid":1283877,"ip_address":"","ucode":"A8CD6A7C094F0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/25/8c35cc85.jpg","comment_is_top":false,"comment_ctime":1638965021,"is_pvip":false,"replies":[{"id":"118103","content":"首先要理解一件事，就是，最短的编辑脚本中两个文本之间的最长公共子序列是可以全部保留的。这个你多画几个例子应该就很容易get到。<br>在这个前提下，两个文本共计m+n行，其中每个文本都有LC行可以保留。<br>显然需要修改的，也就是插入或者删除的最小行数就是m+n-2*LC。","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639016431,"ip_address":"","comment_id":325463,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14523866909","product_id":100100901,"comment_content":"请问下 m+n-2*LC 是如何推的呢","like_count":3,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537266,"discussion_content":"首先要理解一件事，就是，最短的编辑脚本中两个文本之间的最长公共子序列是可以全部保留的。这个你多画几个例子应该就很容易get到。\n在这个前提下，两个文本共计m+n行，其中每个文本都有LC行可以保留。\n显然需要修改的，也就是插入或者删除的最小行数就是m+n-2*LC。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639016431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1283877,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/25/8c35cc85.jpg","nickname":"天上星多月不亮","note":"","ucode":"A8CD6A7C094F0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":537324,"discussion_content":"感谢！理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639033992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537266,"ip_address":""},"score":537324,"extra":""}]},{"author":{"id":1139902,"avatar":"https://static001.geekbang.org/account/avatar/00/11/64/be/12c37d15.jpg","nickname":"CityAnimal","note":"","ucode":"206491F70572AE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537245,"discussion_content":"m+n是全部删除然后插入的编辑长度\n减去一次LC的删除和一次LC的增加","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639011995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1283877,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/25/8c35cc85.jpg","nickname":"天上星多月不亮","note":"","ucode":"A8CD6A7C094F0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139902,"avatar":"https://static001.geekbang.org/account/avatar/00/11/64/be/12c37d15.jpg","nickname":"CityAnimal","note":"","ucode":"206491F70572AE","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":537327,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639034011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537245,"ip_address":""},"score":537327,"extra":""}]}]},{"had_liked":false,"id":325541,"user_name":"kenan","can_delete":false,"product_type":"c1","uid":1221542,"ip_address":"","ucode":"3EA7A5804FA002","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/a6/9105f762.jpg","comment_is_top":false,"comment_ctime":1639018369,"is_pvip":true,"replies":[{"id":"118560","content":"好耶 有机会的话可以安排一下；不过之前编辑说这种比较偏数学的算法受众不是很大；就先没有安排了。","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639539912,"ip_address":"","comment_id":325541,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10228952961","product_id":100100901,"comment_content":"老师，看目录没有维特比算法，可否加餐一下呢？","like_count":2,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538853,"discussion_content":"好耶 有机会的话可以安排一下；不过之前编辑说这种比较偏数学的算法受众不是很大；就先没有安排了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639539912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698549,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ea/f5/3d6a43fa.jpg","nickname":"ming`","note":"","ucode":"7CE841549DF458","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537467,"discussion_content":"+1  Viterbi译码算法 应该是微扰君的老本行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639063249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341525,"user_name":"Geek_a8ce05","can_delete":false,"product_type":"c1","uid":2956682,"ip_address":"","ucode":"C1D4002C48568F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rvQxUmekECjyZu1RwbUguBWpBcQuKywQPtiaxNVFJSib07QMZnNUr8MnRF3RYEsn6MhgGFJibwlrVomibEicYMiaia7ZQ/132","comment_is_top":false,"comment_ctime":1649675531,"is_pvip":false,"replies":[{"id":"124858","content":"哈哈哈没事，可以先跳过看后面的攒攒信心，回头再来学这讲","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1649817652,"ip_address":"","comment_id":341525,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5944642827","product_id":100100901,"comment_content":"第二节直接劝退","like_count":1,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562386,"discussion_content":"哈哈哈没事，可以先跳过看后面的攒攒信心，回头再来学这讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649817652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329236,"user_name":"费城的二鹏","can_delete":false,"product_type":"c1","uid":1101293,"ip_address":"","ucode":"DE768A0CC3053D","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/ed/825d84ee.jpg","comment_is_top":false,"comment_ctime":1641229006,"is_pvip":false,"replies":[{"id":"120063","content":"哈哈哈 谢谢夸奖～<br>可以加我微信 constant_variation 一起进群讨论～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1641445808,"ip_address":"","comment_id":329236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936196302","product_id":100100901,"comment_content":"这篇导读真的很有深度，老师太棒了！","like_count":1,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544238,"discussion_content":"哈哈哈 谢谢夸奖～\n可以加我微信 constant_variation 一起进群讨论～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641445808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327765,"user_name":"Geek_62b378","can_delete":false,"product_type":"c1","uid":2851662,"ip_address":"","ucode":"ADD8722DF2F060","user_header":"","comment_is_top":false,"comment_ctime":1640274121,"is_pvip":false,"replies":[{"id":"119550","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640668043,"ip_address":"","comment_id":327765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935241417","product_id":100100901,"comment_content":"把之前的递推例子过程画到二维表格中大概如下图所示，横轴的数字代表着 D-Path 的 D 也就是操作数，纵轴的数字代表 k-Lines 的行号<br>这里的纵轴的数字代表k-Lines的行号<br>这里的行号是不是说的是k-Lines中的k","like_count":1,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542112,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640668043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327274,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1589362,"ip_address":"","ucode":"DB816239218E5E","user_header":"https://static001.geekbang.org/account/avatar/00/18/40/72/2d97df54.jpg","comment_is_top":false,"comment_ctime":1640043551,"is_pvip":true,"replies":[{"id":"119167","content":"就是从左上到右下的斜线 可以参考图片理解","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640142327,"ip_address":"","comment_id":327274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935010847","product_id":100100901,"comment_content":"没有明白，对应的k-lines的行号指的是什么意思","like_count":1,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540722,"discussion_content":"就是从左上到右下的斜线 可以参考图片理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640142327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326020,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1639311814,"is_pvip":false,"replies":[{"id":"118275","content":"没事没事 第一篇确实难度比较大的 后面难度会小很多","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639360451,"ip_address":"","comment_id":326020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934279110","product_id":100100901,"comment_content":"看起来还是很困难","like_count":1,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538176,"discussion_content":"没事没事 第一篇确实难度比较大的 后面难度会小很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639360451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360109,"user_name":"锅菌鱼","can_delete":false,"product_type":"c1","uid":1131961,"ip_address":"广东","ucode":"82EC0452ED0E38","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b9/3db96ade.jpg","comment_is_top":false,"comment_ctime":1666181330,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666181330","product_id":100100901,"comment_content":"关于d+2，“整个树的结构是二叉的，奇数步时，必然处于奇数行号，偶数步时必然处于偶数行号”，有点难理解","like_count":0},{"had_liked":false,"id":356831,"user_name":"疯帽子","can_delete":false,"product_type":"c1","uid":1763214,"ip_address":"","ucode":"6687DE14A35BF1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e7/8e/ef2e91f3.jpg","comment_is_top":false,"comment_ctime":1662623473,"is_pvip":true,"replies":[{"id":"129862","content":"当然可以啊，学习嘛不要太挣扎，先挑你感兴趣的学吧，学到东西自己有收获才是真道理。如果感觉自己有成长了，再来回来挑战也不迟。","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1662633165,"ip_address":"","comment_id":356831,"utype":2}],"discussion_count":1,"race_medal":1,"score":"1662623473","product_id":100100901,"comment_content":"老师,这一篇看不懂,可以跳过不看吗😳","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586967,"discussion_content":"当然可以啊，学习嘛不要太挣扎，先挑你感兴趣的学吧，学到东西自己有收获才是真道理。如果感觉自己有成长了，再来回来挑战也不迟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662633165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354596,"user_name":"Geek_5d9c0f","can_delete":false,"product_type":"c1","uid":2666577,"ip_address":"上海","ucode":"C4B289DAF7DCBA","user_header":"","comment_is_top":false,"comment_ctime":1660575313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660575313","product_id":100100901,"comment_content":"[3,1]的行号是2，为什么line-2行号的x坐标是1","like_count":0},{"had_liked":false,"id":353292,"user_name":"幽弥狂","can_delete":false,"product_type":"c1","uid":1019807,"ip_address":"","ucode":"5AECEA7D6ADF33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","comment_is_top":false,"comment_ctime":1659334835,"is_pvip":true,"replies":[{"id":"128457","content":"哈哈哈先感受一下最贴近生产的代码思路:)","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1659404721,"ip_address":"","comment_id":353292,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1659334835","product_id":100100901,"comment_content":"第一章就这么硬？？？","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582344,"discussion_content":"哈哈哈先感受一下最贴近生产的代码思路:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659404721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351661,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1658061382,"is_pvip":false,"replies":[{"id":"127900","content":"哈哈哈没事，正好以看懂为学习目标嘛😁","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1658109309,"ip_address":"","comment_id":351661,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1658061382","product_id":100100901,"comment_content":"直接听不懂了","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580334,"discussion_content":"哈哈哈没事，正好以看懂为学习目标嘛😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658109309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350976,"user_name":"雨落～紫竹","can_delete":false,"product_type":"c1","uid":1666025,"ip_address":"","ucode":"33CED2F34E708F","user_header":"https://static001.geekbang.org/account/avatar/00/19/6b/e9/7620ae7e.jpg","comment_is_top":false,"comment_ctime":1657435423,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1657435423","product_id":100100901,"comment_content":"可以  只要知道这道题的思想 看着很清晰 一遍就过了","like_count":0},{"had_liked":false,"id":348814,"user_name":"萧戏","can_delete":false,"product_type":"c1","uid":1937585,"ip_address":"","ucode":"DEECC256DF7C5F","user_header":"https://static001.geekbang.org/account/avatar/00/1d/90/b1/fcc9e6df.jpg","comment_is_top":false,"comment_ctime":1655432248,"is_pvip":false,"replies":[{"id":"127038","content":"当然适合，看不明白说明自己进步空间大嘛","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1655717544,"ip_address":"","comment_id":348814,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1655432248","product_id":100100901,"comment_content":"第一课没有听明白，还是适合吗？","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576640,"discussion_content":"当然适合，看不明白说明自己进步空间大嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655717544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348120,"user_name":"聪聪","can_delete":false,"product_type":"c1","uid":2174436,"ip_address":"","ucode":"F0013FA4F45626","user_header":"https://static001.geekbang.org/account/avatar/00/21/2d/e4/728b3f4a.jpg","comment_is_top":false,"comment_ctime":1654761288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654761288","product_id":100100901,"comment_content":"看大家都说没看懂我就放心了<br>","like_count":0},{"had_liked":false,"id":340325,"user_name":"绘世浮夸 つ","can_delete":false,"product_type":"c1","uid":1763933,"ip_address":"","ucode":"6A3960195753BA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/5d/ccb4c205.jpg","comment_is_top":false,"comment_ctime":1648740436,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1648740436","product_id":100100901,"comment_content":"老师，伪代码中的MAX是什么呢，怎么确定这个值的呢","like_count":0,"discussions":[{"author":{"id":1763933,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ea/5d/ccb4c205.jpg","nickname":"绘世浮夸 つ","note":"","ucode":"6A3960195753BA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559431,"discussion_content":"时间复杂度不是D^2(M+N)吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648771351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339517,"user_name":"大飞","can_delete":false,"product_type":"c1","uid":1007433,"ip_address":"","ucode":"9359148118D4E0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/49/0a6be1bc.jpg","comment_is_top":false,"comment_ctime":1648168380,"is_pvip":true,"replies":[{"id":"126017","content":"多看看就可以搞懂啦 先搞懂大致思想 再深究细节","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1652171461,"ip_address":"","comment_id":339517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648168380","product_id":100100901,"comment_content":"略难，学完之后能搞懂不","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571301,"discussion_content":"多看看就可以搞懂啦 先搞懂大致思想 再深究细节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652171461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338815,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":false,"comment_ctime":1647750439,"is_pvip":false,"replies":[{"id":"126043","content":"好耶～ 欢迎来提PR github.com&#47;wfnuser&#47;Algorithms","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1652178248,"ip_address":"","comment_id":338815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647750439","product_id":100100901,"comment_content":"伪代码翻译成Python的版本如下，请大家斧正 ：<br>```python<br>def git_diff(a: str, b: str) -&gt; int:<br>    a = &quot; &quot; + a<br>    b = &quot; &quot; + b<br>    v = {0: 0}<br>    d = 0<br>    break_out = False<br>    while True:<br>        d += 1<br>        for k in range(-d, d + 1, 2):<br>            if k == -d:<br>                x = v[k + 1]<br>            elif k == d:<br>                x = v[k - 1] + 1<br>            else:<br>                if k + 1 not in v:<br>                    x = v[k - 1] + 1<br>                else:<br>                    x = max(v[k + 1], v[k - 1] + 1)<br>            y = x - k<br>            while x &lt; len(a) - 1 and y &lt; len(b) - 1 and a[x + 1] == b[y + 1]:<br>                x += 1<br>                y += 1<br>            v[k] = x<br>            if x &gt;= len(a) - 1 and y &gt;= len(b) - 1:<br>                break_out = True<br>                break<br>        v = {k: x for k, x in v.items() if (k + d) % 2 == 0}<br>        if break_out:<br>            break<br>    return d<br>```<br>","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571346,"discussion_content":"好耶～ 欢迎来提PR github.com/wfnuser/Algorithms","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652178249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338147,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1647324334,"is_pvip":false,"replies":[{"id":"126020","content":"哈哈哈 加油～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1652172084,"ip_address":"","comment_id":338147,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647324334","product_id":100100901,"comment_content":"仿佛回到读研时文章算法推导的时候。。","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571304,"discussion_content":"哈哈哈 加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652172084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332945,"user_name":"打不过就跑","can_delete":false,"product_type":"c1","uid":1574431,"ip_address":"","ucode":"62BD96EB467333","user_header":"https://static001.geekbang.org/account/avatar/00/18/06/1f/9537d8cb.jpg","comment_is_top":false,"comment_ctime":1643866184,"is_pvip":false,"replies":[{"id":"124052","content":"嗯嗯 我会陆续更新在 github.com&#47;wfnuser&#47;Algorithms 中","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1648045142,"ip_address":"","comment_id":332945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643866184","product_id":100100901,"comment_content":"讲的很不错，不过这章的算法相对较难，如果能有完整的能跑起来的代码会更好，个人觉得一般人都学过一些编程语言，使用任意一种完善的编程语言比使用伪代码要更好理解。","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558020,"discussion_content":"嗯嗯 我会陆续更新在 github.com/wfnuser/Algorithms 中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648045142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332713,"user_name":"王登武","can_delete":false,"product_type":"c1","uid":1230208,"ip_address":"","ucode":"DEA15426F0A255","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/80/6aefea8a.jpg","comment_is_top":false,"comment_ctime":1643513384,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643513384","product_id":100100901,"comment_content":"-A<br>-B<br>C<br>-A<br>B<br>+A<br>B<br>A<br>+C","like_count":0},{"had_liked":false,"id":328560,"user_name":"时间小偷","can_delete":false,"product_type":"c1","uid":1516796,"ip_address":"","ucode":"0EBC79DDD822C3","user_header":"","comment_is_top":false,"comment_ctime":1640772314,"is_pvip":false,"replies":[{"id":"120054","content":"有不止一种解决办法；其中有一种的思路是将LCS问题转化为LIS问题，并采用n*logn的复杂度解决；可以网上搜索了解一下～","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1641445435,"ip_address":"","comment_id":328560,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640772314","product_id":100100901,"comment_content":"最长公共子序列我只会O(mn)时间复杂度的动态规划解法，O(n*logn)时间复杂度是怎么解的？","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544229,"discussion_content":"有不止一种解决办法；其中有一种的思路是将LCS问题转化为LIS问题，并采用n*logn的复杂度解决；可以网上搜索了解一下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641445435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327899,"user_name":"jntv","can_delete":false,"product_type":"c1","uid":2133637,"ip_address":"","ucode":"320EFA463E2F59","user_header":"","comment_is_top":false,"comment_ctime":1640347486,"is_pvip":true,"replies":[{"id":"119557","content":"你说的没错；(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640670146,"ip_address":"","comment_id":327899,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640347486","product_id":100100901,"comment_content":"（4,0）点为什么在D=2这条线上？通过2步增或删到不了这个点呀","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542132,"discussion_content":"你说的没错；(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640670146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542128,"discussion_content":"你说的没错；(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640669992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327896,"user_name":"jntv","can_delete":false,"product_type":"c1","uid":2133637,"ip_address":"","ucode":"320EFA463E2F59","user_header":"","comment_is_top":false,"comment_ctime":1640347094,"is_pvip":true,"replies":[{"id":"119556","content":"你说的没错；(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640670133,"ip_address":"","comment_id":327896,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640347094","product_id":100100901,"comment_content":"D=2这条线怎么理解？","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542131,"discussion_content":"你说的没错；(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640670133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542129,"discussion_content":"代表只需要两步增删能到达的边界。\n上面有同学提问关于（4，0） 其实不在D=2这条线上。回答如下，供参考：\n(4,0)其实不在D=2上 D=2对应的k的范围为(-2,2) 其实不会包括(4,0)；原论文中图是这样画的，主要是因为直线比较美观，我们这里用了一样的图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640670032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327698,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1640242223,"is_pvip":true,"replies":[{"id":"119545","content":"这一章的代码是伪代码哈。<br>k是那一条条斜线；k的状态只能从k-1的斜线和k+1的斜线通过横线或者竖线转移过来。","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640667616,"ip_address":"","comment_id":327698,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640242223","product_id":100100901,"comment_content":"老师，你的代码是什么语言写的？前面还能看明白，到了代码实现部分，就觉得难度马上上升了。主要是要递推的那个图比较难理解。实现部分横轴和纵轴正好和递推图的轴是反的，估计不理解的都是卡在k这。","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542106,"discussion_content":"这一章的代码是伪代码哈。\nk是那一条条斜线；k的状态只能从k-1的斜线和k+1的斜线通过横线或者竖线转移过来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640667616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326733,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1639648752,"is_pvip":false,"replies":[{"id":"119165","content":"加油加油 这个确实比较难；后面的会简单很多","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1640142097,"ip_address":"","comment_id":326733,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639648752","product_id":100100901,"comment_content":"我不藏拙，这篇，我没看明白，我很菜，当头一棒，差点被劝退！","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540719,"discussion_content":"加油加油 这个确实比较难；后面的会简单很多","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640142097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325297,"avatar":"https://static001.geekbang.org/account/avatar/00/14/38/f1/996a070d.jpg","nickname":"LW","note":"","ucode":"89820332658E98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541128,"discussion_content":"直接跳过第一篇，-_-!!!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640262849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325529,"user_name":"Geek_7bed70","can_delete":false,"product_type":"c1","uid":2463101,"ip_address":"","ucode":"6014E8B2348457","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIL1K9WKIkvsdicFYrgiaUYLucECQMpZyEhl6L6LE5324BlDCEhJmyticcHwN8c37icQOC7q78VoKFdNQ/132","comment_is_top":false,"comment_ctime":1639016788,"is_pvip":true,"replies":[{"id":"118567","content":"不会哦 因为d轮如果更新的是k 则它依赖的一定是v[k-1]和v[k+1]","user_name":"作者回复","user_name_real":"编辑","uid":"1107505","ctime":1639541044,"ip_address":"","comment_id":325529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639016788","product_id":100100901,"comment_content":"老师，有一个问题，状态压缩成单维数组，内循环的时候会更新vk的值，这时候后面用到的就不是d-1时候的值了，而是d的值，这样会不会有问题","like_count":0,"discussions":[{"author":{"id":1107505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/31/5b8800fb.jpg","nickname":"微扰理论","note":"","ucode":"55D0542FA602D9","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538865,"discussion_content":"不会哦 因为d轮如果更新的是k 则它依赖的一定是v[k-1]和v[k+1]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639541044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}