{"id":431420,"title":"08 | Torchvision（下）：其他有趣的功能","content":"<p>你好，我是方远。</p><p>在前面的课程中，我们已经学习了Torchvision的数据读取与常用的图像变换方法。其实，Torchvision除了帮我们封装好了常用的数据集，还为我们提供了深度学习中各种经典的网络结构以及训练好的模型，只要直接将这些经典模型的类实例化出来，就可以进行训练或使用了。</p><p>我们可以利用这些训练好的模型来实现图片分类、物体检测、视频分类等一系列应用。</p><p>今天，我们就来学习一下经典网络模型的实例化与Torchvision中其他有趣的功能。</p><h2>常见网络模型</h2><p>Torchvision中的各种经典网络结构以及训练好的模型，都放在了<code>torchvision.models</code>模块中，下面我们来看一看<code>torchvision.models</code> 具体为我们提供了什么支持，以及这些功能如何使用。</p><h3>torchvision.models模块</h3><p><code>torchvision.models</code> 模块中包含了常见网络模型结构的定义，这些网络模型可以解决以下四大类问题：图像分类、图像分割、物体检测和视频分类。图像分类、物体检测与图像分割的示意图如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/b3/4211c2d8cd27db3e903e6125122f47b3.jpg?wh=1920x1204\" alt=\"\"></p><p>图像分类，指的是单纯把一张图片判断为某一类，例如将上图左侧第一张判断为cat。目标检测则是说，首先检测出物体的位置，还要识别出对应物体的类别。如上图中间的那张图，不仅仅要找到猫、鸭子、狗的位置，还有给出给定物体的类别信息。</p><!-- [[[read_end]]] --><p>我们看一下图里最右侧的例子，它表示的是分割。分割即是对图像中每一个像素点进行分类，确定每个点的类别，从而进行区域划分。</p><p>在早期的Torchvision版本中，<code>torchvision.models</code>模块中只包含了图片分类中的一部分网络，例如AlexNet、VGG系列、ResNet系列、Inception系列等。这里你先有个印象就行，具体网络特点，我后面会在图像分类中详细讲解。</p><p>到了现在，随着深度学习技术的不断发展，人工智能应用更为广泛，<code>torchvision.models</code>模块中所封装的网络模型也在不断丰富。比如在当前版本（v0.10.0）的Torchvision中，新增了图像语义分割、物体检测和视频分类的相关网络，并且在图像分类中也新增了GoogLeNet、ShuffleNet以及可以使用于移动端的MobileNet系列。这些新模型，都能让我们站在巨人的肩膀上看世界。</p><h3>实例化一个GoogLeNet网络</h3><p>如果我们直接把一个网络模型的类实例化，就会得到一个网络模型。而这个网络模型的类可以是我们自己定义的结构，也可以是按照经典模型的论文设计出来的结构。其实你自己按照经典模型的论文写一个类，然后实例化一下，这和从Torchvision中直接实例化一个网络效果是相同的。</p><p>下面我们就以 GoogLeNet 网络为例，来说说如何使用<code>torchvision.models</code>模块实例化一个网络。</p><p>GoogLeNet是Google推出的基于Inception模块的深度神经网络模型。你可别小看这个模型，GoogLeNet获得了2014年的ImageNet竞赛的冠军，并且相比之前的AlexNet、VGG等结构能更高效地利用计算资源。</p><p>GoogLeNet 也被称为Inception V1，在随后的两年中它一直在改进，形成了Inception V2、Inception V3等多个版本。</p><p>我们可以使用<strong>随机初始化的权重，创建一个GoogLeNet模型</strong>，具体代码如下：</p><pre><code class=\"language-python\">import torchvision.models as models\ngooglenet = models.googlenet()\n</code></pre><p>这时候的 GoogLeNet 模型，相当于只有一个实例化好的网络结构，里面的参数都是随机初始化的，需要经过训练之后才能使用，并不能直接用于预测。<br>\n<code>torchvision.models</code>模块除了包含了定义好的网络结构，还为我们提供了预训练好的模型，我们可以<strong>直接导入训练好的模型来使用</strong>。导入预训练好的模型的代码如下：</p><pre><code class=\"language-python\">import torchvision.models as models\ngooglenet = models.googlenet(pretrained=True)\n</code></pre><p>可以看出，我们只是在实例化的时候，引入了一个参数“pretrained=True”，即可获得预训练好的模型，因为所有的工作<code>torchvision.models</code>模块都已经帮我们封装好了，用起来很方便。<br>\n<code>torchvision.models</code>模块中所有预训练好的模型，都是在ImageNet数据集上训练的，它们都是由PyTorch 的<code>torch.utils.model_zoo</code>模块所提供的，并且我们可以通过参数&nbsp;pretrained=True&nbsp;来构造这些预训练模型。</p><p>如果之前没有加载过带预训练参数的网络，在实例化一个预训练好的模型时，模型的参数会被下载至缓存目录中，下载一次后不需要重复下载。这个缓存目录可以通过环境变量TORCH_MODEL_ZOO来指定。当然，你也可以把自己下载好的模型，然后复制到指定路径中。</p><p>下图是运行了上述实例化代码的结果，可以看到，GoogLeNet的模型参数被下载到了缓存目录/root/.cache/torch下面。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/49/16975c6f4071ee1dacc9a41a28f93c49.png?wh=1920x270\" alt=\"图片\"></p><p><code>torchvision.models</code>模块也包含了Inception V3和其他常见的网络结构，在实例化时，只需要修改网络的类名，即可做到举一反三。<code>torchvision.models</code>模块中可实例化的全部模型详见这个<a href=\"https://pytorch.org/vision/stable/models.html\">网页</a>。</p><h3>模型微调</h3><p>完成了刚才的工作，你可能会疑惑，实例化了带预训练参数的网络有什么用呢？其实它除了可以直接用来做预测使用，还可以基于它做网络模型的微调，也就是“fine-tuning”。</p><p>那什么是“fine-tuning”呢？</p><p>举个例子，假设你的老板给布置了一个有关于图片分类的任务，数据集是关于狗狗的图片，让你区分图片中狗的种类，例如金毛、柯基、边牧等等。</p><p>问题是数据集中狗的类别很多，但数据却不多。你发现从零开始训练一个图片分类模型，但这样模型效果很差，并且很容易过拟合。这种问题该如何解决呢？于是你想到了使用迁移学习，可以用已经在ImageNet数据集上训练好的模型来达成你的目的。</p><p>例如上面我们已经实例化的GoogLeNet模型，只需要使用我们自己的数据集，重新训练网络最后的分类层，即可得到区分狗种类的图片分类模型。这就是所谓的“fine-tuning”方法。</p><p><strong>模型微调</strong>，简单来说就是先在一个比较通用、宽泛的数据集上进行大量训练得出了一套参数，然后再使用这套预训练好的网络和参数，在自己的任务和数据集上进行训练。使用经过预训练的模型，要比使用随机初始化的模型训练<strong>效果更好</strong>，<strong>更容易收敛</strong>，并且<strong>训练速度更快</strong>，在小数据集上也能取得比较理想的效果。</p><p>那新的问题又来了，为什么模型微调如此有效呢？因为我们相信同样是处理图片分类任务的两个模型，网络的参数也具有某种相似性。因此，把一个已经训练得很好的模型参数迁移到另一个模型上，同样有效。即使两个模型的工作不完全相同，我们也可以在这套预训练参数的基础上，经过微调性质的训练，同样能取得不错的效果。</p><p>ImageNet数据集共有1000个类别，而狗的种类远远达不到1000类。因此，加载了预训练好的模型之后，还需要根据你的具体问题对模型或数据进行一些调整，通常来说是调整输出类别的数量。</p><p>假设狗的种类一共为10类，那么我们自然需要将GoogLeNet模型的输出分类数也调整为10。对预训练模型进行调整对代码如下：</p><pre><code class=\"language-python\">import torch\nimport torchvision.models as models\n\n# 加载预训练模型\ngooglenet = models.googlenet(pretrained=True)\n\n# 提取分类层的输入参数\nfc_in_features = googlenet.fc.in_features\nprint(\"fc_in_features:\", fc_in_features)\n\n# 查看分类层的输出参数\nfc_out_features = googlenet.fc.out_features\nprint(\"fc_out_features:\", fc_out_features)\n\n# 修改预训练模型的输出分类数(在图像分类原理中会具体介绍torch.nn.Linear)\ngooglenet.fc = torch.nn.Linear(fc_in_features, 10)\n'''\n输出：\nfc_in_features: 1024\nfc_out_features: 1000\n'''\n</code></pre><p>首先，你需要加载预训练模型，然后提取预训练模型的分类层固定参数，最后修改预训练模型的输出分类数为10。根据输出结果，我们可以看到预训练模型的原始输出分类数是1000。</p><h2>其他常用函数</h2><p>之前在<code>torchvision.transforms</code>中，我们学习了很多有关于图像处理的函数，Torchvision还提供了几个常用的函数，make_grid和save_img，让我们依次来看一看它们又能实现哪些有趣的功能。</p><h3>make_grid</h3><p>make_grid 的作用是将若干幅图像拼成在一个网格中，它的定义如下。</p><pre><code class=\"language-plain\">torchvision.utils.make_grid(tensor, nrow=8, padding=2)&nbsp;\n</code></pre><p>定义中对应的几个参数含义如下：</p><ul>\n<li>tensor：类型是Tensor或列表，如果输入类型是Tensor，其形状应是 (B x C x H x W)；如果输入类型是列表，列表中元素应为相同大小的图片。</li>\n<li>nrow：表示一行放入的图片数量，默认为8。</li>\n<li>padding：子图像与子图像之间的边框宽度，默认为2像素。</li>\n</ul><p>make_grid函数主要用于展示数据集或模型输出的图像结果。我们以MNIST数据集为例，整合之前学习过的读取数据集以及图像变换的内容，来看一看make_grid函数的效果。</p><p>下面的程序利用make_grid函数，展示了MNIST的测试集中的32张图片。</p><pre><code class=\"language-python\">import torchvision\nfrom torchvision import datasets\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader\n\n# 加载MNIST数据集\nmnist_dataset = datasets.MNIST(root='./data',\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;train=False,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;transform=transforms.ToTensor(),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;target_transform=None,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;download=True)\n# 取32张图片的tensor\ntensor_dataloader = DataLoader(dataset=mnist_dataset,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;batch_size=32)\ndata_iter = iter(tensor_dataloader)\nimg_tensor, label_tensor = data_iter.next()\nprint(img_tensor.shape)\n'''\n输出：torch.Size([32, 1, 28, 28])\n'''\n# 将32张图片拼接在一个网格中\ngrid_tensor = torchvision.utils.make_grid(img_tensor, nrow=8, padding=2)\ngrid_img = transforms.ToPILImage()(grid_tensor)\ndisplay(grid_img)\n</code></pre><p>结合代码我们可以看到，程序首先利用<code>torchvision.datasets</code>加载MNIST的测试集，然后利用DataLoader类的迭代器一次获取到32张图片的Tensor，最后利用make_grid函数将32张图片拼接在了一幅图片中。<br>\nMNIST的测试集中的32张图片，如下图所示，这里我要特别说明一下，因为MNIST的尺寸为28x28，所以测试集里的手写数字图片像素都比较低，但这并不影响咱们动手实践。你可以参照我给到的示范，自己动手试试看。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/yy/bb73d6bdf49fc876d983cfa48569dcyy.png?wh=242x122\" alt=\"图片\"></p><h3>save_img</h3><p>一般来说，在保存模型输出的图片时，需要将Tensor类型的数据转化为图片类型才能进行保存，过程比较繁琐。Torchvision提供了save_image函数，能够直接将Tensor保存为图片，即使Tensor数据在CUDA上，也会自动移到CPU中进行保存。</p><p>save_image函数的定义如下。</p><pre><code class=\"language-python\">torchvision.utils.save_image(tensor, fp, **kwargs)\n</code></pre><p>这些参数也很好理解：</p><ul>\n<li>tensor：类型是Tensor或列表，如果输入类型是Tensor，直接将Tensor保存；如果输入类型是列表，则先调用make_grid函数生成一张图片的Tensor，然后再保存。</li>\n<li>fp：保存图片的文件名；</li>\n<li>**kwargs：make_grid函数中的参数，前面已经讲过了。</li>\n</ul><p>我们接着上面的小例子，将32张图片的拼接图直接保存，代码如下。</p><pre><code class=\"language-python\"># 输入为一张图片的tensor 直接保存\ntorchvision.utils.save_image(grid_tensor, 'grid.jpg')\n\n# 输入为List 调用grid_img函数后保存\ntorchvision.utils.save_image(img_tensor, 'grid2.jpg', nrow=5, padding=2)\n</code></pre><p>当输入为一张图片的Tensor时，直接保存，保存的图片如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/yy/bb73d6bdf49fc876d983cfa48569dcyy.png?wh=242x122\" alt=\"图片\"></p><p>当输入为List时，则会先调用make_grid函数，make_grid函数的参数直接加在后面即可，代码中令nrow=5，保存的图片如下所示。这时我们可以看到图片中，每行中有5个数字，最后一行不足的数字，已经自动填充了空图像。</p><p><img src=\"https://static001.geekbang.org/resource/image/21/a6/21435a2115ca4704bc51496f8a1c8da6.png?wh=152x212\" alt=\"图片\"></p><h2>小结</h2><p>恭喜你完成了这节课的学习。至此，Torchvision的全部内容我们就学完了。</p><p>今天的重点内容是<code>torchvision.models</code>模块的使用，包括如何实例化一个网络与如何进行模型的微调。</p><p><code>torchvision.models</code>模块为我们提供了深度学习中各种经典的网络结构以及训练好的模型，我们不仅可以实例化一个随机初始化的网络模型，还可以实例化一个预训练好的网络模型。</p><p>模型微调可以让我们在自己的小数据集上快速训练模型，并取得比较理想的效果。但是我们需要根据具体问题对预训练模型或数据进行一些修改，你可以灵活调整输出类别的数量，或者调整输入图像的大小。</p><p>除了模型微调，我还讲了两个Torchvision中有趣的函数，make_grid和save_img，我还结合之前我们学习过的读取数据集以及图像变换的内容，为你做了演示。相信Torchvision工具配合PyTorch使用，一定能够使你事半功倍。</p><h2>每课一练</h2><p>请你使用<code>torchvision.models</code>模块实例化一个VGG 16网络。</p><p>欢迎你在留言区跟我交流讨论，也推荐你把这节课分享给更多的同事、朋友。</p><p>我是方远，我们下节课见！</p>","comments":[{"had_liked":false,"id":320987,"user_name":"autiplex","can_delete":false,"product_type":"c1","uid":2817246,"ip_address":"","ucode":"6D8DB528CC3A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fc/de/6e2cb960.jpg","comment_is_top":false,"comment_ctime":1636611306,"is_pvip":false,"replies":[{"id":"116604","content":"你好，autiplex。谢谢你的留言。<br>fc_out_features 是原来googlenet最后一层（fc层）的输出，10是我们期望的输出，现在是要将fc_out_features（1000）替换成10。<br>因此，googlenet.fc = torch.nn.Linear(fc_in_features, 10)，这里表示最后一层的输出改为10。<br>torch.nn.Linear的参数是：（网络输入特征数，网络输出特征数），所以第一个参数应该是fc_in_features。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1636682453,"ip_address":"","comment_id":320987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53176218858","product_id":100093301,"comment_content":"<br>import torch<br>import torchvision.models as models<br><br># 加载预训练模型<br>googlenet = models.googlenet(pretrained=True)<br><br># 提取分类层的输入参数<br>fc_in_features = googlenet.fc.in_features<br>print(&quot;fc_in_features:&quot;, fc_in_features)<br><br># 查看分类层的输出参数<br>fc_out_features = googlenet.fc.out_features<br>print(&quot;fc_out_features:&quot;, fc_out_features)<br><br># 修改预训练模型的输出分类数(在图像分类原理中会具体介绍torch.nn.Linear)<br>googlenet.fc = torch.nn.Linear(fc_in_features, 10)<br>&#39;&#39;&#39;<br>输出：<br>fc_in_features: 1024<br>fc_out_features: 1000<br>&#39;&#39;&#39;<br><br>老师这段代码里 torch.nn.Linear里是不是应该是fc_out_features，因为不是要转换输出分类数为10么","like_count":12,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530179,"discussion_content":"你好，autiplex。谢谢你的留言。\nfc_out_features 是原来googlenet最后一层（fc层）的输出，10是我们期望的输出，现在是要将fc_out_features（1000）替换成10。\n因此，googlenet.fc = torch.nn.Linear(fc_in_features, 10)，这里表示最后一层的输出改为10。\ntorch.nn.Linear的参数是：（网络输入特征数，网络输出特征数），所以第一个参数应该是fc_in_features。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636682453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318647,"user_name":"AstrHan","can_delete":false,"product_type":"c1","uid":1944884,"ip_address":"","ucode":"14C5F3323A472D","user_header":"","comment_is_top":false,"comment_ctime":1635382273,"is_pvip":false,"replies":[{"id":"115563","content":"你好，AstrHan。感谢你的留言。<br><br>首先，不使用预训练模型的话，我们的模型是从随机初始化的参数开始训练。这个训练过程会非常慢。<br>使用预训练模型话，相当于在预训练模型的基础上进行训练。<br>举个例子，把模型训练比作从山顶走向山脚的过程，山脚就是我们模型收敛的状态。<br>不使用预训练模型的话，就相当于从山顶开始一步步向下走。<br>使用预训练模型的话，相当于从一个接近山脚的位置向下走。<br><br>有两种微调方式。第一种就是这节课中提到的微调，也就是固定卷积层的参数，只训练全连接层。<br>这也可以理解为Embedding。ImageNet上有很多丰富的数据，现在有一个在ImageNet上训练很好的模型，然后将我们例子中的图片（狗）用ImageNet上训练的模型进行特征提取（ImageNet模型倒数第二层的输出）。<br>提取后的数据相当于是原始图片（狗）的另一种表示。<br>这个过程相当于，原始的数据就是狗的图片。<br>经过ImageNet提取后的特征变为有有耳朵、四条腿、爱吃骨头、跑得快、会汪汪叫之类的特征。<br>然后用提取后的特征作为新模型的输入，这里的新模型就是修改后的全连接层。<br><br>还有一种微调，会在14节中讲到，就是使用在ImageNet上训练好的模型的参数，作为我们模型的初始化参数进行训练。这种方式是训练所有的参数，而不是固定全连接层前面的参数。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635404382,"ip_address":"","comment_id":318647,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53174989825","product_id":100093301,"comment_content":"老师，微调的原理是什么啊？image net训练出来的倒数第二层应该是包含1000个类型的特征，那微调训练之后这层输出的会全部变成狗相关的特征吗？如果这样，那训练过程感觉反而会更慢啊。还是说微调训练最多的是输出层，降低倒数第二层里非狗的特征权重？","like_count":12,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529328,"discussion_content":"你好，AstrHan。感谢你的留言。\n\n首先，不使用预训练模型的话，我们的模型是从随机初始化的参数开始训练。这个训练过程会非常慢。\n使用预训练模型话，相当于在预训练模型的基础上进行训练。\n举个例子，把模型训练比作从山顶走向山脚的过程，山脚就是我们模型收敛的状态。\n不使用预训练模型的话，就相当于从山顶开始一步步向下走。\n使用预训练模型的话，相当于从一个接近山脚的位置向下走。\n\n有两种微调方式。第一种就是这节课中提到的微调，也就是固定卷积层的参数，只训练全连接层。\n这也可以理解为Embedding。ImageNet上有很多丰富的数据，现在有一个在ImageNet上训练很好的模型，然后将我们例子中的图片（狗）用ImageNet上训练的模型进行特征提取（ImageNet模型倒数第二层的输出）。\n提取后的数据相当于是原始图片（狗）的另一种表示。\n这个过程相当于，原始的数据就是狗的图片。\n经过ImageNet提取后的特征变为有有耳朵、四条腿、爱吃骨头、跑得快、会汪汪叫之类的特征。\n然后用提取后的特征作为新模型的输入，这里的新模型就是修改后的全连接层。\n\n还有一种微调，会在14节中讲到，就是使用在ImageNet上训练好的模型的参数，作为我们模型的初始化参数进行训练。这种方式是训练所有的参数，而不是固定全连接层前面的参数。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635404382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2459939,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/23/e71f180b.jpg","nickname":"Geek_fc975d","note":"","ucode":"05B6507FE4349B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":560866,"discussion_content":"老师的回复知识点都满满啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649474307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529328,"ip_address":""},"score":560866,"extra":""}]}]},{"had_liked":false,"id":318569,"user_name":"vcjmhg","can_delete":false,"product_type":"c1","uid":1526461,"ip_address":"","ucode":"B508D1E9B3F974","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/j24oyxHcpB5AMR9pMO6fITqnOFVOncnk2T1vdu1rYLfq1cN6Sj7xVrBVbCvHXUad2MpfyBcE4neBguxmjIxyiaQ/132","comment_is_top":false,"comment_ctime":1635336241,"is_pvip":false,"replies":[{"id":"115501","content":"你好，谢谢留言。每次都非常正确👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻。^^","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635338689,"ip_address":"","comment_id":318569,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27405140017","product_id":100093301,"comment_content":"vgg16 = models.vgg16(pretrained=True)","like_count":6,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529301,"discussion_content":"你好，谢谢留言。每次都非常正确👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻。^^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635338689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324421,"user_name":"徐洲更","can_delete":false,"product_type":"c1","uid":1314643,"ip_address":"","ucode":"F8A323CB732D05","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/53/92a50f01.jpg","comment_is_top":false,"comment_ctime":1638426747,"is_pvip":true,"replies":[{"id":"117733","content":"你好，徐洲更。<br>可以学习一下强化学习（Reinforcement Learning）相关的内容。^^","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1638436859,"ip_address":"","comment_id":324421,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14523328635","product_id":100093301,"comment_content":"老师您好，请教一个可能跟计算机视觉相关的深度学习的问题。假如一款3D的赛车类游戏，我在里面做了一系列操作，从起点开到了终点，我能否让神经网络根据我的操作和对应的录屏学会我的操作，并大致重复出来呢？这需要什么样的深度学习模型呢？","like_count":3,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535420,"discussion_content":"你好，徐洲更。\n可以学习一下强化学习（Reinforcement Learning）相关的内容。^^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638436859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1314643,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/53/92a50f01.jpg","nickname":"徐洲更","note":"","ucode":"F8A323CB732D05","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535432,"discussion_content":"嗯嗯 谢谢方远老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638440058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":535420,"ip_address":""},"score":535432,"extra":""}]}]},{"had_liked":false,"id":355318,"user_name":"奔跑的火龙果","can_delete":false,"product_type":"c1","uid":2738776,"ip_address":"北京","ucode":"7FFFD42E177EFB","user_header":"https://static001.geekbang.org/account/avatar/00/29/ca/58/8b4723dc.jpg","comment_is_top":false,"comment_ctime":1661264009,"is_pvip":false,"replies":[{"id":"129288","content":"你好，感谢留言。<br>iter()函数用来生成迭代器。<br>next()函数用来获取迭代器的元素。<br>具体可以参见Python迭代器的创建和使用。<br>https:&#47;&#47;www.w3school.com.cn&#47;python&#47;ref_func_iter.asp","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1661319470,"ip_address":"北京","comment_id":355318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5956231305","product_id":100093301,"comment_content":"iter(tensor_dataloader)和next()分别是什么意思呢？<br>","like_count":1,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585064,"discussion_content":"你好，感谢留言。\niter()函数用来生成迭代器。\nnext()函数用来获取迭代器的元素。\n具体可以参见Python迭代器的创建和使用。\nhttps://www.w3school.com.cn/python/ref_func_iter.asp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661319470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353073,"user_name":"John(易筋)","can_delete":false,"product_type":"c1","uid":1180202,"ip_address":"北京","ucode":"BB4E58DD4B8F15","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/2a/90e38b94.jpg","comment_is_top":false,"comment_ctime":1659140493,"is_pvip":true,"replies":[{"id":"128537","content":"👍🏻👍🏻👍🏻^^","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1659508569,"ip_address":"北京","comment_id":353073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5954107789","product_id":100093301,"comment_content":"解决 AttributeError: module &#39;torchvision.models&#39; has no attribute &#39;googlenet&#39;<br>运行以下命令报错<br>googlenet = models.googlenet()<br>解决方法<br>google_net = torchvision.models.inception_v3(pretrained=True)<br>---------------------------------------------------------------------------<br>AttributeError                            Traceback (most recent call last)<br>&lt;ipython-input-3-0e4152b595be&gt; in &lt;module&gt;<br>      1 import torchvision.models as models<br>----&gt; 2 googlenet = models.googlenet()<br><br>AttributeError: module &#39;torchvision.models&#39; has no attribute &#39;googlenet&#39;<br><br>ref: https:&#47;&#47;stackoverflow.com&#47;questions&#47;55762706&#47;how-to-load-pretrained-googlenet-model-in-pytorch","like_count":1,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582554,"discussion_content":"👍🏻👍🏻👍🏻^^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659508569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343155,"user_name":"..................","can_delete":false,"product_type":"c1","uid":2980638,"ip_address":"","ucode":"3203CA634FC3A7","user_header":"https://static001.geekbang.org/account/avatar/00/2d/7b/1e/8bb7c7fe.jpg","comment_is_top":false,"comment_ctime":1650682888,"is_pvip":false,"replies":[{"id":"125396","content":"你好，感谢你的留言。<br>B是指batch_size，就是一次处理多少张图片。<br>C是指channel，图片的通道数，通常来说是3。<br>H和W就是只图片的高与宽了。","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1650864785,"ip_address":"","comment_id":343155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945650184","product_id":100093301,"comment_content":"老师请问这句话“tensor：类型是 Tensor 或列表，如果输入类型是 Tensor，其形状应是 (B x C x H x W)；”中的B,C,H,W分别是什么意思？实在想不明白","like_count":1,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567240,"discussion_content":"你好，感谢你的留言。\nB是指batch_size，就是一次处理多少张图片。\nC是指channel，图片的通道数，通常来说是3。\nH和W就是只图片的高与宽了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650864785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358405,"user_name":"XXXL","can_delete":false,"product_type":"c1","uid":3169844,"ip_address":"黑龙江","ucode":"959E55A10E6FA5","user_header":"https://static001.geekbang.org/account/avatar/00/30/5e/34/5b8ff9a1.jpg","comment_is_top":false,"comment_ctime":1664275016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664275016","product_id":100093301,"comment_content":"为啥我调用 google net的时候它提示module &#39;torchvision.models&#39; has no attribute &#39;googlenet&#39;","like_count":0},{"had_liked":false,"id":351968,"user_name":"李泽","can_delete":false,"product_type":"c1","uid":2822701,"ip_address":"","ucode":"136225FC58F164","user_header":"https://static001.geekbang.org/account/avatar/00/2b/12/2d/aba06a9a.jpg","comment_is_top":false,"comment_ctime":1658309709,"is_pvip":false,"replies":[{"id":"128118","content":"hello， 你好，李泽。测试的话具体是测试什么呢？<br>如果是推断的话，可以继续看看后面的章节。","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1658452936,"ip_address":"","comment_id":351968,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1658309709","product_id":100093301,"comment_content":"googlenet.fc = torch.nn.Linear(fc_in_features, 10) 之后要如何使用它做一下测试呢？","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580993,"discussion_content":"hello， 你好，李泽。测试的话具体是测试什么呢？\n如果是推断的话，可以继续看看后面的章节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658452936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2822701,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/12/2d/aba06a9a.jpg","nickname":"李泽","note":"","ucode":"136225FC58F164","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":581004,"discussion_content":"谢谢老师，我说的就是推断～我继续学习～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658457770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580993,"ip_address":""},"score":581004,"extra":""}]}]},{"had_liked":false,"id":345563,"user_name":"亚林","can_delete":false,"product_type":"c1","uid":1018972,"ip_address":"","ucode":"4A5A6D24314B79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","comment_is_top":false,"comment_ctime":1652405402,"is_pvip":false,"replies":[{"id":"126125","content":"^^👍🏻👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"2802608","ctime":1652423917,"ip_address":"","comment_id":345563,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652405402","product_id":100093301,"comment_content":"vgg16 = models.vgg16()<br>vgg16 = models.vgg16(pretrained=True)","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571824,"discussion_content":"^^👍🏻👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652423917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321731,"user_name":"度","can_delete":false,"product_type":"c1","uid":2824043,"ip_address":"","ucode":"6454F59EC064E5","user_header":"https://static001.geekbang.org/account/avatar/00/2b/17/6b/4e089b79.jpg","comment_is_top":false,"comment_ctime":1637028201,"is_pvip":false,"replies":[{"id":"116839","content":"hello。print(googlenet.fc.out_features)试试呢？<br><br>fc_out_features变量并没有赋新值，所以不会改变呀","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1637050452,"ip_address":"","comment_id":321731,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637028201","product_id":100093301,"comment_content":"googlenet.fc = torch.nn.Linear(fc_in_features, 10)<br>print(&quot;fc_out_features:&quot;, fc_out_features)<br>老师，我更改后得到的输出特征数还是 fc_out_features: 1000 这个结果。请赐教！","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530343,"discussion_content":"hello。print(googlenet.fc.out_features)试试呢？\n\nfc_out_features变量并没有赋新值，所以不会改变呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637050452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320367,"user_name":"clee","can_delete":false,"product_type":"c1","uid":1467446,"ip_address":"","ucode":"122875102B23A8","user_header":"","comment_is_top":false,"comment_ctime":1636278677,"is_pvip":false,"replies":[{"id":"116181","content":"你好，clee。谢谢你的留言。<br>👍🏻👍🏻👍🏻👍🏻，完全正确^^。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1636349847,"ip_address":"","comment_id":320367,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636278677","product_id":100093301,"comment_content":"vgg16 = models.vgg16(pretrained=True)","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529970,"discussion_content":"你好，clee。谢谢你的留言。\n👍🏻👍🏻👍🏻👍🏻，完全正确^^。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636349847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319138,"user_name":"夏阳","can_delete":false,"product_type":"c1","uid":2804801,"ip_address":"","ucode":"9392839CE55C22","user_header":"https://static001.geekbang.org/account/avatar/00/2a/cc/41/af863836.jpg","comment_is_top":false,"comment_ctime":1635609266,"is_pvip":false,"replies":[{"id":"115727","content":"你好，夏阳，感谢你的留言。能新开一个留言提供一下你的代码吗？或者在发到微信群里。<br>","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635689691,"ip_address":"","comment_id":319138,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1635609266","product_id":100093301,"comment_content":"老师，这段段代码会报错<br>torchvision.utils.save_image(grid_tensor, &#39;grid.jpg&#39;)<br><br>ValueError: unknown file extension: <br><br>搞不清楚什么状况，请帮忙指教","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529513,"discussion_content":"你好，夏阳，感谢你的留言。能新开一个留言提供一下你的代码吗？或者在发到微信群里。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635689691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180202,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/2a/90e38b94.jpg","nickname":"John(易筋)","note":"","ucode":"BB4E58DD4B8F15","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582020,"discussion_content":"方老师，可以帮忙拉入微信群么？ zgpeace， 名字也是 John易筋。 谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659142632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237846,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e3/56/5fc6c92c.jpg","nickname":"小伟","note":"","ucode":"43235F32B7F9D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544903,"discussion_content":"老师 微信群怎么加呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641777116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318508,"user_name":"勿更改任何信息","can_delete":false,"product_type":"c1","uid":2028956,"ip_address":"","ucode":"575185C69C05A3","user_header":"","comment_is_top":false,"comment_ctime":1635319041,"is_pvip":false,"replies":[{"id":"115498","content":"你好，勿更改任何信息，谢谢你的留言。<br>专栏中每一篇中的代码，基本都是可运行代码^^，参照讲解来看更好一点。<br>暂时不会放到GitHub上。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635322042,"ip_address":"","comment_id":318508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635319041","product_id":100093301,"comment_content":"老师，代码太分散了，后期是否可以在github上统一存储呢？","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529278,"discussion_content":"你好，勿更改任何信息，谢谢你的留言。\n专栏中每一篇中的代码，基本都是可运行代码^^，参照讲解来看更好一点。\n暂时不会放到GitHub上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635322042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318494,"user_name":"超人不会飞","can_delete":false,"product_type":"c1","uid":2808296,"ip_address":"","ucode":"6F67096D5FFAFA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SKmvhbNe9LMPQ0ib8ZqbJEfHicUxzxCSKVXiaibn7OrmXGUFQjkesgvODymZz4kibzqOGxuRq42t3sB2ibcBIIGWRgSg/132","comment_is_top":false,"comment_ctime":1635314181,"is_pvip":false,"replies":[{"id":"115493","content":"你好，超人不会飞。感谢你的留言。👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻。完全正确^^。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635318563,"ip_address":"","comment_id":318494,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635314181","product_id":100093301,"comment_content":"vgg16net=torchvision.models.vgg16(pretrained=True)","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529270,"discussion_content":"你好，超人不会飞。感谢你的留言。👍🏻👍🏻👍🏻👍🏻👍🏻👍🏻。完全正确^^。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635318563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318427,"user_name":"黄焯","can_delete":false,"product_type":"c1","uid":1369178,"ip_address":"","ucode":"182AB3F74CADF1","user_header":"https://static001.geekbang.org/account/avatar/00/14/e4/5a/b61bd7f1.jpg","comment_is_top":false,"comment_ctime":1635298120,"is_pvip":false,"replies":[{"id":"115475","content":"你好，黄焯，感谢你的留言。<br>是v0.10.0版本^^。你可以看下这个页面https:&#47;&#47;github.com&#47;pytorch&#47;vision。","user_name":"作者回复","user_name_real":"方远","uid":"2802608","ctime":1635300716,"ip_address":"","comment_id":318427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635298120","product_id":100093301,"comment_content":"文中的当前版本应该是v1.10.0，而不是v0.10.0吧","like_count":0,"discussions":[{"author":{"id":2802608,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1ZkL9L7CEicI87xicpIhXAIhVdVWpJKBsD8Jpzg9iaAwFcDEhTvdRwuKItJS14mYznT2w2YQvn8QsQ/132","nickname":"方远","note":"","ucode":"248B1DE180EB4C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529236,"discussion_content":"你好，黄焯，感谢你的留言。\n是v0.10.0版本^^。你可以看下这个页面https://github.com/pytorch/vision。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635300716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}