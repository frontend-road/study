{"id":131673,"title":"06 | 代码入库到产品上线：Facebook如何使用CI/CD满足业务要求？","content":"<p>你好，我是葛俊。</p><p>在上一篇文章中，我和你分享了代码入库前的流程优化，即持续开发。今天，我会继续与你介绍流程优化中，代码入库和入库后的3种持续工程方法，即持续集成（Continuous Integration, CI)、持续交付（Continuous Delivery, CD）和持续部署（Continuous Deployment, CD)。</p><p>在接下来的分享中，首先我会与你介绍这3种方法的定义和作用，帮助你深入理解这3个“持续”背后的原理和原则；然后我会以Facebook为参考，给你介绍基于这些原则的具体工程实践。我希望，这些内容能够帮助你用好这三个“持续”方法，提高团队的研发效能。</p><p>首先，我先来介绍一下，持续集成、持续交付和持续部署是用来解决什么问题的，也就是它们的定义和作用。</p><h2>3个“持续”的定义和作用</h2><p>不知道你是否还记得，在开篇词中，我提到过一个低效能的情况，即产品发布上线时出现大量提交、合并，导致最后时刻出现很多问题。这个情况很常见，引起了很多用户的共鸣。产生这个问题最主要原因是，<strong>代码合并太晚</strong>。这里，我再与你详细解释一下原因。</p><p>当多个人同时开发一款产品的时候，很可能会出现代码冲突。而解决冲突，需要花费较多的时间；同时很可能出现冲突解决失败，导致产品问题。</p><!-- [[[read_end]]] --><p>如果没有一个机制督促我们尽早把代码推到主仓进行集成的话，我们通常会尽量先在自己的分支上进行开发。结果往往是，在冲刺快要结束，或者功能即将发布时，才出现大量的代码合并。</p><p>而这时因为很长时间没有进行过代码集成了，进行集成的代码量通常比较大，不同开发者的代码区别很大，冲突也很严重，难以解决。具体的负面影响是：发布推迟，产品质量不高，每一次发布时的熬夜和紧张影响团队士气。</p><p>而持续集成的根本出发点，就是为了解决这个问题。也就是说，它能够帮助开发人员尽量早、尽量频繁地把自己的改动推送到共享的代码仓库分支上，进行代码集成，从而减少大量代码冲突造成的低效能问题。</p><p>所以，<strong>持续集成的定义就是：在团队协作中，一天内多次将所有开发人员的代码合并入同一条主干</strong>。</p><p>代码入库后，剩下工作是把代码编译打包成可以发布的形式，先发布到测试环境进行测试，再发布到类生产环境进行测试，最终部署到生产环境。</p><p>在这个过程中，有两个问题需要特别注意。</p><ul>\n<li>\n<p>首先，我们需要这个流程尽量频繁。如果我们能够把产品和功能尽快地发布到市场上，就能够更快地服务客户，以更快的试错速度寻找到用户，提供真正对客户有价值的功能。<br>\n即使你的产品由于自身特性不会太频繁地部署给用户，但这种能够频繁生产出可以马上部署的产品的能力，也能让你在需要部署时，快速完成任务。</p>\n</li>\n<li>\n<p>其次，在产品发布到不同环境的过程中，我们会发现一些在开发和持续集成中没有暴露的问题。如果在产品要正式发布时才发现这些问题，就会造成产品交付推迟，影响线上用户等情况，造成损失。针对这个情况，我们需要提前发现问题。</p>\n</li>\n</ul><p>而解决这两个问题，正是持续交付和持续部署的出发点。</p><p>持续交付的目标是，对每一个进入主干分支的代码提交，构建打包成为可以发布的产品。它的定义是：<strong>一种软件工程方法，在短周期内完成软件产品，以保证软件保持在随时可以发布的状态</strong>。也就是说，对每一个提交，把集成后的代码部署到“类生产环境”中进行验证。如果代码没有问题，后续可以手动部署到生产环境中。</p><p>而持续部署，则更进一步。它把持续交付产生的产品立即自动部署给用户，定义就是：<strong>将每一个代码提交，都构建出产品直接部署给用户使用。</strong></p><p>以上就是持续集成、持续交付与持续部署的作用和定义。在实现上，它们<strong>共同的本质</strong>是，让每一个变更都经过一条自动化的检验流水线，来检查每一个变更的质量，通过就进入下一个阶段。</p><p>这里的“下一个阶段”具体包括：代码并入主仓、产品进入测试环境、产品进入类生产环境、产品最终进入生产环境，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/97/09/97645a87eb8a83ef8d9ce59902b31109.jpg?wh=2472*1289\" alt=\"\"></p><center><span class=\"reference\">图1 CI/CD流水线示意图</span></center><p>你应该已经注意到了，整条流水线中，持续部署只是持续交付的最后一步，也就是自动化上线的那一步，前面的各种检查，都属于持续交付流水线。所以，<strong>我在后面的内容中再提到流水线时，CI/CD指的就是“持续集成/持续交付”。</strong></p><p>CI/CD流水线，能够大大提高代码入库的速度和质量，是这几年硅谷互联网公司做到高效研发的必要条件。接下来，我就与你介绍CI/CD流水线的具体原则以及最佳实践，然后以Facebook的具体实践为例帮助你加深理解。</p><p>需要注意的是，在这篇文章中，我会重点与你分享CI/CD流水线的搭建原则。而关于具体的搭建方式，通常是持续集成工具+代码仓管理系统+检查工具+测试工具，比如Jenkins+GitLab+SonarQube+Linter+UnitTest的组合。你可以参考这个<a href=\"https://www.jianshu.com/p/e111eb15da90\">链接</a>提供的方式去搭建。</p><h2>CI/CD流水线的具体原则以及最佳实践</h2><p>根据上面提到的3个“持续”的本质，要做到高效，有3条基本原则：</p><ul>\n<li>流水线的测试要尽量完整；</li>\n<li>流水线的运行速度一定要快；</li>\n<li>流水线使用的环境，尽量和生产环境一致。</li>\n</ul><h3>基本原则1：流水线的测试要尽量完整</h3><p>CI/CD流水线的测试只有尽量完整，代码和产品的质量才能有保证。所以，最主要的工程实践，就是在流水线中运行大量高质量的测试和检查。</p><p>Facebook就有大量的单元测试和集成测试用例、安全扫描，以及性能专项测试用例。如果某个验证在流水线中失败，开发人员会考虑是否要添加测试用例来防止再出现类似的问题。</p><p>另外，Facebook持续在测试用例的开发上投入。在内部工具团队，有一个专门的测试工具团队来建设测试框架和测试流程，方便开发人员自己开发测试用例。比如，我在Facebook那几年，他们就一直在改进JavaScript的Mock框架，对开发人员写测试用例来说非常方便。</p><h3>基本原则2：流水线的运行速度一定要快</h3><p>因为每一个变更都要通过CI/CD流水线的检验，所以流水线的速度关乎研发速度。而要提高这条流水线的速度，我们可以从以下两个方面考虑。</p><p>首先，从技术角度考虑。比如：</p><ul>\n<li>使用并行方式运行各种测试来提速；</li>\n<li>投入硬件资源，使用水平扩展的方式来提速；</li>\n<li>使用增量测试的方式进行精准验证。也就是说，只运行跟当前改动最相关的测试，以减少测试用例的运行数量。</li>\n</ul><p>其次，权衡流水线的运行速度、流水线资源和测试完整性的关系。不难理解，运行速度快、占用资源少、测试完整难以兼顾，因此我们必须做出权衡。这里我推荐几个方法：</p><ul>\n<li>如果通过增加硬件资源来提升运行速度需要的成本太高的话，可以对测试用例按优先级进行分类，每天运行流水线的时候，不用每次都运行所有测试用例，只选择其中几次进行全量测试。</li>\n<li>提供支持，让开发人员在本地也能运行这些测试，从而使用本地资源尽早发现问题，这就避免了一些有问题的提交占用流水线的资源，进而提高整条流水线的运行速度。</li>\n<li>运行测试的时候，按照一定的顺序运行测试用例。比如可以先运行速度快的用例，以及历史上容易发现问题的用例。这样可以尽早发现问题，避免耗费不必要的资源。</li>\n</ul><h3>基本原则3：流水线使用的环境，尽量和生产环境一致</h3><p>这里的环境，包括机器环境、数据、软件包、网络环境等。环境不一致可能导致问题暴露在用户面前，损失严重；另外，在非生产环境上难以复现生产环境的问题，调试困难。</p><p>保证流水线环境与生产环境一致，具体方法包括：</p><ul>\n<li>软件包最好只构建一次，保证各种不同环境都用同一个包。如果不同的运行环境需要不同的参数，可以采用环境变量的方式把这些参数传递给软件包。</li>\n<li>使用Docker镜像的方式，把发布的产品以及环境都打包进去，实现环境的一致性。在我看来，这正是Docker的最大好处。</li>\n<li>尽量使用干净的环境。比如，测试时，使用刚从镜像产生的系统；又比如，使用蓝绿部署，每次产生新的部署时，直接丢弃旧的环境。</li>\n</ul><p>以上就是CI/CD流水线的3个基本原则和最佳实践。通过提高验证的完整性、速度，以及保证环境的一致性，我们可以降低成本，提高产品质量和验证产品价值假设的速度。</p><p>接下来，为了帮助你理解并正确运用这些原则和最佳实践，我们一起来看看Facebook是怎么做的。</p><h2>具体案例：Facebook是如何实施CI/CD来提高效能的？</h2><p>Facebook一直就非常注重CI/CD，早在2009年就建设了顺畅的CI/CD流水线，而且一直在持续改进。</p><p><strong>在CI方面</strong>，加强建设持续开发，让开发人员能在开发环境上进行大量的验证。本地的所有验证，与CI流水线上的验证方式保持一致，这就大大提高了开发人员在本地发现问题的能力，从而大量避免了有问题的代码提交到CI流水线，浪费资源。</p><p>在<strong>代码入库的步骤</strong>，采用Phabricator作为CI的驱动，并作为质量检查中枢，尽量提高入库前代码审查的流畅性。在这个过程中，Facebook做到了以下几点：</p><ul>\n<li>测试的完整性。代码提交到Phabricator进行代码审查的同时，进行各种静态检查、单元测试、集成测试、安全测试，以及性能测试等。</li>\n<li>工具的集成。Phabricator提供的插件机制，可以跟其他系统和工具集成，以支持运行各种检查。</li>\n<li>沙盒环境。代码在提交到Phabricator进行审查时，Phabricator会自动产生一个沙盒环境。沙盒环境有两个好处：一是，可以让开发者之间进行联调；二是，可以让开发者并行地进行其他开发工作，因为在进行代码审查时，开发者的开发机器并没有被占用。</li>\n<li>高效的代码审查。比如，代码审查不通过时，代码作者可以方便地在原来的提交之上进行修改，并在下一轮审查时只进行增量代码的审查。这就大大降低了每次代码审查的交易成本，从而保证了CI的顺畅性。</li>\n</ul><p><strong>代码入库之后，进入持续交付步骤</strong>。Facebook使用大仓，同一个仓中每天有几千个代码提交，所以持续交付的挑战很大。他们有一个专门的发布工具团队，自研了一套发布工具来实现自动化流水线，通过以下两点比较好地实现了流水线资源和测试完整性的平衡。</p><ul>\n<li>\n<p>不针对每一个提交进行CD验证，而是按照一定时间间隔进行验证。因为提交太多，如果每个提交都进行构建打包，资源消耗实在太大，所以Facebook采用了按照一定时间间隔，比如，每10分钟进行一次构建打包。这就大大降低了资源的消耗，不过这里有个问题，在验证步骤发现Bug时，因为验证的是最近10分钟的所有提交，所以不能精准定位造成问题的提交。<br>\n针对这个问题，Facebook使用单主干开发分支方式，并强制在代码合并时，只能使用git rebase不能产生合并提交，所以提交历史是线性的，从而可以使用git bisect命令来自动化定位问题。这部分内容我会在下一篇文章中详细介绍。</p>\n</li>\n<li>\n<p>对验证进行分级。也就是说，有几条不同的CD流水线，按照不同的时间间隔运行构建和检验。根据运行时间间隔的不同，它们运行的检验数量以及检查出来的Bug优先级也不同。间隔时间越长，运行的检验越全面，检查出来的Bug优先级越高。</p>\n</li>\n</ul><p>这里需要说明的是，2017年以前，Facebook并没有把每一个在主干分支上成功通过流水线验证的软件包作为发布候选，而是在每周五的固定时间，从主干分支上拉出一个发布分支，稳定3天后上线。也就是说，这并不是严格意义上的持续交付。这是因为当时的自动化检验还不能确保产品达到上线要求。其实，这对很多公司来说都很常见，都需要一些额外的测试和检验来确保上线产品的质量。</p><p>最后，是<strong>持续部署</strong>的操作。在2017年以前，Facebook并没有持续部署，而是采用的每周全量代码部署的方式。但到2017年，因为代码提交实在太多，每次周部署代码，处理的提交量会超过10000，需要很长时间才能稳定发布分支，所以Facebook转向了持续部署。</p><p>具体的方法是，极致地进行自动化测试验证。关于实施细节，你可以参考Facebook的第一个发布工程师Chuck Rossi对<a href=\"https://code.fb.com/developer-tools/rapid-release-at-massive-scale/\">持续部署流程的描述</a>。</p><p>值得一提的是，跟持续交付一样，Facebook的持续部署也不是纯粹的持续部署。因为代码提交太多，他们并没有每个提交都单独部署，而是采用类似持续交付的方法，把一段时间之内的提交一起部署。这种<strong>不教条的方式，是我从Facebook学到的一个重要的做事方法。</strong></p><h2>小结</h2><p>Facebook在CI/CD上做到了极致，对每一个代码提交都高效地运行大量的测试、验证，并采用测试分层、定时运行等方式尽量降低资源消耗。正因为如此，他们能够让几千名开发人员共同使用一个大代码仓，并使用主干开发，产生高质量的产品，从而实现了超大研发团队协同下的高效能。</p><p>在前面几篇文章中，我们多次提到“持续”。这个词，近些年在软件研发中比较流行，比如我今天与你分享的持续集成、持续交付、持续部署，加上持续开发，一共有4个了。</p><p>实际上，在CI/CD流水线中，<strong>做为流水线的一部分，测试一直在运行并最快地给开发者提供反馈</strong>。这正是另一个“持续”，也就是“持续测试”的定义。</p><p>“持续”如此重要的原因是，软件开发是一个流程，只有让这个流程持续运转才能高效。这里我把这5个持续都列举出来，方便你复习、参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/06/7df32f45bdf6890cfc1198184b2f3b06.jpg?wh=2475*1499\" alt=\"\"></p><center><span class=\"reference\">图2 5个“持续”方法定义与关键点对比</span></center><h2>思考题</h2><ol>\n<li>在几千名开发人员共同使用一个大代码仓的工作方式下，做好CI有很大的挑战性。你觉得挑战在哪里，容易出现什么样的问题，又应该怎么解决呢？</li>\n<li>今天我提到了持续开发在CI中的作用，请你结合上一篇文章，思考一下持续开发和CI/CD是怎样互相促进的。</li>\n</ol><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！</p><p></p>","comments":[{"had_liked":false,"id":131082,"user_name":"刘晓光","can_delete":false,"product_type":"c1","uid":1142413,"ip_address":"","ucode":"BA910B9358F143","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/8d/e07c8b7c.jpg","comment_is_top":false,"comment_ctime":1567640992,"is_pvip":false,"replies":[{"id":"50016","content":"第七篇文章会有一些相关讨论。希望对你能有些帮助。有问题继续讨论 ：）","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567789548,"ip_address":"","comment_id":131082,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44517313952","product_id":100034501,"comment_content":"最大的困难有三个都在人的工作习惯上：有效且同期建设的单元测试;每天至少一次的push代码；轻量级频繁的code review<br>","like_count":10,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466279,"discussion_content":"第七篇文章会有一些相关讨论。希望对你能有些帮助。有问题继续讨论 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567789548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390701,"avatar":"https://static001.geekbang.org/account/avatar/00/15/38/6d/4efc1bea.jpg","nickname":"在水一方","note":"","ucode":"07E701E95BF91B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7909,"discussion_content":"真知灼见，深有同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567727115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133034,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1568332196,"is_pvip":true,"replies":[{"id":"50965","content":"非常好的答案！一点我的想法：<br><br>&gt; ...首先是要改善团队文化，鼓励大家频繁提交，<br>这个推荐实时文章中的思路和办法<br><br>&gt; ...而不是只在每天下班前提交一次...<br>是的。这个应该是做原子性的提交。做好一个马上就提交。而不是每天提一次的。另外，如果Commit比较大，可以每天都`git fetch; git rebase`一次，把最近一天的冲突在本地解决，然后继续在本地开发，直到commit 做完再提交<br>","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1568365836,"ip_address":"","comment_id":133034,"utype":1}],"discussion_count":1,"race_medal":1,"score":"23043168676","product_id":100034501,"comment_content":"1. 在几千名开发人员共同使用一个大代码仓的工作方式下，做好 CI 有很大的挑战性。你觉得挑战在哪里，容易出现什么样的问题，又应该怎么解决呢？<br>最大的挑战有两个：1. 代码冲突如何处理。2. 模块之间的依赖如何解决。<br>对于1，首先是要改善团队文化，鼓励大家频繁提交，而不是只在每天下班前提交一次，其次，出现冲突，需要开发人员自己解决，这部分在做plan，最好能预留一些buffer，不然大家都在赶进度，都不会愿意去做，容易拖到最后，更不容易解决。<br>对于2，模块之间尽量松耦合，要保证模块之间的接口是稳定的。<br><br><br>2. 今天我提到了持续开发在 CI 中的作用，请你结合上一篇文章，思考一下持续开发和 CI&#47;CD 是怎样互相促进的。<br>CI&#47;CD的快速反馈，对于持续开发来说，是一个正向激励的作用，让开发人员对于正在开发的功能更有信心。","like_count":5,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467228,"discussion_content":"非常好的答案！一点我的想法：\n\n&amp;gt; ...首先是要改善团队文化，鼓励大家频繁提交，\n这个推荐实时文章中的思路和办法\n\n&amp;gt; ...而不是只在每天下班前提交一次...\n是的。这个应该是做原子性的提交。做好一个马上就提交。而不是每天提一次的。另外，如果Commit比较大，可以每天都`git fetch; git rebase`一次，把最近一天的冲突在本地解决，然后继续在本地开发，直到commit 做完再提交\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568365836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131060,"user_name":"于小咸","can_delete":false,"product_type":"c1","uid":1640946,"ip_address":"","ucode":"833D5E92016430","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","comment_is_top":false,"comment_ctime":1567613328,"is_pvip":false,"replies":[{"id":"49942","content":"对的。不过一般中间哪一个pull是使用fetch。因为pull会自动merge。所以，<br>add &#47;rm -&gt;commit -&gt;fetch -&gt;rebase -&gt;push","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567785914,"ip_address":"","comment_id":131060,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23042449808","product_id":100034501,"comment_content":"使用git rebase的话，具体操作流程应该是<br>add &#47;rm -&gt;commit -&gt;pull -&gt;rebase -&gt;push<br>这样子对吗","like_count":5,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466268,"discussion_content":"对的。不过一般中间哪一个pull是使用fetch。因为pull会自动merge。所以，\nadd /rm -&amp;gt;commit -&amp;gt;fetch -&amp;gt;rebase -&amp;gt;push","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567785914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1709119,"avatar":"","nickname":"Geek_PaaS","note":"","ucode":"6D50BBC9CA723E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220340,"discussion_content":"Pull 加 —rebase 参数 就不会合并代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585845724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189249,"user_name":"Lu","can_delete":false,"product_type":"c1","uid":1639109,"ip_address":"","ucode":"8CF7243FC3D328","user_header":"https://static001.geekbang.org/account/avatar/00/19/02/c5/301c1712.jpg","comment_is_top":false,"comment_ctime":1584493035,"is_pvip":false,"replies":[{"id":"73371","content":"这个可以从几个方面入手：<br>1. 提高安全检查时间。如果能做到增量代码检查（只检查改变的代码涉及的部分）就可以大大提高效率<br>2. 降低运行安全检查的频率。参考第六篇文章的“基本原则 2：流水线的运行速度一定要快”部分。我们可以考虑不要对每一个代码入库都运行安全漏洞检查，而是每个一段时间运行一次。如果发现问题再从上一次检查的提交到这一次检查的提交之间用折半查找去找到有问题的提交进行修复。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1584762564,"ip_address":"","comment_id":189249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174427627","product_id":100034501,"comment_content":"老师您好～ 我所在的组织在尝试CICD流水线从而实现云上部署。CI流水线这一步每次都会有安全漏洞检查，单这个检查本身耗时很久，而且还需要等待排队，解决这个问题可以从哪些方面入手呢？谢谢。","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487647,"discussion_content":"这个可以从几个方面入手：\n1. 提高安全检查时间。如果能做到增量代码检查（只检查改变的代码涉及的部分）就可以大大提高效率\n2. 降低运行安全检查的频率。参考第六篇文章的“基本原则 2：流水线的运行速度一定要快”部分。我们可以考虑不要对每一个代码入库都运行安全漏洞检查，而是每个一段时间运行一次。如果发现问题再从上一次检查的提交到这一次检查的提交之间用折半查找去找到有问题的提交进行修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584762564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203729,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1586260342,"is_pvip":false,"replies":[{"id":"77959","content":"是的，只有一部分公司需要持续部署。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1587400332,"ip_address":"","comment_id":203729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881227638","product_id":100034501,"comment_content":"终于搞懂了持续交付和持续部署的区别，主要就是前者仅限于非生产环境，目的是随时随地提供可部署的软件；后者则是直接部署到生产环境中。看老师的观点，也就是提交量很大的情况才会考虑到持续部署。鉴于我们公司的提交量还处于excel checklist的可以摆平的状况，持续部署应该在很长的时间内不需要我去担心了……重点关注持续集成和持续交付上","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490942,"discussion_content":"是的，只有一部分公司需要持续部署。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587400332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175276,"user_name":"GeekJ","can_delete":false,"product_type":"c1","uid":1681569,"ip_address":"","ucode":"834F26FC04F8B1","user_header":"","comment_is_top":false,"comment_ctime":1580639307,"is_pvip":false,"replies":[{"id":"69039","content":"触发主要是1. 代码进入代码检查中心Phabricator。实际上Phabricator是流水线的神经中枢。代码入库之前，开发者会把改动发送到Phabricator，这会触发代码审查和机器检查流水线。2. 代码入库（git server）后Phabricator会监控到，然后出发各种流水线。3. 同时流水线还有定时的触发。比如每隔一段时间构建、运行测试、部署到一个测试环境上。<br><br>改进、融合的工作主要是工程师团队和Infrastructure团队共同推动。工程师团队会有需求，他们可以自己改进，当然更多是Infrastructure团队改进。Infrastructure团队也会考虑改进。工具部门就是Infra的一部分。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1581533001,"ip_address":"","comment_id":175276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5875606603","product_id":100034501,"comment_content":"您好，我想请问在Facebook管理协作中，整个流水线的衔接、协作、融合、改进，是谁来推动的呢？或如何触发的呢？","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482674,"discussion_content":"触发主要是1. 代码进入代码检查中心Phabricator。实际上Phabricator是流水线的神经中枢。代码入库之前，开发者会把改动发送到Phabricator，这会触发代码审查和机器检查流水线。2. 代码入库（git server）后Phabricator会监控到，然后出发各种流水线。3. 同时流水线还有定时的触发。比如每隔一段时间构建、运行测试、部署到一个测试环境上。\n\n改进、融合的工作主要是工程师团队和Infrastructure团队共同推动。工程师团队会有需求，他们可以自己改进，当然更多是Infrastructure团队改进。Infrastructure团队也会考虑改进。工具部门就是Infra的一部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581533001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134245,"user_name":"詩鴻","can_delete":false,"product_type":"c1","uid":1649820,"ip_address":"","ucode":"DBB3861606E0E7","user_header":"https://static001.geekbang.org/account/avatar/00/19/2c/9c/6c64975a.jpg","comment_is_top":false,"comment_ctime":1568782219,"is_pvip":false,"replies":[{"id":"53072","content":"这篇文章有不错的权衡列表：<br>https:&#47;&#47;dev.to&#47;pavanbelagatti&#47;what-do-you-prefer-and-why-mono-repo-or-multiple-repositories-401b<br><br>从我的经验看，大仓的最大挑战是代码仓太大之后，会让很多操作性能下降。而git本身对代码仓中的子文件夹的支持不好。如果能克服这个挑战，使用大仓非常好！<br><br>一些推荐的解决办法：<br>https:&#47;&#47;www.perforce.com&#47;blog&#47;hth&#47;multiple-git-repositories-whats-best-way-manage-them","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1569981514,"ip_address":"","comment_id":134245,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5863749515","product_id":100034501,"comment_content":"使用大仓和组件化多仓的权衡关键主要是什么呢？","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467670,"discussion_content":"这篇文章有不错的权衡列表：\nhttps://dev.to/pavanbelagatti/what-do-you-prefer-and-why-mono-repo-or-multiple-repositories-401b\n\n从我的经验看，大仓的最大挑战是代码仓太大之后，会让很多操作性能下降。而git本身对代码仓中的子文件夹的支持不好。如果能克服这个挑战，使用大仓非常好！\n\n一些推荐的解决办法：\nhttps://www.perforce.com/blog/hth/multiple-git-repositories-whats-best-way-manage-them","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569981514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237199,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e0/cf/43f201f2.jpg","nickname":"幼儿编程教学","note":"","ucode":"F13F3150E6CAE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374317,"discussion_content":"大仓还有个问题，就是权限不好控制吧。不过，我是喜欢大仓的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621134264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130810,"user_name":"Geek_93f953","can_delete":false,"product_type":"c1","uid":1639240,"ip_address":"","ucode":"655D93FCAF5400","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLPiafPkfZZg8xmrTkUiadHuBiaPticg6wUvOqkCicJTZE3LLL0TIiaWOX0tkRrSsJkOGsauYLHVauI2nQ/132","comment_is_top":false,"comment_ctime":1567555953,"is_pvip":false,"replies":[{"id":"50507","content":"嗯，可以这么理解。测试能力越强，可以自动化保证质量的地方就更多，就可以更快！","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1568036375,"ip_address":"","comment_id":130810,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862523249","product_id":100034501,"comment_content":"持续集成、持续交付、持续部署的核心区别在我看来是自动化测试能力：<br>CI 每天多次将多人开发的代码合并到主干，并进行构建、代码检查、冒烟测试<br>CDelivery 自动将CI的结果打包、在测试环境和类生产环境进行自动化测试<br>CDeploy 自动将CDelivery的结果进行回归测试，并按照预设的灰度策略部署到生产环境","like_count":1,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466140,"discussion_content":"嗯，可以这么理解。测试能力越强，可以自动化保证质量的地方就更多，就可以更快！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568036375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345294,"user_name":"我是xd","can_delete":false,"product_type":"c1","uid":1731419,"ip_address":"","ucode":"814EA986AD9B02","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6b/5b/6d3ad7a3.jpg","comment_is_top":false,"comment_ctime":1652176514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652176514","product_id":100034501,"comment_content":"目前经常说的CI CD主要是指持续集成、持续交付。持续部署一般公司都有固定的发布大版本的时间，不会频繁发布线上，除了紧急的hotfix。<br><br>持续集成是指开发频繁提交本地的开发代码到主干分支上进行代码集成，避免所有开发同一时间提交大量代码产生的代码冲突问题<br><br>持续交付是指对开发持续提交的代码发布到测试环境测试，测试通过后发布预发环境测试，确保每次提交后最新的主干分支验证通过保持可上线状态<br>","like_count":0},{"had_liked":false,"id":279340,"user_name":"小包","can_delete":false,"product_type":"c1","uid":1048402,"ip_address":"","ucode":"A2D123BDFB15B5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/52/093bb1a1.jpg","comment_is_top":false,"comment_ctime":1613724960,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1613724960","product_id":100034501,"comment_content":"Facebook 就有大量的单元测试和集成测试用例、安全扫描，以及性能专项测试用例<br>------<br>集成测试、安全测试、性能测试这些测试用例facebook是哪个角色完成的呢？<br>","like_count":0},{"had_liked":false,"id":271767,"user_name":"Geek_0939f6","can_delete":false,"product_type":"c1","uid":1796491,"ip_address":"","ucode":"64DA9CBD3C273B","user_header":"","comment_is_top":false,"comment_ctime":1609805166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609805166","product_id":100034501,"comment_content":"问题1最大困难是代码提交都会卡在最后时刻，不管如何强调必须提前合并但是还是不被遵循，最后导致code reviews时间压缩，review不了了之流于形式","like_count":0},{"had_liked":false,"id":209459,"user_name":"oliver","can_delete":false,"product_type":"c1","uid":1505929,"ip_address":"","ucode":"980EBABF71AFBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","comment_is_top":false,"comment_ctime":1587552660,"is_pvip":false,"replies":[{"id":"78687","content":"这个跟平时的改动差不多呀，就针对每一处改动，找到相关的依赖，都运行测试。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1588012825,"ip_address":"","comment_id":209459,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587552660","product_id":100034501,"comment_content":"增量测试有个问题，如果是较大范围的代码重构，如何确定增量测试的边界呢？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492807,"discussion_content":"这个跟平时的改动差不多呀，就针对每一处改动，找到相关的依赖，都运行测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588012825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194131,"user_name":"墨灵","can_delete":false,"product_type":"c1","uid":1409700,"ip_address":"","ucode":"185D70CA20BEEE","user_header":"https://static001.geekbang.org/account/avatar/00/15/82/a4/a92c6eca.jpg","comment_is_top":false,"comment_ctime":1585029120,"is_pvip":false,"replies":[{"id":"75898","content":"CI 非常有效。推荐搞起来。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1586139527,"ip_address":"","comment_id":194131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585029120","product_id":100034501,"comment_content":"我现在的公司还没有CI&#47;CD，看来要花时间搞起来，小公司很多东西都是不规范的。","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488765,"discussion_content":"CI 非常有效。推荐搞起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586139527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171478,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1578928336,"is_pvip":false,"replies":[{"id":"66629","content":"&gt; Fb会做增量单元测试或自动化测试吗？<br>如果大仓不做增量测试增量检查的话，效率就会极低。所以FB大量使用这样的实践。在本地运行的测试和检查基本上全是增量的。流水线上的也有相当一部分是只运行增量检查。<br><br>&gt; 她们包含部署和自动化测试的流水线的耗时大概是多少？<br>本地检查一分钟。本地就可以构建跟生产比较一致的环境。所以反馈效率很高。CI实践会长一些，大概一二十分钟。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1579020304,"ip_address":"","comment_id":171478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578928336","product_id":100034501,"comment_content":"大仓库的缺点1.cu的执行效率可能有影响，代码获取，单元测试等全面检查等耗时长;2.代码的分支管理和合并复杂<br>Fb会做增量单元测试或自动化测试吗？她们包含部署和自动化测试的流水线的耗时大概是多少？我们面临的问题是部署时间5～10分钟，极大影响的反馈效率","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481372,"discussion_content":"&amp;gt; Fb会做增量单元测试或自动化测试吗？\n如果大仓不做增量测试增量检查的话，效率就会极低。所以FB大量使用这样的实践。在本地运行的测试和检查基本上全是增量的。流水线上的也有相当一部分是只运行增量检查。\n\n&amp;gt; 她们包含部署和自动化测试的流水线的耗时大概是多少？\n本地检查一分钟。本地就可以构建跟生产比较一致的环境。所以反馈效率很高。CI实践会长一些，大概一二十分钟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579020304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140412,"user_name":"宝宝太喜欢极客时间了","can_delete":false,"product_type":"c1","uid":1215152,"ip_address":"","ucode":"9CDB679C257612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOGZ6lbHiboIZMN9USbeutnmCWBahVLtSlKlIENKvrZQCUQzpzeZQOxTntIkBUeDk6qZUPdqmfKrQ/132","comment_is_top":false,"comment_ctime":1570933797,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1570933797","product_id":100034501,"comment_content":"我再jenkins+gitlab+sonar做集成的时候，想通过Merge Requests触发代码检查，并且只检查请求合并的代码，这样能实现吗？有没有实现的教程可推荐呢？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129655,"discussion_content":"这篇文章有基本的配置介绍：https://linuxhandbook.com/ci-with-gitlab-jenkins-and-sonarqube/   \n\nmerge-request 触发比较容易，在gitlab中方便配置。但是只检查请求合并的代码好像没有现成的工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578724351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41934,"discussion_content":"drone的webhook可以监听部分事件。比如你说的这个合并请求。\n但是只检查请求合并的代码，这个看你怎么理解了。\n只检查变动的代码行，估计不好弄，也没太大意义吧。毕竟有些东西组合起来才能实现功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572535736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1171449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL40CYbBtPXNzH9iatW8pdfsGR321dgzicIujfa0fyEh0KsowmrEBsLcznZ4A0SichgECtOib3SsyU6jg/132","nickname":"豢龙氏","note":"","ucode":"7F50E0EE2CFC5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39234,"discussion_content":"我们也准备用Merge Request做代码评审的点，但又想代码评审前先做静态代码检查，应该可以用Gitlab的Webhook在Merge Request创建或者merged时触发Jenkins来调用SonarCube做代码检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571908969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36740,"discussion_content":"实现应该是可以的。不过我没有现成的工具或者教程。我先去做点调研。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571411974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134055,"user_name":"高倩","can_delete":false,"product_type":"c1","uid":1165965,"ip_address":"","ucode":"CE8E14E771B799","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/8d/4ebf66a6.jpg","comment_is_top":false,"comment_ctime":1568729143,"is_pvip":false,"replies":[{"id":"52584","content":"&gt; ...但是上线以后，还是会存在没有考虑到的历史存量用户因为长期的业务累积...","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1569603930,"ip_address":"","comment_id":134055,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1568729143","product_id":100034501,"comment_content":"比如，一个需求是基于用户不同状态来衍生出来的需求。测试过程中，需要考虑各种用户可能存在的状态扭转，以及对应的测试。但是上线以后，还是会存在没有考虑到的历史存量用户因为长期的业务累积，出现了预期之外的状态。导致代码上线以后，需要回滚。<br><br>再者，因为是多个端开发实现，上线时有一定的顺序上线，那比如等到中间上线的应用出现了问题。再想要回滚时，可能因为数据库数据被更改了的原因，导致无法回滚。后续就只能通过修复代码，或者修复数据库的办法才能解决","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467604,"discussion_content":"&amp;gt; ...但是上线以后，还是会存在没有考虑到的历史存量用户因为长期的业务累积...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569603930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22273,"discussion_content":"> ...但是上线以后，还是会存在没有考虑到的历史存量用户因为长期的业务累积，出现了预期之外的状态。...\n测试右移的方式对这个应该有帮助。比如，采用流量复制在生产环境中测试。第18篇文章会详细介绍。\n\n> ...可能因为数据库数据被更改了的原因，导致无法回滚。后续就只能通过修复代码，或者修复数据库的办法才能解决...\n这个实际上是很常见的问题。很多情况下都是难以回滚而是进行修复的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569604264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133510,"user_name":"lisa","can_delete":false,"product_type":"c1","uid":1508049,"ip_address":"","ucode":"62CB6333CBF7B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLw3jpao45frZibQIAicWBfc7ofgrm5gJLiaFQSj5u2DDvkjy3ia5goicJLJlgVtZ0HryiaXb2VqpTSQT5Q/132","comment_is_top":false,"comment_ctime":1568595891,"is_pvip":false,"replies":[{"id":"52579","content":"这个问题答案我不是100%确定。应该是集成在工程里面随CI流程触发的。而且并不是每一个CI都触发，因为比较昂贵和耗时。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1569603123,"ip_address":"","comment_id":133510,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568595891","product_id":100034501,"comment_content":"请问facebook的性能测试平台和ci流程是怎么结合的？有专门的平台，还是这部分测试代码和单侧代码一样也是集成在工程里面随ci流程触发？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467409,"discussion_content":"这个问题答案我不是100%确定。应该是集成在工程里面随CI流程触发的。而且并不是每一个CI都触发，因为比较昂贵和耗时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569603123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131288,"user_name":"师傅又被抓走了","can_delete":false,"product_type":"c1","uid":1027477,"ip_address":"","ucode":"4BA45F363F9BD9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/95/2d248ac2.jpg","comment_is_top":false,"comment_ctime":1567694491,"is_pvip":false,"replies":[{"id":"49947","content":"请参考对Weining Cao问题的回复。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567786365,"ip_address":"","comment_id":131288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567694491","product_id":100034501,"comment_content":"1 .在几千名开发人员共同使用一个大代码仓的工作方式下，做好 CI 有很大的挑战性。你觉得挑战在哪里，容易出现什么样的问题，又应该怎么解决呢？<br>容易出现代码合并冲突。出现冲突时的处理策略，回退or丢弃？冲突时，如何保证后续提交，可以正常合入？<br>功能依赖。功能模块大都不是独立的，如何保证双方一同合入？<br>代码功能冲突，大量冗余代码，一些功能可能会出现重复定义。<br><br>解决方案（我也不清楚，感觉需要一个好的架构师）","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466372,"discussion_content":"请参考对Weining Cao问题的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567786365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131257,"user_name":"Weining Cao","can_delete":false,"product_type":"c1","uid":1026955,"ip_address":"","ucode":"6E3DB699A41518","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/8b/fdb853c4.jpg","comment_is_top":false,"comment_ctime":1567682144,"is_pvip":false,"replies":[{"id":"49945","content":"&gt; 挑战在如何快速解决合并冲突。<br>开发人员自己解决。提交做到原子性有很大帮助。<br><br>&gt; 如何快速同步开发机器的代码保持最新。<br>经常`git fetch; git rebase origin&#47;master`。<br><br>&gt; 还有如果测试失败如何快速回滚。<br>1. 减少入库时的测试失败：多使用本地测试<br>2. 入origin&#47;master库之后不会滚。写修复提交再赶紧push上去。实在不行，`git revert`命令产生一个新提交push上去。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567786202,"ip_address":"","comment_id":131257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567682144","product_id":100034501,"comment_content":"挑战在如何快速解决合并冲突。如何快速同步开发机器的代码保持最新。还有如果测试失败如何快速回滚。","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466353,"discussion_content":"&amp;gt; 挑战在如何快速解决合并冲突。\n开发人员自己解决。提交做到原子性有很大帮助。\n\n&amp;gt; 如何快速同步开发机器的代码保持最新。\n经常`git fetch; git rebase origin/master`。\n\n&amp;gt; 还有如果测试失败如何快速回滚。\n1. 减少入库时的测试失败：多使用本地测试\n2. 入origin/master库之后不会滚。写修复提交再赶紧push上去。实在不行，`git revert`命令产生一个新提交push上去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567786202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130932,"user_name":"于小咸","can_delete":false,"product_type":"c1","uid":1640946,"ip_address":"","ucode":"833D5E92016430","user_header":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","comment_is_top":false,"comment_ctime":1567579435,"is_pvip":false,"replies":[{"id":"50534","content":"我见到比较有效的方法是通过职责定位解决：每个团队对自己的模块负责，并不要求测试覆盖率。就是这么简单的办法就很有效。<br><br>比如，如果模块A依赖于模块B，那么首先A的作者会有意愿写一些针对A调用B的集成测试，因为这样的自动化方便在A的开发过程中，确保A的运行正确。<br><br>同样的，如果发现B有问题，B的作者会有意愿给B写单元测试和接口测试。因为在A的测试失败找到是B的责任时，B的自动化测试可以节省B的作者的Debug时间。<br><br>这样的方式，你觉得在你的团队会有成效吗？","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1568047795,"ip_address":"","comment_id":130932,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567579435","product_id":100034501,"comment_content":"怎样提高自动测试的覆盖率和性能，会是很大的挑战，各模块开发者对其他模块不熟悉，发生bug的机率较高，测试覆盖到位比较难。<br><br>业务变化过程中，及时发现不必要的测试，提高测试性能也比较重要。","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466201,"discussion_content":"我见到比较有效的方法是通过职责定位解决：每个团队对自己的模块负责，并不要求测试覆盖率。就是这么简单的办法就很有效。\n\n比如，如果模块A依赖于模块B，那么首先A的作者会有意愿写一些针对A调用B的集成测试，因为这样的自动化方便在A的开发过程中，确保A的运行正确。\n\n同样的，如果发现B有问题，B的作者会有意愿给B写单元测试和接口测试。因为在A的测试失败找到是B的责任时，B的自动化测试可以节省B的作者的Debug时间。\n\n这样的方式，你觉得在你的团队会有成效吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568047795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640946,"avatar":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","nickname":"于小咸","note":"","ucode":"833D5E92016430","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8837,"discussion_content":"团队对模块负责，确实是避免业务不熟悉的好办法，也能减少开发者debug的时间，提高整体效率。不过如果开发者没有测试习惯的话，会觉得做测试是在浪费自己精力。开发的编程意识还是要不断更新的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568080010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130865,"user_name":"Johnson","can_delete":false,"product_type":"c1","uid":1225037,"ip_address":"","ucode":"55B582953E49F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/4d/10c75b34.jpg","comment_is_top":false,"comment_ctime":1567561621,"is_pvip":false,"replies":[{"id":"48991","content":"这个可能需要科学上网","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567573870,"ip_address":"","comment_id":130865,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567561621","product_id":100034501,"comment_content":"持续部署的描述那个链接打不开了","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466164,"discussion_content":"这个可能需要科学上网","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567573870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130855,"user_name":"飞奔的骆驼","can_delete":false,"product_type":"c1","uid":1067887,"ip_address":"","ucode":"C0D3C893CCD8A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/6f/ce96496d.jpg","comment_is_top":false,"comment_ctime":1567560222,"is_pvip":false,"replies":[{"id":"50533","content":"&gt; 持续序列流水线中进去下一个节点的标准是什么，<br>所有的自动化测试通过。<br><br>&gt; 实操中难点是，大家对自动化的结果没有信心，如何做到呢？<br>既然要使用流水线，我觉得只有逐步建设自动化测试。测试比较有效，大家才能真正用起来。否则这个流水线的价值就不大。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1568047214,"ip_address":"","comment_id":130855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567560222","product_id":100034501,"comment_content":"持续序列流水线中进去下一个节点的标准是什么，实操中难点是，大家对自动化的结果没有信心，如何做到呢？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466156,"discussion_content":"&amp;gt; 持续序列流水线中进去下一个节点的标准是什么，\n所有的自动化测试通过。\n\n&amp;gt; 实操中难点是，大家对自动化的结果没有信心，如何做到呢？\n既然要使用流水线，我觉得只有逐步建设自动化测试。测试比较有效，大家才能真正用起来。否则这个流水线的价值就不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568047214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130839,"user_name":"高倩","can_delete":false,"product_type":"c1","uid":1165965,"ip_address":"","ucode":"CE8E14E771B799","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/8d/4ebf66a6.jpg","comment_is_top":false,"comment_ctime":1567558870,"is_pvip":false,"replies":[{"id":"50007","content":"能举一个“线上故障都出现在一些没有预估到的流程”具体又脱敏的例子吗？","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567789354,"ip_address":"","comment_id":130839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567558870","product_id":100034501,"comment_content":"大公司对接的业务复杂多变，很多线上故障都出现在一些没有预估到的流程。如何提高CI，如何全面自动化覆盖回归，这个是个很大的挑战。","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466148,"discussion_content":"能举一个“线上故障都出现在一些没有预估到的流程”具体又脱敏的例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567789354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130801,"user_name":"李双","can_delete":false,"product_type":"c1","uid":1063119,"ip_address":"","ucode":"5148D07BDDBB46","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/cf/f2c7d021.jpg","comment_is_top":false,"comment_ctime":1567554945,"is_pvip":false,"replies":[{"id":"50026","content":"赞同加牛不辣的观点。补充一点，在小公司的时候，流程和规范应该比大公司少一些，更加灵活一些。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567789816,"ip_address":"","comment_id":130801,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1567554945","product_id":100034501,"comment_content":"大公司的流程就是规范哈。如果一个小公司几十人的团队，是不是没必要搞这么多自动化，流程化，规范化。。。？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466136,"discussion_content":"赞同加牛不辣的观点。补充一点，在小公司的时候，流程和规范应该比大公司少一些，更加灵活一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567789816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/7a/44877992.jpg","nickname":"加牛不辣","note":"","ucode":"34B7F0F4B4A675","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7535,"discussion_content":"这和团队大小其实没啥关系，团队人少资源少可以用现有的工具。在前期定好规范搭好自动化的流程后，未来的收益会很明显。人少推动起来更方便","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567559393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1640946,"avatar":"https://static001.geekbang.org/account/avatar/00/19/09/f2/6ed195f4.jpg","nickname":"于小咸","note":"","ucode":"833D5E92016430","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1216890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/7a/44877992.jpg","nickname":"加牛不辣","note":"","ucode":"34B7F0F4B4A675","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7583,"discussion_content":"很同意你的观点，虽然前期部署自动化收益不明显，但团队变大时发现问题处处制约，再想推动起来成本就变高了，造成不必要的内耗，制约团队的成长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7535,"ip_address":""},"score":7583,"extra":""},{"author":{"id":1063119,"avatar":"https://static001.geekbang.org/account/avatar/00/10/38/cf/f2c7d021.jpg","nickname":"李双","note":"","ucode":"5148D07BDDBB46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1216890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/7a/44877992.jpg","nickname":"加牛不辣","note":"","ucode":"34B7F0F4B4A675","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8294,"discussion_content":"当面对任务的压力，面对人少的场面！专门抽出人来搞这些。。。  制度决定下线，素质决定上线！觉得需要权衡其中的度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567904945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7535,"ip_address":""},"score":8294,"extra":""},{"author":{"id":1216890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/7a/44877992.jpg","nickname":"加牛不辣","note":"","ucode":"34B7F0F4B4A675","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063119,"avatar":"https://static001.geekbang.org/account/avatar/00/10/38/cf/f2c7d021.jpg","nickname":"李双","note":"","ucode":"5148D07BDDBB46","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8382,"discussion_content":"这肯定是要权衡一个度的，人少流程规范也简单，那自动化工具自然也简单。这些工具就和代码、产品一样是可以迭代、优化的，做过 MVP 就好不需要一开始就做个大而全的。不过说到底还是看团队的技术氛围和理念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567989402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8294,"ip_address":""},"score":8382,"extra":""}]}]},{"had_liked":false,"id":130788,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1567552623,"is_pvip":false,"replies":[{"id":"49966","content":"持续集成是在持续交付里面的。持续部署，要看具体语境中，持续部署具体怎么定义的（方法论的东西比较tricky）。","user_name":"作者回复","user_name_real":"葛俊 Jason","uid":"1030244","ctime":1567787959,"ip_address":"","comment_id":130788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567552623","product_id":100034501,"comment_content":"持续交付36讲专栏中说到持续交付包含持续集成和持续部署，老师你怎么看？","like_count":0,"discussions":[{"author":{"id":1030244,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/64/43a83f69.jpg","nickname":"葛俊 Jason","note":"","ucode":"4ECC8F8F64F473","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466127,"discussion_content":"持续集成是在持续交付里面的。持续部署，要看具体语境中，持续部署具体怎么定义的（方法论的东西比较tricky）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567787959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}