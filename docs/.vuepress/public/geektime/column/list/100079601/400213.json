{"id":400213,"title":"27 | 权限模型：5大权限模型是如何进行资源授权的？","content":"<p>你好，我是孔令飞。在开始讲解如何开发服务之前，我先来介绍一个比较重要的背景知识：权限模型。</p><p>在你的研发生涯中，应该会遇到这样一种恐怖的操作：张三因为误操作删除了李四的资源。你在刷新闻时，也可能会刷到这么一个爆款新闻：某某程序员删库跑路。操作之所以恐怖，新闻之所以爆款，是因为这些行为往往会带来很大的损失。</p><p>那么如何避免这些风险呢？答案就是对资源做好权限管控，这也是项目开发中绕不开的话题。腾讯云会强制要求所有的云产品都对接 <a href=\"https://cloud.tencent.com/document/product/598/10583\">访问管理（CAM）</a> 服务（阿里云也有这种要求），之所以这么做，是因为保证资源的安全是一件非常非常重要的事情。</p><p>可以说，保证应用的资源安全，已经成为一个应用的必备能力。作为开发人员，你也一定要知道如何保障应用的资源安全。那么如何才能保障资源的安全呢？我认为你至少需要掌握下面这两点：</p><ul>\n<li><strong>权限模型：</strong>你需要了解业界成熟的权限模型，以及这些模型的适用场景。只有具备足够宽广的知识面和视野，我们才能避免闭门造车，设计出优秀的资源授权方案。</li>\n<li><strong>编码实现：</strong>选择或设计出了优秀的资源授权方案后，你就要编写代码实现该方案。这门课的 IAM 应用，就是一个资源授权方案的落地项目。你可以通过对 IAM 应用的学习，来掌握如何实现一个资源授权系统。</li>\n</ul><!-- [[[read_end]]] --><p>无论是第一点还是第二点，都需要你掌握基本的权限模型知识。那么这一讲，我就来介绍下业界优秀的权限模型，以及这些模型的适用场景，以使你今后设计出更好的资源授权系统。</p><h2>权限相关术语介绍</h2><p>在介绍业界常见的权限模型前，我们先来看下在权限模型中出现的术语。我把常见的术语总结在了下面的表格里：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/1d/6aa623500bb76b3d40a5c4c6d15be91d.jpg?wh=2248x1623\" alt=\"\"></p><p>为了方便你理解，这一讲我分别用<strong>用户</strong>、<strong>操作</strong>和<strong>资源</strong>来替代 Subject、Action 和 Object。</p><h2>权限模型介绍</h2><p>接下来，我就详细介绍下一些常见的权限模型，让你今后在设计权限系统时，能够根据需求选择合适的权限模型。</p><p>不同的权限模型具有不同的特点，可以满足不同的需求。常见的权限模型有下面这 5 种：</p><ul>\n<li>权限控制列表（ACL，Access Control List）。</li>\n<li>自主访问控制（DAC，Discretionary Access Control）。</li>\n<li>强制访问控制（MAC，Mandatory Access Control）。</li>\n<li>基于角色的访问控制（RBAC，Role-Based Access Control）。</li>\n<li>基于属性的权限验证（ABAC，Attribute-Based Access Control）。</li>\n</ul><p>这里先简单介绍下这 5 种权限模型。<strong>ACL</strong> 是一种简单的权限模型；<strong>DAC</strong> 基于 ACL，将权限下放给具有此权限的主题；但 DAC 因为权限下放，导致它对权限的控制过于分散，为了弥补 DAC 的这个缺陷，诞生了 <strong>MAC</strong> 权限模型。</p><p>DAC 和 MAC 都是基于 ACL 的权限模型。ACL 及其衍生的权限模型可以算是旧时代的权限模型，灵活性和功能性都满足不了现代应用的权限需求，所以诞生了 <strong>RBAC。</strong>RBAC 也是迄今为止最为普及的权限模型。</p><p>但是，随着组织和应用规模的增长，所需的角色数量越来越多，变得难以管理，进而导致角色爆炸和职责分离（SoD）失败。最后，引入了一种新的、更动态的访问控制形式，称为基于属性的访问控制，也就是 ABAC。ABAC 被一些人看作是权限系统设计的未来。腾讯云的 CAM、AWS 的 IAM、阿里云的 RAM 都是 ABAC 类型的权限访问服务。</p><p>接下来，我会详细介绍这些权限模型的基本概念。</p><h3>简单的权限模型：权限控制列表（ACL）</h3><p>ACL（Access Control List，权限控制列表），用来判断用户是否可以对资源做特定的操作。例如，允许 Colin 创建文章的 ACL 策略为：</p><pre><code>Subject: Colin\nAction: Create\nObject: Article\n</code></pre><p>在 ACL 权限模型下，权限管理是围绕资源 Object 来设定的，ACL 权限模型也是比较简单的一种模型。</p><h3>基于 ACL 下放权限的权限模型：自主访问控制（DAC）</h3><p>DAC (Discretionary Access Control，自主访问控制)，是 ACL 的扩展模型，灵活性更强。使用这种模型，不仅可以判断 Subject 是否可以对 Object 做 Action 操作，同时也能让 Subject 将 Object、Action 的相同权限授权给其他的 Subject。例如，Colin 可以创建文章：</p><pre><code>Subject: Colin\nAction: Create\nObject: Article\n</code></pre><p>因为 Colin 具有创建文章的权限，所以 Colin 也可以授予 James 创建文章的权限：</p><pre><code>Subject: James\nAction: Create\nObject: Article\n</code></pre><p>经典的 ACL 模型权限集中在同一个 Subject 上，缺乏灵活性，为了加强灵活性，在 ACL 的基础上，DAC 模型将权限下放，允许拥有权限的 Subject 自主地将权限授予其他 Subject。</p><h3>基于 ACL 且安全性更高的权限模型：强制访问控制（MAC）</h3><p>MAC (Mandatory Access Control，强制访问控制)，是 ACL 的扩展模型，安全性更高。MAC 权限模型下，Subject 和 Object 同时具有安全属性。在做授权时，需要同时满足两点才能授权通过：</p><ul>\n<li>Subject 可以对 Object 做 Action 操作。</li>\n<li>Object 可以被 Subject 做 Action 操作。</li>\n</ul><p>例如，我们设定了“Colin 和 James 可以创建文章”这个 MAC 策略：</p><pre><code>Subject: Colin\nAction: Create\nObject: Article\n\nSubject: James\nAction: Create\nObject: Article\n</code></pre><p>我们还有另外一个 MAC 策略“文章可以被 Colin 创建”：</p><pre><code>Subject: Article\nAction: Create\nObject: Colin\n</code></pre><p>在上述策略中，Colin 可以创建文章，但是 James 不能创建文章，因为第二条要求没有满足。</p><p>这里你需要注意，在 ACL 及其扩展模型中，Subject 可以是用户，也可以是组或群组。</p><p>ACL、DAC 和 MAC 是旧时代的权限控制模型，无法满足现代应用对权限控制的需求，于是诞生了新时代的权限模型：RBAC 和 ABAC。</p><h3>最普及的权限模型：基于角色的访问控制（RBAC）</h3><p>RBAC (Role-Based Access Control，基于角色的访问控制)，引入了 Role（角色）的概念，并且将权限与角色进行关联。用户通过扮演某种角色，具有该角色的所有权限。具体如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/cf/c5ab6b1a77069caac2c5de709dff32cf.jpg?wh=2248x902\" alt=\"\"></p><p>如图所示，每个用户关联一个或多个角色，每个角色关联一个或多个权限，每个权限又包含了一个或者多个操作，操作包含了对资源的操作集合。通过用户和权限解耦，可以实现非常灵活的权限管理。例如，可以满足以下两个权限场景：</p><p>第一，可以通过角色批量给一个用户授权。例如，公司新来了一位同事，需要授权虚拟机的生产、销毁、重启和登录权限。这时候，我们可以将这些权限抽象成一个运维角色。如果再有新同事来，就可以通过授权运维角色，直接批量授权这些权限，不用一个个地给用户授权这些权限。</p><p>第二，可以批量修改用户的权限。例如，我们有很多用户，同属于运维角色，这时候对运维角色的任何权限变更，就相当于对运维角色关联的所有用户的权限变更，不用一个个去修改这些用户的权限。</p><p>RBAC 又分为 RBAC0、RBAC1、RBAC2、RBAC3。RBAC0 是 RBAC 的核心思想，RBAC1 是基于 RBAC 的角色分层模型，RBAC2 增加了 RBAC 的约束模型。而 RBAC3，其实相当于 RBAC1 + RBAC2。</p><p>下面我来详细介绍下这四种 RBAC。</p><p>RBAC0：基础模型，只包含核心的四要素，也就是用户（User）、角色（Role）、权限（Permission：Objects-Operations）、会话（Session）。用户和角色可以是多对多的关系，权限和角色也是多对多的关系。</p><p>RBAC1：包括了 RBAC0，并且添加了角色继承。角色继承，即角色可以继承自其他角色，在拥有其他角色权限的同时，还可以关联额外的权限。</p><p>RBAC2：包括 RBAC0，并且添加了约束。具有以下核心特性：</p><ul>\n<li><strong>互斥约束：</strong>包括互斥用户、互斥角色、互斥权限。同一个用户不能拥有相互排斥的角色，两个互斥角色不能分配一样的权限集，互斥的权限不能分配给同一个角色，在 Session 中，同一个角色不能拥有互斥权限。</li>\n<li><strong>基数约束：</strong>一个角色被分配的用户数量受限，它指的是有多少用户能拥有这个角色。例如，一个角色是专门为公司 CEO 创建的，那这个角色的数量就是有限的。</li>\n<li><strong>先决条件角色：</strong>指要想获得较高的权限，要首先拥有低一级的权限。例如，先有副总经理权限，才能有总经理权限。</li>\n<li><strong>静态职责分离</strong>(Static Separation of Duty)：用户无法同时被赋予有冲突的角色。</li>\n<li><strong>动态职责分离</strong>(Dynamic Separation of Duty)：用户会话中，无法同时激活有冲突的角色。</li>\n</ul><p>RBAC3：全功能的 RBAC，合并了 RBAC0、RBAC1、RBAC2。</p><p>此外，RBAC 也可以很方便地模拟出 DAC 和 MAC 的效果。</p><p>这里举个例子，来协助你理解 RBAC。例如，我们有 write article 和 manage article 的权限：</p><pre><code>Permission:\n    - Name: write_article\n        - Effect: &quot;allow&quot;\n        - Action: [&quot;Create&quot;, &quot;Update&quot;, &quot;Read&quot;]\n        - Object: [&quot;Article&quot;]\n    - Name: manage_article\n        - Effect: &quot;allow&quot;\n        - Action: [&quot;Delete&quot;, &quot;Read&quot;]\n        - Object: [&quot;Article&quot;]\n</code></pre><p>同时，我们也有 Writer、Manager和 CEO 3个角色，Writer 具有 write_article 权限，Manager 具有 manage_article 权限，CEO 具有所有权限：</p><pre><code>Role:\n    - Name: Writer\n      Permissions:\n        - write_article\n    - Name: Manager\n      Permissions:\n        - manage_article\n    - Name: CEO\n      Permissions:\n        - write_article\n        - manage_article\n</code></pre><p>接下来，我们对 Colin 用户授予 Writer 角色：</p><pre><code>Subject: Colin\nRoles:\n    - Writer\n</code></pre><p>那么现在 Colin 就具有 Writer 角色的所有权限 write_article，write_article 权限可以创建文章。</p><p>接下来，再对 James 用户授予 Writer 和 Manager 角色：</p><pre><code>Subject: James\nRoles:\n    - Writer\n    - Manager\n</code></pre><p>那么现在 James 就具有 Writer 角色和 Manager 角色的所有权限：write_article、manage_article，这些权限允许 James 创建和删除文章。</p><h3>最强大的权限模型：基于属性的权限验证（ABAC）</h3><p>ABAC (Attribute-Based Access Control，基于属性的权限验证），规定了哪些属性的用户可以对哪些属性的资源在哪些限制条件下进行哪些操作。跟 RBAC 相比，ABAC 对权限的控制粒度更细，主要规定了下面这四类属性：</p><ul>\n<li>用户属性，例如性别、年龄、工作等。</li>\n<li>资源属性，例如创建时间、所属位置等。</li>\n<li>操作属性，例如创建、修改等。</li>\n<li>环境属性，例如来源 IP、当前时间等。</li>\n</ul><p>下面是一个 ABAC 策略：</p><pre><code>Subject:\n    Name: Colin\n    Department: Product\n    Role: Writer\nAction:\n    - create\n    - update\nResource:\n    Type: Article\n    Tag:\n        - technology\n        - software\n    Mode:\n        - draft\nContextual:\n    IP: 10.0.0.10\n</code></pre><p>上面权限策略描述的意思是，产品部门的 Colin 作为一个 Writer 角色，可以通过来源 IP 是 10.0.0.10 的客户端，创建和更新带有 technology 和 software 标签的草稿文章。</p><p>这里提示一点：ABAC 有时也被称为 PBAC（Policy-Based Access Control）或 CBAC（Claims-Based Access Control）。</p><p>这里，我通过现实中的 ABAC 授权策略，帮你理解 ABAC 权限模型。下面是一个腾讯云的 CAM 策略，也是一种 ABAC 授权模式：</p><pre><code>{\n  &quot;version&quot;: &quot;2.0&quot;,\n  &quot;statement&quot;: [\n    {\n      &quot;effect&quot;: &quot;allow&quot;,\n      &quot;action&quot;: [\n        &quot;cos:List*&quot;,\n        &quot;cos:Get*&quot;,\n        &quot;cos:Head*&quot;,\n        &quot;cos:OptionsObject&quot;\n      ],\n      &quot;resource&quot;: &quot;qcs::cos:ap-shanghai:uid/1250000000:Bucket1-1250000000/dir1/*&quot;,\n      &quot;condition&quot;: {\n        &quot;ip_equal&quot;: {\n          &quot;qcs:ip&quot;: [\n            &quot;10.217.182.3/24&quot;,\n            &quot;111.21.33.72/24&quot;\n          ]\n        }\n      }\n    }\n  ]\n}\n</code></pre><p>上面的授权策略表示：用户必须在 10.217.182.3/24 或者 111.21.33.72/24 网段才能调用云 API（cos:List*、cos:Get*、cos:Head*、cos:OptionsObject），对 1250000000 用户下的 dir1 目录下的文件进行读取操作。</p><p>这里，ABAC 规定的四类属性分别是：</p><ul>\n<li>用户属性：用户为 1250000000。</li>\n<li>资源属性：dir1 目录下的文件。</li>\n<li>操作属性：读取（cos:List*、cos:Get*、cos:Head*、cos:OptionsObject 都是读取 API）。</li>\n<li>环境属性：10.217.182.3/24 或者 111.21.33.72/24 网段。</li>\n</ul><h2>相关开源项目</h2><p>上面我介绍了权限模型的相关知识，但是现在如果让你真正去实现一个权限系统，你可能还是不知从何入手。</p><p>在这里，我列出了一些 GitHub 上比较优秀的开源项目，你可以学习这些项目是如何落地一个权限模型的，也可以基于这些项目进行二次开发，开发一个满足业务需求的权限系统。</p><h3>Casbin</h3><p><a href=\"https://github.com/casbin/casbin\">Casbin</a> 是一个用 Go 语言编写的访问控制框架，功能强大，支持 ACL、RBAC、ABAC 等访问模型，很多优秀的权限管理系统都是基于 Casbin 来构建的。Casbin 的核心功能都是围绕着访问控制来构建的，不负责身份认证。如果以后老板让你实现一个权限管理系统，Casbin 是一定要好好研究的开源项目。</p><h3>keto</h3><p><a href=\"https://github.com/ory/keto\">keto</a> 是一个云原生权限控制服务，通过提供 REST API 进行授权，支持 RBAC、ABAC、ACL、AWS IAM 策略、Kubernetes Roles 等权限模型，可以解决下面这些问题：</p><ul>\n<li>是否允许某些用户修改此博客文章？</li>\n<li>是否允许某个服务打印该文档？</li>\n<li>是否允许 ACME 组织的成员修改其租户中的数据？</li>\n<li>是否允许在星期一的下午 4 点到下午 5 点，从 IP 10.0.0.2 发出的请求执行某个 Job？</li>\n</ul><h3>go-admin</h3><p><a href=\"https://github.com/go-admin-team/go-admin\">go-admin</a> 是一个基于 Gin + Vue + Element UI 的前后端分离权限管理系统脚手架，它的访问控制模型采用了 Casbin 的 RBAC 访问控制模型，功能强大，包含了如下功能：</p><ul>\n<li>基础用户管理功能；</li>\n<li>JWT 鉴权；</li>\n<li>代码生成器；</li>\n<li>RBAC 权限控制；</li>\n<li>表单构建；</li>\n<li>……</li>\n</ul><p>该项目还支持 RESTful API 设计规范、Swagger 文档、GORM 库等。go-admin 不仅是一个优秀的权限管理系统，也是一个优秀的、功能齐全的 Go 开源项目。你在做项目开发时，也可以参考该项目的构建思路。go-admin 管理系统自带前端，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/21/98/21c8307e034fc6e082833d1c9fd0f498.png?wh=2535x827\" alt=\"\"></p><h3>LyricTian/gin-admin</h3><p><a href=\"https://github.com/LyricTian/gin-admin\">gin-admin</a> 类似于 go-admin，是一个基于 Gin+Gorm+Casbin+Wire 实现的权限管理脚手架，并自带前端，在做权限管理系统调研时，也非常值得参考。</p><p>gin-admin 大量采用了 Go 后端开发常用的技术，比如 Gin、GORM、JWT 认证、RESTful API、Logrus 日志包、Swagger 文档等。因此，你在做 Go 后端服务开发时，也可以学习该项目的构建方法。</p><h3>gin-vue-admin</h3><p><a href=\"https://github.com/flipped-aurora/gin-vue-admin\">gin-vue-admin</a> 是一个基于 Gin 和 Vue 开发的全栈前后端分离的后台管理系统，集成了 JWT 鉴权、动态路由、动态菜单、Casbin 鉴权、表单生成器、代码生成器等功能。gin-vue-admin 集成了 RBAC 权限管理模型，界面如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/f3/a391723e154f862d5c7bf796edcf5bf3.png?wh=2527x627\" alt=\"\"></p><h3>选择建议</h3><p>介绍了那么多优秀的开源项目，最后我想给你一些选择建议。如果你想研究 ACL、RBAC、ABAC 等权限模型如何落地，我强烈建议你学习 <a href=\"https://github.com/casbin/casbin\">Casbin</a> 项目，Casbin 目前有近万的 GitHub star 数，处于活跃的开发状态。有很多项目在使用 Casbin，例如 <a href=\"https://github.com/go-admin-team/go-admin\">go-admin</a>、 <a href=\"https://github.com/LyricTian/gin-admin\">gin-admin</a> 、 <a href=\"https://github.com/flipped-aurora/gin-vue-admin\">gin-vue-admin</a> 等。</p><p><a href=\"https://github.com/ory/keto\">keto</a> 类似于 Casbin，主要通过 Go 包的方式，对外提供授权能力。keto 也是一个非常优秀的权限类项目，当你研究完 Casbin 后，如果还想再研究下其他授权类项目，建议你读下 keto 的源码。</p><p>go-admin、gin-vue-admin、gin-admin 这 3 个都是基于 Casbin 的 Go 项目。其中，gin-vue-admin 是后台管理系统框架，里面包含了 RBAC 权限管理模块；go-admin 和 gin-admin 都是 RBAC 权限管理脚手架。所以，如果你想找一个比较完整的 RBAC 授权系统（自带前后端），建议你优先研究下 go-admin，如果还有精力，可以再研究下 gin-admin、gin-vue-admin。</p><h2>总结</h2><p>这一讲，我介绍了 5 种常见的权限模型。其中，ACL 最简单，ABAC 最复杂，但是功能最强大，也最灵活。RBAC 则介于二者之间。对于一些云计算厂商来说，因为它们面临的授权场景复杂多样，需要一个非常强大的授权模型，所以腾讯云、阿里云和 AWS 等云厂商普遍采用了 ABAC 模型。</p><p>如果你的资源授权需求不复杂，可以考虑 RBAC；如果你需要一个能满足复杂场景的资源授权系统，建议选择 ABAC，ABAC 的设计思路可以参考下腾讯云的 CAM、阿里云的 RAM 和 AWS 的 IAM。</p><p>另外，如果你想深入了解权限模型如何具体落地，建议你阅读 <a href=\"https://github.com/casbin/casbin\">Casbin</a> 源码。</p><h2>课后练习</h2><ol>\n<li>思考一下，如果公司需要你实现一个授权中台系统，应该选用哪种权限模型来构建，来满足不同业务的不同需求？</li>\n<li>思考一下，如何将授权流程集成进统一接入层，例如 API 网关？</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"26 | IAM项目是如何设计和实现访问认证功能的？","id":399307},"right":{"article_title":"28 | 控制流（上）：通过iam-apiserver设计，看Web服务的构建","id":401190}},"comments":[{"had_liked":false,"id":304294,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1627319716,"is_pvip":false,"replies":[{"id":"110220","content":"老哥回答给100分","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627597831,"ip_address":"","comment_id":304294,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14512221604","product_id":100079601,"comment_content":"思考题1:ABAC；2:写一个网关插件，当访问认证通过后，自动调用类似本iam项目的后端应用作资源鉴权。","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524005,"discussion_content":"老哥回答给100分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627597831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2631964,"avatar":"https://static001.geekbang.org/account/avatar/00/28/29/1c/cf469aec.jpg","nickname":"柯小星","note":"","ucode":"6B111A48B754E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386550,"discussion_content":"个人觉得API网关只负责认证，鉴权由资源方发起调用IAM，IAM进行鉴权的判断？哈哈这样行不。考虑到在很多业务场景API可能并不直接和IAM的权限等价，需要资源方进行转义处理。只有资源方知道需要拿什么数据去IAM进行校验权限。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627632699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324311,"user_name":"Geek_175bc2","can_delete":false,"product_type":"c1","uid":2131639,"ip_address":"","ucode":"D8D6F17C8D6B1D","user_header":"","comment_is_top":false,"comment_ctime":1638367044,"is_pvip":false,"replies":[{"id":"118464","content":"加我微信聊nightskong。一言两语说不清","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639454129,"ip_address":"","comment_id":324311,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10228301636","product_id":100079601,"comment_content":"老师想问一下，我们的业务是针对一个接口，不同的角色要获取不同的查询结果,例如:管理员可以看到所有列表数据，区域主管能看到对应区域的数据等，项目中全是类似的业务场景，需要用怎么的权限模型设计呢","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538603,"discussion_content":"加我微信聊nightskong。一言两语说不清","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639454129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604645,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7c/25/70134099.jpg","nickname":"许凯","note":"","ucode":"4F11AD41CB0244","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556362,"discussion_content":"这个怎么玩的？老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647328813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314394,"user_name":"wei 丶","can_delete":false,"product_type":"c1","uid":1234929,"ip_address":"","ucode":"331DE893F75B95","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/f1/ce10759d.jpg","comment_is_top":false,"comment_ctime":1632995578,"is_pvip":false,"replies":[{"id":"114081","content":"666666","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1633664922,"ip_address":"","comment_id":314394,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10222930170","product_id":100079601,"comment_content":"1. ABAC  2. 在网关通过RPC或者restful api调用授权系统进行鉴权","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527669,"discussion_content":"666666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633664922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304821,"user_name":"臭臭","can_delete":false,"product_type":"c1","uid":1225053,"ip_address":"","ucode":"5EDA1D1C524E5C","user_header":"https://wx.qlogo.cn/mmopen/vi_32/ZPx5SlIHaNjKotyoGHrhg0u4cZqmdr033CZtUzb4MY70HzWABYYIEibBLUGAxnfJmMjflHibXB0UgAxHjEL8aOoQ/132","comment_is_top":false,"comment_ctime":1627629302,"is_pvip":false,"replies":[{"id":"110268","content":"判断人员是否可以修改自己的文章，这个属于资源守护全系统干的事情，为啥还需要自己写业务逻辑判断当前修改的文章是否自己发布的文章呢？<br><br>另外，如果要允许别人修改自己的文章，底层就不应该加这层判断。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627685893,"ip_address":"","comment_id":304821,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10217563894","product_id":100079601,"comment_content":"老师， 请问下，比如想要实现一个文章编辑&quot;EDIT&quot;权限， 并且只能编辑自己发布的文章，结合 Casbin 的 RBAC模型，实现的思路是什么样的呢？  我的想法是做一个 &quot;EDIT_SELF_ARTICLE&quot;权限， 拥有这个权限的人员就可以修改自己的文章， 但这样实现 就相当于 判断人员拥有编辑权限之后， 还需要自己写业务逻辑判断当前要修改的文章是否是自己发布的文章 ？ ","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524173,"discussion_content":"判断人员是否可以修改自己的文章，这个属于资源守护全系统干的事情，为啥还需要自己写业务逻辑判断当前修改的文章是否自己发布的文章呢？\n\n另外，如果要允许别人修改自己的文章，底层就不应该加这层判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627685893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1244241,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/51/c6cc68df.jpg","nickname":"Yuan","note":"","ucode":"500A084ACC45D4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586761,"discussion_content":"不太能理解这个「资源守护全系统」指代什么，是IAM吗，如果是IAM的话，IAM怎么知道用户要访问的文章是属于这个用户呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662478910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":524173,"ip_address":"上海"},"score":586761,"extra":""}]}]},{"had_liked":false,"id":323596,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1638011039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5932978335","product_id":100079601,"comment_content":"总结：<br>1. 五种权限模型：ACL、DAC、MAC、RBAC、ABAC。<br>2. 前三个是面向资源的权限管理系统；RBAC是面向角色的权限管理系统；ABAC是面向属性的权限管理系统。对于一般的项目来说，使用RBAC即可。<br>3. 开源的授权项目有，casbin, keto, go-admin, gin-admin。其中 go-admin 和 gin-admin 都是RBAC权限管理脚手架","like_count":1},{"had_liked":false,"id":307228,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628951206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923918502","product_id":100079601,"comment_content":"权限管控是任何项目任何公司都离不开的基石服务。<br>五种常见的权限模型：ACL、DAC、MAC、RBAC、ABAC。<br>落地的时候可以参考基于Casbin开源权限控制框架的开源项目go-admin。","like_count":1},{"had_liked":false,"id":352794,"user_name":"AKA三皮","can_delete":false,"product_type":"c1","uid":1102656,"ip_address":"","ucode":"D3BC5C60025E9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/40/0067d6db.jpg","comment_is_top":false,"comment_ctime":1658929969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658929969","product_id":100079601,"comment_content":"我强烈不同意在网关处实现权限的管理：理由，通常网关是无状态的。要实现一套完整的权限管理，对于网关来说太重了；同时，很多开源的网关会把授权的动作委托给第三方，如权限平台，但是这种，在实际生产中，如果每次请求都要多一跳的话， 网关的效率如何去保证？目前有一些方案，建议是采用sidecar的方式（如OPA），但是关于大量权限数据的存储与同步方案，却很少","like_count":1},{"had_liked":false,"id":348337,"user_name":"sqnv_geek","can_delete":false,"product_type":"c1","uid":2179895,"ip_address":"","ucode":"B23265E1862E4F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/a4nwicfbEpwqfm8En9iapFqGoOpVg0p0N4ZjIFAdWQMiaxT0JT9OpYrM5ud1OliaLAUhhiaHDjY8mxmNfSbgBNAAGTQ/132","comment_is_top":false,"comment_ctime":1655004292,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655004292","product_id":100079601,"comment_content":"gcp 的 iam 是什么模型？ 感觉不太像ABAC","like_count":0},{"had_liked":false,"id":345937,"user_name":"Geek_d8f539","can_delete":false,"product_type":"c1","uid":2962952,"ip_address":"","ucode":"F97C93BD30E389","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/br4oaHmuybvhY8KV74KUmcO4XqOK6ufnWA82VgQibmM8j2iaebMPpxfm4K9pJ7FFtypjCxUSXp40Dza3pVyBMTFQ/132","comment_is_top":false,"comment_ctime":1652705254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652705254","product_id":100079601,"comment_content":"我看authzserver的访问控制是用的 ory&#47;ladon，好像文中没提到","like_count":0},{"had_liked":false,"id":343292,"user_name":"我是小妖怪🇨🇳","can_delete":false,"product_type":"c1","uid":1758660,"ip_address":"","ucode":"A5381FA2D2C713","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d5/c4/62b2cd5a.jpg","comment_is_top":false,"comment_ctime":1650768534,"is_pvip":false,"replies":[{"id":"125516","content":"这里列的是一些常见的权限模型","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651077756,"ip_address":"","comment_id":343292,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650768534","product_id":100079601,"comment_content":"为啥没有Red Hat的keycloak？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568207,"discussion_content":"这里列的是一些常见的权限模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651077756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329989,"user_name":"Geek_b9d307","can_delete":false,"product_type":"c1","uid":2877471,"ip_address":"","ucode":"A4E9CDEE716969","user_header":"","comment_is_top":false,"comment_ctime":1641716120,"is_pvip":false,"replies":[{"id":"120949","content":"你可以调研下，open policy agent不熟悉","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642434356,"ip_address":"","comment_id":329989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641716120","product_id":100079601,"comment_content":"想了解一下访问控制框架 casbin 和 open policy agent，这两款产品有什么优缺点？两者分别适用场景是什么？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546852,"discussion_content":"你可以调研下，open policy agent不熟悉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642434356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}