{"id":2440,"title":"20 | Git协同工作流，你该怎么选？","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>与传统的代码版本管理工具相比，Git有很多的优势，因而越来越成为程序员喜欢的版本管理工具。我觉得，Git这个代码版本管理工具最大的优势有以下几个。</p><ul>\n<li>\n<p>Git 是一个分布式的版本管理工具，而且可以是单机版的，所以，你在没有网络的时候同样可以提交（commit）代码。对于我们来说，这意味着在出差途中或是没有网络的环境中依然可以工作写代码。</p>\n<p>这是不是听起来有点不对？一方面，以后你再也不能以“没有网络”作为不能工作的借口了。另一方面，没有网络意味着没有Google和StackOverflow，光有个本地的Git我也一样不能写代码啊……（哈哈。好吧，这已经超出了Git这个技术的范畴了，这里就不讨论了）</p>\n</li>\n<li>\n<p>Git从一个分支向另一个分支合并代码的时候，会把要合并的分支上的所有提交一个一个应用到被合并的分支上，合并后也能看得到整个代码的变更记录。而其他的版本管理工具则不能。</p>\n</li>\n<li>\n<p>Git切换分支的时候通常很快。不像其他版本管理器，每个分支一份拷贝。</p>\n</li>\n<li>\n<p>Git有很多非常有用的命令，让你可以很方便地工作。</p>\n</li>\n</ul><p>比如我很喜欢的<code>git stash</code>命令，可以把当前没有完成的事先暂存一下，然后去忙别的事。<code>git cherry-pick</code>命令可以让你有选择地合并提交。<code>git add -p</code>可以让你挑选改动提交，<code>git grep $regexp $(git rev-list --all)</code>可以用来在所有的提交中找代码。因为都是本地操作，所以你会觉得速度飞快。</p><!-- [[[read_end]]] --><p>除此之外，由Git衍生出来的GitHub/GitLab 可以帮你很好地管理编程工作，比如wiki、fork、pull request、issue 等等，集成了与编程相关的工作，让人觉得这不是一个冷冰冰的工具，而是真正和我们的日常工作发生了很好的交互。</p><p>GitHub/GitLab这样工具的出现，让我们的工作可以呈现在一个工作平台上，并以此来规范整个团队的工作，这才正是Git这个版本管理工具成功的原因。</p><p>今天，我们不讲Git是怎么用的，因为互联网上有太多的文章和书了。而且，如果你还不会用Git的话，那么我觉得你已经严重落后于这个时代了。在这节课中，我想讲一下Git的协同工作流，因为我看到很多团队在使用Git时，并没有用好。</p><p>注意，因为Git是一个分布式的代码管理器，所以，是分布式就会出现数据不一致的情况，因此，我们需要一个协同工作流来让工作变得高效，同时可以有效地让代码具有更好的一致性。</p><p>说到一致性，就是每个人手里的开发代码，还有测试和生产线上的代码，要有一个比较好的一致性的管理和协同方法。这就是Git协同工作流需要解决的问题。</p><p>目前来说，你可能以为我想说的是GitFlow工作流。恭喜你猜对了。但是，我想说的是，GitFlow工作流太过复杂，我并不觉得GitFlow工作流是一个好的工作流。如果你的团队在用这种工作流开发软件，我相信你的感觉一定是糟透了。</p><p>所以，这节课我会对比一些比较主流的协同工作流，然后，再抨击一下GitFlow工作流。</p><h1>中心式协同工作流</h1><p>首先，我们先说明一下，Git是可以像SVN这样的中心工作流一样工作的。我相信很多程序员都是在采用这样的工作方式。</p><p>这个过程一般是下面这个样子的。</p><ol>\n<li>从服务器上做<code>git pull origin master</code>把代码同步下来。</li>\n<li>改完后，<code>git commit</code>到本地仓库中。</li>\n<li>然后<code>git push origin master</code>到远程仓库中，这样其他同学就可以得到你的代码了。</li>\n</ol><p>如果在第3步发现push失败，因为别人已经提交了，那么你需要先把服务器上的代码给pull下来，为了避免有merge动作，你可以使用 <code>git pull --rebase</code> 。这样就可以把服务器上的提交直接合并到你的代码中，对此，Git的操作是这样的。</p><ol>\n<li>先把你本地提交的代码放到一边。</li>\n<li>然后把服务器上的改动下载下来。</li>\n<li>然后在本地把你之前的改动再重新一个一个地做commit，直到全部成功。</li>\n</ol><p>如下图所示，Git 会把 Origin/Master 的远程分支下载下来，然后把本地的Master分支上的改动一个一个地提交上去。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/21/8773994f45327b848fb6a15400250621.jpg?wh=2025x1086\" alt=\"\"><br>\n如果有冲突，那么你要先解决冲突，然后做 <code>git rebase --continue</code> 。如下图所示，git在做 pull --rebase 时，会一个一个地应用（apply）本地提交的代码，如果有冲突就会停下来，等你解决冲突。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/14/44c7d4d0dcbc008a509f22b6873dc414.jpg?wh=1986x996\" alt=\"\"></p><h1>功能分支协同工作流</h1><p>上面的那种方式有一个问题，就是大家都在一个主干上开发程序，对于小团队或是小项目你可以这么干，但是对比较大的项目或是人比较多的团队，这么干就会有很多问题。</p><p>最大的问题就是代码可能干扰太严重。尤其是，我们想安安静静地开发一个功能时，我们想把各个功能的代码变动隔离开来，同时各个功能又会有多个开发人员在开发。</p><p>这时，我们不想让各个功能的开发人员都在Master分支上共享他们的代码。我们想要的协同方式是这样的：同时开发一个功能的开发人员可以分享各自的代码，但是不会把代码分享给开发其他功能的开发人员，直到整个功能开发完毕后，才会分享给其他的开发人员（也就是进入主干分支）。</p><p>因此，我们引入“功能分支”。这个协同工作流的开发过程如下。</p><ol>\n<li>首先使用 <code>git checkout -b new-feature</code> 创建 “new-feature”分支。</li>\n<li>然后共同开发这个功能的程序员就在这个分支上工作，进行add、commit等操作。</li>\n<li>然后通过 <code>git push -u origin new-feature</code> 把分支代码push到服务器上。</li>\n<li>其他程序员可以通过<code>git pull --rebase</code>来拿到最新的这个分支的代码。</li>\n<li>最后通过Pull Request的方式做完Code Review后合并到Master分支上。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/55/6b/55fb5a12b11fb1f2e7526a99b3151a6b.jpg?wh=1545x705\" alt=\"\"></p><p>就像上面这个图显示的一样，绿色的分支就是功能分支，合并后就会像上面这个样子。</p><p>我们可以看到，其实，这种开发也是以服务器为中心的开发，还不是Git分布式开发，它只不过是用分支来完成代码改动的隔离。</p><p>另外，我想提醒一下，为什么会叫“功能分支”，而不是“项目分支”？因为Git的最佳实践希望大家在开发的过程中，快速提交，快速合并，快速完成。这样可以少很多冲突的事，所以叫功能分支。</p><p>传统的项目分支开得太久，时间越长就越合不回去。这种玩法其实就是让我们把一个大项目切分成若干个小项目来执行（最好是一个小功能一个项目）。这样才是互联网式的快速迭代式的开发流程。</p><h1>GitFlow协同工作流</h1><p>在真实的生产过程中，前面的协同工作流还是不能满足工作的要求。这主要因为我们的生产过程是比较复杂的，软件生产中会有各式各样的问题，并要面对不同的环境。我们要在不停地开发新代码的同时，维护线上的代码，于是，就有了下面这些需求。</p><ol>\n<li>\n<p>希望有一个分支是非常干净的，上面是可以发布的代码，上面的改动永远都是可以发布到生产环境中的。这个分支上不能有中间开发过程中不可以上生产线的代码提交。</p>\n</li>\n<li>\n<p>希望当代码达到可以上线的状态时，也就是在alpha/beta release时，在测试和交付的过程中，依然可以开发下一个版本的代码。</p>\n</li>\n<li>\n<p>最后，对于已经发布的代码，也会有一些Bug-fix的改动，不会将正在开发的代码提交到生产线上去。</p>\n</li>\n</ol><p>你看，面对这些需求，前面的那些协同方式就都不行了。因为我们不仅是要在整个团队中共享代码，我们要的更是管理好不同环境下的代码不互相干扰。说得技术一点儿就是，要管理好代码与环境的一致性。</p><p>为了解决这些问题，GitFlow协同工作流就出来了。</p><p>GitFlow协同工作流是由Vincent Driessen于2010年在A successful Git branching model这篇文章介绍给世人的。</p><p>这个协同工作流的核心思想如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/52/9cf0d9de4151269d4dd59f7519d51452.jpg?wh=2127x1524\" alt=\"\"><br>\n整个代码库中一共有五种分支。</p><ul>\n<li>\n<p>Master分支。也就是主干分支，用作发布环境，上面的每一次提交都是可以发布的。</p>\n</li>\n<li>\n<p>Feature分支。也就是功能分支，用于开发功能，其对应的是开发环境。</p>\n</li>\n<li>\n<p>Developer分支。是开发分支，一旦功能开发完成，就向Developer分支合并，合并完成后，删除功能分支。这个分支对应的是集成测试环境。</p>\n</li>\n<li>\n<p>Release分支。当Developer分支测试达到可以发布状态时，开出一个Release分支来，然后做发布前的准备工作。这个分支对应的是预发环境。之所以需要这个Release分支，是我们的开发可以继续向前，不会因为要发布而被block住而不能提交。</p>\n</li>\n</ul><p>一旦Release分支上的代码达到可以上线的状态，那么需要把Release分支向Master分支和Developer分支同时合并，以保证代码的一致性。然后再把Release分支删除掉。</p><ul>\n<li>Hotfix分支。是用于处理生产线上代码的Bug-fix，每个线上代码的Bug-fix都需要开一个Hotfix分支，完成后，向Developer分支和Master分支上合并。合并完成后，删除Hotfix分支。</li>\n</ul><p>这就是整个GitFlow协同工作流的工作过程。我们可以看到：</p><ol>\n<li>\n<p>我们需要长期维护Master和Developer两个分支。</p>\n</li>\n<li>\n<p>这其中的方式还是有一定复杂度的，尤其是Release和Hotfix分支需要同时向两个分支作合并。所以，如果没有一个好的工具来支撑的话，这会因为我们可能会忘了做一些操作而导致代码不一致。</p>\n</li>\n<li>\n<p>GitFlow协同虽然工作流比较重。但是它几乎可以应对所有公司的各种开发流程，包括瀑布模型，或是快速迭代模型。</p>\n</li>\n</ol><h1>GitHub/GitLab 协同工作流</h1><h2>GitFlow的问题</h2><p>对于GitFlow来说，虽然可以解决我们的问题，但是也有很多问题。在GitFlow流行了一段时间后，圈内出现了一些不同的声音。参看下面两篇吐槽文章。</p><ul>\n<li><a href=\"http://endoflineblog.com/gitflow-considered-harmful\">GitFlow considered harmful</a></li>\n<li><a href=\"http://luci.criosweb.ro/a-real-life-git-workflow-why-git-flow-does-not-work-for-us/\">Why git flow does not work for us</a></li>\n</ul><p>其中有个问题就是因为分支太多，所以会出现git log混乱的局面。具体来说，主要是git-flow使用<code>git merge --no-ff</code>来合并分支，在git-flow这样多个分支的环境下会让你的分支管理的log变得很难看。如下所示，左边是使用–no-ff参数在多个分支下的问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/b8/13a78e9d493ba2737c3d6b8431be47b8.png?wh=865*315\" alt=\"\"></p><p>所谓<code>--no-ff</code>参数的意思是<code>——no fast forward</code>的意思。也就是说，合并的方法是不要把这个分支的提交以前置合并的方式，而是留下一个merge的提交。这是把双刃剑，我们希望我们的<code>--no-ff</code>能像右边那样，而不是像左边那样。</p><p>对此的建议是：只有feature合并到developer分支时，使用–no-ff参数，其他的合并都不使用<code>--no-ff</code>参数来做合并。</p><p>另外，还有一个问题就是，在开发得足够快的时候，你会觉得同时维护Master和Developer两个分支是一件很无聊的事，因为这两个分支在大多数情况下都是一样的。包括Release分支，你会觉得创建的这些分支太无聊。</p><p>而你的整个开发过程也会因为这么复杂的管理变得非常复杂。尤其当你想回滚某些人的提交时，你就会发现这事似乎有点儿不好干了。而且在工作过程中，你会来来回回地切换工作的分支，有时候一不小心没有切换，就提交到了不正确的分支上，你还要回滚和重新提交，等等。</p><p>GitLab一开始是GitFlow的坚定支持者，后来因为这些吐槽，以及Hacker News和Reddit上大量的讨论，GitLab也开始不玩了。他们写了<a href=\"https://about.gitlab.com/2014/09/29/gitlab-flow/\">一篇blog</a>来创造了一个新的Workflow——GitLab Flow，这个GitLab Flow是基于GitHub Flow来做的（参看：<a href=\"http://scottchacon.com/2011/08/31/github-flow.html\"> GitHub Flow</a> ）。</p><h2>GitHub Flow</h2><p>所谓GitHub Flow，其实也叫Forking flow，也就是GitHub上的那个开发方式。</p><ol>\n<li>\n<p>每个开发人员都把“官方库”的代码fork到自己的代码仓库中。</p>\n</li>\n<li>\n<p>然后，开发人员在自己的代码仓库中做开发，想干啥干啥。</p>\n</li>\n<li>\n<p>因此，开发人员的代码库中，需要配两个远程仓库，一个是自己的库，一个是官方库（用户的库用于提交代码改动，官方库用于同步代码）。</p>\n</li>\n<li>\n<p>然后在本地建“功能分支”，在这个分支上做代码开发。</p>\n</li>\n<li>\n<p>这个功能分支被push到开发人员自己的代码仓库中。</p>\n</li>\n<li>\n<p>然后，向“官方库”发起pull request，并做Code Review。</p>\n</li>\n<li>\n<p>一旦通过，就向官方库进行合并。</p>\n</li>\n</ol><p>这就是GitHub的工作流程。</p><p>如果你有“官方库”的权限，那么就可以直接在“官方库”中建功能分支开发，然后提交pull request。通过Code Review后，合并进Master分支，而Master一旦有代码被合并就可以马上release。</p><p>这是一种非常Geek的玩法。这需要一个自动化的CI/CD工具做辅助。是的，CI/CD应该是开发中的标配了。</p><h2>GitLab Flow</h2><p>然而，GitHub Flow这种玩法依然会有好多问题，因为其虽然变得很简单，但是没有把我们的代码和我们的运行环境给联系在一起。所以，GitLab提出了几个优化点。</p><p>其中一个是引入环境分支，如下图所示，其包含了预发布（Pre-Production）和生产（Production）分支。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/a0/f86fa8b3f9da1980db576936534f26a0.jpg?wh=1698x1404\" alt=\"\"><br>\n而有些时候，我们还会有不同版本的发布，所以，还需要有各种release的分支。如下图所示。Master分支是一个roadmap分支，然后，一旦稳定了就建稳定版的分支，如2.3.stable分支和2.4.stable分支，其中可以cherry-pick master分支上的一些改动过去。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/de/9457e374f32004a65b4829d17af133de.jpg?wh=1413x1884\" alt=\"\"><br>\n这样也就解决了两个问题：</p><ul>\n<li>\n<p>环境和代码分支对应的问题；</p>\n</li>\n<li>\n<p>版本和代码分支对应的问题。</p>\n</li>\n</ul><p>老实说，对于互联网公司来说，环境和代码分支对应这个事，只要有个比较好的CI/CD生产线，这种环境分支应该也是没有必要的。而对于版本和代码分支的问题，我觉得这应该是有意义的，但是，最好不要维护太多的版本，版本应该是短暂的，等新的版本发布时，老的版本就应该删除掉了。</p><h1>协同工作流的本质</h1><p>对于上面这些各式各样的工作流的比较和思考，虽然，我个人非常喜欢GitHub Flow，在必要的时候使用上GitLab中的版本或环境分支。不过，我们现实生活中，还是有一些开发工作不是以功能为主，而是以项目为主的。也就是说，项目的改动量可能比较大，时间和周期可能也比较长。</p><p>我在想，是否有一种工作流，可以面对我们现实工作中的各种情况。但是，我想这个世界太复杂了，应该不存在一种一招鲜吃遍天的放之四海皆准的银弹方案。所以，我们还要根据自己的实际情况来挑选适合我们的协同工作的方式。</p><p>而代码的协同工作流属于SCM（Software Configuration Management）的范畴，要挑选好适合自己的方式，我们需要知道软件工程配置管理的本质。</p><p>根据这么多年来我在各个公司的经历，有互联网的，有金融的，有项目的，有快速迭代的等，我认为团队协同工作的本质不外乎这么几个事儿。</p><ol>\n<li>不同的团队能够尽可能地并行开发。</li>\n<li>不同软件版本和代码的一致性。</li>\n<li>不同环境和代码的一致性。</li>\n<li>代码总是会在稳定和不稳定间交替。我们希望生产线上的代码总是能对应到稳定的代码上来。</li>\n</ol><p>基本在上述的四个事儿中，上述的工作流大都是在以建立不同的分支，来做到开发并行、代码和环境版本一致，以及稳定的代码。</p><p>要选择适合自己的协同工作流，我们就不得不谈一下软件开发的工作模式。</p><p>首先，我们知道软件开发的趋势一定是下面这个样子的。</p><ul>\n<li>\n<p><strong>以微服务或是SOA为架构的方式</strong>。一个大型软件会被拆分成若干个服务，那么，我们的代码应该也会跟着服务拆解成若干个代码仓库。这样一来，我们的每个代码仓库都会变小，于是我们的协同工作流程就会变简单。</p>\n<p>对于每个服务的代码仓库，我们的开发和迭代速度也会变得很快，开发团队也会跟服务一样被拆分成多个小团队。这样一来， GitFlow这种协同工作流程就非常重了，而GitHub这种方式或是功能分支这种方式会更适合我们的开发。</p>\n</li>\n<li>\n<p><strong>以DevOps为主的开发流程</strong>。DevOps关注于CI/CD，需要我们有自动化的集成测试和持续部署的工具。这样一来，我们的代码发布速度就会大大加快，每一次提交都能很快地被完整地集成测试，并很快地发布到生产线上。</p>\n</li>\n</ul><p>于是，我们就可以使用更简单的协同工作流程，不需要维护多个版本，也不需要关注不同的运行环境，只需要一套代码，就可以了。GitHub Flow或是功能分支这种方式也更适应这种开发。</p><p>你看，如果我们将软件开发升级并简化到SOA服务化以及DevOps上来，那么协同工作流就会变得非常简单。所以，<strong>协同工作流的本质，并不是怎么玩好代码仓库的分支策略，而是玩好我们的软件架构和软件开发流程</strong>。</p><p>当然，服务化和DevOps是每个开发团队需要去努力的目标，但就算是这样，也有某些情况我们需要用重的协同工作的模式。比如，整个公司在做一个大的升级项目，这其中会对代码做一个大的调整（很有可能是一次重大的重构）。</p><p>这个时候，可能还有一些并行的开发需要做，如一些小功能的优化，一些线上Bug的处理，我们可能还需要在生产线上做新旧两个版本的A/B测试。在这样的情况下，我们可能会或多或少地使用GitFlow协同工作流。</p><p>但是，这样的方式不会是常态，是特殊时期，我们不可能隔三差五地对系统做架构或是对代码做大规模的重构。所以，在大多数情况下，我们还是应该选择一个比较轻量的协同工作流，而在特殊时期特例特办。</p><p>最后，让我用一句话来结束这节课：<strong>与其花时间在Git协同工作流上，还不如把时间花在调整软件架构和自动化软件生产和运维流程上来，这才是真正简化协同工作流程的根本</strong>。</p>","neighbors":{"left":{"article_title":"19 | 答疑解惑：我们应该能够识别的表象和本质","id":865},"right":{"article_title":"21 | 分布式系统架构的冰与火","id":1411}},"comments":[{"had_liked":false,"id":2179,"user_name":"龍蝦","can_delete":false,"product_type":"c1","uid":1000076,"ip_address":"","ucode":"BE1D500833F070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","comment_is_top":false,"comment_ctime":1516185337,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"392358209273","product_id":100002201,"comment_content":"Git-Flow 和 GitLab-Flow 都有 release 分支，虽然都称为 release，但作用完全不同。<br>在 Git-Flow 中，release 是介于 dev 和 master 之间，作用是发布前的准备工作（通常应该是用于更全面测试），从 dev 分叉 release 是为了避免阻塞 dev 分支上继续开发新功能；release 属于临时性分支，准备工作完成后是以 Fast-Forward 方式合并到 master；release 上可能会修复一些 bug，所以还要把 release 合并回 dev；发布软件是从 master 上构建。从名称看，release 应该叫做 pre-release，而 master 应该叫 release 。<br>在 GitLab-Flow 中，release 是从 master 分叉出来，可能会有多个 release 分支，对应软件不同版本。从 master 分叉一个 release （版本）后，可能发现还需要合入一些新功能，所以通过 cherry-pick 方式从 master 中挑选某些功能，不能直接从 master 合并，因为仅需要 master 上的某些新功能而不是全部新功能。release 属于长期分支，而且分叉以后不会再与其它分支合并。除非某个版本不再维护，不然对应 release 会持续存在，因为发布出去的软件随时可能发现 bug 需要修复。","like_count":92,"discussions":[{"author":{"id":1221010,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a1/92/8a76eea8.jpg","nickname":"偶系外星人","note":"","ucode":"3EF5C8919F1E7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550304,"discussion_content":"赞，根本原因还是需求定位不同，git-flow是一套代码发布到线上环境，属于服务提供方；gitlab-flow更像github-flow的简化版，需要多个分支并行维护供开源社区用户使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644478994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1468775,"avatar":"https://static001.geekbang.org/account/avatar/00/16/69/67/96c242f7.jpg","nickname":"过客","note":"","ucode":"FFF8E0D994D1F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282381,"discussion_content":"说的清晰透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591958634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1928801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDZQz0SAyZIwibW1WwXTYGefO3tjWKibrAjQprMTLROBxKjF7Jcq9pGVIriapDgpfIaSHfIeiapsl8S8g/132","nickname":"笑客柳毅","note":"","ucode":"EBC8053D3CCE12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214959,"discussion_content":"GitLab-Flow中的诸多release分支如果都要有CI和CD的要求，那么工作量还是很大的。有没有好的解决方案？分享下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585267789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1128401,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/d1/d4afddb5.jpg","nickname":"一心","note":"","ucode":"85F3285A416E0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1928801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDZQz0SAyZIwibW1WwXTYGefO3tjWKibrAjQprMTLROBxKjF7Jcq9pGVIriapDgpfIaSHfIeiapsl8S8g/132","nickname":"笑客柳毅","note":"","ucode":"EBC8053D3CCE12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368873,"discussion_content":"抛砖引玉，如使用jenkins构建发布做多分支选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618847396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214959,"ip_address":""},"score":368873,"extra":""}]}]},{"had_liked":false,"id":2266,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1516579336,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"108890761736","product_id":100002201,"comment_content":"请问老师的架构图 示意图 是用什么软件画的 感觉很不错","like_count":25,"discussions":[{"author":{"id":1045078,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","nickname":"Jie","note":"","ucode":"AB94041E548FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249815,"discussion_content":"这些图都是官网拉的，老师也不会知道用啥画的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587964610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219933,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9d/5d/3fdead91.jpg","nickname":"レイン小雨","note":"","ucode":"45BED977EFE852","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212718,"discussion_content":"贵如？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585011025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2215,"user_name":"cellardoor","can_delete":false,"product_type":"c1","uid":1003824,"ip_address":"","ucode":"ECB20F7DFC5A65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/30/da6ae0d8.jpg","comment_is_top":false,"comment_ctime":1516328076,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104595543180","product_id":100002201,"comment_content":"有些人喜欢把事情做的很复杂，以至于看不出有什么问题。有些人喜欢把事情做的很简单，看起来似乎有些问题。","like_count":25,"discussions":[{"author":{"id":1652895,"avatar":"https://static001.geekbang.org/account/avatar/00/19/38/9f/895353ab.jpg","nickname":"黄卫江","note":"","ucode":"0366942B81E7FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581541,"discussion_content":"头像不错\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658824977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49347,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1063924,"ip_address":"","ucode":"E009AC184D3C90","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/f4/244f0c5e.jpg","comment_is_top":false,"comment_ctime":1544668877,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"83149047501","product_id":100002201,"comment_content":"分享个小技巧<br>mac下使用iterm2终端搭配zsh，有非常好用的git快捷键（当然也可以自己alias)，类似gco，gcd，gcm，gl，ggpush，ggsup等等，能少敲不少重复的字符，极大提升效率","like_count":19},{"had_liked":false,"id":74206,"user_name":"温LELE🍀","can_delete":false,"product_type":"c1","uid":1208227,"ip_address":"","ucode":"6B02F2233C3DFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/a3/78127225.jpg","comment_is_top":false,"comment_ctime":1552143784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53091751336","product_id":100002201,"comment_content":"几年前，微软终于开始普及Git了，选择的协同工作流是GibHub flow，大大滴改善了生产效率。 读了这篇文章，了解了还有其他工作流方式，还是觉得GitHub简单些，更适合服务化的场景。","like_count":12},{"had_liked":false,"id":12808,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1529047928,"is_pvip":false,"replies":[{"id":"4269","content":"写错了，是got stash ","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1529066791,"ip_address":"","comment_id":12808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48773688184","product_id":100002201,"comment_content":"git state还是个git stash？","like_count":11,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419417,"discussion_content":"写错了，是got stash ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529066791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19982,"user_name":"jerry Zhou","can_delete":false,"product_type":"c1","uid":1144328,"ip_address":"","ucode":"D0CC6B4826C8C2","user_header":"https://static001.geekbang.org/account/avatar/00/11/76/08/34ef210b.jpg","comment_is_top":false,"comment_ctime":1534205898,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"40188911562","product_id":100002201,"comment_content":"为了避免有 merge 动作，你可以使用 git pull --rebase 。这样就可以把服务器上的提交直接合并到你的代码中，对此，Git 的操作是这样的。   为什么要避免merge动作？","like_count":10,"discussions":[{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295315,"discussion_content":"洁癖吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596163345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24819,"discussion_content":"应该是为了好看的log","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570274996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1867796,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/80/14/0bcc4dd3.jpg","nickname":"Victor","note":"","ucode":"0AA9F68348A4D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405658,"discussion_content":"生成merge commit，会造成提交历史看起来比较乱，用rebase历史线很清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634613847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385932,"discussion_content":"为了提交不分叉，清晰且好看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627353416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1382927,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1a/0f/2e345613.jpg","nickname":"nineSean","note":"","ucode":"364DEAB45E66AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362999,"discussion_content":"merge 合并会有分叉，rebase 没有分叉整个 commits 更线性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617089490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106090,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/aa/68a7921b.jpg","nickname":"常清","note":"","ucode":"EA6975FDFD4D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167461,"discussion_content":"减少交叉提交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581499601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12984,"user_name":"tao","can_delete":false,"product_type":"c1","uid":1069990,"ip_address":"","ucode":"9E56FA2DDB78E0","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/a6/c70dce0d.jpg","comment_is_top":false,"comment_ctime":1529240977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40183946641","product_id":100002201,"comment_content":"我觉得看团队大小吧。7人以下的团队小而快，直接全部用单master分支就可以，所有人用rebase，防止出现太多分叉。feature分支和bug分支都开发人员自己管理就好","like_count":10},{"had_liked":false,"id":78605,"user_name":"飞扬","can_delete":false,"product_type":"c1","uid":1378180,"ip_address":"","ucode":"3F77352FC25DB9","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/84/18d30516.jpg","comment_is_top":false,"comment_ctime":1553181864,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"27322985640","product_id":100002201,"comment_content":"在百度内部开发使用一种叫做「分支开发分支发布」的工作流，虽然不算银弹吧，但是总的来说比文中提到的更简单清晰一些，也更容易上手，配合agile这个持续集成工具，是我目前见到的最好的协同工作流了。","like_count":6,"discussions":[{"author":{"id":1378180,"avatar":"https://static001.geekbang.org/account/avatar/00/15/07/84/18d30516.jpg","nickname":"飞扬","note":"","ucode":"3F77352FC25DB9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215942,"discussion_content":"嗯，基本想法是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585399125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1928801,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDZQz0SAyZIwibW1WwXTYGefO3tjWKibrAjQprMTLROBxKjF7Jcq9pGVIriapDgpfIaSHfIeiapsl8S8g/132","nickname":"笑客柳毅","note":"","ucode":"EBC8053D3CCE12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214961,"discussion_content":"这个不就是耗子哥说的，通过不同的分支把一个大项目拆分成了多个小项目吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585267930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2140,"user_name":"小毅","can_delete":false,"product_type":"c1","uid":1016799,"ip_address":"","ucode":"5651C740D68038","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/hg9Tsg2iaBeG6Q5mxiczjw1ph0OvhKziblEIiaOxg4gwQ0Dgia7Fw7pDQ0mM8AL5SJAm2Yavk1RmBJrFd9jKPBQRkOw/132","comment_is_top":false,"comment_ctime":1516062356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14400964244","product_id":100002201,"comment_content":"皓哥，文章里面的说：一个大型软件会被拆分成若干个服务，那么代码应该也会跟着服务拆解成若干个代码仓库～ 这样随着组里面的项目越来越多，开发维护起来会不会不方便？ ","like_count":3},{"had_liked":false,"id":210095,"user_name":"绿茶","can_delete":false,"product_type":"c1","uid":1309531,"ip_address":"","ucode":"97858BD97FE883","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIoFmmRCVg6CbBiaubtWjHnicEYtaUQiav7pAg8gtV8wfr3zyiazqtVibUQplPLI7tO4DaDia3JUaOs6yQ/132","comment_is_top":false,"comment_ctime":1587686081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177620673","product_id":100002201,"comment_content":"Git只是工具，花大把时间还不如花在软件架构上自动化上，哈","like_count":2},{"had_liked":false,"id":2142,"user_name":"浩子","can_delete":false,"product_type":"c1","uid":1027495,"ip_address":"","ucode":"91473789B31BA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/a7/14246c67.jpg","comment_is_top":false,"comment_ctime":1516063664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10105998256","product_id":100002201,"comment_content":"耗子哥，写的很在理。是应该在项目本身就开始根据业务进行拆分。再进行监控等","like_count":2},{"had_liked":false,"id":299203,"user_name":"佐倉 桜","can_delete":false,"product_type":"c1","uid":1123738,"ip_address":"","ucode":"60F4F852A66970","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/9a/13d5ab10.jpg","comment_is_top":false,"comment_ctime":1624509828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5919477124","product_id":100002201,"comment_content":"git push -f 一把梭 : )","like_count":1},{"had_liked":false,"id":247443,"user_name":"潜龙勿用","can_delete":false,"product_type":"c1","uid":2159460,"ip_address":"","ucode":"EEB8A6F3E4A1B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dsZ5CFV7mCIKEn7YcVFJXksO201eeqsJXoT4EYNvcibAKNSWSQVZPbbRgPKraWqg6YnaaRlVoywic9MEsflicRDibQ/132","comment_is_top":false,"comment_ctime":1599709874,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5894677170","product_id":100002201,"comment_content":"我们公司的流程更复杂，分支和环境对应，长期维护3个分支，分别是master、env-test、env-dev。功能分支从master分出来，开发完成，功能分支合并到env-dev，部署到开发环境，联调完成后功能分支合并到env-test，测试完成后功能分支合并到master，上线使用master分支。","like_count":1,"discussions":[{"author":{"id":1194853,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","nickname":"prepared","note":"","ucode":"00E54A5C7CDCBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366852,"discussion_content":"我们基本上也是这样，只是分支名字不一样而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618206529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225531,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1591779225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886746521","product_id":100002201,"comment_content":"与其花时间在 Git 协同工作流上，还不如把时间花在调整软件架构和自动化软件生产和运维流程上来，这才是真正简化协同工作流程的根本。—— 真理","like_count":1},{"had_liked":false,"id":212038,"user_name":"林","can_delete":false,"product_type":"c1","uid":1128807,"ip_address":"","ucode":"B6317F70D3D31D","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/67/e1ef109a.jpg","comment_is_top":false,"comment_ctime":1588050404,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5883017700","product_id":100002201,"comment_content":"关注系统架构和项目自动部署流程，这些工作流都只是配合的工具","like_count":1},{"had_liked":false,"id":211731,"user_name":"BeginYan","can_delete":false,"product_type":"c1","uid":1082843,"ip_address":"","ucode":"BB06C4712E6383","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/db/f978ddcd.jpg","comment_is_top":false,"comment_ctime":1587999645,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5882966941","product_id":100002201,"comment_content":"很多大公司都推崇主干开发，分支上线的方式，耗子叔怎么看？","like_count":1,"discussions":[{"author":{"id":1382927,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1a/0f/2e345613.jpg","nickname":"nineSean","note":"","ucode":"364DEAB45E66AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363000,"discussion_content":"GitLab Flow 图二不就是你说的这种方式么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617089643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193361,"user_name":"迪","can_delete":false,"product_type":"c1","uid":1760077,"ip_address":"","ucode":"57EF0AF897A8B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/db/4d/8dec7917.jpg","comment_is_top":false,"comment_ctime":1584890965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879858261","product_id":100002201,"comment_content":"采用Gitflow 工作流，feature开发 develop合并，release发布","like_count":1},{"had_liked":false,"id":99564,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1559261367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854228663","product_id":100002201,"comment_content":"git协同工作流的背后，其实隐藏着公司软件架构和自动化软件生产和运维。当采用SOA服务式的架构后，团队自然的被拆分得比较小，在团队内部几乎是采用中心协同工作流的方式，开发迭代速度非常快，而整个系统在paas集成又确保了公司范围内不同组并行协作，从而保证公司级别的人效最大化。<br>不同的协作方式，工作流模式，目标都在于尽可能的在开发效率和沟通协作两个方面做权衡，让模式尽可能适应团队的规模，从而保证人效的提高。","like_count":2},{"had_liked":false,"id":2168,"user_name":"郎哲","can_delete":false,"product_type":"c1","uid":1007926,"ip_address":"","ucode":"EE2F5F061E2F7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/36/343a8ef8.jpg","comment_is_top":false,"comment_ctime":1516118294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5811085590","product_id":100002201,"comment_content":"我们目前方式 类 「GitLab Flow」小的变动功能上master，稍微负责的打功能分支。在一个目标内打relase版本，fixbug在release上并pick到master。现在遇到 多个项目都对release有要求，然后就变成串行了。正考虑为强要求的项目单独relase和维护。客户端的不干了 说版本太多不发版本容易出错。目前正忍受串行。","like_count":1},{"had_liked":false,"id":2139,"user_name":"很大气","can_delete":false,"product_type":"c1","uid":1016692,"ip_address":"","ucode":"39F3C05908386B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/74/c3866382.jpg","comment_is_top":false,"comment_ctime":1516061916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5811029212","product_id":100002201,"comment_content":"在实际开发中，如果有并行的需求应该怎样管理分支呢？","like_count":1},{"had_liked":false,"id":349713,"user_name":"JSJohnsonJS","can_delete":false,"product_type":"c1","uid":1938853,"ip_address":"","ucode":"732F8EA6078302","user_header":"https://static001.geekbang.org/account/avatar/00/1d/95/a5/de5df896.jpg","comment_is_top":false,"comment_ctime":1656250101,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1656250101","product_id":100002201,"comment_content":"svn如果要进行多分支开发的时候，每次都会拉取一份新的代码拷贝，而git不会，git在本地仓库的代码，其实是所有分支公用的，这样就意味着，开发人员一开始拉取了master分支后，后续拉取的所有分支，都仅仅只是拉取增量部分而已，不会重新完整的下载一份拷贝，这个特性简直太棒了。前一段时间公司要求从svn迁移到git，网速很慢，一直在想每次拉取新分支下载很久咋办，没想到，今天看到这里，突然就想明白了，O(∩_∩)O哈哈~","like_count":1},{"had_liked":false,"id":257992,"user_name":"dawa大娃bigbaby","can_delete":false,"product_type":"c1","uid":2278722,"ip_address":"","ucode":"A3D0AF039B693A","user_header":"https://static001.geekbang.org/account/avatar/00/22/c5/42/255602d0.jpg","comment_is_top":false,"comment_ctime":1604237423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604237423","product_id":100002201,"comment_content":"项目中目前正在采用作者提到的Devops的工作方法。","like_count":0},{"had_liked":false,"id":250192,"user_name":"Harlan","can_delete":false,"product_type":"c1","uid":2134882,"ip_address":"","ucode":"F43595A0A00B19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","comment_is_top":false,"comment_ctime":1600964970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600964970","product_id":100002201,"comment_content":"老师 我想 问下 GitHub Flow  怎么解决merge master时因为多个版本并行代码冲突问题","like_count":0},{"had_liked":false,"id":250189,"user_name":"Harlan","can_delete":false,"product_type":"c1","uid":2134882,"ip_address":"","ucode":"F43595A0A00B19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","comment_is_top":false,"comment_ctime":1600964497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600964497","product_id":100002201,"comment_content":"GibHub flow 工作流是 code review 过了代码往master上合并吗","like_count":0},{"had_liked":false,"id":241115,"user_name":"Geek_579df7","can_delete":false,"product_type":"c1","uid":2109750,"ip_address":"","ucode":"7FCA2FBEFB324F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GiciaicKlFp8XvLux7sb5RfXeyl1xLwYTAMSzZKTics6ANsKbrCdbw1PMlMSSLyZGILfyOEW1ETP9Lft7dVB1nPA5w/132","comment_is_top":false,"comment_ctime":1597195571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597195571","product_id":100002201,"comment_content":"推荐一下[lazygit](https:&#47;&#47;github.com&#47;jesseduffield&#47;lazygit).","like_count":0},{"had_liked":false,"id":210888,"user_name":"lubiaook","can_delete":false,"product_type":"c1","uid":1368040,"ip_address":"","ucode":"C59CD6E7DAD729","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e8/359adede.jpg","comment_is_top":false,"comment_ctime":1587861246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587861246","product_id":100002201,"comment_content":"我们没有协同  都是直接在主干上撸  尤其是bpmn文件冲突了根本无法merge  只能从生产拉下来重新绘制","like_count":1},{"had_liked":false,"id":210094,"user_name":"成林","can_delete":false,"product_type":"c1","uid":1162858,"ip_address":"","ucode":"60C31F52EBC251","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/6a/552cc940.jpg","comment_is_top":false,"comment_ctime":1587686030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587686030","product_id":100002201,"comment_content":"耗子叔的分析十分到位，协同工作流的本质是解决代码并行开发和生产环境代码的冲突，让工程师可以更快地去开发迭代，因此要根据自身环境而选择一种适合","like_count":0},{"had_liked":false,"id":202431,"user_name":"CodeAllen","can_delete":false,"product_type":"c1","uid":1436590,"ip_address":"","ucode":"DC479F9F7845CA","user_header":"https://static001.geekbang.org/account/avatar/00/15/eb/ae/e4752b7e.jpg","comment_is_top":false,"comment_ctime":1585987808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585987808","product_id":100002201,"comment_content":"对号入座，我们是GitHub flow，突然觉得CI部门做的不错","like_count":0},{"had_liked":false,"id":191001,"user_name":"小呆同学","can_delete":false,"product_type":"c1","uid":1085485,"ip_address":"","ucode":"D8533E2826B804","user_header":"https://static001.geekbang.org/account/avatar/00/10/90/2d/90644692.jpg","comment_is_top":false,"comment_ctime":1584717013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584717013","product_id":100002201,"comment_content":"这俩天正好要给学弟安利git，这是一篇很好的介绍","like_count":0},{"had_liked":false,"id":170781,"user_name":"meijing0114","can_delete":false,"product_type":"c1","uid":1012416,"ip_address":"","ucode":"B349D33E2F3ECC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/c0/b09911a0.jpg","comment_is_top":false,"comment_ctime":1578714611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578714611","product_id":100002201,"comment_content":"在之前的开发过程中，严格执行过一段时间的gitflow. 主要是依赖sourcecode和mac上的tower来进行图形化界面的操作。尽量降低处理各种分支的复杂度。但是尽管如此，还是会出现诸如新来的同事搞不清楚flow导致分支被乱合，常年维护master和develop两个分支，流程太复杂以至于执行不到位等问题。之后我们在gitflow的基础上做了一些简化，去除了release分支，直接用develop做了release. 但是维护成本仍然很高。 流程会议开了很多，也各种邮件进行规范，但的确如皓哥说的，更重要的是把配套工具弄起来让大家不要犯错，而不是一味的纸面规范。","like_count":0},{"had_liked":false,"id":161717,"user_name":"金霖","can_delete":false,"product_type":"c1","uid":1322362,"ip_address":"","ucode":"8CFE41BEEB5EF7","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/7a/3a37efe4.jpg","comment_is_top":false,"comment_ctime":1576306429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576306429","product_id":100002201,"comment_content":"读了之后有个很明显的感觉就是--万事万物没有银弹：<br>很少有一种工具、方法，适合所有的情况，更多是根据自己的情况挑选最适合的方法。<br>同时要意识到，环境是在变化、技术在更新，随时有都有可能有更适合当前环境的工具，也随时有可能发生大的环境变化。<br>关心事物的本质特征，关心工具解决的核心问题，关心工具的核心原理，这样就更容易选择、切换合适的工具来提升效率、质量。","like_count":0},{"had_liked":false,"id":115210,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1563508277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563508277","product_id":100002201,"comment_content":"谢谢介绍","like_count":0},{"had_liked":false,"id":11011,"user_name":"jerry","can_delete":false,"product_type":"c1","uid":1042453,"ip_address":"","ucode":"475AA44EFF6F48","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/15/3871edb0.jpg","comment_is_top":false,"comment_ctime":1527782515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527782515","product_id":100002201,"comment_content":"我们开发测试uat环境都使用临时分支，会从master分支创建这个临时分支然后把多个功能分支合并到这个临时分支编译发布<br><br>整个研发流程大概是功能分支会关联到一个需求项目 这个项目会涉及多个应用的多个分支，当这个需求做完送测的时候会自动找到这个项目下的所有应用和分支，生成一个送测单 当然这个送测单包含了这个项目的所有变更 比如应用代码分支 配置变更 和数据库变更。然后测试通过后会在上线窗口时间批量生成上线单 也是包含所有的变更和一个变更checklist 比如有哪些分支需要合并到master 有哪些配置需要变更 有哪些sql需要执行这样，这些变更一般都是手工执行，最后自动化程序会去检查这些变更是不是执行了，没问题就执行上线流程 发布到uat及发布到生产<br>当然这些都是自动化程序去做的，只有合并到master 和执行sql是手工执行","like_count":0},{"had_liked":false,"id":5578,"user_name":"C J J","can_delete":false,"product_type":"c1","uid":1002287,"ip_address":"","ucode":"603AA1417BD0DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/2f/186918b4.jpg","comment_is_top":false,"comment_ctime":1523550144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1523550144","product_id":100002201,"comment_content":"嗯，采用什么方式管理代码还是看项目大小，人员多少。","like_count":0}]}