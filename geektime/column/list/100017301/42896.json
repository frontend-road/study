{"id":42896,"title":"17 | 跳表：为什么Redis一定要用跳表来实现有序集合？","content":"<p>上两节我们讲了二分查找算法。当时我讲到，因为二分查找底层依赖的是数组随机访问的特性，所以只能用数组来实现。如果数据存储在链表中，就真的没法用二分查找算法了吗？</p><p>实际上，我们只需要对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做<strong>跳表</strong>（Skip list），也就是今天要讲的内容。</p><p>跳表这种数据结构对你来说，可能会比较陌生，因为一般的数据结构和算法书籍里都不怎么会讲。但是它确实是一种各方面性能都比较优秀的<strong>动态数据结构</strong>，可以支持快速地插入、删除、查找操作，写起来也不复杂，甚至可以替代<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\">红黑树</a>（Red-black tree）。</p><p>Redis中的有序集合（Sorted Set）就是用跳表来实现的。如果你有一定基础，应该知道红黑树也可以实现快速地插入、删除和查找操作。<strong><span class=\"orange\">那Redis为什么会选择用跳表来实现有序集合呢？</span></strong> 为什么不用红黑树呢？学完今天的内容，你就知道答案了。</p><h2>如何理解“跳表”？</h2><p>对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是O(n)。</p><p><img src=\"https://static001.geekbang.org/resource/image/e1/6d/e18303fcedc068e5a168de04df956f6d.jpg?wh=1142*268\" alt=\"\"></p><p>那怎么来提高查找效率呢？如果像图中那样，对链表建立一级“索引”，查找起来是不是就会更快一些呢？每两个结点提取一个结点到上一级，我们把抽出来的那一级叫做<strong>索引</strong>或<strong>索引层</strong>。你可以看我画的图。图中的down表示down指针，指向下一级结点。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/14/8e/14753c824a5ee4a976ea799727adc78e.jpg?wh=1142*486\" alt=\"\"></p><p>如果我们现在要查找某个结点，比如16。我们可以先在索引层遍历，当遍历到索引层中值为13的结点时，我们发现下一个结点是17，那要查找的结点16肯定就在这两个结点之间。然后我们通过索引层结点的down指针，下降到原始链表这一层，继续遍历。这个时候，我们只需要再遍历2个结点，就可以找到值等于16的这个结点了。这样，原来如果要查找16，需要遍历10个结点，现在只需要遍历7个结点。</p><p>从这个例子里，我们看出，<strong>加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了</strong>。那如果我们再加一级索引呢？效率会不会提升更多呢？</p><p>跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。现在我们再来查找16，只需要遍历6个结点了，需要遍历的结点数量又减少了。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/65/492206afe5e2fef9f683c7cff83afa65.jpg?wh=1142*663\" alt=\"\"></p><p>我举的例子数据量不大，所以即便加了两级索引，查找效率的提升也并不明显。为了让你能真切地感受索引提升查询效率。我画了一个包含64个结点的链表，按照前面讲的这种思路，建立了五级索引。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/a9/46d283cd82c987153b3fe0c76dfba8a9.jpg?wh=1142*636\" alt=\"\"></p><p>从图中我们可以看出，原来没有索引的时候，查找62需要遍历62个结点，现在只需要遍历11个结点，速度是不是提高了很多？所以，当链表的长度n比较大时，比如1000、10000的时候，在构建索引之后，查找效率的提升就会非常明显。</p><p>前面讲的<strong>这种链表<strong><strong>加</strong></strong>多<strong><strong>级</strong></strong>索引的结构，就是跳表</strong>。我通过例子给你展示了跳表是如何减少查询次数的，现在你应该比较清晰地知道，跳表确实是可以提高查询效率的。接下来，我会定量地分析一下，用跳表查询到底有多快。</p><h2>用跳表查询到底有多快？</h2><p>前面我讲过，算法的执行效率可以通过时间复杂度来度量，这里依旧可以用。我们知道，在一个单链表中查询某个数据的时间复杂度是O(n)。那在一个具有多级索引的跳表中，查询某个数据的时间复杂度是多少呢？</p><p>这个时间复杂度的分析方法比较难想到。我把问题分解一下，先来看这样一个问题，如果链表里有n个结点，会有多少级索引呢？</p><p>按照我们刚才讲的，每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是n/2，第二级索引的结点个数大约就是n/4，第三级索引的结点个数大约就是n/8，依次类推，也就是说，<strong>第k级索引的结点个数是第k-1级索引的结点个数的1/2，<strong><strong>那</strong></strong>第k<strong><strong>级</strong></strong>索引结点的个数就是n/(2<sup>k</sup>)。</strong></p><p>假设索引有h级，最高级的索引有2个结点。通过上面的公式，我们可以得到n/(2<sup>h</sup>)=2，从而求得h=log<sub>2</sub>n-1。如果包含原始链表这一层，整个跳表的高度就是log<sub>2</sub>n。我们在跳表中查询某个数据的时候，如果每一层都要遍历m个结点，那在跳表中查询一个数据的时间复杂度就是O(m*logn)。</p><p>那这个m的值是多少呢？按照前面这种索引结构，我们每一级索引都最多只需要遍历3个结点，也就是说m=3，为什么是3呢？我来解释一下。</p><p>假设我们要查找的数据是x，在第k级索引中，我们遍历到y结点之后，发现x大于y，小于后面的结点z，所以我们通过y的down指针，从第k级索引下降到第k-1级索引。在第k-1级索引中，y和z之间只有3个结点（包含y和z），所以，我们在K-1级索引中最多只需要遍历3个结点，依次类推，每一级索引都最多只需要遍历3个结点。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/0c/d03bef9a64a0368e6a0d23ace8bd450c.jpg?wh=1142*439\" alt=\"\"></p><p>通过上面的分析，我们得到m=3，所以在跳表中查询任意数据的时间复杂度就是O(logn)。这个查找的时间复杂度跟二分查找是一样的。换句话说，我们其实是基于单链表实现了二分查找，是不是很神奇？不过，天下没有免费的午餐，这种查询效率的提升，前提是建立了很多级索引，也就是我们在<a href=\"https://time.geekbang.org/column/article/41013\">第6节</a>讲过的空间换时间的设计思路。</p><h2>跳表是不是很浪费内存？</h2><p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？我们来分析一下跳表的空间复杂度。</p><p>跳表的空间复杂度分析并不难，我在前面说了，假设原始链表大小为n，那第一级索引大约有n/2个结点，第二级索引大约有n/4个结点，以此类推，每上升一级就减少一半，直到剩下2个结点。如果我们把每层索引的结点数写出来，就是一个等比数列。</p><p><img src=\"https://static001.geekbang.org/resource/image/10/55/100e9d6e5abeaae542cf7841be3f8255.jpg?wh=1142*339\" alt=\"\"></p><p>这几级索引的结点总和就是n/2+n/4+n/8…+8+4+2=n-2。所以，跳表的空间复杂度是O(n)。也就是说，如果将包含n个结点的单链表构造成跳表，我们需要额外再用接近n个结点的存储空间。那我们有没有办法降低索引占用的内存空间呢？</p><p>我们前面都是每两个结点抽一个结点到上级索引，如果我们每三个结点或五个结点，抽一个结点到上级索引，是不是就不用那么多索引结点了呢？我画了一个每三个结点抽一个的示意图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/f7/0b0680ecf500f9349fc142e1a9eb73f7.jpg?wh=1142*378\" alt=\"\"></p><p>从图中可以看出，第一级索引需要大约n/3个结点，第二级索引需要大约n/9个结点。每往上一级，索引结点个数都除以3。为了方便计算，我们假设最高一级的索引结点个数是1。我们把每级索引的结点个数都写下来，也是一个等比数列。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/95/192c480664e35591360cee96ff2f8395.jpg?wh=1142*360\" alt=\"\"></p><p>通过等比数列求和公式，总的索引结点大约就是n/3+n/9+n/27+...+9+3+1=n/2。尽管空间复杂度还是O(n)，但比上面的每两个结点抽一个结点的索引构建方法，要减少了一半的索引结点存储空间。</p><p>实际上，在软件开发中，我们不必太在意索引占用的额外空间。在讲数据结构和算法时，我们习惯性地把要处理的数据看成整数，但是在实际的软件开发中，原始链表中存储的有可能是很大的对象，而索引结点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引结点大很多时，那索引占用的额外空间就可以忽略了。</p><h2>高效的动态插入和删除</h2><p>跳表长什么样子我想你应该已经很清楚了，它的查找操作我们刚才也讲过了。实际上，跳表这个动态数据结构，不仅支持查找操作，还支持动态的插入、删除操作，而且插入、删除操作的时间复杂度也是O(logn)。</p><p>我们现在来看下， 如何在跳表中插入一个数据，以及它是如何做到O(logn)的时间复杂度的？</p><p>我们知道，在单链表中，一旦定位好要插入的位置，插入结点的时间复杂度是很低的，就是O(1)。但是，这里为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找操作就会比较耗时。</p><p>对于纯粹的单链表，需要遍历每个结点，来找到插入的位置。但是，对于跳表来说，我们讲过查找某个结点的时间复杂度是O(logn)，所以这里查找某个数据应该插入的位置，方法也是类似的，时间复杂度也是O(logn)。我画了一张图，你可以很清晰地看到插入的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/6c/65379f0651bc3a7cfd13ab8694c4d26c.jpg?wh=1142*844\" alt=\"\"></p><p>好了，我们再来看删除操作。</p><p>如果这个结点在索引中也有出现，我们除了要删除原始链表中的结点，还要删除索引中的。因为单链表中的删除操作需要拿到要删除结点的前驱结点，然后通过指针操作完成删除。所以在查找要删除的结点的时候，一定要获取前驱结点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。</p><h2>跳表索引动态更新</h2><p>当我们不停地往跳表中插入数据时，如果我们不更新索引，就有可能出现某2个索引结点之间数据非常多的情况。极端情况下，跳表还会退化成单链表。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/c5/c863074c01c26538cf0134eaf8dc67c5.jpg?wh=1142*493\" alt=\"\"></p><p>作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中结点多了，索引结点就相应地增加一些，避免复杂度退化，以及查找、插入、删除操作性能下降。</p><p>如果你了解红黑树、AVL树这样平衡二叉树，你就知道它们是通过左右旋的方式保持左右子树的大小平衡（如果不了解也没关系，我们后面会讲），而跳表是通过随机函数来维护前面提到的“平衡性”。</p><p>当我们往跳表中插入数据的时候，我们可以选择同时将这个数据插入到部分索引层中。如何选择加入哪些索引层呢？</p><p>我们通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值K，那我们就将这个结点添加到第一级到第K级这K级索引中。</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/a7/a861445d0b53fc842f38919365b004a7.jpg?wh=1142*846\" alt=\"\"></p><p>随机函数的选择很有讲究，从概率上来讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。至于随机函数的选择，我就不展开讲解了。如果你感兴趣的话，可以看看我在GitHub上的代码或者Redis中关于有序集合的跳表实现。</p><p>跳表的实现还是稍微有点复杂的，我将Java实现的代码放到了GitHub中，你可以根据我刚刚的讲解，对照着代码仔细思考一下。你不用死记硬背代码，跳表的实现并不是我们这节的重点。</p><h2>解答开篇</h2><p>今天的内容到此就讲完了。现在，我来讲解一下开篇的思考题：为什么Redis要用跳表来实现有序集合，而不是红黑树？</p><p>Redis中的有序集合是通过跳表来实现的，严格点讲，其实还用到了散列表。不过散列表我们后面才会讲到，所以我们现在暂且忽略这部分。如果你去查看Redis的开发手册，就会发现，Redis中的有序集合支持的核心操作主要有下面这几个：</p><ul>\n<li>\n<p>插入一个数据；</p>\n</li>\n<li>\n<p>删除一个数据；</p>\n</li>\n<li>\n<p>查找一个数据；</p>\n</li>\n<li>\n<p>按照区间查找数据（比如查找值在[100, 356]之间的数据）；</p>\n</li>\n<li>\n<p>迭代输出有序序列。</p>\n</li>\n</ul><p>其中，插入、删除、查找以及迭代输出有序序列这几个操作，红黑树也可以完成，时间复杂度跟跳表是一样的。但是，按照区间来查找数据这个操作，红黑树的效率没有跳表高。</p><p>对于按照区间查找数据这个操作，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。</p><p>当然，Redis之所以用跳表来实现有序集合，还有其他原因，比如，跳表更容易代码实现。虽然跳表的实现也不简单，但比起红黑树来说还是好懂、好写多了，而简单就意味着可读性好，不容易出错。还有，跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗。</p><p>不过，跳表也不能完全替代红黑树。因为红黑树比跳表的出现要早一些，很多编程语言中的Map类型都是通过红黑树来实现的。我们做业务开发的时候，直接拿来用就可以了，不用费劲自己去实现一个红黑树，但是跳表并没有一个现成的实现，所以在开发中，如果你想使用跳表，必须要自己实现。</p><h2>内容小结</h2><p>今天我们讲了跳表这种数据结构。跳表使用空间换时间的设计思路，通过构建多级索引来提高查询的效率，实现了基于链表的“二分查找”。跳表是一种动态数据结构，支持快速地插入、删除、查找操作，时间复杂度都是O(logn)。</p><p>跳表的空间复杂度是O(n)。不过，跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗。虽然跳表的代码实现并不简单，但是作为一种动态数据结构，比起红黑树来说，实现要简单多了。所以很多时候，我们为了代码的简单、易读，比起红黑树，我们更倾向用跳表。</p><h2>课后思考</h2><p>在今天的内容中，对于跳表的时间复杂度分析，我分析了每两个结点提取一个结点作为索引的时间复杂度。如果每三个或者五个结点提取一个结点作为上级索引，对应的在跳表中查询数据的时间复杂度是多少呢？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p><hr><p><span class=\"orange\">我已将本节内容相关的详细代码更新到GitHub，<a href=\"https://github.com/wangzheng0822/algo\">戳此</a>即可查看。</span></p>","comments":[{"had_liked":false,"id":43344,"user_name":"张先生","can_delete":false,"product_type":"c1","uid":1229114,"ip_address":"","ucode":"E5E11D15CAC1D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/3a/2ce09963.jpg","comment_is_top":false,"comment_ctime":1543217754,"is_pvip":false,"discussion_count":107,"race_medal":0,"score":"3922848359002","product_id":100017301,"comment_content":"为什么评论区的都这么优秀，为什么我这么菜，我该怎么办😱 ","like_count":912,"discussions":[{"author":{"id":1299216,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/10/733f3cc9.jpg","nickname":"欧智明","note":"","ucode":"86C9AD979C568A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67225,"discussion_content":"这是一个让灵魂休息的评论","likes_number":45,"is_delete":false,"is_hidden":false,"ctime":1575125231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1299216,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/10/733f3cc9.jpg","nickname":"欧智明","note":"","ucode":"86C9AD979C568A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81907,"discussion_content":"😂","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1576293890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":67225,"ip_address":""},"score":81907,"extra":""}]},{"author":{"id":1266323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/52/93/21584bd3.jpg","nickname":"贝婷少爷","note":"","ucode":"FD7A51C404F8F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112690,"discussion_content":"这层是菜鸟驿站？","likes_number":36,"is_delete":false,"is_hidden":false,"ctime":1577879555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512860,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Rr8ABLicfgJHZ3xs3bXNjHdicwVN0zBiaFtIEXw4D1licedSuia3zicxJC4lqtrNwPmCeAW5UR2Ugia0dNfcvtXYnpOwQ/132","nickname":"LearnAndTry","note":"","ucode":"0ECF4398C870DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222455,"discussion_content":"幸存者偏差。菜的人都不敢说话😂","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1586146339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305210,"discussion_content":"没事，你和我一样还是知道自己菜的。有些憨憨还不知道自己菜(就像两年前的我)","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1599817758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1227447,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoLuYlxY5PGFJvWHSKeibjd4ayPhXvuHCSUjlNZWzaSZw5Ybqicv2jpwDZo7dp0AHpFO7hZsKERvlicg/132","nickname":"JJing","note":"","ucode":"543FBE91A091D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327500,"discussion_content":"哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605851850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305210,"ip_address":""},"score":327500,"extra":""}]},{"author":{"id":1024164,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","nickname":"阿斯蒂芬","note":"","ucode":"61D5E3BDA4EBC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215068,"discussion_content":"不慌，能冲到点赞榜第一也是一种优秀","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1585279973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094043,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f3/db/3b540ba1.jpg","nickname":"Aii","note":"","ucode":"A2D8709CE7563D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348091,"discussion_content":"看完自己写的代码，可以干两大碗饭","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1612424874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1331817,"avatar":"https://static001.geekbang.org/account/avatar/00/14/52/69/5dbff973.jpg","nickname":"瑜","note":"","ucode":"75CC3023EEE55E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49764,"discussion_content":"俺也一样","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1573633152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2411191,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ca/b7/154630b5.jpg","nickname":"龙","note":"","ucode":"E72EAF0130D320","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360489,"discussion_content":"俺也一样","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1616463035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007674,"avatar":"","nickname":"Caesar","note":"","ucode":"E13A318A13669D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280105,"discussion_content":"你信不信我还是开发好多年的coder，也是慌得很，可是再慌也得学习，而后就觉得不慌了，从现在开始学就是了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1591494774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117962,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoFjkKTSiceSmJbpnVqUiaf04icePSUU5OISTA14mVxoZcK3lLZBu7Q8wvPm8PFUcqWNPTx6sY4aKyNg/132","nickname":"Geek_fcb60e","note":"","ucode":"83BDA792DEF0B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388082,"discussion_content":"看了这么多兄弟有这样的感慨，我烦躁的心，瞬间平静","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1628584248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139839,"avatar":"https://static001.geekbang.org/account/avatar/00/11/64/7f/4bd8dbe6.jpg","nickname":"听说少年","note":"","ucode":"0CA7F9DBAB9379","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78756,"discussion_content":"太菜的话 只管先大概学一遍 再进行第二遍学习即可！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1576014591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1890452,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiartmgOY37cyzpYRicGBy7ZSnzZzmozxqaXE7Xm1aA3ubicDhMOIsfgibicFicvKA0NJ61YdicgXTdHpOw/132","nickname":"hxloongs","note":"","ucode":"8CFAF37C0DB1F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347844,"discussion_content":"我不是菜，我是超下饭呢~","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612339013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1513298,"avatar":"https://static001.geekbang.org/account/avatar/00/17/17/52/a891caa2.jpg","nickname":"顶级潇洒","note":"","ucode":"4B689B7DAD508D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1890452,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiartmgOY37cyzpYRicGBy7ZSnzZzmozxqaXE7Xm1aA3ubicDhMOIsfgibicFicvKA0NJ61YdicgXTdHpOw/132","nickname":"hxloongs","note":"","ucode":"8CFAF37C0DB1F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348144,"discussion_content":"来一壶酒，一起下饭","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612441061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347844,"ip_address":""},"score":348144,"extra":""}]},{"author":{"id":1194626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","nickname":"牛牛","note":"","ucode":"CFCE68B4F92209","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222577,"discussion_content":"2020.4月份了、我还是这么菜、在慌慌的「大概过一遍」, 看着评论区优秀的同学、只有一个想法、先看完第一遍「大概懂了思想」就好^.^","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586158854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1194626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","nickname":"牛牛","note":"","ucode":"CFCE68B4F92209","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223261,"discussion_content":"我也很菜，共同努力吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586195753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222577,"ip_address":""},"score":223261,"extra":""},{"author":{"id":1194626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","nickname":"牛牛","note":"","ucode":"CFCE68B4F92209","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":223315,"discussion_content":"一起加油～^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586216022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":223261,"ip_address":""},"score":223315,"extra":""},{"author":{"id":1056982,"avatar":"https://static001.geekbang.org/account/avatar/00/10/20/d6/b9513db0.jpg","nickname":"kingcall","note":"","ucode":"508884DC684B5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","nickname":"牛牛","note":"","ucode":"CFCE68B4F92209","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227398,"discussion_content":"四月份飘过的我","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586489365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222577,"ip_address":""},"score":227398,"extra":""}]},{"author":{"id":1576240,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlibCGekRp9bxJ3dGfOWghhNVdF771ejzwqKnicKFBpmGuutwNGF3HGZz7KEEz2mdvPckibReRsVtDw/132","nickname":"Geek_e6159b","note":"","ucode":"0684569F9B114D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323224,"discussion_content":"俺也一样。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604901943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028940,"avatar":"","nickname":"Geek6561","note":"","ucode":"D44141D4AD2587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298959,"discussion_content":"you are not alone","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597491400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1983006,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdxvFhbrkicjZdC2qfZHb09MdccMTlgXhEHaSlrgvtpSXliaJlMbMvyiawJzv32GKXjYDZOz0lRLkSwQ/132","nickname":"Geek_20200427","note":"","ucode":"800B238957BF8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259709,"discussion_content":"太惨了 我是为了马上秋招来准备的 基础差的一批阿\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588812588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249550,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/0e/ec1008ee.jpg","nickname":"雨醉风尘","note":"","ucode":"0E8930F033DD63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248697,"discussion_content":"你不是一个人在战斗😂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587889048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1458737,"avatar":"https://static001.geekbang.org/account/avatar/00/16/42/31/127e4be8.jpg","nickname":"美食家","note":"","ucode":"8192AC29AFF915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190658,"discussion_content":"你不是一个人","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582968572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1440025,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f9/19/7c3b12ee.jpg","nickname":"Geek_deb968","note":"","ucode":"2305597B009AF3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":149564,"discussion_content":"你身后有一只军队","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579764029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1171287,"avatar":"https://static001.geekbang.org/account/avatar/00/11/df/57/04aa341d.jpg","nickname":"kissyoudyb","note":"","ucode":"D857723B31692C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24043,"discussion_content":"因为比你菜的都不知道咋回复，就像我","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569987694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2721761,"avatar":"https://static001.geekbang.org/account/avatar/00/29/87/e1/b85dce85.jpg","nickname":"无尽蔚蓝","note":"","ucode":"A665DF46833A81","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586108,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661991833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042644,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/d4/a0c2569d.jpg","nickname":"骑白马的菜鸟","note":"","ucode":"6BD69C742B3AE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406230,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634725320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415358,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/fe/18ef6624.jpg","nickname":"苏雄伟","note":"","ucode":"80B47C41FD267A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402801,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633951359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621546,"avatar":"https://static001.geekbang.org/account/avatar/00/28/00/6a/28659622.jpg","nickname":"MWM1C","note":"","ucode":"734BD1FC119481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401587,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633695745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264131,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8c/43/c41e985b.jpg","nickname":"卡拉卡拉啦卡","note":"","ucode":"C89528DDF4B379","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399175,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632916137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667256,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/b8/915a77a6.jpg","nickname":"冰箢","note":"","ucode":"5954B5910958DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396084,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632390090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2741577,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d5/49/e39e391d.jpg","nickname":"晚拜拜了安","note":"","ucode":"F7BB1956C8F2CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391315,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630397908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2280639,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqs5jaG6dMPpYCeZAbiawyMPe4ib1xCiccdbdOeox1OeJqUVbnOul5TVBibFWR8eibRW2R6T4amibeOTVuw/132","nickname":"15652825355","note":"","ucode":"4186B4AEB101DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390989,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630217666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182706,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0b/f2/5ab5d0ae.jpg","nickname":"David","note":"","ucode":"DA3A253480CB7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390045,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629622213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095136,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b5/e0/fc3ac264.jpg","nickname":"stronger.","note":"","ucode":"AD0F2BE338824C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388442,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628763507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2245999,"avatar":"https://static001.geekbang.org/account/avatar/00/22/45/6f/5d3ad7f4.jpg","nickname":"D.L.X.","note":"","ucode":"631E3A38898E85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387554,"discussion_content":"又来一位俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628242618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2261379,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUFlHXXQb1egqE1MBlDmCnic4lOn3PY2QPwxhXxYcvgLrNjUiagGTvHGh7p1UaMnucgXl6DRic1q99g/132","nickname":"Geek_e23872","note":"","ucode":"E4F6B14FC616DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387216,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628057182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1560646,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d0/46/2a4fec72.jpg","nickname":"走走～ 停停","note":"","ucode":"083B0027B2DEE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387186,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628040365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1743350,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/99/f6/b1310a47.jpg","nickname":"Fans","note":"","ucode":"D3A068FD3C0A83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385815,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627285901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2622175,"avatar":"","nickname":"Geek_5837ba","note":"","ucode":"1E0C70E185872A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385187,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626936289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459059,"avatar":"https://static001.geekbang.org/account/avatar/00/25/85/b3/248aec64.jpg","nickname":"sunyata","note":"","ucode":"3E69087C2060E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384044,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626343529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662987,"avatar":"https://static001.geekbang.org/account/avatar/00/19/60/0b/d7dddf19.jpg","nickname":"皮皮","note":"","ucode":"8C986AA546B44E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383994,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626331319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2648883,"avatar":"https://static001.geekbang.org/account/avatar/00/28/6b/33/62e2d59e.jpg","nickname":"南风清酒","note":"","ucode":"01605C137D352E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383882,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626266409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087726,"avatar":"https://static001.geekbang.org/account/avatar/00/10/98/ee/9d162043.jpg","nickname":"文艺科技青年","note":"","ucode":"4801899BC41B13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380489,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624527973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379195,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623749315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/56/315c5be7.jpg","nickname":"青鸟","note":"","ucode":"A4818C5C0C688D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357390,"discussion_content":"没错我也是菜批。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615799412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337386,"discussion_content":"要比菜别跟我抢 行吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608887742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227447,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoLuYlxY5PGFJvWHSKeibjd4ayPhXvuHCSUjlNZWzaSZw5Ybqicv2jpwDZo7dp0AHpFO7hZsKERvlicg/132","nickname":"JJing","note":"","ucode":"543FBE91A091D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327501,"discussion_content":"你不是一个人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605851870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126824,"avatar":"https://static001.geekbang.org/account/avatar/00/11/31/a8/ddedbb50.jpg","nickname":"林克","note":"","ucode":"98190D205B9D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319085,"discussion_content":"俺也一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603938729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2226640,"avatar":"","nickname":"Geek_8ccfdc","note":"","ucode":"1D7B5DB78535B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312601,"discussion_content":"俺也是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602746010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302059,"discussion_content":"你不是一个人...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598775482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1909732,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","nickname":"Geek_99ae14","note":"","ucode":"268852986A6B69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301023,"discussion_content":"我不是第一个评论你的，肯定也不是最后一个评论你的，你该知道你不是一个人了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598367736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252056,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1a/d8/4a051faa.jpg","nickname":"🍀 🍀 🍀 🐼","note":"","ucode":"1D22FEE1E50117","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292423,"discussion_content":"顶你上去","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595221135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451364,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","nickname":"黑洞","note":"","ucode":"840A4330B1B2F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291029,"discussion_content":"跟上","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594686688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406090,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/8a/d5b0cf30.jpg","nickname":"kyl","note":"","ucode":"DBDFD0FEB5A135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287663,"discussion_content":"you are not single","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593505398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2031100,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/fd/fc/e4424fe9.jpg","nickname":"……","note":"","ucode":"275ECA23B13DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282232,"discussion_content":"6月前来报到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591926354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143545,"discussion_content":"一楼以后是菜的了\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579513891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83332,"discussion_content":"刚好250个赞,我不忍心点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576421977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1211359,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","nickname":"kings","note":"","ucode":"D478306EBF582E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84181,"discussion_content":"给你251","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576493944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":83332,"ip_address":""},"score":84181,"extra":""}]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69934,"discussion_content":"菜的不知道怎么回复","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575301194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729853,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/65/3d/afc2e163.jpg","nickname":"西谷","note":"","ucode":"0378211B2359E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63813,"discussion_content":"哈哈哈，你不是一个人\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574913198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5146,"discussion_content":"天天拱","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566011212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3697,"discussion_content":"因为好多菜的都不知道咋回复，我也是","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1564717633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1798640,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/71/f0/07c72ca6.jpg","nickname":"勤奋的樂","note":"","ucode":"BF341C5378097F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590413,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665726521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580441,"discussion_content":"我也是，菜的很稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658189668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445362,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","nickname":"李金鹏","note":"","ucode":"8FCCA5B8BD8DDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580277,"discussion_content":"你代表了很多人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658061856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055696,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/USbsicTvESSEM8CKwDoLsIk4IhpKFVqTyhS7zMksu8XgmiayNnlTX2aO62liavApicF5cIKZFexUZVztUvj4SRtEhw/132","nickname":"小明明","note":"","ucode":"CADE860269BFA4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578261,"discussion_content":"摆烂一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656634721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2283490,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d7/e2/5e5cc8f3.jpg","nickname":"Molyt","note":"","ucode":"9CCF7A18B2C547","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575581,"discussion_content":"看到这么多人点赞，菜鸟的我默默留下了评论T_T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654937628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401847,"avatar":"https://static001.geekbang.org/account/avatar/00/15/63/f7/31429e9a.jpg","nickname":"尼古拉斯赵四","note":"","ucode":"EB08189EEC7AD3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571675,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652342554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2020865,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/d6/01/eaa50203.jpg","nickname":"zft","note":"","ucode":"74DEC5FBA610B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557490,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647834406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097790,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/3e/ff3ed621.jpg","nickname":"云起","note":"","ucode":"1642C543B47B87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542774,"discussion_content":"人的进步始于承认自己菜😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640840453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451826,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/4C2AgnHBt1qmRSiaqPQfEPicCdEJp6IgLC1wsVJPa1zQoRztNaZcqiaRXIblkRc1sgn7dUdPmrE011uFbibEQtia3bg/132","nickname":"石天兰爱学习","note":"","ucode":"0D95CDA7463516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538580,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639449864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097790,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/3e/ff3ed621.jpg","nickname":"云起","note":"","ucode":"1642C543B47B87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532101,"discussion_content":"菜鸟驿站歇会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637516243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2813766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","nickname":"小竹子","note":"","ucode":"D20F56114426EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530389,"discussion_content":"我也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637065005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2270984,"avatar":"https://static001.geekbang.org/account/avatar/00/22/a7/08/1e7e9da8.jpg","nickname":"le","note":"","ucode":"E731F5326107ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530348,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637058725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502390,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ec/b6/4f7e13f3.jpg","nickname":"Selfimpr","note":"","ucode":"0DD1989850F230","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410713,"discussion_content":"愁人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635764811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1533999,"avatar":"https://static001.geekbang.org/account/avatar/00/17/68/2f/fb25a9ef.jpg","nickname":"sunflower","note":"","ucode":"E1E494D59F88C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332864,"discussion_content":"还有我","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607356950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2204462,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IY4fLqdVwCPlW7xJicz3nZm4OePT0o20tDZj1Hiauk2b0iaHMQcSOGpamLt9b72hYVG72sgRWic1BHY3uCvibWcfickw/132","nickname":"Grocker","note":"","ucode":"DF2E19A65DEAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312088,"discussion_content":"I am with you.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602580949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2176120,"avatar":"https://static001.geekbang.org/account/avatar/00/21/34/78/be7fff00.jpg","nickname":"十年灯","note":"","ucode":"65D97391184CF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307573,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600689122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236800,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/40/5527fb46.jpg","nickname":"jery","note":"","ucode":"EDA86CE9E9C0FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304881,"discussion_content":"原来同道中人不少啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599705746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347207,"avatar":"","nickname":"Ethan","note":"","ucode":"3B4E8B0B50E6AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303029,"discussion_content":"原来不止我自己—_—|||","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599117889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1611025,"avatar":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","nickname":"沈康","note":"","ucode":"02AFA50738AB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280450,"discussion_content":"为了这个美。还是得倒回去学习~！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591541685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2007356,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/a1/3c/8f99eda0.jpg","nickname":"紫腾","note":"","ucode":"2140926A4C9B33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272999,"discussion_content":"同上，基础差的一批","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590389113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1417145,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/b9/b7423728.jpg","nickname":"鲨鱼辣椒","note":"","ucode":"6060F73DC67D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268964,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589852135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1417145,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/b9/b7423728.jpg","nickname":"鲨鱼辣椒","note":"","ucode":"6060F73DC67D19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277067,"discussion_content":"你也不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590992770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":268964,"ip_address":""},"score":277067,"extra":""},{"author":{"id":1500474,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/3a/77cb17b9.jpg","nickname":"James","note":"","ucode":"27DBA39932FD26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284825,"discussion_content":"你也不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592653714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277067,"ip_address":""},"score":284825,"extra":""},{"author":{"id":2047825,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/3f/51/e4ac90a3.jpg","nickname":"nature calls","note":"","ucode":"2184AD76B6D61C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1500474,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/3a/77cb17b9.jpg","nickname":"James","note":"","ucode":"27DBA39932FD26","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287640,"discussion_content":"你也不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593501680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284825,"ip_address":""},"score":287640,"extra":""}]},{"author":{"id":1380312,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0f/d8/9286b272.jpg","nickname":"leetcode","note":"","ucode":"3B8C3668A0DE74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260997,"discussion_content":"409个赞了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588926165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253055,"discussion_content":"四月份的我也在飘过，马上要到五一放假了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588212535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":9,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1981613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","nickname":"Geek_ac7784","note":"","ucode":"62F0E5E6D6F4BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":259154,"discussion_content":"看到同阶段的人了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588764851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":253055,"ip_address":""},"score":259154,"extra":""},{"author":{"id":1399904,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","nickname":"Obed","note":"","ucode":"8717488DD14AB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1981613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","nickname":"Geek_ac7784","note":"","ucode":"62F0E5E6D6F4BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259797,"discussion_content":"看到同阶段的人了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588818306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":259154,"ip_address":""},"score":259797,"extra":""},{"author":{"id":1144830,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/fe/03073374.jpg","nickname":"王秋城","note":"","ucode":"198F27F8D08A5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1399904,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","nickname":"Obed","note":"","ucode":"8717488DD14AB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260810,"discussion_content":"看到同阶段的人了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588903686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":259797,"ip_address":""},"score":260810,"extra":""}]},{"author":{"id":1796758,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6a/96/bb258b34.jpg","nickname":"张博文","note":"","ucode":"63C40ECAD68DE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221670,"discussion_content":"上盘新菜吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586044150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1678269,"avatar":"https://static001.geekbang.org/account/avatar/00/19/9b/bd/f863950d.jpg","nickname":"🙈 浣花水榭","note":"","ucode":"14BF7F61860871","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174609,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581930605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250748,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/bc/20ffd8d1.jpg","nickname":"Never too late","note":"","ucode":"A6ECC0D3907181","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170108,"discussion_content":"我发现我不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581670136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439775,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/1f/0241cc9e.jpg","nickname":"思城","note":"","ucode":"DD5604B3A5DD5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":137450,"discussion_content":"下饭就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579186451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388875,"avatar":"https://static001.geekbang.org/account/avatar/00/15/31/4b/0f5b3a0a.jpg","nickname":"Glee","note":"","ucode":"AA0D428E34D29E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115535,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578018102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691517,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/7d/d9085aaa.jpg","nickname":"punnpkin","note":"","ucode":"E635BD016D892F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89830,"discussion_content":"我也是很菜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576762983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339443,"avatar":"https://static001.geekbang.org/account/avatar/00/14/70/33/c4b2faa2.jpg","nickname":"LittlePenguin","note":"","ucode":"2772CD5877F9E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39508,"discussion_content":"我也菜\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571933056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116188,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/1c/ef15e661.jpg","nickname":" 臣馟飞扬","note":"","ucode":"F2F882B7678055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31812,"discussion_content":"菜的不知道咋回复，我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570960394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24593,"discussion_content":"因为好多菜的都不知道咋回复，我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570188580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":10,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35768,"user_name":"leo","can_delete":false,"product_type":"c1","uid":1107385,"ip_address":"","ucode":"0A3D3508398328","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhicDSmL4vicPF4mF9g5icORERwDSqZv5Guk0TyhiacuBsiaVxCdktI6oCrKzcycwFlpyL6Q1nDbvJZzA/132","comment_is_top":false,"comment_ctime":1540785511,"is_pvip":false,"replies":[{"id":"12735","content":"👍","user_name":"作者回复","comment_id":35768,"uid":"1190123","ip_address":"","utype":1,"ctime":1540811684,"user_name_real":"gg"}],"discussion_count":9,"race_medal":0,"score":"1285736007015","product_id":100017301,"comment_content":"跳表是我非常喜欢的数据结构，之前写过一篇文章，希望大家斧正（https:&#47;&#47;cloud.tencent.com&#47;developer&#47;article&#47;1353762）。另外，严格来讲，Redis的对象系统中的每种对象实际上都是基于使用场景选择多种底层数据结构实现的，比如ZSET就是基于【压缩列表】或者【跳跃表+字典】（这也跟之前排序中提到的Sort包实现的思想一样，基于数据规模选择合适的排序算法），体现了Redis对于性能极致的追求。","like_count":299,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427661,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2853618,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/8a/f2/6c6f7886.jpg","nickname":"。。","note":"","ucode":"A52A6043D27D87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535859,"discussion_content":"大佬，有个疑惑，在删除的时候，如果每次删除的节点都恰好是有索引的，那么把该节点和上层的索引节点删除是没有问题的，但是随着删除的增多，每次又恰好把索引节点也删除了，那么这样不就变成新增的问题了吗，极端情况下会变成一个链了，如何解决呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638583235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239857,"avatar":"https://static001.geekbang.org/account/avatar/00/12/eb/31/96b76ca8.jpg","nickname":"起点·终站","note":"","ucode":"A5AD31F28C240E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42574,"discussion_content":"看不懂，忧伤了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572701528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581509,"avatar":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","nickname":"X","note":"","ucode":"BE05C1D25CE313","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546077,"discussion_content":"秀啊，大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642153193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042644,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/d4/a0c2569d.jpg","nickname":"骑白马的菜鸟","note":"","ucode":"6BD69C742B3AE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406240,"discussion_content":"redis每种类型其实都是基于使用场景还有数据量选择不同的数据结构实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634728616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1689284,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/c4/12f24def.jpg","nickname":"脚踏实地","note":"","ucode":"FEEB4D71D388C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327729,"discussion_content":"阿里高开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605927660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2133309,"avatar":"https://static001.geekbang.org/account/avatar/00/20/8d/3d/91b1afd3.jpg","nickname":"小北","note":"","ucode":"8FE84905F0E073","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303353,"discussion_content":"腾讯高开。。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599214888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111824,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/10/11b2b496.jpg","nickname":"wendell","note":"","ucode":"982A8122912BC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270697,"discussion_content":"大佬，你太优秀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590038292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1093258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","nickname":"赤云","note":"","ucode":"67476D582D8B6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202594,"discussion_content":"skr\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583935426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35692,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1540764449,"is_pvip":true,"replies":[{"id":"12697","content":"👍 ","user_name":"作者回复","comment_id":35692,"uid":"1190123","ip_address":"","utype":1,"ctime":1540777449,"user_name_real":"gg"}],"discussion_count":9,"race_medal":2,"score":"559886512929","product_id":100017301,"comment_content":"如果每三个或者五个节点提取一个节点作为上级索引，那么对应的查询数据时间复杂度，应该也还是 O(logn)。<br><br>假设每 5 个节点提取，那么最高一层有 5 个节点，而跳表高度为 log5n，每层最多需要查找 5 个节点，即 O(mlogn) 中的 m = 5，最终，时间复杂度为 O(logn)。<br><br>空间复杂度也还是 O(logn)，虽然省去了一部分索引节点，但是似乎意义不大。<br><br>不知道在一般的生产系统，跳表的提取是按照多少个节点来实现？还是每个系统根据实际情况，都不一样。<br><br>看了跳表的 Java 实现，查找部分的代码真是漂亮，插入部分看了半天才看明白。","like_count":130,"discussions":[{"author":{"id":1476984,"avatar":"https://static001.geekbang.org/account/avatar/00/16/89/78/311dbb8b.jpg","nickname":"这个名字居然都有","note":"","ucode":"8972F5BF888261","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2305,"discussion_content":"空间复杂度应该是0(n)吧","likes_number":39,"is_delete":false,"is_hidden":false,"ctime":1563446672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1739011,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/89/03/8498c7d5.jpg","nickname":"小K","note":"","ucode":"DA39D5CC847BEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76901,"discussion_content":"以m个节点提取，时间复杂度准确表达应该是O(mlogmn)，当m较小的时候，还是可以认为最终时间复杂度为 O(logn)，但m较大就不能忽略了。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1575866039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686840,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","nickname":"Lance","note":"","ucode":"CCE52F86EEBBED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":118094,"discussion_content":"m不应该是6吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578148278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1244817,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fe/91/0ee2741a.jpg","nickname":"吉页","note":"","ucode":"8E25056FB25012","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1686840,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","nickname":"Lance","note":"","ucode":"CCE52F86EEBBED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133516,"discussion_content":"应该是5，因为按照稳中分析的那张图，z点已经在上一层比较过了，是小于z的，下一层中应该不用查找了。也就是按照文中的图k-1级索引中只会读取y和后边那个没有标记的点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578968738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":118094,"ip_address":""},"score":133516,"extra":""},{"author":{"id":1746512,"avatar":"","nickname":"Geek_40e374","note":"","ucode":"6C93E9E8828FEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1244817,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fe/91/0ee2741a.jpg","nickname":"吉页","note":"","ucode":"8E25056FB25012","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214899,"discussion_content":"按照你这个说法，应该是4了，每层开始和结尾的节点在上层都比较过了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585238673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":133516,"ip_address":""},"score":214899,"extra":""},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1244817,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fe/91/0ee2741a.jpg","nickname":"吉页","note":"","ucode":"8E25056FB25012","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541929,"discussion_content":"通过down找下个索引也算1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640606792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":133516,"ip_address":""},"score":541929,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427629,"discussion_content":"👍 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1540777449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305929,"discussion_content":"文章讲了 实际开发中 value值占用空间更多，索引仅仅是一个数值标记以及对应的指针，所以实际效果会更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600132700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294982,"discussion_content":"他应该笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596046553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35761,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1540784379,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"443922415867","product_id":100017301,"comment_content":"看了下老师github上的实现(java版本)，不是很理解，尤其是数组Node forward[]的作用，能多加些注释或讲解一下吗","like_count":103,"discussions":[{"author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3940,"discussion_content":"作者的思路很清晰，不过画的图感觉跟代码不是很对应，代码理解起来比较费劲吧。代码意思其实是每个数据只有一个节点，这个节点的forwards指向的是所有后续节点 ，而不是像图中所画的一个数据分好多个节点 我在网上搜了其他文章 可以参考一下 https://juejin.im/post/57fa935b0e3dd90057c50fbc","likes_number":48,"is_delete":false,"is_hidden":false,"ctime":1564996028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1803317,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/84/35/7d476c68.jpg","nickname":"di调(^_^)薛","note":"","ucode":"9FC5BA6A8A7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159488,"discussion_content":"确实是文章的图例 有误导。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580699267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3940,"ip_address":""},"score":159488,"extra":""},{"author":{"id":1081582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","nickname":"小肥羊","note":"","ucode":"9F44BAA1A59FAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194638,"discussion_content":"这个链接的图让我一下子就知道forwards是干什么用的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583237413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3940,"ip_address":""},"score":194638,"extra":""},{"author":{"id":1556708,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","nickname":"ant","note":"","ucode":"A39A03AF257471","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312013,"discussion_content":"明白人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602561571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3940,"ip_address":""},"score":312013,"extra":""}]},{"author":{"id":2212143,"avatar":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","nickname":"油纸伞","note":"","ucode":"C2655B9F8874E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343466,"discussion_content":"老师的老师githu 地址在哪里呀","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611053769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2790031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UIImmYqAmhyFp1scKEKnCJwfaLnhObQiaYOX1hVlR0RGgH6Psx4ue3R5Cib8naxZSAehk1DMUbWz8afzAKMibGHfA/132","nickname":"Geek_3beb80","note":"","ucode":"C7D5365E39D381","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411743,"discussion_content":"我给老师写的代码加上了注释，感兴趣的可以看看https://juejin.cn/post/7009520476447997966","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635992438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1556708,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","nickname":"ant","note":"","ucode":"A39A03AF257471","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312014,"discussion_content":"实际老师写的代码和文章确实存在一定的出入，git上的代码建议大家，插入几个节点来试试，你会发现，每个元素为一个节点，每个forwards实际是当前节点值的后续节点，与层级实际关系不大。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602561709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2065943,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/86/17/0afc84df.jpg","nickname":"jackfan","note":"","ucode":"B61A63A2215A49","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300360,"discussion_content":"forward是存储每个节点从自身所在的最高层到最底层的下一个节点，数组的下标表示同层数的下一个（右边的）节点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598063407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1898292,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","nickname":"jack","note":"","ucode":"A2253AC8570C5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2065943,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/86/17/0afc84df.jpg","nickname":"jackfan","note":"","ucode":"B61A63A2215A49","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":306061,"discussion_content":"再说明白一点，p.forwards[i]表示节点p的第i层的下一个节点。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1600158468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300360,"ip_address":""},"score":306061,"extra":""},{"author":{"id":1556708,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYLPAlGUWic4yAqsGtEYBSRR7gDjyg9yiaJicNhMwiaNw4rMKQ5DHTfp7gmic0gpqEwCZaou8G6CdHKCg/132","nickname":"ant","note":"","ucode":"A39A03AF257471","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2065943,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/86/17/0afc84df.jpg","nickname":"jackfan","note":"","ucode":"B61A63A2215A49","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":312012,"discussion_content":"建议debug跑跑代码，你会有不一样的发现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602561536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300360,"ip_address":""},"score":312012,"extra":""}]},{"author":{"id":1150587,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8e/7b/e900315a.jpg","nickname":"DH","note":"","ucode":"1B9AC45966DE08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289563,"discussion_content":"上面链接的文章不错哦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594134352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1463431,"avatar":"","nickname":"Geek_b92851","note":"","ucode":"2E3D6490796C5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366306,"discussion_content":"1. 0层会保存所有节点，其他层是索引 2.forwad[] 是用来存储各个层对应的后续节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618023513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35707,"user_name":"董航","can_delete":false,"product_type":"c1","uid":1231787,"ip_address":"","ucode":"9CA208FD26F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/ab/1aac53bf.jpg","comment_is_top":false,"comment_ctime":1540772976,"is_pvip":false,"replies":[{"id":"12694","content":"后面还会讲 你说的没错 👍","user_name":"作者回复","comment_id":35707,"uid":"1190123","ip_address":"","utype":1,"ctime":1540777289,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"435332469872","product_id":100017301,"comment_content":"redis有序集合是跳跃表实现的，直接这么说有失偏驳，他是复合数据结构，准确说应该是由一个双hashmap构成的字典和跳跃表实现的，不知道我说的有问题吗😊","like_count":101,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427638,"discussion_content":"后面还会讲 你说的没错 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540777289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200916,"avatar":"https://static001.geekbang.org/account/avatar/00/12/53/14/2b93d757.jpg","nickname":"colonel","note":"","ucode":"F71EE1C23A8D83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9553,"discussion_content":"有序集合，是一个hashmap+skiplist实现的。原理大致是元素值存储在dict中，同时也存储在skiplist中。在插入结点的时候，现在dict中查找，找到则不再去插入，找不到才去执行查找位置并插入 。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1568187061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36113,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1540946827,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"336548395915","product_id":100017301,"comment_content":"总结：<br>一、什么是跳表？<br>为一个值有序的链表建立多级索引，比如每2个节点提取一个节点到上一级，我们把抽出来的那一级叫做索引或索引层。如下图所示，其中down表示down指针，指向下一级节点。以此类推，对于节点数为n的链表，大约可以建立log2n-1级索引。像这种为链表建立多级索引的数据结构就称为跳表。<br>二、跳表的时间复杂度？<br>1.计算跳表的高度<br>如果链表有n个节点，每2个节点抽取抽出一个节点作为上一级索引的节点，那第1级索引的节点个数大约是n&#47;2，第2级索引的节点个数大约是n&#47;4，依次类推，第k级索引的节点个数就是n&#47;(2^k)。假设索引有h级别，最高级的索引有2个节点，则有n&#47;(2^h)=2，得出h=log2n-1，包含原始链表这一层，整个跳表的高度就是log2n。<br>2.计算跳表的时间复杂度<br>假设我们在跳表中查询某个数据的时候，如果每一层都遍历m个节点，那在跳表中查询一个数据的时间复杂度就是O(m*logn)。那这个m是多少呢？如下图所示，假设我们要查找的数据是x，在第k级索引中，我们遍历到y节点之后，发现x大于y，小于后面的节点z，所以我们通过y的down指针，从第k级下降到第k-1级索引。在第k-1级索引中，y和z之间只有3个节点（包含y和z），所以，我们在k-1级索引中最多只需要遍历3个节点，以此类推，每一级索引都最多只需要遍历3个节点。所以m=3。因此在跳表中查询某个数据的时间复杂度就是O(logn)。<br>三、跳表的空间复杂度及如何优化？<br>1.计算索引的节点总数<br>如果链表有n个节点，每2个节点抽取抽出一个节点作为上一级索引的节点，那每一级索引的节点数分别为：n&#47;2，n&#47;4，n&#47;8，…，8，4，2，等比数列求和n-1，所以跳表的空间复杂度为O(n)。<br>2.如何优化时间复杂度<br>如果链表有n个节点，每3或5个节点抽取抽出一个节点作为上一级索引的节点，那每一级索引的节点数分别为（以3为例）：n&#47;3，n&#47;9，n&#47;27，…，27，9，3，1，等比数列求和n&#47;2，所以跳表的空间复杂度为O(n)，和每2个节点抽取一次相比，时间复杂度要低不少呢。<br>四、高效的动态插入和删除？<br>跳表本质上就是链表，所以仅插作，插入和删除操时间复杂度就为O(1)，但在实际情况中，要插入或删除某个节点，需要先查找到指定位置，而这个查找操作比较费时，但在跳表中这个查找操作的时间复杂度是O(logn)，所以，跳表的插入和删除操作的是时间复杂度也是O(logn)。<br>五、跳表索引动态更新？<br>当往跳表中插入数据的时候，可以选择同时将这个数据插入到部分索引层中，那么如何选择这个索引层呢？可以通过随机函数来决定将这个节点插入到哪几级索引中，比如随机函数生成了值K，那就可以把这个节点添加到第1级到第K级索引中。","like_count":78,"discussions":[{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302063,"discussion_content":"课代表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598777720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1483735,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIqokfPEqwNtePibxM7tibGLSbSXChl7t0SMMtlPnvlG5grt7H63ajHkvmT7OU45P0x9X1AicNconlZw/132","nickname":"zer0","note":"","ucode":"FE55EE204FFFFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45494,"discussion_content":"2.如何优化时间复杂度。这边写错了吧，原文讲的是减少一半的索引结点存储空间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573043334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2141294,"avatar":"https://static001.geekbang.org/account/avatar/00/20/ac/6e/73041549.jpg","nickname":"木浮生","note":"","ucode":"D9F6D7B65BDBA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556084,"discussion_content":"为什么是3个节点呢\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647191817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179184,"user_name":"Robert","can_delete":false,"product_type":"c1","uid":1036870,"ip_address":"","ucode":"AF2A0EFDD3ADF9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/46/16d36cf7.jpg","comment_is_top":false,"comment_ctime":1581932859,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"242100101435","product_id":100017301,"comment_content":"从2月10号开始，连续每天学习已经1个礼拜了，希望自己能够继续坚持下去。刚好这段时间待在家里，可以有比较多的时间来补充知识。虽然非计算机专业出身，但是也从事技术工作10余年，大部分时间都是做ERP相关的开发，写代码也都是以业务代码或者数据库方面的居多。曾经自己也自学过一点数据结构和算法，但是都收效甚微。短短一个礼拜的学习，已经感觉收获很大。<br>随着年龄的增长，也越来越有危机感，趁着这次疫情的机会，重新进行思考和学习。每次想要放弃技术的时候，想想龟叔，Linus，Ken Thompson 这些大神，在60岁甚至70岁的时候都还在从事技术相关的研究，顿时就觉得年轻了，赶紧继续钻研学习。","like_count":57,"discussions":[{"author":{"id":2702193,"avatar":"https://static001.geekbang.org/account/avatar/00/29/3b/71/a690b71f.jpg","nickname":"zhengby","note":"","ucode":"5984647C8C8776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386821,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627819488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371977,"discussion_content":"10天，你看的真快，现在怎样了兄嘚？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620112768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302065,"discussion_content":"60 70 在国内不行,环境气氛堪忧啊....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598777819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44792,"user_name":"小情绪","can_delete":false,"product_type":"c1","uid":1020311,"ip_address":"","ucode":"92D8081DB8DB45","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","comment_is_top":false,"comment_ctime":1543494262,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"211996891766","product_id":100017301,"comment_content":"王老师：跳表的思想讲的非常好，但是我总觉得应该把跳表的具体实现讲一下吧，毕竟来这里的大部分算法能力不是很强，而跳表的实现还是有一定难度的。","like_count":49,"discussions":[{"author":{"id":1245294,"avatar":"https://static001.geekbang.org/account/avatar/00/13/00/6e/11362a1e.jpg","nickname":"感动超人","note":"","ucode":"DDBFE64A9DB28D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186785,"discussion_content":"争哥都说了跳表的实现不是重点,正确的时间做正确的事啊,大兄弟","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1582714136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302064,"discussion_content":"了解思想...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598777768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186971,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sBdBCczeAia0ZdJ0jqUC4bUv6lpRo2sleTib6M7Mia6d6JrdUfSHATpHWspqGeyibKgvKPcK0Q2pABw7VMaZNRK4CQ/132","nickname":"macco","note":"","ucode":"502B3CCF12A096","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350262,"discussion_content":"具体实现，老师也放了GitHub了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613789460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48055,"user_name":"德尼","can_delete":false,"product_type":"c1","uid":1328081,"ip_address":"","ucode":"04D3836994EDF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8rNWRmZ2slWlXZNFJiakMBo8zTTXCw1egz8tPia3JTmxCpP9wsPU7ABSG0PiboeEiaIyLQoTnQN3Jd7ibscdpRyEIAg/132","comment_is_top":false,"comment_ctime":1544335155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"138983288627","product_id":100017301,"comment_content":"看评论很多人说对github的代码不理解，我来说下自己的理解吧。整个代码的实现思想就是老师说的那样。每个节点的forward里存的是当前节点的所有索引层的下一跳，forward[ 0 ]对应的是原链表里的下一跳，forward[ 1 ]是最后一层节点的下一跳位置，以此类推，也就是说访问head的forward[ levelCount-1 ]表示第一层索引的头结点。head是一个头结点，它的forward里存的是原链表以及索引层的头结点。","like_count":32},{"had_liked":false,"id":53637,"user_name":"MG","can_delete":false,"product_type":"c1","uid":1085406,"ip_address":"","ucode":"25D010700ABAB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/de/0111323a.jpg","comment_is_top":false,"comment_ctime":1545703165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"134689689341","product_id":100017301,"comment_content":"王老师的Java实现版本，有几个关键点理解到了，基本上就明白是怎么实现的了：<br>1.每次插入数据的时候随机产生的level:决定了新节点的层数；<br>2.数组update的作用：用以存储新节点所有层数上，各自的前一个节点的信息；<br>3.节点内的forwards数组：用以存储该节点所有层的下一个节点的信息；<br>4.当所有节点的最大层级变量maxlevel=1的时候，跳表退化成一个普通链表","like_count":31},{"had_liked":false,"id":158729,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1575443099,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"130424461979","product_id":100017301,"comment_content":"em，看完这一节，去看了下老师github的java实现，看+整理用了两个多小时。。<br><br>代码实现那里，有几个关键的变量的声明，感觉不是很精确，比如：<br>“update 更名为 preNodes ，即 待插新节点在每一层的pre 结点数组；<br>forwards 更名为 nextNodes，即 当前节点在每一层的next节点数组”<br><br>个人认为这样的话，大家就容易理解了 。。。。。。。。。。<br>","like_count":30,"discussions":[{"author":{"id":1449647,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1e/af/5b59f524.jpg","nickname":"yinyin","note":"","ucode":"D6C6E74D213EB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575154,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654614959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545647,"avatar":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","nickname":"拓山","note":"","ucode":"11FE9CF3821898","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399611,"discussion_content":"是的，这个思路去看  一下就搞明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633004790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379785,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624156145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006365,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5b/1d/abb7bfe3.jpg","nickname":"付 ","note":"","ucode":"8B83690AD81063","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307739,"discussion_content":"感谢感谢,变量名更换以后源码就很好理解了。我之前一直在纠结为什么forwards 的数据为啥很奇怪,通过层主的意思了解到了。图形表示每层都是单独的一个元素，但是实则代码中每个节点的forwards数组是存储着他每层的下一个节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600746997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283518,"discussion_content":"这个建议妥妥的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592288899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545971,"avatar":"https://static001.geekbang.org/account/avatar/00/17/96/f3/b06a899c.jpg","nickname":"天竺葵柠檬橙花柚","note":"","ucode":"0F3620FABAEECB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211149,"discussion_content":"根据你的建议真的容易看懂多了！多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584805022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125065,"user_name":"andavid","can_delete":false,"product_type":"c1","uid":1018739,"ip_address":"","ucode":"4CA32B155A682F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/73/5d4dca26.jpg","comment_is_top":false,"comment_ctime":1566053469,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"78875464797","product_id":100017301,"comment_content":"关于 GitHub 上跳表的 Java 代码实现，本人仔细研读后，按自己的理解加上了注释，并写了一个测试程序打印跳表每一层的结点，以及每个结点在各层的下一跳结点。希望对大家理解跳表有所帮助。如果理解有不恰当的地方，还请指正，多谢~<br><br>https:&#47;&#47;github.com&#47;andavid&#47;ds-algo-java&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;github&#47;andavid&#47;ds&#47;datastructure&#47;skiplist&#47;SkipList.java<br><br>https:&#47;&#47;github.com&#47;andavid&#47;ds-algo-java&#47;blob&#47;master&#47;src&#47;test&#47;java&#47;com&#47;github&#47;andavid&#47;ds&#47;datastructure&#47;skiplist&#47;SkipListTest.java<br><br>","like_count":18,"discussions":[{"author":{"id":3002881,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/d2/01/f6076dea.jpg","nickname":"至尊傲剑","note":"","ucode":"C3CED1F1F013DF","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579845,"discussion_content":"没有查找元素？还是我没有看到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657712372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623409,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/71/f7c43b49.jpg","nickname":"风向北吹","note":"","ucode":"2FD0BC5159E1C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8167,"discussion_content":"我跑了下你的测试代码，为什么level 0和level 1都是一样的内容啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567815291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1018739,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/73/5d4dca26.jpg","nickname":"andavid","note":"","ucode":"4CA32B155A682F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1623409,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/71/f7c43b49.jpg","nickname":"风向北吹","note":"","ucode":"2FD0BC5159E1C1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":8585,"discussion_content":"那是数据量太少的原因，由于使用了随机数决定将结点插到哪几层，数据太少，底下几层基本都差不多。我修改了测试程序，你可以多跑几遍试试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568020537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8167,"ip_address":""},"score":8585,"extra":""}]}]},{"had_liked":false,"id":117392,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1564039521,"is_pvip":false,"replies":[{"id":"43285","content":"有可能是的。","user_name":"作者回复","comment_id":117392,"uid":"1190123","ip_address":"","utype":1,"ctime":1564266943,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"74578483553","product_id":100017301,"comment_content":"感觉跳表跟B+树有些像，父节点会出现在子节点中，而且B+的叶节点也是链接起来的。不同的是跳表每个结点只有一个子结点，而且除叶结点相连外，每层内都相连。从结构上来，很像树的变种，层内相连。老师，跳表是受树的启发两来的吗？","like_count":17,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459941,"discussion_content":"有可能是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1547667,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/93/4159edaa.jpg","nickname":"朴素柠檬c","note":"","ucode":"2D4CBB70D801B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294473,"discussion_content":"调表每个节点有两个子节点，一个next 一个down","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595900124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1369211,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e4/7b/2258ef5d.jpg","nickname":"thong","note":"","ucode":"C9DF492B704CD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215362,"discussion_content":"今天还被面试官考了zset怎么实现的，蒙的b+树，终于在这里找到原理了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585318757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40948,"user_name":"k","can_delete":false,"product_type":"c1","uid":1250383,"ip_address":"","ucode":"612C04D327D7BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/4f/4d5efcf9.jpg","comment_is_top":false,"comment_ctime":1542700677,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"70262177413","product_id":100017301,"comment_content":"看了下留言 好像有人对等比数列求和有想法 老师的n-2并不是估算解 是精确解<br>n&#47;2, n&#47;4, .., 2 这个数列中一共有log2(n&#47;2)项 <br>套进等比数列求和公式<br>S = a0(1-q^n)&#47;(1-q), 其中a0表示首项，n表示项数<br>这里的a0=n&#47;2, 项数=log2(n&#47;2), q=1&#47;2<br>S = n&#47;2(1-2&#47;n)&#47;(1-1&#47;2) = n-2","like_count":16,"discussions":[{"author":{"id":1583859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","nickname":"绅士","note":"","ucode":"5B58E5A958F489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8009,"discussion_content":"补充一下，将项数带进去之后，由对数的恒等式2log2(X)=X可得，因为s=n(1-2log2(2/n)),所以s=n-2","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567755839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1583859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","nickname":"绅士","note":"","ucode":"5B58E5A958F489","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249901,"discussion_content":"感谢，对数恒等式都快忘了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587973238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8009,"ip_address":""},"score":249901,"extra":""},{"author":{"id":2016786,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c6/12/7c36aa3a.jpg","nickname":"Black船长","note":"","ucode":"B0B73E8DEB56C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285648,"discussion_content":"这个就是对数的定义，不用强记。设结果为k，即 2^log2(X) = k。把这个式子用对数定义表示出来就是  log2(k) = log2(X)，即 k = X","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592903829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249901,"ip_address":""},"score":285648,"extra":""}]},{"author":{"id":1686409,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/89/c080540d.jpg","nickname":"红桃K-","note":"","ucode":"2B6B71EEF1F07F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187934,"discussion_content":"但是老师第二次没有给精确解...我算了好几遍又找了个人算才敢确信我没算错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582779987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294979,"discussion_content":"和之前算链表中使用二分查找的时间复杂度是一样的，只不过多了个1，之前的结论是n-1，现在减去这个1，就是跳表的空间复杂度n-2。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596044765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016786,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c6/12/7c36aa3a.jpg","nickname":"Black船长","note":"","ucode":"B0B73E8DEB56C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285647,"discussion_content":"不是 “2log2(X)=X”，是 “2^log2(X)=X”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592903629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35712,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1540773569,"is_pvip":false,"replies":[{"id":"12741","content":"后面会讲 不急","user_name":"作者回复","comment_id":35712,"uid":"1190123","ip_address":"","utype":1,"ctime":1540812180,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"53080381121","product_id":100017301,"comment_content":"我是机械行业打算换行的，不知道应该怎么把这些知识掌握的扎实一点，今天课里面的红黑树不了解.","like_count":12,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427642,"discussion_content":"后面会讲 不急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540812180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563403,"avatar":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","nickname":"江谢木","note":"","ucode":"E1B1B0F0F03D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40858,"discussion_content":"我也是机械的，加油😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572277623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64565,"user_name":"安南寸暖🤕","can_delete":false,"product_type":"c1","uid":1387564,"ip_address":"","ucode":"9E8036B99E3F16","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/2c/77f80dfc.jpg","comment_is_top":false,"comment_ctime":1548823397,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44498496357","product_id":100017301,"comment_content":"talk is cheap, show your code","like_count":10,"discussions":[{"author":{"id":1809406,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9b/fe/3593a0c7.jpg","nickname":"dejavu","note":"","ucode":"16205495B06B07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198115,"discussion_content":"作者不是在GitHub更新了吗，动动手not complex","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583474385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35700,"user_name":"Uper","can_delete":false,"product_type":"c1","uid":1252650,"ip_address":"","ucode":"8620C68D0E349B","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/2a/1010f9f6.jpg","comment_is_top":false,"comment_ctime":1540770108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40195475772","product_id":100017301,"comment_content":"仍然是logn 不过底数是间隔结点个数","like_count":9},{"had_liked":false,"id":68086,"user_name":"刘涛涛","can_delete":false,"product_type":"c1","uid":1396130,"ip_address":"","ucode":"D2EE76FA0BB1C5","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/a2/9450ef89.jpg","comment_is_top":false,"comment_ctime":1550409930,"is_pvip":false,"replies":[{"id":"24713","content":"对的！👍","user_name":"作者回复","comment_id":68086,"uid":"1190123","ip_address":"","utype":1,"ctime":1550802774,"user_name_real":"gg"}],"discussion_count":2,"race_medal":0,"score":"31615181002","product_id":100017301,"comment_content":"github上的代码，我理解的p=p.forwars[i]代表第i层的下一结点，不知道对不对","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439503,"discussion_content":"对的！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550802774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686257,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ba/f1/b01034e3.jpg","nickname":"Monica","note":"","ucode":"B09BC6EEBD81BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53067,"discussion_content":"老师github是多少啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574128773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55311,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1546103357,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31610874429","product_id":100017301,"comment_content":"思考题：<br>每 3 个结点提取一个结点作为上级索引，时间复杂度是 4log3N ，用大 O 表示法为 O(logn)<br>同理，每 5 个结点提取一个结点作为上级索引的时间复杂度是 6log5N，用大 O 表示法为 O(logn)。<br><br>github 上的代码看的有点没太看懂，还得慢慢啃，加油💪","like_count":7,"discussions":[{"author":{"id":1046152,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f6/88/ee32fde9.jpg","nickname":"章光辉","note":"","ucode":"49ACA750CAF19E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102725,"discussion_content":"应该是5log5N、3log3N吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577362300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36940,"user_name":"Pluto","can_delete":false,"product_type":"c1","uid":1038251,"ip_address":"","ucode":"E292AFAD428135","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/ab/15c9b94e.jpg","comment_is_top":false,"comment_ctime":1541398413,"is_pvip":true,"replies":[{"id":"13271","content":"实现确实不好看懂 我也看了很久","user_name":"作者回复","comment_id":36940,"uid":"1190123","ip_address":"","utype":1,"ctime":1541468730,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"31606169485","product_id":100017301,"comment_content":"学到了，这个厉害了，不过实现还是没有看的太懂","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428093,"discussion_content":"实现确实不好看懂 我也看了很久","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541468730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38259,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1542006680,"is_pvip":false,"replies":[{"id":"13818","content":"你的方法也可以 我的实现思路比较有技巧 是不容易看懂 建议不要纠结实现了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542074499,"ip_address":"","comment_id":38259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27311810456","product_id":100017301,"comment_content":"感觉github上的实现好难理解，希望老师有时间能解释下。 <br>我有一个思路：定义两个数据结构，一个是普通的单链表Node，一个索引类Index。索引类中两个域：单链表节点Node， 下一个Index引用。用Index数组表示1 - level索引层。<br>这样数据结构里就不会出现数组了，不知这样的思路是否正确。","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428658,"discussion_content":"你的方法也可以 我的实现思路比较有技巧 是不容易看懂 建议不要纠结实现了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542074499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35866,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1540825652,"is_pvip":false,"replies":[{"id":"12832","content":"整数除法是取取整的是什么意思啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950865,"ip_address":"","comment_id":35866,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23015662132","product_id":100017301,"comment_content":"老师想问下文章中出现的等比数列求和怎么算的，因为整数除法是取整的，所以公式好像不好使……，用数据代入老师的公式又是正确的，希望能指点一下。","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427692,"discussion_content":"整数除法是取取整的是什么意思啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543652,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/e4/1137270e.jpg","nickname":"Aaron","note":"","ucode":"7679D1B911FC3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348063,"discussion_content":"a_n = a_1 * q^(n-1), 求和Sn=a_1*(1-q^n)/(1-q), 当q不等于1时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612419221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1380312,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0f/d8/9286b272.jpg","nickname":"leetcode","note":"","ucode":"3B8C3668A0DE74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261001,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588926512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133055,"avatar":"https://static001.geekbang.org/account/avatar/00/11/49/ff/34a47dca.jpg","nickname":"4567890","note":"","ucode":"23BC97FD1DADF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214974,"discussion_content":"可以直接复习一下数学了~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585269302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116188,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/1c/ef15e661.jpg","nickname":" 臣馟飞扬","note":"","ucode":"F2F882B7678055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31814,"discussion_content":"等比数列有计算通项和的公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570960586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211068,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1587890622,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18767759806","product_id":100017301,"comment_content":"看不懂实现代码的建议看一下这两个视频， 我是看视频学会的：<br>https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1LJ411t7Ai?from=search&amp;seid=2626933940845464363<br>https:&#47;&#47;www.bilibili.com&#47;video&#47;BV18J411s7eN?from=search&amp;seid=2626933940845464363","like_count":4,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250177,"discussion_content":"学习了，感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587995666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126884,"user_name":"阿文","can_delete":false,"product_type":"c1","uid":1467219,"ip_address":"","ucode":"B53454CA52BD7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/53/b4590ccc.jpg","comment_is_top":false,"comment_ctime":1566516212,"is_pvip":false,"replies":[{"id":"47237","content":"使用数组作为索引，如果不建立多级索引，那就只有一层索引，那一层索引的的情况下，我们不仅要维护数组的有序性，还要动态维护索引数组中元素，数组的插入、删除操作的时间复杂度都很高呢，而且如果数组中元素的个数太少，也起不到加速查找的目的呢。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566773443,"ip_address":"","comment_id":126884,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18746385396","product_id":100017301,"comment_content":"老师，跳表的索引使用数组是不是就不用建立多级索引了？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464223,"discussion_content":"使用数组作为索引，如果不建立多级索引，那就只有一层索引，那一层索引的的情况下，我们不仅要维护数组的有序性，还要动态维护索引数组中元素，数组的插入、删除操作的时间复杂度都很高呢，而且如果数组中元素的个数太少，也起不到加速查找的目的呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566773443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79357,"user_name":"麦芒小蚱蜢","can_delete":false,"product_type":"c1","uid":1270410,"ip_address":"","ucode":"5EC406B13B798E","user_header":"https://static001.geekbang.org/account/avatar/00/13/62/8a/28abe548.jpg","comment_is_top":false,"comment_ctime":1553444413,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18733313597","product_id":100017301,"comment_content":"吭食了一下午github上的代码，还是没整明白，难过 -_- ","like_count":4,"discussions":[{"author":{"id":2540875,"avatar":"https://static001.geekbang.org/account/avatar/00/26/c5/4b/19c1a990.jpg","nickname":"alive_wang","note":"","ucode":"3FDA5E062F2729","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551100,"discussion_content":"源码里的属性命名有一定误导性，不怪你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644896967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36128,"user_name":"hugeo","can_delete":false,"product_type":"c1","uid":1042824,"ip_address":"","ucode":"438F289EDD21CD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e9/88/941e488a.jpg","comment_is_top":false,"comment_ctime":1540949958,"is_pvip":false,"replies":[{"id":"12842","content":"文章中说了代码不是重点 看不懂就先别看了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951735,"ip_address":"","comment_id":36128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18720819142","product_id":100017301,"comment_content":"代码看了半天才明白，为自己捉急","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427757,"discussion_content":"文章中说了代码不是重点 看不懂就先别看了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35873,"user_name":"kinghua","can_delete":false,"product_type":"c1","uid":1256431,"ip_address":"","ucode":"42B2A39D699C0E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ef/a90b3ffc.jpg","comment_is_top":false,"comment_ctime":1540826898,"is_pvip":false,"replies":[{"id":"12831","content":"redis很灵活 当内存占用达到一个阈值之后 可以启动lru等缓存淘汰算法 或者将数据存到硬盘","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950781,"ip_address":"","comment_id":35873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18720696082","product_id":100017301,"comment_content":"我记得Redis是基于内存的，如果数据对象的信息量过大，会不会爆内存呢？还是说redis适合少量数据存储？还有一个问题，条表的使用率高么？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427695,"discussion_content":"redis很灵活 当内存占用达到一个阈值之后 可以启动lru等缓存淘汰算法 或者将数据存到硬盘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70583,"user_name":"Clown克劳恩","can_delete":false,"product_type":"c1","uid":1322758,"ip_address":"","ucode":"E60C3E2B3BCB71","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/06/5ab217c7.jpg","comment_is_top":false,"comment_ctime":1551143683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14436045571","product_id":100017301,"comment_content":"跳表有点像特殊的不完整的B*树","like_count":3},{"had_liked":false,"id":68164,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1550452143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14435354031","product_id":100017301,"comment_content":"跳表就是告诉链表中查找从什么地方开始比较快","like_count":3},{"had_liked":false,"id":48946,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544580936,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14429482824","product_id":100017301,"comment_content":"反复提到红黑树。<br>什么是AVL树------最先发明的自平衡二叉查找树<br><br>跳表老是和红黑树进行对比，这两个应该是欢喜冤家<br>都是为了实现快速的插入、删除、查找<br><br>对链表加多级索引的结构-------就叫跳表------一种动态数据结构---支持二分查找，改造后的链表<br>通过随机函数来维护平衡的<br><br>有现成的红黑树实现，而跳表没有<br>红黑树只是在区间查找上稍微逊色，其他跟跳表的效率一致<br>综合比较下来更趋向于使用跳表（逻辑简单），而不是红黑树（复杂）<br>思考题：答对了，只有一个常量及的倍数调整，所以时间复杂度没有改变<br><br>到现在都没有敲一行代码","like_count":3},{"had_liked":false,"id":221008,"user_name":"WonderChaos","can_delete":false,"product_type":"c1","uid":1321222,"ip_address":"","ucode":"C5B3A26CF61623","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep8IcW9Wgeuib5KhZictUdtVOicxibfmqqumhpxvvrv9WjKibhH3mphMI8BrN1ejmSJGUJpPHYEBicZCHNA/132","comment_is_top":false,"comment_ctime":1590377858,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"10180312450","product_id":100017301,"comment_content":"老师，关于文中“对于按照区间查找数据这个操作，跳表可以做到 O(logn) 的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了。这样做非常高效。”这一块有个疑问，红黑树的话不是也可以用O(logn) 的时间复杂度定位区间的起点和终点，然后向后遍历就行了吗，没有理解到跳表在区间查找这块的效率优势体现在哪，谢谢老师","like_count":2,"discussions":[{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310588,"discussion_content":"红黑树最底下的原始数据并不是链表，定位到起点后如何向后遍历？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601927501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2422500,"avatar":"https://static001.geekbang.org/account/avatar/00/24/f6/e4/7ad3bba6.jpg","nickname":"FRANK-MA","note":"","ucode":"56E5FD13A0F519","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559044,"discussion_content":"找到起点 做向上的中序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648596591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310588,"ip_address":""},"score":559044,"extra":""}]},{"author":{"id":1528876,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/2c/c4ebd3ab.jpg","nickname":"龙","note":"","ucode":"A81E6D6AD0A2A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300954,"discussion_content":"和你一样的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598340158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145435,"user_name":"Csquare","can_delete":false,"product_type":"c1","uid":1137203,"ip_address":"","ucode":"23CAC353A82D1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/33/9a66d0b8.jpg","comment_is_top":false,"comment_ctime":1572272727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162207319","product_id":100017301,"comment_content":"Java8开始就有ConcurrentSkipListMap了，也是不用自己实现了 😀","like_count":2},{"had_liked":false,"id":49969,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1544802495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10134737087","product_id":100017301,"comment_content":"突然发现跳表和B+树挺像的б😌∂","like_count":2},{"had_liked":false,"id":35738,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1540778824,"is_pvip":false,"replies":[{"id":"12739","content":"是的 你说的没错 要往后比较一个节点","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540811901,"ip_address":"","comment_id":35738,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10130713416","product_id":100017301,"comment_content":"re: 老师，第 4 张图，64 结点的例子，第二级索引到第五级索纳塔都遍历了末结点，第一级索引是否也需要遍历末结点（63）？<br><br>re: 不需要的 我们找的是62 找到就可以结束了<br><br>可是第 4 张图的第一级索引，最后两个数应该是 61 和 63。<br>我们要找的是 62，应该也需要跟 63 这节点做比较吧？<br>因为需要确定是在 61 还是 63 节点下降到原始链表吧？<br>谢谢老师","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427652,"discussion_content":"是的 你说的没错 要往后比较一个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327169,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1639966708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5934934004","product_id":100017301,"comment_content":"感觉它的本质是稀疏索引，跳表是多级的稀疏索引。","like_count":1},{"had_liked":false,"id":288319,"user_name":"慕然","can_delete":false,"product_type":"c1","uid":1667714,"ip_address":"","ucode":"8622102560A80F","user_header":"https://static001.geekbang.org/account/avatar/00/19/72/82/24fb9d18.jpg","comment_is_top":false,"comment_ctime":1618406601,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5913373897","product_id":100017301,"comment_content":"一直没想明白，为什么不用B+树。或者说，为什么redis用skiplist而不用b+树，mysql这种不用skiplist而用b+树呢？","like_count":1,"discussions":[{"author":{"id":3002881,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/d2/01/f6076dea.jpg","nickname":"至尊傲剑","note":"","ucode":"C3CED1F1F013DF","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579847,"discussion_content":"MySQL索引为啥用b＋树而不用跳表实现呢。mysql 数据存储在磁盘，需要经常发生io操作，B+树更适合和磁盘打交道，而跳表更适合基于内存","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657712620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238129,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1596075373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891042669","product_id":100017301,"comment_content":"计算2 + 4 + 8 +… + k&#47;8 + k&#47;4 + k&#47;2的和：<br>这个实际就是首项为2，等比为2的等比数列，根据等比数列求和公式Sn = a1 * ( (1-qⁿ) &#47; (1-q) ) 则<br>该数列可改写为：2^1 + 2^2 + 2^3 +…+ 2^(log₂ⁿ - 1)，所以一共log₂ⁿ - 1项<br>那么和:<br>2（（1 - 2^(log₂ⁿ - 1)）&#47; (1-2)）<br>= 2（（1 - 2^(log₂ⁿ ) &#47; 2）&#47; -1）<br>=2（（1 - n &#47; 2）&#47; -1）<br>= n-2<br>感觉等比为2的等比数列很重要，常常用到，这里总结一下：<br>2^( log₂ⁿ) = n<br>1+2+4+…+2^(n-1)+2^n = 2^(n+1)-1<br>1+2 + 4 +…+ n&#47;4 + n&#47;2+n = 2n-1","like_count":1},{"had_liked":false,"id":166587,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1577510298,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5872477594","product_id":100017301,"comment_content":"跳表 = 链表 + 索引，采用的是空间换时间的思路，为链表建立一级或多级索引，从而实现随机访问 O(logn) 的时间复杂度。<br><br>跳表的空间复杂度为 O(n)，但它对实际空间占用的影响分两种情况：<br>1. 第一种是原始链表中的数据存储的是其对应对象的索引或关键值；<br>2. 第二种是原始链表中的数据存储的就是数据本身；<br>对于第一种情况，跳表占用的空间并不是数据本身（对象）的大小，而是其索引或关键值，因此相对影响较小；<br>对于第二种情况，跳表占用的空间就是数据本身的大小，所以相对影响较大；<br>解决方法是扩大同级中索引之间的跨度，从而减小索引层级，降低空间占用。<br><br>跳表的实现还要注意在插入和删除操作中索引的动态维护，否则可能导致两个索引之间的节点过多，造成时间复杂度的退化。<br>跳表索引动态维护的方法之一是在删除时删除索引，插入时随机在某级中建立相应索引，其中随机函数应该能够保证跳表的索引大小和数据大小的平衡性，不致于性能的过度退化。","like_count":1},{"had_liked":false,"id":160591,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1575981073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870948369","product_id":100017301,"comment_content":"每层索引节点个数不一样，时间复杂度应该是logn,log的底是索引节点数","like_count":1},{"had_liked":false,"id":140733,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1571039397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866006693","product_id":100017301,"comment_content":"跳表是一个带索引的有序链表，跳表每一层的两个索引之间只有三个下一层索引，每次查找只要在这三个索引就可找到再下一层的索引，搜索的效率是对数级别的。<br>索引是为了加速查找，但是维护索引也有成本，成本也是对数级别。<br>跳表之于红黑树的优点在于可以高效做区间查询。","like_count":1},{"had_liked":false,"id":35762,"user_name":"D→_→M","can_delete":false,"product_type":"c1","uid":1184017,"ip_address":"","ucode":"5EFDE9E2ED2C8B","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/11/52a78856.jpg","comment_is_top":false,"comment_ctime":1540784489,"is_pvip":false,"replies":[{"id":"12736","content":"会的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540811690,"ip_address":"","comment_id":35762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835751785","product_id":100017301,"comment_content":"老师，红黑树的相关知识在后面会讲到吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427660,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35739,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1540778924,"is_pvip":false,"replies":[{"id":"12738","content":"会讲的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540811824,"ip_address":"","comment_id":35739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5835746220","product_id":100017301,"comment_content":"这个数据结构是我第一次听哦！相当精妙的设计！不知道什么时候讲红黑树？很想知道红黑树是如何操作的！","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427653,"discussion_content":"会讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35737,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1540778762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835746058","product_id":100017301,"comment_content":"时间复杂度还是O(logn),只是对数的底变了；空间复杂度也还是O(n)。<br>老师讲的真好，浅显易懂","like_count":1},{"had_liked":false,"id":35725,"user_name":"阿杜S考特","can_delete":false,"product_type":"c1","uid":1080257,"ip_address":"","ucode":"0107E78B815B66","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/c1/22fbcab2.jpg","comment_is_top":false,"comment_ctime":1540776620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835743916","product_id":100017301,"comment_content":"这是数学问题了，logN，底数为5，等价于logN&#47;log5，log5是个常数，所以还是logN","like_count":1},{"had_liked":false,"id":35693,"user_name":"Vincen","can_delete":false,"product_type":"c1","uid":1218185,"ip_address":"","ucode":"1029A901EC7BA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/89/9312b3a2.jpg","comment_is_top":false,"comment_ctime":1540765112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835732408","product_id":100017301,"comment_content":"还是O(logn)","like_count":1},{"had_liked":false,"id":358870,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1664954486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664954486","product_id":100017301,"comment_content":"总结：<br>1. 跳表，是链表加上了索引<br>2. 跳表是一种动态数据结构<br>3. redis使用跳表实现<br>都是O（logn）的复杂度","like_count":0},{"had_liked":false,"id":357121,"user_name":"陈志男","can_delete":false,"product_type":"c1","uid":2695483,"ip_address":"广东","ucode":"4831554F6AC2C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/21/3b/7f01e158.jpg","comment_is_top":false,"comment_ctime":1662975426,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662975426","product_id":100017301,"comment_content":"https:&#47;&#47;leetcode.cn&#47;problems&#47;design-skiplist&#47;solution&#47;tiao-biao-jian-dan-ming-liao-by-cznczai-eof2&#47; <br>leetcode 精简写法","like_count":0},{"had_liked":false,"id":356420,"user_name":"阿杰","can_delete":false,"product_type":"c1","uid":2370758,"ip_address":"广东","ucode":"B9C504269C8CD3","user_header":"https://static001.geekbang.org/account/avatar/00/24/2c/c6/416bd86e.jpg","comment_is_top":false,"comment_ctime":1662288875,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1662288875","product_id":100017301,"comment_content":"课后思考题，每三个结点提取一个结点作为上层上级索引：<br>1、时间复杂度分析：<br>  为了方便计算，假设最顶层的元素结点个数为：3，所以假设h为高度，可以推导出公式：n&#47;3^h = 3（其中n为原始链表中元素的个数），所以此时可以求出高度h为：log3n - 1（注意：这里的3代表的是以3为底），然后由画图可知：每层最多需要遍历4个元素，所以查找一个元素的具体时间复杂度为：4 * （log3n - 1）。<br>2、空间复杂度分析：<br> 可以把每一层近似的看成下一层的元素个数除以3，而空间复杂度分析的是，除了数据集本身额外需要的空间，在这里指的就是跳表需要加索引所占的空间。仍然是假设最顶层的索引个数为：3。总的要加的索引个数为：n&#47;3 + n&#47;9 + .... + 3，最终的计算结果为：（n - 3）&#47; 2；由此：具体空间复杂度为（n - 3）&#47; 2; 大O分析法的空间复杂度仍然为：O(n)。<br>3、经过具体的分析计算，可以发现，扩大索引涵盖的元素范围（从每两个结点抽出一个结点作为上级索引，到从3-5抽出一个作为上级索引），时间复杂度会上升，但是空间复杂度会下降，这就是老师说的要平衡执行效率和内存消耗的地方吧。<br>以上仅供参考，若有问题，欢迎评论指出~","like_count":0},{"had_liked":false,"id":355760,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1661737314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661737314","product_id":100017301,"comment_content":"跳表-说明太少<br>- 动态数据结构<br>- 时间复杂度O(logn),空间复杂度O(n)<br>- 索引动态更新,随机函数","like_count":0},{"had_liked":false,"id":351295,"user_name":"至尊傲剑","can_delete":false,"product_type":"c1","uid":3002881,"ip_address":"","ucode":"C3CED1F1F013DF","user_header":"https://static001.geekbang.org/account/avatar/00/2d/d2/01/f6076dea.jpg","comment_is_top":false,"comment_ctime":1657681200,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1657681200","product_id":100017301,"comment_content":"老师<br>跳表元素可以是重复的不？<br>","like_count":0},{"had_liked":false,"id":350250,"user_name":"等风来","can_delete":false,"product_type":"c1","uid":1163481,"ip_address":"","ucode":"A07A0EFA3AC625","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/d9/bb6027fc.jpg","comment_is_top":false,"comment_ctime":1656695331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656695331","product_id":100017301,"comment_content":"class Skiplist {<br>        &#47;**<br>         * 最大层数<br>         *&#47;<br>        private static int DEFAULT_MAX_LEVEL = 32;<br>        &#47;**<br>         * 随机层数概率，也就是随机出的层数，在 第1层以上(不包括第一层)的概率，层数不超过maxLevel，层数的起始号为1<br>         *&#47;<br>        private static double DEFAULT_P_FACTOR = 0.25;<br><br>        Node head = new Node(null,DEFAULT_MAX_LEVEL); &#47;&#47;头节点<br><br>        int currentLevel = 1; &#47;&#47;表示当前nodes的实际层数，它从1开始<br><br><br>        public Skiplist() {<br>        }<br><br>        public boolean search(int target) {<br>            Node searchNode = head;<br>            for (int i = currentLevel-1; i &gt;=0; i--) {<br>                searchNode = findClosest(searchNode, i, target);<br>                if (searchNode.next[i]!=null &amp;&amp; searchNode.next[i].value == target){<br>                    return true;<br>                }<br>            }<br>            return false;<br>        }<br><br>        &#47;**<br>         *<br>         * @param num<br>         *&#47;<br>        public void add(int num) {<br>            int level = randomLevel();<br>            Node updateNode = head;<br>            Node newNode = new Node(num,level);<br>            &#47;&#47; 计算出当前num 索引的实际层数，从该层开始添加索引<br>            for (int i = currentLevel-1; i&gt;=0; i--) {<br>                &#47;&#47;找到本层最近离num最近的list<br>                updateNode = findClosest(updateNode,i,num);<br>                if (i&lt;level){<br>                    if (updateNode.next[i]==null){<br>                        updateNode.next[i] = newNode;<br>                    }else{<br>                        Node temp = updateNode.next[i];<br>                        updateNode.next[i] = newNode;<br>                        newNode.next[i] = temp;<br>                    }<br>                }<br>            }<br>            if (level &gt; currentLevel){ &#47;&#47;如果随机出来的层数比当前的层数还大，那么超过currentLevel的head 直接指向newNode<br>                for (int i = currentLevel; i &lt; level; i++) {<br>                    head.next[i] = newNode;<br>                }<br>                currentLevel = level;<br>            }<br><br>        }<br><br>        public","like_count":0},{"had_liked":false,"id":348229,"user_name":"子夜","can_delete":false,"product_type":"c1","uid":2739408,"ip_address":"","ucode":"D05AE3CD0631B7","user_header":"https://static001.geekbang.org/account/avatar/00/29/cc/d0/28aa9dbe.jpg","comment_is_top":false,"comment_ctime":1654852995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654852995","product_id":100017301,"comment_content":"原始链表的节点个数为n，则第一级索引的节点个数为n&#47;3，第二级索引的个数为n&#47;9,第k级索引的节点个数为n&#47;3ᵏ。最顶层节点个数为3，则n&#47;3ᵏ = 3，k = log₃n - 1 。此时跳表的高度为h = k + 1 = log₃n; 每层最多查找3个节点，此时查找一个数据的时间复杂度为3log₃n 由于log₃n = log₃2 * log₂n, 3log₃n = 3*log₃2log₂n又由于3*log₃2是一个常量，所以时间复杂度还是O(logn)","like_count":0},{"had_liked":false,"id":339889,"user_name":"Gertent","can_delete":false,"product_type":"c1","uid":1247766,"ip_address":"","ucode":"DC06AD0233A81D","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/16/ebc174cc.jpg","comment_is_top":false,"comment_ctime":1648452238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648452238","product_id":100017301,"comment_content":"git上的实现，说实在的看一次感觉自己想放弃一次？从基本的结构，到查询后面的插入删除都快看不下去了 <br>","like_count":0},{"had_liked":false,"id":336922,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646469114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646469114","product_id":100017301,"comment_content":"之前还没有接触过跳表相关，学习到了以下：<br>1. 跳表是链表加多级索引的结构，是一种动态数据结构<br>2. 跳表的查询有多快？O(logn) 级别； 空间复杂度是 O(n) 级别<br>3. 跳表的索引支持动态更新，依赖一个随机函数<br>4. 跳表比红黑树好在支持区间查询，且灵活，简单，稳定","like_count":0},{"had_liked":false,"id":333887,"user_name":"郭智强","can_delete":false,"product_type":"c1","uid":1237361,"ip_address":"","ucode":"3F44BEB923EC59","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/71/f0b1f069.jpg","comment_is_top":false,"comment_ctime":1644570749,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644570749","product_id":100017301,"comment_content":"p.forwards[i] 表示 p 节点在第 i 层索引中的下一个节点。结合下图，如果节点 p 当前是 1 这个节点，那么 p.forward[2]，对应它在第二层的下一个节点，是节点 7；依次 p.forward[1]，对应节点 4，p.forward[0]，对应节点 3。每个节点的 forward 数组大小，应该是小于等于层数的。比如 1 这个节点，它的 forward 数组存储的是节点 3、4、7，数组下标是第几层。4 这个节点，它的 forward 数组存储的是节点 5、7。5 这个节点，它的 forward 数组只有一个数据，就是节点 7。依次类推。","like_count":0},{"had_liked":false,"id":330195,"user_name":"敏","can_delete":false,"product_type":"c1","uid":1608307,"ip_address":"","ucode":"04EAA039553B98","user_header":"https://static001.geekbang.org/account/avatar/00/18/8a/73/e67f5eb8.jpg","comment_is_top":false,"comment_ctime":1641862368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641862368","product_id":100017301,"comment_content":"m不应该是2么？","like_count":0},{"had_liked":false,"id":329618,"user_name":"阿拉比亚","can_delete":false,"product_type":"c1","uid":2130883,"ip_address":"","ucode":"E61624DDA17EB6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/9Z6zUvIW61wKAJJuiabfdeA56jY9WWicOaUYy3dbdzb6o5laN8rWibPxCfib3j3Z843Wq61yKnCnskyXagRS8jSbRw/132","comment_is_top":false,"comment_ctime":1641448039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641448039","product_id":100017301,"comment_content":"为什么不用mysql的b+树呢？","like_count":0},{"had_liked":false,"id":324711,"user_name":"。。","can_delete":false,"product_type":"c1","uid":2853618,"ip_address":"","ucode":"A52A6043D27D87","user_header":"https://static001.geekbang.org/account/avatar/00/2b/8a/f2/6c6f7886.jpg","comment_is_top":false,"comment_ctime":1638583199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638583199","product_id":100017301,"comment_content":"有个疑惑，在删除的时候，如果每次删除的节点都恰好是有索引的，那么把该节点和上层的索引节点删除是没有问题的，但是随着删除的增多，每次又恰好把索引节点也删除了，那么这样不就变成新增的问题了吗，极端情况下会变成一个链了，如何解决呢？","like_count":0},{"had_liked":false,"id":320352,"user_name":"买了就等于学了","can_delete":false,"product_type":"c1","uid":1832194,"ip_address":"","ucode":"1FA56272783A53","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f5/02/d1a1f878.jpg","comment_is_top":false,"comment_ctime":1636273747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636273747","product_id":100017301,"comment_content":"跳表和B+树原理类似，那为什么不直接使用B+树","like_count":0},{"had_liked":false,"id":316462,"user_name":"Geek_6d1382","can_delete":false,"product_type":"c1","uid":2162521,"ip_address":"","ucode":"B61E65CFEB684F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MaX06SRk19zM2lAaymYylpXD6LMtIPFlDyxZKgRhmZCjhNE4nIdDGBmh08razhebVCgAv54xialYBBIIwmleBew/132","comment_is_top":false,"comment_ctime":1634314302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634314302","product_id":100017301,"comment_content":"张飞：俺也一样","like_count":0},{"had_liked":false,"id":311600,"user_name":"Ilovek8s","can_delete":false,"product_type":"c1","uid":1542450,"ip_address":"","ucode":"64DF0F7D0CF0B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a8PMLmCTCBa40j7JIy3d8LsdbW5hne7lkk9KOGQuiaeVk4cn06KWwlP3ic69BsQLpNFtRTjRdUM2ySDBAv1MOFfA/132","comment_is_top":false,"comment_ctime":1631330949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631330949","product_id":100017301,"comment_content":"跳表插入数据之后，数据多了，为什么不需要向上级索引增加数据？请老师解惑","like_count":0},{"had_liked":false,"id":308169,"user_name":"晨曦","can_delete":false,"product_type":"c1","uid":2003953,"ip_address":"","ucode":"99802B94C40092","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/f1/2a867832.jpg","comment_is_top":false,"comment_ctime":1629438706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629438706","product_id":100017301,"comment_content":"老师我想问一下，随着跳表的链表中元素不断增多，索引的层级会动态调整吗","like_count":0},{"had_liked":false,"id":306459,"user_name":"momo","can_delete":false,"product_type":"c1","uid":2682648,"ip_address":"","ucode":"BAA3380E7E6584","user_header":"https://static001.geekbang.org/account/avatar/00/28/ef/18/65518519.jpg","comment_is_top":false,"comment_ctime":1628568561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628568561","product_id":100017301,"comment_content":"对M=3这个解释还是有些疑问，我感觉一层遍历的个数是2？<br><br>因为在上一层K，势必是需要通过判断目标数和Y以及Z的关系来决定是要走DOWN还是走到Z，所以从K层来说查的是Y和Z；当小于Z的时候，走DOWN从K-1层查的是Y和Y后面的数，但不需要再查Z了（已知小于Z）。不知道我的理解是不是出现了偏差？","like_count":0},{"had_liked":false,"id":303582,"user_name":"K菌无惨","can_delete":false,"product_type":"c1","uid":2194764,"ip_address":"","ucode":"97A532D588FD49","user_header":"","comment_is_top":false,"comment_ctime":1626864485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626864485","product_id":100017301,"comment_content":"跳表的范围查询实现十分简洁","like_count":0},{"had_liked":false,"id":302203,"user_name":"想成为极客的宇","can_delete":false,"product_type":"c1","uid":1802812,"ip_address":"","ucode":"E18EE074A42307","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBmhAFTauQ7aIaqRVA0vxvAZLcy6lG4sQEAe8uMIJBpnqM3SwhP7aLRjHnoAEwvlXz18QD60icpyg/132","comment_is_top":false,"comment_ctime":1626137592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626137592","product_id":100017301,"comment_content":"zset的实现除了hash加跳表的组合以外还有ziplist，但是仅限于数据小同时key小的时候","like_count":0},{"had_liked":false,"id":300473,"user_name":"M.O(∩_∩)O","can_delete":false,"product_type":"c1","uid":1498641,"ip_address":"","ucode":"B245C2BA20DDA8","user_header":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","comment_is_top":false,"comment_ctime":1625188713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625188713","product_id":100017301,"comment_content":"复杂度：还是O(logn)<br>若每 3个节点提取，最高一层有 3 个节点,高度=log3n,O(mlogn),m=3,结果还是O(logn)<br>5个节点也一样","like_count":0},{"had_liked":false,"id":296270,"user_name":"大虫灬过大江","can_delete":false,"product_type":"c1","uid":2206073,"ip_address":"","ucode":"FBF248F35A35B3","user_header":"","comment_is_top":false,"comment_ctime":1622871360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622871360","product_id":100017301,"comment_content":"争哥, GitHub里面 SkipList 的 delete方法中, 最后的层级更新应该是:<br> while(levelCount &gt; 1 &amp;&amp; head.forwards[levelCount-1] == null) {<br>       levelCount--;<br> }<br><br>在while条件判断的层级不应该是需要levelCount-1的么, 因为数组时从0开始的","like_count":0},{"had_liked":false,"id":296051,"user_name":"时二少","can_delete":false,"product_type":"c1","uid":1352255,"ip_address":"","ucode":"874213405EDEFC","user_header":"https://static001.geekbang.org/account/avatar/00/14/a2/3f/73d08b2a.jpg","comment_is_top":false,"comment_ctime":1622718354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622718354","product_id":100017301,"comment_content":"综合后面的散列表，有一个疑问<br>关于：<br>散列+链表<br>散列+跳表<br><br>对于redis 有序集合<br>为什么选择“散列+跳表”？ 对于CRUD来说，“散列+跳表” 较之“散列+链表” 好像没有什么优势？<br><br>所以，想知道是那个地方没有考虑到呢？","like_count":0},{"had_liked":false,"id":291642,"user_name":"Vonct","can_delete":false,"product_type":"c1","uid":2524479,"ip_address":"","ucode":"4511797597786D","user_header":"https://static001.geekbang.org/account/avatar/00/26/85/3f/e77a6e4c.jpg","comment_is_top":false,"comment_ctime":1620397167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620397167","product_id":100017301,"comment_content":"老师我想问下，那个每级索引最多遍历3个结点， 既然在k级知道了y、z的值，那么k-1级只需要比较yz中间结点与目标值x的大小关系就好了吧（比x大时从y down到k-2级） 那么除了最高层，每层不都是只需要查看一个吗","like_count":0},{"had_liked":false,"id":291614,"user_name":"爱蛇","can_delete":false,"product_type":"c1","uid":1256314,"ip_address":"","ucode":"195D000CE20E3B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xOSB7nvK0BCPPDfYupD5gAPjNLWtGt1WAJqFNWlcnz1SajF18W13Pp069MlXy2slWARryqianwexetHjZKWvsXg/132","comment_is_top":false,"comment_ctime":1620385743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620385743","product_id":100017301,"comment_content":"老师想问一下，跳表是基于有序链表，但github 代码里没有排序的逻辑， 这段逻辑应该是放在哪里呢？<br>是每次插入都进行排序吗?","like_count":0},{"had_liked":false,"id":291249,"user_name":"南荣牧歌","can_delete":false,"product_type":"c1","uid":1765050,"ip_address":"","ucode":"2DFD9B50955C5A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ee/ba/ac07d5a4.jpg","comment_is_top":false,"comment_ctime":1620142737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620142737","product_id":100017301,"comment_content":"forwards数组的作用没有看明白, 可以解释一下吗","like_count":0},{"had_liked":false,"id":291097,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1620023049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620023049","product_id":100017301,"comment_content":"看评论区学到了，redis的极致的性能追求......优秀","like_count":0},{"had_liked":false,"id":290689,"user_name":"冷夜飞雪","can_delete":false,"product_type":"c1","uid":1043495,"ip_address":"","ucode":"CC01ADAA8DFDFC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/27/f708ba52.jpg","comment_is_top":false,"comment_ctime":1619687898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619687898","product_id":100017301,"comment_content":" 老师，git 打不开了","like_count":0},{"had_liked":false,"id":287227,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1617846896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617846896","product_id":100017301,"comment_content":"因为跳表没有办法通过计算得到链表的中间位置.所以使用了缓存来确定中间位置.将二分法使用过程中需要的节点缓存起来.就是所谓的索引.来达到二分查找的目的.本质是一种缓存策略.用时间换空间.<br>文中讲了在插入时候做了基于随机的方式插入索引.好处是速度快.坏处是会破坏索引之间数据的长度.可能会导致过程.如果花费大量空间来保存索引及他们之间的个数的话.会比较严格.但是有没有必要呢?会不会得不偿失?","like_count":0},{"had_liked":false,"id":286641,"user_name":"浮华如梦","can_delete":false,"product_type":"c1","uid":1649960,"ip_address":"","ucode":"47A4F126BE8AF6","user_header":"https://static001.geekbang.org/account/avatar/00/19/2d/28/0da8babf.jpg","comment_is_top":false,"comment_ctime":1617442031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617442031","product_id":100017301,"comment_content":"大赞，开阔思维了","like_count":0},{"had_liked":false,"id":286281,"user_name":"浩杰","can_delete":false,"product_type":"c1","uid":2399168,"ip_address":"","ucode":"3D7AC49659FC70","user_header":"https://static001.geekbang.org/account/avatar/00/24/9b/c0/5b19b512.jpg","comment_is_top":false,"comment_ctime":1617239107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617239107","product_id":100017301,"comment_content":"笔者上面画的图与下面的文字说明理解起来比较费力，并没有仔细的说明forwards是干什么的，其实何尝不换一种理解思路，这是跳表，可以看到里面有“指针”（对应着java里面的引用），forwardd可以与链表里面next指针所联想到一起，forwards无非存储了多个next指针，指向下一个节点，这样理解起来就容易多了","like_count":0},{"had_liked":false,"id":285970,"user_name":"Boom clap!!!","can_delete":false,"product_type":"c1","uid":2443427,"ip_address":"","ucode":"E9AF8ECB963239","user_header":"https://static001.geekbang.org/account/avatar/00/25/48/a3/2df11999.jpg","comment_is_top":false,"comment_ctime":1617090231,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617090231","product_id":100017301,"comment_content":"这次终于知道索引的作用了，以前一直不知道索引好在哪！谢谢老师~","like_count":0},{"had_liked":false,"id":280777,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614365058,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614365058","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>个人拙见，复杂度应该还是一样O(logn)，因为选3个，5个，无外乎就是以3或者5为它的对数，而对数能互相转圜的······","like_count":0},{"had_liked":false,"id":277254,"user_name":"Geek_dd4eba","can_delete":false,"product_type":"c1","uid":2429545,"ip_address":"","ucode":"92F75E568F860B","user_header":"","comment_is_top":false,"comment_ctime":1612333925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612333925","product_id":100017301,"comment_content":"和B tree以及binary indexed tree&#47;segment tree都有点像啊，真应了那句话：<br><br>All problems in computer science can be solved by another level of indirection。<br>计算机科学中的每个问题都可以用一间接层解决。","like_count":0},{"had_liked":false,"id":271131,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1609406168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609406168","product_id":100017301,"comment_content":"总结：<br><br>上一节讲的二分查找只能针对于有序的数组，那么要想在有序链表上进行类似于二分查找的操作，就需要今天讲解的新的数据结构---跳表<br><br>1. 跳表的实现结构：有序链表和在其上构建索引。每隔固定节点 m 抽取一个节点，以此来形成第一层索引，依次类推，直到第K层索引，第K层索引的元素为 n &#47; m ^ k 个。<br><br>2. 跳表是一个很实用的数据结构，在查找，删除，添加操作上都有很不错的执行效率，均为O(logN)<br><br>2. 复杂度分析：<br><br>假设：每隔 m 个节点，构建索引。则索引的高度  k ≈ log N （  n &#47; m ^ k  = m ）<br><br>3.1 查找效率<br><br>有了索引之后我们不需要去遍历链表来查找元素，而是先在第k层查找，如果找到就返回。找不到时，也可以从索引上确定数据范围，确定好后，下沉到 K-1 层索引查找，还是上面的步骤，直到找到元素或数据范围内没有元素为止。<br>在查找的过程中，每一层最多遍历m个元素，所以时间复杂度为 O(MlogN) ，最好情况下 m  很小，可以忽略不记，时间复杂度为 O(logN)；最坏情况下 m = n 时，时间复杂度为 O(N)。平均情况下时间复杂度为O(logN)  <br><br>3.2 添加或删除效率<br><br>由于底层是链表，单纯的添加和删除的时间复杂度为O(1)，但是前提是要找到这个元素，所以查找的时间复杂度为O(logN)。整体情况下，时间复杂度也为O(logN)；注意删除元素的同时也要删除索引中的元素。<br><br>3.3 空间复杂度<br><br>在链表上实现这么高效的查找是有代价的，跳表采用了空间换时间的方式，使用索引来降低查找效率。空间复杂度的计算方式为  n &#47; m ^ 1 + n &#47; m ^ 2 + m  所以空间复杂度为O(N)。<br><br>虽然空间复杂度为O(N)，但是我们一般不需要太在意，因为选择合适的m值，会降低索引真正占用空间的大小，例如 m  = 2 和 m =3 时后者索引占用的空间是前者的一半。当元素大小和索引大小存在很大差距时，索引占用是可以忽略不记的，例如高级语言中，元素为大对象，而索引则仅仅为指针<br><br><br>跳表虽然是一个各方面效率都很好的数据结构，但是它的代码确实很难编写的。而且频繁的插入和删除元素，可能破坏索引的平衡，极端情况下，插入会使查询复杂度降低到O(N)，所以在插入元素时，需要采取一些策略，让索引和数据之间尽量保持平衡，一般跳表会使用一个随机函数来维持平衡，不至于过度退化。这个随机函数是很有考究的。<br><br>跳表与红黑树相比，他们的代码都不容易编写。跳表支持范围查找，代码更简单易读，但使用时可能需要自己实现；而后者由于出现较早，有些经典的数据结构就是使用红黑树实现的，例如Map。有现成的可以使用，无需自己实现。","like_count":0},{"had_liked":false,"id":270354,"user_name":"lufy","can_delete":false,"product_type":"c1","uid":1189135,"ip_address":"","ucode":"731DF951D38926","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/0f/b93fdc52.jpg","comment_is_top":false,"comment_ctime":1609079329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609079329","product_id":100017301,"comment_content":"看了老师的代码，研究了很久，感觉似乎有一个地方写错了，就是SkipList.java里边的delete方法<br>while (levelCount &gt; 1 &amp;&amp; head.forwards[levelCount] == null) {<br>            levelCount--;<br> }<br>head.forwards[levelCount] 应该是head.forwards[levelCount-1]吧？因为levelCount指的是最大高度，不是数组的下标，如果写成head.forwards[levelCount]无论什么时候都是返回null，所以会一直levelCount--，应该为<br>while (levelCount &gt; 1 &amp;&amp; head.forwards[levelCount-1] == null) {<br>            levelCount--;<br> }<br>请问是这样的吗？<br> ","like_count":0},{"had_liked":false,"id":269370,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1608626746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608626746","product_id":100017301,"comment_content":"今天再看突然想到一个问题：是不是可以只要一级索引，存放全量key值，用数组存储，就可以使用二分查找进行增删查改了？","like_count":0},{"had_liked":false,"id":260572,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1605063425,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1605063425","product_id":100017301,"comment_content":"跳表是一种动态数据结构，支持快速地插入、删除、查找操作，时间复杂度都是 O(logn)。<br><br>因为插入和删除操作，都建立在查找的基础之上，又因为查找操作的时间复杂度是O(logn)，而插入和删除操作的时间复杂度是O(1)，故插入和删除操作总的时间复杂度 T(n) = O(logn) + O(1) 。根据加法法则，O(1) 跟 O(logn) 相比较，属于低阶，可忽略。<br><br>所以得出结论：跳表的插入、删除、查找操作，时间复杂度都是 O(logn)。","like_count":0},{"had_liked":false,"id":260563,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1605061153,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1605061153","product_id":100017301,"comment_content":"跳表支持快速地插入、删除、查找操作。其中，快速插入和删除的特性，来自链表。快速查找，是因为添加了多级索引！","like_count":0},{"had_liked":false,"id":258609,"user_name":"干将莫邪","can_delete":false,"product_type":"c1","uid":1515019,"ip_address":"","ucode":"4C66EBD11E4B85","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/0b/a1d1e9f5.jpg","comment_is_top":false,"comment_ctime":1604502634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604502634","product_id":100017301,"comment_content":"二分查找<br>1、静态数据结构用数组要求有序、对内存空间有要求，没有频繁插入删除操作。适合近似值查询。<br>2、动态数据结构用跳表基于单链表实现了二分查找，空间换时间，支持增删查，通过随机数函数维持链表平衡性。红黑树也能实现不过整体没有跳表效率高。","like_count":0},{"had_liked":false,"id":256153,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1603539102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603539102","product_id":100017301,"comment_content":"m的值为3？原因：根据前面每隔2节点抽1节点构造索引结构，我们每一级索引最多只需要遍历3个节点。若查找x，在第k级，遍历到x&gt;y节点但是小于z节点，则进入下一级k-1索引。故第k级索引遍历了2个节点y和z，而yz之间只有一个节点，包含yz是3个节点。在第k-1级索引上，没有找到对应节点，会进入第k-2级索引。故每一级最多遍历3个节点。","like_count":0},{"had_liked":false,"id":249654,"user_name":"youyou.L","can_delete":false,"product_type":"c1","uid":1796438,"ip_address":"","ucode":"B3DB0D0700EEAC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zlWt0lPDicdib5BTUbuwA3wLLUuejtZ5icGu3DHMBPd6PicXOdhZ3zYFts8VkXjjyQuxzUJas2w5OTmx3icWKiaZM1Vg/132","comment_is_top":false,"comment_ctime":1600743157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600743157","product_id":100017301,"comment_content":"每两个节点提取一个作为索引与每三个节点提取一个作为索引比较，三个节点节省了空间，时间复杂度的通用公式为 (x+1)logx (n)，x为每x个节点提取索引，n为数据量；可以看出当x=3时比x=2小，说明每3个节点的时间复杂度更小，这既节省了空间有加快了时间，怎么感觉不符合空间换时间的常理","like_count":0},{"had_liked":false,"id":244868,"user_name":"Geek_e5d4b7","can_delete":false,"product_type":"c1","uid":1794261,"ip_address":"","ucode":"CAF59B0F2178C0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLf3rtBCgIYcxghSJzmQH53r3geicqKx75u1ZsZE8hMIGZ2xxO1V2zqEwgmh0ZQTO68N6oGia2LzIiaA/132","comment_is_top":false,"comment_ctime":1598709284,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598709284","product_id":100017301,"comment_content":"redis的有序集合用到散列表是指？ 难道不是ziplist和skiplist","like_count":0},{"had_liked":false,"id":244711,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598626840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598626840","product_id":100017301,"comment_content":"我想咨询一下 真正链表维护 是不是并不像图上那么简单，  只要维护一个down就可以了，  我认为一个节点最容易遍历和被管理的 就是建立 上下左右 4个指针 分别指向 上一级索引  下一级索引   前一个索引 和 后一个索引   大概就是  4个方向的  双向链表？？","like_count":0},{"had_liked":false,"id":241355,"user_name":"Geek_31594d","can_delete":false,"product_type":"c1","uid":2030240,"ip_address":"","ucode":"9058787881CE82","user_header":"","comment_is_top":false,"comment_ctime":1597277459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597277459","product_id":100017301,"comment_content":"开发这么多年还是对算法比较菜 坚持多看几遍","like_count":0},{"had_liked":false,"id":240458,"user_name":"艺比天高","can_delete":false,"product_type":"c1","uid":1282162,"ip_address":"","ucode":"F52AC257F834A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/90/72/e17e7c61.jpg","comment_is_top":false,"comment_ctime":1596937898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596937898","product_id":100017301,"comment_content":"作者是用几个数组来维护这个跳表结构，看了许久终于搞懂","like_count":0},{"had_liked":false,"id":240017,"user_name":"dan","can_delete":false,"product_type":"c1","uid":1195044,"ip_address":"","ucode":"515A904FB55FFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/24/ceac00af.jpg","comment_is_top":false,"comment_ctime":1596715747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596715747","product_id":100017301,"comment_content":"redis 有序集合的实现，还使用了字典；<br>O（1）复杂度查找成员的分值。<br>","like_count":0},{"had_liked":false,"id":234807,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1594801578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594801578","product_id":100017301,"comment_content":"每3个节点或者5个节点，时间复杂度都是log n","like_count":0},{"had_liked":false,"id":232522,"user_name":"张伟","can_delete":false,"product_type":"c1","uid":1342335,"ip_address":"","ucode":"A4DA7DE3925861","user_header":"https://static001.geekbang.org/account/avatar/00/14/7b/7f/f1380807.jpg","comment_is_top":false,"comment_ctime":1594027187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594027187","product_id":100017301,"comment_content":"感觉跳表这种数据结构，在数据量比较大而要查找的数据在链表中又比较靠前的情况下。查找速度反而比从头遍历要慢。请问从这方面要怎么理解跳表的作用，有没有优化方案？","like_count":0},{"had_liked":false,"id":231044,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1593571197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593571197","product_id":100017301,"comment_content":"对于每间隔n个结点提取索引，时间复杂度应该是（2n-1）*logn","like_count":0},{"had_liked":false,"id":228709,"user_name":"我叫学习","can_delete":false,"product_type":"c1","uid":1988317,"ip_address":"","ucode":"14BD6824777402","user_header":"https://static001.geekbang.org/account/avatar/00/1e/56/dd/061eb95c.jpg","comment_is_top":false,"comment_ctime":1592791032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592791032","product_id":100017301,"comment_content":"等比数列求和，不是n的平方么","like_count":0},{"had_liked":false,"id":227125,"user_name":"右耳朵听不见","can_delete":false,"product_type":"c1","uid":1142211,"ip_address":"","ucode":"856D2CCB342EF3","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/c3/7ee7ad78.jpg","comment_is_top":false,"comment_ctime":1592293542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592293542","product_id":100017301,"comment_content":"redis跳表核心要素有几个：1、每个元素必须有分值，体现其在链表中的先后顺序；2、每个节点都有level数组，每个level数组元素都有forword指针；3、查找目标元素的关键是降维查询，span之和就是rank排名","like_count":0},{"had_liked":false,"id":227010,"user_name":"海洋之木","can_delete":false,"product_type":"c1","uid":1282754,"ip_address":"","ucode":"EA96078A4CD76D","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/c2/b7456c3d.jpg","comment_is_top":false,"comment_ctime":1592267558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592267558","product_id":100017301,"comment_content":"java juc里面有个concurrentskiplistmap 这应该也是基于跳表的实现吧","like_count":0},{"had_liked":false,"id":225333,"user_name":"KangShan","can_delete":false,"product_type":"c1","uid":1082000,"ip_address":"","ucode":"07497A7AC92238","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/90/e4a08b0e.jpg","comment_is_top":false,"comment_ctime":1591716555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591716555","product_id":100017301,"comment_content":"不明白为什么跳表的插入与删除不需要每插入一个元素就更新每一层索引，如果不更新每一层索引怎么保证查找时的便捷？","like_count":0},{"had_liked":false,"id":224109,"user_name":"王晓辉","can_delete":false,"product_type":"c1","uid":1716922,"ip_address":"","ucode":"EA3D488F5269F1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/ba/16a12b9e.jpg","comment_is_top":false,"comment_ctime":1591277199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591277199","product_id":100017301,"comment_content":"跳表支持区间查找，我感觉学习过程中将跳表和b+树放在一起对比，是不是这样好一些？","like_count":0},{"had_liked":false,"id":223884,"user_name":"黑洞","can_delete":false,"product_type":"c1","uid":1451364,"ip_address":"","ucode":"840A4330B1B2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","comment_is_top":false,"comment_ctime":1591207639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591207639","product_id":100017301,"comment_content":"跳表：就是带有1级或多级索引链表并始终保持元素有序的一个链表，可以是单链表或双向链表。在链表的插入和删除操作里，包含动态更新各级索引链表的操作。","like_count":0},{"had_liked":false,"id":219051,"user_name":"今天","can_delete":false,"product_type":"c1","uid":1532354,"ip_address":"","ucode":"F8577A2BABCD1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/61/c2/94c1d4c9.jpg","comment_is_top":false,"comment_ctime":1589937563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589937563","product_id":100017301,"comment_content":"跳表只适用于有序的数列对不","like_count":0},{"had_liked":false,"id":218754,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1589867175,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1589867175","product_id":100017301,"comment_content":"随着间隔结点数量的增加，时间复杂度越来越高，或者说其系数越来越大。空间复杂度越来越小。不过三、五对大 O 表示法应该不会有太大影响，只是改变一下系数。","like_count":0},{"had_liked":false,"id":218670,"user_name":"刘飞","can_delete":false,"product_type":"c1","uid":1160409,"ip_address":"","ucode":"5BE4E9B8ADB5B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/d9/8a5e648c.jpg","comment_is_top":false,"comment_ctime":1589852399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589852399","product_id":100017301,"comment_content":"public void insert(int value) {<br>    int level = randomLevel();<br>    Node newNode = new Node();<br>    newNode.data = value;<br>    newNode.maxLevel = level;<br>    Node update[] = new Node[level];<br>    for (int i = 0; i &lt; level; ++i) {<br>      update[i] = head;<br>    }<br>中<br>for (int i = 0; i &lt; level; ++i) {<br>      update[i] = head;<br>    }<br>这个for循环有意义么，我感觉完全没必要","like_count":0},{"had_liked":false,"id":218361,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1589789355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589789355","product_id":100017301,"comment_content":"哈哈哈，看了评论区，又看了看评论区的资料，终于看懂了争哥的代码，舒服。。。。","like_count":0},{"had_liked":false,"id":218057,"user_name":"刘飞","can_delete":false,"product_type":"c1","uid":1160409,"ip_address":"","ucode":"5BE4E9B8ADB5B5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/d9/8a5e648c.jpg","comment_is_top":false,"comment_ctime":1589705348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589705348","product_id":100017301,"comment_content":"跳表每次插入数据，怎么保证每级索引的平衡，随机数么?<br>假如有链表长度是n，每次插入数据，怎么保证一级索引层数量是n&#47;2,级索引层是n&#47;4...","like_count":0},{"had_liked":false,"id":217494,"user_name":"未来怎样","can_delete":false,"product_type":"c1","uid":1652085,"ip_address":"","ucode":"4E54EB62595B27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKORTofsU89GYKtywquzKuEiabvZnEOonfMYKuCPlo8GDlXqZuJdBicu0XtlaeodH4BnmHV1kldSAwQ/132","comment_is_top":false,"comment_ctime":1589514883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589514883","product_id":100017301,"comment_content":"长度为n，索引间隔为m的的跳表，其高度h应该是 以m为底数n的对数。索引每一层的查找次数为m次。所以总的时间复杂度应该是 O(mlogm N)。","like_count":0},{"had_liked":false,"id":216969,"user_name":"高旭瑞","can_delete":false,"product_type":"c1","uid":1243897,"ip_address":"","ucode":"284335282EE526","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/f9/f4ca4080.jpg","comment_is_top":false,"comment_ctime":1589379206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589379206","product_id":100017301,"comment_content":"跳表看上去就是链表的多维变种复杂形态，假设有N个有序元素，k层索引。那就是用这N个元素构建了K+1个链表，其中第一个链表包含N个元素，往上各层逐渐递减，但是每个元素作为链表的一环，都要维护k层上下节点，对于自己不在的层，对应位置的索引就为空。","like_count":0},{"had_liked":false,"id":215986,"user_name":"叶紫真","can_delete":false,"product_type":"c1","uid":1547763,"ip_address":"","ucode":"9CD7567FDB7F1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/f3/3f6dd32b.jpg","comment_is_top":false,"comment_ctime":1589163868,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589163868","product_id":100017301,"comment_content":"个人认为跳表就是实现3分法,4分法,5分法...,比起二分法,效率会提高不少","like_count":0,"discussions":[{"author":{"id":1610573,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","nickname":"饭","note":"","ucode":"B3F1702D4DE604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283562,"discussion_content":"当然是二分法最高，每次最多访问3个节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592297671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214631,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588775426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588775426","product_id":100017301,"comment_content":"学习感悟:<br>1. 跳表的实现不是本节的重点，让我如释重负，但是看到跳表比红黑树实现简单，有点担心红黑树了。。<br>2. 跳表是一种动态结构，通过隔特定数量的节点创建一个索引来实现快速查找。索引很多级的时候，我第一反应就是二叉树。<br>3. 跳表能动态插入(随机创建索引，解决索引动态添加问题)、动态删除(索引也得删、前驱结点得得到)、查找(类似于二分)、迭代输出序列(从前向后迭代)。<br>4. 与红黑树相比，除了实现简单些外，跳表能查找特定区间内的数据。因为可以直接定位到起始节点，然后顺序输出即可。但是红黑树既然能迭代输出序列，为什么不能做到呢？没想通<br>5. 插入删除查找的复杂度都是O(logn)。<br>6. 如果索引节点和链表节点一样大，空间复杂度为O(N)。如果节点对象要大得多，则索引占得空间可忽略，以为索引只保存key和向后、向下指针。<br>思考题：<br>几乎不变。分析过程就是，计算索引层数，和每层需要遍历的节点数，乘起来就完了。空间复杂度就是等比数列求和。","like_count":0},{"had_liked":false,"id":214192,"user_name":"马翼","can_delete":false,"product_type":"c1","uid":1963766,"ip_address":"","ucode":"11C8D7AA4F2D79","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f6/f6/149d9150.jpg","comment_is_top":false,"comment_ctime":1588673229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588673229","product_id":100017301,"comment_content":"B+树的范围查找是不是和跳表类似，定位区间的起点，然后在叶子结点往后遍历就行，这样感觉跳表跟B+树很类似，B+树的叶子结点也是串成了链表吧","like_count":0},{"had_liked":false,"id":213204,"user_name":"咕噜","can_delete":false,"product_type":"c1","uid":1063958,"ip_address":"","ucode":"38A512132BB5B7","user_header":"","comment_is_top":false,"comment_ctime":1588329586,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1588329586","product_id":100017301,"comment_content":"按作者所说，跳表比红黑树灵活，实现也更简单，那为什么 1.8 的 HashMap 是用红黑树，而不是跳表呢","like_count":0,"discussions":[{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322390,"discussion_content":"在使用HashMap时，我们通常将简单数据类型（如Integer或String）作为KEY，而跳表在存储简单数据类型时，【有序链表】与【索引】的空间占比为 1:1，而【红黑树】无需额外空间，且HashMap也无区间查找的需求，故【红黑树】更优\n\n说的不对欢迎指正：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604737012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301772,"discussion_content":"因为链表很浪费啊， 树只需要变形就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598626624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211693,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1587996168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587996168","product_id":100017301,"comment_content":"每3个节点提取一个索引的话，时间复杂度就是O(log₃n-1)，其实还是O(logn)","like_count":0},{"had_liked":false,"id":211665,"user_name":"罗盖","can_delete":false,"product_type":"c1","uid":1357135,"ip_address":"","ucode":"1B098D4CA6096A","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/4f/10c694db.jpg","comment_is_top":false,"comment_ctime":1587993421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587993421","product_id":100017301,"comment_content":"每3个节点建立一级索引，索引的高度为log3(n),但是每一层的最多查找节点数为4，时间复杂度为4log3（n）,依此类推5个节点，时间复杂度为6log5(n)","like_count":0},{"had_liked":false,"id":211429,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1587961722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587961722","product_id":100017301,"comment_content":"都是O(logn），只是底不同。","like_count":0},{"had_liked":false,"id":211403,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1587958670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587958670","product_id":100017301,"comment_content":"每3结点会抽出一个结点作为上一级索引的结点，第一级索引结点数为n&#47;3、第二级为n&#47;9、第k级为n&#47;(3^k)，如果有h级索引，最高级只有1个结点，n&#47;(3^h) = 1, h=log3n，每一层最多访问4个结点，总的时间复杂度为O(4*log3n)","like_count":0},{"had_liked":false,"id":211382,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1587955360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587955360","product_id":100017301,"comment_content":"动态数据结构；<br>如何理解跳表<br>原始链表 建立一级索引 二级索引。。。索引就是 两个多个节点汇总一个向上。这种链表加多级索引的结构，就是跳表。<br>用跳表查询有多快？<br>索引越多查询越快，多级索引 n &#47; n^2 链表高度 logn^n,查询一个数据的时间复杂度O（m*logn)，那么m就是每一级索引最多遍历的个数也就是3.这是基于单链表实现了二分查找。虽然快，但是建了很多索引，也就是空间换时间的思想。<br>跳表是不是很浪费时间？<br>可以不是两个结点汇总一个索引，而是多个3 ， 4 ， 5 。。。，<br>空间复杂度O（n）<br>高效的动态插入和删除<br>O（logn）<br>跳表索引动态更新<br>如果一直插入数据不更新索引，跳表就会演变成单链表，影响性能。<br>通过随机函数维护“平衡性”<br><br>按照区间来查找数据这个操作，红黑树的效率没有跳表高。跳表O（logn）。<br>跳表更容易实现相比较红黑树不能完全替代红黑树，红黑树出现早，很多直接使用不用自己实现，而跳表需要自己实现。<br>为什么？学到红黑树再来看！","like_count":0},{"had_liked":false,"id":210406,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1587738857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587738857","product_id":100017301,"comment_content":"redis 使用跳表等支持有序集合，感觉这就是用正确的方法做正确的事情。先明确要支持哪些功能，例如需要支持按区间查找数据吗？这个重要吗？然后才是如何实现，以及不同场景下用不同的数据结构来优化，达到极致的效率，这样也就创造了很大的价值。<br>我认为选择提供什么功能比如何实现更重要，就像亚马逊最开始选择书作为销售的商品。","like_count":0},{"had_liked":false,"id":209801,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1587617743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587617743","product_id":100017301,"comment_content":"这里有个问题，文章中之提到了在插入数据的时候，适时添加索引，那么在删除数据的时候应该怎么做了。需不需要删除索引","like_count":0},{"had_liked":false,"id":207374,"user_name":"蓝","can_delete":false,"product_type":"c1","uid":1275638,"ip_address":"","ucode":"CD7D95747AFE8D","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/f6/21f27189.jpg","comment_is_top":false,"comment_ctime":1587061554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587061554","product_id":100017301,"comment_content":"如果红黑树每个节点存子树个数的话，也可以做到O(log n)按照区间查找数据","like_count":0},{"had_liked":false,"id":206948,"user_name":"Poppy","can_delete":false,"product_type":"c1","uid":1501505,"ip_address":"","ucode":"AF656A00521037","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/41/7cb2cf64.jpg","comment_is_top":false,"comment_ctime":1586961704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586961704","product_id":100017301,"comment_content":"打卡  刚看了redis然后前来补课  感觉清晰多了","like_count":0},{"had_liked":false,"id":206468,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586865869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586865869","product_id":100017301,"comment_content":"第一次知道跳表这种数据结构，获益匪浅，还要继续学习，加油。","like_count":0},{"had_liked":false,"id":203042,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586117604,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586117604","product_id":100017301,"comment_content":"因为红黑树不支持区间操作所以不能用到sorted set中，那么为什么不用B+树呢？B+树的叶子不也是相连的吗？","like_count":0,"discussions":[{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322393,"discussion_content":"在内存中【红黑树】确实比【B+】树更优，但【红黑树】却又比【B+】树更高，而对于磁盘操作，树的结构当然是越矮越好，树多一层磁头就要多扫一次磁盘\n\n个人理解，欢迎指正：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604737407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200798,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585652841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585652841","product_id":100017301,"comment_content":"打卡~","like_count":0},{"had_liked":false,"id":195109,"user_name":"vector_jin","can_delete":false,"product_type":"c1","uid":1058587,"ip_address":"","ucode":"BC0675CCCEAFE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/1b/7b50c0cf.jpg","comment_is_top":false,"comment_ctime":1585137415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585137415","product_id":100017301,"comment_content":"跳表跟红黑树没有可比性，跳表跟B树比较像","like_count":0},{"had_liked":false,"id":188395,"user_name":"泥鳅儿","can_delete":false,"product_type":"c1","uid":1323000,"ip_address":"","ucode":"26B47C8FC67615","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ojfRyNRvy1x3Mia0nssz6CNPHrHXwPPmibvds1URgoHQuKXrGiaxrEbsT6sAvuK4N4AOicySh8S9iaWcOLjteOl6Kgg/132","comment_is_top":false,"comment_ctime":1584348917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584348917","product_id":100017301,"comment_content":"老师，跳表删除一个结点时索引该如何更新呢，不是很清楚？","like_count":0},{"had_liked":false,"id":188115,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1584322360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584322360","product_id":100017301,"comment_content":"给跳表在配合一个散列表，查找就O（1）了是吧老师，<br>查找最快：散列表 O（1）<br><br>维护一个有序序列最快的方式：一般有序队列插入数据最头疼，需要找到插入的位置，这时比较次数越少插入速度越快，所以采用二分查找的思想来维护队列<br><br>二分查找最简单的实现就是数组，可以用过数组下标访问任何位置的元素，比如先访问中间元素进行比较，但数组的插入或删除比较慢，不够动态，这时我们可以用链表了，但链表怎么实现二分查找呢，本节内容来了，跳表出现了<br>","like_count":0},{"had_liked":false,"id":184023,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1583207075,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583207075","product_id":100017301,"comment_content":"提取多个节点后，m依然等于3，高度没有变，还是lgn。但是极端情况，16个节点链表，只有一个节点索引，那么m=1，所以m在1..3之间变化，总体时间复杂度仍然为lgn","like_count":0},{"had_liked":false,"id":183856,"user_name":"Axx","can_delete":false,"product_type":"c1","uid":1756202,"ip_address":"","ucode":"1B3A879E31EADE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cc/2a/dacb490c.jpg","comment_is_top":false,"comment_ctime":1583146652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583146652","product_id":100017301,"comment_content":"跳表每层最多只需要遍历两个节点<br>","like_count":0},{"had_liked":false,"id":180877,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1582434139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582434139","product_id":100017301,"comment_content":"看了代码实现以后，有一个疑问，插入节点的时候，如果第一个节点的层数为1，那么无论后面插入的节点有多少层，在查找的时候从头节点开始查找(也就是第一层)，这样的话岂不是退化成单链表的查找了吗？希望老师回答一下😁","like_count":0},{"had_liked":false,"id":179289,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1581952669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581952669","product_id":100017301,"comment_content":"查询时间复杂度 理论上来说还是o(logn)但是实际上比每两个结点一个索引还是快多了 而且空间复杂度也会更低一些,但是相对来说可能查询要慢一些 两个结点一个索引的话 最多只需要遍历3个结点，但是间隔距离大了 最多需要遍历次数也就增加了","like_count":0},{"had_liked":false,"id":175869,"user_name":"just__","can_delete":false,"product_type":"c1","uid":1055900,"ip_address":"","ucode":"6F2E34657F34A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/9c/4562ec97.jpg","comment_is_top":false,"comment_ctime":1580873850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580873850","product_id":100017301,"comment_content":"又看一遍，跳表的前提是有序链表数据，那是不是跳表相对于二分在于创建索性层和管理索引层，那这个的时间复杂度怎么算？","like_count":0},{"had_liked":false,"id":175219,"user_name":"Geek_f0ffbf","can_delete":false,"product_type":"c1","uid":1765899,"ip_address":"","ucode":"04447220089BDB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epVeWQWn5OWYG6f6te9EDmNUxDxXtD8iaJoarjzyrNicMs9iapkPCPXibnCYhFInWSA40IXWCUKkeicgKQ/132","comment_is_top":false,"comment_ctime":1580618265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580618265","product_id":100017301,"comment_content":"我有点看不懂作者写的skiplist github，但是网上随便找了一个实现源码，Node是带up，down，left，right 我觉得清楚很多。。估计是我的基础弱把","like_count":0},{"had_liked":false,"id":175114,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1580561353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580561353","product_id":100017301,"comment_content":"这个跳表删除会造成不平衡怎么处理的。？","like_count":0},{"had_liked":false,"id":173976,"user_name":"Danye","can_delete":false,"product_type":"c1","uid":1335801,"ip_address":"","ucode":"37519D87053117","user_header":"https://static001.geekbang.org/account/avatar/00/14/61/f9/f6f90494.jpg","comment_is_top":false,"comment_ctime":1579845490,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579845490","product_id":100017301,"comment_content":"请教一下，&quot;在第 k-1 级索引中，y 和 z 之间只有 3 个结点（包含 y 和 z），所以，我们在 K-1 级索引中最多只需要遍历 3 个结点&quot; 这里没有看懂。要查找的数据x&gt;y且x&lt;z时，y和y.next的确可能会被访问，但是z不应该被访问才对啊？如果z被访问，那么也应该在K级而不是在K-1级。这样最多需要遍历的结点应该是2个","like_count":0,"discussions":[{"author":{"id":1723812,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4d/a4/d28eb55d.jpg","nickname":"拒绝","note":"","ucode":"36BBA79BBFEA8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189434,"discussion_content":"我也是这么认为的，1（next） + 结点数 - 1（最后一个不会被访问） = 结点数，希望老师能解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582881660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172717,"user_name":"pikachu122","can_delete":false,"product_type":"c1","uid":1689365,"ip_address":"","ucode":"43FE4DBC872FFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/15/24bf166a.jpg","comment_is_top":false,"comment_ctime":1579262758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579262758","product_id":100017301,"comment_content":"1、二分查找是基于数组实现的。链表的查找时间复杂度为O(n），但我们可以通过对链表加以改造，实现O(logn)时间复杂度的查找。这个改造后的数据结构就是跳表。<br>2、我们对链表每隔2个节点就取一个节点，将它们连接起来组成一个新的链表，这个新的链表被称为索引。因为是直接对原链表操作的，因此这是第一层索引。当我们需要查找一个节点时，先在索引层遍历，当被查找数的值处于两个索引层节点之间时，通过前一个结点（也就是小于这个数的最大节点）的down指针到原链表，再遍历原链表就可以找到所需的数。<br>3、为了进一步简化查找操作，对第一级索引进行同样操作，我们可以得到第二级、第三级……第h级索引。第h级索引只有2个节点。对于每层索引，我们只要遍历3个节点。因此该跳表查找的时间复杂度就是O(3log(n))，也就是O(logn)。<br>4、跳表采用了“空间换时间”的设计思想。跳表的空间复杂度是O(n)。为了平衡时间和空间，可以通过设置不同的索引策略。<br>5、跳表支持插入、删除、查找、按范围区间查找等功能，它们的时间复杂度都是O(logn)。它具有与红黑树相当的性能，且按范围区间查找比红黑树更高效。而且它的实现代码也比红黑树简单易懂，也更加灵活。<br>6、为了防止跳表退化到O(n)的时间复杂度，需要定时对跳表的索引进行更新。常用一个随机函数决定将新增节点插入到哪几级索引中。<br>7、课后思考题：同理，对于每k个节点提取一个节点作为上级索引的跳表，它包含原链表的层数时logk(n)，每层需要遍历k+1个节点。查询时间复杂度是O((k+1)logn)，当k很大时，时间复杂度就越来越趋近于O(n)。","like_count":0},{"had_liked":false,"id":172471,"user_name":"王麒","can_delete":false,"product_type":"c1","uid":1265260,"ip_address":"","ucode":"330017C5A911B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4e/6c/71020c59.jpg","comment_is_top":false,"comment_ctime":1579183410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579183410","product_id":100017301,"comment_content":"删除节点的时候，索引不也需要变更的吗？这部分成本如何计算呢","like_count":0},{"had_liked":false,"id":172470,"user_name":"王麒","can_delete":false,"product_type":"c1","uid":1265260,"ip_address":"","ucode":"330017C5A911B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4e/6c/71020c59.jpg","comment_is_top":false,"comment_ctime":1579183358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579183358","product_id":100017301,"comment_content":"删除节点的时候","like_count":0},{"had_liked":false,"id":168345,"user_name":"杰瑞的Jerry","can_delete":false,"product_type":"c1","uid":1690017,"ip_address":"","ucode":"5FBF22B528B721","user_header":"https://static001.geekbang.org/account/avatar/00/19/c9/a1/24c2e54e.jpg","comment_is_top":false,"comment_ctime":1578051220,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1578051220","product_id":100017301,"comment_content":"学完本节打卡：<br><br>对链表进行改造之后的数据结构叫跳表（Skip list），是一种动态数据结构。<br>增加多级索引结构的链表，就是跳表。<br>跳表的查询效率要比链表要高。我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)。这里m最多为3（还需要比较下一个节点）。在跳表中查询任意数据的时间复杂度就是 O(logn)，和二分查找一样。<br>这样查询效率的提升，是用额外的存储空间换来的。<br>对于这样的跳表空间复杂度为O(n)。<br>跳表的插入和删除操作的时间复杂度都是O(n)。<br>对于跳表来说，需要对跳表的索引进行动态更新，防止在多次插入操作后某两个索引节点之间出现非常多数据的情况。<br>通过引入一个随机函数，将新节点添加到第一级到第k级到所有索引中。","like_count":0},{"had_liked":false,"id":167823,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1577944817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577944817","product_id":100017301,"comment_content":"GitHub上跳表java实现部分有个细节<br>SkipList.java从跳表中删除一个元素delete(int value)<br>第81行：<br><br>while (levelCount&gt;1&amp;&amp;head.forwards[levelCount]==null){<br>      levelCount--;<br>    }<br>\t<br>判断条件<br>head.forwards[levelCount]==null 是否应该是head.forwards[levelCount-1]==null，判断最顶层的索引为null，将高度减一","like_count":0},{"had_liked":false,"id":167063,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1577680330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577680330","product_id":100017301,"comment_content":"懂了<br>p = p.fowards[i] ，当level-1时，相当于切了右下角的一部分跳表，有点递归的思路","like_count":0},{"had_liked":false,"id":167061,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1577679948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577679948","product_id":100017301,"comment_content":"为啥没看到down指针？感觉每次都要从p[level-2].forward[i]开始查找，并不是p[level -1].foward[i].down","like_count":0},{"had_liked":false,"id":163096,"user_name":"半壶浊酒","can_delete":false,"product_type":"c1","uid":1557453,"ip_address":"","ucode":"28505DE98AA64A","user_header":"https://static001.geekbang.org/account/avatar/00/17/c3/cd/9a1397bd.jpg","comment_is_top":false,"comment_ctime":1576655825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576655825","product_id":100017301,"comment_content":"既然forwards是存储下一跳，forward是向前的意思啊！难以理解啊","like_count":0},{"had_liked":false,"id":162053,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1576456752,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576456752","product_id":100017301,"comment_content":"1，是一种各方面性能都比较优秀的动态数据结构，可以支持快速的插入，删除，查找操作。<br>\t2，Redis中的有序集合（Sorted Set）就是用跳表来实现的。<br><br>\t3，如何理解“跳表”？<br>\t\t对于一个单链表来讲，即便链表中存储的数据是有序的，查询的效率也很低，时间复杂度为O(n)。<br>\t\t为了能够提升查询效率，对链表建立一级“索引”，每两个结点提取一个结点到上一级，<br>\t\t加了一层索引之后，查找一个结点需要遍历的结点个数减少了，查询效率就提高了。<br>\t\t这种链表加多级索引的结构，就是跳表<br><br>\t4，用跳表查询到底有多快？<br>\t\t若链表里有n个结点，第k级索引的结点个数是第k-1级索引的结点个数的1&#47;2，那第k级索引结点的个数就是n&#47;(2^k)。<br>\t\t<br>\t\t在跳表中查询某个数据时，若每一层都要遍历m个结点，那就在跳表中查询一个数据的时间复杂度就是O(m*logn)。<br>\t<br>\t5，跳表是不是很浪费内存？<br>\t\t比起单纯的单链表，跳表需要存储多级索引，需要消耗更多的存储空间。<br>\t\t<br>\t\t跳表的空间复杂度是O(n)。将包含n个结点的单链表构成跳表，需要额外在接近n个结点的存储空间。<br><br>\t\t可以通过调增连接的结点数量，降低跳表的空间占用。<br><br>\t\t实际开发中，不比过度的在意索引的空间占用，因为原始数据链表中存储的可能是大对象，而索引存储的只是关键值和几个指针。并不需要存储对象，所以于对象存储所占用的空间相比，索引所消耗的空间可以忽略。<br><br>\t6，跳表的高效动态插入和删除<br>\t\t跳表不仅支持查询，还支持动态的插入，删除操作，而且插入，删除操作的时间复杂度也是O(logn)。<br>\t\t<br>\t\t单纯的链表插入的时间复杂度是O(1)，但有序的链表插入，为了保持其有序性，需要遍历。<br>\t\t<br>\t\t删除：如果这个节点在索引中出现，除了要删除原始链表中的结点，还要删除索引中的。因为单链表中删除数据操作需要拿到要删除结点的前驱节点，然后通过指针操作完成删除。所以删除结点的时候，一定要获取前驱节点。<br><br>\t7，跳表索引动态更新<br>\t\t当不停的往链表中插入数，不更新索引，极端情况下跳表会退化成单链表。作为一种动态数据结构，我们需要一些手段来维护索引与原始链表大小之间的平衡，当链表中节点多了，索引结点就相应地增加一些，避免复杂度退化，以及查找，插入，删除操作性能下降。<br>\t\t在红黑树，AVL树这样平衡二叉树中，他们是通过左右旋的方式保持左右子树的大小平衡。<br>\t\t跳表是通过随机函数来维护数据结构的平衡性。<br>\t\t当向跳表中插入数据时，可以选择同时将这些数据插入到部分索引层中，通过随机函数，来决定将这个结点插入到那几级索引中。如随机函数生成了值k，那我们就将这个结点添加到第一级到第k级这k级索引中。<br><br>\t\t随机函数的选择要从概率，能够保证跳表的索引大小和数据大小平衡性，不至于性能过度退化。<br><br>\t8，Redis的有序集合使用跳表的原因：<br>\t\tRedis的有序集合核心操作有：<br>\t\t\t插入一个数据<br>\t\t\t删除一个数据<br>\t\t\t查找一个数据<br>\t\t\t按照区间查找数据<br>\t\t\t迭代输出有序序列<br>\t\t<br>\t\t其中，插入，删除，查找以及迭代输出有序序列这几个操作，红黑树也可以完成，时间复杂度跟跳表是一样的。但是按照区间来查找数据这个操作，红黑树的效率没有跳表搞。跳表可以最做O(logn)。<br><br>\t\tRedis使用跳表的原因还有：<br>\t\t\t跳表更容易代码实现，简单就意味着可读性好，不容易出错。<br>\t\t\t跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗。<br>\t\t<br>\t\t但：跳表无法完全替代红黑树。因为红黑树比跳表的出现要早一些，很多编程语言中Map类型都是通过红黑树来实现的。可以直接使用，但跳表并没有这样的实现，要使用，就需要自己手动实现一个。<br>","like_count":0},{"had_liked":false,"id":161782,"user_name":"毛启圣","can_delete":false,"product_type":"c1","uid":1330056,"ip_address":"","ucode":"233DA95ED28C11","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","comment_is_top":false,"comment_ctime":1576325951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576325951","product_id":100017301,"comment_content":"时间复杂度 log 3为底 n的对数 乘以4。 log 5 为底 n的对数 乘以 6。<br><br>空间复杂读 log n <br>","like_count":0},{"had_liked":false,"id":161305,"user_name":"Jun","can_delete":false,"product_type":"c1","uid":1120678,"ip_address":"","ucode":"0FAB76D99153ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/a6/7ae63d7e.jpg","comment_is_top":false,"comment_ctime":1576171299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576171299","product_id":100017301,"comment_content":"三个节点索引的复杂度是4*log3(n)","like_count":0},{"had_liked":false,"id":161291,"user_name":"Steven.HD","can_delete":false,"product_type":"c1","uid":1752108,"ip_address":"","ucode":"40275FD51D87CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/bc/2c/af086ebf.jpg","comment_is_top":false,"comment_ctime":1576166724,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576166724","product_id":100017301,"comment_content":"想问下，动态数据结构，动态在哪里了？","like_count":0,"discussions":[{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322394,"discussion_content":"可以每2个节点抽取出节点构建索引，也可以每100个节点抽取出节点构建索引，可以根据需求自定义索引构建规则，自行决断复杂度取舍\n\n个人简介，欢迎指正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604737544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161062,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1576111868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576111868","product_id":100017301,"comment_content":"原来跳表属于用空间换时间啊","like_count":0},{"had_liked":false,"id":160942,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1576066313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576066313","product_id":100017301,"comment_content":"跳表每三个一个结点是log3n，每五个一个结点是log5n，所以时间复杂度都是o(logn)","like_count":0},{"had_liked":false,"id":160505,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1575966690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575966690","product_id":100017301,"comment_content":"为什么数据库索引用平衡二叉树 不用跳表呢？","like_count":0},{"had_liked":false,"id":160352,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575940225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575940225","product_id":100017301,"comment_content":"跳表和红黑树解决问题的思路不同，红黑树通过调整顺序来维护树的平衡和有序结构。跳表通过维护和调整索引来保证查找对数复杂度，真是条条大路通罗马。","like_count":0},{"had_liked":false,"id":160165,"user_name":"KL宇","can_delete":false,"product_type":"c1","uid":1013659,"ip_address":"","ucode":"8ED3B2BB07AE17","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/9b/c18f4047.jpg","comment_is_top":false,"comment_ctime":1575883740,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575883740","product_id":100017301,"comment_content":"对应的在跳表中查询数据的时间复杂度是多少呢, 还是O(logn),  3对应4log3n， 5对应 6log5n, 舍去常数系数低阶还是O(logn)   ","like_count":0},{"had_liked":false,"id":160005,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1575856511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575856511","product_id":100017301,"comment_content":"根据主定理，每k个节点提取一个上级索引时查找时间复杂度为 T(n)=T(n&#47;k)+O(1) ，可以得到无论k为多少，时间复杂度都是O(logn)","like_count":0},{"had_liked":false,"id":159636,"user_name":"曹昆","can_delete":false,"product_type":"c1","uid":1137062,"ip_address":"","ucode":"C45A2D716B291C","user_header":"https://static001.geekbang.org/account/avatar/00/11/59/a6/4e185fcb.jpg","comment_is_top":false,"comment_ctime":1575709950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575709950","product_id":100017301,"comment_content":"删除的代码while (levelCount&gt;1&amp;&amp;head.forwards[levelCount]==null){<br>      levelCount--;<br>    }  <br>head.forwards[levelCount] 应该是head.forwards[levelCount-1]吧？","like_count":0},{"had_liked":false,"id":159157,"user_name":"Naruto施","can_delete":false,"product_type":"c1","uid":1514578,"ip_address":"","ucode":"59FBD3747EDF2A","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/52/4b50db8c.jpg","comment_is_top":false,"comment_ctime":1575549441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575549441","product_id":100017301,"comment_content":"按照逻辑推理，提一个傻傻的问题，如果查询和迭代输出，跳表和红黑树时间效率相当，那么在区间查询的时候，跳表是查到区间起点向后迭代输出，红黑树也可以按照此逻辑实现，为什么要比跳表效率低呢？","like_count":0},{"had_liked":false,"id":158151,"user_name":"梨子苹果","can_delete":false,"product_type":"c1","uid":1716067,"ip_address":"","ucode":"3666813FEE31D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","comment_is_top":false,"comment_ctime":1575339133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575339133","product_id":100017301,"comment_content":"h=(log2n)  -1","like_count":0},{"had_liked":false,"id":157094,"user_name":"李沛霖-程序猿","can_delete":false,"product_type":"c1","uid":1063957,"ip_address":"","ucode":"10CF0DBED2D220","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/15/71a2aca9.jpg","comment_is_top":false,"comment_ctime":1575029681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575029681","product_id":100017301,"comment_content":"红黑树的叶子结点，不也是一个单链吗？","like_count":0},{"had_liked":false,"id":155681,"user_name":"零维","can_delete":false,"product_type":"c1","uid":1235055,"ip_address":"","ucode":"D783CB1D59D1BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/6f/22e5ec55.jpg","comment_is_top":false,"comment_ctime":1574735811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574735811","product_id":100017301,"comment_content":"老师，我有个关于跳表的疑问：如果刚开始插入节点时，生成的层数比较低，后面插入的数据都比刚开始插入的大，那跳表的性能也会退化很多吧，跳表怎么能做到后续增加层数还保持稳定的，仅靠随机层数那个算法就能做到吗？","like_count":0},{"had_liked":false,"id":154232,"user_name":"握不住手中沙","can_delete":false,"product_type":"c1","uid":1097132,"ip_address":"","ucode":"F194E47C4D42C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ac/49494ed8.jpg","comment_is_top":false,"comment_ctime":1574394190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574394190","product_id":100017301,"comment_content":"思考题：<br>不管是每三个还是每五个节点提取一个结点作为上级索引，在跳表中查询数据的时间复杂度都是O(logn)。<br>以提取5个节点为例说明，每5个节点提取一个作为上级索引，那么最高一层有5个节点，而跳表高度为log5n，每层最多需要查找5个节点，即O(mlogn)中的m=5，最终，时间复杂度还是O(logn)","like_count":0},{"had_liked":false,"id":153112,"user_name":"Geek_949cc1","can_delete":false,"product_type":"c1","uid":1690476,"ip_address":"","ucode":"F8ACDBF2FA8CC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","comment_is_top":false,"comment_ctime":1574160392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574160392","product_id":100017301,"comment_content":"看理论虽然还是能理解，还没来得及看代码，主要是自己没学过Java，但是我感觉这个在构建调表的适合好像可以通过递归来实现，毕竟每一阶的实现都差不多。知道某一阶只有两个索引的时候就可以跳出了，再返回最顶层的头节点，感觉好像就可以进行查找了。下去了看看能不能  嘿嘿嘿","like_count":0},{"had_liked":false,"id":152993,"user_name":"SapereAude","can_delete":false,"product_type":"c1","uid":1717549,"ip_address":"","ucode":"C5D61C535B7B10","user_header":"https://static001.geekbang.org/account/avatar/00/1a/35/2d/a2bde67e.jpg","comment_is_top":false,"comment_ctime":1574135506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574135506","product_id":100017301,"comment_content":"有大佬解释下：什么是迭代输出有序序列 么？","like_count":0},{"had_liked":false,"id":152471,"user_name":"Liang Wu","can_delete":false,"product_type":"c1","uid":1183373,"ip_address":"","ucode":"242DACA6B56744","user_header":"https://static001.geekbang.org/account/avatar/00/12/0e/8d/d8590e4e.jpg","comment_is_top":false,"comment_ctime":1574023424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574023424","product_id":100017301,"comment_content":"代码有个地方不懂，插入和删除为什么要另外弄个update array来记着位置而不在第一个for loop里面直接更新呢？","like_count":0},{"had_liked":false,"id":152300,"user_name":"pimpl","can_delete":false,"product_type":"c1","uid":1006116,"ip_address":"","ucode":"AB5302A7B0FBDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/24/300864af.jpg","comment_is_top":false,"comment_ctime":1573964490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573964490","product_id":100017301,"comment_content":"每种数据结构都能有使用场景的介绍，很不错👍","like_count":0},{"had_liked":false,"id":147747,"user_name":"会飞的鱼","can_delete":false,"product_type":"c1","uid":1257205,"ip_address":"","ucode":"BA3FC4E0BF7B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erloYzyia2hRy19E3aCtc0pf10MiaGmzEcXw8UZ3jC3LAibD8icWAFVCXGAlAic3mpjBUrHvyreyhAjIFw/132","comment_is_top":false,"comment_ctime":1572883041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572883041","product_id":100017301,"comment_content":"并不是很理解github的代码，如果能多一些注解就好了","like_count":0},{"had_liked":false,"id":146022,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1572420675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572420675","product_id":100017301,"comment_content":"思考题，3个或者5个，按照大O表示法的含义，忽略常量低阶，推导过程一样，时间复杂都都是O（logn）","like_count":0},{"had_liked":false,"id":145792,"user_name":"Mr.Fu","can_delete":false,"product_type":"c1","uid":1613254,"ip_address":"","ucode":"F1E4304C5CDE52","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/c6/a72db706.jpg","comment_is_top":false,"comment_ctime":1572366857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572366857","product_id":100017301,"comment_content":"一.What-什么是跳表：链表加多级索引的结构，就是跳表<br>使用空间换时间的设计思路，通过构建多级索引来提高查询的效率，实现了基于链表的“二分查找”<br>一种动态数据结构，支持快速的插入、删除、查找操作，时间复杂度都是 O(logn)<br>跳表的空间复杂度是 O(n)。不过，跳表的实现非常灵活，可以通过改变索引构建策略，有效平衡执行效率和内存消耗<br>比红黑树实现简单，为了代码的简单、易读，有时候更倾向用跳表<br><br>二.关键点分析<br>查找的时间复杂度：跳表中查询任意数据的时间复杂度就是 O(logn)，比单链表中查询某个数据的时间复杂度是 O(n)要快<br><br>①每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是 n&#47;2，第二级索引的结点个数大约就是 n&#47;4，第三级索引的结点个数大约就是 n&#47;8，依次类推，第 k 级索引的结点个数是第 k-1 级索引的结点个数的 1&#47;2，那第 k级索引结点的个数就是 n&#47;(2^k)<br>②假设索引有 h 级，最高级的索引有 2 个结点。通过上面的公式，可以得到 n&#47;(2^h)=2，从而求得 h=log2n-1。如果包含原始链表这一层，整个跳表的高度就是 log2n<br>③在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)，其中m等于3<br>④假设要查找的数据是 x，在第 k 级索引中，遍历到 y 结点之后，发现 x 大于 y，小于后面的结点 z，所以通过 y 的 down 指针，从第 k 级索引下降到第 k-1 级索引。在第 k-1 级索引中，y 和 z 之间只有 3 个结点（包含 y 和 z），所以在 K-1 级索引中最多只需要遍历 3 个结点，依次类推，每一级索引都最多只需要遍历 3 个结点<br>存储的空间复杂度：跳表的空间复杂度是 O(n)<br>①假设原始链表大小为 n，那第一级索引大约有 n&#47;2 个结点，第二级索引大约有 n&#47;4 个结点，以此类推，每上升一级就减少一半，直到剩下 2 个结点。如果把每层索引的结点数写出来，就是一个等比数列。这几级索引的结点总和就是 n&#47;2+n&#47;4+n&#47;8…+8+4+2=n-2。所以，跳表的空间复杂度是 O(n)<br>②跳表存储空间大小和每几个节点建立一个索引有关<br>③但是实际原始链表中存储的有可能是很大的对象，而索引结点只需要存储关键值和几个指针，并不需要存储对象，所以当对象比索引结点大很多时，那索引占用的额外空间就可以忽略了<br>高效快速的插入删除数据：插入、删除操作的时间复杂度也是 O(logn)<br>插入和删除都要先找到要改变的节点的位置，这个找的过程时间复杂度是O(logn)，找到后的插入和删除操作时间复杂度时O(1)<br><br>索引动态更新<br>①通过随机函数来维护索引与原始链表大小之间的平衡，避免出现某 2 个索引结点之间数据非常多，进而导致复杂度退化，以及查找、插入、删除操作性能下降。<br>②通过随机函数来决定将这个结点插入到哪几级索引中，比如随机函数生成了值 K，就将这个结点添加到第一级到第 K 级这 K 级索引中<br><br>三.Redis用跳表实现有序集合<br>Redis可以按照区间查找数据（比如查找值在 [100, 356] 之间的数据），对于这种操作，跳表可以做到 O(logn) 的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了<br>跳表更容易代码实现(相对于红黑树)<br>跳表更加灵活，它可以通过改变索引构建策略，有效平衡执行效率和内存消耗","like_count":0},{"had_liked":false,"id":144981,"user_name":"Mango","can_delete":false,"product_type":"c1","uid":1515101,"ip_address":"","ucode":"D34F0424F4F742","user_header":"https://static001.geekbang.org/account/avatar/00/17/1e/5d/62fdc917.jpg","comment_is_top":false,"comment_ctime":1572148013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572148013","product_id":100017301,"comment_content":"跳表的一个应用是多级页表，而且树状结构可以剪枝，对于&quot;两头实，中间空&quot;这种内存分布而言，可以减少不少内存空间。<br><br>至于m个节点抽出一级索引，可以参考完全m叉树全部展开的结构，树的高度就是目标所在的那条多级索引索引链的长度，也就是logmN，复杂度依然是O(logn)","like_count":0},{"had_liked":false,"id":143969,"user_name":"Dawson","can_delete":false,"product_type":"c1","uid":1539873,"ip_address":"","ucode":"D69F080F79C3D8","user_header":"https://static001.geekbang.org/account/avatar/00/17/7f/21/8ef07609.jpg","comment_is_top":false,"comment_ctime":1571817315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571817315","product_id":100017301,"comment_content":"p.forwards[i]是 p节点  在i层  的下一个节点<br>。forwards数组存的是各层p的下一个节点","like_count":0},{"had_liked":false,"id":143530,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1285917,"ip_address":"","ucode":"677C6BEDD65365","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/1d/edb464cf.jpg","comment_is_top":false,"comment_ctime":1571726137,"is_pvip":false,"replies":[{"id":"55994","content":"https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572231084,"ip_address":"","comment_id":143530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571726137","product_id":100017301,"comment_content":"github,java版，地址是多少。在哪呢，没有看到","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471579,"discussion_content":"https://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572231084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142848,"user_name":"孫やさん","can_delete":false,"product_type":"c1","uid":1134895,"ip_address":"","ucode":"C60877C1C71685","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/2f/7b04140c.jpg","comment_is_top":false,"comment_ctime":1571560111,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1571560111","product_id":100017301,"comment_content":"评论区的人懂得都好多，我什么都评论不出来","like_count":0},{"had_liked":false,"id":142725,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1571480732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571480732","product_id":100017301,"comment_content":"争哥用现在的跳表图示很好的让我们这些基础不好的人快速理解了跳表的原理，但实际的实现代码却不是很好理解了，网上找了篇文章，其对跳表节点的图示是这样的<br>|    |__|<br>| 6 |__|<br>|    |__|<br>这个代表说6这个节点有除原单链表外，包含两个索引层。<br>跳表是通过random的方式来决定新插入的节点会有几个索引层级，最小为1层，最大不会超过自定义在SkipList类的全局变量MAX_LEVEL的。<br>原文链接为https:&#47;&#47;lotabout.me&#47;2018&#47;skip-list&#47;","like_count":0},{"had_liked":false,"id":140719,"user_name":"厚积薄发","can_delete":false,"product_type":"c1","uid":1657999,"ip_address":"","ucode":"6FE711F65C8C66","user_header":"https://static001.geekbang.org/account/avatar/00/19/4c/8f/83eefcff.jpg","comment_is_top":false,"comment_ctime":1571037814,"is_pvip":false,"replies":[{"id":"54521","content":"那个代码确实难写的，我也写了老久。这个很正常。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571093946,"ip_address":"","comment_id":140719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571037814","product_id":100017301,"comment_content":"看了老师的图解，知道跳表是怎么一回事，代码的实现勉强能看懂，但自己实现比较困难，我的理解是真正实现的时候并不是严格3个结点抽1个或者5个结点抽1个，而是50%的概率向上扩展，forward变量主要是从纵向考虑<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470524,"discussion_content":"那个代码确实难写的，我也写了老久。这个很正常。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571093946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140660,"user_name":"Geek_282c7f","can_delete":false,"product_type":"c1","uid":1610450,"ip_address":"","ucode":"0855B0BA605B63","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/xNerZNhJgdtmpicynBO7v2SHbCI8G9FK3iaIOmAZiaPREsQatKIFf4c02KEL8hObHAOEAEI9SHaIzqU169OEpTeGg/132","comment_is_top":false,"comment_ctime":1571023019,"is_pvip":false,"replies":[{"id":"54523","content":"也可以这么说，你说遍历了也可以，你说不用遍历也可以，关键看你如何定义遍历了，有些东西别太较真哈，不影响最终结果的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571094029,"ip_address":"","comment_id":140660,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571023019","product_id":100017301,"comment_content":"k-1级只需要遍历y和z之间的那个节点呀，y和z不需要重复遍历吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470498,"discussion_content":"也可以这么说，你说遍历了也可以，你说不用遍历也可以，关键看你如何定义遍历了，有些东西别太较真哈，不影响最终结果的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571094029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140336,"user_name":"ujshenry","can_delete":false,"product_type":"c1","uid":1117410,"ip_address":"","ucode":"52840F95862014","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/e2/8a5e14b1.jpg","comment_is_top":false,"comment_ctime":1570882186,"is_pvip":false,"replies":[{"id":"54238","content":"确实比较难懂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570916446,"ip_address":"","comment_id":140336,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570882186","product_id":100017301,"comment_content":"GitHub上的代码，看了三天，才大致看懂了( Ĭ ^ Ĭ )","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470349,"discussion_content":"确实比较难懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570916446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138881,"user_name":"David","can_delete":false,"product_type":"c1","uid":1023472,"ip_address":"","ucode":"1C76747719CD3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/f0/6c34b90f.jpg","comment_is_top":false,"comment_ctime":1570498276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570498276","product_id":100017301,"comment_content":"时间复杂度还是O（logn）","like_count":0},{"had_liked":false,"id":136258,"user_name":"别天神","can_delete":false,"product_type":"c1","uid":1107606,"ip_address":"","ucode":"42A08D6EF5C59A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/96/eb143e46.jpg","comment_is_top":false,"comment_ctime":1569398914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569398914","product_id":100017301,"comment_content":"试着实现了下：<br>public class SkipList {<br>    &#47;&#47; 最大层数是16，其中索引层有15层，数据层1层，位于位置0<br>    final int MAX_LEVEL = 16;<br>    int curLevel = 1;<br>    Node[] nodes;<br>    Random rnd;<br><br>    public SkipList() {<br>        rnd = new Random();<br>        nodes = new Node[MAX_LEVEL];<br>        &#47;&#47; 每层一个哨兵节点<br>        for (int i = 0; i &lt; MAX_LEVEL; i++) {<br>            nodes[i] = new Node();<br>            if (i &gt; 0)<br>                nodes[i].down = nodes[i - 1];<br>        }<br>    }<br><br>    public void insert(int value) {<br>        int level = randomLevel();<br><br>        &#47;&#47; 记录插入位置的前驱<br>        Node[] update = new Node[level];<br>        Node p = null;<br>        int topLevel = Math.max(curLevel, level);<br><br>        for (int i = topLevel - 1; i &gt;= 0; i--) {<br>            p = i == topLevel - 1 ? nodes[i] : p.down;<br>            while (p.next != null &amp;&amp; p.next.data &lt; value) {<br>                p = p.next;<br>            }<br><br>            if (level &gt; i) update[i] = p;<br>        }<br><br>        for (int i = 0; i &lt; level; i++) {<br>            Node newNode = new Node(value);<br>            newNode.next = update[i].next == null ? null : update[i].next.next;<br>            update[i].next = newNode;<br><br>            if (i &gt; 0) newNode.down = update[i - 1].next;<br>        }<br><br>        if (level &gt; curLevel) curLevel = level;<br>    }<br>    <br>    private int randomLevel() {<br>        &#47;&#47; level=1表示无索引<br>        int level = 1;<br>        while (Math.random() &lt; 0.5 &amp;&amp; level &lt; MAX_LEVEL) {<br>            level++;<br>        }<br>        return level;<br>    }<br><br>    class Node {<br>        private int data;<br>        private Node next;<br>        private Node down;<br><br>        Node(int data) {<br>            this.data = data;<br>        }<br><br>        Node() {<br>        }<br>    }","like_count":0},{"had_liked":false,"id":136209,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1569382661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569382661","product_id":100017301,"comment_content":"github中的实现太巧妙了，结合评论中其他兄弟的留言，终于在二刷的时候看明白了","like_count":0},{"had_liked":false,"id":133322,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1568516476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568516476","product_id":100017301,"comment_content":"时间复杂度是m*logmn,m为对数的底，所以大O表示法还是O(n),区别不是很大，然后空间复杂度小一点，应该是n&#47;m吧，总体来说，就像上面说的，实际使用过程中，里面存储的是对象，相比降低点的空间复杂度，影响不大","like_count":0},{"had_liked":false,"id":132760,"user_name":"jaynnay","can_delete":false,"product_type":"c1","uid":1436995,"ip_address":"","ucode":"0BD3F99A29ED57","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/43/7d91b07a.jpg","comment_is_top":false,"comment_ctime":1568214727,"is_pvip":false,"replies":[{"id":"51237","content":"本来就是这样子的呢，你可以看下这篇文章：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;PdvdZoa-SGk_Ojkv2pC2tQ<br>","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568591655,"ip_address":"","comment_id":132760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568214727","product_id":100017301,"comment_content":"我有个问题，假如一个数字在多层都出现了，可以不可以共用数据域，相当于只有一个节点，里面有一个数据对象，然后有n个指针，这样可以减少内存使用率，实际业务场景中，跳表节点里存储的数据可能很大<br>例如把图中的7，只存一个7，和三个指针域","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467110,"discussion_content":"本来就是这样子的呢，你可以看下这篇文章：\nhttps://mp.weixin.qq.com/s/PdvdZoa-SGk_Ojkv2pC2tQ\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568591655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131939,"user_name":"A米fans1111","can_delete":false,"product_type":"c1","uid":1239504,"ip_address":"","ucode":"99BE48333DD919","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/d0/af96c86a.jpg","comment_is_top":false,"comment_ctime":1567988450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567988450","product_id":100017301,"comment_content":"我觉得深圳地铁11号线，时速120  大站停车，就是这样干的。<br>一个优质的算法，引发以前的偏远房价从1万飙到5万。<br>引发我再也不开车去机场，真没地铁块，停车还折腾。","like_count":0},{"had_liked":false,"id":130954,"user_name":"不爱学习Mr.Du","can_delete":false,"product_type":"c1","uid":1438875,"ip_address":"","ucode":"8F1835B5768088","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/9b/d2ba5bb8.jpg","comment_is_top":false,"comment_ctime":1567583487,"is_pvip":false,"replies":[{"id":"49794","content":"主要是跳表实现起来更简单吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567723434,"ip_address":"","comment_id":130954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567583487","product_id":100017301,"comment_content":"老师，zset底层不用b+树，是不是因为插入删除效率太低","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466212,"discussion_content":"主要是跳表实现起来更简单吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567723434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129913,"user_name":"书策稠浊","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1567325076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567325076","product_id":100017301,"comment_content":"ConcurrentSkipListMap就是跳表实现。","like_count":0},{"had_liked":false,"id":129911,"user_name":"书策稠浊","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1567324792,"is_pvip":false,"replies":[{"id":"48497","content":"根据业务需求，权衡时间、空间复杂度来定~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567379128,"ip_address":"","comment_id":129911,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567324792","product_id":100017301,"comment_content":"那具体多少个结点提取一个结点做索引才合理，要根据什么来判断呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465713,"discussion_content":"根据业务需求，权衡时间、空间复杂度来定~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567379128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307497,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","nickname":"书策稠浊","note":"","ucode":"A29875CE15FDA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7263,"discussion_content":"是说根据实际情况的效率来定是吧。先从两个开始，不断测试得到最佳结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567439411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129037,"user_name":"Yong","can_delete":false,"product_type":"c1","uid":1236765,"ip_address":"","ucode":"154CD23B5ACC67","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1d/038853e5.jpg","comment_is_top":false,"comment_ctime":1567013895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567013895","product_id":100017301,"comment_content":"很棒，，讲解。<br>包括 评论也很有参考价值。<br>谢谢分享","like_count":0},{"had_liked":false,"id":128127,"user_name":"八百","can_delete":false,"product_type":"c1","uid":1253530,"ip_address":"","ucode":"79F1F79ADF5A00","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","comment_is_top":false,"comment_ctime":1566834160,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566834160","product_id":100017301,"comment_content":"(｡˘•㉨•˘｡)心疼..老师啊，花了好长时间都没看懂redis跳表里的span是啥。。","like_count":0,"discussions":[{"author":{"id":1266233,"avatar":"https://static001.geekbang.org/account/avatar/00/13/52/39/2211b1a2.jpg","nickname":"Z-ll","note":"","ucode":"68A75A53D1455E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77861,"discussion_content":"span是跨度，是从前一个节点通过forward到当前节点经过的节点数量。用于计算排名，累加span就可以啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575949229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126858,"user_name":"汪晓东","can_delete":false,"product_type":"c1","uid":1035429,"ip_address":"","ucode":"6D95BE9F7DDF6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/a5/6dc15c13.jpg","comment_is_top":false,"comment_ctime":1566492277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566492277","product_id":100017301,"comment_content":"实际上开发中完成一个跳表结构其实很简单，比如C++开发中常用的stl，只需要一个map和一个list加上很少量的代码，就可以完成了","like_count":0},{"had_liked":false,"id":123641,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1565738934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565738934","product_id":100017301,"comment_content":"可以看看我在 GitHub 上的代码或者 Redis 中关于有序集合的跳表实现<br><br>老师太皮了～～～","like_count":0},{"had_liked":false,"id":121585,"user_name":"一枝梅","can_delete":false,"product_type":"c1","uid":1121677,"ip_address":"","ucode":"7DCE43B638EA6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","comment_is_top":false,"comment_ctime":1565162494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565162494","product_id":100017301,"comment_content":"每一层最多需要遍历的结点数：m=R+1。R是跳表的基数。若基数是2，就是二分跳表，基数是3就是三分跳表。","like_count":0},{"had_liked":false,"id":119023,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1564488669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564488669","product_id":100017301,"comment_content":"这代码看了3天，终于知道跳表怎么实现的。好像也不是很难。争取第二次在看的时候，不会到红黑树那里卡主。","like_count":0},{"had_liked":false,"id":118529,"user_name":"ffflag","can_delete":false,"product_type":"c1","uid":1610605,"ip_address":"","ucode":"CE8180ED7BDDAE","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/6d/04c4dd7b.jpg","comment_is_top":false,"comment_ctime":1564381563,"is_pvip":false,"replies":[{"id":"43669","content":"我们从第一级索引开始查找的，第一级索引找到13结点之后，可以直接跳到下面那一层链表中的13结点，继续往后查找，不需要再从1开始了。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564530159,"ip_address":"","comment_id":118529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564381563","product_id":100017301,"comment_content":"有一个问题，在找16的例子中，16在13,17中，我们是找到了17才能确定是在13-17中，但这里是单向列表，所以我们应该是又从1开始。这样看来的话，遍历的次数会增加吧。这里不是很明白，还请老师解答下，谢谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460441,"discussion_content":"我们从第一级索引开始查找的，第一级索引找到13结点之后，可以直接跳到下面那一层链表中的13结点，继续往后查找，不需要再从1开始了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564530159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114841,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1563415255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563415255","product_id":100017301,"comment_content":"代码中的下面语句：<br><br>  public class Node {<br>    private int data = -1;<br>    private Node forwards[] = new Node[MAX_LEVEL];<br>    private int maxLevel = 0;<br><br>    @Override<br>    public String toString() {<br>      StringBuilder builder = new StringBuilder();<br>      builder.append(&quot;{ data: &quot;);<br>      builder.append(data);<br>      builder.append(&quot;; levels: &quot;);<br>      builder.append(maxLevel);<br>      builder.append(&quot; }&quot;);<br><br>      return builder.toString();<br>    }<br>  }<br><br>在Node head = new Node()时会导致堆栈溢出吧？","like_count":0},{"had_liked":false,"id":114298,"user_name":"HaiSky","can_delete":false,"product_type":"c1","uid":1358312,"ip_address":"","ucode":"ECE7C263142432","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","comment_is_top":false,"comment_ctime":1563267369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563267369","product_id":100017301,"comment_content":"一个跳跃表应该有若干个层（Level）链表组成；<br>跳跃表中最底层的链表包含所有数据； 每一层链表中的数据都是有序的；<br>如果一个元素X出现在第i层，那么编号比 i 小的层都包含元素X；<br>第 i 层的元素通过一个指针指向下一层拥有相同值的元素；<br>头指针（head）指向最高一层的第一个元素；","like_count":0},{"had_liked":false,"id":112888,"user_name":"愤怒💢的可乐😠","can_delete":false,"product_type":"c1","uid":1178002,"ip_address":"","ucode":"EA44AA88D65306","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/92/30917242.jpg","comment_is_top":false,"comment_ctime":1562837771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562837771","product_id":100017301,"comment_content":"本人根据作者的文章以及代码整理出来了一篇文章https:&#47;&#47;blog.csdn.net&#47;yjw123456&#47;article&#47;details&#47;95453996，对代码都有注释，希望能帮到大家。","like_count":0},{"had_liked":false,"id":111064,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1562462042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562462042","product_id":100017301,"comment_content":"请问王争老师对Linux Kernel熟悉吗？其用来将虚拟地址空间映射到物理地址空间的数据结构 页面跟跳表的概念比较像。","like_count":0},{"had_liked":false,"id":107329,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561515017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561515017","product_id":100017301,"comment_content":"跳表：链表+多级索引<br>时间复杂度：o(logn)<br>空间复杂度：o(n)<br>跳表vs红黑树的优势：区间查找数据；更易实现；更加灵活（通过改变索引构建策略，平衡执行效率和内存消耗）","like_count":0},{"had_liked":false,"id":106226,"user_name":"君莫惜","can_delete":false,"product_type":"c1","uid":1101408,"ip_address":"","ucode":"FD570371148000","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/60/7d17522d.jpg","comment_is_top":false,"comment_ctime":1561212607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561212607","product_id":100017301,"comment_content":"跳表类似于 数组的二分查找的查找的变种，只不过是为链表服务的，它通过每几个节点抽取出一个一级索引，再在一级索引中每隔几个抽取出一个二级索引，依次类推","like_count":0},{"had_liked":false,"id":105825,"user_name":"CozyThinker","can_delete":false,"product_type":"c1","uid":1041217,"ip_address":"","ucode":"996D8B8C993C5C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e3/41/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1561089609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561089609","product_id":100017301,"comment_content":"跳表，第一次看到这个概念，以时间换空间<br>不错","like_count":0},{"had_liked":false,"id":100080,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1559439432,"is_pvip":false,"replies":[{"id":"36026","content":"merge了 👍<br>","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559514592,"ip_address":"","comment_id":100080,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559439432","product_id":100017301,"comment_content":"用php实现了一个跳表，提到小争哥的pull request去了，希望被pick一下啊：https:&#47;&#47;github.com&#47;SHQHDMR&#47;algo&#47;tree&#47;master&#47;php&#47;17_skiplist","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452403,"discussion_content":"merge了 👍\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559514592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99761,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1559294018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559294018","product_id":100017301,"comment_content":"private static final int MAX_LEVEL = 16;<br>    private int levelCount = 1;<br>    private Node head = new Node();  &#47;&#47; 带头链表<br>    private Random r = new Random();<br><br>    public void insert(int value) {<br>        int level = randomLevel();<br>        Node newNode = new Node();<br>        newNode.data = value;<br>        newNode.maxLevel = level;<br>        &#47;&#47; update数组为层级索引，插入新节点需要在索引建立层数<br>        Node update[] = new Node[level];<br>        for (int i = 0; i &lt; level; ++i) {<br>            update[i] = head;<br>        }<br>        &#47;&#47; record every level largest value which smaller than insert value in update[]<br>        &#47;&#47; 在update中纪录每一层中 小于value值的最大节点<br>        Node p = head;<br>        for (int i = level - 1; i &gt;= 0; --i) {<br>            while (p.forwards[i] != null &amp;&amp; p.forwards[i].data &lt; value) {<br>                p = p.forwards[i];<br>            }<br>            update[i] = p;&#47;&#47; use update save node in search path<br>        }<br><br>        &#47;&#47; in search path node next node become new node forwords(next)<br>        &#47;&#47; 插入newNode 串联每一个层级的索引<br>        for (int i = 0; i &lt; level; ++i) {<br>            newNode.forwards[i] = update[i].forwards[i];<br>            update[i].forwards[i] = newNode;<br>        }<br><br>        &#47;&#47; update node hight<br>        if (levelCount &lt; level) levelCount = level;<br>    }<br>    &#47;&#47; 随机 level 次，如果是奇数层数 +1，防止伪随机<br>    private int randomLevel() {<br>        int level = 1;<br>        for (int i = 1; i &lt; MAX_LEVEL; ++i) {<br>            if (r.nextInt() % 2 == 1) {<br>                level++;<br>            }<br>        }<br><br>        return level;<br>    }<br>    public class Node {<br>        private int data = -1;<br>        &#47;**<br>         * 每一层单链表指针：<br>         * 0：最底层<br>         * ......<br>         * i：第i层节点<br>         *<br>         * p = p.forwards[i] 表示第i层下一个节点<br>         *&#47;<br>        private Node forwards[] = new Node[MAX_LEVEL];<br>        private int maxLevel = 0;<br>        ......<br>    }","like_count":0},{"had_liked":false,"id":98832,"user_name":"陈祥云","can_delete":false,"product_type":"c1","uid":1479938,"ip_address":"","ucode":"C683CF2ABE023A","user_header":"https://static001.geekbang.org/account/avatar/00/16/95/02/7e35d275.jpg","comment_is_top":false,"comment_ctime":1559101811,"is_pvip":false,"replies":[{"id":"35618","content":"ipad paper","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559172298,"ip_address":"","comment_id":98832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559101811","product_id":100017301,"comment_content":"我就是想问下，文章中的图是用什么工具绘制的。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451857,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559172298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97800,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1558779259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558779259","product_id":100017301,"comment_content":"这个代码看了一周, 最后还是画图一步一步理解了,不容易.容易绕进去.","like_count":0},{"had_liked":false,"id":97434,"user_name":"jacke","can_delete":false,"product_type":"c1","uid":1161209,"ip_address":"","ucode":"05F355E1FF88C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/f9/a8f26b10.jpg","comment_is_top":false,"comment_ctime":1558668638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558668638","product_id":100017301,"comment_content":"还是不太明白m为什么3？你那这个具体例子来说明只能说明这个例子、不是严格的推导过程吧","like_count":0},{"had_liked":false,"id":95777,"user_name":"saber","can_delete":false,"product_type":"c1","uid":1193468,"ip_address":"","ucode":"D02F8D129DB41C","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","comment_is_top":false,"comment_ctime":1558172213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558172213","product_id":100017301,"comment_content":"跳表按照老师的 java 版本修改成了 c++ 版本，加上了一些注释，可能会对刚开始学跳表的同学理解起来更有帮助<br>https:&#47;&#47;github.com&#47;saber&#47;algorithm&#47;blob&#47;master&#47;src&#47;skip_list&#47;skip_list.hpp","like_count":0},{"had_liked":false,"id":94192,"user_name":"hitskyer","can_delete":false,"product_type":"c1","uid":1066047,"ip_address":"","ucode":"D11C5032355B57","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/3f/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1557742575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557742575","product_id":100017301,"comment_content":"https:&#47;&#47;github.com&#47;wangzheng0822&#47;algo&#47;blob&#47;master&#47;java&#47;17_skiplist&#47;SkipList.java<br>——insert函数当随机生成的level为0 &amp;&amp; 插入的数据为最大时，该函数的效率退化为O(n)，建议将update数组的大小修改为levelCount，并模拟find操作过程找到每一层的forwards，然后只修改0~level(&lt;levelCount)范围内的索引关系。","like_count":0},{"had_liked":false,"id":92489,"user_name":"ThinkingMan.","can_delete":false,"product_type":"c1","uid":1217603,"ip_address":"","ucode":"722674A8BACA85","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","comment_is_top":false,"comment_ctime":1557282562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557282562","product_id":100017301,"comment_content":"有点吃力了，评论好精彩，理解得更多了","like_count":0},{"had_liked":false,"id":89569,"user_name":"稚者","can_delete":false,"product_type":"c1","uid":1128204,"ip_address":"","ucode":"D824C0B263B26A","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/0c/c623649c.jpg","comment_is_top":false,"comment_ctime":1556208822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556208822","product_id":100017301,"comment_content":"跳表的代码看两天了，真的是看不懂。","like_count":0},{"had_liked":false,"id":87766,"user_name":"张立华","can_delete":false,"product_type":"c1","uid":1231713,"ip_address":"","ucode":"173B938DD9478A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/61/b62d8a3b.jpg","comment_is_top":false,"comment_ctime":1555687092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555687092","product_id":100017301,"comment_content":"对着代码，在画图。 跳跃表的代码终于看明白了","like_count":0},{"had_liked":false,"id":84627,"user_name":"gico","can_delete":false,"product_type":"c1","uid":1167345,"ip_address":"","ucode":"AE40E8717A4F60","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/f1/057899c7.jpg","comment_is_top":false,"comment_ctime":1554887593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554887593","product_id":100017301,"comment_content":"GitHub  代码 理解 如下<br>先理解Node的结构，再理解insert函数<br>#1. 结构<br>```<br>  5 head-&gt;2<br>  4 head-&gt;1-&gt;2<br>  3 head-&gt;1-&gt;2-&gt;4-&gt;5-&gt;6<br>  2 head-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br>  1 head-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br>  0 head-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br>```<br>  ***(Node中的forward[]表示为 第i层 该Node节点的下一个节点 如  head的forward[0] 代表为第0层下一个节点 即1)***。<br><br>#2. 插入函数理解<br>（1）生成随机层数函数 在这层以及下层都要插入这个值<br>  (2）update[i]  函数表示第 i 层要更新的节点 ，每层都初始化指向head节点。<br>（3）找出每一层最后一个小于value的节点 记录最后一个小于value的节点。<br>  (4）然后将value插入到这个节点后面。更新每层节点","like_count":0},{"had_liked":false,"id":83626,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1554686461,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1554686461","product_id":100017301,"comment_content":"为什么map要用红黑树实现？不是很理解，谁能答疑解惑？","like_count":0,"discussions":[{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310589,"discussion_content":"红黑树的问题是范围查找不太好，但是map是等值查找，红黑树的等值查找性能和跳表一样，时间复杂度都是logn","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601927850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80944,"user_name":"张潇赟","can_delete":false,"product_type":"c1","uid":1132192,"ip_address":"","ucode":"1A45B57F9E0723","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","comment_is_top":false,"comment_ctime":1553761050,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1553761050","product_id":100017301,"comment_content":"github上的代码彻底没看明白，请教下forwards[]这个数组怎么理解啊？？？？？<br>public class Node {<br>    private int data = -1;<br>    private Node forwards[] = new Node[MAX_LEVEL];<br>    private int maxLevel = 0;<br>  }","like_count":0,"discussions":[{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":19298,"discussion_content":"请问你理解了吗。我也无法理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569161662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80834,"user_name":"凭实力写bug","can_delete":false,"product_type":"c1","uid":1235611,"ip_address":"","ucode":"6F772551F18935","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/9b/e0ef47df.jpg","comment_is_top":false,"comment_ctime":1553740036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553740036","product_id":100017301,"comment_content":"评论好优秀","like_count":0},{"had_liked":false,"id":76689,"user_name":"肖邦的学徒","can_delete":false,"product_type":"c1","uid":1159128,"ip_address":"","ucode":"1DB95CD3E10F33","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/d8/0f85fc8f.jpg","comment_is_top":false,"comment_ctime":1552667929,"is_pvip":false,"replies":[{"id":"28115","content":"随机也没问题的。那是为了让代码更简洁，兼容其他插入操作。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552875300,"ip_address":"","comment_id":76689,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552667929","product_id":100017301,"comment_content":"插入的第一个元素的高度因该固定是最大值吧 ，代码看也是随机的啊 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443405,"discussion_content":"随机也没问题的。那是为了让代码更简洁，兼容其他插入操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552875300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76468,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1552614916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552614916","product_id":100017301,"comment_content":"n&#47;3k  = 3 -&gt; k = log3N-1 ,每个结点遍历4次,   O(4*(log3N-1)) -&gt; O(logN)","like_count":0},{"had_liked":false,"id":73693,"user_name":"好人","can_delete":false,"product_type":"c1","uid":1439552,"ip_address":"","ucode":"8BA995A57F7E1A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/40/cba812dc.jpg","comment_is_top":false,"comment_ctime":1551959818,"is_pvip":false,"replies":[{"id":"27365","content":"两个，三个影响不大，这个也不好深究哈","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552357464,"ip_address":"","comment_id":73693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551959818","product_id":100017301,"comment_content":"在算时间复杂度的时候？老师，为什么每层要遍历三个呢？为啥我感觉老师你画的图和我的理解是两个就够了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442227,"discussion_content":"两个，三个影响不大，这个也不好深究哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552357464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72454,"user_name":"Tom","can_delete":false,"product_type":"c1","uid":1144744,"ip_address":"","ucode":"2E7713F2D0552C","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/a8/dfa7ae9e.jpg","comment_is_top":false,"comment_ctime":1551630204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551630204","product_id":100017301,"comment_content":"补充一下关于调表和红黑树的一些见解，在并发模型下，跳表的表现要优于红黑树，主要原因在于修改数据时要维护的锁粒度不同","like_count":0},{"had_liked":false,"id":72340,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551591523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551591523","product_id":100017301,"comment_content":"redis里面zset就是hash+跳表实现的","like_count":0},{"had_liked":false,"id":71021,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1551246500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551246500","product_id":100017301,"comment_content":"老师Github的代码，大致明白了原理。是不是还少一段，构建索引的过程。。如果直接用insert去构建，那么用插入1-100 测试，构建完，可能会有十几层，而且只有最顶层才有跳跃，其他几层都跟第一层几乎一样的。。性能跟文中的理论，应该差距比较大。","like_count":0},{"had_liked":false,"id":69280,"user_name":"有匪君子","can_delete":false,"product_type":"c1","uid":1204061,"ip_address":"","ucode":"72B91AFC96E285","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/5d/63010e32.jpg","comment_is_top":false,"comment_ctime":1550711191,"is_pvip":false,"replies":[{"id":"24623","content":"你说的这个跟数据结构没关系了。跟编程语言中对象的存储方式有关。像Java中的对象，比如ArrayList&lt;Object&gt;，那object都是独立存储的，数组中存储指针。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550719777,"ip_address":"","comment_id":69280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550711191","product_id":100017301,"comment_content":"老师，我见过一种数据结构，两层，第一层用数组实现，存的全部是指针，第二层存的是new出来的数据结构空间。这样既可以随机存取，又可以内存不联续。（第一层内存连续，插入删除需要平移第一层，其实第一层占的内存与实际数据第二层占的内存相比微乎其微，所以效率也很高）。这种数据结构感觉是不是比跳表更好?它有没有专业的名字?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440038,"discussion_content":"你说的这个跟数据结构没关系了。跟编程语言中对象的存储方式有关。像Java中的对象，比如ArrayList&amp;lt;Object&amp;gt;，那object都是独立存储的，数组中存储指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550719777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67931,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1550325780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550325780","product_id":100017301,"comment_content":"跳表似乎对应着「操作系统」中的文件管理，通常采用索引分配的方式存储文件。算是数组和链表的结合，在保持数组随机访问的特性时，保留了链表链式存储的特性。","like_count":0},{"had_liked":false,"id":65355,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1549274479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549274479","product_id":100017301,"comment_content":"时间复杂度还是logN, 就是以2为底的N的对数。因为以3和以5的N的对数可以转换为以2为底的N的对数。","like_count":0},{"had_liked":false,"id":61108,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1547621375,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547621375","product_id":100017301,"comment_content":"跳表先了解，后续再结合源码学习。","like_count":0},{"had_liked":false,"id":58683,"user_name":"杨槐","can_delete":false,"product_type":"c1","uid":1178889,"ip_address":"","ucode":"A07D7FA4569F5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/09/13f8a4ab.jpg","comment_is_top":false,"comment_ctime":1547174737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547174737","product_id":100017301,"comment_content":"老师启动github上的skiplist进行添加1000个数，可是打印消耗时间比java自带的LinkedList添加1000个数还要多，而且查找速度也比LinkedList慢，是不是数据量较小时不推荐跳表","like_count":0},{"had_liked":false,"id":57546,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1546831348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546831348","product_id":100017301,"comment_content":"看完跳表和散列表，再去研究leveldb，真的是轻松得很～","like_count":0},{"had_liked":false,"id":56904,"user_name":"宋蛋","can_delete":false,"product_type":"c1","uid":1206055,"ip_address":"","ucode":"87CEDC7BB66ABC","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/27/202fde3b.jpg","comment_is_top":false,"comment_ctime":1546575399,"is_pvip":false,"replies":[{"id":"21840","content":"也不一定呢，索引里不包含它也是可以的<br>","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547708122,"ip_address":"","comment_id":56904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546575399","product_id":100017301,"comment_content":"老师你好，有一个疑问，跳表的第一个元素是不是要建立所有层的索引，这样才能方便查找","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435305,"discussion_content":"也不一定呢，索引里不包含它也是可以的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547708122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55182,"user_name":"陈光","can_delete":false,"product_type":"c1","uid":1007685,"ip_address":"","ucode":"48FD5FBD0F6319","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/45/c6302327.jpg","comment_is_top":false,"comment_ctime":1546060961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546060961","product_id":100017301,"comment_content":"跳表通过构建索引加快查询速度和数据库里通过对特定列添加索引提高查询速度是一个原理吗？","like_count":0},{"had_liked":false,"id":54901,"user_name":"朱喆","can_delete":false,"product_type":"c1","uid":1213634,"ip_address":"","ucode":"03AFB3DEFEFA0F","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/c2/f765dfde.jpg","comment_is_top":false,"comment_ctime":1545979582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545979582","product_id":100017301,"comment_content":"红黑树支持通过中序遍历的方式来拿范围内的节点的，也是O(n)的复杂度吧，不明白怎么就不如跳表了","like_count":0},{"had_liked":false,"id":52612,"user_name":"Xg huang","can_delete":false,"product_type":"c1","uid":1016995,"ip_address":"","ucode":"9680FA95DE3553","user_header":"","comment_is_top":false,"comment_ctime":1545452735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545452735","product_id":100017301,"comment_content":"老师, 你这个代码实现, 不太像链表, 是不是有什么地方我没理解到?<br><br>public class Node {<br>    private int data = -1;<br>    private Node forwards[] = new Node[MAX_LEVEL];<br>......<br>}","like_count":0},{"had_liked":false,"id":52354,"user_name":"邵峰","can_delete":false,"product_type":"c1","uid":1240036,"ip_address":"","ucode":"1017E31C6255F7","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/e4/dabff318.jpg","comment_is_top":false,"comment_ctime":1545366515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545366515","product_id":100017301,"comment_content":"算法和数据结构真的需要悟啊悟透了多敲才能融汇","like_count":0},{"had_liked":false,"id":51483,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1545188325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545188325","product_id":100017301,"comment_content":"理解java实现的跳表的最好方式就是在机器上把代码跑起来，debug分析一下执行过程就能明白了，跳表=头结点+数组+链表<br>","like_count":0},{"had_liked":false,"id":50938,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1545091367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545091367","product_id":100017301,"comment_content":"几个节点就是Olg(n) 还有数据函数实现索引稳定性这个问题，我想了想，假如是2个节点一个索引、那么每个n个节点一般有n个索引。每个节点的索引数 随机函数概率等比数列？概率总数为1，以5层索引为例，一层索引上有索引的概率就是1&#47;2，二层上有索引的概率为1&#47;4。。，索引随机函数也应该满足这点，","like_count":0},{"had_liked":false,"id":50690,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1545030122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545030122","product_id":100017301,"comment_content":"思考题：<br>假设只有跳表实现使用两个链表来完成，那么L1代表原始链表，L2代表索引链表。原始链表L1有n个元素，那么如何合理分配L2确保查找路线不离谱？也就是只有均匀分布，也就是L1&#47;L2，那么两条链表最差的时间复杂度为O(L2+L1&#47;L2)，代入L1有n个元素，则时间复杂度为2√n，此时每个间隔2个元素，依次类推三条则为3³√n，间隔三个元素。所以不管分布的几个元素，时间复杂度依然为O(logn)。","like_count":0},{"had_liked":false,"id":50199,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1544903532,"is_pvip":false,"replies":[{"id":"18575","content":"节点都删了 索引节点不得也删掉 不然索引节点down指针指向谁呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545186285,"ip_address":"","comment_id":50199,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544903532","product_id":100017301,"comment_content":"如果这个结点在索引中也有出现，我们除了要删除原始链表中的结点，还要删除索引中的结点。    <br><br>这块不是很理解 ，为何还要删除索引的结点？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432912,"discussion_content":"节点都删了 索引节点不得也删掉 不然索引节点down指针指向谁呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545186285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50086,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1544862807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544862807","product_id":100017301,"comment_content":"跳表<br><br>我们知道链表是没办法高效实现二分查找的，但对链表加以改造就可以支持类似的二分查找了，这种改造之后的数据结构就叫跳表。<br><br>跳表是一种在链表的基础上再添加多级索引的数据结构，数据越多索引层数就越高（类似楼房）,跳表查找数据的时间复杂度为O(logn)，空间复杂度为O(n)，虽然看上去空间复杂度较高，但由于只是索引，他们指向的对象其实才是真正占用内存的，相比较而言，跳表的空间复杂度就可以忽略了，但换来的高效的时间效率是十分显著的。、<br><br>当插入数据过多时，还要考虑数据结构的动态更新问题，要用到随机函数生成的值K来表示要插入的值同时插入到k级索引中。随机函数需要自己来根据兴趣了解。<br><br>Redis就主要用到了跳表。虽然插入、删除、查找和迭代输出有序序列这几个操作，红黑树也能完成且时间复杂度一样，但是按照区间来查找数据这个操作跳表效率更高。","like_count":0},{"had_liked":false,"id":49104,"user_name":"Geek_ff0975","can_delete":false,"product_type":"c1","uid":1256909,"ip_address":"","ucode":"2CBA9490C98931","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH0yFsw11puWoI04QibBDaDLTfvvpsXpCp3MbLwibcRmmPZrrCxNEUhvTyeIicKzzKaKGiaDAIdhLibmw/132","comment_is_top":false,"comment_ctime":1544604899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544604899","product_id":100017301,"comment_content":"#define ZSKIPLIST_MAXLEVEL 64 &#47;* Should be enough for 2^64 elements *&#47;<br>#define ZSKIPLIST_P 0.25      &#47;* Skiplist P = 1&#47;4 *&#47;<br><br>int zslRandomLevel(void) {<br>    int level = 1;<br>    while ((random()&amp;0xFFFF) &lt; (ZSKIPLIST_P * 0xFFFF))<br>        level += 1;<br>    return (level&lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;<br>}","like_count":0},{"had_liked":false,"id":48667,"user_name":"HeGuang","can_delete":false,"product_type":"c1","uid":1256762,"ip_address":"","ucode":"2B938BCB4B82FA","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/3a/ffa02c6d.jpg","comment_is_top":false,"comment_ctime":1544511417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544511417","product_id":100017301,"comment_content":"http:&#47;&#47;www.cnblogs.com&#47;xuqiang&#47;archive&#47;2011&#47;05&#47;22&#47;2053516.html","like_count":0},{"had_liked":false,"id":47827,"user_name":"Xie Yifeng","can_delete":false,"product_type":"c1","uid":1066338,"ip_address":"","ucode":"58E6FFA66818E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/62/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1544231530,"is_pvip":false,"replies":[{"id":"17183","content":"等讲了树之后吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407695,"ip_address":"","comment_id":47827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544231530","product_id":100017301,"comment_content":"您好，能比较下跳表和b+数的区别么","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431901,"discussion_content":"等讲了树之后吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46873,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1543994964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543994964","product_id":100017301,"comment_content":"老师请教下：<br>一个跳表是如何从没有数据，到有数据再到有大量数据，而随着这个过程的进行势必引起索引层数的增加，这个过程是怎么进行的呢（超过某个阈值直接递归修改上层索引？还是怎样？）？，老师能否提供一个详细过程或提供一个详细资料（看完就可以写代码那种，&lt;(*￣▽￣*)&#47;）。","like_count":0},{"had_liked":false,"id":46294,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1543894364,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543894364","product_id":100017301,"comment_content":"说下课后问题答案吧<br>三个节点的时间复杂度 是  4*logn(log3n 直接写程logn了 ) 5个节点的时间复杂度是 5*logn   <br>不知道是否正确","like_count":0},{"had_liked":false,"id":45738,"user_name":"lttzzlll","can_delete":false,"product_type":"c1","uid":1105387,"ip_address":"","ucode":"FA160F7C02ABAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","comment_is_top":false,"comment_ctime":1543764336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543764336","product_id":100017301,"comment_content":"S(n) = (n - 1) &#47; k - 1 <br><br>k = 每k个节点提取一个节点作为上级节点。","like_count":0},{"had_liked":false,"id":44997,"user_name":"ngpotato","can_delete":false,"product_type":"c1","uid":1273541,"ip_address":"","ucode":"F83134479C58D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oDpQnr2zUicVxhF9gFaReuztjh4wMZHccMKoKvwibpSjs4nK4TMFib0ULSLJPR5f18fFpgQeichMathtUQiabNOE24Q/132","comment_is_top":false,"comment_ctime":1543538669,"is_pvip":false,"replies":[{"id":"16023","content":"嗯嗯 我跟编辑反馈下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543542328,"ip_address":"","comment_id":44997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543538669","product_id":100017301,"comment_content":"老师，能在开篇加上你的github吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430891,"discussion_content":"嗯嗯 我跟编辑反馈下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543542328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44994,"user_name":"青铜5 周群力","can_delete":false,"product_type":"c1","uid":1111965,"ip_address":"","ucode":"EA80B442EC8A68","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/9d/c7295d17.jpg","comment_is_top":false,"comment_ctime":1543538275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543538275","product_id":100017301,"comment_content":"关于范围查找，红黑树用in-order dfs，遇到边界停止遍历，时间复杂度也是O(logN+k)，k是在范围内的个数。时间复杂度应该和跳表一样","like_count":0},{"had_liked":false,"id":44887,"user_name":"liu","can_delete":false,"product_type":"c1","uid":1129567,"ip_address":"","ucode":"DA9F9FBD96A9A0","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/5f/cc30c10c.jpg","comment_is_top":false,"comment_ctime":1543503312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543503312","product_id":100017301,"comment_content":"课后问答<br>三个节点作为一个上级索引时间复杂度：O(4*log3(n))；<br>五个节点作为一个上级索引时间复杂度：O(6*log5(n))；","like_count":0},{"had_liked":false,"id":43472,"user_name":"origin","can_delete":false,"product_type":"c1","uid":1086653,"ip_address":"","ucode":"BEE45728683452","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/bd/3b61c1c1.jpg","comment_is_top":false,"comment_ctime":1543230682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543230682","product_id":100017301,"comment_content":"通过链表实现二分查找，以空间换时间","like_count":0},{"had_liked":false,"id":43299,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1543208833,"is_pvip":false,"replies":[{"id":"15595","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543285163,"ip_address":"","comment_id":43299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543208833","product_id":100017301,"comment_content":"感觉跳表中有很多重复的引用，在分析代码的时候有点索引和值有分不清","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430352,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543285163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42890,"user_name":"孑","can_delete":false,"product_type":"c1","uid":1321396,"ip_address":"","ucode":"C83AC0ECFE0B5C","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/b4/f95e8e9e.jpg","comment_is_top":false,"comment_ctime":1543072721,"is_pvip":false,"replies":[{"id":"15611","content":"嗯嗯，因为文章字数有限，展开讲会讲很多，所以有些细节就略过了。这里删除的操作是这样子的：跳表的查询你应该知道怎么回事了吧。在查询要删除节点y的时候，我们把每一层索引的前驱节点x（y的前驱节点）都记录下来，然后再从各层索引中，通过前驱节点x-&gt;next = x-&gt;next-&gt;next；把这个要删除的结点删除。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543286637,"ip_address":"","comment_id":42890,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543072721","product_id":100017301,"comment_content":"删除一个元素时，若该元素也出现在索引，也需删除，这个过程有点匆忙，到底还怎么怎么做","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430231,"discussion_content":"嗯嗯，因为文章字数有限，展开讲会讲很多，所以有些细节就略过了。这里删除的操作是这样子的：跳表的查询你应该知道怎么回事了吧。在查询要删除节点y的时候，我们把每一层索引的前驱节点x（y的前驱节点）都记录下来，然后再从各层索引中，通过前驱节点x-&amp;gt;next = x-&amp;gt;next-&amp;gt;next；把这个要删除的结点删除。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543286637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42491,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1542961746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542961746","product_id":100017301,"comment_content":"是不是可以直接给每个节点都加一个索引，使用二分查找根据索引查找值，实现起来更加简单","like_count":0},{"had_liked":false,"id":40181,"user_name":"后台哥中哥","can_delete":false,"product_type":"c1","uid":1299217,"ip_address":"","ucode":"41CC2397B45D05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIh9yUhKHyRXTrAtxQs6WGeicLTohOgoDIeHZzvrIQsPChAEwKTqFEWeDHjBYt4EkoWogSic8orCKmw/132","comment_is_top":false,"comment_ctime":1542541664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542541664","product_id":100017301,"comment_content":"代码注释有点少","like_count":0},{"had_liked":false,"id":40078,"user_name":"枫林FL","can_delete":false,"product_type":"c1","uid":1153472,"ip_address":"","ucode":"048AA693CCB135","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/c0/532e8591.jpg","comment_is_top":false,"comment_ctime":1542465484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542465484","product_id":100017301,"comment_content":"赞呀。想在redis上自己建立索引","like_count":0},{"had_liked":false,"id":39835,"user_name":"若星","can_delete":false,"product_type":"c1","uid":1247442,"ip_address":"","ucode":"D92DC0D777724E","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/d2/83bdc5dd.jpg","comment_is_top":false,"comment_ctime":1542364157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542364157","product_id":100017301,"comment_content":"代码里面注释有点少。","like_count":0},{"had_liked":false,"id":38227,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1541993592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541993592","product_id":100017301,"comment_content":"跳表：一种动态数据结构，支持快速插入、删除、查找。其原理是实现了二分查找的链表。<br>原理：空间换时间的设计思路，时间复杂度：O(logn)；空间复杂度：O(n)。在原有的单链表（如果是双链表实现更好）上增加索引层级，第一级所以可以是 n &#47; 2 个（也可以n &#47; 3等根据自己的需求），这样就会建立 logn 层，每层的索引都是指向下一层对应的索引，每层查找最多只会遍历3个节点。当插入、删除多了之后得动态更新索引，一般的做法是用随机函数生成小于层级的数k，然后在1-k级插入对应的索引。","like_count":0},{"had_liked":false,"id":37840,"user_name":"漫漫越","can_delete":false,"product_type":"c1","uid":1249222,"ip_address":"","ucode":"F9F1E3AC4CF692","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/c6/cf344f74.jpg","comment_is_top":false,"comment_ctime":1541745402,"is_pvip":false,"replies":[{"id":"13723","content":"c#不会啊 还是转java吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987909,"ip_address":"","comment_id":37840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541745402","product_id":100017301,"comment_content":"老师，能写个c#版本的吗😉😉","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428499,"discussion_content":"c#不会啊 还是转java吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37758,"user_name":"樱桃子77","can_delete":false,"product_type":"c1","uid":1260146,"ip_address":"","ucode":"676894101A6652","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicwphCoQ0S1DaibWNarUJq3DrGOeADY02AreVbKCLkm0PWJmZR0f1rMrrXDRzOwLCmIQbqeibQ4uHQ/132","comment_is_top":false,"comment_ctime":1541724859,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1541724859","product_id":100017301,"comment_content":"这篇受教了 多谢","like_count":0},{"had_liked":false,"id":37182,"user_name":"Tattoo","can_delete":false,"product_type":"c1","uid":1036503,"ip_address":"","ucode":"CE926AC8582C96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/d7/a09ef784.jpg","comment_is_top":false,"comment_ctime":1541476271,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1541476271","product_id":100017301,"comment_content":"老师你好，我想问一下在c-cpp中代码文件＂skiplist_tr.hpp  skiplist_tr_test.cc＂是干什么的？？","like_count":0},{"had_liked":false,"id":36805,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1541342170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541342170","product_id":100017301,"comment_content":"按前面的分析思路，每三个结点抽取一个作为上级索引结点，跳表的高度为 log3n，这里的3为底数。在跳表中查询某个数据的时候，每一层需要遍历的结点 m=4，时间复杂度仍为 O(logn) 。<br>每五个结点提取一个作为上级索引结点也同理。","like_count":0},{"had_liked":false,"id":36734,"user_name":"我能走多远","can_delete":false,"product_type":"c1","uid":1240465,"ip_address":"","ucode":"07DF5D5DADFA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/91/1d332031.jpg","comment_is_top":false,"comment_ctime":1541297347,"is_pvip":false,"replies":[{"id":"13095","content":"没错的呢 并不是每一层都插入呀 本意就是想随机插入某几层 你说复杂度退化是有可能的 但从概率上讲出现的概率很低","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541383165,"ip_address":"","comment_id":36734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541297347","product_id":100017301,"comment_content":"老师写的代码中的插入函数有点问题吧？<br>level 应该等于当前最大的level层数吧，不应该使用随机获取的。加入level为1时，时间复杂度不就退化了吗。<br>for (int i = level - 1; i &gt;= 0; --i) {<br>while (p.forwards[i] != null &amp;&amp; p.forwards[i].data &lt; value) {<br>p = p.forwards[i];<br>}<br>update[i] = p;<br>}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427988,"discussion_content":"没错的呢 并不是每一层都插入呀 本意就是想随机插入某几层 你说复杂度退化是有可能的 但从概率上讲出现的概率很低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541383165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36597,"user_name":"Random.nextName()","can_delete":false,"product_type":"c1","uid":1244960,"ip_address":"","ucode":"8D18D91B8D3BC7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0lHhbutibIdWRv0pm2EPtvxqcVz0PblEic7GDxHK8JUSkyuWQl1B1NVQTzEowQIxfOf3saRBOTtog/132","comment_is_top":false,"comment_ctime":1541166471,"is_pvip":false,"replies":[{"id":"13115","content":"插入有点慢 可以分析一下耗时在哪里","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541384063,"ip_address":"","comment_id":36597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541166471","product_id":100017301,"comment_content":"我模拟老师的Java版本写了JavaScript的版本，连续插入1到10000，居然花了800ms，这是不是有点慢了？不过查找还是挺快的，稳定在0.1ms到0.2ms。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427929,"discussion_content":"插入有点慢 可以分析一下耗时在哪里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541384063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36360,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1541056056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541056056","product_id":100017301,"comment_content":"\t\t每p个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是 n&#47;p，第二级索引的结点个数大约就是 n&#47;(p^2), 第三级索引的结点个数大约就是 n&#47;(p^3)，依次类推，也就是说，第k 级索引的结点个数是第 k-1 级索引的结点个数的 1&#47;m,那第 k级索引结点的个数就是 n&#47;(p^k)。<br>\t\t<br>\t\t<br>\t\t假设索引有 h 级，最高级的索引有 p个结点。通过上面的公式，我们可以得到 n&#47;(p^h)=p，从而求得 h=logpn-1.如果包含原始链表这一层，整个跳表的高度就是 logpn.我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logpn).<br>                其中m=P+1.因为每一个层级，二结点之间在下一个层级之间都有P个元素，从而要访问P+1个元素。画个图会有助于理解。<br><br>                 所以越多的结点数目提取索引，需要的访问时间越大，额外空间越小。<br>                        越少的结点数目提取索引，需要的访问时间越小，额外空间越大。","like_count":0},{"had_liked":false,"id":36347,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1541047168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541047168","product_id":100017301,"comment_content":"最后题目：还是O（logn），这也涉及到我们不写底数的原因，因为不管是2，3，5，最后都相当于使用换底公式乘以一个常数。","like_count":0},{"had_liked":false,"id":36159,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1540957628,"is_pvip":false,"replies":[{"id":"12894","content":"不是的 后面会讲到b树","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541036943,"ip_address":"","comment_id":36159,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540957628","product_id":100017301,"comment_content":"您好老师，mysql索性好像也有一级，二级索性……貌似是用B树，感觉感觉和这个跳表很像啊，是不是同一个东西？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427765,"discussion_content":"不是的 后面会讲到b树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541036943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36140,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1540952451,"is_pvip":false,"replies":[{"id":"12897","content":"粗略的算 别考虑取整问题了 不用那么准确的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541037260,"ip_address":"","comment_id":36140,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540952451","product_id":100017301,"comment_content":"整数除法取整意思是：5 &#47; 2 = 2 不是 2.5。<br><br>n&#47;2 + n&#47;4 + ... + 2 = n(1&#47;2 + 1&#47;4 + ... + 2&#47;n) = n * (1 - (1&#47;2)^n)。如果 n 很大 (1&#47;2)^n 约等于 0，等比数列和是 n。文中的 n - 2 是怎么算的呢？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427758,"discussion_content":"粗略的算 别考虑取整问题了 不用那么准确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541037260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36096,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1540943935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540943935","product_id":100017301,"comment_content":"我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)。<br><br>为什么感觉是O(m的logN次幂)呢","like_count":0},{"had_liked":false,"id":35893,"user_name":"鲍勃","can_delete":false,"product_type":"c1","uid":1142312,"ip_address":"","ucode":"9B5E4A5B1A54E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/28/1e307312.jpg","comment_is_top":false,"comment_ctime":1540856685,"is_pvip":false,"replies":[{"id":"12829","content":"嗯嗯 有点像","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950615,"ip_address":"","comment_id":35893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540856685","product_id":100017301,"comment_content":"老师你好，跳表和虚拟地址转物理地址的多级页表有点类似啊，不过那个是跳数组吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427701,"discussion_content":"嗯嗯 有点像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35841,"user_name":"Conner","can_delete":false,"product_type":"c1","uid":1238811,"ip_address":"","ucode":"A00A9555442CB7","user_header":"http://thirdwx.qlogo.cn/mmopen/h0KAdRFKjCOhmWMYL56PUEYiabvpkopiciaOHjF7bFSaMRV2uKhXrNoXNpJ4HiaG3pwcUUdNK54jUgT2KVbyCCwba4wIfwibib0lyd/132","comment_is_top":false,"comment_ctime":1540820317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540820317","product_id":100017301,"comment_content":"有动图展示插入，删除数据的过程，是不是会更有助于理解？","like_count":0},{"had_liked":false,"id":35840,"user_name":"结冰的海","can_delete":false,"product_type":"c1","uid":1247310,"ip_address":"","ucode":"B6ED66252803ED","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/4e/79c3d903.jpg","comment_is_top":false,"comment_ctime":1540819982,"is_pvip":false,"replies":[{"id":"12833","content":"用途有点类似 都是动态数据结构","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950992,"ip_address":"","comment_id":35840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540819982","product_id":100017301,"comment_content":"老师，看了跳表的实现思想，我想到了MySQL里的B+树索引，进行数据表数据的增删改，同样需要更新索引，请问老师是一回事吗？？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427684,"discussion_content":"用途有点类似 都是动态数据结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35832,"user_name":"鹏程万里","can_delete":false,"product_type":"c1","uid":1114675,"ip_address":"","ucode":"5E23BBEC9E8209","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/33/57678ea3.jpg","comment_is_top":false,"comment_ctime":1540818412,"is_pvip":false,"replies":[{"id":"12834","content":"同学 你分析的太细了 你知道这回事就行 主要还是说明跳表对查询效率有提升","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951078,"ip_address":"","comment_id":35832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540818412","product_id":100017301,"comment_content":"请问文章开头的部分查找16，介于13和17之间。如果只有一级索引的时候为什么需要七步呢，当指针处在13的位置时，其指针域指向17，所以判断16在当前索引和下一个索引之间吗？而且down操作也算一步是吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427682,"discussion_content":"同学 你分析的太细了 你知道这回事就行 主要还是说明跳表对查询效率有提升","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35823,"user_name":"冰冰的冻结","can_delete":false,"product_type":"c1","uid":1177227,"ip_address":"","ucode":"5F742CED111E6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/8b/c0bb693d.jpg","comment_is_top":false,"comment_ctime":1540815930,"is_pvip":false,"replies":[{"id":"12837","content":"😄 我觉得可以","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951176,"ip_address":"","comment_id":35823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540815930","product_id":100017301,"comment_content":"java 1.8 hashmap 用了 数组 链表和红黑树 实现 ，要是把红黑树换成调表 会不会 更好呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427677,"discussion_content":"😄 我觉得可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35807,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1540809456,"is_pvip":true,"replies":[{"id":"12839","content":"level-1就是最大层。我是从0开始编号的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951269,"ip_address":"","comment_id":35807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540809456","product_id":100017301,"comment_content":"老师，看了你在github上的代码，关于插入方法，我觉得不应该从level-1层开始找，而是从最大层开始。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427671,"discussion_content":"level-1就是最大层。我是从0开始编号的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35803,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1540808569,"is_pvip":false,"replies":[{"id":"12840","content":"肯定是找最合适的 而不是最优的。要根据数据规模 已经对空间 时间的要求 来权衡选择","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951350,"ip_address":"","comment_id":35803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540808569","product_id":100017301,"comment_content":"王老师讲的很好，不过我有一个疑问，我们工作和学习中，所有的编程问题，都可以在这些成熟的算法中找到对应的一个最优算法，然后根据算法来编写程序吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427670,"discussion_content":"肯定是找最合适的 而不是最优的。要根据数据规模 已经对空间 时间的要求 来权衡选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35800,"user_name":"飞羽","can_delete":false,"product_type":"c1","uid":1241451,"ip_address":"","ucode":"6779BCE78AA636","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/6b/c95dab3c.jpg","comment_is_top":false,"comment_ctime":1540806359,"is_pvip":false,"replies":[{"id":"12732","content":"不好意思 实在是不熟悉js","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540811590,"ip_address":"","comment_id":35800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540806359","product_id":100017301,"comment_content":"看了一下 课程Github中js的查找貌似还没有实现，我在习题集里实现了一下，老师看看没问题可以放到Github中哈<br><br>或者我提一个pr？<br><br>https:&#47;&#47;github.com&#47;taifu5522&#47;ProblemSet","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427669,"discussion_content":"不好意思 实在是不熟悉js","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35770,"user_name":"杨伟","can_delete":false,"product_type":"c1","uid":1239937,"ip_address":"","ucode":"D5B521A0688E02","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/81/43f4b52c.jpg","comment_is_top":false,"comment_ctime":1540786700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540786700","product_id":100017301,"comment_content":"终于看懂了","like_count":0},{"had_liked":false,"id":35749,"user_name":"ﺭ并向你扔了一条狗ﺭ钱禹光","can_delete":false,"product_type":"c1","uid":1213397,"ip_address":"","ucode":"03CD0967D349EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/d5/cddefb71.jpg","comment_is_top":false,"comment_ctime":1540781253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540781253","product_id":100017301,"comment_content":"红黑树查询范围比较麻烦，但是为什么redis不用b+树呢","like_count":0},{"had_liked":false,"id":35735,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1540778616,"is_pvip":false,"replies":[{"id":"12740","content":"需要的 你再数数","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540811964,"ip_address":"","comment_id":35735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540778616","product_id":100017301,"comment_content":"re: 跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。现在我们再来查找 16，只需要遍历 6 个结点了，需要遍历的结点数量又减少了。<br><br>问题：<br>第二级索引遍历 1，7，13<br>第一级索引遍历 17<br>原始数据遍历 16<br>只需要想找 5 个结点，而不是 6 个？<br><br>谢谢老师<br>2018-10-29<br> 作者回复<br>也会遍历第一级索引中的13<br><br>老师，加上原始链表的13，就是7个节点，请问原始链表中的13不需要遍历吗？为什么了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427650,"discussion_content":"需要的 你再数数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540811964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35731,"user_name":"Aruen","can_delete":false,"product_type":"c1","uid":1235654,"ip_address":"","ucode":"BCEECC5684EE36","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/c6/e1b2797b.jpg","comment_is_top":false,"comment_ctime":1540777629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540777629","product_id":100017301,"comment_content":"时间复杂度还是O(logn)。","like_count":0},{"had_liked":false,"id":35722,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1540776306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540776306","product_id":100017301,"comment_content":"随机函数这块还是有点模糊，期待留言区的大神分析↓","like_count":0},{"had_liked":false,"id":35719,"user_name":"yaya","can_delete":false,"product_type":"c1","uid":1233856,"ip_address":"","ucode":"8C7FAC8F828BA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/c0/d38daa2d.jpg","comment_is_top":false,"comment_ctime":1540775453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540775453","product_id":100017301,"comment_content":"依然是log(n).只是底数不同。","like_count":0},{"had_liked":false,"id":35706,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1540772834,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540772834","product_id":100017301,"comment_content":"思考题，共log10(n)层，每层最多找10个节点(因为上一层索引确定了2个节点之间，而在下层对应的也就是10个节点)，所以10log10(n)的时间复杂度。","like_count":0},{"had_liked":false,"id":35702,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1540770640,"is_pvip":false,"replies":[{"id":"12695","content":"不需要的 我们找的是62 找到就可以结束了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540777332,"ip_address":"","comment_id":35702,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540770640","product_id":100017301,"comment_content":"老师，第 4 张图，64 结点的例子，第二级索引到第五级索纳塔都遍历了末结点，第一级索引是否也需要遍历末结点（63）？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427636,"discussion_content":"不需要的 我们找的是62 找到就可以结束了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540777332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35701,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1540770207,"is_pvip":false,"replies":[{"id":"12696","content":"也会遍历第一级索引中的13","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540777407,"ip_address":"","comment_id":35701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540770207","product_id":100017301,"comment_content":"re: 跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。现在我们再来查找 16，只需要遍历 6 个结点了，需要遍历的结点数量又减少了。<br><br>问题：<br>第二级索引遍历 1，7，13<br>第一级索引遍历 17<br>原始数据遍历 16<br>只需要想找 5 个结点，而不是 6 个？<br><br>谢谢老师","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427635,"discussion_content":"也会遍历第一级索引中的13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540777407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}