{"id":291638,"title":"07｜完全背包：深入理解背包问题","content":"<p>你好，我是卢誉声。</p><p>在上节课中，我们用动态规划解法，成功解决了动态规划领域中的 Hello World 问题。这个问题虽然比较初级，但却很有代表性，它比较全面地展示了动归解题的套路。</p><p>但光解决一个0-1背包问题显然不够过瘾。如果你觉得应用动态规划的解题套路还不太熟练，没关系。现在我们就趁热打铁，继续刨根问底，讨论背包问题。</p><p>首当其冲的就是完全背包问题。它仍然是动态规划领域的经典问题，但是比0-1背包问题要复杂一些。不过嘛，我们之前总结的解题套路还是比较具有普适性的，因此我们仍然可以将其套用在完全背包问题上。</p><p>在开始今天的课程前，请你思考这样一个问题：<strong>既然都是背包问题，那么完全背包跟0-1背包问题会如何影响状态转移方程呢？</strong></p><p>你不妨带着这个问题，有针对性地学习今天的内容。</p><h2>完全背包问题</h2><p>我们先来看看完全背包问题的描述。</p><p>问题：给你一个可放总重量为 $W$ 的背包和 $N$ 个物品，对每个物品，有重量 $w$ 和价值 $v$ 两个属性，那么第 $i$ 个物品的重量为 $w[i]$，价值为 $v[i]$。现在让你用这个背包装物品，每种物品都可以选择任意多个，问这个背包最多能装的价值是多少？</p><!-- [[[read_end]]] --><p>示例：</p><pre><code>示例：\n\n输入：W = 5, N = 3\n     w = [3, 2, 1], v = [5, 2, 3]\n输出：15\n解释：当 i = 2 时，选取 5 次，总价值为 5 * 3 = 15。\n</code></pre><p>问题描述还是这么简单，如果你回过头，去看上一课的0-1背包的问题描述，你会发现，完全背包问题只在原来的基础上多加了一句话，那就是：“每种物品都可以选择任意多个”。除此之外，完全相同。</p><p>可不要小看这一句话，它的出现让我们的问题复杂度上了一个台阶。</p><h3>算法问题分析</h3><p>不同于0-1背包问题（每件物品只能拿一次），在完全背包问题中，每件物品可以拿任意多件，只要背包装得下就行。</p><p>如果从每件物品的角度来看，与之相关的决策已经不再是选拿（1）或者不拿（0）了；而是拿 0 件、拿 1 件、拿 2 件……直到拿到 ($W / w[i]$) 件物品为止。</p><p>我曾在上一课中对0-1背包问题做了较为全面的分析，最后得出的结论就是，它是一个动态规划问题。那么为了起到对照的作用，我在这里再次给出分析步骤，不过比之前的稍微简化一些。</p><p>首先，题设中出现了“最多能装的价值是多少”这样的论断。既然有“最”字，那么我们需要先考虑贪心算法，这里我直接给出一个反例：按照示例中的提示，虽然 $i = 1$ 的物品价值最高，但最后得到的解不是真正的答案。</p><p>因此，为了获得整体最优解，我们需要考虑穷举。为了高效地进行穷举操作，我们需要考虑使用动态规划来解。仿照上一课的做法，我们对该问题做一个分析，看看它是否满足求解动态规划的特征。</p><ol>\n<li>重叠子问题：在穷举的过程中肯定存在重复计算的问题。这是因为各种排列组合间肯定存在重叠子问题的情况；</li>\n<li>无后效性：选择了一个物品后，背包还能容纳的重量与总价值是确定的，后续选择的物品（即便重复选择相同的物品）不会对当前这个选择产生副作用。因此，该问题无后效性；</li>\n<li>最优子结构：在选定了一个物品后，继续做决策时，我们是可以使用之前计算的重量和价值，也就是说后续的计算可以通过前面的状态推导出来。因此，该问题存在最优子结构。</li>\n</ol><p>这个分析算法问题的方法特别有效，希望你能够养成这个基本分析的习惯。这样一来，你不仅能少走弯路，而且能有目的性地解决面试问题。</p><h3>写出状态转移方程</h3><p>既然我们已经确定了这是个动态规划问题，那么就拿出我们的法宝：动态规划解题框架。现在，就让我们沿着解题框架的顺序，来写出状态转移方程。</p><p>首先，我们先来确定动态规划解法当中的最初子问题，即<strong>初始化状态</strong>。这跟0-1背包问题有些类似：由于物品的数量没有限制，因此只有当背包的容量为 0 时要终止执行，但如果压根儿就没有物品可选，那么自然背包的重量也为 0。如果体现在代码上，就是当没有物品时重量为 0；而重量为 0 时显然物品数量也为 0。</p><p>接着，我们来确定动态规划问题中的<strong>状态参数</strong>，这与0-1背包问题几乎一样：</p><ol>\n<li>背包内物品的数量 $N$ 在增加，它是一个变量；</li>\n<li>同时，背包还能装下的重量 $W$ 在减少，它也是一个变量。</li>\n</ol><p>因此，当前背包内的物品数量 $N$ 和背包还能装下的重量 $W$ 就是这个动态规划问题的状态参数。</p><p>然后，我们再来看如何进行<strong>决策</strong>。这里的区别，跟0-1背包问题中的决策差别就比较大了。由于每种物品的数量是无限制的，因此就像前面给出的示例那样，我们可以将同一种物品多次放入背包。</p><p>因此，对于第 $tn$ 种物品，我们有 k 种选择（其中 0 ≤ k * $w[tn]$ ≤ W）：我们可以从 0 开始，拿第 0 件、第 1 件、第 2 件……直到第 ($W / w[tn]$) 件物品为止。然后在这么多子问题下，选择最优的那一种情况。</p><p>所以，我们可以看出，完全背包问题决策的核心在于，针对一种物品，它需要考察拿不同数量的情况下的最优解。这显然与0-1背包问题的决策完全不同，总结来说就是：</p><ol>\n<li>0-1背包问题：针对当前物品，是放入背包，还是不放入背包时的价值最大；</li>\n<li>完全背包问题：针对当前物品，应放入多少件当前物品，价值最大。</li>\n</ol><p>最后，动态规划是需要一个<strong>备忘录</strong>来加速算法的。由于有两个状态参数，因此我们考虑使用二维数组来存储子问题的答案。跟之前一样，为了通用起见，我将其命名为 $DP[tn][rw]$，它的含义是：背包容量还剩 $rw$ 时，放入前 $tn$ 种物品时的最大价值。</p><p>由于这个问题跟0-1背包问题有些相似，因此今天我们做一个新的尝试，那就是在不写出递归代码的情况下，直接根据上面的信息写出状态转移方程。它是这样的：</p><p>$$DP(tn, rw)=\\left\\{\\begin{array}{c}<br>\n0, tn&lt;=0\\\\\\<br>\n0, rw&lt;=0\\\\\\<br>\nDP(tn-1,rw), rw&lt;w[tn]\\\\\\<br>\nmax\\{ DP(tn-1,rw-k*w[tn])+k*v[tn] \\},(0\\leqq k \\leqq rw)<br>\n\\end{array}\\right.$$</p><p>我们有了完整的状态转移方程，就可以开始编写代码了。</p><h3>编写代码进行求解</h3><p>现在，所有的先决条件都解决了，因此我直接给出以下代码，你可以参考一下。</p><p>Java 实现：</p><pre><code>int bag(int[] w, int[] v, int N, int W) {\n  // 创建备忘录\n  int[][] dp = new int[N+1][W+1];\n  \n  // 初始化状态\n  for (int i = 0; i &lt; N + 1; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      dp[tn][rw] = dp[tn-1][rw];\n      // 根据rw尝试放入多次物品，从中找出最大值，作为当前子问题的最优解\n      for (int k = 0; k &lt;= rw / w[tn]; k++) {\n        dp[tn][rw] = Math.max(dp[tn][rw], dp[tn-1][rw-k*w[tn]] + k*v[tn]);\n      }\n    }\n  }\n  return dp[N][W];\n}\n\nint solveBag() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  int[] w = {0, 3, 2, 1}; // 物品的重量\n  int[] v = {0, 5, 2, 3}; // 物品的价值\n  \n  return bag(w, v, N, W); // 输出答案\n}\n</code></pre><p>C++ 实现：</p><pre><code>int DP(const std::vector&lt;int&gt;&amp; w, const std::vector&lt;int&gt;&amp; v, int N, int W) {\n  int dp[N+1][W+1]; // 创建备忘录\n  memset(dp, 0, sizeof(dp)); \n  \n  // 初始化状态\n  for (int i = 0; i &lt; N + 1; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      dp[tn][rw] = dp[tn-1][rw];\n      // 根据rw尝试放入多次物品，从中找出最大值，作为当前子问题的最优解\n      for (int k = 0; k &lt;= rw / w[tn]; k++) {\n        dp[tn][rw] = max(dp[tn][rw], dp[tn-1][rw-k*w[tn]] + k*v[tn]);\n      }\n    }\n  }\n  return dp[N][W];\n}\n\nint DPSol() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  std::vector&lt;int&gt; w = {0, 3, 2, 1}; // 物品的重量\n  std::vector&lt;int&gt; v = {0, 5, 2, 3}; // 物品的价值\n  \n  return DP(w, v, N, W); // 输出答案\n}\n</code></pre><h2>时间复杂度优化</h2><p>如果我们认真分析上面的代码，就可以发现代码中使用了三重循环：</p><ol>\n<li>首先是遍历物品；</li>\n<li>然后是遍历剩余容量；</li>\n<li>最后是遍历物品数量。</li>\n</ol><p>那么这个解法的算法时间复杂度是多少呢？如果我们假定物品数量是 k，容量是 v，那么最后的时间复杂度就是 O(kv<sup>2</sup>)。</p><p>我们如果回顾一下0-1背包问题，就会发现0-1背包的时间复杂度是 O(kv)。虽然完全背包问题比0-1背包问题更复杂一些，但是，出现指数级别的复杂度可不是一件好事。我们得比一般人做得更好。那么，我们能够通过某种方式降低完全背包的时间复杂度吗？</p><p>在回答这个问题前，我们来进行一些简单的探讨。</p><h3>为何时间复杂度会增加？</h3><p>现在，按照题设和上面的状态转移方程的定义，我们来思考一下：假如要拿第 $tn $个物品，当前物品重量为 $w[tn]$，我们会考察放入第 0 件、第 1 件、第 2 件…… k 件该物品时的价值，并取最大值。</p><p>因此，要求剩余容量为 $rw$ （即 $rw$ - 0*$w[tn]$ ）时的最优解，就需要遍历求出 $rw$ - 0*$w[tn]$、$rw$ - 1*$w[tn]$、$rw$ - 2*$w[tn]$ … $rw$ - k*$w[tn]$，然后在其中挑出最大的那个，作为当前子问题的解。这导致了算法执行时多了一层循环。</p><p>让我们仔细考虑一下这个求解过程，如果我们求解剩余容量为 $rw$ - 1*$w[tn]$ 时的最优解，就需要遍历求出 $rw$ - 1*$w[tn]$、$rw$ - 2*$w[tn]$ … $rw$ - k*$w[tn]$，因此我们肯定会再次求解 $rw$ - 2*$w[tn]$。所以，在完全背包问题中，依然存在重复计算。</p><p>针对这一问题，我们是否可以避免这个重复计算呢？答案是肯定的。至于方法其实很简单，我们只需要把问题转换成一种新的0-1背包问题就行了。</p><h3>改进状态转移方程</h3><p>回忆一下，在0-1背包问题中，当我们求第 $tn$ 个物品的最优解时，是从“放入该物品”和“不放入该物品”两种情况中作出决策的。也就是说，第 $tn$ 个物品状态下的最优解，是第 $tn - 1$ 个物品的最优解（子问题） ➕ 当前的决策推导出来的。</p><p>0-1背包问题解决方案的关键在于，当剩余容量 $rw$ 确定，处理第 $tn$ 件物品的时候，我们只需要考虑拿或不拿第 $tn$ 件物品，而不需要考虑放入几个第 $tn$ 件物品。</p><p>根据上述思路，在解决完全背包问题时，我们可以把之前的重叠子问题等价地转化成一个新的重叠子问题来解决，以消除上面提到的重复计算（多出来的那个子循环）。另 $rw$ 确定时，在处理第 $tn$ 件物品的时候，也只需要考虑拿或不拿第 $tn$ 件物品。怎么做呢？我们只需要从以下两种情况里作出决策：</p><ol>\n<li>不拿第 $tn$ 个物品，那么价值就是 $DP[tn-1][rw]$（状态 A）；</li>\n<li>拿第 $tn$ 个物品，那么价值就是 $DP[tn][rw-w[tn]] + v[tn]$（状态 B）。</li>\n</ol><p>在剩余容量为 $rw$ 的时候，其最大价值就是 max(状态 A, 状态 B)。也就是说，此时处理第 $tn$ 件物品的最优解，就是从上面两个状态的结果中取最大值。</p><p>因此，每一次我们只需考虑，当前是否要把第 $tn$ 个物品放入背包就行了。至于之前有没有放过第 $tn$ 件物品，以及放了几件进入背包，已经在容量更小的时候计算过了（需要注意的是，动态规划的计算过程是自底向上的）。</p><p>如果你还是觉得有点晕，没关系，我们再换一种说法。在0-1背包问题里，因为一个物品只能放入一次，所以我们是以上一个物品的最优解为基础进行决策推导的。而在完全背包问题里，因为一个物品可以放入 0 到多次，所以我们必须以“当前物品 $tn$ 在容量更小时，计算出的最优解”为基础进行决策推导。</p><p>这样可以隐含一个过程：我们在当前物品 $tn$ 状态下，当容量 $rw$ 更小的时候，就已经选择过 0 到多次当前物品了，而且得到的最优解存储在缓存中，这部分不需要每次都重复求解。</p><p>通过以上分析，我们得到了优化后的状态转移方程：</p><p>$$DP(tn, rw)=\\left\\{\\begin{array}{c}<br>\n0, tn&lt;=0\\\\\\<br>\n0, rw&lt;=0\\\\\\<br>\nDP(tn-1,rw), rw&lt;w[tn]\\\\\\<br>\nmax( DP(tn-1,rw),DP(tn,rw-w[tn])+v[tn] )<br>\n\\end{array}\\right.$$</p><p>方程中，$tn$表示当前物品序号，$rw$表示目前背包剩余容量。$DP(tn,rw)$ 也就是在目前背包剩余$rw$容量的情况下，放入第$tn$个物品的最大价值。$w[tn]$就是第$tn$个物品的重量，$v[tn]$就是第$tn$个物品的价值。</p><h3>改进代码的时间复杂度</h3><p>接着，按照状态转移方程的指导，给出相应的算法代码。你可以参考以下代码，看看跟之前的解法有何不同。</p><p>Java 实现：</p><pre><code>int bag(int[] w, int[] v, int N, int W) {\n  // 创建备忘录\n  int[][] dp = new int[N+1][W+1];\n  \n  // 初始化状态\n  for (int i = 0; i &lt; N + 1; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      dp[tn][rw] = dp[tn-1][rw];\n      // 如果可以放入，则尝试放入第tn件物品\n      if (w[tn] &lt;= rw) {\n        dp[tn][rw] = Math.max(dp[tn][rw], dp[tn][rw-w[tn]] + v[tn]);\n      }\n    }\n  }\n  return dp[N][W];\n}\n\nint solveBag() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  int[] w = {0, 3, 2, 1}; // 物品的重量\n  int[] v = {0, 5, 2, 3}; // 物品的价值\n  \n  return bag(w, v, N, W); // 输出答案\n}\n</code></pre><p>C++ 实现：</p><pre><code>int DP(const std::vector&lt;int&gt;&amp; w, const std::vector&lt;int&gt;&amp; v, int N, int W) {\n  int dp[N+1][W+1]; // 创建备忘录\n  memset(dp, 0, sizeof(dp));\n  \n  // 初始化状态\n  for (int i = 0; i &lt; N + 1; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      dp[tn][rw] = dp[tn-1][rw];\n      // 如果可以放入，则尝试放入第tn件物品\n      if (w[tn] &lt;= rw) {\n        dp[tn][rw] = max(dp[tn][rw], dp[tn][rw-w[tn]] + v[tn]);\n      }\n    }\n  }\n  return dp[N][W];\n}\n\nint DPSol() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  std::vector&lt;int&gt; w = {0, 3, 2, 1}; // 物品的重量\n  std::vector&lt;int&gt; v = {0, 5, 2, 3}; // 物品的价值\n  \n  return DP(w, v, N, W); // 输出答案\n}\n</code></pre><p>我在下面的表格中，用箭头画出了容量为 5 时的求解路径。你可以参照这个求解路径来加深对代码的理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/3e/2535d01f5c3c3ac1952e72378de5c43e.png?wh=829*220\" alt=\"\"></p><p>不知道你发现了没有，在改进后的代码中没有 k 参与计算了，那么这个由 0 到 k 的循环过程去哪了呢？其实，它隐含在了新的重叠子问题的计算过程中，这一过程可以用下图描述：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/24/8ac92debaa452d83656454e9d51e9a24.png?wh=1920*767\" alt=\"\"></p><p>从图中我们可以看出，虚线框就是我们所说的会包含重叠子问题的部分内容（并非意味着虚线框里的内容是重叠子问题）。在计算$DP(3, 5)$时 $k = 5$，因此循环从 6 个值中求解最优解，这6个值就是$DP(2,5-0*1)+0*3$到$DP(2,5-5*1)+5*3$，也就是$DP(2,5 - k*1)+k*3$，此时背包剩余容量$rw$为5，第2件物品的重量为1，价值为3，所以$k$可以取0到5。我们只需要求出中的最大值即可。</p><p>但是我们可以看到其中的前五步所依赖的子问题，在 $DP(3, 4)$ 这个问题中也会被计算到，此时 $k = 4$，只不过在$k=5$的时候需要在$k=4$的求解基础上加上1个物品的价值。因此，$DP(3, 4)$ 和 $DP(3, 5)$ 之间只相差了这一步循环和1个物品的价值，但我们的确没必要把$DP(3,4)$中求解过的子问题在$DP(3,5)$中重复求解一遍，而是通过这种换算关系直接复用$DP(3,4)$的结果即可。</p><p>然后我们再看 $DP(3, 5)$ 和 $DP(3, 3)$ 两个子问题，前四步依赖的子问题是完全相同的（都相差2个物品的价值），因此这两个子问题之间（状态）只相差了两次循环步骤，然后再加上2个物品的价值。以此类推，原本方程中的 $k$ 次循环，其实是在其它子问题中被重复计算了。</p><h2>空间复杂度优化</h2><p>我们刚刚讲解了如何优化动归解法下完全背包问题的时间复杂度。现在，再让我们看看如何优化它的空间复杂度。</p><h3>动态规划对内存要求高</h3><p>还记得备忘录这个词吧，在我们解动态规划问题时，总会用到它。名字确实比较高端、上档次，但说白了，它无非就是一块事先开辟好的缓存区域。我们总是要对计算结果进行缓存，而缓存可以避免对结果进行重复计算。</p><p>但是，鱼与熊掌不可兼得，当状态数量非常多的时候，缓存的占用空间也会变得非常非常大。因此，如果我们要优化动态规划的空间复杂度，就必须想办法减少缓存的大小，毕竟其它的空间相对于缓存都是九牛一毛。</p><h3>寻找优化空间复杂度的方法</h3><p>我们先来回顾一下时间复杂度优化一节的状态转移方程：</p><p>$$DP(tn, rw)=\\left\\{\\begin{array}{c}<br>\n0, tn&lt;=0\\\\\\<br>\n0, rw&lt;=0\\\\\\<br>\nDP(tn-1,rw), rw&lt;w[tn]\\\\\\<br>\nmax( DP(tn-1,rw),DP(tn,rw-w[tn])+v[tn] )<br>\n\\end{array}\\right.$$</p><p>从状态转移方程中，我们可以知道：如果想求 $DP(tn, rw)$，那么我们只依赖于$DP(tn-1, rw)$和$DP(tn, 0)$。</p><p>如果从状态备忘录的角度上来说，就是我们只关心 $tn - 1$ 时的结果和 $tn$ 相同时的结果。也就是说，当前的计算只使用缓存中当前这一行和上一行的计算结果。</p><p>既然如此，我们就可以采用滚动数组的方式，定义一个只有两行的数组。</p><ul>\n<li>在计算第 1 个物品时，用第 0 行做 $tn - 1$ 的缓存，用第 1 行做 $tn$ 的缓存；</li>\n<li>在计算第 2 个物品时，用第 1 行做 $tn - 1$ 的缓存，用第 0 行做 $tn$ 的缓存；</li>\n<li>在计算第 3个物品时，用第 0 行做 $tn - 1$ 的缓存，而用第 1 行做 $tn$ 的缓存……以此类推。</li>\n</ul><p>这个过程，可以用下面的图展示出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/f3/5d35fd0198952959626c4963bb0b28f3.jpg?wh=2002*948\" alt=\"\"></p><p>通过上述方法，我们把那张庞大的状态转移表，优化成了只有两行的数组。可以预见的是，无论输入的数据多么庞大，改进后的算法占用的空间都会十分稳定，妙哉！</p><h3>改进代码的空间复杂度</h3><p>现在，我们有了明确的优化思路，那就是用一个只有两行的数组来代替原来的状态转移表（即备忘录）。在这种情况下，状态转移方程不会有什么变化，我们只需要对代码中的备忘录稍作修改即可。</p><p>Java 实现：</p><pre><code>int bag(int[] w, int[] v, int N, int W) {\n  // 创建备忘录\n  int[][] dp = new int[2][W+1];\n  \n  // 初始化状态\n  for (int i = 0; i &lt; 2; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      // tn % 2代表当前行的缓存索引\n      int ctn = tn % 2;\n      // 1 - ctn代表上一行的缓存索引\n      int ptn = 1 - ctn;\n\n      dp[ctn][rw] = dp[ptn][rw];\n      // 如果可以放入则尝试放入第tn件物品\n      if (w[tn] &lt;= rw) {\n        dp[ctn][rw] = Math.max(dp[ctn][rw], dp[ctn][rw-w[tn]] + v[tn]);\n      }\n    }\n  }\n  return dp[N % 2][W];\n}\n\nint solveBag() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  int[] w = {0, 3, 2, 1}; // 物品的重量\n  int[] v = {0, 5, 2, 3}; // 物品的价值\n  \n  return bag(w, v, N, W); // 输出答案\n}\n</code></pre><p>C++ 实现：</p><pre><code>int DP(const std::vector&lt;int&gt;&amp; w, const std::vector&lt;int&gt;&amp; v, int N, int W) {\n  int dp[2][W+1]; // 创建备忘录\n  memset(dp, 0, sizeof(dp));\n  \n  // 初始化状态\n  for (int i = 0; i &lt; 2; i++) { dp[i][0] = 0; }\n  for (int j = 0; j &lt; W + 1; j++) { dp[0][j] = 0; }\n\n  // 遍历每一件物品\n  for (int tn = 1; tn &lt; N + 1; tn++) { \n    // 背包容量有多大就还要计算多少次\n    for (int rw = 1; rw &lt; W + 1; rw++) { \n      // tn % 2代表当前行的缓存索引\n      int ctn = tn % 2;\n      // tn % 1代表上一行的缓存索引\n      int ptn = tn % 1;\n\n      dp[ctn][rw] = dp[ptn][rw];\n      // 如果可以放入则尝试放入第tn件物品\n      if (w[tn] &lt;= rw) {\n        dp[ctn][rw] = max(dp[ctn][rw], dp[ctn][rw-w[tn]] + v[tn]);\n      }\n    }\n  }\n  return dp[N % 2][W];\n}\n\nint DPSol() {\n  int N = 3, W = 5; // 物品的总数，背包能容纳的总重量\n  std::vector&lt;int&gt; w = {0, 3, 2, 1}; // 物品的重量\n  std::vector&lt;int&gt; v = {0, 5, 2, 3}; // 物品的价值\n  \n  return DP(w, v, N, W); // 输出答案\n}\n</code></pre><p>从代码中，我们可以看到，其唯一变化的就是缓存的定义和使用方法。</p><p>我们将缓存定义成只有 2 行。在使用的时候，我们利用求余的操作控制到底哪一行是当前行，哪一行是上一行，交替使用两部分缓存。通过这个巧妙的方式，我们大幅减少了缓存空间的使用，尤其在物品数量很多的时候效果会非常好。</p><p>至此，我们较为完美地解决了整个完全背包问题，无论是从时间复杂度，还是从空间复杂度角度上看，这段代码都称得上是 a master piece～</p><p>虽然完全背包问题已经在之前的0-1背包问题上复杂了许多，不过，关于背包的故事还没有结束。我会在后续的课程中，结合完全背包的衍生面试问题与你进行探讨。不过，你还是要把本节课中提到的技巧和方法多加练习一下，就目前来说这更为重要。</p><h2>课程总结</h2><p>让我们回到本课开篇的那个问题上来：<strong>完全背包会如何影响状态转移方程呢？</strong></p><p>显然，完全背包把问题复杂化了，曾经的我们，只需要决策当前物品放还是不放；但现在，我们需要考虑当前物品到底要放几个，才能到达最后的最优解。</p><p>从状态转移方程的角度上看，在原有0-1背包问题的基础上，它多了一层循环遍历。我们要通过这个循环找到一个答案：那就是到底该拿多少件当前物品。因此，上述问题的结论就是，<strong>完全背包问题让状态转移方程多了一层循环迭代</strong>。</p><p>如果你已经理解到这个层面，那么恭喜你，面试这一关你已经达标了，面试官应该会很满意。因为根据我的经验，真就是有很多面试者会栽在这一类动归问题的复杂度上，更别提写出代码了。</p><p>但我们追求的不仅是弄懂，还要弄通。因为只有弄通了，才能解决咱们后续课程的动态规划问题。因此，我们还要考虑，如何从时间复杂度和空间复杂度上来进一步优化算法。</p><ol>\n<li>优化算法的时间复杂度：动态规划的重叠子问题并不一定是唯一的，不同的重叠子问题可能会带来不同的计算消耗。因此，我们要尽量将问题转换成时间复杂度最低的重叠子问题；</li>\n<li>优化算法的空间复杂度：动态规划的核心在于状态存储（即备忘录），而状态存储必定带来消耗，也就是以空间换时间。但是在实际应用中，实际的存储条件并不一定能满足动态规划的标准状态存储方式。此时，我们要考虑如何压缩状态存储数，降低空间复杂度。</li>\n</ol><h2>课后思考</h2><p>我们已经学习了0-1背包和完全背包问题。特别的，在完全背包问题中，每一种物品的数量是无限的。现在，给你这样一个问题，如果每种物品不像0-1背包问题中那样只有一个，也不像完全背包问题中那样无限制，即每种物品有个数的限制（≥ 1）。那么在这种题设下，该如何使用动态规划来化解此问题呢？</p><p>在解决问题后，你是否能找到降低时间复杂度和空间复杂度的方法呢？</p><p>十分期待你的答案，欢迎你在留言区中与我交流！如果乍一看感觉解决不了，不妨再次复习下这节课的内容，或者考考你身边的同事或朋友呀。</p>","comments":[{"had_liked":false,"id":258305,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1189225,"ip_address":"","ucode":"C199B14177A951","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlRVTQ1mpTLY34BAje4xRY0PFSJk6J1su2jicrtEQASP3DakQ7lQkWZNADoh8mLibwATLJB9EMrIVQ/132","comment_is_top":false,"comment_ctime":1604378804,"is_pvip":true,"replies":[{"id":"94424","content":"这个空间优化没有问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1604900460,"ip_address":"","comment_id":258305,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40259084468","product_id":100060501,"comment_content":"完全背包空间优化，是否用一维数组就行了。<br>代码：<br>int bag(int[] w, int[] v, int N, int W) {<br>        int[] dp = new int[W+1];<br>        &#47;&#47; 依次遍历给定物品<br>        for (int tn = 1; tn &lt; N + 1; tn++) {<br>            &#47;&#47; 当前背包容量<br>            for (int rw = 1; rw &lt; W + 1; rw++) {<br>                if (w[tn] &lt;= rw) {<br>                    dp[rw] = Math.max(dp[rw], dp[rw-w[tn]] + v[tn]);<br>                }<br>            }<br>        }<br>        return dp[W];<br>    }","like_count":9,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508613,"discussion_content":"这个空间优化没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604900460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250815,"user_name":"norton&#47;Dark","can_delete":false,"product_type":"c1","uid":1103637,"ip_address":"","ucode":"55C0B5636138BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/15/63258662.jpg","comment_is_top":false,"comment_ctime":1601253154,"is_pvip":false,"replies":[{"id":"91915","content":"嗯，你的理解是正确的。意思是 tn 和 tn-1 交替使用数组的 0 行和 1 行。<br><br>补充一下背景，让跟多人能看到：<br>滚动数组的方法在朴素算法当中使用的较为广泛，比如说，读取一个超大文本文件的每一行这样的问题，我们就不希望一次性将整个文本文件加载进入内存，这是因为我们需要的可能只是整个文本文件当中的极个别信息：比如行数、包含某个特定字符的行等等。<br><br>一般，我们可以考虑使用求余的方法，来实现周而复始的复用有限的数组空间。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601555321,"ip_address":"","comment_id":250815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18781122338","product_id":100060501,"comment_content":"滚动数组那描述太绕了，排班也不好对比。意思就是tn和tn-1交替使用0和1行吧，这个技巧没用过的人，可能不理解滚动数组是怎么滚的","like_count":4,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506295,"discussion_content":"嗯，你的理解是正确的。意思是 tn 和 tn-1 交替使用数组的 0 行和 1 行。\n\n补充一下背景，让跟多人能看到：\n滚动数组的方法在朴素算法当中使用的较为广泛，比如说，读取一个超大文本文件的每一行这样的问题，我们就不希望一次性将整个文本文件加载进入内存，这是因为我们需要的可能只是整个文本文件当中的极个别信息：比如行数、包含某个特定字符的行等等。\n\n一般，我们可以考虑使用求余的方法，来实现周而复始的复用有限的数组空间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601555321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251025,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1601336157,"is_pvip":false,"replies":[{"id":"91903","content":"如果你说的三元递归说的是状态转移参数，递归是状态转移的过程。<br><br>那么对于第一个问题这里其实不用再追加一个参数，因为其实多重背包相对于完全背包只是加入了对数量的限制，因此只需要在遍历物品数量计算DP[i][j]的最优解的时候加上数量作为限制即可，不需要在状态转移中再追加新的参数，增加空间复杂度。<br><br>对于你的第二个思路，的确可以直接将物品按照数量展开，直接把多重背包转化成0-1背包，这个思路朴素简单而且好用。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601529914,"ip_address":"","comment_id":251025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10191270749","product_id":100060501,"comment_content":"思考题<br>每个物品有固定数目，这里递归还要加一个变量记录当前元素所剩的物品个数，这是一个三元递归的问题。<br>也可以转为为0-1背包问题，将每个物品的数目展开，看成是不同的物体，0-1背包的解法并没有限制所有物品都不同。","like_count":2,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506367,"discussion_content":"如果你说的三元递归说的是状态转移参数，递归是状态转移的过程。\n\n那么对于第一个问题这里其实不用再追加一个参数，因为其实多重背包相对于完全背包只是加入了对数量的限制，因此只需要在遍历物品数量计算DP[i][j]的最优解的时候加上数量作为限制即可，不需要在状态转移中再追加新的参数，增加空间复杂度。\n\n对于你的第二个思路，的确可以直接将物品按照数量展开，直接把多重背包转化成0-1背包，这个思路朴素简单而且好用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601529914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257622,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1604044481,"is_pvip":false,"replies":[{"id":"94426","content":"恩，在图文以及前后文符号使用的一致性上的确可以做得更好。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1604900488,"ip_address":"","comment_id":257622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5899011777","product_id":100060501,"comment_content":"老师讲的很好！但是老师的图实在是画的二义性很多啊比如dp（2,3 -0*3）+0.3*k ...等等的表达，一边设计到容量的变化，一边又是价值，dp在内外表示的意思就是不一样的，虽然看懂了，但这种图看的真的很难受啊","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508393,"discussion_content":"恩，在图文以及前后文符号使用的一致性上的确可以做得更好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604900488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256130,"user_name":"CD","can_delete":false,"product_type":"c1","uid":1731708,"ip_address":"","ucode":"58CC51BF74D0CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEJvYGM1OKuozKX1A2jCOpxaoWReB5vgL3nudu6t3NKNbqqLhBGGcFJGWiab80lCUiay12iaOicPWj1A/132","comment_is_top":false,"comment_ctime":1603534095,"is_pvip":false,"replies":[{"id":"93654","content":"在第7课中，搜索这个关键字定位内容：“不知道你发现了没有，在改进后的代码中没有 k 参与计算了   ......”<br><br>这里就是对重复计算的重叠子问题的解释，这个图应该已经比较清晰了，比如求DP(3,5)，需要求解DP(2,5)、DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，如果要求解DP(3,4)的时候需要求解DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，这里就有5个重叠子问题。这相当于我们求解DP(3,4)后再求解一个DP(2,5)即可。<br>图中每个框都包含了右侧问题的所有子问题，这是显而易见的。<br>","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603904306,"ip_address":"","comment_id":256130,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898501391","product_id":100060501,"comment_content":"Math.max(dp[tn][rw], dp[tn][rw-w[tn]] + v[tn])<br>请麻烦 好好解释一下  <br>和之前的<br>Math.max(dp[tn-1][rw], dp[tn-1][rw-w[tn]] + v[tn])  <br>从你的画的图中也看不到 有重复计算的","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507938,"discussion_content":"在第7课中，搜索这个关键字定位内容：“不知道你发现了没有，在改进后的代码中没有 k 参与计算了   ......”\n\n这里就是对重复计算的重叠子问题的解释，这个图应该已经比较清晰了，比如求DP(3,5)，需要求解DP(2,5)、DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，如果要求解DP(3,4)的时候需要求解DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，这里就有5个重叠子问题。这相当于我们求解DP(3,4)后再求解一个DP(2,5)即可。\n图中每个框都包含了右侧问题的所有子问题，这是显而易见的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603904306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252589,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1602393225,"is_pvip":false,"replies":[{"id":"92678","content":"谢谢你！<br>另外，你的对于0-1背包问题的描述，完全正确。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856386,"ip_address":"","comment_id":252589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5897360521","product_id":100060501,"comment_content":"老师讲的太好了，让人看了，还想继续读下一篇。 我觉得0 1背包是跟前n-1个物品比较，完全背包是跟当前物品的前m-1次比较，在代码上的差异主要体现在是用dp[i-1][j]还是dp[i][j]。","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506813,"discussion_content":"谢谢你！\n另外，你的对于0-1背包问题的描述，完全正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250810,"user_name":"norton&#47;Dark","can_delete":false,"product_type":"c1","uid":1103637,"ip_address":"","ucode":"55C0B5636138BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/15/63258662.jpg","comment_is_top":false,"comment_ctime":1601251718,"is_pvip":false,"replies":[{"id":"91918","content":"这里时间复杂度的确有问题，应该是O(k * v^2)。已更新。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601556601,"ip_address":"","comment_id":250810,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5896219014","product_id":100060501,"comment_content":"时间复杂度物品数量不好理解，有物品类型数量n和单个物品取k个,k平方是怎么出现的呢？少了一步骤，可能会让大多数人注意力断供。","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506293,"discussion_content":"这里时间复杂度的确有问题，应该是O(k * v^2)。已更新。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601556601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350984,"user_name":"余淮","can_delete":false,"product_type":"c1","uid":2923989,"ip_address":"上海","ucode":"2B7DA1475DC0BF","user_header":"https://static001.geekbang.org/account/avatar/00/2c/9d/d5/4dcf8986.jpg","comment_is_top":false,"comment_ctime":1657438468,"is_pvip":true,"replies":[{"id":"130265","content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1663775428,"ip_address":"上海","comment_id":350984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657438468","product_id":100060501,"comment_content":"int dp_opt3(vector&lt;int&gt; w, vector&lt;int&gt; v, vector&lt;int&gt; limit, int N, int W)<br>{<br>    int dp[100][100];<br>    for (int i = 0; i &lt; W + 1; i++)<br>    {<br>        dp[0][i] = 0;<br>    }<br><br>    for (int i = 0; i &lt; N + 1; i++)<br>    {<br>        dp[i][0] = 0;<br>    }<br><br>    for (int i = 1; i &lt; W + 1; i++)<br>    {<br>        for (int j = 1; j &lt; N + 1; j++)<br>        {<br>            if (w[j] &lt; i)<br>            {<br>                dp[j][i] = dp[j - 1][i];<br>            }<br>            else {<br>                int k = MIN(limit[j], W &#47; w[j]);<br>                for (int z = 0; z &lt; k; z++)<br>                {<br>                    dp[j][i] = MAX(dp[j][i], dp[j - 1][i - k * w[j]] + k * v[j]);<br>                }<br>            }<br>        }<br>    }<br><br>    return dp[N][W];<br>}<br><br>写了各没优化的版本。","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588470,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663775428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317699,"user_name":"Ryze","can_delete":false,"product_type":"c1","uid":2597183,"ip_address":"","ucode":"5722BE46530760","user_header":"https://static001.geekbang.org/account/avatar/00/27/a1/3f/4465c544.jpg","comment_is_top":false,"comment_ctime":1634894901,"is_pvip":false,"replies":[{"id":"118239","content":"这个问题不能直接这样简化，因为需要从上一轮的结果和这轮的结果中取最好的结果。如果要合并成一维数组可以看最后一节考虑空间上的压缩（把二维数组合并成一维数组）。","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1639321555,"ip_address":"","comment_id":317699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634894901","product_id":100060501,"comment_content":"我觉着这个问题的状态转移方程是不是可以进一步的简练为  dp[rw] = dp[rw - w[tn]] + v[tn] ,    rw &gt; w[tn]   ;      dp[rw] = 0, rw=0;这样感觉最容易理解，而且是一维数组","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538082,"discussion_content":"这个问题不能直接这样简化，因为需要从上一轮的结果和这轮的结果中取最好的结果。如果要合并成一维数组可以看最后一节考虑空间上的压缩（把二维数组合并成一维数组）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639321555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308728,"user_name":"why","can_delete":false,"product_type":"c1","uid":1791877,"ip_address":"","ucode":"D0DE42010C8BC0","user_header":"https://static001.geekbang.org/account/avatar/00/1b/57/85/bc351259.jpg","comment_is_top":false,"comment_ctime":1629773166,"is_pvip":false,"replies":[{"id":"113501","content":"嗯，说出这句话说明你理解的很透彻了，凑硬币问题本质上就是一维动归问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1632407819,"ip_address":"","comment_id":308728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629773166","product_id":100060501,"comment_content":"我觉得这个完全背包和之前的凑硬币差不多，类似之前的一维数组也可以解决","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525606,"discussion_content":"嗯，说出这句话说明你理解的很透彻了，凑硬币问题本质上就是一维动归问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632407819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297319,"user_name":"金时","can_delete":false,"product_type":"c1","uid":1120428,"ip_address":"","ucode":"3491B2367A7238","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/ac/4d68ba46.jpg","comment_is_top":false,"comment_ctime":1623430500,"is_pvip":false,"replies":[{"id":"108198","content":"还需要考虑重量的因素，最贵的物品可能重量太大，很有可能就不及一些不那么贵的物品但轻，加在一起可能就会更重。考虑到诸多因素，不能只考虑单一变量而直接放入最贵物品。可以穷举来获得答案，但显然穷举效率太低。因此需要考虑效率更高的方法，即动态规划。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1623946878,"ip_address":"","comment_id":297319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623430500","product_id":100060501,"comment_content":"贪心法不能解决吗，选择单价最贵的物品 放进去就行了？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521796,"discussion_content":"还需要考虑重量的因素，最贵的物品可能重量太大，很有可能就不及一些不那么贵的物品但轻，加在一起可能就会更重。考虑到诸多因素，不能只考虑单一变量而直接放入最贵物品。可以穷举来获得答案，但显然穷举效率太低。因此需要考虑效率更高的方法，即动态规划。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623946878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265123,"user_name":"燕子","can_delete":false,"product_type":"c1","uid":1414467,"ip_address":"","ucode":"513EF413B30A25","user_header":"https://static001.geekbang.org/account/avatar/00/15/95/43/b368fd59.jpg","comment_is_top":false,"comment_ctime":1606786824,"is_pvip":false,"replies":[{"id":"101330","content":"这个都是看个人习惯，因为其实二维数组和一维数组之间其实只是下标换算，如果习惯了一维数组也会觉得很容易理解。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1613370395,"ip_address":"","comment_id":265123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606786824","product_id":100060501,"comment_content":"用两行的二维数组进行的空间优化，比一维数组优化好理解多了，而且更有普适性。","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510813,"discussion_content":"这个都是看个人习惯，因为其实二维数组和一维数组之间其实只是下标换算，如果习惯了一维数组也会觉得很容易理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613370395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258306,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1189225,"ip_address":"","ucode":"C199B14177A951","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlRVTQ1mpTLY34BAje4xRY0PFSJk6J1su2jicrtEQASP3DakQ7lQkWZNADoh8mLibwATLJB9EMrIVQ/132","comment_is_top":false,"comment_ctime":1604379024,"is_pvip":true,"replies":[{"id":"94423","content":"对的，可以这样进行空间优化。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1604900453,"ip_address":"","comment_id":258306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604379024","product_id":100060501,"comment_content":"一维dp[W+1]，当前dp[j]表示上次背包价值，dp[j-*]表示放入j-*件当前物品的价值","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508614,"discussion_content":"对的，可以这样进行空间优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604900453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256650,"user_name":"AshinInfo","can_delete":false,"product_type":"c1","uid":1299511,"ip_address":"","ucode":"098F5C74A37009","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/37/aa152ddb.jpg","comment_is_top":false,"comment_ctime":1603696038,"is_pvip":false,"replies":[{"id":"93652","content":"状态转移方程的确可以修改，但是从整个方程来看，因为tn和rw得边界情况都已经处理了，所以这里其实加和不加在数学模型描述上没有差别。但是代码处理为了提升速度所以这里肯定会做对应优化。所以状态转移方程不一定会和最后的代码一模一样。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603904227,"ip_address":"","comment_id":256650,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603696038","product_id":100060501,"comment_content":"状态转移方程<br>max{DP(tn-1,rw-k*w[tn])+k*v[tn]} , (0&lt;=k&lt;=rw)<br>看的限制条件是否改成<br>状态转移方程<br>(0&lt;=k*w[tn]&lt;=rw)<br>更合理","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508073,"discussion_content":"状态转移方程的确可以修改，但是从整个方程来看，因为tn和rw得边界情况都已经处理了，所以这里其实加和不加在数学模型描述上没有差别。但是代码处理为了提升速度所以这里肯定会做对应优化。所以状态转移方程不一定会和最后的代码一模一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603904227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256123,"user_name":"CD","can_delete":false,"product_type":"c1","uid":1731708,"ip_address":"","ucode":"58CC51BF74D0CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEJvYGM1OKuozKX1A2jCOpxaoWReB5vgL3nudu6t3NKNbqqLhBGGcFJGWiab80lCUiay12iaOicPWj1A/132","comment_is_top":false,"comment_ctime":1603532355,"is_pvip":false,"replies":[{"id":"93655","content":"这里dp[2,4-0*1]就是dp[2,4]的结果，而dp[2,4-1*1]+1*3指的是dp[2,3]的结果加上3，最后我们从这些子问题中求最优解。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603904313,"ip_address":"","comment_id":256123,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603532355","product_id":100060501,"comment_content":"dp[2,4-0*1] + 0*3<br>dp[2,4-1*1] + 1*3<br>dp[2,4-2*1] + 2*3<br>根本不一样，请麻烦看一下 <br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507936,"discussion_content":"这里dp[2,4-0*1]就是dp[2,4]的结果，而dp[2,4-1*1]+1*3指的是dp[2,3]的结果加上3，最后我们从这些子问题中求最优解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603904313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256122,"user_name":"CD","can_delete":false,"product_type":"c1","uid":1731708,"ip_address":"","ucode":"58CC51BF74D0CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEJvYGM1OKuozKX1A2jCOpxaoWReB5vgL3nudu6t3NKNbqqLhBGGcFJGWiab80lCUiay12iaOicPWj1A/132","comment_is_top":false,"comment_ctime":1603532264,"is_pvip":false,"replies":[{"id":"93656","content":"在第7课搜索以下内容定位内容：“不知道你发现了没有，在改进后的代码中没有 k 参与计算了   ........”<br><br>根据图示，这里就是对重复计算的重叠子问题的解释，这个图应该已经比较清晰了，比如求DP(3,5)，需要求解DP(2,5)、DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，如果要求解DP(3,4)的时候需要求解DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，这里就有5个重叠子问题。这相当于我们求解DP(3,4)后再求解一个DP(2,5)即可。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603904373,"ip_address":"","comment_id":256122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603532264","product_id":100060501,"comment_content":"DP(3, 4) 和 DP(3, 5) 之间只相差了这一步循环。<br>dp[2,5-0*1] + 0*3<br>dp[2,5-1*1] + 1*3<br>dp[2,5-2*1] + 2*3<br>dp[2,5-3*1] + 3*3<br>dp[2,5-4*1] + 4*3<br>dp[2,5-5*1] + 5*3<br><br>dp[2,4-0*1] + 4*3<br>dp[2,4-0*1] + 4*3<br><br><br><br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507935,"discussion_content":"在第7课搜索以下内容定位内容：“不知道你发现了没有，在改进后的代码中没有 k 参与计算了   ........”\n\n根据图示，这里就是对重复计算的重叠子问题的解释，这个图应该已经比较清晰了，比如求DP(3,5)，需要求解DP(2,5)、DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，如果要求解DP(3,4)的时候需要求解DP(2,4)、DP(2,3)、DP(2,2)、DP(2,1)、DP(2,0)，这里就有5个重叠子问题。这相当于我们求解DP(3,4)后再求解一个DP(2,5)即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603904373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256111,"user_name":"CD","can_delete":false,"product_type":"c1","uid":1731708,"ip_address":"","ucode":"58CC51BF74D0CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEJvYGM1OKuozKX1A2jCOpxaoWReB5vgL3nudu6t3NKNbqqLhBGGcFJGWiab80lCUiay12iaOicPWj1A/132","comment_is_top":false,"comment_ctime":1603530449,"is_pvip":false,"replies":[{"id":"93472","content":"这里描述的本质是一个数学归纳的过程，因此理解了数学归纳的思想，这里就不难理解了。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603729680,"ip_address":"","comment_id":256111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603530449","product_id":100060501,"comment_content":"因此我们肯定会再次求解 rw - 2*w[tn] <br><br>这种的能不能画图 举出例子<br>就像 前几章那样，单独一句话，很难理解","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507931,"discussion_content":"这里描述的本质是一个数学归纳的过程，因此理解了数学归纳的思想，这里就不难理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603729680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252316,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1113736,"ip_address":"","ucode":"D9D55E65E5641A","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/88/2813d62a.jpg","comment_is_top":false,"comment_ctime":1602232900,"is_pvip":false,"replies":[{"id":"92682","content":"这里应该改成1 – ctn （代码已修改），感谢反馈。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856484,"ip_address":"","comment_id":252316,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1602232900","product_id":100060501,"comment_content":"空间优化中:<br>&#47;&#47; tn % 1代表上一行的缓存索引 <br>int ptn = tn % 1;<br><br>这个上一行索引不是一个定值么?和预期不符合把<br><br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506748,"discussion_content":"这里应该改成1 – ctn （代码已修改），感谢反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","nickname":"猫头鹰爱拿铁","note":"","ucode":"24266B58968428","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312327,"discussion_content":"我也觉得有问题，ptn就一直等于0。应该是1和0滚动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602665411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251941,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1601994331,"is_pvip":false,"replies":[{"id":"92688","content":"这里是为了和动态转移方程里对照起来，比较容易理解。的确在不同语言里可以在初始化状态上简化，只不过这里为了提现动态规划的“模板”，所以无论什么语言都会加入初始化部分，相比于动态规划部分的性能，这部分的时间复杂度肯定不高。至于实现的优化可以根据自己的情况来处理。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856750,"ip_address":"","comment_id":251941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601994331","product_id":100060501,"comment_content":"老师的这一篇文章让我受益匪浅，我还得再多读几遍，多练习练习。<br><br>老师这里的代码有一点冗余。<br>要么k从1开始，要么就不需要‘dp[tn][rw] = dp[tn-   1][rw];’这一行。<br><br>如果考虑到c申请的数组可能不是零值，那还是让k从1开始吧。<br>如果是像golang这种申请的变量保证是零值了，可以少写一行。<br><br>  &#47;&#47; 遍历每一件物品<br>  for (int tn = 1; tn &lt; N + 1; tn++) { <br>    &#47;&#47; 背包容量有多大就还要计算多少次<br>    for (int rw = 1; rw &lt; W + 1; rw++) { <br>      dp[tn][rw] = dp[tn-   1][rw];<br>      &#47;&#47; 根据rw尝试放入多次物品，从中找出最大值，作为当前子问题的最优解<br>      for (int k = 0; k &lt;= rw &#47; w[tn]; k++) {<br>        dp[tn][rw] = max(dp[tn][rw], dp[tn-1][rw-k*w[tn]] + k*v[tn]);<br>      }<br>    }<br>  }","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506671,"discussion_content":"这里是为了和动态转移方程里对照起来，比较容易理解。的确在不同语言里可以在初始化状态上简化，只不过这里为了提现动态规划的“模板”，所以无论什么语言都会加入初始化部分，相比于动态规划部分的性能，这部分的时间复杂度肯定不高。至于实现的优化可以根据自己的情况来处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250869,"user_name":"德忠","can_delete":false,"product_type":"c1","uid":2049550,"ip_address":"","ucode":"5AE28832F4B3F1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/46/0e/cc32612e.jpg","comment_is_top":false,"comment_ctime":1601265996,"is_pvip":false,"replies":[{"id":"91914","content":"你可以仔细看上方代码有一行<br>dp[tn][rw] = dp[tn-1][rw]<br>所以这里用dp[tn][rw]和dp[tn-1][rw]是等价的","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601554833,"ip_address":"","comment_id":250869,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1601265996","product_id":100060501,"comment_content":"第二个动态转移方程是：max(DP(tn-1, rw), DP(tn, rw - w[tn]) + v[tn])<br>第二个代码里用的 dp[tn][rw] = max(dp[tn][rw], dp[tn][rw-w[tn]] + v[tn]);<br>第二个代码是不是应该是dp[tn][rw] = max(dp[tn-1][rw], dp[tn][rw-w[tn]] + v[tn]);","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506319,"discussion_content":"你可以仔细看上方代码有一行\ndp[tn][rw] = dp[tn-1][rw]\n所以这里用dp[tn][rw]和dp[tn-1][rw]是等价的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601554833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2182510,"avatar":"https://static001.geekbang.org/account/avatar/00/21/4d/6e/6d55e68f.jpg","nickname":"Shallnima.","note":"","ucode":"CF7A0984DA6603","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314050,"discussion_content":"老师您好。我很好奇这里既然是等价的，为什么要多加一行，而不采用dp[tn-1][rw]呢？是为了方便理解吗？还是有别的原因？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603114939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250814,"user_name":"norton&#47;Dark","can_delete":false,"product_type":"c1","uid":1103637,"ip_address":"","ucode":"55C0B5636138BD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/15/63258662.jpg","comment_is_top":false,"comment_ctime":1601252629,"is_pvip":false,"replies":[{"id":"91917","content":"&#47;&#47; 根据rw尝试放入多次物品，从中找出最大值，作为当前子问题的最优解<br>for (int k = 0; k &lt;= rw &#47; w[tn]; k++) {<br>  dp[tn][rw] = max(dp[tn][rw], dp[tn-1][rw-k*w[tn] + k*v[tn]);<br>}<br><br>这里 k 指的是没优化之前的这个变量k，表示每次到底放入几个物品。<br><br>知道了 k 是什么应该就能很好地理解这里的优化了～","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601556147,"ip_address":"","comment_id":250814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601252629","product_id":100060501,"comment_content":"rw转为k不大好理解，想了很久dp(3,5) 那里，不知道是不是我理解错了，之前定义都是dp(tn, rw) 优化的图用dp(tn, k) ，这二者转换还得脑补么。","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506294,"discussion_content":"// 根据rw尝试放入多次物品，从中找出最大值，作为当前子问题的最优解\nfor (int k = 0; k &amp;lt;= rw / w[tn]; k++) {\n  dp[tn][rw] = max(dp[tn][rw], dp[tn-1][rw-k*w[tn] + k*v[tn]);\n}\n\n这里 k 指的是没优化之前的这个变量k，表示每次到底放入几个物品。\n\n知道了 k 是什么应该就能很好地理解这里的优化了～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601556147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}