{"id":202772,"title":"06 | Paxos算法（二）：Multi-Paxos不是一个算法，而是统称","content":"<p>你好，我是韩健。</p><p>经过上节课的学习，你应该知道，Basic Paxos只能就单个值（Value）达成共识，一旦遇到为一系列的值实现共识的时候，它就不管用了。虽然兰伯特提到可以通过多次执行Basic Paxos实例（比如每接收到一个值时，就执行一次Basic Paxos算法）实现一系列值的共识。但是，很多同学读完论文后，应该还是两眼摸黑，虽然每个英文单词都能读懂，但还是不理解兰伯特提到的Multi-Paxos，为什么Multi-Paxos这么难理解呢？</p><p>在我看来，兰伯特并没有把Multi-Paxos讲清楚，只是介绍了大概的思想，缺少算法过程的细节和编程所必须的细节（比如缺少选举领导者的细节）。这也就导致每个人实现的Multi-Paxos都不一样。不过从本质上看，大家都是在兰伯特提到的Multi-Paxos思想上补充细节，设计自己的Multi-Paxos算法，然后实现它（比如Chubby的Multi-Paxos实现、Raft算法等）。</p><p>所以在这里，我补充一下：<strong>兰伯特提到的Multi-Paxos是一种思想，不是算法。而Multi-Paxos算法是一个统称，它是指基于Multi-Paxos思想，通过多个Basic Paxos实例实现一系列值的共识的算法（比如Chubby的Multi-Paxos实现、Raft算法等）。</strong> 这一点尤其需要你注意。</p><!-- [[[read_end]]] --><p>为了帮你掌握Multi-Paxos思想，我会先带你了解，对于Multi-Paxos兰伯特是如何思考的，也就是说，如何解决Basic Paxos的痛点问题；然后我再以Chubby的Multi-Paxos实现为例，具体讲解一下。为啥选它呢？因为Chubby的Multi-Paxos实现，代表了Multi-Paxos思想在生产环境中的真正落地，它将一种思想变成了代码实现。</p><h2>兰伯特关于Multi-Paxos的思考</h2><p>熟悉Basic Paxos的同学（可以回顾一下<a href=\"https://time.geekbang.org/column/article/201700?utm_source=geektimeweb&amp;utm_medium=pc&amp;utm_term=pc_interstitial_143\">05讲</a>）可能还记得，Basic Paxos是通过二阶段提交来达成共识的。在第一阶段，也就是准备阶段，接收到大多数准备响应的提议者，才能发起接受请求进入第二阶段（也就是接受阶段）：</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/e0/aafabff1fe2a26523e9815805ccca6e0.jpg?wh=1142*643\" alt=\"\"></p><p>而如果我们直接通过多次执行Basic Paxos实例，来实现一系列值的共识，就会存在这样几个问题：</p><ul>\n<li>\n<p>如果多个提议者同时提交提案，可能出现因为提案编号冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商。你想象一下，一个5节点的集群，如果3个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如1个提议者接收到1个准备响应，另外2个提议者分别接收到2个准备响应）而准备失败，需要重新协商。</p>\n</li>\n<li>\n<p>2轮RPC通讯（准备阶段和接受阶段）往返消息多、耗性能、延迟大。你要知道，分布式系统的运行是建立在RPC通讯的基础之上的，因此，延迟一直是分布式系统的痛点，是需要我们在开发分布式系统时认真考虑和优化的。</p>\n</li>\n</ul><p>那么如何解决上面的2个问题呢？可以通过引入领导者和优化Basic Paxos执行来解决，咱们首先聊一聊领导者。</p><h3>领导者（Leader）</h3><p>我们可以通过引入领导者节点，也就是说，领导者节点作为唯一提议者，这样就不存在多个提议者同时提交提案的情况，也就不存在提案冲突的情况了：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/f6/af3d6a291d960ace59a88898abb74ef6.jpg?wh=1142*653\" alt=\"\"></p><p>在这里，我补充一点：<strong>在论文中，兰伯特没有说如何选举领导者，需要我们在实现Multi-Paxos算法的时候自己实现。</strong> 比如在Chubby中，主节点（也就是领导者节点）是通过执行Basic Paxos算法，进行投票选举产生的。</p><p>那么，如何解决第二个问题，也就是如何优化Basic Paxos执行呢？</p><h3>优化Basic Paxos执行</h3><p>我们可以采用“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”这个优化机制，优化Basic Paxos执行。也就是说，领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的提案，领导者可以独立指定提案中的值。这时，领导者在提交命令时，可以省掉准备阶段，直接进入到接受阶段：</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/54/3cd72a4a138fe1cde52aedd1b897f954.jpg?wh=1142*637\" alt=\"\"></p><p>你看，和重复执行Basic Paxos相比，Multi-Paxos引入领导者节点之后，因为只有领导者节点一个提议者，只有它说了算，所以就不存在提案冲突。另外，当主节点处于稳定状态时，就省掉准备阶段，直接进入接受阶段，所以在很大程度上减少了往返的消息数，提升了性能，降低了延迟。</p><p>讲到这儿，你可能会问了：在实际系统中，该如何实现Multi-Paxos呢？接下来，我以Chubby的Multi-Paxos实现为例，具体讲解一下。</p><h2>Chubby的Multi-Paxos实现</h2><p>既然兰伯特只是大概的介绍了Multi-Paxos思想，那么Chubby是如何补充细节，实现Multi-Paxos算法的呢？</p><p>首先，它通过引入主节点，实现了兰伯特提到的领导者（Leader）节点的特性。也就是说，主节点作为唯一提议者，这样就不存在多个提议者同时提交提案的情况，也就不存在提案冲突的情况了。</p><p>另外，在Chubby中，主节点是通过执行Basic Paxos算法，进行投票选举产生的，并且在运行过程中，主节点会通过不断续租的方式来延长租期（Lease）。比如在实际场景中，几天内都是同一个节点作为主节点。如果主节点故障了，那么其他的节点又会投票选举出新的主节点，也就是说主节点是一直存在的，而且是唯一的。</p><p>其次，在Chubby中实现了兰伯特提到的，“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”这个优化机制。</p><p>最后，在Chubby中，实现了成员变更（Group membership），以此保证节点变更的时候集群的平稳运行。</p><p>最后，我想补充一点：<strong>在Chubby中，为了实现了强一致性，读操作也只能在主节点上执行。</strong> 也就是说，只要数据写入成功，之后所有的客户端读到的数据都是一致的。具体的过程，就是下面的样子。</p><ul>\n<li>所有的读请求和写请求都由主节点来处理。当主节点从客户端接收到写请求后，作为提议者，执行Basic Paxos实例，将数据发送给所有的节点，并且在大多数的服务器接受了这个写请求之后，再响应给客户端成功：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7e/b9/7e2c2e194d5a0fda5594c5e4e2d9ecb9.jpg?wh=1142*590\" alt=\"\"></p><ul>\n<li>当主节点接收到读请求后，处理就比较简单了，主节点只需要查询本地数据，然后返回给客户端就可以了：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/07/64/07501bb8d9015af3fb34cf856fe3ec64.jpg?wh=1142*583\" alt=\"\"></p><p>Chubby的Multi-Paxos实现，尽管是一个闭源的实现，但这是Multi-Paxos思想在实际场景中的真正落地，Chubby团队不仅编程实现了理论，还探索了如何补充细节。其中的思考和设计非常具有参考价值，不仅能帮助我们理解Multi-Paxos思想，还能帮助我们理解其他的Multi-Paxos算法（比如Raft算法）。</p><h2>内容小结</h2><p>本节课我主要带你了解了Basic Paxos的局限，以及Chubby的Multi-Paxos实现。我希望你明确的重点如下：</p><ol>\n<li>\n<p>兰伯特提到的Multi-Paxos是一种思想，不是算法，而且还缺少算法过程的细节和编程所必须的细节，比如如何选举领导者等，这也就导致了每个人实现的Multi-Paxos都不一样。而Multi-Paxos算法是一个统称，它是指基于Multi-Paxos思想，通过多个Basic Paxos实例实现一系列数据的共识的算法（比如Chubby的Multi-Paxos实现、Raft算法等）。</p>\n</li>\n<li>\n<p>Chubby实现了主节点（也就是兰伯特提到的领导者），也实现了兰伯特提到的 <strong>“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”</strong> 这个优化机制，省掉Basic Paxos的准备阶段，提升了数据的提交效率，但是所有写请求都在主节点处理，限制了集群处理写请求的并发能力，约等于单机。</p>\n</li>\n<li>\n<p>因为在Chubby的Multi-Paxos实现中，也约定了“大多数原则”，也就是说，只要大多数节点正常运行时，集群就能正常工作，所以Chubby能容错（n - 1）/2个节点的故障。</p>\n</li>\n<li>\n<p>本质上而言，“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”这个优化机制，是通过减少非必须的协商步骤来提升性能的。这种方法非常常用，也很有效。比如，Google设计的QUIC协议，是通过减少TCP、TLS的协商步骤，优化HTTPS性能。<strong>我希望你能掌握这种性能优化思路，后续在需要时，可以通过减少非必须的步骤，优化系统性能。</strong></p>\n</li>\n</ol><p>最后，我想说的是，我个人比较喜欢Paxos算法（兰伯特的Basic Paxos和Multi-Paxos），虽然Multi-Paxos缺失算法细节，但这反而给我们提供了思考空间，让我们可以反复思考和考据缺失的细节，比如在Multi-Paxos中到底需不需要选举领导者，再比如如何实现提案编号等等。</p><p>但我想强调，Basic Paxos是经过证明的，而Multi-Paxos是一种思想，缺失实现算法的必须编程细节，这就导致，Multi-Paxos的最终算法实现，是建立在一个未经证明的基础之上的，正确性是个问号。</p><p><strong>与此同时，实现Multi-Paxos算法，最大的挑战是如何证明它是正确的。</strong> 比如Chubby的作者做了大量的测试，和运行一致性检测脚本，验证和观察系统的健壮性。在实际使用时，我不推荐你设计和实现新的Multi-Paxos算法，而是建议优先考虑Raft算法，因为Raft的正确性是经过证明的。当Raft算法不能满足需求时，你再考虑实现和优化Multi-Paxos算法。</p><h2>课堂思考</h2><p>既然，我提了Chubby只能在主节点上执行读操作，那么在最后，我给你留了一个思考题，这个设计有什么局限呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":181147,"user_name":"HuaMax","can_delete":false,"product_type":"c1","uid":1118488,"ip_address":"","ucode":"2E78DE1AF098AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","comment_is_top":true,"comment_ctime":1582506550,"is_pvip":false,"replies":[{"id":"70416","content":"如何理解领导者处于稳定状态？<br>领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的提案，领导者可以独立指定提案中的值。<br>我来具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。<br>","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582639105,"ip_address":"","comment_id":181147,"utype":1}],"discussion_count":6,"race_medal":0,"score":"9.2233721844662006e+18","product_id":100046101,"comment_content":"“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”这个优化机制。<br>请问，什么样是稳定状态？为什么稳定状态可以省掉准备阶段？","like_count":34,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484937,"discussion_content":"如何理解领导者处于稳定状态？\n领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的提案，领导者可以独立指定提案中的值。\n我来具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582639105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297853,"discussion_content":"有个问题，准备阶段其实不光有发现之前提案的作用吧，毕竟还需要半数以上的通过才行，所以还需要半数以上通过之后，通知各个节点认可提案的过程吧","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597072318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2002299,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/8d/7b/feb476e1.jpg","nickname":"满想Elvin","note":"","ucode":"4A994A138C525B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368910,"discussion_content":"没有得到半数的投票通过怎么办呐？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618880708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219155,"discussion_content":"其实也就是单机数据库的意思了吧，其它的都是从库，作为备份了……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585740108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183719,"discussion_content":"我觉得可以通过主从节点保持会话的机制来确保主节点是处于稳定状态的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582510568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187783,"discussion_content":"是Lease机制吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582768185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":183719,"ip_address":""},"score":187783,"extra":""}]}]},{"had_liked":false,"id":181137,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":true,"comment_ctime":1582503529,"is_pvip":false,"replies":[{"id":"70324","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582555688,"ip_address":"","comment_id":181137,"utype":1}],"discussion_count":9,"race_medal":1,"score":"9.2233721200416993e+18","product_id":100046101,"comment_content":"只能在主节点进行读操作，效果相当于单机，对吞吐量和性能有所影响<br>写也是在主节点进行，性能也有问题","like_count":19,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484931,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582555688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288602,"discussion_content":"其它节点用来做HA，备份容灾使用； 另外，在打散分片的实现方式中，一个物理上的节点包含了多个分片，每个分片的角色是随机分散在集群中，那么就是一个节点上的会有不同主从的分片；整体上看集群的负载还是均衡的；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593823322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552474,"discussion_content":"kafka集群就是这个特点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645491716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288602,"ip_address":""},"score":552474,"extra":""},{"author":{"id":1515223,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1e/d7/7d28a531.jpg","nickname":"飞机翅膀上","note":"","ucode":"D239DFFECDBF01","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1120777,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLjKpYPqFABEtcwIfp2F2Wrvp5tJJydd4ReoBauiazJ1kw8h8FPQAAZyu05AG9UFdtzHAKpIs0QVIA/132","nickname":"colin","note":"","ucode":"3B848197126A84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564523,"discussion_content":"HA 是什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650266017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288602,"ip_address":""},"score":564523,"extra":""}]},{"author":{"id":1692756,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","nickname":"吃饭","note":"","ucode":"AF0D7165D5F049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239082,"discussion_content":"读写都在主节点，我要其他节点干嘛？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587272150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1596987,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5e/3b/845fb641.jpg","nickname":"jhren","note":"","ucode":"60F7CCEA1E2C88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1692756,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","nickname":"吃饭","note":"","ucode":"AF0D7165D5F049","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283499,"discussion_content":"点进来就想问这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592283942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":239082,"ip_address":""},"score":283499,"extra":""},{"author":{"id":1112540,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/dc/0a1eeb4c.jpg","nickname":"schwarzeni","note":"","ucode":"C1969191F334BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1692756,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","nickname":"吃饭","note":"","ucode":"AF0D7165D5F049","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311839,"discussion_content":"用于备份数据吗？也就是说如果当前主节点挂了可以让另一个节点作为主节点，且当新节点上的数据是完整的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602501151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":239082,"ip_address":""},"score":311839,"extra":""},{"author":{"id":1692756,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/54/7263deb2.jpg","nickname":"吃饭","note":"","ucode":"AF0D7165D5F049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112540,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/dc/0a1eeb4c.jpg","nickname":"schwarzeni","note":"","ucode":"C1969191F334BD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372522,"discussion_content":"可能是为了主备切换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620364263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":311839,"ip_address":""},"score":372522,"extra":""}]},{"author":{"id":2002299,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/8d/7b/feb476e1.jpg","nickname":"满想Elvin","note":"","ucode":"4A994A138C525B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368911,"discussion_content":"为什么不可以读acceptor节点呐？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618880814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181140,"user_name":"Geek_MYMSwen","can_delete":false,"product_type":"c1","uid":1514343,"ip_address":"","ucode":"092A011977F25A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iajMePfd6rh5RcAUb5hr0RtkjkhQtkssicSgDoRBWZ0h74FiajVVNl1gVwQQKT6GPtjibMW22zKusibX6SK7CT1cH3A/132","comment_is_top":false,"comment_ctime":1582504928,"is_pvip":false,"replies":[{"id":"71067","content":"加一颗星:)<br>1. A1节点，可以联系其他节点，联系领导者，获取最新的集群节点状态信息和领导者信息，拒绝写操作的执行。<br>2. 如果，同步数据，需要在代码实现设计实现，比如，可以请求领导者节点，把新通过的提案，都同步过来，更具体的实现，可以参考Raft的日志复制。<br>3. 偶数节点不是问题，只要有大多数节点在稳定运行，就可以了。<br>4. 节点B1，在leader leasing过后，要主动退位，并拒绝执行写操作，A机房的3个节点，将选举出新的领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583093831,"ip_address":"","comment_id":181140,"utype":1}],"discussion_count":6,"race_medal":0,"score":"78891916256","product_id":100046101,"comment_content":"Chubby的局限可能在于高读的系统中，如果读请求过大，会导致系统的不可用。另外在系统中如何能够将主节点更替的信息向用户传播也是需要考虑的问题。<br>还有有一种情况我没有想清楚，请各位指点：<br>一个分布式系统中有5个节点，3个在一个机房A(机器编号A1，A2，A3)，2个在另一个机房B（机器编号B1，B2）。  1）如果节点A1的机架网络发生故障，导致A1与其他节点通信受阻，那么A1节点将会执行什么操作呢？通讯恢复以后A1节点如何进行数据同步呢？同样在A1无法通讯后出现集群有偶数节点，选举时会出现怎样的情况？ 2）如果主节点为B1，A机房与B机房间通讯产生故障，A机房和B机房的节点将分别执行怎样的操作呢？","like_count":18,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484933,"discussion_content":"加一颗星:)\n1. A1节点，可以联系其他节点，联系领导者，获取最新的集群节点状态信息和领导者信息，拒绝写操作的执行。\n2. 如果，同步数据，需要在代码实现设计实现，比如，可以请求领导者节点，把新通过的提案，都同步过来，更具体的实现，可以参考Raft的日志复制。\n3. 偶数节点不是问题，只要有大多数节点在稳定运行，就可以了。\n4. 节点B1，在leader leasing过后，要主动退位，并拒绝执行写操作，A机房的3个节点，将选举出新的领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583093831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302557,"discussion_content":"好问题！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598953873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282976,"discussion_content":"--4. 节点B1，在leader leasing过后，要主动退位，并拒绝执行写操作，A机房的3个节点，将选举出新的领导者。\nB机房的两个节点之间也会选举出一个主节点吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592133527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1247568,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/J1ADsCjfat7ibMcup6DV9DhH3lzKo2lIeBqCjuBa5nIWYu7u8NYDFb3iaPRp9cia9uH4464GDaGKcd7c0d0dkhibbA/132","nickname":"dakingkong","note":"","ucode":"6B492887E7E4A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299628,"discussion_content":"我觉得应该不会，因为此时B机房的结点数目已经不满足大多数的条件了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597754962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282976,"ip_address":""},"score":299628,"extra":""},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333768,"discussion_content":"不会，选了就脑裂了，而且B也知道自己不是拥有大多数节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607612336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282976,"ip_address":""},"score":333768,"extra":""}]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183720,"discussion_content":"点赞思考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582510596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192436,"user_name":"小石头","can_delete":false,"product_type":"c1","uid":1690759,"ip_address":"","ucode":"7B2EC4C8C6192F","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/87/2a196164.jpg","comment_is_top":false,"comment_ctime":1584850673,"is_pvip":false,"replies":[{"id":"77186","content":"加一颗星:)，这里指的是提案编号相同、选票瓜分的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586891160,"ip_address":"","comment_id":192436,"utype":1}],"discussion_count":5,"race_medal":0,"score":"40239556337","product_id":100046101,"comment_content":"如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商。你想象一下，一个 5 节点的集群，如果 3 个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如 1 个提议者接收到 1 个准备响应，另外 2 个提议者分别接收到 2 个准备响应）而准备失败，需要重新协商。<br>这第一个问题理解不了，按上篇讲的，最大提议号的提议者不是会收到所有的准备响应么？","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488398,"discussion_content":"加一颗星:)，这里指的是提案编号相同、选票瓜分的情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586891160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228560,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/10/b7974690.jpg","nickname":"BD","note":"","ucode":"A95CF8C3EDC228","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342494,"discussion_content":"提案编号相同的问题不是可以通过实现全局自增编号来避免吗 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610698542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2982575,"avatar":"","nickname":"Geek_58bda3","note":"","ucode":"7A5B535D3817DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572796,"discussion_content":"xcfgvc ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652959019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552305,"discussion_content":"我觉得还有一个问题是：\n当有多个提议者会有一个死循环问题！\n\n假如有M1和M2两个提议者，都对x进行提案\n1、首先准备阶段M1提出［1，］，然后集群大部分节点响应暂无提案.\n2、紧接着M2提出［2，］然后大部分节点响应OK.\n3、这时M1进行提案，发出［1，1］，由于集群已经收到了编号为2的提案，所以这时会失败.\n4、M1又开始准备［3，］的提案，发出准备阶段请求，集群响应OK.\n5、M2开始提案，发出［2，2］的请求，由于集群已经收到了编号为3的提案，所以会失败.\n6、M2将自己编号继续自增，发出［4，］准备阶段请求，这时成功.\n........\n这是一个死循环问题\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645407447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690759,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/87/2a196164.jpg","nickname":"小石头","note":"","ucode":"7B2EC4C8C6192F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235024,"discussion_content":"意思是多个提议者同时提交提案，提案号确是相同的这种场景是吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587013125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181733,"user_name":"zjm_tmac","can_delete":false,"product_type":"c1","uid":1849621,"ip_address":"","ucode":"5E1DE9A815A98B","user_header":"","comment_is_top":false,"comment_ctime":1582625565,"is_pvip":false,"replies":[{"id":"70408","content":"怎么确定acceptor总数，涉及代码实现和成员变更；扩容涉及到成员变更。<br>首先，使用什么数据结构来保存acceptor总数，这属于编程实现，不属于算法了，绝大多数算法都不会约定的这么细的。<br>其次，Multi-Paxos，只是一种思想，缺少算法细节和编程所必须的细节，比如，成员变更，在Multi-Paxos中，提了下，可以把服务器配置作为指令，通过状态机提交，等等。但是，如果学习了09讲后，你就会发现，真正实现起来，比这个要复杂很多，比如Raft设计了2种成员变更方法，一种难以实现，一种容易实现，但在16年时，爆出了一个算法bug，虽然很快就修复了，但也反映了成员变更比较复杂，不是三言两语能讲清楚的。<br>另外，其实，学习Multi-Paxos的最好的方式，是先理解Raft，再回过头来，学习Multi-Paxos。如果在学习Multi-Paxos中遇到不理解的，可以在学习完Raft后，再回头来研究学习。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582637490,"ip_address":"","comment_id":181733,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31647396637","product_id":100046101,"comment_content":"leader怎么确定acceptor的总数呢？集群是允许扩容的吗","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485099,"discussion_content":"怎么确定acceptor总数，涉及代码实现和成员变更；扩容涉及到成员变更。\n首先，使用什么数据结构来保存acceptor总数，这属于编程实现，不属于算法了，绝大多数算法都不会约定的这么细的。\n其次，Multi-Paxos，只是一种思想，缺少算法细节和编程所必须的细节，比如，成员变更，在Multi-Paxos中，提了下，可以把服务器配置作为指令，通过状态机提交，等等。但是，如果学习了09讲后，你就会发现，真正实现起来，比这个要复杂很多，比如Raft设计了2种成员变更方法，一种难以实现，一种容易实现，但在16年时，爆出了一个算法bug，虽然很快就修复了，但也反映了成员变更比较复杂，不是三言两语能讲清楚的。\n另外，其实，学习Multi-Paxos的最好的方式，是先理解Raft，再回过头来，学习Multi-Paxos。如果在学习Multi-Paxos中遇到不理解的，可以在学习完Raft后，再回头来研究学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582637490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191610,"user_name":"snakorse","can_delete":false,"product_type":"c1","uid":1064887,"ip_address":"","ucode":"0AD727E1F16993","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/b7/0d8b5431.jpg","comment_is_top":false,"comment_ctime":1584784591,"is_pvip":false,"replies":[{"id":"76011","content":"Paxos是共识算法，不是一致性协议，consensus不等于consistency。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586201586,"ip_address":"","comment_id":191610,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27354588367","product_id":100046101,"comment_content":"找到一篇微信后台团队对PhxPasox的讲解，感觉是对multi-paxos非常好的补充，推荐一下https:&#47;&#47;mp.weixin.qq.com&#47;s?__biz=MzI4NDMyNTU2Mw==&amp;mid=2247483695&amp;idx=1&amp;sn=91ea422913fc62579e020e941d1d059e&amp;chksm=ebfc62fbdc8bebed551c2a041bb37bcaab836c4b2ca8e575d418f1e24459459c1c16faf70d06","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488211,"discussion_content":"Paxos是共识算法，不是一致性协议，consensus不等于consistency。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586201586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985184,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/GjFJHox9V8qh53zIrExw4NK0KG9WBvRH8RJVjm9jp78RSpWfa2xzyq11dTNItpK2icQniaK4bibTv6ksRGiasjTvMg/132","nickname":"Adong0678","note":"","ucode":"845EECDFDE6233","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298641,"discussion_content":"作者您这个回复就…！两个单词是不同，一致性，共识也是两个短语。但我想问一下，多个值达成共识，选定了一个值还不一致吗？都一致了，还没达成共识吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597369436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1985184,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/GjFJHox9V8qh53zIrExw4NK0KG9WBvRH8RJVjm9jp78RSpWfa2xzyq11dTNItpK2icQniaK4bibTv6ksRGiasjTvMg/132","nickname":"Adong0678","note":"","ucode":"845EECDFDE6233","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":333779,"discussion_content":"我个人看法：一致性，就是对外的节点有相同的值，这是包含了共识的。但是共识，可能有这种场景，在节点1的KEY要等于X,在节点2的KEY要等于Y，然后所有节点3、4、5都认同了这个共识，但是外部访问节点1看到KEY为X，节点2看到KEY为Y，这不满足一致性的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607613275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298641,"ip_address":""},"score":333779,"extra":""}]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368634,"discussion_content":"谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618769999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315173,"discussion_content":"作者其实很强调共识和一致性这两个概念. paxos/raft只是共识算法, 至于通过共识算法实现怎样的一致性取决于整个系统的调性. 还有没记错的话phxpaxos好像没有选举leader的流程? 也就是无租的basic paxos? 这个可以再讨论下... ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603246269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181505,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1582552902,"is_pvip":false,"replies":[{"id":"70417","content":"领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的提案，领导者可以独立指定提案中的值。<br>我来具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582639145,"ip_address":"","comment_id":181505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23057389382","product_id":100046101,"comment_content":"本来想问个问题，看到思考题提到了。<br>从raft和zab的实现来看，一致性读操作的处理和写操作是类似的，不从本地读，而是也要发请求到所有节点，得到大多数节点的响应才行。我了解到的有的实现是领导者发送一个空操作给所有节点。<br>这样做的原因不光是考虑吞吐量的问题，而是读本地是满足不了强一致性的，因为自以为的leader未必是真的leader，此时可能另外的节点已经自己组成一个小团队，选出一个新leader，这个变量也可能都更新好几次了。只有和大多数节点交互一次才能知道自己当前还是不是leader。<br><br>有个问题，兰伯特提到的 “当领导者处于稳定状态时...”这个稳定状态是什么意思呢？在领导者是谁这个问题上，达成大多数节点的一致?<br><br><br>","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485016,"discussion_content":"领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的提案，领导者可以独立指定提案中的值。\n我来具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582639145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201250,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1585740189,"is_pvip":false,"replies":[{"id":"75424","content":"有些场景需要的是强一致性、故障容错等，场景决定系统的形态。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585838564,"ip_address":"","comment_id":201250,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18765609373","product_id":100046101,"comment_content":"集群，分布式的意义是提供更大的吞吐量，和并发，这样的操作无疑是掩耳盗铃","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490275,"discussion_content":"有些场景需要的是强一致性、故障容错等，场景决定系统的形态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585838564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220156,"discussion_content":"嗯嗯，场景决定了系统的形态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585838765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196021,"user_name":"W.G.Ma","can_delete":false,"product_type":"c1","uid":1349798,"ip_address":"","ucode":"3518F2058023F4","user_header":"https://static001.geekbang.org/account/avatar/00/14/98/a6/41394d63.jpg","comment_is_top":false,"comment_ctime":1585230931,"is_pvip":false,"replies":[{"id":"77181","content":"加一颗星:)，这里指的是提案编号相同、“选票”被瓜分的情况。另外，编号最大的提议者，虽然能收到大多数准备响应，但也可能因为各提议者不断递增提案编号和重试，出现始终没有提案被选定的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586888363,"ip_address":"","comment_id":196021,"utype":1}],"discussion_count":5,"race_medal":0,"score":"18765100115","product_id":100046101,"comment_content":"如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商——————为什么？三个提议者最大编号的的总能收到准备提议的回复","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489207,"discussion_content":"加一颗星:)，这里指的是提案编号相同、“选票”被瓜分的情况。另外，编号最大的提议者，虽然能收到大多数准备响应，但也可能因为各提议者不断递增提案编号和重试，出现始终没有提案被选定的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586888363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613002,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8ZEzZjlpMkibWlbuyablZ4An03be8uGBYqU95yIxQeicHFqnSiaqiaiaTxZRlWSh9R1qMYG3OLcVrhUw/132","nickname":"Geek_d62be1","note":"","ucode":"68EBEBC8B637EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215668,"discussion_content":"我觉得这个问题可以理解为一种活锁的概念，（假设有三个acceptor）比如一开始三个提议分别为编号1，2，3，然后都去提交提案，如果3先到acceptor1,2先到acceptor3,那么此时提议1到了之后就会被拒绝，那么提议1就会进行重试，此时的重试编号就是4，如果在提议3到达acceptor2，3之前，4先到了，那么提议3就会被拒绝，它也会进行重试，此时重试编号为5，以此类推就会进入一个循环，没法通过一个具体的提议。这就好比高速公路上只有一个入口，三辆车同时进，彼此都不退让，也都不熄火，一直尝试，则谁都没法前进，那如果此时有一个交警来进行疏通（leader），大家就都可以通过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585368909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1349798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/98/a6/41394d63.jpg","nickname":"W.G.Ma","note":"","ucode":"3518F2058023F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613002,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8ZEzZjlpMkibWlbuyablZ4An03be8uGBYqU95yIxQeicHFqnSiaqiaiaTxZRlWSh9R1qMYG3OLcVrhUw/132","nickname":"Geek_d62be1","note":"","ucode":"68EBEBC8B637EB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218833,"discussion_content":"我看了些资料，感觉应该也是这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585704069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215668,"ip_address":""},"score":218833,"extra":""},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613002,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8ZEzZjlpMkibWlbuyablZ4An03be8uGBYqU95yIxQeicHFqnSiaqiaiaTxZRlWSh9R1qMYG3OLcVrhUw/132","nickname":"Geek_d62be1","note":"","ucode":"68EBEBC8B637EB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333772,"discussion_content":"昨天看完basic paxos，我就觉得这里会有活锁，大家抢着注册自己的N，然后要提交的时候发现N刚好被人更新了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607612734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215668,"ip_address":""},"score":333772,"extra":""},{"author":{"id":1500742,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","nickname":"Tesla","note":"","ucode":"98629AFD9861EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613002,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8ZEzZjlpMkibWlbuyablZ4An03be8uGBYqU95yIxQeicHFqnSiaqiaiaTxZRlWSh9R1qMYG3OLcVrhUw/132","nickname":"Geek_d62be1","note":"","ucode":"68EBEBC8B637EB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338903,"discussion_content":"活锁没那么复杂，如果有三个节点，三个节点同时发出编号为1的提议，那么三个节点都会拒绝其他节点的提议（自己手里是编号1不会再同意其他节点的编号1），此时每个节点都只有自己的一票 无法达成一致，需要再次选举，这个过程一直重复就是活锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609415744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215668,"ip_address":""},"score":338903,"extra":""}]}]},{"had_liked":false,"id":194268,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1585044360,"is_pvip":false,"replies":[{"id":"75703","content":"有节点故障容错能力的，当主节点故障时，会选举出新的主节点，保证集群服务的可用。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586018862,"ip_address":"","comment_id":194268,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18764913544","product_id":100046101,"comment_content":"主节点只一个？那存在单点故障的问题","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488798,"discussion_content":"有节点故障容错能力的，当主节点故障时，会选举出新的主节点，保证集群服务的可用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586018862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186473,"user_name":"cp★钊","can_delete":false,"product_type":"c1","uid":1275690,"ip_address":"","ucode":"6B86D4D538BDF7","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","comment_is_top":false,"comment_ctime":1583850074,"is_pvip":false,"replies":[{"id":"77777","content":"加一颗星:)，不需要回滚，只有2个节点写成功了，这时就会有空洞日志，如何处理，与工程实现有关，最终，指令被覆盖，或者指令提交成功，并因客户端重试，导致指令重复提交，那么，因为有状态机，只要实现操作的冥等性，就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587319866,"ip_address":"","comment_id":186473,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18763719258","product_id":100046101,"comment_content":"咨询下，对于写请求，主节会发接受请求发给其余节点，只有其余节点过半操作成功才能返回成功给客户端。这里有个问题是，如果操作没有过半成功，比如6台机器只有两个写成功了，那主节点返回失败给客户端后，是不是还得考虑怎么让那两个写成功的回滚操作？大概可以怎么实现","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486769,"discussion_content":"加一颗星:)，不需要回滚，只有2个节点写成功了，这时就会有空洞日志，如何处理，与工程实现有关，最终，指令被覆盖，或者指令提交成功，并因客户端重试，导致指令重复提交，那么，因为有状态机，只要实现操作的冥等性，就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587319866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318291,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/szNEybCR1Al4p6eDyT8atNjen7ZY9cBJSXOQl1EnrTM2efiaHlPtL7X44JeibXs9qEFLWv6HJWBwq5tVlNahGDGQ/132","nickname":"leixin","note":"","ucode":"9885DF5FB2E136","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546694,"discussion_content":"还是不太明白这种情况 \n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642394048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182910,"user_name":"笑若海","can_delete":false,"product_type":"c1","uid":1283537,"ip_address":"","ucode":"A10EF247EE4B5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/d1/7d3834ef.jpg","comment_is_top":false,"comment_ctime":1582889082,"is_pvip":false,"replies":[{"id":"76518","content":"加一颗星:)，可以这么理解，状态机是一个功能模块，用来处理一系列请求，最大的特点就是确定性，也就是说，对于相同的输入，不管重复运行多少次，最终的内部状态和输出都是相同的。基于状态机，我们可以通过提议新的指令，比如“SET X = 7”，来实现修改X的值的目的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586475199,"ip_address":"","comment_id":182910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18762758266","product_id":100046101,"comment_content":"Chubby是如何解决单机leader的性能的：Chubby的角色定位是提供分布式锁服务，帮助其他应用达成分布式共识，内部存储的都是其他服务如GFS、MapReduce运行所需的元数据信息，数据结构采用类似linux文件系统的结构，每一级目录代表一定级别的锁。按照论文里面测试结果，97%（也可能是99%，记不太清了）以上的服务请求数据大小不超过1k，同时锁是有租约的，租约到期前不需要再发请求可以一直使用，快到期时发请求续租。论文中特别强调不要在Chubby上存储太大数据，有应用因存储1M大小的元数据而性能极差。<br>建议大家有空看看Chubby的论文。<br>另外论文提到了状态机，对状态机的有啥用，为了解决什么问题一直没想明白。","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485502,"discussion_content":"加一颗星:)，可以这么理解，状态机是一个功能模块，用来处理一系列请求，最大的特点就是确定性，也就是说，对于相同的输入，不管重复运行多少次，最终的内部状态和输出都是相同的。基于状态机，我们可以通过提议新的指令，比如“SET X = 7”，来实现修改X的值的目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586475199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182715,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1582855031,"is_pvip":false,"replies":[{"id":"70919","content":"加一颗星:)，性能瓶颈是痛点，共识算法具有容错能力，领导者模型的共识算法，在故障、选举期间，无法执行写操作。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582999526,"ip_address":"","comment_id":182715,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18762724215","product_id":100046101,"comment_content":"<br>只能在主节点读取，存在单机性能和容错问题。","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485424,"discussion_content":"加一颗星:)，性能瓶颈是痛点，共识算法具有容错能力，领导者模型的共识算法，在故障、选举期间，无法执行写操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582999526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181423,"user_name":"sai","can_delete":false,"product_type":"c1","uid":1197678,"ip_address":"","ucode":"66BCC859DE78FB","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/6e/b748c535.jpg","comment_is_top":false,"comment_ctime":1582538227,"is_pvip":false,"replies":[{"id":"76514","content":"加一颗星:)，如何选举领导者，需要我们自己实现，比如，我们可以通过执行Basic Paxos来选举个新的领导者，比如节点B。当节点B当选领导者后，需要先作为学习者，了解目前已被选定的值，这时它执行 Basic Paxos 的准备阶段，就会发现之前选定的值（比如 [y:2]）。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586474207,"ip_address":"","comment_id":181423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18762407411","product_id":100046101,"comment_content":"您好，假设有3台节点 A, B, C. leader 最开始是A, 依次执行写入操作[set x=1, set y=2, set z=3], 假设B和C都有可能超时，根据paxos只需要大多数写入成功就算执行成功的原则，当前状态可能为A:[x:1, y:2, z:3], B:[x:1, z:3], C: [y2, z3]。如果这个时候主节点A宕机，如何重新选择主节点并恢复数据呢？","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484996,"discussion_content":"加一颗星:)，如何选举领导者，需要我们自己实现，比如，我们可以通过执行Basic Paxos来选举个新的领导者，比如节点B。当节点B当选领导者后，需要先作为学习者，了解目前已被选定的值，这时它执行 Basic Paxos 的准备阶段，就会发现之前选定的值（比如 [y:2]）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586474207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184682,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1350363,"ip_address":"","ucode":"A17529E6002E03","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/db/1472ff3c.jpg","comment_is_top":false,"comment_ctime":1583381400,"is_pvip":false,"replies":[{"id":"71430","content":"没有看到特别合适的书，多读论文，多研究源码，多实战吧。学习中遇到问题，欢迎留言，咱们一起讨论:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583389821,"ip_address":"","comment_id":184682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14468283288","product_id":100046101,"comment_content":"老师，能介绍一些关于这方面的书单吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486095,"discussion_content":"没有看到特别合适的书，多读论文，多研究源码，多实战吧。学习中遇到问题，欢迎留言，咱们一起讨论:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583389821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181154,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1582508011,"is_pvip":false,"replies":[{"id":"76382","content":"加一颗星:)，问题1，可以通过其他方式来提升性能，比如升级硬件、分集群；问题2：一般而言，领导者选举是很快的，客户端支持失败重试，就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586379342,"ip_address":"","comment_id":181154,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14467409899","product_id":100046101,"comment_content":"老师好，想问下，如果只有领导者可以发起提案，那么这是不是就退化为串行操作了，这样的话性能怎么保证呢，实际应用中是怎么解决的？我觉得最后问题， Chubby只能在主节点上执行读操作，在读请求量非常大的情况下，也是会遇到瓶颈的，还有就是单点问题，主节点挂了，在选出主节点之前就不能提供服务了对吧，该如果解决这类问题呢？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484940,"discussion_content":"加一颗星:)，问题1，可以通过其他方式来提升性能，比如升级硬件、分集群；问题2：一般而言，领导者选举是很快的，客户端支持失败重试，就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586379342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186287,"discussion_content":"你可以想象leader和每个follower的节点之间都有一条正向的消息队列用来发送提案，又有一条反向的消息队列用来用来回复。客户端评书并不是处理完一个再处理下一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582674506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185387,"discussion_content":"很多实现基于异步非阻塞 + pipeline提高吞吐量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582624503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185602,"discussion_content":"没太懂，每次都是领导者提出决策，然后接收者给出响应，然后在下个决策，这个是串行执行的，老哥你说的异步非阻塞能细说一下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582635809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":185387,"ip_address":""},"score":185602,"extra":""}]}]},{"had_liked":false,"id":206250,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1586829856,"is_pvip":true,"replies":[{"id":"77084","content":"加一颗星:)，提案编号相同，在这种情况下，会出现选票被瓜分的情况。另外，当提案编号不同时，也可能因为多个提议者不断尝试和递增编号，而始终无法提交新提案的情况。当然除了领导者，还有办法能解决这些问题，毕竟解决一个问题，有多种办法。在我看来，领导者能极大简化算法设计，这个理念很常用，比如，在早期设计HA cluster时，我们也设计了领导者选举。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586855136,"ip_address":"","comment_id":206250,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10176764448","product_id":100046101,"comment_content":"原文：一个 5 节点的集群，如果 3 个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如 1 个提议者接收到 1 个准备响应，另外 2 个提议者分别接收到 2 个准备响应）而准备失败，需要重新协商。<br>问题：对于接受准备响应的数量不太理解。<br>前一章老师说过，提议者也是接受者。那么当三个节点中的一个提议者提案时，其他两个提议者是当作当前提议者的接受者来看待吗？这样四个接受者的前提下，对于同一个KV的提案，我考虑了几种情况都能得到最大提案编号达成共识的结果。不知道我理解的有无问题，麻烦老师指点。如果上述方案正确的前提下，不需要引入领导者增加了系统可用性，但是内部请求数依然比较大","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491729,"discussion_content":"加一颗星:)，提案编号相同，在这种情况下，会出现选票被瓜分的情况。另外，当提案编号不同时，也可能因为多个提议者不断尝试和递增编号，而始终无法提交新提案的情况。当然除了领导者，还有办法能解决这些问题，毕竟解决一个问题，有多种办法。在我看来，领导者能极大简化算法设计，这个理念很常用，比如，在早期设计HA cluster时，我们也设计了领导者选举。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586855136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2gRIticwS6CiatsCiaU4QRjAODKibQevrhSciatrmd90lNIZFxywE9yyZgAxKTmWiaBSH4zZUcRIV46qQ/132","nickname":"englefly","note":"","ucode":"E3FCF19E618718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318307,"discussion_content":"“提案编号相同”  两个提议者使用相同的编号提交不同的值吗？Paxos算法不是保证不同提案都有不同的编号吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603702059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187085,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1584009290,"is_pvip":false,"replies":[{"id":"75871","content":"加一颗星:)，需要重新选举，可以通过引入随机超时时间等机制，来减少出现多个提议者、没有“大多数”的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586104171,"ip_address":"","comment_id":187085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173943882","product_id":100046101,"comment_content":"还以为会比上一节理解起来难。原来就处理2问题。一个是没有提议者没有大多数响应，还有一个是通信过多。我这里理解有一个问题。如果对领导节点选择，使用了base paxos算法。假设有5个机器。3个提议者，没出现大多数怎么办？","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486983,"discussion_content":"加一颗星:)，需要重新选举，可以通过引入随机超时时间等机制，来减少出现多个提议者、没有“大多数”的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586104171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185047,"user_name":"波波","can_delete":false,"product_type":"c1","uid":1236305,"ip_address":"","ucode":"847168EE0E7D44","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/51/a7e82963.jpg","comment_is_top":false,"comment_ctime":1583470986,"is_pvip":false,"replies":[{"id":"77558","content":"加一颗星:)，发生领导者切换时，未达成共识的数据，可能会丢失，也可能最终被提交；达成共识的数据，是肯定不会变的。具体的推导，我后面以图例的形式补充下吧。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587148185,"ip_address":"","comment_id":185047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173405578","product_id":100046101,"comment_content":"老师我有个疑问，如果主节点在发送接收请求给其他节点时，刚好第一个节点接受并返回了，主节点想发送给其他节点时挂掉了，这时会重新选举leader，但是之后怎么保证其他节点数据的一致性啊？","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486232,"discussion_content":"加一颗星:)，发生领导者切换时，未达成共识的数据，可能会丢失，也可能最终被提交；达成共识的数据，是肯定不会变的。具体的推导，我后面以图例的形式补充下吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587148185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181482,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1582549349,"is_pvip":false,"replies":[{"id":"70402","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582634609,"ip_address":"","comment_id":181482,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10172483941","product_id":100046101,"comment_content":"Chubby 只能在主节点上执行读写操作, 那么这个主节点就是热点，所有的请求都要经过它，显而易见它就是系统的瓶颈，影响系统的并发度，而且在并发时，写请求会block读请求，影响整个系统的QPS。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485010,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582634609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181138,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1582504047,"is_pvip":false,"replies":[{"id":"71066","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583093217,"ip_address":"","comment_id":181138,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10172438639","product_id":100046101,"comment_content":"如果直接通过多次执行 Basic Paxos 实例来达到共识有两个问题<br>1.如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者收到大多数准备响应，协商失败，这样就需要重新协商<br>2.因为准备阶段和接受阶段会进行两轮RPC通讯，往返消息多，耗性能，延迟大，这是需要优化的<br><br>那如何解决这两个问题呢？<br>1.引入领导者<br>让领导者作为唯一提议者<br>这里涉及到如何选举领导者，不同的算法可以有不同的实现方法<br>Chubby 是通过执行 Basic Paxos算法投票选举<br>Raft通过一个随机倒计时功能，最快得到大多数投票的为领导者<br><br>2.优化 Basic Paxos执行<br>采用当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484932,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583093217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255275,"user_name":"Geek_89bbab","can_delete":false,"product_type":"c1","uid":1156607,"ip_address":"","ucode":"B3110D5B3C9500","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/ff/6201122c.jpg","comment_is_top":false,"comment_ctime":1603292940,"is_pvip":false,"replies":[{"id":"95916","content":"加一颗星:)，在描述的这个场景中，是会出现这种情况。如果对一致性要求高，可以这么实现，“leader接收到读请求时，要和大多数节点确认它是否是leader，如果大多数节点认为它是leader，就响应数据给客户端，反之，不响应数据”，这样就能规避问题中描述的这个情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606556481,"ip_address":"","comment_id":255275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898260236","product_id":100046101,"comment_content":"在leader A没有发生变化的情况下，从leader A这里 get x没有啥问题，但是如果发生网络分区，选取出来的新的leader A&#39; 和旧的leader A不在同一分区。那么这个时候，如果 有客户端client1向新的leader A&#39;发出 set x=10, 然后，客户端client2向旧的leader A发出get x,那么旧的leader A还没有意识到自己已经不在是leader了，返回x=2,这样对吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507665,"discussion_content":"加一颗星:)，在描述的这个场景中，是会出现这种情况。如果对一致性要求高，可以这么实现，“leader接收到读请求时，要和大多数节点确认它是否是leader，如果大多数节点认为它是leader，就响应数据给客户端，反之，不响应数据”，这样就能规避问题中描述的这个情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606556481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220451,"user_name":"左耳朵狮子","can_delete":false,"product_type":"c1","uid":1067280,"ip_address":"","ucode":"095DD787E58967","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/10/af49fa20.jpg","comment_is_top":false,"comment_ctime":1590244938,"is_pvip":false,"replies":[{"id":"87258","content":"加一颗星:)，这个设计与准备阶段的意义有关，具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。可以通过准备阶段的响应来判断。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595343283,"ip_address":"","comment_id":220451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885212234","product_id":100046101,"comment_content":"“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段” 这里的稳定状态是如何定义的？根据什么参数","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496144,"discussion_content":"加一颗星:)，这个设计与准备阶段的意义有关，具体说说，准备阶段的意义，是发现接受者节点上，已经通过的提案的值。可以通过准备阶段的响应来判断。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595343283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200678,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1585636045,"is_pvip":false,"replies":[{"id":"75547","content":"节点的数据是最终一致的，访问非领导者节点执行读操作，不能保证一定能读到最新的数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585933005,"ip_address":"","comment_id":200678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880603341","product_id":100046101,"comment_content":"集群中，既然所有节点数据都一致。读可以扩展到其他节点来读","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490097,"discussion_content":"节点的数据是最终一致的，访问非领导者节点执行读操作，不能保证一定能读到最新的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585933005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192441,"user_name":"小石头","can_delete":false,"product_type":"c1","uid":1690759,"ip_address":"","ucode":"7B2EC4C8C6192F","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/87/2a196164.jpg","comment_is_top":false,"comment_ctime":1584850968,"is_pvip":false,"replies":[{"id":"77184","content":"加一颗星:)，对于同一提案编号值，只有5个准备响应，因为“如果准备请求的提案编号，小于等于接受者已经响应的准备请求的提案编号，那么接受者将承诺不响应这个准备请求”。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586890520,"ip_address":"","comment_id":192441,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5879818264","product_id":100046101,"comment_content":"如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商。你想象一下，一个 5 节点的集群，如果 3 个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如 1 个提议者接收到 1 个准备响应，另外 2 个提议者分别接收到 2 个准备响应）而准备失败，需要重新协商。<br>5个节点的集群就只能发五个准备响应？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488399,"discussion_content":"加一颗星:)，对于同一提案编号值，只有5个准备响应，因为“如果准备请求的提案编号，小于等于接受者已经响应的准备请求的提案编号，那么接受者将承诺不响应这个准备请求”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586890520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467767,"avatar":"https://static001.geekbang.org/account/avatar/00/16/65/77/ad710e3e.jpg","nickname":"luffy","note":"","ucode":"F45BEC4F28671B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219095,"discussion_content":"同问","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585734940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467767,"avatar":"https://static001.geekbang.org/account/avatar/00/16/65/77/ad710e3e.jpg","nickname":"luffy","note":"","ucode":"F45BEC4F28671B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219099,"discussion_content":"不应该是25个响应吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585735050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187327,"user_name":"Theodore","can_delete":false,"product_type":"c1","uid":1055049,"ip_address":"","ucode":"0735C2A64295FC","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/49/9452b2fd.jpg","comment_is_top":false,"comment_ctime":1584084408,"is_pvip":false,"replies":[{"id":"76173","content":"加一颗星:)，如果读多写少，其实可以考虑在集群前面加个内存缓存，作为接入层，提升读并发。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586280374,"ip_address":"","comment_id":187327,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879051704","product_id":100046101,"comment_content":"【Chubby 只能在主节点上执行读操作】这就相当于cap中去了cp，性能约等于单机而且当leader挂掉的一瞬间整个集群是不可用的（缺失的那一部分a）。在实际应用当中往往是读写比8:2，这样做一定程度上讲是很不划算的，优化的话可以参考mongoDB分片算法实现：只有Leader能接收&amp;执行写请求，Leader负责接收读请求并把对应的读请求执行分配到其他节点上","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487076,"discussion_content":"加一颗星:)，如果读多写少，其实可以考虑在集群前面加个内存缓存，作为接入层，提升读并发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586280374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186934,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1583975508,"is_pvip":false,"replies":[{"id":"76029","content":"加一颗星:)，Chubby需要强一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586204735,"ip_address":"","comment_id":186934,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878942804","product_id":100046101,"comment_content":"Chubby只能在主节点上执行读操作，牺牲了客户端读操作的并发性能。是不是偏向于CP模型？强调各节点之间的数据一致性。如果各个节点都开放读操作，那偏向于AP模型。考虑到Chubby是作为一个分布式锁的服务，应该选CP。不知道这样理解漏洞多不多。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486925,"discussion_content":"加一颗星:)，Chubby需要强一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586204735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186049,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1583746447,"is_pvip":false,"replies":[{"id":"76359","content":"加一颗星:)，准备阶段的作用，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586373972,"ip_address":"","comment_id":186049,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878713743","product_id":100046101,"comment_content":"当领导者处于稳定阶段，省略掉了准备阶段，这个是怎么省略的，难道不用发送请求了？确定大多数已经准备好了？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486598,"discussion_content":"加一颗星:)，准备阶段的作用，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶段就没有意义了，也就是可以省掉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586373972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185801,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1583681279,"is_pvip":false,"replies":[{"id":"77559","content":"加一颗星:)，实现强一致性和节点故障容错能力。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587150092,"ip_address":"","comment_id":185801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878648575","product_id":100046101,"comment_content":"老师问个问题 在您举的读写的例子中 如果不选举领导者 每次读写 都需要使用paxos算法 这样做的目的是什么？选举完领导者后 每次读写先调用领导者 这是把paxos算法 用作负载均衡了吗?这个章节的例子 使我对paxos的使用场景了产生了困惑,麻烦老师解答下","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486506,"discussion_content":"加一颗星:)，实现强一致性和节点故障容错能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587150092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183985,"user_name":"Geek_3c4fe8","can_delete":false,"product_type":"c1","uid":1360228,"ip_address":"","ucode":"42636A9F45380E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXc8qAOdS2KcB1TKSL77LD6n8YJMh0QglIyBFTHPeUWFmddictXncWyedDiaQxeg04rFJS36eLetQQ/132","comment_is_top":false,"comment_ctime":1583196944,"is_pvip":false,"replies":[{"id":"76624","content":"加一颗星:)，区块链需要拜占庭容错能力，在14讲有说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586518511,"ip_address":"","comment_id":183985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878164240","product_id":100046101,"comment_content":"老师，像区块链这种庞大节点数的分布式系统，通过学习您的内容，我能感受到相同之处，但好奇它是怎么在这么多的节点中达成共识的？挖矿的节点相当于在对新的区块达成共识，那么这些节点就是在基于Pow等算法。这个后面会讲到吗老师？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485842,"discussion_content":"加一颗星:)，区块链需要拜占庭容错能力，在14讲有说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586518511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182852,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1582876199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877843495","product_id":100046101,"comment_content":"相当于集群中只有一个节点可以对外提供服务，tps、qps只有单机的能力，但是即使主节点挂了，还可以重新选举leader继续对外提供服务，是高可用的，kafka也是这种模式。<br>","like_count":1},{"had_liked":false,"id":182838,"user_name":"XHH","can_delete":false,"product_type":"c1","uid":1179952,"ip_address":"","ucode":"3EF89099982977","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/30/cb3a729e.jpg","comment_is_top":false,"comment_ctime":1582873744,"is_pvip":false,"replies":[{"id":"70758","content":"不是2PC哈，和2PC也没关系，leader限制了集群的写入性能:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582923891,"ip_address":"","comment_id":182838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877841040","product_id":100046101,"comment_content":"如果只有一个leader是不是就退变成2PC了","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485466,"discussion_content":"不是2PC哈，和2PC也没关系，leader限制了集群的写入性能:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582923891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182319,"user_name":"nestle","can_delete":false,"product_type":"c1","uid":1762252,"ip_address":"","ucode":"469800BED81B54","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","comment_is_top":false,"comment_ctime":1582768378,"is_pvip":false,"replies":[{"id":"70606","content":"有类似的优化，比如，在Raft中，日志以领导者为准，就彻底不需要“准备阶段”了，直接复制到其他节点上。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582778061,"ip_address":"","comment_id":182319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877735674","product_id":100046101,"comment_content":"“当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段”。<br>老师，请问标准的ZAB和Raft算法，是不是没有这个优化呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485305,"discussion_content":"有类似的优化，比如，在Raft中，日志以领导者为准，就彻底不需要“准备阶段”了，直接复制到其他节点上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582778061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182215,"user_name":"颉","can_delete":false,"product_type":"c1","uid":1147843,"ip_address":"","ucode":"2DCF7391851427","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/c3/7bca8cbf.jpg","comment_is_top":false,"comment_ctime":1582729845,"is_pvip":false,"replies":[{"id":"70921","content":"是的，在实际代码实现时，要设计避免机制，可以参考下Raft领导者选举的实现（07讲）:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583006648,"ip_address":"","comment_id":182215,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877697141","product_id":100046101,"comment_content":"请教老师 “主节点（也就是领导者节点）是通过执行 Basic Paxos 算法，进行投票选举产生的。”既然主节点 通过basic paxos选举 那选主节点这个过程不是一样有票数不过半的问题吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485255,"discussion_content":"是的，在实际代码实现时，要设计避免机制，可以参考下Raft领导者选举的实现（07讲）:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583006648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181856,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1582645990,"is_pvip":false,"replies":[{"id":"76378","content":"加一颗星:)，这种架构设计，是为了实现强一致性和节点故障容错。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586378655,"ip_address":"","comment_id":181856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877613286","product_id":100046101,"comment_content":"Chubby的multi paxos算法中读操作和写操作都是单机，只能由领导者完成，其他节点在领导者正常的时候只能起到容灾的作用，无法进行并发的，因此并不能完全体现出分布式系统可以带来的性能优势。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485144,"discussion_content":"加一颗星:)，这种架构设计，是为了实现强一致性和节点故障容错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586378655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181724,"user_name":"zjm_tmac","can_delete":false,"product_type":"c1","uid":1849621,"ip_address":"","ucode":"5E1DE9A815A98B","user_header":"","comment_is_top":false,"comment_ctime":1582624617,"is_pvip":false,"replies":[{"id":"70400","content":"多个值，更确切的说，是一系列值，是需要多次执行Basic Paxos实例的，文中也反复提到了哈。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582634412,"ip_address":"","comment_id":181724,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877591913","product_id":100046101,"comment_content":"看了下微信的PhxPaxos实现文章，确定多个值是通过多组paxos实例完成的，这篇文章好像没提高，到底是多组实例还是一组实例呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485096,"discussion_content":"多个值，更确切的说，是一系列值，是需要多次执行Basic Paxos实例的，文中也反复提到了哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582634412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181453,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1582542885,"is_pvip":true,"replies":[{"id":"70418","content":"关于稳定状态，我在置顶留言中，做个了补充，看看这个哈。<br>直白的说，Multi-Paxos，就是多次执行Basic Paxos实例，来实现一系列值的共识的，同时主要做了2个优化，引入领导者，和“当领导者处于稳定状态时，省掉准备阶段”。但Multi-Paxos不仅缺失必须的算法细节，而且非常难理解。我推荐的一种学习方式，是先理解了Raft，再回头看Multi-Paxos。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582641824,"ip_address":"","comment_id":181453,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877510181","product_id":100046101,"comment_content":"老师你好！<br>1. 领导者处于稳定状态是指当前只有一个领导者吗?<br>2. BasicPaxos只能就一个值达成一致 那么能详细讲讲MultiPaxos是怎么让一系列值打成一致的吗?","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485004,"discussion_content":"关于稳定状态，我在置顶留言中，做个了补充，看看这个哈。\n直白的说，Multi-Paxos，就是多次执行Basic Paxos实例，来实现一系列值的共识的，同时主要做了2个优化，引入领导者，和“当领导者处于稳定状态时，省掉准备阶段”。但Multi-Paxos不仅缺失必须的算法细节，而且非常难理解。我推荐的一种学习方式，是先理解了Raft，再回头看Multi-Paxos。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582641824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181385,"user_name":"sword@zh","can_delete":false,"product_type":"c1","uid":1336330,"ip_address":"","ucode":"FE32F36DA0E67F","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/0a/0811e623.jpg","comment_is_top":false,"comment_ctime":1582532738,"is_pvip":false,"replies":[{"id":"76513","content":"加一颗星:)，会的，这里列举的是提案编号相同时选票被瓜分的异常情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586473679,"ip_address":"","comment_id":181385,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5877500034","product_id":100046101,"comment_content":"“如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商。”<br><br>根据上文的介绍，接受者会接受提案编号最大的提案吧？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484983,"discussion_content":"加一颗星:)，会的，这里列举的是提案编号相同时选票被瓜分的异常情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586473679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179952,"avatar":"https://static001.geekbang.org/account/avatar/00/12/01/30/cb3a729e.jpg","nickname":"XHH","note":"","ucode":"3EF89099982977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189373,"discussion_content":"提案冲突就会导致增加多轮提案协商，也就是导致性能下降","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582873994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762252,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/cc/0947ff0b.jpg","nickname":"nestle","note":"","ucode":"469800BED81B54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187805,"discussion_content":"Basic Paxos最大的问题应该是会产生活锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582769841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1784256,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/39/c0/9c465545.jpg","nickname":"wchb","note":"","ucode":"49D94DFC61E9DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185154,"discussion_content":"个人理解， 准备阶段这是让接收者保证不接受比当前提案号更小的提案，我觉得这里写的有些模糊。“失败”这个词我觉得用的不是很好。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582598976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181225,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1582521864,"is_pvip":false,"replies":[{"id":"76379","content":"加一颗星:)，领导者选举是很快的，只要客户端支持重试，就不会导致可用性问题和写请求丢失。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586378813,"ip_address":"","comment_id":181225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877489160","product_id":100046101,"comment_content":"局限在于读写都是在主节点进行，性能相当于单机。假设主节点down机，需要重新选取主节点，此时如果发生大量读写请求，性能问题突显，可能会导致系统不可用，写请求可能丢失。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484964,"discussion_content":"加一颗星:)，领导者选举是很快的，只要客户端支持重试，就不会导致可用性问题和写请求丢失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586378813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181168,"user_name":"Jialin","can_delete":false,"product_type":"c1","uid":1112955,"ip_address":"","ucode":"12583269732A75","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","comment_is_top":false,"comment_ctime":1582510476,"is_pvip":false,"replies":[{"id":"76380","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586378829,"ip_address":"","comment_id":181168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877477772","product_id":100046101,"comment_content":"Chubby 只能在主节点上执行读操作，这个设计导致高并发情况下读操作的吞吐量受到限制，影响系统的可用性，但是保证了读数据一致性问题。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484944,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586378829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181156,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1582508644,"is_pvip":false,"replies":[{"id":"76381","content":"加一颗星:)，访问量，会导致leader过载，但不会导致leader挂掉；如果访问非leader执行读操作，会读到旧数据的，也就是无法实现强一致性的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586378997,"ip_address":"","comment_id":181156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877475940","product_id":100046101,"comment_content":"只能在主节点上执行读操作,有什么缺陷呢？<br>这样就相当于单机CA了，在大量读取操作时候，可能会使leader挂掉，导致服务不可用。<br>要解决这个问题，就得写的时候由leader进行提交。读的时候由所有节点都可以响应。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484941,"discussion_content":"加一颗星:)，访问量，会导致leader过载，但不会导致leader挂掉；如果访问非leader执行读操作，会读到旧数据的，也就是无法实现强一致性的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586378997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359219,"user_name":"Geek_4c861c","can_delete":false,"product_type":"c1","uid":2757724,"ip_address":"北京","ucode":"71464EC29C035F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Lib8iaCINXANIsGGDKbXcxOicjuLeKKD7o5ibGQl4xaPgiaNd2MOjiczdfCyZETXfGvY42H75Qg6QdnhG8FXc84kvkiag/132","comment_is_top":false,"comment_ctime":1665336727,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665336727","product_id":100046101,"comment_content":"这样不就变成了普通的主从架构吗,就算加上了自动选举的能力,我觉得和完善高可用的分布式系统还是相距甚远","like_count":0},{"had_liked":false,"id":337556,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1646892279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646892279","product_id":100046101,"comment_content":"主节点只能读的话,那么主节点挂掉则不能读写.要是多节点都能读的话,期间还是可以提供读的.","like_count":0},{"had_liked":false,"id":331044,"user_name":"leixin","can_delete":false,"product_type":"c1","uid":1318291,"ip_address":"","ucode":"9885DF5FB2E136","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/szNEybCR1Al4p6eDyT8atNjen7ZY9cBJSXOQl1EnrTM2efiaHlPtL7X44JeibXs9qEFLWv6HJWBwq5tVlNahGDGQ/132","comment_is_top":false,"comment_ctime":1642394341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642394341","product_id":100046101,"comment_content":"老师好， 上一讲， 看到老师说 Basic Paxos 不能修改某个值， 并且补充说: &quot;Basic Paxos解决的单值的共识的问题，如果需要就一系列值达成共识，就多执行几次Basic Paxos，也就是Multi Paxos。如果，多个key，需要反复修改时，之前的共识是不能修改的，可以在之前的共识的基础之上，实现新的指令，在提交给状态机后，就可以修改value了&quot;, 我看了 Multi Paxos 还是不太明白具体是怎么去做的？实现新的指令？能不能结合具体场景详细描述下？","like_count":0},{"had_liked":false,"id":319197,"user_name":"dobby","can_delete":false,"product_type":"c1","uid":2549097,"ip_address":"","ucode":"9C1992C4DD28F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoib6BjEV4KPEaIdlLEfoVFRCxCSlL2XaIVDiaakvjhWEibibym323ZeHXAY46JMO3nSHmjiaWtAY47eww/132","comment_is_top":false,"comment_ctime":1635666977,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635666977","product_id":100046101,"comment_content":"老是请问读写都在主节点完成，这和单机好像没什么区别呢。这样的分布式实现有什么意义么、","like_count":0},{"had_liked":false,"id":317249,"user_name":"克里斯","can_delete":false,"product_type":"c1","uid":1181844,"ip_address":"","ucode":"00B755C10AC1C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/94/2c22bd4e.jpg","comment_is_top":false,"comment_ctime":1634720703,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634720703","product_id":100046101,"comment_content":"这个课程比较纯理论，和常用分布式系统结合其他讲理论会更好","like_count":0},{"had_liked":false,"id":316631,"user_name":"LWD","can_delete":false,"product_type":"c1","uid":1986739,"ip_address":"","ucode":"DDA444DB113C01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","comment_is_top":false,"comment_ctime":1634463518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634463518","product_id":100046101,"comment_content":"感觉这里的强一致性实现的原因只是在于读写操作都是在主节点进行的。跟这个算法好像没有一点关系。只能说这个算法提供了主节点宕机该如何选举新的主节点机制。。那对于普通的读写操作也要走这个算法逻辑吗？该怎么理解呢？有点乱","like_count":0},{"had_liked":false,"id":316628,"user_name":"LWD","can_delete":false,"product_type":"c1","uid":1986739,"ip_address":"","ucode":"DDA444DB113C01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","comment_is_top":false,"comment_ctime":1634461402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634461402","product_id":100046101,"comment_content":"作者大大你好。文章说在 Chubby 中，为了实现了强一致性，读操作也只能在主节点上执行。既然读写操作都只能在主节点执行,那多台服务器不就起不到分摊流量的作用了吗,最多充当数据副本的作用而已。。这个设计要怎么理解呢？","like_count":0},{"had_liked":false,"id":312292,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1631719315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631719315","product_id":100046101,"comment_content":"上一节课的内容：<br>另一个是 Multi-Paxos 思想，描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。<br><br><br>还是没明白这提到的『一系列值』，一系列的值具体代表什么？能举个例子么？为什么执行多个 Basic Paxos 实例就能达成共识？<br><br>谢谢老师！","like_count":0},{"had_liked":false,"id":306144,"user_name":"乘修","can_delete":false,"product_type":"c1","uid":1745932,"ip_address":"","ucode":"45FB065DDD94D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a4/0c/be3ac2ca.jpg","comment_is_top":false,"comment_ctime":1628405269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628405269","product_id":100046101,"comment_content":"当一个集群所有的节点,只有领导者节点进行读写,那么其他节点存储数据一般用于进行什么工作,仅仅就只能作为备份使用?那么是否在某种程度上,领导者节点成为了分布式系统的性能瓶颈?","like_count":0},{"had_liked":false,"id":300566,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1625218977,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625218977","product_id":100046101,"comment_content":"MySQL Group Replication 也是基于 Paxos 算法，应该算是mutl-Paxos ，但是它存在两种状态，即单主和多主， 感觉单主 类似于Chubby ，而多主我不确定什么类型","like_count":0},{"had_liked":false,"id":300560,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1625218159,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625218159","product_id":100046101,"comment_content":"Chubby 这个发音有点意思","like_count":0},{"had_liked":false,"id":294397,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1621927963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621927963","product_id":100046101,"comment_content":"如何理解领导者节点上的命令是最新的，是按提案编号的大小来确定吗？提案越大的，命令最新？一般实际应用中，这个提案编号的生成是在客户端还是领导者节点上生成的？应该是领导者节点吗？","like_count":0},{"had_liked":false,"id":291451,"user_name":"小马过河","can_delete":false,"product_type":"c1","uid":1476665,"ip_address":"","ucode":"89451C0545EA11","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/39/d420a588.jpg","comment_is_top":false,"comment_ctime":1620292084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620292084","product_id":100046101,"comment_content":"在简化成只有一个领导者的时候，paxos算法和主从同步复制的数据一致性相对，有什么区别或者优势呢？感觉通过主从复制的达成一致性会更加简单直接。求老师指点，多谢了！！！","like_count":0},{"had_liked":false,"id":281147,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1397271,"ip_address":"","ucode":"B62BEA525A64A1","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/17/083d67fb.jpg","comment_is_top":false,"comment_ctime":1614594909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614594909","product_id":100046101,"comment_content":"&quot;经过上节课的学习，你应该知道，Basic Paxos 只能就单个值（Value）达成共识，一旦遇到为一系列的值实现共识的时候，它就不管用了&quot;<br>-----<br>1. 老师请问这句话啥意思？ 为什么只能就单个值达成共识 ？<br><br>2. Muti-Paxos 与 Paxos 主要区别？ <br><br>- Muti-Paxos  只有一个Proposer， 从而省掉了准备阶段。 <br><br>3. Muti-Paxos 与 Raft 区别？ <br><br>Raft思想和 Muti-Paxos 是一致的, 并且提出了Leader 选举算法， 抽象了 Leader, condidate ,follower角色。 <br><br>老师， 理解的对吗？ ","like_count":0},{"had_liked":false,"id":275774,"user_name":"Geek_b52974","can_delete":false,"product_type":"c1","uid":1298252,"ip_address":"","ucode":"59884399646620","user_header":"","comment_is_top":false,"comment_ctime":1611664295,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1611664295","product_id":100046101,"comment_content":"看到有些人说这样会有单点故障的问题，还有瓶颈在于leader，解法是不是可以做数据切片，例如 a~f key由 1 节点做leader，g-e 由 2 当 leader以此类推，这样既有容错的能力，又增加承载量","like_count":0},{"had_liked":false,"id":267825,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1607946407,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607946407","product_id":100046101,"comment_content":"互联网的很多系统都是读多写少的，而且要求可用性比要求强一致性的要高很多，读都在主节点，第一个会降低可用性，当主节点故障以后，必须要等到选举出新的主节点才能提供读写服务。第二个是限制了扩展能力，读写都在单机，性能只能约等于单机的性能。大大降低了扩展能力","like_count":0},{"had_liked":false,"id":256669,"user_name":"englefly","can_delete":false,"product_type":"c1","uid":1145907,"ip_address":"","ucode":"E3FCF19E618718","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2gRIticwS6CiatsCiaU4QRjAODKibQevrhSciatrmd90lNIZFxywE9yyZgAxKTmWiaBSH4zZUcRIV46qQ/132","comment_is_top":false,"comment_ctime":1603701861,"is_pvip":false,"replies":[{"id":"96018","content":"加一颗星:)，1. 是的，所以需要引入新的手段来避免提案编号冲突，比如Raft引入“随机超时时间”来弱化“任期编号冲突”。2. 比如多个提议者的提案编号相同。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606645888,"ip_address":"","comment_id":256669,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603701861","product_id":100046101,"comment_content":"&quot;如果多个提议者同时提交提案，可能出现因为提案编号冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商&quot;<br>1. 请问“提案编号冲突”是什么意思？两个提议者使用了相同的提案编号吗？但我理解这个编号是通过别的手段保证了严格单调自增的。<br>2. 关于“瓜分”准备响应的问题，我理解编号最大的提议者最终总会收到过半的准备响应。能否给出一个反例呢？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508078,"discussion_content":"加一颗星:)，1. 是的，所以需要引入新的手段来避免提案编号冲突，比如Raft引入“随机超时时间”来弱化“任期编号冲突”。2. 比如多个提议者的提案编号相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606645888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255238,"user_name":"Geek_89bbab","can_delete":false,"product_type":"c1","uid":1156607,"ip_address":"","ucode":"B3110D5B3C9500","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/ff/6201122c.jpg","comment_is_top":false,"comment_ctime":1603288584,"is_pvip":false,"replies":[{"id":"95917","content":"加一颗星:)，在《结束语：静下心来，享受技术的乐趣》中，有推荐资料和相应链接。如果有其他需求，在留言区留言，我来补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606556672,"ip_address":"","comment_id":255238,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603288584","product_id":100046101,"comment_content":"希望老师给出一些参考论文的地址，谢谢了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507655,"discussion_content":"加一颗星:)，在《结束语：静下心来，享受技术的乐趣》中，有推荐资料和相应链接。如果有其他需求，在留言区留言，我来补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606556672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244337,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1084291,"ip_address":"","ucode":"55FF703DE772D7","user_header":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","comment_is_top":false,"comment_ctime":1598488399,"is_pvip":false,"replies":[{"id":"89990","content":"加一颗星:)，是的","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1598531588,"ip_address":"","comment_id":244337,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598488399","product_id":100046101,"comment_content":"只允许主节点读，是为了实现强一致吧","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504555,"discussion_content":"加一颗星:)，是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598531588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241419,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597289007,"is_pvip":false,"replies":[{"id":"95923","content":"加一颗星:)，共识算法解决的是一致性和可用性，性能，可以通过其他方法来提升，比如分集群等。打造一套“大系统”，需要多个技术手段组合使用。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606564835,"ip_address":"","comment_id":241419,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597289007","product_id":100046101,"comment_content":"这样的话,整体的设计就意义不大了,我们之所以使用分布式系统,其意义在于,提高吞吐量,但是如果只能在主节点操作,那么本质上还是一个单机系统,不过数据有了对应的备份罢了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503738,"discussion_content":"加一颗星:)，共识算法解决的是一致性和可用性，性能，可以通过其他方法来提升，比如分集群等。打造一套“大系统”，需要多个技术手段组合使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606564835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239838,"user_name":"而立","can_delete":false,"product_type":"c1","uid":1047589,"ip_address":"","ucode":"E3274C04BB6E83","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/25/20ccf994.jpg","comment_is_top":false,"comment_ctime":1596675763,"is_pvip":false,"replies":[{"id":"92468","content":"加一颗星:)，是的，这个方案在提供强一致性的同时，保证服务的可用性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602600527,"ip_address":"","comment_id":239838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596675763","product_id":100046101,"comment_content":"感觉Chubby的实现方案里，非主节点存在的意义就仅仅是等待主节点挂掉之后，成为主节点。<br>对于系统容量，读写性能都没有什么帮助。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503244,"discussion_content":"加一颗星:)，是的，这个方案在提供强一致性的同时，保证服务的可用性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602600527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238559,"user_name":"不会爬树的熊","can_delete":false,"product_type":"c1","uid":1499380,"ip_address":"","ucode":"E417D8D9D5FED2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6vz8MgZia6Xwdhayv9Jdnee7HfDYSAMTUtMAAVORMhiaN8bIM0QJibrQ5EDqB8o5pWE6FRuaqguwG86o5Gh90ruDw/132","comment_is_top":false,"comment_ctime":1596198406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596198406","product_id":100046101,"comment_content":"在 Chubby 中，主节点是通过执行 Basic Paxos 算法，进行投票选举产生的<br><br>能大概描述一下这个过程么？","like_count":0},{"had_liked":false,"id":229585,"user_name":"贰的11次方","can_delete":false,"product_type":"c1","uid":1813810,"ip_address":"","ucode":"73299BAA100131","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ad/32/8d4ca29e.jpg","comment_is_top":false,"comment_ctime":1593066380,"is_pvip":false,"replies":[{"id":"88048","content":"加一颗星:)，问题1：一系列值，就是多个值；问题2：这是兰伯特的设计，Basic Paxos解决的是单值的共识，而Multi-Paxos（多个Basic Paxos）解决的是一系列值的共识；问题3：可以的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596135738,"ip_address":"","comment_id":229585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593066380","product_id":100046101,"comment_content":"老师，我在看到本节课时产生了几个疑问点，希望老师解答。<br>1、什么是一系列值？是指多个变量吗？<br>2、为什么basic-paxos算法不支持一系列值的共识，是因为兰伯特设计要求如此吗？还是说有其他的限制<br>3、basic-paxos 算法的提议者可以同时作为接受者吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499547,"discussion_content":"加一颗星:)，问题1：一系列值，就是多个值；问题2：这是兰伯特的设计，Basic Paxos解决的是单值的共识，而Multi-Paxos（多个Basic Paxos）解决的是一系列值的共识；问题3：可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596135738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191789,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1584796725,"is_pvip":false,"replies":[{"id":"77187","content":"加一颗星:)，这就是共识算法的优势，即具有“少数”节点故障容错能力，也能实现强一致性，因为“大多数”节点达成共识的值，是不会再改变的，再结合领导者选举、日志同步，是能保证不会读到旧数据的，也就是实现强一致性。因为Chubby的multi-paxos实现是闭源的，更多细节，可以参考Raft的设计和实现。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586891541,"ip_address":"","comment_id":191789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584796725","product_id":100046101,"comment_content":"有个疑问，Multi-Paxos算法的读写都在集中在领导者，而领导者又只有一个，这么一来，其它节点就只起到备份，当领导者出现故障时替换领导者的作用了？不然就无法实现高可用了。但Chubby这种实现却是强一致，强一致只能是单机的情况了，这样如果用其它节点做备份，也会因为网络延时或故障而导致数据不是强一致，所以，其它节点看起来就没什么用了，不解。。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488258,"discussion_content":"加一颗星:)，这就是共识算法的优势，即具有“少数”节点故障容错能力，也能实现强一致性，因为“大多数”节点达成共识的值，是不会再改变的，再结合领导者选举、日志同步，是能保证不会读到旧数据的，也就是实现强一致性。因为Chubby的multi-paxos实现是闭源的，更多细节，可以参考Raft的设计和实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586891541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183197,"user_name":"Geek_niu","can_delete":false,"product_type":"c1","uid":1856903,"ip_address":"","ucode":"9C02ACC12F2D4B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Uv4icib4ZLZVa4RTW7CUibJAh6h23IPM5eiaibKzlmZfxWPWibUmAmxmnpafsesQiazcy5TtghOFwaMgppv58gbAgnRicA/132","comment_is_top":false,"comment_ctime":1582970327,"is_pvip":false,"replies":[{"id":"70899","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582986493,"ip_address":"","comment_id":183197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582970327","product_id":100046101,"comment_content":"Chubby 只能在主节点上执行读操作，效果相当于单机，并发性能差","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485595,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582986493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}