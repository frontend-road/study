{"id":696610,"title":"08｜反射机制：给你一把打开JVM后门的钥匙","content":"<p>你好，我是康杨，今天我们来聊聊JVM中的反射机制。</p><p>在有反射之前，JVM对我们来说就像是一个黑盒。我们与它的交互，仅仅是在编译期之前，我们遵照Java语法写了一段程序，之后JVM如何编译，运行期如何执行我们不得而知，也和我们无关。这就像我们进入一家饭店 ，服务员递给我们一份菜单，我们能做的就是照着菜单去点菜，对于普通的消费者，一份精美菜单已经足够了。</p><p>就像下面这段代码 ，我们不需要做任何事情，构造器不用传入任何参数，就能得到一份蘸酱小黄瓜。</p><pre><code class=\"language-java\">// 蘸酱小黄瓜\npublic class DippedSauceCucumbers {\n&nbsp;&nbsp;&nbsp; private String&nbsp; mainIngredient = \"黄瓜\";\n&nbsp;&nbsp;&nbsp; private String &nbsp;dippingSauce = \"豆瓣酱\";\n&nbsp;&nbsp;&nbsp; private String &nbsp;menu =\"\";\n&nbsp;\n&nbsp;&nbsp;&nbsp; public DippedSauceCucumbers() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setMenu();\n&nbsp;&nbsp;&nbsp; }\n&nbsp; &nbsp; // 设置菜单\n&nbsp;&nbsp;&nbsp; private void&nbsp; setMenu() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu = \"蘸酱小黄瓜{\" +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"mainIngredient='\" + mainIngredient + '\\'' +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \", dippingSauce='\" + dippingSauce + '\\'' +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '}';\n&nbsp;&nbsp;&nbsp; }\n&nbsp; &nbsp; // 打印菜单\n&nbsp;&nbsp;&nbsp; public void printMenu(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.printf(menu);\n&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; public static void main(String[] args) throws&nbsp; Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DippedSauceCucumbers dippedSauceCucumbers = new DippedSauceCucumbers();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dippedSauceCucumbers.printMenu();\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><!-- [[[read_end]]] --><p>运行上面的代码输出的结果如下：</p><pre><code class=\"language-java\">蘸酱小黄瓜{mainIngredient='黄瓜', dippingSauce='豆瓣酱’}\n</code></pre><p>但如果你希望菜单中的蘸酱小黄瓜不是豆瓣酱，而是沙拉酱，通常情况下很难得到满足。就像上面的DippedSauceCucumbers类 ，其中的dippingSauce字段，也就是酱料的属性，没有提供给我们任何改变的入口。<br>\n但是，假如你获得了进入后厨的权利，情况就完全不一样了，你可以基于厨房已有的所有食材和设施按需定制。</p><p>而如果你进一步得到许可，能够基于厨房已有的能力，打造属于自己的菜单，并提供外卖的服务，那就相当于你拥有了一个属于自己的厨房，而且是在现有的厨房的设施和能力基础之上的。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/5f/6811af7dea9c89bcbe8ab1bcf5643b5f.png?wh=1920x1094\" alt=\"图片\"></p><p>其实这就是我们开篇词里说的使用JVM的三层境界。我们熟悉的 Spring 框架就是图中的第三层境界，它就是基于JVM这个机器的能力打造的一个全新的机器。而理论上你也可以继续基于Spring提供的能力，打造专注于某个特定领域的图灵机。</p><p>当然，在此之前你需要熟练掌握JVM的反射机制，因为不管是使用JVM的第二层境界还是第三层境界，都离不开今天的主角： 反射机制。</p><h2>反射是什么？</h2><p>反射（Reflection）是JVM提供的运行时机制 ，它允许程序在<strong>运行期</strong>借助&nbsp;Reflection API 动态加载类或获取任何类的内部信息，动态创建对象并调用其属性，即使对象类型在编译期还是未知的。而我们通常写的程序，对象的类型是在编译期就确定下来的。就像上面说到的饭店的菜单，每道菜品是固定的，无法变更。</p><p>而反射赋予了我们动态创建菜品和调整菜品的能力。所以说，虽然Java是一种静态语言，但是<strong>反射机制的存在使Java也具有了动态性</strong>，具备了运行时自我认知的能力。这样我们就可以在运行时观察甚至修改JVM的行为。就像进入饭店的后厨，可以观察甚至调整我们的菜品。</p><p>JVM的反射机制主要为我们提供了八种能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/97/39115c4b5b36ae66951f56052d1aca97.png?wh=1920x1214\" alt=\"图片\"></p><h2>反射的实现原理</h2><p>反射机制的实现依赖于我们前两节课讲过的类加载机制，我们知道类加载的结果，除了把类的.class&nbsp;文件中的二进制数据读入内存，并放到运行时数据区的方法区，JVM还为我们在堆上创建了一个java.lang.Class&nbsp;对象，用来封装类在方法区内的数据结构，并且向我们提供了访问方法区内的数据结构的接口。</p><p>这个Class对象就是反射机制的核心，它就像打开JVM这个厨房的钥匙，赋予了我们打造专属于自己的菜品的能力。是不是感觉很酷，那我们应该怎么更好地利用这种能力呢？</p><h2>反射API</h2><p>这种动态的能力是反射的API提供给我们的。除了java.lang.Class类，反射API主要集中在java.lang.reflect包中。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/ae/75ab73d599f94c9f57481593545f59ae.png?wh=1920x1042\" alt=\"图片\"></p><p><img src=\"https://static001.geekbang.org/resource/image/1d/41/1dbe246e0a292bae6cddae3d650ace41.jpg?wh=2512x1316\" alt=\"\"></p><h2><strong>反射执行步骤</strong></h2><p>有了上述API ，我们可以按下面的步骤完成反射机制的调用。</p><ol>\n<li>我们需要先获取想要操作的类的 Class 对象。</li>\n<li>通过调用 Class 类中的方法，获得我们需要的Method、Field类对象。</li>\n<li>借助反射API，操作这些对象，完成定制。</li>\n</ol><p>现在，掌握了反射的力量，我们终于可以打造沙拉酱版的蘸酱小黄瓜。</p><pre><code class=\"language-java\">// 沙拉酱版本的蘸酱小黄瓜\npublic static&nbsp; DippedSauceCucumbers&nbsp; createCustomizedFood() throws Exception{\n&nbsp;\n&nbsp; &nbsp; //第一步：获取Class对象，就像拿到了进入饭店后厨的钥匙\n&nbsp;&nbsp;&nbsp; Class dippedSauceCucumbersClass = DippedSauceCucumbers.class;\n&nbsp;\n&nbsp; &nbsp; //第二步：用反射的方式生产一个DippedSauceCucumbers对象，就像我们去后厨自己做了一份蘸酱小黄瓜\n&nbsp;&nbsp;&nbsp; Object dippedSauceCucumbers = dippedSauceCucumbersClass.newInstance();\n&nbsp;\n&nbsp; &nbsp; //第三步：因为已经身在厨房，我们可以随意调换成我们喜欢的酱料，小小的菜单已经不能约束我们丰富的想象力了 ^_^\n&nbsp;&nbsp;&nbsp; Field dippingSauceField = dippedSauceCucumbersClass.getDeclaredField(\"dippingSauce\");\n&nbsp;&nbsp;&nbsp; dippingSauceField.setAccessible(true);\n&nbsp;&nbsp;&nbsp; dippingSauceField.set(dippedSauceCucumbers,\"沙拉酱\");\n&nbsp;\n&nbsp; &nbsp; //第四步：基于我们调换的酱料，重新生成沙拉酱版本的蘸酱小黄瓜的菜单\n&nbsp;&nbsp;&nbsp; Method setMenuMethod = dippedSauceCucumbersClass.getDeclaredMethod(\"setMenu\");\n&nbsp;&nbsp;&nbsp; setMenuMethod.setAccessible(true);\n&nbsp;&nbsp;&nbsp; setMenuMethod.invoke(dippedSauceCucumbers);\n&nbsp;\n&nbsp;&nbsp;&nbsp; return&nbsp; (DippedSauceCucumbers)dippedSauceCucumbers;\n}\n&nbsp;\npublic static void main(String[] args) throws&nbsp; Exception {\n&nbsp;&nbsp;&nbsp; DippedSauceCucumbers dippedSauceCucumbers =&nbsp; DippedSauceCucumbers.createCustomizedFood();\n&nbsp;&nbsp;&nbsp; dippedSauceCucumbers.printMenu();\n}\n</code></pre><p>运行结果：</p><pre><code class=\"language-java\">蘸酱小黄瓜{mainIngredient='黄瓜', dippingSauce='沙拉酱’}&nbsp;\n</code></pre><p>借助反射，我们终于得到了我们想要的沙拉酱版本的蘸酱小黄瓜。既然反射这么强大，它还具备哪些能力呢？让我们一起深挖一下。</p><h2>反射API详解</h2><h3>Java.lang.Class</h3><p>首先我们来了解下Java.lang.Class，作为反射机制的核心，它也是我们使用反射机制的入口，就像我们进入饭店后厨的那把钥匙。</p><h4>获取Class对象</h4><p>获得这把钥匙的方式有3种。</p><ol>\n<li>Class.forName</li>\n</ol><p>使用 Class 类的静态方法 forName(String className)，这种方法需要传入类的全限定名，可以动态加载类，并触发静态代码块的执行，一般用于加载驱动和框架的底层操作。但是因为这个方法可能会抛出ClassNotFoundException异常，所以你需要处理这种可能性，看一下我给出的示例代码。</p><pre><code class=\"language-java\">try {\n&nbsp;&nbsp;&nbsp; Class clazz = Class.forName(\"com.restaurant.DippedSauceCucumbers\");\n&nbsp;&nbsp;&nbsp; System.out.println(\"Full name of DippedSauceCucumbers class is: \" + clazz.getName());\n} catch(ClassNotFoundException e) {\n&nbsp;&nbsp;&nbsp; e.printStackTrace();\n}\n</code></pre><ol start=\"2\">\n<li>.class语法</li>\n</ol><p>对于任何类型的.class都可以获取对应的Class对象。这是最直接、最简单的方式，不需要处理异常，但弊端也很明显，就是必须在编译期就知道具体的类，类似于厨房里本可以提供100道菜，但是菜单上只是写了10道菜，而你只能操作这菜单上面的10道菜，动态性大打折扣。</p><pre><code class=\"language-java\">Class clazz = DippedSauceCucumbers.class;\nSystem.out.println(\"Simple name of DippedSauceCucumbers class is: \" + clazz.getSimpleName());&nbsp;\n</code></pre><ol start=\"3\">\n<li>Object类的方法&nbsp;getClass()</li>\n</ol><p>这个方法是被所有Obect子类继承的，通过getClass() 方法就可以获取Class对象，所有对象都继承了Object的这个方法。</p><pre><code class=\"language-java\">DippedSauceCucumbers&nbsp; dippedSauceCucumbers= new DippedSauceCucumbers();\nClass clazz = dippedSauceCucumbers.getClass();\nSystem.out.println(\"Type of&nbsp; object is: \" + clazz.getSimpleName());&nbsp;\n</code></pre><p>这种方法不需要类的完全限定名，只需要获取对象实例的类型。但是，你需要一个对象实例，所以在没有实例的情况下这种方法就没办法使用了。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/52/b5e8b30dc56ae5a23e7d311784e73f52.png?wh=1920x622\" alt=\"图片\"></p><h3>Constructor类</h3><p>拥有了Class对象，我们就可以借此进一步获取一个类的Constructor、Method、Filed等信息，以构造器为例，我们可以通过4种方法获得。</p><ol>\n<li>使用Class类的getConstructor方法，这个方法返回指定参数类型的public构造函数，安全性较高，但是无法获取到private和protected的构造函数。</li>\n<li>使用Class类的getConstructors方法，这个方法返回类中的所有public构造函数，使用起来简单便捷，但是无法获取到非public的构造函数。</li>\n<li>使用Class类的getDeclaredConstructor方法，这个方法返回指定参数类型的所有构造函数，不仅限于public构造函数。这种方式可以获取所有声明的构造函数，包括public、protected、default以及private。但是使用不当可能会访问到本不应该被访问到的构造函数，导致安全问题。</li>\n<li>使用Class类的getDeclaredConstructors方法，这个方法返回类中的所有构造函数，包括非public的。这种方式可以获取到所有声明的构造函数，包括public、protected、default以及private，是最全面的获取构造函数的方法。但是使用不当可能会访问到本不应该被访问到的构造函数，导致安全问题。</li>\n</ol><p>我写了一个简单的例子，你可以看一下。</p><pre><code class=\"language-java\">Class clazz = DippedSauceCucumbers.class;\n// 获取public的、无参的构造函数\nConstructor constructor1 = clazz.getConstructor();\n// 获取所有的public构造函数\nConstructor[] constructors1 = clazz.getConstructors();\n// 获取所有的构造函数，包括非public的\nConstructor[] constructors2 = clazz.getDeclaredConstructors();\n</code></pre><p>Method、Filed 等方式的API使用和这个差不多，有兴趣的话你可以参照反射API尝试使用。</p><h2>反射应用场景</h2><p>反射机制有非常丰富的应用场景，按照我们在前面提到的使用JVM的三层境界，我们一起来看看反射机制是怎么助力我们在第二层和第三层境界上使用JVM的。</p><h3>第二层境界：运行时动态扩展JVM的提供能力</h3><h4>动态创建对象</h4><p>当需要基于运行时的条件创建不同类型的对象时，反射机制是必需的。</p><p>创建对象有两种方法。</p><ol>\n<li>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求该Class 对象对应的类有默认的空构造器。</li>\n<li>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()方法来创建 Class 对象对应类的实例，通过这种方法可以选定构造方法创建实例。</li>\n</ol><pre><code class=\"language-java\">//获取 DippedSauceCucumbers 类的 Class 对象\nClass clazz=Class.forName(\"com.restaurant.DippedSauceCucumbers\");\n//使用.newInstane 方法创建对象\nDippedSauceCucumbers dippedSauceCucumbers_1=(DippedSauceCucumbers) clazz.newInstance();\n//获取构造方法并创建对象\nConstructor c=clazz.getDeclaredConstructor();\n//创建对象并设置属性\nDippedSauceCucumbers dippedSauceCucumbers_2=(DippedSauceCucumbers) c.newInstance();\n</code></pre><h4>通过反射动态创建和访问数组</h4><pre><code class=\"language-java\">Class&lt;?&gt;&nbsp;&nbsp; DippedSauceCucumbersCls=Class.forName(\"com.restaurant.DippedSauceCucumbers\");\nObject array= Array.newInstance(DippedSauceCucumbersCls, 5);\nArray.set(array, 4, new DippedSauceCucumbers());\nSystem.out.println(Array.get(array, 4));\n</code></pre><p>代码中Array.newInstance(DippedSauceCucumbersCls, 5);表示创建一个<strong>DippedSauceCucumbers</strong>类型大小为5的数组。</p><h3>第三层境界：基于JVM提供的能力打造一个定制的图灵机</h3><p>其实我们非常熟悉的Spring框架 ，正是借助反射机制，实现了我们说的使用JVM的第三层境界。Spring封装了JVM底层的能力，通过Bean对外提供服务，而不是使用Java的Object，这里的Bean就像我们封装了饭店后厨的能力打造的新菜单。</p><p>而这一切都离不开反射机制的支持，不管是依赖注入还是AOP编程，都使用到了反射机制。比如在依赖注入时，Spring会通过反射调用Bean的setter方法或者构造器来实现依赖关系的注入；在AOP编程中，Spring则是通过反射调用目标方法，并在调用之前或之后添加增强处理，从而实现面向切面编程。</p><p>为了方便你看清其中的本质，我把反射在Spring中的应用过程抽象成了3个步骤。</p><p>第一步：Spring通过反射的方式创建Bean实例。在Spring中，对于配置的Bean，其创建工作是由BeanFactory完成的。在AbstractBeanFactory类的doCreateBean方法中，调用createBeanInstance方法创建Bean实例，这个过程使用了反射技术。</p><pre><code class=\"language-java\">protected Object createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {\n// 确定构造器\nConstructor&lt;?&gt; constructorToUse;\n...\n// 实例化bean\nreturn getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, args);\n}\n</code></pre><p>第二步：Spring通过反射设置属性值。在BeanPostProcessor后置处理器中，Spring会读取属性配置，使用反射调用set方法为Bean的属性设置值。</p><pre><code class=\"language-java\">public class AutowiredAnnotationBeanPostProcessor extends InjectionMetadata.InjectedElement {\n@Override\n&nbsp;&nbsp;&nbsp; protected void inject(Object bean, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Field field = (Field) this.member;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object value;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReflectionUtils.makeAccessible(field);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; field.set(bean, value);\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><p>第三步：Spring通过反射调用Bean的生命周期回调方法，如init-method和destroy-method。</p><p>下面是如何通过@Bean注解向Spring注册一个Bean示例，这也是另一个重要的使用反射的地方。</p><pre><code class=\"language-java\">@Configuration\npublic class AppConfig {\n&nbsp;&nbsp;&nbsp; @Bean\n&nbsp;&nbsp;&nbsp; public MyBean myBean() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyBean myBean = new MyBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBean.setName(\"Test Bean\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBean.setAge(25);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return myBean;\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><p>以上@Bean注解的方法返回一个MyBean的实例，Spring会使用反射调用这个方法获取该实例，并且把这个实例注册到Spring IoC容器中。当其他地方需要使用这个Bean的时候，就可以通过@Autowired注解来进行注入。</p><p>在实际编程过程中，Spring框架的反射操作相当广泛和复杂，但是基本原理都是Java的反射机制，通过获取类的Class对象，然后创建实例，设置属性和调用方法。其实不仅仅是Spring，作为半自动ORM框架的代表，MyBatis也是通过反射来完成结果集的映射的，通过反射获取类的元信息，并根据元信息映射成对应的Java对象。</p><p>我们日常使用的大多数框架，背后都有反射的身影。所以学习好反射机制，对我们掌握这些框架，甚至打造自己的框架都大有裨益。</p><h2>重点回顾</h2><p>今天的这节课到这里就结束了，不知道你是否惊诧于反射机制的魅力，它就像JVM为我们打开的一个后门，不仅让我们能一窥究竟，还能得其门而入，一试身手。</p><p>但任何事有一利必有一弊，反射带来便利性的同时，会破坏类的封装性、损耗性能，过度使用还会使代码变得更加复杂，降低可维护性，这就注定了我们使用反射机制的时候要更加小心、严格限制。就像顾客们都能随意进入饭店后厨，自己动手，对外发布菜单，那么食品的安全、质量的保障必然会成为一个大问题。</p><p>但是无法否认，反射机制给Java这个静态语言带来了语言的动态性。借助反射API，程序可以在运行时取得任何一个已知名称的类的信息，包括它的构造方法、声明的字段和定义的方法等。</p><p>反射就像它的英文同义词reflection 一样，如同运行时中Java类在水中的倒影。通过了解运行时Java类的内部结构，赋予了我们与运行中的Java类进行交互的能力，使我们不仅能通过反射机制动态创建一个新的对象，还可以动态调用一个运行中的对象的方法等。这种与源码级调用等效的方式，极大地提升了Java程序在运行态的灵活性。</p><p>所以熟练掌握反射机制，去领悟JDK源码还有开源框架中反射机制的那些巧妙应用，一定会提升我们的编码能力，并帮助我们早日打造出属于自己的框架，实现对JVM使用的第三层境界。</p><h2>思考题</h2><p>学而不思则罔，学完这节课之后，我给你留两个问题。</p><ol>\n<li>获取一个class对象不同方式的差异点在哪儿？</li>\n<li>如何通过反射机制获取某个类以及它继承的类的所有公有字段？</li>\n</ol><p>希望你认真思考，然后把思考后的结果分享到评论区，我们一起讨论，如果有收获的话，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p><h2>💡点亮你的知识框架图</h2><p><img src=\"https://static001.geekbang.org/resource/image/44/8d/440862d95dfd38fc2fd32acfca2edf8d.jpg?wh=10117x7256\" alt=\"图片\"></p>","comments":[{"had_liked":false,"id":380715,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"安徽","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1694050224,"is_pvip":false,"replies":[{"id":139133,"content":"当我们说获取 Class 对象的三种方式动态性不断降低，主要是指在编译期和运行期对类的依赖度和耦合程度：Class.forName方式是最具动态性的，因为这种方式既可以在编译期确定，也可以在运行期通过动态拼接类名字来获取，具有很高的灵活性。但是因为其是运行时动态加载，所以如果类在编译期不存在，运行期加载的时候就会出现ClassNotFoundException。对象的.getClass方式其次，这种方式需要有实例对象，所以使用这种方式一般是已经明确了具体的类，还能保证该类一定存在。所有的方式拿到的Class对象本质上都一样，都可以用来获取类的信息或者进行反射操作等。主要考虑的是在使用的时候有着不同的便捷程度，以及各自适应不同的应用场景，所以就有了动态性的划分。","user_name":"作者回复","user_name_real":"编辑","uid":1366588,"ctime":1696515257,"ip_address":"北京","comment_id":380715,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"获取 Class 对象的三种方式，其动态性不断降低，没太理解。既然拿到了 Class 对象这把钥匙，不管哪种方式拿到，其本质不都一样吗，后面想怎么玩就怎么玩。我是不是角度理解错了。","like_count":0,"discussions":[{"author":{"id":1366588,"avatar":"https://static001.geekbang.org/account/avatar/00/14/da/3c/6ca50139.jpg","nickname":"Arthur king 微信超級會員","note":"","ucode":"79637F55F0ED85","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629017,"discussion_content":"当我们说获取 Class 对象的三种方式动态性不断降低，主要是指在编译期和运行期对类的依赖度和耦合程度：Class.forName方式是最具动态性的，因为这种方式既可以在编译期确定，也可以在运行期通过动态拼接类名字来获取，具有很高的灵活性。但是因为其是运行时动态加载，所以如果类在编译期不存在，运行期加载的时候就会出现ClassNotFoundException。对象的.getClass方式其次，这种方式需要有实例对象，所以使用这种方式一般是已经明确了具体的类，还能保证该类一定存在。所有的方式拿到的Class对象本质上都一样，都可以用来获取类的信息或者进行反射操作等。主要考虑的是在使用的时候有着不同的便捷程度，以及各自适应不同的应用场景，所以就有了动态性的划分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696515257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444698,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0b/5a/453ad411.jpg","nickname":"C.","note":"","ucode":"5AE269220EFD73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627437,"discussion_content":"他说的是场景不太一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694148945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1444698,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0b/5a/453ad411.jpg","nickname":"C.","note":"","ucode":"5AE269220EFD73","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627707,"discussion_content":"謝謝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694469038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627437,"ip_address":"安徽","group_id":0},"score":627707,"extra":""}]}]},{"had_liked":false,"id":381729,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"湖北","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1695751851,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100613601,"comment_content":"深度差点意思","like_count":3},{"had_liked":false,"id":380674,"user_name":"^_^","can_delete":false,"product_type":"c1","uid":1682012,"ip_address":"北京","ucode":"05E7C6F1DD6E77","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/5c/d2c1c7ce.jpg","comment_is_top":false,"comment_ctime":1693981471,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"1，获取一个 class 对象不同方式的差异点\n    1）， 对象的getClass()方法获取的Class对象是针对具体的对象的，而.class语法和Class.forName()方法获取的Class对象是针对类本身的。\n    2），使用对象的getClass()方法获取的Class对象是在运行时动态获取的，而使用.class语法和Class.forName()方法获取的Class对象是在编译时就确定的。\n    3），使用.class语法和Class.forName()方法获取的Class对象可以在没有实例化对象的情况下使用，而对象的getClass()方法需要有一个实例化对象才能调用。\n2,如何通过反射机制获取某个类以及它继承的类的所有公有字段\npublic class MyClass {\n    public int publicField;\n    private int privateField;\n    protected int protectedField;\n\n    public static void main(String[] args) {\n        try {\n            &#47;&#47; 获取类的Class对象\n            Class&lt;?&gt; clazz = MyClass.class;\n\n            &#47;&#47; 获取类的所有公有字段\n            Field[] fields = clazz.getFields();\n\n            &#47;&#47; 遍历字段数组并处理字段\n            for (Field field : fields) {\n                &#47;&#47; 输出字段的名称和类型\n                System.out.println(&quot;Field name: &quot; + field.getName());\n                System.out.println(&quot;Field type: &quot; + field.getType());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}","like_count":2},{"had_liked":false,"id":380782,"user_name":"C.","can_delete":false,"product_type":"c1","uid":1444698,"ip_address":"江苏","ucode":"5AE269220EFD73","user_header":"https://static001.geekbang.org/account/avatar/00/16/0b/5a/453ad411.jpg","comment_is_top":false,"comment_ctime":1694148907,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"第一个问题：Class.forName静态方法一般用于加载驱动或者判断类是否存在的情况，.class必须事先知道有这个类，object.getClass必须要有类实例对象。\n第二个问题：clazz.getFields();&#47;&#47;获取当前类及其父类的所有公有字段。clazz.getDeclaredFields();&#47;&#47;取私有字段或受保护的字段和公共字段。\n","like_count":0},{"had_liked":false,"id":380701,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"河南","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1694008752,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100613601,"comment_content":"Q1：最简单程序，只是打印一个“hello”字符串；此程序的运行，会有哪些类加载器参与？ 以及加载顺序？\nQ2：JAVA的“动态性”，除了反射，还有其他的吗？","like_count":0}]}