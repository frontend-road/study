{"id":426765,"title":"13｜交互：可以执行命令行的框架才是好框架","content":"<p>你好，我是轩脉刃。</p><p>上一节课，我们开始把框架向工业级迭代，重新规划了目录，这一节课将对框架做更大的改动，让框架支持命令行工具。</p><p>一个拥有命令行工具的框架会非常受欢迎。比如 Beego 框架提供了一个命令行工具 Bee、Vue 框架提供了 Vue-CLI，这些工具无疑给框架的使用者提供了不少便利。在使用框架过程中，命令行工具能将很多编码行为自动化。</p><p>而且退一步说，在实际工作中你会发现，即使用的框架没有提供任何命令行工具，在业务运营的过程中，我们也需要开发各种大大小小的命令行运营工具，作为业务运营的必要辅助。所以一个自带命令行工具，且很方便让用户自行开发命令行的框架，是非常有必要的。</p><p>这节课我们就研究一下如何将hade框架改造成为支持命令行交互的框架。</p><h2>第三方命令行工具库 cobra</h2><p>要让一个程序支持命令行，那么它的核心功能就是要能解析参数，比如 <code>./hade app start --address=:8888</code> 其中的 ./hade 是我们要运行的程序，而后面的 app 和 start 两个字段以及–address=:8888 就是这个程序对应的参数了。</p><p>那么如何解析参数呢？</p><p>Golang 标准库提供了 flag 包能对参数进行解析。但是 flag 包<strong>只是一个命令行解析的类库，不支持组织，所以如果想基于 flag 包实现父子命令行工具，显然就不够了</strong>。出于不重复造轮子，站在巨人肩膀上的想法，我们将视线移向开源社区一个最出名的命令行工具库 <a href=\"https://github.com/spf13/cobra\">cobra</a>。</p><!-- [[[read_end]]] --><p>cobra 是由大名鼎鼎的谷歌工程师 Steve Francia（spf13）开发并开源的一个项目。Steve Francia 是 Golang 开源界比较出名的一名程序员，是 Golang、Doctor、MongoDB 的开源贡献者，同时开源的 hugo、viper 等项目应用也非常广泛。而由他开发开源的 cobra 目前在 GitHub 上已经有了 23k 的 star。</p><p>cobra 不仅仅能让我们快速构建一个命令行，它更大的优势是能更快地组织起有许多命令行工具，因为从根命令行工具开始，cobra 把所有的命令按照树形结构组织起来了。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/33/6812f5845567d0c771dea8190eb35e33.jpg?wh=1920x1080\" alt=\"\"></p><p>要使用 cobra 就要从源码上了解这个库。按照第一节课说的，按照 <strong>库函数 &gt; 结构定义 &gt; 结构函数</strong>的顺序读，你会发现，cobra 这个库最核心的内容是一个数据结构 <a href=\"https://github.com/spf13/cobra/blob/master/command.go\">Command</a> 。</p><p>一个 Command 代表一个执行命令。这个 Command 包含很多可设置的字段，如何使用这个 Command，就取决于我们如何设置这些属性。下面是源码片段，我在注释中列出了这些属性的意义。</p><pre><code class=\"language-go\">// Command代表执行命令的结构\ntype Command struct {\n&nbsp; &nbsp; &nbsp; &nbsp; // 代表当前命令的，如何执行，root 最好和生成的命令工具名称一致\n&nbsp; &nbsp; &nbsp; &nbsp; Use string\n        \n        // 代表这个工具的别名，在 subCommand 中有用，比如 root cmd1 和 root cmd_1 想要都执行一个 subCommand 就需要这样\n&nbsp; &nbsp; &nbsp; &nbsp; Aliases []string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 由于不强制设置，用于输入错误的时候建议字段\n&nbsp; &nbsp; &nbsp; &nbsp; SuggestFor []string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 这个就是在 help 的时候一句话描述这个命令的功能\n&nbsp; &nbsp; &nbsp; &nbsp; Short string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 详细描述这个命令的功能\n&nbsp; &nbsp; &nbsp; &nbsp; Long string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 例子\n&nbsp; &nbsp; &nbsp; &nbsp; Example string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 需要验证的参数\n&nbsp; &nbsp; &nbsp; &nbsp; ValidArgs []string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 有多少个参数，这里放了一个验证函数，可以是 ExactArgs，MaximumNArgs 等，验证有多少个参数\n&nbsp; &nbsp; &nbsp; &nbsp; Args PositionalArgs\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 参数别名\n&nbsp; &nbsp; &nbsp; &nbsp; ArgAliases []string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 自动生成的命令设置\n&nbsp; &nbsp; &nbsp; &nbsp; BashCompletionFunction string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 如果这个命令已经废弃了，那么就这里写上废弃信息\n&nbsp; &nbsp; &nbsp; &nbsp; Deprecated string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 如果这个命令要被隐藏，设置这个字段\n&nbsp; &nbsp; &nbsp; &nbsp; Hidden bool\n\n&nbsp; &nbsp; &nbsp; &nbsp; // Annotations are key/value pairs that can be used by applications to identify or\n&nbsp; &nbsp; &nbsp; &nbsp; // group commands.\n&nbsp; &nbsp; &nbsp; &nbsp; Annotations map[string]string\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 这个命令的版本\n&nbsp; &nbsp; &nbsp; &nbsp; Version string\n\n        // 是否要打印错误信息\n        SilenceErrors bool\n\n        // 是否要打印如何使用\n        SilenceUsage bool\n\n        // 是否有 flag，如果这个命令没有 flag，设置为 true，那么所有的命令后面的参数都会是 arguments\n        DisableFlagParsing bool\n\n        // 是否打印自动生成字样： (\"Auto generated by spf13/cobra...\")\n        DisableAutoGenTag bool\n\n        // 是否显示[flags]字样\n        DisableFlagsInUseLine bool\n\n        // 是否打印建议\n        DisableSuggestions bool\n\n        // 两个字符串的差距多少会进入 suggest\n        SuggestionsMinimumDistance int\n\n        // 是否使用 Traverse 的方式来解析参数\n        TraverseChildren bool\n\n        // 解析错误白名单, 比如像未知参数\n        FParseErrWhitelist FParseErrWhitelist\n        \n        // The *Run 函数运行顺序：\n        //   * PersistentPreRun()\n        //   * PreRun()\n        //   * Run()\n        //   * PostRun()\n        //   * PersistentPostRun()\n&nbsp; &nbsp; &nbsp; &nbsp; // 会被继承的前置 Run\n&nbsp; &nbsp; &nbsp; &nbsp; PersistentPreRun func(cmd *Command, args []string)\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 会被继承的前置 Run, 带 error\n&nbsp; &nbsp; &nbsp; &nbsp; PersistentPreRunE func(cmd *Command, args []string) error\n\n&nbsp; &nbsp; &nbsp; &nbsp; // 当前这个命令的前置 Run\n&nbsp; &nbsp; &nbsp; &nbsp; PreRun func(cmd *Command, args []string)\n&nbsp; &nbsp; &nbsp; &nbsp; // 当前这个命令的前置 Run，带 Error\n&nbsp; &nbsp; &nbsp; &nbsp; PreRunE func(cmd *Command, args []string) error\n&nbsp; &nbsp; &nbsp; &nbsp; // zh: 实际跑的时候运行的函数\n&nbsp; &nbsp; &nbsp; &nbsp; Run func(cmd *Command, args []string)\n&nbsp; &nbsp; &nbsp; &nbsp; // zh: Run 执行错误了之后\n&nbsp; &nbsp; &nbsp; &nbsp; RunE func(cmd *Command, args []string) error\n&nbsp; &nbsp; &nbsp; &nbsp; // 后置运行\n&nbsp; &nbsp; &nbsp; &nbsp; PostRun func(cmd *Command, args []string)\n&nbsp; &nbsp; &nbsp; &nbsp; // 后置运行，带 error\n&nbsp; &nbsp; &nbsp; &nbsp; PostRunE func(cmd *Command, args []string) error\n&nbsp; &nbsp; &nbsp; &nbsp; // 会被继承的后置运行\n&nbsp; &nbsp; &nbsp; &nbsp; PersistentPostRun func(cmd *Command, args []string)\n&nbsp; &nbsp; &nbsp; &nbsp; // 会被继承的后置运行，带 error\n&nbsp; &nbsp; &nbsp; &nbsp; PersistentPostRunE func(cmd *Command, args []string) error\n\n&nbsp; &nbsp; &nbsp; &nbsp; \n}\n</code></pre><p>这里属性非常多，你也不需要都记住是啥。来看一些常用属性，我们用一个设置好的输出结果图就能很好理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/15/ed/159f41e9792178f9ca60950192fee4ed.png?wh=1186x956\" alt=\"\"></p><p>它对应的代码如下，后面会解释每一行都是怎么实现的：</p><pre><code class=\"language-go\">// InitFoo 初始化 Foo 命令\nfunc InitFoo() *cobra.Command {\n   FooCommand.AddCommand(Foo1Command)\n   return FooCommand\n}\n// FooCommand 代表 Foo 命令\nvar FooCommand = &amp;cobra.Command{\n   Use:     \"foo\",\n   Short:   \"foo 的简要说明\",\n   Long:    \"foo 的长说明\",\n   Aliases: []string{\"fo\", \"f\"},\n   Example: \"foo 命令的例子\",\n   RunE: func(c *cobra.Command, args []string) error {\n      container := c.GetContainer()\n      log.Println(container)\n      return nil\n   },\n}\n// Foo1Command 代表 Foo 命令的子命令 Foo1\nvar Foo1Command = &amp;cobra.Command{\n   Use:     \"foo1\",\n   Short:   \"foo1 的简要说明\",\n   Long:    \"foo1 的长说明\",\n   Aliases: []string{\"fo1\", \"f1\"},\n   Example: \"foo1 命令的例子\",\n   RunE: func(c *cobra.Command, args []string) error {\n      container := c.GetContainer()\n      log.Println(container)\n      return nil\n   },\n}\n</code></pre><p>对照代码和输出结果图，能看出 Command 中最常用的一些字段设置。</p><ul>\n<li>Use 代表这个命令的调用关键字，比如要调用 Foo1 命令，我们就要用  <code>./hade foo foo1</code> 。Short 代表这个命令的简短说明，它会出现在上级命令的使用文档中。</li>\n<li>Long 代表这个命令的长说明，它会出现在当前命令的使用文档中。</li>\n<li>Aliases 是当前命令的别名，等同于 Use 字段；</li>\n<li>Example 是当前命令的例子，也是显示在当前命令的使用文档中。</li>\n</ul><p>而 <strong>RunE 代表当前命令的真正执行函数</strong>：</p><pre><code class=\"language-go\">RunE: func(c *cobra.Command, args []string) error \n</code></pre><p>这个执行函数的参数有两个：一个是 cobra.Command，表示当前的这个命令；而第二个参数是 args，表示当前这个命令的参数，返回值是一个 error，代表命令的执行成功或者失败。</p><h2>如何使用命令行 cobra</h2><p>现在大致了解 cobra 这个库的使用方法和最核心的 Command 结构，就要想想接下来我们要用它来做些什么事情了。</p><p><strong>首先，要把 cobra 库引入到框架中</strong>。由于希望后续能修改 Command 的数据，并且在后面的章节中会在 Command 结构中，继续加入一些字段来支持定时的命令行，所以和 Gin 框架的引入一样，我们采用源码引入的方式。</p><p>引入后要对 Command 结构进行修改。我们希望把服务容器嵌入到 Command 结构中，让 Command 在调用执行函数 RunE 时，能从参数中获取到服务容器，这样就能从服务容器中使用之前定义的 Make 系列方法获取出具体的服务实例了。</p><p>那服务容器嵌到哪里合适呢？因为刚才说，在 cobra 中 Command 结构是一个树形结构，所有的命令都是由一个根 Command 衍生来的。所以我们可以在根 Command 中设置服务容器，让所有的子 Command 都可以根据 Root 方法来找到树的根 Command，最终找到服务容器。</p><p>不要忘记了，最终目的是完善 Web 框架，所以<strong>之前存放在 main 函数中的启动 Web 服务的一些方法我们也要做修改</strong>，让它们能通过一个命令启动。main 函数不再是启动一个 Web 服务了，而是启动一个 cobra 的命令。</p><p>也就是说，我们将Web服务的启动逻辑封装为一个Command命令，将这个Command挂载到根Command中，然后根据参数获取到这个 Command 节点，执行这个节点中的 RunE 方法，就能启动Web服务了。</p><p><strong>但是在调用Web服务所在节点的RunE方法的时候，存在一个Engine结构的传递问题</strong>。</p><p>在main函数中，我们使用gin.New创建了一个Engine结构，在业务中对这个Engine结构进行路由设置，这些都应该在业务代码中。而后，我们就进入了框架代码中，调用Web服务所在Command节点的RunE方法，在这个方法里进行初始化http.Server，并且启动Goroutine进行监听：</p><pre><code class=\"language-go\">func main() {\n   // 创建engine结构\n   core := gin.New()\n   ...\n\n   hadeHttp.Routes(core)\n\n   server := &amp;http.Server{\n      Handler: core,\n      Addr:    \":8888\",\n   }\n\n   // 这个goroutine是启动服务的goroutine\n   go func() {\n      server.ListenAndServe()\n   }()\n   ...\n}\n</code></pre><p>也就是说，我们只能根据 Command 拿到服务容器，那怎么拿到 Gin 函数创建的 Engine 结构呢？这个问题我提供一个解决思路，是否可以将“提供服务引擎”作为一个接口，通过服务提供者注入进服务容器？这样就能在命令行中就能获取服务容器了。</p><h2>使用 cobra 增加框架的交互性</h2><p>现在思路有了，可能发生的问题也想到了，下面进入实操。</p><p>首先是源码引入 cobra 库。引入的方式基本上和 Gin 框架引入的方式一样，先看下 cobra 源码的许可证，是 Apache License。这种许可证允许修改、商用、私有化等，只要求保留著作声明。所以我们直接拷贝最新的 cobra 源码，用 cobra<a href=\"https://github.com/spf13/cobra/tree/v1.2.1\"> v1.2.1 版本</a>，将它放在 framework/cobra 目录下。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/1e/1e64756d99eeecbb99034d99682be71e.png?wh=456x556\" alt=\"\"></p><p>然后，对 Command 结构进行修改。要在 Command 结构中加入服务容器，由于刚才是源码引入的，很容易为 Command 增加一个container字段，在framework/cobra/command.go中修改Command结构：</p><pre><code class=\"language-go\">type Command struct {\n   // 服务容器\n   container framework.Container\n   ...\n}\n</code></pre><p><strong>再为 Command 提供两个方法：设置服务容器、获取服务容器</strong>。设置服务容器的方法是为了在创建根 Command 之后，能将服务容器设置到里面去；而获取服务容器的方法，是为了在执行命令的 RunE 函数的时候，能从参数 Command 中获取到服务容器。</p><p>将定义的方法放在单独的一个文件framework/cobra/hade_command.go中。</p><pre><code class=\"language-go\">// SetContainer 设置服务容器\nfunc (c *Command) SetContainer(container framework.Container) {\n   c.container = container\n}\n// GetContainer 获取容器\nfunc (c *Command) GetContainer() framework.Container {\n   return c.Root().container\n}\n</code></pre><p>做到这里，前面两步cobra的引入和Command结构的修改就都完成了。</p><h2>将 Web 启动改成一个命令</h2><p>第三步，如何改造 Web 启动服务是最繁琐的，先简单梳理一下。</p><ul>\n<li>把创建 Web 服务引擎的方法作为一个服务封装在服务容器中，完成准备工作。</li>\n<li>开始 main 函数的改造。首先要做的必然是初始化一个服务容器，然后将各个服务绑定到这个服务容器中，有一个就是刚才定义的提供 Web 引擎的服务。</li>\n<li>在业务代码中将业务需要的路由绑定到 Web 引擎中去。</li>\n<li>完成服务的绑定之后，最后要创建一个根Command，并且创建一个Web启动的Command，这两个Command会形成一个树形结构。</li>\n</ul><p>我们先要将创建 Web 服务引擎的方法作为一个服务封装在服务容器中，按照<a href=\"https://time.geekbang.org/column/article/424529\">第十节课</a>封装服务的三个步骤：封装接口协议、定义一个服务提供者、初始化服务实例。</p><p>在framework/contract/kernel.go中，把创建 Engine 的过程封装为一个服务接口协议：</p><pre><code class=\"language-go\">// KernelKey 提供 kenel 服务凭证\nconst KernelKey = \"hade:kernel\"\n\n// Kernel 接口提供框架最核心的结构\ntype Kernel interface {\n   // HttpEngine http.Handler结构，作为net/http框架使用, 实际上是gin.Engine\n   HttpEngine() http.Handler\n}\n</code></pre><p>在定义的 Kernel 接口，提供了 HttpEngine 的方法，返回了net/http 启动的时候需要的 http.Handler接口，并且设置它在服务容器中的字符串凭证为\"hade:kernel\"。<br>\n然后为这个服务定义一个服务提供者。这个服务提供者可以在初始化服务的时候传递 Web 引擎，如果初始化的时候没有传递，则需要在启动的时候默认初始化。</p><p>在对应的Kernel的服务提供者代码framework/provider/kernel/provider.go中，我们实现了服务提供者需要实现的五个函数Register、Boot、isDefer、Params、Name。</p><pre><code class=\"language-go\">package kernel\nimport (\n   \"github.com/gohade/hade/framework\"\n   \"github.com/gohade/hade/framework/contract\"\n   \"github.com/gohade/hade/framework/gin\"\n)\n\n// HadeKernelProvider 提供web引擎\ntype HadeKernelProvider struct {\n   HttpEngine *gin.Engine\n}\n\n// Register 注册服务提供者\nfunc (provider *HadeKernelProvider) Register(c framework.Container) framework.NewInstance {\n   return NewHadeKernelService\n}\n\n// Boot 启动的时候判断是否由外界注入了Engine，如果注入的化，用注入的，如果没有，重新实例化\nfunc (provider *HadeKernelProvider) Boot(c framework.Container) error {\n   if provider.HttpEngine == nil {\n      provider.HttpEngine = gin.Default()\n   }\n   provider.HttpEngine.SetContainer(c)\n   return nil\n}\n\n// IsDefer 引擎的初始化我们希望开始就进行初始化\nfunc (provider *HadeKernelProvider) IsDefer() bool {\n   return false\n}\n\n// Params 参数就是一个HttpEngine\nfunc (provider *HadeKernelProvider) Params(c framework.Container) []interface{} {\n   return []interface{}{provider.HttpEngine}\n}\n\n// Name 提供凭证\nfunc (provider *HadeKernelProvider) Name() string {\n   return contract.KernelKey\n}\n</code></pre><p>创建服务的第三步就是初始化实例了。这个服务实例比较简单，就是一个包含着 Web 引擎的服务结构。在刚才实现的 HttpEngine()接口中，把服务结构中包含的 Web 引擎返回即可。</p><pre><code class=\"language-go\">// 引擎服务\ntype HadeKernelService struct {\n   engine *gin.Engine\n}\n\n// 初始化 web 引擎服务实例\nfunc NewHadeKernelService(params ...interface{}) (interface{}, error) {\n   httpEngine := params[0].(*gin.Engine)\n   return &amp;HadeKernelService{engine: httpEngine}, nil\n}\n\n// 返回 web 引擎\nfunc (s *HadeKernelService) HttpEngine() http.Handler {\n   return s.engine\n}\n</code></pre><p>现在我们完成了Web服务Kernel的设计，转而我们改造一下入口函数。 main 函数是我们的入口，但是现在，入口函数就不再是启动一个 HTTP 服务了，而是执行一个命令。那么这个 main 函数要做些什么呢？</p><p>整个框架目前都是围绕服务容器进行设计的了。所以在业务目录的main.go的 main 函数中，我们第一步要做的，必然是初始化一个服务容器。</p><pre><code class=\"language-go\">// 初始化服务容器\ncontainer := framework.NewHadeContainer()\n</code></pre><p>接着，要将各个服务绑定到这个服务容器中。目前要绑定的服务容器有两个，一个是上一节课我们定义的目录结构服务HadeAppProvider，第二个是这节课定义的提供 Web 引擎的服务。</p><pre><code class=\"language-go\">// 绑定 App 服务提供者\ncontainer.Bind(&amp;app.HadeAppProvider{})\n\n// 后续初始化需要绑定的服务提供者...\n// 将 HTTP 引擎初始化,并且作为服务提供者绑定到服务容器中\nif engine, err := http.NewHttpEngine(); err == nil {\n   container.Bind(&amp;kernel.HadeKernelProvider{HttpEngine: engine})\n}\n</code></pre><p>http.NewHttpEngine 这个创建 Web 引擎的方法必须放在业务层，因为这个 Web 引擎不仅仅是调用了 Gin 创建 Web 引擎的方法，更重要的是调用了业务需要的绑定路由的功能。</p><p>将业务需要的路由绑定到 Web 引擎中去。因为这个是业务逻辑，我们放在业务目录的app/kernel.go 文件中：</p><pre><code class=\"language-go\">// NewHttpEngine 创建了一个绑定了路由的 Web 引擎\nfunc NewHttpEngine() (*gin.Engine, error) {\n   // 设置为 Release，为的是默认在启动中不输出调试信息\n   gin.SetMode(gin.ReleaseMode)\n   // 默认启动一个 Web 引擎\n   r := gin.Default()\n   // 业务绑定路由操作\n   Routes(r)\n   // 返回绑定路由后的 Web 引擎\n   return r, nil\n}\n</code></pre><p>而对应的业务绑定路由操作，还是放在业务代码的app/http/route.go中：</p><pre><code class=\"language-plain\">\n// Routes 绑定业务层路由\nfunc Routes(r *gin.Engine) {\n\n   r.Static(\"/dist/\", \"./dist/\")\n\n   demo.Register(r)\n}\n</code></pre><p>完成服务提供者的绑定和路由设置之后，<strong>最后要创建一个根 Command，并且将业务的 Command 和框架定义的 Command 都加载到根 Command 中，形成一个树形结构</strong>。</p><p>在 main 中，我们用 console.RunCommand 来创建和运行根 Command。</p><pre><code class=\"language-go\">// 运行 root 命令\nconsole.RunCommand(container)\n</code></pre><p>而这里RunCommand 的方法简要来说做了三个事情：</p><ol>\n<li>创建根 Command，并且将容器设置进根 Command 中。</li>\n<li>绑定框架和业务的 Command 命令。</li>\n<li>调用 Execute 启动命令结构。</li>\n</ol><p>具体的代码实现放在业务目录的app/console/kernel.go文件中，如下：</p><pre><code class=\"language-go\">// RunCommand  初始化根 Command 并运行\nfunc RunCommand(container framework.Container) error {\n   // 根 Command\n   var rootCmd = &amp;cobra.Command{\n      // 定义根命令的关键字\n      Use: \"hade\",\n      // 简短介绍\n      Short: \"hade 命令\",\n      // 根命令的详细介绍\n      Long: \"hade 框架提供的命令行工具，使用这个命令行工具能很方便执行框架自带命令，也能很方便编写业务命令\",\n      // 根命令的执行函数\n      RunE: func(cmd *cobra.Command, args []string) error {\n         cmd.InitDefaultHelpFlag()\n         return cmd.Help()\n      },\n      // 不需要出现 cobra 默认的 completion 子命令\n      CompletionOptions: cobra.CompletionOptions{DisableDefaultCmd: true},\n   }\n   // 为根 Command 设置服务容器\n   rootCmd.SetContainer(container)\n   // 绑定框架的命令\n   command.AddKernelCommands(rootCmd)\n   // 绑定业务的命令\n   AddAppCommand(rootCmd)\n   // 执行 RootCommand\n   return rootCmd.Execute()\n</code></pre><p>仔细看这段代码，我们这一节课前面说的内容都在这里得到了体现。</p><p>首先，根 Command 的各个属性设置是基于我们对 cobra 的 Command 结构比较熟悉才能进行的；而为根 Command 设置服务容器，我们用之前为服务容器扩展的 SetContainer 方法设置的；最后运行 cobra 的命令是调用 Execute 方法来实现的。</p><p>这里额外注意下， 这里有<strong>两个函数 AddKernelCommands 和 AddAppCommand，分别是将框架定义的命令和业务定义的命令挂载到根Command下</strong>。</p><p>框架定义的命令我们使用framework/command/kernel.go 中的 AddKernelCommands 进行挂载。而业务定义的命令我们使用 app/console/kernel.go 中的 AddAppCommand进行挂载。比如下面要定义的启动服务的命令 appCommand 是所有业务通用的一个框架命令，最终会在 framework/command/kernel.go 的 AddKernelCommands 中进行挂载。</p><h3>启动服务</h3><p>现在已经将 main 函数改造成根据命令行参数定位 Command 树并执行，且在执行函数的参数 Command 中已经放入了服务容器，在服务容器中我们也已经注入了 Web 引擎。那么下面就来创建一个命令  <code>./hade app start</code> 启动 Web 服务。</p><p>这个命令和业务无关，是框架自带的，所以它的实现应该放在 frame/command 下，而启动 Web 服务的命令是一个二级命令，其一级命令关键字为 app，二级命令关键字为 start。</p><p>那么我们先创建一级命令，这个一级命令 app 没有具体的功能，只是打印帮助信息。在framework/command/app.go中定义appCommand：</p><pre><code class=\"language-go\">// AppCommand 是命令行参数第一级为 app 的命令，它没有实际功能，只是打印帮助文档\nvar appCommand = &amp;cobra.Command{\n   Use:   \"app\",\n   Short: \"业务应用控制命令\",\n   RunE: func(c *cobra.Command, args []string) error {\n      // 打印帮助文档\n      c.Help()\n      return nil\n   },\n}\n</code></pre><p><strong>而二级命令关键字为 start，它是真正启动 Web 服务的命令</strong>。这个命令的启动执行函数有哪些逻辑呢？</p><p>首先，它需要获取 Web 引擎。具体方法根据前面讲的，要从参数 Command 中获取服务容器，从服务容器中获取引擎服务实例，从引擎服务实例中获取 Web 引擎：</p><pre><code class=\"language-go\">// 从 Command 中获取服务容器\ncontainer := c.GetContainer()\n// 从服务容器中获取 kernel 的服务实例\nkernelService := container.MustMake(contract.KernelKey).(contract.Kernel)\n// 从 kernel 服务实例中获取引擎\ncore := kernelService.HttpEngine()\n</code></pre><p>获取到了 Web 引擎之后如何启动 Web 服务，就和第一节课描述的一样，通过创建 http.Server，并且调用其 ListenAndServe 方法。这里贴一下具体的appStartCommand命令的实现，供你参考思路，在framework/command/app.go中：</p><pre><code class=\"language-go\">// appStartCommand 启动一个Web服务\nvar appStartCommand = &amp;cobra.Command{\n   Use:   \"start\",\n   Short: \"启动一个Web服务\",\n   RunE: func(c *cobra.Command, args []string) error {\n      // 从Command中获取服务容器\n      container := c.GetContainer()\n      // 从服务容器中获取kernel的服务实例\n      kernelService := container.MustMake(contract.KernelKey).(contract.Kernel)\n      // 从kernel服务实例中获取引擎\n      core := kernelService.HttpEngine()\n\n      // 创建一个Server服务\n      server := &amp;http.Server{\n         Handler: core,\n         Addr:    \":8888\",\n      }\n\n      // 这个goroutine是启动服务的goroutine\n      go func() {\n         server.ListenAndServe()\n      }()\n\n      // 当前的goroutine等待信号量\n      quit := make(chan os.Signal)\n      // 监控信号：SIGINT, SIGTERM, SIGQUIT\n      signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n      // 这里会阻塞当前goroutine等待信号\n      &lt;-quit\n\n      // 调用Server.Shutdown graceful结束\n      timeoutCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n      defer cancel()\n\n      if err := server.Shutdown(timeoutCtx); err != nil {\n         log.Fatal(\"Server Shutdown:\", err)\n      }\n\n      return nil\n   },\n}\n</code></pre><p><strong>最后将RootCommand和AppCommand进行关联</strong>。在framework/command/app.go中定义initAppCommand()方法，将appStartCommand作为appCommand的子命令：</p><pre><code class=\"language-go\">// initAppCommand 初始化app命令和其子命令\nfunc initAppCommand() *cobra.Command {\n   appCommand.AddCommand(appStartCommand)\n   return appCommand\n}\n</code></pre><p>在framework/command/kernel.go中，挂载对应的appCommand的命令：</p><pre><code class=\"language-go\">// AddKernelCommands will add all command/* to root command\nfunc AddKernelCommands(root *cobra.Command) {\n   // 挂载AppCommand命令\n   root.AddCommand(initAppCommand())\n}\n</code></pre><p>我们就完成了Web启动的改造工作了。</p><h2>验证</h2><p>好了到这里，整个命令行工具就引入成功，并且Web 框架也改造完成了。下面做一下验证。编译后调用./hade ，我们获取到根 Command 命令行工具的帮助信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/cf/yy95ac2233fd4145a311f80422422dcf.png?wh=1418x824\" alt=\"\"></p><p>提示可以通过一级关键字 app 获取下一级命令：</p><p><img src=\"https://static001.geekbang.org/resource/image/29/c2/2969de0887cbf2b918374279f9d031c2.png?wh=1034x676\" alt=\"\"></p><p>而./hade app 提醒我们可以通过二级关键字 start 来启动一个 Web 服务，调用  <code>./hade app start</code> 。</p><p>Web 服务启动成功，通过浏览器可以访问到业务定义的/demo/demo 路径。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/3b/52d5f4d8fc431ab7853def837b78e73b.png?wh=1390x804\" alt=\"\"></p><p>今天所有代码都存放在GitHub 的 <a href=\"https://github.com/gohade/coredemo/tree/geekbang/13\">geekbang/13</a> 分支了，文中未展示的代码直接参考这个分支。本节课结束对应的目录结构如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/5e/3f0b7e94b7f7d10bc0e2b23aca54145e.png?wh=377x1279\" alt=\"\"></p><h2>总结</h2><p>今天我们把之前的 Web 框架改造成了一个命令行工具，引入了 cobra 库，并且将原本的进程启动，也就是启动 Web 服务的方式，改成了调用一个命令来启动 Web 服务。</p><p>不知道你有没有感觉，将框架的入口改造成命令行，这个设计<strong>不仅仅是简单换了一种 Web 服务的启动方式，而且是扩展了框架的另外一种可能性——设计命令行工具</strong>。改造后，这个框架可以用来开发业务需要的各种命令行工具，同时也允许我们后续为框架增加多种多样易用性高的工具。</p><h2>思考题</h2><p>其实在之前的版本，我在framework/contract/kernel.go是这么设计kernel服务接口的：</p><pre><code class=\"language-go\">package contract\n\nconst KernelKey = \"hade:kernel\"\n\n// Kernel 接口提供框架最核心的结构\ntype Kernel interface {\n   // HttpEngine 提供gin的Engine结构\n   HttpEngine() *gin.Engine\n}\n</code></pre><p>在provider/kernel/service.go中是这么实现接口的：</p><pre><code class=\"language-go\">// 返回web引擎\nfunc (s *HadeKernelService) HttpEngine() *gin.Engine {\n   return s.engine\n}\n</code></pre><p>和现在实现最大的不同是返回值。之前的返回值是返回了 *gin.Engine。而现在的返回值是返回了http.Handler，其他的实现没有任何变化。你能看出这样的改动相较之前有什么好处么？为什么这么改？</p><p>欢迎在留言区分享你的思考。感谢你的阅读，如果觉得有收获，也欢迎你把今天的内容分享给你身边的朋友，邀他一起学习。我们下节课见。</p>","comments":[{"had_liked":false,"id":333743,"user_name":"Geek_cbab11","can_delete":false,"product_type":"c1","uid":2218967,"ip_address":"","ucode":"EA8C50D4C71419","user_header":"","comment_is_top":false,"comment_ctime":1644495214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23119331694","product_id":100090601,"comment_content":"看到现在没有一个明确的框架启动、服务注册流程，在context中实现请求和响应也就算了，在route中也是各种进行服务的注册，solid原则完全没有，代码过于混乱，实在是看的头疼","like_count":6},{"had_liked":false,"id":316613,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1634453084,"is_pvip":true,"replies":[{"id":"114787","content":"是的，抽象脱离具体的实现的考虑。","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1634687985,"ip_address":"","comment_id":316613,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14519354972","product_id":100090601,"comment_content":"思考题：<br>高层抽象不应该依赖于实现。这也是为了方便业务侧能够自由地选择httpHandler实现（不仅仅是gin）","like_count":3,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528433,"discussion_content":"是的，抽象脱离具体的实现的考虑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634687985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2559238,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0d/06/970cc957.jpg","nickname":"Charles","note":"","ucode":"8ACBA423B5A505","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560214,"discussion_content":"是的，抽象可以替换成其他框架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649230799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316617,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1634454987,"is_pvip":true,"replies":[{"id":"114786","content":"其实思路就是所有获取的东西尽量通过服务容器来获取。这样由服务容器来统一管理所有服务。","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1634687946,"ip_address":"","comment_id":316617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10224389579","product_id":100090601,"comment_content":"也就是说，我们只能根据 Command 拿到服务容器，那怎么拿到 Gin 函数创建的 Engine 结构呢？<br>----- 其实，也可以把httpHandler&#47;*gin.Engine filed直接加到command的结构体中中，这样就不需要绕一个圈子从serviceProvider中拿到Engine结构了。<br><br>当然，上述思路可行但不一定优雅。framework框架层在运行时是可能需要各种服务的，因此直接注入服务容器container是一个更好的办法。这样之后可以直接从服务容器中获取不同的“服务提供方”，而不仅仅局限于一个*gin.Engine。","like_count":2,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528436,"discussion_content":"其实思路就是所有获取的东西尽量通过服务容器来获取。这样由服务容器来统一管理所有服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634687946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333750,"user_name":"Geek_cbab11","can_delete":false,"product_type":"c1","uid":2218967,"ip_address":"","ucode":"EA8C50D4C71419","user_header":"","comment_is_top":false,"comment_ctime":1644496991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5939464287","product_id":100090601,"comment_content":"在业务层console&#47;kernel 加载框架级别的command，这种操作真头疼","like_count":1},{"had_liked":false,"id":317992,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1635089810,"is_pvip":true,"replies":[{"id":"115339","content":"是的，接口能实现解耦合","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1635203634,"ip_address":"","comment_id":317992,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5930057106","product_id":100090601,"comment_content":"问题：之前的返回值是返回了 *gin.Engine。而现在的返回值是返回了 http.Handler，其他的实现没有任何变化。你能看出这样的改动相较之前有什么好处么？<br>回答： http.Handler这是接口类型，接口需要实现ServeHTTP(ResponseWriter, *Request)方法，采用返回http.Handler是解耦engine，若有必要可以替换gin.engine为其他engine（实现了ServeHTTP方法），这也提现面向接口编程的好处，而非具体类型（例如gin.engine）。","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529060,"discussion_content":"是的，接口能实现解耦合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635203634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316465,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1634317158,"is_pvip":true,"replies":[{"id":"114838","content":"命令行工具是有具体的使用场景的。比如运营管理系统。而且命令行逻辑和app的逻辑有很多是可以复用的。单独写一个命令行工具项目也是可以的，但是整合会节省很多复用逻辑","user_name":"作者回复","user_name_real":"叶剑峰","uid":"1069186","ctime":1634693938,"ip_address":"","comment_id":316465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5929284454","product_id":100090601,"comment_content":"似乎是想要app能够使用被集成到核心框架里的不同的web框架，而使用了不同web框架的app可以共享一些核心框架提供的服务，比如可以自定义命令行子命令生成不同类型项目的脚手架等。有些好奇这个方案有没有实际的使用场景，因为看上去不管是整合已有的web框架还是已有的app都存在一定的工作量，不确定整合带来的好处会大于这些工作量。","like_count":1,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528389,"discussion_content":"命令行工具是有具体的使用场景的。比如运营管理系统。而且命令行逻辑和app的逻辑有很多是可以复用的。单独写一个命令行工具项目也是可以的，但是整合会节省很多复用逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634693938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358246,"user_name":"Geek_8585e5","can_delete":false,"product_type":"c1","uid":2446470,"ip_address":"广东","ucode":"CEB57327AA2E0A","user_header":"","comment_is_top":false,"comment_ctime":1664112733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664112733","product_id":100090601,"comment_content":"这一节的代码实现好像有一点绕，个人感觉直接把gin.engine融入cobra的command中更合适","like_count":0},{"had_liked":false,"id":357190,"user_name":"我","can_delete":false,"product_type":"c1","uid":2571736,"ip_address":"中国香港","ucode":"26CA08D0F37ADF","user_header":"https://static001.geekbang.org/account/avatar/00/27/3d/d8/a81b9936.jpg","comment_is_top":false,"comment_ctime":1663055306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663055306","product_id":100090601,"comment_content":"var appStartCommand = &amp;cobra.Command{<br>\tUse:   &quot;start&quot;,<br>\tShort: &quot;启动一个Web服务&quot;,<br>\tRunE: func(c *cobra.Command, args []string) error {<br>\t\t&#47;&#47; 从Command中获取服务容器<br>\t\tcontainer := c.GetContainer()<br>\t\tfmt.Println(container)<br>\t\t&#47;&#47; 从服务容器中获取kernel的服务实例<br>\t\tkernelService := container.MustMake(contract.KernelKey).(contract.Kernel)<br>\t\t&#47;&#47; 从kernel服务实例中获取引擎<br>\t\tcore := kernelService.HttpEngine()<br><br>\t\t&#47;&#47; 创建一个Server服务<br>\t\tserver := &amp;http.Server{<br>\t\t\tHandler: core,<br>\t\t\tAddr:    &quot;:8888&quot;,<br>\t\t}<br><br>\t\t&#47;&#47; 这个goroutine是启动服务的goroutine<br>\t\tgo func() {<br>\t\t\tserver.ListenAndServe()<br>\t\t}()<br><br>\t\t&#47;&#47; 当前的goroutine等待信号量<br>\t\tquit := make(chan os.Signal)<br>\t\t&#47;&#47; 监控信号：SIGINT, SIGTERM, SIGQUIT<br>\t\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)<br>\t\t&#47;&#47; 这里会阻塞当前goroutine等待信号<br>\t\t&lt;-quit<br><br>\t\t&#47;&#47; 调用Server.Shutdown graceful结束<br>\t\ttimeoutCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)<br>\t\tdefer cancel()<br><br>\t\tif err := server.Shutdown(timeoutCtx); err != nil {<br>\t\t\tlog.Fatal(&quot;Server Shutdown:&quot;, err)<br>\t\t}<br><br>\t\treturn nil<br>\t},<br>}<br>我在这container := c.GetContainer()，container为nil，是为什么？<br>已经在<br>&#47; RunCommand  初始化根Command并运行<br>func RunCommand(container framework.Container) error {<br>\t&#47;&#47; 根Command<br>\tvar rootCmd = &amp;cobra.Command{<br>\t\t&#47;&#47; 定义根命令的关键字<br>\t\tUse: &quot;hade&quot;,<br>\t\t&#47;&#47; 简短介绍<br>\t\tShort: &quot;hade 命令&quot;,<br>\t\t&#47;&#47; 根命令的详细介绍<br>\t\tLong: &quot;hade 框架提供的命令行工具，使用这个命令行工具能很方便执行框架自带命令，也能很方便编写业务命令&quot;,<br>\t\t&#47;&#47; 根命令的执行函数<br>\t\tRunE: func(cmd *cobra.Command, args []string) error {<br>\t\t\tcmd.InitDefaultHelpFlag()<br>\t\t\treturn cmd.Help()<br>\t\t},<br>\t\t&#47;&#47; 不需要出现cobra默认的completion子命令<br>\t\tCompletionOptions: cobra.CompletionOptions{DisableDefaultCmd: true},<br>\t}<br><br>\t&#47;&#47; 为根Command设置服务容器<br>\trootCmd.SetContainer(container)<br>\t&#47;&#47; 绑定框架的命令<br>\tcommand.AddKernelCommands(rootCmd)<br>\t&#47;&#47; 绑定业务的命令<br>\tAddAppCommand(rootCmd)<br><br>\t&#47;&#47; 执行RootCommand<br>\treturn rootCmd.Execute()<br>}<br><br>这里设置了container<br>","like_count":0},{"had_liked":false,"id":325467,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638967249,"is_pvip":false,"replies":[{"id":"118658","content":"是的，抽象，不依赖实现","user_name":"作者回复","user_name_real":"编辑","uid":"1069186","ctime":1639608209,"ip_address":"","comment_id":325467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638967249","product_id":100090601,"comment_content":"抽象 反正替换成其他的 是基于net&#47;http实现的都行 ","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539092,"discussion_content":"是的，抽象，不依赖实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639608209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325438,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638956815,"is_pvip":false,"replies":[{"id":"118659","content":"哈哈，命令行后续的想象力其实很大，可以想象很多的快捷功能","user_name":"作者回复","user_name_real":"编辑","uid":"1069186","ctime":1639608243,"ip_address":"","comment_id":325438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638956815","product_id":100090601,"comment_content":"终于到这里了 最爱的环节之一  之前的service provider 让我神清气爽","like_count":0,"discussions":[{"author":{"id":1069186,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/82/32a2bf86.jpg","nickname":"叶剑峰","note":"","ucode":"3974D917C69C29","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539093,"discussion_content":"哈哈，命令行后续的想象力其实很大，可以想象很多的快捷功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639608243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320391,"user_name":"liuis","can_delete":false,"product_type":"c1","uid":1199658,"ip_address":"","ucode":"55416B403EDD91","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/2a/ac7e345f.jpg","comment_is_top":false,"comment_ctime":1636290599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636290599","product_id":100090601,"comment_content":"如果不修改corba和gin的源码，是不是直接用一个全局container变量就行了","like_count":0},{"had_liked":false,"id":319104,"user_name":"姜波","can_delete":false,"product_type":"c1","uid":2174498,"ip_address":"","ucode":"71C3EC6D1CDF5E","user_header":"https://static001.geekbang.org/account/avatar/00/21/2e/22/0883afd6.jpg","comment_is_top":false,"comment_ctime":1635586108,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1635586108","product_id":100090601,"comment_content":"课程源码，请求&#47;demo&#47;demo2报contract demo have not register，不知道咋回事","like_count":0,"discussions":[{"author":{"id":1254562,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/a2/d61e4e28.jpg","nickname":"jack","note":"","ucode":"040741A40A47B9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585017,"discussion_content":"同样遇到这个问题，因为 main.go 里面那个 container（容器） 跟 http.NewHttpEngine() 方法里面 Routes 调用的不是同一个容器，可以在 Bind 方法里面打个日志，用 unsafe.Pointer() 打印对象地址就知道了。 如果想正常运行，那就在 main.go 里面再调用一个绑定，就可以了。后面代码应该会修复这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661273093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082028,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/ac/a6ef560d.jpg","nickname":"wason","note":"","ucode":"02F5F31C3094C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584717,"discussion_content":"在container注册demo.DemoProvider","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661060308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2559238,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0d/06/970cc957.jpg","nickname":"Charles","note":"","ucode":"8ACBA423B5A505","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560099,"discussion_content":"马克，遇到同样的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649172134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1929709,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/71/ed/da7e1243.jpg","nickname":"Duke","note":"","ucode":"ACBBE093849DDE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559259,"discussion_content":"因为在/app/provider/demo下的demo没有注册","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648659597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684113,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","nickname":"zero","note":"","ucode":"27019747CA63FF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538781,"discussion_content":"没有注册","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639503472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}