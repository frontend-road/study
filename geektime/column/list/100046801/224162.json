{"id":224162,"title":"21 | 类似“点击流”这样的海量数据应该如何存储？","content":"<p>你好，我是李玥。</p><p>对于大部分互联网公司来说，数据量最大的几类数据是：点击流数据、监控数据和日志数据。这里面“点击流”指的是在App、小程序和Web页面上的埋点数据，这些埋点数据记录用户的行为，比如你打开了哪个页面，点击了哪个按钮，在哪个商品上停留了多久等等这些。</p><p>当然你不用太担心自己的隐私问题，记录的这些行为数据不是为了监控用户，主要目的是为了从统计上分析群体用户的行为，从而改进产品和运营。比如，某件商品看的人很多，停留时间很长，最后下单购买的人却很少，那采销人员就要考虑是不是这件商品的定价太高了。</p><p>除了点击流数据以外，监控和日志数据都是大家常用的，我就不再多解释了。</p><p>这类数据都是真正“海量”的数据，相比于订单、商品这类业务的数据，数据量要多出2～3个数量级。每天产生的数据量就可能会超过TB（1 TB = 1024 GB）级别，经过一段时间累积下来，有些数据会达到PB（1 PB = 1024 TB）级别。</p><p>这种量级的数据，在大数据技术出现之前，是没法保存和处理的，只能是通过抽样的方法来凑合着做分析。Hadoop等大数据技术出现以后，才使得存储和计算海量数据成为可能。</p><p>今天这节课，我们来说说，应该选择什么样的存储系统，来保存像“点击流”这样的海量数据。</p><!-- [[[read_end]]] --><h2>使用Kafka存储海量原始数据</h2><p>早期对于这类海量原始数据，都倾向于<strong>先计算再存储</strong>。也就是，在接收原始数据的服务中，先进行一些数据过滤、聚合等初步的计算，将数据先收敛一下，再落存储。这样可以降低存储系统的写入压力，也能节省磁盘空间。</p><p>这几年，随着存储设备越来越便宜，并且，数据的价值被不断地重新挖掘，更多的大厂都倾向于<strong>先存储再计算</strong>，直接保存海量的原始数据，再对数据进行实时或者批量计算。这种方案，除了贵以外都是优点：</p><ul>\n<li>不需要二次分发就可以同时给多个流和批计算任务提供数据；</li>\n<li>如果计算任务出错，可以随时回滚重新计算；</li>\n<li>如果对数据有新的分析需求，上线后直接就可以用历史数据计算出结果，而不用去等新数据。</li>\n</ul><p>但是，这种方式对保存原始数据的存储系统要求就很高了：既要有足够大的容量，能水平扩容，还要读写都足够快，跟得上数据生产的写入速度，还要给下游计算提供低延迟的读服务。什么样的存储能满足这样的要求呢？这里我给出几种常用的解决方案。</p><p>第一种方案是，使用Kafka来存储。有的同学会问了，Kafka不是一个消息队列么，怎么成了存储系统了？那我告诉你，<strong>现代的消息队列，本质上就是分布式的流数据存储系统。</strong></p><p>如果你感兴趣的话，你可以仔细去研究一下Kafka，它的数据是如何存储、分片、复制的？它是如何保证高可用，如何保证数据一致性的？那你会发现它和我们之前讲过的那些分布式存储系统，并没有什么太大的区别。唯一的区别就是，它的查询语言（生产和消费消息）和存储引擎的数据结构（Commit Log）比一般的存储系统要简单很多。但也正是因为这个原因，使得Kafka的读写性能远远好于其他的存储系统。Kafka官方给自己的定位也是“分布式流数据平台”，不只是一个MQ。</p><p>Kafka提供“无限”的消息堆积能力，具有超高的吞吐量，可以满足我们保存原始数据的大部分要求。写入点击流数据的时候，每个原始数据采集服务作为一个生产者，把数据发给Kafka就可以了。下游的计算任务，可以作为消费者订阅消息，也可以按照时间或者位点来读取数据。并且，Kafka作为事实标准，和大部分大数据生态圈的开源软件都有非常好的兼容性和集成度，像Flink、Spark等大多计算平台都提供了直接接入Kafka的组件。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/8c/ba6bae1b4e59ba2000f0789886248d8c.jpg?wh=1876*1570\" alt=\"\"></p><p>当然，Kafka也不是万能的，你可能注意到了，我刚刚讲Kafka提供“无限”的消息堆积能力，我在这个“无限”上打了个引号，这里面还是有一些限制需要注意的。Kafka也支持把数据分片，这个在Kafka中叫Partition，每个分片可以分布到不同的存储节点上。</p><p>写入数据的时候，可以均匀地写到这些分片上，理论上只要分片足够多，存储容量就可以是“无限”的。但是，单个分片总要落到某一个节点上，而单节点的存储容量毕竟是有限的，随着时间推移，单个分片总有写满的时候。</p><p>即使它支持扩容分片数量，也没办法像其他分布式存储系统那样，重新分配数据，把已有分片上的数据迁移一部分到新的分片上。所以扩容分片也解决不了已有分片写满的问题。而Kafka又不支持按照时间维度去分片，所以，<strong>受制于单节点的存储容量，Kafka实际能存储的数据容量并不是无限的</strong>。</p><h2>Kafka之外还有哪些解决方案？</h2><p>所以，需要长时间（几个月-几年）保存的海量数据，就不适合用Kafka存储。这种情况下，只能退而求其次，使用第二种方案了。</p><p>第二种方案是，使用HDFS来存储。使用HDFS存储数据也很简单，就是把原始数据写成一个一个文本文件，保存到HDFS中。我们需要按照时间和业务属性来组织目录结构和文件名，以便于下游计算程序来读取，比如说：<strong>“click/20200808/Beijing_0001.csv”</strong>，代表2020年8月8日，从北京地区用户收集到的点击流数据，这个是当天的第一个文件。</p><p>对于保存海量的原始数据这个特定的场景来说，HDFS的吞吐量是远不如Kafka的。按照平均到每个节点上计算，Kafka的吞吐能力很容易达到每秒钟大几百兆，而HDFS只能达到百兆左右。这就意味着，要达到相同的吞吐能力，使用HDFS就要比使用Kafka，多用几倍的服务器数量。</p><p>但HDFS也有它的优势，第一个优势就是，它能提供真正无限的存储容量，如果存储空间不够了，水平扩容就可以解决。另外一个优势是，HDFS能提供比Kafka更强的数据查询能力。Kafka只能按照时间或者位点来提取数据，而HDFS配合Hive直接就可以支持用SQL对数据进行查询，虽然说查询的性能比较差，但查询能力要比Kafka强大太多了。</p><p>以上这两种方案因为都有各自的优势和不足，在实际生产中，都有不少的应用，你可以根据业务的情况来选择。那有没有兼顾这二者优势的方案呢？最好能做到，既有超高的吞吐能力，又能无限扩容，同时还能提供更好的查询能力，有这样的好事儿么？</p><p>我个人的判断是，目前还没有可用大规模于生产的，成熟的解决方案，但未来应该会有的。目前已经有一些的开源项目，都致力于解决这方面的问题，你可以关注一下。</p><p>一类是<strong>分布式流数据存储</strong>，比较活跃的项目有<a href=\"https://github.com/pravega/pravega\">Pravega</a>和Pulsar的存储引擎<a href=\"https://github.com/apache/bookkeeper\">Apache BookKeeper</a>。我所在的团队也在这个方向上持续探索中，也开源了我们的流数据存储项目<a href=\"https://github.com/chubaostream/journalkeeper\">JournalKeeper</a>，也欢迎你关注和参与进来。这些分布式流数据存储系统，走的是类似Kafka这种流存储的路线，在高吞吐量的基础上，提供真正无限的扩容能力，更好的查询能力。</p><p>还有一类是<strong>时序数据库（Time Series Databases）</strong>，比较活跃的项目有<a href=\"https://github.com/influxdata/influxdb\">InfluxDB</a>和<a href=\"https://github.com/OpenTSDB/opentsdb\">OpenTSDB</a>等。这些时序数据库，不仅有非常好的读写性能，还提供很方便的查询和聚合数据的能力。但是，它们不是什么数据都可以存的，它们专注于类似监控数据这样，有时间特征并且数据内容都是数值的数据。如果你有存储海量监控数据的需求，可以关注一下这些项目。</p><h2>小结</h2><p>在互联网行业，点击流、监控和日志这几类数据，是海量数据中的海量数据。对于这类数据，一般的处理方式都是先存储再计算，计算结果保存到特定的数据库中，供业务系统查询。</p><p>所以，对于海量原始数据的存储系统，我们要求的是超高的写入和读取性能，和近乎无限的容量，对于数据的查询能力要求不高。生产上，可以选择Kafka或者是HDFS，Kafka的优点是读写性能更好，单节点能支持更高的吞吐量。而HDFS则能提供真正无限的存储容量，并且对查询更友好。</p><p>未来会有一些开源的流数据存储系统和时序数据库逐步成熟，并陆续应用到生产系统中去，你可以持续关注这些项目。</p><h2>思考题</h2><p>课后请你想一下，为什么Kafka能做到几倍于HDFS的吞吐能力，技术上的根本原因是什么？欢迎你在留言区与我讨论。</p><p>感谢你的阅读，如果你觉得今天的内容对你有帮助，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":206245,"user_name":"李玥","can_delete":false,"product_type":"c1","uid":1501046,"ip_address":"","ucode":"B19E91EE248591","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","comment_is_top":true,"comment_ctime":1586829047,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"9.223372205945301e+18","product_id":100046801,"comment_content":"Hi，我是李玥。<br><br>这里回顾一下上节课的思考题：<br><br>我们整个切换的方案中，只有一个步骤是不可逆的，就是由双写切换为单写新库这一步。如果说不计成本，如何修改我们的迁移方案，让这一步也能做到快速回滚？<br><br>答案：<br><br>双写切新库单写这一步不可逆的主要原因是，一旦切为新库单写，旧库的数据就和新库不一致了，这时候就没法再切回旧库了。所以，问题的关键是，切到新库单写后，需要保证旧库的数据和新库保持同步。那我们的双写就要增加一种过渡状态：就是从双写以旧库为准，过渡到双写以新库为准。然后把比对和补偿程序反过来，用新库的数据补偿旧库的数据。这样就可以做到，一旦出问题，再切回到旧库上了。","like_count":40,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368983,"discussion_content":"这种实际处理就麻烦了而且实际在业务代码里处理起来也不容易 我们的做法是出了问题就在新库处理 前提是双写期间bug都修完了 。这时候你切到新库自然就可以","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618896666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307467,"discussion_content":"双写如果以新库为准，那么新库写失败就不会去写旧库了。所以，不存在你说的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600660583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476450,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","nickname":"曙光","note":"","ucode":"04D65BF7F19845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239258,"discussion_content":"老师，有个问题。双写的时候存在旧库成功，新库失败的情况。如果这样逆向操作，同样也存在，双写的时候没问题，但过渡状态中，新库写入失败(双写的时候，旧库可以成功)，旧库又是在新库中获取数据，那这部分数据就没了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587288570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206198,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1586822627,"is_pvip":false,"replies":[{"id":"77008","content":"哈哈，现学现卖。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1586829552,"ip_address":"","comment_id":206198,"utype":1}],"discussion_count":2,"race_medal":0,"score":"203450285539","product_id":100046801,"comment_content":"Kafka 性能高的原因<br>1.采用批处理的方式提升吞吐量<br>2.利用了磁盘文件顺序读写性能高的特点在设计存储<br>3.利用了操作系统的 PageCache 做缓存，减少 IO<br>4.采用零拷贝技术加速消费流程<br>来自老师第一个专栏","like_count":48,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491710,"discussion_content":"哈哈，现学现卖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586829552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365177,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvMlvSXsYgJibgutQdyFT6LsrXuvbjWVh0UpcF4esLzlWzBRlsFHA9MyBY38ibngKAN8mDn6DdHnMQ/132","nickname":"taotaowang","note":"","ucode":"108489DD55723A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311604,"discussion_content":"老师的消息队列专栏真的很不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602417090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208192,"user_name":"Sparrow","can_delete":false,"product_type":"c1","uid":1693667,"ip_address":"","ucode":"88D3F3920C68BC","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/e3/e6cf6352.jpg","comment_is_top":false,"comment_ctime":1587297858,"is_pvip":false,"replies":[{"id":"77826","content":"这个比喻非常形象哈。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1587349403,"ip_address":"","comment_id":208192,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83191676482","product_id":100046801,"comment_content":"虽然hdfs和kafka都可以用来做存储, 但 kafka在使用方面像磁带; hdfs更像硬盘","like_count":20,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492374,"discussion_content":"这个比喻非常形象哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587349403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366574,"discussion_content":"kafka更像是内存，hdfs更像是硬盘\nkafka跟redis一样，分布式内存支持水平扩展，但无法自动数据迁移\nhdfs基于硬盘，操作上麻烦了点，记录目录结构和文件名（kafaka根据名称直接消费），但可以无限扩容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618121149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211738,"user_name":"seg-上海","can_delete":false,"product_type":"c1","uid":1760320,"ip_address":"","ucode":"46BA8DCB06ED5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBllicLBj61g1ibmCeWzLYpQYEteTOtAAAypoIg6CD19ibXQBbM09VsME9Ta1G8ubwk0ibjiacItavibaeg/132","comment_is_top":false,"comment_ctime":1588000078,"is_pvip":false,"replies":[{"id":"78792","content":"理论上是可以的，但实际操作起来就比较麻烦。<br>你要知道哪些分区已经满了，哪些没满，指定去写那些还有空间的分区。额外增加了管理成本，对数据采集系统也不友好。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1588050127,"ip_address":"","comment_id":211738,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31652771150","product_id":100046801,"comment_content":"老师，文中提到“Kafka 实际能存储的数据容量并不是无限的”，那如果不断的加新的broker，然后同时新增分片，是不是可以做到无限的扩展存储呢","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493349,"discussion_content":"理论上是可以的，但实际操作起来就比较麻烦。\n你要知道哪些分区已经满了，哪些没满，指定去写那些还有空间的分区。额外增加了管理成本，对数据采集系统也不友好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588050127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259387,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1082132,"ip_address":"","ucode":"483350A630625E","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/14/099742ae.jpg","comment_is_top":false,"comment_ctime":1604717429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10194652021","product_id":100046801,"comment_content":"pulsar 采用存算分离的结构，能够快速扩容计算节点和存储节点。且扩容后，新的计算节点和存储节点能够快速承担起计算和存储的责任，因此我觉得，pulsar 能够做到无限存储且查询能力和kafka 类似。","like_count":3},{"had_liked":false,"id":249448,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1600659897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895627193","product_id":100046801,"comment_content":"kafka的零拷贝，顺序读写","like_count":1},{"had_liked":false,"id":206192,"user_name":"黄海峰","can_delete":false,"product_type":"c1","uid":1275357,"ip_address":"","ucode":"E9340719BC96B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dd/9ead6e69.jpg","comment_is_top":false,"comment_ctime":1586821933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881789229","product_id":100046801,"comment_content":"求更多介绍分布式流数据存储和时序数据库。。。尤其是你们有在研发journalkeeper，求干货，怎么高吞吐无限扩容及强大查询。。。","like_count":1},{"had_liked":false,"id":206178,"user_name":"滴流乱转小胖儿","can_delete":false,"product_type":"c1","uid":1231250,"ip_address":"","ucode":"4689236E65FE4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/92/6361802a.jpg","comment_is_top":false,"comment_ctime":1586817137,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5881784433","product_id":100046801,"comment_content":"老师你好，对于大数据存储，使用Elasticsearch是否可以？","like_count":2,"discussions":[{"author":{"id":1760320,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBllicLBj61g1ibmCeWzLYpQYEteTOtAAAypoIg6CD19ibXQBbM09VsME9Ta1G8ubwk0ibjiacItavibaeg/132","nickname":"seg-上海","note":"","ucode":"46BA8DCB06ED5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250328,"discussion_content":"ES 存储数据量多的时候，第一次查询会比较慢，等数据缓存到filesystem cache就会很快，但毕竟cache使用的内存是有限的，所以采用es + hbase的架构会好一点","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587999939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366575,"discussion_content":"es更适合实时查询吧，构建成本更高\n这节更侧重存储原始数据，并用以分析","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618121320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232051,"discussion_content":"ES 也是一个原生的分布式存储系统","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586848658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287556,"discussion_content":"es 也不大适合长期存储，毕竟成本也是挺高的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593481309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303257,"user_name":"Geek_a78004","can_delete":false,"product_type":"c1","uid":1509684,"ip_address":"","ucode":"E484DA13E139BC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKeqZb7U4s6SdhELAaPIHjyYevcjQBR17oH7TrkU3SugSUm7SZdgL9IJ2C8NOby6icHKYCJzdSlF6w/132","comment_is_top":false,"comment_ctime":1626688516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626688516","product_id":100046801,"comment_content":"老师您好，在读少写多的场景下，cassandra是不是更有利呢？","like_count":0},{"had_liked":false,"id":289170,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1618902035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618902035","product_id":100046801,"comment_content":"kafka性能好有以下几点：<br>1. 本身是攒起来一批批发的 所以会有个batch.size 底层是bytebuffer打包做的<br>2. 本身操作系统就是write back 这部分和文件系统本身做法是一样的 当然对操作系统很友好<br>3. 做了一些index文件做了mmap log文件存的是文件内偏移量 这一部分网上资料一大堆","like_count":0},{"had_liked":false,"id":288063,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1618284218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618284218","product_id":100046801,"comment_content":"“受制于单节点的存储容量，Kafka 实际能存储的数据容量并不是无限的。”<br>-------------<br>老师好，我理解单节点存储容量如果达到上限，可以增加broker机器，然后将容量达到上限的那个broker的一部分分区重分配到新增的broker上就可以把数据移走了，那么单节点上限应该就解决了。","like_count":0},{"had_liked":false,"id":287713,"user_name":"夜辉","can_delete":false,"product_type":"c1","uid":1886331,"ip_address":"","ucode":"9421385F51FF9E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","comment_is_top":false,"comment_ctime":1618120940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618120940","product_id":100046801,"comment_content":"本质上因为Kafka采用复制状态机 (Replication State Machine)模型<br>同时底层对各种IO操作进行了优化 ","like_count":1},{"had_liked":false,"id":249799,"user_name":"独酌相思解千愁","can_delete":false,"product_type":"c1","uid":1653628,"ip_address":"","ucode":"578995696A1482","user_header":"https://static001.geekbang.org/account/avatar/00/19/3b/7c/a977d9a9.jpg","comment_is_top":false,"comment_ctime":1600804654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600804654","product_id":100046801,"comment_content":"老师，问个题外话。怎么探测热点数据呢。比如数，目前数据库中有很多数据，某些时间可能在一段时间访问次数很多。怎么探测这个呢。类似于微博大V发了一条微博，或者某时间出现某个爆炸性新闻。","like_count":0}]}