{"id":782484,"title":"18｜类型对象：虚拟机如何识别对象的类型？","content":"<p>你好，我是海纳。</p><p>到目前为止，我们已经实现了 Python 虚拟机中最重要的四个基本类型，也就是整数、字符串、列表和字典。为了实现这些基本类型，我们已经完成了很多类和对象的相关机制。其中包括打印、比较等常规的通用操作，也包括对数据元素的增删查改，以及排序、遍历等操作。</p><p>接下来的三节课，我们准备实现完备的对象系统，从而实现面向对象编程的大部分能力。前边的课程，每一段代码都能实现一个具体的功能，但从这一节课开始，内容会变得有点抽象。如果你学一遍不能理解的话，也不用灰心，可以静下心来多读几遍，想一想如果这个特性让你自己设计还有没有更好方法。慢慢的你就能理解了。</p><p>面向对象编程这一部分包括自定义类型、运行时判断对象类型、继承、函数和操作符重载等特性。这一节课我们先从类型说起。</p><h2>实现类型对象</h2><p>从刚开始学习编程的时候，我们就一直在和类型打交道。例如，我们说一个整型变量，其实就是指某个变量，它的类型是整型。</p><p>不同语言对于类型的处理非常不一样。有的语言是静态编译阶段决定的，运行时不能再修改，有的语言则支持运行时修改变量的类型。有的语言不需要程序员指定变量类型，还有的语言有复杂的类型推断系统帮助程序员简化开发。总之，每种语言对自己的类型系统都有独到的设计。那 Python 中的类型是如何设计的呢？</p><!-- [[[read_end]]] --><p>我们先用一个简单的例子来考察 Python 中的类型到底是什么。</p><pre><code class=\"language-python\">print(list)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &lt;type 'list'&gt;\n\nlst = list()\nprint(lst)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# []\nlst.append(1)\nprint(lst)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# [1]\nprint(isinstance(lst, list)) # True\n</code></pre><p>这段代码里的 list 代表的是列表的类型，它首先是一个对象，所以能够被打印（第 1 行）。但又和我们以前所接触的所有对象都不同，因为它还代表了一个类型。</p><p>我们像调用函数一样调用它，得到了一个列表的实例 lst。打印 lst，显示这是一个空列表，接下来可以对这个列表对象进行各种操作。这说明通过这种方式得到的列表对象和以前直接使用空列表进行赋值，是完全等价的。</p><p>list 的特别之处在于它看上去是一个类型，但它同时又是一个对象。在我们的虚拟机里，类型是使用 Klass 表示的，对象则都是继承自 HiObject。如果有一个东西既是类型，也是对象，一个最直接的做法是让 Klass 也继承自 HiObject，然后这个类型就可以被叫做 TypeObject。</p><p>如果这样做的话，我们前边辛辛苦苦建立起来的 Klass-Oop 二分结构就模糊掉了，你可以沿着这个思路再往下想一下，这个类型对象的 Klass 该怎么设计，然后很快你就会发现这个思路太烧脑，稍有不慎就会掉到思维的陷阱中去。</p><p>这里，我们选择一个不同的做法，既然 Klass 继承自 Object 不是一个好主意，在面向对象的程序设计中，当继承会带来混乱的时候，人们往往会选择使用组合。所以这里，我们就尝试使用组合来解决问题。</p><p>在 Klass 中引入一个 HiObject，让 Klass 和这个 HiObject 一一对应。当上下文中需要它是一个对象的时候，比如要打印这个对象，修改这个对象的属性等，就让 HiObject 出面。当需要它是一个类型的时候，比如创建这个类型的新对象，调用这个类型上定义的某个方法等，就让 Klass 出面。这样做的话，对象关系就简单清晰多了。</p><p>按照这个思路，我们可以定义一个名为 HiTypeObject 的类。</p><pre><code class=\"language-c++\">/*&nbsp;\n&nbsp;* [object/hiObject.hpp]\n&nbsp;* meta-klass for the object system.\n&nbsp;*/\nclass TypeKlass : public Klass {\nprivate:\n&nbsp; &nbsp; TypeKlass() {}\n&nbsp; &nbsp; static TypeKlass* instance;\n\npublic:\n&nbsp; &nbsp; static TypeKlass* get_instance();\n\n&nbsp; &nbsp; virtual void print(HiObject* obj);\n};\n\nclass HiTypeObject : public HiObject {\nprivate:\n&nbsp; &nbsp; Klass*&nbsp; _own_klass;\n\npublic:\n&nbsp; &nbsp; HiTypeObject();\n\n&nbsp; &nbsp; void&nbsp; &nbsp; set_own_klass(Klass* k);\n&nbsp; &nbsp; Klass*&nbsp; own_klass()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ return _own_klass; }\n};\n\n// [object/hiObject.cpp]\nHiTypeObject::HiTypeObject() {\n&nbsp; &nbsp; set_klass(TypeKlass::get_instance());\n}\n\n// [object/klass.hpp]\nclass Klass {\nprivate:\n&nbsp; &nbsp; Klass*&nbsp; &nbsp; &nbsp; &nbsp; _super;\n&nbsp; &nbsp; HiTypeObject* _type_object;\n&nbsp; &nbsp; ...\npublic:\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; void set_type_object(HiTypeObject* x) { _type_object = x; }\n&nbsp; &nbsp; HiTypeObject* type_object()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ return _type_object; }\n&nbsp; &nbsp; ...\n};\n</code></pre><p>如图所示，这个特殊的对象上有两个 Klass 引用，一个是继承自 HiObject 的 _klass 属性，代表这个对象本身的类型。另一个是 own_klass 指向与它绑定的 Klass，图中就是 ListKlass。所有的 HiTypeObject 对象的 _klass 都指向 TypeKlass。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/91/c4a19f1af604d2a6yy15d90a24ba4191.png?wh=1920x954\" alt=\"图片\"></p><p>如果某个程序要打印一个 HiTypeObject 的对象的时候，就要把这个对象当成一个普通的 HiObject 来看待，所以我们和之前实现整型对象一样，在 TypeKlass 里实现打印的功能。</p><pre><code class=\"language-c++\">void TypeKlass::print(HiObject* obj) {\n&nbsp; &nbsp; Klass* own_klass = obj-&gt;as&lt;HiTypeObject&gt;()-&gt;own_klass();\n&nbsp; &nbsp; printf(\"&lt;class \");\n&nbsp; &nbsp; own_klass-&gt;name()-&gt;print();\n&nbsp; &nbsp; printf(\"&gt;\");\n}\n</code></pre><p>这个 print 的方法比较简单，先打印一个字符串class，表示这是一个类型对象，然后把 own_klass 的 name 打出来就可以了。</p><p>接着，我们来让 HiTypeObject 与 Klass 相互绑定。</p><pre><code class=\"language-c++\">// [object/hiObject.cpp]\nvoid HiTypeObject::set_own_klass(Klass* k) {\n&nbsp; &nbsp; _own_klass = k;&nbsp;\n&nbsp; &nbsp; k-&gt;set_type_object(this);\n}\n\n// [object/hiList.cpp]\nvoid ListKlass::initialize() {\n&nbsp; &nbsp; HiDict * klass_dict = new HiDict();\n&nbsp; &nbsp; klass_dict-&gt;put(new HiString(\"append\"),&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; new FunctionObject(list_append));\n    //...\n&nbsp; &nbsp; set_klass_dict(klass_dict);\n&nbsp; &nbsp; (new HiTypeObject())-&gt;set_own_klass(this);\n&nbsp; &nbsp; set_name(new HiString(\"list\"));\n}\n\n\n\n// [object/hiInteger.cpp]\n...\n\n// [object/hiString.cpp]\nvoid StringKlass::initialize() {\n&nbsp; &nbsp; HiDict* klass_dict = new HiDict();\n&nbsp; &nbsp; klass_dict-&gt;put(new HiString(\"upper\"), new FunctionObject(string_upper));\n\n&nbsp; &nbsp; set_klass_dict(klass_dict);\n&nbsp; &nbsp; (new HiTypeObject())-&gt;set_own_klass(this);\n&nbsp; &nbsp; set_name(new HiString(\"str\"));\n}\n\n// [object/hiDict.cpp]\nvoid DictKlass::initialize() {\n&nbsp; &nbsp; HiDict* klass_dict = new HiDict();\n\n&nbsp; &nbsp; klass_dict-&gt;put(new HiString(\"setdefault\"),\n&nbsp; &nbsp; &nbsp; &nbsp; new FunctionObject(dict_set_default));\n&nbsp; &nbsp; // ...\n&nbsp; &nbsp; set_klass_dict(klass_dict);\n&nbsp; &nbsp; (new HiTypeObject())-&gt;set_own_klass(this);\n&nbsp; &nbsp; set_name(new HiString(\"dict\"));\n}\n</code></pre><p>这段代码里的 set_own_klass 方法实现了 klass 与 HiObject 的相互绑定（第 2 至 5 行）。然后在所有的内建类型中，都创建了一个新的 HiTypeObject 对象，与代表这个类型的 Klass 绑定。在整数类型、字符串类型、列表和字典类型中都要添加相同的操作，代码逻辑比较简单，这里我就不再详细解释了。</p><p>这里有一点代码的重构需要你注意一下。之前的实现中，所有的 Klass 初始化操作都安排在构造函数中。随着内建类型越来越多，相互依赖关系就变得非常复杂。例如，字典的初始化操作依赖字符串，字符串的初始化操作也依赖于字典。</p><p>TypeKlass 的初始化也存在同样的问题，它从 Klass 继承了一个指向 TypeObject 的引用，由于创建 TypeObject 对象的时候要使用 TypeKlass，如果在构造函数里做初始化工作，这种循环依赖就会造成无限递归。</p><p>为了解决相互依赖的问题，我们把单例类的构造与初始化进行分离，抽象出 initialize 方法以单独负责 Klass 的初始化。而构造函数全部变成空的，也就是说创建 Klass 实例阶段什么也不做。这样就能保证创建的时候一定是成功的。</p><p>根据这样的思路，TypeKlass 初始化代码就可以这样实现：</p><pre><code class=\"language-c++\">void TypeKlass::initialize() {\n&nbsp; &nbsp; HiTypeObject* tp_obj = new HiTypeObject();\n&nbsp; &nbsp; set_name(new HiString(\"type\"));\n&nbsp; &nbsp; tp_obj-&gt;set_own_klass(this);\n}\n</code></pre><p>把构造和初始化分成两步执行以后，在 initialize 执行的时候，所有的 Klass 实例都已经构造完成了，这个时候就可以随意地使用各种数据类型，而不用担心循环依赖的问题。重构以后的 genesis 函数也变得非常清晰。</p><pre><code class=\"language-c++\">void Universe::genesis() {\n    HiTrue       = new HiString(\"True\");\n    HiFalse      = new HiString(\"False\");\n    HiNone       = new HiString(\"None\");\n\n    TypeKlass::get_instance()-&gt;initialize();\n    DictKlass::get_instance()-&gt;initialize();\n    StringKlass::get_instance()-&gt;initialize();\n    ListKlass::get_instance()-&gt;initialize();\n}\n</code></pre><p>做完了这个工作以后，我们就会看到如下图所示的结构，TypeKlass 会与它自己的 TypeObject 形成一个循环引用，除此之外，它和其他的 Klass 并没有什么本质的不同。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/33/c250324e2b6f9befd6847fe9b2b12533.png?wh=1440x982\" alt=\"图片\"></p><p>最后一个步骤，由于 <code>\"int\"</code> <code>\"list\"</code> 等符号都是内建的，就像这部分开始的时候那个例子，我们可以直接在代码中使用这些符号，而这些符号所绑定的其实就是 TypeObject 对象。我们来把这些符号放到内建表里。</p><pre><code class=\"language-c++\">Interpreter::Interpreter() {\n&nbsp; &nbsp; _builtins = new HiDict();\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"int\"),&nbsp; &nbsp; &nbsp; IntegerKlass::get_instance()-&gt;type_object());\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"str\"),&nbsp; &nbsp; &nbsp; StringKlass::get_instance()-&gt;type_object());\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"list\"),&nbsp; &nbsp; &nbsp;ListKlass::get_instance()-&gt;type_object());\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"dict\"),&nbsp; &nbsp; &nbsp;DictKlass::get_instance()-&gt;type_object());\n}\n</code></pre><p>到这里为止，我们的虚拟机就可以正确地执行 <code>print(list)</code> 这条语句了。</p><p>有了类型对象， 接下来就可以实现 isinstance 方法，以及通过调用类型来创建对象这两个重要功能了。但是在实现这两个功能之前，我们必须再完善一个功能，那就是实现 object 这个公共基类。</p><h2>实现公共基类 object</h2><p>在 Python 中，所有的类都是object的子类，无论整数、字符串、列表还是其他的用户自定义的类，无一例外。这里我们就来实现object这个公共基类。</p><p>和 list、int 这些符号一样，object 也代表了一种类型。这个类型就是人们常说的普通对象类型。实际上，在虚拟机还处在最早的阶段时，就已经有了 HiObject 类了。虚拟机执行的计算、运行时栈、全局变量表、局部变量表等等，所有的机制都是建立在 HiObject 的基础上。</p><p>但是在这节课之前，我们从来没有考虑过，如果使用 <code>new HiObject()</code> 语句创建一个单独的对象，那它的 Klass 应该是什么呢？所以这里就需要为 HiObject 定义新的 Klass，我们就叫它ObjectKlass。</p><pre><code class=\"language-c++\">// [object/hiObject.hpp]\nclass ObjectKlass : public Klass {\nprivate:\n&nbsp; &nbsp; ObjectKlass();\n&nbsp; &nbsp; static ObjectKlass* instance;\n\npublic:\n&nbsp; &nbsp; static ObjectKlass* get_instance();\n};\n\n// [object/hiObject.cpp]\nObjectKlass* ObjectKlass::instance = NULL;\n\nObjectKlass::ObjectKlass() {\n&nbsp; &nbsp; set_super(NULL);\n}\n\nObjectKlass* ObjectKlass::get_instance() {\n&nbsp; &nbsp; ...\n}\n</code></pre><p>这个定义平平无奇，但它其实引发了整个对象体系的大地震。就像这部分刚开始提到的，在Python 中，所有的类都是object的子类，我们必须正确地表达这种继承关系。</p><p>其实在 Klass 的结构里，我们早早就留下了与继承相关的一个属性，就是 super。</p><p><img src=\"https://static001.geekbang.org/resource/image/12/18/121cc1df376149eabf50d058f9105218.png?wh=1940x1102\" alt=\"图片\"></p><p>如图所示，通过设置 super 属性，完整的继承体系就建立起来了。我们这里只以 IntegerKlass 的初始化代码来说明，其他的三种类型就不一一展示了，你可以自己修改。</p><pre><code class=\"language-c++\">void IntegerKlass::initialize() {\n&nbsp; &nbsp; set_name(new HiString(\"int\"));\n&nbsp; &nbsp; (new HiTypeObject())-&gt;set_own_klass(this);\n&nbsp; &nbsp; set_super(ObjectKlass::get_instance());\n}\n</code></pre><p>在继承体系下，一个对象既是它的直接类型的实例，又是它的直接类型的父类的实例。比如整数 3，它的直接类型是 IntegerKlass，所以它是 int 类型的实例，IntegerKlass 的父类是 ObjectKlass，所以它同时又是 object 类型的实例。</p><p>在继承体系建立好以后，Python 中一切皆是 object 就有了最直观的理解：Python 中的继承关系是通过 Klass 的 super 指针串联起来的，所有类型的 Klass 沿着它的 super 指针向上查找，最终都会停留在 ObjectKlass里。</p><p>理解了这个逻辑，实现 isinstance 函数就成了一个很简单的任务了。isinstance 函数的作用是检查一个对象是否是某一种类型的实例。所以，我们先检查这个对象的直接类型，然后顺着继承链向上查找就可以了。</p><pre><code class=\"language-c++\">// [runtime/functionObject.cpp]\nHiObject* isinstance(HiList* args) {\n&nbsp; &nbsp; HiObject* x = args-&gt;get(0);\n&nbsp; &nbsp; HiTypeObject* y = args-&gt;get(1)-&gt;as&lt;HiTypeObject&gt;();\n\n&nbsp; &nbsp; Klass* k = x-&gt;klass();\n&nbsp; &nbsp; while (k != nullptr) {\n&nbsp; &nbsp; &nbsp; &nbsp; if (k == y-&gt;own_klass())\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return Universe::HiTrue;\n\n&nbsp; &nbsp; &nbsp; &nbsp; k = k-&gt;super();\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return Universe::HiFalse;\n}\n\n// [runtime/interpreter.cpp]\nInterpreter::Interpreter() {\n&nbsp; &nbsp; _builtins = new HiDict();\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"len\"),&nbsp; &nbsp; &nbsp; new FunctionObject(len));\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"isinstance\"),new FunctionObject(isinstance));\n}\n</code></pre><p>我们把前边出现的所有图综合起来，就可以得到下面这张图了。这张图展现了对象系统的全景。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/e6/2e73e7d63d7f4bde3738518b2d56e4e6.png?wh=2164x880\" alt=\"图片\"></p><p>这里我还要特别讲一下 type 函数的实现。这个函数的作用是返回一个对象的类型。在我们的虚拟机中，表示对象的类型是使用 TypeObject，所以type 函数的实现，其实就是找到一个对象的 klass，然后取和这个 klass 相绑定的 TypeObject 对象。</p><pre><code class=\"language-c++\">// [runtime/functionObject.cpp]\nHiObject* type_of(HiList* args) {\n&nbsp; &nbsp; HiObject* arg0 = args-&gt;get(0);\n&nbsp; &nbsp; return arg0-&gt;klass()-&gt;type_object();\n}\n\n// [runtime/interpreter.cpp]\nInterpreter::Interpreter() {\n&nbsp; &nbsp; _builtins = new HiDict();\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"type\"),&nbsp; &nbsp; &nbsp;new FunctionObject(type_of));\n&nbsp; &nbsp; _builtins-&gt;put(new HiString(\"isinstance\"),new FunctionObject(isinstance));\n}\n</code></pre><p>使用 type 函数，结合类型系统的全景图，就可以理解以下几行语句的执行结果为什么是这样了，代码中的注释部分就是这条语句的执行结果，你可以看一下。</p><pre><code class=\"language-python\">t = type(1)\nprint(t)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# &lt;class 'int'&gt;\nprint(type(t))&nbsp; &nbsp;# &lt;class 'type'&gt;\n\ni = 0\nwhile i &lt; 5:\n&nbsp; &nbsp; t = type(t)\n&nbsp; &nbsp; print(t)&nbsp; &nbsp; &nbsp;# &lt;class 'type'&gt;\n&nbsp; &nbsp; i = i + 1\n</code></pre><p>当 t 为 HiTypeObject 时，它的 klass 就是 TypeKlass。所以对它调用 type 函数，结果就是 TypeKlass 所对应的 TypeObject。再取这个 TypeObject 的 type ，就会得到其自身。</p><p>类型的判断功能基本已经完成了，接下来，我们重点关注通过类型创建对象的功能。</p><h2>通过类型创建对象</h2><p>将类型作为函数调用来创建对象是类型系统中最重要的一个功能。我们先来看一个例子和它所对应的字节码。</p><pre><code class=\"language-c++\">a = int()\n#&nbsp; 0 LOAD_NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 (int)\n#&nbsp; 3 CALL_FUNCTION&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0\n#&nbsp; 6 STORE_NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 (a)\n\nprint(a)\nb = str(\"hello\")\nprint(b)\nc = list()\nprint(c)\nd = dict()\nprint(d)\n</code></pre><p>在代码里，反编译出的字节码清楚地显示，把类型对象 int 作为函数，执行CALL_FUNCTION。</p><p>到目前为止，我们所实现的 CALL_FUNCTION 只能对 MethodObject、FunctionObject 进行调用，所以我们必须增加对 TypeObject 的支持。</p><p>TypeObject 被调用的时候，我们可以通过它的 own_klass 来创建对象。如果 own_klass 是 IntegerKlass，就创建整数对象；如果 own_klass 是 ListKlass，就创建列表对象。</p><p>我们分两步来实现这个功能，首先是在 CALL_FUNCTION 里增加对 TypeObject 的支持。</p><pre><code class=\"language-c++\">void Interpreter::build_frame(HiObject* callable, ObjList args) {\n&nbsp; &nbsp; if (callable-&gt;klass() == NativeFunctionKlass::get_instance()) {\n&nbsp; &nbsp; &nbsp; &nbsp; ...\n&nbsp; &nbsp; }\n&nbsp; &nbsp; else if (MethodObject::is_method(callable)) {\n&nbsp; &nbsp; &nbsp; &nbsp; ...\n&nbsp; &nbsp; }\n&nbsp; &nbsp; else if (callable-&gt;klass() == FunctionKlass::get_instance()) {\n&nbsp; &nbsp; &nbsp; &nbsp; ...\n&nbsp; &nbsp; }\n&nbsp; &nbsp; else if (callable-&gt;klass() == TypeKlass::get_instance()) {\n&nbsp; &nbsp; &nbsp; &nbsp; PUSH(callable-&gt;as&lt;HiTypeObject&gt;()-&gt;own_klass()-&gt;allocate_instance(args));\n&nbsp; &nbsp; }\n}\n</code></pre><p>第二步就是实现 allocate_instance 方法。我们在所有的类型 Klass 里都增加这个方法，包括整型、字符串、列表和字典。</p><pre><code class=\"language-c++\">// [object/klass.hpp]\nclass Klass {\nprivate:\n&nbsp; &nbsp; ...\npublic:\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; virtual HiObject* allocate_instance(ArrayList&lt;HiObject*&gt;* args) { return 0; }\n&nbsp; &nbsp; ...\n};\n\n// [object/hiInteger.cpp]\nHiObject* IntegerKlass::allocate_instance(ArrayList&lt;HiObject*&gt;* args) {\n&nbsp; &nbsp; if (!args || args-&gt;length() == 0)\n&nbsp; &nbsp; &nbsp; &nbsp; return new HiInteger(0);\n&nbsp; &nbsp; else\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;\n}\n\n// allocate_instance for list\nHiObject* ListKlass::allocate_instance(HiList* args) {\n&nbsp; &nbsp; if (!args || args-&gt;length() == 0)\n&nbsp; &nbsp; &nbsp; &nbsp; return new HiList();\n&nbsp; &nbsp; else\n&nbsp; &nbsp; &nbsp; &nbsp; return nullptr;\n}\n\n// allocate_instance for string\nHiObject* StringKlass::allocate_instance(HiList* args) {\n&nbsp; &nbsp; if (!args || args-&gt;length() == 0) {\n&nbsp; &nbsp; &nbsp; &nbsp; return new HiString(\"\");\n&nbsp; &nbsp; }\n&nbsp; &nbsp; else\n&nbsp; &nbsp; &nbsp; &nbsp; return args-&gt;get(0)-&gt;as&lt;HiString&gt;();\n}\n\n// allocate_instance for dict\nHiObject* DictKlass::allocate_instance(HiList* args) {\n&nbsp; &nbsp; if (!args || args-&gt;length() == 0)\n&nbsp; &nbsp; &nbsp; &nbsp; return new HiDict();\n&nbsp; &nbsp; else\n&nbsp; &nbsp; &nbsp; &nbsp; return nullptr;\n}\n</code></pre><p>这段代码的逻辑比较简单，每个类型中的 allocate_instance 方法的实现都很相似。实际上，通过 list 创建列表的时候是可以接受参数的，它的参数是一个可迭代访问的对象。等后面我们实现了完备的迭代器以后，再将它补齐，这里就先使用 nullptr 代表尚未完全支持初始化对象的功能。</p><p>编译运行，这部分的测试用例就可以顺利执行了。到这里，对象系统的重构工作就基本完成了。</p><h2>总结</h2><p>这节课我们重构了整个虚拟机的内建对象系统，包括整数、字符串、列表和字典。</p><p>第一部分我们实现了 TypeObject。每一个 Klass 都有一个对应的 TypeObject。Python 中一切皆是对象，就连类型也是对象。所以，当程序的上下文要求把类型当作对象来传递或者打印的时候，虚拟机内部就会转换成 TypeObject，如果用于判断一个对象的类型时，就会使用 Klass 来完成相应的功能。</p><p>第二部分实现了公共基类 object，所有的 Python 对象都是 object 的派生类。在构建 object 的同时，我们也完善了类的继承机制。</p><p>最后一部分，我们实现了通过类型创建对象的能力。创建对象使用的语法和函数调用的语法是相同的，它们最后生成的字节码也是相同的，都是 CALL_FUNCTION，所以我们就在函数调用的执行部分添加了类型判断。如果被调用者是一个类型对象时，就代表这个时候应该创建一个新的对象。</p><p>通过以上三个部分，我们基本实现了内建对象的类型系统。下节课，我们在这节课的基础上，继续探索自定义类型如何实现。</p><h2>思考题</h2><p>你能列举出多少构建列表的方式？比如列表字面量，列表推导式等等。欢迎你把你的答案分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"17｜函数闭包：函数式编程的重要支撑","id":782323},"right":{"article_title":"19｜自定义类型：面向对象编程的基础设施","id":782495}},"comments":[{"had_liked":false,"id":391522,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"上海","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1718421196,"is_pvip":false,"replies":[{"id":142611,"content":"是的。这个认识都是看透了分层抽象和解释执行的本质了。","user_name":"作者回复","user_name_real":"编辑","uid":1360512,"ctime":1720749208,"ip_address":"上海","comment_id":391522,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"是不是可以认为\n1. 从c++视角出发实现一个“编程语言（解释器）”的业务，该如何抽象？一般面向对象，所有对象都有一个公共父类（比如叫object），因为在上层使用看来，即便一个python对象没有数据和方法，但是c++解释执行的时候，对应的c++对象要有一些解释执行时会用到的数据、方法。 \n2. 如果编程语言只支持int&#47;str&#47;list&#47;dict等基本类型，则使用Kclass&#47;HiObject抽象就够用了，代码里声明一个int，解释器就对应创建一个HiInteger 就行了。只支持基本类型肯定不够，得允许用户扩展，但也不可能让用户直接定义Kclass&#47;HiObject，于是放开给用户定义TypeKlass，再支持根据TypeKlass 生成HiTypeObject（将类型作为函数调用来创建对象），HiTypeObject再作为 Klass 的成员。 ","like_count":2,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647892,"discussion_content":"是的。这个认识都是看透了分层抽象和解释执行的本质了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720749208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396218,"user_name":"冯某","can_delete":false,"product_type":"c1","uid":3889476,"ip_address":"新加坡","ucode":"7E78ECA53DF453","user_header":"https://static001.geekbang.org/account/avatar/00/3b/59/44/727b90a8.jpg","comment_is_top":false,"comment_ctime":1733649013,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"记录一下","like_count":0},{"had_liked":false,"id":395382,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1730527989,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100761401,"comment_content":"学习打卡","like_count":0}]}