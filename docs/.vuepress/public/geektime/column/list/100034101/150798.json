{"id":150798,"title":"23 | 生成汇编代码（二）：把脚本编译成可执行文件","content":"<p>学完两节课之后，对于后端编译过程，你可能还会产生一些疑问，比如：</p><p>1.大致知道汇编程序怎么写，却不知道如何从AST生成汇编代码，中间有什么挑战。</p><p>2.编译成汇编代码之后需要做什么，才能生成可执行文件。</p><p>本节课，我会带你真正动手，基于AST把playscript翻译成正确的汇编代码，并将汇编代码编译成可执行程序。</p><p>通过这样一个过程，可以实现从编译器前端到后端的完整贯通，帮你对编译器后端工作建立比较清晰的认识。这样一来，你在日常工作中进行大型项目的编译管理的时候，或者需要重用别人的类库的时候，思路会更加清晰。</p><h2>从playscript生成汇编代码</h2><p><strong>先来看看如何从playscript生成汇编代码。</strong></p><p>我会带你把playscript的几个有代表性的功能，而不是全部的功能翻译成汇编代码，一来工作量少一些，二来方便做代码优化。这几个有代表性的功能如下：</p><p>1.支持函数调用和传参（这个功能可以回顾加餐）。</p><p>2.支持整数的加法运算（在这个过程中要充分利用寄存器提高性能）。</p><p>3.支持变量声明和初始化。</p><p>具体来说，要能够把下面的示例程序正确生成汇编代码：</p><pre><code>//asm.play\nint fun1(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8){\n    int c = 10; \n    return x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + c;\n}\n\nprintln(&quot;fun1:&quot; + fun1(1,2,3,4,5,6,7,8));\n</code></pre><p>在加餐中，我提供了一段手写的汇编代码，功能等价于这段playscript代码，并讲述了如何在多于6个参数的情况下传参，观察栈帧的变化过程，你可以看看下面的图片和代码，回忆一下：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/45/89/45587ab64c83ea52f9d1fd3fedc6b189.jpg?wh=1142*594\" alt=\"\"></p><pre><code># function-call2-craft.s 函数调用和参数传递\n    # 文本段,纯代码\n    .section    __TEXT,__text,regular,pure_instructions\n\n_fun1:\n    # 函数调用的序曲,设置栈指针\n    pushq   %rbp           # 把调用者的栈帧底部地址保存起来   \n    movq    %rsp, %rbp     # 把调用者的栈帧顶部地址,设置为本栈帧的底部\n\n    movl    $10, -4(%rbp)  # 变量c赋值为10,也可以写成 movl $10, (%rsp)\n\n    # 做加法\n    movl    %edi, %eax     # 第一个参数放进%eax\n    addl    %esi, %eax     # 加参数2\n    addl    %edx, %eax     # 加参数3\n    addl    %ecx, %eax     # 加参数4\n    addl    %r8d, %eax     # 加参数5\n    addl    %r9d, %eax     # 加参数6\n    addl    16(%rbp), %eax  # 加参数7\n    addl    24(%rbp), %eax  # 加参数8\n    \n    addl    -4(%rbp), %eax # 加上c的值\n\n    # 函数调用的尾声,恢复栈指针为原来的值\n    popq    %rbp           # 恢复调用者栈帧的底部数值\n    retq                   # 返回\n\n    .globl  _main          # .global伪指令让_main函数外部可见\n_main:                                  ## @main\n    \n    # 函数调用的序曲,设置栈指针\n    pushq   %rbp           # 把调用者的栈帧底部地址保存起来  \n    movq    %rsp, %rbp     # 把调用者的栈帧顶部地址,设置为本栈帧的底部\n    \n    subq    $16, %rsp      # 这里是为了让栈帧16字节对齐，实际使用可以更少\n\n    # 设置参数\n    movl    $1, %edi     # 参数1\n    movl    $2, %esi     # 参数2\n    movl    $3, %edx     # 参数3\n    movl    $4, %ecx     # 参数4\n    movl    $5, %r8d     # 参数5\n    movl    $6, %r9d     # 参数6\n    movl    $7, (%rsp)   # 参数7\n    movl    $8, 8(%rsp)  # 参数8\n\n    callq   _fun1                # 调用函数\n\n    # 为pritf设置参数\n    leaq    L_.str(%rip), %rdi   # 第一个参数是字符串的地址\n    movl    %eax, %esi           # 第二个参数是前一个参数的返回值\n\n    callq   _printf              # 调用函数\n\n    # 设置返回值。这句也常用 xorl %esi, %esi 这样的指令,都是置为零\n    movl    $0, %eax\n\n    addq    $16, %rsp    # 缩小栈\n    \n    # 函数调用的尾声,恢复栈指针为原来的值\n    popq    %rbp         # 恢复调用者栈帧的底部数值\n    retq                 # 返回\n\n    # 文本段,保存字符串字面量                                  \n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .asciz  &quot;fun1 :%d \\n&quot;\n</code></pre><p>接下来，我们动手写程序，从AST翻译成汇编代码（相关代码在playscript-java项目的<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java\">AsmGen.java</a>类里）。</p><p><strong>我们实现加法运算的翻译过程如下：</strong></p><pre><code>case PlayScriptParser.ADD:\n    //为加法运算申请一个临时的存储位置，可以是寄存器和栈\n    address = allocForExpression(ctx);\n    bodyAsm.append(&quot;\\tmovl\\t&quot;).append(left).append(&quot;, &quot;).append(address).append(&quot;\\n&quot;);  //把左边节点拷贝到存储空间\n    bodyAsm.append(&quot;\\taddl\\t&quot;).append(right).append(&quot;, &quot;).append(address).append(&quot;\\n&quot;);  //把右边节点加上去\n    break;\n</code></pre><p><strong>这段代码的含义是：</strong>我们通过allocForExpression()方法，为每次加法运算申请一个临时空间（可以是寄存器，也可以是栈里的一个地址），用来存放加法操作的结果。接着，用mov指令把加号左边的值拷贝到这个临时空间，再用add指令加上右边的值。</p><p>生成汇编代码的过程，基本上就是基于AST拼接字符串，其中bodyAsm变量是一个StringBuffer对象，我们可以用StringBuffer的toString()方法获得最后的汇编代码。</p><p>按照上面的逻辑，针对“x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + c”这个表达式，形成的汇编代码如下：</p><pre><code> # 过程体\n    movl    $10, -4(%rbp)\n    movl    %edi, %eax       //x1\n    addl    %esi, %eax       //+x2\n    movl    %eax, %ebx    \n    addl    %edx, %ebx       //+x3\n    movl    %ebx, %r10d\n    addl    %ecx, %r10d      //+x4\n    movl    %r10d, %r11d \n    addl    %r8d, %r11d      //+x5\n    movl    %r11d, %r12d\n    addl    %r9d, %r12d      //+x6\n    movl    %r12d, %r13d\n    addl    16(%rbp), %r13d  //+x7\n    movl    %r13d, %r14d\n    addl    24(%rbp), %r14d  //+x8\n    movl    %r14d, %r15d\n    addl    -4(%rbp), %r15d  //+c，本地变量\n</code></pre><p><strong>看出这个代码有什么问题了吗？</strong>我们每次执行加法运算的时候，都要占用一个新的寄存器。比如，x1+x2使用了%eax，再加x3时使用了%ebx，按照这样的速度，寄存器很快就用完了，使用效率显然不高。所以必须要做代码优化。</p><p>如果只是简单机械地翻译代码，相当于产生了大量的临时变量，每个临时变量都占用了空间：</p><pre><code>t1 := x1 + x2;\nt2 := t1 + x3;\nt3 := t2 + x4;\n...\n</code></pre><p><strong>进行代码优化</strong>可以让不再使用的存储位置（t1，t2，t3…）能够复用，从而减少临时变量，也减少代码行数，<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java#L164\">优化后的申请临时存储空间的方法</a>如下：</p><pre><code>//复用前序表达式的存储位置\nif (ctx.bop != null &amp;&amp; ctx.expression().size() &gt;= 2) {\n    ExpressionContext left = ctx.expression(0);\n    String leftAddress = tempVars.get(left);\n    if (leftAddress!= null){\n        tempVars.put(ctx, leftAddress); //当前节点也跟这个地址关联起来\n        return leftAddress;\n    }\n}\n</code></pre><p><strong>这段代码的意思是：</strong>对于每次加法运算，都要申请一个寄存器，如果加号左边的节点已经在某个寄存器中，那就直接复用这个寄存器，就不要用新的了。</p><p><strong>调整以后，生成的汇编代码就跟手写的一样了。</strong>而且，我们至始至终只用了%eax一个寄存器，代码数量也减少了一半，优化效果明显：</p><pre><code># 过程体\n    movl    $10, -4(%rbp)\n    movl    %edi, %eax\n    addl    %esi, %eax\n    addl    %edx, %eax\n    addl    %ecx, %eax\n    addl    %r8d, %eax\n    addl    %r9d, %eax\n    addl    16(%rbp), %eax\n    addl    24(%rbp), %eax\n    addl    -4(%rbp), %eax\n\n    # 返回值\n    # 返回值在之前的计算中,已经存入%eax\n</code></pre><p><strong>对代码如何使用寄存器进行充分优化，是编译器后端一项必须要做的工作。</strong>这里只用了很粗糙的方法，不具备实用价值，后面可以学习更好的优化算法。</p><p>弄清楚了加法运算的代码翻译逻辑，我们再看看AsmGen.java中的<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java#L71\">generate()</a>方法和<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java#L107\">generateProcedure()</a>方法，看看汇编代码完整的生成逻辑是怎样的。这样可以帮助你弄清楚整体脉络和所有的细节，比如函数的标签是怎么生成的，序曲和尾声是怎么加上去的，本地变量的地址是如何计算的，等等。</p><pre><code>public String generate() {\n    StringBuffer sb = new StringBuffer();\n\n    // 1.代码段的头\n    sb.append(&quot;\\t.section\t__TEXT,__text,regular,pure_instructions\\n&quot;);\n\n    // 2.生成函数的代码\n    for (Type type : at.types) {\n        if (type instanceof Function) {\n            Function function = (Function) type;\n            FunctionDeclarationContext fdc = (FunctionDeclarationContext) function.ctx;\n            visitFunctionDeclaration(fdc); // 遍历，代码生成到bodyAsm中了\n            generateProcedure(function.name, sb);\n        }\n    }\n\n    // 3.对主程序生成_main函数\n    visitProg((ProgContext) at.ast);\n    generateProcedure(&quot;main&quot;, sb);\n\n    // 4.文本字面量\n    sb.append(&quot;\\n# 字符串字面量\\n&quot;);\n    sb.append(&quot;\\t.section\t__TEXT,__cstring,cstring_literals\\n&quot;);\n    for(int i = 0; i&lt; stringLiterals.size(); i++){\n        sb.append(&quot;L.str.&quot; + i + &quot;:\\n&quot;);\n        sb.append(&quot;\\t.asciz\\t\\&quot;&quot;).append(stringLiterals.get(i)).append(&quot;\\&quot;\\n&quot;);\n    }\n\n    // 5.重置全局的一些临时变量\n    stringLiterals.clear();\n    \n    return sb.toString();\n}\n</code></pre><p><strong>generate()方法是整个翻译程序的入口，它做了几项工作:</strong></p><p>1.生成一个.section伪指令，表明这是一个放文本的代码段。</p><p>2.遍历AST中的所有函数，调用generateProcedure()方法为每个函数生成一段汇编代码，再接着生成一个主程序的入口。</p><p>3.在一个新的section中，声明一些全局的常量（字面量）。整个程序的结构跟最后生成的汇编代码的结构是一致的，所以很容易看懂。</p><p><strong>generateProcedure()方法把函数转换成汇编代码，里面的注释也很清晰，开头的工作包括：</strong></p><p>1.生成函数标签、序曲部分的代码、设置栈顶指针、保护寄存器原有的值等。</p><p>2.接着是函数体，比如本地变量初始化、做加法运算等。</p><p>3.最后是一系列收尾工作，包括恢复被保护的寄存器的值、恢复栈顶指针，以及尾声部分的代码。</p><p>我们之前已经理解了一个函数体中的汇编代码的结构，所以看这段翻译代码肯定不费事儿。</p><pre><code>private void generateProcedure(String name, StringBuffer sb) {\n    // 1.函数标签\n    sb.append(&quot;\\n## 过程:&quot;).append(name).append(&quot;\\n&quot;);\n    sb.append(&quot;\\t.globl _&quot;).append(name).append(&quot;\\n&quot;);\n    sb.append(&quot;_&quot;).append(name).append(&quot;:\\n&quot;);\n\n    // 2.序曲\n    sb.append(&quot;\\n\\t# 序曲\\n&quot;);\n    sb.append(&quot;\\tpushq\\t%rbp\\n&quot;);\n    sb.append(&quot;\\tmovq\\t%rsp, %rbp\\n&quot;);\n\n    // 3.设置栈顶\n    // 16字节对齐\n    if ((rspOffset % 16) != 0) {\n        rspOffset = (rspOffset / 16 + 1) * 16;\n    }\n    sb.append(&quot;\\n\\t# 设置栈顶\\n&quot;);\n    sb.append(&quot;\\tsubq\\t$&quot;).append(rspOffset).append(&quot;, %rsp\\n&quot;);\n\n    // 4.保存用到的寄存器的值\n    saveRegisters();\n\n    // 5.函数体\n    sb.append(&quot;\\n\\t# 过程体\\n&quot;);\n    sb.append(bodyAsm);\n\n    // 6.恢复受保护的寄存器的值\n    restoreRegisters();\n\n    // 7.恢复栈顶\n    sb.append(&quot;\\n\\t# 恢复栈顶\\n&quot;);\n    sb.append(&quot;\\taddq\\t$&quot;).append(rspOffset).append(&quot;, %rsp\\n&quot;);\n\n    // 8.如果是main函数，设置返回值为0\n    if (name.equals(&quot;main&quot;)) {\n        sb.append(&quot;\\n\\t# 返回值\\n&quot;);\n        sb.append(&quot;\\txorl\\t%eax, %eax\\n&quot;);\n    }\n\n    // 9.尾声\n    sb.append(&quot;\\n\\t# 尾声\\n&quot;);\n    sb.append(&quot;\\tpopq\\t%rbp\\n&quot;);\n    sb.append(&quot;\\tretq\\n&quot;);\n\n    // 10.重置临时变量\n    rspOffset = 0;\n    localVars.clear();\n    tempVars.clear();\n    bodyAsm = new StringBuffer();\n}\n</code></pre><p>最后，你可以通过-S参数运行playscript-java，将asm.play文件生成汇编代码文件asm.s，再生成和运行可执行文件：</p><pre><code>java play.PlayScript -S asm.play -o asm.s   //生成汇编代码\ngcc asm.s -o asm                            //生成可执行文件\n./asm                                       //运行可执行文件\n</code></pre><p>另外，我们的翻译程序只实现了少量的特性（加法运算、本地变量、函数……）。我建议基于这个代码框架做修改，增加其他特性，比如减法、乘法和除法，支持浮点数，支持if语句和循环语句等。学过加餐之后，你应该清楚如何生成这样的汇编代码了。</p><p>到目前为止，我们已经成功地编译playscript程序，并生成了可执行文件！为了加深你对生成可执行文件的理解，我们再做个挑战，用playscript生成目标文件，让C语言来调用。这样可以证明playscript生成汇编代码的逻辑是靠谱的，以至于可以用playscript代替C语言来写一个共用模块。</p><h2>通过C语言调用playscript模块</h2><p>我们在编程的时候，经常调用一些公共的库实现一些功能，这些库可能是别的语言写的，但我们仍然可以调用。我们也可以实现playscript与其他语言的功能共享，在示例程序中实现很简单，微调一下生成的汇编代码，使用“.global _fun1”伪指令让_fun1过程变成全局的，这样其他语言写的程序就可以调用这个_fun1过程，实现功能的重用。</p><pre><code># convention-fun1.s 测试调用约定，_fun1将在外部被调用\n    # 文本段,纯代码\n    .section    __TEXT,__text,regular,pure_instructions\n    \n    .globl  _fun1          # .global伪指令让_fun1函数外部可见\n_fun1:\n    # 函数调用的序曲,设置栈指针\n    pushq   %rbp           # 把调用者的栈帧底部地址保存起来   \n    movq    %rsp, %rbp     # 把调用者的栈帧顶部地址,设置为本栈帧的底部\n\n    movl    $10, -4(%rbp)  # 变量c赋值为10,也可以写成 movl $10, (%rsp)\n\n    # 做加法\n    movl    %edi, %eax     # 第一个参数放进%eax\n    addl    %esi, %eax     # 加参数2\n    addl    %edx, %eax     # 加参数3\n    addl    %ecx, %eax     # 加参数4\n    addl    %r8d, %eax     # 加参数5\n    addl    %r9d, %eax     # 加参数6\n    addl    16(%rbp), %eax  # 加参数7\n    addl    24(%rbp), %eax  # 加参数8\n    \n    addl    -4(%rbp), %eax # 加上c的值\n\n    # 函数调用的尾声,恢复栈指针为原来的值\n    popq    %rbp           # 恢复调用者栈帧的底部数值\n    retq                   # 返回\n</code></pre><p>接下来再写一个C语言的函数来调用fun1()，其中的extern关键字，说明有一个fun1()函数是在另一个模块里实现的：</p><pre><code>/**\n * convention-main.c 测试调用约定。调用一个外部函数fun1\n */\n#include &lt;stdio.h&gt;\n\n//声明一个外部函数，在链接时会在其他模块中找到\nextern int fun1(int x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8);\n\nint main(int argc, char *argv[])\n{\n    printf(&quot;fun1: %d \\n&quot;, fun1(1,2,3,4,5,6,7,8));\n    return 0;\n}\n</code></pre><p>然后在命令行敲下面两个命令：</p><pre><code># 编译汇编程序\nas convention-fun1.s -o convention-fun1.o\n\n# 编译C程序\ngcc convention-main.c convention-fun1.o -o convention\n</code></pre><ul>\n<li>\n<p>第一个命令，把playscript生成的汇编代码编译成一个二进制目标文件。</p>\n</li>\n<li>\n<p>第二个命令在编译C程序的时候，同时也带上这个二进制文件，那么编译器就会找到fun1()函数的定义，并链接到一起。<br>\n最后生成的可执行文件能够顺利运行。</p>\n</li>\n</ul><p><strong>这里面，我需要解释一下链接过程，</strong>它有助于你在二进制文件层面上加深对编译过程的理解。</p><p>其实，高级语言和汇编语言都容易阅读。而二进制文件，则是对计算机友好的，便于运行。汇编器可以把每一个汇编文件都编译生成一个二进制的目标文件，或者叫做一个模块。而链接器则把这些模块组装成一个整体。</p><p>但在C语言生成的那个模块中，调用fun1()函数时，它没有办法知道fun1()函数的准确地址，因为这个地址必须是整个文件都组装完毕以后才能计算出来。所以，汇编器把这个任务推迟，交给链接器去解决。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/3b/71d5ff8c02eb1f0c98fc55862e4ca63b.jpg?wh=1142*1012\" alt=\"\"></p><p><strong>这就好比你去饭店排队吃饭，首先要拿个号（函数的标签），但不知道具体坐哪桌。等叫到你的号的时候（链接过程），服务员才会给你安排一个确定的桌子（函数的地址）。</strong></p><p>既然我们已经从文本世界进入了二进制的世界，那么我们可以再加深一下对可执行文件结构的理解。</p><h2>理解可执行文件</h2><p>我们编译一个程序，最后的结果是生成可运行的二进制文件。其实，生成汇编代码以后，我们就可以认为编译器的任务完成了。后面的工作，其实是由汇编器和链接器完成的。但我们也可以把整个过程都看做编译过程，了解二进制文件的结构，也为我们完整地了解整个编译过程划上了句号。</p><p>当然了，对二进制文件格式的理解，也是做<strong>大型项目编译管理、二进制代码分析等工作的基础，</strong>很有意义。</p><p>对于每个操作系统，我们对于可执行程序的格式要求是不一样的。比如，在Linux下，目标文件、共享对象文件、二进制文件，都是采用ELF格式。</p><p>实际上，这些二进制文件的格式跟加载到内存中的程序的格式是很相似的。这样有什么好处呢？它可以迅速被操作系统读取，并加载到内存中去，加载速度越快，也就相当于程序的启动速度越快。</p><p>同内存中的布局一样，在ELF格式中，代码和数据也是分开的。这样做的好处是，程序的代码部分，可以在多个进程中共享，不需要在内存里放多份。放一份，然后映射到每个进程的代码区就行了。而数据部分，则是每个进程都不一样的，所以要为每个进程加载一份。</p><p>这样讲的话，<strong>你就理解了可执行文件、目标文件等二进制文件的原理了，</strong>具体的细节，可以查阅相关的文档和手册。</p><h2>课程小结</h2><p>这节课，我们实现了从AST到汇编代码，汇编代码到可执行文件的完整过程。现在，你应该对后端工作的实质建立起了直接的认识。我建议你抓住几个关键点：</p><p>首先，从AST生成汇编代码，可以通过比较机械的翻译来完成，我们举了加法运算的例子。阅读示例程序，你也可以看看函数调用、参数传递等等的实现过程。总体来说，这个过程并不难。</p><p>第二，这种机械地翻译生成的代码，一定是不够优化的。我们已经看到了加法运算不够优化的情况，所以一定要增加一个优化的过程。</p><p>第三，在生成汇编的过程中，最需要注意的就是要遵守调用约定。这就需要了解调用约定的很多细节。只要遵守调用约定，不同语言生成的二进制目标文件也可以链接在一起，形成最后的可执行文件。</p><p>现在我已经带你完成了编译器后端的第一轮认知迭代，并且直接操刀汇编代码，破除你对汇编的恐惧心。在之后的课程中，我们会进入第二轮迭代：中间代码和代码优化。</p><h2>一课一思</h2><p>我们针对加法计算、函数调用等语法生成了汇编代码。你能否思考一下，如果要支持其他运算和语法，比如乘法运算、条件判断、循环语句等，大概会怎样实现？如果要支持面向对象编程，又该怎样实现呢？欢迎你打开思路，在留言区分享自己的想法。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p>示例代码我放在文末，供你参考。</p><ul>\n<li>AsmGen.java（将AST翻译成汇编代码）  <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java\">码云</a>  <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/main/play/AsmGen.java\">GitHub</a></li>\n<li>asm.play（用于生成汇编码的playscript脚本）  <a href=\"https://gitee.com/richard-gong/PlayWithCompiler/blob/master/playscript-java/src/examples/asm.play\">码云</a>  <a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/playscript-java/src/examples/asm.play\">GitHub</a></li>\n</ul>","comments":[{"had_liked":false,"id":141687,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571211362,"is_pvip":false,"replies":[{"id":"57543","content":"是的，我后来似乎改过了。因为修改了一些语义分析的代码，使得一些类型信息不再保存在AnnotatedTree.typeOfNode中了。<br><br>我抽时间应该加上一些自动的测试用例，避免修改一个地方，让另一个地方break掉。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573310943,"ip_address":"","comment_id":141687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5866178658","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;RichardGong&#47;PlayWithCompiler&#47;blob&#47;d1f393d98000e8e9a7b22b870b690cd80de35bae&#47;playscript-java&#47;src&#47;main&#47;play&#47;AsmGen.java#L470<br><br>这一行是不是应该改成`Function function = (Function) at.node2Scope.get(ctx);`，不然运行时会出现空指针异常   ","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470846,"discussion_content":"是的，我后来似乎改过了。因为修改了一些语义分析的代码，使得一些类型信息不再保存在AnnotatedTree.typeOfNode中了。\n\n我抽时间应该加上一些自动的测试用例，避免修改一个地方，让另一个地方break掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573310943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295367,"user_name":"minghu6","can_delete":false,"product_type":"c1","uid":1050269,"ip_address":"","ucode":"F44058E21B14C9","user_header":"","comment_is_top":false,"comment_ctime":1622384814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622384814","product_id":100034101,"comment_content":"汇编的代码有些罗嗦,好多段的命名跟编译器生成似的.<br>有一个问题就是实例代码里有一个main标签里面的`subq    $16, %rsp` 说是为了16对齐, 但main本身push了一个8byte的返回地址吧?","like_count":0},{"had_liked":false,"id":190304,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1584628035,"is_pvip":false,"replies":[{"id":"76750","content":"这是我的疏漏。as是生成目标文件。需要再链接一下才能生成可执行文件。文稿我已经修改了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586661060,"ip_address":"","comment_id":190304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584628035","product_id":100034101,"comment_content":"cannot execute binary file  为什么我运行在mac上运行as命令后编译的机器码，会报这个错误呀","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487945,"discussion_content":"这是我的疏漏。as是生成目标文件。需要再链接一下才能生成可执行文件。文稿我已经修改了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586661060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141700,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571212571,"is_pvip":false,"replies":[{"id":"57542","content":"调用约定。 可以参考一下https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;X86_calling_conventions<br><br>&quot;In Linux, GCC sets the de facto standard for calling conventions. Since GCC version 4.5, the stack must be aligned to a 16-byte boundary when calling a function (previous versions only required a 4-byte alignment.)&quot;<br><br>如果不遵守这个调用约定，有些功能会出错。比如调试的时候。<br><br>还可以参考一下这篇：https:&#47;&#47;software.intel.com&#47;en-us&#47;forums&#47;intel-isa-extensions&#47;topic&#47;291241","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573310598,"ip_address":"","comment_id":141700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571212571","product_id":100034101,"comment_content":"老师，栈顶为什么要16字节对齐呢？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470853,"discussion_content":"调用约定。 可以参考一下https://en.wikipedia.org/wiki/X86_calling_conventions\n\n&amp;quot;In Linux, GCC sets the de facto standard for calling conventions. Since GCC version 4.5, the stack must be aligned to a 16-byte boundary when calling a function (previous versions only required a 4-byte alignment.)&amp;quot;\n\n如果不遵守这个调用约定，有些功能会出错。比如调试的时候。\n\n还可以参考一下这篇：https://software.intel.com/en-us/forums/intel-isa-extensions/topic/291241","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573310598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}