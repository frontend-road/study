{"id":740775,"title":"第 12 章 组件的实现原理","content":"<p>在上一篇中，我们着重讲解了渲染器的基本原理与实现。渲染器主要负责将虚拟 DOM 渲染为真实 DOM，我们只需要使用虚拟 DOM 来描述最终呈现的内容即可。但当我们编写比较复杂的页面时，用来描述页面结构的虚拟 DOM 的代码量会变得越来越多，或者说页面模板会变得越来越大。这时，我们就需要组件化的能力。有了组件，我们就可以将一个大的页面拆分为多个部分，每一个部分都可以作为单独的组件，这些组件共同组成完整的页面。组件化的实现同样需要渲染器的支持，从本章开始，我们将详细讨论 Vue.js 中的组件化。</p>\n<h2 id=\"nav_point_110\">12.1　渲染组件</h2>\n<p>从用户的角度来看，一个有状态组件就是一个选项对象，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // MyComponent 是一个组件，它的值是一个选项对象\n const MyComponent = {\n   name: 'MyComponent',\n   data() {\n     return { foo: 1 }\n   }\n }\n</code></pre>\n<p>但是，如果从渲染器的内部实现来看，一个组件则是一个特殊类型的虚拟 DOM 节点。例如，为了描述普通标签，我们用虚拟节点的 <code>vnode.type</code> 属性来存储标签名称，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 该 vnode 用来描述普通标签\n const vnode = {\n   type: 'div'\n   // ...\n }\n</code></pre>\n<p>为了描述片段，我们让虚拟节点的 <code>vnode.type</code> 属性的值为 <code>Fragment</code>，例如：</p>\n<pre class=\"code-rows\"><code> // 该 vnode 用来描述片段\n const vnode = {\n   type: Fragment\n   // ...\n }\n</code></pre>\n<p>为了描述文本，我们让虚拟节点的 <code>vnode.type</code> 属性的值为 <code>Text</code>，例如：</p>\n<pre class=\"code-rows\"><code> // 该 vnode 用来描述文本节点\n const vnode = {\n   type: Text\n   // ...\n }\n</code></pre>\n<p>渲染器的 <code>patch</code> 函数证明了上述内容，如下是我们在第三篇中实现的 <code>patch</code> 函数的代码：</p>\n<pre class=\"code-rows\"><code> function patch(n1, n2, container, anchor) {\n   if (n1 &amp;&amp; n1.type !== n2.type) {\n     unmount(n1)\n     n1 = null\n   }\n<p>const { type } = n2</p>\n<p>if (typeof type === ‘string’) {<br />\n// 作为普通元素处理<br />\n} else if (type === Text) {<br />\n// 作为文本节点处理<br />\n} else if (type === Fragment) {<br />\n// 作为片段处理<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>可以看到，渲染器会使用虚拟节点的 <code>type</code> 属性来区分其类型。对于不同类型的节点，需要采用不同的处理方法来完成挂载和更新。</p><!-- [[[read_end]]] -->\n<p>实际上，对于组件来说也是一样的。为了使用虚拟节点来描述组件，我们可以用虚拟节点的 <code>vnode.type</code> 属性来存储组件的选项对象，例如：</p>\n<pre class=\"code-rows\"><code> // 该 vnode 用来描述组件，type 属性存储组件的选项对象\n const vnode = {\n   type: MyComponent\n   // ...\n }\n</code></pre>\n<p>为了让渲染器能够处理组件类型的虚拟节点，我们还需要在 <code>patch</code> 函数中对组件类型的虚拟节点进行处理，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patch(n1, n2, container, anchor) {\n   if (n1 &amp;&amp; n1.type !== n2.type) {\n     unmount(n1)\n     n1 = null\n   }\n<p>const { type } = n2</p>\n<p>if (typeof type === ‘string’) {<br />\n// 作为普通元素处理<br />\n} else if (type === Text) {<br />\n// 作为文本节点处理<br />\n} else if (type === Fragment) {<br />\n// 作为片段处理<br />\n} else if (typeof type === ‘object’) {<br />\n// vnode.type 的值是选项对象，作为组件来处理<br />\nif (!n1) {<br />\n// 挂载组件<br />\nmountComponent(n2, container, anchor)<br />\n} else {<br />\n// 更新组件<br />\npatchComponent(n1, n2, anchor)<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们新增了一个 <code>else if</code> 分支，用来处理虚拟节点的 <code>vnode.type</code> 属性值为对象的情况，即将该虚拟节点作为组件的描述来看待，并调用 <code>mountComponent</code> 和 <code>patchComponent</code> 函数来完成组件的挂载和更新。</p>\n<p>渲染器有能力处理组件后，下一步我们要做的是，设计组件在用户层面的接口。这包括：用户应该如何编写组件？组件的选项对象必须包含哪些内容？以及组件拥有哪些能力？等等。实际上，组件本身是对页面内容的封装，它用来描述页面内容的一部分。因此，一个组件必须包含一个渲染函数，即 <code>render</code> 函数，并且渲染函数的返回值应该是虚拟 DOM。换句话说，组件的渲染函数就是用来描述组件所渲染内容的接口，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const MyComponent = {\n   // 组件名称，可选\n   name: 'MyComponent',\n   // 组件的渲染函数，其返回值必须为虚拟 DOM\n   render() {\n     // 返回虚拟 DOM\n     return {\n       type: 'div',\n       children: `我是文本内容`\n     }\n   }\n }\n</code></pre>\n<p>这是一个最简单的组件示例。有了基本的组件结构之后，渲染器就可以完成组件的渲染，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 用来描述组件的 VNode 对象，type 属性值为组件的选项对象\n const CompVNode = {\n   type: MyComponent\n }\n // 调用渲染器来渲染组件\n renderer.render(CompVNode, document.querySelector('#app'))\n</code></pre>\n<p>渲染器中真正完成组件渲染任务的是 <code>mountComponent</code> 函数，其具体实现如下所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 通过 vnode 获取组件的选项对象，即 vnode.type\n   const componentOptions = vnode.type\n   // 获取组件的渲染函数 render\n   const { render } = componentOptions\n   // 执行渲染函数，获取组件要渲染的内容，即 render 函数返回的虚拟 DOM\n   const subTree = render()\n   // 最后调用 patch 函数来挂载组件所描述的内容，即 subTree\n   patch(null, subTree, container, anchor)\n }\n</code></pre>\n<p>这样，我们就实现了最基本的组件化方案。</p>\n<h2 id=\"nav_point_111\">12.2　组件状态与自更新</h2>\n<p>在上一节中，我们完成了组件的初始渲染。接下来，我们尝试为组件设计自身的状态，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const MyComponent = {\n   name: 'MyComponent',\n   // 用 data 函数来定义组件自身的状态\n   data() {\n     return {\n       foo: 'hello world'\n     }\n   },\n   render() {\n     return {\n       type: 'div',\n       children: `foo 的值是: $` // 在渲染函数内使用组件状态\n     }\n   }\n }\n</code></pre>\n<p>在上面这段代码中，我们约定用户必须使用 <code>data</code> 函数来定义组件自身的状态，同时可以在渲染函数中通过 <code>this</code> 访问由 <code>data</code> 函数返回的状态数据。</p>\n<p>下面的代码实现了组件自身状态的初始化：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   const { render, data } = componentOptions\n<p>// 调用 data 函数得到原始数据，并调用 reactive 函数将其包装为响应式数据<br />\nconst state = reactive(data())<br />\n// 调用 render 函数时，将其 this 设置为 state，<br />\n// 从而 render 函数内部可以通过 this 访问组件自身状态数据<br />\nconst subTree = render.call(state, state)<br />\npatch(null, subTree, container, anchor)<br />\n}<br />\n</code></pre></p>\n<p>如上面的代码所示，实现组件自身状态的初始化需要两个步骤：</p>\n<ul>\n<li>通过组件的选项对象取得 <code>data</code> 函数并执行，然后调用 <code>reactive</code> 函数将 <code>data</code> 函数返回的状态包装为响应式数据；</li>\n<li>在调用 <code>render</code> 函数时，将其 <code>this</code> 的指向设置为响应式数据 <code>state</code>，同时将 <code>state</code> 作为 <code>render</code> 函数的第一个参数传递。</li>\n</ul>\n<p>经过上述两步工作后，我们就实现了对组件自身状态的支持，以及在渲染函数内访问组件自身状态的能力。</p>\n<p>当组件自身状态发生变化时，我们需要有能力触发组件更新，即组件的自更新。为此，我们需要将整个渲染任务包装到一个 <code>effect</code> 中，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   const { render, data } = componentOptions\n<p>const state = reactive(data())</p>\n<p>// 将组件的 render 函数调用包装到 effect 内<br />\neffect(() =&gt; {<br />\nconst subTree = render.call(state, state)<br />\npatch(null, subTree, container, anchor)<br />\n})<br />\n}<br />\n</code></pre></p>\n<p>这样，一旦组件自身的响应式数据发生变化，组件就会自动重新执行渲染函数，从而完成更新。但是，由于 <code>effect</code> 的执行是同步的，因此当响应式数据发生变化时，与之关联的副作用函数会同步执行。换句话说，如果多次修改响应式数据的值，将会导致渲染函数执行多次，这实际上是没有必要的。因此，我们需要设计一个机制，以使得无论对响应式数据进行多少次修改，副作用函数都只会重新执行一次。为此，我们需要实现一个调度器，当副作用函数需要重新执行时，我们不会立即执行它，而是将它缓冲到一个微任务队列中，等到执行栈清空后，再将它从微任务队列中取出并执行。有了缓存机制，我们就有机会对任务进行去重，从而避免多次执行副作用函数带来的性能开销。具体实现如下：</p>\n<pre class=\"code-rows\"><code> // 任务缓存队列，用一个 Set 数据结构来表示，这样就可以自动对任务进行去重\n const queue = new Set()\n // 一个标志，代表是否正在刷新任务队列\n let isFlushing = false\n // 创建一个立即 resolve 的 Promise 实例\n const p = Promise.resolve()\n<p>// 调度器的主要函数，用来将一个任务添加到缓冲队列中，并开始刷新队列<br />\nfunction queueJob(job) {<br />\n// 将 job 添加到任务队列 queue 中<br />\nqueue.add(job)<br />\n// 如果还没有开始刷新队列，则刷新之<br />\nif (!isFlushing) {<br />\n// 将该标志设置为 true 以避免重复刷新<br />\nisFlushing = true<br />\n// 在微任务中刷新缓冲队列<br />\np.then(() =&gt; {<br />\ntry {<br />\n// 执行任务队列中的任务<br />\nqueue.forEach(job =&gt; job())<br />\n} finally {<br />\n// 重置状态<br />\nisFlushing = false<br />\nqueue.clear = 0<br />\n}<br />\n})<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>上面是调度器的最小实现，本质上利用了微任务的异步执行机制，实现对副作用函数的缓冲。其中 <code>queueJob</code> 函数是调度器最主要的函数，用来将一个任务或副作用函数添加到缓冲队列中，并开始刷新队列。有了 <code>queueJob</code> 函数之后，我们可以在创建渲染副作用时使用它，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   const { render, data } = componentOptions\n<p>const state = reactive(data())</p>\n<p>effect(() =&gt; {<br />\nconst subTree = render.call(state, state)<br />\npatch(null, subTree, container, anchor)<br />\n}, {<br />\n// 指定该副作用函数的调度器为 queueJob 即可<br />\nscheduler: queueJob<br />\n})<br />\n}<br />\n</code></pre></p>\n<p>这样，当响应式数据发生变化时，副作用函数不会立即同步执行，而是会被 <code>queueJob</code> 函数调度，最后在一个微任务中执行。</p>\n<p>不过，上面这段代码存在缺陷。可以看到，我们在 <code>effect</code> 函数内调用 <code>patch</code> 函数完成渲染时，第一个参数总是 <code>null</code>。这意味着，每次更新发生时都会进行全新的挂载，而不会打补丁，这是不正确的。正确的做法是：每次更新时，都拿新的 <code>subTree</code> 与上一次组件所渲染的 <code>subTree</code> 进行打补丁。为此，我们需要实现组件实例，用它来维护组件整个生命周期的状态，这样渲染器才能够在正确的时机执行合适的操作。</p>\n<h2 id=\"nav_point_112\">12.3　组件实例与组件的生命周期</h2>\n<p>组件实例本质上就是一个状态集合（或一个对象），它维护着组件运行过程中的所有信息，例如注册到组件的生命周期函数、组件渲染的子树（<code>subTree</code>）、组件是否已经被挂载、组件自身的状态（<code>data</code>），等等。为了解决上一节中关于组件更新的问题，我们需要引入组件实例的概念，以及与之相关的状态信息，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   const { render, data } = componentOptions\n<p>const state = reactive(data())</p>\n<p>// 定义组件实例，一个组件实例本质上就是一个对象，它包含与组件有关的状态信息<br />\nconst instance = {<br />\n// 组件自身的状态数据，即 data<br />\nstate,<br />\n// 一个布尔值，用来表示组件是否已经被挂载，初始值为 false<br />\nisMounted: false,<br />\n// 组件所渲染的内容，即子树（subTree）<br />\nsubTree: null<br />\n}</p>\n<p>// 将组件实例设置到 vnode 上，用于后续更新<br />\nvnode.component = instance</p>\n<p>effect(() =&gt; {<br />\n// 调用组件的渲染函数，获得子树<br />\nconst subTree = render.call(state, state)<br />\n// 检查组件是否已经被挂载<br />\nif (!instance.isMounted) {<br />\n// 初次挂载，调用 patch 函数第一个参数传递 null<br />\npatch(null, subTree, container, anchor)<br />\n// 重点：将组件实例的 isMounted 设置为 true，这样当更新发生时就不会再次进行挂载操作，<br />\n// 而是会执行更新<br />\ninstance.isMounted = true<br />\n} else {<br />\n// 当 isMounted 为 true 时，说明组件已经被挂载，只需要完成自更新即可，<br />\n// 所以在调用 patch 函数时，第一个参数为组件上一次渲染的子树，<br />\n// 意思是，使用新的子树与上一次渲染的子树进行打补丁操作<br />\npatch(instance.subTree, subTree, container, anchor)<br />\n}<br />\n// 更新组件实例的子树<br />\ninstance.subTree = subTree<br />\n}, { scheduler: queueJob })<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们使用一个对象来表示组件实例，该对象有三个属性。</p>\n<ul>\n<li><code>state</code>：组件自身的状态数据，即 <code>data</code>。</li>\n<li><code>isMounted</code>：一个布尔值，用来表示组件是否被挂载。</li>\n<li><code>subTree</code>：存储组件的渲染函数返回的虚拟 DOM，即组件的子树（<code>subTree</code>）。</li>\n</ul>\n<p>实际上，我们可以在需要的时候，任意地在组件实例 <code>instance</code> 上添加需要的属性。但需要注意的是，我们应该尽可能保持组件实例轻量，以减少内存占用。</p>\n<p>在上面的实现中，组件实例的 <code>instance.isMounted</code> 属性可以用来区分组件的挂载和更新。因此，我们可以在合适的时机调用组件对应的生命周期钩子，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   // 从组件选项对象中取得组件的生命周期函数\n   const { render, data, beforeCreate, created, beforeMount, mounted, beforeUpdate, updated } = componentOptions\n<p>// 在这里调用 beforeCreate 钩子<br />\nbeforeCreate &amp;&amp; beforeCreate()</p>\n<p>const state = reactive(data())</p>\n<p>const instance = {<br />\nstate,<br />\nisMounted: false,<br />\nsubTree: null<br />\n}<br />\nvnode.component = instance</p>\n<p>// 在这里调用 created 钩子<br />\ncreated &amp;&amp; created.call(state)</p>\n<p>effect(() =&gt; {<br />\nconst subTree = render.call(state, state)<br />\nif (!instance.isMounted) {<br />\n// 在这里调用 beforeMount 钩子<br />\nbeforeMount &amp;&amp; beforeMount.call(state)<br />\npatch(null, subTree, container, anchor)<br />\ninstance.isMounted = true<br />\n// 在这里调用 mounted 钩子<br />\nmounted &amp;&amp; mounted.call(state)<br />\n} else {<br />\n// 在这里调用 beforeUpdate 钩子<br />\nbeforeUpdate &amp;&amp; beforeUpdate.call(state)<br />\npatch(instance.subTree, subTree, container, anchor)<br />\n// 在这里调用 updated 钩子<br />\nupdated &amp;&amp; updated.call(state)<br />\n}<br />\ninstance.subTree = subTree<br />\n}, { scheduler: queueJob })<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们首先从组件的选项对象中取得注册到组件上的生命周期函数，然后在合适的时机调用它们，这其实就是组件生命周期的实现原理。但实际上，由于可能存在多个同样的组件生命周期钩子，例如来自 <code>mixins</code> 中的生命周期钩子函数，因此我们通常需要将组件生命周期钩子序列化为一个数组，但核心原理不变。</p>\n<h2 id=\"nav_point_113\">12.4　<code>props</code> 与组件的被动更新</h2>\n<p>在虚拟 DOM 层面，组件的 <code>props</code> 与普通 HTML 标签的属性差别不大。假设我们有如下模板：</p>\n<pre class=\"code-rows\"><code> &lt;MyComponent title=\"A Big Title\" :other=\"val\" /&gt;\n</code></pre>\n<p>这段模板对应的虚拟 DOM 是：</p>\n<pre class=\"code-rows\"><code> const vnode = {\n   type: MyComponent,\n   props: {\n     title: 'A big Title',\n     other: this.val\n   }\n }\n</code></pre>\n<p>可以看到，模板与虚拟 DOM 几乎是“同构”的。另外，在编写组件时，我们需要显式地指定组件会接收哪些 <code>props</code> 数据，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const MyComponent = {\n   name: 'MyComponent',\n   // 组件接收名为 title 的 props，并且该 props 的类型为 String\n   props: {\n     title: String\n   },\n   render() {\n     return {\n       type: 'div',\n       children: `count is: $` // 访问 props 数据\n     }\n   }\n }\n</code></pre>\n<p>所以，对于一个组件来说，有两部分关于 <code>props</code> 的内容我们需要关心：</p>\n<ul>\n<li>为组件传递的 <code>props</code> 数据，即组件的 <code>vnode.props</code> 对象；</li>\n<li>组件选项对象中定义的 <code>props</code> 选项，即 <code>MyComponent.props</code> 对象。</li>\n</ul>\n<p>我们需要结合这两个选项来解析出组件在渲染时需要用到的 <code>props</code> 数据，具体实现如下：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   // 从组件选项对象中取出 props 定义，即 propsOption\n   const { render, data, props: propsOption /* 其他省略 */ } = componentOptions\n<p>beforeCreate &amp;&amp; beforeCreate()</p>\n<p>const state = reactive(data())<br />\n// 调用 resolveProps 函数解析出最终的 props 数据与 attrs 数据<br />\nconst [props, attrs] = resolveProps(propsOption, vnode.props)</p>\n<p>const instance = {<br />\nstate,<br />\n// 将解析出的 props 数据包装为 shallowReactive 并定义到组件实例上<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null<br />\n}<br />\nvnode.component = instance</p>\n<p>// 省略部分代码<br />\n}</p>\n<p>// resolveProps 函数用于解析组件 props 和 attrs 数据<br />\nfunction resolveProps(options, propsData) {<br />\nconst props = {}<br />\nconst attrs = {}<br />\n// 遍历为组件传递的 props 数据<br />\nfor (const key in propsData) {<br />\nif (key in options) {<br />\n// 如果为组件传递的 props 数据在组件自身的 props 选项中有定义，则将其视为合法的 props<br />\nprops[key] = propsData[key]<br />\n} else {<br />\n// 否则将其作为 attrs<br />\nattrs[key] = propsData[key]<br />\n}<br />\n}</p>\n<p>// 最后返回 props 与 attrs 数据<br />\nreturn [ props, attrs ]<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们将组件选项中定义的 <code>MyComponent.props</code> 对象和为组件传递的 <code>vnode.props</code> 对象相结合，最终解析出组件在渲染时需要使用的 <code>props</code> 和 <code>attrs</code> 数据。这里需要注意两点。</p>\n<ul>\n<li>在 Vue.js 3 中，没有定义在 <code>MyComponent.props</code> 选项中的 <code>props</code> 数据将存储到 <code>attrs</code> 对象中。</li>\n<li>上述实现中没有包含默认值、类型校验等内容的处理。实际上，这些内容也都是围绕 <code>MyComponent.props</code> 以及 <code>vnode.props</code> 这两个对象展开的，实现起来并不复杂。</li>\n</ul>\n<p>处理完 <code>props</code> 数据后，我们再来讨论关于 <code>props</code> 数据变化的问题。<code>props</code> 本质上是父组件的数据，当 <code>props</code> 发生变化时，会触发父组件重新渲染。假设父组件的模板如下：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;MyComponent :title=\"title\"/&gt;\n &lt;/template&gt;\n</code></pre>\n<p>其中，响应式数据 <code>title</code> 的初始值为字符串 <code>\"A big Title\"</code>，因此首次渲染时，父组件的虚拟 DOM 为：</p>\n<pre class=\"code-rows\"><code> // 父组件要渲染的内容\n const vnode = {\n   type: MyComponent,\n   props: {\n     title: 'A Big Title'\n   }\n }\n</code></pre>\n<p>当响应式数据 <code>title</code> 发生变化时，父组件的渲染函数会重新执行。假设 <code>title</code> 的值变为字符串 <code>\"A Small Title\"</code>，那么新产生的虚拟 DOM 为：</p>\n<pre class=\"code-rows\"><code> // 父组件要渲染的内容\n const vnode = {\n   type: MyComponent,\n   props: {\n     title: 'A Small Title'\n   }\n }\n</code></pre>\n<p>接着，父组件会进行自更新。在更新过程中，渲染器发现父组件的 <code>subTree</code> 包含组件类型的虚拟节点，所以会调用 <code>patchComponent</code> 函数完成子组件的更新，如下面 <code>patch</code> 函数的代码所示：</p>\n<pre class=\"code-rows\"><code> function patch(n1, n2, container, anchor) {\n   if (n1 &amp;&amp; n1.type !== n2.type) {\n     unmount(n1)\n     n1 = null\n   }\n<p>const { type } = n2</p>\n<p>if (typeof type === ‘string’) {<br />\n// 省略部分代码<br />\n} else if (type === Text) {<br />\n// 省略部分代码<br />\n} else if (type === Fragment) {<br />\n// 省略部分代码<br />\n} else if (typeof type === ‘object’) {<br />\n// vnode.type 的值是选项对象，作为组件来处理<br />\nif (!n1) {<br />\nmountComponent(n2, container, anchor)<br />\n} else {<br />\n// 更新组件<br />\npatchComponent(n1, n2, anchor)<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>其中，<code>patchComponent</code> 函数用来完成子组件的更新。我们把由父组件自更新所引起的子组件更新叫作子组件的被动更新。当子组件发生被动更新时，我们需要做的是：</p>\n<ul>\n<li>检测子组件是否真的需要更新，因为子组件的 <code>props</code> 可能是不变的；</li>\n<li>如果需要更新，则更新子组件的 <code>props</code>、<code>slots</code> 等内容。</li>\n</ul>\n<p><code>patchComponent</code> 函数的具体实现如下：</p>\n<pre class=\"code-rows\"><code> function patchComponent(n1, n2, anchor) {\n   // 获取组件实例，即 n1.component，同时让新的组件虚拟节点 n2.component 也指向组件实例\n   const instance = (n2.component = n1.component)\n   // 获取当前的 props 数据\n   const { props } = instance\n   // 调用 hasPropsChanged 检测为子组件传递的 props 是否发生变化，如果没有变化，则不需要更新\n   if (hasPropsChanged(n1.props, n2.props)) {\n     // 调用 resolveProps 函数重新获取 props 数据\n     const [ nextProps ] = resolveProps(n2.type.props, n2.props)\n     // 更新 props\n     for (const k in nextProps) {\n       props[k] = nextProps[k]\n     }\n     // 删除不存在的 props\n     for (const k in props) {\n       if (!(k in nextProps)) delete props[k]\n     }\n   }\n }\n<p>function hasPropsChanged(<br />\nprevProps,<br />\nnextProps<br />\n) {<br />\nconst nextKeys = Object.keys(nextProps)<br />\n// 如果新旧 props 的数量变了，则说明有变化<br />\nif (nextKeys.length !== Object.keys(prevProps).length) {<br />\nreturn true<br />\n}<br />\n// 只有<br />\nfor (let i = 0; i &lt; nextKeys.length; i++) {<br />\nconst key = nextKeys[i]<br />\n// 有不相等的 props，则说明有变化<br />\nif (nextProps[key] !== prevProps[key]) return true<br />\n}<br />\nreturn false<br />\n}<br />\n</code></pre></p>\n<p>上面是组件被动更新的最小实现，有两点需要注意：</p>\n<ul>\n<li>需要将组件实例添加到新的组件 <code>vnode</code> 对象上，即 <code>n2.component = n1.component</code>，否则下次更新时将无法取得组件实例；</li>\n<li><code>instance.props</code> 对象本身是浅响应的（即 <code>shallowReactive</code>）。因此，在更新组件的 <code>props</code> 时，只需要设置 <code>instance.props</code> 对象下的属性值即可触发组件重新渲染。</li>\n</ul>\n<p>在上面的实现中，我们没有处理 <code>attrs</code> 与 <code>slots</code> 的更新。<code>attrs</code> 的更新本质上与更新 <code>props</code> 的原理相似。而对于 <code>slots</code>，我们会在后续章节中讲解。实际上，要完善地实现 Vue.js 中的 <code>props</code> 机制，需要编写大量边界代码。但本质上来说，其原理都是根据组件的 <code>props</code> 选项定义以及为组件传递的 <code>props</code> 数据来处理的。</p>\n<p>由于 <code>props</code> 数据与组件自身的状态数据都需要暴露到渲染函数中，并使得渲染函数能够通过 <code>this</code> 访问它们，因此我们需要封装一个渲染上下文对象，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null<br />\n}</p>\n<p>vnode.component = instance</p>\n<p>// 创建渲染上下文对象，本质上是组件实例的代理<br />\nconst renderContext = new Proxy(instance, {<br />\nget(t, k, r) {<br />\n// 取得组件自身状态与 props 数据<br />\nconst { state, props } = t<br />\n// 先尝试读取自身状态数据<br />\nif (state &amp;&amp; k in state) {<br />\nreturn state[k]<br />\n} else if (k in props) { // 如果组件自身没有该数据，则尝试从 props 中读取<br />\nreturn props[k]<br />\n} else {<br />\nconsole.error(‘不存在’)<br />\n}<br />\n},<br />\nset (t, k, v, r) {<br />\nconst { state, props } = t<br />\nif (state &amp;&amp; k in state) {<br />\nstate[k] = v<br />\n} else if (k in props) {<br />\nconsole.warn(<code>Attempting to mutate prop &quot;$&quot;. Props are readonly.</code>)<br />\n} else {<br />\nconsole.error(‘不存在’)<br />\n}<br />\n}<br />\n})</p>\n<p>// 生命周期函数调用时要绑定渲染上下文对象<br />\ncreated &amp;&amp; created.call(renderContext)</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们为组件实例创建了一个代理对象，该对象即渲染上下文对象。它的意义在于拦截数据状态的读取和设置操作，每当在渲染函数或生命周期钩子中通过 <code>this</code> 来读取数据时，都会优先从组件的自身状态中读取，如果组件本身并没有对应的数据，则再从 <code>props</code> 数据中读取。最后我们将渲染上下文作为渲染函数以及生命周期钩子的 <code>this</code> 值即可。</p>\n<p>实际上，除了组件自身的数据以及 <code>props</code> 数据之外，完整的组件还包含 <code>methods</code>、<code>computed</code> 等选项中定义的数据和方法，这些内容都应该在渲染上下文对象中处理。</p>\n<h2 id=\"nav_point_114\">12.5　<code>setup</code> 函数的作用与实现</h2>\n<p>组件的 <code>setup</code> 函数是 Vue.js 3 新增的组件选项，它有别于 Vue.js 2 中存在的其他组件选项。这是因为 <code>setup</code> 函数主要用于配合组合式 API，为用户提供一个地方，用于建立组合逻辑、创建响应式数据、创建通用函数、注册生命周期钩子等能力。在组件的整个生命周期中，<code>setup</code> 函数只会在被挂载时执行一次，它的返回值可以有两种情况。</p>\n<p>(1) 返回一个函数，该函数将作为组件的 <code>render</code> 函数：</p>\n<pre class=\"code-rows\"><code> const Comp = {\n   setup() {\n     // setup 函数可以返回一个函数，该函数将作为组件的渲染函数\n     return () =&gt; {\n       return { type: 'div', children: 'hello' }\n     }\n   }\n }\n</code></pre>\n<p>这种方式常用于组件不是以模板来表达其渲染内容的情况。如果组件以模板来表达其渲染的内容，那么 <code>setup</code> 函数不可以再返回函数，否则会与模板编译生成的渲染函数产生冲突。</p>\n<p>(2) 返回一个对象，该对象中包含的数据将暴露给模板使用：</p>\n<pre class=\"code-rows\"><code> const Comp = {\n   setup() {\n     const count = ref(0)\n     // 返回一个对象，对象中的数据会暴露到渲染函数中\n     return {\n       count\n     }\n   },\n   render() {\n     // 通过 this 可以访问 setup 暴露出来的响应式数据\n     return { type: 'div', children: `count is: $` }\n   }\n }\n</code></pre>\n<p>可以看到，<code>setup</code> 函数暴露的数据可以在渲染函数中通过 <code>this</code> 来访问。</p>\n<p>另外，<code>setup</code> 函数接收两个参数。第一个参数是 <code>props</code> 数据对象，第二个参数也是一个对象，通常称为 <code>setupContext</code>，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const Comp = {\n   props: {\n     foo: String\n   },\n   setup(props, setupContext) {\n     props.foo // 访问传入的 props 数据\n     // setupContext 中包含与组件接口相关的重要数据\n     const { slots, emit, attrs, expose } = setupContext\n     // ...\n   }\n }\n</code></pre>\n<p>从上面的代码可以看出，我们可以通过 <code>setup</code> 函数的第一个参数取得外部为组件传递的 <code>props</code> 数据对象。同时，<code>setup</code> 函数还接收第二个参数 <code>setupContext</code> 对象，其中保存着与组件接口相关的数据和方法，如下所示。</p>\n<ul>\n<li><code>slots</code>：组件接收到的插槽，我们会在后续章节中讲解。</li>\n<li><code>emit</code>：一个函数，用来发射自定义事件。</li>\n<li><code>attrs</code>：在 12.4 节中我们介绍过 <code>attrs</code> 对象。当为组件传递 <code>props</code> 时，那些没有显式地声明为 <code>props</code> 的属性会存储到 <code>attrs</code> 对象中。</li>\n<li><code>expose</code>：一个函数，用来显式地对外暴露组件数据。在本书编写时，与 <code>expose</code> 相关的 API 设计仍然在讨论中，详情可以查看具体的 RFC 内容<span class=\"comment-number\">1</span>。</li>\n</ul>\n<p>通常情况下，不建议将 <code>setup</code> 与 Vue.js 2 中其他组件选项混合使用。例如 <code>data</code>、<code>watch</code>、<code>methods</code> 等选项，我们称之为 “传统”组件选项。这是因为在 Vue.js 3 的场景下，更加提倡组合式 API，<code>setup</code> 函数就是为组合式 API 而生的。混用组合式 API 的 <code>setup</code> 选项与“传统”组件选项并不是明智的选择，因为这样会带来语义和理解上的负担。</p>\n<p>接下来，我们就围绕上述这些能力来尝试实现 <code>setup</code> 组件选项，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   const componentOptions = vnode.type\n   // 从组件选项中取出 setup 函数\n   let { render, data, setup, /* 省略其他选项 */ } = componentOptions\n<p>beforeCreate &amp;&amp; beforeCreate()</p>\n<p>const state = data ? reactive(data()) : null<br />\nconst [props, attrs] = resolveProps(propsOption, vnode.props)</p>\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null<br />\n}</p>\n<p>// setupContext，由于我们还没有讲解 emit 和 slots，所以暂时只需要 attrs<br />\nconst setupContext = { attrs }<br />\n// 调用 setup 函数，将只读版本的 props 作为第一个参数传递，避免用户意外地修改 props 的值，<br />\n// 将 setupContext 作为第二个参数传递<br />\nconst setupResult = setup(shallowReadonly(instance.props), setupContext)<br />\n// setupState 用来存储由 setup 返回的数据<br />\nlet setupState = null<br />\n// 如果 setup 函数的返回值是函数，则将其作为渲染函数<br />\nif (typeof setupResult === ‘function’) {<br />\n// 报告冲突<br />\nif (render) console.error(‘setup 函数返回渲染函数，render 选项将被忽略’)<br />\n// 将 setupResult 作为渲染函数<br />\nrender = setupResult<br />\n} else {<br />\n// 如果 setup 的返回值不是函数，则作为数据状态赋值给 setupState<br />\nsetupState = setupResult<br />\n}</p>\n<p>vnode.component = instance</p>\n<p>const renderContext = new Proxy(instance, {<br />\nget(t, k, r) {<br />\nconst { state, props } = t<br />\nif (state &amp;&amp; k in state) {<br />\nreturn state[k]<br />\n} else if (k in props) {<br />\nreturn props[k]<br />\n} else if (setupState &amp;&amp; k in setupState) {<br />\n// 渲染上下文需要增加对 setupState 的支持<br />\nreturn setupState[k]<br />\n} else {<br />\nconsole.error(‘不存在’)<br />\n}<br />\n},<br />\nset (t, k, v, r) {<br />\nconst { state, props } = t<br />\nif (state &amp;&amp; k in state) {<br />\nstate[k] = v<br />\n} else if (k in props) {<br />\nconsole.warn(<code>Attempting to mutate prop &quot;$&quot;. Props are readonly.</code>)<br />\n} else if (setupState &amp;&amp; k in setupState) {<br />\n// 渲染上下文需要增加对 setupState 的支持<br />\nsetupState[k] = v<br />\n} else {<br />\nconsole.error(‘不存在’)<br />\n}<br />\n}<br />\n})</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>上面是 <code>setup</code> 函数的最小实现，这里有以下几点需要注意。</p>\n<ul>\n<li><code>setupContext</code> 是一个对象，由于我们还没有讲解关于 <code>emit</code> 和 <code>slots</code> 的内容，因此 <code>setupContext</code> 暂时只包含 <code>attrs</code>。</li>\n<li>我们通过检测 <code>setup</code> 函数的返回值类型来决定应该如何处理它。如果它的返回值为函数，则直接将其作为组件的渲染函数。这里需要注意的是，为了避免产生歧义，我们需要检查组件选项中是否已经存在 <code>render</code> 选项，如果存在，则需要打印警告信息。</li>\n<li>渲染上下文 <code>renderContext</code> 应该正确地处理 <code>setupState</code>，因为 <code>setup</code> 函数返回的数据状态也应该暴露到渲染环境。</li>\n</ul>\n<h2 id=\"nav_point_115\">12.6　组件事件与 <code>emit</code> 的实现</h2>\n<p><code>emit</code> 用来发射组件的自定义事件，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const MyComponent = {\n   name: 'MyComponent',\n   setup(props, { emit }) {\n     // 发射 change 事件，并传递给事件处理函数两个参数\n     emit('change', 1, 2)\n<pre><code> return () =&amp;gt; {\n   return // ...\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>当使用该组件时，我们可以监听由 <code>emit</code> 函数发射的自定义事件：</p>\n<pre class=\"code-rows\"><code> &lt;MyComponent @change=\"handler\" /&gt;\n</code></pre>\n<p>上面这段模板对应的虚拟 DOM 为：</p>\n<pre class=\"code-rows\"><code> const CompVNode = {\n   type: MyComponent,\n   props: {\n     onChange: handler\n   }\n }\n</code></pre>\n<p>可以看到，自定义事件 <code>change</code> 被编译成名为 <code>onChange</code> 的属性，并存储在 <code>props</code> 数据对象中。这实际上是一种约定。作为框架设计者，也可以按照自己期望的方式来设计事件的编译结果。</p>\n<p>在具体的实现上，发射自定义事件的本质就是根据事件名称去 <code>props</code> 数据对象中寻找对应的事件处理函数并执行，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null<br />\n}</p>\n<p>// 定义 emit 函数，它接收两个参数<br />\n// event: 事件名称<br />\n// payload: 传递给事件处理函数的参数<br />\nfunction emit(event, …payload) {<br />\n// 根据约定对事件名称进行处理，例如 change --&gt; onChange<br />\nconst eventName = <code>on$</code><br />\n// 根据处理后的事件名称去 props 中寻找对应的事件处理函数<br />\nconst handler = instance.props[eventName]<br />\nif (handler) {<br />\n// 调用事件处理函数并传递参数<br />\nhandler(…payload)<br />\n} else {<br />\nconsole.error(‘事件不存在’)<br />\n}<br />\n}</p>\n<p>// 将 emit 函数添加到 setupContext 中，用户可以通过 setupContext 取得 emit 函数<br />\nconst setupContext = { attrs, emit }</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>整体实现并不复杂，只需要实现一个 <code>emit</code> 函数并将其添加到 <code>setupContext</code> 对象中，这样用户就可以通过 <code>setupContext</code> 取得 <code>emit</code> 函数了。另外，当 <code>emit</code> 函数被调用时，我们会根据约定对事件名称进行转换，以便能够在 <code>props</code> 数据对象中找到对应的事件处理函数。最后，调用事件处理函数并透传参数即可。这里有一点需要额外注意，我们在讲解 <code>props</code> 时提到，任何没有显式地声明为 <code>props</code> 的属性都会存储到 <code>attrs</code> 中。换句话说，任何事件类型的 <code>props</code>，即 <code>onXxx</code> 类的属性，都不会出现在 <code>props</code> 中。这导致我们无法根据事件名称在 <code>instance.props</code> 中找到对应的事件处理函数。为了解决这个问题，我们需要在解析 <code>props</code> 数据的时候对事件类型的 <code>props</code> 做特殊处理，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function resolveProps(options, propsData) {\n   const props = {}\n   const attrs = {}\n   for (const key in propsData) {\n     // 以字符串 on 开头的 props，无论是否显式地声明，都将其添加到 props 数据中，而不是添加到 attrs 中\n     if (key in options || key.startsWith('on')) {\n       props[key] = propsData[key]\n     } else {\n       attrs[key] = propsData[key]\n     }\n   }\n<p>return [ props, attrs ]<br />\n}<br />\n</code></pre></p>\n<p>处理方式很简单，通过检测 <code>propsData</code> 的 <code>key</code> 值来判断它是否以字符串 <code>'on'</code> 开头，如果是，则认为该属性是组件的自定义事件。这时，即使组件没有显式地将其声明为 <code>props</code>，我们也将它添加到最终解析的 <code>props</code> 数据对象中，而不是添加到 <code>attrs</code> 对象中。</p>\n<h2 id=\"nav_point_116\">12.7　插槽的工作原理与实现</h2>\n<p>顾名思义，组件的插槽指组件会预留一个槽位，该槽位具体要渲染的内容由用户插入，如下面给出的 <code>MyComponent</code> 组件的模板所示：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;header&gt;&lt;slot name=\"header\" /&gt;&lt;/header&gt;\n   &lt;div&gt;\n     &lt;slot name=\"body\" /&gt;\n   &lt;/div&gt;\n   &lt;footer&gt;&lt;slot name=\"footer\" /&gt;&lt;/footer&gt;\n &lt;/template&gt;\n</code></pre>\n<p>当在父组件中使用 <code>&lt;MyComponent&gt;</code> 组件时，可以根据插槽的名字来插入自定义的内容：</p>\n<pre class=\"code-rows\"><code> &lt;MyComponent&gt;\n   &lt;template #header&gt;\n     &lt;h1&gt;我是标题&lt;/h1&gt;\n   &lt;/template&gt;\n   &lt;template #body&gt;\n     &lt;section&gt;我是内容&lt;/section&gt;\n   &lt;/template&gt;\n   &lt;template #footer&gt;\n     &lt;p&gt;我是注脚&lt;/p&gt;\n   &lt;/template&gt;\n &lt;/MyComponent&gt;\n</code></pre>\n<p>上面这段父组件的模板会被编译成如下渲染函数：</p>\n<pre class=\"code-rows\"><code> // 父组件的渲染函数\n function render() {\n   return {\n     type: MyComponent,\n     // 组件的 children 会被编译成一个对象\n     children: {\n       header() {\n         return { type: 'h1', children: '我是标题' }\n       },\n       body() {\n         return { type: 'section', children: '我是内容' }\n       },\n       footer() {\n         return { type: 'p', children: '我是注脚' }\n       }\n     }\n   }\n }\n</code></pre>\n<p>可以看到，组件模板中的插槽内容会被编译为插槽函数，而插槽函数的返回值就是具体的插槽内容。组件 <code>MyComponent</code> 的模板则会被编译为如下渲染函数：</p>\n<pre class=\"code-rows\"><code> // MyComponent 组件模板的编译结果\n function render() {\n   return [\n     {\n       type: 'header',\n       children: [this.$slots.header()]\n     },\n     {\n       type: 'body',\n       children: [this.$slots.body()]\n     },\n     {\n       type: 'footer',\n       children: [this.$slots.footer()]\n     }\n   ]\n }\n</code></pre>\n<p>可以看到，渲染插槽内容的过程，就是调用插槽函数并渲染由其返回的内容的过程。这与 React 中 <code>render props</code> 的概念非常相似。</p>\n<p>在运行时的实现上，插槽则依赖于 <code>setupContext</code> 中的 <code>slots</code> 对象，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>// 直接使用编译好的 vnode.children 对象作为 slots 对象即可<br />\nconst slots = vnode.children || {}</p>\n<p>// 将 slots 对象添加到 setupContext 中<br />\nconst setupContext = { attrs, emit, slots }</p>\n<p>}<br />\n</code></pre></p>\n<p>可以看到，最基本的 <code>slots</code> 的实现非常简单。只需要将编译好的 <code>vnode.children</code> 作为 <code>slots</code> 对象，然后将 <code>slots</code> 对象添加到 <code>setupContext</code> 对象中。为了在 <code>render</code> 函数内和生命周期钩子函数内能够通过 <code>this.$slots</code> 来访问插槽内容，我们还需要在 <code>renderContext</code> 中特殊对待 <code>$slots</code> 属性，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>const slots = vnode.children || {}</p>\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null,<br />\n// 将插槽添加到组件实例上<br />\nslots<br />\n}</p>\n<p>// 省略部分代码</p>\n<p>const renderContext = new Proxy(instance, {<br />\nget(t, k, r) {<br />\nconst { state, props, slots } = t<br />\n// 当 k 的值为 $slots 时，直接返回组件实例上的 slots<br />\nif (k === ‘$slots’) return slots</p>\n<pre><code>   // 省略部分代码\n },\n set (t, k, v, r) {\n   // 省略部分代码\n }\n</code></pre>\n<p>})</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>我们对渲染上下文 <code>renderContext</code> 代理对象的 <code>get</code> 拦截函数做了特殊处理，当读取的键是 <code>$slots</code> 时，直接返回组件实例上的 <code>slots</code> 对象，这样用户就可以通过 <code>this.$slots</code> 来访问插槽内容了。</p>\n<h2 id=\"nav_point_117\">12.8　注册生命周期</h2>\n<p>在 Vue.js 3 中，有一部分组合式 API 是用来注册生命周期钩子函数的，例如 <code>onMounted</code>、<code>onUpdated</code> 等，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> import { onMounted } from 'vue'\n<p>const MyComponent = {<br />\nsetup() {<br />\nonMounted(() =&gt; {<br />\nconsole.log(‘mounted 1’)<br />\n})<br />\n// 可以注册多个<br />\nonMounted(() =&gt; {<br />\nconsole.log(‘mounted 2’)<br />\n})</p>\n<pre><code> // ...\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在 <code>setup</code> 函数中调用 <code>onMounted</code> 函数即可注册 <code>mounted</code> 生命周期钩子函数，并且可以通过多次调用 <code>onMounted</code> 函数来注册多个钩子函数，这些函数会在组件被挂载之后再执行。这里的疑问在于，在 A 组件的 <code>setup</code> 函数中调用 <code>onMounted</code> 函数会将该钩子函数注册到 A 组件上；而在 B 组件的 <code>setup</code> 函数中调用 <code>onMounted</code> 函数会将钩子函数注册到 B 组件上，这是如何实现的呢？实际上，我们需要维护一个变量 <code>currentInstance</code>，用它来存储当前组件实例，每当初始化组件并执行组件的 <code>setup</code> 函数之前，先将 <code>currentInstance</code> 设置为当前组件实例，再执行组件的 <code>setup</code> 函数，这样我们就可以通过 <code>currentInstance</code> 来获取当前正在被初始化的组件实例，从而将那些通过 <code>onMounted</code> 函数注册的钩子函数与组件实例进行关联。</p>\n<p>接下来我们着手实现。首先需要设计一个当前实例的维护方法，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 全局变量，存储当前正在被初始化的组件实例\n let currentInstance = null\n // 该方法接收组件实例作为参数，并将该实例设置为 currentInstance\n function setCurrentInstance(instance) {\n   currentInstance = instance\n }\n</code></pre>\n<p>有了 <code>currentInstance</code> 变量，以及用来设置该变量的 <code>setCurrentInstance</code> 函数之后，我们就可以着手修改 <code>mounteComponent</code> 函数了，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null,<br />\nslots,<br />\n// 在组件实例中添加 mounted 数组，用来存储通过 onMounted 函数注册的生命周期钩子函数<br />\nmounted: []<br />\n}</p>\n<p>// 省略部分代码</p>\n<p>// setup<br />\nconst setupContext = { attrs, emit, slots }</p>\n<p>// 在调用 setup 函数之前，设置当前组件实例<br />\nsetCurrentInstance(instance)<br />\n// 执行 setup 函数<br />\nconst setupResult = setup(shallowReadonly(instance.props), setupContext)<br />\n// 在 setup 函数执行完毕之后，重置当前组件实例<br />\nsetCurrentInstance(null)</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>上面这段代码以 <code>onMounted</code> 函数为例进行说明。为了存储由 <code>onMounted</code> 函数注册的生命周期钩子，我们需要在组件实例对象上添加 <code>instance.mounted</code> 数组。之所以 <code>instance.mounted</code> 的数据类型是数组，是因为在 <code>setup</code> 函数中，可以多次调用 <code>onMounted</code> 函数来注册不同的生命周期函数，这些生命周期函数都会存储在 <code>instance.mounted</code> 数组中。</p>\n<p>现在，组件实例的维护已经搞定了。接下来考虑 <code>onMounted</code> 函数本身的实现，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function onMounted(fn) {\n   if (currentInstance) {\n     // 将生命周期函数添加到 instance.mounted 数组中\n     currentInstance.mounted.push(fn)\n   } else {\n     console.error('onMounted 函数只能在 setup 中调用')\n   }\n }\n</code></pre>\n<p>可以看到，整体实现非常简单直观。只需要通过 <code>currentInstance</code> 取得当前组件实例，并将生命周期钩子函数添加到当前实例对象的 <code>instance.mounted</code> 数组中即可。另外，如果当前实例不存在，则说明用户没有在 <code>setup</code> 函数内调用 <code>onMounted</code> 函数，这是错误的用法，因此我们应该抛出错误及其原因。</p>\n<p>最后一步需要做的是，在合适的时机调用这些注册到 <code>instance.mounted</code> 数组中的生命周期钩子函数，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n     // 省略部分代码\n<pre><code> effect(() =&amp;gt; {\n   const subTree = render.call(renderContext, renderContext)\n   if (!instance.isMounted) {\n     // 省略部分代码\n\n     // 遍历 instance.mounted 数组并逐个执行即可\n     instance.mounted &amp;amp;&amp;amp; instance.mounted.forEach(hook =&amp;gt; hook.call(renderContext))\n   } else {\n     // 省略部分代码\n   }\n   instance.subTree = subTree\n }, {\n   scheduler: queueJob\n })\n</code></pre>\n<p>}<br />\n</code></pre></p>\n<p>可以看到，我们只需要在合适的时机遍历 <code>instance.mounted</code> 数组，并逐个执行该数组内的生命周期钩子函数即可。</p>\n<p>对于除 <code>mounted</code> 以外的生命周期钩子函数，其原理同上。</p>\n<h2 id=\"nav_point_118\">12.9　总结</h2>\n<p>在本章中，我们首先讨论了如何使用虚拟节点来描述组件。使用虚拟节点的 <code>vnode.type</code> 属性来存储组件对象，渲染器根据虚拟节点的该属性的类型来判断它是否是组件。如果是组件，则渲染器会使用 <code>mountComponent</code> 和 <code>patchComponent</code> 来完成组件的挂载和更新。</p>\n<p>接着，我们讨论了组件的自更新。我们知道，在组件挂载阶段，会为组件创建一个用于渲染其内容的副作用函数。该副作用函数会与组件自身的响应式数据建立响应联系。当组件自身的响应式数据发生变化时，会触发渲染副作用函数重新执行，即重新渲染。但由于默认情况下重新渲染是同步执行的，这导致无法对任务去重，因此我们在创建渲染副作用函数时，指定了自定义的调用器。该调度器的作用是，当组件自身的响应式数据发生变化时，将渲染副作用函数缓冲到微任务队列中。有了缓冲队列，我们即可实现对渲染任务的去重，从而避免无用的重新渲染所导致的额外性能开销。</p>\n<p>然后，我们介绍了组件实例。它本质上是一个对象，包含了组件运行过程中的状态，例如组件是否挂载、组件自身的响应式数据，以及组件所渲染的内容（即 <code>subtree</code>）等。有了组件实例后，在渲染副作用函数内，我们就可以根据组件实例上的状态标识，来决定应该进行全新的挂载，还是应该打补丁。</p>\n<p>而后，我们讨论了组件的 <code>props</code> 与组件的被动更新。副作用自更新所引起的子组件更新叫作子组件的被动更新。我们还介绍了渲染上下文（<code>renderContext</code>），它实际上是组件实例的代理对象。在渲染函数内访问组件实例所暴露的数据都是通过该代理对象实现的。</p>\n<p>之后，我们讨论了 <code>setup</code> 函数。该函数是为了组合式 API 而生的，所以我们要避免将其与 Vue.js 2 中的“传统”组件选项混合使用。<code>setup</code> 函数的返回值可以是两种类型，如果返回函数，则将该函数作为组件的渲染函数；如果返回数据对象，则将该对象暴露到渲染上下文中。</p>\n<p><code>emit</code> 函数包含在 <code>setupContext</code> 对象中，可以通过 <code>emit</code> 函数发射组件的自定义事件。通过 <code>v-on</code> 指令为组件绑定的事件在经过编译后，会以 <code>onXxx</code> 的形式存储到 <code>props</code> 对象中。当 <code>emit</code> 函数执行时，会在 <code>props</code> 对象中寻找对应的事件处理函数并执行它。</p>\n<p>随后，我们讨论了组件的插槽。它借鉴了 Web Component 中 <code>&lt;slot&gt;</code> 标签的概念。插槽内容会被编译为插槽函数，插槽函数的返回值就是向槽位填充的内容。<code>&lt;slot&gt;</code> 标签则会被编译为插槽函数的调用，通过执行对应的插槽函数，得到外部向槽位填充的内容（即虚拟 DOM），最后将该内容渲染到槽位中。</p>\n<p>最后，我们讨论了 <code>onMounted</code> 等用于注册生命周期钩子函数的方法的实现。通过 <code>onMounted</code> 注册的生命周期函数会被注册到当前组件实例的 <code>instance.mounted</code> 数组中。为了维护当前正在初始化的组件实例，我们定义了全局变量 <code>currentInstance</code>，以及用来设置该变量的 <code>setCurrentInstance</code> 函数。</p>\n<br style=\"page-break-after:always\" />","comments":[]}