{"id":74287,"title":"39 | 回溯算法：从电影《蝴蝶效应》中学习回溯算法的核心思想","content":"<p>我们在<a href=\"https://time.geekbang.org/column/article/70891\">第31节</a>提到，深度优先搜索算法利用的是回溯算法思想。这个算法思想非常简单，但是应用却非常广泛。它除了用来指导像深度优先搜索这种经典的算法设计之外，还可以用在很多实际的软件开发场景中，比如正则表达式匹配、编译原理中的语法分析等。</p><p>除此之外，很多经典的数学问题都可以用回溯算法解决，比如数独、八皇后、0-1背包、图的着色、旅行商问题、全排列等等。既然应用如此广泛，我们今天就来学习一下这个算法思想，看看它是如何指导我们解决问题的。</p><h2>如何理解“回溯算法”？</h2><p>在我们的一生中，会遇到很多重要的岔路口。在岔路口上，每个选择都会影响我们今后的人生。有的人在每个岔路口都能做出最正确的选择，最后生活、事业都达到了一个很高的高度；而有的人一路选错，最后碌碌无为。如果人生可以量化，那如何才能在岔路口做出最正确的选择，让自己的人生“最优”呢？</p><p>我们可以借助前面学过的贪心算法，在每次面对岔路口的时候，都做出看起来最优的选择，期望这一组选择可以使得我们的人生达到“最优”。但是，我们前面也讲过，贪心算法并不一定能得到最优解。那有没有什么办法能得到最优解呢？</p><p>2004年上映了一部非常著名的电影《蝴蝶效应》，讲的就是主人公为了达到自己的目标，一直通过回溯的方法，回到童年，在关键的岔路口，重新做选择。当然，这只是科幻电影，我们的人生是无法倒退的，但是这其中蕴含的思想其实就是回溯算法。</p><!-- [[[read_end]]] --><p>笼统地讲，回溯算法很多时候都应用在“搜索”这类问题上。不过这里说的搜索，并不是狭义的指我们前面讲过的图的搜索算法，而是在一组可能的解中，搜索满足期望的解。</p><p>回溯的处理思想，有点类似枚举搜索。我们枚举所有的解，找到满足期望的解。为了有规律地枚举所有可能的解，避免遗漏和重复，我们把问题求解的过程分为多个阶段。每个阶段，我们都会面对一个岔路口，我们先随意选一条路走，当发现这条路走不通的时候（不符合期望的解），就回退到上一个岔路口，另选一种走法继续走。</p><p>理论的东西还是过于抽象，老规矩，我还是举例说明一下。我举一个经典的回溯例子，我想你可能已经猜到了，那就是八皇后问题。</p><p>我们有一个8x8的棋盘，希望往里放8个棋子（皇后），每个棋子所在的行、列、对角线都不能有另一个棋子。你可以看我画的图，第一幅图是满足条件的一种方法，第二幅图是不满足条件的。八皇后问题就是期望找到所有满足这种要求的放棋子方式。</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/f5/a0e3994319732ca77c81e0f92cc77ff5.jpg?wh=1142*577\" alt=\"\"></p><p>我们把这个问题划分成8个阶段，依次将8个棋子放到第一行、第二行、第三行……第八行。在放置的过程中，我们不停地检查当前放法，是否满足要求。如果满足，则跳到下一行继续放置棋子；如果不满足，那就再换一种放法，继续尝试。</p><p>回溯算法非常适合用递归代码实现，所以，我把八皇后的算法翻译成代码。我在代码里添加了详细的注释，你可以对比着看下。如果你之前没有接触过八皇后问题，建议你自己用熟悉的编程语言实现一遍，这对你理解回溯思想非常有帮助。</p><pre><code>int[] result = new int[8];//全局或成员变量,下标表示行,值表示queen存储在哪一列\npublic void cal8queens(int row) { // 调用方式：cal8queens(0);\n  if (row == 8) { // 8个棋子都放置好了，打印结果\n    printQueens(result);\n    return; // 8行棋子都放好了，已经没法再往下递归了，所以就return\n  }\n  for (int column = 0; column &lt; 8; ++column) { // 每一行都有8中放法\n    if (isOk(row, column)) { // 有些放法不满足要求\n      result[row] = column; // 第row行的棋子放到了column列\n      cal8queens(row+1); // 考察下一行\n    }\n  }\n}\n\nprivate boolean isOk(int row, int column) {//判断row行column列放置是否合适\n  int leftup = column - 1, rightup = column + 1;\n  for (int i = row-1; i &gt;= 0; --i) { // 逐行往上考察每一行\n    if (result[i] == column) return false; // 第i行的column列有棋子吗？\n    if (leftup &gt;= 0) { // 考察左上对角线：第i行leftup列有棋子吗？\n      if (result[i] == leftup) return false;\n    }\n    if (rightup &lt; 8) { // 考察右上对角线：第i行rightup列有棋子吗？\n      if (result[i] == rightup) return false;\n    }\n    --leftup; ++rightup;\n  }\n  return true;\n}\n\nprivate void printQueens(int[] result) { // 打印出一个二维矩阵\n  for (int row = 0; row &lt; 8; ++row) {\n    for (int column = 0; column &lt; 8; ++column) {\n      if (result[row] == column) System.out.print(&quot;Q &quot;);\n      else System.out.print(&quot;* &quot;);\n    }\n    System.out.println();\n  }\n  System.out.println();\n}\n</code></pre><h2>两个回溯算法的经典应用</h2><p>回溯算法的理论知识很容易弄懂。不过，对于新手来说，比较难的是用递归来实现。所以，我们再通过两个例子，来练习一下回溯算法的应用和实现。</p><h3>1.0-1背包</h3><p>0-1背包是非常经典的算法问题，很多场景都可以抽象成这个问题模型。这个问题的经典解法是动态规划，不过还有一种简单但没有那么高效的解法，那就是今天讲的回溯算法。动态规划的解法我下一节再讲，我们先来看下，如何用回溯法解决这个问题。</p><p>0-1背包问题有很多变体，我这里介绍一种比较基础的。我们有一个背包，背包总的承载重量是Wkg。现在我们有n个物品，每个物品的重量不等，并且不可分割。我们现在期望选择几件物品，装载到背包中。在不超过背包所能装载重量的前提下，如何让背包中物品的总重量最大？</p><p>实际上，背包问题我们在贪心算法那一节，已经讲过一个了，不过那里讲的物品是可以分割的，我可以装某个物品的一部分到背包里面。今天讲的这个背包问题，物品是不可分割的，要么装要么不装，所以叫0-1背包问题。显然，这个问题已经无法通过贪心算法来解决了。我们现在来看看，用回溯算法如何来解决。</p><p>对于每个物品来说，都有两种选择，装进背包或者不装进背包。对于n个物品来说，总的装法就有2^n种，去掉总重量超过Wkg的，从剩下的装法中选择总重量最接近Wkg的。不过，我们如何才能不重复地穷举出这2^n种装法呢？</p><p>这里就可以用回溯的方法。我们可以把物品依次排列，整个问题就分解为了n个阶段，每个阶段对应一个物品怎么选择。先对第一个物品进行处理，选择装进去或者不装进去，然后再递归地处理剩下的物品。描述起来很费劲，我们直接看代码，反而会更加清晰一些。</p><p>这里还稍微用到了一点搜索剪枝的技巧，就是当发现已经选择的物品的重量超过Wkg之后，我们就停止继续探测剩下的物品。你可以看我写的具体的代码。</p><pre><code>public int maxW = Integer.MIN_VALUE; //存储背包中物品总重量的最大值\n// cw表示当前已经装进去的物品的重量和；i表示考察到哪个物品了；\n// w背包重量；items表示每个物品的重量；n表示物品个数\n// 假设背包可承受重量100，物品个数10，物品重量存储在数组a中，那可以这样调用函数：\n// f(0, 0, a, 10, 100)\npublic void f(int i, int cw, int[] items, int n, int w) {\n  if (cw == w || i == n) { // cw==w表示装满了;i==n表示已经考察完所有的物品\n    if (cw &gt; maxW) maxW = cw;\n    return;\n  }\n  f(i+1, cw, items, n, w);\n  if (cw + items[i] &lt;= w) {// 已经超过可以背包承受的重量的时候，就不要再装了\n    f(i+1,cw + items[i], items, n, w);\n  }\n}\n</code></pre><h3>2.正则表达式</h3><p>看懂了0-1背包问题，我们再来看另外一个例子，正则表达式匹配。</p><p>对于一个开发工程师来说，正则表达式你应该不陌生吧？在平时的开发中，或多或少都应该用过。实际上，正则表达式里最重要的一种算法思想就是回溯。</p><p>正则表达式中，最重要的就是通配符，通配符结合在一起，可以表达非常丰富的语义。为了方便讲解，我假设正则表达式中只包含“*”和“?”这两种通配符，并且对这两个通配符的语义稍微做些改变，其中，“*”匹配任意多个（大于等于0个）任意字符，“?”匹配零个或者一个任意字符。基于以上背景假设，我们看下，如何用回溯算法，判断一个给定的文本，能否跟给定的正则表达式匹配？</p><p>我们依次考察正则表达式中的每个字符，当是非通配符时，我们就直接跟文本的字符进行匹配，如果相同，则继续往下处理；如果不同，则回溯。</p><p>如果遇到特殊字符的时候，我们就有多种处理方式了，也就是所谓的岔路口，比如“*”有多种匹配方案，可以匹配任意个文本串中的字符，我们就先随意的选择一种匹配方案，然后继续考察剩下的字符。如果中途发现无法继续匹配下去了，我们就回到这个岔路口，重新选择一种匹配方案，然后再继续匹配剩下的字符。</p><p>有了前面的基础，是不是这个问题就好懂多了呢？我把这个过程翻译成了代码，你可以结合着一块看下，应该有助于你理解。</p><pre><code>public class Pattern {\n  private boolean matched = false;\n  private char[] pattern; // 正则表达式\n  private int plen; // 正则表达式长度\n\n  public Pattern(char[] pattern, int plen) {\n    this.pattern = pattern;\n    this.plen = plen;\n  }\n\n  public boolean match(char[] text, int tlen) { // 文本串及长度\n    matched = false;\n    rmatch(0, 0, text, tlen);\n    return matched;\n  }\n\n  private void rmatch(int ti, int pj, char[] text, int tlen) {\n    if (matched) return; // 如果已经匹配了，就不要继续递归了\n    if (pj == plen) { // 正则表达式到结尾了\n      if (ti == tlen) matched = true; // 文本串也到结尾了\n      return;\n    }\n    if (pattern[pj] == '*') { // *匹配任意个字符\n      for (int k = 0; k &lt;= tlen-ti; ++k) {\n        rmatch(ti+k, pj+1, text, tlen);\n      }\n    } else if (pattern[pj] == '?') { // ?匹配0个或者1个字符\n      rmatch(ti, pj+1, text, tlen);\n      rmatch(ti+1, pj+1, text, tlen);\n    } else if (ti &lt; tlen &amp;&amp; pattern[pj] == text[ti]) { // 纯字符匹配才行\n      rmatch(ti+1, pj+1, text, tlen);\n    }\n  }\n}\n</code></pre><h2>内容小结</h2><p>回溯算法的思想非常简单，大部分情况下，都是用来解决广义的搜索问题，也就是，从一组可能的解中，选择出一个满足要求的解。回溯算法非常适合用递归来实现，在实现的过程中，剪枝操作是提高回溯效率的一种技巧。利用剪枝，我们并不需要穷举搜索所有的情况，从而提高搜索效率。</p><p>尽管回溯算法的原理非常简单，但是却可以解决很多问题，比如我们开头提到的深度优先搜索、八皇后、0-1背包问题、图的着色、旅行商问题、数独、全排列、正则表达式匹配等等。如果感兴趣的话，你可以自己搜索研究一下，最好还能用代码实现一下。如果这几个问题都能实现的话，你基本就掌握了回溯算法。</p><h2>课后思考</h2><p>现在我们对今天讲到的0-1背包问题稍加改造，如果每个物品不仅重量不同，价值也不同。如何在不超过背包重量的情况下，让背包中的总价值最大？</p><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","neighbors":{"left":{"article_title":"38 | 分治算法：谈一谈大规模计算框架MapReduce中的分治思想","id":73503},"right":{"article_title":"40 | 初识动态规划：如何巧妙解决“双十一”购物时的凑单问题？","id":74788}},"comments":[{"had_liked":false,"id":53175,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1545613736,"is_pvip":true,"replies":[{"id":"19362","content":"👍","user_name":"作者回复","comment_id":53175,"uid":"1190123","ip_address":"","utype":1,"ctime":1545649122,"user_name_real":"gg"}],"discussion_count":15,"race_medal":0,"score":"1401704952232","product_id":100017301,"comment_content":"回溯算法本质上就是枚举，优点在于其类似于摸着石头过河的查找策略，且可以通过剪枝少走冤枉路。它可能适合应用于缺乏规律，或我们还不了解其规律的搜索场景中。","like_count":326,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434056,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545649122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476815,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/cf/c2fa7439.jpg","nickname":"Abstract","note":"","ucode":"198072950CDB7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79992,"discussion_content":"我朋友问我为什么10行代码看半天？最后手画图彻底明白0-1背包问题了。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1576134603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2260132,"avatar":"","nickname":"Geek_1cc022","note":"","ucode":"4738C5FE136E8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1476815,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/cf/c2fa7439.jpg","nickname":"Abstract","note":"","ucode":"198072950CDB7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378114,"discussion_content":"求教怎么画图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623057657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":79992,"ip_address":""},"score":378114,"extra":""}]},{"author":{"id":1528737,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/a1/1a7bd68a.jpg","nickname":"吴同学","note":"","ucode":"9103EB5FD43ECD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265169,"discussion_content":"我理解的回溯算法就是一棵解决问题的决策树，通过深度优先遍历，而写出代码的关键是要理解回溯是怎么通过函数递归调用实现的！","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1589378250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1215892,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","nickname":"GGL","note":"","ucode":"AED10B8248D1E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300218,"discussion_content":"0-1背包问题还可以把第11行代码放到后面，感觉这样好理解一些。用 swift 实现了0-1背包问题并打印了相应的背包里面的物品，希望能帮到大家：https://github.com/gl-lei/algorithm/blob/master/Backtrack/Package.swift","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597990138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2029015,"avatar":"","nickname":"小钢炮","note":"","ucode":"676C4CCF3CCD0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1215892,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","nickname":"GGL","note":"","ucode":"AED10B8248D1E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394284,"discussion_content":"11行代码放后面才是正常的思路！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631808090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300218,"ip_address":""},"score":394284,"extra":""},{"author":{"id":1128420,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/e4/5d7a32c6.jpg","nickname":"creasylai19","note":"","ucode":"F9B04060FCFD3F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1215892,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","nickname":"GGL","note":"","ucode":"AED10B8248D1E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583884,"discussion_content":"其实是要先判断当前包的总重量是否已经超过额度，如果已经超过，则当前的item可以跳过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660464008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300218,"ip_address":"广东"},"score":583884,"extra":""}]},{"author":{"id":1180307,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","nickname":"seven","note":"","ucode":"55CE5F60051F89","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96769,"discussion_content":"这个8皇后是怎样找出所有的情况的，代码中看不出来，有没有这个栏目的交流群，可以问下问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577092118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1564331,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/D5Wuw4RcdvMmP0GdmEcLW6fRpCjhKuwYmTxOJIzicFO7VQ0cXkVP2SHy1o58QAgy8ZSyZXNB3c64TEBeEwE69fQ/132","nickname":"Geek_e8a4ae","note":"","ucode":"D497B086060F09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180307,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","nickname":"seven","note":"","ucode":"55CE5F60051F89","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":168492,"discussion_content":"其实是慢慢向下搜索，发现某一行没有可以的了，就回退上一行换一个位置，大概这样","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581584952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96769,"ip_address":""},"score":168492,"extra":""},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180307,"avatar":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","nickname":"seven","note":"","ucode":"55CE5F60051F89","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":212749,"discussion_content":"其实就是8层嵌套循环，把所有的情况都遍历出来。你可以结合程序员小灰讲的八皇后问题，应该就能理解老师写的代码了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585012833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96769,"ip_address":""},"score":212749,"extra":""},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1564331,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/D5Wuw4RcdvMmP0GdmEcLW6fRpCjhKuwYmTxOJIzicFO7VQ0cXkVP2SHy1o58QAgy8ZSyZXNB3c64TEBeEwE69fQ/132","nickname":"Geek_e8a4ae","note":"","ucode":"D497B086060F09","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328596,"discussion_content":"找到一个解后，打印，然后继续回退，尝试其他分支。直至第一层节点的8个分支遍历完成，即遍历搜索所有的解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606188025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":168492,"ip_address":""},"score":328596,"extra":""}]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120363,"discussion_content":"0-1背包看不明白的，来看下这个链接https://www.cnblogs.com/workharder/p/12154734.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578273241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1498811,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqxPHQ0mFEJ8ia1fLa9ZGqGmvHmuKkuIBCNk4BbIhBvnV4EAqnxdpVBEPuHJOUoyhGewdicNR01GkdA/132","nickname":"freshbin","note":"","ucode":"08EFEA2CC04F3A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247006,"discussion_content":"吐","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1587795565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":120363,"ip_address":""},"score":247006,"extra":""}]},{"author":{"id":1258401,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a1/f3835f01.jpg","nickname":"社会猪","note":"","ucode":"CFF5EA7F247373","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14554,"discussion_content":"是是是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568770449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53294,"user_name":"slvher","can_delete":false,"product_type":"c1","uid":1018964,"ip_address":"","ucode":"F4ED6980C8248B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/54/deb19880.jpg","comment_is_top":false,"comment_ctime":1545622963,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"680150455731","product_id":100017301,"comment_content":"0-1 背包问题的回溯实现技巧：<br><br>第 11 行的递归调用表示不选择当前物品，直接考虑下一个（第 i+1 个），故 cw 不更新<br><br>第 13 行的递归调用表示选择了当前物品，故考虑下一个时，cw 通过入参更新为 cw + items[i]<br><br>函数入口处的 if 分支表明递归结束条件，并保证 maxW 跟踪所有选择中的最大值","like_count":158,"discussions":[{"author":{"id":1129309,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3b/5d/15c4817a.jpg","nickname":"xxxxL","note":"","ucode":"F84BB5ACD1241E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125197,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578480111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640973,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","nickname":"maybe","note":"","ucode":"2C0D1D26853DB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106645,"discussion_content":"请问下，如果把11行代码写到14行后面，并且套上else可以吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577541465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1068669,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4e/7d/40c50a43.jpg","nickname":"一科米粒","note":"","ucode":"6154E5C4F04A86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1640973,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","nickname":"maybe","note":"","ucode":"2C0D1D26853DB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120132,"discussion_content":"嗯,感觉写成else这样的话 语义更明确","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578245732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106645,"ip_address":""},"score":120132,"extra":""},{"author":{"id":1461687,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLoxyegHarElcAbXdl9FaOMXcOibOOEgWgFMiakL2q7guxcqMqkUQBib1zldFS56hr61Y8zhlO3Rs8Hg/132","nickname":"Geek__f5e47e0e2519","note":"","ucode":"FE1EBAF59233CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1640973,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","nickname":"maybe","note":"","ucode":"2C0D1D26853DB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139556,"discussion_content":"感觉这样就不是枚举的思想了，因为这样的话，else 和if分支只能流程只能进一个，但是老师原来的写法，是两个都包含的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579294677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106645,"ip_address":""},"score":139556,"extra":""},{"author":{"id":1338389,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6c/15/932d9795.jpg","nickname":"陆垚","note":"","ucode":"D2A7B9023DBE5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1640973,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","nickname":"maybe","note":"","ucode":"2C0D1D26853DB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320523,"discussion_content":"不行的哦，这样的话没有尝试到所有到可能性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604390430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":106645,"ip_address":""},"score":320523,"extra":""}]},{"author":{"id":1713937,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/11/a9ea2f9f.jpg","nickname":"老学校老男孩","note":"","ucode":"CE6F26EAFB84B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100541,"discussion_content":"谢谢，看了评论才明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577268059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1440343,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/57/02c162dd.jpg","nickname":"白鸟","note":"","ucode":"8E1F24E49B3026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2353,"discussion_content":"请问11行的代码可以放到14行后面吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563507199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1196864,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","nickname":"嘉一","note":"","ucode":"8D16BD0B75B019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1440343,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/57/02c162dd.jpg","nickname":"白鸟","note":"","ucode":"8E1F24E49B3026","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27534,"discussion_content":"可以，只不过就变成了1-0的考察顺序了而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570665962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2353,"ip_address":""},"score":27534,"extra":""},{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196864,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","nickname":"嘉一","note":"","ucode":"8D16BD0B75B019","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219912,"discussion_content":"其实这1-0，0-1是什么意思呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585823506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":27534,"ip_address":""},"score":219912,"extra":""},{"author":{"id":1245504,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/40/a203a3b9.jpg","nickname":"爱学习不害怕","note":"","ucode":"BE325C02E4C92F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221930,"discussion_content":"0不放1放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586084012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219912,"ip_address":""},"score":221930,"extra":""}]}]},{"had_liked":false,"id":72365,"user_name":"G.S.K","can_delete":false,"product_type":"c1","uid":1222966,"ip_address":"","ucode":"88217F9289EB48","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/36/d054c979.jpg","comment_is_top":false,"comment_ctime":1551598731,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"431048328331","product_id":100017301,"comment_content":"0-1背包问题根据老师下边这句话的讲解，代码再加两行注释就非常容易理解了<br><br>我们可以把物品依次排列，整个问题就分解为了 n 个阶段，每个阶段对应一个物品怎么选择。先对第一个物品进行处理，选择装进去或者不装进去，然后再递归地处理剩下的物品。<br><br>public int maxW = Integer.MIN_VALUE; &#47;&#47; 存储背包中物品总重量的最大值<br>&#47;&#47; cw 表示当前已经装进去的物品的重量和；i 表示考察到哪个物品了；<br>&#47;&#47; w 背包重量；items 表示每个物品的重量；n 表示物品个数<br>&#47;&#47; 假设背包可承受重量 100，物品个数 10，物品重量存储在数组 a 中，那可以这样调用函数：<br>&#47;&#47; f(0, 0, a, 10, 100)<br>public void f(int i, int cw, int[] items, int n, int w) {<br>  if (cw == w || i == n) { &#47;&#47; cw==w 表示装满了 ;i==n 表示已经考察完所有的物品<br>    if (cw &gt; maxW) maxW = cw;<br>    return;<br>  }<br>  f(i+1, cw, items, n, w); &#47;&#47;当前物品不装进背包<br>  if (cw + items[i] &lt;= w) {&#47;&#47; 已经超过可以背包承受的重量的时候，就不要再装了<br>    f(i+1,cw + items[i], items, n, w); &#47;&#47;当前物品装进背包<br>  }<br>}<br>","like_count":100,"discussions":[{"author":{"id":1898292,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","nickname":"jack","note":"","ucode":"A2253AC8570C5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311039,"discussion_content":"也就是说，第一个装进背包的物品是是序号最大的那一个。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1602199757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94986,"discussion_content":"装或者不装，我感觉可以封装成两个函数，这样两行就清楚多了，然后在装的函数中，可以使用剪纸技巧减少运算量~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577004736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400927,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/5f/59ee0ca2.jpg","nickname":"极客海","note":"","ucode":"F0037CF1DBDA66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213445,"discussion_content":"有一疑问想请教，w 背包重量， cw 表示当前已经装进去的物品的重量和，为何cw == w 表示装满了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585094744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1466617,"avatar":"https://static001.geekbang.org/account/avatar/00/16/60/f9/0417a5dc.jpg","nickname":"Geek_26c95d","note":"","ucode":"AA1F4E9548439F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1400927,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/5f/59ee0ca2.jpg","nickname":"极客海","note":"","ucode":"F0037CF1DBDA66","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403560,"discussion_content":"w表示的是背包最高可以承载的重量","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634108367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213445,"ip_address":""},"score":403560,"extra":""}]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373878,"discussion_content":"66, 看你的注释才看懂. 我是笨比","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620902449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1792098,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","nickname":"Q罗","note":"","ucode":"E797378F4DA1F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301368,"discussion_content":" 为什么是 if (cw + items[i] <= w) ？不是应该  if (cw + items[i] >= w) 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598505126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1909732,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","nickname":"Geek_99ae14","note":"","ucode":"268852986A6B69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1792098,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","nickname":"Q罗","note":"","ucode":"E797378F4DA1F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307313,"discussion_content":"cw + items[i] <= w 应该表示还没有超过背包承受的重量，还可以再装，老师写的注释是条件不成立的情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600599003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301368,"ip_address":""},"score":307313,"extra":""},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1792098,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","nickname":"Q罗","note":"","ucode":"E797378F4DA1F4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373877,"discussion_content":"你整反了, 想要装当前元素时, 判断下当前重量+当前元素不能超过w. 超过了就不能装了!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620902408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301368,"ip_address":""},"score":373877,"extra":""}]},{"author":{"id":1265209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4e/39/629ac418.jpg","nickname":"@饭米粒","note":"","ucode":"F0DEBB278453CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287160,"discussion_content":"这个是不是不应该有物品数量的限制，而仅仅根据包的承受重量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593392819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528163,"avatar":"https://static001.geekbang.org/account/avatar/00/17/51/63/9da9ae1f.jpg","nickname":"Lib","note":"","ucode":"7A2BEC8100F2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258814,"discussion_content":"看你的补充一下就懂了👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588729935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99367,"user_name":"Shawn","can_delete":false,"product_type":"c1","uid":1014729,"ip_address":"","ucode":"B95D7B54465DE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/c9/75c9002e.jpg","comment_is_top":false,"comment_ctime":1559200309,"is_pvip":false,"replies":[{"id":"35757","content":"👍","user_name":"作者回复","comment_id":99367,"uid":"1190123","ip_address":"","utype":1,"ctime":1559257558,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"400991158837","product_id":100017301,"comment_content":"0-1背包问题理解：<br>假设三个物品，每个物品在考虑时有两种选择，1-放进包，0-不放<br>11行代码表示不放进包里。13行代码表示放进包里。<br>三个物品遍历过程如下：<br>0 0 0 update maxW<br>0 0 1  update maxW<br>0 1 0  update maxW<br>0 1 1   update maxW<br>1 0 0   update maxW<br>1 0 1    update maxW<br>1 1 0    update maxW<br>1 1 1     update maxW","like_count":93,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452081,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559257558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2694205,"avatar":"https://static001.geekbang.org/account/avatar/00/29/1c/3d/76465ee4.jpg","nickname":"摘星","note":"","ucode":"55D8CAFC938F91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535192,"discussion_content":"牛逼 秒懂 ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1638365256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052088,"avatar":"","nickname":"dyh_zero","note":"","ucode":"98029D72597EF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331731,"discussion_content":"看起来像二进制+1。。。 好巧妙","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606963831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1207488,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gLC1Z8lYdWPHquZbJCf5FfIDgOJKiapygoyNrl4b5fkibyV2LBnCKV5BjRAYOhPGJxL425rIdSVnibTMEg012S9Pg/132","nickname":"邵帅","note":"","ucode":"EB662C972CC248","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2052088,"avatar":"","nickname":"dyh_zero","note":"","ucode":"98029D72597EF2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344815,"discussion_content":"二进制0-7  对应8种可能\nfor(int i = 0; i < 8; i++)\n{\n    i &amp; 0x01;\n    i &amp; 0x02;\n    i &amp; 0x04;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611578414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331731,"ip_address":""},"score":344815,"extra":""}]},{"author":{"id":1110492,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f1/dc/05df7333.jpg","nickname":"hu","note":"","ucode":"57A074D5904907","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585491,"discussion_content":"感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661595123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576251,"discussion_content":"懂了，感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655374002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1708327,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/11/27/6791b96b.jpg","nickname":"枫","note":"","ucode":"CAEF2793B419E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554392,"discussion_content":"遍历顺序应该是[0, 0, 0]\n[1, 0, 0]\n[0, 1, 0]\n[1, 1, 0]\n[0, 0, 1]\n[1, 0, 1]\n[0, 1, 1]\n[1, 1, 1]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646363039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2527979,"avatar":"https://static001.geekbang.org/account/avatar/00/26/92/eb/e530c2d0.jpg","nickname":"姬遇","note":"","ucode":"4A1617750FC3A9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361808,"discussion_content":"妙啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616761034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328357,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606126340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257890,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588607966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53321,"user_name":"siegfried","can_delete":false,"product_type":"c1","uid":1007931,"ip_address":"","ucode":"31673819DD2605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/3b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1545626224,"is_pvip":false,"replies":[{"id":"19360","content":"是的","user_name":"作者回复","comment_id":53321,"uid":"1190123","ip_address":"","utype":1,"ctime":1545649082,"user_name_real":"gg"}],"discussion_count":4,"race_medal":0,"score":"259243663984","product_id":100017301,"comment_content":"回溯就是暴力枚举的解法吧？遍历所有情况，当满足情况就停止遍历（剪枝）。","like_count":60,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434097,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545649082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328597,"discussion_content":"只是停止当前层的遍历。然后回退到上一层，继续遍历其他解（如8皇后问题）。当然也可以只求一个解，在函数入口增加find=true时终止即可。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1606188510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389023,"discussion_content":"嘻嘻，暴力枚举","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629096030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81719,"discussion_content":"+1  暴力枚举","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576252403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128527,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1566896128,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"229200162816","product_id":100017301,"comment_content":"8皇后的Python代码是按照争哥的JAVA代码翻译的，写完之后并没有深刻的理解“回溯”这个动作发生在哪里，后来在微信公众小灰上又看了一遍图解，决定debug跑一下。<br>借助着VSCode显示出来的递归栈终于明白了“回溯”是怎么执行的。<br>简单来说，当前几个循环皇后按照要求站好位之后，已经产生了对应数量的递归栈，此时一致是递归中的递，当走到当前循环时检查发现 一行中8个位置检查isOK都是false时，栈顶的cal8queens这个函数就结束了，这个时候就该递归中的归了，所以就回到上一行，为该行的皇后换另外一个符合条件的位置，这就是所谓的枚举搜索啊。<br>我太高兴了，哈哈。","like_count":53,"discussions":[{"author":{"id":2807562,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/d7/0a/41917193.jpg","nickname":"小镇不会做题家","note":"","ucode":"C2DF270A46E0EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584460,"discussion_content":"当走到当前循环时检查发现 一行中8个位置检查isOK都是false时，栈顶的cal8queens这个函数就结束了，这个时候就该递归中的归了，所以就回到上一行 这是最关键的 感谢老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660831989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985537,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","nickname":"邵光泽","note":"","ucode":"45088A0F5DF384","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582271,"discussion_content":"写出来了～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659343534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985537,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","nickname":"邵光泽","note":"","ucode":"45088A0F5DF384","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582267,"discussion_content":"兄弟，灰灰那只讲了找到第一种排列的方式。如何找到所有的排列呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659341606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2474580,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c2/54/77dac43b.jpg","nickname":"UltramanTiga","note":"","ucode":"245D8768E5CCDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579110,"discussion_content":"八皇后的我理解回溯点了，但是背包的没懂在哪里回溯了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657177770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035612,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","nickname":"刘強","note":"","ucode":"B2E41BB894A727","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409068,"discussion_content":"这个地方我也是看了好一会，才理解了，在哪儿回溯的。问题在于没深刻理解递归","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635379444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/50/5e319b55.jpg","nickname":"yrion","note":"","ucode":"1236AA1D62E277","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113870,"discussion_content":"老铁，vscode如何查看递归栈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577938188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1140304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/50/5e319b55.jpg","nickname":"yrion","note":"","ucode":"1236AA1D62E277","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113908,"discussion_content":"你debug的时候，不是有个stack tab 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577940795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":113870,"ip_address":""},"score":113908,"extra":""}]}]},{"had_liked":false,"id":57328,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1546750629,"is_pvip":false,"replies":[{"id":"20714","content":"👍","user_name":"作者回复","comment_id":57328,"uid":"1190123","ip_address":"","utype":1,"ctime":1546825921,"user_name_real":"gg"}],"discussion_count":11,"race_medal":0,"score":"224885050021","product_id":100017301,"comment_content":"看不懂背包问题代码同学，请好好仔细看看下面这句话，再结合代码你就看懂了<br><br>我们可以把物品依次排列，整个问题就分解为了 n 个阶段，每个阶段对应一个物品怎么选择。先对第一个物品进行处理，选择装进去或者不装进去，然后再递归地处理剩下的物品。","like_count":52,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435524,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546825921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2048952,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/43/b8/8c33cd6b.jpg","nickname":"戴峥","note":"","ucode":"18F5DACA09B76B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589608,"discussion_content":"要不是看评论, 根本看不懂老师的代码,   评论的可以做老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665197083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"丹麦"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","nickname":"while (1)等;","note":"","ucode":"BAEC7258D65B69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402554,"discussion_content":"看代码递归进去，不是从最后一个物品回溯出来吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633915910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2260132,"avatar":"","nickname":"Geek_1cc022","note":"","ucode":"4738C5FE136E8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378117,"discussion_content":"然后回溯的时候才是最难理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623058345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2093945,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f3/79/a2bedc1e.jpg","nickname":"J6","note":"","ucode":"3F097CE1FFCA05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331117,"discussion_content":"不就是排列组合吗…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606790364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2133309,"avatar":"https://static001.geekbang.org/account/avatar/00/20/8d/3d/91b1afd3.jpg","nickname":"小北","note":"","ucode":"8FE84905F0E073","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307845,"discussion_content":"是我太笨了吗  还是看不懂代码哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600772583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41031,"discussion_content":"选择装进去或者不装进去，或的关系，但是为啥代码中没体现呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572332103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52584,"discussion_content":"因为代码中分别针对这两种情况都调用了递归目标函数，相当于无论装进去或者不装进去，都要走一遍程序逻辑，这样肯定不会有遗漏的情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574069945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41031,"ip_address":""},"score":52584,"extra":""},{"author":{"id":1516010,"avatar":"https://static001.geekbang.org/account/avatar/00/17/21/ea/2cfb9144.jpg","nickname":"auko","note":"","ucode":"7E3AA25B2D250F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173573,"discussion_content":"一个阶段可以选择装或者不装 , 如果你非得用if else来表示或的关系 , 那怎么回溯呢?","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581859430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41031,"ip_address":""},"score":173573,"extra":""},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1516010,"avatar":"https://static001.geekbang.org/account/avatar/00/17/21/ea/2cfb9144.jpg","nickname":"auko","note":"","ucode":"7E3AA25B2D250F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328580,"discussion_content":"因装与不装属于或关系，都需要遍历到。用递归树画出来，很容易理解，就知道不能用if else分支代码写法了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606183820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":173573,"ip_address":""},"score":328580,"extra":""}]}]},{"had_liked":false,"id":53468,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1545651910,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"169049376454","product_id":100017301,"comment_content":"0-1背包的递归代码里第11行非常巧妙，它借助回溯过程，实现了以每一个可能的物品，作为第一个装入背包的，以尝试所有物品组合。但如果仅按从前向后执行的顺序看，是不太容易发现这一点的。","like_count":39,"discussions":[{"author":{"id":1318404,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","nickname":"你在不远的未来","note":"","ucode":"5B34C8BD03B71A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285938,"discussion_content":"牛逼，突然看到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592992238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41029,"discussion_content":"能再解释的详细一点吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572331994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94988,"discussion_content":"回溯算法就是借助递归回到上一个状态，装或者不装都是只会影响递归调用，\n而对于在同一个代码块中的装或者不装这两行，是不会影响的，即装了进行递归调用，然后回溯变成了不装，上一回的装是不会影响的~","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577004881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41029,"ip_address":""},"score":94988,"extra":""}]}]},{"had_liked":false,"id":64909,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1548952565,"is_pvip":false,"replies":[{"id":"24303","content":"是的，我写的时候也查过资料。","user_name":"作者回复","comment_id":64909,"uid":"1190123","ip_address":"","utype":1,"ctime":1550543037,"user_name_real":"gg"}],"discussion_count":9,"race_medal":0,"score":"151872807925","product_id":100017301,"comment_content":"老师，我经过查资料，找到，其实判断是否在一条斜线上还有更加简便的做法，就是如果行互减的绝对值等于列互减的绝对值，那么就是在一条斜线上的。<br>if (Math.abs(row - i) == Math.abs(column - result[i])) {<br>                return false;<br>            }","like_count":36,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438231,"discussion_content":"是的，我写的时候也查过资料。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550543037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2340235,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b5/8b/92549066.jpg","nickname":"Geek_8183d5","note":"","ucode":"D06E69FC7737A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532983,"discussion_content":"棒  更容易理解了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637746215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381815,"discussion_content":"直接比较不好么，这么弄多了两步计算，还容易弄错坐标","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625223365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2334530,"avatar":"","nickname":"Geek_a5f474","note":"","ucode":"600B69D3C142AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331873,"discussion_content":"还是觉得争哥的做法好， 绝对值的做法，其实是进一步将两种情况的逻辑提取优化了而已，在这个题目中不是重点，过分抽象反而影响代码的易读性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606998606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328299,"discussion_content":"还是老师的写法容易理解。易读性很重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606121366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50770,"discussion_content":"也可以给对角线，反对角线编号，然后建立两个数组存储对角线和反对角线是否有Q\n\n一个正方形棋盘的对角线条数等于2n - 1，比如，原理就是以中间最长对角线把正方形分成上下两个直角三角形，平行斜边的对角线(包括斜边本身和最后一个单独格子都算对角线)一共有n个，两个三角形加一起就是2n但是中间斜边计算了两次，要减1\n\n反对角线条数是一样的\n\n两个数组建立好了，利用行列就能求出第几条对角线里有Q，比如当前格子是[row, col] 当前对角线数组就是row+col，把对角线数组下标改成true即可，原理是col相当于你在x轴上往右数，row相当于y轴往上数，两个加一起正好就是所处对角线\n\n反对角线难一些，等于[n - 1 - row + col] 因为反对角线不是从坐标原点出发的，相当于横坐标从n-1(最后一个col)逆向往左数就等于n-1+row，然后再往上数，所以col还是加，这样就求出反对角线数组下标了，更改为true\n\n这样判断是否对角线有Q，直接从数组里拿就行了，这个解法可能对于纯解析几何思路理解梗荣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573758995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107606,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/96/eb143e46.jpg","nickname":"别天神","note":"","ucode":"42A08D6EF5C59A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23201,"discussion_content":"以row=0,column=0建立坐标系，就是一直线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569768654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042164,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/BDxD1k4ibAUPcljPLwgsnobjTfk2TxPTzCLps2uoGbD3HGIiaUF7XGLUnBArTyAySJzia0R6GRhroYwfyVwniaiaibzg/132","nickname":"灰灰灰","note":"","ucode":"519DB0429C4A80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2868,"discussion_content":"这斜率吧，对角线上的坐标(x1,y1)和当前点(0,0)的斜率的绝对值刚好是1。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563985287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1487456,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzSRrK59sydq3k5uTE9SzPYShHo3PqGh8GTk3be0pHjS7eGTdw27cUyI0M4UEiaicoV2PJpiajWGTtQ/132","nickname":"wxj","note":"","ucode":"B9BFE650BC4A39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1258,"discussion_content":"勾股定理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562484558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120336,"user_name":"peng","can_delete":false,"product_type":"c1","uid":1234797,"ip_address":"","ucode":"900E11E9B4D4F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","comment_is_top":false,"comment_ctime":1564836345,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"130413855225","product_id":100017301,"comment_content":"八皇后我一开始一直没想明白一个问题，就是每当print一种结果之后，并没有重置result数组，那再穷举下一种结果时，result中的脏数据会影响到isOK()函数的判断吗？<br>经过一番调试思考后，发现我的担心多余了。每次穷举下一种结果时，都会在上一种结果的基础上进行穷举，所以result中&lt;row之前的结果都是有用的，不是脏数据, 也不应该清掉它。<br>而isOK()每次都寻找正上，左上，右上的占用结果进行判断，因此result中&gt;=row的结果也不会影响到isOK()的判断，很快就可能被后续的穷举重新设置，遂而形成新的穷举结果。<br>有这些疑问只能说明我对递归回溯理解得还不到位，只能通过一步步调试来寻找答案","like_count":30,"discussions":[{"author":{"id":1867314,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/7e/32/a0e6b5d3.jpg","nickname":"Jesse","note":"","ucode":"61BF41E9FEB998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282003,"discussion_content":"因为isOK()是向上判断的，所以不需要复原，但是很多场景下是需要复位的，其实回溯的难点在于边界的考虑，在递归的场合下，有些边界条件很难想，回溯建议多写写「全排列」那道题，通用性比较强","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1591859349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154768,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9e/d0/efa32d10.jpg","nickname":"张晶鹏","note":"","ucode":"35FDDF671547F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389521,"discussion_content":"解决了我的困惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629300909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53838,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1545739225,"is_pvip":false,"replies":[{"id":"19658","content":"写多了你就会发现 这玩意贼简单","user_name":"作者回复","comment_id":53838,"uid":"1190123","ip_address":"","utype":1,"ctime":1545826216,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"108919921625","product_id":100017301,"comment_content":"我今天也把8皇后写出来了  虽然是第一次","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434259,"discussion_content":"写多了你就会发现 这玩意贼简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545826216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572151,"discussion_content":"贼简单收费这么贵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652622208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":434259,"ip_address":""},"score":572151,"extra":""}]},{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587707,"discussion_content":"哈哈哈 老哥逗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663231988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54561,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1545900698,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"96035181210","product_id":100017301,"comment_content":"今天又读了一遍这个文章,又写一遍八皇后,写的更快，更流畅,背包和正则匹配的代码也理解得更透彻了","like_count":22,"discussions":[{"author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41033,"discussion_content":"这里的背包问题，两种选择或的关系，为啥代码没体现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572332282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1292087,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b7/37/0290ff6e.jpg","nickname":"Veitor","note":"","ucode":"3397AC6D239195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332875,"discussion_content":"或的关系相当于求并集，多写一行递归调用，就多一条或的结果，所以递归行越多，并集结果越多，这就是或的关系。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607381383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41033,"ip_address":""},"score":332875,"extra":""}]},{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299658,"discussion_content":"11-13行不就体现了或的关系吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597759800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53580,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1545697910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78855109238","product_id":100017301,"comment_content":"8皇后以前提到就觉得难懂，今天硬着头皮去写，竟虽然难还是写出来了。多写多写多写","like_count":18},{"had_liked":false,"id":69956,"user_name":"饺子","can_delete":false,"product_type":"c1","uid":1251229,"ip_address":"","ucode":"88FEB4B0D68975","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/9d/a3706e4f.jpg","comment_is_top":false,"comment_ctime":1550916031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65975425471","product_id":100017301,"comment_content":"流程大概就是：<br>第一个不放，第二个不放，……，第n-1个不放，第n个不放。<br>第一个不放，第二个不放，……，第n-1个不放，<br>第n个放。<br>第一个不放，第二个不放， ……，第n-1个放，<br>第n个不放。<br>第一个不放，第二个不放， ……，第n-1个放，<br>第n个放。<br>……<br>以此类推<br>感觉这些问题就是将概率论知识转化成代码实现。<br>","like_count":15},{"had_liked":false,"id":132235,"user_name":"一个工匠","can_delete":false,"product_type":"c1","uid":1038449,"ip_address":"","ucode":"2168BA6F926074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","comment_is_top":false,"comment_ctime":1568053744,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"57402628592","product_id":100017301,"comment_content":"难道只有我把回溯理解成多叉树的“后序排序”？<br>之所以会回溯，是因为在一个结点，有多个选择，每个选择就是一叉，那多个选择就是多叉。选择一叉后，下一个结点又有多叉。这就是一个多叉树嘛。<br>return，就是叶子结点。<br>当return的时候，叶子结点访问完了，就要出栈了。依据“后序排序”的规则，开始回到上一个结点的下一叉进行入栈，然后又return了，又出栈了。<br>最后，把所有可能性全部遍历了一遍，game over了。","like_count":13,"discussions":[{"author":{"id":1038449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","nickname":"一个工匠","note":"","ucode":"2168BA6F926074","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8801,"discussion_content":"看了第40章，这个叫递归多叉树。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568054908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2237812,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/gGOGcSH4AcC6iaeVcibEsuKdkRMPWia5G1OQY9Bm5n9pR7HFWEmtWeK9S3RhibDf8ePibx7RsCRl2Ng6MOPL0ry9vHA/132","nickname":"Geek_71d8b8","note":"","ucode":"C767E902AE874B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369500,"discussion_content":"同感，后根遍历就是回溯算法的一种体现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619057864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328599,"discussion_content":"赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606189557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54492,"user_name":"森码","can_delete":false,"product_type":"c1","uid":1154799,"ip_address":"","ucode":"7D46C73EFA1987","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/ef/a74049d9.jpg","comment_is_top":false,"comment_ctime":1545881919,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"57380456767","product_id":100017301,"comment_content":"今天正好发现一个算法的示例，大家结合看看，应该能更好的理解https:&#47;&#47;algorithm-visualizer.org&#47;backtracking&#47;n-queens-problem","like_count":13,"discussions":[{"author":{"id":1468357,"avatar":"https://static001.geekbang.org/account/avatar/00/16/67/c5/cf48d14f.jpg","nickname":"=￣ω￣=","note":"","ucode":"7AB1BA6B2C54E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302803,"discussion_content":"给你个赞,这网站很可以呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599034041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716933,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/32/c5/025e6716.jpg","nickname":"jacky","note":"","ucode":"CD583272CF1237","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182893,"discussion_content":"这个网站不错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582461631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554431,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646377669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79251,"user_name":"啊波次的额佛哥～","can_delete":false,"product_type":"c1","uid":1201998,"ip_address":"","ucode":"6F31255207CB17","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/4e/302bfe22.jpg","comment_is_top":false,"comment_ctime":1553416403,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"40208122067","product_id":100017301,"comment_content":"或许先把判断去掉更好理解一点，一个物品就两种情况装或者不装，遍历所有情况，更新最大值。<br>if (i == n){<br>    if (cw &gt; maxW) maxW = cw;<br>return;<br>}<br>f(i+1, cw, items, n, w);<br>f(i+1, cw+items[i], items, n, w);<br>判断是为了去除超重情况，然后加上判断再理解一下。","like_count":9,"discussions":[{"author":{"id":1990451,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5f/33/fb3a13f9.jpg","nickname":"KI","note":"","ucode":"7D7DBBD428C8CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580780,"discussion_content":"你这算不出来\n没有设置条件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658371877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3841,"discussion_content":"确实把剪枝情况放到开头会好理解，但你的代码似乎有小虫子。\n一、假设装了最后一个（第n个）物品后，恰好超重了，按照你的写法，会把已经超重的重量赋值给maxW（此时cw大于包包的容量w)，这就不对了老哥。\n二、假设还没装够n个（i<n), 那我继续装，但你有没有发现，按照你的代码设计&#34;if(i == n)&#34;, 我永远都没有办法去更新maxW了，这也不对了老哥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564849269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54781,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1545962142,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"40200667806","product_id":100017301,"comment_content":"总觉得背包问题11行代码应该写在14行后，那个if条件后面。","like_count":9,"discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299659,"discussion_content":"写在if后就不对了，11行代码阐述的是前面代码的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597759860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156958,"user_name":"文刀山己几示羊","can_delete":false,"product_type":"c1","uid":1557626,"ip_address":"","ucode":"346C7392814405","user_header":"https://static001.geekbang.org/account/avatar/00/17/c4/7a/e584f82a.jpg","comment_is_top":false,"comment_ctime":1575001818,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35934740186","product_id":100017301,"comment_content":"关于0-1背包代码的实现，看到有同学纠结选择或不选择的问题：为什么不用if-else？其实根本没有可以if-else的判定条件。因为我们就是要枚举每一种情况，选择也要考虑到，不选择也要考虑到。选择“或”不选择其实是并集的关系。","like_count":8,"discussions":[{"author":{"id":1215892,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","nickname":"GGL","note":"","ucode":"AED10B8248D1E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300213,"discussion_content":"是这样，写 else 反而不对了，会漏掉了一大部分情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597989262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126363,"user_name":"🐷","can_delete":false,"product_type":"c1","uid":1189092,"ip_address":"","ucode":"660D2AE53DFBD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/e4/76803395.jpg","comment_is_top":false,"comment_ctime":1566373221,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27336176997","product_id":100017301,"comment_content":"0-1背包递归过程的理解（拿3个物品举例）：<br>\t000：第一次哪个物品都不选择放进背包<br>\t001：回溯到最后一个物品选择上，这次选择将它装进背包<br>\t01x：回溯到倒数第二个物品选择上，这次选择将它装进背包，然后处理它之后的物品：<br>\t\t010<br>\t\t011<br>\t1xx：回溯到倒数第三个物品选择上，这次选择将它装进背包，然后处理它之后的物品：<br>\t\t100\t<br>\t\t101<br>\t\t110<br>\t\t111","like_count":6,"discussions":[{"author":{"id":2474580,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c2/54/77dac43b.jpg","nickname":"UltramanTiga","note":"","ucode":"245D8768E5CCDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579112,"discussion_content":"这个看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657177870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576254,"discussion_content":"猪神yyds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655375241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576253,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655375226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64575,"user_name":"叶明","can_delete":false,"product_type":"c1","uid":1274237,"ip_address":"","ucode":"E9BF73B2C443F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/7d/43c27c12.jpg","comment_is_top":false,"comment_ctime":1548827313,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27318631089","product_id":100017301,"comment_content":"老师，你好，背包问题，貌似只记录了可以放进去的最大值，没有记录放进最大值对应的放法，我稍微<br>改了下，算出了最大值对应的所有放法，不知道可行不，希望老师回复下。<br>private int maxW = Integer.MIN_VALUE; &#47;&#47; 存储背包中物品总重量的最大值<br>    &#47;&#47; 下标表示物品序号，值表示是否放进背包:1放，0不放<br>    private int[] currentAnswer;<br>    &#47;&#47;存储所有解(map key表示放进去的重量，value表示对应重量的物品放法)，<br>    &#47;&#47;最终所有最优解为bestAnswerMap.get(maxW)<br>    private Map&lt;Integer, List&lt;int[]&gt;&gt; bestAnswerMap = new HashMap();<br><br>    &#47;&#47; cw 表示当前已经装进去的物品的重量和；i 表示考察到哪个物品了；<br>    &#47;&#47; w 背包重量；items 表示每个物品的重量；n 表示物品个数<br>    &#47;&#47; 假设背包可承受重量 100，物品个数 10，物品重量存储在数组 a 中，那可以这样调用函数：<br>    &#47;&#47; f(0, 0, a, 10, 100)<br>    public void f(int i, int cw, int[] items, int n, int w) {<br>        if(currentAnswer == null){<br>            currentAnswer = new int[n];<br>        }<br><br>        if (cw == w || i == n) { &#47;&#47; cw==w 表示装满了 ;i==n 表示已经考察完所有的物品<br>            if (cw &gt;= maxW) {<br>                maxW = cw;<br>                int[] bestAnswer = new int[currentAnswer.length];<br>                for(int j=0; j&lt;currentAnswer.length; j++){<br>                    bestAnswer[j] = currentAnswer[j];<br>                }<br>                if(bestAnswerMap.containsKey(cw)){<br>                    bestAnswerMap.get(cw).add(bestAnswer);<br>                }else{<br>                    List&lt;int[]&gt; list = new ArrayList&lt;int[]&gt;();<br>                    list.add(bestAnswer);<br>                    bestAnswerMap.put(cw, list);<br>                }<br>            }<br>            return;<br>        }<br>        currentAnswer[i] = 0;<br>        f(i+1, cw, items, n, w);<br>        if (cw + items[i] &lt;= w) {&#47;&#47; 已经超过可以背包承受的重量的时候，就不要再装了<br>            currentAnswer[i] = 1;<br>            f(i+1,cw + items[i], items, n, w);<br>        }<br>    }<br><br>最终maxW 对应的所有最优解为bestAnswerMap.get(maxW)","like_count":6,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55627,"discussion_content":"代码有问题, 无法得到最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574386656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53753,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1545719803,"is_pvip":false,"replies":[{"id":"19663","content":"你是觉得太简单了吧 不敢相信吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545826709,"ip_address":"","comment_id":53753,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27315523579","product_id":100017301,"comment_content":"这个回塑问题，老师讲的的理解了，但总感觉还是哪里没有学会，我又说不出来，好像总觉得少了点什么？<br><br>老师关于课后的题目，0-1背包，在限制重量与数量的前提下，这个解我觉得其实挺简单的，就是把老师的那个代码稍加改造就OK了<br><br> public void countMaxPkg(<br>      int index, int sumValue, int sumWeight, PkgValue[] items, int maxNum, int maxWeight) {<br><br>    &#47;&#47; 1,如果当前重量到达最大总重量，或者数量达到最达限制，则设置当前最大值<br>    if (index == maxNum || sumWeight == maxWeight) {<br>      &#47;&#47; 检查总重量是否更重<br>      if (sumMaxWeight &lt; sumWeight) {<br>        sumMaxWeight = sumWeight;<br>      }<br>      &#47;&#47; 检查当前价值是否更大<br>      if (maxValue &lt; sumValue) {<br>        maxValue = sumValue;<br>      }<br><br>      return;<br>    }<br><br>    &#47;&#47; 针对每个物品，有当前不加入背包中计算价值<br>    countMaxPkg(index + 1, sumValue, sumWeight, items, maxNum, maxWeight);<br><br>    &#47;&#47; 当前的最大总重量还是要小于限制值<br>    if (sumWeight + items[index].getWeight() &lt;= maxWeight) {<br><br>      &#47;&#47; 针对每个物品，有当前加入背包计算价值<br>      countMaxPkg(<br>          index + 1,<br>          sumValue + items[index].getValue(),<br>          sumWeight + items[index].getWeight(),<br>          items,<br>          maxNum,<br>          maxWeight);<br>    }<br>  }<br><br>完整代码在:<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;datastruct&#47;algorithm&#47;backtrackingAlgorithm&#47;packageZoneOne&#47;PackageValue.java<br><br>如果有问题，还请老师给予指正，谢谢！<br><br>","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434230,"discussion_content":"你是觉得太简单了吧 不敢相信吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545826709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810050,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9e/82/61e5acf7.jpg","nickname":"MooNight","note":"","ucode":"B5B5876841E33E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264017,"discussion_content":"我在想是不是考虑价值的时候，”检查总重量是否更重“是不是就可以不判断了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589280769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1739621,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8b/65/0f1f9a10.jpg","nickname":"小Y","note":"","ucode":"24A43BB71805F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384331,"discussion_content":"我也是这么感觉的，懂了又完全懂的样子🐽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626503104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193752,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1584957747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18764826931","product_id":100017301,"comment_content":"https:&#47;&#47;www.cnblogs.com&#47;kangxinxin&#47;p&#47;9968524.html<br>这篇博客详细分析了八皇后的过程，结合着老师的看，不错。","like_count":4},{"had_liked":false,"id":121483,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1565145823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18745015007","product_id":100017301,"comment_content":"课后思考 (用代码的形式写了出来)<br><br>void f(int i, int cw, int val, int n, int w){<br>  if(cw &gt; w) return ;<br>  if(i == n){<br>    if(val &gt; maxVal) maxVal = val;<br>    return ;<br>  }<br>  f(i+1, cw+w[i], val+v[i], n, w);<br>  f(i+1, cw, val, n, w);<br>}<br><br>最后获取到的 maxVal 就是最大价值","like_count":4},{"had_liked":false,"id":105208,"user_name":"Geek_bd613f","can_delete":false,"product_type":"c1","uid":1343671,"ip_address":"","ucode":"69740C1D0FC15B","user_header":"","comment_is_top":false,"comment_ctime":1560938395,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18740807579","product_id":100017301,"comment_content":"看完这篇文章，写了个求n位逐位整除数的题，发现剪枝技巧其实在考虑题目限制条件时自然就用上了，比如背包问题会判断weigh＜背包最大载重，如果不判断，递归到最后就不能直接取maxW了，因为这个值可能超过背包最大载重。","like_count":4},{"had_liked":false,"id":187807,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1584248147,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14469150035","product_id":100017301,"comment_content":"八皇后的理解：<br>假设已经填满第7行的Q，到第8行的时候，如果可以放下一个Q，那么打印这个解。如果不行，那么这个函数call8queens(8)这个函数结束，此时就回到第7行（call8queens(7)），再寻找下一个适合放入Q的位置（上一次放入Q的位置开始），如果找不到，在回到上行，在寻找这一行中适合放入Q的位置；如果能找到，最终也会在第8行的找到一个位置放下Q。不断的循环调用，不断的回归，直到每一行的for循环都结束，所有的解都打印完。<br>问题：result的数据会不会影响下一个结果集？<br>比如，当我们打印了第一个结果集，从第7行回到第6行，在第6行找下一个符合条件的Q的时候，需要用到result[5]的值，如果能找到，更新result[6]的值；如果找不到继续上一行，直到找到符合条件的Q.直到所有的栈函数出完，也就是所有的for循环结束，所以的解都打印完了。","like_count":3,"discussions":[{"author":{"id":1665364,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/54/b134dd74.jpg","nickname":"大掰","note":"","ucode":"262C4047A2E9EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270828,"discussion_content":"result 并不会影响影响下一个结果集，当程序从第七行回到第六行，继续第六行的循环的时候，会从新设置第六行的位置，并且前五行时已经设置好的；要是第六行循环完所有的列都没能在第七行找到一个合适的位置，那么循环就会跳回到第五行的循环，重新设置第五行的位置，然后再一次进入第六行的循环。。。。。一次类推，result是不会出现影响的，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590061288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187794,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1584244028,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14469145916","product_id":100017301,"comment_content":"有两个问题弄不明白<br>1.代码是怎么归的，比如怎么从第5行回到第4行的。<br>2.为什么能打印所以的解？","like_count":3,"discussions":[{"author":{"id":1030449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","nickname":"melo","note":"","ucode":"BF381B18E75867","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222470,"discussion_content":"我的理解是：第五行的逻辑本身就是在第四行的for循环调用的，如果第五行没有ok，那么第四行继续走逻辑，如果第四行还有其他的走法，ok，那么接着调用call8queen(4 + 1)重新走逻辑；若第四行不ok，则走到第三行，重新走逻辑。这种就可以理解为回溯了吧","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586147444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1514292,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","nickname":"Movan","note":"","ucode":"D5A2E9E2E7A439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1030449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","nickname":"melo","note":"","ucode":"BF381B18E75867","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257808,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588605141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":222470,"ip_address":""},"score":257808,"extra":""}]},{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277102,"discussion_content":"理解下栈、递归，就知道回溯是怎么回事了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591000015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b9/31/636e9007.jpg","nickname":"melo","note":"","ucode":"BF381B18E75867","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222484,"discussion_content":"打印所有的解：我们看到的是找到一个都ok了，但是每个for循环还是终究要走完的，函数终止时肯定row==8，即使中间过程得到了解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586148144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1473358,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","nickname":"一只独立特行的猪","note":"","ucode":"52263607CCBE6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204990,"discussion_content":"有没有人来指点一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584245240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133651,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1568628319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14453530207","product_id":100017301,"comment_content":"对于回溯的理解<br>    回溯相当于穷举，使用合理的剪枝技巧减少穷举的数量<br><br>思考题<br>    比较简单的做法是，穷举所有有效重量并记录其价值并逐一对比求出最大价值，使用全局变量记录最大价值及其相应的重量<br><br>练习<br>  i.  leetcode 784. Letter Case Permutation https:&#47;&#47;leetcode.com&#47;problems&#47;letter-case-permutation&#47;<br>  ii. leetcode 51. N-Queens https:&#47;&#47;leetcode.com&#47;problems&#47;n-queens&#47;","like_count":3},{"had_liked":false,"id":54538,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1545894523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430796411","product_id":100017301,"comment_content":"0-1背包python实现：<br>maxW = -1 # tracking the max weight<br><br>def backpack(i, cw, items, w):<br>    &#39;&#39;&#39; <br>    # i: the ith item, integer<br>    # cw: current weight, integer<br>    # items: python list of item weights<br>    # w: upper limit weight the backpack can load<br>    &#39;&#39;&#39;<br>    global maxW<br>    <br>    if cw==w or i==len(items): # base case<br>        if cw &gt; maxW:<br>            maxW = cw<br>        return<br>    <br>    # There are 2 states, traverse both!!!<br>    backpack(i+1, cw, items, w) # do not choose<br>    if (cw + items[i] &lt;= w):<br>        backpack(i+1, cw+items[i], items, w) # choose<br>    <br># how to use<br>items = [2, 2, 4, 6, 3]<br>backpack(0, 0, items, 10)<br>print(maxW)","like_count":3},{"had_liked":false,"id":53141,"user_name":"三又木","can_delete":false,"product_type":"c1","uid":1015605,"ip_address":"","ucode":"B9D3F7CE2D2A62","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/35/26db4185.jpg","comment_is_top":false,"comment_ctime":1545611609,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14430513497","product_id":100017301,"comment_content":"背包问题：if (cw &gt; maxW) maxW = cw;这样不是超重了嘛？还有代码里cw一直没有赋值操作啊","like_count":3,"discussions":[{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3826,"discussion_content":"1、这个maxW变量的含义你没弄清楚，maxW指的不是背包的最大容量（最大容量为w)，而是当前装法的“临时最大重量”，我们要求出各种装法中能装得最重的一种，哪种装法的重量最重，我们就把这个重量记录到maxW中，用来方便比较。\n2、cw指的是当前已装的重量，在第13行中，与新装的物品重量相加，相加后的cw, 作为递归函数“的参数”被赋值了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1564846623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213112,"user_name":"聂旋","can_delete":false,"product_type":"c1","uid":1193784,"ip_address":"","ucode":"40061E5AFDA99C","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","comment_is_top":false,"comment_ctime":1588304028,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10178238620","product_id":100017301,"comment_content":"个人觉得，回溯思想关注重点，把问题分阶段，每个阶段相当于一个路口，路口有不同数量的岔路。进入一个阶段，遍历岔路，并根据条件判断。不满足条件，回头走另一条岔路，若满足条件进入下一阶段。<br><br>八皇后，分8个阶段，每个阶段有8个分支。<br><br>01背包问题，阶段数不定，每个阶段有两个分支。<br><br>所以从以下几个关键点分析，更容易掌握回溯思想。   阶段数，每个阶段分支数，判定条件，终止条件。<br>","like_count":2,"discussions":[{"author":{"id":1193784,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","nickname":"聂旋","note":"","ucode":"40061E5AFDA99C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258899,"discussion_content":"贪心，分治，回溯，动态规划都可以通过上面四个方面来学习。这样按图索骥的学习，才能理解更透彻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588738196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171747,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1579005798,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10168940390","product_id":100017301,"comment_content":"回溯算法思想应用广泛，除了用来指导深度优先搜索这种经典算法设计之外，还可以用在如正则表达式匹配，编译原理中的语法分析等。<br><br>除此之外，很多经典的数学问题都可以用回溯算法解决，比如数独，八皇后，0-1背包，图的着色，旅行商问题，全排列等等。<br><br>一：如何理解“回溯算法”<br>\t回溯的处理思想，有些类似枚举搜索。枚举所有的解，找到满足期望的解。为了有规律的枚举所有可能的解，避免遗漏和重复，所以把问题求解的过程分为多个阶段。每个阶段都有多个选择，先随意选择一个，当发现走不通时，就退回到上一个岔路口，另选一种走法继续走。<br><br>八皇后问题：<br>\t有一个8X8的棋盘，希望往里放8个棋子，每个棋子所在的行，列，对角线都不能有另一个棋子。<br> <br>\t第一幅图满足要求，第二幅度图不满足，八皇后问题就是期望找到所有满足这种要求的的放棋子的方式。<br>\t我们把这个问题划分成8个阶段，依次将8个棋子放到第一行，第二行，第三行……第八行。<br>\t<br>0-1背包<br>\t0-1背包是非常经典的算法问题，很多场景都可以抽象炒年糕这个问题模型。这个问题的经典解法是动态规划，不过还有一种简单但没有那么高效的解法，就是回溯算法。<br>\t0-1背包问题有很多变体，例如：有一个背包，背包总的承载重量是Wkg。现在有n个物品的重量不等，并且不可分割。我们现在期望选择几件物品，装载到背包中，在不超过所能装载重量的前提下，如何让背包中物品的总重量最大？<br>\t这个背包问题，在贪心算法中有提到，但在贪心算法中讲的物品是可以分割的，可以将物品的一部分装进背包。此处的背包问题，物品是不可分割的，要么装要么不装，所以叫0-1背包问题。<br>\t对于每个物品来说，都有两种选择，装进背包或在着不装进背包。对于n个物品来说，中的装法就有2^n种，去掉总重量超过过W kg的，从剩下的装法中选择中重量最接近W kg的。<br>\t<br>\t可以用回溯的方法，不重复的找到2^n种装法。把物品依次排列，整个问题就分解为了n个阶段，每个阶段对应的一个物品怎么选择。先对第一个物品进行处理，选择装进去或是不装进去，然后在递归地处理剩下的物品。<br><br>2 正则表达式<br>\t正则表达式里最重要的一种算法思想就是回溯。<br>\t正则表达式中，最重要的就是通配符，通配符结合在一起，可以表达非常丰富的语义。假设：正则表达式中只包含 “*”和“？”这两种通配符，并且对这两种通配符的语义稍微做些改变。其中，“*”匹配任意多个（大于等于0个）任意字符，“？”匹配零个或者一个任意字符。基于以上背景假设，看下如何用回溯算法，判断一个给定的文本，能否跟给定的正则表达式匹配？<br>\t依次考察正则表达式中的每个字符，当是非通配符时，就直接跟文本的字符进行匹配，如果相同，则继续往下处理；如果不同，则回溯。<br>\t如果遇到特殊字符的时候，就有多种处理方式，如“*”有多种匹配方案，可以匹配任意个文本串中的字符，我们就先随意的选择一种匹配方案，然后继续考察剩下的字符。如果中途发现无法继续匹配下去，就回到这个岔路口，重新选择一种匹配方案，然后继续匹配剩下的字符。<br>\t<br>\t<br>\t<br>","like_count":2},{"had_liked":false,"id":149740,"user_name":"bucher","can_delete":false,"product_type":"c1","uid":1203973,"ip_address":"","ucode":"2A482BDBA2FD12","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/05/ca9ce3e9.jpg","comment_is_top":false,"comment_ctime":1573361555,"is_pvip":false,"replies":[{"id":"57631","content":"你说的对，是可以不用递归了。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573424542,"ip_address":"","comment_id":149740,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10163296147","product_id":100017301,"comment_content":"正则匹配这个，*代表匹配任意个任意字符，那只要匹配到* 就可以直接返回matched=true吧，不用再递归了吧","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473960,"discussion_content":"你说的对，是可以不用递归了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573424542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1557626,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c4/7a/e584f82a.jpg","nickname":"文刀山己几示羊","note":"","ucode":"346C7392814405","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66413,"discussion_content":"不是吧，如果模式串的*后面有普通字符呢？比如a*b，尽管*可以匹配任意个任意字符，但是还是需要匹配串是严格以b结尾才算匹配成功吧？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575048698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1557626,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c4/7a/e584f82a.jpg","nickname":"文刀山己几示羊","note":"","ucode":"346C7392814405","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176191,"discussion_content":"那这样最后一行代码就出问题了吧 ti怎么<tlen呢 就进不去这个分支了 老师代码有点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582028705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66413,"ip_address":""},"score":176191,"extra":""}]},{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109451,"discussion_content":"如果是正常使用的正则表达式，在*后面加？设成非贪婪模式才有必要再挨个递归检查。\n但如果按照争哥文章中提前做好的设定要求，就可以直接返回True了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577695879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117439,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1564047019,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10153981611","product_id":100017301,"comment_content":"回溯算法的核心就是试了再比，不行回退的思路。","like_count":2,"discussions":[{"author":{"id":1817693,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/axdZKHokJwxT06r9ibwHdGhicDHjFibNs3ibDEoUjllv1nOMGXB1poiakiamRpujibWl10ZIpk5g6scAV4GZRIicq5fonw/132","nickname":"Geek_vitamin","note":"","ucode":"5728F764370B72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196711,"discussion_content":"上面的N皇后，没看出在哪一步回退的，能帮忙解答下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583369998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1665364,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/54/b134dd74.jpg","nickname":"大掰","note":"","ucode":"262C4047A2E9EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1817693,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/axdZKHokJwxT06r9ibwHdGhicDHjFibNs3ibDEoUjllv1nOMGXB1poiakiamRpujibWl10ZIpk5g6scAV4GZRIicq5fonw/132","nickname":"Geek_vitamin","note":"","ucode":"5728F764370B72","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270831,"discussion_content":"要明白回溯的思想其实就是一种暴力求解，在八皇后问题上你可以看成是八个嵌套循环，当八个循环都找到一个合适的点的时候程序就会跳出循环或者时继续循环直到所有的解都打印出来，其实这并不是什么回溯，只是减少了循环次数；你可以写一个两层for循环测试，一定时外层驱动内层循环（也就是外层循环一次内层就循环n次），如果你在内层的for里面写一个判断，例如当满足n==3时；continue，这样就会跳回到外层循环；（其实就是n层for循环，每层循环有一个判断条件--是否结束本层循环）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590062071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":196711,"ip_address":""},"score":270831,"extra":""}]}]},{"had_liked":false,"id":80686,"user_name":"文祥","can_delete":false,"product_type":"c1","uid":1396893,"ip_address":"","ucode":"D38B0CD7926894","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/9d/b1305f4d.jpg","comment_is_top":false,"comment_ctime":1553698092,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10143632684","product_id":100017301,"comment_content":"8皇后还能完全理解，01背包就有点迷","like_count":2,"discussions":[{"author":{"id":1356814,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ic9yic7IAQNFMWdncBVNtZIiaCiaZQ65LYrD6ZrCOyAiabtsibq8Q0BmI3uXicGfVSQUQ8UqwbPUFn7N5VxIHO5hmEEdg/132","nickname":"here45","note":"","ucode":"364939030D10F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3977,"discussion_content":"关键是在11行和13行。11行是不装，13行是装。结合搜索树的深度遍历的过程来看。。。一开始也没懂，搞了好几个小时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565016633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74313,"user_name":"notfresh","can_delete":false,"product_type":"c1","uid":1451360,"ip_address":"","ucode":"7355D7E8269358","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/60/cb6f9ede.jpg","comment_is_top":false,"comment_ctime":1552187784,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10142122376","product_id":100017301,"comment_content":"有一个小小的请求: 代码注释可以分行写吗?<br>    &#47;&#47; i 表示考察到哪个物品了；<br>    &#47;&#47; cw 表示当前已经装进去的物品的重量和；<br>    &#47;&#47; items 表示每个物品的重量；<br>    &#47;&#47; n 表示物品个数<br>    &#47;&#47; w 背包重量；<br><br>","like_count":2,"discussions":[{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42686,"discussion_content":"自己做笔记分行不就行了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572752401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70380,"user_name":"唯她命","can_delete":false,"product_type":"c1","uid":1240398,"ip_address":"","ucode":"8F687E8D306840","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/4e/ef406442.jpg","comment_is_top":false,"comment_ctime":1551088207,"is_pvip":false,"replies":[{"id":"25193","content":"你自己搞错了吧，没法通过匹配啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551147393,"ip_address":"","comment_id":70380,"utype":1}],"discussion_count":7,"race_medal":0,"score":"10141022799","product_id":100017301,"comment_content":"aab   c*a*b 正则表达式，能匹配通过，文章的代码通过不了，代码有问题","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440596,"discussion_content":"你自己搞错了吧，没法通过匹配啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551147393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636231,"avatar":"","nickname":"我不是凯丁","note":"","ucode":"33B3DA141313B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7017,"discussion_content":"课程里的例子不是通常意义的正则表达式，就是简单的通配符匹配","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567265566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42687,"discussion_content":"首先a,c都匹配不上了亲.麻烦仔细看看说明吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572752547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23959,"discussion_content":"看代码前面的文字描述，读题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569947272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","nickname":"Joker","note":"","ucode":"126AF848001A1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2643,"discussion_content":"老师这里的和一般的不一样，------其中，“*”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符。那个星号是本身就代表着字符的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563814433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1610333,"avatar":"","nickname":"Geek_86533a","note":"","ucode":"6961C429E8953A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1156592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","nickname":"Joker","note":"","ucode":"126AF848001A1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4420,"discussion_content":"不是啊，大于等于0，可以为0，就是没有字符，正则确实有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565407689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2643,"ip_address":""},"score":4420,"extra":""},{"author":{"id":1156592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","nickname":"Joker","note":"","ucode":"126AF848001A1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1610333,"avatar":"","nickname":"Geek_86533a","note":"","ucode":"6961C429E8953A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4458,"discussion_content":"麻烦仔细看一下题目，那个本身是个字符，不是代表着之前那个字母的字数，如果没看明白，麻烦大声念一遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565435540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4420,"ip_address":""},"score":4458,"extra":""}]}]},{"had_liked":false,"id":58586,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1547124602,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10137059194","product_id":100017301,"comment_content":"老师，这中类型的题有时候跟着感觉也就写出来了，运行也ok，但是不知道为什么对，老师你有这种感觉吗？","like_count":2,"discussions":[{"author":{"id":1257347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/83/516e62ac.jpg","nickname":"木同","note":"","ucode":"81A7C9E8D27A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210501,"discussion_content":"老师肯定没有🤒","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584746792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504652,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","nickname":"抱小星","note":"","ucode":"BA7B0DAFDA4AF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174210,"discussion_content":"老师觉得好简单","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581899478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54554,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1545899351,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10135833943","product_id":100017301,"comment_content":"0-1 背包那个问题，没有地方存放，哪个地方存储选取的数组呢。结果输出在哪？希望老师指导下","like_count":2,"discussions":[{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109455,"discussion_content":"不需要存选取的数组啊，题目要的是满足条件的最大重量，代码中有全局变量保存了这个最大重量值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577696037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54523,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1545889689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135824281","product_id":100017301,"comment_content":"八皇后python实现：<br>result = [0, 0, 0, 0, 0, 0, 0, 0]<br><br>def cal8queens(row): # 调用方式：cal8queens(0)<br>    if row == 8: # 递归终止条件<br>        printQueens(result) # 打印结果<br>        print(&#39;-&#39; * 20) # 分隔符<br>        return<br>    <br>    for col in range(8): # 每行有8种放法，依次遍历<br>        if isOk(row, col): # 放法是否满足要求<br>            result[row] = col # 选择该列<br>            cal8queens(row+1) # 考察下一行<br>            <br>def isOk(row, col):<br>    leftup, rightup = col-1, col+1<br>    for r in range(row-1,-1,-1): # 遍历[row-1，-1)行<br>        if result[r] in [leftup,rightup,col]:<br>            return False<br>        leftup -= 1; rightup += 1<br>    return True<br><br>def printQueens(result): # 打印8*8结果<br>    for row in range(8):<br>        for col in range(8):<br>            if result[row] == col:<br>                print(&#39;Q&#39;, end=&#39;  &#39;)<br>            else:<br>                print(&#39;*&#39;, end=&#39;  &#39;)<br>        print() # 换行","like_count":2},{"had_liked":false,"id":53577,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1545697660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135632252","product_id":100017301,"comment_content":"总结来说，即通过递归深度优先搜索，如果遇到死节点，回退到上一步重新选择，最终实现枚举的目标","like_count":2},{"had_liked":false,"id":53209,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1228498,"ip_address":"","ucode":"582698D772810D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d2/3d88cb8e.jpg","comment_is_top":false,"comment_ctime":1545616119,"is_pvip":false,"replies":[{"id":"19361","content":"回溯也能解决的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545649113,"ip_address":"","comment_id":53209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135550711","product_id":100017301,"comment_content":"老师思考题应该就是下章的动态规划了吧。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434066,"discussion_content":"回溯也能解决的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545649113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312065,"user_name":"信了","can_delete":false,"product_type":"c1","uid":1368648,"ip_address":"","ucode":"EA188A1DD1D390","user_header":"https://static001.geekbang.org/account/avatar/00/14/e2/48/6c066714.jpg","comment_is_top":false,"comment_ctime":1631611185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926578481","product_id":100017301,"comment_content":"总共有N个物品，就有N个阶段，如果下个阶段没有选择，则下次重量是0，就可以转换成和八皇后问题，这样就容易理解一点 <br>static public void backTracking(int index,int curTotal,int[] items,int n,int total){<br>        if(curTotal == total || index == n){<br>            if(curTotal&gt;maxWeight){<br>                maxWeight = curTotal;<br>                System.out.println(&quot;maxWeight:&quot;+maxWeight);<br>            }<br>            return;<br>        }<br>        for(int i=0;i&lt;2;i++){<br>            int nextWeight = i == 0 ? 0 : items[index];<br>            if(curTotal+nextWeight&lt;=total){<br>                backTracking(index+1,curTotal+nextWeight,items,n,total);<br>            }<br>        }<br>    }","like_count":1},{"had_liked":false,"id":305892,"user_name":"聂旋","can_delete":false,"product_type":"c1","uid":1193784,"ip_address":"","ucode":"40061E5AFDA99C","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/38/5a3b72d4.jpg","comment_is_top":false,"comment_ctime":1628219703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923186999","product_id":100017301,"comment_content":"回溯算法要想学会，就得忘掉回溯俩字，记住枚举俩字。    因为很多人都会刻意去看，代码里面怎么实现回退的。其实代码里面只有枚举，没有回退，只不过是用终止条件把不合要求的终止了而已。","like_count":1},{"had_liked":false,"id":278548,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1613042745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5908010041","product_id":100017301,"comment_content":"哈哈哈，看多了回溯，发现八皇后确实简单，都是套路。另外，新年快乐，争哥！","like_count":1},{"had_liked":false,"id":275099,"user_name":"AllForOne","can_delete":false,"product_type":"c1","uid":2344452,"ip_address":"","ucode":"CA81E20CF552A1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnfnbYt0iaic79UY8uTH8QAfbk2VZy0u5TZtReqibY89PfDBwjSpTsTr2eotVV4ibIgCv2XVpD4nNDUw/132","comment_is_top":false,"comment_ctime":1611307265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906274561","product_id":100017301,"comment_content":"0-1背包的解答代码，可以理解成 加了剪枝条件的 二叉树 先序遍历的深度优先搜索。比如3个物品，左子树代表0不选，右子树代表1选，整个递归过程就是先序遍历的过程，画一下图就知道了","like_count":1},{"had_liked":false,"id":254664,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1603164373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898131669","product_id":100017301,"comment_content":"老师您好，请问回溯法有什么固定的步骤吗？就像动态规划那样，1.定义状态 2.确定状态转移方程3.由下向上。","like_count":1},{"had_liked":false,"id":221384,"user_name":"kaiser","can_delete":false,"product_type":"c1","uid":1390375,"ip_address":"","ucode":"F9438786E9A57B","user_header":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","comment_is_top":false,"comment_ctime":1590486996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885454292","product_id":100017301,"comment_content":"我把本节的三个例子和课后思考都写了代码，欢迎大家访问<br>https:&#47;&#47;github.com&#47;kaisesai&#47;datastructures_algorithm&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liukai&#47;datastructure&#47;ch_39_backtrack","like_count":1},{"had_liked":false,"id":216761,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1589337883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884305179","product_id":100017301,"comment_content":"哇，终于看懂了8皇后，以前觉得好难，现在觉得好简单啊，舒服。就是枚举所有情况，剪枝掉不满足情况的。","like_count":1},{"had_liked":false,"id":207746,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1587172937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882140233","product_id":100017301,"comment_content":"&lt;?php<br>$result=[];&#47;&#47; 用来存储每一行，下表为多少的元素放皇后<br><br>function cal8Queens($row) {<br>\tglobal $result;<br>\tif ($row == 8) {<br>\t\tprintQueens($result);<br>\t\treturn;<br>\t}<br>\t<br>\tfor ($column=0;$column&lt;8;$column++) {<br>\t\tif(isOk($row,$column)) {<br>\t\t\t$result[$row] = $column;<br>\t\t\tcal8Queens($row+1);<br>\t\t}<br>\t}<br>\t<br>}<br>function printQueens($result) { &#47;&#47; 有皇后的位置打印1 其他为 0 <br>\tfor ($i=0;$i&lt;8;$i++) {<br>\t\tfor($j=0;$j&lt;8;$j++) {<br>\t\t\tif ($result[$i] == $j) {<br>\t\t\t\techo &quot;1 &quot;;<br>\t\t\t} else {<br>\t\t\t\techo &quot;0 &quot;;<br>\t\t\t}<br>\t\t}\t<br>\t\techo &quot;&lt;br&gt;&quot;;<br>\t}<br>\t<br>\techo &quot;&lt;br&gt;==================&lt;br&gt;&quot;;<br>}<br>function isOk($row,$column) { &#47;&#47; 判断当前行列是否合适<br>\tglobal $result;<br>\t$leftUp = $column - 1;<br>\t$rightUp = $column + 1;<br>\t<br>\t&#47;&#47; 往上考察每一行<br>\tfor ($i = $row - 1;$i &gt;= 0;$i--) {<br>\t\tif ($result[$i] == $column) { &#47;&#47; 当前列考察<br>\t\t\treturn false;<br>\t\t}<br>\t\t<br>\t\t&#47;&#47; 左上对角<br>\t\tif ($leftUp &gt;= 0) {<br>\t\t\tif ($result[$i] == $leftUp) {<br>\t\t\t\treturn false;<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\t&#47;&#47; 右上对角<br>\t\tif ($rightUp &lt; 8) {<br>\t\t\tif ($result[$i] == $rightUp) {<br>\t\t\t\treturn false;<br>\t\t\t}<br>\t\t}<br>\t\t--$leftUp;<br>\t\t++$rightUp;<br>\t}<br>\treturn true;<br>}<br><br>cal8Queens(0);","like_count":1},{"had_liked":false,"id":203701,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1586256029,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5881223325","product_id":100017301,"comment_content":"正则匹配：<br>class Pattern:<br>    def __init__(self, pattern):<br>        &#39;&#39;&#39;<br>        初始化模式串<br>        :param pattern: 模式串<br>        &#39;&#39;&#39;<br>        self.pattern = pattern<br>        self.plen = len(pattern)<br><br>    def match(self, text):<br>        &#39;&#39;&#39;<br>        匹配接口<br>        :param text: 主串<br>        :return:<br>        &#39;&#39;&#39;<br>        print(&#39;模式串为：{}，等待匹配的字符串为{}&#39;.format(self.pattern,text))<br>        self.matched = False<br>        self.rmatch(0, 0, text, len(text))<br>        return self.matched<br><br>    def rmatch(self, cur_text, cur_pattern, text, tlen):<br>        &#39;&#39;&#39;<br>        进行匹配<br>        :param cur_text: 当前主串的下标<br>        :param cur_pattern: 当前模式串的下标<br>        :param text: 主串<br>        :param tlen: 主串长度<br>        :return:<br>        &#39;&#39;&#39;<br>        # print(&#39;匹配中，主串：{},模式串：{}&#39;.format(text[cur_text],self.pattern[cur_pattern]))<br>        # print(cur_text,cur_pattern,&#39;-----&#39;,tlen,self.plen)<br>        if self.matched == True:#匹配已经完成，跳出函数<br>            return<br>        if cur_pattern == self.plen:#模式串匹配结束，注意这段代码需要放在匹配行为之前，因为此时的 cur_pattern 已经溢出了字符串<br>            if cur_text == tlen:#如果此时主串也匹配结束，匹配成功<br>                self.matched = True<br>            return<br><br>        if self.pattern[cur_pattern] == &#39;*&#39;:#匹配到 * ：把之后所有的主串位置都匹配一遍<br>            for i in range(tlen - cur_text):<br>                print(cur_text + i,cur_pattern + 1)<br>                self.rmatch(cur_text + i, cur_pattern + 1, text, tlen)<br><br>        elif self.pattern[cur_pattern] == &#39;?&#39;:#匹配到 ？：主串移动 一步 或 零步<br>            self.rmatch(cur_text + 1, cur_pattern+1, text, tlen)<br>            self.rmatch(cur_text, cur_pattern+1, text, tlen)<br><br>        elif self.pattern[cur_pattern] == text[cur_text] and cur_text &lt; tlen:#匹配到非通配符：向后移动<br>            self.rmatch(cur_text + 1, cur_pattern+1, text, tlen)<br><br>if __name__ == &#39;__main__&#39;:<br>    x = Pattern(&#39;???b?d&#39;)<br>    r1 = x.match(&#39;aaabcd&#39;)<br>    print(r1)<br>    r2 = x.match(&#39;abcd&#39;)<br>    print(r2)<br><br>","like_count":1},{"had_liked":false,"id":203700,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1586256009,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5881223305","product_id":100017301,"comment_content":"0-1背包问题，这里有一个非常有趣的点：物品数量和重量的、恰当的情况下，很容易找到刚好装满背包的情况。<br>import random<br><br>def bag(cur_index, already_weight, weight, goods, goods_len,res):<br>    &#39;&#39;&#39;<br><br>    放物品函数，在这个函数中，会更改 max_w 的值，<br>    :param cur_index:当前物品的序号<br>    :param already_weight: 放入当前物品以后的重量，注意，是放入当前物品以后！！！<br>    :param weight: 背包承重<br>    :param goods:所有物品的重量<br>    :param goods_len: 物品的数量<br>    :param res: 记录被放入背包的物品的重量<br>    :return:<br>    &#39;&#39;&#39;<br>    global max_w<br><br>    if already_weight == weight or cur_index == goods_len:#背包当前重量真好满足条件 或 已经取到了最后一个物品<br>        if already_weight &gt; max_w :<br>            max_w = already_weight<br>            print(&#39;背包内有{}，重量为{}&#39;.format(res,sum(res)))<br>        return<br><br>    bag(cur_index + 1,already_weight,weight,goods,goods_len,res)#不装当前物品，already_weight不增大<br><br>    if already_weight + goods[cur_index] &lt;= weight:#装当前物品，already_weight增加当前物品的重量<br>        x = res.copy()#记录背包里的物品<br>        x.append(goods[cur_index])<br>        bag(cur_index + 1,already_weight+goods[cur_index],weight,goods,goods_len,x)<br><br>if __name__ ==&#39;__main__&#39;:<br>    goods = [random.randint(0,50) for i in range(10)]<br>    print(&#39;所有物品的重量如下：&#39;,goods)<br>    max_w = max(goods)<br>    bag(0,0,145,goods,len(goods),[])<br>    print(&#39;背包最多可以装：&#39;,max_w)","like_count":1,"discussions":[{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227104,"discussion_content":"不好意思， already_weight 的注释是错误的，它实际上是未放入以 cur_index 为下标的物品前的背包的重量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586449260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203697,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1586255912,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5881223208","product_id":100017301,"comment_content":"所有代码都用Python实现了一遍，发出来给大家参考（由于字数限制，我会分多次发）：<br>n皇后问题，默认为 8 <br>def queens(row, n=8, res=None):<br>    &#39;&#39;&#39;<br>    进行 n 皇后的求解，之后的注释默认 n = 8<br>    :param row: 当前所在行<br>    :param n: 输入 n 可求解 n皇后 问题，如果不输入，默认为 8皇后<br>    :param res: 当前 n皇后的保存，如果不输入，默认构造 8皇后的数组<br>    :return: None<br>    &#39;&#39;&#39;<br><br>    if res == None:<br>        res = [None for i in range(n)]#如果没有参数，默认构造 res[n] 的数组<br><br>    if row == n:#求解完成<br>        print_queens(res, n=n)#输出棋盘<br>        return<br><br>    for column in range(n):#求解没有完成，进行求解，对每个 row 进行 8 次迭代尝试<br>        if isOK(row, column, res, n=n):#如果放置的棋子符合规则，继续进行尝试，如果不符合规则，回溯（在这里是什么也不做）<br>            res[row] = column<br>            queens(row + 1, n=n, res=res)<br><br><br>def print_queens(res, n=8):#输出棋盘<br>    for i in res:<br>        p = [1 if i == j else 0 for j in range(n)]<br>        print(p)<br>    print(&#39;---------------------------------------------------&#39;)<br><br><br>def isOK(row, column, res, n=8):#判断当前棋子是否符合规则<br>    l = column - 1#用于判断左上方有没有棋子<br>    r = column + 1#判断右上方<br>    i = row - 1#判断上方<br><br>    while i &gt;= 0:<br>        if res[i] == column:#上方有棋子<br>            return False<br>        if l &gt;= 0:<br>            if res[i] == l:#左上方有棋子<br>                return False<br>        if r &lt; n:<br>            if res[i] == r:#右上方有棋子<br>                return False<br><br>        l -= 1<br>        r += 1<br>        i -= 1<br><br>    return True<br><br><br>if __name__ == &quot;__main__&quot;:<br>    r = queens(0, n= 5)#默认进行 8皇后求解，你可以输入任意一个数 n<br>","like_count":1},{"had_liked":false,"id":188727,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1584408895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879376191","product_id":100017301,"comment_content":"反正我是看不懂了，借助调试，勉强能找出规律，太难了：<br>数组a = {9,5,2},  调用 f(0,0,a,3,16)<br>    public int maxW = Integer.MIN_VALUE;<br><br>    public void f(int i, int cw, int[] items, int n, int w) {<br>        if (cw == w || i == n) {<br>            if (cw &gt; maxW) {<br>                maxW = cw;<br>            }<br>            System.out.println(&quot;maxW:&quot;+i);<br>            return;<br>        }<br>        System.out.println(&quot;out:&quot;+i);<br>        f(i + 1, cw, items, n, w);<br>        if (cw + items[i] &lt;= w) {<br>            System.out.println(&quot;inner:&quot;+i);<br>            f(i + 1, cw + items[i], items, n, w);<br>        }<br>    }<br><br>执行后打印：<br>out:0<br>out:1<br>out:2<br>maxW:3      000<br>inner:2<br>maxW:3      001<br>inner:1<br>out:2<br>maxW:3      010<br>inner:2<br>maxW:3      011<br>inner:0<br>out:1<br>out:2<br>maxW:3      100<br>inner:2<br>maxW:3      101   <br>inner:1<br>out:2<br>maxW:3      110<br>inner:2<br>maxW:3      111<br>16","like_count":1},{"had_liked":false,"id":186573,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1583886566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878853862","product_id":100017301,"comment_content":"回溯算法通用的模版如下：<br>void backtrack(int k) {<br>    if (到达边界) {<br>        更新或者输出结果;<br>    } else {<br>        for(循环对于每一种可能进行操作 i) {<br>            if (限定条件合法)<br>                backtrack(k + i);<br>        }<br>    }<br>}<br><br>对 N 皇后问题，按自己的理解重新实现了一下：<br>int n;<br>int[] col;<br>public void queen(int row) {<br>    if (row == n) {<br>        total++;<br>        print();<br>        return;<br>    }<br><br>    for (int column = 0; column &lt; n; column++) {<br>        if (check(row, column)) { &#47;&#47; 判断 (row, column) 能不能放皇后<br>            this.col[row] = column;<br>            queen(row + 1);<br>        }<br>    }<br>}<br><br>&#47;&#47; (row, column) 需要和前 row-1 行的皇后比较，判断能否放皇后<br>private boolean check(int row, int column) {<br>    for (int i = 0; i &lt; row; i++) {<br>        if (col[i] == column || Math.abs(row - i) == Math.abs(column - col[i]))<br>            return false;<br>    }<br>    return true;<br>}","like_count":1},{"had_liked":false,"id":170639,"user_name":"咕小咚","can_delete":false,"product_type":"c1","uid":1267621,"ip_address":"","ucode":"1B6AF9766AB081","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/a5/4d8f6e7d.jpg","comment_is_top":false,"comment_ctime":1578648255,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873615551","product_id":100017301,"comment_content":"0-1背包的11行，13行相当于两个岔路口，先选择了不装，当顺着这条岔路口往下走，又重新回溯回来后又选择了装，两个选择都试一遍","like_count":1,"discussions":[{"author":{"id":1994743,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/F9CTB6Fkv6pyaP3iaYkSDCibWibb235jr9SiaG3H5aRpOZeYLPmldibCEudDoWntcUcV4rkV48pmQh0TVXiaILnZicz5A/132","nickname":"Geek_3e1f60","note":"","ucode":"268F857199E977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263924,"discussion_content":"恩 其实是二个选择都走了 只不过不满足被剪枝丢弃了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589266523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156938,"user_name":"水手","can_delete":false,"product_type":"c1","uid":1336430,"ip_address":"","ucode":"536BB54E1E3617","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","comment_is_top":false,"comment_ctime":1574998464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869965760","product_id":100017301,"comment_content":"之前看递归那篇文章，老师说只要遇到递归问题，都可以先写出递归公式，找出终止条件，文章中举的例子自己试着写递归公式，不得要领，还请老师解惑！🙏","like_count":1},{"had_liked":false,"id":148060,"user_name":"慌张而黑糖","can_delete":false,"product_type":"c1","uid":1638878,"ip_address":"","ucode":"B4416885A301C8","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/de/bf524817.jpg","comment_is_top":false,"comment_ctime":1572934493,"is_pvip":false,"replies":[{"id":"57644","content":"ipad paper","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573425349,"ip_address":"","comment_id":148060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867901789","product_id":100017301,"comment_content":"想问一下老师的图是用什么软件画的","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473383,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573425349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142708,"user_name":"行走的","can_delete":false,"product_type":"c1","uid":1108788,"ip_address":"","ucode":"04772A8A1FF2B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/34/cd310e69.jpg","comment_is_top":false,"comment_ctime":1571469486,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5866436782","product_id":100017301,"comment_content":"正则表达式的回溯算法好难看懂，看了很多遍了，代码也写过了，但就是不理解，有哪位大牛能详细解释过程吗？","like_count":1,"discussions":[{"author":{"id":2080414,"avatar":"","nickname":"大数据都来学算法了","note":"","ucode":"21A350D0FE9B18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293568,"discussion_content":"如果啥都匹配，岂不是不进行下一步了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595583119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019138,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","nickname":"liu_liu","note":"","ucode":"24283806A07759","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41952,"discussion_content":"？表示匹配 0 或 1 个，则枚举这两种情况。\n\n// 匹配 0 个\nrmatch(ti, pj+1, text, tlen);\n\n// 匹配 1 个\nrmatch(ti+1, pj+1, text, tlen);\n\n\n* 表示匹配 >= 0 个，也是同样枚举所有情况。匹配 0 个，匹配 1 个，...，匹配最后 tlen - ti 个（所有剩余的字符） \n\nfor (int k = 0; k <= tlen-ti; ++k) { \n\trmatch(ti+k, pj+1, text, tlen); \n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572537902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1178812,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/bc/06d42ecc.jpg","nickname":"万万","note":"","ucode":"7ECB1DD9E9A3A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019138,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","nickname":"liu_liu","note":"","ucode":"24283806A07759","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264019,"discussion_content":"你说的我明白，不明白的是为啥pj+1，你比如说＊它可以匹配后面所有字符，为啥还➕一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589281064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41952,"ip_address":""},"score":264019,"extra":""}]}]},{"had_liked":false,"id":134327,"user_name":"Z12","can_delete":false,"product_type":"c1","uid":1118159,"ip_address":"","ucode":"59F5E62F67FFDC","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/cf/bfa0dc80.jpg","comment_is_top":false,"comment_ctime":1568806831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863774127","product_id":100017301,"comment_content":"看到八皇后最多的问题是怎么打印出所有的解了？说下我的理解，首先是深度优先搜索找到最优的一组解，这时候就会打印，然后递归会返回到棋盘的倒数第二行（其实找到解后返回和走错误我认为是一样），在找下一个位置，一个位置能够放置ok，那么在走到下一行，找可放置的位置，如果ok，就能输出第二种解了，直到第七行找完，就依次找第六行，直到最后一行都找不到了，即所有的解答已经找完。","like_count":1},{"had_liked":false,"id":131450,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1567756921,"is_pvip":false,"replies":[{"id":"50407","content":"所有解的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567986078,"ip_address":"","comment_id":131450,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5862724217","product_id":100017301,"comment_content":"这个算法求出的八皇后问题只有一个解吗？八皇后问题应该不止一个解吧","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466459,"discussion_content":"所有解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567986078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317653,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/15/613173dd.jpg","nickname":"真实","note":"","ucode":"7621E3C61DA6DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312405,"discussion_content":"不考虑棋盘对称性，有92种解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602678671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/62/128699b0.jpg","nickname":"flzy","note":"","ucode":"27E112F664DC10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8300,"discussion_content":"求所有的解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567908103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1118159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0f/cf/bfa0dc80.jpg","nickname":"Z12","note":"","ucode":"59F5E62F67FFDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238626,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/62/128699b0.jpg","nickname":"flzy","note":"","ucode":"27E112F664DC10","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15137,"discussion_content":"看到八皇后最多的问题是怎么打印出所有的解了？说下我的理解，首先是深度优先搜索找到最优的一组解，这时候就会打印，然后递归会返回到棋盘的倒数第二行（其实找到解后返回和走错误我认为是一样），在找下一个位置，一个位置能够放置ok，那么在走到下一行，找可放置的位置，如果ok，就能输出第二种解了，直到第七行找完，就依次找第六行，直到最后一行都找不到了，即所有的解答已经找完。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568807029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8300,"ip_address":""},"score":15137,"extra":""}]}]},{"had_liked":false,"id":122251,"user_name":"Geek_86533a","can_delete":false,"product_type":"c1","uid":1610333,"ip_address":"","ucode":"6961C429E8953A","user_header":"","comment_is_top":false,"comment_ctime":1565322983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860290279","product_id":100017301,"comment_content":"老师的回溯写的非常巧妙，利用一维数组，循环中下一次的落子掩盖了上一次错误的落子。有一些解法中为了突出回溯的感觉，使用二维数组存贮0和1来模拟棋盘每个位置的落子与否。此时要注意，如果当前位置落子后，子递归无法满足条件，需要将当前落子置0再继续循环。通过落子和收回的操作来突出回溯的感觉，也很有意思，但不如老师写的高效。","like_count":1},{"had_liked":false,"id":105098,"user_name":"wind","can_delete":false,"product_type":"c1","uid":1507189,"ip_address":"","ucode":"5EC77AEB18130E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/75/9c1b2ece.jpg","comment_is_top":false,"comment_ctime":1560915584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5855882880","product_id":100017301,"comment_content":"八皇后代码可以看成是第一行的循环*第二行的循环*..第八行的循环，就可以穷举出来了。0-1背包问题可以看成0-0-...-0到1-1-...-1的穷举，用了两次递归，注意退回上层时i是在减少的。递归确实要比循环难理解","like_count":1},{"had_liked":false,"id":78958,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1553309319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848276615","product_id":100017301,"comment_content":"感谢老师，对回溯算法清晰了很多。","like_count":1},{"had_liked":false,"id":62218,"user_name":"Air","can_delete":false,"product_type":"c1","uid":1240310,"ip_address":"","ucode":"C5EA72EFD16FA2","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/f6/bf4c9e2a.jpg","comment_is_top":false,"comment_ctime":1547986345,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5842953641","product_id":100017301,"comment_content":"0-1背包问题为什么不是这样的代码呢？不超过就装，超过了就不装？<br>if (items[i] + cw &lt;= w) {<br>        backpack(i + 1, cw + items[i], items, n, w)<br>} else {<br>backpack(i + 1, cw, items, n, w)<br>}","like_count":1,"discussions":[{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3828,"discussion_content":"因为当前物品“装”或“不装”，这两种情况都要跑一遍，才能找到所有情况下哪种装法是最重的，按照你那么写，那几乎每次都会走if , 不会走else了，你自己调试看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564847199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1498517,"avatar":"https://static001.geekbang.org/account/avatar/00/16/dd/95/84228f72.jpg","nickname":"Will","note":"","ucode":"E133C9955691AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3435,"discussion_content":"这就成了贪心算法吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564479329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542081,"avatar":"","nickname":"miaoch","note":"","ucode":"00CC7A3E21452D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264,"discussion_content":"第n个背包即使装了没超过最大值，也不一定要装，你这样就少了不装的一条路线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561370591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62136,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547953872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842921168","product_id":100017301,"comment_content":"「为了有规律地枚举所有可能的解，避免遗漏和重复，把问题求解的过程分为多个阶段。每个阶段，都会面对一个岔路口，先随意选择一条路走，当发现这条路走不通的时候（不符合期望的解），就回退到上一个岔路口，另一种走法继续走。」<br><br>反复理解下：递归是一种栈结构的形式，最后一个入栈的最先执行完，然后返回上一层栈桢继续执行（对照八皇后的代码实现）。<br>","like_count":1},{"had_liked":false,"id":58901,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547241712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842209008","product_id":100017301,"comment_content":"本文里8皇后的例子里回溯算法非常隐蔽，其实是在“result[row] = column;”这一步，每次之前的值都会被替换。个人认为这个链接里的代码更加显式地展现了回溯的过程：https:&#47;&#47;www.geeksforgeeks.org&#47;n-queen-problem-backtracking-3&#47;   ：<br><br>            if (isSafe(board, i, col)) <br>            { <br>                &#47;* Place this queen in board[i][col] *&#47;<br>                board[i][col] = 1; <br>  <br>                &#47;* recur to place rest of the queens *&#47;<br>                if (solveNQUtil(board, col + 1) == true) <br>                    return true; <br>  <br>                &#47;* If placing queen in board[i][col] <br>                   doesn&#39;t lead to a solution then <br>                   remove queen from board[i][col] *&#47;<br>                board[i][col] = 0; &#47;&#47; BACKTRACK <br>            } ","like_count":1},{"had_liked":false,"id":58900,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547240757,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5842208053","product_id":100017301,"comment_content":"8皇后代码cal8queens方法中一开始就检查if (row == 8) 是否应该把8改成9？不然之前刚刚做了7行，最后一行还没有检查呢？","like_count":1,"discussions":[{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1799,"discussion_content":"代码里的row是数据下标","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562916409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57754,"user_name":"张光年","can_delete":false,"product_type":"c1","uid":1100567,"ip_address":"","ucode":"27F738D66C1B98","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/17/1e8afa90.jpg","comment_is_top":false,"comment_ctime":1546900444,"is_pvip":false,"replies":[{"id":"21859","content":"代码貌似是打印出了所有解：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547709736,"ip_address":"","comment_id":57754,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5841867740","product_id":100017301,"comment_content":"王铮老师这里的回溯算法并没有讲完整。八皇后问题只是求出了一个满足条件的解，应该是找到所有满足条件的解才是一个完整的回溯算法。只是求出了一个解，并没有体现出“回溯”的意义。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435742,"discussion_content":"代码貌似是打印出了所有解：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547709736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/af/2624cc07.jpg","nickname":"looper","note":"","ucode":"899D50A315BCAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302686,"discussion_content":"只要是递归调用都会回溯的，况且他这个是在for循环里面满足条件就递归，那么就是8*8的格子都遍历完才结束，已经找到并打印了所有不同的解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599009283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57337,"user_name":"Mr_X.j.豪~","can_delete":false,"product_type":"c1","uid":1241379,"ip_address":"","ucode":"B473A1C83027F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/23/d8db9288.jpg","comment_is_top":false,"comment_ctime":1546754641,"is_pvip":false,"replies":[{"id":"20715","content":"你要对比着13行来看 11行表示不把第i个物品装进去 13行表示把第i个物品装进去","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546826036,"ip_address":"","comment_id":57337,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841721937","product_id":100017301,"comment_content":"0-1背包问题 代码逻辑没看懂，11行的代码为什么出现在那里啊？？ 老师能不能讲讲？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435530,"discussion_content":"你要对比着13行来看 11行表示不把第i个物品装进去 13行表示把第i个物品装进去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546826036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57203,"user_name":"流水花开","can_delete":false,"product_type":"c1","uid":1249170,"ip_address":"","ucode":"2A70181AC1E443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/92/35f70582.jpg","comment_is_top":false,"comment_ctime":1546681297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5841648593","product_id":100017301,"comment_content":"能看懂代码就不错了，还得加深理解，受益匪浅","like_count":1},{"had_liked":false,"id":54634,"user_name":"lttzzlll","can_delete":false,"product_type":"c1","uid":1105387,"ip_address":"","ucode":"FA160F7C02ABAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","comment_is_top":false,"comment_ctime":1545919780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840887076","product_id":100017301,"comment_content":"@铁丑-王立丰 <br>第11行是0，第13行是1。0,1背包，选或者不选。","like_count":1},{"had_liked":false,"id":53440,"user_name":"你有资格吗？","can_delete":false,"product_type":"c1","uid":1233534,"ip_address":"","ucode":"4758C5A190BABB","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/7e/bd8c372a.jpg","comment_is_top":false,"comment_ctime":1545644942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840612238","product_id":100017301,"comment_content":"打个卡，终于跟上更新进度了","like_count":1},{"had_liked":false,"id":53362,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1545632907,"is_pvip":false,"replies":[{"id":"19358","content":"一路到底 咋找出所有解的啊","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545648982,"ip_address":"","comment_id":53362,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5840600203","product_id":100017301,"comment_content":"这节看得有点糊涂。关于八皇后问题，文中给出的代码有用到回溯的思想吗？恕我愚钝，咋感觉就是一路执行到底了，没看到往回返的过程啊？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434113,"discussion_content":"一路到底 咋找出所有解的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545648982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1994743,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/F9CTB6Fkv6pyaP3iaYkSDCibWibb235jr9SiaG3H5aRpOZeYLPmldibCEudDoWntcUcV4rkV48pmQh0TVXiaILnZicz5A/132","nickname":"Geek_3e1f60","note":"","ucode":"268F857199E977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263917,"discussion_content":"我理解确实没有回溯的过程  \n老师这个代码利用了双层循环遍历了所有的可能\n只不过遍历的过程是一级一级的,每次遍历后检查一下当前情况是否满足要求,不满足的进行剪枝(就是return掉).\n就像是构建一棵树的过程一样,从根节点出发进行从左到右的层序遍历","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589265697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53224,"user_name":"林","can_delete":false,"product_type":"c1","uid":1248763,"ip_address":"","ucode":"160817A922EEFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/fb/167ab6b8.jpg","comment_is_top":false,"comment_ctime":1545617425,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5840584721","product_id":100017301,"comment_content":"正则表达式第20行，ti&lt;=tlen ： match = True。如果是等于那必须每次都匹配到最后吗？","like_count":1,"discussions":[{"author":{"id":1153148,"avatar":"https://static001.geekbang.org/account/avatar/00/11/98/7c/56649bc7.jpg","nickname":"肖斐","note":"","ucode":"5496CA9BF7EB08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387336,"discussion_content":"感觉不需要这个if，直接true然后返回就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628129078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359524,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665623366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665623366","product_id":100017301,"comment_content":"回溯遍历每个物体是否放入背包。每次放入后如果不超重就比较一下是否是最大值，如果是最大值就更新路径。","like_count":0},{"had_liked":false,"id":358073,"user_name":"Geek_009666","can_delete":false,"product_type":"c1","uid":2955648,"ip_address":"福建","ucode":"86DD98FE808E0A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQ8AP2ZQCmzKSwhhDvlWa2d37V1KQ5Qib89uNJkYhRddI2YENUhJpuGPwl4oht7KD52plkgLo8QdQ/132","comment_is_top":false,"comment_ctime":1663895407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663895407","product_id":100017301,"comment_content":"老师，通配符和01背包要有图就更好了，递归树。","like_count":0},{"had_liked":false,"id":352079,"user_name":"KI","can_delete":false,"product_type":"c1","uid":1990451,"ip_address":"","ucode":"7D7DBBD428C8CE","user_header":"https://static001.geekbang.org/account/avatar/00/1e/5f/33/fb3a13f9.jpg","comment_is_top":false,"comment_ctime":1658375232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658375232","product_id":100017301,"comment_content":"我发现了一个问题  背包算法，如果把数组值 的总和设置的比100小，那么函数执行的次数是2047 并不是2的10次方1024  这个地方不太清楚为什么","like_count":0},{"had_liked":false,"id":352067,"user_name":"KI","can_delete":false,"product_type":"c1","uid":1990451,"ip_address":"","ucode":"7D7DBBD428C8CE","user_header":"https://static001.geekbang.org/account/avatar/00/1e/5f/33/fb3a13f9.jpg","comment_is_top":false,"comment_ctime":1658372073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658372073","product_id":100017301,"comment_content":"背包问题我也看了很久看了底下很多的评论才看懂，首先此处和之前的八皇后不同，此处要查的是最大的值，maxW一直被替换到最大的值且再限定内，11行是不装 13是装就很清晰了","like_count":0},{"had_liked":false,"id":351043,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1802022,"ip_address":"","ucode":"5AC8CBCC0AD48B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7f/26/c5127e9a.jpg","comment_is_top":false,"comment_ctime":1657495439,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657495439","product_id":100017301,"comment_content":"回溯算法，非常适合用递归，因为每次问题的做法都是一样的；一条路递归一直走，回溯直到到有可以走的路，问题具有重复性，","like_count":0},{"had_liked":false,"id":349969,"user_name":"Alias","can_delete":false,"product_type":"c1","uid":1981220,"ip_address":"","ucode":"E62F6462B5CF35","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6UjL0SBicZgyKzsAnCf08l0MibyqxsCecSVXa3tKvSDeDG6XRe1ngziaChRiaRcA0kzOlIwfcnNZvwg/132","comment_is_top":false,"comment_ctime":1656474220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656474220","product_id":100017301,"comment_content":"S = &#39;b&#39;<br>p = &#39;a?b&#39; <br>这还能匹配正确吗。。","like_count":0},{"had_liked":false,"id":343555,"user_name":"Geek_554857","can_delete":false,"product_type":"c1","uid":2892923,"ip_address":"","ucode":"0AA2F8F387B836","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/yzDxbtf2qp9r392ykR1xMssBvXt0pUYHFEQzv8ez4LibbicvrWHPlVF09pPAUxIIPkWjiblUZa6t6ujTnDxC5icrAg/132","comment_is_top":false,"comment_ctime":1650903871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650903871","product_id":100017301,"comment_content":"背包问题这个解法太巧妙了，看不懂的同学大概和我一样没理解到作者的思路，可以画图帮助理解，大概思路就是从后往前改变maxW，第10个物品如何放入，第9个和第10个物品如何放入，依次到第1个到第10个物品如何放入，我也比较笨看了两三个小时才看明白，大体思路就是这样 ，有错希望大家不要介意","like_count":0},{"had_liked":false,"id":342633,"user_name":"夏小胖","can_delete":false,"product_type":"c1","uid":2526827,"ip_address":"","ucode":"D5CA341318AF7A","user_header":"https://static001.geekbang.org/account/avatar/00/26/8e/6b/d3d42f9b.jpg","comment_is_top":false,"comment_ctime":1650373960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650373960","product_id":100017301,"comment_content":"不想看正则怎么办","like_count":0},{"had_liked":false,"id":339931,"user_name":"believe me","can_delete":false,"product_type":"c1","uid":1101427,"ip_address":"","ucode":"7BF9A3C7BF6A9B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/73/cded8343.jpg","comment_is_top":false,"comment_ctime":1648467611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648467611","product_id":100017301,"comment_content":"我其实有个疑问，这个问题能不能对物品重量进行排序，然后使用二分查找，找到最接近背包承重的最大物品，然后从这个物品开始像重量减小的方向依次选择物品放入背包，直到重量超过背包的承重","like_count":0},{"had_liked":false,"id":339796,"user_name":"黑桃","can_delete":false,"product_type":"c1","uid":1125133,"ip_address":"","ucode":"16B4DD54806CB3","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/0d/f4e7245a.jpg","comment_is_top":false,"comment_ctime":1648389440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648389440","product_id":100017301,"comment_content":"最近这几章都有种感觉：语言已经说不清楚了，直接看代码吧<br>Talk is too complicated，so just see my code!","like_count":0},{"had_liked":false,"id":338273,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647401848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647401848","product_id":100017301,"comment_content":"本节学习了几种经典问题的解法， 把以前听别人说的高大上的操作 “回溯 ”“剪枝” 都用上了，并和 “贪心” 做了比较，后续继续做题再去深化这些思想。","like_count":0},{"had_liked":false,"id":336441,"user_name":"yansq","can_delete":false,"product_type":"c1","uid":1125639,"ip_address":"","ucode":"38280ED1BE66A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/07/acf6415e.jpg","comment_is_top":false,"comment_ctime":1646146717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646146717","product_id":100017301,"comment_content":"NQueue <br>1.开始需要对 result 数组初始化为 -1，不然默认的 0 值与 真正的 0 列就冲突了<br>2.第10行后面要加一行， result[row] = -1;","like_count":0},{"had_liked":false,"id":336027,"user_name":"LeonJump2sky","can_delete":false,"product_type":"c1","uid":1905194,"ip_address":"","ucode":"A183F115939395","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/2a/47517056.jpg","comment_is_top":false,"comment_ctime":1645853609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645853609","product_id":100017301,"comment_content":"好吧，是我搞错了，sorry博主","like_count":0},{"had_liked":false,"id":330951,"user_name":"Geek_c0013c","can_delete":false,"product_type":"c1","uid":2372558,"ip_address":"","ucode":"B1E6E3A9DE25B0","user_header":"","comment_is_top":false,"comment_ctime":1642322900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642322900","product_id":100017301,"comment_content":"现在我们对今天讲到的 0-1 背包问题稍加改造，如果每个物品不仅重量不同，价值也不同。如何在不超过背包重量的情况下，让背包中的总价值最大？<br>我的答案是：使用每kg的单价对数组进行升序排序，然后再套用老师的算法，递归到最深层，一定是从单价最高的开始选<br>","like_count":0},{"had_liked":false,"id":330950,"user_name":"Geek_c0013c","can_delete":false,"product_type":"c1","uid":2372558,"ip_address":"","ucode":"B1E6E3A9DE25B0","user_header":"","comment_is_top":false,"comment_ctime":1642322764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642322764","product_id":100017301,"comment_content":"现在我们对今天讲到的 0-1 背包问题稍加改造，如果每个物品不仅重量不同，价值也不同。如何在不超过背包重量的情况下，让背包中的总价值最大？ ","like_count":0},{"had_liked":false,"id":330949,"user_name":"Geek_c0013c","can_delete":false,"product_type":"c1","uid":2372558,"ip_address":"","ucode":"B1E6E3A9DE25B0","user_header":"","comment_is_top":false,"comment_ctime":1642322763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642322763","product_id":100017301,"comment_content":"现在我们对今天讲到的 0-1 背包问题稍加改造，如果每个物品不仅重量不同，价值也不同。如何在不超过背包重量的情况下，让背包中的总价值最大？ ","like_count":0},{"had_liked":false,"id":327356,"user_name":"Geek_63ad86","can_delete":false,"product_type":"c1","uid":1528671,"ip_address":"","ucode":"E758532B1169D6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S7icAGXsBzGKyricapL0sfax7wL7T4n1W1ZPZ0h7XNtGd5aqLlZQgZ3bZTPBmC4xa7ia8iaR0XBKMAuIQ/132","comment_is_top":false,"comment_ctime":1640079587,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640079587","product_id":100017301,"comment_content":"背包问题<br>代码分为放or不放<br>进入每个分支后，又分为放or不放<br>","like_count":0},{"had_liked":false,"id":326316,"user_name":"R","can_delete":false,"product_type":"c1","uid":1248638,"ip_address":"","ucode":"165F104B71EAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/7e/2f709bdf.jpg","comment_is_top":false,"comment_ctime":1639468103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639468103","product_id":100017301,"comment_content":"请问老师，我写的递推一直递归打印，而不是只打印一次，这种怎么解决呢？<br>    void cal8queens(int row) {<br>        if (row == 8) {<br>            printqueens(result);<br>            return;<br>        }<br>        for (int column = 0; column &lt; 8; ++column) {<br>            if (isok(row,column)) {<br>                result[row] = column;<br>                cal8queens(row + 1);<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":325632,"user_name":"okda","can_delete":false,"product_type":"c1","uid":1266931,"ip_address":"","ucode":"A38D34B0E29CE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/54/f3/2495dade.jpg","comment_is_top":false,"comment_ctime":1639052531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639052531","product_id":100017301,"comment_content":"11行和13行代码可以互换吧？","like_count":0},{"had_liked":false,"id":324763,"user_name":"凌霄","can_delete":false,"product_type":"c1","uid":1107786,"ip_address":"","ucode":"19C4BFB0298276","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/4a/4dfb565a.jpg","comment_is_top":false,"comment_ctime":1638606355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638606355","product_id":100017301,"comment_content":"回溯算法感觉就是一种暴力求解算法","like_count":0},{"had_liked":false,"id":323049,"user_name":"Geek_8183d5","can_delete":false,"product_type":"c1","uid":2340235,"ip_address":"","ucode":"D06E69FC7737A2","user_header":"https://static001.geekbang.org/account/avatar/00/23/b5/8b/92549066.jpg","comment_is_top":false,"comment_ctime":1637715988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637715988","product_id":100017301,"comment_content":"01背包问题中，从第11行开始，判断第i个物品装与不装的两种情况。<br><br>第11行：f(i+1, cw, items, n, w); &#47;&#47;选择不装第i个物品<br>第12行：if (cw + items[i] &lt;= w) &#47;&#47;判断：如果第i个物品能放进去，就选择装第i个物品<br>第13行：f(i+1,cw + items[i], items, n, w);&#47;&#47;选择把第i个物品装进去","like_count":0},{"had_liked":false,"id":321793,"user_name":"等一个秋天","can_delete":false,"product_type":"c1","uid":2775175,"ip_address":"","ucode":"9B4CEA7BD27471","user_header":"https://static001.geekbang.org/account/avatar/00/2a/58/87/6b3f57c2.jpg","comment_is_top":false,"comment_ctime":1637048662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637048662","product_id":100017301,"comment_content":"我最近做算法题感觉慢慢有了思路，但是还是难以单独做出来，还得继续练","like_count":0},{"had_liked":false,"id":319385,"user_name":"Geek_94045a","can_delete":false,"product_type":"c1","uid":2760780,"ip_address":"","ucode":"B8F23BA9D1411B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","comment_is_top":false,"comment_ctime":1635767833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635767833","product_id":100017301,"comment_content":"作者这段代码写的，我真是服气，短短几行，包含了好大的信息量，秀我一脸。。。T..T","like_count":0},{"had_liked":false,"id":319384,"user_name":"Geek_94045a","can_delete":false,"product_type":"c1","uid":2760780,"ip_address":"","ucode":"B8F23BA9D1411B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","comment_is_top":false,"comment_ctime":1635767736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635767736","product_id":100017301,"comment_content":"我擦 我好像发现门道了，其实超级简单，就是用每一个元素和其他元素去搭配，每成功搭配一次（成功指的是所选物品都能放进去）记录一个最高记录，通过暴力穷举来不断试图尝试刷新最高记录，只不过通过一个小技巧，使得搭配过的两个值，不用再互换着顺序搭配一次，因为这些东西在背包里的存放顺序是不用考虑的，避免了没必要的穷举次数，提高了穷举效率。<br>（这里我有点感悟：暴力穷举法感觉是找不到能用的算法之后的没办法的办法，但是这个没办法的办法，其实就是最终的办法，也自然就形成了一个算法，哈哈确实挺有意思）","like_count":0},{"had_liked":false,"id":317635,"user_name":"书旅","can_delete":false,"product_type":"c1","uid":1497097,"ip_address":"","ucode":"B7E3FD4EF199D4","user_header":"https://static001.geekbang.org/account/avatar/00/16/d8/09/908cb229.jpg","comment_is_top":false,"comment_ctime":1634873204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634873204","product_id":100017301,"comment_content":"都搞明白了，开心，继续下一个！","like_count":0},{"had_liked":false,"id":310136,"user_name":"hYector","can_delete":false,"product_type":"c1","uid":2173880,"ip_address":"","ucode":"C1DEEB8FAC0B2E","user_header":"https://static001.geekbang.org/account/avatar/00/21/2b/b8/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1630495643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630495643","product_id":100017301,"comment_content":"仔细对比了一下分治解法，发现像八皇后，汉诺塔等经典的分治问题，都可以通过回溯的方法解决。但是适合分治解决的问题，用分治比回溯要好得多（至少理解上）。这是不是就是老师说的，回溯往往用来解决“广义”的搜索问题？后面在遇到能用回溯解决的问题的时候，可以再细想一下有没有分治的方案？","like_count":0},{"had_liked":false,"id":309860,"user_name":"大祭司","can_delete":false,"product_type":"c1","uid":1831099,"ip_address":"","ucode":"06479A180B8DED","user_header":"https://static001.geekbang.org/account/avatar/00/1b/f0/bb/f7025f42.jpg","comment_is_top":false,"comment_ctime":1630376162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630376162","product_id":100017301,"comment_content":"0-1背包：<br>思路是每个物品有两种可能，装入或者不装入，列举出所有情况<br>根据质量限制，求最大值<br>例如：有ABCD四个物品，（0：不装入，1：装入）所有情况如下<br>A B C D<br>0 0 0 0<br>0 0 0 1<br>0 0 1 0<br>0 0 1 1<br>...<br>1 1 1 1","like_count":0},{"had_liked":false,"id":302991,"user_name":"小Y","can_delete":false,"product_type":"c1","uid":1739621,"ip_address":"","ucode":"24A43BB71805F8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8b/65/0f1f9a10.jpg","comment_is_top":false,"comment_ctime":1626501994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626501994","product_id":100017301,"comment_content":"我看了2遍，有些看不太懂🐷","like_count":0},{"had_liked":false,"id":298098,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1623912174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623912174","product_id":100017301,"comment_content":"    public void f2(int i,int cw,int cp,int[] item,int[] prices,int n,int w){<br>        &#47;&#47;终止条件<br>        if(i == n){<br>            if(cp &gt; maxW) maxW = cp;<br>            return;<br>        }<br>        &#47;&#47;装和不装<br>        f2(i+1,cw,cp,item,prices,n,w);<br>        if(cw+item[i] &lt;= w){<br>            f2(i+1,cw+item[i],cp+prices[i],prices,item,n,w);<br>        }<br>    }","like_count":0},{"had_liked":false,"id":298067,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623899638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623899638","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":293279,"user_name":"青阳","can_delete":false,"product_type":"c1","uid":2139807,"ip_address":"","ucode":"3591D366BAB0B9","user_header":"https://static001.geekbang.org/account/avatar/00/20/a6/9f/3c60fffd.jpg","comment_is_top":false,"comment_ctime":1621321318,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621321318","product_id":100017301,"comment_content":"判断是否在对角线上是否可以用Math.abs(result[i]-column)==row-i,即两行之间的距离等于两列之间的距离","like_count":0},{"had_liked":false,"id":293136,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1621237845,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621237845","product_id":100017301,"comment_content":"回溯法解决N皇后问题的时间复杂度要怎么计算哈？","like_count":0},{"had_liked":false,"id":289555,"user_name":"℡ __ 柚稚","can_delete":false,"product_type":"c1","uid":1740282,"ip_address":"","ucode":"07A8CBFC563C5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8d/fa/93e48f3b.jpg","comment_is_top":false,"comment_ctime":1619080203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619080203","product_id":100017301,"comment_content":"争哥真是太厉害啦，逻辑写的特别清晰，膜拜，膜拜","like_count":0},{"had_liked":false,"id":289176,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1618903427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618903427","product_id":100017301,"comment_content":"人工神经网络用的也是回溯思想吧","like_count":0},{"had_liked":false,"id":288955,"user_name":"敲键盘的人","can_delete":false,"product_type":"c1","uid":1232210,"ip_address":"","ucode":"59AFFFE9DA5B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/52/a2478536.jpg","comment_is_top":false,"comment_ctime":1618798216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618798216","product_id":100017301,"comment_content":"感觉思路说起来都挺简单，也很容易明白，就是代码实现起来发现不是一回事了...","like_count":0},{"had_liked":false,"id":288419,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1618463915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618463915","product_id":100017301,"comment_content":"能懂原理，问题是：只是对递归里又递归的运行顺序不懂......","like_count":0},{"had_liked":false,"id":281069,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614572016,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614572016","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>还是使用回溯，然后使用“背包重量”作为条件减枝。","like_count":0},{"had_liked":false,"id":278718,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1613225050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613225050","product_id":100017301,"comment_content":"老师的代码一下子还真是不大好理解。看了评论才有一点点思路。8皇后问题从第一行开始到第八行，依次选择列。每次从第一列开始，判断是否满足8皇后规则（左上、上、右上是否存在于result中，若都不存在，则满足）。0-1背包问题，把每种情况都遍历到，物品只有选和不选两种选择，通过剪枝，选择最终最大的结果。","like_count":0},{"had_liked":false,"id":277930,"user_name":"Geek_b45091","can_delete":false,"product_type":"c1","uid":1681522,"ip_address":"","ucode":"9B13EB8573AE76","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/72/ae1c0924.jpg","comment_is_top":false,"comment_ctime":1612673976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612673976","product_id":100017301,"comment_content":"01背包那个代码第一次看很难理解，我稍加改善容易理解多了    <br><br>&#47;&#47; 循环过程：1表示放，0表示不放，4个物品，列出所有满足条件的情况，选最优的<br>    &#47;&#47; 0000<br>    &#47;&#47; 0001<br>    &#47;&#47; 0010<br>    &#47;&#47; 0011<br>    &#47;&#47; 0100<br>    &#47;&#47; 0101<br>    &#47;&#47; ...<br>    public void f(int i, int cw, int[] items, int n, int w) {<br>        if (i == n) { &#47;&#47; i==n表示已经考察完所有的物品<br>            if (cw &gt; maxW &amp;&amp; cw &lt;= w) &#47;&#47; 不能超过背包重量<br>                maxW = cw;<br>            return;<br>        }<br>        f(i + 1, cw, items, n, w); &#47;&#47; &#47;&#47;当前物品不装进背包<br>        f(i + 1, cw + items[i], items, n, w); &#47;&#47; 当前物品装进背包<br>    }","like_count":0},{"had_liked":false,"id":277704,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1612520094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612520094","product_id":100017301,"comment_content":"8皇后问题：我本来看着不懂，看着看着就烦了，但是静下心来，按照争哥的代码认真一个注释一个注释代码敲了并且理解了一遍，一下子明白了，各司其职，不要人肉递归就像超过说的那样。真是巧妙，赞赞赞","like_count":0},{"had_liked":false,"id":277686,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1612515763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612515763","product_id":100017301,"comment_content":"回溯算法：就是不满足往后退一步再进行，只要不满足就往后退，直到全部满足。理解是能理解，但设计到算法做题实战就不会写代码了。","like_count":0},{"had_liked":false,"id":274607,"user_name":"石小","can_delete":false,"product_type":"c1","uid":1781893,"ip_address":"","ucode":"4258C686F289A6","user_header":"https://static001.geekbang.org/account/avatar/00/1b/30/85/14c2f16c.jpg","comment_is_top":false,"comment_ctime":1611101682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611101682","product_id":100017301,"comment_content":"八皇后中先判断符不符合条件，再记录保证记录的都是有效的。01背包就是一颗二叉搜索数，先序遍历，书中的每个叶节点对应一种情况，没有额外存储，数据在递归调用的栈上。","like_count":0},{"had_liked":false,"id":273235,"user_name":"monchickey","can_delete":false,"product_type":"c1","uid":1513948,"ip_address":"","ucode":"D7B670444F62B3","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","comment_is_top":false,"comment_ctime":1610505259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610505259","product_id":100017301,"comment_content":"老师，八皇后问题里面的if (leftup &gt;= 0)和if(rightup &lt; 8)不用加也可以吧，因为具体result[i]的值不可能越界，因此内部判断结果就是false了包括了外面的判断","like_count":0},{"had_liked":false,"id":270335,"user_name":"stoner","can_delete":false,"product_type":"c1","uid":1081025,"ip_address":"","ucode":"97A86CB63026D1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIia7OIfGzBYsojrBAKluoNUeI1ZicEAx1AHDKCQTzyrnGlmavLXdicCHSfSibFIqc08tTOrj9hcKG66A/0","comment_is_top":false,"comment_ctime":1609073861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609073861","product_id":100017301,"comment_content":"老师这个八皇后的问题的解法，是一种特殊结果。利用数组，没有产生分支污染。所以没有回撤的操作。","like_count":0},{"had_liked":false,"id":268675,"user_name":"Herbert","can_delete":false,"product_type":"c1","uid":2358822,"ip_address":"","ucode":"BB16C81CD0282C","user_header":"https://static001.geekbang.org/account/avatar/00/23/fe/26/feda16aa.jpg","comment_is_top":false,"comment_ctime":1608290339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608290339","product_id":100017301,"comment_content":"回溯算法感觉难度最高","like_count":0},{"had_liked":false,"id":267979,"user_name":"ym","can_delete":false,"product_type":"c1","uid":1986914,"ip_address":"","ucode":"4C2DBB83731ACA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/51/62/770c1f72.jpg","comment_is_top":false,"comment_ctime":1608017300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608017300","product_id":100017301,"comment_content":"01背包问题可以看作组合问题，也就是树的遍历，注意递归结束条件就行","like_count":0},{"had_liked":false,"id":265623,"user_name":"云之崖","can_delete":false,"product_type":"c1","uid":1003366,"ip_address":"","ucode":"724C0614F40EC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/66/1f8fccfb.jpg","comment_is_top":false,"comment_ctime":1606963749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606963749","product_id":100017301,"comment_content":"又回过头来重新温习了一遍，手撸了一遍 0-1 背包代码，回溯算法实现，现在基本上不用看就能直接敲出来了。<br><br>&#47;**<br> * 0-1背包问题<br> *&#47;<br>class Knapsack {<br><br>    private lateinit var itemWeightArr: Array&lt;Int&gt;<br>    private lateinit var itemValueArr: Array&lt;Int&gt;<br>    private var totalWeight: Int = 0;<br><br>    &#47;&#47;记录选中了哪几个物品<br>    private lateinit var result: Array&lt;Int&gt;<br>    private var maxValue = 0<br>    private var maxSelectedIndexStr = &quot;&quot;<br><br>    &#47;**<br>     * 计算背包问题<br>     *<br>     * @param itemWeightArr 物品的重量<br>     * @param itemValueArr 每个物品的价值<br>     * @param totalWeight 背包能够容纳的总重量<br>     *&#47;<br>    fun calc(itemWeightArr: Array&lt;Int&gt;, itemValueArr: Array&lt;Int&gt;, totalWeight: Int) {<br>        this.itemWeightArr = itemWeightArr<br>        this.itemValueArr = itemValueArr<br>        this.totalWeight = totalWeight<br>        this.maxValue = 0<br>        result = Array(itemWeightArr.size) { -1 }<br>        calcRecursive(0, 0, 0, &quot;&quot;)<br>    }<br><br>    &#47;**<br>     * 递归计算<br>     *<br>     * @param index 表示开始放第几个物品<br>     * @param currWeight 表示当前背包的物品总量<br>     * @param currValue 表示当前背包的物品总价值<br>     *&#47;<br>    private fun calcRecursive(index: Int, currWeight: Int, currValue: Int, currSelectedStr: String) {<br>        if (index &gt;= itemWeightArr.size || currWeight == this.totalWeight) {<br>            if (currValue &gt; this.maxValue) {<br>                this.maxValue = currValue<br>                this.maxSelectedIndexStr = currSelectedStr<br>            }<br>            return<br>        }<br><br>        &#47;&#47;当前物品不放<br>        result[index] = 0<br>        calcRecursive(index + 1, currWeight, currValue, currSelectedStr)<br>        &#47;&#47;当前物品放进去<br>        if (itemWeightArr[index] + currWeight &lt;= this.totalWeight) {<br>            result[index] = 1<br>            calcRecursive(index + 1, itemWeightArr[index] + currWeight,<br>                itemValueArr[index] + currValue, &quot;${currSelectedStr}${if (currSelectedStr.isEmpty()) &quot;&quot; else &quot;,&quot;}${index}&quot;)<br>        }<br>    }<br><br>    fun getMaxValue(): Int {<br>        println(this.maxSelectedIndexStr)<br>        return this.maxValue<br>    }<br>}","like_count":0},{"had_liked":false,"id":263558,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1606183796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606183796","product_id":100017301,"comment_content":"0-1背包问题：--因装与不装属于或关系，都需要遍历到。用递归树画出来，很容易理解，就知道不能用if else分支代码写法了。","like_count":0},{"had_liked":false,"id":263398,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1606124561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606124561","product_id":100017301,"comment_content":"for (int k = 0; k &lt;= tlen-ti; ++k) { rmatch(ti+k, pj+1, text, tlen); }---这里，此处为啥要pat+1？不应该维持pat吗？但是维持pat，假如是abc*23, 去搜索abcefg23这种，怎么去匹配23，因为abc*就已经完成了整个字符串匹配","like_count":0},{"had_liked":false,"id":263389,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1606122782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606122782","product_id":100017301,"comment_content":"正则：if (pj == plen) { &#47;&#47; 正则表达式到结尾了 if (ti == tlen) matched = true; &#47;&#47; 文本串也到结尾了 return; } ---- (pj == plen)  这里应该是 (pj == (plen-1)) 吧？","like_count":0},{"had_liked":false,"id":263376,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1606119750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606119750","product_id":100017301,"comment_content":"一点搜索剪枝的技巧，就是当发现已经选择的物品的重量超过 Wkg 之后，我们就停止继续探测剩下的物品。---这里没有bug吗？比如背包重量余量6，面临的物品是7,4,2。7装不进去，但是4+2可以装进去。故需要对物品依据重量进行排序。","like_count":0},{"had_liked":false,"id":258832,"user_name":"Z7k","can_delete":false,"product_type":"c1","uid":1238680,"ip_address":"","ucode":"39373D7A6E6EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/98/5853eb73.jpg","comment_is_top":false,"comment_ctime":1604564857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604564857","product_id":100017301,"comment_content":"在之前记录重量的答案基础上，同时记录比较总价值即可。","like_count":0},{"had_liked":false,"id":256898,"user_name":"戴宇","can_delete":false,"product_type":"c1","uid":1185158,"ip_address":"","ucode":"66A56B2D742903","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/86/cd97bf7e.jpg","comment_is_top":false,"comment_ctime":1603779207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603779207","product_id":100017301,"comment_content":"说一个自己的观点，回溯问题经查伴随着状态重置，而8皇后里面即使当前路走不通，会回溯到上一层，而从下往下计算的时候，已经填写好的result[row]旧的值会被新的值覆盖，所以就不会有这个问题。如果是刚接触回溯算法，还是注意一下状态重置比较好","like_count":0},{"had_liked":false,"id":254668,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1603164754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603164754","product_id":100017301,"comment_content":"回溯法和穷举有什么区别呢？","like_count":0},{"had_liked":false,"id":254051,"user_name":"Geek_b617bf","can_delete":false,"product_type":"c1","uid":1220552,"ip_address":"","ucode":"9BAFC3B184B1D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/c8/0318c83e.jpg","comment_is_top":false,"comment_ctime":1603030900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603030900","product_id":100017301,"comment_content":"我一般是用一个list或者数组来记录遍历的临时值  <br>list.add(e)<br>backTrack(list);&#47;&#47;递归调用<br>list.removelast();&#47;&#47;撤销选择","like_count":0},{"had_liked":false,"id":252626,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1602408173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602408173","product_id":100017301,"comment_content":"01背包第一个可能装进背包的就是最后一个物品，当第i选择装进背包以后，对i后面的物品再选择是否装进背包","like_count":0},{"had_liked":false,"id":252446,"user_name":"dreamzz","can_delete":false,"product_type":"c1","uid":2150488,"ip_address":"","ucode":"DD9126F479F614","user_header":"https://static001.geekbang.org/account/avatar/00/20/d0/58/be9e8f67.jpg","comment_is_top":false,"comment_ctime":1602302163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602302163","product_id":100017301,"comment_content":"背包问题如何把最大重量的组合输出, 我们更希望找到这样的组合而不仅仅是找出最大重量吧?","like_count":0},{"had_liked":false,"id":243934,"user_name":"Geek_宋","can_delete":false,"product_type":"c1","uid":1735002,"ip_address":"","ucode":"B050CEE1BE9221","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/loOqiajRMDoBmMs8bLeIjfhwYN0DNf3ic7x92hw6mW5GWG3mVkw7ub52cqjvkVqt4Fq3fU0A2C7WcsS3icIlOd1fg/132","comment_is_top":false,"comment_ctime":1598331511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598331511","product_id":100017301,"comment_content":"八皇后问题的代码是否有问题？   <br> if (isOk(row, column)) { <br>&#47;&#47; 有些放法不满足要求      <br>result[row] = column; <br>&#47;&#47; 第row行的棋子放到了column列      <br>cal8queens(row+1); &#47;&#47; 考察下一行    <br>}<br><br>考察完下一行以后，是否需要将coloum列复位？result[row] = 0;<br>","like_count":0},{"had_liked":false,"id":240976,"user_name":"曾益达","can_delete":false,"product_type":"c1","uid":2113150,"ip_address":"","ucode":"AC20D6F5EF01C4","user_header":"https://static001.geekbang.org/account/avatar/00/20/3e/7e/3dac54fa.jpg","comment_is_top":false,"comment_ctime":1597136475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597136475","product_id":100017301,"comment_content":"       八皇后问题，数组使用result[8]太妙了，切忌不要使用二维数组result[8][8]，这样反而会增大难度，因为使用result[8]的话，每行路径在找到正确位置都是更新的最新值；如果使用二维数组的话，还要考虑当皇后回溯的时候，怎么去掉放置的位置。另外还需要注意两个问题：<br><br>1) 这个题目在判断皇后位置是否合适的时候，只需要判断当前行上方的位置是否有皇后，不需要判断下面的；<br>2) 一定要注意，数组result最后的值可能不是八皇后，可能是某个中间值，所以，不要在最后来打印八皇后，应该在8个皇后都放置好了就可以打印了。","like_count":0},{"had_liked":false,"id":240538,"user_name":"Henry Liao","can_delete":false,"product_type":"c1","uid":1635174,"ip_address":"","ucode":"EA8407D15E2CC6","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/66/5d7ba082.jpg","comment_is_top":false,"comment_ctime":1596963353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596963353","product_id":100017301,"comment_content":"感觉就是概念一笔带过，代码我也没看懂","like_count":0},{"had_liked":false,"id":236981,"user_name":"世龙","can_delete":false,"product_type":"c1","uid":1240509,"ip_address":"","ucode":"233A97EC15C228","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/bd/c72c3844.jpg","comment_is_top":false,"comment_ctime":1595639867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595639867","product_id":100017301,"comment_content":"正在表达式<br>else if (ti &lt; tlen &amp;&amp; pattern[pj] == text[ti]) { &#47;&#47; 纯字符匹配才行      rmatch(ti+1, pj+1, text, tlen);    }<br>中的   ti &lt; tlen    是不是可以放到方法的开始位置  改成 tl&gt;=tlen  return","like_count":0},{"had_liked":false,"id":234552,"user_name":"张sir","can_delete":false,"product_type":"c1","uid":1209431,"ip_address":"","ucode":"52958DF6705208","user_header":"https://static001.geekbang.org/account/avatar/00/12/74/57/7b828263.jpg","comment_is_top":false,"comment_ctime":1594718722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594718722","product_id":100017301,"comment_content":"不明白八皇后的游戏规则，但从现在现象来，都冲突了，所有点不可能没有重叠的地方","like_count":0},{"had_liked":false,"id":233007,"user_name":"Mike Zheng","can_delete":false,"product_type":"c1","uid":2039829,"ip_address":"","ucode":"D7F062DDE2A93A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ccdlzibsv0umJB4QeX0K6JBAas41F3Xobib8rudwic6vNgNYVa4WUdhU9vMKfKRuU3P0u3V0flrn2tlOrDdlCBFmQ/132","comment_is_top":false,"comment_ctime":1594190587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594190587","product_id":100017301,"comment_content":"看到很多留言说回溯相当于「枚举」，我在自己实现的时候将判断条件写错顺序了，发现枚举的话时间复杂度是 n^n。因为实际上遇到不符合条件的时候后面的可能性都不会执行了，不是严格意义上的枚举。","like_count":0},{"had_liked":false,"id":223809,"user_name":"叶紫真","can_delete":false,"product_type":"c1","uid":1547763,"ip_address":"","ucode":"9CD7567FDB7F1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/f3/3f6dd32b.jpg","comment_is_top":false,"comment_ctime":1591185283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591185283","product_id":100017301,"comment_content":"关于老师说的,程序员看代码会更加容易理解,我想问的是你真的这么觉得吗?是不是你为了偷懒不想多说而已?估计是后者","like_count":0},{"had_liked":false,"id":223750,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1591173256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591173256","product_id":100017301,"comment_content":"剪枝操作 ti &lt; tlen 对于模式串没有匹配完但是字符串已经匹配完的部分进行剪枝","like_count":0},{"had_liked":false,"id":223747,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1591172289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591172289","product_id":100017301,"comment_content":"回溯感觉像是在递归树上的dfs，查找到底，然后回退到某个点，继续<br>像第二题正则匹配，就可以根据* || ?来开不同的分支，多叉树??<br>","like_count":0},{"had_liked":false,"id":219411,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590023984,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590023984","product_id":100017301,"comment_content":"人生没法回溯，所以只能贪心，活在当下，谁也得不到最优解。<br><br>课后题里面提到了考虑重量和价值的背包问题，我觉的应该是在为下一课的动态规划做准备了吧。<br><br>在网上搜索的时候，看到了崔添翼大神的《背包问题九讲》，因为主要是从动态规划角度讲的，所以还没有看。但是想要八卦一下，这位崔神 2016 年之后就神龙不见尾了，有谁知道其下落么？<br><br>学习了留言里面 @叶明 和 @feifei 的代码。<br><br>感觉回溯法就是穷举法，所以算法的效率不高，特别是如果没有合适的剪枝条件。<br><br>另外，如果能够找到合适的框架结构（不能有遗漏），那么添加一些其他的限制条件或者是判断代码，是相对容易的。","like_count":0},{"had_liked":false,"id":218190,"user_name":"mqray","can_delete":false,"product_type":"c1","uid":1336634,"ip_address":"","ucode":"15664507AD7033","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","comment_is_top":false,"comment_ctime":1589732508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589732508","product_id":100017301,"comment_content":"看了下github上的代码，自己思考了一会，写了代码和注释<br>&#39;&#39;&#39;<br>八皇后问题：设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。<br>这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。<br>&#39;&#39;&#39;<br><br>BOARD_SIZE = 4<br>solution_count = 0<br>record_list = [0]*BOARD_SIZE<br>def eight_quenes(cur_column):#n指定了棋盘大小和皇后个数<br>    if cur_column &gt;= BOARD_SIZE:#如果遍历过程中col_column大于棋盘宽度，说明<br>        global solution_count# 将解决方案设置为全局变量<br>        solution_count += 1<br>        print(solution_count)<br>    else:<br>        for i in range(BOARD_SIZE):#列号从0-7，每一轮确定一个皇后所处的行号<br>            if position_valid(cur_column,i):#如果当前位置有效，则记录该列皇后所处的行号<br>                record_list[cur_column] = i#记录行号<br>                eight_quenes(cur_column+1)#已经安置好cur_column列的皇后，安置下一列的皇后<br><br>def position_valid(cur_column,row):#判断当前位置是否有效<br>    &#39;&#39;&#39;<br>    判断所处位置是否有效<br>    判断一个位置(cur_column,row)是否有效，只需要判断是否与前几列的皇后冲突即可，所以需要遍历cur_column之前的列<br>    无效情况：当前位置与先前列中的皇后冲突，有如下两种情况<br>    1.当前列的皇后与先前列的皇后安置在同一行中 --&gt;<br>    2.当前列安置的皇后与先前列皇后处于对角线位置<br>    有效：返回True<br>    :param cur_column:当前安置的是哪一列的皇后<br>    :param row:父引用中，正待确认的行号<br>    :return: 是否有效位置<br>    &#39;&#39;&#39;<br>    i = 0<br>    while i &lt; cur_column:#i就是在先前列中搜索<br>        if row == record_list[i]:#当前位置与先前皇后的安置行相同<br>            return False<br>        if abs(cur_column-i) == abs(row-record_list[i]):#对角线，行差值==列差值<br>            return False<br>        i = i+1#需要判断所有先前列才能断定传入的位置是否有效<br>    return True#所有情况遍历完成后，即为有效位置，返回True<br><br>eight_quenes(0)","like_count":0},{"had_liked":false,"id":217388,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1589474237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589474237","product_id":100017301,"comment_content":"问题：在计算当前背包cw时，计算当前背包的价值，如果当前背包价值大于最大价值，更新最大价值。最后输出最大价值。","like_count":0},{"had_liked":false,"id":216777,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1589340524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589340524","product_id":100017301,"comment_content":"60天攻克算法打卡行动第31天<br><br>学习内容 ：回溯算法：从电影《蝴蝶效应》中学习回溯算法的核心思想<br><br>回溯算法可以解决很多经典数学问题，通过学习它的算法思想，我们就能解决广义的搜索问题：从一组可能的解中，找出最优解。<br><br>1.如何理解回溯算法？<br>就是不停倒退重新开始的思路<br>2.回溯算法的经典应用之0-1背包问题<br>要不装要不不装；重量最大不超过背包承载量。<br>3.回溯算法的经典应用之正则表达式<br>能够匹配就继续匹配，不能就回到上个岔口换另一种匹配方案继续匹配剩下的字符。<br><br>课后思考：<br>回溯问题，价格排序从大到小，没进行放入都判断重量是否超过，如果超过则回溯到之前选择下一个价格的重量进行放入来回操作。","like_count":0},{"had_liked":false,"id":215350,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1588976938,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588976938","product_id":100017301,"comment_content":" 0-1 背包问题，那个3个物品的例子很好很受启发！进一步，这个问题的目标是知道放那几个物品对吗？怎么记录下最终被选中的几个物品？<br>另外觉得backtracking很烧脑，有点吃力","like_count":0,"discussions":[{"author":{"id":1004953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","nickname":"Chloe","note":"","ucode":"C4848ED5B35752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262241,"discussion_content":"看到下一篇dynamic programming，利用states 矩阵，就可以打印出来被选中的物品了。谢谢老师！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589052593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215288,"user_name":"鱼丸粗面","can_delete":false,"product_type":"c1","uid":1785016,"ip_address":"","ucode":"B2F3F75B0D1422","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3c/b8/9489387c.jpg","comment_is_top":false,"comment_ctime":1588948717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588948717","product_id":100017301,"comment_content":"优化了一下老师正则匹配的实现，可以不用递归那么深<br>public static boolean match(CharSequence text, int ti, CharSequence pattern, int pi) {<br>        if (pi == pattern.length()) return ti == text.length();<br><br>        int j = pi, i = ti;<br>        while (i &lt; text.length()) {<br>            char c = text.charAt(i);<br>            char p = pattern.charAt(j);<br>            if (p == &#39;*&#39;) {<br>                for (int k = i; k &lt;= text.length(); k++) {<br>                    if (match(text, k, pattern, j + 1)) {<br>                        return true;<br>                    }<br>                }<br>            } else if (p == &#39;?&#39;) {<br>                return match(text, i, pattern, j + 1) || match(text, i + 1, pattern, j + 1);<br>            } else if (p == c) {<br>                j++;<br>                i++;<br>                if (j == pattern.length()) return i == text.length();<br>                continue;<br>            }<br>            break;<br>        }<br><br>        return false;<br>    }","like_count":0},{"had_liked":false,"id":215257,"user_name":"27号男嘉班","can_delete":false,"product_type":"c1","uid":1246211,"ip_address":"","ucode":"68948C17F063A8","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/03/6577b5e7.jpg","comment_is_top":false,"comment_ctime":1588942595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588942595","product_id":100017301,"comment_content":"各位不是很理解怎么回溯的话，可以理解成方法入栈，然后方法出栈，方法先进后出，这样就可以达到回溯的效果了。","like_count":0},{"had_liked":false,"id":214755,"user_name":"鱼丸粗面","can_delete":false,"product_type":"c1","uid":1785016,"ip_address":"","ucode":"B2F3F75B0D1422","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3c/b8/9489387c.jpg","comment_is_top":false,"comment_ctime":1588814074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588814074","product_id":100017301,"comment_content":"我们走的是盲猜式的贪心算法，有资源的人走的是能多看到许多步的贪心算法，没有人能回溯","like_count":0},{"had_liked":false,"id":213892,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1588585365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588585365","product_id":100017301,"comment_content":"回溯算法真难理解，不过看几遍好像理解了。1. 分步穷举 2. 剪支。比如8皇后问题，其实也是穷举法。<br>这样的算法时间复杂度还是很大的。","like_count":0},{"had_liked":false,"id":213100,"user_name":"华仔","can_delete":false,"product_type":"c1","uid":1299543,"ip_address":"","ucode":"F794510431C343","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/57/b0a11ae5.jpg","comment_is_top":false,"comment_ctime":1588301576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588301576","product_id":100017301,"comment_content":"回溯算法往往也使用递归的方式来实现，这也使我以前把递归和回溯混为一谈，认为回溯就是递归下去之后再逐级回来的那个阶段。现在想想其实不然，递归是一种实现方式，天然就包括了层层压栈重复调用同一个函数，以及函数出栈的过程，是一种算法或者实现；回溯则不同，特指在向前寻找解决方案的过程中如果碰壁就回退一步换下一个路线，是一个前进和步退结合处理问题的算法思想，这种算法思想通常用递归来实现，核心体现在会判断何时结束当前路线，回退一步换下一条路线，也就是何时出栈一个函数回到上一级。","like_count":0},{"had_liked":false,"id":209326,"user_name":"naku","can_delete":false,"product_type":"c1","uid":1528610,"ip_address":"","ucode":"B49EF5B5B38400","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","comment_is_top":false,"comment_ctime":1587536121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587536121","product_id":100017301,"comment_content":"0-1背包问题的时间复杂度也是2^n吧， 第1个选不选，两种；第1个选时第二个的选不选，第二个选时的选不选； ","like_count":0},{"had_liked":false,"id":207540,"user_name":"Yoe","can_delete":false,"product_type":"c1","uid":1419640,"ip_address":"","ucode":"AE07A8871EEB61","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/78/8d295bba.jpg","comment_is_top":false,"comment_ctime":1587104626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587104626","product_id":100017301,"comment_content":"字符串”aab“匹配&quot;c*a*b&quot;的时候是不是会有问题？","like_count":0},{"had_liked":false,"id":205047,"user_name":"Simple life","can_delete":false,"product_type":"c1","uid":1571460,"ip_address":"","ucode":"1902D7F72FB43F","user_header":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","comment_is_top":false,"comment_ctime":1586515453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586515453","product_id":100017301,"comment_content":"这个八皇后代码有点问题啊，只有当列满足才会下一行，并没有回溯","like_count":0},{"had_liked":false,"id":201603,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585810910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585810910","product_id":100017301,"comment_content":"价值&#47;重量。算出比最大的，然后排序。然后再有选择的穷举？","like_count":0},{"had_liked":false,"id":194174,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1585033061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585033061","product_id":100017301,"comment_content":"背包问题其实就是计算所有可能的情况，然后看哪个放法最重，11行代码如果放到else里面可能就会有一种情况没有计算。","like_count":0},{"had_liked":false,"id":193902,"user_name":"里咯破","can_delete":false,"product_type":"c1","uid":1224546,"ip_address":"","ucode":"2DA41A6D44B3C4","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/62/5eeb9041.jpg","comment_is_top":false,"comment_ctime":1584978821,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584978821","product_id":100017301,"comment_content":"回溯就是递归，符合条件进入下次，不符合条件就退出","like_count":0},{"had_liked":false,"id":186575,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1583887068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583887068","product_id":100017301,"comment_content":"作业：0-1 背包问题，通过回溯法计算背包最大价值及其对应的所有物品<br>private Goods[] candidates;<br>private int maxWeight;     &#47;&#47; 背包的总承重<br><br>private boolean[] result;             &#47;&#47; 结果集<br>private int maxW = Integer.MIN_VALUE; &#47;&#47; 存储背包中物品总重量的最大值<br>private boolean[] maxWResult;         &#47;&#47; 最大重量对应的物品<br>private int maxV = Integer.MIN_VALUE; &#47;&#47; 存储背包中物品总价值的最大值<br>private boolean[] maxVResult;         &#47;&#47; 最大价值对应的物品<br>public void backtrack(int i, int sw, int sv) {<br>    if (sw == maxWeight || i == candidates.length) { &#47;&#47; cw==w表示装满了;i==n表示已经考察完所有的物品<br>        print(result);<br>        if (sw &gt; maxW) {<br>            maxW = sw;<br>            maxWResult = Arrays.copyOf(result, result.length);<br>        }<br>        if (sv &gt; maxV) {<br>            maxV = sv;<br>            maxVResult = Arrays.copyOf(result, result.length);<br>        }<br>        return;<br>    }<br>    for (int j = 0; j &lt; 2; j++) {<br>        if (j == 0) { &#47;&#47; 不放物品<br>            result[i] = false;<br>            backtrack(i + 1, sw, sv);<br>        } else {      &#47;&#47; 放物品，但还需要判断是否超过背包承受的重量的时候<br>            if (sw + candidates[i].weight &lt;= maxWeight) {<br>                result[i] = true;<br>                backtrack(i + 1, sw + candidates[i].weight, sv + candidates[i].value);<br>            }<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":185053,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1583473719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583473719","product_id":100017301,"comment_content":"回溯算法的总结<br>回溯算法 其实是一种思想 主要能够记录当前状态 以便后面回到当前状态 做另外的选择或者操作<br>递归 就很用来做回溯 因为递归调用开辟函数栈时 为记录当前栈的执行状态<br>回溯的案例 深度优先搜索、八皇后、0-1 背包问题、图的着色、旅行商问题、数独、全排列、正则表达式匹配等<br>关于思考题 <br>从题目描述来看 很符合贪心算法的适用规则  有限制值和期望值 <br>但是 贪心算法的缺陷在于 因为会对后面的结果造成影响 所以并不一定会是最优解<br>所以我会先采用贪心算法 每次选择重量最小 价格最高的进行计算<br>如果不是最优解 采用回溯算法枚举所有的装载情况 并且适当的剪枝","like_count":0},{"had_liked":false,"id":181673,"user_name":"陈颖","can_delete":false,"product_type":"c1","uid":1594422,"ip_address":"","ucode":"157A771F326C45","user_header":"https://static001.geekbang.org/account/avatar/00/18/54/36/1843a5f1.jpg","comment_is_top":false,"comment_ctime":1582612945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582612945","product_id":100017301,"comment_content":"看是看懂了，让我自己想，那可想不出来，每次都只会说，厉害！他怎么想的这么巧妙，666","like_count":0},{"had_liked":false,"id":179571,"user_name":"啊噗！","can_delete":false,"product_type":"c1","uid":1798068,"ip_address":"","ucode":"C911E772E1E800","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","comment_is_top":false,"comment_ctime":1582033092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582033092","product_id":100017301,"comment_content":"8皇后 老师给的代码跑出来结果是错的啊 试5就知道了","like_count":0},{"had_liked":false,"id":178132,"user_name":"Geek_e8a4ae","can_delete":false,"product_type":"c1","uid":1564331,"ip_address":"","ucode":"D497B086060F09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/D5Wuw4RcdvMmP0GdmEcLW6fRpCjhKuwYmTxOJIzicFO7VQ0cXkVP2SHy1o58QAgy8ZSyZXNB3c64TEBeEwE69fQ/132","comment_is_top":false,"comment_ctime":1581593982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581593982","product_id":100017301,"comment_content":"背包问题的改进问题，修改想法<br>引入一个关于价值的全局变量，在第一个if那里更新价值，第三个if里边价值增加，在第三个if后边加else，里边进行价值的更新。<br>其实和八皇后记录每个子的位置有些相似。","like_count":0},{"had_liked":false,"id":178100,"user_name":"Geek_e8a4ae","can_delete":false,"product_type":"c1","uid":1564331,"ip_address":"","ucode":"D497B086060F09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/D5Wuw4RcdvMmP0GdmEcLW6fRpCjhKuwYmTxOJIzicFO7VQ0cXkVP2SHy1o58QAgy8ZSyZXNB3c64TEBeEwE69fQ/132","comment_is_top":false,"comment_ctime":1581586018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581586018","product_id":100017301,"comment_content":"感觉和图的DFS已经树的前序遍历非常类似","like_count":0},{"had_liked":false,"id":176510,"user_name":"MXQ","can_delete":false,"product_type":"c1","uid":1665239,"ip_address":"","ucode":"7104D0B5D025AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/d7/499f23ec.jpg","comment_is_top":false,"comment_ctime":1581076719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581076719","product_id":100017301,"comment_content":"C++版本的0-1背包问题代码：<br><br>void ZeroOneBag(int item_index, int weights, vector&lt;int&gt; items_weight, int items_number, int bag_weight, int&amp; max_weight){<br>    if (weights == bag_weight || item_index == items_number){<br>        if (weights &gt; max_weight){<br>            max_weight = weights;<br>        }<br>        return;<br>    }<br>    <br>    &#47;&#47; 不放当前物品的情况下，尝试下一个物品<br>    ZeroOneBag(item_index+1, weights, items_weight, items_number, bag_weight, max_weight);<br>    &#47;&#47; 放当前物品的情况下，尝试下一个物品（如果加上当前物品超出限制，就不进行尝试）<br>    if (weights + items_weight[item_index+1] &lt;= bag_weight)<br>        ZeroOneBag(item_index+1, weights+items_weight[item_index], items_weight, items_number,<br>                bag_weight, max_weight);<br>}","like_count":0},{"had_liked":false,"id":175306,"user_name":"Geek_8f38a9","can_delete":false,"product_type":"c1","uid":1793136,"ip_address":"","ucode":"EB3208A4A149E0","user_header":"","comment_is_top":false,"comment_ctime":1580649595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580649595","product_id":100017301,"comment_content":"上面的字符串匹配代码逻辑感觉和分治差不多<br>但是用这种方式递归 匹配*时如果字符串过长 会超时 这种应该如何剪枝呢","like_count":0},{"had_liked":false,"id":169806,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1578448867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578448867","product_id":100017301,"comment_content":"课后习题，计算背包最大价值：在原有计算最大重量的代码基础上加一个判断最大价值就可以解决。","like_count":0},{"had_liked":false,"id":168099,"user_name":"分清云淡","can_delete":false,"product_type":"c1","uid":1269873,"ip_address":"","ucode":"7045AE6BF72D31","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/71/895ee6cf.jpg","comment_is_top":false,"comment_ctime":1578013745,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578013745","product_id":100017301,"comment_content":"八皇后的解法 好像有点问题 这里没看到在当前row 没有结果时的重置 也就是说这个解法只有第一个结果有效？ 注：后面遍历的时候会受到之前的数据干扰 我再仔细看看。。。","like_count":0,"discussions":[{"author":{"id":1474513,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7f/d1/34db5097.jpg","nickname":"懒的起名","note":"","ucode":"FBEF63E4DCC311","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119429,"discussion_content":"暴力穷举，当棋子在第一行第一列的所有结果穷举完了，返回row=0，接着执行column++，接着递归找，依次类推，知道所有找完结束。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578230329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167857,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1577951786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577951786","product_id":100017301,"comment_content":"没入门。","like_count":0},{"had_liked":false,"id":167725,"user_name":"那样的月色","can_delete":false,"product_type":"c1","uid":1237353,"ip_address":"","ucode":"23B1298C465D2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/69/0db70c84.jpg","comment_is_top":false,"comment_ctime":1577924016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577924016","product_id":100017301,"comment_content":"八皇后那个真的很巧妙，，，背包问题是不是还可以剪枝，比如那种00000的情形或者01000，，，00100，00010，00001，，单个物品的重量本身就不会超过最大重量","like_count":0},{"had_liked":false,"id":166675,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1640973,"ip_address":"","ucode":"2C0D1D26853DB3","user_header":"https://static001.geekbang.org/account/avatar/00/19/0a/0d/7bac5bcb.jpg","comment_is_top":false,"comment_ctime":1577541843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577541843","product_id":100017301,"comment_content":"public void f(int i, int cw, int[] items, int n, int w) {<br>        if (cw == w || i == n) { &#47;&#47; cw==w表示装满了;i==n表示已经考察完所有的物品<br>            if (cw &gt; maxW) maxW = cw;<br>            return;<br>        }<br>        if (cw + items[i] &lt;= w) {&#47;&#47; 如果背包能装下当前物品，就装进去<br>            f(i+1,cw + items[i], items, n, w);<br>        }else {&#47;&#47;如果超过重量就不要装了<br>            f(i+1, cw, items, n, w);<br>        }<br>    }<br>这样写是不是更好理解啊，不知道有没有错误","like_count":0},{"had_liked":false,"id":165403,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1577234269,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1577234269","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":161981,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1576422839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576422839","product_id":100017301,"comment_content":"修改如下：<br>1.maxW中存贮背包中所有物品总价值的最大值；<br>2.另外增加一个数组用于存贮每件物品的价值，假定数组名为values；<br>3.递归函数中需要额外增加二个参数，一个是表示当前已经装进去的物品总价值cv,另一个为存贮每件物品价值的数组values；<br>4.递归调用改为：<br>if(cw + items[i] &lt;= w){<br>    f(i+1, cw + items[i], cv + values[i], items, values, n, w);<br>5.递归终止条件改为：<br>if(cw == w || i == n){<br>    if(cv &gt; maxW) maxW = cv;<br>    return;<br>}","like_count":0},{"had_liked":false,"id":161273,"user_name":"1011001","can_delete":false,"product_type":"c1","uid":1573301,"ip_address":"","ucode":"8658491E9386FB","user_header":"https://static001.geekbang.org/account/avatar/00/18/01/b5/3fd2a38d.jpg","comment_is_top":false,"comment_ctime":1576161898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576161898","product_id":100017301,"comment_content":"n皇后问题 Python代码<br>class Solution:<br>    def isOk(self, n, row, col, q):<br>        for i in range(len(q)):<br>            if q[i][0] == row or q[i][1] == col:<br>                return False<br>            if abs(q[i][0] - row) == abs(q[i][1] - col):<br>                return False<br>        return True<br><br>    def place(self, n, row, q):  # q为一个stack用来保存每一行的Q左边<br>        if row == n:<br>            l = []<br>            for i in range(len(q)):<br>                l.append(q[i][1] * &#39;.&#39; + &#39;Q&#39; + &#39;.&#39; * (n - q[i][1] - 1))<br>            self.res.append(l)<br>            return<br><br>        for i in range(n):<br>            if self.isOk(n, row, i, q):  # 判断当前坐标能不能放<br>                q.append((row, i))<br>                self.place(n, row + 1, q)<br>                q.pop()    <br>        <br>    def solveNQueens(self, n: int) -&gt; List[List[str]]:<br>        self.res = []<br>        self.place(n, 0, [])<br>        return self.res","like_count":0},{"had_liked":false,"id":160614,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1575986439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575986439","product_id":100017301,"comment_content":"思考题：如果背包问题在加入一个价值参考量，重量大价值不一定大可以再引入一个变量。具体代码如下：<br><br><br>    public static void main(String[] args) {<br>        lookback l = new lookback();<br><br>        int[] items = new int[] { 30, 20, 15 };<br>        int[] values = new int[] { 3000, 2000, 1500 };<br><br>        l.f(0,0,3,35,0,values,items);<br>        System.out.println(maxValue);<br><br>        l.ff(0, 0, items,3, 35);<br>        System.out.println(maxW);<br>    }<br><br>    &#47;&#47; i表示检查第i个物品，cw表示已经装入的重量，n表示物品数量，w表示背包的容量,values表示当前已经装入的物品的价值<br>    public void f(int i, int cw, int n, int w, int value, int[] values, int[] items) {<br>        if (cw == w || i == n) {&#47;&#47; 背包已满，或已经检查完所有的物品<br>            if (value &gt; maxValue)<br>                maxValue = value;<br>            return;<br>        }<br>        f(i + 1, cw, n, w, value, values, items);<br>        if (cw + items[i] &lt;= w) {<br>            f(i + 1, cw + items[i], n, w, value + values[i], values, items);<br>        }<br>    }","like_count":0},{"had_liked":false,"id":157441,"user_name":"钱勇","can_delete":false,"product_type":"c1","uid":1602652,"ip_address":"","ucode":"BA2796F17E54E5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzSRrK59sydlOmgvqIFm1pjHA55RcM5ttWvHdOZyibZhFCr7picy4Xf5Bf9dLOW8d2DGUwA1zormzw/132","comment_is_top":false,"comment_ctime":1575165060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575165060","product_id":100017301,"comment_content":"执行了一下， 八皇后竟然有92个解！","like_count":0},{"had_liked":false,"id":156270,"user_name":"咩咩咩","can_delete":false,"product_type":"c1","uid":1237849,"ip_address":"","ucode":"9DEC7D5D52D972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5VXOpRKyYibsemKwDMexMxkzZOBquPo6T4HOcYicBiaTcqibDoTIhZSjVjF3nKXTEGDYOGPt2xqqwiawjg/132","comment_is_top":false,"comment_ctime":1574846388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574846388","product_id":100017301,"comment_content":"看了好几次八皇后的代码,总觉得不可思议.result在循环中居然没有置空,这样子真的不会有脏数据吗.跑了两次代码发现竟然没有问题.等自己写代码对比才发现,原来文中的八皇后是使用int[]数组储存数据,而不是int[][].这种储存方式就能避免像使用int[][] 保存皇后位置而导致的脏数据问题.有点巧妙呀","like_count":0},{"had_liked":false,"id":153050,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1574148097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574148097","product_id":100017301,"comment_content":"老师的八皇后解法是 第一个皇后在第一行第一列的所有解法","like_count":0,"discussions":[{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109460,"discussion_content":"不是的，是所有解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577696131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151621,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1573759017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573759017","product_id":100017301,"comment_content":"也可以给对角线，反对角线编号，然后建立两个数组存储对角线和反对角线是否有Q<br><br>一个正方形棋盘的对角线条数等于2n - 1，比如，原理就是以中间最长对角线把正方形分成上下两个直角三角形，平行斜边的对角线(包括斜边本身和最后一个单独格子都算对角线)一共有n个，两个三角形加一起就是2n但是中间斜边计算了两次，要减1<br><br>反对角线条数是一样的<br><br>两个数组建立好了，利用行列就能求出第几条对角线里有Q，比如当前格子是[row, col] 当前对角线数组就是row+col，把对角线数组下标改成true即可，原理是col相当于你在x轴上往右数，row相当于y轴往上数，两个加一起正好就是所处对角线<br><br>反对角线难一些，等于[n - 1 - row + col] 因为反对角线不是从坐标原点出发的，相当于横坐标从n-1(最后一个col)逆向往左数就等于n-1+row，然后再往上数，所以col还是加，这样就求出反对角线数组下标了，更改为true<br><br>这样判断是否对角线有Q，直接从数组里拿就行了，这个解法可能对于纯解析几何思路理解梗荣","like_count":0},{"had_liked":false,"id":148515,"user_name":"Murrre","can_delete":false,"product_type":"c1","uid":1685995,"ip_address":"","ucode":"49644059B512BE","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","comment_is_top":false,"comment_ctime":1573023500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573023500","product_id":100017301,"comment_content":"课后思考题，使用Java解答<br>public class OneOrZeroPackageWithMoney {<br><br>    public static class Thing {<br>        int weight;<br>        int money;<br><br>        public Thing(int weight, int money) {<br>            this.weight = weight;<br>            this.money = money;<br>        }<br>    }<br><br>    public static int maxW = Integer.MIN_VALUE; &#47;&#47;存储背包中物品总重量的最大值<br>    public static int maxValue = Integer.MIN_VALUE; &#47;&#47;存储背包中物品最大价值<br><br>    &#47;**<br>     * i表示考察到哪个物品了；<br>     * cw表示当前已经装进去的物品的重量和；<br>     * value表示当前已经装进去的物品的总价值<br>     * items表示每个物品的重量<br>     * n表示物品个数;<br>     * w背包重量；<br>     * 假设背包可承受重量100，物品个数10，物品重量存储在数组a中，那可以这样调用函数：<br>     * f(0, 0, a, 10, 100)<br>     *&#47;<br><br>    public static void f(int i, int cw, int value, Thing[] items, int n, int w) {<br>        if (cw == w || i == n) { &#47;&#47; cw==w表示装满了;i==n表示已经考察完所有的物品<br>            if (cw &gt; maxW &amp;&amp; cw &lt; w) {<br>                maxW = cw;<br>                maxValue = value;<br>            }<br>            return;<br>        }<br>        f(i + 1, cw, value, items, n, w);&#47;&#47;当前物品不装进背包<br>        f(i + 1, cw + items[i].weight, value + items[i].money, items, n, w); &#47;&#47;当前物品装进背包<br>    }<br><br>    public static void main(String[] args) {<br>        Thing t1 = new Thing(50, 100);<br>        Thing t2 = new Thing(2, 100);<br>        Thing t3 = new Thing(60, 300);<br>        Thing t4 = new Thing(10, 5);<br>        Thing t5 = new Thing(30, 1000);<br>        Thing[] a = {t1, t2, t3, t4, t5};<br>        f(0, 0, 0, a, a.length, 100);<br>        System.out.println(maxW);<br>        System.out.println(maxValue);<br>    }<br>}","like_count":0},{"had_liked":false,"id":148453,"user_name":"Murrre","can_delete":false,"product_type":"c1","uid":1685995,"ip_address":"","ucode":"49644059B512BE","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/eb/6bdab896.jpg","comment_is_top":false,"comment_ctime":1573009477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573009477","product_id":100017301,"comment_content":"01背包回溯这样写就易懂很多，作者加上了剪枝进行了优化<br>public static void f(int i, int cw, int[] items, int n, int w) {<br>        if (cw == w || i == n) { &#47;&#47; cw==w表示装满了;i==n表示已经考察完所有的物品<br>            if (cw &gt; maxW &amp;&amp; cw &lt; w) {<br>                maxW = cw;<br>            }<br>            return;<br>        }<br>        f(i + 1, cw, items, n, w);&#47;&#47;当前物品不装进背包<br>        f(i + 1, cw + items[i], items, n, w); &#47;&#47;当前物品装进背包<br>    }<br><br>","like_count":0},{"had_liked":false,"id":146799,"user_name":"Knuth","can_delete":false,"product_type":"c1","uid":1083616,"ip_address":"","ucode":"21298EF9BBB91A","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/e0/292508a4.jpg","comment_is_top":false,"comment_ctime":1572662002,"is_pvip":false,"replies":[{"id":"56799","content":"😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572823704,"ip_address":"","comment_id":146799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572662002","product_id":100017301,"comment_content":"每次要描述思路的时候，都来个描述起来很费经，直接上代码。。。<br>兄弟能这么操作的？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473015,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572823704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137527,"user_name":"别天神","can_delete":false,"product_type":"c1","uid":1107606,"ip_address":"","ucode":"42A08D6EF5C59A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/96/eb143e46.jpg","comment_is_top":false,"comment_ctime":1569765584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569765584","product_id":100017301,"comment_content":"8皇后那个isOk()方法可以利用坐标轴直线函数来简化<br>boolean isOk(int row, int column) {<br>            for (int i = 0; i &lt; row; i++) {<br>                if (column == result[i]) return false;<br>                if (row == column - (result[i] - i)) return false;<br>                if (row == result[i] + i - column) return false;<br>            }<br><br>            return true;<br>        }","like_count":0},{"had_liked":false,"id":133891,"user_name":"saber","can_delete":false,"product_type":"c1","uid":1193468,"ip_address":"","ucode":"D02F8D129DB41C","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","comment_is_top":false,"comment_ctime":1568691225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568691225","product_id":100017301,"comment_content":"用了 2 天的时间，终于把该讲回溯算法几个例子用 c++ 书写一遍并且进行了验证，包括 8 皇后问题、0-1背包及其变种、还有 leetcode 上第 980 题 不同路径 III。有需要的童鞋可以来看看<br>https:&#47;&#47;github.com&#47;saber&#47;algorithm&#47;blob&#47;master&#47;src&#47;backtracking&#47;backtracking.hpp","like_count":0},{"had_liked":false,"id":133646,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568627757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568627757","product_id":100017301,"comment_content":"就差代码实现了","like_count":0},{"had_liked":false,"id":132667,"user_name":"走马","can_delete":false,"product_type":"c1","uid":1251016,"ip_address":"","ucode":"EEFE8F7590FFA4","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/c8/980776fc.jpg","comment_is_top":false,"comment_ctime":1568188495,"is_pvip":false,"replies":[{"id":"51231","content":"回退的话，是利用了递归本身的机制回退的。不会发生堆栈溢出的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568589456,"ip_address":"","comment_id":132667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568188495","product_id":100017301,"comment_content":"到某一行不匹配，怎么回退呢，用递归回退上一步继续执行的话会不会发生栈溢出","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467060,"discussion_content":"回退的话，是利用了递归本身的机制回退的。不会发生堆栈溢出的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568589456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131718,"user_name":"张晓永","can_delete":false,"product_type":"c1","uid":1529668,"ip_address":"","ucode":"C728459C061A13","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/44/a0ed355d.jpg","comment_is_top":false,"comment_ctime":1567862020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567862020","product_id":100017301,"comment_content":"幸亏电脑不知道累，否则他要反抗了","like_count":0},{"had_liked":false,"id":126385,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1570356,"ip_address":"","ucode":"38E2A6A028DD74","user_header":"https://static001.geekbang.org/account/avatar/00/17/f6/34/ddac4baa.jpg","comment_is_top":false,"comment_ctime":1566377619,"is_pvip":false,"replies":[{"id":"46786","content":"没看懂你说的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1566422609,"ip_address":"","comment_id":126385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566377619","product_id":100017301,"comment_content":"老师，01背包🎒中的n-1才是物品的个数？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463966,"discussion_content":"没看懂你说的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566422609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126073,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566306148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566306148","product_id":100017301,"comment_content":"8皇后很好理解。","like_count":0},{"had_liked":false,"id":123201,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1565624826,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565624826","product_id":100017301,"comment_content":"0-1背包有这两点理解：<br>1、回溯的思想是通过递归调用来实现的<br>2、每次遇到了一个新的物品，有两种选择：装入背包中继续考察下一个物品，或者直接考察下一个物品<br>3、每一条路，只要达到了终止条件：背包满了或者物品都考察完了，就可以判断这次尝试的结果。<br>如此循环，直到取得最大的结果。<br>但是分析代码好像没有记录如何选择，思考了下，只想到为每次递归都暂存一个路径数组直到找到更合适的路径将该数组替换；或者维持一个多叉树，每个节点都保存之前的路径，然后在最后的结果集中返回叶子结点，这一个相比于之前的数组可以利用每次分叉的共同前缀，不知可不可行，希望老师帮忙看下。","like_count":0},{"had_liked":false,"id":117839,"user_name":"乘坐Tornado的线程魔法师","can_delete":false,"product_type":"c1","uid":1132661,"ip_address":"","ucode":"C4C9915866E769","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","comment_is_top":false,"comment_ctime":1564146495,"is_pvip":false,"replies":[{"id":"43280","content":"你再看下我对*这个通配符的定义。应该是返回false的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564266135,"ip_address":"","comment_id":117839,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564146495","product_id":100017301,"comment_content":"正则表达式小节的代码 针对于case: pattern = &#39;c*a*b&#39;   text = &#39;aab&#39; 的情况返回False，实际则应该返回True。 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460137,"discussion_content":"你再看下我对*这个通配符的定义。应该是返回false的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117441,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1564047611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564047611","product_id":100017301,"comment_content":"思考题和文中例子的不同在于更新那一行，也就是如果价值大于已知的最大价值，其他都一样。","like_count":0},{"had_liked":false,"id":115663,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1563688285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563688285","product_id":100017301,"comment_content":"算法导论中，竟然没有「回溯」？！！！","like_count":0},{"had_liked":false,"id":113647,"user_name":"赵国辉","can_delete":false,"product_type":"c1","uid":1166280,"ip_address":"","ucode":"390196BD3082B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/c8/ff9f3ffb.jpg","comment_is_top":false,"comment_ctime":1563104866,"is_pvip":false,"replies":[{"id":"41402","content":"给出了所有情况。一看就是你没有自己运行一下代码","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563141251,"ip_address":"","comment_id":113647,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1563104866","product_id":100017301,"comment_content":"该节中八皇后问题的例子，好像跟回溯没有关系吧，它只是得出了其中的一种情况而已，请老师指点一下，谢谢。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458328,"discussion_content":"给出了所有情况。一看就是你没有自己运行一下代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563141251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308025,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f5/79/e844617c.jpg","nickname":"tree","note":"","ucode":"AA7CA46DD3E88C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1991,"discussion_content":"老师的代码非常厉害，是包含所有的情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563171457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1610333,"avatar":"","nickname":"Geek_86533a","note":"","ucode":"6961C429E8953A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4399,"discussion_content":"是所有情况。另外，回溯和包含几种情况没有关系。哪怕只找一种解，其方案也是回溯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565360867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3829,"discussion_content":"这几章节最好自己调试一下代码，我也是调试了比较久，才发现我原来还有很多地方没理解够，需要有点耐心。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564847364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109124,"user_name":"月迷津渡","can_delete":false,"product_type":"c1","uid":1264111,"ip_address":"","ucode":"2B18B2FE3DAC3B","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/ef/02401473.jpg","comment_is_top":false,"comment_ctime":1561966815,"is_pvip":false,"replies":[{"id":"39579","content":"都给出来了，你可以运行一下看下结果","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562023880,"ip_address":"","comment_id":109124,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1561966815","product_id":100017301,"comment_content":"八皇后问题的代码只给出一种八颗棋子的放置办法？代码里好像没看到穷举么。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456254,"discussion_content":"都给出来了，你可以运行一下看下结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562023880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3830,"discussion_content":"这个真的建议耐心断点调试一下，可以在第一次print时加断点，然后看它怎么一步步回溯探寻更多的情况，最后会回溯到第0行row（此时已经print出了很多种解了），开启第0行row第二列的探查, 调试完之后会有收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564847732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104633,"user_name":"王者归来","can_delete":false,"product_type":"c1","uid":1349051,"ip_address":"","ucode":"7518431E647410","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Dyic3CxSFwI4wsNTia2UzqaQL2pENLp8rRkNgBaCzr82BSMibegfnfYQbTCYOMXicZymXAqIk8zf1neUFeicmyxnFXw/132","comment_is_top":false,"comment_ctime":1560794245,"is_pvip":false,"replies":[{"id":"38003","content":"指数级的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560899957,"ip_address":"","comment_id":104633,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1560794245","product_id":100017301,"comment_content":"本文中8皇后的时间复杂度是多少？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454350,"discussion_content":"指数级的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560899957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062864,"avatar":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","nickname":"aof","note":"","ucode":"5815D63C4926BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180,"discussion_content":"每次检查貌似会有不少重复检查吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561259035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102587,"user_name":"Geek_Zu","can_delete":false,"product_type":"c1","uid":1485177,"ip_address":"","ucode":"A892647511772B","user_header":"https://static001.geekbang.org/account/avatar/00/16/a9/79/16c46704.jpg","comment_is_top":false,"comment_ctime":1560258520,"is_pvip":false,"replies":[{"id":"37274","content":"加上不错，不加也对。因为函数的最前面已经对长度做了判断。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560382218,"ip_address":"","comment_id":102587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560258520","product_id":100017301,"comment_content":"正则表达式中23行和27行代码，判断条件用不用这样写<br>23  if(pj&lt;plen&amp;&amp;pattern[pj]==&#39;*&#39;)<br><br>27 if(pj&lt;plen&amp;&amp;pattern[pj]==&#39;?&#39;)<br>用不用判断正则表达式是否到结尾？？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453488,"discussion_content":"加上不错，不加也对。因为函数的最前面已经对长度做了判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560382218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97490,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558683434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558683434","product_id":100017301,"comment_content":"课后思考题用贪心算法解决","like_count":0},{"had_liked":false,"id":85771,"user_name":"李应鹏","can_delete":false,"product_type":"c1","uid":1261453,"ip_address":"","ucode":"2FC57D7C334F6B","user_header":"https://static001.geekbang.org/account/avatar/00/13/3f/8d/e297e813.jpg","comment_is_top":false,"comment_ctime":1555228317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555228317","product_id":100017301,"comment_content":"第一个8皇后问题，貌似没有看到回溯的过程呀，按照代码实现了下，第5行已经找不到符合的column了，自己改进了一下。代码如下，请作者批评指正<br><br>- (void)cal8Queen:(NSInteger)r {<br>    if (r &lt; 0) {<br>        &#47;&#47; 如果所有行已经都回溯过了 直接返回不能计算即可<br>        printf(&quot;there is no naswer for queen number %ld&quot;, (long)self.queenNum);<br>        printf(&quot;\\n&quot;);<br>        return;<br>    }<br>    if (r == self.queenNum) {<br>        [self printResult];<br>        return;<br>    }<br>    <br>    BOOL setted = NO;<br>    NSInteger i = r &lt; self.array.count ? [self.array[r] integerValue] + 1 : 0;<br>    <br>    if (i &gt;= self.queenNum) {<br>        &#47;&#47; 如果当前行已经没有可选了 回溯前一行<br>        [self.array removeLastObject];<br>        [self cal8Queen:--r];<br>        return;<br>    }<br>    for (; i &lt; self.queenNum; i++) {<br>        if ([self isOK:r c:i]) {<br>            self.array[r] = @(i);<br>            [self cal8Queen:++r];<br>            setted = YES;<br>            break;<br>        }<br>    }<br>    if (!setted) {<br>        &#47;&#47; 开始回溯<br>        [self cal8Queen:--r];<br>    }<br>}","like_count":0},{"had_liked":false,"id":85317,"user_name":"彬","can_delete":false,"product_type":"c1","uid":1304482,"ip_address":"","ucode":"9762773DF9F50E","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/a2/f7ea2ec4.jpg","comment_is_top":false,"comment_ctime":1555035747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555035747","product_id":100017301,"comment_content":"11行相当于一个循环，枚举出第一个是item[n-1]～item[0]时的所有放法","like_count":0},{"had_liked":false,"id":84116,"user_name":"宝君","can_delete":false,"product_type":"c1","uid":1450583,"ip_address":"","ucode":"2C86764B40B7BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/57/212683f1.jpg","comment_is_top":false,"comment_ctime":1554788279,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1554788279","product_id":100017301,"comment_content":"八皇后那个代码有点疑问，如果所有的列都不满足isOK方法，没看到怎么回溯的","like_count":0,"discussions":[{"author":{"id":1168851,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d5/d3/4b0e8142.jpg","nickname":"Rolle","note":"","ucode":"6BC3DD2BFD9726","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26290,"discussion_content":"调用栈本身的回溯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570593370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234797,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/6d/9db752ce.jpg","nickname":"peng","note":"","ucode":"900E11E9B4D4F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3835,"discussion_content":"在八皇后中，是没有所有列都不满足isOK方法的情况的，你把八皇后改成四皇后试试，就会出现“所有的列都不满足isOK”的情况了，依然可以回溯，你可以调试一下。当前for循环执行完后若isOK都不满足，就会回到上一级cal8queens的for循环中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564848498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76888,"user_name":"半步崩拳","can_delete":false,"product_type":"c1","uid":1252412,"ip_address":"","ucode":"11D532E851D9CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/3c/752fc3e7.jpg","comment_is_top":false,"comment_ctime":1552739214,"is_pvip":false,"replies":[{"id":"28112","content":"放到前面你是指放到哪里呢？位置有可能会影响结果正确性呢。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552874367,"ip_address":"","comment_id":76888,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552739214","product_id":100017301,"comment_content":"前辈你好，我想请问一下在八皇后问题中，我将第25行中的自增自减符放在后面算出来的结果就只有32种，放在前面就是92种，这里前后不应该是一样的效果吗，小白求解答！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443487,"discussion_content":"放到前面你是指放到哪里呢？位置有可能会影响结果正确性呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552874367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74986,"user_name":"想当上帝的司机","can_delete":false,"product_type":"c1","uid":1239378,"ip_address":"","ucode":"D8251388854911","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/52/f07e9001.jpg","comment_is_top":false,"comment_ctime":1552348136,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552348136","product_id":100017301,"comment_content":"八皇后问题的时间复杂度是n^3吗    怎么分析得出比较容易理解","like_count":0},{"had_liked":false,"id":64372,"user_name":"syz","can_delete":false,"product_type":"c1","uid":1174704,"ip_address":"","ucode":"54AF17ACD72645","user_header":"https://static001.geekbang.org/account/avatar/00/11/ec/b0/4e22819f.jpg","comment_is_top":false,"comment_ctime":1548756368,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548756368","product_id":100017301,"comment_content":"八皇后就是穷举每个结果，输出所有符合的结果。可以这样理解嘛","like_count":0},{"had_liked":false,"id":63774,"user_name":"小柯基","can_delete":false,"product_type":"c1","uid":1173644,"ip_address":"","ucode":"6BD6F45AE5704F","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/8c/299bb7af.jpg","comment_is_top":false,"comment_ctime":1548496537,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1548496537","product_id":100017301,"comment_content":"待匹配串 acdcb<br>正则串 &quot;a*c?b&quot;<br>老师你写的正则匹配的那段代码，这个case过不了，应该返回false，你返回的是true","like_count":0,"discussions":[{"author":{"id":1440429,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fa/ad/3fa02ac7.jpg","nickname":"星期八","note":"","ucode":"D8C66E7F61B0D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189320,"discussion_content":"true没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582869303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1976,"discussion_content":"星号可以匹配cd，问号匹配0个字符。这样就是true","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563158552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518041,"avatar":"https://static001.geekbang.org/account/avatar/00/17/29/d9/4358d6fb.jpg","nickname":"猫猫","note":"","ucode":"46E5356348DA36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1700,"discussion_content":"确实是true呀，\n星号匹配cd，问号匹配空","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562827800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63015,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1548228184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548228184","product_id":100017301,"comment_content":"可以依次求每个物品的性价比，排成一个数组。之后每次放入性价比最高的，如果不行再回头取性价比第二的。<br>想当于回溯算法和贪心算法的结合","like_count":0},{"had_liked":false,"id":62890,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1548203207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548203207","product_id":100017301,"comment_content":"把for循环换成递归来控制，差点没理解对","like_count":0},{"had_liked":false,"id":61810,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1547806108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547806108","product_id":100017301,"comment_content":"麻将胡牌算法就是这么搞的","like_count":0},{"had_liked":false,"id":61448,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1547700371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547700371","product_id":100017301,"comment_content":"量子计算用的好像就是回溯, 枚举出所有可能","like_count":0},{"had_liked":false,"id":58413,"user_name":"wcf","can_delete":false,"product_type":"c1","uid":1182903,"ip_address":"","ucode":"9878E21D0EC18F","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/b7/1168b30a.jpg","comment_is_top":false,"comment_ctime":1547078197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547078197","product_id":100017301,"comment_content":"第11行用于产生序列n-1，n-2，...i","like_count":0},{"had_liked":false,"id":57908,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1546938616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546938616","product_id":100017301,"comment_content":"八皇这个问题，我之前是只算出一个解吧，满足就返回","like_count":0},{"had_liked":false,"id":56626,"user_name":"Geek_fbe6fe","can_delete":false,"product_type":"c1","uid":1250069,"ip_address":"","ucode":"E69AD55364C93E","user_header":"https://static001.geekbang.org/account/avatar/00/13/13/15/5dabb390.jpg","comment_is_top":false,"comment_ctime":1546509983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546509983","product_id":100017301,"comment_content":"作业题目解决方式：<br>是不是贪婪+回溯<br>按照价值从大到小排序，放入回溯算法中，获取所有符合情况的最大值","like_count":0},{"had_liked":false,"id":56548,"user_name":"Joshua 兆甲","can_delete":false,"product_type":"c1","uid":1244179,"ip_address":"","ucode":"473223055AC083","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/13/11f8062e.jpg","comment_is_top":false,"comment_ctime":1546485927,"is_pvip":false,"replies":[{"id":"20487","content":"可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546566519,"ip_address":"","comment_id":56548,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546485927","product_id":100017301,"comment_content":"老师，请问一下那种狼 羊 菜过河的策略求解问题，能否用回溯？<br>诸如给定一系列逻辑条件，求取最佳安排的问题，此类问题最佳的算法是什么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435111,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546566519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56524,"user_name":"w 🍍","can_delete":false,"product_type":"c1","uid":1228290,"ip_address":"","ucode":"F2386C971EC58B","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/02/43202976.jpg","comment_is_top":false,"comment_ctime":1546482112,"is_pvip":false,"replies":[{"id":"20491","content":"不 也是两种选择 放 or 不放","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546566662,"ip_address":"","comment_id":56524,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546482112","product_id":100017301,"comment_content":"背包问题好像第0个元素如果小于限制值是必放进去的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435093,"discussion_content":"不 也是两种选择 放 or 不放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546566662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55740,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1546275749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546275749","product_id":100017301,"comment_content":"第十一行的那个\tf(i + 1, cw, items, n, w); 同样没看懂，希望老师可以再详细解释下。","like_count":0},{"had_liked":false,"id":53772,"user_name":"Pluto","can_delete":false,"product_type":"c1","uid":1038251,"ip_address":"","ucode":"E292AFAD428135","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d7/ab/15c9b94e.jpg","comment_is_top":false,"comment_ctime":1545722013,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545722013","product_id":100017301,"comment_content":"又赶上进度了，开心，关于 KMP 算法那里，如果模式串是 aaaa 这种，岂不是查找效率很低，相当于一次移动一位？不知道我理解对没有？","like_count":0},{"had_liked":false,"id":53436,"user_name":"你有资格吗？","can_delete":false,"product_type":"c1","uid":1233534,"ip_address":"","ucode":"4758C5A190BABB","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/7e/bd8c372a.jpg","comment_is_top":false,"comment_ctime":1545644714,"is_pvip":false,"replies":[{"id":"19357","content":"比较全了吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545648938,"ip_address":"","comment_id":53436,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545644714","product_id":100017301,"comment_content":"背包问题代码没给全啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434138,"discussion_content":"比较全了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545648938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53327,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1545626486,"is_pvip":false,"replies":[{"id":"19359","content":"嗯嗯 我知道的 我写的时候就意识到你说的优化了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545649074,"ip_address":"","comment_id":53327,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545626486","product_id":100017301,"comment_content":"有个疑问：<br>示例代码中的以下部分在功能上是没问题的，但在语意上不够严谨：<br>else if (pattern[pj] == &#39;?&#39;) {<br>  rmatch(ti, pj+1, text, tlen); <br>  rmatch(ti+1, pj+1, text, tlen); <br>}<br>语句 rmatch(ti+1, pj+1, text, tlen); 在 ti 等于 tlen 时，ti + 1 大于tlen。并有可能在下次递归调用中 ti + 1 变得更大。所以改成这样可能更严谨：<br>else if (pattern[pj] == &#39;?&#39;) {<br>  rmatch(ti, pj+1, text, tlen); <br>  if ( ti &lt; tlen) {<br>    rmatch(ti+1, pj+1, text, tlen); <br>  }<br>}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434098,"discussion_content":"嗯嗯 我知道的 我写的时候就意识到你说的优化了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545649074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53109,"user_name":"铁丑-王立丰","can_delete":false,"product_type":"c1","uid":1021228,"ip_address":"","ucode":"F0CFDA492F164A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/2c/f254f684.jpg","comment_is_top":false,"comment_ctime":1545589473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545589473","product_id":100017301,"comment_content":"0-1背包问题的例子中，第11行不需要吧","like_count":0}]}